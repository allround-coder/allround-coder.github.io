{"pageProps":{"posts":[{"title":"실제 사용자 모니터링RUM","description":"","date":"2024-05-12 19:00","slug":"2024-05-12-RealUserMonitoringRUM","content":"\n\n애플리케이션의 최종 사용자 경험을 추적하고 측정합니다. 앱 성능 및 API 호출에 소요된 시간을 파악합니다. 웹사이트의 최종 사용자 경험을 향상시키는 데 도움이 되는 실행 가능한 데이터 중심 세부 정보를 제공합니다.\n\n![이미지](/assets/img/2024-05-12-RealUserMonitoringRUM_0.png)\n\n![이미지](/assets/img/2024-05-12-RealUserMonitoringRUM_1.png)\n\n## APM (Application Performance Monitoring/ Real user monitoring tool)—\n\n\n\n웹 애플리케이션 성능에 대한 통찰력을 얻는 데 도움이 되며 다양한 모니터링 기능을 활용합니다.\n\n- 실시간 가시성 - 응답 시간, 페이지 로드 시간, 페이지 조회수, 처리량 등 주요 지표를 추적하여 웹 사이트의 실시간 성능을 간단히 확인할 수 있습니다.\n- 지리별 사용자 경험 - 세계지도상에서 각 나라별로 웹 사이트의 성능을 시각화하여 웹 사이트 성능에 영향을 받고 있는 위치를 빠르게 파악할 수 있습니다. 응답 시간, 오류 횟수, 처리량을 분석하여 사용자가 영향을 받고 있는 지역 확인 가능합니다.\n\n![웹사이트 성능 모니터링](/assets/img/2024-05-12-RealUserMonitoringRUM_2.png)\n\n- 지연 거래 감지 - 웹 사이트의 페이지 조회수와 개별 거래에 대한 오류를 주의 깊게 살펴 잠재적인 문제를 식별할 수 있습니다.\n- 사용자 세션 추적 - 웹 사이트에 연결된 사용자 세션 수를 파악할 수 있습니다. 또한 각 세션의 상태를 파악하여 사용자 세션의 기간과 품질을 결정할 수 있습니다.\n- 스크립트 오류 감지 - 실시간으로 웹 사이트의 성능에 영향을 주는 JS 오류를 식별할 수 있습니다.\n\n\n\n\n![Monitoring solutions such as New Relic come with built-in dashboards. We can also build our own custom dashboards based on the metrics that matters most to us.\nother tools — AppDynamics Browser RUM, Retrace, Datadog](/assets/img/2024-05-12-RealUserMonitoringRUM_3.png)\n\n## How real user monitoring works\n\nReal user monitoring works by injecting code into an application to capture metrics while the application is in use. Client side applications are monitored by injecting Javascript code.\n\n\n\n네이티브 모바일 애플리케이션은 모니터링 라이브러리를 모바일 애플리케이션 패키지에 직접 추가하여 모니터링됩니다.","ogImage":{"url":"/assets/img/2024-05-12-RealUserMonitoringRUM_0.png"},"coverImage":"/assets/img/2024-05-12-RealUserMonitoringRUM_0.png","tag":["Tech"],"readingTime":2},{"title":"React 컴포넌트 라이프사이클 이해하기 React 컴포넌트의 생애 과정을 깊숙히 파헤쳐보기","description":"","date":"2024-05-12 18:58","slug":"2024-05-12-UnderstandingtheReactComponentLifecycleADeepDiveintotheLifeofaReactComponent","content":"\n\n![image](/assets/img/2024-05-12-UnderstandingtheReactComponentLifecycleADeepDiveintotheLifeofaReactComponent_0.png)\n\n세상에 있는 모든 것은 주기를 따릅니다. 식물이나 동물, 인간 모두가 그렇습니다. 그들은 태어나 성장하고 죽는 과정을 거침으로써 주기를 따르고 있습니다. React 컴포넌트 또한 주기를 따릅니다. 그들은 생성(마운트), 성장(업데이트), 그리고 소멸(언마운트)합니다. 이를 컴포넌트의 생명주기라고 부릅니다.\n\nReact 컴포넌트는 마운트, 업데이트, 언마운트의 세 가지 다른 단계를 가지고 있습니다. 각 단계마다 해당 컴포넌트의 생명주기에서 역할을 하는 특정 메서드가 있습니다. 이 메서드들은 클래스 기반 컴포넌트를 위한 것이며, 함수형 컴포넌트는 자체 생명주기 메서드를 가지고 있습니다.\n\n이 글에서는 React 컴포넌트 생명주기와 각 단계별 다른 메서드에 대해 자세히 알아보게 될 것입니다.\n\n\n\n위의 세 가지 단계를 이루는 메서드에 대해 자세히 알아봅시다.\n\n![이미지](/assets/img/2024-05-12-UnderstandingtheReactComponentLifecycleADeepDiveintotheLifeofaReactComponent_1.png)\n\n# 마운팅 단계\n\n마운팅 단계는 새 컴포넌트가 생성되어 DOM에 삽입되는 시점을 의미하며, 간단히 말해 리액트 컴포넌트의 실제 생애가 시작되는 시점입니다. 이 단계는 한 번만 발생하며, 종종 \"초기 렌더링\"이라고도 불립니다. 이 단계를 통과하기 위해 네 가지 라이프사이클 메서드가 호출됩니다: constructor, static getDerivedStateFromProps, render, 그리고 componentDidMount.\n\n\n\n![React Component Lifecycle](/assets/img/2024-05-12-UnderstandingtheReactComponentLifecycleADeepDiveintotheLifeofaReactComponent_2.png)\n\n생성자 메서드는 마운팅 단계 중에 가장 먼저 호출되는 메서드입니다. 이 메서드는 주로 컴포넌트의 상태를 초기화하고 컴포넌트 내에서 사용할 이벤트 처리기 메서드를 바인딩하는 데 사용됩니다. 생성자 메서드는 컴포넌트가 초기화될 때 호출되지만 렌더링되기 전에 호출됩니다. 컴포넌트에서 상태를 사용하려면 생성자에서 props를 인수로 사용하여 super(props) 함수를 호출하는 것이 중요합니다.\n\n초기화를 마친 후 호출되는 다음 함수는 static getDerivedStateFromProps()입니다. 이 메서드를 사용하면 컴포넌트가 속성 변경에 따라 상태를 업데이트할 수 있습니다. 이 메서드는 매우 드물게 사용되며 많은 오류를 일으킬 수 있으므로 주의해서 사용해야 합니다. 초보자로서는 필요 없고 사용을 피하는 것이 일반적인 규칙입니다.\n\n이 메서드는 상태 값을 속성 값으로 수정하는 데 사용됩니다. static getDerivedStateFromProps() 메서드는 두 개의 인수(props 및 state)를 허용하고 객체를 반환하거나 변경이 필요하지 않은 경우 null을 반환합니다. 이러한 값은 메서드에 직접 전달되므로 클래스의 인스턴스(또는 클래스의 다른 부분)에 액세스할 필요가 없으므로 정적 메서드로 간주됩니다.\n\n\n\n렌더 메소드는 클래스 기반 React 컴포넌트에서 유일하게 필요한 메소드입니다. getDerivedStateFromProps() 메소드 이후에 호출되며 실제로 모든 HTML을 렌더링하거나 삽입합니다.\n\n일반적으로 렌더 메소드는 최종적으로 렌더링될 JSX를 반환하지만, 다른 값을 반환할 수도 있습니다. 렌더 메소드에서는 상태를 수정하거나 브라우저와 직접적인 상호작용을 할 수 없으며 렌더 메소드에서 HTTP 요청을 보내는 것과 같은 부수 효과도 일어낼 수 없습니다. HTML을 작성하는 것으로 생각해보세요. 물론 JSX 형태로요.\n\ncomponentDidMount() 메소드는 컴포넌트가 처음으로 렌더링된 후 즉, 첫 번째 render() 사이클 이후 즉시 실행됩니다. 이 메소드는 API 호출과 같은 모든 네트워크 요청 처리 또는 응용 프로그램의 주요 구독을 설정하는 데 주로 사용됩니다. 일반적으로 componentDidMount()는 DOM 없이 수행 할 수없는 모든 설정을 수행하는 좋은 장소입니다.\n\n저는 버튼을 클릭할 때 카운트를 업데이트하는 간단한 카운터 앱이 있습니다.\n\n\n\n```js\nimport React from \"react\";\n\nclass ComponentDidMount extends React.Component {\n    constructor(props) {\n      super(props);\n      console.log('Constructor called');\n      this.state = {\n        count: 0\n      };\n    }\n  \n    static getDerivedStateFromProps(props, state) {\n      console.log('getDerivedStateFromProps called');\n      return null;\n    }\n  \n    componentDidMount() {\n      console.log('componentDidMount called');\n    }\n  \n    incrementCount = () => {\n      this.setState(prevState => ({\n        count: prevState.count + 1\n      }));\n    };\n  \n    render() {\n      console.log('render called');\n      return (\n        <div>\n          <h1>Counter App</h1>\n          <p>Count: {this.state.count}</p>\n          <button onClick={this.incrementCount}>Increment</button>\n        </div>\n      );\n    }\n  }\n  \n  export default ComponentDidMount\n```\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*q1GIAIm6PDfoe5F68vHrvA.gif)\n\n이 예시에서, 내 콘솔은 비어있지만 페이지를 새로고침하면 앱이 다시 렌더링되어 몇 가지 콘솔 메시지가 표시됩니다. 다음은 설명입니다.\n\n- 생성자가 호출되었음을 나타내는 콘솔 메시지가 처음으로 나타납니다. 또한 구성 요소의 상태를 0으로 설정된 count 속성으로 초기화합니다.\n- getDerivedStateFromProps가 호출되었음을 나타내는 두 번째 콘솔 메시지입니다. 그러나 이 특정 예시에서는 null을 반환하므로 프롬프트에 기반한 상태 업데이트가 없음을 나타냅니다.\n- 세 번째로 렌더 함수가 호출되었음을 나타내는 콘솔 메시지입니다. 모든 HTML을 렌더링하고 구성 요소의 상태에서 현재 카운트를 표시하며 incrementCount 메서드를 호출하는 onClick 이벤트 핸들러가 있는 버튼을 표시합니다.\n- componentDidMount가 호출되었음을 나타내는 네 번째 콘솔 메시지입니다.\n- \"Increment\" 버튼을 클릭하면 incrementCount 메서드가 상태를 업데이트하고 React 구성 요소 라이프사이클의 업데이팅 단계를 트리거합니다. 이 단계는 마운팅 단계와 분리된 단계이며 렌더 및 getDerivedStateFromProps와 같은 메서드를 포함합니다.\n\n\n\n# 업데이트 단계\n\n![이미지](/assets/img/2024-05-12-UnderstandingtheReactComponentLifecycleADeepDiveintotheLifeofaReactComponent_3.png)\n\n업데이트 단계는 컴포넌트에 업데이트가 발생하거나 다시 렌더링될 때입니다. 이 단계는 프롭스나 상태가 업데이트될 때 트리거됩니다.\n\n또한 다음 메서드를 포함하는 컴포넌트일 때도 트리거될 수 있습니다:\n\n\n\ngetDerivedStateFromProps(), shouldComponentUpdate(), render(), getSnapshotBeforeUpdate(), 그리고 componentDidUpdate().\n\ngetDerivedStateFromProps()와 render()는 이전에 다루어졌으므로, 이 섹션에서는 다른 세 가지 메서드에 초점을 맞춥니다.\n\n이것도 또 다른 거의 사용되지 않는 라이프사이클 메서드입니다. 성능 최적화를 위해 특별히 사용됩니다. 이 메서드를 사용하면 컴포넌트가 프롭스나 상태의 변경으로 인해 업데이트 되어야 하는지 여부를 제어할 수 있습니다. 기본적으로 컴포넌트는 상태나 프롭이 업데이트되면 항상 다시 렌더링됩니다. 이 메서드는 컴포넌트가 업데이트되어야 하는지 여부를 결정하기 위해 true 또는 false를 반환할 수 있습니다. 또한 이 메서드는 nextProps와 nextState를 인수로 받기 때문에 항상 컴포넌트의 현재 프롭 및 상태 값을 비교할 수 있습니다.\n\ngetSnapshotBeforeUpdate() 메서드는 현재 업데이트의 변경 사항이 DOM에 적용되기 직전에 호출됩니다. 이 메서드에서 반환하는 값은 componentDidUpdate() 메서드의 세 번째 매개변수로 전달됩니다. 이 메서드는 render 메서드 이후에 호출되고 componentDidUpdate 이전에 호출됩니다. 또한 이것도 거의 사용되지 않는 메서드 중 하나입니다.\n\n\n\n이 방법은 이 단계에서 마지막으로 호출되는 메서드입니다. 이전 방법과 마찬가지로 이전 props 및 state 값을 인수로받지만 반환값 getSnapshotBeforeUpdate()도 세 번째 인수로 받습니다(있는 경우).\n\n일반적으로 이전 및 현재 props 및 state 값을 비교하는 조건에 따라 더 많은 fetch 요청을 만들기 위해 사용됩니다. 따라서 setState를 호출할 수 있지만 조건문 내에 있어야 합니다.\n\n```js\nimport React from \"react\";\n\nclass UpdatingExample extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        name: 'John',\n        changed: false\n      };\n      console.log('Constructor called');\n    }\n  \n    static getDerivedStateFromProps(props, state) {\n      console.log('getDerivedStateFromProps called');\n      return null;\n    }\n  \n    shouldComponentUpdate(nextProps, nextState) {\n      console.log('shouldComponentUpdate called');\n      return true;\n    }\n\n    getSnapshotBeforeUpdate(nextProps, nextState) {\n        console.log('getSnapshotBeforeUpdate called');\n        return null;\n    }\n  \n    componentDidUpdate(prevProps, prevState) {\n      console.log('componentDidUpdate called');\n    }\n  \n    changeName = () => {\n      this.setState({\n        name: 'Jane',\n        changed:true\n      });\n    };\n  \n    render() {\n      console.log('render called');\n      return (\n        <div>\n          <h1>Updating Example</h1>\n          <div>Name {this.state.changed ? <h3>{this.state.name}</h3>: <p>{this.state.name}</p>}</div>\n          <button onClick={this.changeName}>Change Name</button>\n        </div>\n      );\n    }\n  }\n\n  export default UpdatingExample\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*AkNuxR9njfksseB11gOdvA.gif\" />\n\n\n\n초기에 RenderingExample 컴포넌트가 렌더링되고 나중에 업데이트될 때, 다음과 같은 메서드 호출 순서가 발생하며 해당 메서드의 메시지가 콘솔에 출력됩니다:\n\n1. 초기 렌더링:\n\n   - constructor가 호출됩니다.\n   \n   - getDerivedStateFromProps가 호출됩니다.\n\n\n\n- shouldComponentUpdate 가 호출됩니다.\n- render 가 호출됩니다.\n\n2. 업데이트:\n\n- \"이름 변경\" 버튼이 클릭되면 changeName 이 호출되어 새 이름으로 상태가 업데이트됩니다.\n\n\n\n- 변경 사항이 있을 경우 getDerivedStateFromProps가 다시 호출됩니다.\n\n- shouldComponentUpdate가 다시 호출됩니다.\n\n- 업데이트된 UI를 다시 렌더링하기 위해 render가 다시 호출됩니다.\n\n- 구성 요소가 업데이트되었으므로 componentDidUpdate가 호출됩니다.\n\n\n\n# 언마운팅 단계\n\n언마운팅 단계는 React 컴포넌트의 라이프사이클에서 마지막 단계입니다. 이 단계는 컴포넌트가 DOM에서 제거되어 더 이상 렌더링되지 않거나 접근할 수 없는 상태를 가리킵니다. 이 단계에서 React는 컴포넌트 및 연결된 리소스가 DOM 트리에서 제대로 제거되도록 하기 위해 정리 작업을 수행합니다.\n\n이는 컴포넌트가 더 이상 필요하지 않을 때, 부모 컴포넌트가 자식 컴포넌트를 포함하지 않고 다시 렌더링될 때 또는 애플리케이션이 다른 페이지나 뷰로 이동할 때와 같은 다양한 이유로 발생할 수 있습니다. 이 단계에는 하나의 메서드만 있습니다.\n\ncomponentWillUnmount() 메서드는 컴포넌트가 DOM에서 제거되기 직전에 호출됩니다. 이 메서드를 사용하여 타이머를 취소하거나 이벤트 리스너를 제거하거나 마운팅 단계에서 설정한 데이터 구조를 제거하는 등 필요한 정리 작업을 수행할 수 있습니다. 모든 컴포넌트의 상태와 props이 파괴됩니다.\n\n\n\n```js\nimport React from \"react\";\n\nclass Child extends React.Component {\n    componentDidMount() {\n      console.log('Component mounted');\n    }\n  \n    componentWillUnmount() {\n      console.log('Component unmounted');\n    }\n  \n    render() {\n      return (\n        <div>\n          <p>자식 컴포넌트 내용</p>\n        </div>\n      );\n    }\n  }\n\nexport default class UnmountingExample extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        showComponent: true\n      };\n    }\n    \n    toggleComponent = () => {\n      this.setState(prevState => ({\n        showComponent: !prevState.showComponent\n      }));\n    };\n\n    render() {\n      return (\n        <div>\n          <h1>메인 컴포넌트</h1>\n          {this.state.showComponent && <Child />}\n          <button onClick={this.toggleComponent}>\n            {this.state.showComponent ? '언마운트' : '마운트'}\n          </button>\n        </div>\n      );\n    }\n}\n```\n\n아래는 출력 내용입니다,\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*KkomvSyjYradmjZ1G7f_wQ.gif\" />\n\n자식 컴포넌트는 언마운트될 컴포넌트를 나타냅니다. componentDidMount와 componentWillUnmount 라이프사이클 메소드를 포함하고 있습니다. 두 메소드에는 콘솔에 로그를 남기는 메시지가 포함되어 있습니다.\n\n\n\n`UnmountingExample` 컴포넌트는 `showComponent` 상태에 따라 조건부로 `Child` 컴포넌트를 렌더링하는 부모 컴포넌트입니다. \"Mount\" 버튼을 클릭하면 `showComponent` 상태가 변경되어 `Child` 컴포넌트가 렌더링되거나 마운트해제됩니다.\n\n위의 코드를 실행하면 다음과 같은 동작을 볼 수 있습니다:\n\n1. 초기에는 `Child` 컴포넌트가 렌더링되고 콘솔에 \"Component mounted\" 메시지가 기록됩니다.\n\n2. \"Unmount\" 버튼을 클릭하면 `Child` 컴포넌트가 마운트 해제되고 콘솔에 \"Component unmounted\" 메시지가 기록됩니다.\n\n\n\n3. \"Mount\" 버튼을 다시 클릭하면 자식 컴포넌트가 다시 렌더링되고 \"컴포넌트가 마운트됨\" 메시지가 콘솔에 로깅됩니다.\n\n# 결론\n\nReact에서 컴포넌트는 라이프사이클을 구성하는 세 가지 다른 단계에 진입할 수 있습니다. 이 단계는 마운트, 업데이트 및 언마운트입니다. 각 단계에는 라이프사이클 메서드가 호출되며, 이 메서드를 통해 컴포넌트의 프롭과 상태와 같은 다양한 내용에 대해 작업하거나 실제로 컴포넌트를 DOM에 마운트하는 것(render 메서드)이 가능합니다. 그러나 이러한 메서드는 클래스 기반 컴포넌트에만 해당됩니다.\n\n읽어 주셔서 감사합니다!\n\n\n\n만나서 반가워요 😊\n\n# 참고 자료\n\n참고 자료 1\n\n참고 자료 2 \n\n\n\n참고 3\n\n표지","ogImage":{"url":"/assets/img/2024-05-12-UnderstandingtheReactComponentLifecycleADeepDiveintotheLifeofaReactComponent_0.png"},"coverImage":"/assets/img/2024-05-12-UnderstandingtheReactComponentLifecycleADeepDiveintotheLifeofaReactComponent_0.png","tag":["Tech"],"readingTime":10},{"title":"매터리얼 UI 컴포넌트와 테마를 사용자 정의하는 현대적인 방법","description":"","date":"2024-05-12 18:56","slug":"2024-05-12-CustomizeMaterialUIComponentsandThemeAModernApproach","content":"\n\n## Bit와 Material UI를 사용하여 초모듈화된 컴포넌트 라이브러리 구축하기\n\n![이미지](/assets/img/2024-05-12-CustomizeMaterialUIComponentsandThemeAModernApproach_0.png)\n\n초모듈화된 라이브러리는 전통적인 의미의 라이브러리가 아니라 독립적인 컴포넌트의 모음입니다. 이러한 구조는 다양한 이점을 제공합니다.\n\n## \"라이브러리\"에는 다음이 포함됩니다:\n\n\n\n- 완전한 유형 지원\n- 각 구성요소에 대한 미리보기 (SB 스토리와 유사) 및 자동 문서화\n- 추가적인 타이포그래피 변형을 포함한 사용자 정의 '테마 만들기'\n- 사용자 정의 '기본' 테마, '다크 테마', '테마 공급자' 및 '다크 모드 토글'\n- '버튼' 구성요소, '타이포그래피' 구성요소 등\n- 사용자 정의 재사용 가능한 '리액트 개발 환경'\n\n![이미지](/assets/img/2024-05-12-CustomizeMaterialUIComponentsandThemeAModernApproach_1.png)\n\n\"독립 구성 요소\"라는 것은 보통 비트 구성 요소를 의미합니다. 이 블로그에서도 마찬가지이므로 Bit가 설치되어 있고 Bit 작업 공간이 초기화되어 있는지 확인해 주세요.\n\n```js\nnpx @teambit/bvm install\n```  \n\n\n\n\n비트 새 basic my-workspace\n\n\n## Bit 워크스페이스로 완전한 솔루션 복제하기\n\n빠르게 시작하려면이 범위의 구성 요소를 자체 Bit 워크스페이스로 복제합니다 (비트 워크스페이스를 만들고 해당 위치로 cd해야합니다).\n\nMY_BIT_PLATFORM_ACCOUNT를 비트 플랫폼에서의 사용자 이름 또는 비트 조직 이름으로 바꿉니다. MY_SCOPE를 범위 이름으로 바꿉니다. 이미 설정된 것이 없다면 새로운 범위를 만듭니다.\n\n\n\n```js\ncd my-workspace\n```\n\n```js\nbit scope fork learnbit-react.custom-mui-lib MY_BIT_PLATFORM_ACCOUNT.MY_SCOPE\n```\n\n다음을 실행하여 Workspace UI에서 구성 요소를 탐색하십시오:\n\n```js\nbit start\n```\n\n\n\n이제 작업 공간에는 모든 구성 요소를 수정하고 내 스코프에 내보낼(push) 수 있는 컴포넌트가 모두 준비되어 있습니다.\n\n```js\nbit tag -m \"첫 번째 버전\"\nbit export\n```\n\n다양한 구성 요소를 검토하고 해당 구현 방식에 대한 이유를 이해해 보겠습니다.\n\n# 버튼\n\n\n\n어떤 타사 라이브러리를 사용자 정의할 때를 인도하는 하나의 원칙은 당신, 라이브러리의 유지 보수자,가 그 인터페이스와 구현에 대한 완전한 통제권을 가져야 한다는 것입니다.\n\n사용자가 무엇을 사용자 정의할 수 있는지와 무엇을 사용자가 사용자 정의할 수 없는지 선택할 수 있어야 합니다. 또한 컴포넌트의 구현을 변경하면서 그 인터페이스에 파괴적인 변화를 일으키지 않도록 할 수 있어야 합니다.\n\n```js\n/**\n * @componentId: learnbit-react.custom-mui-lib/actions/button\n * @filename: button.tsx\n */\n\nimport {\n  Button as BaseButton,\n  type ButtonProps as BaseButtonProps,\n} from '@mui/material';\n\nexport type ButtonProps = {} & BaseButtonProps;\n\nexport function Button({ children, ...rest }: ButtonProps) {\n  return <BaseButton {...rest}>{children}</BaseButton>;\n}\n```\n\n## 컴포넌트 미리보기\n\n\n\n버튼 구성 요소 미리보기는 몇 가지 변형을 제시합니다:\n\n```js\n/**\n * @componentId: learnbit-react.custom-mui-lib/actions/button\n * @filename: button.compositions.tsx\n */\n\nimport { Button } from './button.js';\n\nexport const DefaultButton = () => {\n  return <Button>Click me</Button>;\n};\n\nexport const ContainedButton = () => {\n  return <Button variant=\"contained\">Click me</Button>;\n};\n\nexport const OutlineddButton = () => {\n  return <Button variant=\"outlined\">Click me</Button>;\n};\n```\n\n![버튼 구성요소 이미지](/assets/img/2024-05-12-CustomizeMaterialUIComponentsandThemeAModernApproach_2.png)\n\n## 구성 요소 설명\n\n\n\nBit은 컴포넌트의 API 참조를 자동으로 생성합니다 (로컬에서 컴포넌트 페이지의 'API 참조' 탭 또는 Bit 플랫폼에서 확인 가능합니다). 자동 생성된 문서는 수동으로 작성된 문서로 확장할 수 있습니다. 이 문서는 라이브 플레이그라운드를 사용하여 다양한 버튼 사용 방법을 제공합니다.\n\n```js\n/**\n * @componentId: learnbit-react.custom-mui-lib/actions/button\n * @filename: button.docs.mdx\n */\n\n---\ndescription: MUI 버튼\n---\n\nimport { Button } from './button.js';\n\n버튼 컴포넌트 내에서 표시하려는 텍스트를 제공하세요:\n\n() => <Button>Click me</Button>;\n``\n\n## 독립적인 버전 관리\n\n우리 라이브러리는 독립적인 Bit 컴포넌트 모음이기 때문에 각 컴포넌트의 변경 사항은 컴포넌트의 히스토리 로그와 의미적 버전 관리 (주요.부.패치)에 반영됩니다.\n\n\n\n<img src=\"/assets/img/2024-05-12-CustomizeMaterialUIComponentsandThemeAModernApproach_3.png\" />\n\nbit tag actions/button -m \"add custom docs\" --patch\nbit export\n\n# Typography\n\n<img src=\"/assets/img/2024-05-12-CustomizeMaterialUIComponentsandThemeAModernApproach_4.png\" />\n\n\n\n우리의 타이포그래피 컴포넌트는 MUI의 기본 타이포그래피 변형을 확장하여 손글씨 변형이 추가되었습니다.\n\n이 \"라이브러리\"는 모듈식이고 조립이 가능하도록 구축되었기 때문에 해당 확장을 지원하는 타입 선언 (d.ts)을 프로젝트 루트에 배치하지 않고, 이 기능을 담당하는 컴포넌트가 기본 타입을 확장하도록 할 것입니다. 이렇게 하면 이 컴포넌트를 사용하는 구체적인 프로젝트에 관계없이 모든 것이 문제없이 작동됩니다.\n\n/**\n * @componentId: learnbit-react.custom-mui-lib/typography/typography\n * @filename: create-theme.ts\n */\n\nimport type { CSSProperties } from 'react';\nimport {\n  Typography as BaseTypography,\n  type TypographyProps as TypographyPropsMUI,\n  type TypographyVariant as BaseTypographyVariant,\n  type TypographyVariantsOptions as BaseTypographyVariantsOptions,\n} from '@mui/material';\n\n/**\n * Typography 컴포넌트는 'handwriting' 변형으로 확장되었습니다.\n */\n\nexport type TypographyVariant = 'handwriting' | BaseTypographyVariant;\n\ndeclare module '@mui/material/Typography' {\n  interface TypographyPropsVariantOverrides {\n    handwriting: true;\n  }\n}\n\nexport interface TypographyProps extends TypographyPropsMUI {\n  variant?: TypographyVariant;\n}\n\nexport function Typography({ children, ...rest }: TypographyProps) {\n  return <BaseTypography {...rest}>{children}</BaseTypography>;\n}\n\n/**\n * 이 인터페이스는 테마에서 타이포그래피 변형을 정의하는 데 사용될 수 있습니다.\n */\nexport interface TypographyVariantsOptions\n  extends BaseTypographyVariantsOptions {\n  handwriting?: CSSProperties;\n}\n\n# 테마 생성\n\n\n\n저희 맞춤형 '테마 생성' 컴포넌트는 MUI를 확장하여 추가 테마 옵션을 제공합니다. 이 경우에는 새로운 타이포그래피 변형이 포함됩니다. 이를 통해 저희는 확장된 스키마에 따라 새로운 테마를 생성할 수 있습니다.\n\n/**\n * @componentId: learnbit-react.custom-mui-lib/theme/create-theme\n * @filename: create-theme.ts\n */\n\nimport type { Theme } from \"@mui/material\";\nimport { createTheme as createThemeBase } from \"@mui/material/styles\";\nimport type { ThemeOptions } from \"./theme-options.js\";\n\nexport function createTheme(options: ThemeOptions, ...args: object[]): Theme {\n  return createThemeBase(options, ...args);\n}\n\n저희 테마 옵션은 저희 맞춤 타이포그래피 컴포넌트가 제공하는 타이포그래피 변형으로 확장됩니다.\n\n/**\n * @componentId: learnbit-react.custom-mui-lib/theme/create-theme\n * @filename: theme-options.ts\n */\n\nimport type { ThemeOptions as BaseThemeOptions } from \"@mui/material\";\nimport type { TypographyVariantsOptions } from \"@learnbit-react/custom-mui-lib.typography.typography\";\n\n/**\n * 테마 옵션을 추가로 확장하여 타이포그래피 변형을 제공합니다.\n */\nexport interface ThemeOptions extends BaseThemeOptions {\n  typography?: TypographyVariantsOptions;\n}\n\n\n\n# 사용자 정의 ‘default’ 테마\n\n우리의 사용자 정의 테마는 추가 속성(새로운 타이포그래피 유형)이 있는 테마를 생성하기 위해 사용자 정의 ‘create-theme’ 컴포넌트를 사용합니다:\n\n/**\n * @componentId: learnbit-react.custom-mui-lib/theme/default-theme\n * @filename: default-theme.ts\n */\n\nimport {\n  createTheme,\n  type ThemeOptions,\n} from \"@learnbit-react/custom-mui-lib.theme.create-theme\";\n/** 우리 글꼴을 불러오는 `@import` 문을 반환합니다 */\nimport { getDefaultFonts } from \"@learnbit-react/custom-mui-lib.typography.get-default-fonts\";\n\nexport function defaultTheme(): ThemeOptions {\n  return createTheme({\n    components: {\n      MuiCssBaseline: {\n        /**\n         * 전역 CSS 오버라이드\n         * 기본 글꼴을 즉시 불러옵니다\n         */\n        styleOverrides: getDefaultFonts(),\n      },\n    },\n    palette: {\n      mode: \"light\",\n      primary: {\n        main: \"#4d64a8\",\n     // ...\n    },\n    typography: {\n      fontFamily: \"Outfit, sans-serif\",\n      /* 이것은 우리의 사용자 정의 타이포그래피 변형입니다 */\n      handwriting: {\n        fontFamily: \"Handlee, cursive\",\n      },\n    },\n  });\n}\n\n# 사용자 정의 ‘dark’ 테마\n\n\n\n‘다크’ 테마는 해당 테마를 확장하고 사용자 정의하는 값을/디자인 토큰으로 구성됩니다. 이 경우 ‘기본’ 테마가 ‘다크’ 테마에 의해 확장되지만 동일한 패턴을 사용하여 어떤 테마든 어떤 테마 플레이버로 확장(또는 추가 확장)할 수 있습니다.\n\n/**\n * @componentId: learnbit-react.custom-mui-lib/theme/dark-theme\n * @filename: dark-theme.ts\n */\n\n/* 사용자 정의 및 확장할 테마를 가져옵니다 */\nimport { defaultTheme } from \"@learnbit-react/custom-mui-lib.theme.default-theme\";\nimport {\n  createTheme,\n  type ThemeOptions,\n} from \"@learnbit-react/custom-mui-lib.theme.create-theme\";\n\nexport function darkTheme(): ThemeOptions {\n  return createTheme(\n  /* 확장할 테마 */\n  defaultTheme(), \n  /* 이 테마를 위한 사용자 정의 값 */\n  {\n    palette: {\n      type: \"dark\",\n      primary: {\n        main: \"#6580f9\",\n      },\n      // ...\n    },\n  });\n}\n\n# 재사용 가능한 리액트 개발 환경\n\nBit 컴포넌트는 컴파일러, 린터, 테스터 등을 지원하는 재사용 가능한 개발 환경(‘env’)을 사용하여 개발됩니다. 이 특정 컴포넌트 개발 환경은 Bit의 기본 리액트 개발 환경을 확장합니다.\n\n\n\n우리 사용 사례에는 기본 구성을 변경할 필요가 없습니다. 그러나 우리는 매번 테마 공급자를 수동으로 설정하는 시간을 절약하고 또한 표준화된 미리보기 컨텍스트를 보장하기 위해 우리의 모든 컴포넌트 미리보기를 테마로 래핑하는 재사용 가능한 env가 필요합니다.\n\n/**\n * @componentId: learnbit-react.custom-mui-lib/dev/react-mui\n * @filename: preview/mounter.ts\n */\n\nimport React from 'react';\nimport { createMounter } from '@teambit/react.mounter';\n/* 우리의 사용자 정의 테마 공급자를 가져옵니다 */\nimport { ThemeProvider } from '@learnbit-react/custom-mui-lib.theme.theme-provider';\n\n/**\n * 컴포넌트 미리보기에 필요한 컨텍스트를 제공합니다.\n * 이 경우, 사용자 정의 MUI 테마입니다.\n */\nexport function MyReactProvider({ children }: { children: React.ReactNode }) {\n  return <ThemeProvider>{children}</ThemeProvider>;\n}\n\n우리는 이 env를 workspace.jsonc 구성 파일에 설정하여 새로운 컴포넌트가 이 env에서 제공하는 템플릿을 사용하여 생성되도록하고(그리고 자동으로 이 env를 env로 설정)하는 것을 보장할 수 있습니다:\n\n/**\n * @filename: {workspace-root}/workspace.jsonc\n */\n\n{\n  // ...\n    \"teambit.generator/generator\": {\n    \"envs\": [\n      /**\n       * `learnbit-react.custom-mui-lib`를 \n       * 자체 `BIT_CLOUD_ACCOUNT.SCOPE_NAME`으로 교체해야 합니다.\n      \"learnbit-react.custom-mui-lib/dev/react-mui\"\n    ]\n  },\n}\n\n\n\n예를 들어, 이 'slider' 컴포넌트는 다음과 같은 개발 환경을 사용하여 생성됩니다:\n\n$ bit create react actions/slider\n\n생성된 컴포넌트가 올바른 환경을 사용하여 생성되었음을 확인하는 출력:\n\n1 개의 컴포넌트가 생성되었습니다\n\nlearnbit-react.custom-mui-lib/actions/slider\n    위치: custom-mui-lib/actions/slider\n    환경: learnbit-react.custom-mui-lib/dev/react-mui@0.0.4 (템플릿에서 설정됨)\n    패키지: @learnbit-react/custom-mui-lib.actions.slider\n\n\n\n![Customize Material UI Components and Theme: A Modern Approach](/assets/img/2024-05-12-CustomizeMaterialUIComponentsandThemeAModernApproach_5.png)","ogImage":{"url":"/assets/img/2024-05-12-CustomizeMaterialUIComponentsandThemeAModernApproach_0.png"},"coverImage":"/assets/img/2024-05-12-CustomizeMaterialUIComponentsandThemeAModernApproach_0.png","tag":["Tech"],"readingTime":9},{"title":"React 애플리케이션 성능 향상을 위한 클라이언트 측 타임아웃 처리 방법","description":"","date":"2024-05-12 18:55","slug":"2024-05-12-EnhancingReactApplicationPerformancewithClient-SideTimeoutHandling","content":"\n\n웹 개발의 동적인 세계에서 성능 최적화와 사용자 경험의 원할한 유지가 최우선 과제입니다. 비동기 요청을 처리할 때 성능에 상당한 영향을 미치는 과감실 처리에 대해 종종 간과되는 측면 중 하나입니다. 이 블로그 포스트에서는 JavaScript에서 Axios를 사용하여 클라이언트 측 타임아웃 처리를 통해 웹 애플리케이션의 성능과 신뢰성을 향상시키는 방법에 대해 살펴보겠습니다.\n\n# 클라이언트 측 타임아웃 처리를 왜 해야 하는가요?\n\n- 블로킹 방지: 기대 시간을 초과하는 동기식 요청은 다른 작업을 차단하여 응답성이 감소하고 성능이 저하될 수 있습니다.\n- 빠른 오류 복구: 응답이 없는 서버로부터 무기한 대기하는 것은 나쁜 사용자 경험으로 이어질 수 있습니다. 클라이언트 측 타임아웃은 기대 응답 시간을 초과하는 요청을 빠르게 취소함으로써 빠른 오류 복구를 제공합니다.\n- 리소스 소비 감소: 오랜 시간 동안 실행되는 요청은 네트워크 대역폭, 서버 리소스 및 클라이언트 측 메모리를 소비합니다. 지정된 시간 초과하는 요청을 취소함으로써 리소스를 절약하여 성능과 확장성을 향상시킬 수 있습니다.\n- 사용자 경험 향상: 성능은 사용자 경험에 직접적으로 영향을 미칩니다. 클라이언트 측 타임아웃을 통해 사용자는 지연이 줄어들고 더 빠른 응용 프로그램을 경험할 수 있어 만족도와 참여도가 높아집니다.\n- 오류 허용성 개선: 클라이언트 측 타임아웃은 네트워크 오류나 서버 타임아웃과 같은 예기치 않은 상황을 고품질로 처리하여 전체 응용 프로그램의 탄력성을 향상시킵니다.\n\n# Axios를 사용한 클라이언트 측 타임아웃이 성능을 향상시키는 방법\n\n\n\n이제, Axios를 사용하여 클라이언트 측 타임아웃 처리를 구현하는 방법을 살펴보겠습니다. Axios는 JavaScript를 위한 인기있는 HTTP 클라이언트입니다.\n\n```js\nimport axios from \"axios\";\n\nconst API_BASE_URL = \"https://jsonplaceholder.typicode.com/\";\n\nconst loginClient = axios.create({\n    baseURL: API_BASE_URL\n});\n\nloginClient.interceptors.request.use(request => {\n    request.headers[\"Accept\"] = \"application/json\";\n    return {\n        ...request,\n        signal: newAbortSignal(2000)\n    };\n}, error => {\n    console.log(\"오류 발생\", error);\n});\n\nfunction newAbortSignal(timeoutMs) {\n    const abortController = new AbortController();\n    setTimeout(() => abortController.abort(), timeoutMs || 0);\n    return abortController.signal;\n}\n\nasync function fetchPosts(req) {\n    try {\n        const posts = await loginClient({ url: \"posts\" });\n        return posts;\n    } catch (error) {\n        console.log(\"오류\", error);\n        return { \"data\": { \"error\": true, \"message\": \"서버가 응답하지 않습니다.\" } };\n    }\n}\n\nconst postService = {\n    fetchPost: fetchPosts\n};\n\nexport { postService };\n```\n\n이 코드에서:\n\n- API를 가리키는 기본 URL이 있는 Axios 인스턴스 loginClient를 생성합니다.\n- Interceptor가 설정되어 요청에 타임아웃 시그널이 부착되어서, 서버가 2000밀리초 이내에 응답하지 않으면 취소됩니다.\n- newAbortSignal 함수는 지정된 기간 후 요청이 취소되도록 타임아웃이 있는 새로운 AbortController 인스턴스를 생성합니다.\n- fetchPosts 함수는 API에서 게시물을 비동기적으로 가져옵니다. 요청이 성공하면 가져온 게시물을 반환하고, 타임아웃 또는 네트워크 실패와 같은 오류가 발생하면 해당 오류를 잡아서 사용자 정의 오류 응답을 반환합니다.\n\n\n\n클라이언트 측에서의 타임아웃은 요청을 다시 시도하면 성공할 수 있는 경우에 도움이 됩니다. 예를 들어, 백엔드가 3개의 서버에서 호스팅되고 있고 1개의 서버가 응답하지 않는 경우, 요청을 취소하고 다시 시도하는 것이 더 나은 선택입니다.","ogImage":{"url":"/assets/img/2024-05-12-EnhancingReactApplicationPerformancewithClient-SideTimeoutHandling_0.png"},"coverImage":"/assets/img/2024-05-12-EnhancingReactApplicationPerformancewithClient-SideTimeoutHandling_0.png","tag":["Tech"],"readingTime":3},{"title":"React를 사용하여 파일 업로더 만들기","description":"","date":"2024-05-12 18:54","slug":"2024-05-12-BuildingaFileUploaderwithReact","content":"\n\n<img src=\"/assets/img/2024-05-12-BuildingaFileUploaderwithReact_0.png\" />\n\n파일 업로드는 이미지, 비디오 및 파일을 웹 서버에 올리는 과정입니다. 이는 클라이언트 기기의 사용자가 파일을 서버에 업로드하려는 것을 의미합니다. 파일을 웹 애플리케이션에 신속하고 효율적으로 업로드하는 능력은 중요합니다.\n\nReact는 개발자가 상호 작용적이고 원활한 웹 애플리케이션을 구축하는 데 도움이 되는 인기 있는 JavaScript 프레임워크입니다. 이 글은 React를 사용하여 파일을 업로드하는 방법에 대한 단계별 가이드를 제공할 것입니다.\n\n파일 업로드의 중요성\n\n\n\n- 파일 업로드는 데이터 수집을 효율적이고 편리하게 해주는 과정을 제공합니다.\n- 페이스북, 트위터, 인스타그램 등 소셜 미디어 플랫폼들은 사용자 생성 콘텐츠에 크게 의존하고 있습니다. 파일 업로더 없이는 사용자가 사진, 비디오 및 기타 파일을 업로드할 수 없어 이러한 플랫폼이 상호작용이 적고 따분하며 매력이 부족해질 것입니다.\n- 파일 업로드는 오류 발생 가능성이 있고 수동 데이터 수집 및 처리와 비교하여 시간을 절약합니다.\n- 파일 업로드 기능이 없다면 Dropbox 및 Google 드라이브와 같은 클라우드 저장소 서비스가 존재하지 않았을 것입니다. 이러한 애플리케이션들은 사용자가 파일을 원활하게 업로드, 저장 및 공유할 수 있도록 돕습니다.\n\n문서 공유, 이력서 업로드, 데이터 가져오기 또는 내보내기, 미디어 공유, 클라우드 저장소 서비스 등에서 파일 업로더가 사용됩니다.\n\nReact.js에서 기본 파일 업로드 구성 요소 만들기\n\n이는 'file' 유형의 입력을 포함한 양식을 생성하는 것을 포함합니다. 간단한 예제는 아래에 표시되어 있습니다.\n\n\n\n```js\nimport React from 'react';\n\nclass FileUpload extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedFile: null,\n    };\n  }\n\n  onFileChange = event => {\n    this.setState({ selectedFile: event.target.files[0] });\n  };\n\n  onFileUpload = () => {\n    // formData 객체 생성\n    const formData = new FormData();\n\n    // formData 객체 업데이트\n    formData.append(\n      \"myFile\",\n      this.state.selectedFile,\n      this.state.selectedFile.name\n    );\n\n    // 업로드된 파일의 세부 정보 출력\n    console.log(this.state.selectedFile);\n\n    // 백엔드 API로 요청 전송\n    // formData 객체 전송\n    // axios.post(\"api/uploadfile\", formData);\n  };\n\n  render() {\n    return (\n      <div>\n        <h3>React를 이용한 파일 업로드!</h3>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>\n            업로드!\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FileUpload;\n```\n\n이 예제에서는 컴포넌트의 selectedFile 상태가 사용자 입력으로부터 파일 객체를 보유합니다. 사용자가 파일을 선택하면 onFileChange 함수가 트리거되어 선택한 파일로 selectedFile 상태를 업데이트합니다.\n\n사용자가 `업로드` 버튼을 클릭하면 onFileUpload 함수가 트리거됩니다. 이 함수는 FormData 객체를 생성하고 선택한 파일을 추가합니다. FormData 객체는 그 후 HTTP 요청을 사용하여 서버에 전송할 수 있습니다.\n\n이 예제에서는 파일 세부 정보를 콘솔에 로깅하는 것만 있습니다. 실제 시나리오에서는 formData를 서버로 전송하기 위해 axios.post 함수를 사용할 것입니다.\n\n\n\n# 파일 업로더 핸들러\n\nReact 파일 업로더 핸들러를 작성하는 것은 몇 가지 단계를 포함합니다. 이러한 단계는 다음과 같습니다:\n\n- 파일 입력 요소(`input type=\"file\"`)를 포함하는 컴포넌트를 만듭니다. 이 컴포넌트를 통해 사용자가 업로드하려는 파일을 선택할 수 있습니다.\n\n```js\nimport React from 'react';\n\nfunction FileUploadHandler() {\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    // 파일 처리\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileChange} />\n    </div>\n  );\n}\n\nexport default FileUploadHandler;\n```\n\n\n\n위 코드에서 `FileUploadHandler` 컴포넌트는 파일 입력 요소를 포함하고 있습니다. onChange 이벤트 핸들러는 사용자가 파일을 선택했을 때 트리거됩니다.\n\n- 파일 변화 이벤트 처리\n\n필요한 경우 유효성 검사를 이 지점에서 수행할 수 있습니다. 이벤트를 통해 선택한 파일에는 event.target.files[0]로 액세스할 수 있습니다. 이 예제에서는 이미지는 PNG 또는 JPEG여야 하며 1MB를 초과해서는 안 되며, 그렇지 않으면 경고 메시지가 표시되거나 일찍 반환됩니다.\n\n```js\nconst handleFileChange = (event) => {\n  const file = event.target.files[0];\n\n  if (file.type !== 'image/png' && file.type !== 'image/jpeg') {\n    alert('PNG 또는 JPEG 이미지 파일을 선택해주세요.');\n    return;\n  }\n\n  if (file.size > 1024 * 1024) {\n    alert('파일 크기는 1MB를 초과할 수 없습니다.');\n    return;\n  }\n\n  // 추가 처리 또는 파일 업로드 수행\n};\n```\n\n\n\n- 파일 업로드하기 (백엔드 연동)\n\n서버에 파일을 업로드하기 위해 HTTP 요청을 보내야 합니다. Fetch API나 Axios 라이브러리를 사용하여 요청을 처리할 수 있습니다. 이 예시에서는 Axios를 사용할 것입니다.\n\n- 아래 명령어를 실행하여 Axios를 설치하세요\n\n```js\nnpm install axios --save\n```\n\n\n\n- 이 예제에서는 선택한 파일을 FormData 객체에 래핑하여 /api/upload 엔드포인트로 POST 요청을 보내는 데 Axios를 사용하고 있습니다. 이를 통해 파일 및 기타 양식 데이터를 전송할 수 있습니다. /api/upload 엔드포인트의 서버 측 구현은 백엔드 기술에 따라 다를 것입니다.\n\n```js\nimport axios from 'axios';\n\n// ...\n\nconst handleFileChange = (event) => {\n  const file = event.target.files[0];\n  \n  // FormData 객체 생성\n  const formData = new FormData();\n  formData.append('file', file);\n\n  // 파일 서버로 전송\n  axios.post('/api/upload', formData)\n    .then((response) => {\n      // 파일 업로드 성공\n      console.log(response.data);\n    })\n    .catch((error) => {\n      // 파일 업로드 실패\n      console.log(error);\n  });\n};\n```","ogImage":{"url":"/assets/img/2024-05-12-BuildingaFileUploaderwithReact_0.png"},"coverImage":"/assets/img/2024-05-12-BuildingaFileUploaderwithReact_0.png","tag":["Tech"],"readingTime":5},{"title":"일렉트론, 리액트 보일러플레이트","description":"","date":"2024-05-12 18:53","slug":"2024-05-12-ElectronReactTheBoilerplate","content":"\n\n이 글에서는 Electron 및 React를 사용하여 크로스 플랫폼 데스크톱 애플리케이션을 개발할 수 있는 보일러플레이트를 만드는 방법을 안내하겠습니다.\n\n# 소개\n\n## Electron이란 무엇인가요?\n\nElectron은 JavaScript, HTML5, CSS와 같은 웹 기술로 크로스 플랫폼(Mac, Windows, Linux) 애플리케이션을 만들기 위한 프레임워크입니다. Electron은 렌더링을 위해 Chromium을 사용하고 파일 시스템에 액세스하기 위해 Node.js를 사용합니다. 간단히 말해, Electron은 크롬 창에서 웹사이트를 실행하여 네이티브 애플리케이션처럼 보이게 합니다. 그래서...\n\n\n\n일부 인기 있는 앱인 Discord, Figma, Notion, Obsidian, Microsoft Teams, Sourcetree은 Electron으로 제작되었습니다. (모든 앱은 여기에서 확인할 수 있어요: [https://electronjs.org/apps](https://electronjs.org/apps))\n\n## Electron Forge란 무엇인가요?\n\nElectron Forge는 Electron 애플리케이션을 패키징하고 배포하는 올인원 도구입니다. 각각의 단일 목적 패키지를 결합하여 작동하는 전체 빌드 파이프라인을 만듭니다.\n\n## TypeScript가 무엇인가요?\n\n\n\nTypeScript은 Microsoft에서 개발한 무료 오픈 소스 고수준 프로그래밍 언어로, JavaScript에 정적 타이핑을 추가하여 선택적으로 타입 주석을 제공합니다.\n\n### Sass가 무엇인가요?\n\nSass는 세계에서 가장 성숙하고 안정적이며 강력한 전문가용 CSS 확장 언어입니다.\n\n### React가 무엇인가요?\n\n\n\n리액트는 컴포넌트를 기반으로 하는 사용자 인터페이스를 구축하기 위한 무료 오픈 소스 프론트엔드 JavaScript 라이브러리입니다. Meta (이전 Facebook)에서 유지보수되고 있습니다.\n\n페이스북, 인스타그램, 넷플릭스, 페이팔 등과 같은 사이트들이 리액트로 개발되었습니다.\n\n## 부트스트랩이란 무엇인가요?\n\n부트스트랩은 반응형이고 모바일을 우선으로 하는 프론트엔드 웹 개발을 위한 무료 오픈 소스 CSS 프레임워크입니다.\n\n\n\n## Font Awesome 4.7이란 무엇인가요?\n\nFont Awesome은 수백만 명의 디자이너, 개발자 및 컨텐츠 제작자들이 사용하는 인터넷 아이콘 라이브러리 및 툴킷입니다.\n\n# 시작하기\n\n## 1. NodeJS 설치\n\n\n\nNodeJS를 설치하세요, 아직 설치하지 않았다면요. 여기서 시스템에 맞는 최신 LTS를 다운로드할 수 있어요.\n\n여기서 모든 단계는 운영 체제에 관계없이 적용할 수 있어요. Windows의 cmd, Mac 및 Linux에서 터미널을 사용하세요.\n\n### 2. Electron Forge를 사용하여 초기 프로젝트 생성\n\n새로운 cmd/터미널 창을 열고 다음 명령을 실행하세요:\n\n\n\n```js\nnpm init electron-app@latest boilerplate -- --template=webpack-typescript\n```\n\n시간이 걸리지만 모든 것이 잘 되었다면 프로젝트 폴더(boilerplate) 내에서 이 파일 구조를 볼 수 있을 것입니다:\n\n![ElectronReactTheBoilerplate_0](/assets/img/2024-05-12-ElectronReactTheBoilerplate_0.png)\n\n이제 다음 명령어로 앱을 시작해 볼 수 있습니다:\n\n\n\n```js\nnpm start\n```\n\n![이미지](/assets/img/2024-05-12-ElectronReactTheBoilerplate_1.png)\n\n## 3. 의존성 설치\n\n```js\nnpm i @popperjs/core bootstrap font-awesome react@17 react-dom@17\n```\n\n\n\n```js\nnpm i -D sass sass-loader autoprefixer postcss postcss-loader resolve-url-loader @types/bootstrap @types/react@17 @types/react-dom@17\n```\n\n## 4. 설정 파일 업데이트하기\n\ntsconfig.json을 업데이트하세요.\n\n```js\n{\n  \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"allowJs\": true,\n    \"module\": \"commonjs\",\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"noImplicitAny\": true,\n    \"sourceMap\": true,\n    \"baseUrl\": \".\",\n    \"outDir\": \"dist\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"paths\": {\n      \"*\": [\"node_modules/*\"],\n      \"@/*\": [\"src/*\"]\n    },\n    \"jsx\": \"react-jsx\"\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n\n\n웹팩 메인 설정 파일인 wepback.main.config.ts를 업데이트 해주세요.\n\n```typescript\nimport type { Configuration } from 'webpack';\nimport { resolve } from 'path';\n\nimport { rules } from './webpack.rules';\nimport { plugins } from './webpack.plugins';\n\nexport const mainConfig: Configuration = {\n  /**\n   * 이 파일은 애플리케이션의 주요 진입점입니다. 메인 프로세스에서 처음으로 실행되는 파일입니다.\n   */\n  entry: './src/index.ts',\n  // 이 아래에 일반 웹팩 설정을 넣어주세요\n  module: { rules },\n  plugins,\n  resolve: {\n    alias: { '@': resolve(__dirname, 'src') },\n    extensions: ['.js', '.ts', '.jsx', '.tsx', '.css', '.scss', '.json']\n  }\n};\n```\n\n웹팩 렌더러 설정 파일인 webpack.renderer.config.ts를 업데이트 해주세요.\n\n```typescript\nimport type { Configuration } from 'webpack';\nimport { resolve } from 'path';\n\nimport { rules } from './webpack.rules';\nimport { plugins } from './webpack.plugins';\n\nrules.push({\n  test: /\\.(css|scss)$/,\n  use: [\n    { loader: 'style-loader' },\n    {\n      loader: 'css-loader',\n      options: {\n        sourceMap: true\n      }\n    },\n    { loader: 'resolve-url-loader' },\n    {\n      loader: 'postcss-loader',\n      options: {\n        postcssOptions: {\n          plugins: () => [require('autoprefixer')]\n        }\n      }\n    },\n    { loader: 'sass-loader' }\n  ]\n});\n\nexport const rendererConfig: Configuration = {\n  module: { rules },\n  plugins,\n  resolve: {\n    alias: { '@': resolve(__dirname, 'src') },\n    extensions: ['.js', '.ts', '.jsx', '.tsx', '.css', '.scss']\n  }\n};\n```\n\n\n\n## 5. 소스 파일 업데이트\n\nsrc/scss.d.ts 파일을 생성하세요\n\n```js\ndeclare module '*.scss';\n```\n\nsrc/index.css 파일의 이름을 src/index.scss로 변경하세요.\n\n\n\nsrc/index.scss을 업데이트하세요.\n\n```scss\n@import 'bootstrap';\n@import 'font-awesome';\n```\n\nsrc/index.html을 업데이트하세요.\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <title></title>\n  </head>\n\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n```\n\n\n\n```ts\nimport { 엄격한모드 } from 'react';\nimport { 렌더 } from 'react-dom';\n\nimport '@/index.scss';\n\n렌더(\n    <엄격한모드>\n        <div className=\"p-3\">\n            <h1><i className=\"fa fa-heart text-danger\" /> 안녕하세요, 세계여!</h1>\n            <p>Electron 애플리케이션에 오신 것을 환영합니다.</p>\n        </div>\n    </엄격한모드>,\n    document.getElementById('root')\n);\n```\n\nsrc/renderer.ts를 업데이트하세요.\n\n```ts\nimport '@popperjs/core';\nimport 'bootstrap';\n\nimport './App';\n```\n\n\n\nsrc/index.ts 파일을 업데이트 해주세요.\n\n```js\nimport { BrowserWindow, Menu, app } from 'electron';\n\n// 이 부분은 TypeScript가 Forge의 Webpack 플러그인에 의해 자동으로 생성된 매직 상수를 인식할 수 있도록 합니다. \n// 이 상수들은 Electron 앱이 개발 모드든 프로덕션 모드든 Webpack으로 번들된 앱 코드를 어디에서 찾아야 하는지 알려줍니다.\ndeclare const MAIN_WINDOW_WEBPACK_ENTRY: string;\ndeclare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;\n\n// Windows에서 단축키를 추가/제거하는 처리\nif (require('electron-squirrel-startup')) {\n  app.quit();\n}\n\nconst createWindow = (): void => {\n  // 브라우저 창을 생성합니다.\n  const mainWindow = new BrowserWindow({\n    title: `Boilerplate ${app.getVersion()}`,\n    height: 600,\n    width: 800,\n    webPreferences: {\n      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY\n    }\n  });\n\n  Menu.setApplicationMenu(null);\n\n  // 그리고 어플리케이션의 index.html을 로드합니다.\n  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);\n};\n\n// 이 메서드는 Electron이 초기화를 마치고 브라우저 창을 생성할 준비가 된 시점에 호출됩니다.\n// 일부 API는 이 이벤트 이후에만 사용할 수 있습니다.\napp.on('ready', createWindow);\n\n// 모든 창이 닫힐 때 앱을 종료합니다. macOS에서는 달리 동작합니다. 거기서는 사용자가 Cmd + Q로 \n// 명시적으로 종료할 때까지 앱 및 메뉴바가 활성 상태로 유지되는 것이 일반적입니다.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  // macOS에서는 dock 아이콘을 클릭하고 다른 창이 열려있지 않을 때 어플리케이션의 창을 다시 만드는 것이 일반적입니다.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n// 이 파일에서 어플리케이션의 특정한 메인 프로세스 코드를 포함할 수 있습니다.\n// 별도의 파일에 작성하고 여기에서 가져와 사용할 수도 있습니다.\n```\n\n다시 실행해보세요: npm start\n\n![이미지](/assets/img/2024-05-12-ElectronReactTheBoilerplate_2.png)\n\n\n\n# 릴리스\n\nnpm run make 명령을 사용하면 Forge 구성 (forge.config.ts)을 기반으로 응용 프로그램에 대한 배포 가능한 항목을 만들 수 있습니다.\n\nWindows에서 작업 중인 경우 출력은 다음과 같아야 합니다:\n\n이 글이 유용하셨다면 손가락 몇 개를 눌러 주시고 다른 작품들도 확인해보세요.\n\n\n\n읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-12-ElectronReactTheBoilerplate_0.png"},"coverImage":"/assets/img/2024-05-12-ElectronReactTheBoilerplate_0.png","tag":["Tech"],"readingTime":7},{"title":"Nextjs API Routes에서 외부 패키지 없이 요청 속도 제한 설정하기","description":"","date":"2024-05-12 18:52","slug":"2024-05-12-ImplementingRateLimitinginNextjsAPIRouteswithoutExternalPackages","content":"\n\n---\n이미지: /assets/img/2024-05-12-ImplementingRateLimitinginNextjsAPIRouteswithoutExternalPackages_0.png\n\n속도 제한은 서버의 트래픽을 관리하고 과부하를 방지하며 악용으로부터 보호하는 중요한 측면입니다. Next.js API 라우트에 속도 제한을 구현하기 위한 패키지들이 있지만 외부 의존성에 의존하지 않고 이를 어떻게 달성할지 살펴보겠습니다. \"고정 창 카운터\" 접근 방식을 활용할 것인데, 이 방식은 특정 시간 간격 내에 발신자로부터 발생하는 요청 수를 기록합니다. 요청 수가 제한을 초과하면 해당 발신자로부터의 추가 요청은 거부됩니다.\n\n# 속도 제한 미들웨어 구축하기\n\nAPI 라우트를 위한 게이트키퍼로 작동하는 미들웨어 함수를 만들어봅시다. 이 함수는 단일 IP 주소가 지정된 시간 창 내에서 설정한 요청 제한을 초과하지 않도록 보장하여 서버의 안정성과 성능을 향상시킵니다.\n\n\n\n\n앱 루트 디렉토리에 \"middleware\"라는 폴더를 만들고, 다음 코드가 포함된 \"rateLimiter.js\" 파일을 추가해주세요:\n\n이제 레이트 제한을 구현하는 코드를 자세히 살펴보겠습니다:\n\n```js\nconst rateLimitMap = new Map();\n\nexport default function rateLimitMiddleware(handler) {\n    return (req, res) => {\n        const ip = req.headers[\"x-forwarded-for\"] || req.connection.remoteAddress;\n        const limit = 5; // IP 당 분당 요청 수를 5개로 제한\n        const windowMs = 60 * 1000; // 1분\n        \n        if (!rateLimitMap.has(ip)) {\n            rateLimitMap.set(ip, {\n                count: 0,\n                lastReset: Date.now(),\n            });\n        }\n        \n        const ipData = rateLimitMap.get(ip);\n        \n        if (Date.now() - ipData.lastReset > windowMs) {\n            ipData.count = 0;\n            ipData.lastReset = Date.now();\n        }\n        \n        if (ipData.count >= limit) {\n            return res.status(429).send(\"너무 많은 요청\");\n        }\n        \n        ipData.count += 1;\n        \n        return handler(req, res);\n    };\n}\n```\n\n# 구현\n\n\n\n자, 이제 이 코드를 API 경로에 통합해 봅시다:\n\n\"limited.js\"라는 경로를 생성하고 rateLimitMiddleware를 적용하세요. IP 주소가 제한을 초과하면 \"너무 많은 요청\" 상태 코드 (429)로 응답합니다.\n\n```js\nimport rateLimitMiddleware from \"@/middleware/rateLimiter\";\n\nfunction handler(req, res) {\n  res.status(200).json({ name: \"Limited, don't over use me!\" });\n}\nexport default rateLimitMiddleware(handler);\n```\n\n# 결론\n\n\n\n이 문서에서는 외부 패키지에 의존하지 않고 Next.js API 라우트에서 요금 제한을 구현하는 방법을 살펴보았습니다. \"고정 창 카운터\" 방식을 활용하여 들어오는 요청을 효과적으로 관리하여 과부하를 방지하고 서버의 원활한 작동을 보장할 수 있습니다. 이 사용자 정의 솔루션은 특정 요구 사항에 맞게 유연하고 맞춤 설정할 수 있습니다. 그러니 안심하고 요금 제한을 Next.js 프로젝트에 통합하여 서버를 건강하고 반응적으로 유지하세요!\n\n유용한 자원 코딩 도전\n\n내 GitHub 저장소에서 전체 코드에 액세스해보세요.","ogImage":{"url":"/assets/img/2024-05-12-ImplementingRateLimitinginNextjsAPIRouteswithoutExternalPackages_0.png"},"coverImage":"/assets/img/2024-05-12-ImplementingRateLimitinginNextjsAPIRouteswithoutExternalPackages_0.png","tag":["Tech"],"readingTime":3},{"title":"배열 변수를 상태 변수로 변환하기","description":"","date":"2024-05-12 18:51","slug":"2024-05-12-TransformingArrayVariableAsAStateVariable","content":"\n\n```js\nconst demoArray = [\n  { id: 0, name: \"Yogesh\", age: 24 },\n  { id: 1, name: \"Nitesh\", age: 21 },\n  { id: 2, name: \"Hriday\", age: 24 },\n];\n```\n\n화면에 표시하거나 렌더링 목록 기술을 사용하여 배열 정보를 렌더링하는 컴포넌트를 만듭니다.\n\n```js\nfunction TransformArray() {\n  const [info, setInfo] = useState(demoArray);\n\n  return (\n    <Fragment>\n      <h1>소피모어를 하는 우리 동문 정보</h1>\n      {info.map((ele) => (\n        <Fragment key={ele.id}>\n          <h1>\n            {ele.name}-{ele.age}\n          </h1>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n}\n```\n\n\n\n루트 컴포넌트에서 TransformArray의 컴포넌트 인스턴스를 생성하는 컴포넌트를 반환하세요.\n\n```js\nfunction App() {\n  return <TransformArray />;\n}\n```\n\n렌더링하기\n\n```js\nimport React from \"react\";\nimport { createRoot } from \"react-dom\";\n\ncreateRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n\n\n여기 전체 코드가 있어요\n\n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\n// 전역으로 선언된 배열\nconst demoArray = [\n  { id: 0, name: \"Yogesh\", age: 24 },\n  { id: 1, name: \"Nitesh\", age: 21 },\n  { id: 2, name: \"Hriday\", age: 24 },\n];\n\n// 작동하는 컴포넌트\nfunction TransformArray() {\n  const [info, setInfo] = useState(demoArray);\n\n  return (\n    <Fragment>\n      <h1>2학년 시절 우리 동문 정보</h1>\n      {info.map((ele) => (\n        <Fragment key={ele.id}>\n          <h1>\n            {ele.name}-{ele.age}\n          </h1>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n}\n\n// 루트 컴포넌트\nfunction App() {\n  return <TransformArray />;\n}\n\n// React 컴포넌트 렌더링\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n이제 이 학생들이 10년 후의 나이를 알려주는 버튼을 만들어보세요\n\n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\n// 전역으로 선언된 배열\nconst demoArray = [\n  { id: 0, name: \"Yogesh\", age: 24 },\n  { id: 1, name: \"Nitesh\", age: 21 },\n  { id: 2, name: \"Hriday\", age: 24 },\n];\n\n// 작동하는 컴포넌트\nfunction TransformArray() {\n  const [info, setInfo] = useState(demoArray);\n\n  function handleClick() {\n    const newVal = info.map((ele) => ({ ...ele, age: ele.age + 10 }));\n    setInfo(newVal);\n  }\n\n  return (\n    <Fragment>\n      <h1>2학년 시절 우리 동문 정보</h1>\n      {info.map((ele) => (\n        <Fragment key={ele.id}>\n          <h1>\n            {ele.name}-{ele.age}\n          </h1>\n        </Fragment>\n      ))}\n      <button onClick={handleClick}>현재 나이</button>\n    </Fragment>\n  );\n}\n\n// 루트 컴포넌트\nfunction App() {\n  return <TransformArray />;\n}\n\n// React 컴포넌트 렌더링\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n\n\n여기서 우리는 현재 학생의 나이를 처리하는 간단한 버튼을 만들었습니다.\n\n지금은 맵 메서드가 특히 배열 내부의 객체를 업데이트하기 위해 리액트에서 널리 사용됩니다.\n\n우리가 원하는 변수를 업데이트하는 데 꽤 간단한 방법으로 구조 분해 메커니즘을 사용했습니다.","ogImage":{"url":"/assets/img/2024-05-12-TransformingArrayVariableAsAStateVariable_0.png"},"coverImage":"/assets/img/2024-05-12-TransformingArrayVariableAsAStateVariable_0.png","tag":["Tech"],"readingTime":3},{"title":"React Native 리스트의 성능을 개선하는 방법 FlatList 최적화 가이드","description":"","date":"2024-05-12 18:48","slug":"2024-05-12-OptimizeYourReactNativeListswithFlatListAPerformanceGuide","content":"\n\n소개\n\n![이미지](/assets/img/2024-05-12-OptimizeYourReactNativeListswithFlatListAPerformanceGuide_0.png)\n\nFlatList란 무엇인가요?\n\n- 성능 최적화: FlatList는 대규모 목록을 효율적으로 렌더링하기 위해 설계된 React Native 컴포넌트입니다. \"게으른 로딩\"이라는 기술을 통해 이를 수행합니다. 이는 화면에 현재 표시된 항목만 렌더링하고 사용자가 스크롤할 때 컴포넌트를 재활용함으로써 작동합니다.\n- 이를 통해 많은 양의 데이터를 다룰 때에도 앱이 부드럽고 반응성 있게 유지됩니다.\n- 필수적인 목록 기능: FlatList는 사용자 친화적인 목록을 구축하는 데 필수적인 다양한 기능을 제공합니다.\n- 매우 맞춤화 가능: 속성, 스타일링, 사용자 정의 컴포넌트를 사용하여 목록의 모양과 느낌을 쉽게 조정할 수 있습니다.\n\n\n\nFlatList를 사용하는 주요 장점들\n\n- 성능, 성능, 성능: FlatList는 긴 목록을 처리할 때 빛을 발합니다. 게으르게 로딩하고 최적화 기술을 사용하여 데이터가 많아져도 앱이 느려지지 않도록 합니다.\n- 내장 기능: 바퀴를 재창조할 필요 없어요. FlatList에는 현대적인 목록에서 기대할 수 있는 기능이 탑재되어 있습니다: 당겨서 새로고침, 헤더, 푸터, 항목 구분선, 특정 위치로 스크롤 등.\n- 크로스 플랫폼: 하나의 코드 베이스로 iOS와 Android 기기에서 목록이 매끄럽게 작동합니다.\n\n## 핵심 기능들:\n\n- FlatList는 상자에서 바로 제공되는 주요 기능들로, 매우 유용하게 만들어집니다:\n- 크로스 플랫폼: iOS와 Android에서 일관되게 작동합니다.\n- 수평 모드: 표준 수직 및 수평 목록 간 전환 가능.\n- 가시성 콜백: 보이는 항목을 추적하여, 사용자가 끝에 가까워질 때 추가 데이터를 로드할 수 있도록 합니다.\n- 헤더 및 푸터: 헤더와 푸터를 목록에 쉽게 통합합니다.\n- 구분선: 목록 항목 사이의 구분선 외관을 사용자 정의할 수 있습니다.\n- 당겨서 새로고침: 사용자가 목록 내용을 새로 고칠 수 있는 일반적인 인터페이스.\n- 스크롤 로딩 (무한 스크롤): 사용자가 스크롤할 때 자연스럽게 더 많은 데이터를 로드합니다.\n- ScrollToIndex: 목록에서 특정 항목으로 빠르게 이동합니다.\n- 여러 열: 그리드 형식으로 목록을 렌더링합니다.\n\n\n\nFlatList을 언제 사용해볼까요?\n\n- 연락처 목록 표시\n- 이미지 갤러리 만들기\n- 뉴스 피드 또는 타임라인 구축\n- 전자상거래 앱에서 제품 목록 렌더링\n- 스크롤 가능한 항목 목록을 표시해야 하는 모든 시나리오\n\n간단한 예제로 설명해 보겠습니다:\n\n```js\nimport { FlatList, Text } from 'react-native';\n\nconst myData = [ /* 데이터 객체 배열 */ ];\n\nconst renderItem = ({ item }) => (\n    <Text>{item.title}</Text> \n);\n\n<FlatList\n  data={myData}\n  renderItem={renderItem} \n  keyExtractor={item => item.id} \n/>\r\n```\n\n\n\n중요한 속성 설명해 드릴게요\n\n- data: 리스트에 표시하려는 데이터 배열입니다.\n- renderItem: 데이터 배열에서 개별 항목을 가져와서 시각적으로 표현하는 JSX 구조를 반환하는 함수입니다.\n- keyExtractor: 각 목록 항목에 대한 고유한 키를 생성하는 함수입니다 (React의 렌더링 최적화에 중요합니다).\n\n## FlatList가 동적으로 업데이트되도록 만드는 방법\n\n이 핵심은 FlatList가 응용 프로그램 데이터 변경에 따라 디스플레이를 어떻게 업데이트할지 제어하는 데 있습니다.\n\n\n\n- 선택 가능한 항목: FlatList에서 항목을 선택할 때 시각적으로 변경되도록 하는 것이 목표입니다 (예: 선택된 항목 강조 표시). 이를 위해 다음이 필요합니다:\n\n- 상태(State): 현재 선택된 항목의 ID를 추적하기 위해 selectedId와 같은 상태 변수가 필요합니다.\n- 시각적 스타일링: renderItem 함수 내부에서 항목의 ID가 선택된 ID와 일치하는지 여부에 따라 다른 스타일을 적용해야 합니다.\n\nextraData - 업데이트의 핵심:\n\n- FlatList는 PureComponent이므로 생성자에서 직접 변경된 경우에만 다시 렌더링됩니다.\n- 항목을 선택하는 경우 대부분 FlatList 자체의 속성 외부에서 상태를 변경하므로, extraData='selectedId'를 사용하여 selectedId 상태 변수가 변경될 때마다 FlatList가 다시 렌더링되어야 함을 알립니다.\n\n\n\nkeyExtractor - 고유 키 보장하기:\n\n- keyExtractor는 React에서 리스트를 업데이트할 때 효율적으로 사용됩니다. 데이터의 각 항목에서 고유 키(일반적으로 ID)를 추출하는 방법을 제공합니다.\n\n예시\n\n```js\nimport { FlatList, View, StyleSheet, TouchableOpacity, Text } from 'react-native';\n\nconst recipes = [\n  { id: 'recipe1', title: '맛있는 팬케이크' },\n  { id: 'recipe2', title: '초콜릿 케이크' },\n  // ... 더 많은 레시피\n];\n\nconst RecipeCard = ({ recipe, onFavoriteToggle }) => { return ( <TouchableOpacity onPress={() => onFavoriteToggle(recipe.id)}> <View style={styles.card}> <Text style={styles.title}>{recipe.title}</Text> {/* 가상: 여기에 이미지가 있을 것 */} <Text style={recipe.isFavorite ? styles.favorite : styles.notFavorite}> {recipe.isFavorite ? '♥ 즐겨찾기한 레시피' : '☆ 즐겨찾기하기' } </Text> </View> </TouchableOpacity> ); };\n\nconst RecipeApp = () => {\n  const [recipesData, setRecipesData] = useState(recipes); // 즐겨찾기 관리\n  const [selectedId, setSelectedId] = useState(null); // extraData에 여전히 사용됨\n\n  const handleFavoriteToggle = (recipeId) => {\n    setRecipesData(prevRecipes => prevRecipes.map(recipe =>\n      recipe.id === recipeId ? { ...recipe, isFavorite: !recipe.isFavorite } : recipe\n    ));\n    setSelectedId(recipeId); \n  };\n\n  return (\n    <FlatList\n      data={recipesData} // 업데이트된 데이터 전달\n      renderItem={({ item }) => (\n        <RecipeCard \n         recipe={item} \n         isFavorite={item.isFavorite} // 속성으로 전달\n         onFavoriteToggle={handleFavoriteToggle} \n        /> \n      )} \n      keyExtractor={(item) => item.id} \n      numColumns={2} \n      extraData={selectedId} \n    />\n  );\n};\n```\n\n\n\n데이터:\n\n- recipes: 초기 레시피 데이터를 보유한 간단한 배열입니다. 각 레시피에는 id 및 title 속성이 포함되어 있습니다.\n\n구성 요소:\n\n- RecipeCard: 단일 레시피 카드를 표시하는 컴포넌트입니다. 제목, 이미지를 위한 자리 표시자 및 즐겨찾기 버튼이 포함되어 있습니다. 이 버튼은 레시피의 isFavorite 상태에 따라 동적으로 변경됩니다.\n- RecipeApp: 앱의 주요 컴포넌트입니다. 다음을 관리합니다:\n- 상태:\n- recipesData: 레시피의 현재 상태를 유지하는 배열로, isFavorite 상태를 포함합니다. 이는 recipes 배열을 사용하여 초기화됩니다.\n- selectedId: 레시피를 즐겨찾기 추가하거나 취소할 때 FlatList를 다시 렌더링하기 위해 사용됩니다.\n- handleFavoriteToggle: 레시피를 즐겨찾기 추가/취소하는 논리를 처리하는 함수입니다. 이 함수는 다음을 수행합니다:\n- recipesData 배열에서 올바른 레시피를 찾습니다.\n- 레시피의 isFavorite 속성을 토글합니다.\n- 다시 렌더링을 트리거하기 위해 setRecipesData를 사용하여 recipesData 상태를 업데이트합니다.\n- 렌더링을 강제로 수행하기 위해 setSelectedId를 통해 selectedId를 업데이트하여 하트/별표가 즉시 업데이트되도록 합니다.\n\n\n\n아래는 Markdown 형식으로 변환된 텍스트입니다:\n\n- **FlatList**: 레시피 목록을 효율적으로 렌더링하는 데 사용됩니다. 주요 속성은 다음과 같습니다:\n  - **data**: 현재 즐겨찾기 상태를 반영하도록 recipesData 배열을 사용합니다.\n  - **renderItem**: 데이터 내 각 레시피에 대해 RecipeCard 컴포넌트를 렌더링하며, 레시피 데이터와 handleFavoriteToggle 함수를 전달합니다.\n  - **keyExtractor**: 각 레시피 객체에서 고유 id 속성을 추출하여 효율적인 추적을 가능하도록 합니다.\n  - **numColumns**: 두 개의 열을 갖는 그리드를 생성합니다.\n  - **extraData**: 선택된 ID가 변경될 때 (즐겨찾기를 추가하거나 삭제할 때) FlatList가 업데이트된 즐겨찾기 상태를 반영하도록 합니다.\n\n## VirtualizedList을 위한 Wrapper로서 FlatList\n\n- **성능 중점**: FlatList는 효율성을 위해 VirtualizedList 기반으로 구축되었습니다. 화면에 현재 보이는 레시피 카드만 렌더링합니다. 많은 레시피가 있는 경우 부드러운 스크롤링을 위해 중요합니다.\n- **상태 제한**: 레시피 카드가 화면에서 스크롤되어 나가면 (예: 확장된 세부 정보 섹션이 있는 경우) 내부 상태가 기본적으로 유지되지 않습니다. 보통 Redux와 같은 중앙 집중형 저장소에 그러한 데이터를 저장합니다.\n\n\n\nPureComponent 동작\n\n- 변경 감지: PureComponent인 FlatList는 속성이나 기본 데이터가 실제로 변경될 때만 다시 렌더링되도록 최적화되어 있습니다. 여기서 extraData가 중요한 역할을 하며 레시피를 즐겨찾기로 지정하면 새로 고침이 트리거되어야 함을 알려줍니다.\n- 속성 동등성: 레시피 배열 내의 변경 사항이 감지됩니다. renderItem이 의존하는 모든 요소가 레시피 데이터에 포함되어 있거나 별도의 속성으로 전달되는지 확인하는 것이 중요합니다.\n\n메모리 관리 및 부드러운 스크롤링\n\n- 비동기 렌더링: FlatList는 스크롤이 부드럽게 느껴지도록 실제로 보이는 것보다 약간 앞의 내용을 렌더링합니다. 하지만 너무 빠르게 스크롤할 경우, 콘텐츠가로드될 때까지 잠깐 빈 공간이 보일 수 있습니다.\n\n\n\nkeyExtractor\n\n- 중요도: React에서 어떤 레시피 카드가 무엇인지 효율적으로 추적하는 것은 매우 중요합니다. 고유한 ID를 사용하는 것이 이상적인 방법입니다.\n\n## ItemSeparatorComponent\n\nReact Native의 FlatList와 관련된 ItemSeparatorComponent의 설명은 다음과 같습니다:\n\n\n\n목적:\n\n- ItemSeparatorComponent 속성을 사용하면 FlatList에 사용자 정의 구성 요소나 요소를 각 항목 사이에 삽입하여 시각적 구분선이나 간격을 만들 수 있습니다.\n\n작동 방식:\n\n- 기본값 없음: FlatList에 기본 구분자가 없습니다. ItemSeparatorComponent를 사용하면 간단히 추가할 수 있습니다.\n- 배치: 구분자 구성 요소는 각 항목 사이에 렌더링되며 목록의 맨 위와 맨 아래를 제외합니다.\n- renderItem 통합: FlatList의 renderItem 함수는 그 내부의 info 매개변수에 속성을 제공합니다:\n  - highlighted: 현재 항목이 강조 표시되는지 표시합니다 (예: 눌림).\n  - separators.highlight: 구분자를 강조 표시하는 함수입니다.\n  - separators.unhighlight: 구분자의 강조 표시를 제거하는 함수입니다.\n  - separators.updateProps: 구분자의 다른 사용자 지정 속성을 업데이트하는 함수입니다.\n\n\n\n유연성:\n\n- 컴포넌트: 사용자 정의 React 컴포넌트를 생성하여 구분자 역할을 할 수 있습니다. 이렇게 하면 외관과 동작에 대한 완전한 제어권을 갖게 됩니다.\n- 엘리먼트: 간단한 구분자의 경우 `View`와 같은 React 엘리먼트를 직접 전달하고 선 또는 간격을 위한 스타일링을 적용할 수 있습니다.\n\n예시:\n\n```js\nconst ItemSeparator = () => <View style={ height: 1, backgroundColor: 'lightgray' } />;\n\n<FlatList\n  data={myData}\n  renderItem={({ item }) => <MyItemComponent item={item} />}\n  ItemSeparatorComponent={ItemSeparator} \n/>\n```\n\n\n\n종류:\n\n- component: 리액트 컴포넌트 클래스 또는 함수형 컴포넌트.\n- function: 리액트 엘리먼트를 반환하는 함수.\n- element: 직접적인 리액트 엘리먼트 (시각적 구분선을 위한 간단한 뷰일 때가 많음)\n\n## 스타일링 속성\n\n다음은 리액트 네이티브의 FlatList 컴포넌트 내에서 다양한 스타일링 속성 및 다른 중요한 목록 관련 속성에 대한 설명입니다:\n\n\n\n# ListEmptyComponent\n\n리액트 네이티브의 FlatList에서 ListEmptyComponent가 어떻게 작동하는지 살펴보겠습니다:\n\n목적:\n\n- ListEmptyComponent 속성은 FlatList가 렌더링할 데이터가 없을 때(즉, 데이터 배열이 비어있을 때) 표시할 내용을 결정합니다.\n- 완전히 비어있는 화면이 아닌 사용자에게 친숙한 메시지나 시각적 표시 방법을 제공합니다.\n\n\n\n작동 방식:\n\n- 조건부 렌더링: FlatList는 자동으로 데이터 배열이 비어 있는지 확인합니다. 데이터 배열이 비어있으면 보통의 목록 항목 대신 ListEmptyComponent를 렌더링합니다.\n- 유연성: 렌더링할 대상에 대해 두 가지 주요 옵션이 있습니다:\n\n    - React 컴포넌트: 사용자 정의 React 컴포넌트(예: EmptyListComponent)를 만들어 메시지, 이미지, \"새로 고침\" 버튼과 같은 작업을 제공합니다. 외관과 기능에 완전한 제어권을 제공합니다.\n\n  2. React 엘리먼트: 종종 \"단순한\" 것처럼 React 엘리먼트를 직접 제공합니다:\n\n\n\n```js\n<Text style={textAlign: 'center'}>레시피를 찾을 수 없어요!</Text>\n```\n\n```js\nconst EmptyListComponent = () => (\n    <View style={styles.emptyContainer}>\n        <Text style={styles.emptyText}>아직 레시피가 없어요!</Text>\n    </View> \n);\n\n<FlatList\n    data={recipes}\n    renderItem={({ item }) => <RecipeCard recipe={item} />} \n    ListEmptyComponent={EmptyListComponent} \n/>\r\n```\n\n유형\n\n- component: React 컴포넌트 클래스 또는 함수형 컴포넌트.\n- element: React 요소 직접 사용.\n\n\n\n주요 포인트:\n\n- 스타일링: 앱 디자인에 맞게 빈 컴포넌트의 스타일을 적절히 지정하세요.\n- 사용자 경험: 잘 디자인된 ListEmptyComponent는 맨 텅 빈 목록보다 훨씬 나은 경험을 제공할 수 있습니다.\n\n# ListFooterComponent\n\nReact Native의 FlatList 안에서 ListFooterComponent를 살펴봅시다.\n\n\n\n목적:\n\n- ListFooterComponent 속성을 사용하면 FlatList의 가장 아래에 일반 리스트 항목들 다음에 렌더링되는 구성 요소나 요소를 추가할 수 있습니다.\n- 일반적인 사용 사례:\n   - 추가 데이터를 가져오기 위한 \"더 보기\" 버튼 표시\n   - 데이터를 가져오는 동안 로딩 스피너 표시\n   - 나열된 항목을 기반으로 요약 정보나 총계 제공\n   - 광고를 위한 자리 표시\n\n작동 방식:\n\n- 배치: ListFooterComponent는 리스트의 절대적 끝에 일관되게 렌더링되며, 리스트가 화면 전체를 채우지 않더라도 렌더링됩니다.\n- 렌더링: 리스트에 데이터가 있는지 여부와 상관없이 렌더링됩니다.\n- 유연성: 다른 유사한 속성과 마찬가지로, 사용할 수 있는 옵션:\n   - React 구성 요소: 복잡한 레이아웃이나 상호작용을 위한 사용자 지정 구성 요소\n   - React 요소: 기본 디스플레이를 위한 `View`와 같은 간단한 요소\n\n\n\n예시\n\n```js\nconst FooterLoader = () => (\n  <View style={styles.footer}>\n    <ActivityIndicator size=\"small\" color=\"gray\" />\n    <Text style={styles.footerText}>더 로딩 중...</Text>\n  </View>\n);\n\n<FlatList\n  data={recipes}\n  renderItem={({ item }) => <RecipeCard recipe={item} />}\n  ListFooterComponent={FooterLoader} \n/>\r\n```\n\n유형\n\n- component: React 컴포넌트 클래스 또는 함수형 컴포넌트.\n- element: React 요소 직접.\n\n\n\n중요한 사항:\n\n- 스크롤: ListFooterComponent를 보려면 사용자가 목록의 맨 아래로 스크롤해야 할 수도 있습니다.\n- ListHeaderComponent: ListHeaderComponent라는 상대적인 요소가 있으며 비슷한 기능을 하지만 목록의 맨 위에 컴포넌트를 렌더링합니다.\n\n# ListFooterComponentStyle\n\nReact Native의 FlatList에서 ListFooterComponentStyle에 대해 이야기해봅시다.\n\n\n\n목적:\n\n- ListFooterComponentStyle prop을 사용하면 ListFooterComponent를 포함하는 내부 뷰에 사용자 정의 스타일을 적용할 수 있습니다. 이를 통해 목록 내의 footer 영역의 모양과 레이아웃을 제어할 수 있습니다.\n\n사용 방법:\n\n- StyleSheet를 Import하세요:\n\n\n\n```js\nimport { StyleSheet } from 'react-native';\n```\n\n2. 스타일 생성:\n\n```js\nconst styles = StyleSheet.create({\n    footerContainer: {\n        backgroundColor: 'lightblue',\n        padding: 20,\n        alignItems: 'center' \n    }\n});\n```\n\n3. FlatList에 적용하기:\n\n\n\n```js\n<FlatList\n    // ... 다른 FlatList 속성들\n    ListFooterComponent={footerComponent}\n    ListFooterComponentStyle={styles.footerContainer}\n/>\n```\n\n스타일링 제어:\n\n- ListFooterComponentStyle 속성은 유효한 View 스타일 속성을 받습니다. 다음과 같이 사용자 정의할 수 있습니다:\n- 레이아웃: flex, flexDirection, justifyContent, alignItems 등\n- 배경: backgroundColor\n- 크기: height, width, padding, margin\n- 테두리: borderWidth, borderColor, borderRadius\n- ... 그 외 등등!\n\n중요한 고려 사항:\n\n\n\n- 내부 뷰: ListFooterComponent를 보유하는 컨테이너를 스타일링하고 있습니다. 컴포넌트 자체를 스타일링하고 있지 않습니다.\n- 컴포넌트 스타일링: 필요하다면 ListFooterComponent를 따로 스타일링하세요.\n\n예시:\n\n화면 하단에 고정된 푸터를 원한다면:\n\n```js\nListFooterComponentStyle={ \n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0\n}\n```\n\n\n\n팁\n\n- 지금까지 보여준 대로 스타일 시트를 사용하여 구성된 스타일링을 하세요.\n- 원하는 푸터 레이아웃과 외관을 얻기 위해 실험해보세요!\n- ListFooterComponentStyle: ListFooterComponent를 보유하는 컨테이너에 스타일을 적용합니다.\n- ListHeaderComponentStyle: ListHeaderComponent를 보유하는 컨테이너에 스타일을 적용합니다.\n- columnWrapperStyle: numColumns를 사용하는 경우 다중 항목 행의 스타일을 사용자 정의합니다.\n\n스타일링에 대한 중요한 참고 사항\n\n- 이러한 props은 레이아웃, 테두리, 배경 등을 사용자 정의하기 위한 유효한 ViewStyle 속성을 수용합니다.\n- 일반적으로 헤더, 푸터 및 항목 구성 요소를 내부 콘텐츠에 대해 별도로 스타일링할 것입니다.\n\n\n\n기타 중요한 속성들\n\n좀 더 복잡하거나 자주 사용되는 몇 가지 속성들을 알아보겠습니다:\n\n- **extraData:**\n  - 주요 데이터 속성 외부의 데이터가 변경될 때 FlatList(순수 컴포넌트)에게 다시 렌더링하도록 지시합니다.\n  - 항목 자체가 아닌 다른 요소에 기반한 동적 업데이트에 유용합니다(예: 컴포넌트 내 선택된 상태 등).\n- **getItemLayout:**\n  - 최적화: 성능 향상을 위해 항목의 높이와 오프셋을 미리 계산하여 크기가 고정된 항목의 목록에 사용됩니다.\n- **horizontal:**\n  - 목록의 레이아웃을 가로 스크롤링으로 전환합니다.\n- **initialNumToRender:**\n  - 초기 경험을 더 부드럽게 하기 위해 처음에 렌더링할 항목 수를 지정합니다.\n- **inverted:**\n  - 목록의 방향을 반대로 바꿉니다.\n- **keyExtractor:**\n  - 항목에 대한 고유한 키를 제공하여 React의 렌더링 효율성을 유지합니다.\n- **numColumns:**\n  - 다중 열 그리드 레이아웃을 만듭니다.\n- **onRefresh & refreshing:**\n  - \"당겨서 새로고침\" 기능을 구현합니다.\n- **onViewableItemsChanged:**\n  - 항목 가시성이 변경될 때 트리거되는 콜백 함수(게으른 로딩과 같은 작업에 유용)입니다.\n- **viewabilityConfig:**\n  - onViewableItemsChanged 콜백이 트리거되는 조건을 세밀하게 조정합니다(가시성 임계값 등).\n\n큰 목록을 최적화하기\n\n\n\n### onViewableItemsChanged\n\n**도전 과제:** FlatList를 사용하여 오래된 버전이나 성능이 떨어지는 장치에서 특히 많은 데이터 목록을 표시할 때 성능 문제를 겪을 수 있습니다. 한꺼번에 많은 항목을 렌더링하면 장치에 과부하가 걸려 스크롤이 느려지거나 프레임이 떨어질 수 있습니다.\n\n**해결책:** React Native의 FlatList 컴포넌트는 이러한 성능 문제를 해결하기 위해 설계된 onViewableItemsChanged라는 강력한 속성을 제공합니다. 이는 목록 내 항목의 가시성이 변경될 때마다 호출되는 콜백 함수를 제공합니다. 이를 통해 다음과 같은 최적화를 전략적으로 구현할 수 있습니다:\n\n- **지연 로딩:** 사용자가 목록 끝에 접근할 때만 추가 데이터를 가져와 렌더링합니다.\n- **미디어 제어:** 비디오가 뷰포트를 벗어나거나 들어올 때 비디오를 일시 정지하거나 재생하여 자원을 절약합니다.\n- **선택적 업데이트:** 현재 가시 상태인 항목에 따라 FlatList 바깥쪽의 UI 일부를 업데이트합니다.\n\n\n\n`onViewableItemsChanged` Prop에 대해 설명드리겠습니다.\n\n함수 서명:\n\n```js\nonViewableItemsChanged: ({ changed, viewableItems }) => void\n```\n\n- changed: ViewToken 객체의 배열입니다. 각 객체는 특정 항목의 가시성 변경을 설명합니다.\n- viewableItems: 현재 뷰포트 내에서 실제로 보이는 항목을 나타내는 ViewToken 객체의 배열입니다.\n\n\n\nViewToken 구조:\n\n- index: 데이터 배열 내 항목의 인덱스입니다.\n- isViewable: 해당 항목이 보이는 영역 내에 있는 경우 true이고, 그렇지 않으면 false인 부울 값입니다.\n- key: 항목에 제공한 고유한 키입니다.\n- (기타 속성 가능): ViewToken은 viewabilityConfig에 기반한 추가 속성을 가질 수 있습니다.\n\n키 구성 옵션 (viewabilityConfig)\n\n- viewAreaCoveragePercentThreshold: 콜백을 트리거하기 위해 항목의 영역 중 얼마나 비춰져 있어야 하는지 결정하는 숫자 (예: 50).\n- itemVisiblePercentThreshold: 화면에 표시되어야 하는 항목의 얼마나 많은 부분을 제어하는 숫자 (항목의 높이가 다른 목록에 유용).\n- minimumViewTime: 항목이 \"보이는\" 것으로 간주되기 전에 보이는 지속 시간을 설정하는 밀리초 단위의 값입니다.\n- waitForInteraction: true인 경우 사용자가 목록과 상호 작용한 후까지 가시성 업데이트를 지연시켜 빠른 스크롤 중에 성능을 향상시킵니다.\n\n\n\n실용적인 예시: 무한 스크롤링\n\n```js\nconst handleViewableItemsChanged = ({ viewableItems }) => {\n  const isLastItemVisible = viewableItems[viewableItems.length - 1].isViewable;\n  if (isLastItemVisible && !isLoading) {  \n    loadMoreData(); \n  }\n};\n\n<FlatList\n    data={data}\n    onViewableItemsChanged={handleViewableItemsChanged}\n    viewabilityConfig={{ viewAreaCoveragePercentThreshold: 50 }} \n    // ... 다른 FlatList 속성들\n/>\n```\n\n주의사항\n\n- 트레이드오프(Trade-offs): onViewableItemsChanged 내부에 과도하게 복잡한 계산을 포함하는 것은 성능에 영향을 줄 수 있습니다. 콜백을 트리거하는 방법을 세밀하게 조정하기 위해 viewabilityConfig을 사용하세요.\n- 실제 최적화 예시: 매우 복잡한 시나리오에서는 onViewableItemsChanged를 getItemLayout과 결합하여 아이템 크기를 사전 계산하여 더 부드러운 스크롤링을 구현할 수 있습니다.\n\n\n\n## 스크롤 및 제어를 위한 주요 FlatList 메서드\n\n메서드 설명\n\n- flashScrollIndicators()\n- 목적: 스크롤 표시기(스크롤바)를 잠시 표시하여 사용자에게 시각적 피드백을 제공합니다.\n- 사용 사례: 목록 끝에 새 데이터를로드 한 후나 프로그래밍 방식으로 위치로 스크롤하는 경우에 사용합니다.\n- 예시:\n\n```js\nmyListRef.current.flashScrollIndicators();\n```\n\n\n\n- getNativeScrollRef()\n  - 목적: 기본 네이티브 스크롤 컴포넌트(예: ScrollView 또는 VirtualizedList)에 대한 참조를 제공합니다.\n  - 사용 사례: 절대적으로 필요한 경우에만 스크롤 컴포넌트의 하위 수준 사용자 정의를 위해 이에 액세스합니다. (대부분의 경우, 이는 필요하지 않을 것입니다).\n- getScrollResponder()\n  - 목적: 스크롤 상호작용을 관리하는 스크롤 응답자 객체에 대한 참조를 반환합니다.\n  - 사용 사례: 스크롤 동작을 세밀하게 조정하거나 특정 스크롤 이벤트에 응답해야 하는 고급 시나리오에서 사용합니다.\n- getScrollableNode()\n  - 목적: 스크롤 가능한 컴포넌트 자체에 대한 참조를 제공합니다.\n  - 사용 사례: 거의 필요하지 않습니다. 주로 스크롤 가능한 노드에서 직접 메서드를 호출해야 할 경우에 유용합니다.\n- scrollToEnd(params?: ' animated?: boolean ')\n  - 목적: 콘텐츠의 맨 끝(또는 목록이 수평인 경우 하단)으로 스크롤합니다.\n  - 옵션:\n    - animated (boolean, 기본: true): 스크롤을 애니메이션으로 제어할지 여부를 결정합니다.\n  - 예시:\n\n```js\nconst scrollToEnd = () => {\n    flatListRef.current.scrollToEnd({ animated: true }); \n};\n```\n\n* **중요:** 큰 목록의 경우, 부드럽고 효율적인 스크롤링을 위해 `getItemLayout` 속성을 사용하는지 확인하십시오.\n\nscrollToIndex(params: ' animated?: boolean; index: number; viewOffset?: number; viewPosition?: number; ')\n\n\n\n\n- 목적: 데이터 배열 내에서 특정 항목의 인덱스(위치)로 스크롤합니다.\n- 옵션:\n  - animated (boolean, 기본값: true): 애니메이션을 컨트롤합니다.\n  - index (number): 스크롤할 항목의 인덱스입니다.\n  - viewOffset (number): 픽셀 단위의 추가 오프셋입니다.\n  - viewPosition (number): 뷰포트 내 항목의 위치를 제어합니다 (0: 맨 위, 1: 맨 아래, 0.5: 중앙).\n- 예시:\n\n```js\nconst scrollToRecipe = (index) => {\n  flatListRef.current.scrollToIndex({ index, viewPosition: 0 }); // 화면 맨 위에 있는 항목의 맨 위로 스크롤\n};\n```\n\n- **강조:** 성능 개선을 위해 특정 항목으로 스크롤하는 우선적인 방법입니다.\n\nscrollToItem(params: ' animated?: boolean; item: Item; viewPosition?: number; ')\n\n\n\n- 목적: 데이터에서 아이템 객체를 제공하여 해당 항목으로 스크롤합니다.\n- 단점: 특히 대규모 목록의 경우 scrollToIndex보다 효율성이 떨어질 수 있으며 데이터 배열을 검색해야 할 수도 있습니다.\n- 참고: 가능하면 최상의 성능을 위해 scrollToIndex를 선택하십시오.\n\n## 이론을 실제로 구현하기: React Native의 FlatList를 활용한 인터랙티브 레시피 앱 제작\n\nFlatListDemonstration.jsx\n\n```js\nimport React, { useState, useCallback } from 'react';\nimport {\n  SafeAreaView,\n  FlatList,\n  Text,\n  TouchableOpacity,\n  ActivityIndicator,\n  RefreshControl,\n  StyleSheet,\n  TextInput,\n  View,\n} from 'react-native';\nimport recipesData from '../data/recipeData'; // 데이터가 올바르게 형식화되었는지 확인\nimport { useNavigation } from '@react-navigation/native';\n\nconst FlatListDemonstration = () => {\n  const navigation = useNavigation();\n  const [recipes, setRecipes] = useState(recipesData);\n  const [isFetching, setIsFetching] = useState(false);\n  const [refreshing, setRefreshing] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const toggleFavorite = (id) => {\n    const newRecipes = recipes.map(recipe =>\n      recipe.id === id ? { ...recipe, isFavorite: !recipe.isFavorite } : recipe,\n    );\n    setRecipes(newRecipes);\n    navigation.navigate('Favorites', {\n      recipes: newRecipes.filter(r => r.isFavorite),\n    });\n  };\n\n  const handleSearch = (text) => {\n    setSearchQuery(text);\n    const filteredData = text\n      ? recipes.filter(recipe =>\n          recipe.name.toLowerCase().includes(text.toLowerCase()),\n        )\n      : recipesData;\n    setRecipes(filteredData);\n  };\n\n  const onRefresh = useCallback(async () => {\n    setRefreshing(true);\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    setRefreshing(false);\n  }, []);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.searchBar}\n        placeholder=\"레시피 검색...\"\n        value={searchQuery}\n        onChangeText={handleSearch}\n      />\n      <FlatList\n        data={recipes}\n        renderItem={({ item }) => (\n          <View style={styles.item}>\n            <Text style={styles.title}>{item.name}</Text>\n            <View style={styles.actionArea}>\n              <TouchableOpacity onPress={() => toggleFavorite(item.id)}>\n                <Text style={styles.favorite}>\n                  {item.isFavorite ? '♥' : '☆'}\n                </Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                onPress={() =>\n                  navigation.navigate('RecipeDetails', { recipe: item })\n                }>\n                <Text style={styles.detailsButton}>세부 정보</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        )}\n        keyExtractor={item => item.id.toString()}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n        }\n      />\n    </SafeAreaView>\n  );\n};\n\nexport default FlatListDemonstration;\n```\n\n\n\n<img src=\"/assets/img/2024-05-12-OptimizeYourReactNativeListswithFlatListAPerformanceGuide_1.png\" />\n\nRecipeDetailsScreen.jsx\n\n```js\nimport React from 'react';\nimport {View, Text, StyleSheet, ScrollView} from 'react-native';\n\nconst RecipeDetailsScreen = ({route}) => {\n  const {recipe} = route.params;\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>{recipe.name}</Text>\n      <Text style={styles.description}>{recipe.description}</Text>\n      <View style={styles.section}>\n        <Text style={styles.header}>재료</Text>\n        {recipe.ingredients.map((ingredient, index) => (\n          <Text key={index} style={styles.text}>\n            {ingredient.name}: {ingredient.quantity}\n          </Text>\n        ))}\n      </View>\n      <View style={styles.section}>\n        <Text style={styles.header}>조리 방법</Text>\n        {recipe.instructions.map((step, index) => (\n          <Text key={index} style={styles.text}>\n            {index + 1}. {step}\n          </Text>\n        ))}\n      </View>\n    </ScrollView>\n  );\n};\r\n```\n\n<img src=\"/assets/img/2024-05-12-OptimizeYourReactNativeListswithFlatListAPerformanceGuide_2.png\" />\n\n\n\nFavouriteList.jsx\n\n```js\nimport React, {useState} from 'react';\nimport {View, Text, TouchableOpacity, Image, StyleSheet} from 'react-native';\nimport DraggableFlatList from 'react-native-draggable-flatlist';\nimport {GestureHandlerRootView} from 'react-native-gesture-handler';\nimport {useNavigation} from '@react-navigation/native';\nconst FavoriteList = ({route}) => {\n    const navigation = useNavigation();\n    const {recipes} = route.params;\n    const [favorites, setFavorites] = useState(recipes);\n\n    return (\n        <GestureHandlerRootView style={styles.rootView}>\n            <View style={styles.container}>\n                <DraggableFlatList\n                    data={favorites}\n                    renderItem={({item, drag, isActive}) => (\n                        <TouchableOpacity\n                            onLongPress={drag}\n                            style={[styles.card, isActive && styles.activeCard]}\n                        >\n                            <Image\n                                source={item.image}\n                                style={styles.recipeImage}\n                                accessibilityLabel={`Image of ${item.name}`}\n                            />\n                            <View style={styles.textContainer}>\n                                <Text style={styles.recipeTitle}>{item.name}</Text>\n                                <Text style={styles.recipeDescription}>{item.description}</Text>\n                                <TouchableOpacity  style={styles.detailsButton}  onPress={() =>\n                                    navigation.navigate('RecipeDetails', {recipe: item})}\n                                >\n                                    <Text style={styles.detailsButtonText}>View Details</Text>\n                                </TouchableOpacity>\n                            </View>\n                        </TouchableOpacity>\n                    )}\n                    keyExtractor={item => item.id.toString()}\n                    onDragEnd={({data}) => setFavorites(data)}\n                />\n            </View>\n        </GestureHandlerRootView>\n    );\n};\n```\n\n![Image 1](/assets/img/2024-05-12-OptimizeYourReactNativeListswithFlatListAPerformanceGuide_3.png)\n\n![Image 2](/assets/img/2024-05-12-OptimizeYourReactNativeListswithFlatListAPerformanceGuide_4.png)\n\n\n\n\nApp.jsx\n\n```js\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport FlatListDemonstration from './src/components/flatlist';\nimport RecipeDetailsScreen from './src/screens/RecipeDetailsScreen';\n\nimport FavoriteList from './src/components/FavoriteList';\n\nconst Stack = createNativeStackNavigator();\n\nconst App = () => {\n  return (\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen\n            name=\"Home\"\n            component={FlatListDemonstration} // 홈 화면에 FlatListDemonstration 사용\n            options={{ title: 'Recipe List' }}\n          />\n\n          <Stack.Screen\n            name=\"RecipeDetails\"\n            component={RecipeDetailsScreen}\n            options={{ title: 'Recipe Details' }}\n          />\n          \n          <Stack.Screen name=\"Favorites\" component={FavoriteList} options={{ title: 'Favorite Recipes' }} />\n      \n        </Stack.Navigator>\n      </NavigationContainer>\n  );\n};\n\nexport default App;\n```\n\n컴포넌트와 역할:\n\n- FlatListDemonstration: 레시피 목록을 렌더링하는 주요 컴포넌트입니다. 레시피 데이터, 사용자 상호작용(검색, 즐겨찾기), 다른 화면으로의 이동을 관리합니다.\n- FavoriteList: DraggableFlatList 라이브러리를 사용하여 즐겨찾은 레시피 목록을 표시하는 컴포넌트로, 사용자가 순서를 변경할 수 있습니다.\n- RecipeDetailsScreen: FlatList에서 항목을 탭하면 특정 레시피의 세부 정보를 표시하는 컴포넌트입니다.\n\n\n\nFlatList와 관련된 주요 기능:\n\n- 상태 관리 (useState):\n  - 컴포넌트는 여러 상태 변수를 유지합니다:\n    - recipes: 레시피 데이터 배열을 보유합니다.\n    - isFetching: 데이터를 가져오는지 추적합니다 (풀 투 리프레시를 위한 가능성 있음).\n    - refreshing: 데이터 가져오는 동안 시각적 리프레시 인디케이터를 제어합니다.\n    - searchQuery: 사용자가 입력한 현재 검색어를 저장합니다.\n  - toggleFavorite 함수는 사용자가 레시피 항목의 즐겨찾기 버튼을 탭할 때 트리거됩니다. 이 함수는 특정 레시피를 찾아 isFavorite 속성을 토글하고, 필요에 따라 즐겨찾기 화면으로 이동을 트리거합니다.\n  - handleSearch 함수는 검색 바에서 사용자 입력에 따라 searchQuery 상태를 업데이트합니다. 그런 다음 검색어와 일치하는 레시피 데이터만 표시하기 위해 recipes 데이터를 필터링합니다.\n- 검색 기능:\n  - 검색 바를 사용하여 레시피 목록을 동적으로 필터링할 수 있습니다.\n  - 사용자가 검색 바에 입력할 때 handleSearch 함수가 호출되어 searchQuery 상태를 업데이트합니다.\n  - handleSearch 함수는 filter 메서드를 사용하여 recipes 데이터를 필터링합니다. 검색어의 소문자 버전을 포함하는 레시피 이름을 가진 레시피만 유지합니다.\n  - 필터링된 데이터는 새로운 recipes 상태로 설정되어 FlatList가 업데이트된 목록으로 다시 렌더링됩니다.\n- 내비게이션 (@react-navigation/native):\n  - 이 예제는 화면 간 부드러운 내비게이션을 위해 @react-navigation/native를 사용합니다.\n  - 레시피 항목을 누르면 toggleFavorite 함수가 호출되며, 레시피가 즐겨찾기 상태인 경우 즐겨찾기 화면으로 이동할 수 있습니다.\n  - \"자세히 보기\" 버튼을 누르면 navigation.navigate(`RecipeDetails`, 'recipe: item')이 호출되어 선택한 레시피 데이터를 매개변수로 전달하여 RecipeDetailsScreen을 내비게이션 스택에 푸시합니다.\n- 풀 투 리프레시 (RefreshControl):\n  - 풀 투 리프레시 기능을 구현하기 위해 RefreshControl 컴포넌트를 사용합니다.\n  - 사용자가 목록 상단에서 아래로 스와이프하면 onRefresh 함수가 호출됩니다.\n  - 이 예제에서 onRefresh는 데이터 가져오기를 모방하기 위해 1.5초 지연을 시뮬레이션하고, 그 후 refreshing 상태를 업데이트하여 리프레시 인디케이터를 끕니다.\n  - 실제 앱에서는 onRefresh가 아마도 API에서 새 데이터를 가져오고 recipes 상태를 그에 맞게 업데이트할 것입니다.\n\n더 많은 정보를 보려면 공식 문서를 방문해주세요: https://reactnative.dev/docs/flatlist\n\n이 글을 읽어주셔서 정말 감사합니다! 여러분의 지원과 관심이 저에게는 큰 힘이 됩니다. 유용하게 여기셨다면, 이를 즐길 수 있는 다른 사람들과 공유해보시기를 권장드립니다. 더 많은 통찰과 팁을 기대해주세요. 📚💖 우리 커뮤니티의 멋진 일원이 되어 주셔서 다시 한번 감사드립니다! 🌟\n\n\n\n# 스택데믹 🎓\n\n끝까지 읽어 주셔서 감사합니다. 떠나시기 전에:\n\n- 작가를 응원하고 팔로우해 주세요! 👏\n- 저희를 팔로우하세요 X | LinkedIn | YouTube | Discord\n- 다른 플랫폼들도 방문해 주세요: In Plain English | CoFeed | Venture | Cubed\n- 스택데믹닷컴에서 더 많은 콘텐츠를 만나보세요","ogImage":{"url":"/assets/img/2024-05-12-OptimizeYourReactNativeListswithFlatListAPerformanceGuide_0.png"},"coverImage":"/assets/img/2024-05-12-OptimizeYourReactNativeListswithFlatListAPerformanceGuide_0.png","tag":["Tech"],"readingTime":26},{"title":"마이크로 프론트엔드를 탐구하며 React  Vite로 구현하기","description":"","date":"2024-05-12 18:46","slug":"2024-05-12-ExploringMicroFrontendsandImplementationwithReactVite","content":"\n\n![이미지](/assets/img/2024-05-12-ExploringMicroFrontendsandImplementationwithReactVite_0.png)\n\n마이크로 프론트엔드는 현대적인 웹 애플리케이션을 구축하기 위한 확장 가능한 프레임워크로 점점 더 인기를 얻고 있습니다. 이 방법론은 팀이 독립적인 특징이나 구성 요소를 구축, 배포 및 확장할 수 있게 함으로써 증진된 협력과 지속가능성을 육성합니다. 이 기사에서는 마이크로 프론트엔드가 무엇인지, 그리고 React와 Vite를 활용한 마이크로 프론트엔드의 기본 구현을 탐색할 것입니다.\n\n## 안내\n\n- 마이크로 프론트엔드란 무엇인가요?\n- 예시: 전통적인 전자 상거래 프론트엔드 애플리케이션\n- 예시: 마이크로 프론트엔드를 활용한 전자 상거래\n- 마이크로 프론트엔드 프로젝트 설정\n- 프로젝트 실행\n- 결론\n\n\n\n## 마이크로 프론트엔드\n\n백엔드 팀에서 백엔드를 구축하기 위해 마이크로서비스 접근 방식을 사용한다고 들어 보았을 수 있습니다. 그렇다면 같은 방식을 프론트 엔드 구축에도 사용할 수 있다면 어떨까요?\n\n이렇게 하면 팀이 개별적으로 작업할 수 있고, 코드베이스에서 충돌이 적어지며, 그 충돌을 해결하는 데 걸리는 시간을 줄일 수 있는 등 여러 가지 이점을 얻을 수 있습니다.\n\n프론트엔드 세계에서 마이크로서비스의 확장 개념은 마이크로 프론트엔드라고 불립니다. 예를 들어 React를 사용하여 구축된 전자 상거래 프론트 엔드 애플리케이션을 살펴보며 용어 '마이크로 프론트엔드'를 이해해 봅시다.\n\n\n\n## 전통적인 전자 상거래 프런트 엔드 응용 프로그램\n\n일반적으로 프런트엔드 응용 프로그램을 구축할 때는 구성 요소, 자산, 라우팅 및 프런트엔드에 필요한 비즈니스 로직을 모든 코드베이스에 작성한 후 서버에서 제공됩니다. 그러나 현재 대부분의 조직에서 사용하는 다양한 JavaScript UI 프레임워크의 등장으로 이 프레임워크에는 제한 사항이나 단점이 있습니다. 예를 들어, 응용 프로그램이 커질수록 브라우저의 로드 시간이 증가합니다.\n\n![이미지](/assets/img/2024-05-12-ExploringMicroFrontendsandImplementationwithReactVite_1.png)\n\nReact를 사용하여 구축된 전자 상거래 앱을 고려해 보세요. 제품 검색, 구매 및 주문 추적과 같은 기능이 포함되어 있습니다. 모놀리식 프런트엔드 응용 프로그램에서 이러한 페이지들이 포함될 것입니다.\n\n\n\n리액트 전자 상거래 애플리케이션이 메인 JavaScript 청크에 구축되어 있습니다. 누군가 사이트를 방문할 때 브라우저에 의해로드됩니다. 사용자는 전체 프론트엔드 애플리케이션을 포함한 모든 JavaScript 파일을 다운로드하기까지 기다려야 합니다. 이로 인해 애플리케이션의 초기 로드 시간이 크게 증가할 수 있습니다.\n\n이 로드 시간 문제를 마이크로 프론트엔드로 해결할 수 있습니다.\n\n## 마이크로 프론트엔드와 전자 상거래\n\n전자 상거래 애플리케이션을 고려해 봅시다. 사용자가 제품을 검색하기 위해 애플리케이션에 들어올 경우, 브라우저는 모든 코드를 다운로드할 필요가 없습니다. 대신, 사용자가 필요로 하는 부분을 사용할 수 있어야 합니다. 심지어 다른 부분은 그들에게 관련이 없더라도요.\n\n\n\n동일한 애플리케이션을 마이크로 프론트엔드 접근 방식을 사용하여 구축할 수 있습니다. 마이크로 프론트엔드 접근 방식은 전체 큰 애플리케이션을 제공하는 기능에 따라 세분화하여 각각 개별적으로 구축하는 간단한 아이디어입니다. 이렇게 하면 팀원들이 자신이 구축 중인 기능에 대해 더 잘 이해할 수 있고 해당 기능에 대해서만 책임질 수 있습니다.\n\n따라서 전자 상거래 애플리케이션을 제품, 주문 및 배송 기능으로 나눌 수 있습니다. 제품 마이크로 프론트엔드 애플리케이션은 제품 목록 및 검색과 관련된 UI만 렌더링합니다. 주문 마이크로 프론트엔드 애플리케이션은 주문 관련 UI에 책임을 지고 있으며, 배송 마이크로 프론트엔드는 제품 추적 기능에 책임이 있습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:1000/0*sA7aQvM473L0-qOW.gif)\n\n이 애플리케이션을 작은 부분으로 나누기 때문에 이러한 작은 앱들을 병합하거나 통합하여 주 애플리케이션으로 작동할 수 있어야 합니다. 사용자 입력에 따라 이러한 작은 앱들을 통합하고 렌더링하는 책임을 지게 될 host라는 주 메인 애플리케이션을 구축할 수 있습니다.\n\n\n\n다양한 서브 애플리케이션을 통합하는 다른 방법들이 있습니다. 빌드 시간 통합, 실행 시간 통합, 서버 측 통합 등이 있어요. 이것은 마이크로 프론트엔드가 무엇인지에 대한 개요를 제공합니다.\n\n## 마이크로 프론트엔드 프로젝트 설정\n\n이 프로젝트에서는 호스트/애플리케이션을 설정하고, 2개의 리액트 컴포넌트 remote-a 및 remote-b를 호스팅하고 있습니다. 그리고 host로 호스트하고 있어요.\n\n```js\n# 모든 애플리케이션을 담을 폴더 생성\nmkdir vite-react-micro-frontend \ncd vite-react-micro-frontend\n\n# 호스트 애플리케이션 생성\nnpx create-vite host --template react\ncd host\nnpm install\nnpm install @originjs/vite-plugin-federation --save-dev\ncd ..\n\n# remote-a 애플리케이션 생성\nnpx create-vite remote-a --template react\ncd remote-a\nnpm install\nnpm install @originjs/vite-plugin-federation --save-dev\ncd ..\n\n# remote-b 애플리케이션 생성\nnpx create-vite remote-b --template react\ncd remote-b\nnpm install\nnpm install @originjs/vite-plugin-federation --save-dev\ncd ..\n\n# Visual Code 편집기를 해당 폴더에서 열기\ncode .\n```\n\n\n\n이제 세 개의 React 앱이 생성되었습니다.\n\n계속하기 위해 두 개의 원격 애플리케이션의 vite.config.js 파일을 수정해야 합니다.\n\nremote-a의 경우 vite.config.js 파일을 수정할 수 있습니다.\n\n```js\n// remote-a/vite.config.js\n\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport federation from '@originjs/vite-plugin-federation'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    federation({\n      name: \"remote_a\",\n      filename: \"remoteEntry.js\",\n      exposes: {\n        \"./App\": \"./src/App\",\n      },\n      shared: [\"react\", \"react-dom\"],\n    })\n  ],\n  build: {\n    modulePreload: false,\n    target: \"esnext\",\n    minify: false,\n    cssCodeSplit: false,\n  },\n})\n```\n\n\n\n\nFor remote-b, we can amend the `vite.config.js` file as follows:\n\n```js\n// remote-a/vite.config.js\n\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport federation from '@originjs/vite-plugin-federation'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    federation({\n      name: \"remote_b\",\n      filename: \"remoteEntry.js\",\n      exposes: {\n        \"./App\": \"./src/App\",\n      },\n      shared: [\"react\", \"react-dom\"],\n    })\n  ],\n  build: {\n    modulePreload: false,\n    target: \"esnext\",\n    minify: false,\n    cssCodeSplit: false,\n  },\n})\n```\n\nTo make the same modification for remote-b's project, you should edit the `vite.config.js` file. The only difference is the name of the federation. Make sure to change it accordingly.\n\nNext, navigate to the `package.json` file and define a separate port for each remote project. Remember, only one project can run on each port.\n\n\n\n지금은 package.json의 remote-a를 다음과 같이 유지하고 있어요:\n\n```js\n{\n  \"name\": \"remote-a\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite --port 2020\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview --port 2020\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@originjs/vite-plugin-federation\": \"^1.3.5\",\n    \"@types/react\": \"^18.2.66\",\n    \"@types/react-dom\": \"^18.2.22\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-plugin-react\": \"^7.34.1\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.6\",\n    \"vite\": \"^5.2.10\"\n  }\n}\n```\n\n그리고 remote-b의 package.json은 다음과 같아요:\n\n```js\n{\n  \"name\": \"remote-b\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite --port 4000\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview --port 4000\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@originjs/vite-plugin-federation\": \"^1.3.5\",\n    \"@types/react\": \"^18.2.66\",\n    \"@types/react-dom\": \"^18.2.22\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-plugin-react\": \"^7.34.1\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.6\",\n    \"vite\": \"^5.2.0\"\n  }\n}\n```\n\n\n\n지금 React 앱을 호스트하게 변경해주세요. 호스트의 프로젝트인 vite.config.js 파일을 수정해야 합니다.\n\n```js\n// host/vite.config.js\n\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport federation from '@originjs/vite-plugin-federation'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    federation({\n      name: \"app\",\n      remotes: {\n        remoteA: \"http://localhost:2020/assets/remoteEntry.js\",\n        remoteB: \"http://localhost:4000/assets/remoteEntry.js\",\n      },\n      shared: [\"react\", \"react-dom\"]\n    })\n  ],\n})\n```\n\n이제 host 프로젝트로 remoteA와 remoteB를 가져올 수 있습니다. 시연 목적으로, host의 App.js 파일에 remoteA와 remoteB를 가져올 것입니다. 아래 코드에서 확인할 수 있습니다.\n\n```js\nimport { useState } from 'react'\nimport reactLogo from './assets/react.svg'\nimport viteLogo from '/vite.svg'\nimport './App.css'\nimport RemoteA from \"remoteA/App\"\nimport RemoteB from \"remoteB/App\"\n\nfunction App() {\n  const [count, setCount] = useState(0)\n  return (\n    <>\n      <section>\n        <div>\n          <div>\n            <a href=\"https://vitejs.dev\" target=\"_blank\">\n              <img src={viteLogo} className=\"logo\" alt=\"Vite 로고\" />\n            </a>\n            <a href=\"https://react.dev\" target=\"_blank\">\n              <img src={reactLogo} className=\"logo react\" alt=\"React 로고\" />\n            </a>\n          </div>\n          <h1>호스트</h1>\n          <div className=\"card\">\n            <button onClick={() => setCount((count) => count + 1)}>\n              현재 카운트: {count}\n            </button>\n            <p>\n              <code>src/App.jsx</code>를 편집하고 저장하여 HMR을 테스트하세요.\n            </p>\n          </div>\n          <p className=\"read-the-docs\">\n            Vite 및 React 로고를 클릭하여 더 많이 알아보세요.\n          </p>\n        </div>\n      </section>\n      <section><RemoteA /></section>\n      <section><RemoteB /></section>\n    </>\n  )\n}\n\nexport default App\n```\n\n\n\n## 프로젝트 실행하기\n\n원격 서버 A와 원격 서버 B의 터미널로 이동하여 프로젝트를 빌드하고 정적 빌드 프로젝트를 제공하세요.\n\n```js\nnpm run build\nnpm run preview\n```\n\n이렇게 하면 몇 가지 Js 파일이 생성되고 어플리케이션을 미리보기할 수 있는 URL이 제공됩니다. 해당 URL을 브라우저에서 열어보세요.\n\n\n\n호스트 앱을 실행하세요. 호스트 앱 터미널로 이동해서 다음 명령어를 입력한 후 엔터 키를 누르세요.\n\n```js\nnpm run dev\n```\n\n이제 원격 앱인 remote-a 및 remote-b 앱이 호스트 앱 내에서 추가 구성 요소로 원활하게 통합되는 것을 관찰하세요. 이것은 Micro Frontends의 우아함을 보여줍니다. 호스트 애플리케이션은 이러한 원격 구성 요소를 동적으로 검색하고 통합합니다.\n\n저는 세 가지 다른 React 애플리케이션인 remote-a, remote-b 및 호스트 애플리케이션을 통합된 환경 내에서 운영하는 것을 보여줬습니다. 이것은 Micro Frontends 패러다임의 대표적 예시입니다. 이 React 애플리케이션을 개발할 때 어떤 거대한 프레임워크도 사용하지 않아서 명확성을 유지하기 위해 그랬습니다. 자유롭게 시도해보세요. 솔직히 말해서, 저도 React+Vite로 Micro Frontends를 처음 사용해봅니다.\n\n\n\n## 결론\n\n마지막으로, React와 Vite를 활용하여 @originjs/vite-plugin-federation이 향상시킨 Micro Frontends의 구축은 웹 애플리케이션 개발을 위한 모듈식이며 확장 가능한 프레임워크를 제공합니다. 이 방법론은 팀이 다양한 프로젝트 구성 요소에 대해 독립적으로 작업하고 협업 및 지속가능성을 촉진할 수 있습니다. 이 설정을 실험해보면 웹 개발 활동에서 Micro Frontends의 유연성과 견고함을 직접 체험할 수 있습니다.\n\n마지막까지 읽어 주셔서 감사합니다.\n\n더 많이 알고 싶다면 저를 소개하는 링크를 통해 연락해 주세요.\n\n\n\n제 다음 블로그를 게시할 때 알림을 받으려면 구독해 주세요. 다음에 또 만나요! \n\n# 쉽고 명료한 영어로 🚀\n\nIn Plain English 커뮤니티의 일원이 되어줘서 감사합니다! 떠나시기 전에:\n\n- 반드시 박수를 보내고 작가를 팔로우해 주세요️👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼에서도 만나보세요: Stackademic | CoFeed | Venture | Cubed\n- PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요","ogImage":{"url":"/assets/img/2024-05-12-ExploringMicroFrontendsandImplementationwithReactVite_0.png"},"coverImage":"/assets/img/2024-05-12-ExploringMicroFrontendsandImplementationwithReactVite_0.png","tag":["Tech"],"readingTime":10}],"page":"146","totalPageCount":156,"totalPageGroupCount":8,"lastPageGroup":16,"currentPageGroup":7},"__N_SSG":true}