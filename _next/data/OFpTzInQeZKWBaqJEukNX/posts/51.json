{"pageProps":{"posts":[{"title":"결론","description":"","date":"2024-06-20 00:54","slug":"2024-06-20-Conclusion","content":"\n\n## 숨겨진 보석 찾기: 웹 개발 기술 향상을 위한 필수 HTML 태그 5가지\n\nHTML(HyperText Markup Language)은 웹 개발의 기초로 웹 페이지의 구조를 제공합니다. 다양한 HTML 태그 중 일부는 상호 작용 및 사용성을 향상시키는 능력으로 인해 특히 주목할 만합니다. 이 블로그에서는 `dialog`, `map`, `details`, `meter`, 그리고 `progress`라는 다섯 가지 HTML 태그를 탐색해 보겠습니다. 이러한 태그를 이해하면 더 다이내믹하고 사용자 친화적인 웹 페이지를 만들 수 있습니다.\n\n## 1. `dialog` 태그\n\n`dialog` 태그는 대화 상자나 서브 윈도우를 정의하는 데 사용됩니다. 이는 사용자 정의 팝업 대화 상자, 모달 윈도우 및 경고 상자를 만드는 데 특히 유용할 수 있습니다. 이는 div 요소와 CSS를 사용하는 사용자 정의 솔루션과 비교하여 더 의미론적인 HTML을 제공하고 접근성을 향상시킵니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*X4wMS_9WELuOQ66PjKiLtw.gif\" />\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>대화 상자 예제</title>\n</head>\n<body>\n    <button id=\"openDialog\">대화 상자 열기</button>\n    <dialog id=\"myDialog\">\n        <p>이것은 대화 상자입니다!</p>\n        <button id=\"closeDialog\">닫기</button>\n    </dialog>\n\n    <script>\n        const dialog = document.getElementById('myDialog');\n        document.getElementById('openDialog').addEventListener('click', () => {\n            dialog.showModal();\n        });\n        document.getElementById('closeDialog').addEventListener('click', () => {\n            dialog.close();\n        });\n    </script>\n</body>\n</html>\n```\n\n## 2. `map` 태그\n\n`map` 태그는 `area` 태그와 함께 사용되어 이미지와 클릭 가능한 영역을 정의하는 이미지 맵을 만드는데 사용됩니다. 이는 서로 다른 목적지로 연결된 서로 다른 영역이 있는 인터랙티브 이미지를 만드는 데 도움이 될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Image Map Example</title>\n</head>\n<body>\n    <img src=\"example.jpg\" usemap=\"#exampleMap\" alt=\"Example Image\">\n\n    <map name=\"exampleMap\">\n        <area shape=\"rect\" coords=\"34,44,270,350\" href=\"link1.html\" alt=\"Link 1\">\n        <area shape=\"circle\" coords=\"337,300,44\" href=\"link2.html\" alt=\"Link 2\">\n        <area shape=\"poly\" coords=\"100,200,120,210,130,220\" href=\"link3.html\" alt=\"Link 3\">\n    </map>\n</body>\n</html>\n```\n\n## 3. `details` Tag\n\n`details` 태그는 사용자가 추가 콘텐츠를 표시하거나 숨기기 위해 열고 닫을 수 있는 디스클로저 위젯을 만드는 데 사용됩니다. FAQ, 추가 정보 섹션 또는 필요할 때만 표시하고 싶은 모든 콘텐츠에 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n``` markdown\n![image](https://miro.medium.com/v2/resize:fit:1400/1*KJNJQ75h76oAhSL4atPIfw.gif)\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Details Example</title>\n</head>\n<body>\n    <details>\n        <summary>More Information</summary>\n        <p>This is additional information that can be toggled by clicking \"More Information\".</p>\n    </details>\n</body>\n</html>\n\n## 4. `meter` Tag\n\n`meter` 태그는 디스크 사용량 지시기, 연료 게이지 또는 투표 결과와 같은 알려진 범위 내의 스칼라 측정값을 나타냅니다. 일정 범위 내의 값을 시각적으로 나타내는 훌륭한 방법으로 데이터의 시각적 매력과 사용성을 향상시킬 수 있습니다.\n```\n\n<div class=\"content-ad\"></div>\n\n\n![](/assets/img/2024-06-20-Conclusion_0.png)\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Meter Example</title>\n</head>\n<body>\n    <label for=\"diskUsage\">Disk Usage:</label>\n    <meter id=\"diskUsage\" value=\"0.6\" min=\"0\" max=\"1\">60%</meter>\n</body>\n</html>\n```\n\n## 5. `progress` Tag\n\n`progress` 태그는 작업의 완료 진행률을 나타내는 데 사용됩니다. 다운로드 또는 파일 업로드와 같은 작업의 진행 상황을 제공하여 사용자에게 진행 중인 작업의 상태에 대한 시각적인 신호를 제공하며 사용자 경험을 보다 원활하고 정보를 얻을 수 있게 합니다.\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-Conclusion_1.png\" />\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>진행 상황 예제</title>\n</head>\n<body>\n    <label for=\"fileProgress\">파일 업로드 진행 상황:</label>\n    <progress id=\"fileProgress\" value=\"70\" max=\"100\">70%</progress>\n</body>\n</html>\n```\n\n# 결론\n\n`dialog`, `map`, `details`, `meter`, `progress` 다섯 가지 HTML 태그는 웹 페이지의 상호작용성과 사용성을 향상시키는 강력한 도구입니다. 이러한 태그를 프로젝트에 통합함으로써 사용자에게 더 풍부하고 매력적인 경험을 제공할 수 있습니다. 이러한 요소를 이해하고 활용함으로써 웹 개발 기술을 향상시키는 데 도움을 줄 뿐만 아니라 더 동적이고 접근성이 높은 웹사이트를 만드는 데 기여할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-20-Conclusion_0.png"},"coverImage":"/assets/img/2024-06-20-Conclusion_0.png","tag":["Tech"],"readingTime":5},{"title":"CSS를 사용하여 체크박스 테두리 색상 변경하기","description":"","date":"2024-06-20 00:53","slug":"2024-06-20-Checkboxbordercolorusingcss","content":"\n\n\n![Checkbox border color using css](/assets/img/2024-06-20-Checkboxbordercolorusingcss_0.png)\n\n출처: CSS를 사용한 체크박스 테두리 색상\n\n더 많은 질문과 답변을 보려면 Frontend Interview Questions 웹 사이트를 방문해주세요.\n\n## 체크박스 테두리 색상 사용 방법 이해하기\n\n\n<div class=\"content-ad\"></div>\n\n기본적으로 웹 브라우저에서 렌더링되는 체크박스는 사용자의 운영 체제 또는 브라우저 설정에서 스타일을 상속받습니다. 그러나 개발자는 CSS를 사용하여 기본 스타일을 재정의하여 다양한 플랫폼에서 일관된 외관을 구현할 수 있습니다. 체크박스의 테두리 색상을 수정함으로써 개발자는 웹 사이트 디자인에 체크박스를 심미적으로 통합하고 시각적 일관성을 향상시킬 수 있습니다.\n\n## 체크박스 테두리 색상 사용자 정의 기술\n\n## 1. border-color 속성 사용\n\n체크박스의 테두리 색상을 변경하는 가장 간단한 방법은 CSS에서 직접 border-color 속성을 적용하는 것입니다. 이 기술은 체크박스 요소를 대상으로 하고 원하는 테두리 색상을 지정하는 것을 포함합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ninput[type=\"checkbox\"] {\n    border-color: #007bff; /* 예시 색상: 파란색 */\n}\n```\n\n## 2. 가상 요소를 사용한 체크박스 모양 맞춤\n\n다른 접근 방식으로 가상 요소(::before 및 ::after)를 활용하여 사용자 정의 체크박스 스타일을 만들 수 있습니다. 이 방법은 체크박스를 스타일링하는 데 더 많은 유연성을 제공하며 외관에 대해 더 많은 제어를 가능하게 합니다.\n\n```js\ninput[type=\"checkbox\"] {\n    display: none; /* 기본 체크박스 숨김 */\n}\n\ninput[type=\"checkbox\"] + label::before {\n    content: '';\n    display: inline-block;\n    width: 16px; /* 필요에 따라 크기 조정 */\n    height: 16px; /* 필요에 따라 크기 조정 */\n    border: 2px solid #28a745; /* 예시 색상: 초록색 */\n    border-radius: 3px; /* 둥근 모서리 */\n    margin-right: 8px; /* 체크박스와 레이블 간 간격 */\n}\n\ninput[type=\"checkbox\"]:checked + label::before {\n    background-color: #28a745; /* 예시 색상: 초록색 */\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 체크박스 테두리 색상 사용자 정의 예시\n\n체크박스 테두리 색상 사용자 정의의 실제 예시를 살펴봅시다:\n\n## 예시 1: 기본 체크박스 테두리 색상 변경\n\n```js\ninput[type=\"checkbox\"] {\n    border-color: #ff0000; /* 빨간색 테두리 색상 */\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 예제 2: 가상 요소를 사용한 사용자 정의 체크박스 스타일링\n\n```js\n<input type=\"checkbox\" id=\"checkbox1\">\n<label for=\"checkbox1\">옵션 1</label>\n```\n\n```js\ninput[type=\"checkbox\"] + label::before {\n    content: '';\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n    border: 2px solid #007bff; /* 파란 테두리 색상 */\n    border-radius: 3px;\n    margin-right: 8px;\n}\n```\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\nCSS를 사용하여 체크박스 테두리 색상을 사용자 정의함으로써 개발자는 웹 사이트 디자인에 체크박스를 원활하게 통합할 수 있는 유연성을 제공받습니다. border-color 속성을 직접 적용하거나 가상 요소를 사용하여 사용자 정의 체크박스 스타일을 생성함으로써, 개발자는 시각적으로 매력적인 체크박스를 만들어 사용자 경험을 향상시킬 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-20-Checkboxbordercolorusingcss_0.png"},"coverImage":"/assets/img/2024-06-20-Checkboxbordercolorusingcss_0.png","tag":["Tech"],"readingTime":3},{"title":"스타일을 간편하게 만들기 미디어 쿼리 미친듯이 사용하지 말자","description":"","date":"2024-06-20 00:53","slug":"2024-06-20-StreamlineYourStylesNoMoreMediaQueryMadness","content":"\n\n<img src=\"/assets/img/2024-06-20-StreamlineYourStylesNoMoreMediaQueryMadness_0.png\" />\n\nCSS 미디어 쿼리의 복잡한 구문에 질렸나요? 새로운 구문이 어떻게 워크플로우를 단순화할 수 있는지 알아보세요. 이 새로운 접근법을 사용하면 코드를 더 깨끗하고 읽기 쉽게 만들 수 있습니다.\n\n새로운 CSS 미디어 쿼리 구문으로 전환하면 시간과 노력을 절약할 수 있습니다. 더 효율적이고 유지보수가 용이한 코드를 작성할 수 있게 됩니다.\n\n많은 개발자들은 전통적인 미디어 쿼리가 너무 장황하다고 생각하여 자주 오해와 오류가 발생합니다. 새로운 구문은 더 간단하고 효율적인 해결책을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# Min-Width 및 Max-Width와 작별 인사\n\n새로운 CSS 미디어 쿼리 구문은 반응형 브레이크포인트를 정의하는 방법을 혁신하였습니다. 이로 인해 코드가 더 깔끔해지고 이해하기 쉬워졌습니다.\n\n새 구문의 장점\n\n- 명확성: 새 구문은 간단하고 직관적입니다.\n\n<div class=\"content-ad\"></div>\n\n- 효율성: 단순함을 줄이면 빠른 개발을 이끌어냅니다.\n\n- 호환성: 최신 브라우저에서 높은 지원률을 보장합니다.\n\n# 코드 예시\n\n전통적으로는 다음과 같이 작성할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\r\n@media(min-width: 500px){\n  /* 여기에 스타일을 추가하세요 */\n}\r\n```\n\n새롭고 더 간편한 구문을 사용하면 다음과 같이 됩니다:\n\n```js\r\n@media(width >= 500px){\n  /* 여기에 스타일을 추가하세요 */\n}\r\n```\n\n- 새로운 구문은 더 직관적인 비교 형식을 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n- **min-width** 및 **max-width**를 사용하지 않아도 됩니다.\n\n- 모던 브라우저에서 널리 지원됩니다.\n\n최대 너비에도 적용할 수 있습니다...\n\n구 방식:\n\n<div class=\"content-ad\"></div>\n\n```js\n@media(max-width: 800px){\n  /* 여기에 스타일을 입력하세요 */\n}\n```\n\n새로운 방법:\n\n```js\n@media(width <= 800px){\n  /* 여기에 스타일을 입력하세요 */\n}\n```\n\n두 가로 길이 사이를 테스트할 수도 있어요...\n\n<div class=\"content-ad\"></div>\n\n이전 방식:\n\n```js\n@media(min-width: 500px) and (max-width: 800px){\n  /* 여기에 스타일 작성*/\n}\n```\n\n새로운 방식:\n\n```js\n@media(500px <= width<= 800px){\n  /* 여기에 스타일 작성*/\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n새 CSS 미디어 쿼리 구문으로 전환하면 코드가 간결해지며 반응형 디자인 작업에 집중할 수 있습니다. 프로젝트에서 미디어 쿼리를 처리하는 더 간결한 방법을 즐기세요. 이 새로운 구문을 오늘부터 적용해보세요!\n\n멋진 코드 \\m/","ogImage":{"url":"/assets/img/2024-06-20-StreamlineYourStylesNoMoreMediaQueryMadness_0.png"},"coverImage":"/assets/img/2024-06-20-StreamlineYourStylesNoMoreMediaQueryMadness_0.png","tag":["Tech"],"readingTime":2},{"title":"CSS 앵커의 위치 조정","description":"","date":"2024-06-20 00:52","slug":"2024-06-20-PositioningCSSanchors","content":"\n\n![](/assets/img/2024-06-20-PositioningCSSanchors_0.png)\n\n툴팁을 만드는 것은 사용자에게 더 많은 맥락을 제공하는 좋은 방법입니다. 그러나, 이는 복잡한 주제입니다. 따라서 Web 플랫폼 팀의 개발자들은 브라우저 내부 코드를 사용하여이 문제를 해결하기 위해 더 많은 API를 추가하려고 합니다.\n\nPopover API는 툴팁 주변의 많은 도전에 대한 해결책을 제공합니다. 그러나, 위치 지정은 여전히 해결되지 않은 상태입니다. 특히, 팝오버가 얼마나 많은 공간을 가지고 있는지 알 수 없을 때: 툴팁 트리거가 화면 아래쪽에 있을 경우, 팝오버를 아래에 표시하고 싶지 않습니다. 이 도전에 대한 가능한 해결책은 곧 Chrome에 시행될 것이며, 다른 브라우저도 따를 것입니다.\n\n업데이트: 사양이 변경되었습니다. 최근 예시는 다음에서 찾을 수 있습니다:\nhttps://codepen.io/una/pen/KKYXMNo\n\n<div class=\"content-ad\"></div>\n\n# 팝오버 API 간단 소개\n\n팝오버 API를 사용하려면 두 가지 요소가 필요합니다: **트리거**와 **팝오버**입니다.\n\n```js\n<button popovertarget=\"my-tooltip\">\n  <p>트리거</p>\n</button>\n\n<div id=\"my-tooltip\" popover>\n  <p>툴팁</p>\n</div>\n```\n\n편의를 위해 다음에 제공된 피들(fiddle)을 확인해보세요:\n\n<div class=\"content-ad\"></div>\n\n위에서 보듯이, id와 popovertarget 속성에 의해 생성된 두 항목 간에 링크가 있습니다.\n\n이제 뒷단에서 많은 일이 벌어지고 있습니다: 트리거를 탭할 수 있습니다. 툴팁이 열리면 Esc를 눌러 팝오버를 닫을 수 있습니다. 다시 말해, 팝오버 API는 상자 밖에서 키보드로 사용할 수 있는 솔루션을 제공합니다.\n\n# CSS 앵커 위치 지정\n\n앵커 위치 지정 속성을 통해 우리는 요소를 앵커 요소와 상대적으로 페이지 어디에든 배치할 수 있습니다. 요소의 레이아웃과 관계없이 (position absolute와 같이)요소를 배치할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n오늘 앵커 위치 지정을 시도하려면 Chrome에서 실험적인 웹 플랫폼 기능을 활성화해야 합니다(chrome://flags/#enable-experimental-web-platform-features) 또는 최신 개발자 채널을 사용하세요(Chrome 125부터 기본으로 활성화되며, 2024년 5월 8일에 안정 버전이 될 것입니다).\n\n앵커를 설정하려면 다른 id를 추가하고 앵커 속성을 사용하여 해당 id에 연결하면 됩니다(트리거일 필요는 없습니다.):\n\n```js\n<button popovertarget=\"my-tooltip\" id=\"tooltip-trigger\">\n  <p>트리거</p>\n</button>\n\n<div id=\"my-tooltip\" popover anchor=\"tooltip-trigger\">\n  <p>툴팁</p>\n</div>\n```\n\n그리고 앵커가 어떻게 동작해야 하는지 알려주기 위해 CSS를 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\n#my-tooltip {\n  bottom: calc(anchor(top));\n  position-try-options: flip-block;\n  justify-self: anchor-center;\n}\n```\n\n앵커는 요소의 맨 위에 있어야 하며, position-try-options는 남은 공간을 계산할 것이며, 맞지 않으면 요소의 반대쪽으로 뒤집힐 것입니다. 마지막 줄은 앵커가 앵커의 맨 위에 가운데 정렬되어 있다는 것을 의미합니다. 이것이 어떻게 보이는지 확인해보세요:\n\n<img src=\"/assets/img/2024-06-20-PositioningCSSanchors_1.png\" />\n\n그러나 아랫부분에도 충분한 공간이 없으면 상단 위치로 다시 이동하게 됩니다. 심지어 거기에도 충분한 공간이 없다면 (다른 곳으로 갈 곳이 없기 때문에):\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-20-PositioningCSSanchors_2.png\" />\n\n여기서 함께 놀 수 있는 피들(fiddle)이 있어요:\n\n또한 너무 흥분하기 전에 현재 브라우저 지원을 고려해주세요:\n\n<img src=\"/assets/img/2024-06-20-PositioningCSSanchors_3.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n여기까지 입니다!\n읽어 주셔서 정말 감사합니다.","ogImage":{"url":"/assets/img/2024-06-20-PositioningCSSanchors_0.png"},"coverImage":"/assets/img/2024-06-20-PositioningCSSanchors_0.png","tag":["Tech"],"readingTime":3},{"title":"모바일 폼 제작하기 고급 CSS를 활용하여","description":"","date":"2024-06-20 00:51","slug":"2024-06-20-CreatingaMobileFormwithAdvancedCSS","content":"\n\n요즘의 모바일 우선 세상에서는 웹 폼이 반응형이고 사용자 친화적인 것이 중요합니다. 고급 CSS 기술을 사용하면 어떤 기기에서든 멋지게 보이고 잘 작동하는 폼을 만들 수 있습니다. 이 글에서는 CSS를 사용하여 모바일 폼을 만드는 방법을 살펴보겠습니다. 시각적으로 매력적이고 사용하기 쉬운 폼을 만들어 보장할 겁니다.\n\n소개\n모바일 친화적인 폼을 디자인하는 것에는 여러 가지 고려 사항이 포함됩니다. 입력 필드 크기, 간격, 반응성 등이 있습니다. CSS Grid와 Flexbox를 사용하여 다양한 화면 크기에 매끄럽게 적응하는 레이아웃을 구현하는 데 집중할 것입니다. 이 글을 끝내면 사용자 경험과 접근성을 향상시키는 모바일 폼을 갖추게 될 것입니다.\n\n데모\n먼저 간단한 HTML 구조를 폼에 설정해 보겠습니다. 이름, 이메일, 메시지 입력 필드와 제출 버튼이 포함된 폼을 만들어 보겠습니다.\n\nHTML:\n\n<form class=\"contact-form\">\n    <label for=\"name\">이름:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n\n\n\n\n<div class=\"content-ad\"></div>\n\n`label for=”email”`Email:`/label`\n`input type=”email” id=”email” name=”email” required`\n\n`label for=”message”`Message:`/label`\n`textarea id=”message” name=”message” required``/textarea`\n\n`button type=”submit”`Submit`/button`\n`/form`\n\n다음으로, CSS 그리드를 사용하여 우리의 양식에 대한 반응형 레이아웃을 만들겠습니다. 이렇게 하면 화면이 작은 디스플레이에서도 양식 필드가 잘 조정됩니다.\n\n<div class=\"content-ad\"></div>\n\n```css\n.contact-form {\n  display: grid;\n  gap: 15px;\n  padding: 20px;\n  max-width: 400px;\n  margin: auto;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\n.contact-form label {\n  font-size: 14px;\n}\n\n.contact-form input,\n.contact-form textarea {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.contact-form button {\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n해결책\nCSS Grid를 사용하여 양식 필드와 레이블이 적절하게 정렬되고 다양한 화면 크기에서 구조를 유지합니다. 간격 속성을 사용하여 양식 요소 간의 공간을 만들어 가독성과 사용성을 향상시킵니다. 또한 최대 너비를 설정하면 큰 화면에서 양식이 너무 넓어지지 않고 깔끔하고 집중된 레이아웃을 유지할 수 있습니다.\n\n모바일 기기에서는 미디어 쿼리를 추가하여 양식의 모양을 더 조정할 수 있습니다. 이를 통해 최소 화면에서도 양식이 사용자 친화적으로 유지됩니다.\n\nCSS:\n\n@media (max-width: 600px) {\n  .contact-form {\n    padding: 10px;\n  }\n\n  .contact-form label {\n    font-size: 12px;\n  }\n}\n\n\n<div class=\"content-ad\"></div>\n\n\n.contact-form button {\n    padding: 8px;\n}\n\n\n**결론**  \n고급 CSS를 활용하여 모바일 친화적인 폼을 만드는 것은 CSS 그리드와 미디어 쿼리와 같은 기술을 활용하여 응답성과 사용성을 보장하는 것을 포함합니다. 이러한 단계를 따라가면, 장치에 관계없이 훌륭하게 보이고 사용자 경험이 훌륭한 폼을 디자인할 수 있습니다. 반응형 웹 디자인 및 고급 CSS 기술에 대한 추가 자료가 필요하다면, CSS 그리드 및 미디어 쿼리에 대한 MDN 웹 문서를 참고하세요.","ogImage":{"url":"/assets/img/2024-06-20-CreatingaMobileFormwithAdvancedCSS_0.png"},"coverImage":"/assets/img/2024-06-20-CreatingaMobileFormwithAdvancedCSS_0.png","tag":["Tech"],"readingTime":3},{"title":"CSS를 대체할 새로운 스타일 시스템 설계하기","description":"","date":"2024-06-20 00:49","slug":"2024-06-20-DesigninganewstylesystemtoreplaceCSS","content":"\n\n## 자바스크립트 UI — 개발블로그 #3\n\n![이미지](/assets/img/2024-06-20-DesigninganewstylesystemtoreplaceCSS_0.png)\n\n## 소개\n\n저번 주에 자바스크립트 UI에서 기본 뷰 몇 가지를 소개하고, 웹 사이트/웹 앱에서 HTML이 필요 없게끔 뷰 트리를 구현한 내 방법에 대해 이야기했어요.\n\n<div class=\"content-ad\"></div>\n\n이번 주에는 CSS가 희생양이 되었습니다.\n\n## JavaScript 내 CSS\n\n간단히 말해서 JavaScriptUI는 CSS-in-JavaScript 솔루션입니다. DOM API가 HTML의 기능을 JavaScript로 이동하는 데 사용될 수 있는 것과 유사하게 우리는 CSS도 마찬가지로 할 수 있습니다. 이에 대한 두 가지 이유가 있습니다.\n\n먼저, 변수, 연산자, 조건문, 반복문 및 함수와 같은 적절한 프로그래밍 개념을 사용하는 것은 스타일링과 레이아웃 구축에 훨씬 강력한 방법입니다. 손에 들고 있는 손가락 수만 있어도 우리가 원하는 거의 모든 것을 달성할 수 있습니다. 이러한 도구들은 CSS조차도 시작했기 때문에 널리 사용되는데, 그것은 어설픈 방식으로 도입되었습니다. 그러면 JavaScript가 처음부터 이 도구들을 가지고 있고 훨씬 더 나은 구현을 가지고 있을 때는 왜 CSS도 이 도구들을 도입하려고 하는지 생각해 보게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n두 번째로, CSS에는 이해하기 어려운 몇 가지 개념이 있어서 이를 이해하고 학습하며 생산적으로 활용하기가 매우 어려운 점이 있습니다. 이 추상화는 스타일링 및 레이아웃 작업 방식을 재설계할 수 있는 기회를 제공할 것입니다. 이에 대해 보통 제 사용하는 네 가지 범주는 다음과 같습니다:\n\n- 현재 상태를 유지해야 하는 충분히 좋은 개념\n- 좋지만 이름을 변경해야 하는 개념\n- 잘못 설계되어 있어서 재설계가 필요한 개념\n- 잘못된 개념이지만 재설계할 수 없는 경우\n\n그럼 시작해 봅시다.\n\n## 이 가독성이 떨어지는 방식\n\n<div class=\"content-ad\"></div>\n\n일단 시작하면 \"최상의\" 관행을 위반해서 Views를 직접 대상으로 삼을 거에요. CSS가 이를 피하려고 애를 쓰는 것을 굉장히 재밌게 생각하죠. 어떤 옵션이 있는지 알아보죠:\n\n- 인라인 스타일 사용:\n\n```js\n<p style=\"font-family: Helvetica; color: black; opacity: 0.5\">Hello World</p>\n```\n\n- 외부 스타일 사용:\n\n<div class=\"content-ad\"></div>\n\n\n```js\n#foo {\n    font-family: Helvetica;\n    color: black;\n    opacity: 0.5\n}\n```\n\n- JavaScript로 스타일 사용:\n\n```js\n<p id=\"foo\">Hello World</p>\n```\n\n<div class=\"content-ad\"></div>\n\n```javascript\nconst foo = document.getElementById(\"foo\");\nfoo.style.fontFamily = \"Helvetica\";\nfoo.style.color = \"black\";\nfoo.style.opacity = 0.5;\n```\n\n이게 참으로 간단한 것인데 이렇게 못생겼게 보일 수 있는 건 정말 놀랍죠. 프론트엔드 개발 배울 때 아무나 시도해보는 가장 기본적인 것인데도 CSS가 왜 학습 곡선이 가파른지 궁금해지죠.\n\n## 현재 브라우저 API의 주요 문제점\n\n자바스크립트에서 스타일을 설정하는 방법은 두 가지가 있습니다: 개별 속성을 설정할 수도 있고, 뷰에서 클래스를 추가/제거할 수도 있습니다. 동적으로 클래스를 만드는 건 그다지 깔끔하지 않아서 저는 첫 번째 옵션에 집중하고 싶었어요.\n\n\n<div class=\"content-ad\"></div>\n\n우리의 Views가 HTMLElements이기 때문에 이미 접근하여 스타일 속성을 설정할 수 있습니다. 이는 JavaScript의 기본적인 옵션인데, 몇 가지 문제가 있어서 별로 좋아하지 않습니다:\n\n- 스타일 속성은 View 자체의 속성이 아니라 스타일 객체의 속성이므로 보일러플레이트가 추가되고 사용하기 어려워집니다.\n- 여러 속성 이름과 값이 나쁘고 일관성이 없거나 의미가 없습니다.\n- 타입 변환 및 단위 처리가 JavaScript의 동적 특성에 비해 꽤 좋지 않습니다.\n\n그래서 단순히 Views에 스타일 속성을 추가하는 것만으로는 해결되지 않았습니다. 나머지 문제들도 해결할 수 있는 스타일 시스템이 필요했습니다.\n\n```js\n//이것도 그다지 좋지 않습니다.\nconst text = Text(\"style me\");\ntext.fontFamily = \"Helvetica\"; \ntext.color = \"black\";\ntext.opacity = 0.5;\n```\n\n<div class=\"content-ad\"></div>\n\n## Getter/setter\n\n또 다른 흔한 방법은 값을 가져오거나 설정하기 전에 값을 처리하는 getter/setter 메소드를 사용하는 것입니다. 이를 여러 가지 방법으로 달성할 수 있습니다:\n\n- 일반 속성과 접근자 설명자 사용\n- Proxy 객체 사용\n- getter/setter 메소드 쌍 사용\n\n모든 옵션에는 중요한 단점이 있습니다: 일반 속성을 사용하는 것은 여전히 장황하며, Proxy를 추가하는 것은 지나친 것 같고 (그리고 현재는 HTML 요소를 래핑하는 것을 절대 피하고 싶습니다), 모든 속성을 두 가지 메소드로 정의하고 사용하는 것은 비대합니다. 제가 원했던 것은 훨씬 더 나은 것이면서 더 간결하며 물론 새로운 뷰 계층과 호환되어야 했습니다.\n\n<div class=\"content-ad\"></div>\n\n## 아름다움이야말로 미인\n\n얼마의 실험이 있었지만, 결국 getter/setter 메서드 구문을 결합하기로 결정했습니다. 여기 JavaScriptUI를 사용한 동일한 예제입니다:\n\n```js\nText(\"Hello World\")\n    .fontFamily(\"Helvetica\")\n    .fontColor(\"black\")\n    .opacity(0.5);\n```\n\n이 방식에는 여러 가지 이점이 있습니다. 간결하고 균일하며 복잡한 작업을 내부에서 처리할 수 있습니다. 또한 메서드를 연쇄적으로 사용하여 선언적 뷰 트리와 호환됩니다.\n\n<div class=\"content-ad\"></div>\n\n각 속성은 getter/setter 메서드를 사용하여 정의됩니다. 이 메서드는 인수가 있으면 setter로 작동하고 인수가 없으면 getter로 작동합니다. 이는 JavaScript에서는 지원되지 않지만 메서드 내부에서 전달된 인수의 개수를 확인하는 간단한 조건문으로 가짜로 만들 수 있습니다.\n\n놀랍게도, setter는 View 자체를 반환할 수도 있어서 메소드 체이닝을 지원합니다.\n\n따라서 다음과 같이:\n\n```js\nconst text = Text(\"Hello World\");\ntext.setFontFamily(\"Helvetica\");\ntext.getFontFamily();\n```\n\n<div class=\"content-ad\"></div>\n\n우리는 이렇게 할 수 있어요:\n\n```js\nText(\"안녕하세요 세계\")\n    .fontFamily(\"Helvetica\")\n    .fontFamily(); // 현재 글꼴 가져오기\n```\n\n이러한 메서드들은 CSS와 비교하면 더 나은 이름, 더 좋은 값, 더 좋은 값 유형, 심지어는 더 나은 인수(더 나은 숫자 및/또는 더 좋은 순서의 인수)를 가질 수 있어요. 이것 또한 유효한 JavaScript이므로 브라우저에서 그냥 실행하기 전에 컴파일, 트랜스파일, 빌드 또는 수정할 필요가 전혀 없어요.\n\n<div class=\"content-ad\"></div>\n\n## 메탈을 밟으세요\n\n우리가 뷰 트리로 할 때처럼 스크립팅 언어로 이동하면 거의 끝없이 새로운 가능성이 열립니다. 여기에서 JavaScriptUI가 할 수 있는 몇 가지 아이디어를 간략히 소개해 드리겠습니다:\n\n- 값을 저장하기 위해 적절한 변수와 상수 사용\n\n```javascript\nconst color = \"darkgray\";\n\nStack(\n    Text(\"Hello World\")\n        .fontColor(color),\n\n    Text(\"Hola mundo\")\n        .fontColor(color)\n);\n```\n\n<div class=\"content-ad\"></div>\n\n- 값을 평가하는 연산자를 사용합니다\n\n```js\nlet darkMode = true;\n\nText(\"Hello World\")\n    .fontColor(darkMode ? \"white\" : \"black);\n```\n\n- 개체의 속성을 참조합니다\n\n```js\nconst catImage = Image(\"cat.jpeg\")\n    .width(100)\n    .height(300);\n\nconst dogImage = Image(\"dog.jpeg\")\n    .width(catImage.width())\n    .height(catImage.height());\n```\n\n<div class=\"content-ad\"></div>\n\n- 더 복잡한 로직을 정의하기 위해 콜백(callbacks)을 사용하세요\n\n```js\nImage(\"hero.jpeg\")\n    .width(() => {\n        if (device === \"mobile\") {\n            return 400;\n        }\n        \n        if (device === \"tablet\") {\n            return 600;\n        }\n        \n        if (device === \"desktop\") {\n            return 1200;\n        }\n    });\n```\n\n- 컴포넌트를 생성하고 스타일 관리를 중앙 집중화하기 위해 사용자 정의 클래스를 사용하세요\n\n```js\nfunction Button(label) {\n    return Text(label)\n        .width(\"content\")\n        .height(\"content\")\n        .padding(12, 40, 12, 40)\n        .cornerRadius(50)\n        .backgroundColor(\"lightblue\");\n}\n\nStack(\n    Button(\"Log in\"),\n    Button(\"Subscribe\")\n);\n```\n\n<div class=\"content-ad\"></div>\n\n- 반응형 프로그래밍을 위해 상태 값(즉, 시그널)를 사용합니다.\n\n```js\nImage(\"welcome.png\")\n    .width(viewport.width) // viewport.width가 변경될 때마다 재계산됩니다.\n    .height(viewport.height); // viewport.height가 변경될 때마다 재계산됩니다.\n```\n\n이것은 JavaScriptUI에서 이미 사용 가능한 아이디어 중 일부에 불과하며, 앞으로 더 많은 아이디어가 있고 더 실험 중인 것도 많습니다.\n\n## 그럼 이만큼입니다.\n\n<div class=\"content-ad\"></div>\n\n여러분께 보여드릴 기능이 아직 많지만, 지금은 여기까지 하겠습니다. 앞으로 몇 주 동안 JavaScriptUI가 레이아웃 작성을 어떻게 간소화하는지, 상호 작용을 어떻게 처리하는지, 다양한 상태/신호 구현을 어떻게 실험하는지, 그리고 전체적인 프론트엔드 개발을 개선하기 위해 여러 가지 HTML 및 CSS 개념을 어떻게 수정했는지를 보여드릴 예정입니다.\n\n그러니 기대해 주시고, JavaScriptUI를 좋아하신다면 박수를 치거나 댓글을 달거나 다른 사람들과 공유해 주시기 바랍니다.\n\n감사합니다. 즐거운 한 주 되세요.\n\n⬅️ JavaScriptUI — 개발블로그 #2, `rip`HTML`/rip`","ogImage":{"url":"/assets/img/2024-06-20-DesigninganewstylesystemtoreplaceCSS_0.png"},"coverImage":"/assets/img/2024-06-20-DesigninganewstylesystemtoreplaceCSS_0.png","tag":["Tech"],"readingTime":6},{"title":"MERN 스택으로 웹 개발, React Native로 앱 개발 튜토리얼 8  HTML에서 의미 있는 마크업","description":"","date":"2024-06-20 00:48","slug":"2024-06-20-WebMERNAppReactNativeDevelopmentTutorial8SemanticMarkupinHTML","content":"\n\n<img src=\"/assets/img/2024-06-20-WebMERNAppReactNativeDevelopmentTutorial8SemanticMarkupinHTML_0.png\" />\n\n만약 비디오를 시청하며 배우는 것을 선호하신다면: [여기를 클릭해주세요](https://youtu.be/5ElYZ9q7u0E)\n\nMERN 스택으로의 웹 개발 여정과 React Native를 사용한 앱 개발을 통해 여러 가지 필수적인 주제를 다뤘습니다. 여덟 번째 설치에서는 웹 개발의 기본적인 측면에 초점을 맞추어 Semantic Markup in HTML을 다룰 것입니다. 의미 있는 HTML을 이해하고 활용하는 것은 접근성이 좋고 SEO에 친화적이며 유지보수가 쉬운 웹 애플리케이션을 만드는 데 중요합니다.\n\n# 시멘틱 HTML이란 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n시맨틱 HTML은 HTML 태그를 사용하여 내용의 의미와 구조를 전달하는 것을 말합니다. `div`나 `span`과 같은 비의미론적 태그와는 달리, 시맨틱 태그는 그 안의 내용의 역할과 중요성에 대한 정보를 제공합니다. 예시로는 `header`, `article`, `footer`, `section`, `nav` 등이 있습니다.\n\n# 시맨틱 HTML을 사용하는 이유\n\n- 접근성: 시맨틱 HTML은 스크린 리더 및 보조 기술에 맥락을 제공하여 접근성을 개선합니다. 이를 통해 장애를 가진 사용자가 웹 페이지를 더 효율적으로 탐색하고 이해할 수 있습니다.\n- SEO 이점: 검색 엔진은 시맨틱 태그를 사용하여 웹 페이지의 내용과 구조를 이해합니다. 적절한 시맨틱 마크업은 웹 사이트의 검색 엔진 순위를 향상시킬 수 있습니다.\n- 유지보수성: 시맨틱 HTML은 코드를 더 가독성 있고 유지보수하기 쉽게 만듭니다. 다른 개발자들(그리고 미래의 본인)은 웹 페이지의 구조와 내용을 이해하고 수정하는 것이 더 쉬울 것입니다.\n\n# 주요 시맨틱 HTML 요소\n\n<div class=\"content-ad\"></div>\n\n가장 일반적으로 사용되는 의미 있는 HTML 요소 중 일부를 살펴보겠습니다:\n\n# `header`\n\n`header` 요소는 소개 콘텐츠나 탐색 링크 세트를 나타냅니다. 일반적으로 사이트의 로고, 탐색 메뉴 및 기타 소개 요소를 포함합니다.\n\n```js\n<header>\n  <h1>내 웹사이트</h1>\n  <nav>\n    <ul>\n      <li><a href=\"#home\">홈</a></li>\n      <li><a href=\"#about\">소개</a></li>\n      <li><a href=\"#contact\">연락처</a></li>\n    </ul>\n  </nav>\n</header>\n```\n\n<div class=\"content-ad\"></div>\n\n# `nav`\n\n`nav` 요소는 탐색 링크 블록을 정의하는 데 사용됩니다. 이는 사용자와 검색 엔진이 웹 사이트의 구조를 이해하는 데 도움이 됩니다.\n\n```js\n<nav>\n  <ul>\n    <li><a href=\"#home\">Home</a></li>\n    <li><a href=\"#services\">Services</a></li>\n    <li><a href=\"#contact\">Contact</a></li>\n  </ul>\n</nav>\n```\n\n# `main`\n\n<div class=\"content-ad\"></div>\n\n`main` 요소는 문서의 주요 콘텐츠를 나타냅니다. 문서당 하나의 `main` 요소만 있어야하며, `article`, `aside`, `footer`, `header`, 또는 `nav` 요소의 하위 요소로 있어서는 안됩니다.\n\n```js\n<main>\n  <article>\n    <h2>내 웹사이트에 오신 것을 환영합니다</h2>\n    <p>여기에 주요 내용이 들어갑니다.</p>\n  </article>\n</main>\n```\n\n# `section`\n\n`section` 요소는 문서 내의 섹션을 정의합니다. 일반적으로 제목과 함께 콘텐츠를 주제별로 그룹화하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n\n# `section`\n\n\"section\" 태그는 웹 페이지 내에서 콘텐츠의 섹션을 정의하는 데 사용됩니다. 주로 그룹화된 콘텐츠에 사용됩니다.\n\n```html\n<section>\n  <h2>Our Services</h2>\n  <p>We offer a wide range of services to meet your needs.</p>\n</section>\n```\n\n# `article`\n\n`article` 요소는 독립적으로 배포될 수 있는 자체 컨텐츠 조각을 나타냅니다. 블로그 게시물, 뉴스 기사 및 유사한 콘텐츠에 자주 사용됩니다.\n\n```html\n<article>\n  <h2>Understanding Semantic HTML</h2>\n  <p>Semantic HTML is a powerful tool for web developers...</p>\n</article>\n``` \n\n\n<div class=\"content-ad\"></div>\n\n# `aside`\n\n`aside` 요소는 주변 콘텐츠와 관련이 있는 콘텐츠를 나타냅니다. 사이드바, pull quotes 및 기타 보조 콘텐츠에 자주 사용됩니다.\n\n```js\n<aside>\n  <h2>관련 링크</h2>\n  <ul>\n    <li><a href=\"#link1\">링크 1</a></li>\n    <li><a href=\"#link2\">링크 2</a></li>\n  </ul>\n</aside>\n```\n\n# `footer`\n\n<div class=\"content-ad\"></div>\n\n`푸터` 요소는 문서나 섹션의 하단을 나타냅니다. 일반적으로 메타데이터, 관련 문서へ의 링크, 그리고 문서에 대한 기타 정보를 포함합니다.\n\n```js\n<footer>\n  <p>&copy; 2024 내 웹사이트. 판권 소유.</p>\n</footer>\n```\n\n- 접근성 있는 내비게이션: 내비게이션이 접근성이 있도록 하려면 `nav`와 필요할 때 적절한 ARIA (Accessible Rich Internet Applications) 역할을 사용하세요.\n\n```js\n<nav role=\"navigation\">\n  <ul>\n    <li><a href=\"#home\">홈</a></li>\n    <li><a href=\"#services\">서비스</a></li>\n    <li><a href=\"#contact\">연락처</a></li>\n  </ul>\n</nav>\n```\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n시멘틱 HTML은 현대 웹 개발의 기본 요소로, 접근성, SEO 및 유지보수 측면에서 다양한 이점을 제공합니다. MERN 스택 프로젝트와 React Native 앱에 시맨틱 요소를 통합하여 보다 견고하고 사용자 친화적인 애플리케이션을 만들 수 있습니다. 개발 여정을 계속하면서 HTML의 구조와 의미가 애플리케이션의 기능과 디자인과 동일한 중요성을 갖는다는 것을 기억해 주세요.\n\n다음 튜토리얼에서는 웹 및 모바일 앱 개발의 고급 주제에 대해 더 자세히 다룰 예정이니 기대해 주세요. 즐거운 코딩되세요!","ogImage":{"url":"/assets/img/2024-06-20-WebMERNAppReactNativeDevelopmentTutorial8SemanticMarkupinHTML_0.png"},"coverImage":"/assets/img/2024-06-20-WebMERNAppReactNativeDevelopmentTutorial8SemanticMarkupinHTML_0.png","tag":["Tech"],"readingTime":4},{"title":"Tailwind 클래스 중에서 이전에 알았더라면 좋았을 것 같은 것들","description":"","date":"2024-06-20 00:46","slug":"2024-06-20-TheseTailwindClassesIWishYouKnewSooner","content":"\n\n\n![Tailwind CSS](/assets/img/2024-06-20-TheseTailwindClassesIWishYouKnewSooner_0.png)\n\nTailwind CSS는 빠른 개발과 높은 사용자 정의가 필요한 프런트엔드 프로젝트에 이상적인 강력하고 유연한 CSS 프레임워크입니다. 유틸리티 클래스, 반응형 디자인 지원, 그리고 고도로 사용자 정의가 가능한 구성을 통해 개발자들은 개발 효율성을 향상시키고 코드 일관성을 유지할 수 있습니다.\n\n# 1. isolate\n\nisolate 클래스는 요소가 새로운 쌓임 맥락을 만들지 여부를 제어하는 CSS isolation 속성을 설정하는 데 사용됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n```js\n<div class=\"isolate\">\n  This element creates a new stacking context\n</div>\r\n```\n\n더 알아보기: https://tailwindcss.com/docs/isolation\n\n# 2. scroll-snap\n\nscroll-snap 클래스는 수평 또는 수직 스크롤이 있는 컨테이너에 적합한 스크롤 스냅 효과를 구현하는 데 사용됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\r\n<div class=\"scroll-snap-x snap-mandatory overflow-x-auto flex\">\n  <div class=\"snap-start\">아이템 1</div>\n  <div class=\"snap-start\">아이템 2</div>\n  <div class=\"snap-start\">아이템 3</div>\n</div>\r\n```\n\n더보기: https://tailwindcss.com/docs/scroll-snap-type\n\n# 3. pointer-events\n\npointer-events 클래스는 요소의 마우스 이벤트 응답 동작을 제어하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<div class=\"pointer-events-none\">\n    해당 요소는 포인터 이벤트를 무시합니다\n</div>\n<div class=\"pointer-events-auto\">\n    해당 요소는 포인터 이벤트에 응답합니다\n</div>\r\n```\n\n더보기: https://tailwindcss.com/docs/pointer-events\n\n# 4. truncate\n\nTailwind CSS에서 truncate는 텍스트 자르기에 사용되는 유틸리티 클래스입니다. 텍스트 내용이 컨테이너의 너비를 초과하는 경우, 생략 부분을 점 세 개(…)으로 표시하여 페이지에서 텍스트가 넘치지 않도록 합니다. 이 유틸리티 클래스는 카드 제목, 테이블 셀 등 고정 너비 텍스트 요소를 표시할 때 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n\n## This is a very long title that will be truncated with an ellipsis.\n\n![Image](/assets/img/2024-06-20-TheseTailwindClassesIWishYouKnewSooner_1.png)\n\nMore details can be found here: [Text Overflow in Tailwind CSS](https://tailwindcss.com/docs/text-overflow)\n\n# 5. Gradients: from, via, to\n\n\n<div class=\"content-ad\"></div>\n\n선형 그라디언트는 가장 일반적인 그라디언트 유형입니다. Tailwind CSS는 접두사 from-*, via-*, 및 to-*를 사용하여 그라디언트의 시작점, 중간점, 및 끝점 색상을 정의하는 클래스를 제공합니다.\n\n```js\n<div class=\"bg-gradient-to-r from-green-400 via-blue-500 to-purple-600 text-white p-10 rounded-lg shadow-lg\">\n  <h1 class=\"text-2xl font-bold\">선형 그라디언트</h1>\n  <p class=\"mt-2\">이것은 선형 그라디언트 배경이 있는 상자입니다.</p>\n</div>\n```\n\n이 예제에서:\n\n- bg-gradient-to-r: 그라디언트 방향을 왼쪽에서 오른쪽으로 정의합니다.\n- from-green-400: 그라디언트의 시작 색상을 정의합니다.\n- via-blue-500: 그라디언트의 중간 색상을 정의합니다.\n- to-purple-600: 그라디언트의 끝 색상을 정의합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-20-TheseTailwindClassesIWishYouKnewSooner_2.png)\n\n더보기: https://tailwindcss.com/docs/gradient-color-stops\n\n# 6. 애니메이션\n\nTailwind CSS는 간단한 CSS 애니메이션 효과를 빠르게 추가할 수 있도록 내장된 애니메이션 클래스 세트를 제공합니다. 이 클래스에는 회전, 흔들림, 맥박 등과 같은 일반적인 애니메이션이 포함되어 있어 사용자 지정 CSS를 작성하지 않고도 빠르게 애니메이션을 적용할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n다음은 일반적인 Tailwind CSS 애니메이션 클래스 몇 가지입니다:\n\n- animate-none: 애니메이션을 비활성화합니다.\n- animate-spin: 회전 애니메이션\n- animate-ping: 펄스 애니메이션\n- animate-pulse: 맥박 효과\n- animate-bounce: 튕기는 효과\n\n```html\n<div class=\"flex items-center justify-center space-x-4\">\n  <div class=\"animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-purple-500\"></div>\n  <p class=\"text-lg font-semibold\">로딩 중...</p>\n</div>\n```\n\n![로딩 중](https://miro.medium.com/v2/resize:fit:1400/1*EgQzEHlcZlmUFIg6W3lWtw.gif)\n\n\n<div class=\"content-ad\"></div>\n\n내장된 애니메이션 클래스 외에도 Tailwind CSS를 통해 구성 파일을 통해 애니메이션을 확장하고 사용자 정의할 수 있습니다. Tailwind CSS 구성 파일에 사용자 지정 애니메이션 효과를 추가할 수 있습니다.\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    extend: {\n      animation: {\n        'spin-slow': 'spin 3s linear infinite',\n        'ping-slow': 'ping 2s infinite',\n      },\n    },\n  },\n};\n```\n\n이 예시에서는 spin-slow와 ping-slow라는 두 가지 사용자 정의 애니메이션을 추가했으며, 다른 애니메이션 클래스처럼 HTML에 적용할 수 있습니다.\n\n자세히 알아보기: https://tailwindcss.com/docs/animation\n\n<div class=\"content-ad\"></div>\n\n# 7. 가로세로비\n\nTailwind CSS는 요소에 특정한 가로세로비를 부여하는 aspect-ratio 플러그인을 제공합니다. 반응형 디자인을 만들거나 이미지, 비디오, 또는 다른 콘텐츠가 올바른 비율로 표시되도록 하는 데 유용합니다.\n\naspect-ratio 플러그인을 사용하기 전에 설치하고 구성해야 합니다. Tailwind CSS가 이미 설치되어 있다면, 다음 단계를 따라 aspect-ratio 플러그인을 추가할 수 있습니다:\n\n```js\nnpm install @tailwindcss/aspect-ratio\n```\n\n<div class=\"content-ad\"></div>\n\ntailwind.config.js 파일에서 다음 플러그인을 추가해주세요:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    require('@tailwindcss/aspect-ratio'),\n  ],\n}\n```\n\n플러그인을 구성한 후에는 HTML 파일에서 aspect-ratio 클래스를 사용할 수 있습니다.\n\n```js\n<div class=\"aspect-w-16 aspect-h-9\">\n  <iframe\n    src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n    title=\"YouTube video\"\n    class=\"w-full h-full\"\n    allowfullscreen\n  >\n  </iframe>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n더 많은 정보: [https://tailwindcss.com/docs/aspect-ratio](https://tailwindcss.com/docs/aspect-ratio)\n\n## 8. ring\n\nring 유틸리티는 요소에 링 효과를 적용하는 데 사용됩니다. 이 효과는 요소 주변에 하나 이상의 반투명한 테두리를 그리며 해당 요소를 강조하거나 강조합니다. 박스 그림자와 유사하지만 Tailwind에만 고유 한 ring은 더 유연하고 사용하기 쉬운 옵션을 제공합니다. 예를 들어:\n\n```js\n<div class=\"ring-2 ring-blue-500\">이 요소에는 링이 있습니다.</div>\n```\n\n<div class=\"content-ad\"></div>\n\n위 코드는 너비가 2인 요소 주위에 파란색 링을 그립니다.\n\n링의 색상을 설정하려면 ring-'색상' 클래스를 사용하세요. 불투명도를 조절하려면 값이 0부터 100까지의 범위인 ring-opacity-'값'을 사용하세요. Tailwind는 링을 요소의 외부가 아닌 내부에 그리는 ring-inset 클래스도 제공합니다.\n\n```js\n<div class=\"m-4 p-4\">\n  <div class=\"ring-1 ring-black p-4 mb-4\">너비가 1인 링</div>\n  <div class=\"ring-2 ring-red-500 p-4 mb-4\">빨간색 링이 있는 너비가 2인 링</div>\n  <div class=\"ring-4 ring-green-500 ring-opacity-50 p-4 mb-4\">너비가 4이고, 녹색이며 50% 불투명도인 링</div>\n  <div class=\"ring-4 ring-blue-500 ring-inset p-4 mb-4\">너비가 4이고 파란색인 내부 링</div>\n</div>\n```\n\n이 예시는 Tailwind CSS의 ring 클래스를 사용하여 다양한 링 효과를 생성하는 방법을 보여줍니다. 이 유틸리티 클래스를 사용함으로써 프로젝트에 링 효과를 쉽게 추가하여 사용자 인터페이스(UI)의 시각적 효과와 상호작용 경험을 향상시킬 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-20-TheseTailwindClassesIWishYouKnewSooner_3.png)\n\n자세한 내용은 여기를 참조하세요: [링 너비](https://tailwindcss.com/docs/ring-width)\n\nTailwind CSS는 프론트엔드 개발자에게 강력한 도구이며, 유틸리티 클래스는 그 중 일부에 불과합니다. 이러한 도구들을 워크플로우에 통합하면 개발 프로세스를 간소화하고 동적이고 시각적으로 매력적인 웹 디자인을 만들 수 있습니다. 아직 이러한 클래스를 시도해보지 않았다면 한번 시도해보고 다음 프로젝트에 어떻게 도움이 될 수 있는지 확인해보세요.\n\n# 간단히 설명한 것 🚀\n\n\n<div class=\"content-ad\"></div>\n\nIn Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 작가를 칭찬하고 팔로우해주십시오 👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼 방문하기: CoFeed | Differ\n- PlainEnglish.io에서 더 많은 콘텐츠 확인하기","ogImage":{"url":"/assets/img/2024-06-20-TheseTailwindClassesIWishYouKnewSooner_0.png"},"coverImage":"/assets/img/2024-06-20-TheseTailwindClassesIWishYouKnewSooner_0.png","tag":["Tech"],"readingTime":7},{"title":"알고리즘 시각화 프로그램","description":"","date":"2024-06-20 00:45","slug":"2024-06-20-AlgorithmVisualiser","content":"\n\n## HTML, CSS, 및 JavaScript를 사용한 알고리즘 시각화 도구의 기능 구현\n\n<img src=\"/assets/img/2024-06-20-AlgorithmVisualiser_0.png\" />\n\n협력과 혁신이 성공을 이끌어가는 시대에, 저희 다섯 명의 팀은 알고리즘 시각화 도구를 만드는 흥미진한 여정에 들어갔습니다. 이 프로젝트는 우리의 팀워크와 헌신의 증거뿐만 아니라 HTML, CSS, 그리고 JavaScript를 포함한 웹 개발 기초를 탐구하는 것이었습니다.\n\n본문에서는 이 프로젝트에서 구현한 핵심 기능들을 안내해 드리겠습니다.\n\n<div class=\"content-ad\"></div>\n\n버블 정렬 비주얼라이저:\n\n주어진 값으로 막대를 그렸고 막대마다 값이 적혀 있습니다. 주어진 값들을 배열에 저장하고 버블 정렬 알고리즘을 사용하여 정렬했습니다. 알고리즘에서 값들이 교환될 때마다 해당되는 막대를 강조하고 높이 값을 서로 바꾸었습니다.\n\n```js\n/* 코드베이스에서 발췌한 코드 조각 */\n    for (let i = 0; i < array.length - 1; i++) {\n        for (let j = 0; j < array.length - i - 1; j++) {\n            for (let k = 0; k < bso_bars.length; k++) {\n                if (k !== j && k !== j + 1 && k < l) {\n                    bso_bars[k].style.backgroundColor = \"brown\";\n                }\n            }\n            if (array[j] > array[j + 1]) {\n                let temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n\n                let tempHeight = bso_bars[j].style.height;\n                bso_bars[j].style.height = bso_bars[j + 1].style.height;\n                bso_bars[j + 1].style.height = tempHeight;\n                bso_bars[j].innerHTML = array[j];\n                bso_bars[j + 1].innerHTML = array[j + 1];\n                bso_bars[j].style.backgroundColor = \"#feb737\";\n                bso_bars[j + 1].style.backgroundColor = \"#feb737\";\n\n                await sleep(speed);\n            }\n        }\n        l--;\n        bso_bars[l].style.backgroundColor = \"#2fb45d\";\n\n        await sleep(speed);\n    }\n```\n\n비슷한 방식으로 선택 정렬, 병합 정렬, 퀵 정렬의 비주얼라이저도 만들었습니다.\n\n<div class=\"content-ad\"></div>\n\n연결 리스트 시각화기:\n\n연결 리스트 시각화기를 만들기 위해 d3 라이브러리(https://d3js.org/)를 사용했어요.\n\n- HTML 컨테이너 요소를 선택하고 해당 컨테이너에 높이, 너비 및 배경색 속성을 가진 SVG 요소를 추가했어요.\n- LinkedList 클래스를 정의하여 노드를 삽입하고 삭제하는 메서드로 연결 리스트를 관리했어요. insert 메서드는 지정된 인덱스에 새 노드를 생성하고 추가하거나 인덱스가 제공되지 않으면 끝에 추가해요. delete 메서드는 목록에서 특정 인덱스의 노드를 제거해요.\n- Visualise 메서드는 SVG에서 기존 시각 요소를 지워요. 시각화에 필요한 총 너비를 계산하고 텍스트 및 선을 추가하여 머리부터 시작하는 연결 리스트를 시각적으로 나타내요. 목록 노드를 순환하면서 각 노드 데이터에 대한 원과 텍스트를 추가해요. 노드 간의 링크를 나타내기 위해 화살표 마커가 달린 선을 그려요. 목록의 끝을 나타내는 최종 \"null\" 텍스트를 추가해요.\n\n```js\n/* 코드베이스에서의 일부분 */\n\nwhile (current !== null) {\n            const nodeGroup = svg.append(\"g\")\n                .attr(\"class\", \"node\")\n                .attr(\"transform\", `translate(${xPos}, ${yPos})`);\n\n            nodeGroup.append(\"circle\")\n                .attr(\"r\", nodeRadius)\n                .attr(\"stroke\", \"black\")\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke-width\", 2); \n\n            nodeGroup.append(\"text\")\n                .attr(\"dy\", 5)\n                .attr(\"text-anchor\", \"middle\")\n                .text(current.data);\n\n            if (current.next !== null) {\n                svg.append(\"line\")\n                    .attr(\"class\", \"link\")\n                    .attr(\"x1\", xPos + nodeRadius)\n                    .attr(\"y1\", yPos)\n                    .attr(\"x2\", xPos + nodeRadius + nodeMargin)\n                    .attr(\"y2\", yPos)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"marker-end\", \"url(#arrow)\");\n            }\n\n            current = current.next;\n            xPos += nodeRadius * 2 + nodeMargin;\n  }\n```\n\n<div class=\"content-ad\"></div>\n\n에라토스테네스의 체\n\n- 101개 요소가 있는 배열을 만들어 첫 번째 요소를 true로 지정하고 나머지 요소들은 false로 설정합니다.\n- 1부터 100까지의 숫자를 반복하면서 각 숫자의 모든 배수를 소수가 아닌 것으로 표시합니다. 각 반복에서 현재 인덱스와 그 인덱스의 모든 배수를 강조합니다. 소수가 아닌 모든 인덱스를 추적하여 마지막에 모든 소수를 강조합니다.\n\n```js\n/* 코드 기반의 일부 */\n \nfor (let i = 1; i < 101; i++) {\n    if (i == 1) {\n        arr[i] = true;\n        var cur = document.getElementById(`idx${i}`);\n        cur.classList.add(\"current_cell\");\n        await sleep(ms);\n        cur.classList.remove(\"current_cell\");\n        cur.classList.add(\"not_prime\")\n        if (flag) {\n            return;\n        }\n        await sleep(ms);\n    } else {\n        if (!arr[i]) {\n            var cur = document.getElementById(`idx${i}`);\n            cur.classList.add(\"current_cell\");\n            await sleep(ms);\n            for (let j = 2; j * i < 101; j++) {\n                var multiples = document.getElementById(`idx${i * j}`);\n                multiples.classList.add(\"multiple\");\n            }\n            await sleep(ms);\n            for (let j = 2; j * i < 101; j++) {\n                var multiples = document.getElementById(`idx${i * j}`);\n                multiples.classList.remove(\"multiple\");\n                arr[i * j] = true;\n                if (flag) {\n                    return;\n                }\n                multiples.classList.add(\"not_prime\");\n            }\n            cur.classList.remove(\"current_cell\");\n        }\n    }\n}\n```\n\n참조:\n\n<div class=\"content-ad\"></div>\n\n의견이나 제안이 있으시면 댓글을 남겨주세요.","ogImage":{"url":"/assets/img/2024-06-20-AlgorithmVisualiser_0.png"},"coverImage":"/assets/img/2024-06-20-AlgorithmVisualiser_0.png","tag":["Tech"],"readingTime":5},{"title":"프론트엔드 주간 다이제스트 366 2024년 6월 3일 - 6월 9일","description":"","date":"2024-06-20 00:44","slug":"2024-06-20-FrontendWeeklyDigest36639Jun2024","content":"\n\n\n![Frontend Weekly Digest](/assets/img/2024-06-20-FrontendWeeklyDigest36639Jun2024_0.png)\n\n# 웹 개발\n\n- 콘솔에서 Speculation Rules API와 놀기\n- htmx: 복잡한 솔루션 시대에서의 간단함\n- 당신의 DOM은 얼마나 깊을까요?\n- 풀 스택 웹 푸시 API 가이드\n- 챗봇 이상: AI가 프론트엔드 개발을 바꿀 수 있는 방법\n- TanStack의 라우터를 기반으로 한 새로운 메타 프레임워크 소개\n- DevTools에서 성능 워크플로를 사용자 정의하는 3가지 새로운 기능\n- WCAG에 모바일 접근성 가이드라인이 없는 이유에 대한 고찰\n\n- 효과\n- 독립적인 웹 컴포넌트의 라이브 데모\n- 그리드 항목에 푸시 애니메이션\n\n\n<div class=\"content-ad\"></div>\n\n# CSS\n\n- CapUnit: CSS 캡 단위로 디자인 문제를 어떻게 해결했는지 살펴보기\n- 모션과 함께 사용하는 CSS만으로 만든 사용자 정의 범위 슬라이더\n- 사용자 정의 상단과 하단 CSS 컨테이너 마스크\n- 유용한 CSS 팁 및 기술\n- CSS 길이 단위\n- 텍스트 입력을 세밀하게 조정하기\n- 시작해봅시다! 기본 예제를 사용한 CSS 앵커 위치 지정\n\n# JavaScript\n\n- JavaScript this 키워드 예제와 함께 설명\n- Promise.withResolvers()를 사용하여 어디서든 JavaScript Promises 제어하기\n- TypeScript에서 타입 테스트\n- 기초부터 시작하는 Promises\n- 모든 것을 병합하기 - 객체 및 기타 유형 재귀적으로 병합하기. 간단하고 작은 통합.\n- TypeScript로 API 응답 타입 작성하는 방법\n\n<div class=\"content-ad\"></div>\n\n- React\n  - React Compound Component Pattern을 활용한 Rating Component 구축 방법\n  - React & NodeJS를 위한 최고의 무료 오픈 소스 SaaS 템플릿 \n  - React.js를 이용한 클래식 스네이크 게임 구축 방법\n\n- Vue\n  - Vue와 Go를 이용한 Fullstack 앱 생성 (그리고 Tailwindcss v4)\n  - Vue에서 렌더링 최적화\n  - Vue Router의 History Modes 이해하기\n  - Vue 3 앱을 Nuxt 3로 이주하는 방법\n  \n- Angular\n  - Angular 상태 관리를 위한 Signals vs. ngOnChanges 비교\n  - Angular 아키텍처: 파트 3 - 데이터 Mocking의 용이성\n  - CSS 변수를 이용한 Angular Material Theming","ogImage":{"url":"/assets/img/2024-06-20-FrontendWeeklyDigest36639Jun2024_0.png"},"coverImage":"/assets/img/2024-06-20-FrontendWeeklyDigest36639Jun2024_0.png","tag":["Tech"],"readingTime":2}],"page":"51","totalPageCount":156,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":2},"__N_SSG":true}