{"pageProps":{"posts":[{"title":"CSS 배경과 테두리 사용하기","description":"","date":"2024-06-20 03:10","slug":"2024-06-20-HowToUseCSSBackgroundsandBorders","content":"\n\n![이미지](/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_0.png)\n\nCSS 배경과 테두리의 슈퍼파워를 해제할 준비가 되셨나요? 이 강의는 화려한 그라데이션부터 매력적인 이미지, 부드러운 둥근 모서리까지 활용하는 창의적인 방법을 살펴봅니다. 지루한 웹 사이트는 잊고, 배경과 테두리가 디자인 마법의 열쇠입니다!\n\n# CSS로 창의적인 배경 만들기\n\nCSS 스타일시트의 복잡한 배경 속성에 압도당하고 있나요? 걱정 마세요, 우린 여기 있어요! 배경의 단축 속성이 많은 정보를 담을 수 있지만, 이 강의에서는 한 단계씩 세부적으로 설명하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n사각형.box를 예시로 들어 설명하면, 처음에는 복잡해 보일지 모르겠지만 개별 구성 요소인 그라데이션, 이미지, 색상 등을 분해하여 전체 가능성을 펼쳐보자구!\n\n<div class=\"content-ad\"></div>\n\n## CSS에서 배경 설정하기\n\nCSS의 `background-color` 속성을 사용하면 어떤 요소든 생동감 있는 배경으로 칠할 수 있습니다. 전통적인 \"빨간색\"과 같은 고전적인 이름부터 팬시한 헥스 코드(#FF0000)까지 모든 유효한 색상 형식을 허용합니다. 이 색상은 콘텐츠, 패딩, 심지어 요소의 테두리 뒷면 (다른 방식으로 지정하지 않으면)을 모두 채웁니다.\n\n실제 동작을 확인해 보세요! 다음 예시에서는 다양한 색상 값을 사용하여 상자, 제목, `span` 요소에 화려함을 더해 보았습니다. 상상할 수 있는 모든 색상으로 실험해 보세요!\n\n<img src=\"/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_1.png\" />\n\n<div class=\"content-ad\"></div>\n\n\n.box {\n  background-color: #567895;\n}\n\nh2 {\n  background-color: black;\n  color: white;\n}\nspan {\n  background-color: rgb(255 255 255 / 50%);\n}\n\n\n\n<div class=\"box\">\n  <h2>배경 색상</h2>\n  <p>배경 <span>색상</span>을 변경해보세요.</p>\n</div>\n\n\n## CSS 배경 이미지로 이미지 추가하기\n\nCSS의 background-image 속성을 사용하면 어떤 요소든 멋진 이미지를 표현할 수 있습니다. 단순히 이미지 파일의 경로를 제공하면 요소의 배경에 이미지가 나타납니다.\n\n\n<div class=\"content-ad\"></div>\n\n마법을 실행해 봅시다! 이 예제에서는 두 개의 상자가 있습니다:\n\n- 상자 1: 상자보다 큰 배경 이미지(\"balloons.jpg\")가 있습니다. 기본적으로 이미지의 일부분만 볼 수 있습니다.\n- 상자 2: 더 작은 이미지(\"star.png\")를 사용합니다. 여기서 이미지는 상자의 전체 배경을 채우기 위해 반복(타일 구성)됩니다.\n\n이 예제는 배경 이미지에 관한 두 가지 중요한 사항을 강조합니다:\n\n- 크기 조절: 큰 이미지는 자동으로 요소에 맞게 축소되지 않습니다.\n- 타일링: 작은 이미지는 전체 배경 영역을 채우기 위해 반복됩니다.\n\n<div class=\"content-ad\"></div>\n\n본 수업에서는 이러한 행동을 제어하고 배경 이미지로 더 멋진 효과를 만드는 방법을 나중에 살펴볼 예정입니다!\n\n![image](/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_2.png)\n\n```css\n.a {\n  background-image: url(balloons.jpg);\n}\n\n.b {\n  background-image: url(star.png);\n}\n```\n\n```html\n<div class=\"wrapper\">\n  <div class=\"box a\"></div>\n  <div class=\"box b\"></div>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n이미지로 색상이 빛날 수 있다면 어떨까요? 위의 예제에 background-color 속성을 추가해 보세요! 일반적으로 배경 이미지는 정의한 모든 색상 위에 배치됩니다. 이것을 마음껏 조절해 보세요. 예상치 못한 멋진 효과를 얻을 수도 있어요!\n\n## 배경 반복 제어하기\n\nbackground-repeat 속성은 이미지의 타일링 동작을 제어하는 데 사용됩니다. 사용 가능한 값은 다음과 같습니다:\n\n- no-repeat — 배경 반복 금지합니다.\n- repeat-x — 가로로 반복합니다.\n- repeat-y — 세로로 반복합니다.\n- repeat — 기본값으로, 양방향으로 반복합니다.\n- space — 가능한 한 많이 반복하되, 여분의 공간이 있으면 이미지 사이에 공간을 추가합니다.\n- round — space 와 비슷하지만, 여분 공간을 채우기 위해 이미지를 늘립니다.\n\n<div class=\"content-ad\"></div>\n\n아래 예시에서 이 값들을 시도해보세요. 값이 no-repeat으로 설정되어 있어서 별 하나만 보일 것입니다. 다른 값들인 repeat-x와 repeat-y를 시도해 보면 그 효과를 확인할 수 있습니다.\n\n<img src=\"/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_3.png\" />\n\n```js\n.box {\n  background-image: url(star.png);\n  background-repeat: no-repeat;\n}\n```\n\n```js\n<div class=\"box\"></div>\n```\n\n<div class=\"content-ad\"></div>\n\n## CSS에서 배경 이미지 크기 조절\n\n\"balloons.jpg\" 예제를 기억하시나요? 이미지가 너무 크고 상자 크기를 초과하여 잘리는 문제가 있었죠. 하지만 걱정하지 마세요, CSS가 완벽한 이미지 크기 조절 키를 가지고 있습니다!\n\nbackground-size 속성을 사용하면 배경 이미지가 요소 내에 어떻게 맞춰지는지를 제어할 수 있습니다. 다음을 사용할 수 있습니다:\n\n- 길이 또는 퍼센트: 정확한 크기를 지정하여 (예: \"100px\" 또는 \"50%\") 정밀한 제어가 가능합니다. (이는 이미지 왜곡을 일으킬 수 있으니 조심하세요!)\n\n\n\n\n<div class=\"content-ad\"></div>\n\n키워드:\n\n- cover: 이미지를 상자 안을 완전히 채우면서 가로세로 비율을 유지합니다. 이미지의 일부가 상자 외부에 숨겨질 수 있습니다.\n- contain: 이미지를 상자 안에 완전히 맞추면서 가로세로 비율을 유지합니다. 이로 인해 이미지 주변에 빈 공간이 남을 수 있습니다.\n\n아래 예제에서 실험해 봅시다!\n\n- 길이 조정: background-size의 픽셀 값을 변경하여 이미지에 어떤 영향을 주는지 확인해보세요.\n- 키워드 마니아: 픽셀 값을 제거하고 background-size: cover 또는 background-size: contain을 설정하여 자동으로 크기를 조절해보세요.\n- 작은 이미지 반복: 이미지가 상자보다 작을 경우, background-repeat를 조정하여 이미지를 반복하고 공간을 채울 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 기술들을 활용하면 이미지 크기와 요소 크기 사이에 완벽한 균형을 찾을 수 있어요!\n\n![image](/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_4.png)\n\n```css\n.box {\n  background-image: url(balloons.jpg);\n  background-repeat: no-repeat;\n  background-size: 100px 10em;\n}\n```\n\n```html\n<div class=\"box\"></div>\n```\n\n<div class=\"content-ad\"></div>\n\n## 배경 이미지를 배치하는 위치\n\n배경 위치 속성을 사용하면 상자 내에서 배경 이미지가 나타나는 정확한 위치를 정할 수 있습니다. 상자에 무대가 있다고 상상해보세요. (0,0)이 중앙 무대 조명인 것처럼요.\n\n이것이 이미지 배치를 위한 도구 상자입니다:\n\n- 키워드: 간단하고 직접적이에요! 이미지를 배치할 때 “top”, “bottom”, “left”, “right”와 같은 용어를 사용하세요. (배경 위치 문서에서 더 많은 옵션을 살펴보세요!)\n- 길이와 백분율: 정확한 제어가 필요하신가요? 픽셀 값 (예: “20px”)이나 백분율 (예: “10%”)을 지정하여 정확한 위치를 지정할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n\n.box {\n  background-image: url(star.png);\n  background-repeat: no-repeat;\n  background-position: top center;\n}\n\n\n\n.box {\n  background-image: url(star.png);\n  background-repeat: no-repeat;\n  background-position: 20px 10%;\n}\n\n\n\n.box {\n  background-image: url(star.png);\n  background-repeat: no-repeat;\n  background-position: 20px top;\n}\n\n\n\n.box {\n  background-image: url(star.png);\n  background-repeat: no-repeat;\n  background-position: top 20px right 10px;\n}\n\n\n<div class=\"content-ad\"></div>\n\n준비가 되셨나요? 조합해 보세요! 그림을 자유롭게 조절할 수 있어요. 단, 첫 번째 값이 수평 위치(좌우), 두 번째 값이 수직 위치(상하)를 제어합니다.\n\n모험을 즐길 준비가 되셨나요? 4개의 값 구문을 사용하여 더 많은 제어를 해보세요. 특정 상자 가장자리에서 그림을 미끄러뜨리거나 끌어내리는 상상해 보세요. 예를 들어, \"위 20px 오른쪽 10px\"는 그림을 위에서 20픽셀 아래로, 오른쪽 가장자리에서 10픽셀 멀리 위치시킵니다.\n\n이제 실습해 볼까요? 아래 예제의 값을 바꿔서 노는 것도 좋아요. 그 별을 진정한 이미지 감독처럼 이동해 보세요!\n\n![그림](/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_5.png)\n\n<div class=\"content-ad\"></div>\n\n```js\n.box {\n  background-image: url(star.png);\n  background-repeat: no-repeat;\n  background-position: 120px 1em;\n}\n```\n\n```js\n<div class=\"box\"></div>\n```\n\n## 그라디언트 배경의 힘을 발휘해보세요\n\n단조로운 색상에 지쳤나요? 그라디언트는 귀하의 웹사이트에 화려한 전환을 더할 수 있습니다! 그라디언트는 배경 이미지처럼 작동하며 익숙한 background-image 속성을 사용하여 설정됩니다. \n\n<div class=\"content-ad\"></div>\n\n그라데이션을 더 깊게 탐구해보세요! 'gradient' 데이터 유형에 대한 MDN 페이지에서 다양한 유형과 가능성에 대해 설명합니다. (MDN 페이지 링크를 여기에 삽입).\n\n코딩 없이 실험해 보고 싶나요? CSSGradient.io와 같은 멋진 CSS 그라데이션 생성기가 온라인에 많이 있습니다. 가볍게 놀며 멋진 그라데이션을 만들고 생성된 코드를 간단히 복사하여 붙여넣어보세요!\n\n실제로 확인해보세요! 아래 예시에서 두 개의 상자가 서로 다른 그라데이션을 보여줍니다:\n\n- 상자 1: 전체 상자를 우아하게 가로지르는 선형 그라데이션.\n- 상자 2: 정의된 크기를 가지는 원형 그라데이션으로 반복되는 패턴을 만듭니다.\n\n<div class=\"content-ad\"></div>\n\n자신만의 매혹적인 그라데이션을 만들 준비가 되셨나요? 가능성을 탐험해보세요!\n\n![그라데이션 이미지](/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_6.png)\n\n```js\n.a {\n  background-image: linear-gradient(105deg, rgb(0 249 255 / 100%) 39%, rgb(51 56 57 / 100%) 96%);\n}\n\n.b {\n  background-image: radial-gradient(circle, rgb(0 249 255 / 100%) 39%, rgb(51 56 57 / 100%) 96%);\n  background-size: 100px 50px;\n}\n```\n\n```js\n<div class=\"wrapper\">\n  <div class=\"box a\"></div>\n  <div class=\"box b\"></div>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n## 여러 배경 이미지 사용하기\n\n계층화된 배경 효과를 만들고 싶나요? CSS를 사용하면 한 번에 여러 배경 이미지를 포함할 수 있어요! 간단히 background-image 속성에서 각 이미지 URL을 쉼표로 구분하세요.\n\n이것을 한 덩어리로 생각해보세요:\n\n- 코드에서 나열하는 마지막 이미지는 스택의 아래쪽에 배치되어요 (기본 레이어처럼).\n- 각 이전 이미지는 위로 층을 이루며 아름다운 시각적 효과를 만들어냅니다.\n\n<div class=\"content-ad\"></div>\n\n보너스! 그라데이션도 함께 참여하여 일반 이미지와 혼합하여 더 많은 창의적인 가능성을 끌어올릴 수 있어요.\n\n레이어 제어하기:\n\n다른 background-* 속성들(예: repeat 및 position)도 쉼표로 구분된 여러 값들과 함께 작동할 수 있어요. 여기 주의할 점이 있어요:\n- 속성의 각 값은 background-image 목록에 나타난 순서에 맞춰 이미지와 일치해야 해요.\n- 이미지보다 적은 값이 있는 경우, 해당 값들은 이미지들을 순환하게 될 거에요.\n\n<div class=\"content-ad\"></div>\n\n예를 들어, 아래 코드에서는 네 개의 이미지가 있지만 background-position 값이 두 개뿐입니다. 처음 두 위치는 첫 번째 두 이미지에 적용되고 나머지 이미지에 대해서도 동일하게 반복됩니다.\n\n실험해 보세요! 아래 예제를 활용해 다음을 해보세요:\n\n- 이미지 목록에서 이미지 순서를 바꿔보면 쌓임 순서가 어떻게 변경되는지 확인해보세요.\n- 다른 속성을 수정하여 이미지의 위치, 크기 또는 이미지 반복 빈도를 조절해 보세요.\n\n약간의 연습으로 층으로 구성된 시각적으로 멋진 배경을 만들어내는 마스터가 될 수 있을 거에요!\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_7.png\" />\n\n```js\n.box {\n  background-image: url(star.png), url(big-star.png);\n}\n```\n\n```js\n<div class=\"wrapper\">\n  <div class=\"box\"></div>\n</div>\n```\n\n## 배경 첨부\n\n<div class=\"content-ad\"></div>\n\nCSS에서 배경을 다룰 때, 컨테이너 내의 콘텐츠가 스크롤될 때 배경이 어떻게 작동하는지 제어할 수 있어요. 이건 background-attachment 속성을 사용하여 달성되며, 주요 세 가지 값이 있어요:\n\n- scroll (기본값): 이 설정은 배경 이미지가 페이지 콘텐츠와 함께 스크롤되도록 만들어요. 그러나 요소 자체에 스크롤 가능한 콘텐츠가 있는 경우, 배경은 요소에 대해 고정되어 스크롤 콘텐츠와 함께 움직이지 않아요.\n- fixed: 이 값은 배경 이미지를 화면(브라우저 창의 보이는 영역)에 고정시켜요. 페이지나 요소의 콘텐츠를 얼마나 스크롤해도 배경 이미지는 화면에서 같은 위치에 유지돼요.\n- local: 이 설정은 배경 이미지를 적용된 요소에 고정시킵니다. 따라서 요소의 콘텐츠를 스크롤하면 배경 이미지가 함께 스크롤되어 요소 자체 내에서 스크롤 효과가 생겨요.\n\n배경-attachment 속성은 요소나 페이지 내에서 실제로 스크롤할 콘텐츠가 있는 경우에만 뚜렷한 효과가 있다는 것이 중요해요.\n\n여기서 직접 해보세요!\n\n<div class=\"content-ad\"></div>\n\n## 효율성을 위한 배경 단축키\n\nCSS는 한 번에 여러 배경 속성을 정의하는 단축키를 제공하여 코드 양을 줄이고 가독성을 향상시킬 수 있습니다. 이 단축키는 `background` 속성 자체이며, 단축키 역할을 합니다.\n\n여러 배경을 사용할 때는 `background` 속성 값 내에서 쉼표로 구분된 리스트로 각 배경의 모든 속성을 지정할 수 있습니다.\n\n값을 구성하는 방법은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n- 각 배경 정의에는 색상, 이미지, 위치, 반복 방법 등과 같은 해당 속성을 위한 값이 포함됩니다.\n- 순서가 중요합니다. 한 배경에 대한 모든 속성은 다음 배경 정의로 넘어가기 전에 함께 나열되어야 합니다.\n- 배경 색상 위치: 여러 개의 배경을 사용할 경우, 배경 색상 속성은 마지막 콤마 뒤에만 지정할 수 있으며, 다른 배경 정의와 구분되어야 합니다.\n- 배경 크기 및 위치: 배경 크기와 배경 위치를 함께 사용하는 경우, 슬래시 (/)로 구분하여 함께 배치해야 합니다.\n\n![How To Use CSS Backgrounds and Borders](/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_8.png)\n\n```css\n.box {\n  background:\n  linear-gradient(105deg, rgb(255 255 255 / 20%) 39%, rgb(51 56 57 / 100%) 96%) center center / 400px 200px no-repeat,\n  url(big-star.png) center no-repeat,\n  rebeccapurple;\n}\n```\n\n```html\n<div class=\"box\"></div>\n```\n\n<div class=\"content-ad\"></div>\n\n## 배경 접근성 향상하기\n\n- 색 대비가 중요합니다: 배경 이미지나 색상을 사용할 때 텍스트와 배경 사이에 충분한 대비가 있는지 확인하세요. 이렇게 함으로써 시각 장애를 가진 사용자를 포함한 모든 사람이 텍스트를 쉽게 읽을 수 있습니다. 충분한 대비 여부를 확인할 수 있는 온라인 도구가 있습니다.\n- 배경 이미지를 위한 대체 시스템: 텍스트가 배경 이미지 위에 있는 경우, 항상 배경 색상을 지정하세요. 이 색상은 이미지가 어떤 이유로든 로드되지 않는 경우에도 텍스트가 가독성있게 유지되도록 합니다.\n- 장식 용도의 배경 이미지: 화면 낭독기가 배경 이미지를 해석할 수 없으므로 배경 이미지는 장식 용도로만 사용하세요. 중요 정보는 배경 이미지 안에 숨기지 말고 HTML 콘텐츠에 직접 포함시키세요. 이렇게 하면 모든 사람이 정보에 접근할 수 있습니다.\n\n# 테두리를 창의적으로 활용하기\n\n이전 레슨에서 배운 박스 모델을 기억하시나요? 테두리는 그 모델 내에서 요소의 크기를 정의하는 데 중요한 역할을 합니다. 이제 테두리를 디자인 목적으로 창의적으로 활용하는 방법을 살펴봅시다.\n\n<div class=\"content-ad\"></div>\n\n- 효율을 위한 간편한 표기법: CSS에서는 보통 border shorthand 속성을 사용하여 테두리의 색상, 너비 및 스타일을 한 줄로 정의합니다. 이 속성은 요소의 네 면에 동일한 스타일을 적용합니다.\n- 개별 측면 지정: 상자의 특정 측면에 대한 테두리를 지정할 수도 있습니다. border-top, border-right, border-bottom, border-left와 같은 속성을 사용하여 각 측면을 독립적으로 스타일링할 수 있습니다.\n\n개별 테두리 속성: border shorthand는 세 개의 개별 속성으로 확장됩니다:\n\n- border-width: 테두리 선의 두께를 제어합니다.\n- border-style: 테두리의 시각적 모양을 정의합니다 (예: solid, dashed, dotted).\n- border-color: 테두리의 색상을 설정합니다.\n\n세심한 제어를 위한 Longhand 속성: 더 세밀한 제어를 위해 CSS는 테두리 각 측면에 대한 longhand 속성을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n- 너비에 대한 border-top-width, border-right-width, border-bottom-width 및 border-left-width가 있습니다.\n- 스타일에 대한 border-top-style, border-right-style, border-bottom-style 및 border-left-style이 있습니다.\n- 색상에 대한 border-top-color, border-right-color, border-bottom-color 및 border-left-color가 있습니다.\n\n논리적 속성(다음 레슨): 다음 레슨에서는 논리적 테두리 속성을 살펴보겠습니다. 이러한 속성은 문서의 작성 모드(예: 왼쪽에서 오른쪽 또는 오른쪽에서 왼쪽)에 적응합니다.\n\n스타일 실험: 테두리에는 다양한 스타일이 있습니다. border-width, border-style 및 border-color를 조정하여 요소에 독특한 시각적 효과를 만들어보세요.\n\n<img src=\"/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_9.png\" />\n\n<div class=\"content-ad\"></div>\n\n```css\n.box {\n  background-color: #567895;\n  border: 5px solid #0b385f;\n  border-bottom-style: dashed;\n  color: #fff;\n}\n\nh2 {\n  border-top: 2px dotted rebeccapurple;\n  border-bottom: 1em double rgb(24 163 78);\n}\n```\n\n```html\n<div class=\"box\">\n  <h2>Borders</h2>\n  <p>Try changing the borders.</p>\n</div>\n```\n\n## 꼭지각형으로 모양 만들기\n\nborder-radius 속성을 사용하면 상자의 모서리를 둥글게 형성할 수 있습니다. 곡률을 정의하는 shorthand와 longhand 옵션이 모두 제공됩니다.\n\n<div class=\"content-ad\"></div>\n\n- \"Uniform Radii에 대한 단축 표기법: 대부분의 경우, border-radius의 단축 형식을 사용할 것입니다. 하나 또는 두 값을 허용합니다.\"\n- \"단일 값: 단일 값은 상자의 네 꼭지 모두에 동일한 곡률을 적용합니다.\"\n- \"두 값: 두 값은 별도의 수평 및 수직 반지름을 정의하며, 타원형 코너를 만들 수 있습니다.\"\n- \"예제: 일괄 라운딩: 모든 코너에 10px 반경을 만드는 방법은 다음과 같습니다:\"\n\n```js\n.box {\n  border-radius: 10px;\n}\n```\n\n- \"개별 코너에 대한 Longhand 속성: 더 많은 제어가 필요한 경우, border-top-right-radius와 같은 Longhand 속성을 사용하여 각 코너를 개별적으로 스타일링할 수 있습니다. 이러한 속성은 shorthand와 유사하게 하나 또는 두 값을 취합니다.\"\n- \"예제: 타원형 코너: 이 예제에서는 상단 오른쪽 코너에 1em 가로 반지름과 10% 세로 반지름을 설정하여 타원형 효과를 만듭니다:\"\n\n```js\n.box {\n  border-top-right-radius: 1em 10%;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n- 논리적 속성 (다음 레슨): 테두리와 유사하게, 논리적 테두리 반경 속성은 문서의 작성 모드에 맞게 조정됩니다.\n- 실험하고 탐험해보세요: 원하는 코너 모양을 얻기 위해 다양한 반경 값으로 놀아보세요. 자세한 구문 옵션은 보더 반경 속성 문서(여기에 포함되지 않음)를 참조하세요. \"border-radius 생성기\"와 같은 온라인 도구도 있어서 구체적인 둥근 코너 스타일을 시각화하고 코드를 생성하는 데 도움이 될 수 있습니다.\n\n![이미지](/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_10.png)\n\n```js\n.box {\n  border: 10px solid rebeccapurple;\n  border-radius: 1em;\n  border-top-right-radius: 10% 30%;\n}\n```\n\n```js\n<div class=\"box\">\n  <h2>테두리</h2>\n  <p>테두리를 변경해보세요.</p>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n# 요약\n\n상자의 모서리를 부드럽게 만들고 싶나요? 그럼 border-radius 속성을 확인해보세요! 이를 통해 꼭지의 정도를 제어할 수 있어요.\n\n- 균일한 둥근 모서리 (가장 일반적): 네 개 모서리에 동일한 둥근 정도를 적용하기 위해 값(픽셀, ems 또는 백분율)을 제공하세요.\n- 타원형 모서리: 고급스러운 느낌을 원하시나요? 두 개의 값으로 타원 효과를 위한 별도의 수평 및 수직 반지름을 정의하세요.\n- 개별 모서리 제어 (옵션): 더 정밀한 조절이 필요하다면 CSS는 각 모서리를 독립적으로 스타일링할 수 있게 하는 border-top-left-radius와 같은 확장 속성을 제공합니다.\n\n```js\ntype SocialMedia = {\n  LinkedIn: string;\n  GitHub: string;\n  StackOverflow: string;\n  Litsy: string;\n  Email: string;\n  X: string;\n}\n\nfunction newSocialMedia(): SocialMedia {\n  return {\n    LinkedIn: \"https://www.linkedin.com/in/edwardcasanova/\",\n    GitHub: \"https://github.com/ed3899\",\n    StackOverflow: \"stackoverflow.com/users/11941146/edward-casanova\",\n    Litsy: \"https://www.litsy.com/web/stack/edca3899/read\",\n    Email: \"ed.wacc1995@gmail.com\",\n    X: \"https://twitter.com/edca3911\"\n  };\n}\nconst subscribe = (): string => {\n  return \"https://medium.com/@ed.wacc1995/subscribe\";\n};\nconst tip = (): string => {\n  return \"https://paypal.me/edca3899?country.x=MX&locale.x=es_XC\";\n};\n```","ogImage":{"url":"/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_0.png"},"coverImage":"/assets/img/2024-06-20-HowToUseCSSBackgroundsandBorders_0.png","tag":["Tech"],"readingTime":14},{"title":"Angular에서 컴포넌트간 데이터 전달하기","description":"","date":"2024-06-20 03:06","slug":"2024-06-20-PassingDataBetweenComponentsinAngular","content":"\n\n<img src=\"/assets/img/2024-06-20-PassingDataBetweenComponentsinAngular_0.png\" />\n\n작년에 Angular 개발자 포지션에 대한 면접을 많이 진행했었는데, 가장 자주 나온 질문 중 하나가 \"Angular에서 컴포넌트간 데이터를 전달하는 방법은 무엇인가요?\" 였어요. 이 프레임워크를 잘 알고 있는 사람들에겐 답이 상당히 직관적으로 보일 수 있지만, 처음에 생각한 것 이상으로 그 깊이가 있습니다. 이 질문은 면접관들이 선호하는데, 이는 지원자의 Angular 및 일반 웹 기술에 대한 지식을 측정할 수 있고 창의력을 발휘할 자유가 있기 때문이죠.\n\n본 기사에서는 그것을 수행할 수 있는 방법들을 비교적 포괄적으로 나열해 보려고 합니다. 비교적 일반적이지 않은 방법에 대해 심층적으로 다루기도 합니다. 컴포넌트 간 데이터를 전달하기 위한 다양한 합리적인 방법이 있다면, 덧글에 남겨주시면 기쁘게 기사에 추가하도록 하겠습니다.\n\n이 기사는 취업 면접을 준비하는 초보 및 중급 Angular 개발자들을 대상으로 합니다. 자세한 안내서가 아닌 모든 옵션을 보기 위한 개략적인 안내를 목적으로 합니다. 면접 준비를 위해 더 탐구할 만한 흥미로운 대화 주제들을 굵게 강조하여 포함하려고 노력했어요.\n\n<div class=\"content-ad\"></div>\n\n# @Input() 데코레이터\n\n@Input() 데코레이터는 Angular에서 컴포넌트 간 데이터를 전달하는 방법 중 가장 먼저 떠오르는 것입니다. 부모 컴포넌트로부터 데이터를 자식 컴포넌트로 전달하는 간단한 방법입니다.\n\n@Input()은 컴포넌트 트리에서 서로 직접적으로 관련된 경우에 특히 유용합니다. 서로 직접적으로 관련되지 않은 경우에는 여러 컴포넌트 사이를 통해 동일한 데이터를 전달해야 하는 \"prop drilling\"이라고 불리는 방법을 사용해야 할 수도 있습니다. 이 용어는 React에서 나온 것이며, props가 Angular의 @Input()과 유사한 역할을 합니다. Prop drilling은 실수가 발생하기 쉬우며, 애플리케이션이 커질수록 불편해지고 에러가 발생할 가능성이 높아집니다.\n\n@Input()의 또 다른 일반적인 사용 사례는 \"어리석은(stupid)\" 또는 \"표현(representational)\" 컴포넌트를 구축하는 것입니다. 이 경우, 부모 컴포넌트는 상태를 관리하고 @Input() 데코레이터를 통해 자식들로 데이터를 업데이트합니다.\n\n<div class=\"content-ad\"></div>\n\n## 예시:\n\nparent.component.ts\n\n```js\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-parent',\n  template: `\n    <h2>Parent Component</h2>\n    <app-child [childMessage]=\"parentMessage\"></app-child>\n  `,\n})\nexport class ParentComponent {\n  parentMessage = \"Message from Parent\";\n}\n```\n\nchild.component.ts\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-child',\n  template: `\n    <h4>Child Component</h4>\n    {{ childMessage }}\n  `,\n})\nexport class ChildComponent {\n  @Input() childMessage: string;\n}\n```\n\n# @Output() 데코레이터\n\n@Input()의 정반대로, @Output() 데코레이터는 자식 컴포넌트에서 상위 컴포넌트 또는 컴포넌트 트리 상단에 있는 다른 컴포넌트로 이벤트를 발생시키는 데 사용됩니다.\n\n@Output()을 사용하면, 자식 컴포넌트가 사용할 사용자 지정 이벤트를 정의하며, 이 이벤트를 가지고 있는 부모나 이벤트에 응답해야 하는 다른 컴포넌트가 해당 이벤트를 듣게 됩니다. 이 이벤트는 자식 컴포넌트가 부모에게 버튼 클릭, 폼 제출 또는 데이터 변경과 같은 사항이 발생했음을 알리기 위해 필요할 때 발생됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n좋은 연결고리가 될 것입니다. 또한, Event Driven Architecture에 대해 이야기할 수 있는 기회가 됩니다. 이는 본문의 범위를 벗어난 내용이지만, 더 자세히 알아볼 만한 주제입니다.\n\n## 예시:\n\nchild.component.ts\n\n```javascript\nimport { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-child',\n  template: `\n    <button (click)=\"sendMessage()\">Send Message</button>\n  `,\n})\nexport class ChildComponent {\n  @Output() messageEvent = new EventEmitter<string>();\n\n  sendMessage() {\n    this.messageEvent.emit('Message from Child');\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\nparent.component.ts\n\n```js\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-parent',\n  template: `\n    <h2>Parent Component</h2>\n    <app-child (messageEvent)=\"receiveMessage($event)\"></app-child>\n    <p>{ message }</p>\n  `,\n})\nexport class ParentComponent {\n  message: string;\n\n  receiveMessage($event: string) {\n    this.message = $event;\n  }\n}\n```\n\n이 예시에서는 자식 컴포넌트가 @Output() 데코레이터를 사용하여 messageEvent라는 사용자 정의 이벤트를 정의합니다. sendMessage() 메서드가 호출되면 messageEvent 이벤트가 'Message from Child'라는 문자열 값을 가지고 발생됩니다.\n\n부모 컴포넌트는 (messageEvent) 바인딩을 사용하여 messageEvent 이벤트를 청취하고 receiveMessage() 메서드에서 처리합니다. $event 매개변수는 자식 컴포넌트에서 발생된 데이터를 수신하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n# RxJS Subject을 사용한 서비스 활용\n\n컴포넌트들이 컴포넌트 트리에서 더 멀리 떨어져 있을 때, @Input() 및 @Output()을 사용하여 데이터를 전달하면 혼란스럽고 유지 관리하기 어려워질 수 있습니다. 이러한 경우에는 공유 서비스를 사용하여 데이터를 관리하고 공유할 중심적인 위치를 제공할 수 있습니다.\n\nRxJS 라이브러리는 서비스에서 데이터를 관리하고 컴포넌트가 데이터 변경에 구독할 수 있도록 Subject 클래스를 제공합니다.\n\n비유를 하자면, 소식을 공유하는 것과 비슷합니다. 이웃들과 소문을 공유할 때 한 명에게 정보를 전달하고 그들로부터 정보를 받는 것과 유사합니다. 이는 Angular에서 @Input() 및 @Output() 데코레이터를 사용하는 것과 비슷합니다. 그러나 반면에 기사를 작성하여 신문사에 보내면 개인적으로 알지 못하는 광범위한 청중에게 방송됩니다. 이는 Angular에서 서비스를 사용하는 것과 비슷합니다.\n\n<div class=\"content-ad\"></div>\n\n## 예시:\n\n데이터 서비스\n\n```js\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private data = new Subject<string>();\n  data$ = this.data.asObservable();\n\n  setData(data: string) {\n    this.data.next(data);\n  }\n}\n```\n\n송신자 컴포넌트\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { Component } from '@angular/core';\nimport { DataService } from '../data.service';\n\n@Component({\n  selector: 'app-sender',\n  template: `\n    <h3>보내는 컴포넌트</h3>\n    <button (click)=\"sendData()\">데이터 전송</button>\n  `,\n})\nexport class SenderComponent {\n  constructor(private dataService: DataService) {}\n\n  sendData() {\n    this.dataService.setData('보내는 컴포넌트에서 온 데이터');\n  }\n}\n```\n\nreceiver.component.ts\n\n```js\nimport { Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DataService } from '../data.service';\n\n@Component({\n  selector: 'app-receiver',\n  template: `\n    <h3>받는 컴포넌트</h3>\n    <p>{{ data }}</p>\n  `,\n})\nexport class ReceiverComponent implements OnDestroy {\n  data: string = '';\n  subscription: Subscription;\n\n  constructor(private dataService: DataService) {\n    this.subscription = this.dataService.data$.subscribe(data => {\n      this.data = data;\n    });\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n```\n\n이 예시에서 SenderComponent는 DataService를 주입받고 setData() 메서드를 호출하여 데이터 Subject를 통해 데이터를 발행합니다. 이 데이터는 data$ Observable에 구독한 다른 컴포넌트에서 수신할 수 있습니다. ReceiverComponent는 DataService의 data$ Observable에 구독하여 새로운 데이터가 발행될 때마다 업데이트를 수신합니다. 구독을 저장하는 subscription 속성은 ngOnDestroy() 메서드에서 구독을 해지하여 메모리 누수를 방지합니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 신호를 사용한 서비스\n\nAngular 16에서 소개된 신호는 반응성 처리를 위한 새로운 방법을 제공합니다. RxJS의 어려운 학습 곡선을 피하고자 하는 경우, 이러한 단점을 회피하는 데 도움이 됩니다.\n\n이 접근 방식의 전반적인 논리는 동일합니다: 여전히 서비스 내부에 상태를 중앙 집중식으로 추적하고 상태 업데이트를 허용하며 업데이트된 상태로 반환하는 것이 있지만, 이 경우에는 Subject가 아닌 신호입니다.\n\n이 글을 작성하는 시점에서 신호가 널리 사용되기까지는 시간이 걸릴 수 있습니다(기술 미리보기 단계에 있습니다) 그리고 일부 오래된 코드베이스에서는 단순히 리팩토링 비용이 너무 많이 발생하여 결코 신호를 사용하지 않을 수 있습니다. 하지만 이 프레임워크의 동향을 파악하고 있다는 것을 보여주기 때문에 면접 시 신호에 대해 언급하는 것이 좋습니다.\n\n<div class=\"content-ad\"></div>\n\n## 예시:\n\ndata.service.ts\n\n```js\nimport { Injectable, signal } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataSignalService {\n  private data = signal('');\n\n  setData(update: string) {\n    this.data.set(update);\n  }\n\n  getData(){\n    return this.data;\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { Component } from '@angular/core';\nimport { DataSignalService } from '../data.service';\n\n@Component({\n  selector: 'app-sender-signal',\n  template: `\n    <h3>보내는 컴포넌트</h3>\n    <button (click)=\"sendData()\">데이터 전송</button>\n  `,\n})\nexport class SenderSignalComponent {\n  constructor(private dataService: DataSignalService) {}\n\n  sendData() {\n    this.dataService.setData('보내는 컴포넌트에서 온 데이터');\n  }\n}\n```\n\nreceiver.component.ts\n\n```js\nimport { Component } from '@angular/core';\nimport { DataSignalService } from '../data.service';\n\n@Component({\n  selector: 'app-receiver-signal',\n  template: `\n    <h3>받는 컴포넌트</h3>\n    <p>{ data() }</p>\n  `,\n})\nexport class ReceiverSignalComponent {\n  data;\n\n  constructor(private dataService: DataSignalService) {\n    this.data = this.dataService.getData();\n  }\n}\n```\n\n# 상태 관리 도구\n\n<div class=\"content-ad\"></div>\n\n상태 관리 도구는 많은 상태를 관리해야 할 때 특히 응용 프로그램 상태를 중앙에서 관리하는 방법을 제공합니다. 이 도구들은 코드를 조직하는 것을 쉽게 만들어줄 뿐 아니라 중복되는 데이터 흐름을 피하고 테스트를 용이하게 합니다. 이러한 도구들은 비동기 데이터를 더 쉽게 처리하고, 필요한 코드의 중복을 줄이며 컴포넌트 간에 상태를 쉽게 공유할 수 있도록 도와줍니다.\n\nAngular를 위한 인기 있는 상태 관리 솔루션으로는 NgRx, Akita, 그리고 Elf가 있습니다. NgRx는 옵저버블을 사용하고 해당 처리를 위한 연산자 세트를 제공하는 Redux를 벤치마킹한 상태 관리 도구입니다. 더 가파른 학습 곡선과 상당한 양의 보일러플레이트 코드가 있지만 더 강력하다고 여겨집니다. Netanel Basal의 Akita는 일반적으로 NgRx보다 간단하다고 여겨지며 효과적인 메모리 관리 덕분에 성능이 우수합니다. Elf는 Netanel Basal이 저자인 더 신선하고 더 미니멀한 상태 관리 도구로, 다음 버전은 RxJS Subject를 사용할 것이라고 농담하기도 합니다.\n\n이러한 도구들은 장점을 갖고 있지만 응용 프로그램에 추가 복잡성을 도입합니다. 상태 관리 도구를 통합하기 전에 응용 프로그램이 실제로 상태 관리 도구가 필요한지를 평가하는 것이 중요합니다. 작고 비교적 간단한 상태 관리가 필요한 작은 응용 프로그램의 경우 Redux와 유사한 도구를 사용하는 것이 지나칠 수 있고 코드베이스에 불필요한 복잡성을 추가할 수 있습니다. 그러나 응용 프로그램이 성장하고 상태 관리 요구사항이 복잡해진다면 상태 관리 도구를 사용하여 코드를 더 잘 구성하고 유지보수하기 쉽게 할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 백엔드 API 사용하기\n\n요즘 프론트엔드 커뮤니티에서 큰 이슈 중 하나는 서버 상태와 클라이언트 상태를 구분하는 것입니다.\n\n옛날에는 클라이언트가 양식 데이터를 받아서 서버로 전송하고 사용자에게 응답을 알려주는 것에만 신경을 쓰곤 했습니다. 그러나 지난 10년간 클라이언트 측은 응용 프로그램의 상태와 비즈니스 로직을 처리하는 데 점점 더 많은 책임을 맡게 되었습니다. 이제 그릇의 진자가 다시 흔들리고 있으며, 점점 더 많은 개발자들이 상태의 어느 부분이 어디에 속하는지에 대해 더 신중해지려고 합니다.\n\n서버 상태는 서버에 저장된 데이터를 가리키며, 클라이언트가 필요할 때 서버에서 요청하는 데이터를 말합니다. 서버 상태가 자주 변경되는 애플리케이션에서는 클라이언트 측에 데이터를 캐싱하는 것이 현실적이지 않을 수 있으며, 일정 주기로 서버에서 데이터를 다시 가져와야 할 필요가 있을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n고객 상태는 다른 쪽으로, 즉 클라이언트 측에 저장되고 응용 프로그램에 의해 관리되는 데이터입니다. 이 데이터는 자주 변경될 수 있으며 일반적으로 사용자 세션에 특화됩니다. 고객 상태의 예시로는 사용자 선호도, 쇼핑 카트 데이터 및 사용자에게 고유한 데이터 등이 있습니다.\n\n일부 경우에는 서버에 데이터를 저장하고 필요에 따라 다른 컴포넌트에서 다시 가져오는 것이 더 효율적일 수 있습니다. 이렇게 함으로써 초기 요청에서로드해야 하는 데이터 양을 줄이고 애플리케이션의 전반적인 성능을 향상시킬 수 있습니다.\n\n다른 경우에는 데이터를 클라이언트 측에 저장하고 상태 관리 도구나 다른 클라이언트 측 저장 메커니즘을 사용하여 관리하는 것이 더 적합할 수 있습니다. 이렇게 함으로써 만들어야 하는 API 요청 수를 줄이고 응용 프로그램을 반응적으로 만들어 사용자 경험을 향상시킬 수 있습니다.\n\n일반적으로, 데이터를 저장하고 검색하기 위해 백엔드 API를 사용하는 시기 및 방법은 응용 프로그램의 특정 요구 사항 및 작업 중인 데이터 유형에 따라 다릅니다.\n\n<div class=\"content-ad\"></div>\n\n# QueryParams\n\n그런데 Angular로 다시 돌아와서, 네비게이션에 관한 몇 가지 주제에 대해 이야기해 봅시다.\n\n데이터를 전달하기 위해 QueryParams를 사용하면 사용자가 링크를 공유함으로써 페이지 상태를 재현하는 강력한 방법이 됩니다. 이는 Angular에 특화된 기능은 아니지만 해당 프레임워크에서 이를 처리하는 도구가 함께 제공됩니다.\n\n쿼리 매개변수는 URL의 끝에 추가되며 경로 다음에 물음표(?)로 시작합니다. 각 매개변수는 키-값 쌍으로 구성되어 있고, 키와 값은 등호(=)로 구분됩니다. 하나의 URL에 여러 쿼리 매개변수를 포함시킬 수 있습니다. 이들은 앰퍼샌드(&)로 구분됩니다. QueryParams에 익숙하지 않다면, 이 섹션의 끝에 있는 예제 URL을 확인하여 구문을 이해하는 데 도움이 될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n일반적으로 사용자들이 서로 링크를 공유하길 원할 수 있다는 것을 알고 있다면 QueryParams를 사용하는 것이 UX에 좋습니다. 동료와 링크를 공유하고 그 링크를 클릭했을 때 정확히 같은 페이지를 보는 느낌은 정말 좋습니다.\n\n단점은 링크를 너무 길고 마음에 들지 않게 만들 수 있으며, 특히 일부 긴 ID가 포함된 경우 사용자와 제품 소유자 양쪽에게 혼란스러울 수 있습니다. 개발자로서 \"링크가 지나치게 길어도 상관없지 않냐, 중요한 것은 그게 그 일을 잘하는 것이지\"라고 생각하기 쉽지만, 링크를 더 짧게 만들라는 관리자의 지시를 받을 수도 있으니 놀랍지 마세요 (진짜 이야기).\n\nQueryParams를 사용하면 문자열이나 숫자와 같은 간단한 데이터 유형뿐만 아니라 더 복잡한 객체도 저장할 수 있습니다. 사용자가 QueryParams를 포함하는 URL로 이동하면 Angular가 QueryParams을 자동으로 구문 분석하고 ActivatedRoute 서비스를 통해 해당 컴포넌트에서 사용할 수 있게 합니다.\n\n## 예시:\n\n<div class=\"content-ad\"></div>\n\n위치 정의\n\n```js\n{ path: 'product',\n  component: ProductDetailComponent,\n  queryParams: {\n    showReviews: 'true',\n    \n  }\n}\n```\n\nQueryParams에 액세스하기\n\n```js\n constructor(private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    console.log(this.route.snapshot.queryParamMap.get('showReviews'))\n  }\n```\n\n<div class=\"content-ad\"></div>\n\n결과 URL\n\n```js\nhttps://www.example.com/?showReviews=true&greeting=Hello%20component\n```\n\n(공백이 인코딩된 표현으로 대체되었음을 확인하세요.)\n\n# Route Params\n\n<div class=\"content-ad\"></div>\n\nQueryParams과 유사하게, Route Params는 URL을 통해 데이터를 구성하는 또 다른 방법을 제공합니다. 두 가지 방법의 차이는 QueryParams는 선택적 매개변수를 전달하는 데 사용되는 반면, Route Params는 필수입니다.\n\nRoute Params를 사용하면 URL이 더 표현적이 되고 탐색이 더 직관적해질 수 있습니다. 이는 디스크 디렉토리를 연상시키는 명확한 계층구조를 구축하기 때문입니다.\n\n## 예시:\n\n경로 정의\n\n<div class=\"content-ad\"></div>\n\n```js\n{ path: '제품/:id', component: ProductDetailComponent }\n```\n\n라우트 파라미터에 접근\n\n```js\nconstructor(private route: ActivatedRoute) {}\n\nngOnInit() {\n  this.route.params.subscribe(params => {\n      console.log(params.id);\n    });\n}\n```\n\n결과 URL\n\n<div class=\"content-ad\"></div>\n\nhttps://www.example.com/product/1234\n\n# 내비게이션 시 데이터 전달\n\nRouter.navigate()는 state라는 옵션 매개변수를 사용하여 데이터를 전달할 수 있습니다. 전달한 데이터는 내비게이션한 경로에서 사용할 수 있습니다. 이 기능은 쿼리 매개변수로 데이터를 전달할 수 없는 경우에 유용합니다.\n\n다만, 이 데이터는 영속적이지 않으며 내비게이션이 이루어진 후에만 사용 가능하며, 페이지 새로고침을 하거나 다른 방법으로 페이지로 이동하는 경우에는 유실될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 예시:\n\n상태 전달\n\n```js\nthis.router.navigate(['/destination-route'], { state: { exampleData: 'Hello component.' } });\n```\n\n상태 수신\n\n<div class=\"content-ad\"></div>\n\n```js\nlet state = this.router.getCurrentNavigation().extras.state;\n\nif (state) {\n    console.log(state.exampleData);\n}\n```\n\n# 로컬 스토리지와 세션 스토리지\n\n로컬 스토리지와 세션 스토리지는 내장된 브라우저 API로, 브라우저에 키-값 쌍을 저장할 수 있게 해줍니다. 두 가지의 차이점은 로컬 스토리지가 브라우저에 데이터를 영구적으로 저장하고, 브라우저를 닫았다가 다시 열어도 유지된다는 것이며, 세션 스토리지는 세션만큼만 데이터를 보관하며 사용자가 탭이나 창을 닫을 때 데이터가 손실된다는 것입니다.\n\nAngular 애플리케이션에서 상태를 저장하는 데 로컬 스토리지나 세션 스토리지를 사용하는 것은 페이지를 다시로드할 때나 사용자가 나중에 애플리케이션으로 돌아올 때 데이터를 계속 유지하고 싶을 때 유용합니다. 그러나 로컬 스토리지나 세션 스토리지에 너무 많은 데이터를 저장하면 애플리케이션의 성능이 저하되고 극단적인 경우 애플리케이션이 다운될 수 있음을 주의해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n다른 고려 사항은 보안입니다. 로컬 저장소와 세션 저장소는 안전하지 않으며, 그 안에 저장된 모든 데이터는 동일 출처에서 실행 중인 모든 스크립트에 의해 액세스할 수 있습니다. 따라서 민감한 데이터를 로컬 저장소나 세션 저장소에 저장하지 않는 것이 중요합니다.\n\n# 쿠키\n\n유명한 쿠키는 웹사이트에서 보내어 사용자 컴퓨터에 저장되는 작은 데이터 조각입니다. 일반적으로 사용자의 기본 정보, 로그인 자격 증명 및 브라우징 기록을 저장하는 데 사용됩니다.\n\nAngular에서 구성 요소 간에 데이터를 전달하는 맥락에서, 쿠키를 사용하여 서로 다른 세션이나 페이지 간에 지속되어야 하는 데이터를 저장할 수 있습니다. 예를 들어, 사용자 기본 설정이나 설정을 쿠키에 저장하고 애플리케이션의 다른 부분에서 이를 검색할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n쿠키에는 몇 가지 제한이 있습니다. 크기가 제한되어 있고, 브라우저에는 일반적으로 웹 사이트에서 저장할 수 있는 쿠키의 수에 제한이 있습니다. 또한 쿠키는 웹 사이트로의 모든 요청과 함께 보내지며, 성능에 영향을 줄 수 있으며 네트워크를 통해 전송해야 하는 데이터 양을 증가시킬 수 있습니다.\n\n특정 국가의 웹 사이트에서 쿠키를 사용하는 경우 법적 책임도 고려해야 합니다. 예를 들어, EU에서는 쿠키 사용 전에 사용자의 동의를 요구해야 하므로 대부분의 웹 사이트에서 방해가 되는 팝업이 표시됩니다.\n\n# 결론\n\n한 컴포넌트에서 다른 컴포넌트로 데이터를 전달하는 것은 종종 응용 프로그램 상태를 관리하는 것과 함께 이루어집니다. 이는 많은 설계 결정이 필요한 복잡한 주제이므로, 본 문서가 여러분에게 옵션에 대한 간략한 개요를 제공해 드렸기를 바랍니다.\n\n<div class=\"content-ad\"></div>\n\n처음에 언급했듯이, Angular에서 컴포넌트 간 데이터를 전달하는 더 많은 방법을 알고 계신다면 댓글을 남기거나 저에게 연락해주시면 함께 이 목록을 더 다채롭게 만들 수 있을 것입니다.","ogImage":{"url":"/assets/img/2024-06-20-PassingDataBetweenComponentsinAngular_0.png"},"coverImage":"/assets/img/2024-06-20-PassingDataBetweenComponentsinAngular_0.png","tag":["Tech"],"readingTime":14},{"title":"Angular v18에서 RedirectCommand를 사용하여 Redirect Guards 및 Resolvers 다루기","description":"","date":"2024-06-20 03:05","slug":"2024-06-20-RedirectingGuardsandResolversinAngularv18withRedirectCommand","content":"\n\n웹 개발의 현대 시대에서는 동적이고 인터랙티브한 애플리케이션을 만드는 것이 일반적입니다. 특정 사용자에게 독점적이거나 특정 조건에서 사용 가능한 기능을 구현하는 것은 매우 복잡한 도전일 수 있습니다.\n\n그래서 Angular는 Routes, rules, 그리고 components에 기반한 라우팅 시스템을 제공하여 쉽게 애플리케이션을 디자인할 수 있게 합니다.\n\n이 글에서는 Angular v18에서 소개된 새로운 기능을 사용하여 사용자를 다른 곳으로 리디렉션하는 Routes를 보호하는 방법에 대해 논의할 것입니다.\n\n그러나 진행하기 전에 Angular 라우터에 대해 간단히 리뷰해보겠습니다...\n\n<div class=\"content-ad\"></div>\n\n# Angular 라우터 가드 및 리졸버\n\nAngular 라우터 라이브러리를 사용하면 Angular 애플리케이션 내에서 네비게이션을 관리할 수 있으며 Routes 목록을 정의할 수 있습니다.\n\n각 Route는 접근 경로, 로드할 Angular 컴포넌트, 하위 Routes 등과 같은 일련의 정보로 정의됩니다.\n\n```js\nimport { Route } from '@angular/router';\nimport { MyFeatureComponent, MyFeatureGuard } from './my-feature';\n\nconst routes: Route[] = [\n  {\n    path: 'my-feature',\n    component: MyFeatureComponent,\n    canActivate: [MyFeatureGuard],\n    data: {\n      id: \"my-feature-id\"\n    }\n  }\n];\n```\n\n<div class=\"content-ad\"></div>\n\n하나 이상의 루트를 보호하여 특정 조건에 따라 접근 또는 빠져나갈 수 있습니다. 이는 가드라고 불리는 함수를 사용합니다.\n\n```js\nimport { Route } from '@angular/router';\nimport { MyService } from './my-feature';\n\nconst myRoute: Route = [\n  path: 'my-feature',\n  canMatch: [() => inject(MyService).canMatch()],\n  canActivate: [() => inject(MyService).canActivate()],\n  canActivateChild: [() => inject(MyService).canActivateChild()],\n  canDeactivate: [() => inject(MyService).canDeactivate()],\n];\n```\n\nAngular 가드에는 다음과 같이 네 가지 유형이 있습니다. 각각의 역할은 다릅니다:\n\n- canMatch: 루트가 로드될 수 있는지 확인하는 데 사용됩니다. 하나의 경로에 대해 여러 루트를 정의하고 특정 조건에 따라 하나만 선택하려면 이 가드를 사용할 수 있습니다.\n- canActivate: 특정 루트를 활성화할 수 있는지 여부를 결정하는 데 사용됩니다. 예를 들어, 특정 사용자만 접근할 수 있는 페이지에 대한 액세스를 제어하는 데 사용할 수 있습니다.\n- canActivateChild: canActivate와 유사하지만, 주 루트의 자식 루트에 대한 액세스도 제어합니다. 다른 자식 루트에서 시작되었더라도 모든 자식 루트로의 네비게이션에 대해 실행됩니다.\n- canDeactivate: 사용자가 특정 루트에서 빠져나갈 수 있는지를 확인하는 데 사용됩니다. 예를 들어 페이지를 떠날 때 확인을 요청하는 데 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n더불어 Route에 데이터를 준비하기 위해 Resolver 함수를 사용할 수 있습니다:\n\n```js\nimport { Route } from '@angular/router';\nimport { MyService } from './my-feature';\n\nconst myRoute: Route = [\n  path: 'my-feature',\n  resolve: {\n    user: () => inject(MyService).getUserInfo(),\n    config: () => inject(MyService).getUserConfig()\n  }\n];\n```\n\nResolver를 사용하는 것은 Route에 액세스하기 전에 데이터의 존재 여부를 보장하고 페이지에서 누락된 데이터를 처리하지 않도록 하는 훌륭한 접근 방식입니다.\n\n<img src=\"/assets/img/2024-06-20-RedirectingGuardsandResolversinAngularv18withRedirectCommand_0.png\" />\n\n<div class=\"content-ad\"></div>\n\n기초 사항을 다루었으니 이제 라우트를 보호하기 위해 사용자를 다른 곳으로 리디렉션하는 방법을 살펴보겠습니다.\n\n# 가드(Guards) 및 리졸버(Resolvers) 사용하여 네비게이션을 리디렉트하기\n\nAngular 가드(Guards)를 사용하면 하나 이상의 라우트 접근 또는 종료를 막아 네비게이션을 차단할 수 있습니다.\n\n그러나 더 부드러운 사용자 경험을 보장하기 위해서는 종종 사용자를 다른 라우트로 리디렉트하는 것이 선호됩니다.\n\n<div class=\"content-ad\"></div>\n\n가드 덕분에 매우 쉽게 이것을 달성할 수 있습니다. 현재 내비게이션을 차단하기 전에 새로운 내비게이션을 시작할 수 있습니다. \n\n```js\nimport { inject } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { MyPage } from './pages/my-page';\n\nconst route: Route = {\n  path: 'my-page',\n  component: MyPage,\n  canActivate: [\n    () => {\n      const router = inject(Router);\n\n      router.navigate(['./my-other-page']);\n      return false;\n    },\n  ],\n};\n```\n\nResolver를 사용하여 비슷한 결과를 얻을 수도 있습니다. Resolver를 이용하여 내부에서 새로운 내비게이션을 시작할 수 있습니다.\n\n```js\nimport { Route, Router } from '@angular/router';\nimport { MyService } from './my-feature';\n\nconst myRoute: Route = [\n  path: 'my-feature',\n  resolve: {\n    user: () => {\n      const router = inject(Router);\n\n      router.navigate(['./my-other-page']);\n      return null;\n    }\n  }\n];\n```\n\n<div class=\"content-ad\"></div>\n\n## UrlTree를 사용한 Redirect\n\n또 다른 방법으로, Guards와 Resolvers를 사용하여 새로운 Route를 나타내는 UrlTree를 반환함으로써 네비게이션을 리다이렉트할 수 있습니다:\n\n```js\nimport { inject } from '@angular/core';\nimport { Route, Router, UrlTree } from '@angular/router';\nimport { MyPage } from './pages/my-page';\n\nconst route: Route = {\n  path: 'my-page',\n  component: MyPage,\n  canActivate: [\n    () => {\n      const router: Router = inject(Router);\n\n      const urlTree: UrlTree = router.parseUrl('./my-other-page');\n      return urlTree;\n    },\n  ],\n};\n```\n\n그러나 이 기술은 이전 기술이 허용하는 NavigationExtras를 사용하여 네비게이션을 리다이렉트하는 것을 허용하지는 않습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\ncanActivate: [\n  () => {\n    const router = inject(Router);\n\n    router.navigate(['./my-other-page'], { skipLocationChange: true });\n    return false;\n  }\n]\n```\n\n## Redirect with RedirectCommand\n\n해결책으로 Angular v18에서는 NavigationExtras를 처리할 수 있는 새로운 RedirectCommand 클래스를 소개했습니다. 이를 통해 Guards 및 Resolvers에서 네비게이션을 리다이렉트할 수 있습니다:\n\n```js\nimport { inject } from '@angular/core';\nimport { RedirectCommand, Route, Router, UrlTree } from '@angular/router';\nimport { MyPage } from './pages/my-page';\n\nconst route: Route = {\n  path: 'my-page',\n  component: MyPage,\n  canActivate: [\n    () => {\n      const router: Router = inject(Router);\n      const urlTree: UrlTree = router.parseUrl('./my-other-page');\n\n      return new RedirectCommand(urlTree, { skipLocationChange: true });\n    },\n  ],\n};\n```\n\n<div class=\"content-ad\"></div>\n\n이 새로운 RedirectCommand 클래스의 도입은 가드 및 리졸버의 유지 보수성을 크게 향상시킵니다.\n\n![RedirectingGuardsandResolversinAngularv18withRedirectCommand_1](/assets/img/2024-06-20-RedirectingGuardsandResolversinAngularv18withRedirectCommand_1.png)\n\n특히 이러한 사용 사례에 특별히 설계된 이 클래스는 앞으로 필요한 새로운 매개변수에 쉽게 대응할 수 있습니다.\n\n# 지금까지 읽어 주셔서 감사합니다 🙏\n\n<div class=\"content-ad\"></div>\n\n피드백을 주실 수 있다면 댓글을 남겨주세요. 👏\n\n그리고 정말 좋았다면 꼭 여러분의 커뮤니티, 기술 관련 그룹, 원하시는 분들과 공유해주세요. 그리고 LinkedIn 팔로우도 잊지마세요. 👋😁","ogImage":{"url":"/assets/img/2024-06-20-RedirectingGuardsandResolversinAngularv18withRedirectCommand_0.png"},"coverImage":"/assets/img/2024-06-20-RedirectingGuardsandResolversinAngularv18withRedirectCommand_0.png","tag":["Tech"],"readingTime":6},{"title":"앵귤러 애플리케이션을 로드할 때 안전한 HTTPS 연결을 강제하는 방법 혹은 애플리케이션에서 리소스를 로드할 때 HTTPS 연결을 적용하는 방법","description":"","date":"2024-06-20 03:03","slug":"2024-06-20-AngularWaystoenforceasecurehttpsconnectionwhenloadingapplicationOrresourcesinaapplication","content":"\n\n응용 프로그램을로드하는 경우뿐만 아니라 응용 프로그램 서버에서 리소스를 요청할 때도 안전한 https 연결을 강제로 설정해야 할 수 있습니다. 이 스토리에서는 이러한 목표를 모두 달성하는 방법을 확인해보겠습니다.\n\nI. 응용 프로그램을로드 할 때 https로 리디렉션\n\nAngular 앱이 443 포트의 innocent.csrfexample.com에서 실행 중이라고 가정해 보겠습니다. OpenSSL을 사용하여 암호없이 SSL 인증서를 이미 생성했습니다.\n\n브라우저에서 https://innocent.csrfexample.com을 입력하면 아래와 같이 응용 프로그램이 로드됩니다.\n\n<div class=\"content-ad\"></div>\n\n만약 http://innocent.csrfexample.com을 입력하면 HTTP에서 HTTPS로 리다이렉션을 달성하기 위해 브라우저에게 해당 사이트를 HTTP로 로드하지 말고 모두 HTTPS로 요청하도록 지시하는 HTTP Strict Transport Security(HSTS) 헤더를 사용할 수 있습니다.\n\n더 나아가기 전에 브라우저 리다이렉션에 대해 몇 가지 포인트를 이해해 봅시다.\n\n- 서버는 요청에 특별한 리다이렉트 응답을 보내어 리다이렉션을 트리거합니다.\n- 리다이렉트 응답에는 3으로 시작하는 상태 코드가 있으며, 리다이렉트할 URL을 포함하는 Location 헤더가 있습니다.\n- 브라우저가 리다이렉트를 받으면 즉시 Location 헤더에 제공된 새 URL을 로드합니다.\n- 리다이렉션에는 영구적, 일시적 및 특별한 유형이 있습니다.\n\nHTTP Strict Transport Security 헤더는 어떻게 작동하나요?\n\n<div class=\"content-ad\"></div>\n\n아래는 이 헤더를 사용하는 예시입니다.\n\n```js\n“Strict-Transport-Security”: “max-age=63072000; includeSubDomains; preload”\n```\n\nmax-age는 브라우저가 해당 사이트에만 HTTPS를 사용하여 액세스해야 한다는 것을 기억하는 시간(초)입니다.\n\nincludeSubDomains는 선택적인 매개변수로, 지정된 경우 이 규칙이 사이트의 모든 하위 도메인에도 적용됩니다.\n\n<div class=\"content-ad\"></div>\n\npreload 매개변수는 Google Chrome에 하드코딩된 브라우저 사전로드 목록에 도메인을 추가하며, Chrome 목록을 기반으로 하는 다른 브라우저에도 적용됩니다. 또한 도메인을 hstspreload.org에서도 선언해야 합니다.\n\n- URL innocent.csrfexample.com 또는 http://innocent.csrfexample.com에 접속하면, 브라우저는 HTTP 프로토콜을 사용하려고 한다고 가정하여 innocent.csrfexample.com으로 HTTP 요청을 보냅니다.\n- 이 시점에서 웹 서버는 리디렉트(301 상태 코드)로 HTTPS 사이트로 응답합니다. 브라우저는 innocent.csrfexample.com으로 HTTPS 연결을 만듭니다.\n- 사이트가 처음으로 HTTPS를 사용하여 액세스되고 Strict-Transport-Security 헤더를 반환하는 경우, 브라우저는 이 정보를 기록하여 나중에 해당 사이트를 HTTP로 로드하려는 시도가 자동으로 HTTPS를 사용하도록 지원합니다.\n- Strict-Transport-Security 헤더는 브라우저에 아래 지침을 제공합니다.\n\n```plaintext\n- 이 헤더를 수신한 순간부터 다음 63072000초(최대 연령 매개변수로 지정) 동안 사이트와 해당 하위 도메인에 대한 모든 연결은 반드시 HTTPS로 이루어져야 합니다(includeSubDomains 매개변수가 포함된 경우).\n- 모든 HTTP 연결을 허용하지 않습니다.\n\n- 브라우저가 HTTP를 사용하여 리소스를로드하는 요청을 받으면, 대신 HTTPS 요청을 시도해야 합니다. HTTPS를 사용할 수 없는 경우 연결을 종료해야 합니다.\n```\n\n<div class=\"content-ad\"></div>\n\n4. 웹 사이트에 처음 액세스할 때 HSTS로 보호받지 못하는 불편함이 있습니다. 사용자가 HSTS를 활용하려면 브라우저가 HSTS 헤더를 최소 한 번 볼 수 있어야 합니다. 이는 첫 번째 안전한 연결 이후 가능합니다. 이 문제를 해결하려면 웹 사이트를 HSTS 사전 로딩 목록에 추가해야 합니다(https://hstspreload.org/). 이렇게 하면 브라우저가 먼저 내부 목록을 확인하고 첫 연결 시도 중에도 웹 사이트에 HTTP를 통해 접근하지 않습니다.\n\n5. HSTS의 max-age 매개변수는 브라우저가 Strict-Transport-Security 헤더를 읽을 때마다 갱신됩니다. 이는 max-age 매개변수로 지정된 시간 내에 방문 사이에 간격이 넘지 않는 한 보호가 영구적임을 의미합니다. max-age 매개변수로 지정된 시간 동안 웹 사이트를 방문하지 않으면 새로운 사이트로 취급됩니다.\n\n동시에 max-age를 0으로 설정하여 Strict-Transport-Security 헤더를 제공하면, 브라우저는 다음 연결 시도에서 사이트를 새로운 것으로 처리합니다. max-age 매개변수를 0으로 설정하면 사이트의 HSTS가 비활성화됩니다.\n\n아래는 HSTS의 다이어그램 표현입니다:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-20-AngularWaystoenforceasecurehttpsconnectionwhenloadingapplicationOrresourcesinaapplication_0.png)\n\n이제 로컬 개발 서버와 nginx 웹 서버에서 이 헤더를 사용하는 방법을 살펴보겠습니다.\n\n로컬 개발 서버 사용하기\n\npackage.json 파일의 \"start\" 스크립트는 다음과 같이 보입니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n\"serve\": {\n  \"builder\": \"@angular-devkit/build-angular:dev-server\",\n  \"options\": {\n    \"sslKey\": \"./self-signed-with-no-passphrase/secureAngularExample.key\",\n    \"sslCert\": \"./self-signed-with-no-passphrase/secureAngularExample.crt\",\n    \"ssl\": true\n  },\n  \"configurations\": {\n    \"production\": {\n      \"browserTarget\": \"csrfInAngular:build:production\"\n    },\n    \"development\": {\n      \"browserTarget\": \"csrfInAngular:build:development\",\n      \"headers\": {\n        \"Strict-Transport-Security\": \"max-age=63072000; includeSubDomains; preload\"\n      }\n    }\n  },\n  \"defaultConfiguration\": \"development\"\n}\n```\n\nStrict-Transport-Security response header가 \"headers\" 객체에 속성으로 추가되었습니다.\n\n<div class=\"content-ad\"></div>\n\n```json\n\"headers\": {\n\"Strict-Transport-Security\": \"max-age=63072000; includeSubDomains; preload\"\n}\n```\n\n다른 웹 서버 사용하기\n\n이 이야기에서는 nginx 웹 서버를 사용 중이지만 이 개념은 모든 웹 서버에 적용됩니다.\n\n다음은 nginx.config입니다. Nginx는 포트 80과 443에서 연결을 받고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n서버 블록을 2개 추가했어요. 두 블록 모두 server_name이 innocent.csrfexample.com으로 동일하지만 다른 포트인 443과 80에서 수신하고 있어요.\n\nNginx가 80포트에서 요청을 받으면, 같은 사이트를 https 프로토콜을 사용하여 301 상태 코드로 리디렉션 하고 있어요.\n\n```js\nserver{\nlisten 0.0.0.0:80;\nserver_name innocent.csrfexample.com;\nreturn 301 https://$host$request_uri;\n}\n```\n\n443포트에서 수신하는 서버 블록 안에, add_header 지시문을 사용하여 Strict-Transport-Security 응답 헤더를 설정했어요. 이를 통해 브라우저가 응용 프로그램을 http에서 https 프로토콜로 리디렉션할 때, Strict-Transport-Security 응답 헤더가 브라우저로 보내지도록 설정되어요.\n\n<div class=\"content-ad\"></div>\n\n\n```js\nadd_header ‘Strict-Transport-Security’ ‘max-age=63072000; includeSubDomains; preload’;\n``` \n\nAngular 앱을 Nginx에 배포하기 위해 애플리케이션을 컨테이너화했습니다.\n\n다음은 docker-compose.yml입니다.\n\n다음은 Dockerfile입니다.\n\n\n<div class=\"content-ad\"></div>\n\n\"Docker compose build\"과 \"docker compose up\"을 실행합니다.\n\n- 브라우저에서 처음으로 http://innocent.csrfexample.com에 접속하면, 브라우저는 301 Moved Permanently 응답을 사용하여 사이트를 안전한 https:// 스키마로 리디렉션합니다.\n\nLocation 응답 헤더는 브라우저가 새 URL을로드해야 함을 나타냅니다.\n\n아래 스크린샷에서 \"Strict-Transport-Security\" 응답 헤더를 확인하세요. 요청 URL에서 명확히 알 수 있듯이, https로 리디렉트된 후에 응답 헤더가 전송됩니다. 브라우저는이 사이트의 만료 시간을 63072000초 또는 2년으로 기록할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n2. 브라우저에서 http://innocent.csrfexample.com에 두 번째로 접속하면, 브라우저가 307 임시 리디렉트 응답을 사용하여 사이트를 안전한 https://로 리디렉션합니다. 이번에는 HSTS(Http Strict Transport Security) 덕분에 https로 리디렉션이 이루어졌습니다. 아래 스크린샷에서 확인할 수 있듯이, HSTS는 브라우저 자체에서 HTTPS로 재작성이 이루어지므로 301 상태 코드 응답과 같은 nginx 웹 서버에 의한 HTTPS로의 리디렉트가 없어졌습니다.\n\nHSTS는 응용 프로그램이 브라우저에서 max-age 매개변수가 만료될 때까지 오직 HTTPS 연결로만 로드되도록 보장합니다.\n\n3. 이제 nginx.config 파일에서 max-age 매개변수를 0으로 설정해보겠습니다. 이는 HSTS를 비활성화하는 것을 의미합니다.\n\n```js\nadd_header ‘Strict-Transport-Security’ ‘max-age=0; includeSubDomains; preload’ always;\n```\n\n<div class=\"content-ad\"></div>\n\n현재 브라우저에서 http://innocent.csrfexample.com을 입력하면 이전에 2년 동안이었던 이 사이트의 max-age 매개변수가 아직 만료되지 않아 HSTS로 다시 https로 리디렉션됩니다.\n\n아래 스크린샷에서 응답 헤더를 확인해 보세요. 여기에서 max-age 매개변수는 0입니다. 브라우저는 이 사이트의 만료 시간을 지금부터 0초로 업데이트할 것입니다.\n\n다음에 브라우저에서 다시 http://innocent.csrfexample.com에 접속할 때, 최신 업데이트에 따라 max-age 매개변수가 0초이므로 HSTS가 리디렉션을 수행하지 않도록 http에서 https로 영구적으로 이동(response code 301)합니다.\n\n이러한 과정은 향후 이 사이트를 로드하려는 시도에서도 계속될 것이며, max-age 매개변수가 0보다 큰 값으로 업데이트되어 HSTS를 활성화할 때까지 지속됩니다.\n\n<div class=\"content-ad\"></div>\n\n4. max-age를 63072000으로 다시 업데이트했다고 치면,\n\n```js\nadd_header ‘Strict-Transport-Security’ ‘max-age=63072000; includeSubDomains; preload’ always;\n```\n\n= 이제 다시 http://innocent.csrfexample.com에 접속했을 때 301 응답 코드로 인해 https로 리디렉션됩니다. 하지만 https로 리디렉션된 후의 응답 헤더를 아래 2번째 스크린샷에서 살펴봐주세요. Strict-Transport-Security 헤더의 max-age 매개변수가 업데이트되었습니다. 브라우저는 이 사이트에 대한 업데이트된 만료 시각을 이제 63072000으로 기록할 것입니다.\n\n= http://innocent.csrfexample.com에 다시 접속했을 때, 이번에는 HSTS를 통해 307 응답 코드로 인해 리디렉션이 발생합니다.\n\n<div class=\"content-ad\"></div>\n\n제가 이해하기 쉽게 HSTS가 어떻게 작동하는지 예시를 통해 설명 드렸으면 좋겠습니다.\n\nII. 애플리케이션 내에서 보안되지 않은 리소스를 로드할 때 https로 리다이렉팅\n\n저는 안전한 https 연결을 통해 실행 중인 Angular 앱이 있습니다. 즉, 웹 서버와의 연결이 TLS/SSL로 암호화되어 있어 대부분의 스니퍼와 중간자 공격으로부터 안전합니다.\n\n이 애플리케이션에 cleartext HTTP를 사용하여 가져온 콘텐츠가 있다면, 이는 혼합 콘텐츠 애플리케이션입니다. 이는 애플리케이션이 부분적으로만 암호화되어 있음을 의미하며, 암호화되지 않은 콘텐츠가 스니퍼와 중간자 공격자에게 노출된 채로 남아 있습니다.\n\n<div class=\"content-ad\"></div>\n\n예시\n\n이 문제와 그 해결책을 설명하기 위해, HTTP 연결을 포트 80에서, HTTPS 연결을 포트 443에서 수신하는 노드 익스프레스 서버를 생성했습니다.\n\n또한, 노드 익스프레스 프로젝트에서 아래와 같은 루트를 생성하여 고양이 이미지를 가져오도록 했습니다.\n\n```js\nrouter.get('/getImage', function(req, res, next) {\n  res.sendFile(path.join(__dirname, '../public', 'images', 'cat.jpg'));\n});\n```\n\n<div class=\"content-ad\"></div>\n\n포트 충돌을 피하기 위해 nginx 웹 서버가 안전한 https 연결을 수신하는 포트 5443에서 작동하도록 설정되었습니다. 또한 포트 80에서 연결을 수신하는 서버 블록을 주석 처리하여 Node express 서버와의 충돌을 피했습니다.\n\ndocker-compose.yml 파일을 업데이트했습니다.\n\nnginx.config 파일도 업데이트되었습니다.\n\n따라서 이제 https://innocent.csrfexample.com:5443을 통해 앵귤러 애플리케이션에 액세스할 수 있습니다. HSTS가 활성화되어 있기 때문에 http://innocent.csrfexample.com:5443으로의 모든 요청은 https://innocent.csrfexample.com:5443으로 리디렉션됩니다.\n\n<div class=\"content-ad\"></div>\n\n어느 Angular 구성 요소에서, Node 서버에서 이미지를 가져 오기 위해 아래 `img` 태그를 사용하는 경우를 가정해 봅시다. 이미지는 http를 통해 가져 오려고 합니다.\n\n```js\n<img src=\"http://csrfexample.com/getImage\">\n```\n\n브라우저에서 `http://innocent.csrfexample.com:5443`에 액세스하면, HSTS가 307 응답 코드를 사용하여 `https://innocent.csrfexample.com:5443`로 리디렉션됩니다.\n\n안전하지 않은 요청 `http://csrfexample.com/getImage`가 아래 스크린 샷에서 보이는 것처럼 `https://csrfexample.com/getImage`로 업그레이드되었습니다. 코드 변경 없이 어떻게 이렇게 된 것일까요?\n\n<div class=\"content-ad\"></div>\n\n이미지가 로드된 것을 확인할 수 있지만 콘솔에 Mixed Content 경고 메시지가 표시됩니다. Chrome은 http 요청을 자동으로 https로 업그레이드했습니다. Chrome 79부터는 안전한 연결에서 실행 중인 애플리케이션의 페이지의 모든 리소스에 대한 요청을 http에서 https로 자동으로 업그레이드합니다. Chrome에 대한 자세한 내용은 https://blog.chromium.org/2019/10/no-more-mixed-messages-about-https.html 확인하세요.\n\n만약 오래된 버전의 Chrome이나 http에서 https로 요청을 자동으로 업그레이드하지 않는 브라우저를 사용 중이라면 어떨까요? 사용자가 어떤 브라우저를 사용하여 애플리케이션을 로드할지는 실제로 제어할 수 없습니다.\n\n이 문제를 해결하기 위해 Content-Security-Policy 헤더를 upgrade-insecure-requests 지시문과 함께 사용할 수 있습니다.\n\n로컬 웹 개발 서버의 경우, angular.json 파일의 \"serve\" 섹션을 아래와 같이 업데이트하세요.\n\n<div class=\"content-ad\"></div>\n\n```json\n{\n  \"serve\": {\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": {\n      \"sslKey\": \"./self-signed-with-no-passphrase/secureAngularExample.key\",\n      \"sslCert\": \"./self-signed-with-no-passphrase/secureAngularExample.crt\",\n      \"ssl\": true\n    },\n    \"configurations\": {\n      \"production\": {\n        \"browserTarget\": \"csrfInAngular:build:production\"\n      },\n      \"development\": {\n        \"browserTarget\": \"csrfInAngular:build:development\",\n        \"headers\": {\n          \"Strict-Transport-Security\": \"max-age=63072000; includeSubDomains; preload\",\n          \"Content-Security-Policy\": \"upgrade-insecure-requests\"\n        }\n      }\n    },\n    \"defaultConfiguration\": \"development\"\n  }\n}\n```\n\nNginx 웹서버의 경우, 아래와 같이 nginx.config 파일을 업데이트할 수 있습니다.\n\n이제 브라우저에서 http://innocent.csrfexample.com:5443을 입력하면 HSTS가 307 응답 코드를 사용해 https://innocent.csrfexample.com:5443로 리디렉션되며 이미지는 https를 사용하여 요청되어 \"혼합 콘텐츠\" 경고 없이 보여집니다.\n\n아래 두 번째 스크린샷에서 응답 헤더를 확인해보세요. \"Content-Security-Policy\" 헤더에는 \"upgrade-insecure-requests\" 지시문이 포함되어 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 스택더믹 🎓\n\n끝까지 읽어주셔서 감사합니다. 떠나시기 전에:\n\n- 작가를 클랩하고 팔로우해주세요! 👏\n- 팔로우하기: X | LinkedIn | YouTube | Discord\n- 다른 플랫폼 방문하기: In Plain English | CoFeed | Differ\n- 더 많은 콘텐츠는 Stackademic.com에서 확인하세요.","ogImage":{"url":"/assets/img/2024-06-20-AngularWaystoenforceasecurehttpsconnectionwhenloadingapplicationOrresourcesinaapplication_0.png"},"coverImage":"/assets/img/2024-06-20-AngularWaystoenforceasecurehttpsconnectionwhenloadingapplicationOrresourcesinaapplication_0.png","tag":["Tech"],"readingTime":11},{"title":"Angular 번들을 분석하는 방법","description":"","date":"2024-06-20 03:01","slug":"2024-06-20-HowToAnalyzeAngularBundle","content":"\n\n## 세 가지 간단한 도구를 사용하여 Angular 번들 크기를 분석해 보세요\n\n만약 당신의 Angular 애플리케이션의 번들 크기를 알고 싶다면 단순히 `ng build`를 실행하고 터미널에서 결과를 확인할 수 있습니다. 다음과 같은 결과를 얻게 될 것입니다:\n\n![분석 이미지](/assets/img/2024-06-20-HowToAnalyzeAngularBundle_0.png)\n\n이 경우에 원본 크기는 1.02 MB이고 예상 전송 크기는 245.35 kB입니다.\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! \n\n결과 아래에는 애플리케이션 번들 크기의 구성 요소가 가장 큰 것부터 가장 작은 것까지 나열되어 있습니다.\n\n요령으로 Angular 번들을 살펴볼 수 있는 빠른 방법이겠죠.\n\n이제 이것을 시각화해보고 싶다면 어떻게 할까요? 적어도 몇 가지 방법이 있습니다:\n\n- Webpack Bundle Analyzer (클래식)\n- Source Map Explorer\n- Esbuild Analyze (Angular `17)\n\n<div class=\"content-ad\"></div>\n\n# 웹팩 번들 분석기\n\n웹팩 번들 분석기는 \"웹팩 출력 파일의 크기를 대화식 확대/축소 트리맵으로 시각화하는 매우 인기 있는 방법\"입니다. 그냥 설치하면 바로 사용할 수 있고 충분히 좋을 수도 있습니다.\n\n다음 명령어로 웹팩 번들 분석기를 설치하세요:\n\n```js\nnpm install --save-dev webpack-bundle-analyzer\n```\n\n<div class=\"content-ad\"></div>\n\n번들 내용을 시각화하는 가장 쉬운 방법은 package.json에 스크립트를 추가하는 것입니다. 예를 들어:\n\n```js\n// package.json\n\n{\n    \"name\": \"your-app-name\",\n    \"scripts\": { \n        \"ng\": \"ng\",\n        \"e2e\": \"ng e2e\",\n        \"analyze-webpack\": \"ng build --stats-json && webpack-bundle-analyzer dist/your-app-name/stats.json\"\n    },\n    ...\n}\n```\n\n그래서 다음 명령을 실행하면\n\n```js\nnpm run analyze-webpack\n```\n\n<div class=\"content-ad\"></div>\n\nAngular은 여러분의 앱을 빌드하고 새롭게 생성된 dist/your-app-name 폴더 내에 stats.json 파일을 만듭니다.\n\n마지막으로 webpack-bundle-analyzer는 기본 주소인 http://127.0.0.1:8888/에서 새 탭을 자동으로 엽니다.\n\nWebpack Bundle Analyzer 문서에 나와 있는 대로 번들을 보기 쉽고 간단하게 확인할 수 있습니다.\n\n![Webpack Bundle Analyzer](https://miro.medium.com/v2/resize:fit:1400/0*wsCwLvr_n3lt96pc.gif)\n\n<div class=\"content-ad\"></div>\n\n덤으로, Webpack Bundle Analyzer는 청크를 필터링할 수 있는 편리한 사이드바를 제공합니다. 가장 큰 부분에 집중하기에 매우 유용합니다.\n\n![이미지](/assets/img/2024-06-20-HowToAnalyzeAngularBundle_1.png)\n\n내 결론: Webpack Bundle Analyzer는 제 요구에 완벽하게 작동합니다. 그러나 2020년에 Angular 팀은 이 빌드 정보가 정확하지 않을 수 있다고 제안했습니다.\n\n해결책으로는 소스 맵 익스플로러를 권장했습니다.\n\n<div class=\"content-ad\"></div>\n\n# 소스 맵 익스플로러\n\n소스 맵 익스플로러는 코드의 원본을 파악하고 디버깅하는 데 도움을 주는 트리 맵 시각화를 제공합니다.\n\n문서를 따라 설치하려면 전역으로 다음을 실행하세요:\n\n```js\nnpm install -g source-map-explorer\n```\n\n<div class=\"content-ad\"></div>\n\n번들 내용을 가장 쉽게 시각화하는 방법은 package.json에 스크립트를 추가하는 것입니다. 예를 들어,\n\n```js\n// package.json\n\n{\n    \"name\": \"your-app-name\",\n    \"scripts\": { \n        \"ng\": \"ng\",\n        \"e2e\": \"ng e2e\",\n        \"analyze-webpack\": \"ng build --stats-json && webpack-bundle-analyzer dist/your-app-name/stats.json\",\n        \"analyze-sourcemap\": \"ng build --source-map && source-map-explorer dist/your-app-name/main.js\"\n    },\n    ...\n}\n```\n\n그래서 다음을 실행하면\n\n```js\nnpm run analyze-sourcemap\n```\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! Angular 애플리케이션을 개발하실 예정이시군요. 소스 맵이 함께 제공되어 Source Map Explorer에서 분석할 수 있습니다.\n\n위 스크립트는 main.js를 분석하고 \"덜 화려하고\" 최소한의 방식으로 시각화할 것입니다. 조금은 슬픕니다.\n\n하지만 상호작용성이 뛰어나고 사용하기 쉽습니다.\n\n![이미지](/assets/img/2024-06-20-HowToAnalyzeAngularBundle_2.png)\n\n<div class=\"content-ad\"></div>\n\n저의 경우에는 Webpack Bundle Analyzer와 Source Map Explorer로 보고된 정보 사이에 일부 차이점을 발견할 수 있어요. main.js의 크기는 다음과 같습니다:\n\n- Webpack Bundle Analyzer — 630.38 KB\n- Source Map Explorer — 630.45 KB\n\n# Esbuild Analyze\n\nAngular v17부터 2024년에는 번들 크기를 검사할 수 있는 esbuild analyze 또는 esbuild-visualizer를 사용할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\nAngular 문서에 따르면 다음과 같습니다.\n\n![image](/assets/img/2024-06-20-HowToAnalyzeAngularBundle_3.png)\n\nng build your-app-name --stats-json 명령을 실행하면 응용 프로그램의 루트 폴더 안에 stats.json 파일이 생성됩니다.\n\n그러나 문서에서 제안하는 대로 새로 생성된 stats.json을 esbuild 번들 크기 분석기에 가져오려고 시도하면 작동하지 않는데, 그 이유는 stats.json이 분석기에서 요구하는 메타데이터 JSON 형식과 일치하지 않기 때문입니다.\n\n<div class=\"content-ad\"></div>\n\n약간 실망스럽네요. 제가 기대했던대로 쉽게 작동될 줄 알았는데요.\n\n그래서 \"https://esbuild.github.io/analyze/\"으로 분석할 수 있는 'stats.json' 파일을 생성한다는 말은 반 정도 맞습니다. 파일은 받을 수 있지만 사용할 수는 없죠.\n\n아래는 구석통을 설치하는 방법입니다:\n\n<div class=\"content-ad\"></div>\n\n\n```js\nnpm install --save-exact --save-dev esbuild\n```\n\n그런 다음 다음과 같은 명령을 루트 폴더의 터미널에서 실행하세요:\n\n```js\n./node_modules/.bin/esbuild src/main.ts --bundle --metafile=meta.json --outfile=out.js\n```\n\n이렇게 길고 이상한 명령을 한 번에 실행하려면 package.json에 스크립트를 만들었습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n// packjage.json\n\n{\n   \"name\": \"your-app-name\",\n    \"scripts\": { \n        \"ng\": \"ng\",\n        \"e2e\": \"ng e2e\",\n        \"analyze-webpack\": \"ng build --stats-json && webpack-bundle-analyzer dist/your-app-name/stats.json\",\n        \"analyze-sourcemap\": \"ng build --source-map && source-map-explorer dist/your-app-name/main.js\",\n        \"analyze-esbuild\": \"ng build && esbuild dist/your-app-name/main.js --bundle --metafile=dist/your-app-name/meta.json --outfile=out.js\"\n    },\n    \"dependencies\": { ... },\n    \"devDependencies\": { ... },\n}\n```\n\n따라서,\n\n```js\nnpm run analyze-esbuild\n```\n\n을 실행하면, 애플리케이션 루트 폴더에 meta.json 파일이 생성됩니다. 그런 다음 meta.json을 esbuild 번들 크기 분석기에서 사용하여 번들을 시각화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n아래 시각화는 썬버스트 차트이지만 다른 유형으로 이동할 수 있어요.\n\n![Sunburst Chart](/assets/img/2024-06-20-HowToAnalyzeAngularBundle_5.png)\n\n## 결론\n\n대부분은 당신의 요구에 따라 다릅니다.\n\n<div class=\"content-ad\"></div>\n\n내 의견으로는, 대부분의 사용자들이 ng build에서 출력된 원본 크기를 확인하는 것이 도움이 될 것이라고 생각합니다. 원본 크기가 \"너무 크다\"고 판단될 경우, 어떤 의미인지 논의할 수 있지만 번들 분석 도구를 활용해보는 것이 좋습니다.\n\n내 의견으로는 가장 빠른 해결책은 webpack-bundle-analyzer입니다. 그러나 esbuild-analyze와 비교했을 때 시각화 가능성 면에서 약간 부족하다고 생각합니다.","ogImage":{"url":"/assets/img/2024-06-20-HowToAnalyzeAngularBundle_0.png"},"coverImage":"/assets/img/2024-06-20-HowToAnalyzeAngularBundle_0.png","tag":["Tech"],"readingTime":6},{"title":"Services in Angular","description":"","date":"2024-06-20 02:58","slug":"2024-06-20-ServicesinAngular","content":"\n\n<img src=\"/assets/img/2024-06-20-ServicesinAngular_0.png\" />\n\n알다시피, Angular은 Google이 개발한 TypeScript 프레임워크로 싱글 페이지 응용 프로그램을 개발하는 데 사용됩니다. Angular의 가장 중요한 기능 중 하나는 서비스입니다.\n\n이 기사에서는 Angular 서비스가 무엇인지, 왜 중요한지, 그리고 애플리케이션에서 서비스를 생성하고 사용하는 방법을 살펴볼 것입니다. 또한 애플리케이션에서 사용할 수 있는 다양한 유형의 서비스와 그들과 작업하는 데 가장 좋은 방법을 살펴볼 것입니다. 중간에 우리는 코드 예제와 실제 사용 사례를 제공하여 개념을 더 잘 이해하고 실무에 적용하는 방법을 돕겠습니다.\n\n이 기사를 마치면 Angular 서비스에 대한 sol 이름을 갖추게 되고 보다 효율적이고 효과적인 애플리케이션을 구축하는 방법을 알 수 있을 것입니다. Angular를 막 시작했다면 또는 기술을 향상시키려는 숙련된 개발자라면, 이 기사는 여러분을 위한 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# 목차:\n\n- Angular 서비스 소개\n- Angular 서비스 생성\n- 서비스의 싱글톤 특성 이해\n- 내장 서비스 (예: HttpClient, Router)\n- 사용자 정의 서비스\n- Angular 애플리케이션에서 서비스의 중요성\n- Angular 서비스 작업을 위한 최상의 방법\n- 추가 학습 자료\n\n시작해 봅시다!\n\n<div class=\"content-ad\"></div>\n\nAngular 앱의 중요한 구성 요소 중 하나는 Angular 서비스입니다. 서비스는 종종 데이터 검색, 조작 및 저장과 같은 기능을 그룹화하는 데 사용됩니다. 이러한 기능은 여러 구성 요소에서 사용할 수 있습니다.\n\n또한, 서비스는 계산 수행, 비즈니스 로직 구현 및 외부 API와 통신하는 데 활용될 수 있습니다.\n\nAngular에서 클래스로 선언되기 때문에 서비스는 의존성 주입 시스템을 사용하여 구성 요소 또는 다른 서비스에 주입될 수 있습니다.\n\n일관성 유지와 메모리 누수를 방지하기 위해 Angular 서비스는 싱글톤입니다. 이는 애플리케이션 전체에서 서비스의 단일 인스턴스만 존재한다는 것을 의미합니다.\n\n<div class=\"content-ad\"></div>\n\n# 서비스 생성하기\n\n## 단계 1: 새 서비스 생성\n\nAngular에서 새로운 서비스를 생성하려면 Angular CLI 명령 ng generate service를 사용해야 합니다. 터미널이나 명령 프롬프트를 열고 Angular 애플리케이션의 루트 디렉토리로 이동해주세요. 다음 명령을 실행하여 새로운 서비스를 생성하세요:\n\n```js\nng generate service my-service\n```\n\n<div class=\"content-ad\"></div>\n\n이 명령은 응용 프로그램의 app 폴더에 my-service.service.ts라는 새 파일을 만듭니다. 이 파일은 서비스의 기본 구조를 포함하고 있습니다.\n\n## 단계 2: 서비스 클래스 정의하기\n\n이전 단계에서 만들어진 my-service.service.ts 파일을 엽니다. 이 파일은 서비스를 위한 기본 클래스 정의를 포함하고 있습니다. 이 클래스에 우리만의 메서드와 속성을 추가하여 서비스의 기능을 정의해야 합니다. 아래는 간단한 서비스 클래스의 예시입니다:\n\n```js\nimport { Injectable } from '@angular/core';\n@Injectable({\n  providedIn: 'root'\n})\nexport class MyService {\n  private data: string[] = [];\n  getData(): string[] {\n    return this.data;\n  }\n  addData(newData: string) {\n    this.data.push(newData);\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 예제에서는 MyService라는 서비스를 정의했습니다. 이 서비스에는 문자열 배열인 data라는 private 속성과 getData() 및 addData()라는 두 가지 메서드가 있습니다. getData() 메서드는 간단히 data 속성을 반환하고, addData() 메서드는 새로운 문자열을 data 배열에 추가합니다.\n\n이 클래스가 서비스임을 나타내기 위해 @Injectable 데코레이터를 사용했음을 주목하세요. 또한 providedIn 속성을 `root`로 설정하여 서비스가 싱글톤으로 생성되고 응용 프로그램의 루트 모듈에 주입될 것임을 나타냈습니다.\n\n## 단계 3: 서비스를 컴포넌트에 주입하기\n\n컴포넌트에서 서비스를 사용하려면 Angular의 의존성 주입 시스템을 사용하여 서비스를 주입해야 합니다. app.component.ts와 같은 컴포넌트 파일을 열고 다음 코드를 추가하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { Component } from '@angular/core';\nimport { MyService } from './my-service.service';\nexport class AppComponent {\n  data: string[];\n  newItem: string;\n  constructor(private myService: MyService) {\n    this.data = myService.getData();\n  }\n  addItem() {\n    this.myService.addData(this.newItem);\n    this.newItem = '';\n  }\n}\n``` \n\n```js\n<div>\n  <h2>Data:</h2>\n  <ul>\n    <li *ngFor=\"let item of data\">{{item}}</li>\n  </ul>\n  <input [(ngModel)]=\"newItem\" placeholder=\"New item...\">\n  <button (click)=\"addItem()\">Add</button>\n</div>\n```\n\n이 코드에서는 MyService 클래스를 가져와서 구성 요소의 constructor에 주입했습니다. 또한 서비스의 data 속성으로 구성 요소에 프로퍼티 data를 추가했습니다. 마지막으로 사용자가 데이터 배열에 새 항목을 추가할 수 있도록 input과 button을 추가했습니다.\n\n서비스의 데이터를 구성 요소의 템플릿에 표시하려면 *ngFor 지시문을 추가하여 데이터 배열을 반복하고 각 항목을 목록에 표시했습니다.\n\n<div class=\"content-ad\"></div>\n\n컴포넌트의 newItem 속성도 양방향 데이터 바인딩인 [(ngModel)]을 이용하여 입력 필드에 바인딩했습니다. 사용자가 \"추가\" 버튼을 클릭하면 컴포넌트의 addItem() 메서드가 호출됩니다. 이 메서드는 서비스의 addData() 메서드를 호출하여 새로운 항목을 데이터 배열에 추가합니다.\n\n## 단계 4: 모듈에 서비스 추가\n\n서비스를 주입 가능하게 하려면 해당 서비스를 모듈의 providers 배열에 추가해야 합니다. app.module.ts 파일을 열고 아래 코드를 추가하세요:\n\n```js\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { MyService } from './my-service.service';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [\n    MyService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n<div class=\"content-ad\"></div>\n\n이 코드에서는 MyService 클래스를 가져와 @NgModule 데코레이터의 providers 배열에 추가했습니다. 이렇게하면 서비스가 응용 프로그램 전반에 걸쳐 주입 가능하게 됩니다.\n\n# 서비스의 싱글톤 특성 이해하기\n\nAngular에서 서비스는 일반적으로 싱글톤으로 설계됩니다. 이는 서비스가 컴포넌트나 다른 서비스에 주입될 때 항상 동일한 서비스 인스턴스를 반환한다는 것을 의미합니다. 이 동작은 서비스를 응용 프로그램 전체에서 일관되고 예측 가능하게 사용할 수 있도록 해주어 종종 원하는 바입니다.\n\n서비스의 싱글톤 특성을 이해하는 것은 서비스를 설계하고 사용하는 방식에 영향을 미치기 때문에 중요합니다. 이 기사에서는 싱글톤 개념을 자세히 살펴보고 Angular 응용 프로그램에서 어떻게 사용될 수 있는지 예를 살펴볼 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# 싱글턴이란 무엇인가요?\n\n싱글턴은 클래스의 인스턴스화를 단 한 번으로 제한하고 해당 인스턴스에 대한 전역 액세스 지점을 제공하는 디자인 패턴입니다. 즉, 싱글턴은 한 번만 인스턴스화될 수 있는 클래스이며, 이 인스턴스는 클래스의 모든 사용자에 의해 공유됩니다.\n\nAngular 서비스의 맥락에서, 싱글턴 서비스는 한 번 생성되고 애플리케이션 전반에 걸쳐 공유되는 서비스입니다. 서비스가 컴포넌트나 다른 서비스에 주입될 때, Angular은 항상 동일한 서비스 인스턴스를 반환합니다.\n\n# Angular에서 싱글턴을 사용하는 이유는 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\nAngular 애플리케이션에서 싱글톤이 일반적으로 사용되는 몇 가지 이유가 있습니다:\n\n## 일관성\n\n서비스가 싱글톤임을 보장함으로써 해당 서비스를 사용하는 모든 컴포넌트와 서비스가 동일한 서비스 인스턴스에 액세스 할 수 있다고 확신할 수 있습니다. 이는 애플리케이션 전체에서 일관성을 유지하는 데 도움이 될 수 있습니다.\n\n## 메모리 관리\n\n<div class=\"content-ad\"></div>\n\n여러 서비스 인스턴스를 만드는 것은 메모리 누수와 다른 문제를 야기할 수 있습니다. 서비스를 싱글톤으로 만들면 서비스의 유일한 인스턴스가 있음을 보장하여 메모리 사용량을 줄이고 성능을 향상시킬 수 있습니다.\n\n## 성능\n\n서비스를 만들고 초기화하는 것은 특히 서비스가 해결해야 할 종속성이 있는 경우 비용이 많이 드는 작업일 수 있습니다. 서비스를 싱글톤으로 만들면 서비스를 여러 번 만들고 초기화하는 오버헤드를 피할 수 있습니다.\n\n## 내장 서비스\n\n<div class=\"content-ad\"></div>\n\nAngular은 웹 애플리케이션을 개발하는 데 사용할 수 있는 여러 내장 서비스를 제공합니다. 이러한 서비스는 Angular 프레임워크의 일부이며 컴포넌트로 쉽게 가져올 수 있습니다. 이 기사에서는 Angular에서 가장 일반적으로 사용되는 내장 서비스 몇 가지를 탐색하고, Angular 애플리케이션에서 어떻게 사용될 수 있는지 예제를 제공하겠습니다.\n\n## 1. HttpClient\n\nHttpClient 서비스는 서버에 HTTP 요청을 보낼 수 있는 Angular 모듈입니다. RESTful API와 상호 작용하고 백엔드 서버에서 데이터를 검색하는 데 사용할 수 있는 강력한 서비스입니다.\n\n- Angular 프로젝트에서 todo.service.ts라는 새 서비스 파일을 만들고 HttpClient 서비스를 가져오세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoService {\n  constructor(private http: HttpClient) { }\n  \n  getTodos() {\n    return this.http.get<any[]>('https://jsonplaceholder.typicode.com/todos');\n  }\n  \n  getTodoById(id: number) {\n    return this.http.get<any>(`https://jsonplaceholder.typicode.com/todos/${id}`);\n  }\n}\n```\n\n- 당신의 컴포넌트에서 TodoService를 가져와서 메서드에 구독하세요:\n\n```js\nimport { Component, OnInit } from '@angular/core';\nimport { TodoService } from './todo.service';\n\n@Component({\n  selector: 'app-todo-list',\n  template: `\n    <h1>할 일 목록</h1>\n    <ul>\n      <li *ngFor=\"let todo of todos\">{{ todo.title }}</li>\n    </ul>\n  `\n})\nexport class TodoListComponent implements OnInit {\n  todos: any[];\n  \n  constructor(private todoService: TodoService) { }\n  \n  ngOnInit() {\n    this.todoService.getTodos().subscribe(response => {\n      this.todos = response;\n    });\n  }\n}\n```\n\n- 별도의 컴포넌트에서 getTodoById() 메서드를 사용하세요:\n\n\n<div class=\"content-ad\"></div>\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { TodoService } from './todo.service';\n\n@Component({\n  selector: 'app-todo-details',\n  template: `\n    <h1>Todo Details</h1>\n      <p>Title: { todo.title }</p>\n      <p>Completed: { todo.completed }</p>\n  `\n})\nexport class TodoDetailsComponent implements OnInit {\n  todo: any;\n\n  constructor(\n    private route: ActivatedRoute,\n    private todoService: TodoService\n  ) { }\n\n  ngOnInit() {\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.todoService.getTodoById(id).subscribe(response => {\n      this.todo = response;\n    });\n  }\n}\n```\n\n이 예시에서는 두 개의 메서드, getTodos()와 getTodoById(),를 가진 별도의 TodoService를 만들었습니다. 이러한 메서드는 HttpClient 서비스를 사용하여 원격 서버에서 할 일 목록을 검색하기 위해 HTTP 요청을 수행합니다. TodoListComponent에서 TodoService를 주입하고 getTodos() 메서드를 구독하여 할 일 목록을 검색하고 해당 내용을 템플릿에 표시했습니다. TodoDetailsComponent에서는 getTodoById() 메서드를 사용하여 라우트 매개변수에서 ID로 특정 할 일을 검색하고 그 내용을 템플릿에 표시했습니다.\n\n## 2. Router\n\nAngular 라우터 서비스는 Angular에서 내장된 서비스로, Angular 애플리케이션의 다른 뷰나 컴포넌트 간의 탐색을 관리하는 역할을 합니다.\n\n\n<div class=\"content-ad\"></div>\n\n- 홈 컴포넌트인 home.component.ts를 생성하고 about 컴포넌트로 이동할 수 있는 링크를 추가하세요:\n\n```js\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'app-home',\n  template: `\n    <h1>홈 페이지에 오신 것을 환영합니다!</h1>\n    <a routerLink=\"/about\">회사 소개</a>\n  `\n})\nexport class HomeComponent { }\n```\n\n- 어바웃 컴포넌트인 about.component.ts를 생성하고 홈 컴포넌트로 돌아갈 수 있는 링크를 추가하세요:\n\n```js\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'app-about',\n  template: `\n    <h1>회사 소개</h1>\n    <p>우리는 멋진 소프트웨어를 만드는 회사입니다!</p>\n    <a routerLink=\"/\">홈으로 돌아가기</a>\n  `\n})\nexport class AboutComponent { }\n```\n\n<div class=\"content-ad\"></div>\n\n- app-routing.module.ts 파일에서 앱 라우팅을 설정하세요:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home.component';\nimport { AboutComponent } from './about.component';\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n- 앱 컴포넌트 템플릿에 router-outlet 지시자를 추가하세요:\n\n```html\n<router-outlet></router-outlet>\n```\n\n<div class=\"content-ad\"></div>\n\n앱을 실행하면 HomeComponent가 표시되어 AboutComponent로 이동할 수 있는 링크가 나타납니다. 링크를 클릭하면 AboutComponent로 이동하고, AboutComponent에는 HomeComponent로 돌아갈 수 있는 링크가 있습니다.\n\n템플릿에서 routerLink 지시문을 사용하여 링크를 클릭하여 다른 경로로 이동할 수 있습니다. AppRoutingModule의 RouterModule를 사용하면 앱의 경로를 정의하고 컴포넌트 뷰에 매핑할 수 있습니다. 앱 컴포넌트 템플릿의 router-outlet 지시문은 Angular에 현재 경로에 따라 컴포넌트 뷰를 렌더링할 위치를 알려줍니다.\n\n# 3. 제목\n\nAngular의 Title 서비스는 현재 HTML 문서의 제목을 동적으로 설정하는 방법을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n기본적으로 HTML 문서의 제목은 페이지의 head 섹션에서 `title` 태그를 사용하여 설정됩니다. Angular로 구축된 단일 페이지 애플리케이션(SPA)에서 사용자가 다른 뷰나 컴포넌트 간을 이동할 때 페이지의 제목을 동적으로 변경할 수 있습니다.\n\nTitle 서비스를 사용하면 Angular 컴포넌트에서 현재 HTML 문서의 제목을 동적으로 설정할 수 있습니다. Title 서비스를 컴포넌트에 주입하고, setTitle() 메서드를 호출하여 HTML 문서의 제목을 설정할 수 있습니다.\n\n- Angular CLI를 사용하여 새로운 Angular 서비스인 TitleService를 만드는 방법:\n\n```js\nng generate service TitleService\n```\n\n<div class=\"content-ad\"></div>\n\n- src/app 폴더에 생성된 title.service.ts 파일을 열어서 다음 코드를 추가해주세요:\n\n```js\nimport { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TitleService {\n  constructor(\n    private title: Title,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  setTitle() {\n    this.router.events\n      .pipe(\n        filter((event) => event instanceof NavigationEnd),\n        map(() => {\n          let route = this.activatedRoute;\n          while (route.firstChild) {\n            route = route.firstChild;\n          }\n          return route;\n        }),\n        filter((route) => route.outlet === 'primary'),\n        map((route) => {\n          const title = route.snapshot.data['title'];\n          if (title) {\n            return title;\n          }\n          return '내 앱 타이틀';\n        })\n      )\n      .subscribe((title) => this.title.setTitle(title));\n  }\n}\n```\n\n- 컴포넌트에서 TitleService를 import하고 setTitle() 메서드를 호출해주세요:\n\n```js\nimport { Component, OnInit } from '@angular/core';\nimport { TitleService } from './title.service';\n\n@Component({\n  selector: 'app-root',\n  template: `<router-outlet></router-outlet>`\n})\nexport class AppComponent implements OnInit {\n  constructor(private titleService: TitleService) {}\n\n  ngOnInit() {\n    this.titleService.setTitle();\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n- 라우트 파일에 다음과 같이 각 라우트에 title 속성을 갖는 데이터 객체를 추가해 주세요:\n\n```js\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home.component';\nimport { AboutComponent } from './about.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n    data: { title: '홈 페이지' }\n  },\n  {\n    path: 'about',\n    component: AboutComponent,\n    data: { title: '소개 페이지' }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\n이제 TitleService 인스턴스의 setTitle() 메서드가 호출되면 라우트 데이터를 기반으로 웹페이지의 타이틀이 동적으로 업데이트됩니다.\n\n이것은 내장 서비스 중 일부일뿐이며, Angular 공식 문서에서 더 많은 것을 배울 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 커스텀 서비스\n\nAngular에서는 커스텀 서비스를 만들어서 로직과 기능을 캡슐화하고 다양한 컴포넌트나 모듈 간에 공유할 수 있습니다. Angular에서 커스텀 서비스를 만드는 예제를 살펴보겠습니다:\n\n- 먼저, 프로젝트에서 새 파일을 만들어서 커스텀 서비스를 정의해야 합니다. 이 파일을 custom.service.ts라고 이름 짓겠습니다.\n- 이 파일에서 @angular/core 모듈에서 Injectable 데코레이터를 가져와야 합니다.\n\n```js\nimport { Injectable } from '@angular/core';\n```\n\n<div class=\"content-ad\"></div>\n\n3. 다음으로, 우리는 사용자 정의 서비스 클래스에 @Injectable 데코레이터를 추가해야 합니다. 이는 Angular에게 이 클래스가 종속성과 함께 주입될 수 있다는 것을 알려줍니다.\n\n```js\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomService {\n  constructor() { }\n  \n  // 여기에 사용자 정의 서비스 메서드 정의\n}\n```\n\n4. 이제 원하는 만큼 CustomService 클래스에 사용자 정의 메서드와 속성을 추가할 수 있습니다. 예를 들어, 인사 메시지를 반환하는 간단한 메서드를 만들어봅시다.\n\n```js\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomService {\n  constructor() { }\n  \n  sayHello(name: string): string {\n    return `안녕, ${name}!`;\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n5. 컴포넌트에서 사용자 정의 서비스를 사용하려면 해당 서비스를 컴포넌트의 생성자에 주입해야 합니다. MyComponent라는 새 컴포넌트를 생성하고 CustomService를 주입해 보겠습니다.\n\n```js\nimport { Component } from '@angular/core';\nimport { CustomService } from './custom.service';\n@Component({\n  selector: 'app-my-component',\n  template: '<p>{ message }</p>'\n})\nexport class MyComponent {\n  message: string;\n  constructor(private customService: CustomService) {\n    this.message = this.customService.sayHello('World');\n  }\n}\n```\n\n이 예시에서는 CustomService를 MyComponent 생성자에 주입하고 해당 서비스를 사용하여 컴포넌트의 메시지 속성을 설정했습니다. CustomService 클래스의 sayHello 메소드를 'World' 인자와 함께 호출하여 반환된 인사 메시지를 메시지 속성에 저장했습니다.\n\n이제 Angular 애플리케이션 전반에 걸쳐 사용할 수 있는 사용자 정의 서비스를 갖게 되었습니다.\n\n<div class=\"content-ad\"></div>\n\n# Angular에서 서비스의 중요성\n\n확장 가능하고 유지 보수가 쉬운 애플리케이션을 만들기 위해서는 최선의 방법을 따르고 올바른 아키텍처 패턴을 사용하는 것이 중요합니다. 서비스는 Angular 애플리케이션에서 중요한 역할을 합니다.\n\n- 코드 구성 — Angular 애플리케이션은 매우 크고 복잡해질 수 있으며, 모든 코드를 단일 구성 요소에서 관리하는 것이 어려울 수 있습니다. 서비스를 사용하여 관련 기능을 별도의 모듈로 구성할 수 있어 더 쉽게 관리하고 유지할 수 있습니다. 이는 코드 유지 관리성과 가독성을 개선하며 코드 중복 가능성을 줄입니다.\n- 재사용성 — 서비스는 여러 구성 요소에서 재사용할 수 있어 애플리케이션 내에서 코드 중복을 줄입니다. 이는 특정 기능을 수정해야 할 경우 해당 서비스를 한 곳에서 업데이트하면 해당 서비스를 사용하는 모든 구성 요소에 변경이 반영됩니다.\n- 의존성 주입 — Angular의 의존성 주입 시스템을 사용하여 서비스를 구성 요소에 주입할 수 있어 데이터 및 기능을 쉽게 공유할 수 있습니다. 이를 통해 느슨하게 결합된 구성 요소를 개발하기가 쉬워지며, 이는 테스트와 유지 보수가 쉬워집니다.\n- 관심사 분리 — 서비스를 사용하면 애플리케이션의 표현 계층과 비즈니스 로직을 분리할 수 있습니다. 비즈니스 로직을 별도의 서비스에 유지함으로써 표현 계층과 사용자 상호작용을 위해 책임을 지는 구성 요소를 개발하는 데 집중할 수 있습니다. 이러한 관심사 분리는 앞으로의 애플리케이션을 테스트, 유지 보수 및 수정하기 용이하게 만듭니다.\n- 코드 유지 보수성 — 서비스를 사용하여 향후 변경될 가능성이 높은 기능을 표현 계층에서 격리시킴으로써 미래에 코드를 유지 및 수정하는 것이 쉬워집니다. 이는 애플리케이션에서의 디버깅 및 문제 해결에 소요되는 시간을 줄일 수 있습니다.\n- 테스트 — 서비스는 쉽게 테스트할 수 있는 구조로 설계되어 있어 기능의 개별 요소를 테스트하고 예상대로 동작하는지 확인하기 쉽습니다. 비즈니스 로직을 서비스로 분리함으로써 해당 서비스에 대해 더 포괄적인 단위 테스트를 작성할 수 있어 애플리케이션에서 버그 발생 가능성을 줄일 수 있습니다.\n\n# Angular 서비스 사용시 최선의 방법\n\n<div class=\"content-ad\"></div>\n\nAngular 서비스는 응용 프로그램 전체에서 기능을 구성하고 공유하는 데 중요한 역할을 합니다. Angular에서 서비스를 최대한 활용하기 위해서는 최상의 관행을 따르는 것이 중요합니다. 이 글에서는 Angular 서비스 작업 시의 최상의 관행에 대해 알아보겠습니다.\n\n- 서비스를 한 가지 역할에 집중하세요\n\n서비스를 한 가지 역할에 집중하는 것이 중요합니다. 여러 역할을 갖는 서비스는 관리와 유지보수가 어려워질 수 있습니다. 이는 일반적으로 단일 책임 원칙(Single Responsibility Principle, SRP)이라고 알려져 있습니다. 서비스를 한 가지 역할에 집중시킴으로써 코드를 더 모듈식으로 만들고 테스트하기 쉽게 할 수 있습니다.\n\n- Injectable 데코레이터를 사용하세요\n\n<div class=\"content-ad\"></div>\n\nAngular에서 의존성 주입을 활성화하려면 서비스에 @Injectable 데코레이터가 있어야 합니다. 이 데코레이터는 Angular이 서비스에 의존성을 주입하는 데 사용하는 메타데이터를 제공합니다.\n\n```js\n@Injectable({\n  providedIn: 'root'\n})\nexport class MyService {\n  // 서비스 코드를 여기에 작성합니다\n}\n```\n\n@Injectable 데코레이터의 providedIn 속성은 Angular에 서비스를 루트 수준에서 제공하도록 지시합니다. 이는 서비스가 응용 프로그램 전체에서 사용 가능하다는 것을 의미합니다.\n\n- 서비스에서는 비공개 속성을 사용하세요\n\n<div class=\"content-ad\"></div>\n\n서비스에서 비공개 속성을 사용하는 것이 좋은 방법입니다. 비공개 속성은 서비스 외부에서 직접 액세스할 수 없기 때문에 서비스의 상태에 예기치 않은 변경을 방지하는 데 도움이 됩니다.\n\n```js\n@Injectable({\n  providedIn: 'root'\n})\nexport class MyService {\n  private myProperty: any;\n  \n  // 서비스 코드 작성\n}\n```\n\n- 의존성 주입에 생성자 인젝션 사용하기\n\n서비스에 의존성을 주입하려면 생성자 인젝션을 사용합니다. 이를 위해 생성자 매개변수에 의존성을 선언하고, Angular가 의존성 주입을 처리합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n@Injectable({\n  providedIn: 'root'\n})\nexport class MyService {\n  constructor(private httpClient: HttpClient) {\n    // Service code goes here\n  }\n}\n```\n\n- providers 배열에 서비스를 추가하는 대신 providedIn 속성을 사용하세요\n\nAngular의 이전 버전에서는 서비스가 NgModule의 providers 배열에 추가되었습니다. 그러나 Angular의 최신 버전에서는 @Injectable 데코레이터의 providedIn 속성을 대신 사용할 수 있습니다. 이는 트리 쉐이킹을 가능하게 하여 최종 애플리케이션 번들의 크기를 줄일 수 있는 더 나은 접근 방식입니다.\n\n- 컴포넌트 간에 통신하기 위해 서비스를 사용하세요\n\n\n<div class=\"content-ad\"></div>\n\n서비스는 컴포넌트 간에 통신하는 데 사용될 수 있으며 데이터 및 기능을 서로 공유할 수 있도록 합니다. 이것은 서로 직접적으로 관련이 없지만 서로 통신해아하는 컴포넌트들에게 특히 유용합니다.\n\n```js\n@Injectable({\n  providedIn: 'root'\n})\nexport class MyService {\n  private dataSubject = new BehaviorSubject<any>(null);\n  public data$ = this.dataSubject.asObservable();\n  \n  setData(data: any) {\n    this.dataSubject.next(data);\n  }\n}\n```\n\n이 예제에서는 BehaviorSubject를 사용하여 데이터를 서비스에 저장하고 있습니다. setData 메서드를 사용하여 데이터를 업데이트하고, data$ observable을 사용하여 데이터의 변경 사항을 구독할 수 있습니다.\n\n# 추가 학습 자료\n\n<div class=\"content-ad\"></div>\n\n추가 학습을 위한 다양한 자원이 많이 있어요. 아래는 Angular에 대한 깊은 이해를 돕는 데 도움이 되는 몇 가지 자원들이에요:\n\n- Angular 문서 — 공식 Angular 문서는 시작부터 고급 개념까지 모든 것을 다루는 종합적인 자원이에요. 튜토리얼, 안내서, API 참조 등이 포함돼 있어요. Angular에서 찾아볼 수 있어요.\n- Angular University — Angular University는 Angular을 포함한 온라인 강좌와 자원을 제공하는 교육 회사에요. Angular, RxJS 등 관련 기술에 대한 강좌를 제공하고 있어요. Angular University에서 찾아볼 수 있어요.\n- TekTutorialsHub — Tektutorialshub은 Angular을 비롯한 여러 기술에 대한 튜토리얼과 기사를 제공하는 웹사이트에요. Angular 튜토리얼에는 Angular 시작하기부터 반응형 폼, Angular material 등 고급 개념까지 다양한 주제가 포함돼 있어요. Angular 튜토리얼은 TekTutorialsHub에서 찾을 수 있어요.\n- TutorialsPoint — TutorialsPoint는 다양한 기술에 대한 광범위한 튜토리얼, 강좌 및 책을 제공하는 인기 있는 온라인 학습 플랫폼이에요. Angular 튜토리얼에는 Angular 기본 개념부터 Angular CLI, 반응형 폼, 단위 테스트 등의 고급 주제까지 다양한 주제가 포함돼 있어요. Angular 튜토리얼은 TutorialsPoint에서 찾을 수 있어요.\n- JavaTPoint — JavaTPoint는 Angular을 포함한 다양한 기술에 대한 튜토리얼과 강좌를 제공하는 온라인 학습 플랫폼이에요. Angular 튜토리얼에는 Angular 라우팅, 서비스, 애니메이션 등의 기본 개념부터 고급 주제까지 다양한 주제가 포함돼 있어요. Angular 튜토리얼은 JavaTPoint에서 찾을 수 있어요.\n\n이것들은 Angular에서 추가 학습을 위한 몇 가지 자원일 뿐이에요. 프레임워크를 계속 다루면서 더 많은 자원을 발견할 가능성이 높아요. 중요한 것은 호기심을 갖고, 계속 배우고, Angular 커뮤니티의 최신 트렌드와 모베스트 프랙티스를 따라가는 것이에요.\n\n여기까지 읽어주셔서 정말 감사드려요! 이 기사를 끝까지 읽어보시고 도움이 되셨기를 바래요. 저는 Medium, Twitter, Linkedin 및 Facebook에서도 저를 팔로우하실 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n질문이 있으면 언제든지 물어보세요.\n\n커피 사주시면 감사하겠어요.\n\n더 많은 재미있는 프로그래밍 코드 조각을 기대해 주세요.","ogImage":{"url":"/assets/img/2024-06-20-ServicesinAngular_0.png"},"coverImage":"/assets/img/2024-06-20-ServicesinAngular_0.png","tag":["Tech"],"readingTime":19},{"title":"앵귤러와 고랭 빠른 안내 - 고급","description":"","date":"2024-06-20 02:57","slug":"2024-06-20-AngularandGolangARapidGuideAdvanced","content":"\n\n![Angular and Golang Course](/assets/img/2024-06-20-AngularandGolangARapidGuideAdvanced_0.png)\n\nAngular와 Golang을 활용하여 Ambassador 앱을 개발하는 과정을 이 포괄적인 코스를 통해 경험해보세요. Admin, Ambassador, 그리고 Checkout과 같이 세 가지 다른 프론트엔드 애플리케이션을 구축하는 방법에 대한 통찰을 얻을 수 있습니다. 각각이 견고한 Golang API를 효율적으로 사용할 수 있도록 설계된 애플리케이션이에요. 이 코스는 10년 이상의 산업 경험을 자랑하는 숙련된 FullStack 개발자가 선별했으며, 학습 여정 전반에 걸쳐 원활하고 고품질의 코드를 유지하는 데 강한 강조가 되어 있습니다.\n\n저의 가르침 스타일은 매우 직관적이며, 제 강의를 길게 만들기 위해 불필요한 정보들을 설명하거나 시간을 낭비하지 않을 거에요. 빠르게 배우고 싶다면 이 코스가 딱 맞을 거예요.\n\nGo에서는 아래 내용을 배울 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n- Docker 사용\n- express.js에서 영감을 받은 Fiber 프레임워크 사용\n- 공개 및 보안 라우트 만들기\n- MySQL과 연결\n- 마이그레이션 실행\n- Jwt 토큰 생성\n- HttpOnly 쿠키 사용\n- 스코프로 로그인\n- Goroutine 사용\n- 채널 사용\n- Redis와 함께 Golang 사용\n- Stripe 사용\n- 이메일 전송\n- 캐시된 제품 필터링\n\nAngular에서는 다음을 배울 수 있습니다:\n\n- Angular CLI\n- 인터셉터 사용\n- 공개 및 비공개 라우트 만들기\n- 반응형 폼 사용\n- Angular Material\n- Angular Universal을 사용한 서버 측 렌더링\n- 이벤트 에미터 사용\n- TypeScript 사용\n\n지금 시청하세요!","ogImage":{"url":"/assets/img/2024-06-20-AngularandGolangARapidGuideAdvanced_0.png"},"coverImage":"/assets/img/2024-06-20-AngularandGolangARapidGuideAdvanced_0.png","tag":["Tech"],"readingTime":1},{"title":"각진 노하우 프로젝트 구조와 조직에 대한 팁","description":"","date":"2024-06-20 02:55","slug":"2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization","content":"\n\n새로운 프로젝트를 처음부터 구축하기 시작할 때 첫 번째 질문은 무엇이 좋은 프로젝트 아키텍처여야 하는가인데요. 어떤 기술 스택을 사용하든, 우리는 프로젝트 아키텍처가 새로운 애플리케이션을 구축하는 과정에서의 건축 기본 요소임을 알고 있습니다.\n\n모든 프로젝트와 사용 사례에 가장 적합한 아키텍처를 찾는 것은 거의 불가능하지만, 확장 가능한 구조를 찾아야 합니다. 본 글은 확장 가능하고 유지보수가 용이한 Angular 프로젝트 구조에 대한 상세한 정보를 제공합니다.\n\n![AngularBestPractices](/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_0.png)\n\n# 전체 프로젝트 구조\n\n<div class=\"content-ad\"></div>\n\n기본적으로 좋은 프로젝트 아키텍처는 애플리케이션의 성능을 향상시키지 않거나 더 빠르게 또는 더 잘 실행되지 않습니다. 그러나 Angular 아키텍처의 최상의 실천 방법을 활용하면 소스 파일로 신속하게 이동하고 모든 것이 어디에 보관되는지 이해할 수 있습니다. 그럼으로써 쉬운 디버깅을 실현하고 개발자나 신입사원들이 파일을 찾으려고 여기저기 배회하는 노력을 최소화하는 데 도움이 됩니다.\n\nAngular 프로젝트 구조의 최상의 실천 방법으로 Angular 팀이 소개하는 LIFT 원칙은 다음과 같습니다:\n\n- 코드 신속하게 찾기 — 관련 파일을 쉽게 찾을 수 있는 그룹에 유지합니다.\n- 한눈에 코드 식별하기 — 파일명을 사용하여 즉시 해당 내용과 표현물을 알 수 있도록 합니다.\n- 평평한 폴더 구조 — 가능한 한 평면 폴더 구조를 유지하여 모든 것을 하나의 차원에 제공합니다.\n- DRY 하게 유지하기 — DRY(Don’t Repeat Yourself)를 따르지만 가독성을 희생하지 않는 한도 내에서 DRY해야 합니다.\n\n초보 Angular 구조는 Angular CLI 명령을 사용하여 작성된 것처럼 보입니다.\n\n<div class=\"content-ad\"></div>\n\n![image](/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_1.png)\n\n## 전체 프로젝트 구조를 이해해봅시다. 일반적으로 워크스페이스 구성 파일, 애플리케이션 프로젝트 파일 및 소스 파일이 포함됩니다.\n\n.vscode — 이 폴더는 코드베이스가 VS Code 편집기에서 열릴 때 Visual Studio Code에 의해 생성 및 e2e로 대체되었습니다. 프로젝트 워크스페이스 설정을 보관합니다.\n\nnode_modules/ — 전체 워크스페이스에 npm 패키지를 제공합니다. 이 폴더를 열어서 사용 가능한 패키지를 볼 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n**Src/** - 애플리케이션의 모든 코드를 포함합니다.\n\n**.editorconfig** - 코드 편집기 설정을 보유합니다.\n\n**.gitignore** - Git이 무시해야 하는 의도적으로 추적되지 않은 파일을 지정합니다.\n\n**angular.json** - Angular 앱 구성을 보유합니다.\n\n<div class=\"content-ad\"></div>\n\npackage-lock.json은 설치된 각 종속성의 정확한 버전을 기록합니다. 그에 포함된 하위 종속성과 그들의 버전도 함께 포함됩니다.\n\npackage.json에는 프로젝트에 관한 설명적이고 기능적인 메타데이터가 포함되어 있습니다. 프로젝트의 이름, 버전 및 종속성 등이 포함됩니다.\n\nREADME.md는 애플리케이션에 대한 문서화를 위한 Markdown 파일입니다.\n\ntsconfig.app.json은 애플리케이션 기준으로 구성을 조정할 수 있는 추가적인 설정 파일입니다. Angular CLI 워크스페이스에 여러 애플리케이션이 있는 경우 유용합니다.\n\n<div class=\"content-ad\"></div>\n\ntsconfig.json은 TypeScript 구성을 포함하는 일반 파일입니다. 여러 개의 Angular 하위 프로젝트가 있는 경우, 각각의 tsconfig.app.json 구성을 가지고 있어 유용합니다.\n\ntsconfig.spec.json은 애플리케이션 테스트를 위한 TypeScript 구성을 보관합니다.\n\n# 디렉토리 구조\n\n디렉토리 구조, 각 디렉토리의 필요성 및 사용에 대해 자세히 알아봅시다. 파일을 기능 및 목적에 따라 디렉토리 구조를 활용하여 조직화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## node_modules\n\n`node_modules`는 빌드 도구를 위한 디렉토리입니다. 앱 내 `package.json` 파일은 `npm install`을 실행할 때 `node_modules`에 설치될 라이브러리를 정의합니다. 타사 패키지를 설치할 때마다 `node_modules` 디렉토리에 그들의 폴더가 저장됩니다.\n\n참고: 앱을 프로덕션 서버로 배포하거나 git 저장소에 커밋할 때 `node_modules`는 제외해야 합니다. 프로젝트를 다른 위치로 이전할 때도 이 폴더는 포함해서는 안 되며, 대신 `npm`을 실행하여 `node_modules`를 생성해야 합니다.\n\n## SRC\n\n<div class=\"content-ad\"></div>\n\n어플리케이션의 모든 소스 코드를 넣어야 하는 곳입니다. Angular 애플리케이션을 생성하면 기본적으로 angular CLI가 src 디렉토리에 여러 파일과 디렉토리를 생성합니다. 또한 각 모듈, 컴포넌트, 서비스 및 관련 소스 코드를 src 디렉토리에 넣어야 합니다.\n\n![Angular Best Practices](/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_2.png)\n\n## App\n\napp 디렉토리는 루트 애플리케이션 폴더로 작동하며 앱 모듈 역할을 합니다. 앱 모듈 또한 src 디렉토리 내에 위치합니다. Angular 애플리케이션은 적어도 하나의 컴포넌트와 모듈이 있어야 하며 기본적으로 앱 모듈입니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_3.png\" />\n\n앱 모듈에는 모듈 파일 (app.module.ts), 라우팅 파일 (app-routing.module.ts) 및 컴포넌트 (app.component.ts)이 포함되어 있습니다.\n\napp.module.ts — 이 파일은 Angular에 다른 특정 Angular 모듈에 대해 알려줍니다. 이 파일에는 Imports, Declarations, Providers, Bootstraps 및 기타 구성 옵션이 포함됩니다. Imports 섹션에서 다른 모듈을 가져와서 Declarations 섹션에 컴포넌트를 선언하고 Providers 섹션에 서비스를 제공합니다.\n\napp-routing.module.ts — 라우팅을 위해 라우트 목록과 해당 컴포넌트를 선언합니다.\n\n<div class=\"content-ad\"></div>\n\n다음 섹션에서는 남은 구성 파일에 대해 이야기할 예정입니다.\n\n자산\n\n자산 파일에는 애플리케이션에 필요한 정적 데이터가 저장됩니다. 예를 들어 이미지, 아이콘 등이 있습니다.\n\n`<img src=\"/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_4.png\" />`\n\n<div class=\"content-ad\"></div>\n\n환경\n\n여러 환경을 설정하기 위해 이 디렉토리를 생성해야 합니다. 여기에 환경 파일을 추가하여 환경별 설정을 저장할 수 있습니다. 예를 들어:\n\n![environment](/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_5.png)\n\n운영 환경용 environment.prod.ts 파일을 만들어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n개발 환경을 위한 설정\n\n스타일\n공유 CSS 파일을 styles 디렉토리에 넣는 것이 좋은 아이디어입니다. 전체 애플리케이션에서 사용할 사용자 정의 CSS 파일(예: 색 변수 파일, 공유 타이포그래피 등)을 추가해야 합니다.\n\n![이미지](/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_6.png)\n\n# 모듈 구성\n\n<div class=\"content-ad\"></div>\n\nAngular Module은 관련 기능을 그룹화하고 정리하는 개념입니다. 각 Module은 독립적이고 분리된 기능을 나타냅니다. Angular 애플리케이션의 초기 기본은 app module이라고 하는 단일 모듈만 있습니다. 이는 작은 애플리케이션의 경우에 효과적입니다. Angular Modules를 사용하면 디렉터리 구조를 효과적으로 구성할 수 있는 훌륭한 시작점을 제공받을 수 있습니다.\n\n우리는 Angular Module의 모베스트를 따라 잘 정리된 애플리케이션을 만들 수 있습니다. 좋은 실천으로 코드를 모듈로 묶고, 모듈을 최대한 활용하기 위해 아래와 같이 네 가지 카테고리로 모듈을 지정합니다.\n\n- App Module\n- Core Module\n- Features Module\n- Shared Module\n\n## App Module\n\n<div class=\"content-ad\"></div>\n\n앵귤러 CLI에 의해 생성된 루트 모듈인 앱 모듈은 애플리케이션의 진입점입니다. 애플리케이션이 시작될 때 앱 모듈이 로드되며, 모든 다른 모듈도 함께 로드됩니다. 애플리케이션이 성장함에 따라 루트 모듈을 발전시킵니다. 앱 모듈에는 코어, 기능 및 공유 모듈이 모두 포함되어 있습니다.\n\n![image](/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_7.png)\n\n## 코어 모듈\n\n애플리케이션 전반에 걸쳐 전역적으로 공유되는 코어 기능, 서비스 및 모델은 기능 모듈과 관련이 없는 경우 코어 모듈의 일부여야 합니다.\n\n<div class=\"content-ad\"></div>\n\n싱글톤 서비스는 애플리케이션 당 하나의 인스턴스만 가져야 하므로 여기에 구현되어야 합니다. 이 모듈에는 인증 서비스 및 헤더, 푸터, 네비게이션 바, 사이드바, 인터셉터, 가드, 상수, 열거형, 유틸리티 및 범용 모델과 같은 정적 구성 요소가 포함되어 있습니다.\n\n앱 루트 모듈에서는 핵심 모듈만 가져와야 합니다. 다른 모듈은 핵심 모듈을 가져오면 안 됩니다.\n\n## 공유 모듈\n\n여러 모듈 간에 공유되는 구성 요소, 지시문 및 파이프는 공유 모듈에 유지해야 합니다. 예를 들어, 검색 및 로더는 여러 기능에서 사용될 수 있습니다. 공유 모듈에 저장된 항목은 다른 기능 모듈에 선언된 구성 요소에 의해 재사용 및 참조됩니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Shared Module](/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_8.png)\n\n큰 애플리케이션 작업 시 공유 모듈이 더 유용합니다. 이는 애플리케이션의 번들 크기와 초기 빌드 시간을 줄이고 성능을 향상하기 위해 애플리케이션의 지연 로딩을 고려할 때 더 유용합니다. 공유 모듈은 애플리케이션의 다른 모듈에 의존해서는 안 됩니다.\n\n참고: 여기서 서비스를 정의해서는 안 됩니다. 공유 모듈은 어디서든 가져오기(import) 때문에 지연 로딩된 모듈에서 가져오면 서비스의 새 인스턴스가 생성될 수 있습니다.\n\n## 기능 모듈\n\n\n<div class=\"content-ad\"></div>\n\n우리는 응용 프로그램 요구 사항을 분리하고 응용 프로그램을 기능으로 분해해서 Feature Based Architectures로 불리는 것에 대해 이야기했어요. 우리는 src/app/features/ 모듈 아래 각 기능에 대한 별도 서브 모듈을 만들어야 해요. 이렇게 하면 코드가 독립적이고, 특정 기능에 중점을 둔 단일 책임을 갖게 됩니다.\n\n![Angular Best Practices Tips for Project Structure and Organization](/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_9.png)\n\n의료 응용 프로그램을 구축한다고 가정해 봅시다. 우리는 예약, 처방, 환자, 결제 등을 위한 기능을 가져야 해요.\n\n## Feature Based Architecture\n\n<div class=\"content-ad\"></div>\n\n각 모듈은 모듈 이름 또는 기능을 따라 폴더 이름을 지정해야 합니다. 각 모듈에는 해당 모듈에서 필요로 하는 컴포넌트, 디렉티브, 파이프, 페이지, 다이얼로그, 및 서비스가 있으며, Redux 패턴을 사용하는 경우 각각을 블록으로 작성합니다.\n\n이러한 방식으로 코드를 구조화하면 특정 요소를 쉽게 찾을 수 있고 코드의 재사용성이 증가합니다. 모듈은 코드를 구성하고 분리하는 방법입니다. 여러 모듈을 가질 수 있으며 일부 모듈은 지연로드할 수 있습니다.\n\n![Angular Best Practices](/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_10.png)\n\n# 컴포넌트 구조\n\n<div class=\"content-ad\"></div>\n\nAngular 어플리케이션을 만드는 데 구성 요소는 필수적입니다. 이들은 거대한 애플리케이션을 사용자 뷰를 정의하는 코드 조각들로 나눕니다. 구성 요소는 더 모듈화되고 유지보수하기 쉬운 어플리케이션을 만듭니다. 재사용 가능하고...자세히 알아보려면 여기를 클릭하세요","ogImage":{"url":"/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_0.png"},"coverImage":"/assets/img/2024-06-20-AngularBestPracticesTipsforProjectStructureandOrganization_0.png","tag":["Tech"],"readingTime":7},{"title":"새로운 Angular 프로젝트 생성 및 샘플 폼 디자인하기","description":"","date":"2024-06-20 02:54","slug":"2024-06-20-CreatingaNewAngularProjectandDesigningaSampleForm","content":"\n\n![image](/assets/img/2024-06-20-CreatingaNewAngularProjectandDesigningaSampleForm_0.png)\n\nAngular은 동적 웹 애플리케이션을 구축하기 위한 강력한 프레임워크입니다. 새 프로젝트를 시작하거나 복잡한 폼을 디자인하더라도, Angular은 개발을 간소화하는 강력한 도구와 기능을 제공합니다. 본 문서에서는 새 Angular 프로젝트를 생성하고 샘플 폼을 디자인하는 방법을 안내해 드립니다.\n\n# 1. Angular CLI 설치\n\nAngular CLI (Command Line Interface)는 Angular 프로젝트를 관리하는 강력한 도구입니다. Angular CLI를 설치하려면 다음 명령어를 실행하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install -g @angular/cli\n```\n\n# 2. 새로운 Angular 프로젝트 생성하기\n\nCLI를 사용하여 새로운 Angular 프로젝트를 만들어보세요. 이 작업은 프로젝트 구조와 구성 파일을 자동으로 설정해줍니다.\n\n```js\nng new my-angular-app\ncd my-angular-app\nng serve\n```\n\n<div class=\"content-ad\"></div>\n\n다음 명령 시퀀스를 사용하세요:\n\n1. 새 Angular 프로젝트를 'my-angular-app'이라는 이름으로 초기화합니다.\n2. 프로젝트 디렉토리로 이동합니다.\n3. 개발 서버를 시작하여 애플리케이션을 http://localhost:4200에서 접근할 수 있도록 합니다.\n\n## 3. 새 컴포넌트 생성\n\n새로운 폼을 처리할 컴포넌트를 생성합니다. 컴포넌트는 Angular 애플리케이션의 구성 요소입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nng generate component sample-form\n```\n\n이 명령어는 필요한 파일(HTML, CSS, TypeScript 및 테스트를 위한 spec)과 함께 새 컴포넌트를 생성합니다.\n\n# 4. 샘플 폼 디자인하기\n\n생성된 컴포넌트의 HTML 파일을 열고 Angular의 폼 지시문을 사용하여 폼을 만드세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n# sample-form.component.html #\n<div class=\"container\">\n  <h2>샘플 양식</h2>\n  <form (ngSubmit)=\"onSubmit()\" #form=\"ngForm\">\n    <div class=\"form-group\">\n      <label for=\"name\">이름:</label>\n      <input type=\"text\" id=\"name\" class=\"form-control\" required [(ngModel)]=\"model.name\" name=\"name\" #name=\"ngModel\">\n      <div *ngIf=\"name.invalid && name.touched\" class=\"alert alert-danger\">\n        이름을 입력해주세요.\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"email\">이메일:</label>\n      <input type=\"email\" id=\"email\" class=\"form-control\" required [(ngModel)]=\"model.email\" name=\"email\" #email=\"ngModel\">\n      <div *ngIf=\"email.invalid && email.touched\" class=\"alert alert-danger\">\n        유효한 이메일을 입력해주세요.\n      </div>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">제출</button>\n  </form>\n</div>\n```\n\n이 예제에서:\n\n- 이름과 이메일에 대한 두 개의 입력 필드가 만들어졌습니다. 둘 다 필수 입력 항목입니다.\n- Angular의 ngModel 지시문을 통해 양방향 데이터 바인딩이 이루어졌습니다.\n- 필드가 유효하지 않거나 사용자가 터치한 경우 유효성 검사 메시지가 표시됩니다.\n- 제출 버튼을 클릭하면 onSubmit 메서드를 통해 양식이 제출됩니다.\n\n# 5. 양식 제출 처리하기 #\n\n\n<div class=\"content-ad\"></div>\n\n```js\n// sample-form.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-sample-form',\n  templateUrl: './sample-form.component.html',\n  styleUrls: ['./sample-form.component.css']\n})\nexport class SampleFormComponent {\n  model: any = {};\n\n  onSubmit() {\n    console.log('Form submitted!', this.model);\n  }\n}\n```\n\n여기 예제에서:\n\n- 모델 객체가 정의되어서 폼 데이터를 저장합니다.\n- `onSubmit` 메서드는 폼 제출 시 콘솔에 폼 데이터를 기록합니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\nAngular CLI와 폼 디렉티브를 사용하여 새 Angular 프로젝트를 생성하고 폼을 디자인하는 것은 간단합니다. Angular는 폼 처리와 유효성 검사에 강력한 도구를 제공하여 동적이고 반응적인 웹 애플리케이션을 구축하기 쉽게 만듭니다. 이러한 단계를 따라하면 빠르게 새 Angular 프로젝트를 설정하고 쉽게 복잡한 폼을 디자인할 수 있습니다.\n\n독자 여러분, 읽어주셔서 감사합니다! 궁금한 점, 생각 또는 피드백이 있으시면 아래 댓글을 남겨주시기 바랍니다. 여러분의 참여와 지원은 웹 개발에서 Angular의 가능성을 계속 탐구하는 데 큰 도움이 됩니다.","ogImage":{"url":"/assets/img/2024-06-20-CreatingaNewAngularProjectandDesigningaSampleForm_0.png"},"coverImage":"/assets/img/2024-06-20-CreatingaNewAngularProjectandDesigningaSampleForm_0.png","tag":["Tech"],"readingTime":4},{"title":"Angular 파일 다운로드 및 다운로드 추적을 위한 프로그레스 바 구현하기","description":"","date":"2024-06-20 02:53","slug":"2024-06-20-AngularDownloadingfilesandimplementingaprogressbarfortrackingthedownload","content":"\n\n이 이야기는 몇 년 전에 썼던 것과 매우 비슷한 내용입니다. 그 이야기는 여러 파일을 업로드하는 진행 막대를 구현하는 것과 관련이 있었습니다. 각 파일의 업로드를 추적하는 데 사용되는 진행 막대가 1개 있었습니다.\n\n이 이야기에서는 Node Express 서버에서 5000개의 객체를 포함하는 photos.json 파일을 다운로드합니다.\n\n![이미지](/assets/img/2024-06-20-AngularDownloadingfilesandimplementingaprogressbarfortrackingthedownload_0.png)\n\n아래는 애플리케이션의 간단한 데모입니다. Chrome 개발 도구를 사용하여 느린 3G 연결을 시뮬레이션하여 파일 다운로드가 천천히 진행되는 것을 볼 수 있습니다. 나중에는 추가적인 npm 모듈을 설치하지 않고 시스템에 파일을 다운로드하는 코드 작성 방법을 안내하겠습니다.\n\n<div class=\"content-ad\"></div>\n\nNode Server 프로젝트\n\n![이미지](/assets/img/2024-06-20-AngularDownloadingfilesandimplementingaprogressbarfortrackingthedownload_1.png)\n\nindex.js\n\n위 파일에 설정된 \"Content-Length\" 응답 헤더에 유의해주세요. 이 헤더는 프로그레스 바를 구현하는 중요한 단계입니다. 이 헤더는 Angular 애플리케이션에게 받을 데이터의 총 크기를 알려줌으로써 프로그레스 바를 구현하는 데 도움이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n\"Content-Disposition\" 응답 헤더는 콘텐츠가 브라우저에서 인라인으로 표시되는지(Web 페이지 또는 웹 페이지의 일부로) 아니면 첨부 파일로 다운로드되어 로컬에 저장되는지를 나타내는 헤더입니다.\n\n우리는 콘텐츠가 \"photos.json\"이라는 파일로 다운로드되기를 원합니다.\n\nAngular 프로젝트\n\nAngular 프로젝트에는 AppComponent와 ProgressComponent 두 개의 컴포넌트가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n우리는 데이터를 가져오기 위해 노드 서버와 연결하는 FileDownloadService라는 단일 서비스를 가지고 있습니다.\n\nAppComponent 템플릿\n\n`app-progress`는 ProgressComponent를 위한 셀렉터입니다. 이미지 업로드 진행률을 @Input('ratio')로 ProgressComponent에 전달하고 있습니다. 업로드 진행률은 downloadprogressRatio$ observable을 구독하여 async 파이프를 통해 @Input('ratio')로 전달됩니다.\n\n```js\n<h4>Downloading</h4>\n<app-progress [ratio]=”downloadprogressRatio$|async”></app-progress>\n<button (click)=”download()”>Download JSON</button>\n```\n\n<div class=\"content-ad\"></div>\n\n“Download JSON” 버튼을 클릭하면, 해당 클래스에서 download()을 호출하게 됩니다.\n\nAppComponent 클래스\n\n- downloadProgressRatio$는 observable입니다. 우리는 FileDownloadService에서 반환된 getDownloadingProgress()의 observable을 downloadProgressRatio$ observable에 할당합니다. 이 observable은 템플릿에서 async 파이프를 통해 구독됩니다.\n\n```js\n<app-progress [ratio]=”downloadprogressRatio$|async”></app-progress>\n```\n\n<div class=\"content-ad\"></div>\n\n2. 템플릿의 \"다운로드\" 버튼을 클릭하면, 해당 클래스의 download()이 호출되며, 이 메서드는 FileDownloadService의 downloadJson()을 호출합니다.\n\nFileDownloadService\n\n- downloadingProgressSub는 각 파일의 다운로드 진행 상황을 컴포넌트에 실시간 업데이트해 주는 중요한 역할을 하는 Subject입니다.\n- 이미 클래스의 ngOnInit()에서 getDownloadingProgress()가 호출되었음을 확인했습니다. 이 메서드는 해당 Subject에 대한 Observable을 반환하는 역할을 합니다.\n\n```js\ngetDownloadingProgress(){\n    return this.downloadingProgressSub.asObservable();\n}\n```\n\n<div class=\"content-ad\"></div>\n\n3. \"Download JSON\" 버튼을 클릭하면 downloadJson() 함수가 호출됩니다. 우리는 Node 서버에서 photos.json을 가져오기 위해 GET 요청을 보냅니다.\n\n```js\ndownloadJson()\n{\nreturn this.http.get(`${environment.baseUrl}photos`,{reportProgress:true,observe:'events'}).pipe(\n  tap((response:any)=>{\n    if(response.type==HttpEventType.DownloadProgress){ //3\n      this.setDownloadingProgress(response.loaded/response.total);\n    }\n    else if(response.type === HttpEventType.Response){\n      let blob = new Blob([JSON.stringify(response.body)]);\n      this.downloadBlob(response,blob);\n    }\n  }),\n  catchError(err=>{\n    return throwError(err)\n  })\n)\n}\n```\n\n4. HTTP GET 요청에 전달되는 추가 옵션을 관찰해주세요.\n\n```js\nthis.http.get(`${environment.baseUrl}photos`,{reportProgress:true,observe:’events’})\n```\n\n<div class=\"content-ad\"></div>\n\n파일 다운로드 진행 상황에 대한 피드백을 제공하여 사용자들에게 더 나은 경험을 제공하고 있습니다. 우리는 진행 상황 추적을 가능하게 하기 위해 reportProgress를 true로 설정했습니다.\n\nobserve 값은 관찰하고자 하는 내용에 따라 반환 유형을 결정합니다. \"events\"의 observe 값은 기본적으로 진행 상황 이벤트를 포함한 HttpEvent 스트림의 observable을 반환합니다.\n\n5. 서버로부터 데이터를 받기 때문에, HttpEvent의 유형은 DownloadProgress(UploadProgress가 아님)일 것입니다.\n\n```js\nif(event.type==HttpEventType.DownloadProgress){ //3\nthis.setDownloadingProgress(event.loaded/event.total);\n}\n```\n\n<div class=\"content-ad\"></div>\n\nevent.load은 로드된 파일의 바이트 수입니다.\n\nevent.total은 로드해야하는 전체 바이트 수입니다.\n\nevent.load/event.total은 업로드 중인 파일의 진행률을 나타냅니다.\n\n저희는 setDownloadingProgress()를 호출하여 진행률을 인수로 전달합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nsetDownloadingProgress(data: any) {\n    this.downloadingProgressSub.next(data);\n}\n```\n\nsetDownloadingProgress() 메서드에서는 진행률 비율을 downloadingProgressSub Subject로 전달하고 있습니다.\n\nAppComponent 템플릿에서 이 Subject에 async pipe를 통해 구독하고 있다는 것을 기억하시나요?\n\n6. Node 서버로부터 본문을 포함한 전체 응답을 받으면, HttpEvent는 Response 유형이 됩니다. 그런 다음 응답 본문에서 Blob 객체를 생성하고 이 blob 객체 및 HttpResponse를 downloadBlob() 메서드에 인수로 전달합니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nelse if(response.type === HttpEventType.Response){\nlet blob = new Blob([JSON.stringify(response.body)]);\nthis.downloadBlob(response, blob);\n}\n```\n\n7. Inside the `downloadBlob()`, we have written a common logic to perform automatic download of file received.\n\n```js\ndownloadBlob(response: any, blob: Blob){\n\nlet substringA = response.headers.get('content-disposition').substring(response.headers.get('content-disposition').indexOf(\";\") + 1);\nlet filename = substringA.substring(substringA.indexOf(\"=\") + 1).replace(/[\"\"]/g, \"\");\nlet link = document.createElement('a');\nlink.download = filename;\nlink.href = URL.createObjectURL(blob);\nlink.click();\n}\n```\n\nWe are first extracting the filename from the Content-Disposition response header.\n\n<div class=\"content-ad\"></div>\n\n```js\nlet substringA=response.headers.get('content-disposition').substring(response.headers.get('content-disposition').indexOf(\";\")+1);\nlet filename= substringA.substring(substringA.indexOf(\"=\")+1).replace(/[“”]+/g,\"\");\n```\n\n이것이 Content-Disposition 헤더가 보이는 모습입니다.\n\n다음으로 앵커 요소인 `a`를 생성하고 요소의 다운로드 및 href 속성을 설정합니다. 다운로드 속성은 파일 이름으로 설정됩니다. href 속성은 Blob 객체에 대해 생성된 객체 URL로 설정됩니다. Blob는 createObjectURL()을 사용하여 내용을 보여주기 위해 `a`, `img` 또는 다른 태그를 사용할 수 있습니다.\n\n```js\nlet link = document.createElement('a');\nlink.download = filename;\nlink.href = URL.createObjectURL(blob);\n```\n\n<div class=\"content-ad\"></div>\n\n마지막으로 앵커 요소를 프로그래밍 방식으로 클릭하여 다운로드가 자동으로 시작되도록 합니다. 우리는 앵커 요소를 DOM에 첨부하고 싶지 않습니다.\n\n```js\nlink.click();\n```\n\nProgressComponent 템플릿\n\n```js\n<div class=”container pending”>\n<div class=”progress-container” [ngClass]=”ratio === 1 ? ‘complete’ : ‘pending’”>\n<div [ngStyle]=”{width:progress}”>\n</div>\n<div class=”progress-message”>{progress}</div>\n</div>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n\"complete\" 및 \"pending\" CSS 클래스는 아래와 같이 정의되어 있습니다:\n\n```js\n.complete {\n  background-color: lightgreen;\n}\n.pending {\n  background-color: rgb(243, 111, 111);\n}\n```\n\nProgressComponent 클래스\n\n이 클래스는 AppComponent로부터 속성 바인딩을 통해 @Input('ratio')를 수신합니다. 우리는 이 비율에 100을 곱하여 백분율을 얻은 다음 가장 가까운 정수로 반올림합니다. 이 백분율을 사용하여 진행 막대의 너비를 조정합니다.\n\n<div class=\"content-ad\"></div>\n\n아래는 앵귤러 및 노드 프로젝트의 git 저장소입니다.\n\n# Stackademic 🎓\n\n끝까지 읽어주셔서 감사합니다. 떠나기 전에:\n\n- 작가를 클릭하고 팔로우해주시면 감사하겠습니다! 👏\n- 우리를 팔로우하세요 X | LinkedIn | YouTube | Discord\n- 다른 플랫폼에서도 방문해주세요: In Plain English | CoFeed | Differ\n- Stackademic.com에서 더 많은 콘텐츠를 확인할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-20-AngularDownloadingfilesandimplementingaprogressbarfortrackingthedownload_0.png"},"coverImage":"/assets/img/2024-06-20-AngularDownloadingfilesandimplementingaprogressbarfortrackingthedownload_0.png","tag":["Tech"],"readingTime":7}],"page":"44","totalPageCount":156,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":2},"__N_SSG":true}