{"pageProps":{"posts":[{"title":"JavaScript로 드래그 앤 드롭 기능 만들기(코드 있음)","description":"","date":"2024-05-17 21:32","slug":"2024-05-17-HowtoCreateDragandDropFunctionalityinJavaScriptAStep-by-StepTutorial","content":"\n\n<img src=\"/assets/img/2024-05-17-HowtoCreateDragandDropFunctionalityinJavaScriptAStep-by-StepTutorial_0.png\" />\n\n현대 웹 개발에서 드래그 앤 드롭 기능은 사용자가 직관적인 방식으로 요소들과 상호 작용할 수 있도록 하여 사용자 경험을 향상시킵니다. JavaScript로 드래그 앤 드롭 기능을 구현하는 것은 처음에는 어려울 수 있지만, 올바른 방법으로 접근하면 효율적으로 해낼 수 있습니다. 이 튜토리얼에서는 JavaScript로 드래그 앤 드롭 기능을 만드는 단계를 안내하여, 웹 애플리케이션에 이 기능을 통합할 수 있도록 도와드리겠습니다.\n\n이 튜토리얼을 마치면 JavaScript를 사용하여 웹 애플리케이션에서 드래그 앤 드롭 기능을 구현하는 방법을 익힐 수 있을 것입니다.\n\n# 단계 1: HTML 구조 설정\n\n<div class=\"content-ad\"></div>\n\n먼저, 드래그할 수 있고 놓을 수 있는 요소에 대한 HTML 구조를 만듭니다.\n\n```js\n<div id=\"draggableElement\" draggable=\"true\">Drag Me</div>\n<div id=\"droppableArea\">Drop Here</div>\n```\n\n# 단계 2: JavaScript 이벤트 핸들러 정의\n\n다음으로, 드래그 앤 드롭 이벤트를 처리할 이벤트 핸들러를 정의하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n// 드래그 가능한 요소와 드롭 영역에 대한 참조 획득\nconst draggableElement = document.getElementById('draggableElement');\nconst droppableArea = document.getElementById('droppableArea');\n\n// 드래그 시작시 이벤트 핸들러\ndraggableElement.addEventListener('dragstart', (event) => {\n  // 드래그 작업 중 전송할 데이터 설정\n  event.dataTransfer.setData('text/plain', event.target.id);\n});\n\n// 드롭 발생시 이벤트 핸들러\ndroppableArea.addEventListener('drop', (event) => {\n  // 드롭을 허용하기 위해 기본 동작 방지\n  event.preventDefault();\n  \n  // 드래그 작업 중에 설정된 데이터 검색\n  const data = event.dataTransfer.getData('text/plain');\n  \n  // 데이터를 기반으로 드래그 가능한 요소 찾기\n  const draggableElement = document.getElementById(data);\n  \n  // 드롭 영역에 드래그 가능한 요소 추가\n  event.target.appendChild(draggableElement);\n});\n\n// 드래그 가능한 요소가 드롭 영역 위를 이동 중일 때의 이벤트 핸들러\ndroppableArea.addEventListener('dragover', (event) => {\n  // 드롭을 허용하기 위해 기본 동작 방지\n  event.preventDefault();\n});\n```\n\n# 단계 3: 스타일 추가 (선택 사항)\n\n선택 사항으로 드래그 가능한 요소와 드롭 가능한 요소를 시각적으로 나타내기 위한 CSS 스타일을 추가합니다.\n\n```css\n#draggableElement {\n  cursor: move;\n}\n\n#droppableArea {\n  border: 2px dashed #ccc;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 4: 구현한 기능 테스트하기\n\n마지막으로, 브라우저에서 드래그 앤 드롭 기능을 테스트하여 예상대로 작동하는지 확인하세요.\n\n# 결론\n\n축하합니다! JavaScript에서 드래그 앤 드롭 기능을 구현하는 방법을 성공적으로 배웠습니다. 이 가이드를 따라가면 웹 애플리케이션의 사용자 경험을 향상시키고 사용자가 내용과 직관적으로 상호 작용할 수 있는 방법을 제공할 수 있습니다. 계속해서 실험하고 추가 기능을 탐구하여 드래그 앤 드롭 구현을 더 맞춤화하고 향상시킬 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-17-HowtoCreateDragandDropFunctionalityinJavaScriptAStep-by-StepTutorial_0.png"},"coverImage":"/assets/img/2024-05-17-HowtoCreateDragandDropFunctionalityinJavaScriptAStep-by-StepTutorial_0.png","tag":["Tech"],"readingTime":3},{"title":"대부분 모르는 HTML을 제대로 사용 하는 방법","description":"","date":"2024-05-17 21:28","slug":"2024-05-17-HTMLIntroduction","content":"\n\n![이미지](/assets/img/2024-05-17-HTMLIntroduction_0.png)\n\n안녕하세요! Static & Flow의 HTML 포괄적 설명 파트 1에 오신 것을 환영합니다. 저희는 기술 애호가와 교육 제안을 위해 기사를 작성합니다. 우리가 게시하는 모든 기사는 Grammarly를 사용하여 문법과 참여도를 확인하고, 이미지 및 연구를 위해 챗봇(특히 DALL-E, Gemini 및 Gemma)와 같은 도구, Microsoft Word를 사용하여 저장, Canva를 사용하여 디자인, Visual Studio Code를 사용하여 코드 스니펫을 테스트하고 작성하며, JetBrains IDE를 사용하여 복잡한 프로젝트를 처리하는 등 철저히 검토되고 개선된 것입니다. 더 많은 업데이트를 보시려면 우리의 Medium 계정을 팔로우해주세요.\n\n![이미지](/assets/img/2024-05-17-HTMLIntroduction_1.png)\n\n모든 티저와 주요 기사의 업데이트는 Twitter(X), Instagram 및 Mastodon에 게시됩니다. 아래로 스크롤해주세요!\n\n<div class=\"content-ad\"></div>\n\nPart 1이 무엇을 의미하는지 알고 싶다면, 다음을 확인해보세요: Unleash Your Web Development Potential: Dive into HTML with Static & Flow!\n\n![HTML Introduction](/assets/img/2024-05-17-HTMLIntroduction_2.png)\n\n# HTML 이해하기: 웹 개발의 기본\n\n하이퍼텍스트 마크업 언어인 HTML은 웹 개발의 중요 구성 요소로 인식되며, 웹 페이지를 작성하는 가장 기본적인 언어로 알려져 있습니다. 그러나 더 많은 기능을 제공할 수 있습니다. Chrome이나 Firefox와 같은 브라우저를 사용하여 데이터를 온라인으로 공유하는 웹페이지를 유지할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n웹에서 제공되는 콘텐츠에 구조를 제공하는 데 HTML은 주요 역할을 합니다. 다음으로, 우리는 웹 페이지의 다양한 요소를 발표하기 위해 이러한 태그들을 사용합니다. 이 요소들은 제공된 다양한 요소들을 사용하여 콘텐츠를 표시하는 방법에 대한 브라우저 장치에 대한 지침을 만들어 일관성과 정확성을 유지합니다.\n\nHTML은 결과적으로 웹을 서핑할 때마다 정보를 조직하고 제공하는 기반입니다. HTML이 없었다면, 세계적인 웹에 사람들이 지속적으로 사용하는 레이아웃과 상호 작용 도구가 없었을 것입니다. 간단한 블로그부터 복잡한 전자 상거래 웹 사이트까지 다양한 콘텐츠 유형에서 HTML은 여전히 기본적인 구조를 모든 웹 콘텐츠에 적용하므로 필수불가결합니다.\n\n웹 디자인 문제에 접근할 때, HTML에 능숙해지는 것은 성공적인 경력을 쌓기 위한 필수 전제조건입니다. HTML에 대한 능숙한 지식은 대상 관객의 요구를 충족할 수 있는 능력에 기반하여 원하는 방식으로 웹 사이트를 디자인할 자신감을 줄 것입니다.\n\n![HTML 소개](/assets/img/2024-05-17-HTMLIntroduction_3.png)\n\n<div class=\"content-ad\"></div>\n\n# HTML의 세계 탐험\n\nHTML 또는 하이퍼텍스트 마크업 언어는 웹 개발의 일부인 기본 코딩 언어입니다. 주로 HTML은 하이퍼링크를 사용하여 독특한 웹 페이지를 만들 때 필요한 인터넷의 기본 구조입니다. 이제 하이퍼링크가 다양한 페이지, 웹 사이트 또는 온라인 리소스를 이동하는 데 도움이 되며 우리의 일상적으로 상호 연결된 웹의 일부입니다.\n\nHTML에서 사용되는 주요 기법 중 하나는 태그, 요소 및 주석을 사용하는 것입니다. 특히 태그는 페이지에 사용된 요소의 시작 전과 후를 참조하는 역할을 합니다. 반면에 요소는 모든 페이지에 있는 구성 요소의 중심 부분입니다. 예를 들어 제목, 단락, 이미지 또는 링크 등입니다. 속성은 요소의 다른 특성을 제공하여 더 중요하고 능률적이며 더 멋지게 만듭니다.\n\n태그, 요소 및 속성을 최적으로 활용하여 개발자는 사용자 친화적인 웹 페이지에 매력적인 콘텐츠를 구축하고자 합니다. 이러한 요소는 웹 페이지를 배열하는 데 그치지 않고 웹 페이지가 접근 가능하고 반응적이며 사용자들에게 즐겁게하는지 여부를 결정합니다. 올바른 코드를 작성함으로써 개발자는 자신의 웹 사이트에 질서와 기능을 부여하여 인터넷 사용자들에게 최상의 클라이언트 서비스를 제공하는 웹 사이트를 구축할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nHTML의 기능은 콘텐츠가 표시되는 견고한 기반을 구축하여 개발자가 전 세계의 다양한 사용자에게 현대적이고 도전적인 경험을 제공할 수 있도록 하는 것입니다. HTML 프로그래밍의 기초를 이해하면 웹 개발에서 최상의 결과물을 얻을 수 있으며 그 결과 웹 페이지는 완전한 정보를 제공하고 플랫폼의 그룹을 관여시킬 수 있습니다. 웹 개발 분야로 나아감에 따라 HTML 프로그래밍 애플리케이션의 활용은 창의력을 자극하여 지속적인 디지털 개발로 이끌어주는 문을 열어줄 것입니다.\n\n\n![image](/assets/img/2024-05-17-HTMLIntroduction_4.png)\n\n\n# HTML의 발전: 포괄적인 역사\n\nHTML의 역사에서는 1990년 CERN에서 팀 버너스-리에 의해 시작되었다고 볼 수 있으며, 이는 아직 보여지지 않은 웹 개발의 한 단계를 열었습니다. HTML이 작동하는 언어는 최초에 구조적 텍스트 파일을 보다 사람이 읽기 쉬운 형태로 만드는 것을 목적으로 제작되었습니다. 마크업 언어로서, HTML은 계속해서 새로운 기능과 기능을 소개한 후속 버전에 의해 지속적으로 개선되었으며, 이는 웹의 발전에 기여하였습니다.\n\n<div class=\"content-ad\"></div>\n\nHTML의 역사는 XHTML와 같은 표준의 등장과 같은 다양한 이정표를 보여주었습니다. XHTML은 HTML의 기능을 변화하고 확장하기 위해 계획된 것으로, XML 표준에 더 가까워졌으며, 이것은 동시에 웹 문서의 상호 운용성을 향상시키는 데 도움이 되었습니다.\n\n인터넷과 멀티미디어 트렌드가 발전함에 따라 HTML은 다양한 개선을 통해 넷상에 더 많은 멀티미디어 콘텐츠 수요를 충족시킬 수 있었습니다. 예를 들어, HTML5는 오디오, 비디오, 확장된 상호 작용 기능을 내장 지원하는 매우 중요한 버전으로 출시되었습니다. 제3자 플러그인 없이도 가능했습니다. 이것은 정적에서 동적, 그리고 더 상호 작용적인 웹 개발로의 웹 패러다임 변화가 사용자에게 콘텐츠 생성과 제공을 진정으로 다양화시키며, 오늘날의 사용자-온라인 참여 패러다임을 개조하고 있습니다.\n\nHTML의 채택은 웹 개발 분야에서 계속해서 새로운 기술과 표준을 포용하는 상위 새로운 기술 중 하나로 남아 있습니다. 이 인코딩 언어는 단순 텍스트 파일 이상으로 시작되었지만, 중요하고 포괄적인 정보를 제공하여 사람들을 지원할 수 있는 멋진 웹 페이지를 개발할 수 있게 되었습니다.\n\n과거에서 현재로 이어지는 HTML 기술 환경의 지속적인 상승은 웹 개발 커뮤니티 내에서 발생한 독창적이고 파트너십을 포함하는 예기치 못한 측면을 포함합니다. HTML은 항상 온라인 경험의 새롭고 창의적인 차원을 탐색하는 끝없는 상태의 디지털 미디어의 주도 역할을 하고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-17-HTMLIntroduction_5.png\" />\n\n# HTML이 어떻게 작동하는지\n\n브라우저에서 HTML에 도달할 때마다, 화면에 웹 페이지를 표시하기 위한 일련의 규칙을 따릅니다. 이 상황을 이해하기 위해서는 문서 객체 모델(DOM)을 이해하고, HTML과 CSS가 스타일링을 위해 통합되는 방법을 이해하며, 상호 작용성을 위해 JavaScript를 사용하는 방법을 습득해야 합니다.\n\n## 문서 객체 모델(DOM)\n\n<div class=\"content-ad\"></div>\n\n각 웹 페이지에는 객체 트리로 구조화된 HTML DOM이 있습니다. 요소, 태그, 텍스트 조각, 노드가 DOM과 유사합니다. 웹 페이지 디자인에 대한 실용적인 접근 방식과 최대한의 조작 가능성은 DOM 생성 과정에서 나타납니다. 반면 DOM은 브라우저가 웹 페이지 내용을 이해하고 상호 작용할 수 있도록 만드는 패러다임입니다. 초급 이론으로부터 시작된 DOM을 통해 브라우저는 요소를 가져오고 업데이트하며 스타일을 조작하고 사용자 조작에 반응하여 원활한 대화형 웹 접근을 가능하게 합니다.\n\n## CSS와의 통합을 통한 스타일링\n\nCSS(계단식 스타일 시트)가 제공하는 핵심 장점 중 하나는 페이지의 외관을 지배하는 HTML의 필수 부분이 됨에 있습니다. 이 통합을 통해 웹 개발자는 레이아웃, 서체, 색상부터 기타 눈에 띄는 속성까지 콘텐츠의 모든 측면을 관리할 수 있습니다. 콘텐츠(HTML)와 프리젠테이션(CSS)의 분리를 통해 작성자들은 관심사를 분리하여 여러 페이지에 일관된 스타일을 생성합니다. 이 분리는 소셜 네트워크의 쉬운 유지보수 및 확장 가능성도 허용합니다.\n\n## 상호 작용성을 위한 JavaScript 통합\n\n<div class=\"content-ad\"></div>\n\nJavaScript을 사용하면 웹페이지가 동적이고 반응형이며 흥미로워집니다. 웹페이지에서 상호 작용할 수 있는 능력은 주로 JavaScript를 통해 실현됩니다. 이는 주로 DOM(Document Object Model)을 수정하고 변경함으로써 발생하며, 클릭, 스크롤 등의 이벤트를 통해 상호 작용을 확인하고 사용자 입력을 검증하며 콘텐츠를 변경할 수 있습니다. 결과적으로 JavaScript를 사용하면 다양한 애니메이션을 만들 수 있습니다.\n\n# 파싱에서 렌더링까지의 순서\n\n브라우저가 HTML 소스 코드로부터 문서를 렌더링해야 할 때, 먼저 받은 원시 코드를 DOM 모델로 전달하여 정보를 GUI 인터페이스 형태로 취하는 트리를 생성해야 합니다. 그런 다음 CSS는 시각적 스타일을 계산하기 위해 웹 브라우저에서 처리해야 하며, 이는 요소의 특정 위치를 결정하고 그들 사이의 최종 레이아웃을 계산하는 데 사용됩니다. 그래서 바로 이렇게 CSS는 웹사이트의 레이아웃만 통합하고, HTML은 웹사이트의 콘텐츠만 포함하게 됩니다. 그리고 JavaScript와 같은 제3언어가 추가되면, 해당 언어는 각 요소의 동작을 추가하여 최종 사용자의 반응과 페이지의 동적 반응성을 추가합니다. HTML, CSS 및 JavaScript의 결합은 사용자와 성공적으로 상호 작용하는 멋진 UI를 갖춘 웹 응용 프로그램을 얻게 됩니다.\n\n<img src=\"/assets/img/2024-05-17-HTMLIntroduction_6.png\" />\n\n<div class=\"content-ad\"></div>\n\n# HTML 문서의 기본 구조\n\nHTML 문서를 작성할 때는 특정 구조를 준수해야 합니다. 이 구조는 각기 다른 목적을 위한 구분된 섹션을 설정합니다. HTML 페이지의 기본 구성 요소인 문서 유형 선언, 헤드 섹션 및 본문 섹션에 대한 지식은 웹 페이지를 구축하거나 디자인하는 데 필수적인 기반을 제공합니다.\n\n## 문서 유형 선언\n\n문서 유형 선언은 HTML 문서의 가장 상단에 위치하며 해당 문서에서 사용된 HTML 버전을 웹 브라우저에 통지하는 데 사용됩니다. 가장 일반적으로 사용되는 선언은 `!DOCTYPE html`입니다. 이는 문서가 HTML5 형식으로 작성되었음을 나타냅니다. 해당 선언은 브라우저로 하여금 HTML 표준에 따라 페이지를 렌더링하도록 요청합니다.\n\n<div class=\"content-ad\"></div>\n\n## 헤드 섹션\n\n문서의 헤드 섹션은 사용자에게 직접적으로 표시되지 않는 웹페이지에 대한 메타데이터 및 다른 정보가 유지되는 곳입니다. 브라우저 탭에 표시되는 웹페이지의 이름을 나타내는 `title` 태그와 CSS 파일을 가져오는 그룹에 속하는 `link` 태그와 같은 태그가 포함됩니다. 또한 상단 섹션에는 검색 엔진 및 브라우저를 위한 문자 인코딩, 뷰포트 설정 및 기타 중요한 필드를 제공하기 위한 메타 태그도 있을 수 있습니다.\n\n## 바디 섹션\n\n바디의 부분은 사용자와 직접적인 관계를 형성하여 사용자가 볼 수 있는 웹페이지의 일부이며, HTML 시스템 내의 유기체 일부에 불과합니다. 이 섹션의 내용은 다양한 요소로 구성됩니다. 이러한 주요 구성 요소에는 제목(`h1`, `h2` 등), 단락(`p`), 링크(`a`), 이미지(`img`), 목록(`ul`, `ol`, `li`) 등이 있습니다. 이러한 요소들을 통해 개발자는 웹페이지의 실제 콘텐츠를 형성하고 공유하여 방문객들이 만족할 만큼 웹페이지를 더 읽기 쉽게 찾을 수 있도록 할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 예시 HTML 구조\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>나의 웹 페이지</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>나의 웹사이트에 오신 것을 환영합니다</h1>\n    <p>이것은 내 웹페이지의 샘플 단락입니다.</p>\n    <a href=\"https://www.example.com\">예시 웹사이트 방문하기</a>\n</body>\n</html>\n```\n\n위 예시에서 HTML 문서의 주요 구성 요소가 나타났습니다. 사용된 내용은 doctype 선언, 제목 및 CSS 파일 링크가 있는 head 부분, 그리고 몇 개의 H 태그, 단락 및 링크가 포함된 body 부분입니다. 이러한 표준화된 방식으로 콘텐츠를 구성하는 것은 체계적이고 시각적으로 매력적인 웹 페이지를 제작하는 선행 조건입니다.\n\n![HTML 소개](/assets/img/2024-05-17-HTMLIntroduction_7.png)\n\n<div class=\"content-ad\"></div>\n\n# HTML Elements and Tags\n\nHTML에서 요소와 태그는 웹 콘텐츠를 구조화하고 정리하는 데 핵심적인 역할을 합니다. 일반적으로 사용되는 HTML 태그와 그 목적에 대해 살펴보겠습니다. `div`, `span`, `header`, `footer`와 같은 특수 문자 및 관련 태그와 함께 어떻게 사용되는지 코드 예제를 통해 설명하겠습니다.\n\n# HTML Elements and Tags\n\nHTML에서는 요소와 태그가 주로 웹 콘텐츠를 보다 잘 관리하고 정렬하는 데 사용됩니다. 일반적인 HTML 태그와 그 역할을 함께 `div`, `span`, `header`, `footer` 및 관련 양식 태그를 사용한 특수 문자가 함께 사용되는 경우를 살펴보겠습니다. 각 태그가 실제 상황에서 어떻게 사용되는지 설명하는 예시가 제공됩니다.\n\n<div class=\"content-ad\"></div>\n\n## 1. `div` 태그\n\n상기된 요소는 HTML에서 선택된 데이터 구조의 올인원 항목으로, 웹 문서를 구획화(또는 분해)하는 데 사용됩니다. 주로 내용을 그룹화하고 스타일을 함께 설정하는 데 사용됩니다. `div` 태그가 어떻게 활용되는지의 예시가 아래에 제시되어 있습니다:\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Div 예시</title>\n</head>\n<body>\n    <div style=\"background-color: lightblue;\">\n        <h2>이것은 Div 섹션입니다.</h2>\n        <p>이 문구는 div 요소 내에 있습니다.</p>\n    </div>\n</body>\n</html>\n```\n\n## 2. `span` 태그\n\n<div class=\"content-ad\"></div>\n\n`span` 태그를 사용하면 개발자가 블록의 큰 섹션에서 텍스트 줄의 특정 섹션을 스타일링할 수 있습니다. 일반적으로 인라인 스타일링 및 CSS 클래스가 가장 많이 사용됩니다. `span` 태그를 사용하는 예시는 아래와 같습니다:\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Span Example</title>\n    <style>\n        .highlight {\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <p>This is a <span class=\"highlight\">highlighted</span> text.</p>\n</body>\n</html>\n```\n\n## 3. `header` 및 `footer` 태그\n\n`header` 및 `footer` 태그 모두 웹 페이지의 헤더 및 푸터 부분을 지정하는 데 사용됩니다. 대개 상단(헤더)에는 일반적으로 소개 또는 탐색 콘텐츠가 있으며, 하단(푸터)에는 마감 세부정보가 있습니다. 이러한 태그의 사용 예시는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Header and Footer Example</title>\n</head>\n<body>\n    <header>\n        <h1>Welcome to Our Website</h1>\n        <nav>\n            <a href=\"#\">Home</a> | <a href=\"#\">About</a> | <a href=\"#\">Contact</a>\n        </nav>\n    </header>\n    \n    <footer>\n        <p>&copy; 2024 Example Company. All rights reserved.</p>\n    </footer>\n</body>\n</html>\n```\n\n## 4. Form-Related Tags\n\nHTML은 웹 페이지에서 상호작용하는 양식을 생성할 수 있도록 개발자에게 여러 태그를 제공합니다. 일반적으로 사용되는 양식 태그 중 일부는 `form`, `input`, `label`, `select`, `textarea`, `button`이 있습니다. 다음은 예시입니다:\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Form Example</title>\n</head>\n<body>\n    <form>\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\">\n        \n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\">\n        \n        <button type=\"submit\">Submit</button>\n    </form>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n위의 명령어를 이해하고 활용함으로써 웹 개발자들은 잘 구조화되고 사용자 친화적인 웹 페이지를 만들 수 있으며 일반적으로 관객에게 더 나은 경험을 제공할 수 있습니다.\n\n![HTML Introduction](/assets/img/2024-05-17-HTMLIntroduction_8.png)\n\n## 고급 HTML 기능\n\n기본 HTML 요소로 프로젝트를 시작하는 웹 개발자들은 고급 HTML 태그를 알아야 한다는 것을 인지해야 합니다. 이는 더 깊은 학습 단계로 나아가는 길을 열어주며, 멀티미디어를 개선하고, 웹 사이트를 견고하게 만들며, 장애를 가진 사용자들이 효율적으로 웹 사이트에 접근할 수 있도록 하는 것을 도와줍니다. 또한, 최신 버전은 HTML5로 XHTML의 자리를 차지하며 현대 웹 개발의 요구를 더 잘 충족하는 새로운 태그를 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n## 그림을 그리기 위한 캔버스 요소\n\nHTML5의 `canvas` 요소는 페이지에 스크립트를 동적으로 넣어 사용자 친화적이고 그래픽을 그리는 방법으로 작동합니다. 개발자들은 JavaScript를 통해 다각형을 만들고 애니메이션을 만들거나 수정 또는 캔버스를 삭제할 수 있습니다. 또한 웹 디자이너들에게 가장 시각적으로 풍부하고 동적으로 매력적인 웹 페이지를 제공하는 큰 장점으로 나타납니다.\n\n## 멀티미디어를 위한 비디오 및 오디오 요소\n\nHTML5는 비디오 및 오디오 태그를 사용하여 비디오 및 오디오 컨텐츠를 웹 페이지 내에서 직접 스트리밍할 수 있도록 네이티브 지원을 제공합니다. 최신 운영 방식으로, 개발자들은 플래시와 같은 제3자 플러그인이 필요하지 않은 멀티미디어 인터페이스를 효과적으로 결합할 수 있습니다. 비디오 요소에는 형식 및 속성과 같은 사용자 정의 기능이 있으며, 오디오 요소를 사용하여 사용자에게 더 풍부한 경험을 제공할 수 있습니다. 이러한 기술을 사용하면 웹 사이트에서 멀티미디어 및 특히 이 플랫폼과 상호 작용하는 사용자들의 이야기 및 관객과의 상호 작용과 관련된 것들을 구현할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 향상된 상호 작용을 위한 새로운 양식 컨트롤\n\nHTML5는 데이터 입력 및 상호 작용을 더 효율적으로 구성하는 데 도움이 되는 여러 가지 새로운 양식 컨트롤을 제공합니다. `input type=\"date\"`, `input type=\"range\"`, `input type=\"color\"`, 그리고 `input type=\"email`과 같은 요소들은 날짜, 슬라이더/트랙바, 색상 선택기, 그리고 이메일 입력이 올바른지 확인하기 위한 전문화된 필드를 갖게 해줍니다. 이것이 하는 일은 디자인이 개선될 뿐만 아니라 웹 콘텐츠를 제공하는 데 더 나아지게 만드는 것입니다. 왜냐하면 이러한 요소들은 휴대 기기 및 웹 플랫폼이 고려되어 디자인되었기 때문입니다.\n\n## 반응형과 접근성 기능\n\nHTML5의 사용 자체만으로도 개발자들에게는 훌륭한 것입니다. 이는 반응성과 접근성에 중점을 둔 것입니다. 웹 사이트는 화면 크기 및 장치에 매끄럽게 적응하지만 장애를 가진 사람들에게도 사용 가능합니다. 많은 요소들, 예를 들어, 의미론적 요소들(`header`, `nav`, `main`, `footer`), 반응형 이미지(`img srcset`), 그리고 랜드마크 역할(ARIA 속성)이 구조와 웹 탐색을 위해 사용되었습니다. 이를 실현하기 위해 개발자들은 이러한 의미론적 인프라, 반응성, 그리고 ARIA 랜드마크들을 웹 페이지의 구조에 사용해야 합니다. 항상 시각적 디자인과 탐색을 향상시키고 웹 사이트는 모든 사용자를 환영해야 합니다. 이러한 기능을 따르면, 개발자들은 사이트의 실용성뿐만 아니라 모든 사용자에게 접근 가능한 환경을 만드는 것입니다.\n\n<div class=\"content-ad\"></div>\n\nHTML5의 고급 기능 활용은 개발자들이 전자 학습 및 모바일 학습을 포함한 다양한 수정 작업을 수행하는 데 도움이 되는 새로운 도구를 사용할 수 있게 합니다. 3D 모델, 데이터 시각화 및 일반 대중에게 수용 가능한 접근 가능한 인터페이스와 같은 리소스를 포함하여 다양한 수정 작업을 수행하는 데 도움이 되는 새로운 도구를 사용할 수 있게 합니다. HTML 캔버스는 몰입형 멀티미디어 경험에 신뢰성을 제공하는 동시에 이러한 특별한 구현으로 사용자와 웹 사이트의 상호 작용 방식을 변경할 수 있습니다.\n\n다음은 해당 방향으로 적용된 주요 규칙 몇 가지입니다: 멀티미디어 콘텐츠 표시를 위해 오디오 및 비디오 추가, 향상된 상호 작용을 위한 새로운 입력 유형을 통한 멋진 폼 컨트롤, 그리고 장애인을 위한 모든 것이 적응적이고 편안하도록 구성하는 것 등입니다. 이러한 특별한 구현을 통해 개발자들은 웹 개발에 대한 새로운 표준을 설정하면서 사용자가 웹 사이트와 상호 작용하는 방식을 변경할 수 있습니다.\n\n![HTML 도입부](/assets/img/2024-05-17-HTMLIntroduction_9.png)\n\n# HTML Best Practices\n\nCSS 및 웹 개발 사용량을 줄이려는 욕망을 형성하는 동안 HTML 표준이 작업에서 필수적으로 구현되어야 함을 이해할 필요가 있습니다. 의미론적 HTML, 접근성 고려, SEO 최적화, 그리고 표시되는 것의 가독성을 유지하기 위한 가이드라인을 준수함으로써 사용자 경험을 향상시키고 개발 프로세스를 간소화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 시맨틱 HTML\n\n시맨틱 HTML은 시각화만 하는 것이 아닌 의미있는 태그로 요소를 표시하는 데 중점을 둡니다. `header`, `nav`, `main`, `section`, `footer`와 같은 태그를 사용하면 검색 엔진이 콘텐츠를 논리적으로 구성할 수 있을 뿐만 아니라 보조 기술에서도 웹 페이지를 모든 사용자가 쉽게 이해할 수 있도록 만들어줍니다. 시맨틱 HTML 패턴을 적용하면 코드를 정리하고 프로젝트를 보다 원활하게 조작하고 확장할 수 있습니다.\n\n## 접근성 가이드라인\n\nHTML 코드를 작성할 때 웹 사이트의 접근성에 대해 이해하고 있는 것은 단순히 명령이 아니라 모든 사용자가 장애가 있는 경우를 포함해 사이트에 문제없이 액세스할 수 있어야 한다는 가장 중요한 점입니다. 이미지에 대한 대체 텍스트 추가, 설명적인 링크 텍스트, 적절한 제목 구조, 키보드 탐색 지원과 같은 기능을 추가하여 접근성을 높이면 공통접근성을 의미하는 포용적이고 접근 가능한 방식으로 제공됩니다. 설정된 접근성 가이드라인을 따르는 것은 많은 관객에 손길을 남기면서 모든 웹 사이트가 어디에서나 누구에게나 접근 가능해야 한다는 요구 사항을 충족시키는 한 가지 방법입니다.\n\n<div class=\"content-ad\"></div>\n\n## SEO 고려 사항\n\n검색 엔진이 콘텐츠를 시각적으로 이해할 수 있도록 웹사이트를 구성하는 것은 검색 결과에서의 가시성과 순위 획득의 주요 요소입니다. 제목, 메타 태그, 텍스트에 해당하는 목표 키워드를 활용하고 정보를 순서화하고 쉽게 따라갈 수 있도록 구성하세요. 명확하고 설명적인 메타 타이틀, 메타 설명 및 구조화된 데이터 마크업을 작성하면 웹사이트로 더 많은 방문자가 유입되어 유기적인 방문 수가 증가할 수 있습니다. SEO 논리를 도입함으로써 사용자는 웹사이트 탐색 및 방문에 더욱 참여할 수 있습니다.\n\n## 마크업의 가독성 유지\n\nHTML 문서가 깨끗하고 조직적이며 이해하기 쉽도록 보장하기 위해서는 미래 협업 및 유지보수를 위한 최고의 코드 관행을 준수해야 합니다. 코드 블록을 일관된 방식으로 정렬하고 클래스와 ID에 명확한 이름을 부여하며 복잡한 섹션이나 기능을 설명하는 설명적인 주석을 추가하세요. 린터 및 코드 유효성 검사와 같은 도구의 사용은 개발 중에 오류를 감지하고 코드를 공통 스타일에서 벗어나지 않도록 방지하여 코드를 쉽게 읽을 수 있도록 도와줍니다.\n\n<div class=\"content-ad\"></div>\n\nHTML 효율적인 작성 기준을 따르면 웹 프로젝트를 다음 수준으로 발전시킬 수 있어요. 이는 사용자 경험을 향상시키고 디지털 콘텐츠의 영향력과 범위를 확대하는 데 도움이 될 거예요. 의미 있는 작성의 실용적인 구현을 내재화하면, 모든 사용자에게 웹 접근이 가능해지고 SEO 최적화 및 가독성 있는 콘텐츠 작성을 통해 현재 프로젝트를 개선할 수 있을 뿐만 아니라 미래 웹 프로젝트의 견고한 기초를 마련할 수 있어요.\n\n# HTML 기초\n\nHTML은 웹페이지의 핵심 요소임을 부인할 수 없어요. 요소와 태그를 통해 구조를 지정하죠. 이러한 요소들은 제목, 단락, 이미지, 링크 등 웹 페이지의 기본 구조를 이루는 HTML 언어의 단위들이에요. 또한, 태그를 통해 독자들을 안내하는 작업이 이루어지고, HTML에서 기본적인 역할을 하는 태그들은 혼동되지 않도록 도와줘요. 더구나, 태그는 콘텐츠를 감싸고, 어떻게 웹페이지에서 포맷되는지를 보여주거나 의미를 주는 역할을 해요.\n\np 태그를 사용하면 닫는 태그가 필요 없고, 매우 간결하게 단락을 정의할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\nHTML의 매체는 계층 구조를 따라가며 웹사이트를 더 깔끔하고 명확하게 만들 수 있게 도와줍니다. 한편으로, 텍스트가 어려워지는 것 같은데, 태그 뒤에 따라오는 현실이 그렇습니다. 태그가 따라오면서 HTML 문서를 생성하고 구성해야 하는데, 이는 정리되고 조직화된 문서를 만들 수 있게 합니다. 각 div의 높이와 너비를 설정하면 각 문단의 어느 쪽에 배치할지를 정의할 수 있습니다. 태그가 HTML에 중요한 이유는 다른 부분들을 조립하고, 제목, 문단 또는 기타 부분들이 어떻게 표시될지를 지시하기 때문입니다.\n\n태그, 요소 및 속성을 포함한 HTML의 기본 개념들을 배우면 웹상에서 매우 효과적인 콘텐츠를 생산하고 변경할 수 있습니다. 다가오는 연습에서 HTML 태그와 요소를 만들어 보며 지식을 넓히는 기회가 주어질 것입니다.\n\n제 1부 끝!\n\n![HTML 소개](/assets/img/2024-05-17-HTMLIntroduction_10.png)\n\n<div class=\"content-ad\"></div>\n\n# 퀴즈\n\n## 1. HTML은 무엇을 의미합니까?\na) 하이퍼텍스트 마크업 언어\nb) 하이 텍스트 기계 언어\nc) 하이퍼링크 및 텍스트 마크업 언어\nd) 홈 도구 마크업 언어\n\n## 2. 내부 스타일 시트를 정의하는 데 사용되는 HTML 태그는 무엇입니까?\n\n<div class=\"content-ad\"></div>\n\na) `script`\nb) `style`\nc) `css`\nd) `link`\n\n### 3. 줄 바꿈을 삽입하는 올바른 HTML 요소는 무엇인가요?\n\na) `lb`\nb) `break`\nc) `br`\nd) `newline`\n\n### 4. HTML에서 하이퍼링크를 생성하는 데 사용되는 다음 태그는 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\na) `link`\nb) `href`\nc) `a`\nd) `url`\n\n## 5. What is the correct syntax for creating a comment in HTML?\n\na) `<!-- Comment -->`\nb) // Comment\nc) /* Comment */\nd) # Comment\n\n## 6. Which HTML element is used to specify a footer for a document or section?\n\n<div class=\"content-ad\"></div>\n\na) 'foot'\nb) 'bottom'\nc) 'footer'\nd) 'section'\n\n## 7. 아래 중 HTML에서 이미지를 포함하는 올바른 방법은 무엇입니까?\n\na) `img href=”image.jpg”`\nb) `img src=”image.jpg”`\nc) `image src=”image.jpg”`\nd) `image href=”image.jpg”`\n\n## 8. HTML의 `title` 태그는 무엇을 하는 것입니까?\n\n<div class=\"content-ad\"></div>\n\na) 웹 페이지의 제목을 만듭니다.\nb) 제목을 브라우저의 제목 표시줄이나 탭에 표시합니다.\nc) 검색 엔진 결과에서 웹 페이지의 제목을 설정합니다.\nd) 위 모두\n\n## 9. HTML 속성 중 인라인 스타일을 정의하는 데 사용되는 것은 무엇인가요?\n\na) class\nb) style\nc) font\nd) styles\n\n## 10. HTML에서 번호가 매겨진 목록을 만드는 데 사용되는 것은 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\na) `ul`\nb) `ol`\nc) `li`\nd) `dl`\n\nPart 1 퀴즈 끝!\n\n![이미지](/assets/img/2024-05-17-HTMLIntroduction_11.png)\n\n![이미지](/assets/img/2024-05-17-HTMLIntroduction_12.png)\n\n<div class=\"content-ad\"></div>\n\n## 더 많은 업데이트를 받고 싶다면 팔로우하세요!\n\n최신 기사, 튜토리얼 및 기술 통찰력에 대해 최신 정보를 받으려면 소셜 미디어에서 저희를 팔로우하세요:\n\n- Twitter (X): @StaticAndFlow\n- Instagram: @StaticAndFlow\n- Mastodon: @StaticAndFlow\n\n저희 계정을 팔로우하면 새로운 기사, 독점 콘텐츠 및 더 많은 것을 알림으로 받게 됩니다. 기술 애호가들의 커뮤니티에 가입하여 학습 여정을 더욱 높은 수준으로 이끌어보세요!","ogImage":{"url":"/assets/img/2024-05-17-HTMLIntroduction_0.png"},"coverImage":"/assets/img/2024-05-17-HTMLIntroduction_0.png","tag":["Tech"],"readingTime":16},{"title":"웹개발에서 알아둬야할 Color들","description":"","date":"2024-05-17 21:27","slug":"2024-05-17-BestColorsandNames","content":"\n\n![이미지](/assets/img/2024-05-17-BestColorsandNames_0.png)\n\n안녕하세요, 색상 애호가 및 디자인 마법사 여러분! 오늘은 색상과 디자인 세계의 숨겨진 보석인 \"색 이름\" 섹션을 소개해 드리는 것에 흥분합니다. hexcolor.co의 \"색 이름\" 섹션은 단순한 색 이름 목록이 아니라 무지개를 따라 화려한 여정을 안내해 주는 리소스로, 여러분의 프로젝트에 영감을 주고 발전시킬 것입니다!\n\n## \"색 이름\" 섹션이란?\n\nhexcolor.co의 \"색 이름\" 섹션은 해당 HEX 코드와 함께 완벽하게 취합된 색 이름들의 포괄적이고 아름다운 컬렉션이에요. 웹 디자인, 그래픽 디자인 또는 다른 예술적 노력에서 창의성과 정밀함을 더하고 싶은 사람들을 위한 보물창고입니다.\n\n<div class=\"content-ad\"></div>\n\n## 이 컬러풀한 자료를 좋아할 이유\n\n- 영감 가득: 다양한 컬러 이름이 풍부하게 제공되어 있어, 이 섹션은 영감의 광산입니다. 웹사이트 디자인, 브랜드 팔레트 작성, 또는 다음 아트 프로젝트를 위한 완벽한 쉐이드를 찾고 있다면 여기에서 찾을 수 있습니다.\n- 정밀하고 정확하게: 각 컬러 이름은 정확한 HEX 코드와 함께 제공되어, 디지털 프로젝트에서 컬러를 정확히 재현할 수 있습니다.\n- 심미적 탐구: 알지 못했던 컬러를 발견하고 작품에 독특함을 부여할 수 있는 특이하고 독특한 쉐이드를 탐색해보세요.\n\n## 컬러 이름 이상: 디자인 지식의 중심지\n\nHexcolor.co는 컬러 이름 목록 이상을 제공합니다. 웹사이트 최적화를 위한 A/B 테스트, 전자상거래 KPI, 오피스 페인트 컬러 등에 대한 통찰력을 제공하는 디자인 지식의 포괄적인 중심지입니다. 디자인과 컬러 이론을 깊이 이해하고 싶은 누구에게나 완벽한 목적지입니다.\n\n<div class=\"content-ad\"></div>\n\n## \"색 이름\" 섹션 사용 방법\n\n\"색 이름\" 섹션을 사용하는 것은 굉장히 간단합니다:\n\n- https://hexcolor.co/color-names를 방문합니다.\n- 색 이름 목록을 살펴보고 영감을 얻습니다.\n- 원하는 색을 클릭하여 HEX 코드 및 기타 세부 정보를 확인합니다.\n- 디지털 프로젝트에서 완벽한 색상 매칭을 위해 HEX 코드를 사용합니다.\n\n## 마지막으로\n\n\n<div class=\"content-ad\"></div>\n\nHexcolor.co에서는 세계를 더 다채롭고 창의적인 곳으로 만들고자 열정을 가지고 노력하고 있습니다. 저희의 \"색 이름\" 섹션은 이 의지의 증명이며, 영감을 주는 동시에 실용적인 자원을 제공합니다. 당신이 경험 많은 디자이너이든 색상 애호가이든, 여기서 좋아할 만한 것을 찾을 수 있을 겁니다.\n\n## 마무리\n\n디자인의 다이나믹하고 끊임없이 변화하는 세계에서 필요한 적절한 자원을 손에 넣는 것이 중요합니다. Hexcolor.co의 \"색 이름\" 섹션은 단순히 도구 이상의 의미를 갖고 있습니다; 이는 영감과 창의력의 원천이기도 합니다. 이 다채로운 세계로 빠져들어 상상력을 펼쳐보세요!","ogImage":{"url":"/assets/img/2024-05-17-BestColorsandNames_0.png"},"coverImage":"/assets/img/2024-05-17-BestColorsandNames_0.png","tag":["Tech"],"readingTime":2},{"title":"프론트엔드 개발자를 위한 50가지 프로젝트 No05 - Blurry Loading","description":"","date":"2024-05-17 21:26","slug":"2024-05-17-50Front-EndCombatProjectNo05BlurryLoading","content":"\n\n<img src=\"/assets/img/2024-05-17-50Front-EndCombatProjectNo05BlurryLoading_0.png\" />\n\n오늘은 50개의 프론트엔드 실전 프로젝트 No.05: Blurry Loading에 대해 이야기하려고 해요. 이 프로젝트의 소스 코드 다운로드 주소는 다음과 같아요: [여기를 클릭해주세요](https://github.com/bradtraversy/50projects50days/tree/master/blurry-loading)\n\n# 프로젝트 소개\n\n이 프로젝트는 웹 페이지 로드 중에 희미한 로딩 효과를 시뮬레이션해요. 페이지는 흐릿한 배경 이미지로 시작하여 점점 선명해지고 로딩 진행률 텍스트가 변경되는 효과를 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Blurry Loading](/assets/img/2024-05-17-50Front-EndCombatProjectNo05BlurryLoading_1.png)\n\n# 핵심 코드\n\n- `section class=”bg”``/section`: 로딩을 위해 배경 이미지를 흐릿하게 처리하는 데 사용됩니다.\n- `div class=”loading-text”``/div`: 로딩 진행 상황을 표시하는 텍스트입니다.\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"style.css\" />\n    <title>Blurry Loading</title>\n  </head>\n  <body>\n    <section class=\"bg\"></section>\n    <div class=\"loading-text\">0%</div>\n\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n- .bg의 filter: blur(0px): 초기 blur 효과를 정의합니다.\n- .loading-text.style.opacity: 로드 진행 텍스트의 투명도를 제어합니다.\n\n```js\n@import url('https://fonts.googleapis.com/css?family=Ubuntu');\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'Ubuntu', sans-serif;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  overflow: hidden;\n  margin: 0;\n}\n\n.bg {\n  background: url('https://images.unsplash.com/photo-1576161787924-01bb08dad4a4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2104&q=80')\n    no-repeat center center/cover;\n  position: absolute;\n  top: -30px;\n  left: -30px;\n  width: calc(100vw + 60px);\n  height: calc(100vh + 60px);\n  z-index: -1;\n  filter: blur(0px);\n}\n\n.loading-text {\n  font-size: 50px;\n  color: #fff;\n}\n```\n\n- 로드 진행 텍스트와 배경 요소에 대한 DOM 노드 참조 획득.\n- 로드 진행을 기록할 변수 load를 정의합니다.\n- setInterval 함수를 사용하여 30밀리초마다 블러링 함수를 호출하는 타이머를 설정하여 로딩 프로세스를 모방합니다.\n- 블러링 함수:\n— 로드 값을 증가시켜 로딩 진행을 모방합니다.\n— 로딩이 완료되었는지 확인하고 타이머를 해제합니다.\n— 로드 진행 텍스트의 콘텐츠를 업데이트합니다.\n— scale 함수를 사용하여 로드 진행 값을 blur 필터의 강도 값으로 변환하고 배경의 blur 효과를 업데이트합니다.\n— scale 함수를 사용하여 로드 진행 값을 텍스트의 투명도 값으로 변환하고 로드 진행 텍스트의 투명도를 업데이트합니다 (값이 100에 가까울수록 투명도가 낮아집니다).\n\n```js\nconst loadText = document.querySelector('.loading-text')\nconst bg = document.querySelector('.bg')\n\nlet load = 0\n\nlet int = setInterval(blurring, 30)\n\nfunction blurring() {\n  load++\n\n  if (load > 99) {\n    clearInterval(int)\n  }\n\n  loadText.innerText = `${load}%`\n  loadText.style.opacity = scale(load, 0, 100, 1, 0)\n  bg.style.filter = `blur(${scale(load, 0, 100, 30, 0)}px)`\n}\n\n// https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\nconst scale = (num, in_min, in_max, out_min, out_max) => {\n  return ((num - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 개요\n\n이 프로젝트는 CSS의 filter: blur(px) 속성을 사용하여 흐릿한 효과를 구현하고, JavaScript 타이머 (setInterval)를 사용하여 로딩 과정을 시뮬레이션합니다. 로딩 진행이 늘어남에 따라 블러 필터의 값이 점차 감소하고 배경 이미지가 선명해집니다. 동시에 JavaScript 코드는 로딩 진행 텍스트의 값과 투명도도 업데이트합니다.\n\nGIF의 전체 과정은 다음과 같이 나타납니다:\n\n![이미지](/assets/img/2024-05-17-50Front-EndCombatProjectNo05BlurryLoading_2.png)\n\n<div class=\"content-ad\"></div>\n\n이 이야기를 읽은 후 도움이 될 것 같다고 생각된다면 박수를 보내주시고 팔로우해주세요. 공유도 해주세요. 혹시 당신의 리트윗이 다른 사람들에게 영감을 줄 수도 있습니다. 또한, 제안 사항이 있으면 아래에 제안해 주시면 감사하겠습니다. 향후 기술에 관한 더 많은 기사를 공유하겠습니다. 감사합니다!","ogImage":{"url":"/assets/img/2024-05-17-50Front-EndCombatProjectNo05BlurryLoading_0.png"},"coverImage":"/assets/img/2024-05-17-50Front-EndCombatProjectNo05BlurryLoading_0.png","tag":["Tech"],"readingTime":4},{"title":"개발자라면 반드시 알아야 할 CSS 팁 25가지","description":"","date":"2024-05-17 21:24","slug":"2024-05-17-25CSSHacksEveryDeveloperShouldKnow","content":"\n\n\n![CSS](/assets/img/2024-05-17-25CSSHacksEveryDeveloperShouldKnow_0.png)\n\nCSS (Cascading Style Sheets)은 웹 개발자에게 필수적인 도구로, HTML 요소를 정확하게 스타일링할 수 있게 해줍니다. 그러나 CSS를 정복하는 것은 기본을 알고 있는 것 이상의 일이 필요합니다. 여기에는 여러분의 삶을 더 쉽게 만들고 코드를 더 깔끔하게 만들 수 있는 25가지 CSS 해킹 방법이 있습니다.\n\n## 1. 요소를 수직 및 수평으로 가운데 정렬하기\n\n문제: 요소를 컨테이너 내에서 수직 및 수평으로 가운데 정렬하는 것.\n\n\n<div class=\"content-ad\"></div>\n\n해결책: Flexbox를 사용해주세요.\n\n```js\n.container {\n    display: flex;\n    justify-content: center; /* 수평 가운데 정렬 */\n    align-items: center; /* 수직 가운데 정렬 */\n    height: 100vh;\n}\n```\n\n## 2. `vw`를 사용한 반응형 텍스트\n\n문제: 뷰포트와 비례하여 텍스트가 확대/축소되는지 확인하는 것이 중요합니다.\n\n<div class=\"content-ad\"></div>\n\n해결책: `vw` 단위를 사용하세요.\n\n```css\nh1 {\n    font-size: 5vw;\n}\n```\n\n## 3. 종횡비 유지\n\n문제: 요소의 종횡비 유지하기.\n\n<div class=\"content-ad\"></div>\n\n해결책: 백분율 기반의 패딩 사용하기.\n\n```js\n.aspect-ratio-box {\nwidth: 100%;\npadding-top: 56.25%; /* 16:9 비율 */\nposition: relative;\n}\n.aspect-ratio-content {\nposition: absolute;\ntop: 0;\nright: 0;\nbottom: 0;\nleft: 0;\n}\n```\n\n## 4. 커스텀 체크박스 및 라디오 버튼\n\n문제: 기본 체크박스와 라디오 버튼의 스타일링.\n\n<div class=\"content-ad\"></div>\n\n해결책: 기본 입력란을 숨기고 레이블을 스타일링합니다.\n\n```js\n<label class=\"custom-checkbox\">\n<input type=\"checkbox\" />\n<span class=\"checkmark\"></span>\n</label>\n```\n\n```js\n.custom-checkbox input {\ndisplay: none;\n}\n.custom-checkbox .checkmark {\nwidth: 20px;\nheight: 20px;\nbackground-color: #eee;\nborder-radius: 4px;\n}\n.custom-checkbox input:checked + .checkmark {\nbackground-color: #2196F3;\n}\n```\n\n## 5. 레이아웃을 위한 CSS 그리드\n\n<div class=\"content-ad\"></div>\n\n문제: 복잡한 레이아웃 만들기.\n\n해결책: CSS Grid를 사용하세요.\n\n```css\n.container {\ndisplay: grid;\ngrid-template-columns: repeat(3, 1fr);\ngap: 10px;\n}\n.item {\nbackground-color: lightblue;\npadding: 20px;\n}\n```\n\n## 6. 고정 푸터\n\n<div class=\"content-ad\"></div>\n\n문제: 페이지 하단에 푸터를 고정하는 방법\n\n해결책: Flexbox를 사용하세요.\n\n```js\nbody {\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n}\nmain {\n    flex: 1;\n}\nfooter {\n    background-color: #f1f1f1;\n    padding: 10px;\n    text-align: center;\n}\n```\n\n## 7. 부드러운 스크롤\n\n<div class=\"content-ad\"></div>\n\n문제: 앵커 링크에 부드러운 스크롤 추가하기\n\n해결책: `scroll-behavior`를 사용하세요.\n\n```css\nhtml {\nscroll-behavior: smooth;\n}\n```\n\n## 8. 반응형 이미지\n\n<div class=\"content-ad\"></div>\n\n문제: 이미지가 반응형으로 표시되도록하기\n\n해결책: `max-width` 속성 사용\n\n```css\nimg {\n    max-width: 100%;\n    height: auto;\n}\n```\n\n## 9. 텍스트 줄임표(...) 처리\n\n<div class=\"content-ad\"></div>\n\n해결: 넘치는 텍스트 자르기\n\n해결책: `text-overflow`를 사용하세요.\n\n```css\n.truncate {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 200px; /* 또는 필요한 너비 */\n}\n```\n\n## 10. 커스텀 스크롤바\n\n<div class=\"content-ad\"></div>\n\n문제: 스크롤바 스타일링하기.\n\n솔루션: `::-webkit-scrollbar`를 사용하세요.\n\n```js\n::-webkit-scrollbar {\n    width: 10px;\n}\n\n::-webkit-scrollbar-track {\n    background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #888;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #555;\n}\n```\n\n## 11. 전체 화면 배경 이미지\n\n<div class=\"content-ad\"></div>\n\n문제: 배경 이미지를 전체 화면에 적용하는 방법.\n\n해결 방법: `background-size`를 사용하세요.\n\n```css\n.full-screen-bg {\nbackground-image: url('background.jpg');\nbackground-size: cover;\nbackground-position: center;\nheight: 100vh;\n}\n```\n\n## 12. 그라디언트 배경 애니메이션\n\n<div class=\"content-ad\"></div>\n\n문제: 애니메이션 그라데이션 배경 만들기.\n\n해결책: `@keyframes`를 사용하세요.\n\n```js\n@keyframes gradient {\n0% { background-position: 0% 50%; }\n50% { background-position: 100% 50%; }\n100% { background-position: 0% 50%; }\n}\n.animated-gradient {\nbackground: linear-gradient(270deg, #ff7e5f, #feb47b);\nbackground-size: 400% 400%;\nanimation: gradient 15s ease infinite;\n}\n```\n\n## 13. 오버레이\n\n<div class=\"content-ad\"></div>\n\n문제: 이미지에 오버레이 추가하기\n\n해결책: `::after` 가상 요소 사용하세요.\n\n```js\n.image-overlay {\nposition: relative;\n}\n.image-overlay::after {\ncontent: '';\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nheight: 100%;\nbackground-color: rgba(0, 0, 0, 0.5); /* 투명도 50%인 검은색 */\n}\n```\n\n## 14. 이미지 호버 효과\n\n<div class=\"content-ad\"></div>\n\n문제: 이미지에 호버 효과 추가하기.\n\n해결책: `:hover`를 사용하세요.\n\n```css\n.image-hover img {\n    transition: transform 0.3s;\n}\n.image-hover img:hover {\n    transform: scale(1.1);\n}\n```\n\n## 15. CSS 변수\n\n<div class=\"content-ad\"></div>\n\n문제: 테마 변경을 간단하게하기.\n\n해결책: CSS 변수를 사용하세요.\n\n```css\n:root {\n    --primary-color: #3498db;\n    --secondary-color: #2ecc71;\n}\nbutton {\n    background-color: var(--primary-color);\n    color: var(--secondary-color);\n}\n```\n\n## 16. 이미지용 Object Fit\n\n<div class=\"content-ad\"></div>\n\n문제: 이미지가 왜곡되지 않고 컨테이너 내에 잘 맞게 표시되는지 확인합니다.\n\n해결책: `object-fit`를 사용하세요.\n\n```css\n.fit-image {\n    width: 100%;\n    height: 200px;\n    object-fit: cover; /* 또는 contain, fill 등 */\n}\n```\n\n## 17. 줄 바꿈 방지\n\n<div class=\"content-ad\"></div>\n\n문제: 텍스트가 여러 줄로 나뉘는 것을 방지해야 합니다.\n\n해결책: `white-space`를 사용하세요.\n\n```css\n.no-break {\nwhite-space: nowrap;\n}\n```\n\n## 18. 전체 너비 요소\n\n<div class=\"content-ad\"></div>\n\n문제: 요소가 부모 요소의 전체 너비를 차지하도록 만들기.\n\n해결책: `width: 100vw`를 사용하세요.\n\n```css\n.full-width {\nwidth: 100vw;\nmargin-left: calc(50% - 50vw);\nmargin-right: calc(50% - 50vw);\n}\n```\n\n## 19. SVG 아이콘 색상 제어\n\n<div class=\"content-ad\"></div>\n\n문제: CSS를 사용하여 인라인 SVG의 색상 변경하기\n\n해결책: `currentColor`을 사용하세요.\n\n```css\n.icon {\nfill: currentColor;\n}\n.icon-container {\ncolor: #ff6347;\n}\n```\n\n## 20. 이름이 지정된 영역을 사용한 CSS 그리드\n\n<div class=\"content-ad\"></div>\n\n문제: 이름이 지정된 그리드 영역으로 복잡한 레이아웃을 생성하려면.\n\n해결책: `grid-template-areas`를 사용하세요.\n\n```js\n.grid-container {\n  display: grid;\n  grid-template-areas:\n    'header header'\n    'sidebar content'\n    'footer footer';\n  grid-gap: 10px;\n}\n.header {\n  grid-area: header;\n}\n.sidebar {\n  grid-area: sidebar;\n}\n.content {\n  grid-area: content;\n}\n.footer {\n  grid-area: footer;\n}\n```\n\n## 21. CSS Transtions\n\n<div class=\"content-ad\"></div>\n\n문제: 상태 간의 부드러운 전환.\n\n해결 방법: `transition`을 사용하세요.\n\n```css\n.transition-button {\nbackground-color: #3498db;\ntransition: background-color 0.3s;\n}\n.transition-button:hover {\nbackground-color: #2ecc71;\n}\n```\n\n## 22. CSS 애니메이션\n\n<div class=\"content-ad\"></div>\n\n문제: 요소에 애니메이션 추가하기\n\n해결책: `@keyframes`을 사용하세요.\n\n```js\n@keyframes bounce {\n0%, 100% { transform: translateY(0); }\n50% { transform: translateY(-20px); }\n}\n.bounce {\nanimation: bounce 2s infinite;\n}\n```\n\n## 23. CSS 모양 아웃사이더들\n\n<div class=\"content-ad\"></div>\n\n문제: 비직사각형 모양 만들기.\n\n해결책: `clip-path`를 사용하세요.\n\n```js\n.clip-path {\nclip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\nbackground-color: #3498db;\nwidth: 200px;\nheight: 200px;\n}\n```\n\n## 24. 다크 모드\n\n<div class=\"content-ad\"></div>\n\n문제: 다크 모드 구현하기.\n\n해결책: CSS 변수와 미디어 쿼리 사용하기.\n\n```css\n:root {\n  --bg-color: #fff;\n  --text-color: #000;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --bg-color: #333;\n    --text-color: #fff;\n  }\n}\n\nbody {\n  background-color: var(--bg-color);\n  color: var(--text-color);\n}\n```\n\n## 25. CSS 카운터\n\n<div class=\"content-ad\"></div>\n\n문제: 카운터 만들기\n\n해결방법: `counter-reset` 및 `counter-increment`을 사용하세요.\n\n```css\n.counter-list {\n    counter-reset: section;\n}\n.counter-list li::before {\n    counter-increment: section;\n    content: \"섹션 \" counter(section) \": \";\n}\n```","ogImage":{"url":"/assets/img/2024-05-17-25CSSHacksEveryDeveloperShouldKnow_0.png"},"coverImage":"/assets/img/2024-05-17-25CSSHacksEveryDeveloperShouldKnow_0.png","tag":["Tech"],"readingTime":7},{"title":"리액트에서 화면 크기에 맞게 반응형으로 텍스트 크기 조정하기","description":"","date":"2024-05-17 21:22","slug":"2024-05-17-AdaptatextsizetoscreensizewithdifferentratioinReact","content":"\n\n현대 웹 개발의 중요한 측면 중 하나는 반응형 웹 디자인을 만드는 것입니다. 다양한 디바이스의 존재로 인해 텍스트가 다양한 화면 크기와 비율에서 가독성이 좋고 심미적으로 매력적으로 보이도록 하는 것은 어려운 과제일 수 있습니다. 이 기사에서는 React 애플리케이션을 다룰 때 다양한 화면 비율에 맞게 텍스트 크기를 동적으로 조정하는 실용적인 해결책에 대해 살펴보겠습니다.\n\n# 과제 이해하기\n\n서로 다른 크기와 모양의 화면에 완벽하게 맞는 텍스트 블록이 필요한 시나리오를 상상해보세요. 이는 너비에 맞추는 것뿐만 아니라 높이도 고려해야 합니다. 예를 들어, 여러 열로 구성된 큰 화면의 경우 텍스트는 사용 가능한 공간을 효과적으로 활용하기 위해 적응해야 합니다. 화면 너비에만 의존하는 미디어 쿼리는 화면의 더 높은 부분에 미사용 공간이 남아 작은 크기의 텍스트를 만들어낼 수 있습니다. 따라서 뷰포트의 너비와 높이를 모두 고려하는 보다 세밀한 접근 방식이 필요합니다.\n\n# 기본 사항:\n\n<div class=\"content-ad\"></div>\n\n솔루션으로 들어가기 전에 사용될 몇 가지 개념을 기본적으로 이해하는 것이 중요합니다.\n\n먼저, CSS 단위에 대해 설명하겠습니다. 그런 다음, 리액트 컴포넌트 생명주기에 대해 자세히 알아보겠습니다. 리액트를 프레임워크로 사용하고 있지만, 동일한 원칙은 어떤 프레임워크 없이 순수한 JavaScript(프레임워크 없는 JavaScript)로도 적용할 수 있습니다.\n\n## CSS 단위 이해\n\n이 도전 과제를 효과적으로 해결하기 위해 CSS 단위에 대한 명확한 이해가 중요합니다. CSS 단위는 반응형 디자인의 구성 요소입니다. 다음은 가장 일반적으로 사용되는 몇 가지 단위입니다:\n\n<div class=\"content-ad\"></div>\n\n- 픽셀 (px): 화면에서 하나의 픽셀을 나타내는 가장 기본적인 단위입니다. 다른 요소에 따라 변경되지 않는 절대적인 단위입니다.\n- 뷰포트 너비 (vw): 이 단위는 뷰포트의 너비(브라우저 창의 가시 영역)의 1%에 대한 상대적인 값입니다. 예를 들어, 뷰포트가 1000px 너비라면 1vw는 10px입니다.\n- 뷰포트 높이 (vh): vw와 유사하지만 뷰포트의 높이에 상대적입니다. 따라서 1vh는 뷰포트 높이의 1%입니다.\n- 퍼센트 (%): 이 단위는 부모 요소의 크기에 상대적입니다. 레이아웃에 자주 사용되지만 텍스트에는 조심해야 합니다.\n- em과 rem: 이것들은 글꼴 상대적 크기입니다. em은 요소의 글꼴 크기에 상대적이며 rem은 루트 요소의 글꼴 크기에 상대적입니다.\n\n## 리액트 컴포넌트와 라이프사이클\n\n리액트는 개발자들이 재사용 가능한 UI 컴포넌트를 만들 수 있도록 합니다. 우리의 맥락에서, 우리는 함수형 컴포넌트를 다룰 것입니다.\n\n리액트 컴포넌트에는 라이프사이클이라고 하는 것이 있습니다 — 컴포넌트의 생성부터 언마운트까지 일련의 이벤트가 발생합니다. useState와 같은 훅을 사용하여 상태 관리하거나 window 크기 조정과 같은 부수 효과에 대응하기 위한 useEffect를 통해, 리액트는 동적 행위를 다루는 강력한 방법을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# useState\n\nuseState은 React에서 함수 컴포넌트에 상태를 추가할 수 있게 해주는 훅(React의 특별한 함수)입니다. 기본적으로 함수에 인자로써 사용되며, 컴포넌트의 어떤 측면을 변경할 수 있게 합니다. 예를 들어, 숫자를 표시하는 페이지가 있고 이 숫자를 증가시킬 수 있는 두 개의 버튼이 있다고 가정해보세요. 숫자는 상태여야만 컴포넌트를 재구성할 수 있습니다.\n\nuseState은 값을 반환하고 값을 설정하는 함수를 제공합니다. 아래의 예시에서 \"Increase\"를 클릭할 때마다, 숫자를 1씩 증가시키기 위해 update 함수인 setNumber를 호출합니다. 숫자가 상태에 저장되어 있기 때문에 React는 변경될 때마다 업데이트된 점수로 컴포넌트를 다시 렌더링해야 함을 압니다. 이를 통해 표시가 현재 점수와 동기화됩니다. useState가 없다면 버튼을 클릭해도 페이지의 숫자가 변경되지 않을 것입니다.\n\n```js\nimport {useState} from React\n\nconst Scoreboard = () => {\n\nconst [number, setNumber] = useState(0);\n\nreturn(<>\n  <button onClick={() => setNumber(number + 1)}>Increase</button>\n  <p>{number}</p>\n</>\n)\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# useEffect\n\nReact에서 작업할 때, 코드는 해석적이 아닙니다. 즉, 어떤 코드가 실행되고 있는지 정확히 알 수 없다는 것을 의미합니다. 때로는 어떤 계산을 수행하기 전에 모든 것이 렌더링되었는지 확인해야 할 수도 있습니다. 이럴 때 useState가 유용합니다.\n\n웹페이지가 숫자를 표시하고 해당 숫자를 증가시키거나 감소시키는 버튼으로 제어되는 예제를 계속해 보겠습니다. 만약 이 숫자가 변경될 때마다 특정 작업이나 계산을 수행하고 싶다면, 예를 들어 해당 숫자를 로깅하거나 UI의 다른 부분을 업데이트하는 경우입니다.\n\n## 숫자 표시 예제\n\n<div class=\"content-ad\"></div>\n\n```js\nuseEffect(() => {\n  // 이 코드는 `number`가 업데이트된 후에 실행됩니다\n  console.log(\"숫자가 변경되었습니다:\", number);\n  // 이 숫자를 기반으로 다른 것을 업데이트하고 싶을 수도 있습니다\n  // 예를 들어, 숫자가 짝수인지 홀수인지에 따라 배경색을 변경할 수 있습니다\n  if (number % 2 === 0) {\n    document.body.style.backgroundColor = \"lightblue\";\n  } else {\n    document.body.style.backgroundColor = \"lightpink\";\n  }\n}, [number]); // 이는 React에게 `number`가 변경될 때 효과를 실행하도록 알려줍니다\n```\n\n이 코드에서는 useEffect가 숫자 상태를 관찰합니다. 숫자가 변할 때(버튼 클릭으로 인해), useEffect는 코드를 실행합니다. 현재 숫자를 기록하고 숫자가 짝수인지 홀수인지에 따라 배경색을 변경합니다. useEffect는 useState 계산 후에 함수가 실행되도록 보장합니다. 버튼의 onClick 핸들러 안에서 setNumber를 호출한 직후 동작을 수행하려고 하면 문제가 발생할 수 있습니다. 상태 업데이트(setNumber)는 즉시 발생하지 않습니다. React가 일정에 따라 예약되기 때문에 실제로 상태가 변경되기 전에 후속 코드가 실행될 수 있어 예상치 못한 동작을 유발할 수 있습니다. useEffect는 React가 새로운 상태로 구성 요소를 업데이트한 후에만 내부 코드가 실행되도록 보장하여 이 문제를 해결합니다.\n\n# 해결 방법:\n\n우리는 React에서 useState와 useEffect 훅을 사용하여 viewport 너비 (vw) 및 높이 (vh)의 변경에 따라 적응하는 반응형 텍스트 크기를 만들어 보겠습니다. 아래는 단계별 가이드입니다:\n\n\n<div class=\"content-ad\"></div>\n\n## 단계 1: 상태 설정하기\n\n먼저, useState를 사용하여 텍스트 스타일의 초기 상태를 정의합니다. 이 상태는 글ꔼ 크기, 줄 높이 및 글ꔼ 굵기를 보관합니다.\n\n```js\nconst [paragraphStyle, setStyle] = useState({\n  fontSize: \"3vw\",\n  lineHeight: \"4vw\",\n  fontWeight: \"100\",\n});\nconst [catchSentenceStyle, setCatchSentenceStyle] = useState({\n  fontSize: \"7vw\",\n  lineHeight: \"9vw\",\n  fontWeight: \"600\",\n});\n```\n\n## 단계 2: 글ꔼ 크기 동적으로 계산하기\n\n<div class=\"content-ad\"></div>\n\n우리는 viewport의 너비와 높이에 기반하여 동적으로 글꼴 크기를 계산하는 updateStyle 함수를 생성합니다.\n\n```js\nconst updateStyle = () => {\n  const vw = window.innerWidth * 0.0095;\n  const vh = window.innerHeight * 0.0095;\n  const responsiveSize = vh + vw;\n  const cresponsiveSize = responsiveSize * 3.5;\n```\n\n```js\n  // 화면 비율에 따른 추가 조정 적용을 위해 주석을 해제하세요\n  // if (screenRatio < 0.74 && screenRatio > 0.5) {\n  //   responsiveSize = responsiveSize * 1.3 * screenRatio;\n  //   cresponsiveSize = cresponsiveSize * 1.3 * screenRatio;\n  // }\n  setStyle({\n    fontSize: responsiveSize + \"px\",\n    lineHeight: responsiveSize * 1.3 + \"px\",\n    fontWeight: \"100\",\n  });\n  setCatchSentenceStyle({\n    fontSize: cresponsiveSize + \"px\",\n    lineHeight: cresponsiveSize * 1.1 + \"px\",\n    fontWeight: \"100\",\n  });\n};\n```\n\n## 단계 3: 창 크기 조정에 대한 응답\n\n<div class=\"content-ad\"></div>\n\nuseEffect 훅은 컴포넌트가 마운트될 때와 창 사이즈가 조정될 때 updateStyle을 호출하기 위해 사용됩니다.\n\n```js\nuseEffect(() => {\n  updateStyle();\n  window.addEventListener(\"resize\", updateStyle);\n  return () => window.removeEventListener(\"resize\", updateStyle);\n}, []);\n```\n\n## 단계 4: 스타일 적용\n\n마지막으로, 이 스타일을 컴포넌트의 텍스트 요소에 적용합니다.\n\n<div class=\"content-ad\"></div>\n\n```html\n<div\n  style={\n    padding: \"8vh 8vw\",\n    // additional styles...\n  }\n>\n  <p style={catchSentenceStyle}>Catchy sentence here.</p>\n  <p style={paragraphStyle}>Detailed paragraph here.</p>\n  {/* Additional paragraphs... */}\n</div>\n```\n\n이 솔루션을 통해 텍스트가 다양한 화면 비율에서 스케일링되며, 좋은 글꼴 크기로 조정되어 윈도우 높이 및 폭에 모두 적응합니다.\n\n# 결론\n\n텍스트 크기를 다른 화면 크기에 맞게 조정하는 것은 반응형 웹 디자인의 중요한 측면입니다. React의 useState 및 useEffect 훅을 활용하여 개발자는 화면 너비뿐만 아니라 높이에도 조절되는 텍스트를 생성할 수 있으며, 가독성과 화면 공간의 최적 활용을 보장합니다. 이 접근 방식은 다양한 장치와 화면 크기에 걸쳐 사용자 경험을 향상시킵니다.\n\n\n<div class=\"content-ad\"></div>\n\n이제 이러한 개념을 이해했으니, 2600px에서처럼 응용 프로그램에서 특정 브레이크포인트를 관리하는 방법에 접근할 수 있습니다. 이는 주방에 특별한 규칙이 있는 것과 같습니다: \"2600 명 이상의 고객이 있을 때 다른 메뉴로 전환해야 합니다.\" 웹 개발에서 브레이크포인트는 웹사이트 레이아웃이 다른 화면 크기나 방향에 맞게 변경되는 지점을 의미합니다.\n\n우리의 예시 컴포넌트에서 2600px에서의 브레이크포인트를 관리하는 것은 updateStyle 함수에서 화면 너비를 확인하고 너비가 2600px를 초과할 때 스타일을 조정하는 조건을 설정하는 것을 포함합니다. 이는 화면이 커지더라도 텍스트 크기와 레이아웃이 최적이며 가독성이 유지되도록 보장하며, 항상 우리 메뉴가 고객 수에 적합한지 확인하는 것과 같은 역할을 합니다. 이 도전에 도전해 보고 결과를 게시해보세요!","ogImage":{"url":"/assets/img/2024-05-17-AdaptatextsizetoscreensizewithdifferentratioinReact_0.png"},"coverImage":"/assets/img/2024-05-17-AdaptatextsizetoscreensizewithdifferentratioinReact_0.png","tag":["Tech"],"readingTime":7},{"title":"HTML, CSS 및 Javascript를 사용한 최고의 멋진 슬라이더 효과 만드는 방법","description":"","date":"2024-05-17 21:21","slug":"2024-05-17-CreateATopCrazySliderEffectsUsingHTMLCSSandJavascript","content":"\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1140/1*5lwNm-FVTRS5eGwUvm8Hbw.gif\" />\n\n웹사이트의 사용자 경험을 크게 향상시킬 수 있는 멋진 상호작용 슬라이더를 만들어보세요. 이 기사에서는 HTML, CSS 및 JavaScript를 사용하여 최고 수준의 멋진 슬라이더 효과를 구축하는 과정을 안내합니다. 초보자든 숙련된 개발자든 상관없이 이 자습서를 통해 시각적으로 매력적이고 매우 기능적인 슬라이더를 만들 수 있을 것입니다.\n\n이 쉽게 이해할 수 있는 비디오를 시청해보세요 🙏😁\n\n## 단계 1: HTML 구조 설정\n\n<div class=\"content-ad\"></div>\n\n먼저, 슬라이더의 기초 역할을 하는 간단한 HTML 구조가 필요합니다. 다음은 설정 방법에 대한 예시입니다:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Top Slider</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <link href=\"https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css\" rel=\"stylesheet\" />\n</head>\n\n<body>\n    <div class=\"gallery-wrap\">\n\n        <div class=\"gallery\">\n            <div>\n                <span><img src=\"./images/image-1.png\" alt=\"\"></span>\n                <span><img src=\"./images/image-2.png\" alt=\"\"></span>\n                <span><img src=\"./images/image-3.png\" alt=\"\"></span>\n                <span><img src=\"./images/image-4.png\" alt=\"\"></span>\n                <span><img src=\"./images/image-5.png\" alt=\"\"></span>\n                <span><img src=\"./images/image-6.png\" alt=\"\"></span>\n            </div>\n\n        </div>\n\n        <div class=\"Btn-group\">\n            <span><i id=\"topBtn\" class=\"ri-arrow-up-fill\"></i></span>\n            <span><i id=\"downBtn\" class=\"ri-arrow-down-fill\"></i></span>\n        </div>\n    </div>\n\n    <script src=\"app.js\"></script>\n</body>\n\n</html>\n```\n\n## 단계 2: CSS로 스타일링\n\n다음은 슬라이더를 CSS로 스타일링하여 멋지게 보이고 원활하게 작동하도록하는 샘플 CSS 코드입니다:\n\n<div class=\"content-ad\"></div>\n\n```css\n*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\nhtml,body {  \n    height: 100vh;\n    width: 100%;\n    background-color: #191919;\n    overflow: hidden;\n}\n.gallery-warp{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 10% auto;\n    flex-direction: column;\n}\n.gallery{\n    display: flex;\n    width: 27%;\n    height: 587px;\n    overflow-y: scroll;\n}\n.gallery::-webkit-scrollbar{\n    display: none;\n}\n.gallery div{\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n}\n.gallery div img{\n    filter: grayscale(100%);\n    width: 100%;\n    transition: transform 0.5s;\n}\n.gallery div img:hover{\n    filter: grayscale(0);\n    cursor: pointer;\n    transform: scale(1.1);\n}\n.Btn-group{\n    margin-top: 1rem;\n    display: flex;\n    gap: 18px;\n}\n.Btn-group span i{\n    padding: 4px 4px;\n    border: 1px solid;\n    font-size: 24px;\n    color: #fff;\n    border-radius: 20px;\n    cursor: pointer;\n    transition: all ease-in-out 0.8s;\n}\n.Btn-group span i:hover{\n    background-color: #fff;\n    color: #191919;\n    border: none;\n}\n```\n## Step 3: Adding JavaScript for Functionality\n\nFinally, add JavaScript to bring the slider to life. This script will handle the slide transitions and navigation functionality:\n\n```js\nlet scrollContainer = document.querySelector(\".gallery\");\nlet topBtn = document.getElementById(\"topBtn\")\nlet downBtn = document.getElementById(\"downBtn\");\n\nscrollContainer.addEventListener(\"wheel\", (e) => {\n    e.preventDefault();\n    scrollContainer.style.scrollBehavior = \"auto\";\n    scrollContainer.scrollTop += e.deltaY;\n})\n\ntopBtn.addEventListener(\"click\", () => {\n    scrollContainer.style.scrollBehavior = \"smooth\";\n    scrollContainer.scrollTop += 610;\n})\ndownBtn.addEventListener(\"click\", () => {\n    scrollContainer.style.scrollBehavior = \"smooth\";\n    scrollContainer.scrollTop -= 600;\n})\n```\n\n<div class=\"content-ad\"></div>\n\n# 향상 및 고급 기능\n\n비디오에서 기본 슬라이더에 추가할 수 있는 가능한 향상 방안을 제안합니다:\n\n- 3D 전환: CSS 변형을 이용하여 슬라이드 전환에 3D 효과를 추가합니다.\n- Parallax 효과: 패럴랙스 스크롤링을 구현하여 깊이 효과를 부여합니다.\n- 고급 애니메이션: GSAP(그린속 애니메이션 플랫폼)과 같은 라이브러리를 사용하여 더 복잡한 애니메이션을 만듭니다.","ogImage":{"url":"/assets/img/2024-05-17-CreateATopCrazySliderEffectsUsingHTMLCSSandJavascript_0.png"},"coverImage":"/assets/img/2024-05-17-CreateATopCrazySliderEffectsUsingHTMLCSSandJavascript_0.png","tag":["Tech"],"readingTime":4},{"title":"css 애니메이션을 위한 베지에 곡선(Bezier Curves) 이해하기","description":"","date":"2024-05-17 21:20","slug":"2024-05-17-UnderstandingBzierCurves","content":"\n\n![Understanding Bézier Curves](/assets/img/2024-05-17-UnderstandingBzierCurves_0.png)\n\n베지에 곡선은 어디에나 있어요. 당신의 CSS 애니메이션 타이밍 함수부터 그래픽 편집기, 타이포그래피, 자동차 디자인 등등 많은 곳에서 사용돼요. 부드러운 곡선을 모델링하려면, 아마도 베지에 곡선을 사용하게 될 거에요.\n\n저에게는 이러한 곡선들이 개발자로서 일상생활에 수학적 영향을 직접 보여주는 완벽한 예이에요. 우리가 추상화의 산천 아래에 무엇이 있는지 정확하게 이해하길 바라는 것은 아니더라도, (저는 확실히 하고 싶지 않지만) 약간의 관심을 가지고 깊게 이해하면 가치가 있다고 생각해요.\n\n이 글의 목표는 바로 이에요. 이후에 베지에 곡선이 정확히 무엇인지, 왜 사용하는지, 어떻게 동작하는지에 대한 수학적이고 직관적인 이해를 가지게 될 거에요.\n\n<div class=\"content-ad\"></div>\n\n# 베지에 곡선이란?\n\n베지에 곡선은 매개변수 곡선으로 (매개변수 t가 0부터 1까지 변하는) 제어점 세트에 의해 정의된 곡선입니다. 이러한 점들 간의 위치는 곡선의 모양을 정의합니다.\n\n![베지에 곡선](/assets/img/2024-05-17-UnderstandingBzierCurves_1.png)\n\n만약 Adobe Illustrator나 Figma와 같은 그래픽 편집 소프트웨어를 사용해본 적이 있다면, 이미 이러한 제어점들이 어떻게 작용하는지 보았을 겁니다. 아래 gif에서 각 점이 움직일 때 곡선의 모양이 그에 따라 어떻게 변하는지 주목해보세요.\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*j6VPAteSfVSRWswKIeQtPw.gif)\n\nYou can also use as many control points as you like. The more control points you add, the greater the control you have over the final shape of your curve. As an example, the cubic-bezier function in CSS uses a bézier curve with 4 points (hence cubic) that describe the evolution of your animation.\n\n## What’s going on?\n\nThat’s great and all, but how do we get a curve from just positioning a bunch of points around?\n\n\n<div class=\"content-ad\"></div>\n\n그 답은 베지에 곡선의 수학적 기초인 버네스타인 다항식에 있습니다. n차 버넨스타인 다항식은 각각 버넨스타인 계수에 의해 곱해진 버넨스타인 기저 다항식의 합으로 정의됩니다.\n\n![그림 1](/assets/img/2024-05-17-UnderstandingBzierCurves_2.png)\n\n![그림 2](/assets/img/2024-05-17-UnderstandingBzierCurves_3.png)\n\n이러한 공식들에 집착하지 마세요. 필요한 것은 이 중에서 몇 가지 주요한 점뿐이에요.\n\n<div class=\"content-ad\"></div>\n\n먼저, 그들의 목적이 무엇인가요? 얼마나 간략하게 말씀드릴까요? Bernstein 다항식은 처음에는 닫힌 구간 내의 임의의 연속 함수를 근사화하는 방법으로 사용되었습니다 (자세한 내용은 Stone-Weierstrass 정리를 참조하세요). 다시 말해, 이러한 다항식을 사용함으로써 우리는 원하는 거의 모든 함수(어떤 곡선도 모델링 가능)를 근사화할 수 있습니다. 이는 다항식이 일반적으로 다른 유형의 함수보다 훨씬 간단하게 계산하고 조작할 수 있기 때문에 정말 유용합니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:440/1*hoKuMOP-U-V2RSLGzwvatg.gif)\n\n둘째, 이 근사화는 정확히 어떻게 일어날까요? Bernstein 계수를 기억하시나요? 그것이 그들의 역할입니다! 수식에서 기저 다항식이 항상 같은 것을 주목하세요 (차수 n에 따라만 달라집니다) - 계수가 실제로 대상 함수를 근사하는 역할을 합니다. 함수 f를 근사하는 정확한 공식은 다음과 같습니다:\n\n![이미지](/assets/img/2024-05-17-UnderstandingBzierCurves_4.png)\n\n<div class=\"content-ad\"></div>\n\n베지에 곡선이 정확히 무엇인가요? 베르슈타인 다항식이며, 여기서 베르슈타인 계수는 제어점이 됩니다! 따라서 베지에 곡선을 구축할 때 우리는 사실적인 함수를 근사하는 것이죠! 이것은 베르슈타인 다항식의 직접적인 응용입니다.\n\n이것이 바로 베지에 곡선의 명시적/수학적 정의라고 알려진 것입니다. 이제 살펴볼 또 다른 방법으로는 베지에 곡선을 볼 때 더 강력하고 직관적인 방식이 있습니다.\n\n# 다른 접근 방법\n\n베지에 곡선에는 각각의 차수(제어점 수)에 따라 구분되는 몇 가지 유명한 형식이 있습니다. 선형, 이차 및 삼차 베지에 곡선이 그 중 몇 가지입니다. 이 주제를 공부할 때, 베르슈타인 다항식에 기반한 공식을 적용하여 얻을 수 있는 이들의 공식을 아마도 만날 것입니다.\n\n<div class=\"content-ad\"></div>\n\n![UnderstandingBézierCurves_5](/assets/img/2024-05-17-UnderstandingBzierCurves_5.png)\n\n다시 말하지만, 이러한 공식에 집착하지 마세요. 이 중요한 점 하나만 기억하면 됩니다.\n\n선형 베지어 곡선의 수식에 주목하세요. (1-t)와 t가 어떤 것의 곱으로 나타나는 것을 주의깊게 살펴보세요. 맥락 없이는 그저 기본적인 선형 함수일뿐입니다. 그러나 이차 공식에서 약간 이동하면 어떻게 되는지 살펴보세요:\n\n![UnderstandingBézierCurves_6](/assets/img/2024-05-17-UnderstandingBzierCurves_6.png)\n\n<div class=\"content-ad\"></div>\n\n패턴 (1-t) 및 t가 반복됩니다. 우리는 이차 곡선 P0P1P2를 (1-t) * (베지에(P0P1)) + t * (베지에(P1P2))로 표현하고 있습니다. (다양한 종류의 베지에 곡선이 있는 이전 이미지로 돌아가서 제어점을 연결하는 선에 주목해주세요). 실제로 이를 높은 차수의 곡선에 대해 테스트해보면 그것이 성립함을 볼 수 있습니다. 여기서 새로운 재귀적인 방법으로 베지에 곡선을 정의할 수 있습니다:\n\n![image](/assets/img/2024-05-17-UnderstandingBzierCurves_7.png)\n\n또한 수학적 정의 (버너스타인 다항식)에서 비롯된 원래 방식과 다른 베지에 곡선의 점을 평가하는 새로운 방법을 얻을 수 있습니다.\n\n우리가 이차 베지에 곡선에서 t=0.5 지점을 계산하려고한다고 상상해보세요. 방금 본 바와 같이, 우리는 이 곡선을 P0, P1 및 P1, P2가 되는 두 개의 선형 베지에 곡선으로 표현할 수 있습니다. 새로운 재귀 공식에 0.5를 대입함으로써, 우리는 P0P1 선상의 t=0.5를 계산하고, 다음으로 P1P2 선상의 t=0.5를 계산합니다. 이로서 우리는 두 개의 새로운 점을 얻게 되는데, 이 두 중간점을 다시 다른 선으로 연결하고 (더 작은 차수의 곡선을 곱하는 (1-t) 및 t를 기억하세요) t=0.5의 최종 위치를 계산할 수 있게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n현재 상황을 시각화해 드릴게요:\n\n![Visualization 1](https://miro.medium.com/v2/resize:fit:480/1*MTvJLHEDRpAcAFY25iQeww.gif)\n\n각 평가된 지점 t마다, 먼저 작은 차수 곡선들 각각에서 이를 계산한 후 이들을 연결하여 결과 선상에서 원하는 지점을 계산합니다. 이러한 패턴은 더 높은 곡선들에서도 반복됩니다:\n\n![Visualization 2](https://miro.medium.com/v2/resize:fit:480/1*NUV8KWFfKmevb_Z_L2A1hQ.gif)\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:480/1*jFpYqpzDRr0F6HppPpr9kA.gif)\n\n이것을 이해하는 것은 중요합니다. 왜냐하면 Bézier 곡선을 공부할 때 항상 나오는 특별한 주제인 De Casteljau 알고리즘의 설명이기 때문입니다.\n\n## De Casteljau의 알고리즘\n\n이 알고리즘은 곡선의 각 점을 평가하기 위해 이 재귀적 정의를 사용합니다. 이는 계산을 단계별로 나누며, 첫 번째 단계에는 개별 제어점이 있고, 최종 단계에는 원하는 점이 있으며, 중간 단계에는 재귀적 정의를 통해 계산하는 모든 중간 점들이 있습니다. 어떻게 3차 곡선에서 작동하는지 살펴봅시다:\n  \n\n<div class=\"content-ad\"></div>\n\n\n![UnderstandingBzierCurves_8](/assets/img/2024-05-17-UnderstandingBzierCurves_8.png)\n\n따라서, 레벨 0의 각 포인트가 제어 포인트 자체임을 감안할 때, 레벨 j의 임의의 점 Pi에 대해, De Casteljau 알고리즘은 해당 값이 다음과 같을 것을 알려줍니다:\n\n![UnderstandingBzierCurves_9](/assets/img/2024-05-17-UnderstandingBzierCurves_9.png)\n\n언제나, 이것이 베지에 곡선에서 재귀 패턴을 사용하고 있다는 점을 기억해 주세요. 이는 버너스타인 다항식에서 유도되었습니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 왜 베지에 곡선인가요?\n\n우리가 베지에 곡선에 대해 이야기한 모든 것을 고려할 때, 그것들이 왜 중요한 것인지 궁금하십니까? 왜 우리는 그것들을 이렇게 많이 사용하는 걸까요?\n\n기본적으로 이들은 무한대로 확장 가능한 곡선을 작성하는 방법입니다. 우리는 원하는 대로 세부적으로 만들 수 있기 때문에, 수퍼 고차 커브를 만들지 않고 작은 차수의 커브를 이어붙이기만 하면 거의 모든 원하는 커브를 얻을 수 있습니다.\n\n타이포그래피의 대표적인 예를 들어보겠습니다. 베지에 곡선은 우리에게 간단한 고정폭 서체에서부터 아름다운 표시 서체까지 다양한 서체를 만들 수 있게 해줍니다!\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-17-UnderstandingBzierCurves_10.png\" />\n\n# 마무리\n\n이 글에서 배운 모든 것을 요약해보면:\n\n- Bézier 곡선은 제어점 집합에 의해 정의된 매개변수 곡선입니다.\n- 그들의 수학적 기원은 Bernstein 다항식에서 왔는데, 이것은 실제 함수를 근사하는 방법입니다.\n- Bézier 곡선은 제어 점이 Bernstein 계수 자리를 차지하는 Bernstein 다항식입니다.\n- Bézier 곡선은 재귀적이며, Pn 점으로 된 각 Bézier는 Bézier 곡선 P0Pn-1 및 P1Pn의 선형 보간(선)으로 나타낼 수 있습니다.\n- De Casteljau 알고리즘은 임의의 Bézier 곡선의 점을 계산하기 위해 이 재귀 관계를 사용합니다.\n- Bézier 곡선은 무한대로 확장이 가능하며, 원하는 거의 모든 곡선을 만들 수 있게 해줍니다.","ogImage":{"url":"/assets/img/2024-05-17-UnderstandingBzierCurves_0.png"},"coverImage":"/assets/img/2024-05-17-UnderstandingBzierCurves_0.png","tag":["Tech"],"readingTime":6},{"title":"프론트엔드 개발자를 위한 CSS 팁","description":"","date":"2024-05-17 21:18","slug":"2024-05-17-MyULTIMATECSSCheatSheetfromBeginnertoPro","content":"\n\n## 개발자가 알아야 할 100가지 CSS 속성\n\n![CSS Cheat Sheet](/assets/img/2024-05-17-MyULTIMATECSSCheatSheetfromBeginnertoPro_0.png)\n\n웹 애플리케이션을 만들고 스타일링하는 것을 좋아하며 CSS가 제가 생각하고 이야기하는 가장 좋아하는 것입니다.\n\n4년의 경험을 통해 많은 것을 배웠고, 이 기사에서 그 지식을 여러분과 공유하고 싶습니다.\n\n<div class=\"content-ad\"></div>\n\n오늘은 모든 사람을 위한 궁극적인 CSS 치트 시트를 제공하기 위해 모든 것을 다 할 거에요 - 절대 초보자부터 궁극의 전문가까지.\n\n마지막으로, 아무도 모르는 최고의 CSS 한 줄 코드 몇 가지를 보여드릴 테니, 이를 통해 많은 작업을 절약할 수 있을 거에요.\n\n편안히 앉아서 즐기고 나중을 위해 저장하세요!\n\n# 초보자 레벨\n\n<div class=\"content-ad\"></div>\n\n셀렉터: `element`\n지정된 타입의 모든 요소를 선택합니다.\n\n셀렉터: `#id`\n지정된 id를 가진 요소를 선택합니다.\n\n셀렉터: `.class`\n지정된 클래스를 가진 모든 요소를 선택합니다.\n\n속성: color\n텍스트의 색상을 설정합니다.\n예시:\n\n<div class=\"content-ad\"></div>\n\n```css\np {\n color: blue;\n }\n```\n\n속성: font-size\n글꼴 크기를 설정합니다.\n예시:\n\n```css\nh1 {\n font-size: 24px;\n }\n```\n\n속성: background-color\n배경 색상을 설정합니다.\n예시:\n\n<div class=\"content-ad\"></div>\n\n\n```css\nbody {\n background-color: #f0f0f0;\n }\n```\n\n\nProperty: margin\nSets the margin properties.\nExample:\n\n```css\n.container {\n margin: 10px;\n }\n```\n\nProperty: padding\n\n\n<div class=\"content-ad\"></div>\n\n패딩 속성을 설정합니다.\n예시:\n\n```js\n.box {\n  padding: 20px;\n}\n```\n\n속성: display\n요소의 표시 방법을 설정합니다.\n예시:\n\n```js\n.block {\n  display: block;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경해주세요.\n\nProperty: position\nSets the positioning method.\nExample:\n\n```js\n.absolute {\n position: absolute;\n top: 0;\n left: 0;\n }\n```\n\nProperty: width\nSets the width of an element.\nExample:\n\n```js\nimg {\n width: 100px;\n }\n```\n\n<div class=\"content-ad\"></div>\n\n프로퍼티: 높이\n요소의 높이를 설정합니다.\n예시:\n\n```js\n.header {\n height: 80px;\n }\n```\n\n# 중급 레벨\n\n프로퍼티: 글꼴 패밀리\n글꼴 패밀리를 설정합니다.\n예시:\n\n<div class=\"content-ad\"></div>\n\n```json\nbody {\n font-family: Arial, sans-serif;\n }\n```\n\n속성: font-weight\n글꼴의 굵기를 설정합니다.\n예시:\n\n```json\n.bold-text {\n font-weight: bold;\n }\n```\n\n속성: text-transform\n텍스트 대문자화를 제어합니다.\n예시:\n\n\n<div class=\"content-ad\"></div>\n\n```js\nbutton {\n  cursor: pointer;\n}\n```\n\n속성: 배경 이미지\n요소에 하나 이상의 배경 이미지를 설정합니다.\n예시:\n\n```js\n.hero-section {\n  background-image: url('hero.jpg');\n}\n```\n\n속성: 배경 위치\n배경 이미지의 시작 위치를 설정합니다.\n예시:\n\n<div class=\"content-ad\"></div>\n\n```js\n.header {\n background-position: center;\n }\n```\n\n속성: background-repeat\n배경 이미지가 반복되는 방식을 설정합니다.\n예시:\n\n```js\n.pattern {\n background-repeat: repeat-x;\n }\n```\n\n속성: background-size\n배경 이미지의 크기를 설정합니다.\n예시:\n\n<div class=\"content-ad\"></div>\n\n```css\n.cover-image {\n background-size: cover;\n }\n```\n\n속성: 투명도\n투명도 수준을 설정합니다.\n예시:\n\n```css\n.overlay {\n opacity: 0.5;\n }\n```\n\n# 고급 레벨\n\n\n<div class=\"content-ad\"></div>\n\n속성: flex\n유연한 요소의 유연한 길이를 설정합니다.\n예시:\n\n```js\n.container {\n display: flex;\n }\n```\n\n속성: flex-direction\n유연한 컨테이너의 주 축 방향을 지정합니다.\n예시:\n\n```js\n.container {\n flex-direction: row;\n }\n```\n\n<div class=\"content-ad\"></div>\n\nProperty: flex-wrap\n플렉스 항목이 줄 바꿈해야 하는지를 지정합니다.\n예시:\n\n```js\n.container {\n flex-wrap: wrap;\n }\n```\n\nProperty: flex-grow\n플렉스 항목이 서로에 비해 어떻게 성장하는지를 지정합니다.\n예시:\n\n```js\n.item {\n flex-grow: 1;\n }\n```\n\n<div class=\"content-ad\"></div>\n\n속성: flex-shrink\n서로에 비해 얼마나 flex 항목이 줄어드는지를 지정합니다.\n예시:\n\n```js\n.item {\n  flex-shrink: 0;\n}\n```\n\n속성: flex-basis\nflex 항목의 초기 길이를 지정합니다.\n예시:\n\n```js\n.item {\n  flex-basis: 100px;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n프로퍼티: align-items\n플렉스 컨테이너의 교차 축을 따라 플렉스 아이템을 정렬합니다.\n예시:\n\n```js\n.container {\n align-items: center;\n }\n```\n\n프로퍼티: align-self\n개별 플렉스 아이템의 기본 정렬을 재정의할 수 있습니다.\n예시:\n\n```js\n.item {\n align-self: flex-end;\n }\n```\n\n<div class=\"content-ad\"></div>\n\n프로퍼티: justify-content\n플렉스 컨테이너의 주축을 따라 플렉스 아이템을 정렬합니다.\n예시:\n\n```js\n.container {\n justify-content: space-between;\n }\n```\n\n프로퍼티: grid-template-columns\n그리드 레이아웃에서 열의 크기를 지정합니다.\n예시:\n\n```js\n.container {\n display: grid;\n grid-template-columns: 1fr 2fr;\n }\n```\n\n<div class=\"content-ad\"></div>\n\n속성: grid-template-rows\n그리드 레이아웃에서 행의 크기를 지정합니다.\n예시:\n\n```js\n.container {\n display: grid;\n grid-template-rows: 100px auto;\n }\n```\n\n속성: grid-gap\n그리드 레이아웃에서 열과 행 사이의 간격을 설정합니다.\n예시:\n\n```js\n.container {\n display: grid;\n grid-gap: 10px;\n }\n```\n\n<div class=\"content-ad\"></div>\n\n속성: grid-auto-columns\n암시적 그리드 열의 크기를 지정합니다.\n예시:\n\n```js\n.container {\n display: grid;\n grid-auto-columns: 100px;\n}\n```\n\n속성: grid-auto-rows\n암시적 그리드 행의 크기를 지정합니다.\n예시:\n\n```js\n.container {\n display: grid;\n grid-auto-rows: 100px;\n}\n```\n\n<div class=\"content-ad\"></div>\n\nProperty: grid-auto-flow\n그리드 레이아웃에서 자동 배치 알고리즘이 작동하는 방식을 지정합니다.\n예시:\n\n```js\n.container {\n display: grid;\n grid-auto-flow: dense;\n }\n```\n\nProperty: grid-column\n그리드 열 내에서 그리드 항목의 크기와 위치를 지정합니다.\n예시:\n\n```js\n.item {\n grid-column: 2 / span 2;\n }\n```\n\n<div class=\"content-ad\"></div>\n\nProperty: grid-row\n그리드 항목의 크기 및 그리드 행 내 위치를 지정합니다.\n예시:\n\n```js\n.item {\n grid-row: 1 / span 2;\n }\n```\n\nProperty: grid-area\n요소의 크기 및 그리드 레이아웃 내 위치를 설정합니다.\n예시:\n\n```js\n.item {\n grid-area: 1 / 1 / span 2 / span 2;\n }\n```\n\n<div class=\"content-ad\"></div>\n\n이 상세한 CSS 치트 시트는 초보부터 고급 수준까지 다양한 속성 및 선택자를 다루며, 사용 예시를 통해 설명합니다. 특정 속성에 대한 질문이 있거나 추가 설명이 필요하다면 댓글로 자유롭게 질문해 주세요!\n\n이 기사가 도움이 되었기를 바랍니다. 여러분의 문제를 해결하는 데 도움이 되었기를 희망합니다! (새로운 문제가 발생하지 않길 바랍니다 ;-))\n\n즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-05-17-MyULTIMATECSSCheatSheetfromBeginnertoPro_0.png"},"coverImage":"/assets/img/2024-05-17-MyULTIMATECSSCheatSheetfromBeginnertoPro_0.png","tag":["Tech"],"readingTime":5},{"title":"앵귤러에서의 로컬 변경되었을 때 감지하는 방법","description":"","date":"2024-05-17 21:16","slug":"2024-05-17-LocalChangeDetectioninAngular","content":"\n\n\n![Local Change Detection in Angular](/assets/img/2024-05-17-LocalChangeDetectioninAngular_0.png)\n\nAngular 16 introduced Signals as a pivotal feature, setting the stage for future applications and laying the foundation for a zoneless environment. Signals operate reactively, enabling the generation of derived values or side effects through functions like signal(), computed(), and effect().\n\nThese Signals are instrumental in Angular’s shift from a component-centric rendering approach to one centered around Signals. The dependency graph created by Signals represents the application state. When this graph changes, Angular triggers a DOM update via Change Detection.\n\nFrom a framework’s perspective, the render process is just a side effect of a Signal change. By reacting to the Signals, Angular knows exactly when and what to update.\n\n\n<div class=\"content-ad\"></div>\n\n그것을 달성하기 위해서, 새로운 유형의 컴포넌트가 필요합니다. 새로운 Signal Component를 사용하면 Change Detection을 일으키는 것이 zone.js가 아니라 신호 자체가 됩니다.\n\n불행히도, Signal Components는 17버전에서 사용할 수 없습니다. 그래서 우리는 조금 더 기다려야 합니다.\n\n당연한 질문은: \"Signals로부터 어떤 혜택을 받을 수 있나요?\" 17에서는 대답이 있습니다: 지역 Change Detection입니다.\n\n글을 읽는 것보다 비디오를 선호하신다면, 여기에 하나가 있습니다:\n\n<div class=\"content-ad\"></div>\n\n# 성능이 떨어지는 변경 감지\n\n현재 Angular는 변경이 발생했는지 실질적으로 인식하지 못합니다. 그래서 zone.js와 변경 감지에 의존합니다.\n\nzone.js는 DOM 이벤트가 발생하거나 비동기 작업이 완료될 때 변경 감지를 트리거합니다.\n\n변경 감지는 전체 컴포넌트 트리를 통과하고 변경 사항을 검색해야 합니다. 변경 사항을 감지하면 해당 DOM 노드를 업데이트합니다.\n\n<div class=\"content-ad\"></div>\n\n이것은 전혀 변화가 없을 때도 변경 감지가 실행되므로 성능이 그리 좋지 않습니다.\n\n![Local Change Detection in Angular](/assets/img/2024-05-17-LocalChangeDetectioninAngular_1.png)\n\n부모 및 자식 컴포넌트가 있는 시나리오를 고려해보겠습니다. 부모 컴포넌트는 데이터 그리드를 표시하고, 자식 컴포넌트에는 마지막 업데이트 이후 경과된 시간을 보여주는 타이머가 있습니다:\n\n```typescript\n@Component({\n  selector: 'app-list',\n  template: `\n      <div>\n          <mat-table [dataSource]=\"dataSource\">\n              <ng-container matColumnDef=\"title\">\n                  <mat-header-cell *matHeaderCellDef> Title</mat-header-cell>\n                  <mat-cell *matCellDef=\"let element\">{ element.title }</mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"description\">\n                  <mat-header-cell *matHeaderCellDef> Country</mat-header-cell>\n                  <mat-cell *matCellDef=\"let element\">{ element.description }</mat-cell>\n              </ng-container>\n              <mat-header-row *matHeaderRowDef=\"displayedColumns\"/>\n              <mat-row *matRowDef=\"let row; columns: displayedColumns;\"/>\n          </mat-table>\n          <div>\n              @if (lastUpdate) {\n                  <app-timer [lastUpdate]=\"lastUpdate\"></app-timer>\n              }\n              <button mat-raised-button color=\"primary\" (click)=\"refresh()\">Refresh</button>\n          </div>\n      </div>\n      {logCd()}\n  `,\n  standalone: true,\n  imports: [MatTableModule, MatButtonModule, TimerComponent]\n})\nexport class ListComponent implements OnInit {\n  lastUpdate: Date | undefined\n  dataSource = new MatTableDataSource<Holiday[]>([]);\n  displayedColumns = ['title', 'description'];\n  ngOnInit() {\n    this.refresh()\n  }\n  refresh() {\n    fetch('https://api.eternal-holidays.net/holiday').then(res => res.json()).then(value => {\n      this.lastUpdate = new Date();\n      this.dataSource.data = value;\n    });\n  }\n  logCd() {\n    console.log('cd from list');\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n@Component({\n  selector: 'app-timer',\n  template: `<span>Last Updated: { lastUpdateInSeconds | number:'1.0-0' } Seconds</span> { logCd() }`,\n  standalone: true,\n  imports: [DatePipe, DecimalPipe]\n})\nexport class TimerComponent {\n  @Input() lastUpdate = new Date();\n  lastUpdateInSeconds = 0\n  constructor() {\n    setInterval(() => {\n      this.lastUpdateInSeconds = (new Date().getTime() - this.lastUpdate.getTime()) / 1_000;\n    }, 1000);\n  }\n  logCd() {\n    console.log('log from timer');\n  }\n}\n```\n\nTimerComponent은 매 초 간격으로 lastUpdateInSeconds를 업데이트합니다. 이 간격은 zone.js가 매 초마다 변경 감지를 트리거할 수 있도록 합니다.\n\n따라서 변경 감지가 시작되면 부모 구성 요소를 통해 데이터가 변경되었는지 확인합니다. 변경이 있으면 필요한 DOM 요소를 업데이트하고 TimerComponent로 이동합니다.\n\n즉, Angular는 매 초 ListComponent를 불필요하게 확인합니다.\n\n\n<div class=\"content-ad\"></div>\n\n이 컴포넌트의 logCd()은 체크가 실행될 때 마다 로그를 남깁니다. 현재로서는 매우 빈번하게 로그를 남깁니다.\n\n# OnPush\n\nComponent 데코레이터의 인기 있는 설정 중 하나는 ChangeDetectionStrategy:OnPush입니다. Angular가 변경 감지를 실행할 때 그 설정이 있는 컴포넌트를 만나면 중단합니다. 또한 해당 컴포넌트가 \"더러운\" 것으로 표시하는 플래그가 없는 한 그 하위 항목을 통과하지 않습니다.\n\n컴포넌트가 \"더러워\"지는 일반적인 기준은:\n\n<div class=\"content-ad\"></div>\n\n- 입력값이 객체 참조를 변경합니다.\n- 컴포넌트가 이벤트 핸들러를 실행합니다. 이벤트 핸들러가 없는 요소를 클릭하는 것만으로는 충분하지 않습니다.\n- 비동기 파이프가 적용되어 기본 Observable이 새 값을 방출합니다.\n- 시그널이 변경됩니다.\n\n\"더티 마킹\"이 변경 감지를 트리거하지 않는다는 점을 중요하게 알아두어야 합니다. 이 동작은 여전히 zone.js의 작업으로, 실행된 이벤트 핸들러가 있거나 비동기 작업이 종료될 때 비동기적으로 스케줄링됩니다.\n\nAngular가 컴포넌트를 \"더티\" 상태로 표시하면 해당 부모 컴포넌트에도 적용됩니다. 왜 이게 필요한 걸까요? 부모도 OnPush로 설정되어 있는 경우 CD가 자식 컴포넌트로 전파되지 않을 것입니다.\n\n다음 그림은 OnPush와 기본 전략을 사용한 변경 감지의 차이를 보여 줍니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Local Change Detection in Angular](/assets/img/2024-05-17-LocalChangeDetectioninAngular_2.png)\n\n![Local Change Detection in Angular](/assets/img/2024-05-17-LocalChangeDetectioninAngular_3.png)\n\n이 그림에서는 \"Dirty Marking\"이라는 별도의 프로세스가 변경 감지 전에 실행되는 것을 보여줍니다. 이는 속성 바인딩이 포함되지 않은 경우에만 해당됩니다. \"Dirty Checking\"도 변경 감지 중에 발생할 것입니다.\n\n따라서 TimerComponent가 ListComponent의 자식 요소인 한, 변경 감지는 ListComponent를 통과하여 해당 요소도 확인해야 합니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 함께 해요\n\nTimerComponent에만 OnPush를 설정해보세요. 그러면 로그가 ListComponent에서만 발생하는 것을 볼 수 있을 거예요. 그 이유는 OnPush가 구성 요소에 대해 zone.js를 비활성화하지 않기 때문이에요. 여전히 간격을 인식하고 변경 감지를 트리거하여 매 초마다 실행해요.\n\nTimerComponent는 어떤 기준(위의 목록 참조)도 해당되지 않아 '더티'로 표시되지 않습니다. 따라서 DOM이 업데이트되지 않아요. 비동기 작업은 변경 감지만 트리거하고 구성 요소를 '더티'로 표시하지는 않아요.\n\n새로 고침을 클릭하면 TimerComponent에서도 변경 감지가 트리거되는 것을 볼 수 있어요. 이는 @Input이 새 참조로 업데이트되었기 때문이에요.\n\n<div class=\"content-ad\"></div>\n\n만약 \"Updated\" 텍스트를 클릭하면 아무 변화가 없다는 것을 알 수 있어요. DOM 이벤트를 발생시켰지만 내부적으로 해당 이벤트를 처리할 이벤트 핸들러가 없어요.\n\n텍스트에 이벤트 리스너를 추가해봐요. 아무 동작을 하지 않아도 괜찮아요. 그냥 존재하는 것만으로도 충분해요. 클릭하면 Change Detection이 실행되는 것을 확인할 수 있을 거예요.\n\n이미 목록을 확인하고 있는데, async 파이프도 추가해보도록 해요:\n\n```js\n@Component({\n  selector: 'app-timer',\n  template: `<span class=\"px-2\">Last Updated: { lastUpdateInSeconds$ | async | number:'1.0-0' }\n      Seconds</span> { logCd() }`,\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [\n    DatePipe,\n    DecimalPipe,\n    AsyncPipe\n  ]\n})\nexport class TimerComponent {\n  @Input() lastUpdate = new Date();\n\n  lastUpdateInSeconds$ = interval(1000).pipe(map(() => this.lastUpdateInSeconds = (new Date().getTime() - this.lastUpdate.getTime()) / 1_000))\n\n  logCd() {\n    console.log('log from timer');\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n지금부터 타이머가 매 초 업데이트되어야 합니다. 만약 동기부여를 받았다면 컴포넌트에서 구독을 시도해 보세요. 그러면 변경 감지가 더 이상 컴포넌트를 확인하지 않음을 알 수 있을 것입니다.\n\n이미 OnPush를 사용하고 있지만 변경 감지는 여전히 ListComponent를 매 초 확인합니다. 그것은 그다지 효율적이지 않습니다.\n\n# 로컬 변경 감지\n\nAngular 17와 신호를 발견하세요.\n\n<div class=\"content-ad\"></div>\n\n앵귤러 팀이 17번 버전을 릴리스하기 일주일 전에, 로컬 변경 감지를 추가했습니다. 이 기능은 우리의 사용 사례에 완벽하게 어울립니다.\n\n이를 통해 컴포넌트 트리에서 단일 컴포넌트를 더러운 상태로 표시할 수 있습니다. 따라서 변경 감지는 부모를 확인하지 않을 것입니다. 만약 그 자식 컴포넌트들이 OnPush로 표시되어 있다면, 그것들 또한 제외될 것입니다.\n\n이 기능을 작동시키기 위해 우리는 두 가지 요소가 필요합니다: 신호(Signals)와 OnPush입니다. 그래서 필요한 것은 이 두 가지뿐입니다.\n\n아래 그림은 이 새로운 기능을 보여줍니다:\n\n<div class=\"content-ad\"></div>\n\n\n![Local Change Detection in Angular](/assets/img/2024-05-17-LocalChangeDetectioninAngular_4.png)\n\nOnPush를 추가하고 TimerComponent를 Signals로 리팩토링한 코드입니다:\n\n```javascript\n@Component({\n  selector: 'app-timer',\n  template: `<span>Last Updated: {{ lastUpdateInSeconds() | number:'1.0-0' }} Seconds</span> {{ logCd() }}`,\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [DatePipe, DecimalPipe, AsyncPipe]\n})\nexport class TimerComponent {\n  @Input() lastUpdate = new Date();\n  lastUpdateInSeconds = signal(0)\n  constructor() {\n    setInterval(() => {\n      this.lastUpdateInSeconds.set((new Date().getTime() - this.lastUpdate.getTime()) / 1_000);\n    }, 1000);\n  }\n\n  logCd() {\n    console.log('log from timer');\n  }\n}\n```\n\nListComponent도 OnPush여야 합니다. 그렇지 않으면 Change Detection이 항상 확인합니다.\n\n\n<div class=\"content-ad\"></div>\n\n만약 지금 페이지를 새로고침하면, 타이머가 작동 중이지만 목록은 한 번만 확인되었습니다. 이제 \"새로고침\" 버튼을 클릭하면 ListComponent에서 처리되는 DOM 이벤트를 트리거합니다. 따라서 변경 감지는 해당 컴포넌트에 대해... 두 번 실행됩니다.\n\n한 번이 아니라 두 번 왜 그럴까요? 여기에는 두 가지 트리거가 있습니다. 첫 번째는 DOM 이벤트이고, 두 번째는 나중에 약간 끝나는 fetch에서 비동기 작업입니다.\n\n이것이 바로 로컬 변경 감지입니다. 시그널 컴포넌트에 대해 기대할 수 있는 일부를 간단히 살펴보았습니다.\n\n# 요약\n\n<div class=\"content-ad\"></div>\n\n로컬 변경 감지는 강력한 기능입니다. 변경 감지에서 어떤 구성 요소가 검사를 거쳐야 하는지 정확히 정의할 수 있습니다.\n\nAngular 17에서만 사용 가능하며 OnPush 및 신호를 모두 사용해야 합니다.\n\n이는 미래 신호 구성 요소의 일부로, 더욱 미세한 변경 감지가 가능해질 것입니다.\n\n데모 저장소는 다음에서 확인할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n# 감사의 말씀\n\n이 글을 철저히 검토하고 그림을 개선하도록 강력히 요구한\nThomas Laforge님에게 감사의 말씀을 전하고 싶습니다.\n\n또한, Change Detection의 내부 작업에 대한 통찰을 제공해 준\nAndrew Scott님과\nSander Elias님께도 감사의 말씀을 전합니다.\n\n# 추가로 읽을 거리","ogImage":{"url":"/assets/img/2024-05-17-LocalChangeDetectioninAngular_0.png"},"coverImage":"/assets/img/2024-05-17-LocalChangeDetectioninAngular_0.png","tag":["Tech"],"readingTime":9}],"page":"73","totalPageCount":156,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":3},"__N_SSG":true}