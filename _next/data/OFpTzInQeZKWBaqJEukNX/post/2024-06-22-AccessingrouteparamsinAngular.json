{"pageProps":{"post":{"title":"Angular에서 경로 매개변수 접근하는 방법","description":"","date":"2024-06-22 15:15","slug":"2024-06-22-AccessingrouteparamsinAngular","content":"\n\n\n![Route Parameters](/assets/img/2024-06-22-AccessingrouteparamsinAngular_0.png)\n\n라우트에서 매개변수를 읽어야 하는 다양한 시나리오가 있을 수 있습니다. 이러한 매개변수는 쿼리 매개변수(예: test?username=...) 또는 라우트 매개변수(예: test/:testId)일 수 있습니다.\n\n또한 Angular 라우팅의 Route 개체 내부에 있는 데이터 속성을 통해 아래와 같이 사용자가 원하는 값도 전달할 수 있습니다:\n\n```js\nexport const appRoutes: Route[] = [\n  {\n    path: 'test/:testId',\n    loadComponent: () => import('./test.component'),\n    data: {\n      permission: 'admin',\n    },\n  },\n];\n```\n\n<div class=\"content-ad\"></div>\n\n# ActivatedRoute\n\n모든 상황에서는 컴포넌트에 ActivatedRoute를 주입하여 시작해야 합니다. 이 클래스는 컴포넌트가 정의된 라우트에 대한 액세스를 제공합니다.\n\n```js\nprivate activatedRoute = inject(ActivatedRoute);\n```\n\n이 클래스 내에서 두 가지 옵션으로 라우트 매개변수를 검색할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 스냅샷\n\n첫 번째 옵션은 스냅샷 객체를 사용하는 것입니다. 이름에서 알 수 있듯이 경로 상태의 스냅샷을 가져와 작업할 수 있습니다.\n\n```js\ntestId = this.activatedRoute.snapshot.params['testId'];\npermission = this.activatedRoute.snapshot.data['permission'];\nuser = this.activatedRoute.snapshot.queryParams['user'];\n```\n\n스냅샷 객체를 사용하면 정적 값이 제공되므로 매개변수가 변경되어도 구성 요소를 다시로드하지 않는 한 알림을받지 못할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n일반적으로 다음 옵션을 선택하는 것이 더 안전하다고 생각됩니다:\n\n## Observable\n\n또는 각 매개변수를 observable로 리스닝할 수 있습니다. 조금 더 복잡하게 느껴질 수 있지만, 값이 변경될 때 알림을 받을 수 있는 장점을 제공합니다.\n\n```js\ntestId$ = this.activatedRoute.params.pipe(map((p) => p['testId']));\npermission$ = this.activatedRoute.data.pipe(map((d) => d['permission']));\nuser$ = this.activatedRoute.queryParams.pipe(map((q) => q['user']));\n```\n\n<div class=\"content-ad\"></div>\n\n서포터블을 사용하면 asyncPipe 또는 subscribe 함수를 사용하여 이러한 스트림을 구독하고 매개변수 값이 변경될 때 알림을 받을 수 있습니다.\n\n이를 통해 컴포넌트에서 더 동적이고 반응적인 동작이 가능해집니다.\n\n# Ngrx Router Store\n\n당신의 애플리케이션에서 Ngrx를 사용하고 있다면 Selector를 통해 라우트 매개변수를 검색하는 데 관심이 있을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n먼저, @ngrx/router-store npm 패키지를 추가하고 main.ts 파일의 bootstrapApplication 함수에 포함해야 합니다:\n\n```js\nimport { provideStore } from '@ngrx/store';\nimport { provideRouterStore, routerReducer } from '@ngrx/router-store';\n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    //...\n    provideStore({\n      router: routerReducer,\n    }),\n    provideRouterStore()\n  ],\n});\n```\n\n다음으로 Ngrx는 사용할 수 있는 다양한 셀렉터를 가진 getRouterSelector 함수를 제공합니다. 이를 다음과 같이 구조분해할 수 있습니다:\n\n```js\nimport { getRouterSelectors, RouterReducerState } from '@ngrx/router-store';\n\n// 다른 셀렉터도 사용할 수 있습니다:\n// https://next.ngrx.io/guide/router-store/selectors\nexport const {\n    selectQueryParam,\n    selectRouteParam,\n    selectRouteDataParam, \n} = getRouterSelectors();\n```\n\n<div class=\"content-ad\"></div>\n\n컴포넌트 내부에서 다음과 같이 라우트 매개변수 속성에 액세스할 수 있습니다:\n\n```js\ntestId$ = this.store.select(selectRouteParam('testId'));\npermission$ = this.store.select(selectRouteDataParam('permission'));\nuser$ = this.store.select(selectQueryParam('user'));\n```\n\n이렇게 하면 옵저버블이 생성되며, 알림을 받기 위해 구독해야 합니다.\n\n# Angular v16에서 RouterInput\n\n<div class=\"content-ad\"></div>\n\nAngular v16은 개발 경험 (DX)을 향상시키기 위해 많은 새로운 기능이 포함된 채로 출시되었어요. 그 중 하나는 RouterInput이라는 기능인데, 이를 통해 입력을 통해 경로 정보를 검색할 수 있습니다.\n\nRouterInput을 활용하기 위해서는 main.ts 파일에서 라우트 제공자를 다음과 같이 업데이트해야 해요:\n\n```js\nimport { provideRouter, withComponentInputBinding } from '@angular/router';\n\nbootstrapApplication(AppComponent, \n  providers: [provideRouter(appRoutes, \n      withComponentInputBinding() // 👈\n    )]\n)\n```\n\n업데이트된 라우트 제공자로, 이제 컴포넌트에서 입력 바인딩을 통해 라우트 매개변수를 수신할 수 있어요:\n\n<div class=\"content-ad\"></div>\n\n```typescript\n@Input() testId!: string;\n@Input() permission!: string;\n@Input() user!: string;\n```\n\n참고사항:\n\n- testId 입력 값이 변경되면 컴포넌트가 알림을 받습니다 (옵저버블 스트림으로).\n- 라우터 입력 값은 라우트된 컴포넌트 내에서만 액세스할 수 있습니다. 자식 컴포넌트 내에서 이러한 매개변수에 액세스해야 하는 경우, 앞에서 언급한 방법 중 하나를 사용하거나 부모 및 자식 컴포넌트 사이의 입력 바인딩을 통해 입력을 전달할 수 있습니다.\n- 더 구체적인 데코레이터 이름을 선호하는 경우 다음과 같이 정의에서 재매핑할 수 있습니다:\n\n```typescript\nimport {Input as RouterInput} from '@angular/core'\n\nexport class Component {\n @RouterInput() testId!: string;\n}\n```\n\n<div class=\"content-ad\"></div>\n\nAngular 챌린지 #22에서 새로운 기술을 탐험하고 테스트해보세요. 이 프로젝트의 기능을 실험해보며 즐기세요.\n\n저는 Medium, Twitter 또는 Github에서 만날 수 있습니다. 궁금한 점이 있다면 언제든지 연락 주세요.","ogImage":{"url":"/assets/img/2024-06-22-AccessingrouteparamsinAngular_0.png"},"coverImage":"/assets/img/2024-06-22-AccessingrouteparamsinAngular_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-22-AccessingrouteparamsinAngular_0.png\" alt=\"Route Parameters\"></p>\n<p>라우트에서 매개변수를 읽어야 하는 다양한 시나리오가 있을 수 있습니다. 이러한 매개변수는 쿼리 매개변수(예: test?username=...) 또는 라우트 매개변수(예: test/:testId)일 수 있습니다.</p>\n<p>또한 Angular 라우팅의 Route 개체 내부에 있는 데이터 속성을 통해 아래와 같이 사용자가 원하는 값도 전달할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">appRoutes</span>: <span class=\"hljs-title class_\">Route</span>[] = [\n  {\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'test/:testId'</span>,\n    <span class=\"hljs-attr\">loadComponent</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./test.component'</span>),\n    <span class=\"hljs-attr\">data</span>: {\n      <span class=\"hljs-attr\">permission</span>: <span class=\"hljs-string\">'admin'</span>,\n    },\n  },\n];\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>ActivatedRoute</h1>\n<p>모든 상황에서는 컴포넌트에 ActivatedRoute를 주입하여 시작해야 합니다. 이 클래스는 컴포넌트가 정의된 라우트에 대한 액세스를 제공합니다.</p>\n<pre><code class=\"hljs language-js\">private activatedRoute = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">ActivatedRoute</span>);\n</code></pre>\n<p>이 클래스 내에서 두 가지 옵션으로 라우트 매개변수를 검색할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>스냅샷</h2>\n<p>첫 번째 옵션은 스냅샷 객체를 사용하는 것입니다. 이름에서 알 수 있듯이 경로 상태의 스냅샷을 가져와 작업할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">testId = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">activatedRoute</span>.<span class=\"hljs-property\">snapshot</span>.<span class=\"hljs-property\">params</span>[<span class=\"hljs-string\">'testId'</span>];\npermission = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">activatedRoute</span>.<span class=\"hljs-property\">snapshot</span>.<span class=\"hljs-property\">data</span>[<span class=\"hljs-string\">'permission'</span>];\nuser = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">activatedRoute</span>.<span class=\"hljs-property\">snapshot</span>.<span class=\"hljs-property\">queryParams</span>[<span class=\"hljs-string\">'user'</span>];\n</code></pre>\n<p>스냅샷 객체를 사용하면 정적 값이 제공되므로 매개변수가 변경되어도 구성 요소를 다시로드하지 않는 한 알림을받지 못할 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>일반적으로 다음 옵션을 선택하는 것이 더 안전하다고 생각됩니다:</p>\n<h2>Observable</h2>\n<p>또는 각 매개변수를 observable로 리스닝할 수 있습니다. 조금 더 복잡하게 느껴질 수 있지만, 값이 변경될 때 알림을 받을 수 있는 장점을 제공합니다.</p>\n<pre><code class=\"hljs language-js\">testId$ = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">activatedRoute</span>.<span class=\"hljs-property\">params</span>.<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =></span> p[<span class=\"hljs-string\">'testId'</span>]));\npermission$ = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">activatedRoute</span>.<span class=\"hljs-property\">data</span>.<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">d</span>) =></span> d[<span class=\"hljs-string\">'permission'</span>]));\nuser$ = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">activatedRoute</span>.<span class=\"hljs-property\">queryParams</span>.<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">q</span>) =></span> q[<span class=\"hljs-string\">'user'</span>]));\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>서포터블을 사용하면 asyncPipe 또는 subscribe 함수를 사용하여 이러한 스트림을 구독하고 매개변수 값이 변경될 때 알림을 받을 수 있습니다.</p>\n<p>이를 통해 컴포넌트에서 더 동적이고 반응적인 동작이 가능해집니다.</p>\n<h1>Ngrx Router Store</h1>\n<p>당신의 애플리케이션에서 Ngrx를 사용하고 있다면 Selector를 통해 라우트 매개변수를 검색하는 데 관심이 있을 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>먼저, @ngrx/router-store npm 패키지를 추가하고 main.ts 파일의 bootstrapApplication 함수에 포함해야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { provideStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ngrx/store'</span>;\n<span class=\"hljs-keyword\">import</span> { provideRouterStore, routerReducer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ngrx/router-store'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.component'</span>;\n\n<span class=\"hljs-title function_\">bootstrapApplication</span>(<span class=\"hljs-title class_\">AppComponent</span>, {\n  <span class=\"hljs-attr\">providers</span>: [\n    <span class=\"hljs-comment\">//...</span>\n    <span class=\"hljs-title function_\">provideStore</span>({\n      <span class=\"hljs-attr\">router</span>: routerReducer,\n    }),\n    <span class=\"hljs-title function_\">provideRouterStore</span>()\n  ],\n});\n</code></pre>\n<p>다음으로 Ngrx는 사용할 수 있는 다양한 셀렉터를 가진 getRouterSelector 함수를 제공합니다. 이를 다음과 같이 구조분해할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { getRouterSelectors, <span class=\"hljs-title class_\">RouterReducerState</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ngrx/router-store'</span>;\n\n<span class=\"hljs-comment\">// 다른 셀렉터도 사용할 수 있습니다:</span>\n<span class=\"hljs-comment\">// https://next.ngrx.io/guide/router-store/selectors</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> {\n    selectQueryParam,\n    selectRouteParam,\n    selectRouteDataParam, \n} = <span class=\"hljs-title function_\">getRouterSelectors</span>();\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>컴포넌트 내부에서 다음과 같이 라우트 매개변수 속성에 액세스할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">testId$ = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">store</span>.<span class=\"hljs-title function_\">select</span>(<span class=\"hljs-title function_\">selectRouteParam</span>(<span class=\"hljs-string\">'testId'</span>));\npermission$ = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">store</span>.<span class=\"hljs-title function_\">select</span>(<span class=\"hljs-title function_\">selectRouteDataParam</span>(<span class=\"hljs-string\">'permission'</span>));\nuser$ = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">store</span>.<span class=\"hljs-title function_\">select</span>(<span class=\"hljs-title function_\">selectQueryParam</span>(<span class=\"hljs-string\">'user'</span>));\n</code></pre>\n<p>이렇게 하면 옵저버블이 생성되며, 알림을 받기 위해 구독해야 합니다.</p>\n<h1>Angular v16에서 RouterInput</h1>\n<div class=\"content-ad\"></div>\n<p>Angular v16은 개발 경험 (DX)을 향상시키기 위해 많은 새로운 기능이 포함된 채로 출시되었어요. 그 중 하나는 RouterInput이라는 기능인데, 이를 통해 입력을 통해 경로 정보를 검색할 수 있습니다.</p>\n<p>RouterInput을 활용하기 위해서는 main.ts 파일에서 라우트 제공자를 다음과 같이 업데이트해야 해요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { provideRouter, withComponentInputBinding } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/router'</span>;\n\n<span class=\"hljs-title function_\">bootstrapApplication</span>(<span class=\"hljs-title class_\">AppComponent</span>, \n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title function_\">provideRouter</span>(appRoutes, \n      <span class=\"hljs-title function_\">withComponentInputBinding</span>() <span class=\"hljs-comment\">// 👈</span>\n    )]\n)\n</code></pre>\n<p>업데이트된 라우트 제공자로, 이제 컴포넌트에서 입력 바인딩을 통해 라우트 매개변수를 수신할 수 있어요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-meta\">@Input</span>() testId!: <span class=\"hljs-built_in\">string</span>;\n<span class=\"hljs-meta\">@Input</span>() permission!: <span class=\"hljs-built_in\">string</span>;\n<span class=\"hljs-meta\">@Input</span>() user!: <span class=\"hljs-built_in\">string</span>;\n</code></pre>\n<p>참고사항:</p>\n<ul>\n<li>testId 입력 값이 변경되면 컴포넌트가 알림을 받습니다 (옵저버블 스트림으로).</li>\n<li>라우터 입력 값은 라우트된 컴포넌트 내에서만 액세스할 수 있습니다. 자식 컴포넌트 내에서 이러한 매개변수에 액세스해야 하는 경우, 앞에서 언급한 방법 중 하나를 사용하거나 부모 및 자식 컴포넌트 사이의 입력 바인딩을 통해 입력을 전달할 수 있습니다.</li>\n<li>더 구체적인 데코레이터 이름을 선호하는 경우 다음과 같이 정의에서 재매핑할 수 있습니다:</li>\n</ul>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">Input</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">RouterInput</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Component</span> {\n <span class=\"hljs-meta\">@RouterInput</span>() testId!: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>Angular 챌린지 #22에서 새로운 기술을 탐험하고 테스트해보세요. 이 프로젝트의 기능을 실험해보며 즐기세요.</p>\n<p>저는 Medium, Twitter 또는 Github에서 만날 수 있습니다. 궁금한 점이 있다면 언제든지 연락 주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}