{"pageProps":{"post":{"title":"2024년에 React, Vite, Electron, 그리고 FastAPI로 Full-Stack 애플리케이션 만들기","description":"","date":"2024-05-12 22:52","slug":"2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024","content":"\n\n![이미지](/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_0.png)\n\n이 포괄적인 가이드에서는 React, Vite, Electron 및 FastAPI를 활용하여 간단한 풀스택 애플리케이션을 설정하는 방법을 안내해 드릴 거에요. 이 튜토리얼을 완료하면 단일 명령어로 시작되는 기능적인 애플리케이션을 보유하게 되며 로컬 개발 및 테스트에 적합할 거에요.\n\n# 개요\n\n이 애플리케이션 아키텍처는 아래와 같이 통합될 것입니다:\n\n\n\n- ReactJS: 사용자 인터페이스를 구축하기 위한 강력한 라이브러리.\n- Vite: 웹 프로젝트용 현대적이고 빠른 빌드 도구.\n- Electron: 웹 기술로 크로스 플랫폼 데스크톱 앱을 빌드하는 프레임워크.\n- FastAPI: Python으로 API를 빌드하기 위한 효율적이고 고성능 프레임워크.\n\n# 시스템 디자인 개요\n\n아래 다이어그램은 시스템 아키텍처를 설명합니다:\n\n![Architecture Diagram](/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_1.png)\n\n\n\n다음은 각 구성 요소 간 상호 작용을 보여주는 다이어그램입니다:\n\n- Electron Main Process: 라이프사이클 이벤트를 관리하고 브라우저 창을 생성합니다.\n- Electron Renderer Process: 브라우저 창 내에서 웹 프런트엔드를 실행합니다.\n- React Application: Vite를 통해 제공되는 UI를 제공합니다.\n- FastAPI Server: 백엔드 로직 및 데이터 관리를 처리합니다.\n\n# 애플리케이션 구조\n\n다음은 우리의 간단한 애플리케이션의 구조입니다:\n\n\n\n```js\nmy-project/\n│\n├── backend/\n│   ├── main.py            # FastAPI 애플리케이션\n│   └── requirements.txt   # Python 종속성\n│\n├── frontend/              # Vite 프로젝트 루트\n│   ├── main.jsx           # React 애플리케이션 진입점\n│   ├── App.jsx            # React 컴포넌트\n│   ├── App.module.css     # 스타일\n│   └── vite.config.js     # Vite 구성 설정\n│   └── package.json       # 프론트엔드 종속성을 위한 NPM 패키지 파일\n│\n├── electron/\n│   └── main.cjs           # Electron 메인 스크립트\n│   └── preload.cjs           # Electron 메인 스크립트\n│\n├── package.json           # Electron을 위한 루트 NPM 패키지 파일\n```\n\n# 환경 설정\n\n## 1. 가상 환경\n\n프로젝트 디렉토리에서 파이썬 가상 환경을 만들면 전역 파이썬 환경과 별도로 파이썬 종속성을 관리할 수 있습니다.\n\n\n\nWindows:\n\n\n```js\npython -m venv venv\n.\\venv\\Scripts\\activate\n```\n\nmacOS/Linux:\n\n```js\npython3 -m venv venv\nsource venv/bin/activate\n```\n\n\n\n# 2. 종속성 설치\n\n백엔드 디렉토리에서 requirements.txt 파일을 추가하세요:\n\n```js\nfastapi==0.68.1\nuvicorn==0.15.0\n```\n\nPython 종속성을 설치하세요:\n\n\n\n```js\npip install -r backend/requirements.txt\n```\n\n## 3. 프론트엔드 및 일렉트론 설정\n\nVite를 사용하여 프론트엔드를 초기화하고 일렉트론을 구성합니다.\n\nVite 프로젝트를 초기화합니다 (프론트엔드 디렉토리 내부):\n\n\n\n```js\nnpm create vite@latest --template frontend\n```\n\nNode 의존성 패키지 설치:\n\n```js\nnpm install\n```\n\n# 4. 백엔드 서버\n\n\n\nfrontend/App.jsx:\n\n```jsx\nimport React from 'react';\n\nfunction App() {\n    return (\n        <div>\n            <h1>Welcome to the React Front-end!</h1>\n            <p>Your data:</p>\n            <table>\n                <tr>\n                    <th>Message</th>\n                </tr>\n                <tr>\n                    <td>Hello from FastAPI</td>\n                </tr>\n            </table>\n        </div>\n    );\n}\n\nexport default App;\n```  \n\n\n\n```js\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"./App.module.css\"; // CSS 모듈 가져오기\n\nfunction App() {\n  const [data, setData] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/data\");\n        const jsonData = await response.json();\n        setData(jsonData.message);\n      } catch (error) {\n        console.error(\"데이터를 불러오는 도중 오류가 발생했습니다:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <div>{data || \"로딩 중...\"}</div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n스타일 추가:\nfrontend/App.module.css:\n\n```css\n.container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n  }\n  \n  .content {\n    text-align: center;\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n```\n\nfrontend/main.jsx:\n\n\n\n\n```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App.jsx\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n# 6. 일렉트론 구성\n\nelectron/main.cjs:\n\n```js\nconst { app, BrowserWindow } = require('electron');\nconst path = require('path');\n\nfunction createWindow() {\n    const mainWindow = new BrowserWindow({\n        width: 800,\n        height: 600,\n        webPreferences: {\n            preload: path.join(__dirname, 'preload.cjs'),\n            contextIsolation: true, // 보안을 위해 중요함\n            enableRemoteModule: false, // 보안 상 이유로 원격 모듈 비활성화\n            nodeIntegration: false // 보안 상 이유로 nodeIntegration 비활성화\n        }\n    });\n\n    // 로컬 웹 서버 URL 로드\n    mainWindow.loadURL('http://localhost:5173');\n\n}\n\napp.whenReady().then(createWindow);\n\napp.on('window-all-closed', () => {\n    if (process.platform !== 'darwin') {\n        app.quit();\n    }\n});\n```\n\n\n\nelectron/preload.cjs:\n\n```js\nconst { contextBridge, ipcRenderer } = require('electron');\n\n// 렌더러 프로세스에 노출할 안전한 API\ncontextBridge.exposeInMainWorld('api', {\n    send: (channel, data) => {\n        // 렌더러에서 메인 프로세스로 데이터를 보내기 위한 채널 화이트리스트\n        const validChannels = ['toMain'];\n        if (validChannels.includes(channel)) {\n            ipcRenderer.send(channel, data);\n        }\n    },\n    receive: (channel, func) => {\n        // 메인에서 렌더러 프로세스로 데이터를 수신하기 위한 채널 화이트리스트\n        const validChannels = ['fromMain'];\n        if (validChannels.includes(channel)) {\n            // 새 리스너를 추가하기 전에 채널에서 모든 리스너를 제거\n            // 이렇게 하면 여러 리스너가 등록되는 것을 방지\n            ipcRenderer.removeAllListeners(channel);\n            ipcRenderer.on(channel, (event, ...args) => func(...args));\n        }\n    }\n});\n```\n\n# 7. 통합 시작 명령\n\npackage.json을 업데이트하여 모든 서비스를 하나의 명령어로 시작하세요.\n\n\n\n```json\n{\n  \"name\": \"frontend\",\n  \"private\": true,\n  \"version\": \"0.0.1\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run start-backend\\\" \\\"npm run start-frontend\\\" \\\"npm run start-electron\\\"\",\n    \"start-backend\": \"cd backend && uvicorn main:app --reload --host localhost --port 8000\",\n    \"start-frontend\": \"cd frontend && vite\",\n    \"start-electron\": \"electron electron/main.cjs\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^5.2.0\",\n    \"concurrently\": \"^7.0.0\"\n  }\n}\n```\n\n# 응용 프로그램 실행 방법\n\n응용프로그램을 실행하려면:\n\n```js\nnpm start\n```\n\n\n\n아래 명령어로 백엔드, 프론트엔드 및 일렉트론을 동시에 시작하여 즉시 애플리케이션을 확인할 수 있습니다.\n\n성공적인 터미널 출력은 다음과 같아야 합니다:\n\n![이미지](/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_2.png)\n\n# 결과\n\n\n\nBrowser:\n\n![Browser screenshot](/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_3.png)\n\nMacOS:\n\n![MacOS screenshot](/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_4.png)\n\n\n\nWindows:\n\n![Windows](/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_5.png)\n\n## 결론\n\n이 안내서는 최신 기술을 활용하여 개발 및 확장 가능한 제품 배포 모델에 이상적인 완전한 스택 애플리케이션을 구축하기 위한 간단한 로드맵을 제시합니다. 이 프레임워크는 소프트웨어 아키텍처의 최상의 실천 방법을 준수하며, 요소의 느슨한 결합과 손쉬운 유지 관리를 촉진합니다.\n\n\n\n여기서 전체 코드에 액세스하세요\n\n질문이 있으시면 언제든지 물어보세요.","ogImage":{"url":"/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_0.png"},"coverImage":"/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_0.png\" alt=\"이미지\"></p>\n<p>이 포괄적인 가이드에서는 React, Vite, Electron 및 FastAPI를 활용하여 간단한 풀스택 애플리케이션을 설정하는 방법을 안내해 드릴 거에요. 이 튜토리얼을 완료하면 단일 명령어로 시작되는 기능적인 애플리케이션을 보유하게 되며 로컬 개발 및 테스트에 적합할 거에요.</p>\n<h1>개요</h1>\n<p>이 애플리케이션 아키텍처는 아래와 같이 통합될 것입니다:</p>\n<ul>\n<li>ReactJS: 사용자 인터페이스를 구축하기 위한 강력한 라이브러리.</li>\n<li>Vite: 웹 프로젝트용 현대적이고 빠른 빌드 도구.</li>\n<li>Electron: 웹 기술로 크로스 플랫폼 데스크톱 앱을 빌드하는 프레임워크.</li>\n<li>FastAPI: Python으로 API를 빌드하기 위한 효율적이고 고성능 프레임워크.</li>\n</ul>\n<h1>시스템 디자인 개요</h1>\n<p>아래 다이어그램은 시스템 아키텍처를 설명합니다:</p>\n<p><img src=\"/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_1.png\" alt=\"Architecture Diagram\"></p>\n<p>다음은 각 구성 요소 간 상호 작용을 보여주는 다이어그램입니다:</p>\n<ul>\n<li>Electron Main Process: 라이프사이클 이벤트를 관리하고 브라우저 창을 생성합니다.</li>\n<li>Electron Renderer Process: 브라우저 창 내에서 웹 프런트엔드를 실행합니다.</li>\n<li>React Application: Vite를 통해 제공되는 UI를 제공합니다.</li>\n<li>FastAPI Server: 백엔드 로직 및 데이터 관리를 처리합니다.</li>\n</ul>\n<h1>애플리케이션 구조</h1>\n<p>다음은 우리의 간단한 애플리케이션의 구조입니다:</p>\n<pre><code class=\"hljs language-js\">my-project/\n│\n├── backend/\n│   ├── main.<span class=\"hljs-property\">py</span>            # <span class=\"hljs-title class_\">FastAPI</span> 애플리케이션\n│   └── requirements.<span class=\"hljs-property\">txt</span>   # <span class=\"hljs-title class_\">Python</span> 종속성\n│\n├── frontend/              # <span class=\"hljs-title class_\">Vite</span> 프로젝트 루트\n│   ├── main.<span class=\"hljs-property\">jsx</span>           # <span class=\"hljs-title class_\">React</span> 애플리케이션 진입점\n│   ├── <span class=\"hljs-title class_\">App</span>.<span class=\"hljs-property\">jsx</span>            # <span class=\"hljs-title class_\">React</span> 컴포넌트\n│   ├── <span class=\"hljs-title class_\">App</span>.<span class=\"hljs-property\">module</span>.<span class=\"hljs-property\">css</span>     # 스타일\n│   └── vite.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">js</span>     # <span class=\"hljs-title class_\">Vite</span> 구성 설정\n│   └── package.<span class=\"hljs-property\">json</span>       # 프론트엔드 종속성을 위한 <span class=\"hljs-variable constant_\">NPM</span> 패키지 파일\n│\n├── electron/\n│   └── main.<span class=\"hljs-property\">cjs</span>           # <span class=\"hljs-title class_\">Electron</span> 메인 스크립트\n│   └── preload.<span class=\"hljs-property\">cjs</span>           # <span class=\"hljs-title class_\">Electron</span> 메인 스크립트\n│\n├── package.<span class=\"hljs-property\">json</span>           # <span class=\"hljs-title class_\">Electron</span>을 위한 루트 <span class=\"hljs-variable constant_\">NPM</span> 패키지 파일\n</code></pre>\n<h1>환경 설정</h1>\n<h2>1. 가상 환경</h2>\n<p>프로젝트 디렉토리에서 파이썬 가상 환경을 만들면 전역 파이썬 환경과 별도로 파이썬 종속성을 관리할 수 있습니다.</p>\n<p>Windows:</p>\n<pre><code class=\"hljs language-js\">python -m venv venv\n.\\venv\\<span class=\"hljs-title class_\">Scripts</span>\\activate\n</code></pre>\n<p>macOS/Linux:</p>\n<pre><code class=\"hljs language-js\">python3 -m venv venv\nsource venv/bin/activate\n</code></pre>\n<h1>2. 종속성 설치</h1>\n<p>백엔드 디렉토리에서 requirements.txt 파일을 추가하세요:</p>\n<pre><code class=\"hljs language-js\">fastapi==<span class=\"hljs-number\">0.68</span><span class=\"hljs-number\">.1</span>\nuvicorn==<span class=\"hljs-number\">0.15</span><span class=\"hljs-number\">.0</span>\n</code></pre>\n<p>Python 종속성을 설치하세요:</p>\n<pre><code class=\"hljs language-js\">pip install -r backend/requirements.<span class=\"hljs-property\">txt</span>\n</code></pre>\n<h2>3. 프론트엔드 및 일렉트론 설정</h2>\n<p>Vite를 사용하여 프론트엔드를 초기화하고 일렉트론을 구성합니다.</p>\n<p>Vite 프로젝트를 초기화합니다 (프론트엔드 디렉토리 내부):</p>\n<pre><code class=\"hljs language-js\">npm create vite@latest --template frontend\n</code></pre>\n<p>Node 의존성 패키지 설치:</p>\n<pre><code class=\"hljs language-js\">npm install\n</code></pre>\n<h1>4. 백엔드 서버</h1>\n<p>frontend/App.jsx:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Welcome to the React Front-end!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Your data:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">table</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tr</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">th</span>></span>Message<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">th</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tr</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tr</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>Hello from FastAPI<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tr</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">table</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./App.module.css\"</span>; <span class=\"hljs-comment\">// CSS 모듈 가져오기</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fetchData</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"http://localhost:8000/data\"</span>);\n        <span class=\"hljs-keyword\">const</span> jsonData = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n        <span class=\"hljs-title function_\">setData</span>(jsonData.<span class=\"hljs-property\">message</span>);\n      } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"데이터를 불러오는 도중 오류가 발생했습니다:\"</span>, error);\n      }\n    };\n\n    <span class=\"hljs-title function_\">fetchData</span>();\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>{data || \"로딩 중...\"}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>스타일 추가:\nfrontend/App.module.css:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.container</span> {\n    <span class=\"hljs-attribute\">display</span>: flex;\n    <span class=\"hljs-attribute\">justify-content</span>: center;\n    <span class=\"hljs-attribute\">align-items</span>: center;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>;\n  }\n  \n  <span class=\"hljs-selector-class\">.content</span> {\n    <span class=\"hljs-attribute\">text-align</span>: center;\n    <span class=\"hljs-attribute\">font-family</span>: Arial, sans-serif;\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">8px</span>;\n    <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">8px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>);\n}\n</code></pre>\n<p>frontend/main.jsx:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ReactDOM</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-dom/client\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./App.jsx\"</span>;\n\n<span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">createRoot</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"root\"</span>)).<span class=\"hljs-title function_\">render</span>(\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">React.StrictMode</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">App</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">React.StrictMode</span>></span></span>\n);\n</code></pre>\n<h1>6. 일렉트론 구성</h1>\n<p>electron/main.cjs:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { app, <span class=\"hljs-title class_\">BrowserWindow</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'electron'</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createWindow</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> mainWindow = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BrowserWindow</span>({\n        <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">800</span>,\n        <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">600</span>,\n        <span class=\"hljs-attr\">webPreferences</span>: {\n            <span class=\"hljs-attr\">preload</span>: path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">'preload.cjs'</span>),\n            <span class=\"hljs-attr\">contextIsolation</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 보안을 위해 중요함</span>\n            <span class=\"hljs-attr\">enableRemoteModule</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 보안 상 이유로 원격 모듈 비활성화</span>\n            <span class=\"hljs-attr\">nodeIntegration</span>: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// 보안 상 이유로 nodeIntegration 비활성화</span>\n        }\n    });\n\n    <span class=\"hljs-comment\">// 로컬 웹 서버 URL 로드</span>\n    mainWindow.<span class=\"hljs-title function_\">loadURL</span>(<span class=\"hljs-string\">'http://localhost:5173'</span>);\n\n}\n\napp.<span class=\"hljs-title function_\">whenReady</span>().<span class=\"hljs-title function_\">then</span>(createWindow);\n\napp.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'window-all-closed'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (process.<span class=\"hljs-property\">platform</span> !== <span class=\"hljs-string\">'darwin'</span>) {\n        app.<span class=\"hljs-title function_\">quit</span>();\n    }\n});\n</code></pre>\n<p>electron/preload.cjs:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { contextBridge, ipcRenderer } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'electron'</span>);\n\n<span class=\"hljs-comment\">// 렌더러 프로세스에 노출할 안전한 API</span>\ncontextBridge.<span class=\"hljs-title function_\">exposeInMainWorld</span>(<span class=\"hljs-string\">'api'</span>, {\n    <span class=\"hljs-attr\">send</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">channel, data</span>) =></span> {\n        <span class=\"hljs-comment\">// 렌더러에서 메인 프로세스로 데이터를 보내기 위한 채널 화이트리스트</span>\n        <span class=\"hljs-keyword\">const</span> validChannels = [<span class=\"hljs-string\">'toMain'</span>];\n        <span class=\"hljs-keyword\">if</span> (validChannels.<span class=\"hljs-title function_\">includes</span>(channel)) {\n            ipcRenderer.<span class=\"hljs-title function_\">send</span>(channel, data);\n        }\n    },\n    <span class=\"hljs-attr\">receive</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">channel, func</span>) =></span> {\n        <span class=\"hljs-comment\">// 메인에서 렌더러 프로세스로 데이터를 수신하기 위한 채널 화이트리스트</span>\n        <span class=\"hljs-keyword\">const</span> validChannels = [<span class=\"hljs-string\">'fromMain'</span>];\n        <span class=\"hljs-keyword\">if</span> (validChannels.<span class=\"hljs-title function_\">includes</span>(channel)) {\n            <span class=\"hljs-comment\">// 새 리스너를 추가하기 전에 채널에서 모든 리스너를 제거</span>\n            <span class=\"hljs-comment\">// 이렇게 하면 여러 리스너가 등록되는 것을 방지</span>\n            ipcRenderer.<span class=\"hljs-title function_\">removeAllListeners</span>(channel);\n            ipcRenderer.<span class=\"hljs-title function_\">on</span>(channel, <span class=\"hljs-function\">(<span class=\"hljs-params\">event, ...args</span>) =></span> <span class=\"hljs-title function_\">func</span>(...args));\n        }\n    }\n});\n</code></pre>\n<h1>7. 통합 시작 명령</h1>\n<p>package.json을 업데이트하여 모든 서비스를 하나의 명령어로 시작하세요.</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"frontend\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"private\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"version\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"0.0.1\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"module\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"start\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"concurrently \\\"npm run start-backend\\\" \\\"npm run start-frontend\\\" \\\"npm run start-electron\\\"\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"start-backend\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"cd backend &#x26;&#x26; uvicorn main:app --reload --host localhost --port 8000\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"start-frontend\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"cd frontend &#x26;&#x26; vite\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"start-electron\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"electron electron/main.cjs\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"devDependencies\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"vite\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^5.2.0\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"concurrently\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^7.0.0\"</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h1>응용 프로그램 실행 방법</h1>\n<p>응용프로그램을 실행하려면:</p>\n<pre><code class=\"hljs language-js\">npm start\n</code></pre>\n<p>아래 명령어로 백엔드, 프론트엔드 및 일렉트론을 동시에 시작하여 즉시 애플리케이션을 확인할 수 있습니다.</p>\n<p>성공적인 터미널 출력은 다음과 같아야 합니다:</p>\n<p><img src=\"/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_2.png\" alt=\"이미지\"></p>\n<h1>결과</h1>\n<p>Browser:</p>\n<p><img src=\"/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_3.png\" alt=\"Browser screenshot\"></p>\n<p>MacOS:</p>\n<p><img src=\"/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_4.png\" alt=\"MacOS screenshot\"></p>\n<p>Windows:</p>\n<p><img src=\"/assets/img/2024-05-12-BuildingaFull-StackApplicationwithReactViteElectronandFastAPIin2024_5.png\" alt=\"Windows\"></p>\n<h2>결론</h2>\n<p>이 안내서는 최신 기술을 활용하여 개발 및 확장 가능한 제품 배포 모델에 이상적인 완전한 스택 애플리케이션을 구축하기 위한 간단한 로드맵을 제시합니다. 이 프레임워크는 소프트웨어 아키텍처의 최상의 실천 방법을 준수하며, 요소의 느슨한 결합과 손쉬운 유지 관리를 촉진합니다.</p>\n<p>여기서 전체 코드에 액세스하세요</p>\n<p>질문이 있으시면 언제든지 물어보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}