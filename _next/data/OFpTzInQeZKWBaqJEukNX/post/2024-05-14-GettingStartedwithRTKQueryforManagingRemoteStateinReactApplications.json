{"pageProps":{"post":{"title":"리액트 애플리케이션에서 원격 상태 관리를 위한 RTK Query 시작하기","description":"","date":"2024-05-14 12:20","slug":"2024-05-14-GettingStartedwithRTKQueryforManagingRemoteStateinReactApplications","content":"\n\n현대 웹 애플리케이션에서 상태를 관리하는 것은 종종 복잡하고 번거로울 수 있습니다, 특히 API 요청과 같은 비동기 데이터를 처리할 때. 그러나 Redux Toolkit Query (RTK Query)를 사용하면 데이터 가져오기, 캐싱 및 상태 관리가 간소화되어 개발자들이 더 적은 코드로 성능 최적화된 애플리케이션을 작성할 수 있습니다. 이 기사에서는 RTK Query를 사용하여 Todo 애플리케이션 설정하는 방법을 안내하며, 그 강력함과 효율성을 소개하겠습니다.\n\n# 프로젝트 구조 설정하기\n\n먼저 React 프로젝트를 구성하여 시작하고 Redux Toolkit 및 RTK Query가 설치되어 있는지 확인하세요. 프로젝트 구조에는 주 진입 파일, API 서비스 슬라이스 및 Todo 컴포넌트가 포함됩니다.\n\n```js\n//main.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.jsx';\nimport { ApiProvider } from \"@reduxjs/toolkit/query/react\";\nimport apiSlice from \"./feature/todo/todoAPI/apiSlice.js\";\n\n// 루트 엘리먼트를 설정하고 전체 애플리케이션을 RTK Query용으로 ApiProvider로 랩합니다\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <ApiProvider api={apiSlice}>\n        <App />\n    </ApiProvider>\n  </React.StrictMode>,\n);\n```\n\n\n\n# API 서비스 슬라이스 구성하기\n\nAPI 슬라이스는 RTK Query를 사용하여 할 일을 가져오고 추가하고 업데이트하고 삭제하는 방법을 정의하는 곳입니다.\n\n```js\n//apiSlice.js\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst todoApi = createApi({\n    reducerPath: \"api\", // API 상태 슬라이스를 위한 고유한 키\n    baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:5050\" }), // 가져오기 로직을 처리하는 기본 쿼리\n    tagTypes: [\"TODOS\"], // 자동 캐시 다시 가져오기를 위한 태그\n    endpoints: (builder) => ({\n        getTodos: builder.query({ // 할 일을 가져오는 엔드포인트\n            query: () => \"/todos\",\n            providesTags: [\"TODOS\"]\n        }),\n        addTodo: builder.mutation({ // 새로운 할 일 추가하는 엔드포인트\n            query: (todo) => ({\n                url: \"/todos\",\n                method: \"POST\",\n                body: todo\n            }),\n            invalidatesTags: [\"TODOS\"]\n        }),\n        updateTodo: builder.mutation({ // 기존 할 일을 업데이트하는 엔드포인트\n            query: (todo) => ({\n                url: `/todos/${todo.id}`,\n                method: \"PATCH\",\n                body: todo\n            }),\n            invalidatesTags: [\"TODOS\"]\n        }),\n        deleteTodo: builder.mutation({ // 할 일을 삭제하는 엔드포인트\n            query: ({ id }) => ({\n                url: `/todos/${id}`,\n                method: \"DELETE\",\n            }),\n            invalidatesTags: [\"TODOS\"]\n        })\n    })\n});\n\nexport const { useGetTodosQuery, useAddTodoMutation, useUpdateTodoMutation, useDeleteTodoMutation } = todoApi;\n\nexport default todoApi;\n```\n\n# 할 일 컴포넌트 구성하기\n\n\n\nTodo 컴포넌트에서 할 일을 표시하고 관리하는 기능을 구현해보세요.\n\n```js\n//TodoApp.jsx\nimport { useState } from 'react';\nimport styles from './TodoApp.module.css';\nimport { useAddTodoMutation, useDeleteTodoMutation, useGetTodosQuery, useUpdateTodoMutation } from \"./todoAPI/apiSlice.js\";\n\nfunction TodoApp() {\n    const [task, setTask] = useState('');\n    const { data: todos, isLoading, isError, isSuccess, error } = useGetTodosQuery();\n    const [addTodo] = useAddTodoMutation();\n    const [updateTodo] = useUpdateTodoMutation();\n    const [deleteTodo] = useDeleteTodoMutation();\n\n    // 할 일 추가를 처리하는 함수\n    function addTodoHandler() {\n        const newTodo = { id: Math.random(), task: task, isCompleted: false };\n        addTodo(newTodo);\n        setTask('');\n    }\n\n    // 할 일 완료 상태 전환을 처리하는 함수\n    function toggleCompletion(todo) {\n        updateTodo({ ...todo, isCompleted: !todo.isCompleted });\n    }\n\n    // 할 일 삭제를 처리하는 함수\n    function deleteTodoHandler(todo) {\n        deleteTodo(todo);\n    }\n\n    return (\n        <div className={styles.container}>\n            <h1 className={styles.title}>할 일 목록</h1>\n            <input\n                type=\"text\"\n                placeholder=\"새로운 작업 추가\"\n                value={task}\n                onChange={(e) => setTask(e.target.value)}\n                className={styles.todoInput}\n            />\n            <button className={styles.button} onClick={addTodoHandler}>할 일 추가</button>\n            <ul className={styles.todoList}>\n                {isLoading && <p>로딩 중...</p>}\n                {todos && <>\n                    {todos.map((todo) => (\n                        <li key={todo.id} className={styles.todoItem}>\n                            <span\n                                className={styles.todoTask}\n                                style={{ textDecoration: todo.isCompleted ? 'line-through' : 'none' }}\n                                onClick={() => toggleCompletion(todo)}\n                            >\n                              {todo.task}\n                            </span>\n                            <button className={`${styles.button} ${styles.delete}`} onClick={() => deleteTodoHandler(todo)}>삭제</button>\n                        </li>\n                    ))}\n                </>}\n            </ul>\n        </div>\n    );\n}\n\nexport default TodoApp;\n```\n\n참고: 코드샌드박스 링크에는 컴포넌트를 스타일링하는 CSS 파일도 제공됩니다.\n\n# 마무리\n\n\n\nRTK Query는 Redux 애플리케이션에서 서버 측 데이터를 효율적으로 관리할 수 있는 강력한 솔루션을 제공합니다. 데이터 가져오기 및 상태 관리 로직을 추상화함으로써, 개발자들이 기능 구축에 집중할 수 있도록 도와줍니다. React 개발자들에게 꼭 필요한 도구가 될 수 있습니다.\n\n[여기를 클릭하여 데모 사이트에서 확인해보세요!](https://codesandbox.io/p/devbox/rtk-query-r8ttsh?embed=1&file=%2Fsrc%2Ffeatures%2Ftodo%2FtodoAPI%2FapiSlice.js)","ogImage":{"url":"/assets/img/2024-05-14-GettingStartedwithRTKQueryforManagingRemoteStateinReactApplications_0.png"},"coverImage":"/assets/img/2024-05-14-GettingStartedwithRTKQueryforManagingRemoteStateinReactApplications_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>현대 웹 애플리케이션에서 상태를 관리하는 것은 종종 복잡하고 번거로울 수 있습니다, 특히 API 요청과 같은 비동기 데이터를 처리할 때. 그러나 Redux Toolkit Query (RTK Query)를 사용하면 데이터 가져오기, 캐싱 및 상태 관리가 간소화되어 개발자들이 더 적은 코드로 성능 최적화된 애플리케이션을 작성할 수 있습니다. 이 기사에서는 RTK Query를 사용하여 Todo 애플리케이션 설정하는 방법을 안내하며, 그 강력함과 효율성을 소개하겠습니다.</p>\n<h1>프로젝트 구조 설정하기</h1>\n<p>먼저 React 프로젝트를 구성하여 시작하고 Redux Toolkit 및 RTK Query가 설치되어 있는지 확인하세요. 프로젝트 구조에는 주 진입 파일, API 서비스 슬라이스 및 Todo 컴포넌트가 포함됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//main.jsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ReactDOM</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom/client'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./App.jsx'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApiProvider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@reduxjs/toolkit/query/react\"</span>;\n<span class=\"hljs-keyword\">import</span> apiSlice <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./feature/todo/todoAPI/apiSlice.js\"</span>;\n\n<span class=\"hljs-comment\">// 루트 엘리먼트를 설정하고 전체 애플리케이션을 RTK Query용으로 ApiProvider로 랩합니다</span>\n<span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">createRoot</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'root'</span>)).<span class=\"hljs-title function_\">render</span>(\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">React.StrictMode</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ApiProvider</span> <span class=\"hljs-attr\">api</span>=<span class=\"hljs-string\">{apiSlice}</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">App</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ApiProvider</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">React.StrictMode</span>></span></span>,\n);\n</code></pre>\n<h1>API 서비스 슬라이스 구성하기</h1>\n<p>API 슬라이스는 RTK Query를 사용하여 할 일을 가져오고 추가하고 업데이트하고 삭제하는 방법을 정의하는 곳입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//apiSlice.js</span>\n<span class=\"hljs-keyword\">import</span> { createApi, fetchBaseQuery } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@reduxjs/toolkit/query/react\"</span>;\n\n<span class=\"hljs-keyword\">const</span> todoApi = <span class=\"hljs-title function_\">createApi</span>({\n    <span class=\"hljs-attr\">reducerPath</span>: <span class=\"hljs-string\">\"api\"</span>, <span class=\"hljs-comment\">// API 상태 슬라이스를 위한 고유한 키</span>\n    <span class=\"hljs-attr\">baseQuery</span>: <span class=\"hljs-title function_\">fetchBaseQuery</span>({ <span class=\"hljs-attr\">baseUrl</span>: <span class=\"hljs-string\">\"http://localhost:5050\"</span> }), <span class=\"hljs-comment\">// 가져오기 로직을 처리하는 기본 쿼리</span>\n    <span class=\"hljs-attr\">tagTypes</span>: [<span class=\"hljs-string\">\"TODOS\"</span>], <span class=\"hljs-comment\">// 자동 캐시 다시 가져오기를 위한 태그</span>\n    <span class=\"hljs-attr\">endpoints</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">builder</span>) =></span> ({\n        <span class=\"hljs-attr\">getTodos</span>: builder.<span class=\"hljs-title function_\">query</span>({ <span class=\"hljs-comment\">// 할 일을 가져오는 엔드포인트</span>\n            <span class=\"hljs-attr\">query</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-string\">\"/todos\"</span>,\n            <span class=\"hljs-attr\">providesTags</span>: [<span class=\"hljs-string\">\"TODOS\"</span>]\n        }),\n        <span class=\"hljs-attr\">addTodo</span>: builder.<span class=\"hljs-title function_\">mutation</span>({ <span class=\"hljs-comment\">// 새로운 할 일 추가하는 엔드포인트</span>\n            <span class=\"hljs-attr\">query</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">todo</span>) =></span> ({\n                <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"/todos\"</span>,\n                <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"POST\"</span>,\n                <span class=\"hljs-attr\">body</span>: todo\n            }),\n            <span class=\"hljs-attr\">invalidatesTags</span>: [<span class=\"hljs-string\">\"TODOS\"</span>]\n        }),\n        <span class=\"hljs-attr\">updateTodo</span>: builder.<span class=\"hljs-title function_\">mutation</span>({ <span class=\"hljs-comment\">// 기존 할 일을 업데이트하는 엔드포인트</span>\n            <span class=\"hljs-attr\">query</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">todo</span>) =></span> ({\n                <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">`/todos/<span class=\"hljs-subst\">${todo.id}</span>`</span>,\n                <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"PATCH\"</span>,\n                <span class=\"hljs-attr\">body</span>: todo\n            }),\n            <span class=\"hljs-attr\">invalidatesTags</span>: [<span class=\"hljs-string\">\"TODOS\"</span>]\n        }),\n        <span class=\"hljs-attr\">deleteTodo</span>: builder.<span class=\"hljs-title function_\">mutation</span>({ <span class=\"hljs-comment\">// 할 일을 삭제하는 엔드포인트</span>\n            <span class=\"hljs-attr\">query</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">{ id }</span>) =></span> ({\n                <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">`/todos/<span class=\"hljs-subst\">${id}</span>`</span>,\n                <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"DELETE\"</span>,\n            }),\n            <span class=\"hljs-attr\">invalidatesTags</span>: [<span class=\"hljs-string\">\"TODOS\"</span>]\n        })\n    })\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> { useGetTodosQuery, useAddTodoMutation, useUpdateTodoMutation, useDeleteTodoMutation } = todoApi;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> todoApi;\n</code></pre>\n<h1>할 일 컴포넌트 구성하기</h1>\n<p>Todo 컴포넌트에서 할 일을 표시하고 관리하는 기능을 구현해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//TodoApp.jsx</span>\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./TodoApp.module.css'</span>;\n<span class=\"hljs-keyword\">import</span> { useAddTodoMutation, useDeleteTodoMutation, useGetTodosQuery, useUpdateTodoMutation } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./todoAPI/apiSlice.js\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TodoApp</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> [task, setTask] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n    <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">data</span>: todos, isLoading, isError, isSuccess, error } = <span class=\"hljs-title function_\">useGetTodosQuery</span>();\n    <span class=\"hljs-keyword\">const</span> [addTodo] = <span class=\"hljs-title function_\">useAddTodoMutation</span>();\n    <span class=\"hljs-keyword\">const</span> [updateTodo] = <span class=\"hljs-title function_\">useUpdateTodoMutation</span>();\n    <span class=\"hljs-keyword\">const</span> [deleteTodo] = <span class=\"hljs-title function_\">useDeleteTodoMutation</span>();\n\n    <span class=\"hljs-comment\">// 할 일 추가를 처리하는 함수</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addTodoHandler</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">const</span> newTodo = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>(), <span class=\"hljs-attr\">task</span>: task, <span class=\"hljs-attr\">isCompleted</span>: <span class=\"hljs-literal\">false</span> };\n        <span class=\"hljs-title function_\">addTodo</span>(newTodo);\n        <span class=\"hljs-title function_\">setTask</span>(<span class=\"hljs-string\">''</span>);\n    }\n\n    <span class=\"hljs-comment\">// 할 일 완료 상태 전환을 처리하는 함수</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">toggleCompletion</span>(<span class=\"hljs-params\">todo</span>) {\n        <span class=\"hljs-title function_\">updateTodo</span>({ ...todo, <span class=\"hljs-attr\">isCompleted</span>: !todo.<span class=\"hljs-property\">isCompleted</span> });\n    }\n\n    <span class=\"hljs-comment\">// 할 일 삭제를 처리하는 함수</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">deleteTodoHandler</span>(<span class=\"hljs-params\">todo</span>) {\n        <span class=\"hljs-title function_\">deleteTodo</span>(todo);\n    }\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.container}</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.title}</span>></span>할 일 목록<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n                <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n                <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"새로운 작업 추가\"</span>\n                <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{task}</span>\n                <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setTask(e.target.value)}\n                className={styles.todoInput}\n            />\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.button}</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{addTodoHandler}</span>></span>할 일 추가<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.todoList}</span>></span>\n                {isLoading &#x26;&#x26; <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>로딩 중...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>}\n                {todos &#x26;&#x26; <span class=\"hljs-tag\">&#x3C;></span>\n                    {todos.map((todo) => (\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{todo.id}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.todoItem}</span>></span>\n                            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>\n                                <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.todoTask}</span>\n                                <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">textDecoration:</span> <span class=\"hljs-attr\">todo.isCompleted</span> ? '<span class=\"hljs-attr\">line-through</span>' <span class=\"hljs-attr\">:</span> '<span class=\"hljs-attr\">none</span>' }}\n                                <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> toggleCompletion(todo)}\n                            >\n                              {todo.task}\n                            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n                            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`${<span class=\"hljs-attr\">styles.button</span>} ${<span class=\"hljs-attr\">styles.delete</span>}`} <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> deleteTodoHandler(todo)}>삭제<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                    ))}\n                <span class=\"hljs-tag\">&#x3C;/></span>}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span></span>\n        &#x3C;/div>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">TodoApp</span>;\n</code></pre>\n<p>참고: 코드샌드박스 링크에는 컴포넌트를 스타일링하는 CSS 파일도 제공됩니다.</p>\n<h1>마무리</h1>\n<p>RTK Query는 Redux 애플리케이션에서 서버 측 데이터를 효율적으로 관리할 수 있는 강력한 솔루션을 제공합니다. 데이터 가져오기 및 상태 관리 로직을 추상화함으로써, 개발자들이 기능 구축에 집중할 수 있도록 도와줍니다. React 개발자들에게 꼭 필요한 도구가 될 수 있습니다.</p>\n<p><a href=\"https://codesandbox.io/p/devbox/rtk-query-r8ttsh?embed=1&#x26;file=%2Fsrc%2Ffeatures%2Ftodo%2FtodoAPI%2FapiSlice.js\" rel=\"nofollow\" target=\"_blank\">여기를 클릭하여 데모 사이트에서 확인해보세요!</a></p>\n</body>\n</html>\n"},"__N_SSG":true}