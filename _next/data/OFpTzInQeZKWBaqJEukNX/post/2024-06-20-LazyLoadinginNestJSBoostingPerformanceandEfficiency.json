{"pageProps":{"post":{"title":"NestJS에서의 Lazy Loading 성능과 효율성 향상","description":"","date":"2024-06-20 01:43","slug":"2024-06-20-LazyLoadinginNestJSBoostingPerformanceandEfficiency","content":"\n\n<img src=\"/assets/img/2024-06-20-LazyLoadinginNestJSBoostingPerformanceandEfficiency_0.png\" />\n\n게으른로딩은 실제로 필요할 때까지 리소스의 초기화를 지연시키는 강력한 디자인 패턴입니다. 이는 응용 프로그램의 성능과 리소스 관리를 현저히 개선할 수 있습니다. NestJS에서는 동적 모듈과 @nestjs/core의 LazyModuleLoader를 사용하여 게으른 로딩을 구현할 수 있습니다. 이 문서에서는 두 가지 방법을 탐구하며 자세한 예제를 제공하여 NestJS 응용 프로그램에서 게으른 로딩을 구현하는 데 도움을 줍니다.\n\n## 게으른 로딩의 이점\n\n게으른 로딩은 다음을 도와줍니다:\n\n<div class=\"content-ad\"></div>\n\n- 초기 로드 시간 단축: 모든 것을 시작할 때 불러오지 않아도 애플리케이션이 더 빨리 시작됩니다.\n- 리소스 사용 최적화: 실제로 필요한 경우에만 구성 요소 또는 모듈을 로드합니다.\n- 확장성 향상: 리소스를 효율적으로 사용하면 애플리케이션이 더 잘 확장될 수 있습니다.\n\n# Lazy Loading을 위해 LazyModuleLoader 사용하기\n\nNestJS에서 Lazy Loading을 구현하려면 @nestjs/core의 LazyModuleLoader를 사용합니다.\n\n## 단계 1: Lazy Loading할 모듈 생성하기\n\n<div class=\"content-ad\"></div>\n\n이전과 같이 ReportsModule을 생성하세요.\n\n```js\n// reports.module.ts\nimport { Module } from '@nestjs/common';\nimport { ReportsService } from './reports.service';\nimport { ReportsController } from './reports.controller';\n\n@Module({\n  controllers: [ReportsController],\n  providers: [ReportsService],\n})\nexport class ReportsModule {}\n```\n\n## 단계 2: Lazy Loaded Module을 위한 서비스 생성\n\nReportsModule을 위한 서비스를 정의하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n// reports.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ReportsService {\n  getReport(): string {\n    console.log('lazily loaded reports module');\n    return 'This is a report!';\n  }\n}\n```\n\n## Step 3: Define the Main Module\n\nReportsModule을 나중에 import할 것이기 때문에 AppModule을 정의합니다.\n\n```js\n// app.module.ts\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n<div class=\"content-ad\"></div>\n\n## 단계 4: 레이지 로딩 및 기타 로직을 처리하는 컨트롤러 생성\n\nReportsModule을 동적으로 로드하는 LazyModuleLoader를 사용하는 컨트롤러를 생성하세요.\n\n```js\n// app.controller.ts\nimport { Controller, Get } from '@nestjs/common';\nimport { LazyModuleLoader } from '@nestjs/core';\nimport { ReportsModule } from './reports/reports.module';\nimport { ReportsService } from './reports/reports.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly lazyModuleLoader: LazyModuleLoader) {}\n\n  @Get()\n  async getLazyReport(): Promise<string> {\n    // ReportsModule의 초기화 시간을 알아내기 위해 console.time() 및 console.timeEnd() 사용\n    console.time();\n    const moduleRef = await this.lazyModuleLoader.load(() => ReportsModule);\n    const reportsService = moduleRef.get(ReportsService);\n    console.timeEnd();\n    return reportsService.getReport();\n  }\n}\n```\n\n# 예시 사용법\n\n<div class=\"content-ad\"></div>\n\n엔드포인트에 처음 요청이 발생하면 ReportsModule이 게으르게 로드되며, ReportsService가 요청을 처리하고 보고서를 반환할 것입니다.\n\n```js\n$ curl http://localhost:3000/lazy-reports\n이것은 보고서입니다!\n```\n\n그리고 여러 요청을 생성하면 각 연속적인 시도마다 ReportsModule을 로드하는 것이 훨씬 빨라집니다. load 메서드는 모듈의 캐시된 인스턴스를 반환합니다.\n\n한 번 이상의 요청을 생성하면 앱 로그에 이와 같은 출력이 표시됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ndefault: 6.226ms\nReports 모듈을 게으르게 로드했습니다\n[Nest] 208649  - 2024년 5월 26일, 오후 8:33:22     LOG [LazyModuleLoader] ReportsModule 종속성이 초기화되었습니다\ndefault: 2.323ms\nReports 모듈을 게으르게 로드했습니다\n[Nest] 208649  - 2024년 5월 26일, 오후 8:33:22     LOG [LazyModuleLoader] ReportsModule 종속성이 초기화되었습니다\ndefault: 2.012ms\nReports 모듈을 게으르게 로드했습니다\n```\n\n# 결론\n\nNestJS에서 게으른 로딩을 구현하면 응용프로그램의 성능과 자원 효율성을 크게 향상시킬 수 있습니다.\n\nNestJS에서 LazyModuleLoader를 사용하면 모듈이 처음으로 게으르게 로드되고 캐시되어 성능 및 자원 사용량을 최적화합니다. 이 접근 방식은 동적 모듈 로딩을 효율적으로 관리하여 초기 로드 시간과 런타임 효율성 사이의 균형을 제공합니다.","ogImage":{"url":"/assets/img/2024-06-20-LazyLoadinginNestJSBoostingPerformanceandEfficiency_0.png"},"coverImage":"/assets/img/2024-06-20-LazyLoadinginNestJSBoostingPerformanceandEfficiency_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-20-LazyLoadinginNestJSBoostingPerformanceandEfficiency_0.png\">\n<p>게으른로딩은 실제로 필요할 때까지 리소스의 초기화를 지연시키는 강력한 디자인 패턴입니다. 이는 응용 프로그램의 성능과 리소스 관리를 현저히 개선할 수 있습니다. NestJS에서는 동적 모듈과 @nestjs/core의 LazyModuleLoader를 사용하여 게으른 로딩을 구현할 수 있습니다. 이 문서에서는 두 가지 방법을 탐구하며 자세한 예제를 제공하여 NestJS 응용 프로그램에서 게으른 로딩을 구현하는 데 도움을 줍니다.</p>\n<h2>게으른 로딩의 이점</h2>\n<p>게으른 로딩은 다음을 도와줍니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>초기 로드 시간 단축: 모든 것을 시작할 때 불러오지 않아도 애플리케이션이 더 빨리 시작됩니다.</li>\n<li>리소스 사용 최적화: 실제로 필요한 경우에만 구성 요소 또는 모듈을 로드합니다.</li>\n<li>확장성 향상: 리소스를 효율적으로 사용하면 애플리케이션이 더 잘 확장될 수 있습니다.</li>\n</ul>\n<h1>Lazy Loading을 위해 LazyModuleLoader 사용하기</h1>\n<p>NestJS에서 Lazy Loading을 구현하려면 @nestjs/core의 LazyModuleLoader를 사용합니다.</p>\n<h2>단계 1: Lazy Loading할 모듈 생성하기</h2>\n<div class=\"content-ad\"></div>\n<p>이전과 같이 ReportsModule을 생성하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// reports.module.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ReportsService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./reports.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ReportsController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./reports.controller'</span>;\n\n@<span class=\"hljs-title class_\">Module</span>({\n  <span class=\"hljs-attr\">controllers</span>: [<span class=\"hljs-title class_\">ReportsController</span>],\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">ReportsService</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReportsModule</span> {}\n</code></pre>\n<h2>단계 2: Lazy Loaded Module을 위한 서비스 생성</h2>\n<p>ReportsModule을 위한 서비스를 정의하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// reports.service.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReportsService</span> {\n  <span class=\"hljs-title function_\">getReport</span>(): string {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'lazily loaded reports module'</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'This is a report!'</span>;\n  }\n}\n</code></pre>\n<h2>Step 3: Define the Main Module</h2>\n<p>ReportsModule을 나중에 import할 것이기 때문에 AppModule을 정의합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// app.module.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.controller'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.service'</span>;\n\n@<span class=\"hljs-title class_\">Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [],\n  <span class=\"hljs-attr\">controllers</span>: [<span class=\"hljs-title class_\">AppController</span>],\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">AppService</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>단계 4: 레이지 로딩 및 기타 로직을 처리하는 컨트롤러 생성</h2>\n<p>ReportsModule을 동적으로 로드하는 LazyModuleLoader를 사용하는 컨트롤러를 생성하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// app.controller.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Controller</span>, <span class=\"hljs-title class_\">Get</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">LazyModuleLoader</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ReportsModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./reports/reports.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ReportsService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./reports/reports.service'</span>;\n\n@<span class=\"hljs-title class_\">Controller</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppController</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private readonly lazyModuleLoader: LazyModuleLoader</span>) {}\n\n  @<span class=\"hljs-title class_\">Get</span>()\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getLazyReport</span>(): <span class=\"hljs-title class_\">Promise</span>&#x3C;string> {\n    <span class=\"hljs-comment\">// ReportsModule의 초기화 시간을 알아내기 위해 console.time() 및 console.timeEnd() 사용</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">time</span>();\n    <span class=\"hljs-keyword\">const</span> moduleRef = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">lazyModuleLoader</span>.<span class=\"hljs-title function_\">load</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title class_\">ReportsModule</span>);\n    <span class=\"hljs-keyword\">const</span> reportsService = moduleRef.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">ReportsService</span>);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">timeEnd</span>();\n    <span class=\"hljs-keyword\">return</span> reportsService.<span class=\"hljs-title function_\">getReport</span>();\n  }\n}\n</code></pre>\n<h1>예시 사용법</h1>\n<div class=\"content-ad\"></div>\n<p>엔드포인트에 처음 요청이 발생하면 ReportsModule이 게으르게 로드되며, ReportsService가 요청을 처리하고 보고서를 반환할 것입니다.</p>\n<pre><code class=\"hljs language-js\">$ curl <span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//localhost:3000/lazy-reports</span>\n이것은 보고서입니다!\n</code></pre>\n<p>그리고 여러 요청을 생성하면 각 연속적인 시도마다 ReportsModule을 로드하는 것이 훨씬 빨라집니다. load 메서드는 모듈의 캐시된 인스턴스를 반환합니다.</p>\n<p>한 번 이상의 요청을 생성하면 앱 로그에 이와 같은 출력이 표시됩니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">6.</span>226ms\n<span class=\"hljs-title class_\">Reports</span> 모듈을 게으르게 로드했습니다\n[<span class=\"hljs-title class_\">Nest</span>] <span class=\"hljs-number\">208649</span>  - <span class=\"hljs-number\">2024</span>년 <span class=\"hljs-number\">5</span>월 <span class=\"hljs-number\">26</span>일, 오후 <span class=\"hljs-number\">8</span>:<span class=\"hljs-number\">33</span>:<span class=\"hljs-number\">22</span>     <span class=\"hljs-variable constant_\">LOG</span> [<span class=\"hljs-title class_\">LazyModuleLoader</span>] <span class=\"hljs-title class_\">ReportsModule</span> 종속성이 초기화되었습니다\n<span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">2.</span>323ms\n<span class=\"hljs-title class_\">Reports</span> 모듈을 게으르게 로드했습니다\n[<span class=\"hljs-title class_\">Nest</span>] <span class=\"hljs-number\">208649</span>  - <span class=\"hljs-number\">2024</span>년 <span class=\"hljs-number\">5</span>월 <span class=\"hljs-number\">26</span>일, 오후 <span class=\"hljs-number\">8</span>:<span class=\"hljs-number\">33</span>:<span class=\"hljs-number\">22</span>     <span class=\"hljs-variable constant_\">LOG</span> [<span class=\"hljs-title class_\">LazyModuleLoader</span>] <span class=\"hljs-title class_\">ReportsModule</span> 종속성이 초기화되었습니다\n<span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">2.</span>012ms\n<span class=\"hljs-title class_\">Reports</span> 모듈을 게으르게 로드했습니다\n</code></pre>\n<h1>결론</h1>\n<p>NestJS에서 게으른 로딩을 구현하면 응용프로그램의 성능과 자원 효율성을 크게 향상시킬 수 있습니다.</p>\n<p>NestJS에서 LazyModuleLoader를 사용하면 모듈이 처음으로 게으르게 로드되고 캐시되어 성능 및 자원 사용량을 최적화합니다. 이 접근 방식은 동적 모듈 로딩을 효율적으로 관리하여 초기 로드 시간과 런타임 효율성 사이의 균형을 제공합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}