{"pageProps":{"post":{"title":"SwiftUI에서 무한 갤러리를 쉽게 만드는 방법","description":"","date":"2024-07-01 17:01","slug":"2024-07-01-TheSimplestWaytoCreateanInfiniteGalleryinSwiftUI","content":"\n\n안녕하세요 여러분! iOS 앱에서 무한 갤러리를 만들어야 하는 일이 있었나요? 사진 목록이나 배송 앱에서 제품 목록을 만들 때 이런 필요성을 마주할 수 있습니다. 이 짧은 글에서는 가장 정확하고 간단한 방법을 보여드리겠습니다.\n\n![간단한 무한 갤러리를 만드는 가장 간단한 방법](/assets/img/2024-07-01-TheSimplestWaytoCreateanInfiniteGalleryinSwiftUI_0.png)\n\nSwiftUI는 UIKit 시대에는 꿈에도 못 꾸던 많은 것들을 구현할 수 있는 강력한 프레임워크입니다. 이 글에서는 SwiftUI의 내부 API인 PagingView를 사용할 것인데, 이 뷰는 문서화되어 있지 않지만 iOS 14부터 사용할 수 있는 매우 강력한 뷰입니다.\n\n우선, 빈 ContentView를 메인 화면으로 하는 SwiftUI 프로젝트를 만들어봅시다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport SwiftUI\n\n@main\nstruct InfiniteGalleryApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n    }\n}\n```\n\n좋은 작업이에요! ContentView에서는 우리의 데이터 배열을 생성할 거예요 - 세 가지 색상(빨강, 초록, 파랑) - 이를 무한 갤러리에 배치할 거에요.\n\n```js\nimport SwiftUI\n\nstruct ContentView: View {\n    let colors: [Color] = [.red, .green, .blue]\n    \n    var body: some View {\n        // some body\n    }\n}\n```\n\n뷰의 본문에는 _PagingView의 인스턴스를 하나 넣을 거예요.\n\n<div class=\"content-ad\"></div>\n\n```js\nlet colors: [Color] = [.red, .green, .blue]\n@State private var currentCard: Int = 0\n\nvar body: some View {\n    _PagingView(\n        config: .init(direction: .horizontal, margin: 8, spacing: 8),\n        page: $currentCard,\n        views: cards\n    )\n}\n\nprivate var cards: [AnyView] {\n    // 우리의 색깔을 뷰 배열로 매핑합니다.\n}\n```\n\n_PagingView는 이 코드의 가장 흥미로운 부분입니다. 수평 또는 수직 방향으로 카드 세트를 분배하고 간격 및 정렬을 관리하며 심지어 페이지네이션도 제공합니다. SwiftUI의 ScrollView에서 iOS 17부터 사용 가능한 기능 중 하나입니다.\n\n이제 cards 속성을 정의해 보겠습니다. 단순히 우리의 색깔을 색칠된 직사각형 배열로 매핑합니다.\n\n```js\nprivate var cards: [AnyView] {\n    colors.map { color in\n        AnyView(\n            Rectangle()\n                .fill(color)\n                .frame(height: 72)\n        )\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 코드로 인해 갤러리가 이미 잘 작동합니다. 그러나 우리는 무한 스크롤 효과를 얻을 수 없습니다. _PagingView에 유한한 배열을 제공했기 때문에 그러합니다. 마지막 요소 이후에 아무것도 없기 때문에 _PagingView 내부의 ScrollView는 간단히 콘텐츠 가장자리를 향해 튕겨져 다시 돌아올 뿐입니다.\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*tqZDRqYekPSCW1IPBcDzRg.gif\" />\n\n진정한 무한 행동을 달성하기 위해 _PagingView는 views의 RandomAccessCollection을 인자로 받는다는 것을 기억해야 합니다. 우리는 이를 활용해서 무한 반복되는 사용자 정의 컬렉션을 만들어야 합니다. 마지막 요소 이후에 첫 번째 요소로 다시 돌아가는 InfiniteArray라는 컬렉션을 만들어 무한 행동을 보장할 수 있습니다. 이것을 살펴보세요:\n\n```js\nfinal class InfiniteArray<Content>: RandomAccessCollection {\n    private var elements: [Content]\n    \n    init(elements: [Content]) {\n        self.elements = elements\n    }\n    \n    var startIndex: Int { Int.min }\n    var endIndex: Int { Int.max) }\n    \n    subscript(position: Int) -> Content {\n        let index = (elements.count + (position % elements.count)) % elements.count\n        return elements[index]\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n우리가 반복하고 싶은 요소 배열에서 초기화할 수 있으며, n번째 요소 다음에 (n+1)번째 요소를 생성할 수 있습니다. 이제 cards 속성을 이 새로운 컬렉션을 사용하도록 수정해봅시다.\n\n```js\nprivate var cards: InfiniteArray<AnyView> {\n    InfiniteArray(elements: colors.map { color in\n        AnyView(\n            Rectangle()\n                .fill(color)\n                .frame(height: 72)\n        )\n    )\n}\n```\n\n이 수정으로 갤러리가 어떻게 변화되었는지 확인할 수 있습니다. 이제 우리가 원했던 무한한 동작을 갖고 있습니다!\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*y49T8uq9HNmc30b10WNoCg.gif\" />\n\n<div class=\"content-ad\"></div>\n\n여러분, 이 글을 여기까지 읽어주셔서 감사합니다. 이 포스트에서는 40줄의 코드로 무한 페이징 갤러리를 구현했습니다. 이 프로젝트의 전체 코드에 관심이 있다면 여기에서 찾을 수 있어요 — https://github.com/maxoog/InfiniteGallery.","ogImage":{"url":"/assets/img/2024-07-01-TheSimplestWaytoCreateanInfiniteGalleryinSwiftUI_0.png"},"coverImage":"/assets/img/2024-07-01-TheSimplestWaytoCreateanInfiniteGalleryinSwiftUI_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요 여러분! iOS 앱에서 무한 갤러리를 만들어야 하는 일이 있었나요? 사진 목록이나 배송 앱에서 제품 목록을 만들 때 이런 필요성을 마주할 수 있습니다. 이 짧은 글에서는 가장 정확하고 간단한 방법을 보여드리겠습니다.</p>\n<p><img src=\"/assets/img/2024-07-01-TheSimplestWaytoCreateanInfiniteGalleryinSwiftUI_0.png\" alt=\"간단한 무한 갤러리를 만드는 가장 간단한 방법\"></p>\n<p>SwiftUI는 UIKit 시대에는 꿈에도 못 꾸던 많은 것들을 구현할 수 있는 강력한 프레임워크입니다. 이 글에서는 SwiftUI의 내부 API인 PagingView를 사용할 것인데, 이 뷰는 문서화되어 있지 않지만 iOS 14부터 사용할 수 있는 매우 강력한 뷰입니다.</p>\n<p>우선, 빈 ContentView를 메인 화면으로 하는 SwiftUI 프로젝트를 만들어봅시다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">SwiftUI</span>\n\n@main\nstruct <span class=\"hljs-title class_\">InfiniteGalleryApp</span>: <span class=\"hljs-title class_\">App</span> {\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">Scene</span> {\n        <span class=\"hljs-title class_\">WindowGroup</span> {\n            <span class=\"hljs-title class_\">ContentView</span>()\n        }\n    }\n}\n</code></pre>\n<p>좋은 작업이에요! ContentView에서는 우리의 데이터 배열을 생성할 거예요 - 세 가지 색상(빨강, 초록, 파랑) - 이를 무한 갤러리에 배치할 거에요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">SwiftUI</span>\n\nstruct <span class=\"hljs-title class_\">ContentView</span>: <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">colors</span>: [<span class=\"hljs-title class_\">Color</span>] = [.<span class=\"hljs-property\">red</span>, .<span class=\"hljs-property\">green</span>, .<span class=\"hljs-property\">blue</span>]\n    \n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n        <span class=\"hljs-comment\">// some body</span>\n    }\n}\n</code></pre>\n<p>뷰의 본문에는 _PagingView의 인스턴스를 하나 넣을 거예요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">colors</span>: [<span class=\"hljs-title class_\">Color</span>] = [.<span class=\"hljs-property\">red</span>, .<span class=\"hljs-property\">green</span>, .<span class=\"hljs-property\">blue</span>]\n@<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">currentCard</span>: <span class=\"hljs-title class_\">Int</span> = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-title function_\">_PagingView</span>(\n        <span class=\"hljs-attr\">config</span>: .<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-attr\">direction</span>: .<span class=\"hljs-property\">horizontal</span>, <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">8</span>, <span class=\"hljs-attr\">spacing</span>: <span class=\"hljs-number\">8</span>),\n        <span class=\"hljs-attr\">page</span>: $currentCard,\n        <span class=\"hljs-attr\">views</span>: cards\n    )\n}\n\nprivate <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">cards</span>: [<span class=\"hljs-title class_\">AnyView</span>] {\n    <span class=\"hljs-comment\">// 우리의 색깔을 뷰 배열로 매핑합니다.</span>\n}\n</code></pre>\n<p>_PagingView는 이 코드의 가장 흥미로운 부분입니다. 수평 또는 수직 방향으로 카드 세트를 분배하고 간격 및 정렬을 관리하며 심지어 페이지네이션도 제공합니다. SwiftUI의 ScrollView에서 iOS 17부터 사용 가능한 기능 중 하나입니다.</p>\n<p>이제 cards 속성을 정의해 보겠습니다. 단순히 우리의 색깔을 색칠된 직사각형 배열로 매핑합니다.</p>\n<pre><code class=\"hljs language-js\">private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">cards</span>: [<span class=\"hljs-title class_\">AnyView</span>] {\n    colors.<span class=\"hljs-property\">map</span> { color <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-title class_\">AnyView</span>(\n            <span class=\"hljs-title class_\">Rectangle</span>()\n                .<span class=\"hljs-title function_\">fill</span>(color)\n                .<span class=\"hljs-title function_\">frame</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">72</span>)\n        )\n    }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 코드로 인해 갤러리가 이미 잘 작동합니다. 그러나 우리는 무한 스크롤 효과를 얻을 수 없습니다. _PagingView에 유한한 배열을 제공했기 때문에 그러합니다. 마지막 요소 이후에 아무것도 없기 때문에 _PagingView 내부의 ScrollView는 간단히 콘텐츠 가장자리를 향해 튕겨져 다시 돌아올 뿐입니다.</p>\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*tqZDRqYekPSCW1IPBcDzRg.gif\">\n<p>진정한 무한 행동을 달성하기 위해 _PagingView는 views의 RandomAccessCollection을 인자로 받는다는 것을 기억해야 합니다. 우리는 이를 활용해서 무한 반복되는 사용자 정의 컬렉션을 만들어야 합니다. 마지막 요소 이후에 첫 번째 요소로 다시 돌아가는 InfiniteArray라는 컬렉션을 만들어 무한 행동을 보장할 수 있습니다. 이것을 살펴보세요:</p>\n<pre><code class=\"hljs language-js\">final <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">InfiniteArray</span>&#x3C;<span class=\"hljs-title class_\">Content</span>>: <span class=\"hljs-title class_\">RandomAccessCollection</span> {\n    private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">elements</span>: [<span class=\"hljs-title class_\">Content</span>]\n    \n    <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\">elements: [Content]</span>) {\n        self.<span class=\"hljs-property\">elements</span> = elements\n    }\n    \n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">startIndex</span>: <span class=\"hljs-title class_\">Int</span> { <span class=\"hljs-title class_\">Int</span>.<span class=\"hljs-property\">min</span> }\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">endIndex</span>: <span class=\"hljs-title class_\">Int</span> { <span class=\"hljs-title class_\">Int</span>.<span class=\"hljs-property\">max</span>) }\n    \n    <span class=\"hljs-title function_\">subscript</span>(<span class=\"hljs-attr\">position</span>: <span class=\"hljs-title class_\">Int</span>) -> <span class=\"hljs-title class_\">Content</span> {\n        <span class=\"hljs-keyword\">let</span> index = (elements.<span class=\"hljs-property\">count</span> + (position % elements.<span class=\"hljs-property\">count</span>)) % elements.<span class=\"hljs-property\">count</span>\n        <span class=\"hljs-keyword\">return</span> elements[index]\n    }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>우리가 반복하고 싶은 요소 배열에서 초기화할 수 있으며, n번째 요소 다음에 (n+1)번째 요소를 생성할 수 있습니다. 이제 cards 속성을 이 새로운 컬렉션을 사용하도록 수정해봅시다.</p>\n<pre><code class=\"hljs language-js\">private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">cards</span>: <span class=\"hljs-title class_\">InfiniteArray</span>&#x3C;<span class=\"hljs-title class_\">AnyView</span>> {\n    <span class=\"hljs-title class_\">InfiniteArray</span>(<span class=\"hljs-attr\">elements</span>: colors.<span class=\"hljs-property\">map</span> { color <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-title class_\">AnyView</span>(\n            <span class=\"hljs-title class_\">Rectangle</span>()\n                .<span class=\"hljs-title function_\">fill</span>(color)\n                .<span class=\"hljs-title function_\">frame</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">72</span>)\n        )\n    )\n}\n</code></pre>\n<p>이 수정으로 갤러리가 어떻게 변화되었는지 확인할 수 있습니다. 이제 우리가 원했던 무한한 동작을 갖고 있습니다!</p>\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*y49T8uq9HNmc30b10WNoCg.gif\">\n<div class=\"content-ad\"></div>\n<p>여러분, 이 글을 여기까지 읽어주셔서 감사합니다. 이 포스트에서는 40줄의 코드로 무한 페이징 갤러리를 구현했습니다. 이 프로젝트의 전체 코드에 관심이 있다면 여기에서 찾을 수 있어요 — <a href=\"https://github.com/maxoog/InfiniteGallery\" rel=\"nofollow\" target=\"_blank\">https://github.com/maxoog/InfiniteGallery</a>.</p>\n</body>\n</html>\n"},"__N_SSG":true}