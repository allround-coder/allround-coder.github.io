{"pageProps":{"post":{"title":"깃허브에서 SSH 키 생성하는 빠른 스텝별 가이드","description":"","date":"2024-06-20 01:03","slug":"2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub","content":"\n\n## 쉽고 간단하며 비기술적인 설명\n\n![이미지](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_0.png)\n\n친구들,\n\n이 튜토리얼은 우리 둘 다를 위한 것이에요. SSH 키를 설정해야 했던 적이 두세 번 있었는데, 매번 악몽이었죠. 즐겁게 경험한 적은 없어요. 제가 찾은 대부분의 튜토리얼은 복잡하고 따라가기 어려웠어요.\n\n<div class=\"content-ad\"></div>\n\n이 글에서는 프로세스를 간단히 설명하겠습니다. SSH 키를 생성하는 간단한, 비기술적인, 단계별 가이드를 제공하겠습니다. 영어로 설명되어 있어 초등학생조차 따를 수 있을 것이며, 사진도 있습니다. 누가 사진을 싫어하겠어요?\n\n시작해봅시다.\n\n## Windows 터미널\n\n시작하기 위해 Windows 터미널을 여시면 됩니다. 이 튜토리얼에서는 Ubuntu 터미널을 사용하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_1.png)\n\n현재 데스크톱 폴더에 있는지 확인해주세요. 위 스크린샷에서 보듯이, 저는 현재 데스크톱 폴더에 있어요.\n\n만약 데스크톱 폴더에 있지 않다면, 수정해봅시다.\n\n- 폴더에 들어가려면 cd 폴더명을 사용하세요. 폴더명 자리에 들어가고 싶은 폴더명을 넣어주세요.\n- 현재 폴더를 벗어나려면 cd ~를 사용하세요.\n- 현재 위치한 폴더 안의 폴더와 파일을 보려면 ls를 사용하세요.\n\n<div class=\"content-ad\"></div>\n\n이 명령어를 사용하여 데스크톱 폴더로 이동하세요.\n\n## SSH 폴더 열기\n\n교수님께서 .ssh 폴더에 SSH 키를 저장하라고 가르쳐 주셨어요. 그렇게 하면 모든 키가 동일한 폴더에 포함됩니다. 이제 그 방법을 보여 드릴게요.\n\n이 폴더를 생성하려면 다음을 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nmkdir .ssh\n```\n\nmkdir은 현재 폴더에 새 디렉토리(즉, 폴더)를 만드는 명령어입니다. 현재 데스크톱 폴더에 있기 때문에 이 명령은 데스크톱에 .ssh라는 폴더를 만듭니다.\n\n그리고 나중을 위해, 만약 이 폴더가 이미 있는지 확인하고 싶다면, 다음을 실행할 겁니다:\n\n```js\nls -larths\n```\n\n<div class=\"content-ad\"></div>\n\n위에 표시된 이미지는 ls -larths 명령어의 결과입니다. 제일 아래에서 .ssh 폴더를 볼 수 있습니다. 저는 그것을 노란색으로 강조했어요.\n\n이 폴더를 생성한 후에는 이 폴더로 이동하고 싶어요. 다음 명령어로 폴더로 이동하세요:\n\n```js\ncd .ssh\n```\n\n<div class=\"content-ad\"></div>\n\n## SSH 키 생성하기\n\nSSH 폴더 안에 있어요. 제 경우처럼 SSH 키가 이미 있는 경우가 있습니다. 우리는 개인 및 공개 RSA 키를 가지고 있습니다.\n\n키가 이미 있는지 확인하려면 ls를 사용할 수 있어요.\n\n![이미지](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_3.png)\n\n<div class=\"content-ad\"></div>\n\n제 경우에는 그 키들이 존재합니다. 저희의 개인 키인 id_rsa가 있습니다. 아무에게도 공유하지 마세요. 그리고 우리의 공개 키인 id_rsa.pub도 있습니다. 이웃들과 자유롭게 공유하세요.\n\n만약 키가 없다면, 만들어 봅시다. .ssh 폴더 안에서 다음 명령어를 실행하세요:\n\n```js\nssh-keygen -b 4096 -t rsa\n```\n\n이 명령은 4096비트의 RSA 키를 생성합니다. 이는 고수준의 암호화를 제공합니다. 원한다면 다르게 설정할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n커스터마이징할 수 있는 내용을 보려면 man ssh-keygen 명령어를 실행해보세요. 여기서 사용할 수 있는 모든 플래그가 표시될 거에요. 하지만 초보자라면 위 명령어로 충분히 작동할 거예요. 일이 처리될 거에요.\n\n명령어를 실행해보세요. 공개 및 비공개 RSA 키 쌍을 생성하기 시작할 거에요. 파일, 비밀번호, 그리고 다시 한번 비밀번호를 요청할 거에요. 모두 엔터 키를 눌러 건너뛸 수 있어요.\n\n그러면 끝이에요. RSA 키가 생성되었습니다. 앞서 말한 대로 ls를 사용해 키가 이미 존재하는지 확인할 수 있어요.\n\n![image](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_4.png)\n\n<div class=\"content-ad\"></div>\n\n아래와 같이 확인하실 수 있어요.\n\n한 번, 우리가 id_rsa.pub 인 공개 키를 가지게 되면, 이것을 확인하고 싶어요. SSH 키를 확인하고 싶어요.\n\n다음 명령어를 사용하여 id_rsa.pub 파일을 열어봐요.\n\n```js\nless id_rsa.pub\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_5.png\" />\n\n요렇게 나와야 할 거에요. 전체 청크를 복사하시고요 — 전체 청크를 말이에요. 그 다음에 GitHub에 붙여넣을 거에요.\n\n# GitHub\n\n## GitHub에 로그인하고 설정으로 이동하기\n\n<div class=\"content-ad\"></div>\n\n\n![Step 6](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_6.png)\n\n## Open the Tab “SSH and GFG Keys”\n\n![Step 7](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_7.png)\n\n## Create a “NEW SSH KEY”\n\n\n<div class=\"content-ad\"></div>\n\n\n![QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_8](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_8.png)\n\nThe screen shown below will pop up.\n\n![QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_9](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_9.png)\n\nGive your SSH key a meaningful title. I called mine ASUS LAPTOP.\n\n\n<div class=\"content-ad\"></div>\n\n그럼 SSH 키를 붙여넣으세요. \"SSH 키 추가\" 버튼을 누르세요. GitHub에서 당신이 정말 본인임을 확인하려면 비밀번호를 입력하라는 메시지가 표시될 거에요. 비밀번호를 확인한 후에는 모두 준비된 거죠!\n\n이제 여러분은 SSH 키가 항상 데스크톱에 저장된다는 것을 기억할 수 있어요. 그 키들은 .ssh라는 폴더에 있답니다.\n\n끝났어요. 축하해요.","ogImage":{"url":"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_0.png"},"coverImage":"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>쉽고 간단하며 비기술적인 설명</h2>\n<p><img src=\"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_0.png\" alt=\"이미지\"></p>\n<p>친구들,</p>\n<p>이 튜토리얼은 우리 둘 다를 위한 것이에요. SSH 키를 설정해야 했던 적이 두세 번 있었는데, 매번 악몽이었죠. 즐겁게 경험한 적은 없어요. 제가 찾은 대부분의 튜토리얼은 복잡하고 따라가기 어려웠어요.</p>\n<div class=\"content-ad\"></div>\n<p>이 글에서는 프로세스를 간단히 설명하겠습니다. SSH 키를 생성하는 간단한, 비기술적인, 단계별 가이드를 제공하겠습니다. 영어로 설명되어 있어 초등학생조차 따를 수 있을 것이며, 사진도 있습니다. 누가 사진을 싫어하겠어요?</p>\n<p>시작해봅시다.</p>\n<h2>Windows 터미널</h2>\n<p>시작하기 위해 Windows 터미널을 여시면 됩니다. 이 튜토리얼에서는 Ubuntu 터미널을 사용하겠습니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_1.png\" alt=\"이미지\"></p>\n<p>현재 데스크톱 폴더에 있는지 확인해주세요. 위 스크린샷에서 보듯이, 저는 현재 데스크톱 폴더에 있어요.</p>\n<p>만약 데스크톱 폴더에 있지 않다면, 수정해봅시다.</p>\n<ul>\n<li>폴더에 들어가려면 cd 폴더명을 사용하세요. 폴더명 자리에 들어가고 싶은 폴더명을 넣어주세요.</li>\n<li>현재 폴더를 벗어나려면 cd ~를 사용하세요.</li>\n<li>현재 위치한 폴더 안의 폴더와 파일을 보려면 ls를 사용하세요.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>이 명령어를 사용하여 데스크톱 폴더로 이동하세요.</p>\n<h2>SSH 폴더 열기</h2>\n<p>교수님께서 .ssh 폴더에 SSH 키를 저장하라고 가르쳐 주셨어요. 그렇게 하면 모든 키가 동일한 폴더에 포함됩니다. 이제 그 방법을 보여 드릴게요.</p>\n<p>이 폴더를 생성하려면 다음을 실행하세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">mkdir .<span class=\"hljs-property\">ssh</span>\n</code></pre>\n<p>mkdir은 현재 폴더에 새 디렉토리(즉, 폴더)를 만드는 명령어입니다. 현재 데스크톱 폴더에 있기 때문에 이 명령은 데스크톱에 .ssh라는 폴더를 만듭니다.</p>\n<p>그리고 나중을 위해, 만약 이 폴더가 이미 있는지 확인하고 싶다면, 다음을 실행할 겁니다:</p>\n<pre><code class=\"hljs language-js\">ls -larths\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>위에 표시된 이미지는 ls -larths 명령어의 결과입니다. 제일 아래에서 .ssh 폴더를 볼 수 있습니다. 저는 그것을 노란색으로 강조했어요.</p>\n<p>이 폴더를 생성한 후에는 이 폴더로 이동하고 싶어요. 다음 명령어로 폴더로 이동하세요:</p>\n<pre><code class=\"hljs language-js\">cd .<span class=\"hljs-property\">ssh</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>SSH 키 생성하기</h2>\n<p>SSH 폴더 안에 있어요. 제 경우처럼 SSH 키가 이미 있는 경우가 있습니다. 우리는 개인 및 공개 RSA 키를 가지고 있습니다.</p>\n<p>키가 이미 있는지 확인하려면 ls를 사용할 수 있어요.</p>\n<p><img src=\"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_3.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>제 경우에는 그 키들이 존재합니다. 저희의 개인 키인 id_rsa가 있습니다. 아무에게도 공유하지 마세요. 그리고 우리의 공개 키인 id_rsa.pub도 있습니다. 이웃들과 자유롭게 공유하세요.</p>\n<p>만약 키가 없다면, 만들어 봅시다. .ssh 폴더 안에서 다음 명령어를 실행하세요:</p>\n<pre><code class=\"hljs language-js\">ssh-keygen -b <span class=\"hljs-number\">4096</span> -t rsa\n</code></pre>\n<p>이 명령은 4096비트의 RSA 키를 생성합니다. 이는 고수준의 암호화를 제공합니다. 원한다면 다르게 설정할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>커스터마이징할 수 있는 내용을 보려면 man ssh-keygen 명령어를 실행해보세요. 여기서 사용할 수 있는 모든 플래그가 표시될 거에요. 하지만 초보자라면 위 명령어로 충분히 작동할 거예요. 일이 처리될 거에요.</p>\n<p>명령어를 실행해보세요. 공개 및 비공개 RSA 키 쌍을 생성하기 시작할 거에요. 파일, 비밀번호, 그리고 다시 한번 비밀번호를 요청할 거에요. 모두 엔터 키를 눌러 건너뛸 수 있어요.</p>\n<p>그러면 끝이에요. RSA 키가 생성되었습니다. 앞서 말한 대로 ls를 사용해 키가 이미 존재하는지 확인할 수 있어요.</p>\n<p><img src=\"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_4.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p>아래와 같이 확인하실 수 있어요.</p>\n<p>한 번, 우리가 id_rsa.pub 인 공개 키를 가지게 되면, 이것을 확인하고 싶어요. SSH 키를 확인하고 싶어요.</p>\n<p>다음 명령어를 사용하여 id_rsa.pub 파일을 열어봐요.</p>\n<pre><code class=\"hljs language-js\">less id_rsa.<span class=\"hljs-property\">pub</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_5.png\">\n<p>요렇게 나와야 할 거에요. 전체 청크를 복사하시고요 — 전체 청크를 말이에요. 그 다음에 GitHub에 붙여넣을 거에요.</p>\n<h1>GitHub</h1>\n<h2>GitHub에 로그인하고 설정으로 이동하기</h2>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_6.png\" alt=\"Step 6\"></p>\n<h2>Open the Tab “SSH and GFG Keys”</h2>\n<p><img src=\"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_7.png\" alt=\"Step 7\"></p>\n<h2>Create a “NEW SSH KEY”</h2>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_8.png\" alt=\"QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_8\"></p>\n<p>The screen shown below will pop up.</p>\n<p><img src=\"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_9.png\" alt=\"QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_9\"></p>\n<p>Give your SSH key a meaningful title. I called mine ASUS LAPTOP.</p>\n<div class=\"content-ad\"></div>\n<p>그럼 SSH 키를 붙여넣으세요. \"SSH 키 추가\" 버튼을 누르세요. GitHub에서 당신이 정말 본인임을 확인하려면 비밀번호를 입력하라는 메시지가 표시될 거에요. 비밀번호를 확인한 후에는 모두 준비된 거죠!</p>\n<p>이제 여러분은 SSH 키가 항상 데스크톱에 저장된다는 것을 기억할 수 있어요. 그 키들은 .ssh라는 폴더에 있답니다.</p>\n<p>끝났어요. 축하해요.</p>\n</body>\n</html>\n"},"__N_SSG":true}