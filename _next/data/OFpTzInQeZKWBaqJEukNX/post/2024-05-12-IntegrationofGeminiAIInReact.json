{"pageProps":{"post":{"title":"리액트에서 Gemini AI 통합","description":"","date":"2024-05-12 23:05","slug":"2024-05-12-IntegrationofGeminiAIInReact","content":"\n\n여러분은 Gemini AI 도구에 대해 알고 계시죠. 친숙하지 않은 분들을 위해 간단히 소개하면, Gemini AI는 Google에서 개발한 AI 도구에요. 이 기사에서는 React 애플리케이션에 Gemini AI를 통합하는 과정을 안내해 드릴게요.\n\n단계 1: React 애플리케이션에 다음 npm 패키지를 설치해 주세요.\n\n```js\nnpm i @google/generative-ai\n```\n\n우리는 응용 프로그램에서 Gemini AI를 사용하기 위해 개발자 API 키가 필요해요. 개발자 API 키를 생성하려면 다음 링크를 클릭하여 한 개 만들어 주세요. 생성되면 애플리케이션에서 더 사용할 수 있도록 안전한 위치에 복사해 두세요.\n\n\n\naistudio.google.com\n\n```js\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n```\n\n위 모듈을 컴포넌트의 최상위 수준에서 가져와서 다음 코드 스니펫을 컴포넌트 내에 붙여넣고 API 키를 전달해주세요.\n\n```js\n const genAI = new GoogleGenerativeAI(\n    \"API 키\"\n  );\n```\n\n\n\n제공된 코드 스니펫에서 우리는 API 키를 전달하여 GoogleGenerativeAI의 인스턴스를 초기화하고 있습니다. 객체를 생성하면 제공하는 기능에 액세스할 수 있습니다.\n\n저희 Gemini AI는 우리의 질문에 답변하고 응답하는 기능을 제공합니다. Gemini AI와 소통하기 위해 간단히 입력 메시지, 즉 프롬프트를 제공하면 됩니다.\n\n```js\n  const [inputValue, setInputValue] = useState(''); \n\n\n   const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n<input\n       type=\"text\"\n       value={inputValue}\n       onChange={handleInputChange}\n       placeholder=\"Ask Me Something You Want\"\n       className=\"input-field\"\n     />\n```\n\n위 코드 스니펫에서는 사용자로부터 입력을 받아와서 변수처럼 상태로 업데이트하는 inputValue라는 것을 읽고 있습니다.\n\n\n\n```js\nconst [promptResponses, setPromptResponses] = useState([]);\n\nconst getResponseForGivenPrompt = async () => {\ntry{\n  const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\n  const result = await model.generateContent(inputValue);\n  const response = await result.response;\n  const text = await response.text();\n  setPromptResponses([\n    ...promptResponses,\n    text\n  ]);\n}\ncatch(error){\n  console.log(\"Something Went Wrong\");\n}\n};\n\n<button onClick={getResponseForGivenPrompt}>Send</button>\n```\n\n'전송' 버튼을 클릭하면 inputMessage 또는 Your Prompt를 입력한 후 getResponseForGivenPrompt라는 함수가 호출됩니다. 이 함수에서는 모델을 얻고 generateContent 메소드를 호출하여 해당 메소드에 프롬프트 또는 inputMessage를 전달합니다. 이 메소드는 우리의 Prompt 또는 input Message에 대한 내용이나 답변을 생성합니다. 그 결과는 promptResponses라는 상태 변수에 업데이트됩니다.\n\n```js\n{promptResponses.map((promptResponse, index) => (\n  <div key={index} >\n    <div >{promptResponse}</div>\n  </div>\n))}\n```\n\n위 코드 스니펫은 `promptResponses` 배열을 반복하며 각 응답을 UI에 표시합니다.\n\n\n\n\n여기에 완전한 코드가 있어요.\n\n```js\nimport React, { useState } from 'react';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\nfunction GeminiInReact() {\n  const [inputValue, setInputValue] = useState('');\n  const [promptResponses, setpromptResponses] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const genAI = new GoogleGenerativeAI(\n    \"API KEY\"\n    // 여기에 당신의 API 키를 넣어주세요\n  );\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const getResponseForGivenPrompt = async () => {\n    try {\n      setLoading(true)\n      const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\n      const result = await model.generateContent(inputValue);\n      setInputValue('')\n      const response = result.response;\n      const text = response.text();\n      console.log(text)\n      setpromptResponses([...promptResponses, text]);\n\n      setLoading(false)\n    } catch (error) {\n      console.log(error)\n      console.log(\"문제가 생겼어요\");\n      setLoading(false)\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n            placeholder=\"물어보고 싶은 것을 말해주세요\"\n            className=\"form-control\"\n          />\n        </div>\n        <div className=\"col-auto\">\n          <button onClick={getResponseForGivenPrompt} className=\"btn btn-primary\">전송</button>\n        </div>\n      </div>\n\n      {loading ? (\n        <div className=\"text-center mt-3\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"visually-hidden\">로딩중...</span>\n            // 당신의 질문에 대한 답변이 생성되는 동안에 표시되는 메시지\n          </div>\n        </div>\n      ) : (\n        promptResponses.map((promptResponse, index) => (\n          <div key={index}>\n            <div className={`response-text ${index === promptResponses.length - 1 ? 'fw-bold' : ''}`}>{promptResponse}</div>\n            // 가장 최근 응답이 굵게 표시됩니다\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n\nexport default GeminiInReact;\n```\n\n<img src=\"/assets/img/2024-05-12-IntegrationofGeminiAIInReact_0.png\" />\n\n의문점이 있으시면 이 게시물에 댓글을 달아주세요, 답변해 드릴게요 :)\n\n\n\n---Ashok Adurinti","ogImage":{"url":"/assets/img/2024-05-12-IntegrationofGeminiAIInReact_0.png"},"coverImage":"/assets/img/2024-05-12-IntegrationofGeminiAIInReact_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>여러분은 Gemini AI 도구에 대해 알고 계시죠. 친숙하지 않은 분들을 위해 간단히 소개하면, Gemini AI는 Google에서 개발한 AI 도구에요. 이 기사에서는 React 애플리케이션에 Gemini AI를 통합하는 과정을 안내해 드릴게요.</p>\n<p>단계 1: React 애플리케이션에 다음 npm 패키지를 설치해 주세요.</p>\n<pre><code class=\"hljs language-js\">npm i @google/generative-ai\n</code></pre>\n<p>우리는 응용 프로그램에서 Gemini AI를 사용하기 위해 개발자 API 키가 필요해요. 개발자 API 키를 생성하려면 다음 링크를 클릭하여 한 개 만들어 주세요. 생성되면 애플리케이션에서 더 사용할 수 있도록 안전한 위치에 복사해 두세요.</p>\n<p>aistudio.google.com</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GoogleGenerativeAI</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@google/generative-ai'</span>;\n</code></pre>\n<p>위 모듈을 컴포넌트의 최상위 수준에서 가져와서 다음 코드 스니펫을 컴포넌트 내에 붙여넣고 API 키를 전달해주세요.</p>\n<pre><code class=\"hljs language-js\"> <span class=\"hljs-keyword\">const</span> genAI = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GoogleGenerativeAI</span>(\n    <span class=\"hljs-string\">\"API 키\"</span>\n  );\n</code></pre>\n<p>제공된 코드 스니펫에서 우리는 API 키를 전달하여 GoogleGenerativeAI의 인스턴스를 초기화하고 있습니다. 객체를 생성하면 제공하는 기능에 액세스할 수 있습니다.</p>\n<p>저희 Gemini AI는 우리의 질문에 답변하고 응답하는 기능을 제공합니다. Gemini AI와 소통하기 위해 간단히 입력 메시지, 즉 프롬프트를 제공하면 됩니다.</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">const</span> [inputValue, setInputValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>); \n\n\n   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleInputChange</span> = (<span class=\"hljs-params\">e</span>) => {\n    <span class=\"hljs-title function_\">setInputValue</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\n  };\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n       <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n       <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{inputValue}</span>\n       <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleInputChange}</span>\n       <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Ask Me Something You Want\"</span>\n       <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"input-field\"</span>\n     /></span></span>\n</code></pre>\n<p>위 코드 스니펫에서는 사용자로부터 입력을 받아와서 변수처럼 상태로 업데이트하는 inputValue라는 것을 읽고 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> [promptResponses, setPromptResponses] = <span class=\"hljs-title function_\">useState</span>([]);\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getResponseForGivenPrompt</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n<span class=\"hljs-keyword\">try</span>{\n  <span class=\"hljs-keyword\">const</span> model = genAI.<span class=\"hljs-title function_\">getGenerativeModel</span>({ <span class=\"hljs-attr\">model</span>: <span class=\"hljs-string\">\"gemini-pro\"</span> });\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> model.<span class=\"hljs-title function_\">generateContent</span>(inputValue);\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> result.<span class=\"hljs-property\">response</span>;\n  <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">text</span>();\n  <span class=\"hljs-title function_\">setPromptResponses</span>([\n    ...promptResponses,\n    text\n  ]);\n}\n<span class=\"hljs-keyword\">catch</span>(error){\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Something Went Wrong\"</span>);\n}\n};\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{getResponseForGivenPrompt}</span>></span>Send<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n</code></pre>\n<p>'전송' 버튼을 클릭하면 inputMessage 또는 Your Prompt를 입력한 후 getResponseForGivenPrompt라는 함수가 호출됩니다. 이 함수에서는 모델을 얻고 generateContent 메소드를 호출하여 해당 메소드에 프롬프트 또는 inputMessage를 전달합니다. 이 메소드는 우리의 Prompt 또는 input Message에 대한 내용이나 답변을 생성합니다. 그 결과는 promptResponses라는 상태 변수에 업데이트됩니다.</p>\n<pre><code class=\"hljs language-js\">{promptResponses.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">promptResponse, index</span>) =></span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span> ></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> ></span>{promptResponse}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n))}\n</code></pre>\n<p>위 코드 스니펫은 <code>promptResponses</code> 배열을 반복하며 각 응답을 UI에 표시합니다.</p>\n<p>여기에 완전한 코드가 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GoogleGenerativeAI</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@google/generative-ai'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">GeminiInReact</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [inputValue, setInputValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n  <span class=\"hljs-keyword\">const</span> [promptResponses, setpromptResponses] = <span class=\"hljs-title function_\">useState</span>([]);\n  <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> genAI = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GoogleGenerativeAI</span>(\n    <span class=\"hljs-string\">\"API KEY\"</span>\n    <span class=\"hljs-comment\">// 여기에 당신의 API 키를 넣어주세요</span>\n  );\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleInputChange</span> = (<span class=\"hljs-params\">e</span>) => {\n    <span class=\"hljs-title function_\">setInputValue</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getResponseForGivenPrompt</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>)\n      <span class=\"hljs-keyword\">const</span> model = genAI.<span class=\"hljs-title function_\">getGenerativeModel</span>({ <span class=\"hljs-attr\">model</span>: <span class=\"hljs-string\">\"gemini-pro\"</span> });\n      <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> model.<span class=\"hljs-title function_\">generateContent</span>(inputValue);\n      <span class=\"hljs-title function_\">setInputValue</span>(<span class=\"hljs-string\">''</span>)\n      <span class=\"hljs-keyword\">const</span> response = result.<span class=\"hljs-property\">response</span>;\n      <span class=\"hljs-keyword\">const</span> text = response.<span class=\"hljs-title function_\">text</span>();\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(text)\n      <span class=\"hljs-title function_\">setpromptResponses</span>([...promptResponses, text]);\n\n      <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>)\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error)\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"문제가 생겼어요\"</span>);\n      <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>)\n    }\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"row\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"col\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n            <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n            <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{inputValue}</span>\n            <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleInputChange}</span>\n            <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"물어보고 싶은 것을 말해주세요\"</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"form-control\"</span>\n          /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"col-auto\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{getResponseForGivenPrompt}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-primary\"</span>></span>전송<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n      {loading ? (\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"text-center mt-3\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"spinner-border text-primary\"</span> <span class=\"hljs-attr\">role</span>=<span class=\"hljs-string\">\"status\"</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"visually-hidden\"</span>></span>로딩중...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n            // 당신의 질문에 대한 답변이 생성되는 동안에 표시되는 메시지\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      ) : (\n        promptResponses.map((promptResponse, index) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">response-text</span> ${<span class=\"hljs-attr\">index</span> === <span class=\"hljs-string\">promptResponses.length</span> <span class=\"hljs-attr\">-</span> <span class=\"hljs-attr\">1</span> ? '<span class=\"hljs-attr\">fw-bold</span>' <span class=\"hljs-attr\">:</span> ''}`}></span>{promptResponse}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n            // 가장 최근 응답이 굵게 표시됩니다\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        ))\n      )}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">GeminiInReact</span>;\n</code></pre>\n<img src=\"/assets/img/2024-05-12-IntegrationofGeminiAIInReact_0.png\">\n<p>의문점이 있으시면 이 게시물에 댓글을 달아주세요, 답변해 드릴게요 :)</p>\n<p>---Ashok Adurinti</p>\n</body>\n</html>\n"},"__N_SSG":true}