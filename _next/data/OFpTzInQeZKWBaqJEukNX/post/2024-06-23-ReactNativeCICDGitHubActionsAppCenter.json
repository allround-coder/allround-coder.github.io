{"pageProps":{"post":{"title":"React Native CICD GitHub Actions와 App Center 사용하는 방법","description":"","date":"2024-06-23 13:14","slug":"2024-06-23-ReactNativeCICDGitHubActionsAppCenter","content":"\n\nReact Native 프로젝트에 대한 Continuous Integration 및 Continuous Deployment (CI/CD) 설정은 빌드, 테스트 및 배포 프로세스 자동화를 포함합니다. 이렇게 React Native 프로젝트를 CI/CD하려면 인기 있는 도구인 CI용 GitHub Actions 및 CD용 App Center를 사용하는 기본 예제가 있습니다:\n\n![React Native CI/CD](/assets/img/2024-06-23-ReactNativeCICDGitHubActionsAppCenter_0.png)\n\n1. GitHub 저장소 설정:\n- 이미 하지 않았다면 React Native 프로젝트용 GitHub 저장소를 만듭니다.\n- React Native 프로젝트 코드를 이 저장소에 푸시합니다.\n\n2. CI용 GitHub Workflow 만들기:\n- 저장소에 `.github/workflows/ci.yml` 파일을 만듭니다.\n- GitHub Actions를 사용하여 CI 워크플로우를 정의하기 위해 이 파일을 구성합니다. 다음은 기본 예제입니다:\n\n<div class=\"content-ad\"></div>\n\n```yaml\n이름: CI\n\n활성화:\n  푸시:\n    브랜치: [main]\n\n작업:\n  빌드:\n    실행: ubuntu-latest\n\n    단계:\n      - 이름: 코드 체크아웃\n        사용: actions/checkout@v2\n\n      - 이름: Node.js 설정\n        사용: actions/setup-node@v1\n        with:\n          node-version: '14.x'\n\n      - 이름: 종속성 설치\n        실행: npm install\n\n      - 이름: 빌드\n        실행: npm run build\n\n      - 이름: 테스트\n        실행: npm test\n```\n\n3. CD를 위해 앱 센터 설정:\n- 이미 Microsoft 앱 센터에 계정이 없다면 계정을 설정하세요.\n- React Native 프로젝트에 대응하는 앱 센터에서 앱을 생성하세요.\n\n4. App Center와 CD 통합:\n- 개발 환경에서 App Center CLI를 설치하세요.\n- CLI를 App Center와 인증하세요.\n- React Native 프로젝트에 App Center를 통합하세요:\n\n```bash\nappcenter login\nappcenter apps create -d \"Your React Native App\" -o \"React Native\" -p React-Native\n```\n\n<div class=\"content-ad\"></div>\n\n— App Center에서 제공하는 지침에 따라 React Native 프로젝트에 SDK를 통합하여 충돌 보고, 분석 및 배포 기능을 활성화하세요.\n\n5. CD 파이프라인 구성:\n— 자동 배포를 위해 App Center에 릴리스 파이프라인을 생성하세요.\n— 새 빌드 아티팩트가 생성된 경우(예: CI 성공 후) 파이프라인을 트리거하도록 구성하세요.\n\n6. CD 트리거를 위한 GitHub Workflow 업데이트:\n— 성공한 빌드 후 App Center CD를 트리거하도록 GitHub Actions workflow를 수정하세요:\n\n```js\n...\njobs:\n  build:\n    ...\n    steps:\n      ...\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Trigger App Center Release\n        run: appcenter codepush release-react -a <ownerName>/<appName> -d <deploymentName>\r\n```\n\n<div class=\"content-ad\"></div>\n\n7. 변경 내용 커밋 및 푸시하기:\n- `.github/workflows/ci.yml` 및 다른 관련 파일에 변경 내용을 커밋합니다.\n- 변경 사항을 GitHub 저장소에 푸시합니다.\n\n위 단계를 통해 React Native 프로젝트를 위한 기본 CI/CD 파이프라인을 설정했습니다. 저장소에 변경 사항을 푸시할 때마다 GitHub Actions가 자동으로 빌드하고 테스트를 실행합니다. 성공적으로 완료되면, App Center가 앱을 지정된 배포 환경으로 배포합니다. 해당 설정을 프로젝트 요구사항과 선호에 맞게 조정하고 확장해보세요.","ogImage":{"url":"/assets/img/2024-06-23-ReactNativeCICDGitHubActionsAppCenter_0.png"},"coverImage":"/assets/img/2024-06-23-ReactNativeCICDGitHubActionsAppCenter_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>React Native 프로젝트에 대한 Continuous Integration 및 Continuous Deployment (CI/CD) 설정은 빌드, 테스트 및 배포 프로세스 자동화를 포함합니다. 이렇게 React Native 프로젝트를 CI/CD하려면 인기 있는 도구인 CI용 GitHub Actions 및 CD용 App Center를 사용하는 기본 예제가 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-23-ReactNativeCICDGitHubActionsAppCenter_0.png\" alt=\"React Native CI/CD\"></p>\n<ol>\n<li>GitHub 저장소 설정:</li>\n</ol>\n<ul>\n<li>이미 하지 않았다면 React Native 프로젝트용 GitHub 저장소를 만듭니다.</li>\n<li>React Native 프로젝트 코드를 이 저장소에 푸시합니다.</li>\n</ul>\n<ol start=\"2\">\n<li>CI용 GitHub Workflow 만들기:</li>\n</ol>\n<ul>\n<li>저장소에 <code>.github/workflows/ci.yml</code> 파일을 만듭니다.</li>\n<li>GitHub Actions를 사용하여 CI 워크플로우를 정의하기 위해 이 파일을 구성합니다. 다음은 기본 예제입니다:</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">이름:</span> <span class=\"hljs-string\">CI</span>\n\n<span class=\"hljs-string\">활성화:</span>\n  <span class=\"hljs-string\">푸시:</span>\n    <span class=\"hljs-string\">브랜치:</span> [<span class=\"hljs-string\">main</span>]\n\n<span class=\"hljs-string\">작업:</span>\n  <span class=\"hljs-string\">빌드:</span>\n    <span class=\"hljs-string\">실행:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n\n    <span class=\"hljs-string\">단계:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">이름:</span> <span class=\"hljs-string\">코드</span> <span class=\"hljs-string\">체크아웃</span>\n        <span class=\"hljs-string\">사용:</span> <span class=\"hljs-string\">actions/checkout@v2</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">이름:</span> <span class=\"hljs-string\">Node.js</span> <span class=\"hljs-string\">설정</span>\n        <span class=\"hljs-string\">사용:</span> <span class=\"hljs-string\">actions/setup-node@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">node-version:</span> <span class=\"hljs-string\">'14.x'</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">이름:</span> <span class=\"hljs-string\">종속성</span> <span class=\"hljs-string\">설치</span>\n        <span class=\"hljs-string\">실행:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">이름:</span> <span class=\"hljs-string\">빌드</span>\n        <span class=\"hljs-string\">실행:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">build</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">이름:</span> <span class=\"hljs-string\">테스트</span>\n        <span class=\"hljs-string\">실행:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">test</span>\n</code></pre>\n<ol start=\"3\">\n<li>CD를 위해 앱 센터 설정:</li>\n</ol>\n<ul>\n<li>이미 Microsoft 앱 센터에 계정이 없다면 계정을 설정하세요.</li>\n<li>React Native 프로젝트에 대응하는 앱 센터에서 앱을 생성하세요.</li>\n</ul>\n<ol start=\"4\">\n<li>App Center와 CD 통합:</li>\n</ol>\n<ul>\n<li>개발 환경에서 App Center CLI를 설치하세요.</li>\n<li>CLI를 App Center와 인증하세요.</li>\n<li>React Native 프로젝트에 App Center를 통합하세요:</li>\n</ul>\n<pre><code class=\"hljs language-bash\">appcenter login\nappcenter apps create -d <span class=\"hljs-string\">\"Your React Native App\"</span> -o <span class=\"hljs-string\">\"React Native\"</span> -p React-Native\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>— App Center에서 제공하는 지침에 따라 React Native 프로젝트에 SDK를 통합하여 충돌 보고, 분석 및 배포 기능을 활성화하세요.</p>\n<ol start=\"5\">\n<li>\n<p>CD 파이프라인 구성:\n— 자동 배포를 위해 App Center에 릴리스 파이프라인을 생성하세요.\n— 새 빌드 아티팩트가 생성된 경우(예: CI 성공 후) 파이프라인을 트리거하도록 구성하세요.</p>\n</li>\n<li>\n<p>CD 트리거를 위한 GitHub Workflow 업데이트:\n— 성공한 빌드 후 App Center CD를 트리거하도록 GitHub Actions workflow를 수정하세요:</p>\n</li>\n</ol>\n<pre><code class=\"hljs language-js\">...\n<span class=\"hljs-attr\">jobs</span>:\n  <span class=\"hljs-attr\">build</span>:\n    ...\n    <span class=\"hljs-attr\">steps</span>:\n      ...\n\n  <span class=\"hljs-attr\">deploy</span>:\n    <span class=\"hljs-attr\">needs</span>: build\n    runs-<span class=\"hljs-attr\">on</span>: ubuntu-latest\n\n    <span class=\"hljs-attr\">steps</span>:\n      - <span class=\"hljs-attr\">name</span>: <span class=\"hljs-title class_\">Checkout</span> code\n        <span class=\"hljs-attr\">uses</span>: actions/checkout@v2\n\n      - <span class=\"hljs-attr\">name</span>: <span class=\"hljs-title class_\">Trigger</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-title class_\">Center</span> <span class=\"hljs-title class_\">Release</span>\n        <span class=\"hljs-attr\">run</span>: appcenter codepush release-react -a &#x3C;ownerName>/&#x3C;appName> -d &#x3C;deploymentName>\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"7\">\n<li>변경 내용 커밋 및 푸시하기:</li>\n</ol>\n<ul>\n<li><code>.github/workflows/ci.yml</code> 및 다른 관련 파일에 변경 내용을 커밋합니다.</li>\n<li>변경 사항을 GitHub 저장소에 푸시합니다.</li>\n</ul>\n<p>위 단계를 통해 React Native 프로젝트를 위한 기본 CI/CD 파이프라인을 설정했습니다. 저장소에 변경 사항을 푸시할 때마다 GitHub Actions가 자동으로 빌드하고 테스트를 실행합니다. 성공적으로 완료되면, App Center가 앱을 지정된 배포 환경으로 배포합니다. 해당 설정을 프로젝트 요구사항과 선호에 맞게 조정하고 확장해보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}