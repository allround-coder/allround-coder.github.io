{"pageProps":{"post":{"title":"React로 대용량 데이터를 빠르게 렌더링하는 방법","description":"","date":"2024-06-23 13:42","slug":"2024-06-23-Reducerenderingtimewithlargedatainreact","content":"\n\n\n![img](/assets/img/2024-06-23-Reducerenderingtimewithlargedatainreact_0.png)\n\n# 소개\n\n현대 웹 개발에서 성능이 매우 중요합니다. 웹 애플리케이션이 복잡해지고 데이터 양이 증가함에 따라 효율적인 렌더링을 관리하는 것이 중요해집니다. React 애플리케이션의 성능을 개선하기 위한 한 가지 효과적인 기술은 가상화입니다. 이 글에서는 가상화가 무엇인지, 왜 중요한지, React 애플리케이션에서 어떻게 구현하는지 알아보겠습니다.\n\n# 가상화란 무엇인가?\n\n\n<div class=\"content-ad\"></div>\n\n웹 개발에서 가상화는 DOM에서 보이는 부분만 렌더링하고 나머지는 메모리에 유지하는 기술을 말합니다. 이 접근 방식은 DOM 노드의 수를 크게 줄여 렌더링 성능을 향상시키고 전체 사용자 경험을 향상시킵니다.\n\n# 왜 가상화인가요?\n\n# 성능 상의 이점\n\n- 메모리 사용량 감소: 일부 항목만 렌더링하므로 메모리 소비를 최소화할 수 있습니다.\n- 렌더링 시간 단축: 더 적은 DOM 노드는 더 빠른 렌더링 시간을 의미하며, 반응이 더 빠른 UI를 제공합니다.\n- 부드러운 스크롤링: 가상화를 통해 대용량 데이터 세트에서도 부드러운 스크롤링 경험을 유지할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 사용 사례\n\n- 대량 목록 또는 테이블: 어드민 대시보드나 데이터 분석 도구와 같이 대량의 테이블 데이터를 표시하는 애플리케이션.\n- 무한 스크롤링: 사용자가 스크롤할 때 계속로드되는 콘텐츠가 있는 소셜 미디어 피드나 뉴스 웹사이트.\n\n# React에서 가상화 구현하기\n\n# 프로젝트 설정하기\n\n<div class=\"content-ad\"></div>\n\n가상화를 보여주기 위해, react-virtualized 라이브러리를 사용하여 간단한 리액트 애플리케이션을 만들어보려고 합니다.\n\n## 단계 1: 리액트 애플리케이션 생성\n\n```js\nnpx create-react-app react-virtualization-example\ncd react-virtualization-example\nnpm install react-virtualized\n```\n\n## 단계 2: 기본 컴포넌트 설정\n\n<div class=\"content-ad\"></div>\n\n가상 목록을 표시하는 컴포넌트를 만들어보세요.\n\n```js\n// src/VirtualizedList.js\nimport React from 'react';\nimport { List } from 'react-virtualized';\nimport 'react-virtualized/styles.css'; // 한 번만 가져오면 됩니다.\n```\n\n```js\nconst VirtualizedList = ({ items }) => {\n  const rowRenderer = ({ key, index, style }) => (\n    <div key={key} style={style} className=\"list-item\">\n      {items[index]}\n    </div>\n  );\n  return (\n    <List\n      width={300}\n      height={600}\n      rowCount={items.length}\n      rowHeight={50}\n      rowRenderer={rowRenderer}\n    />\n  );\n};\nexport default VirtualizedList;\n```\n\n# 가상 컴포넌트 통합\n\n<div class=\"content-ad\"></div>\n\n## 단계 3: 앱에서 가상화된 컴포넌트 사용하기\n\n```js\n// src/App.js\nimport React from 'react';\nimport VirtualizedList from './VirtualizedList';\n```\n\n```js\nconst App = () => {\n  const items = Array.from({ length: 1000 }, (_, index) => `아이템 ${index + 1}`);\n  return (\n    <div className=\"App\">\n      <h1>가상화된 목록 예제</h1>\n      <VirtualizedList items={items} />\n    </div>\n  );\n};\nexport default App;\n```\n\n# 가상화된 목록 향상하기\n\n<div class=\"content-ad\"></div>\n\n## 단계 4: 스타일 추가하기\n\n시각화를 더 향상시키기 위한 기본적인 스타일을 추가해보세요.\n\n```js\n/* src/App.css */\n.list-item {\n  padding: 10px;\n  border-bottom: 1px solid #ccc;\n  background-color: #fff;\n}\n```\n\n# 고급 사용법\n\n<div class=\"content-ad\"></div>\n\n## 단계 5: 가상 목록 커스터마이징하기\n\nreact-virtualized의 고급 기능인 동적 행 높이, 무한 스크롤 등을 탐색해보세요.\n\n```js\nimport React from 'react';\nimport { InfiniteLoader, List, AutoSizer } from 'react-virtualized';\n```\n\n```js\nconst InfiniteVirtualizedList = ({ loadMoreRows, isRowLoaded, rowCount }) => {\n  const rowRenderer = ({ key, index, style }) => (\n    <div key={key} style={style} className=\"list-item\">\n      {`아이템 ${index + 1}`}\n    </div>\n  );\n  return (\n    <InfiniteLoader\n      isRowLoaded={isRowLoaded}\n      loadMoreRows={loadMoreRows}\n      rowCount={rowCount}\n    >\n      {({ onRowsRendered, registerChild }) => (\n        <AutoSizer>\n          {({ height, width }) => (\n            <List\n              height={height}\n              width={width}\n              onRowsRendered={onRowsRendered}\n              ref={registerChild}\n              rowCount={rowCount}\n              rowHeight={50}\n              rowRenderer={rowRenderer}\n            />\n          )}\n        </AutoSizer>\n      )}\n    </InfiniteLoader>\n  );\n};\nexport default InfiniteVirtualizedList;\n```\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n가상화는 대량 데이터 집합을 다루는 리액트 애플리케이션의 성능을 향상시키는 강력한 기술입니다. 보이는 항목만 렌더링함으로써 앱의 효율성과 응답성을 크게 향상시킬 수 있습니다. react-virtualized와 같은 도구를 사용하면 이 기술을 구현하기 쉽고 다양한 사용 사례에 맞는 기능을 제공합니다.\n\n# 참고 자료\n\n- react-virtualized 문서\n- React 공식 문서","ogImage":{"url":"/assets/img/2024-06-23-Reducerenderingtimewithlargedatainreact_0.png"},"coverImage":"/assets/img/2024-06-23-Reducerenderingtimewithlargedatainreact_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-Reducerenderingtimewithlargedatainreact_0.png\" alt=\"img\"></p>\n<h1>소개</h1>\n<p>현대 웹 개발에서 성능이 매우 중요합니다. 웹 애플리케이션이 복잡해지고 데이터 양이 증가함에 따라 효율적인 렌더링을 관리하는 것이 중요해집니다. React 애플리케이션의 성능을 개선하기 위한 한 가지 효과적인 기술은 가상화입니다. 이 글에서는 가상화가 무엇인지, 왜 중요한지, React 애플리케이션에서 어떻게 구현하는지 알아보겠습니다.</p>\n<h1>가상화란 무엇인가?</h1>\n<div class=\"content-ad\"></div>\n<p>웹 개발에서 가상화는 DOM에서 보이는 부분만 렌더링하고 나머지는 메모리에 유지하는 기술을 말합니다. 이 접근 방식은 DOM 노드의 수를 크게 줄여 렌더링 성능을 향상시키고 전체 사용자 경험을 향상시킵니다.</p>\n<h1>왜 가상화인가요?</h1>\n<h1>성능 상의 이점</h1>\n<ul>\n<li>메모리 사용량 감소: 일부 항목만 렌더링하므로 메모리 소비를 최소화할 수 있습니다.</li>\n<li>렌더링 시간 단축: 더 적은 DOM 노드는 더 빠른 렌더링 시간을 의미하며, 반응이 더 빠른 UI를 제공합니다.</li>\n<li>부드러운 스크롤링: 가상화를 통해 대용량 데이터 세트에서도 부드러운 스크롤링 경험을 유지할 수 있습니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>사용 사례</h1>\n<ul>\n<li>대량 목록 또는 테이블: 어드민 대시보드나 데이터 분석 도구와 같이 대량의 테이블 데이터를 표시하는 애플리케이션.</li>\n<li>무한 스크롤링: 사용자가 스크롤할 때 계속로드되는 콘텐츠가 있는 소셜 미디어 피드나 뉴스 웹사이트.</li>\n</ul>\n<h1>React에서 가상화 구현하기</h1>\n<h1>프로젝트 설정하기</h1>\n<div class=\"content-ad\"></div>\n<p>가상화를 보여주기 위해, react-virtualized 라이브러리를 사용하여 간단한 리액트 애플리케이션을 만들어보려고 합니다.</p>\n<h2>단계 1: 리액트 애플리케이션 생성</h2>\n<pre><code class=\"hljs language-js\">npx create-react-app react-virtualization-example\ncd react-virtualization-example\nnpm install react-virtualized\n</code></pre>\n<h2>단계 2: 기본 컴포넌트 설정</h2>\n<div class=\"content-ad\"></div>\n<p>가상 목록을 표시하는 컴포넌트를 만들어보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/VirtualizedList.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">List</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-virtualized'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'react-virtualized/styles.css'</span>; <span class=\"hljs-comment\">// 한 번만 가져오면 됩니다.</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">VirtualizedList</span> = (<span class=\"hljs-params\">{ items }</span>) => {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">rowRenderer</span> = (<span class=\"hljs-params\">{ key, index, style }</span>) => (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{key}</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{style}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"list-item\"</span>></span>\n      {items[index]}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">List</span>\n      <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">{300}</span>\n      <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">{600}</span>\n      <span class=\"hljs-attr\">rowCount</span>=<span class=\"hljs-string\">{items.length}</span>\n      <span class=\"hljs-attr\">rowHeight</span>=<span class=\"hljs-string\">{50}</span>\n      <span class=\"hljs-attr\">rowRenderer</span>=<span class=\"hljs-string\">{rowRenderer}</span>\n    /></span></span>\n  );\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">VirtualizedList</span>;\n</code></pre>\n<h1>가상 컴포넌트 통합</h1>\n<div class=\"content-ad\"></div>\n<h2>단계 3: 앱에서 가상화된 컴포넌트 사용하기</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/App.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">VirtualizedList</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./VirtualizedList'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> items = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>({ <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">1000</span> }, <span class=\"hljs-function\">(<span class=\"hljs-params\">_, index</span>) =></span> <span class=\"hljs-string\">`아이템 <span class=\"hljs-subst\">${index + <span class=\"hljs-number\">1</span>}</span>`</span>);\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>가상화된 목록 예제<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">VirtualizedList</span> <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{items}</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<h1>가상화된 목록 향상하기</h1>\n<div class=\"content-ad\"></div>\n<h2>단계 4: 스타일 추가하기</h2>\n<p>시각화를 더 향상시키기 위한 기본적인 스타일을 추가해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* src/App.css */</span>\n.<span class=\"hljs-property\">list</span>-item {\n  <span class=\"hljs-attr\">padding</span>: 10px;\n  border-<span class=\"hljs-attr\">bottom</span>: 1px solid #ccc;\n  background-<span class=\"hljs-attr\">color</span>: #fff;\n}\n</code></pre>\n<h1>고급 사용법</h1>\n<div class=\"content-ad\"></div>\n<h2>단계 5: 가상 목록 커스터마이징하기</h2>\n<p>react-virtualized의 고급 기능인 동적 행 높이, 무한 스크롤 등을 탐색해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">InfiniteLoader</span>, <span class=\"hljs-title class_\">List</span>, <span class=\"hljs-title class_\">AutoSizer</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-virtualized'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">InfiniteVirtualizedList</span> = (<span class=\"hljs-params\">{ loadMoreRows, isRowLoaded, rowCount }</span>) => {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">rowRenderer</span> = (<span class=\"hljs-params\">{ key, index, style }</span>) => (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{key}</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{style}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"list-item\"</span>></span>\n      {`아이템 ${index + 1}`}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">InfiniteLoader</span>\n      <span class=\"hljs-attr\">isRowLoaded</span>=<span class=\"hljs-string\">{isRowLoaded}</span>\n      <span class=\"hljs-attr\">loadMoreRows</span>=<span class=\"hljs-string\">{loadMoreRows}</span>\n      <span class=\"hljs-attr\">rowCount</span>=<span class=\"hljs-string\">{rowCount}</span>\n    ></span>\n      {({ onRowsRendered, registerChild }) => (\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">AutoSizer</span>></span>\n          {({ height, width }) => (\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">List</span>\n              <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">{height}</span>\n              <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">{width}</span>\n              <span class=\"hljs-attr\">onRowsRendered</span>=<span class=\"hljs-string\">{onRowsRendered}</span>\n              <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{registerChild}</span>\n              <span class=\"hljs-attr\">rowCount</span>=<span class=\"hljs-string\">{rowCount}</span>\n              <span class=\"hljs-attr\">rowHeight</span>=<span class=\"hljs-string\">{50}</span>\n              <span class=\"hljs-attr\">rowRenderer</span>=<span class=\"hljs-string\">{rowRenderer}</span>\n            /></span>\n          )}\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">AutoSizer</span>></span>\n      )}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">InfiniteLoader</span>></span></span>\n  );\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">InfiniteVirtualizedList</span>;\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>결론</h1>\n<p>가상화는 대량 데이터 집합을 다루는 리액트 애플리케이션의 성능을 향상시키는 강력한 기술입니다. 보이는 항목만 렌더링함으로써 앱의 효율성과 응답성을 크게 향상시킬 수 있습니다. react-virtualized와 같은 도구를 사용하면 이 기술을 구현하기 쉽고 다양한 사용 사례에 맞는 기능을 제공합니다.</p>\n<h1>참고 자료</h1>\n<ul>\n<li>react-virtualized 문서</li>\n<li>React 공식 문서</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}