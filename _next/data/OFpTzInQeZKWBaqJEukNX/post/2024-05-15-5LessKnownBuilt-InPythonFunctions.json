{"pageProps":{"post":{"title":"파이썬 내장 함수 중 잘 알려지지 않은 5가지","description":"","date":"2024-05-15 15:36","slug":"2024-05-15-5LessKnownBuilt-InPythonFunctions","content":"\n\n\n![python function](/assets/img/2024-05-15-5LessKnownBuilt-InPythonFunctions_0.png)\n\n## 1) callable(x)\n\nThe callable(x) function returns True if x is callable — x must either be a function or some object with the __call__ magic method defined.\n\n```python\ndef hello():\n    pass\n\nhi = 1\n\nprint(callable(hello))   # True\nprint(callable(hi))      # False\n```\n\n\n\n\n^ 호출 가능한지 여부가 불분명한 여러 변수가 주어졌을 때, 함수를 사용하기 전에 실제로 변수를 호출하기 전에 callable 함수를 사용하여 먼저 이를 확인할 수 있습니다.\n\n```js\nclass Dog:\n    def __call__(self, x):\n        pass\n\nclass Cat:\n    pass\n\ndog = Dog()\ncat = Cat()\n\nprint(callable(dog))  # True\nprint(callable(cat))  # False\n```\n\n^ 함수에만 해당되는 것이 아니라 객체도 __call__ 매직 메서드를 사용하여 호출 가능하게 만들 수 있다는 것을 염두해 두세요.\n\n# 2) divmod(x, y)\n\n\n\n```js\nprint(divmod(6, 3))  # (2, 0)\nprint(divmod(7, 3))  # (2, 1)\nprint(divmod(8, 3))  # (2, 2)\nprint(divmod(9, 3))  # (3, 0)\n```\n\n`divmod(x, y)` 함수를 호출하면, x를 y로 나눈 결과를 담은 두 항목이 있는 튜플을 반환합니다:\n\n- x를 y로 나눌 때의 몫 — 기본적으로 x // y\n- x를 y로 나눌 때의 나머지 — 기본적으로 x % y\n\n`divmod(x, y)`를 사용하면, x // y와 x % y를 각각 사용하는 것을 한 줄의 코드로 요약할 수 있습니다.\n\n\n\n# 3) hasattr(object, attribute_name)\n\n`hasattr(object, attribute_name)` 함수를 사용하여 객체 object가 문자열 이름 attribute_name을 가진 속성을 가지고 있는지 확인할 수 있습니다. 이 함수는 해당 이름을 가진 속성이 객체에 실제로 포함되어 있으면 True를 반환하고, 그렇지 않으면 False를 반환합니다.\n\n```python\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nclass Cat:\n    def __init__(self, name, age, colour):\n        self.name = name\n        self.age = age\n        self.colour = colour\n\ndog = Dog('rocky', 5)\ncat = Cat('catty', 6, 'brown')\n\nprint(hasattr(dog, 'colour'))  # False\nprint(hasattr(cat, 'colour'))  # True\n```\n\n- Dog 객체에는 name과 age 속성을 가지도록 정의합니다.\n- Cat 객체에는 name, age, colour 속성을 가지도록 정의합니다.\n- `hasattr(dog, 'colour')`는 Dog 객체가 colour 속성을 가지고 있지 않기 때문에 False를 반환합니다.\n- `hasattr(cat, 'colour')`는 Cat 객체가 colour 속성을 가지고 있기 때문에 True를 반환합니다. Cat의 `__init__` 함수에서 정의한 대로입니다.\n\n\n\n`hasattr` 함수를 사용하여 특정 객체에 속성이 있는지 확인한 후 해당 속성에 액세스를 시도할 수 있습니다.\n\n## 4) isinstance(object, class)\n\nisinstance(object, class) 함수는 다음과 같은 경우 True를 반환합니다:\n\n- 객체의 유형이 클래스와 동일한 경우\n- 객체의 유형이 클래스를 상속한 경우\n\n\n\n```python\nclass Animal: pass\nclass Dog(Animal): pass\nclass Rice: pass\n```\n\n여기서 임의의 클래스를 정의해 봅시다:\n\n- Animal 클래스\n- Animal 클래스를 상속받는 Dog 클래스\n- Rice 클래스\n\n```python\ndog = Dog()\nprint(isinstance(dog, Dog))     # True\nprint(isinstance(dog, Animal))  # True\nprint(isinstance(dog, Rice))    # False\n```\n\n\n\n- 개는 개입니다, 따라서 isinstance(dog, Dog)는 True를 반환합니다.\n- 개는 직접적으로 동물이 아니지만, 개가 동물을 상속받았기 때문에, 개는 동물입니다 — 따라서 isinstance(dog, Animal)은 True를 반환합니다.\n- 개는 밥이 아니므로, isinstance(dog, Rice)는 False를 반환합니다.\n\n```js\na = Animal()\nprint(isinstance(a, Dog))     # False\nprint(isinstance(a, Animal))  # True\nprint(isinstance(a, Rice))    # False\n```\n\n- Dog는 Animal을 상속받았으므로, 개는 확실히 동물입니다 → 그러나 동물이 반드시 개일 필요는 없습니다 → isinstance(a, Dog)는 False를 반환합니다.\n- a는 Animal이므로, isinstance(a, Animal)은 True를 반환합니다.\n- a는 밥이 아니므로, isinstance(a, rice)은 False를 반환합니다.\n\n# 5) issubclass(class1, class2)\n\n\n\n\nissubclass(class1, class2) 함수는 다음 경우에 True를 반환합니다:\n\n- class1이 class2와 동일한 경우\n- class1이 class2의 하위 클래스인 경우 — 즉, class1이 어떤 방식으로든 class2로부터 상속을 받는 경우입니다.\n\n```js\nclass Animal: pass\nclass Dog(Animal): pass\nclass GermanShepherd(Dog): pass\n\nprint(issubclass(Animal, Animal))          # True\nprint(issubclass(Dog, Animal))             # True\nprint(issubclass(GermanShepherd, Animal))  # True\n```\n\n- Animal은 Animal이므로 issubclass(Animal, Animal)은 True를 반환합니다.\n- Dog는 Animal이므로 issubclass(Dog, Animal)은 True를 반환합니다.\n- GermanShepherd는 Dog이고 Dog는 Animal이므로 issubclass(GermanShepherd, Animal) 또한 True를 반환합니다.\n\n\n\n\n```js\nprint(issubclass(Animal, Dog))             # False\n```\n\n- 개는 동물입니다. 그러나 모든 동물이 개일 필요는 없으므로 issubclass(Animal, Dog)는 False를 반환합니다.\n\n# 결론\n\n이것이 명확하고 이해하기 쉬웠으면 좋겠습니다.\n\n\n\n# 만약에 나를 창작자로 지원하고 싶다면\n\n-  이 이야기를 위해 50번 박수를 치세요\n-  당신의 생각을 나에게 남겨주세요\n-  이 이야기에서 가장 마음에 드는 부분을 강조해 주세요\n\n감사합니다! 이 작은 행동들이 큰 도움이 되고, 정말 감사드립니다!\n\nYouTube: https://www.youtube.com/@zlliu246\n\n\n\nLinkedIn: [https://www.linkedin.com/in/zlliu/](https://www.linkedin.com/in/zlliu/)\n\nMy Ebooks: [https://zlliu.co/ebooks](https://zlliu.co/ebooks)","ogImage":{"url":"/assets/img/2024-05-15-5LessKnownBuilt-InPythonFunctions_0.png"},"coverImage":"/assets/img/2024-05-15-5LessKnownBuilt-InPythonFunctions_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-15-5LessKnownBuilt-InPythonFunctions_0.png\" alt=\"python function\"></p>\n<h2>1) callable(x)</h2>\n<p>The callable(x) function returns True if x is callable — x must either be a function or some object with the <strong>call</strong> magic method defined.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hello</span>():\n    <span class=\"hljs-keyword\">pass</span>\n\nhi = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">callable</span>(hello))   <span class=\"hljs-comment\"># True</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">callable</span>(hi))      <span class=\"hljs-comment\"># False</span>\n</code></pre>\n<p>^ 호출 가능한지 여부가 불분명한 여러 변수가 주어졌을 때, 함수를 사용하기 전에 실제로 변수를 호출하기 전에 callable 함수를 사용하여 먼저 이를 확인할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>:\n    def <span class=\"hljs-title function_\">__call__</span>(self, x):\n        pass\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span>:\n    pass\n\ndog = <span class=\"hljs-title class_\">Dog</span>()\ncat = <span class=\"hljs-title class_\">Cat</span>()\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">callable</span>(dog))  # <span class=\"hljs-title class_\">True</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">callable</span>(cat))  # <span class=\"hljs-title class_\">False</span>\n</code></pre>\n<p>^ 함수에만 해당되는 것이 아니라 객체도 <strong>call</strong> 매직 메서드를 사용하여 호출 가능하게 만들 수 있다는 것을 염두해 두세요.</p>\n<h1>2) divmod(x, y)</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">divmod</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>))  # (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">divmod</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>))  # (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">divmod</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>))  # (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">divmod</span>(<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">3</span>))  # (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>)\n</code></pre>\n<p><code>divmod(x, y)</code> 함수를 호출하면, x를 y로 나눈 결과를 담은 두 항목이 있는 튜플을 반환합니다:</p>\n<ul>\n<li>x를 y로 나눌 때의 몫 — 기본적으로 x // y</li>\n<li>x를 y로 나눌 때의 나머지 — 기본적으로 x % y</li>\n</ul>\n<p><code>divmod(x, y)</code>를 사용하면, x // y와 x % y를 각각 사용하는 것을 한 줄의 코드로 요약할 수 있습니다.</p>\n<h1>3) hasattr(object, attribute_name)</h1>\n<p><code>hasattr(object, attribute_name)</code> 함수를 사용하여 객체 object가 문자열 이름 attribute_name을 가진 속성을 가지고 있는지 확인할 수 있습니다. 이 함수는 해당 이름을 가진 속성이 객체에 실제로 포함되어 있으면 True를 반환하고, 그렇지 않으면 False를 반환합니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, age</span>):\n        self.name = name\n        self.age = age\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, age, colour</span>):\n        self.name = name\n        self.age = age\n        self.colour = colour\n\ndog = Dog(<span class=\"hljs-string\">'rocky'</span>, <span class=\"hljs-number\">5</span>)\ncat = Cat(<span class=\"hljs-string\">'catty'</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">'brown'</span>)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hasattr</span>(dog, <span class=\"hljs-string\">'colour'</span>))  <span class=\"hljs-comment\"># False</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hasattr</span>(cat, <span class=\"hljs-string\">'colour'</span>))  <span class=\"hljs-comment\"># True</span>\n</code></pre>\n<ul>\n<li>Dog 객체에는 name과 age 속성을 가지도록 정의합니다.</li>\n<li>Cat 객체에는 name, age, colour 속성을 가지도록 정의합니다.</li>\n<li><code>hasattr(dog, 'colour')</code>는 Dog 객체가 colour 속성을 가지고 있지 않기 때문에 False를 반환합니다.</li>\n<li><code>hasattr(cat, 'colour')</code>는 Cat 객체가 colour 속성을 가지고 있기 때문에 True를 반환합니다. Cat의 <code>__init__</code> 함수에서 정의한 대로입니다.</li>\n</ul>\n<p><code>hasattr</code> 함수를 사용하여 특정 객체에 속성이 있는지 확인한 후 해당 속성에 액세스를 시도할 수 있습니다.</p>\n<h2>4) isinstance(object, class)</h2>\n<p>isinstance(object, class) 함수는 다음과 같은 경우 True를 반환합니다:</p>\n<ul>\n<li>객체의 유형이 클래스와 동일한 경우</li>\n<li>객체의 유형이 클래스를 상속한 경우</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span>: <span class=\"hljs-keyword\">pass</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-title class_ inherited__\">Animal</span>): <span class=\"hljs-keyword\">pass</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Rice</span>: <span class=\"hljs-keyword\">pass</span>\n</code></pre>\n<p>여기서 임의의 클래스를 정의해 봅시다:</p>\n<ul>\n<li>Animal 클래스</li>\n<li>Animal 클래스를 상속받는 Dog 클래스</li>\n<li>Rice 클래스</li>\n</ul>\n<pre><code class=\"hljs language-python\">dog = Dog()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">isinstance</span>(dog, Dog))     <span class=\"hljs-comment\"># True</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">isinstance</span>(dog, Animal))  <span class=\"hljs-comment\"># True</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">isinstance</span>(dog, Rice))    <span class=\"hljs-comment\"># False</span>\n</code></pre>\n<ul>\n<li>개는 개입니다, 따라서 isinstance(dog, Dog)는 True를 반환합니다.</li>\n<li>개는 직접적으로 동물이 아니지만, 개가 동물을 상속받았기 때문에, 개는 동물입니다 — 따라서 isinstance(dog, Animal)은 True를 반환합니다.</li>\n<li>개는 밥이 아니므로, isinstance(dog, Rice)는 False를 반환합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">a = <span class=\"hljs-title class_\">Animal</span>()\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">isinstance</span>(a, <span class=\"hljs-title class_\">Dog</span>))     # <span class=\"hljs-title class_\">False</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">isinstance</span>(a, <span class=\"hljs-title class_\">Animal</span>))  # <span class=\"hljs-title class_\">True</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">isinstance</span>(a, <span class=\"hljs-title class_\">Rice</span>))    # <span class=\"hljs-title class_\">False</span>\n</code></pre>\n<ul>\n<li>Dog는 Animal을 상속받았으므로, 개는 확실히 동물입니다 → 그러나 동물이 반드시 개일 필요는 없습니다 → isinstance(a, Dog)는 False를 반환합니다.</li>\n<li>a는 Animal이므로, isinstance(a, Animal)은 True를 반환합니다.</li>\n<li>a는 밥이 아니므로, isinstance(a, rice)은 False를 반환합니다.</li>\n</ul>\n<h1>5) issubclass(class1, class2)</h1>\n<p>issubclass(class1, class2) 함수는 다음 경우에 True를 반환합니다:</p>\n<ul>\n<li>class1이 class2와 동일한 경우</li>\n<li>class1이 class2의 하위 클래스인 경우 — 즉, class1이 어떤 방식으로든 class2로부터 상속을 받는 경우입니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span>: pass\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-title class_\">Animal</span>): pass\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GermanShepherd</span>(<span class=\"hljs-title class_\">Dog</span>): pass\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">issubclass</span>(<span class=\"hljs-title class_\">Animal</span>, <span class=\"hljs-title class_\">Animal</span>))          # <span class=\"hljs-title class_\">True</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">issubclass</span>(<span class=\"hljs-title class_\">Dog</span>, <span class=\"hljs-title class_\">Animal</span>))             # <span class=\"hljs-title class_\">True</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">issubclass</span>(<span class=\"hljs-title class_\">GermanShepherd</span>, <span class=\"hljs-title class_\">Animal</span>))  # <span class=\"hljs-title class_\">True</span>\n</code></pre>\n<ul>\n<li>Animal은 Animal이므로 issubclass(Animal, Animal)은 True를 반환합니다.</li>\n<li>Dog는 Animal이므로 issubclass(Dog, Animal)은 True를 반환합니다.</li>\n<li>GermanShepherd는 Dog이고 Dog는 Animal이므로 issubclass(GermanShepherd, Animal) 또한 True를 반환합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">issubclass</span>(<span class=\"hljs-title class_\">Animal</span>, <span class=\"hljs-title class_\">Dog</span>))             # <span class=\"hljs-title class_\">False</span>\n</code></pre>\n<ul>\n<li>개는 동물입니다. 그러나 모든 동물이 개일 필요는 없으므로 issubclass(Animal, Dog)는 False를 반환합니다.</li>\n</ul>\n<h1>결론</h1>\n<p>이것이 명확하고 이해하기 쉬웠으면 좋겠습니다.</p>\n<h1>만약에 나를 창작자로 지원하고 싶다면</h1>\n<ul>\n<li>이 이야기를 위해 50번 박수를 치세요</li>\n<li>당신의 생각을 나에게 남겨주세요</li>\n<li>이 이야기에서 가장 마음에 드는 부분을 강조해 주세요</li>\n</ul>\n<p>감사합니다! 이 작은 행동들이 큰 도움이 되고, 정말 감사드립니다!</p>\n<p>YouTube: <a href=\"https://www.youtube.com/@zlliu246\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/@zlliu246</a></p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/zlliu/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/zlliu/</a></p>\n<p>My Ebooks: <a href=\"https://zlliu.co/ebooks\" rel=\"nofollow\" target=\"_blank\">https://zlliu.co/ebooks</a></p>\n</body>\n</html>\n"},"__N_SSG":true}