{"pageProps":{"posts":[{"title":"TIC-80 튜토리얼 머신 러닝걱정하지 마세요 이것은 AI의 일부일 뿐입니다  퍼셉트론 학습","description":"","date":"2024-05-16 16:52","slug":"2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning","content":"\n\n\n![공포를 느끼지 마세요. 그냥 AI의 일부입니다.](/assets/img/2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning_0.png)\n\n[페이지에 시각적인 풍미를 위해 만든 예쁜 3D 모델]\n\n신경망의 경우, 퍼셉트론 학습은 소개 알고리즘 중 가장 간단한 것 중 하나입니다.\n\n이것은 간단한 이진 분류에 사용됩니다. 이는 물건을 그룹화하는 데 사용될 수 있다는 것을 의미합니다.\n\n\n<div class=\"content-ad\"></div>\n\n게임을 개발하면서 여러 아이디어가 떠오를 수 있습니다. 이것은 무작위로 생성된 레벨을 더 멋지게 디자인하거나 플레이어의 입력에 따라 난이도를 조절하거나 더 나은 적을 제공하는 방법일 수 있어요.\n\n--- --- --- --- --- --- --- --- --- --- --- --- ---\n\n![나만의 랜덤 애니메이션](https://miro.medium.com/v2/resize:fit:200/1*J6hWD17Q6PPkhnd0E5rkgw.gif)\n\n<div class=\"content-ad\"></div>\n\n간단히 말해서, 퍼셉트론은 입력을 받아 처리한 후 출력을 내놓습니다.\n\n- 퍼셉트론 학습은 입력을 받는 간단한 신경망입니다.\n\n2. 일정한 가중치가 있습니다 (랜덤으로 생성됩니다. 가중치가 동일하지 않도록 하기 위한 것이며, 학습이 이루어질 수 있도록 항상 모두 마스터할 필요는 없습니다).\n\n3. 그런 다음 가중합을 얻습니다 (이는 단순히 가중치*입력과 가중치*입력의 합을 의미합니다).\n\n<div class=\"content-ad\"></div>\n\n그리고 마지막으로 출력을 결정하는 활성화 함수를 포함합니다.\n\n다음은 코드입니다:\n\n```js\nrnd = math.random\n-- 가중치 초기화\nlocal weight1 = rnd(1) - 0.5\nlocal weight2 = rnd(1) - 0.5\n\n-- 활성화 함수 (계단 함수)\nfunction activate(sum)\n    if sum > 0 then\n        return 1\n    else\n        return 0\n    end\nend\n\n-- 메인 루프\nfunction TIC()\n\ncls()\n    -- 입력 값 샘플 (이 값을 변경할 수 있음)\n    local input1 = 1\n    local input2 = 0\n    \n    -- 가중합 계산\n    local weightedSum = input1 * weight1 + input2 * weight2\n    \n    -- 퍼셉트론 활성화\n    local output = activate(weightedSum)\n    \n    -- 출력 표시\n    print(\"Output: \" .. output, 20, 20, 15)\nend\n```\n\n이 활성화 함수는 신경망 세계에서 꽤 한정적인 단계 활성화 활성화 함수이지만, 창의적으로 사용하면 멋진 것들을 만들 수 있다고 생각합니다.","ogImage":{"url":"/assets/img/2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning_0.png"},"coverImage":"/assets/img/2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning_0.png","tag":["Tech"],"readingTime":2},{"title":"당장 시작할 수 있는 SaaS 아이디어를 소개합니다","description":"","date":"2024-05-16 16:51","slug":"2024-05-16-SaaSideasthatyoucangetstartedrightaway","content":"\n\n<img src=\"/assets/img/2024-05-16-SaaSideasthatyoucangetstartedrightaway_0.png\" />\n\nSaaS를 개발하는 것은 모든 사람이 원하는 것입니다. 그게 왜냐하면 노력을 덜 들여도 매달 수입이 지속적으로 들어오기 때문이죠. 따라서 오늘의 기사에서는 시작할 수 있는 3가지 SaaS 아이디어를 공유하려고 합니다.\n\n시작하기 전에, 성공적인 AI 기반 SaaS 비즈니스를 운영하는 데 심층적으로 파고들고 모든 중요한 전략과 요점을 알고 싶다면, \"AI 주도 SaaS 구축을 위한 치트 코드\"라는 책을 썼습니다. 이 책은 광범위한 지침을 제공하며 AI 기반 SaaS를 구축하는 데 필요한 길을 찾을 수 있을 겁니다.\n\n# CRM용 플러그인 🤔\n\n<div class=\"content-ad\"></div>\n\nCRM은 어떤 기업에서도 매우 중요한 역할을 합니다. Salesforce, Hubspot, 또는 Drip과 같은 도구들은 현재 시장에서 가장 인기 있는 CRM 중 일부입니다. \n\n하지만 이러한 CRM에는 하나의 중요한 문제가 있습니다. 바로 학습 곡선인데요. Salesforce에 익숙하지 않은 경우 실수를 하게 되면 소중한 회사 데이터를 잃을 수도 있습니다. \n\n그래서 이러한 CRM에 쉽게 통합되는 AI 어시스턴스 같은 것을 구축할 수 있습니다. 이는 플러그인이나 확장 프로그램으로 제공되어 사용자들이 플랫폼을 움직이는 데 도움을 줍니다. AI 어시스턴스의 심각성을 높게, 중간으로 또는 낮게 설정할 수 있습니다. CRM에 대한 이해를 기반으로 AI 어시스턴스가 언제든지 사용할 것을 확신하지 않는 버튼을 누르려고 할 때 경고를 제공하고 결과에 대해 알려줄 것입니다.\n\n더불어, AI는 사용자들이 플랫폼을 더 잘 이해하도록 도와주며, 어떤 기능에서 막혀있을 때 질문에 답변해줄 것입니다.\n\n<div class=\"content-ad\"></div>\n\n이렇게 하면 산업에서 큰 문제를 해결하게 될 거에요. 제품의 USP는 중요한 조치를 취하기 전에 사용자에게 결과를 미리 보여줄 수 있다는 것이에요.\n\n# AI 기능 요청 🧑‍💻\n\n성공적인 SaaS를 운영 중이시라면 사용자가 기능을 요구하는 상황에 마주치셨을 것입니다.\n\n가끔 이러한 기능들은 좋은데 미래에 SaaS에 큰 영향을 미칠 수 있지만, 그 때에는 우리가 그것들을 무시하다가 나중에 만약 그 변화를 먼저 할 수 있었다면 더 쉬웠을텐데 라고 깨달게 되곤 해요.\n\n<div class=\"content-ad\"></div>\n\n사용자로부터 피처 요청만 수집하는 도구를 상상해보세요. 버그나 피드백을 추가하지 말고, 피처 요청 데이터에는 버그나 서포트 티켓을 포함시키지 마세요.\n\n이제 AI는 SaaS에서 훈련되어 작동 방법을 알기 때문에 사용자로부터 제안된 모든 피처를 분류하고 구현할지 말지에 대한 제안을 할 수 있습니다. 또한 AI가 이 피처가 구현되었을 때 매출에 영향을 미칠 것인지 미래 예측을 할 수도 있습니다. AI는 과거 요구사항과 경쟁사와 비교하여 이를 계산할 수 있습니다.\n\n# 소셜 미디어에서의 표정🤔\n\n이제 SaaS 세계에서 큰 문제가 있습니다. 많은 사람들이 아주 좋은 아이디어를 가지고 있지만, 그들은 위대한 SaaS 제품을 만든다거나 적절히 마케팅 하는 방법도 알고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n그런데 문제는 사람들이 소셜 미디어 계정에 자신의 얼굴을 올리고 싶어하지 않는다는 것인데, 이는 회사에서 일하거나 콘텐츠 제작에 능하지 않다는 이유일 수 있습니다.\n\n이제 인공지능이 소셜 미디어용 릴과 콘텐츠를 만들 수 있지만, 유튜브나 인스타그램에 AI 아바타나 비디오를 올리면 사람들이 진지하게 받아들이지 않을 수 있습니다. 그래서 나는 소셜 미디어에서 콘텐츠를 만들 줄 아는 인턴들이 있고 AI를 사용해 그들의 얼굴을 비디오에 합성할 수 있는 기능을 갖춘 대행사를 만들어 제안합니다. 당신은 고객에게 콘텐츠 기준으로 요금을 부과하거나 다양한 패키지를 제공할 수 있습니다.\n\n이 아이디어는 자동화보다는 인간의 개입이 더 많이 필요하지만 높은 수요가 있는 아이디어입니다.\n\n이런 아이디어를 여러분과 공유하고 싶었고, 귀하의 특정 시장 및 요구 사항에 맞도록 이러한 아이디어를 유효성을 검사해 보시기 바랍니다. 어떻게 생각하시는지 댓글로 알려주세요. 귀하의 의견을 듣고 의문을 해결해 드리고 싶습니다.\n\n<div class=\"content-ad\"></div>\n\n함께 공유하고 싶은 책이 있는데, 최근에 마케팅에 관한 책을 썼어요. SaaS를 위해 장기적으로 유지되는 고객을 확보하는 방법을 깊게 파헤치고 싶다면, \"당신의 SaaS를 성장시키는 마케팅 전략\"을 참고해보세요. 이 책은 SaaS를 처음부터 시작하여 실제 유저를 확보하는 데 도움이 되는 필요한 단계와 전략을 상세히 다루고 있습니다.","ogImage":{"url":"/assets/img/2024-05-16-SaaSideasthatyoucangetstartedrightaway_0.png"},"coverImage":"/assets/img/2024-05-16-SaaSideasthatyoucangetstartedrightaway_0.png","tag":["Tech"],"readingTime":3},{"title":"2024년에 숙련된 개발자를 위한 최고의 소프트웨어 아키텍처 코스 5선","description":"","date":"2024-05-16 16:48","slug":"2024-05-16-Top5SoftwareArchitectureCoursesforExperiencedDevelopersin2024","content":"\n\n## 10 가지 필수 소프트웨어 아키텍처 + 경험 있는 개발자를 위한 Udemy에서 좋아하는 소프트웨어 아키텍처 강좌.\n\n![image](/assets/img/2024-05-16-Top5SoftwareArchitectureCoursesforExperiencedDevelopersin2024_0.png)\n\n안녕하세요 여러분, 소프트웨어 아키텍처는 주니어 개발자를 시니어 개발자로 만드는 주제 중 하나이기 때문에 시니어 개발자들에게 중요한 주제입니다. 따라서 우리의 경험이 높아짐에 따라 시스템 디자인과 소프트웨어 아키텍처에 대해 배우는 것이 중요해져 더 높은 수준에서 기여할 수 있게 됩니다.\n\n그러나 이 주제를 마스터하는 것은 쉽지 않습니다. 굉장히 방대하고 자료를 찾기 어렵기 때문입니다.\n\n<div class=\"content-ad\"></div>\n\n많은 사람들이 소프트웨어 아키텍처에 대해 알지 못하지만, 마이크로서비스 덕분에 이제는 적어도 Monolithic와 Microservice 아키텍처에 대해 알고 있다는 사실을 알게 되었습니다. 하지만 이 외에도 더 많은 것들이 있으며, 이 글에서는 이를 배워볼 것입니다.\n\n과거에는 최고의 시스템 디자인 강의와 최고의 소프트웨어 아키텍처 강의를 공유했었는데, 많은 분들이 유데미 강의를 요청해주셨기 때문에 이번 글에서는 소프트웨어 아키텍처를 배울 수 있는 최고의 유데미 강의도 소개하겠습니다.\n\n당장 서둘러야 한다면 Michael Pogrebinsky의 유데미 소프트웨어 아키텍처 강의부터 시작해보세요.\n\n그는 Software Architecture & Design of Modern Large Scale Systems 및 The Complete Microservices & Event-Driven Architecture와 같이 많은 수준 높은 품질의 소프트웨어 아키텍처 및 대규모 시스템 디자인 강의를 개설했습니다. 이 강의들은 시작하기에 최적이며 가격 또한 매우 저렴합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Software Architecture Courses](/assets/img/2024-05-16-Top5SoftwareArchitectureCoursesforExperiencedDevelopersin2024_1.png)\n\n# 10 Software Architecture Every Experienced Developer Should Know\n\n여기에는 가장 인기있는 소프트웨어 아키텍처 및 간단한 설명과 장단점이 포함된 목록이 있습니다. 시니어 개발자로서는 항상이만큼의 정보를 갖고 있어야 합니다.\n\n- Monolithic Architecture: 전체 응용 프로그램이 단일 단위로 구축되는 전통적인 아키텍처입니다. 개발 및 배포는 간단하지만 확장은 도전적일 수 있습니다.\n- Microservices Architecture: 응용 프로그램을 느슨하게 결합된 서비스의 모음으로 구조화하는 아키텍처 스타일로, 각각이 특정 비즈니스 기능을 담당합니다. 확장성, 유연성 및 유지 관리가 쉽습니다. Microservices 아키텍처를 배우려면 이 강좌도 참고하세요.\n\n\n<div class=\"content-ad\"></div>\n\n- 서비스 지향 아키텍처 (SOA)\n이 아키텍처는 마이크로서비스와 비슷하지만 네트워크를 통해 서비스를 제공하는 데 초점을 맞춥니다. SOA는 서비스를 잘 정의된 인터페이스로 정의하여 응용 프로그램을 더 모듈식이고 상호 운용 가능하게 만들고자 합니다. 그리고 원한다면 SOA 아키텍처를 배우는 데 도움이 되는 이런 코스들도 확인하실 수 있습니다.\n\n- 이벤트 주도 아키텍처 (EDA)\n이 소프트웨어 아키텍처 스타일은 이벤트 흐름이 특정 작업 실행을 유발하는 방식입니다. 실시간으로 많은 이벤트에 반응하고 처리하는 시스템을 구축하는 데 유용합니다.\n- 계층화된 아키텍처\n이 소프트웨어 아키텍처는 소프트웨어를 구별된 계층으로 구성합니다(예: 표현 계층, 비즈니스 로직 계층, 데이터 액세스 계층), 각 계층은 인접한 계층과만 통신합니다. 모듈성과 관심사의 분리를 촉진합니다.\n- 육각형 아키텍처 (포트와 어댑터)\n이 소프트웨어 아키텍처는 핵심 로직을 데이터베이스 및 사용자 인터페이스와 같은 외부 관심사로부터 분리하여 테스트, 유지 보수 및 이해하기 쉬운 소프트웨어를 만들도록 초점을 맞춥니다.\n- 클린 아키텍처\n관심사의 분리와 의존성 규칙을 강조하는 아키텍처 패턴입니다. 코드를 원형 또는 계층으로 구성하여 유연하고 확장 가능하며 유지보수 가능한 시스템을 만들도록 지향합니다.\n- 이벤트 주도 마이크로서비스\n이 소프트웨어 아키텍처는 마이크로서비스 아키텍처를 이벤트 주도 아키텍처와 결합하여 서비스가 이벤트를 통해 비동기적으로 통신하는 구조입니다. 느슨한 결합, 확장성 및 회복력과 같은 이점을 제공합니다.\n- CQRS (Command Query Responsibility Segregation)\n이는 데이터 저장소의 읽기 및 쓰기 작업을 별도의 모델로 분리하는 아키텍처 패턴입니다. 읽기 및 쓰기 요구 사항이 크게 다른 복잡한 애플리케이션에 유용합니다.\n- 서버리스 아키텍처\n이 아키텍처는 인프라를 관리하지 않고 응용 프로그램 및 서비스를 구축하고 실행할 수 있는 구조를 제공합니다. 코드는 이벤트에 응답하여 실행되고 클라우드 제공업체가 자동으로 리소스를 할당합니다.\n\n<div class=\"content-ad\"></div>\n\n이미지 크레딧 - LinkedIn의 Rocky Bhatia씨. 그를 팔로우하면 유용한 컨텐츠를 공유합니다.\n\n# 2024년 Udemy에서 가장 좋은 소프트웨어 아키텍처 강좌 5선\n\n이제 소프트웨어 아키텍처를 배울 수 있는 Udemy 강좌를 살펴보는 시간입니다. 더 이상 미루지 말고, 여기 2024년 Udemy에서 가입할 수 있는 최고의 소프트웨어 아키텍처 강좌 목록이 있습니다. 이 강좌들은 최신 정보가 담겨있고 심도 있는 내용을 다루며 가격도 매우 저렴합니다. 대부분의 강좌는 현재 Udemy 세일에서 $10에 구매할 수 있습니다.\n\n## 1. Michael Pogrebnisky에 의한 Modern Large Scale Systems의 소프트웨어 아키텍처 및 디자인\n\n<div class=\"content-ad\"></div>\n\n작년에는 소프트웨어 디자인 및 아키텍처 과정이 우리 순위에서 5위였지만, 이제는 우리 독자들과 수강생들의 놀랍도록 좋은 반응으로 인해 2위로 도약했습니다.\n\nMichael Pogrebinsky가 만든 이 소프트웨어 아키텍처 과정은 2024년에 대규모 및 분산 시스템을 설계하는 방법을 가르쳐줍니다. 자바 동시성 과정에 참여한 후 이 과정에 참여하기는 당연한 선택이었고, 실망하지 않았습니다.\n\n시스템 디자인 면접을 합격하고 소프트웨어 아키텍처를 배우기 원하는 경험 많은 개발자라면 소프트웨어 아키텍트나 솔루션 아키텍트가 되기 위한 Udemy 과정이 완벽할 것입니다.\n\n이 과정에서 배울 수 있는 내용들은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n1. 하루에 수백만 개의 요청을 처리할 수 있는 대규모 시스템을 설계하는 방법\n\n2. 확장성 및 고가용성을 위한 설계 방법\n\n3. 소프트웨어 아키텍처 패턴, 구축 블록 및 모범 사례\n\n4. 시스템의 기술적 요구 사항, 고수준 구성 요소 및 API 정의 방법\n\n<div class=\"content-ad\"></div>\n\n5. 대규모 시스템의 소프트웨어 아키텍처 및 기술\n\n이 수업을 수강한 후에는 대규모 시스템에서 사용되는 소프트웨어 아키텍처에 대해 solide knowledge를 얻을 것입니다. 경험 많은 Java 개발자에게 이 소프트웨어 아키텍처 과정을 강력히 추천합니다.\n\n다음은 이 수업에 참여할 수 있는 링크입니다 — 현대 대규모 시스템의 소프트웨어 아키텍처 및 디자인\n\n![Course](/assets/img/2024-05-16-Top5SoftwareArchitectureCoursesforExperiencedDevelopersin2024_2.png)\n\n<div class=\"content-ad\"></div>\n\n이 코스의 큰 성공 이후, Michael은 시스템 디자인 및 소프트웨어 아키텍처에 대한 두 가지 새로운 코스를 더 출시했습니다. 첫 번째 코스는 '소프트웨어 아키텍처 및 시스템 디자인 실용 사례 연구'이고, 두 번째 코스는 '완전한 클라우드 컴퓨팅 소프트웨어 아키텍처 패턴'입니다. 이 두 코스는 이 코스를 효과적으로 보완합니다.\n\n가능하다면, 2024년에 시스템 디자인과 소프트웨어 아키텍처를 완벽히 마스터하기 위해 세 코스에 참여할 수 있습니다.\n\n## 2. Anurag Yadav의 대규모 시스템의 소프트웨어 아키텍처 및 기술\n\n이 Udemy의 또 다른 소프트웨어 아키텍처 코스는 경험 있는 개발자들이 확인할 가치가 있습니다. 이 코스는 다른 코스가 5에서 8시간의 콘텐츠를 제공하는 것에 비해 25.5시간 이상의 콘텐츠를 제공하며 가장 포괄적인 시스템 디자인 코스 중 하나입니다.\n\n<div class=\"content-ad\"></div>\n\n이 소프트웨어 아키텍처 과정은 현대 기술을 활용하여 고성능, 확장성, 가용성 및 보안을 갖춘 소프트웨어 시스템을 만드는 방법을 가르쳐 줄 거에요.\n\n이 과정은 기본적인 삼단 애플리케이션 아키텍처부터 시작해, 마이크로서비스와 분산 시스템과 같은 고급 및 현대 소프트웨어 아키텍처로 전환됩니다.\n\n또한 성능, 확장성, 신뢰성 및 보안을 고려한 아키텍처 설계 방법과 같은 비기능 요구사항을 어떻게 다룰지 배우게 될 거에요.\n\n또한 Nodejs, Redis, Cassandra, Kafka, Hadoop, Elasticsearch와 같이 높은 확장성을 갖춘 기술 및 기술 스택에 노출될 거에요. 무엇보다도 대규모 프로덕션 배포를 위해 Docker 및 Kubernetes를 사용하는 방법을 배우게 되어, 클라우드 컴퓨팅 시대에서 중요한 기술을 습득할 수 있을 거에요.\n\n<div class=\"content-ad\"></div>\n\n이 코스에 가입하려면 다음 링크를 참조하세요 — 소프트웨어 아키텍처 및 대규모 시스템 기술\n\n![이미지](/assets/img/2024-05-16-Top5SoftwareArchitectureCoursesforExperiencedDevelopersin2024_3.png)\n\n## 3. Microservices 아키텍처 — Memi Lavi의 완벽한 안내서\n\nMemi Lavi는 Udemy의 다른 강사로, 소프트웨어 아키텍처, 특히 Azure, 그리고 시스템 설계에 대한 광범위한 지식으로 매우 존경받는 강사입니다. 이 코스는 복잡한 소프트웨어 개념을 단순하고 친근한 언어로 설명하는 그의 탁월한 기술을 또 다른 예로 제시한 것입니다.\n\n<div class=\"content-ad\"></div>\n\n이 5 시간 짜리 강좌는 마이크로서비스 아키텍처에 대해 다룹니다. 이 강좌에서는 기초부터 전담자 및 관련 문제, 마이크로서비스 아키텍처의 9가지 속성을 탐구하는 내용을 다룹니다.\n\n또한 아키텍처 프로세스, 견고하고 신뢰성 있는 마이크로서비스 설계, 효과적인 배포 및 테스트, 서비스 매시 컨셉에 대한 깊이 있는 이해, 마이크로서비스를 사용하지 말아야 하는 경우 및 단일체를 마이크로서비스로 분할하는 전략을 탐구할 것입니다.\n\n소셜 증명에 관해 이 강좌는 12,669개의 평가로부터 5점 만점에 4.5점이라는 인상적인 평가를 받았으며, 총 63,991 명의 학생들로 구성된 방대한 학생 집단을 유치했습니다.\n\n이 강좌에 가입하려면 다음 링크를 참조하십시오 — . 마이크로서비스 아키텍처 — 완전 가이드\n\n<div class=\"content-ad\"></div>\n\n\n![2024-05-16-Top5SoftwareArchitectureCoursesforExperiencedDevelopersin2024_4.png](/assets/img/2024-05-16-Top5SoftwareArchitectureCoursesforExperiencedDevelopersin2024_4.png)\n\nWhether you are a beginner or experienced developer, this course stands as a valuable resource in mastering Microservices Architecture, and if you like this course, you can also checkout Mavi’s other courses on Software architecture, many of them are worth watching, particularly, The Complete Guide to Becoming a Software Architect\n\n## 4. The Complete Cloud Computing Software Architecture Patterns\n\nThis is another Software architecture course from Michael Pogrebinsky on Udemy which is designed to teach you skills needed to architect large-scale systems using cloud computing, software architecture patterns, and modern system design principles.\n\n\n<div class=\"content-ad\"></div>\n\n이 과정에서는 현대 대규모 소프트웨어 시스템의 설계와 아키텍처에서 클라우드의 역할을 배우고, 도전적인 시스템 설계 문제를 해결하며, 소프트웨어 아키텍처 패턴을 효과적으로 활용하고, 전 세계 수백만 사용자에게 서비스를 제공하기 위해 클라우드 컴퓨팅을 활용할 수 있습니다.\n\n그리고, Michael의 강의 스타일을 좋아한다면 그의 다른 소프트웨어 아키텍처 및 분산 시스템 디자인 강좌인 Software Architecture & Design of Modern Large Scale Systems과 The Complete Microservices & Event-Driven Architecture도 마찬가지로 마음에 들 것입니다. 이 강좌들은 병행성과 자바 성능에 관한 강좌처럼 멋진 강좌들입니다.\n\n이 강좌에 참여하려면 다음 링크로 이동해주세요 — The Complete Cloud Computing Software Architecture Patterns\n\n![Image](/assets/img/2024-05-16-Top5SoftwareArchitectureCoursesforExperiencedDevelopersin2024_5.png)\n\n<div class=\"content-ad\"></div>\n\n## 5. 소프트웨어 엔지니어링 101: Kurt Anderson에 의해 더 나은 소프트웨어 계획 및 실행\n\n이것은 소프트웨어 엔지니어링과 아키텍처를 배우기에 가치 있는 Udemy 강의 중 하나입니다. Kurt Anderson이 만든 이 강의는 YouTube의 전문가이자 주인공입니다.\n\n이 강의는 마스터-슬레이브, 계층 패턴, 클라이언트-서버, 파이프-필터 등 이 글에서 다룬 주요 아키텍처 중 대부분을 가르칠 것입니다.\n\n강사는 또한 아주 좋은 이야기꾼이며, 수업은 강을 향해 흐르듯 흘러갑니다. 당신은 분명히 이 강의를 좋아할 것입니다. 이 강의를 보게 된 이유 중 하나이기도 합니다. 또한, 많은 세부 정보로 지루하지 않도록 구성되어 있어요. 따라서 주요 소프트웨어 아키텍처에 대해 빠르게 소개받고 싶다면, 이 강의가 적합합니다.\n\n<div class=\"content-ad\"></div>\n\n이 수업에 참여하려면 다음 링크를 참조하세요: 소프트웨어 공학 101: 더 나은 소프트웨어 계획 및 실행\n\n![Software Engineering Course](/assets/img/2024-05-16-Top5SoftwareArchitectureCoursesforExperiencedDevelopersin2024_6.png)\n\n2024년 Udemy에서 가장 좋은 소프트웨어 아키텍처 과정에 관한 내용이었습니다. 소프트웨어 아키텍처는 숙련된 개발자들에게 꼭 필요한 주제이며, 그들은 시간과 노력을 투자하여 배워야 합니다.\n\n가격이 합리적인 자료를 찾을 때는 Udemy보다 나은 곳이 없습니다. 그래서 저는 이 소프트웨어 아키텍처 및 마이크로서비스를 배우기 위한 최고의 Udemy 코스들을 공유했습니다.\n\n<div class=\"content-ad\"></div>\n\n지금 진행 중인 Udemy 세일에서 이 강좌들을 각 10달러에 구입할 수도 있어요. 나는 이미 많은 기술을 배우고 이번 여름에 그것들을 복습하기 위해 많은 강좌를 구입했어요.\n\n다른 시스템 디자인 면접 자료들도 마음에 들 수 있을 거예요\n\n- 2024년 시스템 디자인 면접 준비 방법\n- 2024년 시스템 디자인 학습을 위한 8가지 최고 웹사이트\n- 시스템 디자인을 위한 ByteByteGo의 가치는 있을까요?\n- 2024년 시스템 디자인 학습을 위한 최고의 유튜브 채널 8가지\n- 2024년 학습할 5가지 최고의 자바 프레임워크\n- 온라인에서 무료로 코딩을 배울 수 있는 21가지 웹사이트\n- 2024년 시스템 디자인 학습을 위한 10가지 이유\n- 프로그래머를 위한 10가지 최고의 시스템 디자인 강좌\n- 시스템 디자인을 배울 수 있는 7가지 최고의 장소\n- 시스템 디자인 면접 코스인 Grokking the System Design Interview 가치가 있을까요?\n- 완전한 데브옵스 엔지니어 로드맵\n- 시스템 디자인 면접을 해결할 수 있는 최고의 11가지 자료\n- 프로그래머를 위한 50개 이상의 데이터 구조 면접 질문\n- 답변과 함께 30가지 시스템 디자인 면접 질문\n\n지금까지 이 글을 읽어주셔서 감사합니다. 만약에 Udemy의 최고 시스템 디자인 인터뷰 강좌가 마음에 든다면 친구나 동료와 공유해주세요. 궁금한 점이나 피드백이 있으시다면 연락 주세요.\n\n<div class=\"content-ad\"></div>\n\nP.S. — 소프트웨어 디자인과 시스템 디자인을 배울 수 있는 무료 온라인 강좌를 찾고 있다면 Udemy에서 제공하는 최고의 무료 소프트웨어 디자인 강좌 목록을 확인해보세요. 이 유용한 기술을 배울 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-16-Top5SoftwareArchitectureCoursesforExperiencedDevelopersin2024_0.png"},"coverImage":"/assets/img/2024-05-16-Top5SoftwareArchitectureCoursesforExperiencedDevelopersin2024_0.png","tag":["Tech"],"readingTime":9},{"title":"모바일 앱 개발 시 피해야 할 상위 실수들","description":"","date":"2024-05-16 16:47","slug":"2024-05-16-TopMistakestoAvoidinMobileAppDevelopment","content":"\n\n휴대폰 앱을 개발하는 것은 혁신과 배움으로 가득한 흥미진진한 여정일 수 있어요. 하지만 특정 함정들은 프로젝트를 방해하여 효과적이지 못하게 만들거나 완전히 불가능하게 만들 수 있어요. 여기서는 일반적인 실수들과 그것을 피하는 방법에 대해 알아볼 거예요.\n\n## 취약한 사용자 인터페이스 및 사용자 경험 디자인\n\n직관적이고 매력적인 사용자 인터페이스(UI)와 사용자 경험(UX)의 중요성을 과소평가하는 것은 앱 실패로 이어져요. 디자인은 단순함과 사용자 친화성을 우선시해야 해요. 실제 사용자와의 지속적인 피드백 루프와 A/B 테스트는 이 측면을 개선하는 데 필수적인 전략이에요.\n\n## 불충분한 시장 조사\n\n<div class=\"content-ad\"></div>\n\n충분한 시장 조사를 하지 않은 채 개발 프로세스를 시작하면 사용자 요구를 충족시키지 못하거나 특정 문제를 해결하지 못하는 앱을 만들 수 있습니다. 사용자 인구 통계, 선호도 및 경쟁사의 제품 등을 포함한 포괄적인 분석이 필수적입니다.\n\n**플랫폼별 가이드라인 무시하기**\n\n각 모바일 플랫폼(예: 안드로이드 및 iOS)마다 고유의 디자인 및 운영 가이드라인이 있습니다. 이를 준수하지 않으면 앱의 성능 및 사용자 경험이 저하될 수 있습니다. 개발자들은 항상 최신의 애플 디자인 가이드라인과 구글의 머티어리얼 디자인을 사용해야 합니다.\n\n**확장성을 고려하지 않기**\n\n<div class=\"content-ad\"></div>\n\n앱이 사용자 수 증가에 관계없이 항상 효율적으로 작동할 것이라고 가정하는 것은 중대한 실수입니다. 초기에 확장성을 계획하면 앱이 증가하는 부하와 기능 확장을 매끄럽게 처리할 수 있게 됩니다.\n\n## 보안 조치 간과하기\n\n보안은 현대 디지턀 시대에서 매우 중요합니다. 보안 조치를 무시하면 사용자 데이터와 기업 정보가 노출되어 중대한 침해로 이어질 수 있습니다. 안전한 코딩 관행, 정기적인 보안 감사, 신뢰할 수 있는 보안 프레임워크 사용은 필수입니다.\n\n## 프로젝트 범위 관리 부실하기\n\n<div class=\"content-ad\"></div>\n\n프로젝트의 범위가 계속해서 변경되거나 증가하는 스코프 크립은 프로젝트가 예산과 일정을 초과하게 만들 수 있습니다. 명확하고 실현 가능한 목표를 설정하고 애자일 방법론을 활용하여 프로젝트 스코프를 효과적으로 관리할 수 있습니다.\n\n## 효율적이지 못한 테스트 실천\n\n적절한 테스트 없이 앱을 출시하는 것은 실패로 향하는 것과 같습니다. 품질 보증은 단위 테스트, 통합 테스트 및 UI 테스트를 개발 수명주기의 일부로 삼아 지속적인 과정이 되어야 합니다.\n\n## 피드백 무시\n\n<div class=\"content-ad\"></div>\n\n앱을 출시하면 사용자 피드백을 무시하는 것은 사용자의 불만과 개선이 필요한 분야를 파악하는 데 방해가 될 수 있습니다. 견고한 피드백 수집 및 모니터링 시스템을 구현하는 것이 계속해서 개선하기 위해 중요합니다.\n\n## 수익화 전략 부족\n\n명확한 수익화 전략 없이 앱을 개발하면 기대한 수익을 창출하지 못할 수 있습니다. 광고, 프리미엄 기능 또는 인앱 구매를 통해 비즈니스 모델을 명확히 하는 것이 중요합니다.\n\n## 결론\n\n<div class=\"content-ad\"></div>\n\n휴대폰 앱 개발 시 일반적으로 범하는 실수를 피하면 앱의 품질과 성공을 크게 향상시킬 수 있어요. 사용자 피드백 수용, 플랫폼 가이드라인 준수, 보안 확보, 확장 가능성 준비는 견고한 휴대폰 앱을 만들기 위한 최상의 방법 중 하나에요.","ogImage":{"url":"/assets/img/2024-05-16-TopMistakestoAvoidinMobileAppDevelopment_0.png"},"coverImage":"/assets/img/2024-05-16-TopMistakestoAvoidinMobileAppDevelopment_0.png","tag":["Tech"],"readingTime":2},{"title":"SwiftUI에서 이메일을 전문가처럼 Regex로 유효성 검사하는 방법","description":"","date":"2024-05-16 16:45","slug":"2024-05-16-HowtoValidateEmailUsingRegexinSwiftUILikeaPro","content":"\n\n<div class=\"content-ad\"></div>\n\n이메일을 유효성 검사하려면 표준 형식과 일치하는 이메일을 확인하는 정규식(Regex) 패턴을 사용합니다. 유효한 이메일은 일반적으로 영숫자 조합으로 된 사용자 이름, \"@gmail.com\" 기호, 도메인 이름 및 도메인 확장자가 포함되어 있습니다.\n\n유효한 이메일 주소 예시:\n\n- example@domain.com\n- user.name@sub.domain.co.uk\n- user_name@domain.org\n\n유효하지 않은 이메일 주소 예시:\n\n<div class=\"content-ad\"></div>\n\n- example@domain (TLD이 누락됨)\n- @domain.com (로컬 부분이 누락됨)\n- user@.com (도메인 이름이 누락됨)\n\n![이미지](/assets/img/2024-05-16-HowtoValidateEmailUsingRegexinSwiftUILikeaPro_1.png)\n\n## 먼저 Regex 유효성 검사 추가하기\n\n정규표현식(Regex는 Regular Expression의 약자)은 검색 패턴을 정의하는 문자 시퀀스입니다. 문자열을 일치시키는 간결하고 유연한 수단을 제공하므로 입력 유효성 검사와 같은 작업에 이상적입니다. SwiftUI의 맥락에서 Regex는 사용자 입력의 특정 패턴(예: 여권 번호 형식)을 강제하는 데 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```swift\nimport SwiftUI\n\nstruct ExampleValidate: View {\n    // 이메일 입력, 표시 모드 및 유효성 검사 플래그를 관리하는 상태 변수\n    @State private var email: String = \"\"\n    @Environment(\\.presentationMode) var presentationMode: Binding<PresentationMode>\n    @State var isWrongEmail = false\n    @State var isRightEmail = false\n    @State var show = false\n    @State var isValidate = false\n    @State var animateCircle = false\n    \n    // 아이콘, 텍스트 및 색상을 사용자 정의할 수 있는 속성\n    var icon: UIImage = UIImage(systemName: \"checkmark.circle\")!\n    var iconError: UIImage = UIImage(systemName: \"xmark.circle\")!\n    var text = \"Berhasil\"\n    var gridentColor: Color = .green\n    var circleAColor: Color = .green\n    var gridentColorEr: Color = .red\n    var circleAColorEr: Color = .red\n    var details: String = \"메시지를 입력하세요\"\n    var corner: CGFloat = 30\n    \n    var body: some View {\n        // 여기에 뷰 내용을 입력하세요\n    }\n    \n    // 정규식을 사용하여 이메일 유효성을 검사하는 함수\n    func isEmail(valid: String) -> Bool {\n        let pattern = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n        return NSPredicate(format: \"SELF MATCHES %@\", pattern).evaluate(with: valid)\n    }\n}\n```\n\n# SwiftUI에서 ValidationView 구현\n\n다음 SwiftUI 뷰, ExampleValidate,은 실시간 피드백을 제공하는 이메일 유효성 검사 양식을 생성하는 방법을 보여줍니다.\n\n```swift\nimport SwiftUI\n\nstruct ExampleValidate: View {\n    // 이메일 입력, 표시 모드 및 유효성 검사 플래그를 관리하는 상태 변수\n    @State private var email: String = \"\"\n    @State var isWrongEmail = false\n    @State var isRightEmail = false\n    @State var show = false\n    @State var isValidate = false\n    @State var animateCircle = false\n    \n    // 아이콘, 텍스트 및 색상을 사용자 정의할 수 있는 속성\n    var icon: UIImage = UIImage(systemName: \"checkmark.circle\")!\n    var iconError: UIImage = UIImage(systemName: \"xmark.circle\")!\n    var text = \"Berhasil\"\n    var gridentColor: Color = .green\n    var circleAColor: Color = .green\n    var gridentColorEr: Color = .red\n    var circleAColorEr: Color = .red\n    var details: String = \"메시지를 입력하세요\"\n    var corner: CGFloat = 30\n    \n    var body: some View {\n        ZStack {\n            ScrollView {\n                VStack {\n                    // 뒤로 가기 버튼과 제목이 있는 헤더\n                    HStack {\n                        Button(action: { }, label: {\n                            Image(systemName: \"chevron.backward\")\n                                .resizable()\n                                .frame(width: 10, height: 15)\n                        })\n                        Spacer()\n                        Text(\"Regex Email\").font(.title2)\n                        Spacer()\n                    }\n                    .foregroundStyle(.primary)\n                    .padding(.horizontal, 20)\n                    .padding(.top, 10)\n                    \n                    // 이메일 입력 필드\n                    VStack(spacing: 30) {\n                        CustomTextField(placeHolder: \"이메일\", imageName: \"envelope\", bColor: \"text1\", tOpacity: 0.6, value: $email)\n                    }\n                    .padding(.horizontal, 10)\n                    .padding(.vertical, 15)\n                    \n                    // 제출 버튼\n                    Button(action: {\n                        if isEmail(valid: email) == false {\n                            isWrongEmail = true\n                        } else {\n                            isRightEmail = true\n                        }\n                    }, label: {\n                        Text(\"제출\")\n                            .fontWeight(.medium)\n                            .foregroundColor(.white)\n                            .frame(height: 50)\n                            .frame(minWidth: 0, maxWidth: .infinity)\n                            .background(Color(\"color1\"))\n                            .cornerRadius(20)\n                            .padding(.horizontal, 10)\n                    })\n                    .padding(.top, 20)\n                }\n            }\n            \n            // 성공 모달 뷰\n            if isRightEmail {\n                VStack {\n                    Spacer()\n                    ZStack {\n                        Color.black\n                            .opacity(0.3)\n                            .shadow(color: Color.black.opacity(0.08), radius: 40, x: 0, y: 5)\n                            .ignoresSafeArea()\n                            .onTapGesture {\n                                isRightEmail = false\n                            }\n                        \n                        ZStack {\n                            RoundedRectangle(cornerRadius: corner)\n                                .foregroundColor(.white)\n                                .frame(height: 250)\n                                .shadow(color: .black.opacity(0.01), radius: 20, x: 0.0, y: 0.0)\n                                .shadow(color: .black.opacity(0.1), radius: 30, x: 0.0, y: 0.0)\n                                .padding(.horizontal, 20)\n                            \n                            VStack(spacing: 10) {\n                                ZStack {\n                                    Circle()\n                                        .stroke(lineWidth: 2)\n                                        .foregroundStyle(circleAColor)\n                                        .frame(width: 80, height: 80)\n                                        .scaleEffect(animateCircle ? 1.3 : 0.90)\n                                        .opacity(animateCircle ? 0 : 1)\n                                        .animation(.easeInOut(duration: 2).delay(1).repeatForever(autoreverses: false), value: animateCircle)\n                                    \n                                    Circle()\n                                        .stroke(lineWidth: 2)\n                                        .foregroundStyle(circleAColor)\n                                        .frame(width: 80, height: 80)\n                                        .scaleEffect(animateCircle ? 1.3 : 0.90)\n                                        .opacity(animateCircle ? 0 : 1)\n                                        .animation(.easeInOut(duration: 2).delay(1.5).repeatForever(autoreverses: false), value: animateCircle)\n                                        .onAppear {\n                                            animateCircle.toggle()\n                                        }\n                                    \n                                    Image(uiImage: icon)\n                                        .resizable()\n                                        .frame(width: 90, height: 90)\n                                }\n                                \n                                Text(\"이메일이 올바릅니다\").bold().font(.system(size: 25))\n                                Text(\"이메일 유효성 검사 성공\").opacity(0.5)\n                                Button(action: {\n                                    isRightEmail = false\n                                }, label: {\n                                    Text(\"확인\")\n                                        .fontWeight(.medium)\n                                        .font(.system(size: 15))\n                                        .foregroundColor(.white)\n                                        .frame(width: 80, height: 40)\n                                        .background(Color(\"color1\"))\n                                        .cornerRadius(20)\n                                        .padding(.horizontal, 50)\n                                }).padding(.top, 7)\n                            }\n                        }.padding()\n                    }\n                    Spacer()\n                }.ignoresSafeArea()\n            }\n            \n            // 오류 모달 뷰\n            if isWrongEmail {\n                VStack {\n                    Spacer()\n                    ZStack {\n                        Color.black\n                            .opacity(0.3)\n                            .shadow(color: Color.black.opacity(0.08), radius: 40, x: 0, y: 5)\n                            .ignoresSafeArea()\n                            .onTapGesture {\n                                isWrongEmail = false\n                            }\n                        \n                        ZStack {\n                            RoundedRectangle(cornerRadius: corner)\n                                .foregroundColor(.white)\n                                .frame(height: 250)\n                                .shadow(color: .black.opacity(0.01), radius: 20, x: 0.0, y: 0.0)\n                                .shadow(color: .black.opacity(0.1), radius: 30, x: 0.0, y: 0.0)\n                                .padding(.horizontal, 20)\n                            \n                            VStack(spacing: 10) {\n                                ZStack {\n                                    Circle()\n                                        .stroke(lineWidth: 2)\n                                        .foregroundStyle(circleAColorEr)\n                                        .frame(width: 80, height: 80)\n                                        .scaleEffect(animateCircle ? 1.3 : 0.90)\n                                        .opacity(animateCircle ? 0 : 1)\n                                        .animation(.easeInOut(duration: 2).delay(1).repeatForever(autoreverses: false), value: animateCircle)\n                                    \n                                    Circle()\n                                        .stroke(lineWidth: 2)\n                                        .foregroundStyle(circleAColor)\n                                        .frame(width: 80, height: 80)\n                                        .scaleEffect(animateCircle ? 1.3 : 0.90)\n                                        .opacity(animateCircle ? 0 : 1)\n                                        .animation(.easeInOut(duration: 2).delay(1.5).repeatForever(autoreverses: false), value: animateCircle)\n                                        .onAppear {\n                                            animateCircle.toggle()\n                                        }\n                                    \n                                    Image(uiImage: iconError)\n                                        .resizable()\n                                        .frame(width: 90, height: 90)\n                                }\n                                \n                                Text(\"잘못된 이메일\").\n\n<div class=\"content-ad\"></div>\n\n## 이 글을 마무리하며:\n\n사용자가 올바른 형식의 이메일 주소를 제공하도록 하는 것이 중요합니다. 이는 사용자 경험을 향상시키는데 도움이 되는데 더불어 애플리케이션의 데이터 정확성과 통신 신뢰성을 향상시킵니다. 읽어 주셔서 감사합니다! Naufal Adli의 더 많은 SwiftUI 기사가 곧 나올 예정이니 많은 기대 부탁드립니다. 이 기사는 수작업으로 만들어졌으며 마음을 담아 제작되었습니다. ❤️ 이제부터 좋아요와 팔로우도 잊지 마세요.","ogImage":{"url":"/assets/img/2024-05-16-HowtoValidateEmailUsingRegexinSwiftUILikeaPro_0.png"},"coverImage":"/assets/img/2024-05-16-HowtoValidateEmailUsingRegexinSwiftUILikeaPro_0.png","tag":["Tech"],"readingTime":12},{"title":"플러터에서 사용자 정의 테마 만들기","description":"","date":"2024-05-16 16:44","slug":"2024-05-16-CreatingCustomThemeinFlutter","content":"\n\n플러터에서 테마는 애플리케이션의 시각적 디자인을 정의하는 강력한 도구입니다. 플러터는 기본적인 머티리얼 디자인 테마를 제공하지만, 디자이너가 머티리얼 테마의 규칙을 따르는 대신 커스텀 이름을 사용하는 경우가 있습니다. 이 기사에서는 플러터에서 이러한 사용자 정의 이름을 수용하는 사용자 정의 테마를 만드는 방법을 살펴보겠습니다.\n\n## 색 구성 사용자 정의\n\n디자이너가 색상에 사용자 지정 이름을 사용하는 경우, 우리는 이러한 이름에 맞는 사용자 정의 색 구성을 플러터에서 정의할 수 있습니다. 예를 들어, 디자이너가 다음과 같은 사용자 정의 색상 이름을 사용한다고 가정해보겠습니다: \"successColor\" 및 \"errorColor\". 우리는 다음과 같이 사용자 정의 색 구성을 정의할 수 있습니다:\n\n![Creating Custom Theme in Flutter](/assets/img/2024-05-16-CreatingCustomThemeinFlutter_0.png)\n\n<div class=\"content-ad\"></div>\n\n## 텍스트 테마 사용자 정의\n\n디자이너가 텍스트 스타일에 사용자 정의 이름을 사용할 때 Flutter에서 사용자 정의 텍스트 테마를 정의할 수 있습니다. 예를 들어, 디자이너가 텍스트 스타일에 \"헤드라인\", \"본문\", \"라벨\"이라는 이름을 사용한다면, 다음과 같이 사용자 정의 텍스트 테마를 정의할 수 있습니다:\n\n![이미지](/assets/img/2024-05-16-CreatingCustomThemeinFlutter_1.png)\n\n## 사용자 정의 테마 구현하기\n\n<div class=\"content-ad\"></div>\n\n당신이 원하는 커스텀 색상 Scheme 및 텍스트 테마를 사용하기 위해 Flutter 앱에서는 이러한 속성을 캡슐화하는 사용자 정의 테마 데이터 클래스를 정의할 수 있습니다:\n\n![Custom Theme in Flutter](/assets/img/2024-05-16-CreatingCustomThemeinFlutter_2.png)\n\n## 커스텀 테마 인스턴스 생성\n\n커스텀 색상 Scheme 및 텍스트 테마를 정의한 후에는 앱 전반에 걸쳐 사용할 커스텀 테마 데이터의 인스턴스를 만들 수 있습니다. 예를 들어, 이렇게 밝은 테마와 어두운 테마를 정의할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-16-CreatingCustomThemeinFlutter_3.png)\n\n마지막으로, 디자이너들은 플러터 앱을 만들 때 구글에서 제공한 기본 자료 디자인 가이드라인에서 벗어나는 경우가 많습니다. 그들은 대신에 자사의 브랜드 아이덴티티나 디자인 비전과 더 잘 일치하는 사용자 정의 색상 구성표와 타이포그래피 스타일을 정의하는 경우가 많습니다. 이렇게 함으로써, 디자이너들은 다른 사람과 차별화되는 독특하고 시각적으로 매력적인 사용자 인터페이스를 만들 수 있습니다. 플러터의 사용자 정의 테마는 디자이너들에게 그들의 특별한 필요와 선호도에 맞는 몰입도 있고 매료되는 사용자 경험을 만들기 위한 유연함과 창의적 자유를 제공합니다.\n\n읽어 주셔서 감사합니다. 즐거운 플러터 코딩하세요! 안녕히 가세요!","ogImage":{"url":"/assets/img/2024-05-16-CreatingCustomThemeinFlutter_0.png"},"coverImage":"/assets/img/2024-05-16-CreatingCustomThemeinFlutter_0.png","tag":["Tech"],"readingTime":2},{"title":"내가 버그 바운티 헌터가 되고 싶어하는 이유","description":"","date":"2024-05-16 16:43","slug":"2024-05-16-WhyIwanttobecomeabugbountyhunter","content":"\n\n대학을 졸업하고 쉽게 기술 직업을 얻는 것보다는, 나는 대학 공부를 하면서 스스로 버그 바운티 헌팅을 가르치고 있다. 그런데 왜 이런 일을 하고 있을까?\n\n우선 버그 바운티 헌팅이 무엇인지 알아보자. 비즈니스를 위한 웹사이트를 소유하고 있다고 상상해보세요. 그것을 안전하게 유지하는 것이 중요하다는 것을 알고 있습니다. 그러나 어떻게 그것이 안전한지 확인할 수 있을까요? 좋은 개발자를 고용하는 것 외에도 Hackerone과 같은 사이트에 웹사이트 링크를 올릴 수 있습니다. 이렇게 하면 많은 우수한 해커들이 웹사이트를 해킹하여 안전하지만 손상시키지 않고 규정 내에서 찾아보려고 합니다. 당신이 해야 할 일은 사이트에서 무언가를 발견한 첫 번째 해커에게 보상을 지불하는 것뿐입니다. 이러한 종류의 해커들을 버그 바운티 헌터라고 합니다. 버그 헌터로서 당신은 버그를 발견한 첫 번째 사람이어야 합니다. 상사가 없고 정해진 근무 시간도 없으며 전 세계 어느 곳에서든 일할 수 있습니다. 단점은 버그를 찾지 못하면 돈을 벌 수 없고, 다른 사람들보다 더 나은 속도와 능력을 가져야 하며, 전문 직업으로서의 버그 헌팅에 진입하는 것이 점점 어려워지고 있다는 것입니다.\n\n나는 18세가 되었을 때 삶에서 무슨 일을 하고 싶은지에 대한 아이디어를 갖기 시작해야 했습니다. 가장 먼저 가지고 있던 계획은 심리학자로 사람들을 돕는 것이었습니다. 그래서 나는 심리학을 공부했습니다. 처음에는 좋아했지만 나중에는 즐기지 못했습니다. 나의 좋은 친구 중 한 명이 나를 기술 분야에 속한다고 생각한다고 했기 때문에 코딩을 스스로 가르치기 시작했고, 심리학에서 컴퓨터 과학으로 전과했고 그것을 사랑했습니다. 나는 CS50 과정(무료)으로 시작했지만 그만 두고 나만의 것을 시작했습니다. 나는 자바로 몇 개의 작은 게임과 웹사이트를 만들었습니다. 2023년 말에 나의 한 친구가 CTF(깃발 캡쳐)에 그와 그의 친구들과 함께 참여해 달라고 나에게 말했습니다. CTF(깃발 캡쳐)는 기본적으로 해킹 대회입니다. 이 경험으로 나는 해킹이 무엇인지 맛볼 수 있었습니다. 나는 정말로 흥미를 느꼈지만 어떤 도전 과제도 해결하지 못했습니다. 그 후 게임 제작을 중단하고 해킹에 집중했습니다. 나는 스스로 스스로를 가르치고 무언가를 하면서 배우는 것을 더 좋아합니다. 이기술은 책을 읽거나 과정을 따르는 것이 어렵기 때문에 디스렉시아를 가진 사람으로서 저에게는 어렵습니다. 그리고 이제 나는 코딩을 처음 배웠던 지 1.5년이 되었습니다.\n\n버그 바운티 헌팅은 나에게 꿈 같은 직업입니다. 나는 그것에 대한 자유를 사랑하며, 언제 어디서 일할지 선택할 수 있습니다. 그것은 경쟁적이고 어렵고 당신이 배우고 퍼즐을 해결하는 데 중점을 둡니다. 그래서 나는 스스로 버그 바운티 헌팅을 가르치고 있습니다. 나는 버그 헌팅에서 성공을 찾을 때까지 계획 B로서 대학에 남을 것입니다. 나는 이 블로그를 시작했습니다. 사람들과 연결하고 배우는 주제를 가르치며, 복잡한 것을 간단하게 설명하는 연습을 하려고 합니다. 아마 내 블로그가 다른 사람들에게도 도움이 될지도 모르겠네요.","ogImage":{"url":"/assets/img/2024-05-16-WhyIwanttobecomeabugbountyhunter_0.png"},"coverImage":"/assets/img/2024-05-16-WhyIwanttobecomeabugbountyhunter_0.png","tag":["Tech"],"readingTime":2},{"title":"완벽한 맞춤을 찾아낼 때 프리랜스 안드로이드 개발자 채용에 대한 조언","description":"","date":"2024-05-16 16:41","slug":"2024-05-16-UncoveringthePerfectFitAdviceforHiringFreelanceAndroidDevelopers","content":"\n\n안녕하세요! 안드로이드 운영 체제는 모바일 세계에서 주름을 잡고 있으며, 전 세계적으로 수십억 명의 사용자를 보유하고 있습니다. 이 엄청난 사용자 기반은 혁신적인 모바일 애플리케이션을 개발하려는 기업과 기업가들에게 거대한 기회로 이어집니다. 그러나 강력하고 사용자 친화적인 안드로이드 앱을 만들기 위해서는 플랫폼의 복잡성을 이해하는 숙련된 개발자가 필요합니다.\n\n이것이 프리랜서 안드로이드 개발자가 출몰하는 곳입니다. 정규직 직원 고용과 비교할 때 유연하고 비용 효율적인 솔루션을 제공합니다. 그러나 다양한 프리랜서들이 존재하는 상황에서, 프로젝트에 최적인 매치를 찾는 방법은 무엇일까요?\n\n이 포괄적인 가이드는 다음 프로젝트를 위해 프리랜서 안드로이드 개발자를 성공적으로 고용할 수 있는 지식과 자료를 제공할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# 프리랜스 안드로이드 개발자를 고용해야 하는 이유\n\n프리랜스 안드로이드 개발자를 고용하는 것에는 여러 가지 이점이 있습니다:\n\n- 비용 효율성: 프리랜서는 일반적으로 시간당 요금이나 프로젝트 기반 요금을 청구하여 예산을 더 효율적으로 관리할 수 있습니다. 또한 정규직 직원과 관련된 경상비용을 피할 수 있습니다.\n- 유연성: 프리랜스 개발자는 더 많은 일정 유연성을 제공합니다. 짧은 기간의 프로젝트나 지속적인 유지보수 작업을 위해 필요에 따라 개발 팀을 확장하거나 축소할 수 있습니다.\n- 글로벌 인재 풀 액세스: 프리랜스 플랫폼을 통해 전 세계의 개발자와 연결되어 옵션을 확장하고 프로젝트에 필요한 완벽한 기술 세트를 찾을 수 있습니다.\n- 전문 지식: 많은 프리랜스 개발자가 AR/VR 통합, 웨어러블 앱 개발 또는 게임 개발과 같은 안드로이드 개발의 특정 영역에 특화되어 있습니다. 이를 통해 프로젝트에 필요한 전문 지식을 갖춘 개발자를 타겟팅할 수 있습니다.\n\n## 적절한 프리랜스 안드로이드 개발자를 찾는 법\n\n<div class=\"content-ad\"></div>\n\n프로젝트를 위한 이상적인 프리랜스 안드로이드 개발자를 찾기 위한 중요한 단계:\n\n1. 프로젝트 요구사항 정의하기:\n\n검색을 시작하기 전에 프로젝트 범위와 목표를 명확히 정의하세요. 이에는 다음 사항이 포함됩니다:\n\n- 앱 기능: 응용 프로그램에서 구상한 모든 기능과 기능을 나열하세요.\n- 대상 사용자: 대상 사용자의 인구 통계와 행동 패턴을 식별하세요.\n- 일정 및 예산: 프로젝트를 위한 현실적인 일정과 예산을 설정하세요.\n\n<div class=\"content-ad\"></div>\n\n잘 정의된 프로젝트 요약서는 자격있는 개발자를 유치하고 커뮤니케이션 프로세스를 간소화하는 데 도움이 됩니다.\n\n2. 신뢰할 만한 프리랜싱 플랫폼 탐색:\n\n여러 온라인 플랫폼에서 비즈니스와 프리랜스 개발자를 연결해줍니다. 여러분이 고려할 수 있는 인기 있는 옵션 몇 가지를 살펴보겠습니다:\n\n- Fiverr: 다양한 안드로이드 개발 서비스를 제공하는 다양한 개발자를 보유한 선도적인 프리랜스 마켓플레이스입니다.\n- Upwork: 다른 플랫폼으로, 다양한 검색 기능과 안전한 결제 시스템으로 유명합니다.\n- Toptal: 중요 프로젝트에 대한 최고의 프리랜스 개발자를 선별적으로 제공하는 플랫폼입니다.\n\n<div class=\"content-ad\"></div>\n\n3. 개발자 프로필 평가:\n\n잠재적인 개발자의 프로필을 철저하게 검토하세요. 다음과 같은 중요한 측면을 확인하세요:\n\n- 경험과 기술: 지난 프로젝트를 검토하여 개발자의 경험 수준과 안드로이드 개발 특정 영역에서의 전문 지식을 이해하세요.\n- 포트폴리오: 개발자의 포트폴리오를 주의 깊게 살펴서 그들의 작업 품질과 프로젝트 스타일과의 일치성을 평가하세요.\n- 클라이언트 리뷰 및 평점: 클라이언트 리뷰를 읽어서 개발자의 커뮤니케이션 스타일, 전문성 및 마감 기한 준수 능력에 대한 통찰력을 얻으세요.\n- 시간당 요율 또는 프로젝트 비용: 요율과 비용을 비교하여 예산에 맞는 사람을 찾으세요.\n\n4. 면접 진행하기:\n\n<div class=\"content-ad\"></div>\n\n프로필을 기반으로 잠재적인 몇 명의 후보자를 선정하고 비디오 인터뷰 일정을 잡아보세요. 이를 통해 그들의 기술적 능력, 커뮤니케이션 스타일, 그리고 프로젝트 비전을 이해하는 능력을 평가할 수 있습니다.\n\n5. 시험과 협상:\n\n프로젝트를 할당하기 전에, 개발자의 기술적 능력과 코딩 스타일을 평가하기 위한 짧은 테스트 과제를 고려해 보세요. 만족할 때까지 프로젝트 범위, 일정, 결제 조건 등을 자세히 논의한 후에 합의서를 최종 확정하세요.\n\n## Fiverr에서 프리랜서 안드로이드 개발자를 고용하기 위한 자료\n\n<div class=\"content-ad\"></div>\n\n파이버는 재능 있는 프리랜스 안드로이드 개발자를 찾는 믿을 수 있는 플랫폼으로 두드러집니다. 이제 파이버의 서비스를 활용하여 프로젝트에 완벽하게 맞는 개발자를 찾을 수 있습니다:\n\n- 검색 기능: 파이버의 검색 필터를 활용하여 전문 기술, 경험 수준, 예산 및 위치를 기준으로 검색 범위를 좁힐 수 있습니다.\n- 프로젝트 게시: 또는 파이버에 자세한 프로젝트 설명을 게시하세요. 이 방법을 사용하면 개발자가 접근 방식과 가격 구조를 제안하는 제안서를 제출할 수 있습니다.\n- 구매자 보호: 파이버는 에스크로 서비스를 통해 구매자 보호를 제공하여 프로젝트 단계가 완료된 후 안전한 지불을 보장합니다.\n\n당신의 안드로이드 앱 아이디어를 현실로 만들 준비가 되셨나요? 파이버에서 재능 있는 프리랜스 안드로이드 개발자들의 다양한 풀을 탐험해보세요. 오늘 가입하고 개발자 프로필을 찾아보며 멋진 성공적인 안드로이드 애플리케이션을 개발하는 여정을 떠나보세요!","ogImage":{"url":"/assets/img/2024-05-16-UncoveringthePerfectFitAdviceforHiringFreelanceAndroidDevelopers_0.png"},"coverImage":"/assets/img/2024-05-16-UncoveringthePerfectFitAdviceforHiringFreelanceAndroidDevelopers_0.png","tag":["Tech"],"readingTime":3},{"title":"HTML, CSS 및 JavaScript를 사용하여 간단히 동전 던지기 게임을 디자인해 봅시다","description":"","date":"2024-05-16 16:40","slug":"2024-05-16-DesigningacointossgamesimplyusingHTMLCSSandJavaScript","content":"\n\n안녕하세요! 오늘은 HTML, CSS 및 JavaScript만을 사용하여 간단하게 동전 던지기 게임을 만드는 방법을 보여 드리겠습니다.\n\n![coin photo](/assets/img/2024-05-16-DesigningacointossgamesimplyusingHTMLCSSandJavaScript_0.png)\n\n먼저 편안한 느낌의 동전 사진이 필요합니다. 찾지 못하더라도 걱정하지 마세요, 아래 링크된 사이트에서 쉽게 찾을 수 있습니다.\n\n링크: [https://icons8.com/](https://icons8.com/)\n\n<div class=\"content-ad\"></div>\n\n동전의 앞면과 뒷면이 선택되면 프로젝트를 시작할 수 있습니다.\n\n# 프로젝트 파일 생성\n\nMicrosoft Visual Studio에 들어가서 3개의 기본 페이지를 생성하고 서로 연결합니다. (index.html, style.css, script.js) 여기서 이미지 폴더를 추가할 수 있습니다.\n\n![동전 게임 디자인 예시](/assets/img/2024-05-16-DesigningacointossgamesimplyusingHTMLCSSandJavaScript_1.png)\n\n<div class=\"content-ad\"></div>\n\n비록 페이지의 모습은 당신에게 달려 있지만, 저는 더 간단한 디자인을 사용했어요.\n\n# HTML 코드\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Heads or Tails</title>\n    <link rel=\"stylesheet\" href=\"/style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"stats\">\n            <p id=\"heads-count\">Heads = 0</p>\n            <p id=\"tails-count\">Tails = 0</p>\n        </div>\n        <div id=\"coin\" class=\"coin\">\n            <div class=\"heads\">\n                <img src=\"/images/1TL_reverse-removebg-preview.png\" alt=\"reverse\">\n            </div>\n            <div class=\"tails\">\n                <img src=\"/images/1TL_obverse-removebg-preview.png\" alt=\"observe\">\n            </div>\n\n       \n        </div>\n        <div class=\"buttons\">\n            <button id=\"flip-button\">동전 던지기</button>\n            <button id=\"reset-button\">초기화</button>\n        </div>\n    </div>\n    <script src=\"scrpit.js\"></script>\n    \n</body>\n</html>\n```\n\n여기서, “index.html”에서 우리의 스크립트 파일과 CSS 파일을 함께 링크하는 것을 잊지 마세요.\n\n<div class=\"content-ad\"></div>\n\n# CSS 코드\n\n```js\n*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    \n}\nbody{\n    height: 100%;\n    background-color: #6a5acd;\n}\n\n.container{\n    background-color: #ededed;\n    width: 400px;\n    padding: 50px;\n    position: absolute;\n    transform: translate(-50%, -50%);\n    left: 50%;\n    top: 50%;\n    box-shadow: 15px 30px 35px rgb(0, 0, 0,0.3);\n    border-radius: 10px;\n    perspective: 300px;\n}\n\n.stats{\n    text-align: right;\n    color: #101020;\n    font-weight: 500;\n    line-height: 25px;\n}\n\n.coin{\n    height: 150px;\n    width: 150px;\n    position: relative;\n    margin: 50px auto;\n    transform-style: preserve-3d;\n}\n\n.tails{\n    transform: rotateX(180deg);\n}\n\n.buttons{\n    display: flex;\n    justify-content: space-between;\n   \n}\n\n\n.coin img{\n    width: 145px;\n}\n\n.heads,.tails{\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    backface-visibility: hidden;\n}\nbutton{\n    padding: 10px 0px;\n    width: 120px;\n    border: 3px solid#6a5acd;\n    border-radius: 5px;\n    cursor: pointer;\n}\n#flip-button{\n    background-color: white;\n    color: black;  \n     \n}\n\n#flip-button:disabled{\n    background-color: #e1e0ee;\n    color: #101020;\n    border-radius: #e1e0ee;\n    opacity: 0.6;\n}\n#reset-button{\n    background-color: #fff;\n    color: #000;\n}\n\n@keyframes spin-tails{\n    0%{\n        transform: rotateX(0);\n    }\n    100% {\n        transform: rotateX(1980deg);\n    }\n}\n@keyframes spin-heads{\n    0%{\n        transform: rotateX(0);\n    }\n    100% {\n        transform: rotateX(2160deg);\n    }\n}\n```\n\n# 자바스크립트 코드\n\n```js\nlet heads=0;\nlet tails=0;\n\nlet coin = document.querySelector(\".coin\");\nlet fliptBtn = document.querySelector(\"#flip-button\");\nlet resetBtn =document.querySelector(\"#reset-button\");\n\nfliptBtn.addEventListener(\"click\",()=>{\n    \n    let i= Math.floor(Math.random() *2);\n\n    coin.style.animation = \"none\";\n\nif(i) {\n\n    setTimeout(() => {\n        coin.style.animation = \"spin-heads 3s forwards\";\n    },100);\n    heads++;\n}else{\n    setTimeout(() =>{\n        coin.style.animation= \"spin-tails 3s forwards \";\n    },100);\n    tails++;\n}\n    setTimeout(updateStats, 3000);\n    disableButton();\n});\n\nfunction updateStats(){\n    document.querySelector(\"#heads-count\").textContent= `Heads : ${heads}`;\n    document.querySelector(\"#tails-count\").textContent= `Tails : ${tails}` ;\n}\n\nfunction disableButton(){\n    fliptBtn.disabled = true;\n    setTimeout(() =>{\n        fliptBtn.disabled = false;\n    },3000);\n}\n\nresetBtn.addEventListener(\"click\", ()=>{\n    coin.style.animation=\"none\";\n    heads=0;\n    tails=0;\n    updateStats();\n}\n```\n\n<div class=\"content-ad\"></div>\n\n프로젝트에 이 코드를 포함하면 이제 동전 던지기 게임을 할 수 있어요. 지금까지 읽어주셔서 감사합니다. 다음 프로젝트에서 만나요.\n\n작성자: Kerem Erkengel","ogImage":{"url":"/assets/img/2024-05-16-DesigningacointossgamesimplyusingHTMLCSSandJavaScript_0.png"},"coverImage":"/assets/img/2024-05-16-DesigningacointossgamesimplyusingHTMLCSSandJavaScript_0.png","tag":["Tech"],"readingTime":5},{"title":"프론트엔드 전투 프로젝트 No04 숨겨진 검색 위젯","description":"","date":"2024-05-16 16:39","slug":"2024-05-16-50Front-EndCombatProjectNo04HiddenSearchWidget","content":"\n\n![image1](/assets/img/2024-05-16-50Front-EndCombatProjectNo04HiddenSearchWidget_0.png)\n\n# 프로젝트 소개\n\n이 프로젝트는 간단하고 유용한 숨은 검색 위젯을 보여줍니다. 검색 버튼을 클릭하면 검색 창이 확장되고 입력 상자가 자동으로 포커스되어 사용자가 검색 콘텐츠를 입력하기 쉬워집니다.\n\n![image2](/assets/img/2024-05-16-50Front-EndCombatProjectNo04HiddenSearchWidget_1.png)\n\n<div class=\"content-ad\"></div>\n\n# 구현\n\n- HTML 구조는 검색 창의 레이아웃을 정의하며, 입력 상자와 버튼을 포함합니다.\n- CSS 스타일은 검색 창의 초기 모양, 확장된 상태에서의 모습 및 버튼 이동 방식을 정의합니다.\n- JavaScript 코드는 버튼 클릭 이벤트를 감지하고, 활성 클래스의 상태에 따라 검색 창의 확장/축소를 제어하며, 입력 상자에 포커스를 설정합니다.\n\n# 핵심 코드\n\n- .search 컨테이너에는 검색 창을 위한 입력 상자와 버튼이 포함되어 있습니다.\n- .input 입력 상자는 검색어를 입력하는 데 사용됩니다.\n- .btn 버튼은 검색 창을 확장하거나 축소하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css\" integrity=\"sha512-1PKOgIY59xJ8Co8+NE6FZ+LOAZKjy+KY8iq0G4B3CyeY6wYHN3yt9PW0XpSriVlkMXe40PTKnXrLnZ9+fkDaog==\" crossorigin=\"anonymous\" />\n    <link rel=\"stylesheet\" href=\"style.css\" />\n    <title>Hidden Search</title>\n  </head>\n  <body>\n    <div class=\"search\">\n      <input type=\"text\" class=\"input\" placeholder=\"Search...\">\n      <button class=\"btn\">\n        <i class=\"fas fa-search\"></i>\n      </button>\n    </div>\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n```\n\n- `.search`의 `position: relative` 속성은 자식 요소를 위치시키는 데 사용됩니다.\n- `.input` 및 `.btn`의 스타일은 초기 모양 및 크기를 정의합니다.\n- `.search.active .input` 및 `.search.active .btn` 가상 클래스는 검색 창이 확장될 때 스타일을 제어합니다.\n\n```js\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: linear-gradient(90deg, #7d5fff, #7158e2);\n  font-family: 'Roboto', sans-serif;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  overflow: hidden;\n  margin: 0;\n}\n\n.search {\n  position: relative;\n  height: 50px;\n}\n\n.search .input {\n  background-color: #fff;\n  border: 0;\n  font-size: 18px;\n  padding: 15px;\n  height: 50px;\n  width: 50px;\n  transition: width 0.3s ease;\n}\n\n.btn {\n  background-color: #fff;\n  border: 0;\n  cursor: pointer;\n  font-size: 24px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 50px;\n  width: 50px;\n  transition: transform 0.3s ease;\n}\n\n.btn:focus,\n.input:focus {\n  outline: none;\n}\n\n.search.active .input {\n  width: 200px;\n}\n\n.search.active .btn {\n  transform: translateX(198px);\n}\n```\n\n- 검색 바, 버튼 및 입력 상자의 DOM 요소 참조 가져오기.\n- 버튼 클릭 이벤트 핸들러:\n— `.search` 요소의 `active` 클래스를 토글하여 검색 바의 확장/축소를 제어합니다.\n— 검색 바가 확장되면 자동으로 입력 상자로 포커스가 이동됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst search = document.querySelector('.search')\nconst btn = document.querySelector('.btn')\nconst input = document.querySelector('.input')\n\nbtn.addEventListener('click', () => {\n    search.classList.toggle('active')\n    input.focus()\n})\n```\n\n# 에필로그\n\n이 프로젝트의 코드를 이해하면 HTML, CSS 및 JavaScript를 사용하여 대화형 검색 위젯을 만드는 방법을 배울 수 있습니다. 필요에 따라 프로젝트의 스타일 및 기능을 수정하여 검색 힌트, 검색 기록 등을 추가하여 더 유용한 검색 경험을 만들 수 있습니다.\n\nGIF의 과정 전체가 표시됩니다:\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-16-50Front-EndCombatProjectNo04HiddenSearchWidget_2.png\" />\n\n마침내, 이 이야기를 읽은 후에 도움이 될 것이라고 생각된다면, 동의하고 팔로우해주시기 바랍니다. 공유해주세요. 혹시 당신의 리트윗이 다른 이들에게 영감을 줄 수도 있습니다. 또한, 제안 사항이 있으면 아래에 제안해주시면 감사하겠습니다. 앞으로 기술에 관한 더 많은 글을 공유하겠습니다. 감사합니다!","ogImage":{"url":"/assets/img/2024-05-16-50Front-EndCombatProjectNo04HiddenSearchWidget_0.png"},"coverImage":"/assets/img/2024-05-16-50Front-EndCombatProjectNo04HiddenSearchWidget_0.png","tag":["Tech"],"readingTime":4}],"page":"27","totalPageCount":99,"totalPageGroupCount":5,"lastPageGroup":20,"currentPageGroup":1},"__N_SSG":true}