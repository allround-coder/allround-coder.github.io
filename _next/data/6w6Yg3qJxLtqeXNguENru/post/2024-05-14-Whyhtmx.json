{"pageProps":{"post":{"title":"왜 htmx를 사용해야 할까요","description":"","date":"2024-05-14 11:37","slug":"2024-05-14-Whyhtmx","content":"\n\n![이미지](/assets/img/2024-05-14-Whyhtmx_0.png)\n\nHTMX는 JavaScript 라이브러리로, JavaScript를 작성할 필요 없이 HTML에서 직접 최신 브라우저 기능에 액세스할 수 있게 해줍니다. 이는 HTML 구문을 확장하여 AJAX, 웹소켓 및 서버 전송 이벤트와 같은 기능을 HTML에서 바로 사용할 수 있도록 합니다.\n\n클릭 버튼을 구현하고 싶다면 아마도 아래의 HTML과 JavaScript 코드를 작성해야 할 것입니다.\n\n![이미지](/assets/img/2024-05-14-Whyhtmx_1.png)\n\n\n\nhtmx를 사용하면 간단히 다음을 할 수 있어요:\n\n![Whyhtmx_2.png](/assets/img/2024-05-14-Whyhtmx_2.png)\n\n정말 간단하고 쉬워요.\n\nHTMX에서 hx-swap은 서버 요청으로 반환된 콘텐츠가 요소의 현재 콘텐츠를 대체하는 방법을 결정하는 속성입니다.\n\n\n\n\"hx-swap=\"outerHTML\"\"를 설정하면 해당 요소 전체(오픈 및 클로징 태그 포함)가 서버 응답으로 교체됩니다.\n\n예를 들어, 이 HTMX 코드를 살펴보십시오:\n\n```js\n<div id=\"myDiv\" hx-get=\"/some/url\" hx-swap=\"outerHTML\">Original Content</div>\n```\n\n“/some/url\"로의 요청이 발생하고 서버가 `span`New Content`/span`으로 응답하는 경우, hx-swap=\"outerHTML\"은 서버 응답으로 전체 div 요소를 교체합니다.\n\n\n\n서버에서 응답을 받은 후에, HTML이 다음과 같이 변경됩니다:\n\n```js\n<span>New Content</span>\n```\n\n원본의 `div` 요소와 그 내용(\"Original Content\")은 완전히 새로운 `span` 요소로 대체되었습니다.\n\n## 리액트, 앵귤러, 뷰와 작별인가요?\n\n\n\n백엔드 개발자로서, 위의 프레임워크 중 하나를 배우는 것보다 htmx를 배우는 것이 훨씬 가벼운 일입니다.\n\n다음은 HTMX를 사용할 이유가 있는 몇 가지 이유입니다:\n\n간편함:\n\nHTMX는 HTML을 확장하여 JavaScript를 작성할 필요 없이 마크업에 직접 상호 작용성을 추가할 수 있습니다. 이렇게 하면 코드를 이해하고 유지하기 쉬울 수 있습니다.\n\n\n\n점진적 향상:\nHTMX를 사용하면 필요한 곳에 상호작용성을 추가하면서 전체 프론트엔드 코드를 완전히 다시 작성할 필요가 없이 HTML을 점진적으로 향상시킬 수 있습니다.\n\n서버 측 렌더링:\nHTMX를 사용하면 페이지의 대부분 컨텐츠에 대해 서버 측 렌더링을 활용할 수 있어서 성능과 SEO를 향상시킬 수 있습니다.\n\n\n\n적은 양의 자바스크립트:\n\nHTMX는 SPA 프레임워크보다 적은 양의 자바스크립트를 필요로 하며, 이는 더 빠른 로드 시간과 적은 복잡성으로 이어질 수 있습니다.\n\n기존 프로젝트 통합:\n\nHTMX는 많은 SPA 프레임워크와 달리 완전한 재작성 없이 기존 프로젝트에 쉽게 추가할 수 있습니다.\n\n\n\n하지만 HTMX가 모든 프로젝트에 가장 적합한 선택은 아닐 수 있습니다. React, Angular 및 Vue와 같은 SPA 프레임워크는 더 많은 기능을 제공하며 복잡하고 상태를 가지는 애플리케이션을 구축하기에 더 적합합니다. 최상의 선택은 프로젝트의 구체적인 요구 사항에 따라 다릅니다.\n\n내 경우에는 프로젝트 초기 단계에서 다른 것들보다 HTMX를 시도해 볼 것입니다.","ogImage":{"url":"/assets/img/2024-05-14-Whyhtmx_0.png"},"coverImage":"/assets/img/2024-05-14-Whyhtmx_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-14-Whyhtmx_0.png\" alt=\"이미지\"></p>\n<p>HTMX는 JavaScript 라이브러리로, JavaScript를 작성할 필요 없이 HTML에서 직접 최신 브라우저 기능에 액세스할 수 있게 해줍니다. 이는 HTML 구문을 확장하여 AJAX, 웹소켓 및 서버 전송 이벤트와 같은 기능을 HTML에서 바로 사용할 수 있도록 합니다.</p>\n<p>클릭 버튼을 구현하고 싶다면 아마도 아래의 HTML과 JavaScript 코드를 작성해야 할 것입니다.</p>\n<p><img src=\"/assets/img/2024-05-14-Whyhtmx_1.png\" alt=\"이미지\"></p>\n<p>htmx를 사용하면 간단히 다음을 할 수 있어요:</p>\n<p><img src=\"/assets/img/2024-05-14-Whyhtmx_2.png\" alt=\"Whyhtmx_2.png\"></p>\n<p>정말 간단하고 쉬워요.</p>\n<p>HTMX에서 hx-swap은 서버 요청으로 반환된 콘텐츠가 요소의 현재 콘텐츠를 대체하는 방법을 결정하는 속성입니다.</p>\n<p>\"hx-swap=\"outerHTML\"\"를 설정하면 해당 요소 전체(오픈 및 클로징 태그 포함)가 서버 응답으로 교체됩니다.</p>\n<p>예를 들어, 이 HTMX 코드를 살펴보십시오:</p>\n<pre><code class=\"hljs language-js\">&#x3C;div id=<span class=\"hljs-string\">\"myDiv\"</span> hx-get=<span class=\"hljs-string\">\"/some/url\"</span> hx-swap=<span class=\"hljs-string\">\"outerHTML\"</span>><span class=\"hljs-title class_\">Original</span> <span class=\"hljs-title class_\">Content</span>&#x3C;/div>\n</code></pre>\n<p>“/some/url\"로의 요청이 발생하고 서버가 <code>span</code>New Content<code>/span</code>으로 응답하는 경우, hx-swap=\"outerHTML\"은 서버 응답으로 전체 div 요소를 교체합니다.</p>\n<p>서버에서 응답을 받은 후에, HTML이 다음과 같이 변경됩니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;span><span class=\"hljs-title class_\">New</span> <span class=\"hljs-title class_\">Content</span>&#x3C;/span>\n</code></pre>\n<p>원본의 <code>div</code> 요소와 그 내용(\"Original Content\")은 완전히 새로운 <code>span</code> 요소로 대체되었습니다.</p>\n<h2>리액트, 앵귤러, 뷰와 작별인가요?</h2>\n<p>백엔드 개발자로서, 위의 프레임워크 중 하나를 배우는 것보다 htmx를 배우는 것이 훨씬 가벼운 일입니다.</p>\n<p>다음은 HTMX를 사용할 이유가 있는 몇 가지 이유입니다:</p>\n<p>간편함:</p>\n<p>HTMX는 HTML을 확장하여 JavaScript를 작성할 필요 없이 마크업에 직접 상호 작용성을 추가할 수 있습니다. 이렇게 하면 코드를 이해하고 유지하기 쉬울 수 있습니다.</p>\n<p>점진적 향상:\nHTMX를 사용하면 필요한 곳에 상호작용성을 추가하면서 전체 프론트엔드 코드를 완전히 다시 작성할 필요가 없이 HTML을 점진적으로 향상시킬 수 있습니다.</p>\n<p>서버 측 렌더링:\nHTMX를 사용하면 페이지의 대부분 컨텐츠에 대해 서버 측 렌더링을 활용할 수 있어서 성능과 SEO를 향상시킬 수 있습니다.</p>\n<p>적은 양의 자바스크립트:</p>\n<p>HTMX는 SPA 프레임워크보다 적은 양의 자바스크립트를 필요로 하며, 이는 더 빠른 로드 시간과 적은 복잡성으로 이어질 수 있습니다.</p>\n<p>기존 프로젝트 통합:</p>\n<p>HTMX는 많은 SPA 프레임워크와 달리 완전한 재작성 없이 기존 프로젝트에 쉽게 추가할 수 있습니다.</p>\n<p>하지만 HTMX가 모든 프로젝트에 가장 적합한 선택은 아닐 수 있습니다. React, Angular 및 Vue와 같은 SPA 프레임워크는 더 많은 기능을 제공하며 복잡하고 상태를 가지는 애플리케이션을 구축하기에 더 적합합니다. 최상의 선택은 프로젝트의 구체적인 요구 사항에 따라 다릅니다.</p>\n<p>내 경우에는 프로젝트 초기 단계에서 다른 것들보다 HTMX를 시도해 볼 것입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}