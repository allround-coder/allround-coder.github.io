{"pageProps":{"post":{"title":"React-Native로 투두 앱 만드는 방법","description":"","date":"2024-05-01 18:04","slug":"2024-05-01-BuildingaTodoListAppwithReact-NativeAStep-by-StepGuide","content":"\n\n<img src=\"/assets/img/2024-05-01-BuildingaTodoListAppwithReact-NativeAStep-by-StepGuide_0.png\" />\n\nReact-Native를 이용한 Todo List 애플리케이션 만들기에 대한 포괄적인 안내서에 오신 것을 환영합니다!\n\nReact-Native는 페이스북에서 개발한 강력한 프레임워크로, React의 익숙한 구문을 사용하여 크로스 플랫폼 모바일 애플리케이션을 개발할 수 있습니다. 이 튜토리얼에서는 컴포넌트, 상태 관리, 기본적인 스타일링을 포함한 React-Native의 필수 개념을 다룰 것입니다. 이 가이드의 끝에는 모바일 기기용 완전히 기능하는 Todo List 앱을 만들 준비가 될 것입니다.\n\n# 준비물\n\n<div class=\"content-ad\"></div>\n\n할 일 목록 앱을 만들기 전에 다음 사전 준비 사항이 갖춰져 있는지 확인해주세요:\n\n- JavaScript와 React 개념에 대한 기본 지식\n- 컴퓨터에 Node.js 및 npm이 설치되어 있어야 합니다.\n- Expo CLI가 npm install -g expo-cli 명령을 사용하여 전역으로 설치되어 있어야 합니다.\n- Visual Studio Code와 같은 코드 편집기\n- 테스트를 위해 Expo Go 앱이 설치된 모바일 기기\n\n# 단계 1: 프로젝트 설정하기\n\n첫 번째 작업은 Expo를 사용하여 React-Native 프로젝트를 설정하는 것입니다. 터미널을 열고 다음 명령을 실행해주세요:\n\n<div class=\"content-ad\"></div>\n\n## 1) React-Native 앱 만들기\n\n```js\nexpo init todo-app\n```\n\n## 2) 프로젝트 디렉토리로 이동\n\n```js\ncd todo-app\n```\n\n<div class=\"content-ad\"></div>\n\n## 3) 개발 서버 시작하기\n\n```js\nexpo start\n```\n\n이 명령어를 입력하면 새로운 React-Native 프로젝트인 \"todo-app\"이 생성되고 개발 서버가 시작됩니다.\n\n# 단계 2: 앱 컴포넌트 생성\n\n<div class=\"content-ad\"></div>\n\n이제 우리의 할 일 목록 애플리케이션의 진입점인 App 컴포넌트를 만들어 봅시다.\n\n```js\n// App.js\nimport React from 'react';\nimport TodoList from './components/TodoList';\n\nexport default function App() {\n  return (\n    <TodoList />\n  );\n}\n```\n\n# 단계 3: TodoList 컴포넌트 만들기\n\n이 단계에서는 작업 목록을 관리하고 작업 관련 기능을 처리할 TodoList 컴포넌트를 만들 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// components/TodoList.js\nimport React, { useState } from 'react';\nimport { View, TextInput, Button } from 'react-native';\nimport TodoItem from './TodoItem';\n\nexport default function TodoList() {\n  // State Hooks\n  const [tasks, setTasks] = useState([\n    { id: 1, text: '의사 예약', completed: true },\n    { id: 2, text: '학교 회의', completed: false },\n  ]);\n  const [text, setText] = useState('');\n  // Function to Add Task\n  function addTask() {\n    const newTask = { id: Date.now(), text, completed: false };\n    setTasks([...tasks, newTask]);\n    setText('');\n  }\n  // Function to Delete Task\n  function deleteTask(id) {\n    setTasks(tasks.filter(task => task.id !== id));\n  }\n  // Function to Toggle Task Completion\n  function toggleCompleted(id) {\n    setTasks(tasks.map(task => (task.id === id ? { ...task, completed: !task.completed } : task));\n  }\n  // Render TodoList Component\n  return (\n    <View>\n      {tasks.map(task => (\n        <TodoItem\n          key={task.id}\n          task={task}\n          deleteTask={deleteTask}\n          toggleCompleted={toggleCompleted}\n        />\n      ))}\n      <TextInput\n        value={text}\n        onChangeText={setText}\n        placeholder=\"새 작업\"\n      />\n      <Button title=\"추가\" onPress={addTask} />\n    </View>\n  );\n}\n```\n\n# 설명:\n\n- 필요한 모듈 가져오기: TodoList 컴포넌트에 필요한 모듈을 가져오는 것부터 시작합니다.\n- TodoList 컴포넌트 정의: 우리는 할 일 목록을 관리하는 중심 컴포넌트인 TodoList 함수형 컴포넌트를 선언합니다.\n- State Hooks: useState 훅을 사용하여 두 가지 상태 변수를 초기화합니다. tasks는 작업 목록을 관리하고, text는 새 작업을 추가하는 데 사용되는 입력 텍스트를 처리합니다. tasks 상태는 초기에 두 가지 예제 작업으로 설정됩니다.\n- 작업 추가 함수: addTask 함수는 고유 ID와 입력 텍스트, 완료 상태가 false로 설정된 새 작업 객체를 생성합니다. 그런 다음 새 작업을 추가하고 입력 텍스트를 재설정하여 tasks 상태를 업데이트합니다.\n- 작업 삭제 함수: deleteTask 함수는 주어진 ID를 가진 작업을 tasks 상태에서 제거합니다.\n- 작업 완료 토글 함수: toggleCompleted 함수는 주어진 ID를 가진 작업의 완료 상태를 토글합니다. map 메서드를 사용하여 대상 작업의 완료 상태가 뒤바뀐 새로운 작업 배열을 생성합니다.\n- TodoList 컴포넌트 렌더링: TodoList 컴포넌트는 map 메서드를 사용하여 작업 목록을 렌더링하며, 각 작업을 TodoItem 컴포넌트에 전달합니다. 또한 새 작업을 입력하는 TextInput과 addTask 함수를 트리거하는 Button을 포함합니다.\n\n<div class=\"content-ad\"></div>\n\n이제 TodoList에서 개별 작업을 나타내는 TodoItem 컴포넌트를 생성할 차례입니다.\n\n```js\n// components/TodoItem.js\nimport React from 'react';\nimport { View, Text, CheckBox, Button } from 'react-native';\n\nexport default function TodoItem({ task, deleteTask, toggleCompleted }) {\n  return (\n    <View>\n      <CheckBox\n        value={task.completed}\n        onValueChange={() => toggleCompleted(task.id)}\n      />\n      <Text style={{ textDecorationLine: task.completed ? 'line-through' : 'none' }}>\n        {task.text}\n      </Text>\n      <Button title=\"X\" onPress={() => deleteTask(task.id)} />\n    </View>\n  );\n}\n```\n\n# 설명:\n\n- CheckBox: CheckBox 컴포넌트는 작업의 완료 상태를 나타냅니다. 그 값은 작업의 완료 상태에 따라 결정되며, onValueChange는 체크박스와 상호작용할 때 toggleCompleted 함수를 호출합니다.\n- 스타일이 적용된 Text: Text 컴포넌트는 작업 텍스트를 표시합니다. 작업이 완료되었을 경우 라인 스타일을 줄 긋게 만드는 스타일이 적용됩니다.\n- 삭제 버튼: Button 컴포넌트는 \"X\" 레이블이 있는 삭제 버튼을 제공합니다. 버튼을 누르면 deleteTask 함수가 호출됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 단계 5: 스타일링\n\n할 일 목록을 시각적으로 더 매력적으로 만들기 위해, 기본적인 스타일을 적용해 보겠습니다. 프로젝트에서 styles.css라는 파일을 생성하고 아래 스타일을 추가해주세요:\n\n```js\n/* styles.css */\n.todo-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center; /* 아이템을 수직으로 중앙 정렬합니다 */\n  margin-bottom: 8px;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n.todo-item-text {\n  flex: 1; /* 텍스트가 남은 공간을 차지할 수 있도록 설정합니다 */\n  margin-right: 8px;\n  color: #333;\n}\n.completed {\n  text-decoration: line-through;\n  color: #888;\n}\n.delete-button {\n  background-color: #ff6347; /* 토마토 색 */\n  color: #fff;\n  padding: 4px 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n```\n\n이제, TodoItem.js 파일에서 styles.css를 import하여 로컬에서 스타일을 적용해보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// components/TodoItem.js\nimport React from 'react';\nimport { View, Text, CheckBox, TouchableOpacity } from 'react-native';\nimport styles from './styles'; // 스타일 가져오기\n\nexport default function TodoItem({ task, deleteTask, toggleCompleted }) {\n  return (\n    <View style={styles.todo-item}>\n      <CheckBox\n        value={task.completed}\n        onValueChange={() => toggleCompleted(task.id)}\n      />\n      <Text style={[styles.todo-item-text, task.completed && styles.completed]}>\n        {task.text}\n      </Text>\n      <TouchableOpacity\n        style={styles.delete-button}\n        onPress={() => deleteTask(task.id)}\n      >\n        <Text style={{ color: '#fff' }}>삭제</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n```\n\n# 설명:\n\n- .todo-item : 각 할 일 항목에 플렉스 레이아웃을 적용하고 항목을 가로로 정렬하여 간격을 두고 깔끔한 외관을 위해 패딩, 테두리 및 테두리 반경을 추가합니다.\n- .todo-item-text : 텍스트가 나머지 공간을 차지하도록 하며 오른쪽 여백을 추가하고 텍스트 색상을 변경합니다.\n- .completed : 완료된 작업에 대해 가로 줄 꾸미기 및 텍스트 색상 변경을 추가합니다.\n- .delete-button : 빨간색 배경, 흰색 텍스트, 패딩 및 테두리 반경으로 삭제 버튼을 스타일링합니다. 또한 상호 작용을 위해 커서 포인터를 제공합니다.\n\n여기까지 완료되었습니다! React-Native를 사용하여 직접 Todo List 앱을 만들었다니 축하드립니다. 이 안내서를 통해 React-Native 컴포넌트, 상태 관리, 훅, 프롭스, 이벤트 처리를 이해하고 스타일링을 향상시켰습니다. 이제 당신이 이룬 것을 되돌아보고 다음 단계를 생각해봅시다.```\n\n<div class=\"content-ad\"></div>\n\n# 마지막으로\n\n할 일 목록 앱을 만드는 것은 단지 React-Native 여행의 일부에 불과해요. 닦은 토대 위에, 어디로 나아갈지 고민할 때입니다. 할 일 편집, 드래그 앤 드롭으로 재정렬, 또는 백엔드 통합에 대해 고려해보세요. 이러한 기능을 추가하여 앱을 더욱 발전시켜보세요.\n\n그리고 여기서 멈추는 것은 왜 그런가요? 도전을 받아들이고, 실시간 채팅과 소셜 기능을 탐험하여 앱을 더욱 상호작용적으로 만들어 보세요. Amity의 채팅 및 소셜 SDK가 제공하는 것을 한 번 살펴보세요. 다음 큰 프로젝트에 빠진 퍼즐 조각이 될 지도 모릅니다. 또한, 채팅, 소셜 및 라이브 스트리밍에 대한 완성된 솔루션이 비즈니스 목표와 일치한다면, 주저하지 말고 Amity에 연락하여 일을 가속화하세요.\n\n코딩과 학습을 계속하면서, 코드 한 줄이 한 걸음을 의미한다는 것을 기억하세요. 따라서 계속 전진하고 새로운 지평을 탐험하며, React-Native 개발의 흥미로운 세계를 받아들이세요. 당신의 코딩 여행에 건배합니다!","ogImage":{"url":"/assets/img/2024-05-01-BuildingaTodoListAppwithReact-NativeAStep-by-StepGuide_0.png"},"coverImage":"/assets/img/2024-05-01-BuildingaTodoListAppwithReact-NativeAStep-by-StepGuide_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>React-Native를 이용한 Todo List 애플리케이션 만들기에 대한 포괄적인 안내서에 오신 것을 환영합니다!</p>\n<p>React-Native는 페이스북에서 개발한 강력한 프레임워크로, React의 익숙한 구문을 사용하여 크로스 플랫폼 모바일 애플리케이션을 개발할 수 있습니다. 이 튜토리얼에서는 컴포넌트, 상태 관리, 기본적인 스타일링을 포함한 React-Native의 필수 개념을 다룰 것입니다. 이 가이드의 끝에는 모바일 기기용 완전히 기능하는 Todo List 앱을 만들 준비가 될 것입니다.</p>\n<h1>준비물</h1>\n<p>할 일 목록 앱을 만들기 전에 다음 사전 준비 사항이 갖춰져 있는지 확인해주세요:</p>\n<ul>\n<li>JavaScript와 React 개념에 대한 기본 지식</li>\n<li>컴퓨터에 Node.js 및 npm이 설치되어 있어야 합니다.</li>\n<li>Expo CLI가 npm install -g expo-cli 명령을 사용하여 전역으로 설치되어 있어야 합니다.</li>\n<li>Visual Studio Code와 같은 코드 편집기</li>\n<li>테스트를 위해 Expo Go 앱이 설치된 모바일 기기</li>\n</ul>\n<h1>단계 1: 프로젝트 설정하기</h1>\n<p>첫 번째 작업은 Expo를 사용하여 React-Native 프로젝트를 설정하는 것입니다. 터미널을 열고 다음 명령을 실행해주세요:</p>\n<h2>1) React-Native 앱 만들기</h2>\n<pre><code class=\"hljs language-js\">expo init todo-app\n</code></pre>\n<h2>2) 프로젝트 디렉토리로 이동</h2>\n<pre><code class=\"hljs language-js\">cd todo-app\n</code></pre>\n<h2>3) 개발 서버 시작하기</h2>\n<pre><code class=\"hljs language-js\">expo start\n</code></pre>\n<p>이 명령어를 입력하면 새로운 React-Native 프로젝트인 \"todo-app\"이 생성되고 개발 서버가 시작됩니다.</p>\n<h1>단계 2: 앱 컴포넌트 생성</h1>\n<p>이제 우리의 할 일 목록 애플리케이션의 진입점인 App 컴포넌트를 만들어 봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// App.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">TodoList</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/TodoList'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TodoList</span> /></span></span>\n  );\n}\n</code></pre>\n<h1>단계 3: TodoList 컴포넌트 만들기</h1>\n<p>이 단계에서는 작업 목록을 관리하고 작업 관련 기능을 처리할 TodoList 컴포넌트를 만들 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// components/TodoList.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">View</span>, <span class=\"hljs-title class_\">TextInput</span>, <span class=\"hljs-title class_\">Button</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">TodoItem</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./TodoItem'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TodoList</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// State Hooks</span>\n  <span class=\"hljs-keyword\">const</span> [tasks, setTasks] = <span class=\"hljs-title function_\">useState</span>([\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'의사 예약'</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'학교 회의'</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span> },\n  ]);\n  <span class=\"hljs-keyword\">const</span> [text, setText] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n  <span class=\"hljs-comment\">// Function to Add Task</span>\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addTask</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> newTask = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>(), text, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span> };\n    <span class=\"hljs-title function_\">setTasks</span>([...tasks, newTask]);\n    <span class=\"hljs-title function_\">setText</span>(<span class=\"hljs-string\">''</span>);\n  }\n  <span class=\"hljs-comment\">// Function to Delete Task</span>\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">deleteTask</span>(<span class=\"hljs-params\">id</span>) {\n    <span class=\"hljs-title function_\">setTasks</span>(tasks.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">task</span> =></span> task.<span class=\"hljs-property\">id</span> !== id));\n  }\n  <span class=\"hljs-comment\">// Function to Toggle Task Completion</span>\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">toggleCompleted</span>(<span class=\"hljs-params\">id</span>) {\n    <span class=\"hljs-title function_\">setTasks</span>(tasks.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">task</span> =></span> (task.<span class=\"hljs-property\">id</span> === id ? { ...task, <span class=\"hljs-attr\">completed</span>: !task.<span class=\"hljs-property\">completed</span> } : task));\n  }\n  <span class=\"hljs-comment\">// Render TodoList Component</span>\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">View</span>></span>\n      {tasks.map(task => (\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TodoItem</span>\n          <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{task.id}</span>\n          <span class=\"hljs-attr\">task</span>=<span class=\"hljs-string\">{task}</span>\n          <span class=\"hljs-attr\">deleteTask</span>=<span class=\"hljs-string\">{deleteTask}</span>\n          <span class=\"hljs-attr\">toggleCompleted</span>=<span class=\"hljs-string\">{toggleCompleted}</span>\n        /></span>\n      ))}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TextInput</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{text}</span>\n        <span class=\"hljs-attr\">onChangeText</span>=<span class=\"hljs-string\">{setText}</span>\n        <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"새 작업\"</span>\n      /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"추가\"</span> <span class=\"hljs-attr\">onPress</span>=<span class=\"hljs-string\">{addTask}</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">View</span>></span></span>\n  );\n}\n</code></pre>\n<h1>설명:</h1>\n<ul>\n<li>필요한 모듈 가져오기: TodoList 컴포넌트에 필요한 모듈을 가져오는 것부터 시작합니다.</li>\n<li>TodoList 컴포넌트 정의: 우리는 할 일 목록을 관리하는 중심 컴포넌트인 TodoList 함수형 컴포넌트를 선언합니다.</li>\n<li>State Hooks: useState 훅을 사용하여 두 가지 상태 변수를 초기화합니다. tasks는 작업 목록을 관리하고, text는 새 작업을 추가하는 데 사용되는 입력 텍스트를 처리합니다. tasks 상태는 초기에 두 가지 예제 작업으로 설정됩니다.</li>\n<li>작업 추가 함수: addTask 함수는 고유 ID와 입력 텍스트, 완료 상태가 false로 설정된 새 작업 객체를 생성합니다. 그런 다음 새 작업을 추가하고 입력 텍스트를 재설정하여 tasks 상태를 업데이트합니다.</li>\n<li>작업 삭제 함수: deleteTask 함수는 주어진 ID를 가진 작업을 tasks 상태에서 제거합니다.</li>\n<li>작업 완료 토글 함수: toggleCompleted 함수는 주어진 ID를 가진 작업의 완료 상태를 토글합니다. map 메서드를 사용하여 대상 작업의 완료 상태가 뒤바뀐 새로운 작업 배열을 생성합니다.</li>\n<li>TodoList 컴포넌트 렌더링: TodoList 컴포넌트는 map 메서드를 사용하여 작업 목록을 렌더링하며, 각 작업을 TodoItem 컴포넌트에 전달합니다. 또한 새 작업을 입력하는 TextInput과 addTask 함수를 트리거하는 Button을 포함합니다.</li>\n</ul>\n<p>이제 TodoList에서 개별 작업을 나타내는 TodoItem 컴포넌트를 생성할 차례입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// components/TodoItem.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">View</span>, <span class=\"hljs-title class_\">Text</span>, <span class=\"hljs-title class_\">CheckBox</span>, <span class=\"hljs-title class_\">Button</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TodoItem</span>(<span class=\"hljs-params\">{ task, deleteTask, toggleCompleted }</span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">View</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CheckBox</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{task.completed}</span>\n        <span class=\"hljs-attr\">onValueChange</span>=<span class=\"hljs-string\">{()</span> =></span> toggleCompleted(task.id)}\n      />\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Text</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">textDecorationLine:</span> <span class=\"hljs-attr\">task.completed</span> ? '<span class=\"hljs-attr\">line-through</span>' <span class=\"hljs-attr\">:</span> '<span class=\"hljs-attr\">none</span>' }}></span>\n        {task.text}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Text</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"X\"</span> <span class=\"hljs-attr\">onPress</span>=<span class=\"hljs-string\">{()</span> =></span> deleteTask(task.id)} />\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">View</span>></span></span>\n  );\n}\n</code></pre>\n<h1>설명:</h1>\n<ul>\n<li>CheckBox: CheckBox 컴포넌트는 작업의 완료 상태를 나타냅니다. 그 값은 작업의 완료 상태에 따라 결정되며, onValueChange는 체크박스와 상호작용할 때 toggleCompleted 함수를 호출합니다.</li>\n<li>스타일이 적용된 Text: Text 컴포넌트는 작업 텍스트를 표시합니다. 작업이 완료되었을 경우 라인 스타일을 줄 긋게 만드는 스타일이 적용됩니다.</li>\n<li>삭제 버튼: Button 컴포넌트는 \"X\" 레이블이 있는 삭제 버튼을 제공합니다. 버튼을 누르면 deleteTask 함수가 호출됩니다.</li>\n</ul>\n<h1>단계 5: 스타일링</h1>\n<p>할 일 목록을 시각적으로 더 매력적으로 만들기 위해, 기본적인 스타일을 적용해 보겠습니다. 프로젝트에서 styles.css라는 파일을 생성하고 아래 스타일을 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* styles.css */</span>\n.<span class=\"hljs-property\">todo</span>-item {\n  <span class=\"hljs-attr\">display</span>: flex;\n  justify-<span class=\"hljs-attr\">content</span>: space-between;\n  align-<span class=\"hljs-attr\">items</span>: center; <span class=\"hljs-comment\">/* 아이템을 수직으로 중앙 정렬합니다 */</span>\n  margin-<span class=\"hljs-attr\">bottom</span>: 8px;\n  <span class=\"hljs-attr\">padding</span>: 8px;\n  <span class=\"hljs-attr\">border</span>: 1px solid #ddd;\n  border-<span class=\"hljs-attr\">radius</span>: 4px;\n}\n.<span class=\"hljs-property\">todo</span>-item-text {\n  <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* 텍스트가 남은 공간을 차지할 수 있도록 설정합니다 */</span>\n  margin-<span class=\"hljs-attr\">right</span>: 8px;\n  <span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">333</span>;\n}\n.<span class=\"hljs-property\">completed</span> {\n  text-<span class=\"hljs-attr\">decoration</span>: line-through;\n  <span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">888</span>;\n}\n.<span class=\"hljs-property\">delete</span>-button {\n  background-<span class=\"hljs-attr\">color</span>: #ff6347; <span class=\"hljs-comment\">/* 토마토 색 */</span>\n  <span class=\"hljs-attr\">color</span>: #fff;\n  <span class=\"hljs-attr\">padding</span>: 4px 8px;\n  <span class=\"hljs-attr\">border</span>: none;\n  border-<span class=\"hljs-attr\">radius</span>: 4px;\n  <span class=\"hljs-attr\">cursor</span>: pointer;\n}\n</code></pre>\n<p>이제, TodoItem.js 파일에서 styles.css를 import하여 로컬에서 스타일을 적용해보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// components/TodoItem.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">View</span>, <span class=\"hljs-title class_\">Text</span>, <span class=\"hljs-title class_\">CheckBox</span>, <span class=\"hljs-title class_\">TouchableOpacity</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n<span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./styles'</span>; <span class=\"hljs-comment\">// 스타일 가져오기</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TodoItem</span>(<span class=\"hljs-params\">{ task, deleteTask, toggleCompleted }</span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">View</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.todo-item}</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CheckBox</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{task.completed}</span>\n        <span class=\"hljs-attr\">onValueChange</span>=<span class=\"hljs-string\">{()</span> =></span> toggleCompleted(task.id)}\n      />\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Text</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{[styles.todo-item-text,</span> <span class=\"hljs-attr\">task.completed</span> &#x26;&#x26; <span class=\"hljs-attr\">styles.completed</span>]}></span>\n        {task.text}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Text</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TouchableOpacity</span>\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.delete-button}</span>\n        <span class=\"hljs-attr\">onPress</span>=<span class=\"hljs-string\">{()</span> =></span> deleteTask(task.id)}\n      >\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Text</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> '#<span class=\"hljs-attr\">fff</span>' }}></span>삭제<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Text</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">TouchableOpacity</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">View</span>></span></span>\n  );\n}\n</code></pre>\n<h1>설명:</h1>\n<ul>\n<li>.todo-item : 각 할 일 항목에 플렉스 레이아웃을 적용하고 항목을 가로로 정렬하여 간격을 두고 깔끔한 외관을 위해 패딩, 테두리 및 테두리 반경을 추가합니다.</li>\n<li>.todo-item-text : 텍스트가 나머지 공간을 차지하도록 하며 오른쪽 여백을 추가하고 텍스트 색상을 변경합니다.</li>\n<li>.completed : 완료된 작업에 대해 가로 줄 꾸미기 및 텍스트 색상 변경을 추가합니다.</li>\n<li>.delete-button : 빨간색 배경, 흰색 텍스트, 패딩 및 테두리 반경으로 삭제 버튼을 스타일링합니다. 또한 상호 작용을 위해 커서 포인터를 제공합니다.</li>\n</ul>\n<p>여기까지 완료되었습니다! React-Native를 사용하여 직접 Todo List 앱을 만들었다니 축하드립니다. 이 안내서를 통해 React-Native 컴포넌트, 상태 관리, 훅, 프롭스, 이벤트 처리를 이해하고 스타일링을 향상시켰습니다. 이제 당신이 이룬 것을 되돌아보고 다음 단계를 생각해봅시다.```</p>\n<h1>마지막으로</h1>\n<p>할 일 목록 앱을 만드는 것은 단지 React-Native 여행의 일부에 불과해요. 닦은 토대 위에, 어디로 나아갈지 고민할 때입니다. 할 일 편집, 드래그 앤 드롭으로 재정렬, 또는 백엔드 통합에 대해 고려해보세요. 이러한 기능을 추가하여 앱을 더욱 발전시켜보세요.</p>\n<p>그리고 여기서 멈추는 것은 왜 그런가요? 도전을 받아들이고, 실시간 채팅과 소셜 기능을 탐험하여 앱을 더욱 상호작용적으로 만들어 보세요. Amity의 채팅 및 소셜 SDK가 제공하는 것을 한 번 살펴보세요. 다음 큰 프로젝트에 빠진 퍼즐 조각이 될 지도 모릅니다. 또한, 채팅, 소셜 및 라이브 스트리밍에 대한 완성된 솔루션이 비즈니스 목표와 일치한다면, 주저하지 말고 Amity에 연락하여 일을 가속화하세요.</p>\n<p>코딩과 학습을 계속하면서, 코드 한 줄이 한 걸음을 의미한다는 것을 기억하세요. 따라서 계속 전진하고 새로운 지평을 탐험하며, React-Native 개발의 흥미로운 세계를 받아들이세요. 당신의 코딩 여행에 건배합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}