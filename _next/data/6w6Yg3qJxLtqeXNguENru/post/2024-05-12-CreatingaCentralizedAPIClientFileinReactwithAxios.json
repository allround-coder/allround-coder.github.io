{"pageProps":{"post":{"title":"React에서 Axios를 사용하여 중앙 집중식 API 클라이언트 파일 만들기","description":"","date":"2024-05-12 21:05","slug":"2024-05-12-CreatingaCentralizedAPIClientFileinReactwithAxios","content":"\n\n리액트 애플리케이션을 구축할 때 API와 상호 작용하는 경우, API 호출을 처리하는 깔끔하고 조직화된 방식을 유지하는 것이 중요합니다. 이를 달성하는 효과적인 방법 중 하나는 중앙 집중식 API 클라이언트 파일을 생성하는 것입니다. 이 튜토리얼에서는 Axios를 사용하여 이러한 파일을 구조화하는 방법을 살펴보겠습니다.\n\n![이미지](/assets/img/2024-05-12-CreatingaCentralizedAPIClientFileinReactwithAxios_0.png)\n\n# API 호출을 중앙 집중화하는 이유\n\nAPI 호출을 중앙 집중화하는 것에는 여러 가지 이점이 있습니다:\n\n\n\n- 모듈성: API 로직을 하나의 파일로 분리함으로써 응용 프로그램 전반에 걸쳐 모듈성과 재사용성을 촉진합니다.\n- 조직화: 모든 API 관련 코드가 하나의 파일에 포함되어 있어 관리하고 유지하는 것이 더 쉬워집니다.\n- 일관성: 일반적인 설정 및 오류 처리 전략을 한 곳에 정의함으로써 응용 프로그램 전체에서 일관성을 보장할 수 있습니다.\n\n# Axios 설정하기\n\n먼저 프로젝트에 Axios가 설치되어 있는지 확인하세요. npm이나 yarn을 통해 설치할 수 있습니다:\n\n```js\nnpm install axios\n# 또는\nyarn add axios\n```\n\n\n\n# API 클라이언트 파일 만들기\n\nAPI 호출을 처리할 apiClient.js 파일을 생성해 봅시다:\n\n```js\n// apiClient.js\n\nimport axios from 'axios';\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || 'https://api.example.com';\n\nconst apiClient = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    // 여기에 인증 토큰과 같은 다른 헤더를 추가할 수 있습니다\n  },\n});\n\n// 공통 API 메서드 정의\nconst _get = (url, config = {}) => {\n  return apiClient.get(url, config);\n};\n\nconst _delete = (url, config = {}) => {\n  return apiClient.delete(url, config);\n};\n\nconst _put = (url, data = {}, config = {}) => {\n  return apiClient.put(url, data, config);\n};\n\nconst _post = (url, data = {}, config = {}) => {\n  return apiClient.post(url, data, config);\n};\n\n// API 메서드 내보내기\nexport { _get, _delete, _put, _post };t api;\n```\n\n위 파일에서:\n\n\n\n- Axios 인스턴스를 생성하여 기본 URL과 기본 헤더를 설정합니다.\n- 각 엔드포인트에 해당하는 다양한 API 기능을 정의합니다.\n\n환경 변수 설정: 먼저, 각 환경에 맞게 환경 변수를 설정해야 합니다. 일반적으로 각 환경에 대한 .env 파일을 생성하여 이 작업을 수행할 수 있습니다. 예를 들어:\n\n- .env.development: 개발 환경을 위한 변수를 포함합니다.\n- .env.qa: QA 환경을 위한 변수를 포함합니다.\n- .env.staging: 스테이징 환경을 위한 변수를 포함합니다.\n- .env.production: 프로덕션 환경을 위한 변수를 포함합니다.\n\n각 .env 파일 내에서 기본 URL을 정의하세요.\n\n\n\nREACT_APP_BASE_URL=https://api.example.com\n\n- 다른 환경에 접속하기: 환경에 따라 (예: 개발, QA, 스테이징) React는 자동으로 해당 .env 파일을로드하고 BASE_URL이 그에 맞게 설정됩니다.\n\n예를 들어, 개발 중일 때 React는 .env.development를로드하고 BASE_URL이 해당 파일에 지정된 값으로 설정됩니다.\n\n마찬가지로 다른 환경 (예: QA, 스테이징)에서도 React는 해당 .env 파일을로드합니다.\n\n\n\n2. React 컴포넌트에서의 사용법: 이전 예시에서 보았던 것처럼 React 컴포넌트에서 api 객체를 계속 사용할 수 있습니다. 기본 URL은 환경에 따라 동적으로 결정됩니다.\n\n이 설정을 사용하면 다른 환경에 대해 쉽게 다른 기본 URL을 관리할 수 있어 React 애플리케이션이 실행 중인 환경에 따라 적절한 백엔드와 통신할 수 있도록 보장합니다.\n\n# 컴포넌트에서 API 클라이언트 사용하기\n\n이제 React 컴포넌트에서 이 API 클라이언트를 사용하는 방법을 살펴보겠습니다:\n\n\n\n```js\nimport React, { useState, useEffect } from 'react';\nimport { _get, _post, _put, _delete } from './apiClient'; // 필요에 따라 경로를 조정하세요\n\nfunction ExampleComponent() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // 컴포넌트가 마운트될 때 데이터 가져오기\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const response = await _get('/data', { headers: { Authorization: 'Bearer 여기에 토큰 입력' } });\n      setData(response.data);\n    } catch (error) {\n      console.error('데이터를 가져오는 중 오류 발생:', error);\n      // 에러 처리\n    }\n  };\n\n  const addData = async () => {\n    try {\n      const newData = { name: '새 데이터' };\n      await _post('/data', newData);\n      fetchData(); // 추가 후 데이터 새로고침\n    } catch (error) {\n      console.error('데이터 추가 중 오류 발생:', error);\n      // 에러 처리\n    }\n  };\n\n  const updateData = async (id, updatedData) => {\n    try {\n      await _put(`/data/${id}`, updatedData);\n      fetchData(); // 업데이트 후 데이터 새로고침\n    } catch (error) {\n      console.error('데이터 업데이트 중 오류 발생:', error);\n      // 에러 처리\n    }\n  };\n\n  const deleteData = async (id) => {\n    try {\n      await _delete(`/data/${id}`);\n      fetchData(); // 삭제 후 데이터 새로고침\n    } catch (error) {\n      console.error('데이터 삭제 중 오류 발생:', error);\n      // 에러 처리\n    }\n  };\n\n  return (\n    <div>\n      <h1>예시 컴포넌트</h1>\n      <button onClick={addData}>데이터 추가</button>\n      <ul>\n        {data.map(item => (\n          <li key={item.id}>\n            {item.name}\n            <button onClick={() => updateData(item.id, { name: '업데이트된 아이템' })}>업데이트</button>\n            <button onClick={() => deleteData(item.id)}>삭제</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ExampleComponent;\n```\n\nAxios에서 config 매개변수를 사용하면 HTTP 요청에 대한 추가 구성을 전달할 수 있습니다. 일반적으로 사용되는 구성에는 헤더, 쿼리 매개변수, 요청 시간 초과, 인증 토큰 등이 있습니다.\n\n참고: axios.create()로 Axios 인스턴스를 만들 때 baseURL 옵션을 BASE_URL로 설정합니다. 이렇게 하면 이 Axios 인스턴스로 작성된 모든 요청에 기본 URL이 URL에 접두사로 붙습니다.\n\n예를 들어, ExampleComponent에서 _get(`/data`)를 호출하면 Axios는 `https://api.example.com/data`로 GET 요청을 보냅니다.```\n\n\n\n# 결론\n\nAxios를 사용하여 React 애플리케이션에서 API 호출을 중앙화하는 것은 API 로직을 관리하기 위한 깔끔하고 조직된 방법을 제공합니다. 중앙 집중화된 API 클라이언트 파일을 만들면 코드베이스에서 모듈화, 조직화 및 일관성을 달성할 수 있습니다. 이 방법을 통해 유지 보수가 간단해지며 애플리케이션 전체에서 코드 재사용을 장려합니다.\n\n오늘부터 API 호출을 조직화하고 React 프로젝트에 가져다 주는 혜택을 경험해보세요!","ogImage":{"url":"/assets/img/2024-05-12-CreatingaCentralizedAPIClientFileinReactwithAxios_0.png"},"coverImage":"/assets/img/2024-05-12-CreatingaCentralizedAPIClientFileinReactwithAxios_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>리액트 애플리케이션을 구축할 때 API와 상호 작용하는 경우, API 호출을 처리하는 깔끔하고 조직화된 방식을 유지하는 것이 중요합니다. 이를 달성하는 효과적인 방법 중 하나는 중앙 집중식 API 클라이언트 파일을 생성하는 것입니다. 이 튜토리얼에서는 Axios를 사용하여 이러한 파일을 구조화하는 방법을 살펴보겠습니다.</p>\n<p><img src=\"/assets/img/2024-05-12-CreatingaCentralizedAPIClientFileinReactwithAxios_0.png\" alt=\"이미지\"></p>\n<h1>API 호출을 중앙 집중화하는 이유</h1>\n<p>API 호출을 중앙 집중화하는 것에는 여러 가지 이점이 있습니다:</p>\n<ul>\n<li>모듈성: API 로직을 하나의 파일로 분리함으로써 응용 프로그램 전반에 걸쳐 모듈성과 재사용성을 촉진합니다.</li>\n<li>조직화: 모든 API 관련 코드가 하나의 파일에 포함되어 있어 관리하고 유지하는 것이 더 쉬워집니다.</li>\n<li>일관성: 일반적인 설정 및 오류 처리 전략을 한 곳에 정의함으로써 응용 프로그램 전체에서 일관성을 보장할 수 있습니다.</li>\n</ul>\n<h1>Axios 설정하기</h1>\n<p>먼저 프로젝트에 Axios가 설치되어 있는지 확인하세요. npm이나 yarn을 통해 설치할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">npm install axios\n# 또는\nyarn add axios\n</code></pre>\n<h1>API 클라이언트 파일 만들기</h1>\n<p>API 호출을 처리할 apiClient.js 파일을 생성해 봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// apiClient.js</span>\n\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">BASE_URL</span> = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">REACT_APP_BASE_URL</span> || <span class=\"hljs-string\">'https://api.example.com'</span>;\n\n<span class=\"hljs-keyword\">const</span> apiClient = axios.<span class=\"hljs-title function_\">create</span>({\n  <span class=\"hljs-attr\">baseURL</span>: <span class=\"hljs-variable constant_\">BASE_URL</span>,\n  <span class=\"hljs-attr\">headers</span>: {\n    <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>,\n    <span class=\"hljs-comment\">// 여기에 인증 토큰과 같은 다른 헤더를 추가할 수 있습니다</span>\n  },\n});\n\n<span class=\"hljs-comment\">// 공통 API 메서드 정의</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">_get</span> = (<span class=\"hljs-params\">url, config = {}</span>) => {\n  <span class=\"hljs-keyword\">return</span> apiClient.<span class=\"hljs-title function_\">get</span>(url, config);\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">_delete</span> = (<span class=\"hljs-params\">url, config = {}</span>) => {\n  <span class=\"hljs-keyword\">return</span> apiClient.<span class=\"hljs-title function_\">delete</span>(url, config);\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">_put</span> = (<span class=\"hljs-params\">url, data = {}, config = {}</span>) => {\n  <span class=\"hljs-keyword\">return</span> apiClient.<span class=\"hljs-title function_\">put</span>(url, data, config);\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">_post</span> = (<span class=\"hljs-params\">url, data = {}, config = {}</span>) => {\n  <span class=\"hljs-keyword\">return</span> apiClient.<span class=\"hljs-title function_\">post</span>(url, data, config);\n};\n\n<span class=\"hljs-comment\">// API 메서드 내보내기</span>\n<span class=\"hljs-keyword\">export</span> { _get, _delete, _put, _post };t api;\n</code></pre>\n<p>위 파일에서:</p>\n<ul>\n<li>Axios 인스턴스를 생성하여 기본 URL과 기본 헤더를 설정합니다.</li>\n<li>각 엔드포인트에 해당하는 다양한 API 기능을 정의합니다.</li>\n</ul>\n<p>환경 변수 설정: 먼저, 각 환경에 맞게 환경 변수를 설정해야 합니다. 일반적으로 각 환경에 대한 .env 파일을 생성하여 이 작업을 수행할 수 있습니다. 예를 들어:</p>\n<ul>\n<li>.env.development: 개발 환경을 위한 변수를 포함합니다.</li>\n<li>.env.qa: QA 환경을 위한 변수를 포함합니다.</li>\n<li>.env.staging: 스테이징 환경을 위한 변수를 포함합니다.</li>\n<li>.env.production: 프로덕션 환경을 위한 변수를 포함합니다.</li>\n</ul>\n<p>각 .env 파일 내에서 기본 URL을 정의하세요.</p>\n<p>REACT_APP_BASE_URL=<a href=\"https://api.example.com\" rel=\"nofollow\" target=\"_blank\">https://api.example.com</a></p>\n<ul>\n<li>다른 환경에 접속하기: 환경에 따라 (예: 개발, QA, 스테이징) React는 자동으로 해당 .env 파일을로드하고 BASE_URL이 그에 맞게 설정됩니다.</li>\n</ul>\n<p>예를 들어, 개발 중일 때 React는 .env.development를로드하고 BASE_URL이 해당 파일에 지정된 값으로 설정됩니다.</p>\n<p>마찬가지로 다른 환경 (예: QA, 스테이징)에서도 React는 해당 .env 파일을로드합니다.</p>\n<ol start=\"2\">\n<li>React 컴포넌트에서의 사용법: 이전 예시에서 보았던 것처럼 React 컴포넌트에서 api 객체를 계속 사용할 수 있습니다. 기본 URL은 환경에 따라 동적으로 결정됩니다.</li>\n</ol>\n<p>이 설정을 사용하면 다른 환경에 대해 쉽게 다른 기본 URL을 관리할 수 있어 React 애플리케이션이 실행 중인 환경에 따라 적절한 백엔드와 통신할 수 있도록 보장합니다.</p>\n<h1>컴포넌트에서 API 클라이언트 사용하기</h1>\n<p>이제 React 컴포넌트에서 이 API 클라이언트를 사용하는 방법을 살펴보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { _get, _post, _put, _delete } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./apiClient'</span>; <span class=\"hljs-comment\">// 필요에 따라 경로를 조정하세요</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ExampleComponent</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>([]);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// 컴포넌트가 마운트될 때 데이터 가져오기</span>\n    <span class=\"hljs-title function_\">fetchData</span>();\n  }, []);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fetchData</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">_get</span>(<span class=\"hljs-string\">'/data'</span>, { <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-title class_\">Authorization</span>: <span class=\"hljs-string\">'Bearer 여기에 토큰 입력'</span> } });\n      <span class=\"hljs-title function_\">setData</span>(response.<span class=\"hljs-property\">data</span>);\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'데이터를 가져오는 중 오류 발생:'</span>, error);\n      <span class=\"hljs-comment\">// 에러 처리</span>\n    }\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">addData</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> newData = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'새 데이터'</span> };\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">_post</span>(<span class=\"hljs-string\">'/data'</span>, newData);\n      <span class=\"hljs-title function_\">fetchData</span>(); <span class=\"hljs-comment\">// 추가 후 데이터 새로고침</span>\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'데이터 추가 중 오류 발생:'</span>, error);\n      <span class=\"hljs-comment\">// 에러 처리</span>\n    }\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">updateData</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">id, updatedData</span>) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">_put</span>(<span class=\"hljs-string\">`/data/<span class=\"hljs-subst\">${id}</span>`</span>, updatedData);\n      <span class=\"hljs-title function_\">fetchData</span>(); <span class=\"hljs-comment\">// 업데이트 후 데이터 새로고침</span>\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'데이터 업데이트 중 오류 발생:'</span>, error);\n      <span class=\"hljs-comment\">// 에러 처리</span>\n    }\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">deleteData</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">id</span>) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">_delete</span>(<span class=\"hljs-string\">`/data/<span class=\"hljs-subst\">${id}</span>`</span>);\n      <span class=\"hljs-title function_\">fetchData</span>(); <span class=\"hljs-comment\">// 삭제 후 데이터 새로고침</span>\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'데이터 삭제 중 오류 발생:'</span>, error);\n      <span class=\"hljs-comment\">// 에러 처리</span>\n    }\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>예시 컴포넌트<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{addData}</span>></span>데이터 추가<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        {data.map(item => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item.id}</span>></span>\n            {item.name}\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> updateData(item.id, { name: '업데이트된 아이템' })}>업데이트<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> deleteData(item.id)}>삭제<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ExampleComponent</span>;\n</code></pre>\n<p>Axios에서 config 매개변수를 사용하면 HTTP 요청에 대한 추가 구성을 전달할 수 있습니다. 일반적으로 사용되는 구성에는 헤더, 쿼리 매개변수, 요청 시간 초과, 인증 토큰 등이 있습니다.</p>\n<p>참고: axios.create()로 Axios 인스턴스를 만들 때 baseURL 옵션을 BASE_URL로 설정합니다. 이렇게 하면 이 Axios 인스턴스로 작성된 모든 요청에 기본 URL이 URL에 접두사로 붙습니다.</p>\n<p>예를 들어, ExampleComponent에서 _get(<code>/data</code>)를 호출하면 Axios는 <code>https://api.example.com/data</code>로 GET 요청을 보냅니다.```</p>\n<h1>결론</h1>\n<p>Axios를 사용하여 React 애플리케이션에서 API 호출을 중앙화하는 것은 API 로직을 관리하기 위한 깔끔하고 조직된 방법을 제공합니다. 중앙 집중화된 API 클라이언트 파일을 만들면 코드베이스에서 모듈화, 조직화 및 일관성을 달성할 수 있습니다. 이 방법을 통해 유지 보수가 간단해지며 애플리케이션 전체에서 코드 재사용을 장려합니다.</p>\n<p>오늘부터 API 호출을 조직화하고 React 프로젝트에 가져다 주는 혜택을 경험해보세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}