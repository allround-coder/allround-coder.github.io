{"pageProps":{"post":{"title":"Axios를 활용하여 API 요청 최적화하기 Interceptors 및 고급 오류 처리","description":"","date":"2024-05-12 22:42","slug":"2024-05-12-OptimizingAPIRequestswithAxiosInterceptorsandAdvancedErrorHandling","content":"\n\n\n![Alt text](/assets/img/2024-05-12-OptimizingAPIRequestswithAxiosInterceptorsandAdvancedErrorHandling_0.png)\n\n프로젝트에서 API 통신의 참된 잠재력을 발휘해 보세요! 다재다능한 HTTP 클라이언트인 Axios를 살펴보고, 인터셉터와 견고한 에러 처리로 요청 관리를 어떻게 높일 수 있는지 알아보세요.\n\nAxios와 기본 Fetch API는 JavaScript에서 HTTP 요청을 하는 도구이지만, 주요 차이점이 있습니다. Axios가 인기 있는 이유와 Fetch API와의 차이점을 강조한 비교입니다:\n\n## 1. 사용 편의성 및 구문:\n\n\n\n— Axios: 깔끔한 구문과 일관된 API를 제공하여 간단하게 사용할 수 있습니다. 그리고 메서드들은 Promises를 반환하여 비동기 작업을 쉽게 연결하고 처리할 수 있습니다.\n— Fetch API: 강력하지만 더 많은 설명이 필요한 구문을 갖고 있으며, 다양한 HTTP 메서드나 헤더를 처리하기 위해서는 추가적인 보일러플레이트(boilerplate) 코드가 필요할 수 있습니다.\n\n## 2. JSON 데이터 다루기:\n\n— Axios: JSON 응답을 자동으로 구문 분석하여 JSON 데이터를 다루는 프로세스를 간단화합니다.\n— Fetch API: 응답에서 JSON 데이터를 추출하려면 수동으로 .json() 메서드를 호출해야 합니다.\n\n## 3. 인터셉터:\n\n\n\n- Axios: Interceptors를 사용하여 HTTP 요청이나 응답이 .then() 또는 .catch() 블록에 도달하기 전에 전역적으로 가로채고 수정하는 것을 가능하게 합니다.\n- Fetch API: 내장된 Interceptors가 없기 때문에 유사한 기능을 달성하려면 추가 코드 및 각 사용 지점에서 처리가 필요합니다.\n\n## 4. 오류 처리:\n\n- Axios: 견고한 오류 처리가 있으며 HTTP 오류 상태 (예: 404 또는 500)에 대해 자동으로 프라미스를 거부합니다.\n- Fetch API: 응답의 ok 속성을 수동으로 확인해야 하며 오류는 자동으로 throw되지 않습니다.\n\nAxios가 인기 있는 이유:\n- 편리성: Axios는 개발자 친화적 인터페이스를 제공하여 명확한 구문으로 작업하기 쉽게 만듭니다.\n- 기능이 풍부함: Interceptors, 자동 JSON 구문 분석 및 요청/응답 변환과 같은 내장 기능은 인기에 기여합니다.\n- 일관된 동작: Axios는 Fetch API에 존재하는 일부 불일치에 대응하여 서로 다른 브라우저에서 일관된 동작을 보장합니다.\n\n\n\n## Axios 시작하기\n\n## 1. Axios 설치하기:\n\n프로젝트에 Axios가 설치되어 있는지 확인하세요. npm 또는 yarn을 사용하여 설치할 수 있습니다:\n\n```js\nnpm install axios\n// 또는\nyarn add axios\n```\n\n\n\n## 2. Axios 인스턴스를 가져와서 만들기:\n\nAPI 요청을 만들 예정인 JavaScript 파일에서 Axios를 가져와주세요. 그리고 기본 URL, 헤더 등과 같은 기본 설정을 설정하기 위해 Axios 인스턴스를 만들어주세요. 이렇게 하면 다른 요청에서 동일한 설정을 재사용할 수 있어요:\n\n```js\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.example.com',\n  headers: {\n    'Content-Type': 'application/json',\n    // 다른 공통 헤더를 추가해주세요\n  },\n});\n```\n\n## 3. 요청과 응답 인터셉터 처리:\n\n\n\n```js\nAxios는 요청과 응답을 전역적으로 처리하기 위해 인터셉터를 사용할 수 있습니다. 이는 헤더 추가, 오류 처리 등과 같은 작업에 유용합니다.\n\n```js\n// 요청 인터셉터\napi.interceptors.request.use(\n  (config) => {\n    // 요청 구성을 여기서 수정하세요 (예: 권한 헤더 추가)\n    return config;\n  },\n  (error) => {\n    // 요청 오류 처리\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    // 응답 데이터를 여기서 수정하세요\n    return response;\n  },\n  (error) => {\n    // 응답 오류 처리\n    return Promise.reject(error);\n  }\n);\n```\n\n## 4. 비동기 요청에 대해 Async/Await 사용:\n\n클린하고 가독성이 좋은 비동기 코드를 위해 async/await 구문을 활용하세요:\n```\n\n\n\n```js\nasync function fetchData() {\n  try {\n    const response = await api.get('/endpoint');\n    // 응답 데이터 처리\n  } catch (error) {\n    // 에러 처리\n  }\n}\n```\n\n## 5. 동시 요청 최적화:\n\n여러 요청을 동시에 실행할 수 있는 경우 성능을 최적화하기 위해 Promise.all을 사용해보세요:\n\n```js\nasync function fetchMultipleData() {\n  try {\n    const [data1, data2] = await Promise.all([\n      api.get('/endpoint1'),\n      api.get('/endpoint2'),\n    ]);\n    // 데이터 처리\n  } catch (error) {\n    // 에러 처리\n  }\n}\n```\n\n\n\n## 6. 요청 취소:\n\nAxios는 요청 취소를 지원합니다. 이는 사용자가 요청이 완료되기 전에 페이지를 벗어날 때 불필요한 요청을 방지하는 데 유용할 수 있습니다:\n\n```js\nconst source = axios.CancelToken.source();\n\ntry {\n  const response = await api.get('/endpoint', {\n    cancelToken: source.token,\n  });\n  // 응답 처리\n} catch (error) {\n  if (axios.isCancel(error)) {\n    // 요청이 취소되었습니다\n  } else {\n    // 다른 오류 처리\n  }\n}\n\n// 요청 취소하기\nsource.cancel('사용자에 의해 요청이 취소됨');\n```\n\n## 성공 및 오류 토스트와 함께 완전한 소스 코드\n\n\n\n```js\nimport { toast } from 'react-hot-toast';\nimport Axios from 'axios';\n\nconst axios = Axios.create({\n  // 여러분의 API 기본 URL로 변경하세요\n  baseURL: 'https://fakerapi.it/api/v1',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\naxios.interceptors.response.use(\n  (response) => {\n    const data = response?.data;\n\n    console.log(data);\n\n    if (data?.message && typeof data?.message === 'string') {\n      toast.success(data.message);\n    } else if (data?.status && typeof data?.status === 'string') {\n      toast.success(data.status + ` - 상태 코드: ${data.code}`);\n    }\n\n    // 필요에 맞게 변경하세요\n    return data.data;\n  },\n  (error) => {\n    const data = error.response.data;\n\n    if (data?.message && typeof data?.message === 'string') {\n      toast.error(data.message);\n    } else if (data?.status && typeof data?.status === 'string') {\n      toast.error(data.status + ` - 상태 코드: ${data.code}`);\n    }\n\n    return Promise.reject(data);\n  }\n);\n\naxios.interceptors.request.use((config) => {\n  let token = 'your-bearer-token';\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  } else {\n    // 토큰이 없는 경우 처리\n    // 로그인 페이지로 리디렉션하거나 적절한 조치를 취할 수 있습니다\n  }\n\n  return config;\n});\n\nexport default axios;\n```\n\naxios 템플릿 코드를 문서에 추가했고, 아래 링크를 참조해주세요:\n\n[GitHub Gist](https://www.0cb.tech/jbbch)\n[실시간 코드 — StackBlitz](https://www.0cb.tech/fvopy)\n\n' embed https://stackblitz.com/edit/vitejs-vite-uqovqp?embed=1&file=src%2Flib%2Faxios.js '\n```","ogImage":{"url":"/assets/img/2024-05-12-OptimizingAPIRequestswithAxiosInterceptorsandAdvancedErrorHandling_0.png"},"coverImage":"/assets/img/2024-05-12-OptimizingAPIRequestswithAxiosInterceptorsandAdvancedErrorHandling_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-12-OptimizingAPIRequestswithAxiosInterceptorsandAdvancedErrorHandling_0.png\" alt=\"Alt text\"></p>\n<p>프로젝트에서 API 통신의 참된 잠재력을 발휘해 보세요! 다재다능한 HTTP 클라이언트인 Axios를 살펴보고, 인터셉터와 견고한 에러 처리로 요청 관리를 어떻게 높일 수 있는지 알아보세요.</p>\n<p>Axios와 기본 Fetch API는 JavaScript에서 HTTP 요청을 하는 도구이지만, 주요 차이점이 있습니다. Axios가 인기 있는 이유와 Fetch API와의 차이점을 강조한 비교입니다:</p>\n<h2>1. 사용 편의성 및 구문:</h2>\n<p>— Axios: 깔끔한 구문과 일관된 API를 제공하여 간단하게 사용할 수 있습니다. 그리고 메서드들은 Promises를 반환하여 비동기 작업을 쉽게 연결하고 처리할 수 있습니다.\n— Fetch API: 강력하지만 더 많은 설명이 필요한 구문을 갖고 있으며, 다양한 HTTP 메서드나 헤더를 처리하기 위해서는 추가적인 보일러플레이트(boilerplate) 코드가 필요할 수 있습니다.</p>\n<h2>2. JSON 데이터 다루기:</h2>\n<p>— Axios: JSON 응답을 자동으로 구문 분석하여 JSON 데이터를 다루는 프로세스를 간단화합니다.\n— Fetch API: 응답에서 JSON 데이터를 추출하려면 수동으로 .json() 메서드를 호출해야 합니다.</p>\n<h2>3. 인터셉터:</h2>\n<ul>\n<li>Axios: Interceptors를 사용하여 HTTP 요청이나 응답이 .then() 또는 .catch() 블록에 도달하기 전에 전역적으로 가로채고 수정하는 것을 가능하게 합니다.</li>\n<li>Fetch API: 내장된 Interceptors가 없기 때문에 유사한 기능을 달성하려면 추가 코드 및 각 사용 지점에서 처리가 필요합니다.</li>\n</ul>\n<h2>4. 오류 처리:</h2>\n<ul>\n<li>Axios: 견고한 오류 처리가 있으며 HTTP 오류 상태 (예: 404 또는 500)에 대해 자동으로 프라미스를 거부합니다.</li>\n<li>Fetch API: 응답의 ok 속성을 수동으로 확인해야 하며 오류는 자동으로 throw되지 않습니다.</li>\n</ul>\n<p>Axios가 인기 있는 이유:</p>\n<ul>\n<li>편리성: Axios는 개발자 친화적 인터페이스를 제공하여 명확한 구문으로 작업하기 쉽게 만듭니다.</li>\n<li>기능이 풍부함: Interceptors, 자동 JSON 구문 분석 및 요청/응답 변환과 같은 내장 기능은 인기에 기여합니다.</li>\n<li>일관된 동작: Axios는 Fetch API에 존재하는 일부 불일치에 대응하여 서로 다른 브라우저에서 일관된 동작을 보장합니다.</li>\n</ul>\n<h2>Axios 시작하기</h2>\n<h2>1. Axios 설치하기:</h2>\n<p>프로젝트에 Axios가 설치되어 있는지 확인하세요. npm 또는 yarn을 사용하여 설치할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">npm install axios\n<span class=\"hljs-comment\">// 또는</span>\nyarn add axios\n</code></pre>\n<h2>2. Axios 인스턴스를 가져와서 만들기:</h2>\n<p>API 요청을 만들 예정인 JavaScript 파일에서 Axios를 가져와주세요. 그리고 기본 URL, 헤더 등과 같은 기본 설정을 설정하기 위해 Axios 인스턴스를 만들어주세요. 이렇게 하면 다른 요청에서 동일한 설정을 재사용할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n\n<span class=\"hljs-keyword\">const</span> api = axios.<span class=\"hljs-title function_\">create</span>({\n  <span class=\"hljs-attr\">baseURL</span>: <span class=\"hljs-string\">'https://api.example.com'</span>,\n  <span class=\"hljs-attr\">headers</span>: {\n    <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>,\n    <span class=\"hljs-comment\">// 다른 공통 헤더를 추가해주세요</span>\n  },\n});\n</code></pre>\n<h2>3. 요청과 응답 인터셉터 처리:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Axios</span>는 요청과 응답을 전역적으로 처리하기 위해 인터셉터를 사용할 수 있습니다. 이는 헤더 추가, 오류 처리 등과 같은 작업에 유용합니다.\n\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">`js\n// 요청 인터셉터\napi.interceptors.request.use(\n  (config) => {\n    // 요청 구성을 여기서 수정하세요 (예: 권한 헤더 추가)\n    return config;\n  },\n  (error) => {\n    // 요청 오류 처리\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    // 응답 데이터를 여기서 수정하세요\n    return response;\n  },\n  (error) => {\n    // 응답 오류 처리\n    return Promise.reject(error);\n  }\n);\n</span></code></pre>\n<h2>4. 비동기 요청에 대해 Async/Await 사용:</h2>\n<p>클린하고 가독성이 좋은 비동기 코드를 위해 async/await 구문을 활용하세요:</p>\n<pre><code>\n\n\n```js\nasync function fetchData() {\n  try {\n    const response = await api.get('/endpoint');\n    // 응답 데이터 처리\n  } catch (error) {\n    // 에러 처리\n  }\n}\n</code></pre>\n<h2>5. 동시 요청 최적화:</h2>\n<p>여러 요청을 동시에 실행할 수 있는 경우 성능을 최적화하기 위해 Promise.all을 사용해보세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchMultipleData</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> [data1, data2] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([\n      api.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/endpoint1'</span>),\n      api.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/endpoint2'</span>),\n    ]);\n    <span class=\"hljs-comment\">// 데이터 처리</span>\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-comment\">// 에러 처리</span>\n  }\n}\n</code></pre>\n<h2>6. 요청 취소:</h2>\n<p>Axios는 요청 취소를 지원합니다. 이는 사용자가 요청이 완료되기 전에 페이지를 벗어날 때 불필요한 요청을 방지하는 데 유용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> source = axios.<span class=\"hljs-property\">CancelToken</span>.<span class=\"hljs-title function_\">source</span>();\n\n<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> api.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/endpoint'</span>, {\n    <span class=\"hljs-attr\">cancelToken</span>: source.<span class=\"hljs-property\">token</span>,\n  });\n  <span class=\"hljs-comment\">// 응답 처리</span>\n} <span class=\"hljs-keyword\">catch</span> (error) {\n  <span class=\"hljs-keyword\">if</span> (axios.<span class=\"hljs-title function_\">isCancel</span>(error)) {\n    <span class=\"hljs-comment\">// 요청이 취소되었습니다</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 다른 오류 처리</span>\n  }\n}\n\n<span class=\"hljs-comment\">// 요청 취소하기</span>\nsource.<span class=\"hljs-title function_\">cancel</span>(<span class=\"hljs-string\">'사용자에 의해 요청이 취소됨'</span>);\n</code></pre>\n<h2>성공 및 오류 토스트와 함께 완전한 소스 코드</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { toast } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-hot-toast'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Axios</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n\n<span class=\"hljs-keyword\">const</span> axios = <span class=\"hljs-title class_\">Axios</span>.<span class=\"hljs-title function_\">create</span>({\n  <span class=\"hljs-comment\">// 여러분의 API 기본 URL로 변경하세요</span>\n  <span class=\"hljs-attr\">baseURL</span>: <span class=\"hljs-string\">'https://fakerapi.it/api/v1'</span>,\n  <span class=\"hljs-attr\">headers</span>: {\n    <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>,\n  },\n});\n\naxios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">use</span>(\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> {\n    <span class=\"hljs-keyword\">const</span> data = response?.<span class=\"hljs-property\">data</span>;\n\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n\n    <span class=\"hljs-keyword\">if</span> (data?.<span class=\"hljs-property\">message</span> &#x26;&#x26; <span class=\"hljs-keyword\">typeof</span> data?.<span class=\"hljs-property\">message</span> === <span class=\"hljs-string\">'string'</span>) {\n      toast.<span class=\"hljs-title function_\">success</span>(data.<span class=\"hljs-property\">message</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data?.<span class=\"hljs-property\">status</span> &#x26;&#x26; <span class=\"hljs-keyword\">typeof</span> data?.<span class=\"hljs-property\">status</span> === <span class=\"hljs-string\">'string'</span>) {\n      toast.<span class=\"hljs-title function_\">success</span>(data.<span class=\"hljs-property\">status</span> + <span class=\"hljs-string\">` - 상태 코드: <span class=\"hljs-subst\">${data.code}</span>`</span>);\n    }\n\n    <span class=\"hljs-comment\">// 필요에 맞게 변경하세요</span>\n    <span class=\"hljs-keyword\">return</span> data.<span class=\"hljs-property\">data</span>;\n  },\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =></span> {\n    <span class=\"hljs-keyword\">const</span> data = error.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">data</span>;\n\n    <span class=\"hljs-keyword\">if</span> (data?.<span class=\"hljs-property\">message</span> &#x26;&#x26; <span class=\"hljs-keyword\">typeof</span> data?.<span class=\"hljs-property\">message</span> === <span class=\"hljs-string\">'string'</span>) {\n      toast.<span class=\"hljs-title function_\">error</span>(data.<span class=\"hljs-property\">message</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data?.<span class=\"hljs-property\">status</span> &#x26;&#x26; <span class=\"hljs-keyword\">typeof</span> data?.<span class=\"hljs-property\">status</span> === <span class=\"hljs-string\">'string'</span>) {\n      toast.<span class=\"hljs-title function_\">error</span>(data.<span class=\"hljs-property\">status</span> + <span class=\"hljs-string\">` - 상태 코드: <span class=\"hljs-subst\">${data.code}</span>`</span>);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">reject</span>(data);\n  }\n);\n\naxios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">config</span>) =></span> {\n  <span class=\"hljs-keyword\">let</span> token = <span class=\"hljs-string\">'your-bearer-token'</span>;\n\n  <span class=\"hljs-keyword\">if</span> (token) {\n    config.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">Authorization</span> = <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${token}</span>`</span>;\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 토큰이 없는 경우 처리</span>\n    <span class=\"hljs-comment\">// 로그인 페이지로 리디렉션하거나 적절한 조치를 취할 수 있습니다</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span> config;\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> axios;\n</code></pre>\n<p>axios 템플릿 코드를 문서에 추가했고, 아래 링크를 참조해주세요:</p>\n<p><a href=\"https://www.0cb.tech/jbbch\" rel=\"nofollow\" target=\"_blank\">GitHub Gist</a>\n<a href=\"https://www.0cb.tech/fvopy\" rel=\"nofollow\" target=\"_blank\">실시간 코드 — StackBlitz</a></p>\n<p>' embed <a href=\"https://stackblitz.com/edit/vitejs-vite-uqovqp?embed=1&#x26;file=src%2Flib%2Faxios.js\" rel=\"nofollow\" target=\"_blank\">https://stackblitz.com/edit/vitejs-vite-uqovqp?embed=1&#x26;file=src%2Flib%2Faxios.js</a> '</p>\n<pre><code></code></pre>\n</body>\n</html>\n"},"__N_SSG":true}