{"pageProps":{"post":{"title":"DraftJS를 사용한 풍부한 텍스트 편집기","description":"","date":"2024-05-12 23:18","slug":"2024-05-12-RichTextEditorusingDraftJS","content":"\n\n그래도 봐, 요즘에는 보통의 텍스트 영역으로는 충분하지 않아. 요즘에는 가능한 모든 서식을 필요로 해서 고객들이 데이터를 인상적인 형식으로 제시할 수 있게 해야 해.\n\n그런 상황에서 draft.js가 등장해. React 앱용 멋진 텍스트 편집기야. 우리가 어떻게 고객을 위해 텍스트 영역을 흥미롭게 만들었는지 여기에 나와 있어.\n\n```js\nimport { EditorState, ContentState, convertFromHTML } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\nimport React, { useEffect, useState } from 'react';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\ntype RichTextAreaProps = {\n  name: string;\n  onChange: (value: any) => void;\n  onReset?: () => void;\n  placeholder?: string;\n  reset?: boolean;\n  value: string;\n};\n\nconst RichTextArea: React.FC<RichTextAreaProps> = ({\n  name,\n  onChange,\n  value,\n  placeholder = 'Enter Details',\n  reset,\n  onReset,\n}) => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  const handleEditorChange = (newEditorState) => {\n    setEditorState(newEditorState);\n\n    const rawContentState = editorState.getCurrentContent();\n    const html = stateToHTML(rawContentState);\n\n    onChange({\n      target: {\n        name,\n        value: html,\n      },\n    });\n  };\n\n  useEffect(() => {\n    const blocksFromHTML = convertFromHTML(value);\n    const contentState = ContentState.createFromBlockArray(blocksFromHTML);\n    setEditorState(EditorState.createWithContent(contentState));\n  }, []);\n\n  useEffect(() => {\n    if (reset) {\n      setEditorState(EditorState.createEmpty());\n\n      const blocksFromHTML = convertFromHTML(value);\n      const contentState = ContentState.createFromBlockArray(blocksFromHTML);\n\n      setEditorState(EditorState.createWithContent(contentState));\n      onReset();\n    }\n  }, [reset]);\n\n  return (\n    <div className=\"w-full bg-white p-2\">\n      <Editor\n        name={name}\n        placeholder={placeholder}\n        editorState={editorState}\n        onEditorStateChange={handleEditorChange}\n        toolbar={{\n          options: ['inline', 'fontSize', 'list', 'textAlign', 'link', 'image'],\n          inline: {\n            options: ['bold', 'italic', 'underline'],\n          },\n          list: {\n            options: ['unordered', 'ordered'],\n          },\n          textAlign: {\n            options: ['left', 'center', 'right'],\n          },\n          link: {\n            defaultTargetOption: '_blank',\n          },\n          image: {\n            defaultSize: {\n              height: 'auto',\n              width: '100%',\n            },\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default RichTextArea;\n```\n\n- Editor는 draft.js에서 제공하는 구성요소야. 그냥 그것을 추가함으로써 기본 툴바가 있는 리치 텍스트 편집기를 얻을 수 있어.\n- 툴바 prop을 사용하면 툴바에 표시하고 싶은 모든 형식을 사용자 정의할 수 있어.\n- editorState는 사용자가 편집기에 입력하는 상태나 내용을 제어하는 것이야.\n- Editor는 사실 formik과 연결돼 있어서 이름과 onChange 호출을 처리해.\n- 기본적으로 편집기는 EditorState 객체를 반환하는데, 이를 의미 있게 만들기 위해 stateToHTML(rawContentState) 호출을 통해 HTML로 변환해야 해.\n- 반대로 백엔드로 전송할 때 HTML로 변환되는 EditorState 객체에서 데이터를 로드할 때 ContentState.createFromBlockArray를 통해 이를 역으로 수행해야 해.\n\n\n\n```js\n<FormControl\n  label=\"피드백\"\n  error={formik.touched.response && formik.errors.response}\n>\n  <RichTextArea\n    name=\"피드백\"\n    value={formik.values.feedback}\n    onChange={formik.handleChange}\n  />\n</FormControl>\n```\n\n이렇게 `RichTextArea` 컴포넌트를 사용합니다. `FormControl`은 실제로 formik 프로바이더를 이 안에 감쌉니다.\n\n<img src=\"/assets/img/2024-05-12-RichTextEditorusingDraftJS_0.png\" />\n\n이렇게 보입니다.\n```\n\n\n\n행복한 코딩하세요!","ogImage":{"url":"/assets/img/2024-05-12-RichTextEditorusingDraftJS_0.png"},"coverImage":"/assets/img/2024-05-12-RichTextEditorusingDraftJS_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>그래도 봐, 요즘에는 보통의 텍스트 영역으로는 충분하지 않아. 요즘에는 가능한 모든 서식을 필요로 해서 고객들이 데이터를 인상적인 형식으로 제시할 수 있게 해야 해.</p>\n<p>그런 상황에서 draft.js가 등장해. React 앱용 멋진 텍스트 편집기야. 우리가 어떻게 고객을 위해 텍스트 영역을 흥미롭게 만들었는지 여기에 나와 있어.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">EditorState</span>, <span class=\"hljs-title class_\">ContentState</span>, convertFromHTML } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'draft-js'</span>;\n<span class=\"hljs-keyword\">import</span> { stateToHTML } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'draft-js-export-html'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Editor</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-draft-wysiwyg'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'</span>;\n\ntype <span class=\"hljs-title class_\">RichTextAreaProps</span> = {\n  <span class=\"hljs-attr\">name</span>: string;\n  <span class=\"hljs-attr\">onChange</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">value: any</span>) =></span> <span class=\"hljs-keyword\">void</span>;\n  onReset?: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">void</span>;\n  placeholder?: string;\n  reset?: boolean;\n  <span class=\"hljs-attr\">value</span>: string;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">RichTextArea</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&#x3C;<span class=\"hljs-title class_\">RichTextAreaProps</span>> = <span class=\"hljs-function\">(<span class=\"hljs-params\">{\n  name,\n  onChange,\n  value,\n  placeholder = <span class=\"hljs-string\">'Enter Details'</span>,\n  reset,\n  onReset,\n}</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> [editorState, setEditorState] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-title class_\">EditorState</span>.<span class=\"hljs-title function_\">createEmpty</span>());\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleEditorChange</span> = (<span class=\"hljs-params\">newEditorState</span>) => {\n    <span class=\"hljs-title function_\">setEditorState</span>(newEditorState);\n\n    <span class=\"hljs-keyword\">const</span> rawContentState = editorState.<span class=\"hljs-title function_\">getCurrentContent</span>();\n    <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-title function_\">stateToHTML</span>(rawContentState);\n\n    <span class=\"hljs-title function_\">onChange</span>({\n      <span class=\"hljs-attr\">target</span>: {\n        name,\n        <span class=\"hljs-attr\">value</span>: html,\n      },\n    });\n  };\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> blocksFromHTML = <span class=\"hljs-title function_\">convertFromHTML</span>(value);\n    <span class=\"hljs-keyword\">const</span> contentState = <span class=\"hljs-title class_\">ContentState</span>.<span class=\"hljs-title function_\">createFromBlockArray</span>(blocksFromHTML);\n    <span class=\"hljs-title function_\">setEditorState</span>(<span class=\"hljs-title class_\">EditorState</span>.<span class=\"hljs-title function_\">createWithContent</span>(contentState));\n  }, []);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (reset) {\n      <span class=\"hljs-title function_\">setEditorState</span>(<span class=\"hljs-title class_\">EditorState</span>.<span class=\"hljs-title function_\">createEmpty</span>());\n\n      <span class=\"hljs-keyword\">const</span> blocksFromHTML = <span class=\"hljs-title function_\">convertFromHTML</span>(value);\n      <span class=\"hljs-keyword\">const</span> contentState = <span class=\"hljs-title class_\">ContentState</span>.<span class=\"hljs-title function_\">createFromBlockArray</span>(blocksFromHTML);\n\n      <span class=\"hljs-title function_\">setEditorState</span>(<span class=\"hljs-title class_\">EditorState</span>.<span class=\"hljs-title function_\">createWithContent</span>(contentState));\n      <span class=\"hljs-title function_\">onReset</span>();\n    }\n  }, [reset]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-full bg-white p-2\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Editor</span>\n        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">{name}</span>\n        <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">{placeholder}</span>\n        <span class=\"hljs-attr\">editorState</span>=<span class=\"hljs-string\">{editorState}</span>\n        <span class=\"hljs-attr\">onEditorStateChange</span>=<span class=\"hljs-string\">{handleEditorChange}</span>\n        <span class=\"hljs-attr\">toolbar</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">options:</span> ['<span class=\"hljs-attr\">inline</span>', '<span class=\"hljs-attr\">fontSize</span>', '<span class=\"hljs-attr\">list</span>', '<span class=\"hljs-attr\">textAlign</span>', '<span class=\"hljs-attr\">link</span>', '<span class=\"hljs-attr\">image</span>'],\n          <span class=\"hljs-attr\">inline:</span> {\n            <span class=\"hljs-attr\">options:</span> ['<span class=\"hljs-attr\">bold</span>', '<span class=\"hljs-attr\">italic</span>', '<span class=\"hljs-attr\">underline</span>'],\n          },\n          <span class=\"hljs-attr\">list:</span> {\n            <span class=\"hljs-attr\">options:</span> ['<span class=\"hljs-attr\">unordered</span>', '<span class=\"hljs-attr\">ordered</span>'],\n          },\n          <span class=\"hljs-attr\">textAlign:</span> {\n            <span class=\"hljs-attr\">options:</span> ['<span class=\"hljs-attr\">left</span>', '<span class=\"hljs-attr\">center</span>', '<span class=\"hljs-attr\">right</span>'],\n          },\n          <span class=\"hljs-attr\">link:</span> {\n            <span class=\"hljs-attr\">defaultTargetOption:</span> '<span class=\"hljs-attr\">_blank</span>',\n          },\n          <span class=\"hljs-attr\">image:</span> {\n            <span class=\"hljs-attr\">defaultSize:</span> {\n              <span class=\"hljs-attr\">height:</span> '<span class=\"hljs-attr\">auto</span>',\n              <span class=\"hljs-attr\">width:</span> '<span class=\"hljs-attr\">100</span>%',\n            },\n          },\n        }}\n      /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">RichTextArea</span>;\n</code></pre>\n<ul>\n<li>Editor는 draft.js에서 제공하는 구성요소야. 그냥 그것을 추가함으로써 기본 툴바가 있는 리치 텍스트 편집기를 얻을 수 있어.</li>\n<li>툴바 prop을 사용하면 툴바에 표시하고 싶은 모든 형식을 사용자 정의할 수 있어.</li>\n<li>editorState는 사용자가 편집기에 입력하는 상태나 내용을 제어하는 것이야.</li>\n<li>Editor는 사실 formik과 연결돼 있어서 이름과 onChange 호출을 처리해.</li>\n<li>기본적으로 편집기는 EditorState 객체를 반환하는데, 이를 의미 있게 만들기 위해 stateToHTML(rawContentState) 호출을 통해 HTML로 변환해야 해.</li>\n<li>반대로 백엔드로 전송할 때 HTML로 변환되는 EditorState 객체에서 데이터를 로드할 때 ContentState.createFromBlockArray를 통해 이를 역으로 수행해야 해.</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;<span class=\"hljs-title class_\">FormControl</span>\n  label=<span class=\"hljs-string\">\"피드백\"</span>\n  error={formik.<span class=\"hljs-property\">touched</span>.<span class=\"hljs-property\">response</span> &#x26;&#x26; formik.<span class=\"hljs-property\">errors</span>.<span class=\"hljs-property\">response</span>}\n>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">RichTextArea</span>\n    <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"피드백\"</span>\n    <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{formik.values.feedback}</span>\n    <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{formik.handleChange}</span>\n  /></span></span>\n&#x3C;/<span class=\"hljs-title class_\">FormControl</span>>\n</code></pre>\n<p>이렇게 <code>RichTextArea</code> 컴포넌트를 사용합니다. <code>FormControl</code>은 실제로 formik 프로바이더를 이 안에 감쌉니다.</p>\n<p>이렇게 보입니다.</p>\n<pre><code>\n\n\n행복한 코딩하세요!\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}