{"pageProps":{"post":{"title":"React에서 React Router 링크를 테스트하는 방법 초심자를 위한 안내","description":"","date":"2024-05-14 10:15","slug":"2024-05-14-HowtoTestaReactRouterLinkinReactABeginnersGuide","content":"\n\n안녕하세요! 유닛 테스트의 바다에 발을 담그기 시작하셨나요? 그렇다면 올바른 곳에 왔어요! 오늘은 React Router를 사용하는 React 애플리케이션에서 클릭 가능한 링크를 테스트하는 재미있는 시간을 갖도록 할 거예요. 재미있고 간단하게 진행하며 테스팅의 세계로 여행을 시작해보아요!\n\n# 왜 네비게이션 링크를 테스트해야 하나요?\n\n네비게이션 링크는 많은 웹 애플리케이션에서 사용자 상호작용의 중추입니다. 페이지를 새로고침하지 않고 사용자를 부드럽게 이동시키며, 이를 테스트하는 것이 사용자 경험의 연속성을 보장하는 데 중요합니다. 오늘은 이 링크들이 사용자를 목적지로 올바르게 안내하는지 확인하는 방법을 배우게 될 거예요.\n\n# 코드: React Router 링크\n\n\n\n작은 링크 컴포넌트를 작성해 보겠습니다. MagicDoor라고 부를게요. 보기에는 이렇습니다:\n\n```js\n// MagicDoor.js\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction MagicDoor({ destinationId }) {\n  return (\n    <div>\n      <Link to={{\n        pathname: `/mystery-destination/${destinationId}`,\n        state: { from: window.location.pathname }\n      }}>\n        목적지로 이동하기\n      </Link>\n    </div>\n  );\n}\n\nexport default MagicDoor;\n```\n\n이 컴포넌트에서 destinationId는 열고자 하는 목적지를 결정하는 고유한 키입니다. 상태(state)는 어디서 왔는지의 기억을 갖고 있어요.\n\n# 테스트 시간: 제대로 열리나요?\n\n\n\n자, 이제 MagicDoor가 예상대로 작동하는지 확인해 봅시다. 올바른 URL을 가지고 있는지 확인하고 클릭했을 때 어떻게 되는지 살펴봅시다:\n\n```js\n// MagicDoor.test.js\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Provider } from 'react-redux';\nimport configureStore from 'redux-mock-store';\nimport { BrowserRouter } from 'react-router-dom';\nimport theme from 'core/theme';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport MagicDoor from './MagicDoor';\n\ndescribe('MagicDoor Component', () => {\n  let store;\n  beforeAll(() => {\n    const mockStore = configureStore([]);\n    store = mockStore({}); // 초기 상태\n  });\n\n  it('문 사용시 올바른 목적지로 이동해야 함', () => {\n    const destinationId = '123';\n    const destinationLink = `mystery-destination/${destinationId}`;\n    render(\n      <Provider store={store}>\n        <MuiThemeProvider theme={theme}>\n          <BrowserRouter>\n            <MagicDoor destinationId={destinationId} />\n          </BrowserRouter>\n        </MuiThemeProvider>\n      </Provider>,\n    );\n    \n    const door = screen.getByText('Step through to your destination');\n    expect(door).toHaveAttribute('href', destinationLink);\n    \n    fireEvent.click(door);\n    expect(window.location.pathname).toBe(destinationLink);\n  });\n});\n```\n\n# 방금 무엇을 했나요?\n\n- 링크 찾기: getByText를 사용하여 텍스트에 따라 링크를 찾았습니다.\n- URL 확인: 링크의 href 속성이 제공한 목적지와 일치하는지 확인했습니다.\n- 클릭 시뮬레이션: fireEvent를 사용하여 클릭을 모방하고 올바른 URL이 열렸는지 확인했습니다.\n\n\n\n# 왜 이겪소!\n\nReact Router로 테스트를 진행하면 앱의 내부 이동이 의도한 대로 작동하는지 확인할 수 있어 사용자 경험에서 중요합니다. 사용자 상호작용을 모방하고 결과 경로를 확인함으로써, 사용자가 정확히 이동할 위치를 확인합니다.\n\n# 결론\n\n이제 React Router를 사용하여 React 애플리케이션의 네비게이션 링크를 테스트할 견고한 방법을 갖게 되었습니다. 작성하는 모든 테스트는 더 신뢰할 수 있는 애플리케이션을 구축하는 데 도움이 되며, 네비게이션이 매끄럽고 올바르게 흘러가는 것을 확인합니다.\n\n\n\n# 다음은 무엇인가요?\n\n어플리케이션의 다른 유형의 상호작용을 위한 테스트를 추가해보는 것은 어떨까요? 모든 조각의 테스트는 연결되어 매끄럽고 버그가 없는 사용자 경험을 만들어냅니다. 여러분이 어떤 것들을 만들어내는지 댓글에서 제 경험을 공유해 주시면 정말로 좋겠어요!\n\n기억하세요, 테스팅은 연습과 인내력으로 향상되는 기술입니다. 계속 하며 언젠가는 React 어플리케이션을 전문가처럼 테스트할 수 있게 될 거예요. 행복한 테스팅하세요!","ogImage":{"url":"/assets/img/2024-05-14-HowtoTestaReactRouterLinkinReactABeginnersGuide_0.png"},"coverImage":"/assets/img/2024-05-14-HowtoTestaReactRouterLinkinReactABeginnersGuide_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요! 유닛 테스트의 바다에 발을 담그기 시작하셨나요? 그렇다면 올바른 곳에 왔어요! 오늘은 React Router를 사용하는 React 애플리케이션에서 클릭 가능한 링크를 테스트하는 재미있는 시간을 갖도록 할 거예요. 재미있고 간단하게 진행하며 테스팅의 세계로 여행을 시작해보아요!</p>\n<h1>왜 네비게이션 링크를 테스트해야 하나요?</h1>\n<p>네비게이션 링크는 많은 웹 애플리케이션에서 사용자 상호작용의 중추입니다. 페이지를 새로고침하지 않고 사용자를 부드럽게 이동시키며, 이를 테스트하는 것이 사용자 경험의 연속성을 보장하는 데 중요합니다. 오늘은 이 링크들이 사용자를 목적지로 올바르게 안내하는지 확인하는 방법을 배우게 될 거예요.</p>\n<h1>코드: React Router 링크</h1>\n<p>작은 링크 컴포넌트를 작성해 보겠습니다. MagicDoor라고 부를게요. 보기에는 이렇습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// MagicDoor.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Link</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MagicDoor</span>(<span class=\"hljs-params\">{ destinationId }</span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">pathname:</span> `/<span class=\"hljs-attr\">mystery-destination</span>/${<span class=\"hljs-attr\">destinationId</span>}`,\n        <span class=\"hljs-attr\">state:</span> { <span class=\"hljs-attr\">from:</span> <span class=\"hljs-attr\">window.location.pathname</span> }\n      }}></span>\n        목적지로 이동하기\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Link</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">MagicDoor</span>;\n</code></pre>\n<p>이 컴포넌트에서 destinationId는 열고자 하는 목적지를 결정하는 고유한 키입니다. 상태(state)는 어디서 왔는지의 기억을 갖고 있어요.</p>\n<h1>테스트 시간: 제대로 열리나요?</h1>\n<p>자, 이제 MagicDoor가 예상대로 작동하는지 확인해 봅시다. 올바른 URL을 가지고 있는지 확인하고 클릭했을 때 어떻게 되는지 살펴봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// MagicDoor.test.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { render, screen, fireEvent } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@testing-library/react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Provider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-redux'</span>;\n<span class=\"hljs-keyword\">import</span> configureStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'redux-mock-store'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserRouter</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n<span class=\"hljs-keyword\">import</span> theme <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'core/theme'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MuiThemeProvider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@material-ui/core/styles'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MagicDoor</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./MagicDoor'</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">'MagicDoor Component'</span>, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">let</span> store;\n  <span class=\"hljs-title function_\">beforeAll</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> mockStore = <span class=\"hljs-title function_\">configureStore</span>([]);\n    store = <span class=\"hljs-title function_\">mockStore</span>({}); <span class=\"hljs-comment\">// 초기 상태</span>\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">'문 사용시 올바른 목적지로 이동해야 함'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> destinationId = <span class=\"hljs-string\">'123'</span>;\n    <span class=\"hljs-keyword\">const</span> destinationLink = <span class=\"hljs-string\">`mystery-destination/<span class=\"hljs-subst\">${destinationId}</span>`</span>;\n    <span class=\"hljs-title function_\">render</span>(\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">store</span>=<span class=\"hljs-string\">{store}</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">MuiThemeProvider</span> <span class=\"hljs-attr\">theme</span>=<span class=\"hljs-string\">{theme}</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">BrowserRouter</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">MagicDoor</span> <span class=\"hljs-attr\">destinationId</span>=<span class=\"hljs-string\">{destinationId}</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">BrowserRouter</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">MuiThemeProvider</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Provider</span>></span></span>,\n    );\n    \n    <span class=\"hljs-keyword\">const</span> door = screen.<span class=\"hljs-title function_\">getByText</span>(<span class=\"hljs-string\">'Step through to your destination'</span>);\n    <span class=\"hljs-title function_\">expect</span>(door).<span class=\"hljs-title function_\">toHaveAttribute</span>(<span class=\"hljs-string\">'href'</span>, destinationLink);\n    \n    fireEvent.<span class=\"hljs-title function_\">click</span>(door);\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">pathname</span>).<span class=\"hljs-title function_\">toBe</span>(destinationLink);\n  });\n});\n</code></pre>\n<h1>방금 무엇을 했나요?</h1>\n<ul>\n<li>링크 찾기: getByText를 사용하여 텍스트에 따라 링크를 찾았습니다.</li>\n<li>URL 확인: 링크의 href 속성이 제공한 목적지와 일치하는지 확인했습니다.</li>\n<li>클릭 시뮬레이션: fireEvent를 사용하여 클릭을 모방하고 올바른 URL이 열렸는지 확인했습니다.</li>\n</ul>\n<h1>왜 이겪소!</h1>\n<p>React Router로 테스트를 진행하면 앱의 내부 이동이 의도한 대로 작동하는지 확인할 수 있어 사용자 경험에서 중요합니다. 사용자 상호작용을 모방하고 결과 경로를 확인함으로써, 사용자가 정확히 이동할 위치를 확인합니다.</p>\n<h1>결론</h1>\n<p>이제 React Router를 사용하여 React 애플리케이션의 네비게이션 링크를 테스트할 견고한 방법을 갖게 되었습니다. 작성하는 모든 테스트는 더 신뢰할 수 있는 애플리케이션을 구축하는 데 도움이 되며, 네비게이션이 매끄럽고 올바르게 흘러가는 것을 확인합니다.</p>\n<h1>다음은 무엇인가요?</h1>\n<p>어플리케이션의 다른 유형의 상호작용을 위한 테스트를 추가해보는 것은 어떨까요? 모든 조각의 테스트는 연결되어 매끄럽고 버그가 없는 사용자 경험을 만들어냅니다. 여러분이 어떤 것들을 만들어내는지 댓글에서 제 경험을 공유해 주시면 정말로 좋겠어요!</p>\n<p>기억하세요, 테스팅은 연습과 인내력으로 향상되는 기술입니다. 계속 하며 언젠가는 React 어플리케이션을 전문가처럼 테스트할 수 있게 될 거예요. 행복한 테스팅하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}