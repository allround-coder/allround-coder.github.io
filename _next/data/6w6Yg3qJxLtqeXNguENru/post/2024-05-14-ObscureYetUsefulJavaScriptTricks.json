{"pageProps":{"post":{"title":"흥미로운 자바스크립트 요령들","description":"","date":"2024-05-14 13:39","slug":"2024-05-14-ObscureYetUsefulJavaScriptTricks","content":"\n\n<img src=\"/assets/img/2024-05-14-ObscureYetUsefulJavaScriptTricks_0.png\" />\n\n제가 매일 업무 중에 수집한 약간 낯설지만 유용한 JavaScript 트릭 몇 가지를 소개해드릴게요. 이 모든 트릭들은 간결하고 우아한 한 줄짜리 코드들입니다. 이 트릭들이 여러분의 JavaScript 개발에 조금 도움이 될 수 있다고 믿어요.\n\n# 웹\n\n## 현재 페이지 다시 불러오기\n\n\n\n```js\nconst reload = () => location.reload();\nreload()\n```\n\n## 페이지 맨 위로 이동하기\n\n페이지를 맨 위로 가져와야 하는 경우\n\n```js\nconst goToTop = () => window.scrollTo(0, 0);\n\ngoToTop()\n```\n\n\n\n## 요소 스크롤링\n\n요소를 부드럽게 스크롤하여 뷰포트의 시작 지점으로 이동하려면\n\n```js\nconst scrollToTop = (element) =>\n  element.scrollIntoView({ behavior: \"smooth\", block: \"start\" })\n\nscrollToTop(document.body)\n```\n\n요소를 부드럽게 스크롤하여 뷰포트의 끝 지점으로 이동하려면\n\n\n\n```js\nconst scrollToBottom = (element) =>\n  element.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\nscrollToBottom(document.body);\n```\n\n## 현재 브라우저가 인터넷 익스플로러인지 확인하기\n\n```js\nconst isIE = !!document.documentMode;\n```\n\n## 주어진 텍스트에서 HTML 태그 제거하기```\n\n\n\n단어로 마크업 태그들을 걸러내야 할 때\n\n```js\nconst stripHtml = (html) => new DOMParser().parseFromString(html, 'text/html').body.textContent || '';\n\nstripHtml('<div>test</div>') // 'test'\n```\n\n## 리다이렉트\n\n다른 페이지로 이동할 때.\n\n\n\n## 텍스트 붙여넣기\n\n클립보드에 텍스트를 복사해야 할 때\n\n```js\nconst copy = (text) => navigator.clipboard?.writeText && navigator.clipboard.writeText(text)\ncopy('당신이 붙여넣어야 할 텍스트')\n```\n\n\n\n# 기능\n\n## 비동기 함수 확인\n\n함수가 비동기인지 확인하려면\n\n```js\nconst isAsyncFunction = (v) => Object.prototype.toString.call(v) === '[object AsyncFunction]'\n\nisAsyncFunction(async function () {}); // true\n```\n\n\n\n# 숫자\n\n## 숫자 자르기\n\n소수점 이후 특정 자릿수를 버릴 때 반올림하지 않고 잘라야 할 때\n\n```js\nconst toFixed = (n, fixed) => `${n}`.match(new RegExp(`^-?\\d+(?:.\\d{0,${fixed})?`))[0]\n\ntoFixed(10.255, 2) // 10.25\n```\n\n\n\n## 가장 가까운 수로 반올림\n\n소수점 이후의 특정 자릿수를 버리고 가장 가까운 수로 반올림해야 하는 경우\n\n```js\nconst round = (n, decimals = 0) => Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`)\n\nround(10.255, 2) // 10.26\n```\n\n## Zero padding\n\n\n\n숫자 'num'을 'len' 자릿수가 될 때까지 앞에 0을 채우고 싶을 때\n\n```js\nconst replenishZero = (num, len, zero = 0) => num.toString().padStart(len, zero)\n\nreplenishZero(8, 2) // 08\n```\n\n# 객체\n\n## 잘못된 속성 삭제\n\n\n\n객체 내 값이 null 또는 정의되지 않은 속성들을 모두 삭제해야 할 때\n\n```js\nconst removeNullUndefined = (obj) => Object.entries(obj).reduce((a, [k, v]) => (v == null ? a : ((a[k] = v), a)), {});\n\nremoveNullUndefined({name: '', age: undefined, sex: null}) // { name: '' }\n```\n\n## 객체 키-값 쌍 반전\n\n객체의 키-값 쌍을 교환해야 할 때\n\n\n\n```js\nconst invert = (obj) => Object.keys(obj).reduce((res, k) => Object.assign(res, { [obj[k]]: k }), {})\n\ninvert({name: 'jack'}) // {jack: 'name'}\n```\n\n## 문자열을 객체로 변환하기\n\n'이름: \"jack\"'과 같은 문자열을 객체로 변환해야할 때는 JSON.parse를 직접 사용하면 오류가 발생할 수 있습니다.\n\n```js\nconst strParse = (str) => JSON.parse(str.replace(/(\\w+)\\s*:/g, (_, p1) => `\"${p1}\":`).replace(/\\'/g, \"\\\"\"))\n\nstrParse('{name: \"jack\"}')\n```\n\n\n\n# 날짜\n\n## 오늘 날짜인지 확인하기.\n\n```js\nconst isToday = (date) => date.toISOString().slice(0, 10) === new Date().toISOString().slice(0, 10)\n```\n\n## 날짜 변환\n\n\n\n날짜를 YYYY-MM-DD 형식으로 변환해야 할 때\n\n```js\nconst formatYmd = (date) => date.toISOString().slice(0, 10);\nformatYmd(new Date())\n```\n\n## 두 번째 변환\n\n시간(초)를 hh:mm:ss 형식으로 변환해야 할 때\n\n\n\n```js\nconst formatSeconds = (s) => new Date(s * 1000).toISOString().substr(11, 8)\n\nformatSeconds(200) // 00:03:20\n```\n\n## 특정 연도와 월의 첫 번째 날을 가져오기\n\n```js\nconst getFirstDate = (d = new Date()) => new Date(d.getFullYear(), d.getMonth(), 1);\n\ngetFirstDate(new Date('2024/05')) \n```\n\n## 특정 연도와 월의 마지막 날을 가져오기\n\n\n\n\n```js\nconst getLastDate = (d = new Date()) => new Date(d.getFullYear(), d.getMonth() + 1, 0);\ngetLastDate(new Date('2023/03/04')) \n```\n\n## 특정 연도의 특정 월의 전체 일 수 구하기\n\n```js\nconst getDaysNum = (year, month) => new Date(year, month, 0).getDate()  \nconst day = getDaysNum(2024, 2) // 29\n```\n\n# 배열\n\n\n\n## 배열 생성하기\n\n0부터 99까지의 배열이 필요할 때 아래의 코드를 사용하세요.\n\n```js\n// 방법1\nconst createArr = (n) => Array.from(new Array(n), (v, i) => i)\nconst arr = createArr(100)\n```\n\n```js\n// 방법2\nconst createArr = (n) => new Array(n).fill(0).map((v, i) => i)\ncreateArr(100)\n```\n\n\n\n## 배열 섞기\n\n배열이 있고 순서를 섞어야 할 때\n\n```js\nconst randomSort = list => list.sort(() => Math.random() - 0.5)\nrandomSort([0,1,2,3,4,5,6,7,8,9]) // 무작위 순열 결과\n```\n\n## 간단한 배열 중복 제거\n\n\n\n배열에서 각 중복 요소의 인스턴스를 하나만 유지해야 할 때\n\n```js\nconst removeDuplicates = list => [...new Set(list)]\nremoveDuplicates([0, 0, 2, 4, 5]) // [0,2,4,5]\n```\n\n## 배열의 고유한 값 중복 제거\n\n고유한 값에 기반하여 배열에서 중복을 제거합니다.\n\n\n\n```js\nconst duplicateById = list => [...list.reduce((prev, cur) => prev.set(cur.id, cur), new Map()).values()]\nduplicateById([{id: 1, name: 'jack'}, {id: 2, name: 'rose'}, {id: 1, name: 'jack'}])\n// [{id: 1, name: 'jack'}, {id: 2, name: 'rose'}]\n```\n\n## 여러 배열의 교집합\n\n여러 배열의 교집합을 찾아야 할 때\n\n```js\nconst intersection = (a, ...arr) => [...new Set(a)].filter((v) => arr.every((b) => b.includes(v)))\n\nintersection([1, 2, 3, 4], [2, 3, 4, 7, 8], [1, 3, 4, 9])\n// [3, 4]\n```\n\n\n\n## 최대 값의 인덱스 찾기\n\n배열에서 최대 값의 인덱스를 찾아야 할 때\n\n```js\nconst indexOfMax = (arr) => arr.reduce((prev, curr, i, a) => (curr > a[prev] ? i : prev), 0);\nindexOfMax([1, 3, 9, 7, 5]); // 2\n```\n\n## 최소 값의 인덱스 찾기\n\n\n\n배열에서 최솟값의 인덱스를 찾아야 할 때\n\n```js\nconst indexOfMin = (arr) => arr.reduce((prev, curr, i, a) => (curr < a[prev] ? i : prev), 0)\nindexOfMin([2, 5, 3, 4, 1, 0, 9]) // 5\n```\n\n## 가장 가까운 숫자 값 찾기\n\n배열에서 주어진 숫자에 가장 가까운 값을 찾아야 할 때\n\n\n\n```js\nconst closest = (arr, n) => arr.reduce((prev, curr) => (Math.abs(curr - n) < Math.abs(prev - n) ? curr : prev))\nclosest([29, 87, 8, 78, 97, 20, 75, 33, 24, 17], 50) // 33\n```\n\n## 여러 배열을 압축하기\n\n여러 배열을 하나의 배열로 압축해야 할 때\n\n```js\nconst zip = (...arr) => Array.from({ length: Math.max(...arr.map((a) => a.length)) }, (_, i) => arr.map((a) => a[i]))\nzip([1,2,3,4], ['a', 'b', 'c', 'd'], ['A', 'B', 'C', 'D'])\n// [[1, 'a', 'A'], [2, 'b', 'B'], [3, 'c', 'C'], [4, 'd', 'D']]\n```\n\n\n\n## 행과 열 바꾸기\n\n행과 열을 교환해야 할 때\n\n```js\nconst transpose = (matrix) => matrix[0].map((col, i) => matrix.map((row) => row[i]));\ntranspose(\n    [              // [\n        [1, 2, 3], //      [1, 4, 7],\n        [4, 5, 6], //      [2, 5, 8],\n        [7, 8, 9], //      [3, 6, 9],\n     ]             //  ]\n );\n```\n\n# 숫자 변환\n\n\n\n## 기수 변환\n\n기수 10에서 n으로 변환하려면 toString(n)을 사용할 수 있어요!\n\n```js\nconst toDecimal = (num, n = 10) => num.toString(n) \n// 만약 10을 이진수 (기수 2)로 변환해야 한다면\ntoDecimal(10, 2) // '1010'\n```\n\n기수 n에서 기수 10으로 변환하려면 parseInt(num, n)을 사용할 수 있어요!\n\n\n\n```js\nconst toDecimalism = (num, n = 10) => parseInt(num, n)\ntoDecimalism(1010, 2)\n```\n\n# 기타\n\n## 두 객체 비교하기\n\n두 객체를 비교해야 할 때 JavaScript의 등가 연산자는 객체의 주소가 동일한지만 판단할 수 있습니다. 주소가 다를 경우 두 객체의 키-값 쌍이 동일한지 여부를 판단할 수 없습니다.\n\n\n\n```js\nconst isEqual = (...objects) => objects.every(obj => JSON.stringify(obj) === JSON.stringify(objects[0]))\nisEqual({name: 'jack'}, {name: 'jack'}) // true\nisEqual({name: 'jack'}, {name: 'jack1'}, {name: 'jack'}) // false\n```\n\n## 랜덤 색상 생성\n\n랜덤한 색상이 필요할 때\n\n```js\nconst getRandomColor = () => `#${Math.floor(Math.random() * 0xffffff).toString(16)}`\ngetRandomColor() // '#4c2fd7'\n```\n\n\n\n## 컬러 형식 변환\n\n16진수 색상을 RGB로 변환해야 할 때\n\n```js\nconst hexToRgb = hex => hex.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, (_, r, g, b) => `#${r}${r}${g}${g}${b}${b}`).substring(1).match(/.{2}/g).map((x) => parseInt(x, 16));\nhexToRgb('#00ffff'); // [0, 255, 255]\nhexToRgb('#0ff'); // [0, 255, 255]\n```\n\n## 랜덤 IP 주소 가져오기\n\n\n\nIP 주소를 생성할 때 필요한 함수입니다.\n\n```js\nconst randomIp = () =>\n    Array(4)\n        .fill(0)\n        .map((_, i) => Math.floor(Math.random() * 255) + (i === 0 ? 1 : 0))\n        .join('.');\n```\n\n# UUID\n\nID를 생성할 때 필요한 함수입니다.\n\n\n\n```javascript\nconst uuid = (a) => (a ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid))\nuuid()\n```\n\n## 쿠키 가져오기\n\n쿠키를 객체로 변환해야 할 때\n\n```javascript\nconst getCookie = () => document.cookie\n    .split(';')\n    .map((item) => item.split('='))\n    .reduce((acc, [k, v]) => (acc[k.trim().replace('\"', '')] = v) && acc, {})\ngetCookie()\n```\n\n\n\n## 강제 대기\n\n일정 시간 동안 기다려야 할 때 setTimeout 함수에 작성하고 싶지 않은 경우, 콜백 지옥을 유발할 수 있습니다.\n\n```js\nconst sleep = async (t) => new Promise((resolve) => setTimeout(resolve, t));\nsleep(2000).then(() => {console.log('time')});\n```\n\n# 간단히 말해 🚀\n\n\n\nThank you for being a part of the In Plain English community! Before you go:\n\n- Be sure to clap and follow the writer 👏\n- Follow us: X | LinkedIn | YouTube | Discord | Newsletter\n- Visit our other platforms: Stackademic | CoFeed | Venture | Cubed\n- Tired of blogging platforms that force you to deal with algorithmic content? Try Differ\n- More content at PlainEnglish.io","ogImage":{"url":"/assets/img/2024-05-14-ObscureYetUsefulJavaScriptTricks_0.png"},"coverImage":"/assets/img/2024-05-14-ObscureYetUsefulJavaScriptTricks_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>제가 매일 업무 중에 수집한 약간 낯설지만 유용한 JavaScript 트릭 몇 가지를 소개해드릴게요. 이 모든 트릭들은 간결하고 우아한 한 줄짜리 코드들입니다. 이 트릭들이 여러분의 JavaScript 개발에 조금 도움이 될 수 있다고 믿어요.</p>\n<h1>웹</h1>\n<h2>현재 페이지 다시 불러오기</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">reload</span> = (<span class=\"hljs-params\"></span>) => location.<span class=\"hljs-title function_\">reload</span>();\n<span class=\"hljs-title function_\">reload</span>()\n</code></pre>\n<h2>페이지 맨 위로 이동하기</h2>\n<p>페이지를 맨 위로 가져와야 하는 경우</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">goToTop</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">scrollTo</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-title function_\">goToTop</span>()\n</code></pre>\n<h2>요소 스크롤링</h2>\n<p>요소를 부드럽게 스크롤하여 뷰포트의 시작 지점으로 이동하려면</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">scrollToTop</span> = (<span class=\"hljs-params\">element</span>) =>\n  element.<span class=\"hljs-title function_\">scrollIntoView</span>({ <span class=\"hljs-attr\">behavior</span>: <span class=\"hljs-string\">\"smooth\"</span>, <span class=\"hljs-attr\">block</span>: <span class=\"hljs-string\">\"start\"</span> })\n\n<span class=\"hljs-title function_\">scrollToTop</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>)\n</code></pre>\n<p>요소를 부드럽게 스크롤하여 뷰포트의 끝 지점으로 이동하려면</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">scrollToBottom</span> = (<span class=\"hljs-params\">element</span>) =>\n  element.<span class=\"hljs-title function_\">scrollIntoView</span>({ <span class=\"hljs-attr\">behavior</span>: <span class=\"hljs-string\">\"smooth\"</span>, <span class=\"hljs-attr\">block</span>: <span class=\"hljs-string\">\"end\"</span> });\n<span class=\"hljs-title function_\">scrollToBottom</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>);\n</code></pre>\n<h2>현재 브라우저가 인터넷 익스플로러인지 확인하기</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> isIE = !!<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentMode</span>;\n</code></pre>\n<h2>주어진 텍스트에서 HTML 태그 제거하기```</h2>\n<p>단어로 마크업 태그들을 걸러내야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">stripHtml</span> = (<span class=\"hljs-params\">html</span>) => <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DOMParser</span>().<span class=\"hljs-title function_\">parseFromString</span>(html, <span class=\"hljs-string\">'text/html'</span>).<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">textContent</span> || <span class=\"hljs-string\">''</span>;\n\n<span class=\"hljs-title function_\">stripHtml</span>(<span class=\"hljs-string\">'&#x3C;div>test&#x3C;/div>'</span>) <span class=\"hljs-comment\">// 'test'</span>\n</code></pre>\n<h2>리다이렉트</h2>\n<p>다른 페이지로 이동할 때.</p>\n<h2>텍스트 붙여넣기</h2>\n<p>클립보드에 텍스트를 복사해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">copy</span> = (<span class=\"hljs-params\">text</span>) => navigator.<span class=\"hljs-property\">clipboard</span>?.<span class=\"hljs-property\">writeText</span> &#x26;&#x26; navigator.<span class=\"hljs-property\">clipboard</span>.<span class=\"hljs-title function_\">writeText</span>(text)\n<span class=\"hljs-title function_\">copy</span>(<span class=\"hljs-string\">'당신이 붙여넣어야 할 텍스트'</span>)\n</code></pre>\n<h1>기능</h1>\n<h2>비동기 함수 확인</h2>\n<p>함수가 비동기인지 확인하려면</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">isAsyncFunction</span> = (<span class=\"hljs-params\">v</span>) => <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">toString</span>.<span class=\"hljs-title function_\">call</span>(v) === <span class=\"hljs-string\">'[object AsyncFunction]'</span>\n\n<span class=\"hljs-title function_\">isAsyncFunction</span>(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {}); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h1>숫자</h1>\n<h2>숫자 자르기</h2>\n<p>소수점 이후 특정 자릿수를 버릴 때 반올림하지 않고 잘라야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">toFixed</span> = (<span class=\"hljs-params\">n, fixed</span>) => <span class=\"hljs-string\">`<span class=\"hljs-subst\">${n}</span>`</span>.<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">`^-?\\d+(?:.\\d{0,<span class=\"hljs-subst\">${fixed}</span>)?`</span>))[<span class=\"hljs-number\">0</span>]\n\n<span class=\"hljs-title function_\">toFixed</span>(<span class=\"hljs-number\">10.255</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// 10.25</span>\n</code></pre>\n<h2>가장 가까운 수로 반올림</h2>\n<p>소수점 이후의 특정 자릿수를 버리고 가장 가까운 수로 반올림해야 하는 경우</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">round</span> = (<span class=\"hljs-params\">n, decimals = <span class=\"hljs-number\">0</span></span>) => <span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Math</span>.round(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${n}</span>e<span class=\"hljs-subst\">${decimals}</span>`</span>)}</span>e-<span class=\"hljs-subst\">${decimals}</span>`</span>)\n\n<span class=\"hljs-title function_\">round</span>(<span class=\"hljs-number\">10.255</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// 10.26</span>\n</code></pre>\n<h2>Zero padding</h2>\n<p>숫자 'num'을 'len' 자릿수가 될 때까지 앞에 0을 채우고 싶을 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">replenishZero</span> = (<span class=\"hljs-params\">num, len, zero = <span class=\"hljs-number\">0</span></span>) => num.<span class=\"hljs-title function_\">toString</span>().<span class=\"hljs-title function_\">padStart</span>(len, zero)\n\n<span class=\"hljs-title function_\">replenishZero</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// 08</span>\n</code></pre>\n<h1>객체</h1>\n<h2>잘못된 속성 삭제</h2>\n<p>객체 내 값이 null 또는 정의되지 않은 속성들을 모두 삭제해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">removeNullUndefined</span> = (<span class=\"hljs-params\">obj</span>) => <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">entries</span>(obj).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, [k, v]</span>) =></span> (v == <span class=\"hljs-literal\">null</span> ? a : ((a[k] = v), a)), {});\n\n<span class=\"hljs-title function_\">removeNullUndefined</span>({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">''</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-attr\">sex</span>: <span class=\"hljs-literal\">null</span>}) <span class=\"hljs-comment\">// { name: '' }</span>\n</code></pre>\n<h2>객체 키-값 쌍 반전</h2>\n<p>객체의 키-값 쌍을 교환해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">invert</span> = (<span class=\"hljs-params\">obj</span>) => <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(obj).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res, k</span>) =></span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(res, { [obj[k]]: k }), {})\n\n<span class=\"hljs-title function_\">invert</span>({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'jack'</span>}) <span class=\"hljs-comment\">// {jack: 'name'}</span>\n</code></pre>\n<h2>문자열을 객체로 변환하기</h2>\n<p>'이름: \"jack\"'과 같은 문자열을 객체로 변환해야할 때는 JSON.parse를 직접 사용하면 오류가 발생할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">strParse</span> = (<span class=\"hljs-params\">str</span>) => <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(str.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/(\\w+)\\s*:/g</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">_, p1</span>) =></span> <span class=\"hljs-string\">`\"<span class=\"hljs-subst\">${p1}</span>\":`</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\'/g</span>, <span class=\"hljs-string\">\"\\\"\"</span>))\n\n<span class=\"hljs-title function_\">strParse</span>(<span class=\"hljs-string\">'{name: \"jack\"}'</span>)\n</code></pre>\n<h1>날짜</h1>\n<h2>오늘 날짜인지 확인하기.</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">isToday</span> = (<span class=\"hljs-params\">date</span>) => date.<span class=\"hljs-title function_\">toISOString</span>().<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>) === <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toISOString</span>().<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>)\n</code></pre>\n<h2>날짜 변환</h2>\n<p>날짜를 YYYY-MM-DD 형식으로 변환해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">formatYmd</span> = (<span class=\"hljs-params\">date</span>) => date.<span class=\"hljs-title function_\">toISOString</span>().<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-title function_\">formatYmd</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>())\n</code></pre>\n<h2>두 번째 변환</h2>\n<p>시간(초)를 hh:mm:ss 형식으로 변환해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">formatSeconds</span> = (<span class=\"hljs-params\">s</span>) => <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(s * <span class=\"hljs-number\">1000</span>).<span class=\"hljs-title function_\">toISOString</span>().<span class=\"hljs-title function_\">substr</span>(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">8</span>)\n\n<span class=\"hljs-title function_\">formatSeconds</span>(<span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">// 00:03:20</span>\n</code></pre>\n<h2>특정 연도와 월의 첫 번째 날을 가져오기</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getFirstDate</span> = (<span class=\"hljs-params\">d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()</span>) => <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(d.<span class=\"hljs-title function_\">getFullYear</span>(), d.<span class=\"hljs-title function_\">getMonth</span>(), <span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-title function_\">getFirstDate</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">'2024/05'</span>)) \n</code></pre>\n<h2>특정 연도와 월의 마지막 날을 가져오기</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getLastDate</span> = (<span class=\"hljs-params\">d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()</span>) => <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(d.<span class=\"hljs-title function_\">getFullYear</span>(), d.<span class=\"hljs-title function_\">getMonth</span>() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-title function_\">getLastDate</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">'2023/03/04'</span>)) \n</code></pre>\n<h2>특정 연도의 특정 월의 전체 일 수 구하기</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getDaysNum</span> = (<span class=\"hljs-params\">year, month</span>) => <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(year, month, <span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">getDate</span>()  \n<span class=\"hljs-keyword\">const</span> day = <span class=\"hljs-title function_\">getDaysNum</span>(<span class=\"hljs-number\">2024</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// 29</span>\n</code></pre>\n<h1>배열</h1>\n<h2>배열 생성하기</h2>\n<p>0부터 99까지의 배열이 필요할 때 아래의 코드를 사용하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 방법1</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">createArr</span> = (<span class=\"hljs-params\">n</span>) => <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n), <span class=\"hljs-function\">(<span class=\"hljs-params\">v, i</span>) =></span> i)\n<span class=\"hljs-keyword\">const</span> arr = <span class=\"hljs-title function_\">createArr</span>(<span class=\"hljs-number\">100</span>)\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 방법2</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">createArr</span> = (<span class=\"hljs-params\">n</span>) => <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v, i</span>) =></span> i)\n<span class=\"hljs-title function_\">createArr</span>(<span class=\"hljs-number\">100</span>)\n</code></pre>\n<h2>배열 섞기</h2>\n<p>배열이 있고 순서를 섞어야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">randomSort</span> = list => list.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() - <span class=\"hljs-number\">0.5</span>)\n<span class=\"hljs-title function_\">randomSort</span>([<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>]) <span class=\"hljs-comment\">// 무작위 순열 결과</span>\n</code></pre>\n<h2>간단한 배열 중복 제거</h2>\n<p>배열에서 각 중복 요소의 인스턴스를 하나만 유지해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">removeDuplicates</span> = list => [...<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(list)]\n<span class=\"hljs-title function_\">removeDuplicates</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]) <span class=\"hljs-comment\">// [0,2,4,5]</span>\n</code></pre>\n<h2>배열의 고유한 값 중복 제거</h2>\n<p>고유한 값에 기반하여 배열에서 중복을 제거합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">duplicateById</span> = list => [...list.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, cur</span>) =></span> prev.<span class=\"hljs-title function_\">set</span>(cur.<span class=\"hljs-property\">id</span>, cur), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>()).<span class=\"hljs-title function_\">values</span>()]\n<span class=\"hljs-title function_\">duplicateById</span>([{<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'jack'</span>}, {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'rose'</span>}, {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'jack'</span>}])\n<span class=\"hljs-comment\">// [{id: 1, name: 'jack'}, {id: 2, name: 'rose'}]</span>\n</code></pre>\n<h2>여러 배열의 교집합</h2>\n<p>여러 배열의 교집합을 찾아야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">intersection</span> = (<span class=\"hljs-params\">a, ...arr</span>) => [...<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(a)].<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> arr.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">b</span>) =></span> b.<span class=\"hljs-title function_\">includes</span>(v)))\n\n<span class=\"hljs-title function_\">intersection</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>])\n<span class=\"hljs-comment\">// [3, 4]</span>\n</code></pre>\n<h2>최대 값의 인덱스 찾기</h2>\n<p>배열에서 최대 값의 인덱스를 찾아야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">indexOfMax</span> = (<span class=\"hljs-params\">arr</span>) => arr.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, curr, i, a</span>) =></span> (curr > a[prev] ? i : prev), <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-title function_\">indexOfMax</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">// 2</span>\n</code></pre>\n<h2>최소 값의 인덱스 찾기</h2>\n<p>배열에서 최솟값의 인덱스를 찾아야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">indexOfMin</span> = (<span class=\"hljs-params\">arr</span>) => arr.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, curr, i, a</span>) =></span> (curr &#x3C; a[prev] ? i : prev), <span class=\"hljs-number\">0</span>)\n<span class=\"hljs-title function_\">indexOfMin</span>([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>]) <span class=\"hljs-comment\">// 5</span>\n</code></pre>\n<h2>가장 가까운 숫자 값 찾기</h2>\n<p>배열에서 주어진 숫자에 가장 가까운 값을 찾아야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">closest</span> = (<span class=\"hljs-params\">arr, n</span>) => arr.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, curr</span>) =></span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(curr - n) &#x3C; <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(prev - n) ? curr : prev))\n<span class=\"hljs-title function_\">closest</span>([<span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">87</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">97</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">17</span>], <span class=\"hljs-number\">50</span>) <span class=\"hljs-comment\">// 33</span>\n</code></pre>\n<h2>여러 배열을 압축하기</h2>\n<p>여러 배열을 하나의 배열로 압축해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">zip</span> = (<span class=\"hljs-params\">...arr</span>) => <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>({ <span class=\"hljs-attr\">length</span>: <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(...arr.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a</span>) =></span> a.<span class=\"hljs-property\">length</span>)) }, <span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =></span> arr.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a</span>) =></span> a[i]))\n<span class=\"hljs-title function_\">zip</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>], [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>], [<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>, <span class=\"hljs-string\">'C'</span>, <span class=\"hljs-string\">'D'</span>])\n<span class=\"hljs-comment\">// [[1, 'a', 'A'], [2, 'b', 'B'], [3, 'c', 'C'], [4, 'd', 'D']]</span>\n</code></pre>\n<h2>행과 열 바꾸기</h2>\n<p>행과 열을 교환해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">transpose</span> = (<span class=\"hljs-params\">matrix</span>) => matrix[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">col, i</span>) =></span> matrix.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">row</span>) =></span> row[i]));\n<span class=\"hljs-title function_\">transpose</span>(\n    [              <span class=\"hljs-comment\">// [</span>\n        [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-comment\">//      [1, 4, 7],</span>\n        [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>], <span class=\"hljs-comment\">//      [2, 5, 8],</span>\n        [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>], <span class=\"hljs-comment\">//      [3, 6, 9],</span>\n     ]             <span class=\"hljs-comment\">//  ]</span>\n );\n</code></pre>\n<h1>숫자 변환</h1>\n<h2>기수 변환</h2>\n<p>기수 10에서 n으로 변환하려면 toString(n)을 사용할 수 있어요!</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">toDecimal</span> = (<span class=\"hljs-params\">num, n = <span class=\"hljs-number\">10</span></span>) => num.<span class=\"hljs-title function_\">toString</span>(n) \n<span class=\"hljs-comment\">// 만약 10을 이진수 (기수 2)로 변환해야 한다면</span>\n<span class=\"hljs-title function_\">toDecimal</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// '1010'</span>\n</code></pre>\n<p>기수 n에서 기수 10으로 변환하려면 parseInt(num, n)을 사용할 수 있어요!</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">toDecimalism</span> = (<span class=\"hljs-params\">num, n = <span class=\"hljs-number\">10</span></span>) => <span class=\"hljs-built_in\">parseInt</span>(num, n)\n<span class=\"hljs-title function_\">toDecimalism</span>(<span class=\"hljs-number\">1010</span>, <span class=\"hljs-number\">2</span>)\n</code></pre>\n<h1>기타</h1>\n<h2>두 객체 비교하기</h2>\n<p>두 객체를 비교해야 할 때 JavaScript의 등가 연산자는 객체의 주소가 동일한지만 판단할 수 있습니다. 주소가 다를 경우 두 객체의 키-값 쌍이 동일한지 여부를 판단할 수 없습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">isEqual</span> = (<span class=\"hljs-params\">...objects</span>) => objects.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">obj</span> =></span> <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(obj) === <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(objects[<span class=\"hljs-number\">0</span>]))\n<span class=\"hljs-title function_\">isEqual</span>({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'jack'</span>}, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'jack'</span>}) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title function_\">isEqual</span>({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'jack'</span>}, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'jack1'</span>}, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'jack'</span>}) <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<h2>랜덤 색상 생성</h2>\n<p>랜덤한 색상이 필요할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getRandomColor</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-string\">`#<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">0xffffff</span>).toString(<span class=\"hljs-number\">16</span>)}</span>`</span>\n<span class=\"hljs-title function_\">getRandomColor</span>() <span class=\"hljs-comment\">// '#4c2fd7'</span>\n</code></pre>\n<h2>컬러 형식 변환</h2>\n<p>16진수 색상을 RGB로 변환해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">hexToRgb</span> = hex => hex.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">_, r, g, b</span>) =></span> <span class=\"hljs-string\">`#<span class=\"hljs-subst\">${r}</span><span class=\"hljs-subst\">${r}</span><span class=\"hljs-subst\">${g}</span><span class=\"hljs-subst\">${g}</span><span class=\"hljs-subst\">${b}</span><span class=\"hljs-subst\">${b}</span>`</span>).<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/.{2}/g</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =></span> <span class=\"hljs-built_in\">parseInt</span>(x, <span class=\"hljs-number\">16</span>));\n<span class=\"hljs-title function_\">hexToRgb</span>(<span class=\"hljs-string\">'#00ffff'</span>); <span class=\"hljs-comment\">// [0, 255, 255]</span>\n<span class=\"hljs-title function_\">hexToRgb</span>(<span class=\"hljs-string\">'#0ff'</span>); <span class=\"hljs-comment\">// [0, 255, 255]</span>\n</code></pre>\n<h2>랜덤 IP 주소 가져오기</h2>\n<p>IP 주소를 생성할 때 필요한 함수입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">randomIp</span> = (<span class=\"hljs-params\"></span>) =>\n    <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">4</span>)\n        .<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>)\n        .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =></span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-number\">255</span>) + (i === <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>))\n        .<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">'.'</span>);\n</code></pre>\n<h1>UUID</h1>\n<p>ID를 생성할 때 필요한 함수입니다.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">uuid</span> = (<span class=\"hljs-params\">a</span>) => (a ? (a ^ ((<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-number\">16</span>) >> (a / <span class=\"hljs-number\">4</span>))).<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">16</span>) : ([<span class=\"hljs-number\">1e7</span>] + -<span class=\"hljs-number\">1e3</span> + -<span class=\"hljs-number\">4e3</span> + -<span class=\"hljs-number\">8e3</span> + -<span class=\"hljs-number\">1e11</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/[018]/g</span>, uuid))\n<span class=\"hljs-title function_\">uuid</span>()\n</code></pre>\n<h2>쿠키 가져오기</h2>\n<p>쿠키를 객체로 변환해야 할 때</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getCookie</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">cookie</span>\n    .<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">';'</span>)\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =></span> item.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">'='</span>))\n    .<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, [k, v]</span>) =></span> (acc[k.<span class=\"hljs-title function_\">trim</span>().<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">'\"'</span>, <span class=\"hljs-string\">''</span>)] = v) &#x26;&#x26; acc, {})\n<span class=\"hljs-title function_\">getCookie</span>()\n</code></pre>\n<h2>강제 대기</h2>\n<p>일정 시간 동안 기다려야 할 때 setTimeout 함수에 작성하고 싶지 않은 경우, 콜백 지옥을 유발할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sleep</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">t</span>) => <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =></span> <span class=\"hljs-built_in\">setTimeout</span>(resolve, t));\n<span class=\"hljs-title function_\">sleep</span>(<span class=\"hljs-number\">2000</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =></span> {<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'time'</span>)});\n</code></pre>\n<h1>간단히 말해 🚀</h1>\n<p>Thank you for being a part of the In Plain English community! Before you go:</p>\n<ul>\n<li>Be sure to clap and follow the writer 👏</li>\n<li>Follow us: X | LinkedIn | YouTube | Discord | Newsletter</li>\n<li>Visit our other platforms: Stackademic | CoFeed | Venture | Cubed</li>\n<li>Tired of blogging platforms that force you to deal with algorithmic content? Try Differ</li>\n<li>More content at PlainEnglish.io</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}