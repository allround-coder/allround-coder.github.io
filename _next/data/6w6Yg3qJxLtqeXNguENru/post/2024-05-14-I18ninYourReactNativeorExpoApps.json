{"pageProps":{"post":{"title":"리액트 네이티브 또는 엑스포 앱에서의 I18n","description":"","date":"2024-05-14 11:51","slug":"2024-05-14-I18ninYourReactNativeorExpoApps","content":"\n\n<img src=\"/assets/img/2024-05-14-I18ninYourReactNativeorExpoApps_0.png\" />\n\n현대 기술 생태계에서 지리적 경계를 넘어 전 세계 관객을 대상으로 서비스를 제공하는 것이 예외가 아닌 표준이 되었습니다.\n\ni18n-js로 시작하기\n\n# 설치\n\n\n\n```js\n# npm\nnpm install i18n-js expo-localization\n\n# yarn\nyarn add i18n-js expo-localization\n\n# pnpm\npnpm add i18n-js expo-localization\n\n# bun\nbun add i18n-js expo-localization\n```\n\n## 그런 다음 루트 또는 src 폴더에 i18n.ts 파일을 생성하십시오.\n\n```js\n// (root)/src/lib/i18n.ts\nimport { I18n } from \"i18n-js\";\nimport { getLocales } from \"expo-localization\";\n\nexport const deviceLanguage = getLocales()?.[0]?.languageCode ?? \"en\";\n\nexport const i18n = new I18n({\n  en: {\n    hello: \"hello %{name}!\"\n  },\n  zh: {\n    hello: \"안녕하세요 %{name}!\"\n  },\n});\n\ni18n.defaultLocale = deviceLanguage;\n\ni18n.locale = deviceLanguage;\n```\n\n## 그러면 locales 폴더에 다국어 JSON 파일을 생성할 수 있습니다.\n\n\n\n```js\n// (root)/src/locales/en.json\n{\n hello: \"안녕 %{name}!\"\n}\n```\n\n```js\n// (root)/src/locales/zh.json\n{\n hello: \"안녕하세요 %{name}!\"\n}\n```\n\ni18n.ts 변경사항\n\n```js\n// (root)/src/lib/i18n.ts\nimport { I18n } from \"i18n-js\";\nimport { getLocales } from \"expo-localization\";\n+import en from '../locales/en.json';\n+import zh from '../locales/zh.json';\n\nexport const deviceLanguage = getLocales()?.[0]?.languageCode ?? \"en\";\n\nexport const i18n = new I18n({\n+  en,\n+  zh,\n});\n\ni18n.defaultLocale = deviceLanguage;\n\ni18n.locale = deviceLanguage;\n```\n\n\n\n이제 컴포넌트에서 사용할 수 있어요. 여기 컴포넌트에서 translate 함수를 사용하는 예시가 있어요.\n\n```js\n// example.tsx\nimport { i18n } from '../lib/i18m';\n\nfunction Example() {\n return <div>{i18n.t(\"hello\", {name: \"Toy\"})}</div>\n}\n```\n\n하지만 로컬을 변경하고 싶어요, 어떻게 해야 할까요?\n\n걱정 마세요, i18n.ts 파일에 changeLanguage 함수를 정의할 수 있어요.\n\n\n\n```js\n// (root)/src/lib/i18n.ts\nimport { I18n } from \"i18n-js\";\nimport { getLocales } from \"expo-localization\";\nimport en from '../locales/en.json';\nimport zh from '../locales/zh.json';\n\nexport const deviceLanguage = getLocales()?.[0]?.languageCode ?? \"en\";\n\nexport const i18n = new I18n({\n  en,\n  zh,\n});\n\ni18n.defaultLocale = deviceLanguage;\ni18n.locale = deviceLanguage;\n\n+ export function changeLanguage(lang: string) {\n+  i18n.locale = lang;\n+ }\n```\n\n그런 다음 이 함수를 언어 변경 컴포넌트에 사용할 수 있습니다.\n\n```js\n// example.tsx\nimport { i18n, changeLanguage } from '../lib/i18n';\nimport { View, Button } from 'react-native';\n\nfunction Example() {\n return (\n  <View>\n   <View>{i18n.t(\"hello\", {name: \"Toy\"})}</View>\n   <Button onPress={() => changeLanguage('zh')} title=\"언어 변경\"/>\n  </View>\n );\n}\n```\n\n너무 간단해 보이지 않나요? 이 패키지는 매우 강력하고 실용적입니다.\n\n\n\n\n이 라이브러리는 Rails-i18n에서 제공하는 기본 번역을 사용할 수 있습니다.\n\n마지막으로, i18n-js에서 더 많은 정보를 읽으려면 공식 문서로 이동할 수 있습니다.\n\nReact Native 및 Expo 앱에서 i18n을 채택하면 미래를 대비한 글로벌 확장의 길이 열립니다. 국제화는 일회성 작업이 아닌 앱이 전 세계에서 관련성을 유지하고 접근성이 있으며 사용자 친화적인 지속적인 의무라는 것을 명심해야 합니다.\n\n경험 많은 개발자이든 처음 국제화를 시작하는 중이든, 전 세계적인 모바일 앱을 개발하는 길은 당신 손안에 있으며, i18n-js는 이 추구에서 믿을 수 있는 동료입니다. React Native 및 Expo 앱의 최대 잠재력을 발휘하여 세계의 언어로 강화시키는 시간입니다.\n\n\n\n이 기사를 읽어 주셔서 감사합니다. 최대한 많이 박수/추천 해 주시고 친구들과 공유도 꼭 해주세요. 제게는 매우 중요한 일이죠.","ogImage":{"url":"/assets/img/2024-05-14-I18ninYourReactNativeorExpoApps_0.png"},"coverImage":"/assets/img/2024-05-14-I18ninYourReactNativeorExpoApps_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>현대 기술 생태계에서 지리적 경계를 넘어 전 세계 관객을 대상으로 서비스를 제공하는 것이 예외가 아닌 표준이 되었습니다.</p>\n<p>i18n-js로 시작하기</p>\n<h1>설치</h1>\n<pre><code class=\"hljs language-js\"># npm\nnpm install i18n-js expo-localization\n\n# yarn\nyarn add i18n-js expo-localization\n\n# pnpm\npnpm add i18n-js expo-localization\n\n# bun\nbun add i18n-js expo-localization\n</code></pre>\n<h2>그런 다음 루트 또는 src 폴더에 i18n.ts 파일을 생성하십시오.</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// (root)/src/lib/i18n.ts</span>\n<span class=\"hljs-keyword\">import</span> { I18n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"i18n-js\"</span>;\n<span class=\"hljs-keyword\">import</span> { getLocales } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"expo-localization\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> deviceLanguage = <span class=\"hljs-title function_\">getLocales</span>()?.[<span class=\"hljs-number\">0</span>]?.<span class=\"hljs-property\">languageCode</span> ?? <span class=\"hljs-string\">\"en\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> i18n = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">I18n</span>({\n  <span class=\"hljs-attr\">en</span>: {\n    <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">\"hello %{name}!\"</span>\n  },\n  <span class=\"hljs-attr\">zh</span>: {\n    <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">\"안녕하세요 %{name}!\"</span>\n  },\n});\n\ni18n.<span class=\"hljs-property\">defaultLocale</span> = deviceLanguage;\n\ni18n.<span class=\"hljs-property\">locale</span> = deviceLanguage;\n</code></pre>\n<h2>그러면 locales 폴더에 다국어 JSON 파일을 생성할 수 있습니다.</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// (root)/src/locales/en.json</span>\n{\n <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">\"안녕 %{name}!\"</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// (root)/src/locales/zh.json</span>\n{\n <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">\"안녕하세요 %{name}!\"</span>\n}\n</code></pre>\n<p>i18n.ts 변경사항</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// (root)/src/lib/i18n.ts</span>\n<span class=\"hljs-keyword\">import</span> { I18n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"i18n-js\"</span>;\n<span class=\"hljs-keyword\">import</span> { getLocales } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"expo-localization\"</span>;\n+<span class=\"hljs-keyword\">import</span> en <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../locales/en.json'</span>;\n+<span class=\"hljs-keyword\">import</span> zh <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../locales/zh.json'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> deviceLanguage = <span class=\"hljs-title function_\">getLocales</span>()?.[<span class=\"hljs-number\">0</span>]?.<span class=\"hljs-property\">languageCode</span> ?? <span class=\"hljs-string\">\"en\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> i18n = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">I18n</span>({\n+  en,\n+  zh,\n});\n\ni18n.<span class=\"hljs-property\">defaultLocale</span> = deviceLanguage;\n\ni18n.<span class=\"hljs-property\">locale</span> = deviceLanguage;\n</code></pre>\n<p>이제 컴포넌트에서 사용할 수 있어요. 여기 컴포넌트에서 translate 함수를 사용하는 예시가 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// example.tsx</span>\n<span class=\"hljs-keyword\">import</span> { i18n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../lib/i18m'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Example</span>(<span class=\"hljs-params\"></span>) {\n <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>{i18n.t(\"hello\", {name: \"Toy\"})}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n}\n</code></pre>\n<p>하지만 로컬을 변경하고 싶어요, 어떻게 해야 할까요?</p>\n<p>걱정 마세요, i18n.ts 파일에 changeLanguage 함수를 정의할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// (root)/src/lib/i18n.ts</span>\n<span class=\"hljs-keyword\">import</span> { I18n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"i18n-js\"</span>;\n<span class=\"hljs-keyword\">import</span> { getLocales } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"expo-localization\"</span>;\n<span class=\"hljs-keyword\">import</span> en <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../locales/en.json'</span>;\n<span class=\"hljs-keyword\">import</span> zh <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../locales/zh.json'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> deviceLanguage = <span class=\"hljs-title function_\">getLocales</span>()?.[<span class=\"hljs-number\">0</span>]?.<span class=\"hljs-property\">languageCode</span> ?? <span class=\"hljs-string\">\"en\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> i18n = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">I18n</span>({\n  en,\n  zh,\n});\n\ni18n.<span class=\"hljs-property\">defaultLocale</span> = deviceLanguage;\ni18n.<span class=\"hljs-property\">locale</span> = deviceLanguage;\n\n+ <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeLanguage</span>(<span class=\"hljs-params\">lang: string</span>) {\n+  i18n.<span class=\"hljs-property\">locale</span> = lang;\n+ }\n</code></pre>\n<p>그런 다음 이 함수를 언어 변경 컴포넌트에 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// example.tsx</span>\n<span class=\"hljs-keyword\">import</span> { i18n, changeLanguage } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../lib/i18n'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">View</span>, <span class=\"hljs-title class_\">Button</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Example</span>(<span class=\"hljs-params\"></span>) {\n <span class=\"hljs-keyword\">return</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">View</span>></span>\n   <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">View</span>></span>{i18n.t(\"hello\", {name: \"Toy\"})}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">View</span>></span>\n   <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onPress</span>=<span class=\"hljs-string\">{()</span> =></span> changeLanguage('zh')} title=\"언어 변경\"/>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">View</span>></span></span>\n );\n}\n</code></pre>\n<p>너무 간단해 보이지 않나요? 이 패키지는 매우 강력하고 실용적입니다.</p>\n<p>이 라이브러리는 Rails-i18n에서 제공하는 기본 번역을 사용할 수 있습니다.</p>\n<p>마지막으로, i18n-js에서 더 많은 정보를 읽으려면 공식 문서로 이동할 수 있습니다.</p>\n<p>React Native 및 Expo 앱에서 i18n을 채택하면 미래를 대비한 글로벌 확장의 길이 열립니다. 국제화는 일회성 작업이 아닌 앱이 전 세계에서 관련성을 유지하고 접근성이 있으며 사용자 친화적인 지속적인 의무라는 것을 명심해야 합니다.</p>\n<p>경험 많은 개발자이든 처음 국제화를 시작하는 중이든, 전 세계적인 모바일 앱을 개발하는 길은 당신 손안에 있으며, i18n-js는 이 추구에서 믿을 수 있는 동료입니다. React Native 및 Expo 앱의 최대 잠재력을 발휘하여 세계의 언어로 강화시키는 시간입니다.</p>\n<p>이 기사를 읽어 주셔서 감사합니다. 최대한 많이 박수/추천 해 주시고 친구들과 공유도 꼭 해주세요. 제게는 매우 중요한 일이죠.</p>\n</body>\n</html>\n"},"__N_SSG":true}