{"pageProps":{"post":{"title":"Angular에서 폼 유효성을 갖춘 인풋 요소 만들기","description":"","date":"2024-05-02 00:18","slug":"2024-05-02-BuildingaCustomInputComponentwithFormValidationinAngular","content":"\n\n<img src=\"/assets/img/2024-05-02-BuildingaCustomInputComponentwithFormValidationinAngular_0.png\" />\n\n현대 웹 개발에서 재사용 가능하고 유효성이 검증된 폼 컴포넌트를 만드는 것은 매우 중요합니다. Angular를 탐험하는 이 과정에서 여러 입력 유형을 처리하고 Angular 애플리케이션 내에서 신속하게 폼 유효성을 검증하는 다목적 Custom Input Component를 만들었습니다.\n\n# 1. Angular 프로젝트 설정하기:\n\n새로운 Angular 프로젝트 생성하기:\n\n<div class=\"content-ad\"></div>\n\n```js\nng new custom-input-project\n```\n\n커스텀 입력 컴포넌트 생성:\n\n```js\nng generate component custom-input\n```\n\n## 디렉토리 구조:\n\n<div class=\"content-ad\"></div>\n\n```js\n사용자 정의 입력 프로젝트/\n├── src/\n│ ├── app/\n│ │ ├── custom-input/\n│ │ │ ├── custom-input.component.html\n│ │ │ ├── custom-input.component.css\n│ │ │ ├── custom-input.component.spec.ts\n│ │ │ └── custom-input.component.ts\n│ │ ├── app.component.html\n│ │ ├── app.component.css\n│ │ ├── app.component.spec.ts\n│ │ └── app.component.ts\n│ │ ├── app.module.ts\n│ │ └── …\n│ └── …\n└── …\n```\n\n# 2. 커스텀 입력 컴포넌트 생성하기:\n\nCustomInputComponent는 입력 필드를 캡슐화하고 다양한 입력 유형을 처리하며 Angular의 FormControl 및 Validators를 사용하여 기본 양식 유효성을 구현할 것입니다.\n\n## 컴포넌트 구조(custom-input.component.ts):\n\n<div class=\"content-ad\"></div>\n\nThe CustomInputComponent TypeScript file (custom-input.component.ts):\n\n```js\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-custom-input',\n  templateUrl: './custom-input.component.html',\n  styleUrls: ['./custom-input.component.css']\n})\nexport class CustomInputComponent {\n  @Input() label: string = '';\n  @Input() type: string = 'text';\n  @Output() valueChange = new EventEmitter<string>();\n\n  control: FormControl = new FormControl('', Validators.required);\n\n  get value(): string {\n    return this.control.value;\n  }\n\n  set value(val: string) {\n    this.control.setValue(val);\n    this.valueChange.emit(val);\n  }\n}\n```\n\nComponent Template (custom-input.component.html):\n\nThe CustomInputComponent HTML template (custom-input.component.html):\n\n<div class=\"content-ad\"></div>\n\n```js\n<div class=\"form-group\">\n  <label>{ label }</label>\n  <input\n    [type]=\"type\"\n    class=\"form-control\"\n    [formControl]=\"control\"\n    [attr.placeholder]=\"label\"\n  />\n  <div *ngIf=\"control.invalid && control.touched\" class=\"text-danger\">\n    This field is required.\n  </div>\n</div>\n```\n\n## 설명:\n\n- CustomInputComponent TypeScript 파일은 컴포넌트의 논리를 정의합니다.\n- @Input을 사용하여 label 및 type 속성을 받아들이고, @Output을 사용하여 값 변경을 발생시킵니다.\n- FormControl은 기본 유효성 검사를 포함한 폼 처리에 활용됩니다 (이 경우, 필수 필드).\n- 템플릿은 입력 필드를 렌더링하고 필수 필드에 대한 유효성 검사 메시지를 표시합니다.\n- 컴포넌트 스타일은 UI 조정에 필요한 대로 사용자 정의할 수 있습니다.\n\n# 3. 폼에서 사용자 정의 입력 구현하기:```\n\n<div class=\"content-ad\"></div>\n\n사용자 지정 입력 구성 요소를 반응형 양식 내에서 통합하는 것은 Angular 양식 환경 내에서의 기능을 보여줍니다.\n\n컴포넌트의 상위 (app.component.ts):\n\n```js\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  form: FormGroup;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      name: ['', Validators.required],\n    });\n  }\n}\n```\n\n상위 컴포넌트의 템플릿 (app.component.html):\n\n<div class=\"content-ad\"></div>\n\n```js\n<form [formGroup]=\"form\">\n  <app-custom-input\n    label=\"이름 입력\"\n    [type]=\"'text'\"\n    formControlName=\"name\"\n  ></app-custom-input>\n</form>\n```\n\n## 설명:\n\n- AppComponent는 FormBuilder를 사용하여 form group 및 input 필드에 대한 form control을 생성합니다.\n- 상위 컴포넌트 템플릿(app.component.html)에서 CustomInputComponent가 form 내부에서 사용되고 formControlName을 사용하여 form control에 바인딩됩니다.\n- label 및 input type은 CustomInputComponent의 @Input 속성으로 지정됩니다.\n- CustomInputComponent 내의 input 필드는 이제 Angular 반응형 폼 내에서 작동하며 유효성 검증을 위해 form control 속성을 활용합니다.\n\n# 4. Custom Input Component 테스트하기:\n\n<div class=\"content-ad\"></div>\n\n사용자 지정 입력 구성 요소의 유효성 및 기능을 서로 다른 입력 유형 및 유효성 검사 시나리오에 걸쳐 검증하고 테스트하는 것이 중요합니다.\n\n구성 요소 테스트 (custom-input.component.spec.ts):\n\n```js\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule, FormGroup, FormBuilder } from '@angular/forms';\nimport { CustomInputComponent } from './custom-input.component';\n\ndescribe('CustomInputComponent', () => {\n  let component: CustomInputComponent;\n  let fixture: ComponentFixture<CustomInputComponent>;\n  let formBuilder: FormBuilder;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [CustomInputComponent],\n      imports: [ReactiveFormsModule],\n    }).compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CustomInputComponent);\n    component = fixture.componentInstance;\n    formBuilder = TestBed.inject(FormBuilder);\n    fixture.detectChanges();\n  });\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should display the input field', () => {\n    const compiled = fixture.nativeElement;\n    expect(compiled.querySelector('input')).toBeTruthy();\n  });\n\n  it('should validate required field', () => {\n    const control = formBuilder.control('', { required: true });\n    const form = formBuilder.group({ testInput: control });\n\n    component.control = control;\n    fixture.detectChanges();\n\n    expect(form.valid).toBeFalsy();\n\n    const input = fixture.nativeElement.querySelector('input');\n    input.value = 'Test Value';\n    input.dispatchEvent(new Event('input'));\n\n    fixture.detectChanges();\n    expect(form.valid).toBeTruthy();\n  });\n\n  it('should render the label', () => {\n    component.label = 'Test Label';\n    fixture.detectChanges();\n\n    const compiled = fixture.nativeElement;\n    expect(compiled.querySelector('label').textContent).toContain('Test Label');\n  });\n\n  // 다양한 입력 유형, 유효성 검사 및 동작에 대한 더 구체적인 테스트 추가\n});\n```\n\n## 설명:\n\n<div class=\"content-ad\"></div>\n\n- CustomInputComponent의 테스트 스위트에는 입력 컴포넌트의 다양한 측면을 검증하는 여러 테스트가 포함되어 있습니다.\n- 첫 번째 테스트는 CustomInputComponent의 성공적인 생성을 확인합니다.\n- 두 번째 테스트는 입력 필드가 컴포넌트 내에 표시되는지 확인합니다.\n- 세 번째 테스트는 필수 필드 기능을 확인합니다. 폼 컨트롤을 생성하고 컴포넌트에 할당하며 사용자 입력을 시뮬레이트하여 필드의 유효성을 확인합니다.\n- 네 번째 테스트는 컴포넌트 내에 레이블이 렌더링되는지 확인합니다.\n\n# 결론:\n\nAngular의 기능을 통해 유연성과 신뢰성에 뛰어난 Custom Input Component를 구축했습니다. 시작부터 철저한 테스트까지, Angular 애플리케이션 내에서 폼 상호 작용을 증진시키는 재사용 가능한 컴포넌트를 만드는 과정을 탐험했습니다. 이 여정은 다양하고 검증된 입력 필드를 통해 사용자 중심 경험을 만드는 길을 열어줍니다.","ogImage":{"url":"/assets/img/2024-05-02-BuildingaCustomInputComponentwithFormValidationinAngular_0.png"},"coverImage":"/assets/img/2024-05-02-BuildingaCustomInputComponentwithFormValidationinAngular_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>현대 웹 개발에서 재사용 가능하고 유효성이 검증된 폼 컴포넌트를 만드는 것은 매우 중요합니다. Angular를 탐험하는 이 과정에서 여러 입력 유형을 처리하고 Angular 애플리케이션 내에서 신속하게 폼 유효성을 검증하는 다목적 Custom Input Component를 만들었습니다.</p>\n<h1>1. Angular 프로젝트 설정하기:</h1>\n<p>새로운 Angular 프로젝트 생성하기:</p>\n<pre><code class=\"hljs language-js\">ng <span class=\"hljs-keyword\">new</span> custom-input-project\n</code></pre>\n<p>커스텀 입력 컴포넌트 생성:</p>\n<pre><code class=\"hljs language-js\">ng generate component custom-input\n</code></pre>\n<h2>디렉토리 구조:</h2>\n<pre><code class=\"hljs language-js\">사용자 정의 입력 프로젝트/\n├── src/\n│ ├── app/\n│ │ ├── custom-input/\n│ │ │ ├── custom-input.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">html</span>\n│ │ │ ├── custom-input.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">css</span>\n│ │ │ ├── custom-input.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">spec</span>.<span class=\"hljs-property\">ts</span>\n│ │ │ └── custom-input.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">ts</span>\n│ │ ├── app.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">html</span>\n│ │ ├── app.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">css</span>\n│ │ ├── app.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">spec</span>.<span class=\"hljs-property\">ts</span>\n│ │ └── app.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">ts</span>\n│ │ ├── app.<span class=\"hljs-property\">module</span>.<span class=\"hljs-property\">ts</span>\n│ │ └── …\n│ └── …\n└── …\n</code></pre>\n<h1>2. 커스텀 입력 컴포넌트 생성하기:</h1>\n<p>CustomInputComponent는 입력 필드를 캡슐화하고 다양한 입력 유형을 처리하며 Angular의 FormControl 및 Validators를 사용하여 기본 양식 유효성을 구현할 것입니다.</p>\n<h2>컴포넌트 구조(custom-input.component.ts):</h2>\n<p>The CustomInputComponent TypeScript file (custom-input.component.ts):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">Input</span>, <span class=\"hljs-title class_\">Output</span>, <span class=\"hljs-title class_\">EventEmitter</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FormControl</span>, <span class=\"hljs-title class_\">Validators</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-custom-input'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./custom-input.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./custom-input.component.css'</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomInputComponent</span> {\n  @<span class=\"hljs-title class_\">Input</span>() <span class=\"hljs-attr\">label</span>: string = <span class=\"hljs-string\">''</span>;\n  @<span class=\"hljs-title class_\">Input</span>() <span class=\"hljs-attr\">type</span>: string = <span class=\"hljs-string\">'text'</span>;\n  @<span class=\"hljs-title class_\">Output</span>() valueChange = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventEmitter</span>&#x3C;string>();\n\n  <span class=\"hljs-attr\">control</span>: <span class=\"hljs-title class_\">FormControl</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormControl</span>(<span class=\"hljs-string\">''</span>, <span class=\"hljs-title class_\">Validators</span>.<span class=\"hljs-property\">required</span>);\n\n  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">value</span>(): string {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">control</span>.<span class=\"hljs-property\">value</span>;\n  }\n\n  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">value</span>(<span class=\"hljs-params\">val: string</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">control</span>.<span class=\"hljs-title function_\">setValue</span>(val);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">valueChange</span>.<span class=\"hljs-title function_\">emit</span>(val);\n  }\n}\n</code></pre>\n<p>Component Template (custom-input.component.html):</p>\n<p>The CustomInputComponent HTML template (custom-input.component.html):</p>\n<pre><code class=\"hljs language-js\">&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"form-group\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>{ label }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n    [<span class=\"hljs-attr\">type</span>]=<span class=\"hljs-string\">\"type\"</span>\n    <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form-control\"</span>\n    [<span class=\"hljs-attr\">formControl</span>]=<span class=\"hljs-string\">\"control\"</span>\n    [<span class=\"hljs-attr\">attr.placeholder</span>]=<span class=\"hljs-string\">\"label\"</span>\n  /></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"control.invalid &#x26;&#x26; control.touched\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text-danger\"</span>></span>\n    This field is required.\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n&#x3C;/div>\n</code></pre>\n<h2>설명:</h2>\n<ul>\n<li>CustomInputComponent TypeScript 파일은 컴포넌트의 논리를 정의합니다.</li>\n<li>@Input을 사용하여 label 및 type 속성을 받아들이고, @Output을 사용하여 값 변경을 발생시킵니다.</li>\n<li>FormControl은 기본 유효성 검사를 포함한 폼 처리에 활용됩니다 (이 경우, 필수 필드).</li>\n<li>템플릿은 입력 필드를 렌더링하고 필수 필드에 대한 유효성 검사 메시지를 표시합니다.</li>\n<li>컴포넌트 스타일은 UI 조정에 필요한 대로 사용자 정의할 수 있습니다.</li>\n</ul>\n<h1>3. 폼에서 사용자 정의 입력 구현하기:```</h1>\n<p>사용자 지정 입력 구성 요소를 반응형 양식 내에서 통합하는 것은 Angular 양식 환경 내에서의 기능을 보여줍니다.</p>\n<p>컴포넌트의 상위 (app.component.ts):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">OnInit</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FormBuilder</span>, <span class=\"hljs-title class_\">FormGroup</span>, <span class=\"hljs-title class_\">Validators</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-root'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./app.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./app.component.css'</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> implements <span class=\"hljs-title class_\">OnInit</span> {\n  <span class=\"hljs-attr\">form</span>: <span class=\"hljs-title class_\">FormGroup</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private fb: FormBuilder</span>) {}\n\n  <span class=\"hljs-title function_\">ngOnInit</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">form</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fb</span>.<span class=\"hljs-title function_\">group</span>({\n      <span class=\"hljs-attr\">name</span>: [<span class=\"hljs-string\">''</span>, <span class=\"hljs-title class_\">Validators</span>.<span class=\"hljs-property\">required</span>],\n    });\n  }\n}\n</code></pre>\n<p>상위 컴포넌트의 템플릿 (app.component.html):</p>\n<pre><code class=\"hljs language-js\">&#x3C;form [formGroup]=<span class=\"hljs-string\">\"form\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">app-custom-input</span>\n    <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"이름 입력\"</span>\n    [<span class=\"hljs-attr\">type</span>]=<span class=\"hljs-string\">\"'text'\"</span>\n    <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"name\"</span>\n  ></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">app-custom-input</span>></span></span>\n&#x3C;/form>\n</code></pre>\n<h2>설명:</h2>\n<ul>\n<li>AppComponent는 FormBuilder를 사용하여 form group 및 input 필드에 대한 form control을 생성합니다.</li>\n<li>상위 컴포넌트 템플릿(app.component.html)에서 CustomInputComponent가 form 내부에서 사용되고 formControlName을 사용하여 form control에 바인딩됩니다.</li>\n<li>label 및 input type은 CustomInputComponent의 @Input 속성으로 지정됩니다.</li>\n<li>CustomInputComponent 내의 input 필드는 이제 Angular 반응형 폼 내에서 작동하며 유효성 검증을 위해 form control 속성을 활용합니다.</li>\n</ul>\n<h1>4. Custom Input Component 테스트하기:</h1>\n<p>사용자 지정 입력 구성 요소의 유효성 및 기능을 서로 다른 입력 유형 및 유효성 검사 시나리오에 걸쳐 검증하고 테스트하는 것이 중요합니다.</p>\n<p>구성 요소 테스트 (custom-input.component.spec.ts):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ComponentFixture</span>, <span class=\"hljs-title class_\">TestBed</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core/testing'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ReactiveFormsModule</span>, <span class=\"hljs-title class_\">FormGroup</span>, <span class=\"hljs-title class_\">FormBuilder</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CustomInputComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./custom-input.component'</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">'CustomInputComponent'</span>, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">CustomInputComponent</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">fixture</span>: <span class=\"hljs-title class_\">ComponentFixture</span>&#x3C;<span class=\"hljs-title class_\">CustomInputComponent</span>>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">formBuilder</span>: <span class=\"hljs-title class_\">FormBuilder</span>;\n\n  <span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-keyword\">async</span> () => {\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">TestBed</span>.<span class=\"hljs-title function_\">configureTestingModule</span>({\n      <span class=\"hljs-attr\">declarations</span>: [<span class=\"hljs-title class_\">CustomInputComponent</span>],\n      <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">ReactiveFormsModule</span>],\n    }).<span class=\"hljs-title function_\">compileComponents</span>();\n  });\n\n  <span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =></span> {\n    fixture = <span class=\"hljs-title class_\">TestBed</span>.<span class=\"hljs-title function_\">createComponent</span>(<span class=\"hljs-title class_\">CustomInputComponent</span>);\n    component = fixture.<span class=\"hljs-property\">componentInstance</span>;\n    formBuilder = <span class=\"hljs-title class_\">TestBed</span>.<span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">FormBuilder</span>);\n    fixture.<span class=\"hljs-title function_\">detectChanges</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">'should create the component'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">expect</span>(component).<span class=\"hljs-title function_\">toBeTruthy</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">'should display the input field'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> compiled = fixture.<span class=\"hljs-property\">nativeElement</span>;\n    <span class=\"hljs-title function_\">expect</span>(compiled.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">'input'</span>)).<span class=\"hljs-title function_\">toBeTruthy</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">'should validate required field'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> control = formBuilder.<span class=\"hljs-title function_\">control</span>(<span class=\"hljs-string\">''</span>, { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> });\n    <span class=\"hljs-keyword\">const</span> form = formBuilder.<span class=\"hljs-title function_\">group</span>({ <span class=\"hljs-attr\">testInput</span>: control });\n\n    component.<span class=\"hljs-property\">control</span> = control;\n    fixture.<span class=\"hljs-title function_\">detectChanges</span>();\n\n    <span class=\"hljs-title function_\">expect</span>(form.<span class=\"hljs-property\">valid</span>).<span class=\"hljs-title function_\">toBeFalsy</span>();\n\n    <span class=\"hljs-keyword\">const</span> input = fixture.<span class=\"hljs-property\">nativeElement</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">'input'</span>);\n    input.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">'Test Value'</span>;\n    input.<span class=\"hljs-title function_\">dispatchEvent</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Event</span>(<span class=\"hljs-string\">'input'</span>));\n\n    fixture.<span class=\"hljs-title function_\">detectChanges</span>();\n    <span class=\"hljs-title function_\">expect</span>(form.<span class=\"hljs-property\">valid</span>).<span class=\"hljs-title function_\">toBeTruthy</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">'should render the label'</span>, <span class=\"hljs-function\">() =></span> {\n    component.<span class=\"hljs-property\">label</span> = <span class=\"hljs-string\">'Test Label'</span>;\n    fixture.<span class=\"hljs-title function_\">detectChanges</span>();\n\n    <span class=\"hljs-keyword\">const</span> compiled = fixture.<span class=\"hljs-property\">nativeElement</span>;\n    <span class=\"hljs-title function_\">expect</span>(compiled.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">'label'</span>).<span class=\"hljs-property\">textContent</span>).<span class=\"hljs-title function_\">toContain</span>(<span class=\"hljs-string\">'Test Label'</span>);\n  });\n\n  <span class=\"hljs-comment\">// 다양한 입력 유형, 유효성 검사 및 동작에 대한 더 구체적인 테스트 추가</span>\n});\n</code></pre>\n<h2>설명:</h2>\n<ul>\n<li>CustomInputComponent의 테스트 스위트에는 입력 컴포넌트의 다양한 측면을 검증하는 여러 테스트가 포함되어 있습니다.</li>\n<li>첫 번째 테스트는 CustomInputComponent의 성공적인 생성을 확인합니다.</li>\n<li>두 번째 테스트는 입력 필드가 컴포넌트 내에 표시되는지 확인합니다.</li>\n<li>세 번째 테스트는 필수 필드 기능을 확인합니다. 폼 컨트롤을 생성하고 컴포넌트에 할당하며 사용자 입력을 시뮬레이트하여 필드의 유효성을 확인합니다.</li>\n<li>네 번째 테스트는 컴포넌트 내에 레이블이 렌더링되는지 확인합니다.</li>\n</ul>\n<h1>결론:</h1>\n<p>Angular의 기능을 통해 유연성과 신뢰성에 뛰어난 Custom Input Component를 구축했습니다. 시작부터 철저한 테스트까지, Angular 애플리케이션 내에서 폼 상호 작용을 증진시키는 재사용 가능한 컴포넌트를 만드는 과정을 탐험했습니다. 이 여정은 다양하고 검증된 입력 필드를 통해 사용자 중심 경험을 만드는 길을 열어줍니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}