{"pageProps":{"post":{"title":"React-router를 사용하여 네비게이션 바 만들기","description":"","date":"2024-05-12 20:08","slug":"2024-05-12-Creatingnavbarusingreact-router","content":"\n\n안녕하세요 여러분! 어떻게 하고 계신가요?\n\n여기서는 React 라우팅 모듈을 사용하여 React 네비게이션 바를 설정하는 방법에 대해 자세히 알아보겠습니다. 이 방법 외에도 다른 방법들이 있지만, 저는 이 방법을 선호합니다. 보다 간결하고 오류를 방지할 수 있기 때문이죠. 단계별로 진행해보겠습니다.\n\n단계1\n\n먼저 다음 명령어를 사용하여 React 앱을 설정할 것입니다:\n\n\n\n여기에는 시스템에 최신 노드 버전이 설치되어 있어야 합니다.\n\n단계 2\n\n앱의 src 디렉터리 내에 컴포넌트 폴더를 만들고 다음과 같이 네비게이션 바에 표시할 세 개의 컴포넌트를 만드십시오.\n\n![Creatingnavbarusingreact-router](/assets/img/2024-05-12-Creatingnavbarusingreact-router_0.png)\n\n\n\n### 단계 3:\n\n이제 리액트 라우터 라이브러리를 설치할 것입니다.\n\n리액트 라우터는 리액트에서 경로 지정을 위한 표준 라이브러리입니다. 리액트 애플리케이션의 다양한 컴포넌트 뷰 간의 이동을 활성화하며, 브라우저 URL을 변경 가능하게 하고 UI가 URL과 동기화되도록 합니다.\n\n기억해야 할 한 가지는 버전이 `6.3여야 한다는 것입니다. 이전 버전은 이 프로젝트에서 사용할 일부 자식 컴포넌트를 지원하지 않습니다.\n\n\n\n![이미지](/assets/img/2024-05-12-Creatingnavbarusingreact-router_1.png)\n\n### 단계 4\n\n다음으로 할 일은 index.js에서 react-router-dom에서 BrowserRouter를 import하는 것입니다. 그런 다음, 우리가 만들어진 앱을 browserRouter로 감싸줄 것입니다. 우리의 index.js 파일은 다음과 같이 보일 것입니다:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\nreportWebVitals();\n```\n\n\n\n5단계\n\n이제 네비게이션 바 페이지를 만들어봅시다. 먼저, React Router DOM에서 Link 컴포넌트를 가져와야 합니다. Link는 다른 경로로의 링크를 생성하고 애플리케이션에서 탐색을 구현하는 데 사용됩니다. 네비게이션 바의 앵커 태그 역할을 하는데, 'to'를 사용하여 경로를 정의합니다('to'는 href와 유사합니다). 우리의 네비게이션 바는 다음과 같이 보여야 합니다:\n\n```js\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Navbar=()=>{\n    return (    \n                <div className='navBar'>\n                    <div className='stocks'>\n                        <Link to=\"/\">Stocks</Link>\n                    </div>\n                    <div className='favourites'>\n                        <Link to=\"/favourites\">Favourite</Link>\n                    </div>\n                    <div className='cart'>\n                        <Link to=\"/cart\">Cart</Link>\n                    </div>\n                </div>\n    )\n\n}\n\nexport default Navbar;\n```\n\n6단계\n\n\n\napp.js로 이동하여 react-router-dom에서 Route 및 routes 컴포넌트를 가져옵니다. Routes 컴포넌트에는 모든 경로가 포함되어 있고, route는 선택할 수있는 개별 경로를 정의합니다. 우리의 app.js는 이렇게 보일 것입니다:\n\n```js\nimport './App.css';\nimport { Route, Routes } from 'react-router-dom';\nimport Navbar from './components/navbar';\nimport Stocks from './components/stocks';\nimport Favourites from './components/favourites';\nimport Cart from './components/cart';\n\nfunction App() {\n  return (\n   <>\n    <Navbar/>\n      <div>\n    <Routes>        \n      <Route path=\"/\"  element={<Stocks/>} />\n      <Route path=\"/favourites\"  element={<Favourites />}/>\n      <Route path=\"/cart\"  element={<Cart/>}/>\n    </Routes>\n    </div>\n    </>\n   \n  );\n}\n\nexport default App;\n```\n\n그런 다음 우리는 일치하는 경로를 사용하여 element로 컴포넌트를 정의합니다.\n\n우와!!! 우리의 네비게이션 바가 사용할 준비가 되었습니다. 전체 코드는 GitHub에서 확인할 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-12-Creatingnavbarusingreact-router_0.png"},"coverImage":"/assets/img/2024-05-12-Creatingnavbarusingreact-router_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요 여러분! 어떻게 하고 계신가요?</p>\n<p>여기서는 React 라우팅 모듈을 사용하여 React 네비게이션 바를 설정하는 방법에 대해 자세히 알아보겠습니다. 이 방법 외에도 다른 방법들이 있지만, 저는 이 방법을 선호합니다. 보다 간결하고 오류를 방지할 수 있기 때문이죠. 단계별로 진행해보겠습니다.</p>\n<p>단계1</p>\n<p>먼저 다음 명령어를 사용하여 React 앱을 설정할 것입니다:</p>\n<p>여기에는 시스템에 최신 노드 버전이 설치되어 있어야 합니다.</p>\n<p>단계 2</p>\n<p>앱의 src 디렉터리 내에 컴포넌트 폴더를 만들고 다음과 같이 네비게이션 바에 표시할 세 개의 컴포넌트를 만드십시오.</p>\n<p><img src=\"/assets/img/2024-05-12-Creatingnavbarusingreact-router_0.png\" alt=\"Creatingnavbarusingreact-router\"></p>\n<h3>단계 3:</h3>\n<p>이제 리액트 라우터 라이브러리를 설치할 것입니다.</p>\n<p>리액트 라우터는 리액트에서 경로 지정을 위한 표준 라이브러리입니다. 리액트 애플리케이션의 다양한 컴포넌트 뷰 간의 이동을 활성화하며, 브라우저 URL을 변경 가능하게 하고 UI가 URL과 동기화되도록 합니다.</p>\n<p>기억해야 할 한 가지는 버전이 `6.3여야 한다는 것입니다. 이전 버전은 이 프로젝트에서 사용할 일부 자식 컴포넌트를 지원하지 않습니다.</p>\n<p><img src=\"/assets/img/2024-05-12-Creatingnavbarusingreact-router_1.png\" alt=\"이미지\"></p>\n<h3>단계 4</h3>\n<p>다음으로 할 일은 index.js에서 react-router-dom에서 BrowserRouter를 import하는 것입니다. 그런 다음, 우리가 만들어진 앱을 browserRouter로 감싸줄 것입니다. 우리의 index.js 파일은 다음과 같이 보일 것입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ReactDOM</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom/client'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./index.css'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./App'</span>;\n<span class=\"hljs-keyword\">import</span> reportWebVitals <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./reportWebVitals'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserRouter</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n\n<span class=\"hljs-keyword\">const</span> root = <span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">createRoot</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'root'</span>));\nroot.<span class=\"hljs-title function_\">render</span>(\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">React.StrictMode</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">BrowserRouter</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">App</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">BrowserRouter</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">React.StrictMode</span>></span></span>\n);\n<span class=\"hljs-title function_\">reportWebVitals</span>();\n</code></pre>\n<p>5단계</p>\n<p>이제 네비게이션 바 페이지를 만들어봅시다. 먼저, React Router DOM에서 Link 컴포넌트를 가져와야 합니다. Link는 다른 경로로의 링크를 생성하고 애플리케이션에서 탐색을 구현하는 데 사용됩니다. 네비게이션 바의 앵커 태그 역할을 하는데, 'to'를 사용하여 경로를 정의합니다('to'는 href와 유사합니다). 우리의 네비게이션 바는 다음과 같이 보여야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">Link</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Navbar</span>=(<span class=\"hljs-params\"></span>)=>{\n    <span class=\"hljs-keyword\">return</span> (    \n                <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">'navBar'</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">'stocks'</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/\"</span>></span>Stocks<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Link</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">'favourites'</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/favourites\"</span>></span>Favourite<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Link</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">'cart'</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/cart\"</span>></span>Cart<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Link</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    )\n\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Navbar</span>;\n</code></pre>\n<p>6단계</p>\n<p>app.js로 이동하여 react-router-dom에서 Route 및 routes 컴포넌트를 가져옵니다. Routes 컴포넌트에는 모든 경로가 포함되어 있고, route는 선택할 수있는 개별 경로를 정의합니다. 우리의 app.js는 이렇게 보일 것입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Route</span>, <span class=\"hljs-title class_\">Routes</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Navbar</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/navbar'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Stocks</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/stocks'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Favourites</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/favourites'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Cart</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/cart'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n   <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Navbar</span>/></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Routes</span>></span>        \n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/\"</span>  <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">Stocks</span>/></span>} />\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/favourites\"</span>  <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">Favourites</span> /></span>}/>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/cart\"</span>  <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">Cart</span>/></span>}/>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Routes</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/></span></span>\n   \n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>그런 다음 우리는 일치하는 경로를 사용하여 element로 컴포넌트를 정의합니다.</p>\n<p>우와!!! 우리의 네비게이션 바가 사용할 준비가 되었습니다. 전체 코드는 GitHub에서 확인할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}