{"pageProps":{"post":{"title":"리액트 네이티브 이미지 피커 구현에 대한 심층 탐구","description":"","date":"2024-05-12 22:16","slug":"2024-05-12-DeepDiveintoImplementingreact-native-image-picker","content":"\n\n<img src=\"/assets/img/2024-05-12-DeepDiveintoImplementingreact-native-image-picker_0.png\" />\n\n현대 애플리케이션에서 사용자가 프로필에 사진을 업로드할 수 있는 기능을 제공하는 것은 표준입니다. 사용자들이 계속해서 앱을 방문할 수 있도록 최상의 경험을 제공하는 것이 매우 중요합니다.\n\nReact-Native로 모바일 앱을 개발 중이라면, react-native-image-picker 덕분에 이것을 아주 쉽게 구현할 수 있습니다.\n\n# 내 앱은 어떤 이미지 형식을 지원해야 할까요?\n\n\n\n첫 번째로 해야 할 질문은 \"내 앱이 지원해야 하는 이미지 유형은 무엇인가?\"입니다. 다양한 이미지 유형이 존재하며, 모든 종류의 사람들을 대상으로 하는 앱을 원한다면 특히 혼란스럽고 압도될 수 있습니다. React Native는 이를 우리에게 아주 쉽게 만들어줍니다.\n\n그래서 선택지를 좁힐 수 있습니다. 이 목록에 언급되지 않은 것 중 하나는 Base64입니다. Base64는 이진 데이터를 나타내는 이진-텍스트 인코딩 체계의 한 그룹입니다.\n\n# React-Native-Image-Picker\n\n## React Native Image Picker란 무엇인가요?\n\n\n\nReact-Native-Image-Picker은 React Native 모듈로, 기기 라이브러리에서 미디어를 선택하거나 직접 카메라에서 가져 올 수 있도록 네이티브 UI를 사용할 수 있게 해줍니다. 현재 약 60,000명의 개발자가 사용 중이며, 제공되는 기능이 매우 견고하기 때문에 많은 사람들이 사용하고 있습니다.\n\n## React-Native-Image-Picker 설치 및 설정하는 방법\n\n먼저 패키지를 프로젝트에 설치합니다:\n\nAndroid:\n\n\n\n```js\nyarn add react-native-image-picker\n```\n\niOS:\n\n```js\nnpx pod-install ios\n```\n\nreact-native-image-picker 레포지토리에는 몇 가지 추가 설치 단계에 대한 조언이 있습니다. 그 중 일부는 다음과 같습니다:\n사용자가 사진 또는 비디오를 선택할 수 있도록 하는 경우 NSPhotoLibraryUsageDescription을 추가하세요.```\n\n\n\niOS\n\nAndroid\n\n`saveToPhotos` 속성을 `true`로 설정하지 않는 한 권한이 필요하지 않습니다.\n\niOS의 권한은 다음과 같이 test 폴더 내의 Info.plist 파일에 들어갑니다:\n\n\n\n```js\n<key>NSPhotoLibraryUsageDescription</key>\n <string>$(PRODUCT_NAME)님의 사진 갤러리에 접근하려고 합니다</string>\n<key>NSCameraUsageDescription</key>\n <string>$(PRODUCT_NAME)님의 카메라를 사용하려고 합니다</string>\r\n```\n\n## Android의 권한은 AndroidManifest.xml 파일에 작성해주세요 :\n\nReact-Native-Image-Picker 모듈은 사용자에게 작동을 위해 권한이 필요하지 않지만, 사용자가 앱에서 촬영한 이미지를 갤러리에 저장하는 옵션을 설정한 경우, 다음 권한이 필요합니다:\n\n```js\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n```\n\n\n\n위에서 사용자에게 겔러리 접근 권한과 애플리케이션에서 캡처한 이미지를 사용자의 갤러리에 저장할 것인지에 대한 동의를 요청하는 것입니다.\n\n## React-Native-image-Picker 구현하기\n\n프로필 컴포넌트 Profile.js를 생성하십시오. react-native-image-picker에는 사용할 수 있는 두 가지 메서드가 있습니다. launchCamera()는 카메라를 실행하여 사진을 찍고, launchImageLibrary()는 갤러리를 실행하여 사진이나 비디오를 선택합니다. 이를 파일에 import할 것입니다.\n\nlaunchLibrary 메서드는 사용자의 갤러리를 열고 이미지 설정과 응답 두 가지 매개변수를 사용합니다.\n\n\n\n`launchCamera` 메소드는 사용자의 카메라를 실행하며 이미지의 구성 및 응답에 대한 두 개의 매개변수를 가져옵니다.\n\n`pickerResponse` 상태 변수는 이미지 피커에서의 응답을 저장하는 데 사용됩니다. `imageFromDB` 상태 변수는 데이터베이스에서 이미지를 저장하여 나중에 액세스할 수 있도록 합니다.\n\nImage 컴포넌트는 다음과 같이 사용됩니다:\n\n```js\n<Card style=//카드 스타일, 특히 이미지에 고도를 원하는 경우>\n    <Image\n        source={\n          uri: `data:image/*;base64,${imageFromDB}`,\n          width: ..,\n          height: ...,\n        }\n        style=//추가 이미지 스타일\n    />\n</Card>\n```\n\n\n\n이 코드 라인\n\n```js\nuri: `data:image/*;base64,${imageFromDB}`,\n```\n\n은 우리가 데이터베이스에서 이미지를 렌더링하는 데 `uri` 속성을 사용하고 `image/*`가 지정된 이미지 유형을 렌더링하도록 보장합니다.\n\n또한 사용자가 갤러리 또는 카메라에 액세스하여 이미지를 업로드할 수 있도록 모달을 활성화하는 프레서블 아이콘을 추가할 수도 있습니다.\n\n\n\n```js\n <Pressable\n    style={({ pressed }) => [\n        {\n            ...styles.cameraIconView,\n            opacity: pressed ? 0.5 : 1,\n        },\n    ]}\n    onPress={() => setVisible(true)}\n>\n    <IconComponent\n        source={icons.camera}\n        tintColor={themeColor.primaryWhite}\n    />\n</Pressable>\r\n```\n\n저희는 프로필 컴포넌트에 모달을 넣고 필요한 모든 속성을 전달하고 싶어요.\n\n```js\r\n<ImagePickerModal\n    isVisible={visible}\n    onClose={() => setVisible(false)}\n    onImageLibraryPress={onImageGalleryPress}\n    onCameraPress={onCameraPress}\n/>\r\n```\n\n마지막으로 ImagePickerModal 컴포넌트를 만들어야 할 것입니다.\n\n\n\n데이터베이스로 이미지를 그대로 보내기보다 base64 이미지를 사용하는 이유를 궁금해하는 분들을 위해, base64 인코딩을 사용하면 데이터 크기를 최대 33%까지 줄일 수 있으며 많은 프로그래밍 언어가 base64 인코딩을 내장 지원하고 있습니다.\n\n# 페이지 상태에 따라 이미지를 조건부로 렌더링하기\n\n이미지를 렌더링하기 위해 우리는 다음 3가지 경우를 살펴볼 것입니다:\n\n- 사용자가 로그인하지 않았을 때\n- 사용자가 로그인했지만 프로필 이미지가 없는 경우\n- 사용자가 로그인하고 프로필 이미지가 있는 경우\n- 사용자가 로그인하고 방금 프로필 이미지를 변경한 경우\n\n\n\n```js\nuserLoggedIn ? {\n  uri ? (\n    <Card style={styles.userDBImageView}>\n        <Image\n            source={\n                uri: uri,\n                width: styles.userDBImage.width,\n                height: styles.userDBImage.height,\n            }\n            style={styles.userDBImage}\n        />\n    </Card>\n) : imageFromDB ? (\n    <Card style={styles.userDBImageView}>\n        <Image\n            source={\n                uri: `data:image/*;base64,${imageFromDB}`,\n                width: styles.userDBImage.width,\n                height: styles.userDBImage.height,\n            }\n            style={styles.userDBImage}\n            // tintColor={colors.primaryWhite}\n        />\n    </Card>\n) : (\n    <Card\n        style={\n            ...styles.userImageView,\n            marginTop: '8%',\n            width: '25%',\n        }\n    >\n        <Image\n            source={icons.profileImage}\n            style={styles.userImage}\n            tintColor={colors.primaryWhite}\n        />\n    </Card>\n)\n) : (\n<Card style={styles.userImageView}>\n    <Image\n        source={icons.profileImage}\n        style={styles.userImage}\n        tintColor={colors.primaryWhite}\n    />\n</Card>\n         )\n}\n```\n\n## 사용자가 로그인하지 않은 경우\n\n마지막 컴포넌트는 사용자가 로그인하지 않았을 때 호출될 것이므로 해당 이미지의 소스는 기본/대체 이미지여야합니다.\n\n## 사용자는 로그인했지만 프로필 이미지가 없습니다\n\n\n\n사용자가 로그인했지만 프로필 이미지가 없는 경우, 코드에서 두 번째로 나타나는 그림과 동일한 이미지를 표시할 것입니다.\n\n## 사용자가 로그인하고 프로필 이미지가 있는 경우\n\n두 번째 구성 요소는 사용자가 로그인했는지와 데이터베이스에서 이미지를 가지고 있는지 확인한 후 렌더링됩니다.\n\n## 사용자가 로그인하고 방금 프로필 이미지를 변경한 경우\n\n\n\n이 코드 조각은 먼저 사용자가 uri 변수를 사용하여 새 이미지를 선택/캡처했는지 확인합니다. uri에 값이 있는 경우, 삼항 연산자에서 다른 변수들 보다 우선순위가 높기 때문에 즉시 표시됩니다.\n\n# 결론\n\nreact-native-image-picker를 사용하면 이미지 업로드 기능을 쉽게 구현할 수 있습니다. 사용자가 이미지와 비디오를 업로드할 수 있는 애플리케이션을 쉽게 구축할 수 있을 정도로 강력합니다. 사용자 경험을 즐겁게 만들어주지만, 더 중요한 점은 개발자 경험까지 더욱 즐겁게 만들어준다는 것입니다.","ogImage":{"url":"/assets/img/2024-05-12-DeepDiveintoImplementingreact-native-image-picker_0.png"},"coverImage":"/assets/img/2024-05-12-DeepDiveintoImplementingreact-native-image-picker_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>현대 애플리케이션에서 사용자가 프로필에 사진을 업로드할 수 있는 기능을 제공하는 것은 표준입니다. 사용자들이 계속해서 앱을 방문할 수 있도록 최상의 경험을 제공하는 것이 매우 중요합니다.</p>\n<p>React-Native로 모바일 앱을 개발 중이라면, react-native-image-picker 덕분에 이것을 아주 쉽게 구현할 수 있습니다.</p>\n<h1>내 앱은 어떤 이미지 형식을 지원해야 할까요?</h1>\n<p>첫 번째로 해야 할 질문은 \"내 앱이 지원해야 하는 이미지 유형은 무엇인가?\"입니다. 다양한 이미지 유형이 존재하며, 모든 종류의 사람들을 대상으로 하는 앱을 원한다면 특히 혼란스럽고 압도될 수 있습니다. React Native는 이를 우리에게 아주 쉽게 만들어줍니다.</p>\n<p>그래서 선택지를 좁힐 수 있습니다. 이 목록에 언급되지 않은 것 중 하나는 Base64입니다. Base64는 이진 데이터를 나타내는 이진-텍스트 인코딩 체계의 한 그룹입니다.</p>\n<h1>React-Native-Image-Picker</h1>\n<h2>React Native Image Picker란 무엇인가요?</h2>\n<p>React-Native-Image-Picker은 React Native 모듈로, 기기 라이브러리에서 미디어를 선택하거나 직접 카메라에서 가져 올 수 있도록 네이티브 UI를 사용할 수 있게 해줍니다. 현재 약 60,000명의 개발자가 사용 중이며, 제공되는 기능이 매우 견고하기 때문에 많은 사람들이 사용하고 있습니다.</p>\n<h2>React-Native-Image-Picker 설치 및 설정하는 방법</h2>\n<p>먼저 패키지를 프로젝트에 설치합니다:</p>\n<p>Android:</p>\n<pre><code class=\"hljs language-js\">yarn add react-native-image-picker\n</code></pre>\n<p>iOS:</p>\n<pre><code class=\"hljs language-js\">npx pod-install ios\n</code></pre>\n<p>react-native-image-picker 레포지토리에는 몇 가지 추가 설치 단계에 대한 조언이 있습니다. 그 중 일부는 다음과 같습니다:\n사용자가 사진 또는 비디오를 선택할 수 있도록 하는 경우 NSPhotoLibraryUsageDescription을 추가하세요.```</p>\n<p>iOS</p>\n<p>Android</p>\n<p><code>saveToPhotos</code> 속성을 <code>true</code>로 설정하지 않는 한 권한이 필요하지 않습니다.</p>\n<p>iOS의 권한은 다음과 같이 test 폴더 내의 Info.plist 파일에 들어갑니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;key><span class=\"hljs-title class_\">NSPhotoLibraryUsageDescription</span>&#x3C;/key>\n <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">string</span>></span>$(PRODUCT_NAME)님의 사진 갤러리에 접근하려고 합니다<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">string</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">key</span>></span>NSCameraUsageDescription<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">key</span>></span></span>\n <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">string</span>></span>$(PRODUCT_NAME)님의 카메라를 사용하려고 합니다<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">string</span>></span></span>\n</code></pre>\n<h2>Android의 권한은 AndroidManifest.xml 파일에 작성해주세요 :</h2>\n<p>React-Native-Image-Picker 모듈은 사용자에게 작동을 위해 권한이 필요하지 않지만, 사용자가 앱에서 촬영한 이미지를 갤러리에 저장하는 옵션을 설정한 경우, 다음 권한이 필요합니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;uses-permission <span class=\"hljs-attr\">android</span>:name=<span class=\"hljs-string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/>\n</code></pre>\n<p>위에서 사용자에게 겔러리 접근 권한과 애플리케이션에서 캡처한 이미지를 사용자의 갤러리에 저장할 것인지에 대한 동의를 요청하는 것입니다.</p>\n<h2>React-Native-image-Picker 구현하기</h2>\n<p>프로필 컴포넌트 Profile.js를 생성하십시오. react-native-image-picker에는 사용할 수 있는 두 가지 메서드가 있습니다. launchCamera()는 카메라를 실행하여 사진을 찍고, launchImageLibrary()는 갤러리를 실행하여 사진이나 비디오를 선택합니다. 이를 파일에 import할 것입니다.</p>\n<p>launchLibrary 메서드는 사용자의 갤러리를 열고 이미지 설정과 응답 두 가지 매개변수를 사용합니다.</p>\n<p><code>launchCamera</code> 메소드는 사용자의 카메라를 실행하며 이미지의 구성 및 응답에 대한 두 개의 매개변수를 가져옵니다.</p>\n<p><code>pickerResponse</code> 상태 변수는 이미지 피커에서의 응답을 저장하는 데 사용됩니다. <code>imageFromDB</code> 상태 변수는 데이터베이스에서 이미지를 저장하여 나중에 액세스할 수 있도록 합니다.</p>\n<p>Image 컴포넌트는 다음과 같이 사용됩니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;<span class=\"hljs-title class_\">Card</span> style=<span class=\"hljs-comment\">//카드 스타일, 특히 이미지에 고도를 원하는 경우></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Image</span>\n        <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{</span>\n          <span class=\"hljs-attr\">uri:</span> `<span class=\"hljs-attr\">data:image</span>/*;<span class=\"hljs-attr\">base64</span>,${<span class=\"hljs-attr\">imageFromDB</span>}`,\n          <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">..</span>,\n          <span class=\"hljs-attr\">height:</span> <span class=\"hljs-attr\">...</span>,\n        }\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">//추가</span> <span class=\"hljs-attr\">이미지</span> <span class=\"hljs-attr\">스타일</span>\n    /></span></span>\n&#x3C;/<span class=\"hljs-title class_\">Card</span>>\n</code></pre>\n<p>이 코드 라인</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">uri</span>: <span class=\"hljs-string\">`data:image/*;base64,<span class=\"hljs-subst\">${imageFromDB}</span>`</span>,\n</code></pre>\n<p>은 우리가 데이터베이스에서 이미지를 렌더링하는 데 <code>uri</code> 속성을 사용하고 <code>image/*</code>가 지정된 이미지 유형을 렌더링하도록 보장합니다.</p>\n<p>또한 사용자가 갤러리 또는 카메라에 액세스하여 이미지를 업로드할 수 있도록 모달을 활성화하는 프레서블 아이콘을 추가할 수도 있습니다.</p>\n<pre><code class=\"hljs language-js\"> &#x3C;<span class=\"hljs-title class_\">Pressable</span>\n    style={<span class=\"hljs-function\">(<span class=\"hljs-params\">{ pressed }</span>) =></span> [\n        {\n            ...styles.<span class=\"hljs-property\">cameraIconView</span>,\n            <span class=\"hljs-attr\">opacity</span>: pressed ? <span class=\"hljs-number\">0.5</span> : <span class=\"hljs-number\">1</span>,\n        },\n    ]}\n    onPress={<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">setVisible</span>(<span class=\"hljs-literal\">true</span>)}\n>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">IconComponent</span>\n        <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{icons.camera}</span>\n        <span class=\"hljs-attr\">tintColor</span>=<span class=\"hljs-string\">{themeColor.primaryWhite}</span>\n    /></span></span>\n&#x3C;/<span class=\"hljs-title class_\">Pressable</span>>\n</code></pre>\n<p>저희는 프로필 컴포넌트에 모달을 넣고 필요한 모든 속성을 전달하고 싶어요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;<span class=\"hljs-title class_\">ImagePickerModal</span>\n    isVisible={visible}\n    onClose={<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">setVisible</span>(<span class=\"hljs-literal\">false</span>)}\n    onImageLibraryPress={onImageGalleryPress}\n    onCameraPress={onCameraPress}\n/>\n</code></pre>\n<p>마지막으로 ImagePickerModal 컴포넌트를 만들어야 할 것입니다.</p>\n<p>데이터베이스로 이미지를 그대로 보내기보다 base64 이미지를 사용하는 이유를 궁금해하는 분들을 위해, base64 인코딩을 사용하면 데이터 크기를 최대 33%까지 줄일 수 있으며 많은 프로그래밍 언어가 base64 인코딩을 내장 지원하고 있습니다.</p>\n<h1>페이지 상태에 따라 이미지를 조건부로 렌더링하기</h1>\n<p>이미지를 렌더링하기 위해 우리는 다음 3가지 경우를 살펴볼 것입니다:</p>\n<ul>\n<li>사용자가 로그인하지 않았을 때</li>\n<li>사용자가 로그인했지만 프로필 이미지가 없는 경우</li>\n<li>사용자가 로그인하고 프로필 이미지가 있는 경우</li>\n<li>사용자가 로그인하고 방금 프로필 이미지를 변경한 경우</li>\n</ul>\n<pre><code class=\"hljs language-js\">userLoggedIn ? {\n  uri ? (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.userDBImageView}</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Image</span>\n            <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{</span>\n                <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-attr\">uri</span>,\n                <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">styles.userDBImage.width</span>,\n                <span class=\"hljs-attr\">height:</span> <span class=\"hljs-attr\">styles.userDBImage.height</span>,\n            }\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.userDBImage}</span>\n        /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Card</span>></span></span>\n) : imageFromDB ? (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.userDBImageView}</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Image</span>\n            <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{</span>\n                <span class=\"hljs-attr\">uri:</span> `<span class=\"hljs-attr\">data:image</span>/*;<span class=\"hljs-attr\">base64</span>,${<span class=\"hljs-attr\">imageFromDB</span>}`,\n                <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">styles.userDBImage.width</span>,\n                <span class=\"hljs-attr\">height:</span> <span class=\"hljs-attr\">styles.userDBImage.height</span>,\n            }\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.userDBImage}</span>\n            // <span class=\"hljs-attr\">tintColor</span>=<span class=\"hljs-string\">{colors.primaryWhite}</span>\n        /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Card</span>></span></span>\n) : (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Card</span>\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">...styles.userImageView</span>,\n            <span class=\"hljs-attr\">marginTop:</span> '<span class=\"hljs-attr\">8</span>%',\n            <span class=\"hljs-attr\">width:</span> '<span class=\"hljs-attr\">25</span>%',\n        }\n    ></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Image</span>\n            <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{icons.profileImage}</span>\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.userImage}</span>\n            <span class=\"hljs-attr\">tintColor</span>=<span class=\"hljs-string\">{colors.primaryWhite}</span>\n        /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Card</span>></span></span>\n)\n) : (\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.userImageView}</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Image</span>\n        <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{icons.profileImage}</span>\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.userImage}</span>\n        <span class=\"hljs-attr\">tintColor</span>=<span class=\"hljs-string\">{colors.primaryWhite}</span>\n    /></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Card</span>></span></span>\n         )\n}\n</code></pre>\n<h2>사용자가 로그인하지 않은 경우</h2>\n<p>마지막 컴포넌트는 사용자가 로그인하지 않았을 때 호출될 것이므로 해당 이미지의 소스는 기본/대체 이미지여야합니다.</p>\n<h2>사용자는 로그인했지만 프로필 이미지가 없습니다</h2>\n<p>사용자가 로그인했지만 프로필 이미지가 없는 경우, 코드에서 두 번째로 나타나는 그림과 동일한 이미지를 표시할 것입니다.</p>\n<h2>사용자가 로그인하고 프로필 이미지가 있는 경우</h2>\n<p>두 번째 구성 요소는 사용자가 로그인했는지와 데이터베이스에서 이미지를 가지고 있는지 확인한 후 렌더링됩니다.</p>\n<h2>사용자가 로그인하고 방금 프로필 이미지를 변경한 경우</h2>\n<p>이 코드 조각은 먼저 사용자가 uri 변수를 사용하여 새 이미지를 선택/캡처했는지 확인합니다. uri에 값이 있는 경우, 삼항 연산자에서 다른 변수들 보다 우선순위가 높기 때문에 즉시 표시됩니다.</p>\n<h1>결론</h1>\n<p>react-native-image-picker를 사용하면 이미지 업로드 기능을 쉽게 구현할 수 있습니다. 사용자가 이미지와 비디오를 업로드할 수 있는 애플리케이션을 쉽게 구축할 수 있을 정도로 강력합니다. 사용자 경험을 즐겁게 만들어주지만, 더 중요한 점은 개발자 경험까지 더욱 즐겁게 만들어준다는 것입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}