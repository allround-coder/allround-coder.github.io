{"pageProps":{"post":{"title":"Angular 17에서 Google 지도 통합하기","description":"","date":"2024-05-18 22:02","slug":"2024-05-18-IntegratingGoogleMapsinAngular17","content":"\n\n만약 당신이 Angular에서 Google 지도 컴포넌트를 사용해 왔다면, 2024년 2월 21일부로 Marker가 사용 중단되었다는 경고를 받은 적이 있을 것입니다. 새롭고 더 사용자 정의할 수 있는 Advanced Marker를 사용하도록 권장되었습니다.\n\n안타깝게도, Angular에서의 Advanced Marker 사용 방법에 대한 가이드나 정보가 많이 없으며, 대부분의 문서들은 여전히 구식 Marker를 사용하고 있습니다.\n\n그러나 이 기사에서는 기존 Angular 프로젝트를 업데이트해야 하는 경우든, 처음부터 해당 컴포넌트를 시도해보는 경우든 새로운 Advanced Marker를 어떻게 사용할 수 있는지 공유하겠습니다.\n\n그러면 시작해봅시다!\n\n<div class=\"content-ad\"></div>\n\n# 준비물\n\nAngular 프로젝트를 생성하기 전에 Google Maps JavaScript API를 사용하기 위한 유효한 API 키가 있는지 확인해주세요. 추가 지침은 아래 링크를 참조해주세요:\nhttps://developers.google.com/maps/documentation/javascript/get-api-key\n\n또한, 이 컴포넌트에 필요한 맵 ID도 필요합니다. 다음 링크를 따라서 얻을 수 있습니다:\nhttps://developers.google.com/maps/documentation/get-map-id\n\n만일 맵 ID를 가지고 있지 않거나 얻을 수 없다면, 구글에서 제공한 개발용 맵 ID를 사용할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n- Map ID = DEMO_MAP_ID\n\n# 설정 단계\n\n새 프로젝트를 시작하고 이미 Angular v17이 설정되어 있다고 가정하면 새 앱을 만듭니다:\n\n```js\nng new angular-google-maps\ncd angular-google-maps\n```\n\n<div class=\"content-ad\"></div>\n\nGoogle Maps 모듈을 설치하려면 다음 명령어를 실행하세요:\n\n```js\nnpm i @angular/google-maps\n```\n\nAngular v17에서는 새 응용 프로그램이 기본적으로 독립적인 프로젝트로 생성됩니다. 컴포넌트가 독립적인지 여부는 src/app/app.component.ts 파일의 standalone 속성을 확인하여 알 수 있습니다. 컴포넌트가 독립적인 경우 해당 속성은 true로 표시됩니다.\n\n독립적인 컴포넌트의 경우 모듈을 src/app/app.component.ts 파일에 다음과 같이 가져옵니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n...\nimport { GoogleMapsModule } from \"@angular/google-maps\";\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, GoogleMapsModule],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\n...\n```\n\n만약 해당 컴포넌트가 독립적이지 않다면 모듈을 src/app/app.module.ts 파일로 가져오세요:\n\n```js\n...\nimport { GoogleMapsModule } from \"@angular/google-maps\";\n\n@NgModule({\n  declarations: [...],\n  imports: [..., GoogleMapsModule],\n  ...\n})\nexport class AppModule {}\n```\n\n다음 스크립트를 애플리케이션의 src/index.html 파일에 추가하고 YOUR_API_KEY를 해당하는 API 키로 교체하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<head>\n  ...\n</head>\n<body>\n  ...\n  <script>\n    (g => {\n        var h, a, k, p = \"The Google Maps JavaScript API\", c = \"google\", l = \"importLibrary\", q = \"__ib__\", m = document, b = window;\n        b = b[c] || (b[c] = {});\n        var d = b.maps || (b.maps = {}),\n            r = new Set,\n            e = new URLSearchParams,\n            u = () => h || (h = new Promise(async (f, n) => {\n            await (a = m.createElement(\"script\"));\n            e.set(\"libraries\", [...r] + \"\");\n            for (k in g) e.set(k.replace(/[A-Z]/g, t => \"_\" + t[0].toLowerCase()), g[k]);\n            e.set(\"callback\", c + \".maps.\" + q);\n            a.src = `https://maps.${c}apis.com/maps/api/js?` + e;\n            d[q] = f;\n            a.onerror = () => h = n(Error(p + \" could not load.\"));\n            a.nonce = m.querySelector(\"script[nonce]\")?.nonce || \"\";\n            m.head.append(a)\n          }));\n        d[l] ? console.warn(p + \" only loads once. Ignoring:\", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n))\n      })({\n        v: \"weekly\",\n        key: \"YOUR_API_KEY\"\n      });\n  </script>\n</body>\n</html>\n```\n\n스크립트는 닫히는 body 태그 이전에 위치하고 head 태그 사이에 있지 않아야 합니다.\n\n# 지도 추가하기\n\n이제 맵의 높이와 너비를 추가하고, 옵션을 설정하여 구글 지도 컴포넌트를 애플리케이션에 추가할 수 있습니다:```\n\n<div class=\"content-ad\"></div>\n\n- 지도가 렌더링된 맵의 ID를 나타냅니다\n- center는 맵의 중심 (위도 및 경도)\n- zoom은 맵의 줌 레벨\n\n```js\n<!-- app.component.html -->\n<h1>Angular 17에서 Google 지도</h1>\n<google-map height=\"600px\" width=\"800px\" [options]=\"options\"> </google-map>\n```\n\n```js\n// app.component.ts\n...\nexport class AppComponent {\n  ...\n  options: google.maps.MapOptions = {\n    mapId: \"DEMO_MAP_ID\",\n    center: { lat: -31, lng: 147 },\n    zoom: 4,\n  };\n}\n```\n\n이제 다음 명령을 사용하여 응용 프로그램을 실행하실 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nng serve\n```\n\n해당 이미지와 비슷한 지도를 얻어야 합니다:\n\n<img src=\"/assets/img/2024-05-18-IntegratingGoogleMapsinAngular17_0.png\" />\n\n# 고급 마커 추가하기\n\n<div class=\"content-ad\"></div>\n\n먼저, 마커의 위치(위도 및 경도)를 정의해야 합니다. 다음 변수를 app.component.ts 파일에 선언해주세요:\n\n```js\nexport class AppComponent {\n  ...\n  nzLocations: any[] = [\n    { lat: -36.817685, lng: 175.699196 },\n    { lat: -36.828611, lng: 175.790222 },\n    { lat: -39.927193, lng: 175.053218 },\n    { lat: -41.330162, lng: 174.865694 },\n    { lat: -43.999792, lng: 170.463352 },\n  ];\n  auLocations: any[] = [\n    { lat: -31.56391, lng: 147.154312 },\n    { lat: -33.718234, lng: 150.363181 },\n    { lat: -33.727111, lng: 150.371124 },\n    { lat: -33.848588, lng: 151.209834 },\n    { lat: -33.851702, lng: 151.216968 },\n    { lat: -34.671264, lng: 150.863657 },\n    { lat: -35.304724, lng: 148.662905 },\n    { lat: -37.75, lng: 145.116667 },\n    { lat: -37.759859, lng: 145.128708 },\n    { lat: -37.765015, lng: 145.133858 },\n    { lat: -37.770104, lng: 145.143299 },\n    { lat: -37.7737, lng: 145.145187 },\n    { lat: -37.774785, lng: 145.137978 },\n    { lat: -37.819616, lng: 144.968119 },\n    { lat: -38.330766, lng: 144.695692 },\n    { lat: -42.734358, lng: 147.439506 },\n    { lat: -42.734358, lng: 147.501315 },\n    { lat: -42.735258, lng: 147.438 },\n  ];\n}\n```\n\n다음으로, app.component.html 파일에서 for-loop를 사용하여 지도에 Advanced Markers를 추가할 것입니다.\n\n```html\n<google-map height=\"600px\" width=\"800px\" [options]=\"options\">\n  @for (location of nzLocations; track location) {\n  <map-advanced-marker\n    #markerElem=\"mapAdvancedMarker\"\n    [position]=\"{ lat: location.lat, lng: location.lng }\"\n  />\n  } @for (location of auLocations; track location) {\n  <map-advanced-marker\n    #markerElem=\"mapAdvancedMarker\"\n    [position]=\"{ lat: location.lat, lng: location.lng }\"\n  />\n  }\n</google-map>\n```\n\n<div class=\"content-ad\"></div>\n\n지금은 파일을 저장할 수 있고, 지도에 여러 호주 및 뉴질랜드 위치 표시기가 삽입된 것을 확인할 수 있습니다.\n\n![Google Map with location markers](/assets/img/2024-05-18-IntegratingGoogleMapsinAngular17_1.png)\n\n# 고급 마커 사용자 정의\n\n이제 우리가 지도를 성공적으로 초기화하고 표시기를 추가했으므로, 사용자 정의 이미지로 그들을 계속하여 사용자 정의할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 인라인 SVG 사용하기\n\n기본 마커를 변경하려면 먼저 DOMParser를 추가하여 SVG 문자열을 DOM 요소로 변환해야 합니다. app.component.ts 파일에서 파서와 사용하려는 SVG 문자열을 초기화합니다:\n\n```js\n...\nngOnInit() {\n  const parser = new DOMParser();\n  // 이것은 집 아이콘의 SVG 문자열입니다. 사용하고 싶은 SVG 아이콘을 자유롭게 사용해주십시오.\n  const svgString = `<svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"#FF5733\" stroke=\"#FFFFFF\" viewBox=\"0 0 24 24\">\n                    <path fill-rule=\"evenodd\" d=\"M11.293 3.293a1 1 0 0 1 1.414 0l6 6 2 2a1 1 0 0 1-1.414 1.414L19 12.414V19a2 2 0 0 1-2 2h-3a1 1 0 0 1-1-1v-3h-2v3a1 1 0 0 1-1 1H7a2 2 0 0 1-2-2v-6.586l-.293.293a1 1 0 0 1-1.414-1.414l2-2 6-6Z\" clip-rule=\"evenodd\"/>\n                    </svg>`;\n}\n```\n\n다음으로, 우리의 뉴질랜드 마커를 루프하여 원하는 이미지로 설정합니다. forEach 루프를 사용하여 각 위치의 내용 속성을 파서를 사용하여 문서 요소로 설정합니다. 위 코드에 이어 ngOnInit() 함수 내에서 이 작업을 수행하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nthis.nzLocations.forEach((location) => {\n  location.content = parser.parseFromString(svgString, \"image/svg+xml\").documentElement;\n});\n```\n\n모든 위치의 내용이 설정된 후에는 New Zealand 위치의 `map-advanced-marker` 태그의 내용 속성을 app.component.html 파일에서도 추가하고 수정해야 합니다.\n\n```html\n...\n@for (location of nzLocations; track location) {\n<map-advanced-marker\n  #markerElem=\"mapAdvancedMarker\"\n  [position]=\"{ lat: location.lat, lng: location.lng }\"\n  [content]=\"location.content\"\n/>\n}\n...\n```\n\n다음 이미지는 마커의 기본 핀 모양을 변경한 후 현재 지도가어떻게 보여야하는지 보여줍니다.```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-18-IntegratingGoogleMapsinAngular17_2.png\" />\n\n## PNG 이미지 사용하기\n\nPNG 이미지를 사용하려면 이미지를 참조하고 해당 요소를 위치 내용 태그에 설정해야 합니다.\n\napp.component.ts 파일에서 먼저 PNG 이미지에 대한 링크를 정의합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nngOnInit() {\n  ...\n  // 예시로 구글의 비치 플래그 이미지를 사용할 것이지만, 마음에 드시는 이미지를 자유롭게 사용해도 괜찮습니다\n  const beachFlag = \"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\";\n}\n```\n\n그런 다음, 우리는 ngOnInit() 함수 안에서 위 코드 이후에 오스트레일리아 마커들에 대해 forEach 루프를 사용하여 인라인 SVG 섹션에서 했던 것과 유사하게 각 위치의 내용으로 전달될 img 요소를 생성할 것입니다.\n\n```js\nthis.auLocations.forEach((location) => {\n  let imgTag = document.createElement(\"img\");\n  imgTag.src = beachFlag;\n  location.content = imgTag;\n});\n```\n\n한번 더, app.component.html 파일에서 오스트레일리아 위치들의 `map-advanced-marker` 태그의 내용 속성을 추가 및 수정해야 합니다.```\n\n<div class=\"content-ad\"></div>\n\n\n```js\n@for (location of auLocations; track location) {\n<map-advanced-marker\n  #markerElem=\"mapAdvancedMarker\"\n  [position]=\"{ lat: location.lat, lng: location.lng }\"\n  [content]=\"location.content\"\n/>\n}\n```\n\n\nThe final result should look like the following image:\n\n![Integrating Google Maps in Angular](/assets/img/2024-05-18-IntegratingGoogleMapsinAngular17_3.png)\n\n## Adding a Title\n\n\n<div class=\"content-ad\"></div>\n\n마커 위로 마우스를 올리면 제목 텍스트가 나타나며, 이는 `map-advanced-marker` 태그의 title 속성을 수정하여 설정합니다. 아래 코드에서는 각 위치의 인덱스 번호를 기반으로 제목을 추가했지만, 원하는 대로 변경할 수 있습니다.\n\n\n따라서 마커 위로 커서를 올리면 해당 위치 번호가 나타나는 작은 텍스트가 표시됩니다.\n\n<img src=\"/assets/img/2024-05-18-IntegratingGoogleMapsinAngular17_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n## 정보 창 추가하기\n\n정보 창은 마커에 대한 자세한 정보를 제공할 수 있으며, 일반적으로 마커를 클릭할 때 표시됩니다. 우리는 고급 마커를 사용하고 있기 때문에 Advanced Marker에서 제공되는 새로운 기능인 openAdvancedMarkerElement()를 활용할 수 있습니다.\n\n먼저, imports를 업데이트하고 app.component.ts 파일에서 infoWindow의 ViewChild를 정의해야 합니다.\n\n```js\nimport { Component, ViewChild } from \"@angular/core\";\nimport { GoogleMapsModule, MapAdvancedMarker, MapInfoWindow } from \"@angular/google-maps\";\n...\nexport class AppComponent {\n...\n  @ViewChild(MapInfoWindow) infoWindow!: MapInfoWindow;\n...\n}\n```\n\n<div class=\"content-ad\"></div>\n\n그럼, 마커를 클릭했을 때 실행될 AppComponent 클래스의 함수를 작성할 수 있어요:\n\n```js\n...\nexport class AppComponent {\n...\n  onMarkerClick(marker: MapAdvancedMarker) {\n    this.infoWindow.openAdvancedMarkerElement(marker.advancedMarker, marker.advancedMarker.title);\n  }\n...\n}\n```\n\n`openAdvancedMarkerElement()` 함수의 첫 번째 매개변수는 정보 창이 열릴 마커 요소의 위치를 나타내고, 두 번째 매개변수는 정보 창에 표시될 내용으로 사용될 null이 가능한 문자열 또는 Element를 받아요.\n\n이제 할 일은 만들어둔 onMarkerClick 함수와 `map-info-window` 태그를 app.component.html 파일에 추가하는 거에요.\n\n<div class=\"content-ad\"></div>\n\n파일을 저장하고 이제 마커를 클릭하면 마커 제목이 나타나는 정보 창이 표시됩니다.\n\n<img src=\"/assets/img/2024-05-18-IntegratingGoogleMapsinAngular17_5.png\" />\n\n# 결론\n\n\n<div class=\"content-ad\"></div>\n\n지금까지 따라오신 여러분, 축하드립니다! 구글 지도를 구현하여 클릭 시 정보 창이 열리는 사용자 정의 고급 마커가 포함된 지도를 성공적으로 만들었습니다.\n\n위 코드에 문제가 있거나 전체 코드를 보고 싶은 경우, 이 GitHub 저장소로 방문하여 프로젝트를 확인할 수 있습니다. 꼭 API 키를 교체해 주세요!\n\n이번 글은 여기까지입니다! 아래 댓글에 의견을 자유롭게 나눠주세요. 도움이 되었고 쉽게 따라올 수 있었기를 바라며, 저의 첫 Medium 글에 클랩 몇 개 부탁 드리겠습니다. 감사합니다! 😄","ogImage":{"url":"/assets/img/2024-05-18-IntegratingGoogleMapsinAngular17_0.png"},"coverImage":"/assets/img/2024-05-18-IntegratingGoogleMapsinAngular17_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>만약 당신이 Angular에서 Google 지도 컴포넌트를 사용해 왔다면, 2024년 2월 21일부로 Marker가 사용 중단되었다는 경고를 받은 적이 있을 것입니다. 새롭고 더 사용자 정의할 수 있는 Advanced Marker를 사용하도록 권장되었습니다.</p>\n<p>안타깝게도, Angular에서의 Advanced Marker 사용 방법에 대한 가이드나 정보가 많이 없으며, 대부분의 문서들은 여전히 구식 Marker를 사용하고 있습니다.</p>\n<p>그러나 이 기사에서는 기존 Angular 프로젝트를 업데이트해야 하는 경우든, 처음부터 해당 컴포넌트를 시도해보는 경우든 새로운 Advanced Marker를 어떻게 사용할 수 있는지 공유하겠습니다.</p>\n<p>그러면 시작해봅시다!</p>\n<h1>준비물</h1>\n<p>Angular 프로젝트를 생성하기 전에 Google Maps JavaScript API를 사용하기 위한 유효한 API 키가 있는지 확인해주세요. 추가 지침은 아래 링크를 참조해주세요:\n<a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key\" rel=\"nofollow\" target=\"_blank\">https://developers.google.com/maps/documentation/javascript/get-api-key</a></p>\n<p>또한, 이 컴포넌트에 필요한 맵 ID도 필요합니다. 다음 링크를 따라서 얻을 수 있습니다:\n<a href=\"https://developers.google.com/maps/documentation/get-map-id\" rel=\"nofollow\" target=\"_blank\">https://developers.google.com/maps/documentation/get-map-id</a></p>\n<p>만일 맵 ID를 가지고 있지 않거나 얻을 수 없다면, 구글에서 제공한 개발용 맵 ID를 사용할 수 있습니다:</p>\n<ul>\n<li>Map ID = DEMO_MAP_ID</li>\n</ul>\n<h1>설정 단계</h1>\n<p>새 프로젝트를 시작하고 이미 Angular v17이 설정되어 있다고 가정하면 새 앱을 만듭니다:</p>\n<pre><code class=\"hljs language-js\">ng <span class=\"hljs-keyword\">new</span> angular-google-maps\ncd angular-google-maps\n</code></pre>\n<p>Google Maps 모듈을 설치하려면 다음 명령어를 실행하세요:</p>\n<pre><code class=\"hljs language-js\">npm i @angular/google-maps\n</code></pre>\n<p>Angular v17에서는 새 응용 프로그램이 기본적으로 독립적인 프로젝트로 생성됩니다. 컴포넌트가 독립적인지 여부는 src/app/app.component.ts 파일의 standalone 속성을 확인하여 알 수 있습니다. 컴포넌트가 독립적인 경우 해당 속성은 true로 표시됩니다.</p>\n<p>독립적인 컴포넌트의 경우 모듈을 src/app/app.component.ts 파일에 다음과 같이 가져옵니다:</p>\n<pre><code class=\"hljs language-js\">...\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GoogleMapsModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/google-maps\"</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-root'</span>,\n  <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">RouterOutlet</span>, <span class=\"hljs-title class_\">GoogleMapsModule</span>],\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./app.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrl</span>: <span class=\"hljs-string\">'./app.component.scss'</span>\n})\n...\n</code></pre>\n<p>만약 해당 컴포넌트가 독립적이지 않다면 모듈을 src/app/app.module.ts 파일로 가져오세요:</p>\n<pre><code class=\"hljs language-js\">...\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GoogleMapsModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/google-maps\"</span>;\n\n@<span class=\"hljs-title class_\">NgModule</span>({\n  <span class=\"hljs-attr\">declarations</span>: [...],\n  <span class=\"hljs-attr\">imports</span>: [..., <span class=\"hljs-title class_\">GoogleMapsModule</span>],\n  ...\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<p>다음 스크립트를 애플리케이션의 src/index.html 파일에 추가하고 YOUR_API_KEY를 해당하는 API 키로 교체하세요:</p>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n  ...\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n  ...\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n    (<span class=\"hljs-function\"><span class=\"hljs-params\">g</span> =></span> {\n        <span class=\"hljs-keyword\">var</span> h, a, k, p = <span class=\"hljs-string\">\"The Google Maps JavaScript API\"</span>, c = <span class=\"hljs-string\">\"google\"</span>, l = <span class=\"hljs-string\">\"importLibrary\"</span>, q = <span class=\"hljs-string\">\"__ib__\"</span>, m = <span class=\"hljs-variable language_\">document</span>, b = <span class=\"hljs-variable language_\">window</span>;\n        b = b[c] || (b[c] = {});\n        <span class=\"hljs-keyword\">var</span> d = b.<span class=\"hljs-property\">maps</span> || (b.<span class=\"hljs-property\">maps</span> = {}),\n            r = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>,\n            e = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">URLSearchParams</span>,\n            u = <span class=\"hljs-function\">() =></span> h || (h = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">async</span> (f, n) => {\n            <span class=\"hljs-keyword\">await</span> (a = m.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"script\"</span>));\n            e.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"libraries\"</span>, [...r] + <span class=\"hljs-string\">\"\"</span>);\n            <span class=\"hljs-keyword\">for</span> (k <span class=\"hljs-keyword\">in</span> g) e.<span class=\"hljs-title function_\">set</span>(k.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/[A-Z]/g</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">t</span> =></span> <span class=\"hljs-string\">\"_\"</span> + t[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">toLowerCase</span>()), g[k]);\n            e.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"callback\"</span>, c + <span class=\"hljs-string\">\".maps.\"</span> + q);\n            a.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">`https://maps.<span class=\"hljs-subst\">${c}</span>apis.com/maps/api/js?`</span> + e;\n            d[q] = f;\n            a.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-function\">() =></span> h = <span class=\"hljs-title function_\">n</span>(<span class=\"hljs-title class_\">Error</span>(p + <span class=\"hljs-string\">\" could not load.\"</span>));\n            a.<span class=\"hljs-property\">nonce</span> = m.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\"script[nonce]\"</span>)?.<span class=\"hljs-property\">nonce</span> || <span class=\"hljs-string\">\"\"</span>;\n            m.<span class=\"hljs-property\">head</span>.<span class=\"hljs-title function_\">append</span>(a)\n          }));\n        d[l] ? <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">warn</span>(p + <span class=\"hljs-string\">\" only loads once. Ignoring:\"</span>, g) : d[l] = <span class=\"hljs-function\">(<span class=\"hljs-params\">f, ...n</span>) =></span> r.<span class=\"hljs-title function_\">add</span>(f) &#x26;&#x26; <span class=\"hljs-title function_\">u</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =></span> d[l](f, ...n))\n      })({\n        <span class=\"hljs-attr\">v</span>: <span class=\"hljs-string\">\"weekly\"</span>,\n        <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">\"YOUR_API_KEY\"</span>\n      });\n  </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span></span>\n&#x3C;/html>\n</code></pre>\n<p>스크립트는 닫히는 body 태그 이전에 위치하고 head 태그 사이에 있지 않아야 합니다.</p>\n<h1>지도 추가하기</h1>\n<p>이제 맵의 높이와 너비를 추가하고, 옵션을 설정하여 구글 지도 컴포넌트를 애플리케이션에 추가할 수 있습니다:```</p>\n<ul>\n<li>지도가 렌더링된 맵의 ID를 나타냅니다</li>\n<li>center는 맵의 중심 (위도 및 경도)</li>\n<li>zoom은 맵의 줌 레벨</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;!-- app.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">html</span> -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Angular 17에서 Google 지도<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">google-map</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">\"600px\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"800px\"</span> [<span class=\"hljs-attr\">options</span>]=<span class=\"hljs-string\">\"options\"</span>></span> <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">google-map</span>></span></span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// app.component.ts</span>\n...\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n  ...\n  <span class=\"hljs-attr\">options</span>: google.<span class=\"hljs-property\">maps</span>.<span class=\"hljs-property\">MapOptions</span> = {\n    <span class=\"hljs-attr\">mapId</span>: <span class=\"hljs-string\">\"DEMO_MAP_ID\"</span>,\n    <span class=\"hljs-attr\">center</span>: { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">31</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">147</span> },\n    <span class=\"hljs-attr\">zoom</span>: <span class=\"hljs-number\">4</span>,\n  };\n}\n</code></pre>\n<p>이제 다음 명령을 사용하여 응용 프로그램을 실행하실 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">ng serve\n</code></pre>\n<p>해당 이미지와 비슷한 지도를 얻어야 합니다:</p>\n<h1>고급 마커 추가하기</h1>\n<p>먼저, 마커의 위치(위도 및 경도)를 정의해야 합니다. 다음 변수를 app.component.ts 파일에 선언해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n  ...\n  <span class=\"hljs-attr\">nzLocations</span>: any[] = [\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">36.817685</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">175.699196</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">36.828611</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">175.790222</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">39.927193</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">175.053218</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">41.330162</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">174.865694</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">43.999792</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">170.463352</span> },\n  ];\n  <span class=\"hljs-attr\">auLocations</span>: any[] = [\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">31.56391</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">147.154312</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">33.718234</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">150.363181</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">33.727111</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">150.371124</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">33.848588</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">151.209834</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">33.851702</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">151.216968</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">34.671264</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">150.863657</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">35.304724</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">148.662905</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">37.75</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">145.116667</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">37.759859</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">145.128708</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">37.765015</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">145.133858</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">37.770104</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">145.143299</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">37.7737</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">145.145187</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">37.774785</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">145.137978</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">37.819616</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">144.968119</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">38.330766</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">144.695692</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">42.734358</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">147.439506</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">42.734358</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">147.501315</span> },\n    { <span class=\"hljs-attr\">lat</span>: -<span class=\"hljs-number\">42.735258</span>, <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">147.438</span> },\n  ];\n}\n</code></pre>\n<p>다음으로, app.component.html 파일에서 for-loop를 사용하여 지도에 Advanced Markers를 추가할 것입니다.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">google-map</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">\"600px\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"800px\"</span> [<span class=\"hljs-attr\">options</span>]=<span class=\"hljs-string\">\"options\"</span>></span>\n  @for (location of nzLocations; track location) {\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">map-advanced-marker</span>\n    #<span class=\"hljs-attr\">markerElem</span>=<span class=\"hljs-string\">\"mapAdvancedMarker\"</span>\n    [<span class=\"hljs-attr\">position</span>]=<span class=\"hljs-string\">\"{ lat: location.lat, lng: location.lng }\"</span>\n  /></span>\n  } @for (location of auLocations; track location) {\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">map-advanced-marker</span>\n    #<span class=\"hljs-attr\">markerElem</span>=<span class=\"hljs-string\">\"mapAdvancedMarker\"</span>\n    [<span class=\"hljs-attr\">position</span>]=<span class=\"hljs-string\">\"{ lat: location.lat, lng: location.lng }\"</span>\n  /></span>\n  }\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">google-map</span>></span>\n</code></pre>\n<p>지금은 파일을 저장할 수 있고, 지도에 여러 호주 및 뉴질랜드 위치 표시기가 삽입된 것을 확인할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-18-IntegratingGoogleMapsinAngular17_1.png\" alt=\"Google Map with location markers\"></p>\n<h1>고급 마커 사용자 정의</h1>\n<p>이제 우리가 지도를 성공적으로 초기화하고 표시기를 추가했으므로, 사용자 정의 이미지로 그들을 계속하여 사용자 정의할 수 있습니다.</p>\n<h2>인라인 SVG 사용하기</h2>\n<p>기본 마커를 변경하려면 먼저 DOMParser를 추가하여 SVG 문자열을 DOM 요소로 변환해야 합니다. app.component.ts 파일에서 파서와 사용하려는 SVG 문자열을 초기화합니다:</p>\n<pre><code class=\"hljs language-js\">...\n<span class=\"hljs-title function_\">ngOnInit</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DOMParser</span>();\n  <span class=\"hljs-comment\">// 이것은 집 아이콘의 SVG 문자열입니다. 사용하고 싶은 SVG 아이콘을 자유롭게 사용해주십시오.</span>\n  <span class=\"hljs-keyword\">const</span> svgString = <span class=\"hljs-string\">`&#x3C;svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"#FF5733\" stroke=\"#FFFFFF\" viewBox=\"0 0 24 24\">\n                    &#x3C;path fill-rule=\"evenodd\" d=\"M11.293 3.293a1 1 0 0 1 1.414 0l6 6 2 2a1 1 0 0 1-1.414 1.414L19 12.414V19a2 2 0 0 1-2 2h-3a1 1 0 0 1-1-1v-3h-2v3a1 1 0 0 1-1 1H7a2 2 0 0 1-2-2v-6.586l-.293.293a1 1 0 0 1-1.414-1.414l2-2 6-6Z\" clip-rule=\"evenodd\"/>\n                    &#x3C;/svg>`</span>;\n}\n</code></pre>\n<p>다음으로, 우리의 뉴질랜드 마커를 루프하여 원하는 이미지로 설정합니다. forEach 루프를 사용하여 각 위치의 내용 속성을 파서를 사용하여 문서 요소로 설정합니다. 위 코드에 이어 ngOnInit() 함수 내에서 이 작업을 수행하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">nzLocations</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">location</span>) =></span> {\n  location.<span class=\"hljs-property\">content</span> = parser.<span class=\"hljs-title function_\">parseFromString</span>(svgString, <span class=\"hljs-string\">\"image/svg+xml\"</span>).<span class=\"hljs-property\">documentElement</span>;\n});\n</code></pre>\n<p>모든 위치의 내용이 설정된 후에는 New Zealand 위치의 <code>map-advanced-marker</code> 태그의 내용 속성을 app.component.html 파일에서도 추가하고 수정해야 합니다.</p>\n<pre><code class=\"hljs language-html\">...\n@for (location of nzLocations; track location) {\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">map-advanced-marker</span>\n  #<span class=\"hljs-attr\">markerElem</span>=<span class=\"hljs-string\">\"mapAdvancedMarker\"</span>\n  [<span class=\"hljs-attr\">position</span>]=<span class=\"hljs-string\">\"{ lat: location.lat, lng: location.lng }\"</span>\n  [<span class=\"hljs-attr\">content</span>]=<span class=\"hljs-string\">\"location.content\"</span>\n/></span>\n}\n...\n</code></pre>\n<p>다음 이미지는 마커의 기본 핀 모양을 변경한 후 현재 지도가어떻게 보여야하는지 보여줍니다.```</p>\n<h2>PNG 이미지 사용하기</h2>\n<p>PNG 이미지를 사용하려면 이미지를 참조하고 해당 요소를 위치 내용 태그에 설정해야 합니다.</p>\n<p>app.component.ts 파일에서 먼저 PNG 이미지에 대한 링크를 정의합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">ngOnInit</span>(<span class=\"hljs-params\"></span>) {\n  ...\n  <span class=\"hljs-comment\">// 예시로 구글의 비치 플래그 이미지를 사용할 것이지만, 마음에 드시는 이미지를 자유롭게 사용해도 괜찮습니다</span>\n  <span class=\"hljs-keyword\">const</span> beachFlag = <span class=\"hljs-string\">\"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\"</span>;\n}\n</code></pre>\n<p>그런 다음, 우리는 ngOnInit() 함수 안에서 위 코드 이후에 오스트레일리아 마커들에 대해 forEach 루프를 사용하여 인라인 SVG 섹션에서 했던 것과 유사하게 각 위치의 내용으로 전달될 img 요소를 생성할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">auLocations</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">location</span>) =></span> {\n  <span class=\"hljs-keyword\">let</span> imgTag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"img\"</span>);\n  imgTag.<span class=\"hljs-property\">src</span> = beachFlag;\n  location.<span class=\"hljs-property\">content</span> = imgTag;\n});\n</code></pre>\n<p>한번 더, app.component.html 파일에서 오스트레일리아 위치들의 <code>map-advanced-marker</code> 태그의 내용 속성을 추가 및 수정해야 합니다.```</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">for</span> (location <span class=\"hljs-keyword\">of</span> auLocations; track location) {\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">map-advanced-marker</span>\n  #<span class=\"hljs-attr\">markerElem</span>=<span class=\"hljs-string\">\"mapAdvancedMarker\"</span>\n  [<span class=\"hljs-attr\">position</span>]=<span class=\"hljs-string\">\"{ lat: location.lat, lng: location.lng }\"</span>\n  [<span class=\"hljs-attr\">content</span>]=<span class=\"hljs-string\">\"location.content\"</span>\n/></span></span>\n}\n</code></pre>\n<p>The final result should look like the following image:</p>\n<p><img src=\"/assets/img/2024-05-18-IntegratingGoogleMapsinAngular17_3.png\" alt=\"Integrating Google Maps in Angular\"></p>\n<h2>Adding a Title</h2>\n<p>마커 위로 마우스를 올리면 제목 텍스트가 나타나며, 이는 <code>map-advanced-marker</code> 태그의 title 속성을 수정하여 설정합니다. 아래 코드에서는 각 위치의 인덱스 번호를 기반으로 제목을 추가했지만, 원하는 대로 변경할 수 있습니다.</p>\n<p>따라서 마커 위로 커서를 올리면 해당 위치 번호가 나타나는 작은 텍스트가 표시됩니다.</p>\n<h2>정보 창 추가하기</h2>\n<p>정보 창은 마커에 대한 자세한 정보를 제공할 수 있으며, 일반적으로 마커를 클릭할 때 표시됩니다. 우리는 고급 마커를 사용하고 있기 때문에 Advanced Marker에서 제공되는 새로운 기능인 openAdvancedMarkerElement()를 활용할 수 있습니다.</p>\n<p>먼저, imports를 업데이트하고 app.component.ts 파일에서 infoWindow의 ViewChild를 정의해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">ViewChild</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GoogleMapsModule</span>, <span class=\"hljs-title class_\">MapAdvancedMarker</span>, <span class=\"hljs-title class_\">MapInfoWindow</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/google-maps\"</span>;\n...\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n...\n  @<span class=\"hljs-title class_\">ViewChild</span>(<span class=\"hljs-title class_\">MapInfoWindow</span>) infoWindow!: <span class=\"hljs-title class_\">MapInfoWindow</span>;\n...\n}\n</code></pre>\n<p>그럼, 마커를 클릭했을 때 실행될 AppComponent 클래스의 함수를 작성할 수 있어요:</p>\n<pre><code class=\"hljs language-js\">...\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n...\n  <span class=\"hljs-title function_\">onMarkerClick</span>(<span class=\"hljs-params\">marker: MapAdvancedMarker</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">infoWindow</span>.<span class=\"hljs-title function_\">openAdvancedMarkerElement</span>(marker.<span class=\"hljs-property\">advancedMarker</span>, marker.<span class=\"hljs-property\">advancedMarker</span>.<span class=\"hljs-property\">title</span>);\n  }\n...\n}\n</code></pre>\n<p><code>openAdvancedMarkerElement()</code> 함수의 첫 번째 매개변수는 정보 창이 열릴 마커 요소의 위치를 나타내고, 두 번째 매개변수는 정보 창에 표시될 내용으로 사용될 null이 가능한 문자열 또는 Element를 받아요.</p>\n<p>이제 할 일은 만들어둔 onMarkerClick 함수와 <code>map-info-window</code> 태그를 app.component.html 파일에 추가하는 거에요.</p>\n<p>파일을 저장하고 이제 마커를 클릭하면 마커 제목이 나타나는 정보 창이 표시됩니다.</p>\n<h1>결론</h1>\n<p>지금까지 따라오신 여러분, 축하드립니다! 구글 지도를 구현하여 클릭 시 정보 창이 열리는 사용자 정의 고급 마커가 포함된 지도를 성공적으로 만들었습니다.</p>\n<p>위 코드에 문제가 있거나 전체 코드를 보고 싶은 경우, 이 GitHub 저장소로 방문하여 프로젝트를 확인할 수 있습니다. 꼭 API 키를 교체해 주세요!</p>\n<p>이번 글은 여기까지입니다! 아래 댓글에 의견을 자유롭게 나눠주세요. 도움이 되었고 쉽게 따라올 수 있었기를 바라며, 저의 첫 Medium 글에 클랩 몇 개 부탁 드리겠습니다. 감사합니다! 😄</p>\n</body>\n</html>\n"},"__N_SSG":true}