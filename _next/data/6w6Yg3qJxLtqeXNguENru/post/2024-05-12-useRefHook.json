{"pageProps":{"post":{"title":"useRef 훅 ","description":"","date":"2024-05-12 23:11","slug":"2024-05-12-useRefHook","content":"\n\n<img src=\"/assets/img/2024-05-12-useRefHook_0.png\" />\n\n웹 개발에서 React는 동적 사용자 인터페이스를 구축하는 데 사용되는 주요 라이브러리로 자리 잡았습니다. 각 버전마다 React는 개발 프로세스에 새로운 기능과 개선 사항을 도입하고 개발자들이 더 효율적이고 유지보수 가능한 코드를 생성할 수 있도록 돕습니다.\n\nReact 16.8에서 도입된 useRef 훅은 널리 사용되는 기능 중 하나입니다. 다른 Hooks와 함께 소개된 useRef는 다시 렌더링을 유발하지 않고 렌더링을 거칠 때마다 값이 유지되도록 하는 방법을 제공합니다.\n\n# useRef란 무엇인가요?\n\n\n\n리액트에서 useRef를 간단한 메모지로 생각해보세요. 이것은 웹 페이지에서 일어나는 일들을 추적하는 데 도움이 되며 다른 것들을 망가뜨리지 않게 도와줍니다. 버튼 클릭, 텍스트 상자에 입력 또는 전체 페이지를 새로 고침하지 않고 멋진 애니메이션을 추가하는 데 사용할 수 있어요. 포커스 관리, 애니메이션 및 지속적인 업데이트가 필요하지 않은 정보를 유지하는 데 유용합니다.\n\n\n# 기본 사용법\n\nuseRef를 사용하는 것은 간단합니다. 기본 예제를 살펴보죠:\n\n```js\nimport React, { useRef } from 'react';\nconst MyComponent = () => {\n  const inputRef = useRef(null);\n  const handleFocus = () => {\n    inputRef.current.focus();\n  };\n  return (\n    <div>\n      <input ref={inputRef} type=\"text\" />\n      <button onClick={handleFocus}>Focus Input</button>\n    </div>\n  );\n};\n```\n\n\n\n이 예시에서는 useRef 훅을 사용하여 ref를 생성하고 input 요소에 연결합니다. 버튼을 클릭하면 `handleFocus` 함수가 호출되고, `inputRef`를 사용하여 다시 렌더링되지 않고 input 요소에 포커스가 맞춰집니다.\n\n# 이전 값 관리\n\nuseRef의 또 다른 강력한 측면은 렌더링 간 값의 지속성을 유지할 수 있는 능력입니다. 이는 상태 변수나 프롭의 이전 값을 저장하고 액세스해야 할 때 유용합니다.\n\n```js\nimport React, { useRef, useEffect } from 'react';\nconst MyComponent = ({ value }) => {\n const prevValueRef = useRef();\nuseEffect(() => {\n prevValueRef.current = value;\n }, [value]);\nreturn (\n <div>\n <p>현재 값: {value}</p>\n <p>이전 값: {prevValueRef.current}</p>\n </div>\n );\n};\n```\n\n\n\n이 예시에서는 useRef 훅을 사용하여 `value` 프롭의 이전 값 저장합니다. `value` 프롭이 변경될 때마다 useEffect 훅에서 ref 값을 업데이트합니다. 이를 통해 재랜더링을 유발하지 않고 프롭의 이전 값을 액세스할 수 있습니다.\n\n# 주의사항과 모범 사례\n\nuseRef는 강력한 도구지만, 그 한계와 모범 사례를 이해하는 것이 중요합니다:\n\n1. Mutable Values: useRef는 가변 값을 저장할 수 있기 때문에, 특히 useEffect나 useCallback 훅 내에서 이 값을 수정할 때 주의해야 합니다. 값을 직접 변경하는 것은 예상치 못한 동작과 버그를 유발할 수 있습니다.\n\n\n\n### 2. 직접 DOM 조작을 피하세요\nuseRef는 DOM 요소에 직접 접근하고 조작하는 데 일반적으로 사용됩니다. 그러나 가능한 경우 React의 선언적 접근 방식을 사용하는 것이 좋습니다. 직접 DOM 조작은 가급적으로 조심스럽게 사용해야 합니다.\n\n### 3. 메모리 관리\nuseRef 값은 컴포넌트의 수명 주기 전체 동안 유지되므로 메모리 누수를 방지하려면 참조를 정리하는 것이 중요합니다. 이를 위해 정리 함수에서 ref 값을 null로 설정하거나 빈 종속성 배열을 사용하여 useEffect 내에서 useRef 훅을 사용할 수 있습니다.\n\n# 결론\n\n요약하면 useRef 훅은 React의 훅 중요한 요소로, 값 유지와 다시 렌더링을 유발하지 않고 직접 DOM 요소에 액세스하는 방법을 제공합니다.","ogImage":{"url":"/assets/img/2024-05-12-useRefHook_0.png"},"coverImage":"/assets/img/2024-05-12-useRefHook_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>웹 개발에서 React는 동적 사용자 인터페이스를 구축하는 데 사용되는 주요 라이브러리로 자리 잡았습니다. 각 버전마다 React는 개발 프로세스에 새로운 기능과 개선 사항을 도입하고 개발자들이 더 효율적이고 유지보수 가능한 코드를 생성할 수 있도록 돕습니다.</p>\n<p>React 16.8에서 도입된 useRef 훅은 널리 사용되는 기능 중 하나입니다. 다른 Hooks와 함께 소개된 useRef는 다시 렌더링을 유발하지 않고 렌더링을 거칠 때마다 값이 유지되도록 하는 방법을 제공합니다.</p>\n<h1>useRef란 무엇인가요?</h1>\n<p>리액트에서 useRef를 간단한 메모지로 생각해보세요. 이것은 웹 페이지에서 일어나는 일들을 추적하는 데 도움이 되며 다른 것들을 망가뜨리지 않게 도와줍니다. 버튼 클릭, 텍스트 상자에 입력 또는 전체 페이지를 새로 고침하지 않고 멋진 애니메이션을 추가하는 데 사용할 수 있어요. 포커스 관리, 애니메이션 및 지속적인 업데이트가 필요하지 않은 정보를 유지하는 데 유용합니다.</p>\n<h1>기본 사용법</h1>\n<p>useRef를 사용하는 것은 간단합니다. 기본 예제를 살펴보죠:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useRef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">MyComponent</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> inputRef = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleFocus</span> = (<span class=\"hljs-params\"></span>) => {\n    inputRef.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">focus</span>();\n  };\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{inputRef}</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleFocus}</span>></span>Focus Input<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n</code></pre>\n<p>이 예시에서는 useRef 훅을 사용하여 ref를 생성하고 input 요소에 연결합니다. 버튼을 클릭하면 <code>handleFocus</code> 함수가 호출되고, <code>inputRef</code>를 사용하여 다시 렌더링되지 않고 input 요소에 포커스가 맞춰집니다.</p>\n<h1>이전 값 관리</h1>\n<p>useRef의 또 다른 강력한 측면은 렌더링 간 값의 지속성을 유지할 수 있는 능력입니다. 이는 상태 변수나 프롭의 이전 값을 저장하고 액세스해야 할 때 유용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useRef, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">MyComponent</span> = (<span class=\"hljs-params\">{ value }</span>) => {\n <span class=\"hljs-keyword\">const</span> prevValueRef = <span class=\"hljs-title function_\">useRef</span>();\n<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n prevValueRef.<span class=\"hljs-property\">current</span> = value;\n }, [value]);\n<span class=\"hljs-keyword\">return</span> (\n <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>현재 값: {value}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>이전 값: {prevValueRef.current}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n );\n};\n</code></pre>\n<p>이 예시에서는 useRef 훅을 사용하여 <code>value</code> 프롭의 이전 값 저장합니다. <code>value</code> 프롭이 변경될 때마다 useEffect 훅에서 ref 값을 업데이트합니다. 이를 통해 재랜더링을 유발하지 않고 프롭의 이전 값을 액세스할 수 있습니다.</p>\n<h1>주의사항과 모범 사례</h1>\n<p>useRef는 강력한 도구지만, 그 한계와 모범 사례를 이해하는 것이 중요합니다:</p>\n<ol>\n<li>Mutable Values: useRef는 가변 값을 저장할 수 있기 때문에, 특히 useEffect나 useCallback 훅 내에서 이 값을 수정할 때 주의해야 합니다. 값을 직접 변경하는 것은 예상치 못한 동작과 버그를 유발할 수 있습니다.</li>\n</ol>\n<h3>2. 직접 DOM 조작을 피하세요</h3>\n<p>useRef는 DOM 요소에 직접 접근하고 조작하는 데 일반적으로 사용됩니다. 그러나 가능한 경우 React의 선언적 접근 방식을 사용하는 것이 좋습니다. 직접 DOM 조작은 가급적으로 조심스럽게 사용해야 합니다.</p>\n<h3>3. 메모리 관리</h3>\n<p>useRef 값은 컴포넌트의 수명 주기 전체 동안 유지되므로 메모리 누수를 방지하려면 참조를 정리하는 것이 중요합니다. 이를 위해 정리 함수에서 ref 값을 null로 설정하거나 빈 종속성 배열을 사용하여 useEffect 내에서 useRef 훅을 사용할 수 있습니다.</p>\n<h1>결론</h1>\n<p>요약하면 useRef 훅은 React의 훅 중요한 요소로, 값 유지와 다시 렌더링을 유발하지 않고 직접 DOM 요소에 액세스하는 방법을 제공합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}