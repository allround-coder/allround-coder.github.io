{"pageProps":{"post":{"title":"풀 스택 튜토리얼 React와 NodejsAWS S3에서 사전 서명된 URL로 안전한 파일 업로드하기","description":"","date":"2024-05-12 19:03","slug":"2024-05-12-FullStackTutorialSecureFileUploadwithPresignedURLsinReactandNodejsAWSS3","content":"\n\n안녕하세요! 안전한 파일 업로드 시스템을 구축하는 방법에 대한 포괄적인 자습서에 오신 것을 환영합니다. 이 가이드에서는 React 프런트엔드 설정부터 Node.js 백엔드(Express 사용) 생성 및 안전한 저장소로 AWS S3를 활용하는 전체 프로세스를 안내해 드릴 것입니다.\n\n![이미지](/assets/img/2024-05-12-FullStackTutorialSecureFileUploadwithPresignedURLsinReactandNodejsAWSS3_0.png)\n\n## 왜 Presigned URLs를 사용해야 하는가?\n\n기존 파일 업로드 시스템에서는 클라이언트가 서버를 통해 파일을 전달하고, 서버가 해당 파일을 저장소에 업로드하는 방식으로 작동합니다. 이 방법은 작동은 하지만 대용량 파일 처리 시 효율적이거나 안전하지 않을 수 있습니다. 여기서 Presigned URLs가 등장합니다.\n\n\n\n**사전 서명된 URL**을 사용하면 클라이언트가 스토리지 제공 업체, 이 경우 AWS S3와 직접 상호 작용할 수 있습니다. 백엔드는 클라이언트에게 시간 제한이 있는 안전한 링크인 사전 서명된 URL을 생성하여 전달합니다. 클라이언트는 서버가 파일 데이터를 처리하지 않고도 파일을 S3에 직접 업로드할 수 있습니다. 이는 서버 부하를 줄이는 것뿐만 아니라 스토리지 자격 증명의 노출을 제한하여 보안을 강화하는 데 도움이 됩니다.\n\n## 사용된 기술\n\n프론트엔드: React, 백엔드: Node.js와 Express, 스토리지: AWS S3.\n\n## 앞으로의 여정\n\n\n\n이 강좌에는 프론트엔드, 백엔드 및 AWS S3 세 가지 주요 섹션이 있습니다.\n먼저 프론트엔드 설정부터 시작하여 React 및 AWS S3의 사전 서명 된 URL을 사용하여 강력한 파일 업로드 솔루션을 구축해 보겠습니다!\n\n# 프론트엔드 설정-( 파트 1 )\n\n## 단계 1: React 앱 설정\n\n먼저 Create React App을 사용하여 새 React 앱을 만들어 보겠습니다:\n\n\n\n```js\nnpx create-react-app presigned-url-upload\ncd presigned-url-upload\n```\n\n## 단계 2: 종속 항목 설치\n\n파일 업로드 처리를 위해 필요한 패키지를 설치하세요:\n\n```js\nnpm install aws-amplify aws-amplify-react axios react-dropzone\n```\n\n\n\n## 단계 3: AWS Amplify 구성\n\n프로젝트에 AWS Amplify를 초기화합니다:\n\n```js\namplify init\n```\n\n## 단계 4: FileUpload 컴포넌트 생성\n\n\n\n새로운 FileUpload.js 컴포넌트를 생성하여 파일 업로드를 처리하세요. 파일 선택을 간단하게 하기 위해 react-dropzone 라이브러리를 사용할 거에요:\n\n```js\n// FileUpload.js\nimport React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nconst FileUpload = ({ onFileSelected }) => {\n  const onDrop = useCallback((acceptedFiles) => {\n    onFileSelected(acceptedFiles[0]);\n  }, [onFileSelected]);\n\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n\n  return (\n    <div {...getRootProps()} className=\"dropzone\">\n      <input {...getInputProps()} />\n      <p>여기로 파일을 드래그하거나 클릭하여 파일을 선택하세요</p>\n    </div>\n  );\n};\n\nexport default FileUpload;\n```\n\n## 단계 5: 사전 서명 URL 로직 구현\n\n백앤드로부터 사전 서명 URL을 가져오는 서비스를 생성하세요. api.js 파일을 업데이트하세요:\n\n\n\n```js\n// api.js\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:3001'; // 귀하의 백엔드 서버 URL로 변경해주세요\n\nexport const getPresignedUrl = async (fileName) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/getPresignedUrl`, {\n      fileName,\n    });\n    return response.data.url;\n  } catch (error) {\n    console.error('사전 서명된 URL을 가져오는 중 오류 발생:', error);\n    throw error;\n  }\n};\n```\n\n## 단계 6: 파일 업로드 및 사전 서명된 URL 로직 통합\n\n메인 컴포넌트(App.js)를 업데이트하여 파일 업로드 컴포넌트와 사전 서명된 URL 로직을 통합하세요:\n\n```js\n// App.js\nimport React from 'react';\nimport FileUpload from './FileUpload';\nimport { Storage } from 'aws-amplify';\nimport { getPresignedUrl } from './api';\n\nconst App = () => {\n  const handleFileUpload = async (file) => {\n    try {\n      const presignedUrl = await getPresignedUrl(file.name);\n\n      // 사전 서명된 URL을 사용하여 파일을 S3에 업로드\n      await Storage.put(file.name, file, {\n        contentType: file.type,\n        customPrefix: { public: 'public/' },\n        level: 'public',\n      });\n\n      console.log('파일이 성공적으로 업로드되었습니다!');\n    } catch (error) {\n      console.error('파일 업로드 처리 중 오류 발생:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>AWS S3와 함께 사전 서명된 URL 파일 업로드</h1>\n      <FileUpload onFileSelected={handleFileUpload} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n\n\n# 백엔드 설정 - (파트 2)\n\n## 단계 1: Node.js 프로젝트 설정\n\n이제 백엔드 설정으로 전환해 볼까요? 백엔드를 위한 새 디렉토리를 만들어보세요:\n\n```js\nmkdir backend\ncd backend\nnpm init -y\nnpm install express aws-sdk\n```\n\n\n\n## 단계 2: AWS SDK 구성하기\n\nAWS SDK를 구성하기 위해 awsConfig.js라는 새 파일을 생성하세요. `YOUR_ACCESS_KEY`와 `YOUR_SECRET_KEY`를 여러분의 AWS 액세스 키와 시크릿 키로 교체하세요. `YOUR_ACCESS_KEY`와 `YOUR_SECRET_KEY`를 어떻게 생성하는 지는 이후 Part -3에서 다룰 예정입니다.\n\n```js\n// awsConfig.js\nconst AWS = require('aws-sdk');\n\nAWS.config.update({\n  accessKeyId: 'YOUR_ACCESS_KEY',\n  secretAccessKey: 'YOUR_SECRET_KEY',\n  region: 'us-east-1', // 원하는 지역으로 교체하세요\n});\n\nmodule.exports = AWS;\n```\n\n## 단계 3: Express 서버 생성하기\n\n\n\n새 파일을 만들어서 server.js라고 이름 짓고 Express 서버를 설정하고 사전 서명된 URL 요청을 처리하세요.\n\n```js\n// server.js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst { S3 } = require('./awsConfig');\n\nconst app = express();\nconst PORT = 3001;\n\napp.use(bodyParser.json());\n\n// 실제 S3 버킷 이름으로 'your-bucket-name'을(를) 바꿔주세요.\nconst BUCKET_NAME = 'your-bucket-name';\n\napp.post('/getPresignedUrl', (req, res) => {\n  const { fileName } = req.body;\n\n  const s3 = new S3();\n  const params = {\n    Bucket: BUCKET_NAME,\n    Key: fileName,\n    ContentType: 'application/octet-stream', // 파일 유형에 따라 콘텐츠 유형을 조정하세요\n    Expires: 60, // 사전 서명 URL 만료 시간(초) 설정\n  };\n\n  s3.getSignedUrl('putObject', params, (err, url) => {\n    if (err) {\n      console.error('사전 서명된 URL 생성 중 오류 발생:', err);\n      return res.status(500).json({ error: '사전 서명된 URL 생성 실패' });\n    }\n\n    res.json({ url });\n  });\n});\n\napp.listen(PORT, () => {\n  console.log(`서버가 http://localhost:${PORT}에서 실행 중입니다.`);\n});\n```\n\n## 단계 4: 백엔드 서버 시작하기\n\n다음 명령을 사용하여 백엔드 서버를 실행하세요.\n\n\n\n```js\nnode server.js\n```\n\n서버가 http://localhost:3001에서 실행 중이에요. 서버 파일에서 `your-bucket-name`을 실제 S3 버킷 이름으로 교체해주세요.\n\n# AWS S3 설정 - 3부\n\n## 단계 1: AWS 계정 생성하기\n\n\n\nAWS 계정이 없으신 경우, 새로 만드셔야 해요. AWS 가입 페이지로 이동하여 계정을 생성해보세요.\n\n## 단계 2: AWS 관리 콘솔에 액세스하기\n\nAWS 관리 콘솔에 로그인해주세요.\n\n## 단계 3: S3으로 이동하기\n\n\n\nAWS 관리 콘솔에서 \"서비스\" 드롭다운을 찾아 클릭해주세요. \"저장소\" 아래에서 \"S3\"를 클릭하여 간편 저장소 서비스에 액세스할 수 있어요.\n\n## 단계 4: 새 버킷 만들기\n\n- S3 대시보드에서 \"버킷 생성\" 버튼을 클릭해주세요.\n\n2. 버킷 구성:\n- 이름과 지역: 버킷에 전 세계적으로 고유한 이름을 선택해주세요. 이름은 DNS 호환성이 있어야하며 선택한 이름이 이미 사용 중이면 AWS가 알려줄 거예요. 사용자에게 더 나은 대기 시간을 제공하기 위해 지리적으로 가장 가까운 지역을 선택해주세요.\n- 저장 클래스: 요구 사항에 따라 저장 클래스를 선택해주세요. 일반 목적 저장소에 대한 기본 설정이 일반적으로 적합합니다.\n\n\n\n3. 설정 옵션 구성하기 (선택사항):\n- 사용자의 선호 및 프로젝트 요구에 맞게 버전 관리, 로깅 및 태그 설정을 구성합니다.\n\n4. 권한 설정:\n- 버킷에 액세스할 수 있는 사용자를 정의합니다. 간단히 하려면 현재 기본 설정을 유지할 수 있습니다.\n\n5. 검토:\n- 설정을 검토하고 \"버킷 생성\" 버튼을 클릭합니다.\n\n## 단계 5: 버킷 정책 (선택사항)\n\n\n\n만약 테스트 목적으로 버킷을 공개하려면 공개 액세스를 허용하는 버킷 정책을 추가할 수 있습니다. 그러나 프로덕션 환경에서는 권장되지 않으므로 데이터 노출의 위험이 있습니다.\n\n- 버킷의 \"Permissions\" 탭으로 이동합니다.\n- \"Bucket Policy\"를 클릭하고 아래와 유사한 정책을 추가합니다. your-bucket-name을 실제 버킷 이름으로 바꿔주세요.\n\n```js\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::your-bucket-name/*\"\n    }\n  ]\n}\n```\n\n필요에 따라 권한을 조정하여 사용 사례에 맞게 설정하세요.\n\n\n\n## 6단계: 액세스 자격 증명\n\nS3 버킷과 프로그래밍적으로 상호 작용하려면 AWS 액세스 키와 비밀 키 자격 증명이 필요합니다.\n\n- AWS 관리 콘솔에서 “Services\"를 선택한 후 “IAM\"(Identity and Access Management)을 클릭합니다.\n- IAM 대시 보드에서 왼쪽 탐색 창에서 “Users\"를 클릭합니다.\n- 새 사용자를 만들려면 “Add user\"를 클릭합니다. 사용자 이름을 제공하고 “Programmatic access\"를 선택합니다.\n- 사용자에게 “AmazonS3FullAccess\" 정책을 부여합니다 (또는 필요에 따라 더 제한적인 정책을 선택할 수 있습니다).\n- 사용자를 검토하고 만듭니다. 제공된 액세스 키 ID와 비밀 액세스 키를 저장하세요. 이러한 자격 증명을 안전하게 보관하세요.\n\n이제 AWS에서 S3 버킷을 성공적으로 설정했으며 애플리케이션과 통합하거나 S3 저장소를 활용한 자습서를 따라 진행할 준비가 되었습니다.\n\n\n\n# 결론\n\n축하합니다! 안전하게 파일을 AWS S3에 업로드하기 위한 프로젝트의 전체적인 솔루션을 성공적으로 구현했습니다. 이 튜토리얼에서는 React 프론트엔드와 Node.js 백엔드를 AWS S3와 함께 설정하는 방법을 다뤘습니다. 코드를 프로젝트 요구에 맞게 사용자 정의하고, 안전한 파일 업로드 시스템을 배포할 준비가 된 것입니다. 즐거운 코딩하세요.....","ogImage":{"url":"/assets/img/2024-05-12-FullStackTutorialSecureFileUploadwithPresignedURLsinReactandNodejsAWSS3_0.png"},"coverImage":"/assets/img/2024-05-12-FullStackTutorialSecureFileUploadwithPresignedURLsinReactandNodejsAWSS3_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요! 안전한 파일 업로드 시스템을 구축하는 방법에 대한 포괄적인 자습서에 오신 것을 환영합니다. 이 가이드에서는 React 프런트엔드 설정부터 Node.js 백엔드(Express 사용) 생성 및 안전한 저장소로 AWS S3를 활용하는 전체 프로세스를 안내해 드릴 것입니다.</p>\n<p><img src=\"/assets/img/2024-05-12-FullStackTutorialSecureFileUploadwithPresignedURLsinReactandNodejsAWSS3_0.png\" alt=\"이미지\"></p>\n<h2>왜 Presigned URLs를 사용해야 하는가?</h2>\n<p>기존 파일 업로드 시스템에서는 클라이언트가 서버를 통해 파일을 전달하고, 서버가 해당 파일을 저장소에 업로드하는 방식으로 작동합니다. 이 방법은 작동은 하지만 대용량 파일 처리 시 효율적이거나 안전하지 않을 수 있습니다. 여기서 Presigned URLs가 등장합니다.</p>\n<p><strong>사전 서명된 URL</strong>을 사용하면 클라이언트가 스토리지 제공 업체, 이 경우 AWS S3와 직접 상호 작용할 수 있습니다. 백엔드는 클라이언트에게 시간 제한이 있는 안전한 링크인 사전 서명된 URL을 생성하여 전달합니다. 클라이언트는 서버가 파일 데이터를 처리하지 않고도 파일을 S3에 직접 업로드할 수 있습니다. 이는 서버 부하를 줄이는 것뿐만 아니라 스토리지 자격 증명의 노출을 제한하여 보안을 강화하는 데 도움이 됩니다.</p>\n<h2>사용된 기술</h2>\n<p>프론트엔드: React, 백엔드: Node.js와 Express, 스토리지: AWS S3.</p>\n<h2>앞으로의 여정</h2>\n<p>이 강좌에는 프론트엔드, 백엔드 및 AWS S3 세 가지 주요 섹션이 있습니다.\n먼저 프론트엔드 설정부터 시작하여 React 및 AWS S3의 사전 서명 된 URL을 사용하여 강력한 파일 업로드 솔루션을 구축해 보겠습니다!</p>\n<h1>프론트엔드 설정-( 파트 1 )</h1>\n<h2>단계 1: React 앱 설정</h2>\n<p>먼저 Create React App을 사용하여 새 React 앱을 만들어 보겠습니다:</p>\n<pre><code class=\"hljs language-js\">npx create-react-app presigned-url-upload\ncd presigned-url-upload\n</code></pre>\n<h2>단계 2: 종속 항목 설치</h2>\n<p>파일 업로드 처리를 위해 필요한 패키지를 설치하세요:</p>\n<pre><code class=\"hljs language-js\">npm install aws-amplify aws-amplify-react axios react-dropzone\n</code></pre>\n<h2>단계 3: AWS Amplify 구성</h2>\n<p>프로젝트에 AWS Amplify를 초기화합니다:</p>\n<pre><code class=\"hljs language-js\">amplify init\n</code></pre>\n<h2>단계 4: FileUpload 컴포넌트 생성</h2>\n<p>새로운 FileUpload.js 컴포넌트를 생성하여 파일 업로드를 처리하세요. 파일 선택을 간단하게 하기 위해 react-dropzone 라이브러리를 사용할 거에요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// FileUpload.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useCallback } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { useDropzone } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dropzone'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FileUpload</span> = (<span class=\"hljs-params\">{ onFileSelected }</span>) => {\n  <span class=\"hljs-keyword\">const</span> onDrop = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">acceptedFiles</span>) =></span> {\n    <span class=\"hljs-title function_\">onFileSelected</span>(acceptedFiles[<span class=\"hljs-number\">0</span>]);\n  }, [onFileSelected]);\n\n  <span class=\"hljs-keyword\">const</span> { getRootProps, getInputProps } = <span class=\"hljs-title function_\">useDropzone</span>({ onDrop });\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> {<span class=\"hljs-attr\">...getRootProps</span>()} <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"dropzone\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> {<span class=\"hljs-attr\">...getInputProps</span>()} /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>여기로 파일을 드래그하거나 클릭하여 파일을 선택하세요<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">FileUpload</span>;\n</code></pre>\n<h2>단계 5: 사전 서명 URL 로직 구현</h2>\n<p>백앤드로부터 사전 서명 URL을 가져오는 서비스를 생성하세요. api.js 파일을 업데이트하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// api.js</span>\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">API_BASE_URL</span> = <span class=\"hljs-string\">'http://localhost:3001'</span>; <span class=\"hljs-comment\">// 귀하의 백엔드 서버 URL로 변경해주세요</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getPresignedUrl</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">fileName</span>) => {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${API_BASE_URL}</span>/getPresignedUrl`</span>, {\n      fileName,\n    });\n    <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">url</span>;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'사전 서명된 URL을 가져오는 중 오류 발생:'</span>, error);\n    <span class=\"hljs-keyword\">throw</span> error;\n  }\n};\n</code></pre>\n<h2>단계 6: 파일 업로드 및 사전 서명된 URL 로직 통합</h2>\n<p>메인 컴포넌트(App.js)를 업데이트하여 파일 업로드 컴포넌트와 사전 서명된 URL 로직을 통합하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// App.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">FileUpload</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./FileUpload'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Storage</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'aws-amplify'</span>;\n<span class=\"hljs-keyword\">import</span> { getPresignedUrl } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./api'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleFileUpload</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">file</span>) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> presignedUrl = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getPresignedUrl</span>(file.<span class=\"hljs-property\">name</span>);\n\n      <span class=\"hljs-comment\">// 사전 서명된 URL을 사용하여 파일을 S3에 업로드</span>\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Storage</span>.<span class=\"hljs-title function_\">put</span>(file.<span class=\"hljs-property\">name</span>, file, {\n        <span class=\"hljs-attr\">contentType</span>: file.<span class=\"hljs-property\">type</span>,\n        <span class=\"hljs-attr\">customPrefix</span>: { <span class=\"hljs-attr\">public</span>: <span class=\"hljs-string\">'public/'</span> },\n        <span class=\"hljs-attr\">level</span>: <span class=\"hljs-string\">'public'</span>,\n      });\n\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'파일이 성공적으로 업로드되었습니다!'</span>);\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'파일 업로드 처리 중 오류 발생:'</span>, error);\n    }\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>AWS S3와 함께 사전 서명된 URL 파일 업로드<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">FileUpload</span> <span class=\"hljs-attr\">onFileSelected</span>=<span class=\"hljs-string\">{handleFileUpload}</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<h1>백엔드 설정 - (파트 2)</h1>\n<h2>단계 1: Node.js 프로젝트 설정</h2>\n<p>이제 백엔드 설정으로 전환해 볼까요? 백엔드를 위한 새 디렉토리를 만들어보세요:</p>\n<pre><code class=\"hljs language-js\">mkdir backend\ncd backend\nnpm init -y\nnpm install express aws-sdk\n</code></pre>\n<h2>단계 2: AWS SDK 구성하기</h2>\n<p>AWS SDK를 구성하기 위해 awsConfig.js라는 새 파일을 생성하세요. <code>YOUR_ACCESS_KEY</code>와 <code>YOUR_SECRET_KEY</code>를 여러분의 AWS 액세스 키와 시크릿 키로 교체하세요. <code>YOUR_ACCESS_KEY</code>와 <code>YOUR_SECRET_KEY</code>를 어떻게 생성하는 지는 이후 Part -3에서 다룰 예정입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// awsConfig.js</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">AWS</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'aws-sdk'</span>);\n\n<span class=\"hljs-variable constant_\">AWS</span>.<span class=\"hljs-property\">config</span>.<span class=\"hljs-title function_\">update</span>({\n  <span class=\"hljs-attr\">accessKeyId</span>: <span class=\"hljs-string\">'YOUR_ACCESS_KEY'</span>,\n  <span class=\"hljs-attr\">secretAccessKey</span>: <span class=\"hljs-string\">'YOUR_SECRET_KEY'</span>,\n  <span class=\"hljs-attr\">region</span>: <span class=\"hljs-string\">'us-east-1'</span>, <span class=\"hljs-comment\">// 원하는 지역으로 교체하세요</span>\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-variable constant_\">AWS</span>;\n</code></pre>\n<h2>단계 3: Express 서버 생성하기</h2>\n<p>새 파일을 만들어서 server.js라고 이름 짓고 Express 서버를 설정하고 사전 서명된 URL 요청을 처리하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// server.js</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'body-parser'</span>);\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-variable constant_\">S3</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./awsConfig'</span>);\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PORT</span> = <span class=\"hljs-number\">3001</span>;\n\napp.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">json</span>());\n\n<span class=\"hljs-comment\">// 실제 S3 버킷 이름으로 'your-bucket-name'을(를) 바꿔주세요.</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">BUCKET_NAME</span> = <span class=\"hljs-string\">'your-bucket-name'</span>;\n\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/getPresignedUrl'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> { fileName } = req.<span class=\"hljs-property\">body</span>;\n\n  <span class=\"hljs-keyword\">const</span> s3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">S3</span>();\n  <span class=\"hljs-keyword\">const</span> params = {\n    <span class=\"hljs-title class_\">Bucket</span>: <span class=\"hljs-variable constant_\">BUCKET_NAME</span>,\n    <span class=\"hljs-title class_\">Key</span>: fileName,\n    <span class=\"hljs-title class_\">ContentType</span>: <span class=\"hljs-string\">'application/octet-stream'</span>, <span class=\"hljs-comment\">// 파일 유형에 따라 콘텐츠 유형을 조정하세요</span>\n    <span class=\"hljs-title class_\">Expires</span>: <span class=\"hljs-number\">60</span>, <span class=\"hljs-comment\">// 사전 서명 URL 만료 시간(초) 설정</span>\n  };\n\n  s3.<span class=\"hljs-title function_\">getSignedUrl</span>(<span class=\"hljs-string\">'putObject'</span>, params, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, url</span>) =></span> {\n    <span class=\"hljs-keyword\">if</span> (err) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'사전 서명된 URL 생성 중 오류 발생:'</span>, err);\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">500</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">'사전 서명된 URL 생성 실패'</span> });\n    }\n\n    res.<span class=\"hljs-title function_\">json</span>({ url });\n  });\n});\n\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`서버가 http://localhost:<span class=\"hljs-subst\">${PORT}</span>에서 실행 중입니다.`</span>);\n});\n</code></pre>\n<h2>단계 4: 백엔드 서버 시작하기</h2>\n<p>다음 명령을 사용하여 백엔드 서버를 실행하세요.</p>\n<pre><code class=\"hljs language-js\">node server.<span class=\"hljs-property\">js</span>\n</code></pre>\n<p>서버가 <a href=\"http://localhost:3001%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">http://localhost:3001에서</a> 실행 중이에요. 서버 파일에서 <code>your-bucket-name</code>을 실제 S3 버킷 이름으로 교체해주세요.</p>\n<h1>AWS S3 설정 - 3부</h1>\n<h2>단계 1: AWS 계정 생성하기</h2>\n<p>AWS 계정이 없으신 경우, 새로 만드셔야 해요. AWS 가입 페이지로 이동하여 계정을 생성해보세요.</p>\n<h2>단계 2: AWS 관리 콘솔에 액세스하기</h2>\n<p>AWS 관리 콘솔에 로그인해주세요.</p>\n<h2>단계 3: S3으로 이동하기</h2>\n<p>AWS 관리 콘솔에서 \"서비스\" 드롭다운을 찾아 클릭해주세요. \"저장소\" 아래에서 \"S3\"를 클릭하여 간편 저장소 서비스에 액세스할 수 있어요.</p>\n<h2>단계 4: 새 버킷 만들기</h2>\n<ul>\n<li>S3 대시보드에서 \"버킷 생성\" 버튼을 클릭해주세요.</li>\n</ul>\n<ol start=\"2\">\n<li>버킷 구성:</li>\n</ol>\n<ul>\n<li>이름과 지역: 버킷에 전 세계적으로 고유한 이름을 선택해주세요. 이름은 DNS 호환성이 있어야하며 선택한 이름이 이미 사용 중이면 AWS가 알려줄 거예요. 사용자에게 더 나은 대기 시간을 제공하기 위해 지리적으로 가장 가까운 지역을 선택해주세요.</li>\n<li>저장 클래스: 요구 사항에 따라 저장 클래스를 선택해주세요. 일반 목적 저장소에 대한 기본 설정이 일반적으로 적합합니다.</li>\n</ul>\n<ol start=\"3\">\n<li>설정 옵션 구성하기 (선택사항):</li>\n</ol>\n<ul>\n<li>사용자의 선호 및 프로젝트 요구에 맞게 버전 관리, 로깅 및 태그 설정을 구성합니다.</li>\n</ul>\n<ol start=\"4\">\n<li>권한 설정:</li>\n</ol>\n<ul>\n<li>버킷에 액세스할 수 있는 사용자를 정의합니다. 간단히 하려면 현재 기본 설정을 유지할 수 있습니다.</li>\n</ul>\n<ol start=\"5\">\n<li>검토:</li>\n</ol>\n<ul>\n<li>설정을 검토하고 \"버킷 생성\" 버튼을 클릭합니다.</li>\n</ul>\n<h2>단계 5: 버킷 정책 (선택사항)</h2>\n<p>만약 테스트 목적으로 버킷을 공개하려면 공개 액세스를 허용하는 버킷 정책을 추가할 수 있습니다. 그러나 프로덕션 환경에서는 권장되지 않으므로 데이터 노출의 위험이 있습니다.</p>\n<ul>\n<li>버킷의 \"Permissions\" 탭으로 이동합니다.</li>\n<li>\"Bucket Policy\"를 클릭하고 아래와 유사한 정책을 추가합니다. your-bucket-name을 실제 버킷 이름으로 바꿔주세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"Version\"</span>: <span class=\"hljs-string\">\"2012-10-17\"</span>,\n  <span class=\"hljs-string\">\"Statement\"</span>: [\n    {\n      <span class=\"hljs-string\">\"Effect\"</span>: <span class=\"hljs-string\">\"Allow\"</span>,\n      <span class=\"hljs-string\">\"Principal\"</span>: <span class=\"hljs-string\">\"*\"</span>,\n      <span class=\"hljs-string\">\"Action\"</span>: <span class=\"hljs-string\">\"s3:GetObject\"</span>,\n      <span class=\"hljs-string\">\"Resource\"</span>: <span class=\"hljs-string\">\"arn:aws:s3:::your-bucket-name/*\"</span>\n    }\n  ]\n}\n</code></pre>\n<p>필요에 따라 권한을 조정하여 사용 사례에 맞게 설정하세요.</p>\n<h2>6단계: 액세스 자격 증명</h2>\n<p>S3 버킷과 프로그래밍적으로 상호 작용하려면 AWS 액세스 키와 비밀 키 자격 증명이 필요합니다.</p>\n<ul>\n<li>AWS 관리 콘솔에서 “Services\"를 선택한 후 “IAM\"(Identity and Access Management)을 클릭합니다.</li>\n<li>IAM 대시 보드에서 왼쪽 탐색 창에서 “Users\"를 클릭합니다.</li>\n<li>새 사용자를 만들려면 “Add user\"를 클릭합니다. 사용자 이름을 제공하고 “Programmatic access\"를 선택합니다.</li>\n<li>사용자에게 “AmazonS3FullAccess\" 정책을 부여합니다 (또는 필요에 따라 더 제한적인 정책을 선택할 수 있습니다).</li>\n<li>사용자를 검토하고 만듭니다. 제공된 액세스 키 ID와 비밀 액세스 키를 저장하세요. 이러한 자격 증명을 안전하게 보관하세요.</li>\n</ul>\n<p>이제 AWS에서 S3 버킷을 성공적으로 설정했으며 애플리케이션과 통합하거나 S3 저장소를 활용한 자습서를 따라 진행할 준비가 되었습니다.</p>\n<h1>결론</h1>\n<p>축하합니다! 안전하게 파일을 AWS S3에 업로드하기 위한 프로젝트의 전체적인 솔루션을 성공적으로 구현했습니다. 이 튜토리얼에서는 React 프론트엔드와 Node.js 백엔드를 AWS S3와 함께 설정하는 방법을 다뤘습니다. 코드를 프로젝트 요구에 맞게 사용자 정의하고, 안전한 파일 업로드 시스템을 배포할 준비가 된 것입니다. 즐거운 코딩하세요.....</p>\n</body>\n</html>\n"},"__N_SSG":true}