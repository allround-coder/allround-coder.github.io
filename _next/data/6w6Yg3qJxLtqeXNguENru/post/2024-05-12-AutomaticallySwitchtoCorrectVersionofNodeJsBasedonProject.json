{"pageProps":{"post":{"title":"프로젝트에 따라 Nodejs의 올바른 버전으로 자동 전환하기","description":"","date":"2024-05-12 19:36","slug":"2024-05-12-AutomaticallySwitchtoCorrectVersionofNodeJsBasedonProject","content":"\n\nNode.js 개발의 끊임없이 변화하는 풍경 속에서는 다양한 프로젝트 요구 사항과 호환성 문제를 관리하는 것이 부담스러운 작업일 수 있습니다. 이 기사에서는 프로젝트의 요구 사항에 기반하여 Node.js의 올바른 버전으로 자동 전환하는 컨셉을 탐구합니다.\n\nNVM이란 무엇인가요?\nNVM, Node Version Manager, 여러 개의 Node.js 설치를 시스템에서 원활하게 관리하는 데 사용되는 go-to 솔루션입니다. 다양한 Node.js 버전 요구 사항을 가진 여러 프로젝트에서 작업하는 개발자이거나 최신 기능과 업데이트를 탐구하고 싶어하는 열정적인 사용자라면, NVM은 몇 가지 간단한 명령어로 다양한 Node.js 버전 간에 간편하게 전환할 수 있도록 해줍니다.\n\nNVM GitHub 레포지토리에서 예시를 확인해보세요\n\n```js\n$ nvm use 16\nNow using node v16.9.1 (npm v7.21.1)\n$ node -v\nv16.9.1\n$ nvm use 14\nNow using node v14.18.0 (npm v6.14.15)\n$ node -v\nv14.18.0\n$ nvm install 12\nNow using node v12.22.6 (npm v6.14.5)\n$ node -v\nv12.22.6\n```\n\n\n\n.nvmrc이 무엇인가요?\n\nNode.js 생태계에서 .nvmrc 파일은 Node Version Manager(nvm)에서 사용되는 간단한 구성 파일입니다. 이 파일은 일반적으로 프로젝트의 루트 디렉토리에 위치하며 해당 프로젝트에서 작업할 때 사용해야 하는 특정 Node.js 버전을 지정합니다.\n\n![사진](/assets/img/2024-05-12-AutomaticallySwitchtoCorrectVersionofNodeJsBasedonProject_0.png)\n\n.nvmrc 파일 만들기 및 사용하기\n\n\n\n\"`.nvmrc` 파일을 만들고 사용하는 것은 매우 간단합니다.\n\n1. 프로젝트 디렉토리로 이동합니다.\n\n2. `.nvmrc`라는 새 파일을 만들고 원하는 노드 버전을 입력합니다.\n\n여기 샘플 내용 파일이 있습니다.\"\n\n\n\n```js\nv18.18.2\n```\n\n3. 터미널에서 nano ~/.bashrc를 입력하여 .bashrc를 엽니다.\n\n4. 이 코드를 .bashrc 파일 끝에 붙여넣고 저장하세요.\n\n```js\n# .nvmrc 파일이 있으면 .nvmrc의 노드 버전을 사용합니다.\n\n# 터미널이 시작될 때 호출\nif [[ -f .nvmrc ]]\nthen\n  nvm use\nfi\n\n# cd 명령어를 통해 디렉토리가 변경될 때 호출\nfunction cd() {\n builtin cd \"$@\"\n  if [[ -f .nvmrc ]]\n  then\n    nvm use\n  fi\n}\n```\n\n\n\n5. 컴퓨터를 다시 부팅하거나 터미널에서 다음 명령어를 입력하여 다시 시작하세요: source .bashrc\n\n6. 이제 .nvmrc 파일이 있는 디렉토리에서 터미널을 열 때마다 터미널이 노드 버전을 자동으로 전환할 것입니다.\n\n이것은 .nvmrc 파일이 있는 모든 프로젝트에 대해 작동할 것입니다.\n\n요약하자면, 다음에 프로젝트를 시작할 때 .nvmrc 파일을 생성하고 버전 관련 문제를 해결하세요.","ogImage":{"url":"/assets/img/2024-05-12-AutomaticallySwitchtoCorrectVersionofNodeJsBasedonProject_0.png"},"coverImage":"/assets/img/2024-05-12-AutomaticallySwitchtoCorrectVersionofNodeJsBasedonProject_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Node.js 개발의 끊임없이 변화하는 풍경 속에서는 다양한 프로젝트 요구 사항과 호환성 문제를 관리하는 것이 부담스러운 작업일 수 있습니다. 이 기사에서는 프로젝트의 요구 사항에 기반하여 Node.js의 올바른 버전으로 자동 전환하는 컨셉을 탐구합니다.</p>\n<p>NVM이란 무엇인가요?\nNVM, Node Version Manager, 여러 개의 Node.js 설치를 시스템에서 원활하게 관리하는 데 사용되는 go-to 솔루션입니다. 다양한 Node.js 버전 요구 사항을 가진 여러 프로젝트에서 작업하는 개발자이거나 최신 기능과 업데이트를 탐구하고 싶어하는 열정적인 사용자라면, NVM은 몇 가지 간단한 명령어로 다양한 Node.js 버전 간에 간편하게 전환할 수 있도록 해줍니다.</p>\n<p>NVM GitHub 레포지토리에서 예시를 확인해보세요</p>\n<pre><code class=\"hljs language-js\">$ nvm use <span class=\"hljs-number\">16</span>\n<span class=\"hljs-title class_\">Now</span> using node v16<span class=\"hljs-number\">.9</span><span class=\"hljs-number\">.1</span> (npm v7<span class=\"hljs-number\">.21</span><span class=\"hljs-number\">.1</span>)\n$ node -v\nv16<span class=\"hljs-number\">.9</span><span class=\"hljs-number\">.1</span>\n$ nvm use <span class=\"hljs-number\">14</span>\n<span class=\"hljs-title class_\">Now</span> using node v14<span class=\"hljs-number\">.18</span><span class=\"hljs-number\">.0</span> (npm v6<span class=\"hljs-number\">.14</span><span class=\"hljs-number\">.15</span>)\n$ node -v\nv14<span class=\"hljs-number\">.18</span><span class=\"hljs-number\">.0</span>\n$ nvm install <span class=\"hljs-number\">12</span>\n<span class=\"hljs-title class_\">Now</span> using node v12<span class=\"hljs-number\">.22</span><span class=\"hljs-number\">.6</span> (npm v6<span class=\"hljs-number\">.14</span><span class=\"hljs-number\">.5</span>)\n$ node -v\nv12<span class=\"hljs-number\">.22</span><span class=\"hljs-number\">.6</span>\n</code></pre>\n<p>.nvmrc이 무엇인가요?</p>\n<p>Node.js 생태계에서 .nvmrc 파일은 Node Version Manager(nvm)에서 사용되는 간단한 구성 파일입니다. 이 파일은 일반적으로 프로젝트의 루트 디렉토리에 위치하며 해당 프로젝트에서 작업할 때 사용해야 하는 특정 Node.js 버전을 지정합니다.</p>\n<p><img src=\"/assets/img/2024-05-12-AutomaticallySwitchtoCorrectVersionofNodeJsBasedonProject_0.png\" alt=\"사진\"></p>\n<p>.nvmrc 파일 만들기 및 사용하기</p>\n<p>\"<code>.nvmrc</code> 파일을 만들고 사용하는 것은 매우 간단합니다.</p>\n<ol>\n<li>\n<p>프로젝트 디렉토리로 이동합니다.</p>\n</li>\n<li>\n<p><code>.nvmrc</code>라는 새 파일을 만들고 원하는 노드 버전을 입력합니다.</p>\n</li>\n</ol>\n<p>여기 샘플 내용 파일이 있습니다.\"</p>\n<pre><code class=\"hljs language-js\">v18<span class=\"hljs-number\">.18</span><span class=\"hljs-number\">.2</span>\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>터미널에서 nano ~/.bashrc를 입력하여 .bashrc를 엽니다.</p>\n</li>\n<li>\n<p>이 코드를 .bashrc 파일 끝에 붙여넣고 저장하세요.</p>\n</li>\n</ol>\n<pre><code class=\"hljs language-js\"># .<span class=\"hljs-property\">nvmrc</span> 파일이 있으면 .<span class=\"hljs-property\">nvmrc</span>의 노드 버전을 사용합니다.\n\n# 터미널이 시작될 때 호출\n<span class=\"hljs-keyword\">if</span> [[ -f .<span class=\"hljs-property\">nvmrc</span> ]]\nthen\n  nvm use\nfi\n\n# cd 명령어를 통해 디렉토리가 변경될 때 호출\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">cd</span>(<span class=\"hljs-params\"></span>) {\n builtin cd <span class=\"hljs-string\">\"$@\"</span>\n  <span class=\"hljs-keyword\">if</span> [[ -f .<span class=\"hljs-property\">nvmrc</span> ]]\n  then\n    nvm use\n  fi\n}\n</code></pre>\n<ol start=\"5\">\n<li>\n<p>컴퓨터를 다시 부팅하거나 터미널에서 다음 명령어를 입력하여 다시 시작하세요: source .bashrc</p>\n</li>\n<li>\n<p>이제 .nvmrc 파일이 있는 디렉토리에서 터미널을 열 때마다 터미널이 노드 버전을 자동으로 전환할 것입니다.</p>\n</li>\n</ol>\n<p>이것은 .nvmrc 파일이 있는 모든 프로젝트에 대해 작동할 것입니다.</p>\n<p>요약하자면, 다음에 프로젝트를 시작할 때 .nvmrc 파일을 생성하고 버전 관련 문제를 해결하세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}