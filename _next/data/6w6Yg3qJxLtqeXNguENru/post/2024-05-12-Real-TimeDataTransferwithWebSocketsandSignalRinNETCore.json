{"pageProps":{"post":{"title":"NET Core에서 웹 소켓과 SignalR을 활용한 실시간 데이터 전송","description":"","date":"2024-05-12 19:05","slug":"2024-05-12-Real-TimeDataTransferwithWebSocketsandSignalRinNETCore","content":"\n\n실시간 데이터 전송은 즉각적인 업데이트와 알림이 필요한 애플리케이션에 꼭 필요합니다. .NET Core에서 WebSockets 및 SignalR은 클라이언트와 서버 간의 실시간 통신을 구현하는 강력한 도구를 제공합니다. 이 안내서에서는 WebSockets 및 SignalR을 사용하여 .NET Core 애플리케이션에서 실시간 데이터 전송을 어떻게 구현하는지 살펴볼 것입니다.\n\nDotNet-FullStack-Dev와 함께 계속해서 학습과 탐험의 여정을 떠나보세요. 더 많은 정보 확인은 https://dotnet-fullstack-dev.blogspot.com을 방문하거나 추가 정보를 얻으려면 연락해주세요.\n\n# WebSockets 및 SignalR이란?\n\n# WebSockets:\n\n\n\nWebSockets는 단일 TCP 연결을 통해 전 이중 통신 채널을 제공하는 프로토콜입니다. 이를 통해 클라이언트와 서버 간에 양방향 통신이 가능하며 HTTP 폴링의 오버헤드 없이 비동기적으로 데이터를 송수신할 수 있습니다.\n\n# WebSockets를 사용해야 하는 이유\n\n- 실시간 통신: WebSockets를 이용하면 실시간 데이터 전송이 가능해지며, 채팅 애플리케이션, 실시간 대시보드, 온라인 게임 플랫폼과 같은 즉각적인 업데이트가 필요한 애플리케이션에 이상적입니다.\n- 효율성: 전통적인 HTTP 폴링이나 롱 폴링 기술과 달리 WebSockets는 지속적인 연결을 유지하여 오버헤드를 줄이고 지연 시간을 최소화하며 네트워크 트래픽을 감소시킵니다.\n- 전 이중 통신: WebSockets는 양쪽으로 동시에 데이터 전송을 지원하여 클라이언트와 서버가 독립적으로 메시지를 송수신할 수 있습니다.\n- 확장성: WebSockets는 대규모 동시 연결을 효율적으로 처리할 수 있어 확장 가능하고 고성능 애플리케이션에 적합합니다.\n\n# WebSockets 대안:\n\n| **대안**                  | **설명**                                                                                                    |\n|-----------------------|---------------------------------------------------------------------------------------------------------|\n| Server-Sent Events    | 서버에서 클라이언트로 단 방향 메시지 스트림을 전송하는 기술로, WebSockets와 유사하지만 단방향 통신만 지원합니다.   |\n| Long Polling           | 클라이언트가 서버에게 요청을 보내고, 서버는 데이터를 준비할 때까지 응답을 지연시키는 방법입니다.                  |\n\n\n\n웹소켓은 실시간 통신에 널리 사용되지만, 유사한 기능을 제공하는 몇 가지 대안이 있습니다:\n\n- Server-Sent Events (SSE): SSE은 서버가 HTTP 연결을 통해 클라이언트로 업데이트를 푸시할 수 있는 단방향 통신 프로토콜입니다. 웹소켓과 달리 SSE는 서버에서 클라이언트로의 통신에만 제한되며 양방향 통신을 지원하지 않습니다.\n- Long Polling: Long Polling은 클라이언트가 서버에 요청을 보내고, 서버가 새로운 데이터가 나타날 때까지 연결을 유지하거나 타임아웃이 발생할 때까지 연결을 열어두는 기술입니다. Long Polling은 실시간 업데이트를 달성할 수 있지만, 연결을 자주 열고 닫기 때문에 웹소켓보다 효율성이 떨어집니다.\n\n# 웹소켓의 장단점:\n\n## 장점:\n\n\n\n- 실시간 업데이트: 웹 소켓을 통해 실시간 통신이 가능하며 클라이언트에 즉시 업데이트를 제공합니다.\n- 효율성: 웹 소켓은 폴링 기술과 비교하여 대기 시간과 네트워크 오버헤드를 줄입니다.\n- 전이중 통신: 양방향 데이터 전송을 지원하여 클라이언트와 서버가 동시에 메시지를 보내고 받을 수 있습니다.\n- 확장성: 웹 소켓은 많은 동시 연결을 효율적으로 처리할 수 있어 확장 가능한 애플리케이션에 적합합니다.\n\n## 단점:\n\n- 복잡성: 웹 소켓 연결을 구현하고 관리하는 것은 전통적인 HTTP 통신보다 더 복잡할 수 있습니다.\n- 브라우저 지원: 최신 브라우저는 웹 소켓을 지원하지만 오래된 브라우저는 지원하지 않을 수 있어 대체 메커니즘이 필요할 수 있습니다.\n- 방화벽 문제: 웹 소켓은 제한적인 방화벽이나 프록시 서버에서 웹 소켓 트래픽을 차단할 수 있는 문제가 있을 수 있습니다.\n\n# SignalR:\n\n\n\nSignalR은 .NET 애플리케이션에서 실시간 웹 기능을 간단하게 만드는 데 사용되는 웹소켓과 기타 전송 매커니즘 위에 구축된 고수준 라이브러리입니다. 이는 연결 관리를 추상화하고 클라이언트에게 메시지를 브로드캐스트하고 클라이언트-서버 통신을 다루기 위한 간단한 API를 제공합니다.\n\n# SignalR을 사용해야 하는 이유:\n\n- 간단한 개발: SignalR은 웹소켓 연결 관리의 복잡성을 감추고 .NET 애플리케이션에서 실시간 기능을 구현하기 위한 간단한 API를 제공합니다. 연결 관리, 메시지 라우팅 및 오류 처리를 처리하여 개발자가 응용프로그램 논리에 집중할 수 있습니다.\n- 크로스 플랫폼 지원: SignalR은 서버 측 .NET 애플리케이션 및 클라이언트 측 JavaScript 프레임워크를 모두 지원하여 웹 애플리케이션, 데스크톱 애플리케이션 및 모바일 앱에서 실시간 기능을 구축하기에 적합합니다.\n- 확장성: SignalR은 애플리케이션과 함께 확장되도록 설계되어 많은 동시 연결을 지원하며 다중 서버로 확장하거나 Azure SignalR 서비스와 같은 클라우드 기반 솔루션을 사용할 수 있는 옵션을 제공합니다.\n- 후행 메커니즘: SignalR은 웹소켓을 지원하지 않는 클라이언트를 위해 Server-Sent Events (SSE) 또는 롱 폴링과 같은 대체 전송 메커니즘으로 자동으로 후행하므로 브라우저 및 기기에 걸쳐 넓은 호환성을 보장합니다.\n\n\n\n신호R이 .NET 애플리케이션에서 실시간 웹 기능을 구현하는 데 인기 있는 선택지라는 것을 알고 계실 겁니다. 그러나 여러 대안들도 비슷한 기능을 제공합니다:\n\n- Raw WebSocket APIs: 개발자들은 .NET이나 다른 프로그래밍 언어에서 제공하는 Raw WebSocket APIs를 활용하여, SignalR이 제공하는 추상화 없이 실시간 통신을 구현할 수 있습니다. 그러나 이 방식은 더 많은 수동 구성을 요구하며, 개발자들에게는 불편할 수도 있습니다.\n- Third-Party Libraries: .NET 애플리케이션에서 실시간 통신을 구현하는 데 사용할 수 있는 외부 라이브러리들이 있습니다. Socket.IO for .NET이나 Fleck과 같은 라이브러리들은 추가 기능과 유연성을 제공하지만, 통합 및 유지보수에 더 많은 노력이 필요할 수 있습니다.\n\n# SignalR의 장단점:\n\n## 장점:\n\n\n\n- 간편한 개발: SignalR은 실시간 기능을 구현하는 데 사용하기 위한 고수준 API를 제공하여 개발 시간과 복잡성을 줄여줍니다.\n- 크로스 플랫폼 지원: SignalR은 웹 브라우저, 데스크톱 애플리케이션 및 모바일 기기를 포함한 다양한 클라이언트를 지원합니다.\n- 확장성: SignalR은 애플리케이션과 함께 확장되도록 설계되어 많은 동시 연결을 지원하고 여러 서버로 확장할 수 있는 옵션을 제공합니다.\n- 후행 메커니즘: SignalR은 웹소켓을 지원하지 않는 클라이언트를 위해 대체 전송 메커니즘으로 자동으로 후행하므로 넓은 호환성을 보장합니다.\n\n## 단점:\n\n- .NET 프레임워크/Core에 대한 의존성: SignalR은 .NET 생태계와 긴밀하게 결합되어 있어 다른 기술로 개발된 애플리케이션에는 적합하지 않을 수 있습니다.\n- 성능 부하: SignalR은 개발을 단순화하지만 원시 웹소켓 구현과 비교해 일부 성능 부하를 도입할 수 있습니다.\n- 복잡성: SignalR은 실시간 통신의 일부 복잡성을 추상화하지만 복잡한 시나리오에서는 추가 구성 및 문제 해결이 필요할 수 있습니다.\n\n# 왜 실시간 데이터 전송을 사용해야 할까요?\n\n\n\n실시간 데이터 전송은 채팅 애플리케이션, 실시간 대시보드 및 모니터링 시스템, 협업 문서 편집 도구, 온라인 게임 플랫폼, 주식 시장 추적 애플리케이션, 라이브 스포츠 점수판과 같이 실시간 업데이트가 필요한 애플리케이션에 필수적입니다.\n\n# SignalR을 사용한 .NET Core 구현\n\n## 단계 1: SignalR 설치\n\n\n\nNuGet Package Manager를 사용하여 SignalR 패키지를 설치하세요:\n\n```js\ndotnet add package Microsoft.AspNetCore.SignalR\n```\n\n## 단계 2: SignalR 허브 만들기\n\n클라이언트 연결을 관리하고 메시지 브로드캐스팅을 처리하는 SignalR 허브를 만드세요.\n\n\n\n```js\nMicrosoft.AspNetCore.SignalR를 사용하여 SignalR을 구성하고 있어요. WebSocket 지원을 활성화하고 허브 엔드포인트를 매핑하려면 Startup 클래스에서 SignalR을 구성하세요.\n\n```js\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSignalR();\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseRouting();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapHub<ChatHub>(\"/chatHub\");\n    });\n}\n```\n\n\n\n## 단계 4: 클라이언트 측 통합\n\n클라이언트 측에 SignalR을 통합하여 연결을 설정하고 실시간 업데이트를 받으세요.\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>SignalR 채팅</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/signalr/5.0.0/signalr.min.js\"></script>\n</head>\n<body>\n    <div id=\"messages\"></div>\n    <input type=\"text\" id=\"messageInput\" />\n    <button onclick=\"sendMessage()\">전송</button>\n\n    <script>\n        const connection = new signalR.HubConnectionBuilder()\n            .withUrl(\"/chatHub\")\n            .build();\n\n        connection.on(\"ReceiveMessage\", (user, message) => {\n            document.getElementById(\"messages\").innerHTML += `<p><strong>${user}</strong>: ${message}</p>`;\n        });\n\n        connection.start().then(() => {\n            console.log(\"SignalR 허브에 연결되었습니다\");\n        }).catch((err) => {\n            console.error(\"SignalR 허브에 연결하는 중 오류가 발생했습니다:\", err);\n        });\n\n        function sendMessage() {\n            const user = \"사용자\"; // 입력값으로부터 사용자 정보 가져오기\n            const message = document.getElementById(\"messageInput\").value;\n            connection.invoke(\"SendMessage\", user, message);\n        }\n    </script>\n</body>\n</html>\n```\n\n이 예제를 확장하여 클라이언트로부터 메시지를 받고 백엔드와 프론트엔드 코드를 사용한 엔드 투 엔드 솔루션을 제공해보죠.\n\n\n\n# Backend: ASP.NET Core Web API with SignalR\n\n## Step 1: SignalR 허브 생성\n\n클라이언트 연결을 관리하고 메시지 브로드캐스팅을 처리하는 SignalR 허브를 생성하세요.\n\n```javascript\nusing Microsoft.AspNetCore.SignalR;\nusing System.Threading.Tasks;\n\npublic class ChatHub : Hub\n{\n    public async Task SendMessage(string user, string message)\n    {\n        await Clients.All.SendAsync(\"ReceiveMessage\", user, message);\n    }\n\n    public void ReceiveMessage(string user, string message)\n    {\n        // 받은 메시지 처리(예: 데이터베이스 저장, 처리 등)\n    }\n}\n```\n\n\n\n## 단계 2: Startup에서 SignalR 구성\n\nStartup 클래스에서 SignalR을 구성하여 WebSocket 지원을 활성화하고 허브 엔드포인트를 매핑합니다.\n\n```js\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSignalR();\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseRouting();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapHub<ChatHub>(\"/chatHub\");\n    });\n}\n```\n\n## 단계 3: 메시지 수신을 위한 컨트롤러 생성\n\n\n\n클라이언트로부터 수신된 메시지를 처리하는 컨트롤러를 만들어보세요.\n\n```js\nusing Microsoft.AspNetCore.Mvc;\n\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class ChatController : ControllerBase\n{\n    private readonly IHubContext<ChatHub> _hubContext;\n\n    public ChatController(IHubContext<ChatHub> hubContext)\n    {\n        _hubContext = hubContext;\n    }\n\n    [HttpPost(\"ReceiveMessage\")]\n    public async Task<IActionResult> ReceiveMessage(string user, string message)\n    {\n        await _hubContext.Clients.All.SendAsync(\"ReceiveMessage\", user, message);\n        return Ok();\n    }\n}\n```\n\n# Frontend: React UI with SignalR\n\n## Step 1: SignalR 클라이언트 라이브러리 설치\n\n\n\nJavaScript SignalR 클라이언트 라이브러리를 npm을 사용해서 설치해주세요.\n\n```js\nnpm install @microsoft/signalr\n```\n\n## 단계 2: WebSocket 연결 생성\n\nSignalR 허브에 대한 WebSocket 연결을 생성하고 들어오는 메시지를 처리하세요.\n\n\n\n```js\nimport React, { useState, useEffect } from 'react';\nimport * as signalR from '@microsoft/signalr';\n\nconst Chat = () => {\n    const [messages, setMessages] = useState([]);\n    const [connection, setConnection] = useState(null);\n\n    useEffect(() => {\n        const newConnection = new signalR.HubConnectionBuilder()\n            .withUrl(\"/chatHub\")\n            .build();\n\n        newConnection.on(\"ReceiveMessage\", (user, message) => {\n            setMessages([...messages, { user, message }]);\n        });\n\n        newConnection.start()\n            .then(() => console.log(\"SignalR 허브에 연결되었습니다.\"))\n            .catch(error => console.error(\"SignalR 허브에 연결 중 오류 발생:\", error));\n\n        setConnection(newConnection);\n    }, []);\n\n    const sendMessage = () => {\n        const user = \"User\"; // 입력에서 사용자 가져오기\n        const message = \"안녕, SignalR!\"; // 입력에서 메시지 가져오기\n        connection.invoke(\"SendMessage\", user, message)\n            .catch(error => console.error(\"메시지 전송 중 오류 발생:\", error));\n    };\n\n    return (\n        <div>\n            <div>\n                {messages.map((message, index) => (\n                    <div key={index}>\n                        <strong>{message.user}</strong>: {message.message}\n                    </div>\n                ))}\n            </div>\n            <input type=\"text\" />\n            <button onClick={sendMessage}>전송</button>\n        </div>\n    );\n};\n\nexport default Chat;\n```\n\n# 결론\n\n이 가이드에서는 .NET Core 애플리케이션에서 웹소켓과 SignalR을 사용하여 실시간 데이터 전송을 구현하는 방법을 살펴보았습니다. SignalR을 활용하면 클라이언트와 서버 간의 실시간 통신을 쉽게 구현할 수 있어서 상호작용적이고 협업이 가능한 웹 애플리케이션을 구축하기에 이상적입니다. 채팅 애플리케이션, 실시간 대시보드, 멀티플레이어 게임을 구축할 때, 사용자에게 실시간 업데이트를 제공하는 데 필요한 도구를 제공하는 SignalR을 사용할 수 있습니다.\n\n이 가이드에서는 .NET Core 백엔드와 React 프런트엔드를 사용하여 SignalR을 통한 실시간 메시징을 구현하는 방법을 안내했습니다. 사용자는 프런트엔드에서 메시지를 보내고, 백엔드 SignalR 허브에서 모든 연결된 클라이언트에게 메시지를 수신 및 브로드캐스트합니다. 이 최종 솔루션은 웹 애플리케이션에 대한 실시간 메시징 경험을 원활하게 제공합니다.\n```\n\n\n\n표 태그를 Markdown 형식으로 변경해주실래요.","ogImage":{"url":"/assets/img/2024-05-12-Real-TimeDataTransferwithWebSocketsandSignalRinNETCore_0.png"},"coverImage":"/assets/img/2024-05-12-Real-TimeDataTransferwithWebSocketsandSignalRinNETCore_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>실시간 데이터 전송은 즉각적인 업데이트와 알림이 필요한 애플리케이션에 꼭 필요합니다. .NET Core에서 WebSockets 및 SignalR은 클라이언트와 서버 간의 실시간 통신을 구현하는 강력한 도구를 제공합니다. 이 안내서에서는 WebSockets 및 SignalR을 사용하여 .NET Core 애플리케이션에서 실시간 데이터 전송을 어떻게 구현하는지 살펴볼 것입니다.</p>\n<p>DotNet-FullStack-Dev와 함께 계속해서 학습과 탐험의 여정을 떠나보세요. 더 많은 정보 확인은 <a href=\"https://dotnet-fullstack-dev.blogspot.com%EC%9D%84\" rel=\"nofollow\" target=\"_blank\">https://dotnet-fullstack-dev.blogspot.com을</a> 방문하거나 추가 정보를 얻으려면 연락해주세요.</p>\n<h1>WebSockets 및 SignalR이란?</h1>\n<h1>WebSockets:</h1>\n<p>WebSockets는 단일 TCP 연결을 통해 전 이중 통신 채널을 제공하는 프로토콜입니다. 이를 통해 클라이언트와 서버 간에 양방향 통신이 가능하며 HTTP 폴링의 오버헤드 없이 비동기적으로 데이터를 송수신할 수 있습니다.</p>\n<h1>WebSockets를 사용해야 하는 이유</h1>\n<ul>\n<li>실시간 통신: WebSockets를 이용하면 실시간 데이터 전송이 가능해지며, 채팅 애플리케이션, 실시간 대시보드, 온라인 게임 플랫폼과 같은 즉각적인 업데이트가 필요한 애플리케이션에 이상적입니다.</li>\n<li>효율성: 전통적인 HTTP 폴링이나 롱 폴링 기술과 달리 WebSockets는 지속적인 연결을 유지하여 오버헤드를 줄이고 지연 시간을 최소화하며 네트워크 트래픽을 감소시킵니다.</li>\n<li>전 이중 통신: WebSockets는 양쪽으로 동시에 데이터 전송을 지원하여 클라이언트와 서버가 독립적으로 메시지를 송수신할 수 있습니다.</li>\n<li>확장성: WebSockets는 대규모 동시 연결을 효율적으로 처리할 수 있어 확장 가능하고 고성능 애플리케이션에 적합합니다.</li>\n</ul>\n<h1>WebSockets 대안:</h1>\n<table>\n<thead>\n<tr>\n<th><strong>대안</strong></th>\n<th><strong>설명</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Server-Sent Events</td>\n<td>서버에서 클라이언트로 단 방향 메시지 스트림을 전송하는 기술로, WebSockets와 유사하지만 단방향 통신만 지원합니다.</td>\n</tr>\n<tr>\n<td>Long Polling</td>\n<td>클라이언트가 서버에게 요청을 보내고, 서버는 데이터를 준비할 때까지 응답을 지연시키는 방법입니다.</td>\n</tr>\n</tbody>\n</table>\n<p>웹소켓은 실시간 통신에 널리 사용되지만, 유사한 기능을 제공하는 몇 가지 대안이 있습니다:</p>\n<ul>\n<li>Server-Sent Events (SSE): SSE은 서버가 HTTP 연결을 통해 클라이언트로 업데이트를 푸시할 수 있는 단방향 통신 프로토콜입니다. 웹소켓과 달리 SSE는 서버에서 클라이언트로의 통신에만 제한되며 양방향 통신을 지원하지 않습니다.</li>\n<li>Long Polling: Long Polling은 클라이언트가 서버에 요청을 보내고, 서버가 새로운 데이터가 나타날 때까지 연결을 유지하거나 타임아웃이 발생할 때까지 연결을 열어두는 기술입니다. Long Polling은 실시간 업데이트를 달성할 수 있지만, 연결을 자주 열고 닫기 때문에 웹소켓보다 효율성이 떨어집니다.</li>\n</ul>\n<h1>웹소켓의 장단점:</h1>\n<h2>장점:</h2>\n<ul>\n<li>실시간 업데이트: 웹 소켓을 통해 실시간 통신이 가능하며 클라이언트에 즉시 업데이트를 제공합니다.</li>\n<li>효율성: 웹 소켓은 폴링 기술과 비교하여 대기 시간과 네트워크 오버헤드를 줄입니다.</li>\n<li>전이중 통신: 양방향 데이터 전송을 지원하여 클라이언트와 서버가 동시에 메시지를 보내고 받을 수 있습니다.</li>\n<li>확장성: 웹 소켓은 많은 동시 연결을 효율적으로 처리할 수 있어 확장 가능한 애플리케이션에 적합합니다.</li>\n</ul>\n<h2>단점:</h2>\n<ul>\n<li>복잡성: 웹 소켓 연결을 구현하고 관리하는 것은 전통적인 HTTP 통신보다 더 복잡할 수 있습니다.</li>\n<li>브라우저 지원: 최신 브라우저는 웹 소켓을 지원하지만 오래된 브라우저는 지원하지 않을 수 있어 대체 메커니즘이 필요할 수 있습니다.</li>\n<li>방화벽 문제: 웹 소켓은 제한적인 방화벽이나 프록시 서버에서 웹 소켓 트래픽을 차단할 수 있는 문제가 있을 수 있습니다.</li>\n</ul>\n<h1>SignalR:</h1>\n<p>SignalR은 .NET 애플리케이션에서 실시간 웹 기능을 간단하게 만드는 데 사용되는 웹소켓과 기타 전송 매커니즘 위에 구축된 고수준 라이브러리입니다. 이는 연결 관리를 추상화하고 클라이언트에게 메시지를 브로드캐스트하고 클라이언트-서버 통신을 다루기 위한 간단한 API를 제공합니다.</p>\n<h1>SignalR을 사용해야 하는 이유:</h1>\n<ul>\n<li>간단한 개발: SignalR은 웹소켓 연결 관리의 복잡성을 감추고 .NET 애플리케이션에서 실시간 기능을 구현하기 위한 간단한 API를 제공합니다. 연결 관리, 메시지 라우팅 및 오류 처리를 처리하여 개발자가 응용프로그램 논리에 집중할 수 있습니다.</li>\n<li>크로스 플랫폼 지원: SignalR은 서버 측 .NET 애플리케이션 및 클라이언트 측 JavaScript 프레임워크를 모두 지원하여 웹 애플리케이션, 데스크톱 애플리케이션 및 모바일 앱에서 실시간 기능을 구축하기에 적합합니다.</li>\n<li>확장성: SignalR은 애플리케이션과 함께 확장되도록 설계되어 많은 동시 연결을 지원하며 다중 서버로 확장하거나 Azure SignalR 서비스와 같은 클라우드 기반 솔루션을 사용할 수 있는 옵션을 제공합니다.</li>\n<li>후행 메커니즘: SignalR은 웹소켓을 지원하지 않는 클라이언트를 위해 Server-Sent Events (SSE) 또는 롱 폴링과 같은 대체 전송 메커니즘으로 자동으로 후행하므로 브라우저 및 기기에 걸쳐 넓은 호환성을 보장합니다.</li>\n</ul>\n<p>신호R이 .NET 애플리케이션에서 실시간 웹 기능을 구현하는 데 인기 있는 선택지라는 것을 알고 계실 겁니다. 그러나 여러 대안들도 비슷한 기능을 제공합니다:</p>\n<ul>\n<li>Raw WebSocket APIs: 개발자들은 .NET이나 다른 프로그래밍 언어에서 제공하는 Raw WebSocket APIs를 활용하여, SignalR이 제공하는 추상화 없이 실시간 통신을 구현할 수 있습니다. 그러나 이 방식은 더 많은 수동 구성을 요구하며, 개발자들에게는 불편할 수도 있습니다.</li>\n<li>Third-Party Libraries: .NET 애플리케이션에서 실시간 통신을 구현하는 데 사용할 수 있는 외부 라이브러리들이 있습니다. Socket.IO for .NET이나 Fleck과 같은 라이브러리들은 추가 기능과 유연성을 제공하지만, 통합 및 유지보수에 더 많은 노력이 필요할 수 있습니다.</li>\n</ul>\n<h1>SignalR의 장단점:</h1>\n<h2>장점:</h2>\n<ul>\n<li>간편한 개발: SignalR은 실시간 기능을 구현하는 데 사용하기 위한 고수준 API를 제공하여 개발 시간과 복잡성을 줄여줍니다.</li>\n<li>크로스 플랫폼 지원: SignalR은 웹 브라우저, 데스크톱 애플리케이션 및 모바일 기기를 포함한 다양한 클라이언트를 지원합니다.</li>\n<li>확장성: SignalR은 애플리케이션과 함께 확장되도록 설계되어 많은 동시 연결을 지원하고 여러 서버로 확장할 수 있는 옵션을 제공합니다.</li>\n<li>후행 메커니즘: SignalR은 웹소켓을 지원하지 않는 클라이언트를 위해 대체 전송 메커니즘으로 자동으로 후행하므로 넓은 호환성을 보장합니다.</li>\n</ul>\n<h2>단점:</h2>\n<ul>\n<li>.NET 프레임워크/Core에 대한 의존성: SignalR은 .NET 생태계와 긴밀하게 결합되어 있어 다른 기술로 개발된 애플리케이션에는 적합하지 않을 수 있습니다.</li>\n<li>성능 부하: SignalR은 개발을 단순화하지만 원시 웹소켓 구현과 비교해 일부 성능 부하를 도입할 수 있습니다.</li>\n<li>복잡성: SignalR은 실시간 통신의 일부 복잡성을 추상화하지만 복잡한 시나리오에서는 추가 구성 및 문제 해결이 필요할 수 있습니다.</li>\n</ul>\n<h1>왜 실시간 데이터 전송을 사용해야 할까요?</h1>\n<p>실시간 데이터 전송은 채팅 애플리케이션, 실시간 대시보드 및 모니터링 시스템, 협업 문서 편집 도구, 온라인 게임 플랫폼, 주식 시장 추적 애플리케이션, 라이브 스포츠 점수판과 같이 실시간 업데이트가 필요한 애플리케이션에 필수적입니다.</p>\n<h1>SignalR을 사용한 .NET Core 구현</h1>\n<h2>단계 1: SignalR 설치</h2>\n<p>NuGet Package Manager를 사용하여 SignalR 패키지를 설치하세요:</p>\n<pre><code class=\"hljs language-js\">dotnet add package <span class=\"hljs-title class_\">Microsoft</span>.<span class=\"hljs-property\">AspNetCore</span>.<span class=\"hljs-property\">SignalR</span>\n</code></pre>\n<h2>단계 2: SignalR 허브 만들기</h2>\n<p>클라이언트 연결을 관리하고 메시지 브로드캐스팅을 처리하는 SignalR 허브를 만드세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Microsoft</span>.<span class=\"hljs-property\">AspNetCore</span>.<span class=\"hljs-property\">SignalR</span>를 사용하여 <span class=\"hljs-title class_\">SignalR</span>을 구성하고 있어요. <span class=\"hljs-title class_\">WebSocket</span> 지원을 활성화하고 허브 엔드포인트를 매핑하려면 <span class=\"hljs-title class_\">Startup</span> 클래스에서 <span class=\"hljs-title class_\">SignalR</span>을 구성하세요.\n\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">`js\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSignalR();\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseRouting();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapHub&#x3C;ChatHub>(\"/chatHub\");\n    });\n}\n</span></code></pre>\n<h2>단계 4: 클라이언트 측 통합</h2>\n<p>클라이언트 측에 SignalR을 통합하여 연결을 설정하고 실시간 업데이트를 받으세요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>SignalR 채팅<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/signalr/5.0.0/signalr.min.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"messages\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"messageInput\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"sendMessage()\"</span>></span>전송<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n        <span class=\"hljs-keyword\">const</span> connection = <span class=\"hljs-keyword\">new</span> signalR.<span class=\"hljs-title class_\">HubConnectionBuilder</span>()\n            .<span class=\"hljs-title function_\">withUrl</span>(<span class=\"hljs-string\">\"/chatHub\"</span>)\n            .<span class=\"hljs-title function_\">build</span>();\n\n        connection.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"ReceiveMessage\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">user, message</span>) =></span> {\n            <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"messages\"</span>).<span class=\"hljs-property\">innerHTML</span> += <span class=\"hljs-string\">`&#x3C;p>&#x3C;strong><span class=\"hljs-subst\">${user}</span>&#x3C;/strong>: <span class=\"hljs-subst\">${message}</span>&#x3C;/p>`</span>;\n        });\n\n        connection.<span class=\"hljs-title function_\">start</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"SignalR 허브에 연결되었습니다\"</span>);\n        }).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"SignalR 허브에 연결하는 중 오류가 발생했습니다:\"</span>, err);\n        });\n\n        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendMessage</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-string\">\"사용자\"</span>; <span class=\"hljs-comment\">// 입력값으로부터 사용자 정보 가져오기</span>\n            <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"messageInput\"</span>).<span class=\"hljs-property\">value</span>;\n            connection.<span class=\"hljs-title function_\">invoke</span>(<span class=\"hljs-string\">\"SendMessage\"</span>, user, message);\n        }\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></span>\n</code></pre>\n<p>이 예제를 확장하여 클라이언트로부터 메시지를 받고 백엔드와 프론트엔드 코드를 사용한 엔드 투 엔드 솔루션을 제공해보죠.</p>\n<h1>Backend: ASP.NET Core Web API with SignalR</h1>\n<h2>Step 1: SignalR 허브 생성</h2>\n<p>클라이언트 연결을 관리하고 메시지 브로드캐스팅을 처리하는 SignalR 허브를 생성하세요.</p>\n<pre><code class=\"hljs language-javascript\">using <span class=\"hljs-title class_\">Microsoft</span>.<span class=\"hljs-property\">AspNetCore</span>.<span class=\"hljs-property\">SignalR</span>;\nusing <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">Threading</span>.<span class=\"hljs-property\">Tasks</span>;\n\npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatHub</span> : <span class=\"hljs-title class_\">Hub</span>\n{\n    public <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title class_\">Task</span> <span class=\"hljs-title class_\">SendMessage</span>(string user, string message)\n    {\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Clients</span>.<span class=\"hljs-property\">All</span>.<span class=\"hljs-title class_\">SendAsync</span>(<span class=\"hljs-string\">\"ReceiveMessage\"</span>, user, message);\n    }\n\n    public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">ReceiveMessage</span>(string user, string message)\n    {\n        <span class=\"hljs-comment\">// 받은 메시지 처리(예: 데이터베이스 저장, 처리 등)</span>\n    }\n}\n</code></pre>\n<h2>단계 2: Startup에서 SignalR 구성</h2>\n<p>Startup 클래스에서 SignalR을 구성하여 WebSocket 지원을 활성화하고 허브 엔드포인트를 매핑합니다.</p>\n<pre><code class=\"hljs language-js\">public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">ConfigureServices</span>(<span class=\"hljs-title class_\">IServiceCollection</span> services)\n{\n    services.<span class=\"hljs-title class_\">AddSignalR</span>();\n}\n\npublic <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">Configure</span>(<span class=\"hljs-title class_\">IApplicationBuilder</span> app, <span class=\"hljs-title class_\">IWebHostEnvironment</span> env)\n{\n    app.<span class=\"hljs-title class_\">UseRouting</span>();\n\n    app.<span class=\"hljs-title class_\">UseEndpoints</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">endpoints</span> =></span>\n    {\n        endpoints.<span class=\"hljs-property\">MapHub</span>&#x3C;<span class=\"hljs-title class_\">ChatHub</span>>(<span class=\"hljs-string\">\"/chatHub\"</span>);\n    });\n}\n</code></pre>\n<h2>단계 3: 메시지 수신을 위한 컨트롤러 생성</h2>\n<p>클라이언트로부터 수신된 메시지를 처리하는 컨트롤러를 만들어보세요.</p>\n<pre><code class=\"hljs language-js\">using <span class=\"hljs-title class_\">Microsoft</span>.<span class=\"hljs-property\">AspNetCore</span>.<span class=\"hljs-property\">Mvc</span>;\n\n[<span class=\"hljs-title class_\">Route</span>(<span class=\"hljs-string\">\"api/[controller]\"</span>)]\n[<span class=\"hljs-title class_\">ApiController</span>]\npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatController</span> : <span class=\"hljs-title class_\">ControllerBase</span>\n{\n    private readonly <span class=\"hljs-title class_\">IHubContext</span>&#x3C;<span class=\"hljs-title class_\">ChatHub</span>> _hubContext;\n\n    public <span class=\"hljs-title class_\">ChatController</span>(<span class=\"hljs-title class_\">IHubContext</span>&#x3C;<span class=\"hljs-title class_\">ChatHub</span>> hubContext)\n    {\n        _hubContext = hubContext;\n    }\n\n    [<span class=\"hljs-title class_\">HttpPost</span>(<span class=\"hljs-string\">\"ReceiveMessage\"</span>)]\n    public <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title class_\">Task</span>&#x3C;<span class=\"hljs-title class_\">IActionResult</span>> <span class=\"hljs-title class_\">ReceiveMessage</span>(string user, string message)\n    {\n        <span class=\"hljs-keyword\">await</span> _hubContext.<span class=\"hljs-property\">Clients</span>.<span class=\"hljs-property\">All</span>.<span class=\"hljs-title class_\">SendAsync</span>(<span class=\"hljs-string\">\"ReceiveMessage\"</span>, user, message);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Ok</span>();\n    }\n}\n</code></pre>\n<h1>Frontend: React UI with SignalR</h1>\n<h2>Step 1: SignalR 클라이언트 라이브러리 설치</h2>\n<p>JavaScript SignalR 클라이언트 라이브러리를 npm을 사용해서 설치해주세요.</p>\n<pre><code class=\"hljs language-js\">npm install @microsoft/signalr\n</code></pre>\n<h2>단계 2: WebSocket 연결 생성</h2>\n<p>SignalR 허브에 대한 WebSocket 연결을 생성하고 들어오는 메시지를 처리하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> signalR <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@microsoft/signalr'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Chat</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> [messages, setMessages] = <span class=\"hljs-title function_\">useState</span>([]);\n    <span class=\"hljs-keyword\">const</span> [connection, setConnection] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n\n    <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-keyword\">const</span> newConnection = <span class=\"hljs-keyword\">new</span> signalR.<span class=\"hljs-title class_\">HubConnectionBuilder</span>()\n            .<span class=\"hljs-title function_\">withUrl</span>(<span class=\"hljs-string\">\"/chatHub\"</span>)\n            .<span class=\"hljs-title function_\">build</span>();\n\n        newConnection.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"ReceiveMessage\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">user, message</span>) =></span> {\n            <span class=\"hljs-title function_\">setMessages</span>([...messages, { user, message }]);\n        });\n\n        newConnection.<span class=\"hljs-title function_\">start</span>()\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"SignalR 허브에 연결되었습니다.\"</span>))\n            .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"SignalR 허브에 연결 중 오류 발생:\"</span>, error));\n\n        <span class=\"hljs-title function_\">setConnection</span>(newConnection);\n    }, []);\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sendMessage</span> = (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-string\">\"User\"</span>; <span class=\"hljs-comment\">// 입력에서 사용자 가져오기</span>\n        <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">\"안녕, SignalR!\"</span>; <span class=\"hljs-comment\">// 입력에서 메시지 가져오기</span>\n        connection.<span class=\"hljs-title function_\">invoke</span>(<span class=\"hljs-string\">\"SendMessage\"</span>, user, message)\n            .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"메시지 전송 중 오류 발생:\"</span>, error));\n    };\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n                {messages.map((message, index) => (\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">strong</span>></span>{message.user}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">strong</span>></span>: {message.message}\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                ))}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> /></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{sendMessage}</span>></span>전송<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Chat</span>;\n</code></pre>\n<h1>결론</h1>\n<p>이 가이드에서는 .NET Core 애플리케이션에서 웹소켓과 SignalR을 사용하여 실시간 데이터 전송을 구현하는 방법을 살펴보았습니다. SignalR을 활용하면 클라이언트와 서버 간의 실시간 통신을 쉽게 구현할 수 있어서 상호작용적이고 협업이 가능한 웹 애플리케이션을 구축하기에 이상적입니다. 채팅 애플리케이션, 실시간 대시보드, 멀티플레이어 게임을 구축할 때, 사용자에게 실시간 업데이트를 제공하는 데 필요한 도구를 제공하는 SignalR을 사용할 수 있습니다.</p>\n<p>이 가이드에서는 .NET Core 백엔드와 React 프런트엔드를 사용하여 SignalR을 통한 실시간 메시징을 구현하는 방법을 안내했습니다. 사용자는 프런트엔드에서 메시지를 보내고, 백엔드 SignalR 허브에서 모든 연결된 클라이언트에게 메시지를 수신 및 브로드캐스트합니다. 이 최종 솔루션은 웹 애플리케이션에 대한 실시간 메시징 경험을 원활하게 제공합니다.</p>\n<pre><code>\n\n\n표 태그를 Markdown 형식으로 변경해주실래요.\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}