{"pageProps":{"post":{"title":"Vue3와 함께 더 나은 저장소 만들기 - Pinia에서 글로벌 저장소, 중첩 및 Vue Router에 접근하기","description":"","date":"2024-05-12 23:37","slug":"2024-05-12-BetterStoresinPiniawithVue3GlobalStoresNestingandAccessingVueRouterinPinia","content":"\n\n![이미지](/assets/img/2024-05-12-BetterStoresinPiniawithVue3GlobalStoresNestingandAccessingVueRouterinPinia_0.png)\n\nVue 2에서 Vue 3로 이주하면서 Pinia가 이제 Vue 3를 위한 권장 스토어 플러그인이 되었고 Vuex가 아니게 되어 전환이 필요했습니다. 우리 아키텍처와 팀 전체가 Vuex와 작업하는 데 익숙했기 때문에 모든 스토어를 하나의 전역 변수 $store로 액세스하고 모든 곳에서 손쉽게 액세스할 수 있을 때를 좋아합니다!\n\n그래서 우리는 Pinia에서 부족해 보이는 3가지 핵심 기능을 지원하기 위해 일부 사항을 수정했습니다.\n\n- 우리 아직까지 사용 중인 this.$store를 통해 스토어에 액세스하기\n- 중첩 구조의 스토어 보유\n- 액션 내에서 Vue Router에 액세스하기\n\n\n\n# 기본 설정\n\n우리는 src/stores 안에 비슷한 디렉토리 구조를 가진 모든 스토어를 생성했습니다.\n\n```javascript\n- src\n  -> store\n     -> auth\n        -> getters.js\n        -> index.js\n        -> state.js\n     -> index.js\n     -> state.js\n```\n\n주요 index.js는 중첩과 모든 것을 포함한 완전한 스토어의 진입점 역할을 하며, 중첩이 어떻게 작동하는지 등에 대한 설명은 다음 단계에서 설명하겠습니다.\n\n\n\n```js\n// src/store/index.js\nimport state from \"./state.js\"\nimport authStore from \"./auth\"\n\nexport const useStore = defineStore('core', {  \n  state: () => state,\n  actions: {\n    setStores() {\n      this.auth = authStore()\n    }\n  }\n})\n\nexport default useStore\n```\n\n```js\n// src/store/state.js\nexport default {   \n    auth: null,\n    version: \"1.0.0\",\n}\n```\n\n```js\n// src/store/auth/index.js\nimport state from \"./state.js\"\nimport getters from \"./getters.js\"\n\nexport const useStore = defineStore('auth', {  \n  state: () => state,\n  getters,\n  actions: {\n    updateUserToken (token) {\n      this.token = token\n      localStorage.setItem('token', token)\n    }\n  }\n})\n\nexport default useStore\n```\n\n```js\n// src/store/auth/state.js\nexport default {\n  token: null\n}\n```\n\n\n\n```js\n// src/store/auth/getters.js\n\nexport default {}\n```\n\n# 1. Pinia에서 스토어 중첩하기\n\n기본적으로 Pinia는 필요할 때 스토어를 직접 가져와서 사용하는 것이지만, 우리가 원하는 것은 그게 아닙니다. Vuex에서 했던 것처럼 쉽게 접근하고 싶습니다. 그래서 다음과 같이 했습니다.\n\n메인 스토어에 스토어 이름(예: auth)으로 새로운 상태 변수를 만듭니다.\n\n\n\n```js\n// src/store/state.js\nexport default {\n  auth: null\n}\n```\n\n이 변수를 사용하려는 Pinia 스토어에 초기화하고 설정하세요. 예를 들어, authStore 를 사용하시려면 주요 스토어의 액션에 추가하여 필요한 모든 스토어를 초기화할 수 있습니다. 예를 들어, setStores()에 다음을 추가하세요.\n\n```js\n// src/store/index.js\n\n...\nimport authStore from \"./auth\"\n...\n\nexport const useStore = defineStore('core', {  \n  state: () => state,\n  actions: {\n    setStores() {\n      this.auth = authStore() // 액션 내에서 스토어를 초기화합니다.\n    },\n    ... // 다른 메서드\n  }\n})\n```\n\n주요 스토어를 초기화한 후에 이 액션을 호출하세요.```\n\n\n\n```js\n// main.js\n...\nimport { createPinia } from 'pinia'\n...\nimport store from \"@/store\"\n...\napp.use(createPinia()) // Pinia 생성\nexport const $store = store() // 메인 스토어 초기화\n$store.setStores() // 모든 중첩 스토어 초기화하는 액션 호출\n```\n\n그게 다야! 이제 모든 스토어에 메인 스토어에서 직접 액세스할 수 있습니다. 다음은 예시입니다 (Options API),\n\n```js\n<script>\nimport { $store } from \"@/main.js\"\n\nexport default {\n    mounted() {\n       console.log($store.auth.token) // auth 상태에 액세스\n       console.log($store.auth.setToken(\"12345\")) // auth 액션 호출\n       console.log($store.someState) // 메인 스토어 상태에 액세스\n    }\n}\n\n</script>\n```\n\n# 2. 핀니아 스토어를 전역적으로 접근 가능하게 만들기```\n\n\n\n이제 한 변수를 통해 중첩된 상점에 접근할 수 있게 되었으니, 이제 그것을 컴포넌트 내에서 직접 액세스할 수 있도록 만들어보겠습니다. 그렇게 하려면 vue의 Global Properties를 사용하여 매핑해야 합니다. 다음과 같이 해보세요.\n\n- main.js에서 메인 상점을 초기화하십시오.\n- $store라는 전역 속성을 설정하고 해당 상점을 할당하십시오.\n- 즐기세요!\n\n```js\n// main.js\n\n...\nimport { createPinia } from 'pinia'\n...\nimport store from \"@/store\"\n...\napp.use(createPinia()) // Pinia 생성\n\nexport const $store = store() // 주 상점 초기화\napp.config.globalProperties.$store = $store // 상점을 전역적으로 액세스 가능하게 만듦\napp.config.globalProperties.$store.setStores() // 모든 중첩된 상점을 초기화하는 작업 호출\n```\n\n이것으로 끝났습니다! 이제 옵션 API를 사용하는 컴포넌트 내에서 다음과 같이 액세스할 수 있습니다:\n\n\n\n```js\n<script>\nexport default {\n    mounted() {\n       console.log(this.$store.auth.token) // \"auth\" 상태에 접근하기\n       console.log(this.$store.auth.setToken(\"12345\")) // \"auth\" 액션 호출하기\n       console.log(this.$store.someState) // 메인 상점의 상태에 접근하기\n    },\n    watch: {\n        '$store.auth.token'() { console.log(\"변경 발생\") } // 워치하여 변경 감지하기\n    } \n}\n\n</script>\n```\n\n# 3. 핀이아 액션 내부에서 Vue Router에 액세스하기\n\n우리는 상점에서 라우터 인스턴스를 직접 가져오고 사용하려고 시도했지만, 올바르지 않은 것처럼 보였습니다. 그때 우리는 특정 속성을 설정할 수 있는 방법을 찾았고 이렇게 설정할 수 있습니다.\n\n```js\n// main.js\n\n...\nimport router from '@/router'\n...\nimport { createPinia } from 'pinia'\n\nlet pinia = createPinia()\npinia.use({store} => {store.router = router}) // 여기서 라우터를 설정하여 상점 내에서 접근할 수 있도록 하기\napp.use(pinia)\n\n...\n```\n\n\n\n이렇게 하면 우리는 스토어 내에서 언제든지 라우터 인스턴스에 액세스할 수 있어요.\n\n```js\n// srcs/store/index.js\n\n...\nimport authStore from \"./auth\"\n...\n\nexport const useStore = defineStore('core', {  \n  state: () => state,\n  actions: {\n    logRoute() {\n       console.log(this.router) // Router Instance\n       console.log(this.router.currentRoute) // 현재 라우트 가져오기 (this.$route)\n    }\n    ... // 다른 메서드\n  }\n})\n```\n\n그리고 이렇게 함으로써 우리는 세 가지 고통을 해결했어요! 세 가지가 모두 구현된 완전한 스크립트는 다음과 같아요.\n\n```js\n디렉토리 구조\n- src\n  -> store\n     -> auth\n        -> getters.js\n        -> index.js\n        -> state.js\n     -> index.js\n     -> state.js\n  -> main.js\n  -> router\n     -> index.js\n```\n\n\n\n```js\n// src/store/index.js\n\nimport state from \"./state.js\"\nimport authStore from \"./auth\"\n\nexport const useStore = defineStore('core', {  \n  state: () => state,\n  actions: {\n    setStores() {\n      this.auth = authStore()\n    }\n  }\n})\n\nexport default useStore\n```\n\n```js\n// src/store/state.js\nexport default {   \n    auth: null,\n    version: \"1.0.0\",\n}\n```\n\n```js\n// src/store/auth/index.js\n\nimport state from \"./state.js\"\nimport getters from \"./getters.js\"\n\nexport const useStore = defineStore('auth', {  \n  state: () => state,\n  getters,\n  actions: {\n    updateUserToken (token) {\n      this.token = token\n      localStorage.setItem('token', token)\n    }\n})\n\nexport default useStore\n```\n\n```js\n// src/store/auth/state.js\n\nexport default {\n  token: null\n}\n```\n\n\n\n```js \n// src/store/auth/getters.js\n\nexport default {}\n```\n\n```js\n// main.js\n...\nimport router from '@/router'\n...\nimport { createPinia } from 'pinia'\n\nlet pinia = createPinia()\npinia.use({store} => {store.router = router}) // 여기에 router를 설정하여 store 내부에서 접근할 수 있게 함\napp.use(pinia)\n...\n\nexport const $store = store() // 주요 Store 초기화\napp.config.globalProperties.$store = $store // Store를 전역적으로 접근 가능하게 함\napp.config.globalProperties.$store.setStores() // 모든 중첩 Store를 초기화하는 작업 호출\n```\n\n여기까지입니다! 같은 결과를 달성할 수 있는 다른 방법을 발견하면 알려주시기 바랍니다!","ogImage":{"url":"/assets/img/2024-05-12-BetterStoresinPiniawithVue3GlobalStoresNestingandAccessingVueRouterinPinia_0.png"},"coverImage":"/assets/img/2024-05-12-BetterStoresinPiniawithVue3GlobalStoresNestingandAccessingVueRouterinPinia_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-12-BetterStoresinPiniawithVue3GlobalStoresNestingandAccessingVueRouterinPinia_0.png\" alt=\"이미지\"></p>\n<p>Vue 2에서 Vue 3로 이주하면서 Pinia가 이제 Vue 3를 위한 권장 스토어 플러그인이 되었고 Vuex가 아니게 되어 전환이 필요했습니다. 우리 아키텍처와 팀 전체가 Vuex와 작업하는 데 익숙했기 때문에 모든 스토어를 하나의 전역 변수 $store로 액세스하고 모든 곳에서 손쉽게 액세스할 수 있을 때를 좋아합니다!</p>\n<p>그래서 우리는 Pinia에서 부족해 보이는 3가지 핵심 기능을 지원하기 위해 일부 사항을 수정했습니다.</p>\n<ul>\n<li>우리 아직까지 사용 중인 this.$store를 통해 스토어에 액세스하기</li>\n<li>중첩 구조의 스토어 보유</li>\n<li>액션 내에서 Vue Router에 액세스하기</li>\n</ul>\n<h1>기본 설정</h1>\n<p>우리는 src/stores 안에 비슷한 디렉토리 구조를 가진 모든 스토어를 생성했습니다.</p>\n<pre><code class=\"hljs language-javascript\">- src\n  -> store\n     -> auth\n        -> getters.<span class=\"hljs-property\">js</span>\n        -> index.<span class=\"hljs-property\">js</span>\n        -> state.<span class=\"hljs-property\">js</span>\n     -> index.<span class=\"hljs-property\">js</span>\n     -> state.<span class=\"hljs-property\">js</span>\n</code></pre>\n<p>주요 index.js는 중첩과 모든 것을 포함한 완전한 스토어의 진입점 역할을 하며, 중첩이 어떻게 작동하는지 등에 대한 설명은 다음 단계에서 설명하겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/index.js</span>\n<span class=\"hljs-keyword\">import</span> state <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./state.js\"</span>\n<span class=\"hljs-keyword\">import</span> authStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./auth\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useStore = <span class=\"hljs-title function_\">defineStore</span>(<span class=\"hljs-string\">'core'</span>, {  \n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\">() =></span> state,\n  <span class=\"hljs-attr\">actions</span>: {\n    <span class=\"hljs-title function_\">setStores</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">auth</span> = <span class=\"hljs-title function_\">authStore</span>()\n    }\n  }\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useStore\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/state.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {   \n    <span class=\"hljs-attr\">auth</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">version</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/auth/index.js</span>\n<span class=\"hljs-keyword\">import</span> state <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./state.js\"</span>\n<span class=\"hljs-keyword\">import</span> getters <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./getters.js\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useStore = <span class=\"hljs-title function_\">defineStore</span>(<span class=\"hljs-string\">'auth'</span>, {  \n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\">() =></span> state,\n  getters,\n  <span class=\"hljs-attr\">actions</span>: {\n    updateUserToken (token) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">token</span> = token\n      <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">'token'</span>, token)\n    }\n  }\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useStore\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/auth/state.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">token</span>: <span class=\"hljs-literal\">null</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/auth/getters.js</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {}\n</code></pre>\n<h1>1. Pinia에서 스토어 중첩하기</h1>\n<p>기본적으로 Pinia는 필요할 때 스토어를 직접 가져와서 사용하는 것이지만, 우리가 원하는 것은 그게 아닙니다. Vuex에서 했던 것처럼 쉽게 접근하고 싶습니다. 그래서 다음과 같이 했습니다.</p>\n<p>메인 스토어에 스토어 이름(예: auth)으로 새로운 상태 변수를 만듭니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/state.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">auth</span>: <span class=\"hljs-literal\">null</span>\n}\n</code></pre>\n<p>이 변수를 사용하려는 Pinia 스토어에 초기화하고 설정하세요. 예를 들어, authStore 를 사용하시려면 주요 스토어의 액션에 추가하여 필요한 모든 스토어를 초기화할 수 있습니다. 예를 들어, setStores()에 다음을 추가하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/index.js</span>\n\n...\n<span class=\"hljs-keyword\">import</span> authStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./auth\"</span>\n...\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useStore = <span class=\"hljs-title function_\">defineStore</span>(<span class=\"hljs-string\">'core'</span>, {  \n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\">() =></span> state,\n  <span class=\"hljs-attr\">actions</span>: {\n    <span class=\"hljs-title function_\">setStores</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">auth</span> = <span class=\"hljs-title function_\">authStore</span>() <span class=\"hljs-comment\">// 액션 내에서 스토어를 초기화합니다.</span>\n    },\n    ... <span class=\"hljs-comment\">// 다른 메서드</span>\n  }\n})\n</code></pre>\n<p>주요 스토어를 초기화한 후에 이 액션을 호출하세요.```</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// main.js</span>\n...\n<span class=\"hljs-keyword\">import</span> { createPinia } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'pinia'</span>\n...\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/store\"</span>\n...\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title function_\">createPinia</span>()) <span class=\"hljs-comment\">// Pinia 생성</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> $store = <span class=\"hljs-title function_\">store</span>() <span class=\"hljs-comment\">// 메인 스토어 초기화</span>\n$store.<span class=\"hljs-title function_\">setStores</span>() <span class=\"hljs-comment\">// 모든 중첩 스토어 초기화하는 액션 호출</span>\n</code></pre>\n<p>그게 다야! 이제 모든 스토어에 메인 스토어에서 직접 액세스할 수 있습니다. 다음은 예시입니다 (Options API),</p>\n<pre><code class=\"hljs language-js\">&#x3C;script>\n<span class=\"hljs-keyword\">import</span> { $store } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/main.js\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-title function_\">mounted</span>(<span class=\"hljs-params\"></span>) {\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>($store.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-property\">token</span>) <span class=\"hljs-comment\">// auth 상태에 액세스</span>\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>($store.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-title function_\">setToken</span>(<span class=\"hljs-string\">\"12345\"</span>)) <span class=\"hljs-comment\">// auth 액션 호출</span>\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>($store.<span class=\"hljs-property\">someState</span>) <span class=\"hljs-comment\">// 메인 스토어 상태에 액세스</span>\n    }\n}\n\n&#x3C;/script>\n</code></pre>\n<h1>2. 핀니아 스토어를 전역적으로 접근 가능하게 만들기```</h1>\n<p>이제 한 변수를 통해 중첩된 상점에 접근할 수 있게 되었으니, 이제 그것을 컴포넌트 내에서 직접 액세스할 수 있도록 만들어보겠습니다. 그렇게 하려면 vue의 Global Properties를 사용하여 매핑해야 합니다. 다음과 같이 해보세요.</p>\n<ul>\n<li>main.js에서 메인 상점을 초기화하십시오.</li>\n<li>$store라는 전역 속성을 설정하고 해당 상점을 할당하십시오.</li>\n<li>즐기세요!</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// main.js</span>\n\n...\n<span class=\"hljs-keyword\">import</span> { createPinia } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'pinia'</span>\n...\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/store\"</span>\n...\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title function_\">createPinia</span>()) <span class=\"hljs-comment\">// Pinia 생성</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> $store = <span class=\"hljs-title function_\">store</span>() <span class=\"hljs-comment\">// 주 상점 초기화</span>\napp.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">globalProperties</span>.<span class=\"hljs-property\">$store</span> = $store <span class=\"hljs-comment\">// 상점을 전역적으로 액세스 가능하게 만듦</span>\napp.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">globalProperties</span>.<span class=\"hljs-property\">$store</span>.<span class=\"hljs-title function_\">setStores</span>() <span class=\"hljs-comment\">// 모든 중첩된 상점을 초기화하는 작업 호출</span>\n</code></pre>\n<p>이것으로 끝났습니다! 이제 옵션 API를 사용하는 컴포넌트 내에서 다음과 같이 액세스할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;script>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-title function_\">mounted</span>(<span class=\"hljs-params\"></span>) {\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$store</span>.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-property\">token</span>) <span class=\"hljs-comment\">// \"auth\" 상태에 접근하기</span>\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$store</span>.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-title function_\">setToken</span>(<span class=\"hljs-string\">\"12345\"</span>)) <span class=\"hljs-comment\">// \"auth\" 액션 호출하기</span>\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$store</span>.<span class=\"hljs-property\">someState</span>) <span class=\"hljs-comment\">// 메인 상점의 상태에 접근하기</span>\n    },\n    <span class=\"hljs-attr\">watch</span>: {\n        <span class=\"hljs-string\">'$store.auth.token'</span>() { <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"변경 발생\"</span>) } <span class=\"hljs-comment\">// 워치하여 변경 감지하기</span>\n    } \n}\n\n&#x3C;/script>\n</code></pre>\n<h1>3. 핀이아 액션 내부에서 Vue Router에 액세스하기</h1>\n<p>우리는 상점에서 라우터 인스턴스를 직접 가져오고 사용하려고 시도했지만, 올바르지 않은 것처럼 보였습니다. 그때 우리는 특정 속성을 설정할 수 있는 방법을 찾았고 이렇게 설정할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// main.js</span>\n\n...\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/router'</span>\n...\n<span class=\"hljs-keyword\">import</span> { createPinia } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'pinia'</span>\n\n<span class=\"hljs-keyword\">let</span> pinia = <span class=\"hljs-title function_\">createPinia</span>()\npinia.<span class=\"hljs-title function_\">use</span>({store} => {store.<span class=\"hljs-property\">router</span> = router}) <span class=\"hljs-comment\">// 여기서 라우터를 설정하여 상점 내에서 접근할 수 있도록 하기</span>\napp.<span class=\"hljs-title function_\">use</span>(pinia)\n\n...\n</code></pre>\n<p>이렇게 하면 우리는 스토어 내에서 언제든지 라우터 인스턴스에 액세스할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// srcs/store/index.js</span>\n\n...\n<span class=\"hljs-keyword\">import</span> authStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./auth\"</span>\n...\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useStore = <span class=\"hljs-title function_\">defineStore</span>(<span class=\"hljs-string\">'core'</span>, {  \n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\">() =></span> state,\n  <span class=\"hljs-attr\">actions</span>: {\n    <span class=\"hljs-title function_\">logRoute</span>(<span class=\"hljs-params\"></span>) {\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">router</span>) <span class=\"hljs-comment\">// Router Instance</span>\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">router</span>.<span class=\"hljs-property\">currentRoute</span>) <span class=\"hljs-comment\">// 현재 라우트 가져오기 (this.$route)</span>\n    }\n    ... <span class=\"hljs-comment\">// 다른 메서드</span>\n  }\n})\n</code></pre>\n<p>그리고 이렇게 함으로써 우리는 세 가지 고통을 해결했어요! 세 가지가 모두 구현된 완전한 스크립트는 다음과 같아요.</p>\n<pre><code class=\"hljs language-js\">디렉토리 구조\n- src\n  -> store\n     -> auth\n        -> getters.<span class=\"hljs-property\">js</span>\n        -> index.<span class=\"hljs-property\">js</span>\n        -> state.<span class=\"hljs-property\">js</span>\n     -> index.<span class=\"hljs-property\">js</span>\n     -> state.<span class=\"hljs-property\">js</span>\n  -> main.<span class=\"hljs-property\">js</span>\n  -> router\n     -> index.<span class=\"hljs-property\">js</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/index.js</span>\n\n<span class=\"hljs-keyword\">import</span> state <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./state.js\"</span>\n<span class=\"hljs-keyword\">import</span> authStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./auth\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useStore = <span class=\"hljs-title function_\">defineStore</span>(<span class=\"hljs-string\">'core'</span>, {  \n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\">() =></span> state,\n  <span class=\"hljs-attr\">actions</span>: {\n    <span class=\"hljs-title function_\">setStores</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">auth</span> = <span class=\"hljs-title function_\">authStore</span>()\n    }\n  }\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useStore\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/state.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {   \n    <span class=\"hljs-attr\">auth</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">version</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/auth/index.js</span>\n\n<span class=\"hljs-keyword\">import</span> state <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./state.js\"</span>\n<span class=\"hljs-keyword\">import</span> getters <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./getters.js\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useStore = <span class=\"hljs-title function_\">defineStore</span>(<span class=\"hljs-string\">'auth'</span>, {  \n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\">() =></span> state,\n  getters,\n  <span class=\"hljs-attr\">actions</span>: {\n    updateUserToken (token) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">token</span> = token\n      <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">'token'</span>, token)\n    }\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useStore\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/auth/state.js</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">token</span>: <span class=\"hljs-literal\">null</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/store/auth/getters.js</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// main.js</span>\n...\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/router'</span>\n...\n<span class=\"hljs-keyword\">import</span> { createPinia } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'pinia'</span>\n\n<span class=\"hljs-keyword\">let</span> pinia = <span class=\"hljs-title function_\">createPinia</span>()\npinia.<span class=\"hljs-title function_\">use</span>({store} => {store.<span class=\"hljs-property\">router</span> = router}) <span class=\"hljs-comment\">// 여기에 router를 설정하여 store 내부에서 접근할 수 있게 함</span>\napp.<span class=\"hljs-title function_\">use</span>(pinia)\n...\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> $store = <span class=\"hljs-title function_\">store</span>() <span class=\"hljs-comment\">// 주요 Store 초기화</span>\napp.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">globalProperties</span>.<span class=\"hljs-property\">$store</span> = $store <span class=\"hljs-comment\">// Store를 전역적으로 접근 가능하게 함</span>\napp.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">globalProperties</span>.<span class=\"hljs-property\">$store</span>.<span class=\"hljs-title function_\">setStores</span>() <span class=\"hljs-comment\">// 모든 중첩 Store를 초기화하는 작업 호출</span>\n</code></pre>\n<p>여기까지입니다! 같은 결과를 달성할 수 있는 다른 방법을 발견하면 알려주시기 바랍니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}