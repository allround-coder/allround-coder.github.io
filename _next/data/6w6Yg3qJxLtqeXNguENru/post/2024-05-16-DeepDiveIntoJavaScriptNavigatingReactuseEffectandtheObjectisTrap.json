{"pageProps":{"post":{"title":"자바스크립트 심층 탐구 React의 useEffect 및 Objectis 함정 탐색","description":"","date":"2024-05-16 03:08","slug":"2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap","content":"\n\n\n![Image](/assets/img/2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap_0.png)\n\nReact에서 side effect를 수행하고 array dependency가 수정될 때마다 다시 렌더링을 관리하기 위해 useEffect 훅을 자주 사용합니다. 그러나 이 훅에 익숙하지 않은 일부 개발자는 브라우저가 멈추는 상황이나 컴포넌트 상태를 새로고침하는 문제 등 특정 상황에서 약간 헷갈릴 수 있습니다.\n\n간단한 예시를 살펴보겠습니다:\n\n```js\nfunction CountClick() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n      console.log('Count updated');\n  }, []);\n\n  const onClick = () => setCount(count + 1);\n\n  return (\n    <div>\n      <button onClick={onClick}>Click me</button>\n      <div>Count: {count}</div>\n    </div>\n  );\n}\n```\n\n\n\n페이지에 접속하면 빈 배열 []을 두 번째 인자로 전달하여 콘솔 로그가 한 번 출력되는 것을 확인할 수 있습니다. 이것은 React가 첫 번째 렌더링에서만 효과를 실행한다는 것을 의미합니다.\n\n<img src=\"/assets/img/2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap_1.png\" />\n\n좋아요!\n\n이제 콘솔을 지우고 \"Click me\" 버튼을 클릭하여 무엇이 발생하는지 확인해봅시다.\n\n\n\n\n![Screenshot](/assets/img/2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap_2.png)\n\n카운터가 증가하는 것을 관찰할 수 있지만, 콘솔에서는 아무 일도 일어나지 않습니다. 여기서 useEffect의 의존성이 실제로 작용하게 됩니다.\n\n코드를 조금 조정해 봅시다:\n\n```js\nfunction CountClick() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n      console.log('Count updated');\n  }, [count]);\n\n  const onClick = () => setCount(count + 1);\n\n  return (\n    <div>\n      <div>Count: {count}</div>\n      <button onClick={onClick}>Click me</button>\n    </div>\n  );\n}\n```\n\n\n\n이제 'Click me' 버튼을 클릭한 후 콘솔에 메시지가 표시되는 것을 확인할 수 있습니다. 그러나 실제 세계에서는 백엔드와 통합되는 앱을 만들며, localStorage에서 데이터를 읽고 더 복잡한 솔루션을 사용합니다. 이전 예시에서 우리는 기본 형식에 대해 작업했습니다.\n\n이번에는 참조 형식인 객체를 사용하는 코드를 만들어보겠습니다:\n\n```js\nfunction CountClick() {\n  const [data, setData] = useState<Person>()\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    console.log('Count updated');\n    setData({ firstName: 'Bruce', lastName: 'Wayne' });\n  }, [data]);\n\n\n  const onClick = () => setCount(count + 1);\n\n  return (\n    <div>\n      <div>Count: {count}</div>\n      <button onClick={onClick}>Click me</button>\n    </div>\n  );\n}\n```\n\n위 코드에서는 실수가 발생했습니다.\n\n\n\n\n![Image 1](/assets/img/2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap_3.png)\n\n우리의 코드가 무한 루프를 발생시키고 있어요. 컴포넌트가 불필요하게 계속해서 자기 자신을 다시 렌더링하며, 업데이트의 끝나지 않는 사이클을 초래하고 있죠.\n\n다행히도, React의 소스 코드는 오픈 소스로 제공되어 있어요. 그래서 우리는 이 효과의 구현을 쉽게 찾을 수 있어요!\n\n![Image 2](/assets/img/2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap_4.png)\n\n\n\n\n이 코드의 구현을 더 자세히 살펴보면 그리 복잡해 보이지 않아요. 그럼 문제가 뭘까요?\n\n이 함수의 정의를 찾아보려 노력해 봅시다.\n\n있네요! — 우리의 버그/예상 동작은 Object.is 정적 메서드에 있습니다. 그러니 테스트해 봅시다.\n\n```js\nconsole.log(Object.is({ firstName: 'Bruce', lastName: 'Wayne' }, { firstName: 'Bruce', lastName: 'Wayne' }));\n// false\n```\n\n\n\n그래서 현재 동일한 객체 정의에 대해 Object.is가 false를 반환하는 것을 알았죠.\n\n하지만 왜 그럴까요?\n\n자바스크립트는 꽤 표준화된 프로그래밍 언어입니다. Object.is는 SamveValue 추상 작업을 참조합니다. 그것에는 다음과 같이 기술되어 있습니다:\n\n```js\n//SameValueNonNumber\n7.2.11 SameValueNonNumber ( x, y )\n===== TRUNCATED =====\n6. 주의: 다른 모든 ECMAScript 언어 값은 동일성으로 비교됩니다.\n7. x가 y와 동일하면 true를, 그렇지 않으면 false를 반환합니다.\n```\n\n\n\n그리고 여기 중요한 참고 사항이 있습니다:\n\n이 함수는 호출될 때 같은 값이 아닌 경우와 원시 유형을 참조하는 SameValueNonNumber 및 SameValue에 대해 다음 단계를 수행함을 의미합니다. 객체, 배열, 함수 등과 같은 다른 값들에 대해서는 내용을 비교하는 대신 메모리 위치가 동일한지 확인하여 비교가 이루어집니다.\n\n따라서 이는 원시 유형에 대해서만 작동합니다.\n\n```js\nObject.is(NaN, NaN) // true\nObject.is(0, 0) // true\nObject.is(1.000123, 1.000123) // true\nObject.is(Infinity, Infinity) // true\nObject.is(-Infinity, -Infinity) // true\nObject.is(0/-1, 0/-1) // true\nObject.is(\"test\", \"test\") // true\nObject.is(null, null) // true\nObject.is(false, false) // true\nObject.is(true, true) // true\n```\n\n\n\n그리고 참조 유형에 대해서는 해당되지 않습니다\n\n```js\nObject.is(Symbol(\"foo\"), Symbol(\"foo\")) // false\nObject.is({}, {}) // false\nObject.is([], []) // false\n```\n\n# 어떻게 이 문제를 해결할까요?\n\n가장 간단한 해결책은 깊은 동등성을 사용하는 것입니다 (다른 해결책에 대한 좋은 기사 몇 개를 링크 섹션에 게시했습니다).\n\n\n\n```js\ntype Person = {\n  firstName: string;\n  lastName: string;\n};\n\nfunction CountClick() {\n  const [data, setData] = useState<Person>()\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    setData({ firstName: 'Bruce', lastName: 'Wayne' });\n    console.log('Count updated');\n  }, [data?.firstName]);\n\n\n  const onClick = () => setCount(count + 1);\n\n  return (\n    <div>\n      <div>count: {count}</div>\n      <button onClick={onClick}>Click me</button>\n    </div>\n  );\n}\n```\n\n# 결론\n\n- useEffect 이해: React의 useEffect 훅은 컴포넌트에서 부수효과를 관리하는 데 중요하다. 이를 통해 개발자는 컴포넌트 라이프사이클 이벤트(마운트, 업데이트, 언마운트)에 대응하는 코드를 실행할 수 있다.\n- useEffect에서 의존성 배열: useEffect에 전달되는 두 번째 인자인 의존성 배열은 효과가 의존하는 값들을 지정한다. 이 배열이 변경되면 효과가 다시 실행된다. 이 배열을 생략하거나 빈 배열을 전달하면 효과는 최초 렌더링 후 단 한 번만 실행된다.\n- 참조 타입 사용 시 주의사항: 객체나 배열과 같은 참조 타입을 의존성 배열에 사용하면 예상치 못한 동작이 발생할 수 있다. 원시 타입과 달리 참조 타입은 값이 아닌 참조에 의해 비교된다. 따라서 두 객체의 내용이 같더라도 동일한 메모리 위치를 참조하지 않는 한 동일하지 않다.\n- Object.is 함정: 값 동등성 비교에 사용되는 Object.is 메서드는 참조 타입과 원시 타입에 따라 다르게 동작한다. 객체나 배열과 같은 경우, 이 메서드는 두 값이 동일한지 식별하며, 객체나 배열과 관련된 작업 시 예상치 않은 결과를 가져올 수 있다.\n- 해결책: useEffect에서 참조 타입을 사용할 때 무한 루프나 예상치 않은 동작을 피하기 위해 개발자는 깊은 동등성 체크를 활용할 수 있다. 이를 통해 객체의 내용을 기준으로 비교되도록 보장할 수 있다.\n\n# 링크\n\n\n\n- 기본 / 참조 유형 https://gist.github.com/branneman/7fb06d8a74d7e6d4cbcf75c50fec599c\n- https://github.com/facebook/react/blob/26f24960935cc395dd9892b3ac48249c9dbcc195/packages/react-server/src/ReactFizzHooks.js#L161\n- https://tc39.es/ecma262/#sec-samevalue\n- https://medium.com/suyeonme/react-lets-deep-dive-into-deps-array-of-useeffect-13ab96468db7","ogImage":{"url":"/assets/img/2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap_0.png"},"coverImage":"/assets/img/2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap_0.png\" alt=\"Image\"></p>\n<p>React에서 side effect를 수행하고 array dependency가 수정될 때마다 다시 렌더링을 관리하기 위해 useEffect 훅을 자주 사용합니다. 그러나 이 훅에 익숙하지 않은 일부 개발자는 브라우저가 멈추는 상황이나 컴포넌트 상태를 새로고침하는 문제 등 특정 상황에서 약간 헷갈릴 수 있습니다.</p>\n<p>간단한 예시를 살펴보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">CountClick</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Count updated'</span>);\n  }, []);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onClick</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-title function_\">setCount</span>(count + <span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>></span>Click me<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Count: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>페이지에 접속하면 빈 배열 []을 두 번째 인자로 전달하여 콘솔 로그가 한 번 출력되는 것을 확인할 수 있습니다. 이것은 React가 첫 번째 렌더링에서만 효과를 실행한다는 것을 의미합니다.</p>\n<p>좋아요!</p>\n<p>이제 콘솔을 지우고 \"Click me\" 버튼을 클릭하여 무엇이 발생하는지 확인해봅시다.</p>\n<p><img src=\"/assets/img/2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap_2.png\" alt=\"Screenshot\"></p>\n<p>카운터가 증가하는 것을 관찰할 수 있지만, 콘솔에서는 아무 일도 일어나지 않습니다. 여기서 useEffect의 의존성이 실제로 작용하게 됩니다.</p>\n<p>코드를 조금 조정해 봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">CountClick</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Count updated'</span>);\n  }, [count]);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onClick</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-title function_\">setCount</span>(count + <span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Count: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>></span>Click me<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>이제 'Click me' 버튼을 클릭한 후 콘솔에 메시지가 표시되는 것을 확인할 수 있습니다. 그러나 실제 세계에서는 백엔드와 통합되는 앱을 만들며, localStorage에서 데이터를 읽고 더 복잡한 솔루션을 사용합니다. 이전 예시에서 우리는 기본 형식에 대해 작업했습니다.</p>\n<p>이번에는 참조 형식인 객체를 사용하는 코드를 만들어보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">CountClick</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [data, setData] = useState&#x3C;<span class=\"hljs-title class_\">Person</span>>()\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>)\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Count updated'</span>);\n    <span class=\"hljs-title function_\">setData</span>({ <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Bruce'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Wayne'</span> });\n  }, [data]);\n\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onClick</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-title function_\">setCount</span>(count + <span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Count: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>></span>Click me<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>위 코드에서는 실수가 발생했습니다.</p>\n<p><img src=\"/assets/img/2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap_3.png\" alt=\"Image 1\"></p>\n<p>우리의 코드가 무한 루프를 발생시키고 있어요. 컴포넌트가 불필요하게 계속해서 자기 자신을 다시 렌더링하며, 업데이트의 끝나지 않는 사이클을 초래하고 있죠.</p>\n<p>다행히도, React의 소스 코드는 오픈 소스로 제공되어 있어요. 그래서 우리는 이 효과의 구현을 쉽게 찾을 수 있어요!</p>\n<p><img src=\"/assets/img/2024-05-16-DeepDiveIntoJavaScriptNavigatingReactuseEffectandtheObjectisTrap_4.png\" alt=\"Image 2\"></p>\n<p>이 코드의 구현을 더 자세히 살펴보면 그리 복잡해 보이지 않아요. 그럼 문제가 뭘까요?</p>\n<p>이 함수의 정의를 찾아보려 노력해 봅시다.</p>\n<p>있네요! — 우리의 버그/예상 동작은 Object.is 정적 메서드에 있습니다. 그러니 테스트해 봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>({ <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Bruce'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Wayne'</span> }, { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Bruce'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Wayne'</span> }));\n<span class=\"hljs-comment\">// false</span>\n</code></pre>\n<p>그래서 현재 동일한 객체 정의에 대해 Object.is가 false를 반환하는 것을 알았죠.</p>\n<p>하지만 왜 그럴까요?</p>\n<p>자바스크립트는 꽤 표준화된 프로그래밍 언어입니다. Object.is는 SamveValue 추상 작업을 참조합니다. 그것에는 다음과 같이 기술되어 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//SameValueNonNumber</span>\n<span class=\"hljs-number\">7.2</span><span class=\"hljs-number\">.11</span> <span class=\"hljs-title class_\">SameValueNonNumber</span> ( x, y )\n===== <span class=\"hljs-variable constant_\">TRUNCATED</span> =====\n<span class=\"hljs-number\">6.</span> 주의: 다른 모든 <span class=\"hljs-title class_\">ECMAScript</span> 언어 값은 동일성으로 비교됩니다.\n<span class=\"hljs-number\">7.</span> x가 y와 동일하면 <span class=\"hljs-literal\">true</span>를, 그렇지 않으면 <span class=\"hljs-literal\">false</span>를 반환합니다.\n</code></pre>\n<p>그리고 여기 중요한 참고 사항이 있습니다:</p>\n<p>이 함수는 호출될 때 같은 값이 아닌 경우와 원시 유형을 참조하는 SameValueNonNumber 및 SameValue에 대해 다음 단계를 수행함을 의미합니다. 객체, 배열, 함수 등과 같은 다른 값들에 대해서는 내용을 비교하는 대신 메모리 위치가 동일한지 확인하여 비교가 이루어집니다.</p>\n<p>따라서 이는 원시 유형에 대해서만 작동합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(<span class=\"hljs-title class_\">NaN</span>, <span class=\"hljs-title class_\">NaN</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(<span class=\"hljs-number\">1.000123</span>, <span class=\"hljs-number\">1.000123</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(<span class=\"hljs-title class_\">Infinity</span>, <span class=\"hljs-title class_\">Infinity</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(-<span class=\"hljs-title class_\">Infinity</span>, -<span class=\"hljs-title class_\">Infinity</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(<span class=\"hljs-number\">0</span>/-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>/-<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(<span class=\"hljs-string\">\"test\"</span>, <span class=\"hljs-string\">\"test\"</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>그리고 참조 유형에 대해서는 해당되지 않습니다</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>(<span class=\"hljs-title class_\">Symbol</span>(<span class=\"hljs-string\">\"foo\"</span>), <span class=\"hljs-title class_\">Symbol</span>(<span class=\"hljs-string\">\"foo\"</span>)) <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>({}, {}) <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">is</span>([], []) <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<h1>어떻게 이 문제를 해결할까요?</h1>\n<p>가장 간단한 해결책은 깊은 동등성을 사용하는 것입니다 (다른 해결책에 대한 좋은 기사 몇 개를 링크 섹션에 게시했습니다).</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">Person</span> = {\n  <span class=\"hljs-attr\">firstName</span>: string;\n  <span class=\"hljs-attr\">lastName</span>: string;\n};\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">CountClick</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [data, setData] = useState&#x3C;<span class=\"hljs-title class_\">Person</span>>()\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>)\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">setData</span>({ <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Bruce'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Wayne'</span> });\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Count updated'</span>);\n  }, [data?.<span class=\"hljs-property\">firstName</span>]);\n\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onClick</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-title function_\">setCount</span>(count + <span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>count: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>></span>Click me<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<h1>결론</h1>\n<ul>\n<li>useEffect 이해: React의 useEffect 훅은 컴포넌트에서 부수효과를 관리하는 데 중요하다. 이를 통해 개발자는 컴포넌트 라이프사이클 이벤트(마운트, 업데이트, 언마운트)에 대응하는 코드를 실행할 수 있다.</li>\n<li>useEffect에서 의존성 배열: useEffect에 전달되는 두 번째 인자인 의존성 배열은 효과가 의존하는 값들을 지정한다. 이 배열이 변경되면 효과가 다시 실행된다. 이 배열을 생략하거나 빈 배열을 전달하면 효과는 최초 렌더링 후 단 한 번만 실행된다.</li>\n<li>참조 타입 사용 시 주의사항: 객체나 배열과 같은 참조 타입을 의존성 배열에 사용하면 예상치 못한 동작이 발생할 수 있다. 원시 타입과 달리 참조 타입은 값이 아닌 참조에 의해 비교된다. 따라서 두 객체의 내용이 같더라도 동일한 메모리 위치를 참조하지 않는 한 동일하지 않다.</li>\n<li>Object.is 함정: 값 동등성 비교에 사용되는 Object.is 메서드는 참조 타입과 원시 타입에 따라 다르게 동작한다. 객체나 배열과 같은 경우, 이 메서드는 두 값이 동일한지 식별하며, 객체나 배열과 관련된 작업 시 예상치 않은 결과를 가져올 수 있다.</li>\n<li>해결책: useEffect에서 참조 타입을 사용할 때 무한 루프나 예상치 않은 동작을 피하기 위해 개발자는 깊은 동등성 체크를 활용할 수 있다. 이를 통해 객체의 내용을 기준으로 비교되도록 보장할 수 있다.</li>\n</ul>\n<h1>링크</h1>\n<ul>\n<li>기본 / 참조 유형 <a href=\"https://gist.github.com/branneman/7fb06d8a74d7e6d4cbcf75c50fec599c\" rel=\"nofollow\" target=\"_blank\">https://gist.github.com/branneman/7fb06d8a74d7e6d4cbcf75c50fec599c</a></li>\n<li><a href=\"https://github.com/facebook/react/blob/26f24960935cc395dd9892b3ac48249c9dbcc195/packages/react-server/src/ReactFizzHooks.js#L161\" rel=\"nofollow\" target=\"_blank\">https://github.com/facebook/react/blob/26f24960935cc395dd9892b3ac48249c9dbcc195/packages/react-server/src/ReactFizzHooks.js#L161</a></li>\n<li><a href=\"https://tc39.es/ecma262/#sec-samevalue\" rel=\"nofollow\" target=\"_blank\">https://tc39.es/ecma262/#sec-samevalue</a></li>\n<li><a href=\"https://medium.com/suyeonme/react-lets-deep-dive-into-deps-array-of-useeffect-13ab96468db7\" rel=\"nofollow\" target=\"_blank\">https://medium.com/suyeonme/react-lets-deep-dive-into-deps-array-of-useeffect-13ab96468db7</a></li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}