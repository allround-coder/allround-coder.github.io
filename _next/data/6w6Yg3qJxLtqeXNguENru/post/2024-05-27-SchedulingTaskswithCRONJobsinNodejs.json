{"pageProps":{"post":{"title":"Nodejs에서 CRON 작업으로 일정 관리하기","description":"","date":"2024-05-27 18:09","slug":"2024-05-27-SchedulingTaskswithCRONJobsinNodejs","content":"\n\nCRON 작업은 특정 간격으로 실행되는 작업을 예약하는 강력한 방법입니다. 이는 뉴스레터를 보내거나 정기 백업을 수행하거나 오래된 데이터를 정리하는 등 다양한 애플리케이션에 매우 유용합니다.\n\n예: 매주 월요일에 세일 소식을 기존 사용자에게 이메일로 보내고 싶다면, CRON이 그 역할을 수행해줄 것입니다.\n\n이것들은 OS에서 실행되는 주기적인 작업이며, 주어진 간격에 대해 OS에 명령을 내리고 특정 작업을 실행할 수 있습니다.\n\n이 블로그에서는 Node.js에서 CRON 작업을 설정하고 관리하는 방법을 알아볼 것입니다.\n\n<div class=\"content-ad\"></div>\n\nCRON 작업을 왜 사용해야 하나요?\n\nCRON 작업은 다음과 같은 용도로 사용됩니다:\n\n- 백업하기: 정기적으로 데이터베이스나 파일을 백업합니다.\n- 로깅: 주기적으로 로그를 생성하고 저장합니다.\n- 통지: 이메일이나 푸시 알림을 사용자에게 보냅니다.\n- 정리: 데이터베이스에서 오래된 파일이나 레코드를 제거합니다.\n\nCRON 작업을 시작하려면, CRON 작업에 대한 좋은 지식이 필요합니다.\n\n<div class=\"content-ad\"></div>\n\n- Node.js\n- Npm\n\nNode.js에서 CRON 작업을 생성하는 방법\n\n1. Node.js 프로젝트 생성하기\n\n새로운 Node.js 프로젝트를 초기화하거나 기존 프로젝트를 사용하세요\n\n<div class=\"content-ad\"></div>\n\n2. 패키지 설치\n\n사용할 패키지는 \"node-cron\" 입니다.\n아래 명령을 실행하여 패키지를 설치하세요.\n\n```js\nnpm install node-cron\n```\n\n3. 서버용 express 패키지 설치\n\n<div class=\"content-ad\"></div>\n\n익스프레스 패키지를 설치하여 서버를 실행하거나 따르고자 하는 다른 방법을 사용할 수 있어요.\n\n지금은 익스프레스를 사용해보겠습니다.\n\n```js\nnpm install express \n```\n\n4. 크론 작업 작성하기\n\n<div class=\"content-ad\"></div>\n\n일정에 따라 실행되는 함수를 생성해보겠습니다. 이 예제에서는 콘솔에 메시지를 기록할 것입니다:\n\n```js\nfunction logMessage() {\n    console.log('작업이 실행됨:', new Date().toLocaleString());\n}\n```\n\n이제 함수를 만들었으니 주기적으로 실행해봅시다.\n\nCRON 작업의 문법은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\ncron.schedule(\"* * * * *\", function() {\n    // Task\n});\n```\n\n별표에 대해 이해해 봅시다.\n\n이제 각 별표가 무언가를 정의합니다.\n\n예를 들어 ( * * * * * * )\n\n\n<div class=\"content-ad\"></div>\n\n아래 표는 왼쪽부터 두 번째, 분, 시간, 월 별일, 월, 및 주를 나타냅니다.\n\n- 초 — 선택사항\n- 분: 0–59\n- 시간: 0–23\n- 월 별일: 1–31\n- 월: 1–12\n- 요일: 0–7 (0과 7은 모두 일요일을 나타냅니다)\n\n예시 :\n\n- ( * * * * * ) — 매 분 실행\n- ( 0 * * * * ) — 매 시간 실행\n- ( 0 15 15 * * ) — 매달 15일 오후 3시에 실행\n- ( * * 5 * * ) — 매월 5일에 실행\n\n<div class=\"content-ad\"></div>\n\n위의 내용을 한국어로 번역해 드리겠습니다. 친근한 어조로 작성되었습니다.\n\n```js\n// 일반적인 임포트\nconst cron = require(\"node-cron\");\nconst express = require(\"express\");\n\n// 익스프레스 초기화\napp = express();\n\n// 당신이 만든 함수\nfunction message() {\n    console.log('작업이 실행됨:', new Date().toLocaleString());\n}\n\n// cron 스케줄\ncron.schedule(\"* * * * *\", function() {\n    message();\n});\n\napp.listen(3000);\n```\n\n위 스크립트를 'script.js'로 저장하세요.\n\n5. 스크립트를 실행하세요.\n\n<div class=\"content-ad\"></div>\n\n노드.js 애플리케이션을 시작하세요\n\n```js\nnode script.js\n```\n\n파일 이름에 맞게 파일 이름을 변경해주세요\n\n이렇게 하면 코드가 실행되고 함수가 주어진 간격대로 작동할 것입니다\n\n<div class=\"content-ad\"></div>\n\n약간의 예시\n\n다음은 CRON 작업의 몇 가지 더 예시입니다:\n\n- 자정에 매일 정리\n\n```js\ncron.schedule('0 0 * * *', () => {\n    console.log('자정에 작업을 실행중입니다');\n    // 여기에 정리 코드를 추가하세요\n});\n```\n\n<div class=\"content-ad\"></div>\n\n- 매주 월요일에 보고서 생성\n\n```js\ncron.schedule('0 9 * * 1', () => {\n    console.log('주간 보고서 생성 중');\n    // 보고서 생성 코드를 여기에 추가\n});\n```\n\n일부 최상의 사례\n\n- 에러 처리: CRON 작업에 적절한 에러 처리가 있어 예기치 않은 실패를 피할 수 있도록 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ncron.schedule('0 0 * * *', () => {\n    try {\n        // 작업 내용\n    } catch (err) {\n        console.error('CRON 작업 중 오류가 발생했습니다:', err);\n    }\n});\n```\n\n- Logging: 작업이 실행되는 시간과 결과를 추적하기 위해 로깅 구현 필요\n\n가능한 함정\n\n- 시간대 문제: CRON 작업은 서버의 시간대에 따라 실행됩니다. 애플리케이션이 전 세계 사용자를 대상으로 하는 경우 시간대 차이에 유의해야 합니다.\n- 동시성: 작업이 CRON 간격보다 오래 걸릴 경우, 작업이 예기치 않게 겹쳐지지 않도록 주의해야 합니다.```\n\n<div class=\"content-ad\"></div>\n\n다음 절차를 따라서, Node.js 애플리케이션에서 CRON 작업을 효과적으로 활용하여 간단한 로깅부터 복잡한 데이터 처리까지 다양한 작업을 자동화할 수 있습니다.\n\n코딩해요!","ogImage":{"url":"/assets/img/2024-05-27-SchedulingTaskswithCRONJobsinNodejs_0.png"},"coverImage":"/assets/img/2024-05-27-SchedulingTaskswithCRONJobsinNodejs_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>CRON 작업은 특정 간격으로 실행되는 작업을 예약하는 강력한 방법입니다. 이는 뉴스레터를 보내거나 정기 백업을 수행하거나 오래된 데이터를 정리하는 등 다양한 애플리케이션에 매우 유용합니다.</p>\n<p>예: 매주 월요일에 세일 소식을 기존 사용자에게 이메일로 보내고 싶다면, CRON이 그 역할을 수행해줄 것입니다.</p>\n<p>이것들은 OS에서 실행되는 주기적인 작업이며, 주어진 간격에 대해 OS에 명령을 내리고 특정 작업을 실행할 수 있습니다.</p>\n<p>이 블로그에서는 Node.js에서 CRON 작업을 설정하고 관리하는 방법을 알아볼 것입니다.</p>\n<p>CRON 작업을 왜 사용해야 하나요?</p>\n<p>CRON 작업은 다음과 같은 용도로 사용됩니다:</p>\n<ul>\n<li>백업하기: 정기적으로 데이터베이스나 파일을 백업합니다.</li>\n<li>로깅: 주기적으로 로그를 생성하고 저장합니다.</li>\n<li>통지: 이메일이나 푸시 알림을 사용자에게 보냅니다.</li>\n<li>정리: 데이터베이스에서 오래된 파일이나 레코드를 제거합니다.</li>\n</ul>\n<p>CRON 작업을 시작하려면, CRON 작업에 대한 좋은 지식이 필요합니다.</p>\n<ul>\n<li>Node.js</li>\n<li>Npm</li>\n</ul>\n<p>Node.js에서 CRON 작업을 생성하는 방법</p>\n<ol>\n<li>Node.js 프로젝트 생성하기</li>\n</ol>\n<p>새로운 Node.js 프로젝트를 초기화하거나 기존 프로젝트를 사용하세요</p>\n<ol start=\"2\">\n<li>패키지 설치</li>\n</ol>\n<p>사용할 패키지는 \"node-cron\" 입니다.\n아래 명령을 실행하여 패키지를 설치하세요.</p>\n<pre><code class=\"hljs language-js\">npm install node-cron\n</code></pre>\n<ol start=\"3\">\n<li>서버용 express 패키지 설치</li>\n</ol>\n<p>익스프레스 패키지를 설치하여 서버를 실행하거나 따르고자 하는 다른 방법을 사용할 수 있어요.</p>\n<p>지금은 익스프레스를 사용해보겠습니다.</p>\n<pre><code class=\"hljs language-js\">npm install express \n</code></pre>\n<ol start=\"4\">\n<li>크론 작업 작성하기</li>\n</ol>\n<p>일정에 따라 실행되는 함수를 생성해보겠습니다. 이 예제에서는 콘솔에 메시지를 기록할 것입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logMessage</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'작업이 실행됨:'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toLocaleString</span>());\n}\n</code></pre>\n<p>이제 함수를 만들었으니 주기적으로 실행해봅시다.</p>\n<p>CRON 작업의 문법은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\">cron.<span class=\"hljs-title function_\">schedule</span>(<span class=\"hljs-string\">\"* * * * *\"</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// Task</span>\n});\n</code></pre>\n<p>별표에 대해 이해해 봅시다.</p>\n<p>이제 각 별표가 무언가를 정의합니다.</p>\n<p>예를 들어 ( * * * * * * )</p>\n<p>아래 표는 왼쪽부터 두 번째, 분, 시간, 월 별일, 월, 및 주를 나타냅니다.</p>\n<ul>\n<li>초 — 선택사항</li>\n<li>분: 0–59</li>\n<li>시간: 0–23</li>\n<li>월 별일: 1–31</li>\n<li>월: 1–12</li>\n<li>요일: 0–7 (0과 7은 모두 일요일을 나타냅니다)</li>\n</ul>\n<p>예시 :</p>\n<ul>\n<li>( * * * * * ) — 매 분 실행</li>\n<li>( 0 * * * * ) — 매 시간 실행</li>\n<li>( 0 15 15 * * ) — 매달 15일 오후 3시에 실행</li>\n<li>( * * 5 * * ) — 매월 5일에 실행</li>\n</ul>\n<p>위의 내용을 한국어로 번역해 드리겠습니다. 친근한 어조로 작성되었습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 일반적인 임포트</span>\n<span class=\"hljs-keyword\">const</span> cron = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"node-cron\"</span>);\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>);\n\n<span class=\"hljs-comment\">// 익스프레스 초기화</span>\napp = <span class=\"hljs-title function_\">express</span>();\n\n<span class=\"hljs-comment\">// 당신이 만든 함수</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">message</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'작업이 실행됨:'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toLocaleString</span>());\n}\n\n<span class=\"hljs-comment\">// cron 스케줄</span>\ncron.<span class=\"hljs-title function_\">schedule</span>(<span class=\"hljs-string\">\"* * * * *\"</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">message</span>();\n});\n\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);\n</code></pre>\n<p>위 스크립트를 'script.js'로 저장하세요.</p>\n<ol start=\"5\">\n<li>스크립트를 실행하세요.</li>\n</ol>\n<p>노드.js 애플리케이션을 시작하세요</p>\n<pre><code class=\"hljs language-js\">node script.<span class=\"hljs-property\">js</span>\n</code></pre>\n<p>파일 이름에 맞게 파일 이름을 변경해주세요</p>\n<p>이렇게 하면 코드가 실행되고 함수가 주어진 간격대로 작동할 것입니다</p>\n<p>약간의 예시</p>\n<p>다음은 CRON 작업의 몇 가지 더 예시입니다:</p>\n<ul>\n<li>자정에 매일 정리</li>\n</ul>\n<pre><code class=\"hljs language-js\">cron.<span class=\"hljs-title function_\">schedule</span>(<span class=\"hljs-string\">'0 0 * * *'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'자정에 작업을 실행중입니다'</span>);\n    <span class=\"hljs-comment\">// 여기에 정리 코드를 추가하세요</span>\n});\n</code></pre>\n<ul>\n<li>매주 월요일에 보고서 생성</li>\n</ul>\n<pre><code class=\"hljs language-js\">cron.<span class=\"hljs-title function_\">schedule</span>(<span class=\"hljs-string\">'0 9 * * 1'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'주간 보고서 생성 중'</span>);\n    <span class=\"hljs-comment\">// 보고서 생성 코드를 여기에 추가</span>\n});\n</code></pre>\n<p>일부 최상의 사례</p>\n<ul>\n<li>에러 처리: CRON 작업에 적절한 에러 처리가 있어 예기치 않은 실패를 피할 수 있도록 합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">cron.<span class=\"hljs-title function_\">schedule</span>(<span class=\"hljs-string\">'0 0 * * *'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-comment\">// 작업 내용</span>\n    } <span class=\"hljs-keyword\">catch</span> (err) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'CRON 작업 중 오류가 발생했습니다:'</span>, err);\n    }\n});\n</code></pre>\n<ul>\n<li>Logging: 작업이 실행되는 시간과 결과를 추적하기 위해 로깅 구현 필요</li>\n</ul>\n<p>가능한 함정</p>\n<ul>\n<li>시간대 문제: CRON 작업은 서버의 시간대에 따라 실행됩니다. 애플리케이션이 전 세계 사용자를 대상으로 하는 경우 시간대 차이에 유의해야 합니다.</li>\n<li>동시성: 작업이 CRON 간격보다 오래 걸릴 경우, 작업이 예기치 않게 겹쳐지지 않도록 주의해야 합니다.```</li>\n</ul>\n<p>다음 절차를 따라서, Node.js 애플리케이션에서 CRON 작업을 효과적으로 활용하여 간단한 로깅부터 복잡한 데이터 처리까지 다양한 작업을 자동화할 수 있습니다.</p>\n<p>코딩해요!</p>\n</body>\n</html>\n"},"__N_SSG":true}