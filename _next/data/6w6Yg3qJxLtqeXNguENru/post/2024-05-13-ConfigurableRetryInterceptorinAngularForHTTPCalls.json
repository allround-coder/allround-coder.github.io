{"pageProps":{"post":{"title":"앵귤러에서 HTTP 호출용 재시도 인터셉터 구성하기","description":"","date":"2024-05-13 00:26","slug":"2024-05-13-ConfigurableRetryInterceptorinAngularForHTTPCalls","content":"\n\n<img src=\"/assets/img/2024-05-13-ConfigurableRetryInterceptorinAngularForHTTPCalls_0.png\" />\n\nAPI 요청이 실패하는 이유는 네트워크 오류, 가용성 문제, 서버 문제 등이 많습니다. 응용 프로그램의 신뢰성과 안정성을 높이기 위해 재시도 메커니즘을 갖는 것이 좋은 실천 방법입니다. 실패할 경우 이 메커니즘은 동일한 API 호출을 백그라운드에서 다시 시도할 것입니다.\n\nAPI 호출이 일시적으로 실패하는 경우가 많아 재시도하면 응용 프로그램이 이러한 일시적 결함을 어느 정도 견딜 수 있음을 보장할 수 있습니다. 우리는 이러한 메커니즘을 달성하는 데 도움이 되는 구성 가능한 재시도 인터셉터를 Angular에서 만들 것입니다.\n\n# 구성(Configuration)\n\n\n\n위에서 말했듯이, 리트라이 인터셉터는 다음 구성으로 구성할 수 있습니다.\n\n- Count: API 호출을 다시 시도할 횟수입니다.\n- Delay: 다시 시도하기 전에 지연할 밀리초 수입니다.\n- Timeout: API 호출이 타임 아웃될 때까지 기다릴 밀리초 수입니다.\n\n이 구성을 위한 인터페이스와 각 구성에 대한 기본 값이 있습니다.\n\n```js\nexport interface RetryApiConfig {\n  count?: number;\n  delay?: number;\n  timeout?: number;\n}\n\n// Default Values\nconst CONFIG_DEFAULT: RetryApiConfig = {\n  count: 3, // 3번 재시도\n  delay: 500, // 500ms 대기\n  timeout: 20000, // 20초 후에 API 타임 아웃\n};\n```\n\n\n\n기본 구성은 제공되었지만 필요한 경우이를 재정의하는 방법을 제공할 것입니다.\n\n# HTTP Interceptor\n\n우리는 모든 API 호출에 대해 재시도 메커니즘을 추가하려고 합니다. Angular에서 HTTP Interceptor가 가장 적절한 위치일 것입니다.\n\nHttpInterceptor 인터페이스를 구현한 간단한 인터셉터를 만들어 봅시다.\n\n\n\n```js\n@Injectable()\nexport class RetryInterceptor implements HttpInterceptor {\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler) {\n\n    return next.handle(request).pipe(\n      // RxJS Operators\n    );\n}\n```\n\n옵저버블 파이프에는 재시도 메커니즘을 구현하기 위해 모든 필요한 RxJS 연산자를 추가할 것입니다. 다음 두 연산자를 사용할 예정입니다.\n\n## retry\n\n이름에서 알 수 있듯이 retry 연산자는 API 호출을 다시 시도합니다. HTTP 요청 옵저버블이 실패하면 이 방법은 다시 시도하기 위해 소스 원래 옵저버블에 다시 구독할 것입니다. 위에서 선언한 count와 delay 속성이 있는 구성 객체를 사용합니다.```\n\n\n\n## 타임아웃\n\n이 연산자는 주어진 밀리초 후에 오류 옵저버블을 발행합니다. 따라서, 임계값을 초과한 요청을 취소합니다.\n\n이제 위에서 선언한 기본 구성 개체와 함께 인터셉터에서 이 두 연산자를 사용해 봅시다.\n\n```js\n@Injectable()\nexport class RetryInterceptor implements HttpInterceptor {\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler) {\n\n    return next.handle(request).pipe(\n      retry(CONFIG_DEFAULT), // 요청 재시도\n      timeout(CONFIG_DEFAULT.timeout) // 주어진 시간 후 타임아웃\n  );\n}\n```\n\n\n\n만약 우리 애플리케이션에서 다음과 같이 이 인터셉터를 사용한다면, 예상대로 작동할 것입니다.\n\n```js\n@NgModule({\n  ...\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: RetryInterceptor,\n      multi: true\n    },\n  ],\n  ...\n})\nexport class AppModule { }\n```\n\n하지만, 누군가가 구성을 다른 값으로 재정의하고 싶다면 현재는 그 방법이 없습니다.\n\n# 구성 가능한 인터셉터\n\n\n\n여러 애플리케이션에서 사용 중인 라이브러리 내에 인터셉터가 있고, 각 애플리케이션마다 재시도 인터셉터의 다른 구성이 있는 경우, 애플리케이션이 인터셉터에 구성을 제공할 수 있는 방법이 있을까요?\n\n## Injection Tokens 사용하기\n\n애플리케이션이 구성을 재정의하려는 경우 제공할 수 있는 구성을 위한 인젝션 토큰을 생성할 수 있습니다.\n\n```js\n// 앱이 구성을 업데이트하는 데 사용할 수 있는 구성을 위한 토큰\n// 예시:\n//  {\n//     provide: RETRY_INTERCEPTOR_CONFIG,\n//     useValue: { count: 5, delay: 2000 },\n//  },\nexport const RETRY_INTERCEPTOR_CONFIG = new InjectionToken<RetryApiConfig>(\n  'retryConfig',\n  {\n    providedIn: 'root',\n    factory: () => {\n      return CONFIG_DEFAULT;\n    },\n  }\n);\n```\n\n\n\n이 인젝션 토큰의 유형은 우리가 위에서 선언한 인터페이스이며 \"retryConfig\"가 이름입니다. 두 번째 매개변수에서는 팩토리 함수를 사용하여 이 토큰의 기본 값을 제공합니다. 따라서 애플리케이션이 이 토큰을 제공하지 않으면 기본 객체가 대체값으로 사용됩니다.\n\n이제 이 토큰을 인터셉터에 주입해 보겠습니다.\n\n``` js\n@Injectable()\nexport class RetryInterceptor implements HttpInterceptor {\n  // Config 객체 주입\n  private retryConfig: RetryApiConfig = inject(RETRY_INTERCEPTOR_CONFIG);\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler) {\n    // 생략\n  );\n}\n```\n\n이제 애플리케이션이 제공한 구성과 기본 구성을 병합하는 방법이 필요합니다. 애플리케이션이 재시도 구성의 일부만(예: count 속성) 제공하고 다른 속성은 제공하지 않는 경우가 있을 수 있습니다.\n\n\n\n이 둘을 병합한 후 병합된 객체를 반환하는 프라이빗 함수를 만들 수 있습니다.\n\n```js\n@Injectable()\nexport class RetryInterceptor implements HttpInterceptor {\n  // 구성 객체 주입\n  private retryConfig: RetryApiConfig = inject(RETRY_INTERCEPTOR_CONFIG);\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler) {\n    // 생략\n  );\n\n  // 병합된 객체 가져오기\n  private getConfig(): Required<RetryApiConfig> {\n    return {\n      count:\n        this.retryConfig.count ??\n        COUNT_DEFAULT,\n      delay:\n        this.retryConfig.delay ??\n        DELAY_DEFAULT,\n      timeout:\n        this.retryConfig.timeout ??\n        TIMEOUT_DEFAULT,\n    };\n  }\n}\n```\n\n이제 retryConfig 프로퍼티가 null 또는 정의되지 않았는지 확인하여 기본값을 취하는 것입니다.\n\n마지막으로, 이제 이 병합된 객체를 인터셉터에서 사용할 수 있습니다.\n\n\n\n```js\n@Injectable()\nexport class RetryInterceptor implements HttpInterceptor {\n  private retryConfig: RetryApiConfig = inject(RETRY_INTERCEPTOR_CONFIG);\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler) {\n    // 합쳐진 구성 가져오기\n    const config = this.getConfig();\n\n    return next.handle(request).pipe(\n      retry(config), // 여기에서 합쳐진 구성 사용\n      timeout(config.timeout)\n  );\n\n  private getConfig(): Required<RetryApiConfig> {\n    // 생략\n  }\n}\n```\n\n필요시 애플리케이션에서 기본 구성을 재정의할 수 있습니다.\n\n```js\n@NgModule({\n  ...\n  providers: [\n    {\n      provide: RETRY_INTERCEPTOR_CONFIG,\n      useValue: {\n        count: 2 // 이 애플리케이션에서는 count만 재정의함\n      }\n    }\n  ],\n  ...\n})\nexport class AppModule { }\n```\n\n하지만 아직도 마지막 문제가 있습니다. 특정 API 호출이 이 구성을 재정의하려면 어떻게 해야 할까요? 예를 들어, 네트워크 부하가 큰 호출은 재시도하지 않고 싶을 수 있습니다.```\n\n\n\n## HttpContext 사용하기\n\nAngular의 HttpContext에 대해 잘 모르신다면 먼저 여기를 읽어보세요. 우리는 어떤 API 호출이 응용 프로그램 레벨 또는 기본 구성을 재정의하고 싶을 때 제공할 수 있는 컨텍스트 토큰을 생성할 수 있습니다.\n\n```js\nexport const RETRY_INTERCEPTOR_CONTEXT =\n  new HttpContextToken<RetryApiConfig | null>(() => null);\n```\n\n컨텍스트의 기본값은 null입니다. HTTP 요청을 수행하는 동안 어떤 API 호출이라도 컨텍스트를 설정할 수 있습니다.\n\n\n\n```js\nthis.http.get(URL, {\n  context: new HttpContext().set(RETRY_INTERCEPTOR_CONTEXT, { count: 1 })\n})\n```\n\n또한 getConfig 메서드를 업데이트하여 구성을 병합할 때 context를 사용해야 합니다.\n\n```js\n@Injectable()\nexport class RetryInterceptor implements HttpInterceptor {\n  // config 객체를 주입합니다.\n  private retryConfig: RetryApiConfig = inject(RETRY_INTERCEPTOR_CONFIG);\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler) {\n    // 생략\n  );\n\n  // 병합된 객체를 가져옵니다.\n  private getConfig(request: HttpRequest<unknown>): Required<RetryApiConfig> {\n    return {\n      count:\n        request.context.get(RETRY_INTERCEPTOR_CONTEXT)?.count ??\n        this.retryConfig.count ??\n        COUNT_DEFAULT,\n      delay:\n        request.context.get(RETRY_INTERCEPTOR_CONTEXT)?.delay ??\n        this.retryConfig.delay ??\n        DELAY_DEFAULT,\n      timeout:\n        request.context.get(RETRY_INTERCEPTOR_CONTEXT)?.timeout ??\n        this.retryConfig.timeout ??\n        TIMEOUT_DEFAULT,\n    };\n  }\n}\n```\n\ncontext 토큰은 요청에서 검색됩니다. 먼저 context를 확인한 후 토큰 설정을 마지막으로 기본 설정을 확인하는 절차를 따릅니다.\n\n\n\n\n![이미지](/assets/img/2024-05-13-ConfigurableRetryInterceptorinAngularForHTTPCalls_1.png)\n\n이로써 HTTP 호출에 대한 완전히 구성 가능한 재시도 메커니즘을 완성했습니다.\n\n지금까지 읽은 것이 마음에 든다면 박수 한 번 쳐주세요! 마음에 들지 않는다면 댓글을 남겨주세요😋!\n\n연결하고 싶으시다면? LinkedIn\n\n\n\n혹시 기부를 하고 싶으시다면, 커피 하나로 감사의 마음을 전해보세요! ☕️\n\n# 스택캇 🎓\n\n마지막까지 읽어주셔서 감사합니다. 떠나시기 전에:\n\n- 작가를 응원하고 팔로우해주시면 감사하겠습니다! 👏\n- 저희를 팔로우해주세요 X | LinkedIn | YouTube | Discord\n- 다른 플랫폼에서도 만나보세요: In Plain English | CoFeed | Venture | Cubed\n- 더 많은 콘텐츠는 Stackademic.com에서 확인해주세요","ogImage":{"url":"/assets/img/2024-05-13-ConfigurableRetryInterceptorinAngularForHTTPCalls_0.png"},"coverImage":"/assets/img/2024-05-13-ConfigurableRetryInterceptorinAngularForHTTPCalls_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>API 요청이 실패하는 이유는 네트워크 오류, 가용성 문제, 서버 문제 등이 많습니다. 응용 프로그램의 신뢰성과 안정성을 높이기 위해 재시도 메커니즘을 갖는 것이 좋은 실천 방법입니다. 실패할 경우 이 메커니즘은 동일한 API 호출을 백그라운드에서 다시 시도할 것입니다.</p>\n<p>API 호출이 일시적으로 실패하는 경우가 많아 재시도하면 응용 프로그램이 이러한 일시적 결함을 어느 정도 견딜 수 있음을 보장할 수 있습니다. 우리는 이러한 메커니즘을 달성하는 데 도움이 되는 구성 가능한 재시도 인터셉터를 Angular에서 만들 것입니다.</p>\n<h1>구성(Configuration)</h1>\n<p>위에서 말했듯이, 리트라이 인터셉터는 다음 구성으로 구성할 수 있습니다.</p>\n<ul>\n<li>Count: API 호출을 다시 시도할 횟수입니다.</li>\n<li>Delay: 다시 시도하기 전에 지연할 밀리초 수입니다.</li>\n<li>Timeout: API 호출이 타임 아웃될 때까지 기다릴 밀리초 수입니다.</li>\n</ul>\n<p>이 구성을 위한 인터페이스와 각 구성에 대한 기본 값이 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> interface <span class=\"hljs-title class_\">RetryApiConfig</span> {\n  count?: number;\n  delay?: number;\n  timeout?: number;\n}\n\n<span class=\"hljs-comment\">// Default Values</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">CONFIG_DEFAULT</span>: <span class=\"hljs-title class_\">RetryApiConfig</span> = {\n  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-comment\">// 3번 재시도</span>\n  <span class=\"hljs-attr\">delay</span>: <span class=\"hljs-number\">500</span>, <span class=\"hljs-comment\">// 500ms 대기</span>\n  <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">20000</span>, <span class=\"hljs-comment\">// 20초 후에 API 타임 아웃</span>\n};\n</code></pre>\n<p>기본 구성은 제공되었지만 필요한 경우이를 재정의하는 방법을 제공할 것입니다.</p>\n<h1>HTTP Interceptor</h1>\n<p>우리는 모든 API 호출에 대해 재시도 메커니즘을 추가하려고 합니다. Angular에서 HTTP Interceptor가 가장 적절한 위치일 것입니다.</p>\n<p>HttpInterceptor 인터페이스를 구현한 간단한 인터셉터를 만들어 봅시다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RetryInterceptor</span> implements <span class=\"hljs-title class_\">HttpInterceptor</span> {\n\n  <span class=\"hljs-title function_\">intercept</span>(<span class=\"hljs-params\">request: HttpRequest&#x3C;unknown>, next: HttpHandler</span>) {\n\n    <span class=\"hljs-keyword\">return</span> next.<span class=\"hljs-title function_\">handle</span>(request).<span class=\"hljs-title function_\">pipe</span>(\n      <span class=\"hljs-comment\">// RxJS Operators</span>\n    );\n}\n</code></pre>\n<p>옵저버블 파이프에는 재시도 메커니즘을 구현하기 위해 모든 필요한 RxJS 연산자를 추가할 것입니다. 다음 두 연산자를 사용할 예정입니다.</p>\n<h2>retry</h2>\n<p>이름에서 알 수 있듯이 retry 연산자는 API 호출을 다시 시도합니다. HTTP 요청 옵저버블이 실패하면 이 방법은 다시 시도하기 위해 소스 원래 옵저버블에 다시 구독할 것입니다. 위에서 선언한 count와 delay 속성이 있는 구성 객체를 사용합니다.```</p>\n<h2>타임아웃</h2>\n<p>이 연산자는 주어진 밀리초 후에 오류 옵저버블을 발행합니다. 따라서, 임계값을 초과한 요청을 취소합니다.</p>\n<p>이제 위에서 선언한 기본 구성 개체와 함께 인터셉터에서 이 두 연산자를 사용해 봅시다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RetryInterceptor</span> implements <span class=\"hljs-title class_\">HttpInterceptor</span> {\n\n  <span class=\"hljs-title function_\">intercept</span>(<span class=\"hljs-params\">request: HttpRequest&#x3C;unknown>, next: HttpHandler</span>) {\n\n    <span class=\"hljs-keyword\">return</span> next.<span class=\"hljs-title function_\">handle</span>(request).<span class=\"hljs-title function_\">pipe</span>(\n      <span class=\"hljs-title function_\">retry</span>(<span class=\"hljs-variable constant_\">CONFIG_DEFAULT</span>), <span class=\"hljs-comment\">// 요청 재시도</span>\n      <span class=\"hljs-title function_\">timeout</span>(<span class=\"hljs-variable constant_\">CONFIG_DEFAULT</span>.<span class=\"hljs-property\">timeout</span>) <span class=\"hljs-comment\">// 주어진 시간 후 타임아웃</span>\n  );\n}\n</code></pre>\n<p>만약 우리 애플리케이션에서 다음과 같이 이 인터셉터를 사용한다면, 예상대로 작동할 것입니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">NgModule</span>({\n  ...\n  <span class=\"hljs-attr\">providers</span>: [\n    {\n      <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">HTTP_INTERCEPTORS</span>,\n      <span class=\"hljs-attr\">useClass</span>: <span class=\"hljs-title class_\">RetryInterceptor</span>,\n      <span class=\"hljs-attr\">multi</span>: <span class=\"hljs-literal\">true</span>\n    },\n  ],\n  ...\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> { }\n</code></pre>\n<p>하지만, 누군가가 구성을 다른 값으로 재정의하고 싶다면 현재는 그 방법이 없습니다.</p>\n<h1>구성 가능한 인터셉터</h1>\n<p>여러 애플리케이션에서 사용 중인 라이브러리 내에 인터셉터가 있고, 각 애플리케이션마다 재시도 인터셉터의 다른 구성이 있는 경우, 애플리케이션이 인터셉터에 구성을 제공할 수 있는 방법이 있을까요?</p>\n<h2>Injection Tokens 사용하기</h2>\n<p>애플리케이션이 구성을 재정의하려는 경우 제공할 수 있는 구성을 위한 인젝션 토큰을 생성할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 앱이 구성을 업데이트하는 데 사용할 수 있는 구성을 위한 토큰</span>\n<span class=\"hljs-comment\">// 예시:</span>\n<span class=\"hljs-comment\">//  {</span>\n<span class=\"hljs-comment\">//     provide: RETRY_INTERCEPTOR_CONFIG,</span>\n<span class=\"hljs-comment\">//     useValue: { count: 5, delay: 2000 },</span>\n<span class=\"hljs-comment\">//  },</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">RETRY_INTERCEPTOR_CONFIG</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InjectionToken</span>&#x3C;<span class=\"hljs-title class_\">RetryApiConfig</span>>(\n  <span class=\"hljs-string\">'retryConfig'</span>,\n  {\n    <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>,\n    <span class=\"hljs-attr\">factory</span>: <span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable constant_\">CONFIG_DEFAULT</span>;\n    },\n  }\n);\n</code></pre>\n<p>이 인젝션 토큰의 유형은 우리가 위에서 선언한 인터페이스이며 \"retryConfig\"가 이름입니다. 두 번째 매개변수에서는 팩토리 함수를 사용하여 이 토큰의 기본 값을 제공합니다. 따라서 애플리케이션이 이 토큰을 제공하지 않으면 기본 객체가 대체값으로 사용됩니다.</p>\n<p>이제 이 토큰을 인터셉터에 주입해 보겠습니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RetryInterceptor</span> implements <span class=\"hljs-title class_\">HttpInterceptor</span> {\n  <span class=\"hljs-comment\">// Config 객체 주입</span>\n  private <span class=\"hljs-attr\">retryConfig</span>: <span class=\"hljs-title class_\">RetryApiConfig</span> = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-variable constant_\">RETRY_INTERCEPTOR_CONFIG</span>);\n\n  <span class=\"hljs-title function_\">intercept</span>(<span class=\"hljs-params\">request: HttpRequest&#x3C;unknown>, next: HttpHandler</span>) {\n    <span class=\"hljs-comment\">// 생략</span>\n  );\n}\n</code></pre>\n<p>이제 애플리케이션이 제공한 구성과 기본 구성을 병합하는 방법이 필요합니다. 애플리케이션이 재시도 구성의 일부만(예: count 속성) 제공하고 다른 속성은 제공하지 않는 경우가 있을 수 있습니다.</p>\n<p>이 둘을 병합한 후 병합된 객체를 반환하는 프라이빗 함수를 만들 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RetryInterceptor</span> implements <span class=\"hljs-title class_\">HttpInterceptor</span> {\n  <span class=\"hljs-comment\">// 구성 객체 주입</span>\n  private <span class=\"hljs-attr\">retryConfig</span>: <span class=\"hljs-title class_\">RetryApiConfig</span> = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-variable constant_\">RETRY_INTERCEPTOR_CONFIG</span>);\n\n  <span class=\"hljs-title function_\">intercept</span>(<span class=\"hljs-params\">request: HttpRequest&#x3C;unknown>, next: HttpHandler</span>) {\n    <span class=\"hljs-comment\">// 생략</span>\n  );\n\n  <span class=\"hljs-comment\">// 병합된 객체 가져오기</span>\n  private <span class=\"hljs-title function_\">getConfig</span>(): <span class=\"hljs-title class_\">Required</span>&#x3C;<span class=\"hljs-title class_\">RetryApiConfig</span>> {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">count</span>:\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">retryConfig</span>.<span class=\"hljs-property\">count</span> ??\n        <span class=\"hljs-variable constant_\">COUNT_DEFAULT</span>,\n      <span class=\"hljs-attr\">delay</span>:\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">retryConfig</span>.<span class=\"hljs-property\">delay</span> ??\n        <span class=\"hljs-variable constant_\">DELAY_DEFAULT</span>,\n      <span class=\"hljs-attr\">timeout</span>:\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">retryConfig</span>.<span class=\"hljs-property\">timeout</span> ??\n        <span class=\"hljs-variable constant_\">TIMEOUT_DEFAULT</span>,\n    };\n  }\n}\n</code></pre>\n<p>이제 retryConfig 프로퍼티가 null 또는 정의되지 않았는지 확인하여 기본값을 취하는 것입니다.</p>\n<p>마지막으로, 이제 이 병합된 객체를 인터셉터에서 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RetryInterceptor</span> implements <span class=\"hljs-title class_\">HttpInterceptor</span> {\n  private <span class=\"hljs-attr\">retryConfig</span>: <span class=\"hljs-title class_\">RetryApiConfig</span> = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-variable constant_\">RETRY_INTERCEPTOR_CONFIG</span>);\n\n  <span class=\"hljs-title function_\">intercept</span>(<span class=\"hljs-params\">request: HttpRequest&#x3C;unknown>, next: HttpHandler</span>) {\n    <span class=\"hljs-comment\">// 합쳐진 구성 가져오기</span>\n    <span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getConfig</span>();\n\n    <span class=\"hljs-keyword\">return</span> next.<span class=\"hljs-title function_\">handle</span>(request).<span class=\"hljs-title function_\">pipe</span>(\n      <span class=\"hljs-title function_\">retry</span>(config), <span class=\"hljs-comment\">// 여기에서 합쳐진 구성 사용</span>\n      <span class=\"hljs-title function_\">timeout</span>(config.<span class=\"hljs-property\">timeout</span>)\n  );\n\n  private <span class=\"hljs-title function_\">getConfig</span>(): <span class=\"hljs-title class_\">Required</span>&#x3C;<span class=\"hljs-title class_\">RetryApiConfig</span>> {\n    <span class=\"hljs-comment\">// 생략</span>\n  }\n}\n</code></pre>\n<p>필요시 애플리케이션에서 기본 구성을 재정의할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">NgModule</span>({\n  ...\n  <span class=\"hljs-attr\">providers</span>: [\n    {\n      <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">RETRY_INTERCEPTOR_CONFIG</span>,\n      <span class=\"hljs-attr\">useValue</span>: {\n        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// 이 애플리케이션에서는 count만 재정의함</span>\n      }\n    }\n  ],\n  ...\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> { }\n</code></pre>\n<p>하지만 아직도 마지막 문제가 있습니다. 특정 API 호출이 이 구성을 재정의하려면 어떻게 해야 할까요? 예를 들어, 네트워크 부하가 큰 호출은 재시도하지 않고 싶을 수 있습니다.```</p>\n<h2>HttpContext 사용하기</h2>\n<p>Angular의 HttpContext에 대해 잘 모르신다면 먼저 여기를 읽어보세요. 우리는 어떤 API 호출이 응용 프로그램 레벨 또는 기본 구성을 재정의하고 싶을 때 제공할 수 있는 컨텍스트 토큰을 생성할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">RETRY_INTERCEPTOR_CONTEXT</span> =\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpContextToken</span>&#x3C;<span class=\"hljs-title class_\">RetryApiConfig</span> | <span class=\"hljs-literal\">null</span>>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-literal\">null</span>);\n</code></pre>\n<p>컨텍스트의 기본값은 null입니다. HTTP 요청을 수행하는 동안 어떤 API 호출이라도 컨텍스트를 설정할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable constant_\">URL</span>, {\n  <span class=\"hljs-attr\">context</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpContext</span>().<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-variable constant_\">RETRY_INTERCEPTOR_CONTEXT</span>, { <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span> })\n})\n</code></pre>\n<p>또한 getConfig 메서드를 업데이트하여 구성을 병합할 때 context를 사용해야 합니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RetryInterceptor</span> implements <span class=\"hljs-title class_\">HttpInterceptor</span> {\n  <span class=\"hljs-comment\">// config 객체를 주입합니다.</span>\n  private <span class=\"hljs-attr\">retryConfig</span>: <span class=\"hljs-title class_\">RetryApiConfig</span> = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-variable constant_\">RETRY_INTERCEPTOR_CONFIG</span>);\n\n  <span class=\"hljs-title function_\">intercept</span>(<span class=\"hljs-params\">request: HttpRequest&#x3C;unknown>, next: HttpHandler</span>) {\n    <span class=\"hljs-comment\">// 생략</span>\n  );\n\n  <span class=\"hljs-comment\">// 병합된 객체를 가져옵니다.</span>\n  private <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-attr\">request</span>: <span class=\"hljs-title class_\">HttpRequest</span>&#x3C;unknown>): <span class=\"hljs-title class_\">Required</span>&#x3C;<span class=\"hljs-title class_\">RetryApiConfig</span>> {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">count</span>:\n        request.<span class=\"hljs-property\">context</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable constant_\">RETRY_INTERCEPTOR_CONTEXT</span>)?.<span class=\"hljs-property\">count</span> ??\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">retryConfig</span>.<span class=\"hljs-property\">count</span> ??\n        <span class=\"hljs-variable constant_\">COUNT_DEFAULT</span>,\n      <span class=\"hljs-attr\">delay</span>:\n        request.<span class=\"hljs-property\">context</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable constant_\">RETRY_INTERCEPTOR_CONTEXT</span>)?.<span class=\"hljs-property\">delay</span> ??\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">retryConfig</span>.<span class=\"hljs-property\">delay</span> ??\n        <span class=\"hljs-variable constant_\">DELAY_DEFAULT</span>,\n      <span class=\"hljs-attr\">timeout</span>:\n        request.<span class=\"hljs-property\">context</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable constant_\">RETRY_INTERCEPTOR_CONTEXT</span>)?.<span class=\"hljs-property\">timeout</span> ??\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">retryConfig</span>.<span class=\"hljs-property\">timeout</span> ??\n        <span class=\"hljs-variable constant_\">TIMEOUT_DEFAULT</span>,\n    };\n  }\n}\n</code></pre>\n<p>context 토큰은 요청에서 검색됩니다. 먼저 context를 확인한 후 토큰 설정을 마지막으로 기본 설정을 확인하는 절차를 따릅니다.</p>\n<p><img src=\"/assets/img/2024-05-13-ConfigurableRetryInterceptorinAngularForHTTPCalls_1.png\" alt=\"이미지\"></p>\n<p>이로써 HTTP 호출에 대한 완전히 구성 가능한 재시도 메커니즘을 완성했습니다.</p>\n<p>지금까지 읽은 것이 마음에 든다면 박수 한 번 쳐주세요! 마음에 들지 않는다면 댓글을 남겨주세요😋!</p>\n<p>연결하고 싶으시다면? LinkedIn</p>\n<p>혹시 기부를 하고 싶으시다면, 커피 하나로 감사의 마음을 전해보세요! ☕️</p>\n<h1>스택캇 🎓</h1>\n<p>마지막까지 읽어주셔서 감사합니다. 떠나시기 전에:</p>\n<ul>\n<li>작가를 응원하고 팔로우해주시면 감사하겠습니다! 👏</li>\n<li>저희를 팔로우해주세요 X | LinkedIn | YouTube | Discord</li>\n<li>다른 플랫폼에서도 만나보세요: In Plain English | CoFeed | Venture | Cubed</li>\n<li>더 많은 콘텐츠는 Stackademic.com에서 확인해주세요</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}