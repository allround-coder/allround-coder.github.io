{"pageProps":{"post":{"title":"NET Core 6와 React JS를 활용한 제품 관리 애플리케이션 개발하기 CRUD 작업 포함","description":"","date":"2024-05-14 15:36","slug":"2024-05-14-ProductManagementApplicationusingNETCore6andReactJSwithCRUDOperations","content":"\n\n<img src=\"/assets/img/2024-05-14-ProductManagementApplicationusingNETCore6andReactJSwithCRUDOperations_0.png\" />\n\n# 소개\n\n이 글에서는 .NET Core 6을 사용하여 CRUD 작업을 수행하는 제품 관리 웹 API를 만들고 React JS의 도움으로 다양한 형식을 사용할 것입니다.\n\n# 사전 준비조건\n\n\n\n- Visual Studio 2022\n- VS Code\n- SQL Server\n- .NET Core SDK\n- Node JS\n\n# 제품 관리 응용 프로그램\n\n단계 1\n\n새 제품 관리 .NET Core Web API를 만드세요.\n\n\n\nStep 2\n\n데이터베이스 마이그레이션 및 SQL Server와의 연결에 사용하는 다음 NuGet 패키지를 설치하십시오.\n\n![NuGet Packages](/assets/img/2024-05-14-ProductManagementApplicationusingNETCore6andReactJSwithCRUDOperations_1.png)\n\nStep 3\n\n\n\nentities 폴더 안에 product 클래스를 추가해주세요.\n\n```js\nnamespace ProductManagementAPI.Entities\n{\n    public class Product\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public decimal Price { get; set; }\n    }\n}\n```\n\n4단계\n\ndata 폴더 안에 AppDbContext 클래스를 만들어 SQL Server 연결 및 DB 설정 속성을 추가해주세요.\n\n\n\n```cs\nusing Microsoft.EntityFrameworkCore;\nusing ProductManagementAPI.Entities;\n\nnamespace ProductManagementAPI.Data\n{\n    public class AppDbContext : DbContext\n    {\n        public DbSet<Product> Products { get; set; }\n        protected readonly IConfiguration Configuration;\n        public AppDbContext(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n        protected override void OnConfiguring(DbContextOptionsBuilder options)\n        {\n            options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\"));\n            options.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);\n        }\n    }\n}\n```\n\nStep 5\n\n리포지토리 폴더 내에 제품 리포지토리를 추가하세요.\n\nIProductRepository\n\n\n\n\n```js\nusing ProductManagementAPI.Entities;\n\nnamespace ProductManagementAPI.Repositories\n{\n    public interface IProductRepository\n    {\n        void AddProduct(Product product);\n        void DeleteProduct(int id);\n        List<Product> GetAllProducts();\n        Product GetProductById(int id);\n        void UpdateProduct(Product product);\n    }\n}\n```\n\nProductRepository\n\n```js\nusing Microsoft.EntityFrameworkCore;\nusing ProductManagementAPI.Data;\nusing ProductManagementAPI.Entities;\n\nnamespace ProductManagementAPI.Repositories\n{\n    public class ProductRepository : IProductRepository\n    {\n        private readonly AppDbContext _context;\n        public ProductRepository(AppDbContext context)\n        {\n            _context = context;\n        }\n        public List<Product> GetAllProducts()\n        {\n            return _context.Products.ToList();\n        }\n        public Product GetProductById(int id)\n        {\n            return _context.Products.FirstOrDefault(p => p.Id == id);\n        }\n        public void AddProduct(Product product)\n        {\n            if (product == null)\n            {\n                throw new ArgumentNullException(nameof(product));\n            }\n            _context.Products.Add(product);\n            _context.SaveChanges();\n        }\n        public void UpdateProduct(Product product)\n        {\n            if (product == null)\n            {\n                throw new ArgumentNullException(nameof(product));\n            }\n            _context.Entry(product).State = EntityState.Modified;\n            _context.SaveChanges();\n        }\n        public void DeleteProduct(int id)\n        {\n            var product = _context.Products.Find(id);\n            if (product == null)\n            {\n                throw new ArgumentNullException(nameof(product));\n            }\n            _context.Products.Remove(product);\n            _context.SaveChanges();\n        }\n    }\n}\n```\n\n단계 6\n\n\n\n\n위 코드를 사용하여 다양한 작업을 수행하는 새 제품 컨트롤러를 만들었습니다. 이제 이를 호출하면 우리의 프런트엔드 애플리케이션을 통해 다양한 작업을 수행할 수 있습니다.\n\n```js\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing ProductManagementAPI.Entities;\nusing ProductManagementAPI.Repositories;\n\nnamespace ProductManagementAPI.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ProductController : ControllerBase\n    {\n        private readonly IProductRepository _productRepository;\n        public ProductController(IProductRepository productRepository)\n        {\n            _productRepository = productRepository;\n        }\n        [HttpGet]\n        public IActionResult GetAllProducts()\n        {\n            var products = _productRepository.GetAllProducts();\n            return Ok(products);\n        }\n        [HttpGet(\"{id}\")]\n        public IActionResult GetProductById(int id)\n        {\n            var product = _productRepository.GetProductById(id);\n            if (product == null)\n            {\n                return NotFound();\n            }\n            return Ok(product);\n        }\n        [HttpPost]\n        public IActionResult AddProduct([FromBody] Product product)\n        {\n            if (product == null)\n            {\n                return BadRequest();\n            }\n            _productRepository.AddProduct(product);\n            return CreatedAtAction(nameof(GetProductById), new { id = product.Id }, product);\n        }\n        [HttpPut(\"{id}\")]\n        public IActionResult UpdateProduct(int id, [FromBody] Product product)\n        {\n            if (product == null || id != product.Id)\n            {\n                return BadRequest();\n            }\n            var existingProduct = _productRepository.GetProductById(id);\n            if (existingProduct == null)\n            {\n                return NotFound();\n            }\n            _productRepository.UpdateProduct(product);\n            return NoContent();\n        }\n        [HttpDelete(\"{id}\")]\n        public IActionResult DeleteProduct(int id)\n        {\n            var existingProduct = _productRepository.GetProductById(id);\n            if (existingProduct == null)\n            {\n                return NotFound();\n            }\n            _productRepository.DeleteProduct(id);\n            return NoContent();\n        }\n    }\n}\n```\n\n7단계\n\n앱 설정 파일을 열어 데이터베이스 연결 문자열을 추가하세요.```\n\n\n\n```json\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Data Source=DESKTOP-8RL8JOG;Initial Catalog=ReactNetCoreCrudDb;User Id=sa;Password=database@1;\"\n  }\n}\n```\n\n**단계 8**\n\n서비스 컨테이너 내에서 서비스를 등록하고 미들웨어를 구성하세요.\n\n```csharp\nusing ProductManagementAPI.Data;\nusing ProductManagementAPI.Repositories;\n\nvar builder = WebApplication.CreateBuilder(args);\n// 컨테이너에 서비스 추가\nbuilder.Services.AddScoped<IProductRepository, ProductRepository>();\nbuilder.Services.AddDbContext<AppDbContext>();\nbuilder.Services.AddCors(options => {\n    options.AddPolicy(\"CORSPolicy\", builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());\n});\n\nbuilder.Services.AddControllers();\n// Swagger/OpenAPI 구성에 대해 더 자세히 알아보려면 https://aka.ms/aspnetcore/swashbuckle을 참조하세요\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nvar app = builder.Build();\n// HTTP 요청 파이프라인 구성\napp.UseCors(\"CORSPolicy\");\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\napp.UseHttpsRedirection();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();\n```\n\n\n\n9단계\n\n아래 엔터티 프레임워크 데이터베이스 마이그레이션 명령을 실행하여 데이터베이스와 테이블을 생성합니다.\n\n```js\nadd-migration \"v1\"\nupdate-database\n```\n\n10단계\n\n\n\n마지막으로, 애플리케이션을 실행하고 Swagger UI를 사용하여 다양한 API 엔드포인트를 실행하세요.\n\n![Swagger UI](/assets/img/2024-05-14-ProductManagementApplicationusingNETCore6andReactJSwithCRUDOperations_2.png)\n\nReact JS를 사용하여 클라이언트 애플리케이션을 생성하고 위의 API 엔드포인트를 이용해보세요.\n\n1단계\n\n\n\n다음 명령어를 사용하여 새 React JS 애플리케이션을 만들어 보세요:\n\nnpx create-react-app react-netcore-crud-app\n\n단계 2\n\n프로젝트 디렉토리로 이동하세요.\n\n\n\ncd react-netcore-crud-app\n\n**단계 3**\n\n백엔드 API를 소비하고 호출하기 위해 Axios를 설치하고 디자인을 위해 bootstrap을 설치하세요.\n\nnpm install axios\n\n\n\nnpm install bootstrap\n\n단계 4\n\n다음 컴포넌트 및 서비스를 추가하세요:\n\n제품 목록 컴포넌트.\n\n\n\n```js\n// src/components/ProductList/ProductList.js\nimport React, { useState, useEffect } from 'react';\nimport ProductListItem from './ProductListItem';\nimport productService from '../../services/productService';\n\nconst ProductList = () => {\n    const [products, setProducts] = useState([]);\n    useEffect(() => {\n        fetchProducts();\n    }, []);\n    const fetchProducts = async () => {\n        try {\n            const productsData = await productService.getAllProducts();\n            setProducts(productsData);\n        } catch (error) {\n            console.error('제품을 불러오는 중 오류가 발생했습니다:', error);\n        }\n    };\n    const handleDelete = async (id) => {\n        try {\n            await productService.deleteProduct(id);\n            fetchProducts(); // 제품 목록 새로고침\n        } catch (error) {\n            console.error('제품 삭제 중 오류가 발생했습니다:', error);\n        }\n    };\n    const handleEdit = () => {\n        fetchProducts(); // 편집 후 제품 목록 새로고침\n    };\n    return (\n        <div className=\"container\">\n            <h2 className=\"my-4\">제품 목록</h2>\n            <ul className=\"list-group\">\n                {products.map(product => (\n                    <ProductListItem key={product.id} product={product} onDelete={() => handleDelete(product.id)} onEdit={handleEdit} />\n                ))}\n            </ul>\n        </div>\n    );\n};\nexport default ProductList;\n```\n\n제품 목록 항목 컴포넌트.\n\n```js\n// src/components/ProductList/ProductListItem.js\nimport React, { useState } from 'react';\nimport productService from '../../services/productService';\n\nconst ProductListItem = ({ product, onDelete, onEdit }) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [editedName, setEditedName] = useState(product.name);\n    const [editedPrice, setEditedPrice] = useState(product.price);\n    const handleEdit = async () => {\n        setIsEditing(true);\n    };\n    const handleSave = async () => {\n        const editedProduct = { ...product, name: editedName, price: parseFloat(editedPrice) };\n        try {\n            await productService.updateProduct(product.id, editedProduct);\n            setIsEditing(false);\n            onEdit(); // 제품 목록 새로고침\n        } catch (error) {\n            console.error('제품 업데이트 중 오류가 발생했습니다:', error);\n        }\n    };\n    const handleCancel = () => {\n        setIsEditing(false);\n        // 수정된 값 초기화\n        setEditedName(product.name);\n        setEditedPrice(product.price);\n    };\n    return (\n        <li className=\"list-group-item\">\n            {isEditing ? (\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <input type=\"text\" className=\"form-control\" value={editedName} onChange={e => setEditedName(e.target.value)} required />\n                    </div>\n                    <div className=\"col\">\n                        <input type=\"number\" className=\"form-control\" value={editedPrice} onChange={e => setEditedPrice(e.target.value)} required />\n                    </div>\n                    <div className=\"col-auto\">\n                        <button className=\"btn btn-success me-2\" onClick={handleSave}>저장</button>\n                        <button className=\"btn btn-secondary\" onClick={handleCancel}>취소</button>\n                    </div>\n                </div>\n            ) : (\n                <div className=\"d-flex justify-content-between align-items-center\">\n                    <span>{product.name} - ${product.price}</span>\n                    <div>\n                        <button className=\"btn btn-danger me-2\" onClick={onDelete}>삭제</button>\n                        <button className=\"btn btn-primary\" onClick={handleEdit}>편집</button>\n                    </div>\n                </div>\n            )}\n        </li>\n    );\n};\nexport default ProductListItem;\n```\n\n제품 서비스.\n\n\n\n\n```js\n// src/services/productService.js\nimport axios from 'axios';\n\nconst baseURL = 'https://localhost:7202/api/Product';\nconst productService = {\n    getAllProducts: async () => {\n        const response = await axios.get(baseURL);\n        return response.data;\n    },\n    addProduct: async (product) => {\n        const response = await axios.post(baseURL, product);\n        return response.data;\n    },\n    deleteProduct: async (id) => {\n        const response = await axios.delete(`${baseURL}/${id}`);\n        return response.data;\n    },\n    updateProduct: async (id, product) => {\n        const response = await axios.put(`${baseURL}/${id}`, product);\n        return response.data;\n    }\n};\nexport default productService;\n```\n\nApp component.\n\n```js\n// src/App.js\nimport React, { useState } from 'react';\nimport ProductList from './components/ProductList/ProductList';\nimport ProductForm from './components/ProductForm/ProductForm';\n\nfunction App() {\n    const [refresh, setRefresh] = useState(false);\n    const handleProductAdded = () => {\n        setRefresh(!refresh); // 상태를 토글하여 다시 렌더링을 트리거합니다.\n    };\n    return (\n        <div>\n            <ProductList key={refresh} />\n            <ProductForm onProductAdded={handleProductAdded} />\n        </div>\n    );\n}\nexport default App;\n```\n\n5단계\n\n\n\n\n다음 명령을 사용하여 응용 프로그램을 실행하고 동일한을 사용하여 다양한 CRUD 작업을 수행하십시오.\n\n![image](/assets/img/2024-05-14-ProductManagementApplicationusingNETCore6andReactJSwithCRUDOperations_3.png)\n\n# GitHub\n\nhttps://github.com/Jaydeep-007/React_NETCore_CRUD\n\n\n\n# 결론\n\n이 기사에서는 .NET Core 및 SQL Server를 사용하여 제품 관리 백엔드 응용 프로그램을 만들었고 CRUD 작업을 수행하는 데 필요한 다양한 API 엔드포인트를 만들었습니다. 나중에 React JS를 사용하여 프론트엔드 응용 프로그램을 만들었고 Axios의 도움을 받아 백엔드 응용 프로그램을 동일한 내에서 사용했습니다.","ogImage":{"url":"/assets/img/2024-05-14-ProductManagementApplicationusingNETCore6andReactJSwithCRUDOperations_0.png"},"coverImage":"/assets/img/2024-05-14-ProductManagementApplicationusingNETCore6andReactJSwithCRUDOperations_0.png","tag":["Tech"],"readingTime":14},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>소개</h1>\n<p>이 글에서는 .NET Core 6을 사용하여 CRUD 작업을 수행하는 제품 관리 웹 API를 만들고 React JS의 도움으로 다양한 형식을 사용할 것입니다.</p>\n<h1>사전 준비조건</h1>\n<ul>\n<li>Visual Studio 2022</li>\n<li>VS Code</li>\n<li>SQL Server</li>\n<li>.NET Core SDK</li>\n<li>Node JS</li>\n</ul>\n<h1>제품 관리 응용 프로그램</h1>\n<p>단계 1</p>\n<p>새 제품 관리 .NET Core Web API를 만드세요.</p>\n<p>Step 2</p>\n<p>데이터베이스 마이그레이션 및 SQL Server와의 연결에 사용하는 다음 NuGet 패키지를 설치하십시오.</p>\n<p><img src=\"/assets/img/2024-05-14-ProductManagementApplicationusingNETCore6andReactJSwithCRUDOperations_1.png\" alt=\"NuGet Packages\"></p>\n<p>Step 3</p>\n<p>entities 폴더 안에 product 클래스를 추가해주세요.</p>\n<pre><code class=\"hljs language-js\">namespace <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Entities</span>\n{\n    public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Product</span>\n    {\n        public int <span class=\"hljs-title class_\">Id</span> { get; set; }\n        public string <span class=\"hljs-title class_\">Name</span> { get; set; }\n        public decimal <span class=\"hljs-title class_\">Price</span> { get; set; }\n    }\n}\n</code></pre>\n<p>4단계</p>\n<p>data 폴더 안에 AppDbContext 클래스를 만들어 SQL Server 연결 및 DB 설정 속성을 추가해주세요.</p>\n<pre><code class=\"hljs language-cs\"><span class=\"hljs-keyword\">using</span> Microsoft.EntityFrameworkCore;\n<span class=\"hljs-keyword\">using</span> ProductManagementAPI.Entities;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">ProductManagementAPI.Data</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppDbContext</span> : <span class=\"hljs-title\">DbContext</span>\n    {\n        <span class=\"hljs-keyword\">public</span> DbSet&#x3C;Product> Products { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">readonly</span> IConfiguration Configuration;\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">AppDbContext</span>(<span class=\"hljs-params\">IConfiguration configuration</span>)</span>\n        {\n            Configuration = configuration;\n        }\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">OnConfiguring</span>(<span class=\"hljs-params\">DbContextOptionsBuilder options</span>)</span>\n        {\n            options.UseSqlServer(Configuration.GetConnectionString(<span class=\"hljs-string\">\"DefaultConnection\"</span>));\n            options.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);\n        }\n    }\n}\n</code></pre>\n<p>Step 5</p>\n<p>리포지토리 폴더 내에 제품 리포지토리를 추가하세요.</p>\n<p>IProductRepository</p>\n<pre><code class=\"hljs language-js\">using <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Entities</span>;\n\nnamespace <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Repositories</span>\n{\n    public interface <span class=\"hljs-title class_\">IProductRepository</span>\n    {\n        <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">AddProduct</span>(<span class=\"hljs-title class_\">Product</span> product);\n        <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">DeleteProduct</span>(int id);\n        <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">Product</span>> <span class=\"hljs-title class_\">GetAllProducts</span>();\n        <span class=\"hljs-title class_\">Product</span> <span class=\"hljs-title class_\">GetProductById</span>(int id);\n        <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">UpdateProduct</span>(<span class=\"hljs-title class_\">Product</span> product);\n    }\n}\n</code></pre>\n<p>ProductRepository</p>\n<pre><code class=\"hljs language-js\">using <span class=\"hljs-title class_\">Microsoft</span>.<span class=\"hljs-property\">EntityFrameworkCore</span>;\nusing <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Data</span>;\nusing <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Entities</span>;\n\nnamespace <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Repositories</span>\n{\n    public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ProductRepository</span> : <span class=\"hljs-title class_\">IProductRepository</span>\n    {\n        private readonly <span class=\"hljs-title class_\">AppDbContext</span> _context;\n        public <span class=\"hljs-title class_\">ProductRepository</span>(<span class=\"hljs-title class_\">AppDbContext</span> context)\n        {\n            _context = context;\n        }\n        public <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">Product</span>> <span class=\"hljs-title class_\">GetAllProducts</span>()\n        {\n            <span class=\"hljs-keyword\">return</span> _context.<span class=\"hljs-property\">Products</span>.<span class=\"hljs-title class_\">ToList</span>();\n        }\n        public <span class=\"hljs-title class_\">Product</span> <span class=\"hljs-title class_\">GetProductById</span>(int id)\n        {\n            <span class=\"hljs-keyword\">return</span> _context.<span class=\"hljs-property\">Products</span>.<span class=\"hljs-title class_\">FirstOrDefault</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">p</span> =></span> p.<span class=\"hljs-property\">Id</span> == id);\n        }\n        public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">AddProduct</span>(<span class=\"hljs-title class_\">Product</span> product)\n        {\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentNullException</span>(<span class=\"hljs-title function_\">nameof</span>(product));\n            }\n            _context.<span class=\"hljs-property\">Products</span>.<span class=\"hljs-title class_\">Add</span>(product);\n            _context.<span class=\"hljs-title class_\">SaveChanges</span>();\n        }\n        public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">UpdateProduct</span>(<span class=\"hljs-title class_\">Product</span> product)\n        {\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentNullException</span>(<span class=\"hljs-title function_\">nameof</span>(product));\n            }\n            _context.<span class=\"hljs-title class_\">Entry</span>(product).<span class=\"hljs-property\">State</span> = <span class=\"hljs-title class_\">EntityState</span>.<span class=\"hljs-property\">Modified</span>;\n            _context.<span class=\"hljs-title class_\">SaveChanges</span>();\n        }\n        public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">DeleteProduct</span>(int id)\n        {\n            <span class=\"hljs-keyword\">var</span> product = _context.<span class=\"hljs-property\">Products</span>.<span class=\"hljs-title class_\">Find</span>(id);\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentNullException</span>(<span class=\"hljs-title function_\">nameof</span>(product));\n            }\n            _context.<span class=\"hljs-property\">Products</span>.<span class=\"hljs-title class_\">Remove</span>(product);\n            _context.<span class=\"hljs-title class_\">SaveChanges</span>();\n        }\n    }\n}\n</code></pre>\n<p>단계 6</p>\n<p>위 코드를 사용하여 다양한 작업을 수행하는 새 제품 컨트롤러를 만들었습니다. 이제 이를 호출하면 우리의 프런트엔드 애플리케이션을 통해 다양한 작업을 수행할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">using <span class=\"hljs-title class_\">Microsoft</span>.<span class=\"hljs-property\">AspNetCore</span>.<span class=\"hljs-property\">Http</span>;\nusing <span class=\"hljs-title class_\">Microsoft</span>.<span class=\"hljs-property\">AspNetCore</span>.<span class=\"hljs-property\">Mvc</span>;\nusing <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Entities</span>;\nusing <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Repositories</span>;\n\nnamespace <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Controllers</span>\n{\n    [<span class=\"hljs-title class_\">ApiController</span>]\n    [<span class=\"hljs-title class_\">Route</span>(<span class=\"hljs-string\">\"api/[controller]\"</span>)]\n    public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ProductController</span> : <span class=\"hljs-title class_\">ControllerBase</span>\n    {\n        private readonly <span class=\"hljs-title class_\">IProductRepository</span> _productRepository;\n        public <span class=\"hljs-title class_\">ProductController</span>(<span class=\"hljs-title class_\">IProductRepository</span> productRepository)\n        {\n            _productRepository = productRepository;\n        }\n        [<span class=\"hljs-title class_\">HttpGet</span>]\n        public <span class=\"hljs-title class_\">IActionResult</span> <span class=\"hljs-title class_\">GetAllProducts</span>()\n        {\n            <span class=\"hljs-keyword\">var</span> products = _productRepository.<span class=\"hljs-title class_\">GetAllProducts</span>();\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Ok</span>(products);\n        }\n        [<span class=\"hljs-title class_\">HttpGet</span>(<span class=\"hljs-string\">\"{id}\"</span>)]\n        public <span class=\"hljs-title class_\">IActionResult</span> <span class=\"hljs-title class_\">GetProductById</span>(int id)\n        {\n            <span class=\"hljs-keyword\">var</span> product = _productRepository.<span class=\"hljs-title class_\">GetProductById</span>(id);\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NotFound</span>();\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Ok</span>(product);\n        }\n        [<span class=\"hljs-title class_\">HttpPost</span>]\n        public <span class=\"hljs-title class_\">IActionResult</span> <span class=\"hljs-title class_\">AddProduct</span>([<span class=\"hljs-title class_\">FromBody</span>] <span class=\"hljs-title class_\">Product</span> product)\n        {\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">BadRequest</span>();\n            }\n            _productRepository.<span class=\"hljs-title class_\">AddProduct</span>(product);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">CreatedAtAction</span>(<span class=\"hljs-title function_\">nameof</span>(<span class=\"hljs-title class_\">GetProductById</span>), <span class=\"hljs-keyword\">new</span> { id = product.<span class=\"hljs-property\">Id</span> }, product);\n        }\n        [<span class=\"hljs-title class_\">HttpPut</span>(<span class=\"hljs-string\">\"{id}\"</span>)]\n        public <span class=\"hljs-title class_\">IActionResult</span> <span class=\"hljs-title class_\">UpdateProduct</span>(int id, [<span class=\"hljs-title class_\">FromBody</span>] <span class=\"hljs-title class_\">Product</span> product)\n        {\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span> || id != product.<span class=\"hljs-property\">Id</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">BadRequest</span>();\n            }\n            <span class=\"hljs-keyword\">var</span> existingProduct = _productRepository.<span class=\"hljs-title class_\">GetProductById</span>(id);\n            <span class=\"hljs-keyword\">if</span> (existingProduct == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NotFound</span>();\n            }\n            _productRepository.<span class=\"hljs-title class_\">UpdateProduct</span>(product);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NoContent</span>();\n        }\n        [<span class=\"hljs-title class_\">HttpDelete</span>(<span class=\"hljs-string\">\"{id}\"</span>)]\n        public <span class=\"hljs-title class_\">IActionResult</span> <span class=\"hljs-title class_\">DeleteProduct</span>(int id)\n        {\n            <span class=\"hljs-keyword\">var</span> existingProduct = _productRepository.<span class=\"hljs-title class_\">GetProductById</span>(id);\n            <span class=\"hljs-keyword\">if</span> (existingProduct == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NotFound</span>();\n            }\n            _productRepository.<span class=\"hljs-title class_\">DeleteProduct</span>(id);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NoContent</span>();\n        }\n    }\n}\n</code></pre>\n<p>7단계</p>\n<p>앱 설정 파일을 열어 데이터베이스 연결 문자열을 추가하세요.```</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"Logging\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"LogLevel\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"Default\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Information\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"Microsoft.AspNetCore\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Warning\"</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"AllowedHosts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"*\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"ConnectionStrings\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"DefaultConnection\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Data Source=DESKTOP-8RL8JOG;Initial Catalog=ReactNetCoreCrudDb;User Id=sa;Password=database@1;\"</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p><strong>단계 8</strong></p>\n<p>서비스 컨테이너 내에서 서비스를 등록하고 미들웨어를 구성하세요.</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">using</span> ProductManagementAPI.Data;\n<span class=\"hljs-keyword\">using</span> ProductManagementAPI.Repositories;\n\n<span class=\"hljs-keyword\">var</span> builder = WebApplication.CreateBuilder(args);\n<span class=\"hljs-comment\">// 컨테이너에 서비스 추가</span>\nbuilder.Services.AddScoped&#x3C;IProductRepository, ProductRepository>();\nbuilder.Services.AddDbContext&#x3C;AppDbContext>();\nbuilder.Services.AddCors(options => {\n    options.AddPolicy(<span class=\"hljs-string\">\"CORSPolicy\"</span>, builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());\n});\n\nbuilder.Services.AddControllers();\n<span class=\"hljs-comment\">// Swagger/OpenAPI 구성에 대해 더 자세히 알아보려면 https://aka.ms/aspnetcore/swashbuckle을 참조하세요</span>\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n<span class=\"hljs-keyword\">var</span> app = builder.Build();\n<span class=\"hljs-comment\">// HTTP 요청 파이프라인 구성</span>\napp.UseCors(<span class=\"hljs-string\">\"CORSPolicy\"</span>);\n<span class=\"hljs-keyword\">if</span> (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\napp.UseHttpsRedirection();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();\n</code></pre>\n<p>9단계</p>\n<p>아래 엔터티 프레임워크 데이터베이스 마이그레이션 명령을 실행하여 데이터베이스와 테이블을 생성합니다.</p>\n<pre><code class=\"hljs language-js\">add-migration <span class=\"hljs-string\">\"v1\"</span>\nupdate-database\n</code></pre>\n<p>10단계</p>\n<p>마지막으로, 애플리케이션을 실행하고 Swagger UI를 사용하여 다양한 API 엔드포인트를 실행하세요.</p>\n<p><img src=\"/assets/img/2024-05-14-ProductManagementApplicationusingNETCore6andReactJSwithCRUDOperations_2.png\" alt=\"Swagger UI\"></p>\n<p>React JS를 사용하여 클라이언트 애플리케이션을 생성하고 위의 API 엔드포인트를 이용해보세요.</p>\n<p>1단계</p>\n<p>다음 명령어를 사용하여 새 React JS 애플리케이션을 만들어 보세요:</p>\n<p>npx create-react-app react-netcore-crud-app</p>\n<p>단계 2</p>\n<p>프로젝트 디렉토리로 이동하세요.</p>\n<p>cd react-netcore-crud-app</p>\n<p><strong>단계 3</strong></p>\n<p>백엔드 API를 소비하고 호출하기 위해 Axios를 설치하고 디자인을 위해 bootstrap을 설치하세요.</p>\n<p>npm install axios</p>\n<p>npm install bootstrap</p>\n<p>단계 4</p>\n<p>다음 컴포넌트 및 서비스를 추가하세요:</p>\n<p>제품 목록 컴포넌트.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/ProductList/ProductList.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProductListItem</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./ProductListItem'</span>;\n<span class=\"hljs-keyword\">import</span> productService <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../services/productService'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ProductList</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> [products, setProducts] = <span class=\"hljs-title function_\">useState</span>([]);\n    <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-title function_\">fetchProducts</span>();\n    }, []);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fetchProducts</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">const</span> productsData = <span class=\"hljs-keyword\">await</span> productService.<span class=\"hljs-title function_\">getAllProducts</span>();\n            <span class=\"hljs-title function_\">setProducts</span>(productsData);\n        } <span class=\"hljs-keyword\">catch</span> (error) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'제품을 불러오는 중 오류가 발생했습니다:'</span>, error);\n        }\n    };\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleDelete</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">id</span>) => {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">await</span> productService.<span class=\"hljs-title function_\">deleteProduct</span>(id);\n            <span class=\"hljs-title function_\">fetchProducts</span>(); <span class=\"hljs-comment\">// 제품 목록 새로고침</span>\n        } <span class=\"hljs-keyword\">catch</span> (error) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'제품 삭제 중 오류가 발생했습니다:'</span>, error);\n        }\n    };\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleEdit</span> = (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-title function_\">fetchProducts</span>(); <span class=\"hljs-comment\">// 편집 후 제품 목록 새로고침</span>\n    };\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"my-4\"</span>></span>제품 목록<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"list-group\"</span>></span>\n                {products.map(product => (\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProductListItem</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{product.id}</span> <span class=\"hljs-attr\">product</span>=<span class=\"hljs-string\">{product}</span> <span class=\"hljs-attr\">onDelete</span>=<span class=\"hljs-string\">{()</span> =></span> handleDelete(product.id)} onEdit={handleEdit} />\n                ))}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    );\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ProductList</span>;\n</code></pre>\n<p>제품 목록 항목 컴포넌트.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/ProductList/ProductListItem.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> productService <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../services/productService'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ProductListItem</span> = (<span class=\"hljs-params\">{ product, onDelete, onEdit }</span>) => {\n    <span class=\"hljs-keyword\">const</span> [isEditing, setIsEditing] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-keyword\">const</span> [editedName, setEditedName] = <span class=\"hljs-title function_\">useState</span>(product.<span class=\"hljs-property\">name</span>);\n    <span class=\"hljs-keyword\">const</span> [editedPrice, setEditedPrice] = <span class=\"hljs-title function_\">useState</span>(product.<span class=\"hljs-property\">price</span>);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleEdit</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-title function_\">setIsEditing</span>(<span class=\"hljs-literal\">true</span>);\n    };\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSave</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-keyword\">const</span> editedProduct = { ...product, <span class=\"hljs-attr\">name</span>: editedName, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">parseFloat</span>(editedPrice) };\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">await</span> productService.<span class=\"hljs-title function_\">updateProduct</span>(product.<span class=\"hljs-property\">id</span>, editedProduct);\n            <span class=\"hljs-title function_\">setIsEditing</span>(<span class=\"hljs-literal\">false</span>);\n            <span class=\"hljs-title function_\">onEdit</span>(); <span class=\"hljs-comment\">// 제품 목록 새로고침</span>\n        } <span class=\"hljs-keyword\">catch</span> (error) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'제품 업데이트 중 오류가 발생했습니다:'</span>, error);\n        }\n    };\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleCancel</span> = (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-title function_\">setIsEditing</span>(<span class=\"hljs-literal\">false</span>);\n        <span class=\"hljs-comment\">// 수정된 값 초기화</span>\n        <span class=\"hljs-title function_\">setEditedName</span>(product.<span class=\"hljs-property\">name</span>);\n        <span class=\"hljs-title function_\">setEditedPrice</span>(product.<span class=\"hljs-property\">price</span>);\n    };\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"list-group-item\"</span>></span>\n            {isEditing ? (\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"row\"</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"col\"</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"form-control\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{editedName}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =></span> setEditedName(e.target.value)} required />\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"col\"</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"form-control\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{editedPrice}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =></span> setEditedPrice(e.target.value)} required />\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"col-auto\"</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-success me-2\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleSave}</span>></span>저장<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-secondary\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleCancel}</span>></span>취소<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n            ) : (\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"d-flex justify-content-between align-items-center\"</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>{product.name} - ${product.price}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-danger me-2\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onDelete}</span>></span>삭제<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-primary\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleEdit}</span>></span>편집<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n            )}\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>\n    );\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ProductListItem</span>;\n</code></pre>\n<p>제품 서비스.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/services/productService.js</span>\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n\n<span class=\"hljs-keyword\">const</span> baseURL = <span class=\"hljs-string\">'https://localhost:7202/api/Product'</span>;\n<span class=\"hljs-keyword\">const</span> productService = {\n    <span class=\"hljs-attr\">getAllProducts</span>: <span class=\"hljs-keyword\">async</span> () => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">get</span>(baseURL);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    },\n    <span class=\"hljs-attr\">addProduct</span>: <span class=\"hljs-keyword\">async</span> (product) => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">post</span>(baseURL, product);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    },\n    <span class=\"hljs-attr\">deleteProduct</span>: <span class=\"hljs-keyword\">async</span> (id) => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${baseURL}</span>/<span class=\"hljs-subst\">${id}</span>`</span>);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    },\n    <span class=\"hljs-attr\">updateProduct</span>: <span class=\"hljs-keyword\">async</span> (id, product) => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${baseURL}</span>/<span class=\"hljs-subst\">${id}</span>`</span>, product);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    }\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> productService;\n</code></pre>\n<p>App component.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/App.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProductList</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/ProductList/ProductList'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProductForm</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/ProductForm/ProductForm'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> [refresh, setRefresh] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleProductAdded</span> = (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-title function_\">setRefresh</span>(!refresh); <span class=\"hljs-comment\">// 상태를 토글하여 다시 렌더링을 트리거합니다.</span>\n    };\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProductList</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{refresh}</span> /></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProductForm</span> <span class=\"hljs-attr\">onProductAdded</span>=<span class=\"hljs-string\">{handleProductAdded}</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    );\n}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>5단계</p>\n<p>다음 명령을 사용하여 응용 프로그램을 실행하고 동일한을 사용하여 다양한 CRUD 작업을 수행하십시오.</p>\n<p><img src=\"/assets/img/2024-05-14-ProductManagementApplicationusingNETCore6andReactJSwithCRUDOperations_3.png\" alt=\"image\"></p>\n<h1>GitHub</h1>\n<p><a href=\"https://github.com/Jaydeep-007/React_NETCore_CRUD\" rel=\"nofollow\" target=\"_blank\">https://github.com/Jaydeep-007/React_NETCore_CRUD</a></p>\n<h1>결론</h1>\n<p>이 기사에서는 .NET Core 및 SQL Server를 사용하여 제품 관리 백엔드 응용 프로그램을 만들었고 CRUD 작업을 수행하는 데 필요한 다양한 API 엔드포인트를 만들었습니다. 나중에 React JS를 사용하여 프론트엔드 응용 프로그램을 만들었고 Axios의 도움을 받아 백엔드 응용 프로그램을 동일한 내에서 사용했습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}