{"pageProps":{"post":{"title":"Fetch API CORS 및 no-cors에 대한 궁극의 가이드","description":"","date":"2024-05-14 13:16","slug":"2024-05-14-FetchAPITheUltimateGuidetoCORSandno-cors","content":"\n\n\n<img src=\"/assets/img/2024-05-14-FetchAPITheUltimateGuidetoCORSandno-cors_0.png\" />\n\n웹 애플리케이션에서 제3자 API 또는 서버에서 데이터를 가져와야 하는 경우가 있나요? 그렇다면, 요청한 데이터에 액세스하는 데 방해가 되는 Cross-Origin Resource Sharing (CORS) 오류를 만날 수도 있습니다.\n\n이 블로그 포스트에서는 Fetch API에서 CORS 및 No-CORS 모드를 사용하여 이러한 제약을 극복하고 외부 소스에서 데이터를 성공적으로 가져오는 방법을 살펴볼 것입니다.\n\n먼저, CORS가 무엇이며 왜 중요한지 이해해 봅시다.\n\n\n\n\n그러나 웹 애플리케이션에서 제3자 API 또는 서버로 요청을 보내야 할 때는 장애가 될 수도 있습니다.\n\n![image](/assets/img/2024-05-14-FetchAPITheUltimateGuidetoCORSandno-cors_1.png)\n\nFetch API는 웹 애플리케이션에서 HTTP 요청을 보내는 방법을 제공합니다. Fetch를 사용하면 fetch() 함수의 mode 옵션을 사용하여 요청의 모드를 지정할 수 있습니다.\n\nmode 옵션은 `cors`, `no-cors`, `same-origin`, 또는 `navigate` 중 하나로 설정할 수 있습니다.\n\n\n\n`cors` 모드에서는 브라우저가 요청에 Origin 헤더를 포함하며, 서버가 허용 여부를 나타내는 Access-Control-Allow-Origin 헤더로 응답할 것을 기대합니다.\n\n서버가 적절한 헤더로 응답하면, 브라우저는 요청을 계속 진행하도록 허용하고 응답을 웹 페이지에 제공합니다. 이 모드는 제3자 API나 서버에 요청을 보낼 때 유용합니다.\n\n```js\nfetch('https://example.com/api/data', {\n  mode: 'cors',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    key1: 'value1',\n    key2: 'value2'\n  })\n})\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error(error));\n```\n\n`no-cors` 모드에서는 브라우저가 요청에 Origin 헤더를 포함하지 않으며, 서버의 응답이 불투명하게 처리되어 JavaScript 코드로 액세스할 수 없습니다. 이 모드는 서버로부터의 응답이 필요하지 않은 경우, 예를 들어 제3자 애널리틱스 서비스에 요청을 보낼 때 사용됩니다.\n\n\n\n이제 Fetch API에서 CORS 및 No-CORS 모드를 사용하는 방법을 이해했으므로, 언제 사용해야 하는지에 대해 이야기해보겠습니다.","ogImage":{"url":"/assets/img/2024-05-14-FetchAPITheUltimateGuidetoCORSandno-cors_0.png"},"coverImage":"/assets/img/2024-05-14-FetchAPITheUltimateGuidetoCORSandno-cors_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>웹 애플리케이션에서 제3자 API 또는 서버에서 데이터를 가져와야 하는 경우가 있나요? 그렇다면, 요청한 데이터에 액세스하는 데 방해가 되는 Cross-Origin Resource Sharing (CORS) 오류를 만날 수도 있습니다.</p>\n<p>이 블로그 포스트에서는 Fetch API에서 CORS 및 No-CORS 모드를 사용하여 이러한 제약을 극복하고 외부 소스에서 데이터를 성공적으로 가져오는 방법을 살펴볼 것입니다.</p>\n<p>먼저, CORS가 무엇이며 왜 중요한지 이해해 봅시다.</p>\n<p>그러나 웹 애플리케이션에서 제3자 API 또는 서버로 요청을 보내야 할 때는 장애가 될 수도 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-14-FetchAPITheUltimateGuidetoCORSandno-cors_1.png\" alt=\"image\"></p>\n<p>Fetch API는 웹 애플리케이션에서 HTTP 요청을 보내는 방법을 제공합니다. Fetch를 사용하면 fetch() 함수의 mode 옵션을 사용하여 요청의 모드를 지정할 수 있습니다.</p>\n<p>mode 옵션은 <code>cors</code>, <code>no-cors</code>, <code>same-origin</code>, 또는 <code>navigate</code> 중 하나로 설정할 수 있습니다.</p>\n<p><code>cors</code> 모드에서는 브라우저가 요청에 Origin 헤더를 포함하며, 서버가 허용 여부를 나타내는 Access-Control-Allow-Origin 헤더로 응답할 것을 기대합니다.</p>\n<p>서버가 적절한 헤더로 응답하면, 브라우저는 요청을 계속 진행하도록 허용하고 응답을 웹 페이지에 제공합니다. 이 모드는 제3자 API나 서버에 요청을 보낼 때 유용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'https://example.com/api/data'</span>, {\n  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>,\n  <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n  <span class=\"hljs-attr\">headers</span>: {\n    <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>\n  },\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({\n    <span class=\"hljs-attr\">key1</span>: <span class=\"hljs-string\">'value1'</span>,\n    <span class=\"hljs-attr\">key2</span>: <span class=\"hljs-string\">'value2'</span>\n  })\n})\n.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =></span> response.<span class=\"hljs-title function_\">json</span>())\n.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data))\n.<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error));\n</code></pre>\n<p><code>no-cors</code> 모드에서는 브라우저가 요청에 Origin 헤더를 포함하지 않으며, 서버의 응답이 불투명하게 처리되어 JavaScript 코드로 액세스할 수 없습니다. 이 모드는 서버로부터의 응답이 필요하지 않은 경우, 예를 들어 제3자 애널리틱스 서비스에 요청을 보낼 때 사용됩니다.</p>\n<p>이제 Fetch API에서 CORS 및 No-CORS 모드를 사용하는 방법을 이해했으므로, 언제 사용해야 하는지에 대해 이야기해보겠습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}