{"pageProps":{"post":{"title":"TypeScript 문제 하나로 똑똑해지는 시간을 가져보세요","description":"","date":"2024-05-13 00:18","slug":"2024-05-13-ThisTypeScriptProblemwillSharpenyourMind","content":"\n\n\n![이미지](/assets/img/2024-05-13-ThisTypeScriptProblemwillSharpenyourMind_0.png)\n\nTypeScript는 데이터를 강화하고 깨끗한 코드를 개발할 수 있게 해 주는 환상적인 도구입니다.\n\n오늘은 Mapped Types의 사용을 통해 현실적인 문제를 해결해 보겠습니다.\n\n그럼, 더 이상 미루지 말고 지금 바로 시작해 보겠습니다!\n\n\n\n## 문제\n\n여기서는 국가 코드와 통화 간의 매핑을 나타내기 위해 country-to-currency 패키지를 사용하고 있습니다. 다음과 같이 국가 코드와 통화 간의 매핑을 표현합니다:\n\n```js\nimport countryToCurrency, {\n  Currencies,\n  // 이것은 이해하기 쉬워 보이기 때문에\n  // `CountryCodes`로 이름 변경되었습니다.\n  Countries as CountryCodes,\n} from \"country-to-currency\"\n\n// 가독성을 위해 정의됨\ntype CountryToCurrency = typeof countryToCurrency\n\n// type Currencies = \"GBP\" | \"USD\" ...\n// type CountryCodes = \"GB\" | \"US\" ...\n// type CountryToCurrency = { GB: \"GBP\", US: \"USD\" ... }\n```\n\n입력 통화에 따라 특정 국가 코드를 반환하고, 동시에 유형 안전성을 유지할 수 있으면 좋을 것 같습니다.\n\n\n\n내가 무슨 말을 하는지 아래 코드를 통해 설명해보겠어:\n\n```js\ntype Result = CountryCodesFromCurrency<\"GBP\">\n\n// 결과 타입: \"GB\" | \"GG\" | \"IM\" | \"JE\"\n```\n\n더 잘 이해할 수 있도록 문제를 다이어그램을 이용해 시각화해볼게:\n\n![이 타입스크립트 문제가 당신의 머리를 더 날카롭게 만들 것입니다](/assets/img/2024-05-13-ThisTypeScriptProblemwillSharpenyourMind_1.png)\n\n\n\n우리는 기본적으로 통화를 해당 국가 코드로 역지도하는 작업을 하고 있어요.\n\n## 해결책\n\n이 작업을 Mapped Types를 사용하여 우아하게 처리할 수 있는 해결책이 있다는 것을 알게 되었어요.\n\n```js\n// 여기에 `Mapped Type`의 기본 예제가 있어요\n// 이것은 타입을 가져와서 모든 값을 부울 값으로 변경할 거에요.\n// 키는 그대로 유지한 채로요.\n\ntype OptionsFlags<Type> = {\n  [Property in keyof Type]: boolean;\n};\n```\n\n\n\n화폐에서 국가 코드로의 역매핑을 달성하려면 다음과 같은 논리를 따라야 합니다:\n\n- Mapped 형식을 정의합니다.\n- CountryToCurrency 매핑에서 각 키 (국가 코드)에 대해 값을 우리의 입력 ThisCurrency와 일치하는지 확인합니다.\n- 일치하는 경우 해당 속성을 유지합니다.\n- 일치하지 않는 경우 키 유형을 never로 설정하여 이 속성을 제거합니다.\n\n그리고 이 작업을 수행하기 위한 코드는 다음과 같습니다:\n\n```js\n// 이해하지 못하면 아래에서 설명하는 코드 블록을 참조하세요.\ntype FilterMappingsFor<ThisCurrency extends Currencies> = {\n  [CountryCode in keyof CountryToCurrency \n    as CountryToCurrency[CountryCode] extends ThisCurrency \n    ? CountryCode : never]: CountryToCurrency[CountryCode]\n}\n```\n\n\n\n- 이통화에 대한 국가 코드를 원하는 필터 매핑을 정의하였습니다.\n- 각 CountryCode 키를 반복합니다.\n- 각 CountryCode에 대해 해당하는 통화(CountryToCurrency[CountryCode])와 입력값 ThisCurrency를 비교합니다.\n- 통화가 일치하는 경우 현재 속성을 유지합니다.\n- 일치하지 않는 경우 해당 키를 never로 설정하여 현재 속성을 효과적으로 제거합니다.\n\n거의 다 왔어요!\n\n현재 FilterMappingsFor`ThisCurrency` 유형은 올바른 매핑을 반환하지만 우리는 국가 코드만 필요합니다.\n\n이제 새로운 유형 CountryCodesFromCurrency를 정의하여 필터된 매핑에서 모든 키를 추출합시다:\n\n\n\n```js\n// FilterMappingsFor 함수는 나라 코드와 통화에 대한 올바른 키-값 쌍을 반환하기 때문에,\n// 이 새로운 타입은 우리가 원하는 것만 추출할 것입니다; 나라 코드입니다.\ntype CountryCodesFromCurrency<ThisCurrency extends Currencies> =\n  keyof FilterMappingsFor<ThisCurrency>\n```\n\n마지막으로, 다음과 같이 새로운 타입 Result1과 Result2를 정의하여 이를 테스트할 수 있습니다:\n\n```js\ntype Result1 = CountryCodesFromCurrency<\"GBP\">\ntype Result2 = CountryCodesFromCurrency<\"NIO\">\n\n// 결과1: \"GB\" | \"GG\" | \"IM\" | \"JE\"\n// 결과2: \"NI\"\n```\n\n# 추천 기사\n\n\n\n\n# 제휴사\n\n- Figma 홈: 제 모든 프로젝트에서 사용하는 UI 디자인 도구입니다.\n- Figma 프로페셔널: 필요한 모든 UI 디자인 도구가 모두 이곳에 있습니다.\n- FigJam: 직관적인 다이어그램 및 브레인스토밍으로 마음을 자유롭게 펼쳐보세요.\n\n- Notion: 제 인생 전체를 조직하는 데 사용하는 도구입니다.\n- Notion AI: ChatGPT를 능가하는 AI 도구로 Notion 작업을 최적화해줍니다.\n\n# 참고문헌\n\n\n\n- TypeScript Mapped Types 문서\n- country-to-currency package","ogImage":{"url":"/assets/img/2024-05-13-ThisTypeScriptProblemwillSharpenyourMind_0.png"},"coverImage":"/assets/img/2024-05-13-ThisTypeScriptProblemwillSharpenyourMind_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-13-ThisTypeScriptProblemwillSharpenyourMind_0.png\" alt=\"이미지\"></p>\n<p>TypeScript는 데이터를 강화하고 깨끗한 코드를 개발할 수 있게 해 주는 환상적인 도구입니다.</p>\n<p>오늘은 Mapped Types의 사용을 통해 현실적인 문제를 해결해 보겠습니다.</p>\n<p>그럼, 더 이상 미루지 말고 지금 바로 시작해 보겠습니다!</p>\n<h2>문제</h2>\n<p>여기서는 국가 코드와 통화 간의 매핑을 나타내기 위해 country-to-currency 패키지를 사용하고 있습니다. 다음과 같이 국가 코드와 통화 간의 매핑을 표현합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> countryToCurrency, {\n  <span class=\"hljs-title class_\">Currencies</span>,\n  <span class=\"hljs-comment\">// 이것은 이해하기 쉬워 보이기 때문에</span>\n  <span class=\"hljs-comment\">// `CountryCodes`로 이름 변경되었습니다.</span>\n  <span class=\"hljs-title class_\">Countries</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">CountryCodes</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"country-to-currency\"</span>\n\n<span class=\"hljs-comment\">// 가독성을 위해 정의됨</span>\ntype <span class=\"hljs-title class_\">CountryToCurrency</span> = <span class=\"hljs-keyword\">typeof</span> countryToCurrency\n\n<span class=\"hljs-comment\">// type Currencies = \"GBP\" | \"USD\" ...</span>\n<span class=\"hljs-comment\">// type CountryCodes = \"GB\" | \"US\" ...</span>\n<span class=\"hljs-comment\">// type CountryToCurrency = { GB: \"GBP\", US: \"USD\" ... }</span>\n</code></pre>\n<p>입력 통화에 따라 특정 국가 코드를 반환하고, 동시에 유형 안전성을 유지할 수 있으면 좋을 것 같습니다.</p>\n<p>내가 무슨 말을 하는지 아래 코드를 통해 설명해보겠어:</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">Result</span> = <span class=\"hljs-title class_\">CountryCodesFromCurrency</span>&#x3C;<span class=\"hljs-string\">\"GBP\"</span>>\n\n<span class=\"hljs-comment\">// 결과 타입: \"GB\" | \"GG\" | \"IM\" | \"JE\"</span>\n</code></pre>\n<p>더 잘 이해할 수 있도록 문제를 다이어그램을 이용해 시각화해볼게:</p>\n<p><img src=\"/assets/img/2024-05-13-ThisTypeScriptProblemwillSharpenyourMind_1.png\" alt=\"이 타입스크립트 문제가 당신의 머리를 더 날카롭게 만들 것입니다\"></p>\n<p>우리는 기본적으로 통화를 해당 국가 코드로 역지도하는 작업을 하고 있어요.</p>\n<h2>해결책</h2>\n<p>이 작업을 Mapped Types를 사용하여 우아하게 처리할 수 있는 해결책이 있다는 것을 알게 되었어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 여기에 `Mapped Type`의 기본 예제가 있어요</span>\n<span class=\"hljs-comment\">// 이것은 타입을 가져와서 모든 값을 부울 값으로 변경할 거에요.</span>\n<span class=\"hljs-comment\">// 키는 그대로 유지한 채로요.</span>\n\ntype <span class=\"hljs-title class_\">OptionsFlags</span>&#x3C;<span class=\"hljs-title class_\">Type</span>> = {\n  [<span class=\"hljs-title class_\">Property</span> <span class=\"hljs-keyword\">in</span> keyof <span class=\"hljs-title class_\">Type</span>]: boolean;\n};\n</code></pre>\n<p>화폐에서 국가 코드로의 역매핑을 달성하려면 다음과 같은 논리를 따라야 합니다:</p>\n<ul>\n<li>Mapped 형식을 정의합니다.</li>\n<li>CountryToCurrency 매핑에서 각 키 (국가 코드)에 대해 값을 우리의 입력 ThisCurrency와 일치하는지 확인합니다.</li>\n<li>일치하는 경우 해당 속성을 유지합니다.</li>\n<li>일치하지 않는 경우 키 유형을 never로 설정하여 이 속성을 제거합니다.</li>\n</ul>\n<p>그리고 이 작업을 수행하기 위한 코드는 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 이해하지 못하면 아래에서 설명하는 코드 블록을 참조하세요.</span>\ntype <span class=\"hljs-title class_\">FilterMappingsFor</span>&#x3C;<span class=\"hljs-title class_\">ThisCurrency</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Currencies</span>> = {\n  [<span class=\"hljs-title class_\">CountryCode</span> <span class=\"hljs-keyword\">in</span> keyof <span class=\"hljs-title class_\">CountryToCurrency</span> \n    <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">CountryToCurrency</span>[<span class=\"hljs-title class_\">CountryCode</span>] <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ThisCurrency</span> \n    ? <span class=\"hljs-title class_\">CountryCode</span> : never]: <span class=\"hljs-title class_\">CountryToCurrency</span>[<span class=\"hljs-title class_\">CountryCode</span>]\n}\n</code></pre>\n<ul>\n<li>이통화에 대한 국가 코드를 원하는 필터 매핑을 정의하였습니다.</li>\n<li>각 CountryCode 키를 반복합니다.</li>\n<li>각 CountryCode에 대해 해당하는 통화(CountryToCurrency[CountryCode])와 입력값 ThisCurrency를 비교합니다.</li>\n<li>통화가 일치하는 경우 현재 속성을 유지합니다.</li>\n<li>일치하지 않는 경우 해당 키를 never로 설정하여 현재 속성을 효과적으로 제거합니다.</li>\n</ul>\n<p>거의 다 왔어요!</p>\n<p>현재 FilterMappingsFor<code>ThisCurrency</code> 유형은 올바른 매핑을 반환하지만 우리는 국가 코드만 필요합니다.</p>\n<p>이제 새로운 유형 CountryCodesFromCurrency를 정의하여 필터된 매핑에서 모든 키를 추출합시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// FilterMappingsFor 함수는 나라 코드와 통화에 대한 올바른 키-값 쌍을 반환하기 때문에,</span>\n<span class=\"hljs-comment\">// 이 새로운 타입은 우리가 원하는 것만 추출할 것입니다; 나라 코드입니다.</span>\ntype <span class=\"hljs-title class_\">CountryCodesFromCurrency</span>&#x3C;<span class=\"hljs-title class_\">ThisCurrency</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Currencies</span>> =\n  keyof <span class=\"hljs-title class_\">FilterMappingsFor</span>&#x3C;<span class=\"hljs-title class_\">ThisCurrency</span>>\n</code></pre>\n<p>마지막으로, 다음과 같이 새로운 타입 Result1과 Result2를 정의하여 이를 테스트할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">Result1</span> = <span class=\"hljs-title class_\">CountryCodesFromCurrency</span>&#x3C;<span class=\"hljs-string\">\"GBP\"</span>>\ntype <span class=\"hljs-title class_\">Result2</span> = <span class=\"hljs-title class_\">CountryCodesFromCurrency</span>&#x3C;<span class=\"hljs-string\">\"NIO\"</span>>\n\n<span class=\"hljs-comment\">// 결과1: \"GB\" | \"GG\" | \"IM\" | \"JE\"</span>\n<span class=\"hljs-comment\">// 결과2: \"NI\"</span>\n</code></pre>\n<h1>추천 기사</h1>\n<h1>제휴사</h1>\n<ul>\n<li>\n<p>Figma 홈: 제 모든 프로젝트에서 사용하는 UI 디자인 도구입니다.</p>\n</li>\n<li>\n<p>Figma 프로페셔널: 필요한 모든 UI 디자인 도구가 모두 이곳에 있습니다.</p>\n</li>\n<li>\n<p>FigJam: 직관적인 다이어그램 및 브레인스토밍으로 마음을 자유롭게 펼쳐보세요.</p>\n</li>\n<li>\n<p>Notion: 제 인생 전체를 조직하는 데 사용하는 도구입니다.</p>\n</li>\n<li>\n<p>Notion AI: ChatGPT를 능가하는 AI 도구로 Notion 작업을 최적화해줍니다.</p>\n</li>\n</ul>\n<h1>참고문헌</h1>\n<ul>\n<li>TypeScript Mapped Types 문서</li>\n<li>country-to-currency package</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}