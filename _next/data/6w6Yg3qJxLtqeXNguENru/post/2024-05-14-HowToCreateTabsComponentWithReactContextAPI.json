{"pageProps":{"post":{"title":"React 와 Context API를 활용하여 탭 컴포넌트를 만드는 방법","description":"","date":"2024-05-14 10:28","slug":"2024-05-14-HowToCreateTabsComponentWithReactContextAPI","content":"\n\n우리가 Medium Stats Chrome 확장 프로그램에서 사용 중인 동일한 탭 구성 요소입니다.\n\n![탭 구성 요소 이미지](/assets/img/2024-05-14-HowToCreateTabsComponentWithReactContextAPI_0.png)\n\n이 아이디어는 구성 요소 라이브러리나 서드파티 모듈 없이 재사용 가능한 컴포넌트를 만드는 것이었습니다.\n\n# 단계 1 — 컨텍스트 생성\n\n\n\n활성 탭의 인덱스는 컨텍스트에 저장되어야 합니다. 해당 인덱스 내에는 변경 함수도 저장됩니다. TabsContext.jsx 파일을 생성하세요.\n\n```js\nimport React, { createContext, useState, useContext } from 'react';\n\nconst TabsContext = createContext({});\n\nexport const TabsProvider = ({ children, defaultIndex = 0 }) => {\n  const [activeTab, setActiveTab] = useState(defaultIndex);\n\n  return (\n    <TabsContext.Provider value={{ activeTab, setActiveTab }}>\n      {children}\n    </TabsContext.Provider>\n  );\n};\n\nexport const useTabs = () => {\n  const context = useContext(TabsContext);\n  if (!context) {\n    throw new Error('useTabs must be used within a TabsProvider');\n  }\n  return context;\n};\n```\n\nTabsProvider와 가장 중요한 부분인 useTabs 훅이 준비되어 있습니다. 이를 사용하면 활성 인덱스에 액세스하고 탭을 변경할 수 있습니다.\n\n# Step 2 — styles\n\n\n\n우리는 Tailwind와 같은 스타일링 라이브러리를 사용하지 않아요. 마음대로 사용하셔도 돼요. 이 데모는 스타일에 구애받지 않아요. CSS 모듈을 사용할 거에요. styles.module.css 파일을 생성해주세요.\n\n```js\n.tabsList {\n    display: flex;\n    border-bottom: 1px solid #f2f2f2;\n}\n\n.tab {\n    padding: 10px 15px;\n    cursor: pointer;\n    border: 1px solid #f2f2f2;\n    background: #f2f2f26b;\n    border-radius: 8px 8px 0 0;\n    position: relative;\n    top: 1px;\n    color: #242424;\n}\n\n.activeTab {\n    background: #fff;\n    border-bottom: 1px solid #fff;\n}\n\n.tabPanel {\n    padding: 10px;\n    min-width: 750px;\n}\n```\n\n# 단계 3 — 탭 컴포넌트\n\n가장 중요한 부분 — 탭, 탭리스트, 탭 및 탭패널 컴포넌트를 만들 거에요. 모두 하나의 파일에 들어갈 거에요. 그들은 작아서 개발하기 편할 거에요 (개발자 경험). Tabs.jsx 파일을 생성해주세요.\n\n\n\n```js\nimport { TabsProvider, useTabs } from './TabsContext.jsx';\nimport styles from './tabs.module.css';\n\nexport const Tabs = ({ children, defaultIndex }) => {\n  return <TabsProvider defaultIndex={defaultIndex}>{children}</TabsProvider>;\n};\n\nexport const TabList = ({ children }) => {\n  return <div className={styles.tabsList}>{children}</div>;\n};\n\nexport const Tab = ({ index, children }) => {\n  const { activeTab, setActiveTab } = useTabs();\n  return (\n    <button className={`${styles.tab} ${activeTab === index ? styles.activeTab : ''}`} onClick={() => setActiveTab(index)}>\n      {children}\n    </button>\n  );\n};\n\nexport const TabPanel = ({ index, children }) => {\n  const { activeTab } = useTabs();\n  return activeTab === index ? <div className={styles.tabPanel}>{children}</div> : null;\n};\n```\n\nTabs — 탭 컨텍스트를 제공하는 빈 컨테이너입니다. 모든 하위 컴포넌트가 컨텍스트에 액세스할 수 있습니다.\n\nTabList — 클릭할 탭 목록을 보여주는 컨테이너입니다. 스타일링을 위해서만 필요합니다.\n\nTab — 탭 자체입니다. 클릭할 수 있는 버튼뿐입니다. 활성 여부를 확인하고 클릭 이벤트를 처리하여 활성 탭을 변경합니다.\n\n\n\n\nTabPanel — 탭의 내용.\n\n# 단계 4 — 마지막 단계. 탭 컴포넌트 사용법\n\n이제 필요한 곳이면 어디에서나 이 컴포넌트를 사용할 수 있습니다. 여기에 샘플이 있습니다.\n\n```js\n<Tabs>\n    <TabList>\n      <Tab index={0}>통계</Tab>\n      <Tab index={1}>도구</Tab>\n    </TabList>\n    <TabPanel index={0}>내용 1</TabPanel>\n    <TabPanel index={1}>내용 2</TabPanel>\n</Tabs>\n```\n\n\n\n결과:\n\n<img src=\"/assets/img/2024-05-14-HowToCreateTabsComponentWithReactContextAPI_1.png\" />\n\n코딩 재밌게 하세요!\n\n## ✉️ 뉴스레터 구독은 여기에서 할 수 있어요.\n\n\n\n또는\n\n이전 이야기를 읽어보세요:\n\n- 내가 처음으로 미디움에서 첫 100달러를 벌게 된 과정은? 💰💰💰","ogImage":{"url":"/assets/img/2024-05-14-HowToCreateTabsComponentWithReactContextAPI_0.png"},"coverImage":"/assets/img/2024-05-14-HowToCreateTabsComponentWithReactContextAPI_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>우리가 Medium Stats Chrome 확장 프로그램에서 사용 중인 동일한 탭 구성 요소입니다.</p>\n<p><img src=\"/assets/img/2024-05-14-HowToCreateTabsComponentWithReactContextAPI_0.png\" alt=\"탭 구성 요소 이미지\"></p>\n<p>이 아이디어는 구성 요소 라이브러리나 서드파티 모듈 없이 재사용 가능한 컴포넌트를 만드는 것이었습니다.</p>\n<h1>단계 1 — 컨텍스트 생성</h1>\n<p>활성 탭의 인덱스는 컨텍스트에 저장되어야 합니다. 해당 인덱스 내에는 변경 함수도 저장됩니다. TabsContext.jsx 파일을 생성하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { createContext, useState, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">TabsContext</span> = <span class=\"hljs-title function_\">createContext</span>({});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">TabsProvider</span> = (<span class=\"hljs-params\">{ children, defaultIndex = <span class=\"hljs-number\">0</span> }</span>) => {\n  <span class=\"hljs-keyword\">const</span> [activeTab, setActiveTab] = <span class=\"hljs-title function_\">useState</span>(defaultIndex);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TabsContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">activeTab</span>, <span class=\"hljs-attr\">setActiveTab</span> }}></span>\n      {children}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">TabsContext.Provider</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useTabs</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> context = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">TabsContext</span>);\n  <span class=\"hljs-keyword\">if</span> (!context) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">'useTabs must be used within a TabsProvider'</span>);\n  }\n  <span class=\"hljs-keyword\">return</span> context;\n};\n</code></pre>\n<p>TabsProvider와 가장 중요한 부분인 useTabs 훅이 준비되어 있습니다. 이를 사용하면 활성 인덱스에 액세스하고 탭을 변경할 수 있습니다.</p>\n<h1>Step 2 — styles</h1>\n<p>우리는 Tailwind와 같은 스타일링 라이브러리를 사용하지 않아요. 마음대로 사용하셔도 돼요. 이 데모는 스타일에 구애받지 않아요. CSS 모듈을 사용할 거에요. styles.module.css 파일을 생성해주세요.</p>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">tabsList</span> {\n    <span class=\"hljs-attr\">display</span>: flex;\n    border-<span class=\"hljs-attr\">bottom</span>: 1px solid #f2f2f2;\n}\n\n.<span class=\"hljs-property\">tab</span> {\n    <span class=\"hljs-attr\">padding</span>: 10px 15px;\n    <span class=\"hljs-attr\">cursor</span>: pointer;\n    <span class=\"hljs-attr\">border</span>: 1px solid #f2f2f2;\n    <span class=\"hljs-attr\">background</span>: #f2f2f26b;\n    border-<span class=\"hljs-attr\">radius</span>: 8px 8px <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attr\">position</span>: relative;\n    <span class=\"hljs-attr\">top</span>: 1px;\n    <span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">242424</span>;\n}\n\n.<span class=\"hljs-property\">activeTab</span> {\n    <span class=\"hljs-attr\">background</span>: #fff;\n    border-<span class=\"hljs-attr\">bottom</span>: 1px solid #fff;\n}\n\n.<span class=\"hljs-property\">tabPanel</span> {\n    <span class=\"hljs-attr\">padding</span>: 10px;\n    min-<span class=\"hljs-attr\">width</span>: 750px;\n}\n</code></pre>\n<h1>단계 3 — 탭 컴포넌트</h1>\n<p>가장 중요한 부분 — 탭, 탭리스트, 탭 및 탭패널 컴포넌트를 만들 거에요. 모두 하나의 파일에 들어갈 거에요. 그들은 작아서 개발하기 편할 거에요 (개발자 경험). Tabs.jsx 파일을 생성해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TabsProvider</span>, useTabs } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./TabsContext.jsx'</span>;\n<span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./tabs.module.css'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Tabs</span> = (<span class=\"hljs-params\">{ children, defaultIndex }</span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TabsProvider</span> <span class=\"hljs-attr\">defaultIndex</span>=<span class=\"hljs-string\">{defaultIndex}</span>></span>{children}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">TabsProvider</span>></span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">TabList</span> = (<span class=\"hljs-params\">{ children }</span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.tabsList}</span>></span>{children}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Tab</span> = (<span class=\"hljs-params\">{ index, children }</span>) => {\n  <span class=\"hljs-keyword\">const</span> { activeTab, setActiveTab } = <span class=\"hljs-title function_\">useTabs</span>();\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`${<span class=\"hljs-attr\">styles.tab</span>} ${<span class=\"hljs-attr\">activeTab</span> === <span class=\"hljs-string\">index</span> ? <span class=\"hljs-attr\">styles.activeTab</span> <span class=\"hljs-attr\">:</span> ''}`} <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setActiveTab(index)}>\n      {children}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">TabPanel</span> = (<span class=\"hljs-params\">{ index, children }</span>) => {\n  <span class=\"hljs-keyword\">const</span> { activeTab } = <span class=\"hljs-title function_\">useTabs</span>();\n  <span class=\"hljs-keyword\">return</span> activeTab === index ? <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.tabPanel}</span>></span>{children}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span> : <span class=\"hljs-literal\">null</span>;\n};\n</code></pre>\n<p>Tabs — 탭 컨텍스트를 제공하는 빈 컨테이너입니다. 모든 하위 컴포넌트가 컨텍스트에 액세스할 수 있습니다.</p>\n<p>TabList — 클릭할 탭 목록을 보여주는 컨테이너입니다. 스타일링을 위해서만 필요합니다.</p>\n<p>Tab — 탭 자체입니다. 클릭할 수 있는 버튼뿐입니다. 활성 여부를 확인하고 클릭 이벤트를 처리하여 활성 탭을 변경합니다.</p>\n<p>TabPanel — 탭의 내용.</p>\n<h1>단계 4 — 마지막 단계. 탭 컴포넌트 사용법</h1>\n<p>이제 필요한 곳이면 어디에서나 이 컴포넌트를 사용할 수 있습니다. 여기에 샘플이 있습니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;<span class=\"hljs-title class_\">Tabs</span>>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TabList</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Tab</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">{0}</span>></span>통계<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Tab</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Tab</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">{1}</span>></span>도구<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Tab</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">TabList</span>></span></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TabPanel</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">{0}</span>></span>내용 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">TabPanel</span>></span></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TabPanel</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">{1}</span>></span>내용 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">TabPanel</span>></span></span>\n&#x3C;/<span class=\"hljs-title class_\">Tabs</span>>\n</code></pre>\n<p>결과:</p>\n<p>코딩 재밌게 하세요!</p>\n<h2>✉️ 뉴스레터 구독은 여기에서 할 수 있어요.</h2>\n<p>또는</p>\n<p>이전 이야기를 읽어보세요:</p>\n<ul>\n<li>내가 처음으로 미디움에서 첫 100달러를 벌게 된 과정은? 💰💰💰</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}