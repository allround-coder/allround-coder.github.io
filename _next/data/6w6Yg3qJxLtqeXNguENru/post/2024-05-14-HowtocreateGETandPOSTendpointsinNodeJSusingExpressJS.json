{"pageProps":{"post":{"title":"NodeJS에서 ExpressJS를 사용하여 GET 및 POST 엔드포인트를 만드는 방법","description":"","date":"2024-05-14 15:00","slug":"2024-05-14-HowtocreateGETandPOSTendpointsinNodeJSusingExpressJS","content":"\n\n<img src=\"/assets/img/2024-05-14-HowtocreateGETandPOSTendpointsinNodeJSusingExpressJS_0.png\" />\n\nGET 및 POST 엔드포인트는 REST API에서 가장 일반적인 엔드포인트 중 두 가지입니다. GET 엔드포인트를 사용하면 클라이언트가 서버에서 데이터를 검색할 수 있고, POST 엔드포인트를 사용하면 클라이언트가 서버로 데이터를 보낼 수 있습니다. 여기에서는 NodeJS와 ExpressJS를 사용하여 필수 GET 및 POST 엔드포인트를 만드는 방법을 보여드릴 거에요.\n\n# GET 엔드포인트 생성\n\nGET 엔드포인트를 만들려면 app.get() 메서드를 사용할 수 있어요. 이 메서드는 두 개의 매개변수를 가지는데, 첫 번째는 엔드포인트의 경로이고, 두 번째는 클라이언트가 엔드포인트에 GET 요청을 할 때마다 실행될 콜백 함수입니다.\n\n\n\n다음은 /users-list 경로에 GET 엔드포인트를 만드는 방법의 예시입니다:\n\n```js\nconst express = require('express');\n\nconst app = express();\n\napp.get('/users-list', (req, res) => {\n  // 사용자 목록 전체를 가져옵니다\n  const usersList = [];\n\n  // 사용자 목록을 클라이언트에 응답으로 전송합니다\n  res.send(usersList);\n});\n```\n\n다음은 위에서 만든 엔드포인트를 사용하여 GET 요청을 보내는 방법의 예시입니다:\n\n```js\nconst fetch = require('fetch');\n\nfetch('http://localhost:3000/users-list')\n  .then(response => response.json())\n  .then(usersList => {\n    console.log(usersList.data);\n    // 응답으로 수행하려는 동작을 작성합니다\n  })\n  .catch(error => {\n    console.log(error);\n    // 요청이 성공적이지 않을 때의 오류를 처리합니다\n  });\n```\n\n\n\n만일 이 엔드포인트를 테스트하고 싶다면, Postman에서 다음 단계를 따르세요:\n\n- Postman을 열고 새 요청을 생성하세요.\n- HTTP 메소드를 GET으로 설정하세요.\n- URL을 http://localhost:3000/users-list로 설정하세요.\n- 보내기 버튼을 클릭하여 요청을 보내세요.\n\n가끔은 GET 요청과 함께 쿼리 매개변수를 보내야 할 때가 있습니다. 여기에 간단한 코드 조각이 있습니다:\n\n```js\nconst express = require('express');\nconst app = express();\napp.get('/users-list/:id', (req, res) => {\n  const id = req.params.id;\n  // 데이터베이스에서 사용자 데이터 가져오기\n  const user = {\n    id: 1,\n    name: 'John Doe',\n  };\n  // 클라이언트에 응답 보내기\n  res.send({\n    user: user,\n  });\n});\n```\n\n\n\n# POST 엔드포인트 생성하기\n\nPOST 엔드포인트를 만들려면 app.post() 메소드를 사용할 수 있어요. 이 함수는 app.get() 메소드와 유사하게 두 개의 매개변수를 사용해요. 하지만 여기서는 콜백 함수에서 요청 바디인 즉, 클라이언트가 요청할 때 보내는 데이터에 접근할 수 있어요. 이 엔드포인트를 사용하여 새로운 사용자를 만들 수 있어요.\n\n다음은 /users-list 경로에 POST 엔드포인트를 만드는 예시에요:\n\n```js\nconst express = require('express');\n\nconst app = express();\n\napp.post('/users-list', (req, res) => {\n  const usersList = req.body;\n\n  // 클라이언트가 보낸 사용자 데이터를 저장해요\n\n  // 요청이 성공적이었음을 보여주는 응답을 클라이언트에게 보내요\n  res.send({\n    message: '새 사용자가 목록에 추가되었어요',\n  });\n});\n```\n\n\n\n위에서 만든 엔드포인트를 사용하여 POST 요청을 보내는 예시입니다:\n\n```js\nconst fetch = require('fetch');\n\nconst user = {\n  name: \"John Doe\",\n  email: \"john.doe@example.com\"\n};\n\nfetch('http://localhost:3000/users-list', {\n  method: 'POST',\n  body: JSON.stringify(user)\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.log(error);\n});\n```\n\n아래는 이 엔드포인트를 Postman에서 테스트하는 방법에 대한 단계입니다:\n\n- Postman을 열고 새 요청을 작성합니다.\n- HTTP 메서드를 POST로 설정합니다.\n- URL을 http://localhost:3000/users-list로 설정합니다.\n- Body 탭에서 content-type 헤더를 application/json로 설정합니다.\n- 그런 다음 보내고 싶은 JSON 데이터를 본문 탭에 붙여넣습니다.\n- Send 버튼을 클릭하여 요청을 보냅니다.\n\n\n\n위에 제시된 예시들은 매우 기본적이고 데모 목적으로 제공되었어요. 그러나 당신의 요구에 따라 더 복잡한 엔드포인트를 생성하기 위해 같은 단계를 따를 수 있어요.\n\n아래는 엔드포인트를 생성하는 동안 고려할 수 있는 몇 가지 추가 팁이에요:\n\n- 개발자가 실제로 엔드포인트가 무엇을 하는지 이해하는 데 도움이 되는 설명적인 엔드포인트 경로를 사용하세요.\n- POST 엔드포인트의 요청 본문을 유효성 검사할 수도 있어요. 이것은 받는 데이터가 올바른 형식에 있는지 확인하는 추가적인 검사층 역할을 해요.\n- 가능하다면 팀 내 다른 개발자에게 쉽게 엔드포인트를 설명할 수 있는 철저한 문서를 유지하는 것이 좋아요.\n\n위의 정보가 도움이 되었기를 바래요. 읽어주셔서 감사해요. 질문, 의견 또는 관심사가 있으면 아래에 댓글을 남겨주세요.","ogImage":{"url":"/assets/img/2024-05-14-HowtocreateGETandPOSTendpointsinNodeJSusingExpressJS_0.png"},"coverImage":"/assets/img/2024-05-14-HowtocreateGETandPOSTendpointsinNodeJSusingExpressJS_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>GET 및 POST 엔드포인트는 REST API에서 가장 일반적인 엔드포인트 중 두 가지입니다. GET 엔드포인트를 사용하면 클라이언트가 서버에서 데이터를 검색할 수 있고, POST 엔드포인트를 사용하면 클라이언트가 서버로 데이터를 보낼 수 있습니다. 여기에서는 NodeJS와 ExpressJS를 사용하여 필수 GET 및 POST 엔드포인트를 만드는 방법을 보여드릴 거에요.</p>\n<h1>GET 엔드포인트 생성</h1>\n<p>GET 엔드포인트를 만들려면 app.get() 메서드를 사용할 수 있어요. 이 메서드는 두 개의 매개변수를 가지는데, 첫 번째는 엔드포인트의 경로이고, 두 번째는 클라이언트가 엔드포인트에 GET 요청을 할 때마다 실행될 콜백 함수입니다.</p>\n<p>다음은 /users-list 경로에 GET 엔드포인트를 만드는 방법의 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/users-list'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n  <span class=\"hljs-comment\">// 사용자 목록 전체를 가져옵니다</span>\n  <span class=\"hljs-keyword\">const</span> usersList = [];\n\n  <span class=\"hljs-comment\">// 사용자 목록을 클라이언트에 응답으로 전송합니다</span>\n  res.<span class=\"hljs-title function_\">send</span>(usersList);\n});\n</code></pre>\n<p>다음은 위에서 만든 엔드포인트를 사용하여 GET 요청을 보내는 방법의 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> fetch = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fetch'</span>);\n\n<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'http://localhost:3000/users-list'</span>)\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =></span> response.<span class=\"hljs-title function_\">json</span>())\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">usersList</span> =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(usersList.<span class=\"hljs-property\">data</span>);\n    <span class=\"hljs-comment\">// 응답으로 수행하려는 동작을 작성합니다</span>\n  })\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);\n    <span class=\"hljs-comment\">// 요청이 성공적이지 않을 때의 오류를 처리합니다</span>\n  });\n</code></pre>\n<p>만일 이 엔드포인트를 테스트하고 싶다면, Postman에서 다음 단계를 따르세요:</p>\n<ul>\n<li>Postman을 열고 새 요청을 생성하세요.</li>\n<li>HTTP 메소드를 GET으로 설정하세요.</li>\n<li>URL을 <a href=\"http://localhost:3000/users-list%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000/users-list로</a> 설정하세요.</li>\n<li>보내기 버튼을 클릭하여 요청을 보내세요.</li>\n</ul>\n<p>가끔은 GET 요청과 함께 쿼리 매개변수를 보내야 할 때가 있습니다. 여기에 간단한 코드 조각이 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/users-list/:id'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> id = req.<span class=\"hljs-property\">params</span>.<span class=\"hljs-property\">id</span>;\n  <span class=\"hljs-comment\">// 데이터베이스에서 사용자 데이터 가져오기</span>\n  <span class=\"hljs-keyword\">const</span> user = {\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'John Doe'</span>,\n  };\n  <span class=\"hljs-comment\">// 클라이언트에 응답 보내기</span>\n  res.<span class=\"hljs-title function_\">send</span>({\n    <span class=\"hljs-attr\">user</span>: user,\n  });\n});\n</code></pre>\n<h1>POST 엔드포인트 생성하기</h1>\n<p>POST 엔드포인트를 만들려면 app.post() 메소드를 사용할 수 있어요. 이 함수는 app.get() 메소드와 유사하게 두 개의 매개변수를 사용해요. 하지만 여기서는 콜백 함수에서 요청 바디인 즉, 클라이언트가 요청할 때 보내는 데이터에 접근할 수 있어요. 이 엔드포인트를 사용하여 새로운 사용자를 만들 수 있어요.</p>\n<p>다음은 /users-list 경로에 POST 엔드포인트를 만드는 예시에요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/users-list'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> usersList = req.<span class=\"hljs-property\">body</span>;\n\n  <span class=\"hljs-comment\">// 클라이언트가 보낸 사용자 데이터를 저장해요</span>\n\n  <span class=\"hljs-comment\">// 요청이 성공적이었음을 보여주는 응답을 클라이언트에게 보내요</span>\n  res.<span class=\"hljs-title function_\">send</span>({\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'새 사용자가 목록에 추가되었어요'</span>,\n  });\n});\n</code></pre>\n<p>위에서 만든 엔드포인트를 사용하여 POST 요청을 보내는 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> fetch = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fetch'</span>);\n\n<span class=\"hljs-keyword\">const</span> user = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John Doe\"</span>,\n  <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"john.doe@example.com\"</span>\n};\n\n<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'http://localhost:3000/users-list'</span>, {\n  <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(user)\n})\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(response.<span class=\"hljs-property\">data</span>);\n  })\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);\n});\n</code></pre>\n<p>아래는 이 엔드포인트를 Postman에서 테스트하는 방법에 대한 단계입니다:</p>\n<ul>\n<li>Postman을 열고 새 요청을 작성합니다.</li>\n<li>HTTP 메서드를 POST로 설정합니다.</li>\n<li>URL을 <a href=\"http://localhost:3000/users-list%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000/users-list로</a> 설정합니다.</li>\n<li>Body 탭에서 content-type 헤더를 application/json로 설정합니다.</li>\n<li>그런 다음 보내고 싶은 JSON 데이터를 본문 탭에 붙여넣습니다.</li>\n<li>Send 버튼을 클릭하여 요청을 보냅니다.</li>\n</ul>\n<p>위에 제시된 예시들은 매우 기본적이고 데모 목적으로 제공되었어요. 그러나 당신의 요구에 따라 더 복잡한 엔드포인트를 생성하기 위해 같은 단계를 따를 수 있어요.</p>\n<p>아래는 엔드포인트를 생성하는 동안 고려할 수 있는 몇 가지 추가 팁이에요:</p>\n<ul>\n<li>개발자가 실제로 엔드포인트가 무엇을 하는지 이해하는 데 도움이 되는 설명적인 엔드포인트 경로를 사용하세요.</li>\n<li>POST 엔드포인트의 요청 본문을 유효성 검사할 수도 있어요. 이것은 받는 데이터가 올바른 형식에 있는지 확인하는 추가적인 검사층 역할을 해요.</li>\n<li>가능하다면 팀 내 다른 개발자에게 쉽게 엔드포인트를 설명할 수 있는 철저한 문서를 유지하는 것이 좋아요.</li>\n</ul>\n<p>위의 정보가 도움이 되었기를 바래요. 읽어주셔서 감사해요. 질문, 의견 또는 관심사가 있으면 아래에 댓글을 남겨주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}