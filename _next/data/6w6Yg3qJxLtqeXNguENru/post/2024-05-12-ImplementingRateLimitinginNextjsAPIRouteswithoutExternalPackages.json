{"pageProps":{"post":{"title":"Nextjs API Routes에서 외부 패키지 없이 요청 속도 제한 설정하기","description":"","date":"2024-05-12 18:52","slug":"2024-05-12-ImplementingRateLimitinginNextjsAPIRouteswithoutExternalPackages","content":"\n\n---\n이미지: /assets/img/2024-05-12-ImplementingRateLimitinginNextjsAPIRouteswithoutExternalPackages_0.png\n\n속도 제한은 서버의 트래픽을 관리하고 과부하를 방지하며 악용으로부터 보호하는 중요한 측면입니다. Next.js API 라우트에 속도 제한을 구현하기 위한 패키지들이 있지만 외부 의존성에 의존하지 않고 이를 어떻게 달성할지 살펴보겠습니다. \"고정 창 카운터\" 접근 방식을 활용할 것인데, 이 방식은 특정 시간 간격 내에 발신자로부터 발생하는 요청 수를 기록합니다. 요청 수가 제한을 초과하면 해당 발신자로부터의 추가 요청은 거부됩니다.\n\n# 속도 제한 미들웨어 구축하기\n\nAPI 라우트를 위한 게이트키퍼로 작동하는 미들웨어 함수를 만들어봅시다. 이 함수는 단일 IP 주소가 지정된 시간 창 내에서 설정한 요청 제한을 초과하지 않도록 보장하여 서버의 안정성과 성능을 향상시킵니다.\n\n\n\n\n앱 루트 디렉토리에 \"middleware\"라는 폴더를 만들고, 다음 코드가 포함된 \"rateLimiter.js\" 파일을 추가해주세요:\n\n이제 레이트 제한을 구현하는 코드를 자세히 살펴보겠습니다:\n\n```js\nconst rateLimitMap = new Map();\n\nexport default function rateLimitMiddleware(handler) {\n    return (req, res) => {\n        const ip = req.headers[\"x-forwarded-for\"] || req.connection.remoteAddress;\n        const limit = 5; // IP 당 분당 요청 수를 5개로 제한\n        const windowMs = 60 * 1000; // 1분\n        \n        if (!rateLimitMap.has(ip)) {\n            rateLimitMap.set(ip, {\n                count: 0,\n                lastReset: Date.now(),\n            });\n        }\n        \n        const ipData = rateLimitMap.get(ip);\n        \n        if (Date.now() - ipData.lastReset > windowMs) {\n            ipData.count = 0;\n            ipData.lastReset = Date.now();\n        }\n        \n        if (ipData.count >= limit) {\n            return res.status(429).send(\"너무 많은 요청\");\n        }\n        \n        ipData.count += 1;\n        \n        return handler(req, res);\n    };\n}\n```\n\n# 구현\n\n\n\n자, 이제 이 코드를 API 경로에 통합해 봅시다:\n\n\"limited.js\"라는 경로를 생성하고 rateLimitMiddleware를 적용하세요. IP 주소가 제한을 초과하면 \"너무 많은 요청\" 상태 코드 (429)로 응답합니다.\n\n```js\nimport rateLimitMiddleware from \"@/middleware/rateLimiter\";\n\nfunction handler(req, res) {\n  res.status(200).json({ name: \"Limited, don't over use me!\" });\n}\nexport default rateLimitMiddleware(handler);\n```\n\n# 결론\n\n\n\n이 문서에서는 외부 패키지에 의존하지 않고 Next.js API 라우트에서 요금 제한을 구현하는 방법을 살펴보았습니다. \"고정 창 카운터\" 방식을 활용하여 들어오는 요청을 효과적으로 관리하여 과부하를 방지하고 서버의 원활한 작동을 보장할 수 있습니다. 이 사용자 정의 솔루션은 특정 요구 사항에 맞게 유연하고 맞춤 설정할 수 있습니다. 그러니 안심하고 요금 제한을 Next.js 프로젝트에 통합하여 서버를 건강하고 반응적으로 유지하세요!\n\n유용한 자원 코딩 도전\n\n내 GitHub 저장소에서 전체 코드에 액세스해보세요.","ogImage":{"url":"/assets/img/2024-05-12-ImplementingRateLimitinginNextjsAPIRouteswithoutExternalPackages_0.png"},"coverImage":"/assets/img/2024-05-12-ImplementingRateLimitinginNextjsAPIRouteswithoutExternalPackages_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<hr>\n<p>이미지: /assets/img/2024-05-12-ImplementingRateLimitinginNextjsAPIRouteswithoutExternalPackages_0.png</p>\n<p>속도 제한은 서버의 트래픽을 관리하고 과부하를 방지하며 악용으로부터 보호하는 중요한 측면입니다. Next.js API 라우트에 속도 제한을 구현하기 위한 패키지들이 있지만 외부 의존성에 의존하지 않고 이를 어떻게 달성할지 살펴보겠습니다. \"고정 창 카운터\" 접근 방식을 활용할 것인데, 이 방식은 특정 시간 간격 내에 발신자로부터 발생하는 요청 수를 기록합니다. 요청 수가 제한을 초과하면 해당 발신자로부터의 추가 요청은 거부됩니다.</p>\n<h1>속도 제한 미들웨어 구축하기</h1>\n<p>API 라우트를 위한 게이트키퍼로 작동하는 미들웨어 함수를 만들어봅시다. 이 함수는 단일 IP 주소가 지정된 시간 창 내에서 설정한 요청 제한을 초과하지 않도록 보장하여 서버의 안정성과 성능을 향상시킵니다.</p>\n<p>앱 루트 디렉토리에 \"middleware\"라는 폴더를 만들고, 다음 코드가 포함된 \"rateLimiter.js\" 파일을 추가해주세요:</p>\n<p>이제 레이트 제한을 구현하는 코드를 자세히 살펴보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> rateLimitMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">rateLimitMiddleware</span>(<span class=\"hljs-params\">handler</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n        <span class=\"hljs-keyword\">const</span> ip = req.<span class=\"hljs-property\">headers</span>[<span class=\"hljs-string\">\"x-forwarded-for\"</span>] || req.<span class=\"hljs-property\">connection</span>.<span class=\"hljs-property\">remoteAddress</span>;\n        <span class=\"hljs-keyword\">const</span> limit = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// IP 당 분당 요청 수를 5개로 제한</span>\n        <span class=\"hljs-keyword\">const</span> windowMs = <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>; <span class=\"hljs-comment\">// 1분</span>\n        \n        <span class=\"hljs-keyword\">if</span> (!rateLimitMap.<span class=\"hljs-title function_\">has</span>(ip)) {\n            rateLimitMap.<span class=\"hljs-title function_\">set</span>(ip, {\n                <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,\n                <span class=\"hljs-attr\">lastReset</span>: <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>(),\n            });\n        }\n        \n        <span class=\"hljs-keyword\">const</span> ipData = rateLimitMap.<span class=\"hljs-title function_\">get</span>(ip);\n        \n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>() - ipData.<span class=\"hljs-property\">lastReset</span> > windowMs) {\n            ipData.<span class=\"hljs-property\">count</span> = <span class=\"hljs-number\">0</span>;\n            ipData.<span class=\"hljs-property\">lastReset</span> = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();\n        }\n        \n        <span class=\"hljs-keyword\">if</span> (ipData.<span class=\"hljs-property\">count</span> >= limit) {\n            <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">429</span>).<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">\"너무 많은 요청\"</span>);\n        }\n        \n        ipData.<span class=\"hljs-property\">count</span> += <span class=\"hljs-number\">1</span>;\n        \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">handler</span>(req, res);\n    };\n}\n</code></pre>\n<h1>구현</h1>\n<p>자, 이제 이 코드를 API 경로에 통합해 봅시다:</p>\n<p>\"limited.js\"라는 경로를 생성하고 rateLimitMiddleware를 적용하세요. IP 주소가 제한을 초과하면 \"너무 많은 요청\" 상태 코드 (429)로 응답합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> rateLimitMiddleware <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/middleware/rateLimiter\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\">req, res</span>) {\n  res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Limited, don't over use me!\"</span> });\n}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">rateLimitMiddleware</span>(handler);\n</code></pre>\n<h1>결론</h1>\n<p>이 문서에서는 외부 패키지에 의존하지 않고 Next.js API 라우트에서 요금 제한을 구현하는 방법을 살펴보았습니다. \"고정 창 카운터\" 방식을 활용하여 들어오는 요청을 효과적으로 관리하여 과부하를 방지하고 서버의 원활한 작동을 보장할 수 있습니다. 이 사용자 정의 솔루션은 특정 요구 사항에 맞게 유연하고 맞춤 설정할 수 있습니다. 그러니 안심하고 요금 제한을 Next.js 프로젝트에 통합하여 서버를 건강하고 반응적으로 유지하세요!</p>\n<p>유용한 자원 코딩 도전</p>\n<p>내 GitHub 저장소에서 전체 코드에 액세스해보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}