{"pageProps":{"post":{"title":"Angular Routes반쯤 타입 지정하는 간단한 꿀팁","description":"","date":"2024-05-14 12:31","slug":"2024-05-14-SimpleTrickToMakeYourAngularRoutesSemiTyped","content":"\n\n```\n![Simple Trick To Make Your Angular Routes Semi-Typed](/assets/img/2024-05-14-SimpleTrickToMakeYourAngularRoutesSemiTyped_0.png)\n\n링크나 버튼 요소의 [routerLink] 지시문이 하드 코딩된 값을 입력받는 프로젝트를 많이 본 적이 있습니다. 예를 들어:\n\n```js\n<a [routerLink]=\"['/movies', movie.id, 'edit']\"> 영화 편집 </a>\n```\n\n만약 언젠가 movie를 film으로, edit을 update로 변경하고 싶을 때 링크가 깨지는 경우가 발생할 수 있습니다. 그래서 저는 이에 대한 일종의 방어선으로 작동하는 작은 꼼수를 고안해보았습니다.\n\n\n\n\n## 단계 1: 라우트 정의하기\n\n우리가 몇 개의 인증 관련 라우트들 중 일부를 가지고 있다고 가정해봅시다. auth.routes.ts 파일을 만들고 먼저 타입 또는 인터페이스를 생성할 것입니다:\n\n```js\nexport type AuthRoutes = {\n    login: Route\n    register: Route\n    verifyEmail: Route\n}\n```\n\n이제 인터페이스에 따라 라우트를 선언해보겠습니다:\n\n\n\n```js\nexport const authRoutes: AuthRoutes = {\n    login: {\n        path: 'login',\n        loadComponent: () => import('./login.component')\n            .then((m) => m.LoginComponent),\n    },\n    register: {\n        path: 'register',\n        loadComponent: () => import('./register.component')\n            .then((m) => RegisterComponent),\n    },\n    verifyEmail: {\n        path: 'verify-email/:token',\n        loadComponent: () => import('./verify-email.component')\n            .then((m) => m.VerifyEmailComponent),\n    },\n}\n```\n\n동일한 방식으로, 편의에 맞게 다른 세분화된 route 파일을 만들어보세요.\n\n```js\nexport type MovieRoutes = {\n    movieByActor: Route\n}\n\nexport const movieRoutes: MovieRoutes = {\n    movieByActor: {\n        path: 'dashboard/actors/:actorId/movies/:movieId',\n        loadComponent: import('./movie-details.component')\n            .then(m => m.MovieDetailsComponent),\n    }\n}\n```\n\n또한 not-found-page.route.ts에 다음과 같은 캐치-올 route를 만들어봅시다:```\n\n\n\n```js\nexport type NotFoundPageRoutes = {\n    index: Route\n}\n\nexport const notFoundPageRoutes: NotFoundPageRoutes = {\n    index: {\n        path: '**',\n        loadComponent: () => import('./not-found.page'),\n    },\n}\n```\n\n## 스텝 2: 라우트 등록하기\n\n앱 라우트 파일인 app.routes.ts로 돌아가거나 애플리케이션 라우트를 정의한 곳으로 이동하세요. 모든 그룹화된 라우트를 여기로 가져와주세요:\n\n```js\ntype GroupedRoutes = [\n    HomeRoutes,\n    AuthRoutes,\n    MovieRoutes,\n    // 모든 것을 수용하는 라우트는 마지막에 위치해야 합니다\n    NotFoundPageRoutes,\n]\n\nconst groupedRoutes: GroupedRoutes = [\n    homeRoutes,\n    authRoutes,\n    movieRoutes,\n    notFoundPageRoutes,\n]\n```\n\n\n\n우리의 루트는 객체 안에 있기 때문에 펼쳐주어야 해요:\n\n```js\nconst flattenedRoutes: Route[] = []\nfor (const routeGroup of groupedRoutes) {\n    for (const route of Object.values(routeGroup)) {\n        flattenedRoutes.push(route)\n    }\n}\n\nexport const AppRoutes = flattenedRoutes\n```\n\n앱 설정에 라우트를 등록해주세요 (일반적으로 app.config.ts 또는 main.ts 파일에 위치합니다):\n\n```js\nimport { ApplicationConfig, importProvidersFrom } from '@angular/core'\n// ... 다른 import들\n\nexport const appConfig: ApplicationConfig = {\n    providers: [\n        // ... 다른 프로바이더들\n        provideRouter(\n\n        \tAppRoutes, // <-- 여기에 펼쳐진 라우트를 import 해요\n\n        ),\n    ],\n}\n```\n\n\n\n## 단계 3: 사용하기\n\n이 시점에서 우리의 솔루션이 준비되었습니다. 테스트 컴포넌트에서의 사용 예시:\n\n```js\nimport { authRoutes, AuthRoutes } from 'src/pages/auth/auth.routes.ts';\n\n@Component({\n    selector: 'app-test',\n    standalone: true,\n    imports: [CommonModule, RouterModule],\n    template: `\n      <a\n        routerLink=\"{ '/' + authRoutes.login.path }\"\n      >\n        로그인\n      </a>\n          \n      <a \n        routerLink=\"{ '/' + authRoutes.register.path }\"\n      >\n        회원 가입\n      </a>\n  \n      <!-- 경로 매개 변수 대체 -->\n      <a \n        routerLink=\"{ \n          '/' + authRoutes.verifyEmail.path.replace(':token', token) \n        }\">\n          이메일 확인\n      </a>\n\n      <!-- 컨트롤러 클래스 내에서 사용 -->\n      <button (click)=\"goToMoviesHome()\">\n        내 대시보드\n      </button>\n      \n      <button (click)=\"goToMovie(actorId, movieId)\">\n        영화 상세 정보 보기\n      </button>\n    `,\n    styleUrl: './test.component.scss',\n})\nexport class TestComponent {\n    readonly authRoutes: AuthRoutes = authRoutes\n    \n    token = 'abcd1234'\n    movieId = '2'\n    actorId = '1'\n    \n    goToMoviesHome() {\n      this.router.navigateByUrl('/' + this.movieRoutes.index.path)\n    }\n\n    goToMovie(actorId: string, movieId: string) {\n      this.router.navigateByUrl('/' + \n        this.movieRoutes.movieByActor\n          .replace(':actorId', this.actorId)\n          .replace(':movieId', this.movieId)\n      )\n    }\n}\n```\n\n이제 경로가 원치 않는 링크 차단에 대한 정도로 더 안전합니다. 한 곳에서 경로 값을 변경하면 모든 링크가 그에 맞게 업데이트됩니다.\n\n\n\n# 친절한 영어로 🚀\n\nIn Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 다음에 가시기 전에:\n\n- 반드시 글쓴이를 클랩하고 팔로우해 주세요 👏\n- 저희를 팔로우해 주세요: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼에서도 만나보세요: Stackademic | CoFeed | Venture | Cubed\n- PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요","ogImage":{"url":"/assets/img/2024-05-14-SimpleTrickToMakeYourAngularRoutesSemiTyped_0.png"},"coverImage":"/assets/img/2024-05-14-SimpleTrickToMakeYourAngularRoutesSemiTyped_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<pre><code>![Simple Trick To Make Your Angular Routes Semi-Typed](/assets/img/2024-05-14-SimpleTrickToMakeYourAngularRoutesSemiTyped_0.png)\n\n링크나 버튼 요소의 [routerLink] 지시문이 하드 코딩된 값을 입력받는 프로젝트를 많이 본 적이 있습니다. 예를 들어:\n\n```js\n&#x3C;a [routerLink]=\"['/movies', movie.id, 'edit']\"> 영화 편집 &#x3C;/a>\n</code></pre>\n<p>만약 언젠가 movie를 film으로, edit을 update로 변경하고 싶을 때 링크가 깨지는 경우가 발생할 수 있습니다. 그래서 저는 이에 대한 일종의 방어선으로 작동하는 작은 꼼수를 고안해보았습니다.</p>\n<h2>단계 1: 라우트 정의하기</h2>\n<p>우리가 몇 개의 인증 관련 라우트들 중 일부를 가지고 있다고 가정해봅시다. auth.routes.ts 파일을 만들고 먼저 타입 또는 인터페이스를 생성할 것입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> type <span class=\"hljs-title class_\">AuthRoutes</span> = {\n    <span class=\"hljs-attr\">login</span>: <span class=\"hljs-title class_\">Route</span>\n    <span class=\"hljs-attr\">register</span>: <span class=\"hljs-title class_\">Route</span>\n    <span class=\"hljs-attr\">verifyEmail</span>: <span class=\"hljs-title class_\">Route</span>\n}\n</code></pre>\n<p>이제 인터페이스에 따라 라우트를 선언해보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">authRoutes</span>: <span class=\"hljs-title class_\">AuthRoutes</span> = {\n    <span class=\"hljs-attr\">login</span>: {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'login'</span>,\n        <span class=\"hljs-attr\">loadComponent</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./login.component'</span>)\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">m</span>) =></span> m.<span class=\"hljs-property\">LoginComponent</span>),\n    },\n    <span class=\"hljs-attr\">register</span>: {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'register'</span>,\n        <span class=\"hljs-attr\">loadComponent</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./register.component'</span>)\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">m</span>) =></span> <span class=\"hljs-title class_\">RegisterComponent</span>),\n    },\n    <span class=\"hljs-attr\">verifyEmail</span>: {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'verify-email/:token'</span>,\n        <span class=\"hljs-attr\">loadComponent</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./verify-email.component'</span>)\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">m</span>) =></span> m.<span class=\"hljs-property\">VerifyEmailComponent</span>),\n    },\n}\n</code></pre>\n<p>동일한 방식으로, 편의에 맞게 다른 세분화된 route 파일을 만들어보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> type <span class=\"hljs-title class_\">MovieRoutes</span> = {\n    <span class=\"hljs-attr\">movieByActor</span>: <span class=\"hljs-title class_\">Route</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">movieRoutes</span>: <span class=\"hljs-title class_\">MovieRoutes</span> = {\n    <span class=\"hljs-attr\">movieByActor</span>: {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'dashboard/actors/:actorId/movies/:movieId'</span>,\n        <span class=\"hljs-attr\">loadComponent</span>: <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./movie-details.component'</span>)\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =></span> m.<span class=\"hljs-property\">MovieDetailsComponent</span>),\n    }\n}\n</code></pre>\n<p>또한 not-found-page.route.ts에 다음과 같은 캐치-올 route를 만들어봅시다:```</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> type <span class=\"hljs-title class_\">NotFoundPageRoutes</span> = {\n    <span class=\"hljs-attr\">index</span>: <span class=\"hljs-title class_\">Route</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">notFoundPageRoutes</span>: <span class=\"hljs-title class_\">NotFoundPageRoutes</span> = {\n    <span class=\"hljs-attr\">index</span>: {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'**'</span>,\n        <span class=\"hljs-attr\">loadComponent</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./not-found.page'</span>),\n    },\n}\n</code></pre>\n<h2>스텝 2: 라우트 등록하기</h2>\n<p>앱 라우트 파일인 app.routes.ts로 돌아가거나 애플리케이션 라우트를 정의한 곳으로 이동하세요. 모든 그룹화된 라우트를 여기로 가져와주세요:</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">GroupedRoutes</span> = [\n    <span class=\"hljs-title class_\">HomeRoutes</span>,\n    <span class=\"hljs-title class_\">AuthRoutes</span>,\n    <span class=\"hljs-title class_\">MovieRoutes</span>,\n    <span class=\"hljs-comment\">// 모든 것을 수용하는 라우트는 마지막에 위치해야 합니다</span>\n    <span class=\"hljs-title class_\">NotFoundPageRoutes</span>,\n]\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">groupedRoutes</span>: <span class=\"hljs-title class_\">GroupedRoutes</span> = [\n    homeRoutes,\n    authRoutes,\n    movieRoutes,\n    notFoundPageRoutes,\n]\n</code></pre>\n<p>우리의 루트는 객체 안에 있기 때문에 펼쳐주어야 해요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">flattenedRoutes</span>: <span class=\"hljs-title class_\">Route</span>[] = []\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> routeGroup <span class=\"hljs-keyword\">of</span> groupedRoutes) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> route <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">values</span>(routeGroup)) {\n        flattenedRoutes.<span class=\"hljs-title function_\">push</span>(route)\n    }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">AppRoutes</span> = flattenedRoutes\n</code></pre>\n<p>앱 설정에 라우트를 등록해주세요 (일반적으로 app.config.ts 또는 main.ts 파일에 위치합니다):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApplicationConfig</span>, importProvidersFrom } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>\n<span class=\"hljs-comment\">// ... 다른 import들</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">appConfig</span>: <span class=\"hljs-title class_\">ApplicationConfig</span> = {\n    <span class=\"hljs-attr\">providers</span>: [\n        <span class=\"hljs-comment\">// ... 다른 프로바이더들</span>\n        <span class=\"hljs-title function_\">provideRouter</span>(\n\n        \t<span class=\"hljs-title class_\">AppRoutes</span>, <span class=\"hljs-comment\">// &#x3C;-- 여기에 펼쳐진 라우트를 import 해요</span>\n\n        ),\n    ],\n}\n</code></pre>\n<h2>단계 3: 사용하기</h2>\n<p>이 시점에서 우리의 솔루션이 준비되었습니다. 테스트 컴포넌트에서의 사용 예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { authRoutes, <span class=\"hljs-title class_\">AuthRoutes</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'src/pages/auth/auth.routes.ts'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n    <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-test'</span>,\n    <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">CommonModule</span>, <span class=\"hljs-title class_\">RouterModule</span>],\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n      &#x3C;a\n        routerLink=\"{ '/' + authRoutes.login.path }\"\n      >\n        로그인\n      &#x3C;/a>\n          \n      &#x3C;a \n        routerLink=\"{ '/' + authRoutes.register.path }\"\n      >\n        회원 가입\n      &#x3C;/a>\n  \n      &#x3C;!-- 경로 매개 변수 대체 -->\n      &#x3C;a \n        routerLink=\"{ \n          '/' + authRoutes.verifyEmail.path.replace(':token', token) \n        }\">\n          이메일 확인\n      &#x3C;/a>\n\n      &#x3C;!-- 컨트롤러 클래스 내에서 사용 -->\n      &#x3C;button (click)=\"goToMoviesHome()\">\n        내 대시보드\n      &#x3C;/button>\n      \n      &#x3C;button (click)=\"goToMovie(actorId, movieId)\">\n        영화 상세 정보 보기\n      &#x3C;/button>\n    `</span>,\n    <span class=\"hljs-attr\">styleUrl</span>: <span class=\"hljs-string\">'./test.component.scss'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> {\n    readonly <span class=\"hljs-attr\">authRoutes</span>: <span class=\"hljs-title class_\">AuthRoutes</span> = authRoutes\n    \n    token = <span class=\"hljs-string\">'abcd1234'</span>\n    movieId = <span class=\"hljs-string\">'2'</span>\n    actorId = <span class=\"hljs-string\">'1'</span>\n    \n    <span class=\"hljs-title function_\">goToMoviesHome</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">router</span>.<span class=\"hljs-title function_\">navigateByUrl</span>(<span class=\"hljs-string\">'/'</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">movieRoutes</span>.<span class=\"hljs-property\">index</span>.<span class=\"hljs-property\">path</span>)\n    }\n\n    <span class=\"hljs-title function_\">goToMovie</span>(<span class=\"hljs-params\">actorId: string, movieId: string</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">router</span>.<span class=\"hljs-title function_\">navigateByUrl</span>(<span class=\"hljs-string\">'/'</span> + \n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">movieRoutes</span>.<span class=\"hljs-property\">movieByActor</span>\n          .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">':actorId'</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">actorId</span>)\n          .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">':movieId'</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">movieId</span>)\n      )\n    }\n}\n</code></pre>\n<p>이제 경로가 원치 않는 링크 차단에 대한 정도로 더 안전합니다. 한 곳에서 경로 값을 변경하면 모든 링크가 그에 맞게 업데이트됩니다.</p>\n<h1>친절한 영어로 🚀</h1>\n<p>In Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 다음에 가시기 전에:</p>\n<ul>\n<li>반드시 글쓴이를 클랩하고 팔로우해 주세요 👏</li>\n<li>저희를 팔로우해 주세요: X | LinkedIn | YouTube | Discord | 뉴스레터</li>\n<li>다른 플랫폼에서도 만나보세요: Stackademic | CoFeed | Venture | Cubed</li>\n<li>PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}