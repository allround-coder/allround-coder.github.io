{"pageProps":{"post":{"title":"접근성을 고려해서 리액트 웹사이트 만드는 방법","description":"","date":"2024-05-12 19:46","slug":"2024-05-12-AccessibilityinReactjs","content":"\n주요 개념 및 접근성 사용 방법\n\n## React.js에서의 접근성(a11y)은 능력에 관계없이 모든 사람이 이해하고 상호 작용할 수 있는 사용자 인터페이스를 만드는 것입니다.\n\n이는 스크린 리더, 키보드 탐색 또는 음성 제어와 같은 보조 기술을 사용하는 사람들을 포함합니다.\n\n다음은 React에서의 접근성에 대한 주요 개념을 설명합니다:\n\n## 1. 시멘틱 HTML\n\n- 'h1' 태그는 제목에, 'button' 태그는 버튼에, 'nav' 태그는 내비게이션에 등 세맨틱 HTML 요소를 사용하여 컴포넌트를 구축하세요. 이러한 요소들은 보조 기술 및 브라우저에 의미를 전달합니다.\n\n```js\n<header> {/* 시맨틱 헤더 요소 */}\n    <h1>Main Title of the Page</h1> {/* 시맨틱 헤딩 요소 */}\n</header>\n\n<main>\n    <p>The main content of your webpage goes here</p> {/* 시멘틱 단락 요소 */}\n</main>\n\n<footer> {/* 시멘틱 푸터 요소 */}\n   <p>Copyright information and other footer related stuff</p>\n</footer>\n```\n\n## 2. ARIA 속성\n\n- 때로는 의미 있는 HTML 만으로 충분하지 않을 수도 있습니다. 보조 기술을 위한 추가 정보를 제공하려면 ARIA (접근 가능한 리치 인터넷 애플리케이션) 속성을 사용하세요. 이미지를 설명하는 데 aria-label을 사용하거나 입력 필드에 설명을 연결하는 데 aria-describedby를 사용할 수 있습니다.\n- HTML로는 원하는 기능을 달성할 수 없는 경우에는 접근성 리치 인터넷 애플리케이션(WAI-ARIA) 역할 및 속성을 사용하세요.\n\n```js\nfunction ImageWithDescription() {\n  return (\n    <div>\n    <button aria-label=\"닫기\" onClick={this.close}>\n    X\n    </button>\n    <img\n      src=\"이미지.jpg\"\n      alt=\"설명적 이미지 대체 텍스트\"  {/* 설명적 대체 텍스트 */}\n      aria-describedby=\"imageDescription\"  {/* 설명과 연결 */}\n    />\n    </div>\n  );\n}\n```\n\n## 3. 키보드 탐색\n\n- 애플리케이션이 키보드를 사용하여 완전히 탐색 가능하도록 보장하세요. 이는 사용자가 버튼, 링크 및 폼 필드와 같은 초점 가능 요소를 탭할 수 있게 하는 것을 의미합니다. onFocus 및 onBlur와 같은 이벤트 핸들러를 사용하여 초점 상태를 관리하고 시각적 단서를 제공하세요.\n\n```js\n함수 FocusableButton({ onClick }) {\n  return (\n    <button type=\"button\" onFocus={() => console.log(\"Button Focused\")} onClick={onClick}>\n      Click me\n    </button>\n  );\n}\n```\n\n## 4. 스크린 리더 지원\n\n- 컴포넌트에 대한 명확하고 간결한 텍스트 설명에 중점을 두세요. 설명적인 링크 텍스트를 사용하고 정보 전달에 색상에만 의존하지 마세요. 스크린 리더는 내용을 텍스트로 제시하기 때문에 구조화되고 이해하기 쉬운 내용임을 보장하세요.\n\n```js\n함수 ErrorMessage({ message }) {\n  return (\n    <div role=\"alert\" aria-live=\"assertive\">  {/* 에러를 발표함 */}\n      {message}\n    </div>\n  );\n}\n```\n\n## 5. 초점 제어\n\n- 키보드만 사용하는 사용자가 컴포넌트에서 요소 포커스를 관리하여 애플리케이션을 탐색할 수 있게 합니다. autoFocus 속성을 사용하면 컴포넌트가 마운트될 때 특정 요소에 포커스를 주는 예입니다.\n\n```js\nclass AutoFocusTextInput extends React.Component {\n  componentDidMount() {\n    this.textInput.focus();\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        ref={(input) => {\n          this.textInput = input;\n        }} // ref 할당\n      />\n    );\n  }\n}\n```\n\n## 6. 테스팅 및 유효성 검사:\n\n- 리액트 애플리케이션의 접근성을 테스트하고 유효성을 검사하는 다양한 도구와 기술이 있어요. 브라우저 개발자 도구를 사용하여 접근성 트리를 확인하고 잠재적인 문제를 식별할 수 있어요. 게다가 개발 중에 접근성 검사를 자동화할 수 있는 react-axe와 같은 라이브러리를 고려해 보세요.\n- 대부분의 접근성 문제는 정적 분석 도구를 통해 발견할 수 있지만, 수동 테스트와 유효성 검사도 중요해요. 왜냐하면 접근성은 단순히 규칙 목록을 충족하는 것 이상이기 때문이에요.\n\n## 7. 이미지의 Alt 속성\n\n이미지에 유용하고 설명적인 대체 텍스트를 항상 제공해 주세요.\n\n```js\n<img src={logo} alt=\"로고 설명\" />\n```\n\n## 8. 접근성 있는 양식 만들기\n\n모든 양식 요소에는 명확하고 접근성 있는 라벨이 있어야 합니다.\n\n```js\n<label htmlFor='name'> 이름 </label>\n<input type='text' id='name' name='name' />\n```\n\n## 9. 접근성 있는 색상과 대비\n\n- 모든 사람이 내용을 완전히 읽을 수 있도록 색상과 대비에 주의하세요. WCAG2는 특정 대비 및 텍스트 크기 가이드라인을 제공합니다.\n\n## 10. React 프래그먼트\n\n여러 요소를 그룹화하고 DOM에 추가 노드를 만들지 않으려면 React 프래그먼트(`/` 또는 `React.Fragment`)를 사용하세요. 이는 스크린 리더 사용자를 위해 깔끔한 문서 개요를 유지하는 데 도움이 됩니다.\n\n```js\n<>\n  <ChildA />\n  <ChildB />\n  <ChildC />\n</>\n```\n\n## 11. React 접근성 린터\n\neslint-plugin-jsx-a11y와 같은 도구를 사용하면 따를 수 있는 일련의 접근성 관련 규칙을 강제로 적용할 수 있습니다.\n\n# 몇 가지 출처\n\nReact에서 접근성에 대해 시작할 수 있는 몇 가지 리소스입니다:\n\n- React 웹 접근성 문서: https://legacy.reactjs.org/docs/accessibility.html\n- MDN Web Docs — React에서의 접근성: https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\n- A11y Project: https://www.a11yproject.com/pen_spark\n","ogImage":{"url":"/assets/img/2024-05-12-AccessibilityinReactjs_0.png"},"coverImage":"/assets/img/2024-05-12-AccessibilityinReactjs_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>주요 개념 및 접근성 사용 방법</p>\n<h2>React.js에서의 접근성(a11y)은 능력에 관계없이 모든 사람이 이해하고 상호 작용할 수 있는 사용자 인터페이스를 만드는 것입니다.</h2>\n<p>이는 스크린 리더, 키보드 탐색 또는 음성 제어와 같은 보조 기술을 사용하는 사람들을 포함합니다.</p>\n<p>다음은 React에서의 접근성에 대한 주요 개념을 설명합니다:</p>\n<h2>1. 시멘틱 HTML</h2>\n<ul>\n<li>'h1' 태그는 제목에, 'button' 태그는 버튼에, 'nav' 태그는 내비게이션에 등 세맨틱 HTML 요소를 사용하여 컴포넌트를 구축하세요. 이러한 요소들은 보조 기술 및 브라우저에 의미를 전달합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;header> {<span class=\"hljs-comment\">/* 시맨틱 헤더 요소 */</span>}\n    &#x3C;h1><span class=\"hljs-title class_\">Main</span> <span class=\"hljs-title class_\">Title</span> <span class=\"hljs-keyword\">of</span> the <span class=\"hljs-title class_\">Page</span>&#x3C;<span class=\"hljs-regexp\">/h1> {/</span>* 시맨틱 헤딩 요소 */}\n&#x3C;/header>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>The main content of your webpage goes here<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span> {/* 시멘틱 단락 요소 */}\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span> {/* 시멘틱 푸터 요소 */}\n   <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Copyright information and other footer related stuff<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span></span>\n</code></pre>\n<h2>2. ARIA 속성</h2>\n<ul>\n<li>때로는 의미 있는 HTML 만으로 충분하지 않을 수도 있습니다. 보조 기술을 위한 추가 정보를 제공하려면 ARIA (접근 가능한 리치 인터넷 애플리케이션) 속성을 사용하세요. 이미지를 설명하는 데 aria-label을 사용하거나 입력 필드에 설명을 연결하는 데 aria-describedby를 사용할 수 있습니다.</li>\n<li>HTML로는 원하는 기능을 달성할 수 없는 경우에는 접근성 리치 인터넷 애플리케이션(WAI-ARIA) 역할 및 속성을 사용하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ImageWithDescription</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">\"닫기\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.close}</span>></span>\n    X\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span>\n      <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"이미지.jpg\"</span>\n      <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"설명적 이미지 대체 텍스트\"</span>  {/* <span class=\"hljs-attr\">설명적</span> <span class=\"hljs-attr\">대체</span> <span class=\"hljs-attr\">텍스트</span> */}\n      <span class=\"hljs-attr\">aria-describedby</span>=<span class=\"hljs-string\">\"imageDescription\"</span>  {/* <span class=\"hljs-attr\">설명과</span> <span class=\"hljs-attr\">연결</span> */}\n    /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<h2>3. 키보드 탐색</h2>\n<ul>\n<li>애플리케이션이 키보드를 사용하여 완전히 탐색 가능하도록 보장하세요. 이는 사용자가 버튼, 링크 및 폼 필드와 같은 초점 가능 요소를 탭할 수 있게 하는 것을 의미합니다. onFocus 및 onBlur와 같은 이벤트 핸들러를 사용하여 초점 상태를 관리하고 시각적 단서를 제공하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">함수 <span class=\"hljs-title class_\">FocusableButton</span>({ onClick }) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onFocus</span>=<span class=\"hljs-string\">{()</span> =></span> console.log(\"Button Focused\")} onClick={onClick}>\n      Click me\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n  );\n}\n</code></pre>\n<h2>4. 스크린 리더 지원</h2>\n<ul>\n<li>컴포넌트에 대한 명확하고 간결한 텍스트 설명에 중점을 두세요. 설명적인 링크 텍스트를 사용하고 정보 전달에 색상에만 의존하지 마세요. 스크린 리더는 내용을 텍스트로 제시하기 때문에 구조화되고 이해하기 쉬운 내용임을 보장하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">함수 <span class=\"hljs-title class_\">ErrorMessage</span>({ message }) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">role</span>=<span class=\"hljs-string\">\"alert\"</span> <span class=\"hljs-attr\">aria-live</span>=<span class=\"hljs-string\">\"assertive\"</span>></span>  {/* 에러를 발표함 */}\n      {message}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<h2>5. 초점 제어</h2>\n<ul>\n<li>키보드만 사용하는 사용자가 컴포넌트에서 요소 포커스를 관리하여 애플리케이션을 탐색할 수 있게 합니다. autoFocus 속성을 사용하면 컴포넌트가 마운트될 때 특정 요소에 포커스를 주는 예입니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AutoFocusTextInput</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\n  <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">textInput</span>.<span class=\"hljs-title function_\">focus</span>();\n  }\n\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n        <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{(input)</span> =></span> {\n          this.textInput = input;\n        }} // ref 할당\n      /></span>\n    );\n  }\n}\n</code></pre>\n<h2>6. 테스팅 및 유효성 검사:</h2>\n<ul>\n<li>리액트 애플리케이션의 접근성을 테스트하고 유효성을 검사하는 다양한 도구와 기술이 있어요. 브라우저 개발자 도구를 사용하여 접근성 트리를 확인하고 잠재적인 문제를 식별할 수 있어요. 게다가 개발 중에 접근성 검사를 자동화할 수 있는 react-axe와 같은 라이브러리를 고려해 보세요.</li>\n<li>대부분의 접근성 문제는 정적 분석 도구를 통해 발견할 수 있지만, 수동 테스트와 유효성 검사도 중요해요. 왜냐하면 접근성은 단순히 규칙 목록을 충족하는 것 이상이기 때문이에요.</li>\n</ul>\n<h2>7. 이미지의 Alt 속성</h2>\n<p>이미지에 유용하고 설명적인 대체 텍스트를 항상 제공해 주세요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;img src={logo} alt=<span class=\"hljs-string\">\"로고 설명\"</span> />\n</code></pre>\n<h2>8. 접근성 있는 양식 만들기</h2>\n<p>모든 양식 요소에는 명확하고 접근성 있는 라벨이 있어야 합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;label htmlFor=<span class=\"hljs-string\">'name'</span>> 이름 &#x3C;/label>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text'</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'name'</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'name'</span> /></span></span>\n</code></pre>\n<h2>9. 접근성 있는 색상과 대비</h2>\n<ul>\n<li>모든 사람이 내용을 완전히 읽을 수 있도록 색상과 대비에 주의하세요. WCAG2는 특정 대비 및 텍스트 크기 가이드라인을 제공합니다.</li>\n</ul>\n<h2>10. React 프래그먼트</h2>\n<p>여러 요소를 그룹화하고 DOM에 추가 노드를 만들지 않으려면 React 프래그먼트(<code>/</code> 또는 <code>React.Fragment</code>)를 사용하세요. 이는 스크린 리더 사용자를 위해 깔끔한 문서 개요를 유지하는 데 도움이 됩니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ChildA</span> /></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ChildB</span> /></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ChildC</span> /></span></span>\n&#x3C;/>\n</code></pre>\n<h2>11. React 접근성 린터</h2>\n<p>eslint-plugin-jsx-a11y와 같은 도구를 사용하면 따를 수 있는 일련의 접근성 관련 규칙을 강제로 적용할 수 있습니다.</p>\n<h1>몇 가지 출처</h1>\n<p>React에서 접근성에 대해 시작할 수 있는 몇 가지 리소스입니다:</p>\n<ul>\n<li>React 웹 접근성 문서: <a href=\"https://legacy.reactjs.org/docs/accessibility.html\" rel=\"nofollow\" target=\"_blank\">https://legacy.reactjs.org/docs/accessibility.html</a></li>\n<li>MDN Web Docs — React에서의 접근성: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\" rel=\"nofollow\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility</a></li>\n<li>A11y Project: <a href=\"https://www.a11yproject.com/pen_spark\" rel=\"nofollow\" target=\"_blank\">https://www.a11yproject.com/pen_spark</a></li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}