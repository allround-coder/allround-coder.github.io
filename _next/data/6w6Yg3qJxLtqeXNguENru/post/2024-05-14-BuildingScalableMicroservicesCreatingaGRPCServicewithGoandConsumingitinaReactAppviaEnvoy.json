{"pageProps":{"post":{"title":"스켈러블한 마이크로서비스 구축 Go로 GRPC 서비스 만들기 및 Envoy를 통해 React 앱에서 사용하기","description":"","date":"2024-05-14 10:14","slug":"2024-05-14-BuildingScalableMicroservicesCreatingaGRPCServicewithGoandConsumingitinaReactAppviaEnvoy","content":"\n\n<img src=\"/assets/img/2024-05-14-BuildingScalableMicroservicesCreatingaGRPCServicewithGoandConsumingitinaReactAppviaEnvoy_0.png\" />\n\n# 준비물\n\n구현에 들어가기 전에 시스템에 다음 사항이 설치되어 있는지 확인하세요:\n\n- Go: 공식 웹사이트(https://golang.org/)에서 Go를 설치하세요.\n- Node.js와 npm: (https://nodejs.org/)에서 Node.js를 다운로드하고 설치하세요.\n- Docker: Envoy 프록시 컨테이너를 실행하기 위해 Docker를 설치하세요(https://www.docker.com/).\n\n\n\n# 단계 1: Go에서 GRPC 서비스 만들기\n\n먼저 Go로 GRPC 서비스를 만들어봅시다. 프로젝트를 위한 새 디렉토리를 만들고 Go 환경을 설정해보세요:\n\n```js\ngo-grpc-server-with-envoy\n```\n\n아래 명령을 실행하여 프로젝트를 초기화하세요:\n\n\n\n```js\ncd go-grpc-server-with-envoy\ngo mod init\n```\n\n지금은 새로운 Go 파일을 만들어서 서비스를 구현해보세요. 예를 들어 main.go 파일을 만들 수 있습니다. 이 파일에서 GRPC 서비스와 그 메서드를 정의해보세요. 다음은 간단한 예시입니다:\n\n```js\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\n// YourService should implement the methods of your GRPC service.\ntype YourService struct{}\n\n// 여기에 GRPC 메서드를 구현하세요.\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \":8080\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\t// 여기에 서비스를 등록하세요.\n\n\tif err := grpcServer.Serve(listener); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}\n```\n\n# 스텝 2: 프로토버프 정의 만들기\n\n\n\n\n서비스와 메시지를 Protocol Buffers(Protobuf)를 사용하여 정의하세요. \"proto\" 폴더 안에 .proto 파일을 만들어주세요. 예를 들어 UserInfo.proto 파일을 만들어서 서비스와 메시지 유형을 정의해주세요:\n\n```js\nsyntax = \"proto3\";\n\npackage proto;\n\noption go_package = \"app/proto\";\n\nmessage User {\n    string name = 1;\n    int32 age = 2;\n    Address address = 3;\n    PhoneNumber phone = 4;\n    string updated_at = 5;\n    string created_at = 6;\n}\n\nmessage Address {\n    string street = 1;\n    string city = 2;\n    string state = 3;\n    string zip = 4;\n}\n\nmessage PhoneNumber {\n    string primary = 1;\n    map<string, string> others = 2;\n}\n\nmessage UserRequest {\n    string name = 1;\n}\n\nmessage UserResponse {\n    User user = 1;\n    int32 status = 2;\n    string error = 3;\n}\n\nservice Usr {\n    rpc GetUser(UserRequest) returns (UserResponse) {}\n}\n```\n\n.proto 파일을 컴파일하여 Go 코드를 생성하세요:\n\n```js\n protoc ./proto/userInfo.proto --go_out=. --go-grpc_out=.\n```\n\n\n\n# 단계 3: GRPC 서비스 구현하기\n\nmain.go 파일에 .proto 파일의 정의에 따라 GRPC 서비스 메소드를 구현해주세요.\n\n```go\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net\"\n    \"time\"\n\n    \"github.com/digvijay17july/golang-projects/go-grpc-react-example/go-grpc-server-with-envoy/app/proto\"\n    \"google.golang.org/grpc\"\n)\n\ntype server struct {\n    proto.UnimplementedUsrServer\n}\n\nfunc (*server) GetUser(ctx context.Context, in *proto.UserRequest) (*proto.UserResponse, error) {\n    \n    others := make(map[string]string)\n    others[\"secondary\"] = \"233453\"\n    phone := &proto.PhoneNumber{Primary: \"1234567890\", Others: others}\n    user := &proto.User{Name: \"Digvijay\", Age: 23, Address: &proto.Address{Street: \"Pune\", City: \"Pune\", State: \"MAHARASHTRA\", Zip: \"201223\"}, Phone: phone, UpdatedAt: time.Now().UTC().String(), CreatedAt: time.Now().UTC().String()}\n    return &proto.UserResponse{User: user, Status: 200, Error: \"\"}, nil\n}\n\nfunc main() {\n    lis, err := net.Listen(\"tcp\", \":8080\")\n    if err != nil {\n        log.Fatalf(\"failed to listen: %v\", err)\n    }\n    s := grpc.NewServer()\n    grpcServer := &server{}\n    proto.RegisterUsrServer(s, grpcServer)\n    log.Printf(\"Starting server on port :%v\", lis.Addr())\n    if err := s.Serve(lis); err != nil {\n        log.Fatalf(\"failed to serve: %v\", err)\n    }\n\n}\n```\n\n# 단계 4: GRPC 서비스 Docker 이미지 빌드 및 실행하기\n\n\n\nDockerfile for the Grpc Service app -\n\n```js\nFROM golang:1.21.4-alpine\n\nWORKDIR /app\n\nCOPY go.sum ./\n\nCOPY . ./\n\nRUN go build -o /go-grpc-server-with-envoy\n\nEXPOSE 8080\n\nCMD [\"/go-grpc-server-with-envoy\"]\n```\n\n이미지 빌드하기 -\n\n```js\ndocker build -t go-grpc-server-with-envoy .\n```\n\n\n\n# 단계 5: Envoy Proxy 설정하기\n\nEnvoy 폴더를 생성하세요. 이 폴더에는 2개의 파일이 포함됩니다.\n\n- ./config/envoy.yaml\n\n```js\nadmin:\n  address:\n    socket_address: { address: 0.0.0.0, port_value: 9901 }\nstatic_resources:\n  listeners:\n    - name: listener_0\n      address:\n        socket_address: { address: 0.0.0.0, port_value:  8080 }\n      filter_chains:\n        - filters:\n            - name: envoy.filters.network.http_connection_manager\n              typed_config:\n                \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n                codec_type: auto\n                stat_prefix: ingress_http\n                route_config:\n                  name: local_route\n                  virtual_hosts:\n                    - name: local_service\n                      domains: [\"*\"]\n                      routes:\n                        - match: { prefix: \"/\"}\n                          route: { cluster: grpc_service}\n                      cors:\n                        allow_origin_string_match:\n                          - prefix: \"*\"\n                        allow_methods: GET, PUT, DELETE, POST, OPTIONS\n                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout\n                        max_age: \"1728000\"\n                        expose_headers: custom-header-1,grpc-status,grpc-message\n                http_filters:\n                  - name: envoy.filters.http.grpc_web\n                    typed_config:\n                      \"@type\": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb\n                  - name: envoy.filters.http.cors\n                    typed_config:\n                      \"@type\": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors\n                  - name: envoy.filters.http.router\n                    typed_config:\n                      \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n    - name: grpc_service\n      connect_timeout: 0.25s\n      type: LOGICAL_DNS\n      typed_extension_protocol_options:\n        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n          \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions\n          explicit_http_config:\n            http2_protocol_options: {}\n      lb_policy: ROUND_ROBIN\n      load_assignment:\n        cluster_name: grpc_service\n        endpoints:\n          - lb_endpoints:\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: host.docker.internal\n                      port_value: 8080\n```\n\n\n\n2. ./config/Dockerfile\n\n```js\nFROM envoyproxy/envoy:v1.28.0\nCOPY ./envoy.yaml /etc/envoy/envoy.yaml\n```\n\n# 단계 6: 앱 실행을 위한 docker-compose.yaml 생성\n\n```js\nversion: '3'\nservices:\n  grpc-server:\n    image: go-grpc-server-with-envoy:latest  # 실제 Go gRPC 서버 이미지 이름과 태그로 변경\n    ports:\n      - \"8080:8080\"  # 컨테이너의 gRPC 포트를 호스트 머신에 매핑\n    networks:\n      - go-grpc-server-with-envoy\n\n  gateway-envoy:\n    build:\n      context: ./envoy/config\n      dockerfile: Dockerfile\n    ports:\n      - '8083:8080'\n\n    networks:\n      - go-grpc-server-with-envoy\n\nnetworks:\n  go-grpc-server-with-envoy:\n```\n\n\n\n백엔드를 Envoy 프록시로 실행하려면:\n\n```js\ndocker-compose up\n```\n\n출력:\n\n![이미지](/assets/img/2024-05-14-BuildingScalableMicroservicesCreatingaGRPCServicewithGoandConsumingitinaReactAppviaEnvoy_1.png)\n\n\n\n# 단계 7: 리액트 앱 생성하기\n\n```js\nnpx create-react-app my-grpc-app\ncd my-grpc-app\n```\n\n# 단계 8: gRPC-Web 및 google-protobuf 플러그인 설치\n\n```js\nnpm install -g protoc-gen-ts\nnpm i protoc-gen-grpc-web\n```\n\n\n\n# 단계 9: 리액트 앱에서 다른 종속성 구성하기\n\n```js\n  \"dependencies\": {\n    \"@grpc/proto-loader\": \"^0.7.10\",\n    \"@testing-library/jest-dom\": \"^5.17.0\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"@types/react\": \"^18.2.47\",\n    \"@types/react-dom\": \"^18.2.18\",\n    \"google-proto-files\": \"^4.0.0\",\n    \"google-protobuf\": \"3.21.2\",\n    \"grpc-web\": \"^1.5.0\",\n    \"protoc-gen-grpc-web\": \"^1.4.2\",\n    \"protoc-gen-ts\": \"^0.8.7\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\",\n    \"web-vitals\": \"^2.1.4\"\n  }\n```\n\n# 단계 10: 리액트 앱을 위한 GRPC 클라이언트 코드 생성\n\n.proto 파일을 컴파일하여 js 코드를 생성하세요:\n\n\n\n```js\nprotoc -I=src/proto userInfo.proto --js_out=import_style=commonjs,binary:./src/proto --grpc-web_out=import_style=commonjs,mode=grpcwebtext:./src/proto\n```\n\n# 단계 11: React 앱 구성하기\n\nUserDetails.js\n\n```js\nimport React, { Component } from 'react';\nimport { UsrClient } from '../proto/userInfo_grpc_web_pb';\nimport { UserRequest } from '../proto/userInfo_pb';// 생성된 클라이언트 코드를 가져옵니다\n\nclass UserDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: null,\n            error: null,\n        };\n    }\n\n    componentDidMount() {\n        const client = new UsrClient('http://localhost:8083'); // 사용 중인 gRPC 서버 URL로 교체해주세요\n\n        // 사용자 이름을 사용해 요청 생성\n        const request = new UserRequest();\n        // 원하는 사용자 이름으로 대체해주세요\n\n        // GetUser RPC 호출\n        client.getUser(request, {}, (err, response) => {\n            if (!err) {\n                this.setState({ user: response.getUser() });\n            } else {\n                this.setState({ error: '사용자 데이터를 불러오는 중 오류 발생' });\n            }\n        });\n    }\n\n    render() {\n        const { user, error } = this.state;\n\n        return (\n            <div>\n                {error ? (\n                    <p>Error: {error}</p>\n                ) : user ? (\n                    <div>\n                        <h1>사용자 세부 정보</h1>\n                        <p>이름: {user.getName()}</p>\n                        <p>나이: {user.getAge()}</p>\n                        <h2>주소</h2>\n                        <p>거리: {user.getAddress().getStreet()}</p>\n                        <p>도시: {user.getAddress().getCity()}</p>\n                        <p>주: {user.getAddress().getState()}</p>\n                        <p>우편번호: {user.getAddress().getZip()}</p>\n                        {/* 전화번호 정보를 비슷하게 표시할 수 있습니다 */}\n                        <p>업데이트 날짜: {user.getUpdatedAt()}</p>\n                        <p>생성 날짜: {user.getCreatedAt()}</p>\n                    </div>\n                ) : (\n                    <p>로딩 중...</p>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default UserDetail;\n```\n\n\n\nApp.js\n\n```js\nimport logo from './logo.svg';\nimport './App.css';\nimport UserDetail from './components/UserDetails';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <UserDetail>\n          \n        </UserDetail>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n### Step 12: React 앱 빌드 및 실행\n\nReact 앱을 빌드하고 실행하세요.\n\n\n\n```js\nnpm start\n```\n\n결과 -\n\n<img src=\"/assets/img/2024-05-14-BuildingScalableMicroservicesCreatingaGRPCServicewithGoandConsumingitinaReactAppviaEnvoy_2.png\" />\n\n# 결론\n\n\n\n본 튜토리얼에서는 Go로 GRPC 서비스를 생성하는 방법, Envoy를 프록시로 구성하는 방법, 그리고 React 앱을 빌드하여 Envoy를 통해 GRPC 서비스와 통신하는 과정을 다루었습니다. 이 설정은 분산 시스템을 구축하는 확장 가능하고 효율적인 방법을 제공합니다. 필요에 따라 서비스 및 React 앱에 더 많은 GRPC 메서드와 기능을 추가하여 이 예제를 확장할 수 있습니다. 즐거운 코딩하세요!\n\n더 많은 정보를 위해 코드를 확인하세요: GitHub","ogImage":{"url":"/assets/img/2024-05-14-BuildingScalableMicroservicesCreatingaGRPCServicewithGoandConsumingitinaReactAppviaEnvoy_0.png"},"coverImage":"/assets/img/2024-05-14-BuildingScalableMicroservicesCreatingaGRPCServicewithGoandConsumingitinaReactAppviaEnvoy_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>준비물</h1>\n<p>구현에 들어가기 전에 시스템에 다음 사항이 설치되어 있는지 확인하세요:</p>\n<ul>\n<li>Go: 공식 웹사이트(<a href=\"https://golang.org/)%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">https://golang.org/)에서</a> Go를 설치하세요.</li>\n<li>Node.js와 npm: (<a href=\"https://nodejs.org/)%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">https://nodejs.org/)에서</a> Node.js를 다운로드하고 설치하세요.</li>\n<li>Docker: Envoy 프록시 컨테이너를 실행하기 위해 Docker를 설치하세요(<a href=\"https://www.docker.com/\" rel=\"nofollow\" target=\"_blank\">https://www.docker.com/</a>).</li>\n</ul>\n<h1>단계 1: Go에서 GRPC 서비스 만들기</h1>\n<p>먼저 Go로 GRPC 서비스를 만들어봅시다. 프로젝트를 위한 새 디렉토리를 만들고 Go 환경을 설정해보세요:</p>\n<pre><code class=\"hljs language-js\">go-grpc-server-<span class=\"hljs-keyword\">with</span>-envoy\n</code></pre>\n<p>아래 명령을 실행하여 프로젝트를 초기화하세요:</p>\n<pre><code class=\"hljs language-js\">cd go-grpc-server-<span class=\"hljs-keyword\">with</span>-envoy\ngo mod init\n</code></pre>\n<p>지금은 새로운 Go 파일을 만들어서 서비스를 구현해보세요. 예를 들어 main.go 파일을 만들 수 있습니다. 이 파일에서 GRPC 서비스와 그 메서드를 정의해보세요. 다음은 간단한 예시입니다:</p>\n<pre><code class=\"hljs language-js\">package main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"context\"</span>\n\t<span class=\"hljs-string\">\"log\"</span>\n\t<span class=\"hljs-string\">\"net\"</span>\n\t<span class=\"hljs-string\">\"google.golang.org/grpc\"</span>\n)\n\n<span class=\"hljs-comment\">// YourService should implement the methods of your GRPC service.</span>\ntype <span class=\"hljs-title class_\">YourService</span> struct{}\n\n<span class=\"hljs-comment\">// 여기에 GRPC 메서드를 구현하세요.</span>\n\nfunc <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n\tlistener, err := net.<span class=\"hljs-title class_\">Listen</span>(<span class=\"hljs-string\">\"tcp\"</span>, <span class=\"hljs-string\">\":8080\"</span>)\n\t<span class=\"hljs-keyword\">if</span> err != nil {\n\t\tlog.<span class=\"hljs-title class_\">Fatalf</span>(<span class=\"hljs-string\">\"Failed to listen: %v\"</span>, err)\n\t}\n\n\tgrpcServer := grpc.<span class=\"hljs-title class_\">NewServer</span>()\n\t<span class=\"hljs-comment\">// 여기에 서비스를 등록하세요.</span>\n\n\t<span class=\"hljs-keyword\">if</span> err := grpcServer.<span class=\"hljs-title class_\">Serve</span>(listener); err != nil {\n\t\tlog.<span class=\"hljs-title class_\">Fatalf</span>(<span class=\"hljs-string\">\"Failed to serve: %v\"</span>, err)\n\t}\n}\n</code></pre>\n<h1>스텝 2: 프로토버프 정의 만들기</h1>\n<p>서비스와 메시지를 Protocol Buffers(Protobuf)를 사용하여 정의하세요. \"proto\" 폴더 안에 .proto 파일을 만들어주세요. 예를 들어 UserInfo.proto 파일을 만들어서 서비스와 메시지 유형을 정의해주세요:</p>\n<pre><code class=\"hljs language-js\">syntax = <span class=\"hljs-string\">\"proto3\"</span>;\n\npackage proto;\n\noption go_package = <span class=\"hljs-string\">\"app/proto\"</span>;\n\nmessage <span class=\"hljs-title class_\">User</span> {\n    string name = <span class=\"hljs-number\">1</span>;\n    int32 age = <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-title class_\">Address</span> address = <span class=\"hljs-number\">3</span>;\n    <span class=\"hljs-title class_\">PhoneNumber</span> phone = <span class=\"hljs-number\">4</span>;\n    string updated_at = <span class=\"hljs-number\">5</span>;\n    string created_at = <span class=\"hljs-number\">6</span>;\n}\n\nmessage <span class=\"hljs-title class_\">Address</span> {\n    string street = <span class=\"hljs-number\">1</span>;\n    string city = <span class=\"hljs-number\">2</span>;\n    string state = <span class=\"hljs-number\">3</span>;\n    string zip = <span class=\"hljs-number\">4</span>;\n}\n\nmessage <span class=\"hljs-title class_\">PhoneNumber</span> {\n    string primary = <span class=\"hljs-number\">1</span>;\n    map&#x3C;string, string> others = <span class=\"hljs-number\">2</span>;\n}\n\nmessage <span class=\"hljs-title class_\">UserRequest</span> {\n    string name = <span class=\"hljs-number\">1</span>;\n}\n\nmessage <span class=\"hljs-title class_\">UserResponse</span> {\n    <span class=\"hljs-title class_\">User</span> user = <span class=\"hljs-number\">1</span>;\n    int32 status = <span class=\"hljs-number\">2</span>;\n    string error = <span class=\"hljs-number\">3</span>;\n}\n\nservice <span class=\"hljs-title class_\">Usr</span> {\n    rpc <span class=\"hljs-title class_\">GetUser</span>(<span class=\"hljs-title class_\">UserRequest</span>) returns (<span class=\"hljs-title class_\">UserResponse</span>) {}\n}\n</code></pre>\n<p>.proto 파일을 컴파일하여 Go 코드를 생성하세요:</p>\n<pre><code class=\"hljs language-js\"> protoc ./proto/userInfo.<span class=\"hljs-property\">proto</span> --go_out=. --go-grpc_out=.\n</code></pre>\n<h1>단계 3: GRPC 서비스 구현하기</h1>\n<p>main.go 파일에 .proto 파일의 정의에 따라 GRPC 서비스 메소드를 구현해주세요.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">\"context\"</span>\n    <span class=\"hljs-string\">\"log\"</span>\n    <span class=\"hljs-string\">\"net\"</span>\n    <span class=\"hljs-string\">\"time\"</span>\n\n    <span class=\"hljs-string\">\"github.com/digvijay17july/golang-projects/go-grpc-react-example/go-grpc-server-with-envoy/app/proto\"</span>\n    <span class=\"hljs-string\">\"google.golang.org/grpc\"</span>\n)\n\n<span class=\"hljs-keyword\">type</span> server <span class=\"hljs-keyword\">struct</span> {\n    proto.UnimplementedUsrServer\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(*server)</span></span> GetUser(ctx context.Context, in *proto.UserRequest) (*proto.UserResponse, <span class=\"hljs-type\">error</span>) {\n    \n    others := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)\n    others[<span class=\"hljs-string\">\"secondary\"</span>] = <span class=\"hljs-string\">\"233453\"</span>\n    phone := &#x26;proto.PhoneNumber{Primary: <span class=\"hljs-string\">\"1234567890\"</span>, Others: others}\n    user := &#x26;proto.User{Name: <span class=\"hljs-string\">\"Digvijay\"</span>, Age: <span class=\"hljs-number\">23</span>, Address: &#x26;proto.Address{Street: <span class=\"hljs-string\">\"Pune\"</span>, City: <span class=\"hljs-string\">\"Pune\"</span>, State: <span class=\"hljs-string\">\"MAHARASHTRA\"</span>, Zip: <span class=\"hljs-string\">\"201223\"</span>}, Phone: phone, UpdatedAt: time.Now().UTC().String(), CreatedAt: time.Now().UTC().String()}\n    <span class=\"hljs-keyword\">return</span> &#x26;proto.UserResponse{User: user, Status: <span class=\"hljs-number\">200</span>, Error: <span class=\"hljs-string\">\"\"</span>}, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    lis, err := net.Listen(<span class=\"hljs-string\">\"tcp\"</span>, <span class=\"hljs-string\">\":8080\"</span>)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        log.Fatalf(<span class=\"hljs-string\">\"failed to listen: %v\"</span>, err)\n    }\n    s := grpc.NewServer()\n    grpcServer := &#x26;server{}\n    proto.RegisterUsrServer(s, grpcServer)\n    log.Printf(<span class=\"hljs-string\">\"Starting server on port :%v\"</span>, lis.Addr())\n    <span class=\"hljs-keyword\">if</span> err := s.Serve(lis); err != <span class=\"hljs-literal\">nil</span> {\n        log.Fatalf(<span class=\"hljs-string\">\"failed to serve: %v\"</span>, err)\n    }\n\n}\n</code></pre>\n<h1>단계 4: GRPC 서비스 Docker 이미지 빌드 및 실행하기</h1>\n<p>Dockerfile for the Grpc Service app -</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">golang</span>:<span class=\"hljs-number\">1.21</span><span class=\"hljs-number\">.4</span>-alpine\n\n<span class=\"hljs-variable constant_\">WORKDIR</span> /app\n\n<span class=\"hljs-variable constant_\">COPY</span> go.<span class=\"hljs-property\">sum</span> ./\n\n<span class=\"hljs-variable constant_\">COPY</span> . ./\n\n<span class=\"hljs-variable constant_\">RUN</span> go build -o /go-grpc-server-<span class=\"hljs-keyword\">with</span>-envoy\n\n<span class=\"hljs-variable constant_\">EXPOSE</span> <span class=\"hljs-number\">8080</span>\n\n<span class=\"hljs-variable constant_\">CMD</span> [<span class=\"hljs-string\">\"/go-grpc-server-with-envoy\"</span>]\n</code></pre>\n<p>이미지 빌드하기 -</p>\n<pre><code class=\"hljs language-js\">docker build -t go-grpc-server-<span class=\"hljs-keyword\">with</span>-envoy .\n</code></pre>\n<h1>단계 5: Envoy Proxy 설정하기</h1>\n<p>Envoy 폴더를 생성하세요. 이 폴더에는 2개의 파일이 포함됩니다.</p>\n<ul>\n<li>./config/envoy.yaml</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">admin</span>:\n  <span class=\"hljs-attr\">address</span>:\n    <span class=\"hljs-attr\">socket_address</span>: { <span class=\"hljs-attr\">address</span>: <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>, <span class=\"hljs-attr\">port_value</span>: <span class=\"hljs-number\">9901</span> }\n<span class=\"hljs-attr\">static_resources</span>:\n  <span class=\"hljs-attr\">listeners</span>:\n    - <span class=\"hljs-attr\">name</span>: listener_0\n      <span class=\"hljs-attr\">address</span>:\n        <span class=\"hljs-attr\">socket_address</span>: { <span class=\"hljs-attr\">address</span>: <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>, <span class=\"hljs-attr\">port_value</span>:  <span class=\"hljs-number\">8080</span> }\n      <span class=\"hljs-attr\">filter_chains</span>:\n        - <span class=\"hljs-attr\">filters</span>:\n            - <span class=\"hljs-attr\">name</span>: envoy.<span class=\"hljs-property\">filters</span>.<span class=\"hljs-property\">network</span>.<span class=\"hljs-property\">http_connection_manager</span>\n              <span class=\"hljs-attr\">typed_config</span>:\n                <span class=\"hljs-string\">\"@type\"</span>: type.<span class=\"hljs-property\">googleapis</span>.<span class=\"hljs-property\">com</span>/envoy.<span class=\"hljs-property\">extensions</span>.<span class=\"hljs-property\">filters</span>.<span class=\"hljs-property\">network</span>.<span class=\"hljs-property\">http_connection_manager</span>.<span class=\"hljs-property\">v3</span>.<span class=\"hljs-property\">HttpConnectionManager</span>\n                <span class=\"hljs-attr\">codec_type</span>: auto\n                <span class=\"hljs-attr\">stat_prefix</span>: ingress_http\n                <span class=\"hljs-attr\">route_config</span>:\n                  <span class=\"hljs-attr\">name</span>: local_route\n                  <span class=\"hljs-attr\">virtual_hosts</span>:\n                    - <span class=\"hljs-attr\">name</span>: local_service\n                      <span class=\"hljs-attr\">domains</span>: [<span class=\"hljs-string\">\"*\"</span>]\n                      <span class=\"hljs-attr\">routes</span>:\n                        - <span class=\"hljs-attr\">match</span>: { <span class=\"hljs-attr\">prefix</span>: <span class=\"hljs-string\">\"/\"</span>}\n                          <span class=\"hljs-attr\">route</span>: { <span class=\"hljs-attr\">cluster</span>: grpc_service}\n                      <span class=\"hljs-attr\">cors</span>:\n                        <span class=\"hljs-attr\">allow_origin_string_match</span>:\n                          - <span class=\"hljs-attr\">prefix</span>: <span class=\"hljs-string\">\"*\"</span>\n                        <span class=\"hljs-attr\">allow_methods</span>: <span class=\"hljs-variable constant_\">GET</span>, <span class=\"hljs-variable constant_\">PUT</span>, <span class=\"hljs-variable constant_\">DELETE</span>, <span class=\"hljs-variable constant_\">POST</span>, <span class=\"hljs-variable constant_\">OPTIONS</span>\n                        <span class=\"hljs-attr\">allow_headers</span>: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-<span class=\"hljs-number\">1</span>,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout\n                        <span class=\"hljs-attr\">max_age</span>: <span class=\"hljs-string\">\"1728000\"</span>\n                        <span class=\"hljs-attr\">expose_headers</span>: custom-header-<span class=\"hljs-number\">1</span>,grpc-status,grpc-message\n                <span class=\"hljs-attr\">http_filters</span>:\n                  - <span class=\"hljs-attr\">name</span>: envoy.<span class=\"hljs-property\">filters</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">grpc_web</span>\n                    <span class=\"hljs-attr\">typed_config</span>:\n                      <span class=\"hljs-string\">\"@type\"</span>: type.<span class=\"hljs-property\">googleapis</span>.<span class=\"hljs-property\">com</span>/envoy.<span class=\"hljs-property\">extensions</span>.<span class=\"hljs-property\">filters</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">grpc_web</span>.<span class=\"hljs-property\">v3</span>.<span class=\"hljs-property\">GrpcWeb</span>\n                  - <span class=\"hljs-attr\">name</span>: envoy.<span class=\"hljs-property\">filters</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">cors</span>\n                    <span class=\"hljs-attr\">typed_config</span>:\n                      <span class=\"hljs-string\">\"@type\"</span>: type.<span class=\"hljs-property\">googleapis</span>.<span class=\"hljs-property\">com</span>/envoy.<span class=\"hljs-property\">extensions</span>.<span class=\"hljs-property\">filters</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">cors</span>.<span class=\"hljs-property\">v3</span>.<span class=\"hljs-property\">Cors</span>\n                  - <span class=\"hljs-attr\">name</span>: envoy.<span class=\"hljs-property\">filters</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">router</span>\n                    <span class=\"hljs-attr\">typed_config</span>:\n                      <span class=\"hljs-string\">\"@type\"</span>: type.<span class=\"hljs-property\">googleapis</span>.<span class=\"hljs-property\">com</span>/envoy.<span class=\"hljs-property\">extensions</span>.<span class=\"hljs-property\">filters</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">router</span>.<span class=\"hljs-property\">v3</span>.<span class=\"hljs-property\">Router</span>\n  <span class=\"hljs-attr\">clusters</span>:\n    - <span class=\"hljs-attr\">name</span>: grpc_service\n      <span class=\"hljs-attr\">connect_timeout</span>: <span class=\"hljs-number\">0.</span>25s\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-variable constant_\">LOGICAL_DNS</span>\n      <span class=\"hljs-attr\">typed_extension_protocol_options</span>:\n        envoy.<span class=\"hljs-property\">extensions</span>.<span class=\"hljs-property\">upstreams</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">v3</span>.<span class=\"hljs-property\">HttpProtocolOptions</span>:\n          <span class=\"hljs-string\">\"@type\"</span>: type.<span class=\"hljs-property\">googleapis</span>.<span class=\"hljs-property\">com</span>/envoy.<span class=\"hljs-property\">extensions</span>.<span class=\"hljs-property\">upstreams</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">v3</span>.<span class=\"hljs-property\">HttpProtocolOptions</span>\n          <span class=\"hljs-attr\">explicit_http_config</span>:\n            <span class=\"hljs-attr\">http2_protocol_options</span>: {}\n      <span class=\"hljs-attr\">lb_policy</span>: <span class=\"hljs-variable constant_\">ROUND_ROBIN</span>\n      <span class=\"hljs-attr\">load_assignment</span>:\n        <span class=\"hljs-attr\">cluster_name</span>: grpc_service\n        <span class=\"hljs-attr\">endpoints</span>:\n          - <span class=\"hljs-attr\">lb_endpoints</span>:\n              - <span class=\"hljs-attr\">endpoint</span>:\n                  <span class=\"hljs-attr\">address</span>:\n                    <span class=\"hljs-attr\">socket_address</span>:\n                      <span class=\"hljs-attr\">address</span>: host.<span class=\"hljs-property\">docker</span>.<span class=\"hljs-property\">internal</span>\n                      <span class=\"hljs-attr\">port_value</span>: <span class=\"hljs-number\">8080</span>\n</code></pre>\n<ol start=\"2\">\n<li>./config/Dockerfile</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">FROM</span> envoyproxy/<span class=\"hljs-attr\">envoy</span>:v1<span class=\"hljs-number\">.28</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-variable constant_\">COPY</span> ./envoy.<span class=\"hljs-property\">yaml</span> /etc/envoy/envoy.<span class=\"hljs-property\">yaml</span>\n</code></pre>\n<h1>단계 6: 앱 실행을 위한 docker-compose.yaml 생성</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">version</span>: <span class=\"hljs-string\">'3'</span>\n<span class=\"hljs-attr\">services</span>:\n  grpc-<span class=\"hljs-attr\">server</span>:\n    <span class=\"hljs-attr\">image</span>: go-grpc-server-<span class=\"hljs-keyword\">with</span>-<span class=\"hljs-attr\">envoy</span>:latest  # 실제 <span class=\"hljs-title class_\">Go</span> gRPC 서버 이미지 이름과 태그로 변경\n    <span class=\"hljs-attr\">ports</span>:\n      - <span class=\"hljs-string\">\"8080:8080\"</span>  # 컨테이너의 gRPC 포트를 호스트 머신에 매핑\n    <span class=\"hljs-attr\">networks</span>:\n      - go-grpc-server-<span class=\"hljs-keyword\">with</span>-envoy\n\n  gateway-<span class=\"hljs-attr\">envoy</span>:\n    <span class=\"hljs-attr\">build</span>:\n      <span class=\"hljs-attr\">context</span>: ./envoy/config\n      <span class=\"hljs-attr\">dockerfile</span>: <span class=\"hljs-title class_\">Dockerfile</span>\n    <span class=\"hljs-attr\">ports</span>:\n      - <span class=\"hljs-string\">'8083:8080'</span>\n\n    <span class=\"hljs-attr\">networks</span>:\n      - go-grpc-server-<span class=\"hljs-keyword\">with</span>-envoy\n\n<span class=\"hljs-attr\">networks</span>:\n  go-grpc-server-<span class=\"hljs-keyword\">with</span>-<span class=\"hljs-attr\">envoy</span>:\n</code></pre>\n<p>백엔드를 Envoy 프록시로 실행하려면:</p>\n<pre><code class=\"hljs language-js\">docker-compose up\n</code></pre>\n<p>출력:</p>\n<p><img src=\"/assets/img/2024-05-14-BuildingScalableMicroservicesCreatingaGRPCServicewithGoandConsumingitinaReactAppviaEnvoy_1.png\" alt=\"이미지\"></p>\n<h1>단계 7: 리액트 앱 생성하기</h1>\n<pre><code class=\"hljs language-js\">npx create-react-app my-grpc-app\ncd my-grpc-app\n</code></pre>\n<h1>단계 8: gRPC-Web 및 google-protobuf 플러그인 설치</h1>\n<pre><code class=\"hljs language-js\">npm install -g protoc-gen-ts\nnpm i protoc-gen-grpc-web\n</code></pre>\n<h1>단계 9: 리액트 앱에서 다른 종속성 구성하기</h1>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-string\">\"dependencies\"</span>: {\n    <span class=\"hljs-string\">\"@grpc/proto-loader\"</span>: <span class=\"hljs-string\">\"^0.7.10\"</span>,\n    <span class=\"hljs-string\">\"@testing-library/jest-dom\"</span>: <span class=\"hljs-string\">\"^5.17.0\"</span>,\n    <span class=\"hljs-string\">\"@testing-library/react\"</span>: <span class=\"hljs-string\">\"^13.4.0\"</span>,\n    <span class=\"hljs-string\">\"@testing-library/user-event\"</span>: <span class=\"hljs-string\">\"^13.5.0\"</span>,\n    <span class=\"hljs-string\">\"@types/react\"</span>: <span class=\"hljs-string\">\"^18.2.47\"</span>,\n    <span class=\"hljs-string\">\"@types/react-dom\"</span>: <span class=\"hljs-string\">\"^18.2.18\"</span>,\n    <span class=\"hljs-string\">\"google-proto-files\"</span>: <span class=\"hljs-string\">\"^4.0.0\"</span>,\n    <span class=\"hljs-string\">\"google-protobuf\"</span>: <span class=\"hljs-string\">\"3.21.2\"</span>,\n    <span class=\"hljs-string\">\"grpc-web\"</span>: <span class=\"hljs-string\">\"^1.5.0\"</span>,\n    <span class=\"hljs-string\">\"protoc-gen-grpc-web\"</span>: <span class=\"hljs-string\">\"^1.4.2\"</span>,\n    <span class=\"hljs-string\">\"protoc-gen-ts\"</span>: <span class=\"hljs-string\">\"^0.8.7\"</span>,\n    <span class=\"hljs-string\">\"react\"</span>: <span class=\"hljs-string\">\"^18.2.0\"</span>,\n    <span class=\"hljs-string\">\"react-dom\"</span>: <span class=\"hljs-string\">\"^18.2.0\"</span>,\n    <span class=\"hljs-string\">\"react-scripts\"</span>: <span class=\"hljs-string\">\"5.0.1\"</span>,\n    <span class=\"hljs-string\">\"web-vitals\"</span>: <span class=\"hljs-string\">\"^2.1.4\"</span>\n  }\n</code></pre>\n<h1>단계 10: 리액트 앱을 위한 GRPC 클라이언트 코드 생성</h1>\n<p>.proto 파일을 컴파일하여 js 코드를 생성하세요:</p>\n<pre><code class=\"hljs language-js\">protoc -I=src/proto userInfo.<span class=\"hljs-property\">proto</span> --js_out=import_style=commonjs,<span class=\"hljs-attr\">binary</span>:./src/proto --grpc-web_out=import_style=commonjs,mode=<span class=\"hljs-attr\">grpcwebtext</span>:./src/proto\n</code></pre>\n<h1>단계 11: React 앱 구성하기</h1>\n<p>UserDetails.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UsrClient</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../proto/userInfo_grpc_web_pb'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserRequest</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../proto/userInfo_pb'</span>;<span class=\"hljs-comment\">// 생성된 클라이언트 코드를 가져옵니다</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserDetail</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> {\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\n        <span class=\"hljs-variable language_\">super</span>(props);\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {\n            <span class=\"hljs-attr\">user</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">null</span>,\n        };\n    }\n\n    <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UsrClient</span>(<span class=\"hljs-string\">'http://localhost:8083'</span>); <span class=\"hljs-comment\">// 사용 중인 gRPC 서버 URL로 교체해주세요</span>\n\n        <span class=\"hljs-comment\">// 사용자 이름을 사용해 요청 생성</span>\n        <span class=\"hljs-keyword\">const</span> request = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserRequest</span>();\n        <span class=\"hljs-comment\">// 원하는 사용자 이름으로 대체해주세요</span>\n\n        <span class=\"hljs-comment\">// GetUser RPC 호출</span>\n        client.<span class=\"hljs-title function_\">getUser</span>(request, {}, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, response</span>) =></span> {\n            <span class=\"hljs-keyword\">if</span> (!err) {\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({ <span class=\"hljs-attr\">user</span>: response.<span class=\"hljs-title function_\">getUser</span>() });\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({ <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">'사용자 데이터를 불러오는 중 오류 발생'</span> });\n            }\n        });\n    }\n\n    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">const</span> { user, error } = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;\n\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n                {error ? (\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Error: {error}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                ) : user ? (\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>사용자 세부 정보<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>이름: {user.getName()}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>나이: {user.getAge()}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>주소<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>거리: {user.getAddress().getStreet()}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>도시: {user.getAddress().getCity()}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>주: {user.getAddress().getState()}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>우편번호: {user.getAddress().getZip()}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                        {/* 전화번호 정보를 비슷하게 표시할 수 있습니다 */}\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>업데이트 날짜: {user.getUpdatedAt()}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>생성 날짜: {user.getCreatedAt()}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                ) : (\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>로딩 중...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                )}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n        );\n    }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">UserDetail</span>;\n</code></pre>\n<p>App.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> logo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./logo.svg'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">UserDetail</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/UserDetails'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App-header\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{logo}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App-logo\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"logo\"</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">UserDetail</span>></span>\n          \n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">UserDetail</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<h3>Step 12: React 앱 빌드 및 실행</h3>\n<p>React 앱을 빌드하고 실행하세요.</p>\n<pre><code class=\"hljs language-js\">npm start\n</code></pre>\n<p>결과 -</p>\n<h1>결론</h1>\n<p>본 튜토리얼에서는 Go로 GRPC 서비스를 생성하는 방법, Envoy를 프록시로 구성하는 방법, 그리고 React 앱을 빌드하여 Envoy를 통해 GRPC 서비스와 통신하는 과정을 다루었습니다. 이 설정은 분산 시스템을 구축하는 확장 가능하고 효율적인 방법을 제공합니다. 필요에 따라 서비스 및 React 앱에 더 많은 GRPC 메서드와 기능을 추가하여 이 예제를 확장할 수 있습니다. 즐거운 코딩하세요!</p>\n<p>더 많은 정보를 위해 코드를 확인하세요: GitHub</p>\n</body>\n</html>\n"},"__N_SSG":true}