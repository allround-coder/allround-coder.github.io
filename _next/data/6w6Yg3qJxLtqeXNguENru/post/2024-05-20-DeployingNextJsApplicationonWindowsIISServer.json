{"pageProps":{"post":{"title":"윈도우 IIS 서버에 NextJs 애플리케이션을 배포하는 방법","description":"","date":"2024-05-20 22:10","slug":"2024-05-20-DeployingNextJsApplicationonWindowsIISServer","content":"\n\n\n![Deploying Next.js Application on Windows IIS Server](/assets/img/2024-05-20-DeployingNextJsApplicationonWindowsIISServer_0.png)\n\nNextJS는 단일 페이지 애플리케이션을 만들기 위한 서버 측 렌더링된 React 기반 프레임워크입니다. 서버 측 렌더링 기능으로 인해 매우 인기가 높습니다. NextJS를 사용하여 다음 애플리케이션을 작성하는 것은 매우 간단합니다. NextJS를 사용하기 위해 명시적으로 구성할 필요가 없습니다. npm run dev를 실행하고 애플리케이션을 구축하기 시작하면 됩니다.\n\n# 서버 측 렌더링이란?\n\n서버 측 렌더링(SSR)은 프런트엔드 프레임워크가 웹페이지를 준비하기 위해 사용자별 데이터를 서버 측에서 가져와 사용자 화면으로 보내는 능력입니다. 사용자에게 표시하기 위해 클라이언트 측에서 웹페이지를 준비하는 대신에 서버 측에서 웹페이지를 준비합니다.\n \n\n<div class=\"content-ad\"></div>\n\nNextJS에서는 서버에서 페이지를 렌더링하거나 일반적인 create-react-app SPA처럼 클라이언트 측에서 렌더링할 수 있는 옵션이 있습니다.\n\n서버 측 렌더링의 장점은 분명히 있습니다. 그래서 NextJS 프레임워크가 인기를 얻은 이유이기도 합니다. SSR 덕분에 초기 페이지 로딩이 빨라져 최종 사용자에게 더 나은 상호작용을 제공합니다. 또한 검색 엔진이 사이트를 크롤링하여 더 나은 검색 엔진 최적화를 제공하는데 도움이 됩니다.\n\n# 만약 NextJS가 프론트엔드 프레임워크라면, 이 프레임워크는 어떻게 서버에서 웹 페이지를 준비하는 것일까요?\n\nNextJS 프레임워크는 NodeJS 기반으로 만들어졌습니다. 아시다시피, NodeJS는 서버 측에서 페이지를 준비하기 위해 사용되는 NextJS 애플리케이션에 강력함을 제공하는 백엔드 JavaScript 런타임 환경입니다.\n\n<div class=\"content-ad\"></div>\n\n# NextJS 애플리케이션 배포하기\n\nWindows IIS에서 Next.js 애플리케이션을 호스팅하는 방법을 여러 곳에서 찾아보았어요. 괜찮은 튜토리얼을 몇 개 찾았지만 제 문제를 해결해 주지는 못했어요. Vercel과 Netlify, Heroku 등과 같은 유사한 플랫폼에 호스팅하는 것이 이상적일 것 같아요. 하지만 제 애플리케이션을 로컬에서 호스팅하고 싶어요. 왜냐하면 내 애플리케이션에 대중이 접근하는 것을 원하지 않기 때문이에요. 그건 제 개인적인 용도로 사용할 거거든요. 그래서 여러분이 구글에서 시간을 낭비하지 않고 필요한 정보를 찾을 수 있도록, 간단한 가이드를 제공해 드리겠어요.\n\n하지만 그 전에, 사용하려는 것에 대해 간단히 설명해볼게요.\n\n저희는 iisnode을 사용하려고 해요. iisnode은 C++로 작성된 오픈 소스 네이티브 IIS 모듈로, Node.js를 Windows IIS 내에서 실행할 수 있게 해줘요. 저희는 IIS 서버 배포 방식으로 Node.js를 사용할 거에요. 그러려면 Server.js와 web.config 두 파일이 필요하답니다.\n\n<div class=\"content-ad\"></div>\n\n지금 application의 진입점인 server.js를 만들어보겠습니다:\n\n```js\nconst { createServer } = require(\"http\");\nconst { parse } = require(\"url\");\nconst next = require(\"next\");\n\nconst dev = process.env.NODE_ENV !== \"production\";\n\nconst port = process.env.PORT || 3000; // 포트를 IIS가 실행 중인 포트로 변경하세요. 기본값은 80이고 개발 중이면 3000입니다.\nconst hostname = \"localhost\";\nconst app = next({ dev, hostname, port });\nconst handle = app.getRequestHandler();\n\napp.prepare().then(() => {\n  createServer(async (req, res) => {\n    try {\n      const parsedUrl = parse(req.url, true);\n      const { pathname, query } = parsedUrl;\n\n      if (pathname === \"/a\") {\n        await app.render(req, res, \"/a\", query);\n      } else if (pathname === \"/b\") {\n        await app.render(req, res, \"/b\", query);\n      } else {\n        await handle(req, res, parsedUrl);\n      }\n    } catch (err) {\n      console.error(\"Error occurred handling\", req.url, err);\n      res.statusCode = 500;\n      res.end(\"internal server error\");\n    }\n  })\n    .once(\"error\", (err) => {\n      console.error(err);\n      process.exit(1);\n    })\n    .listen(port, async () => {\n      console.log(`> Ready on http://localhost:${port}`);\n    });\n});\n```\n\n웹 구성 파일인 web.config은 IIS 및 ASP.NET Core Module이 응용 프로그램을 구성하는 데 사용하는 파일입니다. 그래서 여기에 우리의 web.config 파일이 있습니다:\n\n```js\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n     이 구성 파일은 iisnode를 사용하여 IIS 또는 IIS Express에서 노드 프로세스를 실행하는 경우 필요합니다.\n     자세한 내용은 다음을 참조하십시오:\n\n     https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config\n-->\n\n<configuration>\n  <system.webServer>\n    <!-- WebSocket 지원에 대한 자세한 정보는 http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx에서 확인할 수 있습니다 -->\n    <webSocket enabled=\"false\" />\n    <handlers>\n      <!-- server.js 파일이 iisnode 모듈에 의해 처리되는 node.js 사이트임을 나타냄 -->\n      <add name=\"iisnode\" path=\"server.js\" verb=\"*\" modules=\"iisnode\"/>\n    </handlers>\n    <rewrite>\n      <rules>\n        <!-- node-inspector 디버깅을 위한 요청 방해하지 않음 -->\n        <rule name=\"NodeInspector\" patternSyntax=\"ECMAScript\" stopProcessing=\"true\">\n          <match url=\"^server.js\\/debug[\\/]?\" />\n        </rule>\n\n        <!-- 먼저 /public 폴더의 물리적 파일과 일치하는 들어오는 URL을 고려 -->\n        <rule name=\"StaticContent\">\n          <action type=\"Rewrite\" url=\"public{REQUEST_URI}\"/>\n        </rule>\n\n        <!-- 모든 다른 URL은 node.js 사이트 진입점으로 매핑됨 -->\n        <rule name=\"DynamicContent\">\n          <conditions>\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"True\"/>\n          </conditions>\n          <action type=\"Rewrite\" url=\"server.js\"/>\n        </rule>\n      </rules>\n    </rewrite>\n    \n    <!-- 'bin' 디렉토리는 node.js에서 특별한 의미가 없으며, 앱을 그 안에 배치할 수 있음 -->\n    <security>\n      <requestFiltering>\n        <hiddenSegments>\n          <add segment=\"node_modules\"/>\n        </hiddenSegments>\n      </requestFiltering>\n    </security>\n\n    <!-- 오류 응답을 변경하지 않도록 함 -->\n    <httpErrors existingResponse=\"PassThrough\" />\n    <iisnode node_env=\"production\"/>\n\n    <!--\n      다음 옵션을 사용하여 IIS 내에서 Node를 호스트하는 방법을 제어할 수 있습니다:\n        * watchedFiles: 변경 사항을 감지하여 서버를 다시 시작할 파일 목록\n        * node_env: NODE_ENV 환경 변수로 전달될 값\n        * debuggingEnabled - 기본 디버거가 활성화되는지 여부\n\n      모든 옵션 목록은 https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config에서 확인 가능합니다\n    -->\n    <!--<iisnode watchedFiles=\"web.config;*.js\"/>-->\n  </system.webServer>\n</configuration>\n```\n\n<div class=\"content-ad\"></div>\n\n웹 구성 파일을 추가한 후에는 package.json을 약간 변경해야 합니다. npm run start가 서버를 시작하도록 설정되어야 하며 next start를 사용하지 않아야 합니다. 다음은 package.json 스크립트가 보이는 방식입니다:\n\n```js\n  \"scripts\": {\n    \"dev\": \"node server.js\",\n    \"build\": \"next build\",\n    \"start\": \"node server.js\",\n    \"lint\": \"next lint\"\n  },\n```\n\nserver.js를 추가하고 web.config를 추가한 후 npm run build를 실행하면 애플리케이션의 루트 폴더가 다음과 같이 보입니다.\n\n![애플리케이션 루트 폴더](/assets/img/2024-05-20-DeployingNextJsApplicationonWindowsIISServer_1.png)\n\n<div class=\"content-ad\"></div>\n\n# IIS에서 NextJS 애플리케이션을 배포하는 방법\n\n배포를 설정하기 전에 IISNode와 URLRewrite를 설치해야 합니다. 그 후, IIS에 새 웹 사이트를 생성하고 물리적 경로를 .next, node_modules, server.js 및 web.config가 포함된 폴더로 지정하세요. 권한 문제나 다른 가능한 문제를 피하려면 해당 폴더를 Windows Server의 루트 사용자 폴더 안에 배치하세요.\n\nIIS에서 웹 서버를 시작하면 자동으로 iisnode이라는 새 폴더가 생성됩니다.\n\n만약 배포 폴더가 C:/ 드라이브의 wwwroot에 있다면 전체 폴더에 대해 IIS_Users에게 읽기/쓰기 권한을 명시적으로 부여해야 할 수 있습니다. 다른 예상치 못한 오류가 발생하는 경우, 댓글을 남기거나 내 Discord @pallepadehat을 추가해주세요. 도와드릴게요!\n\n<div class=\"content-ad\"></div>\n\n이 Github Repo에서 소스 코드를 확인할 수 있어요.","ogImage":{"url":"/assets/img/2024-05-20-DeployingNextJsApplicationonWindowsIISServer_0.png"},"coverImage":"/assets/img/2024-05-20-DeployingNextJsApplicationonWindowsIISServer_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-20-DeployingNextJsApplicationonWindowsIISServer_0.png\" alt=\"Deploying Next.js Application on Windows IIS Server\"></p>\n<p>NextJS는 단일 페이지 애플리케이션을 만들기 위한 서버 측 렌더링된 React 기반 프레임워크입니다. 서버 측 렌더링 기능으로 인해 매우 인기가 높습니다. NextJS를 사용하여 다음 애플리케이션을 작성하는 것은 매우 간단합니다. NextJS를 사용하기 위해 명시적으로 구성할 필요가 없습니다. npm run dev를 실행하고 애플리케이션을 구축하기 시작하면 됩니다.</p>\n<h1>서버 측 렌더링이란?</h1>\n<p>서버 측 렌더링(SSR)은 프런트엔드 프레임워크가 웹페이지를 준비하기 위해 사용자별 데이터를 서버 측에서 가져와 사용자 화면으로 보내는 능력입니다. 사용자에게 표시하기 위해 클라이언트 측에서 웹페이지를 준비하는 대신에 서버 측에서 웹페이지를 준비합니다.</p>\n<p>NextJS에서는 서버에서 페이지를 렌더링하거나 일반적인 create-react-app SPA처럼 클라이언트 측에서 렌더링할 수 있는 옵션이 있습니다.</p>\n<p>서버 측 렌더링의 장점은 분명히 있습니다. 그래서 NextJS 프레임워크가 인기를 얻은 이유이기도 합니다. SSR 덕분에 초기 페이지 로딩이 빨라져 최종 사용자에게 더 나은 상호작용을 제공합니다. 또한 검색 엔진이 사이트를 크롤링하여 더 나은 검색 엔진 최적화를 제공하는데 도움이 됩니다.</p>\n<h1>만약 NextJS가 프론트엔드 프레임워크라면, 이 프레임워크는 어떻게 서버에서 웹 페이지를 준비하는 것일까요?</h1>\n<p>NextJS 프레임워크는 NodeJS 기반으로 만들어졌습니다. 아시다시피, NodeJS는 서버 측에서 페이지를 준비하기 위해 사용되는 NextJS 애플리케이션에 강력함을 제공하는 백엔드 JavaScript 런타임 환경입니다.</p>\n<h1>NextJS 애플리케이션 배포하기</h1>\n<p>Windows IIS에서 Next.js 애플리케이션을 호스팅하는 방법을 여러 곳에서 찾아보았어요. 괜찮은 튜토리얼을 몇 개 찾았지만 제 문제를 해결해 주지는 못했어요. Vercel과 Netlify, Heroku 등과 같은 유사한 플랫폼에 호스팅하는 것이 이상적일 것 같아요. 하지만 제 애플리케이션을 로컬에서 호스팅하고 싶어요. 왜냐하면 내 애플리케이션에 대중이 접근하는 것을 원하지 않기 때문이에요. 그건 제 개인적인 용도로 사용할 거거든요. 그래서 여러분이 구글에서 시간을 낭비하지 않고 필요한 정보를 찾을 수 있도록, 간단한 가이드를 제공해 드리겠어요.</p>\n<p>하지만 그 전에, 사용하려는 것에 대해 간단히 설명해볼게요.</p>\n<p>저희는 iisnode을 사용하려고 해요. iisnode은 C++로 작성된 오픈 소스 네이티브 IIS 모듈로, Node.js를 Windows IIS 내에서 실행할 수 있게 해줘요. 저희는 IIS 서버 배포 방식으로 Node.js를 사용할 거에요. 그러려면 Server.js와 web.config 두 파일이 필요하답니다.</p>\n<p>지금 application의 진입점인 server.js를 만들어보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { createServer } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"http\"</span>);\n<span class=\"hljs-keyword\">const</span> { parse } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"url\"</span>);\n<span class=\"hljs-keyword\">const</span> next = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"next\"</span>);\n\n<span class=\"hljs-keyword\">const</span> dev = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> !== <span class=\"hljs-string\">\"production\"</span>;\n\n<span class=\"hljs-keyword\">const</span> port = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">3000</span>; <span class=\"hljs-comment\">// 포트를 IIS가 실행 중인 포트로 변경하세요. 기본값은 80이고 개발 중이면 3000입니다.</span>\n<span class=\"hljs-keyword\">const</span> hostname = <span class=\"hljs-string\">\"localhost\"</span>;\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">next</span>({ dev, hostname, port });\n<span class=\"hljs-keyword\">const</span> handle = app.<span class=\"hljs-title function_\">getRequestHandler</span>();\n\napp.<span class=\"hljs-title function_\">prepare</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-keyword\">async</span> (req, res) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> parsedUrl = <span class=\"hljs-title function_\">parse</span>(req.<span class=\"hljs-property\">url</span>, <span class=\"hljs-literal\">true</span>);\n      <span class=\"hljs-keyword\">const</span> { pathname, query } = parsedUrl;\n\n      <span class=\"hljs-keyword\">if</span> (pathname === <span class=\"hljs-string\">\"/a\"</span>) {\n        <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">render</span>(req, res, <span class=\"hljs-string\">\"/a\"</span>, query);\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pathname === <span class=\"hljs-string\">\"/b\"</span>) {\n        <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">render</span>(req, res, <span class=\"hljs-string\">\"/b\"</span>, query);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">handle</span>(req, res, parsedUrl);\n      }\n    } <span class=\"hljs-keyword\">catch</span> (err) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Error occurred handling\"</span>, req.<span class=\"hljs-property\">url</span>, err);\n      res.<span class=\"hljs-property\">statusCode</span> = <span class=\"hljs-number\">500</span>;\n      res.<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-string\">\"internal server error\"</span>);\n    }\n  })\n    .<span class=\"hljs-title function_\">once</span>(<span class=\"hljs-string\">\"error\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n      process.<span class=\"hljs-title function_\">exit</span>(<span class=\"hljs-number\">1</span>);\n    })\n    .<span class=\"hljs-title function_\">listen</span>(port, <span class=\"hljs-keyword\">async</span> () => {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`> Ready on http://localhost:<span class=\"hljs-subst\">${port}</span>`</span>);\n    });\n});\n</code></pre>\n<p>웹 구성 파일인 web.config은 IIS 및 ASP.NET Core Module이 응용 프로그램을 구성하는 데 사용하는 파일입니다. 그래서 여기에 우리의 web.config 파일이 있습니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;?xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"utf-8\"</span>?>\n&#x3C;!--\n     이 구성 파일은 iisnode를 사용하여 <span class=\"hljs-variable constant_\">IIS</span> 또는 <span class=\"hljs-variable constant_\">IIS</span> <span class=\"hljs-title class_\">Express</span>에서 노드 프로세스를 실행하는 경우 필요합니다.\n     자세한 내용은 다음을 참조하십시오:\n\n     <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config</span>\n-->\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">configuration</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">system.webServer</span>></span>\n    <span class=\"hljs-comment\">&#x3C;!-- WebSocket 지원에 대한 자세한 정보는 http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx에서 확인할 수 있습니다 --></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">webSocket</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"false\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">handlers</span>></span>\n      <span class=\"hljs-comment\">&#x3C;!-- server.js 파일이 iisnode 모듈에 의해 처리되는 node.js 사이트임을 나타냄 --></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"iisnode\"</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"server.js\"</span> <span class=\"hljs-attr\">verb</span>=<span class=\"hljs-string\">\"*\"</span> <span class=\"hljs-attr\">modules</span>=<span class=\"hljs-string\">\"iisnode\"</span>/></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">handlers</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">rewrite</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">rules</span>></span>\n        <span class=\"hljs-comment\">&#x3C;!-- node-inspector 디버깅을 위한 요청 방해하지 않음 --></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">rule</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"NodeInspector\"</span> <span class=\"hljs-attr\">patternSyntax</span>=<span class=\"hljs-string\">\"ECMAScript\"</span> <span class=\"hljs-attr\">stopProcessing</span>=<span class=\"hljs-string\">\"true\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">match</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">\"^server.js\\/debug[\\/]?\"</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">rule</span>></span>\n\n        <span class=\"hljs-comment\">&#x3C;!-- 먼저 /public 폴더의 물리적 파일과 일치하는 들어오는 URL을 고려 --></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">rule</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"StaticContent\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"Rewrite\"</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">\"public{REQUEST_URI}\"</span>/></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">rule</span>></span>\n\n        <span class=\"hljs-comment\">&#x3C;!-- 모든 다른 URL은 node.js 사이트 진입점으로 매핑됨 --></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">rule</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"DynamicContent\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">conditions</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">\"{REQUEST_FILENAME}\"</span> <span class=\"hljs-attr\">matchType</span>=<span class=\"hljs-string\">\"IsFile\"</span> <span class=\"hljs-attr\">negate</span>=<span class=\"hljs-string\">\"True\"</span>/></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">conditions</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"Rewrite\"</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">\"server.js\"</span>/></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">rule</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">rules</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">rewrite</span>></span>\n    \n    <span class=\"hljs-comment\">&#x3C;!-- 'bin' 디렉토리는 node.js에서 특별한 의미가 없으며, 앱을 그 안에 배치할 수 있음 --></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">security</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">requestFiltering</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">hiddenSegments</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">segment</span>=<span class=\"hljs-string\">\"node_modules\"</span>/></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">hiddenSegments</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">requestFiltering</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">security</span>></span>\n\n    <span class=\"hljs-comment\">&#x3C;!-- 오류 응답을 변경하지 않도록 함 --></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">httpErrors</span> <span class=\"hljs-attr\">existingResponse</span>=<span class=\"hljs-string\">\"PassThrough\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">iisnode</span> <span class=\"hljs-attr\">node_env</span>=<span class=\"hljs-string\">\"production\"</span>/></span>\n\n    <span class=\"hljs-comment\">&#x3C;!--\n      다음 옵션을 사용하여 IIS 내에서 Node를 호스트하는 방법을 제어할 수 있습니다:\n        * watchedFiles: 변경 사항을 감지하여 서버를 다시 시작할 파일 목록\n        * node_env: NODE_ENV 환경 변수로 전달될 값\n        * debuggingEnabled - 기본 디버거가 활성화되는지 여부\n\n      모든 옵션 목록은 https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config에서 확인 가능합니다\n    --></span>\n    <span class=\"hljs-comment\">&#x3C;!--&#x3C;iisnode watchedFiles=\"web.config;*.js\"/>--></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">system.webServer</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">configuration</span>></span></span>\n</code></pre>\n<p>웹 구성 파일을 추가한 후에는 package.json을 약간 변경해야 합니다. npm run start가 서버를 시작하도록 설정되어야 하며 next start를 사용하지 않아야 합니다. 다음은 package.json 스크립트가 보이는 방식입니다:</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"dev\"</span>: <span class=\"hljs-string\">\"node server.js\"</span>,\n    <span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"next build\"</span>,\n    <span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-string\">\"node server.js\"</span>,\n    <span class=\"hljs-string\">\"lint\"</span>: <span class=\"hljs-string\">\"next lint\"</span>\n  },\n</code></pre>\n<p>server.js를 추가하고 web.config를 추가한 후 npm run build를 실행하면 애플리케이션의 루트 폴더가 다음과 같이 보입니다.</p>\n<p><img src=\"/assets/img/2024-05-20-DeployingNextJsApplicationonWindowsIISServer_1.png\" alt=\"애플리케이션 루트 폴더\"></p>\n<h1>IIS에서 NextJS 애플리케이션을 배포하는 방법</h1>\n<p>배포를 설정하기 전에 IISNode와 URLRewrite를 설치해야 합니다. 그 후, IIS에 새 웹 사이트를 생성하고 물리적 경로를 .next, node_modules, server.js 및 web.config가 포함된 폴더로 지정하세요. 권한 문제나 다른 가능한 문제를 피하려면 해당 폴더를 Windows Server의 루트 사용자 폴더 안에 배치하세요.</p>\n<p>IIS에서 웹 서버를 시작하면 자동으로 iisnode이라는 새 폴더가 생성됩니다.</p>\n<p>만약 배포 폴더가 C:/ 드라이브의 wwwroot에 있다면 전체 폴더에 대해 IIS_Users에게 읽기/쓰기 권한을 명시적으로 부여해야 할 수 있습니다. 다른 예상치 못한 오류가 발생하는 경우, 댓글을 남기거나 내 Discord @pallepadehat을 추가해주세요. 도와드릴게요!</p>\n<p>이 Github Repo에서 소스 코드를 확인할 수 있어요.</p>\n</body>\n</html>\n"},"__N_SSG":true}