{"pageProps":{"post":{"title":"React-js를 이용한 초보자를 위한 Socketio를 활용한 간단한 채팅 애플리케이션","description":"","date":"2024-05-12 19:26","slug":"2024-05-12-SimpleChatappusingSocketioInReact-jsForBeginners","content":"\n\n안녕하세요 여러분! 이 글에서는 socket.io와 React js를 사용하여 간단한 채팅 애플리케이션을 만드는 방법에 대해 알아볼 거에요. 특히 초보자분들을 위한 내용으로 모든 단계를 차근차근 알려드릴 거에요. 마지막에는 React-js로 간단한 채팅 애플리케이션을 만들게 될 거에요.\n\n![SimpleChatappusingSocketioInReact-jsForBeginners](/assets/img/2024-05-12-SimpleChatappusingSocketioInReact-jsForBeginners_0.png)\n\n## Socket.io란 무엇인가요?\n\nSocket.IO는 웹 클라이언트와 서버 간 실시간 양방향 통신을 용이하게 하는 강력한 JavaScript 라이브러리입니다. 사용자와 응용 프로그램 간 즉각적인 데이터 교환을 허용하는 다리 역할을 하며, 라이브 채팅, 멀티플레이어 게임 및 협업 편집 도구와 같은 참여형 경험을 만들기에 이상적입니다. 강력한 기능과 사용 편의성을 갖춘 Socket.IO는 현대적이고 인터랙티브한 웹 애플리케이션을 구축하기 위한 주요 기술로 자리잡았습니다.\n\n\n\n단계 1: 새 폴더 생성하기\n\n여기서 빈 폴더를 생성합니다. 이 폴더 안에 클라이언트 측(react)과 서버 측(socket.io)의 2개 개별 폴더를 생성합니다.\n\n```js\nmkdir react-chatapp\ncd react-chatapp\n```\n\n단계 2: socket.io를 사용하여 소켓 만들기\n\n\n\n먼저 서버 측 작업을 위해 서버 폴더를 만들어야 해요. 다음 명령어를 사용하세요.\n\n```js\nmkdir server\ncd server\n```\n\n새로운 Node.js 프로젝트를 초기화하세요:\n\n```js\nnpm init -y\n```\n\n\n\n\nsocket.io 라이브러리 설치하기\n\n```js\nnpm install socket.io\n```\n\nsocket.io를 설치한 후 server.js 파일을 만들고 아래 코드를 추가해주세요.\n\n```js\nconst http = require('http');\nconst { Server } = require('socket.io');\n\nconst server = http.createServer((req, res) => {\n    res.end('Hello World');\n});\n\nconst io = new Server(server, {\n    cors: {\n        origin: \"*\",\n        methods: [\"GET\", \"POST\"]\n    }\n});\n\nio.on('connection', (socket) => {\n    console.log('사용자가 연결되었습니다.');\n\n    socket.on('message', (message) => {\n        io.emit('message', message);\n    });\n\n    socket.on('disconnect', () => {\n        console.log('사용자가 연결을 끊었습니다.');\n    });\n});\n\nconst PORT = process.env.PORT || 4000;\n\nserver.listen(PORT, () => {\n    console.log(`서버가 포트 ${PORT}에서 실행 중입니다.`);\n});\n```\n\n\n\n여기, 이 코드는 Node.js의 내장 http 모듈을 사용하여 기본 HTTP 서버를 설정하고 Socket.IO 서버를 연결하는 방법을 보여줍니다. Socket.IO 서버는 클라이언트 연결을 수신하고 모든 연결된 클라이언트에 메시지를 브로드캐스트하며 클라이언트가 연결 또는 연결 해제될 때 로그를 기록합니다.\n\n단계 3: React js에서 Socket.io 구현\n\n\"react-chatapp\" 폴더로 이동하여 리액트 프로젝트를 만듭니다.\n\n```sh\nnpx create-react-app client\n```\n\n\n\n리액트 프로젝트를 설치한 후 프로젝트 안으로 이동하여 의존성을 설치하세요.\n\n```js\ncd client\nnpm start\n```\n\n리액트 기본 의존성을 설치한 후 socket.io-client와 부트스트랩 라이브러리를 리액트에 설치하세요.\n\n```js\nnpm install socket.io-client bootstrap\n```\n\n\n\n- Socket.IO-Client:\n\n- socket.io-client은 Socket.IO를 위한 클라이언트 측 라이브러리로, 실시간 양방향 통신 라이브러리입니다.\n- 이를 통해 웹 클라이언트(예: 브라우저)가 Socket.IO 서버와 연결을 설정하고 실시간으로 통신할 수 있습니다.\n- 서버에 이벤트를 전송하거나 서버로부터 받은 이벤트를 처리하는 방법을 제공합니다.\n- socket.io-client를 사용하면 채팅, 실시간 업데이트, 협업과 같은 기능을 지원하는 대화형 웹 애플리케이션을 개발할 수 있습니다.\n\n2. Bootstrap:\n\n- Bootstrap은 반응형 및 모바일 우선 웹 프로젝트를 구축하기 위한 인기 있는 프론트엔드 프레임워크입니다.\n- 버튼, 폼, 내비게이션 바와 같은 사전 스타일이 적용된 CSS 컴포넌트 및 모달, 툴팁과 같은 JavaScript 플러그인을 제공합니다.\n- Bootstrap의 그리드 시스템을 통해 다양한 화면 크기와 장치에 대응하는 반응형 레이아웃을 생성할 수 있습니다.\n- Bootstrap을 사용하면 다양한 준비가된 컴포넌트와 스타일을 제공하여 웹 애플리케이션을 디자인하고 스타일링하는 데 시간과 노력을 절약할 수 있습니다.\n\n\n\n그럼 src/App.js 파일로 이동하여 다음 코드로 교체하세요\n\nsrc/App.js\n\n```js\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../src/App.css';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:4000');\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState('');\n  const [isUsernameSubmitted, setIsUsernameSubmitted] = useState(false);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isUsernameSet, setIsUsernameSet] = useState(false);\n\n  useEffect(() => {\n    const storedUsername = localStorage.getItem('username');\n    if (storedUsername) {\n      setUsername(storedUsername);\n      setIsUsernameSet(true);\n    }\n\n    socket.on('message', (message) => {\n      setMessages((prevMessages) => [...prevMessages, message]);\n    });\n\n    return () => {\n      socket.off('message');\n    };\n  }, []);\n\n  const handleUsernameChange = (e) => {\n    setUsername(e.target.value);\n  };\n\n  const handleUsernameSubmit = () => {\n    localStorage.setItem('username', username);\n    setIsUsernameSubmitted(true);\n  };\n\n  const handleMessageSend = () => {\n    if (!inputMessage.trim()) return;\n\n    socket.emit('message', {\n      username,\n      text: inputMessage\n    });\n\n    setInputMessage('');\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-6\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title text-center mb-4\">Chat App</h5>\n              {!isUsernameSubmitted ? (\n                <div>\n                  <div className=\"mb-3\">\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      placeholder=\"사용자 이름 입력\"\n                      value={username}\n                      onChange={handleUsernameChange}\n                    />\n                  </div>\n                  <button\n                    className=\"btn btn-primary btn-block\"\n                    onClick={handleUsernameSubmit}\n                  >\n                    사용자 이름 설정\n                  </button>\n                </div>\n              ) : (\n                <div>\n                  <h4 className=\"text-center mb-4\">환영합니다, {username}님!</h4>\n                  <div className=\"message-container row\">\n                    {messages.map((msg, index) => (\n                      <div key={index} className=\"message col-md-8 offset-md-2\">\n                        <strong>{msg.username}:</strong> {msg.text}\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"input-group mb-3\">\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      placeholder=\"메시지 입력...\"\n                      value={inputMessage}\n                      onChange={(e) => setInputMessage(e.target.value)}\n                    />\n                    <button\n                      className=\"btn btn-primary\"\n                      onClick={handleMessageSend}\n                    >\n                      전송\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n이 코드에서는 React와 Socket.IO를 사용하여 실시간 채팅 애플리케이션을 만드는 과정을 안내하겠습니다. 우리는 먼저 애플리케이션의 기본 구조를 설정한 다음 사용자가 실시간으로 메시지를 보내고 받을 수 있도록 기능을 점진적으로 추가할 것입니다.\n\n\n\n단계 1: 사용자 이름 입력 컴포넌트 생성\n\n- 먼저 UsernameInput이라는 React 컴포넌트를 만드세요. 이 컴포넌트는 사용자가 사용자 이름을 입력할 수 있는 입력 필드를 렌더링합니다.\n- useState 훅을 사용하여 사용자 이름 입력 필드의 상태를 관리하세요.\n- 사용자 이름이 제출되었는지 여부에 따라 채팅 인터페이스를 조건부로 렌더링하세요.\n\n단계 2: 채팅 인터페이스 표시\n\n- 사용자가 사용자 이름을 제출하면 채팅 인터페이스를 표시하세요.\n- 메시지를 입력할 수있는 입력 필드와 메시지를 전송하는 버튼을 제공하세요.\n- 사용자 이름이 제출되었을 때에만 채팅 인터페이스를 표시하도록 조건부 렌더링을 사용하세요.\n\n\n\n단계 3: 메시지 제출 처리\n\n- 메시지 제출을 처리하기 위해 handleMessageSend라는 함수를 정의하십시오.\n- 사용자가 전송 버튼을 클릭하면이 함수를 호출하여 Socket.IO를 통해 서버로 메시지를 전송하십시오.\n- useState 훅을 사용하여 입력 메시지 필드의 상태를 관리하고, 메시지를 전송 한 후에 필드를 지우십시오.\n\n단계 4: 실시간 통신을 위한 Socket.IO 통합\n\n- socket.io-client 라이브러리를 가져와 Socket.IO 서버에 연결을 설정하십시오.\n- 서버에 io 함수를 사용하여 연결하고 서버 URL을 제공하십시오.\n- 서버에서 수신된 메시지를 처리하는 이벤트 리스너를 정의하십시오.\n- 사용자가 메시지를 보낼 때 서버로 메시지를 발신하고, 클라이언트와 서버 간의 양방향 통신을 보장하십시오.\n\n\n\n그럼 src/App.css 파일 안으로 들어가서 다음 코드를 다음과 같이 바꿔주세요.\n\nsrc/App.css\n\n```css\nbody{\n  background-color: cadetblue;\n}\n\n/* Card를 가운데 정렬 */\n.card {\n  margin-top: 50px;\n}\n\n/* 메시지 컨테이너를 스타일링 */\n.message-container {\n  max-height: 300px;\n  overflow-y: auto;\n  padding: 10px;\n}\n\n/* 각각의 메시지 스타일링 */\n.message {\n  background-color: burlywood;\n  padding: 10px;\n  margin-bottom: 5px;\n  border-radius: 5px;\n}\n\n/* 입력 그룹을 스타일링 */\n.input-group {\n \n  /* bottom: 0;\n  left: 0;\n  right: 0; */\n  padding: 15px;\n  /* background-color: #f9f9f9;\n  border-top: 1px solid #ccc; */\n}\n```\n\n위 단계를 모두 완료하면 서버를 실행할 시간입니다.\n서버 폴더로 이동하여 다음 명령어를 실행하세요.\n\n\n\n```js\nnode server.js\n```\n\n다음으로, client 폴더로 이동하여 다음 명령어를 실행하세요\n\n```js\nnpm start\n```\n\n결과:```\n\n\n\n![이미지 1](/assets/img/2024-05-12-SimpleChatappusingSocketioInReact-jsForBeginners_1.png)\n\n![이미지 2](/assets/img/2024-05-12-SimpleChatappusingSocketioInReact-jsForBeginners_2.png)\n\n도움이 되길 바라요...","ogImage":{"url":"/assets/img/2024-05-12-SimpleChatappusingSocketioInReact-jsForBeginners_0.png"},"coverImage":"/assets/img/2024-05-12-SimpleChatappusingSocketioInReact-jsForBeginners_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요 여러분! 이 글에서는 socket.io와 React js를 사용하여 간단한 채팅 애플리케이션을 만드는 방법에 대해 알아볼 거에요. 특히 초보자분들을 위한 내용으로 모든 단계를 차근차근 알려드릴 거에요. 마지막에는 React-js로 간단한 채팅 애플리케이션을 만들게 될 거에요.</p>\n<p><img src=\"/assets/img/2024-05-12-SimpleChatappusingSocketioInReact-jsForBeginners_0.png\" alt=\"SimpleChatappusingSocketioInReact-jsForBeginners\"></p>\n<h2>Socket.io란 무엇인가요?</h2>\n<p>Socket.IO는 웹 클라이언트와 서버 간 실시간 양방향 통신을 용이하게 하는 강력한 JavaScript 라이브러리입니다. 사용자와 응용 프로그램 간 즉각적인 데이터 교환을 허용하는 다리 역할을 하며, 라이브 채팅, 멀티플레이어 게임 및 협업 편집 도구와 같은 참여형 경험을 만들기에 이상적입니다. 강력한 기능과 사용 편의성을 갖춘 Socket.IO는 현대적이고 인터랙티브한 웹 애플리케이션을 구축하기 위한 주요 기술로 자리잡았습니다.</p>\n<p>단계 1: 새 폴더 생성하기</p>\n<p>여기서 빈 폴더를 생성합니다. 이 폴더 안에 클라이언트 측(react)과 서버 측(socket.io)의 2개 개별 폴더를 생성합니다.</p>\n<pre><code class=\"hljs language-js\">mkdir react-chatapp\ncd react-chatapp\n</code></pre>\n<p>단계 2: socket.io를 사용하여 소켓 만들기</p>\n<p>먼저 서버 측 작업을 위해 서버 폴더를 만들어야 해요. 다음 명령어를 사용하세요.</p>\n<pre><code class=\"hljs language-js\">mkdir server\ncd server\n</code></pre>\n<p>새로운 Node.js 프로젝트를 초기화하세요:</p>\n<pre><code class=\"hljs language-js\">npm init -y\n</code></pre>\n<p>socket.io 라이브러리 설치하기</p>\n<pre><code class=\"hljs language-js\">npm install socket.<span class=\"hljs-property\">io</span>\n</code></pre>\n<p>socket.io를 설치한 후 server.js 파일을 만들고 아래 코드를 추가해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">Server</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'socket.io'</span>);\n\n<span class=\"hljs-keyword\">const</span> server = http.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n    res.<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-string\">'Hello World'</span>);\n});\n\n<span class=\"hljs-keyword\">const</span> io = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Server</span>(server, {\n    <span class=\"hljs-attr\">cors</span>: {\n        <span class=\"hljs-attr\">origin</span>: <span class=\"hljs-string\">\"*\"</span>,\n        <span class=\"hljs-attr\">methods</span>: [<span class=\"hljs-string\">\"GET\"</span>, <span class=\"hljs-string\">\"POST\"</span>]\n    }\n});\n\nio.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">socket</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'사용자가 연결되었습니다.'</span>);\n\n    socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'message'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">message</span>) =></span> {\n        io.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">'message'</span>, message);\n    });\n\n    socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'disconnect'</span>, <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'사용자가 연결을 끊었습니다.'</span>);\n    });\n});\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PORT</span> = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">4000</span>;\n\nserver.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`서버가 포트 <span class=\"hljs-subst\">${PORT}</span>에서 실행 중입니다.`</span>);\n});\n</code></pre>\n<p>여기, 이 코드는 Node.js의 내장 http 모듈을 사용하여 기본 HTTP 서버를 설정하고 Socket.IO 서버를 연결하는 방법을 보여줍니다. Socket.IO 서버는 클라이언트 연결을 수신하고 모든 연결된 클라이언트에 메시지를 브로드캐스트하며 클라이언트가 연결 또는 연결 해제될 때 로그를 기록합니다.</p>\n<p>단계 3: React js에서 Socket.io 구현</p>\n<p>\"react-chatapp\" 폴더로 이동하여 리액트 프로젝트를 만듭니다.</p>\n<pre><code class=\"hljs language-sh\">npx create-react-app client\n</code></pre>\n<p>리액트 프로젝트를 설치한 후 프로젝트 안으로 이동하여 의존성을 설치하세요.</p>\n<pre><code class=\"hljs language-js\">cd client\nnpm start\n</code></pre>\n<p>리액트 기본 의존성을 설치한 후 socket.io-client와 부트스트랩 라이브러리를 리액트에 설치하세요.</p>\n<pre><code class=\"hljs language-js\">npm install socket.<span class=\"hljs-property\">io</span>-client bootstrap\n</code></pre>\n<ul>\n<li>\n<p>Socket.IO-Client:</p>\n</li>\n<li>\n<p>socket.io-client은 Socket.IO를 위한 클라이언트 측 라이브러리로, 실시간 양방향 통신 라이브러리입니다.</p>\n</li>\n<li>\n<p>이를 통해 웹 클라이언트(예: 브라우저)가 Socket.IO 서버와 연결을 설정하고 실시간으로 통신할 수 있습니다.</p>\n</li>\n<li>\n<p>서버에 이벤트를 전송하거나 서버로부터 받은 이벤트를 처리하는 방법을 제공합니다.</p>\n</li>\n<li>\n<p>socket.io-client를 사용하면 채팅, 실시간 업데이트, 협업과 같은 기능을 지원하는 대화형 웹 애플리케이션을 개발할 수 있습니다.</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Bootstrap:</li>\n</ol>\n<ul>\n<li>Bootstrap은 반응형 및 모바일 우선 웹 프로젝트를 구축하기 위한 인기 있는 프론트엔드 프레임워크입니다.</li>\n<li>버튼, 폼, 내비게이션 바와 같은 사전 스타일이 적용된 CSS 컴포넌트 및 모달, 툴팁과 같은 JavaScript 플러그인을 제공합니다.</li>\n<li>Bootstrap의 그리드 시스템을 통해 다양한 화면 크기와 장치에 대응하는 반응형 레이아웃을 생성할 수 있습니다.</li>\n<li>Bootstrap을 사용하면 다양한 준비가된 컴포넌트와 스타일을 제공하여 웹 애플리케이션을 디자인하고 스타일링하는 데 시간과 노력을 절약할 수 있습니다.</li>\n</ul>\n<p>그럼 src/App.js 파일로 이동하여 다음 코드로 교체하세요</p>\n<p>src/App.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'bootstrap/dist/css/bootstrap.min.css'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'../src/App.css'</span>;\n<span class=\"hljs-keyword\">import</span> io <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'socket.io-client'</span>;\n\n<span class=\"hljs-keyword\">const</span> socket = <span class=\"hljs-title function_\">io</span>(<span class=\"hljs-string\">'http://localhost:4000'</span>);\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [messages, setMessages] = <span class=\"hljs-title function_\">useState</span>([]);\n  <span class=\"hljs-keyword\">const</span> [username, setUsername] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n  <span class=\"hljs-keyword\">const</span> [isUsernameSubmitted, setIsUsernameSubmitted] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [inputMessage, setInputMessage] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n  <span class=\"hljs-keyword\">const</span> [isUsernameSet, setIsUsernameSet] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> storedUsername = <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">'username'</span>);\n    <span class=\"hljs-keyword\">if</span> (storedUsername) {\n      <span class=\"hljs-title function_\">setUsername</span>(storedUsername);\n      <span class=\"hljs-title function_\">setIsUsernameSet</span>(<span class=\"hljs-literal\">true</span>);\n    }\n\n    socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'message'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">message</span>) =></span> {\n      <span class=\"hljs-title function_\">setMessages</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prevMessages</span>) =></span> [...prevMessages, message]);\n    });\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\n      socket.<span class=\"hljs-title function_\">off</span>(<span class=\"hljs-string\">'message'</span>);\n    };\n  }, []);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleUsernameChange</span> = (<span class=\"hljs-params\">e</span>) => {\n    <span class=\"hljs-title function_\">setUsername</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleUsernameSubmit</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">'username'</span>, username);\n    <span class=\"hljs-title function_\">setIsUsernameSubmitted</span>(<span class=\"hljs-literal\">true</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleMessageSend</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">if</span> (!inputMessage.<span class=\"hljs-title function_\">trim</span>()) <span class=\"hljs-keyword\">return</span>;\n\n    socket.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">'message'</span>, {\n      username,\n      <span class=\"hljs-attr\">text</span>: inputMessage\n    });\n\n    <span class=\"hljs-title function_\">setInputMessage</span>(<span class=\"hljs-string\">''</span>);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"container mt-5\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"col-md-6\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"card\"</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"card-body\"</span>></span>\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h5</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"card-title text-center mb-4\"</span>></span>Chat App<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h5</span>></span>\n              {!isUsernameSubmitted ? (\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n                  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"mb-3\"</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n                      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n                      <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"form-control\"</span>\n                      <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"사용자 이름 입력\"</span>\n                      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{username}</span>\n                      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleUsernameChange}</span>\n                    /></span>\n                  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n                    <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-primary btn-block\"</span>\n                    <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleUsernameSubmit}</span>\n                  ></span>\n                    사용자 이름 설정\n                  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n              ) : (\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n                  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h4</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"text-center mb-4\"</span>></span>환영합니다, {username}님!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h4</span>></span>\n                  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"message-container row\"</span>></span>\n                    {messages.map((msg, index) => (\n                      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"message col-md-8 offset-md-2\"</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">strong</span>></span>{msg.username}:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">strong</span>></span> {msg.text}\n                      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                    ))}\n                  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"input-group mb-3\"</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n                      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n                      <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"form-control\"</span>\n                      <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"메시지 입력...\"</span>\n                      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{inputMessage}</span>\n                      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setInputMessage(e.target.value)}\n                    />\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n                      <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-primary\"</span>\n                      <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleMessageSend}</span>\n                    ></span>\n                      전송\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n              )}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>이 코드에서는 React와 Socket.IO를 사용하여 실시간 채팅 애플리케이션을 만드는 과정을 안내하겠습니다. 우리는 먼저 애플리케이션의 기본 구조를 설정한 다음 사용자가 실시간으로 메시지를 보내고 받을 수 있도록 기능을 점진적으로 추가할 것입니다.</p>\n<p>단계 1: 사용자 이름 입력 컴포넌트 생성</p>\n<ul>\n<li>먼저 UsernameInput이라는 React 컴포넌트를 만드세요. 이 컴포넌트는 사용자가 사용자 이름을 입력할 수 있는 입력 필드를 렌더링합니다.</li>\n<li>useState 훅을 사용하여 사용자 이름 입력 필드의 상태를 관리하세요.</li>\n<li>사용자 이름이 제출되었는지 여부에 따라 채팅 인터페이스를 조건부로 렌더링하세요.</li>\n</ul>\n<p>단계 2: 채팅 인터페이스 표시</p>\n<ul>\n<li>사용자가 사용자 이름을 제출하면 채팅 인터페이스를 표시하세요.</li>\n<li>메시지를 입력할 수있는 입력 필드와 메시지를 전송하는 버튼을 제공하세요.</li>\n<li>사용자 이름이 제출되었을 때에만 채팅 인터페이스를 표시하도록 조건부 렌더링을 사용하세요.</li>\n</ul>\n<p>단계 3: 메시지 제출 처리</p>\n<ul>\n<li>메시지 제출을 처리하기 위해 handleMessageSend라는 함수를 정의하십시오.</li>\n<li>사용자가 전송 버튼을 클릭하면이 함수를 호출하여 Socket.IO를 통해 서버로 메시지를 전송하십시오.</li>\n<li>useState 훅을 사용하여 입력 메시지 필드의 상태를 관리하고, 메시지를 전송 한 후에 필드를 지우십시오.</li>\n</ul>\n<p>단계 4: 실시간 통신을 위한 Socket.IO 통합</p>\n<ul>\n<li>socket.io-client 라이브러리를 가져와 Socket.IO 서버에 연결을 설정하십시오.</li>\n<li>서버에 io 함수를 사용하여 연결하고 서버 URL을 제공하십시오.</li>\n<li>서버에서 수신된 메시지를 처리하는 이벤트 리스너를 정의하십시오.</li>\n<li>사용자가 메시지를 보낼 때 서버로 메시지를 발신하고, 클라이언트와 서버 간의 양방향 통신을 보장하십시오.</li>\n</ul>\n<p>그럼 src/App.css 파일 안으로 들어가서 다음 코드를 다음과 같이 바꿔주세요.</p>\n<p>src/App.css</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span>{\n  <span class=\"hljs-attribute\">background-color</span>: cadetblue;\n}\n\n<span class=\"hljs-comment\">/* Card를 가운데 정렬 */</span>\n<span class=\"hljs-selector-class\">.card</span> {\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">50px</span>;\n}\n\n<span class=\"hljs-comment\">/* 메시지 컨테이너를 스타일링 */</span>\n<span class=\"hljs-selector-class\">.message-container</span> {\n  <span class=\"hljs-attribute\">max-height</span>: <span class=\"hljs-number\">300px</span>;\n  <span class=\"hljs-attribute\">overflow-y</span>: auto;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n}\n\n<span class=\"hljs-comment\">/* 각각의 메시지 스타일링 */</span>\n<span class=\"hljs-selector-class\">.message</span> {\n  <span class=\"hljs-attribute\">background-color</span>: burlywood;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">5px</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n}\n\n<span class=\"hljs-comment\">/* 입력 그룹을 스타일링 */</span>\n<span class=\"hljs-selector-class\">.input-group</span> {\n \n  <span class=\"hljs-comment\">/* bottom: 0;\n  left: 0;\n  right: 0; */</span>\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span>;\n  <span class=\"hljs-comment\">/* background-color: #f9f9f9;\n  border-top: 1px solid #ccc; */</span>\n}\n</code></pre>\n<p>위 단계를 모두 완료하면 서버를 실행할 시간입니다.\n서버 폴더로 이동하여 다음 명령어를 실행하세요.</p>\n<pre><code class=\"hljs language-js\">node server.<span class=\"hljs-property\">js</span>\n</code></pre>\n<p>다음으로, client 폴더로 이동하여 다음 명령어를 실행하세요</p>\n<pre><code class=\"hljs language-js\">npm start\n</code></pre>\n<p>결과:```</p>\n<p><img src=\"/assets/img/2024-05-12-SimpleChatappusingSocketioInReact-jsForBeginners_1.png\" alt=\"이미지 1\"></p>\n<p><img src=\"/assets/img/2024-05-12-SimpleChatappusingSocketioInReact-jsForBeginners_2.png\" alt=\"이미지 2\"></p>\n<p>도움이 되길 바라요...</p>\n</body>\n</html>\n"},"__N_SSG":true}