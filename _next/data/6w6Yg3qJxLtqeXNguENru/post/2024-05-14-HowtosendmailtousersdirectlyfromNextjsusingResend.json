{"pageProps":{"post":{"title":"Nextjs를 사용하여 Resend를 이용해 사용자에게 직접 메일을 보내는 방법","description":"","date":"2024-05-14 11:58","slug":"2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend","content":"\n\nNext.js는 매우 다재다능한 프론트엔드를 제공해줘요. 이를 단독으로 사용하여 웹 사이트의 대부분 요구 사항을 해결할 수 있어요. 프로젝트 구조 자체에 서버 측 렌더링을 활용하고 API를 생성할 수 있는 기능이 내장되어 있어 Next.js 앱의 기능을 확장할 수 있어요.\n\n![Resend 이미지](/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_0.png)\n\n이 기사에서는 개발자를 위한 이메일 API인 Resend를 탐색하고 앱과 통합해볼 거예요. 우리는 간단한 연락처 양식을 만들어서 제출하면 제출된 정보와 함께 이메일을 우리 받은 편지함으로 전송할 거에요. 이 통합은 문의, 대기 목록 또는 기타 양식 정보를 받고 바로 우리 받은 편지함으로 전달하고 싶을 때 아주 유용해요.\n\n# 우리 Next.js 앱\n\n\n\n간단한 Next.js 앱을 만들 계획이에요. contact form을 사용해서. yarn create next-app를 사용해서.\n\n```js\nyarn create next-app\n```\n\n프로젝트 구성을 위해 다음 설정을 사용했어요. tailwind를 스타일링에 선택하고 코드를 정리하기 위해 src 디렉토리를 사용했어요.\n\n![이미지](/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_1.png)\n\n\n\n## 연락 양식 만들기\n\n간결하게 유지하려고 하며 이름과 이메일을 요청하는 연락 양식을 만들겠습니다.\n\n다음과 같이 index.js 페이지 컴포넌트를 업데이트 해보세요:\n\n```js\nimport { useState } from \"react\";\nimport Head from \"next/head\";\n\nexport default function Home() {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n\n    const handleSubmit = () => {\n      console.log(\"여기에 API 호출하기\")\n    }\n    return (\n        <main\n            className={`flex flex-col items-center p-24 min-h-screen`}\n        >\n            <Head>\n                <title>Contact Me | Coffeed</title>\n            </Head>\n\n            <div className=\"relative flex flex-col gap-4 \">\n                <div className=\"flex flex-col place-items-center gap-4\">\n                    <h1 className={`m-0 text-center text-3xl`}>연락하기</h1>\n                </div>\n                <form\n                    className=\"mt-6 flex flex-col max-w-xl gap-4 z-10\"\n                    onSubmit={handleSubmit}\n                >\n                    <label htmlFor=\"name\" className=\"sr-only\">\n                        이름\n                    </label>\n                    <input\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"text\"\n                        autoComplete=\"name\"\n                        required\n                        value={name}\n                        className=\"rounded-md bg-white/5 px-3.5 py-2.5 text-white ring-1 ring-inset focus:ring-blue-600 text-sm md:w-96\"\n                        placeholder=\"이름\"\n                        onChange={(e) => setName(e.target.value)}\n                    />\n                    <label htmlFor=\"email-address\" className=\"sr-only\">\n                        이메일 주소\n                    </label>\n                    <input\n                        id=\"email-address\"\n                        name=\"email\"\n                        type=\"email\"\n                        autoComplete=\"email\"\n                        required\n                        value={email}\n                        className=\"rounded-md bg-white/5 px-3.5 py-2.5 text-white ring-1 ring-inset focus:ring-blue-600 text-sm md:w-96\"\n                        placeholder=\"이메일\"\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <button\n                        type=\"submit\"\n                        className=\"flex justify-center rounded-md bg-blue-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-blue-500\"\n                    >\n                        {loading ? (\n                            <div\n                                style={\n                                    borderTopColor: \"transparent\",\n                                }\n                                className=\"w-6 h-6 border-4 border-white border-solid rounded-full animate-spin\"\n                            ></div>\n                        ) : (\n                            \"제출\"\n                        )}\n                    </button>\n                </form>\n            </div>\n        </main>\n    );\n}\n```\n\n\n\n테일윈드를 사용하여 스타일을 입히고 사용자로부터 이름과 이메일을 받는 간단한 양식을 만들었습니다. 양식을 제출할 때 Send Mail API 호출을 트리거합니다.\n\n다음 단계를 진행하기 위해 Next.js에서 Resend 및 필수 API를 설정해봅시다.\n\n# Resend로 시작하기\n\nresend.com으로 이동하여 계정에 로그인하세요. 이메일이나 Github를 사용하여 새로운 계정을 만들 수 있습니다.\n\n\n\nResend는 플랫폼에서 도메인을 소유하고 확인한 경우에만 사용자에게 이메일을 보낼 수 있습니다. 이를 통해 해당 도메인 이름을 사용하여 어떤 이메일 주소에서든 이메일을 보낼 수 있습니다. 예를 들어, noreply@coffeed.com에서 사용자에게 이메일을 보내려면 coffeed.com 도메인을 Resend에 추가한 다음 해당 도메인 이름 레코드를 추가하여 해당 도메인을 소유하고 있는 것을 확인해야 합니다.\n\n## 도메인 추가\n\n도메인을 추가하려면 도메인으로 이동한 다음 도메인 추가를 클릭하세요.\n\n![도메인 추가](/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_2.png)\n\n\n\n도메인 이름을 입력하고 지역을 선택해주세요. 기본값인 \"us-east-1\"은 무료이며 저희가 사용하는 용도에 적합합니다.\n\n![도메인 설정](/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_3.png)\n\n도메인을 추가하면 DNS 레코드 세트가 표시되며, 해당 레코드들을 도메인 서비스 제공업체에서 업데이트해야 합니다. MX 및 2개의 TXT 레코드를 DNS에 추가한 후에 \"DNS 레코드 확인\"을 클릭하여 도메인을 확인할 수 있습니다.\n\n![DNS 레코드 확인](/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_4.png)\n\n\n\n도메인을 확인하는 것은 이메일 전달성을 보장하는 데 필수적입니다. 한 번 도메인을 확인하면 이메일을 보낼 수 있는 권한이 부여됩니다.\n\n## API 키 생성\n\nAPI 키는 요청을 인증하는 비밀 토큰입니다.\n\n- 사이드바의 API 키로 이동합니다.\n- API 키 생성을 클릭합니다.\n- API 키에 이름을 지정합니다.\n- 허가로 보내기 액세스를 선택하고 액세스를 제한하려는 특정 도메인을 선택하세요.\n\n\n\n<img src=\"/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_5.png\"/>\n\n또한 \"전체 액세스\" 권한이 있지만 보안을 위해 단일 도메인에 제한된 \"전송 액세스\" 권한을 사용하는 것이 좋습니다. .env 파일에 생성된 이 API 키를 RESEND_API_KEY 변수로 추가하세요.\n\n# Next.js 앱에 Resend 추가하기\n\n이제 프로젝트로 돌아가서 Resend sdk 라이브러리를 추가해봅시다. 터미널에서 다음 명령을 실행하세요:\n\n\n\n```js\nyarn add resend\n```\n\n## 1. 이메일 템플릿 추가하기\n\n먼저 src 폴더의 components 폴더에 새로운 이메일 템플릿 폴더를 만들어보세요. src/components/email/ 폴더에 contact-form.jsx라는 새로운 이메일 템플릿을 추가해주세요.\n\n```js\nexport const EmailTemplate = ({\n  name,\n  email\n}) => (\n  <div>\n    <p>안녕하세요 Kavya,</p>\n    <p>\n        {name}님이 웹사이트에서 연락 양식을 제출했습니다. 그들의\n        이메일은 {email} 입니다!\n    </p>\n    <p>\n        감사합니다,\n        <br />\n        Coffee\n    </p>\n  </div>\n);\n```\n\n\n\n이메일 본문을 스타일링하기 위해 HTML을 사용하여 이름과 이메일을 입력할 수 있는 간단한 템플릿을 만들었습니다. React 컴포넌트로 구성된 이 템플릿을 보면 프로젝트에서 디자인한 React 컴포넌트를 사용하거나 수정할 수 있습니다.\n\n## 2. 이메일을 보내는 API 생성하기\n\npages/api/ 디렉토리 아래에 send.js라는 API 파일을 생성하세요. 요청 본문에서 이름과 이메일을 가져와서 Resend 라이브러리의 sendEmail 함수를 호출하고 EmailTemplate과 함께 사용하세요.\n\n```js\nconst resend = new Resend(process.env.RESEND_API_KEY);\n\nconst data = await resend.sendEmail({\n    from: `${process.env.FROM_EMAIL}`,\n    to: `${process.env.TO_EMAIL}`,\n    subject: \"🎉 연락 양식으로 새로운 제출이 도착했습니다!\",\n    html: \"\",\n    react: EmailTemplate({ name, email })\n});\n```\n\n\n\n다음 변수들은 .env 파일에 선언되어야 합니다:\n\n- RESEND_API_KEY — Resend 관리자 섹션에서 생성된 API 키.\n- FROM_EMAIL — 메일이 보내지는 이메일 주소. Resend 관리자에서 확인된 도메인으로부터 보내진 것으로 나타나야 합니다.\n- TO_EMAIL — 메일이 전송될 이메일 주소. 이 경우에는 내 이메일 주소로 메일을 보내고 있습니다.\n\n```js\nimport { EmailTemplate } from '../../components/email/contact-form';\nimport { Resend } from 'resend';\n\nconst resend = new Resend(process.env.RESEND_API_KEY);\n\nexport default async (req, res) => {\n  try {\n    const { name, email } = JSON.parse(req.body);\n\n    const data = await resend.sendEmail({\n        from: `${process.env.FROM_EMAIL}`,\n        to: `${process.env.TO_EMAIL}`,\n        subject: \"🎉당신의 연락 양식으로의 새로운 제출!\",\n        html: \"\",\n        react: EmailTemplate({ name, email })\n    });\n\n    res.status(200).json(data);\n  } catch (error) {\n    res.status(400).json(error);\n  }\n};\n```\n\n대신 제출된 이메일 주소로 설정하여 사용자에게 바로 이메일이 전송되도록 할 수도 있습니다.\n\n\n\n## 3. 양식 제출 시 이메일 트리거\n\nhandleSubmit 함수를 만들고 이름과 이메일을 본문의 매개변수로 사용하여 이메일을 트리거할 수 있습니다.\n```js\nconst [name, setName] = useState(\"\");\nconst [email, setEmail] = useState(\"\");\nconst [loading, setLoading] = useState(false);\n\nconst handleSubmit = async (e) => {\n    setLoading(true);\n    e.preventDefault();\n\n    if (name == \"\" && email == \"\") {\n        setLoading(false);\n        alert(\"이름과 이메일을 모두 입력해주세요\");\n        return false;\n    }\n\n    await fetch(\"/api/send\", {\n        method: \"POST\",\n        body: JSON.stringify({ name, email }),\n    })\n        .then((res) => res.json())\n        .then((data) => {\n            setLoading(false);\n            if (data && data.id) {\n                alert(`${name}님, 관심 표현해 주셔서 감사합니다! 곧 연락 드리겠습니다!`);\n                setName(\"\");\n                setEmail(\"\");\n            } else {\n                alert(\"죄송합니다! 다시 시도해주세요.\");\n            }\n        })\n        .catch((err) => {\n            setLoading(false);\n            alert(\"우왕! 불행하게도 오류가 발생했습니다.\");\n        });\n    return true;\n};\n```\n\n이렇게 하면 Next.js 앱에 Resend 기능을 연결할 수 있습니다. 여기에 인덱스 페이지의 최종 코드가 있습니다:\n\n\n\n```js\r\nimport { useState } from \"react\";\nimport Head from \"next/head\";\n\nexport default function Home() {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n\n    const handleSubmit = async (e) => {\n        setLoading(true);\n        e.preventDefault();\n\n        if (name == \"\" && email == \"\") {\n            setLoading(false);\n            alert(\"이름과 이메일 주소를 모두 입력해주세요!\");\n            return false;\n        }\n\n        await fetch(\"/api/send\", {\n            method: \"POST\",\n            body: JSON.stringify({ name, email }),\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                setLoading(false);\n                if (data && data.id) {\n                    alert(`${name}님, 저희에게 관심 가져주셔서 감사합니다! 곧 연락드리겠습니다!`);\n                    setName(\"\");\n                    setEmail(\"\");\n                } else {\n                    alert(\"죄송합니다! 다시 시도해주세요.\");\n                }\n            })\n            .catch((err) => {\n                setLoading(false);\n                alert(\"앗! 죄송하지만 오류가 발생했습니다.\");\n            });\n        return true;\n    };\n    return (\n        <main\n            className={`flex flex-col items-center p-24 min-h-screen`}\n       >\n            <Head>\n                <title>나에게 연락하기 | Coffeed</title>\n            </Head>\n\n            <div className=\"relative flex flex-col gap-4 \">\n                <div className=\"flex flex-col place-items-center gap-4\">\n                    <h1 className={`m-0 text-center text-3xl`}>나에게 연락하기</h1>\n                </div>\n                <form\n                    className=\"mt-6 flex flex-col max-w-xl gap-4 z-10\"\n                    onSubmit={handleSubmit}\n                >\n                    <label htmlFor=\"name\" className=\"sr-only\">\n                        이름\n                    </label>\n                    <input\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"text\"\n                        autoComplete=\"name\"\n                        required\n                        value={name}\n                       className=\"rounded-md bg-white/5 px-3.5 py-2.5 text-white ring-1 ring-inset focus:ring-blue-600 text-sm md:w-96\"\n                        placeholder=\"이름\"\n                        onChange={(e) => setName(e.target.value)}\n                    />\n                    <label htmlFor=\"email-address\" className=\"sr-only\">\n                        이메일 주소\n                    </label>\n                    <input\n                        id=\"email-address\"\n                        name=\"email\"\n                        type=\"email\"\n                        autoComplete=\"email\"\n                        required\n                        value={email}\n                        className=\"rounded-md bg-white/5 px-3.5 py-2.5 text-white ring-1 ring-inset focus:ring-blue-600 text-sm md:w-96\"\n                        placeholder=\"이메일\"\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <button\n                        type=\"submit\"\n                        className=\"flex justify-center rounded-md bg-blue-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-blue-500\"\n                    >\n                        {loading ? (\n                            <div\n                                style={{\n                                    borderTopColor: \"transparent\",\n                                }}\n                                className=\"w-4 h-4 border-2 border-white border-solid rounded-full animate-spin\"\n                            ></div>\n                        ) : (\n                            \"제출하기\"\n                        )}\n                    </button>\n                </form>\n            </div>\n        </main>\n    );\n}\r\n```\n\n양식을 제출하면 이메일이 .env 파일에 설정된 TO_EMAIL로 전송됩니다.\n\n<img src=\"/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_6.png\" />\n\n이메일 API를 활용하여 다른 사용 사례에 통합하여 직접 알림을 받을 수도 있습니다.\n\n\n\nNext.js playbook **Coffee** 팀에서 작업 중인 페이지입니다. 대기 목록에 추가하려면 coffee@coffeeinc.in으로 이메일을 보내주세요.","ogImage":{"url":"/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_0.png"},"coverImage":"/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_0.png","tag":["Tech"],"readingTime":13},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Next.js는 매우 다재다능한 프론트엔드를 제공해줘요. 이를 단독으로 사용하여 웹 사이트의 대부분 요구 사항을 해결할 수 있어요. 프로젝트 구조 자체에 서버 측 렌더링을 활용하고 API를 생성할 수 있는 기능이 내장되어 있어 Next.js 앱의 기능을 확장할 수 있어요.</p>\n<p><img src=\"/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_0.png\" alt=\"Resend 이미지\"></p>\n<p>이 기사에서는 개발자를 위한 이메일 API인 Resend를 탐색하고 앱과 통합해볼 거예요. 우리는 간단한 연락처 양식을 만들어서 제출하면 제출된 정보와 함께 이메일을 우리 받은 편지함으로 전송할 거에요. 이 통합은 문의, 대기 목록 또는 기타 양식 정보를 받고 바로 우리 받은 편지함으로 전달하고 싶을 때 아주 유용해요.</p>\n<h1>우리 Next.js 앱</h1>\n<p>간단한 Next.js 앱을 만들 계획이에요. contact form을 사용해서. yarn create next-app를 사용해서.</p>\n<pre><code class=\"hljs language-js\">yarn create next-app\n</code></pre>\n<p>프로젝트 구성을 위해 다음 설정을 사용했어요. tailwind를 스타일링에 선택하고 코드를 정리하기 위해 src 디렉토리를 사용했어요.</p>\n<p><img src=\"/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_1.png\" alt=\"이미지\"></p>\n<h2>연락 양식 만들기</h2>\n<p>간결하게 유지하려고 하며 이름과 이메일을 요청하는 연락 양식을 만들겠습니다.</p>\n<p>다음과 같이 index.js 페이지 컴포넌트를 업데이트 해보세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Head</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/head\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Home</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> [name, setName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n    <span class=\"hljs-keyword\">const</span> [email, setEmail] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n    <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSubmit</span> = (<span class=\"hljs-params\"></span>) => {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"여기에 API 호출하기\"</span>)\n    }\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">flex</span> <span class=\"hljs-attr\">flex-col</span> <span class=\"hljs-attr\">items-center</span> <span class=\"hljs-attr\">p-24</span> <span class=\"hljs-attr\">min-h-screen</span>`}\n        ></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Head</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Contact Me | Coffeed<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Head</span>></span>\n\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"relative flex flex-col gap-4 \"</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex flex-col place-items-center gap-4\"</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">m-0</span> <span class=\"hljs-attr\">text-center</span> <span class=\"hljs-attr\">text-3xl</span>`}></span>연락하기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span>\n                    <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"mt-6 flex flex-col max-w-xl gap-4 z-10\"</span>\n                    <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleSubmit}</span>\n                ></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"sr-only\"</span>></span>\n                        이름\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n                        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"name\"</span>\n                        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span>\n                        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n                        <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">\"name\"</span>\n                        <span class=\"hljs-attr\">required</span>\n                        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span>\n                        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"rounded-md bg-white/5 px-3.5 py-2.5 text-white ring-1 ring-inset focus:ring-blue-600 text-sm md:w-96\"</span>\n                        <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"이름\"</span>\n                        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setName(e.target.value)}\n                    />\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"email-address\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"sr-only\"</span>></span>\n                        이메일 주소\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n                        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"email-address\"</span>\n                        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"email\"</span>\n                        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span>\n                        <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">\"email\"</span>\n                        <span class=\"hljs-attr\">required</span>\n                        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{email}</span>\n                        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"rounded-md bg-white/5 px-3.5 py-2.5 text-white ring-1 ring-inset focus:ring-blue-600 text-sm md:w-96\"</span>\n                        <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"이메일\"</span>\n                        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setEmail(e.target.value)}\n                    />\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n                        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>\n                        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex justify-center rounded-md bg-blue-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-blue-500\"</span>\n                    ></span>\n                        {loading ? (\n                            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n                                <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{</span>\n                                    <span class=\"hljs-attr\">borderTopColor:</span> \"<span class=\"hljs-attr\">transparent</span>\",\n                                }\n                                <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-6 h-6 border-4 border-white border-solid rounded-full animate-spin\"</span>\n                            ></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                        ) : (\n                            \"제출\"\n                        )}\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n    );\n}\n</code></pre>\n<p>테일윈드를 사용하여 스타일을 입히고 사용자로부터 이름과 이메일을 받는 간단한 양식을 만들었습니다. 양식을 제출할 때 Send Mail API 호출을 트리거합니다.</p>\n<p>다음 단계를 진행하기 위해 Next.js에서 Resend 및 필수 API를 설정해봅시다.</p>\n<h1>Resend로 시작하기</h1>\n<p>resend.com으로 이동하여 계정에 로그인하세요. 이메일이나 Github를 사용하여 새로운 계정을 만들 수 있습니다.</p>\n<p>Resend는 플랫폼에서 도메인을 소유하고 확인한 경우에만 사용자에게 이메일을 보낼 수 있습니다. 이를 통해 해당 도메인 이름을 사용하여 어떤 이메일 주소에서든 이메일을 보낼 수 있습니다. 예를 들어, <a href=\"mailto:noreply@coffeed.com\">noreply@coffeed.com</a>에서 사용자에게 이메일을 보내려면 coffeed.com 도메인을 Resend에 추가한 다음 해당 도메인 이름 레코드를 추가하여 해당 도메인을 소유하고 있는 것을 확인해야 합니다.</p>\n<h2>도메인 추가</h2>\n<p>도메인을 추가하려면 도메인으로 이동한 다음 도메인 추가를 클릭하세요.</p>\n<p><img src=\"/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_2.png\" alt=\"도메인 추가\"></p>\n<p>도메인 이름을 입력하고 지역을 선택해주세요. 기본값인 \"us-east-1\"은 무료이며 저희가 사용하는 용도에 적합합니다.</p>\n<p><img src=\"/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_3.png\" alt=\"도메인 설정\"></p>\n<p>도메인을 추가하면 DNS 레코드 세트가 표시되며, 해당 레코드들을 도메인 서비스 제공업체에서 업데이트해야 합니다. MX 및 2개의 TXT 레코드를 DNS에 추가한 후에 \"DNS 레코드 확인\"을 클릭하여 도메인을 확인할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-14-HowtosendmailtousersdirectlyfromNextjsusingResend_4.png\" alt=\"DNS 레코드 확인\"></p>\n<p>도메인을 확인하는 것은 이메일 전달성을 보장하는 데 필수적입니다. 한 번 도메인을 확인하면 이메일을 보낼 수 있는 권한이 부여됩니다.</p>\n<h2>API 키 생성</h2>\n<p>API 키는 요청을 인증하는 비밀 토큰입니다.</p>\n<ul>\n<li>사이드바의 API 키로 이동합니다.</li>\n<li>API 키 생성을 클릭합니다.</li>\n<li>API 키에 이름을 지정합니다.</li>\n<li>허가로 보내기 액세스를 선택하고 액세스를 제한하려는 특정 도메인을 선택하세요.</li>\n</ul>\n<p>또한 \"전체 액세스\" 권한이 있지만 보안을 위해 단일 도메인에 제한된 \"전송 액세스\" 권한을 사용하는 것이 좋습니다. .env 파일에 생성된 이 API 키를 RESEND_API_KEY 변수로 추가하세요.</p>\n<h1>Next.js 앱에 Resend 추가하기</h1>\n<p>이제 프로젝트로 돌아가서 Resend sdk 라이브러리를 추가해봅시다. 터미널에서 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">yarn add resend\n</code></pre>\n<h2>1. 이메일 템플릿 추가하기</h2>\n<p>먼저 src 폴더의 components 폴더에 새로운 이메일 템플릿 폴더를 만들어보세요. src/components/email/ 폴더에 contact-form.jsx라는 새로운 이메일 템플릿을 추가해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">EmailTemplate</span> = (<span class=\"hljs-params\">{\n  name,\n  email\n}</span>) => (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>안녕하세요 Kavya,<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n        {name}님이 웹사이트에서 연락 양식을 제출했습니다. 그들의\n        이메일은 {email} 입니다!\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n        감사합니다,\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n        Coffee\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n);\n</code></pre>\n<p>이메일 본문을 스타일링하기 위해 HTML을 사용하여 이름과 이메일을 입력할 수 있는 간단한 템플릿을 만들었습니다. React 컴포넌트로 구성된 이 템플릿을 보면 프로젝트에서 디자인한 React 컴포넌트를 사용하거나 수정할 수 있습니다.</p>\n<h2>2. 이메일을 보내는 API 생성하기</h2>\n<p>pages/api/ 디렉토리 아래에 send.js라는 API 파일을 생성하세요. 요청 본문에서 이름과 이메일을 가져와서 Resend 라이브러리의 sendEmail 함수를 호출하고 EmailTemplate과 함께 사용하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> resend = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Resend</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">RESEND_API_KEY</span>);\n\n<span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> resend.<span class=\"hljs-title function_\">sendEmail</span>({\n    <span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.FROM_EMAIL}</span>`</span>,\n    <span class=\"hljs-attr\">to</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.TO_EMAIL}</span>`</span>,\n    <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">\"🎉 연락 양식으로 새로운 제출이 도착했습니다!\"</span>,\n    <span class=\"hljs-attr\">html</span>: <span class=\"hljs-string\">\"\"</span>,\n    <span class=\"hljs-attr\">react</span>: <span class=\"hljs-title class_\">EmailTemplate</span>({ name, email })\n});\n</code></pre>\n<p>다음 변수들은 .env 파일에 선언되어야 합니다:</p>\n<ul>\n<li>RESEND_API_KEY — Resend 관리자 섹션에서 생성된 API 키.</li>\n<li>FROM_EMAIL — 메일이 보내지는 이메일 주소. Resend 관리자에서 확인된 도메인으로부터 보내진 것으로 나타나야 합니다.</li>\n<li>TO_EMAIL — 메일이 전송될 이메일 주소. 이 경우에는 내 이메일 주소로 메일을 보내고 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">EmailTemplate</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../components/email/contact-form'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Resend</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'resend'</span>;\n\n<span class=\"hljs-keyword\">const</span> resend = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Resend</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">RESEND_API_KEY</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> (req, res) => {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> { name, email } = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(req.<span class=\"hljs-property\">body</span>);\n\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> resend.<span class=\"hljs-title function_\">sendEmail</span>({\n        <span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.FROM_EMAIL}</span>`</span>,\n        <span class=\"hljs-attr\">to</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.TO_EMAIL}</span>`</span>,\n        <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">\"🎉당신의 연락 양식으로의 새로운 제출!\"</span>,\n        <span class=\"hljs-attr\">html</span>: <span class=\"hljs-string\">\"\"</span>,\n        <span class=\"hljs-attr\">react</span>: <span class=\"hljs-title class_\">EmailTemplate</span>({ name, email })\n    });\n\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>).<span class=\"hljs-title function_\">json</span>(data);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">json</span>(error);\n  }\n};\n</code></pre>\n<p>대신 제출된 이메일 주소로 설정하여 사용자에게 바로 이메일이 전송되도록 할 수도 있습니다.</p>\n<h2>3. 양식 제출 시 이메일 트리거</h2>\n<p>handleSubmit 함수를 만들고 이름과 이메일을 본문의 매개변수로 사용하여 이메일을 트리거할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> [name, setName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n<span class=\"hljs-keyword\">const</span> [email, setEmail] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n<span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSubmit</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">e</span>) => {\n    <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>);\n    e.<span class=\"hljs-title function_\">preventDefault</span>();\n\n    <span class=\"hljs-keyword\">if</span> (name == <span class=\"hljs-string\">\"\"</span> &#x26;&#x26; email == <span class=\"hljs-string\">\"\"</span>) {\n        <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"이름과 이메일을 모두 입력해주세요\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"/api/send\"</span>, {\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"POST\"</span>,\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ name, email }),\n    })\n        .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =></span> res.<span class=\"hljs-title function_\">json</span>())\n        .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n            <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n            <span class=\"hljs-keyword\">if</span> (data &#x26;&#x26; data.<span class=\"hljs-property\">id</span>) {\n                <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span>님, 관심 표현해 주셔서 감사합니다! 곧 연락 드리겠습니다!`</span>);\n                <span class=\"hljs-title function_\">setName</span>(<span class=\"hljs-string\">\"\"</span>);\n                <span class=\"hljs-title function_\">setEmail</span>(<span class=\"hljs-string\">\"\"</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"죄송합니다! 다시 시도해주세요.\"</span>);\n            }\n        })\n        .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n            <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n            <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"우왕! 불행하게도 오류가 발생했습니다.\"</span>);\n        });\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n};\n</code></pre>\n<p>이렇게 하면 Next.js 앱에 Resend 기능을 연결할 수 있습니다. 여기에 인덱스 페이지의 최종 코드가 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Head</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/head\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Home</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> [name, setName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n    <span class=\"hljs-keyword\">const</span> [email, setEmail] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n    <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSubmit</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">e</span>) => {\n        <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>);\n        e.<span class=\"hljs-title function_\">preventDefault</span>();\n\n        <span class=\"hljs-keyword\">if</span> (name == <span class=\"hljs-string\">\"\"</span> &#x26;&#x26; email == <span class=\"hljs-string\">\"\"</span>) {\n            <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n            <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"이름과 이메일 주소를 모두 입력해주세요!\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"/api/send\"</span>, {\n            <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"POST\"</span>,\n            <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ name, email }),\n        })\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =></span> res.<span class=\"hljs-title function_\">json</span>())\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n                <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n                <span class=\"hljs-keyword\">if</span> (data &#x26;&#x26; data.<span class=\"hljs-property\">id</span>) {\n                    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span>님, 저희에게 관심 가져주셔서 감사합니다! 곧 연락드리겠습니다!`</span>);\n                    <span class=\"hljs-title function_\">setName</span>(<span class=\"hljs-string\">\"\"</span>);\n                    <span class=\"hljs-title function_\">setEmail</span>(<span class=\"hljs-string\">\"\"</span>);\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"죄송합니다! 다시 시도해주세요.\"</span>);\n                }\n            })\n            .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n                <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n                <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"앗! 죄송하지만 오류가 발생했습니다.\"</span>);\n            });\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    };\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">flex</span> <span class=\"hljs-attr\">flex-col</span> <span class=\"hljs-attr\">items-center</span> <span class=\"hljs-attr\">p-24</span> <span class=\"hljs-attr\">min-h-screen</span>`}\n       ></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Head</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>나에게 연락하기 | Coffeed<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Head</span>></span>\n\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"relative flex flex-col gap-4 \"</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex flex-col place-items-center gap-4\"</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">m-0</span> <span class=\"hljs-attr\">text-center</span> <span class=\"hljs-attr\">text-3xl</span>`}></span>나에게 연락하기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span>\n                    <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"mt-6 flex flex-col max-w-xl gap-4 z-10\"</span>\n                    <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleSubmit}</span>\n                ></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"sr-only\"</span>></span>\n                        이름\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n                        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"name\"</span>\n                        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span>\n                        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n                        <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">\"name\"</span>\n                        <span class=\"hljs-attr\">required</span>\n                        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span>\n                       <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"rounded-md bg-white/5 px-3.5 py-2.5 text-white ring-1 ring-inset focus:ring-blue-600 text-sm md:w-96\"</span>\n                        <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"이름\"</span>\n                        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setName(e.target.value)}\n                    />\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"email-address\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"sr-only\"</span>></span>\n                        이메일 주소\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n                        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"email-address\"</span>\n                        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"email\"</span>\n                        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span>\n                        <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">\"email\"</span>\n                        <span class=\"hljs-attr\">required</span>\n                        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{email}</span>\n                        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"rounded-md bg-white/5 px-3.5 py-2.5 text-white ring-1 ring-inset focus:ring-blue-600 text-sm md:w-96\"</span>\n                        <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"이메일\"</span>\n                        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setEmail(e.target.value)}\n                    />\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n                        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>\n                        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex justify-center rounded-md bg-blue-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-blue-500\"</span>\n                    ></span>\n                        {loading ? (\n                            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n                                <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n                                    <span class=\"hljs-attr\">borderTopColor:</span> \"<span class=\"hljs-attr\">transparent</span>\",\n                                }}\n                                <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-4 h-4 border-2 border-white border-solid rounded-full animate-spin\"</span>\n                            ></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                        ) : (\n                            \"제출하기\"\n                        )}\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n    );\n}\n</code></pre>\n<p>양식을 제출하면 이메일이 .env 파일에 설정된 TO_EMAIL로 전송됩니다.</p>\n<p>이메일 API를 활용하여 다른 사용 사례에 통합하여 직접 알림을 받을 수도 있습니다.</p>\n<p>Next.js playbook <strong>Coffee</strong> 팀에서 작업 중인 페이지입니다. 대기 목록에 추가하려면 <a href=\"mailto:coffee@coffeeinc.in\">coffee@coffeeinc.in</a>으로 이메일을 보내주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}