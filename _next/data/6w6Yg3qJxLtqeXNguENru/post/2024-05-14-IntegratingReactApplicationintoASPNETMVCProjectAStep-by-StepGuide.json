{"pageProps":{"post":{"title":"ASPNET MVC 프로젝트에 React 애플리케이션 통합하기 단계별 가이드","description":"","date":"2024-05-14 11:11","slug":"2024-05-14-IntegratingReactApplicationintoASPNETMVCProjectAStep-by-StepGuide","content":"\n\n소개: 웹 개발 분야에서, React와 같은 현대적인 JavaScript 프레임워크를 전통적인 MVC (Model-View-Controller) 응용 프로그램에 통합하는 것이 일반적인 실천 방법이 되었습니다. 이러한 통합을 통해 개발자들은 React의 구성 요소 기반 아키텍처의 강점을 ASP.NET MVC의 익숙한 구조 내에서 활용할 수 있습니다. 이 안내서에서는 React 애플리케이션을 ASP.NET MVC 프로젝트에 매끄럽게 통합하는 과정을 안내하겠습니다.\n\nCreate React App: 먼저 create-react-app이나 기타 선호하는 방법을 사용하여 React 애플리케이션을 설정하세요.\n\n필수 패키지 설치: 아래 명령을 실행하여 React 개발에 필요한 패키지를 설치하세요:\n\n- npm install react react-dom\n- npm install — save-dev babel-core babel-loader @babel/preset-react @babel/preset-env\n- npm install babel-polyfill\n- npm install — save-dev webpack webpack-cli\n\n\n\n웹팩 구성하기: 루트 폴더에 webpack.config.js 파일을 생성하고 제공된 구성 코드를 붇여넣어주세요.\n\n```js\nconst path = require('path');\nmodule.exports = {\n  mode: 'development',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n  resolve: {\n    extensions: ['.js', '.jsx'],\n  },\n  externals: {\n    react: 'React', \n    'react-dom': 'ReactDOM', \n  },\n};\n```\n\nBabel 구성: 루트 폴더에 .babelrc 파일을 생성하고 Babel을 위한 제공된 프리셋을 추가해주세요.\n\n```js\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n}\n```\n\n\n\nESLint 구성 (선택 사항): 린팅 이슈가 발생하면, .eslintrc.json 파일을 만들고 지정된 대로 구성하세요.\n\n```js\n   // .eslintrc.json\n   {\n       \"env\": {\n         \"browser\": true,\n         \"es2021\": true,\n         \"node\": true\n       },\n       \"extends\": \"eslint:recommended\",\n       \"parserOptions\": {\n         \"ecmaVersion\": 12,\n         \"sourceType\": \"module\"\n       },\n       \"rules\": {\n         // 여기에 다른 규칙을 추가하세요\n       },\n       \"globals\": {\n         \"React\": \"writable\",\n         \"ReactDOM\": \"writable\",\n         \"createRoot\": \"writable\"\n       }\n     }\n```\n\nPackage.json 업데이트: package.json의 스크립트 섹션에 \"wpb\": \"webpack\"을 추가하세요.\n\n![이미지](/assets/img/2024-05-14-IntegratingReactApplicationintoASPNETMVCProjectAStep-by-StepGuide_0.png)\n\n\n\n리액트 앱 컴파일: 리액트 애플리케이션을 컴파일하려면 npm run wpb를 실행하세요. 이렇게 하면 지정된 dist 폴더에 bundle.js 파일이 생성됩니다.\n\n리액트 폴더 구조는 다음과 같이 보일 것입니다:\n\n![React Folder Structure](/assets/img/2024-05-14-IntegratingReactApplicationintoASPNETMVCProjectAStep-by-StepGuide_1.png)\n\n# MVC 애플리케이션 설정하기\n\n\n\nMVC 애플리케이션 생성: 먼저 Visual Studio나 선호하는 다른 IDE에서 새 ASP.NET MVC 애플리케이션을 생성해보세요.\n\n.cshtml 파일 업데이트: 렌더링하려는 React 컴포넌트를 포함하고자 하는 .cshtml 파일을 열어주세요.\n\n폴더 구조 생성: MVC 앱 내에서 컴파일된 React JS 파일을 저장할 폴더를 생성하세요. 그리고 React 앱에서 생성된 bundle.js 파일을 해당 폴더에 넣어두세요. (예: wwwroot/dist)\n\nReact 파일 참조: .cshtml 파일에서 React 종속성 및 컴파일된 bundle.js 파일을 참조하도록 다음 코드 스니펫을 포함해주세요:\n\n\n\n```jsx\n<div id=\"root\"></div>\n```\n\n## Scripts\n```html\n<script src=\"https://unpkg.com/react@18/umd/react.development.js\"></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script>\n<script src=\"~/dist/bundle.js\"></script>\n```\n\n![Illustration](/assets/img/2024-05-14-IntegratingReactApplicationintoASPNETMVCProjectAStep-by-StepGuide_2.png)\n\n# 결과:\n\nMVC 애플리케이션 실행...완료!\n\n\n\n\n![이미지](/assets/img/2024-05-14-IntegratingReactApplicationintoASPNETMVCProjectAStep-by-StepGuide_3.png)\n\n결론: 이 단계별 지침을 따르면 React 응용 프로그램을 ASP.NET MVC 프로젝트에 원활하게 통합할 수 있습니다. 이 접근 방식을 통해 React의 컴포넌트 기반 아키텍처의 이점을 활용하면서 서버 측 렌더링 및 비즈니스 로직 처리에 ASP.NET MVC의 견고함을 활용할 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-14-IntegratingReactApplicationintoASPNETMVCProjectAStep-by-StepGuide_0.png"},"coverImage":"/assets/img/2024-05-14-IntegratingReactApplicationintoASPNETMVCProjectAStep-by-StepGuide_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>소개: 웹 개발 분야에서, React와 같은 현대적인 JavaScript 프레임워크를 전통적인 MVC (Model-View-Controller) 응용 프로그램에 통합하는 것이 일반적인 실천 방법이 되었습니다. 이러한 통합을 통해 개발자들은 React의 구성 요소 기반 아키텍처의 강점을 ASP.NET MVC의 익숙한 구조 내에서 활용할 수 있습니다. 이 안내서에서는 React 애플리케이션을 ASP.NET MVC 프로젝트에 매끄럽게 통합하는 과정을 안내하겠습니다.</p>\n<p>Create React App: 먼저 create-react-app이나 기타 선호하는 방법을 사용하여 React 애플리케이션을 설정하세요.</p>\n<p>필수 패키지 설치: 아래 명령을 실행하여 React 개발에 필요한 패키지를 설치하세요:</p>\n<ul>\n<li>npm install react react-dom</li>\n<li>npm install — save-dev babel-core babel-loader @babel/preset-react @babel/preset-env</li>\n<li>npm install babel-polyfill</li>\n<li>npm install — save-dev webpack webpack-cli</li>\n</ul>\n<p>웹팩 구성하기: 루트 폴더에 webpack.config.js 파일을 생성하고 제공된 구성 코드를 붇여넣어주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'development'</span>,\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">'./src/index.js'</span>,\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">'dist'</span>),\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'bundle.js'</span>,\n  },\n  <span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-attr\">rules</span>: [\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(js|jsx)$/</span>,\n        <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>,\n        <span class=\"hljs-attr\">use</span>: {\n          <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'babel-loader'</span>,\n        },\n      },\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">'style-loader'</span>, <span class=\"hljs-string\">'css-loader'</span>],\n      },\n    ],\n  },\n  <span class=\"hljs-attr\">resolve</span>: {\n    <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.jsx'</span>],\n  },\n  <span class=\"hljs-attr\">externals</span>: {\n    <span class=\"hljs-attr\">react</span>: <span class=\"hljs-string\">'React'</span>, \n    <span class=\"hljs-string\">'react-dom'</span>: <span class=\"hljs-string\">'ReactDOM'</span>, \n  },\n};\n</code></pre>\n<p>Babel 구성: 루트 폴더에 .babelrc 파일을 생성하고 Babel을 위한 제공된 프리셋을 추가해주세요.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"presets\"</span>: [<span class=\"hljs-string\">\"@babel/preset-env\"</span>, <span class=\"hljs-string\">\"@babel/preset-react\"</span>]\n}\n</code></pre>\n<p>ESLint 구성 (선택 사항): 린팅 이슈가 발생하면, .eslintrc.json 파일을 만들고 지정된 대로 구성하세요.</p>\n<pre><code class=\"hljs language-js\">   <span class=\"hljs-comment\">// .eslintrc.json</span>\n   {\n       <span class=\"hljs-string\">\"env\"</span>: {\n         <span class=\"hljs-string\">\"browser\"</span>: <span class=\"hljs-literal\">true</span>,\n         <span class=\"hljs-string\">\"es2021\"</span>: <span class=\"hljs-literal\">true</span>,\n         <span class=\"hljs-string\">\"node\"</span>: <span class=\"hljs-literal\">true</span>\n       },\n       <span class=\"hljs-string\">\"extends\"</span>: <span class=\"hljs-string\">\"eslint:recommended\"</span>,\n       <span class=\"hljs-string\">\"parserOptions\"</span>: {\n         <span class=\"hljs-string\">\"ecmaVersion\"</span>: <span class=\"hljs-number\">12</span>,\n         <span class=\"hljs-string\">\"sourceType\"</span>: <span class=\"hljs-string\">\"module\"</span>\n       },\n       <span class=\"hljs-string\">\"rules\"</span>: {\n         <span class=\"hljs-comment\">// 여기에 다른 규칙을 추가하세요</span>\n       },\n       <span class=\"hljs-string\">\"globals\"</span>: {\n         <span class=\"hljs-string\">\"React\"</span>: <span class=\"hljs-string\">\"writable\"</span>,\n         <span class=\"hljs-string\">\"ReactDOM\"</span>: <span class=\"hljs-string\">\"writable\"</span>,\n         <span class=\"hljs-string\">\"createRoot\"</span>: <span class=\"hljs-string\">\"writable\"</span>\n       }\n     }\n</code></pre>\n<p>Package.json 업데이트: package.json의 스크립트 섹션에 \"wpb\": \"webpack\"을 추가하세요.</p>\n<p><img src=\"/assets/img/2024-05-14-IntegratingReactApplicationintoASPNETMVCProjectAStep-by-StepGuide_0.png\" alt=\"이미지\"></p>\n<p>리액트 앱 컴파일: 리액트 애플리케이션을 컴파일하려면 npm run wpb를 실행하세요. 이렇게 하면 지정된 dist 폴더에 bundle.js 파일이 생성됩니다.</p>\n<p>리액트 폴더 구조는 다음과 같이 보일 것입니다:</p>\n<p><img src=\"/assets/img/2024-05-14-IntegratingReactApplicationintoASPNETMVCProjectAStep-by-StepGuide_1.png\" alt=\"React Folder Structure\"></p>\n<h1>MVC 애플리케이션 설정하기</h1>\n<p>MVC 애플리케이션 생성: 먼저 Visual Studio나 선호하는 다른 IDE에서 새 ASP.NET MVC 애플리케이션을 생성해보세요.</p>\n<p>.cshtml 파일 업데이트: 렌더링하려는 React 컴포넌트를 포함하고자 하는 .cshtml 파일을 열어주세요.</p>\n<p>폴더 구조 생성: MVC 앱 내에서 컴파일된 React JS 파일을 저장할 폴더를 생성하세요. 그리고 React 앱에서 생성된 bundle.js 파일을 해당 폴더에 넣어두세요. (예: wwwroot/dist)</p>\n<p>React 파일 참조: .cshtml 파일에서 React 종속성 및 컴파일된 bundle.js 파일을 참조하도록 다음 코드 스니펫을 포함해주세요:</p>\n<pre><code class=\"hljs language-jsx\">&#x3C;div id=<span class=\"hljs-string\">\"root\"</span>>&#x3C;/div>\n</code></pre>\n<h2>Scripts</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://unpkg.com/react@18/umd/react.development.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"~/dist/bundle.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<p><img src=\"/assets/img/2024-05-14-IntegratingReactApplicationintoASPNETMVCProjectAStep-by-StepGuide_2.png\" alt=\"Illustration\"></p>\n<h1>결과:</h1>\n<p>MVC 애플리케이션 실행...완료!</p>\n<p><img src=\"/assets/img/2024-05-14-IntegratingReactApplicationintoASPNETMVCProjectAStep-by-StepGuide_3.png\" alt=\"이미지\"></p>\n<p>결론: 이 단계별 지침을 따르면 React 응용 프로그램을 ASP.NET MVC 프로젝트에 원활하게 통합할 수 있습니다. 이 접근 방식을 통해 React의 컴포넌트 기반 아키텍처의 이점을 활용하면서 서버 측 렌더링 및 비즈니스 로직 처리에 ASP.NET MVC의 견고함을 활용할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}