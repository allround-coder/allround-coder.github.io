{"pageProps":{"post":{"title":"자바스크립트 함수에 대한 인터뷰 개념","description":"","date":"2024-05-14 14:08","slug":"2024-05-14-InterviewConceptsonJavaScriptFunctions","content":"\n\n![image](/assets/img/2024-05-14-InterviewConceptsonJavaScriptFunctions_0.png)\n\n이 기사는 현재 작업 중인 JavaScript 인터뷰 컨셉을 준비하는 데 도움이 되는 안내서를 기반으로 합니다. 처음 두 장(chapter)는 지금 무료로 다운로드할 수 있습니다. 가이드에 대한 피드백을 주시면 감사하겠습니다.\nPDF 다운로드 링크는 여기에 있습니다. [PDF 다운로드 링크](https://9820419704756.gumroad.com/l/gdycz)\n\n이제, 이 기사의 주제로 넘어가 봅시다!\n\nJavaScript에서 함수를 여러 가지 방법으로 만들 수 있습니다.\n\n\n\n'function' 키워드를 사용하여 함수를 생성할 수 있습니다. 이를 함수 선언이라고 합니다. 아래는 예시입니다:\n\n```js\nfunction addNumbers(a, b) {\n  return a + b;\n}\n```\n\n이 예시에서 'addNumbers'라는 함수를 선언했습니다. 두 개의 인수 'a'와 'b'를 받습니다. 함수의 코드 블록에서는 + 연산자를 사용하여 두 인수를 더한 후 결과를 반환합니다.\n\n함수 선언을 사용하는 장점 중 하나는 호이스팅이 가능하다는 것입니다. 즉, 선언되기 전에 호출할 수 있다는 의미입니다.\n\n\n\n기능 표현식: 함수 표현식은 함수를 변수에 할당하여 선언하는 방법입니다. 예시입니다:\n\n```js\nconst multiply = function(a, b) {\n  return a * b;\n}\nconsole.log(multiply(2,3)); // 결과: 6\n```\n\n함수 표현식을 사용하는 장점은 다른 함수에 인수로 전달할 수 있다는 것입니다.\n\n화살표 함수: 화살표 함수는 JavaScript에서 함수를 선언하는 새로운 방법이며 `=` 연산자를 사용합니다. 여기 예시가 있습니다:\n\n\n\n```js\nconst divide = (a, b) => {\n  return a / b;\n}\nconsole.log(divide(6,3)); // 출력: 2\n```\n\n화살표 함수는 간결한 구문을 가지고 있어서 함수가 충분히 간단하다면 한 줄로 작성할 수 있습니다.\n\n익명 함수: 익명 함수는 이름이 없는 함수로 다른 함수의 매개변수로 사용됩니다. 다음은 예시입니다:\n\n```js\nconst numbers = [1, 2, 3, 4];\nconst double = numbers.map(function(num) {\n  return num * 2;\n})\nconsole.log(double); // 출력: [2, 4, 6, 8]\n```\n\n\n\n익명 함수를 사용하는 장점은 다른 함수의 콜백 함수로 사용할 수 있다는 것입니다.\n\n면접에서 기대할 수 있는 질문\n\n자바스크립트에서 함수 범위의 개념을 설명해주세요.\n\n함수 범위는 함수 내에서 변수의 가시성을 의미합니다. 함수 내에서 선언된 변수는 해당 함수 내에서만 지역 변수로써 사용되며 외부에서 접근할 수 없습니다. 이는 명명 충돌을 방지하고 캡슐화를 촉진하는 데 도움이 됩니다.\n\n\n\n```js\nfunction greet() {\n  let message = \"Hello!\";\n  console.log(message); // \"Hello!\"\n}\ngreet();\nconsole.log(message); // Uncaught ReferenceError: 'message' is not defined\n```\n\nJavaScript에서 콜백 함수란 무엇인가요?\n\n콜백 함수는 다른 함수의 인수로 전달되어 외부 함수 내에서 호출되는 함수를 말합니다. 콜백 함수는 주로 비동기 작업, 이벤트 처리 및 고차 함수에서 사용됩니다.\n\n```js\nfunction doSomething(callback) {\n   console.log(\"작업 중...\");\n   callback(); // 콜백 함수 실행\n}\nfunction callbackFunction() {\n   console.log(\"콜백 함수 실행됨!\");\n}\n// doSomething에 callbackFunction을 콜백으로 전달\ndoSomething(callbackFunction);\n// 출력\n/* \"작업 중...\"\n\"콜백 함수 실행됨!\"\n*/\n```\n\n\n\n자바스크립트에서 고차 함수란 무엇인가요?\n\n고차 함수는 다른 함수를 인수로 받거나 함수를 결과로 반환하는 함수를 말합니다. 고차 함수는 함수 합성, 커링, 콜백과 같은 기능적 프로그래밍 패러다임을 지원합니다.\n\n```js\n// 고차 함수 예시\nfunction operateOnArray(array, operation) {\n  return array.map(operation); // 'operation'은 콜백 함수입니다\n}\nfunction double(num) {\n  return num * 2;\n}\nlet numbers = [1, 2, 3];\nlet doubledNumbers = operateOnArray(numbers, double);\nconsole.log(doubledNumbers); // 출력: [2, 4, 6]\n```\n\n자바스크립트에서 함수 호이스팅이란 무엇인가요?\n\n\n\n펑션 호이스팅은 JavaScript의 행동 중 하나로, 펑션 선언들이 컴파일 단계에서 자신을 포함하는 스코프의 맨 위로 이동하는 것을 말합니다. 이로 인해 함수들이 코드 내에서 선언되기 전에 호출될 수 있게 됩니다.\n\n```js\nsayHello(); // 출력: \"Hello!\"\nfunction sayHello() {\n  console.log(\"Hello!\");\n}\n```\n\nJavaScript에서 클로저(concept of closure)란 무엇인가요?\n\n클로저는 함수와 해당 함수가 선언된 렉시컬 환경(lexical environment)의 조합을 의미합니다. 클로저를 통해 함수는 포함하는 스코프의 변수에 대한 참조를 유지하고 접근할 수 있게 되며, 포함하는 스코프의 실행이 완료된 이후에도 영향을 받습니다.\n\n\n\n```js\nfunction outerFunction() {\n  let outerVariable = \"외부 함수에서 왔어요\";\n  function innerFunction() {\n    console.log(outerVariable); // 클로저에서 outerVariable에 접근\n  }\n  return innerFunction;\n}\nlet closureFunc = outerFunction();\nclosureFunc(); // 출력: \"외부 함수에서 왔어요\"\n```\n\n자바스크립트 함수에서 `this` 키워드의 목적은 무엇인가요?\n\n자바스크립트 함수에서 `this` 키워드는 함수가 호출된 위치의 문맥을 가리킵니다. 이를 통해 함수들은 자신을 호출한 객체의 속성에 접근하고 조작할 수 있어 코드 재사용 및 객체지향 프로그래밍 원칙을 용이하게 합니다.\n\n```js\nlet person = {\n  name: \"John\",\n  greet: function() {\n    console.log(\"안녕, \" + this.name + \"!\");\n  }\n};\nperson.greet(); // 출력: \"안녕, John!\"\n```\n\n\n\n자바스크립트에서 함수 커링(function currying)이란 무엇인가요?\n\n함수 커링은 여러 인수를 받는 함수를 각각 하나의 인수를 받는 중첩된 함수들의 연속으로 변환하는 과정입니다. 커링은 함수의 부분 적용을 가능하게 하여 더 큰 유연성과 재사용성을 제공합니다.\n\n```js\n// 함수 커링 예시\nfunction multiply(a) {\n  return function(b) {\n    return a * b;\n  };\n}\nlet multiplyByTwo = multiply(2);\nconsole.log(multiplyByTwo(5)); // 출력: 10\n```\n\n자바스크립트에서 즉시 호출 함수 표현식(IIFE)이란 무엇인가요?\n\n\n\nIIFE는 JavaScript 디자인 패턴으로, 함수를 괄호로 둘러싸고 즉시 호출하는 것을 포함합니다. 함수에 대한 개인 스코프를 만들어 전역 스코프에서 변수 오염을 방지합니다.\n\n```js\n// 즉시 호출되는 함수 표현(IIFE)\n(function() {\n  let message = \"IIFE에서 안녕하세요\";\n  console.log(message);\n})();\n// 출력: \"IIFE에서 안녕하세요\"\n```\n\n메모이제이션의 개념은 무엇이며, JavaScript 함수에서 어떻게 구현할 수 있을까요?\n\n메모이제이션은 비싼 함수 호출의 결과를 저장하고 같은 입력이 다시 발생할 때 캐시된 결과를 반환하는 최적화 기술입니다. 클로저를 사용하여 이전에 계산된 결과를 캐싱함으로써 구현할 수 있습니다.\n\n\n\n```js\nfunction memoize(fn) {\n  let cache = {};\n  return function(...args) {\n    let key = JSON.stringify(args);\n    if (!cache[key]) {\n      cache[key] = fn(...args);\n    }\n    return cache[key];\n  };\n}\n// 메모이제이션에 이점을 가지는 함수 예시\nconst fibonacci = memoize(function(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n});\nconst result = fibonacci(10);\nconsole.log(result); // 결과 55\n```\n\n이것으로 모두 마무리입니다! 이 기사 끝까지 읽어 주셔서 감사합니다. 계속해서 학습하고成長해 나가요.\n\nJavaScript Interview Concepts- A Guide를 다운로드하시기를 잊지 마세요. 한정 기간 동안 무료로 제공될 것입니다.\n\n만약 이 기사에서 가치 있는 내용을 좋아하고 배웠다면, 구독해주시고 기사에 박수를 보내주세요.","ogImage":{"url":"/assets/img/2024-05-14-InterviewConceptsonJavaScriptFunctions_0.png"},"coverImage":"/assets/img/2024-05-14-InterviewConceptsonJavaScriptFunctions_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-14-InterviewConceptsonJavaScriptFunctions_0.png\" alt=\"image\"></p>\n<p>이 기사는 현재 작업 중인 JavaScript 인터뷰 컨셉을 준비하는 데 도움이 되는 안내서를 기반으로 합니다. 처음 두 장(chapter)는 지금 무료로 다운로드할 수 있습니다. 가이드에 대한 피드백을 주시면 감사하겠습니다.\nPDF 다운로드 링크는 여기에 있습니다. <a href=\"https://9820419704756.gumroad.com/l/gdycz\" rel=\"nofollow\" target=\"_blank\">PDF 다운로드 링크</a></p>\n<p>이제, 이 기사의 주제로 넘어가 봅시다!</p>\n<p>JavaScript에서 함수를 여러 가지 방법으로 만들 수 있습니다.</p>\n<p>'function' 키워드를 사용하여 함수를 생성할 수 있습니다. 이를 함수 선언이라고 합니다. 아래는 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addNumbers</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n</code></pre>\n<p>이 예시에서 'addNumbers'라는 함수를 선언했습니다. 두 개의 인수 'a'와 'b'를 받습니다. 함수의 코드 블록에서는 + 연산자를 사용하여 두 인수를 더한 후 결과를 반환합니다.</p>\n<p>함수 선언을 사용하는 장점 중 하나는 호이스팅이 가능하다는 것입니다. 즉, 선언되기 전에 호출할 수 있다는 의미입니다.</p>\n<p>기능 표현식: 함수 표현식은 함수를 변수에 할당하여 선언하는 방법입니다. 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> multiply = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a * b;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// 결과: 6</span>\n</code></pre>\n<p>함수 표현식을 사용하는 장점은 다른 함수에 인수로 전달할 수 있다는 것입니다.</p>\n<p>화살표 함수: 화살표 함수는 JavaScript에서 함수를 선언하는 새로운 방법이며 <code>=</code> 연산자를 사용합니다. 여기 예시가 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">divide</span> = (<span class=\"hljs-params\">a, b</span>) => {\n  <span class=\"hljs-keyword\">return</span> a / b;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">divide</span>(<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// 출력: 2</span>\n</code></pre>\n<p>화살표 함수는 간결한 구문을 가지고 있어서 함수가 충분히 간단하다면 한 줄로 작성할 수 있습니다.</p>\n<p>익명 함수: 익명 함수는 이름이 없는 함수로 다른 함수의 매개변수로 사용됩니다. 다음은 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-keyword\">const</span> double = numbers.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>) {\n  <span class=\"hljs-keyword\">return</span> num * <span class=\"hljs-number\">2</span>;\n})\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(double); <span class=\"hljs-comment\">// 출력: [2, 4, 6, 8]</span>\n</code></pre>\n<p>익명 함수를 사용하는 장점은 다른 함수의 콜백 함수로 사용할 수 있다는 것입니다.</p>\n<p>면접에서 기대할 수 있는 질문</p>\n<p>자바스크립트에서 함수 범위의 개념을 설명해주세요.</p>\n<p>함수 범위는 함수 내에서 변수의 가시성을 의미합니다. 함수 내에서 선언된 변수는 해당 함수 내에서만 지역 변수로써 사용되며 외부에서 접근할 수 없습니다. 이는 명명 충돌을 방지하고 캡슐화를 촉진하는 데 도움이 됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">let</span> message = <span class=\"hljs-string\">\"Hello!\"</span>;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message); <span class=\"hljs-comment\">// \"Hello!\"</span>\n}\n<span class=\"hljs-title function_\">greet</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message); <span class=\"hljs-comment\">// Uncaught ReferenceError: 'message' is not defined</span>\n</code></pre>\n<p>JavaScript에서 콜백 함수란 무엇인가요?</p>\n<p>콜백 함수는 다른 함수의 인수로 전달되어 외부 함수 내에서 호출되는 함수를 말합니다. 콜백 함수는 주로 비동기 작업, 이벤트 처리 및 고차 함수에서 사용됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doSomething</span>(<span class=\"hljs-params\">callback</span>) {\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"작업 중...\"</span>);\n   <span class=\"hljs-title function_\">callback</span>(); <span class=\"hljs-comment\">// 콜백 함수 실행</span>\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">callbackFunction</span>(<span class=\"hljs-params\"></span>) {\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"콜백 함수 실행됨!\"</span>);\n}\n<span class=\"hljs-comment\">// doSomething에 callbackFunction을 콜백으로 전달</span>\n<span class=\"hljs-title function_\">doSomething</span>(callbackFunction);\n<span class=\"hljs-comment\">// 출력</span>\n<span class=\"hljs-comment\">/* \"작업 중...\"\n\"콜백 함수 실행됨!\"\n*/</span>\n</code></pre>\n<p>자바스크립트에서 고차 함수란 무엇인가요?</p>\n<p>고차 함수는 다른 함수를 인수로 받거나 함수를 결과로 반환하는 함수를 말합니다. 고차 함수는 함수 합성, 커링, 콜백과 같은 기능적 프로그래밍 패러다임을 지원합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 고차 함수 예시</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">operateOnArray</span>(<span class=\"hljs-params\">array, operation</span>) {\n  <span class=\"hljs-keyword\">return</span> array.<span class=\"hljs-title function_\">map</span>(operation); <span class=\"hljs-comment\">// 'operation'은 콜백 함수입니다</span>\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">double</span>(<span class=\"hljs-params\">num</span>) {\n  <span class=\"hljs-keyword\">return</span> num * <span class=\"hljs-number\">2</span>;\n}\n<span class=\"hljs-keyword\">let</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> doubledNumbers = <span class=\"hljs-title function_\">operateOnArray</span>(numbers, double);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(doubledNumbers); <span class=\"hljs-comment\">// 출력: [2, 4, 6]</span>\n</code></pre>\n<p>자바스크립트에서 함수 호이스팅이란 무엇인가요?</p>\n<p>펑션 호이스팅은 JavaScript의 행동 중 하나로, 펑션 선언들이 컴파일 단계에서 자신을 포함하는 스코프의 맨 위로 이동하는 것을 말합니다. 이로 인해 함수들이 코드 내에서 선언되기 전에 호출될 수 있게 됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">sayHello</span>(); <span class=\"hljs-comment\">// 출력: \"Hello!\"</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Hello!\"</span>);\n}\n</code></pre>\n<p>JavaScript에서 클로저(concept of closure)란 무엇인가요?</p>\n<p>클로저는 함수와 해당 함수가 선언된 렉시컬 환경(lexical environment)의 조합을 의미합니다. 클로저를 통해 함수는 포함하는 스코프의 변수에 대한 참조를 유지하고 접근할 수 있게 되며, 포함하는 스코프의 실행이 완료된 이후에도 영향을 받습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">outerFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">let</span> outerVariable = <span class=\"hljs-string\">\"외부 함수에서 왔어요\"</span>;\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">innerFunction</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(outerVariable); <span class=\"hljs-comment\">// 클로저에서 outerVariable에 접근</span>\n  }\n  <span class=\"hljs-keyword\">return</span> innerFunction;\n}\n<span class=\"hljs-keyword\">let</span> closureFunc = <span class=\"hljs-title function_\">outerFunction</span>();\n<span class=\"hljs-title function_\">closureFunc</span>(); <span class=\"hljs-comment\">// 출력: \"외부 함수에서 왔어요\"</span>\n</code></pre>\n<p>자바스크립트 함수에서 <code>this</code> 키워드의 목적은 무엇인가요?</p>\n<p>자바스크립트 함수에서 <code>this</code> 키워드는 함수가 호출된 위치의 문맥을 가리킵니다. 이를 통해 함수들은 자신을 호출한 객체의 속성에 접근하고 조작할 수 있어 코드 재사용 및 객체지향 프로그래밍 원칙을 용이하게 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John\"</span>,\n  <span class=\"hljs-attr\">greet</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"안녕, \"</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">\"!\"</span>);\n  }\n};\nperson.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 출력: \"안녕, John!\"</span>\n</code></pre>\n<p>자바스크립트에서 함수 커링(function currying)이란 무엇인가요?</p>\n<p>함수 커링은 여러 인수를 받는 함수를 각각 하나의 인수를 받는 중첩된 함수들의 연속으로 변환하는 과정입니다. 커링은 함수의 부분 적용을 가능하게 하여 더 큰 유연성과 재사용성을 제공합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 함수 커링 예시</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-params\">a</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">b</span>) {\n    <span class=\"hljs-keyword\">return</span> a * b;\n  };\n}\n<span class=\"hljs-keyword\">let</span> multiplyByTwo = <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">multiplyByTwo</span>(<span class=\"hljs-number\">5</span>)); <span class=\"hljs-comment\">// 출력: 10</span>\n</code></pre>\n<p>자바스크립트에서 즉시 호출 함수 표현식(IIFE)이란 무엇인가요?</p>\n<p>IIFE는 JavaScript 디자인 패턴으로, 함수를 괄호로 둘러싸고 즉시 호출하는 것을 포함합니다. 함수에 대한 개인 스코프를 만들어 전역 스코프에서 변수 오염을 방지합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 즉시 호출되는 함수 표현(IIFE)</span>\n(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">let</span> message = <span class=\"hljs-string\">\"IIFE에서 안녕하세요\"</span>;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message);\n})();\n<span class=\"hljs-comment\">// 출력: \"IIFE에서 안녕하세요\"</span>\n</code></pre>\n<p>메모이제이션의 개념은 무엇이며, JavaScript 함수에서 어떻게 구현할 수 있을까요?</p>\n<p>메모이제이션은 비싼 함수 호출의 결과를 저장하고 같은 입력이 다시 발생할 때 캐시된 결과를 반환하는 최적화 기술입니다. 클로저를 사용하여 이전에 계산된 결과를 캐싱함으로써 구현할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">memoize</span>(<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">let</span> cache = {};\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...args</span>) {\n    <span class=\"hljs-keyword\">let</span> key = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(args);\n    <span class=\"hljs-keyword\">if</span> (!cache[key]) {\n      cache[key] = <span class=\"hljs-title function_\">fn</span>(...args);\n    }\n    <span class=\"hljs-keyword\">return</span> cache[key];\n  };\n}\n<span class=\"hljs-comment\">// 메모이제이션에 이점을 가지는 함수 예시</span>\n<span class=\"hljs-keyword\">const</span> fibonacci = <span class=\"hljs-title function_\">memoize</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) {\n  <span class=\"hljs-keyword\">if</span> (n &#x3C;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> n;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fibonacci</span>(n - <span class=\"hljs-number\">1</span>) + <span class=\"hljs-title function_\">fibonacci</span>(n - <span class=\"hljs-number\">2</span>);\n});\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-number\">10</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result); <span class=\"hljs-comment\">// 결과 55</span>\n</code></pre>\n<p>이것으로 모두 마무리입니다! 이 기사 끝까지 읽어 주셔서 감사합니다. 계속해서 학습하고成長해 나가요.</p>\n<p>JavaScript Interview Concepts- A Guide를 다운로드하시기를 잊지 마세요. 한정 기간 동안 무료로 제공될 것입니다.</p>\n<p>만약 이 기사에서 가치 있는 내용을 좋아하고 배웠다면, 구독해주시고 기사에 박수를 보내주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}