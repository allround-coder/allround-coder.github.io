{"pageProps":{"post":{"title":"사용자 경험(UX) 크로스 문서 뷰 전환 하는 방법","description":"","date":"2024-05-27 19:05","slug":"2024-05-27-Next-levelUserExperienceWithCross-documentViewTransitions","content":"\n\n## 파워포인트 슬라이드쇼처럼 웹사이트를 만드는 방법\n\n![Image](/assets/img/2024-05-27-Next-levelUserExperienceWithCross-documentViewTransitions_0.png)\n\n웹사이트의 링크를 클릭하면서 왜 PowerPoint 슬라이드쇼처럼 부드럽지 않을까 궁금했던 적이 있나요?\n\n표준적인 불편한 페이지 로딩에 짜증이 나시나요?\n\n<div class=\"content-ad\"></div>\n\n다행히도 매우 간단한 해결책이 있습니다. CSS와 JavaScript에 대한 약간의 경험만 있으면 사용자 정의 전환을 시작할 수 있습니다.\n\n이 문서에서는 다음 프로젝트에서 이를 사용해야 하는 이유를 설명하고, 웹사이트에 구현하는 방법을 보여드릴 것입니다.\n\n# 왜 Cross-Document View 전환을 사용해야 하는가?\n\n- 웹사이트를 사용할 때 사용자 경험과 만족도가 향상되고 개선됩니다.\n- 이는 웹사이트의 일관성을 높이고, 내용에 대한 이해를 증진시켜줍니다.\n- 특수 효과를 위해 일반적으로 외부 라이브러리 및 프레임워크를 사용하지만, 이는 성능 손실로 이어질 수 있습니다. 반면 내부 방법은 더 빠르고 효과적인 방법을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# 문서 간 보기 전환 구현\n\n문서 간 보기 전환을 구현하려면 HTML, CSS, 그리고 JavaScript를 조합하여 사용해야 합니다.\n\n아래에서는 이러한 전환을 설정하고 구현하는 데 필요한 단계를 안내해 드리겠습니다.\n\n## 기본 설정\n\n<div class=\"content-ad\"></div>\n\n다중 페이지 애플리케이션을 위한 기본적인 HTML 구조부터 시작해보겠습니다. 두 개의 간단한 HTML 페이지를 생성해보겠습니다.\n\n페이지 1: index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>페이지 1</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>페이지 1</h1>\n        <a href=\"page2.html\" class=\"transition-link\">페이지 2로 이동</a>\n    </div>\n    <script src=\"transition.js\"></script>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>페이지 2</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>페이지 2</h1>\n        <a href=\"index.html\" class=\"transition-link\">페이지 1로 이동</a>\n    </div>\n    <script src=\"transition.js\"></script>\n</body>\n</html>\n```\n\n## 트랜지션을 위한 CSS\n\n트랜지션을 위한 CSS 스타일을 정의합니다. 여기서는 간단한 페이드 인 및 페이드 아웃 효과를 사용할 것입니다.\n\n```js\n/* styles.css */\nbody {\n    margin: 0;\n    font-family: Arial, sans-serif;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    transition: opacity 0.5s ease;\n}\n\n.hidden {\n    opacity: 0;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 페이지 전환 처리를 위한 JavaScript\n\n페이지 간 전환을 처리하는 JavaScript 로직을 구현하세요. 이는 링크에 이벤트 리스너를 추가하고 전환 효과를 관리하는 것을 포함합니다.\n\n```js\n// transition.js\ndocument.addEventListener('DOMContentLoaded', () => {\n    const links = document.querySelectorAll('.transition-link');\n\n    links.forEach(link => {\n        link.addEventListener('click', event => {\n            event.preventDefault();\n            const targetUrl = event.target.href;\n\n            document.body.classList.add('hidden');\n\n            setTimeout(() => {\n                window.location.href = targetUrl;\n            }, 500);\n        });\n    });\n});\n\nwindow.addEventListener('pageshow', () => {\n    document.body.classList.remove('hidden');\n});\n```\n\n# 모두 함께 적용하기\n\n<div class=\"content-ad\"></div>\n\nindex.html과 page2.html 모두 CSS와 JavaScript 파일이 올바르게 연결되어 있는지 확인해주세요. 사용자가 다른 페이지로 이동하려는 링크를 클릭하면 현재 페이지가 페이드아웃되고 새 페이지가 페이드인되어 부드러운 전환 효과가 만들어집니다.\n\n![다음 수준의 사용자 경험을 위한 문서 간 뷰 전환](/assets/img/2024-05-27-Next-levelUserExperienceWithCross-documentViewTransitions_1.png)\n\n## 고급 전환\n\n기본 페이드 전환은 좋은 시작점이지만, 슬라이드, 스케일 또는 사용자 정의 애니메이션과 같은 더 복잡한 전환으로 창의적으로 구성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n다음은 슬라이드 전환의 예시입니다:\n\n```css\n/* styles.css */\n.container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    transition: transform 0.5s ease, opacity 0.5s ease;\n}\n\n.hidden {\n    opacity: 0;\n    transform: translateX(-100%);\n}\n```\n\n또한 다양한 탐색 컨텍스트에 따른 다양한 종류의 전환을 처리하기 위해 더 복잡한 JavaScript를 추가할 수도 있습니다.\n\n더 많은 정보를 위해 이 웹사이트도 확인해보세요: [https://developer.chrome.com/docs/web-platform/view-transitions/cross-document](https://developer.chrome.com/docs/web-platform/view-transitions/cross-document)\n\n<div class=\"content-ad\"></div>\n\n# 최종 인사\n\n문서 간 보기 전환이란 기능은 멀티페이지 애플리케이션의 사용자 경험을 향상시키는 강력한 기능입니다.\n\n페이지간 부드럽고 일관된 전환을 구현함으로써, 웹 애플리케이션을 더 현대적이고 반응성있게 느끼게 할 수 있습니다.\n\n서로 다른 종류의 전환을 실험하여 애플리케이션 디자인과 사용자 경험 목표에 가장 적합한 것을 찾아보세요.\n\n<div class=\"content-ad\"></div>\n\n행운을 빕니다!","ogImage":{"url":"/assets/img/2024-05-27-Next-levelUserExperienceWithCross-documentViewTransitions_0.png"},"coverImage":"/assets/img/2024-05-27-Next-levelUserExperienceWithCross-documentViewTransitions_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>파워포인트 슬라이드쇼처럼 웹사이트를 만드는 방법</h2>\n<p><img src=\"/assets/img/2024-05-27-Next-levelUserExperienceWithCross-documentViewTransitions_0.png\" alt=\"Image\"></p>\n<p>웹사이트의 링크를 클릭하면서 왜 PowerPoint 슬라이드쇼처럼 부드럽지 않을까 궁금했던 적이 있나요?</p>\n<p>표준적인 불편한 페이지 로딩에 짜증이 나시나요?</p>\n<p>다행히도 매우 간단한 해결책이 있습니다. CSS와 JavaScript에 대한 약간의 경험만 있으면 사용자 정의 전환을 시작할 수 있습니다.</p>\n<p>이 문서에서는 다음 프로젝트에서 이를 사용해야 하는 이유를 설명하고, 웹사이트에 구현하는 방법을 보여드릴 것입니다.</p>\n<h1>왜 Cross-Document View 전환을 사용해야 하는가?</h1>\n<ul>\n<li>웹사이트를 사용할 때 사용자 경험과 만족도가 향상되고 개선됩니다.</li>\n<li>이는 웹사이트의 일관성을 높이고, 내용에 대한 이해를 증진시켜줍니다.</li>\n<li>특수 효과를 위해 일반적으로 외부 라이브러리 및 프레임워크를 사용하지만, 이는 성능 손실로 이어질 수 있습니다. 반면 내부 방법은 더 빠르고 효과적인 방법을 제공합니다.</li>\n</ul>\n<h1>문서 간 보기 전환 구현</h1>\n<p>문서 간 보기 전환을 구현하려면 HTML, CSS, 그리고 JavaScript를 조합하여 사용해야 합니다.</p>\n<p>아래에서는 이러한 전환을 설정하고 구현하는 데 필요한 단계를 안내해 드리겠습니다.</p>\n<h2>기본 설정</h2>\n<p>다중 페이지 애플리케이션을 위한 기본적인 HTML 구조부터 시작해보겠습니다. 두 개의 간단한 HTML 페이지를 생성해보겠습니다.</p>\n<p>페이지 1: index.html</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>페이지 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"styles.css\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>페이지 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"page2.html\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"transition-link\"</span>></span>페이지 2로 이동<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"transition.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;title>페이지 2&#x3C;/title>\n    &#x3C;link rel=\"stylesheet\" href=\"styles.css\">\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div class=\"container\">\n        &#x3C;h1>페이지 2&#x3C;/h1>\n        &#x3C;a href=\"index.html\" class=\"transition-link\">페이지 1로 이동&#x3C;/a>\n    &#x3C;/div>\n    &#x3C;script src=\"transition.js\">&#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h2>트랜지션을 위한 CSS</h2>\n<p>트랜지션을 위한 CSS 스타일을 정의합니다. 여기서는 간단한 페이드 인 및 페이드 아웃 효과를 사용할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* styles.css */</span>\nbody {\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span>;\n    font-<span class=\"hljs-attr\">family</span>: <span class=\"hljs-title class_\">Arial</span>, sans-serif;\n}\n\n.<span class=\"hljs-property\">container</span> {\n    <span class=\"hljs-attr\">display</span>: flex;\n    flex-<span class=\"hljs-attr\">direction</span>: column;\n    align-<span class=\"hljs-attr\">items</span>: center;\n    justify-<span class=\"hljs-attr\">content</span>: center;\n    <span class=\"hljs-attr\">height</span>: 100vh;\n    <span class=\"hljs-attr\">transition</span>: opacity <span class=\"hljs-number\">0.</span>5s ease;\n}\n\n.<span class=\"hljs-property\">hidden</span> {\n    <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h2>페이지 전환 처리를 위한 JavaScript</h2>\n<p>페이지 간 전환을 처리하는 JavaScript 로직을 구현하세요. 이는 링크에 이벤트 리스너를 추가하고 전환 효과를 관리하는 것을 포함합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// transition.js</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'DOMContentLoaded'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> links = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">'.transition-link'</span>);\n\n    links.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">link</span> =></span> {\n        link.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =></span> {\n            event.<span class=\"hljs-title function_\">preventDefault</span>();\n            <span class=\"hljs-keyword\">const</span> targetUrl = event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">href</span>;\n\n            <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">'hidden'</span>);\n\n            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n                <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">href</span> = targetUrl;\n            }, <span class=\"hljs-number\">500</span>);\n        });\n    });\n});\n\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'pageshow'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">'hidden'</span>);\n});\n</code></pre>\n<h1>모두 함께 적용하기</h1>\n<p>index.html과 page2.html 모두 CSS와 JavaScript 파일이 올바르게 연결되어 있는지 확인해주세요. 사용자가 다른 페이지로 이동하려는 링크를 클릭하면 현재 페이지가 페이드아웃되고 새 페이지가 페이드인되어 부드러운 전환 효과가 만들어집니다.</p>\n<p><img src=\"/assets/img/2024-05-27-Next-levelUserExperienceWithCross-documentViewTransitions_1.png\" alt=\"다음 수준의 사용자 경험을 위한 문서 간 뷰 전환\"></p>\n<h2>고급 전환</h2>\n<p>기본 페이드 전환은 좋은 시작점이지만, 슬라이드, 스케일 또는 사용자 정의 애니메이션과 같은 더 복잡한 전환으로 창의적으로 구성할 수 있습니다.</p>\n<p>다음은 슬라이드 전환의 예시입니다:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* styles.css */</span>\n<span class=\"hljs-selector-class\">.container</span> {\n    <span class=\"hljs-attribute\">display</span>: flex;\n    <span class=\"hljs-attribute\">flex-direction</span>: column;\n    <span class=\"hljs-attribute\">align-items</span>: center;\n    <span class=\"hljs-attribute\">justify-content</span>: center;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>;\n    <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">0.5s</span> ease, opacity <span class=\"hljs-number\">0.5s</span> ease;\n}\n\n<span class=\"hljs-selector-class\">.hidden</span> {\n    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translateX</span>(-<span class=\"hljs-number\">100%</span>);\n}\n</code></pre>\n<p>또한 다양한 탐색 컨텍스트에 따른 다양한 종류의 전환을 처리하기 위해 더 복잡한 JavaScript를 추가할 수도 있습니다.</p>\n<p>더 많은 정보를 위해 이 웹사이트도 확인해보세요: <a href=\"https://developer.chrome.com/docs/web-platform/view-transitions/cross-document\" rel=\"nofollow\" target=\"_blank\">https://developer.chrome.com/docs/web-platform/view-transitions/cross-document</a></p>\n<h1>최종 인사</h1>\n<p>문서 간 보기 전환이란 기능은 멀티페이지 애플리케이션의 사용자 경험을 향상시키는 강력한 기능입니다.</p>\n<p>페이지간 부드럽고 일관된 전환을 구현함으로써, 웹 애플리케이션을 더 현대적이고 반응성있게 느끼게 할 수 있습니다.</p>\n<p>서로 다른 종류의 전환을 실험하여 애플리케이션 디자인과 사용자 경험 목표에 가장 적합한 것을 찾아보세요.</p>\n<p>행운을 빕니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}