{"pageProps":{"post":{"title":"Route 53과 AWS Lambda, S3를 이용해 간편하게 DNS 레코드 백업 자동화하기","description":"","date":"2024-05-17 03:44","slug":"2024-05-17-SimpleautomatingDNSRecordBackupsfromRoute53withAWSLambdaandS3","content":"\n\n# 소개\n\nDNS 레코드를 관리하는 것은 여러 개의 호스티드 존을 다룰 때 특히 복잡할 수 있습니다. 이러한 레코드의 백업을 자동화하면 유지 관리가 단순화되는데 그치지 않고 필요할 경우 언제든지 백업을 사용할 수 있도록 해줍니다. 이 튜토리얼에서는 AWS Lambda 함수를 생성하여 이를 수행하는 방법을 살펴보겠습니다: 여러 호스티드 존에서 모든 DNS 레코드를 백업하고 이러한 백업을 S3 버킷에 저장하여 레코드의 완전한 JSON을 생성하고 CSV 파일의 별도의 파일에 구성합니다.\n\n# 준비 사항\n\n- 적절한 자격 증명으로 구성된 AWS 콘솔.\n- Route 53 및 S3에 액세스 할 적절한 권한.\n- 백업을 저장할 S3 버킷이 만들어져 있어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 단계별 가이드\n\n# 1. 람다 함수 생성하기\n\n먼저 람다 함수를 생성해 봅시다. AWS 콘솔에서 Lambda 서비스로 이동하고 \"함수 생성\"을 클릭합니다.\n\n- 이름: Route53Backup\n- 런타임: Python 3.x\n- 역할: Lambda 기본 권한을 가진 새 역할을 생성하고 Route 53 및 S3에 액세스할 수 있는 권한을 추가합니다.\n\n<div class=\"content-ad\"></div>\n\n람다 정책 권한:\n\n```js\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"logs:CreateLogGroup\",\n            \"Resource\": \"arn:aws:logs:us-east-1:12345678:*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:CreateLogStream\",\n                \"logs:PutLogEvents\"\n            ],\n            \"Resource\": [\n                \"arn:aws:logs:us-east-1:12345678:log-group:/aws/lambda/lamda-name:*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"route53:GetHostedZone\",\n                \"route53:ListHostedZones\",\n                \"route53:ListHostedZonesByName\",\n                \"route53:ListResourceRecordSets\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:ListAllMyBuckets\",\n                \"s3:PutObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::bucket_name\"\n            ]\n        }\n    ]\n}\n```\n\n# 2. Write the Code\n\n우리 람다 함수의 코드입니다. 이 코드는 여러 호스팅된 존에서 DNS 레코드를 검색하여 이를 S3 버킷에 저장합니다.\n\n<div class=\"content-ad\"></div>\n\n```python\nimport boto3\nimport json\nfrom datetime import datetime\nimport csv\n\ndef lambda_handler(event, context):\n    # 연결된 ID와 도메인 목록\n    hosted_zones = [\n        {'id': '$HOSTED_ZONE_ID', 'domain': '$DOMAIN'},\n        {'id': '$HOSTED_ZONE_ID_2', 'domain': '$DOMAIN2'}\n    ]\n\n    # Route 53 및 S3 클라이언트 초기화\n    route53_client = boto3.client('route53')\n    s3_client = boto3.client('s3')\n\n    # 목록의 각 호스팅 영역을 돌아다니기\n    for hosted_zone in hosted_zones:\n        # 모든 영역 레코드 가져오기\n        response = route53_client.list_resource_record_sets(\n            HostedZoneId=hosted_zone['id']\n        )\n\n        # JSON 형식으로 변환\n        records = json.dumps(response['ResourceRecordSets'], indent=2)\n        records_formatted = response['ResourceRecordSets']\n        #CSV에 행 생성\n        csv_rows = [[\"Name\", \"Type\", \"DNS Name\"]]\n\n        for record_formatted in records_formatted:\n            name = record_formatted['Name']\n            record_type = record_formatted['Type']\n            if 'AliasTarget' in record_formatted:\n                dns_name = record_formatted['AliasTarget']['DNSName']\n            elif 'ResourceRecords' in record_formatted:\n                dns_name = \", \".join([r['Value'] for r in record_formatted.get('ResourceRecords', [])])\n            else:\n                dns_name = \"\"\n            #CSV에 행 추가\n            csv_rows.append([name, record_type, dns_name])\n\n        #CSV 파일에 레코드 추가\n        csv_buffer = csv.writer(open(\"/tmp/\" + backup_filename_csv, 'w'))\n        csv_buffer.writerows(csv_rows)\n\n        # 오늘 날짜와 시간을 포함한 아카이브 이름\n        backup_filename = f\"{datetime.now().strftime('%Y%m%d-%H%M')}.json\"\n        backup_filename_csv = f\"{datetime.now().strftime('%Y%m%d-%H%M')}.csv\"\n\n        # S3에 업로드\n        s3_key = f\"{hosted_zone['domain']}/data/{backup_filename}\"\n        s3_key_csv = f\"{hosted_zone['domain']}/data/{backup_filename_csv}\"\n        s3_client.put_object(\n            Bucket='$BUCKET_NAME',\n            Key=s3_key,\n            Body=records\n        )\n        \n        s3_client.upload_file(\"/tmp/\" + backup_filename_csv, '$BUCKET_NAME', s3_key_csv)\n\n    return {\n        'statusCode': 200,\n        'body': f'Success.'\n    }\n```\n\nHOSTED_ZONE_ID 및 BUCKET_NAME의 값을 교체해주세요. 필요하다면 backup_filename_formatted 및 backup_filename 변수를 원하는 파일 이름으로 교체해주세요.\n\n# 3. 함수 테스트\n\n함수를 테스트하려면 Lambda 콘솔에서 테스트 이벤트를 구성할 수 있습니다. 예를 들어 사용하지 않는 직접적인 입력이 없으므로 빈 JSON ''을 사용할 수 있습니다.```\n\n<div class=\"content-ad\"></div>\n\n# 4. 실행 일정 예약하기 (선택 사항)\n\n만약 람다 함수를 주기적으로 실행하고 싶다면 CloudWatch Events 트리거를 구성할 수 있습니다. CloudWatch 콘솔에서 “Rules”로 이동하여 새로운 규칙을 만들고 원하는 간격(예: 매일)에 람다를 트리거하도록 설정하세요.\n\n# 5. CSV 보기\n\n여기에 당신의 도메인 레코드가 어떻게 포맷될지 표시됩니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-17-SimpleautomatingDNSRecordBackupsfromRoute53withAWSLambdaandS3_0.png\" />\n\n# 결론\n\nRoute 53에서 DNS 레코드를 백업하는 것을 자동화하기 위해 Lambda 함수와 S3를 사용하는 것은 항상 DNS 레코드의 최신 사본을 보유할 수 있는 효과적인 방법입니다. 이는 유지 보수를 간편하게 해주는 것뿐만 아니라 DNS 설정의 보안성을 향상시킵니다.\n\n궁금한 점이나 제안 사항이 있으시면 아래 댓글에 남겨주세요. 즐거운 자동화 되세요!","ogImage":{"url":"/assets/img/2024-05-17-SimpleautomatingDNSRecordBackupsfromRoute53withAWSLambdaandS3_0.png"},"coverImage":"/assets/img/2024-05-17-SimpleautomatingDNSRecordBackupsfromRoute53withAWSLambdaandS3_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>소개</h1>\n<p>DNS 레코드를 관리하는 것은 여러 개의 호스티드 존을 다룰 때 특히 복잡할 수 있습니다. 이러한 레코드의 백업을 자동화하면 유지 관리가 단순화되는데 그치지 않고 필요할 경우 언제든지 백업을 사용할 수 있도록 해줍니다. 이 튜토리얼에서는 AWS Lambda 함수를 생성하여 이를 수행하는 방법을 살펴보겠습니다: 여러 호스티드 존에서 모든 DNS 레코드를 백업하고 이러한 백업을 S3 버킷에 저장하여 레코드의 완전한 JSON을 생성하고 CSV 파일의 별도의 파일에 구성합니다.</p>\n<h1>준비 사항</h1>\n<ul>\n<li>적절한 자격 증명으로 구성된 AWS 콘솔.</li>\n<li>Route 53 및 S3에 액세스 할 적절한 권한.</li>\n<li>백업을 저장할 S3 버킷이 만들어져 있어야 합니다.</li>\n</ul>\n<h1>단계별 가이드</h1>\n<h1>1. 람다 함수 생성하기</h1>\n<p>먼저 람다 함수를 생성해 봅시다. AWS 콘솔에서 Lambda 서비스로 이동하고 \"함수 생성\"을 클릭합니다.</p>\n<ul>\n<li>이름: Route53Backup</li>\n<li>런타임: Python 3.x</li>\n<li>역할: Lambda 기본 권한을 가진 새 역할을 생성하고 Route 53 및 S3에 액세스할 수 있는 권한을 추가합니다.</li>\n</ul>\n<p>람다 정책 권한:</p>\n<pre><code class=\"hljs language-js\">{\n    <span class=\"hljs-string\">\"Version\"</span>: <span class=\"hljs-string\">\"2012-10-17\"</span>,\n    <span class=\"hljs-string\">\"Statement\"</span>: [\n        {\n            <span class=\"hljs-string\">\"Effect\"</span>: <span class=\"hljs-string\">\"Allow\"</span>,\n            <span class=\"hljs-string\">\"Action\"</span>: <span class=\"hljs-string\">\"logs:CreateLogGroup\"</span>,\n            <span class=\"hljs-string\">\"Resource\"</span>: <span class=\"hljs-string\">\"arn:aws:logs:us-east-1:12345678:*\"</span>\n        },\n        {\n            <span class=\"hljs-string\">\"Effect\"</span>: <span class=\"hljs-string\">\"Allow\"</span>,\n            <span class=\"hljs-string\">\"Action\"</span>: [\n                <span class=\"hljs-string\">\"logs:CreateLogStream\"</span>,\n                <span class=\"hljs-string\">\"logs:PutLogEvents\"</span>\n            ],\n            <span class=\"hljs-string\">\"Resource\"</span>: [\n                <span class=\"hljs-string\">\"arn:aws:logs:us-east-1:12345678:log-group:/aws/lambda/lamda-name:*\"</span>\n            ]\n        },\n        {\n            <span class=\"hljs-string\">\"Effect\"</span>: <span class=\"hljs-string\">\"Allow\"</span>,\n            <span class=\"hljs-string\">\"Action\"</span>: [\n                <span class=\"hljs-string\">\"route53:GetHostedZone\"</span>,\n                <span class=\"hljs-string\">\"route53:ListHostedZones\"</span>,\n                <span class=\"hljs-string\">\"route53:ListHostedZonesByName\"</span>,\n                <span class=\"hljs-string\">\"route53:ListResourceRecordSets\"</span>\n            ],\n            <span class=\"hljs-string\">\"Resource\"</span>: [\n                <span class=\"hljs-string\">\"*\"</span>\n            ]\n        },\n        {\n            <span class=\"hljs-string\">\"Effect\"</span>: <span class=\"hljs-string\">\"Allow\"</span>,\n            <span class=\"hljs-string\">\"Action\"</span>: [\n                <span class=\"hljs-string\">\"s3:ListBucket\"</span>,\n                <span class=\"hljs-string\">\"s3:ListAllMyBuckets\"</span>,\n                <span class=\"hljs-string\">\"s3:PutObject\"</span>\n            ],\n            <span class=\"hljs-string\">\"Resource\"</span>: [\n                <span class=\"hljs-string\">\"arn:aws:s3:::bucket_name\"</span>\n            ]\n        }\n    ]\n}\n</code></pre>\n<h1>2. Write the Code</h1>\n<p>우리 람다 함수의 코드입니다. 이 코드는 여러 호스팅된 존에서 DNS 레코드를 검색하여 이를 S3 버킷에 저장합니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> boto3\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime\n<span class=\"hljs-keyword\">import</span> csv\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lambda_handler</span>(<span class=\"hljs-params\">event, context</span>):\n    <span class=\"hljs-comment\"># 연결된 ID와 도메인 목록</span>\n    hosted_zones = [\n        {<span class=\"hljs-string\">'id'</span>: <span class=\"hljs-string\">'$HOSTED_ZONE_ID'</span>, <span class=\"hljs-string\">'domain'</span>: <span class=\"hljs-string\">'$DOMAIN'</span>},\n        {<span class=\"hljs-string\">'id'</span>: <span class=\"hljs-string\">'$HOSTED_ZONE_ID_2'</span>, <span class=\"hljs-string\">'domain'</span>: <span class=\"hljs-string\">'$DOMAIN2'</span>}\n    ]\n\n    <span class=\"hljs-comment\"># Route 53 및 S3 클라이언트 초기화</span>\n    route53_client = boto3.client(<span class=\"hljs-string\">'route53'</span>)\n    s3_client = boto3.client(<span class=\"hljs-string\">'s3'</span>)\n\n    <span class=\"hljs-comment\"># 목록의 각 호스팅 영역을 돌아다니기</span>\n    <span class=\"hljs-keyword\">for</span> hosted_zone <span class=\"hljs-keyword\">in</span> hosted_zones:\n        <span class=\"hljs-comment\"># 모든 영역 레코드 가져오기</span>\n        response = route53_client.list_resource_record_sets(\n            HostedZoneId=hosted_zone[<span class=\"hljs-string\">'id'</span>]\n        )\n\n        <span class=\"hljs-comment\"># JSON 형식으로 변환</span>\n        records = json.dumps(response[<span class=\"hljs-string\">'ResourceRecordSets'</span>], indent=<span class=\"hljs-number\">2</span>)\n        records_formatted = response[<span class=\"hljs-string\">'ResourceRecordSets'</span>]\n        <span class=\"hljs-comment\">#CSV에 행 생성</span>\n        csv_rows = [[<span class=\"hljs-string\">\"Name\"</span>, <span class=\"hljs-string\">\"Type\"</span>, <span class=\"hljs-string\">\"DNS Name\"</span>]]\n\n        <span class=\"hljs-keyword\">for</span> record_formatted <span class=\"hljs-keyword\">in</span> records_formatted:\n            name = record_formatted[<span class=\"hljs-string\">'Name'</span>]\n            record_type = record_formatted[<span class=\"hljs-string\">'Type'</span>]\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'AliasTarget'</span> <span class=\"hljs-keyword\">in</span> record_formatted:\n                dns_name = record_formatted[<span class=\"hljs-string\">'AliasTarget'</span>][<span class=\"hljs-string\">'DNSName'</span>]\n            <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-string\">'ResourceRecords'</span> <span class=\"hljs-keyword\">in</span> record_formatted:\n                dns_name = <span class=\"hljs-string\">\", \"</span>.join([r[<span class=\"hljs-string\">'Value'</span>] <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> record_formatted.get(<span class=\"hljs-string\">'ResourceRecords'</span>, [])])\n            <span class=\"hljs-keyword\">else</span>:\n                dns_name = <span class=\"hljs-string\">\"\"</span>\n            <span class=\"hljs-comment\">#CSV에 행 추가</span>\n            csv_rows.append([name, record_type, dns_name])\n\n        <span class=\"hljs-comment\">#CSV 파일에 레코드 추가</span>\n        csv_buffer = csv.writer(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/tmp/\"</span> + backup_filename_csv, <span class=\"hljs-string\">'w'</span>))\n        csv_buffer.writerows(csv_rows)\n\n        <span class=\"hljs-comment\"># 오늘 날짜와 시간을 포함한 아카이브 이름</span>\n        backup_filename = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{datetime.now().strftime(<span class=\"hljs-string\">'%Y%m%d-%H%M'</span>)}</span>.json\"</span>\n        backup_filename_csv = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{datetime.now().strftime(<span class=\"hljs-string\">'%Y%m%d-%H%M'</span>)}</span>.csv\"</span>\n\n        <span class=\"hljs-comment\"># S3에 업로드</span>\n        s3_key = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{hosted_zone[<span class=\"hljs-string\">'domain'</span>]}</span>/data/<span class=\"hljs-subst\">{backup_filename}</span>\"</span>\n        s3_key_csv = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{hosted_zone[<span class=\"hljs-string\">'domain'</span>]}</span>/data/<span class=\"hljs-subst\">{backup_filename_csv}</span>\"</span>\n        s3_client.put_object(\n            Bucket=<span class=\"hljs-string\">'$BUCKET_NAME'</span>,\n            Key=s3_key,\n            Body=records\n        )\n        \n        s3_client.upload_file(<span class=\"hljs-string\">\"/tmp/\"</span> + backup_filename_csv, <span class=\"hljs-string\">'$BUCKET_NAME'</span>, s3_key_csv)\n\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-string\">'statusCode'</span>: <span class=\"hljs-number\">200</span>,\n        <span class=\"hljs-string\">'body'</span>: <span class=\"hljs-string\">f'Success.'</span>\n    }\n</code></pre>\n<p>HOSTED_ZONE_ID 및 BUCKET_NAME의 값을 교체해주세요. 필요하다면 backup_filename_formatted 및 backup_filename 변수를 원하는 파일 이름으로 교체해주세요.</p>\n<h1>3. 함수 테스트</h1>\n<p>함수를 테스트하려면 Lambda 콘솔에서 테스트 이벤트를 구성할 수 있습니다. 예를 들어 사용하지 않는 직접적인 입력이 없으므로 빈 JSON ''을 사용할 수 있습니다.```</p>\n<h1>4. 실행 일정 예약하기 (선택 사항)</h1>\n<p>만약 람다 함수를 주기적으로 실행하고 싶다면 CloudWatch Events 트리거를 구성할 수 있습니다. CloudWatch 콘솔에서 “Rules”로 이동하여 새로운 규칙을 만들고 원하는 간격(예: 매일)에 람다를 트리거하도록 설정하세요.</p>\n<h1>5. CSV 보기</h1>\n<p>여기에 당신의 도메인 레코드가 어떻게 포맷될지 표시됩니다.</p>\n<h1>결론</h1>\n<p>Route 53에서 DNS 레코드를 백업하는 것을 자동화하기 위해 Lambda 함수와 S3를 사용하는 것은 항상 DNS 레코드의 최신 사본을 보유할 수 있는 효과적인 방법입니다. 이는 유지 보수를 간편하게 해주는 것뿐만 아니라 DNS 설정의 보안성을 향상시킵니다.</p>\n<p>궁금한 점이나 제안 사항이 있으시면 아래 댓글에 남겨주세요. 즐거운 자동화 되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}