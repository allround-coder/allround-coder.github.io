{"pageProps":{"post":{"title":"스크롤이 맨 아래로 도착했는지 감지하기","description":"","date":"2024-05-12 21:44","slug":"2024-05-12-Detectscrollreachesthebottom","content":"\n\n안녕하세요, 오늘은 사용자가 페이지 맨 아래로 스크롤할 때 감지하는 방법을 알려 드리겠습니다.\n\n코딩에 들어가기 전에 계산에 필요한 몇 가지 중요한 정보를 이해하는 것이 중요합니다:\n\n- window.innerHeight: 보이는 콘텐츠의 높이입니다.\n- document.body.scrollHeight: 보이는 부분과 숨겨진 부분을 모두 포함한 전체 콘텐츠의 총 높이입니다.\n- window.scrollY: 사용자가 스크롤한 위치를 나타냅니다.\n\n명확히 이해하기 위해 예제를 드리겠습니다:\n\n\n\n먼저, NextJS와 TypeScript를 사용하여 소스 코드를 초기화하고, 익숙한 다른 프레임워크를 사용할 수도 있어요.\n\n다음으로 각각 높이가 500px인 `div`를 3개 추가할 거에요.\n\n<img src=\"/assets/img/2024-05-12-Detectscrollreachesthebottom_0.png\" />\n\n이렇게 하면 전체 콘텐츠의 높이가 1500px가 됩니다.\n\n\n\n\n![이미지](https://miro.medium.com/v2/resize:fit:1200/1*Qocsql64DWbgFLXBqug2SA.gif)\n\n윈도우 높이를 500px로 조정하면 다음과 같이 됩니다:\n\n![이미지](/assets/img/2024-05-12-Detectscrollreachesthebottom_1.png)\n\ninnerHeight는 빨간색 상자 영역이고, outerHeight에는 주소 표시줄과 탭 표시줄이 포함됩니다.\n\n\n\n좋아요, 이제 document.body.scrollHeight와 window.innerHeight를 확인할 거예요.\n\n그럼 이제 scrollY를 확인해볼게요.\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*tSttaLTndCd9JLMhdbz29A.gif)\n\n동영상을 보시면 알 수 있지만, 페이지에 처음 접속했을 때 scrollY 값은 0일 거에요. 왜냐하면 아직 스크롤하지 않았기 때문이죠. 그런 다음 페이지를 스크롤하기 시작하면, 스크롤한 거리에 따라 scrollY 값이 적절하게 변경될 거에요.\n\n\n\n그리고 페이지를 맨 아래로 스크롤하면 scrollY = scrollHeight - innerHeight가 됩니다.\n\n아래는 해당하는 공식입니다.\n\n```js\nconst scrolledTo = window.scrollY + window.innerHeight\nconst isReachBottom = document.body.scrollHeight === scrolledTo\n```\n\n이제 한번 시도해 봅시다!\n\n\n\n```js\nuseEffect(() => {\n    const onscroll = () => {\n        const scrolledTo = window.scrollY + window.innerHeight;\n        const isReachBottom = document.body.scrollHeight === scrolledTo;\n        if (isReachBottom) alert(\"맨 아래에 도달했습니다!\");\n    };\n    window.addEventListener(\"scroll\", onscroll);\n    return () => {\n        window.removeEventListener(\"scroll\", onscroll);\n    };\n}, []);\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*Vv4q8HBbBSC6n32NRV97cQ.gif\" />\n\n좋아요! 작동합니다!\n\n하지만 무한 스크롤을 위해 직장에서 사용하면 좋은 방법은 아닙니다. 스크롤이 맨 아래에 도달할 때까지 API를 호출하는 것은 좋지 않습니다. 이렇게 하면 사용자 경험이 나빠집니다. 대신, 스크롤이 맨 아래에서 일정 거리(예: 맨 아래에서 300px)를 벗어나면 API 호출을 트리거하고 새 콘텐츠가 로드되어 문서에 추가됩니다. 이렇게 하면 사용자가 기다리는 시간이 줄어듭니다.\n```\n\n\n\n위의 공식은 다음과 같습니다:\n\n```js\nconst scrolledTo = window.scrollY + window.innerHeight\nconst threshold = 300\nconst isReachBottom = document.body.scrollHeight - threshold === scrolledTo\n```\n\n잘 보이지만 여기 작은 문제가 있어요. 사용하는 것이 있습니다. 동등성 연산자 ===을 사용하면 scrollY가 사용자가 스크롤할 때마다 1픽셀씩 증가하지 않기 때문에 isReachBottom이 여러 번 false가 될 가능성이 높습니다. 사용자가 얼마나 빨리 스크롤하는지에 따라 달라집니다.\n\n이 문제를 해결하려면 `(=`를 사용하면 됩니다:\n\n\n\n```js\nconst isReachBottom = document.body.scrollHeight - threshold <= scrolledTo\n```\n\n좋아요, 새로운 것을 테스트해볼까요:\n\n![이미지](https://miro.medium.com/v2/resize:fit:1200/1*d6GdJZpt4RNPfe-03diBfQ.gif)\n\n좋아요, 성공했어요!\n\n\n\n이제 스크롤이 맨 아래에 도달하는 방법을 배웠어요!\n\n데모 코드는 여기에서 확인할 수 있어요: [https://github.com/alanng2050/medium-demo-scroll-to-bottom](https://github.com/alanng2050/medium-demo-scroll-to-bottom)\n\n읽어 주셔서 감사합니다!\n\n즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-05-12-Detectscrollreachesthebottom_0.png"},"coverImage":"/assets/img/2024-05-12-Detectscrollreachesthebottom_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요, 오늘은 사용자가 페이지 맨 아래로 스크롤할 때 감지하는 방법을 알려 드리겠습니다.</p>\n<p>코딩에 들어가기 전에 계산에 필요한 몇 가지 중요한 정보를 이해하는 것이 중요합니다:</p>\n<ul>\n<li>window.innerHeight: 보이는 콘텐츠의 높이입니다.</li>\n<li>document.body.scrollHeight: 보이는 부분과 숨겨진 부분을 모두 포함한 전체 콘텐츠의 총 높이입니다.</li>\n<li>window.scrollY: 사용자가 스크롤한 위치를 나타냅니다.</li>\n</ul>\n<p>명확히 이해하기 위해 예제를 드리겠습니다:</p>\n<p>먼저, NextJS와 TypeScript를 사용하여 소스 코드를 초기화하고, 익숙한 다른 프레임워크를 사용할 수도 있어요.</p>\n<p>다음으로 각각 높이가 500px인 <code>div</code>를 3개 추가할 거에요.</p>\n<p>이렇게 하면 전체 콘텐츠의 높이가 1500px가 됩니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*Qocsql64DWbgFLXBqug2SA.gif\" alt=\"이미지\"></p>\n<p>윈도우 높이를 500px로 조정하면 다음과 같이 됩니다:</p>\n<p><img src=\"/assets/img/2024-05-12-Detectscrollreachesthebottom_1.png\" alt=\"이미지\"></p>\n<p>innerHeight는 빨간색 상자 영역이고, outerHeight에는 주소 표시줄과 탭 표시줄이 포함됩니다.</p>\n<p>좋아요, 이제 document.body.scrollHeight와 window.innerHeight를 확인할 거예요.</p>\n<p>그럼 이제 scrollY를 확인해볼게요.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*tSttaLTndCd9JLMhdbz29A.gif\" alt=\"image\"></p>\n<p>동영상을 보시면 알 수 있지만, 페이지에 처음 접속했을 때 scrollY 값은 0일 거에요. 왜냐하면 아직 스크롤하지 않았기 때문이죠. 그런 다음 페이지를 스크롤하기 시작하면, 스크롤한 거리에 따라 scrollY 값이 적절하게 변경될 거에요.</p>\n<p>그리고 페이지를 맨 아래로 스크롤하면 scrollY = scrollHeight - innerHeight가 됩니다.</p>\n<p>아래는 해당하는 공식입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> scrolledTo = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">scrollY</span> + <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span>\n<span class=\"hljs-keyword\">const</span> isReachBottom = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">scrollHeight</span> === scrolledTo\n</code></pre>\n<p>이제 한번 시도해 봅시다!</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onscroll</span> = (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-keyword\">const</span> scrolledTo = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">scrollY</span> + <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span>;\n        <span class=\"hljs-keyword\">const</span> isReachBottom = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">scrollHeight</span> === scrolledTo;\n        <span class=\"hljs-keyword\">if</span> (isReachBottom) <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"맨 아래에 도달했습니다!\"</span>);\n    };\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"scroll\"</span>, onscroll);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">\"scroll\"</span>, onscroll);\n    };\n}, []);\n</code></pre>\n<p>좋아요! 작동합니다!</p>\n<p>하지만 무한 스크롤을 위해 직장에서 사용하면 좋은 방법은 아닙니다. 스크롤이 맨 아래에 도달할 때까지 API를 호출하는 것은 좋지 않습니다. 이렇게 하면 사용자 경험이 나빠집니다. 대신, 스크롤이 맨 아래에서 일정 거리(예: 맨 아래에서 300px)를 벗어나면 API 호출을 트리거하고 새 콘텐츠가 로드되어 문서에 추가됩니다. 이렇게 하면 사용자가 기다리는 시간이 줄어듭니다.</p>\n<pre><code>\n\n\n위의 공식은 다음과 같습니다:\n\n```js\nconst scrolledTo = window.scrollY + window.innerHeight\nconst threshold = 300\nconst isReachBottom = document.body.scrollHeight - threshold === scrolledTo\n</code></pre>\n<p>잘 보이지만 여기 작은 문제가 있어요. 사용하는 것이 있습니다. 동등성 연산자 ===을 사용하면 scrollY가 사용자가 스크롤할 때마다 1픽셀씩 증가하지 않기 때문에 isReachBottom이 여러 번 false가 될 가능성이 높습니다. 사용자가 얼마나 빨리 스크롤하는지에 따라 달라집니다.</p>\n<p>이 문제를 해결하려면 <code>(=</code>를 사용하면 됩니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> isReachBottom = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">scrollHeight</span> - threshold &#x3C;= scrolledTo\n</code></pre>\n<p>좋아요, 새로운 것을 테스트해볼까요:</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*d6GdJZpt4RNPfe-03diBfQ.gif\" alt=\"이미지\"></p>\n<p>좋아요, 성공했어요!</p>\n<p>이제 스크롤이 맨 아래에 도달하는 방법을 배웠어요!</p>\n<p>데모 코드는 여기에서 확인할 수 있어요: <a href=\"https://github.com/alanng2050/medium-demo-scroll-to-bottom\" rel=\"nofollow\" target=\"_blank\">https://github.com/alanng2050/medium-demo-scroll-to-bottom</a></p>\n<p>읽어 주셔서 감사합니다!</p>\n<p>즐거운 코딩하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}