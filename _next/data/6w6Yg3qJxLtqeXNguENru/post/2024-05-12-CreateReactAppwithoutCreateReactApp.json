{"pageProps":{"post":{"title":"리액트 앱 만들기 Create React App 없이","description":"","date":"2024-05-12 19:42","slug":"2024-05-12-CreateReactAppwithoutCreateReactApp","content":"\n\n```\n![이미지](/assets/img/2024-05-12-CreateReactAppwithoutCreateReactApp_0.png)\n\n이 기사는 \"create-react-app\", \"NextJS\" 등의 라이브러리 또는 프레임워크를 사용하지 않고 리액트 앱을 만드는 과정에 대해 이야기합니다.\n\n## 사전 지식 개념\n\n- Webpack — 코드를 하나의 파일로 번들링하는 데 도움을 줍니다.\n- Babel — ECMAScript 2015+ (ES6+) 코드를 이전 JavaScript 엔진에서 실행할 수 있는 하위 호환 버전으로 변환하는 데 사용됩니다.\n- Node.js — 노드 설치, package.json 생성 및 npm을 사용하여 노드 모듈 설치\n```\n\n\n\n## 이 기사는 다음 사항을 이해하는 데 도움이 됩니다\n\n- 웹팩(webpack)과 바벨(babel)이 어떻게 실제로 작동하는지;\n- 리액트(React) 앱을 빌드하는 시작부터 끝까지의 흐름;\n- 개발 및 프로덕션 빌드 설정 방법 및 중요성;\n- 필요한 서버 세부 정보 설정;\n- 웹팩(webpack)과 바벨(babel) 구성 파일 작성 및 그곳에 존재하는 논리 이해;\n- 클라이언트 측 및 서버 측 렌더링 구성 방법;\n- React에서 HMR(Hot Module Replacement)이 작동하는 방식 이해.\n\n## 소스 코드\n\n- 리포지토리 — https://github.com/kannanagasamy/react-app-without-cra\n- 브랜치 — main\n\n\n\n더 알아보기:\n\n## 절차\n\n1. 시스템에 node가 설치되어 있는지 확인합니다\n\n시스템에 Node.js를 설치하고 터미널에서 node -v를 입력하여 설치되어 있는지 확인합니다.\n\n\n\n## 2. 프로젝트 폴더 및 package.json 생성하기\n\n아무 이름으로 프로젝트 폴더를 생성하고 해당 폴더로 이동한 후 npm init을 사용하여 폴더 안에 package.json 파일을 생성합니다. 폴더로 이동하세요.\n\n## 3. 웹팩 종속성 설치하기\n\n```js\nnpm i --save-dev webpack webpack-cli webpack-dev-server\n```\n\n\n\n- 웹팩 — 코드를 모두 번들로 묶어 최종 빌드를 생성할 수 있습니다.\n- 웹팩-cli — 개발자가 커스텀 웹팩 프로젝트를 설정할 때 속도를 높이기 위해 유연한 명령 집합을 제공하는 CLI 도구입니다. 웹팩 v4 이상을 사용하고 명령 줄에서 웹팩을 호출하려면 이 도구가 필요합니다.\n- 웹팩-dev-server — 웹팩 개발 서버는 미니 노드.js 익스프레스 서버입니다. SockJS라는 라이브러리를 사용하여 웹 소켓을 흉내냅니다. 로컬호스트 개발 환경을 만들 수 있게 해줍니다.\n\n## 4. Babel 종속성 설치\n\n```js\nnpm i --save-dev babel-loader @babel/preset-env @babel/core \n@babel/plugin-transform-runtime \n@babel/preset-react \n@babel/eslint-parser \n@babel/runtime\n@babel/cli\n```\n\n- babel-loader — JavaScript 파일을 babel과 웹팩을 사용하여 변환할 수 있게 해줍니다. 각 파일에 대한 Babel 구성의 사용자 정의 처리를 추가할 수 있는 로더 빌더 유틸리티를 노출합니다.\n- @babel/preset-env — 해당 환경에 필요한 syntax 변환 및 브라우저 폴리필을 세밀하게 관리하지 않고 최신 JavaScript를 사용할 수 있도록 합니다. 이렇게 함으로써 JavaScript 번들이 더 작아지고 개발자의 작업을 더욱 쉽게 할 수 있습니다!\n- @babel/core — 코어 패키지\n- @babel/plugin-transform-runtime — Babel의 주입된 도우미 코드를 재사용하여 코드 크기를 줄이도록 하는 플러그인\n- @babel/preset-react — Reactjs를 사용할 때 React 프리셋을 사용합니다. HTML 파일을 React 기반 파일로 변환하는 데 도움이 됩니다.\n- babel-eslint — Babel에 의해 변환된 소스 코드에서 ESLint를 실행할 수 있게 하는 파서\n- @babel/runtime — 폴리필 및 다른 Babel이 참조할 수 있는 것들을 포함하는 패키지\n- @babel/cli — Babel을 사용하기 위한 명령 줄 인터페이스\n\n\n\n## 5. 필요한 린터 및 경로 설치하기\n\n```js\nnpm i --save-dev eslint eslint-config-airbnb-base \neslint-plugin-jest \neslint-config-prettier\npath\n```\n\n## 6. 리액트와 리액트 돔 설치하기\n\n```js\nnpm i react react-dom\n```\n\n\n\n## 7. index.html 파일 생성하기\n\n프로젝트의 루트에 \"public\"이라는 폴더를 생성하세요. 그 안에 index.html 파일을 만들어주세요.\n\n## 8. App.js 파일 생성하기\n\nsrc 폴더를 생성하고 그 안에 App.js 파일을 만드세요. 다음 코드를 추가해주세요:\n\n\n\n## 8. index.js 파일 만들기\n\n프로젝트의 루트 또는 원하는 곳에 index.js 파일을 만듭니다. 이 파일은 webpack의 진입점으로 작동할 것입니다.\n\n다음 코드를 추가합니다:\n\n## 9. webpack.config.js 파일 만들기\n\n\n\n프로젝트 루트에 webpack.config.js 파일을 생성하고 다음 코드를 추가하세요. 더 나아가 이 파일은 파일들을 하나의 닠 파일로 번들링하고 개발 서버를 설정하는 구성을 포함하고 있습니다.\n\n코드 내의 주석은 각 줄이 무엇을 하는지 이해하는 데 도움이 됩니다:\n\n## 10. .babelrc 파일 생성\n\n루트에 .babelrc 파일을 생성하고 다음 코드를 추가하세요.\n\n\n\n이것은 Babel을 위한 설정 파일입니다. babel이 내부에 정의된 플러그인과 프리셋을 사용하도록 지시할 것입니다.\n\n## 11. package.json 파일 업데이트\n\n7번째와 8번째 줄에 start 및 build 스크립트를 추가하십시오.\n\n- start 스크립트는 웹팩 개발 서버를 현재 프로젝트의 public 폴더에서 9500 포트로 실행하라는 것입니다.\n- build 명령은 main.js 파일에 이 패키지를 빌드하라는 것입니다. 이는 사실상 webpack.config.js 파일의 모든 논리를 실행합니다.\n\n\n\n## 12. 최종 프로젝트 폴더 구조가 이렇게 되어야 합니다\n\n![프로젝트 폴더 구조](/assets/img/2024-05-12-CreateReactAppwithoutCreateReactApp_1.png)\n\n## 13. \"npm run build\" 실행하기\n\n- 위의 코드를 추가한 후 npm run build를 실행하세요. 이렇게 하면 public 폴더에 main.js 파일이 생성됩니다. 이 파일은 실제로 1MB 이상의 크기를 가지고 있습니다. 이것이 개발용 빌드입니다.\n\n\n\n## 14. \"npm start\" 명령 실행하기\n\n터미널에서 `npm start` 명령을 실행하여 애플리케이션을 시작하세요. 이렇게 하면 개발 서버가 시작됩니다.\n\n코드 전체는 위에서 공유한 저장소 링크에서 찾을 수 있습니다.\n\n# 기타 주요 사항\n\n\n\n## 프로덕션 빌드로 변경하기\n\n- 이제 프로덕션 빌드로 변경해 볼 수 있어요. 이를 위해 webpack.config.js 파일에 다음 변경을 해야 합니다.\n\n```js\nmode: \"production\"\n```\n\n- 이제 npm run build를 실행하면 다시 main.js 파일이 생성되지만 사이즈가 매우 작아질거에요 (`200kb).\n- 1000KB에서 200KB로 최적화되어 더 나은 프로덕션 빌드를 사용하는 것이 좋을 수 있어요. 하지만 개발 중에는 핫 리로딩이 더 빠르기 때문에 개발 모드를 사용해야 해요.\n\n\n\n## 핫 모듈 교체\n\n- HMR은 webpack-dev-server에서 처리됩니다. 페이지 로드 옵션 없이도 HMR을 사용할 수 있습니다. 필요한 옵션을 설정하면 성능 측면에서 큰 도움이 됩니다.\n- 다양한 시나리오에 대한 아래 코드 스니펫을 확인해보세요:\n\n```js\n//HMR을 사용하지만 라이브 리로드를 사용하지 않으려면 webpack.config.js에서 아래 구성을 사용하세요.\ndevServer: {\n        hot: true ,\n        liveReload:false\n    }\n\n//HMR을 사용하고 싶지 않지만 라이브 리로드를 사용하려면,\ndevServer: {\n        hot: false ,\n        liveReload: true\n    },\n\n//라이브 리로드를 사용하고 싶지 않다면,\ndevServer: {\n        hot: false , //이 옵션은 필수로 false로 설정해야 합니다.\n        liveReload: false\n    },\r\n```\n\n## 참고문헌\n\n\n\n- 웹팩의 HMR — https://webpack.js.org/guides/hot-module-replacement/\n- 번들 크기를 줄이는 다양한 방법 — https://blog.jakoblind.no/3-ways-to-reduce-webpack-bundle-size/\n- devserver 이해 및 자세한 작업 방법 — https://webpack.js.org/configuration/dev-server/#devserverlivereload\n- 프로덕션을 위한 번들 최소화 — https://webpack.js.org/plugins/mini-css-extract-plugin/#minimizing-for-production\n- 웹팩을 사용한 프로덕션 사이트 구축 방법 — https://webpack.js.org/guides/production/\n- 완벽한 devpack 서버 설정 — https://linguinecode.com/post/how-to-setup-webpack-dev-server-react-babel\n- 로더 자세히 살펴보기 — https://webpack.js.org/concepts/loaders/\n- babel-preset-env 자세히 이해하기 — https://blog.jakoblind.no/babel-preset-env/\n\n이 글이 도움이 되셨기를 바라며. 다음 글도 기대해주세요.\n\n# 리액트 앱을 레고처럼 재사용 가능한 컴포넌트로 만들기\n\n![이미지](/assets/img/2024-05-12-CreateReactAppwithoutCreateReactApp_2.png)\n\n\n\nBit의 오픈 소스 도구는 25만 명 이상의 개발자가 컴포넌트를 사용하여 앱을 개발할 수 있게 도와줍니다.\n\n어떤 UI, 기능 또는 페이지든 재사용 가능한 컴포넌트로 전환하고 애플리케이션 간에 공유하세요. 협업이 더 쉽고 빠르게 개발할 수 있습니다.\n\n→ 자세히 알아보기\n\n앱을 구성 요소로 분할하여 앱 개발을 쉽게 만들고 원하는 워크플로에 최상의 경험을 누릴 수 있습니다:\n\n\n\n## → 마이크로 프론트엔드\n\n## → 디자인 시스템\n\n## → 코드 공유 및 재사용\n\n## → 모노 레포\n\n\n\n## 더 알아보기:","ogImage":{"url":"/assets/img/2024-05-12-CreateReactAppwithoutCreateReactApp_0.png"},"coverImage":"/assets/img/2024-05-12-CreateReactAppwithoutCreateReactApp_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<pre><code>![이미지](/assets/img/2024-05-12-CreateReactAppwithoutCreateReactApp_0.png)\n\n이 기사는 \"create-react-app\", \"NextJS\" 등의 라이브러리 또는 프레임워크를 사용하지 않고 리액트 앱을 만드는 과정에 대해 이야기합니다.\n\n## 사전 지식 개념\n\n- Webpack — 코드를 하나의 파일로 번들링하는 데 도움을 줍니다.\n- Babel — ECMAScript 2015+ (ES6+) 코드를 이전 JavaScript 엔진에서 실행할 수 있는 하위 호환 버전으로 변환하는 데 사용됩니다.\n- Node.js — 노드 설치, package.json 생성 및 npm을 사용하여 노드 모듈 설치\n</code></pre>\n<h2>이 기사는 다음 사항을 이해하는 데 도움이 됩니다</h2>\n<ul>\n<li>웹팩(webpack)과 바벨(babel)이 어떻게 실제로 작동하는지;</li>\n<li>리액트(React) 앱을 빌드하는 시작부터 끝까지의 흐름;</li>\n<li>개발 및 프로덕션 빌드 설정 방법 및 중요성;</li>\n<li>필요한 서버 세부 정보 설정;</li>\n<li>웹팩(webpack)과 바벨(babel) 구성 파일 작성 및 그곳에 존재하는 논리 이해;</li>\n<li>클라이언트 측 및 서버 측 렌더링 구성 방법;</li>\n<li>React에서 HMR(Hot Module Replacement)이 작동하는 방식 이해.</li>\n</ul>\n<h2>소스 코드</h2>\n<ul>\n<li>리포지토리 — <a href=\"https://github.com/kannanagasamy/react-app-without-cra\" rel=\"nofollow\" target=\"_blank\">https://github.com/kannanagasamy/react-app-without-cra</a></li>\n<li>브랜치 — main</li>\n</ul>\n<p>더 알아보기:</p>\n<h2>절차</h2>\n<ol>\n<li>시스템에 node가 설치되어 있는지 확인합니다</li>\n</ol>\n<p>시스템에 Node.js를 설치하고 터미널에서 node -v를 입력하여 설치되어 있는지 확인합니다.</p>\n<h2>2. 프로젝트 폴더 및 package.json 생성하기</h2>\n<p>아무 이름으로 프로젝트 폴더를 생성하고 해당 폴더로 이동한 후 npm init을 사용하여 폴더 안에 package.json 파일을 생성합니다. 폴더로 이동하세요.</p>\n<h2>3. 웹팩 종속성 설치하기</h2>\n<pre><code class=\"hljs language-js\">npm i --save-dev webpack webpack-cli webpack-dev-server\n</code></pre>\n<ul>\n<li>웹팩 — 코드를 모두 번들로 묶어 최종 빌드를 생성할 수 있습니다.</li>\n<li>웹팩-cli — 개발자가 커스텀 웹팩 프로젝트를 설정할 때 속도를 높이기 위해 유연한 명령 집합을 제공하는 CLI 도구입니다. 웹팩 v4 이상을 사용하고 명령 줄에서 웹팩을 호출하려면 이 도구가 필요합니다.</li>\n<li>웹팩-dev-server — 웹팩 개발 서버는 미니 노드.js 익스프레스 서버입니다. SockJS라는 라이브러리를 사용하여 웹 소켓을 흉내냅니다. 로컬호스트 개발 환경을 만들 수 있게 해줍니다.</li>\n</ul>\n<h2>4. Babel 종속성 설치</h2>\n<pre><code class=\"hljs language-js\">npm i --save-dev babel-loader @babel/preset-env @babel/core \n@babel/plugin-transform-runtime \n@babel/preset-react \n@babel/eslint-parser \n@babel/runtime\n@babel/cli\n</code></pre>\n<ul>\n<li>babel-loader — JavaScript 파일을 babel과 웹팩을 사용하여 변환할 수 있게 해줍니다. 각 파일에 대한 Babel 구성의 사용자 정의 처리를 추가할 수 있는 로더 빌더 유틸리티를 노출합니다.</li>\n<li>@babel/preset-env — 해당 환경에 필요한 syntax 변환 및 브라우저 폴리필을 세밀하게 관리하지 않고 최신 JavaScript를 사용할 수 있도록 합니다. 이렇게 함으로써 JavaScript 번들이 더 작아지고 개발자의 작업을 더욱 쉽게 할 수 있습니다!</li>\n<li>@babel/core — 코어 패키지</li>\n<li>@babel/plugin-transform-runtime — Babel의 주입된 도우미 코드를 재사용하여 코드 크기를 줄이도록 하는 플러그인</li>\n<li>@babel/preset-react — Reactjs를 사용할 때 React 프리셋을 사용합니다. HTML 파일을 React 기반 파일로 변환하는 데 도움이 됩니다.</li>\n<li>babel-eslint — Babel에 의해 변환된 소스 코드에서 ESLint를 실행할 수 있게 하는 파서</li>\n<li>@babel/runtime — 폴리필 및 다른 Babel이 참조할 수 있는 것들을 포함하는 패키지</li>\n<li>@babel/cli — Babel을 사용하기 위한 명령 줄 인터페이스</li>\n</ul>\n<h2>5. 필요한 린터 및 경로 설치하기</h2>\n<pre><code class=\"hljs language-js\">npm i --save-dev eslint eslint-config-airbnb-base \neslint-plugin-jest \neslint-config-prettier\npath\n</code></pre>\n<h2>6. 리액트와 리액트 돔 설치하기</h2>\n<pre><code class=\"hljs language-js\">npm i react react-dom\n</code></pre>\n<h2>7. index.html 파일 생성하기</h2>\n<p>프로젝트의 루트에 \"public\"이라는 폴더를 생성하세요. 그 안에 index.html 파일을 만들어주세요.</p>\n<h2>8. App.js 파일 생성하기</h2>\n<p>src 폴더를 생성하고 그 안에 App.js 파일을 만드세요. 다음 코드를 추가해주세요:</p>\n<h2>8. index.js 파일 만들기</h2>\n<p>프로젝트의 루트 또는 원하는 곳에 index.js 파일을 만듭니다. 이 파일은 webpack의 진입점으로 작동할 것입니다.</p>\n<p>다음 코드를 추가합니다:</p>\n<h2>9. webpack.config.js 파일 만들기</h2>\n<p>프로젝트 루트에 webpack.config.js 파일을 생성하고 다음 코드를 추가하세요. 더 나아가 이 파일은 파일들을 하나의 닠 파일로 번들링하고 개발 서버를 설정하는 구성을 포함하고 있습니다.</p>\n<p>코드 내의 주석은 각 줄이 무엇을 하는지 이해하는 데 도움이 됩니다:</p>\n<h2>10. .babelrc 파일 생성</h2>\n<p>루트에 .babelrc 파일을 생성하고 다음 코드를 추가하세요.</p>\n<p>이것은 Babel을 위한 설정 파일입니다. babel이 내부에 정의된 플러그인과 프리셋을 사용하도록 지시할 것입니다.</p>\n<h2>11. package.json 파일 업데이트</h2>\n<p>7번째와 8번째 줄에 start 및 build 스크립트를 추가하십시오.</p>\n<ul>\n<li>start 스크립트는 웹팩 개발 서버를 현재 프로젝트의 public 폴더에서 9500 포트로 실행하라는 것입니다.</li>\n<li>build 명령은 main.js 파일에 이 패키지를 빌드하라는 것입니다. 이는 사실상 webpack.config.js 파일의 모든 논리를 실행합니다.</li>\n</ul>\n<h2>12. 최종 프로젝트 폴더 구조가 이렇게 되어야 합니다</h2>\n<p><img src=\"/assets/img/2024-05-12-CreateReactAppwithoutCreateReactApp_1.png\" alt=\"프로젝트 폴더 구조\"></p>\n<h2>13. \"npm run build\" 실행하기</h2>\n<ul>\n<li>위의 코드를 추가한 후 npm run build를 실행하세요. 이렇게 하면 public 폴더에 main.js 파일이 생성됩니다. 이 파일은 실제로 1MB 이상의 크기를 가지고 있습니다. 이것이 개발용 빌드입니다.</li>\n</ul>\n<h2>14. \"npm start\" 명령 실행하기</h2>\n<p>터미널에서 <code>npm start</code> 명령을 실행하여 애플리케이션을 시작하세요. 이렇게 하면 개발 서버가 시작됩니다.</p>\n<p>코드 전체는 위에서 공유한 저장소 링크에서 찾을 수 있습니다.</p>\n<h1>기타 주요 사항</h1>\n<h2>프로덕션 빌드로 변경하기</h2>\n<ul>\n<li>이제 프로덕션 빌드로 변경해 볼 수 있어요. 이를 위해 webpack.config.js 파일에 다음 변경을 해야 합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">\"production\"</span>\n</code></pre>\n<ul>\n<li>이제 npm run build를 실행하면 다시 main.js 파일이 생성되지만 사이즈가 매우 작아질거에요 (`200kb).</li>\n<li>1000KB에서 200KB로 최적화되어 더 나은 프로덕션 빌드를 사용하는 것이 좋을 수 있어요. 하지만 개발 중에는 핫 리로딩이 더 빠르기 때문에 개발 모드를 사용해야 해요.</li>\n</ul>\n<h2>핫 모듈 교체</h2>\n<ul>\n<li>HMR은 webpack-dev-server에서 처리됩니다. 페이지 로드 옵션 없이도 HMR을 사용할 수 있습니다. 필요한 옵션을 설정하면 성능 측면에서 큰 도움이 됩니다.</li>\n<li>다양한 시나리오에 대한 아래 코드 스니펫을 확인해보세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//HMR을 사용하지만 라이브 리로드를 사용하지 않으려면 webpack.config.js에서 아래 구성을 사용하세요.</span>\n<span class=\"hljs-attr\">devServer</span>: {\n        <span class=\"hljs-attr\">hot</span>: <span class=\"hljs-literal\">true</span> ,\n        <span class=\"hljs-attr\">liveReload</span>:<span class=\"hljs-literal\">false</span>\n    }\n\n<span class=\"hljs-comment\">//HMR을 사용하고 싶지 않지만 라이브 리로드를 사용하려면,</span>\n<span class=\"hljs-attr\">devServer</span>: {\n        <span class=\"hljs-attr\">hot</span>: <span class=\"hljs-literal\">false</span> ,\n        <span class=\"hljs-attr\">liveReload</span>: <span class=\"hljs-literal\">true</span>\n    },\n\n<span class=\"hljs-comment\">//라이브 리로드를 사용하고 싶지 않다면,</span>\n<span class=\"hljs-attr\">devServer</span>: {\n        <span class=\"hljs-attr\">hot</span>: <span class=\"hljs-literal\">false</span> , <span class=\"hljs-comment\">//이 옵션은 필수로 false로 설정해야 합니다.</span>\n        <span class=\"hljs-attr\">liveReload</span>: <span class=\"hljs-literal\">false</span>\n    },\n</code></pre>\n<h2>참고문헌</h2>\n<ul>\n<li>웹팩의 HMR — <a href=\"https://webpack.js.org/guides/hot-module-replacement/\" rel=\"nofollow\" target=\"_blank\">https://webpack.js.org/guides/hot-module-replacement/</a></li>\n<li>번들 크기를 줄이는 다양한 방법 — <a href=\"https://blog.jakoblind.no/3-ways-to-reduce-webpack-bundle-size/\" rel=\"nofollow\" target=\"_blank\">https://blog.jakoblind.no/3-ways-to-reduce-webpack-bundle-size/</a></li>\n<li>devserver 이해 및 자세한 작업 방법 — <a href=\"https://webpack.js.org/configuration/dev-server/#devserverlivereload\" rel=\"nofollow\" target=\"_blank\">https://webpack.js.org/configuration/dev-server/#devserverlivereload</a></li>\n<li>프로덕션을 위한 번들 최소화 — <a href=\"https://webpack.js.org/plugins/mini-css-extract-plugin/#minimizing-for-production\" rel=\"nofollow\" target=\"_blank\">https://webpack.js.org/plugins/mini-css-extract-plugin/#minimizing-for-production</a></li>\n<li>웹팩을 사용한 프로덕션 사이트 구축 방법 — <a href=\"https://webpack.js.org/guides/production/\" rel=\"nofollow\" target=\"_blank\">https://webpack.js.org/guides/production/</a></li>\n<li>완벽한 devpack 서버 설정 — <a href=\"https://linguinecode.com/post/how-to-setup-webpack-dev-server-react-babel\" rel=\"nofollow\" target=\"_blank\">https://linguinecode.com/post/how-to-setup-webpack-dev-server-react-babel</a></li>\n<li>로더 자세히 살펴보기 — <a href=\"https://webpack.js.org/concepts/loaders/\" rel=\"nofollow\" target=\"_blank\">https://webpack.js.org/concepts/loaders/</a></li>\n<li>babel-preset-env 자세히 이해하기 — <a href=\"https://blog.jakoblind.no/babel-preset-env/\" rel=\"nofollow\" target=\"_blank\">https://blog.jakoblind.no/babel-preset-env/</a></li>\n</ul>\n<p>이 글이 도움이 되셨기를 바라며. 다음 글도 기대해주세요.</p>\n<h1>리액트 앱을 레고처럼 재사용 가능한 컴포넌트로 만들기</h1>\n<p><img src=\"/assets/img/2024-05-12-CreateReactAppwithoutCreateReactApp_2.png\" alt=\"이미지\"></p>\n<p>Bit의 오픈 소스 도구는 25만 명 이상의 개발자가 컴포넌트를 사용하여 앱을 개발할 수 있게 도와줍니다.</p>\n<p>어떤 UI, 기능 또는 페이지든 재사용 가능한 컴포넌트로 전환하고 애플리케이션 간에 공유하세요. 협업이 더 쉽고 빠르게 개발할 수 있습니다.</p>\n<p>→ 자세히 알아보기</p>\n<p>앱을 구성 요소로 분할하여 앱 개발을 쉽게 만들고 원하는 워크플로에 최상의 경험을 누릴 수 있습니다:</p>\n<h2>→ 마이크로 프론트엔드</h2>\n<h2>→ 디자인 시스템</h2>\n<h2>→ 코드 공유 및 재사용</h2>\n<h2>→ 모노 레포</h2>\n<h2>더 알아보기:</h2>\n</body>\n</html>\n"},"__N_SSG":true}