{"pageProps":{"post":{"title":"Nodejs에서 SOLID 원칙 마스터하기 실전 예제와 모범 사례 ","description":"","date":"2024-05-14 14:58","slug":"2024-05-14-MasteringSOLIDPrinciplesinNodejsPracticalExamplesandBestPractices","content":"\n\nNode.js 개발의 광활한 우주에서 SOLID 원칙을 숙달하면 튼튼하고 유지보수가 쉽며 확장 가능한 애플리케이션을 만들 수 있는 우주선이 될 것입니다. 🛸 SOLID 우주를 탐험하며 각 원칙을 실제 예제와 코드 스니펫과 함께 살펴봅시다.\n\n## 단일 책임 원칙 (SRP) 🎯\n\n하나의 임무를 가진 우주선을 상상해보세요: 먼 행성으로 화물을 전달하는 것. 마찬가지로 Node.js에서 각 모듈은 하나의 명확한 목적을 가져야 합니다.\n\n예시: 사용자 서비스 모듈 🤖\n\n\n\nDo:\n\n```js\n// userService.js\nconst getUserById = (userId) => {\n  // 데이터베이스에서 사용자를 가져오는 로직\n};\n\nconst updateUser = (userId, newData) => {\n  // 데이터베이스에서 사용자를 업데이트하는 로직\n};\n\nmodule.exports = { getUserById, updateUser };\n```\n\nDon't:\n\n```js\n// IncorrectUserService.js\nconst userController = require('./userController');\n\nconst getUserByIdAndUpdate = (userId, newData) => {\n  // 같은 함수에서 사용자를 가져오고 업데이트하는 로직\n};\n```\n\n\n\n## 개방/폐쇄 원칙 (OCP) 🚪\n\n우주선의 문이 우주의 진공으로부터 닫혀있는 것처럼, 모듈은 확장을 위해 열려있지만 수정을 위해서는 닫혀있어야 합니다.\n\n예시: Logger 모듈 📝\n\n올바른 방법:\n\n\n\n```js\n// logger.js\nclass Logger {\n  log(message) {\n    // 메시지를 기록하는 로직\n  }\n}\nmodule.exports = Logger;\n```\n\n하지 말아야 할 것:\n\n```js\n// IncorrectLogger.js\nconst logger = require('./logger');\n\nlogger.customLog = (message, level) => {\n  // 사용자 정의 로깅 로직\n};\n```\n\n## 리스코프 치환 원칙 (LSP) 🧩\n\n\n\n\n소프트웨어 개발의 광대한 은하 속에서, 하위 클래스는 혼돈을 초래하지 않으면서 상위 클래스의 역할을 원활하게 수행해야 합니다.\n\n예: 데이터베이스 어댑터 📡\n\n올바르게 적용하라:\n\n```js\n// dbAdapter.js\nclass DatabaseAdapter {\n  connect() {\n    // 데이터베이스에 연결하는 로직\n  }\n}\n\nmodule.exports = DatabaseAdapter;\n```\n\n\n\n좋은 동료! 😊\n\n다음과 같이 변경해주실 수 있을까요?:\n\n\n```js\n// IncorrectDBAdapter.js\nclass MongoDBAdapter extends DatabaseAdapter {\n  connectToMongoDB() {\n    // Logic to connect specifically to MongoDB\n}\n```\n\n## Interface Segregation Principle (ISP) 🛠️\n\n만능 도구가 다양한 작업에 적응할 수 있는 것처럼, 인터페이스는 불필요한 메서드를 난잡하게 늘리지 않고 특정 필요에 맞게 설계되어야 합니다.\n\n\n\n예시: 인증 모듈 🔐\n\n다음과 같이 하세요:\n\n```js\n// auth.js\nclass Auth {\n  login(username, password) {\n    // 사용자 인증 로직\n  }\n  logout() {\n      // 사용자 로그아웃 로직\n    }\n  }\nmodule.exports = Auth;\n```\n\n하지 말아주세요:\n\n\n\n```js\n// IncorrectAuth.js\nclass Auth {\n  login(username, password) {\n    // 사용자를 인증하기 위한 로직\n  }\n  deleteUser(userId) {\n    // 사용자 삭제를 위한 관련 없는 메서드\n  }\n}\n```\n\n## 의존 역전 원칙 (DIP) 🔄\n\n의존성의 끊임없이 변화하는 우주에서, 고수준 모듈은 구체적인 구현이 아닌 추상화를 바라봐야 합니다.\n\n예시: 이메일 서비스 📧\n\n\n\n\n아래와 같이 변경해 주세요:\n\n```md\n// emailService.js\nclass EmailService {\n  sendEmail(to, subject, body) {\n    // 이메일을 보내는 로직\n  }\n}\n\nmodule.exports = EmailService;\n```\n\n```md\n// IncorrectEmailService.js\nconst nodemailer = require('nodemailer');\n\nconst sendEmail = (to, subject, body) => {\n  // nodemailer를 직접 사용하여 이메일을 보내는 로직\n};\n```\n\n\n\n이러한 SOLID 원칙에 따라 Node.js 프로젝트를 조정함으로써, 우리는 자신감과 미련으로 소프트웨어 개발의 광대한 우주를 탐험할 수 있습니다. 🌌 행복한 코딩, 동료 우주 탐험가 여러분! 🚀","ogImage":{"url":"/assets/img/2024-05-14-MasteringSOLIDPrinciplesinNodejsPracticalExamplesandBestPractices_0.png"},"coverImage":"/assets/img/2024-05-14-MasteringSOLIDPrinciplesinNodejsPracticalExamplesandBestPractices_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Node.js 개발의 광활한 우주에서 SOLID 원칙을 숙달하면 튼튼하고 유지보수가 쉽며 확장 가능한 애플리케이션을 만들 수 있는 우주선이 될 것입니다. 🛸 SOLID 우주를 탐험하며 각 원칙을 실제 예제와 코드 스니펫과 함께 살펴봅시다.</p>\n<h2>단일 책임 원칙 (SRP) 🎯</h2>\n<p>하나의 임무를 가진 우주선을 상상해보세요: 먼 행성으로 화물을 전달하는 것. 마찬가지로 Node.js에서 각 모듈은 하나의 명확한 목적을 가져야 합니다.</p>\n<p>예시: 사용자 서비스 모듈 🤖</p>\n<p>Do:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// userService.js</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getUserById</span> = (<span class=\"hljs-params\">userId</span>) => {\n  <span class=\"hljs-comment\">// 데이터베이스에서 사용자를 가져오는 로직</span>\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">updateUser</span> = (<span class=\"hljs-params\">userId, newData</span>) => {\n  <span class=\"hljs-comment\">// 데이터베이스에서 사용자를 업데이트하는 로직</span>\n};\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = { getUserById, updateUser };\n</code></pre>\n<p>Don't:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// IncorrectUserService.js</span>\n<span class=\"hljs-keyword\">const</span> userController = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./userController'</span>);\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getUserByIdAndUpdate</span> = (<span class=\"hljs-params\">userId, newData</span>) => {\n  <span class=\"hljs-comment\">// 같은 함수에서 사용자를 가져오고 업데이트하는 로직</span>\n};\n</code></pre>\n<h2>개방/폐쇄 원칙 (OCP) 🚪</h2>\n<p>우주선의 문이 우주의 진공으로부터 닫혀있는 것처럼, 모듈은 확장을 위해 열려있지만 수정을 위해서는 닫혀있어야 합니다.</p>\n<p>예시: Logger 모듈 📝</p>\n<p>올바른 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// logger.js</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Logger</span> {\n  <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-params\">message</span>) {\n    <span class=\"hljs-comment\">// 메시지를 기록하는 로직</span>\n  }\n}\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-title class_\">Logger</span>;\n</code></pre>\n<p>하지 말아야 할 것:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// IncorrectLogger.js</span>\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./logger'</span>);\n\nlogger.<span class=\"hljs-property\">customLog</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">message, level</span>) =></span> {\n  <span class=\"hljs-comment\">// 사용자 정의 로깅 로직</span>\n};\n</code></pre>\n<h2>리스코프 치환 원칙 (LSP) 🧩</h2>\n<p>소프트웨어 개발의 광대한 은하 속에서, 하위 클래스는 혼돈을 초래하지 않으면서 상위 클래스의 역할을 원활하게 수행해야 합니다.</p>\n<p>예: 데이터베이스 어댑터 📡</p>\n<p>올바르게 적용하라:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// dbAdapter.js</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DatabaseAdapter</span> {\n  <span class=\"hljs-title function_\">connect</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 데이터베이스에 연결하는 로직</span>\n  }\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-title class_\">DatabaseAdapter</span>;\n</code></pre>\n<p>좋은 동료! 😊</p>\n<p>다음과 같이 변경해주실 수 있을까요?:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// IncorrectDBAdapter.js</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MongoDBAdapter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">DatabaseAdapter</span> {\n  <span class=\"hljs-title function_\">connectToMongoDB</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// Logic to connect specifically to MongoDB</span>\n}\n</code></pre>\n<h2>Interface Segregation Principle (ISP) 🛠️</h2>\n<p>만능 도구가 다양한 작업에 적응할 수 있는 것처럼, 인터페이스는 불필요한 메서드를 난잡하게 늘리지 않고 특정 필요에 맞게 설계되어야 합니다.</p>\n<p>예시: 인증 모듈 🔐</p>\n<p>다음과 같이 하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// auth.js</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Auth</span> {\n  <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-params\">username, password</span>) {\n    <span class=\"hljs-comment\">// 사용자 인증 로직</span>\n  }\n  <span class=\"hljs-title function_\">logout</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-comment\">// 사용자 로그아웃 로직</span>\n    }\n  }\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-title class_\">Auth</span>;\n</code></pre>\n<p>하지 말아주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// IncorrectAuth.js</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Auth</span> {\n  <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-params\">username, password</span>) {\n    <span class=\"hljs-comment\">// 사용자를 인증하기 위한 로직</span>\n  }\n  <span class=\"hljs-title function_\">deleteUser</span>(<span class=\"hljs-params\">userId</span>) {\n    <span class=\"hljs-comment\">// 사용자 삭제를 위한 관련 없는 메서드</span>\n  }\n}\n</code></pre>\n<h2>의존 역전 원칙 (DIP) 🔄</h2>\n<p>의존성의 끊임없이 변화하는 우주에서, 고수준 모듈은 구체적인 구현이 아닌 추상화를 바라봐야 합니다.</p>\n<p>예시: 이메일 서비스 📧</p>\n<p>아래와 같이 변경해 주세요:</p>\n<pre><code class=\"hljs language-md\">// emailService.js\nclass EmailService {\n  sendEmail(to, subject, body) {\n<span class=\"hljs-code\">    // 이메일을 보내는 로직\n  }\n}\n</span>\nmodule.exports = EmailService;\n</code></pre>\n<pre><code class=\"hljs language-md\">// IncorrectEmailService.js\nconst nodemailer = require('nodemailer');\n\nconst sendEmail = (to, subject, body) => {\n  // nodemailer를 직접 사용하여 이메일을 보내는 로직\n};\n</code></pre>\n<p>이러한 SOLID 원칙에 따라 Node.js 프로젝트를 조정함으로써, 우리는 자신감과 미련으로 소프트웨어 개발의 광대한 우주를 탐험할 수 있습니다. 🌌 행복한 코딩, 동료 우주 탐험가 여러분! 🚀</p>\n</body>\n</html>\n"},"__N_SSG":true}