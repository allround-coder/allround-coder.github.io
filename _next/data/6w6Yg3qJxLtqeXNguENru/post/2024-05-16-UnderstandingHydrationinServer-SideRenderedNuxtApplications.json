{"pageProps":{"post":{"title":"서버 측 렌더링된 눅트 애플리케이션에서 수분 공급 이해하기","description":"","date":"2024-05-16 03:14","slug":"2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications","content":"\n\n이 게시물은 수분 섭취에 대해 자세히 다루며, 그것이 무엇인지, 왜 중요한지, 그리고 사용자에게 웹 사이트를 부드럽고 빠르게 느끼게 하는 방법을 설명합니다. 하지만 주의하세요, 수분 섭취는 모든 게 해피 엔딩인 것은 아닙니다. 잠재적인 장애물을 탐구하고 이를 극복하여 웹 사이트가 번개처럼 빠르고 사용자 친화적인 상태를 유지할 수 있도록 안내할 것입니다.\n\n![이미지](/assets/img/2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_0.png)\n\n# 수분 섭취란?\n\n요리를 준비하고 있다고 상상해보세요. 수분 섭취는 요리의 대부분을 미리 준비(서버 측 렌더링)하고 식사 직전에 마무리 손질을 하는 것(클라이언트 측 렌더링)과 같습니다. 이를 통해 식사가 빨리 준비되고 맛있게 느껴지는 것처럼 빠르게 로딩되고 상호작용하는 웹 페이지를 만들 수 있습니다.\n\n\n\n이제 수분 보충이 작동하는 방식을 살펴보겠습니다:\n\n- 서버는 코드를 컴파일하고 정적 HTML을 생성합니다.\n- HTML은 CSS와 JavaScript와 함께 클라이언트(브라우저)로 전송됩니다.\n- 브라우저는 서버에서 JavaScript 파일을 실행하고 정적 페이지를 대화형 HTML 페이지로 변환합니다.\n\n# 수분 보충 불일치 오류\n\n수분 보충 불일치 오류는 서버에서 렌더링된 HTML과 Vue 애플리케이션의 클라이언트 측 렌더링된 HTML이 최종 구조에 대해 동의하지 않을 때 발생합니다. 미리 렌더링된 HTML의 DOM 구조가 클라이언트 측 앱의 예상 출력과 일치하지 않으면 수분 보충 불일치 오류가 발생합니다.\n\n\n\n## 수분 불일치의 일반 원인:\n\n## 잘못된 HTML\n\n서버 렌더링 출력물에 형식이 잘못된 또는 유효하지 않은 HTML이 포함되어 있으면 클라이언트 측 수분화 과정 중에 문제가 발생할 수 있습니다.\n\n예시:\n\n\n\n\n<a\n  class=\"Invalid A tag\"\n  href=\"https://www.google.com/\"\n>\n  Hello\n  <div>\n    <a href=\"https://www.youtube.com/\">\n      World\n    </a>\n  </div>\n</a>\n<p class=\"Invalid P tag\">\n  <div>Bye World</div>\n</p>\n\n\n이 HTML은 아래 이미지에 나와 있는 오류를 발생시킵니다.\n\n![2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_1.png](/assets/img/2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_1.png)\n\n이 코드에는 중첩 오류가 두 가지 있습니다:\n\n\n\n\n- 다른 'a' 태그 안에 중첩된 'a' 태그.\n- 'p' 태그 안에 중첩된 'div' 태그.\n\n그리고 브라우저는 코드를 다음과 같이 렌더링합니다.\n\n```js\n<a class=\"Invalid A tag\" href=\"https://www.google.com/\">\n  Hello\n</a>\n<div>\n  <a class=\"Invalid A tag\" href=\"https://www.google.com/\">\n  </a>\n  <a href=\"https://www.youtube.com/\">\n    World\n  </a>\n</div>\n```\n\n이 템플릿은 유효하지 않은 HTML 중첩 구조를 포함하고 있으며, 브라우저의 네이티브 HTML 구문 해석 동작에 의해 렌더링된 HTML이 \"수정\"되었습니다.\n\n\n\n## HTML을 수정하는 스크립트들\n\n서버에서 실행 중인 스크립트들은 초기 HTML 구조를 수정할 수 있기 때문에, 클라이언트가 이를 수분화하려고 할 때 불일치가 발생할 수 있습니다.\n특히 Vue가 제어를 쥐기 전에 서버 측에서 DOM을 과도하게 조작하는 것을 피하십시오.\n\n예시:\nVue가 클라이언트에서 렌더링하기 전에 서버 측에 양식을 넣으면, 일치하지 않을 수 있습니다.\n\n## 상태 불일치\n\n\n\n서버 및 클라이언트에서 렌더링하는 데 사용되는 데이터(상태)의 차이로 인해 수분화 불일치가 발생할 수 있습니다. 비동기 데이터 가져오기나 동적 사용자 상호작용 시에 이는 일반적입니다.\n\n예시\n\n```js\n<script setup>\nconst articles = useAsyncData('articles', async () => {\n  // 클라이언트에서만 기사 데이터 가져오기\n  const response = await fetch('/api/articles');\n  return await response.json();\n})\n</script>\n\n\n<template>\n  <div>\n    { articles.length === 0 ? '로딩 중...' : '' }\n    <div v-if=\"articles.length > 0\">\n      <p v-for=\"article in articles\">\n        {  article }\n      </p>\n    </div>\n  </div>\n</template>\n```\n\n이 예시에서 서버 측 렌더링에는 어떤 기사 데이터도 없으므로 \"로딩 중…\" 텍스트가 표시됩니다. 그러나 클라이언트 측에서 데이터를 가져온 후에는 \"로딩 중…\" 텍스트가 표시되지 않습니다. 초기 상태의 차이로 인해 수분화 불일치가 발생합니다.\n\n\n\n## 날짜, 타임스탬프 및 무작위화\n\n날짜, 타임스탬프 또는 무작위 콘텐츠와 관련된 구성 요소는 서버와 클라이언트에서 다른 출력물을 생성할 수 있으므로 수분화 불일치 오류가 발생할 수 있습니다.\n\n예시\n\n```js\n<div>\n  <p>\n    { Math.random() }\n  </p>\n</div>\n```\n\n\n\n서버와 클라이언트에서 Math.random()을 사용하면 서로 다른 난수가 생성되어 일치하지 않을 수 있습니다.\n\n# 수분 불일치 해소\n\n![이미지](/assets/img/2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_2.png)\n\n실제 해결책으로 수분 불일치에 대응해 보겠습니다:\n\n\n\n## 올바른 HTML 보장하기\n\n- 올바르게 구조화된 HTML 구조를 유지하세요. 초기 서버 렌더링된 HTML의 오류나 일관성 부족은 클라이언트 측 JavaScript가 상호 작용할 때 일치하지 않을 수 있습니다.\n- 린터(linter)나 유효성 검사기와 같은 도구를 사용하여 문제가 발생하기 전에 HTML 구문 오류를 잡아내세요.\n\n예시 (위의 잘못된 HTML에 대한 해결책)\n\n```js\n<a\n  class=\"Valid A tag\"\n  href=\"https://www.google.com/\"\n>\n  Hello\n</a>\n<a href=\"https://www.youtube.com/\">\n  World\n</a>\n<p class=\"Valid P tag\">\n  Bye World\n</p>\n```\n\n\n\n이 예시에서는 잘못된 HTML을 수정한 방법은 다음과 같습니다:\n\n- 중첩된 `a` 태그를 제거했습니다. `a` 태그 안에 또 다른 `a` 태그를 넣을 수 없습니다.\n- `p` 태그 내에 불필요한 `div` 태그를 제거했습니다. 단락 (`p`)은 텍스트 콘텐츠를 직접 포함해야 하며 `div`와 같은 추가적인 블록 수준 요소를 포함할 수 없습니다.\n\n## 서버와 클라이언트 간 상태 불일치 해결하기\n\n- 서버에서 HTML을 렌더링하는 데 사용되는 데이터와 클라이언트에서 사용 가능한 데이터가 다를 때 발생하는 수분화 불일치를 해결했습니다.\n- Nuxt 3와 같은 프레임워크가 제공하는 디버깅 도구를 사용하면 어디서 불일치가 발생했는지 정확히 파악하고 신속하게 해결할 수 있습니다.\n- Nuxt 3는 서버 및 클라이언트 측의 상태를 유지하기 위한 사용 가능한 UseHydration도 제공합니다.\n\n\n\n## 최종 탈출\n\n## `ClientOnly` 컴포넌트\n\n`ClientOnly` 컴포넌트는 목적에 맞게 클라이언트 측에서만 컴포넌트를 렌더링하는 데 사용됩니다.\n\n- 이 지시문은 Nuxt에게 해당 컴포넌트에 대해 서버 측 렌더링을 완전히 건너뛰고 클라이언트 측에서만 렌더링하도록 지시합니다.\n- 이 옵션을 사용할 때 SEO 및 초기 로드 성능에 영향을 줄 수 있으므로 신중하게 사용하세요.\n\n\n\n## .client과 .server 접미사 사용하기\n\n특정 코드가 실행되는 시점을 제어하기 위해 .server 또는 .client 접미사가 붙은 파일을 생성할 수 있습니다.\n\n.server:\n\n- 파일은 초기 렌더링 중에 서버에서만 실행됩니다.\n- 초기 로드 및 SEO를 개선합니다.\n- 창 객체나 클라이언트 측 API에 접근할 수 없습니다.\n\n\n\n.client:\n\n- 파일은 클라이언트 측에서만 실행됩니다.\n- 상호작용을 위해 완전한 브라우저 환경을 활용합니다.\n- 사용자 입력 및 동적 기능에 이상적입니다.\n\n## NuxtLazyHydrate\n\n- NuxtLazyHydrate 라이브러리는 렌더링이 필요 없는 컴포넌트, 컴포저블 및 임포트 래퍼를 제공하여 사전 렌더링된 HTML의 수분화를 지연시킵니다. 비중요 구성 요소를 상호작용 가능하게 하는 컴포넌트를 제공하여 초기로드 및 반응성이 향상됩니다.\n- 지연 로딩과 같이 중요한 콘텐츠를 우선해서 불러오고 필요할 때까지 중요하지 않은 요소는 정적으로 유지합니다.\n\n\n\n# 읽어 주셔서 감사합니다!\n\n이 코딩 모험에 함께해 주셔서 대단히 감사합니다! 댓글로 의견을 알려주시고, 더 자세히 알아보고 싶은 다른 코딩 주제가 있으면 알려주세요. 계속해서 멋진 것들을 코딩하고 만들어봐요!\n\n![image](/assets/img/2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_3.png)\n\n# 참고문헌\n\n\n\n- Vue 2 하이드레이션 실패 시 어떻게 해야 할까요?— Alexander Lichter\n- 서버 사이드 렌더링 (SSR) | Vue.js\n- Nuxt 3 \"Hydration Mismatch\" 오류 · Harlan Wilton\n- Nuxt에서의 Lazy Hydration 및 서버 컴포넌트 — Vue.js 3 성능 — Vue School Articles\n- Baroshem/nuxt-lazy-hydrate","ogImage":{"url":"/assets/img/2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_0.png"},"coverImage":"/assets/img/2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 게시물은 수분 섭취에 대해 자세히 다루며, 그것이 무엇인지, 왜 중요한지, 그리고 사용자에게 웹 사이트를 부드럽고 빠르게 느끼게 하는 방법을 설명합니다. 하지만 주의하세요, 수분 섭취는 모든 게 해피 엔딩인 것은 아닙니다. 잠재적인 장애물을 탐구하고 이를 극복하여 웹 사이트가 번개처럼 빠르고 사용자 친화적인 상태를 유지할 수 있도록 안내할 것입니다.</p>\n<p><img src=\"/assets/img/2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_0.png\" alt=\"이미지\"></p>\n<h1>수분 섭취란?</h1>\n<p>요리를 준비하고 있다고 상상해보세요. 수분 섭취는 요리의 대부분을 미리 준비(서버 측 렌더링)하고 식사 직전에 마무리 손질을 하는 것(클라이언트 측 렌더링)과 같습니다. 이를 통해 식사가 빨리 준비되고 맛있게 느껴지는 것처럼 빠르게 로딩되고 상호작용하는 웹 페이지를 만들 수 있습니다.</p>\n<p>이제 수분 보충이 작동하는 방식을 살펴보겠습니다:</p>\n<ul>\n<li>서버는 코드를 컴파일하고 정적 HTML을 생성합니다.</li>\n<li>HTML은 CSS와 JavaScript와 함께 클라이언트(브라우저)로 전송됩니다.</li>\n<li>브라우저는 서버에서 JavaScript 파일을 실행하고 정적 페이지를 대화형 HTML 페이지로 변환합니다.</li>\n</ul>\n<h1>수분 보충 불일치 오류</h1>\n<p>수분 보충 불일치 오류는 서버에서 렌더링된 HTML과 Vue 애플리케이션의 클라이언트 측 렌더링된 HTML이 최종 구조에 대해 동의하지 않을 때 발생합니다. 미리 렌더링된 HTML의 DOM 구조가 클라이언트 측 앱의 예상 출력과 일치하지 않으면 수분 보충 불일치 오류가 발생합니다.</p>\n<h2>수분 불일치의 일반 원인:</h2>\n<h2>잘못된 HTML</h2>\n<p>서버 렌더링 출력물에 형식이 잘못된 또는 유효하지 않은 HTML이 포함되어 있으면 클라이언트 측 수분화 과정 중에 문제가 발생할 수 있습니다.</p>\n<p>예시:</p>\n<p>&#x3C;a\nclass=\"Invalid A tag\"\nhref=\"<a href=\"https://www.google.com/\" rel=\"nofollow\" target=\"_blank\">https://www.google.com/</a>\"</p>\n<blockquote>\n</blockquote>\n<p>Hello</p>\n<p>이 HTML은 아래 이미지에 나와 있는 오류를 발생시킵니다.</p>\n<p><img src=\"/assets/img/2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_1.png\" alt=\"2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_1.png\"></p>\n<p>이 코드에는 중첩 오류가 두 가지 있습니다:</p>\n<ul>\n<li>다른 'a' 태그 안에 중첩된 'a' 태그.</li>\n<li>'p' 태그 안에 중첩된 'div' 태그.</li>\n</ul>\n<p>그리고 브라우저는 코드를 다음과 같이 렌더링합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;a <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"Invalid A tag\"</span> href=<span class=\"hljs-string\">\"https://www.google.com/\"</span>>\n  <span class=\"hljs-title class_\">Hello</span>\n&#x3C;/a>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"Invalid A tag\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://www.google.com/\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://www.youtube.com/\"</span>></span>\n    World\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n</code></pre>\n<p>이 템플릿은 유효하지 않은 HTML 중첩 구조를 포함하고 있으며, 브라우저의 네이티브 HTML 구문 해석 동작에 의해 렌더링된 HTML이 \"수정\"되었습니다.</p>\n<h2>HTML을 수정하는 스크립트들</h2>\n<p>서버에서 실행 중인 스크립트들은 초기 HTML 구조를 수정할 수 있기 때문에, 클라이언트가 이를 수분화하려고 할 때 불일치가 발생할 수 있습니다.\n특히 Vue가 제어를 쥐기 전에 서버 측에서 DOM을 과도하게 조작하는 것을 피하십시오.</p>\n<p>예시:\nVue가 클라이언트에서 렌더링하기 전에 서버 측에 양식을 넣으면, 일치하지 않을 수 있습니다.</p>\n<h2>상태 불일치</h2>\n<p>서버 및 클라이언트에서 렌더링하는 데 사용되는 데이터(상태)의 차이로 인해 수분화 불일치가 발생할 수 있습니다. 비동기 데이터 가져오기나 동적 사용자 상호작용 시에 이는 일반적입니다.</p>\n<p>예시</p>\n<pre><code class=\"hljs language-js\">&#x3C;script setup>\n<span class=\"hljs-keyword\">const</span> articles = <span class=\"hljs-title function_\">useAsyncData</span>(<span class=\"hljs-string\">'articles'</span>, <span class=\"hljs-keyword\">async</span> () => {\n  <span class=\"hljs-comment\">// 클라이언트에서만 기사 데이터 가져오기</span>\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/articles'</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n})\n&#x3C;/script>\n\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n    { articles.length === 0 ? '로딩 중...' : '' }\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"articles.length > 0\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"article in articles\"</span>></span>\n        {  article }\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n</code></pre>\n<p>이 예시에서 서버 측 렌더링에는 어떤 기사 데이터도 없으므로 \"로딩 중…\" 텍스트가 표시됩니다. 그러나 클라이언트 측에서 데이터를 가져온 후에는 \"로딩 중…\" 텍스트가 표시되지 않습니다. 초기 상태의 차이로 인해 수분화 불일치가 발생합니다.</p>\n<h2>날짜, 타임스탬프 및 무작위화</h2>\n<p>날짜, 타임스탬프 또는 무작위 콘텐츠와 관련된 구성 요소는 서버와 클라이언트에서 다른 출력물을 생성할 수 있으므로 수분화 불일치 오류가 발생할 수 있습니다.</p>\n<p>예시</p>\n<pre><code class=\"hljs language-js\">&#x3C;div>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n    { Math.random() }\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n&#x3C;/div>\n</code></pre>\n<p>서버와 클라이언트에서 Math.random()을 사용하면 서로 다른 난수가 생성되어 일치하지 않을 수 있습니다.</p>\n<h1>수분 불일치 해소</h1>\n<p><img src=\"/assets/img/2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_2.png\" alt=\"이미지\"></p>\n<p>실제 해결책으로 수분 불일치에 대응해 보겠습니다:</p>\n<h2>올바른 HTML 보장하기</h2>\n<ul>\n<li>올바르게 구조화된 HTML 구조를 유지하세요. 초기 서버 렌더링된 HTML의 오류나 일관성 부족은 클라이언트 측 JavaScript가 상호 작용할 때 일치하지 않을 수 있습니다.</li>\n<li>린터(linter)나 유효성 검사기와 같은 도구를 사용하여 문제가 발생하기 전에 HTML 구문 오류를 잡아내세요.</li>\n</ul>\n<p>예시 (위의 잘못된 HTML에 대한 해결책)</p>\n<pre><code class=\"hljs language-js\">&#x3C;a\n  <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"Valid A tag\"</span>\n  href=<span class=\"hljs-string\">\"https://www.google.com/\"</span>\n>\n  <span class=\"hljs-title class_\">Hello</span>\n&#x3C;/a>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://www.youtube.com/\"</span>></span>\n  World\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"Valid P tag\"</span>></span>\n  Bye World\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n</code></pre>\n<p>이 예시에서는 잘못된 HTML을 수정한 방법은 다음과 같습니다:</p>\n<ul>\n<li>중첩된 <code>a</code> 태그를 제거했습니다. <code>a</code> 태그 안에 또 다른 <code>a</code> 태그를 넣을 수 없습니다.</li>\n<li><code>p</code> 태그 내에 불필요한 <code>div</code> 태그를 제거했습니다. 단락 (<code>p</code>)은 텍스트 콘텐츠를 직접 포함해야 하며 <code>div</code>와 같은 추가적인 블록 수준 요소를 포함할 수 없습니다.</li>\n</ul>\n<h2>서버와 클라이언트 간 상태 불일치 해결하기</h2>\n<ul>\n<li>서버에서 HTML을 렌더링하는 데 사용되는 데이터와 클라이언트에서 사용 가능한 데이터가 다를 때 발생하는 수분화 불일치를 해결했습니다.</li>\n<li>Nuxt 3와 같은 프레임워크가 제공하는 디버깅 도구를 사용하면 어디서 불일치가 발생했는지 정확히 파악하고 신속하게 해결할 수 있습니다.</li>\n<li>Nuxt 3는 서버 및 클라이언트 측의 상태를 유지하기 위한 사용 가능한 UseHydration도 제공합니다.</li>\n</ul>\n<h2>최종 탈출</h2>\n<h2><code>ClientOnly</code> 컴포넌트</h2>\n<p><code>ClientOnly</code> 컴포넌트는 목적에 맞게 클라이언트 측에서만 컴포넌트를 렌더링하는 데 사용됩니다.</p>\n<ul>\n<li>이 지시문은 Nuxt에게 해당 컴포넌트에 대해 서버 측 렌더링을 완전히 건너뛰고 클라이언트 측에서만 렌더링하도록 지시합니다.</li>\n<li>이 옵션을 사용할 때 SEO 및 초기 로드 성능에 영향을 줄 수 있으므로 신중하게 사용하세요.</li>\n</ul>\n<h2>.client과 .server 접미사 사용하기</h2>\n<p>특정 코드가 실행되는 시점을 제어하기 위해 .server 또는 .client 접미사가 붙은 파일을 생성할 수 있습니다.</p>\n<p>.server:</p>\n<ul>\n<li>파일은 초기 렌더링 중에 서버에서만 실행됩니다.</li>\n<li>초기 로드 및 SEO를 개선합니다.</li>\n<li>창 객체나 클라이언트 측 API에 접근할 수 없습니다.</li>\n</ul>\n<p>.client:</p>\n<ul>\n<li>파일은 클라이언트 측에서만 실행됩니다.</li>\n<li>상호작용을 위해 완전한 브라우저 환경을 활용합니다.</li>\n<li>사용자 입력 및 동적 기능에 이상적입니다.</li>\n</ul>\n<h2>NuxtLazyHydrate</h2>\n<ul>\n<li>NuxtLazyHydrate 라이브러리는 렌더링이 필요 없는 컴포넌트, 컴포저블 및 임포트 래퍼를 제공하여 사전 렌더링된 HTML의 수분화를 지연시킵니다. 비중요 구성 요소를 상호작용 가능하게 하는 컴포넌트를 제공하여 초기로드 및 반응성이 향상됩니다.</li>\n<li>지연 로딩과 같이 중요한 콘텐츠를 우선해서 불러오고 필요할 때까지 중요하지 않은 요소는 정적으로 유지합니다.</li>\n</ul>\n<h1>읽어 주셔서 감사합니다!</h1>\n<p>이 코딩 모험에 함께해 주셔서 대단히 감사합니다! 댓글로 의견을 알려주시고, 더 자세히 알아보고 싶은 다른 코딩 주제가 있으면 알려주세요. 계속해서 멋진 것들을 코딩하고 만들어봐요!</p>\n<p><img src=\"/assets/img/2024-05-16-UnderstandingHydrationinServer-SideRenderedNuxtApplications_3.png\" alt=\"image\"></p>\n<h1>참고문헌</h1>\n<ul>\n<li>Vue 2 하이드레이션 실패 시 어떻게 해야 할까요?— Alexander Lichter</li>\n<li>서버 사이드 렌더링 (SSR) | Vue.js</li>\n<li>Nuxt 3 \"Hydration Mismatch\" 오류 · Harlan Wilton</li>\n<li>Nuxt에서의 Lazy Hydration 및 서버 컴포넌트 — Vue.js 3 성능 — Vue School Articles</li>\n<li>Baroshem/nuxt-lazy-hydrate</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}