{"pageProps":{"post":{"title":"앵귤러에서 let을 사용하여 템플릿 로컬 변수 생성하기","description":"","date":"2024-05-18 21:55","slug":"2024-05-18-TemplatelocalvariableswithletinAngular","content":"\n\n![image](/assets/img/2024-05-18-TemplatelocalvariableswithletinAngular_0.png)\n\n# Angular에서 let 사용하기\n\nAngular를 오랫동안 사용해본 적이 있다면, 언젠가는 템플릿 내에서 변수를 선언하고 싶은 경우가 있을 것입니다. 이것은 나중에 템플릿에서 사용할 값을 저장하고 싶을 때 흔히 발생하는 상황입니다.\n\n가장 일반적인 방법은 ngIf와 같은 디렉티브를 사용하여 as 키워드를 이용해 변수에 값을 할당하는 것입니다. 예를 들면:\n\n<div class=\"content-ad\"></div>\n\n```js\n<div *ngIf=\"user$ | async as user\">\n  <h1>{ user.name }</h1>\n</div>\n\n<!-- 또는 새로운 제어 흐름 사용 -->\n@if (user$ | async; as user) {\n  <h1>{ user.name }</h1>\n}\n```\n\n숫자를 다루고 있을 때는 어떻게 될까요?\n\n```js\n<div>\n    @if (points$ | async; as points) {\n        <h1>당신은 { points } 포인트를 가지고 있습니다!</h1>\n    }\n</div>\n```\n\n템플릿에서 포인트가 0이라면 어떻게 표시될까요? 아무것도 표시되지 않을 것입니다! 왜냐하면 0은 falsy한 값이기 때문에 if 블록 내에서 사용될 때 내용을 표시하지 않습니다.```\n\n<div class=\"content-ad\"></div>\n\n새로운 @let 블록이 작용하는 곳입니다. @let 블록을 사용하면 템플릿 내에서 변수를 선언하고 나중에 템플릿에서 사용할 수 있습니다. 어떻게 작동하는지 살펴봅시다.\n\n```js\n<div>\n    @let points = (points$ | async) ?? 0;  \n    <h1>You have: { points } points!</h1>\n</div>\n```\n\n이렇게 하면 points가 0이더라도 내용이 렌더링됩니다. 이는 let 블록이 Falsy 값을 확인하지 않기 때문에 발생하는 것이며 템플릿에서 그 시점에 변수를 선언하기 때문입니다.\n\n또한, @let 블록의 가장 일반적인 사용 사례 중 하나는 복잡한 표현식에 대한 별칭을 저장할 수 있는 변수를 저장하는 것입니다. 예를 들어:\n\n<div class=\"content-ad\"></div>\n\n```js\n@let someField = someService.someSignal().someProperty.someOtherProperty;\n<div>{ someField }</div>\n```\n\n# Angular에서 @let 사용 방법\n\n다음은 새로운 @let를 여러 방법으로 사용할 수 있습니다:\n\n- 비동기 파이프와 함께:\n\n<div class=\"content-ad\"></div>\n\n\n```js\n<div>\n    @let user = (user$ | async) ?? { name: 'Guest' };  \n    <h1>{ user.name }</h1>\n</div>\n```\n\n- With control flow directives:\n\n```js\n<div>\n    @let user = user$ | async;  \n    @if (user) {\n        <h1>{ user.name }</h1>\n    }\n</div>\n```\n\n- Inside @for to refactor code duplications:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n<mat-selection-list>\n    @for (item of items(); track item.id) {\n        @let isSelected = item.id === selectedId();\n        <mat-list-option [selected]=\"isSelected\" [class.selected]=\"isSelected\">\n            { item.text } \n            @if (isSelected) {\n                <span>(selected)</span>\n            }\n        </mat-list-option>\n    }\n</mat-selection-list>\n```\n\n- 삼항 연산자 활용:\n\n```js\n<div>\n    @for (game of games; track game.id) {\n        @let points = calcPoints(game.points > 0 ? game.points : 0);  \n        <h1>You have: { points } points!</h1>\n    }\n</div>\n```\n\n- 기본 산술 연산자 활용:\n\n<div class=\"content-ad\"></div>\n\n```js\n<div>\n   @for (게임 of 게임목록; 게임.id로 순회) {\n       @let 합계 = 이전합계 + 게임.점수; \n       <h1>총 점수: { 합계 }</h1>\n   }\n</div>\n```\n\n- 신호와 함께:\n\n```js\n<div>\n    @let 사용자이름 = 사용자()?.이름 ?? '손님';\n    <h1>환영합니다, { 사용자이름 }</h1>\n</div>\n```\n\n- 여러 선언을 한 줄에 나열하거나 여러 줄에 나눠서 선언하기:\n\n<div class=\"content-ad\"></div>\n\n```js\n<div>  \n    @let total = count + previousCount, average = calcAverage(count), (여기서 `total`을 사용할 수 있을까요?)\n    \n    @let total = count + previousCount, \n         average = calcAverage(count)\n    <h1>{total}</h1>\n</div>\n```\n\n# 좋은 정보\n\nlet 선언은 JavaScript의 let 선언과 거의 동일하게 작동합니다.\n\n- 스코핑은 JavaScript의 let과 동일하게 작동합니다.\n- 타입 추론이 그대로 작동합니다!\n- let 선언은 구성 속성보다 로컬 let 선언을 우선시합니다.\n- let 선언은 정의되기 전에 참조할 수 없으며, 예외는 이벤트 핸들러 내에서 사용될 때입니다. \n\n\n<div class=\"content-ad\"></div>\n\n이 기능은 2017년 3월부터 열려 있던 문제를 해결합니다.\n\n이 PR에서는 @let 블록이 도입되기 전에 고려된 여러 대안을 볼 수 있습니다.\n\n- @let 대신 @const\n- 새로운 키워드 전체\n- @let 대신 @var\n- 블록 형식의 구문\n\nPR에 대한 자세한 정보는 여기에서 확인할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n여기서 새로운 @let 블록을 Angular 템플릿에서 사용하는 방법이 있습니다. 이 기능은 아마도 예상대로 다가오는 달에 출시될 Angular v18.1에서 사용 가능할 것으로 예상됩니다.\n\nAngular 템플릿에서 @let 블록의 다른 사용 사례에 대해 떠오르는 것이 있으면 알려주세요. 🚀\n\n# 읽어 주셔서 감사합니다!\n\n만약 이 글이 흥미로웠고 유용하다고 생각되고 Angular에 대해 더 배우고 싶다면, 제게 커피 한 잔 사주는 걸로 응원해주세요 ☕️ 또는 X(이전 트위터) @Enea_Jahollari에서 저를 팔로우해주세요. Angular 최신 뉴스, 신호, 비디오, 팟캐스트, 업데이트, RFC, 풀 리퀘스트 등에 대해 많이 트윗하고 블로깅합니다. 💎","ogImage":{"url":"/assets/img/2024-05-18-TemplatelocalvariableswithletinAngular_0.png"},"coverImage":"/assets/img/2024-05-18-TemplatelocalvariableswithletinAngular_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-18-TemplatelocalvariableswithletinAngular_0.png\" alt=\"image\"></p>\n<h1>Angular에서 let 사용하기</h1>\n<p>Angular를 오랫동안 사용해본 적이 있다면, 언젠가는 템플릿 내에서 변수를 선언하고 싶은 경우가 있을 것입니다. 이것은 나중에 템플릿에서 사용할 값을 저장하고 싶을 때 흔히 발생하는 상황입니다.</p>\n<p>가장 일반적인 방법은 ngIf와 같은 디렉티브를 사용하여 as 키워드를 이용해 변수에 값을 할당하는 것입니다. 예를 들면:</p>\n<pre><code class=\"hljs language-js\">&#x3C;div *ngIf=<span class=\"hljs-string\">\"user$ | async as user\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>{ user.name }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n&#x3C;/div>\n\n&#x3C;!-- 또는 새로운 제어 흐름 사용 -->\n@<span class=\"hljs-keyword\">if</span> (user$ | <span class=\"hljs-keyword\">async</span>; <span class=\"hljs-keyword\">as</span> user) {\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>{ user.name }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n}\n</code></pre>\n<p>숫자를 다루고 있을 때는 어떻게 될까요?</p>\n<pre><code class=\"hljs language-js\">&#x3C;div>\n    @<span class=\"hljs-keyword\">if</span> (points$ | <span class=\"hljs-keyword\">async</span>; <span class=\"hljs-keyword\">as</span> points) {\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>당신은 { points } 포인트를 가지고 있습니다!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n    }\n&#x3C;/div>\n</code></pre>\n<p>템플릿에서 포인트가 0이라면 어떻게 표시될까요? 아무것도 표시되지 않을 것입니다! 왜냐하면 0은 falsy한 값이기 때문에 if 블록 내에서 사용될 때 내용을 표시하지 않습니다.```</p>\n<p>새로운 @let 블록이 작용하는 곳입니다. @let 블록을 사용하면 템플릿 내에서 변수를 선언하고 나중에 템플릿에서 사용할 수 있습니다. 어떻게 작동하는지 살펴봅시다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;div>\n    @<span class=\"hljs-keyword\">let</span> points = (points$ | <span class=\"hljs-keyword\">async</span>) ?? <span class=\"hljs-number\">0</span>;  \n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>You have: { points } points!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n&#x3C;/div>\n</code></pre>\n<p>이렇게 하면 points가 0이더라도 내용이 렌더링됩니다. 이는 let 블록이 Falsy 값을 확인하지 않기 때문에 발생하는 것이며 템플릿에서 그 시점에 변수를 선언하기 때문입니다.</p>\n<p>또한, @let 블록의 가장 일반적인 사용 사례 중 하나는 복잡한 표현식에 대한 별칭을 저장할 수 있는 변수를 저장하는 것입니다. 예를 들어:</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">let</span> someField = someService.<span class=\"hljs-title function_\">someSignal</span>().<span class=\"hljs-property\">someProperty</span>.<span class=\"hljs-property\">someOtherProperty</span>;\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>{ someField }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n</code></pre>\n<h1>Angular에서 @let 사용 방법</h1>\n<p>다음은 새로운 @let를 여러 방법으로 사용할 수 있습니다:</p>\n<ul>\n<li>비동기 파이프와 함께:</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;div>\n    @<span class=\"hljs-keyword\">let</span> user = (user$ | <span class=\"hljs-keyword\">async</span>) ?? { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Guest'</span> };  \n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>{ user.name }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n&#x3C;/div>\n</code></pre>\n<ul>\n<li>With control flow directives:</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;div>\n    @<span class=\"hljs-keyword\">let</span> user = user$ | <span class=\"hljs-keyword\">async</span>;  \n    @<span class=\"hljs-keyword\">if</span> (user) {\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>{ user.name }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n    }\n&#x3C;/div>\n</code></pre>\n<ul>\n<li>Inside @for to refactor code duplications:</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;mat-selection-list>\n    @<span class=\"hljs-keyword\">for</span> (item <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title function_\">items</span>(); track item.<span class=\"hljs-property\">id</span>) {\n        @<span class=\"hljs-keyword\">let</span> isSelected = item.<span class=\"hljs-property\">id</span> === <span class=\"hljs-title function_\">selectedId</span>();\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">mat-list-option</span> [<span class=\"hljs-attr\">selected</span>]=<span class=\"hljs-string\">\"isSelected\"</span> [<span class=\"hljs-attr\">class.selected</span>]=<span class=\"hljs-string\">\"isSelected\"</span>></span>\n            { item.text } \n            @if (isSelected) {\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>(selected)<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n            }\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">mat-list-option</span>></span></span>\n    }\n&#x3C;/mat-selection-list>\n</code></pre>\n<ul>\n<li>삼항 연산자 활용:</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;div>\n    @<span class=\"hljs-keyword\">for</span> (game <span class=\"hljs-keyword\">of</span> games; track game.<span class=\"hljs-property\">id</span>) {\n        @<span class=\"hljs-keyword\">let</span> points = <span class=\"hljs-title function_\">calcPoints</span>(game.<span class=\"hljs-property\">points</span> > <span class=\"hljs-number\">0</span> ? game.<span class=\"hljs-property\">points</span> : <span class=\"hljs-number\">0</span>);  \n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>You have: { points } points!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n    }\n&#x3C;/div>\n</code></pre>\n<ul>\n<li>기본 산술 연산자 활용:</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;div>\n   @<span class=\"hljs-keyword\">for</span> (게임 <span class=\"hljs-keyword\">of</span> 게임목록; 게임.<span class=\"hljs-property\">id</span>로 순회) {\n       @<span class=\"hljs-keyword\">let</span> 합계 = 이전합계 + 게임.점수; \n       <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>총 점수: { 합계 }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n   }\n&#x3C;/div>\n</code></pre>\n<ul>\n<li>신호와 함께:</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;div>\n    @<span class=\"hljs-keyword\">let</span> 사용자이름 = 사용자()?.이름 ?? <span class=\"hljs-string\">'손님'</span>;\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>환영합니다, { 사용자이름 }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n&#x3C;/div>\n</code></pre>\n<ul>\n<li>여러 선언을 한 줄에 나열하거나 여러 줄에 나눠서 선언하기:</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;div>  \n    @<span class=\"hljs-keyword\">let</span> total = count + previousCount, average = <span class=\"hljs-title function_\">calcAverage</span>(count), (여기서 <span class=\"hljs-string\">`total`</span>을 사용할 수 있을까요?)\n    \n    @<span class=\"hljs-keyword\">let</span> total = count + previousCount, \n         average = <span class=\"hljs-title function_\">calcAverage</span>(count)\n    &#x3C;h1>{total}&#x3C;/h1>\n&#x3C;/div>\n</code></pre>\n<h1>좋은 정보</h1>\n<p>let 선언은 JavaScript의 let 선언과 거의 동일하게 작동합니다.</p>\n<ul>\n<li>스코핑은 JavaScript의 let과 동일하게 작동합니다.</li>\n<li>타입 추론이 그대로 작동합니다!</li>\n<li>let 선언은 구성 속성보다 로컬 let 선언을 우선시합니다.</li>\n<li>let 선언은 정의되기 전에 참조할 수 없으며, 예외는 이벤트 핸들러 내에서 사용될 때입니다.</li>\n</ul>\n<p>이 기능은 2017년 3월부터 열려 있던 문제를 해결합니다.</p>\n<p>이 PR에서는 @let 블록이 도입되기 전에 고려된 여러 대안을 볼 수 있습니다.</p>\n<ul>\n<li>@let 대신 @const</li>\n<li>새로운 키워드 전체</li>\n<li>@let 대신 @var</li>\n<li>블록 형식의 구문</li>\n</ul>\n<p>PR에 대한 자세한 정보는 여기에서 확인할 수 있습니다:</p>\n<p>여기서 새로운 @let 블록을 Angular 템플릿에서 사용하는 방법이 있습니다. 이 기능은 아마도 예상대로 다가오는 달에 출시될 Angular v18.1에서 사용 가능할 것으로 예상됩니다.</p>\n<p>Angular 템플릿에서 @let 블록의 다른 사용 사례에 대해 떠오르는 것이 있으면 알려주세요. 🚀</p>\n<h1>읽어 주셔서 감사합니다!</h1>\n<p>만약 이 글이 흥미로웠고 유용하다고 생각되고 Angular에 대해 더 배우고 싶다면, 제게 커피 한 잔 사주는 걸로 응원해주세요 ☕️ 또는 X(이전 트위터) @Enea_Jahollari에서 저를 팔로우해주세요. Angular 최신 뉴스, 신호, 비디오, 팟캐스트, 업데이트, RFC, 풀 리퀘스트 등에 대해 많이 트윗하고 블로깅합니다. 💎</p>\n</body>\n</html>\n"},"__N_SSG":true}