{"pageProps":{"post":{"title":"애플리케이션 성능을 향상시키세요 Nodejs와 Redis","description":"","date":"2024-05-14 15:52","slug":"2024-05-14-ImproveyourapplicationperformanceNodeJsandRedis","content":"\n\n\n![사진](/assets/img/2024-05-14-ImproveyourapplicationperformanceNodeJsandRedis_0.png)\n\n데이터베이스에서 데이터를 가져올 때마다 서버에 요청이 들어올 때마다 대기하는 것에 지쳤나요? 연결을 열고 쿼리를 실행하는 것은 애플리케이션의 속도를 늦출 수 있습니다. 그러나 만약 그 모든 것을 우회할 수 있는 방법이 있다면 어떨까요?\n\n캐싱이 바로 그 방법입니다.\n\n캐싱을 사용하면 자주 액세스하는 데이터를 임시 저장소에 저장하여 가져오는 데 걸리는 시간을 현저히 줄일 수 있습니다. 그리고 Redis는 Node.js 애플리케이션의 완벽한 동반자인 고속인 메모리 데이터 저장소입니다.\n\n\n\n\n하루, 한 시간 또는 심지어 일 분 동안 데이터를 캐싱해두고 Redis가 데이터베이스를 쿼리하는 데 걸리는 시간의 한 부분으로 데이터를 제공한다고 상상해보세요. 마치 마법처럼 — 여러분의 사용자는 데이터를 더 빨리 받을 수 있고, 서버는 땀 한 방울 흘리지 않고 더 많은 요청을 처리할 수 있습니다.\n\n그럼 왜 기다릴까요? Redis가 여러분의 Node.js 애플리케이션에서 데이터를 처리하는 방식을 혁신시키게 두세요. 데이터베이스 병목 현상에 작별을 고하고 번쩍번쩍 속도를 내는 것을 환영하세요. Redis의 속도에 놀라시는 것이 바로 지금입니다.\n\n# 요구 사항\n\n본 문서에서는 ExpressJs, Redis 그리고 NodeJs를 사용하여 데이터를 캐싱하고 HTTP 요청을 처리할 것입니다. 그러므로 NodeJs, NPM, Docker를 준비하는 것이 좋습니다.\nRedis 서버를 생성하여 저장 및 데이터 검색을 다루기 위해 Docker를 사용할 것입니다.\n\n\n\n# 애플리케이션 설정 및 실행\n\n작업할 디렉토리를 만들고, 해당 디렉토리 내에 애플리케이션 소스 코드를 포함하는 src라는 또 다른 디렉토리와 docker-compose.yml이라는 다른 파일을 생성하세요.\n최종 구조는 다음과 같아야 합니다:\n\n![애플리케이션 구조](/assets/img/2024-05-14-ImproveyourapplicationperformanceNodeJsandRedis_1.png)\n\nsrc 폴더 내부에서 다음 명령을 실행하세요:\n\n\n\n```js\nnpm i express redis\nnpm i -D nodemon\n```\n\n그런 다음 package.json을 업데이트하여 일부 새로운 명령어 별명을 포함시킬 수 있습니다. 아래 예시를 복사하세요.\n\n```js\n{\n  \"name\": \"src\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"dev\": \"nodemon app.js\",\n    \"start\": \"node app.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.19.2\",\n    \"redis\": \"^4.6.13\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.1.0\"\n  }\n}\n```\n\n그런 다음 src 폴더에 app.js 파일을 만들고 다음 라인을 포함시킵니다:```\n\n\n\n```js\nimport express from \"express\";\nconst PORT = 4000;\nconst app = express();\n\napp.get(\"/\", async (req, res) => {\n  return res.json(\"Hello World!!\");\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n```\n\n위의 코드를 실행하려면 다음 명령을 사용하십시오:\n\n```js\nnpm run dev\n```\n\n그리고 http://localhost:4000/을 방문하여 \"Hello World!!\"를 볼 수 있습니다.\n\n\n\n이제 터미널을 종료하여 서버를 중지하고 Redis에 연결을 시도해보겠습니다.\n아래의 코드를 app.js에 추가해주세요.\n\n```js\nimport { createClient } from \"redis\";\nconst client = createClient();\nclient.on(\"error\", (err) => console.error(\"Redis Client Error\", err));\nclient\n  .connect()\n  .then((suc) => console.info(`Redis connected`))\n  .catch((err) => console.error(`Error occured while redis is connecting, ${err}`));\n```\n\n이를 통해 애플리케이션과 Redis 서버 간에 연결이 생성됩니다.\n\n지금 애플리케이션을 실행해보면 충돌이 발생할 것입니다. 그 이유는 아직 Redis 서버를 설정하지 않았기 때문입니다. 따라서 지금 설정을 해보겠습니다.\ndocker-compose.yml 파일에 다음 라인을 복사해주세요.\n\n\n\n```yaml\n버전: \"3.8\"\n서비스:\n  캐시:\n    이미지: redis:6.2-alpine\n    재시작: 항상\n    포트:\n      - \"6379:6379\"\n    볼륨:\n      - cache:/data\n볼륨:\n  캐시:\n    드라이버: 로컬\n```\n\n메인 디렉토리에서 다음 명령어를 실행하세요:\n\n```js\ndocker-compose build\ndocker-compose up -d\n```\n\n참고: 명령어를 실행하려면 컴퓨터에 Docker가 설치되어 있어야 합니다.\n\n\n\n어제 후면을 다시 실행하면 다음이 출력됩니다:\n서버가 http://localhost:4000에서 실행 중입니다\n레디스 연결됨\n\n좋아요!! 계속 진행합시다\n\n이제 app.js 파일을 다음 라인을 포함하도록 조정해보세요:\n\n```js\nconst getData = async () => {\n  //이 부분은 데이터베이스에 쿼리하여 데이터를 가져 오는 것으로 가정합시다\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve([\"bar\", \"baz\", \"qux\"]);\n    }, 1_000);\n  });\n};\n\napp.get(\"/\", async (req, res) => {\n  let data;\n  let from = \"DB\";\n  data = await client.get(\"foo\");\n  if (!data) {\n    data = await getData();\n    await client.set(\"foo\", JSON.stringify(data), {\n      EX: 60,\n    });\n  } else {\n    from = \"Cache\";\n    data = JSON.parse(data);\n  }\n  return res.json({ data, from });\n});\n```\n\n\n\n여기서는 데이터 배열을 검색하고 60초 동안 캐시에 저장하는 가짜 프로미스를 만들어 보았습니다. 데이터가 얼마나 자주 변경되는지에 따라 변경할 수 있습니다.\n\n이제 다시 http://localhost:4000 으로 이동하세요.\n데이터를 수신했다는 배열이 포함된 데이터가 표시됩니다. \"from\" 값이 \"DB\"인 것을 확인할 수 있을 겁니다. 페이지를 새로 고치면 \"from\"이 \"Cache\"인 같은 빠른 응답을 확인할 수 있을 겁니다.\n\n캐시 이전:\n\n![이미지](/assets/img/2024-05-14-ImproveyourapplicationperformanceNodeJsandRedis_2.png)\n\n\n\n캐싱 후:\n\n<img src=\"/assets/img/2024-05-14-ImproveyourapplicationperformanceNodeJsandRedis_3.png\" />\n\n캐싱하기 전에 시간 차이를 볼 수 있습니다. 캐싱하기 전에는 1초가 걸렸는데, 이는 우리가 약속을 1초 동안 기다리도록 설정했기 때문입니다. 하지만 실제로는 데이터 크기와 작업하고 있는 데이터베이스에 따라 더 짧거나 더 오래 걸릴 수 있습니다. 그러나 캐싱을 사용하면 데이터를 매번 데이터베이스에서 가져오는 것보다 더 빠르게 검색할 수 있습니다.\n\n# 결론\n\n\n\n이것은 일반적인 개요예요. 자주 요청되는 데이터를 저장하는 캐싱 메커니즘을 포함하는 중요성을 설명하려고 노력했어요. 이것은 애플리케이션 성능을 향상시키고 클라이언트가 요청 처리를 기다리는 시간을 줄일 거예요. 제 첫 번째 글이에요. 읽어주셔서 감사해요. 누군가에게 도움이 되길 바라요!","ogImage":{"url":"/assets/img/2024-05-14-ImproveyourapplicationperformanceNodeJsandRedis_0.png"},"coverImage":"/assets/img/2024-05-14-ImproveyourapplicationperformanceNodeJsandRedis_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-14-ImproveyourapplicationperformanceNodeJsandRedis_0.png\" alt=\"사진\"></p>\n<p>데이터베이스에서 데이터를 가져올 때마다 서버에 요청이 들어올 때마다 대기하는 것에 지쳤나요? 연결을 열고 쿼리를 실행하는 것은 애플리케이션의 속도를 늦출 수 있습니다. 그러나 만약 그 모든 것을 우회할 수 있는 방법이 있다면 어떨까요?</p>\n<p>캐싱이 바로 그 방법입니다.</p>\n<p>캐싱을 사용하면 자주 액세스하는 데이터를 임시 저장소에 저장하여 가져오는 데 걸리는 시간을 현저히 줄일 수 있습니다. 그리고 Redis는 Node.js 애플리케이션의 완벽한 동반자인 고속인 메모리 데이터 저장소입니다.</p>\n<p>하루, 한 시간 또는 심지어 일 분 동안 데이터를 캐싱해두고 Redis가 데이터베이스를 쿼리하는 데 걸리는 시간의 한 부분으로 데이터를 제공한다고 상상해보세요. 마치 마법처럼 — 여러분의 사용자는 데이터를 더 빨리 받을 수 있고, 서버는 땀 한 방울 흘리지 않고 더 많은 요청을 처리할 수 있습니다.</p>\n<p>그럼 왜 기다릴까요? Redis가 여러분의 Node.js 애플리케이션에서 데이터를 처리하는 방식을 혁신시키게 두세요. 데이터베이스 병목 현상에 작별을 고하고 번쩍번쩍 속도를 내는 것을 환영하세요. Redis의 속도에 놀라시는 것이 바로 지금입니다.</p>\n<h1>요구 사항</h1>\n<p>본 문서에서는 ExpressJs, Redis 그리고 NodeJs를 사용하여 데이터를 캐싱하고 HTTP 요청을 처리할 것입니다. 그러므로 NodeJs, NPM, Docker를 준비하는 것이 좋습니다.\nRedis 서버를 생성하여 저장 및 데이터 검색을 다루기 위해 Docker를 사용할 것입니다.</p>\n<h1>애플리케이션 설정 및 실행</h1>\n<p>작업할 디렉토리를 만들고, 해당 디렉토리 내에 애플리케이션 소스 코드를 포함하는 src라는 또 다른 디렉토리와 docker-compose.yml이라는 다른 파일을 생성하세요.\n최종 구조는 다음과 같아야 합니다:</p>\n<p><img src=\"/assets/img/2024-05-14-ImproveyourapplicationperformanceNodeJsandRedis_1.png\" alt=\"애플리케이션 구조\"></p>\n<p>src 폴더 내부에서 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">npm i express redis\nnpm i -D nodemon\n</code></pre>\n<p>그런 다음 package.json을 업데이트하여 일부 새로운 명령어 별명을 포함시킬 수 있습니다. 아래 예시를 복사하세요.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"src\"</span>,\n  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n  <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"\"</span>,\n  <span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"module\"</span>,\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &#x26;&#x26; exit 1\"</span>,\n    <span class=\"hljs-string\">\"dev\"</span>: <span class=\"hljs-string\">\"nodemon app.js\"</span>,\n    <span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-string\">\"node app.js\"</span>\n  },\n  <span class=\"hljs-string\">\"keywords\"</span>: [],\n  <span class=\"hljs-string\">\"author\"</span>: <span class=\"hljs-string\">\"\"</span>,\n  <span class=\"hljs-string\">\"license\"</span>: <span class=\"hljs-string\">\"ISC\"</span>,\n  <span class=\"hljs-string\">\"dependencies\"</span>: {\n    <span class=\"hljs-string\">\"express\"</span>: <span class=\"hljs-string\">\"^4.19.2\"</span>,\n    <span class=\"hljs-string\">\"redis\"</span>: <span class=\"hljs-string\">\"^4.6.13\"</span>\n  },\n  <span class=\"hljs-string\">\"devDependencies\"</span>: {\n    <span class=\"hljs-string\">\"nodemon\"</span>: <span class=\"hljs-string\">\"^3.1.0\"</span>\n  }\n}\n</code></pre>\n<p>그런 다음 src 폴더에 app.js 파일을 만들고 다음 라인을 포함시킵니다:```</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> express <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"express\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PORT</span> = <span class=\"hljs-number\">4000</span>;\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n  <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">json</span>(<span class=\"hljs-string\">\"Hello World!!\"</span>);\n});\n\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Server running on http://localhost:<span class=\"hljs-subst\">${PORT}</span>`</span>);\n});\n</code></pre>\n<p>위의 코드를 실행하려면 다음 명령을 사용하십시오:</p>\n<pre><code class=\"hljs language-js\">npm run dev\n</code></pre>\n<p>그리고 <a href=\"http://localhost:4000/%EC%9D%84\" rel=\"nofollow\" target=\"_blank\">http://localhost:4000/을</a> 방문하여 \"Hello World!!\"를 볼 수 있습니다.</p>\n<p>이제 터미널을 종료하여 서버를 중지하고 Redis에 연결을 시도해보겠습니다.\n아래의 코드를 app.js에 추가해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { createClient } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"redis\"</span>;\n<span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-title function_\">createClient</span>();\nclient.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"error\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Redis Client Error\"</span>, err));\nclient\n  .<span class=\"hljs-title function_\">connect</span>()\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">suc</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">`Redis connected`</span>))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">`Error occured while redis is connecting, <span class=\"hljs-subst\">${err}</span>`</span>));\n</code></pre>\n<p>이를 통해 애플리케이션과 Redis 서버 간에 연결이 생성됩니다.</p>\n<p>지금 애플리케이션을 실행해보면 충돌이 발생할 것입니다. 그 이유는 아직 Redis 서버를 설정하지 않았기 때문입니다. 따라서 지금 설정을 해보겠습니다.\ndocker-compose.yml 파일에 다음 라인을 복사해주세요.</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">버전:</span> <span class=\"hljs-string\">\"3.8\"</span>\n<span class=\"hljs-string\">서비스:</span>\n  <span class=\"hljs-string\">캐시:</span>\n    <span class=\"hljs-string\">이미지:</span> <span class=\"hljs-string\">redis:6.2-alpine</span>\n    <span class=\"hljs-string\">재시작:</span> <span class=\"hljs-string\">항상</span>\n    <span class=\"hljs-string\">포트:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"6379:6379\"</span>\n    <span class=\"hljs-string\">볼륨:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cache:/data</span>\n<span class=\"hljs-string\">볼륨:</span>\n  <span class=\"hljs-string\">캐시:</span>\n    <span class=\"hljs-string\">드라이버:</span> <span class=\"hljs-string\">로컬</span>\n</code></pre>\n<p>메인 디렉토리에서 다음 명령어를 실행하세요:</p>\n<pre><code class=\"hljs language-js\">docker-compose build\ndocker-compose up -d\n</code></pre>\n<p>참고: 명령어를 실행하려면 컴퓨터에 Docker가 설치되어 있어야 합니다.</p>\n<p>어제 후면을 다시 실행하면 다음이 출력됩니다:\n서버가 <a href=\"http://localhost:4000%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">http://localhost:4000에서</a> 실행 중입니다\n레디스 연결됨</p>\n<p>좋아요!! 계속 진행합시다</p>\n<p>이제 app.js 파일을 다음 라인을 포함하도록 조정해보세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getData</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-comment\">//이 부분은 데이터베이스에 쿼리하여 데이터를 가져 오는 것으로 가정합시다</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-title function_\">resolve</span>([<span class=\"hljs-string\">\"bar\"</span>, <span class=\"hljs-string\">\"baz\"</span>, <span class=\"hljs-string\">\"qux\"</span>]);\n    }, <span class=\"hljs-number\">1_000</span>);\n  });\n};\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n  <span class=\"hljs-keyword\">let</span> data;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">from</span> = <span class=\"hljs-string\">\"DB\"</span>;\n  data = <span class=\"hljs-keyword\">await</span> client.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"foo\"</span>);\n  <span class=\"hljs-keyword\">if</span> (!data) {\n    data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getData</span>();\n    <span class=\"hljs-keyword\">await</span> client.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(data), {\n      <span class=\"hljs-attr\">EX</span>: <span class=\"hljs-number\">60</span>,\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">from</span> = <span class=\"hljs-string\">\"Cache\"</span>;\n    data = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(data);\n  }\n  <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">json</span>({ data, <span class=\"hljs-keyword\">from</span> });\n});\n</code></pre>\n<p>여기서는 데이터 배열을 검색하고 60초 동안 캐시에 저장하는 가짜 프로미스를 만들어 보았습니다. 데이터가 얼마나 자주 변경되는지에 따라 변경할 수 있습니다.</p>\n<p>이제 다시 <a href=\"http://localhost:4000\" rel=\"nofollow\" target=\"_blank\">http://localhost:4000</a> 으로 이동하세요.\n데이터를 수신했다는 배열이 포함된 데이터가 표시됩니다. \"from\" 값이 \"DB\"인 것을 확인할 수 있을 겁니다. 페이지를 새로 고치면 \"from\"이 \"Cache\"인 같은 빠른 응답을 확인할 수 있을 겁니다.</p>\n<p>캐시 이전:</p>\n<p><img src=\"/assets/img/2024-05-14-ImproveyourapplicationperformanceNodeJsandRedis_2.png\" alt=\"이미지\"></p>\n<p>캐싱 후:</p>\n<p>캐싱하기 전에 시간 차이를 볼 수 있습니다. 캐싱하기 전에는 1초가 걸렸는데, 이는 우리가 약속을 1초 동안 기다리도록 설정했기 때문입니다. 하지만 실제로는 데이터 크기와 작업하고 있는 데이터베이스에 따라 더 짧거나 더 오래 걸릴 수 있습니다. 그러나 캐싱을 사용하면 데이터를 매번 데이터베이스에서 가져오는 것보다 더 빠르게 검색할 수 있습니다.</p>\n<h1>결론</h1>\n<p>이것은 일반적인 개요예요. 자주 요청되는 데이터를 저장하는 캐싱 메커니즘을 포함하는 중요성을 설명하려고 노력했어요. 이것은 애플리케이션 성능을 향상시키고 클라이언트가 요청 처리를 기다리는 시간을 줄일 거예요. 제 첫 번째 글이에요. 읽어주셔서 감사해요. 누군가에게 도움이 되길 바라요!</p>\n</body>\n</html>\n"},"__N_SSG":true}