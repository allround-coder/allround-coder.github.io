{"pageProps":{"post":{"title":"React Native에서 기기에서 파일을 업로드하는 방법","description":"","date":"2024-05-12 21:28","slug":"2024-05-12-HowtoUploadFilesFromDeviceinReactNative","content":"\n\n사용자들이 갤러리에서 이미지를 선택할 수 있는 기능을 제공하는 모바일 애플리케이션을 개발 중이신데요, React Native는 expo-image-picker를 통해 이를 쉽게 구현할 수 있어요. 이 라이브러리는 사용자들이 카메라 롤에서 기존 사진을 손쉽게 선택하거나 카메라를 통해 새 이미지를 캡처할 수 있는 기능을 제공합니다.\n\n![이미지](/assets/img/2024-05-12-HowtoUploadFilesFromDeviceinReactNative_0.png)\n\n# 설치\n\n시작하기 전에 React Native 프로젝트가 설정되어 있고 Expo와 통합되어 있는지 확인해주세요. Expo는 expo-image-picker 라이브러리를 제공하는데, 이를 통해 기기의 카메라와 사진 라이브러리에 접근할 수 있습니다.\n\n\n\n```js\nnpx expo install expo-image-picker\n```\n\n# 코드\n\n```js\nimport React, { useEffect, useState } from 'react';\nimport { Button, View, Image, Platform, StyleSheet, Text } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { Pressable } from 'react-native';\n\n\nconst ImagePickerScreen = () => {\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const libraryStatus = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (libraryStatus.status !== 'granted') {\n          alert('죄송합니다. 이 기능을 사용하려면 카메라 롤 권한이 필요합니다.');\n        }\n\n        const cameraStatus = await ImagePicker.requestCameraPermissionsAsync();\n        if (cameraStatus.status !== 'granted') {\n          alert('죄송합니다. 이 기능을 사용하려면 카메라 권한이 필요합니다.');\n        }\n      }\n    })();\n  }, []);\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    if (!result.cancelled) {\n      setImage(result.uri);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"카메라 롤에서 이미지 선택\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n        <Pressable onPress={navigateProfile}>\n            <Text style={{ fontSize: 18, marginBottom: 10, color: '#003F5C', padding: 25 }}>프로필로 이동</Text>\n        </Pressable>\n    </View>\n  );\n};\n\nexport default ImagePickerScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 200,\n    height: 200,\n    marginTop: 20,\n  },\n});\n```\n\n# 코드 설명\n```\n\n\n\n이제 코드를 분해하여 각 부분을 이해해 봅시다.\n\n## 필요한 모듈 가져오기\n\n```js\nimport React, { useEffect, useState } from 'react';\nimport { Button, View, Image, Platform, StyleSheet, Text } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useNavigation } from '@react-navigation/native';\nimport { Pressable } from 'react-native';\n```\n\n이 섹션에서는 다음을 가져옵니다:\n\n\n\n- 기본 기능과 렌더링을 위한 React 훅과 컴포넌트를 사용합니다.\n- 이미지 선택을 처리하기 위해 expo-image-picker의 ImagePicker를 사용합니다.\n- 화면 전환을 위한 네비게이션 도구를 사용합니다.\n\n```js\nconst ImagePickerScreen = () => {\n  const [image, setImage] = useState(null);\n  const navigation = useNavigation();\n  ...\n};\n```\n\n여기서:\n\n- ImagePickerScreen 함수형 컴포넌트를 정의합니다.\n- 선택한 이미지를 관리하기 위해 useState를 사용합니다.\n- 네비게이션을 설정합니다.\n\n\n\n## 권한을 위한 useEffect 훅\n\n```js\nuseEffect(() => {\n  (async () => {\n    if (Platform.OS !== 'web') {\n      const libraryStatus = await ImagePicker.requestMediaLibraryPermissionsAsync();\n      if (libraryStatus.status !== 'granted') {\n        alert('죄송합니다, 이 기능을 사용하려면 사진 라이브러리 권한이 필요합니다!');\n      }\n\n      const cameraStatus = await ImagePicker.requestCameraPermissionsAsync();\n      if (cameraStatus.status !== 'granted') {\n        alert('죄송합니다, 이 기능을 사용하려면 카메라 권한이 필요합니다!');\n      }\n    }\n  })();\n}, []);\n```\n\n이 코드 블록은 컴포넌트가 마운트된 후 실행되는 useEffect 훅을 사용하고 있습니다:\n\n- 플랫폼 확인:\n\n\n\n먼저 플랫폼이 웹 브라우저가 아닌지 확인합니다 (Platform.OS !== `web`). 이것은 권한 처리가 일반적으로 모바일 기기 관련 문제이므로 웹 플랫폼에는 적용되지 않기 때문에 중요합니다.\n\n2. 권한 요청:\n\n미디어 라이브러리 권한: 미디어 라이브러리에 액세스하기 위한 권한을 요청합니다 (ImagePicker.requestMediaLibraryPermissionsAsync()). 이것은 앱이 기기에 저장된 사진에 액세스할 수 있도록 하는 데 필요합니다.\n\n카메라 권한: 마찬가지로, 카메라 사용 권한을 요청합니다 (ImagePicker.requestCameraPermissionsAsync()). 이 권한은 앱이 기기의 카메라를 사용하여 새로운 사진을 찍을 수 있도록 해야 합니다.\n\n\n\n3. 권한 상태 처리:\n\n만약 권한이 허용되지 않았을 경우 (상태 !== `granted`), 사용자에게 경고창을 보여줍니다. 이 경고창은 앱이 올바르게 작동하기 위해 이러한 권한이 필요하다는 것을 사용자에게 알리는 간단한 방법입니다.\n\n## 이미지 선택을 위한 pickImage 함수\n\n```js\nconst pickImage = async () => {\n  let result = await ImagePicker.launchImageLibraryAsync({\n    mediaTypes: ImagePicker.MediaTypeOptions.All,\n    allowsEditing: true,\n    aspect: [4, 3],\n    quality: 1,\n  });\n\n  if (!result.cancelled) {\n    setImage(result.uri);\n  }\n};\n```\n\n\n\n이 함수는 기기의 이미지 라이브러리를 열고 사용자가 이미지를 선택할 수 있도록 담당합니다:\n\n- 이미지 라이브러리 열기: ImagePicker.launchImageLibraryAsync은 이미지 라이브러리를 열어주는 비동기 함수입니다.\n- 구성:\n\n  - mediaTypes: ImagePicker.MediaTypeOptions.All: 이 설정은 사용자가 사진 및 동영상을 포함한 모든 미디어 유형을 선택할 수 있게 합니다.\n  - allowsEditing: true: 사용자는 이미지를 선택하기 전에 (자르기와 같은) 편집할 수 있습니다.\n  - aspect: [4, 3]: 이미지 편집기의 종횡비를 설정합니다.\n  - quality: 1: 선택한 이미지의 품질을 결정합니다. 여기서 1은 최상의 품질을 의미합니다.\n\n3. 선택 처리:\n\n\n\n- 해당 기능은 사용자가 이미지를 선택할 때까지 대기합니다. 이미지를 선택하면 결과 객체에 선택에 관한 세부 정보가 포함됩니다.\n- 작업이 취소되지 않은 경우 (!result.cancelled), 이미지 URI는 setImage(result.uri)를 호출하여 컴포넌트의 상태에 저장됩니다. 그런 다음 이 URI를 사용하여 이미지를 표시하거나 서버에 업로드할 수 있습니다.\n\n# 결론\n\nExpo의 Image Picker를 React Native 앱에 통합하면 사용자 경험을 향상시키는 강력한 방법을 시연합니다. 권한을 책임 있게 처리하고 이미지 선택 및 편집을 가능하게 함으로써, 이 앱은 사용자의 개인 정보를 존중할 뿐만 아니라 개인화되고 대화식인 접촉을 제공합니다. 이 기능은 현대적인 모바일 앱에서 중요하며, 사용자 참여를 풍부하게 해주고 앱을 보다 다양하고 사용자 친화적으로 만듭니다\n\nGitHub: https://github.com/sanchit0496/react_native_scaffolding\n\n\n\n# 더 많은 정보를 위해 Sanchit의 LinkedIn을 팔로우해 주세요","ogImage":{"url":"/assets/img/2024-05-12-HowtoUploadFilesFromDeviceinReactNative_0.png"},"coverImage":"/assets/img/2024-05-12-HowtoUploadFilesFromDeviceinReactNative_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>사용자들이 갤러리에서 이미지를 선택할 수 있는 기능을 제공하는 모바일 애플리케이션을 개발 중이신데요, React Native는 expo-image-picker를 통해 이를 쉽게 구현할 수 있어요. 이 라이브러리는 사용자들이 카메라 롤에서 기존 사진을 손쉽게 선택하거나 카메라를 통해 새 이미지를 캡처할 수 있는 기능을 제공합니다.</p>\n<p><img src=\"/assets/img/2024-05-12-HowtoUploadFilesFromDeviceinReactNative_0.png\" alt=\"이미지\"></p>\n<h1>설치</h1>\n<p>시작하기 전에 React Native 프로젝트가 설정되어 있고 Expo와 통합되어 있는지 확인해주세요. Expo는 expo-image-picker 라이브러리를 제공하는데, 이를 통해 기기의 카메라와 사진 라이브러리에 접근할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">npx expo install expo-image-picker\n</code></pre>\n<h1>코드</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Button</span>, <span class=\"hljs-title class_\">View</span>, <span class=\"hljs-title class_\">Image</span>, <span class=\"hljs-title class_\">Platform</span>, <span class=\"hljs-title class_\">StyleSheet</span>, <span class=\"hljs-title class_\">Text</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">ImagePicker</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'expo-image-picker'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Pressable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ImagePickerScreen</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [image, setImage] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    (<span class=\"hljs-keyword\">async</span> () => {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Platform</span>.<span class=\"hljs-property\">OS</span> !== <span class=\"hljs-string\">'web'</span>) {\n        <span class=\"hljs-keyword\">const</span> libraryStatus = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">ImagePicker</span>.<span class=\"hljs-title function_\">requestMediaLibraryPermissionsAsync</span>();\n        <span class=\"hljs-keyword\">if</span> (libraryStatus.<span class=\"hljs-property\">status</span> !== <span class=\"hljs-string\">'granted'</span>) {\n          <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'죄송합니다. 이 기능을 사용하려면 카메라 롤 권한이 필요합니다.'</span>);\n        }\n\n        <span class=\"hljs-keyword\">const</span> cameraStatus = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">ImagePicker</span>.<span class=\"hljs-title function_\">requestCameraPermissionsAsync</span>();\n        <span class=\"hljs-keyword\">if</span> (cameraStatus.<span class=\"hljs-property\">status</span> !== <span class=\"hljs-string\">'granted'</span>) {\n          <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'죄송합니다. 이 기능을 사용하려면 카메라 권한이 필요합니다.'</span>);\n        }\n      }\n    })();\n  }, []);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">pickImage</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">ImagePicker</span>.<span class=\"hljs-title function_\">launchImageLibraryAsync</span>({\n      <span class=\"hljs-attr\">mediaTypes</span>: <span class=\"hljs-title class_\">ImagePicker</span>.<span class=\"hljs-property\">MediaTypeOptions</span>.<span class=\"hljs-property\">All</span>,\n      <span class=\"hljs-attr\">allowsEditing</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">aspect</span>: [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>],\n      <span class=\"hljs-attr\">quality</span>: <span class=\"hljs-number\">1</span>,\n    });\n\n    <span class=\"hljs-keyword\">if</span> (!result.<span class=\"hljs-property\">cancelled</span>) {\n      <span class=\"hljs-title function_\">setImage</span>(result.<span class=\"hljs-property\">uri</span>);\n    }\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">View</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.container}</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"카메라 롤에서 이미지 선택\"</span> <span class=\"hljs-attr\">onPress</span>=<span class=\"hljs-string\">{pickImage}</span> /></span>\n      {image &#x26;&#x26; <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Image</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-attr\">image</span> }} <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.image}</span> /></span>}\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Pressable</span> <span class=\"hljs-attr\">onPress</span>=<span class=\"hljs-string\">{navigateProfile}</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Text</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">fontSize:</span> <span class=\"hljs-attr\">18</span>, <span class=\"hljs-attr\">marginBottom:</span> <span class=\"hljs-attr\">10</span>, <span class=\"hljs-attr\">color:</span> '#<span class=\"hljs-attr\">003F5C</span>', <span class=\"hljs-attr\">padding:</span> <span class=\"hljs-attr\">25</span> }}></span>프로필로 이동<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Text</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Pressable</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">View</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ImagePickerScreen</span>;\n\n<span class=\"hljs-keyword\">const</span> styles = <span class=\"hljs-title class_\">StyleSheet</span>.<span class=\"hljs-title function_\">create</span>({\n  <span class=\"hljs-attr\">container</span>: {\n    <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">alignItems</span>: <span class=\"hljs-string\">'center'</span>,\n    <span class=\"hljs-attr\">justifyContent</span>: <span class=\"hljs-string\">'center'</span>,\n  },\n  <span class=\"hljs-attr\">image</span>: {\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n    <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n    <span class=\"hljs-attr\">marginTop</span>: <span class=\"hljs-number\">20</span>,\n  },\n});\n</code></pre>\n<h1>코드 설명</h1>\n<pre><code>\n\n\n이제 코드를 분해하여 각 부분을 이해해 봅시다.\n\n## 필요한 모듈 가져오기\n\n```js\nimport React, { useEffect, useState } from 'react';\nimport { Button, View, Image, Platform, StyleSheet, Text } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useNavigation } from '@react-navigation/native';\nimport { Pressable } from 'react-native';\n</code></pre>\n<p>이 섹션에서는 다음을 가져옵니다:</p>\n<ul>\n<li>기본 기능과 렌더링을 위한 React 훅과 컴포넌트를 사용합니다.</li>\n<li>이미지 선택을 처리하기 위해 expo-image-picker의 ImagePicker를 사용합니다.</li>\n<li>화면 전환을 위한 네비게이션 도구를 사용합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ImagePickerScreen</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [image, setImage] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> navigation = <span class=\"hljs-title function_\">useNavigation</span>();\n  ...\n};\n</code></pre>\n<p>여기서:</p>\n<ul>\n<li>ImagePickerScreen 함수형 컴포넌트를 정의합니다.</li>\n<li>선택한 이미지를 관리하기 위해 useState를 사용합니다.</li>\n<li>네비게이션을 설정합니다.</li>\n</ul>\n<h2>권한을 위한 useEffect 훅</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n  (<span class=\"hljs-keyword\">async</span> () => {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Platform</span>.<span class=\"hljs-property\">OS</span> !== <span class=\"hljs-string\">'web'</span>) {\n      <span class=\"hljs-keyword\">const</span> libraryStatus = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">ImagePicker</span>.<span class=\"hljs-title function_\">requestMediaLibraryPermissionsAsync</span>();\n      <span class=\"hljs-keyword\">if</span> (libraryStatus.<span class=\"hljs-property\">status</span> !== <span class=\"hljs-string\">'granted'</span>) {\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'죄송합니다, 이 기능을 사용하려면 사진 라이브러리 권한이 필요합니다!'</span>);\n      }\n\n      <span class=\"hljs-keyword\">const</span> cameraStatus = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">ImagePicker</span>.<span class=\"hljs-title function_\">requestCameraPermissionsAsync</span>();\n      <span class=\"hljs-keyword\">if</span> (cameraStatus.<span class=\"hljs-property\">status</span> !== <span class=\"hljs-string\">'granted'</span>) {\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'죄송합니다, 이 기능을 사용하려면 카메라 권한이 필요합니다!'</span>);\n      }\n    }\n  })();\n}, []);\n</code></pre>\n<p>이 코드 블록은 컴포넌트가 마운트된 후 실행되는 useEffect 훅을 사용하고 있습니다:</p>\n<ul>\n<li>플랫폼 확인:</li>\n</ul>\n<p>먼저 플랫폼이 웹 브라우저가 아닌지 확인합니다 (Platform.OS !== <code>web</code>). 이것은 권한 처리가 일반적으로 모바일 기기 관련 문제이므로 웹 플랫폼에는 적용되지 않기 때문에 중요합니다.</p>\n<ol start=\"2\">\n<li>권한 요청:</li>\n</ol>\n<p>미디어 라이브러리 권한: 미디어 라이브러리에 액세스하기 위한 권한을 요청합니다 (ImagePicker.requestMediaLibraryPermissionsAsync()). 이것은 앱이 기기에 저장된 사진에 액세스할 수 있도록 하는 데 필요합니다.</p>\n<p>카메라 권한: 마찬가지로, 카메라 사용 권한을 요청합니다 (ImagePicker.requestCameraPermissionsAsync()). 이 권한은 앱이 기기의 카메라를 사용하여 새로운 사진을 찍을 수 있도록 해야 합니다.</p>\n<ol start=\"3\">\n<li>권한 상태 처리:</li>\n</ol>\n<p>만약 권한이 허용되지 않았을 경우 (상태 !== <code>granted</code>), 사용자에게 경고창을 보여줍니다. 이 경고창은 앱이 올바르게 작동하기 위해 이러한 권한이 필요하다는 것을 사용자에게 알리는 간단한 방법입니다.</p>\n<h2>이미지 선택을 위한 pickImage 함수</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">pickImage</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">ImagePicker</span>.<span class=\"hljs-title function_\">launchImageLibraryAsync</span>({\n    <span class=\"hljs-attr\">mediaTypes</span>: <span class=\"hljs-title class_\">ImagePicker</span>.<span class=\"hljs-property\">MediaTypeOptions</span>.<span class=\"hljs-property\">All</span>,\n    <span class=\"hljs-attr\">allowsEditing</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">aspect</span>: [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>],\n    <span class=\"hljs-attr\">quality</span>: <span class=\"hljs-number\">1</span>,\n  });\n\n  <span class=\"hljs-keyword\">if</span> (!result.<span class=\"hljs-property\">cancelled</span>) {\n    <span class=\"hljs-title function_\">setImage</span>(result.<span class=\"hljs-property\">uri</span>);\n  }\n};\n</code></pre>\n<p>이 함수는 기기의 이미지 라이브러리를 열고 사용자가 이미지를 선택할 수 있도록 담당합니다:</p>\n<ul>\n<li>\n<p>이미지 라이브러리 열기: ImagePicker.launchImageLibraryAsync은 이미지 라이브러리를 열어주는 비동기 함수입니다.</p>\n</li>\n<li>\n<p>구성:</p>\n<ul>\n<li>mediaTypes: ImagePicker.MediaTypeOptions.All: 이 설정은 사용자가 사진 및 동영상을 포함한 모든 미디어 유형을 선택할 수 있게 합니다.</li>\n<li>allowsEditing: true: 사용자는 이미지를 선택하기 전에 (자르기와 같은) 편집할 수 있습니다.</li>\n<li>aspect: [4, 3]: 이미지 편집기의 종횡비를 설정합니다.</li>\n<li>quality: 1: 선택한 이미지의 품질을 결정합니다. 여기서 1은 최상의 품질을 의미합니다.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>선택 처리:</li>\n</ol>\n<ul>\n<li>해당 기능은 사용자가 이미지를 선택할 때까지 대기합니다. 이미지를 선택하면 결과 객체에 선택에 관한 세부 정보가 포함됩니다.</li>\n<li>작업이 취소되지 않은 경우 (!result.cancelled), 이미지 URI는 setImage(result.uri)를 호출하여 컴포넌트의 상태에 저장됩니다. 그런 다음 이 URI를 사용하여 이미지를 표시하거나 서버에 업로드할 수 있습니다.</li>\n</ul>\n<h1>결론</h1>\n<p>Expo의 Image Picker를 React Native 앱에 통합하면 사용자 경험을 향상시키는 강력한 방법을 시연합니다. 권한을 책임 있게 처리하고 이미지 선택 및 편집을 가능하게 함으로써, 이 앱은 사용자의 개인 정보를 존중할 뿐만 아니라 개인화되고 대화식인 접촉을 제공합니다. 이 기능은 현대적인 모바일 앱에서 중요하며, 사용자 참여를 풍부하게 해주고 앱을 보다 다양하고 사용자 친화적으로 만듭니다</p>\n<p>GitHub: <a href=\"https://github.com/sanchit0496/react_native_scaffolding\" rel=\"nofollow\" target=\"_blank\">https://github.com/sanchit0496/react_native_scaffolding</a></p>\n<h1>더 많은 정보를 위해 Sanchit의 LinkedIn을 팔로우해 주세요</h1>\n</body>\n</html>\n"},"__N_SSG":true}