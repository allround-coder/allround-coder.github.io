{"pageProps":{"post":{"title":"한국어 Axios 인터셉터란 무엇인가요","description":"","date":"2024-05-14 12:08","slug":"2024-05-14-ENWhatareAxiosInterceptors","content":"\n\n![Axios Interceptors](/assets/img/2024-05-14-ENWhatareAxiosInterceptors_0.png)\n\n인터셉터란 무엇인가요?\n인터셉터는 프로그램의 기능을 확장하거나 수정하는 데 사용되는 디자인 패턴입니다. Axios에서 인터셉터는 HTTP 요청과 응답을 처리하는 데 사용되는 특별한 함수입니다. 요청 인터셉터를 사용하면 요청을 보내기 전에 작업을 수행할 수 있고, 응답 인터셉터는 서버에서 반환된 응답에 작업을 수행할 수 있습니다.\n\nAxios 인터셉터를 사용해야 하는 이유는 무엇인가요?\n\n- 재사용성과 모듈성.\n- 오류 처리 용이성.\n- 보안 제어 및 인가 유효성 검사 프로세스 용이성.\n- 네트워크 문제 처리.\n- 사용 편의성과 유연성.\n- 성능 및 최적화.\n\n\n\nAxios Interceptors의 사용법\n간단한 사용법을 가지고 있고 Axios 내에서 추가 설정이 필요하지 않아 장점을 제공합니다.\n\n```js\nconst axiosInstance = axios.create({\n  baseURL: 'https://api.example.com',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': null\n  }\n});\n\naxiosInstance.interceptors.request.use(\n  function (config) {\n    // 요청을 보내기 전 수행할 작업\n    console.log('요청을 보냅니다:', config);\n    \n    // 예를 들어, 각 요청에 세션 식별자를 추가할 수 있습니다.\n    const accessToken = localStorage.getItem('accessToken');\n    if (accessToken) {\n      config.headers.Authorization = `Bearer ${accessToken}`;\n    }\n\n    return config;\n  }, \n  function (error) {\n    // 요청 오류 발생 시 수행할 작업\n    console.error('요청 오류:', error);\n    return Promise.reject(error);\n  }\n);\n\naxiosInstance.interceptors.response.use(\n  function (response) {\n    // 응답이 성공했을 때 수행할 작업\n    console.log('응답:', response.data);\n    return response;\n  },\n  function (error) {\n    // 응답 오류 발생 시 수행할 작업\n    console.error('응답 오류:', error);\n    \n    // 예를 들어, 401 (Unauthorized) 오류 발생 시 세션이 만료된 것으로 가정할 수 있습니다.\n    if (error.response.status === 401) {\n      // 세션 새로 고침이나 로그인 페이지로 리다이렉트하는 등의 작업 수행 가능\n      console.log('세션이 만료되었습니다. 리다이렉트 중...');\n      // 예를 들어, 사용자를 로그인 페이지로 리다이렉트:\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 예시 요청\n\naxiosInstance.get('/data')\n  .then(response => {\n    console.log('응답:', response.data);\n  })\n  .catch(error => {\n    console.error('오류:', error);\n  });\n\naxiosInstance.post('/post-data', {\n  // 전송할 데이터\n  firstName: 'John',\n  lastName: 'Doe'\n})\n.then(response => {\n  console.log('응답:', response.data);\n})\n.catch(error => {\n  console.error('오류:', error);\n});\n```\n\n🚀🚀 이 예시처럼 들어오는 오류를 잡아 사용자에게 반환하거나 페이지 간에 리다이렉트할 수 있습니다.\n콘솔에서 각 요청의 오류와 본문을 쉽게 보고 조치할 수 있습니다.\n\n<img src=\"/assets/img/2024-05-14-ENWhatareAxiosInterceptors_1.png\" />\n\n\n\n### 이전 게시물","ogImage":{"url":"/assets/img/2024-05-14-ENWhatareAxiosInterceptors_0.png"},"coverImage":"/assets/img/2024-05-14-ENWhatareAxiosInterceptors_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-14-ENWhatareAxiosInterceptors_0.png\" alt=\"Axios Interceptors\"></p>\n<p>인터셉터란 무엇인가요?\n인터셉터는 프로그램의 기능을 확장하거나 수정하는 데 사용되는 디자인 패턴입니다. Axios에서 인터셉터는 HTTP 요청과 응답을 처리하는 데 사용되는 특별한 함수입니다. 요청 인터셉터를 사용하면 요청을 보내기 전에 작업을 수행할 수 있고, 응답 인터셉터는 서버에서 반환된 응답에 작업을 수행할 수 있습니다.</p>\n<p>Axios 인터셉터를 사용해야 하는 이유는 무엇인가요?</p>\n<ul>\n<li>재사용성과 모듈성.</li>\n<li>오류 처리 용이성.</li>\n<li>보안 제어 및 인가 유효성 검사 프로세스 용이성.</li>\n<li>네트워크 문제 처리.</li>\n<li>사용 편의성과 유연성.</li>\n<li>성능 및 최적화.</li>\n</ul>\n<p>Axios Interceptors의 사용법\n간단한 사용법을 가지고 있고 Axios 내에서 추가 설정이 필요하지 않아 장점을 제공합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> axiosInstance = axios.<span class=\"hljs-title function_\">create</span>({\n  <span class=\"hljs-attr\">baseURL</span>: <span class=\"hljs-string\">'https://api.example.com'</span>,\n  <span class=\"hljs-attr\">headers</span>: {\n    <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>,\n    <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-literal\">null</span>\n  }\n});\n\naxiosInstance.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">use</span>(\n  <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">config</span>) {\n    <span class=\"hljs-comment\">// 요청을 보내기 전 수행할 작업</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'요청을 보냅니다:'</span>, config);\n    \n    <span class=\"hljs-comment\">// 예를 들어, 각 요청에 세션 식별자를 추가할 수 있습니다.</span>\n    <span class=\"hljs-keyword\">const</span> accessToken = <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">'accessToken'</span>);\n    <span class=\"hljs-keyword\">if</span> (accessToken) {\n      config.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">Authorization</span> = <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${accessToken}</span>`</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> config;\n  }, \n  <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) {\n    <span class=\"hljs-comment\">// 요청 오류 발생 시 수행할 작업</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'요청 오류:'</span>, error);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">reject</span>(error);\n  }\n);\n\naxiosInstance.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">use</span>(\n  <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) {\n    <span class=\"hljs-comment\">// 응답이 성공했을 때 수행할 작업</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'응답:'</span>, response.<span class=\"hljs-property\">data</span>);\n    <span class=\"hljs-keyword\">return</span> response;\n  },\n  <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) {\n    <span class=\"hljs-comment\">// 응답 오류 발생 시 수행할 작업</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'응답 오류:'</span>, error);\n    \n    <span class=\"hljs-comment\">// 예를 들어, 401 (Unauthorized) 오류 발생 시 세션이 만료된 것으로 가정할 수 있습니다.</span>\n    <span class=\"hljs-keyword\">if</span> (error.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">status</span> === <span class=\"hljs-number\">401</span>) {\n      <span class=\"hljs-comment\">// 세션 새로 고침이나 로그인 페이지로 리다이렉트하는 등의 작업 수행 가능</span>\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'세션이 만료되었습니다. 리다이렉트 중...'</span>);\n      <span class=\"hljs-comment\">// 예를 들어, 사용자를 로그인 페이지로 리다이렉트:</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">reject</span>(error);\n  }\n);\n\n<span class=\"hljs-comment\">// 예시 요청</span>\n\naxiosInstance.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/data'</span>)\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'응답:'</span>, response.<span class=\"hljs-property\">data</span>);\n  })\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'오류:'</span>, error);\n  });\n\naxiosInstance.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/post-data'</span>, {\n  <span class=\"hljs-comment\">// 전송할 데이터</span>\n  <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'John'</span>,\n  <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>\n})\n.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'응답:'</span>, response.<span class=\"hljs-property\">data</span>);\n})\n.<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'오류:'</span>, error);\n});\n</code></pre>\n<p>🚀🚀 이 예시처럼 들어오는 오류를 잡아 사용자에게 반환하거나 페이지 간에 리다이렉트할 수 있습니다.\n콘솔에서 각 요청의 오류와 본문을 쉽게 보고 조치할 수 있습니다.</p>\n<h3>이전 게시물</h3>\n</body>\n</html>\n"},"__N_SSG":true}