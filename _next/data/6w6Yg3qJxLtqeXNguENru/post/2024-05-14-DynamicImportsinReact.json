{"pageProps":{"post":{"title":"리액트에서의 동적 임포트","description":"","date":"2024-05-14 15:30","slug":"2024-05-14-DynamicImportsinReact","content":"\n\n![Dynamic Imports in React](/assets/img/2024-05-14-DynamicImportsinReact_0.png)\n\nReact에서의 동적 가져오기는 런타임에서 JavaScript 모듈을 동적으로로드할 수 있게 해줍니다. 이는 응용 프로그램의 성능과로드 시간을 크게 향상시킬 수 있습니다. 이 기술은 코드 분할 및 지연 로드에 특히 유용하며 필요할 때만 필요한 코드를로드합니다.\n\nimport() 함수는 사용하고자하는 동적 가져오기 모듈로 해결되는 Promise를 반환합니다.\n\nJavaScript의 일반적인 import문(import 문을 사용)은 Promise를 반환하지 않습니다. 동기 작업이므로 가져온 모듈에서 내보낸 값을 반환합니다.\n\n\n\n```js\r\nimport React from 'react';\n\nconst AnotherComponent = () => {\n  return <div>다른 컴포넌트가 동적으로 로드되었습니다!</div>;\n};\n\nexport default AnotherComponent;\r\n```\n\n```js\r\nconst MyComponent = () => {\n  const [importedComponent, setImportedComponent] = useState(null);\n\n  useEffect(() => {\n    const importComponent = async () => {\n      const module = await import('./AnotherComponent');\n      const AnotherComponent = module.default;\n      setImportedComponent(<AnotherComponent />);\n    };\n\n    importComponent();\n  }, []);\n\n  return (\n    <div>\n      {importedComponent}\n      <div>이것은 내 기능적인 컴포넌트입니다!</div>\n    </div>\n  );\n};\n\n///다른 방법은 ...///\nconst MyComponent = async () => {\n  const module = import('./AnotherComponent');\n  const {AnotherComponent} = await module;\n  return <AnotherComponent />;\n};\n\nexport default MyComponent;\n\n// 콘솔에서 내보낸 모듈을 확인할 때 { default: \"\"}는 모든 함수 이름을 키로 하고 \n// 값으로 정의를 포함하며, default 키가 있으면 default로 가져온 것이 값이 되고, \n// 그렇지 않으면 정의가 없는 것이 됩니다.\r\n```\n\n## 동적 가져오기를 언제 사용해야 할까요?\n\n동적 가져오기는 React 애플리케이션의 성능을 향상시키는 좋은 방법이지만, React 앱에서 동적 가져오기를 사용하는 더 좋은 사용 사례가 있습니다.\n\n\n\n- 코드 모듈화: 동적 가져오기는 코드 모듈화와 서버에서 데이터를 가져올 필요가 있을 때 사용할 수 있습니다. 예를 들어 서버 측 렌더링 애플리케이션에서 이를 사용할 수 있습니다.\n- 애플리케이션이 아직 로딩 중인 경우 컴포넌트가 필요하지 않을 때 동적 가져오기를 사용할 수 있습니다.\n- 조건부 가져오기는 동적 가져오기에 대한 우수한 사용 사례입니다. 여기서 모듈 또는 컴포넌트는 필요한 페이지에서만 가져오며 애플리케이션에서 필요한 경우에만 가져옵니다.\n\n## React.lazy()\n\nReact.lazy() 함수를 사용하면 동적 가져오기를 일반 컴포넌트로 렌더링할 수 있습니다. 기본적으로 React.lazy()는 동적 가져오기를 호출하고 프로미스를 반환합니다.\n\n```js\nimport React, { lazy } from \"react\";\nconst Blog = React.lazy(() => \n  import('./Pages/Blog'));\n```\n\n\n\n# React.Suspense()\n\nReact.Suspense는 React 개발자가 React 컴포넌트의 렌더링을 로드될 때까지 중단시킬 수 있게 합니다. React.Suspense는 JSX 코드 조각 또는 React 컴포넌트인 React 요소를 허용하는 fallback 속성을 제공합니다.\n\nReact 동적 임포트를 이용해 페이지를 방문하는 사용자들은 종종 빈 페이지 화면을 경험합니다. 이는 애플리케이션이 모듈을 로드하는 동안 수행되며, 일부 사용자는 느린 인터넷 연결로 인해 오류가 발생할 수도 있습니다. React.lazy()와 React.Suspense를 결합하여 이 문제를 해결할 수 있습니다.\n\n이를 위해 React.Suspense를 사용하여 모든 종속성이 지연 로드될 때까지 컴포넌트의 렌더링을 중단하고, React.Suspense는 사용자를 위한 대체 UI를 표시할 것입니다.\n\n\n\n```js\nimport React, { Suspense } from 'react';\n\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\n\nconst App = () => {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <LazyComponent />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n알고 싶은 내용이 있다면 구독, 박수, 좋아요 및 공유하세요. 건배!","ogImage":{"url":"/assets/img/2024-05-14-DynamicImportsinReact_0.png"},"coverImage":"/assets/img/2024-05-14-DynamicImportsinReact_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-14-DynamicImportsinReact_0.png\" alt=\"Dynamic Imports in React\"></p>\n<p>React에서의 동적 가져오기는 런타임에서 JavaScript 모듈을 동적으로로드할 수 있게 해줍니다. 이는 응용 프로그램의 성능과로드 시간을 크게 향상시킬 수 있습니다. 이 기술은 코드 분할 및 지연 로드에 특히 유용하며 필요할 때만 필요한 코드를로드합니다.</p>\n<p>import() 함수는 사용하고자하는 동적 가져오기 모듈로 해결되는 Promise를 반환합니다.</p>\n<p>JavaScript의 일반적인 import문(import 문을 사용)은 Promise를 반환하지 않습니다. 동기 작업이므로 가져온 모듈에서 내보낸 값을 반환합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">AnotherComponent</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>다른 컴포넌트가 동적으로 로드되었습니다!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">AnotherComponent</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">MyComponent</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [importedComponent, setImportedComponent] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">importComponent</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable language_\">module</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./AnotherComponent'</span>);\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">AnotherComponent</span> = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">default</span>;\n      <span class=\"hljs-title function_\">setImportedComponent</span>(<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">AnotherComponent</span> /></span></span>);\n    };\n\n    importComponent();\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      {importedComponent}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>이것은 내 기능적인 컴포넌트입니다!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-comment\">///다른 방법은 ...///</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">MyComponent</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable language_\">module</span> = <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./AnotherComponent'</span>);\n  <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-title class_\">AnotherComponent</span>} = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">module</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">AnotherComponent</span> /></span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">MyComponent</span>;\n\n<span class=\"hljs-comment\">// 콘솔에서 내보낸 모듈을 확인할 때 { default: \"\"}는 모든 함수 이름을 키로 하고 </span>\n<span class=\"hljs-comment\">// 값으로 정의를 포함하며, default 키가 있으면 default로 가져온 것이 값이 되고, </span>\n<span class=\"hljs-comment\">// 그렇지 않으면 정의가 없는 것이 됩니다.</span>\n</code></pre>\n<h2>동적 가져오기를 언제 사용해야 할까요?</h2>\n<p>동적 가져오기는 React 애플리케이션의 성능을 향상시키는 좋은 방법이지만, React 앱에서 동적 가져오기를 사용하는 더 좋은 사용 사례가 있습니다.</p>\n<ul>\n<li>코드 모듈화: 동적 가져오기는 코드 모듈화와 서버에서 데이터를 가져올 필요가 있을 때 사용할 수 있습니다. 예를 들어 서버 측 렌더링 애플리케이션에서 이를 사용할 수 있습니다.</li>\n<li>애플리케이션이 아직 로딩 중인 경우 컴포넌트가 필요하지 않을 때 동적 가져오기를 사용할 수 있습니다.</li>\n<li>조건부 가져오기는 동적 가져오기에 대한 우수한 사용 사례입니다. 여기서 모듈 또는 컴포넌트는 필요한 페이지에서만 가져오며 애플리케이션에서 필요한 경우에만 가져옵니다.</li>\n</ul>\n<h2>React.lazy()</h2>\n<p>React.lazy() 함수를 사용하면 동적 가져오기를 일반 컴포넌트로 렌더링할 수 있습니다. 기본적으로 React.lazy()는 동적 가져오기를 호출하고 프로미스를 반환합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { lazy } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Blog</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">lazy</span>(<span class=\"hljs-function\">() =></span> \n  <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./Pages/Blog'</span>));\n</code></pre>\n<h1>React.Suspense()</h1>\n<p>React.Suspense는 React 개발자가 React 컴포넌트의 렌더링을 로드될 때까지 중단시킬 수 있게 합니다. React.Suspense는 JSX 코드 조각 또는 React 컴포넌트인 React 요소를 허용하는 fallback 속성을 제공합니다.</p>\n<p>React 동적 임포트를 이용해 페이지를 방문하는 사용자들은 종종 빈 페이지 화면을 경험합니다. 이는 애플리케이션이 모듈을 로드하는 동안 수행되며, 일부 사용자는 느린 인터넷 연결로 인해 오류가 발생할 수도 있습니다. React.lazy()와 React.Suspense를 결합하여 이 문제를 해결할 수 있습니다.</p>\n<p>이를 위해 React.Suspense를 사용하여 모든 종속성이 지연 로드될 때까지 컴포넌트의 렌더링을 중단하고, React.Suspense는 사용자를 위한 대체 UI를 표시할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { <span class=\"hljs-title class_\">Suspense</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">LazyComponent</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">lazy</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./LazyComponent'</span>));\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">div</span>></span>Loading...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>}>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">LazyComponent</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Suspense</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>알고 싶은 내용이 있다면 구독, 박수, 좋아요 및 공유하세요. 건배!</p>\n</body>\n</html>\n"},"__N_SSG":true}