{"pageProps":{"post":{"title":"로컬 Gemma 모델과 연결하는 LM Studio를 통한 간단한 React 앱 UI","description":"","date":"2024-05-14 12:04","slug":"2024-05-14-SimpleReactAppUItoConnectwithLocalGemmaModelviaLMStudio","content":"\n\n로컬 데이터를 Gemma를 통해 LM Studio로 처리함으로써 정보를 외부 서버로 보내지 않고 제어할 수 있습니다. 이 방식은 민감한 문서나 개인 데이터를 다룰 때 데이터 개인 정보 보호와 보안을 보장합니다. 이 기사에서는 로컬 LLM과 상호작용하기 위해 간단한 React 앱 GUI를 사용하는 방법을 살펴보겠습니다.\n\nLM Studio 및 Gemma 모델 설치\n\n```js\nhttps://lmstudio.ai/\n```\n\nWindows / Linux / Mac 버전을 다운로드하세요.\n\n\n\n![이미지](/assets/img/2024-05-14-SimpleReactAppUItoConnectwithLocalGemmaModelviaLMStudio_0.png)\n\n이제 노트북/PC/서버에 적합한 모델을 찾아보세요.\n\n우리는 Gemma Model을 사용하고 있습니다. 이는 기계 학습에 경험이 제한된 개발자들에게도 쉽게 사용할 수 있습니다. 그들의 가벼운 특성은 접근성이 높고 사용하기 편리합니다.\n\n![이미지](/assets/img/2024-05-14-SimpleReactAppUItoConnectwithLocalGemmaModelviaLMStudio_1.png)\n\n\n\n다운로드 후에는 왼쪽 메뉴에서이 모델을 로컬 서버에서 제공하는 옵션을 찾을 수 있습니다. 선택한 후 위쪽 드롭다운에서 사용 가능한 로컬 모델 목록을 선택하고 \"서버 시작\"을 클릭할 수 있습니다. 오른쪽 메뉴에서는 로컬 모델의 설정을 사용자 정의할 수 있습니다. 샘플 코드 섹션에서 API Curl 명령을 볼 수 있습니다. 로컬호스트 URL 및 API의 매개변수가 표시됩니다.\n\n![이미지](/assets/img/2024-05-14-SimpleReactAppUItoConnectwithLocalGemmaModelviaLMStudio_2.png)\n\n이제 LM Studio 설정이 완료되었으며 Gemma 모델이 로컬 API로 이용 가능해졌습니다.\n\n간단한 React App GUI를 작성하여 Gemma 모델의 로컬 LM Studio API와 상호 작용해 보겠습니다. 나중에 이 코드를 사용하여 직접 응용 프로그램에서 사용할 수 있습니다.\n\n\n\nReact GUI\n\n설정\n\n여기서는 React 앱에 Vite를 사용하고 있습니다.\n\n```js\nnpm create vite@latest\n```\n\n\n\n프롬프트 메뉴에서 Framework를 React로, Variant를 Javascript로 선택하고 해당 디렉토리로 이동하여 설치하세요.\n\n```js\nnpm install\n```\n\n앱을 미리 보기하려면 다음을 실행하세요.\n\n```js\nnpm run dev\n```\n\n\n\n웹 브라우저를 열고 http://localhost:5173/ 로 이동하세요.\n\n무료 사이트에서 lens.png 및 loading.gif 두 개의 이미지를 다운로드하여 assets 디렉토리에 추가하세요.\n\n이제 아래 코드를 사용하여 3개 파일을 업데이트하세요.\n\nApp.jsx\n\n\n\n```js\nimport { useState, useEffect } from 'react'\nimport reactLogo from './assets/react.svg'\nimport viteLogo from '/vite.svg'\nimport './App.css'\nimport lens from \"./assets/lens.png\";\nimport loadingGif from \"./assets/loading.gif\";\n\nfunction App() {\n\n  const [prompt, updatePrompt] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n  const [answer, setAnswer] = useState(undefined);\n\n  useEffect(() => {\n    if (prompt != null && prompt.trim() === \"\") {\n      setAnswer(undefined);\n    }\n  }, [prompt]);\n\n  const sendPrompt = async (event) => {\n    if (event.key !== \"Enter\") {\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(\n          \n          { \n            model: \"lmstudio-ai/gemma-2b-it-GGUF\", \n            temperature : 0.7,\n            max_tokens : -1,\n            messages: [ { role : \"user\", content : `${prompt}` },] \n          },\n        ),\n      };\n\n      const res = await fetch(\"/api/v1/chat/completions\", requestOptions);\n  \n      if (!res.ok) {\n        throw new Error(\"Something went wrong\");\n      }\n      const testresp = await res.json();\n      console.log(testresp.choices[0].message.content);\n      setAnswer(testresp.choices[0].message.content);\n\n    } catch (err) {\n      console.error(err, \"err\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <a href=\"https://vitejs.dev\" target=\"_blank\">\n          <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" />\n        </a>\n        <a href=\"https://react.dev\" target=\"_blank\">\n          <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n        </a>\n      </div>\n      <h1>React Chat LLM UI</h1>\n      <input\n            type=\"text\"\n            className=\"searchlight__input\"\n            placeholder=\"Ask me anything and press enter...\"\n            disabled={loading}\n            style={\n              backgroundImage: loading ? `url(${loadingGif})` : `url(${lens})`,\n            }\n            onChange={(e) => updatePrompt(e.target.value)}\n            onKeyDown={(e) => sendPrompt(e)}\n          />\n\n        <div className=\"searchlight__answer\">{answer && <p>{answer}</p>}</div>\n\n    </>\n  )\n}\n\nexport default App\n```\n\nApp.css\n\n아래 코드로 기존의 App.css를 업데이트하세요. 원하시는 대로 사용자 정의할 수 있습니다.\n\n```js\n#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n\n.searchlight__input {\n  display: block;\n  height: 56px;\n  width: 80%;\n  border: 0;\n  border-radius: 12px;\n  outline: none;\n  font-size: 1.2rem;\n  color: #000;\n  background-position: left 17px center;\n  background-repeat: no-repeat;\n  background-color: #fff;\n  background-size: 3.5%;\n  padding-left: 60px;\n}\n\n.searchlight__input::placeholder {\n  line-height: 1.5em;\n}\n\n.searchlight__answer {\n  min-height: 115px;\n  line-height: 1.5em;\n  letter-spacing: 0.1px;\n  padding: 10px 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.searchlight__answer p::after {\n  content: \"\";\n  width: 2px;\n  height: 14px;\n  position: relative;\n  top: 2px;\n  left: 2px;\n  background: black;\n  display: inline-block;\n  animation: cursor-blink 1s steps(2) infinite;\n}\n\n@keyframes cursor-blink {\n  0% {\n    opacity: 0;\n  }\n}\n```\n\n\n\nLM Studio Local API를 호출하기 위해 Gemma를 업데이트하려면 Vite 구성 파일을 수정하십시오.\n\nvite.config.js\n\n```js\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    proxy: {\n      \"/api\": {\n        target: \"http://localhost:1234\",\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/api/, \"\"),\n        onBeforeSend(proxyContext) {\n          const { req, res } = proxyContext;\n          const { url, method, headers, rawBody } = req;\n          return proxyContext;\n        },\n      },\n    },\n  },\n});\n```\n\n샘플 출력:\n\n\n\n![이미지](/assets/img/2024-05-14-SimpleReactAppUItoConnectwithLocalGemmaModelviaLMStudio_3.png)\n\n대체 도구: Ollama는 로컬 서버에서 오픈 소스 모델을 호스팅하는 또 다른 도구입니다.\n\n다음 글에서는 문서를 업로드하고 채팅하는 방법을 알아보겠습니다.\n\n해보고 느낀 점은 댓글로 공유해주세요.","ogImage":{"url":"/assets/img/2024-05-14-SimpleReactAppUItoConnectwithLocalGemmaModelviaLMStudio_0.png"},"coverImage":"/assets/img/2024-05-14-SimpleReactAppUItoConnectwithLocalGemmaModelviaLMStudio_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>로컬 데이터를 Gemma를 통해 LM Studio로 처리함으로써 정보를 외부 서버로 보내지 않고 제어할 수 있습니다. 이 방식은 민감한 문서나 개인 데이터를 다룰 때 데이터 개인 정보 보호와 보안을 보장합니다. 이 기사에서는 로컬 LLM과 상호작용하기 위해 간단한 React 앱 GUI를 사용하는 방법을 살펴보겠습니다.</p>\n<p>LM Studio 및 Gemma 모델 설치</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//lmstudio.ai/</span>\n</code></pre>\n<p>Windows / Linux / Mac 버전을 다운로드하세요.</p>\n<p><img src=\"/assets/img/2024-05-14-SimpleReactAppUItoConnectwithLocalGemmaModelviaLMStudio_0.png\" alt=\"이미지\"></p>\n<p>이제 노트북/PC/서버에 적합한 모델을 찾아보세요.</p>\n<p>우리는 Gemma Model을 사용하고 있습니다. 이는 기계 학습에 경험이 제한된 개발자들에게도 쉽게 사용할 수 있습니다. 그들의 가벼운 특성은 접근성이 높고 사용하기 편리합니다.</p>\n<p><img src=\"/assets/img/2024-05-14-SimpleReactAppUItoConnectwithLocalGemmaModelviaLMStudio_1.png\" alt=\"이미지\"></p>\n<p>다운로드 후에는 왼쪽 메뉴에서이 모델을 로컬 서버에서 제공하는 옵션을 찾을 수 있습니다. 선택한 후 위쪽 드롭다운에서 사용 가능한 로컬 모델 목록을 선택하고 \"서버 시작\"을 클릭할 수 있습니다. 오른쪽 메뉴에서는 로컬 모델의 설정을 사용자 정의할 수 있습니다. 샘플 코드 섹션에서 API Curl 명령을 볼 수 있습니다. 로컬호스트 URL 및 API의 매개변수가 표시됩니다.</p>\n<p><img src=\"/assets/img/2024-05-14-SimpleReactAppUItoConnectwithLocalGemmaModelviaLMStudio_2.png\" alt=\"이미지\"></p>\n<p>이제 LM Studio 설정이 완료되었으며 Gemma 모델이 로컬 API로 이용 가능해졌습니다.</p>\n<p>간단한 React App GUI를 작성하여 Gemma 모델의 로컬 LM Studio API와 상호 작용해 보겠습니다. 나중에 이 코드를 사용하여 직접 응용 프로그램에서 사용할 수 있습니다.</p>\n<p>React GUI</p>\n<p>설정</p>\n<p>여기서는 React 앱에 Vite를 사용하고 있습니다.</p>\n<pre><code class=\"hljs language-js\">npm create vite@latest\n</code></pre>\n<p>프롬프트 메뉴에서 Framework를 React로, Variant를 Javascript로 선택하고 해당 디렉토리로 이동하여 설치하세요.</p>\n<pre><code class=\"hljs language-js\">npm install\n</code></pre>\n<p>앱을 미리 보기하려면 다음을 실행하세요.</p>\n<pre><code class=\"hljs language-js\">npm run dev\n</code></pre>\n<p>웹 브라우저를 열고 <a href=\"http://localhost:5173/\" rel=\"nofollow\" target=\"_blank\">http://localhost:5173/</a> 로 이동하세요.</p>\n<p>무료 사이트에서 lens.png 및 loading.gif 두 개의 이미지를 다운로드하여 assets 디렉토리에 추가하세요.</p>\n<p>이제 아래 코드를 사용하여 3개 파일을 업데이트하세요.</p>\n<p>App.jsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n<span class=\"hljs-keyword\">import</span> reactLogo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./assets/react.svg'</span>\n<span class=\"hljs-keyword\">import</span> viteLogo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'/vite.svg'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>\n<span class=\"hljs-keyword\">import</span> lens <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./assets/lens.png\"</span>;\n<span class=\"hljs-keyword\">import</span> loadingGif <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./assets/loading.gif\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n\n  <span class=\"hljs-keyword\">const</span> [prompt, updatePrompt] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">undefined</span>);\n  <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [answer, setAnswer] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">undefined</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (prompt != <span class=\"hljs-literal\">null</span> &#x26;&#x26; prompt.<span class=\"hljs-title function_\">trim</span>() === <span class=\"hljs-string\">\"\"</span>) {\n      <span class=\"hljs-title function_\">setAnswer</span>(<span class=\"hljs-literal\">undefined</span>);\n    }\n  }, [prompt]);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sendPrompt</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">event</span>) => {\n    <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">key</span> !== <span class=\"hljs-string\">\"Enter\"</span>) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>);\n\n      <span class=\"hljs-keyword\">const</span> requestOptions = {\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"POST\"</span>,\n        <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json\"</span> },\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(\n          \n          { \n            <span class=\"hljs-attr\">model</span>: <span class=\"hljs-string\">\"lmstudio-ai/gemma-2b-it-GGUF\"</span>, \n            temperature : <span class=\"hljs-number\">0.7</span>,\n            max_tokens : -<span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-attr\">messages</span>: [ { role : <span class=\"hljs-string\">\"user\"</span>, content : <span class=\"hljs-string\">`<span class=\"hljs-subst\">${prompt}</span>`</span> },] \n          },\n        ),\n      };\n\n      <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"/api/v1/chat/completions\"</span>, requestOptions);\n  \n      <span class=\"hljs-keyword\">if</span> (!res.<span class=\"hljs-property\">ok</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">\"Something went wrong\"</span>);\n      }\n      <span class=\"hljs-keyword\">const</span> testresp = <span class=\"hljs-keyword\">await</span> res.<span class=\"hljs-title function_\">json</span>();\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(testresp.<span class=\"hljs-property\">choices</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">message</span>.<span class=\"hljs-property\">content</span>);\n      <span class=\"hljs-title function_\">setAnswer</span>(testresp.<span class=\"hljs-property\">choices</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">message</span>.<span class=\"hljs-property\">content</span>);\n\n    } <span class=\"hljs-keyword\">catch</span> (err) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err, <span class=\"hljs-string\">\"err\"</span>);\n    } <span class=\"hljs-keyword\">finally</span> {\n      <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n    }\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://vitejs.dev\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{viteLogo}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"logo\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Vite logo\"</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://react.dev\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{reactLogo}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"logo react\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"React logo\"</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>React Chat LLM UI<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n            <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"searchlight__input\"</span>\n            <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Ask me anything and press enter...\"</span>\n            <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{loading}</span>\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{</span>\n              <span class=\"hljs-attr\">backgroundImage:</span> <span class=\"hljs-attr\">loading</span> ? `<span class=\"hljs-attr\">url</span>(${<span class=\"hljs-attr\">loadingGif</span>})` <span class=\"hljs-attr\">:</span> `<span class=\"hljs-attr\">url</span>(${<span class=\"hljs-attr\">lens</span>})`,\n            }\n            <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> updatePrompt(e.target.value)}\n            onKeyDown={(e) => sendPrompt(e)}\n          />\n\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"searchlight__answer\"</span>></span>{answer &#x26;&#x26; <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{answer}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;/></span></span>\n  )\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>\n</code></pre>\n<p>App.css</p>\n<p>아래 코드로 기존의 App.css를 업데이트하세요. 원하시는 대로 사용자 정의할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">#root {\n  max-<span class=\"hljs-attr\">width</span>: 1280px;\n  <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span> auto;\n  <span class=\"hljs-attr\">padding</span>: 2rem;\n  text-<span class=\"hljs-attr\">align</span>: center;\n}\n\n.<span class=\"hljs-property\">logo</span> {\n  <span class=\"hljs-attr\">height</span>: 6em;\n  <span class=\"hljs-attr\">padding</span>: <span class=\"hljs-number\">1.</span>5em;\n  will-<span class=\"hljs-attr\">change</span>: filter;\n  <span class=\"hljs-attr\">transition</span>: filter 300ms;\n}\n.<span class=\"hljs-property\">logo</span>:hover {\n  <span class=\"hljs-attr\">filter</span>: drop-<span class=\"hljs-title function_\">shadow</span>(<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> 2em #646cffaa);\n}\n.<span class=\"hljs-property\">logo</span>.<span class=\"hljs-property\">react</span>:hover {\n  <span class=\"hljs-attr\">filter</span>: drop-<span class=\"hljs-title function_\">shadow</span>(<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  <span class=\"hljs-keyword\">from</span> {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotate</span>(0deg);\n  }\n  to {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotate</span>(360deg);\n  }\n}\n\n@media (prefers-reduced-<span class=\"hljs-attr\">motion</span>: no-preference) {\n  <span class=\"hljs-attr\">a</span>:nth-<span class=\"hljs-keyword\">of</span>-<span class=\"hljs-title function_\">type</span>(<span class=\"hljs-number\">2</span>) .<span class=\"hljs-property\">logo</span> {\n    <span class=\"hljs-attr\">animation</span>: logo-spin infinite 20s linear;\n  }\n}\n\n.<span class=\"hljs-property\">card</span> {\n  <span class=\"hljs-attr\">padding</span>: 2em;\n}\n\n.<span class=\"hljs-property\">read</span>-the-docs {\n  <span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">888</span>;\n}\n\n.<span class=\"hljs-property\">searchlight__input</span> {\n  <span class=\"hljs-attr\">display</span>: block;\n  <span class=\"hljs-attr\">height</span>: 56px;\n  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">80</span>%;\n  <span class=\"hljs-attr\">border</span>: <span class=\"hljs-number\">0</span>;\n  border-<span class=\"hljs-attr\">radius</span>: 12px;\n  <span class=\"hljs-attr\">outline</span>: none;\n  font-<span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">1.</span>2rem;\n  <span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">000</span>;\n  background-<span class=\"hljs-attr\">position</span>: left 17px center;\n  background-<span class=\"hljs-attr\">repeat</span>: no-repeat;\n  background-<span class=\"hljs-attr\">color</span>: #fff;\n  background-<span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">3.5</span>%;\n  padding-<span class=\"hljs-attr\">left</span>: 60px;\n}\n\n.<span class=\"hljs-property\">searchlight__input</span>::placeholder {\n  line-<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">1.</span>5em;\n}\n\n.<span class=\"hljs-property\">searchlight__answer</span> {\n  min-<span class=\"hljs-attr\">height</span>: 115px;\n  line-<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">1.</span>5em;\n  letter-<span class=\"hljs-attr\">spacing</span>: <span class=\"hljs-number\">0.</span>1px;\n  <span class=\"hljs-attr\">padding</span>: 10px 30px;\n  <span class=\"hljs-attr\">display</span>: flex;\n  align-<span class=\"hljs-attr\">items</span>: center;\n  justify-<span class=\"hljs-attr\">content</span>: center;\n}\n\n.<span class=\"hljs-property\">searchlight__answer</span> <span class=\"hljs-attr\">p</span>::after {\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">\"\"</span>;\n  <span class=\"hljs-attr\">width</span>: 2px;\n  <span class=\"hljs-attr\">height</span>: 14px;\n  <span class=\"hljs-attr\">position</span>: relative;\n  <span class=\"hljs-attr\">top</span>: 2px;\n  <span class=\"hljs-attr\">left</span>: 2px;\n  <span class=\"hljs-attr\">background</span>: black;\n  <span class=\"hljs-attr\">display</span>: inline-block;\n  <span class=\"hljs-attr\">animation</span>: cursor-blink 1s <span class=\"hljs-title function_\">steps</span>(<span class=\"hljs-number\">2</span>) infinite;\n}\n\n@keyframes cursor-blink {\n  <span class=\"hljs-number\">0</span>% {\n    <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0</span>;\n  }\n}\n</code></pre>\n<p>LM Studio Local API를 호출하기 위해 Gemma를 업데이트하려면 Vite 구성 파일을 수정하십시오.</p>\n<p>vite.config.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vite'</span>\n<span class=\"hljs-keyword\">import</span> react <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@vitejs/plugin-react'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-title function_\">react</span>()],\n  <span class=\"hljs-attr\">server</span>: {\n    <span class=\"hljs-attr\">proxy</span>: {\n      <span class=\"hljs-string\">\"/api\"</span>: {\n        <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">\"http://localhost:1234\"</span>,\n        <span class=\"hljs-attr\">changeOrigin</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">rewrite</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">path</span>) =></span> path.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/^\\/api/</span>, <span class=\"hljs-string\">\"\"</span>),\n        <span class=\"hljs-title function_\">onBeforeSend</span>(<span class=\"hljs-params\">proxyContext</span>) {\n          <span class=\"hljs-keyword\">const</span> { req, res } = proxyContext;\n          <span class=\"hljs-keyword\">const</span> { url, method, headers, rawBody } = req;\n          <span class=\"hljs-keyword\">return</span> proxyContext;\n        },\n      },\n    },\n  },\n});\n</code></pre>\n<p>샘플 출력:</p>\n<p><img src=\"/assets/img/2024-05-14-SimpleReactAppUItoConnectwithLocalGemmaModelviaLMStudio_3.png\" alt=\"이미지\"></p>\n<p>대체 도구: Ollama는 로컬 서버에서 오픈 소스 모델을 호스팅하는 또 다른 도구입니다.</p>\n<p>다음 글에서는 문서를 업로드하고 채팅하는 방법을 알아보겠습니다.</p>\n<p>해보고 느낀 점은 댓글로 공유해주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}