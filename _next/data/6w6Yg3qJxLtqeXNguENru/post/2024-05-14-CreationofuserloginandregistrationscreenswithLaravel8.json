{"pageProps":{"post":{"title":"라라벨 8로 사용자 로그인 및 등록 화면 생성","description":"","date":"2024-05-14 15:19","slug":"2024-05-14-CreationofuserloginandregistrationscreenswithLaravel8","content":"\n\nLaravel 8 로그인 및 회원가입 튜토리얼; 이 튜토리얼에서는 라라벨 애플리케이션에서 사용자 지정 인증 로그인 및 회원가입을 생성하는 방법에 대해 설명합니다.\n\n단계 1: 라라벨 애플리케이션 만들기\n단계 2: 데이터베이스 연결\n단계 3: 권한 부여 컨트롤러 설정\n단계 4: 권한 부여 라우트 생성\n단계 5: 권한 부여 블레이드 뷰 파일 생성\n단계 6: 라라벨 개발 서버 실행\n\n단계 1: 라라벨 애플리케이션 만들기\n\n시스템에 이미 Composer를 구성했다고 가정하고, 다음 명령을 실행하여 새 라라벨 애플리케이션을 설치합니다. 그렇지 않은 경우에는 다음 링크에서 다운로드할 수 있습니다.\n\n\n\n```js\ncomposer create-project - prefer-dist laravel/laravel_demo_app\n```\n\n그런 다음, 애플리케이션 폴더로 이동하세요:\n\n```js\ncd laravel_demo_app\n```\n\n단계 2: 데이터베이스에 연결하기\n\n\n\n이제 Laravel 애플리케이션을 데이터베이스에 연결하기 위해 .env 구성 파일에 데이터베이스 이름, 사용자 이름 및 비밀번호를 추가해야 합니다:\n\n```js\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=데이터베이스_이름\nDB_USERNAME=데이터베이스_사용자_이름\nDB_PASSWORD=데이터베이스_비밀번호\n```\n\nLaravel 애플리케이션에는 기본 User 모델과 마이그레이션 파일이 함께 제공됩니다. 데이터베이스에 새 테이블을 만들기 위해 다음 명령을 실행해야 합니다. 따라서 터미널로 이동하여 다음 명령을 실행하세요.\n\n```js\nphp artisan migrate\n```\n\n\n\n3단계: 인가 컨트롤러 설정하기\n\n다음으로, 제안된 명령을 명령 프롬프트에 작성하고 새로운 컨트롤러 파일인 CustomAuthController를 생성하는 명령을 실행하세요.\n\n```js\nphp artisan make:controller CustomAuthController\n```\n\n그런 다음 파일을 열어주세요.\n\n\n\n```plaintext\n`app\\Http\\Controllers\\CustomAuthController.php` 에 위 코드를 주의 깊게 넣어주세요.\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Hash;\nuse Session;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass CustomAuthController extends Controller\n{\n\n    public function index()\n    {\n        return view('auth.login');\n    }\n\n    public function customLogin(Request $request)\n    {\n       $validator =  $request->validate([\n            'email' => 'required',\n            'password' => 'required',\n        ]);\n   \n    \n        $credentials = $request->only('email', 'password');\n        if (Auth::attempt($credentials)) {\n            return redirect()->intended('dashboard')\n                        ->withSuccess('Signed in');\n        }\n        $validator['emailPassword'] = '이메일 주소 또는 비밀번호가 올바르지 않습니다.';\n        return redirect(\"login\")->withErrors($validator);\n    }\n\n\n\n    public function registration()\n    {\n        return view('auth.registration');\n    }\n\n    public function customRegistration(Request $request)\n    {  \n        $request->validate([\n            'name' => 'required',\n            'email' => 'required|email|unique:users',\n            'password' => 'required|min:6',\n        ]);\n           \n        $data = $request->all();\n        $check = $this->create($data);\n         \n        return redirect(\"dashboard\")->withSuccess('가입이 완료되었습니다');\n    }\n\n\n    public function create(array $data)\n    {\n      return User::create([\n        'name' => $data['name'],\n        'email' => $data['email'],\n        'password' => Hash::make($data['password'])\n      ]);\n    }\n\n    public function dashboard()\n    {\n        if(Auth::check()){\n            return view('dashboard');\n        }\n  \n        return redirect(\"login\")->withSuccess('접근 권한이 없습니다');\n    }\n\n    public function signOut() {\n        Session::flush();\n        Auth::logout();\n  \n        return Redirect('login');\n    }\n}\n```\n\nStep 4: 권한 부여 라우트 생성\n\n\n\n\n이 단계에서는 라라벨 애플리케이션에서 사용자 정의 인증을 처리하기 위해 POST 및 GET 방식으로 경로를 생성하는 방법을 설명합니다. route/web.php 파일을 열고 다음 코드를 추가하세요.\n\n```js\n<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\CustomAuthController;\n\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n*/\n\nRoute::get('dashboard', [CustomAuthController::class, 'dashboard']); \nRoute::get('login', [CustomAuthController::class, 'index'])->name('login');\nRoute::post('custom-login', [CustomAuthController::class, 'customLogin'])->name('login.custom'); \nRoute::get('registration', [CustomAuthController::class, 'registration'])->name('register-user');\nRoute::post('custom-registration', [CustomAuthController::class, 'customRegistration'])->name('register.custom'); \nRoute::get('signout', [CustomAuthController::class, 'signOut'])->name('signout');\n```\n\n단계 5: Auth Blade View 파일 생성\n\nResources/views/ 폴더 내에서 auth 폴더를 생성하고 그 안에 new login.blade.php 파일을 만들어 이 파일에 다음 코드를 넣어주세요.\n\n\n\n```js\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<main class=\"login-form\">\n    <div class=\"cotainer\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col-md-4\">\n                <div class=\"card\">\n                    <h3 class=\"card-header text-center\">로그인</h3>\n                    <div class=\"card-body\">\n                        <form method=\"POST\" action=\"{ route('login.custom') }\">\n                            @csrf\n                            <div class=\"form-group mb-3\">\n                                <input type=\"text\" placeholder=\"이메일\" id=\"email\" class=\"form-control\" name=\"email\" required autofocus>\n                            </div>\n\n                            <div class=\"form-group mb-3\">\n                                <input type=\"password\" placeholder=\"비밀번호\" id=\"password\" class=\"form-control\" name=\"password\" required>\n                                @if ($errors->has('emailPassword'))\n                                <span class=\"text-danger\">{ $errors->first('emailPassword') }</span>\n                                @endif\n                            </div>\n\n                            <div class=\"form-group mb-3\">\n                                <div class=\"checkbox\">\n                                    <label>\n                                        <input type=\"checkbox\" name=\"remember\"> 기억하기\n                                    </label>\n                                </div>\n                            </div>\n\n                            <div class=\"d-grid mx-auto\">\n                                <button type=\"submit\" class=\"btn btn-dark btn-block\">로그인</button>\n                            </div>\n                        </form>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</main>\n```\n\nResources/views/auth 폴더로 이동하여 비슷하게 registration.blade.php 파일을 만들고, 이 파일에 다음 코드를 추가해주세요:\n\n```js\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n<main class=\"signup-form\">\n    <div class=\"cotainer\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col-md-4\">\n                <div class=\"card\">\n                    <h3 class=\"card-header text-center\">사용자 등록</h3>\n                    <div class=\"card-body\">\n\n                        <form action=\"{ route('register.custom') }\" method=\"POST\">\n                            @csrf\n                            <div class=\"form-group mb-3\">\n                                <input type=\"text\" placeholder=\"이름\" id=\"name\" class=\"form-control\" name=\"name\"\n                                    required autofocus>\n                                @if ($errors->has('name'))\n                                <span class=\"text-danger\">{ $errors->first('name') }</span>\n                                @endif\n                            </div>\n\n                            <div class=\"form-group mb-3\">\n                                <input type=\"text\" placeholder=\"이메일\" id=\"email_address\" class=\"form-control\"\n                                    name=\"email\" required autofocus>\n                                @if ($errors->has('email'))\n                                <span class=\"text-danger\">{ $errors->first('email') }</span>\n                                @endif\n                            </div>\n\n                            <div class=\"form-group mb-3\">\n                                <input type=\"password\" placeholder=\"비밀번호\" id=\"password\" class=\"form-control\"\n                                    name=\"password\" required>\n                                @if ($errors->has('password'))\n                                <span class=\"text-danger\">{ $errors->first('password') }</span>\n                                @endif\n                            </div>\n\n                            <div class=\"form-group mb-3\">\n                                <div class=\"checkbox\">\n                                    <label><input type=\"checkbox\" name=\"remember\"> 기억하기</label>\n                                </div>\n                            </div>\n\n                            <div class=\"d-grid mx-auto\">\n                                <button type=\"submit\" class=\"btn btn-dark btn-block\">가입하기</button>\n                            </div>\n                        </form>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</main>\n```\n\nResources/views/ 폴더로 이동하여 새로운 dashboard.blade.php 파일을 만들고, 이 파일에 다음 코드를 추가해주세요:```\n\n\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>라라벨에서 사용자 지정 인증</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n\n<body>\n\n    <nav class=\"navbar navbar-light navbar-expand-lg mb-5\" style=\"background-color: #e3f2fd;\">\n        <div class=\"container\">\n            <a class=\"navbar-brand mr-auto\" href=\"#\">코드사전</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\"\n                aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul class=\"navbar-nav\">\n                    @guest\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{ route('login') }\">로그인</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{ route('register-user') }\">가입하기</a>\n                    </li>\n                    @else\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{ route('signout') }\">로그아웃</a>\n                    </li>\n                    @endguest\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n</body>\n\n</html>\n```\n\n단계 6: 라라벨 서버 실행하기\n\n마지막으로, 브라우저에서 애플리케이션을 시작할 수 있도록 라라벨 개발 서버를 실행해야 합니다. 명령 프롬프트를 통해 다음 명령어를 실행해 주세요.\n\n```js\nphp artisan serve\n```\n\n\n\n브라우저 주소창에 다음 URL을 추가하고 애플리케이션을 테스트해보세요.\n\n```js\nhttp://127.0.0.1:8000/login\nhttp://127.0.0.1:8000/registration\n```\n\n소스 코드\n\n![이미지](/assets/img/2024-05-14-CreationofuserloginandregistrationscreenswithLaravel8_0.png)","ogImage":{"url":"/assets/img/2024-05-14-CreationofuserloginandregistrationscreenswithLaravel8_0.png"},"coverImage":"/assets/img/2024-05-14-CreationofuserloginandregistrationscreenswithLaravel8_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Laravel 8 로그인 및 회원가입 튜토리얼; 이 튜토리얼에서는 라라벨 애플리케이션에서 사용자 지정 인증 로그인 및 회원가입을 생성하는 방법에 대해 설명합니다.</p>\n<p>단계 1: 라라벨 애플리케이션 만들기\n단계 2: 데이터베이스 연결\n단계 3: 권한 부여 컨트롤러 설정\n단계 4: 권한 부여 라우트 생성\n단계 5: 권한 부여 블레이드 뷰 파일 생성\n단계 6: 라라벨 개발 서버 실행</p>\n<p>단계 1: 라라벨 애플리케이션 만들기</p>\n<p>시스템에 이미 Composer를 구성했다고 가정하고, 다음 명령을 실행하여 새 라라벨 애플리케이션을 설치합니다. 그렇지 않은 경우에는 다음 링크에서 다운로드할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">composer create-project - prefer-dist laravel/laravel_demo_app\n</code></pre>\n<p>그런 다음, 애플리케이션 폴더로 이동하세요:</p>\n<pre><code class=\"hljs language-js\">cd laravel_demo_app\n</code></pre>\n<p>단계 2: 데이터베이스에 연결하기</p>\n<p>이제 Laravel 애플리케이션을 데이터베이스에 연결하기 위해 .env 구성 파일에 데이터베이스 이름, 사용자 이름 및 비밀번호를 추가해야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">DB_HOST</span>=<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>\n<span class=\"hljs-variable constant_\">DB_PORT</span>=<span class=\"hljs-number\">3306</span>\n<span class=\"hljs-variable constant_\">DB_DATABASE</span>=데이터베이스_이름\n<span class=\"hljs-variable constant_\">DB_USERNAME</span>=데이터베이스_사용자_이름\n<span class=\"hljs-variable constant_\">DB_PASSWORD</span>=데이터베이스_비밀번호\n</code></pre>\n<p>Laravel 애플리케이션에는 기본 User 모델과 마이그레이션 파일이 함께 제공됩니다. 데이터베이스에 새 테이블을 만들기 위해 다음 명령을 실행해야 합니다. 따라서 터미널로 이동하여 다음 명령을 실행하세요.</p>\n<pre><code class=\"hljs language-js\">php artisan migrate\n</code></pre>\n<p>3단계: 인가 컨트롤러 설정하기</p>\n<p>다음으로, 제안된 명령을 명령 프롬프트에 작성하고 새로운 컨트롤러 파일인 CustomAuthController를 생성하는 명령을 실행하세요.</p>\n<pre><code class=\"hljs language-js\">php artisan <span class=\"hljs-attr\">make</span>:controller <span class=\"hljs-title class_\">CustomAuthController</span>\n</code></pre>\n<p>그런 다음 파일을 열어주세요.</p>\n<pre><code class=\"hljs language-plaintext\">`app\\Http\\Controllers\\CustomAuthController.php` 에 위 코드를 주의 깊게 넣어주세요.\n\n```php\n&#x3C;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Hash;\nuse Session;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass CustomAuthController extends Controller\n{\n\n    public function index()\n    {\n        return view('auth.login');\n    }\n\n    public function customLogin(Request $request)\n    {\n       $validator =  $request->validate([\n            'email' => 'required',\n            'password' => 'required',\n        ]);\n   \n    \n        $credentials = $request->only('email', 'password');\n        if (Auth::attempt($credentials)) {\n            return redirect()->intended('dashboard')\n                        ->withSuccess('Signed in');\n        }\n        $validator['emailPassword'] = '이메일 주소 또는 비밀번호가 올바르지 않습니다.';\n        return redirect(\"login\")->withErrors($validator);\n    }\n\n\n\n    public function registration()\n    {\n        return view('auth.registration');\n    }\n\n    public function customRegistration(Request $request)\n    {  \n        $request->validate([\n            'name' => 'required',\n            'email' => 'required|email|unique:users',\n            'password' => 'required|min:6',\n        ]);\n           \n        $data = $request->all();\n        $check = $this->create($data);\n         \n        return redirect(\"dashboard\")->withSuccess('가입이 완료되었습니다');\n    }\n\n\n    public function create(array $data)\n    {\n      return User::create([\n        'name' => $data['name'],\n        'email' => $data['email'],\n        'password' => Hash::make($data['password'])\n      ]);\n    }\n\n    public function dashboard()\n    {\n        if(Auth::check()){\n            return view('dashboard');\n        }\n  \n        return redirect(\"login\")->withSuccess('접근 권한이 없습니다');\n    }\n\n    public function signOut() {\n        Session::flush();\n        Auth::logout();\n  \n        return Redirect('login');\n    }\n}\n</code></pre>\n<p>Step 4: 권한 부여 라우트 생성</p>\n<p>이 단계에서는 라라벨 애플리케이션에서 사용자 정의 인증을 처리하기 위해 POST 및 GET 방식으로 경로를 생성하는 방법을 설명합니다. route/web.php 파일을 열고 다음 코드를 추가하세요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;?php\n\nuse <span class=\"hljs-title class_\">Illuminate</span>\\<span class=\"hljs-title class_\">Support</span>\\<span class=\"hljs-title class_\">Facades</span>\\<span class=\"hljs-title class_\">Route</span>;\nuse <span class=\"hljs-title class_\">App</span>\\<span class=\"hljs-title class_\">Http</span>\\<span class=\"hljs-title class_\">Controllers</span>\\<span class=\"hljs-title class_\">CustomAuthController</span>;\n\n<span class=\"hljs-comment\">/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n*/</span>\n\n<span class=\"hljs-title class_\">Route</span>::<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'dashboard'</span>, [<span class=\"hljs-title class_\">CustomAuthController</span>::<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-string\">'dashboard'</span>]); \n<span class=\"hljs-title class_\">Route</span>::<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'login'</span>, [<span class=\"hljs-title class_\">CustomAuthController</span>::<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-string\">'index'</span>])-><span class=\"hljs-title function_\">name</span>(<span class=\"hljs-string\">'login'</span>);\n<span class=\"hljs-title class_\">Route</span>::<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'custom-login'</span>, [<span class=\"hljs-title class_\">CustomAuthController</span>::<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-string\">'customLogin'</span>])-><span class=\"hljs-title function_\">name</span>(<span class=\"hljs-string\">'login.custom'</span>); \n<span class=\"hljs-title class_\">Route</span>::<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'registration'</span>, [<span class=\"hljs-title class_\">CustomAuthController</span>::<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-string\">'registration'</span>])-><span class=\"hljs-title function_\">name</span>(<span class=\"hljs-string\">'register-user'</span>);\n<span class=\"hljs-title class_\">Route</span>::<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'custom-registration'</span>, [<span class=\"hljs-title class_\">CustomAuthController</span>::<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-string\">'customRegistration'</span>])-><span class=\"hljs-title function_\">name</span>(<span class=\"hljs-string\">'register.custom'</span>); \n<span class=\"hljs-title class_\">Route</span>::<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'signout'</span>, [<span class=\"hljs-title class_\">CustomAuthController</span>::<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-string\">'signOut'</span>])-><span class=\"hljs-title function_\">name</span>(<span class=\"hljs-string\">'signout'</span>);\n</code></pre>\n<p>단계 5: Auth Blade View 파일 생성</p>\n<p>Resources/views/ 폴더 내에서 auth 폴더를 생성하고 그 안에 new login.blade.php 파일을 만들어 이 파일에 다음 코드를 넣어주세요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;link href=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css\"</span> rel=<span class=\"hljs-string\">\"stylesheet\"</span>>\n&#x3C;main class=\"login-form\">\n    &#x3C;div class=\"cotainer\">\n        &#x3C;div class=\"row justify-content-center\">\n            &#x3C;div class=\"col-md-4\">\n                &#x3C;div class=\"card\">\n                    &#x3C;h3 class=\"card-header text-center\">로그인&#x3C;/h3>\n                    &#x3C;div class=\"card-body\">\n                        &#x3C;form method=\"POST\" action=\"{ route('login.custom') }\">\n                            @csrf\n                            &#x3C;div class=\"form-group mb-3\">\n                                &#x3C;input type=\"text\" placeholder=\"이메일\" id=\"email\" class=\"form-control\" name=\"email\" required autofocus>\n                            &#x3C;/div>\n\n                            &#x3C;div class=\"form-group mb-3\">\n                                &#x3C;input type=\"password\" placeholder=\"비밀번호\" id=\"password\" class=\"form-control\" name=\"password\" required>\n                                @if ($errors->has('emailPassword'))\n                                &#x3C;span class=\"text-danger\">{ $errors->first('emailPassword') }&#x3C;/span>\n                                @endif\n                            &#x3C;/div>\n\n                            &#x3C;div class=\"form-group mb-3\">\n                                &#x3C;div class=\"checkbox\">\n                                    &#x3C;label>\n                                        &#x3C;input type=\"checkbox\" name=\"remember\"> 기억하기\n                                    &#x3C;/label>\n                                &#x3C;/div>\n                            &#x3C;/div>\n\n                            &#x3C;div class=\"d-grid mx-auto\">\n                                &#x3C;button type=\"submit\" class=\"btn btn-dark btn-block\">로그인&#x3C;/button>\n                            &#x3C;/div>\n                        &#x3C;/form>\n\n                    &#x3C;/div>\n                &#x3C;/div>\n            &#x3C;/div>\n        &#x3C;/div>\n    &#x3C;/div>\n&#x3C;/main>\n</code></pre>\n<p>Resources/views/auth 폴더로 이동하여 비슷하게 registration.blade.php 파일을 만들고, 이 파일에 다음 코드를 추가해주세요:</p>\n<pre><code class=\"hljs language-js\">&#x3C;link href=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css\"</span> rel=<span class=\"hljs-string\">\"stylesheet\"</span>>\n\n&#x3C;main class=\"signup-form\">\n    &#x3C;div class=\"cotainer\">\n        &#x3C;div class=\"row justify-content-center\">\n            &#x3C;div class=\"col-md-4\">\n                &#x3C;div class=\"card\">\n                    &#x3C;h3 class=\"card-header text-center\">사용자 등록&#x3C;/h3>\n                    &#x3C;div class=\"card-body\">\n\n                        &#x3C;form action=\"{ route('register.custom') }\" method=\"POST\">\n                            @csrf\n                            &#x3C;div class=\"form-group mb-3\">\n                                &#x3C;input type=\"text\" placeholder=\"이름\" id=\"name\" class=\"form-control\" name=\"name\"\n                                    required autofocus>\n                                @if ($errors->has('name'))\n                                &#x3C;span class=\"text-danger\">{ $errors->first('name') }&#x3C;/span>\n                                @endif\n                            &#x3C;/div>\n\n                            &#x3C;div class=\"form-group mb-3\">\n                                &#x3C;input type=\"text\" placeholder=\"이메일\" id=\"email_address\" class=\"form-control\"\n                                    name=\"email\" required autofocus>\n                                @if ($errors->has('email'))\n                                &#x3C;span class=\"text-danger\">{ $errors->first('email') }&#x3C;/span>\n                                @endif\n                            &#x3C;/div>\n\n                            &#x3C;div class=\"form-group mb-3\">\n                                &#x3C;input type=\"password\" placeholder=\"비밀번호\" id=\"password\" class=\"form-control\"\n                                    name=\"password\" required>\n                                @if ($errors->has('password'))\n                                &#x3C;span class=\"text-danger\">{ $errors->first('password') }&#x3C;/span>\n                                @endif\n                            &#x3C;/div>\n\n                            &#x3C;div class=\"form-group mb-3\">\n                                &#x3C;div class=\"checkbox\">\n                                    &#x3C;label>&#x3C;input type=\"checkbox\" name=\"remember\"> 기억하기&#x3C;/label>\n                                &#x3C;/div>\n                            &#x3C;/div>\n\n                            &#x3C;div class=\"d-grid mx-auto\">\n                                &#x3C;button type=\"submit\" class=\"btn btn-dark btn-block\">가입하기&#x3C;/button>\n                            &#x3C;/div>\n                        &#x3C;/form>\n\n                    &#x3C;/div>\n                &#x3C;/div>\n            &#x3C;/div>\n        &#x3C;/div>\n    &#x3C;/div>\n&#x3C;/main>\n</code></pre>\n<p>Resources/views/ 폴더로 이동하여 새로운 dashboard.blade.php 파일을 만들고, 이 파일에 다음 코드를 추가해주세요:```</p>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>라라벨에서 사용자 지정 인증<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"navbar navbar-light navbar-expand-lg mb-5\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color: #e3f2fd;\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"navbar-brand mr-auto\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>코드사전<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"navbar-toggler\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">data-bs-toggle</span>=<span class=\"hljs-string\">\"collapse\"</span> <span class=\"hljs-attr\">data-bs-target</span>=<span class=\"hljs-string\">\"#navbarNav\"</span>\n                <span class=\"hljs-attr\">aria-controls</span>=<span class=\"hljs-string\">\"navbarNav\"</span> <span class=\"hljs-attr\">aria-expanded</span>=<span class=\"hljs-string\">\"false\"</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">\"Toggle navigation\"</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"navbar-toggler-icon\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapse navbar-collapse\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"navbarNav\"</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"navbar-nav\"</span>></span>\n                    @guest\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav-item\"</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav-link\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{ route('login') }\"</span>></span>로그인<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav-item\"</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav-link\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{ route('register-user') }\"</span>></span>가입하기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                    @else\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav-item\"</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav-link\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{ route('signout') }\"</span>></span>로그아웃<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                    @endguest\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</span></code></pre>\n<p>단계 6: 라라벨 서버 실행하기</p>\n<p>마지막으로, 브라우저에서 애플리케이션을 시작할 수 있도록 라라벨 개발 서버를 실행해야 합니다. 명령 프롬프트를 통해 다음 명령어를 실행해 주세요.</p>\n<pre><code class=\"hljs language-js\">php artisan serve\n</code></pre>\n<p>브라우저 주소창에 다음 URL을 추가하고 애플리케이션을 테스트해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//127.0.0.1:8000/login</span>\n<span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//127.0.0.1:8000/registration</span>\n</code></pre>\n<p>소스 코드</p>\n<p><img src=\"/assets/img/2024-05-14-CreationofuserloginandregistrationscreenswithLaravel8_0.png\" alt=\"이미지\"></p>\n</body>\n</html>\n"},"__N_SSG":true}