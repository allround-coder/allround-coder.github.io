{"pageProps":{"post":{"title":"JavaScript 제너레이터에 대해 두렵지 마세요","description":"","date":"2024-05-14 14:20","slug":"2024-05-14-DontBeAfraidofJavaScriptGenerators","content":"\n\n![이미지](/assets/img/2024-05-14-DontBeAfraidofJavaScriptGenerators_0.png)\n\n솔직히 말해봅시다: 제너레이터를 사용한 코드를 얼마나 자주 만나게 되나요?\n\n매일 다양한 개발자들의 코드를 검토하지만, 제너레이터를 거의 만나지 못합니다.\n\n그 이유는 무엇일까요?\n\n\n\n사람들은 이해하지 못하나요? 아니면 혜택을 못 보는 건가요?\n\nJavaScript는 유연성과 폭넓은 기능으로 유명한데요, ECMAScript 2015에서 독특한 도구인 제너레이터를 소개했습니다. 이들은 비동기 프로그래밍을 제어하고, 반복 가능한 객체를 생성하며, 여러 값을 반환하는 강력한 수단입니다. 이 안내서에서는 제너레이터의 동작 방식, 적용 분야, 그리고 어떻게 잠재력을 활용할 수 있는지 배워볼 거에요.\n\n# 제너레이터란 무엇인가요?\n\n제너레이터는 전통적인 함수와 다릅니다. 그들은 실행을 여러 번 시작하고 중단할 수 있어요. 이는 여러 값을 반환하고 나중에 실행을 계속할 수 있게 해주어 비동기 작업을 관리하거나, 반복자를 생성하거나, 끝없는 데이터 스트림을 처리하는 데 완벽한 방법입니다.\n\n\n\n생성기는 function* 구문으로 구분됩니다. 다음 기본 예제를 살펴보세요:\n\n```js\nfunction* generateSequence() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n```\n\n여기서 yield는 값을 반환하고 생성기의 실행을 일시 중단합니다. 각 호출마다, 생성기는 그 다음 값을 반환합니다.\n\n# 생성기 객체와 상호 작용하기\n\n\n\n제너레이터 함수를 호출하면 해당 바디가 직접 실행되지 않습니다. 대신, 실행을 제어할 수 있는 제너레이터 객체가 생성됩니다. 이 객체는 순회 가능하므로 for...of 루프 및 유사한 작업에 적합합니다.\n\n제너레이터 객체를 살펴봅시다:\n\n- next(): 이 메소드는 제너레이터를 다시 시작하고, 다음으로 순회된 값을 반환하며, 제너레이터가 완료되었는지(done 속성으로 확인합니다.\n이전에 작성한 generateSequence 예제를 사용하여:\n\n```js\nconsole.log(generator.next()); // { value: 1, done: false }\n```\n\n\n\n- return(): 이 메서드는 generator를 일찍 종료시키며, 마치 return 명령을 실행한 것처럼 동작합니다.\n\n```js\nconsole.log(numbers.return(100)); // { value: 100, done: true }\n```\n\n- throw(): 이 메서드는 오류를 삽입할 수 있게 해주며, generator 내부에서 오류 처리를 간편하게 할 수 있습니다.\n\n```js\nfunction* generateTasks() {\n  try {\n    yield \"작업 시작\";\n    yield \"작업 진행 중\";\n    yield \"작업 거의 완료\";\n  } catch (error) {\n    console.log('문제 발생:', error.message);\n  }\n}\n\nconst tasks = generateTasks();\n\nconsole.log(tasks.next().value); // 출력: \"작업 시작\"\nconsole.log(tasks.next().value); // 출력: \"작업 진행 중\"\ntasks.throw(new Error('이런! 문제가 발생했어요.')); \n// 출력: \"문제 발생: 이런! 문제가 발생했어요.\"\nconsole.log(tasks.next()); // 출력: { value: undefined, done: true }\n```\n\n\n\n위의 예제에서는 next() 메서드를 사용하여 몇 가지 작업을 시작한 후 throw() 메서드를 사용하여 오류를 발생시킵니다. 제너레이터는 try-catch 블록 덕분에이 오류를 캡처하여 오류 메시지를 기록하고 오류 시나리오를 단호하게 처리합니다.\n\n# 무한 데이터 스트림을 위한 제너레이터 활용\n\n제너레이터는 무한 데이터 스트림을 처리하는 데 뛰어납니다. 요청 시에만 값을 생성하는 잠재적으로 끝없는 데이터 구조를 설계할 수 있습니다. 웹 애플리케이션에서의 무한 스크롤링과 같은 상황을 생각해보세요.\n\n```js\nfunction* infiniteNumbers() {\n  let index = 0;\n  while (true) {\n    yield index++;\n  }\n}\n```\n\n\n\nI confess, while(true) could scare anyone at first glance, but that is the magic of generators.\n\n# Synchronous and Asynchronous Iteration with Generators\n\nWhen blended with promises, generators can emulate the async/await pattern, offering a neater, more intuitive method to draft asynchronous code. To illustrate, let’s fetch data using a generator:\n\n```js\nfunction* fetchData() {\n  const users = yield fetch('https://api.example.com/users');\n  console.log('Users:', users);\n  // ...\n}\n```\n\n\n\n# 제너레이터의 고급 활용\n\nasync/await는 간단한 비동기 작업에 유용하지만, 다양한 기능을 제공하는 제너레이터는 더 다양한 가능성을 제공합니다.\n\n- 제너레이터 조합: 이를 통해 여러 개의 제너레이터를 매끄럽게 통합하여 복잡한 값 시퀀스를 만들 수 있습니다.\n\n```js\nfunction* generateSequence() {\n  yield* generateNumbers();\n  yield* generateCharacters('A', 'Z');\n}\n```\n\n\n\n- 무한 생성기: 생성기는 무한한 값 시퀀스를 생성할 수 있어 연속 데이터 스트림이나 무한한 알고리즘에 이상적입니다. 위의 while (true)을 기억하시나요?\n\n# 실세계 시나리오 (업데이트): 무한 스크롤\n\n![이미지](/assets/img/2024-05-14-DontBeAfraidofJavaScriptGenerators_1.png)\n\n자바스크립트 생성기에 대한 중요하고 실용적인 응용 프로그램을 개념화하는 것이 어려울 수 있습니다. 그러나 생성기는 비동기 코드와 매끄럽게 통합되며 무한한 반복을 지원하는 등 다양한 기능을 제공합니다. 예시를 살펴보죠.\n\n\n\n하단에 제시된 코드는 순수히 예시로 제시된 것입니다. 실제로 사용할 준비가 된 코드는 다양한 예외 상황을 처리해야 합니다.\n\n무한 스크롤을 지원하는 소셜 미디어 피드를 구성하는 것을 제안합니다. 다시 말해, 사용자가 목록의 끝까지 스크롤하면 추가적인 게시물이 가져와서 피드에 추가됩니다.\n\n두 번째 주의: 제너레이터는 한 가지 접근법을 제공하지만, JavaScript 생태계에서 단독적인 것은 아닙니다. 비슷한 결과를 얻기 위한 대체 방법이 있습니다. 그럼에도 불구하고, 학습을 위해 사용자가 스크롤할 때 게시물을 계속해서 가져오는 메커니즘을 구성해보겠습니다.\n\n먼저, 데이터를 담을 기본적인 HTML/CSS 구조를 설정해보겠습니다. 실험해보고 싶다면 사용하실 수 있습니다:\n\n\n\n```js\r\n// CSS 코드\n.post {\n  height: 300px;\n}\n\n// HTML 코드\n<div id=\"postsContainer\">\n  \n</div>\r\n```\n\n다음은 \"10개의 게시물\"을 가져오기 위해 설계된 스크립트를 검토할 것입니다. 사용자가 스크롤하고 페이지 끝에 가까워지면 생성기가 작동하여 다음 10개의 게시물을 가져올 것입니다:\n\n```js\r\n// 일반 `fetch`를 대체하기 위한 것일 뿐입니다\n// 10개의 게시물을 생성하고 반환합니다\nasync function simulatedFetch(currentPage) {\n  const posts = Array.from({ length: 10 }, (_, i) => ({ content: `포스트 - ${currentPage}${i}` }));\n  return Promise.resolve(posts)\n}\n\nasync function* paginatedFetcher(apiUrl, itemsPerPage) {\n    let currentPage = 0;\n\n    while (true) {\n        // 현실적인 경우에 대한 주석\n        // const response = await fetch(`${apiUrl}?page=${currentPage}&limit=${itemsPerPage}`);\n        const response = await simulatedFetch(currentPage)\n      \n        // const posts = await response.json();\n        const posts = response;\n      \n        if (posts.length === 0) {\n            return;  // 데이터의 끝\n        }\n      \n        yield posts;\n        currentPage++;\n    }\n}\n\n// 무한 스크롤과 함께 사용:\n// API는 설명적인 역할로 실제 사용되지는 않습니다\nconst getPosts = paginatedFetcher('https://api.example.com/posts', 10);\n\n// DOM에 게시물을 표시하는 함수\nfunction displayPosts(posts) {\n  const container = document.getElementById('postsContainer');\n    posts.forEach(post => {\n        const postElement = document.createElement('div');\n        postElement.className = 'post';\n        postElement.innerText = post.content;\n        container.appendChild(postElement);\n    });\n}\n\n// 무한 스크롤 로직\nwindow.onscroll = async function() {\n    if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n        const { value } = await getPosts.next();\n        if (value) {\n            displayPosts(value);\n        }\n    }\n};\n\n// 초기 데이터 가져오기\n(async () => {\n    const { value } = await getPosts.next();\n    displayPosts(value);\n})();\r\n```\n\n# 결론\n\n\n\nJavaScript에서의 생성기들은 그저 새로운 것뿐만이 아니라, 비동기 작업을 다루는 데 중요하며, 반복 가능한 객체를 만드는 데도 중요합니다.\n\n다음에 데이터를 실시간으로 관리해야 할 때, 생성기를 사용하기 주저하지 마세요.\n\n실제 시나리오에서 생성기를 효과적으로 활용한 경험이 있다면 공유해 주세요. 더 많은 예시를 만나면, 어디에 활용하는 게 가장 적절한지 더 쉽게 알 수 있을 거예요.\n\n저와 소통하세요! 저는 아래에서 찾을 수 있어요:\n- Medium: https://medium.com/@yuribett\n- Linkedin: https://www.linkedin.com/in/yuribett/\n- X (formerly Twitter): https://twitter.com/yuribett\n\n\n\n# Stackademic\n\n끝까지 읽어 주셔서 감사합니다. 떠나시기 전에:\n\n- 작가를 향한 박수와 팔로우를 고려해주세요! 👏\n- 트위터(X), 링크드인, YouTube에서 저희를 팔로우해 주세요.\n- 세계적으로 프로그래밍 교육을 민주화하는 Stackademic.com에서 더 많은 정보를 찾아보세요.","ogImage":{"url":"/assets/img/2024-05-14-DontBeAfraidofJavaScriptGenerators_0.png"},"coverImage":"/assets/img/2024-05-14-DontBeAfraidofJavaScriptGenerators_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-14-DontBeAfraidofJavaScriptGenerators_0.png\" alt=\"이미지\"></p>\n<p>솔직히 말해봅시다: 제너레이터를 사용한 코드를 얼마나 자주 만나게 되나요?</p>\n<p>매일 다양한 개발자들의 코드를 검토하지만, 제너레이터를 거의 만나지 못합니다.</p>\n<p>그 이유는 무엇일까요?</p>\n<p>사람들은 이해하지 못하나요? 아니면 혜택을 못 보는 건가요?</p>\n<p>JavaScript는 유연성과 폭넓은 기능으로 유명한데요, ECMAScript 2015에서 독특한 도구인 제너레이터를 소개했습니다. 이들은 비동기 프로그래밍을 제어하고, 반복 가능한 객체를 생성하며, 여러 값을 반환하는 강력한 수단입니다. 이 안내서에서는 제너레이터의 동작 방식, 적용 분야, 그리고 어떻게 잠재력을 활용할 수 있는지 배워볼 거에요.</p>\n<h1>제너레이터란 무엇인가요?</h1>\n<p>제너레이터는 전통적인 함수와 다릅니다. 그들은 실행을 여러 번 시작하고 중단할 수 있어요. 이는 여러 값을 반환하고 나중에 실행을 계속할 수 있게 해주어 비동기 작업을 관리하거나, 반복자를 생성하거나, 끝없는 데이터 스트림을 처리하는 데 완벽한 방법입니다.</p>\n<p>생성기는 function* 구문으로 구분됩니다. 다음 기본 예제를 살펴보세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">generateSequence</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n<p>여기서 yield는 값을 반환하고 생성기의 실행을 일시 중단합니다. 각 호출마다, 생성기는 그 다음 값을 반환합니다.</p>\n<h1>생성기 객체와 상호 작용하기</h1>\n<p>제너레이터 함수를 호출하면 해당 바디가 직접 실행되지 않습니다. 대신, 실행을 제어할 수 있는 제너레이터 객체가 생성됩니다. 이 객체는 순회 가능하므로 for...of 루프 및 유사한 작업에 적합합니다.</p>\n<p>제너레이터 객체를 살펴봅시다:</p>\n<ul>\n<li>next(): 이 메소드는 제너레이터를 다시 시작하고, 다음으로 순회된 값을 반환하며, 제너레이터가 완료되었는지(done 속성으로 확인합니다.\n이전에 작성한 generateSequence 예제를 사용하여:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(generator.<span class=\"hljs-title function_\">next</span>()); <span class=\"hljs-comment\">// { value: 1, done: false }</span>\n</code></pre>\n<ul>\n<li>return(): 이 메서드는 generator를 일찍 종료시키며, 마치 return 명령을 실행한 것처럼 동작합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(numbers.<span class=\"hljs-keyword\">return</span>(<span class=\"hljs-number\">100</span>)); <span class=\"hljs-comment\">// { value: 100, done: true }</span>\n</code></pre>\n<ul>\n<li>throw(): 이 메서드는 오류를 삽입할 수 있게 해주며, generator 내부에서 오류 처리를 간편하게 할 수 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">generateTasks</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">\"작업 시작\"</span>;\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">\"작업 진행 중\"</span>;\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">\"작업 거의 완료\"</span>;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'문제 발생:'</span>, error.<span class=\"hljs-property\">message</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> tasks = <span class=\"hljs-title function_\">generateTasks</span>();\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(tasks.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>); <span class=\"hljs-comment\">// 출력: \"작업 시작\"</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(tasks.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>); <span class=\"hljs-comment\">// 출력: \"작업 진행 중\"</span>\ntasks.<span class=\"hljs-keyword\">throw</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">'이런! 문제가 발생했어요.'</span>)); \n<span class=\"hljs-comment\">// 출력: \"문제 발생: 이런! 문제가 발생했어요.\"</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(tasks.<span class=\"hljs-title function_\">next</span>()); <span class=\"hljs-comment\">// 출력: { value: undefined, done: true }</span>\n</code></pre>\n<p>위의 예제에서는 next() 메서드를 사용하여 몇 가지 작업을 시작한 후 throw() 메서드를 사용하여 오류를 발생시킵니다. 제너레이터는 try-catch 블록 덕분에이 오류를 캡처하여 오류 메시지를 기록하고 오류 시나리오를 단호하게 처리합니다.</p>\n<h1>무한 데이터 스트림을 위한 제너레이터 활용</h1>\n<p>제너레이터는 무한 데이터 스트림을 처리하는 데 뛰어납니다. 요청 시에만 값을 생성하는 잠재적으로 끝없는 데이터 구조를 설계할 수 있습니다. 웹 애플리케이션에서의 무한 스크롤링과 같은 상황을 생각해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">infiniteNumbers</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">yield</span> index++;\n  }\n}\n</code></pre>\n<p>I confess, while(true) could scare anyone at first glance, but that is the magic of generators.</p>\n<h1>Synchronous and Asynchronous Iteration with Generators</h1>\n<p>When blended with promises, generators can emulate the async/await pattern, offering a neater, more intuitive method to draft asynchronous code. To illustrate, let’s fetch data using a generator:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> users = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'https://api.example.com/users'</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Users:'</span>, users);\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<h1>제너레이터의 고급 활용</h1>\n<p>async/await는 간단한 비동기 작업에 유용하지만, 다양한 기능을 제공하는 제너레이터는 더 다양한 가능성을 제공합니다.</p>\n<ul>\n<li>제너레이터 조합: 이를 통해 여러 개의 제너레이터를 매끄럽게 통합하여 복잡한 값 시퀀스를 만들 수 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">generateSequence</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">yield</span>* <span class=\"hljs-title function_\">generateNumbers</span>();\n  <span class=\"hljs-keyword\">yield</span>* <span class=\"hljs-title function_\">generateCharacters</span>(<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'Z'</span>);\n}\n</code></pre>\n<ul>\n<li>무한 생성기: 생성기는 무한한 값 시퀀스를 생성할 수 있어 연속 데이터 스트림이나 무한한 알고리즘에 이상적입니다. 위의 while (true)을 기억하시나요?</li>\n</ul>\n<h1>실세계 시나리오 (업데이트): 무한 스크롤</h1>\n<p><img src=\"/assets/img/2024-05-14-DontBeAfraidofJavaScriptGenerators_1.png\" alt=\"이미지\"></p>\n<p>자바스크립트 생성기에 대한 중요하고 실용적인 응용 프로그램을 개념화하는 것이 어려울 수 있습니다. 그러나 생성기는 비동기 코드와 매끄럽게 통합되며 무한한 반복을 지원하는 등 다양한 기능을 제공합니다. 예시를 살펴보죠.</p>\n<p>하단에 제시된 코드는 순수히 예시로 제시된 것입니다. 실제로 사용할 준비가 된 코드는 다양한 예외 상황을 처리해야 합니다.</p>\n<p>무한 스크롤을 지원하는 소셜 미디어 피드를 구성하는 것을 제안합니다. 다시 말해, 사용자가 목록의 끝까지 스크롤하면 추가적인 게시물이 가져와서 피드에 추가됩니다.</p>\n<p>두 번째 주의: 제너레이터는 한 가지 접근법을 제공하지만, JavaScript 생태계에서 단독적인 것은 아닙니다. 비슷한 결과를 얻기 위한 대체 방법이 있습니다. 그럼에도 불구하고, 학습을 위해 사용자가 스크롤할 때 게시물을 계속해서 가져오는 메커니즘을 구성해보겠습니다.</p>\n<p>먼저, 데이터를 담을 기본적인 HTML/CSS 구조를 설정해보겠습니다. 실험해보고 싶다면 사용하실 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// CSS 코드</span>\n.<span class=\"hljs-property\">post</span> {\n  <span class=\"hljs-attr\">height</span>: 300px;\n}\n\n<span class=\"hljs-comment\">// HTML 코드</span>\n&#x3C;div id=<span class=\"hljs-string\">\"postsContainer\"</span>>\n  \n&#x3C;/div>\n</code></pre>\n<p>다음은 \"10개의 게시물\"을 가져오기 위해 설계된 스크립트를 검토할 것입니다. 사용자가 스크롤하고 페이지 끝에 가까워지면 생성기가 작동하여 다음 10개의 게시물을 가져올 것입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 일반 `fetch`를 대체하기 위한 것일 뿐입니다</span>\n<span class=\"hljs-comment\">// 10개의 게시물을 생성하고 반환합니다</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">simulatedFetch</span>(<span class=\"hljs-params\">currentPage</span>) {\n  <span class=\"hljs-keyword\">const</span> posts = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>({ <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">10</span> }, <span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =></span> ({ <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">`포스트 - <span class=\"hljs-subst\">${currentPage}</span><span class=\"hljs-subst\">${i}</span>`</span> }));\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(posts)\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">paginatedFetcher</span>(<span class=\"hljs-params\">apiUrl, itemsPerPage</span>) {\n    <span class=\"hljs-keyword\">let</span> currentPage = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n        <span class=\"hljs-comment\">// 현실적인 경우에 대한 주석</span>\n        <span class=\"hljs-comment\">// const response = await fetch(`${apiUrl}?page=${currentPage}&#x26;limit=${itemsPerPage}`);</span>\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">simulatedFetch</span>(currentPage)\n      \n        <span class=\"hljs-comment\">// const posts = await response.json();</span>\n        <span class=\"hljs-keyword\">const</span> posts = response;\n      \n        <span class=\"hljs-keyword\">if</span> (posts.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span>;  <span class=\"hljs-comment\">// 데이터의 끝</span>\n        }\n      \n        <span class=\"hljs-keyword\">yield</span> posts;\n        currentPage++;\n    }\n}\n\n<span class=\"hljs-comment\">// 무한 스크롤과 함께 사용:</span>\n<span class=\"hljs-comment\">// API는 설명적인 역할로 실제 사용되지는 않습니다</span>\n<span class=\"hljs-keyword\">const</span> getPosts = <span class=\"hljs-title function_\">paginatedFetcher</span>(<span class=\"hljs-string\">'https://api.example.com/posts'</span>, <span class=\"hljs-number\">10</span>);\n\n<span class=\"hljs-comment\">// DOM에 게시물을 표시하는 함수</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">displayPosts</span>(<span class=\"hljs-params\">posts</span>) {\n  <span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'postsContainer'</span>);\n    posts.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =></span> {\n        <span class=\"hljs-keyword\">const</span> postElement = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'div'</span>);\n        postElement.<span class=\"hljs-property\">className</span> = <span class=\"hljs-string\">'post'</span>;\n        postElement.<span class=\"hljs-property\">innerText</span> = post.<span class=\"hljs-property\">content</span>;\n        container.<span class=\"hljs-title function_\">appendChild</span>(postElement);\n    });\n}\n\n<span class=\"hljs-comment\">// 무한 스크롤 로직</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">onscroll</span> = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span> + <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">scrollY</span>) >= <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">offsetHeight</span>) {\n        <span class=\"hljs-keyword\">const</span> { value } = <span class=\"hljs-keyword\">await</span> getPosts.<span class=\"hljs-title function_\">next</span>();\n        <span class=\"hljs-keyword\">if</span> (value) {\n            <span class=\"hljs-title function_\">displayPosts</span>(value);\n        }\n    }\n};\n\n<span class=\"hljs-comment\">// 초기 데이터 가져오기</span>\n(<span class=\"hljs-keyword\">async</span> () => {\n    <span class=\"hljs-keyword\">const</span> { value } = <span class=\"hljs-keyword\">await</span> getPosts.<span class=\"hljs-title function_\">next</span>();\n    <span class=\"hljs-title function_\">displayPosts</span>(value);\n})();\n</code></pre>\n<h1>결론</h1>\n<p>JavaScript에서의 생성기들은 그저 새로운 것뿐만이 아니라, 비동기 작업을 다루는 데 중요하며, 반복 가능한 객체를 만드는 데도 중요합니다.</p>\n<p>다음에 데이터를 실시간으로 관리해야 할 때, 생성기를 사용하기 주저하지 마세요.</p>\n<p>실제 시나리오에서 생성기를 효과적으로 활용한 경험이 있다면 공유해 주세요. 더 많은 예시를 만나면, 어디에 활용하는 게 가장 적절한지 더 쉽게 알 수 있을 거예요.</p>\n<p>저와 소통하세요! 저는 아래에서 찾을 수 있어요:</p>\n<ul>\n<li>Medium: <a href=\"https://medium.com/@yuribett\" rel=\"nofollow\" target=\"_blank\">https://medium.com/@yuribett</a></li>\n<li>Linkedin: <a href=\"https://www.linkedin.com/in/yuribett/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/yuribett/</a></li>\n<li>X (formerly Twitter): <a href=\"https://twitter.com/yuribett\" rel=\"nofollow\" target=\"_blank\">https://twitter.com/yuribett</a></li>\n</ul>\n<h1>Stackademic</h1>\n<p>끝까지 읽어 주셔서 감사합니다. 떠나시기 전에:</p>\n<ul>\n<li>작가를 향한 박수와 팔로우를 고려해주세요! 👏</li>\n<li>트위터(X), 링크드인, YouTube에서 저희를 팔로우해 주세요.</li>\n<li>세계적으로 프로그래밍 교육을 민주화하는 Stackademic.com에서 더 많은 정보를 찾아보세요.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}