{"pageProps":{"post":{"title":"리액트에서 사용자 정의 드롭다운 컴포넌트 만들기 단계별 가이드","description":"","date":"2024-05-12 19:10","slug":"2024-05-12-BuildingaCustomDropdownComponentinReactStepbyStep","content":"\n![이미지](/assets/img/2024-05-12-BuildingaCustomDropdownComponentinReactStepbyStep_0.png)\n\n안녕하세요! 이 기사에서는 React 애플리케이션에서 동적으로 사용할 수 있는 사용자 정의 Dropdown 컴포넌트를 소개하려고해요. 이 Dropdown 컴포넌트는 사용자가 목록에서 항목을 선택할 수 있도록 하면서 다양한 위치와 스타일로 표시될 수 있어요. 또한 이미지가 있는 경우와 없는 경우 모두 사용할 수 있어요. 이 컴포넌트는 Typescript, Tailwind CSS, React Icons 및 Classnames와 같은 인기있는 라이브러리를 사용하여 개발되었어요.\n\n👉 먼저 단계별로 무엇이 일어나고 있는지 설명한 후에 마지막에 전체 코드와 사용법을 추가할 거예요. 준비가 되셨나요? 그럼 시작해봅시다!\n\n![이미지](/assets/img/2024-05-12-BuildingaCustomDropdownComponentinReactStepbyStep_1.png)\n\n## 1. Imports:\n\n```js\nimport { useEffect, useRef, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { GoChevronDown } from \"react-icons/go\";\nimport useOutsideClick from \"../hooks/useOutsideClick\";\n```\n\n🔸 useEffect, useRef 및 useState ➜ 이들은 상태를 관리하고 DOM 요소에 대한 참조를 만들 때 사용되는 React 훅입니다.\n\n🔸 classNames ➜ 이 라이브러리는 조건부로 classNames을 결합하는 데 사용됩니다.\n\n🔹 goChevronDown ➜ 이 아이콘 컴포넌트는 드롭다운 토글 버튼에 사용됩니다.\n\n🔹 useOutsideClick ➜ 이 사용자 정의 후크는 지정된 요소 외부를 클릭 감지하는 데 사용됩니다.\n\n## 2. 인터페이스:\n\n```js\n인터페이스 DropdownItem {\n  id: string;\n  name: string;\n  imageUrl?: string;\n}\n\n인터페이스 DropdownProps {\n  id: string;\n  title?: string;\n  data: DropdownItem[];\n  position?: \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\";\n  hasImage?: boolean;\n  style?: string;\n  selectedId?: string;\n  onSelect?: (id: string) => void;\n}\n```\n\n🔹DropdownItem➜ DropdownItem을 정의합니다. 이 인터페이스는 각 드롭다운 아이템에 필요한 속성인 id, name 및 옵션으로 imageUrl을 지정합니다.\n\n🔹DropdownProps➜ 이 인터페이스는 Dropdown 컴포넌트에 전달할 수 있는 프로퍼티들을 지정합니다. 이 프로퍼티들의 설명은 다음과 같습니다:\n\n![이미지](/assets/img/2024-05-12-BuildingaCustomDropdownComponentinReactStepbyStep_2.png)\n\n📌 id: Dropdown 컴포넌트의 고유 식별자입니다.\n\n📌 제목: 드롭다운이 열릴 때 표시되는 기본 제목. 기본 제목은 \"Select\"입니다.\n\n📌 데이터: 드롭다운 콘텐츠를 구성하는 항목 목록.\n\n📌 위치: 드롭다운의 위치를 버튼을 기준으로 지정합니다. (\"bottom-right\", \"bottom-left\", \"top-right\", \"top-left\"). 기본 위치는 \"bottom-left\"입니다.\n\n📌 이미지 포함 여부: 드롭다운 항목에 이미지가 있는지를 나타내는 부울 값.\n\n📌 스타일 : 드롭다운 컴포넌트에 적용할 추가 스타일입니다.\n\n📌 selectedId : 초기 선택 항목의 식별자입니다.\n\n📌 onSelect : 항목이 선택될 때 호출되는 콜백 함수입니다.\n\n![이미지](/assets/img/2024-05-12-BuildingaCustomDropdownComponentinReactStepbyStep_3.png)\n\n이 프롭들은 Dropdown 컴포넌트를 다양한 사용 사례에 맞게 사용자 정의할 수 있도록 해 줍니다. 사용자가 필요에 맞게 드랍다운의 동작, 내용, 외관을 맞춤 설정할 수 있게 해줍니다.\n\n## 3. Dropdown 컴포넌트 생성:\n\n```js\nconst Dropdown = ({\n  id,\n  title = \"Select\", //기본 값\n  data,\n  position = \"bottom-left\", //기본 값\n  hasImage,\n  style,\n  selectedId,\n  onSelect,\n}: DropdownProps) => {\n  return (\n    <div ref={dropdownRef} className=\"relative\">\n      {/* ... */}\n    </div>\n  );\n};\nexport default Dropdown;\n```\n\n🔹Dropdown 컴포넌트는 사용자 정의 드롭다운 메뉴 컴포넌트이며 위의 프롭을 허용합니다.\n\n## 4. 상태 변수:\n\n```js\nconst [isOpen, setIsOpen] = useState < boolean > false;\n\nconst [selectedItem, setSelectedItem] =\n  (useState < DropdownItem) | (undefined > (selectedId ? data?.find((item) => item.id === selectedId) : undefined));\n```\n\n🔹isOpen➜ 드롭다운 메뉴의 열기/닫기 상태를 관리합니다.\n\n🔹selectedItem➜ 드롭다운 메뉴에서 현재 선택된 항목을 추적합니다.\n\n## 5. 이벤트 핸들러:\n\n```js\nconst handleChange = (item: DropdownItem) => {\n  setSelectedItem(item);\n  onSelect && onSelect(item.id);\n  setIsOpen(false);\n};\n```\n\n🔹handleChange➜ 드롭다운 메뉴에서 항목을 선택하는 핸들러입니다. 선택된 항목을 업데이트하고, onSelect 콜백을 호출(제공된 경우)하며, 드롭다운 메뉴를 닫습니다.\n\n## 6. useEffect 훅:\n\n```js\nuseEffect(() => {\n  if (selectedId && data) {\n    const newSelectedItem = data.find((item) => item.id === selectedId);\n    newSelectedItem && setSelectedItem(newSelectedItem);\n  } else {\n    setSelectedItem(undefined);\n  }\n}, [selectedId, data]);\n```\n\n🔹 이 useEffect 훅은 selectedId와 data의 변경 사항을 감지합니다. 둘 중 하나가 변경되면 데이터에서 selectedId와 일치하는 항목을 찾아 selectedItem에 설정합니다.\n\n## 7. Ref:\n\n```js\nconst dropdownRef = useRef < HTMLDivElement > null;\nuseOutsideClick({\n  ref: dropdownRef,\n  handler: () => setIsOpen(false),\n});\n```\n\n🔹 dropdownRef➜ 드롭다운 메뉴 외부 클릭을 감지하는 데 사용되는 Ref입니다.\n\n## 8. CSS 클래스:\n\n```js\nconst dropdownClass = classNames(\"absolute bg-gray-100 w-max max-h-52 overflow-y-auto py-3 rounded shadow-md z-10\", {\n  \"top-full right-0 mt-2\": position === \"bottom-right\",\n  \"top-full left-0 mt-2\": position === \"bottom-left\",\n  \"bottom-full right-0 mb-2\": position === \"top-right\",\n  \"bottom-full left-0 mb-2\": position === \"top-left\",\n});\n```\n\n🔹 dropdownClass➜ 위치 prop에 따라 드롭다운 메뉴를 배치하기 위해 CSS 클래스를 동적으로 계산합니다.\n\n## 9. 드롭다운 토글 버튼 생성:\n\n```js\n<button\n  id={id}\n  aria-label=\"드롭다운 토글\"\n  aria-haspopup=\"true\"\n  aria-expanded={isOpen}\n  type=\"button\"\n  onClick={() => setIsOpen(!isOpen)}\n  className={classNames(\n    \"flex justify-between items-center gap-5 rounded w-full py-2 px-4 bg-blue-500 text-white\",\n    style\n  )}\n>\n  <span>{selectedItem?.name || title}</span>\n  <GoChevronDown\n    size={20}\n    className={classNames(\"transform duration-500 ease-in-out\", {\n      \"rotate-180\": isOpen,\n    })}\n  />\n</button>\n```\n\n🔹버튼 엘리먼트는 제목 또는 선택한 항목의 텍스트와 화살표 아이콘이 들어 있습니다.\n\n🔹클릭할 때마다 버튼은 isOpen 상태를 토글합니다.\n\n## 10. 드롭다운 콘텐츠 생성:\n\n```js\n{\n  isOpen && (\n    <div aria-label=\"드롭다운 메뉴\" className={dropdownClass}>\n      <ul role=\"menu\" aria-labelledby={id} aria-orientation=\"vertical\" className=\"leading-10\">\n        {data?.map((item) => (\n          <li\n            key={item.id}\n            onClick={() => handleChange(item)}\n            className={classNames(\"flex items-center cursor-pointer hover:bg-gray-200 px-3\", {\n              \"bg-gray-300\": selectedItem?.id === item.id,\n            })}\n          >\n            {hasImage && (\n              <img\n                src={item.imageUrl}\n                alt=\"이미지\"\n                loading=\"lazy\"\n                className=\"w-8 h-8 rounded-full bg-gray-400 object-cover me-2\"\n              />\n            )}\n            <span>{item.name}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n🔹만약 드롭다운이 열려있으면(isOpen이 true), 드롭다운 메뉴를 나타내는 div가 렌더링됩니다.\n\n🔹드롭다운 메뉴는 data prop으로부터 생성된 항목 목록을 포함합니다.\n\n🔹리스트의 각 항목은 `li` 요소로 표시됩니다.\n\n🔹hasImage 값이 true일 경우, 각 항목 옆에 이미지가 표시됩니다.\n\n## 사용법: ⤵️\n\n```js\nconst handleSelect = (id: string) => {\n  console.log(`id가 ${id}인 항목을 선택했습니다`);\n};\n\n<Dropdown\n  id=\"person\"\n  title=\"사람 선택\"\n  data={data}\n  hasImage\n  style=\"bg-purple-800\"\n  selectedId=\"3\"\n  onSelect={handleSelect}\n/>;\n```\n\n## ✔️ 여기에 전체 코드가 있어요: 👇\n\nDropdown.tsx\n\n```js\nimport { useEffect, useRef, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { GoChevronDown } from \"react-icons/go\";\nimport useOutsideClick from \"../hooks/useOutsideClick\";\n\ninterface DropdownItem {\n  id: string;\n  name: string;\n  imageUrl?: string;\n}\n\ninterface DropdownProps {\n  id: string;\n  title?: string;\n  data: DropdownItem[];\n  position?: \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\";\n  hasImage?: boolean;\n  style?: string;\n  selectedId?: string;\n  onSelect?: (id: string) => void;\n}\n\nconst Dropdown = ({\n  id,\n  title = \"Select\",\n  data,\n  position = \"bottom-left\",\n  hasImage,\n  style,\n  selectedId,\n  onSelect,\n}: DropdownProps) => {\n  const [isOpen, setIsOpen] = useState < boolean > false;\n  const [selectedItem, setSelectedItem] =\n    (useState < DropdownItem) | (undefined > (selectedId ? data?.find((item) => item.id === selectedId) : undefined));\n\n  const handleChange = (item: DropdownItem) => {\n    setSelectedItem(item);\n    onSelect && onSelect(item.id);\n    setIsOpen(false);\n  };\n\n  useEffect(() => {\n    if (selectedId && data) {\n      const newSelectedItem = data.find((item) => item.id === selectedId);\n      newSelectedItem && setSelectedItem(newSelectedItem);\n    } else {\n      setSelectedItem(undefined);\n    }\n  }, [selectedId, data]);\n\n  const dropdownRef = useRef < HTMLDivElement > null;\n  useOutsideClick({\n    ref: dropdownRef,\n    handler: () => setIsOpen(false),\n  });\n\n  const dropdownClass = classNames(\"absolute bg-gray-100 w-max max-h-52 overflow-y-auto py-3 rounded shadow-md z-10\", {\n    \"top-full right-0 mt-2\": position === \"bottom-right\",\n    \"top-full left-0 mt-2\": position === \"bottom-left\",\n    \"bottom-full right-0 mb-2\": position === \"top-right\",\n    \"bottom-full left-0 mb-2\": position === \"top-left\",\n  });\n\n  return (\n    <div ref={dropdownRef} className=\"relative\">\n      <button\n        id={id}\n        aria-label=\"Toggle dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded={isOpen}\n        type=\"button\"\n        onClick={() => setIsOpen(!isOpen)}\n        className={classNames(\n          \"flex justify-between items-center gap-5 rounded w-full py-2 px-4 bg-blue-500 text-white\",\n          style\n        )}\n      >\n        <span>{selectedItem?.name || title}</span>\n        <GoChevronDown\n          size={20}\n          className={classNames(\"transform duration-500 ease-in-out\", {\n            \"rotate-180\": isOpen,\n          })}\n        />\n      </button>\n      {/* Open */}\n      {isOpen && (\n        <div aria-label=\"Dropdown menu\" className={dropdownClass}>\n          <ul role=\"menu\" aria-labelledby={id} aria-orientation=\"vertical\" className=\"leading-10\">\n            {data?.map((item) => (\n              <li\n                key={item.id}\n                onClick={() => handleChange(item)}\n                className={classNames(\"flex items-center cursor-pointer hover:bg-gray-200 px-3\", {\n                  \"bg-gray-300\": selectedItem?.id === item.id,\n                })}\n              >\n                {hasImage && (\n                  <img\n                    src={item.imageUrl}\n                    alt=\"image\"\n                    loading=\"lazy\"\n                    className=\"w-8 h-8 rounded-full bg-gray-400 object-cover me-2\"\n                  />\n                )}\n                <span>{item.name}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n```\n\n## useOutSideClick Hook Code: ⤵️\n\nuseOutsideClick.tsx\n\n```js\nimport { useEffect } from 'react';\n\ninterface OutsideClickHandlerProps {\n  ref: React.RefObject<HTMLElement>;\n  handler: () => void;\n}\n\nconst useOutsideClick = ({ ref, handler }: OutsideClickHandlerProps) => {\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        handler();\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [ref, handler]);\n};\n\nexport default useOutsideClick;\n```\n\n## 샘플 데이터 (JSON): ⤵️\n\ndata.json\n\n```json\n[\n  {\n    \"id\": \"1\",\n    \"name\": \"Minnie Barrett\",\n    \"imageUrl\": \"https://images.unsplash.com/photo-1534528741775-53994a69daeb?q=80&w=1964&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n  },\n  {\n    \"id\": \"2\",\n    \"name\": \"Andy Holmes\",\n    \"imageUrl\": \"https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n  },\n  {\n    \"id\": \"3\",\n    \"name\": \"Felicia Watts\",\n    \"imageUrl\": \"https://images.unsplash.com/photo-1544005313-94ddf0286df2?q=80&w=1888&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n  },\n  {\n    \"id\": \"4\",\n    \"name\": \"Hailey Green\",\n    \"imageUrl\": \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n  },\n  {\n    \"id\": \"5\",\n    \"name\": \"Jeremiah Hughes\",\n    \"imageUrl\": \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n  },\n  {\n    \"id\": \"6\",\n    \"name\": \"Amy Perkins\",\n    \"imageUrl\": \"https://images.unsplash.com/photo-1587677171791-8b93c752999b?q=80&w=1949&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n  }\n]\n```\n\nGithub 주소:\n\n실시간 데모:\n\n## 결론\n\n요약하자면, React 애플리케이션에서 사용할 수 있는 사용자 정의 Dropdown 컴포넌트가 생성되고 설명되었습니다. 이 컴포넌트는 다양한 위치와 스타일에서 활용될 수 있으며 사용자가 목록에서 항목을 선택할 수 있게 합니다. TypeScript, Tailwind CSS, React Icons 및 Classnames를 사용하여 개발된 이 Dropdown 컴포넌트는 사용자 인터페이스 개발 프로세스에서 상당한 편의성을 제공하며 React 애플리케이션에서 널리 사용될 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-12-BuildingaCustomDropdownComponentinReactStepbyStep_0.png"},"coverImage":"/assets/img/2024-05-12-BuildingaCustomDropdownComponentinReactStepbyStep_0.png","tag":["Tech"],"readingTime":12},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-12-BuildingaCustomDropdownComponentinReactStepbyStep_0.png\" alt=\"이미지\"></p>\n<p>안녕하세요! 이 기사에서는 React 애플리케이션에서 동적으로 사용할 수 있는 사용자 정의 Dropdown 컴포넌트를 소개하려고해요. 이 Dropdown 컴포넌트는 사용자가 목록에서 항목을 선택할 수 있도록 하면서 다양한 위치와 스타일로 표시될 수 있어요. 또한 이미지가 있는 경우와 없는 경우 모두 사용할 수 있어요. 이 컴포넌트는 Typescript, Tailwind CSS, React Icons 및 Classnames와 같은 인기있는 라이브러리를 사용하여 개발되었어요.</p>\n<p>👉 먼저 단계별로 무엇이 일어나고 있는지 설명한 후에 마지막에 전체 코드와 사용법을 추가할 거예요. 준비가 되셨나요? 그럼 시작해봅시다!</p>\n<p><img src=\"/assets/img/2024-05-12-BuildingaCustomDropdownComponentinReactStepbyStep_1.png\" alt=\"이미지\"></p>\n<h2>1. Imports:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useEffect, useRef, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> classNames <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"classnames\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GoChevronDown</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-icons/go\"</span>;\n<span class=\"hljs-keyword\">import</span> useOutsideClick <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../hooks/useOutsideClick\"</span>;\n</code></pre>\n<p>🔸 useEffect, useRef 및 useState ➜ 이들은 상태를 관리하고 DOM 요소에 대한 참조를 만들 때 사용되는 React 훅입니다.</p>\n<p>🔸 classNames ➜ 이 라이브러리는 조건부로 classNames을 결합하는 데 사용됩니다.</p>\n<p>🔹 goChevronDown ➜ 이 아이콘 컴포넌트는 드롭다운 토글 버튼에 사용됩니다.</p>\n<p>🔹 useOutsideClick ➜ 이 사용자 정의 후크는 지정된 요소 외부를 클릭 감지하는 데 사용됩니다.</p>\n<h2>2. 인터페이스:</h2>\n<pre><code class=\"hljs language-js\">인터페이스 <span class=\"hljs-title class_\">DropdownItem</span> {\n  <span class=\"hljs-attr\">id</span>: string;\n  <span class=\"hljs-attr\">name</span>: string;\n  imageUrl?: string;\n}\n\n인터페이스 <span class=\"hljs-title class_\">DropdownProps</span> {\n  <span class=\"hljs-attr\">id</span>: string;\n  title?: string;\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DropdownItem</span>[];\n  position?: <span class=\"hljs-string\">\"bottom-right\"</span> | <span class=\"hljs-string\">\"bottom-left\"</span> | <span class=\"hljs-string\">\"top-right\"</span> | <span class=\"hljs-string\">\"top-left\"</span>;\n  hasImage?: boolean;\n  style?: string;\n  selectedId?: string;\n  onSelect?: <span class=\"hljs-function\">(<span class=\"hljs-params\">id: string</span>) =></span> <span class=\"hljs-keyword\">void</span>;\n}\n</code></pre>\n<p>🔹DropdownItem➜ DropdownItem을 정의합니다. 이 인터페이스는 각 드롭다운 아이템에 필요한 속성인 id, name 및 옵션으로 imageUrl을 지정합니다.</p>\n<p>🔹DropdownProps➜ 이 인터페이스는 Dropdown 컴포넌트에 전달할 수 있는 프로퍼티들을 지정합니다. 이 프로퍼티들의 설명은 다음과 같습니다:</p>\n<p><img src=\"/assets/img/2024-05-12-BuildingaCustomDropdownComponentinReactStepbyStep_2.png\" alt=\"이미지\"></p>\n<p>📌 id: Dropdown 컴포넌트의 고유 식별자입니다.</p>\n<p>📌 제목: 드롭다운이 열릴 때 표시되는 기본 제목. 기본 제목은 \"Select\"입니다.</p>\n<p>📌 데이터: 드롭다운 콘텐츠를 구성하는 항목 목록.</p>\n<p>📌 위치: 드롭다운의 위치를 버튼을 기준으로 지정합니다. (\"bottom-right\", \"bottom-left\", \"top-right\", \"top-left\"). 기본 위치는 \"bottom-left\"입니다.</p>\n<p>📌 이미지 포함 여부: 드롭다운 항목에 이미지가 있는지를 나타내는 부울 값.</p>\n<p>📌 스타일 : 드롭다운 컴포넌트에 적용할 추가 스타일입니다.</p>\n<p>📌 selectedId : 초기 선택 항목의 식별자입니다.</p>\n<p>📌 onSelect : 항목이 선택될 때 호출되는 콜백 함수입니다.</p>\n<p><img src=\"/assets/img/2024-05-12-BuildingaCustomDropdownComponentinReactStepbyStep_3.png\" alt=\"이미지\"></p>\n<p>이 프롭들은 Dropdown 컴포넌트를 다양한 사용 사례에 맞게 사용자 정의할 수 있도록 해 줍니다. 사용자가 필요에 맞게 드랍다운의 동작, 내용, 외관을 맞춤 설정할 수 있게 해줍니다.</p>\n<h2>3. Dropdown 컴포넌트 생성:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Dropdown</span> = (<span class=\"hljs-params\">{\n  id,\n  title = <span class=\"hljs-string\">\"Select\"</span>, //기본 값\n  data,\n  position = <span class=\"hljs-string\">\"bottom-left\"</span>, //기본 값\n  hasImage,\n  style,\n  selectedId,\n  onSelect,\n}: DropdownProps</span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{dropdownRef}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"relative\"</span>></span>\n      {/* ... */}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Dropdown</span>;\n</code></pre>\n<p>🔹Dropdown 컴포넌트는 사용자 정의 드롭다운 메뉴 컴포넌트이며 위의 프롭을 허용합니다.</p>\n<h2>4. 상태 변수:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> [isOpen, setIsOpen] = useState &#x3C; boolean > <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-keyword\">const</span> [selectedItem, setSelectedItem] =\n  (useState &#x3C; <span class=\"hljs-title class_\">DropdownItem</span>) | (<span class=\"hljs-literal\">undefined</span> > (selectedId ? data?.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =></span> item.<span class=\"hljs-property\">id</span> === selectedId) : <span class=\"hljs-literal\">undefined</span>));\n</code></pre>\n<p>🔹isOpen➜ 드롭다운 메뉴의 열기/닫기 상태를 관리합니다.</p>\n<p>🔹selectedItem➜ 드롭다운 메뉴에서 현재 선택된 항목을 추적합니다.</p>\n<h2>5. 이벤트 핸들러:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleChange</span> = (<span class=\"hljs-params\">item: DropdownItem</span>) => {\n  <span class=\"hljs-title function_\">setSelectedItem</span>(item);\n  onSelect &#x26;&#x26; <span class=\"hljs-title function_\">onSelect</span>(item.<span class=\"hljs-property\">id</span>);\n  <span class=\"hljs-title function_\">setIsOpen</span>(<span class=\"hljs-literal\">false</span>);\n};\n</code></pre>\n<p>🔹handleChange➜ 드롭다운 메뉴에서 항목을 선택하는 핸들러입니다. 선택된 항목을 업데이트하고, onSelect 콜백을 호출(제공된 경우)하며, 드롭다운 메뉴를 닫습니다.</p>\n<h2>6. useEffect 훅:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">if</span> (selectedId &#x26;&#x26; data) {\n    <span class=\"hljs-keyword\">const</span> newSelectedItem = data.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =></span> item.<span class=\"hljs-property\">id</span> === selectedId);\n    newSelectedItem &#x26;&#x26; <span class=\"hljs-title function_\">setSelectedItem</span>(newSelectedItem);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-title function_\">setSelectedItem</span>(<span class=\"hljs-literal\">undefined</span>);\n  }\n}, [selectedId, data]);\n</code></pre>\n<p>🔹 이 useEffect 훅은 selectedId와 data의 변경 사항을 감지합니다. 둘 중 하나가 변경되면 데이터에서 selectedId와 일치하는 항목을 찾아 selectedItem에 설정합니다.</p>\n<h2>7. Ref:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> dropdownRef = useRef &#x3C; <span class=\"hljs-title class_\">HTMLDivElement</span> > <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-title function_\">useOutsideClick</span>({\n  <span class=\"hljs-attr\">ref</span>: dropdownRef,\n  <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">setIsOpen</span>(<span class=\"hljs-literal\">false</span>),\n});\n</code></pre>\n<p>🔹 dropdownRef➜ 드롭다운 메뉴 외부 클릭을 감지하는 데 사용되는 Ref입니다.</p>\n<h2>8. CSS 클래스:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> dropdownClass = <span class=\"hljs-title function_\">classNames</span>(<span class=\"hljs-string\">\"absolute bg-gray-100 w-max max-h-52 overflow-y-auto py-3 rounded shadow-md z-10\"</span>, {\n  <span class=\"hljs-string\">\"top-full right-0 mt-2\"</span>: position === <span class=\"hljs-string\">\"bottom-right\"</span>,\n  <span class=\"hljs-string\">\"top-full left-0 mt-2\"</span>: position === <span class=\"hljs-string\">\"bottom-left\"</span>,\n  <span class=\"hljs-string\">\"bottom-full right-0 mb-2\"</span>: position === <span class=\"hljs-string\">\"top-right\"</span>,\n  <span class=\"hljs-string\">\"bottom-full left-0 mb-2\"</span>: position === <span class=\"hljs-string\">\"top-left\"</span>,\n});\n</code></pre>\n<p>🔹 dropdownClass➜ 위치 prop에 따라 드롭다운 메뉴를 배치하기 위해 CSS 클래스를 동적으로 계산합니다.</p>\n<h2>9. 드롭다운 토글 버튼 생성:</h2>\n<pre><code class=\"hljs language-js\">&#x3C;button\n  id={id}\n  aria-label=<span class=\"hljs-string\">\"드롭다운 토글\"</span>\n  aria-haspopup=<span class=\"hljs-string\">\"true\"</span>\n  aria-expanded={isOpen}\n  type=<span class=\"hljs-string\">\"button\"</span>\n  onClick={<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">setIsOpen</span>(!isOpen)}\n  className={<span class=\"hljs-title function_\">classNames</span>(\n    <span class=\"hljs-string\">\"flex justify-between items-center gap-5 rounded w-full py-2 px-4 bg-blue-500 text-white\"</span>,\n    style\n  )}\n>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>{selectedItem?.name || title}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">GoChevronDown</span>\n    <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">{20}</span>\n    <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{classNames(</span>\"<span class=\"hljs-attr\">transform</span> <span class=\"hljs-attr\">duration-500</span> <span class=\"hljs-attr\">ease-in-out</span>\", {\n      \"<span class=\"hljs-attr\">rotate-180</span>\"<span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">isOpen</span>,\n    })}\n  /></span></span>\n&#x3C;/button>\n</code></pre>\n<p>🔹버튼 엘리먼트는 제목 또는 선택한 항목의 텍스트와 화살표 아이콘이 들어 있습니다.</p>\n<p>🔹클릭할 때마다 버튼은 isOpen 상태를 토글합니다.</p>\n<h2>10. 드롭다운 콘텐츠 생성:</h2>\n<pre><code class=\"hljs language-js\">{\n  isOpen &#x26;&#x26; (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">\"드롭다운 메뉴\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{dropdownClass}</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">role</span>=<span class=\"hljs-string\">\"menu\"</span> <span class=\"hljs-attr\">aria-labelledby</span>=<span class=\"hljs-string\">{id}</span> <span class=\"hljs-attr\">aria-orientation</span>=<span class=\"hljs-string\">\"vertical\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"leading-10\"</span>></span>\n        {data?.map((item) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>\n            <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item.id}</span>\n            <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> handleChange(item)}\n            className={classNames(\"flex items-center cursor-pointer hover:bg-gray-200 px-3\", {\n              \"bg-gray-300\": selectedItem?.id === item.id,\n            })}\n          >\n            {hasImage &#x26;&#x26; (\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span>\n                <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{item.imageUrl}</span>\n                <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"이미지\"</span>\n                <span class=\"hljs-attr\">loading</span>=<span class=\"hljs-string\">\"lazy\"</span>\n                <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-8 h-8 rounded-full bg-gray-400 object-cover me-2\"</span>\n              /></span>\n            )}\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>{item.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>🔹만약 드롭다운이 열려있으면(isOpen이 true), 드롭다운 메뉴를 나타내는 div가 렌더링됩니다.</p>\n<p>🔹드롭다운 메뉴는 data prop으로부터 생성된 항목 목록을 포함합니다.</p>\n<p>🔹리스트의 각 항목은 <code>li</code> 요소로 표시됩니다.</p>\n<p>🔹hasImage 값이 true일 경우, 각 항목 옆에 이미지가 표시됩니다.</p>\n<h2>사용법: ⤵️</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSelect</span> = (<span class=\"hljs-params\">id: string</span>) => {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`id가 <span class=\"hljs-subst\">${id}</span>인 항목을 선택했습니다`</span>);\n};\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Dropdown</span>\n  <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"person\"</span>\n  <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"사람 선택\"</span>\n  <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{data}</span>\n  <span class=\"hljs-attr\">hasImage</span>\n  <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"bg-purple-800\"</span>\n  <span class=\"hljs-attr\">selectedId</span>=<span class=\"hljs-string\">\"3\"</span>\n  <span class=\"hljs-attr\">onSelect</span>=<span class=\"hljs-string\">{handleSelect}</span>\n/></span></span>;\n</code></pre>\n<h2>✔️ 여기에 전체 코드가 있어요: 👇</h2>\n<p>Dropdown.tsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useEffect, useRef, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> classNames <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"classnames\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GoChevronDown</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-icons/go\"</span>;\n<span class=\"hljs-keyword\">import</span> useOutsideClick <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../hooks/useOutsideClick\"</span>;\n\ninterface <span class=\"hljs-title class_\">DropdownItem</span> {\n  <span class=\"hljs-attr\">id</span>: string;\n  <span class=\"hljs-attr\">name</span>: string;\n  imageUrl?: string;\n}\n\ninterface <span class=\"hljs-title class_\">DropdownProps</span> {\n  <span class=\"hljs-attr\">id</span>: string;\n  title?: string;\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DropdownItem</span>[];\n  position?: <span class=\"hljs-string\">\"bottom-right\"</span> | <span class=\"hljs-string\">\"bottom-left\"</span> | <span class=\"hljs-string\">\"top-right\"</span> | <span class=\"hljs-string\">\"top-left\"</span>;\n  hasImage?: boolean;\n  style?: string;\n  selectedId?: string;\n  onSelect?: <span class=\"hljs-function\">(<span class=\"hljs-params\">id: string</span>) =></span> <span class=\"hljs-keyword\">void</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Dropdown</span> = (<span class=\"hljs-params\">{\n  id,\n  title = <span class=\"hljs-string\">\"Select\"</span>,\n  data,\n  position = <span class=\"hljs-string\">\"bottom-left\"</span>,\n  hasImage,\n  style,\n  selectedId,\n  onSelect,\n}: DropdownProps</span>) => {\n  <span class=\"hljs-keyword\">const</span> [isOpen, setIsOpen] = useState &#x3C; boolean > <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">const</span> [selectedItem, setSelectedItem] =\n    (useState &#x3C; <span class=\"hljs-title class_\">DropdownItem</span>) | (<span class=\"hljs-literal\">undefined</span> > (selectedId ? data?.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =></span> item.<span class=\"hljs-property\">id</span> === selectedId) : <span class=\"hljs-literal\">undefined</span>));\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleChange</span> = (<span class=\"hljs-params\">item: DropdownItem</span>) => {\n    <span class=\"hljs-title function_\">setSelectedItem</span>(item);\n    onSelect &#x26;&#x26; <span class=\"hljs-title function_\">onSelect</span>(item.<span class=\"hljs-property\">id</span>);\n    <span class=\"hljs-title function_\">setIsOpen</span>(<span class=\"hljs-literal\">false</span>);\n  };\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (selectedId &#x26;&#x26; data) {\n      <span class=\"hljs-keyword\">const</span> newSelectedItem = data.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =></span> item.<span class=\"hljs-property\">id</span> === selectedId);\n      newSelectedItem &#x26;&#x26; <span class=\"hljs-title function_\">setSelectedItem</span>(newSelectedItem);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-title function_\">setSelectedItem</span>(<span class=\"hljs-literal\">undefined</span>);\n    }\n  }, [selectedId, data]);\n\n  <span class=\"hljs-keyword\">const</span> dropdownRef = useRef &#x3C; <span class=\"hljs-title class_\">HTMLDivElement</span> > <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-title function_\">useOutsideClick</span>({\n    <span class=\"hljs-attr\">ref</span>: dropdownRef,\n    <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">setIsOpen</span>(<span class=\"hljs-literal\">false</span>),\n  });\n\n  <span class=\"hljs-keyword\">const</span> dropdownClass = <span class=\"hljs-title function_\">classNames</span>(<span class=\"hljs-string\">\"absolute bg-gray-100 w-max max-h-52 overflow-y-auto py-3 rounded shadow-md z-10\"</span>, {\n    <span class=\"hljs-string\">\"top-full right-0 mt-2\"</span>: position === <span class=\"hljs-string\">\"bottom-right\"</span>,\n    <span class=\"hljs-string\">\"top-full left-0 mt-2\"</span>: position === <span class=\"hljs-string\">\"bottom-left\"</span>,\n    <span class=\"hljs-string\">\"bottom-full right-0 mb-2\"</span>: position === <span class=\"hljs-string\">\"top-right\"</span>,\n    <span class=\"hljs-string\">\"bottom-full left-0 mb-2\"</span>: position === <span class=\"hljs-string\">\"top-left\"</span>,\n  });\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{dropdownRef}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"relative\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">\"Toggle dropdown\"</span>\n        <span class=\"hljs-attr\">aria-haspopup</span>=<span class=\"hljs-string\">\"true\"</span>\n        <span class=\"hljs-attr\">aria-expanded</span>=<span class=\"hljs-string\">{isOpen}</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span>\n        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setIsOpen(!isOpen)}\n        className={classNames(\n          \"flex justify-between items-center gap-5 rounded w-full py-2 px-4 bg-blue-500 text-white\",\n          style\n        )}\n      >\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>{selectedItem?.name || title}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">GoChevronDown</span>\n          <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">{20}</span>\n          <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{classNames(</span>\"<span class=\"hljs-attr\">transform</span> <span class=\"hljs-attr\">duration-500</span> <span class=\"hljs-attr\">ease-in-out</span>\", {\n            \"<span class=\"hljs-attr\">rotate-180</span>\"<span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">isOpen</span>,\n          })}\n        /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      {/* Open */}\n      {isOpen &#x26;&#x26; (\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">\"Dropdown menu\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{dropdownClass}</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">role</span>=<span class=\"hljs-string\">\"menu\"</span> <span class=\"hljs-attr\">aria-labelledby</span>=<span class=\"hljs-string\">{id}</span> <span class=\"hljs-attr\">aria-orientation</span>=<span class=\"hljs-string\">\"vertical\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"leading-10\"</span>></span>\n            {data?.map((item) => (\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>\n                <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item.id}</span>\n                <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> handleChange(item)}\n                className={classNames(\"flex items-center cursor-pointer hover:bg-gray-200 px-3\", {\n                  \"bg-gray-300\": selectedItem?.id === item.id,\n                })}\n              >\n                {hasImage &#x26;&#x26; (\n                  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span>\n                    <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{item.imageUrl}</span>\n                    <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"image\"</span>\n                    <span class=\"hljs-attr\">loading</span>=<span class=\"hljs-string\">\"lazy\"</span>\n                    <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-8 h-8 rounded-full bg-gray-400 object-cover me-2\"</span>\n                  /></span>\n                )}\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>{item.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n              <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n            ))}\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      )}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Dropdown</span>;\n</code></pre>\n<h2>useOutSideClick Hook Code: ⤵️</h2>\n<p>useOutsideClick.tsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\ninterface <span class=\"hljs-title class_\">OutsideClickHandlerProps</span> {\n  <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">RefObject</span>&#x3C;<span class=\"hljs-title class_\">HTMLElement</span>>;\n  <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">void</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useOutsideClick</span> = (<span class=\"hljs-params\">{ ref, handler }: OutsideClickHandlerProps</span>) => {\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleClickOutside</span> = (<span class=\"hljs-params\">event: MouseEvent</span>) => {\n      <span class=\"hljs-keyword\">if</span> (ref.<span class=\"hljs-property\">current</span> &#x26;&#x26; !ref.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">contains</span>(event.<span class=\"hljs-property\">target</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Node</span>)) {\n        <span class=\"hljs-title function_\">handler</span>();\n      }\n    };\n\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'mousedown'</span>, handleClickOutside);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">'mousedown'</span>, handleClickOutside);\n    };\n  }, [ref, handler]);\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useOutsideClick;\n</code></pre>\n<h2>샘플 데이터 (JSON): ⤵️</h2>\n<p>data.json</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">[</span>\n  <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"1\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Minnie Barrett\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"imageUrl\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://images.unsplash.com/photo-1534528741775-53994a69daeb?q=80&#x26;w=1964&#x26;auto=format&#x26;fit=crop&#x26;ixlib=rb-4.0.3&#x26;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"2\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Andy Holmes\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"imageUrl\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?q=80&#x26;w=1887&#x26;auto=format&#x26;fit=crop&#x26;ixlib=rb-4.0.3&#x26;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"3\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Felicia Watts\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"imageUrl\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://images.unsplash.com/photo-1544005313-94ddf0286df2?q=80&#x26;w=1888&#x26;auto=format&#x26;fit=crop&#x26;ixlib=rb-4.0.3&#x26;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"4\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Hailey Green\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"imageUrl\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://images.unsplash.com/photo-1494790108377-be9c29b29330?q=80&#x26;w=1887&#x26;auto=format&#x26;fit=crop&#x26;ixlib=rb-4.0.3&#x26;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"5\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Jeremiah Hughes\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"imageUrl\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?q=80&#x26;w=1887&#x26;auto=format&#x26;fit=crop&#x26;ixlib=rb-4.0.3&#x26;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"6\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Amy Perkins\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"imageUrl\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://images.unsplash.com/photo-1587677171791-8b93c752999b?q=80&#x26;w=1949&#x26;auto=format&#x26;fit=crop&#x26;ixlib=rb-4.0.3&#x26;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">]</span>\n</code></pre>\n<p>Github 주소:</p>\n<p>실시간 데모:</p>\n<h2>결론</h2>\n<p>요약하자면, React 애플리케이션에서 사용할 수 있는 사용자 정의 Dropdown 컴포넌트가 생성되고 설명되었습니다. 이 컴포넌트는 다양한 위치와 스타일에서 활용될 수 있으며 사용자가 목록에서 항목을 선택할 수 있게 합니다. TypeScript, Tailwind CSS, React Icons 및 Classnames를 사용하여 개발된 이 Dropdown 컴포넌트는 사용자 인터페이스 개발 프로세스에서 상당한 편의성을 제공하며 React 애플리케이션에서 널리 사용될 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}