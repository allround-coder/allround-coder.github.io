{"pageProps":{"post":{"title":"리액트 타입스크립트 프로젝트에서 ESLint 설정하기 2022","description":"","date":"2024-05-12 22:17","slug":"2024-05-12-SettingESLintonaReactTypescriptproject2022","content":"\n\n<img src=\"/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_0.png\" />\n\n# 소개\n\n내 React Typescript 프로젝트에 ESLint를 설치하고 이해하려는 데 많은 어려움을 겪은 후, React Typescript 프로젝트에 ESLint를 설정하는 확정 가이드를 작성하기로 결정했습니다.\n\n이 튜토리얼의 주요 목표는 단계별로 설정하고 추가 또는 실행된 각 줄을 설명하는 것입니다. 단순히 여러 구성을 가진 많은 파일을 제공하고 무엇이 일어나고 있는지를 이해할 수 있기를 바랄 뿐인 대신 설명합니다.\n\n\n\n그럼 시작해볼까요!\n\n## 준비물\n\n참고: Node 버전 `= 10`이 설치되어 있어야 합니다. 설치되어 있지 않다면 NodeJS 웹사이트로 이동하여 로컬 머신에 다운로드하고 설치해 주세요. (https://nodejs.org/en/)\n\n## 단계 1: TypeScript로 React 프로젝트 생성\n\n\n\n다음 명령어는 my-app이라는 폴더 내에 프로젝트를 생성합니다.\n\n터미널에서 다음을 실행하세요:\n\n```js\nnpx create-react-app my-app --template typescript\n```\n\n# 단계 2: React 프로젝트에서 미리 설정된 ESLint 구성 제거하기\n\n\n\n래스크는 eslint 설정이 미리 설정되어 있어요. 이 설정을 제거해서 더 나은 설정을 할 수 있도록 해봐요. 이를 위해 'package.json' 파일에서 아래 코드를 제거해주세요.\n\n```js\n\"eslintConfig\": {\n   \"extends\":[\n      \"react-app\",\n      \"react-app/jest\"\n   ]\n}\n```\n\n# 단계 3: ESLint 패키지 설치하기\n\n프로젝트 디렉토리 안에서 터미널을 열어주세요.\n\n\n\n터미널에서 다음을 실행해 주세요:\n\n```js\nnpm install eslint --save-dev\n```\n\n위 명령을 실행하면 'package.json' 파일에서 \"eslint\"가 개발용 종속성으로 추가된 것을 확인할 수 있습니다.\n\n```js\n\"devDependencies\": {\n   \"eslint\": \"^7.20.0\"\n}\n```\n\n\n\n# 단계 4: ESLint 설정\n\n프로젝트 디렉토리 안에서 터미널을 열어주세요.\n\n터미널에서 다음을 실행하세요:\n\n\n\n```js\nnpx eslint --init\n```\n\n이 명령을 실행할 때 설정에 관한 몇 가지 질문에 답변해야합니다.\n\n이후, 설치해야 할 종속 항목을 확인한 다음 다음과 같이 물어볼 것입니다:\n\n그런 다음 필요한 모든 패키지를 설치합니다. 설치 프로세스가 완료되면 \"package.json\" 파일의 'devDependencies'는 다음과 같이 보여야 합니다:\n\n\n\n```js\n\"devDependencies\": {\n\"@typescript-eslint/eslint-plugin\": \"^4.15.1\",\n\"@typescript-eslint/parser\": \"^4.15.1\",\n\"eslint\": \"^7.20.0\",\n\"eslint-config-airbnb\": \"^18.2.1\",\n\"eslint-plugin-import\": \"^2.22.1\",\n\"eslint-plugin-jsx-a11y\": \"^6.4.1\",\n\"eslint-plugin-react\": \"^7.22.0\",\n\"eslint-plugin-react-hooks\": \"^4.2.0\"\n}\n```\n\nPS: 위 예시와 버전이 일치하지 않아도 괜찮아요.\n\n# Step 5: ESLint 실행하기\n\n프로젝트 디렉토리에서 터미널을 열어주세요.\n\n\n\nESLint를 실행하고 가리키는 오류를 확인하려면 다음을 실행하세요:\n\n```js\nnpx eslint <대상파일>\n```\n\n일부 오류를 자동으로 수정하려면 '--fix'를 사용할 수 있어요:\n\n```js\nnpx eslint <대상파일> --fix\n```\n\n\n\n만약 경고를 무시하고 싶다면 ‘--quiet’를 사용할 수 있어요.\n\n```js\nnpx eslint <대상파일> --quiet\n```\n\n# 단계 5.1: 실행해봅시다!\n\n만약 'src' 디렉토리 안의 모든 파일에 대해서 eslint를 실행하면 35개의 오류가 나타날 거예요. 와우!\n\n\n\n```js\nnpx eslint src/* \n```\n\nESLint 출력:\n\n<img src=\"/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_1.png\" />\n\n자동 수정으로 실행하면 무서운 부분은 줄어들었지만 해결해야 할 오류가 여전히 22개 남아 있어요. 대박이에요!\n\n\n\n```bash\nnpx eslint src/* --fix\n```\n\nESLint의 출력:\n\n![Setting ESLint on a React Typescript project](/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_2.png)\n\n그래서 우리는 모든 단계를 거치고 Typescript로 ReactJS의 '안녕, 세계' 프로젝트를 수행했는데도 이 모든 오류가 발생했습니다. 대부분의 오류는 확장 파일 오류나 심지어 React 자체의 사용과 같은 무의미한 것들이었습니다.\n\n\n\n짜증나는 일이죠?\n\n좋은 소식은 이미 이 지옥을 겪어가며 이 문제들을 해결했고, 이제 ESLint를 제대로 사용할 수 있도록 모든 구성을 끝마칠 수 있습니다. 이 문제를 하나씩 살펴보고 어떻게 해결해야 하는지 알아보겠습니다!\n\n## 남은 문제 해결하기\n\n### 문제: \"'no-use-before-define'\"\n\n\n\n에러 샘플: 'React'가 정의되기 전에 사용되었습니다.\n\n## 해결 방법\n\n'eslintrc.json' 파일에서 \"rules\" 섹션 아래에 다음을 추가하십시오:\n\n```js\n\"rules\": {\n  \"no-use-before-define\": \"off\",\n  \"@typescript-eslint/no-use-before-define\": [\"error\"]\n}\n```\n\n\n\n위 설명은 이 스택 오버플로 포스트에 있어요 (https://stackoverflow.com/questions/63818415/react-was-used-before-it-was-defined/64024916#64024916)\n\n# 문제: \"'react/jsx-filename-extension\"\n\n에러 샘플: 확장자 '.tsx'를 가진 파일에서 JSX가 허용되지 않음\n\n## 해결책\n\n\n\n'eslintrc.json' 파일에서 \"rules\" 아래에 다음을 추가하세요:\n\n```js\n\"rules\": {\n...\n\"react/jsx-filename-extension\": [ \"warn\", {\"extensions\": [\".tsx\"]} ]\n}\n```\n\n# 문제: \"import/no-unresolved\"\n\n에러 샘플: './App' 모듈에 대한 경로를 해결할 수 없음\n\n\n\n## 해결 방법\n\n- 프로젝트 디렉토리 내에서 터미널을 열고 eslint-import-resolver-typescript 패키지를 설치하세요.\n\n```js\nnpm install eslint-import-resolver-typescript --save-dev\n```\n\n- 'eslintrc.json' 파일에 다음과 같이 새로운 \"settings\" 속성을 추가하세요:\n\n\n\n```json\n\"settings\": {\n    \"import/resolver\": {\n        \"typescript\": {}\n    }\n}\n```\n\n# 문제: \"import/extensions\"\n\n에러 샘플: './App'에 대한 'tsx' 파일 확장자 누락\n\n## 해결책\n\n\n\n'eslintrc.json' 파일에서 \"rules\" 아래에 다음을 추가해 주세요:\n\n```js\n\"rules\": {\n…\n\"import/extensions\": [\n\"error\",\n\"ignorePackages\",\n{\n\"ts\": \"never\",\n\"tsx\": \"never\"\n}\n]\n}\n```\n\n# 문제: \"no-undef\"\n\n에러 샘플: 'test'가 정의되지 않았습니다\n\n\n\n## 해결 방법\n\n'eslintrc.json' 파일에서 \"extends\" 항목에 \"plugin:@typescript-eslint/recommended\"를 추가하십시오:\n\n```js\n\"extends\": [\n…\n\"plugin:@typescript-eslint/recommended\"\n],\n```\n\n# 문제: \"no-shadow\"\n\n\n\n에러 샘플: 'Enum'이 이미 상위 스코프에서 선언되었습니다.\n\n## 해결 방법\n\n‘eslintrc.json’ 파일에서 \"rules\" 아래에 다음을 추가하십시오:\n\n```js\n\"rules\":{\n…\n\"no-shadow\": \"off\",\n\"@typescript-eslint/no-shadow\": [\"error\"]\n}\n```\n\n\n\n스택 오버플로우 게시물에 설명이 있습니다(https://stackoverflow.com/questions/63961803/eslint-says-all-enums-in-typescript-app-are-already-declared-in-the-upper-scope)\n\n# 문제: 'js', 'jsx', 'ts', 또는 'tsx' 확장자 파일이 아닌 파일에 대한 오류\n\n## 해결책:\n\n‘.eslintignore’ 파일에 추가하여 ESLint가 특정 파일을 무시하도록 할 수 있습니다.\n\n\n\n그럼,\n\n- 프로젝트 루트에 '.eslintignore' 파일을 만듭니다.\n- 다음 텍스트를 추가합니다:\n\n```js\n*.css\n*.svg\n```\n\n# 추가:\n\n\n\n# 적용해 볼 좋은 규칙들\n\n## 모든 함수에 명시적인 반환 유형을 강제로 적용하기\n\n‘eslintrc.json’ 파일에서 \"rules\" 아래에 다음을 추가해주세요:\n\n```js\n\"rules\":{\n...\n\"@typescript-eslint/explicit-function-return-type\": [\n\"error\",\n{\n\"allowExpressions\": true\n}\n]\n}\n```\n\n\n\n## 코드 라인의 최대 길이\n\n'.'eslintrc.json' 파일에 \"rules\" 항목 아래에 다음 코드를 추가해주세요:\n\n```js\n\"rules\":{\n…\n\"max-len\": [\"warn\", { \"code\": 80 }]\n}\n```\n\n## React Hooks 규칙\n\n\n\n'**eslintrc.json**' 파일에서 \"plugins\" 섹션에 다음을 추가해주세요:\n\n```js\n\"plugins\": [\n…\n\"react-hooks\"\n],\n```\n\n그리고 \"rules\" 섹션에도 다음을 추가해주세요:\n\n```js\n\"rules\":{\n…\n\"react-hooks/rules-of-hooks\": \"error\",\n\"react-hooks/exhaustive-deps\": \"warn\"\n}\n```\n\n\n\n# 무시할 몇 가지 규칙:\n\n## 기본 내보내기 사용 선호\n\n`eslintrc.json`에서 \"rules\" 아래에 다음을 추가해주세요:\n\n```js\n\"rules\":{\n…\n\"import/prefer-default-export\": \"off\"\n}\n```\n\n\n\n## 프롭 타입 규칙\n\n`eslintrc.json` 파일에서 \"rules\" 항목에 다음 내용을 추가해 주세요:\n\n```js\n\"rules\":{\n…\n\"react/prop-types\": \"off\"\n}\n```\n\n# 결론\n\n\n\n그래서 이러한 구성을 통해 ReactJS with Typescript 프로젝트의 코드 품질을 향상시킬 수 있습니다. 즐기세요! :)\n\n# VS Code: 저장할 때 파일에서 ESLint 자동 수정 실행\n\n게다가, VS Code에서 자동 수정을 구성하는 방법을 보여드리겠습니다. 그러나 이는 선택 사항입니다. 코드를 저장할 때마다 ESLint를 자동 수정하려면 다음 단계를 수행하실 수 있습니다.\n\n- 프로젝트 루트에 '.vscode' 폴더를 생성합니다.\n- '.vscode/' 폴더 안에 'settings.json' 파일을 생성하고 다음 코드를 삽입합니다.\n\n\n\n<img src=\"/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_3.png\" />\n\n```js\n{\n\"editor.defaultFormatter\": \"dbaeumer.vscode-eslint\",\n\"editor.formatOnSave\": true,\n\"eslint.alwaysShowStatus\": true,\n\"editor.codeActionsOnSave\": {\n\"source.fixAll.eslint\": true\n}\n}\n```\n\n- VS Code ESLint 확장 프로그램 설치\n\nVS Code 'Extensions' 섹션으로 이동하여 수동으로 설치할 수 있습니다:\n\n\n\n![이미지](/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_4.png)\n\n또는 VS Code 빠른 열기(Ctrl+P)를 실행하고 다음 몤령어를 실행하세요:\n\n```js\next install dbaeumer.vscode-eslint\n```\n\n- VS Code에서 ESLint 익스텐션 사용 허용하기:\n\n\n\n처음 사용하는 경우 ESLint 확장 프로그램이 차단될 것입니다. 그럼에도 불구하고 허용해야 합니다:\n\n1. 상태 표시줄 아이콘을 클릭합니다.\n\n![이미지](/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_5.png)\n\n2. 팝업이 나타납니다. '허용' 옵션을 선택합니다.\n\n\n\n<img src=\"/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_6.png\" />\n\n완료되었습니다! 이제 모든 파일을 저장할 때마다 ESLint 규칙을 자동으로 수정할 수 있습니다.\n\n# 참고","ogImage":{"url":"/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_0.png"},"coverImage":"/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>소개</h1>\n<p>내 React Typescript 프로젝트에 ESLint를 설치하고 이해하려는 데 많은 어려움을 겪은 후, React Typescript 프로젝트에 ESLint를 설정하는 확정 가이드를 작성하기로 결정했습니다.</p>\n<p>이 튜토리얼의 주요 목표는 단계별로 설정하고 추가 또는 실행된 각 줄을 설명하는 것입니다. 단순히 여러 구성을 가진 많은 파일을 제공하고 무엇이 일어나고 있는지를 이해할 수 있기를 바랄 뿐인 대신 설명합니다.</p>\n<p>그럼 시작해볼까요!</p>\n<h2>준비물</h2>\n<p>참고: Node 버전 <code>= 10</code>이 설치되어 있어야 합니다. 설치되어 있지 않다면 NodeJS 웹사이트로 이동하여 로컬 머신에 다운로드하고 설치해 주세요. (<a href=\"https://nodejs.org/en/\" rel=\"nofollow\" target=\"_blank\">https://nodejs.org/en/</a>)</p>\n<h2>단계 1: TypeScript로 React 프로젝트 생성</h2>\n<p>다음 명령어는 my-app이라는 폴더 내에 프로젝트를 생성합니다.</p>\n<p>터미널에서 다음을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">npx create-react-app my-app --template typescript\n</code></pre>\n<h1>단계 2: React 프로젝트에서 미리 설정된 ESLint 구성 제거하기</h1>\n<p>래스크는 eslint 설정이 미리 설정되어 있어요. 이 설정을 제거해서 더 나은 설정을 할 수 있도록 해봐요. 이를 위해 'package.json' 파일에서 아래 코드를 제거해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"eslintConfig\"</span>: {\n   <span class=\"hljs-string\">\"extends\"</span>:[\n      <span class=\"hljs-string\">\"react-app\"</span>,\n      <span class=\"hljs-string\">\"react-app/jest\"</span>\n   ]\n}\n</code></pre>\n<h1>단계 3: ESLint 패키지 설치하기</h1>\n<p>프로젝트 디렉토리 안에서 터미널을 열어주세요.</p>\n<p>터미널에서 다음을 실행해 주세요:</p>\n<pre><code class=\"hljs language-js\">npm install eslint --save-dev\n</code></pre>\n<p>위 명령을 실행하면 'package.json' 파일에서 \"eslint\"가 개발용 종속성으로 추가된 것을 확인할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"devDependencies\"</span>: {\n   <span class=\"hljs-string\">\"eslint\"</span>: <span class=\"hljs-string\">\"^7.20.0\"</span>\n}\n</code></pre>\n<h1>단계 4: ESLint 설정</h1>\n<p>프로젝트 디렉토리 안에서 터미널을 열어주세요.</p>\n<p>터미널에서 다음을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">npx eslint --init\n</code></pre>\n<p>이 명령을 실행할 때 설정에 관한 몇 가지 질문에 답변해야합니다.</p>\n<p>이후, 설치해야 할 종속 항목을 확인한 다음 다음과 같이 물어볼 것입니다:</p>\n<p>그런 다음 필요한 모든 패키지를 설치합니다. 설치 프로세스가 완료되면 \"package.json\" 파일의 'devDependencies'는 다음과 같이 보여야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"devDependencies\"</span>: {\n<span class=\"hljs-string\">\"@typescript-eslint/eslint-plugin\"</span>: <span class=\"hljs-string\">\"^4.15.1\"</span>,\n<span class=\"hljs-string\">\"@typescript-eslint/parser\"</span>: <span class=\"hljs-string\">\"^4.15.1\"</span>,\n<span class=\"hljs-string\">\"eslint\"</span>: <span class=\"hljs-string\">\"^7.20.0\"</span>,\n<span class=\"hljs-string\">\"eslint-config-airbnb\"</span>: <span class=\"hljs-string\">\"^18.2.1\"</span>,\n<span class=\"hljs-string\">\"eslint-plugin-import\"</span>: <span class=\"hljs-string\">\"^2.22.1\"</span>,\n<span class=\"hljs-string\">\"eslint-plugin-jsx-a11y\"</span>: <span class=\"hljs-string\">\"^6.4.1\"</span>,\n<span class=\"hljs-string\">\"eslint-plugin-react\"</span>: <span class=\"hljs-string\">\"^7.22.0\"</span>,\n<span class=\"hljs-string\">\"eslint-plugin-react-hooks\"</span>: <span class=\"hljs-string\">\"^4.2.0\"</span>\n}\n</code></pre>\n<p>PS: 위 예시와 버전이 일치하지 않아도 괜찮아요.</p>\n<h1>Step 5: ESLint 실행하기</h1>\n<p>프로젝트 디렉토리에서 터미널을 열어주세요.</p>\n<p>ESLint를 실행하고 가리키는 오류를 확인하려면 다음을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">npx eslint &#x3C;대상파일>\n</code></pre>\n<p>일부 오류를 자동으로 수정하려면 '--fix'를 사용할 수 있어요:</p>\n<pre><code class=\"hljs language-js\">npx eslint &#x3C;대상파일> --fix\n</code></pre>\n<p>만약 경고를 무시하고 싶다면 ‘--quiet’를 사용할 수 있어요.</p>\n<pre><code class=\"hljs language-js\">npx eslint &#x3C;대상파일> --quiet\n</code></pre>\n<h1>단계 5.1: 실행해봅시다!</h1>\n<p>만약 'src' 디렉토리 안의 모든 파일에 대해서 eslint를 실행하면 35개의 오류가 나타날 거예요. 와우!</p>\n<pre><code class=\"hljs language-js\">npx eslint src<span class=\"hljs-comment\">/* \n</span></code></pre>\n<p>ESLint 출력:</p>\n<p>자동 수정으로 실행하면 무서운 부분은 줄어들었지만 해결해야 할 오류가 여전히 22개 남아 있어요. 대박이에요!</p>\n<pre><code class=\"hljs language-bash\">npx eslint src/* --fix\n</code></pre>\n<p>ESLint의 출력:</p>\n<p><img src=\"/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_2.png\" alt=\"Setting ESLint on a React Typescript project\"></p>\n<p>그래서 우리는 모든 단계를 거치고 Typescript로 ReactJS의 '안녕, 세계' 프로젝트를 수행했는데도 이 모든 오류가 발생했습니다. 대부분의 오류는 확장 파일 오류나 심지어 React 자체의 사용과 같은 무의미한 것들이었습니다.</p>\n<p>짜증나는 일이죠?</p>\n<p>좋은 소식은 이미 이 지옥을 겪어가며 이 문제들을 해결했고, 이제 ESLint를 제대로 사용할 수 있도록 모든 구성을 끝마칠 수 있습니다. 이 문제를 하나씩 살펴보고 어떻게 해결해야 하는지 알아보겠습니다!</p>\n<h2>남은 문제 해결하기</h2>\n<h3>문제: \"'no-use-before-define'\"</h3>\n<p>에러 샘플: 'React'가 정의되기 전에 사용되었습니다.</p>\n<h2>해결 방법</h2>\n<p>'eslintrc.json' 파일에서 \"rules\" 섹션 아래에 다음을 추가하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"rules\"</span>: {\n  <span class=\"hljs-string\">\"no-use-before-define\"</span>: <span class=\"hljs-string\">\"off\"</span>,\n  <span class=\"hljs-string\">\"@typescript-eslint/no-use-before-define\"</span>: [<span class=\"hljs-string\">\"error\"</span>]\n}\n</code></pre>\n<p>위 설명은 이 스택 오버플로 포스트에 있어요 (<a href=\"https://stackoverflow.com/questions/63818415/react-was-used-before-it-was-defined/64024916#64024916\" rel=\"nofollow\" target=\"_blank\">https://stackoverflow.com/questions/63818415/react-was-used-before-it-was-defined/64024916#64024916</a>)</p>\n<h1>문제: \"'react/jsx-filename-extension\"</h1>\n<p>에러 샘플: 확장자 '.tsx'를 가진 파일에서 JSX가 허용되지 않음</p>\n<h2>해결책</h2>\n<p>'eslintrc.json' 파일에서 \"rules\" 아래에 다음을 추가하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"rules\"</span>: {\n...\n<span class=\"hljs-string\">\"react/jsx-filename-extension\"</span>: [ <span class=\"hljs-string\">\"warn\"</span>, {<span class=\"hljs-string\">\"extensions\"</span>: [<span class=\"hljs-string\">\".tsx\"</span>]} ]\n}\n</code></pre>\n<h1>문제: \"import/no-unresolved\"</h1>\n<p>에러 샘플: './App' 모듈에 대한 경로를 해결할 수 없음</p>\n<h2>해결 방법</h2>\n<ul>\n<li>프로젝트 디렉토리 내에서 터미널을 열고 eslint-import-resolver-typescript 패키지를 설치하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">npm install eslint-<span class=\"hljs-keyword\">import</span>-resolver-typescript --save-dev\n</code></pre>\n<ul>\n<li>'eslintrc.json' 파일에 다음과 같이 새로운 \"settings\" 속성을 추가하세요:</li>\n</ul>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">\"settings\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"import/resolver\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">\"typescript\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h1>문제: \"import/extensions\"</h1>\n<p>에러 샘플: './App'에 대한 'tsx' 파일 확장자 누락</p>\n<h2>해결책</h2>\n<p>'eslintrc.json' 파일에서 \"rules\" 아래에 다음을 추가해 주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"rules\"</span>: {\n…\n<span class=\"hljs-string\">\"import/extensions\"</span>: [\n<span class=\"hljs-string\">\"error\"</span>,\n<span class=\"hljs-string\">\"ignorePackages\"</span>,\n{\n<span class=\"hljs-string\">\"ts\"</span>: <span class=\"hljs-string\">\"never\"</span>,\n<span class=\"hljs-string\">\"tsx\"</span>: <span class=\"hljs-string\">\"never\"</span>\n}\n]\n}\n</code></pre>\n<h1>문제: \"no-undef\"</h1>\n<p>에러 샘플: 'test'가 정의되지 않았습니다</p>\n<h2>해결 방법</h2>\n<p>'eslintrc.json' 파일에서 \"extends\" 항목에 \"plugin:@typescript-eslint/recommended\"를 추가하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"extends\"</span>: [\n…\n<span class=\"hljs-string\">\"plugin:@typescript-eslint/recommended\"</span>\n],\n</code></pre>\n<h1>문제: \"no-shadow\"</h1>\n<p>에러 샘플: 'Enum'이 이미 상위 스코프에서 선언되었습니다.</p>\n<h2>해결 방법</h2>\n<p>‘eslintrc.json’ 파일에서 \"rules\" 아래에 다음을 추가하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"rules\"</span>:{\n…\n<span class=\"hljs-string\">\"no-shadow\"</span>: <span class=\"hljs-string\">\"off\"</span>,\n<span class=\"hljs-string\">\"@typescript-eslint/no-shadow\"</span>: [<span class=\"hljs-string\">\"error\"</span>]\n}\n</code></pre>\n<p>스택 오버플로우 게시물에 설명이 있습니다(<a href=\"https://stackoverflow.com/questions/63961803/eslint-says-all-enums-in-typescript-app-are-already-declared-in-the-upper-scope\" rel=\"nofollow\" target=\"_blank\">https://stackoverflow.com/questions/63961803/eslint-says-all-enums-in-typescript-app-are-already-declared-in-the-upper-scope</a>)</p>\n<h1>문제: 'js', 'jsx', 'ts', 또는 'tsx' 확장자 파일이 아닌 파일에 대한 오류</h1>\n<h2>해결책:</h2>\n<p>‘.eslintignore’ 파일에 추가하여 ESLint가 특정 파일을 무시하도록 할 수 있습니다.</p>\n<p>그럼,</p>\n<ul>\n<li>프로젝트 루트에 '.eslintignore' 파일을 만듭니다.</li>\n<li>다음 텍스트를 추가합니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\">*.<span class=\"hljs-property\">css</span>\n*.<span class=\"hljs-property\">svg</span>\n</code></pre>\n<h1>추가:</h1>\n<h1>적용해 볼 좋은 규칙들</h1>\n<h2>모든 함수에 명시적인 반환 유형을 강제로 적용하기</h2>\n<p>‘eslintrc.json’ 파일에서 \"rules\" 아래에 다음을 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"rules\"</span>:{\n...\n<span class=\"hljs-string\">\"@typescript-eslint/explicit-function-return-type\"</span>: [\n<span class=\"hljs-string\">\"error\"</span>,\n{\n<span class=\"hljs-string\">\"allowExpressions\"</span>: <span class=\"hljs-literal\">true</span>\n}\n]\n}\n</code></pre>\n<h2>코드 라인의 최대 길이</h2>\n<p>'.'eslintrc.json' 파일에 \"rules\" 항목 아래에 다음 코드를 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"rules\"</span>:{\n…\n<span class=\"hljs-string\">\"max-len\"</span>: [<span class=\"hljs-string\">\"warn\"</span>, { <span class=\"hljs-string\">\"code\"</span>: <span class=\"hljs-number\">80</span> }]\n}\n</code></pre>\n<h2>React Hooks 규칙</h2>\n<p>'<strong>eslintrc.json</strong>' 파일에서 \"plugins\" 섹션에 다음을 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"plugins\"</span>: [\n…\n<span class=\"hljs-string\">\"react-hooks\"</span>\n],\n</code></pre>\n<p>그리고 \"rules\" 섹션에도 다음을 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"rules\"</span>:{\n…\n<span class=\"hljs-string\">\"react-hooks/rules-of-hooks\"</span>: <span class=\"hljs-string\">\"error\"</span>,\n<span class=\"hljs-string\">\"react-hooks/exhaustive-deps\"</span>: <span class=\"hljs-string\">\"warn\"</span>\n}\n</code></pre>\n<h1>무시할 몇 가지 규칙:</h1>\n<h2>기본 내보내기 사용 선호</h2>\n<p><code>eslintrc.json</code>에서 \"rules\" 아래에 다음을 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"rules\"</span>:{\n…\n<span class=\"hljs-string\">\"import/prefer-default-export\"</span>: <span class=\"hljs-string\">\"off\"</span>\n}\n</code></pre>\n<h2>프롭 타입 규칙</h2>\n<p><code>eslintrc.json</code> 파일에서 \"rules\" 항목에 다음 내용을 추가해 주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"rules\"</span>:{\n…\n<span class=\"hljs-string\">\"react/prop-types\"</span>: <span class=\"hljs-string\">\"off\"</span>\n}\n</code></pre>\n<h1>결론</h1>\n<p>그래서 이러한 구성을 통해 ReactJS with Typescript 프로젝트의 코드 품질을 향상시킬 수 있습니다. 즐기세요! :)</p>\n<h1>VS Code: 저장할 때 파일에서 ESLint 자동 수정 실행</h1>\n<p>게다가, VS Code에서 자동 수정을 구성하는 방법을 보여드리겠습니다. 그러나 이는 선택 사항입니다. 코드를 저장할 때마다 ESLint를 자동 수정하려면 다음 단계를 수행하실 수 있습니다.</p>\n<ul>\n<li>프로젝트 루트에 '.vscode' 폴더를 생성합니다.</li>\n<li>'.vscode/' 폴더 안에 'settings.json' 파일을 생성하고 다음 코드를 삽입합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">{\n<span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"dbaeumer.vscode-eslint\"</span>,\n<span class=\"hljs-string\">\"editor.formatOnSave\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-string\">\"eslint.alwaysShowStatus\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-string\">\"editor.codeActionsOnSave\"</span>: {\n<span class=\"hljs-string\">\"source.fixAll.eslint\"</span>: <span class=\"hljs-literal\">true</span>\n}\n}\n</code></pre>\n<ul>\n<li>VS Code ESLint 확장 프로그램 설치</li>\n</ul>\n<p>VS Code 'Extensions' 섹션으로 이동하여 수동으로 설치할 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_4.png\" alt=\"이미지\"></p>\n<p>또는 VS Code 빠른 열기(Ctrl+P)를 실행하고 다음 몤령어를 실행하세요:</p>\n<pre><code class=\"hljs language-js\">ext install dbaeumer.<span class=\"hljs-property\">vscode</span>-eslint\n</code></pre>\n<ul>\n<li>VS Code에서 ESLint 익스텐션 사용 허용하기:</li>\n</ul>\n<p>처음 사용하는 경우 ESLint 확장 프로그램이 차단될 것입니다. 그럼에도 불구하고 허용해야 합니다:</p>\n<ol>\n<li>상태 표시줄 아이콘을 클릭합니다.</li>\n</ol>\n<p><img src=\"/assets/img/2024-05-12-SettingESLintonaReactTypescriptproject2022_5.png\" alt=\"이미지\"></p>\n<ol start=\"2\">\n<li>팝업이 나타납니다. '허용' 옵션을 선택합니다.</li>\n</ol>\n<p>완료되었습니다! 이제 모든 파일을 저장할 때마다 ESLint 규칙을 자동으로 수정할 수 있습니다.</p>\n<h1>참고</h1>\n</body>\n</html>\n"},"__N_SSG":true}