{"pageProps":{"post":{"title":"Lexical와 함께하는 React용 리치 텍스트 에디터 시작하기","description":"","date":"2024-05-14 11:00","slug":"2024-05-14-GettingStartedwithLexicalRichTextEditorforReact","content":"\n\n## React JS에서 Lexical을 사용하는 방법에 대한 튜토리얼; 예제와 함께 기본 사항.\n\n<img src=\"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_0.png\" />\n\n... 그러나 유감스럽게도 이 문서는 좋은 설명의 예시가 아닙니다. 이 기사에서는 이 라이브러리를 어떻게 사용하는지를 간단한 용어로 설명하겠습니다.\n\n여기서는 특별한 스타일, 모달 또는 팝오버 없이 렉시컬 리치 텍스트 기능의 기본을 다룰 것입니다:\n\n\n\n![이미지](/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_1.png)\n\n만약 이 라이브러리가 무엇을 할 수 있는지 확인하고 싶다면, 멋진 렉시컬 플레이그라운드를 확인해보세요.\n\n![이미지](/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_2.png)\n\n관련 이야기:\n\n\n\n# 다룰 내용\n\n- 준비물\n- 시작하기\n- 히스토리 플러그인\n- 노드\n- 리치 텍스트\n- 테마\n- 제목, 도우미 및 노드 구성\n- 페이로드로 자신만의 명령어를 만드는 방법\n- 사용자 정의 노드 만들기\n\n# 준비물\n\n우리는 다음과 같이 만들어진 간단한 React JS 애플리케이션으로 시작할 것입니다:\n\n\n\n```js\nyarn create react-app react-lexical-examples --template typescript\n```\n\n그리고 우리는 어휘 패키지를 설치해야 합니다:\n\n```js\nyarn add lexical @lexical/react\n\n// OR\n\nnpm install --save lexical @lexical/react\n```\n\n# 시작\n```\n\n\n\nLexical을 이용하여 작업을 시작하려면 이 템플릿을 사용할 수 있어요:\n\n```js\nimport React, {useMemo} from 'react';\nimport {InitialConfigType, LexicalComposer} from '@lexical/react/LexicalComposer';\nimport {PlainTextPlugin} from \"@lexical/react/LexicalPlainTextPlugin\";\nimport {ContentEditable} from '@lexical/react/LexicalContentEditable';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\n\nexport const App: React.FC = () => {\n\n    const CustomContent = useMemo(() => {\n        return (\n            <ContentEditable style={\n                position: 'relative',\n                borderColor: 'rgba(255,211,2,0.68)',\n                border: '2px solid red',\n                borderRadius: '5px',\n                maxWidth: '100%',\n                padding: '10px'\n            }/>\n        )\n    }, []);\n\n    const CustomPlaceholder = useMemo(() => {\n        return (\n            <div style={\n                position: 'absolute', top: 30, left: 30,\n            }>\n                텍스트를 입력하세요...\n            </div>\n        )\n    }, []);\n\n    const lexicalConfig: InitialConfigType = {\n        namespace: '나의 리치 텍스트 편집기',\n        onError: (e) => {\n            console.log('에러 발생:', e)\n        }\n    }\n\n    return (\n        <div style={padding: '20px'}>\n            <LexicalComposer initialConfig={lexicalConfig}>\n                <PlainTextPlugin\n                    contentEditable={CustomContent}\n                    placeholder={CustomPlaceholder}\n                    ErrorBoundary={LexicalErrorBoundary}\n                />\n            </LexicalComposer>\n        </div>\n    );\n}\n```\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*-7S9xp-EweAiYl8Fn0O8_w.gif)\n\n보다시피, 아주 복잡해 보이지 않죠. 걱정하지 마세요, 나중에 이 컴포넌트들에 대해 자세히 다룰 거예요. 일단은 모든 것이 예상대로 작동하는지 확인하는 것이 중요해요.\n\n\n\n이제 기능을 하나씩 추가해 봅시다.\n\n# 히스토리 플러그인\n\n이전 예제에서 새 텍스트를 입력할 수 있었지만, CTRL-Z(실행 취소)를 누르면 아무 일도 일어나지 않았죠. 이 문제를 해결하기 위해 @lexical/history 플러그인을 추가하여 CTRL-Z(실행 취소)와 CTRL-SHIFT-Z(다시 실행)를 사용할 수 있게 할 수 있습니다.\n\n선택 사항으로 직접 Undo/Redo를 처리하는 사용자 정의 컴포넌트를 추가할 수도 있습니다:\n\n\n\n```js\n@@ -3,6 +3,8 @@\n import {PlainTextPlugin} from \"@lexical/react/LexicalPlainTextPlugin\";\n import {ContentEditable} from '@lexical/react/LexicalContentEditable';\n import LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\n+import {HistoryPlugin} from '@lexical/react/LexicalHistoryPlugin';\n+import {CustomHistoryActions} from \"./components\";\n \n export const App: React.FC = () => {\n \n@@ -44,7 +46,12 @@\n                     placeholder={CustomPlaceholder}\n                     ErrorBoundary={LexicalErrorBoundary}\n                 />\n+                <HistoryPlugin/>\n+                <div style={margin: '20px 0px'}>\n+                    <CustomHistoryActions/>\n+                </div>\n             </LexicalComposer>\n+\n         </div>\n     );\n }\n```\n\n```js\nimport {UNDO_COMMAND, REDO_COMMAND} from 'lexical';\nimport {useLexicalComposerContext} from \"@lexical/react/LexicalComposerContext\";\n\nexport const CustomHistoryActions = () => {\n    const [editor] = useLexicalComposerContext();\n    return (\n        <>\n            <button onClick={() => editor.dispatchCommand(UNDO_COMMAND, undefined)}>되돌리기</button>\n            <button onClick={() => editor.dispatchCommand(REDO_COMMAND, undefined)}>다시 실행</button>\n        </>\n    );\n}\n```\n\n설명:\n\n- editor는 `LexicalComposer/` 컴포넌트에서 가져온 컨텍스트 값입니다. 에디터 클래스/메소드에 대한 자세한 내용은 여기서 확인할 수 있습니다:```\n\n\n\n간단한 사용 예시:\n\n```js\nconst [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    // 이펙트가 발생할 때 에디터에 포커스를 맞춥니다!\n    editor.focus();\n  }, [editor]);\n```\n\n- UNDO_COMMAND과 REDO_COMMAND는 에디터 내용(또는 원하는 내용)을 처리해야 할 것을 렉시컬에 알리는 등록된 렉시컬 명령입니다. 다음과 같이 사용자 고유의 명령을 생성할 수도 있습니다:\n\n```js\nimport { createCommand, COMMAND_PRIORITY_NORMAL } from \"lexical\";\n\nexport const DO_SOMETHING_AWESOME = createCommand(\"create_banner\");\n\nexport const CustomComponent: React.FC = () => {\n  const [editor] = useLexicalComposerContext();\n\n  editor.registerCommand(\n    DO_SOMETHING_AWESOME,\n    () => {\n      console.log('이것은 내가 만든 명령입니다')\n      return true;\n    },\n    COMMAND_PRIORITY_NORMAL,\n  );\n\n  return null;\n};\n```\n\n\n\n걱정하지 마세요, 나중에 이 주제를 조금 더 다룰 거예요.\n\n- editor.dispatchCommand(UNDO_COMMAND, undefined) → 왜 두 번째 인자로 undefined를 전달하는 걸까요? 첫 번째, 그렇게 하지 않으면 TS 오류가 발생합니다. 둘째, 이것은 명령과 함께 전달될 수 있는 페이로드 데이터입니다(우리 경우에는 해당되지 않습니다). dispatchCommand에 대해 더 알아보세요.\n\n# 노드\n\n이 섹션에서는 용어의 작동 방식과 저장하는 데이터에 대해 깊이 파헤쳐야 할 것입니다.\n\n\n\n먼저, 에디터의 상태 변화를 모니터링하고 에디터의 상태를 로깅하는 간단한 플러그인을 만들 것입니다:\n\n```js\n// src/components/OnChangePlugin/OnChangePlugin.tsx\n\nimport {useLexicalComposerContext} from \"@lexical/react/LexicalComposerContext\";\nimport {useEffect} from \"react\";\n\nexport const OnChangePlugin = () => {\n    const [editor] = useLexicalComposerContext();\n    useEffect(() => {\n        return editor.registerUpdateListener((listener) => {\n            console.log('DATA', listener.editorState.toJSON())\n        });\n    }, [editor]);\n\n    return null;\n}\n```\n\n다음으로, `LexicalComposer/`의 하위 컴포넌트로 `OnChangePlugin/` 컴포넌트를 추가해주세요:\n\n```js\nIndex: src/App.tsx\n@@ -5,6 +5,7 @@\n import LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\n import {HistoryPlugin} from '@lexical/react/LexicalHistoryPlugin';\n import {CustomHistoryActions} from \"./components\";\n+import {OnChangePlugin} from \"./components\";\n\nexport const App: React.FC = () => {\n\n@@ -47,6 +48,7 @@\n                    ErrorBoundary={LexicalErrorBoundary}\n                />\n                <HistoryPlugin/>\n+                <OnChangePlugin />\n                <div style={margin: '20px 0px'}>\n                    <CustomHistoryActions/>\n                </div>\n```\n\n\n\n이제 편집기의 상태가 변경될 때마다 편집기의 상태 트리 데이터를 콘솔에 출력할 것입니다:\n\n![이미지](/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_3.png)\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*Lqyfyb4peVPoHJQvYuBNhQ.gif)\n\n이 텍스트를 입력하면 어떤 데이터를 얻을지 확인해 봅시다:\n\n\n\n```json\n{\n  \"root\": {\n    \"children\": [\n      {\n        \"children\": [\n          {\n            \"detail\": 0,\n            \"format\": 0,\n            \"mode\": \"normal\",\n            \"style\": \"\",\n            \"text\": \"asd\",\n            \"type\": \"text\",\n            \"version\": 1\n          },\n          {\n            \"type\": \"linebreak\",\n            \"version\": 1\n          },\n          {\n            \"detail\": 0,\n            \"format\": 0,\n            \"mode\": \"normal\",\n            \"style\": \"\",\n            \"text\": \"dsa\",\n            \"type\": \"text\",\n            \"version\": 1\n          }\n        ],\n        \"direction\": \"ltr\",\n        \"format\": \"\",\n        \"indent\": 0,\n        \"type\": \"paragraph\",\n        \"version\": 1\n      }\n    ],\n    \"direction\": \"ltr\",\n    \"format\": \"\",\n    \"indent\": 0,\n    \"type\": \"root\",\n    \"version\": 1\n  }\n}\n```\n\n아마도 노드가 간단한 속성을 가진 객체임을 알았을겁니다. 주요 속성은 노드의 종류인 type과 노드의 내용인 text입니다.\n\n\n\n```js\nimport initialState from './initialState.json';\n\n// ...\n\nreturn (\n      <LexicalComposer\n        initialConfig={\n          // ...\n          editorState: JSON.stringify(initialState),\n        }\n      >\n            {/* ... */}\n      </LexicalComposer>\n    );\n```\n\n이 경우 앱을 다시 시작할 때마다 동일한 결과를 얻을 수 있습니다:\n\n<img src=\"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_4.png\" />\n\nNodes에 대해 더 많은 정보를 읽어보실 수 있습니다.\n```\n\n\n\n# 리치 텍스트\n\n첫 번째 노드 수정 핸들러를 만들어 봅시다.\n\n이전에 PlainTextPlugin 컴포넌트를 사용했기 때문에 \"bold\" (CTRL+B) 액션과 같은 텍스트 작업을 처리할 수 없습니다:\n\n```js\n<LexicalComposer initialConfig={lexicalConfig}>\n  <PlainTextPlugin ...  />\n...\n</LexicalComposer>\n```\n\n\n\nApp.tsx 파일에서 PlainTextPlugin을 RichTextPlugin으로 변경해야 합니다:\n\n```js\nIndex: src/App.tsx\n\n@@ -1,6 +1,6 @@\n import React, {useMemo} from 'react';\n import {InitialConfigType, LexicalComposer} from '@lexical/react/LexicalComposer';\n-import {PlainTextPlugin} from \"@lexical/react/LexicalPlainTextPlugin\";\n+import {RichTextPlugin} from \"@lexical/react/LexicalRichTextPlugin\";\n import {ContentEditable} from '@lexical/react/LexicalContentEditable';\n import LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\n import {HistoryPlugin} from '@lexical/react/LexicalHistoryPlugin';\n@@ -46,7 +46,7 @@\n             <LexicalComposer\n                 initialConfig={lexicalConfig}\n             >\n-                <PlainTextPlugin\n+                <RichTextPlugin\n                     contentEditable={CustomContent}\n                     placeholder={CustomPlaceholder}\n                     ErrorBoundary={LexicalErrorBoundary}\n```\n\n이제 에디터에서 기본 텍스트 작업을 사용할 수 있을 것입니다:\n\n<img src=\"https://miro.medium.com/v2/resize:fit:768/1*GWYMSFDfd3PI2PSh5bVsYw.gif\" />\n\n\n\n우리의 커스텀 버튼을 만들어 봅시다:\n\n```js\n// src/components/CustomTextActions/CustomTextActions.tsx\n\nimport {useLexicalComposerContext} from \"@lexical/react/LexicalComposerContext\";\nimport {FORMAT_TEXT_COMMAND, TextFormatType} from 'lexical';\n\nexport const CustomTextActions = () => {\n    const [editor] = useLexicalComposerContext();\n\n    const handleOnClick = (formatType: TextFormatType) => {\n        editor.dispatchCommand(FORMAT_TEXT_COMMAND, formatType)\n    }\n\n    return (\n        <div style={{marginTop: '10px'}}>\n            <span style={{fontWeight: 'bold'}}>텍스트 액션</span>\n            <div>\n                {[\n                    '굵게',\n                    '이탤릭체',\n                    '밑줄',\n                    '코드',\n                    '하이라이트',\n                    '취소선',\n                    '아래첨자',\n                    '위첨자'\n                ].map(value => {\n                    return (\n                        <button\n                            onClick={() => handleOnClick(value.toLowerCase() as TextFormatType)}>\n                            {value}\n                        </button>\n                    )\n                })}\n            </div>\n        </div>\n    );\n}\n```\n\n<img src=\"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_5.png\" />\n\n하지만 텍스트를 수정하려고 하면 기대했던 결과가 나오지 않을 수 있습니다: 일부 항목은 변경되고 일부는 변경되지 않을 수 있습니다. 그 이유가 무엇일까요?\n\n\n\n<img src=\"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_6.png\" />\n\nHTML 출력을 확인해 봅시다:\n\n```js\n<p dir=\"ltr\"><strong data-lexical-text=\"true\">굵게</strong></p>\n<p dir=\"ltr\"><em data-lexical-text=\"true\">이탤릭체</em></p>\n<p dir=\"ltr\"><span data-lexical-text=\"true\">밑줄</span></p>\n<p dir=\"ltr\"><code data-lexical-text=\"true\"><span>코드</span></code></p>\n<p dir=\"ltr\">\n    <mark data-lexical-text=\"true\"><span>강조</span></mark>\n</p>\n<p dir=\"ltr\"><span data-lexical-text=\"true\">취소선</span></p>\n<p dir=\"ltr\"><sub data-lexical-text=\"true\"><span>아래 첨자</span></sub></p>\n<p dir=\"ltr\"><sup data-lexical-text=\"true\"><span>위 첨자</span></sup></p>\n<p dir=\"ltr\"><code data-lexical-text=\"true\"><strong>모두 표시</strong></code></p>\n```\n\n요소에는 적용된 스타일이 없지만 브라우저에서 `mark`/`strong/`/`em/`에 대한 사전 정의된 스타일이 있어 약간의 스타일 변화가 있습니다. 그러나 우리가 기대한 것은 아닙니다.\n\n\n\n이제 다음 주제인 → 테마를 다루어볼 시간입니다.\n\n👉 작은 참고사항입니다. Align 작업 구현이 이렇게 보일 것입니다 (텍스트와 동일한 디스패치 명령어 접근 방식):\n\n```js\nimport {\n    useLexicalComposerContext\n} from \"@lexical/react/LexicalComposerContext\";\nimport {\n    FORMAT_ELEMENT_COMMAND,\n    ElementFormatType,\n    OUTDENT_CONTENT_COMMAND,\n    INDENT_CONTENT_COMMAND\n} from 'lexical';\n\nexport const CustomAlignActions = () => {\n    const [editor] = useLexicalComposerContext();\n\n    const handleOnClick = (formatType: ElementFormatType) => {\n        editor.dispatchCommand(FORMAT_ELEMENT_COMMAND, formatType)\n    }\n\n    return (\n        <div style={marginTop: '10px'}>\n            <span style={fontWeight: 'bold'}>Align actions</span>\n            <div>\n                {[\n                    'Left',\n                    'Center',\n                    'Right',\n                    'Justify',\n                ].map(value => {\n                    return (\n                        <button\n                            onClick={() => handleOnClick(value.toLowerCase() as ElementFormatType)}>\n                            {value}\n                        </button>\n                    )\n                })}\n                <button\n                    onClick={() => editor.dispatchCommand(OUTDENT_CONTENT_COMMAND, undefined)}>\n                    Outdent\n                </button>\n                <button\n                    onClick={() => editor.dispatchCommand(INDENT_CONTENT_COMMAND, undefined)}>\n                    Indent\n                </button>\n            </div>\n        </div>\n    );\n}\n```\n\n![이미지](/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_7.png)\n\n\n\n위의 경우 \"정당화\" 노드가 편집기 상태 JSON에서 어떻게 나타낼지에 대한 예시입니다:\n\n```js\n{\n  \"children\": [\n    {\n      \"detail\": 0,\n      \"format\": 1,\n      \"mode\": \"normal\",\n      \"style\": \"\",\n      \"text\": \"Justify\",\n      \"type\": \"text\",\n      \"version\": 1\n    },\n    {\n      \"detail\": 0,\n      \"format\": 0,\n      \"mode\": \"normal\",\n      \"style\": \"\",\n      \"text\": \" - Lorem ipsum dolor sit amet, <...>\",\n      \"type\": \"text\",\n      \"version\": 1\n    }\n  ],\n  \"direction\": \"ltr\",\n  \"format\": \"justify\",\n  \"indent\": 0,\n  \"type\": \"paragraph\",\n  \"version\": 1\n}\n```\n\n# 테마\n\nNodes를 수정할 때, lexical은 테마 객체 theme.[`노드-타입`]에서 지정된 노드 타입에 대해 스타일(클래스 이름)을 적용합니다.\n\n\n\n해달 코드를 추가하고 텍스트 스타일을 적용해 보겠습니다:\n\n```js\nIndex: src/App.tsx\n\n@@ -10,6 +10,7 @@\n     CustomHistoryActions\n } from \"./components\";\n import initialState from './initialState.json';\n+import './App.css'\n \n export const App: React.FC = () => {\n \n@@ -38,6 +39,18 @@\n \n     const lexicalConfig: InitialConfigType = {\n         namespace: 'My Rich Text Editor',\n+        theme: {\n+            text: {\n+                bold: \"text-bold\",\n+                italic: \"text-italic\",\n+                underline: \"text-underline\",\n+                code: 'text-code',\n+                highlight: 'text-highlight',\n+                strikethrough: 'text-strikethrough',\n+                subscript: 'text-subscript',\n+                superscript: 'text-superscript',\n+            },\n+        },\n         onError: (e) => {\n             console.log('ERROR:', e)\n         },\n```\n\nCSS:\n\n```js\n.text-bold {\n    font-weight: bold;\n}\n\n.text-italic {\n    font-style: italic;\n}\n\n.text-underline {\n    text-decoration: underline;\n}\n\n.text-code {\n    background-color: #f0f2f5;\n    padding: 1px 0.25rem;\n    font-family: Menlo, Consolas, Monaco, monospace;\n    font-size: 94%;\n}\n\n.text-highlight {\n    margin: 0 5px;\n}\n\n.text-strikethrough {\n    text-decoration: line-through;\n}\n\n.text-subscript {\n    vertical-align: sub;\n}\n\n.text-superscript {\n    vertical-align: super;\n}\n\np {\n    margin: 0;\n}\n```\n\n\n\n\n![image](https://miro.medium.com/v2/resize:fit:1260/1*_KW7zAxitBpOe3HrAqHHfw.gif)\n\n![image](/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_8.png)\n\n**Bold**\n*Italic*\n<ins>Underline</ins>\n`Code`\n<mark>Highlight</mark>\n~~Strike~~\nX<sub>Sub</sub>\nX<sup>Super</sup>\n<mark><strong><em><ins><u><strike><sub>All of them</sub></strike></u></ins></em></strong></mark>\n\n\n\n\n알겠지만, 우리가 디스패치를 트리거할 때마다, 렉시컬이 클래스를 교체하지 않고, 있는 경우 추가하거나 있는 경우 제거했습니다. 이 점을 명심해주세요. \"굵게 기울임체 밑줄\"에 대해 별도의 CSS 클래스를 만들 필요가 없습니다.\n\n에디터의 상태 JSON:\n\n```js\n{\n  \"root\": {\n    \"children\": [\n      {\n        \"children\": [\n          {\n            \"detail\": 0,\n            \"format\": 11,\n            \"mode\": \"normal\",\n            \"style\": \"\",\n            \"text\": \"굵게 기울임체 밑줄\",\n            \"type\": \"text\",\n            \"version\": 1\n          }\n        ],\n        \"direction\": \"ltr\",\n        \"format\": \"\",\n        \"indent\": 0,\n        \"type\": \"paragraph\",\n        \"version\": 1\n      }\n    ],\n    \"direction\": \"ltr\",\n    \"format\": \"\",\n    \"indent\": 0,\n    \"type\": \"root\",\n    \"version\": 1\n  }\n}\n```\n\n# 헤딩. 헬퍼 및 노드 구성\n\n\n\n등록된 어휘 명령이 없을 경우 어떻게 해야 할까요? 단어 요소(어휘의 기본 노드)를 어휘 명령을 사용하지 않고 헤더 노드로 변환해 봅시다:\n\n```js\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { $getSelection, $isRangeSelection } from \"lexical\";\nimport { $setBlocksType } from \"@lexical/selection\";\nimport { HeadingTagType, $createHeadingNode } from \"@lexical/rich-text\";\n\nexport const CustomHeadingActions = () => {\n    const [editor] = useLexicalComposerContext();\n\n    const handleOnClick = (tag: HeadingTagType) => {\n        editor.update(() => {\n            const selection = $getSelection();\n            if ($isRangeSelection(selection)) {\n                $setBlocksType(selection, () => $createHeadingNode(tag));\n            }\n        });\n    };\n\n    return (\n        <div style={{ marginTop: '10px' }}>\n            <span style={{ fontWeight: 'bold' }}>Align actions</span>\n            <div>\n                {([\"h1\", \"h2\", \"h3\", \"h4\", \"h5\"] as Array<HeadingTagType>).map((tag) => {\n                    return (\n                        <button\n                            key={tag}\n                            onClick={() => handleOnClick(tag)}\n                        >\n                            {tag}\n                        </button>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n```\n\n일부 노드를 헤딩 노드로 변환하는 데 미리 정의된 명령이 없기 때문에 여기서는 다음과 같은 작업을 수행합니다:\n\n- 콜백을 인수로 전달하는 editor.update 함수 호출\n- 선택된 노드를 가져오기 위해 $getSelection 헬퍼 사용\n- $isRangeSelection을 사용하여 RangeSelection 유형인지 확인합니다.\n\n\n\n```js\n// 소스코드\nexport function $isRangeSelection(x: unknown): x is RangeSelection {\n  return x instanceof RangeSelection;\n}\n```\n\n4. $setBlocksType을 새로운 $createHeadingNode (h1, h2, h3…)으로 변경하세요;\n\n⚠️ 하지만 앱에서 사용해보면 아무 일도 일어나지 않습니다 → 문단이 헤더로 변경되지 않습니다. 에디터에서 사용하고 싶은 노드에 대해 렉시컬이 알지 못하기 때문입니다 (기본 노드를 제외하고). 노드 구성 배열에 HeaderNode를 추가해야 합니다:\n\n```js\nIndex: src/App.tsx\n\n@@ -10,6 +10,7 @@\n     CustomHistoryActions,\n     CustomAlignActions, CustomHeadingActions\n } from \"./components\";\n+import {HeadingNode} from \"@lexical/rich-text\";\n import initialState from './initialState.json';\n import './App.css'\n \n@@ -40,6 +41,7 @@\n \n     const lexicalConfig: InitialConfigType = {\n         namespace: 'My Rich Text Editor',\n+        nodes: [HeadingNode],\n         theme: {\n             text: {\n                 bold: \"text-bold\",\n```\n\n\n\n<img src=\"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_9.png\" />\n\n# 페이로드와 함께 자신만의 명령어를 생성하는 방법\n\n이전 코드를 다시 작성해 보겠습니다. 다른 곳에서 변환 명령을 호출해야 하는 경우에도 이 조각을 복사-붙여넣기할 필요가 없도록 바꿀 거에요:\n\n```js\neditor.update(() => {\n    const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        $setBlocksType(selection, () => $createHeadingNode(tag));\n      }\n});\n```\n\n\n\n위 작업을 위해 페이로드 `\"h1\" | \"h2\" | \"h3\", ...`을 사용하여 자체 FORMAT_HEADING_COMMAND를 생성하고 등록합니다.\n\n```js\n// src/components/CustomHeadingPlugin/CustomHeadingPlugin.tsx\n\nimport { useEffect } from \"react\";\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport {\n    createCommand,\n    $getSelection,\n    $isRangeSelection,\n    COMMAND_PRIORITY_NORMAL,\n} from \"lexical\";\nimport {\n    $setBlocksType\n} from \"@lexical/selection\";\nimport {\n    HeadingTagType,\n    $createHeadingNode\n} from \"@lexical/rich-text\";\n\nexport const FORMAT_HEADING_COMMAND = createCommand(\"FORMAT_HEADING_COMMAND\");\n\nexport const CustomHeadingPlugin = () => {\n    const [editor] = useLexicalComposerContext();\n\n    useEffect(() => {\n        editor.registerCommand<HeadingTagType>(\n            FORMAT_HEADING_COMMAND,\n            (payload) => {\n                const selection = $getSelection();\n                if ($isRangeSelection(selection)) {\n                    $setBlocksType(selection, () => $createHeadingNode(payload));\n                }\n                return true;\n            },\n            COMMAND_PRIORITY_NORMAL,\n        );\n    }, []);\n\n    return null;\n}\n```\n\n이제 `CustomHeadingActions/` 구현을 업데이트할 수 있습니다:\n\n```js\nIndex: src/components/CustomHeadingActions/CustomHeadingActions.tsx\n@@ -1,22 +1,15 @@\nimport {\n    useLexicalComposerContext\n} from \"@lexical/react/LexicalComposerContext\";\nimport {HeadingTagType} from \"@lexical/rich-text\";\nimport {FORMAT_HEADING_COMMAND} from \"../CustomHeadingPlugin\";\n\nexport const CustomHeadingActions = () => {\n    const [editor] = useLexicalComposerContext();\n\n    const handleOnClick = (tag: HeadingTagType) => {\n        editor.dispatchCommand(FORMAT_HEADING_COMMAND, tag);\n    };\n\n    return (\n        <div style={marginTop: '10px'}>\n```\n\n\n\n이 변형은 내게 훨씬 깔끔하고 재사용 가능해 보여요. 그 이후에는 LexicalComposer의 자식으로 우리가 만든 Header Plugin을 배치해야할거에요:\n\n```js\nIndex: src/App.tsx\n\n@@ -8,8 +8,11 @@\n     OnChangePlugin,\n     CustomTextActions,\n     CustomHistoryActions,\n     CustomAlignActions,\n     CustomHeadingActions,\n+    CustomHeadingPlugin,\n } from \"./components\";\n import {HeadingNode} from \"@lexical/rich-text\";\n import initialState from './initialState.json';\n import './App.css'\n\n@@ -70,7 +74,7 @@\n                 />\n                 <HistoryPlugin/>\n                 <OnChangePlugin/>\n+                <CustomHeadingPlugin/>\n                 <div style={margin: '20px 0px'}>\n                     <CustomHistoryActions/>\n                     <CustomHeadingActions/\n```\n\n👉 참고: 이전에 다뤘지만 다시 한 번 상기시키자면... 테마 구성을 업데이트하여 각 헤딩 엘리먼트에 적용하려는 CSS 클래스 이름을 지정할 수 있어요:\n\n```js\nIndex: src/App.tsx\n\n@@ -62,6 +62,14 @@\n                 subscript: 'text-subscript',\n                 superscript: 'text-superscript',\n             },\n+            heading: {\n+                // Flowbite examples: https://flowbite.com/docs/typography/headings/#heading-one-h1\n+                h1: \"text-5xl font-extrabold dark:text-white\",\n+                h2: \"text-4xl font-bold dark:text-white\",\n+                h3: \"text-3xl font-bold dark:text-white\",\n+                h4: \"text-2xl font-bold dark:text-white\",\n+                h5: \"text-xl font-bold dark:text-white\",  \n+            },\n             banner: 'banner'\n         },\n         onError: (e) => {\n```\n\n\n\n# 커스텀 노드를 만드는 방법\n\n이전 섹션에서는 기본적으로 모든 것을 다루었으니, 이번 섹션에서는 직접 노드를 만들어보겠습니다. 제가 생각하기에 렉시컬이 노드를 처리하는 전체 그림을 파악하게 될 것입니다.\n\n가장 간단한 배너 노드:\n\n```js\nimport {\n    EditorConfig,\n    ElementNode,\n    LexicalEditor,\n    SerializedElementNode,\n    Spread,\n} from \"lexical\";\n\nexport type SerializedBannerNode = Spread<\n    {\n        customValue: string;\n    },\n    SerializedElementNode\n>;\n\nexport class BannerNode extends ElementNode {\n    createDOM(_config: EditorConfig, _editor: LexicalEditor): HTMLElement {\n        const div = document.createElement(\"div\");\n        div.className = _config.theme.banner;\n        return div;\n    }\n\n    static clone(node: BannerNode): BannerNode {\n        return new BannerNode(node.__key);\n    }\n\n    static getType(): string {\n        return \"banner\";\n    }\n\n    /**\n     * Returning false tells Lexical that this node does not need its\n     * DOM element replacing with a new copy from createDOM.\n     */\n    updateDOM(\n        _prevNode: unknown,\n        _dom: HTMLElement,\n        _config: EditorConfig,\n    ): boolean {\n        return false;\n    }\n\n    exportJSON(): SerializedBannerNode {\n        return {\n            type: \"banner\",\n            version: 1,\n            children: [],\n            customValue: \"anything you like\",\n            format: \"\",\n            indent: 1,\n            direction: null,\n        };\n    }\n}\n```\n\n\n\n설명:\n- 새로운 어휘 노드를 만들려면 미리 정의된 어휘 노드(ElementNode | TextNode | DecoratorNode 중 하나를 확장한 클래스를 만들고 메서드를 재정의해야 합니다(모든 메서드를 다루지는 않겠습니다));\n- 먼저, 어휘는 노드의 타입에 대한 일치 항목을 찾으려고 할 것이며, 타입 함수를 호출하여 구성 노드 배열('banner'의 경우)에서 지정한 노드들로부터 getType 함수를 호출할 것입니다;\n- 그 다음으로, 어휘는 HTML 요소를 만드는 createDOM 메서드를 호출할 것입니다;\n- OnChangePlugin에 toJSON 함수가 있는 것을 기억하시나요?\n\n```js\n// src/components/OnChangePlugin/OnChangePlugin.tsx\n\nimport {useLexicalComposerContext} from \"@lexical/react/LexicalComposerContext\";\nimport {useEffect} from \"react\";\n\nexport const OnChangePlugin = () => {\n    const [editor] = useLexicalComposerContext();\n    useEffect(() => {\n        return editor.registerUpdateListener((listener) => {\n            console.log('DATA', listener.editorState.toJSON())\n        });\n    }, [editor]);\n\n    return null;\n}\n```\n\n여기서 우리의 Banner exportJSON 함수가 호출될 것입니다.\n\n\n\n이제 BannerNode를 위한 플러그인을 생성해야 합니다. 이미 Headings 섹션에서 이를 수행한 적이 있습니다:\n\n```js\nimport {useLexicalComposerContext} from \"@lexical/react/LexicalComposerContext\";\nimport {$getSelection, $isRangeSelection, COMMAND_PRIORITY_NORMAL, createCommand} from \"lexical\";\nimport {\n    $setBlocksType\n} from \"@lexical/selection\";\nimport {BannerNode} from \"../../nodes\";\nimport React from \"react\";\n\nexport const $createBannerNode = (): BannerNode => new BannerNode();\n\nexport const INSERT_BANNER_COMMAND = createCommand(\"create_banner\");\n\nexport const CustomBannerPlugin: React.FC = () => {\n    const [editor] = useLexicalComposerContext();\n\n    if (!editor.hasNode(BannerNode)) {\n        throw new Error('BannerPlugin: \"BannerNode\" not registered on editor');\n    }\n    editor.registerCommand(\n        INSERT_BANNER_COMMAND,\n        () => {\n            const selection = $getSelection();\n            if ($isRangeSelection(selection)) {\n                $setBlocksType(selection, $createBannerNode);\n            }\n            return true;\n        },\n        COMMAND_PRIORITY_NORMAL,\n    );\n\n    return null;\n};\n```\n\nCustomBannerActions 컴포넌트를 추가하세요: 우리 명령어와 함께 간단한 버튼이 있습니다:\n\n```js\nimport React from \"react\";\nimport {useLexicalComposerContext} from \"@lexical/react/LexicalComposerContext\";\nimport {INSERT_BANNER_COMMAND} from \"../CustomBannerPlugin\";\n\nexport const CustomBannerActions: React.FC = () => {\n    const [editor] = useLexicalComposerContext();\n\n    const handleOnClick = () => {\n        editor.dispatchCommand(INSERT_BANNER_COMMAND, undefined);\n    };\n\n    return (\n        <div style={{marginTop: '10px'}}>\n            <span style={{fontWeight: 'bold'}}>Heading actions</span>\n            <div>\n                <button onClick={handleOnClick}>\n                    Banner\n                </button>\n            </div>\n        </div>\n    );\n};\n```\n\n\n\nApp.tsx를 업데이트하였습니다:\n\n```js\nIndex: src/App.tsx\n\n@@ -11,10 +11,13 @@\n     CustomAlignActions,\n     CustomHeadingActions,\n     CustomHeadingPlugin,\n+    CustomBannerPlugin,\n+    CustomBannerActions,\n } from \"./components\";\n import {HeadingNode} from \"@lexical/rich-text\";\n import initialState from './initialState.json';\n import './App.css'\n+import {BannerNode} from \"./nodes\";\n \n export const App: React.FC = () => {\n \n@@ -43,7 +46,10 @@\n \n     const lexicalConfig: InitialConfigType = {\n         namespace: 'My Rich Text Editor',\n-        nodes: [HeadingNode],\n+        nodes: [\n+            BannerNode,\n+            HeadingNode\n+        ],\n         theme: {\n             text: {\n                 bold: \"text-bold\",\n@@ -55,6 +61,7 @@\n                 subscript: 'text-subscript',\n                 superscript: 'text-superscript',\n             },\n+            banner: 'banner'\n         },\n         onError: (e) => {\n             console.log('ERROR:', e)\n@@ -75,8 +82,10 @@\n                 <HistoryPlugin/>\n                 <OnChangePlugin/>\n                 <CustomHeadingPlugin/>\n+                <CustomBannerPlugin/>\n                 <div style={margin: '20px 0px'}>\n                     <CustomHistoryActions/>\n+                    <CustomBannerActions/>\n                     <CustomHeadingActions/>\n                     <CustomTextActions/>\n                     <CustomAlignActions/>\n```\n\nCSS:\n\n```js\nIndex: src/App.css\n\n@@ -33,6 +33,13 @@\n     vertical-align: super ;\n }\n \n+.banner {\n+    border-left: 3px coral solid;\n+    background-color: lightskyblue;\n+    border-radius: 3px;\n+    padding: 10px 0;\n+}\n+\n p {\n     margin: 0;\n }\n```\n\n\n\n결과:\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1334/1*zesdcbkZmVlSoY1HaflYUA.gif\" />\n\n🔴 문제가 두 가지 있을 것입니다:\n\n- 사용자가 Enter 키 또는 Shift+Enter 키를 눌러 노드에서 \"나가기\"를 할 수 없을 것입니다.\n- 사용자가 Backspace 키를 눌러 노드를 \"제거\"할 수 없을 것입니다.\n\n\n\n우리의 BannerNode를 업데이트해 봅시다:\n\n```js\nIndex: src/nodes/BannerNode/BannerNode.tsx\n\n@@ -2,6 +2,9 @@\n     EditorConfig,\n     ElementNode,\n     LexicalEditor,\n+    $createParagraphNode,\n+    LexicalNode,\n+    RangeSelection,\n     SerializedElementNode,\n     Spread,\n } from \"lexical\";\n@@ -40,6 +43,34 @@\n         return false;\n     }\n\n+    /**\n+     * 사용자가 모든 콘텐츠를 삭제할 때 노드를 단락으로 설정해야 합니다\n+     */\n+    collapseAtStart(_: RangeSelection): boolean {\n+        const paragraph = $createParagraphNode();\n+        const children = this.getChildren();\n+        children.forEach((child) => paragraph.append(child));\n+        this.replace(paragraph);\n+\n+        return true;\n+    }\n+\n+    /**\n+     * 사용자가 Enter 키를 누를 때 노드를 단락으로 설정해야 합니다.\n+     * Shift+Enter를 누를 경우 노드는 유지됩니다\n+     */\n+    insertNewAfter(\n+        _: RangeSelection,\n+        restoreSelection?: boolean,\n+    ): LexicalNode | null {\n+        const paragraph = $createParagraphNode();\n+        const direction = this.getDirection();\n+        paragraph.setDirection(direction);\n+        this.insertAfter(paragraph, restoreSelection);\n+\n+        return paragraph;\n+    }\n+\n     exportJSON(): SerializedBannerNode {\n         return {\n             type: \"banner\",\n```\n\n지금까지 얻은 것을 확인해 보겠습니다:\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1334/1*44Wg5Stz5crAXpP3Qi-PRA.gif\" />\n\n\n\n🟢 업데이트 후:\n\n- 사용자는 노드에서 Enter 키를 눌러 \"나가기\" 할 수 있습니다;\n- 사용자는 노드를 Shift + Enter 키를 눌러 \"확장\"할 수 있습니다;\n- 사용자는 콘텐츠 텍스트가 비어 있을 때 Backspace 키를 눌러 노드를 \"삭제\"할 수 있습니다;\n\n마지막으로, 에디터의 JSON 트리에서 BannerNode을 파싱하는 함수가 필요합니다:\n\n```js\nIndex: src/nodes/BannerNode/BannerNode.tsx\n\n@@ -71,6 +71,10 @@\n         return paragraph;\n     }\n \n+    static importJSON(_: SerializedBannerNode): BannerNode {\n+        return new BannerNode();\n+    }\n+\n     exportJSON(): SerializedBannerNode {\n         return {\n             type: \"banner\",\n```\n\n\n\n# 깃허브 리포지토리:\n\n관련된 기사들:\n\n이 글이 도움이 되었기를 바랍니다. 만약 그렇다면, \"claps\"를 주시면 감사하겠습니다.\n\n# 간단히 설명\n\n\n\n우리 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 반드시 작가를 칭찬하고 팔로우하세요! 👏\n- PlainEnglish.io에서 더 많은 콘텐츠를 찾아보세요! 🚀\n- 무료 주간 뉴스레터에 가입하세요. 🗞️\n- 트위터, 링크드인, 유튜브, 그리고 디스코드에서 저희를 팔로우해주세요.","ogImage":{"url":"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_0.png"},"coverImage":"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_0.png","tag":["Tech"],"readingTime":31},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>React JS에서 Lexical을 사용하는 방법에 대한 튜토리얼; 예제와 함께 기본 사항.</h2>\n<p>... 그러나 유감스럽게도 이 문서는 좋은 설명의 예시가 아닙니다. 이 기사에서는 이 라이브러리를 어떻게 사용하는지를 간단한 용어로 설명하겠습니다.</p>\n<p>여기서는 특별한 스타일, 모달 또는 팝오버 없이 렉시컬 리치 텍스트 기능의 기본을 다룰 것입니다:</p>\n<p><img src=\"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_1.png\" alt=\"이미지\"></p>\n<p>만약 이 라이브러리가 무엇을 할 수 있는지 확인하고 싶다면, 멋진 렉시컬 플레이그라운드를 확인해보세요.</p>\n<p><img src=\"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_2.png\" alt=\"이미지\"></p>\n<p>관련 이야기:</p>\n<h1>다룰 내용</h1>\n<ul>\n<li>준비물</li>\n<li>시작하기</li>\n<li>히스토리 플러그인</li>\n<li>노드</li>\n<li>리치 텍스트</li>\n<li>테마</li>\n<li>제목, 도우미 및 노드 구성</li>\n<li>페이로드로 자신만의 명령어를 만드는 방법</li>\n<li>사용자 정의 노드 만들기</li>\n</ul>\n<h1>준비물</h1>\n<p>우리는 다음과 같이 만들어진 간단한 React JS 애플리케이션으로 시작할 것입니다:</p>\n<pre><code class=\"hljs language-js\">yarn create react-app react-lexical-examples --template typescript\n</code></pre>\n<p>그리고 우리는 어휘 패키지를 설치해야 합니다:</p>\n<pre><code class=\"hljs language-js\">yarn add lexical @lexical/react\n\n<span class=\"hljs-comment\">// OR</span>\n\nnpm install --save lexical @lexical/react\n</code></pre>\n<h1>시작</h1>\n<pre><code>\n\n\nLexical을 이용하여 작업을 시작하려면 이 템플릿을 사용할 수 있어요:\n\n```js\nimport React, {useMemo} from 'react';\nimport {InitialConfigType, LexicalComposer} from '@lexical/react/LexicalComposer';\nimport {PlainTextPlugin} from \"@lexical/react/LexicalPlainTextPlugin\";\nimport {ContentEditable} from '@lexical/react/LexicalContentEditable';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\n\nexport const App: React.FC = () => {\n\n    const CustomContent = useMemo(() => {\n        return (\n            &#x3C;ContentEditable style={\n                position: 'relative',\n                borderColor: 'rgba(255,211,2,0.68)',\n                border: '2px solid red',\n                borderRadius: '5px',\n                maxWidth: '100%',\n                padding: '10px'\n            }/>\n        )\n    }, []);\n\n    const CustomPlaceholder = useMemo(() => {\n        return (\n            &#x3C;div style={\n                position: 'absolute', top: 30, left: 30,\n            }>\n                텍스트를 입력하세요...\n            &#x3C;/div>\n        )\n    }, []);\n\n    const lexicalConfig: InitialConfigType = {\n        namespace: '나의 리치 텍스트 편집기',\n        onError: (e) => {\n            console.log('에러 발생:', e)\n        }\n    }\n\n    return (\n        &#x3C;div style={padding: '20px'}>\n            &#x3C;LexicalComposer initialConfig={lexicalConfig}>\n                &#x3C;PlainTextPlugin\n                    contentEditable={CustomContent}\n                    placeholder={CustomPlaceholder}\n                    ErrorBoundary={LexicalErrorBoundary}\n                />\n            &#x3C;/LexicalComposer>\n        &#x3C;/div>\n    );\n}\n</code></pre>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*-7S9xp-EweAiYl8Fn0O8_w.gif\" alt=\"이미지\"></p>\n<p>보다시피, 아주 복잡해 보이지 않죠. 걱정하지 마세요, 나중에 이 컴포넌트들에 대해 자세히 다룰 거예요. 일단은 모든 것이 예상대로 작동하는지 확인하는 것이 중요해요.</p>\n<p>이제 기능을 하나씩 추가해 봅시다.</p>\n<h1>히스토리 플러그인</h1>\n<p>이전 예제에서 새 텍스트를 입력할 수 있었지만, CTRL-Z(실행 취소)를 누르면 아무 일도 일어나지 않았죠. 이 문제를 해결하기 위해 @lexical/history 플러그인을 추가하여 CTRL-Z(실행 취소)와 CTRL-SHIFT-Z(다시 실행)를 사용할 수 있게 할 수 있습니다.</p>\n<p>선택 사항으로 직접 Undo/Redo를 처리하는 사용자 정의 컴포넌트를 추가할 수도 있습니다:</p>\n<pre><code class=\"hljs language-js\">@@ -<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span> @@\n <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">PlainTextPlugin</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalPlainTextPlugin\"</span>;\n <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">ContentEditable</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@lexical/react/LexicalContentEditable'</span>;\n <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">LexicalErrorBoundary</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@lexical/react/LexicalErrorBoundary'</span>;\n+<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">HistoryPlugin</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@lexical/react/LexicalHistoryPlugin'</span>;\n+<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">CustomHistoryActions</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components\"</span>;\n \n <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">App</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n \n@@ -<span class=\"hljs-number\">44</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">46</span>,<span class=\"hljs-number\">12</span> @@\n                     placeholder={<span class=\"hljs-title class_\">CustomPlaceholder</span>}\n                     <span class=\"hljs-title class_\">ErrorBoundary</span>={<span class=\"hljs-title class_\">LexicalErrorBoundary</span>}\n                 />\n+                <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">HistoryPlugin</span>/></span></span>\n+                <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{margin:</span> '<span class=\"hljs-attr\">20px</span> <span class=\"hljs-attr\">0px</span>'}></span>\n+                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CustomHistoryActions</span>/></span>\n+                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n             &#x3C;/<span class=\"hljs-title class_\">LexicalComposer</span>>\n+\n         &#x3C;/div>\n     );\n }\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-variable constant_\">UNDO_COMMAND</span>, <span class=\"hljs-variable constant_\">REDO_COMMAND</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lexical'</span>;\n<span class=\"hljs-keyword\">import</span> {useLexicalComposerContext} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalComposerContext\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CustomHistoryActions</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> editor.dispatchCommand(UNDO_COMMAND, undefined)}>되돌리기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> editor.dispatchCommand(REDO_COMMAND, undefined)}>다시 실행<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/></span></span>\n    );\n}\n</code></pre>\n<p>설명:</p>\n<ul>\n<li>editor는 <code>LexicalComposer/</code> 컴포넌트에서 가져온 컨텍스트 값입니다. 에디터 클래스/메소드에 대한 자세한 내용은 여기서 확인할 수 있습니다:```</li>\n</ul>\n<p>간단한 사용 예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// 이펙트가 발생할 때 에디터에 포커스를 맞춥니다!</span>\n    editor.<span class=\"hljs-title function_\">focus</span>();\n  }, [editor]);\n</code></pre>\n<ul>\n<li>UNDO_COMMAND과 REDO_COMMAND는 에디터 내용(또는 원하는 내용)을 처리해야 할 것을 렉시컬에 알리는 등록된 렉시컬 명령입니다. 다음과 같이 사용자 고유의 명령을 생성할 수도 있습니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { createCommand, <span class=\"hljs-variable constant_\">COMMAND_PRIORITY_NORMAL</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"lexical\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DO_SOMETHING_AWESOME</span> = <span class=\"hljs-title function_\">createCommand</span>(<span class=\"hljs-string\">\"create_banner\"</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">CustomComponent</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n\n  editor.<span class=\"hljs-title function_\">registerCommand</span>(\n    <span class=\"hljs-variable constant_\">DO_SOMETHING_AWESOME</span>,\n    <span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'이것은 내가 만든 명령입니다'</span>)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    },\n    <span class=\"hljs-variable constant_\">COMMAND_PRIORITY_NORMAL</span>,\n  );\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n};\n</code></pre>\n<p>걱정하지 마세요, 나중에 이 주제를 조금 더 다룰 거예요.</p>\n<ul>\n<li>editor.dispatchCommand(UNDO_COMMAND, undefined) → 왜 두 번째 인자로 undefined를 전달하는 걸까요? 첫 번째, 그렇게 하지 않으면 TS 오류가 발생합니다. 둘째, 이것은 명령과 함께 전달될 수 있는 페이로드 데이터입니다(우리 경우에는 해당되지 않습니다). dispatchCommand에 대해 더 알아보세요.</li>\n</ul>\n<h1>노드</h1>\n<p>이 섹션에서는 용어의 작동 방식과 저장하는 데이터에 대해 깊이 파헤쳐야 할 것입니다.</p>\n<p>먼저, 에디터의 상태 변화를 모니터링하고 에디터의 상태를 로깅하는 간단한 플러그인을 만들 것입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/OnChangePlugin/OnChangePlugin.tsx</span>\n\n<span class=\"hljs-keyword\">import</span> {useLexicalComposerContext} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalComposerContext\"</span>;\n<span class=\"hljs-keyword\">import</span> {useEffect} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">OnChangePlugin</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n    <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-keyword\">return</span> editor.<span class=\"hljs-title function_\">registerUpdateListener</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">listener</span>) =></span> {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'DATA'</span>, listener.<span class=\"hljs-property\">editorState</span>.<span class=\"hljs-title function_\">toJSON</span>())\n        });\n    }, [editor]);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>\n<p>다음으로, <code>LexicalComposer/</code>의 하위 컴포넌트로 <code>OnChangePlugin/</code> 컴포넌트를 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Index</span>: src/<span class=\"hljs-title class_\">App</span>.<span class=\"hljs-property\">tsx</span>\n@@ -<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span> @@\n <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">LexicalErrorBoundary</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@lexical/react/LexicalErrorBoundary'</span>;\n <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">HistoryPlugin</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@lexical/react/LexicalHistoryPlugin'</span>;\n <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">CustomHistoryActions</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components\"</span>;\n+<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">OnChangePlugin</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">App</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n\n@@ -<span class=\"hljs-number\">47</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">48</span>,<span class=\"hljs-number\">7</span> @@\n                    <span class=\"hljs-title class_\">ErrorBoundary</span>={<span class=\"hljs-title class_\">LexicalErrorBoundary</span>}\n                />\n                <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">HistoryPlugin</span>/></span></span>\n+                <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">OnChangePlugin</span> /></span></span>\n                <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{margin:</span> '<span class=\"hljs-attr\">20px</span> <span class=\"hljs-attr\">0px</span>'}></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CustomHistoryActions</span>/></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n</code></pre>\n<p>이제 편집기의 상태가 변경될 때마다 편집기의 상태 트리 데이터를 콘솔에 출력할 것입니다:</p>\n<p><img src=\"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_3.png\" alt=\"이미지\"></p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*Lqyfyb4peVPoHJQvYuBNhQ.gif\" alt=\"이미지\"></p>\n<p>이 텍스트를 입력하면 어떤 데이터를 얻을지 확인해 봅시다:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"root\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"children\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n      <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">\"children\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n          <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">\"detail\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"format\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"mode\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"normal\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"style\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"text\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"asd\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"version\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span>\n          <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n          <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"linebreak\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"version\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span>\n          <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n          <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">\"detail\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"format\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"mode\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"normal\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"style\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"text\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"dsa\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"version\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span>\n          <span class=\"hljs-punctuation\">}</span>\n        <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"direction\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"ltr\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"format\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"indent\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"paragraph\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"version\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"direction\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"ltr\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"format\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"indent\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"root\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"version\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>아마도 노드가 간단한 속성을 가진 객체임을 알았을겁니다. 주요 속성은 노드의 종류인 type과 노드의 내용인 text입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> initialState <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./initialState.json'</span>;\n\n<span class=\"hljs-comment\">// ...</span>\n\n<span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">LexicalComposer</span>\n        <span class=\"hljs-attr\">initialConfig</span>=<span class=\"hljs-string\">{</span>\n          // <span class=\"hljs-attr\">...</span>\n          <span class=\"hljs-attr\">editorState:</span> <span class=\"hljs-attr\">JSON.stringify</span>(<span class=\"hljs-attr\">initialState</span>),\n        }\n      ></span>\n            {/* ... */}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">LexicalComposer</span>></span></span>\n    );\n</code></pre>\n<p>이 경우 앱을 다시 시작할 때마다 동일한 결과를 얻을 수 있습니다:</p>\n<p>Nodes에 대해 더 많은 정보를 읽어보실 수 있습니다.</p>\n<pre><code>\n\n\n# 리치 텍스트\n\n첫 번째 노드 수정 핸들러를 만들어 봅시다.\n\n이전에 PlainTextPlugin 컴포넌트를 사용했기 때문에 \"bold\" (CTRL+B) 액션과 같은 텍스트 작업을 처리할 수 없습니다:\n\n```js\n&#x3C;LexicalComposer initialConfig={lexicalConfig}>\n  &#x3C;PlainTextPlugin ...  />\n...\n&#x3C;/LexicalComposer>\n</code></pre>\n<p>App.tsx 파일에서 PlainTextPlugin을 RichTextPlugin으로 변경해야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Index</span>: src/<span class=\"hljs-title class_\">App</span>.<span class=\"hljs-property\">tsx</span>\n\n@@ -<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">6</span> @@\n <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, {useMemo} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">InitialConfigType</span>, <span class=\"hljs-title class_\">LexicalComposer</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@lexical/react/LexicalComposer'</span>;\n-<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">PlainTextPlugin</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalPlainTextPlugin\"</span>;\n+<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">RichTextPlugin</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalRichTextPlugin\"</span>;\n <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">ContentEditable</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@lexical/react/LexicalContentEditable'</span>;\n <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">LexicalErrorBoundary</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@lexical/react/LexicalErrorBoundary'</span>;\n <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">HistoryPlugin</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@lexical/react/LexicalHistoryPlugin'</span>;\n@@ -<span class=\"hljs-number\">46</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">46</span>,<span class=\"hljs-number\">7</span> @@\n             &#x3C;<span class=\"hljs-title class_\">LexicalComposer</span>\n                 initialConfig={lexicalConfig}\n             >\n-                &#x3C;PlainTextPlugin\n+                &#x3C;RichTextPlugin\n                     contentEditable={CustomContent}\n                     placeholder={CustomPlaceholder}\n                     ErrorBoundary={LexicalErrorBoundary}\n</code></pre>\n<p>이제 에디터에서 기본 텍스트 작업을 사용할 수 있을 것입니다:</p>\n<p>우리의 커스텀 버튼을 만들어 봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/CustomTextActions/CustomTextActions.tsx</span>\n\n<span class=\"hljs-keyword\">import</span> {useLexicalComposerContext} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalComposerContext\"</span>;\n<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-variable constant_\">FORMAT_TEXT_COMMAND</span>, <span class=\"hljs-title class_\">TextFormatType</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lexical'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CustomTextActions</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleOnClick</span> = (<span class=\"hljs-params\">formatType: TextFormatType</span>) => {\n        editor.<span class=\"hljs-title function_\">dispatchCommand</span>(<span class=\"hljs-variable constant_\">FORMAT_TEXT_COMMAND</span>, formatType)\n    }\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{marginTop:</span> '<span class=\"hljs-attr\">10px</span>'}}></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{fontWeight:</span> '<span class=\"hljs-attr\">bold</span>'}}></span>텍스트 액션<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n                {[\n                    '굵게',\n                    '이탤릭체',\n                    '밑줄',\n                    '코드',\n                    '하이라이트',\n                    '취소선',\n                    '아래첨자',\n                    '위첨자'\n                ].map(value => {\n                    return (\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n                            <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> handleOnClick(value.toLowerCase() as TextFormatType)}>\n                            {value}\n                        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                    )\n                })}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    );\n}\n</code></pre>\n<p>하지만 텍스트를 수정하려고 하면 기대했던 결과가 나오지 않을 수 있습니다: 일부 항목은 변경되고 일부는 변경되지 않을 수 있습니다. 그 이유가 무엇일까요?</p>\n<p>HTML 출력을 확인해 봅시다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;p dir=<span class=\"hljs-string\">\"ltr\"</span>><span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">strong</span> <span class=\"hljs-attr\">data-lexical-text</span>=<span class=\"hljs-string\">\"true\"</span>></span>굵게<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">strong</span>></span></span>&#x3C;/p>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">\"ltr\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">em</span> <span class=\"hljs-attr\">data-lexical-text</span>=<span class=\"hljs-string\">\"true\"</span>></span>이탤릭체<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">em</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">\"ltr\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-lexical-text</span>=<span class=\"hljs-string\">\"true\"</span>></span>밑줄<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">\"ltr\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">code</span> <span class=\"hljs-attr\">data-lexical-text</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>코드<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">code</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">\"ltr\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">mark</span> <span class=\"hljs-attr\">data-lexical-text</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>강조<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">mark</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">\"ltr\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-lexical-text</span>=<span class=\"hljs-string\">\"true\"</span>></span>취소선<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">\"ltr\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">sub</span> <span class=\"hljs-attr\">data-lexical-text</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>아래 첨자<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">sub</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">\"ltr\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">sup</span> <span class=\"hljs-attr\">data-lexical-text</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>위 첨자<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">sup</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">\"ltr\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">code</span> <span class=\"hljs-attr\">data-lexical-text</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">strong</span>></span>모두 표시<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">strong</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">code</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n</code></pre>\n<p>요소에는 적용된 스타일이 없지만 브라우저에서 <code>mark</code>/<code>strong/</code>/<code>em/</code>에 대한 사전 정의된 스타일이 있어 약간의 스타일 변화가 있습니다. 그러나 우리가 기대한 것은 아닙니다.</p>\n<p>이제 다음 주제인 → 테마를 다루어볼 시간입니다.</p>\n<p>👉 작은 참고사항입니다. Align 작업 구현이 이렇게 보일 것입니다 (텍스트와 동일한 디스패치 명령어 접근 방식):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {\n    useLexicalComposerContext\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalComposerContext\"</span>;\n<span class=\"hljs-keyword\">import</span> {\n    <span class=\"hljs-variable constant_\">FORMAT_ELEMENT_COMMAND</span>,\n    <span class=\"hljs-title class_\">ElementFormatType</span>,\n    <span class=\"hljs-variable constant_\">OUTDENT_CONTENT_COMMAND</span>,\n    <span class=\"hljs-variable constant_\">INDENT_CONTENT_COMMAND</span>\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lexical'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CustomAlignActions</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleOnClick</span> = (<span class=\"hljs-params\">formatType: ElementFormatType</span>) => {\n        editor.<span class=\"hljs-title function_\">dispatchCommand</span>(<span class=\"hljs-variable constant_\">FORMAT_ELEMENT_COMMAND</span>, formatType)\n    }\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{marginTop:</span> '<span class=\"hljs-attr\">10px</span>'}></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{fontWeight:</span> '<span class=\"hljs-attr\">bold</span>'}></span>Align actions<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n                {[\n                    'Left',\n                    'Center',\n                    'Right',\n                    'Justify',\n                ].map(value => {\n                    return (\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n                            <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> handleOnClick(value.toLowerCase() as ElementFormatType)}>\n                            {value}\n                        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                    )\n                })}\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n                    <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> editor.dispatchCommand(OUTDENT_CONTENT_COMMAND, undefined)}>\n                    Outdent\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n                    <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> editor.dispatchCommand(INDENT_CONTENT_COMMAND, undefined)}>\n                    Indent\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    );\n}\n</code></pre>\n<p><img src=\"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_7.png\" alt=\"이미지\"></p>\n<p>위의 경우 \"정당화\" 노드가 편집기 상태 JSON에서 어떻게 나타낼지에 대한 예시입니다:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"children\"</span>: [\n    {\n      <span class=\"hljs-string\">\"detail\"</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-string\">\"format\"</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-string\">\"mode\"</span>: <span class=\"hljs-string\">\"normal\"</span>,\n      <span class=\"hljs-string\">\"style\"</span>: <span class=\"hljs-string\">\"\"</span>,\n      <span class=\"hljs-string\">\"text\"</span>: <span class=\"hljs-string\">\"Justify\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"text\"</span>,\n      <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">1</span>\n    },\n    {\n      <span class=\"hljs-string\">\"detail\"</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-string\">\"format\"</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-string\">\"mode\"</span>: <span class=\"hljs-string\">\"normal\"</span>,\n      <span class=\"hljs-string\">\"style\"</span>: <span class=\"hljs-string\">\"\"</span>,\n      <span class=\"hljs-string\">\"text\"</span>: <span class=\"hljs-string\">\" - Lorem ipsum dolor sit amet, &#x3C;...>\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"text\"</span>,\n      <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">1</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"direction\"</span>: <span class=\"hljs-string\">\"ltr\"</span>,\n  <span class=\"hljs-string\">\"format\"</span>: <span class=\"hljs-string\">\"justify\"</span>,\n  <span class=\"hljs-string\">\"indent\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"paragraph\"</span>,\n  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">1</span>\n}\n</code></pre>\n<h1>테마</h1>\n<p>Nodes를 수정할 때, lexical은 테마 객체 theme.[<code>노드-타입</code>]에서 지정된 노드 타입에 대해 스타일(클래스 이름)을 적용합니다.</p>\n<p>해달 코드를 추가하고 텍스트 스타일을 적용해 보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Index</span>: src/<span class=\"hljs-title class_\">App</span>.<span class=\"hljs-property\">tsx</span>\n\n@@ -<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">7</span> @@\n     <span class=\"hljs-title class_\">CustomHistoryActions</span>\n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components\"</span>;\n <span class=\"hljs-keyword\">import</span> initialState <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./initialState.json'</span>;\n+<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>\n \n <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">App</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n \n@@ -<span class=\"hljs-number\">38</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">39</span>,<span class=\"hljs-number\">18</span> @@\n \n     <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">lexicalConfig</span>: <span class=\"hljs-title class_\">InitialConfigType</span> = {\n         <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">'My Rich Text Editor'</span>,\n+        <span class=\"hljs-attr\">theme</span>: {\n+            <span class=\"hljs-attr\">text</span>: {\n+                <span class=\"hljs-attr\">bold</span>: <span class=\"hljs-string\">\"text-bold\"</span>,\n+                <span class=\"hljs-attr\">italic</span>: <span class=\"hljs-string\">\"text-italic\"</span>,\n+                <span class=\"hljs-attr\">underline</span>: <span class=\"hljs-string\">\"text-underline\"</span>,\n+                <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">'text-code'</span>,\n+                <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-string\">'text-highlight'</span>,\n+                <span class=\"hljs-attr\">strikethrough</span>: <span class=\"hljs-string\">'text-strikethrough'</span>,\n+                <span class=\"hljs-attr\">subscript</span>: <span class=\"hljs-string\">'text-subscript'</span>,\n+                <span class=\"hljs-attr\">superscript</span>: <span class=\"hljs-string\">'text-superscript'</span>,\n+            },\n+        },\n         <span class=\"hljs-attr\">onError</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =></span> {\n             <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'ERROR:'</span>, e)\n         },\n</code></pre>\n<p>CSS:</p>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">text</span>-bold {\n    font-<span class=\"hljs-attr\">weight</span>: bold;\n}\n\n.<span class=\"hljs-property\">text</span>-italic {\n    font-<span class=\"hljs-attr\">style</span>: italic;\n}\n\n.<span class=\"hljs-property\">text</span>-underline {\n    text-<span class=\"hljs-attr\">decoration</span>: underline;\n}\n\n.<span class=\"hljs-property\">text</span>-code {\n    background-<span class=\"hljs-attr\">color</span>: #f0f2f5;\n    <span class=\"hljs-attr\">padding</span>: 1px <span class=\"hljs-number\">0.</span>25rem;\n    font-<span class=\"hljs-attr\">family</span>: <span class=\"hljs-title class_\">Menlo</span>, <span class=\"hljs-title class_\">Consolas</span>, <span class=\"hljs-title class_\">Monaco</span>, monospace;\n    font-<span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">94</span>%;\n}\n\n.<span class=\"hljs-property\">text</span>-highlight {\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span> 5px;\n}\n\n.<span class=\"hljs-property\">text</span>-strikethrough {\n    text-<span class=\"hljs-attr\">decoration</span>: line-through;\n}\n\n.<span class=\"hljs-property\">text</span>-subscript {\n    vertical-<span class=\"hljs-attr\">align</span>: sub;\n}\n\n.<span class=\"hljs-property\">text</span>-superscript {\n    vertical-<span class=\"hljs-attr\">align</span>: <span class=\"hljs-variable language_\">super</span>;\n}\n\np {\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1260/1*_KW7zAxitBpOe3HrAqHHfw.gif\" alt=\"image\"></p>\n<p><img src=\"/assets/img/2024-05-14-GettingStartedwithLexicalRichTextEditorforReact_8.png\" alt=\"image\"></p>\n<p><strong>Bold</strong>\n<em>Italic</em>\nUnderline\n<code>Code</code>\nHighlight\n<del>Strike</del>\nXSub\nXSuper\nAll of them</p>\n<p>알겠지만, 우리가 디스패치를 트리거할 때마다, 렉시컬이 클래스를 교체하지 않고, 있는 경우 추가하거나 있는 경우 제거했습니다. 이 점을 명심해주세요. \"굵게 기울임체 밑줄\"에 대해 별도의 CSS 클래스를 만들 필요가 없습니다.</p>\n<p>에디터의 상태 JSON:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"root\"</span>: {\n    <span class=\"hljs-string\">\"children\"</span>: [\n      {\n        <span class=\"hljs-string\">\"children\"</span>: [\n          {\n            <span class=\"hljs-string\">\"detail\"</span>: <span class=\"hljs-number\">0</span>,\n            <span class=\"hljs-string\">\"format\"</span>: <span class=\"hljs-number\">11</span>,\n            <span class=\"hljs-string\">\"mode\"</span>: <span class=\"hljs-string\">\"normal\"</span>,\n            <span class=\"hljs-string\">\"style\"</span>: <span class=\"hljs-string\">\"\"</span>,\n            <span class=\"hljs-string\">\"text\"</span>: <span class=\"hljs-string\">\"굵게 기울임체 밑줄\"</span>,\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"text\"</span>,\n            <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">1</span>\n          }\n        ],\n        <span class=\"hljs-string\">\"direction\"</span>: <span class=\"hljs-string\">\"ltr\"</span>,\n        <span class=\"hljs-string\">\"format\"</span>: <span class=\"hljs-string\">\"\"</span>,\n        <span class=\"hljs-string\">\"indent\"</span>: <span class=\"hljs-number\">0</span>,\n        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"paragraph\"</span>,\n        <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">1</span>\n      }\n    ],\n    <span class=\"hljs-string\">\"direction\"</span>: <span class=\"hljs-string\">\"ltr\"</span>,\n    <span class=\"hljs-string\">\"format\"</span>: <span class=\"hljs-string\">\"\"</span>,\n    <span class=\"hljs-string\">\"indent\"</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"root\"</span>,\n    <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">1</span>\n  }\n}\n</code></pre>\n<h1>헤딩. 헬퍼 및 노드 구성</h1>\n<p>등록된 어휘 명령이 없을 경우 어떻게 해야 할까요? 단어 요소(어휘의 기본 노드)를 어휘 명령을 사용하지 않고 헤더 노드로 변환해 봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useLexicalComposerContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalComposerContext\"</span>;\n<span class=\"hljs-keyword\">import</span> { $getSelection, $isRangeSelection } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"lexical\"</span>;\n<span class=\"hljs-keyword\">import</span> { $setBlocksType } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/selection\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HeadingTagType</span>, $createHeadingNode } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/rich-text\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CustomHeadingActions</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleOnClick</span> = (<span class=\"hljs-params\">tag: HeadingTagType</span>) => {\n        editor.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-keyword\">const</span> selection = $getSelection();\n            <span class=\"hljs-keyword\">if</span> ($isRangeSelection(selection)) {\n                $setBlocksType(selection, <span class=\"hljs-function\">() =></span> $createHeadingNode(tag));\n            }\n        });\n    };\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">marginTop:</span> '<span class=\"hljs-attr\">10px</span>' }}></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">fontWeight:</span> '<span class=\"hljs-attr\">bold</span>' }}></span>Align actions<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n                {([\"h1\", \"h2\", \"h3\", \"h4\", \"h5\"] as Array<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">HeadingTagType</span>></span>).map((tag) => {\n                    return (\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n                            <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{tag}</span>\n                            <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> handleOnClick(tag)}\n                        >\n                            {tag}\n                        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                    );\n                })}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    );\n}\n</span></code></pre>\n<p>일부 노드를 헤딩 노드로 변환하는 데 미리 정의된 명령이 없기 때문에 여기서는 다음과 같은 작업을 수행합니다:</p>\n<ul>\n<li>콜백을 인수로 전달하는 editor.update 함수 호출</li>\n<li>선택된 노드를 가져오기 위해 $getSelection 헬퍼 사용</li>\n<li>$isRangeSelection을 사용하여 RangeSelection 유형인지 확인합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 소스코드</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">$isRangeSelection</span>(<span class=\"hljs-params\">x: unknown</span>): x is <span class=\"hljs-title class_\">RangeSelection</span> {\n  <span class=\"hljs-keyword\">return</span> x <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">RangeSelection</span>;\n}\n</code></pre>\n<ol start=\"4\">\n<li>$setBlocksType을 새로운 $createHeadingNode (h1, h2, h3…)으로 변경하세요;</li>\n</ol>\n<p>⚠️ 하지만 앱에서 사용해보면 아무 일도 일어나지 않습니다 → 문단이 헤더로 변경되지 않습니다. 에디터에서 사용하고 싶은 노드에 대해 렉시컬이 알지 못하기 때문입니다 (기본 노드를 제외하고). 노드 구성 배열에 HeaderNode를 추가해야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Index</span>: src/<span class=\"hljs-title class_\">App</span>.<span class=\"hljs-property\">tsx</span>\n\n@@ -<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">7</span> @@\n     <span class=\"hljs-title class_\">CustomHistoryActions</span>,\n     <span class=\"hljs-title class_\">CustomAlignActions</span>, <span class=\"hljs-title class_\">CustomHeadingActions</span>\n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components\"</span>;\n+<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">HeadingNode</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/rich-text\"</span>;\n <span class=\"hljs-keyword\">import</span> initialState <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./initialState.json'</span>;\n <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>\n \n@@ -<span class=\"hljs-number\">40</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">41</span>,<span class=\"hljs-number\">7</span> @@\n \n     <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">lexicalConfig</span>: <span class=\"hljs-title class_\">InitialConfigType</span> = {\n         <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">'My Rich Text Editor'</span>,\n+        <span class=\"hljs-attr\">nodes</span>: [<span class=\"hljs-title class_\">HeadingNode</span>],\n         <span class=\"hljs-attr\">theme</span>: {\n             <span class=\"hljs-attr\">text</span>: {\n                 <span class=\"hljs-attr\">bold</span>: <span class=\"hljs-string\">\"text-bold\"</span>,\n</code></pre>\n<h1>페이로드와 함께 자신만의 명령어를 생성하는 방법</h1>\n<p>이전 코드를 다시 작성해 보겠습니다. 다른 곳에서 변환 명령을 호출해야 하는 경우에도 이 조각을 복사-붙여넣기할 필요가 없도록 바꿀 거에요:</p>\n<pre><code class=\"hljs language-js\">editor.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> selection = $getSelection();\n      <span class=\"hljs-keyword\">if</span> ($isRangeSelection(selection)) {\n        $setBlocksType(selection, <span class=\"hljs-function\">() =></span> $createHeadingNode(tag));\n      }\n});\n</code></pre>\n<p>위 작업을 위해 페이로드 <code>\"h1\" | \"h2\" | \"h3\", ...</code>을 사용하여 자체 FORMAT_HEADING_COMMAND를 생성하고 등록합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/CustomHeadingPlugin/CustomHeadingPlugin.tsx</span>\n\n<span class=\"hljs-keyword\">import</span> { useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { useLexicalComposerContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalComposerContext\"</span>;\n<span class=\"hljs-keyword\">import</span> {\n    createCommand,\n    $getSelection,\n    $isRangeSelection,\n    <span class=\"hljs-variable constant_\">COMMAND_PRIORITY_NORMAL</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"lexical\"</span>;\n<span class=\"hljs-keyword\">import</span> {\n    $setBlocksType\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/selection\"</span>;\n<span class=\"hljs-keyword\">import</span> {\n    <span class=\"hljs-title class_\">HeadingTagType</span>,\n    $createHeadingNode\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/rich-text\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">FORMAT_HEADING_COMMAND</span> = <span class=\"hljs-title function_\">createCommand</span>(<span class=\"hljs-string\">\"FORMAT_HEADING_COMMAND\"</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CustomHeadingPlugin</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n\n    <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n        editor.<span class=\"hljs-property\">registerCommand</span>&#x3C;<span class=\"hljs-title class_\">HeadingTagType</span>>(\n            <span class=\"hljs-variable constant_\">FORMAT_HEADING_COMMAND</span>,\n            <span class=\"hljs-function\">(<span class=\"hljs-params\">payload</span>) =></span> {\n                <span class=\"hljs-keyword\">const</span> selection = $getSelection();\n                <span class=\"hljs-keyword\">if</span> ($isRangeSelection(selection)) {\n                    $setBlocksType(selection, <span class=\"hljs-function\">() =></span> $createHeadingNode(payload));\n                }\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            },\n            <span class=\"hljs-variable constant_\">COMMAND_PRIORITY_NORMAL</span>,\n        );\n    }, []);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>\n<p>이제 <code>CustomHeadingActions/</code> 구현을 업데이트할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Index</span>: src/components/<span class=\"hljs-title class_\">CustomHeadingActions</span>/<span class=\"hljs-title class_\">CustomHeadingActions</span>.<span class=\"hljs-property\">tsx</span>\n@@ -<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">22</span> +<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">15</span> @@\n<span class=\"hljs-keyword\">import</span> {\n    useLexicalComposerContext\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalComposerContext\"</span>;\n<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">HeadingTagType</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/rich-text\"</span>;\n<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-variable constant_\">FORMAT_HEADING_COMMAND</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../CustomHeadingPlugin\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CustomHeadingActions</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleOnClick</span> = (<span class=\"hljs-params\">tag: HeadingTagType</span>) => {\n        editor.<span class=\"hljs-title function_\">dispatchCommand</span>(<span class=\"hljs-variable constant_\">FORMAT_HEADING_COMMAND</span>, tag);\n    };\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{marginTop:</span> '<span class=\"hljs-attr\">10px</span>'}></span>\n</span></code></pre>\n<p>이 변형은 내게 훨씬 깔끔하고 재사용 가능해 보여요. 그 이후에는 LexicalComposer의 자식으로 우리가 만든 Header Plugin을 배치해야할거에요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Index</span>: src/<span class=\"hljs-title class_\">App</span>.<span class=\"hljs-property\">tsx</span>\n\n@@ -<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">8</span> +<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">11</span> @@\n     <span class=\"hljs-title class_\">OnChangePlugin</span>,\n     <span class=\"hljs-title class_\">CustomTextActions</span>,\n     <span class=\"hljs-title class_\">CustomHistoryActions</span>,\n     <span class=\"hljs-title class_\">CustomAlignActions</span>,\n     <span class=\"hljs-title class_\">CustomHeadingActions</span>,\n+    <span class=\"hljs-title class_\">CustomHeadingPlugin</span>,\n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components\"</span>;\n <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">HeadingNode</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/rich-text\"</span>;\n <span class=\"hljs-keyword\">import</span> initialState <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./initialState.json'</span>;\n <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>\n\n@@ -<span class=\"hljs-number\">70</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">74</span>,<span class=\"hljs-number\">7</span> @@\n                 />\n                 <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">HistoryPlugin</span>/></span></span>\n                 <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">OnChangePlugin</span>/></span></span>\n+                <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CustomHeadingPlugin</span>/></span></span>\n                 &#x3C;div style={margin: '20px 0px'}>\n                     &#x3C;CustomHistoryActions/>\n                     &#x3C;CustomHeadingActions/\n</code></pre>\n<p>👉 참고: 이전에 다뤘지만 다시 한 번 상기시키자면... 테마 구성을 업데이트하여 각 헤딩 엘리먼트에 적용하려는 CSS 클래스 이름을 지정할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Index</span>: src/<span class=\"hljs-title class_\">App</span>.<span class=\"hljs-property\">tsx</span>\n\n@@ -<span class=\"hljs-number\">62</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">62</span>,<span class=\"hljs-number\">14</span> @@\n                 <span class=\"hljs-attr\">subscript</span>: <span class=\"hljs-string\">'text-subscript'</span>,\n                 <span class=\"hljs-attr\">superscript</span>: <span class=\"hljs-string\">'text-superscript'</span>,\n             },\n+            <span class=\"hljs-attr\">heading</span>: {\n+                <span class=\"hljs-comment\">// Flowbite examples: https://flowbite.com/docs/typography/headings/#heading-one-h1</span>\n+                <span class=\"hljs-attr\">h1</span>: <span class=\"hljs-string\">\"text-5xl font-extrabold dark:text-white\"</span>,\n+                <span class=\"hljs-attr\">h2</span>: <span class=\"hljs-string\">\"text-4xl font-bold dark:text-white\"</span>,\n+                <span class=\"hljs-attr\">h3</span>: <span class=\"hljs-string\">\"text-3xl font-bold dark:text-white\"</span>,\n+                <span class=\"hljs-attr\">h4</span>: <span class=\"hljs-string\">\"text-2xl font-bold dark:text-white\"</span>,\n+                <span class=\"hljs-attr\">h5</span>: <span class=\"hljs-string\">\"text-xl font-bold dark:text-white\"</span>,  \n+            },\n             <span class=\"hljs-attr\">banner</span>: <span class=\"hljs-string\">'banner'</span>\n         },\n         <span class=\"hljs-attr\">onError</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =></span> {\n</code></pre>\n<h1>커스텀 노드를 만드는 방법</h1>\n<p>이전 섹션에서는 기본적으로 모든 것을 다루었으니, 이번 섹션에서는 직접 노드를 만들어보겠습니다. 제가 생각하기에 렉시컬이 노드를 처리하는 전체 그림을 파악하게 될 것입니다.</p>\n<p>가장 간단한 배너 노드:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {\n    <span class=\"hljs-title class_\">EditorConfig</span>,\n    <span class=\"hljs-title class_\">ElementNode</span>,\n    <span class=\"hljs-title class_\">LexicalEditor</span>,\n    <span class=\"hljs-title class_\">SerializedElementNode</span>,\n    <span class=\"hljs-title class_\">Spread</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"lexical\"</span>;\n\n<span class=\"hljs-keyword\">export</span> type <span class=\"hljs-title class_\">SerializedBannerNode</span> = <span class=\"hljs-title class_\">Spread</span>&#x3C;\n    {\n        <span class=\"hljs-attr\">customValue</span>: string;\n    },\n    <span class=\"hljs-title class_\">SerializedElementNode</span>\n>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BannerNode</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">ElementNode</span> {\n    <span class=\"hljs-title function_\">createDOM</span>(<span class=\"hljs-attr\">_config</span>: <span class=\"hljs-title class_\">EditorConfig</span>, <span class=\"hljs-attr\">_editor</span>: <span class=\"hljs-title class_\">LexicalEditor</span>): <span class=\"hljs-title class_\">HTMLElement</span> {\n        <span class=\"hljs-keyword\">const</span> div = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"div\"</span>);\n        div.<span class=\"hljs-property\">className</span> = _config.<span class=\"hljs-property\">theme</span>.<span class=\"hljs-property\">banner</span>;\n        <span class=\"hljs-keyword\">return</span> div;\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">clone</span>(<span class=\"hljs-attr\">node</span>: <span class=\"hljs-title class_\">BannerNode</span>): <span class=\"hljs-title class_\">BannerNode</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BannerNode</span>(node.<span class=\"hljs-property\">__key</span>);\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getType</span>(): string {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"banner\"</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returning false tells Lexical that this node does not need its\n     * DOM element replacing with a new copy from createDOM.\n     */</span>\n    <span class=\"hljs-title function_\">updateDOM</span>(\n        <span class=\"hljs-attr\">_prevNode</span>: unknown,\n        <span class=\"hljs-attr\">_dom</span>: <span class=\"hljs-title class_\">HTMLElement</span>,\n        <span class=\"hljs-attr\">_config</span>: <span class=\"hljs-title class_\">EditorConfig</span>,\n    ): boolean {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-title function_\">exportJSON</span>(): <span class=\"hljs-title class_\">SerializedBannerNode</span> {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"banner\"</span>,\n            <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-attr\">children</span>: [],\n            <span class=\"hljs-attr\">customValue</span>: <span class=\"hljs-string\">\"anything you like\"</span>,\n            <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">\"\"</span>,\n            <span class=\"hljs-attr\">indent</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-attr\">direction</span>: <span class=\"hljs-literal\">null</span>,\n        };\n    }\n}\n</code></pre>\n<p>설명:</p>\n<ul>\n<li>새로운 어휘 노드를 만들려면 미리 정의된 어휘 노드(ElementNode | TextNode | DecoratorNode 중 하나를 확장한 클래스를 만들고 메서드를 재정의해야 합니다(모든 메서드를 다루지는 않겠습니다));</li>\n<li>먼저, 어휘는 노드의 타입에 대한 일치 항목을 찾으려고 할 것이며, 타입 함수를 호출하여 구성 노드 배열('banner'의 경우)에서 지정한 노드들로부터 getType 함수를 호출할 것입니다;</li>\n<li>그 다음으로, 어휘는 HTML 요소를 만드는 createDOM 메서드를 호출할 것입니다;</li>\n<li>OnChangePlugin에 toJSON 함수가 있는 것을 기억하시나요?</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/OnChangePlugin/OnChangePlugin.tsx</span>\n\n<span class=\"hljs-keyword\">import</span> {useLexicalComposerContext} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalComposerContext\"</span>;\n<span class=\"hljs-keyword\">import</span> {useEffect} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">OnChangePlugin</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n    <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-keyword\">return</span> editor.<span class=\"hljs-title function_\">registerUpdateListener</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">listener</span>) =></span> {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'DATA'</span>, listener.<span class=\"hljs-property\">editorState</span>.<span class=\"hljs-title function_\">toJSON</span>())\n        });\n    }, [editor]);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>\n<p>여기서 우리의 Banner exportJSON 함수가 호출될 것입니다.</p>\n<p>이제 BannerNode를 위한 플러그인을 생성해야 합니다. 이미 Headings 섹션에서 이를 수행한 적이 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {useLexicalComposerContext} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalComposerContext\"</span>;\n<span class=\"hljs-keyword\">import</span> {$getSelection, $isRangeSelection, <span class=\"hljs-variable constant_\">COMMAND_PRIORITY_NORMAL</span>, createCommand} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"lexical\"</span>;\n<span class=\"hljs-keyword\">import</span> {\n    $setBlocksType\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/selection\"</span>;\n<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">BannerNode</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../../nodes\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> $createBannerNode = (): <span class=\"hljs-function\"><span class=\"hljs-params\">BannerNode</span> =></span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BannerNode</span>();\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">INSERT_BANNER_COMMAND</span> = <span class=\"hljs-title function_\">createCommand</span>(<span class=\"hljs-string\">\"create_banner\"</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">CustomBannerPlugin</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n\n    <span class=\"hljs-keyword\">if</span> (!editor.<span class=\"hljs-title function_\">hasNode</span>(<span class=\"hljs-title class_\">BannerNode</span>)) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">'BannerPlugin: \"BannerNode\" not registered on editor'</span>);\n    }\n    editor.<span class=\"hljs-title function_\">registerCommand</span>(\n        <span class=\"hljs-variable constant_\">INSERT_BANNER_COMMAND</span>,\n        <span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-keyword\">const</span> selection = $getSelection();\n            <span class=\"hljs-keyword\">if</span> ($isRangeSelection(selection)) {\n                $setBlocksType(selection, $createBannerNode);\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        },\n        <span class=\"hljs-variable constant_\">COMMAND_PRIORITY_NORMAL</span>,\n    );\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n};\n</code></pre>\n<p>CustomBannerActions 컴포넌트를 추가하세요: 우리 명령어와 함께 간단한 버튼이 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> {useLexicalComposerContext} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/react/LexicalComposerContext\"</span>;\n<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-variable constant_\">INSERT_BANNER_COMMAND</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../CustomBannerPlugin\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">CustomBannerActions</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> [editor] = <span class=\"hljs-title function_\">useLexicalComposerContext</span>();\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleOnClick</span> = (<span class=\"hljs-params\"></span>) => {\n        editor.<span class=\"hljs-title function_\">dispatchCommand</span>(<span class=\"hljs-variable constant_\">INSERT_BANNER_COMMAND</span>, <span class=\"hljs-literal\">undefined</span>);\n    };\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{marginTop:</span> '<span class=\"hljs-attr\">10px</span>'}}></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{fontWeight:</span> '<span class=\"hljs-attr\">bold</span>'}}></span>Heading actions<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleOnClick}</span>></span>\n                    Banner\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    );\n};\n</code></pre>\n<p>App.tsx를 업데이트하였습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Index</span>: src/<span class=\"hljs-title class_\">App</span>.<span class=\"hljs-property\">tsx</span>\n\n@@ -<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">10</span> +<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">13</span> @@\n     <span class=\"hljs-title class_\">CustomAlignActions</span>,\n     <span class=\"hljs-title class_\">CustomHeadingActions</span>,\n     <span class=\"hljs-title class_\">CustomHeadingPlugin</span>,\n+    <span class=\"hljs-title class_\">CustomBannerPlugin</span>,\n+    <span class=\"hljs-title class_\">CustomBannerActions</span>,\n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components\"</span>;\n <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">HeadingNode</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@lexical/rich-text\"</span>;\n <span class=\"hljs-keyword\">import</span> initialState <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./initialState.json'</span>;\n <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>\n+<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">BannerNode</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./nodes\"</span>;\n \n <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">App</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n \n@@ -<span class=\"hljs-number\">43</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">46</span>,<span class=\"hljs-number\">10</span> @@\n \n     <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">lexicalConfig</span>: <span class=\"hljs-title class_\">InitialConfigType</span> = {\n         <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">'My Rich Text Editor'</span>,\n-        <span class=\"hljs-attr\">nodes</span>: [<span class=\"hljs-title class_\">HeadingNode</span>],\n+        <span class=\"hljs-attr\">nodes</span>: [\n+            <span class=\"hljs-title class_\">BannerNode</span>,\n+            <span class=\"hljs-title class_\">HeadingNode</span>\n+        ],\n         <span class=\"hljs-attr\">theme</span>: {\n             <span class=\"hljs-attr\">text</span>: {\n                 <span class=\"hljs-attr\">bold</span>: <span class=\"hljs-string\">\"text-bold\"</span>,\n@@ -<span class=\"hljs-number\">55</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">61</span>,<span class=\"hljs-number\">7</span> @@\n                 <span class=\"hljs-attr\">subscript</span>: <span class=\"hljs-string\">'text-subscript'</span>,\n                 <span class=\"hljs-attr\">superscript</span>: <span class=\"hljs-string\">'text-superscript'</span>,\n             },\n+            <span class=\"hljs-attr\">banner</span>: <span class=\"hljs-string\">'banner'</span>\n         },\n         <span class=\"hljs-attr\">onError</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =></span> {\n             <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'ERROR:'</span>, e)\n@@ -<span class=\"hljs-number\">75</span>,<span class=\"hljs-number\">8</span> +<span class=\"hljs-number\">82</span>,<span class=\"hljs-number\">10</span> @@\n                 &#x3C;<span class=\"hljs-title class_\">HistoryPlugin</span>/>\n                 <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">OnChangePlugin</span>/></span></span>\n                 <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CustomHeadingPlugin</span>/></span></span>\n+                <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CustomBannerPlugin</span>/></span></span>\n                 <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{margin:</span> '<span class=\"hljs-attr\">20px</span> <span class=\"hljs-attr\">0px</span>'}></span>\n                     <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CustomHistoryActions</span>/></span>\n+                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CustomBannerActions</span>/></span>\n                     <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CustomHeadingActions</span>/></span>\n                     <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CustomTextActions</span>/></span>\n                     <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CustomAlignActions</span>/></span>\n</span></code></pre>\n<p>CSS:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Index</span>: src/<span class=\"hljs-title class_\">App</span>.<span class=\"hljs-property\">css</span>\n\n@@ -<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">13</span> @@\n     vertical-<span class=\"hljs-attr\">align</span>: <span class=\"hljs-variable language_\">super</span> ;\n }\n \n+.<span class=\"hljs-property\">banner</span> {\n+    border-<span class=\"hljs-attr\">left</span>: 3px coral solid;\n+    background-<span class=\"hljs-attr\">color</span>: lightskyblue;\n+    border-<span class=\"hljs-attr\">radius</span>: 3px;\n+    <span class=\"hljs-attr\">padding</span>: 10px <span class=\"hljs-number\">0</span>;\n+}\n+\n p {\n     <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span>;\n }\n</code></pre>\n<p>결과:</p>\n<p>🔴 문제가 두 가지 있을 것입니다:</p>\n<ul>\n<li>사용자가 Enter 키 또는 Shift+Enter 키를 눌러 노드에서 \"나가기\"를 할 수 없을 것입니다.</li>\n<li>사용자가 Backspace 키를 눌러 노드를 \"제거\"할 수 없을 것입니다.</li>\n</ul>\n<p>우리의 BannerNode를 업데이트해 봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Index</span>: src/nodes/<span class=\"hljs-title class_\">BannerNode</span>/<span class=\"hljs-title class_\">BannerNode</span>.<span class=\"hljs-property\">tsx</span>\n\n@@ -<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">9</span> @@\n     <span class=\"hljs-title class_\">EditorConfig</span>,\n     <span class=\"hljs-title class_\">ElementNode</span>,\n     <span class=\"hljs-title class_\">LexicalEditor</span>,\n+    $createParagraphNode,\n+    <span class=\"hljs-title class_\">LexicalNode</span>,\n+    <span class=\"hljs-title class_\">RangeSelection</span>,\n     <span class=\"hljs-title class_\">SerializedElementNode</span>,\n     <span class=\"hljs-title class_\">Spread</span>,\n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"lexical\"</span>;\n@@ -<span class=\"hljs-number\">40</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">43</span>,<span class=\"hljs-number\">34</span> @@\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n     }\n\n+    <span class=\"hljs-comment\">/**\n+     * 사용자가 모든 콘텐츠를 삭제할 때 노드를 단락으로 설정해야 합니다\n+     */</span>\n+    <span class=\"hljs-title function_\">collapseAtStart</span>(<span class=\"hljs-attr\">_</span>: <span class=\"hljs-title class_\">RangeSelection</span>): boolean {\n+        <span class=\"hljs-keyword\">const</span> paragraph = $createParagraphNode();\n+        <span class=\"hljs-keyword\">const</span> children = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getChildren</span>();\n+        children.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">child</span>) =></span> paragraph.<span class=\"hljs-title function_\">append</span>(child));\n+        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">replace</span>(paragraph);\n+\n+        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n+    }\n+\n+    <span class=\"hljs-comment\">/**\n+     * 사용자가 Enter 키를 누를 때 노드를 단락으로 설정해야 합니다.\n+     * Shift+Enter를 누를 경우 노드는 유지됩니다\n+     */</span>\n+    <span class=\"hljs-title function_\">insertNewAfter</span>(\n+        <span class=\"hljs-attr\">_</span>: <span class=\"hljs-title class_\">RangeSelection</span>,\n+        restoreSelection?: boolean,\n+    ): <span class=\"hljs-title class_\">LexicalNode</span> | <span class=\"hljs-literal\">null</span> {\n+        <span class=\"hljs-keyword\">const</span> paragraph = $createParagraphNode();\n+        <span class=\"hljs-keyword\">const</span> direction = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getDirection</span>();\n+        paragraph.<span class=\"hljs-title function_\">setDirection</span>(direction);\n+        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">insertAfter</span>(paragraph, restoreSelection);\n+\n+        <span class=\"hljs-keyword\">return</span> paragraph;\n+    }\n+\n     <span class=\"hljs-title function_\">exportJSON</span>(): <span class=\"hljs-title class_\">SerializedBannerNode</span> {\n         <span class=\"hljs-keyword\">return</span> {\n             <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"banner\"</span>,\n</code></pre>\n<p>지금까지 얻은 것을 확인해 보겠습니다:</p>\n<p>🟢 업데이트 후:</p>\n<ul>\n<li>사용자는 노드에서 Enter 키를 눌러 \"나가기\" 할 수 있습니다;</li>\n<li>사용자는 노드를 Shift + Enter 키를 눌러 \"확장\"할 수 있습니다;</li>\n<li>사용자는 콘텐츠 텍스트가 비어 있을 때 Backspace 키를 눌러 노드를 \"삭제\"할 수 있습니다;</li>\n</ul>\n<p>마지막으로, 에디터의 JSON 트리에서 BannerNode을 파싱하는 함수가 필요합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Index</span>: src/nodes/<span class=\"hljs-title class_\">BannerNode</span>/<span class=\"hljs-title class_\">BannerNode</span>.<span class=\"hljs-property\">tsx</span>\n\n@@ -<span class=\"hljs-number\">71</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">71</span>,<span class=\"hljs-number\">10</span> @@\n         <span class=\"hljs-keyword\">return</span> paragraph;\n     }\n \n+    <span class=\"hljs-keyword\">static</span> importJSON(<span class=\"hljs-attr\">_</span>: <span class=\"hljs-title class_\">SerializedBannerNode</span>): <span class=\"hljs-title class_\">BannerNode</span> {\n+        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BannerNode</span>();\n+    }\n+\n     <span class=\"hljs-title function_\">exportJSON</span>(): <span class=\"hljs-title class_\">SerializedBannerNode</span> {\n         <span class=\"hljs-keyword\">return</span> {\n             <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"banner\"</span>,\n</code></pre>\n<h1>깃허브 리포지토리:</h1>\n<p>관련된 기사들:</p>\n<p>이 글이 도움이 되었기를 바랍니다. 만약 그렇다면, \"claps\"를 주시면 감사하겠습니다.</p>\n<h1>간단히 설명</h1>\n<p>우리 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:</p>\n<ul>\n<li>반드시 작가를 칭찬하고 팔로우하세요! 👏</li>\n<li>PlainEnglish.io에서 더 많은 콘텐츠를 찾아보세요! 🚀</li>\n<li>무료 주간 뉴스레터에 가입하세요. 🗞️</li>\n<li>트위터, 링크드인, 유튜브, 그리고 디스코드에서 저희를 팔로우해주세요.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}