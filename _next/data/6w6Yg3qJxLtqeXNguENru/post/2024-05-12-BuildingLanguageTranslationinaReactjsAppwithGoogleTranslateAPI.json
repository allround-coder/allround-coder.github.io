{"pageProps":{"post":{"title":"Reactjs 앱에서 Google 번역 API를 이용한 언어 번역 구현하기","description":"","date":"2024-05-12 22:23","slug":"2024-05-12-BuildingLanguageTranslationinaReactjsAppwithGoogleTranslateAPI","content":"\n\n![이미지](/assets/img/2024-05-12-BuildingLanguageTranslationinaReactjsAppwithGoogleTranslateAPI_0.png)\n\nReact.js 애플리케이션에 언어 번역 기능을 통합하고 싶으신가요? Google Translate API를 사용하면 쉽게 이 목표를 달성할 수 있습니다. React.js 프로젝트에서 언어 번역 기능을 설정하고 구현하는 간단한 단계를 따라보세요.\n\n1. Google Cloud 프로젝트 설정:\n\n- Google Cloud Console로 이동합니다.\n- 새 프로젝트를 생성하거나 기존 프로젝트를 선택합니다.\n- 프로젝트에 \"Cloud Translation API\"를 활성화합니다.\n\n\n\n2. API 키 얻기:\n\n- 클라우드 콘솔에서 “API 및 서비스\" → “자격 증명\"으로 이동합니다.\n- 새 API 키를 생성합니다.\n- API 요청을 만들 때 이 API 키가 필요하므로 이를 접근 가능한 상태로 유지하세요.\n\n3. 종속성 설치:\n\n- React.js 프로젝트의 터미널을 열고 필요한 패키지를 설치하세요.\n\n\n\n```js\nnpm install axios\n```\n\n4. API 요청 생성:\n\n- API 요청을 처리할 새 파일을 만듭니다. 예를 들어 GoogleTranslate.js 파일을 만듭니다.\n- Axios를 활용하여 Google 번역 API로 요청을 보냅니다.\n\n```js\n// GoogleTranslate.js\nimport axios from 'axios';\n\nconst API_KEY = 'YOUR_GOOGLE_TRANSLATE_API_KEY';\nconst API_URL = 'https://translation.googleapis.com/language/translate/v2';\n\nconst translateText = async (text, targetLanguage) => {\n  const response = await axios.post(\n    `${API_URL}?key=${API_KEY}`,\n    {\n      q: text,\n      target: targetLanguage,\n    }\n  );\n\n  return response.data.data.translations[0].translatedText;\n};\n\nexport default translateText;\n```\n\n\n\n## 제목: Google 번역 API를 사용한 React.js 앱에서 언어 번역 기능 구축하기\n\nReact.js 애플리케이션에 언어 번역 기능을 통합하고 싶나요? Google 번역 API를 사용하면 쉽게 이 목표를 달성할 수 있어요. React.js 프로젝트에서 언어 번역 기능을 설정하고 구현하는 간단한 단계를 따라보세요.\n\n1. Google Cloud 프로젝트 설정:\n\n- Google Cloud Console로 이동합니다.\n- 새 프로젝트를 만들거나 기존 프로젝트를 선택합니다.\n- 프로젝트에 \"Cloud 번역 API\"를 활성화합니다.\n\n\n\n2. API 키 얻기:\n\n- 클라우드 콘솔에서 \"API 및 서비스\" > \"자격 증명\"으로 이동합니다.\n- 새 API 키를 생성합니다.\n- API 요청을 만들 때 필요하므로 이 API 키를 접근 가능한 상태로 유지하세요.\n\n3. 종속성 설치:\n\n- React.js 프로젝트의 터미널을 열고 필요한 패키지를 설치하세요:\n\n\n\n```js\nnpm install axios\n```\n\n4. API 요청 생성하기:\n\n- API 요청을 처리하는 새 파일을 만듭니다. 예를 들어, GoogleTranslate.js와 같이 지정할 수 있습니다.\n- Axios를 활용하여 Google 번역 API에 요청을 보냅니다.\n\n```js\nimport axios from 'axios';\n```\n\n\n\n```js\nconst API_KEY = 'YOUR_GOOGLE_TRANSLATE_API_KEY';\nconst API_URL = 'https://translation.googleapis.com/language/translate/v2';\nconst translateText = async (text, targetLanguage) => {\n  const response = await axios.post(\n    `${API_URL}?key=${API_KEY}`,\n    {\n      q: text,\n      target: targetLanguage,\n    }\n  );\n  return response.data.data.translations[0].translatedText;\n};\nexport default translateText;\n```\n\n5. React 컴포넌트에 통합하기:\n\n- React 컴포넌트에서 translateText 함수를 사용합니다.\n- 사용자가 텍스트를 입력하는 input 필드와 대상 언어를 선택하는 드롭다운을 가정합니다.\n- 사용자가 텍스트를 입력하고 언어를 선택하면 번역을 트리거합니다.\n\n```js\n// App.js\nimport React, { useState } from 'react';\nimport translateText from './GoogleTranslate';\n\nfunction App() {\n  const [inputText, setInputText] = useState('');\n  const [targetLanguage, setTargetLanguage] = useState('es'); // 기본값: 스페인어\n\n  const handleTranslate = async () => {\n    if (inputText) {\n      const translatedText = await translateText(inputText, targetLanguage);\n      // 번역된 텍스트를 처리합니다. 예: 페이지에 표시\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={inputText}\n        onChange={(e) => setInputText(e.target.value)}\n      />\n      <select\n        value={targetLanguage}\n        onChange={(e) => setTargetLanguage(e.target.value)}\n      >\n        <option value=\"es\">스페인어</option>\n        <option value=\"fr\">프랑스어</option>\n        {/* 다른 언어 옵션 추가 */}\n      </select>\n      <button onClick={handleTranslate}>번역</button>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n\n\n지금 ‘GoogleTranslate.js’ 파일에 있는 ‘YOUR_GOOGLE_TRANSLATE_API_KEY’를 실제 API 키로 교체하세요. 이제 React.js 애플리케이션을 더욱 향상시킬 수 있는 원활한 언어 번역 기능을 사용할 준비가 끝났습니다!\n\n요약하자면, Google Translate API를 React.js 앱에 통합하면 언어 번역이 간편해지며 전 세계적인 접근성이 향상됩니다. 초기 설정 복잡성에도 불구하고, 이 프로세스는 직관적인 UI 구성 요소로 사용자 친화적인 경험을 제공합니다. 이 방식은 언어 장벽을 허물어 포용력을 키우고 React.js 응용 프로그램에서 다양한 언어 선호도에 대한 유연한 플랫폼을 만듭니다.","ogImage":{"url":"/assets/img/2024-05-12-BuildingLanguageTranslationinaReactjsAppwithGoogleTranslateAPI_0.png"},"coverImage":"/assets/img/2024-05-12-BuildingLanguageTranslationinaReactjsAppwithGoogleTranslateAPI_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-12-BuildingLanguageTranslationinaReactjsAppwithGoogleTranslateAPI_0.png\" alt=\"이미지\"></p>\n<p>React.js 애플리케이션에 언어 번역 기능을 통합하고 싶으신가요? Google Translate API를 사용하면 쉽게 이 목표를 달성할 수 있습니다. React.js 프로젝트에서 언어 번역 기능을 설정하고 구현하는 간단한 단계를 따라보세요.</p>\n<ol>\n<li>Google Cloud 프로젝트 설정:</li>\n</ol>\n<ul>\n<li>Google Cloud Console로 이동합니다.</li>\n<li>새 프로젝트를 생성하거나 기존 프로젝트를 선택합니다.</li>\n<li>프로젝트에 \"Cloud Translation API\"를 활성화합니다.</li>\n</ul>\n<ol start=\"2\">\n<li>API 키 얻기:</li>\n</ol>\n<ul>\n<li>클라우드 콘솔에서 “API 및 서비스\" → “자격 증명\"으로 이동합니다.</li>\n<li>새 API 키를 생성합니다.</li>\n<li>API 요청을 만들 때 이 API 키가 필요하므로 이를 접근 가능한 상태로 유지하세요.</li>\n</ul>\n<ol start=\"3\">\n<li>종속성 설치:</li>\n</ol>\n<ul>\n<li>React.js 프로젝트의 터미널을 열고 필요한 패키지를 설치하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">npm install axios\n</code></pre>\n<ol start=\"4\">\n<li>API 요청 생성:</li>\n</ol>\n<ul>\n<li>API 요청을 처리할 새 파일을 만듭니다. 예를 들어 GoogleTranslate.js 파일을 만듭니다.</li>\n<li>Axios를 활용하여 Google 번역 API로 요청을 보냅니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// GoogleTranslate.js</span>\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">API_KEY</span> = <span class=\"hljs-string\">'YOUR_GOOGLE_TRANSLATE_API_KEY'</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">API_URL</span> = <span class=\"hljs-string\">'https://translation.googleapis.com/language/translate/v2'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">translateText</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">text, targetLanguage</span>) => {\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">post</span>(\n    <span class=\"hljs-string\">`<span class=\"hljs-subst\">${API_URL}</span>?key=<span class=\"hljs-subst\">${API_KEY}</span>`</span>,\n    {\n      <span class=\"hljs-attr\">q</span>: text,\n      <span class=\"hljs-attr\">target</span>: targetLanguage,\n    }\n  );\n\n  <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">translations</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">translatedText</span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> translateText;\n</code></pre>\n<h2>제목: Google 번역 API를 사용한 React.js 앱에서 언어 번역 기능 구축하기</h2>\n<p>React.js 애플리케이션에 언어 번역 기능을 통합하고 싶나요? Google 번역 API를 사용하면 쉽게 이 목표를 달성할 수 있어요. React.js 프로젝트에서 언어 번역 기능을 설정하고 구현하는 간단한 단계를 따라보세요.</p>\n<ol>\n<li>Google Cloud 프로젝트 설정:</li>\n</ol>\n<ul>\n<li>Google Cloud Console로 이동합니다.</li>\n<li>새 프로젝트를 만들거나 기존 프로젝트를 선택합니다.</li>\n<li>프로젝트에 \"Cloud 번역 API\"를 활성화합니다.</li>\n</ul>\n<ol start=\"2\">\n<li>API 키 얻기:</li>\n</ol>\n<ul>\n<li>클라우드 콘솔에서 \"API 및 서비스\" > \"자격 증명\"으로 이동합니다.</li>\n<li>새 API 키를 생성합니다.</li>\n<li>API 요청을 만들 때 필요하므로 이 API 키를 접근 가능한 상태로 유지하세요.</li>\n</ul>\n<ol start=\"3\">\n<li>종속성 설치:</li>\n</ol>\n<ul>\n<li>React.js 프로젝트의 터미널을 열고 필요한 패키지를 설치하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">npm install axios\n</code></pre>\n<ol start=\"4\">\n<li>API 요청 생성하기:</li>\n</ol>\n<ul>\n<li>API 요청을 처리하는 새 파일을 만듭니다. 예를 들어, GoogleTranslate.js와 같이 지정할 수 있습니다.</li>\n<li>Axios를 활용하여 Google 번역 API에 요청을 보냅니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">API_KEY</span> = <span class=\"hljs-string\">'YOUR_GOOGLE_TRANSLATE_API_KEY'</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">API_URL</span> = <span class=\"hljs-string\">'https://translation.googleapis.com/language/translate/v2'</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">translateText</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">text, targetLanguage</span>) => {\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">post</span>(\n    <span class=\"hljs-string\">`<span class=\"hljs-subst\">${API_URL}</span>?key=<span class=\"hljs-subst\">${API_KEY}</span>`</span>,\n    {\n      <span class=\"hljs-attr\">q</span>: text,\n      <span class=\"hljs-attr\">target</span>: targetLanguage,\n    }\n  );\n  <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">translations</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">translatedText</span>;\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> translateText;\n</code></pre>\n<ol start=\"5\">\n<li>React 컴포넌트에 통합하기:</li>\n</ol>\n<ul>\n<li>React 컴포넌트에서 translateText 함수를 사용합니다.</li>\n<li>사용자가 텍스트를 입력하는 input 필드와 대상 언어를 선택하는 드롭다운을 가정합니다.</li>\n<li>사용자가 텍스트를 입력하고 언어를 선택하면 번역을 트리거합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// App.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> translateText <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./GoogleTranslate'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [inputText, setInputText] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n  <span class=\"hljs-keyword\">const</span> [targetLanguage, setTargetLanguage] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">'es'</span>); <span class=\"hljs-comment\">// 기본값: 스페인어</span>\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleTranslate</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">if</span> (inputText) {\n      <span class=\"hljs-keyword\">const</span> translatedText = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">translateText</span>(inputText, targetLanguage);\n      <span class=\"hljs-comment\">// 번역된 텍스트를 처리합니다. 예: 페이지에 표시</span>\n    }\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{inputText}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setInputText(e.target.value)}\n      />\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">select</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{targetLanguage}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setTargetLanguage(e.target.value)}\n      >\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"es\"</span>></span>스페인어<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">option</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"fr\"</span>></span>프랑스어<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">option</span>></span>\n        {/* 다른 언어 옵션 추가 */}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">select</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleTranslate}</span>></span>번역<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>지금 ‘GoogleTranslate.js’ 파일에 있는 ‘YOUR_GOOGLE_TRANSLATE_API_KEY’를 실제 API 키로 교체하세요. 이제 React.js 애플리케이션을 더욱 향상시킬 수 있는 원활한 언어 번역 기능을 사용할 준비가 끝났습니다!</p>\n<p>요약하자면, Google Translate API를 React.js 앱에 통합하면 언어 번역이 간편해지며 전 세계적인 접근성이 향상됩니다. 초기 설정 복잡성에도 불구하고, 이 프로세스는 직관적인 UI 구성 요소로 사용자 친화적인 경험을 제공합니다. 이 방식은 언어 장벽을 허물어 포용력을 키우고 React.js 응용 프로그램에서 다양한 언어 선호도에 대한 유연한 플랫폼을 만듭니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}