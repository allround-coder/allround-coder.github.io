{"pageProps":{"post":{"title":"JavaScript에서 웹 브라우저가 접근 불가능할 때 카운터 상태를 유지하는 가장 쉬운 방법localStorage에서 재생성","description":"","date":"2024-05-14 12:58","slug":"2024-05-14-TheeasiestwaytokeepcounterstateafterwebbroswerisnotaccessiblerehydrateitfromlocalStorageinJavaScript","content":"\n\n최근 QA 팀에서 흥미로운 질문을 받았어요. 그 질문은, 왜 우리 이메일 토큰 카운터가 그들이 컴퓨터를 절전 상태로 변경할 때 멈추는지였어요? 처음에는 웹 브라우저가 실행 중이 아니면 우리의 JavaScript 애플리케이션이 작동하지 않는다는 일반적인 가정을 공유했어요. 하지만 그들의 우려는 사용자가 시간을 조작하여 이메일로 토큰을 다시 보낼 수 있는 보안 문제로 유효한 지점을 제기했어요.\n\n아래는 문제가 된 기능인데요, 시작시간이 5분이고 토큰이 만료될 때까지 0으로 감소하는 간단한 카운터였어요. 중요한 점은 모든 논리가 백엔드에서 처리되었고, 프론트엔드는 단순히 카운터의 시각적인 표현을 담당했다는 것이었어요.\n\n팀원 중 한 명이 작성한 카운터 코드의 간단한 부분이에요:\n\n\n\n```js\nclass TimeCounter {\n    minutes = null\n    seconds = null\n    dateStored = null\n    minutesStored = null\n    secondsStored = null\n\n    constructor(minutes = 0, seconds = 0) {\n        this.minutes = minutes\n        this.seconds = seconds\n    }\n\n    start() {\n        this.saveTimer()\n        this.timer = setInterval(() => {\n            this.callback()\n        }, 1000)\n    }\n\n    stop() {\n        clearInterval(this.timer)\n    }\n\n    callback() {\n        if(this.minutes === 0 && this.seconds === 0) {\n            this.stop() // Stop counter\n            return\n        }\n\n        if (this.seconds === 0) {\n            this.seconds = 59\n            this.minutes--\n        } else {\n            this.seconds--\n        }\n    }\n}\n```\n\n문제점\n\n사용자가 컴퓨터를 절전하여 카운터를 중지할 수 있습니다. 다시 작동시킬 때 타이머는 중단한 지점부터 다시 시작하여 사용자가 토큰 유효기간을 효과적으로 연장할 수 있습니다.\n\n해결책 — 로컬스토리지```\n\n\n\n이 문제에 대처하기 위해 LocalStorage를 활용한 해결책을 구현했습니다. 콜백 메서드가 호출될 때마다 현재 분, 초, 타임스탬프를 저장했습니다. 이 타임스탬프를 현재 시간과 비교하여 어떤 차이가 있는지 감지하여 토큰 만료 로직이 유지되도록 했습니다.\n\n![이미지](/assets/img/2024-05-14-TheeasiestwaytokeepcounterstateafterwebbroswerisnotaccessiblerehydrateitfromlocalStorageinJavaScript_1.png)\n\n이제 해결책을 적용한 코드입니다:\n\n```js\nclass TimeCounter {\n    minutes = null\n    seconds = null\n    dateStored = null\n    minutesStored = null\n    secondsStored = null\n\n    constructor(minutes = 0, seconds = 0) {\n        this.minutes = minutes\n        this.seconds = seconds\n    }\n\n    start() {\n        this.saveTimer()\n        this.timer = setInterval(() => {\n            this.callback()\n        }, 1000)\n    }\n\n    stop() {\n        clearInterval(this.timer)\n    }\n\n    saveTimer() {\n        const timeElapsed = Date.now();\n\n        if (timeElapsed != 0) {\n            localStorage.setItem('dateStored', timeElapsed)\n            localStorage.setItem('minutes', this.minutes)\n            localStorage.setItem('seconds', this.seconds)\n        }\n    }\n\n    getTimer() {\n        this.dateStored = Number(localStorage.getItem('dateStored'))\n        this.minutesStored = Number(localStorage.getItem('minutes')) \n        this.secondsStored = Number(localStorage.getItem('seconds'))   \n    }\n\n    checkDifference() {\n        this.getTimer()\n\n        const nowElapsed = Date.now();\n        const diff = nowElapsed - this.dateStored\n        \n        // check if time is 5 seconds late compared to stored\n        if (diff > 5000) {\n            this.setCurrentTimer(diff)\n        }\n    }\n\n    setCurrentTimer(diff) {\n        const elapsedStored = (this.minutesStored * 60000) + (this.secondsStored * 1000)\n        const currentTimeLeft = elapsedStored - diff\n        const now = new Date(currentTimeLeft)\n        const minutes = now.getMinutes()\n        const seconds = now.getSeconds()\n\n        if (minutes > tokenTimersEnum.VALIDATION_MINUTES) {\n            this.minutes = 0\n            this.seconds = 0\n        } else {\n            this.minutes = minutes\n            this.seconds = seconds\n        }\n    }\n\n\n    callback() {\n        this.checkDifference()\n\n        if(this.minutes === 0 && this.seconds === 0) {\n            this.stop()\n            return\n        }\n\n        if (this.seconds === 0) {\n            this.seconds = 59\n            this.minutes--\n        } else {\n            this.seconds--\n        }\n        \n        this.saveTimer()\n    }\n}\n```\n\n\n\n요약\n\nLocalStorage는 사용자 브라우저 내에서 데이터를 지속시키는 데 유용한 도구로 입증되었습니다. 이를 활용함으로써 토큰 만료 메커니즘의 무결성을 유지할 수 있었고, 시간을 조작하려는 사용자의 시도가 있더라도 문제없이 작동했습니다.\n\n프론트엔드 처리나 동작이 중요한 유사한 상황에서는 LocalStorage 솔루션을 고려하는 것이 유익할 수 있으며, 원활하고 안전한 사용자 경험을 보장할 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-14-TheeasiestwaytokeepcounterstateafterwebbroswerisnotaccessiblerehydrateitfromlocalStorageinJavaScript_0.png"},"coverImage":"/assets/img/2024-05-14-TheeasiestwaytokeepcounterstateafterwebbroswerisnotaccessiblerehydrateitfromlocalStorageinJavaScript_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>최근 QA 팀에서 흥미로운 질문을 받았어요. 그 질문은, 왜 우리 이메일 토큰 카운터가 그들이 컴퓨터를 절전 상태로 변경할 때 멈추는지였어요? 처음에는 웹 브라우저가 실행 중이 아니면 우리의 JavaScript 애플리케이션이 작동하지 않는다는 일반적인 가정을 공유했어요. 하지만 그들의 우려는 사용자가 시간을 조작하여 이메일로 토큰을 다시 보낼 수 있는 보안 문제로 유효한 지점을 제기했어요.</p>\n<p>아래는 문제가 된 기능인데요, 시작시간이 5분이고 토큰이 만료될 때까지 0으로 감소하는 간단한 카운터였어요. 중요한 점은 모든 논리가 백엔드에서 처리되었고, 프론트엔드는 단순히 카운터의 시각적인 표현을 담당했다는 것이었어요.</p>\n<p>팀원 중 한 명이 작성한 카운터 코드의 간단한 부분이에요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TimeCounter</span> {\n    minutes = <span class=\"hljs-literal\">null</span>\n    seconds = <span class=\"hljs-literal\">null</span>\n    dateStored = <span class=\"hljs-literal\">null</span>\n    minutesStored = <span class=\"hljs-literal\">null</span>\n    secondsStored = <span class=\"hljs-literal\">null</span>\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">minutes = <span class=\"hljs-number\">0</span>, seconds = <span class=\"hljs-number\">0</span></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">minutes</span> = minutes\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span> = seconds\n    }\n\n    <span class=\"hljs-title function_\">start</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">saveTimer</span>()\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timer</span> = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">callback</span>()\n        }, <span class=\"hljs-number\">1000</span>)\n    }\n\n    <span class=\"hljs-title function_\">stop</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-built_in\">clearInterval</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timer</span>)\n    }\n\n    <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">minutes</span> === <span class=\"hljs-number\">0</span> &#x26;&#x26; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span> === <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">stop</span>() <span class=\"hljs-comment\">// Stop counter</span>\n            <span class=\"hljs-keyword\">return</span>\n        }\n\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span> === <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span> = <span class=\"hljs-number\">59</span>\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">minutes</span>--\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span>--\n        }\n    }\n}\n</code></pre>\n<p>문제점</p>\n<p>사용자가 컴퓨터를 절전하여 카운터를 중지할 수 있습니다. 다시 작동시킬 때 타이머는 중단한 지점부터 다시 시작하여 사용자가 토큰 유효기간을 효과적으로 연장할 수 있습니다.</p>\n<p>해결책 — 로컬스토리지```</p>\n<p>이 문제에 대처하기 위해 LocalStorage를 활용한 해결책을 구현했습니다. 콜백 메서드가 호출될 때마다 현재 분, 초, 타임스탬프를 저장했습니다. 이 타임스탬프를 현재 시간과 비교하여 어떤 차이가 있는지 감지하여 토큰 만료 로직이 유지되도록 했습니다.</p>\n<p><img src=\"/assets/img/2024-05-14-TheeasiestwaytokeepcounterstateafterwebbroswerisnotaccessiblerehydrateitfromlocalStorageinJavaScript_1.png\" alt=\"이미지\"></p>\n<p>이제 해결책을 적용한 코드입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TimeCounter</span> {\n    minutes = <span class=\"hljs-literal\">null</span>\n    seconds = <span class=\"hljs-literal\">null</span>\n    dateStored = <span class=\"hljs-literal\">null</span>\n    minutesStored = <span class=\"hljs-literal\">null</span>\n    secondsStored = <span class=\"hljs-literal\">null</span>\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">minutes = <span class=\"hljs-number\">0</span>, seconds = <span class=\"hljs-number\">0</span></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">minutes</span> = minutes\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span> = seconds\n    }\n\n    <span class=\"hljs-title function_\">start</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">saveTimer</span>()\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timer</span> = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">callback</span>()\n        }, <span class=\"hljs-number\">1000</span>)\n    }\n\n    <span class=\"hljs-title function_\">stop</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-built_in\">clearInterval</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timer</span>)\n    }\n\n    <span class=\"hljs-title function_\">saveTimer</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">const</span> timeElapsed = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();\n\n        <span class=\"hljs-keyword\">if</span> (timeElapsed != <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">'dateStored'</span>, timeElapsed)\n            <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">'minutes'</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">minutes</span>)\n            <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">'seconds'</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span>)\n        }\n    }\n\n    <span class=\"hljs-title function_\">getTimer</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dateStored</span> = <span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">'dateStored'</span>))\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">minutesStored</span> = <span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">'minutes'</span>)) \n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">secondsStored</span> = <span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">'seconds'</span>))   \n    }\n\n    <span class=\"hljs-title function_\">checkDifference</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getTimer</span>()\n\n        <span class=\"hljs-keyword\">const</span> nowElapsed = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();\n        <span class=\"hljs-keyword\">const</span> diff = nowElapsed - <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dateStored</span>\n        \n        <span class=\"hljs-comment\">// check if time is 5 seconds late compared to stored</span>\n        <span class=\"hljs-keyword\">if</span> (diff > <span class=\"hljs-number\">5000</span>) {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setCurrentTimer</span>(diff)\n        }\n    }\n\n    <span class=\"hljs-title function_\">setCurrentTimer</span>(<span class=\"hljs-params\">diff</span>) {\n        <span class=\"hljs-keyword\">const</span> elapsedStored = (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">minutesStored</span> * <span class=\"hljs-number\">60000</span>) + (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">secondsStored</span> * <span class=\"hljs-number\">1000</span>)\n        <span class=\"hljs-keyword\">const</span> currentTimeLeft = elapsedStored - diff\n        <span class=\"hljs-keyword\">const</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(currentTimeLeft)\n        <span class=\"hljs-keyword\">const</span> minutes = now.<span class=\"hljs-title function_\">getMinutes</span>()\n        <span class=\"hljs-keyword\">const</span> seconds = now.<span class=\"hljs-title function_\">getSeconds</span>()\n\n        <span class=\"hljs-keyword\">if</span> (minutes > tokenTimersEnum.<span class=\"hljs-property\">VALIDATION_MINUTES</span>) {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">minutes</span> = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span> = <span class=\"hljs-number\">0</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">minutes</span> = minutes\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span> = seconds\n        }\n    }\n\n\n    <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">checkDifference</span>()\n\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">minutes</span> === <span class=\"hljs-number\">0</span> &#x26;&#x26; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span> === <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">stop</span>()\n            <span class=\"hljs-keyword\">return</span>\n        }\n\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span> === <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span> = <span class=\"hljs-number\">59</span>\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">minutes</span>--\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">seconds</span>--\n        }\n        \n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">saveTimer</span>()\n    }\n}\n</code></pre>\n<p>요약</p>\n<p>LocalStorage는 사용자 브라우저 내에서 데이터를 지속시키는 데 유용한 도구로 입증되었습니다. 이를 활용함으로써 토큰 만료 메커니즘의 무결성을 유지할 수 있었고, 시간을 조작하려는 사용자의 시도가 있더라도 문제없이 작동했습니다.</p>\n<p>프론트엔드 처리나 동작이 중요한 유사한 상황에서는 LocalStorage 솔루션을 고려하는 것이 유익할 수 있으며, 원활하고 안전한 사용자 경험을 보장할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}