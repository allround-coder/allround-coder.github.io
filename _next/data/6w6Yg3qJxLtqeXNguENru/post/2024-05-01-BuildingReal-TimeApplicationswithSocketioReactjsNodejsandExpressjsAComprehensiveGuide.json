{"pageProps":{"post":{"title":"Socket.io, React.js, Node.js 및 Express.js를 사용한 실시간 애플리케이션 만들기","description":"","date":"2024-05-01 17:48","slug":"2024-05-01-BuildingReal-TimeApplicationswithSocketioReactjsNodejsandExpressjsAComprehensiveGuide","content":"\n\n**실시간 웹 개발: Socket.io, React.js, Node.js 및 Express.js를 활용한 대화형 애플리케이션 구축에 대한 포괄적인 가이드**\n\n![BuildingReal-TimeApplicationswithSocketioReactjsNodejsandExpressjsAComprehensiveGuide_0.png](/assets/img/2024-05-01-BuildingReal-TimeApplicationswithSocketioReactjsNodejsandExpressjsAComprehensiveGuide_0.png)\n\n오늘날의 디지털 환경에서 실시간 통신은 웹 애플리케이션의 중요한 측면이 되었습니다. 채팅 애플리케이션, 협업 도구 또는 실시간 업데이트와 같이 사용자는 페이지를 새로 고치지 않고 즉시 업데이트를 기대합니다. 이것이 Socket.io, React.js, Node.js 및 Express.js가 등장하는 곳입니다.\n\nSocket.io는 웹 서버와 클라이언트 간의 양방향 및 이벤트 기반 통신을 가능하게 하는 강력한 라이브러리입니다. React.js, 사용자 인터페이스를 구축하기 위한 인기 있는 JavaScript 라이브러리, 그리고 Express.js를 통한 Node.js와 결합하면 다양한 웹 애플리케이션을 만들 수 있는 다재다능한 웹 애플리케이션 프레임워크를 통해 개발자는 원활하고 대화형 실시간 애플리케이션을 만들 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 블로그에서는 Socket.io의 기본을 탐구하고 React.js, Node.js, Express.js와 통합하는 방법을 알아볼 것입니다. 우리는 기본 개념, 단계별 구현 방법, 실시간 애플리케이션을 구축하는 데 가장 좋은 방법에 대해 이야기할 것입니다. 이 안내서를 마치면 이러한 기술을 활용하여 사용자가 실시간으로 참여하는 동적이고 반응적인 어플리케이션을 만드는 방법에 대해 확고한 이해를 갖게 될 것입니다. 그러니 Socket.io, React.js, Node.js, Express.js와 함께하는 실시간 웹 개발의 흥미로운 여정을 시작해봅시다!\n\n먼저 클라이언트 및 서버 폴더가 필요합니다. 서버 폴더에서 Node.js 프로젝트를 초기화하세요.\n\n```js\nnpm init\n```\n\n그런 다음 필요한 종속성(Express, Cors, Nodemon, Socket.io)을 설치하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install express cors nodemon socket.io\n```\n\n- Express: Express는 Node.js를 위한 인기 있는 웹 애플리케이션 프레임워크입니다. 웹 애플리케이션과 API를 구축하는 간편하고 유연한 방법을 제공합니다.\n- Cors: Cross-Origin Resource Sharing (CORS)는 웹 브라우저에 의해 구현된 보안 메커니즘으로, 다른 출처의 리소스에 대한 액세스를 제한합니다. 웹 애플리케이션을 개발할 때, 하나의 도메인에서 다른 도메인으로 요청을 보낼 때 CORS 문제가 발생할 수 있습니다. cors 라이브러리를 사용하여 Express 애플리케이션에서 CORS 관련 문제를 처리합니다.\n- Nodemon: Nodemon은 소스 코드에 변경 사항이 감지될 때마다 Node.js 애플리케이션을 자동으로 다시 시작하는 개발 유틸리티입니다.\n- Socket.io: Socket.io는 웹 브라우저와 서버 간에 실시간 양방향 통신을 가능하게 하는 JavaScript 라이브러리입니다. 주로 즉각적인 데이터 업데이트나 대화형 기능이 필요한 애플리케이션을 구축하는 데 사용됩니다.\n\n그 후, 서버 폴더에 index.js 파일을 만들고 다음 코드를 추가하세요.\n\n```js\nconst express = require('express');\nconst app = express();\nconst http = require('http');\nconst { Server } = require(\"socket.io\");\nconst cors = require('cors');\napp.use(cors());\n\nconst server = http.createServer(app);\nconst io = new Server(server, {\n    cors: {origin:\"http://localhost:3000\", methods: [\"GET\", \"POST\"]},\n});\n\nserver.listen(4000, () => { console.log(\"listening on *:4000\"); });\n```\n\n<div class=\"content-ad\"></div>\n\n이제 클라이언트 폴더로 이동하여 리액트 앱을 만들어봅시다.\n\n```js\nnpx create-react-app .\n```\n\n여기서 소켓 IO 클라이언트 종속성을 설치해야 합니다.\n\n```js\nnpm install socket.io-client\n```\n\n<div class=\"content-ad\"></div>\n\n앱.js에 다음 코드를 추가하세요.\n\n```js\nimport \"./App.css\";\nimport { useEffect } from \"react\";\nimport io from \"socket.io-client\";\nconst socket = io.connect(\"http://localhost:4000\");\n\nfunction App() {\n  function sendMessage() {\n    console.log(\"버튼 클릭됨\");\n    socket.emit(\"send_message\", { message: \"클라이언트에서 안녕하세요\" });\n  }\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      alert(data.message);\n    });\n  }, [socket]);\n\n  return (\n    <div className=\"App\">\n      <input placeholder=\"메시지\" />\n      <button onClick={sendMessage}>메시지 보내기</button>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n게다가, 서버 폴더에 있는 index.js 파일에 다음 코드를 추가하세요.\n\n```js\nio.on(\"connection\", (socket) => {\n  console.log(`유저가 연결되었습니다 ${socket.id}`);\n  \n  socket.on(\"send_message\", (data) => {\n    socket.broadcast.emit(\"receive_message\", data);\n  });\n});\n```\n\n<div class=\"content-ad\"></div>\n\n이 코드 줄들로 기본 메시지 '클라이언트에서 안녕하세요'를 보낼 수 있고, 다른 모든 사용자에게 방송할 수 있습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*owCRflCEFkCAw6365cvt0g.gif)\n\n지금까지 socket.io가 올바르게 작동하고 있습니다. 이제 할 일은 메시지 데이터를 전송하는 것뿐입니다.\n\n여기 클라이언트 앱의 최종 버전인 app.js 파일이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nconst socket = io.connect(\"http://localhost:4000\");\n\nfunction App() {\n  const [message, setMessage] = useState(\"\");\n  const [messageReceived, setMessageReceived] = useState(\"\");\n  function sendMessage() {\n    console.log(\"Button clicked\");\n    socket.emit(\"send_message\", { message: message });\n  }\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageReceived(data.message);\n    });\n  }, [socket]);\n\n  return (\n    <div className=\"App\">\n      <input\n        placeholder=\"메시지를 입력하세요\"\n        onChange={(e) => {\n          setMessage(e.target.value);\n        }}\n      />\n      <button onClick={sendMessage}>메시지 보내기</button>\n      <h1>\n        받은 메시지: {messageReceived}\n      </h1>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n서버의 index.js 파일 최종 버전은 다음과 같습니다.\n\n```js\nconst express = require(\"express\");\nconst app = express();\nconst http = require(\"http\");\nconst { Server } = require(\"socket.io\");\nconst cors = require(\"cors\");\napp.use(cors());\n\nconst server = http.createServer(app);\nconst io = new Server(server, {\n  cors: { origin: \"http://localhost:3000\", methods: [\"GET\", \"POST\"] },\n});\n\nio.on(\"connection\", (socket) => {\n  console.log(`사용자가 연결되었습니다: ${socket.id}`);\n\n  socket.on(\"send_message\", (data) => {\n    socket.broadcast.emit(\"receive_message\", data);\n  });\n});\nserver.listen(4000, () => {\n  console.log(\"4000번 포트에서 수신 대기 중\");\n});\n```\n\n최종 결과는 다음과 같습니다.\n\n<div class=\"content-ad\"></div>\n\n![Real-time applications](https://miro.medium.com/v2/resize:fit:1400/1*f0e54kuZSGu0pvAivmOJug.gif)\n\n이 포괄적인 가이드는 Socket.io, React.js, Node.js 및 Express.js를 사용하여 실시간 애플리케이션을 구축하는 방법을 탐구합니다. 이러한 기술을 활용하여 개발자는 사용자에게 즉각적인 업데이트를 제공하는 동적 대화형 애플리케이션을 만들 수 있습니다. 이 안내서는 기본 개념, 단계별 구현 및 모베스트 프랙티스를 다룹니다. 전체 소스 코드는 GitHub 저장소 https://github.com/matheshyogeswaran/React_socket_io.git 를 방문해주세요. 즐겁게 코딩하세요!","ogImage":{"url":"/assets/img/2024-05-01-BuildingReal-TimeApplicationswithSocketioReactjsNodejsandExpressjsAComprehensiveGuide_0.png"},"coverImage":"/assets/img/2024-05-01-BuildingReal-TimeApplicationswithSocketioReactjsNodejsandExpressjsAComprehensiveGuide_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><strong>실시간 웹 개발: Socket.io, React.js, Node.js 및 Express.js를 활용한 대화형 애플리케이션 구축에 대한 포괄적인 가이드</strong></p>\n<p><img src=\"/assets/img/2024-05-01-BuildingReal-TimeApplicationswithSocketioReactjsNodejsandExpressjsAComprehensiveGuide_0.png\" alt=\"BuildingReal-TimeApplicationswithSocketioReactjsNodejsandExpressjsAComprehensiveGuide_0.png\"></p>\n<p>오늘날의 디지털 환경에서 실시간 통신은 웹 애플리케이션의 중요한 측면이 되었습니다. 채팅 애플리케이션, 협업 도구 또는 실시간 업데이트와 같이 사용자는 페이지를 새로 고치지 않고 즉시 업데이트를 기대합니다. 이것이 Socket.io, React.js, Node.js 및 Express.js가 등장하는 곳입니다.</p>\n<p>Socket.io는 웹 서버와 클라이언트 간의 양방향 및 이벤트 기반 통신을 가능하게 하는 강력한 라이브러리입니다. React.js, 사용자 인터페이스를 구축하기 위한 인기 있는 JavaScript 라이브러리, 그리고 Express.js를 통한 Node.js와 결합하면 다양한 웹 애플리케이션을 만들 수 있는 다재다능한 웹 애플리케이션 프레임워크를 통해 개발자는 원활하고 대화형 실시간 애플리케이션을 만들 수 있습니다.</p>\n<p>이 블로그에서는 Socket.io의 기본을 탐구하고 React.js, Node.js, Express.js와 통합하는 방법을 알아볼 것입니다. 우리는 기본 개념, 단계별 구현 방법, 실시간 애플리케이션을 구축하는 데 가장 좋은 방법에 대해 이야기할 것입니다. 이 안내서를 마치면 이러한 기술을 활용하여 사용자가 실시간으로 참여하는 동적이고 반응적인 어플리케이션을 만드는 방법에 대해 확고한 이해를 갖게 될 것입니다. 그러니 Socket.io, React.js, Node.js, Express.js와 함께하는 실시간 웹 개발의 흥미로운 여정을 시작해봅시다!</p>\n<p>먼저 클라이언트 및 서버 폴더가 필요합니다. 서버 폴더에서 Node.js 프로젝트를 초기화하세요.</p>\n<pre><code class=\"hljs language-js\">npm init\n</code></pre>\n<p>그런 다음 필요한 종속성(Express, Cors, Nodemon, Socket.io)을 설치하세요.</p>\n<pre><code class=\"hljs language-js\">npm install express cors nodemon socket.<span class=\"hljs-property\">io</span>\n</code></pre>\n<ul>\n<li>Express: Express는 Node.js를 위한 인기 있는 웹 애플리케이션 프레임워크입니다. 웹 애플리케이션과 API를 구축하는 간편하고 유연한 방법을 제공합니다.</li>\n<li>Cors: Cross-Origin Resource Sharing (CORS)는 웹 브라우저에 의해 구현된 보안 메커니즘으로, 다른 출처의 리소스에 대한 액세스를 제한합니다. 웹 애플리케이션을 개발할 때, 하나의 도메인에서 다른 도메인으로 요청을 보낼 때 CORS 문제가 발생할 수 있습니다. cors 라이브러리를 사용하여 Express 애플리케이션에서 CORS 관련 문제를 처리합니다.</li>\n<li>Nodemon: Nodemon은 소스 코드에 변경 사항이 감지될 때마다 Node.js 애플리케이션을 자동으로 다시 시작하는 개발 유틸리티입니다.</li>\n<li>Socket.io: Socket.io는 웹 브라우저와 서버 간에 실시간 양방향 통신을 가능하게 하는 JavaScript 라이브러리입니다. 주로 즉각적인 데이터 업데이트나 대화형 기능이 필요한 애플리케이션을 구축하는 데 사용됩니다.</li>\n</ul>\n<p>그 후, 서버 폴더에 index.js 파일을 만들고 다음 코드를 추가하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n<span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">Server</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"socket.io\"</span>);\n<span class=\"hljs-keyword\">const</span> cors = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cors'</span>);\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title function_\">cors</span>());\n\n<span class=\"hljs-keyword\">const</span> server = http.<span class=\"hljs-title function_\">createServer</span>(app);\n<span class=\"hljs-keyword\">const</span> io = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Server</span>(server, {\n    <span class=\"hljs-attr\">cors</span>: {<span class=\"hljs-attr\">origin</span>:<span class=\"hljs-string\">\"http://localhost:3000\"</span>, <span class=\"hljs-attr\">methods</span>: [<span class=\"hljs-string\">\"GET\"</span>, <span class=\"hljs-string\">\"POST\"</span>]},\n});\n\nserver.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">4000</span>, <span class=\"hljs-function\">() =></span> { <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"listening on *:4000\"</span>); });\n</code></pre>\n<p>이제 클라이언트 폴더로 이동하여 리액트 앱을 만들어봅시다.</p>\n<pre><code class=\"hljs language-js\">npx create-react-app .\n</code></pre>\n<p>여기서 소켓 IO 클라이언트 종속성을 설치해야 합니다.</p>\n<pre><code class=\"hljs language-js\">npm install socket.<span class=\"hljs-property\">io</span>-client\n</code></pre>\n<p>앱.js에 다음 코드를 추가하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./App.css\"</span>;\n<span class=\"hljs-keyword\">import</span> { useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> io <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"socket.io-client\"</span>;\n<span class=\"hljs-keyword\">const</span> socket = io.<span class=\"hljs-title function_\">connect</span>(<span class=\"hljs-string\">\"http://localhost:4000\"</span>);\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendMessage</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"버튼 클릭됨\"</span>);\n    socket.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">\"send_message\"</span>, { <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"클라이언트에서 안녕하세요\"</span> });\n  }\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"receive_message\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n      <span class=\"hljs-title function_\">alert</span>(data.<span class=\"hljs-property\">message</span>);\n    });\n  }, [socket]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"메시지\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{sendMessage}</span>></span>메시지 보내기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>게다가, 서버 폴더에 있는 index.js 파일에 다음 코드를 추가하세요.</p>\n<pre><code class=\"hljs language-js\">io.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"connection\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">socket</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`유저가 연결되었습니다 <span class=\"hljs-subst\">${socket.id}</span>`</span>);\n  \n  socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"send_message\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n    socket.<span class=\"hljs-property\">broadcast</span>.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">\"receive_message\"</span>, data);\n  });\n});\n</code></pre>\n<p>이 코드 줄들로 기본 메시지 '클라이언트에서 안녕하세요'를 보낼 수 있고, 다른 모든 사용자에게 방송할 수 있습니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*owCRflCEFkCAw6365cvt0g.gif\" alt=\"이미지\"></p>\n<p>지금까지 socket.io가 올바르게 작동하고 있습니다. 이제 할 일은 메시지 데이터를 전송하는 것뿐입니다.</p>\n<p>여기 클라이언트 앱의 최종 버전인 app.js 파일이 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./App.css\"</span>;\n<span class=\"hljs-keyword\">import</span> { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> io <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"socket.io-client\"</span>;\n<span class=\"hljs-keyword\">const</span> socket = io.<span class=\"hljs-title function_\">connect</span>(<span class=\"hljs-string\">\"http://localhost:4000\"</span>);\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [message, setMessage] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">const</span> [messageReceived, setMessageReceived] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendMessage</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Button clicked\"</span>);\n    socket.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">\"send_message\"</span>, { <span class=\"hljs-attr\">message</span>: message });\n  }\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"receive_message\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n      <span class=\"hljs-title function_\">setMessageReceived</span>(data.<span class=\"hljs-property\">message</span>);\n    });\n  }, [socket]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n        <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"메시지를 입력하세요\"</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> {\n          setMessage(e.target.value);\n        }}\n      />\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{sendMessage}</span>></span>메시지 보내기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>\n        받은 메시지: {messageReceived}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>서버의 index.js 파일 최종 버전은 다음과 같습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n<span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"http\"</span>);\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">Server</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"socket.io\"</span>);\n<span class=\"hljs-keyword\">const</span> cors = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"cors\"</span>);\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title function_\">cors</span>());\n\n<span class=\"hljs-keyword\">const</span> server = http.<span class=\"hljs-title function_\">createServer</span>(app);\n<span class=\"hljs-keyword\">const</span> io = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Server</span>(server, {\n  <span class=\"hljs-attr\">cors</span>: { <span class=\"hljs-attr\">origin</span>: <span class=\"hljs-string\">\"http://localhost:3000\"</span>, <span class=\"hljs-attr\">methods</span>: [<span class=\"hljs-string\">\"GET\"</span>, <span class=\"hljs-string\">\"POST\"</span>] },\n});\n\nio.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"connection\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">socket</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`사용자가 연결되었습니다: <span class=\"hljs-subst\">${socket.id}</span>`</span>);\n\n  socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"send_message\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n    socket.<span class=\"hljs-property\">broadcast</span>.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">\"receive_message\"</span>, data);\n  });\n});\nserver.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">4000</span>, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"4000번 포트에서 수신 대기 중\"</span>);\n});\n</code></pre>\n<p>최종 결과는 다음과 같습니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*f0e54kuZSGu0pvAivmOJug.gif\" alt=\"Real-time applications\"></p>\n<p>이 포괄적인 가이드는 Socket.io, React.js, Node.js 및 Express.js를 사용하여 실시간 애플리케이션을 구축하는 방법을 탐구합니다. 이러한 기술을 활용하여 개발자는 사용자에게 즉각적인 업데이트를 제공하는 동적 대화형 애플리케이션을 만들 수 있습니다. 이 안내서는 기본 개념, 단계별 구현 및 모베스트 프랙티스를 다룹니다. 전체 소스 코드는 GitHub 저장소 <a href=\"https://github.com/matheshyogeswaran/React_socket_io.git\" rel=\"nofollow\" target=\"_blank\">https://github.com/matheshyogeswaran/React_socket_io.git</a> 를 방문해주세요. 즐겁게 코딩하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}