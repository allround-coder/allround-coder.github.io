{"pageProps":{"post":{"title":"OpenAI의 Assistant API와 React를 사용하여 나만의 도우미 챗봇 만들기","description":"","date":"2024-05-12 20:53","slug":"2024-05-12-AStep-By-StepGuidetocreatingyourownassistantchatbotusingOpenAIsAssistantAPIandReact","content":"\n## 어시스턴트 API의 힘 이해하기\n\n![이미지](/assets/img/2024-05-12-AStep-By-StepGuidetocreatingyourownassistantchatbotusingOpenAIsAssistantAPIandReact_0.png)\n\n# 요약\n\n고속으로 발전하는 기술 세계에서 OpenAI는 인공 지능 분야에서 선두주자로 등장했습니다. 그들의 최신 작품인 어시스턴트 API는 이미 다양한 산업을 혁신하고 있습니다.\n\n자신만의 개인 비서를 가지고 싶었던 적이 있나요? 더 이상 찾을 필요가 없어요! OpenAI의 어시스턴트 API는 AI의 기능을 활용하고 이를 프로젝트에 원활하게 통합할 수 있는 강력한 도구입니다. 이 API를 활용하여 개발자들은 사용자와 동적 대화를 나누며 관련 정보와 맞춤 경험을 제공할 수 있는 지능형 챗봇을 만들 수 있습니다.\n\n이 글을 더 깊이 이해하면, 새로운 Assistant API를 사용하여 완전히 기능적인 챗봇을 구현하는 방법을 알아볼 것입니다. 이 챗봇은 아이스 하키 전문가로서 특정 지침을 줄 것입니다. 🏒\n\n시작해 봅시다! 👏👏👏👏\n\n## 단계 1: 개발 환경 설정\n\n새로운 리액트 프로젝트를 만들고 필요한 라이브러리와 의존성을 설치하는 것은 어떤 리액트 개발을 시작하는 핵심 단계입니다. 몇 가지 간단한 단계를 따르면 프로젝트를 신속하게 시작할 수 있습니다.\n\n- Node.js와 npm을 설치합니다 (이미 설치되어 있지 않은 경우)\n- 터미널이나 명령 프롬프트를 엽니다\n- 다음 명령어를 실행하여 Create React App을 설치합니다\n\n```js\nnpm install -g create-react-app\n```\n\n4. 다음 명령어를 실행하여 새로운 리액트 앱을 만듭니다 (여기서 \"my-app\"은 앱의 이름입니다)\n\n```bash\nnpx create-react-app my-app --template typescript\n```\n\n5. 해당 명령어를 실행하여 새 앱 디렉토리로 이동합니다.\n\n```bash\ncd my-app\n```\n\n6. Material-UI 및 그 종속성을 설치합니다.\n\n```js\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n7. 다음 명령어를 실행하여 개발 서버를 시작하세요.\n\n```js\nnpm start\n```\n\n이것으로 설정이 완료되었습니다! 이제 새로운 React 앱이 http://localhost:3000 에서 작동해야 합니다. 코드 편집기에서 앱을 열고 필요한 대로 코드를 사용자 정의할 수 있습니다.```\n\n# 단계 2: React 앱 챗봇 컴포넌트 생성\n\n채팅 인터페이스를 위한 컴포넌트를 생성하세요. 각 메시지 컴포넌트를 렌더링하는 Chat 컴포넌트를 만들 수 있습니다.\n\n/src/components/Message.tsx\n\n```js\n// src/components/Message.tsx\nimport React from 'react';\n\ninterface MessageProps {\n  text: string;\n  isUser: boolean;\n}\n\nconst Message: React.FC<MessageProps> = ({ text, isUser }) => {\n  return (\n    <div style={ textAlign: isUser ? 'right' : 'left', margin: '8px' }>\n      <div style={ backgroundColor: isUser ? '#DCF8C6' : '#b8e3fc', padding: '8px', borderRadius: '8px' }>\n        {text}\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n```\n\n/src/components/Chat.tsx\n\n```js\n// src/components/Chat.tsx\nimport React, { useState } from 'react';\nimport { TextField, Button, Container, Grid } from '@mui/material';\nimport Message from './Message';\n\nconst Chat: React.FC = () => {\n  const [messages, setMessages] = useState<string[]>([]);\n  const [input, setInput] = useState<string>('');\n\n  const handleSendMessage = () => {\n    setMessages([...messages, input]);\n    setInput('');\n    // 챗봇 응답을 처리하는 로직을 추가하세요\n  };\n\n  return (\n    <Container>\n      <Grid container direction=\"column\" spacing={2}>\n        <Grid item>\n          {messages.map((message, index) => (\n            <Message key={index} text={message} isUser={index % 2 === 0} />\n          ))}\n        </Grid>\n        <Grid item>\n          <TextField\n            label=\"메시지를 입력하세요\"\n            variant=\"outlined\"\n            fullWidth\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          />\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\n            전송\n          </Button>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Chat;\n```\n\n# 단계 3: Chat 컴포넌트를 App.tsx에 통합하세요\n\nChat 컴포넌트를 사용하도록 src/App.tsx를 수정하세요.\n\n/src/App.tsx\n\n```javascript\n// src/App.tsx\nimport React from 'react';\nimport Chat from './components/Chat';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n         {/* 가운데 정렬 */}\n        <h1 style={ textAlign: 'center' }>React Chatbot</h1>\n      </header>\n      <main>\n        <Chat />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n다음 명령어를 사용하여 React 앱을 실행하세요:\n\n```javascript\nnpm start\n```\n\n# 단계 4: OpenAI 어시스턴트 API로 시작하기\n\n어시스턴트 API를 사용하면 사용자 쿼리를 이해하고 대화식 방식으로 응답하는 지능형 챗봇을 만들 수 있습니다. 이러한 챗봇은 다양한 애플리케이션 및 플랫폼에 통합되어 사용자에게 원활한 지원을 제공할 수 있습니다. 🤖\n\n⚠️ 진행하기 전에 API 키를 생성해야 합니다!\n\n⚠️ OpenAI는 SPA 웹 앱과 같은 클라이언트 사이드 환경에서 API 키를 노출하는 것을 권장하지 않습니다. 요청은 항상 API 키를 안전하게 보관할 수 있는 자체 백엔드 서버를 통해 라우팅해야 합니다. 그러나 간편함을 위해, 우리는 단순하게 유지하고 프론트엔드 개발에 집중할 것입니다.\n\nOpenAI에서 API 키를 얻으려면 다음 단계를 따르세요:\n\n- OpenAI 계정을 만들거나 로그인하세요. 이미 OpenAI 계정이 없는 경우 새로 만들어야 합니다. OpenAI 웹사이트로 이동하여 \"가입하기\" 버튼을 클릭하여 계정을 만들 수 있습니다.\n- API Keys 페이지로 이동하세요. 로그인한 후에는 화면 우측 상단의 계정 이름을 클릭한 다음 \"API Keys\"를 선택하여 API Keys 페이지에 액세스할 수 있습니다.\n- 새 API 키를 생성하세요. API Keys 페이지에서 \"새 비밀 키 생성\" 버튼을 클릭하세요. 이렇게 하면 API 키의 이름을 입력할 수 있는 모달 창이 열립니다.\n- API 키를 저장하세요. API 키를 만든 후에는 반드시 안전한 곳에 저장하세요. 다른 사람과 API 키를 공유하지 마세요. 그렇게 하면 그들이 OpenAI 계정에 액세스할 수 있게 됩니다.\n\nAPI 키를 획득했다면, OpenAI API에 요청을 인증하는 데 사용할 수 있습니다. 이에 대한 자세한 정보는 OpenAI API 설명서에서 찾을 수 있습니다.\n\n## OpenAI Assistant API의 주요 구성 요소:\n\n- 쓰레드: 쓰레드는 Assistant API에서 대화의 기초입니다. 사용자와 어시스턴트 간에 교환된 메시지의 시퀀스를 나타냅니다. 쓰레드는 지속적일 수 있으며, 나중에 사용할 수 있도록 저장하고 검색할 수 있습니다.\n- 메시지: 메시지는 쓰레드 내에서의 개별 통신 단위입니다. 사용자 또는 어시스턴트가 보낼 수 있습니다. 메시지에는 텍스트, 코드, 이미지 또는 다른 파일이 포함될 수 있습니다.\n- 모델: Assistant API는 GPT-3.5 및 GPT-4와 같은 OpenAI의 텍스트 생성 모델에 액세스를 제공합니다. 이러한 모델은 텍스트 생성, 언어 번역 및 정보적인 방식으로 질문에 대답하는 데 사용할 수 있습니다.\n- 도구: 도구는 추가 기능을 제공하는 Assistant API의 확장 기능입니다. 예를 들어, 코드 인터프리터, 정보 검색 및 함수 호출 도구가 있습니다.\n- 지침: 지침은 Assistant API가 모델 및 도구를 사용하는 방법을 제어하는 방법입니다. 사용할 모델, 따를 지침 및 통합할 도구를 지정하는 데 사용할 수 있습니다.\n- 실행: 실행은 어시스턴트의 실행을 의미합니다. 현재 쓰레드를 처리하고 응답을 생성하도록 어시스턴트를 트리거합니다. 실행은 대화에 대한 데이터 수집 및 어시스턴트의 성능을 측정하는 데 사용할 수도 있습니다.\n- 파일: 파일은 대화와 관련된 데이터를 저장하고 참조하는 데 사용됩니다. 사용자가 업로드하거나 어시스턴트가 생성할 수 있습니다. 파일은 텍스트, 코드 또는 이미지와 같은 다양한 형식일 수 있습니다. 이 문서에서는 파일에 대해 다루지 않습니다.\n- 역할: 역할은 쓰레드 내의 다른 유형의 메시지를 구별하는 데 사용됩니다. 현재 지원되는 역할은 사용자와 어시스턴트입니다.\n\n이러한 구성 요소가 함께 작동하여 챗봇 및 AI 어시스턴트를 구축하는 강력하고 유연한 플랫폼을 제공합니다. Assistant API는 아직 개발 중이지만, 컴퓨터와 상호 작용하는 방식을 혁신할 잠재력이 있습니다. 🦾🤖\n\n다음은 OpenAI Assistant API를 사용하는 방법입니다. Node.js를 사용하여 OpenAI의 Assistant API를 설정하려면 다음 단계를 따라야 합니다:\n\n1. OpenAI Node.js 라이브러리 설치하기:\n\n먼저 Node Package Manager (npm)을 사용하여 openai 패키지를 설치해주세요.\n\n```js\nnpm install openai\n```\n\n2. 환경 파일을 생성해보세요:\n\n루트 디렉토리에 .env 파일을 생성하여 OpenAI API 키를 안전하게 저장하세요. 다음 줄을 .env 파일에 추가해 주세요. YOUR_API_KEY를 실제 OpenAI API 키로 대체해주세요:\n\n```js\nREACT_APP_OPENAI_API_KEY = 당신의_API_KEY;\n```\n\n3. 필요한 라이브러리를 가져옵니다:\n\n/src/components/Chat.tsx 파일에서 OpenAI 라이브러리를 가져옵니다:\n\n```js\nimport OpenAI from \"openai\";\n```\n\n4. OpenAI 클라이언트를 초기화하세요:\n\nOpenAI 클래스를 사용하여 API 키를 이용해 OpenAI 클라이언트를 초기화하세요:\n\n```js\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true,\n});\n```\n\n다음 단계에서 OpenAI Assistant API를 기존 코드에 통합할 때 이러한 단계를 다시 요약하겠습니다.\n\n# 단계 5: React 앱에 OpenAI API 통합하기\n\n이제 우리는 이전 단계에서 만든 React 앱과 OpenAI Assistant API 코드를 통합하는 필요한 단계로 들어가보겠습니다. 다음 변경 사항을 수행해주세요:\n\n다음과 같은 MessageDto 클래스를 가지고 Models 폴더를 생성하세요:\n\n/src/models/MessageDto.ts\n\n```js\nexport class MessageDto {\n  isUser: boolean;\n  content: string;\n\n  constructor(isUser: boolean, content: string) {\n    this.isUser = isUser;\n    this.content = content;\n  }\n}\n```\n\nMessage.tsx 파일을 수정해주세요:\n\n/src/components/Message.tsx\n\n```js\n// src/components/Message.tsx\nimport React from \"react\";\nimport { MessageDto } from \"../models/MessageDto\";\n\ninterface MessageProps {\n  message: MessageDto;\n}\n\nconst Message: React.FC<MessageProps> = ({ message }) => {\n  return (\n    <div style={{ textAlign: message.isUser ? \"right\" : \"left\", margin: \"8px\" }}>\n      <div\n        style={{\n          color: message.isUser ? \"#ffffff\" : \"#000000\",\n          backgroundColor: message.isUser ? \"#1186fe\" : \"#eaeaea\",\n          padding: \"15px\",\n          borderRadius: \"8px\",\n        }}\n      >\n        {message.content.split(\"\\n\").map((text, index) => (\n          <>\n            {text}\n            <br />\n          </>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n```\n\n마침내 새로운 Chat.tsx 파일을 구현해주세요:\n\n/src/components/Chat.tsx\n\n```js\n// src/components/Chat.tsx\nimport React, { useEffect, useState } from \"react\";\nimport { TextField, Button, Container, Grid, CircularProgress, LinearProgress } from \"@mui/material\";\nimport Message from \"./Message\";\nimport OpenAI from \"openai\";\nimport { MessageDto } from \"../models/MessageDto\";\n\nconst Chat: React.FC = () => {\n  const [isWaiting, setIsWaiting] = useState<boolean>(false);\n  const [messages, setMessages] = useState<Array<MessageDto>>(new Array<MessageDto>());\n  const [input, setInput] = useState<string>(\"\");\n  const [assistant, setAssistant] = useState<any>(null);\n  const [thread, setThread] = useState<any>(null);\n  const [openai, setOpenai] = useState<any>(null);\n\n  useEffect(() => {\n    initChatBot();\n  }, []);\n\n  useEffect(() => {\n    setMessages([\n      {\n        content: \"Hi, I'm your personal assistant. How can I help you?\",\n        isUser: false,\n      },\n    ]);\n  }, [assistant]);\n\n  const initChatBot = async () => {\n    const openai = new OpenAI({\n      apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n      dangerouslyAllowBrowser: true,\n    });\n\n    // Create an assistant\n    const assistant = await openai.beta.assistants.create({\n      name: \"Hockey Expert\",\n      instructions: \"You are a hockey expert. You specialize in helping others learn about hockey.\",\n      tools: [{ type: \"code_interpreter\" }],\n      model: \"gpt-4-1106-preview\",\n    });\n\n    // Create a thread\n    const thread = await openai.beta.threads.create();\n\n    setOpenai(openai);\n    setAssistant(assistant);\n    setThread(thread);\n  };\n\n  const createNewMessage = (content: string, isUser: boolean) => {\n    const newMessage = new MessageDto(isUser, content);\n    return newMessage;\n  };\n\n  const handleSendMessage = async () => {\n    messages.push(createNewMessage(input, true));\n    setMessages([...messages]);\n    setInput(\"\");\n\n    // Send a message to the thread\n    await openai.beta.threads.messages.create(thread.id, {\n      role: \"user\",\n      content: input,\n    });\n\n    // Run the assistant\n    const run = await openai.beta.threads.runs.create(thread.id, {\n      assistant_id: assistant.id,\n    });\n\n    // Create a response\n    let response = await openai.beta.threads.runs.retrieve(thread.id, run.id);\n\n    // Wait for the response to be ready\n    while (response.status === \"in_progress\" || response.status === \"queued\") {\n      console.log(\"waiting...\");\n      setIsWaiting(true);\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n      response = await openai.beta.threads.runs.retrieve(thread.id, run.id);\n    }\n\n    setIsWaiting(false);\n\n    // Get the messages for the thread\n    const messageList = await openai.beta.threads.messages.list(thread.id);\n\n    // Find the last message for the current run\n    const lastMessage = messageList.data\n      .filter((message: any) => message.run_id === run.id && message.role === \"assistant\")\n      .pop();\n\n    // Print the last message coming from the assistant\n    if (lastMessage) {\n      console.log(lastMessage.content[0][\"text\"].value);\n      setMessages([...messages, createNewMessage(lastMessage.content[0][\"text\"].value, false)]);\n    }\n  };\n\n  // detect enter key and send message\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === \"Enter\") {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <Container>\n      <Grid container direction=\"column\" spacing={2} paddingBottom={5}>\n        {messages.map((message, index) => (\n          <Grid item alignSelf={message.isUser ? \"flex-end\" : \"flex-start\"} key={index}>\n            <Message key={index} message={message} />\n          </Grid>\n        ))}\n        <Grid item>\n          <TextField\n            label=\"Type your message\"\n            variant=\"outlined\"\n            disabled={isWaiting}\n            fullWidth\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyDown={handleKeyPress}\n          />\n          {isWaiting && <LinearProgress color=\"inherit\" />}\n        </Grid>\n        {!isWaiting && (\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage} disabled={isWaiting}>\n              Send\n            </Button>\n          </Grid>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Chat;\n```\n\nReact 앱을 다음 명령어로 실행해보세요:\n\n```js\nnpm start\n```\n\n# 단계 6: 당신의 어시스턴트와 상호 작용하기\n\n이제 prompt를 사용하여 새로 만든 어시스턴트와 상호 작용할 준비가 되었습니다. 응답은 짧은 지연 후 화면에 표시됩니다. 아래와 같이 표시됩니다:\n\nPrompt:\n\n```js\n누가 사람들에게 요리를 가르치는 데 가장 적합한 이가 되었습니까?\n```\n\n답변:\n\n```js\n\"가장 적합한 요리 교육자\"라는 타이틀은 팬들과 요리 역사학자들 사이에서 치열한 논의의 대상입니다. 그러나 토론에서 자주 언급되는 몇 가지 이름은 다음과 같습니다:\n\n- **웨인 그레츠키(Wayne Gretzky)**: \"위대한 사람\"이라고 불리는 그레츠키는 NHL 역대 최고의 골, 어시스트, 포인트 기록 보유자입니다. 그는 수많은 기록을 보유하고 4회의 스탠리컵 챔피언입니다.\n- **바비 오어(Bobby Orr)**: 공격 능력으로 수비수 위치를 혁신한 오어는 2회의 아트 로스 트로피를 수상한 유일한 수비수입니다.\n- **고디 하워(Gordie Howe)**: \"미스터 하키\"로 별명 붙은 하워는 스코어링 능력과 체력에 뛰어난 선수로 유명합니다. 그는 6회의 리그 MVP 및 4회의 스탠리컵 챔피언입니다.\n- **마리오 라미우(Mario Lemieux)**: 놀라운 기술과 스코어링 능력을 가진 라미우는 경력 동안 심각한 건강 문제와 싸우면서 필츠버그 펭귄스를 2회의 스탠리컵 우승으로 이끌었습니다.\n- **모리스 리차드(Maurice Richard)**: \"로켓\"으로 불리는 그는 50게임에서 50골을 넣는 최초의 선수였고 골을 넣는 능력과 강한 결의로 유명했습니다.\n\n하키 토론은 또한 서로 다른 시대, 포지션 및 게임의 변화를 고려합니다. 이 선수들 모두 그들의 시대에서 지배적이었으며 이들이 스포츠에 기여한 데 대해 널리 인정받고 있습니다.\n```\n\n🛠️ 제 개인 GitHub 계정에서 완전한 솔루션 코드를 확인하실 수 있습니다. 여기를 클릭해주세요.```\n\n# 결론\n\nOpenAI의 Assistant API 도입으로 보조 인력의 접근성이 새로운 차원으로 발전했습니다. 이제 누구나 챗봇과 AI 보조 인력의 힘과 편의성을 누릴 수 있습니다.\n\nAssistant API는 개발자들이 AI 기반 보조 인력의 잠재력을 활용할 수 있는 손쉬운 방법을 제공합니다.\n\n결론적으로, OpenAI의 Assistant API를 통한 보조 인력의 접근성은 개인 및 기업이 AI 기술의 힘을 활용할 수 있게 합니다. 우리 손끝에 챗봇이 있음으로써 생산성을 향상하고 고객 경험을 향상하며 다양한 산업에서 새로운 기회를 극대화할 수 있습니다.\n\n지금까지였어요. 만약 이 이야기를 좋아하셨다면, 팔로우하고 박수를 부탁드려요. 👏👏\n\n## 참고 자료\n\n[1] https://platform.openai.com/docs/assistants/how-it-works. OpenAI\n\n[2] https://medium.com/@ralfelfving/tutorial-get-started-with-the-new-openai-assistants-api-7049c2517bfe. Ralf Elfving\n","ogImage":{"url":"/assets/img/2024-05-12-AStep-By-StepGuidetocreatingyourownassistantchatbotusingOpenAIsAssistantAPIandReact_0.png"},"coverImage":"/assets/img/2024-05-12-AStep-By-StepGuidetocreatingyourownassistantchatbotusingOpenAIsAssistantAPIandReact_0.png","tag":["Tech"],"readingTime":14},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>어시스턴트 API의 힘 이해하기</h2>\n<p><img src=\"/assets/img/2024-05-12-AStep-By-StepGuidetocreatingyourownassistantchatbotusingOpenAIsAssistantAPIandReact_0.png\" alt=\"이미지\"></p>\n<h1>요약</h1>\n<p>고속으로 발전하는 기술 세계에서 OpenAI는 인공 지능 분야에서 선두주자로 등장했습니다. 그들의 최신 작품인 어시스턴트 API는 이미 다양한 산업을 혁신하고 있습니다.</p>\n<p>자신만의 개인 비서를 가지고 싶었던 적이 있나요? 더 이상 찾을 필요가 없어요! OpenAI의 어시스턴트 API는 AI의 기능을 활용하고 이를 프로젝트에 원활하게 통합할 수 있는 강력한 도구입니다. 이 API를 활용하여 개발자들은 사용자와 동적 대화를 나누며 관련 정보와 맞춤 경험을 제공할 수 있는 지능형 챗봇을 만들 수 있습니다.</p>\n<p>이 글을 더 깊이 이해하면, 새로운 Assistant API를 사용하여 완전히 기능적인 챗봇을 구현하는 방법을 알아볼 것입니다. 이 챗봇은 아이스 하키 전문가로서 특정 지침을 줄 것입니다. 🏒</p>\n<p>시작해 봅시다! 👏👏👏👏</p>\n<h2>단계 1: 개발 환경 설정</h2>\n<p>새로운 리액트 프로젝트를 만들고 필요한 라이브러리와 의존성을 설치하는 것은 어떤 리액트 개발을 시작하는 핵심 단계입니다. 몇 가지 간단한 단계를 따르면 프로젝트를 신속하게 시작할 수 있습니다.</p>\n<ul>\n<li>Node.js와 npm을 설치합니다 (이미 설치되어 있지 않은 경우)</li>\n<li>터미널이나 명령 프롬프트를 엽니다</li>\n<li>다음 명령어를 실행하여 Create React App을 설치합니다</li>\n</ul>\n<pre><code class=\"hljs language-js\">npm install -g create-react-app\n</code></pre>\n<ol start=\"4\">\n<li>다음 명령어를 실행하여 새로운 리액트 앱을 만듭니다 (여기서 \"my-app\"은 앱의 이름입니다)</li>\n</ol>\n<pre><code class=\"hljs language-bash\">npx create-react-app my-app --template typescript\n</code></pre>\n<ol start=\"5\">\n<li>해당 명령어를 실행하여 새 앱 디렉토리로 이동합니다.</li>\n</ol>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cd</span> my-app\n</code></pre>\n<ol start=\"6\">\n<li>Material-UI 및 그 종속성을 설치합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\">npm install @mui/material @emotion/react @emotion/styled\n</code></pre>\n<ol start=\"7\">\n<li>다음 명령어를 실행하여 개발 서버를 시작하세요.</li>\n</ol>\n<pre><code class=\"hljs language-js\">npm start\n</code></pre>\n<p>이것으로 설정이 완료되었습니다! 이제 새로운 React 앱이 <a href=\"http://localhost:3000\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000</a> 에서 작동해야 합니다. 코드 편집기에서 앱을 열고 필요한 대로 코드를 사용자 정의할 수 있습니다.```</p>\n<h1>단계 2: React 앱 챗봇 컴포넌트 생성</h1>\n<p>채팅 인터페이스를 위한 컴포넌트를 생성하세요. 각 메시지 컴포넌트를 렌더링하는 Chat 컴포넌트를 만들 수 있습니다.</p>\n<p>/src/components/Message.tsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/Message.tsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\ninterface <span class=\"hljs-title class_\">MessageProps</span> {\n  <span class=\"hljs-attr\">text</span>: string;\n  <span class=\"hljs-attr\">isUser</span>: boolean;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Message</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&#x3C;<span class=\"hljs-title class_\">MessageProps</span>> = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ text, isUser }</span>) =></span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">textAlign:</span> <span class=\"hljs-attr\">isUser</span> ? '<span class=\"hljs-attr\">right</span>' <span class=\"hljs-attr\">:</span> '<span class=\"hljs-attr\">left</span>', <span class=\"hljs-attr\">margin:</span> '<span class=\"hljs-attr\">8px</span>' }></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-attr\">isUser</span> ? '#<span class=\"hljs-attr\">DCF8C6</span>' <span class=\"hljs-attr\">:</span> '#<span class=\"hljs-attr\">b8e3fc</span>', <span class=\"hljs-attr\">padding:</span> '<span class=\"hljs-attr\">8px</span>', <span class=\"hljs-attr\">borderRadius:</span> '<span class=\"hljs-attr\">8px</span>' }></span>\n        {text}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Message</span>;\n</code></pre>\n<p>/src/components/Chat.tsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/Chat.tsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TextField</span>, <span class=\"hljs-title class_\">Button</span>, <span class=\"hljs-title class_\">Container</span>, <span class=\"hljs-title class_\">Grid</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@mui/material'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Message</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Message'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Chat</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">const</span> [messages, setMessages] = useState&#x3C;string[]>([]);\n  <span class=\"hljs-keyword\">const</span> [input, setInput] = useState&#x3C;string>(<span class=\"hljs-string\">''</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSendMessage</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">setMessages</span>([...messages, input]);\n    <span class=\"hljs-title function_\">setInput</span>(<span class=\"hljs-string\">''</span>);\n    <span class=\"hljs-comment\">// 챗봇 응답을 처리하는 로직을 추가하세요</span>\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Container</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Grid</span> <span class=\"hljs-attr\">container</span> <span class=\"hljs-attr\">direction</span>=<span class=\"hljs-string\">\"column\"</span> <span class=\"hljs-attr\">spacing</span>=<span class=\"hljs-string\">{2}</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Grid</span> <span class=\"hljs-attr\">item</span>></span>\n          {messages.map((message, index) => (\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Message</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">{message}</span> <span class=\"hljs-attr\">isUser</span>=<span class=\"hljs-string\">{index</span> % <span class=\"hljs-attr\">2</span> === <span class=\"hljs-string\">0}</span> /></span>\n          ))}\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Grid</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Grid</span> <span class=\"hljs-attr\">item</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TextField</span>\n            <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"메시지를 입력하세요\"</span>\n            <span class=\"hljs-attr\">variant</span>=<span class=\"hljs-string\">\"outlined\"</span>\n            <span class=\"hljs-attr\">fullWidth</span>\n            <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{input}</span>\n            <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setInput(e.target.value)}\n          />\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Grid</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Grid</span> <span class=\"hljs-attr\">item</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">variant</span>=<span class=\"hljs-string\">\"contained\"</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">\"primary\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleSendMessage}</span>></span>\n            전송\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Grid</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Grid</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Container</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Chat</span>;\n</code></pre>\n<h1>단계 3: Chat 컴포넌트를 App.tsx에 통합하세요</h1>\n<p>Chat 컴포넌트를 사용하도록 src/App.tsx를 수정하세요.</p>\n<p>/src/App.tsx</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// src/App.tsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Chat</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Chat'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">App</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App-header\"</span>></span>\n         {/* 가운데 정렬 */}\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">textAlign:</span> '<span class=\"hljs-attr\">center</span>' }></span>React Chatbot<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Chat</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>다음 명령어를 사용하여 React 앱을 실행하세요:</p>\n<pre><code class=\"hljs language-javascript\">npm start\n</code></pre>\n<h1>단계 4: OpenAI 어시스턴트 API로 시작하기</h1>\n<p>어시스턴트 API를 사용하면 사용자 쿼리를 이해하고 대화식 방식으로 응답하는 지능형 챗봇을 만들 수 있습니다. 이러한 챗봇은 다양한 애플리케이션 및 플랫폼에 통합되어 사용자에게 원활한 지원을 제공할 수 있습니다. 🤖</p>\n<p>⚠️ 진행하기 전에 API 키를 생성해야 합니다!</p>\n<p>⚠️ OpenAI는 SPA 웹 앱과 같은 클라이언트 사이드 환경에서 API 키를 노출하는 것을 권장하지 않습니다. 요청은 항상 API 키를 안전하게 보관할 수 있는 자체 백엔드 서버를 통해 라우팅해야 합니다. 그러나 간편함을 위해, 우리는 단순하게 유지하고 프론트엔드 개발에 집중할 것입니다.</p>\n<p>OpenAI에서 API 키를 얻으려면 다음 단계를 따르세요:</p>\n<ul>\n<li>OpenAI 계정을 만들거나 로그인하세요. 이미 OpenAI 계정이 없는 경우 새로 만들어야 합니다. OpenAI 웹사이트로 이동하여 \"가입하기\" 버튼을 클릭하여 계정을 만들 수 있습니다.</li>\n<li>API Keys 페이지로 이동하세요. 로그인한 후에는 화면 우측 상단의 계정 이름을 클릭한 다음 \"API Keys\"를 선택하여 API Keys 페이지에 액세스할 수 있습니다.</li>\n<li>새 API 키를 생성하세요. API Keys 페이지에서 \"새 비밀 키 생성\" 버튼을 클릭하세요. 이렇게 하면 API 키의 이름을 입력할 수 있는 모달 창이 열립니다.</li>\n<li>API 키를 저장하세요. API 키를 만든 후에는 반드시 안전한 곳에 저장하세요. 다른 사람과 API 키를 공유하지 마세요. 그렇게 하면 그들이 OpenAI 계정에 액세스할 수 있게 됩니다.</li>\n</ul>\n<p>API 키를 획득했다면, OpenAI API에 요청을 인증하는 데 사용할 수 있습니다. 이에 대한 자세한 정보는 OpenAI API 설명서에서 찾을 수 있습니다.</p>\n<h2>OpenAI Assistant API의 주요 구성 요소:</h2>\n<ul>\n<li>쓰레드: 쓰레드는 Assistant API에서 대화의 기초입니다. 사용자와 어시스턴트 간에 교환된 메시지의 시퀀스를 나타냅니다. 쓰레드는 지속적일 수 있으며, 나중에 사용할 수 있도록 저장하고 검색할 수 있습니다.</li>\n<li>메시지: 메시지는 쓰레드 내에서의 개별 통신 단위입니다. 사용자 또는 어시스턴트가 보낼 수 있습니다. 메시지에는 텍스트, 코드, 이미지 또는 다른 파일이 포함될 수 있습니다.</li>\n<li>모델: Assistant API는 GPT-3.5 및 GPT-4와 같은 OpenAI의 텍스트 생성 모델에 액세스를 제공합니다. 이러한 모델은 텍스트 생성, 언어 번역 및 정보적인 방식으로 질문에 대답하는 데 사용할 수 있습니다.</li>\n<li>도구: 도구는 추가 기능을 제공하는 Assistant API의 확장 기능입니다. 예를 들어, 코드 인터프리터, 정보 검색 및 함수 호출 도구가 있습니다.</li>\n<li>지침: 지침은 Assistant API가 모델 및 도구를 사용하는 방법을 제어하는 방법입니다. 사용할 모델, 따를 지침 및 통합할 도구를 지정하는 데 사용할 수 있습니다.</li>\n<li>실행: 실행은 어시스턴트의 실행을 의미합니다. 현재 쓰레드를 처리하고 응답을 생성하도록 어시스턴트를 트리거합니다. 실행은 대화에 대한 데이터 수집 및 어시스턴트의 성능을 측정하는 데 사용할 수도 있습니다.</li>\n<li>파일: 파일은 대화와 관련된 데이터를 저장하고 참조하는 데 사용됩니다. 사용자가 업로드하거나 어시스턴트가 생성할 수 있습니다. 파일은 텍스트, 코드 또는 이미지와 같은 다양한 형식일 수 있습니다. 이 문서에서는 파일에 대해 다루지 않습니다.</li>\n<li>역할: 역할은 쓰레드 내의 다른 유형의 메시지를 구별하는 데 사용됩니다. 현재 지원되는 역할은 사용자와 어시스턴트입니다.</li>\n</ul>\n<p>이러한 구성 요소가 함께 작동하여 챗봇 및 AI 어시스턴트를 구축하는 강력하고 유연한 플랫폼을 제공합니다. Assistant API는 아직 개발 중이지만, 컴퓨터와 상호 작용하는 방식을 혁신할 잠재력이 있습니다. 🦾🤖</p>\n<p>다음은 OpenAI Assistant API를 사용하는 방법입니다. Node.js를 사용하여 OpenAI의 Assistant API를 설정하려면 다음 단계를 따라야 합니다:</p>\n<ol>\n<li>OpenAI Node.js 라이브러리 설치하기:</li>\n</ol>\n<p>먼저 Node Package Manager (npm)을 사용하여 openai 패키지를 설치해주세요.</p>\n<pre><code class=\"hljs language-js\">npm install openai\n</code></pre>\n<ol start=\"2\">\n<li>환경 파일을 생성해보세요:</li>\n</ol>\n<p>루트 디렉토리에 .env 파일을 생성하여 OpenAI API 키를 안전하게 저장하세요. 다음 줄을 .env 파일에 추가해 주세요. YOUR_API_KEY를 실제 OpenAI API 키로 대체해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">REACT_APP_OPENAI_API_KEY</span> = 당신의_API_KEY;\n</code></pre>\n<ol start=\"3\">\n<li>필요한 라이브러리를 가져옵니다:</li>\n</ol>\n<p>/src/components/Chat.tsx 파일에서 OpenAI 라이브러리를 가져옵니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">OpenAI</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"openai\"</span>;\n</code></pre>\n<ol start=\"4\">\n<li>OpenAI 클라이언트를 초기화하세요:</li>\n</ol>\n<p>OpenAI 클래스를 사용하여 API 키를 이용해 OpenAI 클라이언트를 초기화하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> openai = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OpenAI</span>({\n  <span class=\"hljs-attr\">apiKey</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">OPENAI_API_KEY</span>,\n  <span class=\"hljs-attr\">dangerouslyAllowBrowser</span>: <span class=\"hljs-literal\">true</span>,\n});\n</code></pre>\n<p>다음 단계에서 OpenAI Assistant API를 기존 코드에 통합할 때 이러한 단계를 다시 요약하겠습니다.</p>\n<h1>단계 5: React 앱에 OpenAI API 통합하기</h1>\n<p>이제 우리는 이전 단계에서 만든 React 앱과 OpenAI Assistant API 코드를 통합하는 필요한 단계로 들어가보겠습니다. 다음 변경 사항을 수행해주세요:</p>\n<p>다음과 같은 MessageDto 클래스를 가지고 Models 폴더를 생성하세요:</p>\n<p>/src/models/MessageDto.ts</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MessageDto</span> {\n  <span class=\"hljs-attr\">isUser</span>: boolean;\n  <span class=\"hljs-attr\">content</span>: string;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">isUser: boolean, content: string</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isUser</span> = isUser;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">content</span> = content;\n  }\n}\n</code></pre>\n<p>Message.tsx 파일을 수정해주세요:</p>\n<p>/src/components/Message.tsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/Message.tsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MessageDto</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../models/MessageDto\"</span>;\n\ninterface <span class=\"hljs-title class_\">MessageProps</span> {\n  <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">MessageDto</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Message</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&#x3C;<span class=\"hljs-title class_\">MessageProps</span>> = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ message }</span>) =></span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">textAlign:</span> <span class=\"hljs-attr\">message.isUser</span> ? \"<span class=\"hljs-attr\">right</span>\" <span class=\"hljs-attr\">:</span> \"<span class=\"hljs-attr\">left</span>\", <span class=\"hljs-attr\">margin:</span> \"<span class=\"hljs-attr\">8px</span>\" }}></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">color:</span> <span class=\"hljs-attr\">message.isUser</span> ? \"#<span class=\"hljs-attr\">ffffff</span>\" <span class=\"hljs-attr\">:</span> \"#<span class=\"hljs-attr\">000000</span>\",\n          <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-attr\">message.isUser</span> ? \"#<span class=\"hljs-attr\">1186fe</span>\" <span class=\"hljs-attr\">:</span> \"#<span class=\"hljs-attr\">eaeaea</span>\",\n          <span class=\"hljs-attr\">padding:</span> \"<span class=\"hljs-attr\">15px</span>\",\n          <span class=\"hljs-attr\">borderRadius:</span> \"<span class=\"hljs-attr\">8px</span>\",\n        }}\n      ></span>\n        {message.content.split(\"\\n\").map((text, index) => (\n          <span class=\"hljs-tag\">&#x3C;></span>\n            {text}\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;/></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    &#x3C;/div>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Message</span>;\n</code></pre>\n<p>마침내 새로운 Chat.tsx 파일을 구현해주세요:</p>\n<p>/src/components/Chat.tsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/Chat.tsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TextField</span>, <span class=\"hljs-title class_\">Button</span>, <span class=\"hljs-title class_\">Container</span>, <span class=\"hljs-title class_\">Grid</span>, <span class=\"hljs-title class_\">CircularProgress</span>, <span class=\"hljs-title class_\">LinearProgress</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@mui/material\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Message</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Message\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">OpenAI</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"openai\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MessageDto</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../models/MessageDto\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Chat</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">const</span> [isWaiting, setIsWaiting] = useState&#x3C;boolean>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [messages, setMessages] = useState&#x3C;<span class=\"hljs-title class_\">Array</span>&#x3C;<span class=\"hljs-title class_\">MessageDto</span>>>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>&#x3C;<span class=\"hljs-title class_\">MessageDto</span>>());\n  <span class=\"hljs-keyword\">const</span> [input, setInput] = useState&#x3C;string>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">const</span> [assistant, setAssistant] = useState&#x3C;any>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [thread, setThread] = useState&#x3C;any>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [openai, setOpenai] = useState&#x3C;any>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">initChatBot</span>();\n  }, []);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">setMessages</span>([\n      {\n        <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">\"Hi, I'm your personal assistant. How can I help you?\"</span>,\n        <span class=\"hljs-attr\">isUser</span>: <span class=\"hljs-literal\">false</span>,\n      },\n    ]);\n  }, [assistant]);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">initChatBot</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> openai = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OpenAI</span>({\n      <span class=\"hljs-attr\">apiKey</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">REACT_APP_OPENAI_API_KEY</span>,\n      <span class=\"hljs-attr\">dangerouslyAllowBrowser</span>: <span class=\"hljs-literal\">true</span>,\n    });\n\n    <span class=\"hljs-comment\">// Create an assistant</span>\n    <span class=\"hljs-keyword\">const</span> assistant = <span class=\"hljs-keyword\">await</span> openai.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">assistants</span>.<span class=\"hljs-title function_\">create</span>({\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Hockey Expert\"</span>,\n      <span class=\"hljs-attr\">instructions</span>: <span class=\"hljs-string\">\"You are a hockey expert. You specialize in helping others learn about hockey.\"</span>,\n      <span class=\"hljs-attr\">tools</span>: [{ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"code_interpreter\"</span> }],\n      <span class=\"hljs-attr\">model</span>: <span class=\"hljs-string\">\"gpt-4-1106-preview\"</span>,\n    });\n\n    <span class=\"hljs-comment\">// Create a thread</span>\n    <span class=\"hljs-keyword\">const</span> thread = <span class=\"hljs-keyword\">await</span> openai.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">threads</span>.<span class=\"hljs-title function_\">create</span>();\n\n    <span class=\"hljs-title function_\">setOpenai</span>(openai);\n    <span class=\"hljs-title function_\">setAssistant</span>(assistant);\n    <span class=\"hljs-title function_\">setThread</span>(thread);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">createNewMessage</span> = (<span class=\"hljs-params\">content: string, isUser: boolean</span>) => {\n    <span class=\"hljs-keyword\">const</span> newMessage = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageDto</span>(isUser, content);\n    <span class=\"hljs-keyword\">return</span> newMessage;\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSendMessage</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n    messages.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-title function_\">createNewMessage</span>(input, <span class=\"hljs-literal\">true</span>));\n    <span class=\"hljs-title function_\">setMessages</span>([...messages]);\n    <span class=\"hljs-title function_\">setInput</span>(<span class=\"hljs-string\">\"\"</span>);\n\n    <span class=\"hljs-comment\">// Send a message to the thread</span>\n    <span class=\"hljs-keyword\">await</span> openai.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">threads</span>.<span class=\"hljs-property\">messages</span>.<span class=\"hljs-title function_\">create</span>(thread.<span class=\"hljs-property\">id</span>, {\n      <span class=\"hljs-attr\">role</span>: <span class=\"hljs-string\">\"user\"</span>,\n      <span class=\"hljs-attr\">content</span>: input,\n    });\n\n    <span class=\"hljs-comment\">// Run the assistant</span>\n    <span class=\"hljs-keyword\">const</span> run = <span class=\"hljs-keyword\">await</span> openai.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">threads</span>.<span class=\"hljs-property\">runs</span>.<span class=\"hljs-title function_\">create</span>(thread.<span class=\"hljs-property\">id</span>, {\n      <span class=\"hljs-attr\">assistant_id</span>: assistant.<span class=\"hljs-property\">id</span>,\n    });\n\n    <span class=\"hljs-comment\">// Create a response</span>\n    <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-keyword\">await</span> openai.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">threads</span>.<span class=\"hljs-property\">runs</span>.<span class=\"hljs-title function_\">retrieve</span>(thread.<span class=\"hljs-property\">id</span>, run.<span class=\"hljs-property\">id</span>);\n\n    <span class=\"hljs-comment\">// Wait for the response to be ready</span>\n    <span class=\"hljs-keyword\">while</span> (response.<span class=\"hljs-property\">status</span> === <span class=\"hljs-string\">\"in_progress\"</span> || response.<span class=\"hljs-property\">status</span> === <span class=\"hljs-string\">\"queued\"</span>) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"waiting...\"</span>);\n      <span class=\"hljs-title function_\">setIsWaiting</span>(<span class=\"hljs-literal\">true</span>);\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =></span> <span class=\"hljs-built_in\">setTimeout</span>(resolve, <span class=\"hljs-number\">5000</span>));\n      response = <span class=\"hljs-keyword\">await</span> openai.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">threads</span>.<span class=\"hljs-property\">runs</span>.<span class=\"hljs-title function_\">retrieve</span>(thread.<span class=\"hljs-property\">id</span>, run.<span class=\"hljs-property\">id</span>);\n    }\n\n    <span class=\"hljs-title function_\">setIsWaiting</span>(<span class=\"hljs-literal\">false</span>);\n\n    <span class=\"hljs-comment\">// Get the messages for the thread</span>\n    <span class=\"hljs-keyword\">const</span> messageList = <span class=\"hljs-keyword\">await</span> openai.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">threads</span>.<span class=\"hljs-property\">messages</span>.<span class=\"hljs-title function_\">list</span>(thread.<span class=\"hljs-property\">id</span>);\n\n    <span class=\"hljs-comment\">// Find the last message for the current run</span>\n    <span class=\"hljs-keyword\">const</span> lastMessage = messageList.<span class=\"hljs-property\">data</span>\n      .<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">message: any</span>) =></span> message.<span class=\"hljs-property\">run_id</span> === run.<span class=\"hljs-property\">id</span> &#x26;&#x26; message.<span class=\"hljs-property\">role</span> === <span class=\"hljs-string\">\"assistant\"</span>)\n      .<span class=\"hljs-title function_\">pop</span>();\n\n    <span class=\"hljs-comment\">// Print the last message coming from the assistant</span>\n    <span class=\"hljs-keyword\">if</span> (lastMessage) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(lastMessage.<span class=\"hljs-property\">content</span>[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">\"text\"</span>].<span class=\"hljs-property\">value</span>);\n      <span class=\"hljs-title function_\">setMessages</span>([...messages, <span class=\"hljs-title function_\">createNewMessage</span>(lastMessage.<span class=\"hljs-property\">content</span>[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">\"text\"</span>].<span class=\"hljs-property\">value</span>, <span class=\"hljs-literal\">false</span>)]);\n    }\n  };\n\n  <span class=\"hljs-comment\">// detect enter key and send message</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleKeyPress</span> = (<span class=\"hljs-params\">e: React.KeyboardEvent&#x3C;HTMLDivElement></span>) => {\n    <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">key</span> === <span class=\"hljs-string\">\"Enter\"</span>) {\n      <span class=\"hljs-title function_\">handleSendMessage</span>();\n    }\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Container</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Grid</span> <span class=\"hljs-attr\">container</span> <span class=\"hljs-attr\">direction</span>=<span class=\"hljs-string\">\"column\"</span> <span class=\"hljs-attr\">spacing</span>=<span class=\"hljs-string\">{2}</span> <span class=\"hljs-attr\">paddingBottom</span>=<span class=\"hljs-string\">{5}</span>></span>\n        {messages.map((message, index) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Grid</span> <span class=\"hljs-attr\">item</span> <span class=\"hljs-attr\">alignSelf</span>=<span class=\"hljs-string\">{message.isUser</span> ? \"<span class=\"hljs-attr\">flex-end</span>\" <span class=\"hljs-attr\">:</span> \"<span class=\"hljs-attr\">flex-start</span>\"} <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Message</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span> <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">{message}</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Grid</span>></span>\n        ))}\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Grid</span> <span class=\"hljs-attr\">item</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TextField</span>\n            <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"Type your message\"</span>\n            <span class=\"hljs-attr\">variant</span>=<span class=\"hljs-string\">\"outlined\"</span>\n            <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{isWaiting}</span>\n            <span class=\"hljs-attr\">fullWidth</span>\n            <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{input}</span>\n            <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setInput(e.target.value)}\n            onKeyDown={handleKeyPress}\n          />\n          {isWaiting &#x26;&#x26; <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">LinearProgress</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">\"inherit\"</span> /></span>}\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Grid</span>></span>\n        {!isWaiting &#x26;&#x26; (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Grid</span> <span class=\"hljs-attr\">item</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">variant</span>=<span class=\"hljs-string\">\"contained\"</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">\"primary\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleSendMessage}</span> <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{isWaiting}</span>></span>\n              Send\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Grid</span>></span>\n        )}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Grid</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Container</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Chat</span>;\n</code></pre>\n<p>React 앱을 다음 명령어로 실행해보세요:</p>\n<pre><code class=\"hljs language-js\">npm start\n</code></pre>\n<h1>단계 6: 당신의 어시스턴트와 상호 작용하기</h1>\n<p>이제 prompt를 사용하여 새로 만든 어시스턴트와 상호 작용할 준비가 되었습니다. 응답은 짧은 지연 후 화면에 표시됩니다. 아래와 같이 표시됩니다:</p>\n<p>Prompt:</p>\n<pre><code class=\"hljs language-js\">누가 사람들에게 요리를 가르치는 데 가장 적합한 이가 되었습니까?\n</code></pre>\n<p>답변:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"가장 적합한 요리 교육자\"</span>라는 타이틀은 팬들과 요리 역사학자들 사이에서 치열한 논의의 대상입니다. 그러나 토론에서 자주 언급되는 몇 가지 이름은 다음과 같습니다:\n\n- **웨인 그레츠키(<span class=\"hljs-title class_\">Wayne</span> <span class=\"hljs-title class_\">Gretzky</span>)**: <span class=\"hljs-string\">\"위대한 사람\"</span>이라고 불리는 그레츠키는 <span class=\"hljs-variable constant_\">NHL</span> 역대 최고의 골, 어시스트, 포인트 기록 보유자입니다. 그는 수많은 기록을 보유하고 <span class=\"hljs-number\">4</span>회의 스탠리컵 챔피언입니다.\n- **바비 오어(<span class=\"hljs-title class_\">Bobby</span> <span class=\"hljs-title class_\">Orr</span>)**: 공격 능력으로 수비수 위치를 혁신한 오어는 <span class=\"hljs-number\">2</span>회의 아트 로스 트로피를 수상한 유일한 수비수입니다.\n- **고디 하워(<span class=\"hljs-title class_\">Gordie</span> <span class=\"hljs-title class_\">Howe</span>)**: <span class=\"hljs-string\">\"미스터 하키\"</span>로 별명 붙은 하워는 스코어링 능력과 체력에 뛰어난 선수로 유명합니다. 그는 <span class=\"hljs-number\">6</span>회의 리그 <span class=\"hljs-variable constant_\">MVP</span> 및 <span class=\"hljs-number\">4</span>회의 스탠리컵 챔피언입니다.\n- **마리오 라미우(<span class=\"hljs-title class_\">Mario</span> <span class=\"hljs-title class_\">Lemieux</span>)**: 놀라운 기술과 스코어링 능력을 가진 라미우는 경력 동안 심각한 건강 문제와 싸우면서 필츠버그 펭귄스를 <span class=\"hljs-number\">2</span>회의 스탠리컵 우승으로 이끌었습니다.\n- **모리스 리차드(<span class=\"hljs-title class_\">Maurice</span> <span class=\"hljs-title class_\">Richard</span>)**: <span class=\"hljs-string\">\"로켓\"</span>으로 불리는 그는 <span class=\"hljs-number\">50</span>게임에서 <span class=\"hljs-number\">50</span>골을 넣는 최초의 선수였고 골을 넣는 능력과 강한 결의로 유명했습니다.\n\n하키 토론은 또한 서로 다른 시대, 포지션 및 게임의 변화를 고려합니다. 이 선수들 모두 그들의 시대에서 지배적이었으며 이들이 스포츠에 기여한 데 대해 널리 인정받고 있습니다.\n</code></pre>\n<p>🛠️ 제 개인 GitHub 계정에서 완전한 솔루션 코드를 확인하실 수 있습니다. 여기를 클릭해주세요.```</p>\n<h1>결론</h1>\n<p>OpenAI의 Assistant API 도입으로 보조 인력의 접근성이 새로운 차원으로 발전했습니다. 이제 누구나 챗봇과 AI 보조 인력의 힘과 편의성을 누릴 수 있습니다.</p>\n<p>Assistant API는 개발자들이 AI 기반 보조 인력의 잠재력을 활용할 수 있는 손쉬운 방법을 제공합니다.</p>\n<p>결론적으로, OpenAI의 Assistant API를 통한 보조 인력의 접근성은 개인 및 기업이 AI 기술의 힘을 활용할 수 있게 합니다. 우리 손끝에 챗봇이 있음으로써 생산성을 향상하고 고객 경험을 향상하며 다양한 산업에서 새로운 기회를 극대화할 수 있습니다.</p>\n<p>지금까지였어요. 만약 이 이야기를 좋아하셨다면, 팔로우하고 박수를 부탁드려요. 👏👏</p>\n<h2>참고 자료</h2>\n<p>[1] <a href=\"https://platform.openai.com/docs/assistants/how-it-works\" rel=\"nofollow\" target=\"_blank\">https://platform.openai.com/docs/assistants/how-it-works</a>. OpenAI</p>\n<p>[2] <a href=\"https://medium.com/@ralfelfving/tutorial-get-started-with-the-new-openai-assistants-api-7049c2517bfe\" rel=\"nofollow\" target=\"_blank\">https://medium.com/@ralfelfving/tutorial-get-started-with-the-new-openai-assistants-api-7049c2517bfe</a>. Ralf Elfving</p>\n</body>\n</html>\n"},"__N_SSG":true}