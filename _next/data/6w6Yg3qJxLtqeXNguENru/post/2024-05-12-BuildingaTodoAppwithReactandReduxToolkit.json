{"pageProps":{"post":{"title":"리액트와 리덕스 툴킷으로 할 일 앱 만들기","description":"","date":"2024-05-12 22:09","slug":"2024-05-12-BuildingaTodoAppwithReactandReduxToolkit","content":"\n\n<img src=\"/assets/img/2024-05-12-BuildingaTodoAppwithReactandReduxToolkit_0.png\" />\n\n# 소개:\n\n이 튜토리얼에서는 React와 Redux Toolkit을 사용하여 간단한 할 일 앱을 구축할 것입니다. Redux Toolkit은 유틸리티 함수와 추상화를 제공하여 Redux에서 상태 관리를 간소화하는 강력한 라이브러리입니다. 이 튜토리얼을 마치면 React 애플리케이션에서 상태를 관리하는 데 Redux Toolkit을 사용하는 방법에 대해 확고한 이해를 얻을 것입니다.\n\n## 전제 조건:\n\n\n\n시작하기 전에 컴퓨터에 Node.js와 npm이 설치되어 있는지 확인해 주세요. React 기초 지식이 있다면 더 좋습니다.\n\n## 단계 1: 프로젝트 설정하기\n\n시작하려면 Create React App을 사용하여 새 React 프로젝트를 만들어야 합니다. 터미널을 열고 다음 명령어를 실행해주세요:\n\n```js\nnpx create-react-app todo-app\n```\n\n\n\n## 단계 2: 의존성 설치\n\n프로젝트 디렉토리로 이동하여 다음 명령어를 실행하여 필요한 의존성을 설치하세요:\n\n```js\ncd todo-app\nnpm install @reduxjs/toolkit react-redux\n```\n\n## 단계 3: Redux 슬라이스 이해하기\n\n\n\n코딩에 들어가기 전에 Redux 슬라이스 개념을 간단히 이해해 봅시다. 슬라이스는 애플리케이션의 상태와 연결된 리듀서의 논리적인 부분입니다. 초기 상태를 포함하고 상태가 액션에 응답하여 업데이트되는 방법을 정의합니다.\n\n## 단계 4: Redux 슬라이스 생성\n\n`src` 디렉토리에서 `todoSlice.js`라는 새 파일을 생성하세요. 이 파일은 할 일 관리를 위한 Redux 슬라이스를 담고 있을 것입니다. `todoSlice.js` 안에서 `@reduxjs/toolkit`에서 `createSlice` 함수를 가져와서 할 일 슬라이스의 초기 상태와 리듀서를 정의하세요.\n\n```js\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        text: action.payload,\n        completed: false,\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const todo = state.find((todo) => todo.id === action.payload);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n    deleteTodo: (state, action) => {\n      const index = state.findIndex((todo) => todo.id === action.payload);\n      if (index !== -1) {\n        state.splice(index, 1);\n      }\n    },\n  },\n});\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\nexport default todoSlice.reducer;\n```\n\n\n\n## 단계 5: Redux 스토어 구성하기\n\n이제 우리의 애플리케이션 상태를 보유할 Redux 스토어를 생성해 봅시다. `src` 디렉토리 내에 `store.js`라는 새 파일을 생성하세요. 이 파일 안에서 `@reduxjs/toolkit`에서 `configureStore` 함수와 `todoSlice` 리듀서를 import합니다. 그 후 `configureStore`를 사용하여 Redux 스토어를 생성하세요.\n\n```js\nimport { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\n\nconst store = configureStore({\n reducer: {\n todos: todoReducer,\n },\n});\n\nexport default store;\n```\n\n## 단계 6: Todo 컴포넌트 구성하기\n\n\n\n이제 `src` 디렉토리에 `Todo.js` 파일을 만들어 봅시다. 이 파일에는 할 일 리스트의 표시 및 관리를 처리할 `Todo` 컴포넌트가 포함됩니다. `Todo.js` 내에서 React, `react-redux`에서 필요한 훅 및 컴포넌트, 그리고 `todoSlice`에서 액션을 import하세요.\n\n```js\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addTodo, toggleComplete, deleteTodo } from \"./todoSlice\";\n\nconst Todo = () => {\n  const [text, setText] = useState(\"\");\n  const todos = useSelector((state) => state.todos);\n  const dispatch = useDispatch();\n\n  const handleInputChange = (e) => {\n    setText(e.target.value);\n  };\n\n  const handleAddTodo = () => {\n    if (text) {\n      dispatch(addTodo(text));\n      setText(\"\");\n    }\n  };\n\n  const handleToggleComplete = (id) => {\n    dispatch(toggleComplete(id));\n  };\n\n  const handleDeleteTodo = (id) => {\n    dispatch(deleteTodo(id));\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={text} onChange={handleInputChange} />{\" \"}\n      <button onClick={handleAddTodo}> 할 일 추가 </button>{\" \"}\n      <ul>\n        {\" \"}\n        {todos.map((todo) => (\n          <li\n            key={todo.id}\n            style={{\n              textDecoration: todo.completed ? \"line-through\" : \"none\",\n            }}\n          >\n            {todo.text}{\" \"}\n            <button onClick={() => handleToggleComplete(todo.id)}>\n              {\" \"}\n              {todo.completed ? \"미완료 처리\" : \"완료 처리\"}{\" \"}\n            </button>{\" \"}\n            <button onClick={() => handleDeleteTodo(todo.id)}> 삭제 </button>{\" \"}\n          </li>\n        ))}{\" \"}\n      </ul>{\" \"}\n    </div>\n  );\n};\n\nexport default Todo;\n```\n\n## Step 7: App 컴포넌트 업데이트하기\n\n`Todo` 컴포넌트를 렌더링하려면 `App.js` 파일을 약간 수정해야 합니다. React, `react-redux`의 `Provider` 컴포넌트, 그리고 `store.js` 파일에서 `store`를 import하세요. 그런 다음, `Todo` 컴포넌트를 `Provider` 컴포넌트로 감싸고 store를 prop으로 전달하세요.\n\n\n\n```js\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Todo from \"./Todo\";\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n       <Todo /> \n    </Provider>\n  );\n};\n\nexport default App;\n```\n\n## 단계 8: 앱 실행하기\n\n이제 할 일 앱을 실제로 실행해보는 시간입니다! 터미널에서 다음 명령어를 실행해주세요:\n\n```js\nnpm start\n```\n\n\n\n브라우저에서 http://localhost:3000을 방문하면 할 일 앱이 정상적으로 작동하는 것을 확인할 수 있습니다. 할 일을 추가하고 완료로 표시하거나 삭제할 수 있습니다. Redux Toolkit은 상태 관리를 효율적이고 쉽게 처리하게 해줍니다.\n\n![이미지](/assets/img/2024-05-12-BuildingaTodoAppwithReactandReduxToolkit_1.png)\n\n# 결론:\n\n이 튜토리얼에서 React와 Redux Toolkit을 사용하여 할 일 앱을 만드는 방법을 배웠습니다. Redux 슬라이스의 개념을 살펴보고 Redux Toolkit의 `createSlice` 함수를 사용하여 할 일을 관리하는 상태와 리듀서를 정의했습니다. 이 튜토리얼을 따라하면 Redux Toolkit을 사용해 React 애플리케이션의 상태를 관리하는 뛰어난 기초를 마련할 수 있을 것입니다.\n\n\n\n더 많은 기능을 추가하여 할 일을 편집하거나 완료 상태에 따라 필터링하는 등 앱을 사용자 정의하고 향상시키는 것에 자유롭게 도전해보세요. 즐거운 코딩되세요!","ogImage":{"url":"/assets/img/2024-05-12-BuildingaTodoAppwithReactandReduxToolkit_0.png"},"coverImage":"/assets/img/2024-05-12-BuildingaTodoAppwithReactandReduxToolkit_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>소개:</h1>\n<p>이 튜토리얼에서는 React와 Redux Toolkit을 사용하여 간단한 할 일 앱을 구축할 것입니다. Redux Toolkit은 유틸리티 함수와 추상화를 제공하여 Redux에서 상태 관리를 간소화하는 강력한 라이브러리입니다. 이 튜토리얼을 마치면 React 애플리케이션에서 상태를 관리하는 데 Redux Toolkit을 사용하는 방법에 대해 확고한 이해를 얻을 것입니다.</p>\n<h2>전제 조건:</h2>\n<p>시작하기 전에 컴퓨터에 Node.js와 npm이 설치되어 있는지 확인해 주세요. React 기초 지식이 있다면 더 좋습니다.</p>\n<h2>단계 1: 프로젝트 설정하기</h2>\n<p>시작하려면 Create React App을 사용하여 새 React 프로젝트를 만들어야 합니다. 터미널을 열고 다음 명령어를 실행해주세요:</p>\n<pre><code class=\"hljs language-js\">npx create-react-app todo-app\n</code></pre>\n<h2>단계 2: 의존성 설치</h2>\n<p>프로젝트 디렉토리로 이동하여 다음 명령어를 실행하여 필요한 의존성을 설치하세요:</p>\n<pre><code class=\"hljs language-js\">cd todo-app\nnpm install @reduxjs/toolkit react-redux\n</code></pre>\n<h2>단계 3: Redux 슬라이스 이해하기</h2>\n<p>코딩에 들어가기 전에 Redux 슬라이스 개념을 간단히 이해해 봅시다. 슬라이스는 애플리케이션의 상태와 연결된 리듀서의 논리적인 부분입니다. 초기 상태를 포함하고 상태가 액션에 응답하여 업데이트되는 방법을 정의합니다.</p>\n<h2>단계 4: Redux 슬라이스 생성</h2>\n<p><code>src</code> 디렉토리에서 <code>todoSlice.js</code>라는 새 파일을 생성하세요. 이 파일은 할 일 관리를 위한 Redux 슬라이스를 담고 있을 것입니다. <code>todoSlice.js</code> 안에서 <code>@reduxjs/toolkit</code>에서 <code>createSlice</code> 함수를 가져와서 할 일 슬라이스의 초기 상태와 리듀서를 정의하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { createSlice } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@reduxjs/toolkit\"</span>;\n\n<span class=\"hljs-keyword\">const</span> todoSlice = <span class=\"hljs-title function_\">createSlice</span>({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"todos\"</span>,\n  <span class=\"hljs-attr\">initialState</span>: [],\n  <span class=\"hljs-attr\">reducers</span>: {\n    <span class=\"hljs-attr\">addTodo</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =></span> {\n      <span class=\"hljs-keyword\">const</span> newTodo = {\n        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>(),\n        <span class=\"hljs-attr\">text</span>: action.<span class=\"hljs-property\">payload</span>,\n        <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>,\n      };\n      state.<span class=\"hljs-title function_\">push</span>(newTodo);\n    },\n    <span class=\"hljs-attr\">toggleComplete</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =></span> {\n      <span class=\"hljs-keyword\">const</span> todo = state.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">todo</span>) =></span> todo.<span class=\"hljs-property\">id</span> === action.<span class=\"hljs-property\">payload</span>);\n      <span class=\"hljs-keyword\">if</span> (todo) {\n        todo.<span class=\"hljs-property\">completed</span> = !todo.<span class=\"hljs-property\">completed</span>;\n      }\n    },\n    <span class=\"hljs-attr\">deleteTodo</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =></span> {\n      <span class=\"hljs-keyword\">const</span> index = state.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">todo</span>) =></span> todo.<span class=\"hljs-property\">id</span> === action.<span class=\"hljs-property\">payload</span>);\n      <span class=\"hljs-keyword\">if</span> (index !== -<span class=\"hljs-number\">1</span>) {\n        state.<span class=\"hljs-title function_\">splice</span>(index, <span class=\"hljs-number\">1</span>);\n      }\n    },\n  },\n});\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> { addTodo, toggleComplete, deleteTodo } = todoSlice.<span class=\"hljs-property\">actions</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> todoSlice.<span class=\"hljs-property\">reducer</span>;\n</code></pre>\n<h2>단계 5: Redux 스토어 구성하기</h2>\n<p>이제 우리의 애플리케이션 상태를 보유할 Redux 스토어를 생성해 봅시다. <code>src</code> 디렉토리 내에 <code>store.js</code>라는 새 파일을 생성하세요. 이 파일 안에서 <code>@reduxjs/toolkit</code>에서 <code>configureStore</code> 함수와 <code>todoSlice</code> 리듀서를 import합니다. 그 후 <code>configureStore</code>를 사용하여 Redux 스토어를 생성하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { configureStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@reduxjs/toolkit'</span>;\n<span class=\"hljs-keyword\">import</span> todoReducer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./todoSlice'</span>;\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">configureStore</span>({\n <span class=\"hljs-attr\">reducer</span>: {\n <span class=\"hljs-attr\">todos</span>: todoReducer,\n },\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store;\n</code></pre>\n<h2>단계 6: Todo 컴포넌트 구성하기</h2>\n<p>이제 <code>src</code> 디렉토리에 <code>Todo.js</code> 파일을 만들어 봅시다. 이 파일에는 할 일 리스트의 표시 및 관리를 처리할 <code>Todo</code> 컴포넌트가 포함됩니다. <code>Todo.js</code> 내에서 React, <code>react-redux</code>에서 필요한 훅 및 컴포넌트, 그리고 <code>todoSlice</code>에서 액션을 import하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { useSelector, useDispatch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-redux\"</span>;\n<span class=\"hljs-keyword\">import</span> { addTodo, toggleComplete, deleteTodo } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./todoSlice\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Todo</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [text, setText] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">const</span> todos = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =></span> state.<span class=\"hljs-property\">todos</span>);\n  <span class=\"hljs-keyword\">const</span> dispatch = <span class=\"hljs-title function_\">useDispatch</span>();\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleInputChange</span> = (<span class=\"hljs-params\">e</span>) => {\n    <span class=\"hljs-title function_\">setText</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleAddTodo</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">if</span> (text) {\n      <span class=\"hljs-title function_\">dispatch</span>(<span class=\"hljs-title function_\">addTodo</span>(text));\n      <span class=\"hljs-title function_\">setText</span>(<span class=\"hljs-string\">\"\"</span>);\n    }\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleToggleComplete</span> = (<span class=\"hljs-params\">id</span>) => {\n    <span class=\"hljs-title function_\">dispatch</span>(<span class=\"hljs-title function_\">toggleComplete</span>(id));\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleDeleteTodo</span> = (<span class=\"hljs-params\">id</span>) => {\n    <span class=\"hljs-title function_\">dispatch</span>(<span class=\"hljs-title function_\">deleteTodo</span>(id));\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{text}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleInputChange}</span> /></span>{\" \"}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleAddTodo}</span>></span> 할 일 추가 <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>{\" \"}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        {\" \"}\n        {todos.map((todo) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>\n            <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{todo.id}</span>\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n              <span class=\"hljs-attr\">textDecoration:</span> <span class=\"hljs-attr\">todo.completed</span> ? \"<span class=\"hljs-attr\">line-through</span>\" <span class=\"hljs-attr\">:</span> \"<span class=\"hljs-attr\">none</span>\",\n            }}\n          ></span>\n            {todo.text}{\" \"}\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> handleToggleComplete(todo.id)}>\n              {\" \"}\n              {todo.completed ? \"미완료 처리\" : \"완료 처리\"}{\" \"}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>{\" \"}\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> handleDeleteTodo(todo.id)}> 삭제 <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>{\" \"}\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        ))}{\" \"}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>{\" \"}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Todo</span>;\n</code></pre>\n<h2>Step 7: App 컴포넌트 업데이트하기</h2>\n<p><code>Todo</code> 컴포넌트를 렌더링하려면 <code>App.js</code> 파일을 약간 수정해야 합니다. React, <code>react-redux</code>의 <code>Provider</code> 컴포넌트, 그리고 <code>store.js</code> 파일에서 <code>store</code>를 import하세요. 그런 다음, <code>Todo</code> 컴포넌트를 <code>Provider</code> 컴포넌트로 감싸고 store를 prop으로 전달하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Provider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-redux\"</span>;\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./store\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Todo</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Todo\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">store</span>=<span class=\"hljs-string\">{store}</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Todo</span> /></span> \n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Provider</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<h2>단계 8: 앱 실행하기</h2>\n<p>이제 할 일 앱을 실제로 실행해보는 시간입니다! 터미널에서 다음 명령어를 실행해주세요:</p>\n<pre><code class=\"hljs language-js\">npm start\n</code></pre>\n<p>브라우저에서 <a href=\"http://localhost:3000%EC%9D%84\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000을</a> 방문하면 할 일 앱이 정상적으로 작동하는 것을 확인할 수 있습니다. 할 일을 추가하고 완료로 표시하거나 삭제할 수 있습니다. Redux Toolkit은 상태 관리를 효율적이고 쉽게 처리하게 해줍니다.</p>\n<p><img src=\"/assets/img/2024-05-12-BuildingaTodoAppwithReactandReduxToolkit_1.png\" alt=\"이미지\"></p>\n<h1>결론:</h1>\n<p>이 튜토리얼에서 React와 Redux Toolkit을 사용하여 할 일 앱을 만드는 방법을 배웠습니다. Redux 슬라이스의 개념을 살펴보고 Redux Toolkit의 <code>createSlice</code> 함수를 사용하여 할 일을 관리하는 상태와 리듀서를 정의했습니다. 이 튜토리얼을 따라하면 Redux Toolkit을 사용해 React 애플리케이션의 상태를 관리하는 뛰어난 기초를 마련할 수 있을 것입니다.</p>\n<p>더 많은 기능을 추가하여 할 일을 편집하거나 완료 상태에 따라 필터링하는 등 앱을 사용자 정의하고 향상시키는 것에 자유롭게 도전해보세요. 즐거운 코딩되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}