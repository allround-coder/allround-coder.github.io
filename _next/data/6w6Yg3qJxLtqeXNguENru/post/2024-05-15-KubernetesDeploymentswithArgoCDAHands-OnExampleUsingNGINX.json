{"pageProps":{"post":{"title":"쿠버네티스 배포와 ArgoCD NGINX를 사용한 실전 예제","description":"","date":"2024-05-15 15:51","slug":"2024-05-15-KubernetesDeploymentswithArgoCDAHands-OnExampleUsingNGINX","content":"\n\n<img src=\"/assets/img/2024-05-15-KubernetesDeploymentswithArgoCDAHands-OnExampleUsingNGINX_0.png\" />\n\n쿠버네티스 배포는 복잡할 수 있지만, ArgoCD와 같은 도구를 사용하면 프로세스가 훨씬 순조롭게 진행됩니다. 이 안내서에서는 ArgoCD를 사용하여 쿠버네티스에 NGINX 웹 서버를 배포하는 방법을 실용적인 코딩 예제와 함께 안내해 드리겠습니다.\n\n- ArgoCD 설정하기:\n제공된 YAML 매니페스트를 사용하여 쿠버네티스 클러스터에 ArgoCD를 설치합니다. 이는 ArgoCD가 애플리케이션을 원활하게 관리할 수 있도록 설정해 줍니다.\n\n```js\n# ArgoCD 설치 YAML\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: nginx-app\n  namespace: argocd\nspec:\n  destination:\n    namespace: default\n    server: 'https://kubernetes.default.svc'\n  project: default\n  source:\n    path: nginx\n    repoURL: 'https://github.com/yourusername/your-repo.git'\n    targetRevision: HEAD\n  syncPolicy:\n    automated: {}\n```\n\n\n\n2. 애플리케이션 구성 정의하기:\nNGINX 배포 구성을 정의하는 nginx.yaml 파일을 생성하세요.\n\n```yaml\n# NGINX 배포 구성 (nginx.yaml)\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n```\n\n3. GitOps 워크플로우 따르기:\nnginx.yaml 파일을 Git 저장소에 커밋하여 ArgoCD의 동기화 프로세스를 실행하세요.\n\n```bash\n# Git에 변경 사항 커밋하고 푸시하기\ngit add nginx.yaml\ngit commit -m \"NGINX 배포 구성 추가\"\ngit push origin main\n```\n\n\n\n4. 모두를 동기화 유지하기:\nArgoCD는 Git 저장소의 변경 사항을 자동으로 감지하고 원하는 상태를 Kubernetes 클러스터와 동기화합니다.\n\n```js\n# 응용 프로그램 동기화 상태 확인\n argocd app get nginx-app\n```\n\n5. 배포 문제 처리:\n문제가 발생하면 ArgoCD를 사용하여 서비스 연속성을 유지하기 위해 원할한 롤백 또는 롤포워드 작업을 수행할 수 있습니다.\n\n```js\n# 이전 상태로 롤백\n argocd app rollback nginx-app\n```\n\n\n\n```md\n# 새로운 버전으로 롤포워드\n argocd app rollforward nginx-app\n```\n\n6. 워크플로우 사용자화하기:\nArgoCD를 사용하여 CI/CD 파이프라인, 모니터링 시스템 또는 알림 서비스와 통합하여 필요에 맞게 맞춤 설정하세요.\n\nArgoCD는 Kubernetes 배포를 간소화하는 데 사용되며, 기본 통합, 간단한 구성, GitOps 워크플로우, 자동 동기화, 롤백/롤포워드 기능 및 확장성을 제공합니다. ArgoCD를 채택함으로써 팀은 배포 프로세스를 최적화하고 생산성을 높이며, Kubernetes 클러스터에서 실행되는 응용 프로그램의 신뢰성과 확장 가능성을 보장할 수 있습니다. ArgoCD로 뛰어나게 Kubernetes 여정을 시작해보세요!\n\n관련 기사: Kubernetes 환경에서 ArgoCD가 필수적인 이유\n\n\n\n\n행복한 코딩하세요 🙂","ogImage":{"url":"/assets/img/2024-05-15-KubernetesDeploymentswithArgoCDAHands-OnExampleUsingNGINX_0.png"},"coverImage":"/assets/img/2024-05-15-KubernetesDeploymentswithArgoCDAHands-OnExampleUsingNGINX_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>쿠버네티스 배포는 복잡할 수 있지만, ArgoCD와 같은 도구를 사용하면 프로세스가 훨씬 순조롭게 진행됩니다. 이 안내서에서는 ArgoCD를 사용하여 쿠버네티스에 NGINX 웹 서버를 배포하는 방법을 실용적인 코딩 예제와 함께 안내해 드리겠습니다.</p>\n<ul>\n<li>ArgoCD 설정하기:\n제공된 YAML 매니페스트를 사용하여 쿠버네티스 클러스터에 ArgoCD를 설치합니다. 이는 ArgoCD가 애플리케이션을 원활하게 관리할 수 있도록 설정해 줍니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">ArgoCD</span> 설치 <span class=\"hljs-variable constant_\">YAML</span>\n<span class=\"hljs-attr\">apiVersion</span>: argoproj.<span class=\"hljs-property\">io</span>/v1alpha1\n<span class=\"hljs-attr\">kind</span>: <span class=\"hljs-title class_\">Application</span>\n<span class=\"hljs-attr\">metadata</span>:\n  <span class=\"hljs-attr\">name</span>: nginx-app\n  <span class=\"hljs-attr\">namespace</span>: argocd\n<span class=\"hljs-attr\">spec</span>:\n  <span class=\"hljs-attr\">destination</span>:\n    <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-keyword\">default</span>\n    <span class=\"hljs-attr\">server</span>: <span class=\"hljs-string\">'https://kubernetes.default.svc'</span>\n  <span class=\"hljs-attr\">project</span>: <span class=\"hljs-keyword\">default</span>\n  <span class=\"hljs-attr\">source</span>:\n    <span class=\"hljs-attr\">path</span>: nginx\n    <span class=\"hljs-attr\">repoURL</span>: <span class=\"hljs-string\">'https://github.com/yourusername/your-repo.git'</span>\n    <span class=\"hljs-attr\">targetRevision</span>: <span class=\"hljs-variable constant_\">HEAD</span>\n  <span class=\"hljs-attr\">syncPolicy</span>:\n    <span class=\"hljs-attr\">automated</span>: {}\n</code></pre>\n<ol start=\"2\">\n<li>애플리케이션 구성 정의하기:\nNGINX 배포 구성을 정의하는 nginx.yaml 파일을 생성하세요.</li>\n</ol>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-comment\"># NGINX 배포 구성 (nginx.yaml)</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx-deployment</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">3</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx:latest</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">80</span>\n</code></pre>\n<ol start=\"3\">\n<li>GitOps 워크플로우 따르기:\nnginx.yaml 파일을 Git 저장소에 커밋하여 ArgoCD의 동기화 프로세스를 실행하세요.</li>\n</ol>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># Git에 변경 사항 커밋하고 푸시하기</span>\ngit add nginx.yaml\ngit commit -m <span class=\"hljs-string\">\"NGINX 배포 구성 추가\"</span>\ngit push origin main\n</code></pre>\n<ol start=\"4\">\n<li>모두를 동기화 유지하기:\nArgoCD는 Git 저장소의 변경 사항을 자동으로 감지하고 원하는 상태를 Kubernetes 클러스터와 동기화합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"># 응용 프로그램 동기화 상태 확인\n argocd app get nginx-app\n</code></pre>\n<ol start=\"5\">\n<li>배포 문제 처리:\n문제가 발생하면 ArgoCD를 사용하여 서비스 연속성을 유지하기 위해 원할한 롤백 또는 롤포워드 작업을 수행할 수 있습니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"># 이전 상태로 롤백\n argocd app rollback nginx-app\n</code></pre>\n<pre><code class=\"hljs language-md\"><span class=\"hljs-section\"># 새로운 버전으로 롤포워드</span>\n argocd app rollforward nginx-app\n</code></pre>\n<ol start=\"6\">\n<li>워크플로우 사용자화하기:\nArgoCD를 사용하여 CI/CD 파이프라인, 모니터링 시스템 또는 알림 서비스와 통합하여 필요에 맞게 맞춤 설정하세요.</li>\n</ol>\n<p>ArgoCD는 Kubernetes 배포를 간소화하는 데 사용되며, 기본 통합, 간단한 구성, GitOps 워크플로우, 자동 동기화, 롤백/롤포워드 기능 및 확장성을 제공합니다. ArgoCD를 채택함으로써 팀은 배포 프로세스를 최적화하고 생산성을 높이며, Kubernetes 클러스터에서 실행되는 응용 프로그램의 신뢰성과 확장 가능성을 보장할 수 있습니다. ArgoCD로 뛰어나게 Kubernetes 여정을 시작해보세요!</p>\n<p>관련 기사: Kubernetes 환경에서 ArgoCD가 필수적인 이유</p>\n<p>행복한 코딩하세요 🙂</p>\n</body>\n</html>\n"},"__N_SSG":true}