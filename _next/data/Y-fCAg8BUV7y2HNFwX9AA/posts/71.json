{"pageProps":{"posts":[{"title":"Flutter로 안드로이드를 위한 CI CD 구축 방법","description":"","date":"2024-05-17 21:35","slug":"2024-05-17-HowBigPayIncreasedFlutterDeveloperVelocityPart1CICDforFlutterAndroid","content":"\n\n<img src=\"/assets/img/2024-05-17-HowBigPayIncreasedFlutterDeveloperVelocityPart1CICDforFlutterAndroid_0.png\" />\n\n## 소개\n\n모바일 애플리케이션의 빠르게 변화하는 세계에서는 적응성과 효율성이 매우 중요합니다. BigPay에서는 사용자들에게 재무 거래를 원활하고 효율적으로 제공하기 위해 노력하고 있습니다. BigPay라는 모바일 앱은 전 세계 어디에서나 지출, 송금, 수신 및 자금 추적을 위한 간단한 인터페이스를 제공합니다. 최근에 우리는 네이티브 모바일 앱에서 완전한 플러터 기반 애플리케이션으로 이전하여 개발 프로세스를 통합하고 Flutter의 크로스 플랫폼 능력을 활용하였습니다.\n\n이 블로그 시리즈는 모바일 개발자, 기술 애호가 및 개발 워크플로우를 향상시키고자 하는 업계 전문가를 대상으로 합니다. 저희 목적은 BigPay 모바일 앱의 개발 워크플로우를 어떻게 향상시켰는지 공유하여 복잡한 문제 해결에 대한 저희의 구조화된 접근 방식을 보여주는 것입니다. Part 1에서는 GitHub Actions를 사용하여 Flutter 안드로이드 앱의 연속적 통합 및 배포 (CI/CD) 워크플로우를 어떻게 구현했는지 안내함으로써 스테이징 및 프로덕션을 위한 다양한 빌드 플레이버를 지원합니다. 또한 Firebase와 Diawi를 사용하여 빌드를 테스터에게 자동 배포하는 과정을 자동화하는 방법도 배우게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n또한, 파트 2를 기대해 주세요. 거기에서는 iOS 앱을 위한 유사한 CI/CD 워크플로우 설정을 다뤄볼 것입니다. iOS 배포 프로세스를 최적화하는 통찰을 공유할 예정이에요. 이 두 부분을 함께 보면 Android와 iOS 플랫폼 모두에 걸쳐 개발 워크플로우를 최적화하는 포괄적인 안내서를 제공할 거에요.\n\n우리의 여정을 상세히 설명함으로써, CI/CD에 대한 실용적인 통찰력뿐만 아니라 개발에 대한 저희 팀의 접근 방식을 특징 짓는 신중한 계획과 실행에 대해 반영하고 있습니다. 이러한 모범 사례에 대한 우리의 경험은 다른 사람들이 자신의 프로세스를 개선하려는 데 유용한 자원으로 기능할 수 있어요. 저희의 경험을 읽으면서, 여러분이 자신의 프로젝트에 적용할 수 있는 영감과 유용한 전략을 발견할 수 있기를 바랍니다. 혁신과 기술에 열정이 있는 분들은 BigPay에서 함께 배우고 탐험할 것이 많아요.\n\n## 문제\n\n많은 개발 팀과 마찬가지로, 우리는 시간이 많이 걸리는 수동 빌드, 일관성 없는 빌드 환경, 그리고 배포 지연과 같은 문제로 고생했었어요. 이러한 도전에 부딪히며 새로운 기능과 업데이트를 빠르게 전달하는 것이 어려워졌습니다. 우리는 워크플로우를 최적화하고 생산성을 높이는 더 나은 방법이 있어야 한다고 느꼈죠.\n\n<div class=\"content-ad\"></div>\n\n## 해결 방법\n\n이러한 도전에 대처하기 위해, 우리는 Flutter 앱에 대한 CI/CD 파이프라인을 설정하기 위해 GitHub Actions를 채택했습니다. GitHub Actions는 빌드, 테스트 및 배포 프로세스를 자동화하는 효율적이고 유연한 솔루션을 제공하여 우리가 고품질 코드를 유지하고 업데이트를 보다 신속하게 전달할 수 있도록 도와주었습니다.\n\n시장에는 Codemagic, Bitrise, Appcircle 등과 같은 여러 CI/CD 솔루션이 있지만, GitHub Actions를 선택한 이유는 GitHub 자체와의 원활한 통합 덕분입니다. 이미 GitHub를 코드 저장소로 사용하고 있기 때문에 GitHub Actions를 활용하면 추가 도구나 통합 없이도 워크플로우를 간소화할 수 있었습니다. 이 통합은 개발 프로세스를 간소화할뿐만 아니라 CI/CD 파이프라인이 기존 코드베이스와 밀접하게 통합되어 협업과 개발 팀 간의 가시성을 향상시킵니다.\n\nGitHub Actions를 활용하여 개발 및 배포 프로세스를 GitHub 생태계 내에서 중앙 집중화하여 다양한 도구와 플랫폼을 관리할 필요가 없어졌습니다. 이 통합 접근 방식은 시간과 노력을 절약하는 데 도움이 되며 개발 관행에서 일관성과 신뢰성을 증진시킵니다.\n\n<div class=\"content-ad\"></div>\n\nGitHub Actions는 GitHub과의 통합 기능 외에도 다양한 내장 기능과 사용자 정의 가능한 워크플로우를 제공하여 우리가 특정 요구 사항에 맞게 CI/CD 파이프라인을 맞춤화할 수 있습니다. 코드 테스트 자동화, 배포 관리 또는 제3자 서비스와 통합하는 등의 작업을 GitHub Actions를 통해 할 수 있어 개발 워크플로우를 최적화하기 위해 필요한 유연성과 확장성을 제공합니다.\n\n## 전제 조건\n\n시작하기 전에 다음 사항을 준비해야 합니다:\n1. GitHub에 호스팅된 Flutter 앱.\n2. GitHub Actions의 기본적인 이해.\n3. GitHub 계정.\n4. Firebase 앱 유포.\n5. Diawi 계정\n\n## 단계 1: Flutter 프로젝트 설정하기\n\n<div class=\"content-ad\"></div>\n\n먼저, Flutter 프로젝트가 제대로 설정되어 있고 GitHub 저장소에 커밋되어 있는지 확인하세요. Flutter 프로젝트를 아직 생성하지 않은 경우 다음을 실행하여 생성할 수 있습니다:\n\n```js\nflutter create bigpay_app \n```\n\n프로젝트 디렉토리로 이동하고 아직 Git 저장소를 초기화하지 않은 경우 다음을 실행하세요:\n\n```js\ncd bigpay_app\ngit init\ngit remote add origin <your-repository-url>\ngit add .\ngit commit -m “Initial commit”\ngit push -u origin master\n```\n\n<div class=\"content-ad\"></div>\n\n## 단계 2: Flutter 플레이버 구성\n\n우리의 CI/CD 파이프라인을 위해 스테이징 및 프로덕션 환경에 대해 다른 빌드 구성을 다루어야 합니다. 이를 위해 플레이버를 사용하세요. 만약 필요하다면 Flutter 프로젝트가 스테이징과 프로덕션을 위한 적절한 플레이버로 구성되어 있는지 확인해 주세요.\n\n## 단계 3: GitHub Actions Workflow 파일 생성\n\n## Android\n\n<div class=\"content-ad\"></div>\n\nGitHub Actions workflows는 YAML 파일에서 정의됩니다. 프로젝트의 루트에 .github/workflows라는 디렉토리를 생성하십시오. 이미 존재하지 않는 경우에만 만들어주세요. 이 디렉토리 안에 build-android.yml이라는 파일을 생성하십시오 (이름은 원하는 대로 지으실 수 있습니다).\n\n그러면 이제 귀하의 저장소가 다음과 같이 보일 것입니다\n\n![이미지를 참조하십시오](/assets/img/2024-05-17-HowBigPayIncreasedFlutterDeveloperVelocityPart1CICDforFlutterAndroid_1.png)\n\n새로 생성된 build-android.yml 파일을 열고 언제 이 작업이 시작될지 정의하십시오.\n\n<div class=\"content-ad\"></div>\n\n아래는 작업(workflow)를 마스터 브랜치로 푸시할 때마다 트리거하는 기본적인 구성입니다.\n\n이제 사용할 OS를 정의하고 flutter를 위한 환경을 설정해야 합니다.\n\n```js\non:\n  push:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: 저장소 체크아웃\n      uses: actions/checkout@v4\n\n    - name: JDK 17 설정\n      uses: actions/setup-java@v4\n      with:\n        distribution: 'temurin'\n        java-version: '17'\n\n    - name: Flutter 설정\n      uses: subosito/flutter-action@v2\n      with:\n        flutter-version: '3.19.1'\n```\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! 안드로이드에서는 우분투를 OS로 사용하고 있습니다.\n설치할 미리 정의된 작업은 checkout@v4, setup-java@v4, flutter-action@v2 등이 있습니다. 이를 사용하여 Java 및 Flutter 버전 3.19.1을 설정해야 합니다.\n\n이제 응용 프로그램을 빌드할 Flutter 명령을 실행할 수 있습니다.\n\n```js\non:\n  push:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n\n    - name: Set up JDK 17\n      uses: actions/setup-java@v4\n      with:\n        distribution: 'temurin'\n        java-version: '17'\n\n    - name: Set up Flutter\n      uses: subosito/flutter-action@v2\n      with:\n        flutter-version: '3.19.1'\n\n    - name: Install dependencies\n      run: flutter pub get\n\n    - name: Run tests\n      run: flutter test\n\n    - name: Build staging APK\n      run: flutter build apk --debug --flavor staging\n```\n\n이 구성은 마스터 브랜치로의 모든 푸시 요청에서 워크플로우를 트리거합니다. 리포지토리를 체크아웃하고, Flutter를 설정하고, 종속성을 설치하고, 테스트를 실행하고, 디버그 모드에서 스테이징 APK를 빌드합니다.\n\n<div class=\"content-ad\"></div>\n\n릴리스 모드 빌드\n플레이 스토어에 게시하려면 앱을 디지턈 인증서로 서명해야 합니다.\n\n앱을 서명하려면 다음 지침을 사용하십시오. 이미 한 경우에는 이 부분을 건너뛰고 GitHub Secrets 설정으로 넘어가실 수 있습니다.\n\n업로드 키스토어 생성\nmacOS 또는 Linux에서 다음 명령을 사용하십시오:\n\n```js\nkeytool -genkey -v -keystore ~/keystore.jks -keyalg RSA \\\n-keysize 2048 -validity 10000 -alias upload\n```\n\n<div class=\"content-ad\"></div>\n\nWindows에서 PowerShell에서 다음 몤을 사용하세요:\n\n```js\nkeytool -genkey -v -keystore %userprofile%\\keystore.jks ^\n -storetype JKS -keyalg RSA -keysize 2048 -validity 10000 ^\n -alias upload\n```\n\n이 명령은 keystore.jks 파일을 홈 디렉토리에 저장합니다. 다른 곳에 저장하려면 -keystore 매개변수에 전달하는 인수를 변경하십시오. 그러나 keystore 파일을 비공개로 유지하고 공개 소스 제어에 체크하지 마십시오!\n\nGradle 설정\n릴리스 모드 빌드를 추가하기 전에, GitHub 비밀 변수를 사용하여 은닉 변수를 활용하기 위해 우리 앱 수준의 build.gradle 파일에서 서명 구성을 먼저 설정해야 합니다. 이후에 이러한 비밀 변수를 설정할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n이전에 생성한 키스토어를 아래와 같이 android/app 폴더로 이동합니다.\n\n다음을 포함하는 android 루트 폴더에 signing.properties라는 파일을 만듭니다: 우리의 키스토어(RELEASE_STORE_FILE, RELEASE_STORE_PASSWORD, RELEASE_KEY_ALIAS 및 RELEASE_KEY_PASSWORD).\n\n![이미지1](/assets/img/2024-05-17-HowBigPayIncreasedFlutterDeveloperVelocityPart1CICDforFlutterAndroid_2.png)\n\n![이미지2](/assets/img/2024-05-17-HowBigPayIncreasedFlutterDeveloperVelocityPart1CICDforFlutterAndroid_3.png)\n\n<div class=\"content-ad\"></div>\n\n저희 앱 수준의 build.gradle에 다음 코드를 추가해주세요.\n\n```js\ndef keystoreProperties = new Properties()\ndef keystorePropertiesFile = rootProject.file(\"signing.properties\")\nif (keystorePropertiesFile.exists()) {\n keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n}\n\nsigningConfigs {\n    release {\n        if (keystoreProperties[\"RELEASE_STORE_FILE\"] != null) {\n            storeFile file(keystoreProperties['RELEASE_STORE_FILE'])\n            storePassword keystoreProperties['RELEASE_STORE_PASSWORD']\n            keyAlias keystoreProperties['RELEASE_KEY_ALIAS']\n            keyPassword keystoreProperties['RELEASE_KEY_PASSWORD']\n        } else {\n            project.logger.error(\"릴리스 서명 구성을 찾을 수 없습니다. 릴리스 빌드가 실패할 수 있습니다! signing.properties 파일을 확인해주세요.\")\n        }\n    }\n}\n```\n\n해당 코드 스니펫은 앱을 서명하기 위해 signing.properties에서 키스토어 속성을 로드합니다. signing.properties 파일의 존재 여부를 확인한 후 그 내용을 keystoreProperties에 로드합니다.\n\n릴리스용으로 buildTypes를 업데이트해주세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n  buildTypes { \n          release { \n            signingConfig signingConfigs.release \n  } \n          debug { \n            signingConfig signingConfigs.debug \n            debuggable true \n          } \n  }\n```\n\nsigningConfig signingConfigs.release: 앞서 미리 설정한 signingConfigs.release에 정의된 서명 구성을 릴리스 빌드에 사용합니다.\n\n이 방식을 사용하면 키스토어 파일을 해당 경로에 로컬로 남길 수 있고, .gitignore에 추가하여 그레이들 파일을 계속 빌드할 수 있습니다.\n\n키스토어의 인코딩\n다음 단계는 방금 생성한 키스토어 파일의 인코딩을 다룹니다. 인코딩에 대해 우리는 널리 사용되는 Base64 인코딩 체계를 활용할 것입니다. 키스토어 파일의 인코딩은 이 파일을 텍스트로 GitHub Secrets에 저장하고 나중에 GitHub 워크플로 프로세스에서 다시 원래 키스토어 파일로 디코딩할 수 있게 합니다.\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! 안드로이드/app 폴더로 이동해서 .jks 파일을 찾아보세요. 해당 폴더 내에서 macOS에서 터미널에서 다음 명령을 실행하세요: base64 keystore.jks > keystore_base64.txt. 모든 과정이 제대로 진행되면 새로 생성된 keystore_base64.txt 파일을 확인할 수 있을 거예요. 이 파일에는 키 저장소 파일을 표현하는 인코딩된 텍스트가 포함되어 있습니다.\n\n윈도우에서는 OpenSSL을 사용하여 쉽게 인코딩 단계를 수행할 수 있어요. OpenSSL을 다운로드하고 설치한 뒤 인코딩을 진행하세요.\n\n3.1 GitHub Secrets 설정하기\n첫 번째 시크릿은 우리의 키 저장소 파일의 인코딩된 Base64 표현이에요. 프로젝트의 GitHub 시크릿으로 이동해서 KEYSTORE_BASE64라는 새 GitHub 시크릿을 추가하고, keystore_base64.txt 파일의 내용을 복사해서 값을 필드에 붙여넣으세요.\n\n그 다음에는 signing.properties 파일의 텍스트를 포함하는 ANDROID_SIGNING_PROPERTIES라는 또 다른 시크릿을 생성하세요.\n\n3.2 릴리스 모드 빌드하기\n이제 시크릿을 설정했으니, 릴리스 모드를 빌드하는 실제 워크플로우를 진행할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n```js\non:\n  push:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n\n    - name: Set up JDK 17\n      uses: actions/setup-java@v4\n      with:\n        distribution: 'temurin'\n        java-version: '17'\n\n    - name: Set up Flutter\n      uses: subosito/flutter-action@v2\n      with:\n        flutter-version: '3.19.1'\n    \n    - name: Retrieve signing.properties\n      env:\n        ANDROID_SIGNING_PROPERTIES: ${{ secrets.ANDROID_SIGNING_PROPERTIES }}\n      run: echo \"$ANDROID_SIGNING_PROPERTIES\" >> ./android/signing.properties\n\n    - name: Retrieve keystore\n      env:\n        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}\n      run: echo \"$KEYSTORE_BASE64\" | base64 --decode > ./android/app/keystore.jks\n\n    - name: Install dependencies\n      run: flutter pub get\n\n    - name: Run tests\n      run: flutter test\n\n    - name: Build staging APK\n      run: flutter build apk --release --flavor staging\n```\n\n새로 추가된 코드 조각은 Android 응용 프로그램에 서명하는 데 필요한 Android 서명 속성과 키스토어 파일을 검색하고 설정하도록 설계되었습니다. 각 부분이 무엇을 하는지 살펴보겠습니다:\n\n단계별 구문 분석\n서명 속성(.properties) 검색\n\n```js\n- name: Retrieve signing.properties\n  env:\n    ANDROID_SIGNING_PROPERTIES: ${{ secrets.ANDROID_SIGNING_PROPERTIES }}\n  run: echo \"$ANDROID_SIGNING_PROPERTIES\" >> ./android/signing.properties\n```\n\n<div class=\"content-ad\"></div>\n\n**Explanation:**\n\n**env:** 환경 변수 **ANDROID_SIGNING_PROPERTIES**를 GitHub Actions 시크릿인 **ANDROID_SIGNING_PROPERTIES**의 값으로 설정합니다.\n\n**run:** 쉘 명령어를 실행하여 **ANDROID_SIGNING_PROPERTIES**의 값을 **./android** 디렉토리에 위치한 **signing.properties**라는 파일에 출력합니다. \\` 는 값을 파일에 추가합니다. 파일이 존재하지 않는 경우에는 새로 생성됩니다.\n\nKeyStore 가져오기\n\n```js\n- name: KeyStore 가져오기\n  env:\n     KEYSTORE_BASE64: ${secrets.KEYSTORE_BASE64}\n  run: echo \"$KEYSTORE_BASE64\" | base64 --decode > ./android/app/keystore.jks\n```\n\n<div class=\"content-ad\"></div>\n\n환경 변수 KEYSTORE_BASE64에 GitHub Actions 시크릿 KEYSTORE_BASE64의 값을 설정합니다.\n\n아래 쉘 명령어를 실행하여 Base64로 인코딩된 키스토어를 디코딩하고 이를 바이너리 파일로 저장합니다.\n`echo \"$KEYSTORE_BASE64\"`은 KEYSTORE_BASE64 환경 변수에 저장된 Base64로 인코딩된 문자열을 출력합니다.\n\n이 출력을 base64 명령어에 파이핑하여 Base64 문자열을 원래 바이너리 형식으로 디코딩합니다.\n\n`./android/app/keystore.jks`은 디코딩된 바이너리 내용을 ./android/app 디렉토리에 있는 keystore.jks라는 파일에 작성합니다.\n\n<div class=\"content-ad\"></div>\n\n스테이징 APK를 빌드하는 코드 스니펫입니다.\n우리의 Workflow의 다음 단계에서는 Firebase-Distribution-Github-Action을 사용하여 출력 APK를 업로드할 것입니다.\n\n## 단계 4 Firebase 앱 배포\n\n<div class=\"content-ad\"></div>\n\n파이어베이스 액션을 추가하기 전에 시크릿에 FIREBASE_APP_ID 및 CREDENTIAL_FILE_CONTENT를 설정해야 합니다.\n\nFIREBASE_APP_ID는 애플리케이션을 설정한 후 파이어베이스의 일반 설정에서 찾을 수 있습니다.\n\n![이미지](/assets/img/2024-05-17-HowBigPayIncreasedFlutterDeveloperVelocityPart1CICDforFlutterAndroid_4.png)\n\nCREDENTIAL_FILE_CONTENT에 대한 자세한 설명은 공식 문서에서 제공하는 지침을 따라 3단계(비공개 JSON 키 만들기 및 다운로드)까지 따르십시오.\n\n<div class=\"content-ad\"></div>\n\n새로운 시크릿 2개를 생성해주세요. FIREBASE_APP_ID에는 firebase 앱 ID를 값으로 넣고, CREDENTIAL_FILE_CONTENT에는 이전 단계에서 생성된 파일의 내용을 값으로 넣어주세요 (아래 샘플에서는 이 시크릿의 이름이 FIREBASE_ANDROID_STAGING_APP_ID 및 CREDENTIAL_FILE_CONTENT입니다).\n\n파이어베이스 액션 추가\n\n```js\n  - name: 스테이징 APK를 Firebase에 업로드\n    uses: wzieba/Firebase-Distribution-Github-Action@v1\n    with:\n      appId: ${vars.FIREBASE_ANDROID_STAGING_APP_ID}\n      serviceCredentialsFileContent: ${secrets.CREDENTIAL_FILE_CONTENT}\n      groups: \"android-qa\"\n      file: ./flutter/build/app/outputs/flutter-apk/app-staging-release.apk\n```\n\n이 워크플로우 단계에서는 Firebase-Distribution-Github-Action을 사용하여 apk 출력을 업로드하고 android-qa 라는 qa 테스터 그룹에 업로드합니다.\n\n<div class=\"content-ad\"></div>\n\n## 단계 5 Diawi 업로드\n\n- 아티팩트를 업로드하기 위해 Diawi를 활용하려면 Diawi.com 계정이 필요합니다. 아직 계정이 없다면 diawi.com을 방문하여 하나를 만드십시오.\n- Diawi 계정에 로그인한 후 다음 링크로 이동하여 Diawi API 액세스 토큰을 생성하십시오: Diawi API 액세스 토큰.\n- 토큰을 생성하면 브라우저에 표시됩니다. 이 토큰은 한 번만 볼 수 있으므로 즉시 저장해두어야 합니다. 이 토큰은 Diawi로 아티팩트를 업로드할 때 인증에 필요합니다.\n- diawi 토큰이 생성되었으니 값을 가지는 1개의 새로운 시크릿 DIAWI_TOKEN을 만드십시오.\n\nDiawi 액션 추가\n\n```js\n- name: 스테이징 APK를 Diawi에 업로드\n  uses: rnkdsh/action-upload-diawi@v1.5.5\n  id: diawi-upload-staging\n  with:\n    token: ${ secrets.DIAWI_TOKEN }\n    file: ./flutter/build/app/outputs/flutter-apk/app-staging-release.apk\n\n- name: 업로드된 스테이징 APK의 Diawi 링크 가져오기\n  run: echo \"Diawi 링크 ${ steps.diawi-upload-staging.outputs.url }\"\n```\n\n<div class=\"content-ad\"></div>\n\n우리의 Workflow의 마지막 단계에서는 apk 출력을 Diawi에 업로드하고 Diawi 링크를 출력합니다.\n\n요약된 Workflow는 다음과 같습니다:\n\n```js\nname: build-android\non:\n  push:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n\n    - name: Set up JDK 17\n      uses: actions/setup-java@v4\n      with:\n        distribution: 'temurin'\n        java-version: '17'\n\n    - name: Set up Flutter\n      uses: subosito/flutter-action@v2\n      with:\n        flutter-version: '3.19.1'\n    \n    - name: Retrieve signing.properties\n      env:\n        ANDROID_SIGNING_PROPERTIES: ${ secrets.ANDROID_SIGNING_PROPERTIES }\n      run: echo \"$ANDROID_SIGNING_PROPERTIES\" >> ./android/signing.properties\n\n    - name: Retrieve keystore\n      env:\n        KEYSTORE_BASE64: ${ secrets.KEYSTORE_BASE64 }\n      run: echo \"$KEYSTORE_BASE64\" | base64 --decode > ./android/app/keystore.jks\n\n    - name: Install dependencies\n      run: flutter pub get\n\n    - name: Run tests\n      run: flutter test\n\n    - name: Build staging APK\n      run: flutter build apk --release --flavor staging\n\n    - name: Upload staging APK to Firebase\n      uses: wzieba/Firebase-Distribution-Github-Action@v1\n      with:\n        appId: ${ vars.FIREBASE_ANDROID_STAGING_APP_ID }\n        serviceCredentialsFileContent: ${ secrets.CREDENTIAL_FILE_CONTENT }\n        groups: \"android-qa\"\n        file: ./flutter/build/app/outputs/flutter-apk/app-staging-release.apk\n\n    - name: Upload staging APK to Diawi\n      uses: rnkdsh/action-upload-diawi@v1.5.5\n      id: diawi-upload-staging\n      with:\n        token: ${ secrets.DIAWI_TOKEN }\n        file: ./flutter/build/app/outputs/flutter-apk/app-staging-release.apk\n    \n    - name: Get Diawi link of uploaded staging APK\n      run: echo \"Diawi link ${ steps.diawi-upload-staging.outputs.url }\"\n```\n\n## 작업 진행 중인 Workflow\n\n<div class=\"content-ad\"></div>\n\n이제 Workflow를 완료했으니, 액세스하는 것은 간단합니다. GitHub 저장소의 \"Actions\" 탭으로 이동하면 거기에서 찾을 수 있습니다!\n\n![이미지](/assets/img/2024-05-17-HowBigPayIncreasedFlutterDeveloperVelocityPart1CICDforFlutterAndroid_5.png)\n\n앞으로 내부 테스터들과 새 빌드를 공유해야 할 때는, 메인 브랜치로 간단히 푸시하면 됩니다. 그게 전부입니다! 더 이상 테스터들에게 빌드를 배포하는 데 대한 귀찮음이나 스트레스 없이 간단히 푸시하면 되죠.\n\n# 결과\n\n<div class=\"content-ad\"></div>\n\nCI/CD 파이프라인을 도입한 후 개발 워크플로우에서 상당한 개선을 보았습니다. 빌드 시간이 줄고 배포가 더 신뢰할 수 있어졌으며, 팀원들은 빌드 및 배포 관리보다는 새로운 기능 개발에 더 많은 시간을 할애할 수 있게 되었습니다. 이러한 변화로 우리의 개발 속도와 전반적인 생산성이 크게 향상되었습니다.\n\n# 결론\n\nGitHub Actions를 CI/CD 파이프라인으로 채택함으로써 개발 프로세스를 간소화하고 효율성을 향상시켰습니다. CI/CD를 도입하는 것은 소프트웨어 품질과 효율적인 배포를 보장하기 위해 중요합니다. 빌드, 테스트 및 배포 프로세스를 자동화함으로써 우리는 사용자에게 빠르고 신뢰할 수 있는 업데이트를 제공하여 BigPay와의 전반적인 경험을 향상시킬 수 있습니다.\n\niOS 앱을 위한 비슷한 CI/CD 워크플로우 설정에 대해 보다 자세히 살펴볼 Part 2를 기대해 주세요.\n\n<div class=\"content-ad\"></div>\n\n참고 자료\n\n- [https://docs.flutter.dev/deployment/android](https://docs.flutter.dev/deployment/android)","ogImage":{"url":"/assets/img/2024-05-17-HowBigPayIncreasedFlutterDeveloperVelocityPart1CICDforFlutterAndroid_0.png"},"coverImage":"/assets/img/2024-05-17-HowBigPayIncreasedFlutterDeveloperVelocityPart1CICDforFlutterAndroid_0.png","tag":["Tech"],"readingTime":16},{"title":"HTML, CSS로 멋진 큐브 로더 애니메이션 만들기","description":"","date":"2024-05-17 21:33","slug":"2024-05-17-EnhanceYourWebsitewithaBeautifulCubeLoaderAnimationUsingHTMLCSS","content":"\n\n\n![Loading Animation](https://miro.medium.com/v2/resize:fit:1200/1*CSMMFDfA44hUID0Shg5rJg.gif)\n\n지루한 로딩 막대를 응시하면서 더 빨리 움직이기를 희망한 적이 있나요? 우리 모두 그런 경험이 있습니다. 그런데 만약 당신의 웹사이트가 뒷 배경에서 콘텐츠를 로딩하는 동안에도 시각적으로 매력적인 애니메이션으로 사용자들을 매료시킬 수 있다면 어떨까요? 그것이 바로 애니메이션 큐브 로더입니다!\n\n이 단계별 가이드는 HTML과 CSS를 사용하여 세련되고 동적인 애니메이션 큐브 로더를 만드는 방법을 안내해줍니다. 이 프로젝트는 제 #100DaysOfCode 챌린지의 일환이며, 정말 멋진 것을 구축하는 동안 프론트엔드 개발 스킬을 연습하기에 최적의 방법입니다.\n\n준비가 되셨나요? 시작해봅시다!\n\n\n<div class=\"content-ad\"></div>\n\n# 단계 1: 스타터 코드 다운로드 (선택 사항)\n\n프로젝트를 빠르게 시작하기 위해, 애니메이션된 큐브 로더를 위한 미리 작성된 HTML 및 CSS 코드를 다운로드할 수 있습니다. 이것은 구조를 확인하고 모든 부분이 어떻게 함께 작동하는지 알아보는 좋은 방법입니다.\n\n여기서 소스 코드를 다운로드하세요: [소스 코드](링크)\n\n# 단계 2: HTML 구조 설정\n\n<div class=\"content-ad\"></div>\n\nHTML 코드는 애니메이션의 기본 구성 요소를 제공합니다. 우리는 큐브의 컨테이너를 만들기 위해 div 요소들의 시리즈를 사용할 것입니다. 그리고 각 큐브 자체를 정의하기 위해 개별 div 요소들을 사용할 것입니다. 각 큐브 요소 안에는 큐브의 여섯 면을 나타내는 자식 div 요소들이 있을 것입니다.\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <!-- Metadata와 CSS 파일 링크 -->\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>Animated Cube Loader</title>\n</head>\n\n<body>\n    <!-- 큐브 조립을 위한 컨테이너 -->\n\n</body>\n\n</html>\n```\n\n```js\n    <div class=\"assembly\">\n        <!-- 첫 번째 3D 구성 요소 세트 (내부 조립) -->\n        <div class=\"comp-3d comp-3d--i\">\n            <!-- 각 큐브는 'cube__face' 클래스를 가진 div로 표현된 여섯 면을 가지고 있습니다. -->\n            <!-- 첫 번째 큐브 -->\n            <div class=\"cube\">\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n            </div>\n            <!-- 추가 큐브들은 동일한 구조를 따릅니다. -->\n            <!-- 큐브 2부터 큐브 18까지 (동일한 구조) -->\n            <!-- 이하 생략 -->\n        </div>\n\n        <!-- 두 번째 3D 구성 요소 세트 (외부 조립) -->\n        <div class=\"comp-3d comp-3d--o\">\n            <!-- 각 pos 요소는 하나의 큐브를 포함합니다. -->\n            <!-- Position 1 -->\n            <!-- 이하 생략 -->\n        </div>\n    </div>\n```\n\n# Step 3: Adding Styles with CSS\n\n<div class=\"content-ad\"></div>\n\nCSS에서 마법이 일어납니다! 여기에 몇 가지 주요 측면을 살펴보겠습니다:\n\n- 일반 설정: 우리는 body 요소에 대한 스타일을 정의할 것입니다. 오버플로우 방지, 높이 설정, 3D 효과를 위한 perspective 생성 등이 포함됩니다.\n\n```js\n/* 오버플로우 방지, 마진 제거, 높이 설정 및 perspective 생성을 위한 일반 body 설정 */\nbody {\n    overflow: hidden;\n    margin: 0;\n    height: 100vh;\n    perspective: 32em;\n    /* 3D 효과를 위한 perspective 거리 */\n    background-image: linear-gradient(to right, #434343 0%, black 100%);\n    /* 배경 그라데이션 */\n}\n\n/* 모든 div 요소에 대한 일반 설정: 절대 위치 지정 및 3D 변형 보존 */\ndiv {\n    position: absolute;\n    transform-style: preserve-3d;\n    /* 자식 요소가 3D 공간에서 변형되도록 보장 */\n}\n```\n\n- 조립과 애니메이션: 주요 컨테이너에 스타일을 적용하고, inner 및 outer 큐브 그룹에 대한 애니메이션을 만들기 위해 keyframes를 사용할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n/* 주 어셈블리 컨테이너 중앙 정렬 및 초기 회전 */\n.assembly {\n    top: 50%;\n    left: 50%;\n    transform: rotateX(-45deg) rotateY(-45deg);\n    /* 초기 3D 회전 */\n}\n\n/* 3D 구성 요소에 대한 공통 애니메이션 설정 */\n.comp-3d {\n    animation: r 2s ease-in-out infinite;\n    /* 이징을 사용한 무한 애니메이션 */\n}\n\n/* 내부 어셈블리에 대한 특정 애니메이션 이름 */\n.comp-3d--i {\n    animation-name: ri;\n    /* 'ri' 키프레임 사용 */\n}\n\n/* 외부 어셈블리에 대한 특정 애니메이션 이름 */\n.comp-3d--o {\n    animation-name: ro;\n    /* 'ro' 키프레임 사용 */\n}\n\n/* 내부 어셈블리 회전을 위한 키프레임 */\n@keyframes ri {\n\n    0%,\n    20% {\n        transform: rotateY(-0.5turn);\n        /* Y축 기준 -180도 회전 */\n    }\n\n    50% {\n        transform: none;\n        /* 50%에서 변형 없음 */\n    }\n\n    100%,\n    80% {\n        transform: rotateX(-0.5turn);\n        /* X축 기준 -180도 회전 */\n    }\n}\n\n/* 외부 어셈블리 회전을 위한 키프레임 */\n@keyframes ro {\n\n    0%,\n    35% {\n        transform: rotate(-0.5turn);\n        /* -180도 회전 */\n    }\n\n    65%,\n    100% {\n        transform: none;\n        /* 65% 및 100%에서 변형 없음 */\n    }\n}\n```\n\n- 큐브 위치 조정: 각 큐브는 scale3d 및 translate3d 속성을 사용하여 3D 공간에 배치됩니다.\n\n```js\n/* 서로 다른 위치에 큐브에 대한 변환 */\n.pos:nth-child(1) {\n    transform: scale3d(1, 1, 1) translate3d(4em, 4em, 4em);\n}\n\n:not(.pos)>.cube:nth-child(1) {\n    transform: translate3d(-4em, -4em, 0em);\n}\n\n.pos:nth-child(2) {\n    transform: scale3d(1, 1, -1) translate3d(4em, 4em, 4em);\n}\n\n:not(.pos)>.cube:nth-child(2) {\n    transform: translate3d(-4em, 0em, -4em);\n}\n\n/* 다른 큐브(3-18)에 대한 변환 */\n/* 이어서 작성... */\n```\n\n- 큐브 면: 큐브의 개별 면을 차원, 그림자, 배경색으로 스타일링합니다.\n \n\n\n\n<div class=\"content-ad\"></div>\n\n```js\n/* 큐브 면에 대한 스타일 */\n.cube__face {\n    margin: -2em;\n    width: 4em;\n    height: 4em;\n    box-shadow: 0 0 2em rgba(220, 220, 220, 0.5) inset;\n    /* 깊이 효과를 위한 내부 그림자 */\n    backface-visibility: hidden;\n    /* 회전될 때 뒷면 숨김 */\n    background: rgb(222, 238, 253);\n    /* 연한 파란색 배경 */\n}\n\n/* 짝수 번째 면에 대한 약간의 밝기 조정 */\n.cube__face:nth-child(2n) {\n    filter: brightness(0.97);\n}\n\n/* 5번 이상의 인덱스를 가진 면에 대한 약간의 밝기 증가 */\n.cube__face:nth-child(n + 5) {\n    filter: brightness(1.03);\n}\n\n/* 각 면의 위치를 조정하기 위한 변환 */\n.cube__face:nth-child(1) {\n    transform: rotateY(0deg) translateZ(2em);\n    /* 앞면 */\n}\n\n.cube__face:nth-child(2) {\n    transform: rotateY(90deg) translateZ(2em);\n    /* 오른쪽 면 */\n}\n\n.cube__face:nth-child(3) {\n    transform: rotateY(180deg) translateZ(2em);\n    /* 뒷면 */\n}\n\n.cube__face:nth-child(4) {\n    transform: rotateY(270deg) translateZ(2em);\n    /* 왼쪽 면 */\n}\n\n.cube__face:nth-child(5) {\n    transform: rotateX(90deg) translateZ(2em);\n    /* 위쪽 면 */\n}\n\n.cube__face:nth-child(6) {\n    transform: rotateX(-90deg) translateZ(2em);\n    /* 아래쪽 면 */\n}\n```\n\n- 큐브 이동 애니메이션: 특정 큐브를 어셈블리 내에서 움직일 수 있게 애니메이션을 추가함으로써 동적인 터치를 더할 수 있습니다.\n\n```js\n/* 'pos' 요소 내에서 큐브 이동을 위한 키프레임 */\n@keyframes m {\n\n    0%,\n    5%,\n    95%,\n    100% {\n        transform: none;\n        /* 시작, 5%, 95%, 끝에서 변환 없음 */\n    }\n\n    15% {\n        transform: translate3d(0, 4em, 0);\n        /* 4em만큼 위로 이동 */\n    }\n\n    25% {\n        transform: translate3d(0, 4em, 4em);\n        /* 4em만큼 위로 이동하고 앞쪽으로 이동 */\n    }\n\n    35%,\n    65% {\n        transform: translate3d(4em, 4em, 4em);\n        /* 대각선으로 위쪽, 앞쪽, 오른쪽으로 이동 */\n    }\n\n    75% {\n        transform: translate3d(4em, 0, 4em);\n        /* 원래 높이에서 아래쪽으로, 앞쪽으로, 오른쪽으로 이동 */\n    }\n\n    85% {\n        transform: translate3d(4em, 0, 0);\n        /* 원래 위치로 이동 */\n    }\n}\n```\n\n# 단계 4: 실행하고 마법을 확인하세요!\n\n\n<div class=\"content-ad\"></div>\n\nHTML과 CSS 파일을 설정한 후 웹 브라우저에서 HTML 파일을 열어보세요. 움직이는 큐브 로더가 작동하는 것을 볼 수 있을 거에요! CSS 파일에서 스타일을 실험하여 웹사이트의 색상, 크기 및 애니메이션을 맞춤 설정해보세요.\n\n![애니메이션 큐브로더](https://miro.medium.com/v2/resize:fit:1200/1*cligSzXsdw0TaX5dq5uToA.gif)\n\n# 기본 이상으로:\n\n이것은 출발점에 불과해요! 큐브로더를 더 발전시킬 수도 있어요:\n\n<div class=\"content-ad\"></div>\n\n- 입체 그림자 효과를 더해보세요.\n- 다양한 색상과 그라데이션을 활용하여 더 생생한 느낌을 연출해보세요.\n- 사용자에게 추가적인 피드백을 제공하기 위해 로딩 메시지나 진행률 바를 포함해보세요.\n\n# 저와 연락해요\n\n언제든 연락 주세요! 이 프로젝트나 프론트엔드 개발에 대한 질문이 있으시면 언제든 연락주세요.\n\n저와 연락하기: 지금 연락하기\n\n<div class=\"content-ad\"></div>\n\n# 행복한 코딩!\n\n이 블로그 포스트는 애니메이션 큐브 로더를 만드는 방법을 안내해줍니다. 이를 통해 #100DaysOfCode 챌린지의 일환으로 코딩 여정을 멋지고 유익하게 선보일 수 있는 방법을 제공합니다. 또한 독자들이 코드를 다운로드하거나 추가 학습을 위해 연락할 수 있도록 하는 콜 투 액션도 포함되어 있습니다.","ogImage":{"url":"/assets/img/2024-05-17-EnhanceYourWebsitewithaBeautifulCubeLoaderAnimationUsingHTMLCSS_0.png"},"coverImage":"/assets/img/2024-05-17-EnhanceYourWebsitewithaBeautifulCubeLoaderAnimationUsingHTMLCSS_0.png","tag":["Tech"],"readingTime":7},{"title":"JavaScript로 드래그 앤 드롭 기능 만들기(코드 있음)","description":"","date":"2024-05-17 21:32","slug":"2024-05-17-HowtoCreateDragandDropFunctionalityinJavaScriptAStep-by-StepTutorial","content":"\n\n<img src=\"/assets/img/2024-05-17-HowtoCreateDragandDropFunctionalityinJavaScriptAStep-by-StepTutorial_0.png\" />\n\n현대 웹 개발에서 드래그 앤 드롭 기능은 사용자가 직관적인 방식으로 요소들과 상호 작용할 수 있도록 하여 사용자 경험을 향상시킵니다. JavaScript로 드래그 앤 드롭 기능을 구현하는 것은 처음에는 어려울 수 있지만, 올바른 방법으로 접근하면 효율적으로 해낼 수 있습니다. 이 튜토리얼에서는 JavaScript로 드래그 앤 드롭 기능을 만드는 단계를 안내하여, 웹 애플리케이션에 이 기능을 통합할 수 있도록 도와드리겠습니다.\n\n이 튜토리얼을 마치면 JavaScript를 사용하여 웹 애플리케이션에서 드래그 앤 드롭 기능을 구현하는 방법을 익힐 수 있을 것입니다.\n\n# 단계 1: HTML 구조 설정\n\n<div class=\"content-ad\"></div>\n\n먼저, 드래그할 수 있고 놓을 수 있는 요소에 대한 HTML 구조를 만듭니다.\n\n```js\n<div id=\"draggableElement\" draggable=\"true\">Drag Me</div>\n<div id=\"droppableArea\">Drop Here</div>\n```\n\n# 단계 2: JavaScript 이벤트 핸들러 정의\n\n다음으로, 드래그 앤 드롭 이벤트를 처리할 이벤트 핸들러를 정의하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n// 드래그 가능한 요소와 드롭 영역에 대한 참조 획득\nconst draggableElement = document.getElementById('draggableElement');\nconst droppableArea = document.getElementById('droppableArea');\n\n// 드래그 시작시 이벤트 핸들러\ndraggableElement.addEventListener('dragstart', (event) => {\n  // 드래그 작업 중 전송할 데이터 설정\n  event.dataTransfer.setData('text/plain', event.target.id);\n});\n\n// 드롭 발생시 이벤트 핸들러\ndroppableArea.addEventListener('drop', (event) => {\n  // 드롭을 허용하기 위해 기본 동작 방지\n  event.preventDefault();\n  \n  // 드래그 작업 중에 설정된 데이터 검색\n  const data = event.dataTransfer.getData('text/plain');\n  \n  // 데이터를 기반으로 드래그 가능한 요소 찾기\n  const draggableElement = document.getElementById(data);\n  \n  // 드롭 영역에 드래그 가능한 요소 추가\n  event.target.appendChild(draggableElement);\n});\n\n// 드래그 가능한 요소가 드롭 영역 위를 이동 중일 때의 이벤트 핸들러\ndroppableArea.addEventListener('dragover', (event) => {\n  // 드롭을 허용하기 위해 기본 동작 방지\n  event.preventDefault();\n});\n```\n\n# 단계 3: 스타일 추가 (선택 사항)\n\n선택 사항으로 드래그 가능한 요소와 드롭 가능한 요소를 시각적으로 나타내기 위한 CSS 스타일을 추가합니다.\n\n```css\n#draggableElement {\n  cursor: move;\n}\n\n#droppableArea {\n  border: 2px dashed #ccc;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 4: 구현한 기능 테스트하기\n\n마지막으로, 브라우저에서 드래그 앤 드롭 기능을 테스트하여 예상대로 작동하는지 확인하세요.\n\n# 결론\n\n축하합니다! JavaScript에서 드래그 앤 드롭 기능을 구현하는 방법을 성공적으로 배웠습니다. 이 가이드를 따라가면 웹 애플리케이션의 사용자 경험을 향상시키고 사용자가 내용과 직관적으로 상호 작용할 수 있는 방법을 제공할 수 있습니다. 계속해서 실험하고 추가 기능을 탐구하여 드래그 앤 드롭 구현을 더 맞춤화하고 향상시킬 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-17-HowtoCreateDragandDropFunctionalityinJavaScriptAStep-by-StepTutorial_0.png"},"coverImage":"/assets/img/2024-05-17-HowtoCreateDragandDropFunctionalityinJavaScriptAStep-by-StepTutorial_0.png","tag":["Tech"],"readingTime":3},{"title":"대부분 모르는 HTML을 제대로 사용 하는 방법","description":"","date":"2024-05-17 21:28","slug":"2024-05-17-HTMLIntroduction","content":"\n\n![이미지](/assets/img/2024-05-17-HTMLIntroduction_0.png)\n\n안녕하세요! Static & Flow의 HTML 포괄적 설명 파트 1에 오신 것을 환영합니다. 저희는 기술 애호가와 교육 제안을 위해 기사를 작성합니다. 우리가 게시하는 모든 기사는 Grammarly를 사용하여 문법과 참여도를 확인하고, 이미지 및 연구를 위해 챗봇(특히 DALL-E, Gemini 및 Gemma)와 같은 도구, Microsoft Word를 사용하여 저장, Canva를 사용하여 디자인, Visual Studio Code를 사용하여 코드 스니펫을 테스트하고 작성하며, JetBrains IDE를 사용하여 복잡한 프로젝트를 처리하는 등 철저히 검토되고 개선된 것입니다. 더 많은 업데이트를 보시려면 우리의 Medium 계정을 팔로우해주세요.\n\n![이미지](/assets/img/2024-05-17-HTMLIntroduction_1.png)\n\n모든 티저와 주요 기사의 업데이트는 Twitter(X), Instagram 및 Mastodon에 게시됩니다. 아래로 스크롤해주세요!\n\n<div class=\"content-ad\"></div>\n\nPart 1이 무엇을 의미하는지 알고 싶다면, 다음을 확인해보세요: Unleash Your Web Development Potential: Dive into HTML with Static & Flow!\n\n![HTML Introduction](/assets/img/2024-05-17-HTMLIntroduction_2.png)\n\n# HTML 이해하기: 웹 개발의 기본\n\n하이퍼텍스트 마크업 언어인 HTML은 웹 개발의 중요 구성 요소로 인식되며, 웹 페이지를 작성하는 가장 기본적인 언어로 알려져 있습니다. 그러나 더 많은 기능을 제공할 수 있습니다. Chrome이나 Firefox와 같은 브라우저를 사용하여 데이터를 온라인으로 공유하는 웹페이지를 유지할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n웹에서 제공되는 콘텐츠에 구조를 제공하는 데 HTML은 주요 역할을 합니다. 다음으로, 우리는 웹 페이지의 다양한 요소를 발표하기 위해 이러한 태그들을 사용합니다. 이 요소들은 제공된 다양한 요소들을 사용하여 콘텐츠를 표시하는 방법에 대한 브라우저 장치에 대한 지침을 만들어 일관성과 정확성을 유지합니다.\n\nHTML은 결과적으로 웹을 서핑할 때마다 정보를 조직하고 제공하는 기반입니다. HTML이 없었다면, 세계적인 웹에 사람들이 지속적으로 사용하는 레이아웃과 상호 작용 도구가 없었을 것입니다. 간단한 블로그부터 복잡한 전자 상거래 웹 사이트까지 다양한 콘텐츠 유형에서 HTML은 여전히 기본적인 구조를 모든 웹 콘텐츠에 적용하므로 필수불가결합니다.\n\n웹 디자인 문제에 접근할 때, HTML에 능숙해지는 것은 성공적인 경력을 쌓기 위한 필수 전제조건입니다. HTML에 대한 능숙한 지식은 대상 관객의 요구를 충족할 수 있는 능력에 기반하여 원하는 방식으로 웹 사이트를 디자인할 자신감을 줄 것입니다.\n\n![HTML 소개](/assets/img/2024-05-17-HTMLIntroduction_3.png)\n\n<div class=\"content-ad\"></div>\n\n# HTML의 세계 탐험\n\nHTML 또는 하이퍼텍스트 마크업 언어는 웹 개발의 일부인 기본 코딩 언어입니다. 주로 HTML은 하이퍼링크를 사용하여 독특한 웹 페이지를 만들 때 필요한 인터넷의 기본 구조입니다. 이제 하이퍼링크가 다양한 페이지, 웹 사이트 또는 온라인 리소스를 이동하는 데 도움이 되며 우리의 일상적으로 상호 연결된 웹의 일부입니다.\n\nHTML에서 사용되는 주요 기법 중 하나는 태그, 요소 및 주석을 사용하는 것입니다. 특히 태그는 페이지에 사용된 요소의 시작 전과 후를 참조하는 역할을 합니다. 반면에 요소는 모든 페이지에 있는 구성 요소의 중심 부분입니다. 예를 들어 제목, 단락, 이미지 또는 링크 등입니다. 속성은 요소의 다른 특성을 제공하여 더 중요하고 능률적이며 더 멋지게 만듭니다.\n\n태그, 요소 및 속성을 최적으로 활용하여 개발자는 사용자 친화적인 웹 페이지에 매력적인 콘텐츠를 구축하고자 합니다. 이러한 요소는 웹 페이지를 배열하는 데 그치지 않고 웹 페이지가 접근 가능하고 반응적이며 사용자들에게 즐겁게하는지 여부를 결정합니다. 올바른 코드를 작성함으로써 개발자는 자신의 웹 사이트에 질서와 기능을 부여하여 인터넷 사용자들에게 최상의 클라이언트 서비스를 제공하는 웹 사이트를 구축할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nHTML의 기능은 콘텐츠가 표시되는 견고한 기반을 구축하여 개발자가 전 세계의 다양한 사용자에게 현대적이고 도전적인 경험을 제공할 수 있도록 하는 것입니다. HTML 프로그래밍의 기초를 이해하면 웹 개발에서 최상의 결과물을 얻을 수 있으며 그 결과 웹 페이지는 완전한 정보를 제공하고 플랫폼의 그룹을 관여시킬 수 있습니다. 웹 개발 분야로 나아감에 따라 HTML 프로그래밍 애플리케이션의 활용은 창의력을 자극하여 지속적인 디지털 개발로 이끌어주는 문을 열어줄 것입니다.\n\n\n![image](/assets/img/2024-05-17-HTMLIntroduction_4.png)\n\n\n# HTML의 발전: 포괄적인 역사\n\nHTML의 역사에서는 1990년 CERN에서 팀 버너스-리에 의해 시작되었다고 볼 수 있으며, 이는 아직 보여지지 않은 웹 개발의 한 단계를 열었습니다. HTML이 작동하는 언어는 최초에 구조적 텍스트 파일을 보다 사람이 읽기 쉬운 형태로 만드는 것을 목적으로 제작되었습니다. 마크업 언어로서, HTML은 계속해서 새로운 기능과 기능을 소개한 후속 버전에 의해 지속적으로 개선되었으며, 이는 웹의 발전에 기여하였습니다.\n\n<div class=\"content-ad\"></div>\n\nHTML의 역사는 XHTML와 같은 표준의 등장과 같은 다양한 이정표를 보여주었습니다. XHTML은 HTML의 기능을 변화하고 확장하기 위해 계획된 것으로, XML 표준에 더 가까워졌으며, 이것은 동시에 웹 문서의 상호 운용성을 향상시키는 데 도움이 되었습니다.\n\n인터넷과 멀티미디어 트렌드가 발전함에 따라 HTML은 다양한 개선을 통해 넷상에 더 많은 멀티미디어 콘텐츠 수요를 충족시킬 수 있었습니다. 예를 들어, HTML5는 오디오, 비디오, 확장된 상호 작용 기능을 내장 지원하는 매우 중요한 버전으로 출시되었습니다. 제3자 플러그인 없이도 가능했습니다. 이것은 정적에서 동적, 그리고 더 상호 작용적인 웹 개발로의 웹 패러다임 변화가 사용자에게 콘텐츠 생성과 제공을 진정으로 다양화시키며, 오늘날의 사용자-온라인 참여 패러다임을 개조하고 있습니다.\n\nHTML의 채택은 웹 개발 분야에서 계속해서 새로운 기술과 표준을 포용하는 상위 새로운 기술 중 하나로 남아 있습니다. 이 인코딩 언어는 단순 텍스트 파일 이상으로 시작되었지만, 중요하고 포괄적인 정보를 제공하여 사람들을 지원할 수 있는 멋진 웹 페이지를 개발할 수 있게 되었습니다.\n\n과거에서 현재로 이어지는 HTML 기술 환경의 지속적인 상승은 웹 개발 커뮤니티 내에서 발생한 독창적이고 파트너십을 포함하는 예기치 못한 측면을 포함합니다. HTML은 항상 온라인 경험의 새롭고 창의적인 차원을 탐색하는 끝없는 상태의 디지털 미디어의 주도 역할을 하고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-17-HTMLIntroduction_5.png\" />\n\n# HTML이 어떻게 작동하는지\n\n브라우저에서 HTML에 도달할 때마다, 화면에 웹 페이지를 표시하기 위한 일련의 규칙을 따릅니다. 이 상황을 이해하기 위해서는 문서 객체 모델(DOM)을 이해하고, HTML과 CSS가 스타일링을 위해 통합되는 방법을 이해하며, 상호 작용성을 위해 JavaScript를 사용하는 방법을 습득해야 합니다.\n\n## 문서 객체 모델(DOM)\n\n<div class=\"content-ad\"></div>\n\n각 웹 페이지에는 객체 트리로 구조화된 HTML DOM이 있습니다. 요소, 태그, 텍스트 조각, 노드가 DOM과 유사합니다. 웹 페이지 디자인에 대한 실용적인 접근 방식과 최대한의 조작 가능성은 DOM 생성 과정에서 나타납니다. 반면 DOM은 브라우저가 웹 페이지 내용을 이해하고 상호 작용할 수 있도록 만드는 패러다임입니다. 초급 이론으로부터 시작된 DOM을 통해 브라우저는 요소를 가져오고 업데이트하며 스타일을 조작하고 사용자 조작에 반응하여 원활한 대화형 웹 접근을 가능하게 합니다.\n\n## CSS와의 통합을 통한 스타일링\n\nCSS(계단식 스타일 시트)가 제공하는 핵심 장점 중 하나는 페이지의 외관을 지배하는 HTML의 필수 부분이 됨에 있습니다. 이 통합을 통해 웹 개발자는 레이아웃, 서체, 색상부터 기타 눈에 띄는 속성까지 콘텐츠의 모든 측면을 관리할 수 있습니다. 콘텐츠(HTML)와 프리젠테이션(CSS)의 분리를 통해 작성자들은 관심사를 분리하여 여러 페이지에 일관된 스타일을 생성합니다. 이 분리는 소셜 네트워크의 쉬운 유지보수 및 확장 가능성도 허용합니다.\n\n## 상호 작용성을 위한 JavaScript 통합\n\n<div class=\"content-ad\"></div>\n\nJavaScript을 사용하면 웹페이지가 동적이고 반응형이며 흥미로워집니다. 웹페이지에서 상호 작용할 수 있는 능력은 주로 JavaScript를 통해 실현됩니다. 이는 주로 DOM(Document Object Model)을 수정하고 변경함으로써 발생하며, 클릭, 스크롤 등의 이벤트를 통해 상호 작용을 확인하고 사용자 입력을 검증하며 콘텐츠를 변경할 수 있습니다. 결과적으로 JavaScript를 사용하면 다양한 애니메이션을 만들 수 있습니다.\n\n# 파싱에서 렌더링까지의 순서\n\n브라우저가 HTML 소스 코드로부터 문서를 렌더링해야 할 때, 먼저 받은 원시 코드를 DOM 모델로 전달하여 정보를 GUI 인터페이스 형태로 취하는 트리를 생성해야 합니다. 그런 다음 CSS는 시각적 스타일을 계산하기 위해 웹 브라우저에서 처리해야 하며, 이는 요소의 특정 위치를 결정하고 그들 사이의 최종 레이아웃을 계산하는 데 사용됩니다. 그래서 바로 이렇게 CSS는 웹사이트의 레이아웃만 통합하고, HTML은 웹사이트의 콘텐츠만 포함하게 됩니다. 그리고 JavaScript와 같은 제3언어가 추가되면, 해당 언어는 각 요소의 동작을 추가하여 최종 사용자의 반응과 페이지의 동적 반응성을 추가합니다. HTML, CSS 및 JavaScript의 결합은 사용자와 성공적으로 상호 작용하는 멋진 UI를 갖춘 웹 응용 프로그램을 얻게 됩니다.\n\n<img src=\"/assets/img/2024-05-17-HTMLIntroduction_6.png\" />\n\n<div class=\"content-ad\"></div>\n\n# HTML 문서의 기본 구조\n\nHTML 문서를 작성할 때는 특정 구조를 준수해야 합니다. 이 구조는 각기 다른 목적을 위한 구분된 섹션을 설정합니다. HTML 페이지의 기본 구성 요소인 문서 유형 선언, 헤드 섹션 및 본문 섹션에 대한 지식은 웹 페이지를 구축하거나 디자인하는 데 필수적인 기반을 제공합니다.\n\n## 문서 유형 선언\n\n문서 유형 선언은 HTML 문서의 가장 상단에 위치하며 해당 문서에서 사용된 HTML 버전을 웹 브라우저에 통지하는 데 사용됩니다. 가장 일반적으로 사용되는 선언은 `!DOCTYPE html`입니다. 이는 문서가 HTML5 형식으로 작성되었음을 나타냅니다. 해당 선언은 브라우저로 하여금 HTML 표준에 따라 페이지를 렌더링하도록 요청합니다.\n\n<div class=\"content-ad\"></div>\n\n## 헤드 섹션\n\n문서의 헤드 섹션은 사용자에게 직접적으로 표시되지 않는 웹페이지에 대한 메타데이터 및 다른 정보가 유지되는 곳입니다. 브라우저 탭에 표시되는 웹페이지의 이름을 나타내는 `title` 태그와 CSS 파일을 가져오는 그룹에 속하는 `link` 태그와 같은 태그가 포함됩니다. 또한 상단 섹션에는 검색 엔진 및 브라우저를 위한 문자 인코딩, 뷰포트 설정 및 기타 중요한 필드를 제공하기 위한 메타 태그도 있을 수 있습니다.\n\n## 바디 섹션\n\n바디의 부분은 사용자와 직접적인 관계를 형성하여 사용자가 볼 수 있는 웹페이지의 일부이며, HTML 시스템 내의 유기체 일부에 불과합니다. 이 섹션의 내용은 다양한 요소로 구성됩니다. 이러한 주요 구성 요소에는 제목(`h1`, `h2` 등), 단락(`p`), 링크(`a`), 이미지(`img`), 목록(`ul`, `ol`, `li`) 등이 있습니다. 이러한 요소들을 통해 개발자는 웹페이지의 실제 콘텐츠를 형성하고 공유하여 방문객들이 만족할 만큼 웹페이지를 더 읽기 쉽게 찾을 수 있도록 할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 예시 HTML 구조\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>나의 웹 페이지</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>나의 웹사이트에 오신 것을 환영합니다</h1>\n    <p>이것은 내 웹페이지의 샘플 단락입니다.</p>\n    <a href=\"https://www.example.com\">예시 웹사이트 방문하기</a>\n</body>\n</html>\n```\n\n위 예시에서 HTML 문서의 주요 구성 요소가 나타났습니다. 사용된 내용은 doctype 선언, 제목 및 CSS 파일 링크가 있는 head 부분, 그리고 몇 개의 H 태그, 단락 및 링크가 포함된 body 부분입니다. 이러한 표준화된 방식으로 콘텐츠를 구성하는 것은 체계적이고 시각적으로 매력적인 웹 페이지를 제작하는 선행 조건입니다.\n\n![HTML 소개](/assets/img/2024-05-17-HTMLIntroduction_7.png)\n\n<div class=\"content-ad\"></div>\n\n# HTML Elements and Tags\n\nHTML에서 요소와 태그는 웹 콘텐츠를 구조화하고 정리하는 데 핵심적인 역할을 합니다. 일반적으로 사용되는 HTML 태그와 그 목적에 대해 살펴보겠습니다. `div`, `span`, `header`, `footer`와 같은 특수 문자 및 관련 태그와 함께 어떻게 사용되는지 코드 예제를 통해 설명하겠습니다.\n\n# HTML Elements and Tags\n\nHTML에서는 요소와 태그가 주로 웹 콘텐츠를 보다 잘 관리하고 정렬하는 데 사용됩니다. 일반적인 HTML 태그와 그 역할을 함께 `div`, `span`, `header`, `footer` 및 관련 양식 태그를 사용한 특수 문자가 함께 사용되는 경우를 살펴보겠습니다. 각 태그가 실제 상황에서 어떻게 사용되는지 설명하는 예시가 제공됩니다.\n\n<div class=\"content-ad\"></div>\n\n## 1. `div` 태그\n\n상기된 요소는 HTML에서 선택된 데이터 구조의 올인원 항목으로, 웹 문서를 구획화(또는 분해)하는 데 사용됩니다. 주로 내용을 그룹화하고 스타일을 함께 설정하는 데 사용됩니다. `div` 태그가 어떻게 활용되는지의 예시가 아래에 제시되어 있습니다:\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Div 예시</title>\n</head>\n<body>\n    <div style=\"background-color: lightblue;\">\n        <h2>이것은 Div 섹션입니다.</h2>\n        <p>이 문구는 div 요소 내에 있습니다.</p>\n    </div>\n</body>\n</html>\n```\n\n## 2. `span` 태그\n\n<div class=\"content-ad\"></div>\n\n`span` 태그를 사용하면 개발자가 블록의 큰 섹션에서 텍스트 줄의 특정 섹션을 스타일링할 수 있습니다. 일반적으로 인라인 스타일링 및 CSS 클래스가 가장 많이 사용됩니다. `span` 태그를 사용하는 예시는 아래와 같습니다:\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Span Example</title>\n    <style>\n        .highlight {\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <p>This is a <span class=\"highlight\">highlighted</span> text.</p>\n</body>\n</html>\n```\n\n## 3. `header` 및 `footer` 태그\n\n`header` 및 `footer` 태그 모두 웹 페이지의 헤더 및 푸터 부분을 지정하는 데 사용됩니다. 대개 상단(헤더)에는 일반적으로 소개 또는 탐색 콘텐츠가 있으며, 하단(푸터)에는 마감 세부정보가 있습니다. 이러한 태그의 사용 예시는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Header and Footer Example</title>\n</head>\n<body>\n    <header>\n        <h1>Welcome to Our Website</h1>\n        <nav>\n            <a href=\"#\">Home</a> | <a href=\"#\">About</a> | <a href=\"#\">Contact</a>\n        </nav>\n    </header>\n    \n    <footer>\n        <p>&copy; 2024 Example Company. All rights reserved.</p>\n    </footer>\n</body>\n</html>\n```\n\n## 4. Form-Related Tags\n\nHTML은 웹 페이지에서 상호작용하는 양식을 생성할 수 있도록 개발자에게 여러 태그를 제공합니다. 일반적으로 사용되는 양식 태그 중 일부는 `form`, `input`, `label`, `select`, `textarea`, `button`이 있습니다. 다음은 예시입니다:\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Form Example</title>\n</head>\n<body>\n    <form>\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\">\n        \n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\">\n        \n        <button type=\"submit\">Submit</button>\n    </form>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n위의 명령어를 이해하고 활용함으로써 웹 개발자들은 잘 구조화되고 사용자 친화적인 웹 페이지를 만들 수 있으며 일반적으로 관객에게 더 나은 경험을 제공할 수 있습니다.\n\n![HTML Introduction](/assets/img/2024-05-17-HTMLIntroduction_8.png)\n\n## 고급 HTML 기능\n\n기본 HTML 요소로 프로젝트를 시작하는 웹 개발자들은 고급 HTML 태그를 알아야 한다는 것을 인지해야 합니다. 이는 더 깊은 학습 단계로 나아가는 길을 열어주며, 멀티미디어를 개선하고, 웹 사이트를 견고하게 만들며, 장애를 가진 사용자들이 효율적으로 웹 사이트에 접근할 수 있도록 하는 것을 도와줍니다. 또한, 최신 버전은 HTML5로 XHTML의 자리를 차지하며 현대 웹 개발의 요구를 더 잘 충족하는 새로운 태그를 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n## 그림을 그리기 위한 캔버스 요소\n\nHTML5의 `canvas` 요소는 페이지에 스크립트를 동적으로 넣어 사용자 친화적이고 그래픽을 그리는 방법으로 작동합니다. 개발자들은 JavaScript를 통해 다각형을 만들고 애니메이션을 만들거나 수정 또는 캔버스를 삭제할 수 있습니다. 또한 웹 디자이너들에게 가장 시각적으로 풍부하고 동적으로 매력적인 웹 페이지를 제공하는 큰 장점으로 나타납니다.\n\n## 멀티미디어를 위한 비디오 및 오디오 요소\n\nHTML5는 비디오 및 오디오 태그를 사용하여 비디오 및 오디오 컨텐츠를 웹 페이지 내에서 직접 스트리밍할 수 있도록 네이티브 지원을 제공합니다. 최신 운영 방식으로, 개발자들은 플래시와 같은 제3자 플러그인이 필요하지 않은 멀티미디어 인터페이스를 효과적으로 결합할 수 있습니다. 비디오 요소에는 형식 및 속성과 같은 사용자 정의 기능이 있으며, 오디오 요소를 사용하여 사용자에게 더 풍부한 경험을 제공할 수 있습니다. 이러한 기술을 사용하면 웹 사이트에서 멀티미디어 및 특히 이 플랫폼과 상호 작용하는 사용자들의 이야기 및 관객과의 상호 작용과 관련된 것들을 구현할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 향상된 상호 작용을 위한 새로운 양식 컨트롤\n\nHTML5는 데이터 입력 및 상호 작용을 더 효율적으로 구성하는 데 도움이 되는 여러 가지 새로운 양식 컨트롤을 제공합니다. `input type=\"date\"`, `input type=\"range\"`, `input type=\"color\"`, 그리고 `input type=\"email`과 같은 요소들은 날짜, 슬라이더/트랙바, 색상 선택기, 그리고 이메일 입력이 올바른지 확인하기 위한 전문화된 필드를 갖게 해줍니다. 이것이 하는 일은 디자인이 개선될 뿐만 아니라 웹 콘텐츠를 제공하는 데 더 나아지게 만드는 것입니다. 왜냐하면 이러한 요소들은 휴대 기기 및 웹 플랫폼이 고려되어 디자인되었기 때문입니다.\n\n## 반응형과 접근성 기능\n\nHTML5의 사용 자체만으로도 개발자들에게는 훌륭한 것입니다. 이는 반응성과 접근성에 중점을 둔 것입니다. 웹 사이트는 화면 크기 및 장치에 매끄럽게 적응하지만 장애를 가진 사람들에게도 사용 가능합니다. 많은 요소들, 예를 들어, 의미론적 요소들(`header`, `nav`, `main`, `footer`), 반응형 이미지(`img srcset`), 그리고 랜드마크 역할(ARIA 속성)이 구조와 웹 탐색을 위해 사용되었습니다. 이를 실현하기 위해 개발자들은 이러한 의미론적 인프라, 반응성, 그리고 ARIA 랜드마크들을 웹 페이지의 구조에 사용해야 합니다. 항상 시각적 디자인과 탐색을 향상시키고 웹 사이트는 모든 사용자를 환영해야 합니다. 이러한 기능을 따르면, 개발자들은 사이트의 실용성뿐만 아니라 모든 사용자에게 접근 가능한 환경을 만드는 것입니다.\n\n<div class=\"content-ad\"></div>\n\nHTML5의 고급 기능 활용은 개발자들이 전자 학습 및 모바일 학습을 포함한 다양한 수정 작업을 수행하는 데 도움이 되는 새로운 도구를 사용할 수 있게 합니다. 3D 모델, 데이터 시각화 및 일반 대중에게 수용 가능한 접근 가능한 인터페이스와 같은 리소스를 포함하여 다양한 수정 작업을 수행하는 데 도움이 되는 새로운 도구를 사용할 수 있게 합니다. HTML 캔버스는 몰입형 멀티미디어 경험에 신뢰성을 제공하는 동시에 이러한 특별한 구현으로 사용자와 웹 사이트의 상호 작용 방식을 변경할 수 있습니다.\n\n다음은 해당 방향으로 적용된 주요 규칙 몇 가지입니다: 멀티미디어 콘텐츠 표시를 위해 오디오 및 비디오 추가, 향상된 상호 작용을 위한 새로운 입력 유형을 통한 멋진 폼 컨트롤, 그리고 장애인을 위한 모든 것이 적응적이고 편안하도록 구성하는 것 등입니다. 이러한 특별한 구현을 통해 개발자들은 웹 개발에 대한 새로운 표준을 설정하면서 사용자가 웹 사이트와 상호 작용하는 방식을 변경할 수 있습니다.\n\n![HTML 도입부](/assets/img/2024-05-17-HTMLIntroduction_9.png)\n\n# HTML Best Practices\n\nCSS 및 웹 개발 사용량을 줄이려는 욕망을 형성하는 동안 HTML 표준이 작업에서 필수적으로 구현되어야 함을 이해할 필요가 있습니다. 의미론적 HTML, 접근성 고려, SEO 최적화, 그리고 표시되는 것의 가독성을 유지하기 위한 가이드라인을 준수함으로써 사용자 경험을 향상시키고 개발 프로세스를 간소화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 시맨틱 HTML\n\n시맨틱 HTML은 시각화만 하는 것이 아닌 의미있는 태그로 요소를 표시하는 데 중점을 둡니다. `header`, `nav`, `main`, `section`, `footer`와 같은 태그를 사용하면 검색 엔진이 콘텐츠를 논리적으로 구성할 수 있을 뿐만 아니라 보조 기술에서도 웹 페이지를 모든 사용자가 쉽게 이해할 수 있도록 만들어줍니다. 시맨틱 HTML 패턴을 적용하면 코드를 정리하고 프로젝트를 보다 원활하게 조작하고 확장할 수 있습니다.\n\n## 접근성 가이드라인\n\nHTML 코드를 작성할 때 웹 사이트의 접근성에 대해 이해하고 있는 것은 단순히 명령이 아니라 모든 사용자가 장애가 있는 경우를 포함해 사이트에 문제없이 액세스할 수 있어야 한다는 가장 중요한 점입니다. 이미지에 대한 대체 텍스트 추가, 설명적인 링크 텍스트, 적절한 제목 구조, 키보드 탐색 지원과 같은 기능을 추가하여 접근성을 높이면 공통접근성을 의미하는 포용적이고 접근 가능한 방식으로 제공됩니다. 설정된 접근성 가이드라인을 따르는 것은 많은 관객에 손길을 남기면서 모든 웹 사이트가 어디에서나 누구에게나 접근 가능해야 한다는 요구 사항을 충족시키는 한 가지 방법입니다.\n\n<div class=\"content-ad\"></div>\n\n## SEO 고려 사항\n\n검색 엔진이 콘텐츠를 시각적으로 이해할 수 있도록 웹사이트를 구성하는 것은 검색 결과에서의 가시성과 순위 획득의 주요 요소입니다. 제목, 메타 태그, 텍스트에 해당하는 목표 키워드를 활용하고 정보를 순서화하고 쉽게 따라갈 수 있도록 구성하세요. 명확하고 설명적인 메타 타이틀, 메타 설명 및 구조화된 데이터 마크업을 작성하면 웹사이트로 더 많은 방문자가 유입되어 유기적인 방문 수가 증가할 수 있습니다. SEO 논리를 도입함으로써 사용자는 웹사이트 탐색 및 방문에 더욱 참여할 수 있습니다.\n\n## 마크업의 가독성 유지\n\nHTML 문서가 깨끗하고 조직적이며 이해하기 쉽도록 보장하기 위해서는 미래 협업 및 유지보수를 위한 최고의 코드 관행을 준수해야 합니다. 코드 블록을 일관된 방식으로 정렬하고 클래스와 ID에 명확한 이름을 부여하며 복잡한 섹션이나 기능을 설명하는 설명적인 주석을 추가하세요. 린터 및 코드 유효성 검사와 같은 도구의 사용은 개발 중에 오류를 감지하고 코드를 공통 스타일에서 벗어나지 않도록 방지하여 코드를 쉽게 읽을 수 있도록 도와줍니다.\n\n<div class=\"content-ad\"></div>\n\nHTML 효율적인 작성 기준을 따르면 웹 프로젝트를 다음 수준으로 발전시킬 수 있어요. 이는 사용자 경험을 향상시키고 디지털 콘텐츠의 영향력과 범위를 확대하는 데 도움이 될 거예요. 의미 있는 작성의 실용적인 구현을 내재화하면, 모든 사용자에게 웹 접근이 가능해지고 SEO 최적화 및 가독성 있는 콘텐츠 작성을 통해 현재 프로젝트를 개선할 수 있을 뿐만 아니라 미래 웹 프로젝트의 견고한 기초를 마련할 수 있어요.\n\n# HTML 기초\n\nHTML은 웹페이지의 핵심 요소임을 부인할 수 없어요. 요소와 태그를 통해 구조를 지정하죠. 이러한 요소들은 제목, 단락, 이미지, 링크 등 웹 페이지의 기본 구조를 이루는 HTML 언어의 단위들이에요. 또한, 태그를 통해 독자들을 안내하는 작업이 이루어지고, HTML에서 기본적인 역할을 하는 태그들은 혼동되지 않도록 도와줘요. 더구나, 태그는 콘텐츠를 감싸고, 어떻게 웹페이지에서 포맷되는지를 보여주거나 의미를 주는 역할을 해요.\n\np 태그를 사용하면 닫는 태그가 필요 없고, 매우 간결하게 단락을 정의할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\nHTML의 매체는 계층 구조를 따라가며 웹사이트를 더 깔끔하고 명확하게 만들 수 있게 도와줍니다. 한편으로, 텍스트가 어려워지는 것 같은데, 태그 뒤에 따라오는 현실이 그렇습니다. 태그가 따라오면서 HTML 문서를 생성하고 구성해야 하는데, 이는 정리되고 조직화된 문서를 만들 수 있게 합니다. 각 div의 높이와 너비를 설정하면 각 문단의 어느 쪽에 배치할지를 정의할 수 있습니다. 태그가 HTML에 중요한 이유는 다른 부분들을 조립하고, 제목, 문단 또는 기타 부분들이 어떻게 표시될지를 지시하기 때문입니다.\n\n태그, 요소 및 속성을 포함한 HTML의 기본 개념들을 배우면 웹상에서 매우 효과적인 콘텐츠를 생산하고 변경할 수 있습니다. 다가오는 연습에서 HTML 태그와 요소를 만들어 보며 지식을 넓히는 기회가 주어질 것입니다.\n\n제 1부 끝!\n\n![HTML 소개](/assets/img/2024-05-17-HTMLIntroduction_10.png)\n\n<div class=\"content-ad\"></div>\n\n# 퀴즈\n\n## 1. HTML은 무엇을 의미합니까?\na) 하이퍼텍스트 마크업 언어\nb) 하이 텍스트 기계 언어\nc) 하이퍼링크 및 텍스트 마크업 언어\nd) 홈 도구 마크업 언어\n\n## 2. 내부 스타일 시트를 정의하는 데 사용되는 HTML 태그는 무엇입니까?\n\n<div class=\"content-ad\"></div>\n\na) `script`\nb) `style`\nc) `css`\nd) `link`\n\n### 3. 줄 바꿈을 삽입하는 올바른 HTML 요소는 무엇인가요?\n\na) `lb`\nb) `break`\nc) `br`\nd) `newline`\n\n### 4. HTML에서 하이퍼링크를 생성하는 데 사용되는 다음 태그는 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\na) `link`\nb) `href`\nc) `a`\nd) `url`\n\n## 5. What is the correct syntax for creating a comment in HTML?\n\na) `<!-- Comment -->`\nb) // Comment\nc) /* Comment */\nd) # Comment\n\n## 6. Which HTML element is used to specify a footer for a document or section?\n\n<div class=\"content-ad\"></div>\n\na) 'foot'\nb) 'bottom'\nc) 'footer'\nd) 'section'\n\n## 7. 아래 중 HTML에서 이미지를 포함하는 올바른 방법은 무엇입니까?\n\na) `img href=”image.jpg”`\nb) `img src=”image.jpg”`\nc) `image src=”image.jpg”`\nd) `image href=”image.jpg”`\n\n## 8. HTML의 `title` 태그는 무엇을 하는 것입니까?\n\n<div class=\"content-ad\"></div>\n\na) 웹 페이지의 제목을 만듭니다.\nb) 제목을 브라우저의 제목 표시줄이나 탭에 표시합니다.\nc) 검색 엔진 결과에서 웹 페이지의 제목을 설정합니다.\nd) 위 모두\n\n## 9. HTML 속성 중 인라인 스타일을 정의하는 데 사용되는 것은 무엇인가요?\n\na) class\nb) style\nc) font\nd) styles\n\n## 10. HTML에서 번호가 매겨진 목록을 만드는 데 사용되는 것은 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\na) `ul`\nb) `ol`\nc) `li`\nd) `dl`\n\nPart 1 퀴즈 끝!\n\n![이미지](/assets/img/2024-05-17-HTMLIntroduction_11.png)\n\n![이미지](/assets/img/2024-05-17-HTMLIntroduction_12.png)\n\n<div class=\"content-ad\"></div>\n\n## 더 많은 업데이트를 받고 싶다면 팔로우하세요!\n\n최신 기사, 튜토리얼 및 기술 통찰력에 대해 최신 정보를 받으려면 소셜 미디어에서 저희를 팔로우하세요:\n\n- Twitter (X): @StaticAndFlow\n- Instagram: @StaticAndFlow\n- Mastodon: @StaticAndFlow\n\n저희 계정을 팔로우하면 새로운 기사, 독점 콘텐츠 및 더 많은 것을 알림으로 받게 됩니다. 기술 애호가들의 커뮤니티에 가입하여 학습 여정을 더욱 높은 수준으로 이끌어보세요!","ogImage":{"url":"/assets/img/2024-05-17-HTMLIntroduction_0.png"},"coverImage":"/assets/img/2024-05-17-HTMLIntroduction_0.png","tag":["Tech"],"readingTime":16},{"title":"웹개발에서 알아둬야할 Color들","description":"","date":"2024-05-17 21:27","slug":"2024-05-17-BestColorsandNames","content":"\n\n![이미지](/assets/img/2024-05-17-BestColorsandNames_0.png)\n\n안녕하세요, 색상 애호가 및 디자인 마법사 여러분! 오늘은 색상과 디자인 세계의 숨겨진 보석인 \"색 이름\" 섹션을 소개해 드리는 것에 흥분합니다. hexcolor.co의 \"색 이름\" 섹션은 단순한 색 이름 목록이 아니라 무지개를 따라 화려한 여정을 안내해 주는 리소스로, 여러분의 프로젝트에 영감을 주고 발전시킬 것입니다!\n\n## \"색 이름\" 섹션이란?\n\nhexcolor.co의 \"색 이름\" 섹션은 해당 HEX 코드와 함께 완벽하게 취합된 색 이름들의 포괄적이고 아름다운 컬렉션이에요. 웹 디자인, 그래픽 디자인 또는 다른 예술적 노력에서 창의성과 정밀함을 더하고 싶은 사람들을 위한 보물창고입니다.\n\n<div class=\"content-ad\"></div>\n\n## 이 컬러풀한 자료를 좋아할 이유\n\n- 영감 가득: 다양한 컬러 이름이 풍부하게 제공되어 있어, 이 섹션은 영감의 광산입니다. 웹사이트 디자인, 브랜드 팔레트 작성, 또는 다음 아트 프로젝트를 위한 완벽한 쉐이드를 찾고 있다면 여기에서 찾을 수 있습니다.\n- 정밀하고 정확하게: 각 컬러 이름은 정확한 HEX 코드와 함께 제공되어, 디지털 프로젝트에서 컬러를 정확히 재현할 수 있습니다.\n- 심미적 탐구: 알지 못했던 컬러를 발견하고 작품에 독특함을 부여할 수 있는 특이하고 독특한 쉐이드를 탐색해보세요.\n\n## 컬러 이름 이상: 디자인 지식의 중심지\n\nHexcolor.co는 컬러 이름 목록 이상을 제공합니다. 웹사이트 최적화를 위한 A/B 테스트, 전자상거래 KPI, 오피스 페인트 컬러 등에 대한 통찰력을 제공하는 디자인 지식의 포괄적인 중심지입니다. 디자인과 컬러 이론을 깊이 이해하고 싶은 누구에게나 완벽한 목적지입니다.\n\n<div class=\"content-ad\"></div>\n\n## \"색 이름\" 섹션 사용 방법\n\n\"색 이름\" 섹션을 사용하는 것은 굉장히 간단합니다:\n\n- https://hexcolor.co/color-names를 방문합니다.\n- 색 이름 목록을 살펴보고 영감을 얻습니다.\n- 원하는 색을 클릭하여 HEX 코드 및 기타 세부 정보를 확인합니다.\n- 디지털 프로젝트에서 완벽한 색상 매칭을 위해 HEX 코드를 사용합니다.\n\n## 마지막으로\n\n\n<div class=\"content-ad\"></div>\n\nHexcolor.co에서는 세계를 더 다채롭고 창의적인 곳으로 만들고자 열정을 가지고 노력하고 있습니다. 저희의 \"색 이름\" 섹션은 이 의지의 증명이며, 영감을 주는 동시에 실용적인 자원을 제공합니다. 당신이 경험 많은 디자이너이든 색상 애호가이든, 여기서 좋아할 만한 것을 찾을 수 있을 겁니다.\n\n## 마무리\n\n디자인의 다이나믹하고 끊임없이 변화하는 세계에서 필요한 적절한 자원을 손에 넣는 것이 중요합니다. Hexcolor.co의 \"색 이름\" 섹션은 단순히 도구 이상의 의미를 갖고 있습니다; 이는 영감과 창의력의 원천이기도 합니다. 이 다채로운 세계로 빠져들어 상상력을 펼쳐보세요!","ogImage":{"url":"/assets/img/2024-05-17-BestColorsandNames_0.png"},"coverImage":"/assets/img/2024-05-17-BestColorsandNames_0.png","tag":["Tech"],"readingTime":2},{"title":"프론트엔드 개발자를 위한 50가지 프로젝트 No05 - Blurry Loading","description":"","date":"2024-05-17 21:26","slug":"2024-05-17-50Front-EndCombatProjectNo05BlurryLoading","content":"\n\n<img src=\"/assets/img/2024-05-17-50Front-EndCombatProjectNo05BlurryLoading_0.png\" />\n\n오늘은 50개의 프론트엔드 실전 프로젝트 No.05: Blurry Loading에 대해 이야기하려고 해요. 이 프로젝트의 소스 코드 다운로드 주소는 다음과 같아요: [여기를 클릭해주세요](https://github.com/bradtraversy/50projects50days/tree/master/blurry-loading)\n\n# 프로젝트 소개\n\n이 프로젝트는 웹 페이지 로드 중에 희미한 로딩 효과를 시뮬레이션해요. 페이지는 흐릿한 배경 이미지로 시작하여 점점 선명해지고 로딩 진행률 텍스트가 변경되는 효과를 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Blurry Loading](/assets/img/2024-05-17-50Front-EndCombatProjectNo05BlurryLoading_1.png)\n\n# 핵심 코드\n\n- `section class=”bg”``/section`: 로딩을 위해 배경 이미지를 흐릿하게 처리하는 데 사용됩니다.\n- `div class=”loading-text”``/div`: 로딩 진행 상황을 표시하는 텍스트입니다.\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"style.css\" />\n    <title>Blurry Loading</title>\n  </head>\n  <body>\n    <section class=\"bg\"></section>\n    <div class=\"loading-text\">0%</div>\n\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n- .bg의 filter: blur(0px): 초기 blur 효과를 정의합니다.\n- .loading-text.style.opacity: 로드 진행 텍스트의 투명도를 제어합니다.\n\n```js\n@import url('https://fonts.googleapis.com/css?family=Ubuntu');\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'Ubuntu', sans-serif;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  overflow: hidden;\n  margin: 0;\n}\n\n.bg {\n  background: url('https://images.unsplash.com/photo-1576161787924-01bb08dad4a4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2104&q=80')\n    no-repeat center center/cover;\n  position: absolute;\n  top: -30px;\n  left: -30px;\n  width: calc(100vw + 60px);\n  height: calc(100vh + 60px);\n  z-index: -1;\n  filter: blur(0px);\n}\n\n.loading-text {\n  font-size: 50px;\n  color: #fff;\n}\n```\n\n- 로드 진행 텍스트와 배경 요소에 대한 DOM 노드 참조 획득.\n- 로드 진행을 기록할 변수 load를 정의합니다.\n- setInterval 함수를 사용하여 30밀리초마다 블러링 함수를 호출하는 타이머를 설정하여 로딩 프로세스를 모방합니다.\n- 블러링 함수:\n— 로드 값을 증가시켜 로딩 진행을 모방합니다.\n— 로딩이 완료되었는지 확인하고 타이머를 해제합니다.\n— 로드 진행 텍스트의 콘텐츠를 업데이트합니다.\n— scale 함수를 사용하여 로드 진행 값을 blur 필터의 강도 값으로 변환하고 배경의 blur 효과를 업데이트합니다.\n— scale 함수를 사용하여 로드 진행 값을 텍스트의 투명도 값으로 변환하고 로드 진행 텍스트의 투명도를 업데이트합니다 (값이 100에 가까울수록 투명도가 낮아집니다).\n\n```js\nconst loadText = document.querySelector('.loading-text')\nconst bg = document.querySelector('.bg')\n\nlet load = 0\n\nlet int = setInterval(blurring, 30)\n\nfunction blurring() {\n  load++\n\n  if (load > 99) {\n    clearInterval(int)\n  }\n\n  loadText.innerText = `${load}%`\n  loadText.style.opacity = scale(load, 0, 100, 1, 0)\n  bg.style.filter = `blur(${scale(load, 0, 100, 30, 0)}px)`\n}\n\n// https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\nconst scale = (num, in_min, in_max, out_min, out_max) => {\n  return ((num - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 개요\n\n이 프로젝트는 CSS의 filter: blur(px) 속성을 사용하여 흐릿한 효과를 구현하고, JavaScript 타이머 (setInterval)를 사용하여 로딩 과정을 시뮬레이션합니다. 로딩 진행이 늘어남에 따라 블러 필터의 값이 점차 감소하고 배경 이미지가 선명해집니다. 동시에 JavaScript 코드는 로딩 진행 텍스트의 값과 투명도도 업데이트합니다.\n\nGIF의 전체 과정은 다음과 같이 나타납니다:\n\n![이미지](/assets/img/2024-05-17-50Front-EndCombatProjectNo05BlurryLoading_2.png)\n\n<div class=\"content-ad\"></div>\n\n이 이야기를 읽은 후 도움이 될 것 같다고 생각된다면 박수를 보내주시고 팔로우해주세요. 공유도 해주세요. 혹시 당신의 리트윗이 다른 사람들에게 영감을 줄 수도 있습니다. 또한, 제안 사항이 있으면 아래에 제안해 주시면 감사하겠습니다. 향후 기술에 관한 더 많은 기사를 공유하겠습니다. 감사합니다!","ogImage":{"url":"/assets/img/2024-05-17-50Front-EndCombatProjectNo05BlurryLoading_0.png"},"coverImage":"/assets/img/2024-05-17-50Front-EndCombatProjectNo05BlurryLoading_0.png","tag":["Tech"],"readingTime":4},{"title":"개발자라면 반드시 알아야 할 CSS 팁 25가지","description":"","date":"2024-05-17 21:24","slug":"2024-05-17-25CSSHacksEveryDeveloperShouldKnow","content":"\n\n\n![CSS](/assets/img/2024-05-17-25CSSHacksEveryDeveloperShouldKnow_0.png)\n\nCSS (Cascading Style Sheets)은 웹 개발자에게 필수적인 도구로, HTML 요소를 정확하게 스타일링할 수 있게 해줍니다. 그러나 CSS를 정복하는 것은 기본을 알고 있는 것 이상의 일이 필요합니다. 여기에는 여러분의 삶을 더 쉽게 만들고 코드를 더 깔끔하게 만들 수 있는 25가지 CSS 해킹 방법이 있습니다.\n\n## 1. 요소를 수직 및 수평으로 가운데 정렬하기\n\n문제: 요소를 컨테이너 내에서 수직 및 수평으로 가운데 정렬하는 것.\n\n\n<div class=\"content-ad\"></div>\n\n해결책: Flexbox를 사용해주세요.\n\n```js\n.container {\n    display: flex;\n    justify-content: center; /* 수평 가운데 정렬 */\n    align-items: center; /* 수직 가운데 정렬 */\n    height: 100vh;\n}\n```\n\n## 2. `vw`를 사용한 반응형 텍스트\n\n문제: 뷰포트와 비례하여 텍스트가 확대/축소되는지 확인하는 것이 중요합니다.\n\n<div class=\"content-ad\"></div>\n\n해결책: `vw` 단위를 사용하세요.\n\n```css\nh1 {\n    font-size: 5vw;\n}\n```\n\n## 3. 종횡비 유지\n\n문제: 요소의 종횡비 유지하기.\n\n<div class=\"content-ad\"></div>\n\n해결책: 백분율 기반의 패딩 사용하기.\n\n```js\n.aspect-ratio-box {\nwidth: 100%;\npadding-top: 56.25%; /* 16:9 비율 */\nposition: relative;\n}\n.aspect-ratio-content {\nposition: absolute;\ntop: 0;\nright: 0;\nbottom: 0;\nleft: 0;\n}\n```\n\n## 4. 커스텀 체크박스 및 라디오 버튼\n\n문제: 기본 체크박스와 라디오 버튼의 스타일링.\n\n<div class=\"content-ad\"></div>\n\n해결책: 기본 입력란을 숨기고 레이블을 스타일링합니다.\n\n```js\n<label class=\"custom-checkbox\">\n<input type=\"checkbox\" />\n<span class=\"checkmark\"></span>\n</label>\n```\n\n```js\n.custom-checkbox input {\ndisplay: none;\n}\n.custom-checkbox .checkmark {\nwidth: 20px;\nheight: 20px;\nbackground-color: #eee;\nborder-radius: 4px;\n}\n.custom-checkbox input:checked + .checkmark {\nbackground-color: #2196F3;\n}\n```\n\n## 5. 레이아웃을 위한 CSS 그리드\n\n<div class=\"content-ad\"></div>\n\n문제: 복잡한 레이아웃 만들기.\n\n해결책: CSS Grid를 사용하세요.\n\n```css\n.container {\ndisplay: grid;\ngrid-template-columns: repeat(3, 1fr);\ngap: 10px;\n}\n.item {\nbackground-color: lightblue;\npadding: 20px;\n}\n```\n\n## 6. 고정 푸터\n\n<div class=\"content-ad\"></div>\n\n문제: 페이지 하단에 푸터를 고정하는 방법\n\n해결책: Flexbox를 사용하세요.\n\n```js\nbody {\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n}\nmain {\n    flex: 1;\n}\nfooter {\n    background-color: #f1f1f1;\n    padding: 10px;\n    text-align: center;\n}\n```\n\n## 7. 부드러운 스크롤\n\n<div class=\"content-ad\"></div>\n\n문제: 앵커 링크에 부드러운 스크롤 추가하기\n\n해결책: `scroll-behavior`를 사용하세요.\n\n```css\nhtml {\nscroll-behavior: smooth;\n}\n```\n\n## 8. 반응형 이미지\n\n<div class=\"content-ad\"></div>\n\n문제: 이미지가 반응형으로 표시되도록하기\n\n해결책: `max-width` 속성 사용\n\n```css\nimg {\n    max-width: 100%;\n    height: auto;\n}\n```\n\n## 9. 텍스트 줄임표(...) 처리\n\n<div class=\"content-ad\"></div>\n\n해결: 넘치는 텍스트 자르기\n\n해결책: `text-overflow`를 사용하세요.\n\n```css\n.truncate {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 200px; /* 또는 필요한 너비 */\n}\n```\n\n## 10. 커스텀 스크롤바\n\n<div class=\"content-ad\"></div>\n\n문제: 스크롤바 스타일링하기.\n\n솔루션: `::-webkit-scrollbar`를 사용하세요.\n\n```js\n::-webkit-scrollbar {\n    width: 10px;\n}\n\n::-webkit-scrollbar-track {\n    background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #888;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #555;\n}\n```\n\n## 11. 전체 화면 배경 이미지\n\n<div class=\"content-ad\"></div>\n\n문제: 배경 이미지를 전체 화면에 적용하는 방법.\n\n해결 방법: `background-size`를 사용하세요.\n\n```css\n.full-screen-bg {\nbackground-image: url('background.jpg');\nbackground-size: cover;\nbackground-position: center;\nheight: 100vh;\n}\n```\n\n## 12. 그라디언트 배경 애니메이션\n\n<div class=\"content-ad\"></div>\n\n문제: 애니메이션 그라데이션 배경 만들기.\n\n해결책: `@keyframes`를 사용하세요.\n\n```js\n@keyframes gradient {\n0% { background-position: 0% 50%; }\n50% { background-position: 100% 50%; }\n100% { background-position: 0% 50%; }\n}\n.animated-gradient {\nbackground: linear-gradient(270deg, #ff7e5f, #feb47b);\nbackground-size: 400% 400%;\nanimation: gradient 15s ease infinite;\n}\n```\n\n## 13. 오버레이\n\n<div class=\"content-ad\"></div>\n\n문제: 이미지에 오버레이 추가하기\n\n해결책: `::after` 가상 요소 사용하세요.\n\n```js\n.image-overlay {\nposition: relative;\n}\n.image-overlay::after {\ncontent: '';\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nheight: 100%;\nbackground-color: rgba(0, 0, 0, 0.5); /* 투명도 50%인 검은색 */\n}\n```\n\n## 14. 이미지 호버 효과\n\n<div class=\"content-ad\"></div>\n\n문제: 이미지에 호버 효과 추가하기.\n\n해결책: `:hover`를 사용하세요.\n\n```css\n.image-hover img {\n    transition: transform 0.3s;\n}\n.image-hover img:hover {\n    transform: scale(1.1);\n}\n```\n\n## 15. CSS 변수\n\n<div class=\"content-ad\"></div>\n\n문제: 테마 변경을 간단하게하기.\n\n해결책: CSS 변수를 사용하세요.\n\n```css\n:root {\n    --primary-color: #3498db;\n    --secondary-color: #2ecc71;\n}\nbutton {\n    background-color: var(--primary-color);\n    color: var(--secondary-color);\n}\n```\n\n## 16. 이미지용 Object Fit\n\n<div class=\"content-ad\"></div>\n\n문제: 이미지가 왜곡되지 않고 컨테이너 내에 잘 맞게 표시되는지 확인합니다.\n\n해결책: `object-fit`를 사용하세요.\n\n```css\n.fit-image {\n    width: 100%;\n    height: 200px;\n    object-fit: cover; /* 또는 contain, fill 등 */\n}\n```\n\n## 17. 줄 바꿈 방지\n\n<div class=\"content-ad\"></div>\n\n문제: 텍스트가 여러 줄로 나뉘는 것을 방지해야 합니다.\n\n해결책: `white-space`를 사용하세요.\n\n```css\n.no-break {\nwhite-space: nowrap;\n}\n```\n\n## 18. 전체 너비 요소\n\n<div class=\"content-ad\"></div>\n\n문제: 요소가 부모 요소의 전체 너비를 차지하도록 만들기.\n\n해결책: `width: 100vw`를 사용하세요.\n\n```css\n.full-width {\nwidth: 100vw;\nmargin-left: calc(50% - 50vw);\nmargin-right: calc(50% - 50vw);\n}\n```\n\n## 19. SVG 아이콘 색상 제어\n\n<div class=\"content-ad\"></div>\n\n문제: CSS를 사용하여 인라인 SVG의 색상 변경하기\n\n해결책: `currentColor`을 사용하세요.\n\n```css\n.icon {\nfill: currentColor;\n}\n.icon-container {\ncolor: #ff6347;\n}\n```\n\n## 20. 이름이 지정된 영역을 사용한 CSS 그리드\n\n<div class=\"content-ad\"></div>\n\n문제: 이름이 지정된 그리드 영역으로 복잡한 레이아웃을 생성하려면.\n\n해결책: `grid-template-areas`를 사용하세요.\n\n```js\n.grid-container {\n  display: grid;\n  grid-template-areas:\n    'header header'\n    'sidebar content'\n    'footer footer';\n  grid-gap: 10px;\n}\n.header {\n  grid-area: header;\n}\n.sidebar {\n  grid-area: sidebar;\n}\n.content {\n  grid-area: content;\n}\n.footer {\n  grid-area: footer;\n}\n```\n\n## 21. CSS Transtions\n\n<div class=\"content-ad\"></div>\n\n문제: 상태 간의 부드러운 전환.\n\n해결 방법: `transition`을 사용하세요.\n\n```css\n.transition-button {\nbackground-color: #3498db;\ntransition: background-color 0.3s;\n}\n.transition-button:hover {\nbackground-color: #2ecc71;\n}\n```\n\n## 22. CSS 애니메이션\n\n<div class=\"content-ad\"></div>\n\n문제: 요소에 애니메이션 추가하기\n\n해결책: `@keyframes`을 사용하세요.\n\n```js\n@keyframes bounce {\n0%, 100% { transform: translateY(0); }\n50% { transform: translateY(-20px); }\n}\n.bounce {\nanimation: bounce 2s infinite;\n}\n```\n\n## 23. CSS 모양 아웃사이더들\n\n<div class=\"content-ad\"></div>\n\n문제: 비직사각형 모양 만들기.\n\n해결책: `clip-path`를 사용하세요.\n\n```js\n.clip-path {\nclip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\nbackground-color: #3498db;\nwidth: 200px;\nheight: 200px;\n}\n```\n\n## 24. 다크 모드\n\n<div class=\"content-ad\"></div>\n\n문제: 다크 모드 구현하기.\n\n해결책: CSS 변수와 미디어 쿼리 사용하기.\n\n```css\n:root {\n  --bg-color: #fff;\n  --text-color: #000;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --bg-color: #333;\n    --text-color: #fff;\n  }\n}\n\nbody {\n  background-color: var(--bg-color);\n  color: var(--text-color);\n}\n```\n\n## 25. CSS 카운터\n\n<div class=\"content-ad\"></div>\n\n문제: 카운터 만들기\n\n해결방법: `counter-reset` 및 `counter-increment`을 사용하세요.\n\n```css\n.counter-list {\n    counter-reset: section;\n}\n.counter-list li::before {\n    counter-increment: section;\n    content: \"섹션 \" counter(section) \": \";\n}\n```","ogImage":{"url":"/assets/img/2024-05-17-25CSSHacksEveryDeveloperShouldKnow_0.png"},"coverImage":"/assets/img/2024-05-17-25CSSHacksEveryDeveloperShouldKnow_0.png","tag":["Tech"],"readingTime":7},{"title":"리액트에서 화면 크기에 맞게 반응형으로 텍스트 크기 조정하기","description":"","date":"2024-05-17 21:22","slug":"2024-05-17-AdaptatextsizetoscreensizewithdifferentratioinReact","content":"\n\n현대 웹 개발의 중요한 측면 중 하나는 반응형 웹 디자인을 만드는 것입니다. 다양한 디바이스의 존재로 인해 텍스트가 다양한 화면 크기와 비율에서 가독성이 좋고 심미적으로 매력적으로 보이도록 하는 것은 어려운 과제일 수 있습니다. 이 기사에서는 React 애플리케이션을 다룰 때 다양한 화면 비율에 맞게 텍스트 크기를 동적으로 조정하는 실용적인 해결책에 대해 살펴보겠습니다.\n\n# 과제 이해하기\n\n서로 다른 크기와 모양의 화면에 완벽하게 맞는 텍스트 블록이 필요한 시나리오를 상상해보세요. 이는 너비에 맞추는 것뿐만 아니라 높이도 고려해야 합니다. 예를 들어, 여러 열로 구성된 큰 화면의 경우 텍스트는 사용 가능한 공간을 효과적으로 활용하기 위해 적응해야 합니다. 화면 너비에만 의존하는 미디어 쿼리는 화면의 더 높은 부분에 미사용 공간이 남아 작은 크기의 텍스트를 만들어낼 수 있습니다. 따라서 뷰포트의 너비와 높이를 모두 고려하는 보다 세밀한 접근 방식이 필요합니다.\n\n# 기본 사항:\n\n<div class=\"content-ad\"></div>\n\n솔루션으로 들어가기 전에 사용될 몇 가지 개념을 기본적으로 이해하는 것이 중요합니다.\n\n먼저, CSS 단위에 대해 설명하겠습니다. 그런 다음, 리액트 컴포넌트 생명주기에 대해 자세히 알아보겠습니다. 리액트를 프레임워크로 사용하고 있지만, 동일한 원칙은 어떤 프레임워크 없이 순수한 JavaScript(프레임워크 없는 JavaScript)로도 적용할 수 있습니다.\n\n## CSS 단위 이해\n\n이 도전 과제를 효과적으로 해결하기 위해 CSS 단위에 대한 명확한 이해가 중요합니다. CSS 단위는 반응형 디자인의 구성 요소입니다. 다음은 가장 일반적으로 사용되는 몇 가지 단위입니다:\n\n<div class=\"content-ad\"></div>\n\n- 픽셀 (px): 화면에서 하나의 픽셀을 나타내는 가장 기본적인 단위입니다. 다른 요소에 따라 변경되지 않는 절대적인 단위입니다.\n- 뷰포트 너비 (vw): 이 단위는 뷰포트의 너비(브라우저 창의 가시 영역)의 1%에 대한 상대적인 값입니다. 예를 들어, 뷰포트가 1000px 너비라면 1vw는 10px입니다.\n- 뷰포트 높이 (vh): vw와 유사하지만 뷰포트의 높이에 상대적입니다. 따라서 1vh는 뷰포트 높이의 1%입니다.\n- 퍼센트 (%): 이 단위는 부모 요소의 크기에 상대적입니다. 레이아웃에 자주 사용되지만 텍스트에는 조심해야 합니다.\n- em과 rem: 이것들은 글꼴 상대적 크기입니다. em은 요소의 글꼴 크기에 상대적이며 rem은 루트 요소의 글꼴 크기에 상대적입니다.\n\n## 리액트 컴포넌트와 라이프사이클\n\n리액트는 개발자들이 재사용 가능한 UI 컴포넌트를 만들 수 있도록 합니다. 우리의 맥락에서, 우리는 함수형 컴포넌트를 다룰 것입니다.\n\n리액트 컴포넌트에는 라이프사이클이라고 하는 것이 있습니다 — 컴포넌트의 생성부터 언마운트까지 일련의 이벤트가 발생합니다. useState와 같은 훅을 사용하여 상태 관리하거나 window 크기 조정과 같은 부수 효과에 대응하기 위한 useEffect를 통해, 리액트는 동적 행위를 다루는 강력한 방법을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# useState\n\nuseState은 React에서 함수 컴포넌트에 상태를 추가할 수 있게 해주는 훅(React의 특별한 함수)입니다. 기본적으로 함수에 인자로써 사용되며, 컴포넌트의 어떤 측면을 변경할 수 있게 합니다. 예를 들어, 숫자를 표시하는 페이지가 있고 이 숫자를 증가시킬 수 있는 두 개의 버튼이 있다고 가정해보세요. 숫자는 상태여야만 컴포넌트를 재구성할 수 있습니다.\n\nuseState은 값을 반환하고 값을 설정하는 함수를 제공합니다. 아래의 예시에서 \"Increase\"를 클릭할 때마다, 숫자를 1씩 증가시키기 위해 update 함수인 setNumber를 호출합니다. 숫자가 상태에 저장되어 있기 때문에 React는 변경될 때마다 업데이트된 점수로 컴포넌트를 다시 렌더링해야 함을 압니다. 이를 통해 표시가 현재 점수와 동기화됩니다. useState가 없다면 버튼을 클릭해도 페이지의 숫자가 변경되지 않을 것입니다.\n\n```js\nimport {useState} from React\n\nconst Scoreboard = () => {\n\nconst [number, setNumber] = useState(0);\n\nreturn(<>\n  <button onClick={() => setNumber(number + 1)}>Increase</button>\n  <p>{number}</p>\n</>\n)\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# useEffect\n\nReact에서 작업할 때, 코드는 해석적이 아닙니다. 즉, 어떤 코드가 실행되고 있는지 정확히 알 수 없다는 것을 의미합니다. 때로는 어떤 계산을 수행하기 전에 모든 것이 렌더링되었는지 확인해야 할 수도 있습니다. 이럴 때 useState가 유용합니다.\n\n웹페이지가 숫자를 표시하고 해당 숫자를 증가시키거나 감소시키는 버튼으로 제어되는 예제를 계속해 보겠습니다. 만약 이 숫자가 변경될 때마다 특정 작업이나 계산을 수행하고 싶다면, 예를 들어 해당 숫자를 로깅하거나 UI의 다른 부분을 업데이트하는 경우입니다.\n\n## 숫자 표시 예제\n\n<div class=\"content-ad\"></div>\n\n```js\nuseEffect(() => {\n  // 이 코드는 `number`가 업데이트된 후에 실행됩니다\n  console.log(\"숫자가 변경되었습니다:\", number);\n  // 이 숫자를 기반으로 다른 것을 업데이트하고 싶을 수도 있습니다\n  // 예를 들어, 숫자가 짝수인지 홀수인지에 따라 배경색을 변경할 수 있습니다\n  if (number % 2 === 0) {\n    document.body.style.backgroundColor = \"lightblue\";\n  } else {\n    document.body.style.backgroundColor = \"lightpink\";\n  }\n}, [number]); // 이는 React에게 `number`가 변경될 때 효과를 실행하도록 알려줍니다\n```\n\n이 코드에서는 useEffect가 숫자 상태를 관찰합니다. 숫자가 변할 때(버튼 클릭으로 인해), useEffect는 코드를 실행합니다. 현재 숫자를 기록하고 숫자가 짝수인지 홀수인지에 따라 배경색을 변경합니다. useEffect는 useState 계산 후에 함수가 실행되도록 보장합니다. 버튼의 onClick 핸들러 안에서 setNumber를 호출한 직후 동작을 수행하려고 하면 문제가 발생할 수 있습니다. 상태 업데이트(setNumber)는 즉시 발생하지 않습니다. React가 일정에 따라 예약되기 때문에 실제로 상태가 변경되기 전에 후속 코드가 실행될 수 있어 예상치 못한 동작을 유발할 수 있습니다. useEffect는 React가 새로운 상태로 구성 요소를 업데이트한 후에만 내부 코드가 실행되도록 보장하여 이 문제를 해결합니다.\n\n# 해결 방법:\n\n우리는 React에서 useState와 useEffect 훅을 사용하여 viewport 너비 (vw) 및 높이 (vh)의 변경에 따라 적응하는 반응형 텍스트 크기를 만들어 보겠습니다. 아래는 단계별 가이드입니다:\n\n\n<div class=\"content-ad\"></div>\n\n## 단계 1: 상태 설정하기\n\n먼저, useState를 사용하여 텍스트 스타일의 초기 상태를 정의합니다. 이 상태는 글ꔼ 크기, 줄 높이 및 글ꔼ 굵기를 보관합니다.\n\n```js\nconst [paragraphStyle, setStyle] = useState({\n  fontSize: \"3vw\",\n  lineHeight: \"4vw\",\n  fontWeight: \"100\",\n});\nconst [catchSentenceStyle, setCatchSentenceStyle] = useState({\n  fontSize: \"7vw\",\n  lineHeight: \"9vw\",\n  fontWeight: \"600\",\n});\n```\n\n## 단계 2: 글ꔼ 크기 동적으로 계산하기\n\n<div class=\"content-ad\"></div>\n\n우리는 viewport의 너비와 높이에 기반하여 동적으로 글꼴 크기를 계산하는 updateStyle 함수를 생성합니다.\n\n```js\nconst updateStyle = () => {\n  const vw = window.innerWidth * 0.0095;\n  const vh = window.innerHeight * 0.0095;\n  const responsiveSize = vh + vw;\n  const cresponsiveSize = responsiveSize * 3.5;\n```\n\n```js\n  // 화면 비율에 따른 추가 조정 적용을 위해 주석을 해제하세요\n  // if (screenRatio < 0.74 && screenRatio > 0.5) {\n  //   responsiveSize = responsiveSize * 1.3 * screenRatio;\n  //   cresponsiveSize = cresponsiveSize * 1.3 * screenRatio;\n  // }\n  setStyle({\n    fontSize: responsiveSize + \"px\",\n    lineHeight: responsiveSize * 1.3 + \"px\",\n    fontWeight: \"100\",\n  });\n  setCatchSentenceStyle({\n    fontSize: cresponsiveSize + \"px\",\n    lineHeight: cresponsiveSize * 1.1 + \"px\",\n    fontWeight: \"100\",\n  });\n};\n```\n\n## 단계 3: 창 크기 조정에 대한 응답\n\n<div class=\"content-ad\"></div>\n\nuseEffect 훅은 컴포넌트가 마운트될 때와 창 사이즈가 조정될 때 updateStyle을 호출하기 위해 사용됩니다.\n\n```js\nuseEffect(() => {\n  updateStyle();\n  window.addEventListener(\"resize\", updateStyle);\n  return () => window.removeEventListener(\"resize\", updateStyle);\n}, []);\n```\n\n## 단계 4: 스타일 적용\n\n마지막으로, 이 스타일을 컴포넌트의 텍스트 요소에 적용합니다.\n\n<div class=\"content-ad\"></div>\n\n```html\n<div\n  style={\n    padding: \"8vh 8vw\",\n    // additional styles...\n  }\n>\n  <p style={catchSentenceStyle}>Catchy sentence here.</p>\n  <p style={paragraphStyle}>Detailed paragraph here.</p>\n  {/* Additional paragraphs... */}\n</div>\n```\n\n이 솔루션을 통해 텍스트가 다양한 화면 비율에서 스케일링되며, 좋은 글꼴 크기로 조정되어 윈도우 높이 및 폭에 모두 적응합니다.\n\n# 결론\n\n텍스트 크기를 다른 화면 크기에 맞게 조정하는 것은 반응형 웹 디자인의 중요한 측면입니다. React의 useState 및 useEffect 훅을 활용하여 개발자는 화면 너비뿐만 아니라 높이에도 조절되는 텍스트를 생성할 수 있으며, 가독성과 화면 공간의 최적 활용을 보장합니다. 이 접근 방식은 다양한 장치와 화면 크기에 걸쳐 사용자 경험을 향상시킵니다.\n\n\n<div class=\"content-ad\"></div>\n\n이제 이러한 개념을 이해했으니, 2600px에서처럼 응용 프로그램에서 특정 브레이크포인트를 관리하는 방법에 접근할 수 있습니다. 이는 주방에 특별한 규칙이 있는 것과 같습니다: \"2600 명 이상의 고객이 있을 때 다른 메뉴로 전환해야 합니다.\" 웹 개발에서 브레이크포인트는 웹사이트 레이아웃이 다른 화면 크기나 방향에 맞게 변경되는 지점을 의미합니다.\n\n우리의 예시 컴포넌트에서 2600px에서의 브레이크포인트를 관리하는 것은 updateStyle 함수에서 화면 너비를 확인하고 너비가 2600px를 초과할 때 스타일을 조정하는 조건을 설정하는 것을 포함합니다. 이는 화면이 커지더라도 텍스트 크기와 레이아웃이 최적이며 가독성이 유지되도록 보장하며, 항상 우리 메뉴가 고객 수에 적합한지 확인하는 것과 같은 역할을 합니다. 이 도전에 도전해 보고 결과를 게시해보세요!","ogImage":{"url":"/assets/img/2024-05-17-AdaptatextsizetoscreensizewithdifferentratioinReact_0.png"},"coverImage":"/assets/img/2024-05-17-AdaptatextsizetoscreensizewithdifferentratioinReact_0.png","tag":["Tech"],"readingTime":7},{"title":"HTML, CSS 및 Javascript를 사용한 최고의 멋진 슬라이더 효과 만드는 방법","description":"","date":"2024-05-17 21:21","slug":"2024-05-17-CreateATopCrazySliderEffectsUsingHTMLCSSandJavascript","content":"\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1140/1*5lwNm-FVTRS5eGwUvm8Hbw.gif\" />\n\n웹사이트의 사용자 경험을 크게 향상시킬 수 있는 멋진 상호작용 슬라이더를 만들어보세요. 이 기사에서는 HTML, CSS 및 JavaScript를 사용하여 최고 수준의 멋진 슬라이더 효과를 구축하는 과정을 안내합니다. 초보자든 숙련된 개발자든 상관없이 이 자습서를 통해 시각적으로 매력적이고 매우 기능적인 슬라이더를 만들 수 있을 것입니다.\n\n이 쉽게 이해할 수 있는 비디오를 시청해보세요 🙏😁\n\n## 단계 1: HTML 구조 설정\n\n<div class=\"content-ad\"></div>\n\n먼저, 슬라이더의 기초 역할을 하는 간단한 HTML 구조가 필요합니다. 다음은 설정 방법에 대한 예시입니다:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Top Slider</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <link href=\"https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css\" rel=\"stylesheet\" />\n</head>\n\n<body>\n    <div class=\"gallery-wrap\">\n\n        <div class=\"gallery\">\n            <div>\n                <span><img src=\"./images/image-1.png\" alt=\"\"></span>\n                <span><img src=\"./images/image-2.png\" alt=\"\"></span>\n                <span><img src=\"./images/image-3.png\" alt=\"\"></span>\n                <span><img src=\"./images/image-4.png\" alt=\"\"></span>\n                <span><img src=\"./images/image-5.png\" alt=\"\"></span>\n                <span><img src=\"./images/image-6.png\" alt=\"\"></span>\n            </div>\n\n        </div>\n\n        <div class=\"Btn-group\">\n            <span><i id=\"topBtn\" class=\"ri-arrow-up-fill\"></i></span>\n            <span><i id=\"downBtn\" class=\"ri-arrow-down-fill\"></i></span>\n        </div>\n    </div>\n\n    <script src=\"app.js\"></script>\n</body>\n\n</html>\n```\n\n## 단계 2: CSS로 스타일링\n\n다음은 슬라이더를 CSS로 스타일링하여 멋지게 보이고 원활하게 작동하도록하는 샘플 CSS 코드입니다:\n\n<div class=\"content-ad\"></div>\n\n```css\n*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\nhtml,body {  \n    height: 100vh;\n    width: 100%;\n    background-color: #191919;\n    overflow: hidden;\n}\n.gallery-warp{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 10% auto;\n    flex-direction: column;\n}\n.gallery{\n    display: flex;\n    width: 27%;\n    height: 587px;\n    overflow-y: scroll;\n}\n.gallery::-webkit-scrollbar{\n    display: none;\n}\n.gallery div{\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n}\n.gallery div img{\n    filter: grayscale(100%);\n    width: 100%;\n    transition: transform 0.5s;\n}\n.gallery div img:hover{\n    filter: grayscale(0);\n    cursor: pointer;\n    transform: scale(1.1);\n}\n.Btn-group{\n    margin-top: 1rem;\n    display: flex;\n    gap: 18px;\n}\n.Btn-group span i{\n    padding: 4px 4px;\n    border: 1px solid;\n    font-size: 24px;\n    color: #fff;\n    border-radius: 20px;\n    cursor: pointer;\n    transition: all ease-in-out 0.8s;\n}\n.Btn-group span i:hover{\n    background-color: #fff;\n    color: #191919;\n    border: none;\n}\n```\n## Step 3: Adding JavaScript for Functionality\n\nFinally, add JavaScript to bring the slider to life. This script will handle the slide transitions and navigation functionality:\n\n```js\nlet scrollContainer = document.querySelector(\".gallery\");\nlet topBtn = document.getElementById(\"topBtn\")\nlet downBtn = document.getElementById(\"downBtn\");\n\nscrollContainer.addEventListener(\"wheel\", (e) => {\n    e.preventDefault();\n    scrollContainer.style.scrollBehavior = \"auto\";\n    scrollContainer.scrollTop += e.deltaY;\n})\n\ntopBtn.addEventListener(\"click\", () => {\n    scrollContainer.style.scrollBehavior = \"smooth\";\n    scrollContainer.scrollTop += 610;\n})\ndownBtn.addEventListener(\"click\", () => {\n    scrollContainer.style.scrollBehavior = \"smooth\";\n    scrollContainer.scrollTop -= 600;\n})\n```\n\n<div class=\"content-ad\"></div>\n\n# 향상 및 고급 기능\n\n비디오에서 기본 슬라이더에 추가할 수 있는 가능한 향상 방안을 제안합니다:\n\n- 3D 전환: CSS 변형을 이용하여 슬라이드 전환에 3D 효과를 추가합니다.\n- Parallax 효과: 패럴랙스 스크롤링을 구현하여 깊이 효과를 부여합니다.\n- 고급 애니메이션: GSAP(그린속 애니메이션 플랫폼)과 같은 라이브러리를 사용하여 더 복잡한 애니메이션을 만듭니다.","ogImage":{"url":"/assets/img/2024-05-17-CreateATopCrazySliderEffectsUsingHTMLCSSandJavascript_0.png"},"coverImage":"/assets/img/2024-05-17-CreateATopCrazySliderEffectsUsingHTMLCSSandJavascript_0.png","tag":["Tech"],"readingTime":4},{"title":"css 애니메이션을 위한 베지에 곡선(Bezier Curves) 이해하기","description":"","date":"2024-05-17 21:20","slug":"2024-05-17-UnderstandingBzierCurves","content":"\n\n![Understanding Bézier Curves](/assets/img/2024-05-17-UnderstandingBzierCurves_0.png)\n\n베지에 곡선은 어디에나 있어요. 당신의 CSS 애니메이션 타이밍 함수부터 그래픽 편집기, 타이포그래피, 자동차 디자인 등등 많은 곳에서 사용돼요. 부드러운 곡선을 모델링하려면, 아마도 베지에 곡선을 사용하게 될 거에요.\n\n저에게는 이러한 곡선들이 개발자로서 일상생활에 수학적 영향을 직접 보여주는 완벽한 예이에요. 우리가 추상화의 산천 아래에 무엇이 있는지 정확하게 이해하길 바라는 것은 아니더라도, (저는 확실히 하고 싶지 않지만) 약간의 관심을 가지고 깊게 이해하면 가치가 있다고 생각해요.\n\n이 글의 목표는 바로 이에요. 이후에 베지에 곡선이 정확히 무엇인지, 왜 사용하는지, 어떻게 동작하는지에 대한 수학적이고 직관적인 이해를 가지게 될 거에요.\n\n<div class=\"content-ad\"></div>\n\n# 베지에 곡선이란?\n\n베지에 곡선은 매개변수 곡선으로 (매개변수 t가 0부터 1까지 변하는) 제어점 세트에 의해 정의된 곡선입니다. 이러한 점들 간의 위치는 곡선의 모양을 정의합니다.\n\n![베지에 곡선](/assets/img/2024-05-17-UnderstandingBzierCurves_1.png)\n\n만약 Adobe Illustrator나 Figma와 같은 그래픽 편집 소프트웨어를 사용해본 적이 있다면, 이미 이러한 제어점들이 어떻게 작용하는지 보았을 겁니다. 아래 gif에서 각 점이 움직일 때 곡선의 모양이 그에 따라 어떻게 변하는지 주목해보세요.\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*j6VPAteSfVSRWswKIeQtPw.gif)\n\nYou can also use as many control points as you like. The more control points you add, the greater the control you have over the final shape of your curve. As an example, the cubic-bezier function in CSS uses a bézier curve with 4 points (hence cubic) that describe the evolution of your animation.\n\n## What’s going on?\n\nThat’s great and all, but how do we get a curve from just positioning a bunch of points around?\n\n\n<div class=\"content-ad\"></div>\n\n그 답은 베지에 곡선의 수학적 기초인 버네스타인 다항식에 있습니다. n차 버넨스타인 다항식은 각각 버넨스타인 계수에 의해 곱해진 버넨스타인 기저 다항식의 합으로 정의됩니다.\n\n![그림 1](/assets/img/2024-05-17-UnderstandingBzierCurves_2.png)\n\n![그림 2](/assets/img/2024-05-17-UnderstandingBzierCurves_3.png)\n\n이러한 공식들에 집착하지 마세요. 필요한 것은 이 중에서 몇 가지 주요한 점뿐이에요.\n\n<div class=\"content-ad\"></div>\n\n먼저, 그들의 목적이 무엇인가요? 얼마나 간략하게 말씀드릴까요? Bernstein 다항식은 처음에는 닫힌 구간 내의 임의의 연속 함수를 근사화하는 방법으로 사용되었습니다 (자세한 내용은 Stone-Weierstrass 정리를 참조하세요). 다시 말해, 이러한 다항식을 사용함으로써 우리는 원하는 거의 모든 함수(어떤 곡선도 모델링 가능)를 근사화할 수 있습니다. 이는 다항식이 일반적으로 다른 유형의 함수보다 훨씬 간단하게 계산하고 조작할 수 있기 때문에 정말 유용합니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:440/1*hoKuMOP-U-V2RSLGzwvatg.gif)\n\n둘째, 이 근사화는 정확히 어떻게 일어날까요? Bernstein 계수를 기억하시나요? 그것이 그들의 역할입니다! 수식에서 기저 다항식이 항상 같은 것을 주목하세요 (차수 n에 따라만 달라집니다) - 계수가 실제로 대상 함수를 근사하는 역할을 합니다. 함수 f를 근사하는 정확한 공식은 다음과 같습니다:\n\n![이미지](/assets/img/2024-05-17-UnderstandingBzierCurves_4.png)\n\n<div class=\"content-ad\"></div>\n\n베지에 곡선이 정확히 무엇인가요? 베르슈타인 다항식이며, 여기서 베르슈타인 계수는 제어점이 됩니다! 따라서 베지에 곡선을 구축할 때 우리는 사실적인 함수를 근사하는 것이죠! 이것은 베르슈타인 다항식의 직접적인 응용입니다.\n\n이것이 바로 베지에 곡선의 명시적/수학적 정의라고 알려진 것입니다. 이제 살펴볼 또 다른 방법으로는 베지에 곡선을 볼 때 더 강력하고 직관적인 방식이 있습니다.\n\n# 다른 접근 방법\n\n베지에 곡선에는 각각의 차수(제어점 수)에 따라 구분되는 몇 가지 유명한 형식이 있습니다. 선형, 이차 및 삼차 베지에 곡선이 그 중 몇 가지입니다. 이 주제를 공부할 때, 베르슈타인 다항식에 기반한 공식을 적용하여 얻을 수 있는 이들의 공식을 아마도 만날 것입니다.\n\n<div class=\"content-ad\"></div>\n\n![UnderstandingBézierCurves_5](/assets/img/2024-05-17-UnderstandingBzierCurves_5.png)\n\n다시 말하지만, 이러한 공식에 집착하지 마세요. 이 중요한 점 하나만 기억하면 됩니다.\n\n선형 베지어 곡선의 수식에 주목하세요. (1-t)와 t가 어떤 것의 곱으로 나타나는 것을 주의깊게 살펴보세요. 맥락 없이는 그저 기본적인 선형 함수일뿐입니다. 그러나 이차 공식에서 약간 이동하면 어떻게 되는지 살펴보세요:\n\n![UnderstandingBézierCurves_6](/assets/img/2024-05-17-UnderstandingBzierCurves_6.png)\n\n<div class=\"content-ad\"></div>\n\n패턴 (1-t) 및 t가 반복됩니다. 우리는 이차 곡선 P0P1P2를 (1-t) * (베지에(P0P1)) + t * (베지에(P1P2))로 표현하고 있습니다. (다양한 종류의 베지에 곡선이 있는 이전 이미지로 돌아가서 제어점을 연결하는 선에 주목해주세요). 실제로 이를 높은 차수의 곡선에 대해 테스트해보면 그것이 성립함을 볼 수 있습니다. 여기서 새로운 재귀적인 방법으로 베지에 곡선을 정의할 수 있습니다:\n\n![image](/assets/img/2024-05-17-UnderstandingBzierCurves_7.png)\n\n또한 수학적 정의 (버너스타인 다항식)에서 비롯된 원래 방식과 다른 베지에 곡선의 점을 평가하는 새로운 방법을 얻을 수 있습니다.\n\n우리가 이차 베지에 곡선에서 t=0.5 지점을 계산하려고한다고 상상해보세요. 방금 본 바와 같이, 우리는 이 곡선을 P0, P1 및 P1, P2가 되는 두 개의 선형 베지에 곡선으로 표현할 수 있습니다. 새로운 재귀 공식에 0.5를 대입함으로써, 우리는 P0P1 선상의 t=0.5를 계산하고, 다음으로 P1P2 선상의 t=0.5를 계산합니다. 이로서 우리는 두 개의 새로운 점을 얻게 되는데, 이 두 중간점을 다시 다른 선으로 연결하고 (더 작은 차수의 곡선을 곱하는 (1-t) 및 t를 기억하세요) t=0.5의 최종 위치를 계산할 수 있게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n현재 상황을 시각화해 드릴게요:\n\n![Visualization 1](https://miro.medium.com/v2/resize:fit:480/1*MTvJLHEDRpAcAFY25iQeww.gif)\n\n각 평가된 지점 t마다, 먼저 작은 차수 곡선들 각각에서 이를 계산한 후 이들을 연결하여 결과 선상에서 원하는 지점을 계산합니다. 이러한 패턴은 더 높은 곡선들에서도 반복됩니다:\n\n![Visualization 2](https://miro.medium.com/v2/resize:fit:480/1*NUV8KWFfKmevb_Z_L2A1hQ.gif)\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:480/1*jFpYqpzDRr0F6HppPpr9kA.gif)\n\n이것을 이해하는 것은 중요합니다. 왜냐하면 Bézier 곡선을 공부할 때 항상 나오는 특별한 주제인 De Casteljau 알고리즘의 설명이기 때문입니다.\n\n## De Casteljau의 알고리즘\n\n이 알고리즘은 곡선의 각 점을 평가하기 위해 이 재귀적 정의를 사용합니다. 이는 계산을 단계별로 나누며, 첫 번째 단계에는 개별 제어점이 있고, 최종 단계에는 원하는 점이 있으며, 중간 단계에는 재귀적 정의를 통해 계산하는 모든 중간 점들이 있습니다. 어떻게 3차 곡선에서 작동하는지 살펴봅시다:\n  \n\n<div class=\"content-ad\"></div>\n\n\n![UnderstandingBzierCurves_8](/assets/img/2024-05-17-UnderstandingBzierCurves_8.png)\n\n따라서, 레벨 0의 각 포인트가 제어 포인트 자체임을 감안할 때, 레벨 j의 임의의 점 Pi에 대해, De Casteljau 알고리즘은 해당 값이 다음과 같을 것을 알려줍니다:\n\n![UnderstandingBzierCurves_9](/assets/img/2024-05-17-UnderstandingBzierCurves_9.png)\n\n언제나, 이것이 베지에 곡선에서 재귀 패턴을 사용하고 있다는 점을 기억해 주세요. 이는 버너스타인 다항식에서 유도되었습니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 왜 베지에 곡선인가요?\n\n우리가 베지에 곡선에 대해 이야기한 모든 것을 고려할 때, 그것들이 왜 중요한 것인지 궁금하십니까? 왜 우리는 그것들을 이렇게 많이 사용하는 걸까요?\n\n기본적으로 이들은 무한대로 확장 가능한 곡선을 작성하는 방법입니다. 우리는 원하는 대로 세부적으로 만들 수 있기 때문에, 수퍼 고차 커브를 만들지 않고 작은 차수의 커브를 이어붙이기만 하면 거의 모든 원하는 커브를 얻을 수 있습니다.\n\n타이포그래피의 대표적인 예를 들어보겠습니다. 베지에 곡선은 우리에게 간단한 고정폭 서체에서부터 아름다운 표시 서체까지 다양한 서체를 만들 수 있게 해줍니다!\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-17-UnderstandingBzierCurves_10.png\" />\n\n# 마무리\n\n이 글에서 배운 모든 것을 요약해보면:\n\n- Bézier 곡선은 제어점 집합에 의해 정의된 매개변수 곡선입니다.\n- 그들의 수학적 기원은 Bernstein 다항식에서 왔는데, 이것은 실제 함수를 근사하는 방법입니다.\n- Bézier 곡선은 제어 점이 Bernstein 계수 자리를 차지하는 Bernstein 다항식입니다.\n- Bézier 곡선은 재귀적이며, Pn 점으로 된 각 Bézier는 Bézier 곡선 P0Pn-1 및 P1Pn의 선형 보간(선)으로 나타낼 수 있습니다.\n- De Casteljau 알고리즘은 임의의 Bézier 곡선의 점을 계산하기 위해 이 재귀 관계를 사용합니다.\n- Bézier 곡선은 무한대로 확장이 가능하며, 원하는 거의 모든 곡선을 만들 수 있게 해줍니다.","ogImage":{"url":"/assets/img/2024-05-17-UnderstandingBzierCurves_0.png"},"coverImage":"/assets/img/2024-05-17-UnderstandingBzierCurves_0.png","tag":["Tech"],"readingTime":6}],"page":"71","totalPageCount":154,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":3},"__N_SSG":true}