{"pageProps":{"posts":[{"title":"게임패드 API로 놀아보기","description":"","date":"2024-05-01 23:18","slug":"2024-05-01-PlayingwiththeGamePadAPI","content":"\n\n![게임패드API](/assets/img/2024-05-01-PlayingwiththeGamePadAPI_0.png)\n\n저는 게이머가 아닙니다. 한 때 인생에서 일종의 게이머였을 수도 있지만 더 이상 그렇지 않습니다. 그때조차도 제 능력은 그다지 대단하지 않았죠. 그럼에도 불구하고, 컴퓨터에서 게임패드를 사용하도록 나를 격려한 두 가지 사건이 있었습니다. 첫 번째는 90년대/2000년 초반의 비디오 게임을 하면서 느꼈던 향수로, 라즈베리 파이, 케이스와 몇 개의 컨트롤러를 구입하여 RetroPie를 만들어 가는 개인 프로젝트로 이어졌습니다.\n\n두 번째는 \"심심함\"의 오후였습니다. 무언가 개발하고 싶었지만 아이디어가 바닥나 있었죠. 그래서 새로운 것을 탐험하기로 결심했습니다. MDN의 웹 API 페이지로 이동해보니, g로 시작하는 항목 가운데 뭔가 눈에 띄는 것이 있었습니다: 게임패드 API.\n\n# 호기심은 고양이를 죽인다...\n\n<div class=\"content-ad\"></div>\n\n게임패드를 액세스하고 제어하기 위한 표준 API? 그리고 \"실험적으로\" 나열되어 있더라도 모든 주요 브라우저에서 지원된다고? 예상치 못했지만 흥미로운 일이네요. 제 호기심을 자극했어요.\n\n컴퓨터, 게임 컨트롤러, 자바스크립트 지식, 그리고 몇 시간의 여유시간이 있었어요... 무얼 잃을까요?\n\n첫 페이지를 읽은 후에, 굉장히 간단해 보였어요: 상호작용, 이벤트, 그리고 메소드로 놀 수 있는 수줄. 제가 다룰 수 없는 것은 없다고 생각했죠...라고 생각했어요. MDN 튜토리얼로 이동해서 첫 코드 예제를 조금 단순화했어요:\n\n```js\nwindow.addEventListener(\"gamepadconnected\", function() {\n  console.log(\"게임패드가 연결되었습니다\");\n});\n```\n\n<div class=\"content-ad\"></div>\n\n페이지가 브라우저에 로드되었고, 기분 좋게 RetroPie 컨트롤러를 컴퓨터에 연결했는데...\n\n아무 반응이 없었어요.\n\n게임패드를 뽑았다가 다시 꽂아보았지만...\n\n아무 반응이 없네요.\n\n<div class=\"content-ad\"></div>\n\n언플러그. 다시 연결했어요.\n\n아무 변화가 없더라구요.\n\n게임패드를 콘솔 옆 올바른 위치로 되돌리려던 찰나에 다른 작업으로 넘어가기 전에 몇 개의 버튼을 눌렀더니, 무언가 일어났어요. 콘솔에 메시지가 표시되었죠:\n\n```js\n게임패드가 연결되었습니다\n```\n\n<div class=\"content-ad\"></div>\n\n페이지를 새로고침하고 버튼을 눌렀더니 콘솔에 다시 \"게임패드 연결됨\" 메시지가 나타났어요. 게임패드 API에 대해 많은 교훈 중 첫 번째를 배웠어요: 모든 컨트롤러가 컴퓨터에 연결되자마자 브라우저에 연결되는 것은 아니라는 거죠. 대부분은 버튼을 누르거나 조이스틱을 움직이지 않으면 활성화되지 않아요.\n\n# 시작하기: 무엇이 지원되나요?\n\n지금 Chrome이 지원하는 Gamepad API를 알았으니, 다음 단계는 다른 브라우저 운영체제에서 테스트해보는 거예요. 맥과 윈도우, 다른 브라우저, 다른 운영체제에서 같은 브라우저까지 시도해봤는데, 실험적인 API인데도 널리 지원되고 있어요. 심지어 윈도우의 Edge에서도 작동돼요!\n\n![게임패드 API 사용](/assets/img/2024-05-01-PlayingwiththeGamePadAPI_1.png)\n\n<div class=\"content-ad\"></div>\n\n일부 기능은 이전 버전에서도 사용할 수 있을 수도 있어요. 그럼에도 불구하고, 이 글에서 언급된 모든 기능은 위 표에 나타난 브라우저를 필요로 해요 (진동을 제외한 경우, 지원이 일관되지 않을 수 있습니다. 곧 자세히 살펴볼게요).\n\n다음으로 생각한 것은: 이를 어떤 컨트롤러와 함께 사용할 수 있을까요? 나는 RetroPie와 함께 제공된 후조품 게임패드를 사용해봤지만, PS1, PS2, PS3, 그리고 Xbox One용 컨트롤러도 있었어요. (사실, 게이머가 아니라고 주장하는 사람으로서 너무 많은 콘솔을 가지고 있군요.) 원래 콘솔 컨트롤러도 작동할까요?\n\n간단한 대답: 네.\n\n자세한 대답: 일부는 작동하고, 일부는 작동하지 않아요. 예를 들어, PlayStation 컨트롤러(버전에 상관없이)나 닌텐도 스위치 컨트롤러는 문제가 없었어요. 몇몇 친구들이 Wii 컨트롤러도 데모 페이지에서 테스트해보고, 그것도 원활하게 작동했어요. 그러나 Xbox 컨트롤러는 다른 이야기였어요. 그들이 더 많은 전원이 필요할 수도 있고, 우리가 테스트한 버전이 올바르지 않았을 수도 있어요. 하지만, 우리는 그 중 어떤 것도 작동시키지 못했어요.\n\n<div class=\"content-ad\"></div>\n\n... 흥미로운 사실이죠. 모조 게임패드는 모두 훌륭하게 작동했는데, 나중에 설명할 몇 가지 주의할 점이 있어요.\n\n# 게임패드 인터페이스\n\n다음 단계는 예제를 확장하고 게임패드 인터페이스를 탐색하는 것이었어요. gamepadconnected 이벤트가 연결된 게임패드 정보를 콜백 함수의 매개변수로 전달한다는 것을 알았죠. 이 정보를 볼 수 있게 객체를 기록해봤어요:\n\n```js\nwindow.addEventListener(\"gamepadconnected\", function(e) {\n  console.log(\"게임패드가 연결되었습니다.\");\n  console.log(e.gamepad);\n});\n```\n\n<div class=\"content-ad\"></div>\n\n게임패드 인터페이스의 정의와 일치하는 결과를 기대했었어요:\n\n```js\ninterface Gamepad {\n  id: String,\n  index: Long,\n  connected: Boolean,\n  timestamp: Timestamp,\n  mapping: enum(\"standard\", \"\"),\n  axes: Array<double>,\n  buttons: Array<GamepadButton>\n}\n```\n\n하지만 결과물에는 약간 희망적으로 보이는 추가 정보가 포함되어 있었어요:\n\n```js\n{\n  id: \"USB 게임패드            (제조사: 081f 제품: e401)\",\n  index: 0,\n  connected: true,\n  timestamp: \"2007.0849999901839\"\n  mapping: \"\",\n  vibrationActuator: null,\n  axes: [-0.003921568393707275, -0.003921568393707275],\n  buttons: [\n    {pressed: false, touched: false, value: 0},\n    {pressed: true, touched: true, value: 1},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0}\n  ]\n}\n```\n\n<div class=\"content-ad\"></div>\n\n아래와 같은 표에서 찾을 수 있습니다:\n\n- id는 컨트롤러의 모델/유형을 식별하는 문자열입니다.\n- index는 연결 시 할당된 게임패드의 고유 식별자입니다 (기본적으로 연결된 순서).\n- connected는 게임패드의 상태를 나타냅니다.\n- timestamp는 게임패드가 연결된 시간이 아니라 게임패드 데이터가 마지막으로 업데이트된 시간을 나타냅니다.\n- mapping은 버튼 매핑이 표준인지 아닌지를 지정하는데, 다음 섹션에서 자세히 설명하겠습니다.\n- axes는 게임패드의 다양한 축/조이스틱의 값이 들어 있는 배열입니다. 나중에 설명하겠습니다.\n- buttons는 버튼들의 배열입니다.\n\n아직 명확히 알지 못한 것들도 있었습니다: 연결된 게임패드에는 10개의 버튼과 2개의 축이 나타났지만, 물리적 장치를 보니 12개의 버튼과 축이 없었습니다. 조금 이상했습니다. 곧 왜 이런 일이 발생했는지 알게 되겠죠.\n\n한편, 게임패드 인터페이스에 익숙해지던 중 재미있는 부분에 대비했습니다.\n\n<div class=\"content-ad\"></div>\n\n# 버튼\n\n게임패드가 연결되었거나 연결이 해제되었을 때를 감지하고 그 값과 속성을 읽어낼 수 있어요. 하지만 그 자체로는 실용적이지 않아요. 더 흥미로운 것으로 넘어갈 거예요.\n\n방금 Gamepad 객체에는 버튼들의 배열을 포함하는 buttons 속성이 있다는 것을 보았어요. 이 버튼들은 자체 인터페이스(GamepadButton)를 가지고 있는데, 이는 세 가지 읽기 전용 값이 있는 개체입니다:\n\n```js\ninterface GamepadButton {\n  pressed: Boolean,\n  touched: Boolean,\n  value: Double\n}\n```\n\n<div class=\"content-ad\"></div>\n\n그들은 대개 스스로 설명되어 있어요:\n\n- pressed는 버튼이 눌렸는지 여부를 나타냅니다. 버튼이 눌린 동안에는 true가 됩니다.\n- touched는 버튼이 터치되었는지 여부를 나타냅니다. (모든 게임패드에 이 기능이 있는 것은 아닙니다.)\n- value는 아날로그 센서가 있는 버튼에 대한 것입니다. 이것은 버튼에 가해지는 압력의 양을 나타냅니다: 0.0은 전혀 눌리지 않음을 의미하고, 1.0은 완전히 눌린 것을 의미합니다.\n\n버튼은 아래 다이어그램에서 정의된 중요도 순서대로 배열에 정렬되어 있어서 쉽게 매핑할 수 있습니다:\n\n![다이어그램](/assets/img/2024-05-01-PlayingwiththeGamePadAPI_2.png)\n\n<div class=\"content-ad\"></div>\n\n하지만 모든 게임패드가 동일한 버튼/축 패턴을 따르지는 않아요. 그래서 버튼 매핑에 대해 알고 있어야 하는 것이 중요해요.\n\n## 매핑\n\n매핑은 브라우저가 컨트롤러를 올바르게 식별하고 매핑할 수 있는지를 나타내는 Gamepad 인터페이스의 속성이에요. 이 경우 매핑의 값은 \"standard\"가 될 거예요.\n\n제가 시험하고 작업한 대부분의 오리지널 컨트롤러들은 표준 매핑을 가졌어요. 내가 시도한 대부분의 짝퉁들은 표준 매핑을 갖지 않았어요. 이러한 경우에는 개발자가 눌린 버튼이 사용자의 기대와 일치하는지 확인해야 해요.\n\n<div class=\"content-ad\"></div>\n\n하지만 뭔가가 빠져 있는 것 같았어요. 버튼 중 하나를 눌렀을 때 트리거되는 이벤트를 볼 수 없었어요. 문서에도(오직 두 개의 이벤트만 나열되어 있는)나, 게임패드 객체에도 없었어요. 이제 튜토리얼과 문서를 계속 읽어봐야 할 시간이에요.\n\n# 이벤트 청취 vs 이벤트 쿼링\n\n이것은 제가 조금 더 이해하는 데 시간이 좀 걸렸던 부분 중 하나에요. 이미 Gamepad API 정의에서 두 가지 이벤트만 있는 걸 봤죠(gamepadconnected 및 gamepaddisconnected). 그리고 버튼에 이와 관련된 이벤트가 없어요... 그렇다면, 이벤트는 어떻게 작동할까요?\n\n간단하게 말하면, 작동하지 않아요... 왜냐하면 이벤트가 없기 때문이죠. 다른 API 및 요소들과 달리 연결하고 청취할 수 있는 이벤트가 없기 때문에 Gamepad API는 다르게 작동해요. 청취할 이벤트가 없는 상황에서 개발자는 계속해서 게임패드를 쿼링하여 어떤 변경 사항이 일어났는지 확인해야 해요.\n\n<div class=\"content-ad\"></div>\n\n위 기능을 구현하기 위해서는 Navigator 인터페이스의 확장인 getGamepads 메서드가 있습니다. getGamepads는 연결된 게임패드와 그 상태의 스냅숏을 포함한 배열을 반환할 것입니다:\n\n```js\nconst gamepads = navigator.getGamepads();\n```\n\n나중에 일부 오래된 웹킷 브라우저를 지원하기 위해 오래된 초기화에 대한 대체 방법을 추가했습니다. getGamepads() 메서드가 지원되지 않거나 게임패드가 연결이 해제되었을 경우에는 빈 배열을 반환하여 오류를 방지하는 것이 좋습니다:\n\n```js\nlet gamepads = [];\nif (navigator.getGamepads) gamepads = navigator.getGamepads();\nelse if (navigator.webkitGetGamepads) gamepads = navigator.webkitGetGamepads();\n```\n\n<div class=\"content-ad\"></div>\n\n연결된 게임패드의 상태를 읽을 수는 있었지만, 함수를 호출할 때의 상태 스냅샷이었다. 계속해서 게임패드의 상태를 쿼리해야했습니다! setTimeout이나 setInterval과 같은 것을 사용하는 대신, 화면을 다시 그릴 때마다 함수가 실행되도록 requestAnimationFrame 내에서 함수를 호출해야 했습니다...\n\n...다음과 같은 방식으로:\n\n```js\nfunction checkStatus() {\n  // 게임패드의 상태를 읽기\n  const gamepads = navigator.getGamepads();\n\n  // 게임패드 작동: 버튼 값 읽기, 동작 수행 등\n  // 예: 첫 번째 게임패드의 Start 버튼이 눌렸을 때 메시지 로깅\n  if (gamepads[0].buttons[9].pressed) {\n    console.log(\"Start 버튼이 눌렸습니다\");\n  }\n\n  // 각 애니메이션 프레임마다 함수를 다시 실행\n  if (gamepads.length > 0) {\n    window.requestAnimationFrame(checkStatus);\n  }\n}\n```\n\n이 함수는 gamepadconnected 이벤트 핸들러에서 호출되어 브라우저에 게임패드가 연결될 때만 쿼리를 시작합니다. 또한, 연결된 게임패드가 없을 경우 중지 조건을 추가하는 것이 중요합니다. 그렇지 않으면 지속적이고 불필요한 쿼리를 수행하여 앱의 효율성이 떨어질 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 조이스틱은 버튼이 아니에요\n\n조이스틱이나 축과 같은 방향 버튼을 다룰 때 새로운 발견을 했어요. 버튼처럼 누름/안 누름, 터치/터치하지 않음처럼 동작할 거라고 예상했는데, Gamepad의 축 속성은 -1.0에서 1.0 범위의 짝수 개수를 갖는 배열이에요. 버튼처럼 보이진 않아요, 벌써부터 뿌리쳐 둔 것 같지 않아요.\n\n이 배열을 두 개씩의 그룹으로 나누는 것이 관건이에요. 각 그룹은 게임패드의 조이스틱/축이 될 거예요:\n\n- 첫 번째 값은 조이스틱의 X 축을 나타내요. -1.0은 왼쪽을, 1.0은 오른쪽을 의미해요.\n- 두 번째 값은 조이스틱의 Y 축을 나타내요. -1.0은 위/앞으로, 1.0은 아래/뒤쪽을 의미해요.\n\n<div class=\"content-ad\"></div>\n\n![게임패드 API로 놀아보기](/assets/img/2024-05-01-PlayingwiththeGamePadAPI_3.png)\n\n코드로 번역하면 다음과 같을 것입니다:\n\n```js\n// 게임패드의 상태를 읽기\nconst gamepads = navigator.getGamepads();\n\n// 예시: 첫 번째 게임패드의 방향 조이스틱이 눌렸을 때 로그 메시지 출력\n// 가로 이동\nif (gamepads[0].axes[0] == 1.0) {\n  console.log(\"오른쪽으로 이동\");\n} else if (gamepads[0].axes[0] == -1.0) {\n  console.log(\"왼쪽으로 이동\");\n}\n\n// 세로 이동\nif (gamepads[0].axes[1] == 1.0) {\n  console.log(\"아래로 이동\");\n} else if (gamepads[0].axes[1] == -1.0) {\n  console.log(\"위로 이동\");\n}\n```\n\n## 민감도 임계값\n\n<div class=\"content-ad\"></div>\n\n개발 중인 조이스틱/축을 위해 하는 좋은 일 중 하나는 다양한 감도 임계값을 허용하는 것입니다. 모든 조이스틱이 동등하게 만들어지지는 않으며 모두가 조이스틱의 동작 방식에 대해 동일한 선호도나 필요를 가지고 있는 것이 아닙니다.\n\n축에 대한 값은 -1.0에서 1.0 사이의 double 값이지만, 이는 0.0이 쉬는 상태가 되고 1.0/-1.0이 활성 상태가 되는 것을 의미하는 것은 아닙니다. 제가 시험한 게임패드 중 어느 것도 휴식 상태가 0인 적은 없었습니다. (대부분의 경우 0.0003과 같이 무시할 수 있는 값이 있습니다.) 그래서 왜 1.0/-1.0이 방향 동작을 트리거하는 임계값이어야 하는 건가요?\n\n접근성과 사용 편의성을 고려하여 사용자가 방향 이벤트가 트리거되는 임계값을 변경할 수 있도록 고려해보세요. 위의 예시에서 수정된 코드 스니펫:\n\n```js\nconst threshold = 0.5;\n\n// 수직 이동 (전체 이동이 아닌 \"절반\"에서 작동)\nif (gamepads[0].axes[1] >= threshold) {\n  console.log(\"아래로 이동\");\n} else if (gamepads[0].axes[1] == -threshold) {\n  console.log(\"위로 이동\");\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 진동\n\n게임패드 API에는 사용 가능할 때 컨트롤러 진동을 허용하는 확장 기능이 있습니다. API 자체가 실험적인 경우, 이 확장 기능은 제곱형 실험적으로 간주될 수 있습니다.\n\n게임패드가 연결될 때 콘솔 메시지를 확인했다면, Gamepad 인터페이스의 일부로 설명되지 않은 속성인 vibrationActuator를 발견할 수 있습니다. 이 속성은 게임 컨트롤러를 진동시킬 수 있게 해주는 playEffect() 메서드를 갖고 있습니다.\n\n다만, 큰 문제가 있습니다: 이것은 진동을 제어하기 위한 표준 확장이 아니라 크롬에서 사용 가능한 확장입니다. 표준 방법은 hapticActuators를 사용하는 것이며, 이는 주목할 만한 다른 브라우저, 특히 파이어폭스에서 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 예제에서는 표준 hapticActuators에만 초점을 맞추겠습니다.\n\nhapticActuators는 현재 하나의 값만 허용합니다(\"진동\") 그리고 진폭과 지속 시간을 지정하여 진동을 트리거할 수 있는 pulse 메서드가 포함되어 있습니다:\n\n```js\n// 첫 번째 게임패드를 읽기\nconst gamepads = navigator.getGamepads();\nconst myGamepad = gamepads[0];\n\n// 1.5초 동안 최대 진폭 진동 트리거\nmyGamepad.hapticActuator[0].pulse(1.0, 1500);\n```\n\nhapticActuators에 대한 한 가지 까다로운 점은 표준에서 정의된대로 GamepadHapticActuators 배열이 아니라 해당 유형의 단일 객체였다는 것입니다. 구현은 여전히 브라우저에 매우 의존적입니다. 개발자 주의해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 라이브러리 개발\n\nGamepad API는 비교적 쉽지만 귀찮은 것을 알아차렸을 것입니다. 모든 작업에는 여러 단계가 필요합니다. 더 탐구하고 더 즐기고 싶다면 경험을 단순화해야 합니다.\n\n이러한 메소드와 이벤트에 대한 상위 수준의 인터페이스를 제공하는 작은 모듈을 만드는 것이 합리적이었습니다. 모든 작업을 단순화하고 더 표준적인 호출을 가능하게 하는 것이었습니다.\n\n예를 들어, 시작 버튼이 눌렸는지 확인하려면 Gamepad API를 사용해야 했습니다.\n\n<div class=\"content-ad\"></div>\n\n- requestAnimationFrame으로 간격 설정하기\n- 각 애니메이션 프레임에서 getGamepad() 호출하기\n- 확인하려는 게임패드 식별하기 (이전에 저장된 ID로)\n- 버튼 배열 읽기\n- 원하는 특정 버튼에 액세스하기 (Start 버튼은 버튼 9)\n- 눌린 속성의 값 읽기\n- 원하는 작업 수행하기\n\n위 과정마다 몇 줄의 코드가 필요합니다. 이러한 복잡성을 라이브러리/모듈로 이동시키면 jQuery스러운 간단한 모양으로 유사한 작업을 수행할 수 있습니다.\n\n```js\nmyGamepad.on(\"start\", function() {\n  console.log(\"Start 버튼이 눌렸습니다\");\n});\n```\n\n필요한 모든 코드는 여전히 있지만, 내부적으로는 Gamepad API의 사용을 용이하게 해주며, 다른 이벤트가 쿼리하는 대신 이벤트를 듣는 다른 API처럼 보이게 만듭니다.\n\n<div class=\"content-ad\"></div>\n\n# 게임 개발\n\n라이브러리는 프로세스를 간단화했습니다. 이제 게임패드 기능을 위해 JavaScript에서 더 사용하기 쉬운 인터페이스를 사용하면서 웹 애플리케이션의 다른 부분에 더 집중할 수 있었어요.\n\n개발하기 쉬운 게임 중 하나는 클래식한 Pong이었어요. 컨트롤러와의 상호작용은 간단합니다: 위 또는 아래로 움직입니다. 패들과 공의 충돌을 감지하는 주요 어려움을 다루면서 공의 움직임을 계산하기만 하면 되었어요.\n\n여기에 코드와 데모가 있습니다 (게임패드를 연결하여 플레이하세요):\n\n<div class=\"content-ad\"></div>\n\n컴퓨터에 게임패드가 연결되어 있지 않으면 해당 Codepen이 작동하지 않을 수 있어요. 하지만 키보드 기능도 몇 가지 추가했어요.\n\n# 다음은 무엇인가요?\n\n이 기사에서는 현재 게임패드 API의 대부분 기능을 다뤘어요:\n\n- 게임 컨트롤러 연결을 감지하는 방법\n- 버튼과 조이스틱의 차이\n- 이벤트 읽는 방법\n- 게임패드로 진동 사용하기\n\n<div class=\"content-ad\"></div>\n\n하지만 몇 가지 빠뜨린 것이 있어요: 게임패드 포즈 인터페이스입니다. 이 인터페이스를 통해 게임패드에서 위치, 방향, 속도 및 가속도 (사용 가능한 경우)와 같은 정보를 얻을 수 있습니다. 이는 증강 현실 및 가상 현실 장치에 적합합니다. 불행하게도 이것은 잘 지원되지 않습니다.\n\n또한 API에 새로운 변경 사항이 있을 것입니다. 결국, 이것은 실험적 기술이며 지속적으로 업데이트됩니다. gamepadchange, gamepadaxischange와 같이 새로운 이벤트가 추가될 수 있습니다. 이는 API를 간단하게 만들 수 있고... 그리고 제 라이브러리를 쓸모 없게 만들 수도 있군요.\n\n# 추가 정보: 게임패드 API 전문가 되기!\n\n게임패드 API와 작동하는 다양한 유형의 컨트롤러를 테스트한 후에 한 가지 생각이 들었어요: 만약 내 옛날 PS3 컨트롤러가 작동한다면, 옛날 Rock Band 드럼과 기타는 어떨까요? Dance Dance Revolution 매트는 어떻게 될까요?\n\n<div class=\"content-ad\"></div>\n\n긴 이야기를 짧게 말하자면, 이것이 결과입니다:\n\n그리고 여기에서는 우리만의 버전으로 'Web DDR'을 플레이하고 있습니다:\n\n이 다른 기사에서 JavaScript와 HTML을 사용하여 자신만의 Rock Band 비디오 게임 버전을 만드는 방법에 대한 튜토리얼을 만들었습니다:","ogImage":{"url":"/assets/img/2024-05-01-PlayingwiththeGamePadAPI_0.png"},"coverImage":"/assets/img/2024-05-01-PlayingwiththeGamePadAPI_0.png","tag":["Tech"],"readingTime":12},{"title":"개인 블로그를 HTMX + Go로 만들기1 - Golang 템플릿 설정","description":"","date":"2024-05-01 23:15","slug":"2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup","content":"\n\n이 블로그 포스트는 내 개인 블로그에도 게시되어 있으며 여기에서 액세스할 수 있습니다.\n\n# 서문\n\n최근에 저는 HTMX와 Golang을 사용하여 제 개인 블로그를 처음부터 만들었다는 것을 발표하는 포스트를 작성했습니다. JavaScript 프레임워크를 완전히 생략했습니다. 해당 블로그 포스트는 여기에서 읽을 수 있습니다.\n\n이것은 HTMX + Go 여정의 첫 번째이며, 제 개인 블로그를 위해 HTMX를 처음으로 설정하는 과정을 기록할 것입니다 (만약 이 기사를 Medium에서 읽는다면 여기를 방문할 수 있습니다).\n\n<div class=\"content-ad\"></div>\n\n세부적인 튜토리얼처럼 프로세스를 상세히 다루지는 않겠습니다. 대신, 제가 무엇을 하고 있는지, 무엇이 저를 방해하는지, 그리고 어떻게 극복했는지(또는 우회했는지)를 문서화하는 저의 일지처럼 다룰 예정입니다. 그리고 그 과정 중에 발견한 다양한 잡다한 것들도 함께 공유할 거에요.\n\n이 시리즈는 많은 기본적인 부분을 건너뛸 것이기 때문에 처음 시작하는 사람들이 함께하길 기대하지는 않습니다. 그래도 질문은 언제든 환영하니 아래 댓글에 망설이지 말고 바로 날 물어봐주세요!\n\n# 설정하기\n\n# 템플릿 랜더러\n\n<div class=\"content-ad\"></div>\n\n우선 Labstack Echo를 사용하여 HTML 파일을 제공할 수 있는지 확인해야 합니다. 나는 개인적으로 HTTP 라우터로 선택한 것이기 때문에. Echo의 가이드에서 템플릿 섹션을 따르면 Echo의 Renderer 인터페이스를 구현하는 \"템플릿 렌더러\"를 제공해야 합니다.\n\n그것을 위해, 다음과 같은 코드를 만들었습니다:\n\n```js\ntype Template struct {\n    Templates *template.Template\n}\n\nfunc (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n    return t.Templates.ExecuteTemplate(w, name, data)\n}\n\nfunc NewTemplateRenderer(e *echo.Echo, paths ...string) {\n    tmpl := &template.Template{}\n    for i := range paths {\n        template.Must(tmpl.ParseGlob(paths[i]))\n    }\n    t := newTemplate(tmpl)\n    e.Renderer = t\n}\n\nfunc newTemplate(templates *template.Template) echo.Renderer {\n    return &Template{\n        Templates: templates,\n    }\n}\n```\n\n이 템플릿 렌더러의 아이디어는 HTML 템플릿 파일을 넣은 경로를 나타내는 문자열의 가변 매개변수를 제공할 수 있다는 것입니다. 이것은 template.ParseGlob이 재귀적으로 템플릿 파일을 찾을 수 없기 때문에 필요합니다. 또한, html/template을 가져오지 말고 text/template을 가져와야 한다는 것을 잊지 마세요!\n\n<div class=\"content-ad\"></div>\n\n# 안녕, 세상아\n\n우리는 간단한 에코 서버를 만들고 간단한 HTML 파일을 제공해보면서 테스트할 수 있습니다. 먼저 public 경로에 새로운 index.html 파일을 생성하여 Hello World를 시작해 보겠습니다:\n\n```js\n{define \"index\"}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello, World!</title>\n</head>\n<body>\n    <p>Hello, World!</p>\n</body>\n</html>\n{end}\n```\n\n이것은 그저 간단한 HTML 파일입니다. 그러나 HTML 파일을 감싸는 이중 중괄호({})에 주목해주세요. 이는 Go 템플릿 태그입니다. 위 예시에서는 단순히 나중에 Go 코드에서 직접 액세스할 수 있는 index라는 이름의 새로운 템플릿을 정의했습니다.\n\n<div class=\"content-ad\"></div>\n\n이제 간단한 echo 서버를 만들어 봅시다:\n\n```js\nfunc main() {\n    e := echo.New()\n    \n    // 약간의 미들웨어를 추가하여 housekeeping\n    e.Pre(middleware.RemoveTrailingSlash())\n    e.Use(middleware.Recover())\n    e.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(\n        rate.Limit(20),\n    )))\n\n    // 이것은 템플릿 렌더러를 초기화합니다.\n    template.NewTemplateRenderer(e, \"public/*.html\")\n    e.GET(\"/hello\", func(e echo.Context) error {\n        return c.Render(http.StatusOK, \"index\", nil)\n    })\n\n    e.Logger.Fatal(e.Start(\":4040\"))\n}\n```\n\n이 echo 서버는 포트 :4040에서 실행되며 public 디렉토리에 위치한 .html 파일을 렌더링합니다. 그리고 /hello라는 새로운 엔드포인트를 생성하여 index를 제공할 것입니다. 실행해 보면 아마도 이렇게 될 것입니다:\n\n<img src=\"/assets/img/2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup_0.png\" />\n\n<div class=\"content-ad\"></div>\n\n# 템플릿에 값 전달하기\n\n이제 템플릿에 동적 값들을 전달할 수 있는지 확인해봐야 해요. 결국 템플릿의 목적이죠. 먼저 index.html 코드를 약간 수정해야 해요:\n\n```js\n<p>Hello, World!</p>\n<p>Greetings, {.Name}!</p>\n```\n\n다시 한 번 중괄호를 두 개 사용했네요. 이 예제에서는 html 파일로 Name이라는 값을 전달하려고 합니다. 그러면 서버도 조금 수정해야겠죠?\n\n<div class=\"content-ad\"></div>\n\n```js\ne.GET(\"/hello\", func(e echo.Context) error {\n    res := map[string]interface{}{\n        \"Name\": \"Wyndham\",\n    }\n    return c.Render(http.StatusOK, \"index\", res)\n})\n```\n\n이렇게 하면 렌더러가 res의 값을 루트 값으로 취하고 Name 키를 가진 자식 값을 찾습니다. 그럼 다음과 같이 결과를 렌더링해야 합니다:\n\n<img src=\"/assets/img/2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup_1.png\" />\n\n# 중첩 템플릿 및 템플릿 간 값 전달하기\n\n<div class=\"content-ad\"></div>\n\n이제 HTMX를 다루기 전에 마지막으로 확인할 사항은 index 템플릿 내에 다른 템플릿을 중첩할 수 있는지입니다. 이를 위해 name_card.html이라는 간단한 템플릿 파일을 만들었습니다:\n\n```js\n{define \"name_card\"}\n<div>\n    <p>사용자 개인 정보:</p>\n    <ol>\n        <li>이름: {.Name}</li>\n        <li>전화번호: {.Phone}</li>\n        <li>이메일: {.Email}</li>\n    </ol>\n</div>\n{end}\n```\n\n그런 다음 index.html을 약간 수정해야 합니다. 먼저 인사 문구를 삭제한 다음 다음을 추가하십시오:\n\n```js\n<p>Hello, World!</p>\n<!-- 이 줄 삭제 <p>Greetings, {.Name}!</p> -->\n{template \"name_card\" .}\n```\n\n<div class=\"content-ad\"></div>\n\n그러면 우리는 다시 한번 서버를 수정해야 합니다:\n\n```js\ne.GET(\"/hello\", func(e echo.Context) error {\n    res := map[string]interface{}{\n        \"Name\": \"Wyndham\",\n        \"Phone\": \"8888888\",\n        \"Email\": \"skyscraper@gmail.com\",\n    }\n    return c.Render(http.StatusOK, \"index\", res)\n})\n```\n\n이제 여기서 맞다면, 이렇게 개인 정보를 렌더링할 수 있어야 합니다. 여기서 로직은, Name, Phone, Email을 포함한 3쌍의 키-값을 가진 인터페이스 맵을 전달한다는 것입니다.\n\n그리고 우리는 중괄호를 사용하여 name_card에서 해당 값을 액세스합니다. 그러나 name_card 템플릿이 값을 받도록 하려면 index.html 내에서 template \"name_card\" .의 내부에서 추가 . 를 통해 res 값을 전달해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n그리고 당연히:\n\n<img src=\"/assets/img/2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup_2.png\" />\n\n우리는 여러 템플릿 파일을 중첩시키고 변수를 전달하는 데 성공했습니다! 이제 템플릿 설정이 끝났으니, HTMX에 대해서 조금 더 살펴봅시다.\n\n# HTMX를 사용하여 연락처 정보 공개하기\n\n<div class=\"content-ad\"></div>\n\n간단한 뷰를 만들려고 해요. 이름과 그 옆에 연락처 정보를 공개하기 위한 버튼이 있는 목록을 만들 거예요. 이를 위해서 먼저 이 프로젝트에 HTMX를 추가해야 해요. 일단 CDN을 통해 추가할 거에요:\n\n```js\n<head>\n    ...\n    <script src=\"https://unpkg.com/htmx.org@1.9.5\" integrity=\"sha384-xcuj3WpfgjlKF+FXhSQFQ0ZNr39ln+hwjN3npfM9VBnUskLolQAcN80McRIVOPuO\" crossorigin=\"anonymous\"></script>\n</head>\n```\n\n위 코드를 통해 HTMX를 CDN을 통해 추가할 거예요. 이제 사용자 정보를 직접 공개하지 않도록 index.html을 다시 수정해야 해요:\n\n```js\n<p>Hello, World!</p>\n<!-- 이 줄을 삭제하세요 {template \"name_card\" .} -->\n<div id=\"user-info\">\n    <p>{.Name}</p>\n    <button hx-get=\"/get-info\" hx-target=\"#user-info\" hx-swap=\"innerHTML\">정보 공개</button>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n이렇게 하면 UI가 이름 부분만 표시되도록 설정되며, /get-info 엔드포인트를 호출할 버튼을 설정하고 #user-info 요소를 대상으로 하여 대상 요소의 내부 부분을 바꿀 것입니다 (기본적으로 `div`를 그대로 두고 `div` 내부의 모든 것을 변경합니다).\n\n알겠어요. 많은 용어가 있네요. 여기서는 이 내용을 더 잘 설명한 htmx 웹페이지에서 확인할 수 있습니다. 이제 /get-info 경로를 처리하는 새 엔드포인트 핸들러를 생성하여 계속 진행해 보겠습니다:\n\n```js\ne.GET(\"/get-info\", func(c echo.Context) error {\n    res := map[string]interface{}{\n        \"Name\": \"Wyndham\",\n        \"Phone\": \"8888888\",\n        \"Email\": \"skyscraper@gmail.com\",\n    }\n    return c.Render(http.StatusOK, \"name_card\", res)\n})\n```\n\n이는 거의 /hello와 동일하지만 두 가지 주요 차이점이 있습니다:\n\n<div class=\"content-ad\"></div>\n\n- 경로를 명확하게 /get-info로 변경해주세요.\n- 대상 템플릿을 name_card로 변경해주세요.\n\n하지만! name_card는 유효한 HTML 파일이 아니었나요? doctype도 없고 헤더도 없죠. 맞아요, 맞습니다. 하지만 이것은 HTMX가 동작하는 방식입니다. 전체 페이지를 교체하지 않고 우리가 index.html에서 지정한 user-info 요소만 교체할 거예요.\n\n그럼, 더 이상 말을 더하지않고 서버를 실행해서 무슨 일이 일어났는지 봅시다:\n\n와우! 제작품이 동작합니다! 이제 HTMX가 Go 템플릿과 잘 동작한다는 것을 알게 되었으니, 드디어 블로깅 사이트를 작업할 수 있겠네요. 그러나 불행히도 이 기사에서는 다루지 않을 거예요. 하지만 곧 돌아올 테니까, 그렇게 길지 않겠죠!\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n이 블로그를 읽어 주셔서 감사합니다. 여기서 중요한 점은 Go 템플릿을 사용하기 매우 유연하며, 이 작은 범위에서 HTMX와도 잘 작동한다는 것입니다. 다음 블로그에서는 기본 CRUD를 생성하여 DB에 기사를 저장하고 브라우저에서 액세스할 것입니다.\n\n조금 스포일러를 하자면: 거기에 많이 HTMX를 사용하지는 않을 것이고, 그 다음 시점에도 그 후에도 마찬가지입니다. 게시 물 웹사이트에서는 HTMX가 많이 필요하지 않다는 것이 확인되었습니다. 놀랍죠. 그러나 페이지네이션, 검색, 실시간 Markdown 렌더러를 만드는 부분에 도달하면 HTMX를 적극 활용할 것입니다.\n\n그러니 기대해 주세요! 읽어 주셔서 감사합니다!\n\n<div class=\"content-ad\"></div>\n\n수정되었습니다! 두 번째 부분이 나왔어요! 다음 링크에서 읽을 수 있어요:\n\n[https://medium.com/gravel-engineering/personal-blog-with-htmx-go-part-2-integrating-tailwindcss-412ebc4dcc97](https://medium.com/gravel-engineering/personal-blog-with-htmx-go-part-2-integrating-tailwindcss-412ebc4dcc97)","ogImage":{"url":"/assets/img/2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup_0.png"},"coverImage":"/assets/img/2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup_0.png","tag":["Tech"],"readingTime":8},{"title":"접근성을 위해 버튼을 절대 비활성화면 안되는 이유","description":"","date":"2024-05-01 23:13","slug":"2024-05-01-NevereverdisablebuttonsWhynot","content":"\n\n## 사용 불가능한 컨트롤\n\n![이미지](/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_0.png)\n\n# 내용\n\n버튼을 비활성화하는 문제\n\n<div class=\"content-ad\"></div>\n\n**이 섹션에서는 버튼을 비활성화하는 것이 사용자에 대한 나쁜 해결책인 이유에 대해 이야기하겠습니다. 이에는 홍보되는 소통 부족 및 특정 사용자들이 인식할 수 없는 점이 포함됩니다.**\n\n**이의 반박**\n\n**비활성화된 버튼을 금지하는 것에 대한 일반적인 이의에 대해, WCAG의 입장, 특수 사용 사례, 오류 방지 등을 논의할 것입니다.**\n\n**결론**\n\n<div class=\"content-ad\"></div>\n\n링크\n\n## 비활성화된 버튼의 문제점\n\n![Image](/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_1.png)\n\n**사용자:** \"왜 비활성화되었죠?\" **개발자:** \"그건 당신의 문제죠.\"\n\n<div class=\"content-ad\"></div>\n\n버튼을 비활성화하는 데는 접근성 문제가 있을 수 있습니다(우리가 나중에 살펴볼 것이지만), 보조 기술(AT)을 의존하지 않는 사람들에게도 안좋은 메시지를 전달하고 있다고 생각해요.\n\n버튼을 비활성화하면 사용자에게 어떤 메시지를 전달하고 있을까요?\n\n친애하는 사용자님:\n\n- \"이 버튼은 지금 작동하지 않지만, 왜 그런지 알 수 있어야 합니다.\"\n- \"이 버튼은 지금 작동하지 않지만, 앞으로 작동할지에 대해 알려주지 않겠습니다.\"\n- \"이 버튼이 비활성화된 이유는 당신의 문제입니다.\"\n\n<div class=\"content-ad\"></div>\n\n당신이 명백하게 이런 생각을 하지는 않겠지만, 그게 당신이 전달하고 있는 바입니다 — 또는 적어도, 그게 고객이 당신이 전달하고 있는 것이라고 생각하는 것입니다. 그것이 정말 중요한 부분이죠.\n\n또한 사용자에게 생각하고, 추측하고, (결국) 도움을 요청하도록 강요하고 있습니다. 그리고 이전 글에서 언급한 대로, 그건 안 되는 일입니다.\n\nHampus Sethfors가 \"비활성화된 버튼은 최악입니다\" 라는 제목의 글에서 쓴 것을 보면:\n\n사용자가 일반적으로 할 수 있는 작업을 수행하지 못하도록 하려면, 사용자가 알아야 하는 정보가 필요합니다:\n\n<div class=\"content-ad\"></div>\n\n- 그들은 그 행동을 할 수 없습니다.\n- 그들이 그 행동을 왜 할 수 없는지\n- 그들이 그 행동을 하려면 어떤 단계를 (적용할 수 있는 경우) 취할 수 있는지\n\n버튼을 비활성화하는 것은 사용자에게 아무것도 알려주지 않습니다.\n\n![버튼 비활성화](/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_2.png)\n\n## 스크린리더 사용자: \"어떤 버튼?\" 개발자: \"여기 있어요. 보이지 않나요?\"\n\n<div class=\"content-ad\"></div>\n\n버튼을 비활성화하면 보조 기술을 사용하는 많은 사용자들에게 숨겨지기 때문에요.\n\n버튼을 비활성화하면 탭 순서에서 제외됩니다. 따라서, 이는 결국 버튼을 숨기는 것과 같은 효과를 줄 수 있어요.\n\n보조 기술 사용자들의 관점에서 보면, 이는 작동하지 않는 양식으로 보입니다.\n\n세 개의 필수 필드가 있는 양식이 있다고 가정해봅시다. 세 필수 필드에 값이 모두 입력되었을 때에만 제출 버튼이 활성화되도록 하는 멋진 자바스크립트가 있다고 해봅시다.\n\n<div class=\"content-ad\"></div>\n\nAT(AT) 사용자가 양식 중 하나에 아무 내용도 입력하지 못한 채 실수로 양식을 완료한다고 생각합니다. 그 후:\n\n- Tab 키를 누릅니다 — 제출 버튼이 비활성화되어 있어 전혀 무시됩니다. 이제 사용자는 양식 외부에 있을 수도 있습니다.\n- \"f\" 키를 누릅니다(JAWS 및 NVDA 스크린 리더의 다음 양식 컨트롤로 이동하는 키) — 제출 버튼이 비활성화되어 있어 \"사용 불가\"로 읽힐 것입니다. 사용자는 그 이유를 알지 못할 것입니다.\n- Enter 키를 누릅니다 — 아무 일도 일어나지 않습니다.\n\n이것은 AT 사용자를 전혀 고려하지 않은 매우 흔한 디자인 패턴입니다.\n\n다음은\n제임스 칼튼\n의 \"UI 함정: 비활성화된 버튼 및 입력란\"이라는 기사에서 쓴 내용입니다.\n\n<div class=\"content-ad\"></div>\n\n## 색각 이상이 있는 사용자: \"버튼이 비활성화돼있어?\" 개발자: \"네! 못 봤어?\"\n\n버튼을 비활성화하면 색상 지각에 어려움을 겪는 사용자들에게도 문제가 발생합니다. 시각적으로 말하자면, 버튼을 비활성화하면 색상만 바뀌고 다른 것들은 변경되지 않습니다.\n\n만약 사용자가 비활성화된 \"제출\" 버튼을 클릭하고 비활성화되어 있다는 사실을 알지 못한다면, 페이지는 사용자에게 그들이 해당 작업을 수행할 수 없음을 충분히 전달하지 못한 것입니다 (#1 위).\n\n버튼이 비활성화되어 있는 것을 충분히 전달하는 방법에 대해 궁금하시다면, 이 기사의 제목을 다시 읽어보시라고 제안합니다: \"절대로, 절대로 버튼을 비활성화하지 마세요.\"\n\n<div class=\"content-ad\"></div>\n\n# 이의에 대한 대답\n\n그래서, 제 입장은 이렇습니다: 버튼을 비활성화하지 마세요... 절대로.\n\n이의가 충분하게 제시될 것이라고 확신합니다. 그래서 가장 흔한 이의에 대해 언급하겠습니다.\n\n## 이의 #1: WCAG는 허용한다고 말합니다.\n\n<div class=\"content-ad\"></div>\n\n이의가 SC 1.4.3에 해당하는 것으로 추정합니다: 최소 대비:\n\n문제가 되는 텍스트는 \"비활성 사용자 인터페이스 구성 요소의 일부인 텍스트 또는 이미지...대비 요구 사항이 없습니다.\"라고 적힌 부수적 섹션입니다.\n\nWCAG가 이 법적 규정을 남겨 놓은 이유와(SC 1.4.1의 색상 사용 철학과 어떻게 불일치하는지)에 대해 자세히 설명하지는 않겠습니다. 그러나 제가 이전에 쓴 기사에서 (아래 링크 참조)와 같이 준수는 접근성과 동일하지 않다는 점을 기꺼이 지적할 것입니다.\n\n그것들을 \"지침\"이라고 부르는 이유가 있습니다. WCAG를 최소한의 기준으로 간주하세요. 만약 귀하의 목표가 접근성이라면, 버튼을 비활성화하지 마세요.\n\n<div class=\"content-ad\"></div>\n\n## 이의 제기 #2: 비활성화된 버튼이 필요한 특별한 사용 사례가 있어요\n\n아니에요, 그렇지 않아요.\n\n더 접근성 있는 방법으로 처리할 수 없는 시나리오는 들어보지 못했어요. 그런 상황이 있다면 제게 알려주세요.\n\n결국 사용자가 당신처럼 웹을 활용하고 생각한다고 가정하거나 접근성 해결책을 위해 필요한 작업을 하지 않고자 하는 것으로 보입니다.\n\n<div class=\"content-ad\"></div>\n\n\"테이블이 첫 번째 페이지나 마지막 페이지에 있을 때 페이지네이션 버튼을 어떻게 처리해야 할까요?\"\n버튼을 비활성화하는 방법을 사용하지 않고도 접근성 있는 해결책이 있습니다.\n\n\"제출 버튼을 더블 클릭하는 것을 방지하는 방법은 무엇인가요?\"\n이를 방지하기 위해 JavaScript만 사용한다면, 접근성만 문제가 아닙니다.\n\n## 이의 제기 #3: 버튼 비활성화는 사용자가 잘못된 데이터를 입력하는 것을 방지합니다\n\n그래서 유효성 검사를 하는 것입니다.\"\n\n<div class=\"content-ad\"></div>\n\n그리고, 버튼을 비활성화하는 것은 잘못된 데이터가 있음을 사용자에게 전달하지 않는다. 사용자의 관점에서는 당신의 양식이 망가졌다고 생각할 수도 있어요.\n\n최근에 웹사이트에서 사진을 주문했던 적이 있어요. 모든 올바른 정보를 입력했는데도 (여러 번 확인했어요) 어쩌다가 \"주문하기\" 버튼이 비활성화되어 있었어요.\n\n오류 메시지가 표시되지 않았고, 왜 비활성화되어 있는지 알려주는 텍스트도 없었어요 — 그냥 비활성화되어 있었어요. 그래서 모든 좋은 개발자처럼 소스를 수정해서 비활성 속성을 제거하고 주문을 넣었더니 잘 처리되었어요. 유효성 검사도 없었고, 오류도 없었어요.\n\n그러니 보안이나 잘못된 입력을 위한 문으로서 비활성화된 버튼을 사용하지 마세요. 유효성 검사가 해야 할 역할을 하도록 두세요.\n\n<div class=\"content-ad\"></div>\n\n## 이의 제기 #4: 버튼을 비활성화하고 툴팁을 제공하지 않으면 안 되나요?\n\n툴팁을 어떻게 시각장애(AT) 사용자가 인식할까요?\n\n우선, 버튼을 비활성화해서는 안 된다는 이유 중 하나에 다시 돌아왔습니다: 모든 사용자가 인식할 수 없습니다.\n\ntitle 속성을 사용할 때 대상 컨트롤이 포커스를 가지거나 사용자가 마우스 커서를 올리는 경우에만 작동한다는 것을 말하는 건가요?\n\n<div class=\"content-ad\"></div>\n\n수비된 컨트롤은 초점을 받지 않습니다. 스크린 리더 사용자인 경우는 물론, 초점을 받지 않는 상태에서 사용자가 해당 텍스트를 인지할 수 없습니다.\n\n![버튼 비활성화 이미지](/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_3.png)\n\n그리고 버튼 주변에 해당 버튼이 왜 비활성화되었는지 설명하는 텍스트가 있다면, 동일한 규칙이 적용됩니다. 스크린 리더 사용자는 그 텍스트를 어떻게 인지할까요? 아마도 당신은 버튼에 aria-describedby 속성을 사용하여 그 텍스트 요소의 id 값을 제공한 것일 것입니다. 하지만 (한 번 더 말하지만) 이 방법은 버튼이 초점을 받아야만 작동하며, 비활성화된 버튼은 그렇지 않습니다.\n\n## 이의제기 #5: \"F\" 키를 사용하는 AT 사용자는 버튼을 여전히 인지할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n네, 그 말이 맞아요.\n\n\"키보드 단축키\"를 이용할 때 JAWS 및 NVDA에서는 \"f\" 키가 다음 양식 컨트롤을 나타내는 단축키입니다 (VoiceOver의 경우 [VoiceOver 키] + Command + J입니다).\n\n하지만 이의를 제기하는 것은 AT(AT-Assistive Technology) 사용자가 웹 페이지를 어떻게 소비하거나 AT를 사용하는지를 가정한다는 것 아닐까요? 어떤 사람들은 Tab을 사용하고, 어떤 사람들은 다음 양식 컨트롤로 이동하는 키를 사용하며, 또 다른 사람들은 다른 키를 사용할 수도 있습니다.\n\n또한, 색각 이상 사용자도 있습니다. 그들은 여전히 몇 번 클릭하지 않고는 버튼이 비활성화되었음을 감지하지 못할 것입니다 — 이것이 고장났다고 결론을 내리지 않는다고 가정합니다.\n\n<div class=\"content-ad\"></div>\n\n## 이의 제기 #6: 유용한 솔루션에 시간이 없어요. 버튼 비활성화는 빠르고 간편하며 대다수 사용자에게 문제를 해결해줍니다.\n\n그래서 시간이 소중해요? 누구의 시간이요? 사용자들의 시간은 소중하지 않나요?\n\n어떤 것들을 위해 얼마나 많은 루프를 돌릴 건가요? 완벽한 모서리가 둥근 세련된 UI, 만족스러운 전환 효과, 눈을 즐겁게 하는 폰트들을 얻기 위해서는요? 모바일 친화적인 인터페이스는 어떻게 하는 거에요?\n\n네, 버튼에 비활성 속성을 덧붙이는 것보다 더 많은 작업이 필요해요. 하지만, 여러분이 제공하는 더 다양한 유용한 솔루션들이 있다면, 앞으로 유용한 솔루션들을 만드는 것이 더 쉬워질 거에요.\n\n<div class=\"content-ad\"></div>\n\n## 반론 #7: 접근 가능한 솔루션이 추한 것일 것이다\n\n어떤게 더 좋을까요: 추한 작동 페이지인가요, 예쁘지만 망가진 페이지인가요?\n\n버튼을 비활성화하면 AT 사용자에게는 페이지가 깨졌다고 볼 수 있습니다. 그 순간에는 예쁜 페이지가 무슨 차이를 만들까요?\n\n그리고, 내가 아는 대부분의 UX 전문가들은 도전을 좋아해요. 이것을 도전으로 만들어 보세요: 추하지 않은, 사용하기 쉬우면서 접근 가능한 솔루션을 찾아보세요.\n\n<div class=\"content-ad\"></div>\n\n## 이의 제기 #8: 버튼 비활성화는 세기 전환 이후에 흔했던 관행입니다\n\n네... 맞아요.\n\n그때 HTML 태그에는 모두 대문자를 사용했습니다. 그래도 바뀌었죠?\n\n```js\n<P CLASS=\"retro\">그렇죠, 바뀌었어요.</P>\n```\n\n<div class=\"content-ad\"></div>\n\n\"늘 그래왔으니까\"는 흔한 변명은 하지 않겠어요. 게다가 이것으로는 접근성 문제를 해결할 수 없어요.\n\n옛날 나쁜 습관은 그만두자구요.\n\n# 결론\n\n나한테 '해결책을 제시하지 않았다'는 댓글을 보내시기 전에, 네 말이 맞아요. 그렇게 하면 기사가 아주 길어지겠죠. 그래서 이것은 Part 1입니다. 차기 기사에서는 버튼 비활성화에 대한 접근 가능한 대안을 살펴볼 거에요.\n\n<div class=\"content-ad\"></div>\n\n제가 빠뜨린 이의사항이 있으면 알려주세요. 접근성 문제를 초래시키는 문제에 비해 버튼을 비활성화하는 좋은 이유를 아직 발견하지 못했습니다.\n\n우리는 우리와 같은 사람들을 위해 개발하는 것을 그만두어야 합니다. 아마도 대신 각 사용자 그룹 - 또는 웹 페이지를 소비하는 데 사용되는 각 유형의 도구 - 에 대해 생각해볼 필요가 있습니다. 이에는 전형적인 시각적 사용자, 키보드 전용 사용자, 색맹 사용자, 스크린 리더 사용자 등이 포함됩니다.\n\n다음은 각각의 버튼을 비활성화하는 것이 무엇을 하는지에 대한 설명입니다:\n\n- 전형적인 사용자: 버튼이 비활성화되었어요. 왜 그런 건지 모르겠네요? 제가 뭔가 잘못한 것 같은데, 무엇이죠?\n- 키보드 전용 사용자: 버튼에 접근할 수 없어요. 비활성화되었겠죠. 왜 그런지 모르겠네요?\n- 색맹 사용자: 버튼을 클릭하고 있지만 아무 일도 일어나지 않아요. 비활성화되었건가 고장났나요? 누가 알겠어요?\n- 스크린 리더 사용자: 버튼이 어디 있죠?\n\n<div class=\"content-ad\"></div>\n\n끝으로 버튼을 비활성화함으로써, 한 그룹의 사용자(전형적인 시각 장애가 없는 마우스/키보드 사용자)에게 웹 페이지 이용 방법에 대한 정보를 제공하지만 다른 그룹(AT 사용자)에게는 그 정보를 제공하지 않고 숨기게 됩니다.\n\n습관을 깨는 게 참 괴롭다는 건 알아요, 특히 쉬운, 오랜 습관의 경우 더 그렇죠. 하지만 우리는 사용자들에게 제대로 된 서비스를 제공할 필요가 있어요... 모든 사용자에게요.\n\n여기 [Part 2]가 있어요: 절대로 버튼 비활성화하지 말아야 하는 이유 — 접근성 솔루션을 위한 요구사항.\n\n여기 [Part 3]가 있어요: 절대로 버튼 비활성화하지 말아야 하는 이유 — 더 많은 접근성 대안들.\n\n<div class=\"content-ad\"></div>\n\n# 링크\n\n## 언급된 글들\n\n- Disabled buttons suck by\nHampus Sethfors\n- UI Traps: Disabled Buttons and Inputs by\nJames Carleton\n\n## 추가로 읽어볼 만한 글들\n\n<div class=\"content-ad\"></div>\n\n- 비활성 버튼의 대비 수준은 어떻게 되어야 할까? by Giulia Alfarano\n- 버튼을 비활성화하지 마세요 by Chris Ferdinandi\n- 비활성 버튼을 '회색으로 표시'하는 것이 괜찮은가요? by H Locke\n\n## 내 연관 기사\n\n- 제2부: 절대로 버튼을 비활성화하지 마세요 — 접근성 있는 솔루션을 위한 요구 사항\n- 제3부: 절대로 버튼을 비활성화하지 마세요 — 더 많은 접근 가능한 대안\n- 텍스트 상자의 비활성화: 좋지 않은 아이디어 및 그 대안\n- 접근성은 오해되고 있습니다 — 이를 수정합시다\n- 만족시켜야 할 요구 사항으로서의 접근성 전달, 규칙으로 따라야 할 것이 아닙니다","ogImage":{"url":"/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_0.png"},"coverImage":"/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_0.png","tag":["Tech"],"readingTime":8},{"title":"HTML과 CSS를 사용하여 애니메이션 로켓 로더 만들기","description":"","date":"2024-05-01 23:11","slug":"2024-05-01-BuildinganAnimatedRocketLoaderUsingHTMLandCSS","content":"\n\n![로켓 로더](https://miro.medium.com/v2/resize:fit:1200/1*fE47ZekcAWWg54RB5WWodg.gif)\n\n# 소개\n#100DaysOfCode 챌린지의 제 23일을 환영합니다! 오늘은 프론트엔드 개발 세계로 뛰어들어 흥미진진한 프로젝트를 만들어보겠습니다: 애니메이션 로켓 로더입니다. 이 로더는 당신의 웹사이트의 시각적 매력을 높일 뿐만 아니라 사용자들에게 독특한 로딩 경험을 제공할 것입니다. 시작해봅시다!\n\n# 단계 1: 프로젝트 설정\n\n<div class=\"content-ad\"></div>\n\n먼저, 제공된 링크에서 전체 소스 코드를 다운로드하세요: 소스 코드 다운로드. 다운로드 후, 프로젝트용 새 디렉터리를 만들고 소스 코드 파일을 그 안에 압축 해제하세요.\n\n# 단계 2: HTML 구조\n\n코드 편집기에서 index.html 파일을 열어주세요. 우리는 HTML 문서의 기본 구조를 정의하는 것으로 시작하겠습니다. 다음 코드를 복사하여 붙여넣기 해주세요:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <!-- 문자 인코딩 및 뷰포트 설정 -->\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <!-- 외부 스타일시트 연결 -->\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <!-- 페이지 제목 설정 -->\n    <title>Animated Rocket Loader</title>\n</head>\n\n<body>\n    <!-- 로켓 로더 컨테이너 -->\n    <div class=\"rocket-loader\">\n        <!-- 로켓 객체 -->\n        <div class=\"rocket\">\n            <!-- 장식용 로켓 부속품 -->\n            <div class=\"rocket-extras\"></div>\n            <!-- 제트 애니메이션 -->\n            <div class=\"jet\"><span></span></div>\n        </div>\n    </div>\n</body>\n\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 3: CSS로 스타일링하기\n\n이제 우리의 로켓 로더를 시각적으로 매력적으로 만들기 위해 몇 가지 스타일을 추가해 봅시다. style.css 파일을 열어주세요. 로켓 로더, 로켓, 제트, 그리고 애니메이션용 스타일을 포함할 것입니다. 제공된 CSS 코드를 복사하여 붙여넣어주세요.\n\n```js\n/* Google 폰트 가져오기 */\n@import url(\"https://fonts.googleapis.com/css?family=Ubuntu:400,400i,700,700i\");\n\n/* 기본 마진, 패딩, 상자 크기 재설정 */\n*,\n*:before,\n*:after {\n    margin: 0;\n    padding: 0;\n    word-break: break-all;\n    box-sizing: border-box;\n}\n\n/* 기본 글꼴 크기 설정 */\nhtml {\n    font-size: 10px;\n}\n\n/* Body 스타일 */\nbody {\n    font-family: \"Ubuntu\", sans-serif;\n    color: #6e6e6e;\n    font-size: 1.6rem;\n}\n\n/* 헤더와 푸터를 블록 요소로 표시되도록 설정 */\nheader,\nfooter {\n    display: block;\n}\n\n/* 링크 스타일 */\na,\na:link,\na:visited {\n    color: #4d4d4d;\n    text-decoration: none;\n}\n\n/* 이미지 스타일 */\nimg {\n    border: 0;\n}\n\n/* 기본 리스트 스타일 제거 */\nul {\n    list-style: none;\n}\n\n/* 중앙 정렬 컨테이너 */\n.center {\n    margin: auto;\n    width: 110rem;\n}\n\n/* 로켓 로더 스타일 */\n.rocket-loader {\n    /* 먼지 입자 이동 애니메이션 */\n    -webkit-animation: moveParticles 6s linear infinite;\n    animation: moveParticles 6s linear infinite;\n    /* 배경 그라데이션 */\n    background: linear-gradient(90deg, gray, transparent 10%) 0 20%/180% 0.2rem repeat-x, linear-gradient(90deg, gray, transparent 20%) 0 80%/150% 0.2rem repeat-x, linear-gradient(90deg, gray, transparent 5%) 0 65%/100% 0.2rem repeat-x, linear-gradient(90deg, gray, transparent 5%) 0 40%/220% 0.2rem repeat-x, linear-gradient(0, white, white);\n    /* 테두리와 그림자 */\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    border-radius: 50%;\n    box-shadow: inset 0 0 60px 0 rgba(0, 0, 0, 0.1);\n    /* 크기와 위치 */\n    height: 125px;\n    left: 50%;\n    overflow: hidden;\n    position: absolute;\n    text-align: center;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 125px;\n}\n\n/* 로켓 로더 앞의 내용 */\n.rocket-loader::before {\n    /* 깜빡이는 애니메이션 */\n    -webkit-animation: blink 1s infinite;\n    animation: blink 1s infinite;\n    bottom: 6%;\n    content: \"로딩 중...\"; /* 텍스트 내용 */\n    font-size: 12px;\n    left: 0;\n    position: absolute;\n    right: 0;\n}\n\n/* 로켓 스타일 */\n.rocket {\n    /* 로켓 이동 애니메이션 */\n    -webkit-animation: moveRocket 2s linear infinite;\n    animation: moveRocket 2s linear infinite;\n    /* 배경 그라데이션 */\n    background: lightgray;\n    background: linear-gradient(#990000, red, #990000);\n    /* 테두리와 위치 */\n    border-left: 3px solid rgba(0, 0, 0, 0.4);\n    border-radius: 50%/30%;\n    height: 15%;\n    left: 50%;\n    position: absolute;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 35%;\n}\n\n/* 로켓의 가짜 요소 */\n.rocket::before,\n.rocket::after {\n    content: \"\";\n    position: absolute;\n}\n\n/* 로켓 앞의 가짜 요소 */\n.rocket::before {\n    /* 날개 회전 애니메이션 */\n    -webkit-animation: rotateFins 1s infinite;\n    animation: rotateFins 1s infinite;\n    /* 배경 그라데이션 */\n    background: #bababa;\n    background: linear-gradient(#990000, red, #990000);\n    /* 테두리와 위치 */\n    border: 2px solid transparent;\n    border-radius: 0 50% 50% 0;\n    height: 140%;\n    top: 50%;\n    transform: translate(0, -50%);\n    left: 6px;\n    width: 20%;\n}\n\n/* 로켓 뒤의 가짜 요소 */\n.rocket::after {\n    /* 테두리 스타일 */\n    border: 7px solid transparent;\n    border-left: 14px solid rgba(0, 0, 0, 0.4);\n    border-radius: 15%;\n    /* 위치 */\n    right: -16px;\n    top: 2px;\n}\n\n/* 로켓 추가효과 스타일 */\n.rocket-extras {\n    /* 추가효과 이동 애니메이션 */\n    -webkit-animation: moveExtras 1s infinite;\n    animation: moveExtras 1s infinite;\n    /* 배경과 크기 */\n    background: rgba(0, 0, 0, 0.4);\n    height: 2px;\n    left: 12px;\n    margin: -2px 0 0;\n    position: absolute;\n    top: 50%;\n    transform: translate(0, -50%);\n    width: 10px;\n}\n\n/* 로켓 추가효과의 가짜 요소 */\n.rocket-extras::before,\n.rocket-extras::after {\n    content: \"\";\n    position: absolute;\n}\n\n/* 로켓 추가효과 앞의 가짜 요소 */\n.rocket-extras::before {\n    /* 배경 */\n    background: white;\n    /* 테두리와 위치 */\n    border-radius: 50%;\n    height: 5px;\n    right: -7px;\n    top: -1px;\n    width: 5px;\n}\n\n/* 로켓 추가효과 뒤의 가짜 요소 */\n.rocket-extras::after {\n    /* 배경과 테두리 */\n    background: #cc0000;\n    border-top: 1px solid #660000;\n    /* 위치 */\n    height: 1px;\n    left: -10px;\n    top: 1px;\n    width: 6px;\n}\n\n/* 제트 스타일 */\n.jet {\n    /* 크기와 위치 */\n    height: 10px;\n    left: -10px;\n    position: absolute;\n    top: calc(50% - 5px);\n    width: 10px;\n}\n\n/* 제트의 가짜 요소와 span */\n.jet::before,\n.jet::after,\n.jet span {\n    /* 연기 이동 애니메이션 */\n    -webkit-animation: moveSmoke 0.3s infinite;\n    animation: moveSmoke 0.3s infinite;\n    /* 배경, 크기, 위치 */\n    background: #e09100;\n    border-radius: 50%;\n    content: \"\";\n    filter: blur(2px);\n    height: 8px;\n    left: -6px;\n    opacity: 1;\n    position: absolute;\n    transform: translate(0, 0) scale(1);\n    top: 1px;\n    width: 15px;\n}\n\n/* 제트 뒤의 가짜 요소 */\n.jet::after {\n    /* 애니메이션 지연 */\n    -webkit-animation-delay: 0.1s;\n    animation-delay: 0.1s;\n}\n\n/* 제트 내 span */\n.jet span {\n    /* 애니메이션 지연 */\n    -webkit-animation-delay: 0.2s;\n    animation-delay: 0.2s;\n}\n```\n\n# 단계 4: 애니메이션 키프레임 추가하기\n\n<div class=\"content-ad\"></div>\n\n우리의 로켓 로더를 활성화하기 위해 다양한 애니메이션을 위한 키프레임을 정의해야 합니다. 이러한 키프레임은 입자, 로켓, 지느러미, 그리고 연기의 움직임을 제어할 것입니다. CSS 파일에 제공된 애니메이션 키프레임을 복사하여 붙여넣어주세요.\n\n```js\n/* 입자 움직임 애니메이션을 위한 키프레임 */\n@-webkit-keyframes moveParticles {\n    100% {\n        background-position-x: -500rem;\n    }\n}\n\n@keyframes moveParticles {\n    100% {\n        background-position-x: -500rem;\n    }\n}\n\n/* 로켓 이동 애니메이션을 위한 키프레임 */\n@-webkit-keyframes moveRocket {\n\n    0%,\n    100% {\n        transform: translate(-50%, calc(-50% - 1rem));\n    }\n\n    50% {\n        transform: translate(-50%, calc(-50% + 1rem));\n    }\n}\n\n@keyframes moveRocket {\n\n    0%,\n    100% {\n        transform: translate(-50%, calc(-50% - 1rem));\n    }\n\n    50% {\n        transform: translate(-50%, calc(-50% + 1rem));\n    }\n}\n\n/* 지느러미 회전 애니메이션을 위한 키프레임 */\n@-webkit-keyframes rotateFins {\n\n    0%,\n    100% {\n        height: 140%;\n    }\n\n    50% {\n        border-top: 2px solid #660000;\n        border-bottom: 2px solid #660000;\n        height: 110%;\n    }\n}\n\n@keyframes rotateFins {\n\n    0%,\n    100% {\n        height: 140%;\n    }\n\n    50% {\n        border-top: 2px solid #660000;\n        border-bottom: 2px solid #660000;\n        height: 110%;\n    }\n}\n\n/* 추가 요소 이동 애니메이션을 위한 키프레임 */\n@-webkit-keyframes moveExtras {\n\n    0%,\n    100% {\n        transform: translate(0, calc(-50% + 0.1rem));\n    }\n\n    50% {\n        transform: translate(0, calc(-50% - 0.1rem));\n    }\n}\n\n@keyframes moveExtras {\n\n    0%,\n    100% {\n        transform: translate(0, calc(-50% + 0.1rem));\n    }\n\n    50% {\n        transform: translate(0, calc(-50% - 0.1rem));\n    }\n}\n\n/* 연기 이동 애니메이션을 위한 키프레임 */\n@-webkit-keyframes moveSmoke {\n    100% {\n        filter: blur(3px);\n        opacity: 0;\n        transform: translate(-40px, 0) scale(2);\n    }\n}\n\n@keyframes moveSmoke {\n    100% {\n        filter: blur(3px);\n        opacity: 0;\n        transform: translate(-40px, 0) scale(2);\n    }\n}\n\n/* 깜빡임 애니메이션을 위한 키프레임 */\n@-webkit-keyframes blink {\n\n    0%,\n    100% {\n        opacity: 1;\n    }\n\n    50% {\n        opacity: 0.2;\n    }\n}\n\n@keyframes blink {\n\n    0%,\n    100% {\n        opacity: 1;\n    }\n\n    50% {\n        opacity: 0.2;\n    }\n}\n```\n\n# 단계 5: 테스트 및 조정\n\n모든 파일을 저장하고 웹 브라우저에서 index.html 파일을 엽니다. 애니메이션된 로켓 로더가 작동하는 것을 확인할 수 있어야 합니다! CSS 스타일과 애니메이션 키프레임을 조정하여 로더를 원하는 대로 사용자 정의할 수 있습니다. 색상, 크기, 및 시간을 조절하여 원하는 효과를 얻을 수 있습니다.  ","ogImage":{"url":"/assets/img/2024-05-01-BuildinganAnimatedRocketLoaderUsingHTMLandCSS_0.png"},"coverImage":"/assets/img/2024-05-01-BuildinganAnimatedRocketLoaderUsingHTMLandCSS_0.png","tag":["Tech"],"readingTime":9},{"title":"프론트엔드 개발자라면 반드시 알아야 하는 HTML 태그 30가지","description":"","date":"2024-05-01 23:09","slug":"2024-05-01-30HTMLTagstoknow","content":"\n\n<img src=\"/assets/img/2024-05-01-30HTMLTagstoknow_0.png\" />\n\n저번 글에서 HTML 5로 시작하는 방법을 설명했어요. 시작하는 중이신 분들은 여기를 읽어보세요. 이번 글에서는 앞으로 제가 사용할 30가지 태그를 소개할 거예요.\n\n- Doctype\n문서 유형 선언은 HTML 파일의 첫 줄로, 우리 웹사이트가 어떤 버전의 HTML을 사용하는지 알려줍니다. 아래 단순한 한 줄로 HTML 파일을 시작할 수 있어요.\n\n```js\n<!DOCTYPE> \n```\n\n<div class=\"content-ad\"></div>\n\n2. HTML\nHTML 요소는 다큐먼트 선언 후에 작성되며 모든 HTML 코드를 감싸는 역할을 합니다. 때로는 루트 요소로도 알려져 있어요.\n\n```js\n<html>\n```\n\n3. Head\nHead 요소는 HTML 페이지에서 뷰어에게 표시되는 콘텐츠가 아닌 모든 것을 감싸는 데 사용됩니다. 이에는 검색 결과에 나타날 키워드와 페이지 설명, 콘텐츠를 스타일링하는 CSS, 문자 세트 선언 등이 포함됩니다.\n\n```js\n<head></head>\n```\n\n<div class=\"content-ad\"></div>\n\n4. 제목\n이것은 페이지의 제목을 설정합니다. 이는 페이지가 로드된 브라우저 탭에 표시되는 제목입니다. 페이지 제목은 북마크될 때 페이지를 설명하는 데도 사용됩니다. 이 문장을 Head 요소 안에 아래와 같이 작성할 수 있어요.\n\n```js\n<title>\n```\n\n5. 본문\nbody 태그에는 웹페이지에 나타날 모든 내용이 포함됩니다. 이에는 텍스트, 이미지, 비디오, 게임, 재생 가능한 오디오 트랙 또는 기타 모든 것이 포함됩니다. Head 태그로 둘러싸인 모든 콘텐츠 아래에 body 태그를 작성할 수 있어요.\n\n```js\n<body>\n```\n\n<div class=\"content-ad\"></div>\n\n6. H1부터 H6\nHTML에서는 머리글을 6단계로 나눌 수 있습니다. H1로 표시하면 웹 브라우저가 이 정보가 페이지에서 가장 중요한 부분임을 인식합니다. H2는 그 다음으로 중요한 정보이며, 이와 같이 H6까지 계속됩니다. 글꼴 크기는 CSS로 결정하는 것이 좋으며, 정보 계층구조의 중요성을 웹 브라우저에 명확히 전달하기 위해 HTML 태그를 사용하는 것이 좋습니다.\n\n\n7. P\nP 태그는 문단을 의미합니다. 이 태그 사이에는 정보의 문단을 저장합니다.\n\n\n\n<div class=\"content-ad\"></div>\n\n8. 줄 바꿈\n줄 바꿈 태그는 단락이나 제목 텍스트에서 줄 바꿈을 생성하는데 사용됩니다.\n\n```html\n<br>\n```\n\n9. HTML 코드 주석 처리하기\nHTML 코드에 주석을 달아주는 것은 파일이 어떻게 구성되어 있는지 다른 개발자들에게 전달하는 중요한 단계입니다. 이 코드는 브라우저에 나타나지 않습니다. 주석을 사용하는 것은 코드를 읽기 쉽게 유지하기 위한 프로그래밍 전반에 걸쳐 중요한 단계입니다. 주석을 달기 위해 양쪽에 각각 두 개의 대시로 작성합니다.\n\n```html\n<!--이렇게 코드에 주석을 달 수 있습니다--> \n```\n\n<div class=\"content-ad\"></div>\n\n10. 굵게 \n텍스트를 굵게 표시합니다.\n\n```js\n<strong>굵은 텍스트</strong>\n```\n\n11. Div\nDivision 태그는 아마도 HTML에서 가장 많이 사용되는 태그 중 하나입니다. 콘텐츠 섹션을 감싸기 위해 사용됩니다. Div 요소는 페이지 요소의 블록 레벨 조직 및 스타일링에 사용됩니다.\n\n```js\n<div></div>\n```\n\n<div class=\"content-ad\"></div>\n\n12. 헤더\n헤더 요소는 소개 콘텐츠나 탐색 링크 모음을 담는 컨테이너를 나타냅니다.\n\n```js\n<header></header>\n```\n\n13. 푸터\n푸터 요소는 저작자 정보, 저작권 정보, 연락처 정보, 사이트맵, 맨 위로 가기 링크 및 관련 문서와 같은 정보를 담는 컨테이너를 나타냅니다.\n\n```js\n<footer></footer>\n```\n\n<div class=\"content-ad\"></div>\n\n14. Main\n문서의 주요 콘텐츠를 지정합니다.\n\n```js\n<main></main>\n```\n\n15. Details\n사용자가 볼 수 있거나 숨길 수 있는 추가 정보를 정의합니다. 클릭하면 더 많은 정보를 공유하는 드롭다운 상자를 만듭니다.\n\n```js\n<details></details>\n```\n\n<div class=\"content-ad\"></div>\n\n16. 요약\n`details` 요소에 대한 표시 제목을 정의합니다.\n\n```js\n<summary></summary>\n```\n\n17. 문서\n문서를 정의합니다.\n\n```js\n<article></article>\n```\n\n<div class=\"content-ad\"></div>\n\n18. 약어 또는 두문자어\nHTML은 브라우저에게 약어가 무엇을 의미하는지 알려주는 `abbr` 태그를 제공합니다. 이는 접근성이 좋은 웹사이트를 위해 유용합니다. 웹사이트 방문자들은 제목 속성에 있는 텍스트를 보지 못하지만 브라우저, 검색 엔진 및 보조 기술은 이 정보를 사용합니다. 아래 코드는 \"이 웹사이트는 HTML에 관한 모든 것입니다\"라는 텍스트 줄을 출력합니다.\n\n```js\nThis website is all about <abbr title=\"하이퍼텍스트 마크업 언어\">HTML</abbr>.\n```\n\n19. 주소\n`address` 태그는 사람이나 조직의 연락 정보를 나타내는 웹사이트 섹션을 감싸는 데 유용합니다. 만약 `address` 태그가 `body` 태그 내에서 사용되면 문서의 연락 정보를 나타내고, `address` 태그가 `article` 태그 내에서 사용되면 기사의 연락 정보를 나타냅니다.\n\n```js\n<address>\n기관명: MacTavish Designs <br>\n웹 사이트:\n<a href=\"https://zackmactavish.github.io/MacTavish/\">\nZack MacTavish</a><br>\n포틀랜드, 오레곤\n</address>\n```\n\n<div class=\"content-ad\"></div>\n\n20. 스팬\n스팬은 디브와 비슷하지만, 스팬 요소는 인라인 구성 및 스타일링에 사용됩니다.\n\n```js\n<span></span>\n```\n\n21. 스크립트\n스크립트 태그는 자바스크립트 또는 다른 클라이언트 측 스크립트를 프로젝트에 추가하는 방법입니다.\n\n```js\n<script></script>\n```\n\n<div class=\"content-ad\"></div>\n\n22. No Script\n스크립트를 사용할 수 없는 경우 대체 콘텐츠를 표시하기 위해 no script 태그를 사용합니다.\n\n```js\n<noscript>당신의 브라우저는 자바스크립트를 지원하지 않습니다!</noscript>\n```\n\n23. Image\nimg 태그는 브라우저에 이미지를 표시하는 데 사용됩니다. src, alt, height, width와 같은 속성을 추가할 수 있습니다. src 속성은 이미지가 저장된 위치를 가리키고 브라우저에 이미지를 표시하기 위해 가져옵니다. alt 속성은 이미지에 대한 메타 설명 텍스트를 추가할 수 있어 브라우저에 표시되지 않습니다.\n\n```js\n<img src = \"new.svg\" alt = \"craft\" height = \"100px\" width = \"100px\" />\n```\n\n<div class=\"content-ad\"></div>\n\n24. 순서 없는 목록\n목록 항목을 배치할 수있는 순서 없는 목록을 정의합니다.\n\n```js\n<ul></ul>\n```\n\n25. 순서 있는 목록\n목록 항목을 배치할 수있는 순서 있는 목록을 정의합니다.\n\n```js\n<ol></ol>\n```\n\n<div class=\"content-ad\"></div>\n\n26. 목록 항목\n순서가 없는 목록이나 순서가 있는 목록에 위치할 수 있는 목록 항목을 정의합니다. 아래에 순서가 없는 목록에 애완 동물의 예시를 보여드리겠습니다.\n\n```js\n- 강아지\n- 고양이\n- 거북이\n```\n\n27. 하이퍼링크\nHTML 페이지에 하이퍼링크를 추가하려면 `a` 태그로 묶어주면 됩니다. 이를 통해 href 속성을 얻어 링크를 지정할 수 있습니다. 만약 하이퍼링크를 새 탭에서 열고 싶다면 target=\"_blank\" 속성을 추가할 수 있습니다.\n\n```js\n[a here](https://www.w3schools.comhttps://zackmactavish.github.io/MacTavish/){:target=\"_blank\"}: 내 웹사이트 방문하기!\n```\n\n<div class=\"content-ad\"></div>\n\n28. Nav\n\n`nav` 태그는 네비게이션 링크 세트를 정의합니다. 모든 링크가 `nav` 요소 내에 있어야 하는 것은 아님을 주의하세요. `nav` 요소는 주요 네비게이션 링크 블록에만 사용됩니다. 스크린 리더와 같은 브라우저는 이 요소를 사용하여 해당 콘텐츠의 초기 렌더링을 생략할지 여부를 결정할 수 있습니다.\n\n\n```html\n<nav></nav>\n```\n\n29. Button\n\n이 태그는 웹 페이지에 클릭 가능한 버튼을 배치합니다.\n\n\n```html\n<button type=\"button\">Click Me!</button>\n```\n\n<div class=\"content-ad\"></div>\n\n30. 양식\n`form` 태그는 사용자 입력을 위한 HTML 양식을 만들 때 사용됩니다. 이는 설문조사, 로그인 페이지 또는 회원 가입 등 여러 목적으로 사용될 수 있습니다.\n\n```js\n<form></form>\n```\n\n`form` 요소는 다음과 같은 양식 요소 중 하나 이상을 포함할 수 있습니다:\n\n- `input`\n- `textarea`\n- `button`\n- `select`\n- `option`\n- `optgroup`\n- `fieldset`\n- `label`\n- `output`\n\n<div class=\"content-ad\"></div>\n\n지금까지 읽어 주셔서 감사합니다! 추가 콘텐츠를 만들어 HTML 페이지를 작성할 것이며, 폼을 만들고 다른 태그를 구현하는 것을 더 살펴볼 것입니다. 저의 향후 포스트를 보려면 구독해주세요!","ogImage":{"url":"/assets/img/2024-05-01-30HTMLTagstoknow_0.png"},"coverImage":"/assets/img/2024-05-01-30HTMLTagstoknow_0.png","tag":["Tech"],"readingTime":5},{"title":"HTML에서 접근성을 준수하는 방법","description":"","date":"2024-05-01 23:07","slug":"2024-05-01-InaccessiblenativeHTMLselectmultiple","content":"\n\n## 접근하기 어려운 HTML\n\n![이미지](/assets/img/2024-05-01-InaccessiblenativeHTMLselectmultiple_0.png)\n\n아마도 많은 접근성 옹호자(그 중 한 명이 바로 저입니다)로부터 들어왔을 것입니다. 제 3자 UI 프레임워크 및 라이브러리의 사용을 피하거나 최소화해야 한다는 제의를 말이죠. 우리는 항상 네이티브 HTML을 사용하는 것이 좋다고 말하는 것입니다. (어떤 홈-롤드, ARIA가 풍부한 div와 span rave 대신)\n\n거의 항상 말이죠.\n\n<div class=\"content-ad\"></div>\n\n일부 네이티브 HTML 구현은 사용이 어려운 경우가 있습니다. 이 기사는 `select multiple` 요소에 초점을 맞출 것입니다.\n\n## 작동 방식\n\n`select multiple` 요소의 아이디어는 사용자가 그룹화된 체크박스 목록과 유사하게 제어를 위해 여러 옵션을 선택할 수 있다는 것입니다.\n\n그러나 이 기능이 사용하기 어렵다는 것뿐만 아니라 사용자 친화적이지도 않다는 것을 알게 될 것입니다. 아래는 마크업입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<label for=\"lbmPets\">애완동물</label>\n<select id=\"lbmPets\" multiple>\n  <option>강아지</option>\n  <option>고양이</option>\n  <option>고슴도치</option>\n  <option>뱀</option>\n  <option>조랑말</option>\n  <option>암석</option>\n</select>\n```\n\n위의 마크업은 이렇게 렌더링됩니다:\n\n![애완동물 선택 창](/assets/img/2024-05-01-InaccessiblenativeHTMLselectmultiple_1.png)\n\n그 multiple 속성이 설정되어 있어서, 사용자는 여러 애완동물을 선택할 수 있습니다. 사용자가 어떻게 여러 옵션을 선택할 수 있나요?\n\n<div class=\"content-ad\"></div>\n\n## 마우스를 사용하여 여러 개 선택하기\n\n만약 마우스만 사용한다면, 연속적인 옵션들만 선택할 수 있습니다. \"개\"와 \"고슴도치\"와 같이 연속되지 않는 옵션을 선택하려면, 행운을 빌어야 합니다. 내가 알기로는, 그것은 마우스만을 사용하면 불가능합니다.\n\n## 마우스와 키보드를 사용하여 여러 개 선택하기\n\n마우스와 키보드를 사용하여 연속적이고 비연속적인 옵션들을 선택할 수 있습니다. 연속적인 항목을 선택하려면, 선택하고자 하는 범위의 한쪽 끝을 선택한 뒤 Shift 키를 누른 채로 다른 끝에 해당하는 옵션을 클릭하면 됩니다:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](https://miro.medium.com/v2/resize:fit:804/1*JuD893iR1NkC9p47BgPVXw.gif)\n\n비연속 항목을 선택하려면 하나의 옵션을 선택하고 Ctrl 키를 누른 채로 다음 옵션을 클릭한 후 필요한 만큼 반복하세요:\n\n![이미지](https://miro.medium.com/v2/resize:fit:804/1*9RnOj1NxOyKCm34LmTE36g.gif)\n\n## 키보드만으로 여러 항목 선택\n\n<div class=\"content-ad\"></div>\n\n키보드만 사용하면 마우스 클릭 대신 스페이스 바를 사용하여 동일한 작업을 수행할 수 있어요. 선택 상태를 전환하고 포커스를 조정하는 데 약간 까다로울 수 있지만 가능해요:\n\n![demo](https://miro.medium.com/v2/resize:fit:804/1*_OODTheBxFKunrqslpacqg.gif)\n\n## 독자 도전 과제\n\n여러분에게 도전 과제가 있어요: 아래 데모를 사용하여 한 손으로 여러 비연속 옵션을 선택해 보세요.\n\n<div class=\"content-ad\"></div>\n\nhttps://jsfiddle.net/6azcb2hu/\n\n이것을 할 수 있었나요?\n\n다른 HTML 요소들과 비교하면 이것은 상당히 어려울 것입니다. 나는 키보드만을 사용하여 손이 어색하게 Ctrl 키, Space 바 및 화살표 키에 손을 뻗어야만 성공했어.\n\n문제가 보이나요?\n\n<div class=\"content-ad\"></div>\n\n아직 보조 기술에 대해 언급하지 않았네요.\n\n## 보조 기술이 있는 select multiple 컨트롤\n\n그렇다면 보조 기술(AT)을 사용할 때는 어떨까요? 앞서 설명한 것처럼 비-AT 사용자가 겪는 제약 사항과 동일한 제한 사항이 있습니다. 또한 이전에 선택한 옵션을 기억해야 합니다.\n\n예를 들어, `select multiple` 컨트롤이 포커스를 가지면 사용자에게 레이블의 텍스트, 현재 선택된 옵션의 텍스트, 해당 옵션이 위치한 위치(예: \"6개 중 2개\"), 및 해당 옵션이 선택되었는지에 대한 정보를 전달합니다.\n\n<div class=\"content-ad\"></div>\n\n그러나 해당 컨트롤이 포커스를 잃으면, 다시 포커스를 받을 때 선택된 옵션을 확인할 방법이 없다고 보입니다. 컨트롤이 다시 포커스를 받으면 주로 레이블 텍스트와 현재 선택된 옵션이 소개됩니다.\n\n여기서 위쪽 또는 아래쪽 화살표 키를 누르면 모든 옵션이 선택 취소됩니다. 이것만으로도 이 컨트롤이 일회용 컨트롤임을 의미합니다. 시각장애를 가진 사용자가 이 페이지로 돌아가면 옵션을 다시 선택해야 합니다.\n\n결국, 시각 보조 기기에 대해 이 컨트롤은 가치 있는 것보다 오히려 나쁜 영향을 미칩니다.\n\n# 이제 어떻게 해야 할까요?\n\n<div class=\"content-ad\"></div>\n\n## 왜 이것이 문제인가요?\n\n이것은 문제입니다. 왜냐하면 이 컨트롤의 사용 가능한 기능 부족, 보조 기술 지원 및 사용자 정의 가능성이 개발자들을 보통 접근성을 별로 고려하지 않거나 대충 처리하는 써드파티 라이브러리에 의존하도록 유도하기 때문입니다.\n\nSelect2 및 SumoSelect와 같은 써드파티 콤보박스 라이브러리는 다중 선택 동작을 가능하게 하며 개발자들이 찾는 많은 기능과 사용자 정의 가능성을 제공하지만, 두 가지 라이브러리 (그리고 다른 라이브러리들)도 각자의 접근성 문제를 가지고 있습니다.\n\n## 해결책은 있을까요?\n\n<div class=\"content-ad\"></div>\n\n그래서, 무엇을 할 수 있을까요?\n\nW3C 내부의 커뮤니티 그룹인 OpenUI가 있습니다. \"HTML, CSS, JS 및 Web API를 결합하여 웹 개발자가 현대적인 맞춤형 사용자 인터페이스를 만들 수 있는 기술을 제공하기 위한 더 큰 아키텍처 계획을 용이하게 하는 것을 목표로 합니다.\" (출처)\n\n간단히 말해, 그들은 W3C에서 검토하고 채택(또는 그렇지 않음)되는 표준을 제안합니다.\n\n그 중 하나의 제안은 'selectlist'라는 요소입니다. 이는 'select' 요소보다 훨씬 많은 사용자 정의 및 확장 기능을 제공하며, 관련 텍스트 삽입, 아이콘 추가, 스타일링 및 기타 몇 가지 기능을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n하지만 이게 접근 가능한건가요?\n\n음, 아니요. 전혀 아닙니다.\n\n사실, 데모 페이지에서 일부 컨트롤에 키보드로 액세스할 수조차 없습니다. 직접 테스트하려면 실험적인 웹 플랫폼 기능을 허용하는 브라우저 설정을 변경해야 합니다. 지침은 데모 페이지에 나와 있어요.\n\n하지만... 노트에 적혀 있는대로:\n\n<div class=\"content-ad\"></div>\n\n그래서, 본질적으로는 작동 컨셉이지만 접근성이 거의 구현되지 않은 상태입니다. 이 요소(또는 그 변형)이 채택되면, 접근성의 기본적인 구현을 보장하기 위해 엄격한 검토를 거쳐야 할 것입니다.\n\n해당 요소는 WHATWG의 Github에서 이슈로 제안되었으며, 본 문서 작성 시점에서 아직 오픈 상태입니다.\n\n## 그럼 그 전까지는 어떻게 할까요?\n\n제 생각이 틀리지 않았다면, `selectlist`가 곧 구현될 것으로 생각하기는 어렵습니다(혹시 그렇게 되더라도). 그래서 기다리는 것은 좋은 선택이 아닙니다. 심지어 내일 구현된다 해도 브라우저 지원이 느릴 가능성이 높습니다.\n\n<div class=\"content-ad\"></div>\n\n한편, 여러 가지 옵션이 있습니다.\n\n옵션 1: 여러 개의 체크박스 사용\n\n많은 잠재적 선택 옵션이 있는 경우 이 방법이 맞지 않을 수 있습니다. 그러나 몇 개의 옵션이 있는 경우 그룹화된 체크박스를 사용하는 것이 완전히 적합합니다 (그리고 접근성이 좋습니다).\n\n체크박스를 그룹화하기 위해 `fieldset`와 `legend`를 사용하는 것을 권장합니다 (ARIA나 역할 속성은 필요하지 않습니다):\n\n<div class=\"content-ad\"></div>\n\n```js\n<fieldset>\n<legend>Pets</legend>\n<label><input type=\"checkbox\" id=\"chkDog\">Dog</label>\n<label><input type=\"checkbox\" id=\"chkCat\">Cat</label>\n<label><input type=\"checkbox\" id=\"chkHedgehog\">Hedgehog</label>\n<label><input type=\"checkbox\" id=\"chkSnake\">Snake</label>\n<label><input type=\"checkbox\" id=\"chkPony\">Pony</label>\n<label><input type=\"checkbox\" id=\"chkRock\">Rock</label>\n</fieldset>\n```\n\n![2024-05-01-Inaccessible native HTML select multiple](/assets/img/2024-05-01-InaccessiblenativeHTMLselectmultiple_2.png)\n\n옵션 2: (매우 주의해서) 써드 파티 라이브러리 사용하기\n\n많은 옵션이 있거나 이를 그룹화된 체크박스로 표시하는 것이 적절하지 않은 경우, 써드 파티 라이브러리를 사용해야 할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n개발 중에 알아두세요: 현재로서는 즉시 접근할 수 있는 제3자 멀티-선택 컨트롤을 아직은 본 적이 없습니다.\n\n어떤 사람들은 더 좋은 것을 만들어보기도 했습니다. 예를 들어, WooCommerce에서 Select2 프로젝트를 포크하여 더 접근 가능한 경험을 제공하고자 하는 SelectWoo를 만들었습니다. 그러나 심지어 그 구현에도 몇 가지 문제가 있습니다.\n\n요약하면, 이 방법을 선택한다면 JavaScript를 많이 조정하고 브라우저/보조기술(AT) 테스트를 많이 준비해야 합니다.\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n이 문제가 발생하는 것은 정말 싫은 일이에요.\n\n`select multiple` 요소는 분명히 접근성이 떨어지며, 절연, 운동 및 기억 도전과 보조 기술 사용자에게 불필요한 부담입니다.\n\n개발자들은 `select` 요소에 대한 불만을 솔직하게 표현해 왔으며, multiple 속성이 추가되면 더욱 그렇습니다.\n\n저의 겸손한 권고는 다중 선택 제어가 필요한 상황을 피할 수 있는 방법을 찾아보는 것입니다. 범위를 좁히거나 옵션을 제한하는 등의 방법을 통해요. 불가피한 상황일 수 있겠지만, 가능하다면 그룹화된 체크박스를 사용해보세요.\n\n<div class=\"content-ad\"></div>\n\n만약 그 방법을 선택할 수 없고, 제3자 솔루션을 도입해야 한다면, 준비하세요. 접근성을 확보하기 위해 매우 괴로운 작업을 많이 해야 할 것입니다. 그리고 접근성 감사자들이 그 제3자 컨트롤을 열심히 조사할 것입니다.\n\n그러니 철저히 테스트해 보세요!\n\n# 링크\n\n## 언급된\n\n<div class=\"content-ad\"></div>\n\n- `select multiple`에 대한 JSFiddle 예시\n- Select2\n- SumoSelect\n- OpenUI\n- OpenUI: Charter\n- Open UI: `selectlist` 데모 페이지\n- WHATWG HTML GitHub 이슈: `selectlist` 요소\n- SelectWoo\n\n## 관련 자료\n\n- WHATWG HTML GitHub 이슈: `select` 사용자 정의화를 위한 Opt-in\n- MDN Web 문서: multiple 속성\n\n## 더 읽어보기\n\n<div class=\"content-ad\"></div>\n\n- 산드리나 페레이라에 의한 네이티브 및 커스텀 선택 요소 사이의 균형 찾기\n- 그렉 휘트워스에 의한 'select' 컨트롤을 스타일링할 수 있을까요?\n- 사라 히글리에 의한 'select' 당신의 독재\n- 멘디 지에에 의한 대량 경험: 다중 선택 및 대량 작업 탐색","ogImage":{"url":"/assets/img/2024-05-01-InaccessiblenativeHTMLselectmultiple_0.png"},"coverImage":"/assets/img/2024-05-01-InaccessiblenativeHTMLselectmultiple_0.png","tag":["Tech"],"readingTime":7},{"title":"시니어 개발자도 모르는 CSS 속성과 기술들","description":"","date":"2024-05-01 23:05","slug":"2024-05-01-UnveilingHiddenTreasuresLesser-KnownCSSPropertiesandTechniques","content":"\n\n<img src=\"/assets/img/2024-05-01-UnveilingHiddenTreasuresLesser-KnownCSSPropertiesandTechniques_0.png\" />\n\n- mix-blend-mode: 창의적 블렌딩 모드\n\n지루한 단색 배경과 직선적인 색에 지쳤나요? mix-blend-mode로 디자인에 창의성을 불어넣어 보세요. 이 속성을 사용하면 요소의 색상을 뒤에 있는 내용과 혼합하여 독특하고 눈에 띄는 효과를 만들 수 있습니다.\n\n```js\ndiv {\n  mix-blend-mode: multiply;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*2PbamXURjubWXJKy1oSWlg.gif)\n\n2. clip-path: 사용자 지정 모양 클리핑\n\n사각형 요소의 제약에서 벗어나 clip-path로 자유롭게 행동하세요. 이 속성을 사용하면 원, 다각형 또는 복잡한 곡선으로 요소에 사용자 지정 클리핑 경로를 정의할 수 있습니다. 지루한 직사각형은 이제 작별하고 동적이고 매력적인 디자인과 인사하세요.\n\n```js\ndiv {\n  clip-path: circle(50% at center);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n![Scroll Snap Example](https://miro.medium.com/v2/resize:fit:1212/1*_S39ZNCxYi2eOIh66HTmKg.gif)\n\n3. scroll-snap-type와 scroll-snap-align: 부드러운 스크롤링 제어\n\n스크롤 가능한 요소의 사용자 경험을 향상시키려면 scroll-snap-type 및 scroll-snap-align을 사용하세요. 이러한 속성을 사용하면 요소를 자동으로 특정 간격이나 위치에 맞춰 부드럽고 직관적인 스크롤 경험을 만들 수 있습니다.\n\n```js\nsection {\n  scroll-snap-type: y mandatory;\n}\n\ndiv {\n  scroll-snap-align: start;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n![이미지](https://miro.medium.com/v2/resize:fit:900/1*nt6BatwGw0hctcRxLiAi_Q.gif)\n\n4. backdrop-filter: 멋진 시각 효과\n\n백드롭 필터(backdrop-filter)로 디자인의 시각적 매력을 한층 높여보세요. 이 속성은 요소 뒤에 있는 영역에 흐림 또는 색상 이동과 같은 그래픽 효과를 적용하여 아름다운 시각적 효과를 만들어내며, 페이지 전체적인 미학을 향상시킵니다.\n\n```js\ndiv {\n  backdrop-filter: blur(5px);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*fn8-zI7MWHBHw73F8P0fBg.gif)\n\n5. will-change: 성능 최적화\n\n요소를 애니메이션화하거나 복잡한 변형을 적용할 때 성능이 저하될 수 있습니다. 여기서 will-change가 등장합니다. 이 속성은 브라우저에 미리 알려주어 요소의 속성이 변경될 것으로 예상되어 렌더링을 최적화하고 부드러운 애니메이션을 제공할 수 있게 합니다.\n\n```js\ndiv {\n  will-change: transform;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n6. shape-outside: 텍스트를 모양 주변으로 감싸기\n\n지루한 직사각형 모양에서 텍스트가 흐르는 것이 지겨우신가요? shape-outside으로 레이아웃에 활력을 불어넣어보세요. 이 속성은 텍스트가 감싸일 사용자 정의 모양을 정의할 수 있게 해주어 주변 요소와 상호작용하는 시각적으로 매력적인 레이아웃을 만들 수 있습니다.\n\n```js\nimg {\n  shape-outside: circle(50%);\n}\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1304/1*C5njQ4Z4M216a5M_OEygPA.gif\" />\n\n<div class=\"content-ad\"></div>\n\n7. 오버스크롤 동작 사용자 정의: 스크롤 동작을 제어하세요\n\n오버스크롤 동작을 통해 사용자가 스크롤 가능한 영역 끝에 도달했을 때 웹 페이지가 어떻게 반응하는지 제어하세요. 이 속성을 사용하면 브라우저가 스크롤 오버플로우를 처리하는 방법을 정의할 수 있습니다. 이는 오버플로우를 허용하거나 방지하거나 경계로 다시 되돌아가는 방식 중 어떻게 처리할지를 정할 수 있습니다.\n\n```js\ndiv {\n  overscroll-behavior: contain;\n}\n```\n\n![예시 이미지](https://miro.medium.com/v2/resize:fit:784/1*K_A4_GW4p9mkJzmU_YBUbg.gif)\n\n<div class=\"content-ad\"></div>\n\n8. 텍스트 방향 및 writing-mode: 수직 텍스트 레이아웃\n\n일부 아시아 스크립트와 같이 위에서 아래로 또는 오른쪽에서 왼쪽으로 전통적으로 읽는 언어에 대해, text-orientation 및 writing-mode은 필수적인 도구를 제공합니다. 이러한 속성들은 텍스트의 방향과 방향을 제어하여 수직 레이아웃을 가능하게하고 접근성을 향상시키는 데 도움을 줍니다.\n\n```js\np {\n  writing-mode: vertical-lr;\n  text-orientation: upright;\n}\n```\n\n![수직 텍스트 레이아웃](https://miro.medium.com/v2/resize:fit:1400/1*Wz7buEDtszMgOhHrF-tbTg.gif)\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*4MPGEuRjtxEsaUJ-FEgOhQ.gif)\n\n9. content-visibility: 렌더링 성능 향상\n\n대량의 목록이나 그리드를 다룰 때 렌더링 성능이 저하될 수 있습니다. content-visibility는 브라우저가 오프스크린 콘텐츠를 필요한 경우까지 렌더링을 건너뛸 수 있게 해 성능을 크게 향상시키고 리소스 소비를 줄일 수 있습니다.\n\n```js\nul {\n  content-visibility: auto;\n}\n``` \n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*C2Q223zce9QYqesknQHaNQ.gif)\n\n10. aspect-ratio: Preserving Aspect Ratios\n\n비디오나 컨테이너와 같은 요소들의 비율을 유지하는 것은 어려울 수 있지만, aspect-ratio 속성을 사용하면 이 작업을 간단히 할 수 있습니다. 이 속성을 사용하면 요소의 원하는 종횡비를 지정할 수 있어 내용이나 크기와 관계없이 비례적으로 크기가 조절됨을 보장할 수 있습니다.\n\n```js\ndiv {\n  aspect-ratio: 16 / 9;\n}\n``` \n\n<div class=\"content-ad\"></div>\n\n\n![CSS](https://miro.medium.com/v2/resize:fit:1400/1*FTxfXRBfT7sTlZHRG3oolQ.gif)\n\nCSS는 웹 디자이너와 개발자들에게 다양한 가능성을 제공하는 다재다능한 언어입니다. 여기서 강조된 잘 알려지지 않은 속성과 기술을 탐험함으로써, 여러분의 프로젝트에서 창의성, 효율성, 그리고 성능의 새로운 차원을 개척할 수 있습니다. 이 숨겨진 보석들을 받아들이고, 여러분의 디자인이 새로운 우아함과 기능성으로 번성하는 것을 지켜보세요.","ogImage":{"url":"/assets/img/2024-05-01-UnveilingHiddenTreasuresLesser-KnownCSSPropertiesandTechniques_0.png"},"coverImage":"/assets/img/2024-05-01-UnveilingHiddenTreasuresLesser-KnownCSSPropertiesandTechniques_0.png","tag":["Tech"],"readingTime":4},{"title":"시스템 객체 확장으로 자바스크립트 DOM 빌더를 개선하는 방법","description":"","date":"2024-05-01 23:02","slug":"2024-05-01-BuildingABetterJavaScriptDOMBuilderPart2ExtendingSystemObjects","content":"\n\n<img src=\"/assets/img/2024-05-01-BuildingABetterJavaScriptDOMBuilderPart2ExtendingSystemObjects_0.png\" />\n\n첫 번째 부분에서는 DOM-JON 개념을 소개했습니다. HTML을 JSON 스타일의 네임스페이스로 재구성하고, 이를 DOM에 직접 번역하는 과정을 간단하게 소개하며, InnerHTML을 통해 작업하는 대신에 바로 DOM으로 이동하는 이유를 다뤘습니다.\n\n간단한 사이드 노트, 이 기사의 목적은 여러분에게 이것을 사용하는 방법을 가르치는 것이 아니라, 제가 이를 구축하는 과정에서의 사고 과정을 공유하는 것입니다. 실시간으로 말이에요. 피드백을 받기 위해 내 머릿속에 정리하기 위해 글로 써내리기도! 문서화 및 전체 웹사이트는 나중에 제작될 예정입니다.\n\n이번에는 기존 엘리먼트에 여러 노드를 쉽게 적용할 수 있도록하고, 이전 \"make\" 루틴의 \"attach\" 부분에 대한 액세스를 독립적으로 제공하고, 속성 처리를 더 견고하게 만들고자 합니다.\n\n<div class=\"content-ad\"></div>\n\n'원인은 몇 가지 부족한 것이 있기 때문이죠. Element.style 나 Element.dataset과 같은 속성은 Object.assign을 통해 요소에 적용할 수 없습니다. 속성에 직접 적용해야 합니다. 또한 DOM-JON 구조의 \"속성 객체\"를 사용하여 요소를 \"배치\"하는 방법과 같은 다른 정보를 전달할 수 있다면 좋겠어요.\n\n이 부분을 간단히 하는 가장 좋은 방법은 무엇일까요?\n\n# 시스템 객체 확장\n\n기본적으로, 저는 기존 Document, Object, Node 및 Element 객체에 내 방법을 추가할 것입니다. 부모 클래스에 대한 정적 값 및 프로토타입에 대해서도 추가할 겁니다.\n\n<div class=\"content-ad\"></div>\n\n이제 이 일에 대해 너무 많은 공포가 있어요. 마치 JavaScript의 강력하고 다용도 객체 모델을 수정하면 안 된다는 것처럼 말이죠. \"결코 하지 말아야 한다!\" 라고 하는 분들은 충분한 이유 없이 말하는 경우가 많아요. 하지만 합당한 우려가 세 가지 있습니다.\n\n- IE 7 / 이전 버전은 기존 객체에 프로토 타입 변경을 상속하지 않습니다.\n- 우리 자신의 함수와 언어의 미래 변경 사이에 이름 충돌의 문을 열어둡니다.\n- 변경할 수 있는 객체를 실수로 덮어쓰고, 이들을 열거할 수 있을 경우에 덮어쓸 수 있습니다.\n\n그 첫 번째 우려는 어질어질해요! 이제는 2024년이에요. 우리는 전혀 구식이 아닌 JavaScript를 쓰고 있어요. nullish coalescing, for..of, IE 어떤 버전에서도 작동하지 않는 spread / rest 연산자 등을 사용하고 있어요. 심지어 \"화살표 함수\"가 있으면 익스플로러의 JSCRIPT 엔진이 즉시 다운될 정도에요.\n\n두 번째로, 이 문제는 네이밍 규칙을 사용하여 쉽게 해결할 수 있어요. 이런 경우에는 lodash의 방식을 가져와서 모든 사용자 지정 메서드와 속성의 시작에 이중 밑줄을 사용할 거에요. 누군가가 비슷한 기교를 사용하지 않는 한 문제없을 거예요.\n\n<div class=\"content-ad\"></div>\n\n저 세 번째 코드는 대부분 사람들이 바보같은 일을 하는 경우에 발생한 것이에요:\n\n```js\nElement.prototype.__make = function(tagName, ...attach) {}\n```\n\n해야 할 것은 다음과 같아요:\n\n```js\nObject.defineProperty(\n  Element.prototype,\n  \"__make\",\n  { value : function(tagName, ...attach) {} }\n);\n```\n\n<div class=\"content-ad\"></div>\n\nObject.definePropert[ies | y]는 우리의 친구입니다... 그리고 JavaScript의 가장 안타깝게도 under-used한 부분 중 하나입니다. 전체 새 클래스를 만들지 않고 기존 Object에 추가하는 능력은 엄청 유용합니다. 시스템 객체가 이미 존재하기 때문에 전역 네임스페이스에 추가하는 것처럼 보이지 않습니다. 기본적으로 이러한 메서드에 의해 추가된 객체 속성 - 네, 속성, \"속성\"이 아니라. 그렇습니다, 심지어 DOM에 있는 경우도! - 객체에 대해 열거할 수 없게 만듭니다. 시스템 메서드만큼 \"숨겨진\" 것입니다. 현대 클래스에서 #을 접두사로 붙일 때와 같습니다. 필요할 경우에는 열거 가능하게 만들기 위해 인수 객체에 enumerable:true를 추가할 수도 있습니다.\n\n# Object.definepropert[ies|y] 개선하기\n\n이 함수들을 좋아하지만, 문법에는 약간 번잡한 부분이 있어 불필요하게 장황하게 느끼게 할 수 있습니다. 이전 기사에서처럼 \"타입\"을 가로채서 요소의 \"타입\"을 확인하여 일반 객체를 전달하면 defineProperty과 같이 동작하지만, 다른 값 유형은 자동으로 가장 일반적으로 사용하는 기술인 객체 `{` value `}`에 래핑하게 할 수 있습니다.\n\n이를 돕기 위해 - 특히 일반 Object를 후손으로부터 격리하기 위해 - 나만의 Object.__type 루틴을 추가합니다. JavaScript에서 가장 큰 고통 중 하나는 범용 \"데이터 유형\" 객체를 다른 객체와 구분하는 간편한 메커니즘이 없다는 것입니다. 일부 후손은 typeof == \"Object\"를 반환하고 이는 원하는 바가 아닐 수 있습니다... 그리고 배열 같은 것들이 instanceof와 같은 것을 사용해야 할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n목적을 달성하기 위해 Object.prototype에 이것을 적용하고 있어요.\n\n```js\n    __type : { get : function() {\n\n      let value = Object.prototype\n        .toString\n        .call(this)\n        .split(\" \", 2)\n        [1].slice(0, -1);\n\n      this.__define(\"__type\", value);\n      return value;\n    } } // Object.prototype.__type\n```\n\ntoString 메서드에는 실제 Object 클래스 이름이 포함되어 있어서 대부분 Array에는 Array라고, Node에는 Node라고, 일반 객체에는 Object라고 등등 표시될 거에요. 문자열 처리면에서 해당 값을 가져오는 것이 약간 무겁지만, Object.__type을 두 번 이상 요청하면 루틴이 두 번 호출되는 대신 define이 반환되도록 타입을 재정의할 수 있어요.\n\n그러나 \"boolean\"과 같은 소수의 Object에 대해 이것은 작동하지 않습니다. 이것은 명백히 Object인데도 Object.prototype에서 상속받지 않기 때문이에요. (프로토타입이 있는) Element 등 특정 하위 클래스를 알 필요가없는 다른 객체들이 있을 수 있어요. Element 인지 여부를 알고 싶은데 HTMLTableElement인지를 알아야 할 필요는 없는 것이죠.\n\n<div class=\"content-ad\"></div>\n\n따라서 미리 값의 값을 먼저 선언해야 합니다:\n\n```js\n for (let value of [\n   \"Array\", \"Boolean\", \"Date\", \"Element\",\n   \"Error\", \"Function\", \"Map\", \"Node\",\n   \"Number\", \"RegExp\", \"Set\", \"String\",\n   \"Symbol\", \"Text\"\n ]) Object.defineProperty(\n   window[value].prototype, \"__type\", { value }\n );\n```\n\n다행히도 모든 것이 window의 하위 요소이므로 window[value]를 사용하여 모든 이름을 배열에서 대상으로 할 수 있습니다. 매번 일일이 선언할 필요 없이 또는 [name, Object]와 같이 어리석고 무의미한 객체를 만들 필요가 없습니다.\n\n자바스크립트를 잘 몰라도 되는 분들을 위해,  value는 `{` \"value\": value `}`와 기능적으로 동일합니다. 객체 선언에서 변수를 그냥 넣으면 변수의 이름이 속성의 이름이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n지금은 우리가 __define 루틴을 만들 수 있게 했습니다.\n\n```js\n    __define : { value : function(name, value) {\n      /*\n        Object.defineProperty를 통해 속성을 할당합니다.\n        일반적인 Object가 전달되면 변경하지 않을 것이지만,\n        타입 지정된 Object나 다른 값이 전달되면 새 속성의 값을\n        할당할 Object로 이스케이프됩니다.\n        \n        전달된 객체대신 \"this\"를 반환하며, 내 의견으로는\n        훨씬 더 유용한 값입니다.\n      */\n      return Object.defineProperty(this, name,\n        \"Object\" == value.__type ? value : { value }\n      );\n    } }, // Object.prototype.__define\n```\n\n그리고 여러 속성을 설정하기 위한 __defineProps도 있습니다.\n\n```js\n    __defineProps : { value : function() {\n      for (const props of arguments) {\n        for (const [name, value] of Object.entries(props)) {\n          this.__define(name, value);\n        }\n      }\n      return this;\n    } }, // Object.prototype.__defineProps\n```\n\n<div class=\"content-ad\"></div>\n\n저는 이것이 단지 구문 설탕을 구현하는 것이라는 것을 알지만, 괜찮습니다.\n\n그들이 \"this\"를 반환한다는 것에 주목하세요. 이는 정의나 속성을 쉽게 연결할 수 있게 해줍니다. 수정된 객체 대신 적용된 객체를 반환하는 것은 많은 내장 JS 함수의 어리석은 부분 중 하나이며, 사용자 정의 메서드로 \"감싸는\" 또 다른 좋은 이유입니다.\n\n구문 설탕에 관해서 말씀드리면... 몇몇 흔히 사용되는 Object 메서드에 대한 별칭을 제공하고 있습니다. 많은 방법이 Object에 정적인 메서드인 것은, 조작된 객체를 전달해야 하는 번거로움을 초래합니다. JS의 대부분이 Object의 형식을 갖춘 객체임을 감안하면, 이것은 약간 어리석은 것처럼 보일 수 있습니다. \"Object.entries(myObject)\" 대신에 그냥 \"myObject.entries\"로 간단히 작성할 수 있어야 하는 부분에 대해 지금 까지 많이 타이핑하는 것이 싫어졌습니다.\n\n```js\n  /*\n    다음 속성들은 Object 클래스에서 혼란스럽게 정적입니다.\n    이는 타입 캐스팅을 강제로 이용하는 데 편리하지만,\n    이미 객체인 것을 알고 있을 때는 복잡하다고 생각할 수 있습니다!\n\n    그래서 우리는 몇 가지 별칭을 만들어 보겠습니다.\n  */\n  const makeAliasWrapper = (method, name) => {\n    Object.prototype.__define(\n      `__${name}`,\n      { [method] : function() {\n        return Object[name](this, ...arguments)\n      } }\n    );\n  }; // makeAliasWrapper\n  \n  for (const [ method, names ] of [\n    [ \"get\",\n      [ \"entries\", \"isFrozen\", \"isSealed\", \"isExtensible\", \"keys\", \"values\" ]\n    ],\n    [ \"value\",\n      [ \"assign\", \"freeze\", \"hasOwn\", \"is\", \"seal\", \"preventExtensions\" ]\n    ]\n  ]) for (name of names) makeAliasWrapper(method, name);\n```\n\n<div class=\"content-ad\"></div>\n\n저는 객체에 열거 가능한 키가 있는지 확인하는 \"__empty\" 게터도 만듭니다. 대부분의 경우, 이렇게 하는 이유는 제 기억력이 좋지 않아서 그런데요, \"__empty\"가 \"Object.keys(target).length == 0\" 또는 \"!target.__keys.length\"보다 기억하기 쉽거든요. 저의 별칭을 사용해서요.\n\n```js\n    __empty : { get : function() {\n      /*\n        객체에 열거 가능한 키가 있는지 편리하게\n        보고합니다.\n      */\n      return !this.__keys.length;\n    } }, // Object.prototype.__empty\n```\n\n그리고 이것으로 좋은 베이스라인 \"헬퍼\" 라이브러리가 완성됩니다.\n\n그리고, 네, 전 \"arrow\" 대신 전체 함수를 사용하고 있습니다. 이유는 실제로 뒤집는 객체인 \"this\"에 액세스해야 하기 때문이에요. \"this\"를 창으로 설정하는 화살표 함수는 정말 많은 시나리오에서 아무 쓸모가 없거든요.\n\n<div class=\"content-ad\"></div>\n\n# \"첨부\"와 \"setAttr\"\n\n실제로 make 루틴을 구현하기 전에, 자식 요소들과 속성 객체의 \"attach\"를 별도의 함수로 분리하고 싶어요. 여러 하위 루틴들을 구현하고 있기 때문에, 우리의 지역 범위에 있는 \"attachData\" 객체 내부에 룩업 테이블/객체를 만들고 있어요.\n\n우선은 \"sterile / void / empty\" 요소들에 대한 오류 감지를 해야해요. 이러한 요소에 속성을 첨부할 수 있지만 자식 노드는 첨부할 수 없어요. 나는 한 걸음 더 나아가서 특정 속성으로 String/Number 콘텐츠를 추가하는 것을 허용해요. 그러므로 우리는 다음을 할 수 있을 거에요:\n\n```js\n[ \"img=images/test.png\", \"Test Image\" ]\n```\n\n<div class=\"content-ad\"></div>\n\n아래의 코드조각을 Markdown포맷으로 표현하면 다음과 같습니다:\n\n```js\n<img src=\"images/test.png\" alt=\"Test Image\">\n```\n\n나는 어떤 함수나 배열을 통한 속성 처리도 허용한다.\n\n```js\ncanAttach: {\n    /*\n        null          첨부할 수 없음 (빈 태그)\n        Boolean true  첨부할 수 있음 (기본값으로 기재되지 않은 경우)\n        Array         인수 키에 할당할 값\n        Function      콜백 함수(element, value)을 처리함\n        String        this.setAttribute로 첨부\n    */\n    area     : \"alt\",\n    img      : \"alt\",\n    meta     : \"content\",\n    path     : \"content\",\n    track    : \"label\",\n    input    : \"value\",\n    base     : null,\n    br       : null,\n    col      : null,\n    embed    : null,\n    hr       : null,\n    link     : null,\n    param    : null,\n    source   : null,\n    wbr      : null,\n    // 재밌는 목적으로 일부 SVG를 포함\n    polygon  : \"points\",\n    polyline : \"points\",\n    circle   : [ \"cx\", \"cy\", \"r\" ],\n    ellipse  : [ \"cx\", \"cy\", \"rx\", \"ry\" ],\n    line     : [ \"x1\", \"y1\", \"x2\", \"y2\" ],\n    path     : [ \"x1\", \"y1\", \"x2\", \"y2\" ],\n    rect     : [ \"x\", \"y\", \"width\", \"height\" ]\n}, // attachData.canAttach\n```\n\n<div class=\"content-ad\"></div>\n\n그것은 우리에게 입력 값 설정하는 두 가지 방법을 제공한다는 걸 확인할 수 있어요. 다시 한번 말하지만, 저는 괜찮아요. 옵션은 좋은거죠.\n\ncanAttach의 유형은 각각 다른 루틴을 사용해요. 제가 선택한 방법은 switch/case보다는 Object 룩업을 사용하는 것이에요. 옵션 체이닝 덕분에 attach 루틴 자체를 크게 간소화할 거에요.\n\n```js\n    canType : {\n\n      \"Array\" : (target, arg, canAttach) => {\n        \n        if (\"Array\" !== arg.__type) throw new Error(\n          `<${this.tagName}>.__attach는 배열을 비-속성 인수로만 첨부할 수 있어요. \"${arg.__type} 대신에 입력했네요.`\n        );\n        \n        if (arg.length !== canAttach.length) throw new Error(\n          `<${this.tagName}>.__attach는 어떤 배열 인수에도 ${canAttach.length}개의 값이 필요해요. \"${arg.length} 대신 입력했네요.`\n        );\n        \n        Object.assign(this, Object.__fromKeyValuePairs(canAttach, args));\n        \n      }, // attachData.canType.Array\n\n      \"String\" : (target, arg, canAttach) => {\n        \n          switch (arg.__type) {\n            case \"Number\":\n            case \"String\":\n              target.setAttribute(canAttach, arg);\n              return;\n          }\n          \n          throw new Error(\n            `<${this.tagName}>.__attach는 문자열 또는 숫자 비-속성 인수만 첨부할 수 있어요. \"${arg.__type} 대신 입력했네요.`\n          );\n          \n      } // attachData.canType.String\n\n    }, // // attachData.canType\n```\n\n여기에 \"throw\"를 많이 사용한 것을 주목하세요. 심각한 오류가 발생했을 때는 스크립팅이 멈춰야 한다고 확신을 갖고 있어요. 그 자리에서 멈춰야 해요. HTML과 JavaScript는 이를 처리하기 위한 완벽한 메커니즘을 제공하지만 여전히 너무 관대하다고 생각해요.\n\n<div class=\"content-ad\"></div>\n\n\"argument\"의 종류에 따라 특별한 처리 사례가 있을 수 있습니다.\n\n```js\n    argType : {\n\n      \"Array\" : (target, arg, canAttach) => target.__make(...arg),\n\n      \"Function\" : (target, arg, canAttach) => target.append(arg(target))\n\n    }, // // attachData.argType\n```\n\n그리고 위의 어떤 경우도 일치하지 않을 때의 대체 방안입니다.\n\n```js\n    append : (target, arg, canAttach) => target.append(arg)\n```\n\n<div class=\"content-ad\"></div>\n\n위 모든 것이 갖춰진 상태에서 Element.__defineProps를 Element.prototype.__attach 메서드에 적용할 수 있습니다.\n\n```js\n Element.prototype.__defineProps( {\n\n    __attach : function() {\n\n      const canAttach = attachData.canAttach[\n        this.tagName.toLowerCase()\n      ] || true;\n\n      for (const arg of arguments) {\n\n        if (\"Object\" === arg.__type) this.__setAttr(arg);\n\n        else if (canAttach) (\n          attachData.canType[canAttach.__type] ??\n          attachData.argType[arg.__type] ??\n          attachData.append\n        )(this, arg, canAttach);\n\n        else throw new Error(\n          `<${this.tagName}>은(는) 빈 Element이므로 해당 Element.prototype.__attach로 자식요소를 추가할 수 없습니다.`\n        );\n\n      }\n\n      return this;\n\n    }, // Element.prototype.__attach\n```\n\nElement의 tagName을 룩업했을 때 찾을 수 없다면 대부분의 태그는 첨부 파일을 가질 수 있으므로 true로 기본값으로 설정됩니다.\n\n만약 순수한 객체라면, 속성을 설정하기 위해 해당 객체를 사용합니다. 만약 loose-true라면 널 병합 연산자를 사용하여 올바른 첨부 서브루틴을 선택합니다. 만약 아무것도 작동하지 않으면 자식 요소/데이터를 첨부할 수 없는 요소에서 예외를 발생시킵니다.\n\n<div class=\"content-ad\"></div>\n\n그리고 함수에 전달된 모든 인수를 처리하기 때문에 속성 및 자식 뿐만 아니라 make도 선언할 수 있습니다. 따라서 DOM-JON 항목의 배열이 있다면 attach에서 분해할 수 있습니다.\n\n```js\nconst test = [\n  [ \"h2\", \"테스트 제목\" ],\n  [ \"p\", \"간단한 테스트 단락\" ]\n];\n\ndocument.getElementById(\"testDIV\").__attach(...test);\n```\n\n이렇게 하면 실제 JSON 객체를 만들고 쉽게 첨부할 수 있습니다. 이제 HTML을 서버측에서 빌드하지 않고 JSON을 보내는 가능성을 생각해보세요.\n\n이제 이렇게 생긴 \"setAttr\" 메소드를 호출합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n__setAttr: function (attr) {\n  \n  for (const [key, value] of Object.entries(attr)) {\n    \n    switch (key) {\n      case \"__makePlace\":\n        this.__define(key, value);\n        continue;\n      case \"dataset\":\n      case \"style\":\n        if (\"Object\" !== value.__type) throw new Error(\n          `<${this.tagName}>.__setAttr requires a Object when setting \"${key}\", got \"${value.__type}\" instead.`\n        );\n        Object.assign(this[key], value);\n        continue;\n    }\n    \n    switch (value.__type) {\n      case \"Array\":\n      case \"Function\":\n      case \"Object\":\n        this[key] = value;\n        continue;\n    }\n    \n    this.setAttribute(key, value);\n    \n  }\n  \n  return this;\n  \n} // Element.prototype.__setAttr\n```\n\n\"쉬운\" `Object.assign` 대신 손수 속성 객체를 반복해서 순회하는 방법을 사용합니다. 이렇게 하면 정의를 후킹하고, 데이터셋과 스타일을 올바르게 처리할 수 있습니다. 대부분의 속성에는 `setAttribute`를 사용하는 것이 좋지만, 그것은 값들을 문자열로만 설정할 수 있습니다. 배열, 함수 및 객체 기능을 트랩할 수 있어서 이벤트 등을 설정할 수 있게 합니다.\n\n참고로, DOM-JON에서는 className 대신 `{` \"class\": \"myClassName\" `}`를 사용해야 합니다. 여러분! className을 수동으로 \"class\"로 이름을 변경하여 두 가지 방법으로 사용할 수 있도록 할지 고민 중입니다. DSS \"dot\" 구분 기호를 사용하여 클래스를 설정하는 것이 시간을 들이는 가치가 있는 것일까요?\n\nElement에 이 모든 것을 설정한 후에는 새로운 개선된 `__make`을 사용할 수 있게 됩니다. 이것을 모듈의 일부로 내보내거나 전역 범위에 넣는 것보다는, 저는 문서 객체에 이것을 넣을 것입니다!\n\n<div class=\"content-ad\"></div>\n\n```js\n  document.__defineProps( {\n\n    __make : (selector, ...attach) => {\n\n      let\n        parts = { attr : {}, data : {}, define : {} },\n        value;\n\n      for (const [ delimiter, typeName, attrName ] of makeData.delimiters) {\n        [selector, value] = selector.split(delimiter, 2);\n        if (value) parts[typeName][attrName] = value;\n      }\n      \n      const\n        tagName = (selector || \"span\").toLowerCase(),\n        namespace = (\n          parts.data.namespace ? (\n            parts.data.namespace.indexOf(\"http://\") === 0 ?\n            parts.data.namespace :\n            (\n              makeData.namespaces[parts.data.namsspace.toUpperCase()] ?? \n              makeData.namespaces.HTML\n            )\n          ) : makeData.namespaces.HTML\n        ),\n        e = Object.assign(\n          document.createElementNS(namespace, tagName),\n          parts.attr\n        );\n      \n      if (!parts.define.__empty) {\n        for (const [key, value] of parts.define.__entries) {\n          e.__define(key, value);\n        }\n      }\n\n      if (parts.data.value) e.setAttribute(\n        makeData.values[tagName] ?? \"value\",\n        parts.data.value\n      );\n\n      if (parts.data.special) {\n        const attrName = makeData.special[tagName];\n        if (attrName) e.setAttribute(attrName, parts.data.special);\n        else console.warn(\n          `Special underscore property not supported on <${tagName}>, ignoring value \"${parts.data.special}\"`\n        );\n      }\n\n      if (attach) e.__attach(...attach);\n\n      return e;\n\n    } // document.__make\n\n  } ); // document extensions\n```\n\n큰 변경 중 하나는 이제 \"define\"을 구분 기준으로 사용한다는 것입니다. 이를 새로운 구분자 조회에서 확인할 수 있습니다:\n\n```js\n    /*\n      DSS 구분자는 여기 나열된 순서의 역순으로 사용해야 합니다.\n      여기 나열된 나중에 있는 문자는 이전 섹션 값들의 값 안에서 사용할 수 없습니다.\n      \n      예를 들어 ID 내에서 \".\"을 사용할 수 없습니다.\n    */\n    delimiters : [\n      [ \"=\", \"data\",   \"value\" ],\n      [ \"?\", \"attr\",   \"name\" ],\n      [ \".\", \"attr\",   \"className\" ],\n      [ \"#\", \"attr\",   \"id\" ],\n      [ \"&\", \"define\", \"__stateName\" ],\n      [ \"@\", \"define\", \"__makePlace\" ],\n      [ \":\", \"data\",   \"namespace\" ],\n      [ \"_\", \"data\",   \"special\" ]\n    ], // makeData.delimiters\n```\n\n이를 통해 DOM 요소에 변경 불가능하고 열거되지 않는 정의를 만들 수 있어요. 다음 부분에 이르러 성능이 좋아지는데 유용할 것입니다: Element.prototype.__make\n\n<div class=\"content-ad\"></div>\n\n```js\n    __make : function() {\n      \n      const e = document.createElement(...arguments);\n      this.insertAdjacentElement(e.__makePlace ?? \"beforeend\", e);\n      return this;\n      \n    }, // Element.prototype.__make\n```\n\n이 버전의 make 함수는 새 Element를 부모 요소와 관련하여 자동으로 첨부합니다. 다음과 같은 코드가 있다고 가정해봅시다:\n\n```js\n<div id=\"test\">\n  <p>원본 콘텐츠</p>\n</div>\n```\n\n이 기능을 한 번 시도해보세요 — __attach가 Element.prototype.__make를 호출하므로 둘 다 테스트됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ndocument.getElementById(\"test\").__attach(\n  [ \"h2@afterbegin\", \"처음에 <h2> 추가됨\" ],\n  [ \"h1@beforebegin\", \"앞에 <h1> 추가됨\" ],\n  [ \"footer\", // beforeend는 기본값\n    [ \"p\", \"마지막에 <footer> 추가됨\" ]\n  ],\n  [ \"p@afterend\", \"<p> 뒤에 추가됨\" ]\n);\n```\n\n여기 동작 중인 것이 있는 펜입니다:\n\n전체 DOM-JON 코드베이스를 외부 {}에 넣어 scope isolation을 만들었음을 볼 수 있습니다. 오랜 시간 동안 JS의 let/const가 쓸모 없다고 생각했는데, 그것들을 사용하면 이전에 IIFE에 낭비했던 것들을 대체할 수 있다는 것을 깨달았습니다. 자주 캐시를 비운 첫 로드에서 클라이언트 사이드 파일 수를 나누는 모듈을 사용하지 않아도 됩니다. 이 방법을 사용하면 별도의 스크립트를 연결하여 배포 시 파일 수를 줄일 수 있습니다.\n\n# 새로운 Object 메소드 요약\n\n<div class=\"content-ad\"></div>\n\n그래서 이제 DOM-JON을 다루는 방법에 대해 다음과 같은 메서드가 있습니다:\n\n**method Element.prototype.__attach(...attachments)**\nattachment 유형에 따라 노드 또는 속성을 문서에 첨부합니다. 일반적인 객체는 노드 속성 및/또는 특별히 정의된 상태로 적용되며, 배열은 this.__make(Element.prototype__make)에 전달됩니다. 그 외의 경우는 추가됩니다.\n\n**method document.__make(selector, ...attachments)**\nDSS를 적용하여 셀렉터로부터 Element를 생성한 다음 첨부를 Element.prototype.__attach에 전달합니다.\n\n**method Element.prototype.__make(selector, ...attachments)**\nDocument.__make를 호출하여 Element를 생성한 다음, 새 Element의 __makePlace 값에 따라 \"this\"에 추가되거나, 선언되지 않은 경우 기본값으로 \"beforeend\"에 추가됩니다.\n\n<div class=\"content-ad\"></div>\n\n\nmethod Element.prototype.__setAttr(obj)  \n요소에 속성:값 쌍의 일반 객체를 할당합니다. 일부 속성은 __define으로 생성되도록 가로챕니다. 스타일 및 데이터세트와 같은 객체 하위 속성은 정규화되어 작동합니다. 함수, 배열 및 기타 객체는 this[key] = value로 할당되고, 다른 모든 값 유형은 this.setAttribute(key, value)로 할당됩니다.\n\n또한 시스템 객체에 대한 많은 유용한 추가 기능들이 있습니다.\n\nmethod Object.prototype.__define(name, value)  \nObject.defineProperty와 유사하지만 일반 객체를 `{` value `}`로 할당하며 \"this\"를 반환하고 전달된 값이 아닙니다.\n\nmethod Object.prototype.__defineProps(...props)  \n__define이 defineProperty와 유사하다면, __defineProps는 defineProperties와 유사합니다. 가장 큰 차이점은 여러 다른 이름/속성 쌍의 객체를 수락할 수 있으며 첫 번째 전달된 인수 대신 \"this\"를 반환한다는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n정적 메서드 Object.__defineMulti(targets, ...props)\n여러 대상에 속성을 할당합니다. 대상은 키 배열이어야하며, 그 다음 ...props의 각 객체와 일치해야합니다.\n\n정적 메서드 Object.__fromKeyValueArrays(keys, values)\n두 배열에서 객체를 생성합니다.\n\ngetter 및/또는 propertyObject.prototype.__type\n단일 \"유형\"을 반환합니다. 마치 통일된 \"typeof\" 및 \"instanceof\"처럼 다루기가 훨씬 덜 복잡한 것처럼. 대부분의 객체에 대해 이것은 처음 호출시 getter이지만 절대 수정할 수없는 열거 불가 속성으로 재정의됩니다. 일부 일반 객체 유형도 해당 속성으로 시작됩니다.\n\n이것이 \"공개적으로 보이는\" 속성과 메서드입니다. 전역 변수나 전역 함수가 필요하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n그게 이번에는 그게 다야. 13,000 줄의 코드가 있지만 gzip으로 압축하면 겨우 4,400 줄만 남아. 압축 후 최소화하면 3,000 줄도 안 될 것 같아.\n\n이 알파 빌드를 여기서 다운로드할 수 있어:\nhttps://cutcodedown.com/for_others/domjon/domjon.alpha4.js\n\n다음에는 \"__make\"로 구축된 DOM 구조에 직접 연결할 수 있는 getter 및 setter를 생성하는 \"State\" 객체를 추가할 거야. 이는 \"listeners\"가 작동하는 방식과 유사하다.\n\n# 기사 목차\n\n<div class=\"content-ad\"></div>\n\n# 파트 1 : 기본 개념\n# 파트 2 : 시스템 객체 확장 (현재 위치)\n# 파트 3 : 상태\n# 파트 4 : 템플릿 및 모듈 (곧 제공 예정)","ogImage":{"url":"/assets/img/2024-05-01-BuildingABetterJavaScriptDOMBuilderPart2ExtendingSystemObjects_0.png"},"coverImage":"/assets/img/2024-05-01-BuildingABetterJavaScriptDOMBuilderPart2ExtendingSystemObjects_0.png","tag":["Tech"],"readingTime":19},{"title":"HTMX: 최신 프론트엔드 개발을 위해 반드시 필요한 것","description":"","date":"2024-05-01 23:00","slug":"2024-05-01-MasteringHTMXAPracticalApproachtoStreamlinedFrontendDevelopment","content":"\n\n<img src=\"/assets/img/2024-05-01-MasteringHTMXAPracticalApproachtoStreamlinedFrontendDevelopment_0.png\" />\n\n🚀 전세계를 뒤집을 변화를 소개합니다: HTMX! 이 강력한 도구는 고전적인 서버 측 렌더링과 현재의 클라이언트 측 상호 작용 사이의 간극을 우아하게 해결해줍니다. 수많은 JavaScript를 오가지 않아도 괜찮아요. HTMX가 모두 다 해결해줄 테니까요.\n\nHTMX에 대해 궁금하신가요? 🕵️‍♂️ 이 글에서는 HTMX의 기능을 알아보고, 가져다주는 이점을 탐험하며, 잘 알려진 개발 거장들과 비교해보겠습니다. 함께 살펴봐요! 💻✨\n\n# 소개\n\n<div class=\"content-ad\"></div>\n\n웹 개발 주문서가 있었으면 좋겠나요? htmx를 입력하세요. 이것은 AJAX, CSS 전이, 웹 소켓 및 서버 전송 이벤트에 대한 게이트웨이로, 모두 HTML 내에서 쉽게 창조됩니다. 현대적인 사용자 인터페이스를 만드는 마법봉처럼 간단함과 힘을 품고 있습니다.\n\n## ✨ 매혹적인 기능:\n\n- 크기가 작음 (~14k min.gz’d)\n- 독립적이라 마법사와 비슷합니다\n- 확장 가능하며, 마법은 적응해야 합니다\n- IE11와 심술궂은 어르신과도 친해요\n- React와 비교하여 코드 기본 크기를 놀라운 67%로 축소\n\nhtmx의 신비한 세계로 뛰어들어, 웹 주문서를 즐거운 경험으로 변신시키세요! 🪄🌟\n\n<div class=\"content-ad\"></div>\n\n# HTMX: 상호작용 혁신하기\n\nHTMX는 웹 개발에서 상호작용을 혁신할 수 있는 강력한 도구입니다! 🚀 전체 페이지 새로고침을 필요로하지 않고 웹 페이지의 일부를 업데이트하여 사용자 경험을 향상시킬 수 있습니다. 아래는 HTMX를 시작하는 데 도움이 되는 몇 가지 코드 예제와 설명이 제공됩니다:\n\n## HTMX를 사용하여 데이터 가져오기 🌐\n\n```js\n<!-- HTML -->\n<div hx-get=\"/api/data\" hx-trigger=\"click\" hx-target=\"#result\"></div>\n\n<!-- JavaScript (Optional) -->\n<script>\n  document.getElementById('result').addEventListener('htmx:afterRequest', function(event) {\n    // 응답 처리 또는 추가 작업 수행\n    console.log('데이터 성공적으로 가져옴:', event.detail.response);\n  });\n</script>\n```\n\n<div class=\"content-ad\"></div>\n\n- hx-get 속성은 트리거 이벤트가 발생했을 때 데이터를 가져올 URL을 지정합니다 (예: div를 클릭할 때).\n- hx-trigger 속성은 요청을 트리거하는 이벤트를 정의합니다 (예: \"click\").\n- hx-target 속성은 응답이 삽입될 요소를 지정합니다.\n\n## HTMX를 사용한 콘텐츠 수정 ✏️\n\n```js\n<!-- HTML -->\n<div hx-get=\"/api/content\" hx-swap=\"outerHTML\"></div>\n\n<!-- JavaScript (선택 사항) -->\n<script>\n  document.addEventListener('htmx:afterRequest', function(event) {\n    // 응답을 처리하거나 추가 동작을 수행합니다.\n    console.log('콘텐츠가 성공적으로 업데이트되었습니다:', event.detail.response);\n  });\n</script>\n```\n\n- hx-swap 속성은 응답이 요소의 콘텐츠를 어떻게 대체해야 하는지를 결정합니다. 이 경우 전체 외부 HTML을 대체합니다.\n\n<div class=\"content-ad\"></div>\n\n## HTMX를 사용한 양식 제출 📤\n\n```js\n<!-- HTML -->\n<form hx-post=\"/api/update\" hx-trigger=\"submit\" hx-target=\"#result\">\n  <!-- 여기에 양식 필드가 위치합니다 -->\n  <button type=\"submit\">제출</button>\n</form>\n\n<!-- JavaScript (Optional) -->\n<script>\n  document.addEventListener('htmx:afterRequest', function(event) {\n    // 응답 처리 또는 추가 작업 수행\n    console.log('양식이 성공적으로 제출되었습니다:', event.detail.response);\n  });\n</script>\n```\n\n- hx-post 속성은 양식 데이터를 제출할 URL을 지정합니다.\n- hx-trigger 속성은 양식 제출을 트리거하는 이벤트를 정의합니다.\n- hx-target 속성은 양식 제출 후 응답이 삽입될 위치를 지정합니다.\n\n## HTMX를 사용한 동적 로딩 🔄\n\n<div class=\"content-ad\"></div>\n\n```js\n<!-- HTML -->\n<div hx-get=\"/api/dynamic-content\" hx-trigger=\"mouseover\" hx-target=\"#dynamic-section\"></div>\n<div id=\"dynamic-section\"></div>\n\n<!-- JavaScript (Optional) -->\n<script>\n  document.addEventListener('htmx:afterRequest', function(event) {\n    // Handle the response or perform additional actions\n    console.log('Dynamic content loaded successfully:', event.detail.response);\n  });\n</script>\n```\n\n- 이 예제에서는 사용자가 특정 섹션 위로 마우스를 올릴 때 동적 콘텐츠가 로드됩니다.\n- 응답은 \"dynamic-section\"이라는 ID를 가진 요소에 삽입됩니다.\n\n# HTMX 동작 방식\n\nHTMX의 힘을 발휘하고 싶어하는 개발자들에게 HTMX의 동작 방식을 이해하는 것이 중요합니다. 표준 HTML을 따르는 구문일 수 있지만, HTMX를 진정으로 독특하게 만드는 것은 그 뒤에 숨겨진 작동 방식입니다.\n\n<div class=\"content-ad\"></div>\n\n## 기본 사용법 🚀\n\n```js\n<div hx-get=\"/api/data\">초기 콘텐츠 🚀</div>\n```\n\n- 이 코드는 hx-get 속성을 활용하여 \"/api/data\" 엔드포인트로 GET 요청을 초기화합니다.\n- 서버에서의 응답은 `div` 요소 내의 콘텐츠를 대체합니다.\n- 전체 페이지 새로 고침 없이 페이지의 콘텐츠를 동적으로 업데이트하는 간편한 방법입니다.\n\n## 이벤트 트리거링 🔄\n\n<div class=\"content-ad\"></div>\n\n```js\n<button hx-get=\"/api/increment\" hx-trigger=\"click\">증가</button>\n```\n\n- 이 예제에서는 버튼이 클릭되었을 때 GET 요청이 \"/api/increment\"로 트리거되도록 구성되어 있습니다 (hx-trigger=\"click\").\n- 이는 이벤트를 사용하여 HTMX 요청이 언제 발생하는지 제어할 수 있는 방법을 보여줍니다.\n- 사용자 상호작용에 기반하여 데이터를 가져오거나 업데이트하는 경우 유용합니다.\n\n## 오류 처리 🤖\n\n```js\n<div hx-get=\"/api/data\" hx-on-error=\"alert('에러 발생!')\">데이터 불러오기</div>\n```\n\n<div class=\"content-ad\"></div>\n\n- \"hx-on-error\" 속성은 \"/api/data\"로의 GET 요청 중 발생하는 오류를 처리하는 데 사용됩니다.\n- 오류가 발생하면 '에러!' 메시지가 포함된 알림이 표시됩니다.\n- 예기치 않은 상황에서도 원활한 사용자 경험을 제공하는 데 오류 처리가 중요합니다.\n\n## 특정 요소 업데이트 🛠️\n\n```js\n<input type=\"text\" hx-post=\"/api/update\" hx-target=\"#result\" />\n<div id=\"result\">초기 결과</div>\n```\n\n- 이 예제는 텍스트 입력란이 hx-post를 사용해 \"/api/update\"로의 POST 요청을 트리거하는 것을 보여줍니다.\n- 대상 요소(hx-target=\"#result\")가 지정되어 있어 응답이 id가 \"result\"인 요소의 내용을 업데이트하도록 보장합니다.\n- 이 접근법을 통해 페이지의 어떤 부분을 동적으로 업데이트할지 정확히 제어할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# HTMX 도입의 이점\n\n1. 🚀 향상된 사용자 경험: HTMX를 사용하면 전체 페이지 새로고침 없이 웹 페이지에 신속하고 동적인 업데이트가 가능합니다. 이로 인해 보다 부드럽고 상호작용성 있는 사용자 경험을 제공할 수 있습니다.\n\n2. 🔄 효율적인 데이터 로딩: HTMX를 사용하면 전체 페이지를 새로고침하는 대신 필요한 데이터만 로드할 수 있습니다. 이는 더 빠른 로딩 시간과 서버 부하 감소를 가져옵니다.\n\n3. 🛠️ 간소화된 코드베이스: HTMX를 도입함으로써 종종 JavaScript 코드를 줄일 수 있으며, 서버 측 렌더링을 용이하게 하고 복잡한 클라이언트 측 논리를 줄여 코드를 단순화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n4. 🔄 실시간 업데이트: HTMX를 활용하여 실시간 업데이트를 달성하고 서버에서 즉시 새로운 데이터를 가져와 표시하여 사용자에게 최신 정보를 제공합니다.\n\n5. 🌐 접근성: HTMX는 개발자들이 더 반응적이고 동적인 사용자 인터페이스를 만들 수 있도록 하여 장애를 가진 사용자에게도 접근성을 향상시킬 수 있습니다.\n\n6. 🌈 향상된 UI 상호작용: 다양한 사용자 상호작용을 매끄럽게 처리할 수 있는 HTMX의 기능을 활용하여 적은 노력으로 매우 상호작용적인 사용자 인터페이스를 만들어 보세요.\n\n7. 🧩 쉬운 통합: HTMX는 기존 프로젝트에 쉽게 통합할 수 있어 기능을 점진적으로 향상시키는 실용적인 선택으로 사용될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nHTMX를 도입하면 더 반응이 뛰어나고 효율적이며 즐거운 웹 개발 경험을 할 수 있습니다.\n\n# 결론\n\n변화무쌍한 웹 개발 세계에서 HTMX가 빛을 발합니다. HTML을 향상하여 웹 상호 작용을 간편하게 만듭니다.\n\n속도가 사용자 경험을 정의합니다. HTMX는 빠른 로딩과 부드러운 상호 작용을 제공하여 백엔드 개발자의 서버와 클라이언트 동적 사이의 간격을 줄여줍니다.\n\n<div class=\"content-ad\"></div>\n\n리액트와 뷰가 프론트엔드를 지배하고 있지만, HTMX는 새로운 시각을 제공합니다. 💨 동적 웹 앱에서 수많은 자바스크립트가 필요한 필요성에 대한 도전을 제시합니다.\n\nHTMX는 그저 최신 도구일 뿐만이 아니라 웹 개발 진화의 징조입니다. 향후 어떤 방향으로 나아갈지는 오직 시간과 채택에 달려 있을 것입니다. ✨","ogImage":{"url":"/assets/img/2024-05-01-MasteringHTMXAPracticalApproachtoStreamlinedFrontendDevelopment_0.png"},"coverImage":"/assets/img/2024-05-01-MasteringHTMXAPracticalApproachtoStreamlinedFrontendDevelopment_0.png","tag":["Tech"],"readingTime":6},{"title":"웹 개발자가 알아야하는 필수 HTML 속성들","description":"","date":"2024-05-01 22:58","slug":"2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow","content":"\n\n<img src=\"/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_0.png\" />\n\nHTML 언어는 웹 페이지에서 그래픽 요소를 그리기 위한 다양한 의미 있는 태그를 제공합니다. 보통 XML에서 속성을 사용하는 것처럼, HTML도 XML 기반의 마크업 언어로서 전역 및 태그별 속성을 지원합니다. 초기에 HTML은 웹 페이지를 디자인하기 위한 HTML 태그에 대한 기본 속성들을 제공했습니다. 모든 개발자가 알고 있는 id, class, style 등과 같은 어떤 HTML 요소와도 작동하는 전역 속성뿐만 아니라, src, href와 유사한 태그별 속성에 대해 알고 있습니다. 현대 웹 기술 및 UI/UX 요소의 성장과 함께, HTML 표준은 사용자 친화적인 웹 프론트엔드를 디자인하는 데 새로운 속성을 도입했습니다.\n\nW3C 및 협력사들은 의심할 여지없이 HTML 기능을 확장하여, 무겁고, 제3자 외부 라이브러리에 의존하지 않고 접근 가능하고, 현대적이며, 기능이 풍부한 웹 프론트엔드를 개발할 수 있도록 노력하고 있습니다. 이러한 새로운 기능 중 일부는 새로운 HTML 태그로 나왔습니다. 한편, 일부는 새로운 속성으로 나왔습니다. 예를 들어, HTML은 액세스 가능하고, 네이티브하며, 자바스크립트 무료 팝오버 요소를 구현하기 위해 popover 속성을 도입했습니다.\n\n이 이야기에서, 현대 웹 개발자로서 알아야 할 HTML 속성을 설명하고, 무거운, 제3자 라이브러리를 사용하지 않고 미래지향적인 프론트엔드를 디자인하세요. 이러한 네이티브 HTML 기능을 활용하여 최소한의 리소스로 높은 성능을 가진 웹 페이지를 제작해보세요!\n\n<div class=\"content-ad\"></div>\n\n# 웹 애플리케이션에서 원래 팝업 요소로 사용되던 네이티브 브라우저 창을 대안으로 사용하여 상위 레이어 콘텐츠를 표시했습니다 (예를 들어, 전자상거래 웹 사이트에서 사용자가 링크를 클릭할 때 T-셔츠 사이즈 차트를 표시합니다). 그러나 여러분들이 사용한 네이티브 창은 사용자 친화적이지 않았고 수정 가능하지 않았습니다. 나중에 개발자들은 UI/UX에 친화적으로 콘텐츠를 표시하기 위해 CSS 스타일이 적용된 인페이지 팝오버를 외부 라이브러리로 구축했습니다.\n\n이제 여러분은 HTML만으로 자바스크립트 코드 한 줄을 작성하지 않고 팝오버를 생성할 수 있습니다. 현대 웹 표준은 Popover API를 통해 내장 팝오버 지원을 포함하고 있습니다.\n\n다음 소스 코드를 살펴보세요:\n\n<div class=\"content-ad\"></div>\n\n```css\ndiv[popover]::backdrop {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\ndiv[popover] {\n  padding: 12px;\n  border: none;\n}\n```\n\n`pop` 요소에 `popover` 속성을 사용하여 간단한 팝오버 엘리먼트를 구현한 위의 HTML 코드 조각입니다. JavaScript를 사용하지 않고 `popovertarget` 속성을 사용하여 팝오버 엘리먼트를 표시합니다. 또한, 팝오버 뒷배경을 `::backdrop` 가상 요소를 사용하여 스타일링했습니다.\n\n![팝오버 예시 이미지](https://miro.medium.com/v2/resize:fit:1148/1*KbjdZQW2A-7pzrBMGSDNXA.gif)\n\nMDN 설명에 따라 네이티브 팝오버에 애니메이션을 추가할 수 있습니다. 또한, 팝오버 API의 JavaScript 메소드를 사용하여 CSS 스타일링된 툴팁을 만들 수 있습니다. 팝오버 웹 API는 아직 새로운 브라우저 기능이므로 제품에서 사용하기 전에 시간이 필요할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 대화 상자 및 페이지에서 autofocus 속성 사용하기\n\n컴퓨터는 일반적으로 주요 입력 요소로 키보드와 마우스를 갖추고 있지만 특정 상황에서는 사용자가 특정 활동 중에 키보드만 사용하는 경우가 있습니다. 예를 들어 대량 생산 기업의 직원은 양손을 모두 사용하여 효율적으로 컴퓨터를 사용할 수 없는 바쁜 작업 중 데이터 입력 활동에 키보드만 사용할 수 있습니다. 결과적으로 브라우저는 탭 탐색, 팝오버 및 대화 상자에 대한 자동 키 할당, 단축키 등을 내장된 접근성 기능으로 키보드 지원을 구현합니다.\n\nHTML 표준은 페이지 로드 및 대화 상자/팝오버 표시 상태에서 자동으로 양식 요소에 초점을 맞추기 위한 autofocus 속성을 제공합니다. 이 속성을 사용하면 사용자의 생산성을 향상시킬 수 있습니다.\n\n다음 샘플 모달을 살펴보세요. 첫 번째 입력이 미리 채워져 있기 때문에 두 번째 텍스트 입력에 자동 초점이 맞춰집니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1148/1*PvC6Czz14_44TLa_sTbhGA.gif\" />\n\n위 미리보기에서 보듯이 사용자는 Alt + Tab 단축키를 눌러 미리 채워진 텍스트 입력에 초점을 맞출 수 있습니다. 위 결과를 얻기 위한 소스 코드는 다음과 같습니다:\n\n```js\n<dialog id=\"dlg\">\n  <form method=\"dialog\">\n    <input type=\"text\" placeholder=\"이름\" value=\"존\" />\n    <div style=\"height: 8px\"></div>\n    <input type=\"text\" placeholder=\"성\" autofocus/>\n    <div style=\"height: 8px\"></div>\n    <button>저장</button>\n  </form>\n</dialog>\n<button onclick=\"document.getElementById('dlg').showModal()\" autofocus>모달 표시</button>\n```\n\n위 HTML 조각은 두 군데에서 포커스 속성을 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n- 페이지 로드 이벤트 후에 쇼 모달 버튼 요소에 포커스를 맞추세요.\n- 첫 번째 텍스트 입력란이 미리 채워져 있기 때문에 두 번째 텍스트 입력란을 자동으로 포커스하세요.\n\n여기서 우리는 JavaScript 코드를 사용하지 않고 다이얼로그를 닫기 위해 method=\"dialog\" 속성을 설정했습니다.\n\n# pattern 속성을 사용하여 텍스트 입력 유효성 검사하기\n\n요즘 거의 모든 현대적인 웹 앱은 폼에서 클라이언트 측 유효성 검사를 사용합니다. 개발자들은 종종 유저 친화성을 향상시키기 위해 클라이언트 측에서 실시간 유효성 검사를 구현합니다. 이제 HTML의 input 요소에 pattern 속성이 있기 때문에 Regex 기반의 실시간 입력 유효성 검사를 구현하기 위해 JavaScript를 사용할 필요가 없어졌습니다.\n\n<div class=\"content-ad\"></div>\n\n제품 식별자를 확인해야 한다고 가정해요. 이 식별자는 두 개의 영어 글자와 하이픈으로 연결된 여섯 자리 숫자로 구성돼요. 예를 들어 GR-100200 같은 거죠.\n\n다음 HTML 코드 조각은 이 요구사항을 충족하는 유효성 검사가 가능한 텍스트 입력을 구현하고 있어요.\n\n```js\n<form>\n  <input \n    type=\"text\" \n    placeholder=\"예: GR-100200\" \n    pattern=\"[A-Z]{2}-[0-9]{6}\" \n    required \n   />\n  <input type=\"submit\"/>\n</form>\n```\n\n여기서 pattern 속성은 유효하지 않은 입력에 대한 브라우저별 유효성 메시지를 표시하여 제출을 방지해요. 그렇다면 실시간 유효성 검사를 어떻게 구현할 수 있을까요?\n\n<div class=\"content-ad\"></div>\n\n패턴에 대한 실시간 유효성 검사는 다음 HTML 코드 조각에 표시된 대로 :valid 및 :invalid CSS 가상 클래스를 사용하여 가능합니다:\n\n```js\n<style>\n  input[type=text] {\n    border: #000 1px solid;\n    border-radius: 4px;\n    outline: none;\n    padding: 6px;\n  }\n\n  input[type=text]:invalid {\n    border: red 1px solid;\n     + span::before {\n      content: '✖';\n      display: inline;\n      color: red;\n    }\n  }\n  \n  input[type=text]:valid {\n    border: green 1px solid;\n    + span::before {\n      content: '✓';\n      display: inline;\n      color: green;\n    }\n  }\n\n</style>\n\n<input \n  type=\"text\" \n  placeholder=\"예: GR-100200\" \n  pattern=\"[A-Z]{2}-[0-9]{6}\" required\n/>\n<span></span>\n```\n\n위의 HTML 코드 조각은 유효성 상태에 따라 스타일을 설정하기 위해 CSS 코드를 사용합니다. 아래 미리보기에서와 같이, 유효하지 않은 입력값은 입력 상자 테두리를 빨간색으로 변하고 빨간색 교차 표시를 표시합니다. 한편, 유효한 입력값은 녹색 테두리와 녹색 확인 표시가 렌더링됩니다:\n\n<img src=\"https://miro.medium.com/v2/resize:fit:954/1*yCIHUIN8Sn6IMxuFbv0YVg.gif\" />\n\n\n<div class=\"content-ad\"></div>\n\n아래 이야기에서 :valid 및 :invalid와 같은 CSS 가상 요소에 대해 더 알아보세요:\n\nJavaScript에서 패턴을 사용하는 입력의 validity를 확인하기 위해 다음과 같이 JavaScript에서 입력의 validityState 인터페이스에 액세스할 수 있습니다:\n\n```js\nif(productInput.validity.valid) {\n  // 할 일...\n}\n```\n\n# inputmode 속성을 사용하여 모바일 가상 키보드 모드 다루기\n\n<div class=\"content-ad\"></div>\n\n현대 모바일 기기는 일반적으로 물리 키보드가 없습니다. 그 대신 터치 스크린에 렌더링되는 가상 키보드가 제공됩니다. 이 가상 키보드에는 여러 모드가 있습니다. 예를 들어 숫자 입력 요소에는 숫자 키만 표시되고 일반 문자열 입력에 대해서는 전체 키보드 인터페이스가 표시될 수 있습니다. 모바일 브라우저는 입력 유형에 따라 가상 키보드 모드를 자동으로 변경하지만 개발자는 input 요소의 inputmode 속성을 사용하여 사용자 정의할 수도 있습니다.\n\n사용자로부터 OTP PIN을 입력받기 위해 특정 패턴을 사용하는 텍스트 입력을 사용한다고 가정해보겠습니다:\n\n```js\n<input type=\"text\" placeholder=\"Enter OTP\" pattern=\"[0-9]{4}\" required />\n```\n\n이는 범용 문자열 유형 입력이므로 모바일은 전체 키보드 레이아웃을 표시합니다:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_1.png)\n\n입력 요소와 함께 inputmode 속성을 다음과 같이 사용해봅시다:\n\n```js\ninputmode=\"numeric\"\n```\n\n이제 모바일에서 숫자 키보드 레이아웃을 확인할 수 있습니다. 아래 미리보기를 참고하세요:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_2.png)\n\n# loading 속성을 이용한 브라우저 레벨 이미지 지연 로딩\n\n웹 개발자들은 페이지 로딩 시간을 개선하여 SEO (검색 엔진 최적화) 점수를 높이고 사용자 상호 작용을 향상시키려고 노력합니다. 이미지의 지연 로딩은 특정 이미지를 렌더링할 때 해당 이미지를로드하여 초기 페이지 로딩 시간을 줄이는 잘 알려진 전략입니다. 이미지의 지연 로딩은 Intersection Observer API 또는 전통적인 스크롤 이벤트를 사용하여 자체 구현하거나 서드파티 라이브러리를 사용하여 가능합니다.\n\nimg 태그의 loading 속성을 사용하면 JavaScript 코드없이 또는 서드파티 라이브러리를 사용하지 않고 브라우저 레벨의 이미지 지연 로딩을 활성화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n다음 소스 코드를 살펴보세요:\n\n```js\n<div style=\"height: 2000px\"></div>\n\n<img src=\"https://source.unsplash.com/vpOeXr5wmR4\" width=\"400\" height=\"240\" loading=\"lazy\" />\n```\n\n여기에는 사용자가 해당 이미지로 스크롤할 때에만 위 무료 이미지가 로드되며 초기 페이지 로드 시간에 영향을 주지 않게 되어 있습니다. 아래 미리 보기에서 확인할 수 있습니다:\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*uy6OnakZEP-X8_0mbRHVPw.gif\" />\n\n<div class=\"content-ad\"></div>\n\n현재 HTML 명세에서는 lazy loading을 사용자화할 수 없지만, 브라우저는 브라우저 수준의 lazy-loading을 사용하는 개발자가 더 많아진다면 커스터마이즈 옵션을 제공할 수 있습니다.\n\n## 사용자 지정 data-* 속성 사용\n\n브라우저는 일반적으로 HTML 속성 이름에 엄격한 유효성 검사 규칙을 적용하지 않으므로 개발자는 원하는 사용자 정의 속성 이름을 사용할 수 있습니다. 그러나 사용자 정의 속성에 대한 다양한 명명 규칙을 사용하는 것은 좋지 않은 실천 방법입니다. 왜냐하면 그것은 HTML 문서 명세를 무효화하기 때문입니다. HTML 표준은 사용자 정의 속성에 대해 data- 접두사 사용을 권장하며 DOM API에서도 명시적인 기능을 제공하여 개발자를 독려합니다.\n\n다음은 일부 사용자 정의 data 속성을 사용하는 샘플 HTML 요소입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<div \n  id=\"elm\" \n  data-player-name=\"John\"\n  data-player-score=\"20\"\n  data-player-city=\"LA\">\n</div>\n```\n\n자바스크립트를 통해 디스트럭처링으로 카멜 표기법 키를 사용하여 이러한 사용자 지정 속성 값을 쉽게 액세스할 수 있습니다. 다음 코드 스니펫에서 보여지듯이:\n\n```js\nlet { playerName, playerScore, playerCity } = document.getElementById('elm').dataset;\n\nconsole.log(playerName, playerScore, playerCity); // John 20 LA\n```\n\n또한 CSS 문서 내에서 이러한 데이터 속성에 액세스할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n#elm::before {\n  content: attr(data-player-name) \" - \" attr(data-player-score)\n}\n\n#elm {\n  display: inline-block;\n  padding: 12px;\n  background-color: #ddd;\n}\n```\n\n위의 CSS 코드 조각은 data-player-name과 data-score 값을 HTML 요소 위에 다음과 같이 렌더링합니다:\n\n<img src=\"/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_3.png\" />\n\n제3자 라이브러리를 사용하지 않고도 최신 네이티브 HTML 태그를 사용하여 간결하고 사용자 친화적이며 성능이 우수하며 접근성이 좋은 웹 프론트엔드를 개발할 수 있습니다. 아래 이야기로 더 자세히 알아보세요:\n\n<div class=\"content-ad\"></div>\n\n읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_0.png"},"coverImage":"/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_0.png","tag":["Tech"],"readingTime":9}],"page":"150","totalPageCount":154,"totalPageGroupCount":8,"lastPageGroup":14,"currentPageGroup":7},"__N_SSG":true}