{"pageProps":{"posts":[{"title":"앵귤러 애플리케이션에서의 environmentts 파일에 대하여","description":"","date":"2024-06-20 03:30","slug":"2024-06-20-AboutenvironmenttsinyourAngularapplications","content":"\n\n`<img src=\"/assets/img/2024-06-20-AboutenvironmenttsinyourAngularapplications_0.png\" />`\n\nEnvironment.ts는 애플리케이션 설정을 보관하는 일반적인 장소입니다. Angular 애플리케이션의 컴포넌트, 파이프 또는 다른 TypeScript 파일에 설정을 직접 하드코딩하는 대신 환경 파일에 애플리케이션 설정을 저장하면 다양한 애플리케이션 환경에서 다른 설정을 가질 수 있습니다. 또한, 모든 애플리케이션 설정이 한 파일에 집중되어 필요에 따라 쉽게 수정할 수 있습니다.\n\n환경.ts는 Angular 문서에서 잘 문서화되어 있지만 Angular 애플리케이션 구축 및 실행 주제에서 유지됩니다. 따라서 일부 사용자는 환경.ts 파일의 사용법을 모를 수 있습니다.\n\n# 면책 조항\n\n<div class=\"content-ad\"></div>\n\n이 문서는 Angular 공식 문서와 거의 유사합니다. 환경 설정을 더 잘 다루는 방법을 이해할 수 있도록 이 문서에 추가 정보를 포함했습니다. 이 문서는 오래되었을 수 있으니 항상 최신 정보를 참조하려면 공식 Angular 문서를 참고하세요: Angular 애플리케이션 빌드 및 제공.\n\n# 환경 폴더 구조\n\n모든 Angular 프로젝트에 environments 폴더가 있습니다. 이 폴더는 모든 애플리케이션 설정이 환경별로 보관되는 곳입니다. environment.ts는 기본 환경 파일로 프로젝트에서 참조됩니다.\n\n```js\nyourProject/src/environments\n- environment.ts\n- environment.prod.ts\n```\n\n<div class=\"content-ad\"></div>\n\n# environment.ts 파일 사용 방법\n\n여러 개의 파일이 environments 폴더에 있기 때문에 무엇을 가져와야 할지 궁금할 수 있습니다. 애플리케이션 설정을 사용하려면 environment.ts 파일을 가져오기만 하면 됩니다. 아래에서 이유를 설명하겠습니다.\n\n```js\nimport { environment } from './../environments/environment';\n```\n\n아래 스니펫은 app.component.ts가 environment.ts 파일에서 변수를 사용하는 방법을 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// app.component.ts\nimport { Component } from '@angular/core';\nimport { environment } from './../environments/environment';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor() {\n    if(environment.production) { // 👈🏻👈🏻👈🏻\n      // 만약 이것이 프로덕션 환경이라면 구현 코드 작성\n    }\n  }\n  title = 'app works!';\n}\n```\n\n# environment.ts 파일의 production 변수\n\n새로운 Angular 애플리케이션을 생성할 때마다 미리 설정된 production 변수를 찾을 수 있습니다.\n\n```js\n// 이 파일은 `fileReplacements` 배열을 사용하여 빌드 중에 대체될 수 있습니다.\n// `ng build --prod`는 `environment.ts`를 `environment.prod.ts`로 대체합니다.\n// 파일 대체 목록은 `angular.json`에서 찾을 수 있습니다.\n\nexport const environment = {\n  production: false // 👈🏻👈🏻👈🏻\n};\n```\n\n<div class=\"content-ad\"></div>\n\n질문: 이 변수를 삭제할 수 있을까요? 답은 아니요입니다. 왜냐하면 이 변수는 main.ts에서 사용되어 있어서 production 변수가 true로 설정된 경우 production 모드를 활성화하는 데 사용됩니다. Production 모드를 활성화하면 Angular은 변경 감지 과정이 어떤 바인딩에 추가 변경 사항이 생기지 않는지 확인하여 응용 프로그램 성능을 향상시킵니다 (일방향 데이터 흐름이라고도 함). 이 enableProdMode 메서드에 대해 자세히 다루지는 않겠습니다. enableProdMode에 대해 더 알고 싶다면 이 기사에서 enableProdMode가 무엇을 하는지 자세히 읽어보시기 바랍니다: https://lukaonik.medium.com/what-is-the-difference-between-production-and-development-mode-in-angular-3eed82b9cf73. 다시 말해서, 응용 프로그램을 디버깅하지 않을 때는 production 변수를 항상 true로 설정해야 합니다.\n\n```js\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode(); // 👈🏻👈🏻👈🏻\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n```\n\n팁: Angular은 앱이 개발 모드에서 실행 중인지 확인하기 위한 유틸리티 함수를 제공합니다.\n\n```js\nimport { Component, OnInit, isDevMode } from '@angular/core';\n\n@Component({ ... })\nexport class AppComponent implements OnInit {\n  ngOnInit() {\n    if (isDevMode()) { // 👈🏻👈🏻👈🏻\n      console.log('Development!');\n    } else {\n      console.log('Production!');\n    }\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# environment.ts 파일에 변수를 추가하고 Angular 애플리케이션에서 이 변수를 사용하세요.\n\n필요에 따라 environment.ts 파일에 하나 이상의 변수를 추가할 수 있습니다. environment.ts에 enableLogging이라는 간단한 변수를 추가해 봅시다:\n\n```js\n// environment.ts\n\n// 이 파일은 `fileReplacements` 배열을 사용하여 빌드 중에 교체될 수 있습니다.\n// `ng build --prod`는 `environment.ts`를 `environment.prod.ts`로 대체합니다.\n// 파일 교체 목록은 `angular.json`에서 찾을 수 있습니다.\n\nexport const environment = {\n  production: false,\n  enableLogging: true\n};\n```\n\n새로 추가된 이 변수를 사용하려면 environment.ts 파일을 import하여 Angular 애플리케이션의 모든 TypeScript 파일에서 사용하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// app.component.ts\n\nimport { Component } from '@angular/core';\nimport { environment } from './../environments/environment'; // 👈🏻👈🏻👈🏻\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor() {\n    if(environment.enableLogging) { // 👈🏻👈🏻👈🏻\n      console.log('Angular app started');\n    }\n  }\n  title = 'app works!';\n}\n```\n\n# 환경별 응용 프로그램 설정 구성\n\n일반적으로 한 애플리케이션 당 여러 환경이 있습니다. Angular 애플리케이션의 설정은 개발자마다 다를 수 있습니다. 그럼에도 불구하고 추가 환경을 구성하려면 개발 및 프로덕션 환경 이외의 환경을 설정해야 합니다.\n\n기본적으로 Angular 애플리케이션에는 environment.ts 및 environment.prod.ts가 있습니다. 저는 개발 환경으로 environment.ts를 사용합니다. 지역에서 Angular 애플리케이션을 개발하기 때문에 명령에 추가 인수를 추가할 필요가 없고, environment.ts가 기본 설정으로 사용됩니다. 반면 프로덕션 환경에서는 ng serve --configuration production과 같은 추가 매개변수를 전달해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n기존 Angular 애플리케이션을 위한 스테이징 환경을 구성해 보겠습니다.\n\n먼저 environments 폴더에 새 파일을 추가해야 합니다. 파일의 네이밍 컨벤션은 environment.`environment_name`.ts 입니다. environment.staging.ts 라는 파일을 다음 내용과 함께 생성해 봅시다:\n\n```js\n// environments/environment.staging.ts\nexport const environment = {\n  production: true // 애플리케이션을 디버깅 중이 아니라면 true\n};\n```\n\n그 다음, environment.ts에 있는 모든 변수는 이 environment.staging.ts에 있어야 합니다. 왜냐하면 environment.staging.ts가 컴파일 시(environment.ts 파일 대체) 필요하기 때문입니다 (ng serve 또는 ng build). 따라서 environment.staging.ts 파일에 누락된 변수가 없어야하며, 그렇지 않으면 컴파일이 실패할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n안전을 위해 environment.ts의 내용을 environment.staging.ts로 복사한 후 environment.staging.ts의 설정을 스테이징 설정으로 수정하세요. 이제 environment.staging.ts를 마친 것입니다.\n\nng build를 위한 angular.json 확장\n\nng build 명령어는 Angular 애플리케이션을 컴파일하는 데 사용됩니다. 스테이징 환경으로 애플리케이션을 컴파일해야 할 때는 ng build --configuration staging이 필요합니다. 이 명령어를 실행하려고 하면 지금처럼 오류 메시지가 나올 것입니다.\n\n이는 angular.json에서 스테이징 구성을 설정하지 않았기 때문입니다. 루트 폴더의 angular.json으로 이동하여 build configurations에서 production 구성을 복사하고 (아래 스니펫에서 production 구성 위치를 확인하십시오), 복사한 구성을 production 구성 바로 아래에 붙여넣으세요. 붙여넣은 구성의 이름을 staging으로 변경하고 파일 교체 경로를 스테이징 환경 파일 경로로 설정하세요. 이제 ng build --configuration staging을 다시 실행하면 성공적으로 빌드할 수 있을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n만약 주목했다면, configurations 맨 끝에 defaultConfiguration 설정이 있습니다. 이 설정은 ng build를 실행할 때 기본 구성을 설정하는 것입니다. 어떤 구성도 지정하지 않았다면 빌더는 defaultConfiguration에서 구성을 사용합니다. 지금 ng build를 실행하면 기본 구성은 프로덕션 구성이 될 것입니다.\n\n```js\n{\n    [...]\n    \"projects\": {\n      \"your-project-name\": {\n        [...]\n        \"architect\": {\n          \"build\": {\n            [...]\n            \"configurations\": { \n              \"production\": { // 👈🏻👈🏻👈🏻 이 섹션을 복사하세요\n                \"budgets\": [\n                  {\n                    \"type\": \"initial\",\n                    \"maximumWarning\": \"500kb\",\n                    \"maximumError\": \"1mb\"\n                  },\n                  {\n                    \"type\": \"anyComponentStyle\",\n                    \"maximumWarning\": \"2kb\",\n                    \"maximumError\": \"4kb\"\n                  }\n                ],\n                fileReplacements: [\n                  {\n                    replace: 'src/environments/environment.ts',\n                    with: 'src/environments/environment.production.ts',\n                  },\n                ],\n                \"outputHashing\": \"all\"\n              },\n              \"staging\": { // 👈🏻👈🏻👈🏻 여기에 붙여넣고 staging으로 이름을 변경하세요\n                \"budgets\": [\n                  {\n                    \"type\": \"initial\",\n                    \"maximumWarning\": \"500kb\",\n                    \"maximumError\": \"1mb\"\n                  },\n                  {\n                    \"type\": \"anyComponentStyle\",\n                    \"maximumWarning\": \"2kb\",\n                    \"maximumError\": \"4kb\"\n                  }\n                ],\n                fileReplacements: [\n                  {\n                    replace: 'src/environments/environment.ts',\n                    with: 'src/environments/environment.staging.ts', // 환경 파일 경로를 staging 환경 파일 경로로 변경하세요\n                  },\n                ],\n                \"outputHashing\": \"all\"\n              },\n              [...]\n            },\n            \"defaultConfiguration\": \"production\"\n          },\n          [...]\n        }\n      }\n    }\n  }\n```\n\nng serve를 위해 angular.json을 확장하기\n\nng serve는 Angular 애플리케이션을 로컬에서 실행하려는 경우 사용하는 명령어입니다. 이 명령은 애플리케이션을 빌드하고 서비스하며 파일 변경 시 다시 빌드합니다. 이미 ng build를 설정했습니다. ng serve는 빌드 구성을 사용하여 애플리케이션을 빌드하고 제공합니다. 그런 다음 다음 형식의 serve 구성을 serve configurations에 추가해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n\"<환경 이름>\": {\n  \"browserTarget\": \"your-project-name:build:<빌드 구성에서의 환경 이름>\"\n},\n```\n\n스테이징 환경에서는 angular.json 파일이 다음과 같이 보일 것입니다.\n\n```js\n{\n    [...]\n    \"projects\": {\n      \"your-project-name\": {\n        [...]\n        \"architect\": {\n          [...]    \n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"your-project-name:build:production\"\n              },\n              \"staging\": { // 👈🏻👈🏻👈🏻 이 serve 구성을 추가합니다\n                \"browserTarget\": \"your-project-name:build:staging\"\n              },\n              \"development\": {\n                \"browserTarget\": \"your-project-name:build:development\"\n              }\n            },\n            \"defaultConfiguration\": \"development\"\n          },\n          [...]\n        }\n      }\n    }\n  }\n```\n\nng serve --configuration staging 명령을 실행하면 스테이징 설정으로 애플리케이션을 실행할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# Angular schematic을 사용하여 환경 추가하기\n\nAngular 애플리케이션에 환경 하나를 추가하면 구성해야 할 설정이 많을 것이라고 생각할 수 있습니다. 그리고 왜 자동으로 추가되지 않는 것인지 의아해할 수도 있습니다. 걱정하지 마세요. Angular CLI(버전 15.1 이상)에는 새로운 schematic이 추가될 예정입니다. 이를 통해 Angular 애플리케이션에 환경을 추가할 수 있습니다. 이 작업은 단순히 다음 명령을 실행하면 됩니다. `ng generate environments`를 실행하면 새로운 환경이 Angular 애플리케이션에 추가됩니다. 이에 대한 자세한 내용은 여기에서 확인할 수 있습니다: [Bring back environment.ts to new projects · Issue #24381 · angular/angular-cli · GitHub](https://github.com/angular/angular-cli/issues/24381)\n\n# 결론\n\nAngular 애플리케이션에 새로운 환경을 구성하는 것은 흥미로운 작업이라고 생각합니다. Angular 팀이 프레임워크를 구현하는 방식을 살펴볼 때마다 항상 뭔가를 배우게 됩니다. 여러분도 새로운 환경을 구성하는 방법을 익히고, 더 쉬운 방법이 제공되는 schematic이 나올 것이라는 것을 알아두시면 좋겠습니다.","ogImage":{"url":"/assets/img/2024-06-20-AboutenvironmenttsinyourAngularapplications_0.png"},"coverImage":"/assets/img/2024-06-20-AboutenvironmenttsinyourAngularapplications_0.png","tag":["Tech"],"readingTime":10},{"title":"스크롤할 때 멋진, 축소 가능한 헤더로 내비게이션을 변환해 보세요 ","description":"","date":"2024-06-20 03:29","slug":"2024-06-20-Transformyournavigationwithasleekshrinkableheaderonscroll","content":"\n\n<img src=\"/assets/img/2024-06-20-Transformyournavigationwithasleekshrinkableheaderonscroll_0.png\" />\n\n웹 디자인에서 스크롤할 때 헤더를 축소하는 것은 사용자 경험을 향상시키는 일반적인 기술입니다. 사용자가 페이지를 아래로 스크롤할수록 내비게이션 바를 더 조밀하게 만들어 화면 공간을 절약하는 동시에 필수적인 내비게이션 링크를 산만하지 않게 보여줍니다. 이 기능을 구현하기 위해서는 HTML로 구조를 만들고 CSS로 스타일을 지정하며 JavaScript로 스크롤 동작을 처리해야 합니다.\n\n이 글에서는 페이지를 스크롤할 때 높이가 자연스럽게 축소되는 슈링크 헤더를 만드는 방법에 대해 살펴보겠습니다. 먼저, 헤더와 페이지 내용을 위한 기본 HTML 구조를 설정합니다. 다음으로, 헤더의 확장 및 축소 상태를 정의하는 CSS로 헤더를 스타일링합니다. 마지막으로, JavaScript를 추가하여 스크롤 이벤트를 감지하고 적절한 클래스를 헤더에 적용하여 축소 효과를 발생시킵니다.\n\n이 튜토리얼을 마치면 웹페이지의 사용성과 미학을 향상시키는 기능적인 슈링크 헤더를 가지게 될 것입니다. 이 안내서는 웹사이트에 세련된 터치를 더하고자 하는 초보자와 경험 있는 개발자 모두에게 적합합니다.\n\n<div class=\"content-ad\"></div>\n\n이 효과를 위한 두 가지 중요한 부분이 있어요.\n\n구조 생성: HTML 섹션에서 사용자가 페이지를 스크롤할 때 네비게이션 바가 줄어드는 효과를 보여주는 기본적인 웹사이트 레이아웃을 설정할 거에요.\n\n디자인 구성: CSS 및 JavaScript 섹션에서 우리는 네비게이션 바를 스타일링하고 JavaScript를 사용하여 사용자가 스크롤할 때 네비게이션 바가 부드럽게 줄어드는 효과를 구현할 거에요.\n\n전체 코드\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html>\n\n<head>\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n <title>\n  페이지 제목\n </title>\n <style>\n  CSS 스타일 내용\n </style>\n\n <script>\n  JavaScript 스크립트 내용\n </script>\n\n</head>\n\n\n<body>\n <!-- 헤더 내비게이션 -->\n <div id=\"navlist\">\n  <a href=\"#default\" id=\"logo\">\n   CODEMAGNET\n  </a>\n\n  <div id=\"navlist-right\">\n   <a href=\"#home\">홈</a>\n   <a href=\"#about\">제품</a>\n   <a href=\"#about\">경력</a>\n   <a href=\"#contact\">문의</a>\n   <a href=\"#about\">회사 소개</a>\n  </div>\n </div>\n\n <!-- 페이지 내용 -->\n <div class=\"content\">\n  <b>\n   열정을 가진 코딩 포털\n  </b>\n  <p>\n   뛰어난 코딩 포털에 오신 것을 환영합니다. 모든 수준의 열정적인 사람들이 모여 배우고 공유하며 성장할 수 있는 곳입니다! 프로그래밍 열정을 키우는 데 필요한 다양한 리소스, 자습서 및 커뮤니티 지원에 몰입해 보세요. #코딩 #코드배우기 🚀💻\n  </p>\n </div>\n</body>\n\n</html>\n```\n\n자세한 내용은 아래 링크를 확인해주세요.\n\nhttps://codemagnet.in/2024/06/18/create-shrink-header-on-scroll-html-css-and-javascript/\n","ogImage":{"url":"/assets/img/2024-06-20-Transformyournavigationwithasleekshrinkableheaderonscroll_0.png"},"coverImage":"/assets/img/2024-06-20-Transformyournavigationwithasleekshrinkableheaderonscroll_0.png","tag":["Tech"],"readingTime":2},{"title":"자바스크립트 HTML 리치 텍스트 편집기","description":"","date":"2024-06-20 03:27","slug":"2024-06-20-JavascriptHTMLRich-TextEditors","content":"\n\n리치 텍스트 편집기 또는 WYSIWYG 편집기를 사용하면 사용자가 스타일이 적용된 텍스트, 이미지, 목록, 코드 블록 등을 입력할 수 있습니다. 만약 여러분이 마크다운으로 작성할 수 없는 사용자를 대상으로 한 웹사이트에서 텍스트/문서 입력을 구축 중이라면 이 접근 방식이 유용할 것입니다.\n\n이 글에서는 모든 현대적인 웹에 쉽게 통합할 수 있는 뛰어난 무료 오픈 소스 WYSIWYG인 Quill로 이러한 편집기를 만드는 방법을 안내해 드릴 것입니다.\n\n# 기본 예제\n\n우리의 프로젝트에 필요한 JavaScript 및 CSS 파일을 포함시켜 시작하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<!-- 스타일시트 포함 -->\n<link href=\"https://cdn.quilljs.com/1.3.6/quill.snow.css\" rel=\"stylesheet\">\n<!-- Quill 라이브러리 포함 -->\n<script src=\"https://cdn.quilljs.com/1.3.6/quill.js\"></script>\n```\n\n또는 저처럼 코드 펜을 사용하는 경우 설정을 클릭하고 위의 Css 및 Js 링크를 추가해주세요.\n\n<img src=\"/assets/img/2024-06-20-JavascriptHTMLRich-TextEditors_0.png\" />\n\n가장 간단한 형태로 시작해보겠습니다.\n\n<div class=\"content-ad\"></div>\n\nMarkdown\n\n```js\nvar quill = new Quill('#editor', {\n    theme: 'snow'\n});\n```\n\n<div class=\"content-ad\"></div>\n\nCSS: 없음\n\n그래, 이 간단한 리치 텍스트 편집기를 얻기 위해 해야 할 일은 이것뿐이에요. 여기서 글꼴 크기를 변경하거나 스타일을 추가/삭제할 수 있습니다.\n\n![리치 텍스트 편집기](/assets/img/2024-06-20-JavascriptHTMLRich-TextEditors_1.png)\n\neditor라는 id를 설정하고 Quill 편집기를 초기화하는 데 사용하고 있습니다. 그러나 CSS 선택기나 DOM 객체를 전달할 수도 있어요.\n\n<div class=\"content-ad\"></div>\n\n예를 들어, 다음과 같이 classname editor를 전달하면 Quill이 첫 번째 일치하는 요소에 에디터를 생성합니다.\n\n```js\nvar editor = new Quill('.editor');  \n```\n\n또는 DOM 객체를 전달할 수도 있습니다.\n\n```js\nvar container = document.getElementById('editor');\nvar editor = new Quill(container);\n```\n\n<div class=\"content-ad\"></div>\n\n만약 툴바에 폭과 같은 추가 스타일링을 하고 싶다면, 에디터 자체의 스타일을 변경하는 것은 작동하지 않을 것입니다. 다음과 같이 결과물이 나올 것입니다.\n\n![example image](/assets/img/2024-06-20-JavascriptHTMLRich-TextEditors_2.png)\n\n이를 수행하는 방법은 3가지가 있습니다.\n\nQuill은 툴바를 위한 클래스인 ql-toolbar를 사용하므로 아래와 같이 스타일을 오버라이드할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n아래는 Markdown 형식으로 변경한 내용입니다.\n\n\n![이미지](/assets/img/2024-06-20-JavascriptHTMLRich-TextEditors_3.png)\n\n또는 전체 편집기를 사용자 정의 컨테이너에 임베드하고 컨테이너 너비를 변경할 수도 있습니다.\n\n![이미지](/assets/img/2024-06-20-JavascriptHTMLRich-TextEditors_4.png)\n\n세 번째 옵션은 new Quill()를 호출하고 편집기를 만들 때 추가 구성을 추가하는 것입니다. 다음 부분에서 이에 대해 자세히 살펴보겠습니다.\n\n\n<div class=\"content-ad\"></div>\n\n좋아요! 이제 리치 텍스트 편집기가 아닌 스타일이 좀 적은 편집기가 되었네요!\n\n## 사용자 정의\n\nQuill로 더 풍부하게 만들어 보겠습니다.\n\n이 라이브러리는 사용자 정의와 확장을 염두에 두고 설계되었습니다. 우리의 요구에 맞게 커스터마이즈하는 다양한 방법이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n- Configuration: 기존 기능을 조정하는 데 사용됩니다\n- Modules: 새로운 기능을 추가하는 데 사용됩니다\n- Themes: 스타일링을 위해 사용됩니다\n\n# 구성\n\n먼저 기존 기능을 어떻게 조정할 수 있는지 살펴보겠습니다.\n\n우리가 위에서 사용한 javascript에서 'theme: ‘snow’'를 추가했다는 점을 유의해주세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nvar quill = new Quill('#editor', {\n  theme: 'snow'\n});\n```\n\n이것은 Quill에서 인식하는 옵션 중 하나입니다. 전체 목록을 확인할 수 있고, 저는 발견한 몇 가지를 여러분에게 보여드릴게요.\n\n## 모듈\n\n새 기능을 추가할 때 사용할 키입니다. 곧 자세히 살펴볼 예정입니다.\n\n<div class=\"content-ad\"></div>\n\n이외에도 몇 가지 매우 중요한 미리 만들어진 것들이 있어요.\n\n- 툴바\n\n아래에는 위에서 보여드렸던 기본적인 것이 있어요\n\n\n![이미지](/assets/img/2024-06-20-JavascriptHTMLRich-TextEditors_5.png)\n\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n아래에 보이는 내용입니다.\n\n![이미지](/assets/img/2024-06-20-JavascriptHTMLRich-TextEditors_6.png)\n\n색상 및 배경에 대해 빈 배열을 가지고 있더라도 여전히 선택할 수 있는 멋진 색 팔레트를 얻을 수 있습니다.\n\n이는 테마가 드롭다운을 위해 기본값을 지정할 수 있기 때문입니다. 위의 예에서 우리는 Snow를 사용하고 있으며, 색상 및 배경 형식에 대해 빈 배열로 설정하면 색상 목록에서 기본값으로 35가지 색상을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n위의 예시에서는 단순히 기존의 어트리뷰터를 선택했습니다. 그러나 여러분은 이를 사용자 정의할 수도 있어요. 예를 들어, 사용자 지정 글꼴을 추가하려면:\n\n```js\nvar FontAttributor = Quill.import('attributors/class/font');\nFontAttributor.whitelist = [\n  'sofia', 'slabo', 'roboto', 'inconsolata', 'ubuntu'\n];\nQuill.register(FontAttributor, true);\n```\n\n```js\n.ql-font-roboto {\n  font-family: 'Roboto', sans-serif;\n}\n```\n\n더 많은 사용자 정의와 제어를 원하신다면, HTML에서 직접 툴바를 만들고 DOM 요소나 셀렉터를 Quill에 전달할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<!-- 툴바 컨테이너 생성 -->\n<div id=\"toolbarContainer\">\n  <!-- 글꼴 크기 드롭다운 추가 -->\n  <select class=\"ql-size\">\n    <option value=\"small\"></option>\n    <!-- 주의: 값이 없어서 기본 값으로 재설정됨 -->\n    <option selected></option>\n    <option value=\"large\"></option>\n    <option value=\"huge\"></option>\n  </select>\n  <!-- 굵게 버튼 추가 -->\n  <button class=\"ql-bold\"></button>\n  <!-- 아래 첨자 및 위첨자 버튼 추가 -->\n  <button class=\"ql-script\" value=\"sub\"></button>\n  <button class=\"ql-script\" value=\"super\"></button>\n</div>\n<div id=\"editor\">\n</div>\n```\n\n```js\nvar options = {\n  modules: {\n    toolbar: {\n      container: '#toolbarContainer',  \n      handlers: {\n        'bold': customBoldHandler\n      }\n    }\n  },\n  theme: 'snow'\n};\n\nvar quill = new Quill('#editor', options);\n```\n\n만약 사용자 정의 컨테이너를 사용한다면, 컨트롤도 직접 설정해야 합니다. 그렇지 않으면 빈 툴바가 나타날 수 있습니다. 아래와 같이 확인하세요.\n\n<img src=\"/assets/img/2024-06-20-JavascriptHTMLRich-TextEditors_7.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvar toolbarHanlderOptions = {\n  handlers: {\n    'link': function(value) {\n      if (value) {\n        var href = prompt('URL을 입력하세요');\n        this.quill.format('link', href);\n      } else {\n        this.quill.format('link', false);\n      }\n    }\n  }\n}\n\nvar options = {\n  modules: {\n    toolbar: toolbarHanlderOptions,\n  },\n  theme: 'snow'\n};\n\nvar quill = new Quill('#editor', options);\n```\n\n우리는 다음을 받게 될 것입니다\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*QpD3jR3s6v4M_nUWwLOFdg.gif\" />\n\n핸들러 함수는 툴바에 바인딩되어 있으므로 this를 사용하면 툴바 인스턴스를 참조하게 됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n위 조정 도구 모양에 대한 자세한 내용은 여기에서 확인할 수 있어요.\n\n- 구문\n\n이 모듈은 구문 강조 효과를 적용하여 코드 블록 포맷을 강화합니다. 코드 블록을 자동으로 감지하고 구문 강조를 적용하기 위해 훌륭한 highlight.js 라이브러리가 사용됩니다.\n\n사용하려면 먼저 마음에 드는 highlight.js 스타일 시트를 추가하고 highlight.js 라이브러리를 포함시키세요.\n\n<div class=\"content-ad\"></div>\n\n만약 제가 사용하고 있는 것처럼 codepan.io를 사용 중이라면, 설정 옵션을 통해이를 추가하는 것이 작동하지 않을 수 있으며 수동으로 HTML에 다음과 같이 추가해야 합니다.\n\n```js\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n```\n\n그런 다음 툴바 옵션에 코드 블록을 포함시키십시오. 저 위의 예제를 사용 중이라면 이미 포함되어 있어야 합니다.\n\n모듈에 구문 키를 추가하고 구문 모듈을 포함하려면 true로 설정하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nvar quill = new Quill('#editor', {\n  modules: {\n    syntax: true,              \n    toolbar: [['code-block']]  \n  },\n  theme: 'snow'\n});\n```\n\n아래와 같이 특정 언어 또는 모든 언어로 구성할 수도 있습니다.\n\n```js\n// 선택적으로 hljs 구성\nhljs.configure({   \n    languages: ['javascript', 'ruby', 'python']\n});\n\n// 또는 모든 언어 강조\nhljs.highlightAll();\n```\n\n## placeholder\n\n\n<div class=\"content-ad\"></div>\n\n이 옵션 키는 편집기가 비어 있을 때 표시할 자리 표시자 텍스트를 구성하는 데 사용됩니다.\n\n다음과 같은 옵션을 사용하면\n\n```js\nvar options = {\n  placeholder: '말해보세요!',\n  theme: 'snow'\n};\n\n\nvar quill = new Quill('#editor', options);\n```\n\n다음은 우리가 얻게 될 것입니다!\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-JavascriptHTMLRich-TextEditors_8.png\" />\n\n## readOnly\n\n이 값은 에디터를 읽기 전용 모드로 초기화할지 여부를 나타냅니다. 기본값은 false입니다.\n\n사용자가 더 이상 수정할 수 없게 하고 입력한 내용을 확인해야 하는 확인 페이지를 만들고 싶을 때 이 값은 정말 유용합니다. 이 경우 툴바를 false로 설정하고 싶을 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvar options = {\n  modules: {\n      toolbar: false\n  },\n  readOnly: true,\n  theme: 'snow'\n}\n\nvar quill = new Quill('#editor', options);\n```\n\n## 테마\n\n이 키는 전체 스타일링을 구성하는 데 사용할 키이며 곧 자세히 살펴볼 것입니다.\n\n# 모듈\n\n\n<div class=\"content-ad\"></div>\n\n이전 섹션에서 툴바와 같은 몇 가지 미리 구축된 모듈을 이미 살펴보았습니다. 이 모듈은 확장되어 원본 모듈을 대체하거나 다시 등록할 수도 있습니다.\n\n예를 들어, 이를 통해 클립보드 모듈이 Quill과 외부 애플리케이션 간에 복사, 잘라내기 및 붙여넣기를 어떻게 처리할지 구성할 수 있습니다.\n\n```js\nvar Clipboard = Quill.import('modules/clipboard');\nvar Delta = Quill.import('delta');\n\nclass PlainClipboard extends Clipboard {\n  convert(html = null) {\n    if (typeof html === 'string') {\n      this.container.innerHTML = html;\n    }\n    let text = this.container.innerText;\n    this.container.innerHTML = '';\n    return new Delta().insert(text);\n  }\n}\n\nQuill.register('modules/clipboard', PlainClipboard, true);\n\nvar quill = new Quill('#editor');\n```\n\n그러나 때로는 (사실 대부분의 경우) 기존 모듈을 사용하거나 구성하는 것이 더 쉬울 수 있습니다. 위 예에서 기존 Clipboard의 addMatcher API가 더 적합합니다.\n\n<div class=\"content-ad\"></div>\n\n리치 텍스트 편집기에 대한 API가 무엇인지 궁금하신가요? 조금 더 자세히 설명해 드릴게요. 실제로 이게 Quill의 가장 멋진 부분이라고 생각해요.\n\n# 테마\n\n우리는 이미 여러 차례 이 키를 사용했어요. 사용할 테마 이름입니다. 내장된 옵션은 bubble 또는 snow입니다. 잘못된 값은 기본 최소 테마를 로드합니다.\n\n- bubble: 간단한 툴팁 기반 테마입니다.\n- snow: 깨끗하고 평평한 툴바 테마이며, 위에서 반복적으로 사용한 것입니다.\n\n<div class=\"content-ad\"></div>\n\n테마의 구체적인 스타일시트는 여전히 수동으로 포함해야 합니다. 더 많은 정보 및 추가 사용자 정의를 위해 테마를 확인해보세요!\n\n# API 주도 설계\n\n자바스크립트와 HTML을 사용하여 간단한 리치 텍스트 편집기를 만드는 방법을 보여드렸습니다. 그러나 Quill에서 가장 독특한 요소 중 하나(제 개인적인 의견으로)는 API 주도 설계입니다.\n\n대부분의 리치 텍스트 편집기는 사용자가 작성한 텍스트를 알지 못하며, 내용을 웹 개발자가 보는 렌즈로 보게 됩니다: DOM입니다. 이는 DOM이 불균형 트리로 구성된 노드로 이루어져 있지만 텍스트는 줄, 단어 및 문자로 이루어져 있기 때문에 임피던스 불일치를 초래합니다.\n\n<div class=\"content-ad\"></div>\n\n문자가 측정 단위인 DOM API가 없습니다. 이 제한으로 대부분의 리치 텍스트 에디터는 \"이 범위에 어떤 텍스트가 있는가?\" 또는 \"커서가 굵은 텍스트에 있는가?\" 같은 간단한 질문에 대답할 수 없습니다.\n\n그에 반대로, API 주도 설계를 통해 Quill은 굵은 텍스트인지 확인하려면 `b`나 `strong` 노드 또는 글꼴 두께 스타일 속성을 찾는 DOM 탐색이 필요하지 않습니다.\n\n할 일은 getFormat(5, 1) API를 호출하는 것 뿐입니다. 모든 핵심 API 호출은 임의의 인덱스와 길이로 액세스하거나 수정할 수 있습니다. 그리고 해당 이벤트 API는 직관적인 JSON 형식으로 변경 사항을 보고하며 HTML 구문 분석이나 DOM 트리 비교가 필요하지 않습니다.\n\n그러므로 Quill은 나만의 리치 텍스트 에디터 솔루션을 설계할 때 더 많은 옵션과 자유를 제공하며 더 간단한 해결책으로 이어줍니다!\n\n<div class=\"content-ad\"></div>\n\n그거 오늘은 여기까지야!\n\n리치 텍스트 편집기를 만들어서 부자가 되어보자(아마?)!","ogImage":{"url":"/assets/img/2024-06-20-JavascriptHTMLRich-TextEditors_0.png"},"coverImage":"/assets/img/2024-06-20-JavascriptHTMLRich-TextEditors_0.png","tag":["Tech"],"readingTime":10},{"title":"Django Crispy Forms - Bootstrap5","description":"","date":"2024-06-20 03:25","slug":"2024-06-20-DjangoCrispyformsbootstrap5","content":"\n\n## Django Crispy Forms 설정 및 HTML 템플릿이 Helper Layout을 통해 변경 양식을 받지 않는 이유를 해결하는 중!\n\n대부분의 경우, 필터 구문인 (' form|crispy ')이 기본적인 렌더링에 충분합니다. 그러나 더 많은 제어가 필요하거나 Crispy Forms에서 제공하는 특정 기능을 사용하려면 템플릿 태그 구문인 (' crispy form ')을 선호할 수 있습니다.\n\n— — — — — — — — — — — — — — — — — — — — — — — — — — — — — —\n\n![image](/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_0.png)\n\n<div class=\"content-ad\"></div>\n\n장고 템플릿에서 ' form|crispy ' 및 ' crispy form '은 Crispy Forms 라이브러리를 사용하여 Django 양식을 렌더링하는 두 가지 다른 방법입니다.\n\n- '' form|crispy '' (필터 구문):\n\n- 이것은 Django 템플릿에서의 필터 구문입니다.\n- 변수 equip_form에 필터를 적용하는 데 사용됩니다.\n- 기본 Crispy Forms 렌더링을 사용하여 양식을 렌더링합니다.\n\n예시:\n\n<div class=\"content-ad\"></div>\n\n```js\n{ crispy equip_form }\n```\n\n'crispy equip_form' (템플릿 태그 구문):\n\n- Django 템플릿에서 사용되는 템플릿 태그 구문입니다.\n- 폼을 렌더링하기 위해 명시적으로 crispy 템플릿 태그를 포함하는 데 사용됩니다.\n- 추가 옵션을 지정하고 렌더링 동작을 사용자 정의할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n두 가지 구문은 모두 Crispy Forms를 사용하여 폼을 렌더링하는 동일한 결과를 얻습니다. 어떤 것을 선택할지는 종종 Crispy Forms 라이브러리에서 제공되는 추가 옵션을 사용해야 하는지 또는 렌더링 동작을 사용자 정의해야 하는지에 따라 다릅니다.\n\n--- --- --- --- --- --- --- --- --- --- ---\n\nDjango 프로젝트에 Crispy Forms를 설정해 봅시다.\n\n1. 터미널: pip install django-crispy-forms\n\n<div class=\"content-ad\"></div>\n\n2- settings.py 파일에 다음을 추가하세요:\n\n```python\nINSTALLED_APPS = (\n    ...\n    'crispy_forms',\n)\n```\n\n3- crispy-bootstrap5 추가하기: $ pip install crispy-bootstrap5\n\n```python\nINSTALLED_APPS = (\n    ...\n    \"crispy_forms\",\n    \"crispy_bootstrap5\",\n    ...\n)\n\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\n\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n```\n\n<div class=\"content-ad\"></div>\n\n이 단계에서는 forms.py / views.py / urls.py에서 작업하고 대상 HTML 템플릿에 crispy forms를 로드할 것입니다. 예를 들어:\n\nHTML 페이지 상단에 ( 'extends `app_name/main.html`' 뒤에):\n\n'load crispy_forms_tags'\n\n=================\n\n<div class=\"content-ad\"></div>\n\n```js\r\n<form method=\"post\">\n{ csrf_token }\n<div class=\"card\" style=\"width: 50rem;\">\n<div class=\"card-header\">\n<h6 class=\"card-text\">장비 정보:</h6>\n</div>\n<div class=\"card-body\">\n{ crispy equip_form }\n</div>\n<button type=\"submit\">저장</button>\n</div>\n</form>\r\n```\n\nForms.py 파일에 대한 중요한 내용입니다. Django crispy forms를 사용하면 Python 환경에서 HTML 태그를 변경하고 CSS 클래스를 추가할 수 있습니다.\n\n```js\r\nfrom .models import Equipment\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Layout, Submit, Div, Field, Row, Column\r\n```\n\n```js\r\nclass EquipForm(forms.ModelForm):\n    class Meta:\n        model = Equipment \n        fields = \"__all__\"\r\n```  \n\n<div class=\"content-ad\"></div>\n\n위의 코드는 일반적인 상황에서 양식을 사용하는 방법을 나타냅니다.\n\n그러나 Django crispy 템플릿에서 생성된 표준 HTML 태그를 무시하고 뷰를 재정의할 수 있습니다.\n\n```js\ndef __init__(self, *args, **kwargs):\n        super(EquipForm, self).__init__(*args, **kwargs)\n        #Django 양식의 경우 super().__ init__(*args, **kwargs)를 호출하여 인스턴스화 중에 전달된 데이터로 양식을 초기화합니다. 이는 Python에서 특정한 경우에 발생하는 패턴입니다. 부모 클래스의 메서드를 재정의하고 부모 클래스에서 동일한 메서드를 호출하려는 경우 사용됩니다.\n        \n        #특정 양식에 날짜 위젯 추가:\n        self.fields['effective_date'].widget = forms.DateInput(attrs={'type': 'date'})\n        self.fields['warranty_expiration'].widget = forms.DateInput(attrs={'type': 'date'})\n        #\n```\n\n이제 열과 행으로 양식을 만들어 원하는 위치에 양식 필드를 그룹화하는 방법을 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n\n        self.helper = FormHelper(self)\n        self.helper.layout = Layout(\n        Row(\n            Column('name', css_class='col-md-4'),\n            Column('vendor', css_class='col-md-4'),\n        ),\n        Row(\n            Column('vendor_reference', css_class='col-md-4'),\n            Column('model', css_class='col-md-4'),\n        ),\n        Row(\n            Column('category', css_class='col-md-4'),\n            Column('serial_number', css_class='col-md-4'),\n            Column('used_by', css_class='col-md-4'),\n        ),\n.......\n.......\n\n\n![이미지](/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_1.png)\n\nforms.py에서 필드를 재정의한 후:\n\n![이미지](/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_2.png)\n\n\n<div class=\"content-ad\"></div>\n\n보너스 팁:\n\n다른 경우로, HelperForm 레이아웃을 재정의하여 뷰를 덮어썼지만 CSS 클래스가 변경되지 않는 문제가 발생했습니다. 'form|crispy'이 문제를 발생시키지 않았지만 HTML 소스 페이지를 검사하다가 새로운 css_class가 자식 태그 'div'에 적용되는 것을 발견했습니다. 이는 부모 `Div`를 대상으로하는 방법입니다.\n\n```js\n        self.helper = FormHelper(self)\n        self.helper.form_method = 'post'\n        self.helper.layout = Layout(\n\n        Div(\n            Field('field1', wrapper_class='col-md-6 '), # css_class\n            Field('field2', wrapper_class='col-md-6 '),\n\n            css_class='row',  # 전체 div에 행 클래스 적용 (선택 사항)\n        ),\n```\n\nDjango Crispy-Forms에서 css_class 및 wrapper_class는 양식 필드의 스타일링을 제어하기 위해 FormHelper 레이아웃 내에서 사용되는 속성입니다.\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경해주세요.\n\n\n| css_class:                                              |\n| ------------------------------------------------------- |\n| - 이 속성은 개별 폼 필드에 적용되며, HTML 입력 요소의 CSS 클래스를 지정합니다. |\n| - 이 속성은 폼 요소 자체의 스타일에 직접적으로 영향을 줍니다.         |\n\n예시:\n\n```js\nField('field_name', css_class='my-custom-class')\n```\n\n<div class=\"content-ad\"></div>\n\n`wrapper_class`:\n\n- 이 속성은 폼 필드를 감싸는 HTML 컨테이너에 적용됩니다.\n- 폼 요소 주변의 컨테이너 스타일에 영향을 줍니다.\n\n예시:\n\n```js\nField('field_name', wrapper_class='my-container-class')\n```\n\n<div class=\"content-ad\"></div>\n\n이러한 속성은 FormHelper에서 제공하는 레이아웃 정의에서 사용할 수 있습니다. 예를 들어, Layout 클래스를 사용하여 양식 레이아웃을 만들 때 각 필드에 이러한 속성을 적용할 수 있습니다:\n\n```js\nself.helper.layout = Layout(\n    Field('field1', css_class='my-custom-class'),\n    Field('field2', wrapper_class='my-container-class'),\n    # ... 다른 필드들 ...\n)\n```\n\n요약하면, css_class는 양식 요소 자체의 스타일링에 사용되고, wrapper_class는 양식 요소를 감싸는 컨테이너의 스타일링에 사용됩니다. 이 두 가지는 CSS 클래스를 통해 양식 필드의 모양을 제어하는 방법을 제공합니다.","ogImage":{"url":"/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_0.png"},"coverImage":"/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_0.png","tag":["Tech"],"readingTime":6},{"title":" TailwindCSS v4을 기반으로 하는 나만의 주관적인 CSS 라이브러리 디자인하기","description":"","date":"2024-06-20 03:23","slug":"2024-06-20-DesigningmyownopinionatedCSSlibraryontopofTailwindCSSv4","content":"\n\n## AltCSS를 소개합니다\n\n![이미지](/assets/img/2024-06-20-DesigningmyownopinionatedCSSlibraryontopofTailwindCSSv4_0.png)\n\n오늘은 선택할 수 있는 다양한 옵션이 많습니다 (선호하지 않는 순서로 나열):\n\n- Tailwind CSS\n- Bootstrap 5\n- Semantic UI\n\n<div class=\"content-ad\"></div>\n\n일부 새로운 및 앞으로 나올 옵션에는 Sugar CSS가 있습니다. 특정 분야를 위해 Animate CSS나 Pattern CSS와 같은 라이브러리가 있지만, 제게는 잘 맞지 않습니다.\n\n지난 몇 년 동안 다양한 맥락에서 CSS 작업에 문제가 있었습니다.\n\n- CSS 라이브러리가 제공하는 클래스 중 50%도 거의 사용하지 않습니다. 문서를 보면, 저에게는 관련 없는 많은 것으로 가득 차 있어, 부풀려지고 서투릅니다. 대다수의 사람들은 대부분의 기능과 클래스를 사용하지 않습니다. 사용되지 않는 클래스들은 제거되어 성능에는 영향을 주지 않지만, 개발을 할 때 가볍지 않게 느껴집니다.\n- 종종 CSS를 덮어쓰거나 기존 클래스 위에 자체 클래스를 만들어야 합니다. 솔직히 말하면, 우리 고유한 맥락에 완벽히 맞는 라이브러리는 없습니다. 시간이 지남에 따라 프로젝트 간의 작업 반복이 많이 발생합니다.\n- 간단한 것조차 여러 개의 CSS 클래스를 사용하는 것을 좋아하지 않습니다. Tailwind CSS를 살펴보면, 하나의 요소에 거의 항상 여섯 개나 일곱 개의 클래스가 함께 붙어있습니다. 클래스 이름이 길어지면 금방 번거로워지며, 쓰기, 기억하기, 읽기, 유지 관리하기 어려워집니다. 그렇지 않으면, 그 위에 래퍼 클래스를 놓아야 합니다.\n\n위 문제를 해결하기 위해 제게 잘 맞는 주관적인 CSS 라이브러리를 만들었습니다. 다른 사람들과 반드시 일치하지는 않을 것입니다. 간단히 말하면, 이 라이브러리는 다수의 사람과 일치하지 않는 실천원칙을 따르거나 사용할 수 없을 것입니다. 그래서, 이 라이브러리를 AltCSS라고 명명하기로 결정했습니다.\n\n<div class=\"content-ad\"></div>\n\n내가 AltCSS에 대한 목표는 다음과 같습니다:\n\n- 평상시 라이브러리보다 80% 더 적은 CSS 클래스를 사용하면서 가장 흔한 사용 사례 80% (또는 그 이상)에 맞는 의견이 강한 스타일링.\n- 가벼우며 최적화되고 용량이 작습니다.\n\n본문의 다음 부분은 이 라이브러리를 만들기 위해 따란한 단계별 프로세스에 관한 내용입니다.\n\n# 단계 1: 가장 흔히 사용되는 CSS\n\n<div class=\"content-ad\"></div>\n\n가장 자주 사용되는 CSS 스타일로 좁혀봤어요. 이 과정에서 자주 다루는 네 가지 유형의 웹사이트를 고려해봤어요 (또는 미래에 다룰 계획이 있는). 각 유형에 대해 내 맥락에서 일반적으로 요구되는 스타일링 요소를 확인했어요.\n\n- 랜딩 페이지\n— 이미지\n— 버튼\n— 가입/이메일 폼\n- 포트폴리오 웹사이트\n— 그리드\n— 카드\n- 블로그 및 문서 사이트\n— 타이포그래피\n— 텍스트 레이아웃\n— 링크\n— 내비게이션\n- 싱글 페이지 웹 앱\n— 입력란, 라디오, 체크박스 등과 같은 폼 요소들\n\nMVP 버전에서는 현재 활동적으로 사용하는 스타일에만 초점을 맞췄어요.\n\n대부분의 CSS 라이브러리는 일정한 디자인 시스템을 따르지만, 저는 특정한 것을 따르지 않았어요. 모든 것을 자연스럽고 간단하게 유지했거든.\n\n<div class=\"content-ad\"></div>\n\n그래서, 모든 것을 처음부터 만들어야 할까요?\n\n처음에는 그 방향으로 가고 있었지만, 그때쯤에 TailwindCSS가 다음 주요 버전인 버전 4의 진행 상황을 오픈소스로 공개했어요.\n\n그냥 갑자기 생각이 났어요. 그것을 기반으로 삼아 그 위에 더 쌓아올려야겠다는 생각이 들었어요. 마치 간단하고 사용하기 쉬운 방식으로 패키지화된 좋은 작은 추상화처럼 말이에요. Tailwind는 이렇게 사용하도록 만들어진 것이 아니었지만, 그래도 한번 시도를 해봐야겠죠.\n\nTailwindCSS 알파 버전 4 외에, 저는 패키지 매니저로 Bun을 사용했어요.\n\n<div class=\"content-ad\"></div>\n\n# 단계 2: 명명 규칙\n\n가능한 한 간단하고 짧고 자연스럽게 유지하고 싶어요. 여기서 한 가지 선택사항을 정했습니다.\n\n- 모든 기본 HTML 태그는 본질적으로 적용된 Tailwind CSS 스타일이 적용될 것입니다.\n- 특정한 경우에 사용자 정의 클래스를 만들어야 할 때는 가능한 한 짧게 유지하려고 약어 'a-name'의 명명법을 따를 것입니다.\n\n# 단계 3: CSS 작성하기\n\n<div class=\"content-ad\"></div>\n\n먼저, 빈 프로젝트 npm init을 생성하고 원하는 파일 구조를 만들었습니다.\n\n사용자 관점에서 몇 가지 핵심 디자인 원칙이 있습니다:\n\n- 클래스 이름 작성 금지\n- CSS 작성 금지\n- 간단하게 유지\n- 깔끔하게 유지\n\n내 첫 번째 선호도인 다크 모드로 직접 시작했습니다. 새로운 클래스 이름을 만들지 않고 원시 HTML 요소에 스타일을 적용하려고 노력했습니다. 카드 및 그리드와 같은 컴포넌트는 이런 식으로 만드는 것이 어려울 수 있습니다. 네이티브 요소를 특정한 방식으로 중첩하여 이러한 컴포넌트를 만드려고 노력했습니다. 모든 문서가 완료되면 이러한 예제들을 더 많이 공유하겠습니다.\n\n<div class=\"content-ad\"></div>\n\nMVP를 위해 제가 헤딩, 링크, 카드 및 그리드 레이아웃을 위한 기본 CSS를 구현했어요. 모든 것들이 표준 화면 크기에 대응할 수 있도록 했어요.\n\n예를 들어, 이것이 제 타이포그래피 스타일의 일부 예시에요.\n\n```js\n/* 타이포그래피 */\n/* 헤딩 */\nh1, h2, h3 {\n    @apply text-gray-400 tracking-tight;\n}\n\nh1 {\n    @apply text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold my-6;\n}\n\nh2 {\n    @apply text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-semibold my-5;\n}\n\nh3 {\n    @apply text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-medium my-4;\n}\n\nh4 {\n    @apply text-lg text-yellow-400 sm:text-xl md:text-2xl lg:text-3xl font-medium my-3 tracking-tight;\n}\n\n/* 텍스트 */\np {\n    @apply text-lg sm:text-xl md:text-2xl text-gray-500 my-3 leading-relaxed tracking-wide;\n}\n\n/* 링크 */\na {\n    @apply text-yellow-400 relative transition-colors duration-200 ease-in-out no-underline;\n}\n\na::after {\n    content: \"\";\n    position: absolute;\n    left: 0;\n    bottom: -2px;\n    width: 100%;\n    height: 2px;\n    background-color: currentColor;\n    transform: scaleX(0);\n    transform-origin: bottom right;\n    transition: transform 0.3s ease;\n}\n\na:hover::after {\n    transform: scaleX(1);\n    transform-origin: bottom left;\n}\n```\n\n# 단계 4: CSS 최소화\n\n<div class=\"content-ad\"></div>\n\n코드가 준비되었으면, 그것을 단일 파일로 미니파이하면 됩니다 ( alt.min.css ). 이를 위해 Tailwind Cli의 알파 버전을 사용했어요.\n\n여기 참고용으로 제 package.json 이에요.\n\n```json\n{\n  \"dependencies\": {\n    \"@tailwindcss/cli\": \"^4.0.0-alpha.16\",\n    \"tailwindcss\": \"^4.0.0-alpha.16\"\n  },\n  \"scripts\": {\n    \"build\": \"bunx @tailwindcss/cli@next -i app.css -o dist/alt.min.css --minify\"\n  },\n  \"devDependencies\": {\n    \"prettier\": \"^3.3.1\",\n    \"prettier-plugin-tailwindcss\": \"^0.6.1\"\n  }\n}\n```\n\napp.css 파일은 src 폴더에서 가져온 모든 CSS 파일을 포함하고 있어요.\n\n<div class=\"content-ad\"></div>\n\nbun run build이 위 스크립트에 따라 압축 파일을 만드는 마법을 부릅니다.\n\n이 단계에서 추가로 해야 할 일이 몇 가지 있습니다.\n압축 파일에는 이제 내가 만든 것 외에도 모든 tailwind 클래스와 변수가 포함되어 있습니다. 내 디자인에서 사용한 요소와 변수만 최종 압축 파일에 포함되도록 필터링해야 합니다. 이 향상된 기능은 향후 업데이트에 남기도록 하겠습니다.\n\n# 단계 5: 테스트\n\n압축 파일이 준비되면, 모든 것을 테스트하기 위해 몇 가지 예제 페이지를 만들었습니다. 그 후에 다른 사람들이 쉽게 설치하고 프로젝트에 포함할 수 있도록 npm 패키지로 게시하는 시간이었습니다.\n\n<div class=\"content-ad\"></div>\n\n# 단계 6: NPM 게시\n\n실제로 코드를 npm 패키지로 게시하는 것은 매우 간단합니다. alt.min.css 파일이 저장된 dist 폴더 내에 새로운 package.json을 생성했습니다.\n\n이 파일에는 npm 패키지를 게시하는 데 필요한 모든 세부 정보와 최종 패키지에 푸시하려는 파일이 포함되어 있습니다. 제 경우에는 최종 출력인 dist 폴더를 푸시하고 싶었습니다. 여기가 내 dist package.json입니다.\n\n```json\n{\n    \"name\": \"altcss\",\n    \"version\": \"0.0.6\",\n    \"description\": \"의견이 분분하고 독특하며 가벼운 CSS 컴포넌트 라이브러리.\",\n    \"main\": \"alt.min.css\",\n    \"files\": [\n        \"alt.min.css\",\n        \"README.md\"\n    ],\n    \"keywords\": [\n        \"css\",\n        \"library\",\n        \"altcss\",\n        \"tailwindcss\"\n    ],\n    \"author\": \"aditya-xq\",\n    \"license\": \"MIT\"\n}\n```\n\n<div class=\"content-ad\"></div>\n\n```js\ncd dist\nnpm login\nnpm publish\n```\n\n여기까지입니다!\n\n# 최종 결과\n\nMVP가 모두 설정되어 사용하고 실험할 준비가 되어 있습니다.\n\n<div class=\"content-ad\"></div>\n\n프로젝트에 altcss를 추가하는 방법이에요. 아래 명령어 중 하나를 사용해서 altcss를 직접 프로젝트에 추가할 수 있어요.\n\n```js\nnpm install altcss\npnpm add altcss\nbun add altcss\n```\n\n그런 다음, 필요한 파일을 메인 스크립트나 전역 스타일로 가져와야 해요. 예를 들어, Sveltekit에서는 +layout.svelte 파일의 script 태그 아래에 가져와야 해요.\n\n```js\nimport 'altcss/alt.min.css';\n```\n\n<div class=\"content-ad\"></div>\n\n원시 HTML을 작성하고 자동으로 적용되는 스타일링을 즐기세요.\n\n여기에 AltCSS로 만든 간단한 데모 페이지가 있습니다.\n\n이 프로젝트의 GitHub 저장소는 여기에 있습니다.\n\n마지막으로 AltCSS를 사용하여 만든 또 다른 페이지가 여기에 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 끝 내용\n\n이것은 몇 가지 구성 요소와 스타일이 구현된 MVP일 뿐입니다. 대부분의 프로젝트에 표준 CSS 프레임워크/라이브러리로 AltCSS를 사용할 계획입니다. 특정 스타일이나 구성 요소를 구현해야 할 때는 이를 라이브러리에 추가할 것입니다.\n\n다음은 내가 생각하는 일반적인 로드맵입니다:\n\n- 나머지 선정된 HTML 태그의 디자인을 완성합니다.\n- 나만의 디자인에 맞게 실제로 사용자 지정된 스타일만 포함되도록 최소화된 CSS를 정리하고 필터링합니다.\n- 적절한 라이트 모드와 다크 모드를 구현합니다.\n- 사람들이 AltCSS를 사용자의 디자인 선호에 맞게 사용자 인터페이스를 통해 모양을 조정하고 프로젝트용으로 최소화된 CSS를 내보낼 수 있는 \"CSS 디자인 빌더\"를 만듭니다.\n\n<div class=\"content-ad\"></div>\n\n다음에 또 만나요.","ogImage":{"url":"/assets/img/2024-06-20-DesigningmyownopinionatedCSSlibraryontopofTailwindCSSv4_0.png"},"coverImage":"/assets/img/2024-06-20-DesigningmyownopinionatedCSSlibraryontopofTailwindCSSv4_0.png","tag":["Tech"],"readingTime":7},{"title":"HTML 이메일 보내기","description":"","date":"2024-06-20 03:22","slug":"2024-06-20-SendingHTMLemails","content":"\n\nHTML 이메일을 보내는 것은 생각보다 쉽지 않아요. 이메일 클라이언트들은 HTML 및 CSS 기술을 다루는 데 90년대에 멈춰 있어요.\n\n# 빠른 예시\n\nSnowball에서는 현재 미디어 웹 앱에서 뉴스레터 판본 목록을 작성 중이에요:\n\n- 각 판본을 카드로 표시하고 싶어요\n- 한 줄에 3장의 카드를 표시하길 원하고, 자동으로 다음 줄로 넘어가길 원해요\n- 한 줄의 모든 카드의 높이가 동일하길 원해요\n\n<div class=\"content-ad\"></div>\n\n아래와 같이 변경하시면 됩니다:\n\n\n![Image](/assets/img/2024-06-20-SendingHTMLemails_0.png)\n\n참 쉽지 않나요?\n기본 Tailwind CSS 구성을 제거하고 다음 코드를 작성하세요:\n\n```html\n<div class=\"flex gap-2 p-2 justify-center flex-wrap max-w-[1200px] mx-auto items-stretch\">\n  <div class=\"flex flex-col gap-1 max-w-[300px] border-1 p-2\">\n    <img\n      src=\"https://picsum.photos/id/237/200/300\"\n      class=\"max-w-full h-auto max-h-[200px] fit-cover\"\n      alt=\"\"\n    />\n\n    <h1>This is the title</h1>\n\n    <p class=\"flex-1 flex items-end\">This is the subtitle</p>\n\n    <div class=\"flex justify-between\">\n      <span>Yoann Lopez</span>\n      <span>2024년 6월 15일</span>\n    </div>\n  </div>\n\n  <!-- 모든 에디션에 대해 반복합니다... -->\n</div>\n```\n\n\n<div class=\"content-ad\"></div>\n\n당신이 Tailwind로 생성한 스타일시트와 함께 Gmail 받은 편지함으로 이메일을 보냅니다:\n\n\n<img src=\"/assets/img/2024-06-20-SendingHTMLemails_1.png\" />\n\n\n음... 제대로 작동하지 않는 것 같네요 (이것은 과장이 아닙니다).\n\n대부분의 메일 클라이언트와 호환되면서 기대한 결과에 근접하려면 다음 마크업을 작성해야 합니다:\n\n<div class=\"content-ad\"></div>\n\n\n테이블 태그를 Markdown 형식으로 변경해 드렸어요.\n\n```js\n## 테이블1\n| 속성 | 값 |\n|---|---|\n| 스타일 | max-width: 1200px; border-collapse: collapse; margin: 0 auto |\n| 내용 | 이미지, 제목, 부제, 저자, 날짜 |\n\n## 테이블2\n| 속성 | 값 |\n|---|---|\n| 스타일 | max-width: 300px; margin: 0 auto |\n| 내용 | 이미지, 제목, 부제, 저자, 날짜 |\n\n## 결과\n![이미지](/assets/img/2024-06-20-SendingHTMLemails_2.png)\n```\n당신의 이메일로 전송해 드렸어요!\n\n완벽하진 않지만, 거의 비슷하죠…\n아쉬운 점들이 있어요\n\n\n<div class=\"content-ad\"></div>\n\n- Tailwind CSS를 사용할 수 없어요 (스트일시트가 너무 커서 메일 클라이언트가 거부할 수 있어요)\n- 인라인 스타일을 사용해야 해요 (외부 스타일시트는 전혀 지원되지 않고, 내장 스타일시트는 모든 클라이언트에서 지원되지 않아요)\n- 내용을 적절하게 표시하려면 의미론적으로 잘못된 테이블을 사용해야 해요\n- 코드가 정말 형편없어요!\n\n# 좋은 이메일을 작성하는 방법\n\n다행히도, 어떤 사이트들은 우리가 이런 지옥을 헤쳐나가는 데 도움을 줍니다:\n\n- Can I Email (CSS/HTML의 Can I Use에 해당하는 이메일 버전). 스코어보드는 어떤 클라이언트를 쉽게 지원할 수 있는지와 어떤 클라이언트를 지원하기 어려운지 보여주는 좋은 자료입니다... 각 CSS 기능에 대한 다양한 클라이언트를 쉽게 비교할 수도 있어요\n- Mailchimp 클라이언트 CSS 지원\n- Email On Acid의 블로그 포스트\n- 이메일용 CSS 지원에 대한 궁극의 안내서\n\n<div class=\"content-ad\"></div>\n\n## HTML 이메일을 작성해야 할 때의 주요 포인트와 배울 점을 소개합니다\n\n- 이메일 레이아웃을 구성할 때 Flexbox와 같은 현대 CSS 기술을 사용하지 말아야 합니다. 대신 옛날 방식의 테이블을 사용해야 합니다.\n- 스타일을 스타일 시트(내장 또는 연결된)로 작성해서는 안 됩니다. 스타일 시트는 일부 클라이언트(예: Gmail)에서 지원되지만, 해당 시트에 대한 몇 가지 규칙(예: 헤드 부분에만 지원, 최대 16ko, 스타일 시트의 속성 중 하나라도 지원되지 않으면 전체 스타일 시트가 삭제됨 등)이 있습니다. 대신 모든 스타일을 인라인으로 넣어야 합니다. 이를 위한 몇 가지 도구가 있습니다:\n   * Premailer\n   * Mailchimp의 CSS 인라이너 도구\n   * customer.io는 이를 처리하기 위해 CSS 전처리기를 \"브로드캐스트\"에 통합합니다.\n- 모든 CSS 선택자 및 속성이 지원되지 않으며, 지원 수준은 클라이언트에 크게 의존합니다. 동일한 클라이언트의 다른 앱들 사이에도 차이가 있을 수 있습니다(예: Gmail 데스크톱 웹메일, iOS 앱, 안드로이드 앱 및 모바일 웹메일 간의 차이) 그리고 물론 버전 간에도 (예: Outlook 데스크톱 클라이언트의 다른 버전들 간의 큰 차이가 있습니다). Hello GMail과 같이 일부 클라이언트들은 단 한 가지 속성만 지원되지 않아도 모든 스타일을 삭제할 수 있습니다. 이벤트의 경우(Gmail에서 다시 인사), 스타일은 한 \"보기 위치\"에서는 지원되지만 다른 곳에서는 그렇지 않을 수 있습니다(예: 전체 이메일을 크게 할 웹 뷰를 열 때 잘린 경우에는 GMail 주 inbox에 내장된 스타일 시트를 사용할 수 있지만, 동작하지 않습니다). 심지어 더 이상 이상할 정도로, 일부 클라이언트들(Gmail다시 한번)은 구글 계정만 사용하거나 구글 계정 없이 사용할 때도 일부 CSS 속성을 지원할 수 있습니다(GANGA 사건). 지원할 항목과 방법에 대해 어떤 선택을 할지에 대한 결정을 내려야 합니다. 일부 클라이언트에 대해 우아한 버전을 원하십니까(예: Gmail에서 지원되지 않지만 Apple Mail에서 지원되는 box-shadow 속성 추가)? 일부 클라이언트가 깨질 가능성이 있는 속성을 사용하십니까(따라서 해당 클라이언트를 \"지원하지 않는\" 클라이언트로서)? 등.\n- 이메일은 \"클립\" 또는 잘릴 수 있습니다. 예를 들어 Gmail은 이메일을 정확히 102Kb에서 자릅니다. 사용자에게는 클라이언트의 \"전체 메일 보기\"를 사용하거나(위에서 보았듯이 다른 CSS/HTML 지원을 가질 수 있음) 웹 뷰를 사용하는 선택만 남습니다. 물론, 자르기 동작 또는 길이는 전적으로 클라이언트 및 버전에 따라 달라집니다...\n\n## 전 세계에서 지원되는 좋거나 나쁜 기능의 짧은 목록을 원하신다면 다음과 같습니다.\n\n- flexbox를 사용할 수 없으며, 대신 `tables /`을 사용해야 합니다.\n- SVG를 사용할 수 없으며, 대신 일반 이미지를 사용해야 합니다.\n- 사용자 지정 글꼴을 사용할 수 없으며, 시스템 글꼴을 사용해야 합니다(그러나 사용자 지정 글꼴을 지원하는 클라이언트를 위해 `head /`에서 사용자 지정 글꼴을 추가할 수 있음에 유의하십시오).\n- box-shadow를 사용할 수 없습니다(그러나 일부 클라이언트는 지원하므로 해당 속성을 추가해도 됩니다). 그림자가 본적 필요한 경우, 테이블 안의 이미지의 오래된 방식으로 돌아가야 할 것입니다.\n- 요소를 위치시킬 수 없습니다(특히 고정, 붙박이 또는 절대 위치에).\n\n<div class=\"content-ad\"></div>\n\n# 평판에 관해서는?\n\n당신의 평판은 여러 요소에 달려 있어요: 도메인 이름과 이메일을 보내는 서버(즉, 발신자의 평판, 예: Sendgrid 등), 메시지 내용, 헤더의 존재 또는 부재, 링크와 이미지의 상태, 접근성 등이죠.\n\nSPF, DKIM, DMARC와 같은 적절한 DNS 구성의 중요성을 과소평가하지 마세요. 이는 SpamAssassin 노트를 크게 개선/균형을 맞출 수 있습니다.\n\n제공업체들은 종종 권장 사항을 업데이트합니다 (예: Yahoo와 Gmail). 그래서 이메일을 읽을 수 있도록 사용자를 원한다면 이러한 권장 사항을 지속적으로 확인하는 것이 매우 권장됩니다.\n\n<div class=\"content-ad\"></div>\n\n\"당신의 '신뢰도'를 크게 향상시키는 한 가지 방법은 이메일에 List-Unsubscribe 헤더를 제공하는 것입니다. 이 헤더를 추가하면 사용자가 클라이언트 내에서 쉽게 뉴스레터 구독 해지를 할 수 있게끔 버튼/링크를 쉽게 찾을 수 있게 됩니다.\n\nSpamAssassin (그리고 세계의 메일 제공업체들)에 대한 중요한 사실 중 하나는 .xyz와 같은 ‘이국적인’ 도메인 TLD(최상위 도메인)를 싫어합니다(🙄 snowball.xyz를 보고 있어요). 이러한 종류의 도메인을 사용하여 이메일을 보내거나 이메일에 이러한 도메인을 사용한 링크를 첨부하면 매우 부정적인 평판을 얻게 될 수 있습니다.\n\n이를 극복하는 한 가지 방법은 이메일을 보내거나 이메일 자산을 호스팅하고 '이국적' 도메인에 호스팅된 실제 제품으로 리디렉션하기 위해 전용 '신데렐라' 도메인(media-snowball.com 대신 snowball.xyz)을 사용하는 것입니다.\n\n또한, 이메일을 보내는 제공업체의 '추적자' URL을 사용하는 것은 링크의 나쁜 평판을 우회하는 대안일 수 있습니다. 예를 들어, Sendgrid는 보낸 이메일 내의 모든 링크를 추적하기 위한 특정 URL로 자동으로 대체합니다. '신데렐라' 도메인을 추적 도메인으로 구성한 경우, 이메일 내의 모든 '이국적' URL은 특정 '신데렐라' URL로 교체됩니다. 보너스로 추적이 가능합니다(예: 이메일 내의 모든 snowball.xyz URL은 자동으로 Sendgrid에 의해 url4000.media-snowball.com/ls/click?upn=`…` URL로 대체되어 snowball.xyz URL이 숨겨지게 됩니다).\"\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경해보세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n어떤 이메일 클라이언트/제공 업체를 사용하고 있나요?\n- 애플\n- Gmail (Google 계정)\n- Gmail (비-Google 계정)\n- 야후\n- 오랑지\n- SFR\n- Free\n- La Poste\n- ProtonMail\n- 기타\n이메일을 어떻게 확인하시나요?\n- 데스크탑/노트북 컴퓨터에서 웹메일\n- 모바일에서 웹메일\n- Windows 클라이언트 (예: Outlook, Mozilla Thunderbird 등)\n- MacOS 클라이언트 (예: Apple Mail, Outlook, Mozilla Thunderbird 등)\n- Linux 클라이언트 (예: Mozilla Thunderbird 등)\n- iOS 앱\n- 안드로이드 앱\n- 기타\n```\n\n# 도움이 될만한 도구들\n\n그리고 여기 몇 가지 유용한 도구들이 있어요. 이 도구들을 사용하여 이메일 형식 및 유효성을 테스트하고 평가할 수 있습니다:\n\n- Email On Acid은 이메일을 만들고 최적화, 미리 보기, 테스트 및 유효성을 검사하는 데 도움을 줍니다. 그러나 솔루션이 상당히 비싼 편입니다.\n- Mail Tester는 이메일을 보낼 수 있는 이메일 주소를 제공하고 다음의 다양한 기준에 근거하여 이메일의 \"스팸 레벨\"을 평가합니다: 도메인, 헤더, 내용, SpamAssassin 결과, 깨진 링크 또는 이미지, URL 단축기 등등.. 그런 다음 당신에게 1에서 10까지의 점수와 평판 수준 향상을 위한 조언을 제공합니다.\n\n\n<div class=\"content-ad\"></div>\n\n- Sendgrid은 여러 클라이언트에서 이메일을 테스트할 수 있는 방법을 제공합니다. 테스트하려는 각 클라이언트 당 1크레딧을 사용해야하지만 그런 다음 해당 클라이언트에서 이메일을 실행하고 스크린샷 및 보고서를 제공합니다. 정말 유용합니다.\n\n이게 전부에요.\n도움이 되었기를 바랍니다.\n\n질문이 있으시면 언제든 댓글을 남기지 말고 질문해 주세요!\n\n스노볼을 위한 클레멘트❤️\n이 기사를 작성하는 데 도움을 준 요안 로페즈에게 감사드립니다 🙏","ogImage":{"url":"/assets/img/2024-06-20-SendingHTMLemails_0.png"},"coverImage":"/assets/img/2024-06-20-SendingHTMLemails_0.png","tag":["Tech"],"readingTime":7},{"title":"CSS의 고급 레이아웃 기술","description":"","date":"2024-06-20 03:20","slug":"2024-06-20-AdvancedLayoutTechniquesinCSS","content":"\n\n\n![image](/assets/img/2024-06-20-AdvancedLayoutTechniquesinCSS_0.png)\n\n# :empty 가상 클래스를 사용하여 내용이 없는 요소 선택하기\n\n추가적인 마크업 없이 빈 요소를 선택하는 쉬운 방법은 :empty 가상 클래스를 사용하여 자식 요소가 없는 요소를 대상으로 하는 것입니다.\n\n아래 예시에서는 class가 message인 두 개의 div 요소가 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html>\n  <body>\n    <div class=\"message\">\n      <p>Info: Hey there!</p>\n    </div>\n    <div class=\"message\"></div>\n  </body>\n</html>\n```\n\n:empty 가상 클래스 선택자를 사용하여 빈 div 요소를 숨길 수 있어요\n\n```js\n.message {\n  margin: 10px;\n  padding: 10px;\n  background-color: blue;\n  color: white;\n  border-radius: 5px;\n}\n\n.message:empty {\n  display: none;\n}\n```\n\n하지만, :not(:empty) 가상 클래스 선택자를 사용하여 비어 있지 않은 message 요소를 스타일링하는 방법도 있어요\n\n<div class=\"content-ad\"></div>\n\n```js\n.message:not(:empty) {\n  margin: 10px;\n  padding: 10px;\n  background-color: lightblue;\n  color: white;\n  border-radius: 5px;\n}\n```\n\n🚨 공백은 자식으로 간주되기 때문에, :empty는 요소에 내용(자식이 없지만 시작 태그와 끝 태그 사이에 공백이 있는 경우)이 있는 경우 작동하지 않음을 주의하십시오.\n\n# *-Of-Type CSS 가상 클래스를 사용하여 위치에 따른 요소 선택하기\n\n부모 요소 내에서 형제 요소 중에서 위치에 따라 요소를 선택하는 방법을 알아보세요.\n\n<div class=\"content-ad\"></div>\n\n# :first-of-type 와 :last-of-type\n\nCSS :first-of-type 선택자를 사용하면 부모 컨테이너 내에서 특정 요소의 첫 번째 인스턴스를 선택할 수 있습니다. CSS의 :last-of-type 선택자를 사용하면 마지막 요소를 선택할 수 있습니다.\n\n```js\narticle p:first-of-type {\n  font-size: 16px;\n  font-style: italic;\n}\n\narticle p:last-of-type {\n  color: green;\n}\n```\n\n# :only-of-type\n\n<div class=\"content-ad\"></div>\n\n:only-of-type 가상 클래스는 동일한 유형의 형제 요소가 없는 요소를 나타냅니다.\n\n```js\narticle blockquote:only-of-type {\n  border-left: 4px solid black;\n  padding-left: 10px;\n  font-style: italic;\n  font-weight: bold;\n  color: darkblue;\n}\n```\n\n# :nth-of-type()\n\n:nth-of-type 가상 클래스는 동일한 유형(태그 이름)의 형제 요소 중에서 요소의 위치에 따라 일치시킵니다.\n\n<div class=\"content-ad\"></div>\n\n\n/* 위 예시에서 2번째와 6번째 단락과 일치합니다. (즉, 4n+2 규칙에 따라 일치하는 요소입니다.)\n    4n+2는 4*0 + 2 = 2번째, 4*1 + 2 = 6번째 등으로 변환될 수 있습니다.\n*/\narticle p:nth-of-type(4n+2) {\n  color: purple;\n}\n\n\n아래 예시를 살펴보세요:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <article>\n        <h1>Lorem Ipsum</h1>\n        <p>\"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\"</p>\n        <!-- 이하 생략 -->\n    </article>\n</body>\n</html>\n```\n\n또한, CSS 코드는 다음과 같습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\narticle p:first-of-type {\n  font-size: 16px;\n  font-style: italic;\n}\n\narticle img:last-of-type {\n  border: 10px solid pink;\n}\n\narticle blockquote:only-of-type {\n  border-left: 4px solid black;\n  padding-left: 10px;\n  font-style: italic;\n  font-weight: bold;\n  color: darkblue;\n}\n\n/* 2번째와 6번째 문단이 일치하도록 합니다.4n+2는 4*0+2=2번째, 4*1+2=6번째와 같이 모든 4의 배수에 2를 더하여 일치하는 엘리먼트를 의미합니다 */\narticle p:nth-of-type(4n+2) {\n  color: purple;\n}\n```\n\n# CSS calc()를 사용하여 고정-유동-고정 레이아웃 만들기\n\nCSS calc()를 사용하면 단위를 섞어 실시간 계산을 수행할 수 있습니다. 알 수 없는 수를 고려하여 요소의 크기를 조절해야 할 때 유용합니다.\n\ncalc() 속성은 스타일시트 내의 CSS 길이 또는 숫자가 있는 곳이라면 어디서나 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n레이아웃 유연성을 향상시키는 두 가지 주요 기능을 제공합니다:\n\n- 백분율과 절대 값 혼합\n- 크기 단위 혼합\n\n# 백분율과 절대 단위 혼용\n\n백분율과 절대 단위를 결합한 예제를 살펴보겠습니다. 사용 가능한 영역 중 50%를 할당하되 고정 픽셀 양만큼 빼고 싶다고 가정해 봅시다. 이를 다음과 같이 작성할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n\n```js\n.parent {\n  border: 1px solid black;\n}\n\n.child {\n  width: calc(50% - 100px);\n  background-color: green;\n}\n```\n\nAnd the HTML code:\n\n```js\n<div class=\"parent\">\n  <div class=\"child\">Always 100 pixels less than half the available area</div>\n</div>\n```\n\nNow if you preview this code, it’d look like:\n\n\n<div class=\"content-ad\"></div>\n\n부모 요소의 크기를 줄이면 다음과 같이 보입니다:\n\n![image1](/assets/img/2024-06-20-AdvancedLayoutTechniquesinCSS_2.png)\n\n이 방식의 좋은 점은 콘텐츠의 오른쪽 가장자리를 항상 포함 영역 중앙에서 왼쪽으로 100px 위치시킬 수 있다는 것입니다. 다양한 값 유형을 혼합할 수 있는 이 능력은 웹 애플리케이션의 레이아웃 관리를 향상시켜서 다양한 크기의 장치에 걸쳐 더 효과적인 제어를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# 단위 조합\n\n또 다른 훌륭한 기능은 다양한 측정 단위를 조합하여 최종 크기를 얻을 수 있는 능력입니다. 예를 들어, 'em'과 'px' 단위를 섞어서 현재 글ꔼ 크기에 상대적인 크기를 설정할 수 있습니다.\n\n```js\n.child {\n  height: calc(10em + 3px);\n  background-color: green;\n}\n```\n\n💡 calc()를 사용하여 +, -, *, /를 사용하여 값들을 더하거나 빼내거나 곱하거나 나눌 수 있어서 다양한 가능성을 제공합니다. calc()는 CSS 길이나 숫자가 사용될 수 있는 곳이면 어디에서든 사용할 수 있습니다. 또한 곧 각도나 주파수 속성에 대한 calc()를 추가할 예정입니다.\n\n<div class=\"content-ad\"></div>\n\n# CSS를 사용하여 요소를 동적으로 크기 조절하기\n\n브라우저 크기를 조정할 때도 반응형 레이아웃을 만들 수 있도록 뷰포트의 크기에 따라 요소의 크기를 조정할 수 있습니다.\n\n# 뷰포트 단위\n\n뷰포트 단위는 \"반응형 길이 단위\"로 간주되며, 브라우저 크기가 조정될 때마다 그 값이 조정됩니다. CSS에는 이러한 뷰포트 기반 단위 네 가지가 포함되어 있습니다. 이들은 vh, vw, vmin 및 vmax입니다.\n\n<div class=\"content-ad\"></div>\n\n- 뷰포트 높이 (vh). 이 단위는 뷰포트의 높이를 기준으로 합니다. 1vh의 값은 뷰포트 높이의 1%에 해당합니다.\n- 뷰포트 너비 (vw). 이 단위는 뷰포트의 너비를 기준으로 합니다. 1vw의 값은 뷰포트 너비의 1%에 해당합니다.\n- 뷰포트 최솟값 (vmin). 이 단위는 뷰포트의 작은 차원을 기준으로 합니다. 뷰포트 높이가 너비보다 작은 경우, 1vmin의 값은 뷰포트 높이의 1%에 해당합니다. 마찬가지로, 뷰포트 너비가 높이보다 작은 경우, 1vmin의 값은 뷰포트 너비의 1%에 해당합니다.\n- 뷰포트 최댓값 (vmax). 이 단위는 뷰포트의 큰 차원을 기준으로 합니다. 뷰포트 높이가 너비보다 큰 경우, 1vmax의 값은 뷰포트 높이의 1%에 해당합니다. 마찬가지로, 뷰포트 너비가 높이보다 큰 경우, 1vmax의 값은 뷰포트 너비의 1%에 해당합니다.\n\n다음과 같이 단락을 포함한 div 요소로 시작하세요:\n\n```js\n<div class=\"Layout\">\n  <p>Hello Dynamic Sizing!</p>\n</div>\n```\n\n포함 요소에 뷰포트 단위를 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n```css\n.Layout {\n  height: 40vh;\n  width: 40vw;\n  margin: 30vh 25vw;\n  background-color: cadetblue;\n}\n\np {\n  padding: 32px 0 0 32px;\n  font-family: monospace;\n  font-size: 18px;\n  color: azure;\n}\n```\n\n실제로 보기:\n\n브라우저 크기를 조절하면 크기가 반응적으로 변경됩니다.\n\n# 단 하나의 CSS 값으로 손쉽게 스타일 재설정하기\n\n\n<div class=\"content-ad\"></div>\n\n요소의 스타일을 부모의 스타일로 재설정해야 할 때, 더 많은 스타일 선언을 덧붙이는 대신 간단히 재설정할 수 있습니다.\n\n섹션 컨테이너 안에 랩핑된 버튼 요소를 선언하세요:\n\n```js\n<section>\n  <button>Click me!</button>\n</section>\n```\n\n버튼 요소의 부모인 섹션 요소에서 선언된 글꼴 색상을 사용하려면 색상을 검정으로 설정하는 대신 재설정할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n\nsection {\n  color: black;\n}\n\nbutton {\n  cursor: pointer;\n  padding: 20px;\n  border: 0;\n  border-radius: 4px;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  font-weight: 500;\n  color: white;\n  background-color: springgreen;\n}\nsection button {\n  color: unset;\n}\r\n\n\n실제로 보십시오:\n\n# CSS를 사용하여 반응형 플루이드 칼럼 레이아웃 설계하기\n\n추가 마크업이 필요 없이 유연하고 반응성 레이아웃을 만들기 위해 CSS 칼럼을 활용하는 방법을 발견하세요.\n\n<div class=\"content-ad\"></div>\n\n참고 사항:\n\n- column-width는 width가 아닌 min-width와 같이 작동합니다. 브라우저는 제공된 너비로 가능한 많은 열을 렌더링합니다. 각 열이 제공된 값 이상을 차지할 수 있다면 그렇게 할 것입니다.\n- column-span은 특정 요소가 column-count와 column-width를 무시하도록 허용합니다. 정수값으로 설정하여 특정 열 수에 걸쳐 확장하거나 \"all\"로 모든 열에 걸쳐 확장할 수 있습니다. 그러나 이 속성은 Firefox에서 작동하지 않습니다. 해결책으로는 컨테이너에 적용된 열을 벗어난 요소(예: 헤딩)로 이동하는 것이 있습니다. 이렇게 하면 해당 요소가 자동 열 흐름 밖에 유지됩니다.\n- column-fill을 사용하면 콘텐츠가 열로 흐르는 방식을 변경할 수 있습니다. 기본값으로 \"balance\"로 구성되어 있어 콘텐츠가 열 사이에 균등하게 분배되도록 보장합니다. \"auto\"로 설정할 수도 있지만 이를 위해 고정 높이를 설정해야 합니다. 이는 유동적이고 응답형 레이아웃의 개념을 깨는 것이므로 신중히 사용해야 합니다.\n- column-gap은 각 열 사이의 갭 또는 거터를 지정하며, 음수가 아닌 길이를 사용하여 픽셀, rems, 다시 말해 퍼센트로 설정할 수 있습니다. column-gap은 열 사이의 내장된 패딩으로 생각할 수 있으며 올바른 간격을 얻기 위해 실제로 수학을 할 필요가 없습니다.\n- column-rule을 사용하면 각 열 사이에 테두리를 넣을 수 있으며, border shorthand와 동일한 인수를 사용하므로 1px dashed #ccc와 같이 말할 수 있습니다. 이렇게 하면 각 열 가장자리에 수직 선이 추가됩니다.\n\n```js\n<section>\n  <h2>Europe</h2>\n  <nav>\n    <ul>\n      <li><a href=\"#\">Belgium</a></li>\n      <li><a href=\"#\">Netherlands</a></li>\n      <li><a href=\"#\">Denmark</a></li>\n      <li><a href=\"#\">Germany</a></li>\n      <li><a href=\"#\">Czechia</a></li>\n      <li><a href=\"#\">France</a></li>\n      <li><a href=\"#\">Spain</a></li>\n      <li><a href=\"#\">Portugal</a></li>\n      <li><a href=\"#\">Italy</a></li>\n      <li><a href=\"#\">Poland</a></li>\n      <li><a href=\"#\">Sweden</a></li>\n      <li><a href=\"#\">Norway</a></li>\n      <li><a href=\"#\">Finland</a></li>\n      <li><a href=\"#\">Slowakia</a></li>\n      <li><a href=\"#\">Slovenia</a></li>\n      <li><a href=\"#\">Hungary</a></li>\n    </ul>\n  </nav>\n</section>\n```\n\n위에서 배운 column 프로퍼티를 사용해 보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nnav {\n    /*column-count: 4;\n    column-width: 150px;*/\n    columns: 4 120px; /* same as above */\n    column-gap: 2rem;\n    column-rule: 1px dashed #ccc;\n}\n```\n\n실제로 이것을 확인해 보겠습니다:","ogImage":{"url":"/assets/img/2024-06-20-AdvancedLayoutTechniquesinCSS_0.png"},"coverImage":"/assets/img/2024-06-20-AdvancedLayoutTechniquesinCSS_0.png","tag":["Tech"],"readingTime":8},{"title":"이 웹사이트의 다크 모드를 위한 1가지 간단한 CSS 트릭","description":"","date":"2024-06-20 03:18","slug":"2024-06-20-1simpleCSStrickforDarkModeonyourwebsite","content":"\n\n## 야간 모드가 기다리고 있어요!\n\n상상해보세요: 밤이 깊어지고 달이 높아지는데, 당신은 편안하게 즐기는 사이트를 둘러보고 있을 때 — 바로 그때! — 밝은 흰색 배경이 마치 협시처럼 쏟아지는 걸 맞이합니다. 이게 최선은 아니겠죠?\n\n개발자들은 이 간단한 문제를 기술적인 미궁으로 만들어, 수많은 클래스, 스타일 및 JavaScript 파일을 추가합니다. 그러나 친애하는 독자여, CSS 마법의 20줄 미만으로 다크 모드를 달성할 수 있는 더 간단한 방법이 있습니다. 네, 들었습니다 — 20줄 미만!\n\n# 다크 모드를 간편화하기\n\n<div class=\"content-ad\"></div>\n\nCSS를 활용하면 사용자 선호 테마에 매끄럽게 적응하는 웹사이트를 구축할 수 있어요. 어떻게요? 미디어 쿼리를 사용하여 --body-bg 및 --body-color CSS 변수를 조정하면 되죠. 라이트 모드에서는 배경을 흰색으로, 다크 모드에서는 검정색으로 설정할 거예요. 이렇게 하면 됩니다:\n\n```js\n@media (prefers-color-scheme: dark) {\n  :root {\n    --body-bg: black;\n    --body-color: white;\n  }\n}\n```\n\n```js\n@media (prefers-color-scheme: light) {\n  :root {\n    --body-bg: white;\n    --body-color: black;\n  }\n}\n```\n\n만세! 이제 사이트가 낮과 밤 사이를 자유자재로 이동할 수 있답니다.재즈 뮤지션이 조퍼바꾸는 것만큼 부드럽죠.\n\n<div class=\"content-ad\"></div>\n\n# 작동 방식\n\n이 마법의 핵심은 prefers-color-scheme 미디어 쿼리입니다. 이 미디어 쿼리는 사용자의 시스템 환경 설정을 확인하고 해당 스타일을 적용합니다. 사용자가 어두운 테마를 선호하는 경우 CSS 변수 --body-bg와 --body-color은 각각 검정과 흰색으로 설정됩니다. 반대로, 사용자가 밝은 테마를 선호하는 경우 이러한 변수는 흰색과 검정으로 설정됩니다.\n\n# 다크 모드의 이유\n\n하지만 왜 다크 모드를 신경 써야 할까요? 이유는 몇 가지 있습니다:\n\n<div class=\"content-ad\"></div>\n\n- 눈의 피로를 줄여줍니다: 특히 어두운 환경에서는 다크 모드가 눈에 부담을 덜어줄 수 있습니다.\n- 배터리 수명 절약: OLED 화면에서는 다크 모드를 사용하여 검은 픽셀이 더 적은 전력을 소비하기 때문에 배터리 수명을 절약할 수 있습니다.\n- 멋있어 보입니다: 솔직히 말해서, 다크 모드는 슬릭하고 현대적으로 보입니다.\n\n![이미지](/assets/img/2024-06-20-1simpleCSStrickforDarkModeonyourwebsite_0.png)\n\n# 프로젝트에 다크 모드 구현하기\n\n이 CSS 트릭을 프로젝트에 통합하려면 다음 단계를 따르세요:\n\n<div class=\"content-ad\"></div>\n\n- 변수 정의: CSS 변수를 루트 수준에서 설정하여 스타일 시트 전체에서 액세스할 수 있도록 합니다.\n- 미디어 쿼리 적용: 사용자의 선호도에 따라 이러한 변수를 조정하기 위해 prefers-color-scheme 미디어 쿼리를 사용하세요.\n- 요소 스타일링: CSS에서 이러한 변수를 사용하여 전체 사이트가 다크 모드 설정을 준수하도록 합니다.\n\n예시:\n\n```js\nbody {\n  background-color: var(--body-bg);\n  color: var(--body-color);\n}\n```\n\n# 결론: 밤 모드가 여러분을 기다립니다!\n\n<div class=\"content-ad\"></div>\n\n여기 있습니다! 웹 개발 생활을 조금 더 쉽게 만드는 빠르고 재미있는 가이드! 기술 분야에서 모든 것이 이렇게 간단했으면 좋겠죠? 이제 용감하게 코딩하고 사용자들을 눈부시게 하거나 배열에 뒤얽히지 않고 진행할 수 있어요! 새벽에 코딩을 하는 야행성 개발자이든, 세련된 현대적인 디자인을 좋아하는 사람이든, 이 간단한 CSS 요령이 여러분을 지켜줄 거예요.\n\n🌚 여정을 즐겼나요? 멋지군요! 아래는 어떻게 저희를 지원할 수 있는지 안내해 드립니다:\n👏 50번의 박수가 필요합니다; 여러분도 박수를 보내주세요.\n💬 의견을 남겨주세요; 여러분의 피드백을 듣는 것을 좋아해요!","ogImage":{"url":"/assets/img/2024-06-20-1simpleCSStrickforDarkModeonyourwebsite_0.png"},"coverImage":"/assets/img/2024-06-20-1simpleCSStrickforDarkModeonyourwebsite_0.png","tag":["Tech"],"readingTime":3},{"title":"도시 연구소 디자인 라이브러리의 진화","description":"","date":"2024-06-20 03:16","slug":"2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary","content":"\n\n1.한 해 동안 여러 웹사이트를 출시한다고 상상해보세요. 각 사이트는 버튼, 아이콘, 이미지, 제목, 요약 및 날짜와 같은 디자인 요소를 여러 페이지에 걸쳐 복제해야 합니다. 이 복제본마다 다른 카드 변형이 필요할 수도 있습니다. 아래 프로젝트를 참고해주세요:\n\n\n![이미지 0](/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_0.png)\n\n\n\n![이미지 1](/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_1.png)\n\n\n\n![이미지 2](/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_2.png)\n\n\n<div class=\"content-ad\"></div>\n\n지금까지, 저희의 웹 개발 및 디자인 팀은 각 사이트를 개별적으로 프로토타입으로 제작한 후 매번 새로운 프로젝트를 위해 이러한 요소들을 처음부터 다시 만들었습니다. 이 방식은 시간이 많이 소요되며 일관성이 없었으며 종종 완전히 접근 가능하지 않은 사이트가 되거나 최고의 실천 방법을 준수하지 않거나 Urban의 디자인 표준과 일치하지 않는 사이트를 만들어내기도 했습니다.\n\nUrban이 변화를 이끌어가는 사람들과 지역사회 지도자들이 가족과 지역사회의 복지를 향상시키기 위해 신뢰하는 소스인 만큼, 우리는 모든 사용자에게 친화적인 웹 인터페이스를 만들고, 스크린 리더와 음성 인식 등 개인 사용자의 보조 기술과 호환되며, 웹 접근성 표준에 최고의 실천 방법을 준수하는 것이 중요합니다.\n\n그런 이유로 저희는 모든 웹사이트에서 재사용 가능한 컴포넌트를 활용할 수 있는 새로운 시스템이 필요했습니다. 이러한 시스템은 개발자와 디자이너가 혁신적인 솔루션을 개발에 집중할 수 있도록 해줄 뿐만 아니라, 계속해서 코드를 작성하거나 자주 사용되는 요소를 계속해서 프로토타입으로 제작할 필요가 없게 하며, 우리의 웹사이트가 최고 수준의 보안 표준을 준수하고 유지 보수가 용이하며 Urban의 미션과 일치한다는 것을 보장합니다. 이 전략적 전환이 우리의 핵심 가치와 일치하는 혁신적이고 안전한 디지털 콘텐츠를 전달하는 능력을 향상시키는 데 중요했습니다.\n\n# 이전 디자인 라이브러리의 단점 탐색:\n\n<div class=\"content-ad\"></div>\n\nUrban의 웹 프로젝트는 2017년부터 Atomic 디자인 시스템을 도입하기 시작했습니다. 이 방식은 팀이 재사용 가능한 구성 요소를 만들고 활용할 수 있도록 함으로써 개발 프로세스를 혁신했습니다. 이 구성 요소들은 Drupal 8 사이트의 템플릿에 통합되었고 (일반적으로 Pattern Lab이라고 함), 이를 통해 몇 가지 주요 전략이 강조되었습니다:\n\n- 디자인 프로세스 초기에 협업을 강조하여 개발자와 디자이너가 공유 토큰 및 구성 요소 카탈로그를 편집할 수 있도록 함\n\n- 코딩 프로세스를 간소화하고 새로운 사이트 기능에 대해 구성 요소를 재사용함\n\n- 디자인 시스템을 Drupal과 별도로 유지하여 더 쉽고 유지하기 쉬운 형태로 관리함\n\n<div class=\"content-ad\"></div>\n\n- Atomic 디자인 원칙을 적용하여 디자인 시스템의 각 요소 프로토타입화하기\n\n기존 디자인 시스템의 장점에도 불구하고, 상당한 단점이 있었습니다. 각 새로운 Drupal 사이트를 만들 때마다 전체 디자인 시스템을 처음부터 재작성해야 했는데, 이는 시간이 많이 소요되고 비효율적이었습니다. 재사용 가능한 구성 요소는 Drupal 템플릿 시스템에만 제한되어 있었기 때문에, 이를 통해 비-Drupal 웹 프로젝트에서 활용을 제한되어 있었고, 디자인 시스템의 전체 잠재력을 이뤄내지 못하게 되었습니다.\n\nUrban의 메인 사이트를 새롭게 업데이트하기 시작할 때, 우리는 Atomic 디자인 원칙을 준수하고 Drupal뿐만 아니라 모든 웹 응용 프로그램에서 사용할 수 있는 보다 유연한 디자인 시스템을 만들기 위한 기회를 가졌습니다. 우리 내부 디자인 팀은 프론트엔드 스타일링을 위해 Tailwind CSS를 구현하기 시작했고, 2019년까지 현재 디자인 시스템을 구성하는 버튼, 폰트 스케일, 간격, 색상 및 다양한 사용자 인터페이스 구성 요소를 개발했습니다.\n\n그러나 몇 가지 도전이 남아 있었습니다. 간격은 오로지 Tailwind CSS 값에만 기반하고 있었습니다. 이러한 남아 있는 구성 요소를 도입하기 위해, 우리 디자인 팀은 Urban의 지침과 기술적 프레임워크와 동기화하는 개선된 디자인 시스템을 만들었습니다. 이 협업적 접근 방식은 2021년 Lyndon의 생성으로 이어졌습니다.\n\n<div class=\"content-ad\"></div>\n\n# 우리의 Lyndon 디자인 라이브러리를 소개합니다\n\nUrban Institute가 설립된 린든 B. 존슨 전 대통령의 이름을 딴 Lyndon은 이제 Urban의 디자인 표준을 보유하고 다양한 프로젝트를 통해 디지털 경험을 통합합니다. 강력한 Stencil JavaScript 프레임워크를 기반으로 한 Lyndon은 성능 및 크로스 플랫폼 호환성을 최적화한 웹 컴포넌트를 생성합니다. 이 이니셔티브는 Lyndon을 우리 디자이너 및 웹 개발팀에게 유연하고 동적인 툴킷으로 만들어줍니다. 팀은 우수하고 효율적인 디지털 경험을 만들 수 있도록 지원합니다.\n\nLyndon은 Figma에서 제작되어 일관된 컴포넌트, 색상, 간격 및 타이포그래피 스위트를 개발할 수 있었습니다. 프론트엔드 개발팀은 모든 컴포넌트를 Figma에서 Storybook으로 정확하게 이전하고 정렬했습니다. Storybook 통합을 통해 작업 흐름을 최적화하고 디자인 일관성을 향상시켰습니다. 이는 디자이너들이 더 복잡한 창의적 작업에 집중할 수 있도록 돕고 모형 및 프로토타입 작성을 효율적으로 만들어줍니다. 아래 이미지는 이 통합을 보여줍니다. 상단 이미지는 Figma에서 텍스트 스타일을 표시하고, 하단 이미지는 해당 Storybook 컴포넌트를 보여줍니다. 이 통합은 사이트에서 사용할 수 있는 일관된 텍스트 스타일을 확실히 보장합니다.\n\n![이미지](/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_3.png)\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_4.png)\n\nStorybook은 접근성이 좋고 직관적인 레이아웃에서 전체 컴포넌트 라이브러리를 제공하여 개발 도구로서 작용하며 디자인 시스템의 살아있는 문서 역할을 합니다. 색상, 간격과 같은 디자인 토큰부터 타이틀과 같은 원자화된 컴포넌트까지, Storybook은 사용자 인터페이스 요소와의 동적 실험을 위한 대화형 컨트롤을 제공합니다. Storybook은 이러한 컴포넌트를 개발, 테스트 및 품질 보증 과정에서 사용할 수 있는 이야기로 보존합니다.\n\n결과적으로, Lyndon의 가벼운 독립형 컴포넌트는 빠른 로딩 시간과 유연성을 보장합니다. 버튼 컴포넌트를 통해 사용자는 텍스트, 아이콘, 색상 변형, 링크, 사이즈 등을 쉽게 드롭다운 옵션에서 선택하여 사용자 정의할 수 있습니다.\n\n![이미지](/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_5.png)\n\n\n<div class=\"content-ad\"></div>\n\nlbj-button 컴포넌트는 (src/components) 디렉토리 안에 있습니다. 여기에는 프로젝트 전반적인 사용을 위해 기술적인 명명을 보장하기 위해 모든 컴포넌트가 저장되어 있습니다. (우리는 전 대통령 린든 B. 존슨에 경의를 표하기 위해 lbj 접두사를 사용합니다.)\n\n![스크린샷](/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_6.png)\n\nlbj-button 디렉토리에는 모든 관련 코드가 포함되어 있습니다. lbj-button.tsx TypeScript 파일은 Stencil을 사용하여 컴포넌트를 생성하는데, .tsx 확장자는 개발 중에 JSX와 TypeScript를 사용하고 있음을 나타냅니다. 이 구성은 해당 컴포넌트를 HTML에 사용자 정의 태그로 포함시킬 수 있게 하며, Urban의 주요 색상으로 스타일링된 다운로드 아이콘이 있는 버튼을 렌더링합니다. \n\n![스크린샷](/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_7.png)\n\n<div class=\"content-ad\"></div>\n\n# Lyndon의 능력 확장:\n\n.tsx 파일 이외에도, 각 Lyndon 컴포넌트에는 lbj-button.stories.ts와 같은 스토리 파일이 포함되어 있습니다. 이 설정을 통해 팀은 Stencil이 생성한 웹 컴포넌트를 StencilJS와 독립적으로 사용자 인터페이스에서 시각화하고 상호 작용할 수 있습니다. 개발자는 전체 애플리케이션 환경을 로드할 필요가 없어 개발 주기를 빠르게 하고 문제 해결을 쉽게 할 수 있습니다.\n\nStorybook은 단일 컴포넌트에 대해 여러 가지 스토리나 변형을 생성할 수 있도록 하며, 다른 기능 또는 스타일을 나타냅니다. 기존 컴포넌트에 변형을 도입할 때는 기본 컴포넌트를 활용하고 필요에 맞게 수정합니다.\n\n아래 이미지에서, Color Block 컴포넌트는 특정 시나리오에 맞게 디자인된 네 가지 다른 변형과 함께 표시됩니다. 한 가지 변종인 Color Block Minimal은 주로 균일한 배경 색상으로 섹션을 만들기 위해 사용됩니다. 다른 변형인 Featured Text는 페이지나 URL로 연결되는 헤드라인 옵션, 버튼과 같은 상호 작용 요소를 포함하는 다양한 배경 색상을 특징으로 하는 블록 목록을 포함한 더 다이내믹한 사용 사례를 위해 디자인되었습니다.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_8.png)\n\n웹 디자인 및 개발의 기초를 계속해서 개선 중입니다.\n\n라이든을 통해 더 많은 사용자 정의 옵션 및 더 효율적인 개발을 지원함으로써 우리는 Urban Institute에서 웹 디자인 및 개발에 접근하는 방식을 현격히 변화시켰습니다. 이 강력한 디자인 시스템을 구현함으로써, 모든 디지털 플랫폼에서 더욱 일관된 경험을 제공하고 있습니다. 구체적으로 개선된 내용은 다음과 같습니다:\n\n- 효율성 증대: 팀이 새로운 요소를 처음부터 만드는 대신 미리 디자인된 구성 요소를 빠르게 구현할 수 있기 때문에 개발 시간이 단축되었습니다.\n\n<div class=\"content-ad\"></div>\n\n- 향상된 일관성: 모든 디지털 출력물은 통일된 디자인을 따르므로 브랜드 아이덴티티가 플랫폼과 사이트 전반에 걸쳐 일관성을 유지합니다.\n\n- 더 많은 유연성: Lyndon의 적응형 디자인 시스템은 Drupal을 넘어서 다른 웹 애플리케이션까지 확장됩니다.\n\n- 향상된 확장성: 우리의 디지털 요구사항이 증가함에 따라, Lyndon의 유연한 프레임워크로 기존 구조를 방해하지 않고 더 복잡한 기능을 쉽게 확장하고 통합할 수 있습니다.\n\n# Lyndon의 유연성을 보여주는 것:\n\n<div class=\"content-ad\"></div>\n\n이미 실무에서 이러한 혜택들을 확인했습니다. 학생 Upward Mobility Initiative 웹사이트의 경우, 프로젝트의 특정 요구사항과 이해관계자들의 요청으로 인해 Urban의 가이드라인을 준수해야 했습니다. 이 요청을 수용하기 위해, 새로운 글꼴 패밀리를 도입한 Lyndon의 새로운 변형을 발표했습니다. 이를 통해 각 구성 요소의 글꼴을 코딩할 필요 없이 새로운 글꼴 패밀리를 통합할 수 있었습니다. 이 변형은 Lyndon 라이브러리에 추가되어 사용자 정의 구성 요소 태그에서 모드 속성을 정의함으로써 글꼴을 렌더링할 수 있게 했습니다. 아래는 이전과 동일한 버튼 구성 요소이지만, 이제는 학생 Upward Mobility Initiative 사이트에서 필요한 새로운 글꼴 패밀리를 사용합니다. 이 프로젝트와 앞으로의 계획에서 Lyndon의 유연성은 각 프로젝트가 독특한 브랜드 아이덴티티를 유지하면서도 Lyndon의 강력한 인프라를 활용할 수 있도록 합니다.\n\n![이미지](/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_9.png)\n\n\"Lyndon의 구성 요소를 사용하면 디자이너와 사이트 프로듀서들이 상상할 수 있는 거의 모든 페이지 레이아웃을 구상하고 실행할 수 있습니다. 이는 그들의 작업을 더 창의적으로 만드는 뿐만 아니라 효율적으로 만들어줍니다.\"\n- Dave Connell, 디지털 커뮤니케이션 선임 이사\n\n저희는 웹 개발의 떠오르는 트렌드와 기술을 충족하는 Lyndon의 진화를 계속할 것을 약속합니다. 저희의 계획에는 아래와 같은 것들이 포함됩니다:\n\n<div class=\"content-ad\"></div>\n\n- 최신 웹 기술과 사용자 기대에 따라 지속적으로 새로운 구성 요소를 추가하고 업데이트 중입니다.\n\n- 라인든(Lyndon)의 접근성 기능을 향상시켜 디지털 콘텐츠를 더 넓은 관객에게 도달 가능하게 하며 웹 콘텐츠 접근성 지침을 준수하는 기준을 뛰어넘습니다.\n\n# 라인든 앞으로의 발전:\n\n라인든과 함께한 이 여정에서 한 때의 웹 개발 병목 현상을 혁신과 효율을 위한 길로 변모시켰습니다. 디자인 시스템을 한 단계 더 높여 반복적인 디자인 작업의 어려움을 극복함으로써 모든 디지털 산출물을 핵심 미션과 일치시켰습니다. 오늘날, 우리는 강력하고 확장 가능한 기반을 구축하여 미래 웹 기술을 수용하고 웹 접근성 표준을 준수합니다. 사용자 커뮤니티는 이 지속적인 과정에서 중요한 역할을 하며, Urban Institute의 목표를 달성하고 접근 가능한 디지털 연구 플랫폼을 위한 새로운 기준을 설정하는 도구로 라인든을 세밀하게 다듬는 데 도움이 되고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n웹 개발의 미래가 어떻게 발전할지, 그리고 접근성이 그 중에서 어떤 역할을 할지 궁금하시군요? 귀하의 생각을 나누어주셔서 감사합니다. Lyndon의 발전하는 이야기에 함께해 주세요. \n\n— Farnoosh Johnson\n\n더 많은 정보를 알고 싶으신가요? Data@Urban 뉴스레터에 가입하세요.","ogImage":{"url":"/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_0.png"},"coverImage":"/assets/img/2024-06-20-TheEvolutionoftheUrbanInstitutesDesignLibrary_0.png","tag":["Tech"],"readingTime":8},{"title":"부트스트랩을 벗어나는 방법 불마를 위한 빠른 시작 가이드","description":"","date":"2024-06-20 03:15","slug":"2024-06-20-BranchingOutFromBootstrapAQuickstartGuidetoBulma","content":"\n\n마치 중고차 판매원이 되는 것 같지 않지만, CSS 프레임워크에는 다양한 옵션이 있습니다. 무엇이 가장 예쁘고 사용하기 쉬운 프레임워크이며 전체적으로 어떤 보상을 줄 수 있는지에 대해 다양한 의견이 있습니다.\n\nBootstrap에서 편안함을 느끼고 있지만 Bulma 문서를 한 번 보고 무엇인가 궁금하다고 생각한다면, 이 기사를 참고해보세요. Bulma에 대한 간단한 개요를 통해 탐험 여정을 시작할 수 있습니다.\n\n## 열 구조\n\nBulma는 반응형 열 구조를 만들기 위해 Flexbox를 활용합니다. 기본 설정은 12개의 균일한 열이지만 사용자는 이 숫자를 쉽게 조정하거나 개별 열의 크기를 맞출 수 있습니다. 화면 폭의 절반을 차지하도록 단일 열을 만들려면 클래스 is-half를 추가하면 됩니다. 다른 열은 자동으로 나머지 공간을 채우게 됩니다. 이 예에서 동일한 효과를 만드는 다른 방법은 요소에 클래스 is-6를 추가하는 것입니다. 그 요소는 12개의 균일한 열 중 6개(전체 화면 폭의 절반)을 차지하게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Offset](/assets/img/2024-06-20-BranchingOutFromBootstrapAQuickstartGuidetoBulma_0.png)\n\n## Offset\n\n특정 열 요소의 오프셋을 만들려면, 대상 주변의 여백을 자동으로 채울 빈 열을 생성하거나 오프셋 수정자를 사용할 수 있습니다. 다음은 어떻게 보이는지에 대한 예시입니다:\n\n![Offset Example](/assets/img/2024-06-20-BranchingOutFromBootstrapAQuickstartGuidetoBulma_1.png)\n\n\n<div class=\"content-ad\"></div>\n\n## 모바일 반응성\n\n기본적으로 Bulma 컬럼은 모바일 장치에서 쌓이게 됩니다. 그러나 모바일 장치에서 기존의 컬럼 구조가 유지되길 원한다면 간단히 컬럼 컨테이너에 is-mobile 수정자를 추가해주시면 됩니다.\n\n## 브레이크포인트\n\n모든 장치 유형에 대해 컬럼을 사용한다면, 컬럼 요소에 대해 브레이크포인트를 정의할 수 있습니다. 컬럼 크기나 스팬을 조정하는 것과 유사하게 뷰포트 크기(모바일, 태블릿 또는 데스크톱)를 끝에 추가해주시면 됩니다. 예를 들어, 사진에 적용된 컬럼 스팬을 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n\n<div class=\"columns\">   \n  <div id=”popsiclePhoto” class=\"column \n   is-4-desktop is-6-tablet is-8-mobile/>\n\n\n<img src=\"/assets/img/2024-06-20-BranchingOutFromBootstrapAQuickstartGuidetoBulma_2.png\" />\n\n<img src=\"/assets/img/2024-06-20-BranchingOutFromBootstrapAQuickstartGuidetoBulma_3.png\" />\n\n<img src=\"/assets/img/2024-06-20-BranchingOutFromBootstrapAQuickstartGuidetoBulma_4.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n## 컬럼 갭\n\nBulma에서는 갭을 컬럼 갭이라고 합니다. Bulma 컬럼 갭의 기본 값은 0.75rem이지만 is-gapless를 사용하여 제거하거나 is-0부터 is-8 중 하나를 사용하여 사용자 정의 할 수 있습니다. 기본값은 is-3입니다.\n\n## 기타 스타일링 도구\n\n한 컬럼 컨테이너 안에 여러 줄의 컬럼을 저장하려면 columns 클래스 내에서 is-multiline 수정자를 사용할 수 있습니다. 높이가 다른 컬럼을 수직으로 정렬하려면 columns 컨테이너에 is-vcentered를 추가하십시오. Offset 섹션에서 다룬 방법을 사용하지 않고 컬럼을 수평으로 쉽게 가운데로 정렬하려면 부모 컬럼 요소에 is-centered를 추가하십시오.\n\n<div class=\"content-ad\"></div>\n\n## 추가 문서\n\n이 글이 Bulma의 구조 기초를 이해하는 데 도움이 되셨으면 좋겠습니다. 더 자세한 정보는 Bulma 웹사이트(https://bulma.io/)를 참조하시기 바랍니다.\n\n행운을 빕니다! 코딩 즐기세요!","ogImage":{"url":"/assets/img/2024-06-20-BranchingOutFromBootstrapAQuickstartGuidetoBulma_0.png"},"coverImage":"/assets/img/2024-06-20-BranchingOutFromBootstrapAQuickstartGuidetoBulma_0.png","tag":["Tech"],"readingTime":3}],"page":"41","totalPageCount":154,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":2},"__N_SSG":true}