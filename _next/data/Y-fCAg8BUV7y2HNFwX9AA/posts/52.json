{"pageProps":{"posts":[{"title":"앵귤러에서의 데이터 가져오기 패턴","description":"","date":"2024-06-20 00:10","slug":"2024-06-20-DatafetchingpatternsinAngular","content":"\n\n쥬타오 취(邱俊涛)는 최근 마틴 파울러의 웹사이트에 싱글 페이지 애플리케이션에서의 데이터 패칭 패턴에 관한 기사를 게시했어요. 꼭 읽어보길 추천하는데, 모든 예시는 React나 순수 JavaScript를 사용해요. 이어서 나오는 내용에서는 모든 설명된 패턴들을 Angular 애플리케이션에 적용하는 방법을 볼 거에요. Angular와 React 간의 알려진 차이 때문에 결과가 많이 다르게 나타나요.\n\n# 라이브러리와 프레임워크\n\nReact는 라이브러리로서 자신을 소개하지만, Angular는 웹 프레임워크로 간주될 수 있어요. 싱글 페이지 애플리케이션을 구축하는 데 필요한 모든 것을 포함하고 있으며 라우팅 및 데이터 패칭을 위한 도구가 함께 제공돼요. Angular는 이러한 도구들을 사용하도록 강요하지 않지만, 물론 사용할 수 있어야 해요. 이 모든 것에는 장단점이 있지만, 이는 또 다른 이야기에요. 결국, 두 접근 방식은 높은 품질의 코드를 생성하고 실행 가능한 웹 애플리케이션을 만들 수 있게 도와줘요.\n\n# 조금 다른 프로필 컴포넌트\n\n<div class=\"content-ad\"></div>\n\n여기 설명된 소스 코드는 Angular 애플리케이션에 내장되어 있으며 Codeberg에서 사용할 수 있습니다.\n\nJuntao Qiu는 프로필 구성 요소를 구현하는데, 사용자의 ID를 매개변수로 받습니다. 초기 렌더링 후에 그리고 이 ID가 변경될 때마다, 구성 요소는 해당 사용자의 프로필 데이터를 서버에서 가져옵니다. 그런 다음, 받은 정보를 UserBrief라는 다른 구성 요소를 사용하여 표시합니다. 나중에, 이 구성 요소는 Friends 구성 요소를 사용하여 사용자의 친구 목록을 표시합니다.\n\n서버가 없기 때문에, 여기서 설명된 구현은 사용자, 그들의 게시물 및 사진 앨범을 모델로 만듭니다. 이 모든 것은 공개적으로 사용 가능한 JSONPlaceholder API의 일부입니다.\n\nAngular의 HTTP 클라이언트의 주요 차이점 중 하나는 다른 구현과 비교했을 때 각 메서드가 RxJS Observable을 반환한다는 것입니다. RxJS는 반응형 프로그래밍을 위한 라이브러리로, Node.js와 TypeScript와 함께 Angular의 주요 종속성입니다. 이렇게 함으로써, Angular은 네트워크 요청을 만들 때 반응형 프로그래밍을 권장하지만 강제하지는 않는다.\n\n<div class=\"content-ad\"></div>\n\n물론, 다른 HTTP 클라이언트를 사용할 수도 있습니다. 또는 Observables를 Promises로 변환하고 Juntao Qiu의 구현을 약간 수정할 수도 있습니다. 그러나 두 경우 모두 몇 가지 이점을 잃게 될 것입니다. 예를 들어 Angular의 HTTP 클라이언트를 사용하면 쉽게 인터셉터를 사용할 수 있습니다. 또한 Observables은 취소할 수 있어서 소홀히 여길 수 없는 장점입니다. 애플리케이션의 다른 페이지로 빠르게 이동하는 사용자를 상상해보세요. Promises는 트리거하는 구성 요소가 이미 파괴되었더라도 네트워크 요청을 계속하므로 무언가를 반환할 때까지 지속됩니다.\n\n여기서 설명된 Angular의 데이터 가져오기 패턴 구현은 Angular의 내장 기능을 사용하여 반응형 프로그래밍 접근 방식을 따릅니다.¹\n\n# 비동기 상태 핸들러\n\n이 패턴의 일반적인 아이디어를 이해하려면 Juntao Qiu의 비동기 상태 핸들러 섹션을 읽어보세요.\n\n<div class=\"content-ad\"></div>\n\n비동기 상태 핸들러의 아이디어는 비동기 작업을 명시적인 로딩 및 오류 상태와 결합하는 것입니다. 비동기 작업이 진행 중인 경우 상태는 로딩입니다. 작업은 오류 상태로 또는 작업의 실제 결과와 함께 끝납니다. 일반적인 작업 결과 T를考える 때, 비동기 상태 핸들러는 T 또는 `로딩` 또는 `오류`를 반환하는 함수입니다. 유니언 타입을 사용하면 결과가 항상 정확히 하나의 상태임을 강조합니다. 로딩 및 오류 상태를 나타내는 문자열 리터럴 타입을 사용하면 간단하지만 설명적입니다. 필요한 경우 다른 타입으로 대체할 수도 있습니다.\n\n패턴의 선택적 확장은 재시도 기능입니다. 따라서 비동기 상태 핸들러는 비동기 작업을 다시 반복적으로 실행할 수 있는 기능을 제공해야 합니다.\n\n## Angular에서 비동기 상태 핸들러 구현하기\n\n우리는 커스텀 RxJS 오퍼레이터로 Angular에서 비동기 상태 핸들러를 구현할 수 있습니다. 간단한 용어로, 오퍼레이터는 observable 형태의 임의의 비동기 작업을 입력 매개변수로 받습니다. 구독할 때 즉시 로딩 상태를 발행합니다. 비동기 작업이 완료되면 결과를 반환합니다. 무언가 잘못되면 오류 상태를 반환합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction toAsynchronousStateHandler<T, R>(\n  projection: (value: T) => Observable<R>,\n) {\n  return switchMap((value: T) =>\n    projection(value).pipe(\n      startWith('loading' as const),\n      catchError(() => of('error' as const)),\n    ),\n  );\n}\n```\n\n프로필 컴포넌트에서는 사용자 ID를 포함하는 라우트가 변경될 때마다 해당 연산자를 사용합니다.\n\n```js\nprivate readonly httpClient = inject(HttpClient);\nprivate readonly activatedRoute = inject(ActivatedRoute);\n\nprotected readonly user$: Observable<UserResponse | 'loading' | 'error'> =\n  this.activatedRoute.params.pipe(\n    toAsynchronousStateHandler((params) =>\n      this.httpClient.get<UserResponse>(\n        `https://jsonplaceholder.typicode.com/users/${params['id']}`,\n      ),\n    ),\n  );\n```\n\n컴포넌트의 마크업에서는 Asynchronous State Handler의 현재 유형을 결정하기 위해 협소화(narrowing)를 사용할 수 있습니다. 이는 순수 TypeScript와 거의 유사합니다. 사용자 Observable에 구독하여 초기 가져오기를 초기화하고, 구독 취소로도 중지할 수 있습니다. Angular의 비동기 파이프(async pipe) 덕분에 사용자 Observable을 수동으로 구독하고 취소할 필요가 없습니다. 컴포넌트가 렌더링된 후 자동으로 구독하며, 컴포넌트가 파괴될 때 HTTP 요청을 취소할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n@if (user$ | async; as user) {\n  @if (user === \"loading\") {\n    Loading...\n  } @else if (user === \"error\") {\n    Error...\n  } @else {\n    <app-user-brief [user]=\"user\" />\n  }\n}\n```\n\n현재 구현은 데이터를 다시 가져오는 가능성만 부족합니다. 반응형 프로그래밍에서는 물론 observable을 사용하여 이를 수행합니다. 기존 observable에 추가로 void 유형의 추가적이지만 선택적인 observable을 결합할 수 있습니다. 이 observable은 데이터를 포함하지 않고 작업을 트리거합니다.\n재사용 가능한 연산자에서 모든 것을 처리하기 위해 이제 함수를 반환합니다. 이렇게 하면 소스 observable에 액세스할 수 있고 트리거 observable과 결합할 수 있습니다. 이 트리거 observable은 언제든 무언가를 발행해서는 안되므로 시작 값으로 확장해야 합니다.\n결합된 observable 중 하나라도 무언가를 발행하면, 진행 중인 비동기 작업이 전부 취소되어 다시 시작되기 전에 취소됩니다.\n\n```js\nexport function toAsynchronousStateHandler<T, R>(\n  projection: (value: T) => Observable<R>,\n  reloadTrigger = new Observable<void>(),\n) {\n  return function (source: Observable<T>) {\n    return combineLatest([\n     source, \n     reloadTrigger.pipe(startWith(void 0))\n ]).pipe(\n      switchMap(([value, _]) =>\n        projection(value).pipe(\n          startWith('loading' as const),\n          catchError(() => of('error' as const)),\n        ),\n      ),\n    );\n  };\n}\n```\n\n프로필 구성요소에서는 값을 발행할 수 있는 표준 Subject를 사용하고 있습니다. 이를 연산자에 전달하고 해당 Subject의 next() 함수를 사용하여 다시 가져오기를 트리거할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```javascript\nprivate readonly refetchTrigger$$ = new Subject<void>();\n\nprotected readonly user$: Observable<UserResponse | 'loading' | 'error'> =\n  this.activatedRoute.params.pipe(\n    toAsynchronousStateHandler(\n      (params) =>\n        this.httpClient.get<UserResponse>(\n          `https://jsonplaceholder.typicode.com/users/${params['id']}`,\n        ),\n      this.refetchTrigger$$.asObservable(),\n    ),\n  );\n\nprotected onRefetch() {\n  this.refetchTrigger$$.next();\n}\n```\n\n# 병렬 데이터 가져오기\n\n쥬닷오 치우의 병렬 데이터 가져오기 섹션을 읽어보시면 이 패턴의 일반적인 아이디어를 이해할 수 있습니다.\n\n이름 그대로, 병렬 데이터 가져오기 패턴은 데이터를 병렬로 가져오는 것을 다룹니다. 이를 통해 요청 폭포를 줄일 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n## Angular에서 병렬 데이터 가져오기 구현\n\nAngular 및 따라서 RxJS를 사용하면 여러 내장 Join Creation Operators를 사용할 수 있습니다. 이러한 연산자를 사용하면 여러 개의 observables로부터 발행된 값을 결합할 수 있습니다. Promise.all에 가장 가까운 것은 forkJoin 연산자입니다. 이 연산자는 배열 또는 observables 사전을 입력 매개변수로 사용하고 각각 배열 또는 값 사전을 발행합니다.\n\n비동기 상태 핸들러 연산자는 모든 observable에 대해 작동하기 때문에 프로필 컴포넌트를 간단한 사용자 정보뿐만 아니라 사용자의 게시물도 가져오도록 쉽게 확장할 수 있습니다.\n\n```js\nprotected readonly dataRequest$ = this.activatedRoute.params.pipe(\n  toAsynchronousStateHandler(\n    (params) =>\n      forkJoin({\n        user: this.httpClient.get<UserResponse>(\n          `https://jsonplaceholder.typicode.com/users/${params['id']}`,\n        ),\n        posts: this.httpClient.get<PostResponse[]>(\n          `https://jsonplaceholder.typicode.com/users/${params['id']}/posts`,\n        ),\n      }),\n    this.refetchTrigger$$.asObservable(),\n  ),\n);\n```\n\n<div class=\"content-ad\"></div>\n\n마크업에서는 여전히 우리의 비동기 데이터 요청의 현재 유형(또는 상태)을 결정하기 위해 narrowing을 사용합니다. 로딩 중이거나 오류 상태가 아닌 경우에는 forkJoin 연산자에 전달한 구조에 안전하게 접근할 수 있습니다.\n\n```js\n@if (dataRequest$ | async; as dataRequest) {\n  @if (dataRequest === \"loading\") {\n    Loading...\n  } @else if (dataRequest === \"error\") {\n    Error...\n  } @else {\n    <app-user-brief [user]=\"dataRequest.user\" />\n    <app-posts [posts]=\"dataRequest.posts\" />\n  }\n}\n```\n\n# 대체 마크업\n\n이 패턴의 일반 아이디어를 이해하려면 전투 마크업에 대한 Juntao Qiu의 섹션을 읽어주세요.\n\n<div class=\"content-ad\"></div>\n\nFallback Markup 패턴의 아이디어는 로딩 또는 에러와 같은 비동기 작업의 다양한 상태를 처리하는 데 필요한 보일러플레이트 코드를 줄이는 데 있습니다.\n\n## Angular에서 Fallback Markup 구현\n\n프로필 컴포넌트의 마크업을 되짚어 봅시다. 우리는 비동기 작업의 상태를 모델링하기 위해 연합 유형을 사용하여 현실에 가깝게 표현했습니다(한 번에 하나의 상태). Angular의 제어 흐름과 유형 축소를 사용하여 비동기 작업의 현재 유형 또는 상태에 따라 조건부로 콘텐츠를 렌더링할 수 있습니다. 상태의 유형을 비호환적인 방법으로 변경하면 TypeScript 에러가 발생합니다.\n\n```js\n@if (dataRequest$ | async; as dataRequest) {\n  @if (dataRequest === \"loading\") {\n    Loading...\n  } @else if (dataRequest === \"error\") {\n    Error...\n  } @else {\n    <app-user-brief [user]=\"dataRequest.user\" />\n    <app-posts [posts]=\"dataRequest.posts\" />\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이제 React의 Suspense 컴포넌트와 유사한 방식을 적용할 수 있습니다. 그러나 타입을 좁게 하는 것을 잃을 가능성이 높습니다. 아니면 더 나쁜 경우에는 어떤 타입 안전성도 잃을 수 있습니다. Angular 템플릿을 다룰 때 이러한 일이 종종 발생합니다. 물론 로딩 및 오류 상태를 처리하는 전용 컴포넌트를 만들 수 있습니다. 또는 모든 네트워크 요청의 로딩 및 오류 상태를 처리하는 인터셉터를 사용할 수도 있습니다.\n\n그러나 Angular의 제어 흐름을 통해 이미 견고하고 가독성 좋은 내장 솔루션을 얻을 수 있습니다. 나머지는 각 어플리케이션 및 오류 처리 및 로딩 상태에 대한 일반적인 전략에 의존합니다. 예를 들어, 많은 표현 컴포넌트와 모든 비동기 작업을 처리하는 몇 개의 컨테이너 컴포넌트만 있는 접근 방식은 설계적으로 이 패턴에 대한 사용 사례를 줄일 수 있습니다.\n\n# 코드 분할\n\nJuntao Qiu의 코드 분할 섹션을 읽어 이 패턴의 일반 아이디어를 이해해보세요.\n\n<div class=\"content-ad\"></div>\n\n## Angular에서 라우터를 사용하여 코드 분할 구현하기\n\nAngular의 내장 라우터를 사용하면 브라우저의 동적 `import` 표현식을 활용하여 모듈을 필요한 경우에만 Lazy로드할 수 있습니다. 여기서 모듈이란 Angular 모듈(NgModule), 독립적인 컴포넌트 또는 다른 라우터 구성을 의미합니다.\n\n프로필 컴포넌트를 제공하고 다른 라우트에서 사진 앨범을 표시하는 애플리케이션의 간략한 라우터 구성은 다음과 같이 보일 수 있습니다.\n\n```js\nimport { Routes } from '@angular/router';\n\nexport const routes: Routes = [\n  {\n    path: 'profile',\n    loadComponent: () =>\n      import('./profile/profile.component').then(\n        (module) => module.ProfileComponent,\n      )\n  },\n  {\n    path: 'albums',\n    loadComponent: () =>\n      import('./albums/albums.component').then(\n        (module) => module.AlbumsComponent,\n      )\n  }\n];\n```\n\n<div class=\"content-ad\"></div>\n\n위의 표는 Markdown 형식으로 변경하였습니다.\n\n\n| Lazy chunk files  | Names            | Raw size  |\n| ----------------- | ----------------- | --------- |\n| chunk-OQXIE7JX.js | profile-component | 6.70 kB   | \n| chunk-FX2UNWRV.js | albums-component  | 4.96 kB   | \n| chunk-REKZS4LG.js | -                 | 500 bytes |\n\n\n기본적으로 Angular 라우터가 청크의 지연 로드를 수행할 때 특별한 표시가 없습니다. 사용자 경험을 향상시키기 위해 어플리케이션의 루트 수준에 일부 로딩 표시기를 표시하는 것이 유용할 수 있습니다. Angular 라우터는 지연 로드가 시작되거나 끝날 때 두 가지 특정 이벤트를 제공합니다.\n\n```typescript\nexport class AppComponent {\n  private readonly router = inject(Router);\n\n  protected readonly isRouterLazyLoading$ = this.router.events.pipe(\n    filter(\n      (event) =>\n        event instanceof RouteConfigLoadStart ||\n        event instanceof RouteConfigLoadEnd,\n    ),\n    map((event) => {\n      if (event instanceof RouteConfigLoadStart) {\n        return true;\n      }\n      return false;\n    }),\n    startWith(false),\n  );\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## Angular에서 Deferrable Views로 코드 분할 구현하기\n\nAngular의 최근에 도입된 Deferrable Views를 사용하면 컴포넌트 템플릿 내에서 컴포넌트를 지연로드할 수 있습니다. 이러한 Deferrable Views는 React의 Suspense 컴포넌트와 lazy 컴포넌트로드를 결합한 것과 유사하지만 추가 기능의 수에서 다릅니다.\n\n우리의 프로필 컴포넌트에서 사용자의 모든 게시물을 즉시 표시하고 싶지 않다고 가정해 보겠습니다. 대신에 사용자는 게시물을 표시하기 위해 전용 버튼을 클릭해야 합니다. 이를 위해 게시물을 표시하는 컴포넌트를 Deferrable View에 넣고 버튼을 플레이스홀더로 표시할 수 있습니다. Deferrable View에 상호작용 시로드하도록 지시하여 버튼을 클릭하면 실제 내용이 로드됩니다. 비동기 상태 핸들러와 유사하게 로딩 및 오류 상태를 위한 특별한 템플릿도 전달할 수 있습니다.\n\n```js\n@defer (on interaction) {\n  <app-posts [posts]=\"dataRequest.posts\" />\n} @placeholder {\n  <button>Show Posts</button>\n} @loading {\n  Loading posts...\n} @error {\n  Error...\n}\n```\n\n<div class=\"content-ad\"></div>\n\n현재 Angular가 하는 일은 Deferrable View의 내용을 별도의 청크로 분리하는 것입니다. 이 작업을 수행하려면 내용이 다른 곳에서 직접 참조되지 않아야 합니다. 빌드 결과에서 추가적인 청크를 확인할 수 있습니다.\n\n```js\n최적화 청크 파일    | 이름               |  원본 크기\nchunk-OQXIE7JX.js   | 프로필 컴포넌트    |   6.70 kB | \nchunk-FX2UNWRV.js   | 앨범 컴포넌트     |   4.96 kB | \nchunk-4UTUEDCN.js   | 게시물 컴포넌트  |   2.02 kB |\nchunk-REKZS4LG.js   | -                  | 500 bytes |\r\n```\n\n브라우저의 개발자 도구 네트워크 패널에서 버튼을 처음 클릭할 때 새로운 청크가 로드되는 것을 확인할 수 있습니다.\n\n## 이미지 최적화와 함께 Angular에서 코드 분할 구현하기\n\n<div class=\"content-ad\"></div>\n\n만약 이미지를 청크로 간주하고 코드 분할이 \"필요할 때 로드되는 청크\"를 다루는 것이라면, 이미지도 다른 청크와 마찬가지로 처리하는 것이 좋을 수 있습니다. 뷰포트에 보이지 않는 이미지도 많이 담고 있는 수십 개의 이미지를 표시하는 컴포넌트를 상상해보세요. 브라우저에 따라 `img` 요소는 한 번에 모든 이미지를 로드하게 할 것입니다. 심지어 이미지 로딩이 시작되면 웹사이트를 닫아야만 취소할 수 있습니다. 사용자가 단일 페이지 애플리케이션 내에서 다른 경로로 이동할 때도 모든 이미지의 다운로드가 완료될 때까지 계속될 것입니다.\n\n샘플 애플리케이션의 앨범 컴포넌트는 사용자의 모든 사진 앨범을 표시할 것이며 각 사진의 썸네일을 모두 표시합니다.\n\n```js\n@for (album of albums; track album.id) {\n  @for (photo of album.photos; track photo.thumbnailUrl) {\n    <img [src]=\"photo.thumbnailUrl\" />\n  }\n}\n```\n\n이러한 단순한 방법론은 위에서 언급한 모든 문제점을 함께 가져올 수 있습니다. Angular에 통합된 이미지 최적화는 뷰포트와 가깝지 않은 이미지를 지연로드하는 크로스 브라우저 솔루션입니다. 이미지의 여러 가지 최적화 기법을 적용하는 것 외에도 플레이스홀더도 지원합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n@for (album of albums; track album.id) {\n  @for (photo of album.photos; track photo.thumbnailUrl; let index = $index) {\n    <img\n      [ngSrc]=\"photo.thumbnailUrl\"\n      width=\"150\"\n      height=\"150\"\n      [priority]=\"index < 10 // 👈 처음 10개 이미지를 우선 순위로 지정\"\n      [placeholder]=\"placeholderImage\"\n    />\n  }\n}\n```\n\n브라우저의 개발자 도구 네트워크 패널에서 페이지를 스크롤할 때마다 어떻게 더 많은 이미지가 로드되는지 추적할 수 있습니다. 이것을 취소할 수 없는 방식으로 수백 개의 이미지가 로드되는 경향과 비교해보세요.\n\n# 사전로드\n\nJuntao Qiu의 사전로드 섹션을 읽어 이 패턴의 일반적인 아이디어를 이해해보세요.\n\n\n<div class=\"content-ad\"></div>\n\n## Angular에서 Deferrable Views로 선입(preload) 구현하기\n\nAngular의 Deferrable Views는 사용자 지정 조건이나 미리 정의된 트리거에 기초하여 지연된 뷰를 선입(preload)하는 기능을 지원합니다. 예를 들어, 브라우저가 유휴 상태일 때나 사용자가 플레이스홀더 위에 호버할 때 콘텐츠를 선입(preload)할 수 있습니다.\n\n```js\n@defer (on interaction; prefetch on hover) {\n  <app-posts [posts]=\"dataRequest.posts\" />\n} @placeholder {\n  <button>Show Posts</button>\n} @loading {\n  Loading posts...\n} @error {\n  Error...\n}\n```\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n어떤 도구를 선택하든, Juntao Qiu가 설명한 패턴들은 웹 애플리케이션을 개발할 때 항상 염두에 둬야 할 가치가 있습니다. Angular는 최근 도입된 기능들을 포함한 여러 내장 기능을 제공하며, 이 패턴들을 간단하고 표준화된 방식으로 적용하는 데 도움이 됩니다.\n\n2024년 6월 6일에 https://lukket.me에서 원본이 게시되었습니다.\n\n- 여기에 설명된 구현의 반응성은 읽기 전용 속성의 배타적 사용에 의해 지원됩니다.\n- 어떤 유형 안전성에 대해 이야기하고 있다는 것은 일부러 한 말장난입니다.\n- Angular 템플릿의 컨텍스트는 Angular 16 버전 이전에 미타입화된 객체였으며, 현재는 기본값으로 unknown이 지정된 일반적인 유형입니다. 마크업에서 일반 유형을 활용하는 방법에 대한 문서는 명확하지 않습니다.\n- Angular의 Deferrable Views는 플레이스홀더와 에러 케이스를 위한 전용 템플릿을 지원합니다. Deferrable View의 로드는 다양한 방법으로 트리거할 수 있으며, 사전로드도 내장 기능으로 제공됩니다. 그러나 Deferrable View는 컴포넌트의 패치 요청(XHR)을 가로채지 않지만 React의 Suspense 컴포넌트는 그렇습니다.\n- Firefox는 `img` 요소의 fetchPriority 속성을 아직 지원하지 않습니다.","ogImage":{"url":"/assets/img/2024-06-20-DatafetchingpatternsinAngular_0.png"},"coverImage":"/assets/img/2024-06-20-DatafetchingpatternsinAngular_0.png","tag":["Tech"],"readingTime":13},{"title":"NestJS, TCP 및 Typescript로 Microservices 구축하기","description":"","date":"2024-06-20 00:09","slug":"2024-06-20-BuildingMicroserviceswithNestJSTCPandTypescript","content":"\n\n## 마이크로서비스가 서로 상호 작용하는 방법\n\n![이미지](/assets/img/2024-06-20-BuildingMicroserviceswithNestJSTCPandTypescript_0.png)\n\n프로젝트가 점점 커지면서 더욱 고급 아키텍처가 필요해집니다. 그래서 소프트웨어 엔지니어로서, 현대적이고 인기 있는 마이크로서비스 아키텍처를 소개하고자 합니다. 이 아키텍처는 SOA (Service Oriented Architecture) 개념을 따릅니다.\n\n이 글에서는 단일체와 마이크로서비스 아키텍처의 차이를 이야기하고, NestJS, TCP 및 Typescript를 사용하여 이를 구축하는 방법을 보여드리려고 합니다. 먼저 마이크로서비스가 무엇인지 살펴보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n# 미크로서비스란 무엇인가\n\n미크로서비스는 소프트웨어 개발의 아키텍처적 관점으로, 소프트웨어가 작고 독립적인 서비스로 구성되어 서로 정의된 API를 통해 통신하는 방식입니다. 각 서비스는 특정 작업이나 비즈니스 목표를 지원하며 다른 모듈 및 서비스와 통신하기 위해 API를 사용합니다. 이를 통해 애플리케이션을 확장하고 더 빠르게 개발할 수 있어 혁신을 가능하게 하며 새로운 기능을 시장에 빠르게 내놓을 수 있게 됩니다.\n\n모놀리식 아키텍처와 미크로서비스 아키텍처의 주요 차이는 무엇인가요? 모놀리식 아키텍처에서는 모든 기능과 서비스가 결합돼 단일 단위로 작동합니다. 그러나 미크로서비스에서는 기반 로직을 서로 다른 작업이나 서비스로 분해하여 개별적으로 개발하고, 배포하며 API를 통해 노출하는 것이 특징입니다.\n\n더 나은 이해를 위해 저희는 함께 NestJS에서 미크로서비스 프로젝트를 개발할 예정입니다.\n\n<div class=\"content-ad\"></div>\n\n# 프로젝트 설정하기\n\n시작하기 전에, 저희 프로젝트의 두 가지 주요 측면을 강조하고 싶습니다:\n\n- auth-microservice: 사용자 권한을 관리하는 인증 서비스\n- API Gateway: 클라이언트와 마이크로서비스 사이에 위치하며 HTTP API 엔드포인트로부터 이벤트를 발생시키는 서비스\n\n간략히 설명하면, 사용자가 자격 증명으로 /api/login 엔드포인트를 통해 로그인하면 API 게이트웨이에 연결됩니다. API 게이트웨이는 그런 다음 요청-응답 스타일의 메시지 패턴을 사용하여 인증 마이크로서비스와 메시지를 주고받습니다. 이러한 방식으로 저희 앱이 작동할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n여러 서비스를 구축할 예정이므로 여러 앱과 라이브러리가 포함된 단일 버전 관리 코드 저장소인 모노레포 프로젝트를 가지는 것이 좋습니다. 따라서 모노-저장소에서 웹 앱 및 서비스를 빌드하고 확장할 수 있는 Nx 도구를 사용할 것입니다.\n\n우선 다음 명령어로 모노레포 프로젝트를 만들어 봅시다:\n\n```js\nnpx create-nx-workspace nestjs-microservices --preset=nest\n```\n\n앱 이름을 api-gateway로 지정해주세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-BuildingMicroserviceswithNestJSTCPandTypescript_1.png\" />\n\n이제 다음 명령을 실행하여 프로젝트 종속성을 설치해봅시다:\n\n```js\ncd nestjs-microservices\nnpm i @nestjs/microservices class-validator class-transformer\n```\n\n# Auth 모듈 추가하기\n\n<div class=\"content-ad\"></div>\n\n우리 프로젝트가 생성되었으므로, nx는 이미 API Gateway 서비스 애플리케이션을 생성해 주었습니다. 이제 API Gateway 앱에서 인증 모듈을 만들어서 인증 관련 요청을 처리할 것입니다.\n\n사용자가 앱에 요청을 보내면 API Gateway가 요청을 받아서 마이크로서비스로 전송합니다. 그래서 동일한 데이터 유형을 사용하기 때문에 중복되는 코드를 피하기 위해 모놀리포 내에서 공유 라이브러리를 만들겠습니다. 아래 명령어를 사용해 코드를 여기저기 중복 생성하지 않고 공유 라이브러리를 만드는 것이 좋습니다:\n\n```js\nnx g @nx/nest:lib shared\n```\n\n이제 dto 폴더를 만들어서 create-user.dto.ts 파일을 추가해 주세요:\n\n<div class=\"content-ad\"></div>\n\n```ts\n// shared/src/lib/dto/create-user.dto.ts\n\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsNotEmpty()\n  password: string;\n}\n```\n\n또한 tsconfig.base.json에 경로 항목을 추가하고 절대 경로로 가져올 수 있습니다:\n\n```json\n{\n  ...\n  \"compilerOptions\": {\n    ...\n    \"paths\": {\n      \"@nestjs-microservices/shared\": [\"shared/src/index.ts\"]\n    }\n  },\n  ...\n}\n```\n\nNestJS는 기본 TCP 전송 계층을 사용하여 서로 다른 마이크로서비스 인스턴스 간에 메시지를 전달합니다. NestJS는 microservice 전송자를 설명하는 객체 배열을 인자로받는 static register() 메서드를 노출하는 ClientsModule을 제공합니다. 다음 코드 라인을 사용하여 auth.service.ts를 추가하고 AUTH_MICROSERVICE를 등록해 보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// apps/api-gateway/src/auth/auth.module.ts\n\nimport { Module } from '@nestjs/common';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\n\n@Module({\n  imports: [\n    ClientsModule.register([\n      {\n        name: 'AUTH_MICROSERVICE',\n        transport: Transport.TCP,\n        options: {\n          host: 'localhost',\n          port: 3001,\n        },\n      },\n    ]),\n  ],\n  providers: [AuthService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n```\n\n위 코드에서 각 transporter는 name 속성, 선택적인 transport 속성 (기본값은 Transport.TCP), 그리고 선택적인 transporter에 특화된 options 속성을 가지고 있습니다.\n\n모듈을 import한 후에는 @Inject() 데코레이터를 사용하여 auth.service.ts 파일에서 AUTH_MICROSERVICE transporter 매개변수를 사용하여 구성된 ClientProxy 인스턴스를 주입할 수 있습니다. 아래와 같이 사용합니다:\n\n```js\n// apps/api-gateway/src/auth/auth.service.ts\n\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\n\nimport { CreateUserDto, User } from '@nestjs-microservices/shared';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject('AUTH_MICROSERVICE') private readonly authClient: ClientProxy\n  ) {}\n\n  getUser(createUserDto: CreateUserDto) {\n    return this.authClient.send<User, CreateUserDto>('get_user', createUserDto);\n  }\n\n  createUser(createUserDto: CreateUserDto) {\n    return this.authClient.send<User, CreateUserDto>('create_user', createUserDto);\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n위에서 보듯이, get_user 또는 create_user 패턴을 사용하여 인증 마이크로서비스에 메시지를 보낼 수 있습니다. 사용자가 로그인하거나 등록할 때 이를 사용할 것입니다.\n\nsend 메서드는 마이크로서비스를 호출하고 응답으로 Observable을 반환하도록 설계되었습니다. 이는 두 가지 인수를 사용합니다:\n\n- pattern — @MessagePattern() 데코레이터에서 정의된 것 중 하나\n- payload — 마이크로서비스에 전달하려는 메시지\n\n마지막으로, login 및 signup을 위한 두 API 엔드포인트를 갖는 AuthController 클래스를 만들 것입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// apps/api-gateway/src/auth/auth.controller.ts\n\nimport { Body, Controller, Post, BadRequestException } from '@nestjs/common';\nimport { lastValueFrom } from 'rxjs';\n\nimport { CreateUserDto, User } from '@nestjs-microservices/shared';\n\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() createUserDto: CreateUserDto) {\n    const user: User = await lastValueFrom(this.authService.getUser(createUserDto), {\n      defaultValue: undefined,\n    });\n    if (!user) {\n      throw new BadRequestException('Invalid credentials');\n    }\n\n    const isMatch = user.password === createUserDto.password;\n    if (!isMatch) {\n      throw new BadRequestException('Incorrect password');\n    }\n\n    console.log(`User ${user.username} successfully logged in.`);\n\n    return user;\n  }\n\n  @Post('signup')\n  async signup(@Body() createUserDto: CreateUserDto) {\n    const user: User = await lastValueFrom(this.authService.getUser(createUserDto), {\n      defaultValue: undefined,\n    });\n    if (user) {\n      throw new BadRequestException(\n        `Username ${createUserDto.username} already exists!`\n      );\n    }\n\n    return this.authService.createUser(createUserDto);\n  }\n}\n```\n\n앞서 언급했듯이, getUser 및 createUser 인증 클라이언트 메서드는 Obserable을 반환하므로 메시지가 전송되기 전에 명시적으로 구독해야 합니다. 그러나 rxjs에서 가져온 lastValueFrom 메서드를 사용하여 Observable을 Promise로 변환할 수 있습니다.\n\n# 인증 마이크로서비스 생성\n\n이제 다음 명령을 실행하여 첫 번째 인증 마이크로서비스를 생성할 것입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nnx g @nx/nest:app auth-microservice\n```\n\n안녕하세요! auth-microservice 앱의 main.ts 파일 내 bootstrap() 함수 보일러플레이트 코드를 NestFactory.createMicroservice() 메소드로 업데이트해보겠습니다:\n\n```js\n// apps/auth-microservice/src/main.ts\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { Transport, MicroserviceOptions } from '@nestjs/microservices';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.createMicroservice<MicroserviceOptions>(\n    AppModule,\n    {\n      transport: Transport.TCP,\n      options: {\n        host: 'localhost',\n        port: 3001,\n      },\n    }\n  );\n\n  await app.listen();\n\n  Logger.log('🚀 Auth microservice is listening');\n}\n\nbootstrap();\n```\n\nNestFactory 클래스의 createMicroservice() 메소드를 사용하여 마이크로서비스의 인스턴스를 생성할 수 있습니다. 아주 간단하죠! 만약 궁금한 점이 있거나 도움이 필요하시다면 언제든지 물어주세요! 😊✨\n\n\n<div class=\"content-ad\"></div>\n\n그러면 사용자 엔티티를 공유 라이브러리에서 생성하여 UsersRepository 클래스에서 사용할 겁니다. 이를 통해 사용자 데이터를 저장하고 사용자를 검색하는 작업을 수행할 수 있습니다.\n\n```js\n// shared/src/lib/entities/user.entity.ts\n\nexport class User {\n  id?: number;\n  username: string;\n  password: string;\n}\n```\n\n우리는 어떤 데이터베이스도 사용하지 않으며 간결함을 위해 이 데모에서는 데이터를 메모리에 저장할 겁니다. UserRepository 클래스를 포함한 간단한 user.repository.ts 파일을 만들어보죠.\n\n```js\n// apps/auth-microservice/src/app/user.repository.ts\n\nimport { Injectable } from '@nestjs/common';\n\nimport { CreateUserDto, User } from '@nestjs-microservices/shared';\n\n@Injectable()\nexport class UserRepository {\n  private users: User[] = [];\n\n  save(user: CreateUserDto): User {\n    const newUser = new User();\n    newUser.id = this.users.length + 1;\n    newUser.username = user.username;\n    newUser.password = user.password;\n    this.users.push(newUser);\n    return newUser;\n  }\n\n  findOne(username: string): User | undefined {\n    return this.users.find((user) => user.username === username);\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이제 createUser() 및 getUser()를 app.service.ts에서 UserRepository 메소드를 사용하여 사용자를 생성하고 찾는 메소드를 추가할 것입니다:\n\n```js\n// apps/auth-microservice/src/app/app.service.ts\n\nimport { Injectable } from '@nestjs/common';\n\nimport { CreateUserDto, User } from '@nestjs-microservices/shared';\n\nimport { UserRepository } from './user.repository';\n\n@Injectable()\nexport class AppService {\n  constructor(private readonly userRepository: UserRepository) {}\n\n  createUser(newUser: CreateUserDto): User {\n    return this.userRepository.save(newUser);\n  }\n\n  getUser(username: string): User | undefined {\n    return this.userRepository.findOne(username);\n  }\n}\n```\n\n마지막으로, @nestjs/microservices 패키지에서 가져온 @MessagePattern() 데코레이터를 사용하여 요청-응답 패러다임을 기반으로 한 메시지 핸들러 메소드를 생성합니다.\n\n```js\n// apps/auth-microservice/src/app/app.controller.ts\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @MessagePattern('get_user') // get_user 메시지 패턴을 수신 대기\n  handleGetUser(user: CreateUserDto) {\n    return this.appService.getUser(user.username);\n  }\n\n  @MessagePattern('create_user') // create_user 메시지 패턴을 수신 대기\n  handleCreateUser(newUser: CreateUserDto) {\n    return this.appService.createUser(newUser);\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n위 코드에서 handleGetUser() 메시지 핸들러는 get_user 메시지 패턴과 일치하는 메시지를 수신합니다. 이 메시지 핸들러는 클라이언트로부터 전달된 CreateUserDto 유형의 사용자를 인자로 취합니다.\n\n# 서비스 실행 및 테스트\n\n모든 서비스를 테스트하려면 다음 명령어를 개별적으로 별도의 터미널에서 실행해야 합니다:\n\n```js\nnx serve api-gateway\nnx serve auth-microservice\n```\n\n<div class=\"content-ad\"></div>\n\n앱을 테스트하려면 Postman이나 다른 API 클라이언트를 사용할 수 있어요.\n\n## 잘못된 자격 증명으로 로그인\n\n<img src=\"/assets/img/2024-06-20-BuildingMicroserviceswithNestJSTCPandTypescript_2.png\" />\n\n## 가입\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-BuildingMicroserviceswithNestJSTCPandTypescript_3.png\" />\n\n## 로그인\n\n<img src=\"/assets/img/2024-06-20-BuildingMicroserviceswithNestJSTCPandTypescript_4.png\" />\n\n## 동일한 사용자 이름으로 가입\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-20-BuildingMicroserviceswithNestJSTCPandTypescript_5.png)\n\n# 결론\n\n코드를 모두 확인하려면 GitHub 링크를 클릭하세요.\n\n읽어 주셔서 감사합니다 — 이 글이 도움이 되셨으면 좋겠습니다. 즐거운 코딩 되세요!\n\n<div class=\"content-ad\"></div>\n\n# 자원","ogImage":{"url":"/assets/img/2024-06-20-BuildingMicroserviceswithNestJSTCPandTypescript_0.png"},"coverImage":"/assets/img/2024-06-20-BuildingMicroserviceswithNestJSTCPandTypescript_0.png","tag":["Tech"],"readingTime":11},{"title":"리액트 네이티브에서 Redux를 이용한 테마 설정","description":"","date":"2024-06-20 00:06","slug":"2024-06-20-ThemingWithReduxinReactNative","content":"\n\n![image](/assets/img/2024-06-20-ThemingWithReduxinReactNative_0.png)\n\n왜 Theming을 할까요?\n\nTheming은 현대 앱의 주요 부분이 되어, 사용자 맞춤화 기능을 더욱 향상시킬 수 있게 해줍니다. 테마는 다양한 속성을 포함한 스타일을 설정하여, 다양한 사용자에게 다양한 방식으로 읽히게 합니다. 특히 편의성 측면에서 다르게 작용합니다. 요즘 유행하는 테마 모드는 주로 밝은 모드 또는 어두운 모드(어두운 모드가 가장 좋아요 :-))가 사용되고 있습니다. 일반적으로 사용자의 전화 시스템이 결정하도록 하는 세 번째 옵션이 존재하기도 합니다.\n\nRedux로 Theming을 하는 이유는 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n리덕스는 사용자가 상태를 중앙에서 조직적으로 관리할 수 있도록 도와주는 상태 관리 라이브러리입니다. 리덕스는 애플리케이션 상태를 저장하는 저장소 역할을 하며, 사용자는 이 저장소로 읽기, 업데이트 또는 액션을 전달할 수 있습니다. 리액트 컨텍스트, 리액트 쿼리 등 다른 더 쉬운 옵션이 있지만, 사용자를 위해 상태 관리를 간단하게 만드는 목적으로 이 글을 리덕스로 작성했습니다.\n\n- 리덕스는 현재 여러 프로젝트에서 사용 중인 매우 큰 커뮤니티 기반을 가지고 있습니다. 누군가에게 도움이 될 수 있습니다.\n- 개인적으로는 상태 관리 과정에서 어떤 일이 벌어지는지 더 잘 이해할 수 있다고 믿습니다.\n- 누군가가 그것이 스트레스라고 말했으므로, 왜냐하면 나는 그렇게 결정했기 때문에요. :-))\n\n우리가 이루고자 하는 목표\n\n이 프로젝트를 작성하는 시점을 기준으로, React Native 버전인 0.72.7, TypeScript 버전인 4.8.4, Node 버전인 16.17.1, 그리고 NPM 버전인 8.15.0을 사용할 것입니다. 사용할 리덕스 패키지 버전은 다음과 같습니다.\n\n<div class=\"content-ad\"></div>\n\n- \"redux\": \"5.0.1\",\n- \"redux-logger\": \"3.0.6\",\n- \"redux-persist\": \"6.0.0\",\n- \"@react-native-async-storage/async-storage\": \"1.21.0\"\n\n이 프로젝트를 진행하면서 몇 가지 목표를 이루고자 합니다.\n\n- 작업 환경을 설치하고 설정하기.\n- 서로 다른 테마에 대한 다양한 색상을 만들고 사용할 테마 색상 객체를 선택하는 함수를 작성하기.\n- 액션과 리듀서 만들기.\n- Redux 스토어 만들기, Redux 로거, 퍼시스트, 그리고 Async Storage 설정하기. 이 패키지들이 어떤 역할을 하는지 앱에서 사용하면서 설명해 드리겠습니다.\n- 리하이드레이션에 대해 설명하고 여기서 왜 필요한지 이야기하기.\n- 이 컴포넌트 내에서 저장된 상태 사용하기.\n- 마지막으로, 사용자가 시스템의 기본 테마를 사용할 수 있도록 하는 세 번째 옵션을 고려하기.\n\n전제 조건\n\n<div class=\"content-ad\"></div>\n\n- Javascript, Typescript, React Native 및 Redux에 대한 지식이 있습니다.\n- 위의 패키지가 설치되었습니다.\n\n시작하기\n\n패키지 설치\n\n```js\n// npm을 사용하여\nnpm i redux redux-logger redux-persist @react-native-async-storage/async-storage\n// yarn을 사용하여\nyarn add redux redux-logger redux-persist @react-native-async-storage/async-storage\n```\n\n<div class=\"content-ad\"></div>\n\n색구성 만들기\n\n누가 색상을 선택하는 데 머리 아픈 적이 없나요? src 폴더에 colors.tsx 파일을 생성하세요. 여기에는 light 및 dark 모드에 구조를 제공하는 유형을 만들었고, 이를 light 및 dark 키로 지정된 객체에 할당했습니다. 또한 테마에 따라 색구성을 반환하는 함수를 만들었습니다. 나중에 이 부분으로 돌아오겠습니다.\n\n```js\nexport interface ColorProps {\n  screenColor: string;\n  primary: string;\n  primaryTextColor: string;\n  lighterBlack: string;\n  secondaryTextColor: string;\n  inActiveUnderlineTextInputColor: string;\n  tertiaryTextColor: string;\n  whiteColor: string;\n  lightPrimaryColor: string;\n  favouriteButtonColor: string;\n  addPhotoButtonColor: string;\n  ratingIconColor: string;\n  disabledButtonColor: string;\n  onboardingInactiveIconColor: string;\n  tabBarTextColor: string;\n  tabColor: string;\n  gradientColor: string;\n}\nexport const Colors: ColorProps = {\n  screenColor: '#E5E5E5',\n  primaryTextColor: '#000000',\n  lighterBlack: '#FFFFFF',\n  secondaryTextColor: '#FFFFFF',\n  tertiaryTextColor: '#FFFFFF',\n  gradientColor: '#61D2C4',\n  tabColor: '#FFFFFF',\n  ratingIconColor: '#FFCD00',\n  primary: '#2DDA93',\n  disabledButtonColor: '#AAAAAA',\n  onboardingInactiveIconColor: '#DBDBDB',\n  inActiveUnderlineTextInputColor: '#A7A7A7',\n  lightPrimaryColor: '#61D2C4',\n  tabBarTextColor: '#D2D2D2',\n  whiteColor: '#FFFFFF',\n  favouriteButtonColor: '#FF6262',\n  addPhotoButtonColor: '#48A2F5',\n};\n\nexport const DarkColors: ColorProps = {\n  primaryTextColor: '#FFFFFF',\n  tertiaryTextColor: '#1E1E1E',\n  secondaryTextColor: '#F5F5F5',\n  screenColor: '#1B1C1E',\n  lighterBlack: '#777777',\n  tabColor: '#FFFFFF',\n  ratingIconColor: '#FFCD00',\n  primary: '#2DDA93',\n  disabledButtonColor: '#AAAAAA',\n  lightPrimaryColor: '#61D2C4',\n  gradientColor: '#1B1C1E',\n  onboardingInactiveIconColor: '#DBDBDB',\n  inActiveUnderlineTextInputColor: '#A7A7A7',\n  tabBarTextColor: '#D2D2D2',\n  whiteColor: '#FFFFFF',\n  favouriteButtonColor: '#FF6262',\n  addPhotoButtonColor: '#48A2F5',\n};\nconst themes = {\n  light: {...Colors},\n  dark: {...DarkColors},\n};\n\nexport const getThemeColor = (\n  theme: 'light' | 'dark' = 'light',\n  useSystemTheme?: 'light' | 'dark',\n) => {\n  const themeMode = themes[theme];\n  return themeMode;\n};\n```\n\n더 진행하기 전에, store, action 및 reducer는 무엇인가요? 간단히 살펴보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n어딘가에서 배운 상인의 비유를 사용해 보자. 좋은 걸로 알고 있어.\n\n- 가게를 운영하는 상인인 당신이라고 상상해보세요. 당신은 주문을 방문해야 팔 수 있는 국가를 파는 상점을 소유하고 있어요 (이곳에서는 이것이 유행이죠). 당신의 고객들은 직접 물건을 가져갈 수 없어요, 당신이 주어야죠 (리덕스 스토어).\n- 이익을 내려면 고객이 있어야 해요 - 우리는 비즈니스를 운영하고 있거든요!! - 이 고객들은 상점에 있는 제품에 대해 요청하거나 주문을 넣어요 (하나의 액션). 이러한 주문/요청은 '타입'으로 분류되며, 기타 정보와 함께 액션 객체에 유지되어요.\n- 이제 재고를 업데이트해야 해요 - 몇 개의 물건을 주고 나서 재고가 부족해요 - 그러나 당신이 따르는 특정 논리가 있어요. 여기에서 리듀서라는 개념이 등장해요. 리듀서는 현재 상태와 액션을 받아 들이는 순수한 액션 함수로, 액션 타입과 데이터에 기반하여 새로운 상태를 반환해요.\n\n우리의 리덕스 폴더 구조\n\n![image](/assets/img/2024-06-20-ThemingWithReduxinReactNative_1.png)\n\n<div class=\"content-ad\"></div>\n\n미리 정의된 유형과 초기 테마 상태를 정의해 봅시다 (이 기능은 더 큰 앱의 일부이므로 혼란스러워하지 않도록 이렇게 하고 있어요). 상태 매개변수에 초기 상태를 기본값으로 전달하는 것이 중요합니다. 이렇게 함으로써 상태가 정의되지 않은 경우 첫 번째로 리듀서를 호출할 때 처리할 수 있습니다.\n\n```js\nexport default {\n  TOGGLE_STATUS: 'Toggle',\n};\nexport type ThemeData = {\n  theme: 'light' | 'dark' | 'system';\n};\nconst initialState: ThemeData = {\n  theme: 'light',\n};\n```\n\n이제 액션(고객)을 만들어 봅시다.\n먼저 액션 생성자부터 시작할게요 - 액션을 반환하는 함수(유형, 페이로드)를 반환하고, 페이로드를 새로운 테마로 설정하여 나중에 컴포넌트에서 디스패치할 것입니다. \n\n```js\nexport const toggleTheme = (newTheme: string) => {\n  return {\n    type: types.TOGGLE_STATUS, // 모든 액션은 유형을 가져야 합니다\n    payload: newTheme,\n  };\n};\n```\n\n<div class=\"content-ad\"></div>\n\n저희 상태를 업데이트하기 위한 reducer를 생성 중입니다 (상점 주인님)\n\n여기서 이전 상태를 가져오고 이를 이전 상태가 없는 경우 초기 상태로 설정하는데 사용합니다. 그런 다음 액션에서 전달된 테마 값을 새 상태로 반환합니다. 여기서 액션은 'type, payload'로 구조화되어 있습니다. 타입이 없는 경우에는 이전 상태를 기본 블록에 전달합니다. 이 동작은 새로운 테마 모드로 상태를 업데이트합니다.\n\n```js\nconst toggleThemeReducer = (\n  state: ThemeData = initialState,\n  {type, payload}: {type: string; payload: any},\n) => {\n  switch (type) {\n    case types.TOGGLE_STATUS:\n      return {...state, theme: payload};\n    default:\n      return state;\n  }\n};\n```\n\n리덕스 스토어 설정 중입니다\n\n<div class=\"content-ad\"></div>\n\n와, 그것은 쉬운 부분이었네요. 이제 더 쉬운 부분으로 넘어가겠습니다. (다만 좀 더 신경 써야 할 수도 있어요 :-)).\n\n우리는 예상되는 입력 상태에 타입을 지정하는 것부터 시작할 거에요. 이렇게 미리 정의된 타입을 TypeScript가 타입 추론을 도와줄 때 삶이 조금 더 쉬워지게 됩니다.\n\n```js\nexport type ThemeState = ReturnType<typeof toggleThemeReducer>;\n```\n\n그런 다음에는 우리의 toggleThemeReducer 주위에 래퍼 역할을 하는 루트 리듀서를 가지고 있어요. 그 루트 리듀서는 redux-persist를 사용할 때 지속 상태를 처리하는 데 도움을 줍니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst rootReducer = (state: ThemeState | undefined, action: any) => {\n  const rehydratedState: ThemeState | undefined = toggleThemeReducer(state, action);\n  return rehydratedState;\n};\n```\n\n이제 상태를 보존해야 합니다. 이렇게 하면 사용자가 애플리케이션을 다시 시작하거나 새로 고침하면 이전에 한 변경 사항을 볼 수 있습니다. 테마 상태를 앱 다시 시작이나 새로 고침을 통해 다시 살리기 위해 상태를 보존하고 살립니다. 먼저 리듀서를 보존할 설정 객체(코드 상단에 좋습니다)를 만들고, 이 값을 persistReducer에 전달해야 합니다. 지속성 구성 객체는 redux-persist가 저장 솔루션으로 AsyncStorage를 사용하도록 구성하고 '테마' 상태만을 지속해야 한다고 지정합니다.\n\n```js\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['theme'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n```\n\n이제 저장소를 설정하고 이 저장소를 지속해야 합니다. 지속된 리듀서를 사용하여 저장소를 생성하면 테마 상태를 지속하고 다시 살립니다. 지속된 저장소(persistor)는 persistStore와 Redux 저장소를 사용하여 만듭니다. 이 persistor는 필요할 때 상태를 수동으로 보존하고 다시 살릴 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n```js\n상태 = createStore(\n= 지속Reducer,\n= applyMiddleware(...middlewares),\n);\n= 지속 = persistStore(모임);\n```\n\nRedux-logger\n\n이것은 Redux 스토어를 사용할 때 우리를 돕는 미들웨어입니다. 우리는 reduxlogger를 사용하는 middleware라는 배열을 만듭니다.\n\n```js\nreduxlogger = createLogger({});\nmiddleware = [reduxlogger];\n\n상태 = createStore(\n= 지속Reducer,\n= applyMiddleware(...middleware),\n);\n```\n\n<div class=\"content-ad\"></div>\n\n- Redux Logger: 이것은 모든 Redux 액션과 상태 변경을 콘솔에 로그로 남기는 개발 도구입니다. 이는 디버깅 목적으로 매우 유용한데, 액션의 흐름을 추적하고 그에 따라 상태가 어떻게 업데이트되는지 확인할 수 있기 때문입니다.\n\n재수행(Rehydration)\n\n이제, 우리는 리듀서를 수정하여 우리가 재수행할 때의 시나리오에 유의해야 합니다. 하지만 먼저, 재수행이 무엇인지 살펴보겠습니다. 우리 로거에서 가져온 앱의 로그를 살펴보면, 재시작했다는 것을 알 수 있습니다.\n\n```js\n{\"theme\": {\"theme\": \"light\"}\nGROUP  action persist/PERSIST @ 16:15:46.681\nLOG    prev state {\"theme\": {\"theme\": \"light\"}\nLOG    action     {\"register\": [Function register], \"rehydrate\": [Function rehydrate], \"type\": \"persist/PERSIST\"}\nLOG    next state {\"_persist\": {\"rehydrated\": false, \"version\": -1}, \"theme\": {\"theme\": \"light\"}\nLOG    {\"theme\": {\"theme\": \"light\"} 재수행상태 \nLOG    {\"_persist\": {\"rehydrated\": true, \"version\": -1}, \"theme\": {\"theme\": \"dark\"} 페이로드 {\"theme\": \"light\"} 상태\nGROUP  action persist/REHYDRATE @ 16:15:46.923\nLOG    prev state {\"_persist\": {\"rehydrated\": false, \"version\": -1}, \"theme\": {\"theme\": \"light\"}\nLOG    action     {\"err\": undefined, \"key\": \"root\", \"payload\": {\"_persist\": {\"rehydrated\": true, \"version\": -1}, \"theme\": {\"theme\": \"dark\"}, \"type\": \"persist/REHYDRATE\"}\nLOG    next state {\"_persist\": {\"rehydrated\": true, \"version\": -1}, \"theme\": {\"theme\": \"dark\"}\r\n```\n\n<div class=\"content-ad\"></div>\n\n여기에서 무슨 일이 일어나고 있는 거죠?\n\n앱이 다시 시작될 때, redux-persist가 먼저 현재 상태인 `light`를 AsyncStorage에 `persist/PERSIST` 액션을 사용하여 영속화합니다. 그런 다음, 이전에 `dark`로 설정되었던 영속 상태를 AsyncStorage에서 가져와 Redux 스토어에 `persist/REHYDRATE` 액션을 사용하여 재수확합니다.\n\n이것이 스토어에 대한 완전한 코드입니다.\n\n```js\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['theme'],\n};\n\nconst rootReducer = (state: ThemeState | undefined, action: any) => {\n  const rehydratedState: ThemeState | undefined = toggleThemeReducer(state, action);\n  return rehydratedState;\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  persistedReducer,\n  applyMiddleware(...middlewares),\n);\nexport const persistor = persistStore(store);\n\nexport type RootState = ReturnType<typeof rootReducer>; // 사전 정의된 이 유형 추론을 돕기 위한 것.\n```\n\n<div class=\"content-ad\"></div>\n\n우리 컴포넌트와 함께 이들 저장된 상태를 사용합니다.\n\n이 시연에서는 앱 내에서 테마 모드를 전환하는 데 도움이 되는 테마 버튼이 포함된 드롭다운을 가지고 있을 것입니다.\n\n```js\n인터페이스 DropDownData {\n  라벨: 문자열;\n  값: 문자열;\n}\n인터페이스 DropDownProps {\n  색상?: 문자열;\n}\nconst DropDown = (props?: DropDownProps) => {\n  const navigation = useNavigation<RootStackNavigationProp>();\n  const [selectedOption, setSelectedOption] = useState<string>('');\n\n  const data: DropDownData[] = [\n    {label: '테마', 값: 'theme'},\n  ];\n\n  const dispatch = useDispatch();\n\n  const userTheme = useSelector((state: RootState) => state.theme);\n  const {theme} = userTheme;\n  const Colors = getThemeColor(theme);\n\n  const styles = StyleSheet.create({\n    dropDownItem: {\n      paddingHorizontal: screenWidth * 0.04,\n    },\n    dropdown: {\n      backgroundColor: Colors.screenColor,\n      position: 'absolute',\n      left: screenWidth * 0.55,\n      borderRadius: 20,\n      paddingVertical: 8,\n      width: screenWidth * 0.4,\n    },\n  });\n\n  const handleOptionSelect = (value: string) => {\n    setSelectedOption(value);\n\n    if (value === 'customTheme') {\n      dispatch(toggleTheme(theme === 'light' ? 'dark' : 'light'));\n    } else if (value === 'system') {\n      dispatch(toggleTheme('system'));\n    }\n  };\n  return (\n    <View\n      style={\n        position: 'absolute',\n        top: screenHeight * 0.07,\n        right: screenWidth * 0.03,\n      }>\n      <SelectDropdown\n        data={data}\n        statusBarTranslucent\n        renderItem={(\n          selectedItem: DropDownData,\n          index: number,\n          isSelected: boolean,\n        ) => {\n          return (\n            <View\n              style={\n                ...styles.dropDownItem,\n                borderBottomWidth: 1,\n                borderBottomColor: Colors.primary,\n              }>\n              <WText\n                style={\n                  paddingVertical: 13,\n                  paddingLeft: 5,\n                  fontSize: 18,\n                }>\n                {selectedItem.label}\n              </WText>\n            </View>\n          );\n        }\n        dropdownOverlayColor=\"transparent\"\n        renderButton={() => {\n          return (\n            <View\n              style={\n                alignItems: 'flex-end',\n                backgroundColor: Colors.lighterBlack,\n                borderRadius: 100,\n                padding: 5,\n              }>\n              <Ionicons\n                name=\"ellipsis-vertical\"\n                color={Colors.primary}\n                size={30}\n              />\n            </View>\n          );\n        }\n        onSelect={(selectedItem: DropDownData, index: number) => {\n          handleOptionSelect(selectedItem.value);\n        }\n        dropdownStyle={styles.dropdown}\n      />\n    </View>\n  );\n};\n\nexport default DropDown;\n```\n\n위에 무슨 일이 발생했나요? \"CustomTheme\"을 선택했을 때, 현재 테마의 값을 확인한 후, 테마를 번갈아가며 변경합니다. 그러나 \"system\" 옵션을 선택하면 폰의 기본 테마를 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n시스템 기본 테마 사용하기\n\n마지막으로 시스템 테마를 사용하려면 useColorScheme 훅을 활용할 수 있습니다. 이 훅은 기기에서 현재 사용 중인 색상테마에 대한 업데이트를 제공합니다. colors.tsx 파일에서 getThemeColor 함수를 수정해봅시다.\n\n```js\nexport const getThemeColor = (theme: 'light' | 'dark' = 'light') => {\n  const systemTheme = useColorScheme() || 'light';\n  const userTheme = useSelector((state: RootState) => state.theme);\n  const {theme: storedTheme} = userTheme;\n  let themeMode;\n\n  if (storedTheme === 'system') {\n    const themeMode = themes[systemTheme];\n    return themeMode;\n  } else {\n    const themeMode = themes[theme];\n    return themeMode;\n  }\n};\n```\n\n아래의 코드를 사용하여 저장소에서 현재 테마 색상을 제공받아 원하는 동작을 구현하는데 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst userTheme = useSelector((state: RootState) => state.theme);\nconst {theme} = userTheme;\nconst Colors = getThemeColor(theme);\n```\n\n아래는 우리의 결과입니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1152/1*2zA_7xp0whnKUe5a5ts_aA.gif)","ogImage":{"url":"/assets/img/2024-06-20-ThemingWithReduxinReactNative_0.png"},"coverImage":"/assets/img/2024-06-20-ThemingWithReduxinReactNative_0.png","tag":["Tech"],"readingTime":14},{"title":"React 코드 향상을 위한 최상의 실천 방법","description":"","date":"2024-06-20 00:04","slug":"2024-06-20-ReactBestPracticestoImproveYourCode","content":"\n\n<img src=\"/assets/img/2024-06-20-ReactBestPracticestoImproveYourCode_0.png\" />\n\n리액트는 현대 웹 개발에서 중심 역할을 하며, 개발자들에게 비교할 수 없는 효율로 동적이고 인터랙티브한 사용자 인터페이스를 만들 수 있는 기회를 제공합니다. 그러나 리액트의 전체 잠재력을 활용하려면 기본적인 친숙함 이상이 필요합니다. 이 기사에서는 리액트 코딩 능력을 향상시키기 위한 포괄적인 다양한 모범 사례를 탐구하겠습니다. 이 원칙을 준수하면 튼튼하고 확장 가능하며 유지보수가 쉬운 어플리케이션을 만들 수 있습니다.\n\n# 1. 클래스 컴포넌트 대신 함수형 컴포넌트를 사용하세요\n\n- 가독성과 간결성: 클래스 기반 컴포넌트 대비 함수와 훅을 사용하면 더 간단하고 간결한 구문을 얻을 수 있습니다. 함수로 전환하면 클래스 없이 함수형 컴포넌트를 만들 수 있어 코드의 가독성과 이해도를 향상시킬 수 있습니다. 함수는 'this' 키워드, 생성자 및 라이프사이클 함수를 관리하는 복잡성을 제거하여 더 깔끔한 코드를 제공합니다.\n- 코드 재사용성: 여러 컴포넌트에서 로직을 추출하고 재사용할 수 있도록 허용함으로써 훅은 코드 재사용성을 향상시킵니다. 고차 컴포넌트나 렌더 속성을 사용하지 않고도 사용자 정의 훅으로 상태 변화와 상호작용할 수 있습니다.\n- 미래에 대한 유연성: 최근 몇 년간 리액트는 컴포넌트 작성의 주요 방법으로 훅의 널리 퍼지는 사용을 옹호해왔습니다. 리액트 팀은 함수를 사용하여 컴포넌트를 만드는 것을 권장하며 계속해서 능력을 향상하고 확장하기 위한 투자를 계속하고 있습니다.\n- 성능 향상: 훅을 사용하면 성능을 개선하기가 더 쉬워집니다. useCallback 및 useMemo와 같은 훅을 활용하면 함수와 값을 캐시하여 추가 렌더링 반복이 필요 없게 하고 컴포넌트 성능을 향상시킬 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// Counter.js\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0,\n        };\n    }\n\n    incrementCount() {\n        this.setState({\n            count: this.state.count + 1,\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Count: {this.state.count}</h1>\n                <button onClick={() => this.incrementCount()}>\n                    Increment\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Counter;\n```\n\n함수 구성 요소를 사용하면 더 명확하고 간단하게 재사용 가능하고 모듈식 코드를 개발할 수 있습니다.\n\n```js\n// Hook\nimport React, { useState } from 'react';\n\nconst Counter = () => {\n    const [count, setCount] = useState(0);\n\n    const incrementCount = () => {\n        setCount(prevCount => prevCount + 1);\n    };\n\n    return (\n        <div>\n            <h1>Count: {count}</h1>\n            <button onClick={incrementCount}>\n                Increment\n            </button>\n        </div>\n    );\n};\n\nexport default Counter;\n```\n\n# 2. 구성 요소 조합\n\n\n<div class=\"content-ad\"></div>\n\n리액트에서 컴포넌트 구성은 더 작은 컴포넌트를 조합하여 재사용 가능한 UI 컴포넌트를 생성하는 실천을 말합니다. 이를 통해 개발자들은 복잡한 UI를 작은, 더 관리하기 쉬운 부분으로 분해하여 응용 프로그램의 다른 부분에서 쉽게 재사용할 수 있게 됩니다.\n\nComponent Composition을 사용하는 여러 이점이 있습니다:\n\n- 재사용성: 컴포넌트는 응용 프로그램의 다른 부분에서 쉽게 재사용할 수 있어 UI를 유지하고 업데이트하기 쉽게 만듭니다.\n- 모듈성: UI를 더 작고 관리하기 쉬운 컴포넌트로 분해하면 특히 크고 복잡한 응용 프로그램에 대해 이해하고 작업하기가 쉬워집니다.\n- 관심사의 분리: UI를 더 작은 컴포넌트로 분리함으로써 각 컴포넌트가 자체 특정 기능에 집중할 수 있어 테스트하고 디버깅하기가 쉬워집니다.\n- 코드 유지보수성: 이해하고 유지 관리하기 쉬운 작은 컴포넌트를 사용하면 시간이 흐른 후 응용 프로그램을 업데이트하고 변경하기가 쉬워집니다.\n\n```js\nimport React from ‘react’;\nimport { PropTypes } from “prop-types”;\n\nconst Button = (props) => {\n  return (\n    <div>\n      <button type=“button”>Handler</button>\n    </div>\n  )\n};\n```\n\n<div class=\"content-ad\"></div>\n\nReact PropTypes는 React 애플리케이션에서 코드 품질, 유지 관리성 및 개발자 생산성을 향상시키는 데 중요한 런타임 유형 검사, 문서화, 디버깅 지원 및 API 정의 기능을 제공합니다.\n\n# 3. 인라인 스타일 사용을 피하세요\n\n인라인 스타일의 가장 큰 문제점 중 하나는 코드 유지와 업데이트가 어려워진다는 것입니다. 웹 페이지의 모양을 변경하려면 스타일 속성이 있는 모든 요소를 수정해야 하며, 하나의 외부 또는 내부 스타일 시트를 수정하는 대신 수정해야 합니다. 이렇게 되면 복잡성이 증가하고 효율성이 감소하며, 웹 애플리케이션 스타일을 변경할 때 오류가 발생할 가능성이 더 높아집니다.\n\n```js\nimport React from \"react\";\n\nconst styles = {\n  width: 200,\n  height: 50,\n  backgroundColor: 'red'\n};\n\nconst Button = () => (\n  <button style={styles}>My Button</button>\n)\n```\n\n<div class=\"content-ad\"></div>\n\n# 4. Arrow 함수 사용하기\n\nArrow 함수를 사용하면 일반 함수 표현식과 비교하여 더 간결한 구문을 제공할 뿐만 아니라 코드 가독성을 향상시키고 작은 함수(예: 이벤트 핸들러 또는 콜백 함수)에 대해 불필요한 말을 줄일 수 있습니다. 이들의 간결한 구문은 코드베이스의 명확성을 유지하고 전반적인 가독성을 향상시키는 데 도움이 됩니다. 더불어 arrow 함수는 주변 코드의 렉시컬 스코프를 상속받아 특정 상황에서 명시적으로 'this'를 바인딩할 필요가 없게 하므로 더 깔끔하고 직관적인 코드를 작성할 수 있습니다. Arrow 함수를 활용하면 코드 유지 관리성을 향상시키고 개발 프로세스를 간소화하여 더 효율적이고 읽기 쉬운 코드를 작성할 수 있습니다.\n\n```js\nconst App = () => (\n  <Container>\n    {/* 앱 코드의 나머지 부분 */}\n  </Container>\n);\n``` \n\n# 5. lazy()와 Suspense() 함수 사용하기\n\n<div class=\"content-ad\"></div>\n\nReact에서는 lazy() 함수와 component를 사용하여 코드 분할과 로딩 상태 처리를 조절하며, 특히 초기 로드 시간을 최적화하고 사용자 경험을 향상시키는 데 유용합니다. 이는 로딩 인디케이터를 표시함으로써 대규모 응용 프로그램에서 특히 유용합니다.\n\n- lazy() 사용:\n\nlazy() 함수를 사용하면 컴포넌트를 동적으로 가져올 수 있습니다. 이는 컴포넌트가 실제로 필요할 때만 로드되어 초기 렌더링 중에 미리 로드되지 않습니다. 특히 대규모 컴포넌트나 즉시 필요하지 않은 컴포넌트에 유용합니다.\n\n- `Suspense` 사용:\n\n<div class=\"content-ad\"></div>\n\n해당 컴포넌트는 Lazy-로드되는 컴포넌트가 로드될 때까지 기다리는 동안 로딩 표시기를 지정할 수 있게 해줍니다. 이것은 Lazy-로드되는 컴포넌트를 감싸는 역할을 합니다.\n\n```js\nimport React, { lazy, Suspense } from 'react';\n\nconst LazyComponent = lazy(() => import('./LazyComponent'));\n\nfunction App() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <LazyComponent />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n이 접근법은 실제로 필요할 때만 로드되는 Less Critical 컴포넌트로 인해 응용 프로그램의 초기 번들 크기와 로드 시간을 최적화하는 데 도움이 됩니다. 특히 초기 로드 크기를 줄이는 것이 성능에 중요한 대규모 응용 프로그램에서 특히 유익합니다.\n\n<div class=\"content-ad\"></div>\n\nReact 애플리케이션에서 최적의 성능을 유지하기 위해서는 구성 요소 렌더링 효율을 향상시키는 것이 중요합니다, 특히 복잡하고 방대한 사용자 인터페이스를 가진 애플리케이션의 경우입니다. 아래의 전략을 통해 렌더링 성능을 향상시킬 수 있습니다:\n\nReact.memo 활용: 고차 컴포넌트인 React.memo를 활용하면 구성 요소 렌더링 결과를 메모화할 수 있습니다. 이를 통해 구성 요소의 props가 변경되지 않은 경우 불필요한 재렌더링을 방지할 수 있습니다.\n\n```js\nimport React from 'react';\n\nconst MyComponent = React.memo(({ prop1, prop2 }) => {\n  // 구성 요소 렌더링 로직\n});\n\nexport default MyComponent;\n```\n\n이 최적화 기술을 구현함으로써 React 애플리케이션의 전반적인 성능과 반응성을 크게 향상시킬 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 7. TypeScript 사용하기\n\nTypeScript는 JavaScript의 typed superset으로서 일반 JavaScript로 컴파일됩니다. 클래스, 모듈 및 인터페이스를 제공하여 견고한 구성 요소를 구축하는 데 도움이 됩니다.\n\n```js\nimport React from 'react';\n\ninterface Props {\n  name: string;\n}\n\nconst Hello: React.FC<Props> = ({ name }) => <div>Hello {name}</div>;\n```\n\n# 8. 유형 선언 도구 사용하기\n\n<div class=\"content-ad\"></div>\n\n만약 TypeScript를 사용할 수 없는 경우, prop-types나 다른 대안과 같은 타입 체크 도구나 라이브러리를 활용하는 것을 권장합니다. 이러한 도구들은 React 컴포넌트 내에서 타입 체크를 보장하여 각 prop으로 전달된 데이터의 정확성을 확보하는 데 도움을 줍니다. prop-types는 인기 있는 선택지이지만, 현대적인 개발 관행과 더 잘 부합하는 대안 라이브러리를 탐색하는 것이 좋습니다.\n\n- 타입 체크: 이러한 도구들을 사용하여 prop의 예상 데이터 타입을 정의할 수 있어, 타입 제약을 강제함으로써 런타임 오류를 최소화할 수 있습니다.\n- 디버깅: 타입 위반이 발생했을 때 경고가 발생하여, 잘못된 prop 사용과 관련된 문제를 식별하고 해결하는 데 도움이 됩니다.\n- 문서화: 명시적으로 prop 타입을 지정함으로써, 이러한 도구들은 예상하는 prop 및 각각의 데이터 타입에 대한 문서로서, 개발자들에게 명확한 정보를 제공합니다.\n- 코드 유지보수성: 이러한 도구들을 사용함으로써 코드의 가독성과 유지보수성이 향상되어, 개발자들이 구성 요소 인터페이스를 더 잘 이해하고 효과적으로 협업할 수 있습니다.\n\nprop-types가 오랜 기간 사용된 솔루션이긴 하지만, 생태계는 변화하고 있으며, 다른 도구를 탐색하여 현대적인 개발 관행과의 호환성을 확보하는 것이 중요합니다.\n\n# 9. ESLint 사용하기\n\n<div class=\"content-ad\"></div>\n\nESLint은 React 애플리케이션에서 코드 품질, 일관성, 잠재적인 오류 또는 버그를 확인하는 데 사용되는 인기 있는 도구입니다. ESLint가 React 개발에서 널리 사용되는 이유와 중요한 기능들은 다음과 같습니다:\n\n- 정적 코드 분석: ESLint는 코드를 실행하지 않고 검사하는 정적 분석을 수행합니다. 이렇게 함으로써 ESLint는 개발 프로세스 초기에 오류와 잠재적인 문제를 감지하여 버그를 방지하고 코드 품질을 향상시킬 수 있습니다.\n- 사용자 지정 규칙: ESLint를 사용하면 React 개발에 맞게 사용자 정의 규칙을 정의하거나 사전 정의된 규칙 세트를 사용할 수 있습니다. 이러한 규칙은 프로젝트 내에서 코딩 표준, 최상의 실천 방법 및 규칙을 강요합니다. 예를 들어, 특정 React 패턴의 사용을 강제하거나 훅을 올바르게 사용하거나 사용되지 않는 메서드를 피하도록 할 수 있습니다.\n- 자동화된 코드 리뷰: ESLint를 CI/CD 파이프라인에 통합하여 개발 워크플로에 자동화된 코드 리뷰를 포함시킬 수 있습니다. 이를 통해 코드 품질 표준이 모든 코드 기여 부분에서 일관되게 유지되도록 보장하고 회귀를 방지할 수 있습니다.\n- 코드 일관성: ESLint는 일관된 코딩 스타일을 강요함으로써 코드베이스 전체에서 일관성을 유지하는 데 도움을 줍니다. 이는 여러 개발자가 코드를 기여하는 협업 프로젝트에서 특히 중요합니다. 일관된 코드는 읽기, 이해 및 유지 관리가 쉬워져 전체 프로젝트 품질을 향상시킵니다.\n\n# 10. 테스트 케이스 작성\n\n테스트는 React 개발의 중요한 측면이며 무시해서는 안 되는 부분입니다. 이를 통해 응용 프로그램이 높은 품질, 신뢰성 및 훌륭한 사용자 경험을 제공하는지 확인할 수 있습니다. 이러한 React 컴포넌트의 테스트 케이스는 방대한 수의 React 테스트 케이스를 포함할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n리액트 애플리케이션을 테스트하는 데 사용할 수 있는 여러 유형의 테스트가 있습니다.\n\n- 유닛 테스트: 유닛 테스트는 React 애플리케이션의 개별 컴포넌트를 테스트하는 데 사용됩니다. 각 컴포넌트의 기능을 독립적으로 테스트하여 의도한 대로 작동하는지 확인합니다. 유닛 테스트는 일반적으로 Jest 또는 Mocha와 같은 테스트 프레임워크를 사용하여 작성됩니다.\n- 통합 테스트: 통합 테스트는 애플리케이션의 다른 컴포넌트가 함께 작동하는 방식을 테스트하는 데 사용됩니다. 컴포넌트 간 상호 작용을 테스트하여 의도한 대로 작동하는지 확인합니다. 통합 테스트는 Cypress 또는 Selenium과 같은 테스트 프레임워크를 사용하여 작성할 수 있습니다.\n- End-to-End 테스트: 엔드투엔드 테스트는 전체 애플리케이션을 테스트하는 데 사용됩니다. 사용자의 관점에서 애플리케이션을 테스트하여 의도한 대로 작동하는지 확인합니다. 엔드투엔드 테스트는 Cypress 또는 Selenium과 같은 테스트 프레임워크를 사용하여 작성할 수 있습니다.\n- 컴포넌트 테스트: React 컴포넌트는 효율적으로 테스트할 수 있는 작고 재사용 가능한 코드 조각입니다. 이 단계에서는 DOM 상호 작용을 테스트하고자 합니다.\n\n리액트에서 테스트 케이스를 작성하는 것은 코드 신뢰성을 보장하고 코드 품질을 높이며 리팩토링을 용이하게 하며 CI/CD 파이프라인을 지원하고 개발자 신뢰도를 향상시키며 개발팀 간 협업을 촉진하는 데 중요합니다. 이는 리액트 애플리케이션의 총 안정성과 유지보수성에 기여하는 소프트웨어 개발 프로세스의 필수 요소입니다.\n\nTelegram / Instagram / Facebook / Threads / GitHub","ogImage":{"url":"/assets/img/2024-06-20-ReactBestPracticestoImproveYourCode_0.png"},"coverImage":"/assets/img/2024-06-20-ReactBestPracticestoImproveYourCode_0.png","tag":["Tech"],"readingTime":9},{"title":"Box UI Elements, React, Tailwind CSS, Vercel을 사용하여 콘텐츠 포털을 만드는 방법 - 파트 1","description":"","date":"2024-06-20 00:02","slug":"2024-06-20-BuildacontentportalusingBoxUIElementsReactTailwindCSSVercelPart1","content":"\n\n\n![image](/assets/img/2024-06-20-BuildacontentportalusingBoxUIElementsReactTailwindCSSVercelPart1_0.png)\n\nBox는 그 자체로 훌륭하지만 때로는 특정 사용자 인터페이스를 가진 맞춤 환경을 외부 사용자에게 제공하고 싶은 경우가 있을 수 있습니다. 이때 컨텐츠 포털이 등장합니다!\n\n이 포털 시리즈의 첫 번째 부분에서 Box의 샘플 코드 저장소 중 하나를 사용하여 Box UI Elements, React, Tailwind CSS 및 Vercel을 이용해 포털 개발을 시작하는 방법을 살펴볼 것입니다.\n\n# 커스텀 포털 개요\n\n\n<div class=\"content-ad\"></div>\n\n만약 알지 못하는 경우, 포털은 기본적으로 Box 위에 오버레이입니다. 이를 통해 내부 직원, 공급업체 또는 외부 고객이 비즈니스 프로세스의 저장 계층으로 Box를 사용할 수 있습니다.\n\n![이미지](/assets/img/2024-06-20-BuildacontentportalusingBoxUIElementsReactTailwindCSSVercelPart1_1.png)\n\n만든 포털은 완전히 사용자 정의된 사용자 경험을 제공하며, Box API를 사용하여 데스크톱이나 모바일 기기에서 콘텐츠 클라우드와 상호 작용하는 것이 쉽습니다.\n\n가장 좋은 부분은 Box의 산업 최고 수준의 보안 메커니즘이 유지되어, 콘텐츠에 접근해야 하는 사람만이 접근할 수 있도록 됩니다.\n\n<div class=\"content-ad\"></div>\n\n## 고객 사용 사례\n\n우리는 보험 청구나 자산 관리를 위해 포털을 사용하는 많은 고객들을 보유하고 있습니다. 아래는 몇 가지 예시입니다.\n\n모건 스탠리는 클라이언트가 컨설턴트와 협력하며 재정 및 세금 문서를 관리할 수 있도록 Box API를 사용한 디지털 보궐을 만들었습니다.\n\n새로운 고객 대출 신청 및 대출 문서 보관을 위해 포털을 활용하는, 신규 또는 소규모 비즈니스와 대출 업체를 연결하는 Fundwell도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n국가적으로는 보통 전체 보험 청구 처리과정에 Box 콘텐츠 포털을 사용합니다.\n\n# 안내\n\n오늘의 데모에서는 Box UI 요소를 사용하여 가상 뱅크 'Increo Financial'을 위한 간단한 금융 문서 포털을 만드는 방법을 안내하겠습니다. 이 예시 코드를 사용하여 여러분의 포털을 발전시키는 시작점으로 활용할 수 있습니다.\n\nUI Elements는 Box 플랫폼의 사용하기 쉽고 사용자 정의 가능한 React UI 구성 요소입니다. 버전 19부터는 반응형으로 작동합니다.\n\n<div class=\"content-ad\"></div>\n\n여러 유형이 있습니다. 파일 업로드, 다운로드 및 볼 수 있는 컨텐츠 탐색기(content explorer) 또는 파일을 사용자에게 표시하는 미리 보기 요소(preview element)와 같은 것들이 있습니다. 우리 포털은 다양한 것들을 사용할 것입니다.\n\n박스의 기능 및 범위가 내장되어 있습니다. 예를 들어, 사용자가 파일의 메타데이터를 볼 수 있게 하거나 Box AI를 사용하고 싶다면 작은 구성 변경으로 쉽게 가능합니다.\n\n모든 최신 데스크톱 및 모바일 브라우저가 지원되며, 로고도 사용자 정의할 수 있습니다.\n\nUI Elements v20부터 React v17.0.2 및 Node 18.18.0까지 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 🚨 중요 사항 🚨\n\n이 데모는 시연을 위한 것이며 실제 운영에 적합하지 않습니다. 완전한 인증 조치가 부족하기 때문에 추가 개발 없이는 실제 환경에 적합하지 않습니다.\n\n## 필요 사항\n\n튜토리얼의 첫 번째 부분을 완료하려면 다음 항목이 필요합니다:\n\n<div class=\"content-ad\"></div>\n\n- GitHub 계정\n- Vercel 계정 — GitHub 계정으로 로그인하는 것이 좋습니다.\n- Box 개발자 계정 — Box 전체에서 고유한 이메일 주소를 사용해야 합니다.\n\n## Box 애플리케이션 구성\n\n- 새 애플리케이션 만들기: Box 개발자 콘솔에 가서 ‘새 앱 만들기’를 클릭하고, ‘사용자 정의 앱’을 선택하고, 앱 이름을 지정한 다음에 ‘JWT를 사용한 서버 인증(JWT)’을 선택합니다. 참고 — 실제 데모에는 필요하지 않지만, 앱 사용자 관리 및 보안 수준을 높이기 위해 실제 배포에서 JWT를 사용하는 것이 권장됩니다.\n- 애플리케이션 범위 설정: 필요한 권한이 있는지 확인합니다: 앱 + 기업, 모든 파일 읽기/쓰기, 사용자/그룹/기업 속성 관리, Box AI(Enterprise+ 라이선스 이상에서만 사용 가능) 및 사용자 액세스 토큰 생성하기. 다시 한 번 강조하지만, 이러한 범위 중 일부는 데모 배포에서 사용되지 않지만, 실제 시나리오에서는 필수입니다.\n- 공개/비공개 키 쌍 생성: 공개/비공개 키 쌍 생성 버튼을 클릭합니다. 이 작업은 2단계 인증이 필요합니다. 이전에 설정한 적이 없다면 설정해야 할 것입니다. 팝업이 나타나면 설정 방법을 안내합니다. 설정을 완료한 후, 키 페어 플로우를 다시 진행해야 합니다.\n- JSON 구성 파일 다운로드: 이 파일은 키 페어 생성시 자동으로 다운로드됩니다. 이 파일을 가까이 보관하세요. 나중 단계에서 이 파일의 정보가 필요합니다.\n- 저장: 우측 상단에 있는 버튼을 사용하여 변경 사항을 저장합니다.\n\n## Box 애플리케이션 인증\n\n<div class=\"content-ad\"></div>\n\n항상 그렇듯이, 서버 인증 애플리케이션을 사용하려면 Box 인스턴스의 관리자에 의해 승인해야 합니다. 애플리케이션을 승인하려면 사용자 지정 앱 승인에서 안내된 단계를 따르세요. 승인 후에는 서비스 계정 이메일이 앱에 할당됩니다. 누군가 변경을 가할 때마다 앱을 다시 승인해야 합니다.\n\n## Box 더미 콘텐츠 설정\n\n데모가 동작하려면 몇 가지 더미 콘텐츠를 생성해야 합니다. 실제 시나리오에서는 사용자가 생성되거나 Increo Financial에 가입할 때 대부분 자동화될 수 있습니다. 그러나 간단함과 신속성을 고려하여 여기서는 수동으로 진행하겠습니다.\n\n모든 포털 콘텐츠가 저장될 루트 폴더를 생성하세요. 폴더의 이름을 Portal Demo로 지정하세요.\n\n<div class=\"content-ad\"></div>\n\n이전에 만든 JWT 애플리케이션의 서비스 계정 이메일 주소를 포털 데모 루트 폴더에 추가해보세요. 만일 어디서 해당 이메일을 가져와야 할지 기억하지 못한다면, Box 개발자 콘솔의 일반 설정 탭에서 찾을 수 있습니다.\n\n많은 종단 사용자가 사용할 예정인 포털을 상상해볼 때, 하나의 사용자를 위한 폴더를 만들어봅시다. 데모 루트 폴더에 새 폴더를 생성하세요. 가짜 사용자의 이름으로 이름을 지어주시면 되는데, 예를 들어 Robert Smith와 같이 해보세요.\n\n이번 데모에서는 앱 사용자를 사용하지는 않겠지만, 컨텐츠 포털의 프로덕션 구현에서는 앱 사용자를 활용하여 적합한 보안 포지셔닝을 유지하는 것이 매우 중요합니다. 이와 관련된 자세한 정보는 여기와 여기에서 확인할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n스미스 씨의 폴더 안에 두 개의 폴더를 더 만들어주세요: Applications와 Statements.\n\nStatements 폴더에 이 더미 명세서의 사본을 업로드해주세요.\n\n사용자의 루트 폴더에 이 더미 약관 파일의 사본을 업로드해주세요. 실제 시나리오에서는 이 파일이 다른 곳에 존재할 수 있지만, 미리뷰 상자 UI 요소를 보여드리기 위해 실제 파일이 필요합니다.\n\n우리가 생성한 각 요소마다 다음 단계에서 필요한 ID를 유지해야 하니 Box를 열어두세요!\n\n<div class=\"content-ad\"></div>\n\n## Vercel을 사용하여 초기 사이트 배포하기\n\n이제 Box 애플리케이션을 만들고 더미 콘텐츠를 만들었으므로 Box의 샘플 저장소에서 기본 포털의 사본을 배포할 수 있습니다.\n\n🚨중요🚨\n\n이미 Vercel 계정을 생성하고 탭에서 열어 둔 상태여야 합니다. 계정이나 탭을 열지 않은 채로 Vercel에 배포하면 혼동이 발생할 수 있습니다. GitHub에서 무언가를 처음으로 배포할 때 GitHub와 Vercel을 서드 파티 통합을 통해 연결하라는 메시지가 표시될 것입니다. 이것은 정상적인 동작입니다.\n\n<div class=\"content-ad\"></div>\n\n위의 링크를 클릭하여 Vercel에 배포해보세요. 여러 옵션을 선택해야 할 것이므로 함께 진행해 봅시다.\n\n먼저, 위의 링크를 클릭했을 때 아래 화면이 표시되지 않는다면 아마 Vercel에 로그인되지 않았을 것입니다. 오른쪽 상단에 있는 로그인을 클릭하여 로그인하고, 창을 닫은 다음 다시 링크를 클릭해주세요.\n\n아래 화면에 도달하면, 첫 번째 상자 오른쪽 하단의 '만들기'를 클릭해주세요. 이렇게 하면 귀하의 계정에 GitHub 저장소가 생성되고 Box의 샘플 저장소에서 코드를 복제합니다.\n\n다음 단계에서, 여러 환경 변수를 붙여넣어야 합니다. Vercel에 내장된 환경 변수를 사용하면 보안을 유지하는 훌륭한 방법입니다. 각 부분에 대한 Box 콘텐츠 ID는 해당 부분의 URL 막대에서 찾을 수 있습니다. 예를 들어, 아래 스크린샷에서 URL 슬러그 끝에 표시된 ID는 'Statements' 폴더의 폴더 ID입니다.\n\n<div class=\"content-ad\"></div>\n\n각 값 필드를 확인하고 요청된 변수를 채우세요. 완료하면 배포를 클릭해주세요.\n\n- REACT_APP_BOX_CONTENT_UPLOADER_FOLDER_ID 변수는 파일 folder와 함께 사용됩니다.\n- REACT_APP_UPLOADED_FOLDER_ID 변수는 폴더 applications와 함께 사용됩니다.\n- REACT_APP_BOX_PREVIEW_FILE_ID 변수는 파일 terms and conditions와 함께 사용됩니다.\n- 나머지 변수들은 자동으로 다운로드된 JSON 구성 파일에서 가져옵니다. 보안상의 이유로 이들을 표시하지는 않겠습니다. 단지 복사하여 붙여넣기하면 됩니다 — 따옴표 없이. 그 중에서 가장 긴 사설 키는 순서가 섞여 있고, 값에는 /n을 포함해야 합니다.\n\n배포를 클릭한 후 아래와 같은 화면이 표시될 것입니다. 이 프로세스는 몇 분 정도 걸릴 수 있습니다.\n\n다음과 같은 오류가 표시될 수 있습니다. 그럴 때는 해결 방법이 있습니다. 왼쪽 상단의 이름을 클릭하여 대시보드로 이동해주세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-BuildacontentportalusingBoxUIElementsReactTailwindCSSVercelPart1_3.png\" />\n\n포털 프로젝트를 클릭하여 선택하세요.\n\n프로젝트의 설정 탭에서 아래로 스크롤하여 Node.js 버전 섹션을 찾으세요. 드롭다운에서 18.x를 선택하세요. 저장을 클릭하세요.\n\n이제 포털 프로젝트의 배포 탭을 전환하세요. 실패한 배포를 볼 수 있어야 합니다. 점 세 개를 클릭하고 다시 배포를 선택하세요.\n\n<div class=\"content-ad\"></div>\n\n팝업에서 기본 설정을 그대로 두고, 다시 배포를 클릭해주세요.\n\n<img src=\"/assets/img/2024-06-20-BuildacontentportalusingBoxUIElementsReactTailwindCSSVercelPart1_4.png\" />\n\n몇 분 후 성공하면, 준비 상태가 표시될 것입니다.\n\n방문 버튼을 클릭하세요. 배포된 샘플 콘텐츠 포털의 홈페이지가 나타날 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## 배포 후 설정\n\n기본 포털을 테스트하려면 Box 애플리케이션 구성 섹션에 CORS 도메인을 추가해야 합니다. 방문 버튼 아래에서 찾을 수 있습니다. 표준 페이지와 배포 URL을 모두 추가해야 합니다. 테스트 중에 배포 URL을 방문/사용할 계획이라면 둘 다 추가해주세요. URL 끝에 슬래시를 포함하지 마시고 쉼표로 구분해 주세요.\n\n<img src=\"/assets/img/2024-06-20-BuildacontentportalusingBoxUIElementsReactTailwindCSSVercelPart1_5.png\" />\n\nURL을 추가한 후, 우측 상단의 저장 버튼을 클릭하세요.\n\n<div class=\"content-ad\"></div>\n\n## 기본 포털 테스트\n\n기본으로 배포된 포털에는 내장된 인증이 없기 때문에 이메일 필드는 비워 둘 수 있습니다. 비밀번호 필드에는 Box 애플리케이션 구성 섹션에서 얻은 개발자 토큰을 붙여 넣을 수 있습니다.\n\n\"개발자 토큰 생성\"을 클릭합니다. 토큰을 복사합니다.\n\n토큰을 비밀번호 필드에 붙여 넣고 \"로그인\"을 클릭하세요.\n\n<div class=\"content-ad\"></div>\n\n로그인 후 아래 화면이 표시됩니다. '내 명세서' 헤더 옵션을 클릭해주세요.\n\n모든 것이 예상대로 작동했다면, 업로드한 더미 명세서가 있는 명세서 폴더가 표시됩니다. 이 페이지는 콘텐츠 업로더 UI 요소를 사용하기 때문에 많은 기능을 수행할 수 있습니다! 명세서를 클릭해주세요.\n\n명세서의 미리 보기가 나타납니다. 이제 오른쪽 상단의 로그아웃을 클릭해주세요.\n\n홈페이지로 돌아가도록 초대받을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## 다음에 올 내용\n\n이 포털 시리즈의 후속 블로그에서는 추가 페이지 추가, 인증 개선, Box AI 사용, 색상 사용자 정의 및 기타 기능 등 여러 가지 향상 사항을 살펴볼 예정입니다!\n\n# 마무리\n\n1부에서 확인한 것처럼, Box UI Elements 및 Box API를 사용하면 내부 또는 외부 사용자를 위한 사용자 정의 경험을 매우 쉽게 만들 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n다음 부분에서는 기본 포털을 추가 기능으로 확장하는 데 중점을 둘 것입니다.\n\n그때까지, 즐거운 코딩하세요!\n\n항상, Box 개발자 관련팀에 피드백이 있으면 개발자 포럼에 연락해주세요.","ogImage":{"url":"/assets/img/2024-06-20-BuildacontentportalusingBoxUIElementsReactTailwindCSSVercelPart1_0.png"},"coverImage":"/assets/img/2024-06-20-BuildacontentportalusingBoxUIElementsReactTailwindCSSVercelPart1_0.png","tag":["Tech"],"readingTime":7},{"title":"제목 파트 2 리액트  훅의 명명 규칙 및 반환 형식","description":"","date":"2024-06-20 00:00","slug":"2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks","content":"\n\n<img src=\"/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_0.png\" />\n\n# 📖 이전 파트\n\nPart 1은 여기에서 찾을 수 있어요: https://medium.com/p/e6af2696089a\n\nReact 훅은 함수형 컴포넌트에서 상태와 다른 React 기능을 사용할 수 있게 해주는 JavaScript 함수들입니다. 이 함수들의 이름은 use로 시작하는 것들이에요.\n\n<div class=\"content-ad\"></div>\n\nReact 문서에서 인용한 내용입니다:\n\nReact 훅에 대해 기사를 작성해야 하는 이유가 궁금할 수 있습니다. 실은 전통적인 방식에는 문제가 없지만 몇몇 사람들은 더 나은 가독성과 이해를 위해 훅에 접근하는 방법을 발견했다는 것을 알게 되었거든요.\n\n이 기사를 작성하게 된 동기 중 하나는 저를 다른 방식으로 훅을 개선하는 방법을 보여준 존 마이클 도로이입니다. 이 기사에서는 우리의 방식을 공유하겠습니다.\n\n# 📜 사용자 지정 훅의 전통적인 구조\n\n<div class=\"content-ad\"></div>\n\nMarkdown 형식으로 테이블 태그를 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_2.png)\n\n두 번째로 소개할 것은 창 크기를 반환하는 사용자 정의 훅입니다. 이 훅의 이름은 useWindow입니다.\n\n이전에 말씀드렸듯이, 이 네이밍 규칙에는 문제가 없습니다. 하지만 이 네이밍 규칙을 어떻게 개선할 수 있는지 살펴봅시다.\n\n# 📝 제안된 네이밍 규칙 및 반환 형식\n\n<div class=\"content-ad\"></div>\n\n내 이용 수칙 중 하나는 후크 이름에 접두사나 접미사를 추가하여 해당 후크의 유형을 나타내는 것입니다.\n\n첫 번째 예로, 후크를 useTheme 대신 useThemeContext로 지정할 수 있습니다. 이렇게 하면 해당 후크가 컨텍스트에서 테마를 반환한다는 것을 쉽게 식별할 수 있습니다.\n\n두 번째 예로, 첫 번째 제안과 유사하게 후크의 이름을 useWindow 대신 useWindowSize로 지정할 수 있습니다. 마찬가지 이유로 해당 후크가 무엇을 하는지 쉽게 식별할 수 있습니다!\n\n해당 후크 이름을 더 구체적으로 지정하여 해당 작업이 무엇인지 이해하기 쉽게 하고 싶습니다.\n\n<div class=\"content-ad\"></div>\n\n훅의 이름을 자명하게 만들어서 구현을 보지 않아도 훅이 하는 일을 이해할 수 있는 것을 선호해요.\n\n이제, 반환 시그니처로 넘어가 봅시다. 반환 시그니처는 함수가 반환하는 값입니다.\n\n훅의 반환 시그니처를 어떻게 개선할 수 있을지 생각해보세요.\n\n현재 훅은 값을 직접 반환하고 있습니다. 그렇다면 갑자기 다른 값을 반환해야 한다면 어떻게 해야 할까요?\n\n<div class=\"content-ad\"></div>\n\n갑작스럽게 훅의 반환 시그니처를 변경하면 훅을 사용하는 컴포넌트에서 변경 사항이 발생할 수 있습니다.\n\n그래서 값을 직접 반환하는 대신, 값을 속성으로 가진 객체를 반환하는 것을 제안합니다.\n\n다음은 제안된 명명 규칙과 반환 시그니처로 보이는 훅의 예시입니다:\n\n![React Hooks return signature](/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_3.png)\n\n<div class=\"content-ad\"></div>\n\n![Korean](/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_4.png)\n\n이렇게 하면 훅을 사용하는 컴포넌트를 변경하지 않고 반환 값에 더 많은 값을 쉽게 추가할 수 있습니다.\n\n작은 변화지만 미래에 더 많은 값을 반환해야 할 때 큰 차이를 만들어 줄 수 있습니다.\n\n# 🤔 반환 시그니처 문제를 정말 해결했을까요?\n\n<div class=\"content-ad\"></div>\n\n거의 다 왔어요. 여기에서 John Michael Doroy의 아이디어를 가져오되 다른 예제로 해보려고 해요.\n\n대부분의 경우, 우리는 컴포넌트 내에서 다음과 같이 훅을 사용해요:\n\n\n<img src=\"/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_5.png\" />\n\n\n당신이 생각하는 것 알아요. 구조 분해를 제거하고 객체를 직접 사용해야 한다고요. 네, 그렇게 할 수 있지만 경우에 따라 객체를 구조 분해하고 이 오류를 만날 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n이제 우리는 훅을 사용할 때 변수 이름을 userSettings와 appSettings로 지정해야 한다는 걸 기억해야 해요. 실제로 괜찮지만, \n\n하지만, 다른 컴포넌트에서 사용하고 싶다고 가정해봅시다. 다시 변수를 userSettings로 지정해야 한다는걸 기억해야죠.\n\n![Image](/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_6.png)\n\n오탈자에 주목했나요? userSetings가 아니라 userSettings가 맞아요. 이게 문제의 핵심이에요!\n\n<div class=\"content-ad\"></div>\n\n제안된 해결책은 후크 이름을 사용 접두사 없이 키로, 값은 값으로 하는 객체를 반환하는 것입니다.\n\n다음은 어떻게 보이는지입니다:\n\n![image](/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_7.png)\n\n이렇게 하면 컴포넌트에서 사용된 후크를 쉽게 식별할 수 있습니다. 또한 이전에 만난 오타를 피할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_8.png\" />\n\n충돌이나 오타가 없어질 것입니다. 이 작은 변화가 장기적으로 큰 차이를 만들어냅니다.\n\n- 훅을 더 일관되게 사용할 수 있습니다. 다른 컴포넌트에서 동일한 훅에 대해 다른 변수 이름을 사용하지 않아도 됩니다.\n- 오타를 방지할 수 있습니다. 더 이상 userSetings 대신 userSettings를 사용하지 않아도 됩니다.\n- 충돌을 피할 수 있습니다. useUserSettings와 useAppSettings에서 가져오는 설정 충돌을 막을 수 있습니다.\n\n# 🎁 추가 혜택: `react-query` 커스텀 훅을 위한 명명 규칙 + 반환 시그니처\n\n<div class=\"content-ad\"></div>\n\n우리는 얼마 전부터 react-query를 사용해오고 있어요. 지금은 우리가 react-query를 위해 훅을 어떻게 이름 짓는지 공유하고자 해요.\n\n이 내용이 문서화되었거나 문서에서 공유되었는지는 확실하지 않아요. 하지만 우리가 react-query를 위해 훅을 어떻게 이름 짓는지 알려드릴게요.\n\nreact-query에는 두 가지 유형의 훅이 있어요:\n\n- 쿼리 훅(Query hooks)\n- 뮤테이션 훅(Mutation hooks)\n\n<div class=\"content-ad\"></div>\n\n쿼리 후크(Query hooks)에 대해서는 use`동사``도메인`Query와 같이 훅(hook)의 이름을 짓습니다.\n\n다음은 몇 가지 예시입니다:\n\n1. 사용자를 가져오고 싶을 때는 useGetUserQuery라고 이름을 지정합니다.\n\n2. 사용자 목록을 가져오고 싶을 때는 useGetUsersQuery라고 이름을 지정합니다.\n\n<div class=\"content-ad\"></div>\n\n3. 제품 목록을 가져오고 싶을 때, useGetProductsQuery라고 이름을 지정합니다.\n\n변이 훅의 경우, 훅의 이름을 use`동사``도메인`Mutation으로 지정합니다.\n\n여기 몇 가지 예시입니다:\n\n1. 사용자를 만들고 싶을 때, useCreateUserMutation으로 이름을 지정합니다.\n\n<div class=\"content-ad\"></div>\n\n2. 사용자를 업데이트하려면 `useUpdateUserMutation`이라고 이름을 붙입니다.\n\n3. 사용자를 삭제하려면 `useDeleteUserMutation`이라고 이름을 붙입니다.\n\n반환 시그니처에 대해서는, 우리는 훅 이름을 키로 사용접뒤에 `use` 접두사를 제외한 형식으로 객체를 반환하고, 값으로 값이 입력됩니다.\n\n다음과 같은 형식을 가집니다:\n\n<div class=\"content-ad\"></div>\n\n아래는 표를 마크다운 형식으로 변경했습니다.\n\n<img src=\"/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_9.png\" />\n\n<img src=\"/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_10.png\" />\n\n다음은 이 네이밍 규칙 및 훅 반환 형식을 사용하는 이유입니다:\n\n- 컴포넌트에서 사용 중인 훅의 유형을 식별하는 데 도움이 됩니다.\n- 훅을 더 일관된 방법으로 사용할 수 있게 도와줍니다. 다른 컴포넌트에서 동일한 훅에 대해 서로 다른 변수 이름을 사용하지 않게 됩니다.\n- 변수 충돌을 피하는 데 도움이 됩니다. 각 훅에 고유한 이름이 있어 해당 훅 이름을 포함하는 객체를 반환하기 때문에 변수 충돌을 방지할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 🚀 결론\n\n이것을 작성하기 전에, React 문서에서 이미 다뤄진 이 주제가 흔하기 때문에 말할 게 많지 않을 거라고 생각했어요.\n\n하지만 제가 깨달은 건, 우리가 다룰 수 있는 몇 가지 부분이 있고 우리의 경험을 통해 배운 것을 공유할 수 있다는 거예요.\n\n프로그래밍에서 네이밍 규칙과 일반적인 접근 방식은 중요합니다. 일관된 네이밍 규칙과 접근 방식이 없다면 코드베이스를 이해하고 유지 관리하기 어려울 것입니다.\n\n<div class=\"content-ad\"></div>\n\n최종적으로, 사용할 방법은 당신에게 달려있습니다. 저가 공유한 전통적인 방법이나 제안된 방법 중 원하는 방법을 선택할 수 있습니다. 무엇을 선택하든, 선택한 방법을 유지하고 일관되게 사용하는 것이 중요합니다.\n\n당신은 미래의 자신과 팀을 위해 코드를 작성하고 있습니다. 이해하기 쉽고 유지보수하기 쉬운 코드를 작성하는 데 주의해주세요.\n\n언제든지 질문이나 제안이 있으면 아래에 댓글을 남겨 주세요. 당신의 의견을 기다리고 있을게요.\n\n읽어 주셔서 감사합니다. 이 글이 여러분의 여정에 도움이 되길 바랍니다! ❤️\n\n<div class=\"content-ad\"></div>\n\n# 쉽고 이해하기 쉽게 🚀\n\nIn Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 떠나시기 전에:\n\n- 작가를 클랩하고 팔로우해주세요 👏️️\n- 팔로우 링크: X | LinkedIn | YouTube | Discord | Newsletter\n- 다른 플랫폼 방문: Stackademic | CoFeed | Venture | Cubed\n- 알고리즘 콘텐츠를 다루는 블로깅 플랫폼에 지쳤나요? Differ를 시도해보세요\n- PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요","ogImage":{"url":"/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_0.png"},"coverImage":"/assets/img/2024-06-19-Part2ReactNamingConventionReturnSignaturesforHooks_0.png","tag":["Tech"],"readingTime":6},{"title":"Preact, HTM, 그리고 Signal을 활용한 빌드 없이 구축하는 JavaScript 애플리케이션","description":"","date":"2024-06-19 23:57","slug":"2024-06-19-CreatingaBuildlessJavaScriptApplicationwithPreactHTMandSignal","content":"\n\n현대 웹 개발 시대에는 빌드 도구의 복잡성이 때로는 초보자들과 간단하게 유지하고 싶은 사람들에게 장벽이 될 수 있습니다 (K.I.S.S.).\n\n그러나 Preact, HTM, Signal과 같은 라이브러리들이 등장함으로써, 빌드가 필요 없는 JavaScript 애플리케이션을 생성하는 것이 가능할 뿐만 아니라 효율적으로 이루어질 수 있게 되었습니다.\n\n이 접근법은 빌드 구성의 부담 없이 프로젝트를 신속하게 설정할 수 있어 개발 프로세스를 빠르고 간편하게 만들어줍니다.\n\n## 왜 Preact, HTM, 그리고 Signal을 선택해야 할까요?\n\n<div class=\"content-ad\"></div>\n\n- Preact: React의 3KB 빠른 대안인 Preact는 동일한 현대적 API를 제공하며, DOM 위에 가장 얇은 Virtual DOM 추상화를 제공합니다. 그 간결함과 작은 크기로 빌드 없이 설정이 필요한 환경에서 각 바이트가 중요한 경우 이상적입니다.\n- HTM: Hyperscript Tagged Markup (HTM)은 JSX와 유사한 구문을 변환 없이 브라우저에서 직접 사용할 수 있게 해줍니다. HTM은 Preact와 아름답게 결합되어, 빌드 단골 없이도 개발자 친화적인 템플릿 제작 경험을 제공합니다.\n- Signals: Preact와 원활하게 작동하는 상태 관리 라이브러리로, 애플리케이션 상태를 섬세하게 반응적 프로그래밍으로 처리할 수 있는 간단하고 효율적인 방법을 제공합니다.\n\n## 빌드 없는 환경 설정\n\n[여기](https://github.com/badpenguin/buildless-pwa)에서 GitHub에서 제 제작 App을 시작할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n빌드 없이 구현되는 전체 컨셉은 다음 두 가지 기반을 갖고 있어요:\n\n- 번들러 대신 ES 모듈과 ImportMap 사용;\n- JSX 대신 HTM 템플릿 리터럴 라이브러리 사용.\n\n그래서 브라우저가 ImportMap과 호환되어야 해요. 그것이 항상 그런 것은 아니에요. 그래서 시작할 때 다음 폴리필을 추가하는 것을 제안해요:\n\nhttps://github.com/guybedford/es-module-shims\n\n<div class=\"content-ad\"></div>\n\n```js\n<script async src=\"https://ga.jspm.io/npm:es-module-shims@1.7.3/dist/es-module-shims.js\"></script>\n```\n\n그러면 \"fetch\" 및 기타 기능 지원 여부를 확인하는 몇 가지 확인 사항을 알게 될 것입니다.\n\n현대 브라우저에서도 이 기본 구조가 작동하지만, 기기의 기능을 항상 확인하는 것을 추천합니다.\n\n<div class=\"content-ad\"></div>\n\n외부에는 오래된 \"스마트 TV\"와 미친 JVM과 같은 이상한 오래된 장치들이 많이 있어요. 그래서 그들의 브라우저가 너무 오래되었다고 표시해 주는 것도 나쁘지 않겠죠.\n\n여기 importmap이 등장합니다.\n\n여기서 우리는 JS 엔진에게 import할 라이브러리를 어디에서 찾을 수 있는지를 지정해 줍니다.\n\nHTML 파일의 importmap은 종속성을 직접 선언하고, Preact, HTM, 그리고 Signal의 번들 버전을 가리키며, script 태그를 통해 로드할 수 있는 내용입니다.\n\n<div class=\"content-ad\"></div>\n\n이 설정은 개발 중에 번들러나 모듈 로더가 필요하지 않도록 만들어줍니다.\n\n```js\n<script type=\"importmap\">\n    {\n        \"imports\": {\n            \"preact\": \"/app/dist/standalone.js\",\n            \"preact/hooks\": \"/app/dist/standalone.js\",\n            \"htm\": \"/app/dist/standalone.js\",\n            \"@preact/signals\": \"/app/dist/standalone.js\",\n            \"@preact/signals-core\": \"/app/dist/standalone.js\",\n            \"preact-router\": \"/app/dist/preact-router.module.js\"\n        }\n    }\n</script>\n```\n\n원격 라이브러리도 지정할 수 있지만 저는 항상 로컬 사본을 사용하는 것을 선호합니다. 특히 WebView(Cordova와 같은)를 사용하여 이 웹앱을 모바일 앱으로 번들하려고 할 때 말이죠.\n\nstandalone.js를 눈치채셨나요?\n\n<div class=\"content-ad\"></div>\n\n저는 몇 개의 라이브러리를 하나의 파일에 패키징했습니다. 이 프로젝트 덕분에:\n\nhttps://github.com/mujahidfa/preact-htm-signals-standalone\n\n이곳에서는 22KB 안에 훅과 시그널이 포함된 Preact와 HTM 템플릿 라이브러리를 받을 수 있습니다.\n\n이제 주 애플리케이션 컴포넌트를 부트스트랩할 준비가 되었습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<script type=\"module\">\n  import {h, render} from 'preact';\n  import {MainApp} from '/app/main.js';\n\n  window.onload = function() {\n    console.log('* onload');\n    const app = h(MainApp);\n    render(app, document.getElementById(\"main\"));\n  }\n</script>\n<div id=\"main\"></div>\n```\n\nReact에 익숙하다면, 이것은 단지 \"hello world\"일 뿐입니다.\n\n주목할 점은 main 구성요소가 별도의 파일인 main.js로 나뉘어져 있다는 것입니다. \"/app/main.js\"는 실제로 절대 또는 상대 URL이 될 수 있으며, 파일 경로가 아닙니다.\n\n## The splash screen example\n\n\n<div class=\"content-ad\"></div>\n\n단순한 스플래시 화면 예제 역시 \"신호\"를 활용하는 방법을 보여드리기 위해 추가했어요.\n\n이 화면은 어플리케이션이 초기화되는 동안 보일 거에요.\n\n스플래시 화면에 대한 모든 CSS와 HTML은 외부 파일에 의존하지 말고 주요 index.html 파일 내에 넣어주세요.\n\n가능하다면 외부 HTTP 요청을 피하기 위해 이미지를 base64로 인라인으로 포함해주세요. 그렇지 않으면 여기서 \"사전로드(preload)\"의 개념을 잃을 것이에요.\n\n<div class=\"content-ad\"></div>\n\n```js\n# 프리로드\n<preload> 요소에는 다음과 같은 스타일이 지정되어 있습니다.\n- 텍스트 색상: #6d1153\n- 배경색: #fff\n- 안쪽 여백: 1rem\n- 고정 위치: 화면 상단 좌측\n- 플렉스 박스로 설정, 세로 방향으로 정렬\n- 가운데 정렬\n- 글꼴: sans-serif\n- 글꼴 크기: 18px\n- 줄 높이: 1.7\n\npreload 요소의 이미지는 다음과 같이 스타일이 지정되어 있습니다.\n- 블록으로 표시\n- 아래 여백: 2rem\n\npreload 요소 내의 단락과 제목은 다음과 같은 스타일이 지정되어 있습니다.\n- 텍스트 색상: #333\n\npreload 요소 내의 링크는 다음과 같은 스타일이 지정되어 있습니다.\n- 링크 색상: #FF1978\n```\n\n이 main.js 파일에서 이것이 어떻게 숨겨지는지 상세히 보여드리겠습니다.\n\n## JSX 대신 HTML을 사용하여 개발\n\n그리고 이것이 \"Main\" 컴포넌트입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport {html} from 'htm';\nimport Router, {route} from 'preact-router';\nimport {signal} from '@preact/signals';\nimport {effect} from '@preact/signals-core';\n\nexport function MainApp() {\n console.debug('- render MainApp');\n return html`\n  ${$loading.value ? null : html`\n   <${Router}>\n    <${PageHome} path=\"/\"/>\n    <${PageNotFound} default/>\n   <//>`}\n `;\n}\n```\n\n위 코드에서는 JSX를 사용하는 대신 HTM 라이브러리를 사용하고 있습니다.\n\nHTM 구문은 브라우저에서 직접 JSX와 유사한 컴포넌트를 생성하는 데 사용되며, Signal은 상태 변경을 반응적으로 관리하여 사용자 상호 작용에 따라 UI를 업데이트합니다.\n\n이 구성 요소에서 $loading이 TRUE일 때만 렌더링되지 않습니다(널 값), 즉 div#main이 아닌 div#preload가 그대로 표시됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n로딩이 완료되면 preact-router의 설정에 따라 페이지를 최종적으로 렌더링합니다.\n\n$loading 변수는 preact-signal로 생성된 오브젝트입니다.\n\n```js\nexport const $loading = signal(true);\n```\n\n메인 컴포넌트를 미리 채우는 초기화 함수를 만들고 작업이 완료되면 이 변수를 FALSE로 설정할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nsetTimeout(function(){\n console.log('- loading completed.');\n $loading.value = false;\n}, 1000);\n```\n\n“effect”와 “dispose”를 사용하여 $loading의 값이 변경될 때마다 “una tantum”(한 번만)을 가로채고 스플래시 화면을 숨길 수 있습니다:\n\n```js\nconst dispose = effect(() => {\n if ($loading.value) {\n  return;\n }\n console.debug('- app ready');\n // 프리로드 숨기기\n const preloadDiv = document.getElementById(\"preload\");\n preloadDiv.style.display = \"none\";\n dispose();\n});\n```\n\n$loading은 우리의 “Main” 컴포넌트 내에서 사용되므로, Main 컴포넌트를 자동으로 다시 렌더링하게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n## 신호 및 HTM을 사용한 간단한 카운터 생성\n\n이 예제는 매우 간단합니다. 먼저 변수를 만들어주세요:\n\n```js\nexport const $counter = signal(0);\n```\n\n그리고 이 두 버튼으로 조작해보세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nconst PageHome = function() {\n console.debug('- render PageHome');\n return html`\n  <div class=\"page active \">\n\n    <div class=\"flex-row\">\n\n     <a class=\"btn\" onclick=\"${() => {\n      $counter.value--;\n     }}\">\\u00AB</a>\n\n     <span class=\"counter\">${$counter}</span>\n\n     <a class=\"btn\" onclick=\"${() => {\n      $counter.value++;\n     }}\">\\u00BB</a>\n\n    </div>\n\n  </div>`;\n};\r\n```\n\n팁: HTM에서는 &raquo;와 같은 HTML 엔티티를 사용할 수 없습니다. 왜냐하면 이들이 사용된 그대로 표시될 것이기 때문입니다. 해결책은 \\u0000 구문을 대신 사용하는 것입니다.\n\n그게 다 입니다.\n\n만약 풀 기능의 PWA를 만들기 위해 Manifest.json과 좋아하는 ServiceWorker 구현을 추가하고 싶다면 언제라도 추가해 주세요.\n\n<div class=\"content-ad\"></div>\n\n## 빌드 없는 접근 방식의 이점\n\n- 간편함: 웹팩, 롤업 또는 다른 빌드 구성을 유지할 필요가 없어 설정을 단순화하고 빌드 관련 문제의 가능성을 줄입니다.\n- 속도: 변경 사항이 즉시 브라우저 새로고침 후에 반영되어 개발 주기를 가속화합니다.\n- 코드에 집중: 개발자들은 특히 작은 프로젝트나 개발 초기 단계에서 도구보다 코딩에 더 집중할 수 있습니다.\n\n## 고려해야 할 단점\n\n- 확장성: 프로젝트가 커짐에 따라 빌드 시스템의 부재는 트리 쉐이킹, 최소화, 고급 번들링 전략과 같은 최적화 옵션을 제한할 수 있습니다.\n- 브라우저 호환성: 현대 브라우저 기능에 지나치게 의존할 경우 응용 프로그램이 이전 브라우저와 호환되는 것을 제한할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 결론\n\nPreact, HTM 및 Signals를 활용한 빌드 없는 JavaScript 애플리케이션은 현대적인 개발 관행과 간단함 사이에 뛰어난 균형을 제공합니다.\n\n특히 가벼운 애플리케이션이나 프로토 타입을 신속하게 작성하려는 개발자들에게 매력적입니다.\n\n모든 프로젝트에 적합하지는 않을 수 있지만, 특히 대규모 애플리케이션에는 해당하지 않을 수 있지만, 빠른 설정과 적은 종속성을 우선시하는 사람들에게 매력적인 옵션을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n## 나에 대해\n\n저는 오픈 소스 기술 분야에서 40년 이상의 경험을 가지고 있습니다. 개발자, 연설가 및 트레이너로 활동하고 있습니다. 제 LinkedIn 프로필이나 웹사이트 https://antoniogallo.it를 확인해주세요.","ogImage":{"url":"/assets/img/2024-06-19-CreatingaBuildlessJavaScriptApplicationwithPreactHTMandSignal_0.png"},"coverImage":"/assets/img/2024-06-19-CreatingaBuildlessJavaScriptApplicationwithPreactHTMandSignal_0.png","tag":["Tech"],"readingTime":7},{"title":"리액트 앱을 Vite로 만드는 방법","description":"","date":"2024-06-19 23:57","slug":"2024-06-19-HowToCreateaReactAppwithVite","content":"\n\n![이미지](/assets/img/2024-06-19-HowToCreateaReactAppwithVite_0.png)\n\n이 튜토리얼은 처음으로 Vite를 사용하여 React 프로젝트를 만들고 싶어하는 분들을 위한 것입니다. React 프로젝트를 만드는 다양한 방법이 있지만, 이 튜토리얼에서는 Vite와 npm 패키지 매니저를 사용하여 React 프로젝트를 생성하는 방법을 안내하겠습니다. yarn과 같은 다른 패키지 매니저도 사용할 수 있습니다.\n\n# 준비 사항\n\n- Node 버전 ≥ 18\n- NPM 버전 8\n\n<div class=\"content-ad\"></div>\n\nVite는 Node.js 버전 ≥ 18과 npm 버전 8을 필요로 합니다. 그러나 일부 템플릿은 작동하려면 더 높은 Node.js 버전이 필요합니다.\n\n# Vite 프로젝트 만들기\n\nVite를 사용하여 React 프로젝트를 만들려면 먼저 터미널을 사용하여 원하는 폴더로 이동해야 합니다.\n\n여기서 두 가지 다른 방법을 보여드리겠습니다.\n\n<div class=\"content-ad\"></div>\n\n## 방법 1:\n\n다음 명령어를 실행해보세요\n\n```js\nnpm create vite@latest\n```\n\n![이미지](/assets/img/2024-06-19-HowToCreateaReactAppwithVite_1.png)\n\n<div class=\"content-ad\"></div>\n\n여기에 프로젝트 이름을 지정해주세요. 해당 이름은 프로젝트 폴더의 이름이 됩니다.\n\n![프로젝트 이미지](/assets/img/2024-06-19-HowToCreateaReactAppwithVite_2.png)\n\n제 경우에는 프로젝트 이름이 my-app입니다.\n\n![프로젝트 이미지](/assets/img/2024-06-19-HowToCreateaReactAppwithVite_3.png)\n\n<div class=\"content-ad\"></div>\n\n키보드 화살표를 사용하여 React를 선택한 후 엔터키를 눌러주세요.\n\n![React image](/assets/img/2024-06-19-HowToCreateaReactAppwithVite_4.png)\n\n타입스크립트 또는 자바스크립트 중 원하는 것을 선택해주세요. 저는 자바스크립트를 선택했습니다. 그리고 엔터키를 눌러주세요.\n\n![JavaScript image](/assets/img/2024-06-19-HowToCreateaReactAppwithVite_5.png)\n\n<div class=\"content-ad\"></div>\n\n해결되었습니다.\n\n## 접근법 2:\n\n또한, 한 번의 명령으로 Vite를 사용하여 React 프로젝트를 생성할 수 있습니다.\n\n```js\nnpm create vite@latest my-app -- --template react\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-HowToCreateaReactAppwithVite_6.png\" />\n\n완료되었습니다.\n\n## 의존성 설치 및 프로젝트 실행\n\n```js\ncd my-app\n```  \n\n<div class=\"content-ad\"></div>\n\n이제 프로젝트 폴더로 이동하세요.\n\n```js\nnpm install\n```\n\n의존성을 설치하기 위해 실행하세요.\n\n```js\nnpm run dev\n```\n\n<div class=\"content-ad\"></div>\n\n마침내, 프로젝트를 시작해보세요.\n\n![이미지](/assets/img/2024-06-19-HowToCreateaReactAppwithVite_7.png)\n\n현재 저의 경우, 애플리케이션이 http://localhost:5173 에서 실행되고 있습니다. 다른 사람들이 이미 사용 중일 때에는 포트 번호가 다를 수 있습니다.\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n이 기사에서는 Vite를 사용하여 React 프로젝트를 만드는 방법을 보여드렸어요.\n공식 문서는 여기서 확인할 수 있어요.","ogImage":{"url":"/assets/img/2024-06-19-HowToCreateaReactAppwithVite_0.png"},"coverImage":"/assets/img/2024-06-19-HowToCreateaReactAppwithVite_0.png","tag":["Tech"],"readingTime":2},{"title":"React 앱을 위한 GitLab과 Hostinger로 CICD 구현하기 단계별 안내","description":"","date":"2024-06-19 23:55","slug":"2024-06-19-ImplementingCICDforReactAppswithGitLabandHostingerAStep-by-StepGuide","content":"\n\n\n![이미지](/assets/img/2024-06-19-ImplementingCICDforReactAppswithGitLabandHostingerAStep-by-StepGuide_0.png)\n\n이 가이드에서는 React 애플리케이션을 Hostinger에 배포하기 위한 파이프라인 설정 과정을 안내해 드릴 거에요. 목표는 GitLab 저장소로의 푸시가 웹사이트에 자동 업데이트를 유발하는 배포 프로세스를 자동화하는 것입니다. 이 튜토리얼에서는 GitLab의 강력한 CI/CD 기능을 활용하여 Hostinger에 React 애플리케이션을 배포하는 데 필요한 단계에 대해 자세히 살펴볼 거예요.\n\nGitlab CI/CD 파이프라인 설정하기\n\nCI/CD 파이프라인을 설정하려면 프로젝트의 루트 디렉토리에 .gitlab-ci.yml 파일을 생성해야 해요. 이 파일은 파이프라인의 단계와 작업을 정의할 거예요. 여기에 React 프로젝트에 대한 샘플 내용이 있어요:\n\n\n<div class=\"content-ad\"></div>\n\n```js\nstages:\n  - build\n  - deploy\n\nbuild:\n  stage: build\n  image: node:latest\n  script:\n    - npm ci\n    - npm run build\n  artifacts:\n    paths:\n      - dist/\n\ndeploy:\n  stage: deploy\n  image: alpine:latest\n  before_script:\n    - apk update && apk add lftp\n  script:\n    - lftp -c \"set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_SERVER; mirror -Rev ./dist/ /your_hosting_directory --ignore-time --parallel=10; quit\"\n  only:\n    - main\n```\n\n이 파일에서 두 개의 스테이지인 build와 deploy를 정의했습니다. build 스테이지는 가장 최신의 Node.js 이미지를 사용하여 프로젝트 종속성을 설치하고 React 어플리케이션을 빌드합니다. 빌드된 파일은 dist/ 디렉터리 아래 artifacts로 저장됩니다.\n\ndeploy 스테이지는 가장 최신의 Alpine 이미지를 사용하고 lftp라는 명령 줄 FTP 클라이언트를 설치합니다. 그런 다음, lftp를 사용하여 $FTP_SERVER로 지정된 FTP 서버에 $FTP_USERNAME 및 $FTP_PASSWORD로 지정된 사용자 이름과 비밀번호로 연결합니다. 수정 시간을 무시하고 병렬로 최대 10개의 파일을 업로드하여 dist/ 디렉터리를 FTP 서버의 /your_hosting_directory 디렉터리로 미러링합니다. 이 스테이지는 main 브랜치에서만 실행됩니다.\n\n실제 FTP 자격 증명으로 $FTP_USERNAME, $FTP_PASSWORD 및 $FTP_SERVER를 교체해야 합니다. 이에 대해 확실하지 않다면 걱정하지 마세요. GitLab 프로젝트 설정에서 이러한 자격 증명을 비밀 변수로 설정하는 프로세스를 설명하는 단계에 따라 안내해 드릴 테니 걱정 마세요. 이 접근 방식을 통해 자격 증명이 안전하고 비밀 유지됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n호스팅에서 FTP 세부정보 가져오기\n\nHostinger 계정에 로그인합니다: 먼저 Hostinger 계정에 로그인하세요. 로그인 후에 Hostinger 제어판으로 이동하게 됩니다.\n\n호스팅 섹션으로 이동합니다: 제어판에서 \"호스팅\" 섹션으로 이동하세요. 여기서 모든 호스팅 목록을 볼 수 있습니다. 원하는 호스팅 옆의 \"대시보드\" 버튼을 클릭하여 FTP 세부정보를 가져오세요. 아래 스크린샷에서 확인할 수 있습니다.\n\n<img src=\"/assets/img/2024-06-19-ImplementingCICDforReactAppswithGitLabandHostingerAStep-by-StepGuide_1.png\" />\n\n<div class=\"content-ad\"></div>\n\nFTP 계정 섹션에 액세스하세요: 화면 왼쪽에 메뉴가 표시됩니다. \"파일\" 섹션 아래에 있는 \"FTP 계정\"을 클릭해보세요.\n\nFTP 세부정보를 가져오세요: FTP 계정 섹션에서 호스팅 계정과 관련된 FTP 계정 목록이 나열됩니다. 각 FTP 계정 옆에는 FTP 사용자 이름, FTP 서버, 그리고 숨겨진 비밀번호가 표시됩니다. FTP 비밀번호를 확인하려면 \"눈\" 아이콘을 클릭하세요.\n\n이 세부정보를 안전하게 보관하는 것을 기억하세요. 다음 섹션에서는 GitLab 프로젝트 설정에서 이러한 세부정보를 사용하여 비밀 변수를 설정하는 방법을 안내해 드리겠습니다.\n\n<div class=\"content-ad\"></div>\n\nGitLab에서 비밀 변수 설정하기\n\n- GitLab 프로젝트로 이동하기: GitLab 계정에 로그인하여 비밀 변수를 설정하려는 특정 프로젝트로 이동합니다.\n- 설정에 액세스하기: 프로젝트의 메인 페이지에서 왼쪽 메뉴에 있는 \"설정\" 옵션을 클릭합니다.\n- CI/CD 섹션으로 이동하기: 설정에서 \"CI / CD\" 섹션을 찾아 클릭합니다.\n- 변수 섹션 확장하기: CI / CD 섹션에서 \"변수\"라는 하위 섹션을 찾아 \"확장\" 버튼을 클릭합니다.\n- 새 변수 추가하기: \"변수 추가\" 버튼을 클릭합니다. 변수의 키와 값을 입력할 수 있는 필드가 표시됩니다.\n- FTP 상세 정보 입력하기: \"키\" 필드에 변수 이름(예: FTP_USERNAME)을 입력합니다. \"값\" 필드에 Hostinger에서 가져온 해당 값 입력합니다. 값이 안전하게 유지되도록 \"변수 가리기\" 옵션이 선택되어 있는지 확인합니다. FTP_PASSWORD 및 FTP_SERVER에 대해서도 이 과정을 반복합니다.\n- 변수 저장하기: 각 변수를 저장하려면 \"변수 추가\" 버튼을 클릭합니다. 모든 변수를 추가한 후 .gitlab-ci.yml 파일에서 사용할 수 있으며 안전하게 보호됩니다.\n\n![이미지](/assets/img/2024-06-19-ImplementingCICDforReactAppswithGitLabandHostingerAStep-by-StepGuide_3.png)\n\n이 변수들은 대소문자를 구분하며 .gitlab-ci.yml 파일에서 사용되는 변수와 정확히 일치해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n거의 다 왔어요, 당신의 CI/CD 파이프라인이 준비되었습니다!\n\n이 튜토리얼에서는 React 애플리케이션을 위한 GitLab 및 Hostinger를 사용하여 CI/CD 파이프라인을 설정하는 과정을 안내했습니다. 우리는 빌드 및 배포 단계를 정의하는 .gitlab-ci.yml 파일을 만드는 방법, Hostinger에서 FTP 세부 정보를 가져오는 방법, 그리고 이러한 세부 정보를 GitLab의 시크릿 변수로 안전하게 설정하는 방법을 배웠습니다.\n\n이 설정을 통해 GitLab 저장소의 주 브랜치에 푸시할 때마다 자동 빌드 및 배포 프로세스가 트리거되어 Hostinger 사이트가 항상 최신 변경 사항과 함께 업데이트됨이 보장됩니다. 이렇게 하면 배포 프로세스를 자동화할 뿐만 아니라 수동 배포로 발생할 수 있는 오류 위험을 줄일 수도 있습니다.\n\n성공적인 CI/CD 파이프라인의 핵심은 정기적인 테스트와 모니터링입니다. 항상 GitLab에서 파이프라인 실행 로그를 확인하여 모든 것이 원활히 동작하는지 확인하세요. 즐거운 코딩하세요! 🙌\n\n<div class=\"content-ad\"></div>\n\n의견이나 질문이 있으시면 답글을 남겨주시거나 연락해주세요. 😊","ogImage":{"url":"/assets/img/2024-06-19-ImplementingCICDforReactAppswithGitLabandHostingerAStep-by-StepGuide_0.png"},"coverImage":"/assets/img/2024-06-19-ImplementingCICDforReactAppswithGitLabandHostingerAStep-by-StepGuide_0.png","tag":["Tech"],"readingTime":4},{"title":"렌더링 전략 모든 React 개발자가 알아야 할 것들","description":"","date":"2024-06-19 23:51","slug":"2024-06-19-RenderingStrategiesEveryReactDeveloperShouldKnow","content":"\n\n\n![Image](/assets/img/2024-06-19-RenderingStrategiesEveryReactDeveloperShouldKnow_0.png)\n\n## 소개:\n\nReact는 현대 웹 개발의 핵심입니다. 최대한 효과적으로 활용하려면 복잡한 렌더링 전략을 이해하고 사용해야 합니다. 이 글에서는 이러한 전략을 보여드릴 것입니다.\n\n이러한 전략은 React 개발자가 더 빠르고 효율적인 앱을 만들 수 있도록 돕습니다. 개발을 쉽게 만들어주고 사용자에게 더 나은 경험을 제공합니다. 얼마나 많은 경험이 있든, 이러한 전략들은 여러분을 도와줄 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n## 렌더링 방법 이해하기\n\nReact의 렌더링 프로세스는 UI를 효율적으로 업데이트하는 방법입니다. 두 가지 주요 단계가 있습니다: 렌더 및 커밋.\n\n![이미지](/assets/img/2024-06-19-RenderingStrategiesEveryReactDeveloperShouldKnow_1.png)\n\n렌더 단계\n\n<div class=\"content-ad\"></div>\n\n렌더 단계는 React가 가상 UI를 구축하는 렌더링의 첫 부분입니다. 이 단계에는 DOM 변경이나 데이터 가져오기와 같은 부작용이 없습니다. 이 단계에는 두 가지 주요 단계가 있습니다:\n\n- 가상 DOM 생성: 컴포넌트의 상태나 props가 변경될 때 React는 새 가상 DOM 트리를 생성합니다.\n- 차이 비교: React는 새 가상 DOM 트리와 현재 피버 트리를 비교(se)합니다. 이 프로세스에서는 새 가상 DOM이 이전 것과 비교했을 때 무엇이 변경되었는지를 결정합니다.\n- 작업 단위: 피버 노드(Fiber nodes)는 작업 단위를 나타냅니다. 각 피버 노드는 React 엘리먼트(컴포넌트 또는 DOM 엘리먼트)에 해당하며, 컴포넌트의 상태, props 및 기타 메타데이터 정보를 포함합니다.\n\n커밋 단계\n\n이 단계에서는 렌더 단계 중에 플래그 처리된 변경 사항을 사용자에게 최신 UI 상태를 표시하기 위해 실제 DOM에 적용합니다.\n\n<div class=\"content-ad\"></div>\n\n- DOM 변경 이전 단계: DOM 변경 이전에 실행해야 하는 부작용들이 여기서 처리됩니다.\n- DOM 변경 단계: Fiber 트리에서 식별된 변경 사항에 따라 실제 DOM 업데이트가 적용됩니다.\n- 레이아웃 단계: DOM 변경 이후에 실행해야 하는 부작용들이 이 단계에서 처리됩니다.\n\n커밋 단계는 동기적으로 이루어지며 직접적인 DOM 조작을 포함하며 이로 인해 부작용이 발생할 수 있습니다.\n\n주요 개념:\n\n- Fiber 아키텍처: React의 Fiber 아키텍처는 조각 단위로 렌더링할 수 있게 합니다. 이는 React를 더 효율적으로 만들어주며 메인 스레드를 차단하지 않고 대규모 업데이트를 처리할 수 있습니다.\n- 동시 모드: React 18에서 동시 모드가 도입되어 React가 동시에 여러 작업을 처리할 수 있습니다. 이로써 사용자 경험을 더 부드럽게 만들어주며 중요하지 않은 작업을 일시 중단하고 긴급한 업데이트에 집중할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n아래는 Markdown 형식으로 테이블 태그가 변경되었습니다.\n\n\n![이미지](/assets/img/2024-06-19-RenderingStrategiesEveryReactDeveloperShouldKnow_2.png)\n\n주요 포인트:\n\n1. 동적 콘텐츠 로딩: CSR은 전체 페이지 새로고침 없이 동적으로 콘텐츠를 로드할 수 있습니다.\n\n2. 향상된 사용자 상호작용: 렌더링이 클라이언트 측에서 발생하기 때문에 상호작용이 더 반응적일 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n3. SEO 도전: 검색 엔진은 JavaScript에 크게 의존하는 CSR 콘텐츠를 색인화하는 데 어려움을 겪을 수 있습니다.\n\n4. 초기로딩 시간: CSR은 브라우저가 콘텐츠를 렌더링하기 전에 JavaScript를 다운로드하고 실행해야 하므로 초기 로딩 시간이 느려질 수 있습니다.\n\n예시:\n\n```js\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction App() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch('https://api.example.com/data')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  if (!data) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>{data.title}</h1>\n      <p>{data.content}</p>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n<div class=\"content-ad\"></div>\n\n이 예시에서:\n\n- useEffect 훅은 컴포넌트가 마운트될 때 API에서 데이터를 가져옵니다.\n- 상태(data)가 가져온 데이터로 업데이트되고, 컴포넌트가 다시 렌더링되어 그것을 보여줍니다.\n- 데이터가 가져와질 때까지 초기 콘텐츠로 표시되는 것은 로딩 메시지입니다.\n\n장점:\n\n- 상호 작용 요소로 풍부한 사용자 경험.\n- 단일 페이지 애플리케이션(SPAs)을 위한 효율적인 데이터 가져오기 및 렌더링.\n\n<div class=\"content-ad\"></div>\n\n단점:\n\n- 첫 페이지가 로딩하는 데 시간이 걸립니다.\n- 서버 측 렌더링 또는 사전 렌더링 없이 SEO를 하는 것이 어렵습니다.\n\n## 서버 측 렌더링\n\n서버 측 렌더링(SSR)은 서버가 페이지의 HTML을 생성하고 클라이언트에게 보내는 기술입니다. 이 접근 방식은 서버에서 완전히 렌더링된 페이지를 직접 제공함으로써 웹 앱의 성능과 SEO를 개선합니다.\n\n<div class=\"content-ad\"></div>\n\n아래는 테이블 태그를 Markdown 형식으로 변경하신 것입니다.\n\nKey Points:\n\n1. 향상된 SEO: 컨텐츠가 서버에서 완전히 렌더링되므로 검색 엔진이 페이지를 쉽게 크롤링하고 색인화할 수 있습니다.\n\n2. 초기 로드 속도 향상: 사용자들은 첫 요청 시 완전히 렌더링된 페이지를 받아들이므로 CSR에 비해 초기 로드가 더 빠를 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n3. Dynamic Content: SSR는 동적 콘텐츠를 처리할 수 있어서 페이지를 요청할 때마다 최신 정보를 제공합니다.\n\n예시:\n\n```js\nconst express = require('express');\nconst fetch = require('node-fetch');\nconst React = require('react');\nconst ReactDOMServer = require('react-dom/server');\n\nconst app = express();\n\napp.get('/', async (req, res) => {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n\n  const appString = ReactDOMServer.renderToString(<Home data={data} />);\n\n  const html = `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Server-Side Rendering with Express</title>\n      </head>\n      <body>\n        <div id=\"root\">${appString}</div>\n        <script>\n          window.__INITIAL_DATA__ = ${JSON.stringify(data)}\n        </script>\n        <script src=\"/client.js\"></script>\n      </body>\n    </html>\n  `;\n\n  res.send(html);\n});\n\napp.listen(3000, () => {\n  console.log('서버가 http://localhost:3000에서 실행 중입니다.');\n});\n```\n\n<div class=\"content-ad\"></div>\n\n- 서버 설정: 예제는 Express 프레임워크를 사용하여 서버를 설정합니다. 루트 URL(`/`)로 요청이 들어오면, 외부 API에서 데이터를 가져옵니다.\n- 데이터 가져오기: 서버는 node-fetch를 사용하여 API 엔드포인트(https://api.example.com/data)로 HTTP 요청을 보냅니다. 가져온 데이터는 JSON 형식으로 변환됩니다.\n- React 컴포넌트 렌더링: 서버는 ReactDOMServer.renderToString을 사용하여 Home React 컴포넌트를 HTML 문자열로 렌더링하고, 가져온 데이터를 prop으로 전달합니다.\n- HTML 응답 보내기: 서버는 HTML 템플릿을 작성하여 렌더링된 React 컴포넌트를 root ID가 있는 div 안에 삽입합니다. 또한 클라이언트 측 데이터를 초기화하고 클라이언트 측 JavaScript 파일(client.js)을 로드하기 위한 스크립트를 포함합니다.\n- 클라이언트 측 수분화: 브라우저가 HTML을 수신하면 클라이언트 측 JavaScript(client.js)가 서버에서 렌더링된 HTML을 수분화하여 React 컴포넌트가 상호작용할 수 있게 합니다.\n\n장점:\n\n- 사전 렌더링된 HTML로 SEO가 유리해집니다.\n- 더 빠른 로딩 속도.\n- 페이지가 항상 최신 상태를 유지합니다.\n\n단점:\n\n<div class=\"content-ad\"></div>\n\n- 각 요청이 처리되는 데 더 오래 걸릴 수 있습니다.\n- CSR(Clinet-Side Rendering)을 사용하는 것보다 페이지 로드에 더 오랜 시간이 소요될 수 있습니다.\n- 정적 렌더링보다 설정 및 유지 관리가 복잡합니다.\n\n## 스트리밍 렌더링\n\n스트리밍 렌더링은 서버가 HTML의 일부를 클라이언트에게 가능한 즉시 전송하는 기술입니다. 이를 통해 브라우저가 페이지를 렌더링하기 시작함으로써 웹 애플리케이션의 성능이 향상됩니다.\n\n![Rendering Strategies Every React Developer Should Know](/assets/img/2024-06-19-RenderingStrategiesEveryReactDeveloperShouldKnow_4.png)\n\n<div class=\"content-ad\"></div>\n\n중요한 포인트:\n\n1. 느껴지는 성능 개선: 사용자는 나머지 부분이 렌더링되고 스트리밍되는 동안 페이지 일부와 상호 작용을 시작할 수 있습니다.\n\n2. 점진적 렌더링: 페이지의 핵심 부분이 먼저 전송되고 렌더링되어 사용자 경험을 향상시킵니다.\n\n3. 첫 번째 바이트로의 시간 단축(TTFB): 스트리밍을 통해 첫 번째 바이트로의 시간을 단축시켜 초기 로드가 빠르게 느껴질 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nReact 18의 스트리밍 렌더링은 서버 사이드 렌더링을 위해 새로운 pipeToNodeWritable 메소드를 사용합니다. 이는 HTML 부분을 준비되는 대로 클라이언트로 보냅니다.\n\n```js\nconst express = require('express');\nconst React = require('react');\nconst ReactDOMServer = require('react-dom/server');\nconst { Writable } = require('stream');\n\nconst app = express();\n\nfunction Home({ data }) {\n  return (\n    <div>\n      <h1>{data.title}</h1>\n      <p>{data.content}</p>\n    </div>\n  );\n}\n\napp.get('/', async (req, res) => {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n\n  const htmlStart = `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Streaming Rendering</title>\n      </head>\n      <body>\n        <div id=\"root\">\n  `;\n\n  const htmlEnd = `\n        </div>\n        <script>\n          window.__INITIAL_DATA__ = ${JSON.stringify(data)}\n        </script>\n        <script src=\"/client.js\"></script>\n      </body>\n    </html>\n  `;\n\n  res.write(htmlStart);\n\n  const writable = new Writable({\n    write(chunk, encoding, callback) {\n      res.write(chunk, encoding, callback);\n    },\n    final(callback) {\n      res.write(htmlEnd);\n      res.end();\n      callback();\n    },\n  });\n\n  ReactDOMServer.pipeToNodeWritable(<Home data={data} />, writable);\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on http://localhost:3000');\n});\n```\n\n작동 방식:\n\n<div class=\"content-ad\"></div>\n\n- 서버 측: 초기 HTML을 스트리밍하기 위해 ReactDOMServer.pipeToNodeWritable을 사용합니다.\n- 클라이언트 측: 클라이언트는 HTML의 일부를 도착하는 대로 렌더링을 시작합니다.\n\n장점:\n\n- 사용자가 페이지 일부와 상호 작용할 수 있습니다.\n- 핵심 콘텐츠가 먼저 표시되어 사용자 경험이 향상됩니다.\n- 더 많은 콘텐츠가 로드됨에 따라 사용자 인터페이스가 점진적으로 향상됩니다.\n- 페이지 전체를 한꺼번에 렌더링할 필요가 없기 때문에 서버 및 클라이언트 리소스를 적게 사용합니다.\n- 검색 엔진이 콘텐츠를 더 빨리 찾을 수 있습니다.\n\n단점:\n\n<div class=\"content-ad\"></div>\n\n- Implementation은 전통적 렌더링보다 복잡합니다.\n- 올바른 렌더링을 보장하기 위해 종속성 및 스트리밍 순서를 관리해야 합니다.\n- 모든 브라우저나 네트워크에서 스트리밍할 수 있는 것은 아닙니다.\n- 비동기적인 성격 때문에 스트리밍 문제 해결이 더 어렵습니다.\n- 제대로 관리되지 않으면 서버 및 클라이언트 렌더링된 콘텐츠 사이에 차이가 있을 수 있습니다.\n\n## 정적 사이트 생성\n\n정적 사이트 생성은 HTML 페이지를 미리 렌더링하여 정적 파일로 제공하는 기술입니다. 이 접근 방식은 사전 렌더링된 HTML을 제공함으로써 성능을 향상시키고 서버 부하를 줄이며 보안을 강화할 수 있습니다.\n\n주요 포인트:\n\n<div class=\"content-ad\"></div>\n\n1. 성능: 페이지가 사전 렌더링되어 정적 파일로 제공되므로 로딩 속도가 매우 빠릅니다.\n\n2. SEO: 사전 렌더링된 HTML은 검색 엔진이 쉽게 크롤링하여 SEO를 개선합니다.\n\n3. 보안: 정적 파일을 제공함으로써 서버 렌더링된 페이지와 비교하여 공격 표면이 줄어듭니다.\n\n예시:\n\n<div class=\"content-ad\"></div>\n\n다음은 Next.js를 사용한 SSG의 예시입니다.\n\n```js\n// pages/index.js\nimport React from 'react';\n\nfunction Home({ data }) {\n  return (\n    <div>\n      <h1>{data.title}</h1>\n      <p>{data.content}</p>\n    </div>\n  );\n}\n\nexport async function getStaticProps() {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n\n  return {\n    props: {\n      data,\n    },\n  };\n}\n\nexport default Home;\n```\n\n이 예제에서는:\n\n• getStaticProps 함수는 데이터를 빌드 시간에 가져오고 서버에서 실행됩니다.\n\n<div class=\"content-ad\"></div>\n\n- 홈 컴포넌트로 전달된 데이터는 props를 통해 전달됩니다.\n\n- HTML은 빌드 시 생성되어 정적 파일로 제공됩니다.\n\n장점:\n\n- 정적 파일의 빠른 로드 시간.\n- 사전 렌더링된 HTML로 SEO 향상.\n- 더 빠른 서버와 안전한 데이터.\n\n<div class=\"content-ad\"></div>\n\n**단점:**\n\n- 내용 변경에 대한 유연성이 부족합니다.\n- 우선 구축해야 합니다.\n- 대규모 사이트의 경우 빌드 시간이 더 오래 걸릴 수 있습니다.\n\n## 증분 정적 재생\n\n증분 정적 재생(Incremental Static Regeneration, ISR)은 사이트를 빌드하고 배포한 후 정적 페이지를 업데이트할 수 있는 기능입니다. 이 접근 방식은 정적 사이트 생성의 이점과 내용을 업데이트할 수 있는 유연성을 결합합니다.\n\n<div class=\"content-ad\"></div>\n\n중요한 점:\n\n1. 요청 시 업데이트: 데이터 변경 시 전체 사이트 재구축이 필요하지 않고 페이지를 증분적으로 업데이트할 수 있습니다.\n\n2. 향상된 성능: 정적 컨텐츠를 제공하면서 특정 페이지를 새로 고침하고 업데이트할 수 있는 기능을 제공합니다.\n\n3. 유연성: 정적 사이트의 속도와 동적 콘텐츠 업데이트를 처리할 수 있는 능력을 결합합니다.\n\n<div class=\"content-ad\"></div>\n\n예시:\n\n다음은 ISR을 보여주는 Next.js 사용 예시입니다:\n\n```js\n// pages/index.js\nimport React from 'react';\n\nfunction Home({ data }) {\n  return (\n    <div>\n      <h1>{data.title}</h1>\n      <p>{data.content}</p>\n    </div>\n  );\n}\n\nexport async function getStaticProps() {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n\n  return {\n    props: {\n      data,\n    },\n    revalidate: 10, // 최대 10초마다 페이지를 다시 생성합니다.\n  };\n}\n\nexport default Home;\n```\n\n이 예시에서:\n\n<div class=\"content-ad\"></div>\n\n- getStaticProps 함수는 빌드 시간에 데이터를 가져옵니다.\n- revalidate 속성은 다시 유효화 기간(예: 10초)을 지정하여 해당 기간 동안 최대 한 번 페이지가 다시 생성되도록 하여 요청이 들어오면.\n- 생성된 정적 HTML은 완전한 사이트 재구성 없이 새 데이터로 업데이트할 수 있습니다.\n\n장점:\n\n- 빠르고 유연합니다.\n- HTML로 인한 SEO 향상.\n- 빈번한 재구성 요구를 줄여 시간과 리소스를 절약합니다.\n\n단점:\n\n<div class=\"content-ad\"></div>\n\n- 정적 사이트 생성보다 설정하는 것이 더 복잡합니다.\n- 최신 콘텐츠가 사용자에게 즉시 표시되지 않을 수 있습니다.\n\n## 재수전\n\nReact에서 재수전은 서버에서 React 애플리케이션을 렌더링하여 초기 HTML을 생성한 다음 React가 클라이언트에서 페이지를 상호작용하도록 만드는 것을 의미합니다. 이 과정을 통해 사용자가 빠르게 시작하고 JavaScript가 준비되면 페이지와 상호 작용할 수 있도록 합니다.\n\n주요 요점:\n\n<div class=\"content-ad\"></div>\n\n1. 서버 측 렌더링 (SSR): 서버가 초기 HTML을 생성합니다.\n\n2. 클라이언트 측 재가동: 클라이언트 측 React 코드가 페이지를 대화식으로 만듭니다.\n\n예시:\n\n다음은 React를 사용하여 재가동을 보여주는 간단한 예시입니다:\n\n<div class=\"content-ad\"></div>\n\n서버 측\n\n```js\nconst express = require('express');\nconst React = require('react');\nconst ReactDOMServer = require('react-dom/server');\nconst fs = require('fs');\nconst path = require('path');\n\nconst App = require('./App').default;\n\nconst app = express();\n\napp.use(express.static(path.resolve(__dirname, 'build')));\n\napp.get('*', (req, res) => {\n  const appString = ReactDOMServer.renderToString(<App />);\n\n  const indexFile = path.resolve(__dirname, 'build', 'index.html');\n  fs.readFile(indexFile, 'utf8', (err, data) => {\n    if (err) {\n      console.error('에러 발생:', err);\n      return res.status(500).send('앗!');\n    }\n\n    return res.send(\n      data.replace('<div id=\"root\"></div>', `<div id=\"root\">${appString}</div>`)\n    );\n  });\n});\n\napp.listen(3000, () => {\n  console.log('서버가 http://localhost:3000에서 실행 중입니다.');\n});\n```\n\n클라이언트 측\n\n```js\n// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.hydrate(<App />, document.getElementById('root'));\n```\n\n<div class=\"content-ad\"></div>\n\n작동 방식:\n\n1. 서버 측: 서버는 ReactDOMServer.renderToString을 사용하여 초기 페이지 로드를 위한 HTML을 생성합니다. 이 HTML은 index.html 템플릿에 삽입됩니다.\n\n2. 클라이언트 측: 클라이언트가 페이지를 로드할 때, ReactDOM.hydrate가 정적 HTML을 가져와 상호 작용할 수 있도록 이벤트 리스너를 부착합니다.\n\n장점:\n\n<div class=\"content-ad\"></div>\n\n- 서버에서 미리 렌더링된 HTML로 인한 빠른 초기로드 시간.\n- 미리 렌더링된 콘텐츠로 개선된 SEO.\n- 클라이언트 측 JavaScript가 로드된 후 완전한 상호작용 가능.\n\n단점:\n\n- JavaScript가 로드될 때까지 상호작용이 지연될 수 있음.\n- 서버 및 클라이언트에서 렌더링된 콘텐츠가 일치하는지 확인하기 어려울 수 있음.\n\n## 부분 유기화\n\n<div class=\"content-ad\"></div>\n\n부분 수분화는 웹 개발에서 일부 정적 HTML 페이지만 상호 작용적으로 만드는 기술입니다. 이 방식은 페이지의 일부만 상호 작용을 요구하는 부분에 대해 JavaScript를로드하고 실행해 성능을 향상시키며, 전반적인 JavaScript 페이로드를 줄입니다.\n\n![Rendering Strategies Every React Developer Should Know](/assets/img/2024-06-19-RenderingStrategiesEveryReactDeveloperShouldKnow_5.png)\n\n주요 포인트:\n\n- 선택적 상호 작용: 페이지의 일부만로드됩니다.\n- 더 빠른 성능: 덜 JavaScript를로드 및 실행하므로 페이지가 더 빨리로드되고 더 적은 리소스를 사용합니다.\n- 점진적 향상: 페이지가 잘 작동하고 사용하기 쉬운지 확인합니다.\n\n<div class=\"content-ad\"></div>\n\n예시:\n\n리액트를 사용하여 부분 하이드레이션을 보여주는 예시입니다:\n\n클라이언트 측\n\n```js\n// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nif (rootElement.hasChildNodes()) {\n  ReactDOM.hydrate(<App />, rootElement);\n} else {\n  ReactDOM.render(<App />, rootElement);\n}\n```\n\n<div class=\"content-ad\"></div>\n\nReact Components (App.js와 InteractiveComponent.js)\n\n```js\n// src/App.js\nimport React from 'react';\nimport InteractiveComponent from './InteractiveComponent';\n\nfunction App() {\n  return (\n    <div>\n      <h1>정적 콘텐츠</h1>\n      <InteractiveComponent />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n```js\n// src/InteractiveComponent.js\nimport React, { useState } from 'react';\n\nfunction InteractiveComponent() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>클릭하세요</button>\n      <p>{count}</p>\n    </div>\n  );\n}\n\nexport default InteractiveComponent;\n```\n\n작동 방식:\n\n<div class=\"content-ad\"></div>\n\n- 서버 측: 서버는 ReactDOMServer.renderToString을 사용하여 초기 페이지로드를 위한 HTML을 생성합니다. 이 HTML은 index.html 템플릿에 삽입됩니다.\n- 클라이언트 측: 클라이언트가 페이지를 로드할 때, ReactDOM.hydrate는 필요한 인터랙션이 필요한 페이지 부분만 적용합니다.\n\n장점:\n- 더 작은 JavaScript 페이로드로 인해 더 빠른로드 시간.\n- 페이지의 필요한 부분만 적용.\n- 사용자들은 더 많은 인터랙션을 즐깁니다.\n\n단점:\n\n<div class=\"content-ad\"></div>\n\n- 전체 페이지 하이드레이션보다 더 복잡합니다.\n- 주의 깊게 관리해야 합니다.\n\n## 점진적 하이드레이션\n\n점진적 하이드레이션은 웹 페이지의 다른 부분이 하나씩 로드되는 기술입니다. 이 방법은 필수 부분의 하이드레이션을 우선시하여 비필수 부분의 하이드레이션을 지연시킴으로써 성능을 향상시킵니다.\n\n주요 포인트:\n\n<div class=\"content-ad\"></div>\n\n- 점진적으로 수분을 보충하는 것: 페이지의 일부는 점차적으로 로드됩니다.\n- 우선순위를 둔 상호작용: 중요 구성 요소가 먼저 수분 보충됩니다.\n- 성능 최적화: 초기 JavaScript 페이로드를 줄이고 페이지 로드 시간을 개선합니다.\n\n예시:\n\nReact 및 Intersection Observer API를 사용하여 점진적 수분 보충을 보여주는 예시:\n\n```js\n// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nfunction hydrateComponent(selector, Component) {\n  const element = document.querySelector(selector);\n  if (element && element.hasChildNodes()) {\n    ReactDOM.hydrate(<Component />, element);\n  } else if (element) {\n    ReactDOM.render(<Component />, element);\n  }\n}\n\nhydrateComponent('#root', App);\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n// src/App.js\nimport React, { useEffect } from 'react';\n\nfunction App() {\n  useEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          import('./ProgressiveComponent').then(({ default: Component }) => {\n            hydrateComponent('#progressive', Component);\n          });\n          observer.disconnect();\n        }\n      });\n    });\n\n    observer.observe(document.querySelector('#progressive'));\n\n    return () => observer.disconnect();\n  }, []);\n\n  return (\n    <div>\n      <h1>Static Content</h1>\n      <div id=\"progressive\">Loading...</div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n```js\n// src/ProgressiveComponent.js\nimport React, { useState } from 'react';\n\nfunction ProgressiveComponent() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n      <p>{count}</p>\n    </div>\n  );\n}\n\nexport default ProgressiveComponent;\n```\n\n동작 방식:\n\n- 서버 측: 서버는 ReactDOMServer.renderToString을 사용하여 초기 HTML을 생성합니다.\n- 클라이언트 측: ReactDOM.hydrate은 주 응용 프로그램을 즉시 채웁니다.\n- 점진적 구성 요소 수화: Intersection Observer는 ProgressiveComponent가 뷰포트에 진입할 때 그것을 수화합니다.\n\n<div class=\"content-ad\"></div>\n\n장점:\n\n- 필수 구성 요소만 먼저 로드하여 로드 시간을 개선했습니다.\n- 사용자들이 더 나은 경험을 할 수 있습니다.\n- Javascript 파일이 줄어 듭니다.\n\n단점:\n\n- 전체 페이지 가득 채우기보다 복잡합니다.\n- 문제를 피하기 위해 신중하게 관리해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n## 동적 렌더링\n\n동적 렌더링은 사용자가 원하는 내용을 기반으로 웹 페이지를 만드는 방법입니다. 이 방법은 크롤러와 사용자에게 서로 다른 내용을 제공함으로써 웹 사이트를 최적화하여 사용자와 검색 엔진을 위한 최적의 서비스를 제공합니다.\n\n![랜더링 전략](/assets/img/2024-06-19-RenderingStrategiesEveryReactDeveloperShouldKnow_6.png)\n\n주요 포인트:\n\n<div class=\"content-ad\"></div>\n\n1. 하이브리드 접근 방식: 서버 측 및 클라이언트 측 렌더링을 결합하여 성능 및 SEO를 최적화합니다.\n\n2. SEO 최적화: 사전 렌더링된 HTML을 검색 엔진에 제공하여 크롤링 및 인덱싱을 개선합니다.\n\n3. 사용자 경험: 사용자가 사이트와 완전히 상호 작용할 수 있습니다.\n\n예시:\n\n<div class=\"content-ad\"></div>\n\nNode.js와 Puppeteer를 사용한 동적 렌더링 예제가 있어요:\n\n```js\nconst express = require('express');\nconst puppeteer = require('puppeteer');\n\nconst app = express();\n\napp.get('*', async (req, res) => {\n  const userAgent = req.headers['user-agent'];\n  \n  if (/Googlebot|Bingbot|Baiduspider|YandexBot/i.test(userAgent)) {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.goto(`http://localhost:3000${req.originalUrl}`, {\n      waitUntil: 'networkidle2'\n    });\n    const html = await page.content();\n    await browser.close();\n    res.send(html);\n  } else {\n    res.sendFile(__dirname + '/index.html');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('서버가 http://localhost:3000에서 실행 중입니다.');\n});\n```\n\n```js\n// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n```js\n// src/App.js\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/data')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  if (!data) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>{data.title}</h1>\n      <p>{data.content}</p>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n<div class=\"content-ad\"></div>\n\nAPI 엔드포인트 (Node.js + Express)\n\n```js\nconst express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  res.json({\n    title: 'Dynamic Rendering Example',\n    content: 'This content is fetched from the server.'\n  });\n});\n\napp.listen(3001, () => {\n  console.log('API 서버가 http://localhost:3001에서 실행 중입니다.');\n});\n```\n\n이 예제에서:\n\n- 서버는 사용자 에이전트 헤더를 확인하여 요청이 검색 엔진 봇에서 왔는지 확인합니다.\n- 요청이 봇에서 왔다면, Puppeteer가 사전 렌더링된 HTML을 생성하고 반환합니다.\n- 요청이 사용자에서 왔다면, 클라이언트 렌더링된 HTML이 제공되며, React 애플리케이션이 API 엔드포인트에서 데이터를 가져옵니다.\n\n<div class=\"content-ad\"></div>\n\n장점:\n\n- 서버 측 및 클라이언트 측 렌더링을 결합합니다.\n- 검색 엔진 봇에 사전 렌더링된 콘텐츠를 제공하여 SEO를 최적화합니다.\n- 사용자가 상호 작용할 수 있습니다.\n\n단점:\n\n- 서버 설치 및 유지 관리가 더 복잡합니다.\n- 프리 렌더링을 위해 headless 브라우저가 필요하기 때문에 더 많은 리소스를 사용합니다.\n- 사용자 에이전트 감지 및 동적 콘텐츠 생성에 주의를 기울여야 합니다.\n\n<div class=\"content-ad\"></div>\n\n## 결론\n\n웹 개발의 빠르게 변화하는 세계에서는 웹 페이지를 멋지게 보이고 빠르게 로드하기 위한 다양한 방법을 이해하고 활용하는 것이 중요합니다. 각 렌더링 방법에는 다양한 장단이 있습니다.\n\n중요 사항:\n\n1. 클라이언트 측 렌더링 (CSR)은 사용자에게는 훌륭하지만 SEO 및 로딩 시간에 대비하여 다소 어려울 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n2. 서버 사이드 렌더링 (SSR)은 초기 로드 속도를 향상시키고 SEO를 개선하지만 서버 부하와 복잡성을 증가시킬 수 있습니다.\n\n3. 스트리밍 렌더링은 HTML을 점진적으로 클라이언트로 전송하여 인식된 성능을 향상시킵니다.\n\n4. 정적 사이트 생성 (SSG)은 빠른 로드 시간과 향상된 보안을 제공하여 변경되지 않는 콘텐츠에 이상적입니다.\n\n5. 점진적 정적 재생성 (ISR)은 정적 및 동적 콘텐츠 업데이트의 이점을 결합하여 성능과 유연성을 균형 있게 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n6. 리하이드레이션은 서버에서 렌더링된 HTML과 클라이언트 측 상호 작용을 연결하여 부드러운 사용자 경험을 제공합니다.\n\n7. 부분 하이드레이션 및 점진적 하이드레이션은 필요에 따라 페이지의 일부를 선택적으로 상호 작용할 수 있도록 최적화하여 성능을 향상시킵니다.\n\n9. 동적 렌더링은 사전 렌더링된 콘텐츠를 검색 엔진 최적화를 위해 봇에 제공하면서 사용자에게 동적 콘텐츠를 제공하여 향상된 경험을 제공합니다.\n\n적절한 렌더링 전략은 앱의 요구 사항, 성능 및 사용자 경험에 따라 다릅니다. 이러한 기술을 사용함으로써 개발자들은 사용자와 검색 엔진에게 잘 작동하는 사용자 친화적인 웹 앱을 만들 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nWeb 기술이 발전함에 따라, 개발자들은 웹 앱을 빠르게 실행할 수 있는 최상의 방법을 항상 파악해야 합니다. 이러한 방법을 활용하여 훌륭한 디지털 경험을 만들어보세요.","ogImage":{"url":"/assets/img/2024-06-19-RenderingStrategiesEveryReactDeveloperShouldKnow_0.png"},"coverImage":"/assets/img/2024-06-19-RenderingStrategiesEveryReactDeveloperShouldKnow_0.png","tag":["Tech"],"readingTime":20}],"page":"52","totalPageCount":154,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":2},"__N_SSG":true}