{"pageProps":{"posts":[{"title":"2024년 Angular 18, React 19 최신 업데이트 공개","description":"","date":"2024-06-22 14:36","slug":"2024-06-22-1819in24UnveilingAngularReactsLatestUpdates","content":"\n\n👨‍💻 안녕하세요! 전문 개발자로서 웹 개발에 열정을 가지고 있는 Senior Full Stack 엔지니어입니다. 저는 Angular 및 React 프레임워크와 광범위하게 작업한 기회가 있었습니다. 웹 성능을 향상시키는 최신 기능을 탐험하는 것은 항상 흥미로운 일이었습니다.\n\n![](/assets/img/2024-06-22-1819in24UnveilingAngularReactsLatestUpdates_0.png)\n\n# 빠른 소개:\n\n만약 이러한 웹 프레임워크가 무엇인지에 대해 생소하다면,\n\n<div class=\"content-ad\"></div>\n\nAngular: Angular은 Google에서 지원하는 강력한 프론트엔드 프레임워크로, 효율적인 웹 애플리케이션을 구축하기 위한 다양한 도구를 제공합니다.\n\nReact: Facebook이 만든 React는 재사용 가능한 컴포넌트와 효율적인 렌더링 기술을 통해 상호 작용하는 사용자 인터페이스를 구축하는 것을 단순화한 JavaScript 라이브러리입니다.\n\nAngular 18과 React 19의 최신 릴리스로 흥미로운 발전이 있고, 그들의 매력적인 기능들을 탐험하는 것을 곧 기대하고 있습니다.\n\n# Angular 18\n\n<div class=\"content-ad\"></div>\n\nAngular을 처음 사용해보는 분들을 위한 안내입니다. Angular의 홈페이지인 Home • Angular은 지금은 여러분의 첫 걸음을 시작할 수 있는 포괄적이고 가치 있는 자원으로 자리 잡았습니다. Angular 개발의 모든 면을 탐험하고 학습하기에 적합한 다양한 정보, 자습서 및 안내서가 제공됩니다.\n\n최신 업그레이드에 대해 자세히 살펴보고, 특히 Angular에 처음 접하시는 분들을 위해 이러한 기능들을 일반적인 방식으로 설명해보겠습니다.\n\n## 🟫변경 탐지 개선\n\nZone.js는 비동기 작업을 관리하여 Angular에서 자동으로 변경 탐지를 가능하게 합니다.\n\n<div class=\"content-ad\"></div>\n\n앵귤러 사용법:\n\n- 비동기 API를 패치합니다.\n- 변경 감지를 트리거합니다.\n\n단점:\n\n- 성능 부담\n- 복잡한 디버깅\n- 라이브러리 호환성\n\n<div class=\"content-ad\"></div>\n\n예시:\n\n```js\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-article',\n  template: `\n    <div>\n      <p>Article이 발행되었습니까?: { isArticlePublished }</p>\n      <button (click)=\"publishArticle()\">기사 발행</button>\n    </div>\n  `\n})\nexport class ArticleComponent {\n  isArticlePublished = false;\n\n  publishArticle() {\n    setTimeout(() => {\n      this.isArticlePublished = true;\n    }, 1000);\n  }\n}\n```\n\n```js\nimport { Component, ChangeDetectorRef } from '@angular/core';\n\n@Component({\n  selector: 'app-article',\n  template: `\n    <div>\n      <p>Article이 발행되었습니까?: { isArticlePublished }</p>\n      <button (click)=\"publishArticle()\">기사 발행</button>\n    </div>\n  `\n})\nexport class ArticleComponent {\n  isArticlePublished = false;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  publishArticle() {\n    setTimeout(() => {\n      this.isArticlePublished = true;\n      this.cdr.detectChanges();  // 변경 감지를 수동으로 트리거합니다.\n    }, 1000);\n  }\n}\n```\n\nAngular 18에서는 Angular에서 zoneless 지원을 실험할 수 있습니다! 애플리케이션 부트스트랩에 provideExperimentalZonelessChangeDetection을 추가하기만 하면 됩니다:  \n\n<div class=\"content-ad\"></div>\n\n```js\n@Component({\n  ...\n  template: `\n    <h1>Hello from { name() }!</h1>\n    <button (click)=\"handleClick()\">With Zoneless</button>\n  `,\n})\nexport class App {\n  protected IsArticlePublished= signal('false');\n\n  handleClick() {\n    this.IsArticlePublished.set('true');\n  }\n}\n```\n\nAngular은 변경 감지를 최적화하기 위해 Zones를 사용하지만, Zones 없이도 신호 업데이트와 같은 적은 트리거로 작동할 수 있습니다.\n\n## 🟫Angular Material 3\n\nAngular Material은 Angular 애플리케이션에 대한 UI 컴포넌트 라이브러리로서 Google의 Material Design 명세를 구현합니다. 버튼, 입력란, 대화 상자, 내비게이션 패턴 등 재사용 가능하고 테스트된 UI 컴포넌트를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n이러한 구성 요소들은 Material Design 원칙을 준수하여 웹 애플리케이션을위한 일관된 그리고 매력적인 사용자 인터페이스를 제공하도록 설계되었습니다.\n\n참조: Angular Material UI 구성 요소 라이브러리\n\n## 🟫 미리보는 신호 API\n\n신호는 포함된 값에 대한 변경 사항이 있을 때 관심 있는 소비자에게 알림을 주는 값의 캡슐화입니다. 이들은 간단한 유형부터 복잡한 데이터 구조까지 다양한 데이터를 보유할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n신호의 값을 액세스하려면 해당 getter 함수를 호출해야 합니다. 이렇게 하면 Angular이 해당 사용 사항을 모니터링할 수 있습니다. 신호는 쓰기 가능하거나 읽기 전용 형태로 존재할 수 있습니다.\n\n참고: Signals • 개요 • Angular\n\n## 🟫지연 가능한 뷰\n\n구성 요소 템플릿에서 지연 가능한 뷰를 사용하면 구성 요소, 지시문, 파이프 및 관련 CSS와 같은 특정 종속성의로드를 지연시킬 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 기능은 템플릿의 일부를 @defer 블록으로 감싸서 해당 종속성이로드되어야 하는 조건을 정의하는 곳에 구현됩니다.\n\n```js\n@defer {\n  <articlereview-component />\n}\n```\n\n지연로드 가능한 뷰를 통해 개발자들은 쉽게 앱을 향상시키고 번들 크기를 줄일 수 있습니다.\n\n## 🟫이벤트 재생\n\n<div class=\"content-ad\"></div>\n\n사용자 이벤트(예: 클릭) 재생 가능성을 허용하여 수분화 로직이 완료되기 전에 페이지에서 발생한 이벤트를 다시 실행할 수 있습니다.\n\n예시\n\n대부분의 개발자가 일반적으로 이벤트 디스패치와 직접 상호 작용하지는 않지만, 이 문맥에서 이벤트 재생이 왜 가치 있는지 살펴봅시다. 기사를 읽는 웹사이트에서 상상해보세요. 우리는 가짜로로드 지연을 사용하여 네트워크 연결이 느린 시나리오를 시뮬레이션할 것입니다.\n\n페이지가 로드되는 동안이며 완전히 상호작용 가능하기 전에 사용자가 기사를 읽고 여러 기사에 댓글을 남기기로 결정했다면, 페이지가 아직 완전히 상호작용적이지 않은 경우(수분화되지 않은 경우), 이 사용자 동작은 손실될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n버전 18부터 Angular은 사용자 상호작용을 기록하기 위해 이벤트 디스패치를 도입했습니다. 페이지가 완전히 로드된 후, Angular은 이러한 이벤트를 재생하여 모든 댓글이 여러 개의 게시물에 성공적으로 제출되도록 보장합니다.\n\n```js\nbootstrapApplication(App, {\n  providers: [\n    provideClientHydration(withEventReplay())\n  ]\n});\n```\n\n## 🟫ng-content의 콘텐츠를 위한 후속 처리\n\n```js\n@Component({\n  selector: 'app-article',\n  template: `\n    <ng-content select=\".article\">게시물 이름</ng-content>\n\n    <ng-content>댓글이 없습니다</ng-content>\n  `,\n})\nexport class Article {}\n```\n\n<div class=\"content-ad\"></div>\n\n## 🟫통합 형태 컨트롤 상태 변경 이벤트\n\n내가 좋아하는 하나: Angular 폼의 FormControl, FormGroup 및 FormArray 클래스에는 이제 'events' 속성이 추가되었습니다.\n\n이 속성을 사용하면 폼 컨트롤과 관련된 이벤트 스트림을 구독할 수 있어 값 변경, 터치 상태, 원시 상태 및 전반적인 컨트롤 상태의 변경 사항을 모니터링할 수 있습니다.\n\n```js\nconst articleFeedbackControl = new FormControl<string|null>('article', Validators.required);\nnameControl.events.subscribe(event => {\n \n});\n```\n\n<div class=\"content-ad\"></div>\n\n## 🟫 라우트 리다이렉트 개선\n\nAngular v18에서는 리다이렉트 처리의 유연성을 향상하기 위해 redirectTo 속성이 이제 문자열을 반환하는 함수를 지원합니다.\n\n이를 통해 런타임 조건에 따라 보다 복잡한 리다이렉트 로직을 구현할 수 있습니다. 예를 들어, 동적 상태에 따라 리다이렉트해야 하는 경우 이 함수 내에 복잡한 로직을 정의할 수 있습니다:\n\n```js\nconst routes: Routes = [\n  { path: 'article/:articleId', component: ArticleComponent },\n  {\n    path: 'redirect-article',\n    redirectTo: ({ queryParams }) => {\n      const articleIdParam = queryParams['articleId'];\n      if (articleIdParam) {\n        return `/article/${articleIdParam}`;\n      } else {\n        // 오류 처리를 하거나 기본 경로로 리다이렉트할 수 있습니다\n        return `/not-found`;\n      }\n    }\n  },\n  { path: 'not-found', component: NotFoundComponent },\n];\n```\n\n<div class=\"content-ad\"></div>\n\n## 🟫 빌드 개선\n\nAngular 16에서는 esbuild 및 Vite와 같은 현대적인 도구를 활용한 새로운 응용 프로그램 빌더를 공개했습니다. 이 빌더는 Angular 17의 새로운 프로젝트에 대한 기본값이 되었습니다.\n\n새 빌드 시스템으로 이전하기 • Angular\n\n![이미지](/assets/img/2024-06-22-1819in24UnveilingAngularReactsLatestUpdates_1.png)\n\n<div class=\"content-ad\"></div>\n\n## 지금 React 19 기능에 대해 이야기해 봅시다\n\n![React 19](/assets/img/2024-06-22-1819in24UnveilingAngularReactsLatestUpdates_2.png)\n\n# React 19\n\n## 🟢 React 컴파일러\n\n<div class=\"content-ad\"></div>\n\n현재 React는 상태 변경 시 자동으로 다시 렌더링되지 않습니다. 이러한 다시 렌더링을 최적화하기 위해 개발자들은 보통 useMemo(), useCallback(), memo API를 수동으로 사용합니다.\n\nReact 팀은 해결책을 소개했습니다: React 컴파일러. 이 새로운 컴파일러는 다시 렌더링 관리를 자동화하는 데 설계되었습니다. React는 이제 자율적으로 상태를 업데이트하고 사용자 인터페이스를 새로 고칠 때 언제, 어떻게 할지 결정합니다.\n\n## 🟢Actions\n\n버전 19에서는 폼 작업 방식을 혁신할 것으로 약속된 Actions라는 흥미로운 새로운 기능이 도입될 예정입니다.\n\n<div class=\"content-ad\"></div>\n\n조치를 취하면 HTML `form/` 태그와 기능들을 심플하게 통합할 수 있어요. 말 그대로, 이제 Actions로 onSubmit 이벤트를 대체할 수 있고, HTML 폼 안에서 속성으로 활용할 수 있어요.\n\n```js\n\"use server\"\nconst submitArticle = async (articleData) => {\n    const newArticle = {\n        title: articleData.get('title'),\n        author: articleData.get('author'),\n        content: articleData.get('content')\n    };\n};\n\nconst ArticleForm= () => {\n    return <form action={submitArticle}>\n        <div>\n            <label>Article Name</label>\n            <input type=\"text\" name='title'/>\n        </div>\n        <div>\n            <label>Author Name</label>\n            <input type=\"text\" name=\"author\" />\n        </div>\n        <div>\n            <label>Content</label>\n            <input type=\"text\" name=\"content\" />\n        </div>\n        <button type='submit'>Submit</button>\n    </form>\n}\n\nexport default ArticleForm;\n```\n\n## 🟢문서 메타데이터\n\n‘title,’ ‘meta 태그,’ 및 ‘description’과 같은 컴포넌트들이 SEO를 최적화하고 접근성을 보장하는 데 중요한 역할을 합니다. React에서는 싱글 페이지 애플리케이션이 널리 사용되는 상황에서 다양한 경로에서 이러한 컴포넌트들을 관리하는 것이 복잡해질 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n현재 개발자들은 경로 전환이나 필요에 따라 메타데이터를 업데이트하기 위해 react-helmet와 같은 도구를 활용하거나 사용자 정의 코드를 작성하는 경우가 많습니다. 그러나 이러한 접근 방식은 반복적이고 SEO 요소(meta 태그 등)를 처리할 때 특히 오류 발생 가능성이 있습니다.\n\n현재:\n\n```js\nimport React, { useEffect } from 'react';\n\nconst ArticleHead = ({ title, description }) => {\n    useEffect(() => {\n        document.title = title;\n\n        const metaDescriptionTag = document.querySelector('meta[name=\"description\"]');\n        if (metaDescriptionTag) {\n            metaDescriptionTag.setAttribute('content', description);\n        }\n    }, [title, description]);\n\n    return null;\n};\n\nexport default ArticleHead;\n```\n\nReact 19 버전 변화:\n\n<div class=\"content-ad\"></div>\n\nReact 19에서는 React 컴포넌트 내에서 타이틀과 메타 태그를 직접 활용할 수 있습니다:\n\n```js\nimport React from 'react';\n\nconst HomePage = () => {\n  return (\n    <>\n      <title>Article Home Page - My Website</title>\n      <meta name=\"description\" content=\"다양한 주제에 대한 최신 기사 및 업데이트를 살펴보세요.\" />\n      {/* 페이지 컨텐츠를 여기에 추가하세요 */}\n    </>\n  );\n};\n\nexport default HomePage;\n```\n\n## 🟢새로운 React Hooks\n\nuseTransition을 사용한 액션:\n\n<div class=\"content-ad\"></div>\n\n- 데이터 변이 중 보류 중인 상태를 처리하기 위한 useTransition 훅을 소개합니다.\n- 낙관적 업데이트, 오류 및 순차적 요청을 효율적으로 관리할 수 있도록 합니다.\n\n새로운 훅:\n\n- useOptimistic: 폼 제출 중 즉시 피드백을 제공합니다.\n- useFormStatus: 폼 상태를 관리합니다(예: pristine, dirty, touched).\n- useFormState: 값 및 오류를 포함한 폼 상태를 추적합니다.\n- useActionState: 일반적인 액션 시나리오를 간소화합니다.\n\n이 흥미로운 주제는 철저한 논의를 위해 별도의 기사가 필요합니다.\n\n<div class=\"content-ad\"></div>\n\n그리고 React에서 다가오는 개선 사항은 다음과 같습니다:\n\n- suspense를 사용한 최적화된 에셋 로딩을 통한 성능 개선.\n- 웹 컴포넌트를 React에 직접 통합하여 원활한 사용 환경 조성.\n\n웹 컴포넌트 — React (reactjs.org)\n\n👨‍💻 나는 Angular 18과 React 19에 대해 알아가는 것을 고대하고 있어. 이게 내 눈길을 사로잡았어:\n\n<div class=\"content-ad\"></div>\n\nAngular 18:\n\n- Zoneless 지원\n- Angular Material 3\n- 시그널 API\n- 지연 로딩 뷰\n- 이벤트 재생\n- 라우트 리다이렉트\n- 새로운 애플리케이션 빌더\n\nReact 19:\n\n- React 컴파일러\n- 액션들\n- 문서 메타데이터\n- 새로운 훅: useTransition, useOptimistic, useFormStatus, useActionState\n\n<div class=\"content-ad\"></div>\n\n이번 업데이트들은 웹 성능, 사용자 경험, SEO, 그리고 개발자 생산성을 크게 향상시킬 것을 약속합니다. 탐험하고 배우는 것을 기다릴 수가 없네요! 🚀\n\n💡제 소개가 귀하의 호기심을 자극하여 소프트웨어 프로젝트에 Angular 18과 React 19를 탐험하고 싶게 만들었으면 좋겠네요.","ogImage":{"url":"/assets/img/2024-06-22-1819in24UnveilingAngularReactsLatestUpdates_0.png"},"coverImage":"/assets/img/2024-06-22-1819in24UnveilingAngularReactsLatestUpdates_0.png","tag":["Tech"],"readingTime":10},{"title":"프론트엔드 마스터가 되기 위한 9개의 프로젝트 아이디어","description":"","date":"2024-06-22 14:35","slug":"2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster","content":"\n\n\n![Frontend Master](/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_0.png)\n\n# 소개\n\n무엇을 하든지 적절한 도구를 사용하는 것은 언제나 유익합니다. 저는 원격으로 작업하는 것을 좋아하며 원격 소프트웨어 개발을 열렬히 옹호합니다. 따라서 가능한 한 생산적일 수 있도록 최상의 장비를 갖추려고 항상 노력합니다. 이런 게시물을 작성하는 데는 항상 많은 시간이 소요됩니다.\n\n프로그래밍에 처음 입문하신 분이든 이미 경험 많은 개발자이든 상관없이 이 산업에서는 빠른 변화에 대응하기 위해 새로운 개념과 언어/프레임워크를 배우는 것이 필수적입니다. React를 예로 들어보면 — Facebook이 9년 전에 오픈 소스로 공개했지만 이미 전 세계의 자바스크립트 개발자들에게 가장 인기 있는 선택지가 되었습니다. 또한 Vue와 Angular 또한 당연히 그들만의 팬층을 보유하고 있습니다. 그리고 Svelte, 그리고 Next.js나 Nuxt.js와 Gatsby, Gridsome, Quasar 등이 존재합니다. 전문적인 자바스크립트 개발자로 빛나고 싶다면 다양한 프레임워크와 라이브러리에 대해 경험이 있어야 합니다 — 그리고 좋은 오래된 자바스크립트 과제를 수행하는 것을 잊지 말아야 합니다.\n\n\n<div class=\"content-ad\"></div>\n\n프론트엔드 마스터가 되는 데 도움이 되도록 9가지 다른 프로젝트를 수집했어요. 각각의 주제와 JavaScript 프레임워크 또는 라이브러리를 기술 스택으로 사용하여 포트폴리오에 추가할 수 있는 프로젝트에 대해 준비했어요. 무언가를 직접 만들면서 배우는 경험이 최고라는 걸 기억해요. 지금 바로 시작해서 뇌를 단련하고 이루어내세요!\n\n# React를 사용하여 영화 검색 앱 만들기\n\n가장 먼저 시작할 수 있는 것은 React를 사용하여 영화 검색 앱을 만드는 것이에요. 아래는 최종 앱이 어떻게 보일지에 대한 이미지에요:\n\n![Movie Search App](/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_1.png)\n\n<div class=\"content-ad\"></div>\n\n# 배울 내용\n\n이 응용 프로그램을 만들면 상대적으로 새로운 Hooks API를 사용하여 React 기술을 향상시킬 수 있습니다. 예제 프로젝트는 React 컴포넌트, 다양한 hooks, 외부 API 및 물론 일부 CSS를 통한 스타일링을 사용합니다.\n\n# 기술 스택 및 기능\n\n- Hooks를 사용한 React\n- create-react-app\n- JSX\n- CSS\n\n<div class=\"content-ad\"></div>\n\n\"이 프로젝트는 클래스없이 완벽한 진입점을 제공하며 함수형 React를 배우는 데 도움이 될 것입니다. 2020년에 큰 도움이 될 것이죠. 예제 프로젝트는 여기에서 확인할 수 있어요: [링크](https://www.freecodecamp.org/news/how-to-build-a-movie-search-app-using-react-hooks-24eb72ddfaf7/)\n튜토리얼에 따를 수도 있고, 직접 창의적인 아이디어로 프로젝트를 만들어볼 수도 있어요!\n\n# Vue를 사용하여 채팅 앱 만들기\n\n다른 멋진 프로젝트로 VueJS 라이브러리를 사용하여 채팅 앱을 만드는 것이 있어요. 앱은 이렇게 보일 거예요:\n\n![Chat App](/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_2.png)\"\n\n<div class=\"content-ad\"></div>\n\n# 배울 내용\n\n이 튜토리얼을 따라가면 Vue 앱을 처음부터 설정하는 방법과 컴포넌트 생성, 상태 관리, 라우팅 생성, 제3자 서비스에 연결, 심지어 인증 처리하는 방법까지 배울 수 있습니다.\n\n# 기술 스택 & 기능\n\n- Vue\n- Vuex\n- Vue Router\n- Vue CLI\n- Pusher\n- CSS\n\n<div class=\"content-ad\"></div>\n\n이것은 Vue를 시작하거나 2020년에 개발에 도전하기 위한 기존 기술을 향상시키는 데 좋은 프로젝트입니다. 다음에서 튜토리얼을 찾을 수 있습니다: https://www.sitepoint.com/pusher-vue-real-time-chat-app/\n\n# Angular 8로 아름다운 날씨 앱 만들기\n\n이 예제는 Google의 Angular 8을 사용하여 아름다운 날씨 앱을 만드는 데 도움이 될 것입니다:\n\n![image](/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_3.png)\n\n<div class=\"content-ad\"></div>\n\n# 배울 내용\n\n이 프로젝트를 통해 처음부터 어플리케이션을 만들어가는 과정을 배우게 됩니다. 디자인에서부터 개발, 그리고 마지막에는 프로덕션 환경에 배포하는 방법까지 모두 포함되어 있습니다.\n\n# 기술 스택 및 기능\n\n- Angular 8\n- Firebase\n- 서버 측 렌더링\n- 그리드 레이아웃 및 플렉스박스를 사용한 CSS\n- 모바일 친화적 및 반응형\n- 다크 모드\n- 아름다운 UI\n\n<div class=\"content-ad\"></div>\n\n이 포괄적인 프로젝트에서 정말 좋아하는 점은 공부하는 것이 격리되어 있는 것이 아니라 설계부터 최종 배포까지 전체 개발 프로세스를 배울 수 있다는 것입니다. 정말 해보시는 걸 추천해요!\n\n[Svelte로 할 일 앱 만들기](https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-6-a-to-z-ultimate-guide-2018-part-i-e121dd1d55e)\n\n# Svelte로 할 일 앱 만들기\n\nSvelte는 React, Vue, Angular에 비해 상대적으로 새로운 기술이지만, 그럼에도 불구하고 2020년에 주목 받는 기술 중 하나에요. 할 일 앱은 핫한 주제는 아니지만 Svelte 스킬을 향상시키는 데 정말 도움이 될 거예요!\n\n![프로젝트 이미지](/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_4.png)\n\n<div class=\"content-ad\"></div>\n\n# 배울 내용\n\n이 강의에서는 Svelte 3를 사용하여 앱을 처음부터 완성까지 만드는 방법을 안내합니다. 컴포넌트, 스타일링 및 이벤트 핸들러를 사용합니다.\n\n# 기술 스택 및 기능\n\n- Svelte 3\n- 컴포넌트\n- CSS를 통한 스타일링\n- ES6 구문\n\n<div class=\"content-ad\"></div>\n\nSvelte 스타터 프로젝트가 많지 않기 때문에 이 프로젝트는 시작하기에 좋다고 생각해요. 혹시 다음 해에 이 게시물의 버전에서 제시될 더 포괄적인 Svelte 튜토리얼을 만드실 분이 될지도 모르죠?\n\n# Next.js로 전자 상거래 장바구니 만들기\n\nNext.js는 서버 측 렌더링을 기본적으로 지원하는 React 애플리케이션을 만드는 데 가장 인기 있는 프레임워크입니다. 이 프로젝트에서는 다음과 같은 전자 상거래 장바구니를 만드는 방법을 보여줄 거에요:\n\n![E-commerce shopping cart](/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_5.png)\n\n<div class=\"content-ad\"></div>\n\n# 배울 내용\n\n이 프로젝트에서 Next.js 개발 환경을 설정하는 방법, 새로운 페이지 및 구성 요소를 만드는 방법, 데이터를 가져오는 방법, 스타일링하는 방법, 그리고 Next 애플리케이션을 배포하는 방법을 배우게 될 거에요.\n\n# 기술 스택 및 기능\n\n- Next.js\n- 구성 요소와 페이지\n- 데이터 가져오기\n- 스타일링\n- 배포\n- SSR 및 SPA\n\n<div class=\"content-ad\"></div>\n\n실제 e-commerce 쇼케이스와 같은 실제 예제가 있으면 새로운 것을 배우는 데 좋을 것입니다. 해당 튜토리얼은 여기에서 찾을 수 있습니다:\n[https://snipcart.com/blog/next-js-ecommerce-tutorial](https://snipcart.com/blog/next-js-ecommerce-tutorial)\n\n# 완전한 다국어 블로그 웹사이트를 만들어보세요 Nuxt.js\n\nNuxt.js는 Vue에게 Next.js가 React에게 하는 역할입니다. 서버 측 렌더링과 싱글 페이지 애플리케이션의 강점을 결합하는 훌륭한 프레임워크입니다. 생성할 수 있는 최종 앱은 이렇게 보일 것입니다:\n\n![이미지](/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_6.png)\n\n<div class=\"content-ad\"></div>\n\n# 배울 내용\n\n이 예제 프로젝트는 Nuxt.js를 사용하여 초기 설정부터 최종 배포까지 완전한 웹사이트를 구축하는 방법을 가르쳐줍니다. Nuxt가 제공하는 다양한 기능인 페이지와 컴포넌트, SCSS를 활용합니다.\n\n# 기술 스택 및 기능\n\n- Nuxt.js\n- 컴포넌트와 페이지\n- Storyblok 모듈\n- 믹스인\n- 상태 관리를 위한 Vuex\n- 스타일링을 위한 SCSS\n- Nuxt 미들웨어\n\n<div class=\"content-ad\"></div>\n\n이 프로젝트는 Nuxt.js의 많은 훌륭한 기능을 다루며 정말 멋진 프로젝트에요. 저는 개인적으로 Nuxt와 함께 일하는 것을 좋아해요. 그래서 이 프로젝트를 꼭 시도해보세요! 또한 Vue 개발자로 성장하는 데 도움이 될 거예요!\nhttps://www.storyblok.com/tp/nuxt-js-multilanguage-website-tutorial\n\n# Gatsby로 블로그 만들기\n\nGatsby는 React와 GraphQL을 사용하는 훌륭한 정적 사이트 생성기에요. 이 프로젝트의 결과물은 이렇습니다:\n\n![프로젝트 결과물](/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_7.png)\n\n<div class=\"content-ad\"></div>\n\n# 배울 내용\n\n이 튜토리얼에서는 Gatsby를 활용하여 탁월한 블로그를 만들어보는 방법을 배우게 될 거에요. React와 GraphQL을 사용하면서 자신의 글을 쓰는 용도로 효과적으로 사용할 수 있게 됩니다.\n\n# 기술 스택 및 특징\n\n- Gatsby\n- React\n- GraphQL\n- 플러그인 및 테마\n- MDX / Markdown\n- Bootstrap CSS\n- 템플릿\n\n<div class=\"content-ad\"></div>\n\n만약 블로그를 시작해보고 싶다면 React와 GraphQL을 활용하여 블로그를 만드는 훌륭한 예시입니다. WordPress가 항상 나쁜 선택이라고 말하고 싶은 것은 아닙니다. Gatsby를 사용하면 React를 활용하여 성능이 뛰어난 사이트를 만들 수 있어요. 그 조합은 정말 멋지죠!\nhttps://blog.bitsrc.io/how-to-build-a-blog-with-gatsby-and-boostrap-d1270212b3dc\n\n# Gridsome로 블로그 만들기\n\nGridsome는 Vue에 해당하는데요... 좋아요, 이미 Next/Nuxt에서 그렇게 할 수 있었는데 Gridsome와 Gatsby도 마찬가지입니다. 둘 다 데이터 레이어로 GraphQL을 사용하지만 Gridsome은 VueJS를 사용합니다. 또한, 멋진 블로그를 만들 수 있는 인상적인 정적 사이트 생성기입니다:\n\n![이미지](/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_8.png)\n\n<div class=\"content-ad\"></div>\n\n# 배우게 될 내용\n\n이 프로젝트에서는 Gridsome, GraphQL 및 Markdown을 사용하여 간단한 블로그를 만드는 방법을 가르쳐줍니다. Netlify를 통해 애플리케이션을 배포하는 방법도 다룹니다.\n\n# 기술 스택 및 특징\n\n- Gridsome\n- Vue\n- GraphQL\n- Markdown\n- Netlify\n\n<div class=\"content-ad\"></div>\n\n이 튜토리얼은 가장 포괄적이지는 않지만 Gridsome과 Markdown의 기본 개념을 다루고 있어 좋은 시작점이 될 수 있습니다. \n\nhttps://www.telerik.com/blogs/building-a-blog-with-vue-and-markdown-using-gridsome\n\n# Quasar를 사용하여 SoundCloud와 유사한 오디오 플레이어 앱 구축하기\n\nQuasar는 또 다른 Vue 프레임워크로, 모바일 애플리케이션을 만드는 데 사용할 수도 있습니다. 이 프로젝트에서는 다음과 같은 모습의 오디오 플레이어 앱을 만들어볼 것입니다:\n\n![이미지](/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_9.png)\n\n<div class=\"content-ad\"></div>\n\n# 배울 내용\n\n다른 프로젝트들이 주로 웹 애플리케이션에 중점을 두는 반면, 이 프로젝트는 Quasar 프레임워크를 통해 Vue를 사용하여 모바일 앱을 만드는 방법을 보여줍니다. 이미 Cordova 설정이 구성된 안드로이드 스튜디오 / xcode가 있는 것이 좋습니다. 그렇지 않은 경우 튜토리얼에는 이 설정 방법을 보여주는 quasar 웹사이트 링크가 있습니다.\n\n# 기술 스택 및 기능\n\n- Quasar\n- Vue\n- Cordova\n- Wavesurfer\n- UI Components\n\n<div class=\"content-ad\"></div>\n\n작은 프로젝트입니다. Quasar의 강점을 보여주는 모바일 앱 빌딩에 대해 다루고 있어요.\nhttps://www.learningsomethingnew.com/how-to-build-a-sound-cloud-like-audio-player-app-with-vue-js-quasar-and-wave-surfer\n\n# 결론\n\n본문에서는 다양한 JavaScript 프레임워크나 라이브러리를 활용한 9가지 프로젝트를 소개했습니다. 이제 선택은 모두 여러분에게 달렸습니다! 새로운 프레임워크를 시도해보겠습니까? 아니면 이미 알고 계신 기술에 대한 프로젝트로 기술을 강화하고 싶으신가요? 아니면 좋아하는 프레임워크/라이브러리를 활용하여 모든 프로젝트를 진행할 계획이신가요?\n\n오늘은 여기까지입니다.\n\n<div class=\"content-ad\"></div>\n\n위 내용을 Markdown 형식으로 고쳐 드릴게요.\n\n그리고 여기서 시작하는 초보자를 위한 내가 좋아하는 웹 개발 자료를 공유해요!\n나와 소통하기: LinkedIn에 나와 연결하고 내 포트폴리오를 확인해보세요.\n나의 유튜브 채널을 탐험해보세요! 유용하다고 느끼시면, 부디 GitHub 프로젝트에 별을 주세요 ⭐️\n\n<div class=\"content-ad\"></div>\n\n행복한 코딩하세요! 🚀\n23592에 대해 감사드립니다! 🤗","ogImage":{"url":"/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_0.png"},"coverImage":"/assets/img/2024-06-22-9ProjectsyoucandotobecomeaFrontendMaster_0.png","tag":["Tech"],"readingTime":8},{"title":"GraphQL 소개 2024 최신 가이드 붙이기","description":"","date":"2024-06-22 14:33","slug":"2024-06-22-GraphQLIntroduction","content":"\n\n아래는 위에 나타낸 html 태그를 Markdown 형식으로 변경한 것입니다.\n\n\n![GraphQL Introduction](/assets/img/2024-06-22-GraphQLIntroduction_0.png)\n\nGraphQL의 기초를 탐구하고, React 및 React Native과 같은 프론트엔드 프레임워크와 Apollo를 연결하는 방법을 배울 것입니다. 이를 통해 GraphQL, React, React Native 및 Apollo를 사용하여 현대적이고 효율적인 앱을 구축하는 방법을 이해할 수 있습니다.\n\n## GraphQL이란?\n\nGraphQL은 API를 위한 쿼리 언어입니다. Facebook에서 개발되었으며, 데이터를 더 효율적으로 가져오기 위한 솔루션으로 개발되었습니다.\n\n\n<div class=\"content-ad\"></div>\n\n# GraphQL을 선택하는 이유\n\nGraphQL을 사용하기 전\n\n- REST API (Representational State Transfer Application Programming Interface)는 서로 다른 소프트웨어 시스템 간에 통신할 수 있는 표준화된 방법입니다.\n\nREST API에서는 각 endpoint가 특정한 JSON 데이터 페이로드를 반환합니다. 필요한 필드만 필요하더라도 모든 요청에서 모든 내용을 반환합니다.\n\n<div class=\"content-ad\"></div>\n\n## 제품 목록 가져오기\n\n- HTTP 메소드: GET\n- 엔드포인트: /api/products\n- 설명: 모든 제품의 목록을 가져옵니다.\n\n요청:\n\n```js\nGET /api/products/1\n```\n\n<div class=\"content-ad\"></div>\n\n답변:\n\nMarkdown 형식으로 표 태그를 변경합니다.\n\nREST API의 디자인은 어플리케이션이 불필요한 요청을 많이 보내도록 할 수 있습니다. 왜냐하면 일부 데이터가 다른 엔드포인트에서 올 수도 있기 때문입니다.\n\n즉, 특정 데이터에 대해 정보를 얻으려면 다른 HTTP 요청을 여러 번 보내야 할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n빠르고 효율적인 앱에 대한 수요가 증가하는 가운데, Facebook은 REST API에서 이러한 문제점을 인식하였습니다.\n\n2012년에 내부에서 GraphQL을 개발하기 시작하여, 2015년에 공개하게 되었습니다.\n\n# GraphQL 작동 원리\n\n이미 언급한 바와 같이, GraphQL은 쿼리 언어로, 필요한 데이터만 쿼리를 사용하여 가져오는 방식입니다.\n\n<div class=\"content-ad\"></div>\n\nGraphQL을 사용하면:\n\n- 관리해야 할 엔드포인트가 /graphql만 있어요.\n- 데이터베이스, REST API, 클라우드 서비스, JSON 파일과 유연하게 통합할 수 있어요.\n\n![그림](/assets/img/2024-06-22-GraphQLIntroduction_1.png)\n\n일반적인 GraphQL 작업은 다음과 같이 진행돼요:\n\n<div class=\"content-ad\"></div>\n\n- 데이터는 쿼리를 통해 GraphQL 서버에서 요청됩니다.\n- 적절한 소스에서 데이터를 가져 오기위해 GraphQL 서버에서 함수가 호출됩니다.\n- GraphQL 서버는 클라이언트에 응답을 반환합니다.\n\nGraphQL은 API를 테스트하는 데 도움이되는 GraphiQL이라는 IDE와 함께 제공됩니다.\n\n비주얼 스튜디오 코드용 GraphQL 확장 프로그램\n\n![그림](/assets/img/2024-06-22-GraphQLIntroduction_2.png)\n\n<div class=\"content-ad\"></div>\n\n# GraphQL의 주요 기능\n\n데이터 선언적 가져오기: 클라이언트는 필요한 데이터의 형태와 크기를 지정합니다. 초과 가져오기(필요 이상의 데이터 검색)와 부족한 가져오기(필요 이하의 데이터 검색)를 피할 수 있습니다.\n\n단일 엔드포인트: REST와 달리 각각 다른 리소스를 위한 여러 엔드포인트를 필요로 하지 않고 GraphQL은 모든 데이터에 접근하기 위한 단일 엔드포인트를 사용합니다.\n\n강력한 타입화 스키마: 스키마는 쿼리할 수 있는 데이터 유형과 그들 간의 관계를 정의합니다.\n\n<div class=\"content-ad\"></div>\n\n실시간 데이터 구독: 클라이언트는 데이터 변경 사항을 구독하여 실시간 업데이트를 받을 수 있습니다.\n\n## GraphQL 쿼리의 기본 구조\n\n다음은 제품을 가져오기 위한 간단한 GraphQL 쿼리입니다:\n\n특정 ID로 단일 제품 가져오기:\n\n<div class=\"content-ad\"></div>\n\nGraphQL 쿼리:\n\n```js\nquery {\n  product(id: 1) {\n    id\n    name\n    price\n    category\n    description\n  }\n}\n```\n\nJSON 요청:\n\n```js\n{\n  \"query\": \"query { product(id: 1) { id name price category description } }\"\n}\n```\n\n<div class=\"content-ad\"></div>\n\n예시 응답:\n\n```js\n{\n  \"data\": {\n    \"product\": {\n      \"id\": 1,\n      \"name\": \"노트북\",\n      \"price\": 999.99,\n      \"category\": \"전자제품\",\n      \"description\": \"모든 컴퓨팅 요구 사항에 적합한 고성능 노트북.\"\n    }\n  }\n}\n```\n\n새 제품 추가, 업데이트 또는 제품(Mutation)：\n\nGraphQL 뮤테이션:\n\n<div class=\"content-ad\"></div>\n\n```js\n변이 {\n  추가상품(입력: {\n    이름: \"태블릿\",\n    가격: 299.99,\n    카테고리: \"전자제품\",\n    설명: \"긴 배터리 수명을 가진 가벼운 태블릿.\"\n  }) {\n    id\n    이름\n    가격\n    카테고리\n    설명\n  }\n}\n```\n\nJSON 요청:\n\n```js\n{\n  \"query\": \"mutation { addProduct(input: { name: \\\"Tablet\\\", price: 299.99, category: \\\"Electronics\\\", description: \\\"A lightweight tablet with a long battery life.\\\" }) { id name price category description } }\"\n}\n```\n\n예시 응답:\n\n<div class=\"content-ad\"></div>\n\n```js\n{\n  \"data\": {\n    \"addProduct\": {\n      \"id\": 3,\n      \"name\": \"Tablet\",\n      \"price\": 299.99,\n      \"category\": \"Electronics\",\n      \"description\": \"A lightweight tablet with a long battery life.\"\n    }\n  }\n}\n```\n\nJSON 요청 업데이트\n\n```js\n{\n  \"query\": \"mutation { updateProduct(id: 1, input: { name: \\\"Laptop\\\", price: 1099.99, category: \\\"Electronics\\\", description: \\\"An updated high-performance laptop with additional features.\\\" }) { id name price category description } }\"\n}\n```\n\n예시 응답:\n\n<div class=\"content-ad\"></div>\n\n```json\n{\n  \"data\": {\n    \"updateProduct\": {\n      \"id\": 1,\n      \"name\": \"Laptop\",\n      \"price\": 1099.99,\n      \"category\": \"Electronics\",\n      \"description\": \"An updated high-performance laptop with additional features.\"\n    }\n  }\n}\n```\n\nJSON으로 GraphQL 사용하기\n\n스키마 정의하기: API에서 사용 가능한 유형 및 필드를 정의하는 스키마를 만듭니다.\n\n서버 설정하기: Apollo Server 또는 Express GraphQL과 같은 서버 라이브러리를 사용하여 요청을 처리합니다.\n\n<div class=\"content-ad\"></div>\n\n쿼리/뮤테이션 전송: GraphiQL, Apollo Client 또는 HTTP 클라이언트(예: Postman, cURL)와 같은 도구를 사용하여 JSON 형식으로 쿼리 및 뮤테이션을 전송합니다.\n\n응답 처리: 서버에서 받은 JSON 응답을 처리하여 요청된 데이터나 뮤테이션 작업의 확인을 포함합니다.\n\nGraphQL은 복잡한 쿼리를 처리하고 JSON 형식으로 정확한 데이터를 반환하는 능력으로 전통적인 REST API에 대안을 제공하여 더 효율적이고 유연한 데이터 가져오기를 가능하게 합니다.","ogImage":{"url":"/assets/img/2024-06-22-GraphQLIntroduction_0.png"},"coverImage":"/assets/img/2024-06-22-GraphQLIntroduction_0.png","tag":["Tech"],"readingTime":5},{"title":"Tailwind로 라디오 버튼 꾸미는 방법","description":"","date":"2024-06-22 14:31","slug":"2024-06-22-StylingradiobuttonwithTailwind","content":"\n\n## 스크래치에서 React 라디오 버튼 구성 요소 (스타일 지정)\n\n![이미지](/assets/img/2024-06-22-StylingradiobuttonwithTailwind_0.png)\n\n테일윈드로 스타일링하는 것에 대한 이 포스트 이후에 다른 포스트입니다. 체크박스 요소와 비슷하게, 라디오 버튼의 재스타일링을 단계별로 진행할 것입니다.\n\n![이미지](/assets/img/2024-06-22-StylingradiobuttonwithTailwind_1.png)\n\n<div class=\"content-ad\"></div>\n\n## 스타일링 단계별로\n\n우리가 시작하는 것은 다음과 같습니다:\n\n```js\nconst Radio = () => (\n  <div>\n    <input type=\"radio\" />\n    <label>This is the radio label</label>\n  </div>\n);\n```\n\n이제 레이블을 클릭할 수 있게 id를 추가해보세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nconst Radio = ({ id }: RadioProps) => (\n  <div>\n    <input type=\"radio\" id={id} />\n    <label htmlFor={id}>This is the radio label</label>\n  </div>\n);\n```\n\n## 스타일링\n\n기본 스타일을 제거하려면 appearance-none 클래스를 사용하세요.\n\n```js\n<input type=\"radio\" id={id} className=\"appearance-none\" />\n```\n\n<div class=\"content-ad\"></div>\n\n라디오 버튼이 사라질 거에요 — 처음부터 디자인해야 해요.\n\n## 라디오 버튼\n\n폭과 높이를 추가하고, 테두리의 일부 색상을 넣고, 라운드하게 만들어주세요. 라운드하지 않으면 체크박스처럼 네모난 모습이 될 거에요.\n\n```js\n<input type=\"radio\" id={id}\n  className=\"\n    appearance-none\n    w-4 h-4 border-2 border-blue-500 rounded-full\n  \"\n/>\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-22-StylingradiobuttonwithTailwind_2.png\" />\n\n## 정렬 수정\n\n조금 어색해 보이네요. 일부 정렬이 필요합니다. 부모 div에 간단한 수정을 적용하면 이렇게 됩니다:\n\n```js\n<div className=\"flex gap-2 items-center\">\n  <input type=\"radio\" id={id}\n    className=\"\n      appearance-none\n      w-4 h-4 border-2 border-blue-500 rounded-full\n    \"\n  />\n  <label htmlFor={id}>라디오 라벨입니다</label>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-22-StylingradiobuttonwithTailwind_3.png\" />\n\n수정 완료했어요! 맞죠? 음, 그건 상황에 따라 다를 거예요. 만약 깁ㄴ힐 라벨을 가지고 있고 텍스트 래핑이 발생할 경우 어떻게 되는지 확인해 보세요:\n\n<img src=\"/assets/img/2024-06-22-StylingradiobuttonwithTailwind_4.png\" />\n\n우선 버튼이 줄어들었는데, 버튼 스타일에 shrink-0를 추가하여 쉽게 수정할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-22-StylingradiobuttonwithTailwind_5.png)\n\n이제 중앙에 버튼이 있는 것이 괜찮은지, 아니면 상단에 있는 것이 나은지에 대한 질문입니다. 저는 상단에 있기를 선호하며, 따라서 폰트 크기에 따라 일부 상단 여백을 추가하고 모두 상단으로 정렬합니다 (items-center를 제거).\n\n```js\n<div className=\"flex gap-2\">\n  <input type=\"radio\" id={id}\n    className=\"\n      appearance-none shrink-0 mt-1\n      w-4 h-4 border-2 border-blue-500 rounded-full\n    \"\n  />\n  <label htmlFor={id}>This is the radio label</label>\n</div>\n```\n\n![이미지](/assets/img/2024-06-22-StylingradiobuttonwithTailwind_6.png)\n\n\n<div class=\"content-ad\"></div>\n\n## 확인 상태 추가\n\n체크 요소를 원 안에 배치해야 합니다. 따라서 체크 요소의 모양을 정의하고 적절한 위치에 배치하기 위해 절대적 사용법이 필요합니다.\n\n```js\n<input type=\"radio\" id={id}\n  className=\"\n    relative\n    appearance-none shrink-0 mt-1\n    w-4 h-4 border-2 border-blue-500 rounded-full\n  \"\n/>\n<div\n  className=\"\n    absolute\n    w-2 h-2 rounded-full bg-blue-500\n  \"\n/>\n<label htmlFor={id}>라디오 라벨입니다</label>\n```\n\n같은 색으로 간단한 원을 추가했지만, 좀 더 맞춤 정렬이 필요해 보입니다.\n\n<div class=\"content-ad\"></div>\n\n아래와 같이 마진을 추가하면 끝!\n```js\n<div className=\"\n  absolute\n  w-2 h-2 rounded-full bg-blue-500 ml-1 mt-2\"\n/>\n```\n\n\n<div class=\"content-ad\"></div>\n\n저는 무언가 레이아웃하는 데 마진을 사용하는 것을 선호하지 않아요. 버튼의 너비를 변경하면 그 마진을 업데이트해야 할 필요도 있잖아요:\n\n![이미지](/assets/img/2024-06-22-StylingradiobuttonwithTailwind_9.png)\n\n또한 절대 위치를 사용하는 것도 좋아하지 않아요. 다른 방법이 없을까요?\n\n## 그리드 배치\n\n<div class=\"content-ad\"></div>\n\n다른 방법은 버튼과 체크 요소를 한 그리드 셀에 넣고 중앙 정렬을 사용하는 것입니다. 이제 모든 여백과 절대 위치 설정은 더 이상 필요하지 않습니다.\n\n```js\n<div className=\"grid place-items-center\">\n  <input type=\"radio\" id={id}\n    className=\"\n      col-start-1 row-start-1\n      appearance-none shrink-0\n      w-4 h-4 border-2 border-blue-500 rounded-full\n    \"\n  />\n  <div\n    className=\"\n      col-start-1 row-start-1\n      w-2 h-2 rounded-full bg-blue-500\n    \"\n  />\n</div>\n```\n\n그리고 버튼 크기를 변경하면 내부 원이 여전히 중앙에 있습니다.\n\n<img src=\"/assets/img/2024-06-22-StylingradiobuttonwithTailwind_10.png\" />\n\n<div class=\"content-ad\"></div>\n\n## 정렬 문제가 되돌아왔어요\n\n더 작은 컨테이너에서 새 구현을 확인한 후에 우리가 얻은 결과는 다음과 같아요:\n\n![Image](/assets/img/2024-06-22-StylingradiobuttonwithTailwind_11.png)\n\n조금 조정이 필요했어요 — 모든 것을 상단에 정렬하고 (유감스럽게도) 원을 조금 낮추기 위해 m-1을 사용했어요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<div className=\"flex gap-2 items-start\">\n  <div className=\"grid place-items-center mt-1\">\n    <input type=\"radio\" id={id}\n      className=\"\n        col-start-1 row-start-1\n        appearance-none shrink-0\n        w-4 h-4 border-2 border-blue-500 rounded-full\n      \"\n    />\n    <div\n      className=\"\n        col-start-1 row-start-1\n        w-2 h-2 rounded-full bg-blue-500\"\n    />\n  </div>\n  <label htmlFor={id} \n    className=\"text-start\">라디오 라벨입니다</label>\n</div>\r\n```\n\n<img src=\"/assets/img/2024-06-22-StylingradiobuttonwithTailwind_12.png\" />\n\n## 선택 및 미선택 상태\n\n더 나아가기 위해 컴포넌트에 일부 변경이 필요합니다 - label과 defaultChecked를 추가하세요. 여기에서 변경된 부분만 보여드리겠습니다. 전체 코드는 리포지토리에서 확인해주세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst Radio = ({ defaultChecked, id, label }: RadioProps) => (\n...\n    <input type=\"radio\" id={id} defaultChecked={defaultChecked}\n...\n    <label htmlFor={id} className=\"text-start\">{label}</label>\n```\n\n그리고 일부 컴포넌트 렌더링:\n\n```js\n<Radio id='radio1' label='라디오 1' defaultChecked />\n<Radio id='radio2' label='라디오 2' defaultChecked={false} />\n```\n\n![이미지](/assets/img/2024-06-22-StylingradiobuttonwithTailwind_13.png)\n\n\n<div class=\"content-ad\"></div>\n\n다음 표는 Markdown 형식으로 변환해야 합니다. 문제는 선택되지 않은 상태에 대한 스타일링이 누락되었다는 것입니다.\n\n내부 원은 체크 상태가 true 일 때만 표시되어야 합니다. 따라서 배경색은 입력 요소의 체크 상태에 따라 지정되어야 합니다. 이는 입력 요소에 peer 클래스를 설정하고 배경색 앞에 peer-checked: 접두사를 추가하여 수행할 수 있습니다:\n\n```js\n<input type=\"radio\" id={id} defaultChecked={defaultChecked}\n  className=\"\n    peer\n    col-start-1 row-start-1\n    appearance-none shrink-0\n    w-4 h-4 border-2 border-blue-500 rounded-full\n  \"\n/>\n<div\n  className=\"\n    col-start-1 row-start-1\n    w-2 h-2 rounded-full peer-checked:bg-blue-500\n  \"\n/>\r\n```\n\n<img src=\"/assets/img/2024-06-22-StylingradiobuttonwithTailwind_14.png\" />\n\n<div class=\"content-ad\"></div>\n\n## 확인란을 클릭할 수 없습니다\n\n두 번째 라디오 버튼의 동그라미를 클릭하여 선택하려고 시도해보세요. — 아무 일도 일어나지 않을 겁니다. 이제 \"Radio 2\" 라벨을 클릭해보세요. — 작동할 겁니다! 무슨 문제인 걸까요?\n우리가 렌더링하는 내부 원이 클릭 이벤트를 막고 있습니다. 이 문제를 해결하려면 내부 원에 pointer-events-none 클래스를 추가해야 합니다. 이 클래스는 해당 요소에 어떠한 클릭 이벤트도 가져가지 말고 그냥 넘겨주라고 말합니다.\n\n```js\n<div\n  className=\"\n    pointer-events-none\n    col-start-1 row-start-1\n    w-2 h-2 rounded-full peer-checked:bg-blue-500\n  \"\n/>\n```\n\n## 비활성 상태\n\n<div class=\"content-ad\"></div>\n\n한국어로 번역하면:\n\n```js\n// 파일에 두 개의 추가 라디오 버튼을 추가해보세요:\n\n<Radio id='radio1' label='라디오 1' defaultChecked />\n<Radio id='radio2' label='라디오 2' defaultChecked={false} />\n<Radio id='radio3' label='라디오 3 (비활성화됨)' defaultChecked disabled />\n<Radio id='radio4' label='라디오 4 (비활성화됨)' defaultChecked={false} disabled />\n\n// 그리고 컴포넌트를 업데이트해보세요:\n\nconst Radio = ({ defaultChecked, disabled, id, label }: RadioProps) => (\n...\n    <input type=\"radio\" id={id} defaultChecked={defaultChecked}\n      disabled={disabled}\n...\n```\n\n<div class=\"content-ad\"></div>\n\nRadio 4(비활성화된)는 선택할 수 없습니다 — 그래서 정상적으로 작동하는 것 같아요. 그러나 외관을 업데이트해야 합니다. 사용자가 항목이 비활성화되었음을 알 수 있도록 해야 합니다. 내부 원 안에 peer-checked 및 peer-disabled를 사용해야 합니다.\n\n```js\n<input type=\"radio\" id={id} defaultChecked={defaultChecked} disabled={disabled}\n  className=\"\n    peer\n    col-start-1 row-start-1\n    appearance-none shrink-0\n    w-4 h-4 border-2 border-blue-500 rounded-full\n    disabled:border-gray-400\n  \"\n/>\n<div\n  className=\"\n    pointer-events-none\n    col-start-1 row-start-1\n    w-2 h-2 rounded-full peer-checked:bg-blue-500\n    peer-checked:peer-disabled:bg-gray-400\n  \"\n/>\r\n```\n\n## 그런데 props에 disabled가 있어요\n\n네, clsx 또는 classnames 패키지를 사용하여 이런식으로 사용할 수도 있어요:\n\n<div class=\"content-ad\"></div>\n\n```js\n<div\n  className={cx(\n    \"pointer-events-none\",\n    \"col-start-1 row-start-1\",\n    \"w-2 h-2 rounded-full peer-checked:bg-blue-500\",\n    // \"peer-checked:peer-disabled:bg-gray-400\"\n    {\n      \"!bg-gray-400\": disabled,\n    }\n  )}\n/>\n```\n\n하지만 이 경우에는 ! 중요성을 사용해야 합니다. 원하는 대로 사용해 주세요.\n\n또 \"disabled\" 레이블을 스타일링하려면 prop만 사용할 수 있습니다. 이것은 레이블이 입력란의 형제가 아니기 때문에 노드 구조에서 tailwind 피어를 사용할 수 없기 때문입니다.\n\n```js\n<label htmlFor={id}\n  className={cx(\n    \"text-start\",\n    {\n      \"text-gray-400\": disabled,\n    })}\n>\n  {label}\n</label>\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-22-StylingradiobuttonwithTailwind_15.png\" />\n\n## 초점이 맞다\n\n지금까지 초점 상태가 없었습니다. 따라서 요소를 클릭하고 초점이 맞으면 보이지 않습니다. Tab 키를 사용하여 페이지를 돌아다니면 다음과 같이 나올 수 있습니다:\n\n<img src=\"/assets/img/2024-06-22-StylingradiobuttonwithTailwind_16.png\" />\n\n<div class=\"content-ad\"></div>\n\n다음은 테이블 태그를 마크다운 형식으로 변경하는 방법입니다:\n\n```js\n<input type=\"radio\" id={id} defaultChecked={defaultChecked} disabled={disabled}\n  className=\"\n    peer\n    col-start-1 row-start-1\n    appearance-none shrink-0\n    w-4 h-4 border-2 border-blue-500 rounded-full\n    focus:outline-none focus:ring-offset-0 focus:ring-2 focus:ring-blue-400\n    disabled:border-gray-400\n  \"\n/>\n```\n\n이제 항목을 클릭하면 외곽선이 표시됩니다:\n\n<img src=\"/assets/img/2024-06-22-StylingradiobuttonwithTailwind_17.png\" />\n\n<div class=\"content-ad\"></div>\n\n아직 여기 있나요? 여기서 소개된 모든 내용을 포함한 완전한 라디오 그룹 컴포넌트 예제도 함께 제공하는 리포지토리를 확인해보세요.\n\n내 컨텐츠가 마음에 드시나요? 저를 지원하고 커피 한 잔 사주세요. 정말 감사합니다!\n\n![이미지](/assets/img/2024-06-22-StylingradiobuttonwithTailwind_18.png)","ogImage":{"url":"/assets/img/2024-06-22-StylingradiobuttonwithTailwind_0.png"},"coverImage":"/assets/img/2024-06-22-StylingradiobuttonwithTailwind_0.png","tag":["Tech"],"readingTime":10},{"title":"데이터 과학자를 위한 Claude 35 Sonnet Anthropic 활용 방법","description":"","date":"2024-06-22 14:30","slug":"2024-06-22-fortheDataScientist","content":"\n\n![이미지](/assets/img/2024-06-22-fortheDataScientist_0.png)\n\n안녕하세요! 클로드 3.5 소네트 경험을 공유하게 되어 흥분되네요. 리액트에 익숙하지 않았던 저로서는 웹 앱을 만드는 것이 쉬운 일은 아니었어요. 그런데 클로드 3.5 소네트가 출시되면서 모든 것이 달라졌어요. 이 강력한 AI 도구 덕분에 React를 몰라도 웹 앱을 원활하게 구축할 수 있었답니다!\n\n클로드 3.5 소네트를 사용해서 선형 회귀를 이용한 최적의 라인 피팅을 만들었고, 인터랙티브한 오차 및 피팅 시각화도 완벽히 구현했어요. 실시간으로 오차가 어떻게 변하는지와 피팅이 어떻게 개선되는지 시각화하는 것은 놀라운 학습 경험이었고, 웹 앱에 동적인 요소를 추가할 수 있었답니다.\n\n클로드 3.5 소네트로 무엇을 만들어보고 싶으신가요?\n\n<div class=\"content-ad\"></div>\n\n# 자연어 처리 프로세싱:\nClaude 3.5 Sonnet은 인간과 유사한 응답을 이해하고 생성하는 데 뛰어나며 다양한 응용 프로그램에 적합합니다.\n\n코드 어시스턴스:\n코딩에 대한 상세하고 단계별 안내를 제공하여 초보자나 새로운 프레임워크를 배우는 사람들에게 귀중한 도움이 됩니다.\n\n향상된 컨텍스트 이해능력:\nAI는 긴 대화에서도 문맥을 유지하여 응답이 관련성 있고 일관되도록 보장합니다.\n\n성능 향상:\n보다 빠른 응답 시간과 향상된 정확성으로 이전 버전들을 크게 능가합니다.\n\n<div class=\"content-ad\"></div>\n\n**사용자-친화적 정보:**\n직관적인 디자인 덕분에 AI 도구에 익숙하지 않은 사람들도 쉽게 상호작용할 수 있어요.\n실시간으로 AI가 도와줄 수 있는 기능은 혁명적이에요. 질문을 하고 설명을 받으며, 학습 곡선을 단순화하고 개발 프로세스를 가속화하는 직접적인 코딩 지원을 받을 수 있었죠.\n\n**왜 클로드 3.5 소넷은 게임-체인저인가요**\n클로드 3.5 소넷은 AI 도구가 아니라 모든 실력 수준의 개발자에게 혁신적인 경험이에요. 이 도구는 장벽을 허물고, 고급 기술을 선행 지식과 관계없이 누구에게나 접근 가능하게 만들어요. 이 기술의 민주화가 왜 클로드 3.5 소넷이 진정한 게임-체인저라고 생각하는 이유에요.\n\n🚀 AI의 도움을 받아 다음 프로젝트를 구축할 준비가 되셨나요? 클로드 3.5 소넷에 대해 더 알아보세요.\nhttps://lnkd.in/dZV6FKud\n\n대화형 데모를 여기에서 확인해보세요 :","ogImage":{"url":"/assets/img/2024-06-22-fortheDataScientist_0.png"},"coverImage":"/assets/img/2024-06-22-fortheDataScientist_0.png","tag":["Tech"],"readingTime":2},{"title":"Nextjs에서 Web Worker 활용하는 방법","description":"","date":"2024-06-22 14:28","slug":"2024-06-22-HarnessingthePowerofWebWorkerswithNextjs","content":"\n\n![2024-06-22-HarnessingthePowerofWebWorkerswithNextjs_0.png](/assets/img/2024-06-22-HarnessingthePowerofWebWorkerswithNextjs_0.png)\n\n웹 애플리케이션의 응답성을 유지하는 데 실시간 데이터를 효율적으로 제공하는 것이 중요합니다. 이 게시물은 금융에 관한 것은 아니지만, 암호화폐 가격과 같은 데이터는 급속하게 변동할 수 있기 때문에 Web Worker에 적합한 사용 사례입니다. 이 데이터를 처리하는 기존 방법은 메인 스레드를 지연시킬 수 있어 웹 앱의 반응이 둔해질 수 있습니다. 그러나 Web Worker의 능력을 활용하면 이 데이터 처리를 별도 스레드로 옮겨 UI를 빠르고 반응적으로 유지할 수 있습니다. 이 게시물에서는 Next.js 애플리케이션에서 Web Worker를 사용하여 실시간 암호화폐 데이터를 관리한 방법을 안내합니다. 아래는 UI의 스크린샷입니다.\n\n![2024-06-22-HarnessingthePowerofWebWorkerswithNextjs_1.png](/assets/img/2024-06-22-HarnessingthePowerofWebWorkerswithNextjs_1.png)\n\n# 웹 워커란 무엇인가\n\n<div class=\"content-ad\"></div>\n\n간단히 말해서, 웹 워커는 백그라운드 스레드에서 스크립트를 실행할 수 있는 방법을 제공합니다. 워커 스레드는 사용자 인터페이스를 방해하지 않고 작업을 수행할 수 있습니다. 게다가, 주요 JavaScript 스레드로 메시지를 보낼 수 있어서 애플리케이션이 반응성을 유지할 수 있습니다.\n\n# 준비 과정: Next.js와 웹 워커\n\nNext.js는 개발자가 서버 측 렌더링 및 정적 웹 애플리케이션을 만들 수 있도록 하는 React 프레임워크입니다. 저는 Next.js를 업무에서 사용하고 있고 매우 인기가 있기 때문에 Web Workers를 Next.js와 함께 사용하는 방법을 알고 싶었습니다. 특히 극복하고자 했던 어려움은 다음과 같습니다.\n\n- TypeScript 사용\n- 웹 워커 파일 경로를 모든 컴포넌트에서 사용 가능하게 하기\n- 현재 tsconfig.json 파일을 오염시키지 않거나 모든 파일을 public 디렉토리에 넣지 않기\n\n<div class=\"content-ad\"></div>\n\n# 빌드 단계\n\n실제 웹 워커 작업에 들어가기 전에 지루한 작업을 먼저 해보겠습니다. 웹 워커를 런타임에서 사용할 수 있도록 하려면 /public 디렉토리에 저장해야 합니다. public 디렉토리에 대해 간단히 설명하자면 이미지, 폰트, 스크립트, HTML 파일 같은 정적 파일을 브라우저를 통해 직접 액세스해야 하는 경우에 사용됩니다. 이 디렉토리에 위치한 모든 것은 Next.js에서 정적 리소스로 제공됩니다. 이 설정은 몇 가지 보안 고려 사항을 동반합니다. 민감한 사용자 데이터를 피하고 적절한 보안 헤더를 사용하며 이 파일에 API 키를 저장하지 마십시오.\n\n# 새로운 tsconfig.json 파일 만들기\n\ntsconfig.worker.json이라는 새 파일을 생성하여 특정 웹 워커 파일을 /public 디렉토리로 컴파일하기 위해 기존 tsconfig.json을 확장합니다. 동일한 JSON을 기본 구성에 넣으면 컴파일러 옵션 -` outDir가 모든 것을 /public 디렉토리에 넣을 것으로 생각됩니다.\n\n<div class=\"content-ad\"></div>\n\n```json\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \". /public/workers\",\n    \"module\": \"ES6\",\n    \"noEmit\": false\n  },\n  \"include\": [\"workers/**/*.ts\"]\n}\n```\n\n이제는 /workers 폴더 안의 모든 파일을 JavaScript로 컴파일하여 /public/workers 디렉토리에 넣어줍니다. 이렇게하면 컴포넌트에서 어디에서든 액세스할 수 있습니다.\n\n# Package.json 업데이트\n\npackage.json 파일에서 스크립트를 업데이트해야합니다. 이렇게하면 worker 파일이 저장될 때마다 빌드됩니다. 제가 일단 빌드를 실행할 수있는 스크립트 명령어를 추가했습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n\"build:workers\": \"tsc -p tsconfig.worker.json\", \n```\n\n이후에는 변경 사항이 발생할 때마다 worker 폴더를 감시하고 저장한 후 빌드하는 명령을 추가했습니다. 이 명령을 개발 명령과 병렬로 실행했습니다. 그러나 모든 작업을 한 번에 수행하도록 개발 명령을 업데이트할 수도 있습니다.\n\n```js\n\"watch:workers\": \"tsc -p tsconfig.worker.json --watch\",\n\"dev\": \"next dev -H 127.0.0.1 -p 3111\",\n```\n\n# 웹 워커\n\n\n<div class=\"content-ad\"></div>\n\n웹 워커는 굉장히 복잡하지 않아요. 사실, 마지막에는 메소드 4개와 속성 2개만 가지고 있어요. 이 메소드들은 워커 내부로 메시지를 보내거나 받기 위해 사용하고, 속성들은 이벤트를 듣기 위해 사용돼요.\n\n## 메소드\n\n- postMessage(): 워커의 내부 스코프로 메시지를 보냅니다. 어떤 값 또는 자바스크립트 객체든 보낼 수 있지만 함수나 오류 객체는 보낼 수 없어요.\n\n```js\nworker.postMessage(data);\n```\n\n<div class=\"content-ad\"></div>\n\n- terminate():\n    워커를 즉시 종료합니다. 이렇게하면 워커 범위 내의 모든 작업이 중지되며, 모든 네트워크 연결이 해제되며, 모든 리소스가 해제됩니다. `terminate()`을 호출한 후에는 워커를 다시 시작할 수 없습니다.\n\n```js\nworker.terminate();\n```\n\n- addEventListener():\n    `message` 및 `error`와 같은 이벤트를 처리하기 위해 워커에 직접 속성을 설정하는 대신 사용할 수 있는 대체 방법입니다.\n\n```js\nworker.addEventListener('message', handlerFunction);\n```\n\n<div class=\"content-ad\"></div>\n\n- removeEventListener():\naddEventListener()로 이전에 등록된 이벤트 리스너를 제거합니다.\n\n```js\nworker.removeEventListener('message', handlerFunction);\n```\n\n## 속성\n\n- onmessage: worker가 `postMessage()`를 사용하여 메인 스레드로부터 메시지를 수신할 때 호출되는 이벤트 핸들러입니다.\n\n<div class=\"content-ad\"></div>\n\n```js \nworker.onmessage = function(event) { \n  console.log(event.data); \n};\n```\n\n- **onerror**: 설명: 워커에서 오류가 발생했을 때 호출되는 이벤트 핸들러입니다. 이 이벤트 핸들러는 오류에 관한 정보를 포함하는 `ErrorEvent` 객체를 받을 수 있습니다.\n\n```js\nworker.onerror = function(event) { console.error(event.message); };\n```\n\n`postMessage` 메서드를 사용할 때 직접 'init' 또는 'data'와 같은 메시지 유형을 만들면 구성 및 유연성이 증가할 수 있습니다. 예를 들어 이 프로젝트에서는 페이로드를 웹 워커의 특정 알고리즘으로 연결하기 위한 메시지 유형을 나타내는 TypeScript 유형을 사용했습니다. 'type'이라는 단어를 많이 사용했는데, 예시를 보여드릴까요?\n\n<div class=\"content-ad\"></div>\n\ntypes.ts\n\n```js\nexport type WorkerMessageT<T> = {\n  type: 'init' | 'data' | 'error' | 'stop'\n  payload?: {\n    id?: string\n    data: T\n  }\n}\n\nexport type CryptoWorkConfigT = {\n  assets: string // 비트코인, 이더리움, 모네로, 라이트코인\n}\n```\n\n다른 방법으로는 addEventListener()를 활용할 수도 있습니다.\n\ncrypto.ts\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { WorkerMessageT, CryptoWorkConfigT } from '../types'\n\n// 워커의 최상위 범위에서 pricesWs를 정의합니다\nlet pricesWs: WebSocket | null = null\n\nself.onmessage = (e) => {\n  const BASE_URL = 'wss://ws.coincap.io/prices'\n  switch (e.data.type) {\n    case 'init':\n      const message: WorkerMessageT<CryptoWorkConfigT> = e.data\n\n      // 웹 소켓 연결을 초기화합니다\n      pricesWs = new WebSocket(\n        `${BASE_URL}?assets=${message.payload?.data.assets}`,\n      )\n\n      const initSubscription = () => {\n        pricesWs?.addEventListener('message', function (event) {\n          self.postMessage(JSON.parse(event.data))\n        })\n      }\n\n      initSubscription()\n\n      break\n\n    case 'stop':\n      // 열려 있는 웹 소켓을 안전하게 닫습니다\n      if (pricesWs) {\n        console.log('WebSocket 연결을 종료합니다...', pricesWs)\n        pricesWs.close()\n        pricesWs = null // 닫은 후에 참조를 지웁니다\n      }\n      break\n\n    case 'error':\n      // 오류 발생 시, 웹 소켓을 닫습니다\n      if (pricesWs) {\n        pricesWs.close()\n        pricesWs = null // 오류 발생 시 정리합니다\n      }\n      // 여기에 추가적인 오류 처리 로직을 구현할 수 있습니다\n      break\n\n    default:\n      // 명시적으로 언급되지 않은 모든 케이스 처리\n      console.error('처리되지 않은 메시지 유형:', e.data.type)\n  }\n}\n```\n\n먼저 몇 가지 타입을 가져오고, Coincap API와 통신하기 위해 사용할 웹 소켓 변수를 초기화합니다. 그런 다음 첫 번째 웹 워커 메서드 self.onmessage가 나타납니다. 메시지 유형이 즉시 유용하며 적절한 알고리즘으로 이벤트를 분기합니다. 'init' 케이스에서는 수신된 메시지 데이터를 수집하고 Coincap 웹 소켓에 구독합니다. 웹 소켓 이벤트 핸들러에서 postMessage() 메서드를 사용하여 데이터를 전파합니다. 여기까지입니다! 이제 웹 워커와 통신하는 UI로 이동해봅시다.\n\npage.ts\n\n```js\n'use client'\n\nimport { useEffect, useRef, useState } from 'react'\nimport { Button } from '@mozilla/lilypad-ui'\nimport styles from './page.module.scss'\nimport { CryptoWorkConfigT, WorkerMessageT } from 'workers/types'\nimport Card from '@Shared/Card/Card'\n\ntype CryptoDataT = {\n  bitcoin: string\n  ethereum: string\n  monero: string\n  litecoin: string\n}\n\nconst page = () => {\n  const workerRef = useRef<Worker>()\n  const initPrice = '데이터를 기다리는 중...'\n  const [status, setStatus] = useState<string>('중지됨')\n  const [prices, setPrices] = useState<CryptoDataT>({\n    bitcoin: '',\n    ethereum: '',\n    monero: '',\n    litecoin: '',\n  })\n\n  useEffect(() => {\n    workerRef.current = new Worker('/workers/crypto/crypto.js', {\n      type: 'module',\n    })\n    workerRef.current.onmessage = (event) => {\n      setPrices((prev) => {\n        const newState = { ...prev, ...event.data }\n        return newState\n      })\n    }\n    workerRef.current.onerror = (error) => {\n      console.error('워커 오류:', error)\n    }\n    return () => {\n      if (workerRef.current) {\n        workerRef.current.terminate()\n      }\n    }\n  }, [])\n\n  const startWorker = () => {\n    setStatus('실행 중')\n\n    const workerMessage: WorkerMessageT<CryptoWorkConfigT> = {\n      type: 'init',\n      payload: {\n        data: {\n          assets: 'bitcoin,ethereum,monero,litecoin',\n        },\n      },\n    }\n    if (workerRef.current) {\n      workerRef.current.postMessage(workerMessage)\n    }\n  }\n\n  const stopWorker = () => {\n    setStatus('중지됨')\n    const workerMessage: WorkerMessageT<CryptoWorkConfigT> = {\n      type: 'stop',\n    }\n    if (workerRef.current) {\n      workerRef.current.postMessage(workerMessage)\n    }\n  }\n\n  const terminateWorker = () => {\n    setStatus('종료됨')\n    const workerMessage: WorkerMessageT<CryptoWorkConfigT> = {\n      type: 'stop',\n    }\n    if (workerRef.current) {\n      workerRef.current.postMessage(workerMessage)\n      workerRef.current.terminate()\n    }\n  }\n\n  return (\n    <section className={styles.page}>\n      <Card size=\"large\" classProp={styles.card}>\n        <div className=\"mb-40 gap-12\">\n          <Button onClick={startWorker} text=\"스트림 시작\" />\n          <Button\n            onClick={stopWorker}\n            text=\"스트림 중지\"\n            category=\"primary_outline\"\n          />\n          <Button\n            icon=\"trash\"\n            onClick={terminateWorker}\n            text=\"워커 종료\"\n            category=\"primary_clear\"\n          />\n        </div>\n        <div>\n          <h2 className=\"heading-md mb-12\">데이터 스트림: {status}</h2>\n          <p className=\"mb-40 body-sm\">\n            이 페이지는 CoinCap.io에서 암호화폐 가격을 스트리밍하는 웹 워커를 사용합니다. \"스트림 시작\" 버튼을 클릭하면 워커가 시작되고 \"스트림 중지\" 버튼을 클릭하면 워커가 중지됩니다.\n          </p>\n          <div className=\"gap-12 flex-column\">\n            {Object.keys(prices).map((key) => {\n              const price = prices[key as keyof CryptoDataT]\n              return (\n                <div key={key}>\n                  <span className=\"mr-12 capitalize\">{key}:</span>\n                  <span className={`${!price && 'opacity-20'}`}>\n                    {price ? '$' + price : initPrice}\n                  </span>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </Card>\n    </section>\n  )\n}\n\nexport default page\n```\n\n<div class=\"content-ad\"></div>\n\n우선, useEffect에서 웹 워커를 생성하고 해당 이벤트를 구독했습니다(JSON 파일 경로는 /public 디렉토리에 컴파일될 파일로 지정해야 합니다). onmessage 이벤트에서 컴포넌트 상태를 업데이트하여 가장 최신의 암호화폐 가격을 반영하도록 했습니다. JSX에서는 웹 워커를 켜는 버튼을 만들었지만, useEffect에서 페이지 로드 시 프로세스를 시작하는 방법도 있습니다.\n\n클릭 핸들러 \"startWorker\", \"stopWorker\", \"terminateWorker\"에 추가 기능이 있습니다. 이 핸들러는 필수 사항은 아니지만 기능을 조직하는 좋은 방법이라고 생각했습니다. 이들의 이름은 수행하는 작업이 명확하지만, 메시지의 \"유형\"을 잘 고려하면 웹 워커 통신을 더 예측 가능하게 만들 수 있다는 것을 다시 한 번 살펴보시면 더 나은 이해가 될 것입니다.\n\n# 결론\n\n이 예제 이외에도 더 흥미로운 용도로 웹 워커를 사용할 수 있지만, 이 소개가 개념을 파악하는 데 도움이 되었으면 좋겠습니다. 혹시 저와 같이 Next.js에서 웹 워커를 사용하는 데 어려움을 겪었다면, 이것이 적어도 올바른 방향으로 가도록 도움이 될 것입니다.","ogImage":{"url":"/assets/img/2024-06-22-HarnessingthePowerofWebWorkerswithNextjs_0.png"},"coverImage":"/assets/img/2024-06-22-HarnessingthePowerofWebWorkerswithNextjs_0.png","tag":["Tech"],"readingTime":10},{"title":"React에서 Flask와 Jinja를 사용하여 동적 OpenGraph 태그 가져오는 방법","description":"","date":"2024-06-22 14:28","slug":"2024-06-22-UsingFlaskandJinjatogetdynamicOpenGraphTagsinReact","content":"\n\n# 플라스크와 진자를 사용하는 이유\n\n리액트는 동적이고 클라이언트 측 응용 프로그램을 구축하는 데 탁월하지만, 기본적으로는 OG 태그의 서버 측 렌더링을 지원하지 않습니다. 백엔드 API로 플라스크를 사용하면 진자 템플릿을 활용하여 이러한 태그를 서버 측에서 렌더링한 다음 리액트 애플리케이션을 제공할 수 있습니다.\n\n# 필수 조건\n\n시작하기 전에 다음이 설치되어 있는지 확인하세요:\n\n<div class=\"content-ad\"></div>\n\n- Python\n- Flask\n- React\n- Node.js 그리고 npm/yarn\n\n# Flask 설정하기\n\n먼저, 기본 Flask 서버를 설정해 봅시다. 프로젝트용 새 디렉토리를 만들고 해당 디렉토리로 이동합니다. 그런 다음 가상 환경을 만들고 Flask를 설치합니다.\n\n```bash\nmkdir flask-react-og\ncd flask-react-og\npython -m venv venv\nsource venv/bin/activate\npip install Flask\n```\n\n<div class=\"content-ad\"></div>\n\n친구야, Markdown 형식으로 테이블 태그를 변경해주세요.\n\n\n| Change the table tag to Markdown format. |\n\n\n<div class=\"content-ad\"></div>\n\n이제 우리 애플리케이션의 React 부분을 설정해 봅시다. 프로젝트 디렉토리 내에서 새로운 React 앱을 초기화하세요.\n\n```js\nnpx create-react-app client\ncd client\n```\n\n# Jinja로 index.html 편집\n\nReact 폴더에서 index.html을 열어 `head` 요소에 아래 내용을 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n\n# Build the React app\n\n```js\nnpm run build\n```\n\nMove the build files to the static directory in your Flask project.\n\n\n<div class=\"content-ad\"></div>\n\n```js\ncd ..\nmkdir static\ncp -r client/build/* static/\n```\n\n# Flask로 React 서비스하기\n\nReact 앱을 위한 정적 파일을 서빙하고 라우팅을 처리하기 위해 app.py를 수정하세요:\n\n```js\nfrom flask import Flask, render_template, send_from_directory\n\napp = Flask(__name__, static_folder='static')\n\n@app.route('/')\ndef home():\n    og_data = {\n        \"title\": \"당신의 React 앱\",\n        \"description\": \"동적 OG 태그를 갖춘 멋진 React 어플리케이션입니다.\",\n        \"url\": \"http://yourdomain.com\",\n        \"image\": \"http://yourdomain.com/image.jpg\"\n    }\n    return render_template('index.html', og_data=og_data)\n\n@app.route('/<path:path>')\ndef static_proxy(path):\n    return send_from_directory(app.static_folder, path)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n<div class=\"content-ad\"></div>\n\n# 설정 테스트 중입니다\n\nFlask 서버를 시작하세요:\n\n```js\nflask run\n```\n\n브라우저를 열고 http://localhost:5000 으로 이동하세요. 그러면 HTML 헤드에 렌더링된 OG 태그가 있는 React 애플리케이션을 볼 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\nFlask, Jinja, 그리고 React를 결합하여 애플리케이션을 위해 OG 태그를 동적으로 생성할 수 있습니다. 이를 통해 소셜 미디어 플랫폼에서 공유될 때 SEO 친화적 미리보기를 동적으로 생성할 수 있습니다. 즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-06-22-UsingFlaskandJinjatogetdynamicOpenGraphTagsinReact_0.png"},"coverImage":"/assets/img/2024-06-22-UsingFlaskandJinjatogetdynamicOpenGraphTagsinReact_0.png","tag":["Tech"],"readingTime":3},{"title":"React 앱을 AWS에서 무료로 호스팅하는 방법 2부","description":"","date":"2024-06-22 14:27","slug":"2024-06-22-HowtohostReactapponAWSforfreePart2","content":"\n\n이 기사는 React 앱을 AWS에 무료로 호스팅하는 방법 시리즈의 연재물입니다. Part 1\n\nPart 1에서 우리가 이룬 것을 간단히 요약해 보면, 우리는 Ant Design 라이브러리를 사용하는 React 앱을 만들었고, 현재 시간으로 설정된 타임 피커를 보여주는 페이지를 만들었습니다. 이를 공개적으로 접근할 수 없는 S3 버킷에 배포했습니다. 그리고 HTTPS 액세스가 가능한 CloudFront를 구성하여 이를 S3 버킷과 연결했습니다.\n\n이 장에서는 백엔드 서비스 Lambda를 추가하고 API Gateway 서비스로 앱을 개선할 것입니다. \n\n![이미지](/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_0.png)\n\n<div class=\"content-ad\"></div>\n\n위의 다이어그램에서 보시다시피 S3 버킷이 람다와 통신하지 않습니다. 실제로 사용자가 브라우저에서 리액트 앱에 접속하면 앱(HTML, CSS, JS, 이미지 등)이 다운로드되어 사용자의 PC에서 브라우저 내에서 실행됩니다. 앱이 서버에서 데이터를 가져와야 할 때(우리의 경우 람다와 통신해야 할 때) — API 엔드포인트로 HTTP 요청을 보냅니다.\n\n그래서 먼저, 람다 함수를 만들어 봅시다 —\n\n![Lambda function](/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_1.png)\n\n기본적으로 다음과 같이 보일 것입니다:\n\n<div class=\"content-ad\"></div>\n\n\n![How to host React app on AWS for free - Part 2](/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_2.png)\n\n람다를 공개적으로 호출하기 위해서는 기능적인 URL을 생성해야 합니다.\n\n![How to host React app on AWS for free - Part 2](/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_3.png)\n\n기능적 URL은 API 게이트웨이에서 쉽게 사용할 수 있는 인증, 요청 변환, 모니터링, 쓸 수 있는 등 여러 단점이 있습니다. 그러나 직접 람다 함수 URL을 사용하는 경우에는 이러한 기능을 수동으로 처리해야 합니다. 우리 데모 프로젝트와 같이 작은 프로젝트의 경우 빠르고 간단한 해결책입니다.\n\n\n<div class=\"content-ad\"></div>\n\nURL이 생성되면 브라우저에서 람다를 호출할 수 있어요:\n\n![Lambda Code](/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_4.png)\n\n람다 코드를 변경해서 현재 타임스탬프를 반환해봐요:\n\n```js\nexport const handler = async (event) => {\n    // 현재 날짜와 시간 가져오기\n    const currentDate = new Date();\n    \n    // 날짜를 ISO 문자열로 포맷팅\n    const currentISODate = currentDate.toISOString();\n\n    // 현재 시간을 JSON 응답으로 반환\n    return {\n        statusCode: 200,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ currentTime: currentISODate }),\n    };\n};\n```\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_5.png\" />\n\n그리고 우리의 리액트 앱을 채택하여 함수 URL로 요청을 보내고 응답에서 타임스탬프를 사용합니다:\n\n```js\nimport React, { useEffect, useState } from 'react';\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\n\nconst App = () => {\n  const [defaultValue, setDefaultValue] = useState();\n\n  useEffect(() => {\n    fetch(`https://dbzyybb3ij4lsr2bdd3g6i5i4e0ggpyc.lambda-url.us-east-2.on.aws/`)\n    .then(response => response.json())\n    .then(data => {\n      const currentTime = moment(data.currentTime);\n      setDefaultValue(currentTime)\n    });\n  }, [])\n\n  return (\n    <div>\n      <TimePicker value={defaultValue} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n<img src=\"/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_6.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n멋지네요. 페이지를 열면 HTTP 요청이 전송되어 람다 함수를 트리거하고 응답으로 현재 타임스탬프를 받게 되어 UI에 업데이트될 겁니다.\n\n이제 프로젝트를 개선하고 API Gateway를 추가해봅시다. 이렇게 하면 리액트 앱이 람다 함수 URL을 통해 직접 통신하는 대신 API Gateway를 통해 통신하게 됩니다.\n\n![이미지](/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_7.png)\n\nHTTP API를 생성하세요. 기본 설정으로 유지하세요. 대부분의 경우 REST API 대신 HTTP API를 선택해야 합니다. 이유는 더 비용 효율적이고 가벼우며, 서버리스용으로 설계되어 성능이 우수하며 지연 시간이 짧기 때문입니다.\n\n<div class=\"content-ad\"></div>\n\nRoutes 아래에 새로운 라우트를 만들어주세요.\n\n```js\nGET /timestamp\n```\n\n![이미지](/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_8.png)\n\n![이미지](/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_9.png)\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_10.png)\n\nCORS 설정을 업데이트하세요:\n\n![이미지](/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_11.png)\n\nStages에서 API의 URL을 찾으세요:\n\n\n<div class=\"content-ad\"></div>\n\n\"다음 표를 Markdown 형식으로 변경하십시오.\n\n그리고 예상대로 작동하는지 확인하십시오:\n\n<img src=\"/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_13.png\" />\n\nReact 앱을 새 API에서 가져오도록 업데이트하고 여기까지입니다. S3 버킷에 배포된 프론트엔드와 람다에 배포된 백엔드가 완전히 서버리스인 웹 앱이 준비되었습니다.\"\n\n<div class=\"content-ad\"></div>\n\n다음 장에서는 관계형 데이터베이스를 소개하고 인증을 추가할 예정입니다.","ogImage":{"url":"/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_0.png"},"coverImage":"/assets/img/2024-06-22-HowtohostReactapponAWSforfreePart2_0.png","tag":["Tech"],"readingTime":4},{"title":"시뮬레이션 데이터로 배우는 실제 교훈 시스템 시뮬레이션 방법","description":"","date":"2024-06-22 14:24","slug":"2024-06-22-SimulatedDataRealLearningsSimulatingSystems","content":"\n\n<img src=\"/assets/img/2024-06-22-SimulatedDataRealLearningsSimulatingSystems_0.png\" />\n\n# 소개\n\n시뮬레이션은 데이터 과학 도구 상자에서 강력한 도구입니다. 이 글에서는 시스템 시뮬레이션을 통해 우리가 더 나은 전략을 수립하고 더 나은 결정을 내릴 수 있는 방법에 대해 이야기하겠습니다.\n\n이 글의 구체적인 주제는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n시스템 시뮬레이션에 대해 설명해드릴게요. 시스템 시뮬레이션 최적화와 시스템 시뮬레이션 위험 평가에 대해 알아보겠습니다.\n\n이것은 데이터 과학에서 시뮬레이션을 논의하는 다부분 시리즈 중 네 번째 부분입니다. 첫 번째 기사에서는 머신러닝 접근 방식을 테스트하는 데 시뮬레이션이 사용될 수 있는 방법을 다뤘고, 두 번째 기사에서는 디자인된 실험의 파워를 추정하는 데 시뮬레이션을 사용하는 내용을 다뤘으며, 세 번째 기사에서는 시나리오를 시뮬레이션하여 전략을 수립하는 방법을 논의했어요.\n\n이전 기사들의 링크는 다음과 같습니다:\n\n데이터 시뮬레이션이란 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n첫 번째 기사는 시뮬레이션을 정의하는 데 훨씬 더 많은 시간을 할애했습니다. 시뮬레이션이 무엇인지에 대해 보다 심층적인 대화를 위해 해당 기사를 참조하세요. 중복을 피하기 위해 여기서는 간단한 정의만 제공하겠습니다:\n\n그럼 그만두고, 시스템 시뮬레이션에 대해 이야기해봅시다!\n\n시스템 모델링\n\n많은 분야에서 데이터 과학자들은 시스템에 관한 질문에 답변해야 합니다. 시스템은 목적을 달성하기 위해 설계된 연결된 구성 요소들의 집합입니다. 시스템은 우리 주변에 많이 있습니다. 항공 운영, 공급망, 대중 교통, 전기 및 배관 시스템 등이 그 예시입니다.\n\n<div class=\"content-ad\"></div>\n\n시스템을 시뮬레이션할 때는 시스템이 작동하는 방식에 대한 좋은 아이디어가 필요합니다; 시스템이 어떻게 작동하는지에 대한 정말 좋은 아이디어가 필요합니다. 시스템의 구성 요소와 그들이 어떻게 연결되는지에 대해 확실한 이해를 가져야 합니다. 이를 위해 비즈니스 파트너나 도메인 전문가와 상의하거나, 직접 도메인 전문가가 되는 것이 필요합니다 (데이터 과학자가 자신들의 도메인 및 데이터 과학 전문가가 될 수 없다는 규칙은 없습니다!).\n\n![이미지](/assets/img/2024-06-22-SimulatedDataRealLearningsSimulatingSystems_1.png)\n\n시스템 시뮬레이션에는 두 가지 주요 요소가 있습니다. (1) 시스템을 시뮬레이션하고 (2) 시스템을 통해 전달할 데이터를 시뮬레이션하는 것입니다. 시스템의 프레임워크에 대한 좋은 이해를 갖게 되면, 좋아하는 언어를 사용하여 시뮬레이션 시스템을 프로그래밍할 수 있습니다. 그런 다음 시스템을 통해 전달하고 싶은 어떤 종류의 데이터든 시뮬레이트할 수 있습니다. 이 연습의 가치는 우리가 시스템에 입력하는 시뮬레이션 데이터로부터 출력 KPI를 수집하는 것입니다. 우리는 상상할 수 있는 어떤 유효한 입력이라도 시뮬레이트할 수 있으며, 시뮬레이션된 입력 하에서 예상할 수 있는 KPI의 추정치를 얻을 수 있습니다. 이는 매우 강력할 수 있습니다!\n\n시뮬레이션 시스템과 시뮬레이션 데이터를 조정함으로써 가치 있는 통찰력을 많이 얻을 수 있습니다. 시뮬레이션 데이터로 시스템 모델링은 종종 (1) 최적화 및 (2) 리스크 평가에 사용됩니다. 다음에는 이러한 포인트를 다루겠습니다!\n\n<div class=\"content-ad\"></div>\n\n계속하기 전에, 간단한 고지사항이 있습니다. 때때로 시뮬레이션은 부정(cheating)된 느낌을 줄 수 있습니다 - 왜냐하면 우리는 단지 데이터를 만들어내는 것이기 때문에, 우리의 시뮬레이션이 합리적인 가정에 기반을 두고 있는지 철저히 확인하지 않으면 그렇습니다. 생각해 보세요, 우리가 얻는 통찰력은 우리가 만드는 시뮬레이션만큼이나 좋습니다. 이상한 것을 넣으면, 이상한 것이 나옵니다! 결과를 의사 결정에 활용하기 전에 시뮬레이션에 들어가는 가정을 신중하게 검증했는지를 꼭 확인하세요.\n\n알겠어요, 엄격한 말은 여기서 그만두겠습니다! 이제 예시를 설정하고 시스템 시뮬레이션을 사용하여 최적화와 위험 평가를 어떻게 할 수 있는지 알아보겠습니다!\n\n시스템 모델링 시뮬레이션 예시: 식료품 점포 줄 서는 곳\n\n이 기사의 나머지 부분은 예시를 통해 시스템 시뮬레이션의 힘을 보여줄 것입니다. 저는 2000년대 초반 TV 쇼 '미스터리헌터(Myth Busters)'의 팬입니다. 이 예시를 그들이 시즌 14, 에피소드 5에서 진행한 실험에서 영향을 받았습니다. 이 에피소드에서 그들은 두 가지 식료품 점포 줄 서는 곳 설정을 비교했습니다. 우리는 이 두 설정을 미세 시스템을 사용해서 테스트할 것이고, 물리적인 시스템이 아닌 시뮬레이션 시스템을 활용할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n다음은 설정입니다: 두 가지 다른 식료품 점 줄 구성을 비교하려고 합니다. (1) 여러 줄, 각각 한 대의 레지스터가 있는 경우와 (2) 여러 레지스터가 있는 한 줄의 경우입니다. 첫 번째 구성은 각 레지스터를 위한 줄이 있고, 두 번째 구성은 여러 레지스터로 이어지는 단일 줄이 있습니다. 아래 시각적 표현을 참조하세요. 쇼핑 경험에서 둘 다 보았을 것입니다.\n\n![image](/assets/img/2024-06-22-SimulatedDataRealLearningsSimulatingSystems_2.png)\n\n우리는 Python에서 시스템 시뮬레이션을 수행할 것입니다. 주로 추적할 메인 메트릭은 줄의 마지막 고객이 기다리는 시간입니다. 따라서 코드는 각 레지스터에 무작위 계산 시간(항목을 스캔하고 지불하는 데 걸리는 시간)을 가진 고객들로 줄 또는 줄을 채우고, 마지막 고객이 기다려야 하는 시간을 추적합니다.\n\n다음은 여러 줄과 여러 레지스터를 시뮬레이션하는 함수입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\ndef multiple_lines_trial(number_lines, customers):\n\n    '''\n      각 레지스터별로 대기 중인 고객을 보관하는 리스트의 빈 리스트를 만듭니다.\n\n      입력:\n        number_lines (int) : 체크아웃 시설의 라인 및 레지스터 수\n        customers (list)   : 각 고객의 체크아웃 시간을 나타내는 리스트\n                             고객마다 한 번씩\n      반환:\n        total_wait_time (float) : 마지막 고객이 레지스터에 도착하기까지 기다린 총 시간\n    '''\n    \n    # 각 레지스터별 빈 리스트를 생성\n    lines = [[] for i in range(number_lines)]\n    \n    # 마지막 고객의 대기시간을 계산해야 하므로 마지막 고객을 제외한 나머지를 복사\n    customers_cp = copy(customers)\n    last_customer = customers_cp.pop()\n    \n    # 각 고객은 볼 수있는 가장 짧은 라인으로 이동합니다.\n    while customers_cp:\n        \n        # 가장 짧은 라인에 고객 추가\n        temp_cust = customers_cp[0]\n        customers_cp = customers_cp[1:]\n        \n        line_length_list = [len(lines[i]) for i in range(number_lines)]\n        shortest_line = line_length_list.index(min(line_length_list))\n        \n        lines[shortest_line].append(temp_cust)\n        \n    # 마지막 고객도 가장 짧은 라인을 선택합니다.\n    # 마지막 고객이 기다린 총 체크아웃 시간은 가장 짧은 라인의 총합입니다.\n    line_length_list = [len(lines[i]) for i in range(number_lines)]\n    shortest_line = line_length_list.index(min(line_length_list))\n    \n    total_wait_time = sum(lines[shortest_line])\n    \n    return total_wait_time\n```\n\n이제 한 줄에 여러 레지스터가 있는 경우를 시뮬레이트하는 함수가 있습니다:\n\n```js\ndef single_line_trial(cashiers, customers):\n    \n    '''\n      단일 라인으로 다중 레지스터가 있는 체크 아웃 구성의 마지막 고객의 대기 시간을 시뮬레이션합니다.\n\n      입력:\n        number_lines (int) : 체크아웃 시설의 라인 및 레지스터 수\n        customers (list)   : 각 고객의 체크아웃 시간을 나타내는 리스트\n                             고객마다 한 번씩\n      반환:\n        total_wait_time (float) : 마지막 고객이 레지스터에 도착하기까지 기다린 총 시간\n    '''\n    # 대기 시간을 나타내는 빈 리스트\n    wait_time = []\n        \n    # 체크아웃중인 고객 목록 생성\n    custm_at_checkout = customers[0:cashiers]\n    \n    # 레지스터에 대기중인 고객 수 만큼의 고객을 제거\n    customers = customers[cashiers:len(customers)]\n    \n    # 각 고객에 대해 반복\n    for i in customers:\n        \n        # 체크 아웃하는 데 가장 빨리 끝나는 시간 선택\n        done_at_checkout = min(custm_at_checkout)\n        \n        # 체크 아웃되는 고객의 인덱스 가져오기\n        done_index = custm_at_checkout.index(done_at_checkout)\n        \n        # 각 고객의 체크아웃 시간에서 가장 짧은 시간을 뺍니다.\n        for j, cust in enumerate(custm_at_checkout):\n            custm_at_checkout[j] -= done_at_checkout\n\n        # 레지스터에서 체크아웃된 고객을 제거\n        custm_at_checkout.pop(done_index)\n       \n        # 다음 라인에 대기 중인 다음 고객 추가\n        if customers:\n            custm_at_checkout.append(customers[0])\n        else:\n            # 더 이상 대기 중인 고객이 없는 경우 종료\n            break\n        \n        # 레지스터에 대기 중인 고객 중 가장 빨리 체크 아웃이 끝난 고객을 대기 목록에서 제거\n        customers = customers[1:]\n        \n        # 대기 시간을 목록에 추가\n        wait_time.append(done_at_checkout)\n        \n    # 총 대기 시간 합산\n    total_wait_time = sum(wait_time)\n         \n    return total_wait_time\n```\n\n이제 두 가지 구성 아래에서 한 명의 고객의 대기 시간을 시뮬레이션하는 코드가 완성되었습니다! 물론 한 명의 고객의 경험을 시뮬레이션하여 큰 결정을 내릴 수는 없습니다. 여러 명의 고객 대기 시간을 시뮬레이션하는 코드를 함께 작성해 보겠습니다.\n\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경해 드리겠습니다.\n\n<div class=\"content-ad\"></div>\n\n최적화\n\n좋아, 모든 것을 설정하고 인사이트를 생성하기 준비가 되었어요! 여러 번 언급한 대로, 우리는 우리의 설정을 사용하여 최적의 결정을 내릴 수 있어요.\n\n가장 최적인 라인 구성을 결정해야 해요. 우리가 지금 가지고 있는 프레임워크로 이 답변에 도달하기 위해 시뮬레이션을 실행할 수 있어요! 여러 가지 가능한 경우에 걸쳐 두 구성을 비교하기 위해 레지스터 직원 수와 줄 선 손님 수를 다양하게 변화시키며 여러 번 시뮬레이션을 실행해봐요.\n\n두 접근 방식을 비교하기 위해 다른 함수를 호출하는 함수를 또 작성해봅시다:\n\n<div class=\"content-ad\"></div>\n\n```js\ndef compare_trials(cashiers,\n                   customer_number,\n                   num_trials):\n    '''\n      두 줄 구성의 여러 시행을 비교합니다.\n      각 시행이 짝을 이뤄 비슷한 고객 입력을 두 줄에 같이 전달하고 KPI를 비교합니다.\n\n      입력: \n        cashiers (int)        : 캐셔나 레지스터의 수\n        customer_number (int) : 시스템에 있는 고객 수\n        num_trials (int)      : 실행할 시행 수\n\n      출력:\n        single_line_watis (list) : 각 단일 줄 시행의 마지막 고객의 대기 시간 목록\n        multi_line_waits (list)  : 각 다중 줄 시행의 마지막 고객의 대기 시간 목록\n        \n    '''\n\n    single_line_waits = []\n    multi_line_waits = []\n    \n    for _ in range(num_trials):\n        customers = list(np.random.exponential(0.5, customer_number))\n        \n        single_line_wait = single_line_trial(cashiers, customers)\n        single_line_waits.append(single_line_wait)\n        \n        multi_line_wait = multiple_lines_trial(cashiers, customers)\n        multi_line_waits.append(multi_line_wait)        \n    \n    return single_line_waits, multi_line_waits\n```\n\n위 코드를 작성한 후, 이제 시뮬레이션을 실행하고 결과를 시각화하는 몇 가지 코드를 만들어 보겠습니다:\n\n```js\ncashier_based_waits = {}\n\n# 다른 캐셔 수에 대해 반복\nfor cashier in [2, 5, 8]:\n    \n    temp_single_wait_times = []\n    temp_multi_wait_times = []\n    \n    # 다른 고객 수에 대해 반복\n    for cust_num in range(10, 150):\n        temp_single_line, temp_multi_line = compare_trials(cashier,\n                                                           cust_num,\n                                                           150)\n        # KPI를 모으고 리스트에 저장\n        temp_single_mean = np.mean(temp_single_line)\n        temp_multi_mean = np.mean(temp_multi_line)\n        \n        temp_single_wait_times.append(temp_single_mean)\n        temp_multi_wait_times.append(temp_multi_mean)\n        \n    cashier_based_waits[cashier] = (temp_single_wait_times,\n                                    temp_multi_wait_times)\n```\n\n그래프를 그리는 코드는 다음과 같습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n# 서브플롯 생성\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))  # 1행, 3열\n\nx = range(10, 150)\n\n# 각 서브플롯에 데이터 플롯\naxes[0].plot(x, cashier_based_waits[2][0], label='단일 라인')\naxes[0].plot(x, cashier_based_waits[2][1], label='다중 라인')\naxes[0].legend()\naxes[0].set_title('2명의 캐셔')\naxes[0].set_xlabel('고객 수')\naxes[0].set_ylabel('대기 시간')\naxes[1].plot(x, cashier_based_waits[5][0], label='단일 라인')\naxes[1].plot(x, cashier_based_waits[5][1], label='다중 라인')\naxes[1].set_title('5명의 캐셔')\naxes[1].set_xlabel('고객 수')\naxes[1].set_ylabel('대기 시간')\naxes[1].legend()\naxes[2].plot(x, cashier_based_waits[8][0], label='단일 라인')\naxes[2].plot(x, cashier_based_waits[8][1], label='다중 라인')\naxes[2].set_title('8명의 캐셔')\naxes[2].set_xlabel('고객 수')\naxes[2].set_ylabel('대기 시간')\naxes[2].legend()\n\n# 레이아웃 조정\nplt.tight_layout()\n\nplt.savefig('wait_times.png')\n\n# 플롯 표시\nplt.show()\n```\n\n그래, 그것은 많은 작업이었지만, 우리는 마침내 분석 결과를 얻었어요. 한번 살펴보자!\n\n<img src=\"/assets/img/2024-06-22-SimulatedDataRealLearningsSimulatingSystems_3.png\" />\n\n여기서 왜 이런 결과가 나왔을까요? 2명의 캐셔일 때는 두 방식이 본질적으로 같아 보이지만, 캐셔 수가 늘어날수록 차이가 나타나기 시작합니다. 다중 라인 방식은 더 많은 분산을 보이기 시작하고 거의 항상 단일 라인 방식보다 높아집니다. 이는 이해가 됩니다. 왜냐하면 캐셔가 더 많을수록 각 줄이 짧아지기 때문에 (고객 수가 같은 경우) 더 많은 느린 고객이 무작위로 줄에 있을 확률이 높아집니다 (소 샘플 크기의 데이터의 분산에 대해 생각해 보세요). 단일 라인 방식은 여러 레지스터가 서비스하는 한 줄이 있기 때문에 동일한 ‘소 샘플 크기’ 현상에 영향을 받지 않습니다. 이러한 결과를 고려할 때, 외부 요인을 고려할 필요가 없고 시뮬레이션이 현실 세계를 대표한다고 판단된다면 대기 시간이 짧고 덜 변동적인 단일 라인 구성을 사용해야합니다.\n\n\n<div class=\"content-ad\"></div>\n\n결정을 내릴 필요가 없고 다시 돌아보지 않아도 돼요! 한 줄 전략으로 전진할 결정을 내린 다음, 저희 매장에서 실제 대기 시간을 관찰하여 예상 결과가 나타나는지 확인할 수 있어요. 싱글 라인을 다중 라인보다 더 우선한다는 저희 시뮬레이션이 올바르다고 100% 확신하지 않는다면 어떨까요? 시뮬레이션 결과를 사용하여 대부분의 매장을 싱글 라인 설정으로 변경(우리가 최적이라고 생각하는 이유로)하고 일부 매장은 다중 라인으로 설정할 수 있어요. 그 후 시뮬레이션 결과가 실제 세계에서 어떻게 진행되는지 관찰할 수 있어요. 시뮬레이션에 대해 100% 확신이 없더라도 우리가 배운 것을 활용하여 실제 세계 실험에서 더 많은 데이터를 수집하는 방법에 영향을 줄 수 있어요.\n\n위험 평가\n\n시스템 모델링과 시뮬레이트된 데이터는 시스템 내의 잠재적 문제, 취약점, 병목 현상을 찾는 데 사용될 수 있어요. 이 분야에서 시스템을 모델링한 후, 시스템의 취약점을 드러내기 위해 극단적인 데이터를 시뮬레이트할 수 있어요.\n\n항공사를 위해 시스템 분석을 실시하는 경우, 덴버 공항이 나쁜 날씨로 인해 2일 동안 휴장된 상황을 나타내는 데이터를 시뮬레이트할 수 있어요. 그러면 이 극단적인 시나리오가 우리 시스템에 어떻게 영향을 미치는지 어디서 얼마나 심각한지를 관찰할 수 있어요. 식료품점 설정의 예로, 레지스터에서 손님 중 소수가 실제로 매우 긴 시간을 소비하는 경우(예: 수표로 결제, 모든 제품에 쿠폰 사용, 보육원용 식료품 구매)에 어떤 일이 벌어질지 시뮬레이트할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n시스템 모델에 극단적인 데이터를 시뮬레이션하고 입력함으로써 우리는 시스템이 압력 속에서 어디서 망가지거나 부담을 견디지 못할 지에 대한 통찰력을 얻을 수 있습니다. 이 지식을 통해 우리는 시스템에 극단적 상황에 대비하는 보호장치나 다른 조치를 취할 수 있습니다.\n\n우리가 시뮬레이션된 데이터를 수정하여 고객 중 10%가 계산대에서 3배 더 오래 걸리게 하고, 이로 인해 대기 시간이 어떻게 영향을 받는지 살펴보겠습니다.\n\n여기서, compare_trials 함수에 stress_factor 및 stress_pct 매개변수를 추가했습니다. 이러한 매개변수를 사용하면 사용자가 대기 시간 배율인 stress_factor를 일정 비율의 고객(stress_pct)에 추가할 수 있습니다.\n\n여기가 업데이트된 코드입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\ndef compare_trials(cashiers,\n                   customer_number,\n                   num_trials,\n                   stress_factor = 0,\n                   stress_pct = 0.10):\n\n '''\n      두 줄 구성의 여러 시도를 비교합니다.\n      시스템을 스트레스받게하여 체크아웃 시간이 증가하는 고객을 만들 수 있습니다.\n      각 시행이 짝을 이루는 비교임을 유의하십시오. 동일한\n      고객 입력을 두 줄에 모두 전달하고 KPI를 비교합니다.\n\n      입력:\n        cashiers (int)                 : 캐셔 또는 현금 등록기 수\n        customer_number (int)          : 시스템의 고객 수\n        num_trials (int)               : 실행될 시행 수\n        stress_factor (float, def = 0) : 고객에게 여유 시간에 대한 곱셈기\n                                         선택되는 경우 고객의 대기 시간\n        stress_pct (float, def = 0.1)  : 확률. 무작위로 선택된 고객 중\n                                         스트레스 고객으로 선택될 고객의 비율\n\n      출력:\n        single_line_watis (list) : 각 단일 라인 시행의 마지막 고객의 대기 시간 목록\n\n        multi_line_waits (list)  : 각 다중 라인 시행의 마지막 고객의 대기 시간 목록\n    '''\n\n    single_line_waits = []\n    multi_line_waits = []\n    \n    for _ in range(num_trials):\n        customers = list(np.random.exponential(0.5, customer_number))\n        \n        # 스트레스 요인 추가\n        if stress_factor > 0:\n            \n            num_slow_custs = int(customer_number * stress_pct)\n            \n            slow_cust_index = np.random.choice(range(0, customer_number),\n                                               num_slow_custs)\n            \n            for i in slow_cust_index:\n                customers[i] = customers[i]*stress_factor\n            \n        \n        single_line_wait = single_line_trial(cashiers, customers)\n        single_line_waits.append(single_line_wait)\n        \n        multi_line_wait = multiple_lines_trial(cashiers, customers)\n        multi_line_waits.append(multi_line_wait)        \n    \n    return single_line_waits, multi_line_waits\n```\n\n이 새로운 기능을 활용하여, 3명의 캐셔와 100명의 고객이 스트레스 유무로 두 가지 시나리오를 실행해보겠습니다. 그 후, 우리가 선호하는 단일 줄 구성에 대해 스트레스가 대기 시간에 미치는 영향을 살펴보겠습니다.\n\n```js\nsingle_line_stress, multi_line_stress = compare_trials(3,\n                                                   100,\n                                                   100,\n                                                   stress_factor = 3,\n                                                   stress_pct = 0.1)\n\nsingle_line_no_stress, multi_line_no_stress = compare_trials(3,\n                                                   100,\n                                                   100)\n\nplt.hist(single_line_stress, label = '스트레스 시나리오', alpha = 0.5)\nplt.hist(single_line_no_stress, label = '기준 시나리오', alpha = 0.5)\nplt.legend()\nplt.savefig('stressed_dist.png')\nplt.show()\n```\n\n<img src=\"/assets/img/2024-06-22-SimulatedDataRealLearningsSimulatingSystems_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n와우, 10% 느린 고객들이 우리 라인에서 문제를 일으키네요! 우리는 평균 대기 시간이 늘어나는 것뿐만 아니라 분산도 높아졌다는 것을 알 수 있어요! 이제 느린 고객들과 관련된 도전에 대한 어려움을 정량화할 수 있어요. 스트레스 테스트 결과가 저희의 허용 한계를 초과한다고 느껴진다면, 잠재적인 완화 전략을 살펴볼 수 있을 거예요. 아마도 다른 지역에서 일하는 보조 직원을 추가로 고용해서 필요할 때 호출하여 평소에 열지 않는 레지스터에서 느린 고객을 처리할 수 있을 거예요. 또한, 극도로 느린 대기 시간을 일으키는 요인을 찾아내고, 캐셔들에게 과정을 가속화하는 기술을 교육할 수도 있을 거예요.\n\n가장 중요한 점은 우리 시스템에 특정 압력의 영향을 정량화할 수 있고, 이해를 바탕으로 극단적인 상황에서도 시스템이 내한 범위 내에서 성능을 발휘할 수 있도록 상응하는 대책을 만들 수 있다는 것이에요.\n\n마치며\n\n시스템 시뮬레이션은 현실 세계 시스템에 대한 통찰력을 얻기 위한 비용 효율적이고 유연한 방법입니다. 모의 시스템과 데이터는 시스템을 최적화하여 효율성을 높이는 데 사용할 수 있습니다. 또한 극단적인 시나리오에 대한 시스템을 스트레스 테스트하기 위해 사용될 수 있습니다. 모의 시나리오와 데이터가 실제 세계를 대표한다는 것을 확실히 해야 합니다. 만약 생성한 통찰력에 대한 신뢰가 있다면 즉시 시행할 수 있지만, 이를 통해 추가 정보에 대한 확신을 얻기 위해 테스트 전략을 통해 테스트할 수도 있습니다.","ogImage":{"url":"/assets/img/2024-06-22-SimulatedDataRealLearningsSimulatingSystems_0.png"},"coverImage":"/assets/img/2024-06-22-SimulatedDataRealLearningsSimulatingSystems_0.png","tag":["Tech"],"readingTime":15},{"title":"데이터 프로파일링을 간편하게 Python DataProfile 소개","description":"","date":"2024-06-22 14:22","slug":"2024-06-22-IntroducingDataProfileSimplifyYourDataProfilingTasksinPython","content":"\n\n<img src=\"/assets/img/2024-06-22-IntroducingDataProfileSimplifyYourDataProfilingTasksinPython_0.png\" />\n\n# 개요\n\n데이터 프로파일링은 데이터 분석 과정에서 중요한 단계입니다. 이는 데이터를 더 잘 이해하고 이상 현상을 식별하며 추가 분석을 위해 준비하는 데 도움이 됩니다. 저는 데이터 프로파일링 작업을 간단하게 만들고 자동화하기 위해 설계된 새로운 Python 라이브러리인 DataProfile을 소개해 드리게 되어 기쁩니다.\n\n# DataProfile이란?\n\n<div class=\"content-ad\"></div>\n\nDataProfile은 여러분의 데이터셋에 대해 포괄적인 데이터 프로필을 생성하는 Python 라이브러리입니다. Pandas DataFrame을 입력으로 받아 각 열에 대해 고유 레코드 수, 중복, 널 값 등 여러 측면을 분석합니다. 이 분석은 DataFrame의 각 열에 대해 수행되며 데이터에 대한 자세한 통찰력을 제공합니다.\n\n# 핵심 기능\n\n- Count: 열 내 전체 레코드 수를 계산합니다.\n- Count Distinct: 열 내 고유 레코드 수를 결정합니다.\n- Unique: 열 내 고유 레코드 수를 세어줍니다.\n- ID Probability: 데이터 유형, 열 이름 및 고유성을 기반으로 열이 ID인지에 대한 가능성을 추정합니다.\n- Email Probability: \" @\" 기호와 유효한 도메인을 확인하여 열이 이메일 주소를 포함할 확률을 계산합니다.\n- Duplicate: 열 내 중복 레코드 수를 계산합니다.\n- Numeric: 열 내 모든 레코드가 숫자인지 확인합니다.\n- Letter: 열 내 모든 레코드가 문자열인지 확인합니다.\n- Bool: 열 내 모든 레코드가 부울인지 확인합니다.\n- Empty: 열 내 빈 레코드 수를 계산합니다.\n- Zero: 열 내 0의 수를 계산합니다.\n- Null: 열 내 널 레코드 수를 계산합니다.\n\n# 설치 요구 사항\n\n<div class=\"content-ad\"></div>\n\nDataProfile을 사용하려면 다음 라이브러리들이 설치되어 있어야 해요:\n\n- Pandas\n- Numpy\n- Prettytable\n\n# 별로 어렵지 않아요!\n\npip를 사용해서 DataProfile을 손쉽게 설치할 수 있어요:\n\n<div class=\"content-ad\"></div>\n\n```js\r\npip install dataprofile\r\n```\r\n\r\n당신의 코드에서 Dataprofile 라이브러리를 가져오세요:\r\n\r\n```js\r\nimport dataprofile as dp\r\n```\r\n\r\nDataFrame을 만들거나 가져오세요:\n\n<div class=\"content-ad\"></div>\n\n```python\n# 이 예시에서는 Pandas를 사용하여 CSV 파일 형식의 DataFrame을 생성했습니다:\n\nimport pandas as pd\n\n# 데이터셋을 불러옵니다\ndf = pd.read_csv('your-dataset.csv')\n\n# 데이터 프로필을 생성합니다\nprofile = dp.dataprofile(df)\n\n# 프로필을 출력합니다\nprint(profile)\n```\n\nDataFrame에서 dataprofile 함수를 사용해보세요:\n\n```python\nprint(dp.dataprofile(파일))\n```\n\n결과 (예시): \n\n\n<div class=\"content-ad\"></div>\n\n\n+-----------------+-------+--------+----------+---------------+------------------+-----------+---------+--------+-------+-------+---------+------+--------+------+--------+\r\n|     columns     | count | unique | unique_% | id_probabilty | email_probabilty | duplicate | numeric | letter |  bool | empty | empty_% | cero | cero_% | null | null_% |\r\n+-----------------+-------+--------+----------+---------------+------------------+-----------+---------+--------+-------+-------+---------+------+--------+------+--------+\r\n|  respondent_id  |  1798 |  1798  |   100%   |      100%     |        0%        |     0     |   True  | False  | False |   0   |    0%   |  0   |   0%   |  0   |   0%   |\r\n|      q0011      |  1798 |   24   |    1%    |       0%      |        0%        |    1774   |  False  |  True  | False |   0   |    0%   |  0   |   0%   |  0   |   0%   |\r\n|      q0021      |  1798 |   3    |    0%    |       0%      |        0%        |    1795   |  False  |  True  | False |   0   |    0%   |  0   |   0%   |  0   |   0%   |\r\n|      q0022      |  1798 |   7    |    0%    |       0%      |        0%        |    1791   |  False  | False  | False |   0   |    0%   |  0   |   0%   |  0   |   0%   |\r\n|    q0023_0001   |  1798 |   2    |    0%    |       0%      |        0%        |    1796   |  False  | False  |  True |  1285 |   71%   |  0   |   0%   |  0   |   0%   |\r\n|    q0023_0002   |  1798 |   2    |    0%    |       0%      |        0%        |    1796   |  False  | False  |  True |  1680 |   93%   |  0   |   0%   |  0   |   0%   |\r\n|    q0023_0003   |  1798 |   2    |    0%    |       0%      |        0%        |    1796   |  False  | False  |  True |  858  |   47%   |  0   |   0%   |  0   |   0%   |\r\n|    q0023_0004   |  1798 |   2    |    0%    |       0%      |        0%        |    1796   |  False  | False  |  True |  1579 |   87%   |  0   |   0%   |  0   |   0%   |\r\n|    q0023_0005   |  1798 |   2    |    0%    |       0%      |        0%        |    1796   |  False  | False  |  True |  1615 |   89%   |  0   |   0%   |  0   |   0%   |\r\n|    q0023_0006   |  1798 |   2    |    0%    |       0%      |        0%        |    1796   |  False  | False  |  True |  1709 |   95%   |  0   |   0%   |  0   |   0%   |\r\n|    q0023_0007   |  1798 |   2    |    0%    |       0%      |        0%        |    1796   |  False  | False  |  True |  1686 |   93%   |  0   |   0%   |  0   |   0%   |\r\n|    q0023_0008   |  1798 |   2    |    0%    |       0%      |        0%        |    1796   |  False  | False  |  True |  1702 |   94%   |  0   |   0%   |  0   |   0%   |\r\n\n\r\n# 결론\r\n\r\nDataProfile은 데이터 프로파일링 프로세스를 자동화하여 시간과 노력을 절약할 수 있는 강력한 도구입니다. 쉽게 사용할 수 있는 기능과 포괄적인 분석 능력을 통해 데이터에 대한 가치 있는 통찰력을 제공하여 데이터를 준비하고 정리하는 작업을 더 쉽게 만들어줍니다. DataProfile을 사용하여 데이터 프로파일링 작업을 간편하게 처리해 보세요!\r\n\r\n자세한 정보, 상세 설명 및 추가 예제는 GitHub 리포지토리를 방문해주세요.\r\n\n\n<div class=\"content-ad\"></div>\n\n앞으로의 업데이트 내용을 확인하려면 PyPI 프로젝트를 방문해주세요.","ogImage":{"url":"/assets/img/2024-06-22-IntroducingDataProfileSimplifyYourDataProfilingTasksinPython_0.png"},"coverImage":"/assets/img/2024-06-22-IntroducingDataProfileSimplifyYourDataProfilingTasksinPython_0.png","tag":["Tech"],"readingTime":5}],"page":"16","totalPageCount":154,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":0},"__N_SSG":true}