{"pageProps":{"post":{"title":"이미지를 최적화하는 Express 미들웨어 코드 작성법 성능 향상 방법","description":"","date":"2024-06-27 17:38","slug":"2024-06-27-Codeanexpressmiddlewaretooptimizeyourimages","content":"\n\n\n![이미지](/assets/img/2024-06-27-Codeanexpressmiddlewaretooptimizeyourimages_0.png)\n\n이 게시물에서는 이미지를 최적화하기 위해 sharp 패키지를 활용하는 express.js 미들웨어를 구현할 것입니다.\n\n중요 사항 요약; 이 스토리의 끝에 코드 전체가 gist로 제공됩니다.\n\n초기화\n\n\n<div class=\"content-ad\"></div>\n\n```js\r\nmkdir express-image-opt-middleware\ncd express-image-opt-middleware\nnpm init -y\ntouch index.js\ntouch utils.js\r\n```\n\n이제 의존성을 설치해 봅시다:\n\n```js\r\nnpm i express sharp\nnpm i -D nodemon\r\n```\n\nnpm 스크립트를 구성하세요:\n\n<div class=\"content-ad\"></div>\n\n```json\n// package.json\n{\n  ...,\n  \"scripts\": {\n    \"dev\": \"nodemon index.js\",\n    \"start\": \"node index.js\"\n  },\n  ...\n}\n```\n\nExpress 서버를 초기화합니다:\n\n```js\n// index.js\n\nconst express = require('express');\nconst fs = require('fs/promises');\nconst path = require('path');\n\nconst app = express();\n\napp.listen(8080, () => {\n  console.log(\"서버가 http://localhost:8080에서 실행 중입니다.\");\n});\n```\n\n보통 express를 통해 정적 자산을 제공하려면 내장된 express.static 미들웨어를 사용합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\napp.use(express.static('public'));\n```\n\n이 미들웨어는 사용하지 않아도 됩니다. 왜냐하면 우리가 직접 구현할 것이기 때문입니다. 이미지를 표시하려고 할 때 이해해야 할 첫 번째 것은 이미지를 표시하려면 특정 URL로 GET 요청을 하는데, 서버에서 이미지를 가져와 표시하는 것입니다. 여기서 우리가 하는 일은 이 요청을 가로채서 URL에 제공된 쿼리 매개변수를 기반으로 필요할 때 최적화된 이미지를 제공하는 것입니다.\n\n```js\n// index.js\n\napp.get('*', async (req, res, next) => {\n  const storagePath = path.join(__dirname, 'public');\n  const fileName = req.params[0] ?? '';\n  const filePath = path.join(storagePath, fileName);\n\n  try {\n    const stats = await fs.stat(filePath);\n    if (!stats.isFile()) return next();\n\n    // * 여기에 코드를 추가합니다\n  } catch(err) {\n    console.error(err);\n    res.status(404).send('파일을 찾을 수 없습니다');\n  }\n});\n```\n\n요청된 이미지에 기반하여 적절한 Content-Type 헤더를 설정해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// utils.js\nconst path = require('path');\n\nexports.getContentType = fileName => {\n  const ext = path.extname(fileName).slice(1);\n  let contentType;\n  \n  switch (ext) {\n    case 'jpg':\n    case 'jfif':\n    case 'jpeg':\n      contentType = 'image/jpeg';\n      break;\n    case 'png':\n      contentType = 'image/png';\n      break;\n    case 'webp':\n      contentType = 'image/webp';\n      break;\n    case 'svg':\n      contentType = 'image/svg+xml';\n      break;\n    default:\n      contentType = 'application/octet-stream';\n  }\n\n  return contentType;\n};\n```\n\n```js\n// index.js\n\n// * setting the Content-Type\n// * make sure to require getContentType\nconst contentType = getContentType(fileName);\nres.setHeader('Content-Type', contentType);\n  \n// * serve svg and unknown files as they are\nif (['image/svg+xml', 'application/octet-stream'].includes(contentType)) {\n  const readStream = createReadStream(filePath);\n  readStream.pipe(res);\n  readStream.on('error', next);\n  return;\n}\n```\n\nfs/promises API는 createReadStream 함수를 제공하지 않습니다. 두 방법을 모두 활용하려면 다음과 같이 사용하십시오:\n\n```js\nconst { createReadStream } = require('fs');\nconst fs = require('fs/promises');\n```\n\n<div class=\"content-ad\"></div>\n\n이 미들웨어는 다음 쿼리 매개변수를 이해합니다:\n\n- q — 품질\n- w — 너비\n- h — 높이\n\n모든 이 매개변수들이 선택 사항임을 유의하세요.\n\nw 또는 h 중 하나만 지정된 경우, 이미지의 원래 종횡비가 다른 차원을 계산하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\r\n// index.js\n\n// * sharp 패키지를 포함해야 합니다\nconst image = sharp(filePath);\nconst metadata = await image.metadata();\nconst aspectRatio = metadata.width / metadata.height;\nconst quality = Math.trunc(+(req.query.q ?? 100));\nlet width = Math.trunc(+(req.query.w ?? 0));\nlet height = Math.trunc(+(req.query.h ?? 0));\n\n// * 너비만 지정된 경우\nif (width && !height) {\n  height = Math.round(width * (1 / aspectRatio));\n\n  // * 높이만 지정된 경우\n} else if (height && !width) {\n  width = Math.round(height * aspectRatio);\n\n  // * 둘 다 지정되지 않은 경우\n} else {\n  width = metadata.width;\n  height = metadata.height;\n}\n\nconst stream = image\n  .resize({ width, height })\n  .jpeg({ quality, progressive: true, force: false })\n  .webp({ quality, progressive: true, force: false })\n  .png({ quality, progressive: true, force: false });\n\nstream.pipe(res);\nstream.on('error', next);\r\n```\n\nMiddleware의 전체 코드는 다음 gist에 있습니다: [link](gist 주소)\r\n","ogImage":{"url":"/assets/img/2024-06-27-Codeanexpressmiddlewaretooptimizeyourimages_0.png"},"coverImage":"/assets/img/2024-06-27-Codeanexpressmiddlewaretooptimizeyourimages_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-27-Codeanexpressmiddlewaretooptimizeyourimages_0.png\" alt=\"이미지\"></p>\n<p>이 게시물에서는 이미지를 최적화하기 위해 sharp 패키지를 활용하는 express.js 미들웨어를 구현할 것입니다.</p>\n<p>중요 사항 요약; 이 스토리의 끝에 코드 전체가 gist로 제공됩니다.</p>\n<p>초기화</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">mkdir express-image-opt-middleware\ncd express-image-opt-middleware\nnpm init -y\ntouch index.<span class=\"hljs-property\">js</span>\ntouch utils.<span class=\"hljs-property\">js</span>\n</code></pre>\n<p>이제 의존성을 설치해 봅시다:</p>\n<pre><code class=\"hljs language-js\">npm i express sharp\nnpm i -D nodemon\n</code></pre>\n<p>npm 스크립트를 구성하세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-comment\">// package.json</span>\n<span class=\"hljs-punctuation\">{</span>\n  ...<span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"dev\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"nodemon index.js\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"start\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"node index.js\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  ...\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>Express 서버를 초기화합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// index.js</span>\n\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs/promises'</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"서버가 http://localhost:8080에서 실행 중입니다.\"</span>);\n});\n</code></pre>\n<p>보통 express를 통해 정적 자산을 제공하려면 내장된 express.static 미들웨어를 사용합니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">app.<span class=\"hljs-title function_\">use</span>(express.<span class=\"hljs-title function_\">static</span>(<span class=\"hljs-string\">'public'</span>));\n</code></pre>\n<p>이 미들웨어는 사용하지 않아도 됩니다. 왜냐하면 우리가 직접 구현할 것이기 때문입니다. 이미지를 표시하려고 할 때 이해해야 할 첫 번째 것은 이미지를 표시하려면 특정 URL로 GET 요청을 하는데, 서버에서 이미지를 가져와 표시하는 것입니다. 여기서 우리가 하는 일은 이 요청을 가로채서 URL에 제공된 쿼리 매개변수를 기반으로 필요할 때 최적화된 이미지를 제공하는 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// index.js</span>\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'*'</span>, <span class=\"hljs-keyword\">async</span> (req, res, next) => {\n  <span class=\"hljs-keyword\">const</span> storagePath = path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">'public'</span>);\n  <span class=\"hljs-keyword\">const</span> fileName = req.<span class=\"hljs-property\">params</span>[<span class=\"hljs-number\">0</span>] ?? <span class=\"hljs-string\">''</span>;\n  <span class=\"hljs-keyword\">const</span> filePath = path.<span class=\"hljs-title function_\">join</span>(storagePath, fileName);\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> stats = <span class=\"hljs-keyword\">await</span> fs.<span class=\"hljs-title function_\">stat</span>(filePath);\n    <span class=\"hljs-keyword\">if</span> (!stats.<span class=\"hljs-title function_\">isFile</span>()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">next</span>();\n\n    <span class=\"hljs-comment\">// * 여기에 코드를 추가합니다</span>\n  } <span class=\"hljs-keyword\">catch</span>(err) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">404</span>).<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'파일을 찾을 수 없습니다'</span>);\n  }\n});\n</code></pre>\n<p>요청된 이미지에 기반하여 적절한 Content-Type 헤더를 설정해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// utils.js</span>\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">getContentType</span> = <span class=\"hljs-function\"><span class=\"hljs-params\">fileName</span> =></span> {\n  <span class=\"hljs-keyword\">const</span> ext = path.<span class=\"hljs-title function_\">extname</span>(fileName).<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">let</span> contentType;\n  \n  <span class=\"hljs-keyword\">switch</span> (ext) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'jpg'</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'jfif'</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'jpeg'</span>:\n      contentType = <span class=\"hljs-string\">'image/jpeg'</span>;\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'png'</span>:\n      contentType = <span class=\"hljs-string\">'image/png'</span>;\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'webp'</span>:\n      contentType = <span class=\"hljs-string\">'image/webp'</span>;\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'svg'</span>:\n      contentType = <span class=\"hljs-string\">'image/svg+xml'</span>;\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-attr\">default</span>:\n      contentType = <span class=\"hljs-string\">'application/octet-stream'</span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> contentType;\n};\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// index.js</span>\n\n<span class=\"hljs-comment\">// * setting the Content-Type</span>\n<span class=\"hljs-comment\">// * make sure to require getContentType</span>\n<span class=\"hljs-keyword\">const</span> contentType = <span class=\"hljs-title function_\">getContentType</span>(fileName);\nres.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">'Content-Type'</span>, contentType);\n  \n<span class=\"hljs-comment\">// * serve svg and unknown files as they are</span>\n<span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">'image/svg+xml'</span>, <span class=\"hljs-string\">'application/octet-stream'</span>].<span class=\"hljs-title function_\">includes</span>(contentType)) {\n  <span class=\"hljs-keyword\">const</span> readStream = <span class=\"hljs-title function_\">createReadStream</span>(filePath);\n  readStream.<span class=\"hljs-title function_\">pipe</span>(res);\n  readStream.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'error'</span>, next);\n  <span class=\"hljs-keyword\">return</span>;\n}\n</code></pre>\n<p>fs/promises API는 createReadStream 함수를 제공하지 않습니다. 두 방법을 모두 활용하려면 다음과 같이 사용하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { createReadStream } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs/promises'</span>);\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 미들웨어는 다음 쿼리 매개변수를 이해합니다:</p>\n<ul>\n<li>q — 품질</li>\n<li>w — 너비</li>\n<li>h — 높이</li>\n</ul>\n<p>모든 이 매개변수들이 선택 사항임을 유의하세요.</p>\n<p>w 또는 h 중 하나만 지정된 경우, 이미지의 원래 종횡비가 다른 차원을 계산하는 데 사용됩니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// index.js</span>\n\n<span class=\"hljs-comment\">// * sharp 패키지를 포함해야 합니다</span>\n<span class=\"hljs-keyword\">const</span> image = <span class=\"hljs-title function_\">sharp</span>(filePath);\n<span class=\"hljs-keyword\">const</span> metadata = <span class=\"hljs-keyword\">await</span> image.<span class=\"hljs-title function_\">metadata</span>();\n<span class=\"hljs-keyword\">const</span> aspectRatio = metadata.<span class=\"hljs-property\">width</span> / metadata.<span class=\"hljs-property\">height</span>;\n<span class=\"hljs-keyword\">const</span> quality = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">trunc</span>(+(req.<span class=\"hljs-property\">query</span>.<span class=\"hljs-property\">q</span> ?? <span class=\"hljs-number\">100</span>));\n<span class=\"hljs-keyword\">let</span> width = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">trunc</span>(+(req.<span class=\"hljs-property\">query</span>.<span class=\"hljs-property\">w</span> ?? <span class=\"hljs-number\">0</span>));\n<span class=\"hljs-keyword\">let</span> height = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">trunc</span>(+(req.<span class=\"hljs-property\">query</span>.<span class=\"hljs-property\">h</span> ?? <span class=\"hljs-number\">0</span>));\n\n<span class=\"hljs-comment\">// * 너비만 지정된 경우</span>\n<span class=\"hljs-keyword\">if</span> (width &#x26;&#x26; !height) {\n  height = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">round</span>(width * (<span class=\"hljs-number\">1</span> / aspectRatio));\n\n  <span class=\"hljs-comment\">// * 높이만 지정된 경우</span>\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (height &#x26;&#x26; !width) {\n  width = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">round</span>(height * aspectRatio);\n\n  <span class=\"hljs-comment\">// * 둘 다 지정되지 않은 경우</span>\n} <span class=\"hljs-keyword\">else</span> {\n  width = metadata.<span class=\"hljs-property\">width</span>;\n  height = metadata.<span class=\"hljs-property\">height</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> stream = image\n  .<span class=\"hljs-title function_\">resize</span>({ width, height })\n  .<span class=\"hljs-title function_\">jpeg</span>({ quality, <span class=\"hljs-attr\">progressive</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">force</span>: <span class=\"hljs-literal\">false</span> })\n  .<span class=\"hljs-title function_\">webp</span>({ quality, <span class=\"hljs-attr\">progressive</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">force</span>: <span class=\"hljs-literal\">false</span> })\n  .<span class=\"hljs-title function_\">png</span>({ quality, <span class=\"hljs-attr\">progressive</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">force</span>: <span class=\"hljs-literal\">false</span> });\n\nstream.<span class=\"hljs-title function_\">pipe</span>(res);\nstream.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'error'</span>, next);\n</code></pre>\n<p>Middleware의 전체 코드는 다음 gist에 있습니다: [link](gist 주소)</p>\n</body>\n</html>\n"},"__N_SSG":true}