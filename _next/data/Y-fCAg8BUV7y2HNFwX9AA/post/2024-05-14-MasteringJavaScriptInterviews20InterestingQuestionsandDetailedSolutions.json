{"pageProps":{"post":{"title":"자바스크립트 인터뷰 마스터하기 재미있는 20가지 질문과 상세한 해결책","description":"","date":"2024-05-14 15:53","slug":"2024-05-14-MasteringJavaScriptInterviews20InterestingQuestionsandDetailedSolutions","content":"\n\n![이미지](/assets/img/2024-05-14-MasteringJavaScriptInterviews20InterestingQuestionsandDetailedSolutions_0.png)\n\n자바스크립트 인터뷰는 무서울 수 있지만, 준비와 연습을 통해 심지어 가장 어려운 질문에도 대처할 수 있습니다. 이 블로그에서는 다음과 같은 20가지 흥미로운 자바스크립트 인터뷰 질문을 자세한 해설과 예시와 함께 살펴보며, 다음 인터뷰에서 뛰어난 성과를 낼 수 있도록 돕겠습니다.\n\n## 1. 자바스크립트 호이스팅이란 무엇인가요? 예를 들어 설명해주세요.\n\n- 호이스팅은 자바스크립트의 기본 동작으로서 선언을 현재 스코프의 맨 위로 이동하는 것을 말합니다.\n\n\n\n예를 들어:\n\n```js\nconsole.log(x); // undefined\nvar x = 5\n```\n\n## 2. 자바스크립트에서 클로저란 무엇인가요? 예시를 제공해주세요.\n\n- 클로저는 외부 함수의 실행이 완료된 후에도 렉시컬 스코프에서 변수에 대한 접근 권한을 유지하는 함수입니다.\n\n\n\n예시:\n\n```js\nfunction outer() {\nvar x = 10;\nreturn function inner() {\nconsole.log(x);\n}\n}\nvar closureFunc = outer();\nclosureFunc(); // logs 10\n```\n\n## 3. 자바스크립트의 이벤트 버블링과 캡처에 대해 설명해 주세요.\n\n- 이벤트 버블링은 내부 요소에서 발생한 이벤트가 외부 조상 요소로 전파되는 것을 말합니다. 이벤트 캡처는 그 반대로, 이벤트가 먼저 바깥 요소에 의해 캡처되는 것을 의미합니다.\n\n\n\n예시:\n\n```js\ndocument.getElementById(\"inner\").addEventListener(\"click\", function() {\nconsole.log(\"Inner clicked\");\n}, true); // useCapture를 true로 설정하여 캡처 단계에서 이벤트를 처리합니다.\n```\n\n## 4. 자바스크립트에서 `==`와 `===` 연산자의 차이점은 무엇인가요?\n\n`==` 연산자는 형 변환을 수행한 후에 등가성을 확인하며, 즉 비교 전에 피연산자를 동일한 유형으로 변환합니다. 반면에 `===` 연산자(엄격한 동등 연산자)는 형 변환을 수행하지 않고 등가성을 확인합니다. 이 연산자는 피연산자의 값과 유형을 직접 비교합니다.\n\n\n\n예시:\n\n```js\n1 == '1'; // true\n1 === '1'; // false\n```\n\n## 5. 자바스크립트에서 프로토타입을 예를 들어 설명해보세요.\n\n- 자바스크립트에서, 객체는 속성을 상속하는 프로토타입을 가지고 있습니다.\n\n\n\n예시:\n\n```js\nvar person = {\nname: \"John\",\nage: 30\n};\nconsole.log(person.hasOwnProperty('name')); // true\nconsole.log(person.hasOwnProperty('toString')); // false\n```\n\n## 6. 자바스크립트에서 이벤트 위임(Event Delegation)이란 무엇인가요? 예시를 제공해주세요.\n\n- 이벤트 위임은 개별 자식 요소에 여러 개의 리스너를 추가하는 대신 부모 요소에 하나의 이벤트 리스너를 연결하는 기술입니다.\n\n\n\n예시:\n\n```js\ndocument.getElementById('parent').addEventListener('click', function(event) {\nif (event.target.tagName === 'LI') {\nconsole.log('List item clicked');\n}\n});\n```\n\n## 7. 자바스크립트의 Promise 개념을 설명해보세요.\n\n- Promise는 현재 사용 가능할 수도 있고, 미래에 사용 가능할 수도 있으며, 아예 사용 불가능할 수도 있는 값을 나타냅니다. 이들은 비동기 프로그래밍에 사용됩니다.\n\n\n\n예시:\n\n```js\nconst promise = new Promise((resolve, reject) => {\nsetTimeout(() => {\nresolve('해결됨!');\n}, 2000);\n});\npromise.then((result) => {\nconsole.log(result); // 해결됨!\n});\n```\n\n## 8. 자바스크립트의 이벤트 루프는 무엇인가요? 그 작동 방식을 설명해주세요.\n\n- 이벤트 루프는 비동기 작업을 처리하는 프로세스입니다. 이는 계속해서 호출 스택과 작업 큐를 확인하며, 스택이 비어 있을 때 큐에서 작업을 스택으로 밀어넣습니다. 이를 통해 자바스크립트가 비동기 작업을 효율적으로 처리할 수 있게 됩니다.\n\n\n\n## 9. 자바스크립트의 Arrow Functions 개념을 설명해주세요. 예시를 제공해주세요.\n\n- Arrow Functions은 자바스크립트에서 함수를 더 간결하게 작성하는 방법입니다. 전통적인 함수 표현식에 비해 더 짧은 구문을 가지고 있으며 자체 `this`를 바인딩하지 않습니다.\n\n예시:\n\n```js\nconst add = (a, b) => a + b;\nconsole.log(add(2, 3)); // 5\n```\n\n\n\n## 10. 자바스크립트에서 `this` 키워드란 무엇인가요? 동작 방식을 설명해주세요.\n\n- `this` 키워드는 자기 자신이 속한 객체를 가리킵니다. 그 값은 함수가 호출된 방식에 따라 결정됩니다.\n\n예시:\n\n```js\nconst obj = {\n  name: 'John',\n  greet() {\n    console.log(`Hello, ${this.name}!`);\n  }\n};\nobj.greet(); // Hello, John!\n```\n\n\n\n## 11. 자바스크립트에서 프로토타입 상속 개념을 설명해보겠습니다. 예시를 함께 제공하겠습니다.\n\n- 프로토타입 상속은 기존 객체를 기반으로 객체를 생성하는 방법입니다. 자바스크립트에서 객체는 프로토타입으로부터 속성과 메서드를 상속받습니다.\n\n예시:\n\n```js\nfunction Person(name) {\n  this.name = name;\n}\nPerson.prototype.greet = function() {\n  console.log(`안녕, 내 이름은 ${this.name}이야`);\n};\nconst john = new Person('John');\njohn.greet(); // 안녕, 내 이름은 John이야\n```\n\n\n\n## 12. 자바스크립트에서 객체를 생성하는 다양한 방법은 무엇인가요? 예제를 제시해주세요.\n\n- 자바스크립트에서는 객체 리터럴, 생성자 함수, `Object.create()` 메소드를 사용하여 객체를 생성할 수 있습니다.\n\n예시:\n\n```js\n// 객체 리터럴\nconst obj = { name: 'John' };\n// 생성자 함수\nfunction Person(name) {\nthis.name = name;\n}\nconst john = new Person('John');\n// Object.create()\nconst newObj = Object.create(null);\nnewObj.name = 'John';\n```\n\n\n\n## 13. 자바스크립트에서 Callback 함수의 개념을 설명해 주세요. 예시를 제공해 주세요.\n\n- Callback 함수란 다른 함수의 인수로 전달된 함수로, 그 후 바깥 함수 내에서 호출되어 어떤 동작을 완료하는 데 사용됩니다.\n\n예시:\n\n```js\nfunction fetchData(callback) {\n// 비동기 작업\nsetTimeout(() => {\nconst data = '일부 데이터';\ncallback(data);\n}, 2000);\n}\nfetchData((data) => {\nconsole.log(data); // 일부 데이터\n});\n```\n\n\n\n## 14. JavaScript에서 `let`, `const`, 그리고 `var`의 차이점은 무엇인가요?\n\n- `var`은 함수 스코프를 가지고 있고, `let`과 `const`는 블록 스코프를 가집니다. `let`은 재할당이 가능하고, `const`는 불가능합니다.\n\n예시:\n\n```js\nlet x = 5;\nconst y = 10;\nvar z = 15;\n```\n\n\n\n## 15. JavaScript에서 Async/Await 개념을 설명해주세요. 예시를 제공해주세요.\n\n- Async/Await은 Promises와 함께 작업하는 데 사용되는 구문 설탕입니다. 이를 사용하면 비동기 코드를 동기적으로 작성할 수 있습니다.\n\n예시:\n\n```js\nasync function fetchData() {\nconst response = await fetch('https://api.example.com/data');\nconst data = await response.json();\nreturn data;\n}\n```\n\n\n\n## 16. 자바스크립트에는 서로 다른 데이터 유형이 무엇이 있나요?\n\n- 자바스크립트에는 `string`, `number`, `boolean`, `null`, `undefined`, `symbol`과 함께 `object`라는 여섯 가지 기본 데이터 유형이 있습니다.\n\n## 17. CORS(Cross-Origin Resource Sharing)의 개념을 설명해주세요.\n\n- CORS는 브라우저에 의해 구현된 보안 기능으로, 웹 페이지가 원래 페이지를 제공한 도메인과 다른 도메인으로 요청을 보내는 것을 제한합니다.\n\n\n\n## 18. 자바스크립트에서 즉시 실행 함수 표현식(IIFE)이란 무엇인가요? 예시를 제공해주세요.\n\n- IIFE는 정의된 즉시 실행되는 함수입니다.\n\n예시:\n\n```js\n(function() {\nconsole.log('IIFE 실행됨');\n})();\n```\n\n\n\n## 19. 자바스크립트에서 `splice()`와 `slice()` 메서드에 대해 설명해주세요. 예제를 제공해주세요.\n\n- `splice()` 메서드는 기존 요소를 제거하거나 대체하여 배열의 내용을 변경합니다. `slice()`는 배열의 일부를 새 배열 객체로 얕은 복사하여 반환합니다.\n\n예제:\n\n```js\nconst arr = [1, 2, 3, 4, 5];\narr.splice(2, 1); // 인덱스 2의 요소를 제거\nconst newArr = arr.slice(1, 3); // [2, 3] 반환\n```\n\n\n\n## 20. 자바스크립트에서 'use strict' 지시어의 목적은 무엇인가요?\n\n- 'use strict' 지시어는 자바스크립트 코드에서 더 엄격한 구문 분석과 오류 처리를 강제합니다. 이는 일반적인 코딩 오류를 잡고 잠재적으로 위험한 코드 구조물을 방지하는 데 도움이 됩니다.\n\n결론:","ogImage":{"url":"/assets/img/2024-05-14-MasteringJavaScriptInterviews20InterestingQuestionsandDetailedSolutions_0.png"},"coverImage":"/assets/img/2024-05-14-MasteringJavaScriptInterviews20InterestingQuestionsandDetailedSolutions_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-14-MasteringJavaScriptInterviews20InterestingQuestionsandDetailedSolutions_0.png\" alt=\"이미지\"></p>\n<p>자바스크립트 인터뷰는 무서울 수 있지만, 준비와 연습을 통해 심지어 가장 어려운 질문에도 대처할 수 있습니다. 이 블로그에서는 다음과 같은 20가지 흥미로운 자바스크립트 인터뷰 질문을 자세한 해설과 예시와 함께 살펴보며, 다음 인터뷰에서 뛰어난 성과를 낼 수 있도록 돕겠습니다.</p>\n<h2>1. 자바스크립트 호이스팅이란 무엇인가요? 예를 들어 설명해주세요.</h2>\n<ul>\n<li>호이스팅은 자바스크립트의 기본 동작으로서 선언을 현재 스코프의 맨 위로 이동하는 것을 말합니다.</li>\n</ul>\n<p>예를 들어:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">5</span>\n</code></pre>\n<h2>2. 자바스크립트에서 클로저란 무엇인가요? 예시를 제공해주세요.</h2>\n<ul>\n<li>클로저는 외부 함수의 실행이 완료된 후에도 렉시컬 스코프에서 변수에 대한 접근 권한을 유지하는 함수입니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">outer</span>(<span class=\"hljs-params\"></span>) {\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">inner</span>(<span class=\"hljs-params\"></span>) {\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n}\n}\n<span class=\"hljs-keyword\">var</span> closureFunc = <span class=\"hljs-title function_\">outer</span>();\n<span class=\"hljs-title function_\">closureFunc</span>(); <span class=\"hljs-comment\">// logs 10</span>\n</code></pre>\n<h2>3. 자바스크립트의 이벤트 버블링과 캡처에 대해 설명해 주세요.</h2>\n<ul>\n<li>이벤트 버블링은 내부 요소에서 발생한 이벤트가 외부 조상 요소로 전파되는 것을 말합니다. 이벤트 캡처는 그 반대로, 이벤트가 먼저 바깥 요소에 의해 캡처되는 것을 의미합니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"inner\"</span>).<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Inner clicked\"</span>);\n}, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// useCapture를 true로 설정하여 캡처 단계에서 이벤트를 처리합니다.</span>\n</code></pre>\n<h2>4. 자바스크립트에서 <code>==</code>와 <code>===</code> 연산자의 차이점은 무엇인가요?</h2>\n<p><code>==</code> 연산자는 형 변환을 수행한 후에 등가성을 확인하며, 즉 비교 전에 피연산자를 동일한 유형으로 변환합니다. 반면에 <code>===</code> 연산자(엄격한 동등 연산자)는 형 변환을 수행하지 않고 등가성을 확인합니다. 이 연산자는 피연산자의 값과 유형을 직접 비교합니다.</p>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">1</span> == <span class=\"hljs-string\">'1'</span>; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-number\">1</span> === <span class=\"hljs-string\">'1'</span>; <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<h2>5. 자바스크립트에서 프로토타입을 예를 들어 설명해보세요.</h2>\n<ul>\n<li>자바스크립트에서, 객체는 속성을 상속하는 프로토타입을 가지고 있습니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> person = {\n<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John\"</span>,\n<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>\n};\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-title function_\">hasOwnProperty</span>(<span class=\"hljs-string\">'name'</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-title function_\">hasOwnProperty</span>(<span class=\"hljs-string\">'toString'</span>)); <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<h2>6. 자바스크립트에서 이벤트 위임(Event Delegation)이란 무엇인가요? 예시를 제공해주세요.</h2>\n<ul>\n<li>이벤트 위임은 개별 자식 요소에 여러 개의 리스너를 추가하는 대신 부모 요소에 하나의 이벤트 리스너를 연결하는 기술입니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'parent'</span>).<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) {\n<span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">tagName</span> === <span class=\"hljs-string\">'LI'</span>) {\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'List item clicked'</span>);\n}\n});\n</code></pre>\n<h2>7. 자바스크립트의 Promise 개념을 설명해보세요.</h2>\n<ul>\n<li>Promise는 현재 사용 가능할 수도 있고, 미래에 사용 가능할 수도 있으며, 아예 사용 불가능할 수도 있는 값을 나타냅니다. 이들은 비동기 프로그래밍에 사용됩니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'해결됨!'</span>);\n}, <span class=\"hljs-number\">2000</span>);\n});\npromise.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =></span> {\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result); <span class=\"hljs-comment\">// 해결됨!</span>\n});\n</code></pre>\n<h2>8. 자바스크립트의 이벤트 루프는 무엇인가요? 그 작동 방식을 설명해주세요.</h2>\n<ul>\n<li>이벤트 루프는 비동기 작업을 처리하는 프로세스입니다. 이는 계속해서 호출 스택과 작업 큐를 확인하며, 스택이 비어 있을 때 큐에서 작업을 스택으로 밀어넣습니다. 이를 통해 자바스크립트가 비동기 작업을 효율적으로 처리할 수 있게 됩니다.</li>\n</ul>\n<h2>9. 자바스크립트의 Arrow Functions 개념을 설명해주세요. 예시를 제공해주세요.</h2>\n<ul>\n<li>Arrow Functions은 자바스크립트에서 함수를 더 간결하게 작성하는 방법입니다. 전통적인 함수 표현식에 비해 더 짧은 구문을 가지고 있으며 자체 <code>this</code>를 바인딩하지 않습니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">add</span> = (<span class=\"hljs-params\">a, b</span>) => a + b;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// 5</span>\n</code></pre>\n<h2>10. 자바스크립트에서 <code>this</code> 키워드란 무엇인가요? 동작 방식을 설명해주세요.</h2>\n<ul>\n<li><code>this</code> 키워드는 자기 자신이 속한 객체를 가리킵니다. 그 값은 함수가 호출된 방식에 따라 결정됩니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> obj = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'John'</span>,\n  <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span>!`</span>);\n  }\n};\nobj.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// Hello, John!</span>\n</code></pre>\n<h2>11. 자바스크립트에서 프로토타입 상속 개념을 설명해보겠습니다. 예시를 함께 제공하겠습니다.</h2>\n<ul>\n<li>프로토타입 상속은 기존 객체를 기반으로 객체를 생성하는 방법입니다. 자바스크립트에서 객체는 프로토타입으로부터 속성과 메서드를 상속받습니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n}\n<span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">greet</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`안녕, 내 이름은 <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span>이야`</span>);\n};\n<span class=\"hljs-keyword\">const</span> john = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">'John'</span>);\njohn.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 안녕, 내 이름은 John이야</span>\n</code></pre>\n<h2>12. 자바스크립트에서 객체를 생성하는 다양한 방법은 무엇인가요? 예제를 제시해주세요.</h2>\n<ul>\n<li>자바스크립트에서는 객체 리터럴, 생성자 함수, <code>Object.create()</code> 메소드를 사용하여 객체를 생성할 수 있습니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 객체 리터럴</span>\n<span class=\"hljs-keyword\">const</span> obj = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'John'</span> };\n<span class=\"hljs-comment\">// 생성자 함수</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name</span>) {\n<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n}\n<span class=\"hljs-keyword\">const</span> john = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">'John'</span>);\n<span class=\"hljs-comment\">// Object.create()</span>\n<span class=\"hljs-keyword\">const</span> newObj = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-literal\">null</span>);\nnewObj.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">'John'</span>;\n</code></pre>\n<h2>13. 자바스크립트에서 Callback 함수의 개념을 설명해 주세요. 예시를 제공해 주세요.</h2>\n<ul>\n<li>Callback 함수란 다른 함수의 인수로 전달된 함수로, 그 후 바깥 함수 내에서 호출되어 어떤 동작을 완료하는 데 사용됩니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-params\">callback</span>) {\n<span class=\"hljs-comment\">// 비동기 작업</span>\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n<span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-string\">'일부 데이터'</span>;\n<span class=\"hljs-title function_\">callback</span>(data);\n}, <span class=\"hljs-number\">2000</span>);\n}\n<span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data); <span class=\"hljs-comment\">// 일부 데이터</span>\n});\n</code></pre>\n<h2>14. JavaScript에서 <code>let</code>, <code>const</code>, 그리고 <code>var</code>의 차이점은 무엇인가요?</h2>\n<ul>\n<li><code>var</code>은 함수 스코프를 가지고 있고, <code>let</code>과 <code>const</code>는 블록 스코프를 가집니다. <code>let</code>은 재할당이 가능하고, <code>const</code>는 불가능합니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">15</span>;\n</code></pre>\n<h2>15. JavaScript에서 Async/Await 개념을 설명해주세요. 예시를 제공해주세요.</h2>\n<ul>\n<li>Async/Await은 Promises와 함께 작업하는 데 사용되는 구문 설탕입니다. 이를 사용하면 비동기 코드를 동기적으로 작성할 수 있습니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-params\"></span>) {\n<span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'https://api.example.com/data'</span>);\n<span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n<span class=\"hljs-keyword\">return</span> data;\n}\n</code></pre>\n<h2>16. 자바스크립트에는 서로 다른 데이터 유형이 무엇이 있나요?</h2>\n<ul>\n<li>자바스크립트에는 <code>string</code>, <code>number</code>, <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>symbol</code>과 함께 <code>object</code>라는 여섯 가지 기본 데이터 유형이 있습니다.</li>\n</ul>\n<h2>17. CORS(Cross-Origin Resource Sharing)의 개념을 설명해주세요.</h2>\n<ul>\n<li>CORS는 브라우저에 의해 구현된 보안 기능으로, 웹 페이지가 원래 페이지를 제공한 도메인과 다른 도메인으로 요청을 보내는 것을 제한합니다.</li>\n</ul>\n<h2>18. 자바스크립트에서 즉시 실행 함수 표현식(IIFE)이란 무엇인가요? 예시를 제공해주세요.</h2>\n<ul>\n<li>IIFE는 정의된 즉시 실행되는 함수입니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\">(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'IIFE 실행됨'</span>);\n})();\n</code></pre>\n<h2>19. 자바스크립트에서 <code>splice()</code>와 <code>slice()</code> 메서드에 대해 설명해주세요. 예제를 제공해주세요.</h2>\n<ul>\n<li><code>splice()</code> 메서드는 기존 요소를 제거하거나 대체하여 배열의 내용을 변경합니다. <code>slice()</code>는 배열의 일부를 새 배열 객체로 얕은 복사하여 반환합니다.</li>\n</ul>\n<p>예제:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\narr.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 인덱스 2의 요소를 제거</span>\n<span class=\"hljs-keyword\">const</span> newArr = arr.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// [2, 3] 반환</span>\n</code></pre>\n<h2>20. 자바스크립트에서 'use strict' 지시어의 목적은 무엇인가요?</h2>\n<ul>\n<li>'use strict' 지시어는 자바스크립트 코드에서 더 엄격한 구문 분석과 오류 처리를 강제합니다. 이는 일반적인 코딩 오류를 잡고 잠재적으로 위험한 코드 구조물을 방지하는 데 도움이 됩니다.</li>\n</ul>\n<p>결론:</p>\n</body>\n</html>\n"},"__N_SSG":true}