{"pageProps":{"post":{"title":"대형 언어 모델LLM을 활용한 웹 어플리케이션 만드는 방법","description":"","date":"2024-05-17 20:49","slug":"2024-05-17-BuildingaWebApplicationPoweredbyLargeLanguageModelsLLMpart2","content":"\n\n<img src=\"/assets/img/2024-05-17-BuildingaWebApplicationPoweredbyLargeLanguageModelsLLMpart2_0.png\" />\n\n이전 글인 Building a Web Application Powered by Large Language Models (LLM): part 1에서는 ASP.NET Core API를 사용하여 CV 리뷰어 애플리케이션을 위한 견고한 백엔드를 개발했습니다. 웹 스크래핑을 위해 Azure Function을 활용하고 GPT 모델을 통합하여 이력서를 채용 공고와 관련하여 분석했습니다. 이번 글에서는 React 템플릿과 TypeScript를 사용하여 애플리케이션의 프론트엔드를 구축하는 데 초점을 맞출 것입니다. Bootstrap을 사용하여 애플리케이션을 스타일링하여 반응형이며 사용자 친화적인 인터페이스를 제공할 것입니다.\n\n# 요구 사항\n\n- Node.js와 npm이 컴퓨터에 설치되어 있어야 합니다.\n- React 및 TypeScript의 기본적인 이해가 필요합니다.\n- Bootstrap 스타일링에 대한 이해가 있으면 도움이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n# React 프로젝트 설정하기\n\nVite를 사용하여 React 프로젝트 초기화: Vite는 React 애플리케이션을 위한 빠르고 최적화된 설정을 제공합니다. TypeScript 템플릿을 이용하여 Vite로 새로운 React 프로젝트를 생성하세요.\n\n```js\nnpm create vite@latest cv.reviewer.frontend -- --template react-ts\ncd cv.reviewer.frontend\n```\n\nBootstrap 설치하기: 프로젝트에 스타일링을 위해 Bootstrap을 추가하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install bootstrap@5.3.0\nnpm install @types/bootstrap\n```\n\n프로젝트 구조: 프로젝트를 컴포넌트, 서비스 및 스타일 폴더로 구성하여 관리를 더욱 편리하게 합니다.\n\n# 부트스트랩 및 전역 스타일 설정\n\nmain.tsx에 부트스트랩을 가져오세요: 메인 엔트리 파일에 부트스트랩 CSS를 추가하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/global.css';\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n글로벌 스타일: styles 폴더에 global.css 파일을 만들어 추가적인 글로벌 스타일을 적용하세요.\n\n```js\nbody {\n  background-color: #f8f9fa;\n}\n```\n\n# 주요 컴포넌트 구축하기\n\n\n<div class=\"content-ad\"></div>\n\nFormComponent.tsx를 만들어보세요: 이 컴포넌트는 파일 업로드와 작업 URL 입력을 처리할 겁니다.\n\n```js\nimport React, { useState } from \"react\";\nimport apiClient from \"../services/apiClient\";\n\nconst FormComponent: React.FC = () => {\n  const [jobUrl, setJobUrl] = useState(\"\");\n  const [cvFile, setCvFile] = useState<File | null>(null);\n  const [review, setReview] = useState<string | null>(null);\n  const [adSource, setAdSource] = useState<string | null>(null);\n  const [title, setJobTitle] = useState<string | null>(null);\n  const [description, setJobDescription] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setJobUrl(e.target.value);\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setCvFile(e.target.files[0]);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!jobUrl || !cvFile) {\n      alert(\"작업 URL과 이력서 파일을 모두 제공해주세요.\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"JobUrl\", jobUrl);\n    formData.append(\"CvFile\", cvFile);\n\n    setLoading(true);\n    try {\n      const response = await apiClient.post(\"/reviewcv\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n\n      if (response.data.isSuccess) {\n        setReview(response.data.review);\n        setJobTitle(response.data.jobDetail.title);\n        setJobDescription(response.data.jobDetail.raw);\n        setAdSource(response.data.jobDetail.domain);\n      }\n    } catch (error) {\n      console.error(\"양식 제출 중 오류 발생:\", error);\n      alert(\"양식 제출 중 오류가 발생했습니다. 다시 시도해주세요.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-center mb-4\">이력서 리뷰어</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"jobUrl\" className=\"form-label\">\n            작업 광고 URL\n          </label>\n          <input\n            type=\"url\"\n            className=\"form-control\"\n            id=\"jobUrl\"\n            value={jobUrl}\n            onChange={handleUrlChange}\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"cvFile\" className=\"form-label\">\n            이력서 업로드\n          </label>\n          <input\n            type=\"file\"\n            className=\"form-control\"\n            id=\"cvFile\"\n            accept=\".pdf,.doc,.docx\"\n            onChange={handleFileChange}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\n          {loading ? \"처리 중...\" : \"제출\"}\n        </button>\n      </form>\n      {review && (\n        <div className=\"row mt-4\">\n          <div className=\"col-md-6 pt-3 border\">\n            <h2>작업 세부 정보</h2>\n            <p>\n              <strong>작업 제목:</strong> {title}\n            </p>\n            <p>\n              <strong>광고 출처:</strong> {adSource}\n            </p>\n            <div\n              dangerouslySetInnerHTML={{ __html: description || \"\" }}\n              className=\"border\"\n            />\n          </div>\n          <div className=\"col-md-6 pt-3 border\">\n            <div dangerouslySetInnerHTML={{ __html: review || \"\" }} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FormComponent;\n```\n\n주 애플리케이션 컴포넌트 (App.tsx): 주 애플리케이션에 폼 컴포넌트를 통합해보세요\n\n```js\nimport React from 'react';\nimport FormComponent from './components/FormComponent';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <FormComponent />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n<div class=\"content-ad\"></div>\n\n액시오스 서비스를 만들어보세요: 코드 구조화와 재사용성을 위해 apiClient.tsx와 같은 서비스 파일에 API 호출을 중앙 집중화하세요.\n\n```js\nimport axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport default apiClient;\n```\n\n# 애플리케이션 테스트 및 실행\n\n개발 서버 실행: 프로젝트 루트 디렉토리 내에서 터미널에서 아래 명령어를 실행하여 리액트 개발 서버를 시작하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm run dev\n```\n\n애플리케이션 테스트: 브라우저를 열고 http://localhost:5173 또는 터미널에서 제공된 엔드포인트로 이동합니다.\n\n![이미지](/assets/img/2024-05-17-BuildingaWebApplicationPoweredbyLargeLanguageModelsLLMpart2_1.png)\n\n작업 URL을 입력하고 이력서 파일을 업로드한 후 제출 버튼을 클릭하여 테스트해보세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-17-BuildingaWebApplicationPoweredbyLargeLanguageModelsLLMpart2_2.png\" />\n\n애플리케이션은 백엔드 서비스에 요청을 보내 작업 세부 정보와 이력서 검토를 가져옵니다.\n\n<img src=\"/assets/img/2024-05-17-BuildingaWebApplicationPoweredbyLargeLanguageModelsLLMpart2_3.png\" />\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n이 기사에서는 React, TypeScript 및 Bootstrap을 사용하여 CV Reviewer 애플리케이션의 프론트엔드를 성공적으로 구축했습니다. 이 애플리케이션은 현대 웹 기술의 통합뿐만 아니라 백엔드 서비스 및 API를 활용하여 원활한 사용자 경험을 만드는 방법을 보여줍니다. 애플리케이션은 사용자 인증, 오류 처리 개선, 여러 이력서 검토용 대시보드 추가 또는 구직 지원서용 커버 레터 생성 기능과 같은 기능을 추가하여 향상 및 확장될 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-17-BuildingaWebApplicationPoweredbyLargeLanguageModelsLLMpart2_0.png"},"coverImage":"/assets/img/2024-05-17-BuildingaWebApplicationPoweredbyLargeLanguageModelsLLMpart2_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-17-BuildingaWebApplicationPoweredbyLargeLanguageModelsLLMpart2_0.png\">\n<p>이전 글인 Building a Web Application Powered by Large Language Models (LLM): part 1에서는 ASP.NET Core API를 사용하여 CV 리뷰어 애플리케이션을 위한 견고한 백엔드를 개발했습니다. 웹 스크래핑을 위해 Azure Function을 활용하고 GPT 모델을 통합하여 이력서를 채용 공고와 관련하여 분석했습니다. 이번 글에서는 React 템플릿과 TypeScript를 사용하여 애플리케이션의 프론트엔드를 구축하는 데 초점을 맞출 것입니다. Bootstrap을 사용하여 애플리케이션을 스타일링하여 반응형이며 사용자 친화적인 인터페이스를 제공할 것입니다.</p>\n<h1>요구 사항</h1>\n<ul>\n<li>Node.js와 npm이 컴퓨터에 설치되어 있어야 합니다.</li>\n<li>React 및 TypeScript의 기본적인 이해가 필요합니다.</li>\n<li>Bootstrap 스타일링에 대한 이해가 있으면 도움이 됩니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>React 프로젝트 설정하기</h1>\n<p>Vite를 사용하여 React 프로젝트 초기화: Vite는 React 애플리케이션을 위한 빠르고 최적화된 설정을 제공합니다. TypeScript 템플릿을 이용하여 Vite로 새로운 React 프로젝트를 생성하세요.</p>\n<pre><code class=\"hljs language-js\">npm create vite@latest cv.<span class=\"hljs-property\">reviewer</span>.<span class=\"hljs-property\">frontend</span> -- --template react-ts\ncd cv.<span class=\"hljs-property\">reviewer</span>.<span class=\"hljs-property\">frontend</span>\n</code></pre>\n<p>Bootstrap 설치하기: 프로젝트에 스타일링을 위해 Bootstrap을 추가하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">npm install bootstrap@<span class=\"hljs-number\">5.3</span><span class=\"hljs-number\">.0</span>\nnpm install @types/bootstrap\n</code></pre>\n<p>프로젝트 구조: 프로젝트를 컴포넌트, 서비스 및 스타일 폴더로 구성하여 관리를 더욱 편리하게 합니다.</p>\n<h1>부트스트랩 및 전역 스타일 설정</h1>\n<p>main.tsx에 부트스트랩을 가져오세요: 메인 엔트리 파일에 부트스트랩 CSS를 추가하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ReactDOM</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom/client'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./App'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'bootstrap/dist/css/bootstrap.min.css'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./styles/global.css'</span>;\n\n<span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">createRoot</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'root'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">HTMLElement</span>).<span class=\"hljs-title function_\">render</span>(\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">React.StrictMode</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">App</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">React.StrictMode</span>></span></span>\n);\n</code></pre>\n<p>글로벌 스타일: styles 폴더에 global.css 파일을 만들어 추가적인 글로벌 스타일을 적용하세요.</p>\n<pre><code class=\"hljs language-js\">body {\n  background-<span class=\"hljs-attr\">color</span>: #f8f9fa;\n}\n</code></pre>\n<h1>주요 컴포넌트 구축하기</h1>\n<div class=\"content-ad\"></div>\n<p>FormComponent.tsx를 만들어보세요: 이 컴포넌트는 파일 업로드와 작업 URL 입력을 처리할 겁니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> apiClient <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../services/apiClient\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">FormComponent</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">const</span> [jobUrl, setJobUrl] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">const</span> [cvFile, setCvFile] = useState&#x3C;<span class=\"hljs-title class_\">File</span> | <span class=\"hljs-literal\">null</span>>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [review, setReview] = useState&#x3C;string | <span class=\"hljs-literal\">null</span>>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [adSource, setAdSource] = useState&#x3C;string | <span class=\"hljs-literal\">null</span>>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [title, setJobTitle] = useState&#x3C;string | <span class=\"hljs-literal\">null</span>>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [description, setJobDescription] = useState&#x3C;string | <span class=\"hljs-literal\">null</span>>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleUrlChange</span> = (<span class=\"hljs-params\">e: React.ChangeEvent&#x3C;HTMLInputElement></span>) => {\n    <span class=\"hljs-title function_\">setJobUrl</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleFileChange</span> = (<span class=\"hljs-params\">e: React.ChangeEvent&#x3C;HTMLInputElement></span>) => {\n    <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">files</span>) {\n      <span class=\"hljs-title function_\">setCvFile</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">files</span>[<span class=\"hljs-number\">0</span>]);\n    }\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSubmit</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">e: React.FormEvent</span>) => {\n    e.<span class=\"hljs-title function_\">preventDefault</span>();\n    <span class=\"hljs-keyword\">if</span> (!jobUrl || !cvFile) {\n      <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"작업 URL과 이력서 파일을 모두 제공해주세요.\"</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>();\n    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">\"JobUrl\"</span>, jobUrl);\n    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">\"CvFile\"</span>, cvFile);\n\n    <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> apiClient.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/reviewcv\"</span>, formData, {\n        <span class=\"hljs-attr\">headers</span>: {\n          <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"multipart/form-data\"</span>,\n        },\n      });\n\n      <span class=\"hljs-keyword\">if</span> (response.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">isSuccess</span>) {\n        <span class=\"hljs-title function_\">setReview</span>(response.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">review</span>);\n        <span class=\"hljs-title function_\">setJobTitle</span>(response.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">jobDetail</span>.<span class=\"hljs-property\">title</span>);\n        <span class=\"hljs-title function_\">setJobDescription</span>(response.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">jobDetail</span>.<span class=\"hljs-property\">raw</span>);\n        <span class=\"hljs-title function_\">setAdSource</span>(response.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">jobDetail</span>.<span class=\"hljs-property\">domain</span>);\n      }\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"양식 제출 중 오류 발생:\"</span>, error);\n      <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"양식 제출 중 오류가 발생했습니다. 다시 시도해주세요.\"</span>);\n    } <span class=\"hljs-keyword\">finally</span> {\n      <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n    }\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"container mt-5\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"text-center mb-4\"</span>></span>이력서 리뷰어<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleSubmit}</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"mb-3\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"jobUrl\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"form-label\"</span>></span>\n            작업 광고 URL\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n            <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"url\"</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"form-control\"</span>\n            <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"jobUrl\"</span>\n            <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{jobUrl}</span>\n            <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleUrlChange}</span>\n            <span class=\"hljs-attr\">required</span>\n          /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"mb-3\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"cvFile\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"form-label\"</span>></span>\n            이력서 업로드\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n            <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"file\"</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"form-control\"</span>\n            <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cvFile\"</span>\n            <span class=\"hljs-attr\">accept</span>=<span class=\"hljs-string\">\".pdf,.doc,.docx\"</span>\n            <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleFileChange}</span>\n            <span class=\"hljs-attr\">required</span>\n          /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-primary\"</span> <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{loading}</span>></span>\n          {loading ? \"처리 중...\" : \"제출\"}\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n      {review &#x26;&#x26; (\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"row mt-4\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"col-md-6 pt-3 border\"</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>작업 세부 정보<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">strong</span>></span>작업 제목:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">strong</span>></span> {title}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">strong</span>></span>광고 출처:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">strong</span>></span> {adSource}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n              <span class=\"hljs-attr\">dangerouslySetInnerHTML</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">__html:</span> <span class=\"hljs-attr\">description</span> || \"\" }}\n              <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"border\"</span>\n            /></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"col-md-6 pt-3 border\"</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">dangerouslySetInnerHTML</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">__html:</span> <span class=\"hljs-attr\">review</span> || \"\" }} /></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      )}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">FormComponent</span>;\n</code></pre>\n<p>주 애플리케이션 컴포넌트 (App.tsx): 주 애플리케이션에 폼 컴포넌트를 통합해보세요</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">FormComponent</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/FormComponent'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">App</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">FormComponent</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>액시오스 서비스를 만들어보세요: 코드 구조화와 재사용성을 위해 apiClient.tsx와 같은 서비스 파일에 API 호출을 중앙 집중화하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n\n<span class=\"hljs-keyword\">const</span> apiClient = axios.<span class=\"hljs-title function_\">create</span>({\n  <span class=\"hljs-attr\">baseURL</span>: <span class=\"hljs-string\">'http://localhost:5000/api'</span>,\n  <span class=\"hljs-attr\">headers</span>: {\n    <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>\n  }\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> apiClient;\n</code></pre>\n<h1>애플리케이션 테스트 및 실행</h1>\n<p>개발 서버 실행: 프로젝트 루트 디렉토리 내에서 터미널에서 아래 명령어를 실행하여 리액트 개발 서버를 시작하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">npm run dev\n</code></pre>\n<p>애플리케이션 테스트: 브라우저를 열고 <a href=\"http://localhost:5173\" rel=\"nofollow\" target=\"_blank\">http://localhost:5173</a> 또는 터미널에서 제공된 엔드포인트로 이동합니다.</p>\n<p><img src=\"/assets/img/2024-05-17-BuildingaWebApplicationPoweredbyLargeLanguageModelsLLMpart2_1.png\" alt=\"이미지\"></p>\n<p>작업 URL을 입력하고 이력서 파일을 업로드한 후 제출 버튼을 클릭하여 테스트해보세요.</p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-05-17-BuildingaWebApplicationPoweredbyLargeLanguageModelsLLMpart2_2.png\">\n<p>애플리케이션은 백엔드 서비스에 요청을 보내 작업 세부 정보와 이력서 검토를 가져옵니다.</p>\n<img src=\"/assets/img/2024-05-17-BuildingaWebApplicationPoweredbyLargeLanguageModelsLLMpart2_3.png\">\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>이 기사에서는 React, TypeScript 및 Bootstrap을 사용하여 CV Reviewer 애플리케이션의 프론트엔드를 성공적으로 구축했습니다. 이 애플리케이션은 현대 웹 기술의 통합뿐만 아니라 백엔드 서비스 및 API를 활용하여 원활한 사용자 경험을 만드는 방법을 보여줍니다. 애플리케이션은 사용자 인증, 오류 처리 개선, 여러 이력서 검토용 대시보드 추가 또는 구직 지원서용 커버 레터 생성 기능과 같은 기능을 추가하여 향상 및 확장될 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}