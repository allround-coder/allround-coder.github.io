{"pageProps":{"post":{"title":"Nodejs에서 첫 번째 REST API를 만드는 방법","description":"","date":"2024-06-19 23:14","slug":"2024-06-19-HowtomakeyourfirstRESTAPIinNodejs","content":"\n\n## 5분 이내로\n\n![이미지](/assets/img/2024-06-19-HowtomakeyourfirstRESTAPIinNodejs_0.png)\n\nNode.js에서 REST API (Representational State Transfer Application Programming Interface)를 만드는 것은 현대 웹 개발자에게 필수적인 기술입니다. 이 유형의 API는 웹 애플리케이션과 같은 다양한 클라이언트가 상태를 유지하지 않는 일련의 작업을 사용하여 서버와 상호 작용할 수 있게 합니다. 이 튜토리얼에서는 Node.js에서 간단한 REST API를 설정하는 기본 사항을 살펴보며, 데이터 유형, 클래스 및 다양한 HTTP 메서드를 사용한 코드 예제를 다룰 것입니다.\n\n# 필수 사항\n\n<div class=\"content-ad\"></div>\n\n시작하기 전에 시스템에 Node.js가 설치되어 있는지 확인해주세요. Node.js는 nodejs.org에서 다운로드할 수 있습니다. 또한 JavaScript, Node.js, 그리고 인기 있는 Node.js 프레임워크 Express에 대한 기본적인 이해가 필요합니다.\n\n# 단계 1: 프로젝트 설정하기\n\n먼저, 프로젝트를 위한 새 디렉토리를 만들고 그 안에서 새 Node.js 프로젝트를 초기화하세요.\n\n```js\nmkdir my-rest-api\ncd my-rest-api\nnpm init -y\n```\n\n<div class=\"content-ad\"></div>\n\n위 작업은 당신의 프로젝트 종속성을 관리할 package.json 파일을 디렉토리에 생성합니다.\n\n# 단계 2: Express 설치하기\n\nHTTP 요청을 쉽게 처리하려면 Express를 설치하세요.\n\n```js\nnpm install express\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 3: 첫 번째 엔드포인트 생성하기\n\n이제 프로젝트 디렉토리에 index.js 파일을 생성하세요. 이것이 진입점이 될 것입니다.\n\n```js\nconst express = require('express');\nconst app = express();\n\napp.listen(3000, () => {\n console.log(\"포트 3000에서 실행 중인 서버\");\n});\n```\n\n이 코드는 포트 3000에서 수신 대기하는 기본 Express 서버를 설정합니다.\n\n<div class=\"content-ad\"></div>\n\n# 단계 4: HTTP 메소드 처리\n\nREST API는 다양한 HTTP 메소드와 함께 작동합니다. 가장 일반적인 메소드는 GET, POST, PUT 및 DELETE입니다.\n\n# GET 요청\n\n간단한 메시지를 반환하는 GET 엔드포인트를 만들어 봅시다.\n\n<div class=\"content-ad\"></div>\n\n```js\napp.get(\"/msg\", (req, res, next) => {\n  res.json({\"message\": \"안녕, 세계!\"});\n});\n```\n\n# POST 요청\n\nPOST 요청을 할 때는 종종 데이터를 받게 됩니다. 예시를 보겠습니다.\n\n```js\napp.use(express.json()); // for parsing application/json\n\napp.post(\"/msg\", (req, res, next) => {\n  const message = req.body.message;\n  res.json({\"receivedMessage\": message});\n});\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 5: 클래스와 데이터 유형 사용하기\n\n더 나은 코드 구성을 위해 클래스를 사용하여 코드를 구성할 수 있습니다. Message 클래스를 만들어 봅시다.\n\n```js\nclass Message {\n  constructor(content) {\n    this.content = content;\n  }\n\n  getContent() {\n    return this.content;\n  }\n}\n```\n\n이제 이 클래스를 사용하여 POST 엔드포인트를 리팩토링할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\napp.post(\"/msg\", (req, res, next) => {\n  const newMessage = new Message(req.body.message);\n  res.json({\"receivedMessage\": newMessage.getContent()}); \n});\n```\n\n# 단계 6: API 테스트하기\n\nAPI를 테스트하려면 Postman이나 cURL과 같은 도구를 사용할 수 있습니다. GET 요청의 경우 브라우저에서 http://localhost:3000/msg 로 간단히 방문할 수 있습니다.\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\nNode.js에서 REST API를 만드는 것은 연습을 통해 더 직관적인 과정이 되는 간단한 일입니다. Express의 사용은 다양한 HTTP 메소드를 간단하게 처리하게 해주며, 클래스와 적절한 데이터 유형을 사용하여 코드를 조직화하면 유지 관리 및 가독성을 크게 향상시킬 수 있습니다.\n\n기억하세요, 이것은 시작점에 불과합니다. 더 편안해지면 API를 더 복잡한 라우트로 확장하거나 데이터베이스에 연결하거나 인증을 구현하는 등 다양한 기능을 추가할 수 있습니다. 계속해서 탐험하고 실험하여 더 견고하고 효율적인 API를 만들어 보세요!","ogImage":{"url":"/assets/img/2024-06-19-HowtomakeyourfirstRESTAPIinNodejs_0.png"},"coverImage":"/assets/img/2024-06-19-HowtomakeyourfirstRESTAPIinNodejs_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>5분 이내로</h2>\n<p><img src=\"/assets/img/2024-06-19-HowtomakeyourfirstRESTAPIinNodejs_0.png\" alt=\"이미지\"></p>\n<p>Node.js에서 REST API (Representational State Transfer Application Programming Interface)를 만드는 것은 현대 웹 개발자에게 필수적인 기술입니다. 이 유형의 API는 웹 애플리케이션과 같은 다양한 클라이언트가 상태를 유지하지 않는 일련의 작업을 사용하여 서버와 상호 작용할 수 있게 합니다. 이 튜토리얼에서는 Node.js에서 간단한 REST API를 설정하는 기본 사항을 살펴보며, 데이터 유형, 클래스 및 다양한 HTTP 메서드를 사용한 코드 예제를 다룰 것입니다.</p>\n<h1>필수 사항</h1>\n<div class=\"content-ad\"></div>\n<p>시작하기 전에 시스템에 Node.js가 설치되어 있는지 확인해주세요. Node.js는 nodejs.org에서 다운로드할 수 있습니다. 또한 JavaScript, Node.js, 그리고 인기 있는 Node.js 프레임워크 Express에 대한 기본적인 이해가 필요합니다.</p>\n<h1>단계 1: 프로젝트 설정하기</h1>\n<p>먼저, 프로젝트를 위한 새 디렉토리를 만들고 그 안에서 새 Node.js 프로젝트를 초기화하세요.</p>\n<pre><code class=\"hljs language-js\">mkdir my-rest-api\ncd my-rest-api\nnpm init -y\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>위 작업은 당신의 프로젝트 종속성을 관리할 package.json 파일을 디렉토리에 생성합니다.</p>\n<h1>단계 2: Express 설치하기</h1>\n<p>HTTP 요청을 쉽게 처리하려면 Express를 설치하세요.</p>\n<pre><code class=\"hljs language-js\">npm install express\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>단계 3: 첫 번째 엔드포인트 생성하기</h1>\n<p>이제 프로젝트 디렉토리에 index.js 파일을 생성하세요. 이것이 진입점이 될 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\">() =></span> {\n <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"포트 3000에서 실행 중인 서버\"</span>);\n});\n</code></pre>\n<p>이 코드는 포트 3000에서 수신 대기하는 기본 Express 서버를 설정합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>단계 4: HTTP 메소드 처리</h1>\n<p>REST API는 다양한 HTTP 메소드와 함께 작동합니다. 가장 일반적인 메소드는 GET, POST, PUT 및 DELETE입니다.</p>\n<h1>GET 요청</h1>\n<p>간단한 메시지를 반환하는 GET 엔드포인트를 만들어 봅시다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"/msg\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =></span> {\n  res.<span class=\"hljs-title function_\">json</span>({<span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"안녕, 세계!\"</span>});\n});\n</code></pre>\n<h1>POST 요청</h1>\n<p>POST 요청을 할 때는 종종 데이터를 받게 됩니다. 예시를 보겠습니다.</p>\n<pre><code class=\"hljs language-js\">app.<span class=\"hljs-title function_\">use</span>(express.<span class=\"hljs-title function_\">json</span>()); <span class=\"hljs-comment\">// for parsing application/json</span>\n\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/msg\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> message = req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">message</span>;\n  res.<span class=\"hljs-title function_\">json</span>({<span class=\"hljs-string\">\"receivedMessage\"</span>: message});\n});\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>단계 5: 클래스와 데이터 유형 사용하기</h1>\n<p>더 나은 코드 구성을 위해 클래스를 사용하여 코드를 구성할 수 있습니다. Message 클래스를 만들어 봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Message</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">content</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">content</span> = content;\n  }\n\n  <span class=\"hljs-title function_\">getContent</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">content</span>;\n  }\n}\n</code></pre>\n<p>이제 이 클래스를 사용하여 POST 엔드포인트를 리팩토링할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/msg\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> newMessage = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Message</span>(req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">message</span>);\n  res.<span class=\"hljs-title function_\">json</span>({<span class=\"hljs-string\">\"receivedMessage\"</span>: newMessage.<span class=\"hljs-title function_\">getContent</span>()}); \n});\n</code></pre>\n<h1>단계 6: API 테스트하기</h1>\n<p>API를 테스트하려면 Postman이나 cURL과 같은 도구를 사용할 수 있습니다. GET 요청의 경우 브라우저에서 <a href=\"http://localhost:3000/msg\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000/msg</a> 로 간단히 방문할 수 있습니다.</p>\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>Node.js에서 REST API를 만드는 것은 연습을 통해 더 직관적인 과정이 되는 간단한 일입니다. Express의 사용은 다양한 HTTP 메소드를 간단하게 처리하게 해주며, 클래스와 적절한 데이터 유형을 사용하여 코드를 조직화하면 유지 관리 및 가독성을 크게 향상시킬 수 있습니다.</p>\n<p>기억하세요, 이것은 시작점에 불과합니다. 더 편안해지면 API를 더 복잡한 라우트로 확장하거나 데이터베이스에 연결하거나 인증을 구현하는 등 다양한 기능을 추가할 수 있습니다. 계속해서 탐험하고 실험하여 더 견고하고 효율적인 API를 만들어 보세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}