{"pageProps":{"post":{"title":"Nextjs 프로젝트에서 ApexCharts를 사용하는 방법","description":"","date":"2024-05-12 22:10","slug":"2024-05-12-HowToUseApexChartsinaNextjsProject","content":"\n\n![이미지](/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_0.png)\n\nNext.js는 확실히 프런트엔드 랜드스케이프에서 주요 메타 프레임워크 중 하나입니다. 그러나 인기 있는 차트 라이브러리인 ApexCharts를 Next.js와 함께 사용할 때 특정 문제가 발생하는 것 같습니다. 이 글에서는 그 문제가 무엇인지와 해결 방법에 대해 논의하겠습니다.\n\n# 새 프로젝트를 초기화하는 방법을 살펴봅시다\n\n다음은 새 Next.js 프로젝트를 초기화하는 명령 프롬프트입니다(이미 초기화하는 방법을 잘 알고 계실 것 같지만, 문서를 열 필요 없이 편리하게 확인하실 수 있도록 제공드립니다)\n\n\n\n```js\n#npm\nnpx create-next-app@latest\n\n#pnpm\npnpm create next-app\n```\n\nApexCharts를 위한 필요한 의존성을 모두 설치하는 것을 잊지 마세요. 리액트 래퍼를 포함하면 됩니다.\n\n```js\n#npm\nnpm i react-apexcharts apexcharts\n\n#pnpm\npnpm i react-apexcharts apexcharts\n```\n\n우리는 기존의 신뢰받는 페이지와 새롭고 반짝이는 앱 디렉토리를 함께 사용할 것입니다. 두 가지의 구현 차이는 크지 않으니 시작해 봅시다.\n\n\n\n두 가지 디렉토리 유형 중에서, 저는 개인적으로 폴더 구조를 이렇게 선호합니다 (특히 components 폴더 위치). 여러분은 자신의 구조 선호도에 맞게 조정하시면 됩니다.\n\n```js\nnextjs_project\n├── node_modules\n├── public\n└── src\n    ├── components\n    └── pages/app\n```\n\n# 그래프 컴포넌트 만들기\n\ncomponents 폴더 안에, charts.tsx/jsx 파일을 만들어 보겠습니다.\n\n\n\n```js\n// charts.tsx/jsx\n\n'use client' // 앱 디렉토리를 사용한다면, 이 줄을 빼먹지 마세요\n\nimport dynamic from \"next/dynamic\";\nconst ApexChart = dynamic(() => import(\"react-apexcharts\"), { ssr: false });\n\n\nexport function ExampleChart(){\n\n    const option = {\n        chart: {\n          id: 'apexchart-example'\n        },\n        xaxis: {\n          categories: [1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999]\n        }\n      }\n\n    const series = [{\n        name: 'series-1',\n        data: [30, 40, 35, 50, 49, 60, 70, 91, 125]\n      }]\n\n    return(\n        <>\n            <ApexChart type=\"line\" options={option} series={series} height={200} width={500} />\n        </>\n    )\n    \n}\n```\n\n만약 react-apexcharts — npm (npmjs.com)에서 아래와 같이 가져오려고 한다면\n\n```js\nimport Chart from 'react-apexcharts'\n```\n\n아마도 이런 에러를 마주하게 될 것입니다\n\n\n\n마크다운 형식을 사용하면 더 좋을 것 같아요.\n\n![HowToUseApexChartsinaNextjsProject_1](/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_1.png)\n\n혹은 터미널에서는 이렇게 보일지도 몰라요.\n\n![HowToUseApexChartsinaNextjsProject_2](/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_2.png)\n\n이 에러는 Next.js의 자동 프리랜더링(렌더링: 자동 정적 최적화 | Next.js (nextjs.org)) 때문에 발생한 것 같아요. ApexChart 라이브러리는 클라이언트 쪽에 있는 window 인터페이스에 의존하기 때문에 본문 작성 시점에는 서버에서 프리랜더링할 수 없는 것으로 보입니다.\n\n\n\n그래서 Next.js가 이 경우를 해결하기 위해 제공한 솔루션은 내장된 next/dynamic을 사용하여 동적 가져오기를 수행하고 서버 측 사전 렌더링을 중지하도록 명시적으로 구성하는 것입니다.\n\n```js\n'use client' // 전체 파일을 클라이언트 측 컴포넌트로 표시하려면 앱 디렉터리를 사용하는 경우 이 부분을 잊지 마세요\n\nimport dynamic from \"next/dynamic\";\nconst Chart = dynamic(() => import(\"react-apexcharts\"), { ssr: false });\n```\n\n# 직접 해 보세요!\n\n이것은 페이지 디렉터리를 위한 것입니다.\n\n\n\n그리고 이것은 앱 디렉토리를 위한 것입니다.\n\n지금까지 제가 전달할 내용은 여기까지입니다. 읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_0.png"},"coverImage":"/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_0.png\" alt=\"이미지\"></p>\n<p>Next.js는 확실히 프런트엔드 랜드스케이프에서 주요 메타 프레임워크 중 하나입니다. 그러나 인기 있는 차트 라이브러리인 ApexCharts를 Next.js와 함께 사용할 때 특정 문제가 발생하는 것 같습니다. 이 글에서는 그 문제가 무엇인지와 해결 방법에 대해 논의하겠습니다.</p>\n<h1>새 프로젝트를 초기화하는 방법을 살펴봅시다</h1>\n<p>다음은 새 Next.js 프로젝트를 초기화하는 명령 프롬프트입니다(이미 초기화하는 방법을 잘 알고 계실 것 같지만, 문서를 열 필요 없이 편리하게 확인하실 수 있도록 제공드립니다)</p>\n<pre><code class=\"hljs language-js\">#npm\nnpx create-next-app@latest\n\n#pnpm\npnpm create next-app\n</code></pre>\n<p>ApexCharts를 위한 필요한 의존성을 모두 설치하는 것을 잊지 마세요. 리액트 래퍼를 포함하면 됩니다.</p>\n<pre><code class=\"hljs language-js\">#npm\nnpm i react-apexcharts apexcharts\n\n#pnpm\npnpm i react-apexcharts apexcharts\n</code></pre>\n<p>우리는 기존의 신뢰받는 페이지와 새롭고 반짝이는 앱 디렉토리를 함께 사용할 것입니다. 두 가지의 구현 차이는 크지 않으니 시작해 봅시다.</p>\n<p>두 가지 디렉토리 유형 중에서, 저는 개인적으로 폴더 구조를 이렇게 선호합니다 (특히 components 폴더 위치). 여러분은 자신의 구조 선호도에 맞게 조정하시면 됩니다.</p>\n<pre><code class=\"hljs language-js\">nextjs_project\n├── node_modules\n├── public\n└── src\n    ├── components\n    └── pages/app\n</code></pre>\n<h1>그래프 컴포넌트 만들기</h1>\n<p>components 폴더 안에, charts.tsx/jsx 파일을 만들어 보겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// charts.tsx/jsx</span>\n\n<span class=\"hljs-string\">'use client'</span> <span class=\"hljs-comment\">// 앱 디렉토리를 사용한다면, 이 줄을 빼먹지 마세요</span>\n\n<span class=\"hljs-keyword\">import</span> dynamic <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/dynamic\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ApexChart</span> = <span class=\"hljs-title function_\">dynamic</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">\"react-apexcharts\"</span>), { <span class=\"hljs-attr\">ssr</span>: <span class=\"hljs-literal\">false</span> });\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ExampleChart</span>(<span class=\"hljs-params\"></span>){\n\n    <span class=\"hljs-keyword\">const</span> option = {\n        <span class=\"hljs-attr\">chart</span>: {\n          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'apexchart-example'</span>\n        },\n        <span class=\"hljs-attr\">xaxis</span>: {\n          <span class=\"hljs-attr\">categories</span>: [<span class=\"hljs-number\">1991</span>, <span class=\"hljs-number\">1992</span>, <span class=\"hljs-number\">1993</span>, <span class=\"hljs-number\">1994</span>, <span class=\"hljs-number\">1995</span>, <span class=\"hljs-number\">1996</span>, <span class=\"hljs-number\">1997</span>, <span class=\"hljs-number\">1998</span>, <span class=\"hljs-number\">1999</span>]\n        }\n      }\n\n    <span class=\"hljs-keyword\">const</span> series = [{\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'series-1'</span>,\n        <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">91</span>, <span class=\"hljs-number\">125</span>]\n      }]\n\n    <span class=\"hljs-keyword\">return</span>(\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ApexChart</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"line\"</span> <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{option}</span> <span class=\"hljs-attr\">series</span>=<span class=\"hljs-string\">{series}</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">{200}</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">{500}</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/></span></span>\n    )\n    \n}\n</code></pre>\n<p>만약 react-apexcharts — npm (npmjs.com)에서 아래와 같이 가져오려고 한다면</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Chart</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-apexcharts'</span>\n</code></pre>\n<p>아마도 이런 에러를 마주하게 될 것입니다</p>\n<p>마크다운 형식을 사용하면 더 좋을 것 같아요.</p>\n<p><img src=\"/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_1.png\" alt=\"HowToUseApexChartsinaNextjsProject_1\"></p>\n<p>혹은 터미널에서는 이렇게 보일지도 몰라요.</p>\n<p><img src=\"/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_2.png\" alt=\"HowToUseApexChartsinaNextjsProject_2\"></p>\n<p>이 에러는 Next.js의 자동 프리랜더링(렌더링: 자동 정적 최적화 | Next.js (nextjs.org)) 때문에 발생한 것 같아요. ApexChart 라이브러리는 클라이언트 쪽에 있는 window 인터페이스에 의존하기 때문에 본문 작성 시점에는 서버에서 프리랜더링할 수 없는 것으로 보입니다.</p>\n<p>그래서 Next.js가 이 경우를 해결하기 위해 제공한 솔루션은 내장된 next/dynamic을 사용하여 동적 가져오기를 수행하고 서버 측 사전 렌더링을 중지하도록 명시적으로 구성하는 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">'use client'</span> <span class=\"hljs-comment\">// 전체 파일을 클라이언트 측 컴포넌트로 표시하려면 앱 디렉터리를 사용하는 경우 이 부분을 잊지 마세요</span>\n\n<span class=\"hljs-keyword\">import</span> dynamic <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/dynamic\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Chart</span> = <span class=\"hljs-title function_\">dynamic</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">\"react-apexcharts\"</span>), { <span class=\"hljs-attr\">ssr</span>: <span class=\"hljs-literal\">false</span> });\n</code></pre>\n<h1>직접 해 보세요!</h1>\n<p>이것은 페이지 디렉터리를 위한 것입니다.</p>\n<p>그리고 이것은 앱 디렉토리를 위한 것입니다.</p>\n<p>지금까지 제가 전달할 내용은 여기까지입니다. 읽어 주셔서 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}