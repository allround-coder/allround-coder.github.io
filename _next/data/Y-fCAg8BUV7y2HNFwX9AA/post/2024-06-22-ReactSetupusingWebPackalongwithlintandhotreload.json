{"pageProps":{"post":{"title":"리액트 설정 WebPack, 린트 그리고 핫리로드 사용 방법","description":"","date":"2024-06-22 03:01","slug":"2024-06-22-ReactSetupusingWebPackalongwithlintandhotreload","content":"\n\n## React의 기본 설정, 핫 리로딩, 린트, 웹팩\n\n![React 설정](/assets/img/2024-06-22-ReactSetupusingWebPackalongwithlintandhotreload_0.png)\n\n## 1. 폴더 생성\n\n```js\nmkdir 폴더명\ncd 폴더명\n```\n\n<div class=\"content-ad\"></div>\n\n## 2. git 설치하기\n\n```js\ngit init // 명령을 완료하려면 Enter 키를 여러 번 누르세요\n```\n\n## 3. .gitignore 파일 생성\n\n.gitignore 파일을 생성하고 아래 코드를 추가하세요\n\n<div class=\"content-ad\"></div>\n\n```js\n// .gitignore 파일에 아래 라인 추가\n\nnode_modules\n.DS_Store\n```\n\n## 4. 루트 폴더에 Package.json 생성\n\n```js\nnpm init // 명령어를 실행하고 엔터 키를 여러 번 눌러주세요\n```\n\n## 5. 루트 폴더에 린트 추가하기\n\n<div class=\"content-ad\"></div>\n\n프로젝트에 lint 패키지를 소개하고 있어요. Airbnb는 우리가 사용할 표준 lint 패키지입니다. 먼저 아래 명령어로 패키지를 설치해주세요.\n\n```js\n// lint npm 패키지 및 의존성 설치\nnpx install-peerdeps --dev eslint-config-airbnb\n```\n\n.eslintrc 파일을 만들고 아래 코드를 추가해주세요.\n\n```js\n{\n  \"extends\": \"airbnb\",\n  \"parser\": \"@babel/eslint-parser\",\n  \"plugins\": [\n    \"react-hooks\"\n  ],\n  \"globals\": {\n    \"globalThis\": true,\n    \"google\": true,\n    \"document\": true\n  },\n  \"rules\": {\n    \"import/no-extraneous-dependencies\": [\"off\"], // webpack-dashboard와 같은 외부 종속성 사용 필요\n    \"react/jsx-filename-extension\": [1, { \"extensions\": [\".js\", \".jsx\"] }] // jsx 사용 필요\n  },\n  \"parserOptions\": {\n    \"ecmaVersion\":\"latest\" // 최신 ECMA 스크립트 지원을 위해\n}\n```\n\n<div class=\"content-ad\"></div>\n\nMarkdown 형식으로 표 태그를 변경하십시오. \n\n또한 VScode에 ESLint 플러그인을 설치하십시오. vscode에서 eslint 확장 프로그램 이미지를 아래 이미지에서 확인하십시오.\n\n![eslint extension in vscode](/assets/img/2024-06-22-ReactSetupusingWebPackalongwithlintandhotreload_1.png)\n\n## 6. 루트 폴더에 .editorconfig 파일 생성\n\n그 다음 단계로, 코드 형식을 유지하기 위해 .editorconfig 파일을 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n\n루트 = 참\n\n[*]\n들여쓰기_스타일 = 공간\n들여쓰기_크기 = 2\n줄의_끝 = lf\n문자셋 = utf-8\n뒤의_공백_제거 = 참\n마지막_새줄_삽입 = 참\r\n\n\n## 7. 루트 폴더 내 .vscode 폴더에 setting.json 만들기\n\n우리는 .vscode라는 폴더를 생성하고 .vscode 폴더 내에 setting.json 파일을 만듭니다. 아래 라인을 추가하여 린트 자동 수정 및 탭 들여쓰기가 2인 설정을 합니다. setting.json에 아래 코드를 추가하세요.\n\n\n{\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": \"explicit\",\n    \"source.fixAll\": \"always\", \n    \"editor.tabSize\": 2 \n  },\n  \"eslint.workingDirectories\": [\n      {\"mode\": \"auto\"}\n    ],\n  },\n  \"search.exclude\": {\n      \"**/index.js\": true,\n      \"**/__build-es/**\": true\n   }\n}\n\n\n<div class=\"content-ad\"></div>\n\n## 8. 앱 폴더 생성\n\n앱 폴더를 만들어보겠습니다. 모든 개발 관련 파일은 앱 폴더 아래에 위치합니다.\n\n우리는 client.js라는 새 파일을 추가하고 있습니다. 일단 client.js 내에 콘솔을 추가하고 있습니다. 나중에는 애플리케이션을 부트스트랩하기 위해 리액트 코드를 추가할 것입니다.\n\n```js\nconsole.log('Client file loaded');\n```\n\n<div class=\"content-ad\"></div>\n\n## 9. webpack.config.js 추가하기\n\n웹팩과 웹팩-cli를 설치하여 webpack.config.js를 구성하세요.\n\n```js\nnpm install webpack webpack-cli webpack-dev-server --save-dev\n```\n\n다음 단계에서는 싱글 페이지 애플리케이션을 위해 webpack.config.js를 생성하고 구성해 봅시다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst path = require('path');\n\n module.exports = {\n   entry: {\n     client: './app/client.js',\n   },\n   mode: 'development',\n   output: {\n     filename: 'client.js',\n     path: path.resolve(__dirname, 'build'),\n     publicPath: '',\n   },\n };\n```\n\npackage.json 파일 내 script 오브젝트에 명령어 추가\n\n```js\n\"build\": \"webpack --config webpack.config.js\"\n```\n\n터미널에서 명령어 실행\n\n```js\nnpm run build\n```\n\n<div class=\"content-ad\"></div>\n\n와우, 빌드 폴더 내의 js 파일을 Transpile하는 설정을 완료했어요. 빌드 폴더가 생성되었고 client.js Transpile 파일이 포함되어 있어요.\n\n## 10. JSX 지원 제공\n\nnpm i @babel/preset-react --save-dev를 설치해주세요.\n\n그리고 루트 폴더에 .babelrc 파일을 추가하고 아래 코드를 추가해주세요. 이렇게 하면 JSX 지원이 제공됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n{\n  \"presets\": [\n    \"@babel/preset-react\"\n  ]\n}\n```\n\n## 11. babel-loader를 사용하여 React 코드를 Javascript로 변환하기\n\n```js\nnpm i babel-loader --save-dev\n```\n\nmode: \"development\" 이후에 webpack.babel.js 안에 babel-loader를 추가하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nmodule: {\n  rules: [\n    {\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      use: [{ loader: 'babel-loader', options: { cacheDirectory: true } }],\n    },\n  ],\n},\n```\n\n## 12. 프로젝트에서 React 및 JSX 사용하기\n\nReact 및 react-dom 설치\n\n```js\nnpm i react react-dom --save\n```\n\n<div class=\"content-ad\"></div>\n\n아래 코드를 client.js 파일 안에 추가해주세요.\n\n```js\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\nconst APP = (\n  <div>앱이 실행 중입니다</div>\n);\n\ncreateRoot(document.getElementById('root')).render(APP);\n```\n\n## 13. 루트 폴더에 index.html을 추가해봅시다.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>App 1</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script src=\"build/client.js\"></script>\n  </body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\nindex.html 파일을 실행해 주세요.\n\n와우, 설치가 완료되었습니다.\n\n## 14. 핫 리로딩 추가하기\n\nclient.js 파일 변경이 페이지에 반영되지 않는군요. webpack-dev-server를 이용해 핫 리로딩을 추가해 봅시다.\n\n<div class=\"content-ad\"></div>\n\n```js\r\nnpm install webpack-dev-server\r\n```\r\n\r\n이제 package.json의 start 스크립트를 변경해야 합니다.\r\n\r\n```js\r\n// 이전 설정\r\n\"start\": \"webpack  --config webpack.config.js\"\r\n\r\n// 이제 핫리로딩이 가능한 설정\r\n\"start\": \"webpack-dev-server  --config webpack.config.js\"\r\n```\r\n\r\nwebpack.config.json 파일에 webpack-dev-server를 추가해주세요.\n\n<div class=\"content-ad\"></div>\n\n```js\ndevServer: {\n  devMiddleware: { writeToDisk: true },\n  static: {\n    directory: path.join(__dirname, '/'),\n  },\n  compress: true,\n  port: 9000,\n},\n```\n\n그거 정말 멋지죠. 이제 http://localhost:9000/에서 애플리케이션을 실행할 수 있어요.\n\n## 결론:\n\n이 설정에서 우리는 지원을 제공했습니다.\n\n<div class=\"content-ad\"></div>\n\n- git (버전 관리)\n- Airbnb의 ESlint\n- 코드 형식 유지\n- Linting 자동 수정\n- JSX 지원\n- React 지원\n- 핫 리로딩","ogImage":{"url":"/assets/img/2024-06-22-ReactSetupusingWebPackalongwithlintandhotreload_0.png"},"coverImage":"/assets/img/2024-06-22-ReactSetupusingWebPackalongwithlintandhotreload_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>React의 기본 설정, 핫 리로딩, 린트, 웹팩</h2>\n<p><img src=\"/assets/img/2024-06-22-ReactSetupusingWebPackalongwithlintandhotreload_0.png\" alt=\"React 설정\"></p>\n<h2>1. 폴더 생성</h2>\n<pre><code class=\"hljs language-js\">mkdir 폴더명\ncd 폴더명\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>2. git 설치하기</h2>\n<pre><code class=\"hljs language-js\">git init <span class=\"hljs-comment\">// 명령을 완료하려면 Enter 키를 여러 번 누르세요</span>\n</code></pre>\n<h2>3. .gitignore 파일 생성</h2>\n<p>.gitignore 파일을 생성하고 아래 코드를 추가하세요</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// .gitignore 파일에 아래 라인 추가</span>\n\nnode_modules\n.<span class=\"hljs-property\">DS_Store</span>\n</code></pre>\n<h2>4. 루트 폴더에 Package.json 생성</h2>\n<pre><code class=\"hljs language-js\">npm init <span class=\"hljs-comment\">// 명령어를 실행하고 엔터 키를 여러 번 눌러주세요</span>\n</code></pre>\n<h2>5. 루트 폴더에 린트 추가하기</h2>\n<div class=\"content-ad\"></div>\n<p>프로젝트에 lint 패키지를 소개하고 있어요. Airbnb는 우리가 사용할 표준 lint 패키지입니다. 먼저 아래 명령어로 패키지를 설치해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// lint npm 패키지 및 의존성 설치</span>\nnpx install-peerdeps --dev eslint-config-airbnb\n</code></pre>\n<p>.eslintrc 파일을 만들고 아래 코드를 추가해주세요.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"extends\"</span>: <span class=\"hljs-string\">\"airbnb\"</span>,\n  <span class=\"hljs-string\">\"parser\"</span>: <span class=\"hljs-string\">\"@babel/eslint-parser\"</span>,\n  <span class=\"hljs-string\">\"plugins\"</span>: [\n    <span class=\"hljs-string\">\"react-hooks\"</span>\n  ],\n  <span class=\"hljs-string\">\"globals\"</span>: {\n    <span class=\"hljs-string\">\"globalThis\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"google\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"document\"</span>: <span class=\"hljs-literal\">true</span>\n  },\n  <span class=\"hljs-string\">\"rules\"</span>: {\n    <span class=\"hljs-string\">\"import/no-extraneous-dependencies\"</span>: [<span class=\"hljs-string\">\"off\"</span>], <span class=\"hljs-comment\">// webpack-dashboard와 같은 외부 종속성 사용 필요</span>\n    <span class=\"hljs-string\">\"react/jsx-filename-extension\"</span>: [<span class=\"hljs-number\">1</span>, { <span class=\"hljs-string\">\"extensions\"</span>: [<span class=\"hljs-string\">\".js\"</span>, <span class=\"hljs-string\">\".jsx\"</span>] }] <span class=\"hljs-comment\">// jsx 사용 필요</span>\n  },\n  <span class=\"hljs-string\">\"parserOptions\"</span>: {\n    <span class=\"hljs-string\">\"ecmaVersion\"</span>:<span class=\"hljs-string\">\"latest\"</span> <span class=\"hljs-comment\">// 최신 ECMA 스크립트 지원을 위해</span>\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>Markdown 형식으로 표 태그를 변경하십시오.</p>\n<p>또한 VScode에 ESLint 플러그인을 설치하십시오. vscode에서 eslint 확장 프로그램 이미지를 아래 이미지에서 확인하십시오.</p>\n<p><img src=\"/assets/img/2024-06-22-ReactSetupusingWebPackalongwithlintandhotreload_1.png\" alt=\"eslint extension in vscode\"></p>\n<h2>6. 루트 폴더에 .editorconfig 파일 생성</h2>\n<p>그 다음 단계로, 코드 형식을 유지하기 위해 .editorconfig 파일을 생성합니다.</p>\n<div class=\"content-ad\"></div>\n<p>루트 = 참</p>\n<p>[*]\n들여쓰기_스타일 = 공간\n들여쓰기_크기 = 2\n줄의_끝 = lf\n문자셋 = utf-8\n뒤의_공백_제거 = 참\n마지막_새줄_삽입 = 참</p>\n<h2>7. 루트 폴더 내 .vscode 폴더에 setting.json 만들기</h2>\n<p>우리는 .vscode라는 폴더를 생성하고 .vscode 폴더 내에 setting.json 파일을 만듭니다. 아래 라인을 추가하여 린트 자동 수정 및 탭 들여쓰기가 2인 설정을 합니다. setting.json에 아래 코드를 추가하세요.</p>\n<p>{\n\"editor.codeActionsOnSave\": {\n\"source.fixAll.eslint\": \"explicit\",\n\"source.fixAll\": \"always\",\n\"editor.tabSize\": 2\n},\n\"eslint.workingDirectories\": [\n{\"mode\": \"auto\"}\n],\n},\n\"search.exclude\": {\n\"<strong>/index.js\": true,\n\"</strong>/__build-es/**\": true\n}\n}</p>\n<div class=\"content-ad\"></div>\n<h2>8. 앱 폴더 생성</h2>\n<p>앱 폴더를 만들어보겠습니다. 모든 개발 관련 파일은 앱 폴더 아래에 위치합니다.</p>\n<p>우리는 client.js라는 새 파일을 추가하고 있습니다. 일단 client.js 내에 콘솔을 추가하고 있습니다. 나중에는 애플리케이션을 부트스트랩하기 위해 리액트 코드를 추가할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Client file loaded'</span>);\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>9. webpack.config.js 추가하기</h2>\n<p>웹팩과 웹팩-cli를 설치하여 webpack.config.js를 구성하세요.</p>\n<pre><code class=\"hljs language-js\">npm install webpack webpack-cli webpack-dev-server --save-dev\n</code></pre>\n<p>다음 단계에서는 싱글 페이지 애플리케이션을 위해 webpack.config.js를 생성하고 구성해 봅시다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n   <span class=\"hljs-attr\">entry</span>: {\n     <span class=\"hljs-attr\">client</span>: <span class=\"hljs-string\">'./app/client.js'</span>,\n   },\n   <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'development'</span>,\n   <span class=\"hljs-attr\">output</span>: {\n     <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'client.js'</span>,\n     <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">'build'</span>),\n     <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">''</span>,\n   },\n };\n</code></pre>\n<p>package.json 파일 내 script 오브젝트에 명령어 추가</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"webpack --config webpack.config.js\"</span>\n</code></pre>\n<p>터미널에서 명령어 실행</p>\n<pre><code class=\"hljs language-js\">npm run build\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>와우, 빌드 폴더 내의 js 파일을 Transpile하는 설정을 완료했어요. 빌드 폴더가 생성되었고 client.js Transpile 파일이 포함되어 있어요.</p>\n<h2>10. JSX 지원 제공</h2>\n<p>npm i @babel/preset-react --save-dev를 설치해주세요.</p>\n<p>그리고 루트 폴더에 .babelrc 파일을 추가하고 아래 코드를 추가해주세요. 이렇게 하면 JSX 지원이 제공됩니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"presets\"</span>: [\n    <span class=\"hljs-string\">\"@babel/preset-react\"</span>\n  ]\n}\n</code></pre>\n<h2>11. babel-loader를 사용하여 React 코드를 Javascript로 변환하기</h2>\n<pre><code class=\"hljs language-js\">npm i babel-loader --save-dev\n</code></pre>\n<p>mode: \"development\" 이후에 webpack.babel.js 안에 babel-loader를 추가하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">module</span>: {\n  <span class=\"hljs-attr\">rules</span>: [\n    {\n      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,\n      <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>,\n      <span class=\"hljs-attr\">use</span>: [{ <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'babel-loader'</span>, <span class=\"hljs-attr\">options</span>: { <span class=\"hljs-attr\">cacheDirectory</span>: <span class=\"hljs-literal\">true</span> } }],\n    },\n  ],\n},\n</code></pre>\n<h2>12. 프로젝트에서 React 및 JSX 사용하기</h2>\n<p>React 및 react-dom 설치</p>\n<pre><code class=\"hljs language-js\">npm i react react-dom --save\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>아래 코드를 client.js 파일 안에 추가해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { createRoot } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom/client'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserRouter</span>, <span class=\"hljs-title class_\">Routes</span>, <span class=\"hljs-title class_\">Route</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">APP</span> = (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>앱이 실행 중입니다<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n);\n\n<span class=\"hljs-title function_\">createRoot</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'root'</span>)).<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">APP</span>);\n</code></pre>\n<h2>13. 루트 폴더에 index.html을 추가해봅시다.</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>App 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"root\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"build/client.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>index.html 파일을 실행해 주세요.</p>\n<p>와우, 설치가 완료되었습니다.</p>\n<h2>14. 핫 리로딩 추가하기</h2>\n<p>client.js 파일 변경이 페이지에 반영되지 않는군요. webpack-dev-server를 이용해 핫 리로딩을 추가해 봅시다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">npm install webpack-dev-server\n</code></pre>\n<p>이제 package.json의 start 스크립트를 변경해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 이전 설정</span>\r\n<span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-string\">\"webpack  --config webpack.config.js\"</span>\r\n\r\n<span class=\"hljs-comment\">// 이제 핫리로딩이 가능한 설정</span>\r\n<span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-string\">\"webpack-dev-server  --config webpack.config.js\"</span>\n</code></pre>\n<p>webpack.config.json 파일에 webpack-dev-server를 추가해주세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">devServer</span>: {\n  <span class=\"hljs-attr\">devMiddleware</span>: { <span class=\"hljs-attr\">writeToDisk</span>: <span class=\"hljs-literal\">true</span> },\n  <span class=\"hljs-attr\">static</span>: {\n    <span class=\"hljs-attr\">directory</span>: path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">'/'</span>),\n  },\n  <span class=\"hljs-attr\">compress</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">9000</span>,\n},\n</code></pre>\n<p>그거 정말 멋지죠. 이제 <a href=\"http://localhost:9000/%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">http://localhost:9000/에서</a> 애플리케이션을 실행할 수 있어요.</p>\n<h2>결론:</h2>\n<p>이 설정에서 우리는 지원을 제공했습니다.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>git (버전 관리)</li>\n<li>Airbnb의 ESlint</li>\n<li>코드 형식 유지</li>\n<li>Linting 자동 수정</li>\n<li>JSX 지원</li>\n<li>React 지원</li>\n<li>핫 리로딩</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}