{"pageProps":{"post":{"title":"모든 개발자가 알아야 할 5가지 커스텀 React Hooks","description":"","date":"2024-05-12 19:25","slug":"2024-05-12-5CustomReactHooksEveryDeveloperShouldKnow","content":"\n\n경력 있는 ReactJS 개발자로서, 애플리케이션을 개발하는 동안 다양한 도전과 성공을 경험해왔어요. 여행을 하면서 저는 코드의 재사용성과 효율성을 향상시키기 위해 사용자 정의 React 훅에 많은 의존을 하게 되었어요. 이 글에서는 모든 개발자가 알아야 할 다섯 가지 사용자 정의 React 훅을 공유하고 싶어요. 각 훅을 하나씩 살펴보며 예시를 제시하고 제 경험도 함께 공유할 거에요.\n\n![이미지](/assets/img/2024-05-12-5CustomReactHooksEveryDeveloperShouldKnow_0.png)\n\n\n# useLocalStorage\n\n브라우저 스토리지 관리는 React 애플리케이션에서 흔한 요구사항입니다. useLocalStorage 훅을 사용하면 값을 localStorage와 동기화할 수 있어요. 최근 프로젝트에서 이를 어떻게 활용했는지 예시를 보여드릴게요:\n\n\n\n```js\nimport { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, defaultValue) => {\n  const [value, setValue] = useState(() => {\n    const storedValue = localStorage.getItem(key);\n    return storedValue ? JSON.parse(storedValue) : defaultValue;\n  });\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n};\n```\n\n이 훅 안에서는 상태 값을 로컬 스토리지에 저장된 값이나 제공된 기본 값으로 초기화합니다. 값이 변경될 때마다 스토리지를 업데이트하기 위해 useEffect를 사용합니다. 컴포넌트에서 이렇게 사용할 수 있습니다:\n\n```js\nconst App = () => {\n  const [name, setName] = useLocalStorage('name', 'John Doe');\n\n  return (\n    <div>\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      <p>Hello, {name}!</p>\n    </div>\n  );\n};\n```\n\n# useMediaQuery\n\n\n\n\n지금은 애플리케이션을 반응형으로 만들어서 다양한 화면 크기에 적응하는 것이 중요합니다. useMediaQuery 훅을 사용하면 리액트에서 미디어 쿼리를 쉽게 처리할 수 있습니다. 저는 이를 어떻게 활용했는지의 예시를 보여드리겠습니다:\n\n```js\nimport { useState, useEffect } from 'react';\n\nconst useMediaQuery = (query) => {\n  const [matches, setMatches] = useState(\n    () => window.matchMedia(query).matches\n  );\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(query);\n    const handleChange = (e) => setMatches(e.matches);\n    mediaQuery.addEventListener('change', handleChange);\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, [query]);\n  return matches;\n};\n```\n\n이 예시에서는 이벤트 리스너와 matchMedia를 사용하여 미디어 쿼리의 변경 사항을 추적하고 있습니다. 다음은 컴포넌트에서 이를 사용하는 방법입니다:\n\n```js\nconst App = () => {\n  const isMobile = useMediaQuery('(max-width: 768px)');\n\n  return (\n    <div>\n      <h1>{isMobile ? '모바일 뷰' : '데스크톱 뷰'}</h1>\n    </div>\n  );\n};\n```\n\n\n\n# useDebounce\n\nDebouncing은 일정 시간 동안의 작업 실행을 지연시키는 기술입니다. useDebounce 훅을 사용하면 어떤 값을 디바운스할 수 있습니다. 아래는 예시입니다:\n\n```js\nimport { useState, useEffect } from 'react';\n\nconst useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n};\n```\n\n이 훅을 사용하면 사용자 입력, API 요청 등을 디바운스할 수 있습니다. 다음은 실용적인 예시입니다:\n\n\n\n```js\n상태로써 App을 만들었어요. \nsearchTerm이란 상태와 setSearchTerm 함수를 만들었고, debouncedSearchTerm은 searchTerm을 500 밀리초로 지연시키는 함수를 사용하고 있어요.\n\nuseEffect 안에서는 debouncedSearchTerm을 감시하며 API 호출을 수행합니다.\n\n<input value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />\n\n# useFetch\n\n비동기적으로 데이터를 가져오는 것은 현대 웹 개발에서 흔한 작업입니다. 이를 간단하게 처리해주는 useFetch 훅을 알아봅시다.\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        const json = await response.json();\n        setData(json);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n  return { data, error, loading };\n};\n\n\n\n이 훅은 fetch 요청의 복잡성을 추상화하고 응답, 오류 및 로딩 상태를 제공합니다. 이 훅을 사용하는 방법은 다음과 같습니다:\n\nconst App = () => {\n  const { data, error, loading } = useFetch('https://api.example.com/data');\n\n  if (loading) {\n    return <p>데이터 불러오는 중...</p>;\n  }\n  if (error) {\n    return <p>오류 발생: {error.message}</p>;\n  }\n  return (\n    <div>\n      <ul>\n        {data.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n# useToggle\n\n토글 및 부울 상태를 관리하는 것은 때로는 복잡해질 수 있습니다. useToggle 훅을 사용하면 부울 상태를 쉽게 다룰 수 있습니다. 여기에 간단한 구현 방법이 있습니다:\n\n\n\nimport { useState } from 'react';\n\nconst useToggle = (initialValue = false) => {\n  const [value, setValue] = useState(initialValue);\n  const toggle = () => {\n    setValue((prevValue) => !prevValue);\n  };\n  return [value, toggle];\n};\n\n이 훅은 상태를 토글하는 프로세스를 간단하게 해줍니다. 아래는 사용 예시입니다:\n\nconst App = () => {\n  const [isModalOpen, toggleModal] = useToggle(false);\n\n  return (\n    <div>\n      <button onClick={toggleModal}>모달 토글</button>\n      {isModalOpen && <Modal />}\n    </div>\n  );\n};\n\n# 결론\n\n\n\n커스텀 React 훅은 개발 경험을 혁신적으로 향상시킬 수 있는 강력한 도구입니다. 이 글에서는 useLocalStorage, useMediaQuery, useDebounce, useFetch, 그리고 useToggle이라는 다섯 가지 커스텀 훅을 탐구했습니다. 이러한 훅을 활용하여 제 코드베이스를 최적화하고 코드 재사용성을 높이며 고품질 애플리케이션을 제공할 수 있었습니다. 여러분이 이 훅들을 저만큼 유용하게 느끼셨으면 좋겠네요. 즐거운 코딩 되세요!\n\n이 문서가 유용하다고 생각되면 박수를 치는 것을 고려해보세요. 한 번에 50번까지 박수를 칠 수 있어요!\n\n# Stackademic 🎓\n\n끝까지 읽어주셔서 감사합니다. 떠나기 전에:\n\n\n\n- 작가를 박수로 격려해주세요! 👏\n- 팔로우하기: X | LinkedIn | YouTube | Discord\n- 다른 플랫폼 방문하기: In Plain English | CoFeed | Venture | Cubed\n- Stackademic.com에서 더 많은 콘텐츠를 만나보세요","ogImage":{"url":"/assets/img/2024-05-12-5CustomReactHooksEveryDeveloperShouldKnow_0.png"},"coverImage":"/assets/img/2024-05-12-5CustomReactHooksEveryDeveloperShouldKnow_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>경력 있는 ReactJS 개발자로서, 애플리케이션을 개발하는 동안 다양한 도전과 성공을 경험해왔어요. 여행을 하면서 저는 코드의 재사용성과 효율성을 향상시키기 위해 사용자 정의 React 훅에 많은 의존을 하게 되었어요. 이 글에서는 모든 개발자가 알아야 할 다섯 가지 사용자 정의 React 훅을 공유하고 싶어요. 각 훅을 하나씩 살펴보며 예시를 제시하고 제 경험도 함께 공유할 거에요.</p>\n<p><img src=\"/assets/img/2024-05-12-5CustomReactHooksEveryDeveloperShouldKnow_0.png\" alt=\"이미지\"></p>\n<h1>useLocalStorage</h1>\n<p>브라우저 스토리지 관리는 React 애플리케이션에서 흔한 요구사항입니다. useLocalStorage 훅을 사용하면 값을 localStorage와 동기화할 수 있어요. 최근 프로젝트에서 이를 어떻게 활용했는지 예시를 보여드릴게요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useLocalStorage</span> = (<span class=\"hljs-params\">key, defaultValue</span>) => {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> storedValue = <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(key);\n    <span class=\"hljs-keyword\">return</span> storedValue ? <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(storedValue) : defaultValue;\n  });\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(key, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(value));\n  }, [key, value]);\n  <span class=\"hljs-keyword\">return</span> [value, setValue];\n};\n</code></pre>\n<p>이 훅 안에서는 상태 값을 로컬 스토리지에 저장된 값이나 제공된 기본 값으로 초기화합니다. 값이 변경될 때마다 스토리지를 업데이트하기 위해 useEffect를 사용합니다. 컴포넌트에서 이렇게 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [name, setName] = <span class=\"hljs-title function_\">useLocalStorage</span>(<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'John Doe'</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setName(e.target.value)} />\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Hello, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n</code></pre>\n<h1>useMediaQuery</h1>\n<p>지금은 애플리케이션을 반응형으로 만들어서 다양한 화면 크기에 적응하는 것이 중요합니다. useMediaQuery 훅을 사용하면 리액트에서 미디어 쿼리를 쉽게 처리할 수 있습니다. 저는 이를 어떻게 활용했는지의 예시를 보여드리겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useMediaQuery</span> = (<span class=\"hljs-params\">query</span>) => {\n  <span class=\"hljs-keyword\">const</span> [matches, setMatches] = <span class=\"hljs-title function_\">useState</span>(\n    <span class=\"hljs-function\">() =></span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(query).<span class=\"hljs-property\">matches</span>\n  );\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> mediaQuery = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(query);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleChange</span> = (<span class=\"hljs-params\">e</span>) => <span class=\"hljs-title function_\">setMatches</span>(e.<span class=\"hljs-property\">matches</span>);\n    mediaQuery.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'change'</span>, handleChange);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\n      mediaQuery.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">'change'</span>, handleChange);\n    };\n  }, [query]);\n  <span class=\"hljs-keyword\">return</span> matches;\n};\n</code></pre>\n<p>이 예시에서는 이벤트 리스너와 matchMedia를 사용하여 미디어 쿼리의 변경 사항을 추적하고 있습니다. 다음은 컴포넌트에서 이를 사용하는 방법입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> isMobile = <span class=\"hljs-title function_\">useMediaQuery</span>(<span class=\"hljs-string\">'(max-width: 768px)'</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>{isMobile ? '모바일 뷰' : '데스크톱 뷰'}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n</code></pre>\n<h1>useDebounce</h1>\n<p>Debouncing은 일정 시간 동안의 작업 실행을 지연시키는 기술입니다. useDebounce 훅을 사용하면 어떤 값을 디바운스할 수 있습니다. 아래는 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useDebounce</span> = (<span class=\"hljs-params\">value, delay</span>) => {\n  <span class=\"hljs-keyword\">const</span> [debouncedValue, setDebouncedValue] = <span class=\"hljs-title function_\">useState</span>(value);\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-title function_\">setDebouncedValue</span>(value);\n    }, delay);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-built_in\">clearTimeout</span>(timer);\n    };\n  }, [value, delay]);\n  <span class=\"hljs-keyword\">return</span> debouncedValue;\n};\n</code></pre>\n<p>이 훅을 사용하면 사용자 입력, API 요청 등을 디바운스할 수 있습니다. 다음은 실용적인 예시입니다:</p>\n<pre><code class=\"hljs language-js\">상태로써 <span class=\"hljs-title class_\">App</span>을 만들었어요. \nsearchTerm이란 상태와 setSearchTerm 함수를 만들었고, debouncedSearchTerm은 searchTerm을 <span class=\"hljs-number\">500</span> 밀리초로 지연시키는 함수를 사용하고 있어요.\n\nuseEffect 안에서는 debouncedSearchTerm을 감시하며 <span class=\"hljs-variable constant_\">API</span> 호출을 수행합니다.\n\n&#x3C;input value={searchTerm} onChange={<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =></span> <span class=\"hljs-title function_\">setSearchTerm</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)} />\n\n# useFetch\n\n비동기적으로 데이터를 가져오는 것은 현대 웹 개발에서 흔한 작업입니다. 이를 간단하게 처리해주는 useFetch 훅을 알아봅시다.\n\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useFetch</span> = (<span class=\"hljs-params\">url</span>) => {\n  <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [error, setError] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fetchData</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(url);\n        <span class=\"hljs-keyword\">const</span> json = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n        <span class=\"hljs-title function_\">setData</span>(json);\n      } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-title function_\">setError</span>(error);\n      } <span class=\"hljs-keyword\">finally</span> {\n        <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n      }\n    };\n    <span class=\"hljs-title function_\">fetchData</span>();\n  }, [url]);\n  <span class=\"hljs-keyword\">return</span> { data, error, loading };\n};\n\n\n\n이 훅은 fetch 요청의 복잡성을 추상화하고 응답, 오류 및 로딩 상태를 제공합니다. 이 훅을 사용하는 방법은 다음과 같습니다:\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> { data, error, loading } = <span class=\"hljs-title function_\">useFetch</span>(<span class=\"hljs-string\">'https://api.example.com/data'</span>);\n\n  <span class=\"hljs-keyword\">if</span> (loading) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>데이터 불러오는 중...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n  }\n  <span class=\"hljs-keyword\">if</span> (error) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>오류 발생: {error.message}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n  }\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        {data.map((item) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item.id}</span>></span>{item.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n# useToggle\n\n토글 및 부울 상태를 관리하는 것은 때로는 복잡해질 수 있습니다. useToggle 훅을 사용하면 부울 상태를 쉽게 다룰 수 있습니다. 여기에 간단한 구현 방법이 있습니다:\n\n\n\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useToggle</span> = (<span class=\"hljs-params\">initialValue = <span class=\"hljs-literal\">false</span></span>) => {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(initialValue);\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">toggle</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prevValue</span>) =></span> !prevValue);\n  };\n  <span class=\"hljs-keyword\">return</span> [value, toggle];\n};\n\n이 훅은 상태를 토글하는 프로세스를 간단하게 해줍니다. 아래는 사용 예시입니다:\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [isModalOpen, toggleModal] = <span class=\"hljs-title function_\">useToggle</span>(<span class=\"hljs-literal\">false</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleModal}</span>></span>모달 토글<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      {isModalOpen &#x26;&#x26; <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Modal</span> /></span>}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n# 결론\n\n\n\n커스텀 <span class=\"hljs-title class_\">React</span> 훅은 개발 경험을 혁신적으로 향상시킬 수 있는 강력한 도구입니다. 이 글에서는 useLocalStorage, useMediaQuery, useDebounce, useFetch, 그리고 useToggle이라는 다섯 가지 커스텀 훅을 탐구했습니다. 이러한 훅을 활용하여 제 코드베이스를 최적화하고 코드 재사용성을 높이며 고품질 애플리케이션을 제공할 수 있었습니다. 여러분이 이 훅들을 저만큼 유용하게 느끼셨으면 좋겠네요. 즐거운 코딩 되세요!\n\n이 문서가 유용하다고 생각되면 박수를 치는 것을 고려해보세요. 한 번에 <span class=\"hljs-number\">50</span>번까지 박수를 칠 수 있어요!\n\n# <span class=\"hljs-title class_\">Stackademic</span> 🎓\n\n끝까지 읽어주셔서 감사합니다. 떠나기 전에:\n\n\n\n- 작가를 박수로 격려해주세요! 👏\n- 팔로우하기: X | <span class=\"hljs-title class_\">LinkedIn</span> | <span class=\"hljs-title class_\">YouTube</span> | <span class=\"hljs-title class_\">Discord</span>\n- 다른 플랫폼 방문하기: <span class=\"hljs-title class_\">In</span> <span class=\"hljs-title class_\">Plain</span> <span class=\"hljs-title class_\">English</span> | <span class=\"hljs-title class_\">CoFeed</span> | <span class=\"hljs-title class_\">Venture</span> | <span class=\"hljs-title class_\">Cubed</span>\n- <span class=\"hljs-title class_\">Stackademic</span>.<span class=\"hljs-property\">com</span>에서 더 많은 콘텐츠를 만나보세요\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}