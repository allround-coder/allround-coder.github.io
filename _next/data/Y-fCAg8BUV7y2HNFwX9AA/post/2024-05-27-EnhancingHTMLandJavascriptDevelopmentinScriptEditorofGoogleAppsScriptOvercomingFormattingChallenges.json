{"pageProps":{"post":{"title":"Google Apps Script의 스크립트 편집기에서 HTML 및 Javascript 개발 기능 향상하기 서식 지정 문제 극복하기","description":"","date":"2024-05-27 19:09","slug":"2024-05-27-EnhancingHTMLandJavascriptDevelopmentinScriptEditorofGoogleAppsScriptOvercomingFormattingChallenges","content":"\n\n\n![EnhancingHTMLandJavascriptDevelopmentinScriptEditorofGoogleAppsScript](/assets/img/2024-05-27-EnhancingHTMLandJavascriptDevelopmentinScriptEditorofGoogleAppsScriptOvercomingFormattingChallenges_0.png)\n\n# 개요\n\n2022년 4월에 시작된 Google Apps Script IDE가 개선되었음에도 불구하고 HTML 및 Javascript 개발에 대한 어려움이 발생합니다. 특히 스크립트 편집기의 내장된 언어 형식 지정은 큰 Javascript 코드베이스에 대해 불충분하며, 잠재적으로 오류를 일으킬 수 있습니다. 본 보고서는 이러한 형식 지정 문제를 해결하고 스크립트 편집기 내에서 개발을 원활하게 할 수 있는 솔루션을 제안합니다.\n\n# 소개\n\n\n<div class=\"content-ad\"></div>\n\nGoogle Apps Script 통합 개발 환경(IDE) 스크립트 편집기가 2022년 4월 13일에 중요한 업데이트를 받아 더 현대적이고 간소화된 개발 환경으로 변모했습니다. 이 향상된 IDE를 통해 개발자들은 그들의 조직을 위해 구글 워크스페이스 애플리케이션의 기능을 확장하는 사용자 정의 솔루션을 만들 수 있습니다.\n\n스크립트 편집기는 Google Apps Script 개발에 유용한 도구지만, HTML 및 Javascript를 사용할 때 문제가 발생할 수 있습니다. 현재 스크립트 편집기 내에서 HTML 및 Javascript 개발은 직접 HTML 파일에서 발생합니다. 편집기는 서식 지원 기능을 제공하지만, Javascript 코드 포맷팅은 HTML 포맷팅과 비교했을 때 덜 견고해 보입니다. 이로 인해 큰 Javascript 코드베이스를 다룰 때 특히 오류가 발생할 수 있습니다.\n\n본 보고서는 이 특정 문제에 대한 해결책을 제안합니다. Google Apps Script 스크립트 편집기 내에서 HTML 및 Javascript를 효과적으로 개발하는 방법을 탐구하고, 개발 효율성을 향상시키고 오류를 줄일 수 있도록 올바른 Javascript 코드 포맷팅을 보장합니다.\n\n# 사용법\n\n<div class=\"content-ad\"></div>\n\n# 1. Google Apps Script 프로젝트 만들기\n\n이 샘플에서는 HTML 및 Javascript를 사용하기 위해 Google Spreadsheet에서 대화 상자를 사용합니다. 따라서 새 Google Spreadsheet를 만들고 스크립트 편집기를 열어주세요.\n\n# 2. 샘플 스크립트 1\n\n이 섹션에서 현재 문제를 설명합니다. 아래 스크립트와 HTML을 복사하여 스크립트 편집기에 붙여넣어주세요.\n\n<div class=\"content-ad\"></div>\n\n# code.gs\n\n```js\nfunction openDialog() {\n  const html = HtmlService.createHtmlOutputFromFile(\"index\");\n  SpreadsheetApp.getUi().showModalDialog(html, \"sample\");\n}\n```\n\n# index.html\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n<base target=\"_top\">\n</head>\n<body>\n<div id=\"sample\"></div>\n<script>\nconst array = [[\"A1\", \"B1\", \"C1\"],[\"A2\", \"B2\", \"C2\"],[\"A3\", \"B3\", \"C3\"]];\nconst div = document.getElementById(\"sample\");\nconst table = document.createElement('table');\ntable.border = \"1\";\ntable.style.width = \"100%\";\ntable.style[\"border-collapse\"] = \"collapse\";\nfor (let i = 0; i < array.length; i++) {\n  const tr = document.createElement('tr');\n  for (let j = 0; j < array[i].length; j++) {\n    const td = document.createElement('td');\n    const text = document.createTextNode(array[i][j]);\n    td.appendChild(text);\n    tr.appendChild(td);\n  }\n  table.appendChild(tr);\n}\ndiv.appendChild(table);\n</script>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n# 테스트\n\nopenDialog 함수를 실행하면 대화 상자가 열리고 대화 상자에서 다음 테이블을 볼 수 있습니다. HTML과 JavaScript가 잘 작동하는 것을 확인할 수 있습니다.\n\n![Table Image](/assets/img/2024-05-27-EnhancingHTMLandJavascriptDevelopmentinScriptEditorofGoogleAppsScriptOvercomingFormattingChallenges_1.png)\n\n다음 단계로 넘어가면 index.html을 볼 때 JavaScript 형식이 지정되지 않았고 가독성이 낮다는 것을 알 수 있습니다. 이 코드를 스크립트 편집기에서 형식을 맞추면 다음과 같이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/0*AQlYdIS3NlLn6zcy.gif\" />\n\n코드를 서식화하면 HTML이 올바르게 서식이 적용됩니다. 그러나 Javascript는 올바르게 서식이 적용되지 않는 것을 볼 수 있습니다. 이 상황은 Javascript를 개발하는 데 문제가 될 수 있다고 생각합니다.\n\n# 3. 샘플 스크립트 2\n\n본 섹션에서는 상기 상황을 피하기 위한 해결책으로 샘플 스크립트 2를 소개하고자 합니다. 따라서 아래 스크립트를 복사하기 전에 상기 섹션에서 사용된 code.gs 및 index.html을 지우고, 다음 스크립트와 HTML을 스크립트 편집기에 복사하여 붙여넣어 주세요.\n\n<div class=\"content-ad\"></div>\n\n# code.gs\n\n```js\nfunction javascript_() {\n  const array = [[\"A1\", \"B1\", \"C1\"],[\"A2\", \"B2\", \"C2\"],[\"A3\", \"B3\", \"C3\"]];\n  const div = document.getElementById(\"sample\");\n  const table = document.createElement('table');\n  table.border = \"1\";\n  table.style.width = \"100%\";\n  table.style[\"border-collapse\"] = \"collapse\";\n  \n  for (let i = 0; i < array.length; i++) {\n    const tr = document.createElement('tr');\n    \n    for (let j = 0; j < array[i].length; j++) {\n      const td = document.createElement('td');\n      const text = document.createTextNode(array[i][j]);\n      td.appendChild(text);\n      tr.appendChild(td);\n    }\n    \n    table.appendChild(tr);\n  }\n  \n  div.appendChild(table);\n}\n\nfunction openDialog() {\n  const html = HtmlService.createTemplateFromFile(\"index\");\n  html.javascript = javascript_\n    .toString()\n    .match(/^function javascript_\\(\\) {([\\s\\S\\w]*)}$/)[1];\n  SpreadsheetApp.getUi().showModalDialog(html.evaluate(), \"sample\");\n}\n```\n\n# index.html\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n<base target=\"_top\">\n</head>\n<body>\n<div id=\"sample\"></div>\n<script>\n<?!= javascript ?>\n</script>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n# 테스팅\n\nopenDialog 함수를 실행하면 대화 상자가 열리고 대화 상자에서 다음 표를 볼 수 있습니다. 위 섹션에서 동일한 결과를 볼 수 있습니다.\n\n다음 단계로, 현재 index.html 및 code.gs를 확인하면 두 형식 모두 미완료되고 가독성이 낮음을 알 수 있습니다. 이러한 코드가 스크립트 편집기로 형식이 지정되면 다음과 같이 됩니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1400/0*Sszz38pwq-gqhqju.gif)\n\n<div class=\"content-ad\"></div>\n\nindex.html과 code.gs를 형식화하면 두 파일 모두 적절한 서식으로 표시되어 가독성이 향상됩니다. 또한 JavaScript 코드는 대화 상자 내에서 올바르게 작동합니다.\n\n이전에 언급했듯이 스크립트 편집기는 현재 code.gs 스크립트 파일 내의 Google Apps 스크립트를 형식화할 수 있습니다. 이 보고서는이 기능을 해결책으로 활용합니다. JavaScript는 code.gs 스크립트 파일에서 개발되며 개발된 코드는 index.html HTML 파일로 가져옵니다. 이 작업 흐름을 통해 JavaScript 코드를 적절히 형식화하여 개발할 수 있습니다.\n\n# 중요\n\nJavaScript 코드에 스크립트 편집기와 호환되지 않는 구문이 포함된 경우 이 해결책을 적용할 수 없음에 유의해 주세요. 이러한 시나리오에서 주의해 주시기 바랍니다.\n\n<div class=\"content-ad\"></div>\n\n# 참고\n\n- 최상단의 추상 이미지는 Gemini에게 이 보고서를 제공하여 생성되었습니다.","ogImage":{"url":"/assets/img/2024-05-27-EnhancingHTMLandJavascriptDevelopmentinScriptEditorofGoogleAppsScriptOvercomingFormattingChallenges_0.png"},"coverImage":"/assets/img/2024-05-27-EnhancingHTMLandJavascriptDevelopmentinScriptEditorofGoogleAppsScriptOvercomingFormattingChallenges_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-27-EnhancingHTMLandJavascriptDevelopmentinScriptEditorofGoogleAppsScriptOvercomingFormattingChallenges_0.png\" alt=\"EnhancingHTMLandJavascriptDevelopmentinScriptEditorofGoogleAppsScript\"></p>\n<h1>개요</h1>\n<p>2022년 4월에 시작된 Google Apps Script IDE가 개선되었음에도 불구하고 HTML 및 Javascript 개발에 대한 어려움이 발생합니다. 특히 스크립트 편집기의 내장된 언어 형식 지정은 큰 Javascript 코드베이스에 대해 불충분하며, 잠재적으로 오류를 일으킬 수 있습니다. 본 보고서는 이러한 형식 지정 문제를 해결하고 스크립트 편집기 내에서 개발을 원활하게 할 수 있는 솔루션을 제안합니다.</p>\n<h1>소개</h1>\n<div class=\"content-ad\"></div>\n<p>Google Apps Script 통합 개발 환경(IDE) 스크립트 편집기가 2022년 4월 13일에 중요한 업데이트를 받아 더 현대적이고 간소화된 개발 환경으로 변모했습니다. 이 향상된 IDE를 통해 개발자들은 그들의 조직을 위해 구글 워크스페이스 애플리케이션의 기능을 확장하는 사용자 정의 솔루션을 만들 수 있습니다.</p>\n<p>스크립트 편집기는 Google Apps Script 개발에 유용한 도구지만, HTML 및 Javascript를 사용할 때 문제가 발생할 수 있습니다. 현재 스크립트 편집기 내에서 HTML 및 Javascript 개발은 직접 HTML 파일에서 발생합니다. 편집기는 서식 지원 기능을 제공하지만, Javascript 코드 포맷팅은 HTML 포맷팅과 비교했을 때 덜 견고해 보입니다. 이로 인해 큰 Javascript 코드베이스를 다룰 때 특히 오류가 발생할 수 있습니다.</p>\n<p>본 보고서는 이 특정 문제에 대한 해결책을 제안합니다. Google Apps Script 스크립트 편집기 내에서 HTML 및 Javascript를 효과적으로 개발하는 방법을 탐구하고, 개발 효율성을 향상시키고 오류를 줄일 수 있도록 올바른 Javascript 코드 포맷팅을 보장합니다.</p>\n<h1>사용법</h1>\n<div class=\"content-ad\"></div>\n<h1>1. Google Apps Script 프로젝트 만들기</h1>\n<p>이 샘플에서는 HTML 및 Javascript를 사용하기 위해 Google Spreadsheet에서 대화 상자를 사용합니다. 따라서 새 Google Spreadsheet를 만들고 스크립트 편집기를 열어주세요.</p>\n<h1>2. 샘플 스크립트 1</h1>\n<p>이 섹션에서 현재 문제를 설명합니다. 아래 스크립트와 HTML을 복사하여 스크립트 편집기에 붙여넣어주세요.</p>\n<div class=\"content-ad\"></div>\n<h1>code.gs</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">openDialog</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-title class_\">HtmlService</span>.<span class=\"hljs-title function_\">createHtmlOutputFromFile</span>(<span class=\"hljs-string\">\"index\"</span>);\n  <span class=\"hljs-title class_\">SpreadsheetApp</span>.<span class=\"hljs-title function_\">getUi</span>().<span class=\"hljs-title function_\">showModalDialog</span>(html, <span class=\"hljs-string\">\"sample\"</span>);\n}\n</code></pre>\n<h1>index.html</h1>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">base</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_top\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"sample\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n<span class=\"hljs-keyword\">const</span> array = [[<span class=\"hljs-string\">\"A1\"</span>, <span class=\"hljs-string\">\"B1\"</span>, <span class=\"hljs-string\">\"C1\"</span>],[<span class=\"hljs-string\">\"A2\"</span>, <span class=\"hljs-string\">\"B2\"</span>, <span class=\"hljs-string\">\"C2\"</span>],[<span class=\"hljs-string\">\"A3\"</span>, <span class=\"hljs-string\">\"B3\"</span>, <span class=\"hljs-string\">\"C3\"</span>]];\n<span class=\"hljs-keyword\">const</span> div = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"sample\"</span>);\n<span class=\"hljs-keyword\">const</span> table = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'table'</span>);\ntable.<span class=\"hljs-property\">border</span> = <span class=\"hljs-string\">\"1\"</span>;\ntable.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">width</span> = <span class=\"hljs-string\">\"100%\"</span>;\ntable.<span class=\"hljs-property\">style</span>[<span class=\"hljs-string\">\"border-collapse\"</span>] = <span class=\"hljs-string\">\"collapse\"</span>;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; array.<span class=\"hljs-property\">length</span>; i++) {\n  <span class=\"hljs-keyword\">const</span> tr = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'tr'</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &#x3C; array[i].<span class=\"hljs-property\">length</span>; j++) {\n    <span class=\"hljs-keyword\">const</span> td = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'td'</span>);\n    <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createTextNode</span>(array[i][j]);\n    td.<span class=\"hljs-title function_\">appendChild</span>(text);\n    tr.<span class=\"hljs-title function_\">appendChild</span>(td);\n  }\n  table.<span class=\"hljs-title function_\">appendChild</span>(tr);\n}\ndiv.<span class=\"hljs-title function_\">appendChild</span>(table);\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</span></code></pre>\n<div class=\"content-ad\"></div>\n<h1>테스트</h1>\n<p>openDialog 함수를 실행하면 대화 상자가 열리고 대화 상자에서 다음 테이블을 볼 수 있습니다. HTML과 JavaScript가 잘 작동하는 것을 확인할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-27-EnhancingHTMLandJavascriptDevelopmentinScriptEditorofGoogleAppsScriptOvercomingFormattingChallenges_1.png\" alt=\"Table Image\"></p>\n<p>다음 단계로 넘어가면 index.html을 볼 때 JavaScript 형식이 지정되지 않았고 가독성이 낮다는 것을 알 수 있습니다. 이 코드를 스크립트 편집기에서 형식을 맞추면 다음과 같이 됩니다.</p>\n<div class=\"content-ad\"></div>\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/0*AQlYdIS3NlLn6zcy.gif\">\n<p>코드를 서식화하면 HTML이 올바르게 서식이 적용됩니다. 그러나 Javascript는 올바르게 서식이 적용되지 않는 것을 볼 수 있습니다. 이 상황은 Javascript를 개발하는 데 문제가 될 수 있다고 생각합니다.</p>\n<h1>3. 샘플 스크립트 2</h1>\n<p>본 섹션에서는 상기 상황을 피하기 위한 해결책으로 샘플 스크립트 2를 소개하고자 합니다. 따라서 아래 스크립트를 복사하기 전에 상기 섹션에서 사용된 code.gs 및 index.html을 지우고, 다음 스크립트와 HTML을 스크립트 편집기에 복사하여 붙여넣어 주세요.</p>\n<div class=\"content-ad\"></div>\n<h1>code.gs</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">javascript_</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> array = [[<span class=\"hljs-string\">\"A1\"</span>, <span class=\"hljs-string\">\"B1\"</span>, <span class=\"hljs-string\">\"C1\"</span>],[<span class=\"hljs-string\">\"A2\"</span>, <span class=\"hljs-string\">\"B2\"</span>, <span class=\"hljs-string\">\"C2\"</span>],[<span class=\"hljs-string\">\"A3\"</span>, <span class=\"hljs-string\">\"B3\"</span>, <span class=\"hljs-string\">\"C3\"</span>]];\n  <span class=\"hljs-keyword\">const</span> div = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"sample\"</span>);\n  <span class=\"hljs-keyword\">const</span> table = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'table'</span>);\n  table.<span class=\"hljs-property\">border</span> = <span class=\"hljs-string\">\"1\"</span>;\n  table.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">width</span> = <span class=\"hljs-string\">\"100%\"</span>;\n  table.<span class=\"hljs-property\">style</span>[<span class=\"hljs-string\">\"border-collapse\"</span>] = <span class=\"hljs-string\">\"collapse\"</span>;\n  \n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; array.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">const</span> tr = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'tr'</span>);\n    \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &#x3C; array[i].<span class=\"hljs-property\">length</span>; j++) {\n      <span class=\"hljs-keyword\">const</span> td = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'td'</span>);\n      <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createTextNode</span>(array[i][j]);\n      td.<span class=\"hljs-title function_\">appendChild</span>(text);\n      tr.<span class=\"hljs-title function_\">appendChild</span>(td);\n    }\n    \n    table.<span class=\"hljs-title function_\">appendChild</span>(tr);\n  }\n  \n  div.<span class=\"hljs-title function_\">appendChild</span>(table);\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">openDialog</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-title class_\">HtmlService</span>.<span class=\"hljs-title function_\">createTemplateFromFile</span>(<span class=\"hljs-string\">\"index\"</span>);\n  html.<span class=\"hljs-property\">javascript</span> = javascript_\n    .<span class=\"hljs-title function_\">toString</span>()\n    .<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/^function javascript_\\(\\) {([\\s\\S\\w]*)}$/</span>)[<span class=\"hljs-number\">1</span>];\n  <span class=\"hljs-title class_\">SpreadsheetApp</span>.<span class=\"hljs-title function_\">getUi</span>().<span class=\"hljs-title function_\">showModalDialog</span>(html.evaluate(), <span class=\"hljs-string\">\"sample\"</span>);\n}\n</code></pre>\n<h1>index.html</h1>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">base</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_top\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"sample\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span>\n&#x3C;?!= javascript ?>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</span></code></pre>\n<div class=\"content-ad\"></div>\n<h1>테스팅</h1>\n<p>openDialog 함수를 실행하면 대화 상자가 열리고 대화 상자에서 다음 표를 볼 수 있습니다. 위 섹션에서 동일한 결과를 볼 수 있습니다.</p>\n<p>다음 단계로, 현재 index.html 및 code.gs를 확인하면 두 형식 모두 미완료되고 가독성이 낮음을 알 수 있습니다. 이러한 코드가 스크립트 편집기로 형식이 지정되면 다음과 같이 됩니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/0*Sszz38pwq-gqhqju.gif\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p>index.html과 code.gs를 형식화하면 두 파일 모두 적절한 서식으로 표시되어 가독성이 향상됩니다. 또한 JavaScript 코드는 대화 상자 내에서 올바르게 작동합니다.</p>\n<p>이전에 언급했듯이 스크립트 편집기는 현재 code.gs 스크립트 파일 내의 Google Apps 스크립트를 형식화할 수 있습니다. 이 보고서는이 기능을 해결책으로 활용합니다. JavaScript는 code.gs 스크립트 파일에서 개발되며 개발된 코드는 index.html HTML 파일로 가져옵니다. 이 작업 흐름을 통해 JavaScript 코드를 적절히 형식화하여 개발할 수 있습니다.</p>\n<h1>중요</h1>\n<p>JavaScript 코드에 스크립트 편집기와 호환되지 않는 구문이 포함된 경우 이 해결책을 적용할 수 없음에 유의해 주세요. 이러한 시나리오에서 주의해 주시기 바랍니다.</p>\n<div class=\"content-ad\"></div>\n<h1>참고</h1>\n<ul>\n<li>최상단의 추상 이미지는 Gemini에게 이 보고서를 제공하여 생성되었습니다.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}