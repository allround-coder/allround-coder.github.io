{"pageProps":{"post":{"title":"Node.js와 Nodemailer로 이미지를 포함한 HTML 이메일 템플릿 보내기","description":"","date":"2024-05-02 00:48","slug":"2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer","content":"\n\n<img src=\"/assets/img/2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer_0.png\" />\n\n웹 개발의 세계에서는 맞춤화된 시각적으로 매력적인 이메일 템플릿을 보내는 것이 사용자 참여를 크게 향상시킬 수 있습니다. 이 블로그 글에서는 Node.js, Nodemailer 및 이미지가 포함된 HTML 이메일 템플릿을 사용하여 이를 어떻게 구현할 수 있는지 살펴보겠습니다.\n\n# 준비 단계 설정\n\n코드에 들어가기 전에 필요한 패키지가 설치되어 있는지 확인해 보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install nodemailer html-to-text\n```\n\n# 단계 1: HTML 이메일 템플릿 생성하기\n\n내장된 이미지가 포함된 멋진 HTML 이메일 템플릿을 만들어보세요. 간단한 예제를 함께 보여드리겠습니다:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>당신의 멋진 이메일</title>\n</head>\n<body>\n    <h1>안녕하세요 [수신자]님!</h1>\n    <p>이것은 내장 이미지가 포함된 샘플 이메일입니다:</p>\n    <img src=\"cid:uniqueImageCID\" alt=\"내장 이미지\">\n    <p>읽어주셔서 감사합니다!</p>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n이 예제에서 우리는 src 속성을 \"cid:uniqueImageCID\"로 설정한 `img` 태그를 가지고 있습니다. 이 cid 표기법은 포함된 이미지를 참조하는 데 사용됩니다.\n\n# 단계 2: Node.js 및 Nodemailer 설정\n\n이제, 이메일을 보내기 위한 Node.js 스크립트를 설정해 봅시다. 다음 코드가 포함된 파일(예: sendEmail.js)을 생성하십시오:\n\n```js\nconst nodemailer = require('nodemailer');\nconst fs = require('fs');\nconst { promisify } = require('util');\n\nconst readFileAsync = promisify(fs.readFile);\n\nasync function sendEmail() {\n    // HTML 템플릿 및 이미지 파일 읽기\n    const htmlTemplate = await readFileAsync('path/to/your/template.html', 'utf-8');\n    const imageAttachment = await readFileAsync('path/to/your/image.png');\n\n    // Nodemailer 전송기 생성\n    const transporter = nodemailer.createTransport({\n        service: 'gmail',\n        auth: {\n            user: 'your.email@gmail.com',\n            pass: 'your-email-password',\n        },\n    });\n\n    // 이메일 보내기\n    const info = await transporter.sendMail({\n        from: 'your.email@gmail.com',\n        to: 'recipient.email@example.com',\n        subject: '제목',\n        html: htmlTemplate,\n        attachments: [{\n            filename: 'image.png',\n            content: imageAttachment,\n            encoding: 'base64',\n            cid: 'uniqueImageCID', // HTML 템플릿에서 참조됨\n        }],\n    });\n\n    console.log('이메일 전송 완료:', info.messageId);\n}\n\nsendEmail();\n```\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n이메일 받은 편지함을 확인해보세요. 메일에 내장된 이미지가 있을 거에요.\n\n# 결론\n\nNode.js와 Nodemailer를 사용하여 HTML 이메일 템플릿을 보내고 이미지를 삽입하는 것은 사용자들과 시각적으로 매력적이고 맞춤형 커뮤니케이션을 만들 수 있는 강력한 방법입니다. 다양한 HTML 디자인으로 실험을 해보고 매료적인 이메일 콘텐츠로 관객을 유도해 보세요.\n\nHTML 템플릿을 자유롭게 수정하고, 특정 요구사항에 기반해 기능을 확장해 보세요.\n\n<div class=\"content-ad\"></div>\n\n좋은 이메일 보내기!","ogImage":{"url":"/assets/img/2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer_0.png"},"coverImage":"/assets/img/2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer_0.png\">\n<p>웹 개발의 세계에서는 맞춤화된 시각적으로 매력적인 이메일 템플릿을 보내는 것이 사용자 참여를 크게 향상시킬 수 있습니다. 이 블로그 글에서는 Node.js, Nodemailer 및 이미지가 포함된 HTML 이메일 템플릿을 사용하여 이를 어떻게 구현할 수 있는지 살펴보겠습니다.</p>\n<h1>준비 단계 설정</h1>\n<p>코드에 들어가기 전에 필요한 패키지가 설치되어 있는지 확인해 보겠습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">npm install nodemailer html-to-text\n</code></pre>\n<h1>단계 1: HTML 이메일 템플릿 생성하기</h1>\n<p>내장된 이미지가 포함된 멋진 HTML 이메일 템플릿을 만들어보세요. 간단한 예제를 함께 보여드리겠습니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;title>당신의 멋진 이메일&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;h1>안녕하세요 [수신자]님!&#x3C;/h1>\n    &#x3C;p>이것은 내장 이미지가 포함된 샘플 이메일입니다:&#x3C;/p>\n    &#x3C;img src=\"cid:uniqueImageCID\" alt=\"내장 이미지\">\n    &#x3C;p>읽어주셔서 감사합니다!&#x3C;/p>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 예제에서 우리는 src 속성을 \"cid:uniqueImageCID\"로 설정한 <code>img</code> 태그를 가지고 있습니다. 이 cid 표기법은 포함된 이미지를 참조하는 데 사용됩니다.</p>\n<h1>단계 2: Node.js 및 Nodemailer 설정</h1>\n<p>이제, 이메일을 보내기 위한 Node.js 스크립트를 설정해 봅시다. 다음 코드가 포함된 파일(예: sendEmail.js)을 생성하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> nodemailer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nodemailer'</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n<span class=\"hljs-keyword\">const</span> { promisify } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'util'</span>);\n\n<span class=\"hljs-keyword\">const</span> readFileAsync = <span class=\"hljs-title function_\">promisify</span>(fs.<span class=\"hljs-property\">readFile</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendEmail</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// HTML 템플릿 및 이미지 파일 읽기</span>\n    <span class=\"hljs-keyword\">const</span> htmlTemplate = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">readFileAsync</span>(<span class=\"hljs-string\">'path/to/your/template.html'</span>, <span class=\"hljs-string\">'utf-8'</span>);\n    <span class=\"hljs-keyword\">const</span> imageAttachment = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">readFileAsync</span>(<span class=\"hljs-string\">'path/to/your/image.png'</span>);\n\n    <span class=\"hljs-comment\">// Nodemailer 전송기 생성</span>\n    <span class=\"hljs-keyword\">const</span> transporter = nodemailer.<span class=\"hljs-title function_\">createTransport</span>({\n        <span class=\"hljs-attr\">service</span>: <span class=\"hljs-string\">'gmail'</span>,\n        <span class=\"hljs-attr\">auth</span>: {\n            <span class=\"hljs-attr\">user</span>: <span class=\"hljs-string\">'your.email@gmail.com'</span>,\n            <span class=\"hljs-attr\">pass</span>: <span class=\"hljs-string\">'your-email-password'</span>,\n        },\n    });\n\n    <span class=\"hljs-comment\">// 이메일 보내기</span>\n    <span class=\"hljs-keyword\">const</span> info = <span class=\"hljs-keyword\">await</span> transporter.<span class=\"hljs-title function_\">sendMail</span>({\n        <span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">'your.email@gmail.com'</span>,\n        <span class=\"hljs-attr\">to</span>: <span class=\"hljs-string\">'recipient.email@example.com'</span>,\n        <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">'제목'</span>,\n        <span class=\"hljs-attr\">html</span>: htmlTemplate,\n        <span class=\"hljs-attr\">attachments</span>: [{\n            <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'image.png'</span>,\n            <span class=\"hljs-attr\">content</span>: imageAttachment,\n            <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-string\">'base64'</span>,\n            <span class=\"hljs-attr\">cid</span>: <span class=\"hljs-string\">'uniqueImageCID'</span>, <span class=\"hljs-comment\">// HTML 템플릿에서 참조됨</span>\n        }],\n    });\n\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'이메일 전송 완료:'</span>, info.<span class=\"hljs-property\">messageId</span>);\n}\n\n<span class=\"hljs-title function_\">sendEmail</span>();\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>테이블 태그를 Markdown 형식으로 변경해주세요.</p>\n<div class=\"content-ad\"></div>\n<p>이메일 받은 편지함을 확인해보세요. 메일에 내장된 이미지가 있을 거에요.</p>\n<h1>결론</h1>\n<p>Node.js와 Nodemailer를 사용하여 HTML 이메일 템플릿을 보내고 이미지를 삽입하는 것은 사용자들과 시각적으로 매력적이고 맞춤형 커뮤니케이션을 만들 수 있는 강력한 방법입니다. 다양한 HTML 디자인으로 실험을 해보고 매료적인 이메일 콘텐츠로 관객을 유도해 보세요.</p>\n<p>HTML 템플릿을 자유롭게 수정하고, 특정 요구사항에 기반해 기능을 확장해 보세요.</p>\n<div class=\"content-ad\"></div>\n<p>좋은 이메일 보내기!</p>\n</body>\n</html>\n"},"__N_SSG":true}