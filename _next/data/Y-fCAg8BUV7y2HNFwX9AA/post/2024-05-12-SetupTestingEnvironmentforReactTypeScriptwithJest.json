{"pageProps":{"post":{"title":"React TypeScript와 Jest를 위한 테스트 환경 설정하기","description":"","date":"2024-05-12 20:55","slug":"2024-05-12-SetupTestingEnvironmentforReactTypeScriptwithJest","content":"\n\n![image](/assets/img/2024-05-12-SetupTestingEnvironmentforReactTypeScriptwithJest_0.png)\n\n자동화된 테스트는 코딩 퍼즐에서 매우 중요한 부분입니다. 이 글에서는 React/TypeScript 앱을 @testing-library/react + jest로 테스트하는 환경을 설정하는 방법을 알려드릴 거에요. 이렇게 함으로써 코드/제품의 품질을 최대화할 수 있어요! 그런데 한 가지 주의할 점은, 이 글에서는 자동화된 테스팅의 \"무엇\"에 대해서는 다루지 않아요!\n\n먼저, 왜 자동화된 테스트를 해야 할까요? 마우스와 키보드로 앱을 테스트하면 안 되나요?\n\n그렇게 하면 안 돼요. 자기 자신의 이익을 위해 해야 합니다. 가장 극단적인 예로, 수천 명의 가상 사용자가 웹 애플리케이션과 상호작용하는 것을 모방하여 애플리케이션이 어떻게 동작하는지 확인할 수 있는데, 이러한 동작을 수동 테스트로 시뮬레이션하는 것은 불가능해요. 이런 기능은 개발자들에게 많은 시간을 절약시켜 줘요!\n\n\n\n이 설정에 필요한 패키지는 무엇인가요?\n\n먼저 jest, @types/jest, ts-jest를 설치해야 합니다:\n\n```js\nyarn add --dev jest @types/jest ts-jest\n```\n\n```js\nnpm install --save-dev jest @types/jest ts-jest\n```\n\n\n\n리액트와 타입스크립트가 모두 설치되어 있다고 가정하고\n\n이제 환경을 설정해 봅시다!\n\n위의 패키지를 설치한 후에 jest 구성 파일을 초기화해 봅시다:\n\njest.config.js 파일이 생성될 것입니다.\n\n\n\n테스트 폴더 및 목 모듈 생성:\n\n프로젝트 루트 디렉토리로 이동한 다음, 해당 디렉토리 내에 테스트 폴더를 만들어 목 폴더를 만듭니다:\n\n```js\n├── tests\n│   ├── components\n│   ├── mocks\n│   │   ├── fileMock.ts\n│   │   └── styleMock.ts\n│   ├── pages\n│   │   └── login.test.tsx\n│   └── setupTests.ts\n├── tsconfig.json\n├── webpack.config.ts\n├── jest.config.ts\n└── yarn.lock\n```\n\n이 트리를 보면, 모델, 서비스, 자산 등에 대한 목 모듈도 생성해야 합니다!\n\n\n\n3. 설정 파일 완성하기:\n\njest.config 파일을 마무리하려면 몇 가지 속성을 더 추가해야 합니다:\n\n그리고 더 매끄럽게 리액트와 함께 작동하도록 하려면 .babelrc (바벨 구성 파일)에서 다음을 추가하세요:\n\n```js\n{\n....\n\"presets\": [\n     \"@babel/env\",\n     [\"@babel/preset-react\", { \"runtime\": \"automatic\" }],\n     \"@babel/preset-typescript\"\n   ]\n}\n```\n\n\n\n4. 리액트를 위한 테스팅 라이브러리 설치 :\n\n이제, 일어나게 만들어줄 라이브러리들을 추가해야 합니다 (VDOM 액세스, 상호 작용 등), 이 라이브러리들은 \"@testing-library/dom\", \"@testing-library/jest-dom\", \"@testing-library/react\", 그리고 \"@testing-library/user-event\" 입니다.\n\n```js\nyarn add --dev @testing-library/dom @testing-library/jest-dom @testing-library/react @testing-library/user-event\n```\n\n```js\nnpm install -D @testing-library/dom @testing-library/jest-dom @testing-library/react @testing-library/user-event\n```\n\n\n\n5. package.json에 jest 추가해 주세요:\n\n```js\n\"scripts\": {\n    ...\n    \"test\": \"cross-env NODE_ENV=test jest tests/\"\n}\n```\n\n6. 코드를 테스트해 보세요:\n\n다음은 로그인 페이지를 테스트하는 예시입니다:\n\n\n\n![이미지](/assets/img/2024-05-12-SetupTestingEnvironmentforReactTypeScriptwithJest_1.png)\n\n결론:\n\n찾으시던 정보를 얻으셨길 바라요! 만일 제가 실수한 부분이 있으면 얼마든지 알려주세요!","ogImage":{"url":"/assets/img/2024-05-12-SetupTestingEnvironmentforReactTypeScriptwithJest_0.png"},"coverImage":"/assets/img/2024-05-12-SetupTestingEnvironmentforReactTypeScriptwithJest_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-12-SetupTestingEnvironmentforReactTypeScriptwithJest_0.png\" alt=\"image\"></p>\n<p>자동화된 테스트는 코딩 퍼즐에서 매우 중요한 부분입니다. 이 글에서는 React/TypeScript 앱을 @testing-library/react + jest로 테스트하는 환경을 설정하는 방법을 알려드릴 거에요. 이렇게 함으로써 코드/제품의 품질을 최대화할 수 있어요! 그런데 한 가지 주의할 점은, 이 글에서는 자동화된 테스팅의 \"무엇\"에 대해서는 다루지 않아요!</p>\n<p>먼저, 왜 자동화된 테스트를 해야 할까요? 마우스와 키보드로 앱을 테스트하면 안 되나요?</p>\n<p>그렇게 하면 안 돼요. 자기 자신의 이익을 위해 해야 합니다. 가장 극단적인 예로, 수천 명의 가상 사용자가 웹 애플리케이션과 상호작용하는 것을 모방하여 애플리케이션이 어떻게 동작하는지 확인할 수 있는데, 이러한 동작을 수동 테스트로 시뮬레이션하는 것은 불가능해요. 이런 기능은 개발자들에게 많은 시간을 절약시켜 줘요!</p>\n<p>이 설정에 필요한 패키지는 무엇인가요?</p>\n<p>먼저 jest, @types/jest, ts-jest를 설치해야 합니다:</p>\n<pre><code class=\"hljs language-js\">yarn add --dev jest @types/jest ts-jest\n</code></pre>\n<pre><code class=\"hljs language-js\">npm install --save-dev jest @types/jest ts-jest\n</code></pre>\n<p>리액트와 타입스크립트가 모두 설치되어 있다고 가정하고</p>\n<p>이제 환경을 설정해 봅시다!</p>\n<p>위의 패키지를 설치한 후에 jest 구성 파일을 초기화해 봅시다:</p>\n<p>jest.config.js 파일이 생성될 것입니다.</p>\n<p>테스트 폴더 및 목 모듈 생성:</p>\n<p>프로젝트 루트 디렉토리로 이동한 다음, 해당 디렉토리 내에 테스트 폴더를 만들어 목 폴더를 만듭니다:</p>\n<pre><code class=\"hljs language-js\">├── tests\n│   ├── components\n│   ├── mocks\n│   │   ├── fileMock.<span class=\"hljs-property\">ts</span>\n│   │   └── styleMock.<span class=\"hljs-property\">ts</span>\n│   ├── pages\n│   │   └── login.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">tsx</span>\n│   └── setupTests.<span class=\"hljs-property\">ts</span>\n├── tsconfig.<span class=\"hljs-property\">json</span>\n├── webpack.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">ts</span>\n├── jest.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">ts</span>\n└── yarn.<span class=\"hljs-property\">lock</span>\n</code></pre>\n<p>이 트리를 보면, 모델, 서비스, 자산 등에 대한 목 모듈도 생성해야 합니다!</p>\n<ol start=\"3\">\n<li>설정 파일 완성하기:</li>\n</ol>\n<p>jest.config 파일을 마무리하려면 몇 가지 속성을 더 추가해야 합니다:</p>\n<p>그리고 더 매끄럽게 리액트와 함께 작동하도록 하려면 .babelrc (바벨 구성 파일)에서 다음을 추가하세요:</p>\n<pre><code class=\"hljs language-js\">{\n....\n<span class=\"hljs-string\">\"presets\"</span>: [\n     <span class=\"hljs-string\">\"@babel/env\"</span>,\n     [<span class=\"hljs-string\">\"@babel/preset-react\"</span>, { <span class=\"hljs-string\">\"runtime\"</span>: <span class=\"hljs-string\">\"automatic\"</span> }],\n     <span class=\"hljs-string\">\"@babel/preset-typescript\"</span>\n   ]\n}\n</code></pre>\n<ol start=\"4\">\n<li>리액트를 위한 테스팅 라이브러리 설치 :</li>\n</ol>\n<p>이제, 일어나게 만들어줄 라이브러리들을 추가해야 합니다 (VDOM 액세스, 상호 작용 등), 이 라이브러리들은 \"@testing-library/dom\", \"@testing-library/jest-dom\", \"@testing-library/react\", 그리고 \"@testing-library/user-event\" 입니다.</p>\n<pre><code class=\"hljs language-js\">yarn add --dev @testing-library/dom @testing-library/jest-dom @testing-library/react @testing-library/user-event\n</code></pre>\n<pre><code class=\"hljs language-js\">npm install -D @testing-library/dom @testing-library/jest-dom @testing-library/react @testing-library/user-event\n</code></pre>\n<ol start=\"5\">\n<li>package.json에 jest 추가해 주세요:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"scripts\"</span>: {\n    ...\n    <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"cross-env NODE_ENV=test jest tests/\"</span>\n}\n</code></pre>\n<ol start=\"6\">\n<li>코드를 테스트해 보세요:</li>\n</ol>\n<p>다음은 로그인 페이지를 테스트하는 예시입니다:</p>\n<p><img src=\"/assets/img/2024-05-12-SetupTestingEnvironmentforReactTypeScriptwithJest_1.png\" alt=\"이미지\"></p>\n<p>결론:</p>\n<p>찾으시던 정보를 얻으셨길 바라요! 만일 제가 실수한 부분이 있으면 얼마든지 알려주세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}