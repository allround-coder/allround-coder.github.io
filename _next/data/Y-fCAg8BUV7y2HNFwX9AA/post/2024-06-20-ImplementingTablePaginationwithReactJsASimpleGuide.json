{"pageProps":{"post":{"title":"ReactJs를 사용한 테이블 페이지네이션 구현하기 간단한 안내","description":"","date":"2024-06-20 00:59","slug":"2024-06-20-ImplementingTablePaginationwithReactJsASimpleGuide","content":"\n\n<img src=\"/assets/img/2024-06-20-ImplementingTablePaginationwithReactJsASimpleGuide_0.png\" />\n\n안녕하세요!\n\n개발자로서 모두가 여행 중에 이러한 시나리오를 만난 적이 있을 거에요. 오랜 데이터가 있고 웹 페이지에 표시할 공간이 제한되어 있거나 표시해도 UI가 약간 느립니다. 그래서, 우리는 이 상황을 다루기 위해 Pagination이라는 기술을 사용합니다.\n\nPagination이란 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n대부분의 UI 프레임워크에서는 테이블과 페이지네이션 기능을 제공하며, 이 포스트에서는 우리만의 방법으로 구현해보고 있습니다. 또한 페이지네이션은 기계 코딩 면접에서 자주 묻는 질문 중 하나입니다.\n\n요구 사항: React 및 CSS의 기본 지식\n\n그러니 이 데모를 만들어 봅시다! (이 GIF에서는 마우스 클릭이 보이지 않습니다)\n\n![데모](https://miro.medium.com/v2/resize:fit:1200/0*EkEwLTBUF_iIa5nL.gif)\n\n<div class=\"content-ad\"></div>\n\n1. 에디터를 열고 터미널에서 아래 명령을 사용하여 'pagination-demo' 라는 리액트 앱을 생성하세요.\n\n```js\nnpx create-react-app pagination-demo\n```\n\n2. 폴더 구조에서 불필요한 파일을 모두 제거하고 메인 파일인 App.jsx만 남도록 하세요.\n\n3. components라는 폴더를 만들고 그 안에 Demo.jsx, Table.jsx 및 Demo.css 파일을 각각 생성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n우리는 표를 다른 구성 요소로 분리했습니다.\n\n우리의 데모에서는 https://jsonplaceholder.typicode.com/todos 와 같이 알려진 가짜 REST API에서 데이터를 가져올 것입니다. 해당 API는 길이가 200인 객체 배열을 반환할 것입니다.\n\n- Demo.css\n\n```js\n#container {\n  display: flex;\n  flex-direction: column;\n  width: 900px;\n  align-items: flex-end;\n  gap: 1rem;\n  margin-top: 3rem;\n  margin-left: 5rem;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n\ncss\ntable {\n  border: 1px solid black;\n  width: 100%;\n}\ntable tr td {\n  max-width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n}\ntd,\nth {\n  padding: 5px;\n  border: 1px solid black;\n  text-align: center;\n}\ntd:nth-child(2) {\n  width: 70% !important;\n}\n#page-no-dropdown {\n  width: fit-content;\n  border: 1px solid black;\n  padding: 2px;\n}\nselect:focus-visible {\n  outline: none;\n  border: none;\n}\nbutton {\n  border: 1px solid black;\n  padding: 2px;\n}\n\n\n2. Table.jsx\n\n이 컴포넌트에서는 부모 컴포넌트로부터 dataToDisplay를 받아옵니다.\n\n테이블 헤더에는 (userId)를 제외한 3가지 헤더 값을 표시합니다. (포함하려면 포함할 수 있습니다). 테이블 본문에는 해당 값들을 표시합니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\r\nexport default function Table({ dataToDisplay }) {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {Object.keys(dataToDisplay[0]).map((key) => {\r\n            if (key != \"userId\") return <th key={key}>{key.toUpperCase()}</th>;\r\n          })}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {dataToDisplay.map((obj) => {\r\n          return (\r\n            <tr key={obj.id}>\r\n              <td>{obj.id}</td>\r\n              <td>{obj.title}</td>\r\n              <td>{obj.completed.toString()}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n```\r\n\r\n3. Demo.jsx.\r\n\r\n- 이 컴포넌트에서는 두 개의 버튼을 포함하고 있습니다. 한 버튼은 다음 페이지로 이동하고 다른 하나는 이전 페이지로 이동합니다. 또한 특정 페이지로 이동할 수 있는 셀렉트 드롭다운을 만들었습니다.\r\n- 앞서 말했듯이 API에서 데이터를 가져올 것이기 때문에 useEffect()에서 해당 호출을 수행했으며 모든 값은 setData()를 사용하여 data 변수에 저장됩니다.\r\n- 또한 페이지당 10개의 값만 표시할 것이기 때문에 응답 배열을 0부터 10까지 슬라이스하여 dataToDisplay 변수가 길이가 10인 배열을 가지게 합니다.\r\n\r\n```js\r\nconst [data, setData] = useState([]);\r\nconst [currentPageNumber, setCurrentPageNumber] = useState(1);\r\nconst [dataToDisplay, setDataToDisplay] = useState([]);\r\nconst TOTAL_VALUES_PER_PAGE = 10;\r\n``` \n\n<div class=\"content-ad\"></div>\n\n```js\nuseEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/todos\")\n      .then((response) => response.json())\n      .then((res) => {\n        setData(res);\n        setDataToDisplay(res.slice(0, TOTAL_VALUES_PER_PAGE));\n      });\n  }, []);\n```\n\n- 여기에는 총 3개의 함수가 있어요 = `goOnPrevPage(), goOnNextPage(), handleSelectChange()\n\n```js\nconst goOnPrevPage = () => {\n    if (currentPageNumber === 1) return;\n    setCurrentPageNumber((prev) => prev - 1);\n  };\n```\n\n```js\n  const goOnNextPage = () => {\n    if (currentPageNumber === data.length / TOTAL_VALUES_PER_PAGE) return;\n    setCurrentPageNumber((prev) => prev + 1);\n  };\n  const handleSelectChange = (e) => {\n    setCurrentPageNumber(e.target.value);\n  };\n```  \n\n<div class=\"content-ad\"></div>\n\n여기에 또 다른 useEffect가 있어요. currentPageNumber가 의존성으로 설정되어 있어서 페이지 번호가 변경될 때마다 이 블록이 실행되고 데이터 배열을 잘라내어 dataToDisplay를 업데이트할 거예요.\n\n```js\nuseEffect(() => {\n    const start = (currentPageNumber - 1) * TOTAL_VALUES_PER_PAGE;\n    const end = currentPageNumber * TOTAL_VALUES_PER_PAGE;\n    setDataToDisplay(data.slice(start, end));\n  }, [currentPageNumber]);\n```\n\n그리고 마지막으로 렌더링될 UI 코드가 있어요. 여기서 데이터가 가져오는 중이면 '로딩 중...'을 보여주는 조건이 추가되어 있어요.\n\n```js\nif (data.length == 0) return <div>Loading...</div>;\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n  return (\n    <div id=\"container\">\n      <div id=\"page-no-dropdown\">\n        <select\n          name=\"page-number\"\n          onChange={handleSelectChange}\n          value={currentPageNumber}\n        >\n          {Array.from(Array(data.length / TOTAL_VALUES_PER_PAGE))\n            .map((e, i) => i + 1)\n            .map((val) => {\n              return <option key={val}>{val}</option>;\n            })}\n        </select>\n      </div>\n      <Table dataToDisplay={dataToDisplay} />\n      <div id=\"btn-container\">\n        <button onClick={goOnPrevPage}>Prev</button>\n        <button onClick={goOnNextPage}>Next</button>\n      </div>\n    </div>\n  );\n```\n\n```js\n{Array.from(Array(data.length / TOTAL_VALUES_PER_PAGE))\n      .map((e, i) => i + 1)\n       .map((val) => {\n    return <option key={val}>{val}</option>;\n})}\n```\n\n이 블록은 데이터가 페이지로 나뉘어진 개수만큼 1부터 페이지 번호까지의 배열을 생성합니다.\n\n데모에서 데이터 길이가 200이고 페이지 당 10개의 행을 표시하므로, totalPages = 200/10이므로 20이 됩니다. 따라서 [1,2,3……20]과 같은 배열이 생성되며, 이를 매핑하여 선택 드롭다운의 옵션을 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n위의 코드를 Markdown 형식으로 변경한 것입니다!\n\n```js\nimport React, { useEffect, useState } from \"react\";\nimport Table from \"./Table\";\nimport \"./table.css\";\n```\n\n```js\nexport default function HomeDashboard() {\n  const [data, setData] = useState([]);\n  const [currentPageNumber, setCurrentPageNumber] = useState(1);\n  const [dataToDisplay, setDataToDisplay] = useState([]);\n  const TOTAL_VALUES_PER_PAGE = 10;\n  const goOnPrevPage = () => {\n    if (currentPageNumber === 1) return;\n    setCurrentPageNumber((prev) => prev - 1);\n  };\n  const goOnNextPage = () => {\n    if (currentPageNumber === data.length / TOTAL_VALUES_PER_PAGE) return;\n    setCurrentPageNumber((prev) => prev + 1);\n  };\n  const handleSelectChange = (e) => {\n    setCurrentPageNumber(e.target.value);\n  };\n  useEffect(() => {\n    const start = (currentPageNumber - 1) * TOTAL_VALUES_PER_PAGE;\n    const end = currentPageNumber * TOTAL_VALUES_PER_PAGE;\n    setDataToDisplay(data.slice(start, end));\n  }, [currentPageNumber]);\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/todos\")\n      .then((response) => response.json())\n      .then((res) => {\n        setData(res);\n        setDataToDisplay(res.slice(0, TOTAL_VALUES_PER_PAGE));\n      });\n  }, []);\n  if (data.length == 0) return <div>Loading...</div>;\n  return (\n    <div id=\"container\">\n      <div id=\"page-no-dropdown\">\n        <select\n          name=\"page-number\"\n          onChange={handleSelectChange}\n          value={currentPageNumber}\n        >\n          {Array.from(Array(data.length / TOTAL_VALUES_PER_PAGE))\n            .map((e, i) => i + 1)\n            .map((val) => {\n              return <option key={val}>{val}</option>;\n            })}\n        </select>\n      </div>\n      <Table dataToDisplay={dataToDisplay} />\n      <div id=\"btn-container\">\n        <button onClick={goOnPrevPage}>Prev</button>\n        <button onClick={goOnNextPage}>Next</button>\n      </div>\n    </div>\n  );\n}\n```\n\n즐겁게 코딩하고 계속 배워 나가세요!!\n\n<div class=\"content-ad\"></div>\n\n읽어 주셔서 감사합니다! 좋아요와 댓글 부탁드려요...","ogImage":{"url":"/assets/img/2024-06-20-ImplementingTablePaginationwithReactJsASimpleGuide_0.png"},"coverImage":"/assets/img/2024-06-20-ImplementingTablePaginationwithReactJsASimpleGuide_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-20-ImplementingTablePaginationwithReactJsASimpleGuide_0.png\">\n<p>안녕하세요!</p>\n<p>개발자로서 모두가 여행 중에 이러한 시나리오를 만난 적이 있을 거에요. 오랜 데이터가 있고 웹 페이지에 표시할 공간이 제한되어 있거나 표시해도 UI가 약간 느립니다. 그래서, 우리는 이 상황을 다루기 위해 Pagination이라는 기술을 사용합니다.</p>\n<p>Pagination이란 무엇인가요?</p>\n<div class=\"content-ad\"></div>\n<p>대부분의 UI 프레임워크에서는 테이블과 페이지네이션 기능을 제공하며, 이 포스트에서는 우리만의 방법으로 구현해보고 있습니다. 또한 페이지네이션은 기계 코딩 면접에서 자주 묻는 질문 중 하나입니다.</p>\n<p>요구 사항: React 및 CSS의 기본 지식</p>\n<p>그러니 이 데모를 만들어 봅시다! (이 GIF에서는 마우스 클릭이 보이지 않습니다)</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/0*EkEwLTBUF_iIa5nL.gif\" alt=\"데모\"></p>\n<div class=\"content-ad\"></div>\n<ol>\n<li>에디터를 열고 터미널에서 아래 명령을 사용하여 'pagination-demo' 라는 리액트 앱을 생성하세요.</li>\n</ol>\n<pre><code class=\"hljs language-js\">npx create-react-app pagination-demo\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>폴더 구조에서 불필요한 파일을 모두 제거하고 메인 파일인 App.jsx만 남도록 하세요.</p>\n</li>\n<li>\n<p>components라는 폴더를 만들고 그 안에 Demo.jsx, Table.jsx 및 Demo.css 파일을 각각 생성할 수 있습니다.</p>\n</li>\n</ol>\n<div class=\"content-ad\"></div>\n<p>우리는 표를 다른 구성 요소로 분리했습니다.</p>\n<p>우리의 데모에서는 <a href=\"https://jsonplaceholder.typicode.com/todos\" rel=\"nofollow\" target=\"_blank\">https://jsonplaceholder.typicode.com/todos</a> 와 같이 알려진 가짜 REST API에서 데이터를 가져올 것입니다. 해당 API는 길이가 200인 객체 배열을 반환할 것입니다.</p>\n<ul>\n<li>Demo.css</li>\n</ul>\n<pre><code class=\"hljs language-js\">#container {\n  <span class=\"hljs-attr\">display</span>: flex;\n  flex-<span class=\"hljs-attr\">direction</span>: column;\n  <span class=\"hljs-attr\">width</span>: 900px;\n  align-<span class=\"hljs-attr\">items</span>: flex-end;\n  <span class=\"hljs-attr\">gap</span>: 1rem;\n  margin-<span class=\"hljs-attr\">top</span>: 3rem;\n  margin-<span class=\"hljs-attr\">left</span>: 5rem;\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>css\ntable {\nborder: 1px solid black;\nwidth: 100%;\n}\ntable tr td {\nmax-width: 100%;\nwhite-space: nowrap;\noverflow: hidden;\n}\ntd,\nth {\npadding: 5px;\nborder: 1px solid black;\ntext-align: center;\n}\ntd:nth-child(2) {\nwidth: 70% !important;\n}\n#page-no-dropdown {\nwidth: fit-content;\nborder: 1px solid black;\npadding: 2px;\n}\nselect:focus-visible {\noutline: none;\nborder: none;\n}\nbutton {\nborder: 1px solid black;\npadding: 2px;\n}</p>\n<ol start=\"2\">\n<li>Table.jsx</li>\n</ol>\n<p>이 컴포넌트에서는 부모 컴포넌트로부터 dataToDisplay를 받아옵니다.</p>\n<p>테이블 헤더에는 (userId)를 제외한 3가지 헤더 값을 표시합니다. (포함하려면 포함할 수 있습니다). 테이블 본문에는 해당 값들을 표시합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Table</span>(<span class=\"hljs-params\">{ dataToDisplay }</span>) {\r\n  <span class=\"hljs-keyword\">return</span> (\r\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">table</span>></span>\r\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">thead</span>></span>\r\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tr</span>></span>\r\n          {Object.keys(dataToDisplay[0]).map((key) => {\r\n            if (key != \"userId\") return <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{key}</span>></span>{key.toUpperCase()}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">th</span>></span>;\r\n          })}\r\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tr</span>></span>\r\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">thead</span>></span>\r\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tbody</span>></span>\r\n        {dataToDisplay.map((obj) => {\r\n          return (\r\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{obj.id}</span>></span>\r\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>{obj.id}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\r\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>{obj.title}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\r\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>{obj.completed.toString()}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\r\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tr</span>></span>\r\n          );\r\n        })}\r\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tbody</span>></span>\r\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">table</span>></span></span>\r\n  );\r\n}\n</code></pre>\n<ol start=\"3\">\n<li>Demo.jsx.</li>\n</ol>\n<ul>\n<li>이 컴포넌트에서는 두 개의 버튼을 포함하고 있습니다. 한 버튼은 다음 페이지로 이동하고 다른 하나는 이전 페이지로 이동합니다. 또한 특정 페이지로 이동할 수 있는 셀렉트 드롭다운을 만들었습니다.</li>\n<li>앞서 말했듯이 API에서 데이터를 가져올 것이기 때문에 useEffect()에서 해당 호출을 수행했으며 모든 값은 setData()를 사용하여 data 변수에 저장됩니다.</li>\n<li>또한 페이지당 10개의 값만 표시할 것이기 때문에 응답 배열을 0부터 10까지 슬라이스하여 dataToDisplay 변수가 길이가 10인 배열을 가지게 합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>([]);\r\n<span class=\"hljs-keyword\">const</span> [currentPageNumber, setCurrentPageNumber] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">1</span>);\r\n<span class=\"hljs-keyword\">const</span> [dataToDisplay, setDataToDisplay] = <span class=\"hljs-title function_\">useState</span>([]);\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">TOTAL_VALUES_PER_PAGE</span> = <span class=\"hljs-number\">10</span>;\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"https://jsonplaceholder.typicode.com/todos\"</span>)\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> response.<span class=\"hljs-title function_\">json</span>())\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =></span> {\n        <span class=\"hljs-title function_\">setData</span>(res);\n        <span class=\"hljs-title function_\">setDataToDisplay</span>(res.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-variable constant_\">TOTAL_VALUES_PER_PAGE</span>));\n      });\n  }, []);\n</code></pre>\n<ul>\n<li>여기에는 총 3개의 함수가 있어요 = `goOnPrevPage(), goOnNextPage(), handleSelectChange()</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">goOnPrevPage</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">if</span> (currentPageNumber === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-title function_\">setCurrentPageNumber</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> prev - <span class=\"hljs-number\">1</span>);\n  };\n</code></pre>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">goOnNextPage</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">if</span> (currentPageNumber === data.<span class=\"hljs-property\">length</span> / <span class=\"hljs-variable constant_\">TOTAL_VALUES_PER_PAGE</span>) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-title function_\">setCurrentPageNumber</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> prev + <span class=\"hljs-number\">1</span>);\n  };\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSelectChange</span> = (<span class=\"hljs-params\">e</span>) => {\n    <span class=\"hljs-title function_\">setCurrentPageNumber</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\n  };\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>여기에 또 다른 useEffect가 있어요. currentPageNumber가 의존성으로 설정되어 있어서 페이지 번호가 변경될 때마다 이 블록이 실행되고 데이터 배열을 잘라내어 dataToDisplay를 업데이트할 거예요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> start = (currentPageNumber - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-variable constant_\">TOTAL_VALUES_PER_PAGE</span>;\n    <span class=\"hljs-keyword\">const</span> end = currentPageNumber * <span class=\"hljs-variable constant_\">TOTAL_VALUES_PER_PAGE</span>;\n    <span class=\"hljs-title function_\">setDataToDisplay</span>(data.<span class=\"hljs-title function_\">slice</span>(start, end));\n  }, [currentPageNumber]);\n</code></pre>\n<p>그리고 마지막으로 렌더링될 UI 코드가 있어요. 여기서 데이터가 가져오는 중이면 '로딩 중...'을 보여주는 조건이 추가되어 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">length</span> == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Loading...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"page-no-dropdown\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">select</span>\n          <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"page-number\"</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectChange}</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{currentPageNumber}</span>\n        ></span>\n          {Array.from(Array(data.length / TOTAL_VALUES_PER_PAGE))\n            .map((e, i) => i + 1)\n            .map((val) => {\n              return <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{val}</span>></span>{val}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">option</span>></span>;\n            })}\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">select</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Table</span> <span class=\"hljs-attr\">dataToDisplay</span>=<span class=\"hljs-string\">{dataToDisplay}</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"btn-container\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{goOnPrevPage}</span>></span>Prev<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{goOnNextPage}</span>></span>Next<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n</code></pre>\n<pre><code class=\"hljs language-js\">{<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-title class_\">Array</span>(data.<span class=\"hljs-property\">length</span> / <span class=\"hljs-variable constant_\">TOTAL_VALUES_PER_PAGE</span>))\n      .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">e, i</span>) =></span> i + <span class=\"hljs-number\">1</span>)\n       .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =></span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{val}</span>></span>{val}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">option</span>></span></span>;\n})}\n</code></pre>\n<p>이 블록은 데이터가 페이지로 나뉘어진 개수만큼 1부터 페이지 번호까지의 배열을 생성합니다.</p>\n<p>데모에서 데이터 길이가 200이고 페이지 당 10개의 행을 표시하므로, totalPages = 200/10이므로 20이 됩니다. 따라서 [1,2,3……20]과 같은 배열이 생성되며, 이를 매핑하여 선택 드롭다운의 옵션을 생성합니다.</p>\n<div class=\"content-ad\"></div>\n<p>위의 코드를 Markdown 형식으로 변경한 것입니다!</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Table</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Table\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./table.css\"</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">HomeDashboard</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>([]);\n  <span class=\"hljs-keyword\">const</span> [currentPageNumber, setCurrentPageNumber] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">const</span> [dataToDisplay, setDataToDisplay] = <span class=\"hljs-title function_\">useState</span>([]);\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">TOTAL_VALUES_PER_PAGE</span> = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">goOnPrevPage</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">if</span> (currentPageNumber === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-title function_\">setCurrentPageNumber</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> prev - <span class=\"hljs-number\">1</span>);\n  };\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">goOnNextPage</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">if</span> (currentPageNumber === data.<span class=\"hljs-property\">length</span> / <span class=\"hljs-variable constant_\">TOTAL_VALUES_PER_PAGE</span>) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-title function_\">setCurrentPageNumber</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> prev + <span class=\"hljs-number\">1</span>);\n  };\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSelectChange</span> = (<span class=\"hljs-params\">e</span>) => {\n    <span class=\"hljs-title function_\">setCurrentPageNumber</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\n  };\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> start = (currentPageNumber - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-variable constant_\">TOTAL_VALUES_PER_PAGE</span>;\n    <span class=\"hljs-keyword\">const</span> end = currentPageNumber * <span class=\"hljs-variable constant_\">TOTAL_VALUES_PER_PAGE</span>;\n    <span class=\"hljs-title function_\">setDataToDisplay</span>(data.<span class=\"hljs-title function_\">slice</span>(start, end));\n  }, [currentPageNumber]);\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"https://jsonplaceholder.typicode.com/todos\"</span>)\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> response.<span class=\"hljs-title function_\">json</span>())\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =></span> {\n        <span class=\"hljs-title function_\">setData</span>(res);\n        <span class=\"hljs-title function_\">setDataToDisplay</span>(res.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-variable constant_\">TOTAL_VALUES_PER_PAGE</span>));\n      });\n  }, []);\n  <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">length</span> == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Loading...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"page-no-dropdown\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">select</span>\n          <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"page-number\"</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectChange}</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{currentPageNumber}</span>\n        ></span>\n          {Array.from(Array(data.length / TOTAL_VALUES_PER_PAGE))\n            .map((e, i) => i + 1)\n            .map((val) => {\n              return <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{val}</span>></span>{val}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">option</span>></span>;\n            })}\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">select</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Table</span> <span class=\"hljs-attr\">dataToDisplay</span>=<span class=\"hljs-string\">{dataToDisplay}</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"btn-container\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{goOnPrevPage}</span>></span>Prev<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{goOnNextPage}</span>></span>Next<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>즐겁게 코딩하고 계속 배워 나가세요!!</p>\n<div class=\"content-ad\"></div>\n<p>읽어 주셔서 감사합니다! 좋아요와 댓글 부탁드려요...</p>\n</body>\n</html>\n"},"__N_SSG":true}