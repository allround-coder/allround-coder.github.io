{"pageProps":{"post":{"title":"React 앱을 Azure Webapp에 배포하는 방법 다단계 Azure YAML 파이프라인 사용하기","description":"","date":"2024-06-20 02:22","slug":"2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline","content":"\n\n이 글에서는 Azure YAML Pipeline을 사용하여 React 앱을 Azure Webapp에 배포하는 배포 프로세스를 안내하겠습니다.\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_0.png)\n\n# 웹 앱 생성하기\n\n- Azure 포털에 로그인하고 자격 증명으로 이동하세요: https://portal.azure.com/#home\n- 검색 창에서 App Services를 찾아 서비스 아래에서 해당 옵션을 선택합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_1.png)\n\n3. 클릭하여 Web App 옵션을 선택하고 새 웹 앱을 만듭니다. 아래와 같이 요구 사항에 맞게 웹 앱을 구성하세요.\n\n이름: 웹 앱의 이름 (참고:이 이름은 Azure 전체에서 고유해야합니다.)\n런타임 스택: 노드\n운영 체제: 리눅스\n가격 책정: 요구 사항에 가장 적합한 계획을 선택하세요.\n\n![image](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_2.png)\n\n\n<div class=\"content-ad\"></div>\n\n\n![Image 3](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_3.png)\n\n![Image 4](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_4.png)\n\n![Image 5](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_5.png)\n\n![Image 6](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_6.png)\n\n\n<div class=\"content-ad\"></div>\n\n4. '만들기' 버튼을 클릭한 후에는 새 웹 앱 생성 프로세스가 시작됩니다.\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_7.png)\n\n5. 웹 앱이 성공적으로 생성된 후에 '리소스로 이동' 버튼을 클릭하세요.\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_8.png)\n\n<div class=\"content-ad\"></div>\n\n6. 빈 템플릿 페이지가 표시됩니다.\n\n![템플릿 페이지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_9.png)\n\n![템플릿 페이지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_10.png)\n\n# 서비스 연결 생성\n\n<div class=\"content-ad\"></div>\n\n7. 웹 앱이 생성되었으니, Azure YAML 파이프라인을 사용하여 React 앱을 웹 앱에 배포하는 데 집중해 봅시다.\n\n8. https://dev.azure.com/ 로 이동하여 자격 증명으로 로그인하세요.\n\n9. 아래 이미지에서와 같이 조직 및 프로젝트를 선택하세요.\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_11.png)\n\n<div class=\"content-ad\"></div>\n\n10. Azure의 리소스와 통신하기 위해 파이프라인에 서비스 연결을 생성하려면 프로젝트 설정을 클릭해주세요.\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_12.png)\n\n11. 서비스 연결을 만들기 위해 서비스 연결 - `새 서비스 연결`을 클릭해주세요.\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_13.png)\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_14.png)\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_15.png)\n\n12. 원하는 서비스 연결을 만들 Subskription을 드롭다운에서 선택하고 이름을 지정하세요.\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_16.png)\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmultistageAzureYAMLPipeline_17.png\" />\n\n# YAML 파이프라인 생성\n\n14. 프로젝트 폴더 루트에 React 소스 코드를 포함하는 azure-pipelines.yml이라는 새 YAML 파일을 만듭니다.\n\n아래 변수의 값을 해당 값으로 대체합니다.\nazureSubscription: your_service_connection_name (이미지 #12에 표시된 서비스 연결 이름)\nwebAppName: your_webapp_name (이미지 #3에 표시된 Web App 이름)\n\n<div class=\"content-ad\"></div>\n\n아래 파이프라인에서 deploy 단계 환경인 dev는 dev 환경으로 코드를 배포하기 위한 승인을 받기 위해 사용됩니다. 비슷하게, 추가 단계를 추가하여 test 및 prod 환경으로 배포할 수 있습니다.\n\n```js\ntrigger:\n  - dev\n\npool:\n  vmImage: ubuntu-latest\n\nvariables:\n  azureSubscription: \"azure-pipelines-azure-sc\"\n  webAppName: demo-react-linux-webapp\n\nstages:\n  - stage: build\n    displayName: build\n    jobs:\n      - job: \"build\"\n        displayName: build job\n        steps:\n          - task: NodeTool@0\n            inputs:\n               versionSource: \"spec\"\n               versionSpec: \"20.x\"\n\n          - script: |\n               npm install\n               npm run build --if-present\n            displayName: \"npm install, build\"\n\n          - task: ArchiveFiles@2\n            inputs:\n               rootFolderOrFile: \"$(System.DefaultWorkingDirectory)/build\"\n               includeRootFolder: false\n               archiveType: \"zip\"\n               archiveFile: \"$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip\"\n               replaceExistingArchive: true\n            \n          - task: PublishBuildArtifacts@1\n            inputs:\n               PathtoPublish: \"$(Build.ArtifactStagingDirectory)\"\n               ArtifactName: \"drop\"\n               publishLocation: \"Container\"\n\n  - stage: deploy\n    displayName: \"Deploy to the dev environment\"\n    dependsOn: Build\n    condition: succeeded()\n    jobs:\n      - deployment: Deploy\n        environment: dev\n        strategy:\n           runOnce:\n             deploy:\n               steps:\n                 - task: AzureRmWebAppDeployment@4\n                   inputs:\n                      ConnectionType: \"AzureRM\"\n                      azureSubscription: \"$(azureSubscription)\"\n                      appType: \"webAppLinux\"\n                      WebAppName: \"$(webAppName)\"\n                      packageForLinux: \"$(Pipeline.Workspace)/drop/$(Build.BuildId).zip\"\n                      #아래 StartupCommand는 리눅스 환경에서 React 앱을 실행하는 데 필요합니다.\n                      StartupCommand: \"pm2 serve /home/site/wwwroot/ --no-daemon --spa\"\n```\n\n<img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_18.png\" />\n\n15. Azure DevOps의 Repo에 코드를 게시하세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_19.png\" />\n\n16. DevOps 포털로 이동하여 파이프라인을 클릭하고, \"파이프라인 - 새 파이프라인\"을 선택하여 새 파이프라인을 생성하세요.\n\n<img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_20.png\" />\n\n17. 코드가 포함된 Azure YAML 파이프라인이 있는 리포지토리를 찾아보세요.\n\n<div class=\"content-ad\"></div>\n\n\n![Table 1](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_21.png)\n\n![Table 2](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_22.png)\n\n![Table 3](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_23.png)\n\n# 환경 변수 구성\n\n\n<div class=\"content-ad\"></div>\n\n18. 우리는 App.js 파일의 React 코드에서 REACT_APP_ENVIRONMENT라는 환경 변수를 사용하고 있습니다. 따라서 파이프라인에도 환경 변수를 생성해 봅시다.\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_24.png)\n\n19. Variables - 새 변수를 클릭해주세요.\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_25.png)\n\n<div class=\"content-ad\"></div>\n\n\n![image 1](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_26.png)\n\n![image 2](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_27.png)\n\n![image 3](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_28.png)\n\n20. If you have multiple environment variables to configure, repeat Step #19.\n\n\n<div class=\"content-ad\"></div>\n\n21. 파이프라인을 실행하려면 실행 옵션을 클릭하세요.\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_29.png)\n\n22. 빌드 단계가 진행 중입니다.\n\n![이미지](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_30.png)\n\n<div class=\"content-ad\"></div>\n\n23. 빌드 프로세스가 완료되면 배포 단계로 이동합니다. \"View\" 버튼을 클릭하여 배포를 승인하세요.\n\n![이미지1](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_31.png)\n\n![이미지2](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_32.png)\n\n![이미지3](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_33.png)\n\n<div class=\"content-ad\"></div>\n\n\n![Deployment successful](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_34.png)\n\n24. Deployment completed successfully!!!\n\n![React App deployed](/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_35.png)\n\n24. Browse the Web App and you can see React App is deployed successfully. The environment variable value that we configured in Step #19 is displayed here.\n\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! 위 문서를 읽어주셔서 감사합니다. 만약 이 레포지토리가 도움이 되었다면, 별풍선을 주시고 저를 팔로우해주세요. 앞으로도 많은 유익한 글을 공유할 예정이에요. 감사합니다!","ogImage":{"url":"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_0.png"},"coverImage":"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 글에서는 Azure YAML Pipeline을 사용하여 React 앱을 Azure Webapp에 배포하는 배포 프로세스를 안내하겠습니다.</p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_0.png\" alt=\"이미지\"></p>\n<h1>웹 앱 생성하기</h1>\n<ul>\n<li>Azure 포털에 로그인하고 자격 증명으로 이동하세요: <a href=\"https://portal.azure.com/#home\" rel=\"nofollow\" target=\"_blank\">https://portal.azure.com/#home</a></li>\n<li>검색 창에서 App Services를 찾아 서비스 아래에서 해당 옵션을 선택합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_1.png\" alt=\"image\"></p>\n<ol start=\"3\">\n<li>클릭하여 Web App 옵션을 선택하고 새 웹 앱을 만듭니다. 아래와 같이 요구 사항에 맞게 웹 앱을 구성하세요.</li>\n</ol>\n<p>이름: 웹 앱의 이름 (참고:이 이름은 Azure 전체에서 고유해야합니다.)\n런타임 스택: 노드\n운영 체제: 리눅스\n가격 책정: 요구 사항에 가장 적합한 계획을 선택하세요.</p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_2.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_3.png\" alt=\"Image 3\"></p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_4.png\" alt=\"Image 4\"></p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_5.png\" alt=\"Image 5\"></p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_6.png\" alt=\"Image 6\"></p>\n<div class=\"content-ad\"></div>\n<ol start=\"4\">\n<li>'만들기' 버튼을 클릭한 후에는 새 웹 앱 생성 프로세스가 시작됩니다.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_7.png\" alt=\"이미지\"></p>\n<ol start=\"5\">\n<li>웹 앱이 성공적으로 생성된 후에 '리소스로 이동' 버튼을 클릭하세요.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_8.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<ol start=\"6\">\n<li>빈 템플릿 페이지가 표시됩니다.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_9.png\" alt=\"템플릿 페이지\"></p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_10.png\" alt=\"템플릿 페이지\"></p>\n<h1>서비스 연결 생성</h1>\n<div class=\"content-ad\"></div>\n<ol start=\"7\">\n<li>\n<p>웹 앱이 생성되었으니, Azure YAML 파이프라인을 사용하여 React 앱을 웹 앱에 배포하는 데 집중해 봅시다.</p>\n</li>\n<li>\n<p><a href=\"https://dev.azure.com/\" rel=\"nofollow\" target=\"_blank\">https://dev.azure.com/</a> 로 이동하여 자격 증명으로 로그인하세요.</p>\n</li>\n<li>\n<p>아래 이미지에서와 같이 조직 및 프로젝트를 선택하세요.</p>\n</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_11.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<ol start=\"10\">\n<li>Azure의 리소스와 통신하기 위해 파이프라인에 서비스 연결을 생성하려면 프로젝트 설정을 클릭해주세요.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_12.png\" alt=\"이미지\"></p>\n<ol start=\"11\">\n<li>서비스 연결을 만들기 위해 서비스 연결 - <code>새 서비스 연결</code>을 클릭해주세요.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_13.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_14.png\" alt=\"이미지\"></p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_15.png\" alt=\"이미지\"></p>\n<ol start=\"12\">\n<li>원하는 서비스 연결을 만들 Subskription을 드롭다운에서 선택하고 이름을 지정하세요.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_16.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmultistageAzureYAMLPipeline_17.png\">\n<h1>YAML 파이프라인 생성</h1>\n<ol start=\"14\">\n<li>프로젝트 폴더 루트에 React 소스 코드를 포함하는 azure-pipelines.yml이라는 새 YAML 파일을 만듭니다.</li>\n</ol>\n<p>아래 변수의 값을 해당 값으로 대체합니다.\nazureSubscription: your_service_connection_name (이미지 #12에 표시된 서비스 연결 이름)\nwebAppName: your_webapp_name (이미지 #3에 표시된 Web App 이름)</p>\n<div class=\"content-ad\"></div>\n<p>아래 파이프라인에서 deploy 단계 환경인 dev는 dev 환경으로 코드를 배포하기 위한 승인을 받기 위해 사용됩니다. 비슷하게, 추가 단계를 추가하여 test 및 prod 환경으로 배포할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">trigger</span>:\n  - dev\n\n<span class=\"hljs-attr\">pool</span>:\n  <span class=\"hljs-attr\">vmImage</span>: ubuntu-latest\n\n<span class=\"hljs-attr\">variables</span>:\n  <span class=\"hljs-attr\">azureSubscription</span>: <span class=\"hljs-string\">\"azure-pipelines-azure-sc\"</span>\n  <span class=\"hljs-attr\">webAppName</span>: demo-react-linux-webapp\n\n<span class=\"hljs-attr\">stages</span>:\n  - <span class=\"hljs-attr\">stage</span>: build\n    <span class=\"hljs-attr\">displayName</span>: build\n    <span class=\"hljs-attr\">jobs</span>:\n      - <span class=\"hljs-attr\">job</span>: <span class=\"hljs-string\">\"build\"</span>\n        <span class=\"hljs-attr\">displayName</span>: build job\n        <span class=\"hljs-attr\">steps</span>:\n          - <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">NodeTool</span>@<span class=\"hljs-number\">0</span>\n            <span class=\"hljs-attr\">inputs</span>:\n               <span class=\"hljs-attr\">versionSource</span>: <span class=\"hljs-string\">\"spec\"</span>\n               <span class=\"hljs-attr\">versionSpec</span>: <span class=\"hljs-string\">\"20.x\"</span>\n\n          - <span class=\"hljs-attr\">script</span>: |\n               npm install\n               npm run build --<span class=\"hljs-keyword\">if</span>-present\n            <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">\"npm install, build\"</span>\n\n          - <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">ArchiveFiles</span>@<span class=\"hljs-number\">2</span>\n            <span class=\"hljs-attr\">inputs</span>:\n               <span class=\"hljs-attr\">rootFolderOrFile</span>: <span class=\"hljs-string\">\"$(System.DefaultWorkingDirectory)/build\"</span>\n               <span class=\"hljs-attr\">includeRootFolder</span>: <span class=\"hljs-literal\">false</span>\n               <span class=\"hljs-attr\">archiveType</span>: <span class=\"hljs-string\">\"zip\"</span>\n               <span class=\"hljs-attr\">archiveFile</span>: <span class=\"hljs-string\">\"$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip\"</span>\n               <span class=\"hljs-attr\">replaceExistingArchive</span>: <span class=\"hljs-literal\">true</span>\n            \n          - <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">PublishBuildArtifacts</span>@<span class=\"hljs-number\">1</span>\n            <span class=\"hljs-attr\">inputs</span>:\n               <span class=\"hljs-title class_\">PathtoPublish</span>: <span class=\"hljs-string\">\"$(Build.ArtifactStagingDirectory)\"</span>\n               <span class=\"hljs-title class_\">ArtifactName</span>: <span class=\"hljs-string\">\"drop\"</span>\n               <span class=\"hljs-attr\">publishLocation</span>: <span class=\"hljs-string\">\"Container\"</span>\n\n  - <span class=\"hljs-attr\">stage</span>: deploy\n    <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">\"Deploy to the dev environment\"</span>\n    <span class=\"hljs-attr\">dependsOn</span>: <span class=\"hljs-title class_\">Build</span>\n    <span class=\"hljs-attr\">condition</span>: <span class=\"hljs-title function_\">succeeded</span>()\n    <span class=\"hljs-attr\">jobs</span>:\n      - <span class=\"hljs-attr\">deployment</span>: <span class=\"hljs-title class_\">Deploy</span>\n        <span class=\"hljs-attr\">environment</span>: dev\n        <span class=\"hljs-attr\">strategy</span>:\n           <span class=\"hljs-attr\">runOnce</span>:\n             <span class=\"hljs-attr\">deploy</span>:\n               <span class=\"hljs-attr\">steps</span>:\n                 - <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">AzureRmWebAppDeployment</span>@<span class=\"hljs-number\">4</span>\n                   <span class=\"hljs-attr\">inputs</span>:\n                      <span class=\"hljs-title class_\">ConnectionType</span>: <span class=\"hljs-string\">\"AzureRM\"</span>\n                      <span class=\"hljs-attr\">azureSubscription</span>: <span class=\"hljs-string\">\"$(azureSubscription)\"</span>\n                      <span class=\"hljs-attr\">appType</span>: <span class=\"hljs-string\">\"webAppLinux\"</span>\n                      <span class=\"hljs-title class_\">WebAppName</span>: <span class=\"hljs-string\">\"$(webAppName)\"</span>\n                      <span class=\"hljs-attr\">packageForLinux</span>: <span class=\"hljs-string\">\"$(Pipeline.Workspace)/drop/$(Build.BuildId).zip\"</span>\n                      #아래 <span class=\"hljs-title class_\">StartupCommand</span>는 리눅스 환경에서 <span class=\"hljs-title class_\">React</span> 앱을 실행하는 데 필요합니다.\n                      <span class=\"hljs-title class_\">StartupCommand</span>: <span class=\"hljs-string\">\"pm2 serve /home/site/wwwroot/ --no-daemon --spa\"</span>\n</code></pre>\n<img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_18.png\">\n<ol start=\"15\">\n<li>Azure DevOps의 Repo에 코드를 게시하세요.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_19.png\">\n<ol start=\"16\">\n<li>DevOps 포털로 이동하여 파이프라인을 클릭하고, \"파이프라인 - 새 파이프라인\"을 선택하여 새 파이프라인을 생성하세요.</li>\n</ol>\n<img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_20.png\">\n<ol start=\"17\">\n<li>코드가 포함된 Azure YAML 파이프라인이 있는 리포지토리를 찾아보세요.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_21.png\" alt=\"Table 1\"></p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_22.png\" alt=\"Table 2\"></p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_23.png\" alt=\"Table 3\"></p>\n<h1>환경 변수 구성</h1>\n<div class=\"content-ad\"></div>\n<ol start=\"18\">\n<li>우리는 App.js 파일의 React 코드에서 REACT_APP_ENVIRONMENT라는 환경 변수를 사용하고 있습니다. 따라서 파이프라인에도 환경 변수를 생성해 봅시다.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_24.png\" alt=\"이미지\"></p>\n<ol start=\"19\">\n<li>Variables - 새 변수를 클릭해주세요.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_25.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_26.png\" alt=\"image 1\"></p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_27.png\" alt=\"image 2\"></p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_28.png\" alt=\"image 3\"></p>\n<ol start=\"20\">\n<li>If you have multiple environment variables to configure, repeat Step #19.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ol start=\"21\">\n<li>파이프라인을 실행하려면 실행 옵션을 클릭하세요.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_29.png\" alt=\"이미지\"></p>\n<ol start=\"22\">\n<li>빌드 단계가 진행 중입니다.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_30.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<ol start=\"23\">\n<li>빌드 프로세스가 완료되면 배포 단계로 이동합니다. \"View\" 버튼을 클릭하여 배포를 승인하세요.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_31.png\" alt=\"이미지1\"></p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_32.png\" alt=\"이미지2\"></p>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_33.png\" alt=\"이미지3\"></p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_34.png\" alt=\"Deployment successful\"></p>\n<ol start=\"24\">\n<li>Deployment completed successfully!!!</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-DeployReactApptoAzureWebappusingmutistageAzureYAMLPipeline_35.png\" alt=\"React App deployed\"></p>\n<ol start=\"24\">\n<li>Browse the Web App and you can see React App is deployed successfully. The environment variable value that we configured in Step #19 is displayed here.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<p>안녕하세요! 위 문서를 읽어주셔서 감사합니다. 만약 이 레포지토리가 도움이 되었다면, 별풍선을 주시고 저를 팔로우해주세요. 앞으로도 많은 유익한 글을 공유할 예정이에요. 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}