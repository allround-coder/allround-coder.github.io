{"pageProps":{"post":{"title":"Nodejs에서 Role-Based Access Control RBAC 구현하기","description":"","date":"2024-05-14 14:52","slug":"2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs","content":"\n\n역할 기반 액세스 제어 (RBAC)는 응용 프로그램 보안의 중요한 측면입니다. 조직 또는 응용 프로그램 내에서 사용자의 역할에 따라 리소스에 대한 액세스를 관리하고 제한하는 구조화된 접근 방식을 제공합니다. 이 포괄적인 안내서에서는 RBAC 개념을 탐색하고 혜택을 논의하며 Node.js 응용 프로그램에 RBAC를 구현하는 과정을 안내합니다. 이 글을 마치면 직접 프로젝트에 대해 RBAC를 설계하고 구현하는 방법을 명확히 이해할 수 있을 것입니다.\n\n![2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_0](/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_0.png)\n\n# 목차\n\n- 역할 기반 액세스 제어 (RBAC) 소개\n\n\n\n- RBAC이란 무엇인가요?\n- RBAC의 장점들\n\n- Node.js 환경 설정하기\n\n- 준비물\n- 프로젝트 구조\n\n- 예시 프로젝트: RBAC 실습하기\n\n\n\n- 간단한 업무 관리 시스템 구축\n- 역할 및 권한 정의\n- 인증 및 권한 부여 구현\n- RBAC 시스템 테스트\n\n- 최상의 실천 방법 및 보안 고려 사항\n\n- 데이터 유효성 검사\n- 감사 추적\n- 세분화된 권한\n- 정기적인 업데이트 및 모니터링\n\n- 결론\n\n\n\n# 1. 역할 기반 액세스 제어 (RBAC) 소개\n\n# RBAC란 무엇인가요?\n\n역할 기반 액세스 제어 (RBAC)은 시스템 액세스를 인가된 사용자로 제한하는 보안 개념입니다. RBAC에서는 액세스 권한이 역할과 연관되며 사용자에게 하나 이상의 역할이 할당됩니다. 이러한 역할은 사용자가 시스템 내에서 어떤 작업이나 작업을 수행할 수 있는지를 정의합니다.\n\nRBAC는 권한을 중앙 집중화하여 액세스 제어를 간소화하며, 관리자가 고수준에서 사용자 액세스를 관리할 수 있게 합니다. 사용자가 자신의 역할을 수행하는 데 필요한 권한만 갖도록 보장하여 보안을 강화하며, 무단 조치의 위험을 줄입니다.\n\n\n\n# 롤 기반 인증 이해하기\n\n롤 기반 인증은 사용자에게 역할을 할당하고 해당 역할에 따라 리소스에 대한 액세스를 결정하는 액세스 제어 방법입니다. 보통 각 역할에는 관련된 권한 집합이 있고, 사용자들은 할당된 역할에 기반하여 리소스에 액세스 권한이 부여됩니다.\n\n응용 프로그램에 따라 역할은 다양할 수 있지만 일반적으로 사용되는 역할은 다음과 같습니다:\n\n- Admin: 일반적으로 모든 기능에 액세스하고 관리 작업을 수행할 수 있는 관리 권한이 있는 사용자입니다.\n- User: 기본 기능 및 기능에 액세스 권한이 있는 표준 사용자입니다.\n- Moderator: 콘텐츠를 조절하거나 사용자를 관리하는 역할을 맡은 권한이 있는 사용자입니다.\n- Guest: 인증되지 않은 사용자로서 애플리케이션에 제한된 액세스 권한을 갖는 사용자입니다.\n\n\n\n# RBAC의 장점\n\nRBAC를 구현하면 다음과 같은 여러 가지 이점이 있습니다:\n\n- 보안: RBAC는 응용 프로그램 내에서 미인가된 액세스나 작업의 위험을 최소화하여 보안 취약점을 줄입니다.\n- 간편함: RBAC는 권한을 역할로 그룹화하여 사용자 액세스 관리를 간편하게 만들어 관리를 더 간편하게 합니다.\n- 확장성: RBAC는 매우 확장 가능하여 소규모 및 대규모 응용 프로그램에 모두 적합합니다.\n- 준수: GDPR 및 HIPAA와 같은 많은 규제 프레임워크는 RBAC와 같은 견고한 액세스 제어 메커니즘을 요구합니다.\n- 감사 기능: RBAC를 사용하면 사용자 작업을 추적하고 감사할 수 있어 보안 침해를 식별하는 데 중요합니다.\n\n이제 RBAC의 개념과 장점을 이해했으니, Node.js 애플리케이션에서 구현해 봅시다.\n\n\n\n# 2. Node.js 환경 설정하기\n\n# 요구 사항\n\nRBAC 구현에 들어가기 전에, 다음의 요구 사항이 갖춰져 있는지 확인해주세요:\n\n- 시스템에 Node.js가 설치되어 있어야 합니다.\n- 코드 편집기(예: Visual Studio Code)가 필요합니다.\n- JavaScript와 Node.js의 기본 지식이 요구됩니다.\n- Node.js 애플리케이션을 실행하기 위한 터미널 또는 명령 프롬프트가 있어야 합니다.\n- 의존성을 설치하기 위한 npm(Node Package Manager)이 필요합니다.\n\n\n\n# 프로젝트 구조\n\n이번 튜토리얼에서 사용할 기본 프로젝트 구조입니다:\n\n```js\nrbca/\n│\n├── helpers/\n│   ├── db.js\n│   ├── errorHandler.js\n│   ├── jwt.js\n│   └── role.js\n│\n├── models/\n│   └── user.js\n│\n├── public/\n│   └── stylesheets/\n│       └── style.css\n│\n├── routes/\n│   ├── index.js\n│   └── user.controllers.js\n│\n├── services/\n│   └── user.services.js\n│\n├── views/\n│   ├── error.jade\n│   ├── index.jade\n│   └── layout.jade\n│\n├── .gitignore\n├── README.md\n├── app.js\n├── config.json\n├── package-lock.json\n└── package.json\n```\n\n이 프로젝트 구조는 튜토리얼을 진행하면서 점진적으로 구성해 나갈 것입니다.\n\n\n\n# 의존성 설치\n\n```js\nnpm install bcryptjs@^2.4.3 cookie-parser@~1.4.4 cors@^2.8.5 debug@~2.6.9 express@~4.16.1 express-jwt@^6.0.0 http-errors@~1.6.3 jade@~1.11.0 jsonwebtoken@^8.5.1 mongoose@^5.9.25 morgan@~1.9.1 rootpath@^0.1.2 --save\n```\n\n# helpers/db.js:\n\n```js\nconst config = require(\"../config.json\");\nconst mongoose = require(\"mongoose\");\nconst conenctionOptions = {\n  useCreateIndex: true,\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  useFindAndModify: false,\n};\ntry {\n  mongoose\n    .connect(\n      process.env.MONGODB_URI || config.connectionString,\n      conenctionOptions\n    )\n    .then((res) => console.log(`MOngoDB connected Successfully..!`));\n} catch (error) {\n  console.log(`MongoDB Error: `, error.message);\n  process.exit(1);\n}\n\nmongoose.Promise = global.Promise;\n\nmodule.exports = {\n  User: require(\"../models/user\"),\n};\n```\n\n\n\n- mongoose 모듈을 가져옵니다\n- 설정에서 데이터베이스 URL을 읽어옵니다\n- 연결 옵션을 설정합니다\n- 연결 및 오류 이벤트를 처리합니다\n- Promise 라이브러리를 구성합니다\n- 다른 곳에서 사용할 모델을 내보냅니다\n\nhelpers/errorHandler.js:\n\n```js\nfunction errorHandler(err, req, res, next) {\n  if (typeof err === \"string\") {\n    // 사용자 정의 애플리케이션 오류\n    return res.status(400).json({ message: err });\n  }\n  if (err.name === \"ValidationError\") {\n    // mongoose 유효성 검사 오류\n    return res.status(400).json({ message: err.message });\n  }\n\n  if (err.name === \"UnauthorizedError\") {\n    // jwt 인증 오류\n    return res.status(401).json({ message: \"잘못된 토큰\" });\n  }\n\n  // 기본적으로 500 서버 오류\n  return res.status(500).json({ message: err.message });\n}\n\nmodule.exports = errorHandler;\n```\n\nhelpers/jwt.js:\n\n\n\n```js\nconst expressJwt = require(\"express-jwt\");\nconst config = require(\"../config.json\");\nconst db = require(\"../helpers/db\");\n\nfunction jwt(roles = []) {\n  // roles 매개변수는 단일 역할 문자열 (예: Role.User 또는 'User')이거나 역할 배열 ([Role.Admin, Role.User] 또는 ['Admin', 'User'])일 수 있습니다.\n  if (typeof roles === \"string\") {\n    roles = [roles];\n    console.log(roles);\n  }\n\n  const secret = config.secret;\n\n  return [\n    // JWT 토큰을 인증하고 사용자를 요청 객체(req.user)에 추가합니다.\n    expressJwt({ secret, algorithms: [\"HS256\"] }),\n\n    // 사용자 역할에 따라 권한 부여\n    async (req, res, next) => {\n      const user = await db.User.findById(req.user.sub);\n\n      if (!user || (roles.length && !roles.includes(user.role))) {\n        // 사용자 역할이 허가되지 않았습니다.\n        return res.status(401).json({ message: \"Only Admin is Authorized!\" });\n      }\n      // 인증 및 권한 부여 성공\n      req.user.role = user.role;\n      next();\n    },\n  ];\n}\n\nmodule.exports = jwt;\n```\n\nhelpers/role.js:\n\n```js\nmodule.exports = {\n  Admin: \"Admin\",\n  User: \"User\",\n};\n```\n\nmodels/user.js:\n\n\n\n\n```js\nconst mongoose = require(\"mongoose\");\nconst Schema = mongoose.Schema;\n\nconst schema = new Schema({\n  email: { type: String, unique: true, required: true },\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true },\n  password: { type: String, required: true },\n  role: { type: String, required: true },\n  createdDate: { type: Date, default: Date.now },\n});\n\nschema.set(\"toJSON\", {\n  virtuals: true,\n  versionKey: false,\n  transform: function (doc, ret) {\n    delete ret._id, delete ret.password;\n  },\n});\n\nmodule.exports = mongoose.model(\"User\", schema);\n```\n\nroutes/index.js:\n\n```js\nvar express = require('express');\nvar router = express.Router();\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n\nmodule.exports = router;\n```\n\nroutes/user.controllers.js:\n```\n\n\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\nconst userServices = require(\"../services/user.services\");\nconst Role = require(\"../helpers/role\");\nconst jwt = require(\"../helpers/jwt\");\n\n// 라우트\nrouter.post(\"/authenticate\", authenticate);\nrouter.post(\"/register\", register);\nrouter.get(\"/\", jwt(Role.Admin), getAll);\nrouter.get(\"/current\", jwt(), getCurrent);\nrouter.get(\"/:id\", getById);\nrouter.put(\"/:id\", update);\nrouter.delete(\"/:id\", _delete);\n\nmodule.exports = router;\n\n// 라우트 함수\nfunction authenticate(req, res, next) {\n  userServices\n    .authenticate(req.body)\n    .then((user) => {\n      console.log(user);\n      user\n        ? res.json({ user: user, message: \"사용자가 로그인되었습니다.\" })\n        : res\n            .status(400)\n            .json({ message: \"사용자 이름 또는 비밀번호가 잘못되었습니다.\" });\n    })\n    .catch((error) => next(error));\n}\n\nfunction register(req, res, next) {\n  userServices\n    .create(req.body)\n    .then((user) =>\n      res.json({\n        user: user,\n        message: `이메일 ${req.body.email}으로 성공적으로 등록되었습니다.`,\n      })\n    )\n    .catch((error) => next(error));\n}\n\nfunction getAll(req, res, next) {\n  const currentUser = req.user;\n\n  if (currentUser.role !== Role.Admin) {\n    return res.status(401).json({ message: \"권한이 없습니다!\" });\n  }\n  userServices\n    .getAll()\n    .then((users) => res.json(users))\n    .catch((err) => next(err));\n}\n\nfunction getCurrent(req, res, next) {\n  console.log(req);\n  userServices\n    .getById(req.user.sub)\n    .then((user) => (user ? res.json(user) : res.status(404)))\n    .catch((error) => next(error));\n}\n\nfunction getById(req, res, next) {\n  userServices\n    .getById(req.params.id)\n    .then((user) => {\n      if (!user) {\n        res.status(404).json({ message: \"사용자를 찾을 수 없습니다!\" });\n        next();\n      }\n      return res.json(user);\n    })\n    .catch((error) => next(error));\n}\n\nfunction update(req, res, next) {\n  userServices\n    .update(req.params.id, req.body)\n    .then(() =>\n      res.json({\n        message: `ID가 ${req.params.id}인 사용자가 성공적으로 업데이트되었습니다.`,\n      })\n    )\n    .catch((error) => next(error));\n}\n\nfunction _delete(req, res, next) {\n  userServices\n    .delete(req.params.id)\n    .then(() =>\n      res.json({\n        message: `ID가 ${req.params.id}인 사용자가 성공적으로 삭제되었습니다.`,\n      })\n    )\n    .catch((error) => next(error));\n}\n```\n\nservices/user.services.js:\n\n```js\nconst jwt = require(\"jsonwebtoken\");\nconst bcrypt = require(\"bcryptjs\");\nconst config = require(\"../config.json\");\nconst db = require(\"../helpers/db\");\nconst User = db.User;\n\n// 사용자 자격 증명을 인증하는 함수\nasync function authenticate({ email, password }) {\n  // 이메일로 사용자 찾기\n  const user = await User.findOne({ email });\n  console.log(\"사용자 모델\", user);\n  // 사용자가 있고 암호가 일치하면 토큰 생성\n  if (user && bcrypt.compareSync(password, user.password)) {\n    const token = jwt.sign({ sub: user.id, role: user.role }, config.secret, {\n      expiresIn: \"7d\",\n    });\n    \n    return { ...user.toJSON(), token };\n  }\n}\n\n// 모든 사용자 가져오기\nasync function getAll() {\n  return await User.find();\n}\n\n// ID를 사용하여 사용자 가져오기\nasync function getById(id) {\n  console.log(\"ID를 찾는 중: \", id);\n  return await User.findById(id);\n}\n\n// 사용자 추가\nasync function create(userParam) {\n  // 사용자가 있는지 확인\n  const user = await User.findOne({ email: userParam.email });\n  // 유효성 검사\n  if (user) throw `동일한 이메일이 이미 존재합니다: ${userParam.email}`;\n\n  // 사용자 객체 생성\n  const newUser = new User(userParam);\n  if (userParam.password) {\n    newUser.password = bcrypt.hashSync(userParam.password, 10);\n  }\n\n  await newUser.save();\n}\n\n// 사용자 업데이트\nasync function update(id, userParam) {\n  const user = await User.findById(id);\n  if (!user) throw \"사용자를 찾을 수 없습니다.\";\n  if (\n    user.email !== userParam.email &&\n    (await User.findOne({ email: userParam.email }))\n  ) {\n    throw `동일한 이메일을 가진 사용자가 이미 존재합니다: ${userParam.email}`;\n  }\n\n  if (userParam.password) {\n    userParam.password = bcrypt.hashSync(userParam.password, 10);\n  }\n\n  // 사용자 객체 복사\n  Object.assign(user, userParam);\n  await user.save();\n}\n\nasync function _delete(id) {\n  await User.findByIdAndRemove(id);\n}\n\nmodule.exports = {\n  authenticate,\n  getAll,\n  getById,\n  create,\n  update,\n  delete: _delete,\n};\n```\n\n\n\n```js\n레이아웃 확장\n\n콘텐츠 블록\n  h1= 메시지\n  h2= 오류 상태\n  pre #{error.stack}\n```\n\nviews/index.jade:\n\n```js\n레이아웃 확장\n\n콘텐츠 블록\n  h1= 제목\n  p 환영합니다 #{title}\n```\n\nviews/layout.jade:```\n\n\n\n```json\n{\n  \"database\": {\n    \"host\": \"localhost\",\n    \"username\": \"admin\",\n    \"password\": \"password123\",\n    \"port\": 3306\n  },\n  \"server\": {\n    \"port\": 5000,\n    \"corsOptions\": {\n      \"origin\": \"*\"\n    }\n  }\n}\n```\n\n\n\n```json\n{\n  \"connectionString\": \"//당신의 MONGODB URI\",\n  \"secret\": \"//JWT 토큰을 위한 원하는 시크릿 키\"\n}\n```\n\n사용자 등록\n\n![사진](/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_1.png)\n\n사용자 인증\n\n\n\n\n![Current User](/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_2.png)\n\n![Unauthorize](/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_3.png)\n\n\n\n\n<img src=\"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_4.png\" />\n\n# 7. 모범 사례 및 보안 주의 사항\n\nNode.js 애플리케이션에서 RBAC를 구현할 때 다음 모범 사례와 보안 주의 사항을 고려해보세요:\n\n# 데이터 유효성 검사\n\n\n\n사용자 입력을 항상 유효성 검사하여 SQL 인젝션, XSS 공격 등과 같은 보안 취약점을 방지하세요. 데이터 무결성을 보장하기 위해 유효성 검사 라이브러리나 프레임워크를 사용하세요.\n\n## 감사 로그\n\n사용자 활동과 액세스 시도를 추적하기 위해 감사 로그를 구현하세요. 이는 보안 위반이나 무단 활동을 식별하는 데 중요할 수 있습니다.\n\n## 세분화된 권한\n\n\n\n사용자가 자신의 업무를 수행하는 데 필요한 최소한의 권한을 보장하기 위해 세밀한 권한을 정의하십시오. 역할에 권한을 너무 많이 할당하지 않도록 주의하십시오.\n\n## 정기적인 업데이트와 모니터링\n\nRBAC 시스템을 최신 상태로 유지하십시오. 응용 프로그램이 발전함에 따라 역할과 권한을 조정해야 할 수 있습니다. 보안을 유지하기 위해 정기적으로 RBAC 정책을 모니터링하고 검토하십시오.\n\n## 저와 소통하기:\n\n\n\nLinkedin: [https://www.linkedin.com/in/suneel-kumar-52164625a/](https://www.linkedin.com/in/suneel-kumar-52164625a/)\n\n# 8. 결론\n\n이 포괄적인 안내서에서는 Role-Based Access Control (RBAC)의 개념을 탐구하고 Node.js 애플리케이션에 구현하는 방법을 시연했습니다. 역할 및 권한 정의, 사용자 인증, 역할 할당, 역할 기반 미들웨어, 그리고 RBAC가 작동하는 방식을 보여 주기 위해 샘플 작업 관리 시스템을 만들었습니다.\n\nRBAC를 구현함으로써 Node.js 애플리케이션의 보안을 크게 향상시키고 사용자 액세스를 효과적으로 제어하며 보안 위협을 줄일 수 있습니다. 또한, 최적의 방법을 따르고 보안 고려 사항을 고려함으로써 RBAC 시스템의 견고성을 보장할 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_0.png"},"coverImage":"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_0.png","tag":["Tech"],"readingTime":13},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h2: \"h2\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"역할 기반 액세스 제어 (RBAC)는 응용 프로그램 보안의 중요한 측면입니다. 조직 또는 응용 프로그램 내에서 사용자의 역할에 따라 리소스에 대한 액세스를 관리하고 제한하는 구조화된 접근 방식을 제공합니다. 이 포괄적인 안내서에서는 RBAC 개념을 탐색하고 혜택을 논의하며 Node.js 응용 프로그램에 RBAC를 구현하는 과정을 안내합니다. 이 글을 마치면 직접 프로젝트에 대해 RBAC를 설계하고 구현하는 방법을 명확히 이해할 수 있을 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_0.png\",\n        alt: \"2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_0\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"목차\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"역할 기반 액세스 제어 (RBAC) 소개\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"RBAC이란 무엇인가요?\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"RBAC의 장점들\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Node.js 환경 설정하기\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"준비물\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"프로젝트 구조\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"예시 프로젝트: RBAC 실습하기\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"간단한 업무 관리 시스템 구축\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"역할 및 권한 정의\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"인증 및 권한 부여 구현\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"RBAC 시스템 테스트\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"최상의 실천 방법 및 보안 고려 사항\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"데이터 유효성 검사\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"감사 추적\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"세분화된 권한\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"정기적인 업데이트 및 모니터링\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"결론\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"1. 역할 기반 액세스 제어 (RBAC) 소개\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"RBAC란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"역할 기반 액세스 제어 (RBAC)은 시스템 액세스를 인가된 사용자로 제한하는 보안 개념입니다. RBAC에서는 액세스 권한이 역할과 연관되며 사용자에게 하나 이상의 역할이 할당됩니다. 이러한 역할은 사용자가 시스템 내에서 어떤 작업이나 작업을 수행할 수 있는지를 정의합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"RBAC는 권한을 중앙 집중화하여 액세스 제어를 간소화하며, 관리자가 고수준에서 사용자 액세스를 관리할 수 있게 합니다. 사용자가 자신의 역할을 수행하는 데 필요한 권한만 갖도록 보장하여 보안을 강화하며, 무단 조치의 위험을 줄입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"롤 기반 인증 이해하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"롤 기반 인증은 사용자에게 역할을 할당하고 해당 역할에 따라 리소스에 대한 액세스를 결정하는 액세스 제어 방법입니다. 보통 각 역할에는 관련된 권한 집합이 있고, 사용자들은 할당된 역할에 기반하여 리소스에 액세스 권한이 부여됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"응용 프로그램에 따라 역할은 다양할 수 있지만 일반적으로 사용되는 역할은 다음과 같습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Admin: 일반적으로 모든 기능에 액세스하고 관리 작업을 수행할 수 있는 관리 권한이 있는 사용자입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"User: 기본 기능 및 기능에 액세스 권한이 있는 표준 사용자입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Moderator: 콘텐츠를 조절하거나 사용자를 관리하는 역할을 맡은 권한이 있는 사용자입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Guest: 인증되지 않은 사용자로서 애플리케이션에 제한된 액세스 권한을 갖는 사용자입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"RBAC의 장점\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"RBAC를 구현하면 다음과 같은 여러 가지 이점이 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"보안: RBAC는 응용 프로그램 내에서 미인가된 액세스나 작업의 위험을 최소화하여 보안 취약점을 줄입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"간편함: RBAC는 권한을 역할로 그룹화하여 사용자 액세스 관리를 간편하게 만들어 관리를 더 간편하게 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"확장성: RBAC는 매우 확장 가능하여 소규모 및 대규모 응용 프로그램에 모두 적합합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"준수: GDPR 및 HIPAA와 같은 많은 규제 프레임워크는 RBAC와 같은 견고한 액세스 제어 메커니즘을 요구합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"감사 기능: RBAC를 사용하면 사용자 작업을 추적하고 감사할 수 있어 보안 침해를 식별하는 데 중요합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 RBAC의 개념과 장점을 이해했으니, Node.js 애플리케이션에서 구현해 봅시다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"2. Node.js 환경 설정하기\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"요구 사항\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"RBAC 구현에 들어가기 전에, 다음의 요구 사항이 갖춰져 있는지 확인해주세요:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"시스템에 Node.js가 설치되어 있어야 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"코드 편집기(예: Visual Studio Code)가 필요합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"JavaScript와 Node.js의 기본 지식이 요구됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Node.js 애플리케이션을 실행하기 위한 터미널 또는 명령 프롬프트가 있어야 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"의존성을 설치하기 위한 npm(Node Package Manager)이 필요합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"프로젝트 구조\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이번 튜토리얼에서 사용할 기본 프로젝트 구조입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"rbca/\\n│\\n├── helpers/\\n│   ├── db.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\n│   ├── errorHandler.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\n│   ├── jwt.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\n│   └── role.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\n│\\n├── models/\\n│   └── user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\n│\\n├── public/\\n│   └── stylesheets/\\n│       └── style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"css\"\n        }), \"\\n│\\n├── routes/\\n│   ├── index.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\n│   └── user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"controllers\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\n│\\n├── services/\\n│   └── user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"services\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\n│\\n├── views/\\n│   ├── error.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"jade\"\n        }), \"\\n│   ├── index.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"jade\"\n        }), \"\\n│   └── layout.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"jade\"\n        }), \"\\n│\\n├── .\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"gitignore\"\n        }), \"\\n├── \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"README\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"md\"\n        }), \"\\n├── app.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\n├── config.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"json\"\n        }), \"\\n├── package-lock.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"json\"\n        }), \"\\n└── package.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"json\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 프로젝트 구조는 튜토리얼을 진행하면서 점진적으로 구성해 나갈 것입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"의존성 설치\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"npm install bcryptjs@^\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2.4\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".3\"\n        }), \" cookie-parser@~\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.4\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".4\"\n        }), \" cors@^\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2.8\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".5\"\n        }), \" debug@~\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2.6\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".9\"\n        }), \" express@~\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4.16\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".1\"\n        }), \" express-jwt@^\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6.0\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".0\"\n        }), \" http-errors@~\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.6\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".3\"\n        }), \" jade@~\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.11\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".0\"\n        }), \" jsonwebtoken@^\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8.5\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".1\"\n        }), \" mongoose@^\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5.9\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".25\"\n        }), \" morgan@~\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.9\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".1\"\n        }), \" rootpath@^\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.1\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".2\"\n        }), \" --save\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"helpers/db.js:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" config = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../config.json\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" mongoose = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"mongoose\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" conenctionOptions = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"useCreateIndex\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"useNewUrlParser\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"useUnifiedTopology\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"useFindAndModify\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n};\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \" {\\n  mongoose\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"connect\"\n        }), \"(\\n      process.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"env\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"MONGODB_URI\"\n        }), \" || config.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"connectionString\"\n        }), \",\\n      conenctionOptions\\n    )\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"res\"\n          }), \") =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`MOngoDB connected Successfully..!`\"\n        }), \"));\\n} \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"catch\"\n        }), \" (error) {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`MongoDB Error: `\"\n        }), \", error.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"message\"\n        }), \");\\n  process.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"exit\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \");\\n}\\n\\nmongoose.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Promise\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"global\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Promise\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../models/user\\\"\"\n        }), \"),\\n};\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"mongoose 모듈을 가져옵니다\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"설정에서 데이터베이스 URL을 읽어옵니다\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"연결 옵션을 설정합니다\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"연결 및 오류 이벤트를 처리합니다\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Promise 라이브러리를 구성합니다\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다른 곳에서 사용할 모델을 내보냅니다\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"helpers/errorHandler.js:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"errorHandler\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"err, req, res, next\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" err === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"string\\\"\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 정의 애플리케이션 오류\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"400\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"json\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"message\"\n        }), \": err });\\n  }\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (err.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ValidationError\\\"\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// mongoose 유효성 검사 오류\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"400\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"json\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"message\"\n        }), \": err.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"message\"\n        }), \" });\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (err.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"UnauthorizedError\\\"\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// jwt 인증 오류\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"401\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"json\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"message\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"잘못된 토큰\\\"\"\n        }), \" });\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 기본적으로 500 서버 오류\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"500\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"json\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"message\"\n        }), \": err.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"message\"\n        }), \" });\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = errorHandler;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"helpers/jwt.js:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" expressJwt = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"express-jwt\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" config = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../config.json\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" db = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../helpers/db\\\"\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"jwt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"roles = []\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// roles 매개변수는 단일 역할 문자열 (예: Role.User 또는 'User')이거나 역할 배열 ([Role.Admin, Role.User] 또는 ['Admin', 'User'])일 수 있습니다.\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" roles === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"string\\\"\"\n        }), \") {\\n    roles = [roles];\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(roles);\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" secret = config.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"secret\"\n        }), \";\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" [\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// JWT 토큰을 인증하고 사용자를 요청 객체(req.user)에 추가합니다.\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expressJwt\"\n        }), \"({ secret, \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"algorithms\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"HS256\\\"\"\n        }), \"] }),\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 역할에 따라 권한 부여\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (req, res, next) => {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" user = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" db.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"User\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"findById\"\n        }), \"(req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"user\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sub\"\n        }), \");\\n\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!user || (roles.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \" && !roles.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"includes\"\n        }), \"(user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"role\"\n        }), \"))) {\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 역할이 허가되지 않았습니다.\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"401\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"json\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"message\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Only Admin is Authorized!\\\"\"\n        }), \" });\\n      }\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 인증 및 권한 부여 성공\"\n        }), \"\\n      req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"user\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"role\"\n        }), \" = user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"role\"\n        }), \";\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"next\"\n        }), \"();\\n    },\\n  ];\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = jwt;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"helpers/role.js:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Admin\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Admin\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"User\\\"\"\n        }), \",\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"models/user.js:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" mongoose = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"mongoose\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Schema\"\n        }), \" = mongoose.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Schema\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" schema = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Schema\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"unique\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"required\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" },\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"firstName\"\n        }), \": { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"required\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" },\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"lastName\"\n        }), \": { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"required\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" },\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"password\"\n        }), \": { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"required\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" },\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"role\"\n        }), \": { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"required\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" },\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"createdDate\"\n        }), \": { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Date\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"default\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Date\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"now\"\n        }), \" },\\n});\\n\\nschema.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"toJSON\\\"\"\n        }), \", {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"virtuals\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"versionKey\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"doc, ret\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"delete\"\n        }), \" ret.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"_id\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"delete\"\n        }), \" ret.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"password\"\n        }), \";\\n  },\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = mongoose.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"model\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"User\\\"\"\n        }), \", schema);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"routes/index.js:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" express = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'express'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" router = express.\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Router\"\n        }), \"();\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* GET home page. */\"\n        }), \"\\nrouter.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"req, res, next\"\n        }), \") {\\n  res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"render\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'index'\"\n        }), \", { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"title\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Express'\"\n        }), \" });\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = router;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"routes/user.controllers.js:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n```js\\nconst express = require(\\\"express\\\");\\nconst router = express.Router();\\nconst userServices = require(\\\"../services/user.services\\\");\\nconst Role = require(\\\"../helpers/role\\\");\\nconst jwt = require(\\\"../helpers/jwt\\\");\\n\\n// 라우트\\nrouter.post(\\\"/authenticate\\\", authenticate);\\nrouter.post(\\\"/register\\\", register);\\nrouter.get(\\\"/\\\", jwt(Role.Admin), getAll);\\nrouter.get(\\\"/current\\\", jwt(), getCurrent);\\nrouter.get(\\\"/:id\\\", getById);\\nrouter.put(\\\"/:id\\\", update);\\nrouter.delete(\\\"/:id\\\", _delete);\\n\\nmodule.exports = router;\\n\\n// 라우트 함수\\nfunction authenticate(req, res, next) {\\n  userServices\\n    .authenticate(req.body)\\n    .then((user) => {\\n      console.log(user);\\n      user\\n        ? res.json({ user: user, message: \\\"사용자가 로그인되었습니다.\\\" })\\n        : res\\n            .status(400)\\n            .json({ message: \\\"사용자 이름 또는 비밀번호가 잘못되었습니다.\\\" });\\n    })\\n    .catch((error) => next(error));\\n}\\n\\nfunction register(req, res, next) {\\n  userServices\\n    .create(req.body)\\n    .then((user) =>\\n      res.json({\\n        user: user,\\n        message: `이메일 ${req.body.email}으로 성공적으로 등록되었습니다.`,\\n      })\\n    )\\n    .catch((error) => next(error));\\n}\\n\\nfunction getAll(req, res, next) {\\n  const currentUser = req.user;\\n\\n  if (currentUser.role !== Role.Admin) {\\n    return res.status(401).json({ message: \\\"권한이 없습니다!\\\" });\\n  }\\n  userServices\\n    .getAll()\\n    .then((users) => res.json(users))\\n    .catch((err) => next(err));\\n}\\n\\nfunction getCurrent(req, res, next) {\\n  console.log(req);\\n  userServices\\n    .getById(req.user.sub)\\n    .then((user) => (user ? res.json(user) : res.status(404)))\\n    .catch((error) => next(error));\\n}\\n\\nfunction getById(req, res, next) {\\n  userServices\\n    .getById(req.params.id)\\n    .then((user) => {\\n      if (!user) {\\n        res.status(404).json({ message: \\\"사용자를 찾을 수 없습니다!\\\" });\\n        next();\\n      }\\n      return res.json(user);\\n    })\\n    .catch((error) => next(error));\\n}\\n\\nfunction update(req, res, next) {\\n  userServices\\n    .update(req.params.id, req.body)\\n    .then(() =>\\n      res.json({\\n        message: `ID가 ${req.params.id}인 사용자가 성공적으로 업데이트되었습니다.`,\\n      })\\n    )\\n    .catch((error) => next(error));\\n}\\n\\nfunction _delete(req, res, next) {\\n  userServices\\n    .delete(req.params.id)\\n    .then(() =>\\n      res.json({\\n        message: `ID가 ${req.params.id}인 사용자가 성공적으로 삭제되었습니다.`,\\n      })\\n    )\\n    .catch((error) => next(error));\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"services/user.services.js:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" jwt = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"jsonwebtoken\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" bcrypt = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"bcryptjs\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" config = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../config.json\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" db = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../helpers/db\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \" = db.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"User\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 자격 증명을 인증하는 함수\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"authenticate\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ email, password }\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이메일로 사용자 찾기\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" user = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"findOne\"\n        }), \"({ email });\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"사용자 모델\\\"\"\n        }), \", user);\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자가 있고 암호가 일치하면 토큰 생성\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (user && bcrypt.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"compareSync\"\n        }), \"(password, user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"password\"\n        }), \")) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" token = jwt.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sign\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"sub\"\n        }), \": user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"role\"\n        }), \": user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"role\"\n        }), \" }, config.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"secret\"\n        }), \", {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"expiresIn\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"7d\\\"\"\n        }), \",\\n    });\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" { ...user.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toJSON\"\n        }), \"(), token };\\n  }\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 모든 사용자 가져오기\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getAll\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"();\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// ID를 사용하여 사용자 가져오기\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"id\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ID를 찾는 중: \\\"\"\n        }), \", id);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"findById\"\n        }), \"(id);\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 추가\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"userParam\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자가 있는지 확인\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" user = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"findOne\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": userParam.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"email\"\n        }), \" });\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 유효성 검사\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (user) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"throw\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`동일한 이메일이 이미 존재합니다: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${userParam.email}\"\n          }), \"`\"]\n        }), \";\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 객체 생성\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" newUser = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \"(userParam);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (userParam.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"password\"\n        }), \") {\\n    newUser.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"password\"\n        }), \" = bcrypt.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hashSync\"\n        }), \"(userParam.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"password\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \");\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" newUser.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"save\"\n        }), \"();\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 업데이트\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"update\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"id, userParam\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" user = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"findById\"\n        }), \"(id);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!user) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"throw\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"사용자를 찾을 수 없습니다.\\\"\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\\n    user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"email\"\n        }), \" !== userParam.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"email\"\n        }), \" &&\\n    (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"findOne\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": userParam.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"email\"\n        }), \" }))\\n  ) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"throw\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`동일한 이메일을 가진 사용자가 이미 존재합니다: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${userParam.email}\"\n          }), \"`\"]\n        }), \";\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (userParam.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"password\"\n        }), \") {\\n    userParam.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"password\"\n        }), \" = bcrypt.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hashSync\"\n        }), \"(userParam.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"password\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \");\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 객체 복사\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Object\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"assign\"\n        }), \"(user, userParam);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" user.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"save\"\n        }), \"();\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_delete\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"id\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"findByIdAndRemove\"\n        }), \"(id);\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = {\\n  authenticate,\\n  getAll,\\n  getById,\\n  create,\\n  update,\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"delete\"\n        }), \": _delete,\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"레이아웃 확장\\n\\n콘텐츠 블록\\n  h1= 메시지\\n  h2= 오류 상태\\n  pre #{error.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"stack\"\n        }), \"}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"views/index.jade:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"레이아웃 확장\\n\\n콘텐츠 블록\\n  h1= 제목\\n  p 환영합니다 #{title}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"views/layout.jade:```\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-json\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"database\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"host\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"localhost\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"username\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"admin\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"password\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"password123\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"port\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3306\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"server\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"port\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5000\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"corsOptions\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"origin\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"*\\\"\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-json\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"connectionString\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"//당신의 MONGODB URI\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"secret\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"//JWT 토큰을 위한 원하는 시크릿 키\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자 등록\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_1.png\",\n        alt: \"사진\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자 인증\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_2.png\",\n        alt: \"Current User\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_3.png\",\n        alt: \"Unauthorize\"\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinNodejs_4.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"7. 모범 사례 및 보안 주의 사항\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Node.js 애플리케이션에서 RBAC를 구현할 때 다음 모범 사례와 보안 주의 사항을 고려해보세요:\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"데이터 유효성 검사\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자 입력을 항상 유효성 검사하여 SQL 인젝션, XSS 공격 등과 같은 보안 취약점을 방지하세요. 데이터 무결성을 보장하기 위해 유효성 검사 라이브러리나 프레임워크를 사용하세요.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"감사 로그\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자 활동과 액세스 시도를 추적하기 위해 감사 로그를 구현하세요. 이는 보안 위반이나 무단 활동을 식별하는 데 중요할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"세분화된 권한\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자가 자신의 업무를 수행하는 데 필요한 최소한의 권한을 보장하기 위해 세밀한 권한을 정의하십시오. 역할에 권한을 너무 많이 할당하지 않도록 주의하십시오.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"정기적인 업데이트와 모니터링\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"RBAC 시스템을 최신 상태로 유지하십시오. 응용 프로그램이 발전함에 따라 역할과 권한을 조정해야 할 수 있습니다. 보안을 유지하기 위해 정기적으로 RBAC 정책을 모니터링하고 검토하십시오.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"저와 소통하기:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Linkedin: \", _jsx(_components.a, {\n        href: \"https://www.linkedin.com/in/suneel-kumar-52164625a/\",\n        children: \"https://www.linkedin.com/in/suneel-kumar-52164625a/\"\n      })]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"8. 결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 포괄적인 안내서에서는 Role-Based Access Control (RBAC)의 개념을 탐구하고 Node.js 애플리케이션에 구현하는 방법을 시연했습니다. 역할 및 권한 정의, 사용자 인증, 역할 할당, 역할 기반 미들웨어, 그리고 RBAC가 작동하는 방식을 보여 주기 위해 샘플 작업 관리 시스템을 만들었습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"RBAC를 구현함으로써 Node.js 애플리케이션의 보안을 크게 향상시키고 사용자 액세스를 효과적으로 제어하며 보안 위협을 줄일 수 있습니다. 또한, 최적의 방법을 따르고 보안 고려 사항을 고려함으로써 RBAC 시스템의 견고성을 보장할 수 있습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}