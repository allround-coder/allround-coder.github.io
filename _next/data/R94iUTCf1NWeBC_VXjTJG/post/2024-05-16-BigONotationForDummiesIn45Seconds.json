{"pageProps":{"post":{"title":"45초 안에 이해하는 더미를 위한 빅 오 표기법","description":"","date":"2024-05-16 03:27","slug":"2024-05-16-BigONotationForDummiesIn45Seconds","content":"\n\n![image](/assets/img/2024-05-16-BigONotationForDummiesIn45Seconds_0.png)\n\n소프트웨어 엔지니어링 직무를 위한 기술 코딩 면접에 도전한다면 이것을 알아야 합니다.\n\n면접관이 당신에게 문제를 해결하는 코드를 작성하라고 요청할 때, 당신이 솔루션을 코딩한 후, 그는 다음과 같은 질문을 할 수 있습니다:\n\n- 당신의 솔루션의 시간 복잡도는 무엇인가요?\n- 당신의 솔루션은 얼마나 효율적인가요 (또는 시간 효율적인가요)?\n- 당신의 솔루션의 Big O는 무엇인가요?\n\n\n\n주의 — 이 모든 질문들은 대략 동일한 내용을 다룹니다.\n\n## 시간 복잡도/시간 효율성의 의미\n\n일반적으로 알고리즘/함수의 시간 복잡도 또는 시간 효율성은 실행 속도를 나타냅니다.\n\n더 구체적으로 말하면, 주어진 입력 크기 N에 대해, 시간 복잡도/시간 효율성은 알고리즘/함수가 실행되기 위해 필요한 일반적인 반복 횟수를 나타냅니다.\n\n\n\n# 빅 오 표기법은 일반적으로 시간 복잡성/시간 효율성을 측정하는 데 사용됩니다.\n\n참고 — 우리는 반복의 정확한 횟수에 대해 정확히 신경 쓰지 않습니다. 우리가 신경 쓰는 것은 입력 N이 커질수록 일반적인 반복 횟수가 얼마나 증가하는지입니다.\n\n가장 일반적으로 사용되는 빅 오 시간 복잡성은 다음과 같습니다:\n\n- O(1) → 상수 시간 (가장 시간 효율적)\n- O(log n) → 로그 시간\n- O(n) → 선형 시간\n- O(n²) → 다항식 시간\n- O(2^n) → 지수 시간\n- O(n!) → 팩토리얼 시간 (가장 시간 효율적이지 않음)\n\n\n\n# 이들이 의미하는 것 (일반적으로)\n\nO(1) 또는 상수 시간 (최상의 효율성)\n\n- N이 무엇이든 간에 알고리즘은 항상 1단계를 거침\n- N이 1이면 알고리즘은 1단계를 밟음\n- N이 10이면 알고리즘은 여전히 1단계를 밟음\n- N이 1000이면 알고리즘은 여전히 1단계를 밟음\n- 일반적인 사용 사례 — 사전에서 값에 액세스, 단일 작업\n\nO(log n) 또는 로그 시간 (로그의 밑을 2로 가정)\n\n\n\n- 반복 횟수는 N에 대해 로그함수적으로 증가합니다.\n- N이 4일 때, 우리 알고리즘은 2단계가 걸립니다.\n- N이 8일 때, 우리 알고리즘은 3단계가 걸립니다.\n- N이 16일 때, 우리 알고리즘은 4단계가 걸립니다.\n- N이 32일 때, 우리 알고리즘은 5단계가 걸립니다.\n- 일반적인 사용 사례 — 이진 탐색\n\nO(n) 또는 선형 시간\n\n- 반복 횟수는 N에 대해 선형적으로 증가합니다.\n- N이 4일 때, 우리 알고리즘은 4단계가 걸립니다.\n- N이 8일 때, 우리 알고리즘은 8단계가 걸립니다.\n- N이 32일 때, 우리 알고리즘은 32단계가 걸립니다.\n- 일반적인 사용 사례 — for 루프를 이용해 리스트를 반복하는 경우\n\nO(n²) 또는 다항 시간\n\n\n\n- 반복 횟수는 대략적으로 n²이 됩니다.\n- N이 4일 경우, 우리 알고리즘은 16단계가 걸립니다.\n- N이 8일 경우, 우리 알고리즘은 64단계가 걸립니다.\n- N이 32일 경우, 우리 알고리즘은 1024단계가 걸립니다.\n- 일반적인 사용 사례 — 중첩된 for 루프\n\nO(2^n) 또는 지수 시간 (이 효율성이 끔찍해요)\n\n- 반복 횟수는 N과 지수적으로 증가합니다.\n- N이 4일 경우, 우리 알고리즘은 2⁴ 단계 걸립니다 (그건 16이에요).\n- N이 8일 경우, 우리 알고리즘은 2⁸ 단계 걸립니다 (그건 256이에요).\n- N이 32일 경우, 우리 알고리즘은 2³² 단계 걸립니다 (그건 4294967296이에요).\n- 알고리즘이 지수 시간이 걸린다면, 효율적인 방법을 찾아보아야 할 수도 있어요.\n\nO(n!) 또는 계승 시간 (절대적으로 효율성이 끔찍해요)\n\n\n\n- 반복 횟수는 N에 팩토리얼적으로 증가합니다.\n- 만약 N이 4이면, 우리의 알고리즘은 4! 단계를 거칩니다 (24 단계)\n- 만약 N이 8이면, 우리의 알고리즘은 8! 단계를 거칩니다 (40320 단계)\n- 만약 N이 32이면, 우리의 알고리즘은 32! 단계를 거칩니다 (아주 많은 단계)\n- 당신의 알고리즘은 결코 팩토리얼 효율성을 가져서는 안 됩니다.\n\n# 참고 - 여기서는 상수를 무시합니다\n\n우리는 일반적인 반복 횟수에만 관심이 있기 때문에, 상수에 대해서는 그다지 신경쓰지 않습니다. 그런데 이것들이 전체적인 흐름에 큰 영향을 미치지 않기 때문입니다.\n\n- O(1)은 O(2)나 O(20)과 동일합니다 — 우리는 이들 모두를 나타내기 위해 O(1)을 사용합니다\n- O(n)은 O(2n)이나 O(3n)과 동일합니다 — 우리는 이들 모두를 나타내기 위해 O(n)을 사용합니다\n- O(n²)은 O(n³)이나 O(n⁶)과 동일합니다 — 우리는 이들 모두를 나타내기 위해 O(n²)을 사용합니다\n- O(2^n)은 O(3^n)이나 O(7^n)과 동일합니다 — 패턴을 알 수 있겠죠?\n\n\n\n# 빠른 예시\n\n```python\ndef test(n):\n    return n + 1\n\n# 전체 시간 복잡도: O(1)\n```\n\n^ n이 얼마나 커도, 우리 함수는 단지 한 단계를 수행합니다. 즉, 이 함수는 O(1)의 시간 복잡도를 갖습니다.\n\n# 또 다른 예시\n\n\n\n```python\ndef test(n):\n    for i in range(n):    # O(n)\n        print(i)   # O(1)\n\n# overall time complexity: O(n)\n```\n\n여기서는 range(n)을 통해 반복하는 for 루프를 사용하므로 이 for 루프 자체의 시간 복잡도는 O(n)입니다.\n\nprint(i) 문 자체는 O(1)입니다. 따라서 O(n)에 O(1)을 곱하더라도 여전히 O(n)이 되며, 전체 시간 복잡도는 O(n)입니다.\n\n# 또 다른 예시\n\n\n\n\n```js\ndef test(n):\n    for i in range(n):      # O(n)\n        for j in range(n):  # O(n)\n            print(i, j)     # O(1)\n\n# overall time complexity: O(n^2)\n```\n\n^ 여기에 중첩된 for 루프가 있습니다. 하나의 for 루프 안에 다른 for 루프가 있습니다.\n\nO(n)이 O(n)에 곱해지면 O(n²)가 되며, 이는 우리 알고리즘의 시간 복잡성을 다항 시간인 O(n²)로 만듭니다.\n\n# 결론\n\n\n\n이해하기 쉽고 명확했길 바랍니다\n\n## 제작자로서 저를 지원하고 싶다면\n\n- 이 이야기에 대해 50번 박수를 치세요.\n- 생각을 나눠주세요.\n- 이야기에서 가장 좋아하는 부분을 강조해주세요.\n\n감사합니다! 이 작은 동작들이 큰 도움이 되고, 정말 감사합니다!\n\n\n\nYouTube: [https://www.youtube.com/@zlliu246](https://www.youtube.com/@zlliu246)\n\nLinkedIn: [https://www.linkedin.com/in/zlliu/](https://www.linkedin.com/in/zlliu/)\n\nMy Ebooks: [https://zlliu.co/ebooks](https://zlliu.co/ebooks)","ogImage":{"url":"/assets/img/2024-05-16-BigONotationForDummiesIn45Seconds_0.png"},"coverImage":"/assets/img/2024-05-16-BigONotationForDummiesIn45Seconds_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-BigONotationForDummiesIn45Seconds_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"소프트웨어 엔지니어링 직무를 위한 기술 코딩 면접에 도전한다면 이것을 알아야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"면접관이 당신에게 문제를 해결하는 코드를 작성하라고 요청할 때, 당신이 솔루션을 코딩한 후, 그는 다음과 같은 질문을 할 수 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"당신의 솔루션의 시간 복잡도는 무엇인가요?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"당신의 솔루션은 얼마나 효율적인가요 (또는 시간 효율적인가요)?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"당신의 솔루션의 Big O는 무엇인가요?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"주의 — 이 모든 질문들은 대략 동일한 내용을 다룹니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"시간 복잡도/시간 효율성의 의미\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"일반적으로 알고리즘/함수의 시간 복잡도 또는 시간 효율성은 실행 속도를 나타냅니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 구체적으로 말하면, 주어진 입력 크기 N에 대해, 시간 복잡도/시간 효율성은 알고리즘/함수가 실행되기 위해 필요한 일반적인 반복 횟수를 나타냅니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"빅 오 표기법은 일반적으로 시간 복잡성/시간 효율성을 측정하는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참고 — 우리는 반복의 정확한 횟수에 대해 정확히 신경 쓰지 않습니다. 우리가 신경 쓰는 것은 입력 N이 커질수록 일반적인 반복 횟수가 얼마나 증가하는지입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가장 일반적으로 사용되는 빅 오 시간 복잡성은 다음과 같습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"O(1) → 상수 시간 (가장 시간 효율적)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"O(log n) → 로그 시간\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"O(n) → 선형 시간\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"O(n²) → 다항식 시간\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"O(2^n) → 지수 시간\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"O(n!) → 팩토리얼 시간 (가장 시간 효율적이지 않음)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"이들이 의미하는 것 (일반적으로)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"O(1) 또는 상수 시간 (최상의 효율성)\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"N이 무엇이든 간에 알고리즘은 항상 1단계를 거침\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 1이면 알고리즘은 1단계를 밟음\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 10이면 알고리즘은 여전히 1단계를 밟음\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 1000이면 알고리즘은 여전히 1단계를 밟음\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"일반적인 사용 사례 — 사전에서 값에 액세스, 단일 작업\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"O(log n) 또는 로그 시간 (로그의 밑을 2로 가정)\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"반복 횟수는 N에 대해 로그함수적으로 증가합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 4일 때, 우리 알고리즘은 2단계가 걸립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 8일 때, 우리 알고리즘은 3단계가 걸립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 16일 때, 우리 알고리즘은 4단계가 걸립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 32일 때, 우리 알고리즘은 5단계가 걸립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"일반적인 사용 사례 — 이진 탐색\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"O(n) 또는 선형 시간\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"반복 횟수는 N에 대해 선형적으로 증가합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 4일 때, 우리 알고리즘은 4단계가 걸립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 8일 때, 우리 알고리즘은 8단계가 걸립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 32일 때, 우리 알고리즘은 32단계가 걸립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"일반적인 사용 사례 — for 루프를 이용해 리스트를 반복하는 경우\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"O(n²) 또는 다항 시간\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"반복 횟수는 대략적으로 n²이 됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 4일 경우, 우리 알고리즘은 16단계가 걸립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 8일 경우, 우리 알고리즘은 64단계가 걸립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 32일 경우, 우리 알고리즘은 1024단계가 걸립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"일반적인 사용 사례 — 중첩된 for 루프\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"O(2^n) 또는 지수 시간 (이 효율성이 끔찍해요)\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"반복 횟수는 N과 지수적으로 증가합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 4일 경우, 우리 알고리즘은 2⁴ 단계 걸립니다 (그건 16이에요).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 8일 경우, 우리 알고리즘은 2⁸ 단계 걸립니다 (그건 256이에요).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"N이 32일 경우, 우리 알고리즘은 2³² 단계 걸립니다 (그건 4294967296이에요).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"알고리즘이 지수 시간이 걸린다면, 효율적인 방법을 찾아보아야 할 수도 있어요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"O(n!) 또는 계승 시간 (절대적으로 효율성이 끔찍해요)\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"반복 횟수는 N에 팩토리얼적으로 증가합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"만약 N이 4이면, 우리의 알고리즘은 4! 단계를 거칩니다 (24 단계)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"만약 N이 8이면, 우리의 알고리즘은 8! 단계를 거칩니다 (40320 단계)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"만약 N이 32이면, 우리의 알고리즘은 32! 단계를 거칩니다 (아주 많은 단계)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"당신의 알고리즘은 결코 팩토리얼 효율성을 가져서는 안 됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"참고 - 여기서는 상수를 무시합니다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 일반적인 반복 횟수에만 관심이 있기 때문에, 상수에 대해서는 그다지 신경쓰지 않습니다. 그런데 이것들이 전체적인 흐름에 큰 영향을 미치지 않기 때문입니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"O(1)은 O(2)나 O(20)과 동일합니다 — 우리는 이들 모두를 나타내기 위해 O(1)을 사용합니다\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"O(n)은 O(2n)이나 O(3n)과 동일합니다 — 우리는 이들 모두를 나타내기 위해 O(n)을 사용합니다\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"O(n²)은 O(n³)이나 O(n⁶)과 동일합니다 — 우리는 이들 모두를 나타내기 위해 O(n²)을 사용합니다\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"O(2^n)은 O(3^n)이나 O(7^n)과 동일합니다 — 패턴을 알 수 있겠죠?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"빠른 예시\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"test\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"n\"\n        }), \"):\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" n + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 전체 시간 복잡도: O(1)\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"^ n이 얼마나 커도, 우리 함수는 단지 한 단계를 수행합니다. 즉, 이 함수는 O(1)의 시간 복잡도를 갖습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"또 다른 예시\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"test\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"n\"\n        }), \"):\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" i \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"range\"\n        }), \"(n):    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# O(n)\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(i)   \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# O(1)\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# overall time complexity: O(n)\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서는 range(n)을 통해 반복하는 for 루프를 사용하므로 이 for 루프 자체의 시간 복잡도는 O(n)입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"print(i) 문 자체는 O(1)입니다. 따라서 O(n)에 O(1)을 곱하더라도 여전히 O(n)이 되며, 전체 시간 복잡도는 O(n)입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"또 다른 예시\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"def \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"test\"\n        }), \"(n):\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" i \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"range\"\n        }), \"(n):      # \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"O\"\n        }), \"(n)\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" j \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"range\"\n        }), \"(n):  # \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"O\"\n        }), \"(n)\\n            \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(i, j)     # \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"O\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \")\\n\\n# overall time \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"complexity\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"O\"\n        }), \"(n^\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"^ 여기에 중첩된 for 루프가 있습니다. 하나의 for 루프 안에 다른 for 루프가 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"O(n)이 O(n)에 곱해지면 O(n²)가 되며, 이는 우리 알고리즘의 시간 복잡성을 다항 시간인 O(n²)로 만듭니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이해하기 쉽고 명확했길 바랍니다\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"제작자로서 저를 지원하고 싶다면\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이 이야기에 대해 50번 박수를 치세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"생각을 나눠주세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이야기에서 가장 좋아하는 부분을 강조해주세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"감사합니다! 이 작은 동작들이 큰 도움이 되고, 정말 감사합니다!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"YouTube: \", _jsx(_components.a, {\n        href: \"https://www.youtube.com/@zlliu246\",\n        children: \"https://www.youtube.com/@zlliu246\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"LinkedIn: \", _jsx(_components.a, {\n        href: \"https://www.linkedin.com/in/zlliu/\",\n        children: \"https://www.linkedin.com/in/zlliu/\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"My Ebooks: \", _jsx(_components.a, {\n        href: \"https://zlliu.co/ebooks\",\n        children: \"https://zlliu.co/ebooks\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}