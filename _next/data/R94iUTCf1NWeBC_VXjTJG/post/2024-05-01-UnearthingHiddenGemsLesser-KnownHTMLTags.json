{"pageProps":{"post":{"title":"알아두면 쓸모있는 잘 알려지지 않은 HTML 태그들","description":"","date":"2024-05-01 23:47","slug":"2024-05-01-UnearthingHiddenGemsLesser-KnownHTMLTags","content":"\n\n![UnearthingHiddenGemsLesser-KnownHTMLTags](/assets/img/2024-05-01-UnearthingHiddenGemsLesser-KnownHTMLTags_0.png)\n\n웹 개발의 광활한 풍경 속에서 특정 HTML 태그들이 빛나며 주목을 받고 있습니다. 우리는 모두 `div`, `p`, `a`와 같은 태그를 알고 있지만, 마크업의 미천한 영웅들에 대해 얼마나 알고 계신가요? 함께 HTML의 심연을 탐험하며 주목할 만한 몇 가지 알려지지 않은 보석을 발굴해봅시다.\n\n- `details`와 `summary`: 확장 가능한 콘텐츠\n\n웹페이지에서 보충 정보를 숨겨야 할 때 토글이나 버튼으로 페이지를 혼동시키기만 했던 적이 있나요? `details`와 `summary`가 나타나는 순간입니다. 이러한 태그를 사용하면 쉽게 접어지는 콘텐츠 섹션을 만들 수 있습니다. 콘텐츠를 `details`로 감싸고 `summary` 내에서 간단한 요약을 제공하여 사용자가 한 번의 클릭으로 추가 세부 정보를 공개할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<details>\n  <summary>더 많은 정보를 확인하려면 클릭하세요</summary>\n  <p>여기에 추가 정보가 들어갑니다...</p>\n</details>\n```\n\n2. `time`: 의미론적 시간 표현\n\n날짜와 시간을 수동으로 형식화하는 것은 잊어버리세요. `time`은 대신 그 일을 해 줄 겁니다. 종종 간과되는 이 태그는 날짜와 시간을 의미론적으로 표현하는 방법을 제공하여 접근성과 검색 엔진 최적화를 향상시킵니다. 최대 호환성을 위해 ISO 8601 형식으로 datetime 속성을 지정하세요.\n\n```js\n<p>게시일 <time datetime=\"2024-04-29T08:00:00Z\">2024년 4월 29일</time></p>\n```\n\n<div class=\"content-ad\"></div>\n\n3. `cite`: 간편한 인용\n\n오남용 시대에 올바른 인용은 이제보다 중요합니다. 그러나 많은 사람들이 평범한 텍스트나 이탤릭체 대신 `cite` 태그를 무시합니다. 이 의미 있는 태그로 인용을 더욱 강조하여 작품의 제목이나 저자 이름을 나타내세요.\n\n```js\n<blockquote>\n  <p>\"지식은 힘입니다.\" <cite>프란시스 베이컨</cite></p>\n</blockquote>\n```\n\n4. `mark`: 텍스트 동적 강조\n\n<div class=\"content-ad\"></div>\n\n텍스트를 동적으로 강조하는 것은 적절한 도구 없이는 번거로울 수 있습니다. `mark`가 등장했습니다. 텍스트 일부를 `mark`로 감싸면 강조 효과가 적용되어 검색 결과나 중요한 용어를 강조하는 데 안성맞춤입니다.\n\n```js\n<p>검색 결과: Lorem <mark>ipsum</mark> dolor sit amet...</p>\n```\n\n5. `wbr`: 단어 나누기 기회\n\n복잡한 단어 구조가 있는 언어나 긴 URL에서 올바른 줄 바꿈을 보장하기 위해 `wbr`이 등장합니다. 이 태그는 브라우저에 어디에 줄 바꿈을 삽입해야 하는지 힌트를 줌으로써 가독성을 보장하면서 콘텐츠 무결성을 보존합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<p>중단이 필요한 긴단어<wbr>중단이 필요한 긴단어</p>\n```\n\n6. `fieldset`와 `legend`: 양식 요소 그룹화\n\n사용자 경험을 위해서 양식을 적절하게 구성하는 것이 중요합니다. 그런데 `fieldset`와 `legend`는 종종 눈에 띄지 않는다. `fieldset`를 사용하여 관련된 양식 요소를 함께 그룹화하고 `legend`를 사용하여 해당 그룹에 캡션 또는 제목을 제공하세요. 이렇게 하면 양식이 더 구조화되고 접근성이 향상됩니다.\n\n```js\n<fieldset>\n  <legend>연락 정보</legend>\n  <!-- 여기에 양식 요소를 넣으세요 -->\n</fieldset>\n```\n\n<div class=\"content-ad\"></div>\n\n7. `dialog`: 모달 대화 상자\n\n모달 대화 상자를 만드는 것은 예전에 JavaScript와 CSS를 사용하여 지루한 작업이었습니다. 하지만 걱정하지 마세요, `dialog`가 나타나서 이 프로세스를 간단하게 해 줍니다. 이 태그는 HTML 문서 내에 대화 상자나 창을 정의하여 팝업 알림, 경고 또는 상호 작용 프롬프트를 쉽게 만들 수 있게 합니다.\n\n```js\n<dialog open>\n  <p>이것은 모달 대화 상자입니다!</p>\n  <button onclick=\"this.parentNode.close()\">닫기</button>\n</dialog>\n```\n\n8. `meter`: 스칼라 측정값 시각화\n\n<div class=\"content-ad\"></div>\n\n특정 범위 내에서 측정 값을 표시해야 한다면 `meter`태그를 사용해보세요. 이 태그는 디스크 사용량, 다운로드 진행률 또는 주관적 등급과 같은 알려진 범위 내의 스칼라 측정 값을 나타냅니다. 필요에 맞게 값을, 최소값(min), 최대값(max) 속성을 사용자 정의할 수 있습니다.\n\n```js\n<meter value=\"0.6\" min=\"0\" max=\"1\">60%</meter>\n```\n\n9. `progress`: 작업 진행률 추적\n\n작업 진행률을 추적하는 것은 웹 응용프로그램에서 흔한 요구 사항입니다. `progress`태그를 사용하면 쉽게 할 수 있습니다. 이 태그를 사용하여 파일 업로드, 양식 제출 또는 로딩 화면과 같은 작업의 완료 진행률을 나타낼 수 있습니다. 현재 진행 상황을 나타내기 위해 값(value) 속성을 설정하세요.\n\n<div class=\"content-ad\"></div>\n\n\n```js\n<progress value=\"50\" max=\"100\">50%</progress>\n```\n\n10. `samp`: 샘플 출력\n\n프로그램이나 코드 스니펫의 샘플 출력을 표시할 때 `samp` 태그를 사용하면 의미론적으로 더 좋습니다. 이 태그는 컴퓨터 프로그램에서의 샘플 출력을 나타내어 사용자 입력이나 프로그램 코드와 구분짓습니다.\n\n```js\n<p>출력: <samp>Hello, World!</samp></p>\n```\n\n<div class=\"content-ad\"></div>\n\n11. `abbr`: 약어 및 두문자어\n\n`abbr`를 사용하면 접근성과 명확성을 쉽게 향상시킬 수 있어요. 이 태그를 사용하여 약어와 두문자어를 표시하고, 보조 기술에서 접근 가능한 확장 또는 설명을 제공하세요.\n\n```js\n<p><abbr title=\"Hypertext Markup Language\">HTML</abbr>은 멋져요!</p>\n```\n\n12. `slot`: 콘텐츠 분배\n\n<div class=\"content-ad\"></div>\n\n웹 컴포넌트의 등장으로 `slot`이 점점 더 중요해지고 있어요. 이 태그는 웹 컴포넌트의 템플릿에 동적 콘텐츠를 삽입할 수 있는 자리 표시자를 정의하여 유연한 콘텐츠 배포와 조합을 가능케 해줘요.\n\n```js\n<my-custom-element>\n  <p slot=\"header\">헤더 내용</p>\n  <p slot=\"footer\">푸터 내용</p>\n</my-custom-element>\n```\n\n프로젝트에 종종 간과되는 HTML 태그들을 통합함으로써 기능을 향상시키고 접근성을 개선하며 개발을 더욱 간편하게 할 수 있어요. 기억하세요, HTML의 진정한 힘은 익숙한 태그뿐만 아니라 발견되고 활용되기를 기다리는 숨은 보석들의 가치에 있어요.","ogImage":{"url":"/assets/img/2024-05-01-UnearthingHiddenGemsLesser-KnownHTMLTags_0.png"},"coverImage":"/assets/img/2024-05-01-UnearthingHiddenGemsLesser-KnownHTMLTags_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    span: \"span\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-01-UnearthingHiddenGemsLesser-KnownHTMLTags_0.png\",\n        alt: \"UnearthingHiddenGemsLesser-KnownHTMLTags\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"웹 개발의 광활한 풍경 속에서 특정 HTML 태그들이 빛나며 주목을 받고 있습니다. 우리는 모두 \", _jsx(_components.code, {\n        children: \"div\"\n      }), \", \", _jsx(_components.code, {\n        children: \"p\"\n      }), \", \", _jsx(_components.code, {\n        children: \"a\"\n      }), \"와 같은 태그를 알고 있지만, 마크업의 미천한 영웅들에 대해 얼마나 알고 계신가요? 함께 HTML의 심연을 탐험하며 주목할 만한 몇 가지 알려지지 않은 보석을 발굴해봅시다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"details\"\n        }), \"와 \", _jsx(_components.code, {\n          children: \"summary\"\n        }), \": 확장 가능한 콘텐츠\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"웹페이지에서 보충 정보를 숨겨야 할 때 토글이나 버튼으로 페이지를 혼동시키기만 했던 적이 있나요? \", _jsx(_components.code, {\n        children: \"details\"\n      }), \"와 \", _jsx(_components.code, {\n        children: \"summary\"\n      }), \"가 나타나는 순간입니다. 이러한 태그를 사용하면 쉽게 접어지는 콘텐츠 섹션을 만들 수 있습니다. 콘텐츠를 \", _jsx(_components.code, {\n        children: \"details\"\n      }), \"로 감싸고 \", _jsx(_components.code, {\n        children: \"summary\"\n      }), \" 내에서 간단한 요약을 제공하여 사용자가 한 번의 클릭으로 추가 세부 정보를 공개할 수 있습니다.\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<details>\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"summary\"\n            }), \">\"]\n          }), \"더 많은 정보를 확인하려면 클릭하세요\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"summary\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"여기에 추가 정보가 들어갑니다...\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n</details>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"time\"\n        }), \": 의미론적 시간 표현\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"날짜와 시간을 수동으로 형식화하는 것은 잊어버리세요. \", _jsx(_components.code, {\n        children: \"time\"\n      }), \"은 대신 그 일을 해 줄 겁니다. 종종 간과되는 이 태그는 날짜와 시간을 의미론적으로 표현하는 방법을 제공하여 접근성과 검색 엔진 최적화를 향상시킵니다. 최대 호환성을 위해 ISO 8601 형식으로 datetime 속성을 지정하세요.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<p>게시일 <time datetime=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"2024-04-29T08:00:00Z\\\"\"\n        }), \">\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2024\"\n        }), \"년 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \"월 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"29\"\n        }), \"일<\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/time></\"\n        }), \"p>\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"cite\"\n        }), \": 간편한 인용\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"오남용 시대에 올바른 인용은 이제보다 중요합니다. 그러나 많은 사람들이 평범한 텍스트나 이탤릭체 대신 \", _jsx(_components.code, {\n        children: \"cite\"\n      }), \" 태그를 무시합니다. 이 의미 있는 태그로 인용을 더욱 강조하여 작품의 제목이나 저자 이름을 나타내세요.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<blockquote>\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"\\\"지식은 힘입니다.\\\" \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"cite\"\n            }), \">\"]\n          }), \"프란시스 베이컨\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"cite\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n</blockquote>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"mark\"\n        }), \": 텍스트 동적 강조\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"텍스트를 동적으로 강조하는 것은 적절한 도구 없이는 번거로울 수 있습니다. \", _jsx(_components.code, {\n        children: \"mark\"\n      }), \"가 등장했습니다. 텍스트 일부를 \", _jsx(_components.code, {\n        children: \"mark\"\n      }), \"로 감싸면 강조 효과가 적용되어 검색 결과나 중요한 용어를 강조하는 데 안성맞춤입니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<p>검색 결과: \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Lorem\"\n        }), \" <mark>ipsum<\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/mark> dolor sit amet...</\"\n        }), \"p>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"5\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"wbr\"\n        }), \": 단어 나누기 기회\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"복잡한 단어 구조가 있는 언어나 긴 URL에서 올바른 줄 바꿈을 보장하기 위해 \", _jsx(_components.code, {\n        children: \"wbr\"\n      }), \"이 등장합니다. 이 태그는 브라우저에 어디에 줄 바꿈을 삽입해야 하는지 힌트를 줌으로써 가독성을 보장하면서 콘텐츠 무결성을 보존합니다.\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"<p>중단이 필요한 긴단어<wbr>중단이 필요한 긴단어</p>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"6\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"fieldset\"\n        }), \"와 \", _jsx(_components.code, {\n          children: \"legend\"\n        }), \": 양식 요소 그룹화\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"사용자 경험을 위해서 양식을 적절하게 구성하는 것이 중요합니다. 그런데 \", _jsx(_components.code, {\n        children: \"fieldset\"\n      }), \"와 \", _jsx(_components.code, {\n        children: \"legend\"\n      }), \"는 종종 눈에 띄지 않는다. \", _jsx(_components.code, {\n        children: \"fieldset\"\n      }), \"를 사용하여 관련된 양식 요소를 함께 그룹화하고 \", _jsx(_components.code, {\n        children: \"legend\"\n      }), \"를 사용하여 해당 그룹에 캡션 또는 제목을 제공하세요. 이렇게 하면 양식이 더 구조화되고 접근성이 향상됩니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<fieldset>\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"legend\"\n            }), \">\"]\n          }), \"연락 정보\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"legend\"\n            }), \">\"]\n          })]\n        }), \"\\n  <!-- 여기에 양식 요소를 넣으세요 -->\\n</fieldset>\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"7\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"dialog\"\n        }), \": 모달 대화 상자\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"모달 대화 상자를 만드는 것은 예전에 JavaScript와 CSS를 사용하여 지루한 작업이었습니다. 하지만 걱정하지 마세요, \", _jsx(_components.code, {\n        children: \"dialog\"\n      }), \"가 나타나서 이 프로세스를 간단하게 해 줍니다. 이 태그는 HTML 문서 내에 대화 상자나 창을 정의하여 팝업 알림, 경고 또는 상호 작용 프롬프트를 쉽게 만들 수 있게 합니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<dialog open>\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"이것은 모달 대화 상자입니다!\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onclick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"this.parentNode.close()\\\"\"\n            }), \">\"]\n          }), \"닫기\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          })]\n        }), \"\\n</dialog>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"8\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"meter\"\n        }), \": 스칼라 측정값 시각화\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"특정 범위 내에서 측정 값을 표시해야 한다면 \", _jsx(_components.code, {\n        children: \"meter\"\n      }), \"태그를 사용해보세요. 이 태그는 디스크 사용량, 다운로드 진행률 또는 주관적 등급과 같은 알려진 범위 내의 스칼라 측정 값을 나타냅니다. 필요에 맞게 값을, 최소값(min), 최대값(max) 속성을 사용자 정의할 수 있습니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<meter value=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"0.6\\\"\"\n        }), \" min=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"0\\\"\"\n        }), \" max=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"1\\\"\"\n        }), \">\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"60\"\n        }), \"%</meter>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"9\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"progress\"\n        }), \": 작업 진행률 추적\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"작업 진행률을 추적하는 것은 웹 응용프로그램에서 흔한 요구 사항입니다. \", _jsx(_components.code, {\n        children: \"progress\"\n      }), \"태그를 사용하면 쉽게 할 수 있습니다. 이 태그를 사용하여 파일 업로드, 양식 제출 또는 로딩 화면과 같은 작업의 완료 진행률을 나타낼 수 있습니다. 현재 진행 상황을 나타내기 위해 값(value) 속성을 설정하세요.\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<progress value=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"50\\\"\"\n        }), \" max=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"100\\\"\"\n        }), \">\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \"%</progress>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"10\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"samp\"\n        }), \": 샘플 출력\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"프로그램이나 코드 스니펫의 샘플 출력을 표시할 때 \", _jsx(_components.code, {\n        children: \"samp\"\n      }), \" 태그를 사용하면 의미론적으로 더 좋습니다. 이 태그는 컴퓨터 프로그램에서의 샘플 출력을 나타내어 사용자 입력이나 프로그램 코드와 구분짓습니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<p>출력: \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"samp\"\n            }), \">\"]\n          }), \"Hello, World!\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"samp\"\n            }), \">\"]\n          })]\n        }), \"</p>\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"11\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"abbr\"\n        }), \": 약어 및 두문자어\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"abbr\"\n      }), \"를 사용하면 접근성과 명확성을 쉽게 향상시킬 수 있어요. 이 태그를 사용하여 약어와 두문자어를 표시하고, 보조 기술에서 접근 가능한 확장 또는 설명을 제공하세요.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<p>\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"abbr\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"title\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Hypertext Markup Language\\\"\"\n            }), \">\"]\n          }), \"HTML\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"abbr\"\n            }), \">\"]\n          })]\n        }), \"은 멋져요!</p>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"12\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"slot\"\n        }), \": 콘텐츠 분배\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"웹 컴포넌트의 등장으로 \", _jsx(_components.code, {\n        children: \"slot\"\n      }), \"이 점점 더 중요해지고 있어요. 이 태그는 웹 컴포넌트의 템플릿에 동적 콘텐츠를 삽입할 수 있는 자리 표시자를 정의하여 유연한 콘텐츠 배포와 조합을 가능케 해줘요.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<my-custom-element>\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"slot\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"header\\\"\"\n            }), \">\"]\n          }), \"헤더 내용\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"slot\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"footer\\\"\"\n            }), \">\"]\n          }), \"푸터 내용\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n</my-custom-element>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"프로젝트에 종종 간과되는 HTML 태그들을 통합함으로써 기능을 향상시키고 접근성을 개선하며 개발을 더욱 간편하게 할 수 있어요. 기억하세요, HTML의 진정한 힘은 익숙한 태그뿐만 아니라 발견되고 활용되기를 기다리는 숨은 보석들의 가치에 있어요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}