{"pageProps":{"post":{"title":"젯팩 컴포즈로 멋진 3D 파이 차트 만들기","description":"","date":"2024-05-15 15:34","slug":"2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose","content":"\n\n환영합니다 👋\n\n사용자를 감동시킬 멋진 파이 차트를 구현하는 데 5분 이상 투자하지 않고 싶나요?\n\n그렇다면, 당신이 올바른 곳에 왔습니다. 이 기사는 정확히 그것에 대한 것입니다.\n\n계속 보고, 함께 알아봐요! 🚀\n\n\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*TMrRg9yn-gQWNzsPyCCIMg.gif)\n\n# Convex Pie Chart\n\n가장 흥미로운 부분에서 여정을 시작해 보죠: 조각에 적용할 볼록한 효과를 가진 Pie Chart를 만들어 봅시다.\n\n## PieChart 데이터\n\n\n\n\n함수를 조립하기 전에, 원 차트 데이터를 나타내는 데이터 클래스를 만들어야 합니다.\n\n```kotlin\ndata class PieChartData(\n    val label: String,\n    val value: Int,\n    val color: Color\n)\n```\n\n## ConvexStyle\n\n또 다른 지원 데이터 클래스인 ConvexStyle을 만들어야 Convex 효과의 시각적 모습을 표현할 수 있습니다.\n\n\n\n```js\ndata class ConvexStyle(\n    val blur: Dp = 5.dp,\n    val offset: Dp = 4.dp,\n    val glareColor: Color = Color.White.copy(0.48f),\n    val shadowColor: Color = Color.Black.copy(0.48f)\n)\n```\n\n## The composable\n\n이제, 원형 차트를 그릴 composable을 정의할 수 있습니다.\n\n```js\n@Composable\nfun ConvexPieChart(\n    modifier: Modifier,\n    data: List<PieChartData>,\n    startAngle: Float = -90f,\n    rotationsCount: Int = 4,\n    pieSliceStyle: ConvexStyle = ConvexStyle(),\n    animationSpec: AnimationSpec<Float> = \n        tween(1_000, easing = LinearOutSlowInEasing)\n) {\n    /* 구현 */\n}\n```\n\n\n\n## ⚒️ 매개변수 분석\n\n⚡ modifier ➜ 레이아웃에 적용된 수정자입니다.\n\n⚡ data ➜ 파이 차트에 표시할 데이터입니다.\n\n⚡ startAngle ➜ 첫 번째 슬라이스의 초기 각도(도)입니다 (그림 1 👇).\n\n\n\n⚡ rotationsCount ➜ 애니메이션 중 완전한 회전 횟수입니다.\n\n⚡ pieSliceStyle ➜ 파이 조각의 볼록 스타일을 정의합니다.\n\n⚡ animationSpec ➜ 스케일 및 회전에 대한 애니메이션 동작을 지정합니다.\n\n![이미지](/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_0.png)\n\n\n\n## 오목한 아치\n\n파이 차트 자체를 그리기 전에, 우리 아름다운 조각들을 렌더링할 drawConvexArc라는 지원 함수를 만들어보겠습니다.\n\n```js\nfun DrawScope.drawConvexArc(\n    color: Color,\n    startAngle: Float,\n    sweepAngle: Float,\n    useCenter: Boolean,\n    style: ConvexStyle,\n) = canvas에 그리기 { canvas ->\n    val rect = this.size.toRect() // 캔버스의 경계\n    \n    // 그리기용 페인트 개체 정의\n    val paint = Paint()\n    paint.color = color\n    \n    // 캔버스에 기본 아치 그리기\n    canvas.drawArc(rect, startAngle, sweepAngle, useCenter, paint)\n    \n    // 그림자와 번빛 아치를 그리는 함수 정의\n    fun drawShadowArc(offsetX: Float, offsetY: Float, shadowColor: Color) {\n        val shadowPaint = Paint() // 그림자를 그리기 위한 페인트 개체\n\n        shadowPaint.color = shadowColor // 그림자 색상 설정\n\n        // 현재 캔버스 레이어 저장\n        canvas.saveLayer(rect, shadowPaint)\n        \n        // 그림자 아치 그리기\n        canvas.drawArc(rect, startAngle, sweepAngle, useCenter, shadowPaint)\n\n        // 그림자에 블렌딩 모드 및 블러 효과 적용\n        shadowPaint.asFrameworkPaint().apply {\n            xfermode = PorterDuffXfermode(PorterDuff.Mode.DST_OUT)\n            maskFilter = BlurMaskFilter(style.blur.toPx(), BlurMaskFilter.Blur.NORMAL)\n        }\n\n        shadowPaint.color = Color.Black // 클리핑을 위한 색상 설정\n\n        // 캔버스 이동 및 클리핑 아치 그리기\n        canvas.translate(offsetX, offsetY)\n        canvas.drawArc(rect, startAngle, sweepAngle, useCenter, shadowPaint)\n\n        // 캔버스를 원래 상태로 복원\n        canvas.restore()\n    }\n    \n    // 픽셀 단위로 오프셋 계산\n    val offsetPx = style.offset.toPx()\n    \n    // 음수 오프셋으로 그림자 아치 그리기\n    drawShadowArc(-offsetPx, -offsetPx, style.shadowColor)\n    \n    // 양수 오프셋으로 번빛 아치 그리기\n    drawShadowArc(offsetPx, offsetPx, style.glareColor)\n}\n```\n\n더 잘 이해하기 위해 아래 사진을 확인하세요 👇\n\n\n\n\n![BuildinganAmazing3DPieChartwithJetpackCompose_1](/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_1.png)\n\n![BuildinganAmazing3DPieChartwithJetpackCompose_2](/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_2.png)\n\n## Convex pie chart\n\nNow that we have the drawConvexArc function, we can draw the pie chart.\n\n\n\n\n```kotlin\n@Composable\nfun ConvexPieChart(\n    /* 매개변수 */\n) {\n    // 모든 데이터 값의 합\n    val totalValuesSum = remember(data) { data.sumOf(PieChartData::value) } \n\n    // 파이 차트를 확대 및 회전하기 위한 애니메이션 가능한 값\n    val pieChartScale = remember { Animatable(0f) }\n    val pieChartRotation = remember { Animatable(0f) }\n\n    // 파이 차트를 확대하고 회전시키는 애니메이션 시작\n    LaunchedEffect(Unit) {\n        launch {\n            pieChartScale.animateTo(1f, animationSpec)\n        }\n        launch {\n            pieChartRotation.animateTo(360f * rotationsCount, animationSpec)\n        }\n    }\n\n    // 캔버스를 사용하여 파이 차트 그리기\n    Canvas(\n        modifier\n            .aspectRatio(1f) // 캔버스가 정사각형이 되도록 함 (1:1)\n            // 애니메이션 전환 적용\n            .scale(pieChartScale.value)\n            .rotate(pieChartRotation.value)\n    ) {\n        // 시작 각도로 마지막 값 초기화\n        var lastValue = startAngle\n        // 각 데이터 포인트를 반복하고 해당 파이 조각을 그리기\n        data.forEach { chartData ->\n            // 현재 데이터 포인트의 스윕 각도 계산\n            val pieSweepAngle = 360f * (chartData.value.toFloat() / totalValuesSum.toFloat())\n            // 파이 슬라이스를 나타내는 볼록한 아크 그리기\n            drawConvexArc(\n                color = chartData.color,\n                startAngle = lastValue,\n                sweepAngle = pieSweepAngle,\n                style = pieSliceStyle,\n                useCenter = true\n            )\n            // 다음 슬라이스를 위해 마지막 값 업데이트\n            lastValue += pieSweepAngle\n        }\n    }\n}\n```\n\n좋아요, 우리가 이미 이룬 것들이에요 😍\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*-yHzlxmatQyVTdfTV8h5yQ.gif\" />\n\n# 파이 차트 패널\n\n\n\n\n자, 이제 그림자를 활용하여 빛나는 피 크림 차트를 위한 멋진 패널을 만들어 봅시다.\n\n여기서 그림자의 놀이 🤹‍♂️을 하며, innerShadow와 dropShadow 수정자(modifier)를 사용할 것입니다. 자세한 설명은 아래 제가 제공한 관련 기사를 참조하거나 👇 아래 링크에서 InnerShadow Gist, DropShadow Gist의 코드를 확인할 수 있습니다.\n\n```js\n@Composable\nfun PieChartPanel(\n    modifier: Modifier,\n    platesColor: Color = Color(0xFFD5F3FF),\n    platesGap: Dp = 32.dp,\n    style: ConvexStyle = ConvexStyle(\n        blur = 12.dp,\n        offset = 8.dp,\n        glareColor = Color.White.copy(alpha = 0.32f),\n        shadowColor = Color.Black.copy(alpha = 0.32f)\n    ),\n    content: @Composable BoxScope.() -> Unit\n) {\n    Box(\n        // 전체 패널을 나타내는 외부 상자\n        modifier = modifier\n            .aspectRatio(1f) // 가로세로 비율 1:1로 설정\n            // 내부 그림자 적용으로 깊이 효과 생성\n            .innerShadow(CircleShape, style.glareColor, style.blur, -style.offset, -style.offset)\n            .innerShadow(CircleShape, style.shadowColor, style.blur, style.offset, style.offset)\n            // 드롭 그림자 적용으로 고도 효과 생성\n            .dropShadow(CircleShape, style.glareColor, style.blur, -style.offset, -style.offset)\n            .dropShadow(CircleShape, style.shadowColor, style.blur, style.offset, style.offset)\n            // 배경 그리기\n            .background(platesColor, CircleShape),\n        contentAlignment = Alignment.Center\n    ) {\n        Box(\n            // 실제 콘텐츠를 포함하는 내부 상자\n            modifier = Modifier\n                .matchParentSize() // 전체 부모 크기 차지\n                .padding(platesGap) // 플레이트 간의 갭 추가\n                // 드롭 그림자 적용으로 고도 효과 생성\n                .dropShadow(CircleShape, style.glareColor, style.blur, -style.offset, -style.offset)\n                .dropShadow(CircleShape, style.shadowColor, style.blur, style.offset, style.offset)\n                // 배경 그리기\n                .background(platesColor, CircleShape),\n            contentAlignment = Alignment.Center,\n            content = content // 콘텐츠 삽입\n        )\n    }\n}\n```\n\n자, 준비가 다 되었습니다! 패널에 표시할 콘텐츠가 마지막 조각입니다. 패널에 표시할 총 값 텍스트를 조금의 애니메이션과 함께 만들어 봅시다.\n\n\n\n```kotlin\n@Composable\nfun TotalView(\n    total: Int,\n    modifier: Modifier = Modifier,\n    animationSpec: AnimationSpec<Int> = tween(1000, easing = FastOutSlowInEasing)\n) {\n    val totalToDisplay = remember {\n        Animatable(initialValue = 0, typeConverter = Int.VectorConverter)\n    }\n\n    // total 값이 변경될 때 전체 값을 애니메이트하는 effect 시작\n    LaunchedEffect(total) {\n        totalToDisplay.animateTo(total, animationSpec)\n    }\n\n    Column(\n        modifier = modifier,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(\n            text = \"총액\",\n            fontSize = 14.sp,\n            color = Color(0xFF464646)\n        )\n        Text(\n            text = \"${totalToDisplay.value}$\",\n            fontSize = 18.sp,\n            fontWeight = FontWeight.Medium,\n            color = Color(0xFF010203)\n        )\n    }\n}\n```\n\n축하합니다🥳! 성공적으로 구현했습니다👏. 전체 코드 구현은 GitHub Gist에서 확인하실 수 있어요🧑‍💻. 이제 모든 것을 하나로 합쳐서 최종 결과를 살펴봅시다!\n\n## 광고\n\n외국어를 배우고 새로운 어휘에 어려움을 겪고 계신가요? 그렇다면 어플 단어 학습 어플 을 꼭 추천드립니다! 여러분들의 학습 여정을 쉽고 편리하게 만들어 줄 거예요!```\n\n\n\n```\n![Image](/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_3.png)\n\n# Final\n\n이제 시연을 위한 데이터 목록을 만들어 봅시다:\n\n```js\nval pieChartData = remember {\n    listOf(\n        PieChartData(\"항목-1\", 30, Color(0xFFE45C5C)),\n        PieChartData(\"항목-2\", 45, Color(0xFF8FE25C)),\n        PieChartData(\"항목-3\", 25, Color(0xFF4471E4)),\n        PieChartData(\"항목-4\", 20, Color(0xFFEECE55)),\n        PieChartData(\"항목-5\", 40, Color(0xFFBD68CB)),\n    )\n}\n```\n\n\n\n그리고 마지막으로 마무리해봅시다 🔩\n\n```js\nBox(contentAlignment = Alignment.Center) {\n    ConvexPieChart(\n        data = pieChartData,\n        modifier = Modifier.size(300.dp)\n    )\n    PieChartPanel(\n        Modifier.size(180.dp)\n    ) {\n        TotalView(total = 23548)\n    }\n}\n```\n\n## 결과\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*n7ZqFsdqSEl1egbPbMKD_g.gif\" />\n\n\n\n당신께 도움이 되었길 바라며 감사합니다. 코딩을 즐기세요! ❤️\n\n아래 내용도 마음에 드실지도요 👇\n\n만일 좋아하셨다면 👏 클립해주세요! 그리고 더 많은 흥미로운 글을 보고 싶다면\nKappdev\n를 팔로우해주세요 😊\n\n![3D 파이 차트 만들기](/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_4.png)","ogImage":{"url":"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_0.png"},"coverImage":"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_0.png","tag":["Tech"],"readingTime":10},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"환영합니다 👋\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자를 감동시킬 멋진 파이 차트를 구현하는 데 5분 이상 투자하지 않고 싶나요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그렇다면, 당신이 올바른 곳에 왔습니다. 이 기사는 정확히 그것에 대한 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"계속 보고, 함께 알아봐요! 🚀\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1400/1*TMrRg9yn-gQWNzsPyCCIMg.gif\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Convex Pie Chart\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가장 흥미로운 부분에서 여정을 시작해 보죠: 조각에 적용할 볼록한 효과를 가진 Pie Chart를 만들어 봅시다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"PieChart 데이터\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수를 조립하기 전에, 원 차트 데이터를 나타내는 데이터 클래스를 만들어야 합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"data\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PieChartData\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" label: String,\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" value: \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"Int\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" color: Color\\n)\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"ConvexStyle\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또 다른 지원 데이터 클래스인 ConvexStyle을 만들어야 Convex 효과의 시각적 모습을 표현할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"data \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ConvexStyle\"\n        }), \"(\\n    val \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"blur\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dp\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5.\"\n        }), \"dp,\\n    val \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"offset\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dp\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4.\"\n        }), \"dp,\\n    val \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"glareColor\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Color\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Color\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"White\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"copy\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"48f),\\n    val \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"shadowColor\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Color\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Color\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Black\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"copy\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"48f)\\n)\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The composable\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제, 원형 차트를 그릴 composable을 정의할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Composable\"\n        }), \"\\nfun \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ConvexPieChart\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"modifier\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modifier\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"data\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"List\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PieChartData\"\n        }), \">,\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"startAngle\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Float\"\n        }), \" = -90f,\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"rotationsCount\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Int\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"pieSliceStyle\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ConvexStyle\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ConvexStyle\"\n        }), \"(),\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"animationSpec\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnimationSpec\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Float\"\n        }), \"> = \\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"tween\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1_000\"\n        }), \", easing = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LinearOutSlowInEasing\"\n        }), \")\\n) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 구현 */\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"⚒️ 매개변수 분석\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"⚡ modifier ➜ 레이아웃에 적용된 수정자입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"⚡ data ➜ 파이 차트에 표시할 데이터입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"⚡ startAngle ➜ 첫 번째 슬라이스의 초기 각도(도)입니다 (그림 1 👇).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"⚡ rotationsCount ➜ 애니메이션 중 완전한 회전 횟수입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"⚡ pieSliceStyle ➜ 파이 조각의 볼록 스타일을 정의합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"⚡ animationSpec ➜ 스케일 및 회전에 대한 애니메이션 동작을 지정합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"오목한 아치\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"파이 차트 자체를 그리기 전에, 우리 아름다운 조각들을 렌더링할 drawConvexArc라는 지원 함수를 만들어보겠습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"fun \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DrawScope\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"drawConvexArc\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Color\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"startAngle\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Float\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"sweepAngle\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Float\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"useCenter\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Boolean\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"style\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ConvexStyle\"\n        }), \",\\n) = canvas에 그리기 { canvas ->\\n    val rect = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"size\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toRect\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 캔버스의 경계\"\n        }), \"\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 그리기용 페인트 개체 정의\"\n        }), \"\\n    val paint = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Paint\"\n        }), \"()\\n    paint.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"color\"\n        }), \" = color\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 캔버스에 기본 아치 그리기\"\n        }), \"\\n    canvas.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"drawArc\"\n        }), \"(rect, startAngle, sweepAngle, useCenter, paint)\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 그림자와 번빛 아치를 그리는 함수 정의\"\n        }), \"\\n    fun \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"drawShadowArc\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"offsetX: Float, offsetY: Float, shadowColor: Color\"\n        }), \") {\\n        val shadowPaint = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Paint\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 그림자를 그리기 위한 페인트 개체\"\n        }), \"\\n\\n        shadowPaint.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"color\"\n        }), \" = shadowColor \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 그림자 색상 설정\"\n        }), \"\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 현재 캔버스 레이어 저장\"\n        }), \"\\n        canvas.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"saveLayer\"\n        }), \"(rect, shadowPaint)\\n        \\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 그림자 아치 그리기\"\n        }), \"\\n        canvas.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"drawArc\"\n        }), \"(rect, startAngle, sweepAngle, useCenter, shadowPaint)\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 그림자에 블렌딩 모드 및 블러 효과 적용\"\n        }), \"\\n        shadowPaint.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"asFrameworkPaint\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"apply\"\n        }), \" {\\n            xfermode = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PorterDuffXfermode\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PorterDuff\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Mode\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"DST_OUT\"\n        }), \")\\n            maskFilter = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BlurMaskFilter\"\n        }), \"(style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"blur\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toPx\"\n        }), \"(), \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BlurMaskFilter\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Blur\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"NORMAL\"\n        }), \")\\n        }\\n\\n        shadowPaint.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"color\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Color\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Black\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 클리핑을 위한 색상 설정\"\n        }), \"\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 캔버스 이동 및 클리핑 아치 그리기\"\n        }), \"\\n        canvas.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translate\"\n        }), \"(offsetX, offsetY)\\n        canvas.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"drawArc\"\n        }), \"(rect, startAngle, sweepAngle, useCenter, shadowPaint)\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 캔버스를 원래 상태로 복원\"\n        }), \"\\n        canvas.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"restore\"\n        }), \"()\\n    }\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 픽셀 단위로 오프셋 계산\"\n        }), \"\\n    val offsetPx = style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toPx\"\n        }), \"()\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 음수 오프셋으로 그림자 아치 그리기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"drawShadowArc\"\n        }), \"(-offsetPx, -offsetPx, style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"shadowColor\"\n        }), \")\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 양수 오프셋으로 번빛 아치 그리기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"drawShadowArc\"\n        }), \"(offsetPx, offsetPx, style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"glareColor\"\n        }), \")\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 잘 이해하기 위해 아래 사진을 확인하세요 👇\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_1.png\",\n        alt: \"BuildinganAmazing3DPieChartwithJetpackCompose_1\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_2.png\",\n        alt: \"BuildinganAmazing3DPieChartwithJetpackCompose_2\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Convex pie chart\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have the drawConvexArc function, we can draw the pie chart.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Composable\"\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"ConvexPieChart\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\\n    \", _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"/* 매개변수 */\"\n            }), \"\\n)\"]\n          })]\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 모든 데이터 값의 합\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" totalValuesSum = remember(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"data\"\n        }), \") { \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"data\"\n        }), \".sumOf(PieChartData::value) } \\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 파이 차트를 확대 및 회전하기 위한 애니메이션 가능한 값\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" pieChartScale = remember { Animatable(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0f\"\n        }), \") }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" pieChartRotation = remember { Animatable(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0f\"\n        }), \") }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 파이 차트를 확대하고 회전시키는 애니메이션 시작\"\n        }), \"\\n    LaunchedEffect(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"Unit\"\n        }), \") {\\n        launch {\\n            pieChartScale.animateTo(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1f\"\n        }), \", animationSpec)\\n        }\\n        launch {\\n            pieChartRotation.animateTo(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"360f\"\n        }), \" * rotationsCount, animationSpec)\\n        }\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 캔버스를 사용하여 파이 차트 그리기\"\n        }), \"\\n    Canvas(\\n        modifier\\n            .aspectRatio(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1f\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 캔버스가 정사각형이 되도록 함 (1:1)\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 애니메이션 전환 적용\"\n        }), \"\\n            .scale(pieChartScale.value)\\n            .rotate(pieChartRotation.value)\\n    ) {\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 시작 각도로 마지막 값 초기화\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" lastValue = startAngle\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 각 데이터 포인트를 반복하고 해당 파이 조각을 그리기\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"data\"\n        }), \".forEach { chartData ->\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 현재 데이터 포인트의 스윕 각도 계산\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" pieSweepAngle = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"360f\"\n        }), \" * (chartData.value.toFloat() / totalValuesSum.toFloat())\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 파이 슬라이스를 나타내는 볼록한 아크 그리기\"\n        }), \"\\n            drawConvexArc(\\n                color = chartData.color,\\n                startAngle = lastValue,\\n                sweepAngle = pieSweepAngle,\\n                style = pieSliceStyle,\\n                useCenter = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n            )\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 다음 슬라이스를 위해 마지막 값 업데이트\"\n        }), \"\\n            lastValue += pieSweepAngle\\n        }\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"좋아요, 우리가 이미 이룬 것들이에요 😍\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"https://miro.medium.com/v2/resize:fit:1200/1*-yHzlxmatQyVTdfTV8h5yQ.gif\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"파이 차트 패널\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자, 이제 그림자를 활용하여 빛나는 피 크림 차트를 위한 멋진 패널을 만들어 봅시다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 그림자의 놀이 🤹‍♂️을 하며, innerShadow와 dropShadow 수정자(modifier)를 사용할 것입니다. 자세한 설명은 아래 제가 제공한 관련 기사를 참조하거나 👇 아래 링크에서 InnerShadow Gist, DropShadow Gist의 코드를 확인할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Composable\"\n        }), \"\\nfun \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PieChartPanel\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"modifier\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modifier\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"platesColor\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Color\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Color\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xFFD5F3FF\"\n        }), \"),\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"platesGap\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dp\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"32.\"\n        }), \"dp,\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"style\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ConvexStyle\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ConvexStyle\"\n        }), \"(\\n        blur = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"12.\"\n        }), \"dp,\\n        offset = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8.\"\n        }), \"dp,\\n        glareColor = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Color\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"White\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"copy\"\n        }), \"(alpha = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"32f),\\n        shadowColor = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Color\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Black\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"copy\"\n        }), \"(alpha = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"32f)\\n    ),\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"content\"\n        }), \": @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Composable\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BoxScope\"\n        }), \".() -> \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Unit\"\n        }), \"\\n) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Box\"\n        }), \"(\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 전체 패널을 나타내는 외부 상자\"\n        }), \"\\n        modifier = modifier\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"aspectRatio\"\n        }), \"(1f) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 가로세로 비율 1:1로 설정\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 내부 그림자 적용으로 깊이 효과 생성\"\n        }), \"\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"innerShadow\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CircleShape\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"glareColor\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"blur\"\n        }), \", -style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \", -style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \")\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"innerShadow\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CircleShape\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"shadowColor\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"blur\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \")\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 드롭 그림자 적용으로 고도 효과 생성\"\n        }), \"\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dropShadow\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CircleShape\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"glareColor\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"blur\"\n        }), \", -style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \", -style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \")\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dropShadow\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CircleShape\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"shadowColor\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"blur\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \")\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 배경 그리기\"\n        }), \"\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"background\"\n        }), \"(platesColor, \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CircleShape\"\n        }), \"),\\n        contentAlignment = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Alignment\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Center\"\n        }), \"\\n    ) {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Box\"\n        }), \"(\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 실제 콘텐츠를 포함하는 내부 상자\"\n        }), \"\\n            modifier = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modifier\"\n        }), \"\\n                .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"matchParentSize\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 전체 부모 크기 차지\"\n        }), \"\\n                .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"padding\"\n        }), \"(platesGap) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 플레이트 간의 갭 추가\"\n        }), \"\\n                \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 드롭 그림자 적용으로 고도 효과 생성\"\n        }), \"\\n                .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dropShadow\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CircleShape\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"glareColor\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"blur\"\n        }), \", -style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \", -style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \")\\n                .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dropShadow\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CircleShape\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"shadowColor\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"blur\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \", style.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offset\"\n        }), \")\\n                \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 배경 그리기\"\n        }), \"\\n                .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"background\"\n        }), \"(platesColor, \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CircleShape\"\n        }), \"),\\n            contentAlignment = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Alignment\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Center\"\n        }), \",\\n            content = content \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 콘텐츠 삽입\"\n        }), \"\\n        )\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자, 준비가 다 되었습니다! 패널에 표시할 콘텐츠가 마지막 조각입니다. 패널에 표시할 총 값 텍스트를 조금의 애니메이션과 함께 만들어 봅시다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Composable\"\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"TotalView\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\\n    total: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Int\"\n            }), \",\\n    modifier: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Modifier\"\n            }), \" = Modifier,\\n    animationSpec: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"AnimationSpec\"\n            }), \"<\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Int\"\n            }), \"> = tween(\", _jsx(_components.span, {\n              className: \"hljs-number\",\n              children: \"1000\"\n            }), \", easing = FastOutSlowInEasing)\"]\n          })]\n        }), \"\\n) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" totalToDisplay = remember {\\n        Animatable(initialValue = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", typeConverter = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"Int\"\n        }), \".VectorConverter)\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// total 값이 변경될 때 전체 값을 애니메이트하는 effect 시작\"\n        }), \"\\n    LaunchedEffect(total) {\\n        totalToDisplay.animateTo(total, animationSpec)\\n    }\\n\\n    Column(\\n        modifier = modifier,\\n        horizontalAlignment = Alignment.CenterHorizontally\\n    ) {\\n        Text(\\n            text = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"총액\\\"\"\n        }), \",\\n            fontSize = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"14.\"\n        }), \"sp,\\n            color = Color(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xFF464646\"\n        }), \")\\n        )\\n        Text(\\n            text = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"\\\"\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${totalToDisplay.value}\"\n          }), \"$\\\"\"]\n        }), \",\\n            fontSize = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"18.\"\n        }), \"sp,\\n            fontWeight = FontWeight.Medium,\\n            color = Color(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xFF010203\"\n        }), \")\\n        )\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"축하합니다🥳! 성공적으로 구현했습니다👏. 전체 코드 구현은 GitHub Gist에서 확인하실 수 있어요🧑‍💻. 이제 모든 것을 하나로 합쳐서 최종 결과를 살펴봅시다!\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"광고\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"외국어를 배우고 새로운 어휘에 어려움을 겪고 계신가요? 그렇다면 어플 단어 학습 어플 을 꼭 추천드립니다! 여러분들의 학습 여정을 쉽고 편리하게 만들어 줄 거예요!```\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"![Image](/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_3.png)\\n\\n# Final\\n\\n이제 시연을 위한 데이터 목록을 만들어 봅시다:\\n\\n```js\\nval pieChartData = remember {\\n    listOf(\\n        PieChartData(\\\"항목-1\\\", 30, Color(0xFFE45C5C)),\\n        PieChartData(\\\"항목-2\\\", 45, Color(0xFF8FE25C)),\\n        PieChartData(\\\"항목-3\\\", 25, Color(0xFF4471E4)),\\n        PieChartData(\\\"항목-4\\\", 20, Color(0xFFEECE55)),\\n        PieChartData(\\\"항목-5\\\", 40, Color(0xFFBD68CB)),\\n    )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 마지막으로 마무리해봅시다 🔩\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Box\"\n        }), \"(contentAlignment = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Alignment\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Center\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ConvexPieChart\"\n        }), \"(\\n        data = pieChartData,\\n        modifier = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modifier\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"size\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"300.\"\n        }), \"dp)\\n    )\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PieChartPanel\"\n        }), \"(\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modifier\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"size\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"180.\"\n        }), \"dp)\\n    ) {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TotalView\"\n        }), \"(total = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"23548\"\n        }), \")\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"결과\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"https://miro.medium.com/v2/resize:fit:1400/1*n7ZqFsdqSEl1egbPbMKD_g.gif\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"당신께 도움이 되었길 바라며 감사합니다. 코딩을 즐기세요! ❤️\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 내용도 마음에 드실지도요 👇\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만일 좋아하셨다면 👏 클립해주세요! 그리고 더 많은 흥미로운 글을 보고 싶다면\\nKappdev\\n를 팔로우해주세요 😊\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_4.png\",\n        alt: \"3D 파이 차트 만들기\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}