{"pageProps":{"post":{"title":"실시간 알림 React에서 종류 및 구현","description":"","date":"2024-05-12 21:11","slug":"2024-05-12-Real-TimeNotificationsinReactTypesandImplementations","content":"\n\n![Real-Time Notifications in React: Types and Implementations](/assets/img/2024-05-12-Real-TimeNotificationsinReactTypesandImplementations_0.png)\n\n## 소개:\n\n실시간 알림은 웹 애플리케이션에서 사용자 참여를 촉진하고 적시에 업데이트를 제공하는 데 중요한 역할을 합니다. 이 안내서에서는 React 애플리케이션에서 다양한 유형의 실시간 알림과 그 구현을 탐색할 것입니다. Firebase 알림, One Signal 및 SignalR을 비롯한 많은 알림 라이브러리들이 있지만, 지금은 WebSocket, Server-Sent Events (SSE) 및 Push Notifications을 사용할 것입니다.\n\n## 실시간 알림의 유형:\n\n\n\n- WebSocket 통지: WebSocket은 클라이언트와 서버 간의 실시간 데이터 전송을 가능하게 하는 단일 TCP 연결 상에서 전이중(duplex) 통신 채널을 제공하는 통신 프로토콜입니다. 웹소켓 통지는 양방향 통신과 즉각적인 업데이트가 필요한 애플리케이션에 이상적입니다.\n- 서버 보낸 이벤트(SSE): 서버 보낸 이벤트(SSE)는 단일 HTTP 연결 상에서 서버로부터 클라이언트로의 스트리밍 업데이트를 위한 표준입니다. SSE 알림은 단방향적이며, 데이터가 서버에서 클라이언트로 흐릅니다. 서버가 클라이언트로부터 시작되는 요청 없이 업데이트를 푸시해야 하는 애플리케이션에 적합합니다.\n- 푸시 통지: 푸시 통지를 사용하면 웹 애플리케이션이 브라우저에서 열려 있지 않을 때에도 실시간 통지를 사용자에게 전달할 수 있습니다. 푸시 통지는 서버에서 사용자 기기로 서비스 작업자를 통해 전송되어, 시기 적절한 업데이트로 사용자 경험을 원활하게 만들고 사용자에게 다시 관심을 유도합니다.\n\n## React에서 구현:\n\nReact 애플리케이션에서 각 유형의 실시간 통지를 구현하는 방법을 살펴봅시다.\n\n\n\nReact에서 WebSocket 알림을 사용하려면 socket.io-client와 같은 라이브러리를 사용하여 서버와 WebSocket 연결을 설정하고 실시간 업데이트를 수신할 수 있습니다.\n\n```js\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst NotificationsComponent = () => {\n  const [notification, setNotification] = useState('');\n  useEffect(() => {\n    const socket = io('http://localhost:5000');\n    socket.on('notification', (data) => {\n      setNotification(data.message);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  return (\n    <div>\n      <h2>WebSocket 알림:</h2>\n      <p>{notification}</p>\n    </div>\n  );\n};\nexport default NotificationsComponent;\n```\n\n## Server-Sent Events (SSE):\n\nReact는 EventSource API를 통해 Server-Sent Events를 지원합니다. EventSource 객체를 사용하여 서버와 연결을 설정하고 업데이트를 수신할 수 있습니다.\n\n\n\n```js\nimport React, { useEffect, useState } from 'react';\n\nconst NotificationsComponent = () => {\n  const [notification, setNotification] = useState('');\n  useEffect(() => {\n    const eventSource = new EventSource('http://localhost:5000/notifications');\n    eventSource.onmessage = (event) => {\n      setNotification(event.data);\n    };\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n  return (\n    <div>\n      <h2>Server-Sent Events (SSE) Notifications:</h2>\n      <p>{notification}</p>\n    </div>\n  );\n};\nexport default NotificationsComponent;\n```\n\n## 푸시 알림:\n\nReact에서 푸시 알림을 사용하려면 서비스 워커를 구현하여 들어오는 푸시 이벤트를 처리하고 사용자에게 알림을 표시해야 합니다.\n\n```js\n// 서비스 워커 파일 (sw.js)\nself.addEventListener('push', function(event) {\n  const data = event.data.json();\n  const title = '새 알림';\n  const options = {\n    body: data.message,\n    icon: '아이콘/이미지/경로.png',\n  };\n\nevent.waitUntil(\n    self.registration.showNotification(title, options)\n  );\n});\n```\n\n\n\nReact 컴포넌트에서 서비스 워커를 등록하고 푸시 알림을 위해 Notification API를 사용하는 방법을 설명했습니다.\n\n## 결론:\n\n실시간 알림은 웹 애플리케이션 사용자를 정보를 제공하고 참여시키는 데 중요합니다. 이 안내서에서 WebSocket, Server-Sent Events (SSE), 및 푸시 알림 세 가지 유형의 실시간 알림을 탐색하고 React 애플리케이션에서 구현하는 방법을 안내했습니다. 실시간 알림을 통합함으로써 사용자 경험을 향상시키고 적시에 업데이트를 제공하여 React 애플리케이션의 성공에 기여할 수 있습니다. 즐거운 학습과 코딩하세요!","ogImage":{"url":"/assets/img/2024-05-12-Real-TimeNotificationsinReactTypesandImplementations_0.png"},"coverImage":"/assets/img/2024-05-12-Real-TimeNotificationsinReactTypesandImplementations_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-Real-TimeNotificationsinReactTypesandImplementations_0.png\",\n        alt: \"Real-Time Notifications in React: Types and Implementations\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"소개:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"실시간 알림은 웹 애플리케이션에서 사용자 참여를 촉진하고 적시에 업데이트를 제공하는 데 중요한 역할을 합니다. 이 안내서에서는 React 애플리케이션에서 다양한 유형의 실시간 알림과 그 구현을 탐색할 것입니다. Firebase 알림, One Signal 및 SignalR을 비롯한 많은 알림 라이브러리들이 있지만, 지금은 WebSocket, Server-Sent Events (SSE) 및 Push Notifications을 사용할 것입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"실시간 알림의 유형:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"WebSocket 통지: WebSocket은 클라이언트와 서버 간의 실시간 데이터 전송을 가능하게 하는 단일 TCP 연결 상에서 전이중(duplex) 통신 채널을 제공하는 통신 프로토콜입니다. 웹소켓 통지는 양방향 통신과 즉각적인 업데이트가 필요한 애플리케이션에 이상적입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"서버 보낸 이벤트(SSE): 서버 보낸 이벤트(SSE)는 단일 HTTP 연결 상에서 서버로부터 클라이언트로의 스트리밍 업데이트를 위한 표준입니다. SSE 알림은 단방향적이며, 데이터가 서버에서 클라이언트로 흐릅니다. 서버가 클라이언트로부터 시작되는 요청 없이 업데이트를 푸시해야 하는 애플리케이션에 적합합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"푸시 통지: 푸시 통지를 사용하면 웹 애플리케이션이 브라우저에서 열려 있지 않을 때에도 실시간 통지를 사용자에게 전달할 수 있습니다. 푸시 통지는 서버에서 사용자 기기로 서비스 작업자를 통해 전송되어, 시기 적절한 업데이트로 사용자 경험을 원활하게 만들고 사용자에게 다시 관심을 유도합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"React에서 구현:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React 애플리케이션에서 각 유형의 실시간 통지를 구현하는 방법을 살펴봅시다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React에서 WebSocket 알림을 사용하려면 socket.io-client와 같은 라이브러리를 사용하여 서버와 WebSocket 연결을 설정하고 실시간 업데이트를 수신할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useEffect, useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" io \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'socket.io-client'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"NotificationsComponent\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [notification, setNotification] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" socket = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"io\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'http://localhost:5000'\"\n        }), \");\\n    socket.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"on\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'notification'\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"data\"\n          }), \") =>\"]\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setNotification\"\n        }), \"(data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"message\"\n        }), \");\\n    });\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n      socket.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"disconnect\"\n        }), \"();\\n    };\\n  }, []);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h2\"\n            }), \">\"]\n          }), \"WebSocket 알림:\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h2\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"{notification}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NotificationsComponent\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Server-Sent Events (SSE):\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React는 EventSource API를 통해 Server-Sent Events를 지원합니다. EventSource 객체를 사용하여 서버와 연결을 설정하고 업데이트를 수신할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useEffect, useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"NotificationsComponent\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [notification, setNotification] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" eventSource = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EventSource\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'http://localhost:5000/notifications'\"\n        }), \");\\n    eventSource.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"onmessage\"\n        }), \" = \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"event\"\n          }), \") =>\"]\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setNotification\"\n        }), \"(event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"data\"\n        }), \");\\n    };\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n      eventSource.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"close\"\n        }), \"();\\n    };\\n  }, []);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h2\"\n            }), \">\"]\n          }), \"Server-Sent Events (SSE) Notifications:\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h2\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"{notification}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NotificationsComponent\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"푸시 알림:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React에서 푸시 알림을 사용하려면 서비스 워커를 구현하여 들어오는 푸시 이벤트를 처리하고 사용자에게 알림을 표시해야 합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 서비스 워커 파일 (sw.js)\"\n        }), \"\\nself.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'push'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"event\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" data = event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"data\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"json\"\n        }), \"();\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" title = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'새 알림'\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" options = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"body\"\n        }), \": data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"message\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"icon\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'아이콘/이미지/경로.png'\"\n        }), \",\\n  };\\n\\nevent.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"waitUntil\"\n        }), \"(\\n    self.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"registration\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"showNotification\"\n        }), \"(title, options)\\n  );\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React 컴포넌트에서 서비스 워커를 등록하고 푸시 알림을 위해 Notification API를 사용하는 방법을 설명했습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"결론:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"실시간 알림은 웹 애플리케이션 사용자를 정보를 제공하고 참여시키는 데 중요합니다. 이 안내서에서 WebSocket, Server-Sent Events (SSE), 및 푸시 알림 세 가지 유형의 실시간 알림을 탐색하고 React 애플리케이션에서 구현하는 방법을 안내했습니다. 실시간 알림을 통합함으로써 사용자 경험을 향상시키고 적시에 업데이트를 제공하여 React 애플리케이션의 성공에 기여할 수 있습니다. 즐거운 학습과 코딩하세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}