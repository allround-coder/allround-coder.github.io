{"pageProps":{"post":{"title":"SSL 문제와 Databricks Connect","description":"","date":"2024-05-16 16:55","slug":"2024-05-16-SSLIssueswithDatabricksConnect","content":"\n\n# 문제\n\nWindows 머신의 (회사) 네트워크에서 로컬로 Databricks-Connect를 실행 중이고 사용자 정의 인증서(루트 및 중간)를 사용하고 있다면, 코드를 실행할 때 다음과 유사한 오류가 발생할 수 있습니다:\n\n데이터브릭스-커넥트가 gRPC를 사용하기 때문에(현재 구현체에는) 사용자 정의/회사 인증서에 대해 알지 못합니다. 비록 해당 인증서가 올바르게 로컬 Windows 인증서 저장소에 설치되어 있어도 그렇습니다.\n\n이 문제는 pip/requests나 certifi를 사용할 때 발생하는 SSL 문제와 매우 유사합니다. requests/certifi/pip 주제에 대해 다양한 온라인 포스트를 찾을 수 있습니다. 예를 들어 이것이 있습니다. 해결 방법은 보통 pip-system-certs 또는 (이미 사용되지 않는) python-certifi-win32를 설치하는 것입니다. 그러나 이러한 수정 사항은 Databricks-Connect에서의 gRPC 문제를 해결하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n# 솔루션\n\n## (1) 회사별 인증서가 포함된 .pem 파일 생성하기\n\n로컬 Windows 인증서 저장소에 모든 관련 회사별 인증서가 설치되어 있다고 가정하고, 다음 파이썬 스크립트를 사용하여 해당 인증서를 추출할 수 있습니다:\n\n```js\nimport ssl\n\ncontext = ssl.create_default_context()\nder_certs = context.get_ca_certs(binary_form=True)\npem_certs = [ssl.DER_cert_to_PEM_cert(der) for der in der_certs]\n\nwith open('wincacerts.pem', 'w') as outfile:\n    for pem in pem_certs:\n        outfile.write(pem + '\\n')\n```  \n\n<div class=\"content-ad\"></div>\n\n현재 Windows 인증서 저장소에 있는 모든 인증서를 포함하는 파일(wincacerts.pem)이 생성됩니다.\n\n이 인증서를 certifi와 함께 제공되는 표준 인증서에 추가하는 것을 제안합니다. 해당 인증서를 찾으려면 다음 명령을 사용하세요:\n\n```python\nimport certifi\n\nprint(certifi.where())\n\n>>> 'd:\\repos\\XXX\\.venv\\lib\\site-packages\\certifi\\cacert.pem'\n```\n\n반환된 위치에서 찾은 파일을 열고 이전에 생성한 파일을 텍스트 편집기에서 열어 cacert.pem의 내용을 wincacerts.pem에 단순 복사하여 붙여넣기합니다. 이 파일 내의 인증서 순서는 중요하지 않습니다. 그 후 저장하고 wincacerts.pem을 Windows 사용자 홈 디렉터리의 임의의 위치로 이동해주세요. 예를 들어:\nC:\\Users\\`사용자명`\\certs\\wincacerts.pem\n\n<div class=\"content-ad\"></div>\n\n# 환경 변수를 이용하여 사용자 정의 인증서 참조하기\n\n이제 gRPC에게 사용자 정의 인증서 파일의 위치를 알려주기만 하면 됩니다. 가장 간단한 방법은 환경 변수 GRPC_DEFAULT_SSL_ROOTS_FILE_PATH를 사용하는 것입니다. 이 환경 변수는 VS-Code(특정 프로젝트/터미널용)에서 설정할 수도 있고, - 저는 선호하는 방법인 - 사용자의 Windows 환경 변수에 설정할 수도 있습니다:\n\n<img src=\"/assets/img/2024-05-16-SSLIssueswithDatabricksConnect_0.png\" />\n\n팁: 새 환경 변수를 설정한 후 모든 열려있는 터미널/셸을 재시작하여 변경 사항을 적용해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n## 그게 전부에요!\n\n다음에 Databricks-Connect 코드를 실행할 때 SSL 핸드셰이크 오류가 사라져 있을 거예요.","ogImage":{"url":"/assets/img/2024-05-16-SSLIssueswithDatabricksConnect_0.png"},"coverImage":"/assets/img/2024-05-16-SSLIssueswithDatabricksConnect_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"문제\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Windows 머신의 (회사) 네트워크에서 로컬로 Databricks-Connect를 실행 중이고 사용자 정의 인증서(루트 및 중간)를 사용하고 있다면, 코드를 실행할 때 다음과 유사한 오류가 발생할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터브릭스-커넥트가 gRPC를 사용하기 때문에(현재 구현체에는) 사용자 정의/회사 인증서에 대해 알지 못합니다. 비록 해당 인증서가 올바르게 로컬 Windows 인증서 저장소에 설치되어 있어도 그렇습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 문제는 pip/requests나 certifi를 사용할 때 발생하는 SSL 문제와 매우 유사합니다. requests/certifi/pip 주제에 대해 다양한 온라인 포스트를 찾을 수 있습니다. 예를 들어 이것이 있습니다. 해결 방법은 보통 pip-system-certs 또는 (이미 사용되지 않는) python-certifi-win32를 설치하는 것입니다. 그러나 이러한 수정 사항은 Databricks-Connect에서의 gRPC 문제를 해결하지 않습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"솔루션\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"(1) 회사별 인증서가 포함된 .pem 파일 생성하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"로컬 Windows 인증서 저장소에 모든 관련 회사별 인증서가 설치되어 있다고 가정하고, 다음 파이썬 스크립트를 사용하여 해당 인증서를 추출할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" ssl\\n\\ncontext = ssl.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create_default_context\"\n        }), \"()\\nder_certs = context.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_ca_certs\"\n        }), \"(binary_form=\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"True\"\n        }), \")\\npem_certs = [ssl.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"DER_cert_to_PEM_cert\"\n        }), \"(der) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" der \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" der_certs]\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"with\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"open\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'wincacerts.pem'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'w'\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"outfile\"\n        }), \":\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" pem \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"pem_certs\"\n        }), \":\\n        outfile.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"write\"\n        }), \"(pem + \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'\\\\n'\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현재 Windows 인증서 저장소에 있는 모든 인증서를 포함하는 파일(wincacerts.pem)이 생성됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 인증서를 certifi와 함께 제공되는 표준 인증서에 추가하는 것을 제안합니다. 해당 인증서를 찾으려면 다음 명령을 사용하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" certifi\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(certifi.where())\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \">>> \"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'d:\\\\repos\\\\XXX\\\\.venv\\\\lib\\\\site-packages\\\\certifi\\\\cacert.pem'\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"반환된 위치에서 찾은 파일을 열고 이전에 생성한 파일을 텍스트 편집기에서 열어 cacert.pem의 내용을 wincacerts.pem에 단순 복사하여 붙여넣기합니다. 이 파일 내의 인증서 순서는 중요하지 않습니다. 그 후 저장하고 wincacerts.pem을 Windows 사용자 홈 디렉터리의 임의의 위치로 이동해주세요. 예를 들어:\\nC:\\\\Users`사용자명`\\\\certs\\\\wincacerts.pem\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"환경 변수를 이용하여 사용자 정의 인증서 참조하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 gRPC에게 사용자 정의 인증서 파일의 위치를 알려주기만 하면 됩니다. 가장 간단한 방법은 환경 변수 GRPC_DEFAULT_SSL_ROOTS_FILE_PATH를 사용하는 것입니다. 이 환경 변수는 VS-Code(특정 프로젝트/터미널용)에서 설정할 수도 있고, - 저는 선호하는 방법인 - 사용자의 Windows 환경 변수에 설정할 수도 있습니다:\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-16-SSLIssueswithDatabricksConnect_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"팁: 새 환경 변수를 설정한 후 모든 열려있는 터미널/셸을 재시작하여 변경 사항을 적용해야 합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"그게 전부에요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음에 Databricks-Connect 코드를 실행할 때 SSL 핸드셰이크 오류가 사라져 있을 거예요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}