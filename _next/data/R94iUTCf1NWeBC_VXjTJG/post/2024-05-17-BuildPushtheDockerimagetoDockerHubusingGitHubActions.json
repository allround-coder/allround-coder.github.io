{"pageProps":{"post":{"title":"Docker 이미지를 빌드하고 GitHub Actions를 사용하여 Docker Hub에 푸시하기","description":"","date":"2024-05-17 03:47","slug":"2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions","content":"\n\n<img src=\"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_0.png\" />\n\n여기서는 GitHub actions workflow를 사용하여 도커 이미지를 빌드하고 도커 허브에 푸시하는 방법을 알아보겠습니다.\n\n## 단계 1: 도커 파일 만들기\n\n- 도커 이미지를 빌드하려면 도커 파일을 만들어야 합니다.\n- 이 튜토리얼에서는 매우 기본적인 도커 파일을 만들고 해당 파일을 사용하여 이미지를 빌드할 것입니다.\n- Dockerfile을 만들고 아래 코드를 추가하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n# Docker Hub에서 공식 Apache HTTP 서버 이미지를 사용하세요\nFROM httpd:latest\n\n# 호스팅을 위해 사용자 정의 'index.html'을 Apache 서버의 루트 디렉토리에 복사하세요\nCOPY ./index.html /usr/local/apache2/htdocs/\n```\n\n- 위의 코드는 다음 단계에서 생성할 사용자 정의 index.html을 사용하여 Apache 이미지 위에 이미지를 빌드합니다.\n\n## 단계 2: index.html 파일 생성\n\n- index.html 파일을 생성하고 아래 코드를 추가하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    <p>This is a simple HTML page served from an Apache server in a Docker container.</p>\n</body>\n</html>\n```\n\n### 단계 3: 도커 허브 자격 증명 저장\n\n- 도커 이미지를 도커 허브로 푸시하려면 먼저 도커 허브에 로그인해야 합니다. 따라서 해당 자격 증명을 시크릿에 저장해야 합니다.\n- 귀하의 저장소에서 자격 증명을 시크릿에 저장하세요.\n\n![이미지](/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_1.png)\n  \n\n<div class=\"content-ad\"></div>\n\n## 단계 4: GitHub 액션 워크플로우 생성하기\n\n- 이제 .github/workflow/image-build.yml 파일을 만들고 아래 코드를 추가하세요.\n\n```js\nname: Build Docker Image\non:\n  push:\n    branches:\n      - main\njobs:\n    build:\n      name: push docker image to docker hub\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: login to docker hub\n          id: docker-hub\n          env:\n            username: ${secrets.DOCKERHUB_USERNAME}\n            password: ${secrets.DOCKERHUB_PASSWORD}\n          run: |\n            docker login -u $username -p $password \n        - name: build the docker image\n          id: build-docker-image\n          run: |\n            ls -la \n            docker build . -f Dockerfile -t dhruvin30/demo-image-test:latest\n        - name: push the docker image\n          id: push-docker-image\n          run: docker push ${secrets.DOCKERHUB_USERNAME}/demo-image-test:latest\n```\n\n- 위 워크플로우는 main 브랜치에 커밋할 때마다 트리거됩니다.\n- 워크플로우는 secrets(사용자 이름 및 비밀번호)를 사용하여 docker hub에 로그인합니다.\n\n<div class=\"content-ad\"></div>\n\n## 단계 5: 코드를 커밋합니다\n\n- 이제 코드를 GitHub 저장소에 커밋하고 커밋하자마자 워크플로가 실행되는 것을 볼 수 있습니다.\n\n![이미지](/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_2.png)\n\n## 단계 6: 변경 사항 확인하기\n\n<div class=\"content-ad\"></div>\n\n- 한 번 Workflow가 성공적으로 실행되면 이미지가 도커 허브에 표시될 것입니다.\n\n![이미지](/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_3.png)\n\n오늘은 여기까지입니다. GitHub Actions를 사용하여 도커 이미지를 빌드하고 푸시하는 방법을 배웠습니다. 이제 코드를 수정하고 실험해보세요.\n\nLinkedIn에서 팔로우해주세요.\n\n<div class=\"content-ad\"></div>\n\n더 이런 이야기를 보고 싶다면 팔로우해 주세요 😁","ogImage":{"url":"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_0.png"},"coverImage":"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h3: \"h3\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서는 GitHub actions workflow를 사용하여 도커 이미지를 빌드하고 도커 허브에 푸시하는 방법을 알아보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 1: 도커 파일 만들기\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"도커 이미지를 빌드하려면 도커 파일을 만들어야 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이 튜토리얼에서는 매우 기본적인 도커 파일을 만들고 해당 파일을 사용하여 이미지를 빌드할 것입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Dockerfile을 만들고 아래 코드를 추가하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Docker\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Hub\"\n        }), \"에서 공식 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Apache\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"HTTP\"\n        }), \" 서버 이미지를 사용하세요\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"httpd\"\n        }), \":latest\\n\\n# 호스팅을 위해 사용자 정의 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'index.html'\"\n        }), \"을 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Apache\"\n        }), \" 서버의 루트 디렉토리에 복사하세요\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"COPY\"\n        }), \" ./index.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \" /usr/local/apache2/htdocs/\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"위의 코드는 다음 단계에서 생성할 사용자 정의 index.html을 사용하여 Apache 이미지 위에 이미지를 빌드합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 2: index.html 파일 생성\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"index.html 파일을 생성하고 아래 코드를 추가하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DOCTYPE\"\n        }), \" html>\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"html\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"head\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          }), \"Hello World\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"head\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"body\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"Hello, World!\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"This is a simple HTML page served from an Apache server in a Docker container.\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"body\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"html\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"단계 3: 도커 허브 자격 증명 저장\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"도커 이미지를 도커 허브로 푸시하려면 먼저 도커 허브에 로그인해야 합니다. 따라서 해당 자격 증명을 시크릿에 저장해야 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"귀하의 저장소에서 자격 증명을 시크릿에 저장하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 4: GitHub 액션 워크플로우 생성하기\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이제 .github/workflow/image-build.yml 파일을 만들고 아래 코드를 추가하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Build\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Docker\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"on\"\n        }), \":\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"push\"\n        }), \":\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"branches\"\n        }), \":\\n      - main\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"jobs\"\n        }), \":\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"build\"\n        }), \":\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": push docker image to docker hub\\n      runs-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"on\"\n        }), \": ubuntu-latest\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"steps\"\n        }), \":\\n        - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"uses\"\n        }), \": actions/checkout@v2\\n        - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": login to docker hub\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": docker-hub\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"env\"\n        }), \":\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"username\"\n        }), \": ${secrets.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"DOCKERHUB_USERNAME\"\n        }), \"}\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"password\"\n        }), \": ${secrets.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"DOCKERHUB_PASSWORD\"\n        }), \"}\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"run\"\n        }), \": |\\n            docker login -u $username -p $password \\n        - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": build the docker image\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": build-docker-image\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"run\"\n        }), \": |\\n            ls -la \\n            docker build . -f \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dockerfile\"\n        }), \" -t dhruvin30/demo-image-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"test\"\n        }), \":latest\\n        - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": push the docker image\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": push-docker-image\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"run\"\n        }), \": docker push ${secrets.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"DOCKERHUB_USERNAME\"\n        }), \"}/demo-image-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"test\"\n        }), \":latest\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"위 워크플로우는 main 브랜치에 커밋할 때마다 트리거됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"워크플로우는 secrets(사용자 이름 및 비밀번호)를 사용하여 docker hub에 로그인합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 5: 코드를 커밋합니다\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이제 코드를 GitHub 저장소에 커밋하고 커밋하자마자 워크플로가 실행되는 것을 볼 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_2.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 6: 변경 사항 확인하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"한 번 Workflow가 성공적으로 실행되면 이미지가 도커 허브에 표시될 것입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_3.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"오늘은 여기까지입니다. GitHub Actions를 사용하여 도커 이미지를 빌드하고 푸시하는 방법을 배웠습니다. 이제 코드를 수정하고 실험해보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"LinkedIn에서 팔로우해주세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 이런 이야기를 보고 싶다면 팔로우해 주세요 😁\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}