{"pageProps":{"posts":[{"title":"마이크로 프론트엔드를 탐구하며 React  Vite로 구현하기","description":"","date":"2024-05-12 18:46","slug":"2024-05-12-ExploringMicroFrontendsandImplementationwithReactVite","content":"\n\n![이미지](/assets/img/2024-05-12-ExploringMicroFrontendsandImplementationwithReactVite_0.png)\n\n마이크로 프론트엔드는 현대적인 웹 애플리케이션을 구축하기 위한 확장 가능한 프레임워크로 점점 더 인기를 얻고 있습니다. 이 방법론은 팀이 독립적인 특징이나 구성 요소를 구축, 배포 및 확장할 수 있게 함으로써 증진된 협력과 지속가능성을 육성합니다. 이 기사에서는 마이크로 프론트엔드가 무엇인지, 그리고 React와 Vite를 활용한 마이크로 프론트엔드의 기본 구현을 탐색할 것입니다.\n\n## 안내\n\n- 마이크로 프론트엔드란 무엇인가요?\n- 예시: 전통적인 전자 상거래 프론트엔드 애플리케이션\n- 예시: 마이크로 프론트엔드를 활용한 전자 상거래\n- 마이크로 프론트엔드 프로젝트 설정\n- 프로젝트 실행\n- 결론\n\n\n\n## 마이크로 프론트엔드\n\n백엔드 팀에서 백엔드를 구축하기 위해 마이크로서비스 접근 방식을 사용한다고 들어 보았을 수 있습니다. 그렇다면 같은 방식을 프론트 엔드 구축에도 사용할 수 있다면 어떨까요?\n\n이렇게 하면 팀이 개별적으로 작업할 수 있고, 코드베이스에서 충돌이 적어지며, 그 충돌을 해결하는 데 걸리는 시간을 줄일 수 있는 등 여러 가지 이점을 얻을 수 있습니다.\n\n프론트엔드 세계에서 마이크로서비스의 확장 개념은 마이크로 프론트엔드라고 불립니다. 예를 들어 React를 사용하여 구축된 전자 상거래 프론트 엔드 애플리케이션을 살펴보며 용어 '마이크로 프론트엔드'를 이해해 봅시다.\n\n\n\n## 전통적인 전자 상거래 프런트 엔드 응용 프로그램\n\n일반적으로 프런트엔드 응용 프로그램을 구축할 때는 구성 요소, 자산, 라우팅 및 프런트엔드에 필요한 비즈니스 로직을 모든 코드베이스에 작성한 후 서버에서 제공됩니다. 그러나 현재 대부분의 조직에서 사용하는 다양한 JavaScript UI 프레임워크의 등장으로 이 프레임워크에는 제한 사항이나 단점이 있습니다. 예를 들어, 응용 프로그램이 커질수록 브라우저의 로드 시간이 증가합니다.\n\n![이미지](/assets/img/2024-05-12-ExploringMicroFrontendsandImplementationwithReactVite_1.png)\n\nReact를 사용하여 구축된 전자 상거래 앱을 고려해 보세요. 제품 검색, 구매 및 주문 추적과 같은 기능이 포함되어 있습니다. 모놀리식 프런트엔드 응용 프로그램에서 이러한 페이지들이 포함될 것입니다.\n\n\n\n리액트 전자 상거래 애플리케이션이 메인 JavaScript 청크에 구축되어 있습니다. 누군가 사이트를 방문할 때 브라우저에 의해로드됩니다. 사용자는 전체 프론트엔드 애플리케이션을 포함한 모든 JavaScript 파일을 다운로드하기까지 기다려야 합니다. 이로 인해 애플리케이션의 초기 로드 시간이 크게 증가할 수 있습니다.\n\n이 로드 시간 문제를 마이크로 프론트엔드로 해결할 수 있습니다.\n\n## 마이크로 프론트엔드와 전자 상거래\n\n전자 상거래 애플리케이션을 고려해 봅시다. 사용자가 제품을 검색하기 위해 애플리케이션에 들어올 경우, 브라우저는 모든 코드를 다운로드할 필요가 없습니다. 대신, 사용자가 필요로 하는 부분을 사용할 수 있어야 합니다. 심지어 다른 부분은 그들에게 관련이 없더라도요.\n\n\n\n동일한 애플리케이션을 마이크로 프론트엔드 접근 방식을 사용하여 구축할 수 있습니다. 마이크로 프론트엔드 접근 방식은 전체 큰 애플리케이션을 제공하는 기능에 따라 세분화하여 각각 개별적으로 구축하는 간단한 아이디어입니다. 이렇게 하면 팀원들이 자신이 구축 중인 기능에 대해 더 잘 이해할 수 있고 해당 기능에 대해서만 책임질 수 있습니다.\n\n따라서 전자 상거래 애플리케이션을 제품, 주문 및 배송 기능으로 나눌 수 있습니다. 제품 마이크로 프론트엔드 애플리케이션은 제품 목록 및 검색과 관련된 UI만 렌더링합니다. 주문 마이크로 프론트엔드 애플리케이션은 주문 관련 UI에 책임을 지고 있으며, 배송 마이크로 프론트엔드는 제품 추적 기능에 책임이 있습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:1000/0*sA7aQvM473L0-qOW.gif)\n\n이 애플리케이션을 작은 부분으로 나누기 때문에 이러한 작은 앱들을 병합하거나 통합하여 주 애플리케이션으로 작동할 수 있어야 합니다. 사용자 입력에 따라 이러한 작은 앱들을 통합하고 렌더링하는 책임을 지게 될 host라는 주 메인 애플리케이션을 구축할 수 있습니다.\n\n\n\n다양한 서브 애플리케이션을 통합하는 다른 방법들이 있습니다. 빌드 시간 통합, 실행 시간 통합, 서버 측 통합 등이 있어요. 이것은 마이크로 프론트엔드가 무엇인지에 대한 개요를 제공합니다.\n\n## 마이크로 프론트엔드 프로젝트 설정\n\n이 프로젝트에서는 호스트/애플리케이션을 설정하고, 2개의 리액트 컴포넌트 remote-a 및 remote-b를 호스팅하고 있습니다. 그리고 host로 호스트하고 있어요.\n\n```js\n# 모든 애플리케이션을 담을 폴더 생성\nmkdir vite-react-micro-frontend \ncd vite-react-micro-frontend\n\n# 호스트 애플리케이션 생성\nnpx create-vite host --template react\ncd host\nnpm install\nnpm install @originjs/vite-plugin-federation --save-dev\ncd ..\n\n# remote-a 애플리케이션 생성\nnpx create-vite remote-a --template react\ncd remote-a\nnpm install\nnpm install @originjs/vite-plugin-federation --save-dev\ncd ..\n\n# remote-b 애플리케이션 생성\nnpx create-vite remote-b --template react\ncd remote-b\nnpm install\nnpm install @originjs/vite-plugin-federation --save-dev\ncd ..\n\n# Visual Code 편집기를 해당 폴더에서 열기\ncode .\n```\n\n\n\n이제 세 개의 React 앱이 생성되었습니다.\n\n계속하기 위해 두 개의 원격 애플리케이션의 vite.config.js 파일을 수정해야 합니다.\n\nremote-a의 경우 vite.config.js 파일을 수정할 수 있습니다.\n\n```js\n// remote-a/vite.config.js\n\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport federation from '@originjs/vite-plugin-federation'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    federation({\n      name: \"remote_a\",\n      filename: \"remoteEntry.js\",\n      exposes: {\n        \"./App\": \"./src/App\",\n      },\n      shared: [\"react\", \"react-dom\"],\n    })\n  ],\n  build: {\n    modulePreload: false,\n    target: \"esnext\",\n    minify: false,\n    cssCodeSplit: false,\n  },\n})\n```\n\n\n\n\nFor remote-b, we can amend the `vite.config.js` file as follows:\n\n```js\n// remote-a/vite.config.js\n\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport federation from '@originjs/vite-plugin-federation'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    federation({\n      name: \"remote_b\",\n      filename: \"remoteEntry.js\",\n      exposes: {\n        \"./App\": \"./src/App\",\n      },\n      shared: [\"react\", \"react-dom\"],\n    })\n  ],\n  build: {\n    modulePreload: false,\n    target: \"esnext\",\n    minify: false,\n    cssCodeSplit: false,\n  },\n})\n```\n\nTo make the same modification for remote-b's project, you should edit the `vite.config.js` file. The only difference is the name of the federation. Make sure to change it accordingly.\n\nNext, navigate to the `package.json` file and define a separate port for each remote project. Remember, only one project can run on each port.\n\n\n\n지금은 package.json의 remote-a를 다음과 같이 유지하고 있어요:\n\n```js\n{\n  \"name\": \"remote-a\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite --port 2020\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview --port 2020\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@originjs/vite-plugin-federation\": \"^1.3.5\",\n    \"@types/react\": \"^18.2.66\",\n    \"@types/react-dom\": \"^18.2.22\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-plugin-react\": \"^7.34.1\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.6\",\n    \"vite\": \"^5.2.10\"\n  }\n}\n```\n\n그리고 remote-b의 package.json은 다음과 같아요:\n\n```js\n{\n  \"name\": \"remote-b\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite --port 4000\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview --port 4000\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@originjs/vite-plugin-federation\": \"^1.3.5\",\n    \"@types/react\": \"^18.2.66\",\n    \"@types/react-dom\": \"^18.2.22\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-plugin-react\": \"^7.34.1\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.6\",\n    \"vite\": \"^5.2.0\"\n  }\n}\n```\n\n\n\n지금 React 앱을 호스트하게 변경해주세요. 호스트의 프로젝트인 vite.config.js 파일을 수정해야 합니다.\n\n```js\n// host/vite.config.js\n\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport federation from '@originjs/vite-plugin-federation'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    federation({\n      name: \"app\",\n      remotes: {\n        remoteA: \"http://localhost:2020/assets/remoteEntry.js\",\n        remoteB: \"http://localhost:4000/assets/remoteEntry.js\",\n      },\n      shared: [\"react\", \"react-dom\"]\n    })\n  ],\n})\n```\n\n이제 host 프로젝트로 remoteA와 remoteB를 가져올 수 있습니다. 시연 목적으로, host의 App.js 파일에 remoteA와 remoteB를 가져올 것입니다. 아래 코드에서 확인할 수 있습니다.\n\n```js\nimport { useState } from 'react'\nimport reactLogo from './assets/react.svg'\nimport viteLogo from '/vite.svg'\nimport './App.css'\nimport RemoteA from \"remoteA/App\"\nimport RemoteB from \"remoteB/App\"\n\nfunction App() {\n  const [count, setCount] = useState(0)\n  return (\n    <>\n      <section>\n        <div>\n          <div>\n            <a href=\"https://vitejs.dev\" target=\"_blank\">\n              <img src={viteLogo} className=\"logo\" alt=\"Vite 로고\" />\n            </a>\n            <a href=\"https://react.dev\" target=\"_blank\">\n              <img src={reactLogo} className=\"logo react\" alt=\"React 로고\" />\n            </a>\n          </div>\n          <h1>호스트</h1>\n          <div className=\"card\">\n            <button onClick={() => setCount((count) => count + 1)}>\n              현재 카운트: {count}\n            </button>\n            <p>\n              <code>src/App.jsx</code>를 편집하고 저장하여 HMR을 테스트하세요.\n            </p>\n          </div>\n          <p className=\"read-the-docs\">\n            Vite 및 React 로고를 클릭하여 더 많이 알아보세요.\n          </p>\n        </div>\n      </section>\n      <section><RemoteA /></section>\n      <section><RemoteB /></section>\n    </>\n  )\n}\n\nexport default App\n```\n\n\n\n## 프로젝트 실행하기\n\n원격 서버 A와 원격 서버 B의 터미널로 이동하여 프로젝트를 빌드하고 정적 빌드 프로젝트를 제공하세요.\n\n```js\nnpm run build\nnpm run preview\n```\n\n이렇게 하면 몇 가지 Js 파일이 생성되고 어플리케이션을 미리보기할 수 있는 URL이 제공됩니다. 해당 URL을 브라우저에서 열어보세요.\n\n\n\n호스트 앱을 실행하세요. 호스트 앱 터미널로 이동해서 다음 명령어를 입력한 후 엔터 키를 누르세요.\n\n```js\nnpm run dev\n```\n\n이제 원격 앱인 remote-a 및 remote-b 앱이 호스트 앱 내에서 추가 구성 요소로 원활하게 통합되는 것을 관찰하세요. 이것은 Micro Frontends의 우아함을 보여줍니다. 호스트 애플리케이션은 이러한 원격 구성 요소를 동적으로 검색하고 통합합니다.\n\n저는 세 가지 다른 React 애플리케이션인 remote-a, remote-b 및 호스트 애플리케이션을 통합된 환경 내에서 운영하는 것을 보여줬습니다. 이것은 Micro Frontends 패러다임의 대표적 예시입니다. 이 React 애플리케이션을 개발할 때 어떤 거대한 프레임워크도 사용하지 않아서 명확성을 유지하기 위해 그랬습니다. 자유롭게 시도해보세요. 솔직히 말해서, 저도 React+Vite로 Micro Frontends를 처음 사용해봅니다.\n\n\n\n## 결론\n\n마지막으로, React와 Vite를 활용하여 @originjs/vite-plugin-federation이 향상시킨 Micro Frontends의 구축은 웹 애플리케이션 개발을 위한 모듈식이며 확장 가능한 프레임워크를 제공합니다. 이 방법론은 팀이 다양한 프로젝트 구성 요소에 대해 독립적으로 작업하고 협업 및 지속가능성을 촉진할 수 있습니다. 이 설정을 실험해보면 웹 개발 활동에서 Micro Frontends의 유연성과 견고함을 직접 체험할 수 있습니다.\n\n마지막까지 읽어 주셔서 감사합니다.\n\n더 많이 알고 싶다면 저를 소개하는 링크를 통해 연락해 주세요.\n\n\n\n제 다음 블로그를 게시할 때 알림을 받으려면 구독해 주세요. 다음에 또 만나요! \n\n# 쉽고 명료한 영어로 🚀\n\nIn Plain English 커뮤니티의 일원이 되어줘서 감사합니다! 떠나시기 전에:\n\n- 반드시 박수를 보내고 작가를 팔로우해 주세요️👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼에서도 만나보세요: Stackademic | CoFeed | Venture | Cubed\n- PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요","ogImage":{"url":"/assets/img/2024-05-12-ExploringMicroFrontendsandImplementationwithReactVite_0.png"},"coverImage":"/assets/img/2024-05-12-ExploringMicroFrontendsandImplementationwithReactVite_0.png","tag":["Tech"],"readingTime":10},{"title":"iFrame가 리스너를 제거하고 React는 알지 못한다 ","description":"","date":"2024-05-12 18:44","slug":"2024-05-12-iFramewipesoutlistenersandReactdoesnotknowaboutit","content":"\n\n# 개요\n\n이 기사에서는 부모 창과 자식 iFrame 간에 메시지를 보내는 방법을 보여드리고 싶어요. 이 과정에서 iFrame이 리스너를 어떻게 지우는지에 대해 흥미로운 점을 발견했어요. 걱정하지 마세요, 나아가면서 스크린샷을 게시할 거에요. [GitHub 링크](https://github.com)\n\n즐겁게 공부하세요!\n\n# iFrame이란 무엇인가요?\n\n\n\niFrame 또는 인라인 프레임은 부모 웹페이지 내에 다른 문서를 로드하는 HTML 요소입니다.\n\n# iFrame을 사용하는 곳은 어디인가요?\n\niFrame은 이미 있는 HTML 안에 HTML을 포함시키고 싶을 때나 신뢰할 수 없거나 제3자 스크립트를 백그라운드에서 실행하고 싶을 때 사용합니다. 즉, 광고 섹션을 웹사이트에 표시하거나 YouTube 비디오를 넣고 싶을 때 iFrame을 사용할 수 있습니다. 주로 iFrame을 사용하는 경우는 제3자 사이트/콘텐츠를 호스팅하는 것입니다.\n\n# iFrame 생성하기\n\n\n\n제가 만든 프로젝트는 간단한 React 앱(v18.2.0)입니다. 부모 위젯(App.tsx)은 iFrame 컴포넌트(IFrame.tsx)를 로드합니다. 두 컴포넌트가 마운트될 때 모두 메시지 이벤트를 수신하기 위해 이벤트 리스너를 추가합니다. 이벤트 리스너는 컴포넌트가 마운트 해제될 때 제거됩니다. 부모 컴포넌트는 자바스크립트의 postMessage 함수를 사용하여 iFrame에 메시지를 보냅니다.\n\nApp.tsx\n\n```js\nimport React, { useEffect, useRef } from \"react\";\nimport IFrame from \"./iFrame\";\n\nconst App: React.FC = () => {\n const refs = useRef<HTMLIFrameElement>(null);\n\n useEffect(() => {\n   window.addEventListener(\"message\", processMessage, false);\n   return () => window.removeEventListener(\"message\", processMessage);\n }, []);\n\n\n const processMessage = (event: MessageEvent) => {\n   if (event.origin !== \"http://localhost:8080\") {\n     return;\n   }\n   console.log(\"parent Event Listener\", event);\n };\n\n\n const buttonClick = (event: React.MouseEvent) => {\n   event.stopPropagation();\n   if (refs.current === null) {\n     return;\n   }\n\n   refs?.current?.contentWindow?.postMessage(\"부모에서 보낸 메시지\", \"*\");\n };\n return (\n   <div>\n     <button\n       style={ margin: \"10px\", marginLeft: \"0px\" }\n       onClick={buttonClick}\n     >\n       자식에게 메시지 보내기\n     </button>\n     <IFrame ref={refs} />\n   </div>\n );\n};\n\nexport default App;\n```\n\nIFrame.tsx\n\n\n\n```js\nimport React, { useEffect, useState, forwardRef, ForwardedRef } from \"react\";\n\n\ninterface IFrameProps {\n ref: ForwardedRef<HTMLIFrameElement>;\n}\n\nconst IFrame = forwardRef<HTMLIFrameElement, IFrameProps>((prop, ref) => {\n const [message, setMessage] = useState('');\n const iframeRef = ref as React.MutableRefObject<HTMLIFrameElement>;\n useEffect(() => {\n   console.log(\"mounted\");\n   iframeRef?.current?.contentWindow?.addEventListener(\n     \"message\",\n     processMessage,\n     false\n   );\n   return () => {\n     console.log(\"unmounted\");\n     iframeRef?.current?.contentWindow?.removeEventListener(\n       \"message\",\n       processMessage,\n       false\n     );\n   };\n }, [iframeRef?.current]);\n\n\n const processMessage = (event: MessageEvent) => {\n   console.log(\"iFrame Event Listener\");\n   if (event.origin !== \"http://localhost:8080\") {\n     return;\n   }\n\n\n  const newMessage = message.concat(event?.data)\n  setMessage(newMessage);\n\n\n };\n\n\n return (\n   <div>\n     <iframe id=\"1\" {...prop} ref={ref} srcDoc={message}></iframe>\n   </div>\n );\n});\n\n\nexport default IFrame;\r\n```\n\n리스너가 올바르게 마운트되었는지 확인하기 위해 iFrame에서 getEventListeners(window)을 실행했습니다. iFrame에서 'message' 이벤트를 수신 대기하는 리스너를 확인할 수 있었습니다. 보안 대책으로 악의적인 사용자로부터의 메시지를 무시하도록 origin을 확인해야 합니다.\n\n<img src=\"/assets/img/2024-05-12-iFramewipesoutlistenersandReactdoesnotknowaboutit_0.png\" />\n\n# 화면에서 보이는 모습\n```\n\n\n\n<img src=\"/assets/img/2024-05-12-iFramewipesoutlistenersandReactdoesnotknowaboutit_1.png\" />\n\n버튼을 클릭하면 메시지가 iFrame 안에 나타납니다.\n\n<img src=\"/assets/img/2024-05-12-iFramewipesoutlistenersandReactdoesnotknowaboutit_2.png\" />\n\n이 모든 것이 정말 기뻤어요. 그러나 이곳에서 문제가 발생했습니다. 다시 메시지를 iFrame으로 보내려고 시도했을 때 iFrame UI가 변경되지 않았습니다. iFrame 안에서 \"부모로부터 온 메시지\"를 여러 번 보기를 기대했는데 그런 일은 일어나지 않았습니다. 버튼 클릭 시 UI가 매번 업데이트되지 못했다는 것 같았어요.\n\n\n\n<img src=\"/assets/img/2024-05-12-iFramewipesoutlistenersandReactdoesnotknowaboutit_3.png\" />\n\n내 콘솔 로그를 확인해 보니, 이벤트 리스너를 언마운트한 후에 출력하는 `unmounted`가 아무런 발생하지 않았어. 이것은 React가 버튼 클릭 후 iFrame의 이벤트 리스너를 제대로 언마운트하지 않았음을 확인했어. (재표현)\n\nuseEffect의 의존성 배열을 건드리면서 리스너를 다시 마운트해 보았지만, 모든 시도가 실패했어. 자식에게 메시지를 여러 번 보내도, 자식은 첫 번째 메시지만 듣더라고.\n\n# 그래서 어떻게 하면 제대로 동작시킬 수 있을까?\n\n\n\n더 궁금해져서, 처음 메시지가 도착한 후에 다시 이벤트 리스너를 확인해 봤어요. 여기서 문제를 발견했어요.\n\n![이미지](/assets/img/2024-05-12-iFramewipesoutlistenersandReactdoesnotknowaboutit_4.png)\n\n첫 번째 메시지가 도착한 후에 iFrame에는 어떠한 리스너도 연결되어 있지 않았어요. 마치 어떻게든 첫 번째 메시지가 도착한 후에 리스너들이 제거된 것처럼 보였어요.\n\n조금 더 실험해 본 결과, srcDoc 요소에 문제가 있는 것을 발견했어요. 따라서, 상태가 변경될 때 srcDoc 요소가 iFrame의 새 메시지를 가리키게 되었어요. 이 변경으로 인해 iFrame은 iFrame과 관련된 모든 이벤트 리스너를 모두 제거하고 리액트는 아무것도 모르게 되었어요 🫢.\n\n\n\n그래서 React는 iFrame이 그것을 하는지 모릅니다. 왜냐하면 React에게는 iFrame에 대한 참조가 추가/제거되어야 하는데, 참조가 절대 변경되지 않기 때문에 React는 이벤트 리스너를 마운트하거나 언마운트하지 않습니다.\n\n이 문제를 해결하기 위해 iFrame에 정적 HTML을 추가했으며, 메시지가 도착할 때마다 기존 HTML에 추가합니다. 이는 srcDoc가 새 HTML이 아니기 때문에 iFrame에 첨부된 이벤트 리스너를 지우지 않습니다.\n\n```js\nimport React, { useEffect, forwardRef, ForwardedRef } from \"react\";\n\n\ninterface IFrameProps {\n  ref: ForwardedRef<HTMLIFrameElement>;\n}\n\n\nconst html = `<html>\n<body>\n<div id=\"changeText\" value=\"changeText\">Hello Div</div>\n<button value=\"replyButton\" id=\"replyButton\">Reply to parent</button>\n<script>\n// Get the button element\nvar button = document.getElementById(\"replyButton\");\n\n\n// click event listener\nbutton.addEventListener(\"click\", function() {\n  console.log('sending message to parent');\n  window.parent.postMessage('Message from Child. Listen to me!');\n});\n</script>\n</body>\n</html>`;\n\n\nconst IFrame = forwardRef<HTMLIFrameElement, IFrameProps>((prop, ref) => {\n  const iframeRef = ref as React.MutableRefObject<HTMLIFrameElement>;\n  useEffect(() => {\n    console.log(\"mounted\");\n    iframeRef?.current?.contentWindow?.addEventListener(\n      \"message\",\n      processMessage,\n      false\n    );\n    return () => {\n      console.log(\"unmounted\");\n      iframeRef?.current?.contentWindow?.removeEventListener(\n        \"message\",\n        processMessage,\n        false\n      );\n    };\n  }, [iframeRef?.current]);\n\n\n  const processMessage = (event: MessageEvent) => {\n    console.log(\"iFrame Event Listener\");\n    if (event.origin !== \"http://localhost:8080\") {\n      return;\n    }\n\n\n    const node = document.createElement(\"div\");\n    const textNode = document.createTextNode(event?.data);\n    node.appendChild(textNode);\n    iframeRef?.current?.contentWindow?.document.body.appendChild(textNode);\n  };\n\n\n  return (\n    <div>\n      <iframe id=\"1\" {...prop} ref={ref} srcDoc={html}></iframe>\n    </div>\n  );\n});\n\n\nexport default IFrame;\r\n```\n\n# 요약\n\n\n\n- 부모와 자식 간의 간단한 메시지 통신이 작동하지 않는 이유에 대해 공유했어요. iFrame에서 srcDoc 요소를 변경할 경우 작동하지 않아요.\n- 이를 해결하기 위해 iFrame에 HTML을 삽입하고 지속적으로 추가하면 됩니다. 이렇게 하면 iFrame이 이벤트 리스너를 지워 버리는 것을 방지할 수 있어요.","ogImage":{"url":"/assets/img/2024-05-12-iFramewipesoutlistenersandReactdoesnotknowaboutit_0.png"},"coverImage":"/assets/img/2024-05-12-iFramewipesoutlistenersandReactdoesnotknowaboutit_0.png","tag":["Tech"],"readingTime":7},{"title":"초보 퍼블리셔를 위한 HTML 완벽 가이드","description":"","date":"2024-05-02 00:58","slug":"2024-05-02-AComprehensiveGuidetoHTMLforBeginners","content":"\n\n<img src=\"/assets/img/2024-05-02-AComprehensiveGuidetoHTMLforBeginners_0.png\" />\n\n# 목차\n\n- 소개\n- HTML이란 무엇인가?\n- HTML 작성 방법\n- HTML 문서 구조\n- HTML 요소의 구성\n- 일반적인 HTML 태그\n- 일반적인 HTML 속성\n- 첫 번째 HTML 파일 만들기\n- 추가 학습 자료\n- 결론\n\n# 소개\n\n<div class=\"content-ad\"></div>\n\n개발자 여정을 시작하면 웹사이트의 기본 구조를 만드는 데 도움이 되는 HTML을 이해하는 것이 중요합니다. HTML은 온라인 리소스 간의 링크 지원을 위해 만들어졌으며 이는 웹을 구축하는 혁명적인 단계로 작용했습니다.\n\n그러나 웹 개발의 맥락에서 HTML은 웹사이트의 내용과 관련이 있습니다. 웹페이지에 뼈대와 구조를 제공하는 뼈대 역할을 수행한다고 생각해보세요. HTML을 잘 이해하면 CSS로 스타일을 지정하고 JavaScript로 조작할 수 있는 기능적인 웹사이트를 만들 수 있습니다.\n\n2024년 현재 95% 이상의 웹사이트가 HTML을 사용하고 있습니다.\n\n본 문서는 HTML에 대한 포괄적인 안내서 역할을 하며, HTML의 기본 개념, HTML 작성 방법, 일반적인 태그와 속성, HTML 파일 작성 및 HTML 코딩에 사용되는 일반 텍스트 편집기에 대한 안내, 마지막으로 HTML 학습에 도움이 되는 추가 자료를 제공할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# HTML은 정확히 무엇인가요?\n\n1989년 팀 버너스-리에 의해 만들어진 HTML은 월드 와이드 웹의 핵심 언어로 작동합니다. HyperText Markup Language의 약자인 HTML은 하이퍼링크를 통해 다른 웹사이트 간에 탐색할 수 있도록 하는 웹의 중심 요소입니다.\n\n마크업 언어로서, HTML은 HTML 파일 내의 주석을 사용하여 페이지를 표시합니다. 이러한 주석은 브라우저에 렌더링되지 않지만 내부적으로 작동하여 콘텐츠를 일반 대중에게 표시하는 방법을 브라우저에 알려줍니다.\n\n집을 짓기 시작할 때, 튼튼한 기초가 마련되어야 하며 구조적으로 견고하게 유지되어야 합니다. 마찬가지로 HTML은 웹사이트를 구축하는 데 필요한 기초로, 웹상에서 콘텐츠를 제시하기 위한 구조와 의미를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n계속하기 전에 HTML이 주로 프로그래밍 언어가 아닌 마크업 언어로 간주된다는 점을 참고하세요. HTML은 구조적인 목적을 제공하므로 프로그래밍 언어로 간주되지 않는다는 주장이 있습니다.\n\n# HTML 작성 방법\n\nHTML 문서는 브라우저에 렌더링할 내용을 알려주는 요소로 구성된 표준 구조를 따릅니다.\n\n기본 HTML 요소에는 시작 태그와 종료 태그, 내용이 포함되어 있고 속성과 값이 포함될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n사람들처럼 적절한 HTML 구조는 `head`와 `body`를 갖추고 있어야 합니다. `head` 요소에는 메타데이터를 추가하고, `body`에는 웹페이지에 표시될 정보가 포함됩니다. `body` 태그에는 페이지에 표시할 내용만 넣어야 하며, 그 외의 모든 것은 `body` 안에 들여쓰기해야 합니다.\n\n# HTML 문서 구조\n\n기본 HTML 구조는 다음과 같습니다:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <!-- 여기에 메타데이터를 삽입합니다 -->\n    <!-- 메타데이터에는 웹페이지에 대한 정보가 포함됩니다 -->\n    <title></title>\n  </head>\n  <body>\n    <!-- body에는 웹페이지 내에서 표시될 내용이 포함됩니다 -->\n  </body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n- `!DOCTYPE html`: 이것은 HTML에서의 첫 번째 코드 줄입니다. HTML 버전을 명시하며 선언으로 알려져 있습니다. 브라우저가 산업 표준을 준수하도록 합니다.\n\n- ```html lang=\"en\"``/html``: 이는 HTML 문서의 시작과 끝 태그입니다. 'lang' 속성을 포함하고 있으며 이는 'en' 값으로 추가되어 페이지 언어를 영어로 지정합니다.\n\n- `head``/head`: 이는 페이지에 대한 메타데이터를 포함합니다.\n\n- `title``/title`: 이는 브라우저의 제목 표시줄에 표시될 페이지 제목을 포함합니다.\n\n<div class=\"content-ad\"></div>\n\n\n**body**: 웹페이지에서 보이는 내용을 포함합니다.\n\n# HTML 요소의 구조\n\n![HTML 요소 구조](/assets/img/2024-05-02-AComprehensiveGuidetoHTMLforBeginners_1.png)\n\n다양한 HTML 요소는 웹 브라우저에 정보를 전달하는 데 도움이 됩니다. 위 다이어그램에서 HTML 요소는 태그(시작 태그와 종료 태그)로 지정됨을 볼 수 있습니다. *몇몇 요소는 종료 태그가 필요하지 않을 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n속성은 요소에 추가 정보를 제공하는 반면 값은 추가된 속성에 대한 추가 정보를 제공합니다. 예를 들어 앵커 요소를 살펴보겠습니다:\n\n```js\n<a href=\"링크 주소\">내용</a>\n\n<!-- 여는 <a>는 여는 태그를 나타냅니다 -->\n<!-- href는 앵커 태그의 하이퍼텍스트 참조를 나타내는 속성입니다 -->\n<!-- 링크 주소가 값입니다 -->\n<!-- 닫는 </a>는 종료 태그를 나타냅니다 -->\n```\n\n# 흔한 HTML 태그\n\n총 142개가 넘는 HTML 태그가 존재하며, 각각이 HTML 문서 내에서 다른 수준에서 역할을 수행합니다. HTML 코딩 중 대부분 마주치게 되는 필수 요소들을 정리했습니다.\n\n<div class=\"content-ad\"></div>\n\n대부분의 HTML 요소는 여는 태그와 닫는 태그를 가지고 있어요.\n\n여는 태그에는`<`와 `>` 사이에 요소가 들어가요. 그에 반해, 닫는 태그(해당하는 경우)는 요소 이름 앞에 슬래시(`/`)가 있는 `<`와 `>`로 묶인 요소를 포함하고 있어요.\n\n중요한 HTML 태그들은 다음과 같아요:\n\n- 제목(H1 — H6): 제목은 웹페이지의 컨텐츠 계층을 정의하며, `h1`이 가장 중요하고 `h6`가 가장 중요하지 않아요. 문서에 낮은 계층의 제목 요소를 추가하는 것은 새로운 하위 섹션을 시작한다는 것을 의미해요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<h1>Hello World</h1> <!-- 가장 중요한 제목 -->\n <h6>hello world</h6> <!-- 하위 제목 -->\n```\n\n2. 단락(p): 명시적인 문서를 제시하는 데 도움이 되는 단락을 추가할 수 있습니다.\n\n```js\n<p>This is your paragraph content</p>\n```\n\n3. 링크(a): 앵커 요소는 하이퍼링크를 만들어줍니다. 이를 통해 웹 페이지 간 또는 동일 페이지의 섹션 간을 이동할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이미지를 HTML 문서에 추가하려면 `img` 태그를 사용할 수 있어요. 지금까지 보신 태그들과는 달리 이미지 태그는 자체적으로 닫는 태그이기 때문에 별도의 종료 태그가 필요하지 않아요.\n\n이미지 요소에는 이미지 원본을 지정하는 (src) 속성이 반드시 필요해요. 이미지가 로드되지 않을 경우 화면 낭독기의 접근성을 향상시키기 위해 (alt) 속성을 추가하는 것도 도움이 돼요.\n\n```js\n<img src=\"blah.jpg\" alt=\"blah doing blah\" />\n <!-- alt 속성은 이미지에 대한 중요한 메타데이터를 제공하여 구글 검색 결과 페이지 순위를 높이는 데 도움이 돼요 -->\n```\n\n<div class=\"content-ad\"></div>\n\n5. `div` 태그: `div` 태그는 유사한 콘텐츠를 그룹화하고 스타일을 적용하기 위한 일반적인 블록 수준 컨테이너 요소입니다. 이 태그는 CSS로 스타일이 적용되거나 JavaScript로 조작되지 않는 이상 문서 내용에 영향을 미치지 않습니다.\n\n일반적으로 HTML 문서는 div들의 모음이라고 말합니다. 다른 태그들이 `div` 요소 내에 중첩될 수도 있고, div들이 다른 div들 안에 중첩될 수도 있습니다. 이것을 ‘HTML 문서 트리’라고 합니다.\n\n아래는 HTML 문서 트리를 보여주며 요소들이 서로 어떻게 중첩되어 있는지 보여주는 다이어그램입니다.\n\n![HTML document tree diagram](/assets/img/2024-05-02-AComprehensiveGuidetoHTMLforBeginners_2.png)\n\n<div class=\"content-ad\"></div>\n\n6. 목록(ul)(ol)(li): 목록은 순서가 있는(ol) 경우와 순서가 없는(ul) 경우가 있습니다. 순서가 있는 목록을 만들려면, 시작하는 `ol` 태그와 닫는 `/ol` 태그를 코딩하세요. 여기에 리스트 항목 태그 `li``/li`를 중첩하여 들여쓰기를 해야 합니다.\n\n글머리 기호(불릿 포인트)를 만들려면, 그냥 순서가 없는 목록 요소에 리스트 항목(li)을 중첩하면 됩니다.\n\n따라서 식료품 목록의 글머리 기호를 작성하려면, 다음과 같이 코딩해야 합니다:\n\n```js\n- Eggs\n- Butter\n- Flour\n- Sugar\n```\n\n\n<div class=\"content-ad\"></div>\n\n위 내용을 한글로 번역하면 이렇게 될 거에요:\n\n<img src=\"/assets/img/2024-05-02-AComprehensiveGuidetoHTMLforBeginners_3.png\" />\n\n- 일반적인 HTML 태그를 배웠으니 이제 일반적인 HTML 속성들로 넘어가 봅시다.\n\n# 일반적인 HTML 속성들\n\n<div class=\"content-ad\"></div>\n\nHTML 속성은 콘텐츠에 나타나지 않는 요소에 대한 추가 정보를 제공합니다.\n\n이 속성들은 항상 요소의 시작/열림 태그에서 지정되며 일반적으로 값이 할당됩니다. 이름/값은 속성 쌍입니다. (name=\"value\"). 속성 값은 따옴표로 묶어야 함을 유의하십시오.\n\n또한 모든 HTML 요소가 속성을 필요로 하는 것은 아니며 모든 속성이 값을 필요로 하는 것은 아닙니다(이를 부울 속성이라고 함). HTML 학습을 더 진행하면 이러한 개념들을 이해하는 것이 더 쉬워질 것입니다.\n\n일반적인 HTML 속성은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n- (src) 속성: source 속성(src)은 이미지 링크를 값으로 하는 `img` 요소에서 유용합니다. `img` 요소에 (src) 속성이 추가되지 않으면 브라우저가 렌더링할 이미지를 알 수 없습니다. `img src=\"이미지 링크\"/`\n- (href) 속성: HTML 문서의 하이퍼링크 대상을 정의하며 값은 링크 대상을 지정합니다. 앵커`a` 요소에 (href) 속성이 추가되지 않으면 방문자가 링크를 클릭해도 브라우저에서 어디로도 이동하지 않습니다. `a href=\"링크\"`링크 텍스트`/a`\n- (class)와 (id) 속성: 이들은 CSS를 활용한 스타일링과 JavaScript를 활용한 조작을 통해 HTML 요소에 추가 정보와 스타일을 제공합니다.\n- (lang) 속성: 웹 페이지의 언어를 지정하는 필수적인 속성으로 `html` 요소의 시작 태그에 추가해야 합니다. 웹 브라우저와 검색 엔진에 도움이 되며, 페이지 언어가 영어인 경우 `html lang=\"en\"``/html`로 지정합니다.\n- (alt) 속성: 필수적인 속성은 아니지만 `img` 요소에 (alt)를 추가하는 것은 좋은 HTML 관행으로 간주됩니다. 대체 텍스트를 추가하면 저시력을 가진 방문자 등에게 사이트 접근성을 높이고 이미지가 제대로 렌더링되지 않을 때에도 대비할 수 있습니다. `img src=\"cat.jpg\" alt=\"고양이 잠자는 모습\" /`\n\n더 많은 속성이 있으며, 이를 효과적으로 활용하는 방법을 배우면 HTML 문서를 향상시킬 수 있습니다. 기억해야 할 점은 HTML 속성은 HTML 요소 내부에서 사용되는 특별한 단어로 요소의 동작을 제어합니다.\n\n# 첫 번째 HTML 파일 생성하기\n\nHTML을 사용하기 위해 다음 단계를 따르세요:\n\n<div class=\"content-ad\"></div>\n\n- 텍스트 편집기 다운로드하기: 텍스트 편집기는 텍스트 파일을 변경, 편집, 생성 및 열 수 있는 컴퓨터 프로그램이에요. 기본적으로 코드를 작성하는 데 도움을 줍니다. HTML 코딩용 여러 텍스트 편집기가 있어요. 내가 좋아하는 몇 가지는 Visual Studio Code, Notepad++(Windows), Sublime Text(Mac) 등이 있어요.\n- 텍스트 편집기를 다운로드한 후, 열리면 에디터 창이 나타날 거에요. 여기서 첫 번째 HTML 코드를 작성할 거에요.\n- `!DOCTYPE html`로 페이지를 선언한 다음, `html lang=\"en\"`로 언어를 영어로 설정하는 `html` 엘리먼트로 시작해보세요.\n- `html` 엘리먼트 내에 `head`와 `body` 엘리먼트를 중첩해 주세요.\n- `head` 엘리먼트 안에 `title` 엘리먼트를 중첩하고, 콘텐츠를 `My first HTML page`로 설정하여 페이지에 제목을 부여하세요.\n- `body` 내부에 `h1`와 `p` 엘리먼트를 중첩하고, 전자에는 \"My first Heading\", 후자에는 \"My first paragraph\"를 내용으로 설정해 주세요.\n\n다음과 같은 모습이어야 해요:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>My first HTML page</title>\n  </head>\n  <body>\n    <h1>My first Heading</h1>\n    <p>My first paragraph</p>\n  </body>\n</html>\n```\n\n7. 다음으로, 컴퓨터에 방금 생성한 파일을 저장하고 (.html) 확장자를 할당해 주세요.\n\n<div class=\"content-ad\"></div>\n\n8. 완성된 파일을 보려면 저장된 파일을 더블 클릭하여 열어주세요. 그러면 기본 브라우저에서 열릴 거에요. 추가한 HTML 파일에 따라 웹 페이지가 표시될 거에요.\n\n9. 축하해요, 친구야! 첫 번째 HTML 파일을 만들었어, 정말 자랑스러워!\n\n![image](/assets/img/2024-05-02-AComprehensiveGuidetoHTMLforBeginners_4.png)\n\n10. 보이는 대로, 꽤 기본적인 페이지에요. 마음대로 편집해봐도 돼. 텍스트 편집기에서 파일을 수정하여 이미지, 양식, 링크 및 기타 요소를 추가해 동적인 웹 페이지를 만들 수 있어. 변경 사항을 저장하지 않으면 브라우저에 반영되지 않으니 주의해주세요.\n\n<div class=\"content-ad\"></div>\n\n# 더 배우기 위한 자료\n\nHTML 마스터링 여정을 계속하려면, 내가 개발자 여정에서 도움을 받은 몇 가지 가치 있는 자원들이 있어요:\n\n- freeCodeCamp: freeCodeCamp의 '반응형 웹 디자인' 과정은 개발 경력을 가속화하는 데 도움이 되었어요. 이름에서 알 수 있듯이 무료이며 계정 생성만 필요해요.\n- Per Borgen의 HTML과 CSS: 저에게 항상 초심자에게 추천하는 동영상이에요. Per가 개념을 단순하게 설명하고 듣는 이를 참여시키는 데 뛰어난 일을 했어요.\n- The Odin Project: 컴퓨터 기초, HTML, CSS, Flexbox 등에 대한 실전 소개가 있어요.\n\n온라인 튜토리얼이나 추천 도서 중 어느 쪽을 선호하든, HTML을 배울 수 있는 방법에 부족함이 없어요. 당신에게 가장 적합한 자원을 선택하기 위해 조사를 하고 선택해보세요!\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\nHTML은 웹의 언어이며 개발자 여정에 발을 딛을 때 HTML에 대한 좋은 이해는 디지털 랜드스케이프에서 유용하고 보람찬 것으로 입증될 것입니다.\n\nHTML만을 이용하여 간단한 웹사이트를 제작할 수 있지만, 아름답고 기능적인 웹사이트를 만들기 위해서는 CSS와 JavaScript에 대한 좋은 이해가 미래에 필수적일 것입니다. 인간과 같이, HTML은 뼈대에 비유할 수 있고, CSS는 피부에, JavaScript는 웹사이트의 두뇌에 비유할 수 있습니다.\n\n원하는 것을 배울 때에는 연습과 인내가 중요하다는 것을 기억하세요. HTML은 동적이고 상호작용적인 웹 경험을 만들어내기 위한 흥미진진한 모험의 시작에 불과합니다. 개발자 여정에서 행운이 함께 하길 바랍니다.\n\n<div class=\"content-ad\"></div>\n\n행복한 코딩 친구들!","ogImage":{"url":"/assets/img/2024-05-02-AComprehensiveGuidetoHTMLforBeginners_0.png"},"coverImage":"/assets/img/2024-05-02-AComprehensiveGuidetoHTMLforBeginners_0.png","tag":["Tech"],"readingTime":9},{"title":"HTMX가 개발자들에게 인기 없는 이유","description":"","date":"2024-05-02 00:56","slug":"2024-05-02-SorryImNotDigginHTMX","content":"\n![image](/assets/img/2024-05-02-SorryImNotDigginHTMX_0.png)\n\n언제나 새로 나오는 기술에 대해 비판적이라고 해도 되겠죠. 그래서 HTMX에 대해 처음 들었을 때부터 팬이 아니었어요.\n\nHTMX는 \"자바스크립트 대신 HTML에서 직접 현대적인 브라우저 기능에 액세스할 수 있도록 하는 라이브러리\"라고 설명되어 있는데, HTMX를 사용하는 첫 번째 단계는 자바스크립트 라이브러리를 포함해야 한다는 거잖아요:\n\n```js\n<script\n  src=\"https://unpkg.com/htmx.org@1.9.10\"\n  integrity=\"sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC\"\n  crossorigin=\"anonymous\"\n></script>\n```\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:960/1*Z6JScodi-nf6CEtuSxaBmw.gif)\n\n내게 더 감명깊게 만들었을 것은 JavaScript 이외의 언어를 사용했다면 였을 겁니다. 예를 들어, WebAssembly를 사용하는 Blazor나 기술적으로는 여전히 JavaScript인데 Python으로 작성된 Brython 같은 것들이 있죠. 색다른 솔루션은 인정하지만, JavaScript를 사용하지 않는다고 주장하면서 실제로는 JavaScript를 사용한다면, 자바스크립트 라이브러리가 계속 늘어난다는 장난이었을까 하는 생각이 들었어요.\n\n안타깝게도 이것은 농담이 아니예요.\n\n하지만, 이것 때문에 HTMX 아이디어를 뭔가 좀 무시해버렸죠. 그러나, X와 Reddit 등 어디서나 계속 HTMX에 대해 듣고 있는데, 특히 이것이 프로젝트에 통합하기가 얼마나 쉬운지에 대해 말이죠. 정말로 일반적인 JavaScript보다 얼마나 더 쉬운지. 얼마나 쉬운가요? 쉬워요? 쉬워요?? 제가 정말로 이해하지 못했습니다.\n\n<div class=\"content-ad\"></div>\n\n하지만 이 프레임워크에 대해 더 알고 싶게 된 이유는 Jason Knight의 HTMX, \"Framework Stupid\"이 심도깊게 늘어난 것이었습니다! Knight의 글은 항상 재밌게 읽히며, 그는 몇 가지 탄탄한 주장을 펼쳐 HTMX가 진지하게 다가오지 않는다면, 나도 진지하게 받아들이지 않아도 된다는 것을 깨닫게 했습니다.\n\n일단, HTMX에 대해서 더 알려주는 몇 가지 핵심 \"모티베이션\" 포인트가 있으며, 이들 중 어느 것도 나에게는 정말 이해하기 어렵습니다.\n\n## 1. `<a>`와 `<form>`만이 HTTP 요청을 보낼 수 있는 이유는 무엇인가요?\n\n사실 아닙니다. `img` 태그도 마찬가지이며, `audio`, `video`, `iframe`, `embed`, `frame`과 `link`, `script`와 같은 미디어 태그도 HTTP 요청을 보낼 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 2. 클릭 및 제출 이벤트만 [HTTP 요청]을 트리거해야 하는 이유는 무엇인가요?\n\n(왜 첫 번째 항목에는 \"and\"라고 하고 두 번째 항목에는 \"&\"이라고 할까요? 일관성이 있을 것 같지 않나요? 어쨌든, 제가 지나치게 까다로운 것 같아요. 그들이 실제 현금 협찬을 받는 신생 기술인 것처럼 보이지는 않잖아요.)\n\n이 명제는 사실이 아닙니다. HTTP 요청은 나태 속성을 포함하는 이미지로 동적으로 트리거될 수 있습니다. 그리고 클릭 외에도 터치 이벤트도 있습니다. 물론 onload와 같이 HTTP 요청을 호출하는 명백한 방법뿐만 아니라 EventSource와 같이 뜻밖의 방법도 있습니다. 클릭 및 제출 외에도 HTTP 요청을 트리거하는 여러 방법이 많이 있습니다.\n\n## 3. 왜 GET 및 POST 메서드만 사용 가능해야 하나요?\n\n<div class=\"content-ad\"></div>\n\n이건 너가 빠져들 수 있는 토끼굴이야! 물론 계속해서 토론을 해왔고 또 해왔지만. 예를 들어, 이 W3C 권고서는 2009년 10월 20일에 발표됐고 또는 이 2011 스택익스체인지 스레드나 이 2012 W3C 버그 리포트에서 다뤄졌어.\n\n이건 여러 번 제안된 적이 있지만 항상 거부당했어. 왜 그럴까? HTML5 Working draft을 만드는 인간, 전설이자 신화인 이안 힉슨에 따르면:\n\n나에겐 이해가 돼!\n\n## 4. 왜 전체 화면만 교체할 수 있어야 할까?\n\n<div class=\"content-ad\"></div>\n\n웹사이트가 `테이블`과 `프레임`으로 만들어졌던 시절이 그립다면, 정말 행운아지! 요즘에는 React부터 Blazor까지 다양한 컴포넌트들이 있어서 옛 콘텐츠를 그대로 두고도 새로운 콘텐츠로 업데이트할 수 있는 독립적인 동적 요소들이 등장했어.\n\n하지만, 이 같은 기능은 예전부터 있었어. 2006년에 출시된 jQuery 1.0은 바로 이것을 수행하는 load() 메소드를 가지고 있었어:\n\n```js\n$(\"#result\").load(\"ajax/test.html #container\");\n```\n\n이와 같은 기능은 바닐라 JavaScript로도 아주 쉽게 할 수 있지:\n\n<div class=\"content-ad\"></div>\n\n```js\nlet resultElement = document.getElementById(\"result\");\n\nfetch(\"ajax/test.html\")\n  .then((response) => response.text())\n  .then((html) => {\n    let tempElement = document.createElement(\"div\");\n    tempElement.innerHTML = html;\n    let containerContent = tempElement.querySelector(\"#container\").innerHTML;\n    resultElement.innerHTML = containerContent;\n  })\n  .catch((error) => console.error(\"콘텐츠를 불러오는 중 오류가 발생했습니다:\", error));\n```\n\n![링크](https://miro.medium.com/v2/resize:fit:960/1*5bwk8lXsMpJK7xyn-LJ1-A.gif)\n\n# HTMX가 테이블에 무엇을 가져다주나요?\n\n그들의 동기에는 동의하지 않지만, 그들이 자바스크립트를 사용하고 있다는 점에서 그들이 자바스크립트 없는 시스템을 운영하고 있다고 주장하는 것에도 동의하지 않습니다. 그럼에도 불구하고 HTMX가 제게 어떻게 생활을 편하게 해줄 수 있을지 알고 싶었습니다. 이론에는 동의할 수 없을지라도 실제로는 맘에 들 수도 있지 않을까요?\n\n<div class=\"content-ad\"></div>\n\n그래서 나는 그들의 Hypermedia On Whatever you’d Like 라는 기사를 읽었어. 그 기사에서는 HOWL 스택에 대해 이야기하고 있었는데 (그렇기 때문에 \"you’d\" 가 소문자로 적힌 것... 나를 괴롭히는 것...). 이 기사는 JavaScript가 프런트엔드 개발의 기본 언어이기 때문에 백엔드에서도 사용할 필요가 있다는 압박(그들의 말)이 많다고 이야기하고 있어. 10년 이상 코딩을 해 온 나로써는 이 압박을 전혀 느낀 적이 없어. 마음대로 사용하거나, 이용주가 원하는대로 사용하면 돼. 웹사이트의 73%가 워드프레스를 실행하고 있다. 왜 PHP로 만들어진 웹사이트인 워드프레스 Headless CMS를 사용해야 할까?(너를 쳐다봐, 워드프레스 Headless CMS.) PHP가 오래된 언어인가? 나는 6개월마다 새로운 JavaScript 라이브러리를 채택하는 것보다는 PHP를 사용하는 게 좋다. 또 다른 더 인기 있는 대안도 많다는 거지.\n\n이 기사는 이렇게 마무리돼:\n\n… 하지만 그게 아니잖아?? 이들의 주장에 대해 이해할 수가 없어. React는 사이트의 3.5%에서 사용되고 있고, Node.js는 3%에서 사용되고 있다. PHP는 73%, ASP.NET은 6%를 차지하고 있다. JavaScript를 사용할 수는 있지만, 단일 옵션으로 고려해서는 안 된다.\n\n그들이 인용한 사이트 중 하나는 \"HTMX + Flask: 최신 Python 웹 앱, JavaScript 제외한 코스\"다. 이 코스는 Flask를 HTMX와 함께 사용하는 방법을 보여주는 3시간 강의인데, 단지 사용할 수 있다는 점 외에는, 왜 사용해야 하는지 이해가 안 가. JavaScript를 코딩하지 않고 사용하기 위한 것일까? 나는 더 이해하기 위해 이 코스를 듣고 싶지만, 그 기술을 그 이면을 이해하지 않고 사용하는 아이디어는 파괴적인 결과를 낼 수 있다. 자바스크립트나 CSS 기본 원리를 이해하지 않은 채 React나 Tailwind 같은 프레임워크를 사용하는 개발자들을 보면 그게 확실하게 확인된다.\n\n<div class=\"content-ad\"></div>\n\n![HTMX](https://miro.medium.com/v2/resize:fit:960/1*LovCpYqVf20IXXpi3VZ2JA.gif)\n\n# HTMX를 시도해보려면 어떤 점이 필요할까요?\n\n저가 HTMX를 사용하는 데 제일 막혀 있는 것은 그들의 동기, 실천 또는 문법에 동의하지 않아서가 아닙니다. 그들이 hyperscript.js를 만들어서 꽤 멋지다고 생각하기 때문에도 아닙니다. 또한 Knight가 그의 글에서 언급한 그들의 끔찍하게 유효하지 않고 접근하기 어려운 HTML 때문도 아닙니다. 저는 그 모든 것을 넘어서 볼 수 있습니다.\n\nHTMX를 시도해보게끔 만들기 위해 그들이 해야 할 일은 그들의 웹 사이트가 실제로 HTMX를 사용한다면 좋겠다는 것입니다. 그들의 웹 사이트는 꽤 간단하지만, HTMX를 실제로 사용해보여주기에 훌륭한 기회입니다. 홈페이지는 꽤 최소한이지만, 설명서 페이지는 그렇지 않습니다. 각 섹션에 대해 다른 페이지가 있는 모듈 시스템이 있고, 컨텐츠를 동적으로 가져오기 위해 HTMX를 사용하는 것은 HTMX의 능력을 보여줄 수 있는 좋은 방법이 될 것입니다. 눈으로 보는 것이 믿는 것이며, 그들 자신조차 사용하지 않을 때 어떤 것도 믿기 어렵습니다.\n\n<div class=\"content-ad\"></div>\n\nHTMX에 대한 생각이 어떻습니까? 그냥 또 다른 유행 용어인가요, 아니면 실제로 따라야 할 가치 있는 것인가요? 제 생각을 알려주세요!\n","ogImage":{"url":"/assets/img/2024-05-02-SorryImNotDigginHTMX_0.png"},"coverImage":"/assets/img/2024-05-02-SorryImNotDigginHTMX_0.png","tag":["Tech"],"readingTime":6},{"title":"도커 컨테이너 내부에 샘플 HTML 파일로 Apache 기본 웹 페이지 교체하기","description":"","date":"2024-05-02 00:54","slug":"2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5","content":"\n\n당신은 다음을 해야 합니다:\n\n- 샘플 HTML 파일을 만듭니다.\n- 이전 작업에서 사용한 Dockerfile을 사용합니다.\n- 도커 컨테이너 내의 기본 페이지를 이 샘플 HTML 파일로 교체합니다.\n\n<div class=\"content-ad\"></div>\n\nUbuntu 컨테이너를 생성하고 Apache2를 설치하세요 - 도커 과제 1\n\n새 이미지를 사용하여 컨테이너를 시작하고 여기에서 Apache 2 서비스를 시작하세요 - 도커 과제 2\n\nDocker 허브에서 이미지를 가져와 다른 머신에 Apache2를 설치하세요 - 도커 과제 3\n\n컨테이너를 실행한 후 자동으로 Apache2를 설치하는 Docker 파일을 생성하세요 - 도커 과제 4\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_0.png)\n\n## Git Hub Repository 링크를 확인하여 명령어를 복사하세요:\n\n# A. 샘플 HTML 파일 생성\n\n먼저, 이 과제를 수행하기 위한 EC2 인스턴스를 생성할 것입니다. EC2 인스턴스를 생성한 후 \"index.html\" 파일을 만들 것입니다.\n\n<div class=\"content-ad\"></div>\n\n단계 1: \"서비스\" 섹션으로 이동한 후 \"EC2\" 위에 커서를 올려주세요. \"인스턴스\"를 클릭하세요.\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_1.png)\n\n단계 2: \"인스턴스 시작\"을 클릭하세요.\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_2.png)\n\n<div class=\"content-ad\"></div>\n\n### 단계 3: \"이름 및 태그\" 섹션에서 \"이름\"을 \"Assignment 5\"로 선택합니다.\n\n![Assignment 5 step 3](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_3.png)\n\n### 단계 4: \"AMI\"를 \"Ubuntu\"로 선택합니다.\n\n![Assignment 5 step 4](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_4.png)\n\n<div class=\"content-ad\"></div>\n\nStep 5: \"인스턴스 유형\"을 \"t2.micro\"로 선택하고 키 페어(로그인)를 \"Docker\"로 설정하세요.\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_5.png)\n\nStep 6: \"공통 보안 그룹\"을 \"launch-wizard-9\"로 선택하세요.\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_6.png)\n\n<div class=\"content-ad\"></div>\n\n**7단계**: \"인스턴스 시작\"을 클릭합니다.\n\n![Step 7](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_7.png)\n\n**8단계**: \"(하이퍼링크(i-041c3e5b59ce92d00)\"를 클릭합니다.\n\n![Step 8](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_8.png)\n\n<div class=\"content-ad\"></div>\n\n**단계 9:** 인스턴스가 \"실행 중\" 상태가 될 것입니다. 인스턴스를 선택하고 \"연결\"을 클릭하세요.\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_9.png)\n\n**단계 10:** 다시 \"연결\"을 클릭하세요.\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_10.png)\n\n<div class=\"content-ad\"></div>\n\n11단계: 이 명령을 사용하여 머신을 업데이트하세요:\n\n```js\nsudo apt-get update\n```\n\n![링크](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_11.png)\n\n12단계: 이 명령을 사용하여 도커를 설치하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nsudo apt-get install docker.io -y\n```\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_12.png)\n\n단계 13: 다음 명령어를 사용하여 \"Docker\"에 액세스하기 위해 루트 사용자로 로그인하세요:\n\n```js\nsudo su -\n```\n\n<div class=\"content-ad\"></div>\n\nStep 14: 다음 명령어를 사용하여 \"Docker\" 상태를 확인해보세요:\n\n```js\nsystemctl status docker\n```\n\n<div class=\"content-ad\"></div>\n\n도커는 \"Active\" 상태입니다.\n\n단계 15: 이제, 다음 명령을 사용하여 index.html 파일을 만들겠습니다:\n\n```js\nsudo nano index.html\n```\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_15.png)\n\n<div class=\"content-ad\"></div>\n\n단계 2: index.html 파일에 더미 콘텐츠를 붙여넣기하세요.\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n<title>Page Title</title>\n</head>\n<body>\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n</body>\n</html>\n```\n\n<img src=\"/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_16.png\" />\n\n파일을 저장하려면 CTRL+X를 누르고 Y를 누르세요. \"Enter\"를 누르면 파일이 저장됩니다.\n\n<div class=\"content-ad\"></div>\n\n# B. 이전 작업에서 Dockerfile을 사용합니다\n\n단계 1: 이제, index.html 파일을 /var/www/html 위치에 추가할 것입니다. 다음 명령을 실행하세요:\n\n```js\nvim Dockerfile\n``` \n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_17.png)\n\n<div class=\"content-ad\"></div>\n\n```js\nFROM ubuntu\nRUN apt-get update\nRUN apt-get install apache2 -y\nRUN apt-get install apache2-utils -y\nRUN apt-get clean\nENTRYPOINT apache2ctl -D FOREGROUND\n```\n\n# C. 도커 컨테이너 내부에 있는 이 샘플 HTML 파일을 기본 페이지로 대체하기\n\n단계 1: 다음 명령을 Dockerfile에 추가하세요:\n\n```js\nADD index.html /var/www/html/\n```\n\n<div class=\"content-ad\"></div>\n\n```plaintext\n도커 파일의 table 태그를 Markdown 형식으로 변경하십시오.\n```\n\n<div class=\"content-ad\"></div>\n\n이 명령어를 사용해보세요:\n\n```js\ndocker build –t assignment5 .\n```\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_19.png)\n\n3단계: Docker 이미지가 \"assignment5\"로 성공적으로 생성됩니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_20.png\" />\n\n4단계: 이제 다음 명령을 사용하여 생성된 이미지를 사용하여 새 컨테이너를 만듭니다:\n\n```js\ndocker container run –itd --name testcont1 –p 89:80 assignment5\n```\n\n<img src=\"/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_21.png\" />\n\n<div class=\"content-ad\"></div>\n\n5단계: 컨테이너가 생성되었는지 확인하려면 다음 명령을 실행하세요:\n\n```js\ndocker container ls -a\n```\n\n<img src=\"/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_22.png\" />\n\n6단계: 다음 명령을 사용하여 컨테이너 내부로 이동하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\n도커 컨테이너 실행 -it testcont1 bash\n```\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_23.png)\n\n7단계: 다음 명령어를 실행하세요:\n\ncd /var/www/html/ — html 폴더 안으로 이동합니다.\n\n<div class=\"content-ad\"></div>\n\n\"HTML 디렉토리\"에 있는 파일을 확인하려면 \"ls\"를 입력하세요.\n\n```js\ncd /var/www/html\nls\n```\n\n<img src=\"/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_24.png\" />\n\n\"index.html\" 파일이 \"html\" 디렉토리에 있는 것을 확인할 수 있을 거예요.\n\n<div class=\"content-ad\"></div>\n\n8단계: 다음 명령을 실행하십시오. \"cat index.html\" 파일을 실행합니다. index 파일의 내용을 쉽게 확인할 수 있습니다.\n\n```js\ncat index.html\n```\n\n<img src=\"/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_25.png\" />\n\n9단계: 이제 \"인스턴스\"로 이동하고 \"Public IPV4 주소\" 섹션에서 \"열린 주소\"를 클릭하십시오.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_26.png)\n\n10단계: 13.233.195.209 IP 주소 뒤에 :89를 입력하세요. \"index.html\" 파일 내용이 열릴 것입니다.\n\n![이미지](/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_27.png)\n\n또한 이 도커 가이드를 읽어보세요:\n\n<div class=\"content-ad\"></div>\n\n프로덕션 환경에서 Docker를 사용하여 HTML 웹사이트를 컨테이너화했습니다 — Docker 사례 연구","ogImage":{"url":"/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_0.png"},"coverImage":"/assets/img/2024-05-02-ReplacetheApacheDefaultWebPageWithSampleHTMLFileInsideContainerDockerAssignment5_0.png","tag":["Tech"],"readingTime":7},{"title":"(LWC)에서 레코드 상세 페이지로 이동하는 방법","description":"","date":"2024-05-02 00:52","slug":"2024-05-02-NavigatingtoRecordDetailPagesinSalesforceLightningWebComponentsLWC","content":"\n\n![이미지](/assets/img/2024-05-02-NavigatingtoRecordDetailPagesinSalesforceLightningWebComponentsLWC_0.png)\n\nSalesforce Lightning Web Components (LWC)에서는 다른 페이지로 이동하는 것이 흔한 요구 사항입니다. 사용자가 링크를 클릭했을 때 레코드의 상세 페이지로 이동하는 시나리오가 있습니다. 이 게시물에서는 Salesforce가 제공하는 NavigationMixin을 사용하여 LWC에서 레코드 상세 페이지로 이어지는 클릭 가능한 링크를 만드는 과정을 안내해 드릴 것입니다.\n\nNavigationMixin 이해하기\n\nNavigationMixin은 Salesforce가 제공하는 클래스로, 레코드 상세 페이지, 새 레코드 생성 페이지 또는 외부 URL과 같은 다양한 페이지로 이동할 수 있게 해줍니다. Navigate 메서드를 제공하여 Lightning Experience에서 서로 다른 페이지로 이동할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n컴포넌트 설정하기\n\n우선, NavigationMixin을 사용하려면 컴포넌트의 JavaScript 컨트롤러에서 확장해야 합니다:\n\n```js\nimport { LightningElement, api, wire } from 'lwc';\nimport { NavigationMixin } from 'lightning/navigation';\n\nexport default class YourComponentName extends NavigationMixin(LightningElement) {\n    // 여기에 컴포넌트 코드를 작성하세요\n}\n```\n\n클릭 가능한 링크 만들기\n\n<div class=\"content-ad\"></div>\n\n자, 이제 한 테이블이 있다고 상상해봅시다. 각 행이 레코드를 나타내며 특정 필드를 클릭할 수 있도록 하고 싶습니다. 예를 들어, 클릭 가능한 이름 필드가 있는 테이블을 가정해 봅시다:\n\n```js\n| scope=\"row\">\n|     <div class=\"slds-truncate\" title={item.StepName}>\n|         <a data-id={item.Id} onclick={navigateToRecord}>{item.Name}</a>\n|     </div>\n| </td>\n```\n\n여기에서는 링크를 클릭할 때 navigateToRecord 함수를 호출하기 위해 onclick 이벤트 핸들러가 추가되었습니다. 또한, 우리가 탐색하려는 레코드의 ID를 저장하기 위한 data-id 속성도 추가되었습니다.\n\n레코드의 상세 페이지로 이동하기\n\n<div class=\"content-ad\"></div>\n\n그 다음으로 JavaScript 컨트롤러에서 navigateToRecord 함수를 정의할 거에요. 이 함수는 NavigationMixin.Navigate 메소드를 사용하여 레코드의 상세 페이지로 이동합니다:\n\n```js\nnavigateToRecord(event) {\n    const recordId = event.currentTarget.dataset.id;\n    \n    this[NavigationMixin.Navigate]({\n        type: 'standard__recordPage',\n        attributes: {\n            recordId: recordId,\n            actionName: 'view'\n        }\n    });\n}\n```\n\n이 함수에서는 클릭한 링크의 data-id 속성에서 레코드 ID를 검색하여 NavigationMixin.Navigate 메소드에 전달하여 레코드의 상세 페이지로 이동할 거에요.\n\n마무리\n\n<div class=\"content-ad\"></div>\n\n그게 다야! 이제 테이블에서 이름 링크를 클릭하면 해당 레코드의 상세 페이지로 이동합니다. 이 접근법을 따라 테이블의 어떤 필드든 클릭 가능하게 만들어 해당 레코드의 상세 페이지로 이동할 수 있습니다. 이를 통해 구성 요소의 사용성을 크게 향상시키고 더 원활한 사용자 경험을 제공할 수 있습니다. 항상 구성 요소를 충분히 테스트하여 기대한 대로 작동하는지 확인하는 것을 잊지 마세요.","ogImage":{"url":"/assets/img/2024-05-02-NavigatingtoRecordDetailPagesinSalesforceLightningWebComponentsLWC_0.png"},"coverImage":"/assets/img/2024-05-02-NavigatingtoRecordDetailPagesinSalesforceLightningWebComponentsLWC_0.png","tag":["Tech"],"readingTime":3},{"title":"CSS Link Errors 이해 및 해결 방법 알아보기","description":"","date":"2024-05-02 00:51","slug":"2024-05-02-UnderstandingCSSLinkErrorsandHowtoFixThem","content":"\n이미 완벽한 CSS 코드를 작성했는데 HTML 페이지에서 제대로 작동하지 않았던 적이 있나요? 그렇다면 걱정하지 마세요. 이 문제는 많은 개발자, 특히 초보자들이 자주 마주치는 문제입니다. 종종 문제는 CSS 코드 자체가 아니라 HTML과 CSS 사이의 링크 과정에 있을 수 있습니다.\n\n## 흔한 CSS 링킹 오류\n\nHTML에 CSS를 연결할 때 흔히 발생하는 두 가지 오류가 있습니다:\n\n- 올바르지 않은 파일 경로: HTML 링크 태그에서 CSS 파일의 올바른 경로를 지정하지 않았을 때 발생하는 오류입니다.\n- 링크 태그 내 올바르지 않은 구문 또는 오타: HTML 링크 태그의 꺾쇠 괄호 사이에 입력한 텍스트에 오류가 있을 때 발생합니다.\n\n<div class=\"content-ad\"></div>\n\n## 일반적인 오류 해결 방법\n\n각각의 오류에 대해 어떻게 해결할지 알아봅시다.\n\n## 잘못된 파일 경로\n\nCSS 파일을 위한 링크 태그 예시:\n\n<div class=\"content-ad\"></div>\n\n위의 줄에서 \"styles.css\"는 CSS 파일의 경로입니다. 이 파일 경로는 절대 경로 또는 상대 경로일 수 있습니다.\n\n- 상대 경로: HTML 파일과 CSS 파일이 동일한 디렉토리에 있을 경우 경로는 간단히 파일 이름만 쓰면 됩니다.\n- 절대 경로: CSS 파일이 다른 디렉토리에 있을 경우 전체 경로를 명시해야 합니다.\n\n만약 href 속성의 경로가 프로젝트 디렉토리 내 CSS 파일의 위치와 정확히 대응하지 않으면 CSS가 HTML에 적용되지 않을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 링크 태그에 있는 구문 오류 또는 오타\n\n이겈는 매우 명확하며, 링크 태그 내에 철자 오류와 같은 것일 수 있습니다. \"`\"를 닫는 것을 잊는 것과 같은 사소한 문제는 CSS가 적용되지 않게 할 수 있습니다.\n\n```js\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"\n```\n\n위 예시에서 rel 뒤에 \"=\"가 빠져있고, 마지막에 \"`\"가 빠져있습니다. 이는 CSS가 올바르게 링크되지 않게 만들 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 추천 사항\n\n- 링크 태그에서 철자와 구문 오류를 반드시 확인하세요.\n- 프로젝트의 디렉터리 구조에 대한 경로를 올바르게 이해하고 정의해야 합니다.\n- CSS 파일에 대한 다른 디렉터리가 포함된 복잡한 설정인 경우, 절대 경로를 사용하는 것이 가장 좋습니다.\n- 브라우저에 내장된 개발자 도구를 활용하세요. 이를 통해 CSS 파일이 올바르게 로드되는지 여부를 확인할 수 있습니다.\n\n이러한 흔한 오류를 이해하고 이러한 해결책을 적용함으로써 대부분의 CSS 링킹 오류를 방지할 수 있습니다. 고품질 웹 개발은 세부 사항에 주의를 기울이고 작은 하지만 중요한 측면을 숙달하는 데 있습니다. 이러한 작은 측면들을 마스터하면 높은 품질의 웹 개발로 나아갈 수 있을 것입니다.\n","ogImage":{"url":"/assets/img/2024-05-02-UnderstandingCSSLinkErrorsandHowtoFixThem_0.png"},"coverImage":null,"tag":["Tech"],"readingTime":2},{"title":"로컬호스트에서 Serve로 HTML 파일 실행하기","description":"","date":"2024-05-02 00:50","slug":"2024-05-02-RunningHTMLFileswithServeinLocalhostAStep-By-StepGuide","content":"\n웹 개발은 화려한 웹 사이트를 만들 수 있도록 다양한 도구와 프레임워크를 제공하는 역동적인 분야입니다. HTML은 온라인에서 볼 수 있는 콘텐츠에 구조를 제공하여 모든 웹 페이지의 기본입니다. 많은 개발자들에게는 시작점이 되곤 합니다. 초보 웹 개발자들이 가장 많이 마주치는 장애물 중 하나는 HTML 파일을 로컬에서 실행하는 방법을 배우는 것입니다. 이 글은 간단하지만 효과적인 serve 패키지를 사용하여 로컬호스트에서 HTML 파일을 제공하는 프로세스를 안내합니다.\n\n# 로컬호스트란 무엇인가요?\n\n프로세스에 대해 자세히 살펴보기 전에, 먼저 \"localhost\"가 무엇인지 이해해보겠습니다. 로컬호스트는 '이 컴퓨터'라는 기본 호스트명을 의미합니다. 서버의 문맥에서 localhost는 당신의 컴퓨터가 서버로 작용한다는 것을 의미합니다. 컴퓨터에서 서버를 실행할 때, 주로 localhost 호스트명에 매핑된 IP 주소인 127.0.0.1을 통해 액세스됩니다.\n\n# Serve란 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\nServe는 Next.js의 제작자들로부터 나온 작고 견고한 도구이며, 정적 사이트, 싱글 페이지 웹 앱 또는 정적 파일을 제공하는 데 사용할 수 있는 Node.js 패키지입니다. 배포하기 전에 로컬에서 프로덕션 빌드를 실행하는 데 훌륭하며, 클라이언트나 팀원들과 진행 상황을 공유하거나 동일한 네트워크의 다양한 기기에서 테스트하는 데도 편리합니다.\n\n그러므로, 우리는 localhost에서 HTML 파일을 실행하는 방법에 대한 serve 사용 안내서를 단계별로 준비해 보겠습니다.\n\n# 필수 준비물\n\n시작하기 전에 컴퓨터에 Node.js와 npm (node package manager)이 설치되어 있어야 합니다. 아직 설치하지 않으셨다면, 공식 Node.js 웹사이트에서 다운로드할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 단계 1: Serve 설치하기\n\n터미널 창을 열고 다음 명령을 입력하여 serve를 전역적으로 설치하세요:\n\n```js\nnpm install -g serve\n```\n\n이 명령은 serve 패키지를 전역적으로(-g) 설치하기 위해 npm을 사용하여 컴퓨터의 모든 디렉토리에서 사용할 수 있도록 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 단계 2: 프로젝트 디렉토리로 이동하기\n\nHTML 파일이 있는 디렉토리로 이동해주세요. 이 작업은 cd (디렉터리 변경) 명령어를 사용하여 디렉토리 경로를 입력하면 됩니다. 예를 들면:\n\n```js\ncd / 당신의 / 디렉토리 / 경로;\n```\n\n# 단계 3: Serve 명령어 실행하기\n\n<div class=\"content-ad\"></div>\n\n이제 프로젝트를 실행해보는 시간입니다. 터미널에 다음 명령어를 입력해주세요:\n\n```js\nserve;\n```\n\n이 명령어는 현재 디렉토리에서 정적 서버를 시작하며, 이제 해당 서버에 로컬로 접근할 수 있습니다.\n\n# 단계 4: 사이트에 접속하기\n\n<div class=\"content-ad\"></div>\n\nserve 명령을 실행한 후, 다음과 유사한 출력이 나타날 것입니다:\n\n```js\n   ┌────────────────────────────────────────────┐\n   │                                            │\n   │   서빙 중!                                 │\n   │                                            │\n   │   - 로컬:            http://localhost:5000│\n   │   - 네트워크에서:    http://192.168.0.5:5000│\n   │                                            │\n   │   로컬 주소가 클립보드에 복사되었습니다!     │\n   │                                            │\n   └────────────────────────────────────────────┘\n```\n\n웹 브라우저를 열고 http://localhost:5000 으로 이동하세요. HTML 파일이 웹사이트로 서빙되는 것을 확인할 수 있을 거예요!\n\n# 단계 5: 서버 정지\n\n<div class=\"content-ad\"></div>\n\n작업을 마치면 터미널로 돌아가서 CTRL + C를 눌러 서버를 중지할 수 있어요.\n\n# 마치는 중\n\n여기까지입니다! 로컬호스트에서 HTML 파일을 실행하는 방법에 대한 간단하고 단계별 안내서를 살펴보았어요. Serve는 사이트를 배포하기 전에 테스트할 때 특히 개발 프로세스를 보다 효율적으로 만들어 주는 강력한 도구에요.\n\n웹 개발에 입문한지 얼마 안 됐든, 숙련된 전문가든간에, 이 기본 사항을 숙달하여 작업 흐름을 개선하고 생산성을 향상시킬 필요가 있어요. 그러니 다음에 HTML 파일을 작업하고 로컬로 실행해야 할 때, 기억해두세요. 단지 serve가 필요할 뿐이에요.\n\n<div class=\"content-ad\"></div>\n\n계속 코딩해보고 계속 탐험해봐요!\n","ogImage":{"url":"/assets/img/2024-05-02-RunningHTMLFileswithServeinLocalhostAStep-By-StepGuide_0.png"},"coverImage":null,"tag":["Tech"],"readingTime":3},{"title":"CSS로 간단한 스크롤 효과를 만들기","description":"","date":"2024-05-02 00:49","slug":"2024-05-02-AMAZINGSCROLLEFFECTSINSIMPLECSS","content":"\n\n오늘은 CSS의 멋진 기능에 대해 이야기할 거에요. 여러분, 아래 데모를 한 번 봐주세요\n\n데모\n\n친구들, 제 믿어주세요. 이건 순수한 CSS에요. 오늘 이 포스트에서는 스크롤 시 위와 같은 애니메이션을 달성하는 방법을 공유할 거에요. 👍\n\n![이미지](/assets/img/2024-05-02-AMAZINGSCROLLEFFECTSINSIMPLECSS_0.png)\n\n<div class=\"content-ad\"></div>\n\n친구들, 지금 코드펜에 팔로워가 한 명이에요. 라이브 데모와 멋진 팁을 보려면 코드펜에서 저를 팔로우해 주세요 😆\n\n또한, 제가 일일.dev 스쿼드도 시작했어요. 모두족이 되어서 완전한 업데이트를 받아 보세요.\n\n# 기본 설정\n\n우선 두 개의 h1이 들어 있는 각기 다른 두 개의 div가 있다는 것을 명확히 해 드리겠어요. 각 h1은 Poppins 글꼴로 되어 있고, flex 방법을 사용하여 가운데 정렬됐습니다. 우리가 시작하는 템플릿 안에는 더 이상 내용이 없어요.\n\n<div class=\"content-ad\"></div>\n\n# 애니메이션\n\n여기서 일이 시작됩니다. h1이 스크롤될 때 애니메이션을 적용하기 전에 일반적으로 애니메이션을 만들어야 합니다. @keyframes 속성을 사용하여 애니메이션을 만드세요. 저의 경우 다음과 같은 간단한 애니메이션을 만들었습니다.\n\n```js\n@keyframes revealing {\n  from {\n    color: gray;\n    margin-left: 100vw;\n    filter: blur(50px);\n    opacity: 0.5;\n  }\n  to {\n    margin: 0px;\n    filter: blur(0px);\n    opacity: 1;\n  }\n}\n```\n\n이제 h1에 해당 애니메이션을 적용하세요. 한 가지를 기억하세요. 시간을 언급하지 마세요. 좋아요 👍\n\n<div class=\"content-ad\"></div>\n\n```jsx\n표시되는 것처럼 보이도록 애니메이션을 추가해주세요\n\n```js\nanimation: revealing;\n```\n\n# 애니메이션 타임라인\n\n애니메이션 타임라인 속성을 사용하여 특정 단계에 애니메이션이 도달하는 시간을 지정합니다.\n\n<div class=\"content-ad\"></div>\n\n참고: 이 기능은 실험적인 기능입니다.\n\n우리 경우에는 특정 요소가 화면에 나타날 때를 의미합니다. 따라서 타임라인을 적용하려면 다음 속성을 지정하세요.\n\n```js\nanimation-timeline: view(block);\n```\n\n이제 애니메이션이 동작하기 시작할 것입니다. 하지만 완전히 작동하지는 않는 것 같습니다.\n\n<div class=\"content-ad\"></div>\n\n# Animation Range\n\n애니메이션 범위는 뷰포트 관점에서 애니메이션이 시작되고 완료되는 시점을 지정합니다. 뷰포트는 얼마나 많은 부분이 커버되거나 포함되는지에 따라서 결정됩니다. 이렇게 지정할 수 있어요.\n\n```js\nanimation-range: cover 0% cover 50%;\n```\n\n<div class=\"content-ad\"></div>\n\n해당 요소의 가려짐이 0%인 상태에서 시작해야 하며, 해당 요소가 50% 정도 가려질 때 애니메이션이 끝나야 합니다.\n\n수학이 어려우시거나 이 주제를 이해하기 어려우신 경우를 대비해 스크롤에 따라 애니메이션이 동작하는 웹사이트가 도움이 될 거에요. 이 동작 범위를 시각화해주는 도구가 있답니다. 아래 링크를 제공할게요.\n\n# 축하드립니다 🎉\n\n와우, 애니메이션을 완료했네요. 보셨나요? 자바스크립트 라이브러리인 GSAP 같은 것들보다 이 방법이 얼마나 간단한지요. 이 방법을 사용하면 작업을 단 3줄로 끝낼 수 있어요. 잘가요 👋\n\n<div class=\"content-ad\"></div>\n\n# 마지막으로\n\n친구들, 나는 다음 블로깅 계정을 시작했어. 그들을 주의 깊게 지켜봐, 내가 뉴스, 도구 업데이트와 그 외 많은 것들을 줄 테니까. 만약 그들 중 일부를 팔로우하지 못하더라도, 일일 업데이트는 daily.dev에서 받을 수 있어. 지금 daily.dev에 가입해봐 ⚡. 그 다음, 내 웹사이트를 확인해봐. 방금 2.3 버전이 출시됐어. 지금 citeal과 Codepen도 확인해봐\n\n# 링크 🔗\n\n스크롤로 움직이는 애니메이션\nDaily.dev\nCodepen\nCiteal\n\n<div class=\"content-ad\"></div>\n\n# 읽어주셔서 감사합니다 😉 좋은 하루 보내세요\n\n크레딧: 개발자 Ed 채널의 비디오 썸네일","ogImage":{"url":"/assets/img/2024-05-02-AMAZINGSCROLLEFFECTSINSIMPLECSS_0.png"},"coverImage":"/assets/img/2024-05-02-AMAZINGSCROLLEFFECTSINSIMPLECSS_0.png","tag":["Tech"],"readingTime":3},{"title":"Node.js와 Nodemailer로 이미지를 포함한 HTML 이메일 템플릿 보내기","description":"","date":"2024-05-02 00:48","slug":"2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer","content":"\n\n<img src=\"/assets/img/2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer_0.png\" />\n\n웹 개발의 세계에서는 맞춤화된 시각적으로 매력적인 이메일 템플릿을 보내는 것이 사용자 참여를 크게 향상시킬 수 있습니다. 이 블로그 글에서는 Node.js, Nodemailer 및 이미지가 포함된 HTML 이메일 템플릿을 사용하여 이를 어떻게 구현할 수 있는지 살펴보겠습니다.\n\n# 준비 단계 설정\n\n코드에 들어가기 전에 필요한 패키지가 설치되어 있는지 확인해 보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install nodemailer html-to-text\n```\n\n# 단계 1: HTML 이메일 템플릿 생성하기\n\n내장된 이미지가 포함된 멋진 HTML 이메일 템플릿을 만들어보세요. 간단한 예제를 함께 보여드리겠습니다:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>당신의 멋진 이메일</title>\n</head>\n<body>\n    <h1>안녕하세요 [수신자]님!</h1>\n    <p>이것은 내장 이미지가 포함된 샘플 이메일입니다:</p>\n    <img src=\"cid:uniqueImageCID\" alt=\"내장 이미지\">\n    <p>읽어주셔서 감사합니다!</p>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n이 예제에서 우리는 src 속성을 \"cid:uniqueImageCID\"로 설정한 `img` 태그를 가지고 있습니다. 이 cid 표기법은 포함된 이미지를 참조하는 데 사용됩니다.\n\n# 단계 2: Node.js 및 Nodemailer 설정\n\n이제, 이메일을 보내기 위한 Node.js 스크립트를 설정해 봅시다. 다음 코드가 포함된 파일(예: sendEmail.js)을 생성하십시오:\n\n```js\nconst nodemailer = require('nodemailer');\nconst fs = require('fs');\nconst { promisify } = require('util');\n\nconst readFileAsync = promisify(fs.readFile);\n\nasync function sendEmail() {\n    // HTML 템플릿 및 이미지 파일 읽기\n    const htmlTemplate = await readFileAsync('path/to/your/template.html', 'utf-8');\n    const imageAttachment = await readFileAsync('path/to/your/image.png');\n\n    // Nodemailer 전송기 생성\n    const transporter = nodemailer.createTransport({\n        service: 'gmail',\n        auth: {\n            user: 'your.email@gmail.com',\n            pass: 'your-email-password',\n        },\n    });\n\n    // 이메일 보내기\n    const info = await transporter.sendMail({\n        from: 'your.email@gmail.com',\n        to: 'recipient.email@example.com',\n        subject: '제목',\n        html: htmlTemplate,\n        attachments: [{\n            filename: 'image.png',\n            content: imageAttachment,\n            encoding: 'base64',\n            cid: 'uniqueImageCID', // HTML 템플릿에서 참조됨\n        }],\n    });\n\n    console.log('이메일 전송 완료:', info.messageId);\n}\n\nsendEmail();\n```\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n이메일 받은 편지함을 확인해보세요. 메일에 내장된 이미지가 있을 거에요.\n\n# 결론\n\nNode.js와 Nodemailer를 사용하여 HTML 이메일 템플릿을 보내고 이미지를 삽입하는 것은 사용자들과 시각적으로 매력적이고 맞춤형 커뮤니케이션을 만들 수 있는 강력한 방법입니다. 다양한 HTML 디자인으로 실험을 해보고 매료적인 이메일 콘텐츠로 관객을 유도해 보세요.\n\nHTML 템플릿을 자유롭게 수정하고, 특정 요구사항에 기반해 기능을 확장해 보세요.\n\n<div class=\"content-ad\"></div>\n\n좋은 이메일 보내기!","ogImage":{"url":"/assets/img/2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer_0.png"},"coverImage":"/assets/img/2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer_0.png","tag":["Tech"],"readingTime":3}],"page":"62","totalPageCount":71,"totalPageGroupCount":4,"lastPageGroup":11,"currentPageGroup":3},"__N_SSG":true}