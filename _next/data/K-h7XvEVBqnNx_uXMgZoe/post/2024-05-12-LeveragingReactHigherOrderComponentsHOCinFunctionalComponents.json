{"pageProps":{"post":{"title":"함수 컴포넌트에서 React 고차 컴포넌트HOC 활용하기","description":"","date":"2024-05-12 22:15","slug":"2024-05-12-LeveragingReactHigherOrderComponentsHOCinFunctionalComponents","content":"\n\n<img src=\"/assets/img/2024-05-12-LeveragingReactHigherOrderComponentsHOCinFunctionalComponents_0.png\" />\n\nReact Higher Order Components (HOC)은 React 애플리케이션에서 코드 재사용, 로직 공유 및 추상화를 위한 강력한 패턴입니다. 보통 클래스 컴포넌트와 관련이 있지만, 고차 컴포넌트는 함수형 컴포넌트와 함께 효율적으로 활용할 수도 있습니다. 이 글에서는 함수형 컴포넌트에서 고차 컴포넌트를 구현하고 활용하는 방법에 대해 살펴보겠습니다.\n\n고차 컴포넌트 이해하기:\n\n고차 컴포넌트는 컴포넌트를 인수로 받아 향상된 기능을 갖춘 새로운 컴포넌트를 반환하는 함수입니다. 인증, 권한 부여, 로깅 및 상태 관리와 같은 교차 관심사를 여러 컴포넌트에서 캡슐화하고 공유할 수 있도록 합니다.\n\n\n\n함수형 컴포넌트에서 고차 컴포넌트 구현하기:\n\n함수형 컴포넌트에서는 고차 컴포넌트를 일반 JavaScript 함수로 구현하며, 이 함수는 컴포넌트를 인수로 받아 새로운 함수형 컴포넌트를 반환합니다.\n\n다음 예제를 살펴보겠습니다:\n\n```js\nimport React from 'react';\n\nconst withLogging = (WrappedComponent) => {\n  const WithLogging = (props) => {\n    console.log('Component rendered:', WrappedComponent.name);\n    return <WrappedComponent {...props} />;\n  };\n\n  return WithLogging;\n};\n\nconst MyComponent = () => {\n  return <div>Hello, World!</div>;\n};\n\nconst EnhancedComponent = withLogging(MyComponent);\n\nexport default EnhancedComponent;\n```\n\n\n\n이 예시에서 withLogging은 렌더링된 컴포넌트의 이름을 콘솔에 로그하는 Higher Order Component입니다. 이는 컴포넌트(WrappedComponent)를 인수로 받아 원래 컴포넌트를 래핑하고 로깅 기능을 추가한 새로운 함수형 컴포넌트(WithLogging)를 반환합니다.\n\n함수형 컴포넌트에서 Higher Order Components 사용하기:\n\n한 번 Higher Order Component가 정의되면, 그것을 사용하여 함수형 컴포넌트를 래핑하여 향상시킬 수 있습니다. 다음은 withLogging Higher Order Component를 함수형 컴포넌트와 함께 사용하는 방법입니다.\n\n```js\nimport React from 'react';\n\nconst MyComponent = () => {\n  return <div>안녕, 세상!</div>;\n};\n\nconst EnhancedComponent = withLogging(MyComponent);\n\nconst App = () => {\n  return (\n    <div>\n      <EnhancedComponent />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n\n\n이 예시에서 MyComponent는 일반 함수형 컴포넌트이고, EnhancedComponent는 withLogging Higher Order Component를 MyComponent에 적용한 결과입니다. App 컴포넌트 내에서 EnhancedComponent를 렌더링하면 감싸진 컴포넌트의 이름(MyComponent)이 콘솔에 기록됩니다.\n\n함수형 컴포넌트와 Higher Order Components의 장점:\n\n- 코드 재사용을 촉진하고 교차 관심사의 캡슐화를 장려합니다.\n- 로직을 표현으로부터 분리하여 관심사의 분리를 가능하게 합니다.\n- 여러 Higher Order Components를 함께 조합할 수 있는 합성 기능을 향상시킵니다.\n- 컴포넌트를 보다 집중적이고 격리된 상태로 테스트할 수 있도록 돕습니다.\n\n결론\n\n\n\n리액트 고차 컴포넌트는 재사용 가능한 로직과 동작을 확장하는 강력한 방법을 제공합니다. 공통 기능을 고차 컴포넌트 내에 캡슐화함으로써, 개발자들은 리액트 애플리케이션에서 코드 구성, 유지 관리성, 그리고 재사용성을 향상시킬 수 있습니다. 인증, 로깅 또는 기타 교차 관심사를 구현하려는 경우, 고차 컴포넌트는 기능 컴포넌트 강화를 위한 유연하고 효과적인 해결책을 제공합니다.","ogImage":{"url":"/assets/img/2024-05-12-LeveragingReactHigherOrderComponentsHOCinFunctionalComponents_0.png"},"coverImage":"/assets/img/2024-05-12-LeveragingReactHigherOrderComponentsHOCinFunctionalComponents_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-LeveragingReactHigherOrderComponentsHOCinFunctionalComponents_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React Higher Order Components (HOC)은 React 애플리케이션에서 코드 재사용, 로직 공유 및 추상화를 위한 강력한 패턴입니다. 보통 클래스 컴포넌트와 관련이 있지만, 고차 컴포넌트는 함수형 컴포넌트와 함께 효율적으로 활용할 수도 있습니다. 이 글에서는 함수형 컴포넌트에서 고차 컴포넌트를 구현하고 활용하는 방법에 대해 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"고차 컴포넌트 이해하기:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"고차 컴포넌트는 컴포넌트를 인수로 받아 향상된 기능을 갖춘 새로운 컴포넌트를 반환하는 함수입니다. 인증, 권한 부여, 로깅 및 상태 관리와 같은 교차 관심사를 여러 컴포넌트에서 캡슐화하고 공유할 수 있도록 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수형 컴포넌트에서 고차 컴포넌트 구현하기:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수형 컴포넌트에서는 고차 컴포넌트를 일반 JavaScript 함수로 구현하며, 이 함수는 컴포넌트를 인수로 받아 새로운 함수형 컴포넌트를 반환합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 예제를 살펴보겠습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"withLogging\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"WrappedComponent\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"WithLogging\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"props\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Component rendered:'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"WrappedComponent\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"WrappedComponent\"\n            }), \" {\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"...props\"\n            }), \"} />\"]\n          })\n        }), \";\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"WithLogging\"\n        }), \";\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"MyComponent\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"Hello, World!\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \";\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EnhancedComponent\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"withLogging\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MyComponent\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EnhancedComponent\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예시에서 withLogging은 렌더링된 컴포넌트의 이름을 콘솔에 로그하는 Higher Order Component입니다. 이는 컴포넌트(WrappedComponent)를 인수로 받아 원래 컴포넌트를 래핑하고 로깅 기능을 추가한 새로운 함수형 컴포넌트(WithLogging)를 반환합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수형 컴포넌트에서 Higher Order Components 사용하기:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"한 번 Higher Order Component가 정의되면, 그것을 사용하여 함수형 컴포넌트를 래핑하여 향상시킬 수 있습니다. 다음은 withLogging Higher Order Component를 함수형 컴포넌트와 함께 사용하는 방법입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"MyComponent\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"안녕, 세상!\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \";\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EnhancedComponent\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"withLogging\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MyComponent\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"App\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"EnhancedComponent\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"App\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예시에서 MyComponent는 일반 함수형 컴포넌트이고, EnhancedComponent는 withLogging Higher Order Component를 MyComponent에 적용한 결과입니다. App 컴포넌트 내에서 EnhancedComponent를 렌더링하면 감싸진 컴포넌트의 이름(MyComponent)이 콘솔에 기록됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수형 컴포넌트와 Higher Order Components의 장점:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"코드 재사용을 촉진하고 교차 관심사의 캡슐화를 장려합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"로직을 표현으로부터 분리하여 관심사의 분리를 가능하게 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"여러 Higher Order Components를 함께 조합할 수 있는 합성 기능을 향상시킵니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"컴포넌트를 보다 집중적이고 격리된 상태로 테스트할 수 있도록 돕습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"리액트 고차 컴포넌트는 재사용 가능한 로직과 동작을 확장하는 강력한 방법을 제공합니다. 공통 기능을 고차 컴포넌트 내에 캡슐화함으로써, 개발자들은 리액트 애플리케이션에서 코드 구성, 유지 관리성, 그리고 재사용성을 향상시킬 수 있습니다. 인증, 로깅 또는 기타 교차 관심사를 구현하려는 경우, 고차 컴포넌트는 기능 컴포넌트 강화를 위한 유연하고 효과적인 해결책을 제공합니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}