{"pageProps":{"post":{"title":"리덕스-퍼시스트로 React 앱의 상태 유지하기","description":"","date":"2024-05-12 20:05","slug":"2024-05-12-PersistingStateinYourReactAppwithRedux-Persist","content":"\n\n프런트엔드 개발 세계에서 React는 주요한 역할을 하는 기술로 떠올랐어요. 컴포넌트 기반 아키텍처와 가상 DOM을 통해 사용자 인터페이스를 구축하는 데 강력한 도구로 작용해요. React 애플리케이션의 상태를 관리할 때 Redux는 예측 가능성과 디버깅의 용이성으로 인해 인기 있는 선택지에요. 그렇다면 Redux 상태를 페이지 새로고침이나 앱 재시작에 걸쳐 유지하려면 어떻게 해야 할까요? 이때 \"redux-persist\"가 등장해요.\n\nRedux-persist는 Redux와 완벽하게 통합되어 애플리케이션의 상태를 유지하도록 돕는 라이브러리에요. 이 글에서는 실용적인 코드 조각을 활용해 React 앱에서 redux-persist를 사용하는 방법을 살펴볼 거예요.\n\n# 상태 유지의 필요성\n\nredux-persist에 대해 자세히 알아보기 전에 React 애플리케이션에서 상태 유지가 필요한 이유를 이해하는 것이 중요해요. 대부분의 경우, 애플리케이션의 상태는 메모리에 저장되며 페이지를 새로고침하거나 앱을 닫았다가 다시 열 때 재설정돼요. 일부 애플리케이션에서는 이러한 동작이 수용 가능할 수 있지만, 사용자가 페이지를 떠나거나 새로고침한 후에도 사용자 데이터, 설정 또는 세션 정보를 저장하고 로드해야 하는 경우도 많아요.\n\n\n\n리덕스-퍼시스트는 이 문제에 간편한 해결책을 제공합니다. 이를 통해 Redux 스토어의 상태를 로컬 스토리지나 AsyncStorage(React Native 애플리케이션의 경우)와 같은 영구 저장 매체에 저장한 다음 앱을 로드할 때 해당 상태로 스토어를 재생성할 수 있습니다.\n\n이제 여러분의 리액트 애플리케이션에 이를 구현하는 방법을 살펴보겠습니다.\n\n# 시작하기\n\n먼저, 리액트 프로젝트에 리덕스가 설정되어 있는지 확인하세요. 아직 설정하지 않았다면 Redux를 설치하고 애플리케이션을 위한 스토어를 만들어야 합니다. 이번 시연을 위해 이미 준비된 리덕스 스토어가 있다고 가정하겠습니다.\n\n\n\n다음으로 redux-persist 라이브러리를 설치해야 합니다. npm 또는 yarn을 사용하여 다음과 같이 설치할 수 있습니다:\n\n```js\nnpm install redux-persist\n# 또는\nyarn add redux-persist\n```\n\n이제 redux-persist를 설치했으므로 Redux 스토어와 함께 작동하도록 구성할 수 있습니다.\n\n# 구성\n\n\n\n당신의 Redux 스토어 구성 파일에서 redux-persist로부터 persistReducer를 import하여 상태의 원하는 부분을 지속적으로 저장하도록 구성하세요. 어떤 리듀서와 그 리듀서의 어떤 속성을 지속적으로 저장할지 선택할 수 있습니다.\n\n```js\n// store.js\nimport { createStore } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // 사용할 저장 엔진 선택\nimport rootReducer from './reducers'; // 루트 리듀서 import\nconst persistConfig = {\n  key: 'root',\n  storage,\n  // 지속적으로 저장하려는 리듀서 지정\n  whitelist: ['user'], // 이 예시에서는 'user' 리듀서를 지속적으로 저장합니다\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = createStore(persistedReducer);\nexport const persistor = persistStore(store);\n```\n\n이 예시에서는 redux-persist를 사용하여 `user` 리듀서를 지속적으로 저장하도록 구성했지만, 이를 애플리케이션의 요구에 맞게 사용자 정의할 수 있습니다.\n\n# 앱 감싸기\n\n\n\n이제 Redux 스토어를 redux-persist로 구성했으니, redux-persist에서 제공하는 PersistGate 컴포넌트로 앱을 감싸야 합니다. 이 컴포넌트는 영속 상태가 검색되기 전에 앱이 렌더링되도록 보장합니다.\n\n```js\n// index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'; // PersistGate 가져오기\nimport { store, persistor } from './store';\nimport App from './App';\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n```\n\n# 사용법\n\nredux-persist가 설정된 상태에서는 React 컴포넌트에서 Redux를 평소처럼 사용할 수 있습니다. persistConfig에서 지정한 모든 상태는 자동으로 지속될 것이며 다시 수분화될 것입니다.\n\n\n\n```js\n// userReducer.js\nconst initialState = {\n  username: '',\n  email: '',\n  // ... other user-related properties\n};\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_USERNAME':\n      return {\n        ...state,\n        username: action.payload,\n      };\n    case 'SET_EMAIL':\n      return {\n        ...state,\n        email: action.payload,\n      };\n    // ... other reducer cases\n    default:\n      return state;\n  }\n};\nexport default userReducer;\n```\n\n위 예에서 'user' 리듀서에 대한 모든 변경 사항은 앱이 다시 시작되거나 페이지가 새로고침될 때 자동으로 유지되고 다시로드됩니다.\n\n# 결론\n\nRedux-persist는 React 애플리케이션의 상태 지속성을 제공하여 애플리케이션을 강화하는 강력한 라이브러리입니다. 이는 사용자가 로그인해야 하는 애플리케이션이나 사용자 선호 설정 및 세션 데이터를 저장하려는 애플리케이션에 매우 유용할 수 있습니다.\n```\n\n\n\n이 문서에 설명된 단계를 따라 하면 Redux를 사용하는 React 애플리케이션에 redux-persist를 쉽게 통합할 수 있습니다. 이를 통해 사용자들이 세션 및 페이지 새로고침 간에 데이터 지속성을 즐길 수 있게 되어, 더 견고하고 사용자 친화적인 애플리케이션을 만들 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-12-PersistingStateinYourReactAppwithRedux-Persist_0.png"},"coverImage":"/assets/img/2024-05-12-PersistingStateinYourReactAppwithRedux-Persist_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"프런트엔드 개발 세계에서 React는 주요한 역할을 하는 기술로 떠올랐어요. 컴포넌트 기반 아키텍처와 가상 DOM을 통해 사용자 인터페이스를 구축하는 데 강력한 도구로 작용해요. React 애플리케이션의 상태를 관리할 때 Redux는 예측 가능성과 디버깅의 용이성으로 인해 인기 있는 선택지에요. 그렇다면 Redux 상태를 페이지 새로고침이나 앱 재시작에 걸쳐 유지하려면 어떻게 해야 할까요? 이때 \\\"redux-persist\\\"가 등장해요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Redux-persist는 Redux와 완벽하게 통합되어 애플리케이션의 상태를 유지하도록 돕는 라이브러리에요. 이 글에서는 실용적인 코드 조각을 활용해 React 앱에서 redux-persist를 사용하는 방법을 살펴볼 거예요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"상태 유지의 필요성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"redux-persist에 대해 자세히 알아보기 전에 React 애플리케이션에서 상태 유지가 필요한 이유를 이해하는 것이 중요해요. 대부분의 경우, 애플리케이션의 상태는 메모리에 저장되며 페이지를 새로고침하거나 앱을 닫았다가 다시 열 때 재설정돼요. 일부 애플리케이션에서는 이러한 동작이 수용 가능할 수 있지만, 사용자가 페이지를 떠나거나 새로고침한 후에도 사용자 데이터, 설정 또는 세션 정보를 저장하고 로드해야 하는 경우도 많아요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"리덕스-퍼시스트는 이 문제에 간편한 해결책을 제공합니다. 이를 통해 Redux 스토어의 상태를 로컬 스토리지나 AsyncStorage(React Native 애플리케이션의 경우)와 같은 영구 저장 매체에 저장한 다음 앱을 로드할 때 해당 상태로 스토어를 재생성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 여러분의 리액트 애플리케이션에 이를 구현하는 방법을 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"시작하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저, 리액트 프로젝트에 리덕스가 설정되어 있는지 확인하세요. 아직 설정하지 않았다면 Redux를 설치하고 애플리케이션을 위한 스토어를 만들어야 합니다. 이번 시연을 위해 이미 준비된 리덕스 스토어가 있다고 가정하겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음으로 redux-persist 라이브러리를 설치해야 합니다. npm 또는 yarn을 사용하여 다음과 같이 설치할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install redux-persist\\n# 또는\\nyarn add redux-persist\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 redux-persist를 설치했으므로 Redux 스토어와 함께 작동하도록 구성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"구성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"당신의 Redux 스토어 구성 파일에서 redux-persist로부터 persistReducer를 import하여 상태의 원하는 부분을 지속적으로 저장하도록 구성하세요. 어떤 리듀서와 그 리듀서의 어떤 속성을 지속적으로 저장할지 선택할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// store.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { createStore } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'redux'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { persistStore, persistReducer } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'redux-persist'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" storage \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'redux-persist/lib/storage'\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용할 저장 엔진 선택\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" rootReducer \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./reducers'\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 루트 리듀서 import\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" persistConfig = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"key\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'root'\"\n        }), \",\\n  storage,\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 지속적으로 저장하려는 리듀서 지정\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"whitelist\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'user'\"\n        }), \"], \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이 예시에서는 'user' 리듀서를 지속적으로 저장합니다\"\n        }), \"\\n};\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" persistedReducer = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"persistReducer\"\n        }), \"(persistConfig, rootReducer);\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" store = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createStore\"\n        }), \"(persistedReducer);\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" persistor = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"persistStore\"\n        }), \"(store);\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 예시에서는 redux-persist를 사용하여 \", _jsx(_components.code, {\n        children: \"user\"\n      }), \" 리듀서를 지속적으로 저장하도록 구성했지만, 이를 애플리케이션의 요구에 맞게 사용자 정의할 수 있습니다.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"앱 감싸기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 Redux 스토어를 redux-persist로 구성했으니, redux-persist에서 제공하는 PersistGate 컴포넌트로 앱을 감싸야 합니다. 이 컴포넌트는 영속 상태가 검색되기 전에 앱이 렌더링되도록 보장합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// index.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactDOM\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-dom'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Provider\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-redux'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PersistGate\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'redux-persist/integration/react'\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// PersistGate 가져오기\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { store, persistor } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./store'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"App\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./App'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactDOM\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"render\"\n        }), \"(\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Provider\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"store\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{store}\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"PersistGate\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"loading\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{null}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"persistor\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{persistor}\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"App\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"PersistGate\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Provider\"\n            }), \">\"]\n          })]\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'root'\"\n        }), \")\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"사용법\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"redux-persist가 설정된 상태에서는 React 컴포넌트에서 Redux를 평소처럼 사용할 수 있습니다. persistConfig에서 지정한 모든 상태는 자동으로 지속될 것이며 다시 수분화될 것입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// userReducer.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" initialState = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"username\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// ... other user-related properties\"\n        }), \"\\n};\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"userReducer\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"state = initialState, action\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"switch\"\n        }), \" (action.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"type\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"case\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'SET_USERNAME'\"\n        }), \":\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {\\n        ...state,\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"username\"\n        }), \": action.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"payload\"\n        }), \",\\n      };\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"case\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'SET_EMAIL'\"\n        }), \":\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {\\n        ...state,\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": action.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"payload\"\n        }), \",\\n      };\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// ... other reducer cases\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"default\"\n        }), \":\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" state;\\n  }\\n};\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" userReducer;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 예에서 'user' 리듀서에 대한 모든 변경 사항은 앱이 다시 시작되거나 페이지가 새로고침될 때 자동으로 유지되고 다시로드됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Redux-persist는 React 애플리케이션의 상태 지속성을 제공하여 애플리케이션을 강화하는 강력한 라이브러리입니다. 이는 사용자가 로그인해야 하는 애플리케이션이나 사용자 선호 설정 및 세션 데이터를 저장하려는 애플리케이션에 매우 유용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n이 문서에 설명된 단계를 따라 하면 Redux를 사용하는 React 애플리케이션에 redux-persist를 쉽게 통합할 수 있습니다. 이를 통해 사용자들이 세션 및 페이지 새로고침 간에 데이터 지속성을 즐길 수 있게 되어, 더 견고하고 사용자 친화적인 애플리케이션을 만들 수 있습니다.\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}