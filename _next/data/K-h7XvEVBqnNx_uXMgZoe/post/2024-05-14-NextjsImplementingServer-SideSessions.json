{"pageProps":{"post":{"title":"서버 측 세션 구현하기 - Nextjs","description":"","date":"2024-05-14 10:50","slug":"2024-05-14-NextjsImplementingServer-SideSessions","content":"\n\n<img src=\"/assets/img/2024-05-14-NextjsImplementingServer-SideSessions_0.png\" />\n\n# 단계 1: 서버 측 세션 구현하기\n\n먼저 세션 관리 시스템을 설정하세요. 일반적으로 세션을 생성하고 유효성을 검사하며, 세션 정보를 안전한 HTTP-only 쿠키에 저장하는 과정을 포함합니다.\n\n## API 라우트에서의 세션 관리\n\n\n\nAPI 라우트(app/routes/api/)에서 세션을 관리할 수 있습니다. 예를 들어, 로그인 라우트에서는 사용자를 인증하고 세션을 생성한 후 세션 쿠키를 설정할 수 있습니다.\n\n```js\n// app/routes/api/login.ts\n\nimport { createSession, getUser } from '@/lib/auth'; // 이 함수들을 구현하세요\nimport type { NextApiRequest, NextApiResponse } from 'next';\n\nexport default async function login(req: NextApiRequest, res: NextApiResponse) {\n  const user = await getUser(req.body.username, req.body.password); // 사용자 인증\n  if (!user) {\n    return res.status(401).json({ error: '유효하지 않은 자격 증명' });\n  }\n\n  const sessionId = await createSession(user.id); // 세션 생성\n  res.setHeader('Set-Cookie', `sessionId=${sessionId}; HttpOnly; Path=/; SameSite=Lax`);\n  res.status(200).json({ message: '성공' });\n}\n```\n\n# 단계 2: App Router 미들웨어를 사용한 리디렉션\n\nApp Router 미들웨어를 사용하여 요청을 가로채고 세션 상태를 기반으로 로직을 구현할 수 있습니다.\n\n\n\n## 미들웨어 예시\n\n세션 유효성 검사와 리다이렉션을 처리하는 미들웨어 파일(e.g., app/middleware.ts)을 생성하세요.\n\n```js\n// app/middleware.ts\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getSession } from '@/lib/session'; // 이 함수 구현 필요\n\nexport async function middleware(req: NextRequest) {\n  const session = await getSession(req.cookies.sessionId); // 세션 유효성 검사\n\n  // 세션이 없고 요청이 보호된 경로일 경우에는 로그인 페이지로 리다이렉션\n  if (!session && req.nextUrl.pathname.startsWith('/protected')) {\n    return NextResponse.redirect(new URL('/login', req.url));\n  }\n\n  return NextResponse.next();\n}\n```\n\n# 단계 3: 클라이언트에서 세션 유효성 검사 및 리다이렉션\n\n\n\n클라이언트 측에서는 여전히 세션 관련 업데이트를 처리해야 할 수도 있습니다. 로그인/로그아웃 후 리다이렉트 또는 로딩 상태 표시와 같은 작업들이 필요할 수 있어요.\n\n```js\n// 당신의 React 컴포넌트 안에서\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst MyComponent = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 세션 상태 확인하고 필요시 리다이렉트\n    // 세션을 확인하는 API 루트에 요청을 보낼 수도 있어요.\n    checkSession().then(isValidSession => {\n      if (!isValidSession) {\n        router.push('/login');\n      }\n    });\n  }, []);\n\n  // 컴포넌트 렌더링\n};\n```\n\n# 결론\n\n- 세션 보안: 안전한 HTTP-only 쿠키를 사용하여 세션 식별자를 저장하세요.\n- 쿠키 플래그: SameSite 및 Secure와 같은 적절한 쿠키 플래그 설정을 통해 보안을 강화하세요.\n- 확장성: 확장 가능한 애플리케이션을 위해 세션 관리에 데이터베이스나 Redis와 같은 서비스를 고려해보세요.\n- 오류 처리: 세션 관리 로직에서 견고한 오류 처리를 보장하세요.\n- 클라이언트 측 처리: 서버 측 확인이 있더라도, 사용자 경험을 향상시키기 위해 세션 상태에 따라 특정 클라이언트 측 동작을 처리할 수도 있습니다.\n\n\n\n이 설정은 App Router를 사용하여 Next.js 애플리케이션에서 서버 측 세션을 관리하고 라우트 액세스를 제어하는 강력한 시스템을 제공합니다.","ogImage":{"url":"/assets/img/2024-05-14-NextjsImplementingServer-SideSessions_0.png"},"coverImage":"/assets/img/2024-05-14-NextjsImplementingServer-SideSessions_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-NextjsImplementingServer-SideSessions_0.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 1: 서버 측 세션 구현하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 세션 관리 시스템을 설정하세요. 일반적으로 세션을 생성하고 유효성을 검사하며, 세션 정보를 안전한 HTTP-only 쿠키에 저장하는 과정을 포함합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"API 라우트에서의 세션 관리\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"API 라우트(app/routes/api/)에서 세션을 관리할 수 있습니다. 예를 들어, 로그인 라우트에서는 사용자를 인증하고 세션을 생성한 후 세션 쿠키를 설정할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// app/routes/api/login.ts\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { createSession, getUser } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@/lib/auth'\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이 함수들을 구현하세요\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" type { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NextApiRequest\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NextApiResponse\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'next'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"login\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"req: NextApiRequest, res: NextApiResponse\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" user = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getUser\"\n        }), \"(req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"username\"\n        }), \", req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"password\"\n        }), \"); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 인증\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!user) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"401\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"json\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"error\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'유효하지 않은 자격 증명'\"\n        }), \" });\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" sessionId = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createSession\"\n        }), \"(user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 세션 생성\"\n        }), \"\\n  res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setHeader\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Set-Cookie'\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`sessionId=\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${sessionId}\"\n          }), \"; HttpOnly; Path=/; SameSite=Lax`\"]\n        }), \");\\n  res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"json\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"message\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'성공'\"\n        }), \" });\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 2: App Router 미들웨어를 사용한 리디렉션\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"App Router 미들웨어를 사용하여 요청을 가로채고 세션 상태를 기반으로 로직을 구현할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"미들웨어 예시\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"세션 유효성 검사와 리다이렉션을 처리하는 미들웨어 파일(e.g., app/middleware.ts)을 생성하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// app/middleware.ts\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NextRequest\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NextResponse\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'next/server'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { getSession } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@/lib/session'\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이 함수 구현 필요\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"middleware\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"req: NextRequest\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" session = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getSession\"\n        }), \"(req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cookies\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sessionId\"\n        }), \"); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 세션 유효성 검사\"\n        }), \"\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 세션이 없고 요청이 보호된 경로일 경우에는 로그인 페이지로 리다이렉션\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!session && req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nextUrl\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pathname\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"startsWith\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/protected'\"\n        }), \")) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NextResponse\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"redirect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"URL\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/login'\"\n        }), \", req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"url\"\n        }), \"));\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NextResponse\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"next\"\n        }), \"();\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 3: 클라이언트에서 세션 유효성 검사 및 리다이렉션\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클라이언트 측에서는 여전히 세션 관련 업데이트를 처리해야 할 수도 있습니다. 로그인/로그아웃 후 리다이렉트 또는 로딩 상태 표시와 같은 작업들이 필요할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 당신의 React 컴포넌트 안에서\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useEffect } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useRouter } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'next/router'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"MyComponent\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" router = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useRouter\"\n        }), \"();\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 세션 상태 확인하고 필요시 리다이렉트\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 세션을 확인하는 API 루트에 요청을 보낼 수도 있어요.\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"checkSession\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"isValidSession\"\n          }), \" =>\"]\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!isValidSession) {\\n        router.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/login'\"\n        }), \");\\n      }\\n    });\\n  }, []);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 컴포넌트 렌더링\"\n        }), \"\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"세션 보안: 안전한 HTTP-only 쿠키를 사용하여 세션 식별자를 저장하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"쿠키 플래그: SameSite 및 Secure와 같은 적절한 쿠키 플래그 설정을 통해 보안을 강화하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"확장성: 확장 가능한 애플리케이션을 위해 세션 관리에 데이터베이스나 Redis와 같은 서비스를 고려해보세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"오류 처리: 세션 관리 로직에서 견고한 오류 처리를 보장하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"클라이언트 측 처리: 서버 측 확인이 있더라도, 사용자 경험을 향상시키기 위해 세션 상태에 따라 특정 클라이언트 측 동작을 처리할 수도 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 설정은 App Router를 사용하여 Next.js 애플리케이션에서 서버 측 세션을 관리하고 라우트 액세스를 제어하는 강력한 시스템을 제공합니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}