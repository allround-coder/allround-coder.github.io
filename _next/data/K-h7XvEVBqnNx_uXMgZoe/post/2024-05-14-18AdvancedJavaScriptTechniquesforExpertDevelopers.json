{"pageProps":{"post":{"title":"전문 개발자를 위한 18가지 고급 JavaScript 기술","description":"","date":"2024-05-14 15:16","slug":"2024-05-14-18AdvancedJavaScriptTechniquesforExpertDevelopers","content":"\n\n\n<img src=\"/assets/img/2024-05-14-18AdvancedJavaScriptTechniquesforExpertDevelopers_0.png\" />\n\n# 브라우저\n\n# 전체 화면 달성하기 🖥️\n\n현재 화면을 전체 화면으로 표시해야 할 때\n\n\n\n```\n# 전체 화면으로 변환하기 ✨\n\n```js\nfunction fullScreen() {  \n    const el = document.documentElement\n    const rfs = \n    el.requestFullScreen || \n    el.webkitRequestFullScreen || \n    el.mozRequestFullScreen || \n    el.msRequestFullscreen\n    if(typeof rfs != \"undefined\" && rfs) {\n        rfs.call(el)\n    }\n}\n// 클릭하여 🌐 전체 화면으로 전환하기!\nfullScreen()\n```\n\n# 전체 화면 나가기 🏁\n\n전체 화면을 나가려면\n\n```js\nfunction exitScreen() {\n    if (document.exitFullscreen) { \n        document.exitFullscreen()\n    } \n    else if (document.mozCancelFullScreen) { \n        document.mozCancelFullScreen()\n    } \n    else if (document.webkitCancelFullScreen) { \n        document.webkitCancelFullScreen()\n    } \n    else if (document.msExitFullscreen) { \n        document.msExitFullscreen()\n    } \n    if(typeof cfs != \"undefined\" && cfs) {\n        cfs.call(el)\n    }\n    // 전체 화면에서 나가기 🚪🏃\n}\nexitScreen()\n```\n\n\n\n# 페이지 인쇄 🖨️\n\n현재 페이지를 인쇄해야 할 때\n\n```js\n// 페이지를 인쇄하려면 클릭 🖨️\nwindow.print()\n```\n\n# 인쇄 내용 스타일 변경 📄\n\n\n\n현재 페이지를 인쇄하려면서 레이아웃을 수정해야 할 때\n\n```js\n<style>\n/* 인쇄 레이아웃 조정 🔧 */\n@media print {\n    .noprint {\n        display: none;\n    }\n}\n</style>\n<div class=\"print\">인쇄</div>\n<div class=\"noprint\">인쇄 안 함</div>\n```\n\n# 차단 닫기 이벤트 🔒\n\n사용자가 새로 고침하거나 브라우저를 닫는 것을 막아야 할 때, beforeunload 이벤트를 트리거하도록 선택할 수 있습니다. 일부 브라우저에서는 텍스트 내용을 사용자 지정할 수 없습니다.\n\n\n\n```\n```js\nwindow.onbeforeunload = function(){\n    return 'haorooms 블로그를 나가시겠습니까? 🚪🤔';\n};\n```\n\n# 화면 녹화 📹\n\n현재 화면을 녹화하고 녹화된 화면을 업로드 또는 다운로드해야 할 때\n\n```js\n// 이곳에서 화면 녹화하기 🎬\nconst streamPromise = navigator.mediaDevices.getDisplayMedia()\nstreamPromise.then(stream => {\n    var recordedChunks = [];// 녹화된 비디오 데이터\n    var options = { mimeType: \"video/webm; codecs=vp9\" };// 인코딩 형식 설정\n    var mediaRecorder = new MediaRecorder(stream, options);// MediaRecorder 인스턴스 초기화\n    mediaRecorder.ondataavailable = handleDataAvailable;// 데이터가 사용 가능한 경우 콜백 설정 (화면 녹화 종료)\n    mediaRecorder.start();\n    // 비디오 조각화\n    function handleDataAvailable(event) {\n        if (event.data.size > 0) {\n            recordedChunks.push(event.data);// 데이터 추가, event.data는 BLOB 객체\n            download();// BLOB 객체로 래핑하여 다운로드\n        }\n    }\n    // 파일 다운로드\n    function download() {\n        var blob = new Blob(recordedChunks, {\n            type: \"video/webm\"\n        });\n        // 여기서 비디오를 백엔드로 업로드할 수 있음\n        var url = URL.createObjectURL(blob);\n        var a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.style = \"display: none\";\n        a.href = url;\n        a.download = \"test.webm\";\n        a.click();\n        window.URL.revokeObjectURL(url);\n    }\n})\n```\n\n\n\n# 가로 및 세로 화면 판단하기 🔄\n\n모바일 전화기의 가로 또는 세로 화면 상태를 판단해야 할 때\n\n```js\nfunction hengshuping() {\n    if (window.orientation == 180 || window.orientation == 0) {\n        alert(\"세로 모드! 📱\");\n    }\n    if (window.orientation == 90 || window.orientation == -90) {\n        alert(\"가로 모드! 🌅\");\n    }\n}\n// 화면 방향 변경을 위한 리스너 추가 🔄\nwindow.addEventListener(\"onorientationchange\" in window ? \"orientationchange\" : \"resize\", hengshuping, false);\n```\n\n# 가로 및 세로 화면 스타일 변경하기 ↔️\n\n\n\n다양한 스타일을 수평 및 수직 화면에 대해 설정해야 할 때\n\n```js\n<style>\n@media all and (orientation : landscape) {\n    body {\n        background-color: #ff0000;\n    }\n}\n@media all and (orientation : portrait) {\n    body {\n        background-color: #00ff00;\n    }\n}\n</style>\n```\n\n# 탭 페이지가 숨김 처리됨 🙈\n\n탭이 표시되거나 숨겨지는 이벤트를 모니터링해야 할 때\n\n\n\n```js\n// 탭 페이지 숨김 🙈\nconst {hidden, visibilityChange} = (() => {\n    let hidden, visibilityChange;\n    if (typeof document.hidden !== \"undefined\") {\n      // Opera 12.10 및 Firefox 18 이후 지원\n      hidden = \"hidden\";\n      visibilityChange = \"visibilitychange\";\n    } else if (typeof document.msHidden !== \"undefined\") {\n      hidden = \"msHidden\";\n      visibilityChange = \"msvisibilitychange\";\n    } else if (typeof document.webkitHidden !== \"undefined\") {\n      hidden = \"webkitHidden\";\n      visibilityChange = \"webkitvisibilitychange\";\n    }\n    return {\n      hidden,\n      visibilityChange\n    }\n})();\n\nconst handleVisibilityChange = () => {\n    console.log(\"현재 숨겨진 상태\", document[hidden]);\n};\ndocument.addEventListener(\n    visibilityChange,\n    handleVisibilityChange,\n    false\n);\n```\n\n# 이미지\n\n# 로컬 이미지 미리보기 🌄\n\n클라이언트로부터 이미지를 받았지만 즉시 서버에 업로드할 수 없고 미리보기해야 하는 경우\n\n\n\n\n```js\n<!-- 이미지 업로드 및 미리보기 📸 -->\n<div class=\"test\">\n    <input type=\"file\" name=\"\" id=\"\">\n    <img src=\"\" alt=\"\">\n</div>\n<script>\nconst getObjectURL = (file) => {\n    let url = null;\n    if (window.createObjectURL != undefined) { // basic\n        url = window.createObjectURL(file);\n    } else if (window.URL != undefined) { // webkit or chrome\n        url = window.URL.createObjectURL(file);\n    } else if (window.URL != undefined) { // mozilla(firefox)\n        url = window.URL.createObjectURL(file);\n    }\n    return url;\n}\ndocument.querySelector('input').addEventListener('change', (event) => {\n    document.querySelector('img').src = getObjectURL(event.target.files[0])\n})\n</script>\n```\n\n# 이미지 미리로딩 🔄\n\n사진이 많을 때는 화면이 하얗게 보이지 않도록 사진을 미리로딩해야 합니다.\n\n```js\nconst images = []\nfunction preloader(args) {\n    for (let i = 0, len = args.length; i < len; i++) {  \n        images[i] = new Image()  \n        images[i].src = args[i]\n    } \n}  \npreloader(['1.png', '2.jpg'])\n```\n\n\n\n# Js\n\n# 문자열 스크립트 💬\n\n문자열을 js 스크립트로 변환해야 할 때는 이 방법이 xss 취약점이 있으니 주의해서 사용해야 합니다\n\n```js\nconst obj = eval('({ name: \"jack\" })')\n// obj는 object{ name: \"jack\" }로 변환됩니다\nconst v = eval('obj')\n// v는 변수 obj가 됩니다\n```\n\n\n\n# 재귀 함수 이름 분리하기 🔗\n\n재귀 함수를 작성할 때 함수 이름을 선언하지만 함수 이름을 수정할 때마다 내부 함수 이름을 수정하는 것을 항상 잊어버립니다. argument는 함수의 내부 객체로, 함수에 전달된 모든 매개변수를 포함하며 arguments.callee는 함수 이름을 나타냅니다.\n\n```js\n// 이것은 기본 피보나치 수열입니다\nfunction fibonacci (n) {\n    const fn = arguments.callee\n    if (n <= 1) return 1\n    return fn(n - 1) + fn(n - 2)\n}\n```\n\n\n\n# 암묵적 판단 👁️‍🗨️\n\n페이지 뷰에 현재 DOM 요소가 나타나 있는지 판단해야 할 때 IntersectionObserver를 사용해보세요.\n\n```js\n<style>\n.item {\n    height: 350px;\n}\n</style>\n\n<div class=\"container\">\n  <div class=\"item\" data-id=\"1\">보이지 않음</div>\n  <div class=\"item\" data-id=\"2\">보이지 않음</div>\n  <div class=\"item\" data-id=\"3\">보이지 않음</div>\n</div>\n<script>\n  if (window?.IntersectionObserver) {\n    let items = [...document.getElementsByClassName(\"item\")]; // 진정한 배열로 변환하여 파싱, Array.prototype.slice.call()도 사용 가능\nlet io = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((item) => {\n          item.target.innerHTML =\n            item.intersectionRatio === 1 // 요소의 표시 비율, 1이면 완전히 보이고 0이면 완전히 보이지 않음\n              ? `요소가 완전히 보입니다`\n              : `요소가 부분적으로 보이지 않습니다`;\n        });\n      },\n      {\n        root: null,\n        rootMargin: \"0px 0px\",\n        threshold: 1, // 임계값을 1로 설정하고, 비율이 1에 도달할 때만 콜백 함수가 트리거됨\n      }\n    );\n    items.forEach((item) => io.observe(item));\n  }\n</script>\n```\n\n# 편집 가능 요소 ✏️\n\n\n\nDOM 요소를 편집해야 할 때, 텍스트 영역처럼 클릭하세요.\n\n```js\n<div contenteditable=\"true\">여기를 편집할 수 있어요</div>\n```\n\n# 요소 속성 감시하기 👀\n\n```js\n<div id=\"test\">테스트</div>\n<button onclick=\"handleClick()\">확인</button>\n\n<script>\n  const el = document.getElementById(\"test\");\n  let n = 1;\n  const observe = new MutationObserver((mutations) => {\n    console.log(\"속성이 변경되었어요\", mutations);\n  })\n  observe.observe(el, {\n    attributes: true\n  });\n  function handleClick() {\n    el.setAttribute(\"style\", \"color: red\");\n    el.setAttribute(\"data-name\", n++);\n  }\n  setTimeout(() => {\n    observe.disconnect(); // 감시 중지\n  }, 5000);\n</script>\n```\n\n\n\n# DOM 요소 출력하기 🖨️\n\n개발 과정에서 DOM 요소를 출력해야 할 때, console.log을 사용하면 종종 전체 DOM 요소만 출력되고 내부 속성을 볼 수 없습니다. console.dir을 사용해보세요.\n\n```js\nconsole.dir(document.body)\n```\n\n# 기타\n\n\n\n# 어플리케이션 활성화하기 🚀\n\n모바일 측면에서 개발할 때, 다른 애플리케이션을 열어야 할 때가 있어요. 아래 방법들은 location.href 할당을 통해서도 작동할 수 있어요.\n\n```js\n<!-- 다음 링크들을 사용해서 폰 기능을 활성화해보세요 📲 -->\n<a href=\"tel:12345678910\">전화 걸기</a>\n<a href=\"sms:12345678910,12345678911?body=안녕하세요\">안드로이드 메시지</a> \n<a href=\"sms:/open?addresses=12345678910,12345678911&body=안녕하세요\">iOS 메시지</a>\n<a href=\"wx://\">iOS 메시지</a>\n```\n\n# 쉬운 용어로 설명 🚀\n\n\n\nIn Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 작가를 박수치고 팔로우해주세요 👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter\n- 다른 플랫폼 방문하기: Stackademic | CoFeed | Venture\n- PlainEnglish.io에서 더 많은 콘텐츠 확인하기","ogImage":{"url":"/assets/img/2024-05-14-18AdvancedJavaScriptTechniquesforExpertDevelopers_0.png"},"coverImage":"/assets/img/2024-05-14-18AdvancedJavaScriptTechniquesforExpertDevelopers_0.png","tag":["Tech"],"readingTime":9},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-18AdvancedJavaScriptTechniquesforExpertDevelopers_0.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"브라우저\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"전체 화면 달성하기 🖥️\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현재 화면을 전체 화면으로 표시해야 할 때\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"# 전체 화면으로 변환하기 ✨\\n\\n```js\\nfunction fullScreen() {  \\n    const el = document.documentElement\\n    const rfs = \\n    el.requestFullScreen || \\n    el.webkitRequestFullScreen || \\n    el.mozRequestFullScreen || \\n    el.msRequestFullscreen\\n    if(typeof rfs != \\\"undefined\\\" && rfs) {\\n        rfs.call(el)\\n    }\\n}\\n// 클릭하여 🌐 전체 화면으로 전환하기!\\nfullScreen()\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"전체 화면 나가기 🏁\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"전체 화면을 나가려면\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"exitScreen\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exitFullscreen\"\n        }), \") { \\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"exitFullscreen\"\n        }), \"()\\n    } \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"mozCancelFullScreen\"\n        }), \") { \\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"mozCancelFullScreen\"\n        }), \"()\\n    } \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"webkitCancelFullScreen\"\n        }), \") { \\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"webkitCancelFullScreen\"\n        }), \"()\\n    } \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"msExitFullscreen\"\n        }), \") { \\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"msExitFullscreen\"\n        }), \"()\\n    } \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" cfs != \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"undefined\\\"\"\n        }), \" && cfs) {\\n        cfs.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"call\"\n        }), \"(el)\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 전체 화면에서 나가기 🚪🏃\"\n        }), \"\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"exitScreen\"\n        }), \"()\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"페이지 인쇄 🖨️\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현재 페이지를 인쇄해야 할 때\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 페이지를 인쇄하려면 클릭 🖨️\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"()\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"인쇄 내용 스타일 변경 📄\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현재 페이지를 인쇄하려면서 레이아웃을 수정해야 할 때\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<style>\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 인쇄 레이아웃 조정 🔧 */\"\n        }), \"\\n@media print {\\n    .\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"noprint\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"display\"\n        }), \": none;\\n    }\\n}\\n</style>\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"print\\\"\"\n            }), \">\"]\n          }), \"인쇄\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"noprint\\\"\"\n            }), \">\"]\n          }), \"인쇄 안 함\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"차단 닫기 이벤트 🔒\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자가 새로 고침하거나 브라우저를 닫는 것을 막아야 할 때, beforeunload 이벤트를 트리거하도록 선택할 수 있습니다. 일부 브라우저에서는 텍스트 내용을 사용자 지정할 수 없습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"```js\\nwindow.onbeforeunload = function(){\\n    return 'haorooms 블로그를 나가시겠습니까? 🚪🤔';\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"화면 녹화 📹\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현재 화면을 녹화하고 녹화된 화면을 업로드 또는 다운로드해야 할 때\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이곳에서 화면 녹화하기 🎬\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" streamPromise = navigator.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"mediaDevices\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getDisplayMedia\"\n        }), \"()\\nstreamPromise.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"stream\"\n          }), \" =>\"]\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" recordedChunks = [];\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 녹화된 비디오 데이터\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" options = { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"mimeType\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"video/webm; codecs=vp9\\\"\"\n        }), \" };\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 인코딩 형식 설정\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" mediaRecorder = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MediaRecorder\"\n        }), \"(stream, options);\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// MediaRecorder 인스턴스 초기화\"\n        }), \"\\n    mediaRecorder.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"ondataavailable\"\n        }), \" = handleDataAvailable;\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 데이터가 사용 가능한 경우 콜백 설정 (화면 녹화 종료)\"\n        }), \"\\n    mediaRecorder.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"start\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 비디오 조각화\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleDataAvailable\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"event\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"data\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"size\"\n        }), \" > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \") {\\n            recordedChunks.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"data\"\n        }), \");\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 데이터 추가, event.data는 BLOB 객체\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"download\"\n        }), \"();\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// BLOB 객체로 래핑하여 다운로드\"\n        }), \"\\n        }\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 파일 다운로드\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"download\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" blob = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Blob\"\n        }), \"(recordedChunks, {\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"video/webm\\\"\"\n        }), \"\\n        });\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 여기서 비디오를 백엔드로 업로드할 수 있음\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" url = \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"URL\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createObjectURL\"\n        }), \"(blob);\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" a = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createElement\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"a\\\"\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"appendChild\"\n        }), \"(a);\\n        a.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"style\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"display: none\\\"\"\n        }), \";\\n        a.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"href\"\n        }), \" = url;\\n        a.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"download\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"test.webm\\\"\"\n        }), \";\\n        a.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"click\"\n        }), \"();\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"URL\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"revokeObjectURL\"\n        }), \"(url);\\n    }\\n})\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"가로 및 세로 화면 판단하기 🔄\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"모바일 전화기의 가로 또는 세로 화면 상태를 판단해야 할 때\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hengshuping\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"orientation\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"180\"\n        }), \" || \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"orientation\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"alert\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"세로 모드! 📱\\\"\"\n        }), \");\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"orientation\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"90\"\n        }), \" || \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"orientation\"\n        }), \" == -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"90\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"alert\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"가로 모드! 🌅\\\"\"\n        }), \");\\n    }\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 화면 방향 변경을 위한 리스너 추가 🔄\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"onorientationchange\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \" ? \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"orientationchange\\\"\"\n        }), \" : \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"resize\\\"\"\n        }), \", hengshuping, \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"가로 및 세로 화면 스타일 변경하기 ↔️\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다양한 스타일을 수평 및 수직 화면에 대해 설정해야 할 때\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<style>\\n@media all and (orientation : landscape) {\\n    body {\\n        background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #ff0000;\\n    }\\n}\\n@media all and (orientation : portrait) {\\n    body {\\n        background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #00ff00;\\n    }\\n}\\n</style>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"탭 페이지가 숨김 처리됨 🙈\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"탭이 표시되거나 숨겨지는 이벤트를 모니터링해야 할 때\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 탭 페이지 숨김 🙈\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" {hidden, visibilityChange} = (\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" hidden, visibilityChange;\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"hidden\"\n        }), \" !== \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"undefined\\\"\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Opera 12.10 및 Firefox 18 이후 지원\"\n        }), \"\\n      hidden = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"hidden\\\"\"\n        }), \";\\n      visibilityChange = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"visibilitychange\\\"\"\n        }), \";\\n    } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"msHidden\"\n        }), \" !== \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"undefined\\\"\"\n        }), \") {\\n      hidden = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"msHidden\\\"\"\n        }), \";\\n      visibilityChange = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"msvisibilitychange\\\"\"\n        }), \";\\n    } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"webkitHidden\"\n        }), \" !== \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"undefined\\\"\"\n        }), \") {\\n      hidden = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"webkitHidden\\\"\"\n        }), \";\\n      visibilityChange = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"webkitvisibilitychange\\\"\"\n        }), \";\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {\\n      hidden,\\n      visibilityChange\\n    }\\n})();\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleVisibilityChange\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"현재 숨겨진 상태\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \"[hidden]);\\n};\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\\n    visibilityChange,\\n    handleVisibilityChange,\\n    \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"이미지\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"로컬 이미지 미리보기 🌄\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클라이언트로부터 이미지를 받았지만 즉시 서버에 업로드할 수 없고 미리보기해야 하는 경우\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"<!-- 이미지 업로드 및 미리보기 📸 -->\\n<div class=\\\"test\\\">\\n    <input type=\\\"file\\\" name=\\\"\\\" id=\\\"\\\">\\n    <img src=\\\"\\\" alt=\\\"\\\">\\n</div>\\n<script>\\nconst getObjectURL = (file) => {\\n    let url = null;\\n    if (window.createObjectURL != undefined) { // basic\\n        url = window.createObjectURL(file);\\n    } else if (window.URL != undefined) { // webkit or chrome\\n        url = window.URL.createObjectURL(file);\\n    } else if (window.URL != undefined) { // mozilla(firefox)\\n        url = window.URL.createObjectURL(file);\\n    }\\n    return url;\\n}\\ndocument.querySelector('input').addEventListener('change', (event) => {\\n    document.querySelector('img').src = getObjectURL(event.target.files[0])\\n})\\n</script>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"이미지 미리로딩 🔄\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사진이 많을 때는 화면이 하얗게 보이지 않도록 사진을 미리로딩해야 합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" images = []\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"preloader\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"args\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" i = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", len = args.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \"; i < len; i++) {  \\n        images[i] = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \"()  \\n        images[i].\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"src\"\n        }), \" = args[i]\\n    } \\n}  \\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"preloader\"\n        }), \"([\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'1.png'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'2.jpg'\"\n        }), \"])\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Js\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"문자열 스크립트 💬\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"문자열을 js 스크립트로 변환해야 할 때는 이 방법이 xss 취약점이 있으니 주의해서 사용해야 합니다\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" obj = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"eval\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'({ name: \\\"jack\\\" })'\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// obj는 object{ name: \\\"jack\\\" }로 변환됩니다\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" v = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"eval\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'obj'\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// v는 변수 obj가 됩니다\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"재귀 함수 이름 분리하기 🔗\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"재귀 함수를 작성할 때 함수 이름을 선언하지만 함수 이름을 수정할 때마다 내부 함수 이름을 수정하는 것을 항상 잊어버립니다. argument는 함수의 내부 객체로, 함수에 전달된 모든 매개변수를 포함하며 arguments.callee는 함수 이름을 나타냅니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이것은 기본 피보나치 수열입니다\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fibonacci\"\n        }), \" (n) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" fn = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"arguments\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"callee\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (n <= \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fn\"\n        }), \"(n - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") + \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fn\"\n        }), \"(n - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \")\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"암묵적 판단 👁️‍🗨️\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"페이지 뷰에 현재 DOM 요소가 나타나 있는지 판단해야 할 때 IntersectionObserver를 사용해보세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<style>\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"item\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": 350px;\\n}\\n</style>\\n\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"container\\\"\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"item\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"data-id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"1\\\"\"\n            }), \">\"]\n          }), \"보이지 않음\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"item\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"data-id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"2\\\"\"\n            }), \">\"]\n          }), \"보이지 않음\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"item\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"data-id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"3\\\"\"\n            }), \">\"]\n          }), \"보이지 않음\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"script\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"javascript\",\n            children: [\"\\n  \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"if\"\n            }), \" (\", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"window\"\n            }), \"?.\", _jsx(_components.span, {\n              className: \"hljs-property\",\n              children: \"IntersectionObserver\"\n            }), \") {\\n    \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"let\"\n            }), \" items = [...\", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"document\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"getElementsByClassName\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"item\\\"\"\n            }), \")]; \", _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"// 진정한 배열로 변환하여 파싱, Array.prototype.slice.call()도 사용 가능\"\n            }), \"\\n\", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"let\"\n            }), \" io = \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"new\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title class_\",\n              children: \"IntersectionObserver\"\n            }), \"(\\n      \", _jsxs(_components.span, {\n              className: \"hljs-function\",\n              children: [\"(\", _jsx(_components.span, {\n                className: \"hljs-params\",\n                children: \"entries\"\n              }), \") =>\"]\n            }), \" {\\n        entries.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"forEach\"\n            }), \"(\", _jsxs(_components.span, {\n              className: \"hljs-function\",\n              children: [\"(\", _jsx(_components.span, {\n                className: \"hljs-params\",\n                children: \"item\"\n              }), \") =>\"]\n            }), \" {\\n          item.\", _jsx(_components.span, {\n              className: \"hljs-property\",\n              children: \"target\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-property\",\n              children: \"innerHTML\"\n            }), \" =\\n            item.\", _jsx(_components.span, {\n              className: \"hljs-property\",\n              children: \"intersectionRatio\"\n            }), \" === \", _jsx(_components.span, {\n              className: \"hljs-number\",\n              children: \"1\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"// 요소의 표시 비율, 1이면 완전히 보이고 0이면 완전히 보이지 않음\"\n            }), \"\\n              ? \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"`요소가 완전히 보입니다`\"\n            }), \"\\n              : \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"`요소가 부분적으로 보이지 않습니다`\"\n            }), \";\\n        });\\n      },\\n      {\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"root\"\n            }), \": \", _jsx(_components.span, {\n              className: \"hljs-literal\",\n              children: \"null\"\n            }), \",\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"rootMargin\"\n            }), \": \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"0px 0px\\\"\"\n            }), \",\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"threshold\"\n            }), \": \", _jsx(_components.span, {\n              className: \"hljs-number\",\n              children: \"1\"\n            }), \", \", _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"// 임계값을 1로 설정하고, 비율이 1에 도달할 때만 콜백 함수가 트리거됨\"\n            }), \"\\n      }\\n    );\\n    items.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"forEach\"\n            }), \"(\", _jsxs(_components.span, {\n              className: \"hljs-function\",\n              children: [\"(\", _jsx(_components.span, {\n                className: \"hljs-params\",\n                children: \"item\"\n              }), \") =>\"]\n            }), \" io.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"observe\"\n            }), \"(item));\\n  }\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"script\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"편집 가능 요소 ✏️\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"DOM 요소를 편집해야 할 때, 텍스트 영역처럼 클릭하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div contenteditable=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"true\\\"\"\n        }), \">여기를 편집할 수 있어요</div>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"요소 속성 감시하기 👀\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div id=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"test\\\"\"\n        }), \">테스트</div>\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onclick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"handleClick()\\\"\"\n            }), \">\"]\n          }), \"확인\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          })]\n        }), \"\\n\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"script\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"javascript\",\n            children: [\"\\n  \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" el = \", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"document\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"getElementById\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"test\\\"\"\n            }), \");\\n  \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"let\"\n            }), \" n = \", _jsx(_components.span, {\n              className: \"hljs-number\",\n              children: \"1\"\n            }), \";\\n  \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" observe = \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"new\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title class_\",\n              children: \"MutationObserver\"\n            }), \"(\", _jsxs(_components.span, {\n              className: \"hljs-function\",\n              children: [\"(\", _jsx(_components.span, {\n                className: \"hljs-params\",\n                children: \"mutations\"\n              }), \") =>\"]\n            }), \" {\\n    \", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"console\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"log\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"속성이 변경되었어요\\\"\"\n            }), \", mutations);\\n  })\\n  observe.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"observe\"\n            }), \"(el, {\\n    \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"attributes\"\n            }), \": \", _jsx(_components.span, {\n              className: \"hljs-literal\",\n              children: \"true\"\n            }), \"\\n  });\\n  \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"function\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"handleClick\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-params\"\n            }), \") {\\n    el.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"setAttribute\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"style\\\"\"\n            }), \", \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"color: red\\\"\"\n            }), \");\\n    el.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"setAttribute\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"data-name\\\"\"\n            }), \", n++);\\n  }\\n  \", _jsx(_components.span, {\n              className: \"hljs-built_in\",\n              children: \"setTimeout\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-function\",\n              children: \"() =>\"\n            }), \" {\\n    observe.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"disconnect\"\n            }), \"(); \", _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"// 감시 중지\"\n            }), \"\\n  }, \", _jsx(_components.span, {\n              className: \"hljs-number\",\n              children: \"5000\"\n            }), \");\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"script\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"DOM 요소 출력하기 🖨️\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"개발 과정에서 DOM 요소를 출력해야 할 때, console.log을 사용하면 종종 전체 DOM 요소만 출력되고 내부 속성을 볼 수 없습니다. console.dir을 사용해보세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dir\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"기타\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"어플리케이션 활성화하기 🚀\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"모바일 측면에서 개발할 때, 다른 애플리케이션을 열어야 할 때가 있어요. 아래 방법들은 location.href 할당을 통해서도 작동할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!-- 다음 링크들을 사용해서 폰 기능을 활성화해보세요 📲 -->\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"href\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"tel:12345678910\\\"\"\n            }), \">\"]\n          }), \"전화 걸기\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \">\"]\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"href\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"sms:12345678910,12345678911?body=안녕하세요\\\"\"\n            }), \">\"]\n          }), \"안드로이드 메시지\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \">\"]\n          })]\n        }), \" \\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"href\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"sms:/open?addresses=12345678910,12345678911&body=안녕하세요\\\"\"\n            }), \">\"]\n          }), \"iOS 메시지\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \">\"]\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"href\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"wx://\\\"\"\n            }), \">\"]\n          }), \"iOS 메시지\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"쉬운 용어로 설명 🚀\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"작가를 박수치고 팔로우해주세요 👏️️\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다른 플랫폼 방문하기: Stackademic | CoFeed | Venture\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PlainEnglish.io에서 더 많은 콘텐츠 확인하기\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}