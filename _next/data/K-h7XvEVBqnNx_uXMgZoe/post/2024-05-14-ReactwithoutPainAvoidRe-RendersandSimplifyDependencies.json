{"pageProps":{"post":{"title":"고통 없는 리액트 다시 렌더링 피하기와 의존성 간소화하기","description":"","date":"2024-05-14 14:04","slug":"2024-05-14-ReactwithoutPainAvoidRe-RendersandSimplifyDependencies","content":"\n\n\n![React without Pain: Avoid Re-Renders and Simplify Dependencies](/assets/img/2024-05-14-ReactwithoutPainAvoidRe-RendersandSimplifyDependencies_0.png)\n\nReact에서 다시 렌더링을 추적하는 것은 고통스러운 과정일 수 있습니다. Fine-grain 반응성 패턴은 이 문제를 완전히 제거하는 해결책을 제공하여 React 엔지니어가 종속성을 추적하는 것을 잊고 코드 작성에 집중할 수 있게 합니다. 이 기사에서는 라이브러리 Mlyn이 종속성 관리를 간단하게 하고 React 애플리케이션에서 불필요한 다시 렌더링을 방지하는 방법을 살펴보겠습니다.\n\n# 종속성 관리: 공통 문제\n\n기존의 React 애플리케이션에서 상태와 종속성을 관리하는 것은 종종 복잡하고 오류가 발생하기 쉬운 코드로 이어질 수 있습니다. 이 문제를 설명하기 위해 간단한 카운터 예제를 살펴보겠습니다.\n\n\n\n\n# 전통적인 리액트 예제\n\n```js\nimport React, { useState, useCallback } from \"react\";\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  const onIncrement = useCallback(() => {\n    setCount(prevCount => prevCount + 1);\n  }, [count]); // count에 의존\n  return (\n    <div>\n      <h1>카운트: {count}</h1>\n      <button onClick={onIncrement}>증가</button>\n    </div>\n  );\n};\nexport default Counter;\n```\n\n# 의존성 문제\n\n이 예제에서 onIncrement 함수는 count를 의존성으로 하는 useCallback으로 래핑되어 있습니다. count가 변경될 때마다 onIncrement가 다시 생성됩니다.\n\n\n\n# Mlyn과 함께 간단하게\n\nMlyn은 세부적인 반응성을 소개하여 의존성을 걱정하지 않고 상태 업데이트를 관리할 수 있습니다. Mlyn을 사용하여 동일한 예제를 다시 작성해 봅시다.\n\n# Mlyn 예제\n\n```js\nimport React, { useCallback } from \"react\";\nimport { rc, useSubject } from \"mlyn/react\";\nconst Counter = rc(() => {\n  const state = useSubject({ count: 0 });\n  const increment = useCallback(() => {\n    state.count(state.count() + 1);\n  }, []);\n  return (\n    <div>\n      <h1>Count: {state.count()}</h1>\n      <button onClick={onIncrement}>Increment</button>\n    </div>\n  );\n});\n\nexport default Counter;\n```  \n\n\n\nstate.count의 참조가 변경되지 않기 때문에 useCallback에서 해당 값을 다시 만들지 않고도 읽을 수 있습니다.\n\n# 정교한 Reactivity의 장점\n\n- Stable Callbacks: Mlyn의 onIncrement 함수는 state.count를 의존성으로 필요로하지 않습니다. 이러한 안정성은 함수의 불필요한 재생성을 방지합니다. 그리고 onIncrement의 소비자들은 count가 변경되어도 다시 렌더링되지 않습니다.\n- 단순화된 코드: Mlyn을 사용하면 종속성을 수동으로 추적할 필요가 없습니다.\n\n# IncrementButton 추출: 다시 렌더링에 대한 더 깊은 이해\n\n\n\nLet’s extract the increment button into theIncrementButton component to understand how Mlyn’s approach prevents unnecessary re-renders.\n\n# Traditional React: Re-Rendering Issue\n\nIn the traditional example, IncrementButton re-renders every time count changes because increment is a new function reference each time.\n\n```js\nconst IncrementButton = React.memo(({ onIncrement }) => {\n  console.log(\"IncrementButton re-rendered\");\n  return (\n    <div>\n      <button onClick={onIncrement}>Increment from Child</button>\n    </div>\n  );\n});\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  const onIncrement = useCallback(() => {\n    setCount(prevCount => prevCount + 1);\n  }, [count]); // Dependency on count\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <IncrementButton onIncrement={onIncrement} />\n    </div>\n  );\n};\n```\n\n\n\n# Mlyn: 불필요한 다시 렌더링 방지\n\nMlyn을 사용하면 onIncrement가 동일한 참조로 유지되어 IncrementButton이 불필요하게 다시 렌더링되지 않습니다. 이것은 섬세한 용량으로 반응하는 주요 장점입니다.\n\n# 예제 재방문\n\n```js\nconst Counter = rc(() => {\n  const state = useSubject({ count: 0 });\n  const onIncrement = useCallback(() => {\n    state.count(state.count() + 1); // 어떤 종속성도 필요하지 않습니다\n  }, []);\n  return (\n    <div>\n      <h1>Count: {state.count()}</h1>\n      <IncrementButton onIncrement={onIncrement} />\n    </div>\n  );\n});\n```\n\n\n\n# 개요\n\nMlyn의 섬세한 리액티브는 상태 관리를 간단하게 만들어 줍니다:\n\n- 의존성 추적이 필요 없어집니다: 수동으로 종속성을 업데이트할 필요 없이 더 깨끗하고 유지보수가 쉬운 코드를 작성할 수 있습니다.\n- 불필요한 다시 렌더링 방지: 컴포넌트는 실제 상태나 프롭이 변경될 때만 다시 렌더링되어 성능과 효율성을 향상시킵니다.\n\nMlyn을 도입함으로써, React 엔지니어는 복잡한 상태 종속성을 관리하는 귀찮음 없이 기능이 풍부한 코드 작성에 집중할 수 있습니다. 다음 프로젝트에 Mlyn을 통합해보고 섬세한 리액티브의 편리함을 경험해보세요!\n\n\n\nmlyn에 관심이 있다면, GitHub에서 확인해보세요: [https://github.com/vaukalak/mlyn](https://github.com/vaukalak/mlyn)","ogImage":{"url":"/assets/img/2024-05-14-ReactwithoutPainAvoidRe-RendersandSimplifyDependencies_0.png"},"coverImage":"/assets/img/2024-05-14-ReactwithoutPainAvoidRe-RendersandSimplifyDependencies_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-ReactwithoutPainAvoidRe-RendersandSimplifyDependencies_0.png\",\n        alt: \"React without Pain: Avoid Re-Renders and Simplify Dependencies\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React에서 다시 렌더링을 추적하는 것은 고통스러운 과정일 수 있습니다. Fine-grain 반응성 패턴은 이 문제를 완전히 제거하는 해결책을 제공하여 React 엔지니어가 종속성을 추적하는 것을 잊고 코드 작성에 집중할 수 있게 합니다. 이 기사에서는 라이브러리 Mlyn이 종속성 관리를 간단하게 하고 React 애플리케이션에서 불필요한 다시 렌더링을 방지하는 방법을 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"종속성 관리: 공통 문제\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기존의 React 애플리케이션에서 상태와 종속성을 관리하는 것은 종종 복잡하고 오류가 발생하기 쉬운 코드로 이어질 수 있습니다. 이 문제를 설명하기 위해 간단한 카운터 예제를 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"전통적인 리액트 예제\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useState, useCallback } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Counter\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [count, setCount] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" onIncrement = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useCallback\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setCount\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"prevCount\"\n          }), \" =>\"]\n        }), \" prevCount + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \");\\n  }, [count]); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// count에 의존\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"카운트: {count}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{onIncrement}\"\n            }), \">\"]\n          }), \"증가\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Counter\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"의존성 문제\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예제에서 onIncrement 함수는 count를 의존성으로 하는 useCallback으로 래핑되어 있습니다. count가 변경될 때마다 onIncrement가 다시 생성됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Mlyn과 함께 간단하게\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Mlyn은 세부적인 반응성을 소개하여 의존성을 걱정하지 않고 상태 업데이트를 관리할 수 있습니다. Mlyn을 사용하여 동일한 예제를 다시 작성해 봅시다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Mlyn 예제\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useCallback } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { rc, useSubject } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"mlyn/react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Counter\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rc\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" state = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useSubject\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"count\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \" });\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" increment = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useCallback\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    state.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"count\"\n        }), \"(state.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"count\"\n        }), \"() + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \");\\n  }, []);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"Count: {state.count()}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{onIncrement}\"\n            }), \">\"]\n          }), \"Increment\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Counter\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"state.count의 참조가 변경되지 않기 때문에 useCallback에서 해당 값을 다시 만들지 않고도 읽을 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"정교한 Reactivity의 장점\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Stable Callbacks: Mlyn의 onIncrement 함수는 state.count를 의존성으로 필요로하지 않습니다. 이러한 안정성은 함수의 불필요한 재생성을 방지합니다. 그리고 onIncrement의 소비자들은 count가 변경되어도 다시 렌더링되지 않습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"단순화된 코드: Mlyn을 사용하면 종속성을 수동으로 추적할 필요가 없습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"IncrementButton 추출: 다시 렌더링에 대한 더 깊은 이해\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let’s extract the increment button into theIncrementButton component to understand how Mlyn’s approach prevents unnecessary re-renders.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Traditional React: Re-Rendering Issue\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the traditional example, IncrementButton re-renders every time count changes because increment is a new function reference each time.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"IncrementButton\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"memo\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"{ onIncrement }\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"IncrementButton re-rendered\\\"\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{onIncrement}\"\n            }), \">\"]\n          }), \"Increment from Child\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Counter\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [count, setCount] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" onIncrement = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useCallback\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setCount\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"prevCount\"\n          }), \" =>\"]\n        }), \" prevCount + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \");\\n  }, [count]); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Dependency on count\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"Count: {count}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"IncrementButton\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onIncrement\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{onIncrement}\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Mlyn: 불필요한 다시 렌더링 방지\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Mlyn을 사용하면 onIncrement가 동일한 참조로 유지되어 IncrementButton이 불필요하게 다시 렌더링되지 않습니다. 이것은 섬세한 용량으로 반응하는 주요 장점입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"예제 재방문\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Counter\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rc\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" state = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useSubject\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"count\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \" });\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" onIncrement = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useCallback\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    state.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"count\"\n        }), \"(state.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"count\"\n        }), \"() + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 어떤 종속성도 필요하지 않습니다\"\n        }), \"\\n  }, []);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"Count: {state.count()}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"IncrementButton\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onIncrement\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{onIncrement}\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"개요\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Mlyn의 섬세한 리액티브는 상태 관리를 간단하게 만들어 줍니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"의존성 추적이 필요 없어집니다: 수동으로 종속성을 업데이트할 필요 없이 더 깨끗하고 유지보수가 쉬운 코드를 작성할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"불필요한 다시 렌더링 방지: 컴포넌트는 실제 상태나 프롭이 변경될 때만 다시 렌더링되어 성능과 효율성을 향상시킵니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Mlyn을 도입함으로써, React 엔지니어는 복잡한 상태 종속성을 관리하는 귀찮음 없이 기능이 풍부한 코드 작성에 집중할 수 있습니다. 다음 프로젝트에 Mlyn을 통합해보고 섬세한 리액티브의 편리함을 경험해보세요!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"mlyn에 관심이 있다면, GitHub에서 확인해보세요: \", _jsx(_components.a, {\n        href: \"https://github.com/vaukalak/mlyn\",\n        children: \"https://github.com/vaukalak/mlyn\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}