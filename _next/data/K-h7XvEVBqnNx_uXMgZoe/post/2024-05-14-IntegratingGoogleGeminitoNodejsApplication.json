{"pageProps":{"post":{"title":"Google Gemini을 Nodejs 애플리케이션에 통합하는 방법","description":"","date":"2024-05-14 10:56","slug":"2024-05-14-IntegratingGoogleGeminitoNodejsApplication","content":"\n\n<img src=\"/assets/img/2024-05-14-IntegratingGoogleGeminitoNodejsApplication_0.png\" />\n\n# 구글 젬이니란?\n\n구글 젬이니는 구글 AI가 개발한 강력하고 다양한 AI 모델입니다. 젬이니는 텍스트뿐만 아니라 코드, 오디오, 이미지 및 비디오와 같은 다양한 형식에서 작동하고 이해할 수 있습니다. 이는 Node.js 프로젝트에 대한 흥미로운 가능성을 열어줍니다.\n\n이 기사에서는 구글 젬이니를 Node.js 애플리케이션에 통합하는 방법을 안내하겠습니다. 우리는 구글 젬이니 SDK를 사용할 것입니다.\n\n\n\n## 준비물\n\n- 개인 컴퓨터에 Node.Js가 설치되어 있어야 합니다.\n- API 키 생성을 위한 Google AI Platform 계정이 있어야 합니다.\n\n- Node.Js 버전 18 이상이 필요합니다.\n- Node.Js에서 import를 사용하려면 package.json 파일에 \"type\": \"module\"을 추가해야 합니다.\n\n# 시작하기\n\n\n\n새로운 Node.js 프로젝트를 만들어봅시다. 터미널을 열고 다음 명령어를 실행해주세요:\n\n```js\nmkdir google-gemini-nodejs\ncd google-gemini-nodejs\nnpm init -y\n```\n\n다음으로, Google Gemini SDK와 dotenv 패키지를 설치해주세요:\n\n```js\nnpm install @google/generative-ai dotenv\n```\n\n\n\n## 구글 AI 플랫폼 계정 생성하기\n\nGoogle Gemini SDK를 사용하려면 API 키가 필요합니다. 구글 AI 플랫폼 웹사이트를 방문하여 새 API를 생성할 수 있습니다.\n\n새 API 키를 만들려면 \"Get API Key\" 버튼을 클릭하세요. API 키를 획득한 후에는 프로젝트의 루트에 있는 .env 파일에 저장하세요.\n\n```js\nAPI_KEY=YOUR_API_KEY\n```\n\n\n\n# Google Gemini SDK 설정하기\n\n이제 API 키를 가지고 있으니 Google Gemini SDK를 설정해 봅시다. 프로젝트의 루트에 index.js라는 새 파일을 만들고 아래 코드를 추가해주세요:\n\n## Google Gemini Pro 모델\n\n```js\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst gemini_api_key = process.env.API_KEY;\nconst googleAI = new GoogleGenerativeAI(gemini_api_key);\nconst geminiConfig = {\n  temperature: 0.9,\n  topP: 1,\n  topK: 1,\n  maxOutputTokens: 4096,\n};\n\nconst geminiModel = googleAI.getGenerativeModel({\n  model: \"gemini-pro\",\n  geminiConfig,\n});\n\nconst generate = async () => {\n  try {\n    const prompt = \"Tell me about google.\";\n    const result = await geminiModel.generateContent(prompt);\n    const response = result.response;\n    console.log(response.text());\n  } catch (error) {\n    console.log(\"response error\", error);\n  }\n};\n\ngenerate();\n```\n\n\n\n위 코드에서는 텍스트 생성, 번역, 그리고 멀티턴 텍스트 및 코드 채팅과 같은 자연어 작업을 처리하는 데 뛰어난 성능을 발휘하는 Google Gemini Pro 모델을 사용했습니다. 이는 사용자와 자연어로 상호 작용하는 지능형 시스템을 구축하기에 완벽한 모델입니다.\n\n## Google Gemini Vision Model\n\n```js\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport fs from \"fs/promises\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n \nconst gemini_api_key = process.env.API_KEY;\nconst googleAI = new GoogleGenerativeAI(gemini_api_key);\nconst geminiConfig = {\n  temperature: 0.4,\n  topP: 1,\n  topK: 32,\n  maxOutputTokens: 4096,\n};\n \nconst geminiModel = googleAI.getGenerativeModel({\n  model: \"gemini-pro-vision\",\n  geminiConfig,\n});\n \nconst generate = async () => {\n  try {\n    // 이미지 파일 읽기\n    const filePath = \"some-image.jpeg\";\n    const imageFile = await fs.readFile(filePath);\n    const imageBase64 = imageFile.toString(\"base64\");\n \n    const promptConfig = [\n      { text: \"이 이미지에 대해 무슨 일이 일어나고 있는지 알려줄 수 있나요?\" },\n      {\n        inlineData: {\n          mimeType: \"image/jpeg\",\n          data: imageBase64,\n        },\n      },\n    ];\n \n    const result = await geminiModel.generateContent({\n      contents: [{ role: \"user\", parts: promptConfig }],\n    });\n    const response = await result.response;\n    console.log(response.text());\n  } catch (error) {\n    console.log(\"응답 오류\", error);\n  }\n};\n \ngenerate();\r\n```\n\n위 코드에서는 이미지의 내용을 기반으로 전체 이미지를 분류하고 이미지에 대한 캡션을 생성하는 Google Gemini Vision 모델을 사용했습니다. 이는 사용자와 자연어로 상호 작용하는 지능형 시스템을 구축하기에 완벽한 모델입니다.\n\n\n\n## 어플리케이션 실행하기\n\n어플리케이션을 실행하려면 터미널을 열고 다음 명령어를 실행하세요:\n\n```js\nnode index.js\n```\n\n## 결론\n\n\n\n이 글에서는 Google Gemini를 Node.js 어플리케이션에 통합하는 방법에 대해 배웠습니다. 또한 Google Gemini Pro와 Vision 모델을 사용하여 텍스트 및 이미지 캡션을 생성하는 방법도 배웠습니다. GitHub에서 전체 소스 코드를 찾을 수 있습니다.\n\n여기까지입니다. 이 글이 유용했으면 좋겠습니다. 궁금한 점이나 피드백이 있으시다면 댓글 섹션에 공유해주세요. 기꺼이 답변해 드리겠습니다.","ogImage":{"url":"/assets/img/2024-05-14-IntegratingGoogleGeminitoNodejsApplication_0.png"},"coverImage":"/assets/img/2024-05-14-IntegratingGoogleGeminitoNodejsApplication_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-IntegratingGoogleGeminitoNodejsApplication_0.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"구글 젬이니란?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구글 젬이니는 구글 AI가 개발한 강력하고 다양한 AI 모델입니다. 젬이니는 텍스트뿐만 아니라 코드, 오디오, 이미지 및 비디오와 같은 다양한 형식에서 작동하고 이해할 수 있습니다. 이는 Node.js 프로젝트에 대한 흥미로운 가능성을 열어줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기사에서는 구글 젬이니를 Node.js 애플리케이션에 통합하는 방법을 안내하겠습니다. 우리는 구글 젬이니 SDK를 사용할 것입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"준비물\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"개인 컴퓨터에 Node.Js가 설치되어 있어야 합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"API 키 생성을 위한 Google AI Platform 계정이 있어야 합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Node.Js 버전 18 이상이 필요합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Node.Js에서 import를 사용하려면 package.json 파일에 \\\"type\\\": \\\"module\\\"을 추가해야 합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"시작하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새로운 Node.js 프로젝트를 만들어봅시다. 터미널을 열고 다음 명령어를 실행해주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"mkdir google-gemini-nodejs\\ncd google-gemini-nodejs\\nnpm init -y\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음으로, Google Gemini SDK와 dotenv 패키지를 설치해주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install @google/generative-ai dotenv\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"구글 AI 플랫폼 계정 생성하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Google Gemini SDK를 사용하려면 API 키가 필요합니다. 구글 AI 플랫폼 웹사이트를 방문하여 새 API를 생성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새 API 키를 만들려면 \\\"Get API Key\\\" 버튼을 클릭하세요. API 키를 획득한 후에는 프로젝트의 루트에 있는 .env 파일에 저장하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"API_KEY\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"YOUR_API_KEY\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Google Gemini SDK 설정하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 API 키를 가지고 있으니 Google Gemini SDK를 설정해 봅시다. 프로젝트의 루트에 index.js라는 새 파일을 만들고 아래 코드를 추가해주세요:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Google Gemini Pro 모델\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GoogleGenerativeAI\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@google/generative-ai\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" dotenv \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dotenv\\\"\"\n        }), \";\\ndotenv.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"config\"\n        }), \"();\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" gemini_api_key = process.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"env\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API_KEY\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" googleAI = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GoogleGenerativeAI\"\n        }), \"(gemini_api_key);\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" geminiConfig = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"temperature\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.9\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"topP\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"topK\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"maxOutputTokens\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4096\"\n        }), \",\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" geminiModel = googleAI.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getGenerativeModel\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"model\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gemini-pro\\\"\"\n        }), \",\\n  geminiConfig,\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" prompt = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Tell me about google.\\\"\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" result = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" geminiModel.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generateContent\"\n        }), \"(prompt);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" response = result.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"response\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(response.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"text\"\n        }), \"());\\n  } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"catch\"\n        }), \" (error) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"response error\\\"\"\n        }), \", error);\\n  }\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate\"\n        }), \"();\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 코드에서는 텍스트 생성, 번역, 그리고 멀티턴 텍스트 및 코드 채팅과 같은 자연어 작업을 처리하는 데 뛰어난 성능을 발휘하는 Google Gemini Pro 모델을 사용했습니다. 이는 사용자와 자연어로 상호 작용하는 지능형 시스템을 구축하기에 완벽한 모델입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Google Gemini Vision Model\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GoogleGenerativeAI\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@google/generative-ai\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" fs \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"fs/promises\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" dotenv \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dotenv\\\"\"\n        }), \";\\ndotenv.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"config\"\n        }), \"();\\n \\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" gemini_api_key = process.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"env\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API_KEY\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" googleAI = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GoogleGenerativeAI\"\n        }), \"(gemini_api_key);\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" geminiConfig = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"temperature\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.4\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"topP\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"topK\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"32\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"maxOutputTokens\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4096\"\n        }), \",\\n};\\n \\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" geminiModel = googleAI.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getGenerativeModel\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"model\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gemini-pro-vision\\\"\"\n        }), \",\\n  geminiConfig,\\n});\\n \\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이미지 파일 읽기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" filePath = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"some-image.jpeg\\\"\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" imageFile = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" fs.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"readFile\"\n        }), \"(filePath);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" imageBase64 = imageFile.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toString\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"base64\\\"\"\n        }), \");\\n \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" promptConfig = [\\n      { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"text\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"이 이미지에 대해 무슨 일이 일어나고 있는지 알려줄 수 있나요?\\\"\"\n        }), \" },\\n      {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"inlineData\"\n        }), \": {\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"mimeType\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"image/jpeg\\\"\"\n        }), \",\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"data\"\n        }), \": imageBase64,\\n        },\\n      },\\n    ];\\n \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" result = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" geminiModel.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generateContent\"\n        }), \"({\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"contents\"\n        }), \": [{ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"role\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"user\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"parts\"\n        }), \": promptConfig }],\\n    });\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" response = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" result.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"response\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(response.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"text\"\n        }), \"());\\n  } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"catch\"\n        }), \" (error) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"응답 오류\\\"\"\n        }), \", error);\\n  }\\n};\\n \\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate\"\n        }), \"();\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 코드에서는 이미지의 내용을 기반으로 전체 이미지를 분류하고 이미지에 대한 캡션을 생성하는 Google Gemini Vision 모델을 사용했습니다. 이는 사용자와 자연어로 상호 작용하는 지능형 시스템을 구축하기에 완벽한 모델입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"어플리케이션 실행하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"어플리케이션을 실행하려면 터미널을 열고 다음 명령어를 실행하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"node index.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 글에서는 Google Gemini를 Node.js 어플리케이션에 통합하는 방법에 대해 배웠습니다. 또한 Google Gemini Pro와 Vision 모델을 사용하여 텍스트 및 이미지 캡션을 생성하는 방법도 배웠습니다. GitHub에서 전체 소스 코드를 찾을 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기까지입니다. 이 글이 유용했으면 좋겠습니다. 궁금한 점이나 피드백이 있으시다면 댓글 섹션에 공유해주세요. 기꺼이 답변해 드리겠습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}