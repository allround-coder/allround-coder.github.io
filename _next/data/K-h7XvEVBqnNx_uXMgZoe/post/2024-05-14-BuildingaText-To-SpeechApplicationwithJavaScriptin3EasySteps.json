{"pageProps":{"post":{"title":"JavaScript로 간단히 3단계로 텍스트 음성 변환 애플리케이션 만들기","description":"","date":"2024-05-14 16:04","slug":"2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps","content":"\n\n![이미지](/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_0.png)\n\n## 프론트엔드 개발\n\n# 텍스트를 음성으로 변환하기\n\n![이미지](/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_1.png)\n\n\n\n## 자바스크립트로 텍스트 음성 변환 앱 만드는 간단한 안내서\n\n안녕하세요! 코딩과 기술을 좋아하는 미디엄 친구 여러분!\n\n미디엄에서 텍스트 음성 변환 기능을 시도해 보신 적이 있나요? 정말 멋진 기능이죠, 그렇죠? 버튼을 누르기만 하면 글을 읽는 대신에 들을 수 있어요. 그렇게 하면 내용을 즐기면서 다른 일을 할 수도 있어요.\n\n![이미지](/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_2.png)\n\n\n\n이 기능 덕분에 새로운 기사 아이디어가 떠올랐어요. 그래서 이 기능이 어떻게 작동하는지 보여주고 여러분께 자신만의 기능을 만드는 방법을 가르쳐주기로 결심했어요.\n\n이 기사에서는 JavaScript와 Web Speech API만을 사용하여 어떻게 재미있는 텍스트 음성 변환 앱을 만들 수 있는지 단계별로 보여드릴 거에요. 끝나면 브라우저에서 어떤 텍스트든 음성으로 변환할 수 있게 되며 음성과 속도를 선택할 수도 있을 거예요.\n\n준비됐나요? 시작해볼까요?\n\n# JavaScript로 텍스트 음성 변환 애플리케이션 만들기\n\n\n\n<img src=\"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_3.png\" />\n\n텍스트 음성 변환 (TTS) 시스템은 일반 언어 텍스트를 음성으로 변환합니다.\n\n이제 JavaScript를 사용하여 간단한 텍스트 음성 변환 애플리케이션을 만들어 보겠습니다. 구체적으로는 Web Speech API의 Speech Synthesis 인터페이스를 사용할 것입니다. 이 인터페이스는 거의 모든 최신 브라우저에서 지원되며 우리의 애플리케이션에 완벽합니다.\n\n시작하기 전에 JavaScript와 HTML의 기본적인 이해와 ES6 기능에 대한 친숙함이 있으면 더 좋을 것입니다.\n\n\n\n## 단계 1: HTML 구조 설정\n\n새 HTML 파일을 만들고 index.html로 저장하세요.\n\n먼저 텍스트를 입력하고 음성 기능을 실행할 수 있는 간단한 사용자 인터페이스를 설정해보겠습니다.\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>JavaScript 텍스트 음성 변환</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            font-family: Arial, sans-serif;\n        }\n\n        .container {\n            display: flex;\n            flex-direction: column;\n            gap: 20px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <textarea id=\"text\" rows=\"5\" cols=\"30\"></textarea>\n        <button id=\"speak\">음성 변환</button>\n    </div>\n\n    <script src=\"app.js\"></script>\n</body>\n\n</html>\n```\n\n\n\nHTML 코드에서 사용자 입력을 받을 수 있는 텍스트 영역과 텍스트를 음성으로 변환하는 버튼을 추가했고, 다음 단계에서 생성할 'app.js'라는 JavaScript 파일을 링크했습니다.\n\n![이미지](/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_4.png)\n\n## 단계 2: JavaScript 구현하기\n\n이제 기능을 추가해봅시다. HTML 파일과 동일한 디렉토리에 새 JavaScript 파일을 만들어 'app.js'로 이름짓어주세요.\n\n\n\n스피치 합성 API는 window.speechSynthesis 객체를 통해 노출됩니다. 다음은 기본 구현입니다:\n\n```js\nconst textarea = document.getElementById('text');\nconst speakButton = document.getElementById('speak');\n\nspeakButton.addEventListener('click', () => {\n    let text = textarea.value;\n    let utterance = new SpeechSynthesisUtterance(text);\n\n    speechSynthesis.speak(utterance);\n});\n```\n\n이 스크립트는 다음을 수행합니다:\n\n- DOM에서 textarea와 버튼 엘리먼트를 선택합니다.\n- 버튼에 클릭 이벤트 리스너를 추가합니다. 버튼을 클릭하면 이벤트 리스너가:\n- 텍스트 영역의 현재 값 가져옵니다.\n- 텍스트 영역의 값으로 새로운 SpeechSynthesisUtterance 객체를 생성합니다.\n- 이 SpeechSynthesisUtterance를 speechSynthesis.speak 메서드에 전달하여 음성 합성을 시작합니다.\n\n\n\n## 단계 3: 음성 및 발화 속도 사용자화\n\nSpeechSynthesisUtterance 객체를 통해 음성, 음조, 발화 속도 등의 속성을 변경할 수 있습니다. 그러나 이를 구현하는 방법을 살펴보겠습니다.\n\n먼저, 음성 선택 및 발화 속도 제어를 위한 새로운 요소를 추가하기 위해 HTML을 수정해주세요:\n\n```js\n<!-- ...기존 HTML... -->\n<div class=\"container\">\n    <textarea id=\"text\" rows=\"5\" cols=\"30\"></textarea>\n    <select id=\"voices\"></select>\n    <input id=\"rate\" type=\"range\" min=\"0.5\" max=\"2\" value=\"1\" step=\"0.1\" />\n    <button id=\"speak\">말하기</button>\n</div>\n<!-- ...기존 HTML... -->\n```\n\n\n\n그럼 app.js를 다음과 같이 업데이트하세요:\n\n```js\nconst textarea = document.getElementById('text');\nconst speakButton = document.getElementById('speak');\nconst voicesSelect = document.getElementById('voices');\nconst rateInput = document.getElementById('rate');\n\nlet voices = [];\n\nfunction populateVoices() {\n    voices = speechSynthesis.getVoices();\n    voices.forEach((voice, i) => {\n        let option = document.createElement('option');\n        option.value = i;\n        option.textContent = `${voice.name} (${voice.lang})`;\n        voicesSelect.appendChild(option);\n    });\n}\n\nspeechSynthesis.addEventListener('voiceschanged', populateVoices);\n\nspeakButton.addEventListener('click', () => {\n    let text = textarea.value;\n    let utterance = new SpeechSynthesisUtterance(text);\n\n    // 선택한 음성 가져오기\n    let selectedVoiceIndex = voicesSelect.value;\n    utterance.voice = voices[selectedVoiceIndex];\n\n    // 속도 가져오기\n    utterance.rate = rateInput.value;\n\n    speechSynthesis.speak(utterance);\n});\n```\n\n여기서는 모든 사용 가능한 음성으로 select 요소를 채우는 populateVoices 함수를 추가했으며, 'voiceschanged' 이벤트가 트리거될 때 이 함수를 호출합니다. 'voiceschanged' 이벤트는 speechSynthesis.getVoices() 메소드가 반환할 SpeechSynthesisVoice 객체 목록이 변경되었을 때 발생합니다.\n\n음성 합성을 트리거할 때 우리는 선택한 음성과 속도를 DOM에서 가져와서 SpeechSynthesisUtterance 객체에 설정합니다.\n\n\n\n![이미지](/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_5.png)\n\n이제 위의 사진에 나와 있는 대로 작동하는 텍스트 음성 변환 애플리케이션이 준비되었어요: 텍스트 영역에 원하는 텍스트를 입력하고, 음성을 선택하고 말 속도를 조절한 다음 \"음성 출력\"을 클릭하면 말이 들릴 거예요!\n\n![이미지](https://miro.medium.com/v2/resize:fit:732/1*EImZrlDQ1zrxaKe9FBPPmA.gif)\n\n## 더 알아보기:\n\n\n\n# 마무리\n\n![text-to-speech-app](/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_6.png)\n\n그러면 JavaScript와 Web Speech API를 사용하여 몇 분 안에 만든 간단하고 재미있는 텍스트 음성 변환 앱이 준비됐어요!\n\n이것은 사용자들이 콘텐츠를 독특하고 접근성 있게 소비하는 것과 같이 Medium이 하는 대로 당신의 웹 애플리케이션의 사용자 경험을 향상시키는 멋진 방법이 될 수 있어요.\n\n\n\n만약 JavaScript와 웹 개발의 다른 측면을 더 탐구하고 싶다면, 내 다른 기사들을 꼭 확인해보시길 권해드립니다.\n\n텍스트 음성 변환에 대해 이야기할 때, 이제 텍스트 강조 기능을 구현해보는 것이 좋겠네요. \"AWS Polly를 활용한 클라우드 기반 텍스트 음성 변환 및 텍스트 강조 생성 애플리케이션 구축\"에 해당하는 제 기사를 참고해보세요. 이 기사는 클라우드 기술을 통해 진보된, 확장 가능하고 이용하기 쉬운 텍스트 음성 변환 솔루션을 만드는 방법을 안내합니다. 그리고 AWS Polly는 친근하고 쉬운 도구입니다.\n\n반면에 UI 게임을 업그레이드하고 싶다면, “UI 디자인 마스터하기: 최고의 실천 지침 완전 가이드\"를 놓치지 마세요. 이 포괄적인 안내서는 UI 디자인의 힘을 발휘하며, 웹 및 모바일 플랫폼을 위한 직관적이고 사용자 친화적, 매력적인 인터페이스를 만드는 통찰을 제공합니다.\n\n<img src=\"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_7.png\" />\n\n\n\n# 리고처럼 재사용 가능한 구성 요소로 애플리케이션 만들기\n\n![이미지](/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_8.png)\n\nBit의 오픈 소스 도구는 25만 명 이상의 개발자들이 구성 요소로 애플리케이션을 만들 수 있게 도와줍니다.\n\n어떤 UI, 기능 또는 페이지든 재사용 가능한 구성 요소로 변환하고 애플리케이션 간에 공유하세요. 협업이 더 쉬워지고 더 빠르게 개발할 수 있습니다.\n\n\n\n→ 더 많은 정보 알아보기\n\n앱을 구성 요소로 분할하여 앱 개발을 더 쉽게 만들고, 원하는 워크플로에 대해 최상의 경험을 누려보세요:\n\n# → 미크로 프론트엔드\n\n# → 디자인 시스템\n\n\n\n# → 코드 공유 및 재사용\n\n# → 단일 저장소\n\n# Learn more:","ogImage":{"url":"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_0.png"},"coverImage":"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_0.png","tag":["Tech"],"readingTime":7},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"프론트엔드 개발\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"텍스트를 음성으로 변환하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"자바스크립트로 텍스트 음성 변환 앱 만드는 간단한 안내서\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"안녕하세요! 코딩과 기술을 좋아하는 미디엄 친구 여러분!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"미디엄에서 텍스트 음성 변환 기능을 시도해 보신 적이 있나요? 정말 멋진 기능이죠, 그렇죠? 버튼을 누르기만 하면 글을 읽는 대신에 들을 수 있어요. 그렇게 하면 내용을 즐기면서 다른 일을 할 수도 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_2.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기능 덕분에 새로운 기사 아이디어가 떠올랐어요. 그래서 이 기능이 어떻게 작동하는지 보여주고 여러분께 자신만의 기능을 만드는 방법을 가르쳐주기로 결심했어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기사에서는 JavaScript와 Web Speech API만을 사용하여 어떻게 재미있는 텍스트 음성 변환 앱을 만들 수 있는지 단계별로 보여드릴 거에요. 끝나면 브라우저에서 어떤 텍스트든 음성으로 변환할 수 있게 되며 음성과 속도를 선택할 수도 있을 거예요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"준비됐나요? 시작해볼까요?\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"JavaScript로 텍스트 음성 변환 애플리케이션 만들기\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_3.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"텍스트 음성 변환 (TTS) 시스템은 일반 언어 텍스트를 음성으로 변환합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 JavaScript를 사용하여 간단한 텍스트 음성 변환 애플리케이션을 만들어 보겠습니다. 구체적으로는 Web Speech API의 Speech Synthesis 인터페이스를 사용할 것입니다. 이 인터페이스는 거의 모든 최신 브라우저에서 지원되며 우리의 애플리케이션에 완벽합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시작하기 전에 JavaScript와 HTML의 기본적인 이해와 ES6 기능에 대한 친숙함이 있으면 더 좋을 것입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 1: HTML 구조 설정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새 HTML 파일을 만들고 index.html로 저장하세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 텍스트를 입력하고 음성 기능을 실행할 수 있는 간단한 사용자 인터페이스를 설정해보겠습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DOCTYPE\"\n        }), \" html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>JavaScript 텍스트 음성 변환</title>\\n    <style>\\n        body {\\n            display: flex;\\n            justify-content: center;\\n            align-items: center;\\n            height: 100vh;\\n            font-family: Arial, sans-serif;\\n        }\\n\\n        .container {\\n            display: flex;\\n            flex-direction: column;\\n            gap: 20px;\\n        }\\n    </style>\\n</head>\\n\\n<body>\\n    <div class=\\\"container\\\">\\n        <textarea id=\\\"text\\\" rows=\\\"5\\\" cols=\\\"30\\\"></textarea>\\n        <button id=\\\"speak\\\">음성 변환</button>\\n    </div>\\n\\n    <script src=\\\"app.js\\\"></script>\\n</body>\\n\\n</html>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HTML 코드에서 사용자 입력을 받을 수 있는 텍스트 영역과 텍스트를 음성으로 변환하는 버튼을 추가했고, 다음 단계에서 생성할 'app.js'라는 JavaScript 파일을 링크했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_4.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 2: JavaScript 구현하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 기능을 추가해봅시다. HTML 파일과 동일한 디렉토리에 새 JavaScript 파일을 만들어 'app.js'로 이름짓어주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"스피치 합성 API는 window.speechSynthesis 객체를 통해 노출됩니다. 다음은 기본 구현입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" textarea = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'text'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" speakButton = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'speak'\"\n        }), \");\\n\\nspeakButton.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'click'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" text = textarea.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" utterance = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SpeechSynthesisUtterance\"\n        }), \"(text);\\n\\n    speechSynthesis.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"speak\"\n        }), \"(utterance);\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 스크립트는 다음을 수행합니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"DOM에서 textarea와 버튼 엘리먼트를 선택합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"버튼에 클릭 이벤트 리스너를 추가합니다. 버튼을 클릭하면 이벤트 리스너가:\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"텍스트 영역의 현재 값 가져옵니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"텍스트 영역의 값으로 새로운 SpeechSynthesisUtterance 객체를 생성합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이 SpeechSynthesisUtterance를 speechSynthesis.speak 메서드에 전달하여 음성 합성을 시작합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 3: 음성 및 발화 속도 사용자화\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SpeechSynthesisUtterance 객체를 통해 음성, 음조, 발화 속도 등의 속성을 변경할 수 있습니다. 그러나 이를 구현하는 방법을 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저, 음성 선택 및 발화 속도 제어를 위한 새로운 요소를 추가하기 위해 HTML을 수정해주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!-- ...기존 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"HTML\"\n        }), \"... -->\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"container\\\"\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"textarea\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"rows\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"5\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"cols\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"30\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"textarea\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"select\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"voices\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"select\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"rate\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"range\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"min\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"0.5\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"max\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"2\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"1\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"step\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"0.1\\\"\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"speak\\\"\"\n            }), \">\"]\n          }), \"말하기\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n<!-- ...기존 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"HTML\"\n        }), \"... -->\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그럼 app.js를 다음과 같이 업데이트하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" textarea = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'text'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" speakButton = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'speak'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" voicesSelect = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'voices'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" rateInput = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rate'\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" voices = [];\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"populateVoices\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    voices = speechSynthesis.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getVoices\"\n        }), \"();\\n    voices.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"forEach\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"voice, i\"\n          }), \") =>\"]\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" option = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createElement\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'option'\"\n        }), \");\\n        option.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \" = i;\\n        option.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"textContent\"\n        }), \" = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${voice.name}\"\n          }), \" (\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${voice.lang}\"\n          }), \")`\"]\n        }), \";\\n        voicesSelect.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"appendChild\"\n        }), \"(option);\\n    });\\n}\\n\\nspeechSynthesis.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'voiceschanged'\"\n        }), \", populateVoices);\\n\\nspeakButton.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'click'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" text = textarea.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" utterance = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SpeechSynthesisUtterance\"\n        }), \"(text);\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 선택한 음성 가져오기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" selectedVoiceIndex = voicesSelect.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \";\\n    utterance.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"voice\"\n        }), \" = voices[selectedVoiceIndex];\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 속도 가져오기\"\n        }), \"\\n    utterance.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"rate\"\n        }), \" = rateInput.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \";\\n\\n    speechSynthesis.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"speak\"\n        }), \"(utterance);\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서는 모든 사용 가능한 음성으로 select 요소를 채우는 populateVoices 함수를 추가했으며, 'voiceschanged' 이벤트가 트리거될 때 이 함수를 호출합니다. 'voiceschanged' 이벤트는 speechSynthesis.getVoices() 메소드가 반환할 SpeechSynthesisVoice 객체 목록이 변경되었을 때 발생합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"음성 합성을 트리거할 때 우리는 선택한 음성과 속도를 DOM에서 가져와서 SpeechSynthesisUtterance 객체에 설정합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_5.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 위의 사진에 나와 있는 대로 작동하는 텍스트 음성 변환 애플리케이션이 준비되었어요: 텍스트 영역에 원하는 텍스트를 입력하고, 음성을 선택하고 말 속도를 조절한 다음 \\\"음성 출력\\\"을 클릭하면 말이 들릴 거예요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:732/1*EImZrlDQ1zrxaKe9FBPPmA.gif\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"더 알아보기:\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"마무리\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_6.png\",\n        alt: \"text-to-speech-app\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러면 JavaScript와 Web Speech API를 사용하여 몇 분 안에 만든 간단하고 재미있는 텍스트 음성 변환 앱이 준비됐어요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것은 사용자들이 콘텐츠를 독특하고 접근성 있게 소비하는 것과 같이 Medium이 하는 대로 당신의 웹 애플리케이션의 사용자 경험을 향상시키는 멋진 방법이 될 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 JavaScript와 웹 개발의 다른 측면을 더 탐구하고 싶다면, 내 다른 기사들을 꼭 확인해보시길 권해드립니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"텍스트 음성 변환에 대해 이야기할 때, 이제 텍스트 강조 기능을 구현해보는 것이 좋겠네요. \\\"AWS Polly를 활용한 클라우드 기반 텍스트 음성 변환 및 텍스트 강조 생성 애플리케이션 구축\\\"에 해당하는 제 기사를 참고해보세요. 이 기사는 클라우드 기술을 통해 진보된, 확장 가능하고 이용하기 쉬운 텍스트 음성 변환 솔루션을 만드는 방법을 안내합니다. 그리고 AWS Polly는 친근하고 쉬운 도구입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"반면에 UI 게임을 업그레이드하고 싶다면, “UI 디자인 마스터하기: 최고의 실천 지침 완전 가이드\\\"를 놓치지 마세요. 이 포괄적인 안내서는 UI 디자인의 힘을 발휘하며, 웹 및 모바일 플랫폼을 위한 직관적이고 사용자 친화적, 매력적인 인터페이스를 만드는 통찰을 제공합니다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_7.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"리고처럼 재사용 가능한 구성 요소로 애플리케이션 만들기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-BuildingaText-To-SpeechApplicationwithJavaScriptin3EasySteps_8.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Bit의 오픈 소스 도구는 25만 명 이상의 개발자들이 구성 요소로 애플리케이션을 만들 수 있게 도와줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"어떤 UI, 기능 또는 페이지든 재사용 가능한 구성 요소로 변환하고 애플리케이션 간에 공유하세요. 협업이 더 쉬워지고 더 빠르게 개발할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"→ 더 많은 정보 알아보기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앱을 구성 요소로 분할하여 앱 개발을 더 쉽게 만들고, 원하는 워크플로에 대해 최상의 경험을 누려보세요:\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"→ 미크로 프론트엔드\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"→ 디자인 시스템\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"→ 코드 공유 및 재사용\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"→ 단일 저장소\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Learn more:\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}