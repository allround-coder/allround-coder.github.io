{"pageProps":{"post":{"title":"외부 라이브러리 없이 React에서 간단한 드래그 앤 드롭하기","description":"","date":"2024-05-12 21:29","slug":"2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary","content":"\n\n<img src=\"/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_0.png\" />\n\n## 리액트에서 드래그 앤 드롭이란?\n\n드래그 앤 드롭은 화면에서 마우스나 터치패드를 사용하여 요소를 이동하거나 조작하는 방식입니다. 목록의 항목을 재정렬하거나 항목을 한 목록에서 다른 목록으로 이동하는 데 이상적입니다. React에서 매우 간단한 방법으로 드래그 앤 드롭 컴포넌트를 구축할 수 있습니다. \n여러분의 리액트 앱에서 항목이거나 테이블이 있는데 이 목록이나 테이블 행의 순서를 변경하고 싶다면 이 단계를 따라 드래그 앤 드롭을 구축해보세요.\n\n## 1. 요소를 드래그할 수 있도록 만드세요.\n\n\n\n여기서 해야 할 일은 각 목록 항목 또는 테이블 행에 \"draggable\" prop을 전달하는 것뿐입니다. 이 prop을 사용하면 요소를 드래그할 수 있게 됩니다.\n\n![Drag and Drop](/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_1.png)\n\n이제 목록/테이블의 모든 요소/행을 드래그할 수 있습니다. (참고: 요소만 드래그할 수 있습니다)\n\n## 2. 드래그하는 요소 가져오기\n\n\n\nuseRef 훅을 사용하여 끌어 올리고 있는 항목을 보관한 다음, \"onDragStart\" 메서드를 사용하여이를 드래그하고 다른 요소로 붙여 넣습니다.\n\n![드래그 앤 드롭](/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_2.png)\n\n## 3. 우리가 떠 다니는 요소를 가져 오거나 요소가 교체 될 요소를 가져옵니다.\n\n이 단계에서는 끌어올린 요소가 떠 다니는 요소를 찾아야합니다. UseRef를 사용하여이를 달성 할 수 있으며 “onDragEnter\" 이벤트 리스너도 이 작업을 수행합니다.\n\n\n\n![이미지](/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_3.png)\n\n## 4. 다른 항목으로 드래그 가능한 아이템 바꾸기.\n\n마지막 단계 중 하나는 드래그한 요소를 다른 요소 위에 놓거나 다른 위치에 놓았을 때 목록을 재배열하는 것입니다. 이를 \"onDragEnd\" 메서드를 사용하여 달성할 수 있습니다.\n\n![이미지](/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_4.png)\n\n\n\n드래그 앤 드롭을 즐기세요.","ogImage":{"url":"/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_0.png"},"coverImage":"/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_0.png\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"리액트에서 드래그 앤 드롭이란?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"드래그 앤 드롭은 화면에서 마우스나 터치패드를 사용하여 요소를 이동하거나 조작하는 방식입니다. 목록의 항목을 재정렬하거나 항목을 한 목록에서 다른 목록으로 이동하는 데 이상적입니다. React에서 매우 간단한 방법으로 드래그 앤 드롭 컴포넌트를 구축할 수 있습니다.\\n여러분의 리액트 앱에서 항목이거나 테이블이 있는데 이 목록이나 테이블 행의 순서를 변경하고 싶다면 이 단계를 따라 드래그 앤 드롭을 구축해보세요.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. 요소를 드래그할 수 있도록 만드세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 해야 할 일은 각 목록 항목 또는 테이블 행에 \\\"draggable\\\" prop을 전달하는 것뿐입니다. 이 prop을 사용하면 요소를 드래그할 수 있게 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_1.png\",\n        alt: \"Drag and Drop\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 목록/테이블의 모든 요소/행을 드래그할 수 있습니다. (참고: 요소만 드래그할 수 있습니다)\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. 드래그하는 요소 가져오기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"useRef 훅을 사용하여 끌어 올리고 있는 항목을 보관한 다음, \\\"onDragStart\\\" 메서드를 사용하여이를 드래그하고 다른 요소로 붙여 넣습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_2.png\",\n        alt: \"드래그 앤 드롭\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. 우리가 떠 다니는 요소를 가져 오거나 요소가 교체 될 요소를 가져옵니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 단계에서는 끌어올린 요소가 떠 다니는 요소를 찾아야합니다. UseRef를 사용하여이를 달성 할 수 있으며 “onDragEnter\\\" 이벤트 리스너도 이 작업을 수행합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_3.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. 다른 항목으로 드래그 가능한 아이템 바꾸기.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마지막 단계 중 하나는 드래그한 요소를 다른 요소 위에 놓거나 다른 위치에 놓았을 때 목록을 재배열하는 것입니다. 이를 \\\"onDragEnd\\\" 메서드를 사용하여 달성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-SimpleDragandDropinReactwithoutanexternallibrary_4.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"드래그 앤 드롭을 즐기세요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}