{"pageProps":{"post":{"title":"내가 좋아하는 JavaScript 짧은 코드 한 줄","description":"","date":"2024-05-14 15:11","slug":"2024-05-14-MyFavouriteJavaScriptOne-Liners","content":"\n\n\n![My Favourite JavaScript One-Liners](/assets/img/2024-05-14-MyFavouriteJavaScriptOne-Liners_0.png)\n\n오늘은 다양한 코딩 과제에서 많은 도움을 받은 가장 유용하고 간단한 JavaScript 원 라이너를 여러분과 공유하고 싶어요.\n\n다음의 속임수를 사용함으로써 복잡한 함수를 프로그래밍하는 데 많은 작업을 줄일 수 있어요.\n\n그러니 이제 말이 더 필요 없죠! 함께 시작해봐요!\n\n\n\n\n# 디자인 모드\n\n일반적으로 꺼져 있는 이 기능을 활성화하면 웹사이트에서 어떤 텍스트든 선택하고 편집할 수 있습니다. 이를 통해 소스 코드를 변경하지 않고도 빠르게 다양한 텍스트나 단어를 시도해 볼 수 있습니다.\n\n이 기능을 활성화하려면 아래 코드만 필요합니다:\n\n```js\ndocument.designMode = \"on\"\n```\n\n\n\n# 배열 병합\n\n```js\nconst merge = [...array1, ...array2];\n```\n\n이 코드 스니펫은 JavaScript의 전개 구문을 활용하여 두 배열의 내용을 매끄럽게 병합합니다. 각 배열의 요소를 대괄호 안에 펼쳐서 새로운 배열을 만들어 두 소스 배열의 모든 요소를 포함시킵니다.\n\n이 간결한 접근 방식은 원본 배열을 변형시키지 않고 배열을 결합하는 과정을 간단하게 만들어 줍니다.\n\n\n\n중복을 피하고 각 요소가 한 번만 존재하도록 하려면 Set() 메서드를 사용하십시오:\n\n```js\nconst merge = [...new Set([...array1, ...array2])];\n```\n\n# 랜덤 Hex 색상 생성\n\n다음 코드는 16진수 코드로 랜덤 색상을 생성합니다. 이는 데이터 시각화나 동적 콘텐츠 생성 시 매우 유용합니다.\n\n\n\n```js\nconst randomHexColor = '#' + Math.floor(Math.random() * 16777215).toString(16);\n```\n\n# 클립보드에 복사\n\n선택된 웹사이트의 일부를 클립보드에 복사할 수 있습니다.\n\n```js\ndocument.execCommand('copy');\n```\n\n\n\n자바스크립트를 사용하여 텍스트를 클립보드에 복사하는 방법은 클립보드 API를 사용하는 것입니다. 간단한 예제를 보여드리겠습니다:\n\n```js\nfunction copyToClipboard(text) {\n  const textarea = document.createElement('textarea');\n  textarea.value = text;\n  document.body.appendChild(textarea);\n  textarea.select();\n  document.execCommand('copy');\n  document.body.removeChild(textarea);\n}\n\n// 사용 예시:\nconst textToCopy = \"안녕하세요, 세상!\";\ncopyToClipboard(textToCopy);\n```\n\n- copyToClipboard 함수는 임시 텍스트영역 요소를 생성하여 해당 값으로 설정하고, 문서 바디에 추가한 뒤 해당 내용을 선택하고, 복사 명령을 실행하여 마지막으로 DOM에서 텍스트영역 요소를 제거합니다.\n- \"안녕하세요, 세상!\"을 복사할 텍스트로 교체해주세요.\n\n```\nconsole.table\n```\n\n\n\n이 함수는 특히 대량 데이터의 콘솔 출력을 용이하게 합니다. console.log()에 비해 데이터를 표로 표시하여 더 명확한 대안을 제공합니다.\n\n```js\nconst data = [\n  { name: 'John', age: 30, city: 'New York' },\n  { name: 'Alice', age: 25, city: 'Los Angeles' },\n  { name: 'Bob', age: 35, city: 'Chicago' }\n];\n\nconsole.table(data);\n```\n\n<img src=\"/assets/img/2024-05-14-MyFavouriteJavaScriptOne-Liners_1.png\" />\n\n이 게시물이 여러분의 문제 중 일부를 해결하고 즐겁게 읽으셨기를 바랍니다! 여러분의 가장 좋아하는 JavaScript 원라이너가 무엇인지 댓글로 알려주세요.\n\n\n\n가장 최신 컨텐츠를 받아보려면 구독을 잊지마세요! 👍\n\n코딩 즐기세요! 🚀","ogImage":{"url":"/assets/img/2024-05-14-MyFavouriteJavaScriptOne-Liners_0.png"},"coverImage":"/assets/img/2024-05-14-MyFavouriteJavaScriptOne-Liners_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-MyFavouriteJavaScriptOne-Liners_0.png\",\n        alt: \"My Favourite JavaScript One-Liners\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"오늘은 다양한 코딩 과제에서 많은 도움을 받은 가장 유용하고 간단한 JavaScript 원 라이너를 여러분과 공유하고 싶어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음의 속임수를 사용함으로써 복잡한 함수를 프로그래밍하는 데 많은 작업을 줄일 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러니 이제 말이 더 필요 없죠! 함께 시작해봐요!\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"디자인 모드\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"일반적으로 꺼져 있는 이 기능을 활성화하면 웹사이트에서 어떤 텍스트든 선택하고 편집할 수 있습니다. 이를 통해 소스 코드를 변경하지 않고도 빠르게 다양한 텍스트나 단어를 시도해 볼 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기능을 활성화하려면 아래 코드만 필요합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"designMode\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"on\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"배열 병합\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" merge = [...array1, ...array2];\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 코드 스니펫은 JavaScript의 전개 구문을 활용하여 두 배열의 내용을 매끄럽게 병합합니다. 각 배열의 요소를 대괄호 안에 펼쳐서 새로운 배열을 만들어 두 소스 배열의 모든 요소를 포함시킵니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 간결한 접근 방식은 원본 배열을 변형시키지 않고 배열을 결합하는 과정을 간단하게 만들어 줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"중복을 피하고 각 요소가 한 번만 존재하도록 하려면 Set() 메서드를 사용하십시오:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" merge = [...\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Set\"\n        }), \"([...array1, ...array2])];\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"랜덤 Hex 색상 생성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 코드는 16진수 코드로 랜덤 색상을 생성합니다. 이는 데이터 시각화나 동적 콘텐츠 생성 시 매우 유용합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" randomHexColor = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'#'\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Math\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"floor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Math\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"random\"\n        }), \"() * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"16777215\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toString\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"16\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"클립보드에 복사\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"선택된 웹사이트의 일부를 클립보드에 복사할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"execCommand\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'copy'\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자바스크립트를 사용하여 텍스트를 클립보드에 복사하는 방법은 클립보드 API를 사용하는 것입니다. 간단한 예제를 보여드리겠습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"copyToClipboard\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"text\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" textarea = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createElement\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'textarea'\"\n        }), \");\\n  textarea.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \" = text;\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"appendChild\"\n        }), \"(textarea);\\n  textarea.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"select\"\n        }), \"();\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"execCommand\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'copy'\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"removeChild\"\n        }), \"(textarea);\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용 예시:\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" textToCopy = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"안녕하세요, 세상!\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"copyToClipboard\"\n        }), \"(textToCopy);\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"copyToClipboard 함수는 임시 텍스트영역 요소를 생성하여 해당 값으로 설정하고, 문서 바디에 추가한 뒤 해당 내용을 선택하고, 복사 명령을 실행하여 마지막으로 DOM에서 텍스트영역 요소를 제거합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"\\\"안녕하세요, 세상!\\\"을 복사할 텍스트로 교체해주세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"console.table\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 함수는 특히 대량 데이터의 콘솔 출력을 용이하게 합니다. console.log()에 비해 데이터를 표로 표시하여 더 명확한 대안을 제공합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" data = [\\n  { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'John'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"age\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"30\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"city\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'New York'\"\n        }), \" },\\n  { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Alice'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"age\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"25\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"city\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Los Angeles'\"\n        }), \" },\\n  { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Bob'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"age\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"35\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"city\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Chicago'\"\n        }), \" }\\n];\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"table\"\n        }), \"(data);\\n\"]\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-MyFavouriteJavaScriptOne-Liners_1.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 게시물이 여러분의 문제 중 일부를 해결하고 즐겁게 읽으셨기를 바랍니다! 여러분의 가장 좋아하는 JavaScript 원라이너가 무엇인지 댓글로 알려주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가장 최신 컨텐츠를 받아보려면 구독을 잊지마세요! 👍\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코딩 즐기세요! 🚀\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}