{"pageProps":{"post":{"title":"리액트에서 Gemini AI 통합","description":"","date":"2024-05-12 23:05","slug":"2024-05-12-IntegrationofGeminiAIInReact","content":"\n\n여러분은 Gemini AI 도구에 대해 알고 계시죠. 친숙하지 않은 분들을 위해 간단히 소개하면, Gemini AI는 Google에서 개발한 AI 도구에요. 이 기사에서는 React 애플리케이션에 Gemini AI를 통합하는 과정을 안내해 드릴게요.\n\n단계 1: React 애플리케이션에 다음 npm 패키지를 설치해 주세요.\n\n```js\nnpm i @google/generative-ai\n```\n\n우리는 응용 프로그램에서 Gemini AI를 사용하기 위해 개발자 API 키가 필요해요. 개발자 API 키를 생성하려면 다음 링크를 클릭하여 한 개 만들어 주세요. 생성되면 애플리케이션에서 더 사용할 수 있도록 안전한 위치에 복사해 두세요.\n\n\n\naistudio.google.com\n\n```js\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n```\n\n위 모듈을 컴포넌트의 최상위 수준에서 가져와서 다음 코드 스니펫을 컴포넌트 내에 붙여넣고 API 키를 전달해주세요.\n\n```js\n const genAI = new GoogleGenerativeAI(\n    \"API 키\"\n  );\n```\n\n\n\n제공된 코드 스니펫에서 우리는 API 키를 전달하여 GoogleGenerativeAI의 인스턴스를 초기화하고 있습니다. 객체를 생성하면 제공하는 기능에 액세스할 수 있습니다.\n\n저희 Gemini AI는 우리의 질문에 답변하고 응답하는 기능을 제공합니다. Gemini AI와 소통하기 위해 간단히 입력 메시지, 즉 프롬프트를 제공하면 됩니다.\n\n```js\n  const [inputValue, setInputValue] = useState(''); \n\n\n   const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n<input\n       type=\"text\"\n       value={inputValue}\n       onChange={handleInputChange}\n       placeholder=\"Ask Me Something You Want\"\n       className=\"input-field\"\n     />\n```\n\n위 코드 스니펫에서는 사용자로부터 입력을 받아와서 변수처럼 상태로 업데이트하는 inputValue라는 것을 읽고 있습니다.\n\n\n\n```js\nconst [promptResponses, setPromptResponses] = useState([]);\n\nconst getResponseForGivenPrompt = async () => {\ntry{\n  const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\n  const result = await model.generateContent(inputValue);\n  const response = await result.response;\n  const text = await response.text();\n  setPromptResponses([\n    ...promptResponses,\n    text\n  ]);\n}\ncatch(error){\n  console.log(\"Something Went Wrong\");\n}\n};\n\n<button onClick={getResponseForGivenPrompt}>Send</button>\n```\n\n'전송' 버튼을 클릭하면 inputMessage 또는 Your Prompt를 입력한 후 getResponseForGivenPrompt라는 함수가 호출됩니다. 이 함수에서는 모델을 얻고 generateContent 메소드를 호출하여 해당 메소드에 프롬프트 또는 inputMessage를 전달합니다. 이 메소드는 우리의 Prompt 또는 input Message에 대한 내용이나 답변을 생성합니다. 그 결과는 promptResponses라는 상태 변수에 업데이트됩니다.\n\n```js\n{promptResponses.map((promptResponse, index) => (\n  <div key={index} >\n    <div >{promptResponse}</div>\n  </div>\n))}\n```\n\n위 코드 스니펫은 `promptResponses` 배열을 반복하며 각 응답을 UI에 표시합니다.\n```  \n\n\n\n여기에 완전한 코드가 있어요.\n\n```js\nimport React, { useState } from 'react';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\nfunction GeminiInReact() {\n  const [inputValue, setInputValue] = useState('');\n  const [promptResponses, setpromptResponses] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const genAI = new GoogleGenerativeAI(\n    \"API KEY\"\n    // 여기에 당신의 API 키를 넣어주세요\n  );\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const getResponseForGivenPrompt = async () => {\n    try {\n      setLoading(true)\n      const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\n      const result = await model.generateContent(inputValue);\n      setInputValue('')\n      const response = result.response;\n      const text = response.text();\n      console.log(text)\n      setpromptResponses([...promptResponses, text]);\n\n      setLoading(false)\n    } catch (error) {\n      console.log(error)\n      console.log(\"문제가 생겼어요\");\n      setLoading(false)\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n            placeholder=\"물어보고 싶은 것을 말해주세요\"\n            className=\"form-control\"\n          />\n        </div>\n        <div className=\"col-auto\">\n          <button onClick={getResponseForGivenPrompt} className=\"btn btn-primary\">전송</button>\n        </div>\n      </div>\n\n      {loading ? (\n        <div className=\"text-center mt-3\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"visually-hidden\">로딩중...</span>\n            // 당신의 질문에 대한 답변이 생성되는 동안에 표시되는 메시지\n          </div>\n        </div>\n      ) : (\n        promptResponses.map((promptResponse, index) => (\n          <div key={index}>\n            <div className={`response-text ${index === promptResponses.length - 1 ? 'fw-bold' : ''}`}>{promptResponse}</div>\n            // 가장 최근 응답이 굵게 표시됩니다\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n\nexport default GeminiInReact;\n```\n\n<img src=\"/assets/img/2024-05-12-IntegrationofGeminiAIInReact_0.png\" />\n\n의문점이 있으시면 이 게시물에 댓글을 달아주세요, 답변해 드릴게요 :)\n\n\n\n---Ashok Adurinti","ogImage":{"url":"/assets/img/2024-05-12-IntegrationofGeminiAIInReact_0.png"},"coverImage":"/assets/img/2024-05-12-IntegrationofGeminiAIInReact_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"여러분은 Gemini AI 도구에 대해 알고 계시죠. 친숙하지 않은 분들을 위해 간단히 소개하면, Gemini AI는 Google에서 개발한 AI 도구에요. 이 기사에서는 React 애플리케이션에 Gemini AI를 통합하는 과정을 안내해 드릴게요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 1: React 애플리케이션에 다음 npm 패키지를 설치해 주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm i @google/generative-ai\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 응용 프로그램에서 Gemini AI를 사용하기 위해 개발자 API 키가 필요해요. 개발자 API 키를 생성하려면 다음 링크를 클릭하여 한 개 만들어 주세요. 생성되면 애플리케이션에서 더 사용할 수 있도록 안전한 위치에 복사해 두세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"aistudio.google.com\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GoogleGenerativeAI\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@google/generative-ai'\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 모듈을 컴포넌트의 최상위 수준에서 가져와서 다음 코드 스니펫을 컴포넌트 내에 붙여넣고 API 키를 전달해주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" genAI = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GoogleGenerativeAI\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"API 키\\\"\"\n        }), \"\\n  );\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"제공된 코드 스니펫에서 우리는 API 키를 전달하여 GoogleGenerativeAI의 인스턴스를 초기화하고 있습니다. 객체를 생성하면 제공하는 기능에 액세스할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저희 Gemini AI는 우리의 질문에 답변하고 응답하는 기능을 제공합니다. Gemini AI와 소통하기 위해 간단히 입력 메시지, 즉 프롬프트를 제공하면 됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [inputValue, setInputValue] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \"); \\n\\n\\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleInputChange\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"e\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setInputValue\"\n        }), \"(e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"target\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \");\\n  };\\n\\n\", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \"\\n       \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \"\\n       \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{inputValue}\"\n            }), \"\\n       \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleInputChange}\"\n            }), \"\\n       \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"placeholder\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Ask Me Something You Want\\\"\"\n            }), \"\\n       \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"input-field\\\"\"\n            }), \"\\n     />\"]\n          })\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 코드 스니펫에서는 사용자로부터 입력을 받아와서 변수처럼 상태로 업데이트하는 inputValue라는 것을 읽고 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [promptResponses, setPromptResponses] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"([]);\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getResponseForGivenPrompt\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \"{\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" model = genAI.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getGenerativeModel\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"model\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gemini-pro\\\"\"\n        }), \" });\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" result = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" model.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generateContent\"\n        }), \"(inputValue);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" response = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" result.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"response\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" text = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" response.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"text\"\n        }), \"();\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setPromptResponses\"\n        }), \"([\\n    ...promptResponses,\\n    text\\n  ]);\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"catch\"\n        }), \"(error){\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Something Went Wrong\\\"\"\n        }), \");\\n}\\n};\\n\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{getResponseForGivenPrompt}\"\n            }), \">\"]\n          }), \"Send\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"'전송' 버튼을 클릭하면 inputMessage 또는 Your Prompt를 입력한 후 getResponseForGivenPrompt라는 함수가 호출됩니다. 이 함수에서는 모델을 얻고 generateContent 메소드를 호출하여 해당 메소드에 프롬프트 또는 inputMessage를 전달합니다. 이 메소드는 우리의 Prompt 또는 input Message에 대한 내용이나 답변을 생성합니다. 그 결과는 promptResponses라는 상태 변수에 업데이트됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"{promptResponses.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"map\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"promptResponse, index\"\n          }), \") =>\"]\n        }), \" (\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"key\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{index}\"\n            }), \" >\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" >\"]\n          }), \"{promptResponse}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n))}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"위 코드 스니펫은 \", _jsx(_components.code, {\n        children: \"promptResponses\"\n      }), \" 배열을 반복하며 각 응답을 UI에 표시합니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n여기에 완전한 코드가 있어요.\\n\\n```js\\nimport React, { useState } from 'react';\\nimport { GoogleGenerativeAI } from '@google/generative-ai';\\n\\nfunction GeminiInReact() {\\n  const [inputValue, setInputValue] = useState('');\\n  const [promptResponses, setpromptResponses] = useState([]);\\n  const [loading, setLoading] = useState(false);\\n  const genAI = new GoogleGenerativeAI(\\n    \\\"API KEY\\\"\\n    // 여기에 당신의 API 키를 넣어주세요\\n  );\\n\\n  const handleInputChange = (e) => {\\n    setInputValue(e.target.value);\\n  };\\n\\n  const getResponseForGivenPrompt = async () => {\\n    try {\\n      setLoading(true)\\n      const model = genAI.getGenerativeModel({ model: \\\"gemini-pro\\\" });\\n      const result = await model.generateContent(inputValue);\\n      setInputValue('')\\n      const response = result.response;\\n      const text = response.text();\\n      console.log(text)\\n      setpromptResponses([...promptResponses, text]);\\n\\n      setLoading(false)\\n    } catch (error) {\\n      console.log(error)\\n      console.log(\\\"문제가 생겼어요\\\");\\n      setLoading(false)\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"container\\\">\\n      <div className=\\\"row\\\">\\n        <div className=\\\"col\\\">\\n          <input\\n            type=\\\"text\\\"\\n            value={inputValue}\\n            onChange={handleInputChange}\\n            placeholder=\\\"물어보고 싶은 것을 말해주세요\\\"\\n            className=\\\"form-control\\\"\\n          />\\n        </div>\\n        <div className=\\\"col-auto\\\">\\n          <button onClick={getResponseForGivenPrompt} className=\\\"btn btn-primary\\\">전송</button>\\n        </div>\\n      </div>\\n\\n      {loading ? (\\n        <div className=\\\"text-center mt-3\\\">\\n          <div className=\\\"spinner-border text-primary\\\" role=\\\"status\\\">\\n            <span className=\\\"visually-hidden\\\">로딩중...</span>\\n            // 당신의 질문에 대한 답변이 생성되는 동안에 표시되는 메시지\\n          </div>\\n        </div>\\n      ) : (\\n        promptResponses.map((promptResponse, index) => (\\n          <div key={index}>\\n            <div className={`response-text ${index === promptResponses.length - 1 ? 'fw-bold' : ''}`}>{promptResponse}</div>\\n            // 가장 최근 응답이 굵게 표시됩니다\\n          </div>\\n        ))\\n      )}\\n    </div>\\n  );\\n}\\n\\nexport default GeminiInReact;\\n\"\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-IntegrationofGeminiAIInReact_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"의문점이 있으시면 이 게시물에 댓글을 달아주세요, 답변해 드릴게요 :)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"---Ashok Adurinti\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}