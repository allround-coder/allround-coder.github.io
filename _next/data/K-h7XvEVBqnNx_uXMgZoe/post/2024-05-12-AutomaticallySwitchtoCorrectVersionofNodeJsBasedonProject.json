{"pageProps":{"post":{"title":"프로젝트에 따라 Nodejs의 올바른 버전으로 자동 전환하기","description":"","date":"2024-05-12 19:36","slug":"2024-05-12-AutomaticallySwitchtoCorrectVersionofNodeJsBasedonProject","content":"\n\nNode.js 개발의 끊임없이 변화하는 풍경 속에서는 다양한 프로젝트 요구 사항과 호환성 문제를 관리하는 것이 부담스러운 작업일 수 있습니다. 이 기사에서는 프로젝트의 요구 사항에 기반하여 Node.js의 올바른 버전으로 자동 전환하는 컨셉을 탐구합니다.\n\nNVM이란 무엇인가요?\nNVM, Node Version Manager, 여러 개의 Node.js 설치를 시스템에서 원활하게 관리하는 데 사용되는 go-to 솔루션입니다. 다양한 Node.js 버전 요구 사항을 가진 여러 프로젝트에서 작업하는 개발자이거나 최신 기능과 업데이트를 탐구하고 싶어하는 열정적인 사용자라면, NVM은 몇 가지 간단한 명령어로 다양한 Node.js 버전 간에 간편하게 전환할 수 있도록 해줍니다.\n\nNVM GitHub 레포지토리에서 예시를 확인해보세요\n\n```js\n$ nvm use 16\nNow using node v16.9.1 (npm v7.21.1)\n$ node -v\nv16.9.1\n$ nvm use 14\nNow using node v14.18.0 (npm v6.14.15)\n$ node -v\nv14.18.0\n$ nvm install 12\nNow using node v12.22.6 (npm v6.14.5)\n$ node -v\nv12.22.6\n```\n\n\n\n.nvmrc이 무엇인가요?\n\nNode.js 생태계에서 .nvmrc 파일은 Node Version Manager(nvm)에서 사용되는 간단한 구성 파일입니다. 이 파일은 일반적으로 프로젝트의 루트 디렉토리에 위치하며 해당 프로젝트에서 작업할 때 사용해야 하는 특정 Node.js 버전을 지정합니다.\n\n![사진](/assets/img/2024-05-12-AutomaticallySwitchtoCorrectVersionofNodeJsBasedonProject_0.png)\n\n.nvmrc 파일 만들기 및 사용하기\n\n\n\n\"`.nvmrc` 파일을 만들고 사용하는 것은 매우 간단합니다.\n\n1. 프로젝트 디렉토리로 이동합니다.\n\n2. `.nvmrc`라는 새 파일을 만들고 원하는 노드 버전을 입력합니다.\n\n여기 샘플 내용 파일이 있습니다.\"\n\n\n\n```js\nv18.18.2\n```\n\n3. 터미널에서 nano ~/.bashrc를 입력하여 .bashrc를 엽니다.\n\n4. 이 코드를 .bashrc 파일 끝에 붙여넣고 저장하세요.\n\n```js\n# .nvmrc 파일이 있으면 .nvmrc의 노드 버전을 사용합니다.\n\n# 터미널이 시작될 때 호출\nif [[ -f .nvmrc ]]\nthen\n  nvm use\nfi\n\n# cd 명령어를 통해 디렉토리가 변경될 때 호출\nfunction cd() {\n builtin cd \"$@\"\n  if [[ -f .nvmrc ]]\n  then\n    nvm use\n  fi\n}\n```\n\n\n\n5. 컴퓨터를 다시 부팅하거나 터미널에서 다음 명령어를 입력하여 다시 시작하세요: source .bashrc\n\n6. 이제 .nvmrc 파일이 있는 디렉토리에서 터미널을 열 때마다 터미널이 노드 버전을 자동으로 전환할 것입니다.\n\n이것은 .nvmrc 파일이 있는 모든 프로젝트에 대해 작동할 것입니다.\n\n요약하자면, 다음에 프로젝트를 시작할 때 .nvmrc 파일을 생성하고 버전 관련 문제를 해결하세요.","ogImage":{"url":"/assets/img/2024-05-12-AutomaticallySwitchtoCorrectVersionofNodeJsBasedonProject_0.png"},"coverImage":"/assets/img/2024-05-12-AutomaticallySwitchtoCorrectVersionofNodeJsBasedonProject_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    img: \"img\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Node.js 개발의 끊임없이 변화하는 풍경 속에서는 다양한 프로젝트 요구 사항과 호환성 문제를 관리하는 것이 부담스러운 작업일 수 있습니다. 이 기사에서는 프로젝트의 요구 사항에 기반하여 Node.js의 올바른 버전으로 자동 전환하는 컨셉을 탐구합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NVM이란 무엇인가요?\\nNVM, Node Version Manager, 여러 개의 Node.js 설치를 시스템에서 원활하게 관리하는 데 사용되는 go-to 솔루션입니다. 다양한 Node.js 버전 요구 사항을 가진 여러 프로젝트에서 작업하는 개발자이거나 최신 기능과 업데이트를 탐구하고 싶어하는 열정적인 사용자라면, NVM은 몇 가지 간단한 명령어로 다양한 Node.js 버전 간에 간편하게 전환할 수 있도록 해줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NVM GitHub 레포지토리에서 예시를 확인해보세요\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"$ nvm use \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"16\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Now\"\n        }), \" using node v16\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".9\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".1\"\n        }), \" (npm v7\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".21\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".1\"\n        }), \")\\n$ node -v\\nv16\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".9\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".1\"\n        }), \"\\n$ nvm use \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"14\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Now\"\n        }), \" using node v14\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".18\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".0\"\n        }), \" (npm v6\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".14\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".15\"\n        }), \")\\n$ node -v\\nv14\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".18\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".0\"\n        }), \"\\n$ nvm install \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"12\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Now\"\n        }), \" using node v12\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".22\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".6\"\n        }), \" (npm v6\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".14\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".5\"\n        }), \")\\n$ node -v\\nv12\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".22\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".6\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \".nvmrc이 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Node.js 생태계에서 .nvmrc 파일은 Node Version Manager(nvm)에서 사용되는 간단한 구성 파일입니다. 이 파일은 일반적으로 프로젝트의 루트 디렉토리에 위치하며 해당 프로젝트에서 작업할 때 사용해야 하는 특정 Node.js 버전을 지정합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-AutomaticallySwitchtoCorrectVersionofNodeJsBasedonProject_0.png\",\n        alt: \"사진\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \".nvmrc 파일 만들기 및 사용하기\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"\\\"\", _jsx(_components.code, {\n        children: \".nvmrc\"\n      }), \" 파일을 만들고 사용하는 것은 매우 간단합니다.\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"프로젝트 디렉토리로 이동합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \".nvmrc\"\n          }), \"라는 새 파일을 만들고 원하는 노드 버전을 입력합니다.\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기 샘플 내용 파일이 있습니다.\\\"\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"v18\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".18\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".2\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"터미널에서 nano ~/.bashrc를 입력하여 .bashrc를 엽니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"이 코드를 .bashrc 파일 끝에 붙여넣고 저장하세요.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# .\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nvmrc\"\n        }), \" 파일이 있으면 .\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nvmrc\"\n        }), \"의 노드 버전을 사용합니다.\\n\\n# 터미널이 시작될 때 호출\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" [[ -f .\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nvmrc\"\n        }), \" ]]\\nthen\\n  nvm use\\nfi\\n\\n# cd 명령어를 통해 디렉토리가 변경될 때 호출\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"cd\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n builtin cd \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$@\\\"\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" [[ -f .\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nvmrc\"\n        }), \" ]]\\n  then\\n    nvm use\\n  fi\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"5\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"컴퓨터를 다시 부팅하거나 터미널에서 다음 명령어를 입력하여 다시 시작하세요: source .bashrc\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"이제 .nvmrc 파일이 있는 디렉토리에서 터미널을 열 때마다 터미널이 노드 버전을 자동으로 전환할 것입니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것은 .nvmrc 파일이 있는 모든 프로젝트에 대해 작동할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"요약하자면, 다음에 프로젝트를 시작할 때 .nvmrc 파일을 생성하고 버전 관련 문제를 해결하세요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}