{"pageProps":{"post":{"title":"Reactjs에서 Yup 라이브러리를 사용하여 양식 유효성 검사를 만드는 방법","description":"","date":"2024-05-12 20:07","slug":"2024-05-12-HowtocreateformvalidationwithYuplibraryinReactjs","content":"\n\n폼 유효성 검사는 모든 웹 애플리케이션의 중요한 부분입니다. 사용자가 입력한 데이터가 올바르고 완전한지 확인하는 데 도움이 됩니다. Yup은 Reactjs의 인기있는 유효성 검사 라이브러리로, 폼 유효성을 쉽게 만들고 관리할 수 있습니다.\n\n![Yup 라이브러리를 사용하여 어떻게 Reactjs에서 폼 유효성을 만들 수 있는지](/assets/img/2024-05-12-HowtocreateformvalidationwithYuplibraryinReactjs_0.png)\n\nYup을 사용하려면 먼저 npm을 사용하여 설치해야 합니다: npm install yup\n\nYup을 설치한 후에는 유효성 검사 스키마를 작성할 수 있습니다. 유효성 검사 스키마는 폼의 데이터를 유효성 검사하는 규칙을 정의하는 객체입니다.\n\n\n\n예를 들어, 다음 스키마는 사용자 이름과 비밀번호를 유효성 검사합니다:\n\n```js\nconst schema = Yup.object().shape({\n  username: Yup.string().required(),\n  password: Yup.string().required().minLength(8),\n});\n```\n\nrequired() 규칙은 필드가 필수임을 나타냅니다. minLength() 규칙은 필드가 적어도 8자여야 함을 나타냅니다.\n\n그런 다음 validate() 메서드를 사용하여 폼 데이터를 유효성 검사할 수 있습니다.\n\n\n\n```js\nconst formData = {\n  username: \"user123\",\n  password: \"password123\",\n};\n\nconst errors = schema.validate(formData);\n\nif (errors.length > 0) {\n  // 폼 데이터에 오류가 있습니다\n} else {\n  // 폼 데이터가 유효합니다\n}\n```\n\n만일 폼 데이터가 유효하지 않을 경우, errors 객체는 오류 메시지의 배열을 포함하게 됩니다.\n\nYup은 email(), url(), number() 등 다양한 다른 유효성 검사 규칙도 제공합니다. Yup 문서에서 사용 가능한 유효성 검사 규칙의 전체 목록을 찾을 수 있습니다.\n\n다음은 사용자가 새 계정을 만들 수 있는 폼을 유효성 검사하기 위해 Yup을 사용하는 예시입니다:\n```  \n\n\n\n```js\nconst schema = Yup.object().shape({\n  username: Yup.string().required().minLength(3).maxLength(25),\n  email: Yup.string().email().required(),\n  password: Yup.string().required().minLength(8).maxLenght(25),\n});\n\nconst handleSubmit = (e) => {\n  e.preventDefault();\n\n  const formData = {\n    username: e.target.username.value,\n    email: e.target.email.value,\n    password: e.target.password.value,\n  };\n\n  const errors = schema.validate(formData);\n\n  if (errors.length > 0) {\n    // 양식 데이터에 오류가 있음\n    alert(errors.join(\"\\n\"));\n  } else {\n    // 양식 데이터가 유효함, 처리할 작업 수행\n  }\n};\n\nconst App = () => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" name=\"username\" placeholder=\"사용자 이름\" />\n      <input type=\"email\" name=\"email\" placeholder=\"이메일\" />\n      <input type=\"password\" name=\"password\" placeholder=\"비밀번호\" />\n      <button type=\"submit\">계정 생성</button>\n    </form>\n  );\n};\n```\n\n이 예시는 사용자가 제출 버튼을 클릭할 때 onSubmit 이벤트 핸들러를 사용하여 양식 데이터를 유효성 검사합니다. 양식 데이터가 유효하면 코드는 해당 데이터를 처리합니다. 그렇지 않으면 오류 메시지가 표시됩니다.\n```","ogImage":{"url":"/assets/img/2024-05-12-HowtocreateformvalidationwithYuplibraryinReactjs_0.png"},"coverImage":"/assets/img/2024-05-12-HowtocreateformvalidationwithYuplibraryinReactjs_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"폼 유효성 검사는 모든 웹 애플리케이션의 중요한 부분입니다. 사용자가 입력한 데이터가 올바르고 완전한지 확인하는 데 도움이 됩니다. Yup은 Reactjs의 인기있는 유효성 검사 라이브러리로, 폼 유효성을 쉽게 만들고 관리할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-HowtocreateformvalidationwithYuplibraryinReactjs_0.png\",\n        alt: \"Yup 라이브러리를 사용하여 어떻게 Reactjs에서 폼 유효성을 만들 수 있는지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Yup을 사용하려면 먼저 npm을 사용하여 설치해야 합니다: npm install yup\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Yup을 설치한 후에는 유효성 검사 스키마를 작성할 수 있습니다. 유효성 검사 스키마는 폼의 데이터를 유효성 검사하는 규칙을 정의하는 객체입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예를 들어, 다음 스키마는 사용자 이름과 비밀번호를 유효성 검사합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" schema = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Yup\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"object\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"shape\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"username\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Yup\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"().required(),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"password\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Yup\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"().required().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"minLength\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \"),\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"required() 규칙은 필드가 필수임을 나타냅니다. minLength() 규칙은 필드가 적어도 8자여야 함을 나타냅니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런 다음 validate() 메서드를 사용하여 폼 데이터를 유효성 검사할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" formData = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"username\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"user123\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"password\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"password123\\\"\"\n        }), \",\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" errors = schema.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"validate\"\n        }), \"(formData);\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (errors.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \" > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 폼 데이터에 오류가 있습니다\"\n        }), \"\\n} \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 폼 데이터가 유효합니다\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만일 폼 데이터가 유효하지 않을 경우, errors 객체는 오류 메시지의 배열을 포함하게 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Yup은 email(), url(), number() 등 다양한 다른 유효성 검사 규칙도 제공합니다. Yup 문서에서 사용 가능한 유효성 검사 규칙의 전체 목록을 찾을 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 사용자가 새 계정을 만들 수 있는 폼을 유효성 검사하기 위해 Yup을 사용하는 예시입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n```js\\nconst schema = Yup.object().shape({\\n  username: Yup.string().required().minLength(3).maxLength(25),\\n  email: Yup.string().email().required(),\\n  password: Yup.string().required().minLength(8).maxLenght(25),\\n});\\n\\nconst handleSubmit = (e) => {\\n  e.preventDefault();\\n\\n  const formData = {\\n    username: e.target.username.value,\\n    email: e.target.email.value,\\n    password: e.target.password.value,\\n  };\\n\\n  const errors = schema.validate(formData);\\n\\n  if (errors.length > 0) {\\n    // 양식 데이터에 오류가 있음\\n    alert(errors.join(\\\"\\\\n\\\"));\\n  } else {\\n    // 양식 데이터가 유효함, 처리할 작업 수행\\n  }\\n};\\n\\nconst App = () => {\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <input type=\\\"text\\\" name=\\\"username\\\" placeholder=\\\"사용자 이름\\\" />\\n      <input type=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"이메일\\\" />\\n      <input type=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"비밀번호\\\" />\\n      <button type=\\\"submit\\\">계정 생성</button>\\n    </form>\\n  );\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예시는 사용자가 제출 버튼을 클릭할 때 onSubmit 이벤트 핸들러를 사용하여 양식 데이터를 유효성 검사합니다. 양식 데이터가 유효하면 코드는 해당 데이터를 처리합니다. 그렇지 않으면 오류 메시지가 표시됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {})\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}