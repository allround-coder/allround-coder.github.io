{"pageProps":{"post":{"title":"Nextjs에서 와일드카드 서브도메인을 경로로 사용하기","description":"","date":"2024-05-12 19:59","slug":"2024-05-12-UsingwildcardsubdomainsaspathsonNextjs","content":"\n\n가끔씩 App Masters에서는 각 가능한 서브도메인마다 다른 주제(또는 데이터)를 가진 프로젝트를 작업해야 합니다.\n\n![Using wildcard subdomains as paths on Next.js](/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_0.png)\n\nNext.js를 사용하고 있기 때문에 기본적으로 이렇게 하는 것이 가능해 보이지만, 사실 그렇게 간단하지는 않습니다.\n\n클라이언트 측에서는 window.location을 사용하여 쉽게 서브도메인을 알 수 있지만, 서버 측에서는 런타임에만 알 수 있고 빌드 타임에서는 알 수 없기 때문에 정적 렌더링과 Next.js에서 제공했던 기타 최적화 기능을 포기해야 했습니다. 대신 항상 getServerSideProps를 사용하여 요청 내에서 서브도메인을 가져오는 방식으로 사용하게 되었습니다.\n\n\n\n더 이상 그럴 필요 없어요!\n\n이 문제를 해결하기 위한 첫 번째 접근 방식은 각 요청의 헤더를 확인하면서 Next.js 리라이트 기능을 사용하려고 매핑하는 것이었습니다. 작동할 것 같지만 현재는 헤더 값을 경로로 매핑할 수 없고 매개변수만 가능합니다.\n\n다른 해결책은 Next.js 프론트엔드를 제공하는 사용자 지정 노드 서버를 갖는 것인데요, 이 경우 최적화 기능 중 일부를 놓치게 되고 더 많은 코드를 유지 보수해야 합니다.\n\n# 해결책: 미들웨어 사용하기!\n\n\n\nNext 12에서 소개되고 Next 13에서 업데이트된 것은 이제 우리는 미들웨어를 쉽게 사용하여 다음 노드 서버로의 모든 요청을 처리할 수 있으며 요청이 라우터에 도달하기 전에 요청을 변경할 수 있습니다.\n\n그래서 먼저, /src/pages 폴더 내에 [서브도메인]이라는 폴더를 만들고 이 폴더에 모든 페이지를 추가했습니다. 이미 알고 계시겠지만, 페이지 폴더 내의 폴더/파일 이름에 []를 추가하면 해당 이름이 동적인 것으로 만들어집니다.\n\n![이미지](/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_1.png)\n\n그 다음으로, pages 폴더와 동일한 레벨에 src/middleware.ts 파일을 생성하고 코드를 작성하기 시작했습니다.\n\n\n\n```js\n// middleware.ts\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { getValidSubdomain } from '@/utils/subdomain';\n\n// 정규 표현식을 이용하여 공개 파일을 판별합니다\nconst PUBLIC_FILE = /\\.(.*)$/; // 파일\n\nexport async function middleware(req: NextRequest) {\n  // URL을 복제합니다\n  const url = req.nextUrl.clone();\n\n  // 공개 파일은 건너뜁니다\n  if (PUBLIC_FILE.test(url.pathname) || url.pathname.includes('_next')) return;\n\n  const host = req.headers.get('host');\n  const subdomain = getValidSubdomain(host);\n  if (subdomain) {\n    // 서브도메인이 있는 경우 경로를 다시 작성합니다\n    console.log(`>>> Rewriting: ${url.pathname} to /${subdomain}${url.pathname}`);\n    url.pathname = `/${subdomain}${url.pathname}`;\n  }\n\n  return NextResponse.rewrite(url);\n}\n```\n\nmiddleware 함수는 내 모든 요청을 처리하며 유효한 서브도메인이 있는지 확인합니다. 있다면, 수동으로 pathname을 '/subdomain'으로 재작성합니다. 예를 들어, https://baraky.domain.com/edit 요청은 https://baraky.domain.com/baraky/edit 페이지로 접근합니다.\n\ngetValidSubdomain의 코드는 다음과 같습니다:\n\n```js\nexport const getValidSubdomain = (host?: string | null) => {\n  let subdomain: string | null = null;\n  if (!host && typeof window !== 'undefined') {\n    // 클라이언트 측에서는 window를 통해 host를 가져옵니다\n    host = window.location.host;\n  }\n  if (host && host.includes('.')) {\n    const candidate = host.split('.')[0];\n    if (candidate && !candidate.includes('localhost')) {\n      // 유효한 후보\n      subdomain = candidate;\n    }\n  }\n  return subdomain;\n};\n```\n\n\n\n해당 함수에 몇 가지 다른 기능을 추가했어요. 호스트 문자열이 없어도 서브도메인을 가져올 수 있게 했답니다.\n\n이제는 [subdomain] 폴더 내에서 페이지를 변경할 수 있을 거예요. 서브도메인 값은 라우터 내에서 query 매개변수로 사용할 수 있고, 이를 원하는 대로 활용할 수 있어요:\n\n- 각 서브도메인에 대한 관련 데이터를 가져오기\n- 각 서브도메인마다 다른 테마 적용하기\n- 각 서브도메인별로 특정 캐시 사용 및 getStaticProps를 사용한 정적 생성 페이지 생성하기\n\n하지만 기억해 주세요: 와일드카드 서브도메인에 액세스하려면 해당 기능을 제공하는 호스팅 내에서 Next.js 앱을 호스팅해야 합니다.\n\n\n\n# 왜 이게 중요한가요?\n\n서브도메인 대신 서브 라우트로 페이지를 분리하면 각 서브도메인에 대해 getStaticProps를 사용할 수 있습니다. 서로 다른 캐시에서 분리할 수 있으므로 Next.js는 https://something.domain.com과 https://other-thing.domain.com을 구별할 수 있습니다. 그렇지 않으면 두 웹사이트 모두에 대해 같은 정적 렌더링을 반환할 것입니다.","ogImage":{"url":"/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_0.png"},"coverImage":"/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"가끔씩 App Masters에서는 각 가능한 서브도메인마다 다른 주제(또는 데이터)를 가진 프로젝트를 작업해야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_0.png\",\n        alt: \"Using wildcard subdomains as paths on Next.js\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next.js를 사용하고 있기 때문에 기본적으로 이렇게 하는 것이 가능해 보이지만, 사실 그렇게 간단하지는 않습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클라이언트 측에서는 window.location을 사용하여 쉽게 서브도메인을 알 수 있지만, 서버 측에서는 런타임에만 알 수 있고 빌드 타임에서는 알 수 없기 때문에 정적 렌더링과 Next.js에서 제공했던 기타 최적화 기능을 포기해야 했습니다. 대신 항상 getServerSideProps를 사용하여 요청 내에서 서브도메인을 가져오는 방식으로 사용하게 되었습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 이상 그럴 필요 없어요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 문제를 해결하기 위한 첫 번째 접근 방식은 각 요청의 헤더를 확인하면서 Next.js 리라이트 기능을 사용하려고 매핑하는 것이었습니다. 작동할 것 같지만 현재는 헤더 값을 경로로 매핑할 수 없고 매개변수만 가능합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다른 해결책은 Next.js 프론트엔드를 제공하는 사용자 지정 노드 서버를 갖는 것인데요, 이 경우 최적화 기능 중 일부를 놓치게 되고 더 많은 코드를 유지 보수해야 합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"해결책: 미들웨어 사용하기!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next 12에서 소개되고 Next 13에서 업데이트된 것은 이제 우리는 미들웨어를 쉽게 사용하여 다음 노드 서버로의 모든 요청을 처리할 수 있으며 요청이 라우터에 도달하기 전에 요청을 변경할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래서 먼저, /src/pages 폴더 내에 [서브도메인]이라는 폴더를 만들고 이 폴더에 모든 페이지를 추가했습니다. 이미 알고 계시겠지만, 페이지 폴더 내의 폴더/파일 이름에 []를 추가하면 해당 이름이 동적인 것으로 만들어집니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그 다음으로, pages 폴더와 동일한 레벨에 src/middleware.ts 파일을 생성하고 코드를 작성하기 시작했습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// middleware.ts\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NextResponse\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'next/server'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" type { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NextRequest\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'next/server'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { getValidSubdomain } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@/utils/subdomain'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 정규 표현식을 이용하여 공개 파일을 판별합니다\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PUBLIC_FILE\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/\\\\.(.*)$/\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 파일\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"middleware\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"req: NextRequest\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// URL을 복제합니다\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" url = req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nextUrl\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"clone\"\n        }), \"();\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 공개 파일은 건너뜁니다\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PUBLIC_FILE\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"test\"\n        }), \"(url.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pathname\"\n        }), \") || url.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pathname\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"includes\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'_next'\"\n        }), \")) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \";\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" host = req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"headers\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'host'\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" subdomain = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getValidSubdomain\"\n        }), \"(host);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (subdomain) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 서브도메인이 있는 경우 경로를 다시 작성합니다\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`>>> Rewriting: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${url.pathname}\"\n          }), \" to /\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${subdomain}\"\n          }), _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${url.pathname}\"\n          }), \"`\"]\n        }), \");\\n    url.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pathname\"\n        }), \" = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`/\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${subdomain}\"\n          }), _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${url.pathname}\"\n          }), \"`\"]\n        }), \";\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NextResponse\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rewrite\"\n        }), \"(url);\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"middleware 함수는 내 모든 요청을 처리하며 유효한 서브도메인이 있는지 확인합니다. 있다면, 수동으로 pathname을 '/subdomain'으로 재작성합니다. 예를 들어, https://baraky.domain.com/edit 요청은 https://baraky.domain.com/baraky/edit 페이지로 접근합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"getValidSubdomain의 코드는 다음과 같습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getValidSubdomain\"\n        }), \" = (\", _jsxs(_components.span, {\n          className: \"hljs-params\",\n          children: [\"host?: string | \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          })]\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"subdomain\"\n        }), \": string | \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!host && \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \" !== \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'undefined'\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 클라이언트 측에서는 window를 통해 host를 가져옵니다\"\n        }), \"\\n    host = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"location\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"host\"\n        }), \";\\n  }\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (host && host.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"includes\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'.'\"\n        }), \")) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" candidate = host.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"split\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'.'\"\n        }), \")[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"];\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (candidate && !candidate.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"includes\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'localhost'\"\n        }), \")) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 유효한 후보\"\n        }), \"\\n      subdomain = candidate;\\n    }\\n  }\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" subdomain;\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"해당 함수에 몇 가지 다른 기능을 추가했어요. 호스트 문자열이 없어도 서브도메인을 가져올 수 있게 했답니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제는 [subdomain] 폴더 내에서 페이지를 변경할 수 있을 거예요. 서브도메인 값은 라우터 내에서 query 매개변수로 사용할 수 있고, 이를 원하는 대로 활용할 수 있어요:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"각 서브도메인에 대한 관련 데이터를 가져오기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"각 서브도메인마다 다른 테마 적용하기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"각 서브도메인별로 특정 캐시 사용 및 getStaticProps를 사용한 정적 생성 페이지 생성하기\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 기억해 주세요: 와일드카드 서브도메인에 액세스하려면 해당 기능을 제공하는 호스팅 내에서 Next.js 앱을 호스팅해야 합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"왜 이게 중요한가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"서브도메인 대신 서브 라우트로 페이지를 분리하면 각 서브도메인에 대해 getStaticProps를 사용할 수 있습니다. 서로 다른 캐시에서 분리할 수 있으므로 Next.js는 https://something.domain.com과 https://other-thing.domain.com을 구별할 수 있습니다. 그렇지 않으면 두 웹사이트 모두에 대해 같은 정적 렌더링을 반환할 것입니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}