{"pageProps":{"post":{"title":"칼닷컴을 리액트를 이용하여 웹사이트에 통합하는 단계별 안내","description":"","date":"2024-05-12 22:44","slug":"2024-05-12-IntegratingCalcomIntoYourWebsiteUsingReactAStep-by-StepGuide","content":"\n\n현재의 빠르게 변화하는 세상에서 비즈니스 및 전문가들이 시간을 효율적으로 관리하기 위해 필수적인 효율적인 일정 관리 도구들이 되었습니다. Cal.com은 회의와 약속을 일정 잡는 과정을 간소화하여 사용자들이 회의를 설정하는 데 자주 발생하는 번복된 소통을 최소화하고 시간을 절약할 수 있는 도구 중 하나입니다. 이 블로그 포스트에서는 React를 사용하여 웹 사이트에 Cal.com을 원활하게 임베드하는 방법에 대해 살펴보겠습니다. React는 사용자 인터페이스를 구축하는 데 가장 인기있는 JavaScript 라이브러리 중 하나입니다.\n\n# 단계 1: Cal.com 계정 등록\n\nCal.com을 웹 사이트에 임베드하려면 먼저 Cal.com에 계정을 등록해야 합니다. 다행히도 이 과정은 간단하며 몇 분 정도 소요됩니다. 등록이 완료되면 Cal.com 대시보드에 접속하여 일정 설정 기본 사항을 사용자 정의하고, 임베드 가능한 일정 링크를 생성할 수 있게 됩니다.\n\n\n\n# 단계 2: React 설치하기\n\n이미 진행하지 않았다면 Cal.com을 웹사이트에 통합하기 위해 React 프로젝트를 설정해야 합니다. create-react-app을 사용하거나 React 프로젝트를 초기화하는 선호하는 방법을 사용하여 새로운 React 프로젝트를 만들 수 있습니다.\n\n# 단계 3: Cal.com 위젯 패키지 설치하기 (방법 1)\n\nCal.com은 React 위젯 패키지를 제공하여 React 애플리케이션에 일정 기능을 쉽게 포함시킬 수 있습니다. Cal.com 위젯 패키지를 설치하려면 npm을 사용할 수 있습니다:\n\n\n\n```js\nnpm install @calcom/react-widget\n```\n\nCal.com 위젯 패키지를 설치한 후 Cal.com 위젯 컴포넌트를 React 애플리케이션에 추가할 수 있습니다. CalcomWidget 컴포넌트를 React 컴포넌트로 가져와 JSX 마크업 내에서 사용하세요:\n\n```js\nimport React from 'react';\nimport { CalcomWidget } from '@calcom/react-widget';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>내 웹사이트에 오신 것을 환영합니다</h1>\n      <CalcomWidget\n        schedulingLink=\"여기에 당신의 일정 관리 링크를 입력하세요\"\n        buttonText=\"내 Cal 예약하기\"\n        \n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n\"여기에 당신의 일정 관리 링크를 입력하세요\"를 Cal.com 대시보드에서 생성된 일정 관리 링크로 대체하세요. 원하는대로 버튼 텍스트를 사용자화할 수 있습니다.```\n\n\n\nCal.com 위젯 컴포넌트는 당신의 웹사이트와 일치하도록 커스터마이징할 수 있어요. CalcomWidget 컴포넌트에 props를 전달하여 버튼 텍스트, 버튼 색상, 위젯 크기 등을 다양하게 사용자화할 수 있어요.\n\n당신의 웹사이트는 이렇게 보일 거에요:\n\n![Cal.com Widget Example](/assets/img/2024-05-12-IntegratingCalcomIntoYourWebsiteUsingReactAStep-by-StepGuide_1.png)\n\n# 단계 3: Cal.com 임베드 패키지 설치 (방법 2)\n\n\n\nCal.com은 React 임베드 패키지도 제공합니다. npm을 사용하여 패키지를 설치할 수 있어요:\n\n```js\nnpm install @calcom/embed-react\n```\n\n패키지를 설치한 후에는 React 애플리케이션에 Cal.com 임베드 컴포넌트를 추가할 수 있어요. React 컴포넌트에서 Cal 컴포넌트를 가져와 JSX 마크업 안에서 사용하세요:\n\n```js\nimport React from 'react';\nimport Cal from \"@calcom/embed-react\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>다음은 인라인 cal.com 임베드입니다</h1>\n      <Cal calLink=\"rick/get-rick-rolled\"></Cal>\n    </div>\n  );\n}\n```\n\n\n\nCal 컴포넌트는 calLink라는 속성과 함께 사용됩니다. 이 속성은 삽입할 Cal.com 일정 링크를 지정합니다. 이 경우 \"rick/get-rick-rolled\"이 예제 링크로 제공됩니다. 이를 Cal.com 대시보드에서 생성된 실제 Cal.com 일정 링크로 교체해야 합니다.\n\n당신의 웹사이트는 다음과 같이 보일 것입니다:\n\n![Image](/assets/img/2024-05-12-IntegratingCalcomIntoYourWebsiteUsingReactAStep-by-StepGuide_2.png)\n\n# Method 1과 Method 2 사이의 차이는 무엇인가요?\n\n\n\n두 코드 스니펫은 모두 Cal.com 일정을 React 애플리케이션에 삽입하는 동일한 목표를 달성합니다.\n\n요약하면, 메소드 1은 상세한 지침과 사용자 정의 옵션을 제공하는 포괄적인 가이드를 제공하며, 메소드 2는 빠른 통합을 위한 간단하고 사용 준비가 된 코드 스니펫을 제공합니다. 두 가지 방법 중 선택은 사용자의 선호도, React에 대한 익숙함 및 통합에 필요한 사용자 지정 수준에 달려 있습니다.\n\n# 단계 6: 웹사이트 테스트 및 배포하기\n\nReact 애플리케이션에 Cal.com을 통합한 후에는 모든 것이 올바르게 작동하는지 확인하기 위해 기능을 테스트하는 것이 중요합니다. 누군가가 약속을 예약하면 제어판이 표시됩니다:\n\n\n\n\n![image](/assets/img/2024-05-12-IntegratingCalcomIntoYourWebsiteUsingReactAStep-by-StepGuide_3.png)","ogImage":{"url":"/assets/img/2024-05-12-IntegratingCalcomIntoYourWebsiteUsingReactAStep-by-StepGuide_0.png"},"coverImage":"/assets/img/2024-05-12-IntegratingCalcomIntoYourWebsiteUsingReactAStep-by-StepGuide_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"현재의 빠르게 변화하는 세상에서 비즈니스 및 전문가들이 시간을 효율적으로 관리하기 위해 필수적인 효율적인 일정 관리 도구들이 되었습니다. Cal.com은 회의와 약속을 일정 잡는 과정을 간소화하여 사용자들이 회의를 설정하는 데 자주 발생하는 번복된 소통을 최소화하고 시간을 절약할 수 있는 도구 중 하나입니다. 이 블로그 포스트에서는 React를 사용하여 웹 사이트에 Cal.com을 원활하게 임베드하는 방법에 대해 살펴보겠습니다. React는 사용자 인터페이스를 구축하는 데 가장 인기있는 JavaScript 라이브러리 중 하나입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 1: Cal.com 계정 등록\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cal.com을 웹 사이트에 임베드하려면 먼저 Cal.com에 계정을 등록해야 합니다. 다행히도 이 과정은 간단하며 몇 분 정도 소요됩니다. 등록이 완료되면 Cal.com 대시보드에 접속하여 일정 설정 기본 사항을 사용자 정의하고, 임베드 가능한 일정 링크를 생성할 수 있게 됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 2: React 설치하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이미 진행하지 않았다면 Cal.com을 웹사이트에 통합하기 위해 React 프로젝트를 설정해야 합니다. create-react-app을 사용하거나 React 프로젝트를 초기화하는 선호하는 방법을 사용하여 새로운 React 프로젝트를 만들 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 3: Cal.com 위젯 패키지 설치하기 (방법 1)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cal.com은 React 위젯 패키지를 제공하여 React 애플리케이션에 일정 기능을 쉽게 포함시킬 수 있습니다. Cal.com 위젯 패키지를 설치하려면 npm을 사용할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install @calcom/react-widget\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cal.com 위젯 패키지를 설치한 후 Cal.com 위젯 컴포넌트를 React 애플리케이션에 추가할 수 있습니다. CalcomWidget 컴포넌트를 React 컴포넌트로 가져와 JSX 마크업 내에서 사용하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CalcomWidget\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@calcom/react-widget'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"App\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"내 웹사이트에 오신 것을 환영합니다\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"CalcomWidget\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"schedulingLink\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"여기에 당신의 일정 관리 링크를 입력하세요\\\"\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"buttonText\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"내 Cal 예약하기\\\"\"\n            }), \"\\n        \\n      />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"App\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"여기에 당신의 일정 관리 링크를 입력하세요\\\"를 Cal.com 대시보드에서 생성된 일정 관리 링크로 대체하세요. 원하는대로 버튼 텍스트를 사용자화할 수 있습니다.```\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cal.com 위젯 컴포넌트는 당신의 웹사이트와 일치하도록 커스터마이징할 수 있어요. CalcomWidget 컴포넌트에 props를 전달하여 버튼 텍스트, 버튼 색상, 위젯 크기 등을 다양하게 사용자화할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"당신의 웹사이트는 이렇게 보일 거에요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-IntegratingCalcomIntoYourWebsiteUsingReactAStep-by-StepGuide_1.png\",\n        alt: \"Cal.com Widget Example\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 3: Cal.com 임베드 패키지 설치 (방법 2)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cal.com은 React 임베드 패키지도 제공합니다. npm을 사용하여 패키지를 설치할 수 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install @calcom/embed-react\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"패키지를 설치한 후에는 React 애플리케이션에 Cal.com 임베드 컴포넌트를 추가할 수 있어요. React 컴포넌트에서 Cal 컴포넌트를 가져와 JSX 마크업 안에서 사용하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Cal\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@calcom/embed-react\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"App\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"App\\\"\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"다음은 인라인 cal.com 임베드입니다\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Cal\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"calLink\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"rick/get-rick-rolled\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Cal\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cal 컴포넌트는 calLink라는 속성과 함께 사용됩니다. 이 속성은 삽입할 Cal.com 일정 링크를 지정합니다. 이 경우 \\\"rick/get-rick-rolled\\\"이 예제 링크로 제공됩니다. 이를 Cal.com 대시보드에서 생성된 실제 Cal.com 일정 링크로 교체해야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"당신의 웹사이트는 다음과 같이 보일 것입니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-IntegratingCalcomIntoYourWebsiteUsingReactAStep-by-StepGuide_2.png\",\n        alt: \"Image\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Method 1과 Method 2 사이의 차이는 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"두 코드 스니펫은 모두 Cal.com 일정을 React 애플리케이션에 삽입하는 동일한 목표를 달성합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"요약하면, 메소드 1은 상세한 지침과 사용자 정의 옵션을 제공하는 포괄적인 가이드를 제공하며, 메소드 2는 빠른 통합을 위한 간단하고 사용 준비가 된 코드 스니펫을 제공합니다. 두 가지 방법 중 선택은 사용자의 선호도, React에 대한 익숙함 및 통합에 필요한 사용자 지정 수준에 달려 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 6: 웹사이트 테스트 및 배포하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React 애플리케이션에 Cal.com을 통합한 후에는 모든 것이 올바르게 작동하는지 확인하기 위해 기능을 테스트하는 것이 중요합니다. 누군가가 약속을 예약하면 제어판이 표시됩니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-IntegratingCalcomIntoYourWebsiteUsingReactAStep-by-StepGuide_3.png\",\n        alt: \"image\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}