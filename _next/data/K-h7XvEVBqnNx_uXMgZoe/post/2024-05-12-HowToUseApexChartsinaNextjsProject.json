{"pageProps":{"post":{"title":"Nextjs 프로젝트에서 ApexCharts를 사용하는 방법","description":"","date":"2024-05-12 22:10","slug":"2024-05-12-HowToUseApexChartsinaNextjsProject","content":"\n\n![이미지](/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_0.png)\n\nNext.js는 확실히 프런트엔드 랜드스케이프에서 주요 메타 프레임워크 중 하나입니다. 그러나 인기 있는 차트 라이브러리인 ApexCharts를 Next.js와 함께 사용할 때 특정 문제가 발생하는 것 같습니다. 이 글에서는 그 문제가 무엇인지와 해결 방법에 대해 논의하겠습니다.\n\n# 새 프로젝트를 초기화하는 방법을 살펴봅시다\n\n다음은 새 Next.js 프로젝트를 초기화하는 명령 프롬프트입니다(이미 초기화하는 방법을 잘 알고 계실 것 같지만, 문서를 열 필요 없이 편리하게 확인하실 수 있도록 제공드립니다)\n\n\n\n```js\n#npm\nnpx create-next-app@latest\n\n#pnpm\npnpm create next-app\n```\n\nApexCharts를 위한 필요한 의존성을 모두 설치하는 것을 잊지 마세요. 리액트 래퍼를 포함하면 됩니다.\n\n```js\n#npm\nnpm i react-apexcharts apexcharts\n\n#pnpm\npnpm i react-apexcharts apexcharts\n```\n\n우리는 기존의 신뢰받는 페이지와 새롭고 반짝이는 앱 디렉토리를 함께 사용할 것입니다. 두 가지의 구현 차이는 크지 않으니 시작해 봅시다.```\n\n\n\n두 가지 디렉토리 유형 중에서, 저는 개인적으로 폴더 구조를 이렇게 선호합니다 (특히 components 폴더 위치). 여러분은 자신의 구조 선호도에 맞게 조정하시면 됩니다.\n\n```js\nnextjs_project\n├── node_modules\n├── public\n└── src\n    ├── components\n    └── pages/app\n```\n\n# 그래프 컴포넌트 만들기\n\ncomponents 폴더 안에, charts.tsx/jsx 파일을 만들어 보겠습니다.\n\n\n\n```js\n// charts.tsx/jsx\n\n'use client' // 앱 디렉토리를 사용한다면, 이 줄을 빼먹지 마세요\n\nimport dynamic from \"next/dynamic\";\nconst ApexChart = dynamic(() => import(\"react-apexcharts\"), { ssr: false });\n\n\nexport function ExampleChart(){\n\n    const option = {\n        chart: {\n          id: 'apexchart-example'\n        },\n        xaxis: {\n          categories: [1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999]\n        }\n      }\n\n    const series = [{\n        name: 'series-1',\n        data: [30, 40, 35, 50, 49, 60, 70, 91, 125]\n      }]\n\n    return(\n        <>\n            <ApexChart type=\"line\" options={option} series={series} height={200} width={500} />\n        </>\n    )\n    \n}\n```\n\n만약 react-apexcharts — npm (npmjs.com)에서 아래와 같이 가져오려고 한다면\n\n```js\nimport Chart from 'react-apexcharts'\n```\n\n아마도 이런 에러를 마주하게 될 것입니다```\n\n\n\n마크다운 형식을 사용하면 더 좋을 것 같아요.\n\n![HowToUseApexChartsinaNextjsProject_1](/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_1.png)\n\n혹은 터미널에서는 이렇게 보일지도 몰라요.\n\n![HowToUseApexChartsinaNextjsProject_2](/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_2.png)\n\n이 에러는 Next.js의 자동 프리랜더링(렌더링: 자동 정적 최적화 | Next.js (nextjs.org)) 때문에 발생한 것 같아요. ApexChart 라이브러리는 클라이언트 쪽에 있는 window 인터페이스에 의존하기 때문에 본문 작성 시점에는 서버에서 프리랜더링할 수 없는 것으로 보입니다.\n\n\n\n그래서 Next.js가 이 경우를 해결하기 위해 제공한 솔루션은 내장된 next/dynamic을 사용하여 동적 가져오기를 수행하고 서버 측 사전 렌더링을 중지하도록 명시적으로 구성하는 것입니다.\n\n```js\n'use client' // 전체 파일을 클라이언트 측 컴포넌트로 표시하려면 앱 디렉터리를 사용하는 경우 이 부분을 잊지 마세요\n\nimport dynamic from \"next/dynamic\";\nconst Chart = dynamic(() => import(\"react-apexcharts\"), { ssr: false });\n```\n\n# 직접 해 보세요!\n\n이것은 페이지 디렉터리를 위한 것입니다.\n\n\n\n그리고 이것은 앱 디렉토리를 위한 것입니다.\n\n지금까지 제가 전달할 내용은 여기까지입니다. 읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_0.png"},"coverImage":"/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next.js는 확실히 프런트엔드 랜드스케이프에서 주요 메타 프레임워크 중 하나입니다. 그러나 인기 있는 차트 라이브러리인 ApexCharts를 Next.js와 함께 사용할 때 특정 문제가 발생하는 것 같습니다. 이 글에서는 그 문제가 무엇인지와 해결 방법에 대해 논의하겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"새 프로젝트를 초기화하는 방법을 살펴봅시다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 새 Next.js 프로젝트를 초기화하는 명령 프롬프트입니다(이미 초기화하는 방법을 잘 알고 계실 것 같지만, 문서를 열 필요 없이 편리하게 확인하실 수 있도록 제공드립니다)\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"#npm\\nnpx create-next-app@latest\\n\\n#pnpm\\npnpm create next-app\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ApexCharts를 위한 필요한 의존성을 모두 설치하는 것을 잊지 마세요. 리액트 래퍼를 포함하면 됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"#npm\\nnpm i react-apexcharts apexcharts\\n\\n#pnpm\\npnpm i react-apexcharts apexcharts\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 기존의 신뢰받는 페이지와 새롭고 반짝이는 앱 디렉토리를 함께 사용할 것입니다. 두 가지의 구현 차이는 크지 않으니 시작해 봅시다.```\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"두 가지 디렉토리 유형 중에서, 저는 개인적으로 폴더 구조를 이렇게 선호합니다 (특히 components 폴더 위치). 여러분은 자신의 구조 선호도에 맞게 조정하시면 됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"nextjs_project\\n├── node_modules\\n├── public\\n└── src\\n    ├── components\\n    └── pages/app\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"그래프 컴포넌트 만들기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"components 폴더 안에, charts.tsx/jsx 파일을 만들어 보겠습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// charts.tsx/jsx\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'use client'\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 앱 디렉토리를 사용한다면, 이 줄을 빼먹지 마세요\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" dynamic \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"next/dynamic\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ApexChart\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dynamic\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-apexcharts\\\"\"\n        }), \"), { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"ssr\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \" });\\n\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ExampleChart\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \"){\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" option = {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"chart\"\n        }), \": {\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'apexchart-example'\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"xaxis\"\n        }), \": {\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"categories\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1991\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1992\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1993\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1994\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1995\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1996\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1997\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1998\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1999\"\n        }), \"]\\n        }\\n      }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" series = [{\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'series-1'\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"data\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"30\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"40\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"35\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"49\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"60\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"70\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"91\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"125\"\n        }), \"]\\n      }]\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \"(\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"<>\"\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ApexChart\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"line\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"options\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{option}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"series\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{series}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"height\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{200}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"width\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{500}\"\n            }), \" />\"]\n          }), \"\\n        \", _jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"</>\"\n          })]\n        }), \"\\n    )\\n    \\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 react-apexcharts — npm (npmjs.com)에서 아래와 같이 가져오려고 한다면\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Chart\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-apexcharts'\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아마도 이런 에러를 마주하게 될 것입니다```\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마크다운 형식을 사용하면 더 좋을 것 같아요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_1.png\",\n        alt: \"HowToUseApexChartsinaNextjsProject_1\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"혹은 터미널에서는 이렇게 보일지도 몰라요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-HowToUseApexChartsinaNextjsProject_2.png\",\n        alt: \"HowToUseApexChartsinaNextjsProject_2\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 에러는 Next.js의 자동 프리랜더링(렌더링: 자동 정적 최적화 | Next.js (nextjs.org)) 때문에 발생한 것 같아요. ApexChart 라이브러리는 클라이언트 쪽에 있는 window 인터페이스에 의존하기 때문에 본문 작성 시점에는 서버에서 프리랜더링할 수 없는 것으로 보입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래서 Next.js가 이 경우를 해결하기 위해 제공한 솔루션은 내장된 next/dynamic을 사용하여 동적 가져오기를 수행하고 서버 측 사전 렌더링을 중지하도록 명시적으로 구성하는 것입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'use client'\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 전체 파일을 클라이언트 측 컴포넌트로 표시하려면 앱 디렉터리를 사용하는 경우 이 부분을 잊지 마세요\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" dynamic \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"next/dynamic\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Chart\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dynamic\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-apexcharts\\\"\"\n        }), \"), { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"ssr\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \" });\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"직접 해 보세요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것은 페이지 디렉터리를 위한 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 이것은 앱 디렉토리를 위한 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지금까지 제가 전달할 내용은 여기까지입니다. 읽어 주셔서 감사합니다!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}