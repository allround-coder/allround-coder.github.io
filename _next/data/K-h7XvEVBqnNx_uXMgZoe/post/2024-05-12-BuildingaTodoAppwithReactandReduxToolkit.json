{"pageProps":{"post":{"title":"리액트와 리덕스 툴킷으로 할 일 앱 만들기","description":"","date":"2024-05-12 22:09","slug":"2024-05-12-BuildingaTodoAppwithReactandReduxToolkit","content":"\n\n<img src=\"/assets/img/2024-05-12-BuildingaTodoAppwithReactandReduxToolkit_0.png\" />\n\n# 소개:\n\n이 튜토리얼에서는 React와 Redux Toolkit을 사용하여 간단한 할 일 앱을 구축할 것입니다. Redux Toolkit은 유틸리티 함수와 추상화를 제공하여 Redux에서 상태 관리를 간소화하는 강력한 라이브러리입니다. 이 튜토리얼을 마치면 React 애플리케이션에서 상태를 관리하는 데 Redux Toolkit을 사용하는 방법에 대해 확고한 이해를 얻을 것입니다.\n\n## 전제 조건:\n\n\n\n시작하기 전에 컴퓨터에 Node.js와 npm이 설치되어 있는지 확인해 주세요. React 기초 지식이 있다면 더 좋습니다.\n\n## 단계 1: 프로젝트 설정하기\n\n시작하려면 Create React App을 사용하여 새 React 프로젝트를 만들어야 합니다. 터미널을 열고 다음 명령어를 실행해주세요:\n\n```js\nnpx create-react-app todo-app\n```\n\n\n\n## 단계 2: 의존성 설치\n\n프로젝트 디렉토리로 이동하여 다음 명령어를 실행하여 필요한 의존성을 설치하세요:\n\n```js\ncd todo-app\nnpm install @reduxjs/toolkit react-redux\n```\n\n## 단계 3: Redux 슬라이스 이해하기\n\n\n\n코딩에 들어가기 전에 Redux 슬라이스 개념을 간단히 이해해 봅시다. 슬라이스는 애플리케이션의 상태와 연결된 리듀서의 논리적인 부분입니다. 초기 상태를 포함하고 상태가 액션에 응답하여 업데이트되는 방법을 정의합니다.\n\n## 단계 4: Redux 슬라이스 생성\n\n`src` 디렉토리에서 `todoSlice.js`라는 새 파일을 생성하세요. 이 파일은 할 일 관리를 위한 Redux 슬라이스를 담고 있을 것입니다. `todoSlice.js` 안에서 `@reduxjs/toolkit`에서 `createSlice` 함수를 가져와서 할 일 슬라이스의 초기 상태와 리듀서를 정의하세요.\n\n```js\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        text: action.payload,\n        completed: false,\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const todo = state.find((todo) => todo.id === action.payload);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n    deleteTodo: (state, action) => {\n      const index = state.findIndex((todo) => todo.id === action.payload);\n      if (index !== -1) {\n        state.splice(index, 1);\n      }\n    },\n  },\n});\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\nexport default todoSlice.reducer;\n```\n\n\n\n## 단계 5: Redux 스토어 구성하기\n\n이제 우리의 애플리케이션 상태를 보유할 Redux 스토어를 생성해 봅시다. `src` 디렉토리 내에 `store.js`라는 새 파일을 생성하세요. 이 파일 안에서 `@reduxjs/toolkit`에서 `configureStore` 함수와 `todoSlice` 리듀서를 import합니다. 그 후 `configureStore`를 사용하여 Redux 스토어를 생성하세요.\n\n```js\nimport { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\n\nconst store = configureStore({\n reducer: {\n todos: todoReducer,\n },\n});\n\nexport default store;\n```\n\n## 단계 6: Todo 컴포넌트 구성하기\n\n\n\n이제 `src` 디렉토리에 `Todo.js` 파일을 만들어 봅시다. 이 파일에는 할 일 리스트의 표시 및 관리를 처리할 `Todo` 컴포넌트가 포함됩니다. `Todo.js` 내에서 React, `react-redux`에서 필요한 훅 및 컴포넌트, 그리고 `todoSlice`에서 액션을 import하세요.\n\n```js\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addTodo, toggleComplete, deleteTodo } from \"./todoSlice\";\n\nconst Todo = () => {\n  const [text, setText] = useState(\"\");\n  const todos = useSelector((state) => state.todos);\n  const dispatch = useDispatch();\n\n  const handleInputChange = (e) => {\n    setText(e.target.value);\n  };\n\n  const handleAddTodo = () => {\n    if (text) {\n      dispatch(addTodo(text));\n      setText(\"\");\n    }\n  };\n\n  const handleToggleComplete = (id) => {\n    dispatch(toggleComplete(id));\n  };\n\n  const handleDeleteTodo = (id) => {\n    dispatch(deleteTodo(id));\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={text} onChange={handleInputChange} />{\" \"}\n      <button onClick={handleAddTodo}> 할 일 추가 </button>{\" \"}\n      <ul>\n        {\" \"}\n        {todos.map((todo) => (\n          <li\n            key={todo.id}\n            style={{\n              textDecoration: todo.completed ? \"line-through\" : \"none\",\n            }}\n          >\n            {todo.text}{\" \"}\n            <button onClick={() => handleToggleComplete(todo.id)}>\n              {\" \"}\n              {todo.completed ? \"미완료 처리\" : \"완료 처리\"}{\" \"}\n            </button>{\" \"}\n            <button onClick={() => handleDeleteTodo(todo.id)}> 삭제 </button>{\" \"}\n          </li>\n        ))}{\" \"}\n      </ul>{\" \"}\n    </div>\n  );\n};\n\nexport default Todo;\n```\n\n## Step 7: App 컴포넌트 업데이트하기\n\n`Todo` 컴포넌트를 렌더링하려면 `App.js` 파일을 약간 수정해야 합니다. React, `react-redux`의 `Provider` 컴포넌트, 그리고 `store.js` 파일에서 `store`를 import하세요. 그런 다음, `Todo` 컴포넌트를 `Provider` 컴포넌트로 감싸고 store를 prop으로 전달하세요.\n\n\n\n```js\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Todo from \"./Todo\";\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n       <Todo /> \n    </Provider>\n  );\n};\n\nexport default App;\n```\n\n## 단계 8: 앱 실행하기\n\n이제 할 일 앱을 실제로 실행해보는 시간입니다! 터미널에서 다음 명령어를 실행해주세요:\n\n```js\nnpm start\n```\n\n\n\n브라우저에서 http://localhost:3000을 방문하면 할 일 앱이 정상적으로 작동하는 것을 확인할 수 있습니다. 할 일을 추가하고 완료로 표시하거나 삭제할 수 있습니다. Redux Toolkit은 상태 관리를 효율적이고 쉽게 처리하게 해줍니다.\n\n![이미지](/assets/img/2024-05-12-BuildingaTodoAppwithReactandReduxToolkit_1.png)\n\n# 결론:\n\n이 튜토리얼에서 React와 Redux Toolkit을 사용하여 할 일 앱을 만드는 방법을 배웠습니다. Redux 슬라이스의 개념을 살펴보고 Redux Toolkit의 `createSlice` 함수를 사용하여 할 일을 관리하는 상태와 리듀서를 정의했습니다. 이 튜토리얼을 따라하면 Redux Toolkit을 사용해 React 애플리케이션의 상태를 관리하는 뛰어난 기초를 마련할 수 있을 것입니다.\n\n\n\n더 많은 기능을 추가하여 할 일을 편집하거나 완료 상태에 따라 필터링하는 등 앱을 사용자 정의하고 향상시키는 것에 자유롭게 도전해보세요. 즐거운 코딩되세요!","ogImage":{"url":"/assets/img/2024-05-12-BuildingaTodoAppwithReactandReduxToolkit_0.png"},"coverImage":"/assets/img/2024-05-12-BuildingaTodoAppwithReactandReduxToolkit_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-BuildingaTodoAppwithReactandReduxToolkit_0.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"소개:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 튜토리얼에서는 React와 Redux Toolkit을 사용하여 간단한 할 일 앱을 구축할 것입니다. Redux Toolkit은 유틸리티 함수와 추상화를 제공하여 Redux에서 상태 관리를 간소화하는 강력한 라이브러리입니다. 이 튜토리얼을 마치면 React 애플리케이션에서 상태를 관리하는 데 Redux Toolkit을 사용하는 방법에 대해 확고한 이해를 얻을 것입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"전제 조건:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시작하기 전에 컴퓨터에 Node.js와 npm이 설치되어 있는지 확인해 주세요. React 기초 지식이 있다면 더 좋습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 1: 프로젝트 설정하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시작하려면 Create React App을 사용하여 새 React 프로젝트를 만들어야 합니다. 터미널을 열고 다음 명령어를 실행해주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npx create-react-app todo-app\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 2: 의존성 설치\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"프로젝트 디렉토리로 이동하여 다음 명령어를 실행하여 필요한 의존성을 설치하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"cd todo-app\\nnpm install @reduxjs/toolkit react-redux\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 3: Redux 슬라이스 이해하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코딩에 들어가기 전에 Redux 슬라이스 개념을 간단히 이해해 봅시다. 슬라이스는 애플리케이션의 상태와 연결된 리듀서의 논리적인 부분입니다. 초기 상태를 포함하고 상태가 액션에 응답하여 업데이트되는 방법을 정의합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 4: Redux 슬라이스 생성\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"src\"\n      }), \" 디렉토리에서 \", _jsx(_components.code, {\n        children: \"todoSlice.js\"\n      }), \"라는 새 파일을 생성하세요. 이 파일은 할 일 관리를 위한 Redux 슬라이스를 담고 있을 것입니다. \", _jsx(_components.code, {\n        children: \"todoSlice.js\"\n      }), \" 안에서 \", _jsx(_components.code, {\n        children: \"@reduxjs/toolkit\"\n      }), \"에서 \", _jsx(_components.code, {\n        children: \"createSlice\"\n      }), \" 함수를 가져와서 할 일 슬라이스의 초기 상태와 리듀서를 정의하세요.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { createSlice } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@reduxjs/toolkit\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" todoSlice = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createSlice\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"todos\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"initialState\"\n        }), \": [],\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"reducers\"\n        }), \": {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"addTodo\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"state, action\"\n          }), \") =>\"]\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" newTodo = {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Date\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"now\"\n        }), \"(),\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"text\"\n        }), \": action.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"payload\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"completed\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n      };\\n      state.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(newTodo);\\n    },\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"toggleComplete\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"state, action\"\n          }), \") =>\"]\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" todo = state.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"todo\"\n          }), \") =>\"]\n        }), \" todo.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \" === action.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"payload\"\n        }), \");\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (todo) {\\n        todo.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"completed\"\n        }), \" = !todo.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"completed\"\n        }), \";\\n      }\\n    },\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"deleteTodo\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"state, action\"\n          }), \") =>\"]\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" index = state.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"findIndex\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"todo\"\n          }), \") =>\"]\n        }), \" todo.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \" === action.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"payload\"\n        }), \");\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (index !== -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") {\\n        state.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"splice\"\n        }), \"(index, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \");\\n      }\\n    },\\n  },\\n});\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { addTodo, toggleComplete, deleteTodo } = todoSlice.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"actions\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" todoSlice.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"reducer\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 5: Redux 스토어 구성하기\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이제 우리의 애플리케이션 상태를 보유할 Redux 스토어를 생성해 봅시다. \", _jsx(_components.code, {\n        children: \"src\"\n      }), \" 디렉토리 내에 \", _jsx(_components.code, {\n        children: \"store.js\"\n      }), \"라는 새 파일을 생성하세요. 이 파일 안에서 \", _jsx(_components.code, {\n        children: \"@reduxjs/toolkit\"\n      }), \"에서 \", _jsx(_components.code, {\n        children: \"configureStore\"\n      }), \" 함수와 \", _jsx(_components.code, {\n        children: \"todoSlice\"\n      }), \" 리듀서를 import합니다. 그 후 \", _jsx(_components.code, {\n        children: \"configureStore\"\n      }), \"를 사용하여 Redux 스토어를 생성하세요.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { configureStore } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@reduxjs/toolkit'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" todoReducer \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./todoSlice'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" store = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"configureStore\"\n        }), \"({\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"reducer\"\n        }), \": {\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"todos\"\n        }), \": todoReducer,\\n },\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" store;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 6: Todo 컴포넌트 구성하기\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이제 \", _jsx(_components.code, {\n        children: \"src\"\n      }), \" 디렉토리에 \", _jsx(_components.code, {\n        children: \"Todo.js\"\n      }), \" 파일을 만들어 봅시다. 이 파일에는 할 일 리스트의 표시 및 관리를 처리할 \", _jsx(_components.code, {\n        children: \"Todo\"\n      }), \" 컴포넌트가 포함됩니다. \", _jsx(_components.code, {\n        children: \"Todo.js\"\n      }), \" 내에서 React, \", _jsx(_components.code, {\n        children: \"react-redux\"\n      }), \"에서 필요한 훅 및 컴포넌트, 그리고 \", _jsx(_components.code, {\n        children: \"todoSlice\"\n      }), \"에서 액션을 import하세요.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useSelector, useDispatch } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-redux\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { addTodo, toggleComplete, deleteTodo } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./todoSlice\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Todo\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [text, setText] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" todos = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useSelector\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"state\"\n          }), \") =>\"]\n        }), \" state.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"todos\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" dispatch = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useDispatch\"\n        }), \"();\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleInputChange\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"e\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setText\"\n        }), \"(e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"target\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \");\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleAddTodo\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (text) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dispatch\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addTodo\"\n        }), \"(text));\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setText\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \");\\n    }\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleToggleComplete\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"id\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dispatch\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toggleComplete\"\n        }), \"(id));\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleDeleteTodo\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"id\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dispatch\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"deleteTodo\"\n        }), \"(id));\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{text}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleInputChange}\"\n            }), \" />\"]\n          }), \"{\\\" \\\"}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleAddTodo}\"\n            }), \">\"]\n          }), \" 할 일 추가 \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"{\\\" \\\"}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ul\"\n            }), \">\"]\n          }), \"\\n        {\\\" \\\"}\\n        {todos.map((todo) => (\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"key\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{todo.id}\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{{\"\n            }), \"\\n              \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"textDecoration:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"todo.completed\"\n            }), \" ? \\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"line-through\"\n            }), \"\\\" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":\"\n            }), \" \\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"none\"\n            }), \"\\\",\\n            }}\\n          >\"]\n          }), \"\\n            {todo.text}{\\\" \\\"}\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" handleToggleComplete(todo.id)}>\\n              {\\\" \\\"}\\n              {todo.completed ? \\\"미완료 처리\\\" : \\\"완료 처리\\\"}{\\\" \\\"}\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"{\\\" \\\"}\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" handleDeleteTodo(todo.id)}> 삭제 \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"{\\\" \\\"}\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          }), \"\\n        ))}{\\\" \\\"}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ul\"\n            }), \">\"]\n          }), \"{\\\" \\\"}\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Todo\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step 7: App 컴포넌트 업데이트하기\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Todo\"\n      }), \" 컴포넌트를 렌더링하려면 \", _jsx(_components.code, {\n        children: \"App.js\"\n      }), \" 파일을 약간 수정해야 합니다. React, \", _jsx(_components.code, {\n        children: \"react-redux\"\n      }), \"의 \", _jsx(_components.code, {\n        children: \"Provider\"\n      }), \" 컴포넌트, 그리고 \", _jsx(_components.code, {\n        children: \"store.js\"\n      }), \" 파일에서 \", _jsx(_components.code, {\n        children: \"store\"\n      }), \"를 import하세요. 그런 다음, \", _jsx(_components.code, {\n        children: \"Todo\"\n      }), \" 컴포넌트를 \", _jsx(_components.code, {\n        children: \"Provider\"\n      }), \" 컴포넌트로 감싸고 store를 prop으로 전달하세요.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Provider\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-redux\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" store \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./store\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Todo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./Todo\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"App\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Provider\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"store\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{store}\"\n            }), \">\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Todo\"\n            }), \" />\"]\n          }), \" \\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Provider\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"App\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 8: 앱 실행하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 할 일 앱을 실제로 실행해보는 시간입니다! 터미널에서 다음 명령어를 실행해주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm start\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"브라우저에서 http://localhost:3000을 방문하면 할 일 앱이 정상적으로 작동하는 것을 확인할 수 있습니다. 할 일을 추가하고 완료로 표시하거나 삭제할 수 있습니다. Redux Toolkit은 상태 관리를 효율적이고 쉽게 처리하게 해줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-BuildingaTodoAppwithReactandReduxToolkit_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 튜토리얼에서 React와 Redux Toolkit을 사용하여 할 일 앱을 만드는 방법을 배웠습니다. Redux 슬라이스의 개념을 살펴보고 Redux Toolkit의 \", _jsx(_components.code, {\n        children: \"createSlice\"\n      }), \" 함수를 사용하여 할 일을 관리하는 상태와 리듀서를 정의했습니다. 이 튜토리얼을 따라하면 Redux Toolkit을 사용해 React 애플리케이션의 상태를 관리하는 뛰어난 기초를 마련할 수 있을 것입니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 많은 기능을 추가하여 할 일을 편집하거나 완료 상태에 따라 필터링하는 등 앱을 사용자 정의하고 향상시키는 것에 자유롭게 도전해보세요. 즐거운 코딩되세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}