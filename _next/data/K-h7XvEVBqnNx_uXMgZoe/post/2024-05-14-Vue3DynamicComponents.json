{"pageProps":{"post":{"title":"Vue 3  동적 컴포넌트","description":"","date":"2024-05-14 12:29","slug":"2024-05-14-Vue3DynamicComponents","content":"\n\n<img src=\"/assets/img/2024-05-14-Vue3DynamicComponents_0.png\" />\n\n블로그 포스트 목록이 있다고 상상해봅시다 (여기 예시를 사용하고 있어요). 대부분의 경우, 모든 포스트가 너무 비슷해서 우리는 하나의 컴포넌트를 추출하고 재사용하고 싶을 것입니다. 이를 blogPost.vue라고 부를게요. 이런 경우에는 제목, 부제목 및 이미지를 표시하고 싶을 때 사용할 수 있어요.\n\n이제 블로그 포스트가 다른 특성을 가지고 있다고 상상해보세요. 어떤 포스트는 이미지 대신 상호작용이 필요한 인포그래픽을 가지고 있을 수도 있고, 어떤 것은 그저 다른 디자인이 필요할 수도 있어요. 이 문제를 해결하는 한 가지 방법은 blogPost.vue 컴포넌트 내부에 많은 if (조건부) 렌더링을 만드는 것이 있습니다. 다른 방법은 동적 컴포넌트를 사용하는 것이죠!!\n\n## 예제\n\n\n\n위에서 시작한 프로젝트를 확장해 나가려고 합니다. 이것은 Medium에서 가져온 블로그 포스트 목록입니다. 현재 이들은 모두 같은 디자인을 가지고 있지만, 동적 컴포넌트를 사용하여 컴포넌트를 깨끗하게 유지하면서 세 가지 다른 디자인을 만들 것입니다.\n\n기본적인 blogPost.vue 컴포넌트는 다음과 같이 보입니다:\n\n```js\n<script setup>\nconst props = defineProps(['post'])\nconst openPostWindow = (url) => {\n  window.open(url, '_blank')\n}\n</script>\n\n<template>\n  <div class=\"card\" @click=\"openPostWindow(post.mediumUrl)\">\n    <div class=\"card__header\">\n      <img :src=\"`https://miro.medium.com/v2/resize:fill:500:200/${post.previewImage.id}`\" alt=\"Post Image\" class=\"post-image\" />\n\n    </div>\n    <div class=\"card__body\">\n      <h4>\n        { post.title }\n      </h4>\n      <p>\n        { post.extendedPreviewContent.subtitle }\n      </p>\n    </div>\n    <div class=\"card__footer\">\n      <div class=\"user\">\n        <div class=\"user__info\">\n          <small>\n            { Math.ceil(post.readingTime) } 분\n          </small>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n /* 스타일은 실제 저장소에 있습니다 */\n</style>\n```\n\n\n\n```javascript\n<script setup>\nimport { usePostsStore } from './../stores/posts'\n\nimport MediumPreview from './blogDesigns/MediumPreview.vue'\n\nconst postStore = usePostsStore()\n</script>\n\n<template>\n  <div class=\"container\">\n    <component :is=\"MediumPreview\" :post=\"post\" v-for=\"post in postStore.posts\" :key=\"post.title\">\n    </component>\n  </div>\n</template>\n```\n\n지금까지 잘 진행되고 있어요! 이제 우리는 동적 접근 방식을 사용하고 있습니다. component 키워드를 사용하여 Vue에게 MediumPreview.vue 컴포넌트를 사용하도록 하고 있어요. 결과는 이렇게 나와요:\n\n![2024-05-14-Vue3DynamicComponents_1](/assets/img/2024-05-14-Vue3DynamicComponents_1.png)\n```\n\n\n\n## 동적이 멋있어지는 때\n\n지금까지 우리는 동적 접근 방식만 사용하여 동일한 컴포넌트를 표시했습니다. 이것은 좋은 시작점이지만, 동적 컴포넌트의 진정한 힘을 활용하지 못합니다. 그것은 여러 컴포넌트를 사용할 때에만 얻을 수 있습니다. 그래서 포스트용으로 또 다른 디자인을 추가해 볼까요?\n저는 단순히 MediumPreview2.vue로 불리는 다른 컴포넌트를 만들었습니다. 보기에는 비슷해 보이지만, 이 예제에서는 중요하지 않습니다. 각 컴포넌트가 코드를 더 깨끗하게 만드는 충분히 다른 컴포넌트임을 상상해 봅시다.\n\n이제 부모 컴포넌트는 이렇게 생겼습니다.\n\n```js\n<script setup>\nimport { usePostsStore } from './../stores/posts'\n\nimport MediumPreview from './blogDesigns/MediumPreview.vue'\nimport MediumPreview2 from './blogDesigns/MediumPreview2.vue'\n\nconst postStore = usePostsStore()\n</script>\n\n<template>\n  <div class=\"container\">\n    <component :is=\"index % 2 === 0 ? MediumPreview : MediumPreview2\" :post=\"post\" v-for=\"(post, index) in postStore.posts\" :key=\"post.title\">\n    </component>\n  </div>\n</template>\n```\n\n\n\n결과는 아래와 같습니다:\n\n![Vue3 Dynamic Components](/assets/img/2024-05-14-Vue3DynamicComponents_2.png)\n\n## 최종 목표\n\n동적 컴포넌트의 일반적인 사용 사례는 사용자가 어떤 종류의 뷰/디자인을 사용하고 싶은지 선택할 수 있는 탭일 수도 있습니다. 따라서 사용자가 보여져야 하는 디자인의 종류를 선택할 수 있는 탭을 포함한 예제를 확장할 수 있습니다.\n\n\n\n<img src=\"/assets/img/2024-05-14-Vue3DynamicComponents_3.png\" />\n\nPinia store를 사용하여 쉽게 이루어집니다. 어떤 디자인을 보여줄지의 값을 저장하기 위한 Pinia store를 사용합니다 →\n\n```js\n<script setup>\nimport { usePostsStore } from './../stores/posts'\nimport { useTabStore } from './../stores/tab'\nimport MediumPreview from './blogDesigns/MediumPreview.vue'\nimport MediumPreview2 from './blogDesigns/MediumPreview2.vue'\n\nconst componentMap = { MediumPreview, MediumPreview2 }\nconst tabStore = useTabStore()\nconst postStore = usePostsStore()\n</script>\n\n<template>\n  <div class=\"container\">\n    <component :is=\"componentMap[tabStore.tab]\" :post=\"post\" v-for=\"(post, index) in postStore.posts\" :key=\"post.title\">\n    </component>\n  </div>\n</template>\r\n```\n\n## 결론\n\n\n\n동적 구성 요소를 설정하는 것은 코드베이스를 간단하게 유지하고 분할하는 효과적인 방법일 수 있어요. 새로운 디자인을 추가하는 것은 완전히 별도의 파일에서 할 수 있어서 현재 구성 요소에 오류와 버그를 도입할 가능성이 줄어들어요.\n\n여기서 전체 예제 repo를 확인하세요\n\n여기서 데모 사이트를 확인하세요\n\n아래 내용도 참고해보세요:\n\n\n\n# 친절한 영어로 🚀\n\nIn Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 작가를 박수로 응원하고 팔로우하세요 👏\n- 팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter\n- 다른 플랫폼 방문하기: Stackademic | CoFeed | Venture\n- PlainEnglish.io에서 더 많은 콘텐츠 만나보세요","ogImage":{"url":"/assets/img/2024-05-14-Vue3DynamicComponents_0.png"},"coverImage":"/assets/img/2024-05-14-Vue3DynamicComponents_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    img: \"img\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-Vue3DynamicComponents_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"블로그 포스트 목록이 있다고 상상해봅시다 (여기 예시를 사용하고 있어요). 대부분의 경우, 모든 포스트가 너무 비슷해서 우리는 하나의 컴포넌트를 추출하고 재사용하고 싶을 것입니다. 이를 blogPost.vue라고 부를게요. 이런 경우에는 제목, 부제목 및 이미지를 표시하고 싶을 때 사용할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 블로그 포스트가 다른 특성을 가지고 있다고 상상해보세요. 어떤 포스트는 이미지 대신 상호작용이 필요한 인포그래픽을 가지고 있을 수도 있고, 어떤 것은 그저 다른 디자인이 필요할 수도 있어요. 이 문제를 해결하는 한 가지 방법은 blogPost.vue 컴포넌트 내부에 많은 if (조건부) 렌더링을 만드는 것이 있습니다. 다른 방법은 동적 컴포넌트를 사용하는 것이죠!!\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"예제\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위에서 시작한 프로젝트를 확장해 나가려고 합니다. 이것은 Medium에서 가져온 블로그 포스트 목록입니다. 현재 이들은 모두 같은 디자인을 가지고 있지만, 동적 컴포넌트를 사용하여 컴포넌트를 깨끗하게 유지하면서 세 가지 다른 디자인을 만들 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기본적인 blogPost.vue 컴포넌트는 다음과 같이 보입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<script setup>\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" props = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"defineProps\"\n        }), \"([\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'post'\"\n        }), \"])\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"openPostWindow\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"url\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"open\"\n        }), \"(url, \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'_blank'\"\n        }), \")\\n}\\n</script>\\n\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"template\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"card\\\"\"\n            }), \" @\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"click\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"openPostWindow(post.mediumUrl)\\\"\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"card__header\\\"\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"img\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":src\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"`https://miro.medium.com/v2/resize:fill:500:200/${post.previewImage.id}`\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"alt\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Post Image\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"post-image\\\"\"\n            }), \" />\"]\n          }), \"\\n\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"card__body\\\"\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h4\"\n            }), \">\"]\n          }), \"\\n        { post.title }\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h4\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"\\n        { post.extendedPreviewContent.subtitle }\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"card__footer\\\"\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"user\\\"\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"user__info\\\"\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"small\"\n            }), \">\"]\n          }), \"\\n            { Math.ceil(post.readingTime) } 분\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"small\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"template\"\n            }), \">\"]\n          })]\n        }), \"\\n\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"style\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"scoped\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"css\",\n            children: [\"\\n \", _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"/* 스타일은 실제 저장소에 있습니다 */\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"style\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-javascript\",\n        children: [\"<script setup>\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { usePostsStore } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./../stores/posts'\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MediumPreview\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./blogDesigns/MediumPreview.vue'\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" postStore = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"usePostsStore\"\n        }), \"()\\n</script>\\n\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"template\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"container\\\"\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"component\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":is\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"MediumPreview\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":post\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"post\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"v-for\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"post in postStore.posts\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":key\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"post.title\\\"\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"component\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"template\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지금까지 잘 진행되고 있어요! 이제 우리는 동적 접근 방식을 사용하고 있습니다. component 키워드를 사용하여 Vue에게 MediumPreview.vue 컴포넌트를 사용하도록 하고 있어요. 결과는 이렇게 나와요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-Vue3DynamicComponents_1.png\",\n        alt: \"2024-05-14-Vue3DynamicComponents_1\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n## 동적이 멋있어지는 때\\n\\n지금까지 우리는 동적 접근 방식만 사용하여 동일한 컴포넌트를 표시했습니다. 이것은 좋은 시작점이지만, 동적 컴포넌트의 진정한 힘을 활용하지 못합니다. 그것은 여러 컴포넌트를 사용할 때에만 얻을 수 있습니다. 그래서 포스트용으로 또 다른 디자인을 추가해 볼까요?\\n저는 단순히 MediumPreview2.vue로 불리는 다른 컴포넌트를 만들었습니다. 보기에는 비슷해 보이지만, 이 예제에서는 중요하지 않습니다. 각 컴포넌트가 코드를 더 깨끗하게 만드는 충분히 다른 컴포넌트임을 상상해 봅시다.\\n\\n이제 부모 컴포넌트는 이렇게 생겼습니다.\\n\\n```js\\n<script setup>\\nimport { usePostsStore } from './../stores/posts'\\n\\nimport MediumPreview from './blogDesigns/MediumPreview.vue'\\nimport MediumPreview2 from './blogDesigns/MediumPreview2.vue'\\n\\nconst postStore = usePostsStore()\\n</script>\\n\\n<template>\\n  <div class=\\\"container\\\">\\n    <component :is=\\\"index % 2 === 0 ? MediumPreview : MediumPreview2\\\" :post=\\\"post\\\" v-for=\\\"(post, index) in postStore.posts\\\" :key=\\\"post.title\\\">\\n    </component>\\n  </div>\\n</template>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"결과는 아래와 같습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-Vue3DynamicComponents_2.png\",\n        alt: \"Vue3 Dynamic Components\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"최종 목표\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"동적 컴포넌트의 일반적인 사용 사례는 사용자가 어떤 종류의 뷰/디자인을 사용하고 싶은지 선택할 수 있는 탭일 수도 있습니다. 따라서 사용자가 보여져야 하는 디자인의 종류를 선택할 수 있는 탭을 포함한 예제를 확장할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-Vue3DynamicComponents_3.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pinia store를 사용하여 쉽게 이루어집니다. 어떤 디자인을 보여줄지의 값을 저장하기 위한 Pinia store를 사용합니다 →\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<script setup>\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { usePostsStore } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./../stores/posts'\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useTabStore } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./../stores/tab'\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MediumPreview\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./blogDesigns/MediumPreview.vue'\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MediumPreview2\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./blogDesigns/MediumPreview2.vue'\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" componentMap = { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MediumPreview\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MediumPreview2\"\n        }), \" }\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" tabStore = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useTabStore\"\n        }), \"()\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" postStore = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"usePostsStore\"\n        }), \"()\\n</script>\\n\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"template\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"container\\\"\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"component\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":is\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"componentMap[tabStore.tab]\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":post\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"post\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"v-for\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"(post, index) in postStore.posts\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":key\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"post.title\\\"\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"component\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"template\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"동적 구성 요소를 설정하는 것은 코드베이스를 간단하게 유지하고 분할하는 효과적인 방법일 수 있어요. 새로운 디자인을 추가하는 것은 완전히 별도의 파일에서 할 수 있어서 현재 구성 요소에 오류와 버그를 도입할 가능성이 줄어들어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 전체 예제 repo를 확인하세요\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 데모 사이트를 확인하세요\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 내용도 참고해보세요:\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"친절한 영어로 🚀\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"작가를 박수로 응원하고 팔로우하세요 👏\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다른 플랫폼 방문하기: Stackademic | CoFeed | Venture\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PlainEnglish.io에서 더 많은 콘텐츠 만나보세요\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}