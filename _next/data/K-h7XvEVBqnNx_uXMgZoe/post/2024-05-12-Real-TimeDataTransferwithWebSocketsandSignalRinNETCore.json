{"pageProps":{"post":{"title":"NET Core에서 웹 소켓과 SignalR을 활용한 실시간 데이터 전송","description":"","date":"2024-05-12 19:05","slug":"2024-05-12-Real-TimeDataTransferwithWebSocketsandSignalRinNETCore","content":"\n\n실시간 데이터 전송은 즉각적인 업데이트와 알림이 필요한 애플리케이션에 꼭 필요합니다. .NET Core에서 WebSockets 및 SignalR은 클라이언트와 서버 간의 실시간 통신을 구현하는 강력한 도구를 제공합니다. 이 안내서에서는 WebSockets 및 SignalR을 사용하여 .NET Core 애플리케이션에서 실시간 데이터 전송을 어떻게 구현하는지 살펴볼 것입니다.\n\nDotNet-FullStack-Dev와 함께 계속해서 학습과 탐험의 여정을 떠나보세요. 더 많은 정보 확인은 https://dotnet-fullstack-dev.blogspot.com을 방문하거나 추가 정보를 얻으려면 연락해주세요.\n\n# WebSockets 및 SignalR이란?\n\n# WebSockets:\n\n\n\nWebSockets는 단일 TCP 연결을 통해 전 이중 통신 채널을 제공하는 프로토콜입니다. 이를 통해 클라이언트와 서버 간에 양방향 통신이 가능하며 HTTP 폴링의 오버헤드 없이 비동기적으로 데이터를 송수신할 수 있습니다.\n\n# WebSockets를 사용해야 하는 이유\n\n- 실시간 통신: WebSockets를 이용하면 실시간 데이터 전송이 가능해지며, 채팅 애플리케이션, 실시간 대시보드, 온라인 게임 플랫폼과 같은 즉각적인 업데이트가 필요한 애플리케이션에 이상적입니다.\n- 효율성: 전통적인 HTTP 폴링이나 롱 폴링 기술과 달리 WebSockets는 지속적인 연결을 유지하여 오버헤드를 줄이고 지연 시간을 최소화하며 네트워크 트래픽을 감소시킵니다.\n- 전 이중 통신: WebSockets는 양쪽으로 동시에 데이터 전송을 지원하여 클라이언트와 서버가 독립적으로 메시지를 송수신할 수 있습니다.\n- 확장성: WebSockets는 대규모 동시 연결을 효율적으로 처리할 수 있어 확장 가능하고 고성능 애플리케이션에 적합합니다.\n\n# WebSockets 대안:\n\n| **대안**                  | **설명**                                                                                                    |\n|-----------------------|---------------------------------------------------------------------------------------------------------|\n| Server-Sent Events    | 서버에서 클라이언트로 단 방향 메시지 스트림을 전송하는 기술로, WebSockets와 유사하지만 단방향 통신만 지원합니다.   |\n| Long Polling           | 클라이언트가 서버에게 요청을 보내고, 서버는 데이터를 준비할 때까지 응답을 지연시키는 방법입니다.                  |\n\n\n\n웹소켓은 실시간 통신에 널리 사용되지만, 유사한 기능을 제공하는 몇 가지 대안이 있습니다:\n\n- Server-Sent Events (SSE): SSE은 서버가 HTTP 연결을 통해 클라이언트로 업데이트를 푸시할 수 있는 단방향 통신 프로토콜입니다. 웹소켓과 달리 SSE는 서버에서 클라이언트로의 통신에만 제한되며 양방향 통신을 지원하지 않습니다.\n- Long Polling: Long Polling은 클라이언트가 서버에 요청을 보내고, 서버가 새로운 데이터가 나타날 때까지 연결을 유지하거나 타임아웃이 발생할 때까지 연결을 열어두는 기술입니다. Long Polling은 실시간 업데이트를 달성할 수 있지만, 연결을 자주 열고 닫기 때문에 웹소켓보다 효율성이 떨어집니다.\n\n# 웹소켓의 장단점:\n\n## 장점:\n\n\n\n- 실시간 업데이트: 웹 소켓을 통해 실시간 통신이 가능하며 클라이언트에 즉시 업데이트를 제공합니다.\n- 효율성: 웹 소켓은 폴링 기술과 비교하여 대기 시간과 네트워크 오버헤드를 줄입니다.\n- 전이중 통신: 양방향 데이터 전송을 지원하여 클라이언트와 서버가 동시에 메시지를 보내고 받을 수 있습니다.\n- 확장성: 웹 소켓은 많은 동시 연결을 효율적으로 처리할 수 있어 확장 가능한 애플리케이션에 적합합니다.\n\n## 단점:\n\n- 복잡성: 웹 소켓 연결을 구현하고 관리하는 것은 전통적인 HTTP 통신보다 더 복잡할 수 있습니다.\n- 브라우저 지원: 최신 브라우저는 웹 소켓을 지원하지만 오래된 브라우저는 지원하지 않을 수 있어 대체 메커니즘이 필요할 수 있습니다.\n- 방화벽 문제: 웹 소켓은 제한적인 방화벽이나 프록시 서버에서 웹 소켓 트래픽을 차단할 수 있는 문제가 있을 수 있습니다.\n\n# SignalR:\n\n\n\nSignalR은 .NET 애플리케이션에서 실시간 웹 기능을 간단하게 만드는 데 사용되는 웹소켓과 기타 전송 매커니즘 위에 구축된 고수준 라이브러리입니다. 이는 연결 관리를 추상화하고 클라이언트에게 메시지를 브로드캐스트하고 클라이언트-서버 통신을 다루기 위한 간단한 API를 제공합니다.\n\n# SignalR을 사용해야 하는 이유:\n\n- 간단한 개발: SignalR은 웹소켓 연결 관리의 복잡성을 감추고 .NET 애플리케이션에서 실시간 기능을 구현하기 위한 간단한 API를 제공합니다. 연결 관리, 메시지 라우팅 및 오류 처리를 처리하여 개발자가 응용프로그램 논리에 집중할 수 있습니다.\n- 크로스 플랫폼 지원: SignalR은 서버 측 .NET 애플리케이션 및 클라이언트 측 JavaScript 프레임워크를 모두 지원하여 웹 애플리케이션, 데스크톱 애플리케이션 및 모바일 앱에서 실시간 기능을 구축하기에 적합합니다.\n- 확장성: SignalR은 애플리케이션과 함께 확장되도록 설계되어 많은 동시 연결을 지원하며 다중 서버로 확장하거나 Azure SignalR 서비스와 같은 클라우드 기반 솔루션을 사용할 수 있는 옵션을 제공합니다.\n- 후행 메커니즘: SignalR은 웹소켓을 지원하지 않는 클라이언트를 위해 Server-Sent Events (SSE) 또는 롱 폴링과 같은 대체 전송 메커니즘으로 자동으로 후행하므로 브라우저 및 기기에 걸쳐 넓은 호환성을 보장합니다.\n\n\n\n신호R이 .NET 애플리케이션에서 실시간 웹 기능을 구현하는 데 인기 있는 선택지라는 것을 알고 계실 겁니다. 그러나 여러 대안들도 비슷한 기능을 제공합니다:\n\n- Raw WebSocket APIs: 개발자들은 .NET이나 다른 프로그래밍 언어에서 제공하는 Raw WebSocket APIs를 활용하여, SignalR이 제공하는 추상화 없이 실시간 통신을 구현할 수 있습니다. 그러나 이 방식은 더 많은 수동 구성을 요구하며, 개발자들에게는 불편할 수도 있습니다.\n- Third-Party Libraries: .NET 애플리케이션에서 실시간 통신을 구현하는 데 사용할 수 있는 외부 라이브러리들이 있습니다. Socket.IO for .NET이나 Fleck과 같은 라이브러리들은 추가 기능과 유연성을 제공하지만, 통합 및 유지보수에 더 많은 노력이 필요할 수 있습니다.\n\n# SignalR의 장단점:\n\n## 장점:\n\n\n\n- 간편한 개발: SignalR은 실시간 기능을 구현하는 데 사용하기 위한 고수준 API를 제공하여 개발 시간과 복잡성을 줄여줍니다.\n- 크로스 플랫폼 지원: SignalR은 웹 브라우저, 데스크톱 애플리케이션 및 모바일 기기를 포함한 다양한 클라이언트를 지원합니다.\n- 확장성: SignalR은 애플리케이션과 함께 확장되도록 설계되어 많은 동시 연결을 지원하고 여러 서버로 확장할 수 있는 옵션을 제공합니다.\n- 후행 메커니즘: SignalR은 웹소켓을 지원하지 않는 클라이언트를 위해 대체 전송 메커니즘으로 자동으로 후행하므로 넓은 호환성을 보장합니다.\n\n## 단점:\n\n- .NET 프레임워크/Core에 대한 의존성: SignalR은 .NET 생태계와 긴밀하게 결합되어 있어 다른 기술로 개발된 애플리케이션에는 적합하지 않을 수 있습니다.\n- 성능 부하: SignalR은 개발을 단순화하지만 원시 웹소켓 구현과 비교해 일부 성능 부하를 도입할 수 있습니다.\n- 복잡성: SignalR은 실시간 통신의 일부 복잡성을 추상화하지만 복잡한 시나리오에서는 추가 구성 및 문제 해결이 필요할 수 있습니다.\n\n# 왜 실시간 데이터 전송을 사용해야 할까요?\n\n\n\n실시간 데이터 전송은 채팅 애플리케이션, 실시간 대시보드 및 모니터링 시스템, 협업 문서 편집 도구, 온라인 게임 플랫폼, 주식 시장 추적 애플리케이션, 라이브 스포츠 점수판과 같이 실시간 업데이트가 필요한 애플리케이션에 필수적입니다.\n\n# SignalR을 사용한 .NET Core 구현\n\n## 단계 1: SignalR 설치\n\n\n\nNuGet Package Manager를 사용하여 SignalR 패키지를 설치하세요:\n\n```js\ndotnet add package Microsoft.AspNetCore.SignalR\n```\n\n## 단계 2: SignalR 허브 만들기\n\n클라이언트 연결을 관리하고 메시지 브로드캐스팅을 처리하는 SignalR 허브를 만드세요.\n\n\n\n```js\nMicrosoft.AspNetCore.SignalR를 사용하여 SignalR을 구성하고 있어요. WebSocket 지원을 활성화하고 허브 엔드포인트를 매핑하려면 Startup 클래스에서 SignalR을 구성하세요.\n\n```js\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSignalR();\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseRouting();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapHub<ChatHub>(\"/chatHub\");\n    });\n}\n```\n\n\n\n## 단계 4: 클라이언트 측 통합\n\n클라이언트 측에 SignalR을 통합하여 연결을 설정하고 실시간 업데이트를 받으세요.\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>SignalR 채팅</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/signalr/5.0.0/signalr.min.js\"></script>\n</head>\n<body>\n    <div id=\"messages\"></div>\n    <input type=\"text\" id=\"messageInput\" />\n    <button onclick=\"sendMessage()\">전송</button>\n\n    <script>\n        const connection = new signalR.HubConnectionBuilder()\n            .withUrl(\"/chatHub\")\n            .build();\n\n        connection.on(\"ReceiveMessage\", (user, message) => {\n            document.getElementById(\"messages\").innerHTML += `<p><strong>${user}</strong>: ${message}</p>`;\n        });\n\n        connection.start().then(() => {\n            console.log(\"SignalR 허브에 연결되었습니다\");\n        }).catch((err) => {\n            console.error(\"SignalR 허브에 연결하는 중 오류가 발생했습니다:\", err);\n        });\n\n        function sendMessage() {\n            const user = \"사용자\"; // 입력값으로부터 사용자 정보 가져오기\n            const message = document.getElementById(\"messageInput\").value;\n            connection.invoke(\"SendMessage\", user, message);\n        }\n    </script>\n</body>\n</html>\n```\n\n이 예제를 확장하여 클라이언트로부터 메시지를 받고 백엔드와 프론트엔드 코드를 사용한 엔드 투 엔드 솔루션을 제공해보죠.\n\n\n\n# Backend: ASP.NET Core Web API with SignalR\n\n## Step 1: SignalR 허브 생성\n\n클라이언트 연결을 관리하고 메시지 브로드캐스팅을 처리하는 SignalR 허브를 생성하세요.\n\n```javascript\nusing Microsoft.AspNetCore.SignalR;\nusing System.Threading.Tasks;\n\npublic class ChatHub : Hub\n{\n    public async Task SendMessage(string user, string message)\n    {\n        await Clients.All.SendAsync(\"ReceiveMessage\", user, message);\n    }\n\n    public void ReceiveMessage(string user, string message)\n    {\n        // 받은 메시지 처리(예: 데이터베이스 저장, 처리 등)\n    }\n}\n```\n\n\n\n## 단계 2: Startup에서 SignalR 구성\n\nStartup 클래스에서 SignalR을 구성하여 WebSocket 지원을 활성화하고 허브 엔드포인트를 매핑합니다.\n\n```js\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSignalR();\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseRouting();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapHub<ChatHub>(\"/chatHub\");\n    });\n}\n```\n\n## 단계 3: 메시지 수신을 위한 컨트롤러 생성\n\n\n\n클라이언트로부터 수신된 메시지를 처리하는 컨트롤러를 만들어보세요.\n\n```js\nusing Microsoft.AspNetCore.Mvc;\n\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class ChatController : ControllerBase\n{\n    private readonly IHubContext<ChatHub> _hubContext;\n\n    public ChatController(IHubContext<ChatHub> hubContext)\n    {\n        _hubContext = hubContext;\n    }\n\n    [HttpPost(\"ReceiveMessage\")]\n    public async Task<IActionResult> ReceiveMessage(string user, string message)\n    {\n        await _hubContext.Clients.All.SendAsync(\"ReceiveMessage\", user, message);\n        return Ok();\n    }\n}\n```\n\n# Frontend: React UI with SignalR\n\n## Step 1: SignalR 클라이언트 라이브러리 설치\n\n\n\nJavaScript SignalR 클라이언트 라이브러리를 npm을 사용해서 설치해주세요.\n\n```js\nnpm install @microsoft/signalr\n```\n\n## 단계 2: WebSocket 연결 생성\n\nSignalR 허브에 대한 WebSocket 연결을 생성하고 들어오는 메시지를 처리하세요.\n\n\n\n```js\nimport React, { useState, useEffect } from 'react';\nimport * as signalR from '@microsoft/signalr';\n\nconst Chat = () => {\n    const [messages, setMessages] = useState([]);\n    const [connection, setConnection] = useState(null);\n\n    useEffect(() => {\n        const newConnection = new signalR.HubConnectionBuilder()\n            .withUrl(\"/chatHub\")\n            .build();\n\n        newConnection.on(\"ReceiveMessage\", (user, message) => {\n            setMessages([...messages, { user, message }]);\n        });\n\n        newConnection.start()\n            .then(() => console.log(\"SignalR 허브에 연결되었습니다.\"))\n            .catch(error => console.error(\"SignalR 허브에 연결 중 오류 발생:\", error));\n\n        setConnection(newConnection);\n    }, []);\n\n    const sendMessage = () => {\n        const user = \"User\"; // 입력에서 사용자 가져오기\n        const message = \"안녕, SignalR!\"; // 입력에서 메시지 가져오기\n        connection.invoke(\"SendMessage\", user, message)\n            .catch(error => console.error(\"메시지 전송 중 오류 발생:\", error));\n    };\n\n    return (\n        <div>\n            <div>\n                {messages.map((message, index) => (\n                    <div key={index}>\n                        <strong>{message.user}</strong>: {message.message}\n                    </div>\n                ))}\n            </div>\n            <input type=\"text\" />\n            <button onClick={sendMessage}>전송</button>\n        </div>\n    );\n};\n\nexport default Chat;\n```\n\n# 결론\n\n이 가이드에서는 .NET Core 애플리케이션에서 웹소켓과 SignalR을 사용하여 실시간 데이터 전송을 구현하는 방법을 살펴보았습니다. SignalR을 활용하면 클라이언트와 서버 간의 실시간 통신을 쉽게 구현할 수 있어서 상호작용적이고 협업이 가능한 웹 애플리케이션을 구축하기에 이상적입니다. 채팅 애플리케이션, 실시간 대시보드, 멀티플레이어 게임을 구축할 때, 사용자에게 실시간 업데이트를 제공하는 데 필요한 도구를 제공하는 SignalR을 사용할 수 있습니다.\n\n이 가이드에서는 .NET Core 백엔드와 React 프런트엔드를 사용하여 SignalR을 통한 실시간 메시징을 구현하는 방법을 안내했습니다. 사용자는 프런트엔드에서 메시지를 보내고, 백엔드 SignalR 허브에서 모든 연결된 클라이언트에게 메시지를 수신 및 브로드캐스트합니다. 이 최종 솔루션은 웹 애플리케이션에 대한 실시간 메시징 경험을 원활하게 제공합니다.\n```\n\n\n\n표 태그를 Markdown 형식으로 변경해주실래요.","ogImage":{"url":"/assets/img/2024-05-12-Real-TimeDataTransferwithWebSocketsandSignalRinNETCore_0.png"},"coverImage":"/assets/img/2024-05-12-Real-TimeDataTransferwithWebSocketsandSignalRinNETCore_0.png","tag":["Tech"],"readingTime":10},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"실시간 데이터 전송은 즉각적인 업데이트와 알림이 필요한 애플리케이션에 꼭 필요합니다. .NET Core에서 WebSockets 및 SignalR은 클라이언트와 서버 간의 실시간 통신을 구현하는 강력한 도구를 제공합니다. 이 안내서에서는 WebSockets 및 SignalR을 사용하여 .NET Core 애플리케이션에서 실시간 데이터 전송을 어떻게 구현하는지 살펴볼 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"DotNet-FullStack-Dev와 함께 계속해서 학습과 탐험의 여정을 떠나보세요. 더 많은 정보 확인은 https://dotnet-fullstack-dev.blogspot.com을 방문하거나 추가 정보를 얻으려면 연락해주세요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"WebSockets 및 SignalR이란?\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"WebSockets:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WebSockets는 단일 TCP 연결을 통해 전 이중 통신 채널을 제공하는 프로토콜입니다. 이를 통해 클라이언트와 서버 간에 양방향 통신이 가능하며 HTTP 폴링의 오버헤드 없이 비동기적으로 데이터를 송수신할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"WebSockets를 사용해야 하는 이유\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"실시간 통신: WebSockets를 이용하면 실시간 데이터 전송이 가능해지며, 채팅 애플리케이션, 실시간 대시보드, 온라인 게임 플랫폼과 같은 즉각적인 업데이트가 필요한 애플리케이션에 이상적입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"효율성: 전통적인 HTTP 폴링이나 롱 폴링 기술과 달리 WebSockets는 지속적인 연결을 유지하여 오버헤드를 줄이고 지연 시간을 최소화하며 네트워크 트래픽을 감소시킵니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"전 이중 통신: WebSockets는 양쪽으로 동시에 데이터 전송을 지원하여 클라이언트와 서버가 독립적으로 메시지를 송수신할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"확장성: WebSockets는 대규모 동시 연결을 효율적으로 처리할 수 있어 확장 가능하고 고성능 애플리케이션에 적합합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"WebSockets 대안:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"| \", _jsx(_components.strong, {\n        children: \"대안\"\n      }), \"                  | \", _jsx(_components.strong, {\n        children: \"설명\"\n      }), \"                                                                                                    |\\n|-----------------------|---------------------------------------------------------------------------------------------------------|\\n| Server-Sent Events    | 서버에서 클라이언트로 단 방향 메시지 스트림을 전송하는 기술로, WebSockets와 유사하지만 단방향 통신만 지원합니다.   |\\n| Long Polling           | 클라이언트가 서버에게 요청을 보내고, 서버는 데이터를 준비할 때까지 응답을 지연시키는 방법입니다.                  |\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"웹소켓은 실시간 통신에 널리 사용되지만, 유사한 기능을 제공하는 몇 가지 대안이 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Server-Sent Events (SSE): SSE은 서버가 HTTP 연결을 통해 클라이언트로 업데이트를 푸시할 수 있는 단방향 통신 프로토콜입니다. 웹소켓과 달리 SSE는 서버에서 클라이언트로의 통신에만 제한되며 양방향 통신을 지원하지 않습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Long Polling: Long Polling은 클라이언트가 서버에 요청을 보내고, 서버가 새로운 데이터가 나타날 때까지 연결을 유지하거나 타임아웃이 발생할 때까지 연결을 열어두는 기술입니다. Long Polling은 실시간 업데이트를 달성할 수 있지만, 연결을 자주 열고 닫기 때문에 웹소켓보다 효율성이 떨어집니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"웹소켓의 장단점:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"장점:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"실시간 업데이트: 웹 소켓을 통해 실시간 통신이 가능하며 클라이언트에 즉시 업데이트를 제공합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"효율성: 웹 소켓은 폴링 기술과 비교하여 대기 시간과 네트워크 오버헤드를 줄입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"전이중 통신: 양방향 데이터 전송을 지원하여 클라이언트와 서버가 동시에 메시지를 보내고 받을 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"확장성: 웹 소켓은 많은 동시 연결을 효율적으로 처리할 수 있어 확장 가능한 애플리케이션에 적합합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단점:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"복잡성: 웹 소켓 연결을 구현하고 관리하는 것은 전통적인 HTTP 통신보다 더 복잡할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"브라우저 지원: 최신 브라우저는 웹 소켓을 지원하지만 오래된 브라우저는 지원하지 않을 수 있어 대체 메커니즘이 필요할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"방화벽 문제: 웹 소켓은 제한적인 방화벽이나 프록시 서버에서 웹 소켓 트래픽을 차단할 수 있는 문제가 있을 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"SignalR:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SignalR은 .NET 애플리케이션에서 실시간 웹 기능을 간단하게 만드는 데 사용되는 웹소켓과 기타 전송 매커니즘 위에 구축된 고수준 라이브러리입니다. 이는 연결 관리를 추상화하고 클라이언트에게 메시지를 브로드캐스트하고 클라이언트-서버 통신을 다루기 위한 간단한 API를 제공합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"SignalR을 사용해야 하는 이유:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"간단한 개발: SignalR은 웹소켓 연결 관리의 복잡성을 감추고 .NET 애플리케이션에서 실시간 기능을 구현하기 위한 간단한 API를 제공합니다. 연결 관리, 메시지 라우팅 및 오류 처리를 처리하여 개발자가 응용프로그램 논리에 집중할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"크로스 플랫폼 지원: SignalR은 서버 측 .NET 애플리케이션 및 클라이언트 측 JavaScript 프레임워크를 모두 지원하여 웹 애플리케이션, 데스크톱 애플리케이션 및 모바일 앱에서 실시간 기능을 구축하기에 적합합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"확장성: SignalR은 애플리케이션과 함께 확장되도록 설계되어 많은 동시 연결을 지원하며 다중 서버로 확장하거나 Azure SignalR 서비스와 같은 클라우드 기반 솔루션을 사용할 수 있는 옵션을 제공합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"후행 메커니즘: SignalR은 웹소켓을 지원하지 않는 클라이언트를 위해 Server-Sent Events (SSE) 또는 롱 폴링과 같은 대체 전송 메커니즘으로 자동으로 후행하므로 브라우저 및 기기에 걸쳐 넓은 호환성을 보장합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"신호R이 .NET 애플리케이션에서 실시간 웹 기능을 구현하는 데 인기 있는 선택지라는 것을 알고 계실 겁니다. 그러나 여러 대안들도 비슷한 기능을 제공합니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Raw WebSocket APIs: 개발자들은 .NET이나 다른 프로그래밍 언어에서 제공하는 Raw WebSocket APIs를 활용하여, SignalR이 제공하는 추상화 없이 실시간 통신을 구현할 수 있습니다. 그러나 이 방식은 더 많은 수동 구성을 요구하며, 개발자들에게는 불편할 수도 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Third-Party Libraries: .NET 애플리케이션에서 실시간 통신을 구현하는 데 사용할 수 있는 외부 라이브러리들이 있습니다. Socket.IO for .NET이나 Fleck과 같은 라이브러리들은 추가 기능과 유연성을 제공하지만, 통합 및 유지보수에 더 많은 노력이 필요할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"SignalR의 장단점:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"장점:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"간편한 개발: SignalR은 실시간 기능을 구현하는 데 사용하기 위한 고수준 API를 제공하여 개발 시간과 복잡성을 줄여줍니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"크로스 플랫폼 지원: SignalR은 웹 브라우저, 데스크톱 애플리케이션 및 모바일 기기를 포함한 다양한 클라이언트를 지원합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"확장성: SignalR은 애플리케이션과 함께 확장되도록 설계되어 많은 동시 연결을 지원하고 여러 서버로 확장할 수 있는 옵션을 제공합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"후행 메커니즘: SignalR은 웹소켓을 지원하지 않는 클라이언트를 위해 대체 전송 메커니즘으로 자동으로 후행하므로 넓은 호환성을 보장합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단점:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \".NET 프레임워크/Core에 대한 의존성: SignalR은 .NET 생태계와 긴밀하게 결합되어 있어 다른 기술로 개발된 애플리케이션에는 적합하지 않을 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"성능 부하: SignalR은 개발을 단순화하지만 원시 웹소켓 구현과 비교해 일부 성능 부하를 도입할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"복잡성: SignalR은 실시간 통신의 일부 복잡성을 추상화하지만 복잡한 시나리오에서는 추가 구성 및 문제 해결이 필요할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"왜 실시간 데이터 전송을 사용해야 할까요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"실시간 데이터 전송은 채팅 애플리케이션, 실시간 대시보드 및 모니터링 시스템, 협업 문서 편집 도구, 온라인 게임 플랫폼, 주식 시장 추적 애플리케이션, 라이브 스포츠 점수판과 같이 실시간 업데이트가 필요한 애플리케이션에 필수적입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"SignalR을 사용한 .NET Core 구현\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 1: SignalR 설치\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NuGet Package Manager를 사용하여 SignalR 패키지를 설치하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"dotnet add package \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Microsoft\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"AspNetCore\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"SignalR\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 2: SignalR 허브 만들기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클라이언트 연결을 관리하고 메시지 브로드캐스팅을 처리하는 SignalR 허브를 만드세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Microsoft\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"AspNetCore\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"SignalR\"\n        }), \"를 사용하여 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SignalR\"\n        }), \"을 구성하고 있어요. \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"WebSocket\"\n        }), \" 지원을 활성화하고 허브 엔드포인트를 매핑하려면 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Startup\"\n        }), \" 클래스에서 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SignalR\"\n        }), \"을 구성하세요.\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"``\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`js\\npublic void ConfigureServices(IServiceCollection services)\\n{\\n    services.AddSignalR();\\n}\\n\\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\\n{\\n    app.UseRouting();\\n\\n    app.UseEndpoints(endpoints =>\\n    {\\n        endpoints.MapHub<ChatHub>(\\\"/chatHub\\\");\\n    });\\n}\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 4: 클라이언트 측 통합\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클라이언트 측에 SignalR을 통합하여 연결을 설정하고 실시간 업데이트를 받으세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DOCTYPE\"\n        }), \" html>\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"html\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"head\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          }), \"SignalR 채팅\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"script\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"src\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"https://cdnjs.cloudflare.com/ajax/libs/signalr/5.0.0/signalr.min.js\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"script\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"head\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"body\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"messages\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"messageInput\\\"\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onclick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"sendMessage()\\\"\"\n            }), \">\"]\n          }), \"전송\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"script\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"javascript\",\n            children: [\"\\n        \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" connection = \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"new\"\n            }), \" signalR.\", _jsx(_components.span, {\n              className: \"hljs-title class_\",\n              children: \"HubConnectionBuilder\"\n            }), \"()\\n            .\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"withUrl\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/chatHub\\\"\"\n            }), \")\\n            .\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"build\"\n            }), \"();\\n\\n        connection.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"on\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"ReceiveMessage\\\"\"\n            }), \", \", _jsxs(_components.span, {\n              className: \"hljs-function\",\n              children: [\"(\", _jsx(_components.span, {\n                className: \"hljs-params\",\n                children: \"user, message\"\n              }), \") =>\"]\n            }), \" {\\n            \", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"document\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"getElementById\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"messages\\\"\"\n            }), \").\", _jsx(_components.span, {\n              className: \"hljs-property\",\n              children: \"innerHTML\"\n            }), \" += \", _jsxs(_components.span, {\n              className: \"hljs-string\",\n              children: [\"`<p><strong>\", _jsx(_components.span, {\n                className: \"hljs-subst\",\n                children: \"${user}\"\n              }), \"</strong>: \", _jsx(_components.span, {\n                className: \"hljs-subst\",\n                children: \"${message}\"\n              }), \"</p>`\"]\n            }), \";\\n        });\\n\\n        connection.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"start\"\n            }), \"().\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"then\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-function\",\n              children: \"() =>\"\n            }), \" {\\n            \", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"console\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"log\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"SignalR 허브에 연결되었습니다\\\"\"\n            }), \");\\n        }).\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"catch\"\n            }), \"(\", _jsxs(_components.span, {\n              className: \"hljs-function\",\n              children: [\"(\", _jsx(_components.span, {\n                className: \"hljs-params\",\n                children: \"err\"\n              }), \") =>\"]\n            }), \" {\\n            \", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"console\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"error\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"SignalR 허브에 연결하는 중 오류가 발생했습니다:\\\"\"\n            }), \", err);\\n        });\\n\\n        \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"function\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"sendMessage\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-params\"\n            }), \") {\\n            \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" user = \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"사용자\\\"\"\n            }), \"; \", _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"// 입력값으로부터 사용자 정보 가져오기\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" message = \", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"document\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"getElementById\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"messageInput\\\"\"\n            }), \").\", _jsx(_components.span, {\n              className: \"hljs-property\",\n              children: \"value\"\n            }), \";\\n            connection.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"invoke\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"SendMessage\\\"\"\n            }), \", user, message);\\n        }\\n    \"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"script\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"body\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"html\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예제를 확장하여 클라이언트로부터 메시지를 받고 백엔드와 프론트엔드 코드를 사용한 엔드 투 엔드 솔루션을 제공해보죠.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Backend: ASP.NET Core Web API with SignalR\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step 1: SignalR 허브 생성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클라이언트 연결을 관리하고 메시지 브로드캐스팅을 처리하는 SignalR 허브를 생성하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-javascript\",\n        children: [\"using \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Microsoft\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"AspNetCore\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"SignalR\"\n        }), \";\\nusing \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"System\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Threading\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Tasks\"\n        }), \";\\n\\npublic \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ChatHub\"\n        }), \" : \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Hub\"\n        }), \"\\n{\\n    public \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Task\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SendMessage\"\n        }), \"(string user, string message)\\n    {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Clients\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"All\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SendAsync\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ReceiveMessage\\\"\"\n        }), \", user, message);\\n    }\\n\\n    public \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReceiveMessage\"\n        }), \"(string user, string message)\\n    {\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 받은 메시지 처리(예: 데이터베이스 저장, 처리 등)\"\n        }), \"\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 2: Startup에서 SignalR 구성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Startup 클래스에서 SignalR을 구성하여 WebSocket 지원을 활성화하고 허브 엔드포인트를 매핑합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"public \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ConfigureServices\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"IServiceCollection\"\n        }), \" services)\\n{\\n    services.\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AddSignalR\"\n        }), \"();\\n}\\n\\npublic \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Configure\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"IApplicationBuilder\"\n        }), \" app, \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"IWebHostEnvironment\"\n        }), \" env)\\n{\\n    app.\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"UseRouting\"\n        }), \"();\\n\\n    app.\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"UseEndpoints\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"endpoints\"\n          }), \" =>\"]\n        }), \"\\n    {\\n        endpoints.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"MapHub\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ChatHub\"\n        }), \">(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/chatHub\\\"\"\n        }), \");\\n    });\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 3: 메시지 수신을 위한 컨트롤러 생성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클라이언트로부터 수신된 메시지를 처리하는 컨트롤러를 만들어보세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"using \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Microsoft\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"AspNetCore\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Mvc\"\n        }), \";\\n\\n[\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Route\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"api/[controller]\\\"\"\n        }), \")]\\n[\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ApiController\"\n        }), \"]\\npublic \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ChatController\"\n        }), \" : \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ControllerBase\"\n        }), \"\\n{\\n    private readonly \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"IHubContext\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ChatHub\"\n        }), \"> _hubContext;\\n\\n    public \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ChatController\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"IHubContext\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ChatHub\"\n        }), \"> hubContext)\\n    {\\n        _hubContext = hubContext;\\n    }\\n\\n    [\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"HttpPost\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ReceiveMessage\\\"\"\n        }), \")]\\n    public \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Task\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"IActionResult\"\n        }), \"> \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReceiveMessage\"\n        }), \"(string user, string message)\\n    {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" _hubContext.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Clients\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"All\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SendAsync\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ReceiveMessage\\\"\"\n        }), \", user, message);\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Ok\"\n        }), \"();\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Frontend: React UI with SignalR\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step 1: SignalR 클라이언트 라이브러리 설치\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JavaScript SignalR 클라이언트 라이브러리를 npm을 사용해서 설치해주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install @microsoft/signalr\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 2: WebSocket 연결 생성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SignalR 허브에 대한 WebSocket 연결을 생성하고 들어오는 메시지를 처리하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useState, useEffect } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" * \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" signalR \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@microsoft/signalr'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Chat\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [messages, setMessages] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"([]);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [connection, setConnection] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" newConnection = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" signalR.\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"HubConnectionBuilder\"\n        }), \"()\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"withUrl\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/chatHub\\\"\"\n        }), \")\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"build\"\n        }), \"();\\n\\n        newConnection.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"on\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ReceiveMessage\\\"\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"user, message\"\n          }), \") =>\"]\n        }), \" {\\n            \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setMessages\"\n        }), \"([...messages, { user, message }]);\\n        });\\n\\n        newConnection.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"start\"\n        }), \"()\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"SignalR 허브에 연결되었습니다.\\\"\"\n        }), \"))\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"catch\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"error\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"SignalR 허브에 연결 중 오류 발생:\\\"\"\n        }), \", error));\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setConnection\"\n        }), \"(newConnection);\\n    }, []);\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sendMessage\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" user = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"User\\\"\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 입력에서 사용자 가져오기\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" message = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"안녕, SignalR!\\\"\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 입력에서 메시지 가져오기\"\n        }), \"\\n        connection.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"invoke\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"SendMessage\\\"\"\n        }), \", user, message)\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"catch\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"error\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"메시지 전송 중 오류 발생:\\\"\"\n        }), \", error));\\n    };\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n                {messages.map((message, index) => (\\n                    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"key\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{index}\"\n            }), \">\"]\n          }), \"\\n                        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"strong\"\n            }), \">\"]\n          }), \"{message.user}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"strong\"\n            }), \">\"]\n          }), \": {message.message}\\n                    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n                ))}\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \" />\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{sendMessage}\"\n            }), \">\"]\n          }), \"전송\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n    );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Chat\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 가이드에서는 .NET Core 애플리케이션에서 웹소켓과 SignalR을 사용하여 실시간 데이터 전송을 구현하는 방법을 살펴보았습니다. SignalR을 활용하면 클라이언트와 서버 간의 실시간 통신을 쉽게 구현할 수 있어서 상호작용적이고 협업이 가능한 웹 애플리케이션을 구축하기에 이상적입니다. 채팅 애플리케이션, 실시간 대시보드, 멀티플레이어 게임을 구축할 때, 사용자에게 실시간 업데이트를 제공하는 데 필요한 도구를 제공하는 SignalR을 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 가이드에서는 .NET Core 백엔드와 React 프런트엔드를 사용하여 SignalR을 통한 실시간 메시징을 구현하는 방법을 안내했습니다. 사용자는 프런트엔드에서 메시지를 보내고, 백엔드 SignalR 허브에서 모든 연결된 클라이언트에게 메시지를 수신 및 브로드캐스트합니다. 이 최종 솔루션은 웹 애플리케이션에 대한 실시간 메시징 경험을 원활하게 제공합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n표 태그를 Markdown 형식으로 변경해주실래요.\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}