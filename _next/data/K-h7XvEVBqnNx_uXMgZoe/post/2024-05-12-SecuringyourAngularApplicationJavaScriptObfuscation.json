{"pageProps":{"post":{"title":"앵귤러 애플리케이션 보안 자바스크립트 난독화","description":"","date":"2024-05-12 20:49","slug":"2024-05-12-SecuringyourAngularApplicationJavaScriptObfuscation","content":"\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*wEYlPHz1sMXAZ6802MPrrw.gif\" />\n\n앵귤러는 주로 클라이언트 측 애플리케이션이기 때문에 코드가 사용자에게 노출됩니다. 적절한 기술을 갖추면 애플리케이션을 역공학하거나 내부 로직을 이해할 수 있습니다. 이를 방지하기 위해 코드를 암호화하여 명확함을 줄이고 이해하기 어렵게 만드는 것이 좋습니다.\n\n<img src=\"/assets/img/2024-05-12-SecuringyourAngularApplicationJavaScriptObfuscation_0.png\" />\n\n기본 제공된 앵귤러를 사용할 때 노출되는 것들:\n\n\n\n- 서비스\n- 구성요소\n- 설정\n\n우리 애플리케이션을 안전하게 보호하기 위해 비즈니스 로직을 보호해야 합니다. 데이터를 안전하게 유지하기 위해 코드베이스를 난독화해야 합니다. 그러나 uglifyjs와 같은 도구를 사용할 수 있습니다. 이러한 도구들은 일정한 수준에서 유용하지만, 난독화가 더 나은 결과를 제공합니다.\n\n# 목차\n\n- JavaScript 난독화란 무엇인가요?\n- JavaScript 난독화 기법:\n- JavaScript 난독화 예시:\n- 설치 및 설정\n- 빌드 구성 업데이트:\n- JavaScript 난독화기에서 제공하는 옵션:\n- 결론\n- 다음 단계?\n\n\n\n# 자바스크립트 난독화란 무엇인가요?\n\n자바스크립트 난독화란 직관적이고 쉽게 읽을 수 있는 자바스크립트 코드를 어렵게 만들어서 이해하기 어렵고 역공학으로 해독하기 어렵도록 변환하는 일련의 코드 변환 기술을 말합니다.\n\n# 자바스크립트 난독화 기술 :\n\n자바스크립트 난독화 기술은 코드를 이해하기 어렵게 하거나 역공학을 어렵게 하거나 변경하기 어렵게 만들기 위해 사용됩니다. 이러한 기술은 코드의 논리와 구조를 흐리게 하면서 기능을 유지하는 것을 목표로 합니다. 여기에 몇 가지 자주 사용되는 자바스크립트 난독화 기술이 있습니다:\n\n\n\n변수 이름 변경:\n\n변수 이름을 설명적이지 않거나 짧거나 한 글자로 변경합니다. 이렇게 하면 각 변수의 목적을 이해하기 어려워집니다.\n\n함수 이름 변경:\n\n변수 이름 변경과 마찬가지로 함수의 이름을 변경하여 그 의도된 기능을 숨길 수 있습니다.\n\n\n\n문자열 암호화:\n\n코드에서 문자열 리터럴을 암호화하고 런타임에서 복호화하는 것입니다. 이는 코드를 이해하려는 누구에게 추가적인 복잡성을 더합니다.\n\n코드 분할:\n\n코드를 여러 작은 함수 또는 파일로 나눈 다음 동적으로 로딩하거나 결합하는 것을 말합니다. 이렇게 하면 코드 구조가 덜 명백해집니다.\n\n\n\n통제 흐름 난독화:\n\n코드의 논리를 혼란스럽게 만들기 위해 불필요하거나 오도하는 제어 흐름 문장(추가 루프 또는 조건문 등)을 도입합니다.\n\n죽은 코드 주입:\n\n사용되지 않거나 관련 없는 코드 조각을 주입하여 혼란을 빚습니다. 이로써 코드의 중요한 부분과 중요하지 않은 부분을 구분하는 것이 어려워집니다.\n\n\n\n문자열 연결:\n\n문자열을 분해하고 실행 중에 동적으로 연결하는 것을 말합니다. 이로 인해 코드에서 사용된 실제 문자열을 식별하기 어려워집니다.\n\n인코딩 및 디코딩:\n\n코드의 일부를 인코딩하고 실행 중에 디코딩하는 작업을 의미합니다. 이 과정에는 Base64 인코딩과 같은 기술을 사용합니다.\n\n\n\n숫자 변형:\n\n숫자를 수학적 표현이나 다른 숫자 표현으로 대체하여 상수 값을 숨기는 것입니다.\n\n디버깅 방지 기술:\n\n디버거 환경에서 애플리케이션이 실행 중인지 감지하는 코드를 포함하고, 코드의 동작을 이에 맞게 변경하는 것입니다.\n\n\n\n# JavaScript 난독화 예제:\n\n다음 코드를 고려해보세요:\n\n```js\nfunction getUserData() {\n  if(!user) {\n      return {};\n    }\n    let data = user.auth.providerData[0];\n    return {\n      name: data.displayName,\n      avatar: data.photoURL,\n      email: data.email,\n      provider: data.providerId,\n      uid: user.auth.uid\n    };\n}\nconsole.log(getUserData());\n```\n\n난독화/압축된 코드:\n\n\n\n```js\nfunction getUserData() {\n  if (!user) return {};\n  let e = user.auth.providerData[0];\n  return {\n    name: e.displayName,\n    avatar: e.photoURL,\n    email: e.email,\n    provider: e.providerId,\n    uid: user.auth.uid\n  };\n}\n\nconsole.log(getUserData());\n```\n\n여기서 코드가 변형되었습니다. 더 자세히 살펴보거나 포매터를 사용하면 코드의 기본 논리를 이해할 수 있습니다.\n\n다른 시나리오에서 억제된 후 :\n\n```js\n(function(_0x49e7cc, _0x35d5f6) {\n  const _0xdfe59 = _0x3b90,\n    _0xd4b26e = _0x49e7cc();\n\n  while (!![]) {\n    try {\n      const _0x20c64f = parseInt(_0xdfe59(0xf9)) / 0x1 * (-parseInt(_0xdfe59(0xfa)) / 0x2) + -parseInt(_0xdfe59(0xf7)) / 0x3 * (parseInt(_0xdfe59(0xfc)) / 0x4) + parseInt(_0xdfe59(0xee)) / 0x5 * (-parseInt(_0xdfe59(0xf1)) / 0x6) + parseInt(_0xdfe59(0xf5)) / 0x7 + \n        -parseInt(_0xdfe59(0xf4)) / 0x8 + -parseInt(_0xdfe59(0xf2)) / 0x9 + parseInt(_0xdfe59(0xf6)) / 0xa * (parseInt(_0xdfe59(0xf0)) / 0xb);\n      \n      if (_0x20c64f === _0x35d5f6) break;\n      else _0xd4b26e['push'](_0xd4b26e['shift']());\n    } catch (_0x29db07) {\n      _0xd4b26e['push'](_0xd4b26e['shift']());\n    }\n  })(_0x53ef, 0xd14a3);\n\nfunction getUserData() {\n  const _0x2d7b7b = _0x3b90;\n  if (!user) return {};\n  let _0x4c86a3 = user[_0x2d7b7b(0xef)]['providerData'][0x0];\n  return {\n    'name': _0x4c86a3['displayName'],\n    'avatar': _0x4c86a3[_0x2d7b7b(0xfb)],\n    'email': _0x4c86a3['email'],\n    'provider': _0x4c86a3[_0x2d7b7b(0xf8)],\n    'uid': user[_0x2d7b7b(0xef)][_0x2d7b7b(0xf3)]\n  };\n}\n\nfunction _0x3b90(_0x40fb4f, _0x21bcc3) {\n  const _0x53ef2b = _0x53ef();\n  return _0x3b90 = function(_0x3b900f, _0x3ce21b) {\n    _0x3b900f = _0x3b900f - 0xee;\n    let _0x3732d2 = _0x53ef2b[_0x3b900f];\n    return _0x3732d2;\n  }, _0x3b90(_0x40fb4f, _0x21bcc3);\n}\n\nfunction _0x53ef() {\n  const _0x2e2efd = ['providerId', '254438AtTuWZ', '10GIuQhB', 'photoURL', '4aVsWJI', '20vNbtpg', 'auth', '3729QVEYgK', '340284BhPkpf', '4165182zMXsCd', 'uid', '13082696dHfPHS', '10353784ybaJZp', '98830ItJwbd', '1125051BYspDY'];\n\n  _0x53ef = function() {\n    return _0x2e2efd;\n  };\n\n  return _0x53ef();\n}\n\nconsole['log'](getUserData());\n```\n\n\n\n위 코드는 이제 훨씬 복잡하고 이해하기 어려워졌는데, 이는 초기 접근 방식보다 훨씬 나은 결과입니다. 사실 더 많은 난독화 수준을 추가할 수 있으며, 이에 대해 더 이야기할 것입니다.\n\n이제 난독화를 위해 우리의 Angular 애플리케이션을 설정해 봅시다.\n\n# 설치 및 설정:\n\n우리는 javascript-obfuscator 및 wepack-obfuscator 플러그인을 사용하여 코드를 난독화할 것입니다.\n\n\n\n귀하는 Angular 어플리케이션에서 위의 패키지들을 다음 명령어를 사용하여 설치할 수 있습니다.\n\n```js\nnpm install --save-dev javascript-obfuscator webpack-obfuscator\n```\n\n웹팩 설정 파일 생성/업데이트 :\n\n위의 플러그인을 설치한 웹팩 설정 파일을 생성하거나 업데이트하려면 기존 웹팩 설정 파일을 다음과 같이 업데이트하실 수 있습니다.\n\n\n\n```js\nvar WebpackObfuscator = require('webpack-obfuscator');\nmodule.exports = {\n module: {\n  ...//옵션\n  },\n```\n\n```js\n// Webpack 플러그인 배열\nplugins: [\n    new WebpackObfuscator ({\n       debugProtection: true\n    }, ['vendor.js'])\n   ]\n}\n```\n\n우리는 앵귤러 애플리케이션의 빌드/배포를 구성할 것이며, 앞서 작성한 위의 webpack.config를 포함하기 위해 custom-webpack 빌더를 사용하는 angular.json을 업데이트할 것입니다.\n\n## 빌드 구성 업데이트:\n\n\n\n아래 명령어를 사용하여 custom-webpack 빌더를 설치하십시오:\n\n- 아래 명령어를 사용하여 앵귤러 커스텀 빌더를 설치하십시오:\n\n```js\nnpm i @angular-builders/custom-webpack\n```\n\n- 아래 코드를 사용하여 angular.json 빌더를 업데이트하십시오.\n\n\n\n```js\n{\n   ...\n   \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-builders/custom-webpack:browser\",\n          \"options\": {\n            \"customWebpackConfig\": {\n              \"path\": \"./extra-webpack.config.js\",\n              \"mergeStrategies\": {\n                \"module.rules\": \"prepend\"\n              },\n            },\n            \"outputPath\": \"dist\",\n            ...          \n          }\n        }\n   }\n}\n```\n\n이렇게 하면 우리 애플리케이션을 빌드하여 응용 프로그램의 난독화된 코드를 생성할 수 있습니다.\n\n난독화된 빌드 생성:\n\nAngular CLI 옵션을 사용하여 애플리케이션을 빌드하면 됩니다:```\n\n\n\n\n```js\nng build\n```\n\n빌드 후 우리 애플리케이션에서 노출된 키가 더 이상 보이지 않는 것을 확인할 수 있습니다.\n\n<img src=\"/assets/img/2024-05-12-SecuringyourAngularApplicationJavaScriptObfuscation_1.png\" />\n\n# JavaScript 난독화기에서 제공하는 옵션:\n\n\n\n위의 예제에서는 debugProtection을 true로 전달했을 때, 앱 내에서 디버깅을 방지하고 디버거를 활성화한 익명 함수를 삽입하는 결과를 가져옵니다.\n\n![이미지](/assets/img/2024-05-12-SecuringyourAngularApplicationJavaScriptObfuscation_2.png)\n\n주요 옵션 몇 가지:\n\n- stringArray:\n문자열 리터럴을 제거하고 특수 배열에 배치합니다. 예를 들어, var m = \"Hello World\";의 \"Hello World\" 문자열은 var m = _0x13a678[0x2];와 같은 것으로 대체됩니다.\n- stringArrayThreshold:\n문자열 리터럴이 stringArray에 삽입될 확률을 조정하는 데 사용할 수 있습니다(0부터 1까지). 기본값은 0.8입니다(1로 유지하면 일부 단계에서 코드가 중단됩니다).\n- debugProtection:\n위에서 보았듯이 디버깅 보호를 활성화합니다. 활성화된 디버깅 보호 간격(밀리초 단위).\n- transformObjectKeys:\n객체 키에 대한 변환을 적용할지 여부를 결정합니다(기본값: false).\n- forceTransformStrings:\n문자열 리터럴 추가가 확률에 기반하기 때문에 특정 키를 강제로 문자열 배열에 추가할 수 있습니다. 정규 표현식 배열을 수락합니다(특수 문자를 포함하는 문자열을 사용할 때 이스케이프 문자를 사용하세요).\n- stringArrayEncoding:\n문자열 리터럴을 base64 또는 rc4를 사용하여 인코딩합니다. 배열을 수락합니다. 아래 구성에서 stringArray 값은 인코딩되지 않으며 일부 값은 base64 및 rc4 인코딩으로 인코딩됩니다:\n\n\n\n```kotlin\nstringArrayEncoding: [\n    'none',\n    'base64',\n    'rc4'\n]\n```\n\n이것들은 유용할 수 있는 몇 가지 인기있는 키들입니다. 관련 정보를 더 읽어보고 여기에서 시도해 볼 수 있어요.\n\n코드 문제가 발생할 경우(정의되지 않은 속성을 가져올 때, 정의되지 않은 속성을 누를 때 또는 prototype이 정의되지 않았을 때 등 몇 가지를 들어봤어요) 아래 구성을 사용해 보세요:\n\n```kotlin\nnew WebpackObfuscator({\n        compact: true,\n        controlFlowFlattening: false,\n        deadCodeInjection: false,\n        debugProtection: false,\n        identifierNamesGenerator: 'hexadecimal',\n        numbersToExpressions: false,\n        renameGlobals: false,\n        selfDefending: false,\n        simplify: false,\n        splitStrings: false,\n        stringArray: true,\n        transformObjectKeys: false,\n        stringArrayCallsTransform: false,\n        stringArrayEncoding: [],\n        stringArrayIndexShift: false,\n        stringArrayRotate: false,\n        stringArrayShuffle: false,\n        stringArrayWrappersCount: 0,\n        stringArrayWrappersChainedCalls: false,\n        stringArrayWrappersParametersMaxCount: 2,\n        stringArrayWrappersType: 'variable',\n        stringArrayThreshold: 1,\n        unicodeEscapeSequence: false,\n        renamePropertiesMode: 'safe',\n        renameProperties: false\n    },['vendor.js']),\n```\n\n\n\nangular 프레임워크 관련 오류를 위해 vendor.js를 포함했어요 (선택 사항입니다). 몇 가지 기본 옵션이 복원되었으며 제거할 수 있어요.\n\n# 결론\n\n우리는 우리의 Angular 코드베이스를 난독화하여 더 안전한 코드로 한 걸음 더 가까워졌어요. 우리가 Angular에 구현했지만, 리액트와 같은 다른 프레임워크에도 구현할 수 있어요.\n\n# 다음은 무엇인가요?\n\n\n\n암호화: AES 및 RSA를 사용하여 네트워크 요청을 암호화하여 데이터를 기밀 유지합니다.\n\n참고 문헌:","ogImage":{"url":"/assets/img/2024-05-12-SecuringyourAngularApplicationJavaScriptObfuscation_0.png"},"coverImage":"/assets/img/2024-05-12-SecuringyourAngularApplicationJavaScriptObfuscation_0.png","tag":["Tech"],"readingTime":9},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h2: \"h2\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"https://miro.medium.com/v2/resize:fit:1400/1*wEYlPHz1sMXAZ6802MPrrw.gif\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앵귤러는 주로 클라이언트 측 애플리케이션이기 때문에 코드가 사용자에게 노출됩니다. 적절한 기술을 갖추면 애플리케이션을 역공학하거나 내부 로직을 이해할 수 있습니다. 이를 방지하기 위해 코드를 암호화하여 명확함을 줄이고 이해하기 어렵게 만드는 것이 좋습니다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-SecuringyourAngularApplicationJavaScriptObfuscation_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기본 제공된 앵귤러를 사용할 때 노출되는 것들:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"서비스\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"구성요소\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"설정\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리 애플리케이션을 안전하게 보호하기 위해 비즈니스 로직을 보호해야 합니다. 데이터를 안전하게 유지하기 위해 코드베이스를 난독화해야 합니다. 그러나 uglifyjs와 같은 도구를 사용할 수 있습니다. 이러한 도구들은 일정한 수준에서 유용하지만, 난독화가 더 나은 결과를 제공합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"목차\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"JavaScript 난독화란 무엇인가요?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"JavaScript 난독화 기법:\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"JavaScript 난독화 예시:\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"설치 및 설정\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"빌드 구성 업데이트:\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"JavaScript 난독화기에서 제공하는 옵션:\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"결론\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다음 단계?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"자바스크립트 난독화란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자바스크립트 난독화란 직관적이고 쉽게 읽을 수 있는 자바스크립트 코드를 어렵게 만들어서 이해하기 어렵고 역공학으로 해독하기 어렵도록 변환하는 일련의 코드 변환 기술을 말합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"자바스크립트 난독화 기술 :\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자바스크립트 난독화 기술은 코드를 이해하기 어렵게 하거나 역공학을 어렵게 하거나 변경하기 어렵게 만들기 위해 사용됩니다. 이러한 기술은 코드의 논리와 구조를 흐리게 하면서 기능을 유지하는 것을 목표로 합니다. 여기에 몇 가지 자주 사용되는 자바스크립트 난독화 기술이 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"변수 이름 변경:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"변수 이름을 설명적이지 않거나 짧거나 한 글자로 변경합니다. 이렇게 하면 각 변수의 목적을 이해하기 어려워집니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수 이름 변경:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"변수 이름 변경과 마찬가지로 함수의 이름을 변경하여 그 의도된 기능을 숨길 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"문자열 암호화:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드에서 문자열 리터럴을 암호화하고 런타임에서 복호화하는 것입니다. 이는 코드를 이해하려는 누구에게 추가적인 복잡성을 더합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드 분할:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드를 여러 작은 함수 또는 파일로 나눈 다음 동적으로 로딩하거나 결합하는 것을 말합니다. 이렇게 하면 코드 구조가 덜 명백해집니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"통제 흐름 난독화:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드의 논리를 혼란스럽게 만들기 위해 불필요하거나 오도하는 제어 흐름 문장(추가 루프 또는 조건문 등)을 도입합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"죽은 코드 주입:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용되지 않거나 관련 없는 코드 조각을 주입하여 혼란을 빚습니다. 이로써 코드의 중요한 부분과 중요하지 않은 부분을 구분하는 것이 어려워집니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"문자열 연결:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"문자열을 분해하고 실행 중에 동적으로 연결하는 것을 말합니다. 이로 인해 코드에서 사용된 실제 문자열을 식별하기 어려워집니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"인코딩 및 디코딩:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드의 일부를 인코딩하고 실행 중에 디코딩하는 작업을 의미합니다. 이 과정에는 Base64 인코딩과 같은 기술을 사용합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"숫자 변형:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"숫자를 수학적 표현이나 다른 숫자 표현으로 대체하여 상수 값을 숨기는 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"디버깅 방지 기술:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"디버거 환경에서 애플리케이션이 실행 중인지 감지하는 코드를 포함하고, 코드의 동작을 이에 맞게 변경하는 것입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"JavaScript 난독화 예제:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 코드를 고려해보세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getUserData\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \"(!user) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {};\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" data = user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"auth\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"providerData\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"];\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"displayName\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"avatar\"\n        }), \": data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"photoURL\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"email\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"provider\"\n        }), \": data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"providerId\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"uid\"\n        }), \": user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"auth\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"uid\"\n        }), \"\\n    };\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getUserData\"\n        }), \"());\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"난독화/압축된 코드:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getUserData\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!user) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {};\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" e = user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"auth\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"providerData\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"];\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"displayName\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"avatar\"\n        }), \": e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"photoURL\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"email\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"provider\"\n        }), \": e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"providerId\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"uid\"\n        }), \": user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"auth\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"uid\"\n        }), \"\\n  };\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getUserData\"\n        }), \"());\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 코드가 변형되었습니다. 더 자세히 살펴보거나 포매터를 사용하면 코드의 기본 논리를 이해할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다른 시나리오에서 억제된 후 :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"_0x49e7cc, _0x35d5f6\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" _0xdfe59 = _0x3b90,\\n    _0xd4b26e = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0x49e7cc\"\n        }), \"();\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"while\"\n        }), \" (!![]) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" _0x20c64f = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"parseInt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0xdfe59\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xf9\"\n        }), \")) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x1\"\n        }), \" * (-\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"parseInt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0xdfe59\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xfa\"\n        }), \")) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x2\"\n        }), \") + -\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"parseInt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0xdfe59\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xf7\"\n        }), \")) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x3\"\n        }), \" * (\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"parseInt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0xdfe59\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xfc\"\n        }), \")) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x4\"\n        }), \") + \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"parseInt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0xdfe59\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xee\"\n        }), \")) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x5\"\n        }), \" * (-\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"parseInt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0xdfe59\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xf1\"\n        }), \")) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x6\"\n        }), \") + \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"parseInt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0xdfe59\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xf5\"\n        }), \")) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x7\"\n        }), \" + \\n        -\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"parseInt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0xdfe59\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xf4\"\n        }), \")) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x8\"\n        }), \" + -\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"parseInt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0xdfe59\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xf2\"\n        }), \")) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x9\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"parseInt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0xdfe59\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xf6\"\n        }), \")) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xa\"\n        }), \" * (\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"parseInt\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0xdfe59\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xf0\"\n        }), \")) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xb\"\n        }), \");\\n      \\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (_0x20c64f === _0x35d5f6) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"break\"\n        }), \";\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" _0xd4b26e[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'push'\"\n        }), \"](_0xd4b26e[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'shift'\"\n        }), \"]());\\n    } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"catch\"\n        }), \" (_0x29db07) {\\n      _0xd4b26e[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'push'\"\n        }), \"](_0xd4b26e[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'shift'\"\n        }), \"]());\\n    }\\n  })(_0x53ef, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xd14a3\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getUserData\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" _0x2d7b7b = _0x3b90;\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!user) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {};\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" _0x4c86a3 = user[\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0x2d7b7b\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xef\"\n        }), \")][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'providerData'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x0\"\n        }), \"];\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'name'\"\n        }), \": _0x4c86a3[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'displayName'\"\n        }), \"],\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'avatar'\"\n        }), \": _0x4c86a3[\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0x2d7b7b\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xfb\"\n        }), \")],\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'email'\"\n        }), \": _0x4c86a3[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'email'\"\n        }), \"],\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'provider'\"\n        }), \": _0x4c86a3[\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0x2d7b7b\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xf8\"\n        }), \")],\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'uid'\"\n        }), \": user[\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0x2d7b7b\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xef\"\n        }), \")][\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0x2d7b7b\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xf3\"\n        }), \")]\\n  };\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0x3b90\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"_0x40fb4f, _0x21bcc3\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" _0x53ef2b = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0x53ef\"\n        }), \"();\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" _0x3b90 = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"_0x3b900f, _0x3ce21b\"\n        }), \") {\\n    _0x3b900f = _0x3b900f - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xee\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" _0x3732d2 = _0x53ef2b[_0x3b900f];\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" _0x3732d2;\\n  }, \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0x3b90\"\n        }), \"(_0x40fb4f, _0x21bcc3);\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0x53ef\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" _0x2e2efd = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'providerId'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'254438AtTuWZ'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'10GIuQhB'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'photoURL'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'4aVsWJI'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'20vNbtpg'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'auth'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'3729QVEYgK'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'340284BhPkpf'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'4165182zMXsCd'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'uid'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'13082696dHfPHS'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'10353784ybaJZp'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'98830ItJwbd'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'1125051BYspDY'\"\n        }), \"];\\n\\n  _0x53ef = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" _0x2e2efd;\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_0x53ef\"\n        }), \"();\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'log'\"\n        }), \"](\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getUserData\"\n        }), \"());\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 코드는 이제 훨씬 복잡하고 이해하기 어려워졌는데, 이는 초기 접근 방식보다 훨씬 나은 결과입니다. 사실 더 많은 난독화 수준을 추가할 수 있으며, 이에 대해 더 이야기할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 난독화를 위해 우리의 Angular 애플리케이션을 설정해 봅시다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"설치 및 설정:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 javascript-obfuscator 및 wepack-obfuscator 플러그인을 사용하여 코드를 난독화할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"귀하는 Angular 어플리케이션에서 위의 패키지들을 다음 명령어를 사용하여 설치할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install --save-dev javascript-obfuscator webpack-obfuscator\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"웹팩 설정 파일 생성/업데이트 :\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위의 플러그인을 설치한 웹팩 설정 파일을 생성하거나 업데이트하려면 기존 웹팩 설정 파일을 다음과 같이 업데이트하실 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"WebpackObfuscator\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'webpack-obfuscator'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = {\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"module\"\n        }), \": {\\n  ...\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//옵션\"\n        }), \"\\n  },\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Webpack 플러그인 배열\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"plugins\"\n        }), \": [\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"WebpackObfuscator\"\n        }), \" ({\\n       \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"debugProtection\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n    }, [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'vendor.js'\"\n        }), \"])\\n   ]\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 앵귤러 애플리케이션의 빌드/배포를 구성할 것이며, 앞서 작성한 위의 webpack.config를 포함하기 위해 custom-webpack 빌더를 사용하는 angular.json을 업데이트할 것입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"빌드 구성 업데이트:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 명령어를 사용하여 custom-webpack 빌더를 설치하십시오:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"아래 명령어를 사용하여 앵귤러 커스텀 빌더를 설치하십시오:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm i @angular-builders/custom-webpack\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"아래 코드를 사용하여 angular.json 빌더를 업데이트하십시오.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"{\\n   ...\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"architect\\\"\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"build\\\"\"\n        }), \": {\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"builder\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@angular-builders/custom-webpack:browser\\\"\"\n        }), \",\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"options\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"customWebpackConfig\\\"\"\n        }), \": {\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"path\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./extra-webpack.config.js\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"mergeStrategies\\\"\"\n        }), \": {\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"module.rules\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prepend\\\"\"\n        }), \"\\n              },\\n            },\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"outputPath\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dist\\\"\"\n        }), \",\\n            ...          \\n          }\\n        }\\n   }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이렇게 하면 우리 애플리케이션을 빌드하여 응용 프로그램의 난독화된 코드를 생성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"난독화된 빌드 생성:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Angular CLI 옵션을 사용하여 애플리케이션을 빌드하면 됩니다:```\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"ng build\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"빌드 후 우리 애플리케이션에서 노출된 키가 더 이상 보이지 않는 것을 확인할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-SecuringyourAngularApplicationJavaScriptObfuscation_1.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"JavaScript 난독화기에서 제공하는 옵션:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위의 예제에서는 debugProtection을 true로 전달했을 때, 앱 내에서 디버깅을 방지하고 디버거를 활성화한 익명 함수를 삽입하는 결과를 가져옵니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-SecuringyourAngularApplicationJavaScriptObfuscation_2.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"주요 옵션 몇 가지:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"stringArray:\\n문자열 리터럴을 제거하고 특수 배열에 배치합니다. 예를 들어, var m = \\\"Hello World\\\";의 \\\"Hello World\\\" 문자열은 var m = _0x13a678[0x2];와 같은 것으로 대체됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"stringArrayThreshold:\\n문자열 리터럴이 stringArray에 삽입될 확률을 조정하는 데 사용할 수 있습니다(0부터 1까지). 기본값은 0.8입니다(1로 유지하면 일부 단계에서 코드가 중단됩니다).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"debugProtection:\\n위에서 보았듯이 디버깅 보호를 활성화합니다. 활성화된 디버깅 보호 간격(밀리초 단위).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"transformObjectKeys:\\n객체 키에 대한 변환을 적용할지 여부를 결정합니다(기본값: false).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"forceTransformStrings:\\n문자열 리터럴 추가가 확률에 기반하기 때문에 특정 키를 강제로 문자열 배열에 추가할 수 있습니다. 정규 표현식 배열을 수락합니다(특수 문자를 포함하는 문자열을 사용할 때 이스케이프 문자를 사용하세요).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"stringArrayEncoding:\\n문자열 리터럴을 base64 또는 rc4를 사용하여 인코딩합니다. 배열을 수락합니다. 아래 구성에서 stringArray 값은 인코딩되지 않으며 일부 값은 base64 및 rc4 인코딩으로 인코딩됩니다:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [\"stringArrayEncoding: [\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'none'\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'base64'\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rc4'\"\n        }), \"\\n]\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것들은 유용할 수 있는 몇 가지 인기있는 키들입니다. 관련 정보를 더 읽어보고 여기에서 시도해 볼 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드 문제가 발생할 경우(정의되지 않은 속성을 가져올 때, 정의되지 않은 속성을 누를 때 또는 prototype이 정의되지 않았을 때 등 몇 가지를 들어봤어요) 아래 구성을 사용해 보세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [\"new WebpackObfuscator({\\n        compact: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n        controlFlowFlattening: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        deadCodeInjection: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        debugProtection: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        identifierNamesGenerator: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'hexadecimal'\"\n        }), \",\\n        numbersToExpressions: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        renameGlobals: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        selfDefending: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        simplify: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        splitStrings: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        stringArray: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n        transformObjectKeys: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        stringArrayCallsTransform: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        stringArrayEncoding: [],\\n        stringArrayIndexShift: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        stringArrayRotate: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        stringArrayShuffle: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        stringArrayWrappersCount: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\\n        stringArrayWrappersChainedCalls: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        stringArrayWrappersParametersMaxCount: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\\n        stringArrayWrappersType: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'variable'\"\n        }), \",\\n        stringArrayThreshold: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\\n        unicodeEscapeSequence: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        renamePropertiesMode: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'safe'\"\n        }), \",\\n        renameProperties: \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"\\n    },[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'vendor.js'\"\n        }), \"]),\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"angular 프레임워크 관련 오류를 위해 vendor.js를 포함했어요 (선택 사항입니다). 몇 가지 기본 옵션이 복원되었으며 제거할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 우리의 Angular 코드베이스를 난독화하여 더 안전한 코드로 한 걸음 더 가까워졌어요. 우리가 Angular에 구현했지만, 리액트와 같은 다른 프레임워크에도 구현할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"다음은 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"암호화: AES 및 RSA를 사용하여 네트워크 요청을 암호화하여 데이터를 기밀 유지합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참고 문헌:\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}