{"pageProps":{"post":{"title":"브라우저가 팝오버 API 지원을 시작했습니다 빠른 안내","description":"","date":"2024-05-15 15:32","slug":"2024-05-15-BrowserBeginsSupportforPopoverAPIAQuickGuide","content":"\n\n## 새로운 팝오버 API로 웹 개발을 간소화하세요\n\n![이미지](/assets/img/2024-05-15-BrowserBeginsSupportforPopoverAPIAQuickGuide_0.png)\n\n저의 뉴스레터에 원문이 게재되었습니다.\n\n팝오버는 일시적으로 부유하는 오버레이 레이어에 추가 콘텐츠나 인터랙티브 요소를 표시하는 데 사용되는 범용 UI 구성요소입니다. 과거에는 이를 구현하기 위해 추가 작업이 필요했습니다.\n\n\n\n거의 모든 주요 브라우저에서 이제 Popover API를 지원합니다. 이 API는 추가 라이브러리 없이 이러한 요소를 생성하고 관리하는 표준화된 방법을 제공합니다.\n\n# popover Global Attribute\n\nHTMLElement에 popover 속성을 추가하면 해당 요소가 팝오버로 변환됩니다. 이 팝오버 요소는 초기에 display: none을 사용하여 숨겨져 있지만 아래에서 설명하는대로 활성화될 때 표시됩니다.\n\n활성화되면 팝오버는 다른 모든 요소 위에 표시되며 부모 요소의 위치 또는 오버플로 스타일에 영향을 받지 않습니다.\n\n\n\n팝오버 속성은 \"auto\" (기본값) 또는 \"manual\" 값을 가질 수 있습니다. 자동 상태의 팝오버는 팝오버 영역 외부를 선택하여 \"경량 해제\" 할 수 있으며 일반적으로 한 번에 화면에 하나의 팝오버만 표시됩니다. 이에 반해, 수동 팝오버는 항상 명시적으로 숨겨져야 하지만 메뉴 내의 중첩된 팝오버를 허용합니다.\n\n![팝오버 이미지](/assets/img/2024-05-15-BrowserBeginsSupportforPopoverAPIAQuickGuide_1.png)\n\n# 활성화 방법\n\n생성하는 두 가지 방법이 있습니다:\n\n\n\n## HTML 선언\n\n```js\n<button popovertarget=\"mypopover\" popovertargetaction=\"toggle\">팝오버 토글</button>\n<div id=\"mypopover\" popover>팝오버 내용</div>\n```\n\n여기서 `popovertarget`은 새롭게 추가된 속성으로, `button` 또는 `input` 요소를 팝오버 제어 버튼으로 변환합니다. 이 속성은 제어하는 팝오버 요소의 ID를 값으로 갖습니다.\n\n비슷하게, `popovertargetaction`도 새롭게 추가된 속성으로, hide, show, toggle을 받습니다. 기본값은 toggle이며, 생략 가능합니다. 이 속성은 팝오버 요소에 대한 제어 버튼의 작업을 지정합니다.\n\n\n\n## JavaScript API\n\n```js\n// 팝오버 엘리먼트의 표시 상태를 토글합니다.\nHTMLElement.togglePopover();\n\n// 팝오버 엘리먼트를 상위 레이어에 추가하여 표시합니다.\nHTMLElement.showPopover();\n\n// 팝오버 엘리먼트를 상위 레이어에서 제거하고 display: none으로 스타일링하여 숨깁니다.\nHTMLElement.hidePopover();\n```\n\n팝오버 속성을 가진 엘리먼트에 이러한 함수를 호출하면 원하는 효과를 빠르게 얻을 수 있습니다.\n\n# 이벤트\n\n\n\n팝오버 요소의 상태가 표시되거나 숨겨지는 경우, 몇 가지 작업을 수행해야 할 수도 있습니다. 브라우저는 다음과 같이 구성된 beforetoggle 이벤트와 toggle 이벤트를 제공합니다:\n\n```js\ninterface ToggleEvent extends Event {\n    readonly newState: string;\n    readonly oldState: string;\n}\n```\n\n여기서 newState와 oldState의 값은 모두 \"open\" 또는 \"closed\"입니다. 하지만 전자는 요소가 전이되는 상태를 나타내고, 후자는 요소가 전환되는 상태를 나타냅니다.\n\n자세히 살펴보겠습니다:\n\n\n\n## beforetoggle 이벤트\n\n팝오버 요소의 상태가 보이는 상태와 숨겨진 상태 사이를 전환할 때 또는 그 반대로 전환하기 전에 발생합니다.\n\n```js\nconst popover = document.getElementById(\"mypopover\");\n\n// ...\n\npopover.addEventListener(\"beforetoggle\", (event) => {\n  if (event.newState === \"open\") {\n    console.log(\"팝오버가 표시됩니다\");\n  } else {\n    console.log(\"팝오버가 숨겨집니다\");\n  }\n});\n\npopover.showPopover();\npopover.hidePopover();\n// `beforetoggle` 이벤트는 한 번만 발생합니다\n```\n\n여러 개의 beforetoggle 이벤트가 발생하는 경우, 이벤트 루프가 한 번 순환하기 전에 모든 이벤트가 발생하는 것이 아니라 하나의 이벤트만 발생한다는 점을 유의하십시오.\n\n\n\n## 토글 이벤트\n\n팝오버 요소의 상태가 표시되거나 숨겨질 때 또는 반대로 변경된 직후에 발생합니다. 이 이벤트는 이미 디테일 요소의 상태 변화를 신호로 보내는 데 사용됩니다.\n\n```js\nconst popover = document.getElementById(\"mypopover\");\n\n// ...\n\npopover.addEventListener(\"toggle\", (event) => {\n  if (event.newState === \"open\") {\n    console.log(\"팝오버가 표시되었습니다\");\n  } else {\n    console.log(\"팝오버가 숨겨졌습니다\");\n  }\n});\n\npopover.showPopover();\npopover.hidePopover();\n// `toggle` 이벤트는 한 번만 발생함\n```\n\n마찬가지로, 토글 이벤트는 병합됩니다.\n\n\n\n# CSS 특징\n\n팝 오버의 스타일을 사용자 정의하고 싶을 수 있습니다. 브라우저에서 제공하는 다음과 같은 특징들이 있습니다:\n\n## ::backdrop\n\n::backdrop 의사 요소는 팝 오버 요소 바로 뒤에 배치되는 전체 화면 요소로, 원하는 경우 페이지 내용 뒤에 팝 오버를 가리는 효과(예: 흐린 효과)를 추가할 수 있습니다.\n\n\n\n```\n<img src=\"/assets/img/2024-05-15-BrowserBeginsSupportforPopoverAPIAQuickGuide_2.png\" />\n\n## :popover-open\n\nThe :popover-open pseudo-class matches a popover element only when it is in the showing state — it can be used to style popover elements when they are showing.\n\n## [popover]\n```\n\n\n\nPopover의 기본 CSS 스타일을 다음과 같이 설정할 수도 있어요:\n\n![image](/assets/img/2024-05-15-BrowserBeginsSupportforPopoverAPIAQuickGuide_3.png)\n\n# 결론\n\nPopover API는 HTML과 Javascript에서 기다려온 기능으로, 우리에게 네이티브하고 유연한 솔루션을 제공합니다. 즐거운 코딩 되세요!\n\n\n\n만약 이 내용이 도움이 되었다면, 웹 개발에 대한 더 많은 통찰을 얻기 위해 제 뉴스레터 구독을 고려해 주세요. 읽어 주셔서 감사합니다!\n\n# 간단한 영어로 🚀\n\nIn Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 마지막으로 가기 전에:\n\n- 작가를 박수와 팔로우해 주세요 👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed\n- 알고리즘 콘텐츠를 다루게 하는 블로깅 플랫폼에 지쳤나요? Differ를 시도해 보세요\n- PlainEnglish.io에서 더 많은 콘텐츠를 즐기세요","ogImage":{"url":"/assets/img/2024-05-15-BrowserBeginsSupportforPopoverAPIAQuickGuide_0.png"},"coverImage":"/assets/img/2024-05-15-BrowserBeginsSupportforPopoverAPIAQuickGuide_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"새로운 팝오버 API로 웹 개발을 간소화하세요\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-BrowserBeginsSupportforPopoverAPIAQuickGuide_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저의 뉴스레터에 원문이 게재되었습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"팝오버는 일시적으로 부유하는 오버레이 레이어에 추가 콘텐츠나 인터랙티브 요소를 표시하는 데 사용되는 범용 UI 구성요소입니다. 과거에는 이를 구현하기 위해 추가 작업이 필요했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"거의 모든 주요 브라우저에서 이제 Popover API를 지원합니다. 이 API는 추가 라이브러리 없이 이러한 요소를 생성하고 관리하는 표준화된 방법을 제공합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"popover Global Attribute\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HTMLElement에 popover 속성을 추가하면 해당 요소가 팝오버로 변환됩니다. 이 팝오버 요소는 초기에 display: none을 사용하여 숨겨져 있지만 아래에서 설명하는대로 활성화될 때 표시됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"활성화되면 팝오버는 다른 모든 요소 위에 표시되며 부모 요소의 위치 또는 오버플로 스타일에 영향을 받지 않습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"팝오버 속성은 \\\"auto\\\" (기본값) 또는 \\\"manual\\\" 값을 가질 수 있습니다. 자동 상태의 팝오버는 팝오버 영역 외부를 선택하여 \\\"경량 해제\\\" 할 수 있으며 일반적으로 한 번에 화면에 하나의 팝오버만 표시됩니다. 이에 반해, 수동 팝오버는 항상 명시적으로 숨겨져야 하지만 메뉴 내의 중첩된 팝오버를 허용합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-BrowserBeginsSupportforPopoverAPIAQuickGuide_1.png\",\n        alt: \"팝오버 이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"활성화 방법\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"생성하는 두 가지 방법이 있습니다:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"HTML 선언\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<button popovertarget=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"mypopover\\\"\"\n        }), \" popovertargetaction=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"toggle\\\"\"\n        }), \">팝오버 토글</button>\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"mypopover\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"popover\"\n            }), \">\"]\n          }), \"팝오버 내용\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"여기서 \", _jsx(_components.code, {\n        children: \"popovertarget\"\n      }), \"은 새롭게 추가된 속성으로, \", _jsx(_components.code, {\n        children: \"button\"\n      }), \" 또는 \", _jsx(_components.code, {\n        children: \"input\"\n      }), \" 요소를 팝오버 제어 버튼으로 변환합니다. 이 속성은 제어하는 팝오버 요소의 ID를 값으로 갖습니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"비슷하게, \", _jsx(_components.code, {\n        children: \"popovertargetaction\"\n      }), \"도 새롭게 추가된 속성으로, hide, show, toggle을 받습니다. 기본값은 toggle이며, 생략 가능합니다. 이 속성은 팝오버 요소에 대한 제어 버튼의 작업을 지정합니다.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"JavaScript API\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 팝오버 엘리먼트의 표시 상태를 토글합니다.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"HTMLElement\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"togglePopover\"\n        }), \"();\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 팝오버 엘리먼트를 상위 레이어에 추가하여 표시합니다.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"HTMLElement\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"showPopover\"\n        }), \"();\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 팝오버 엘리먼트를 상위 레이어에서 제거하고 display: none으로 스타일링하여 숨깁니다.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"HTMLElement\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hidePopover\"\n        }), \"();\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"팝오버 속성을 가진 엘리먼트에 이러한 함수를 호출하면 원하는 효과를 빠르게 얻을 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"이벤트\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"팝오버 요소의 상태가 표시되거나 숨겨지는 경우, 몇 가지 작업을 수행해야 할 수도 있습니다. 브라우저는 다음과 같이 구성된 beforetoggle 이벤트와 toggle 이벤트를 제공합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"interface \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ToggleEvent\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Event\"\n        }), \" {\\n    readonly \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"newState\"\n        }), \": string;\\n    readonly \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"oldState\"\n        }), \": string;\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 newState와 oldState의 값은 모두 \\\"open\\\" 또는 \\\"closed\\\"입니다. 하지만 전자는 요소가 전이되는 상태를 나타내고, 후자는 요소가 전환되는 상태를 나타냅니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자세히 살펴보겠습니다:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"beforetoggle 이벤트\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"팝오버 요소의 상태가 보이는 상태와 숨겨진 상태 사이를 전환할 때 또는 그 반대로 전환하기 전에 발생합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" popover = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"mypopover\\\"\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// ...\"\n        }), \"\\n\\npopover.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"beforetoggle\\\"\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"event\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"newState\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"open\\\"\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"팝오버가 표시됩니다\\\"\"\n        }), \");\\n  } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"팝오버가 숨겨집니다\\\"\"\n        }), \");\\n  }\\n});\\n\\npopover.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"showPopover\"\n        }), \"();\\npopover.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hidePopover\"\n        }), \"();\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// `beforetoggle` 이벤트는 한 번만 발생합니다\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여러 개의 beforetoggle 이벤트가 발생하는 경우, 이벤트 루프가 한 번 순환하기 전에 모든 이벤트가 발생하는 것이 아니라 하나의 이벤트만 발생한다는 점을 유의하십시오.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"토글 이벤트\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"팝오버 요소의 상태가 표시되거나 숨겨질 때 또는 반대로 변경된 직후에 발생합니다. 이 이벤트는 이미 디테일 요소의 상태 변화를 신호로 보내는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" popover = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"mypopover\\\"\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// ...\"\n        }), \"\\n\\npopover.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"toggle\\\"\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"event\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"newState\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"open\\\"\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"팝오버가 표시되었습니다\\\"\"\n        }), \");\\n  } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"팝오버가 숨겨졌습니다\\\"\"\n        }), \");\\n  }\\n});\\n\\npopover.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"showPopover\"\n        }), \"();\\npopover.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hidePopover\"\n        }), \"();\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// `toggle` 이벤트는 한 번만 발생함\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마찬가지로, 토글 이벤트는 병합됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"CSS 특징\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"팝 오버의 스타일을 사용자 정의하고 싶을 수 있습니다. 브라우저에서 제공하는 다음과 같은 특징들이 있습니다:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"::backdrop\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"::backdrop 의사 요소는 팝 오버 요소 바로 뒤에 배치되는 전체 화면 요소로, 원하는 경우 페이지 내용 뒤에 팝 오버를 가리는 효과(예: 흐린 효과)를 추가할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<img src=\\\"/assets/img/2024-05-15-BrowserBeginsSupportforPopoverAPIAQuickGuide_2.png\\\" />\\n\\n## :popover-open\\n\\nThe :popover-open pseudo-class matches a popover element only when it is in the showing state — it can be used to style popover elements when they are showing.\\n\\n## [popover]\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Popover의 기본 CSS 스타일을 다음과 같이 설정할 수도 있어요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-BrowserBeginsSupportforPopoverAPIAQuickGuide_3.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Popover API는 HTML과 Javascript에서 기다려온 기능으로, 우리에게 네이티브하고 유연한 솔루션을 제공합니다. 즐거운 코딩 되세요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 이 내용이 도움이 되었다면, 웹 개발에 대한 더 많은 통찰을 얻기 위해 제 뉴스레터 구독을 고려해 주세요. 읽어 주셔서 감사합니다!\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"간단한 영어로 🚀\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 마지막으로 가기 전에:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"작가를 박수와 팔로우해 주세요 👏️️\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"알고리즘 콘텐츠를 다루게 하는 블로깅 플랫폼에 지쳤나요? Differ를 시도해 보세요\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PlainEnglish.io에서 더 많은 콘텐츠를 즐기세요\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}