{"pageProps":{"post":{"title":"React 19 데이터 관리 라이브러리에 미치는 영향","description":"","date":"2024-05-12 22:57","slug":"2024-05-12-React19ImpactonDataManagementLibraries","content":"\n\n![이미지](/assets/img/2024-05-12-React19ImpactonDataManagementLibraries_0.png)\n\nReact 19에서는 데이터 처리 방식에 주로 초점을 맞춘 많은 새로운 기능이 도입되었습니다. 네, 이제 React는 효율적인 데이터 가져오기 및 데이터 변경을 처리하기 위한 많은 훅을 제공합니다. 여기에 모두 빠르게 나열해 보겠습니다.\n\n새로운 훅:\n- 많은 향상된 점:\n\n액션 소개:\n\n\n\nReact에서의 액션은 사용자가 UI와 상호작용한 후 수행하려는 모든 것을 의미합니다.\n예: 버튼을 클릭하는 것이 액션입니다. 양식을 제출하는 것도 액션입니다. 그리고 계속 나열됩니다.\n\n이전에는 useEffect, useState, useMemo과 같은 여러 후크를 결합하여 작업을 수행했습니다.\n\n하지만 이제 React에서 직관적인 API를 도입하여 더 이상 보일러플레이트 코드를 해결하기 위해 사용할 필요가 없습니다.\n\n간단한 예로 사용자 세부정보 저장을 살펴봅시다:\n\n\n\n```js\nfunction UpdateUser() {\n    const [status, setStatus] = useState(\"idle\");\n    const saveUser = (userData) => {\n        setStatus(\"saving\");\n        service.saveUser(userData)\n        .then(() => {\n            setStatus(\"idle\");\n            redirect(\"/userdetail\");\n        }).catch(() => {\n            setStatus(\"error\");\n        })\n    }\n\n   return (\n        <>\n            {status == \"saving\" ? \"저장 중....\" : \"\"}\n            <button onClick={() => saveUser()}>사용자 저장</button>\n        </>\n   )\n}\n```\n\nWith action:\n\n```js\nfunction UpdateUser() {\n    const [isPending, startTransition] = useTransition();\n    const [error, setError] = useState();\n    const saveUser = (userData) => {\n        startTransition(async () => {\n            await service.saveUser(userData)\n                .then(() => {\n                   redirect(\"/userdetail\");\n                })\n                .catch(err => {\n                    setError(err);\n                });\n        });\n    }\n\n   return (\n        <>\n            {isPending ? \"저장 중....\" : \"\"}\n            <button onClick={() => saveUser()}>사용자 저장</button>\n        </>\n   )\n}\n```\n\n\n\n동작을 래핑함으로써 React는 두 가지 훅을 도입했습니다: useActionState, useOptimistic.\n\nuseActionState 훅:\n\n이 훅은 데이터 변경 상태를 처리하는 데 사용됩니다. 예를 들어, 서버로 데이터를 보내는 경우 등에 활용됩니다. 예를 들어, 프로필 정보를 업데이트하는 간단한 예시가 여기 있습니다.\n\n```js\nimport { useActionState } from 'react';\n\nexport function MemberForm() {\n  const [error, submitAction, isPending] = useActionState(\n    async (previewState, formData) => {\n      const error = await updateUser(formData).catch(\n          (err) => 'Error ' + previewState\n      );\n      if(!error) {\n        redirect(\"/memberdetail\");\n        return null;\n      }\n      return error;\n    }\n  );\n\n  return (\n    <form id=\"memberForm\" name=\"memberForm\" action={submitAction}>\n      {isPending && <p>업데이트 중...</p>}\n      <fieldset>\n        <label htmlFor=\"firstName\">이름</label>\n        <input id=\"firstName\" name=\"FirstName\" type=\"text\" />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"lastName\">성</label>\n        <input id=\"lastName\" name=\"LastName\" type=\"text\" />\n      </fieldset>\n      <!-- 구현 아래에 -->\n      <PhoneNumber />\n      <button type=\"submit\">저장</button>\n      {error && <p>{error} </p>}\n    </form>\n  );\n}\n```\n\n\n\nuseActionState()에 제공된 action 함수는 수행된 작업에 대해 null 또는 오류를 반환해야하고, 폼은 자동으로 재설정됩니다. previewState는 우리가 action에서 반환한 것과 같아집니다.\n\nuseFormStatus 훅:\n\n이 훅을 사용하면 폼 컴포넌트 내에서 폼 제출 상태를 알 수 있습니다.\n\n```js\nfunction PhoneNumber() {\n  const { pending } = useFormStatus();\n  return (\n     <fieldset disabled={pending}>\n       <label htmlFor=\"Phone\">전화번호</label>\n       <input id=\"Phone\" name=\"Phone\" type=\"number\" />\n     </fieldset>\n  )\n}\n```\n\n\n\n`useOptimistic()` 훅:\n\n이 훅은 서버로부터 응답을 기다리는 동안 UI에 낙관적인 업데이트를 수행하는 데 사용됩니다. 예: 좋아요 버튼을 클릭할 때, 우리는 서버가 성공 상태로 응답할 때까지 좋아요 반응을 표시하기를 기다리고 싶지 않습니다. 우리는 즉시 반응을 보여줄 수 있고, 서버에서 응답이 왔을 때, 그것을 로컬 상태에 동기화할 것입니다. 이것이 낙관적인 업데이트라고 불리는 것입니다.\n\n이를 위해 이전에는 API의 상태를 추적하고, API가 실패한 경우 이전 값으로 수동으로 전환해야 했습니다. 이 훅을 사용하면 코드가 더 간단해집니다. 여기 좋아요 버튼의 간단한 예시가 있습니다.\n\n```js\nimport React from 'react';\n\nfunction LikeButton({ count, onClick }) {\n  // 좋아요 카운트에 대한 낙관적 상태 생성.\n  const [optimisticCount, setOptimisticCount] = React.useOptimistic(\n    count,\n    (state, newValue) => {\n      // 여기서 우리는 즉시 상태를 계산합니다.\n      // 이 상태 함수의 반환 값은 즉시 optimisticCount에 설정될 것입니다.\n      console.log('낙관적 콜백 호출', state, newValue);\n      return newValue;\n    }\n  );\n\n  // 좋아요 상태 업데이트를 위한 전환 생성\n  // setOptimisticCount 메서드는 Action 내에서만 호출할 수 있기 때문에\n  // Action은 startTransition() 메서드 내부의 간단한 비동기 함수입니다.\n  const [isPending, startTransition] = React.useTransition();\n\n  const updateCount = () => {\n    startTransition(async () => {\n      // 즉시 카운트 증가\n      setOptimisticCount(optimisticCount + 1);\n      // 값이 부모 구성 요소에 저장될 때까지 대기\n      await onClick(optimisticCount).catch((err) => console.log(err));\n      // 반환될 때까지 이 전환은 보류 상태에 있을 것입니다.\n      return null;\n    });\n  };\n\n  return (\n    <p>\n      <span>\n        {optimisticCount} {count !== optimisticCount ? '업데이트 중...' : ''}\n      </span>\n      <button onClick={updateCount}>좋아요</button>\n    </p>\n  );\n}\n\nexport function ReactionComponent() {\n  const [count, setCount] = React.useState(0);\n  const onClick = () => {\n    return new Promise((resolve, reject) => {\n      // 지연을 모방\n      setTimeout(() => {\n        setCount(count + 1);\n        reject();\n      }, 2000);\n    });\n  };\n  return <LikeButton count={count} onClick={onClick} />;\n}\n```\n\n\n\nAPI를 사용하실 건가요?\n\n컴포넌트 내에서 리소스를 소비하는 데 사용됩니다. 이 리소스는 다음과 같을 수 있어요:\n\n- React Context: 여기에는 사용자 세션을 유지하기 위한 간단한 유틸리티 컴포넌트와 훅이 있습니다.\n\n```js\n import React from 'react';\n\n const UserContext = React.createContext();\n\n export function UserSession({ children }) {\n   const user = React.useMemo(() => ({ id: '001', name: 'user' }), []);\n   return <UserContext.Provider value={user}>{children}</UserContext.Provider>;\n }\n\n export function useUser() {\n   return React.use(UserContext);\n }\n```\n\n\n\n2. Promises: 이 기능을 사용하면 구성 요소 내에서 데이터를 직접로드 할 수 있습니다. 추가적인 보일러플레이트 코드가 필요하지 않습니다. 이 기능을 사용하기 전에 어떻게 했었는지 간단한 예시를 살펴보겠습니다.\n\n이전:\n\n```js\r\n //Before\n function UserDetailComponent({ userId }) {\n     const [user, setUser] = useState(null);\n     useEffect(() => {\n         fetchUser(userId)\n             .then(setUser);\n     }, [userId]);\n }\r\n```\n\n이후: 약속을 구성 요소에 직접 전달하고 사용할 수 있습니다. 'use'를 사용하여 소비합니다.\n\n\n\n```js\n// 이후\nfunction UserDetailComponent({ userPromise }) {\n    const user = use(userPromise);\n}\n\nfunction UserProfileComponent({ userId }) {\n    // 이는 매 렌더링마다 새 promise를 만들지 않았는지 확인하기 위한 것입니다.\n    // 일반적으로 데이터를 가져오는 라이브러리를 사용하여\n    // 리렌더링 간에 동일한 promise를 반환합니다.\n    const userPromise = useMemo(() => {\n        return fetchUser(userId);\n    }, [userId]);\n\n    return (\n        <React.Suspense fallback={\"로딩 중...\"}>\n            <UserDetailComponent userPromise={userPromise} />\n        </React.Suspense>\n    );\n}\n```\n\n개선 사항:\n\n- 컴포넌트 속성으로 ref 사용:\n\n이후에는 새 인자로 선언하는 대신 컴포넌트 속성에서 ref를 가져올 수 있습니다.\n```\n\n\n\n```js\n// 이전\nexport React.forwardRef(function UserDetails(props, ref) => {\n});\n\n// 이후\nexport function UserDetails({ user, ref }) {\n   useImperativeHandle(ref, function () {\n    return {};\n   });\n}\n\n//...\n<UserDetails ref={ref}/>\r\n```\n\n2. ref 콜백이 정리 함수를 반환합니다:\n\n이 향상으로 불필요한 보일러플레이트 코드를 제거할 수 있습니다\n\n```js\n// 이전\nfunction ProfileDetail() {\n    const ref = React.createRef();\n\n    useEffect(() => {\n     const listener = () => {};\n     ref.current.addEventListener(\"keydown\", listener);\n     return () => ref.current.removeEventListener(\"keydown\");\n    }, []);\n\n    return (\n        <input ref={ref}/>\n    )\n}\n\n// 이후\nfunction ProfileDetail() {\n    function inputRef(ref) {\n       const listener = () => {};\n       ref.current.addEventListener(\"keydown\", listener);\n       return () => ref.current.removeEventListener(\"keydown\");\n    }\n\n    return (\n        <input ref={inputRef}/>\n    )\n}\r\n```\n\n\n\n3. 컴포넌트에서의 메타 태그 지원:\n\n이제 클라이언트 컴포넌트 내에서 사용자가 있는 위치에 따라 문서 제목을 변경할 수 있습니다.\n\n```js\n<Router>\n    <Route path=\"/dashboard\" element={Dashboard} />\n    <Route path=\"/profile\" element={Profile} />\n</Router>\n\nfunction Dashboard() {\n    return (\n        <title>판매 대시보드</title>\n    )\n}\n\nfunction Profile() {\n    return (\n        <title>존의 프로필</title>\n    )\n}\n```\n\n# 정말 신경 써야 할까요:\n\n\n\n새로운 기능들과 개선사항을 고려할 때, React Query, SWR과 같은 데이터 관리 라이브러리를 사용하는 사용자라면 React에서 기본적으로 제공하는 이러한 새로운 데이터 관리 옵션에 대해 신경써야 할까요?\n\n내 의견으로는, 이것들은 모두 낮은 수준의 훅들로, 라이브러리 작성자가 코드베이스 내에서 보일러플레이트 코드를 제거하는 데 사용할 수 있습니다. 이미 상기한 데이터 관리 라이브러리를 통해 컴포넌트 수준에서 데이터를 가져오고, 로컬 캐싱과 유효한 무효화와 같은 기능을 활용하고 있기 때문에요.\n\nref, use(Context), 메타 태그와 같은 개선 사항을 활용하여 보일러플레이트 코드를 제거하고 코드베이스를 더 깔끔하게 만들 수 있습니다.\n\n데이터 관리를 위해 네이티브 폼 요소로 전환하는 주요 목적은 점진적인 향상을 선택하는 것입니다. 이 관점에서 코드베이스를 점진적으로 변경하여 앱이 최소한의 JavaScript로 작동하도록 할 수 있습니다.\n\n\n\n여기 샘플 놀이터가 있습니다.\n\n원본 게시물: 2024년 5월 9일, https://yab.hashnode.dev에서 게시됨.","ogImage":{"url":"/assets/img/2024-05-12-React19ImpactonDataManagementLibraries_0.png"},"coverImage":"/assets/img/2024-05-12-React19ImpactonDataManagementLibraries_0.png","tag":["Tech"],"readingTime":9},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ol: \"ol\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-React19ImpactonDataManagementLibraries_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React 19에서는 데이터 처리 방식에 주로 초점을 맞춘 많은 새로운 기능이 도입되었습니다. 네, 이제 React는 효율적인 데이터 가져오기 및 데이터 변경을 처리하기 위한 많은 훅을 제공합니다. 여기에 모두 빠르게 나열해 보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새로운 훅:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"많은 향상된 점:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"액션 소개:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React에서의 액션은 사용자가 UI와 상호작용한 후 수행하려는 모든 것을 의미합니다.\\n예: 버튼을 클릭하는 것이 액션입니다. 양식을 제출하는 것도 액션입니다. 그리고 계속 나열됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이전에는 useEffect, useState, useMemo과 같은 여러 후크를 결합하여 작업을 수행했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 이제 React에서 직관적인 API를 도입하여 더 이상 보일러플레이트 코드를 해결하기 위해 사용할 필요가 없습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"간단한 예로 사용자 세부정보 저장을 살펴봅시다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"UpdateUser\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [status, setStatus] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"idle\\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"saveUser\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"userData\"\n        }), \") => {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setStatus\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"saving\\\"\"\n        }), \");\\n        service.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"saveUser\"\n        }), \"(userData)\\n        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n            \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setStatus\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"idle\\\"\"\n        }), \");\\n            \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"redirect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/userdetail\\\"\"\n        }), \");\\n        }).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"catch\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n            \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setStatus\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"error\\\"\"\n        }), \");\\n        })\\n    }\\n\\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"<>\"\n          }), \"\\n            {status == \\\"saving\\\" ? \\\"저장 중....\\\" : \\\"\\\"}\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" saveUser()}>사용자 저장\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n        \", _jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"</>\"\n          })]\n        }), \"\\n   )\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With action:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"UpdateUser\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [isPending, startTransition] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useTransition\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [error, setError] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"saveUser\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"userData\"\n        }), \") => {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"startTransition\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" () => {\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" service.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"saveUser\"\n        }), \"(userData)\\n                .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n                   \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"redirect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/userdetail\\\"\"\n        }), \");\\n                })\\n                .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"catch\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"err\"\n          }), \" =>\"]\n        }), \" {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setError\"\n        }), \"(err);\\n                });\\n        });\\n    }\\n\\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"<>\"\n          }), \"\\n            {isPending ? \\\"저장 중....\\\" : \\\"\\\"}\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" saveUser()}>사용자 저장\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n        \", _jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"</>\"\n          })]\n        }), \"\\n   )\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"동작을 래핑함으로써 React는 두 가지 훅을 도입했습니다: useActionState, useOptimistic.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"useActionState 훅:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 훅은 데이터 변경 상태를 처리하는 데 사용됩니다. 예를 들어, 서버로 데이터를 보내는 경우 등에 활용됩니다. 예를 들어, 프로필 정보를 업데이트하는 간단한 예시가 여기 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useActionState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"MemberForm\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [error, submitAction, isPending] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useActionState\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (previewState, formData) => {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" error = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"updateUser\"\n        }), \"(formData).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"catch\"\n        }), \"(\\n          \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"err\"\n          }), \") =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Error '\"\n        }), \" + previewState\\n      );\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \"(!error) {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"redirect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/memberdetail\\\"\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \";\\n      }\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" error;\\n    }\\n  );\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"form\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"memberForm\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"memberForm\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"action\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{submitAction}\"\n            }), \">\"]\n          }), \"\\n      {isPending && \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"업데이트 중...\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"fieldset\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"label\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"htmlFor\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"firstName\\\"\"\n            }), \">\"]\n          }), \"이름\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"label\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"firstName\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"FirstName\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \" />\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"fieldset\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"fieldset\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"label\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"htmlFor\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"lastName\\\"\"\n            }), \">\"]\n          }), \"성\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"label\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"lastName\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"LastName\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \" />\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"fieldset\"\n            }), \">\"]\n          }), \"\\n      \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!-- 구현 아래에 -->\"\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"PhoneNumber\"\n            }), \" />\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"submit\\\"\"\n            }), \">\"]\n          }), \"저장\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n      {error && \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"{error} \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"}\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"form\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"useActionState()에 제공된 action 함수는 수행된 작업에 대해 null 또는 오류를 반환해야하고, 폼은 자동으로 재설정됩니다. previewState는 우리가 action에서 반환한 것과 같아집니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"useFormStatus 훅:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 훅을 사용하면 폼 컴포넌트 내에서 폼 제출 상태를 알 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"PhoneNumber\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { pending } = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useFormStatus\"\n        }), \"();\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n     \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"fieldset\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"disabled\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{pending}\"\n            }), \">\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"label\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"htmlFor\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Phone\\\"\"\n            }), \">\"]\n          }), \"전화번호\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"label\"\n            }), \">\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Phone\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Phone\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"number\\\"\"\n            }), \" />\"]\n          }), \"\\n     \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"fieldset\"\n            }), \">\"]\n          })]\n        }), \"\\n  )\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"useOptimistic()\"\n      }), \" 훅:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 훅은 서버로부터 응답을 기다리는 동안 UI에 낙관적인 업데이트를 수행하는 데 사용됩니다. 예: 좋아요 버튼을 클릭할 때, 우리는 서버가 성공 상태로 응답할 때까지 좋아요 반응을 표시하기를 기다리고 싶지 않습니다. 우리는 즉시 반응을 보여줄 수 있고, 서버에서 응답이 왔을 때, 그것을 로컬 상태에 동기화할 것입니다. 이것이 낙관적인 업데이트라고 불리는 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이를 위해 이전에는 API의 상태를 추적하고, API가 실패한 경우 이전 값으로 수동으로 전환해야 했습니다. 이 훅을 사용하면 코드가 더 간단해집니다. 여기 좋아요 버튼의 간단한 예시가 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"LikeButton\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ count, onClick }\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 좋아요 카운트에 대한 낙관적 상태 생성.\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [optimisticCount, setOptimisticCount] = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useOptimistic\"\n        }), \"(\\n    count,\\n    \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"state, newValue\"\n          }), \") =>\"]\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 여기서 우리는 즉시 상태를 계산합니다.\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이 상태 함수의 반환 값은 즉시 optimisticCount에 설정될 것입니다.\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'낙관적 콜백 호출'\"\n        }), \", state, newValue);\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" newValue;\\n    }\\n  );\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 좋아요 상태 업데이트를 위한 전환 생성\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// setOptimisticCount 메서드는 Action 내에서만 호출할 수 있기 때문에\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Action은 startTransition() 메서드 내부의 간단한 비동기 함수입니다.\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [isPending, startTransition] = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useTransition\"\n        }), \"();\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"updateCount\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"startTransition\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" () => {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 즉시 카운트 증가\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setOptimisticCount\"\n        }), \"(optimisticCount + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \");\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 값이 부모 구성 요소에 저장될 때까지 대기\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"onClick\"\n        }), \"(optimisticCount).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"catch\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"err\"\n          }), \") =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(err));\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 반환될 때까지 이 전환은 보류 상태에 있을 것입니다.\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \";\\n    });\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"span\"\n            }), \">\"]\n          }), \"\\n        {optimisticCount} {count !== optimisticCount ? '업데이트 중...' : ''}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"span\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{updateCount}\"\n            }), \">\"]\n          }), \"좋아요\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ReactionComponent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [count, setCount] = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"onClick\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Promise\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"resolve, reject\"\n          }), \") =>\"]\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 지연을 모방\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"setTimeout\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setCount\"\n        }), \"(count + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"reject\"\n        }), \"();\\n      }, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2000\"\n        }), \");\\n    });\\n  };\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"LikeButton\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"count\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{count}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{onClick}\"\n            }), \" />\"]\n          })\n        }), \";\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"API를 사용하실 건가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컴포넌트 내에서 리소스를 소비하는 데 사용됩니다. 이 리소스는 다음과 같을 수 있어요:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"React Context: 여기에는 사용자 세션을 유지하기 위한 간단한 유틸리티 컴포넌트와 훅이 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\\n \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"UserContext\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createContext\"\n        }), \"();\\n\\n \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"UserSession\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ children }\"\n        }), \") {\\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" user = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useMemo\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" ({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'001'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'user'\"\n        }), \" }), []);\\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"UserContext.Provider\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{user}\"\n            }), \">\"]\n          }), \"{children}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"UserContext.Provider\"\n            }), \">\"]\n          })]\n        }), \";\\n }\\n\\n \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useUser\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"use\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"UserContext\"\n        }), \");\\n }\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Promises: 이 기능을 사용하면 구성 요소 내에서 데이터를 직접로드 할 수 있습니다. 추가적인 보일러플레이트 코드가 필요하지 않습니다. 이 기능을 사용하기 전에 어떻게 했었는지 간단한 예시를 살펴보겠습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이전:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//Before\"\n        }), \"\\n \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"UserDetailComponent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ userId }\"\n        }), \") {\\n     \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [user, setUser] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n     \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n         \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchUser\"\n        }), \"(userId)\\n             .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(setUser);\\n     }, [userId]);\\n }\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이후: 약속을 구성 요소에 직접 전달하고 사용할 수 있습니다. 'use'를 사용하여 소비합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이후\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"UserDetailComponent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ userPromise }\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" user = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"use\"\n        }), \"(userPromise);\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"UserProfileComponent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ userId }\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이는 매 렌더링마다 새 promise를 만들지 않았는지 확인하기 위한 것입니다.\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 일반적으로 데이터를 가져오는 라이브러리를 사용하여\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 리렌더링 간에 동일한 promise를 반환합니다.\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" userPromise = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useMemo\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchUser\"\n        }), \"(userId);\\n    }, [userId]);\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"React.Suspense\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"fallback\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \"\\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"로딩\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"중...\"\n            }), \"\\\"}>\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"UserDetailComponent\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"userPromise\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{userPromise}\"\n            }), \" />\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"React.Suspense\"\n            }), \">\"]\n          })]\n        }), \"\\n    );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"개선 사항:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"컴포넌트 속성으로 ref 사용:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이후에는 새 인자로 선언하는 대신 컴포넌트 속성에서 ref를 가져올 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n```js\\n// 이전\\nexport React.forwardRef(function UserDetails(props, ref) => {\\n});\\n\\n// 이후\\nexport function UserDetails({ user, ref }) {\\n   useImperativeHandle(ref, function () {\\n    return {};\\n   });\\n}\\n\\n//...\\n<UserDetails ref={ref}/>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"ref 콜백이 정리 함수를 반환합니다:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 향상으로 불필요한 보일러플레이트 코드를 제거할 수 있습니다\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이전\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ProfileDetail\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" ref = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createRef\"\n        }), \"();\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n     \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"listener\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {};\\n     ref.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keydown\\\"\"\n        }), \", listener);\\n     \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" ref.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"removeEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keydown\\\"\"\n        }), \");\\n    }, []);\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n        \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ref\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{ref}/\"\n            }), \">\"]\n          })\n        }), \"\\n    )\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이후\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ProfileDetail\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"inputRef\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"ref\"\n        }), \") {\\n       \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"listener\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {};\\n       ref.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keydown\\\"\"\n        }), \", listener);\\n       \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" ref.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"removeEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keydown\\\"\"\n        }), \");\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n        \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ref\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{inputRef}/\"\n            }), \">\"]\n          })\n        }), \"\\n    )\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"컴포넌트에서의 메타 태그 지원:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 클라이언트 컴포넌트 내에서 사용자가 있는 위치에 따라 문서 제목을 변경할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Router\"\n        }), \">\\n    \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Route\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"path\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/dashboard\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"element\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{Dashboard}\"\n            }), \" />\"]\n          })\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Route\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"path\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/profile\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"element\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{Profile}\"\n            }), \" />\"]\n          })\n        }), \"\\n</\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Router\"\n        }), \">\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Dashboard\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          }), \"판매 대시보드\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          })]\n        }), \"\\n    )\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Profile\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          }), \"존의 프로필\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          })]\n        }), \"\\n    )\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"정말 신경 써야 할까요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새로운 기능들과 개선사항을 고려할 때, React Query, SWR과 같은 데이터 관리 라이브러리를 사용하는 사용자라면 React에서 기본적으로 제공하는 이러한 새로운 데이터 관리 옵션에 대해 신경써야 할까요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"내 의견으로는, 이것들은 모두 낮은 수준의 훅들로, 라이브러리 작성자가 코드베이스 내에서 보일러플레이트 코드를 제거하는 데 사용할 수 있습니다. 이미 상기한 데이터 관리 라이브러리를 통해 컴포넌트 수준에서 데이터를 가져오고, 로컬 캐싱과 유효한 무효화와 같은 기능을 활용하고 있기 때문에요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ref, use(Context), 메타 태그와 같은 개선 사항을 활용하여 보일러플레이트 코드를 제거하고 코드베이스를 더 깔끔하게 만들 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터 관리를 위해 네이티브 폼 요소로 전환하는 주요 목적은 점진적인 향상을 선택하는 것입니다. 이 관점에서 코드베이스를 점진적으로 변경하여 앱이 최소한의 JavaScript로 작동하도록 할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기 샘플 놀이터가 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"원본 게시물: 2024년 5월 9일, https://yab.hashnode.dev에서 게시됨.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}