{"pageProps":{"post":{"title":"React에서 Axios를 사용하여 중앙 집중식 API 클라이언트 파일 만들기","description":"","date":"2024-05-12 21:05","slug":"2024-05-12-CreatingaCentralizedAPIClientFileinReactwithAxios","content":"\n\n리액트 애플리케이션을 구축할 때 API와 상호 작용하는 경우, API 호출을 처리하는 깔끔하고 조직화된 방식을 유지하는 것이 중요합니다. 이를 달성하는 효과적인 방법 중 하나는 중앙 집중식 API 클라이언트 파일을 생성하는 것입니다. 이 튜토리얼에서는 Axios를 사용하여 이러한 파일을 구조화하는 방법을 살펴보겠습니다.\n\n![이미지](/assets/img/2024-05-12-CreatingaCentralizedAPIClientFileinReactwithAxios_0.png)\n\n# API 호출을 중앙 집중화하는 이유\n\nAPI 호출을 중앙 집중화하는 것에는 여러 가지 이점이 있습니다:\n\n\n\n- 모듈성: API 로직을 하나의 파일로 분리함으로써 응용 프로그램 전반에 걸쳐 모듈성과 재사용성을 촉진합니다.\n- 조직화: 모든 API 관련 코드가 하나의 파일에 포함되어 있어 관리하고 유지하는 것이 더 쉬워집니다.\n- 일관성: 일반적인 설정 및 오류 처리 전략을 한 곳에 정의함으로써 응용 프로그램 전체에서 일관성을 보장할 수 있습니다.\n\n# Axios 설정하기\n\n먼저 프로젝트에 Axios가 설치되어 있는지 확인하세요. npm이나 yarn을 통해 설치할 수 있습니다:\n\n```js\nnpm install axios\n# 또는\nyarn add axios\n```\n\n\n\n# API 클라이언트 파일 만들기\n\nAPI 호출을 처리할 apiClient.js 파일을 생성해 봅시다:\n\n```js\n// apiClient.js\n\nimport axios from 'axios';\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || 'https://api.example.com';\n\nconst apiClient = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    // 여기에 인증 토큰과 같은 다른 헤더를 추가할 수 있습니다\n  },\n});\n\n// 공통 API 메서드 정의\nconst _get = (url, config = {}) => {\n  return apiClient.get(url, config);\n};\n\nconst _delete = (url, config = {}) => {\n  return apiClient.delete(url, config);\n};\n\nconst _put = (url, data = {}, config = {}) => {\n  return apiClient.put(url, data, config);\n};\n\nconst _post = (url, data = {}, config = {}) => {\n  return apiClient.post(url, data, config);\n};\n\n// API 메서드 내보내기\nexport { _get, _delete, _put, _post };t api;\n```\n\n위 파일에서:\n\n\n\n- Axios 인스턴스를 생성하여 기본 URL과 기본 헤더를 설정합니다.\n- 각 엔드포인트에 해당하는 다양한 API 기능을 정의합니다.\n\n환경 변수 설정: 먼저, 각 환경에 맞게 환경 변수를 설정해야 합니다. 일반적으로 각 환경에 대한 .env 파일을 생성하여 이 작업을 수행할 수 있습니다. 예를 들어:\n\n- .env.development: 개발 환경을 위한 변수를 포함합니다.\n- .env.qa: QA 환경을 위한 변수를 포함합니다.\n- .env.staging: 스테이징 환경을 위한 변수를 포함합니다.\n- .env.production: 프로덕션 환경을 위한 변수를 포함합니다.\n\n각 .env 파일 내에서 기본 URL을 정의하세요.\n\n\n\nREACT_APP_BASE_URL=https://api.example.com\n\n- 다른 환경에 접속하기: 환경에 따라 (예: 개발, QA, 스테이징) React는 자동으로 해당 .env 파일을로드하고 BASE_URL이 그에 맞게 설정됩니다.\n\n예를 들어, 개발 중일 때 React는 .env.development를로드하고 BASE_URL이 해당 파일에 지정된 값으로 설정됩니다.\n\n마찬가지로 다른 환경 (예: QA, 스테이징)에서도 React는 해당 .env 파일을로드합니다.\n\n\n\n2. React 컴포넌트에서의 사용법: 이전 예시에서 보았던 것처럼 React 컴포넌트에서 api 객체를 계속 사용할 수 있습니다. 기본 URL은 환경에 따라 동적으로 결정됩니다.\n\n이 설정을 사용하면 다른 환경에 대해 쉽게 다른 기본 URL을 관리할 수 있어 React 애플리케이션이 실행 중인 환경에 따라 적절한 백엔드와 통신할 수 있도록 보장합니다.\n\n# 컴포넌트에서 API 클라이언트 사용하기\n\n이제 React 컴포넌트에서 이 API 클라이언트를 사용하는 방법을 살펴보겠습니다:\n\n\n\n```js\nimport React, { useState, useEffect } from 'react';\nimport { _get, _post, _put, _delete } from './apiClient'; // 필요에 따라 경로를 조정하세요\n\nfunction ExampleComponent() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // 컴포넌트가 마운트될 때 데이터 가져오기\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const response = await _get('/data', { headers: { Authorization: 'Bearer 여기에 토큰 입력' } });\n      setData(response.data);\n    } catch (error) {\n      console.error('데이터를 가져오는 중 오류 발생:', error);\n      // 에러 처리\n    }\n  };\n\n  const addData = async () => {\n    try {\n      const newData = { name: '새 데이터' };\n      await _post('/data', newData);\n      fetchData(); // 추가 후 데이터 새로고침\n    } catch (error) {\n      console.error('데이터 추가 중 오류 발생:', error);\n      // 에러 처리\n    }\n  };\n\n  const updateData = async (id, updatedData) => {\n    try {\n      await _put(`/data/${id}`, updatedData);\n      fetchData(); // 업데이트 후 데이터 새로고침\n    } catch (error) {\n      console.error('데이터 업데이트 중 오류 발생:', error);\n      // 에러 처리\n    }\n  };\n\n  const deleteData = async (id) => {\n    try {\n      await _delete(`/data/${id}`);\n      fetchData(); // 삭제 후 데이터 새로고침\n    } catch (error) {\n      console.error('데이터 삭제 중 오류 발생:', error);\n      // 에러 처리\n    }\n  };\n\n  return (\n    <div>\n      <h1>예시 컴포넌트</h1>\n      <button onClick={addData}>데이터 추가</button>\n      <ul>\n        {data.map(item => (\n          <li key={item.id}>\n            {item.name}\n            <button onClick={() => updateData(item.id, { name: '업데이트된 아이템' })}>업데이트</button>\n            <button onClick={() => deleteData(item.id)}>삭제</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ExampleComponent;\n```\n\nAxios에서 config 매개변수를 사용하면 HTTP 요청에 대한 추가 구성을 전달할 수 있습니다. 일반적으로 사용되는 구성에는 헤더, 쿼리 매개변수, 요청 시간 초과, 인증 토큰 등이 있습니다.\n\n참고: axios.create()로 Axios 인스턴스를 만들 때 baseURL 옵션을 BASE_URL로 설정합니다. 이렇게 하면 이 Axios 인스턴스로 작성된 모든 요청에 기본 URL이 URL에 접두사로 붙습니다.\n\n예를 들어, ExampleComponent에서 _get(`/data`)를 호출하면 Axios는 `https://api.example.com/data`로 GET 요청을 보냅니다.```\n\n\n\n# 결론\n\nAxios를 사용하여 React 애플리케이션에서 API 호출을 중앙화하는 것은 API 로직을 관리하기 위한 깔끔하고 조직된 방법을 제공합니다. 중앙 집중화된 API 클라이언트 파일을 만들면 코드베이스에서 모듈화, 조직화 및 일관성을 달성할 수 있습니다. 이 방법을 통해 유지 보수가 간단해지며 애플리케이션 전체에서 코드 재사용을 장려합니다.\n\n오늘부터 API 호출을 조직화하고 React 프로젝트에 가져다 주는 혜택을 경험해보세요!","ogImage":{"url":"/assets/img/2024-05-12-CreatingaCentralizedAPIClientFileinReactwithAxios_0.png"},"coverImage":"/assets/img/2024-05-12-CreatingaCentralizedAPIClientFileinReactwithAxios_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"리액트 애플리케이션을 구축할 때 API와 상호 작용하는 경우, API 호출을 처리하는 깔끔하고 조직화된 방식을 유지하는 것이 중요합니다. 이를 달성하는 효과적인 방법 중 하나는 중앙 집중식 API 클라이언트 파일을 생성하는 것입니다. 이 튜토리얼에서는 Axios를 사용하여 이러한 파일을 구조화하는 방법을 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-CreatingaCentralizedAPIClientFileinReactwithAxios_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"API 호출을 중앙 집중화하는 이유\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"API 호출을 중앙 집중화하는 것에는 여러 가지 이점이 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"모듈성: API 로직을 하나의 파일로 분리함으로써 응용 프로그램 전반에 걸쳐 모듈성과 재사용성을 촉진합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"조직화: 모든 API 관련 코드가 하나의 파일에 포함되어 있어 관리하고 유지하는 것이 더 쉬워집니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"일관성: 일반적인 설정 및 오류 처리 전략을 한 곳에 정의함으로써 응용 프로그램 전체에서 일관성을 보장할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Axios 설정하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 프로젝트에 Axios가 설치되어 있는지 확인하세요. npm이나 yarn을 통해 설치할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install axios\\n# 또는\\nyarn add axios\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"API 클라이언트 파일 만들기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"API 호출을 처리할 apiClient.js 파일을 생성해 봅시다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// apiClient.js\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" axios \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'axios'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BASE_URL\"\n        }), \" = process.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"env\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"REACT_APP_BASE_URL\"\n        }), \" || \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'https://api.example.com'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" apiClient = axios.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"baseURL\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BASE_URL\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"headers\"\n        }), \": {\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Content-Type'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'application/json'\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 여기에 인증 토큰과 같은 다른 헤더를 추가할 수 있습니다\"\n        }), \"\\n  },\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 공통 API 메서드 정의\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_get\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"url, config = {}\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" apiClient.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(url, config);\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_delete\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"url, config = {}\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" apiClient.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"delete\"\n        }), \"(url, config);\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_put\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"url, data = {}, config = {}\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" apiClient.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"put\"\n        }), \"(url, data, config);\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_post\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"url, data = {}, config = {}\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" apiClient.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"post\"\n        }), \"(url, data, config);\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// API 메서드 내보내기\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" { _get, _delete, _put, _post };t api;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 파일에서:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Axios 인스턴스를 생성하여 기본 URL과 기본 헤더를 설정합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"각 엔드포인트에 해당하는 다양한 API 기능을 정의합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"환경 변수 설정: 먼저, 각 환경에 맞게 환경 변수를 설정해야 합니다. 일반적으로 각 환경에 대한 .env 파일을 생성하여 이 작업을 수행할 수 있습니다. 예를 들어:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \".env.development: 개발 환경을 위한 변수를 포함합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \".env.qa: QA 환경을 위한 변수를 포함합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \".env.staging: 스테이징 환경을 위한 변수를 포함합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \".env.production: 프로덕션 환경을 위한 변수를 포함합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"각 .env 파일 내에서 기본 URL을 정의하세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"REACT_APP_BASE_URL=https://api.example.com\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"다른 환경에 접속하기: 환경에 따라 (예: 개발, QA, 스테이징) React는 자동으로 해당 .env 파일을로드하고 BASE_URL이 그에 맞게 설정됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예를 들어, 개발 중일 때 React는 .env.development를로드하고 BASE_URL이 해당 파일에 지정된 값으로 설정됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마찬가지로 다른 환경 (예: QA, 스테이징)에서도 React는 해당 .env 파일을로드합니다.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"React 컴포넌트에서의 사용법: 이전 예시에서 보았던 것처럼 React 컴포넌트에서 api 객체를 계속 사용할 수 있습니다. 기본 URL은 환경에 따라 동적으로 결정됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 설정을 사용하면 다른 환경에 대해 쉽게 다른 기본 URL을 관리할 수 있어 React 애플리케이션이 실행 중인 환경에 따라 적절한 백엔드와 통신할 수 있도록 보장합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"컴포넌트에서 API 클라이언트 사용하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 React 컴포넌트에서 이 API 클라이언트를 사용하는 방법을 살펴보겠습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useState, useEffect } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { _get, _post, _put, _delete } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./apiClient'\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 필요에 따라 경로를 조정하세요\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ExampleComponent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [data, setData] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"([]);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 컴포넌트가 마운트될 때 데이터 가져오기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchData\"\n        }), \"();\\n  }, []);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchData\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" response = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/data'\"\n        }), \", { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"headers\"\n        }), \": { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Authorization\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Bearer 여기에 토큰 입력'\"\n        }), \" } });\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setData\"\n        }), \"(response.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"data\"\n        }), \");\\n    } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"catch\"\n        }), \" (error) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'데이터를 가져오는 중 오류 발생:'\"\n        }), \", error);\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 에러 처리\"\n        }), \"\\n    }\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addData\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" newData = { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'새 데이터'\"\n        }), \" };\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_post\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/data'\"\n        }), \", newData);\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchData\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 추가 후 데이터 새로고침\"\n        }), \"\\n    } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"catch\"\n        }), \" (error) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'데이터 추가 중 오류 발생:'\"\n        }), \", error);\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 에러 처리\"\n        }), \"\\n    }\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"updateData\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"id, updatedData\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_put\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`/data/\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${id}\"\n          }), \"`\"]\n        }), \", updatedData);\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchData\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 업데이트 후 데이터 새로고침\"\n        }), \"\\n    } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"catch\"\n        }), \" (error) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'데이터 업데이트 중 오류 발생:'\"\n        }), \", error);\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 에러 처리\"\n        }), \"\\n    }\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"deleteData\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"id\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_delete\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`/data/\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${id}\"\n          }), \"`\"]\n        }), \");\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchData\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 삭제 후 데이터 새로고침\"\n        }), \"\\n    } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"catch\"\n        }), \" (error) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'데이터 삭제 중 오류 발생:'\"\n        }), \", error);\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 에러 처리\"\n        }), \"\\n    }\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"예시 컴포넌트\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{addData}\"\n            }), \">\"]\n          }), \"데이터 추가\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ul\"\n            }), \">\"]\n          }), \"\\n        {data.map(item => (\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"key\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{item.id}\"\n            }), \">\"]\n          }), \"\\n            {item.name}\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" updateData(item.id, { name: '업데이트된 아이템' })}>업데이트\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" deleteData(item.id)}>삭제\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          }), \"\\n        ))}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ul\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ExampleComponent\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Axios에서 config 매개변수를 사용하면 HTTP 요청에 대한 추가 구성을 전달할 수 있습니다. 일반적으로 사용되는 구성에는 헤더, 쿼리 매개변수, 요청 시간 초과, 인증 토큰 등이 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참고: axios.create()로 Axios 인스턴스를 만들 때 baseURL 옵션을 BASE_URL로 설정합니다. 이렇게 하면 이 Axios 인스턴스로 작성된 모든 요청에 기본 URL이 URL에 접두사로 붙습니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"예를 들어, ExampleComponent에서 _get(\", _jsx(_components.code, {\n        children: \"/data\"\n      }), \")를 호출하면 Axios는 \", _jsx(_components.code, {\n        children: \"https://api.example.com/data\"\n      }), \"로 GET 요청을 보냅니다.```\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Axios를 사용하여 React 애플리케이션에서 API 호출을 중앙화하는 것은 API 로직을 관리하기 위한 깔끔하고 조직된 방법을 제공합니다. 중앙 집중화된 API 클라이언트 파일을 만들면 코드베이스에서 모듈화, 조직화 및 일관성을 달성할 수 있습니다. 이 방법을 통해 유지 보수가 간단해지며 애플리케이션 전체에서 코드 재사용을 장려합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"오늘부터 API 호출을 조직화하고 React 프로젝트에 가져다 주는 혜택을 경험해보세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}