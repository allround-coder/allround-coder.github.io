{"pageProps":{"post":{"title":"Vite React에서 프록시 설정하기","description":"","date":"2024-05-12 20:13","slug":"2024-05-12-SetupProxyinViteReact","content":"\n\nVite React 애플리케이션에서는 다음이 제게 가장 잘 작동하는 방법입니다:\n\nvite.config.js 파일에서 proxy 옵션을 사용할 수 있습니다. proxy 옵션을 사용하면 개발 중에 특정 요청을 다른 서버로 리디렉션할 수 있습니다. 이는 예를 들어 프런트엔드 애플리케이션이 별도 서버에서 실행되는 백엔드 API와 통신해야 할 때 유용합니다.\n\nvite.config.js 파일 안에 proxy 옵션을 정의하세요:\n\n```js\n/// <reference types=\"vite/client\" />\n\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n      proxy: {\n        '/api': {\n          target: 'http://your-backend-api-server.com',\n          changeOrigin: true,\n          rewrite: (path) => path.replace(/^\\/api/, ''),\n        },\n      },\n    },\n});\n```\n\n\n\n이 예제에서는 /api로 시작하는 요청에 대한 프록시를 설정하고 있습니다. 이 패턴과 일치하는 모든 요청은 http://your-backend-api-server.com 으로 리디렉션됩니다.\n\n환경 변수에서 API URL을 가져오고 싶다면 다음과 같이 작성할 수 있습니다.\n\n```js\n/// <reference types=\"vite/client\" />\n\nimport { defineConfig, loadEnv } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default ({ mode }) => {\n  process.env = { ...process.env, ...loadEnv(mode, process.cwd()) };\n  const config = {\n    plugins: [react()],\n    server: {\n      proxy: {\n        '/api': {\n          target: process.env.VITE_BASE_URL,\n          changeOrigin: true,\n          rewrite: (path) => path.replace(/^\\/api/, ''),\n        },\n      },\n    },\n  };\n  return defineConfig(config);\n};\n```\n\n여기서 VITE_BASE_URL이 API URL입니다.\n\n\n\n이 포스트가 마음에 드셨다면 아래의 하트를 클릭해주세요 :).","ogImage":{"url":"/assets/img/2024-05-12-SetupProxyinViteReact_0.png"},"coverImage":"/assets/img/2024-05-12-SetupProxyinViteReact_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Vite React 애플리케이션에서는 다음이 제게 가장 잘 작동하는 방법입니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"vite.config.js 파일에서 proxy 옵션을 사용할 수 있습니다. proxy 옵션을 사용하면 개발 중에 특정 요청을 다른 서버로 리디렉션할 수 있습니다. 이는 예를 들어 프런트엔드 애플리케이션이 별도 서버에서 실행되는 백엔드 API와 통신해야 할 때 유용합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"vite.config.js 파일 안에 proxy 옵션을 정의하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/// <reference types=\\\"vite/client\\\" />\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { defineConfig } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'vite'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" react \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@vitejs/plugin-react'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// https://vitejs.dev/config/\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"defineConfig\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"plugins\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"react\"\n        }), \"()],\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"server\"\n        }), \": {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"proxy\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/api'\"\n        }), \": {\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"target\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'http://your-backend-api-server.com'\"\n        }), \",\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"changeOrigin\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"rewrite\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"path\"\n          }), \") =>\"]\n        }), \" path.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"replace\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/^\\\\/api/\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \"),\\n        },\\n      },\\n    },\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예제에서는 /api로 시작하는 요청에 대한 프록시를 설정하고 있습니다. 이 패턴과 일치하는 모든 요청은 http://your-backend-api-server.com 으로 리디렉션됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"환경 변수에서 API URL을 가져오고 싶다면 다음과 같이 작성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/// <reference types=\\\"vite/client\\\" />\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { defineConfig, loadEnv } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'vite'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" react \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@vitejs/plugin-react'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// https://vitejs.dev/config/\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" ({ mode }) => {\\n  process.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"env\"\n        }), \" = { ...process.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"env\"\n        }), \", ...\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"loadEnv\"\n        }), \"(mode, process.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"cwd\"\n        }), \"()) };\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" config = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"plugins\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"react\"\n        }), \"()],\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"server\"\n        }), \": {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"proxy\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/api'\"\n        }), \": {\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"target\"\n        }), \": process.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"env\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"VITE_BASE_URL\"\n        }), \",\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"changeOrigin\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"rewrite\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"path\"\n          }), \") =>\"]\n        }), \" path.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"replace\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/^\\\\/api/\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \"),\\n        },\\n      },\\n    },\\n  };\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"defineConfig\"\n        }), \"(config);\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 VITE_BASE_URL이 API URL입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 포스트가 마음에 드셨다면 아래의 하트를 클릭해주세요 :).\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}