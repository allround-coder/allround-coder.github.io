{"pageProps":{"post":{"title":"DraftJS를 사용한 풍부한 텍스트 편집기","description":"","date":"2024-05-12 23:18","slug":"2024-05-12-RichTextEditorusingDraftJS","content":"\n\n그래도 봐, 요즘에는 보통의 텍스트 영역으로는 충분하지 않아. 요즘에는 가능한 모든 서식을 필요로 해서 고객들이 데이터를 인상적인 형식으로 제시할 수 있게 해야 해.\n\n그런 상황에서 draft.js가 등장해. React 앱용 멋진 텍스트 편집기야. 우리가 어떻게 고객을 위해 텍스트 영역을 흥미롭게 만들었는지 여기에 나와 있어.\n\n```js\nimport { EditorState, ContentState, convertFromHTML } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\nimport React, { useEffect, useState } from 'react';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\ntype RichTextAreaProps = {\n  name: string;\n  onChange: (value: any) => void;\n  onReset?: () => void;\n  placeholder?: string;\n  reset?: boolean;\n  value: string;\n};\n\nconst RichTextArea: React.FC<RichTextAreaProps> = ({\n  name,\n  onChange,\n  value,\n  placeholder = 'Enter Details',\n  reset,\n  onReset,\n}) => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  const handleEditorChange = (newEditorState) => {\n    setEditorState(newEditorState);\n\n    const rawContentState = editorState.getCurrentContent();\n    const html = stateToHTML(rawContentState);\n\n    onChange({\n      target: {\n        name,\n        value: html,\n      },\n    });\n  };\n\n  useEffect(() => {\n    const blocksFromHTML = convertFromHTML(value);\n    const contentState = ContentState.createFromBlockArray(blocksFromHTML);\n    setEditorState(EditorState.createWithContent(contentState));\n  }, []);\n\n  useEffect(() => {\n    if (reset) {\n      setEditorState(EditorState.createEmpty());\n\n      const blocksFromHTML = convertFromHTML(value);\n      const contentState = ContentState.createFromBlockArray(blocksFromHTML);\n\n      setEditorState(EditorState.createWithContent(contentState));\n      onReset();\n    }\n  }, [reset]);\n\n  return (\n    <div className=\"w-full bg-white p-2\">\n      <Editor\n        name={name}\n        placeholder={placeholder}\n        editorState={editorState}\n        onEditorStateChange={handleEditorChange}\n        toolbar={{\n          options: ['inline', 'fontSize', 'list', 'textAlign', 'link', 'image'],\n          inline: {\n            options: ['bold', 'italic', 'underline'],\n          },\n          list: {\n            options: ['unordered', 'ordered'],\n          },\n          textAlign: {\n            options: ['left', 'center', 'right'],\n          },\n          link: {\n            defaultTargetOption: '_blank',\n          },\n          image: {\n            defaultSize: {\n              height: 'auto',\n              width: '100%',\n            },\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default RichTextArea;\n```\n\n- Editor는 draft.js에서 제공하는 구성요소야. 그냥 그것을 추가함으로써 기본 툴바가 있는 리치 텍스트 편집기를 얻을 수 있어.\n- 툴바 prop을 사용하면 툴바에 표시하고 싶은 모든 형식을 사용자 정의할 수 있어.\n- editorState는 사용자가 편집기에 입력하는 상태나 내용을 제어하는 것이야.\n- Editor는 사실 formik과 연결돼 있어서 이름과 onChange 호출을 처리해.\n- 기본적으로 편집기는 EditorState 객체를 반환하는데, 이를 의미 있게 만들기 위해 stateToHTML(rawContentState) 호출을 통해 HTML로 변환해야 해.\n- 반대로 백엔드로 전송할 때 HTML로 변환되는 EditorState 객체에서 데이터를 로드할 때 ContentState.createFromBlockArray를 통해 이를 역으로 수행해야 해.\n\n\n\n```js\n<FormControl\n  label=\"피드백\"\n  error={formik.touched.response && formik.errors.response}\n>\n  <RichTextArea\n    name=\"피드백\"\n    value={formik.values.feedback}\n    onChange={formik.handleChange}\n  />\n</FormControl>\n```\n\n이렇게 `RichTextArea` 컴포넌트를 사용합니다. `FormControl`은 실제로 formik 프로바이더를 이 안에 감쌉니다.\n\n<img src=\"/assets/img/2024-05-12-RichTextEditorusingDraftJS_0.png\" />\n\n이렇게 보입니다.\n```\n\n\n\n행복한 코딩하세요!","ogImage":{"url":"/assets/img/2024-05-12-RichTextEditorusingDraftJS_0.png"},"coverImage":"/assets/img/2024-05-12-RichTextEditorusingDraftJS_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"그래도 봐, 요즘에는 보통의 텍스트 영역으로는 충분하지 않아. 요즘에는 가능한 모든 서식을 필요로 해서 고객들이 데이터를 인상적인 형식으로 제시할 수 있게 해야 해.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런 상황에서 draft.js가 등장해. React 앱용 멋진 텍스트 편집기야. 우리가 어떻게 고객을 위해 텍스트 영역을 흥미롭게 만들었는지 여기에 나와 있어.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EditorState\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ContentState\"\n        }), \", convertFromHTML } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'draft-js'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { stateToHTML } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'draft-js-export-html'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useEffect, useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Editor\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-draft-wysiwyg'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\"\n        }), \";\\n\\ntype \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RichTextAreaProps\"\n        }), \" = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": string;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"onChange\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"value: any\"\n          }), \") =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \";\\n  onReset?: \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \";\\n  placeholder?: string;\\n  reset?: boolean;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"value\"\n        }), \": string;\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RichTextArea\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"FC\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RichTextAreaProps\"\n        }), \"> = \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"{\\n  name,\\n  onChange,\\n  value,\\n  placeholder = \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"'Enter Details'\"\n            }), \",\\n  reset,\\n  onReset,\\n}\"]\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [editorState, setEditorState] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EditorState\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createEmpty\"\n        }), \"());\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleEditorChange\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"newEditorState\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setEditorState\"\n        }), \"(newEditorState);\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" rawContentState = editorState.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getCurrentContent\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" html = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"stateToHTML\"\n        }), \"(rawContentState);\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"onChange\"\n        }), \"({\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"target\"\n        }), \": {\\n        name,\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"value\"\n        }), \": html,\\n      },\\n    });\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" blocksFromHTML = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"convertFromHTML\"\n        }), \"(value);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" contentState = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ContentState\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createFromBlockArray\"\n        }), \"(blocksFromHTML);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setEditorState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EditorState\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createWithContent\"\n        }), \"(contentState));\\n  }, []);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (reset) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setEditorState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EditorState\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createEmpty\"\n        }), \"());\\n\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" blocksFromHTML = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"convertFromHTML\"\n        }), \"(value);\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" contentState = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ContentState\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createFromBlockArray\"\n        }), \"(blocksFromHTML);\\n\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setEditorState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EditorState\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createWithContent\"\n        }), \"(contentState));\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"onReset\"\n        }), \"();\\n    }\\n  }, [reset]);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"w-full bg-white p-2\\\"\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Editor\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{name}\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"placeholder\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{placeholder}\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"editorState\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{editorState}\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onEditorStateChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleEditorChange}\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"toolbar\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{{\"\n            }), \"\\n          \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"options:\"\n            }), \" ['\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"inline\"\n            }), \"', '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"fontSize\"\n            }), \"', '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"list\"\n            }), \"', '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"textAlign\"\n            }), \"', '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"link\"\n            }), \"', '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"image\"\n            }), \"'],\\n          \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"inline:\"\n            }), \" {\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"options:\"\n            }), \" ['\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"bold\"\n            }), \"', '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"italic\"\n            }), \"', '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"underline\"\n            }), \"'],\\n          },\\n          \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"list:\"\n            }), \" {\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"options:\"\n            }), \" ['\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"unordered\"\n            }), \"', '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ordered\"\n            }), \"'],\\n          },\\n          \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"textAlign:\"\n            }), \" {\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"options:\"\n            }), \" ['\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"left\"\n            }), \"', '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"center\"\n            }), \"', '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"right\"\n            }), \"'],\\n          },\\n          \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"link:\"\n            }), \" {\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"defaultTargetOption:\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"_blank\"\n            }), \"',\\n          },\\n          \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"image:\"\n            }), \" {\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"defaultSize:\"\n            }), \" {\\n              \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"height:\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"auto\"\n            }), \"',\\n              \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"width:\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"100\"\n            }), \"%',\\n            },\\n          },\\n        }}\\n      />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RichTextArea\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Editor는 draft.js에서 제공하는 구성요소야. 그냥 그것을 추가함으로써 기본 툴바가 있는 리치 텍스트 편집기를 얻을 수 있어.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"툴바 prop을 사용하면 툴바에 표시하고 싶은 모든 형식을 사용자 정의할 수 있어.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"editorState는 사용자가 편집기에 입력하는 상태나 내용을 제어하는 것이야.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Editor는 사실 formik과 연결돼 있어서 이름과 onChange 호출을 처리해.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"기본적으로 편집기는 EditorState 객체를 반환하는데, 이를 의미 있게 만들기 위해 stateToHTML(rawContentState) 호출을 통해 HTML로 변환해야 해.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"반대로 백엔드로 전송할 때 HTML로 변환되는 EditorState 객체에서 데이터를 로드할 때 ContentState.createFromBlockArray를 통해 이를 역으로 수행해야 해.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormControl\"\n        }), \"\\n  label=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"피드백\\\"\"\n        }), \"\\n  error={formik.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"touched\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"response\"\n        }), \" && formik.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"errors\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"response\"\n        }), \"}\\n>\\n  \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"RichTextArea\"\n            }), \"\\n    \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"피드백\\\"\"\n            }), \"\\n    \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{formik.values.feedback}\"\n            }), \"\\n    \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{formik.handleChange}\"\n            }), \"\\n  />\"]\n          })\n        }), \"\\n</\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormControl\"\n        }), \">\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이렇게 \", _jsx(_components.code, {\n        children: \"RichTextArea\"\n      }), \" 컴포넌트를 사용합니다. \", _jsx(_components.code, {\n        children: \"FormControl\"\n      }), \"은 실제로 formik 프로바이더를 이 안에 감쌉니다.\"]\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-RichTextEditorusingDraftJS_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이렇게 보입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n행복한 코딩하세요!\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}