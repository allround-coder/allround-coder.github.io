{"pageProps":{"post":{"title":"자바스크립트 함수에 대한 인터뷰 개념","description":"","date":"2024-05-14 14:08","slug":"2024-05-14-InterviewConceptsonJavaScriptFunctions","content":"\n\n![image](/assets/img/2024-05-14-InterviewConceptsonJavaScriptFunctions_0.png)\n\n이 기사는 현재 작업 중인 JavaScript 인터뷰 컨셉을 준비하는 데 도움이 되는 안내서를 기반으로 합니다. 처음 두 장(chapter)는 지금 무료로 다운로드할 수 있습니다. 가이드에 대한 피드백을 주시면 감사하겠습니다.\nPDF 다운로드 링크는 여기에 있습니다. [PDF 다운로드 링크](https://9820419704756.gumroad.com/l/gdycz)\n\n이제, 이 기사의 주제로 넘어가 봅시다!\n\nJavaScript에서 함수를 여러 가지 방법으로 만들 수 있습니다.\n\n\n\n'function' 키워드를 사용하여 함수를 생성할 수 있습니다. 이를 함수 선언이라고 합니다. 아래는 예시입니다:\n\n```js\nfunction addNumbers(a, b) {\n  return a + b;\n}\n```\n\n이 예시에서 'addNumbers'라는 함수를 선언했습니다. 두 개의 인수 'a'와 'b'를 받습니다. 함수의 코드 블록에서는 + 연산자를 사용하여 두 인수를 더한 후 결과를 반환합니다.\n\n함수 선언을 사용하는 장점 중 하나는 호이스팅이 가능하다는 것입니다. 즉, 선언되기 전에 호출할 수 있다는 의미입니다.\n\n\n\n기능 표현식: 함수 표현식은 함수를 변수에 할당하여 선언하는 방법입니다. 예시입니다:\n\n```js\nconst multiply = function(a, b) {\n  return a * b;\n}\nconsole.log(multiply(2,3)); // 결과: 6\n```\n\n함수 표현식을 사용하는 장점은 다른 함수에 인수로 전달할 수 있다는 것입니다.\n\n화살표 함수: 화살표 함수는 JavaScript에서 함수를 선언하는 새로운 방법이며 `=` 연산자를 사용합니다. 여기 예시가 있습니다:\n\n\n\n```js\nconst divide = (a, b) => {\n  return a / b;\n}\nconsole.log(divide(6,3)); // 출력: 2\n```\n\n화살표 함수는 간결한 구문을 가지고 있어서 함수가 충분히 간단하다면 한 줄로 작성할 수 있습니다.\n\n익명 함수: 익명 함수는 이름이 없는 함수로 다른 함수의 매개변수로 사용됩니다. 다음은 예시입니다:\n\n```js\nconst numbers = [1, 2, 3, 4];\nconst double = numbers.map(function(num) {\n  return num * 2;\n})\nconsole.log(double); // 출력: [2, 4, 6, 8]\n```\n\n\n\n익명 함수를 사용하는 장점은 다른 함수의 콜백 함수로 사용할 수 있다는 것입니다.\n\n면접에서 기대할 수 있는 질문\n\n자바스크립트에서 함수 범위의 개념을 설명해주세요.\n\n함수 범위는 함수 내에서 변수의 가시성을 의미합니다. 함수 내에서 선언된 변수는 해당 함수 내에서만 지역 변수로써 사용되며 외부에서 접근할 수 없습니다. 이는 명명 충돌을 방지하고 캡슐화를 촉진하는 데 도움이 됩니다.\n\n\n\n```js\nfunction greet() {\n  let message = \"Hello!\";\n  console.log(message); // \"Hello!\"\n}\ngreet();\nconsole.log(message); // Uncaught ReferenceError: 'message' is not defined\n```\n\nJavaScript에서 콜백 함수란 무엇인가요?\n\n콜백 함수는 다른 함수의 인수로 전달되어 외부 함수 내에서 호출되는 함수를 말합니다. 콜백 함수는 주로 비동기 작업, 이벤트 처리 및 고차 함수에서 사용됩니다.\n\n```js\nfunction doSomething(callback) {\n   console.log(\"작업 중...\");\n   callback(); // 콜백 함수 실행\n}\nfunction callbackFunction() {\n   console.log(\"콜백 함수 실행됨!\");\n}\n// doSomething에 callbackFunction을 콜백으로 전달\ndoSomething(callbackFunction);\n// 출력\n/* \"작업 중...\"\n\"콜백 함수 실행됨!\"\n*/\n```\n\n\n\n자바스크립트에서 고차 함수란 무엇인가요?\n\n고차 함수는 다른 함수를 인수로 받거나 함수를 결과로 반환하는 함수를 말합니다. 고차 함수는 함수 합성, 커링, 콜백과 같은 기능적 프로그래밍 패러다임을 지원합니다.\n\n```js\n// 고차 함수 예시\nfunction operateOnArray(array, operation) {\n  return array.map(operation); // 'operation'은 콜백 함수입니다\n}\nfunction double(num) {\n  return num * 2;\n}\nlet numbers = [1, 2, 3];\nlet doubledNumbers = operateOnArray(numbers, double);\nconsole.log(doubledNumbers); // 출력: [2, 4, 6]\n```\n\n자바스크립트에서 함수 호이스팅이란 무엇인가요?\n\n\n\n펑션 호이스팅은 JavaScript의 행동 중 하나로, 펑션 선언들이 컴파일 단계에서 자신을 포함하는 스코프의 맨 위로 이동하는 것을 말합니다. 이로 인해 함수들이 코드 내에서 선언되기 전에 호출될 수 있게 됩니다.\n\n```js\nsayHello(); // 출력: \"Hello!\"\nfunction sayHello() {\n  console.log(\"Hello!\");\n}\n```\n\nJavaScript에서 클로저(concept of closure)란 무엇인가요?\n\n클로저는 함수와 해당 함수가 선언된 렉시컬 환경(lexical environment)의 조합을 의미합니다. 클로저를 통해 함수는 포함하는 스코프의 변수에 대한 참조를 유지하고 접근할 수 있게 되며, 포함하는 스코프의 실행이 완료된 이후에도 영향을 받습니다.\n\n\n\n```js\nfunction outerFunction() {\n  let outerVariable = \"외부 함수에서 왔어요\";\n  function innerFunction() {\n    console.log(outerVariable); // 클로저에서 outerVariable에 접근\n  }\n  return innerFunction;\n}\nlet closureFunc = outerFunction();\nclosureFunc(); // 출력: \"외부 함수에서 왔어요\"\n```\n\n자바스크립트 함수에서 `this` 키워드의 목적은 무엇인가요?\n\n자바스크립트 함수에서 `this` 키워드는 함수가 호출된 위치의 문맥을 가리킵니다. 이를 통해 함수들은 자신을 호출한 객체의 속성에 접근하고 조작할 수 있어 코드 재사용 및 객체지향 프로그래밍 원칙을 용이하게 합니다.\n\n```js\nlet person = {\n  name: \"John\",\n  greet: function() {\n    console.log(\"안녕, \" + this.name + \"!\");\n  }\n};\nperson.greet(); // 출력: \"안녕, John!\"\n```\n\n\n\n자바스크립트에서 함수 커링(function currying)이란 무엇인가요?\n\n함수 커링은 여러 인수를 받는 함수를 각각 하나의 인수를 받는 중첩된 함수들의 연속으로 변환하는 과정입니다. 커링은 함수의 부분 적용을 가능하게 하여 더 큰 유연성과 재사용성을 제공합니다.\n\n```js\n// 함수 커링 예시\nfunction multiply(a) {\n  return function(b) {\n    return a * b;\n  };\n}\nlet multiplyByTwo = multiply(2);\nconsole.log(multiplyByTwo(5)); // 출력: 10\n```\n\n자바스크립트에서 즉시 호출 함수 표현식(IIFE)이란 무엇인가요?\n\n\n\nIIFE는 JavaScript 디자인 패턴으로, 함수를 괄호로 둘러싸고 즉시 호출하는 것을 포함합니다. 함수에 대한 개인 스코프를 만들어 전역 스코프에서 변수 오염을 방지합니다.\n\n```js\n// 즉시 호출되는 함수 표현(IIFE)\n(function() {\n  let message = \"IIFE에서 안녕하세요\";\n  console.log(message);\n})();\n// 출력: \"IIFE에서 안녕하세요\"\n```\n\n메모이제이션의 개념은 무엇이며, JavaScript 함수에서 어떻게 구현할 수 있을까요?\n\n메모이제이션은 비싼 함수 호출의 결과를 저장하고 같은 입력이 다시 발생할 때 캐시된 결과를 반환하는 최적화 기술입니다. 클로저를 사용하여 이전에 계산된 결과를 캐싱함으로써 구현할 수 있습니다.\n\n\n\n```js\nfunction memoize(fn) {\n  let cache = {};\n  return function(...args) {\n    let key = JSON.stringify(args);\n    if (!cache[key]) {\n      cache[key] = fn(...args);\n    }\n    return cache[key];\n  };\n}\n// 메모이제이션에 이점을 가지는 함수 예시\nconst fibonacci = memoize(function(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n});\nconst result = fibonacci(10);\nconsole.log(result); // 결과 55\n```\n\n이것으로 모두 마무리입니다! 이 기사 끝까지 읽어 주셔서 감사합니다. 계속해서 학습하고成長해 나가요.\n\nJavaScript Interview Concepts- A Guide를 다운로드하시기를 잊지 마세요. 한정 기간 동안 무료로 제공될 것입니다.\n\n만약 이 기사에서 가치 있는 내용을 좋아하고 배웠다면, 구독해주시고 기사에 박수를 보내주세요.","ogImage":{"url":"/assets/img/2024-05-14-InterviewConceptsonJavaScriptFunctions_0.png"},"coverImage":"/assets/img/2024-05-14-InterviewConceptsonJavaScriptFunctions_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-InterviewConceptsonJavaScriptFunctions_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 기사는 현재 작업 중인 JavaScript 인터뷰 컨셉을 준비하는 데 도움이 되는 안내서를 기반으로 합니다. 처음 두 장(chapter)는 지금 무료로 다운로드할 수 있습니다. 가이드에 대한 피드백을 주시면 감사하겠습니다.\\nPDF 다운로드 링크는 여기에 있습니다. \", _jsx(_components.a, {\n        href: \"https://9820419704756.gumroad.com/l/gdycz\",\n        children: \"PDF 다운로드 링크\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제, 이 기사의 주제로 넘어가 봅시다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JavaScript에서 함수를 여러 가지 방법으로 만들 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"'function' 키워드를 사용하여 함수를 생성할 수 있습니다. 이를 함수 선언이라고 합니다. 아래는 예시입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addNumbers\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"a, b\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" a + b;\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예시에서 'addNumbers'라는 함수를 선언했습니다. 두 개의 인수 'a'와 'b'를 받습니다. 함수의 코드 블록에서는 + 연산자를 사용하여 두 인수를 더한 후 결과를 반환합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수 선언을 사용하는 장점 중 하나는 호이스팅이 가능하다는 것입니다. 즉, 선언되기 전에 호출할 수 있다는 의미입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기능 표현식: 함수 표현식은 함수를 변수에 할당하여 선언하는 방법입니다. 예시입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" multiply = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"a, b\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" a * b;\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"multiply\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \")); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 결과: 6\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수 표현식을 사용하는 장점은 다른 함수에 인수로 전달할 수 있다는 것입니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"화살표 함수: 화살표 함수는 JavaScript에서 함수를 선언하는 새로운 방법이며 \", _jsx(_components.code, {\n        children: \"=\"\n      }), \" 연산자를 사용합니다. 여기 예시가 있습니다:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"divide\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"a, b\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" a / b;\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"divide\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \")); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: 2\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"화살표 함수는 간결한 구문을 가지고 있어서 함수가 충분히 간단하다면 한 줄로 작성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"익명 함수: 익명 함수는 이름이 없는 함수로 다른 함수의 매개변수로 사용됩니다. 다음은 예시입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" numbers = [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \"];\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" double = numbers.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"map\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"num\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" num * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \";\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(double); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: [2, 4, 6, 8]\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"익명 함수를 사용하는 장점은 다른 함수의 콜백 함수로 사용할 수 있다는 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"면접에서 기대할 수 있는 질문\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자바스크립트에서 함수 범위의 개념을 설명해주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수 범위는 함수 내에서 변수의 가시성을 의미합니다. 함수 내에서 선언된 변수는 해당 함수 내에서만 지역 변수로써 사용되며 외부에서 접근할 수 없습니다. 이는 명명 충돌을 방지하고 캡슐화를 촉진하는 데 도움이 됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"greet\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" message = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Hello!\\\"\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(message); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// \\\"Hello!\\\"\"\n        }), \"\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"greet\"\n        }), \"();\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(message); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Uncaught ReferenceError: 'message' is not defined\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JavaScript에서 콜백 함수란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"콜백 함수는 다른 함수의 인수로 전달되어 외부 함수 내에서 호출되는 함수를 말합니다. 콜백 함수는 주로 비동기 작업, 이벤트 처리 및 고차 함수에서 사용됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"doSomething\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"callback\"\n        }), \") {\\n   \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"작업 중...\\\"\"\n        }), \");\\n   \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"callback\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 콜백 함수 실행\"\n        }), \"\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"callbackFunction\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n   \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"콜백 함수 실행됨!\\\"\"\n        }), \");\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// doSomething에 callbackFunction을 콜백으로 전달\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"doSomething\"\n        }), \"(callbackFunction);\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* \\\"작업 중...\\\"\\n\\\"콜백 함수 실행됨!\\\"\\n*/\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자바스크립트에서 고차 함수란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"고차 함수는 다른 함수를 인수로 받거나 함수를 결과로 반환하는 함수를 말합니다. 고차 함수는 함수 합성, 커링, 콜백과 같은 기능적 프로그래밍 패러다임을 지원합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 고차 함수 예시\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"operateOnArray\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"array, operation\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" array.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"map\"\n        }), \"(operation); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 'operation'은 콜백 함수입니다\"\n        }), \"\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"double\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"num\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" num * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \";\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" numbers = [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"];\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" doubledNumbers = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"operateOnArray\"\n        }), \"(numbers, double);\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(doubledNumbers); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: [2, 4, 6]\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자바스크립트에서 함수 호이스팅이란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"펑션 호이스팅은 JavaScript의 행동 중 하나로, 펑션 선언들이 컴파일 단계에서 자신을 포함하는 스코프의 맨 위로 이동하는 것을 말합니다. 이로 인해 함수들이 코드 내에서 선언되기 전에 호출될 수 있게 됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sayHello\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: \\\"Hello!\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sayHello\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Hello!\\\"\"\n        }), \");\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JavaScript에서 클로저(concept of closure)란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클로저는 함수와 해당 함수가 선언된 렉시컬 환경(lexical environment)의 조합을 의미합니다. 클로저를 통해 함수는 포함하는 스코프의 변수에 대한 참조를 유지하고 접근할 수 있게 되며, 포함하는 스코프의 실행이 완료된 이후에도 영향을 받습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"outerFunction\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" outerVariable = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"외부 함수에서 왔어요\\\"\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"innerFunction\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(outerVariable); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 클로저에서 outerVariable에 접근\"\n        }), \"\\n  }\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" innerFunction;\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" closureFunc = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"outerFunction\"\n        }), \"();\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"closureFunc\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: \\\"외부 함수에서 왔어요\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"자바스크립트 함수에서 \", _jsx(_components.code, {\n        children: \"this\"\n      }), \" 키워드의 목적은 무엇인가요?\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"자바스크립트 함수에서 \", _jsx(_components.code, {\n        children: \"this\"\n      }), \" 키워드는 함수가 호출된 위치의 문맥을 가리킵니다. 이를 통해 함수들은 자신을 호출한 객체의 속성에 접근하고 조작할 수 있어 코드 재사용 및 객체지향 프로그래밍 원칙을 용이하게 합니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" person = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"John\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"greet\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"안녕, \\\"\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"!\\\"\"\n        }), \");\\n  }\\n};\\nperson.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"greet\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: \\\"안녕, John!\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자바스크립트에서 함수 커링(function currying)이란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수 커링은 여러 인수를 받는 함수를 각각 하나의 인수를 받는 중첩된 함수들의 연속으로 변환하는 과정입니다. 커링은 함수의 부분 적용을 가능하게 하여 더 큰 유연성과 재사용성을 제공합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 함수 커링 예시\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"multiply\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"a\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"b\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" a * b;\\n  };\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" multiplyByTwo = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"multiply\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"multiplyByTwo\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \")); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: 10\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자바스크립트에서 즉시 호출 함수 표현식(IIFE)이란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"IIFE는 JavaScript 디자인 패턴으로, 함수를 괄호로 둘러싸고 즉시 호출하는 것을 포함합니다. 함수에 대한 개인 스코프를 만들어 전역 스코프에서 변수 오염을 방지합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 즉시 호출되는 함수 표현(IIFE)\"\n        }), \"\\n(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" message = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"IIFE에서 안녕하세요\\\"\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(message);\\n})();\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: \\\"IIFE에서 안녕하세요\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"메모이제이션의 개념은 무엇이며, JavaScript 함수에서 어떻게 구현할 수 있을까요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"메모이제이션은 비싼 함수 호출의 결과를 저장하고 같은 입력이 다시 발생할 때 캐시된 결과를 반환하는 최적화 기술입니다. 클로저를 사용하여 이전에 계산된 결과를 캐싱함으로써 구현할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"memoize\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"fn\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" cache = {};\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"...args\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" key = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JSON\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"stringify\"\n        }), \"(args);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!cache[key]) {\\n      cache[key] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fn\"\n        }), \"(...args);\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" cache[key];\\n  };\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 메모이제이션에 이점을 가지는 함수 예시\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" fibonacci = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"memoize\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"n\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (n <= \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" n;\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fibonacci\"\n        }), \"(n - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") + \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fibonacci\"\n        }), \"(n - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \");\\n});\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" result = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fibonacci\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(result); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 결과 55\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것으로 모두 마무리입니다! 이 기사 끝까지 읽어 주셔서 감사합니다. 계속해서 학습하고成長해 나가요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JavaScript Interview Concepts- A Guide를 다운로드하시기를 잊지 마세요. 한정 기간 동안 무료로 제공될 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 이 기사에서 가치 있는 내용을 좋아하고 배웠다면, 구독해주시고 기사에 박수를 보내주세요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}