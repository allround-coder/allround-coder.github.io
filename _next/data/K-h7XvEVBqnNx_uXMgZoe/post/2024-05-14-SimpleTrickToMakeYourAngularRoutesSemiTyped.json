{"pageProps":{"post":{"title":"Angular Routes반쯤 타입 지정하는 간단한 꿀팁","description":"","date":"2024-05-14 12:31","slug":"2024-05-14-SimpleTrickToMakeYourAngularRoutesSemiTyped","content":"\n\n```\n![Simple Trick To Make Your Angular Routes Semi-Typed](/assets/img/2024-05-14-SimpleTrickToMakeYourAngularRoutesSemiTyped_0.png)\n\n링크나 버튼 요소의 [routerLink] 지시문이 하드 코딩된 값을 입력받는 프로젝트를 많이 본 적이 있습니다. 예를 들어:\n\n```js\n<a [routerLink]=\"['/movies', movie.id, 'edit']\"> 영화 편집 </a>\n```\n\n만약 언젠가 movie를 film으로, edit을 update로 변경하고 싶을 때 링크가 깨지는 경우가 발생할 수 있습니다. 그래서 저는 이에 대한 일종의 방어선으로 작동하는 작은 꼼수를 고안해보았습니다.\n\n\n\n\n## 단계 1: 라우트 정의하기\n\n우리가 몇 개의 인증 관련 라우트들 중 일부를 가지고 있다고 가정해봅시다. auth.routes.ts 파일을 만들고 먼저 타입 또는 인터페이스를 생성할 것입니다:\n\n```js\nexport type AuthRoutes = {\n    login: Route\n    register: Route\n    verifyEmail: Route\n}\n```\n\n이제 인터페이스에 따라 라우트를 선언해보겠습니다:\n\n\n\n```js\nexport const authRoutes: AuthRoutes = {\n    login: {\n        path: 'login',\n        loadComponent: () => import('./login.component')\n            .then((m) => m.LoginComponent),\n    },\n    register: {\n        path: 'register',\n        loadComponent: () => import('./register.component')\n            .then((m) => RegisterComponent),\n    },\n    verifyEmail: {\n        path: 'verify-email/:token',\n        loadComponent: () => import('./verify-email.component')\n            .then((m) => m.VerifyEmailComponent),\n    },\n}\n```\n\n동일한 방식으로, 편의에 맞게 다른 세분화된 route 파일을 만들어보세요.\n\n```js\nexport type MovieRoutes = {\n    movieByActor: Route\n}\n\nexport const movieRoutes: MovieRoutes = {\n    movieByActor: {\n        path: 'dashboard/actors/:actorId/movies/:movieId',\n        loadComponent: import('./movie-details.component')\n            .then(m => m.MovieDetailsComponent),\n    }\n}\n```\n\n또한 not-found-page.route.ts에 다음과 같은 캐치-올 route를 만들어봅시다:```\n\n\n\n```js\nexport type NotFoundPageRoutes = {\n    index: Route\n}\n\nexport const notFoundPageRoutes: NotFoundPageRoutes = {\n    index: {\n        path: '**',\n        loadComponent: () => import('./not-found.page'),\n    },\n}\n```\n\n## 스텝 2: 라우트 등록하기\n\n앱 라우트 파일인 app.routes.ts로 돌아가거나 애플리케이션 라우트를 정의한 곳으로 이동하세요. 모든 그룹화된 라우트를 여기로 가져와주세요:\n\n```js\ntype GroupedRoutes = [\n    HomeRoutes,\n    AuthRoutes,\n    MovieRoutes,\n    // 모든 것을 수용하는 라우트는 마지막에 위치해야 합니다\n    NotFoundPageRoutes,\n]\n\nconst groupedRoutes: GroupedRoutes = [\n    homeRoutes,\n    authRoutes,\n    movieRoutes,\n    notFoundPageRoutes,\n]\n```\n\n\n\n우리의 루트는 객체 안에 있기 때문에 펼쳐주어야 해요:\n\n```js\nconst flattenedRoutes: Route[] = []\nfor (const routeGroup of groupedRoutes) {\n    for (const route of Object.values(routeGroup)) {\n        flattenedRoutes.push(route)\n    }\n}\n\nexport const AppRoutes = flattenedRoutes\n```\n\n앱 설정에 라우트를 등록해주세요 (일반적으로 app.config.ts 또는 main.ts 파일에 위치합니다):\n\n```js\nimport { ApplicationConfig, importProvidersFrom } from '@angular/core'\n// ... 다른 import들\n\nexport const appConfig: ApplicationConfig = {\n    providers: [\n        // ... 다른 프로바이더들\n        provideRouter(\n\n        \tAppRoutes, // <-- 여기에 펼쳐진 라우트를 import 해요\n\n        ),\n    ],\n}\n```\n\n\n\n## 단계 3: 사용하기\n\n이 시점에서 우리의 솔루션이 준비되었습니다. 테스트 컴포넌트에서의 사용 예시:\n\n```js\nimport { authRoutes, AuthRoutes } from 'src/pages/auth/auth.routes.ts';\n\n@Component({\n    selector: 'app-test',\n    standalone: true,\n    imports: [CommonModule, RouterModule],\n    template: `\n      <a\n        routerLink=\"{ '/' + authRoutes.login.path }\"\n      >\n        로그인\n      </a>\n          \n      <a \n        routerLink=\"{ '/' + authRoutes.register.path }\"\n      >\n        회원 가입\n      </a>\n  \n      <!-- 경로 매개 변수 대체 -->\n      <a \n        routerLink=\"{ \n          '/' + authRoutes.verifyEmail.path.replace(':token', token) \n        }\">\n          이메일 확인\n      </a>\n\n      <!-- 컨트롤러 클래스 내에서 사용 -->\n      <button (click)=\"goToMoviesHome()\">\n        내 대시보드\n      </button>\n      \n      <button (click)=\"goToMovie(actorId, movieId)\">\n        영화 상세 정보 보기\n      </button>\n    `,\n    styleUrl: './test.component.scss',\n})\nexport class TestComponent {\n    readonly authRoutes: AuthRoutes = authRoutes\n    \n    token = 'abcd1234'\n    movieId = '2'\n    actorId = '1'\n    \n    goToMoviesHome() {\n      this.router.navigateByUrl('/' + this.movieRoutes.index.path)\n    }\n\n    goToMovie(actorId: string, movieId: string) {\n      this.router.navigateByUrl('/' + \n        this.movieRoutes.movieByActor\n          .replace(':actorId', this.actorId)\n          .replace(':movieId', this.movieId)\n      )\n    }\n}\n```\n\n이제 경로가 원치 않는 링크 차단에 대한 정도로 더 안전합니다. 한 곳에서 경로 값을 변경하면 모든 링크가 그에 맞게 업데이트됩니다.\n\n\n\n# 친절한 영어로 🚀\n\nIn Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 다음에 가시기 전에:\n\n- 반드시 글쓴이를 클랩하고 팔로우해 주세요 👏\n- 저희를 팔로우해 주세요: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼에서도 만나보세요: Stackademic | CoFeed | Venture | Cubed\n- PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요","ogImage":{"url":"/assets/img/2024-05-14-SimpleTrickToMakeYourAngularRoutesSemiTyped_0.png"},"coverImage":"/assets/img/2024-05-14-SimpleTrickToMakeYourAngularRoutesSemiTyped_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    h2: \"h2\",\n    span: \"span\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"![Simple Trick To Make Your Angular Routes Semi-Typed](/assets/img/2024-05-14-SimpleTrickToMakeYourAngularRoutesSemiTyped_0.png)\\n\\n링크나 버튼 요소의 [routerLink] 지시문이 하드 코딩된 값을 입력받는 프로젝트를 많이 본 적이 있습니다. 예를 들어:\\n\\n```js\\n<a [routerLink]=\\\"['/movies', movie.id, 'edit']\\\"> 영화 편집 </a>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 언젠가 movie를 film으로, edit을 update로 변경하고 싶을 때 링크가 깨지는 경우가 발생할 수 있습니다. 그래서 저는 이에 대한 일종의 방어선으로 작동하는 작은 꼼수를 고안해보았습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 1: 라우트 정의하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리가 몇 개의 인증 관련 라우트들 중 일부를 가지고 있다고 가정해봅시다. auth.routes.ts 파일을 만들고 먼저 타입 또는 인터페이스를 생성할 것입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AuthRoutes\"\n        }), \" = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"login\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Route\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"register\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Route\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"verifyEmail\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Route\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 인터페이스에 따라 라우트를 선언해보겠습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"authRoutes\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AuthRoutes\"\n        }), \" = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"login\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"path\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'login'\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"loadComponent\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./login.component'\"\n        }), \")\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"m\"\n          }), \") =>\"]\n        }), \" m.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"LoginComponent\"\n        }), \"),\\n    },\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"register\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"path\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'register'\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"loadComponent\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./register.component'\"\n        }), \")\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"m\"\n          }), \") =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RegisterComponent\"\n        }), \"),\\n    },\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"verifyEmail\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"path\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'verify-email/:token'\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"loadComponent\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./verify-email.component'\"\n        }), \")\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"m\"\n          }), \") =>\"]\n        }), \" m.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"VerifyEmailComponent\"\n        }), \"),\\n    },\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"동일한 방식으로, 편의에 맞게 다른 세분화된 route 파일을 만들어보세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MovieRoutes\"\n        }), \" = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"movieByActor\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Route\"\n        }), \"\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"movieRoutes\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MovieRoutes\"\n        }), \" = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"movieByActor\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"path\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'dashboard/actors/:actorId/movies/:movieId'\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"loadComponent\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./movie-details.component'\"\n        }), \")\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"m\"\n          }), \" =>\"]\n        }), \" m.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"MovieDetailsComponent\"\n        }), \"),\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한 not-found-page.route.ts에 다음과 같은 캐치-올 route를 만들어봅시다:```\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NotFoundPageRoutes\"\n        }), \" = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"index\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Route\"\n        }), \"\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"notFoundPageRoutes\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NotFoundPageRoutes\"\n        }), \" = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"index\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"path\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'**'\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"loadComponent\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./not-found.page'\"\n        }), \"),\\n    },\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"스텝 2: 라우트 등록하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앱 라우트 파일인 app.routes.ts로 돌아가거나 애플리케이션 라우트를 정의한 곳으로 이동하세요. 모든 그룹화된 라우트를 여기로 가져와주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GroupedRoutes\"\n        }), \" = [\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"HomeRoutes\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AuthRoutes\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MovieRoutes\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 모든 것을 수용하는 라우트는 마지막에 위치해야 합니다\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NotFoundPageRoutes\"\n        }), \",\\n]\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"groupedRoutes\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GroupedRoutes\"\n        }), \" = [\\n    homeRoutes,\\n    authRoutes,\\n    movieRoutes,\\n    notFoundPageRoutes,\\n]\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리의 루트는 객체 안에 있기 때문에 펼쳐주어야 해요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"flattenedRoutes\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Route\"\n        }), \"[] = []\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" routeGroup \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \" groupedRoutes) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" route \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Object\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"values\"\n        }), \"(routeGroup)) {\\n        flattenedRoutes.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(route)\\n    }\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AppRoutes\"\n        }), \" = flattenedRoutes\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앱 설정에 라우트를 등록해주세요 (일반적으로 app.config.ts 또는 main.ts 파일에 위치합니다):\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ApplicationConfig\"\n        }), \", importProvidersFrom } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/core'\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// ... 다른 import들\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"appConfig\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ApplicationConfig\"\n        }), \" = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"providers\"\n        }), \": [\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// ... 다른 프로바이더들\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"provideRouter\"\n        }), \"(\\n\\n        \\t\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AppRoutes\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// <-- 여기에 펼쳐진 라우트를 import 해요\"\n        }), \"\\n\\n        ),\\n    ],\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 3: 사용하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 시점에서 우리의 솔루션이 준비되었습니다. 테스트 컴포넌트에서의 사용 예시:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { authRoutes, \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AuthRoutes\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'src/pages/auth/auth.routes.ts'\"\n        }), \";\\n\\n@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'app-test'\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"standalone\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"imports\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CommonModule\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RouterModule\"\n        }), \"],\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"template\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`\\n      <a\\n        routerLink=\\\"{ '/' + authRoutes.login.path }\\\"\\n      >\\n        로그인\\n      </a>\\n          \\n      <a \\n        routerLink=\\\"{ '/' + authRoutes.register.path }\\\"\\n      >\\n        회원 가입\\n      </a>\\n  \\n      <!-- 경로 매개 변수 대체 -->\\n      <a \\n        routerLink=\\\"{ \\n          '/' + authRoutes.verifyEmail.path.replace(':token', token) \\n        }\\\">\\n          이메일 확인\\n      </a>\\n\\n      <!-- 컨트롤러 클래스 내에서 사용 -->\\n      <button (click)=\\\"goToMoviesHome()\\\">\\n        내 대시보드\\n      </button>\\n      \\n      <button (click)=\\\"goToMovie(actorId, movieId)\\\">\\n        영화 상세 정보 보기\\n      </button>\\n    `\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"styleUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./test.component.scss'\"\n        }), \",\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TestComponent\"\n        }), \" {\\n    readonly \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"authRoutes\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AuthRoutes\"\n        }), \" = authRoutes\\n    \\n    token = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'abcd1234'\"\n        }), \"\\n    movieId = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'2'\"\n        }), \"\\n    actorId = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'1'\"\n        }), \"\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"goToMoviesHome\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"router\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"navigateByUrl\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/'\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"movieRoutes\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"index\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"path\"\n        }), \")\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"goToMovie\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"actorId: string, movieId: string\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"router\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"navigateByUrl\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/'\"\n        }), \" + \\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"movieRoutes\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"movieByActor\"\n        }), \"\\n          .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"replace\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"':actorId'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"actorId\"\n        }), \")\\n          .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"replace\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"':movieId'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"movieId\"\n        }), \")\\n      )\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 경로가 원치 않는 링크 차단에 대한 정도로 더 안전합니다. 한 곳에서 경로 값을 변경하면 모든 링크가 그에 맞게 업데이트됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"친절한 영어로 🚀\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 다음에 가시기 전에:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"반드시 글쓴이를 클랩하고 팔로우해 주세요 👏\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"저희를 팔로우해 주세요: X | LinkedIn | YouTube | Discord | 뉴스레터\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다른 플랫폼에서도 만나보세요: Stackademic | CoFeed | Venture | Cubed\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}