{"pageProps":{"post":{"title":"사용자 경험 향상을 위한 사용자 정의 JavaScript 활용하기 Div 바깥에서의 클릭 처리하기","description":"","date":"2024-05-12 20:00","slug":"2024-05-12-TitleLeveragingCustomJavaScripttoEnhanceUserExperienceHandlingClicksOutsideaDiv","content":"\n\n<img src=\"/assets/img/2024-05-12-TitleLeveragingCustomJavaScripttoEnhanceUserExperienceHandlingClicksOutsideaDiv_0.png\" />\n\n현대 웹 개발에서 사용자가 직관적이고 원활한 경험을 할 수 있도록 만들어주는 것이 매우 중요합니다. 개발자들이 자주 마주치는 상황 중 하나는 드롭다운 메뉴, 모달 또는 페이지의 다른 곳을 클릭했을 때 해당 요소가 닫혀야 하는 경우입니다. 이 글에서는 이 요구 사항을 우아하게 처리하기 위한 사용자 정의 JavaScript 솔루션을 알아보겠습니다.\n\n문제 이해하기:\n\n사용자 정의 JavaScript 소개:\n\n\n\n이번 도전에 대처하기 위해 JavaScript에서 클릭이 지정된 요소 외부에서 발생하는지 감지하는 재사용 가능한 사용자 지정 후크(custom hook)를 만들 것입니다. 이 후크는 사용자 인터페이스를 구축하기 위한 인기 있는 JavaScript 라이브러리인 React를 활용하여 우리의 프론트엔드 코드베이스와 시킬 것입니다.\n\nClickOutsideWrapper.js\n\n```js\n//필요한 종속성을 가져옵니다.\nimport React, { useRef, useEffect } from 'react';\n\n//지정된 요소 외부에서 클릭을 처리하는 사용자 정의 후크\nconst useClickOutside = (handler) => {\n  const ref = useRef();\n\n  //요소 외부 클릭을 처리하는 함수\n  const handleClickOutside = (event) => {\n    if (ref.current && !ref.current.contains(event.target) && typeof handler === 'function') {\n      handler();\n    }\n  };\n\n  useEffect(() => {\n    //마우스 다운 이벤트에 대한 이벤트 리스너 추가\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      //컴포넌트 해제 시 이벤트 리스너 제거\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [handler]); //의존성 배열에 핸들러를 포함\n\n  return ref;\n};\n\n//useClickOutside 후크를 활용하는 래퍼 컴포넌트\nconst ClickOutsideWrapper = ({ children, onClickOutside }) => {\n  const wrapperRef = useClickOutside(onClickOutside);\n  return <div ref={wrapperRef}>{children}</div>;\n};\n\nexport default ClickOutsideWrapper;\n```\n\n구현 탐색:\n\n\n\n- useClickOutside 훅: 이 사용자 정의 훅은 지정된 요소 외부의 클릭을 감지하는 로직을 캡슐화합니다. 콜백 함수 핸들러를 인수로 사용하며, 해당 요소 외부를 클릭할 때 호출됩니다.\n- handleClickOutside 함수: 이 함수는 ref로 참조된 요소 외부에서 클릭이 발생했는지 확인합니다. 그리고 유효한 핸들러 함수가 제공되었고, 클릭이 요소 외부에서 발생했다면 핸들러를 실행합니다.\n- useEffect 훅: 이 훅은 요소 외부의 클릭을 감지하는 이벤트 리스너를 추가하고 제거하는 역할을 담당합니다. 컴포넌트가 언마운트될 때 이벤트 리스너가 제대로 정리되도록 하여 메모리 누수를 예방합니다.\n- ClickOutsideWrapper 컴포넌트: 이 컴포넌트는 해당 요소 외부의 클릭을 감지해야 하는 요소 주위에 래퍼 역할을 합니다. useClickOutside 훅을 활용하고 onClickOutside 콜백 프롭을 전달합니다.\n\n실용적인 사용 사례:\n\n- 드롭다운 메뉴: 사용자가 메뉴 외부를 클릭하면 드롭다운 메뉴를 닫습니다.\n- 모달: 사용자가 모달 외부 요소와 상호 작용할 때 모달을 닫습니다.\n- 컨텍스트 메뉴: 페이지의 다른 곳을 클릭하면 컨텍스트 메뉴를 숨깁니다.\n- 팝오버 및 툴팁: 연관된 요소 외부를 클릭하면 팝오버와 툴팁을 닫습니다.\n\n컴포넌트에서 사용:\n\n\n\n```js\nimport React, { useState } from 'react';\nimport ClickOutsideWrapper from './ClickOutsideWrapper';\n\nconst DropdownMenu = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Toggle dropdown menu visibility\n  const toggleMenu = () => {\n    setIsOpen(!isOpen);\n  };\n\n  // Close dropdown menu when clicked outside\n  const closeMenu = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"dropdown\">\n      {/* 버튼을 클릭하여 메뉴 표시 여부를 전환합니다. */}\n      <button onClick={toggleMenu}>메뉴 전환</button>\n      \n      {/* 드롭다운 메뉴 */}\n      {isOpen && (\n        <ClickOutsideWrapper onClickOutside={closeMenu}>\n          <div className=\"menu\">\n            <ul>\n              <li>옵션 1</li>\n              <li>옵션 2</li>\n              <li>옵션 3</li>\n            </ul>\n          </div>\n        </ClickOutsideWrapper>\n      )}\n    </div>\n  );\n};\n\nexport default DropdownMenu;\n```\n\n이 예제에서:\n\n- DropdownMenu 컴포넌트를 가지고 있으며 버튼을 렌더링하여 메뉴의 가시성을 토글합니다.\n- 버튼을 클릭하면 isOpen 상태가 토글되고, 이는 메뉴가 표시되는지 여부를 제어합니다.\n- DropdownMenu 컴포넌트 내에서 isOpen 상태를 사용하여 드롭다운 메뉴를 조건부로 렌더링합니다.\n- 드롭다운 메뉴는 ClickOutsideWrapper 컴포넌트로 래핑되어 있으며 onClickOutside 프롭을 가지고 있습니다. 이 프롭은 메뉴 외부를 클릭했을 때 메뉴를 닫는 closeMenu 함수로 설정됩니다.\n- 사용자가 드롭다운 메뉴 외부 요소와 상호 작용할 때 ClickOutsideWrapper 컴포넌트를 사용하여 메뉴가 자동으로 닫히도록 하여 매끄러운 사용자 경험을 제공합니다.```\n\n\n\nNPM 패키지:\n\n패키지 링크: [click-outside-wrapper](https://www.npmjs.com/package/click-outside-wrapper)\n\n결론:\n\n여기서 소개된 것과 같이 사용자 정의 JavaScript 솔루션을 활용함으로써 개발자들은 웹 애플리케이션의 사용성을 향상시킬 수 있습니다. 특정 요소 외부의 클릭을 감지하는 능력은 개발자들이 더 직관적이고 사용자 친화적인 인터페이스를 만들 수 있도록 돕습니다. 드롭다운 메뉴, 모달 또는 기타 상호 작용 요소일지라도 클릭 외부 기능을 구현하면 웹 개발자에게 귀중한 도구가 됩니다.","ogImage":{"url":"/assets/img/2024-05-12-TitleLeveragingCustomJavaScripttoEnhanceUserExperienceHandlingClicksOutsideaDiv_0.png"},"coverImage":"/assets/img/2024-05-12-TitleLeveragingCustomJavaScripttoEnhanceUserExperienceHandlingClicksOutsideaDiv_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-TitleLeveragingCustomJavaScripttoEnhanceUserExperienceHandlingClicksOutsideaDiv_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현대 웹 개발에서 사용자가 직관적이고 원활한 경험을 할 수 있도록 만들어주는 것이 매우 중요합니다. 개발자들이 자주 마주치는 상황 중 하나는 드롭다운 메뉴, 모달 또는 페이지의 다른 곳을 클릭했을 때 해당 요소가 닫혀야 하는 경우입니다. 이 글에서는 이 요구 사항을 우아하게 처리하기 위한 사용자 정의 JavaScript 솔루션을 알아보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"문제 이해하기:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자 정의 JavaScript 소개:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이번 도전에 대처하기 위해 JavaScript에서 클릭이 지정된 요소 외부에서 발생하는지 감지하는 재사용 가능한 사용자 지정 후크(custom hook)를 만들 것입니다. 이 후크는 사용자 인터페이스를 구축하기 위한 인기 있는 JavaScript 라이브러리인 React를 활용하여 우리의 프론트엔드 코드베이스와 시킬 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ClickOutsideWrapper.js\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//필요한 종속성을 가져옵니다.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useRef, useEffect } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//지정된 요소 외부에서 클릭을 처리하는 사용자 정의 후크\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useClickOutside\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"handler\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" ref = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useRef\"\n        }), \"();\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//요소 외부 클릭을 처리하는 함수\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleClickOutside\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"event\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (ref.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \" && !ref.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"contains\"\n        }), \"(event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"target\"\n        }), \") && \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" handler === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'function'\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handler\"\n        }), \"();\\n    }\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//마우스 다운 이벤트에 대한 이벤트 리스너 추가\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'mousedown'\"\n        }), \", handleClickOutside);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//컴포넌트 해제 시 이벤트 리스너 제거\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"removeEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'mousedown'\"\n        }), \", handleClickOutside);\\n    };\\n  }, [handler]); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//의존성 배열에 핸들러를 포함\"\n        }), \"\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" ref;\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//useClickOutside 후크를 활용하는 래퍼 컴포넌트\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ClickOutsideWrapper\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ children, onClickOutside }\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" wrapperRef = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useClickOutside\"\n        }), \"(onClickOutside);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ref\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{wrapperRef}\"\n            }), \">\"]\n          }), \"{children}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \";\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ClickOutsideWrapper\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구현 탐색:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"useClickOutside 훅: 이 사용자 정의 훅은 지정된 요소 외부의 클릭을 감지하는 로직을 캡슐화합니다. 콜백 함수 핸들러를 인수로 사용하며, 해당 요소 외부를 클릭할 때 호출됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"handleClickOutside 함수: 이 함수는 ref로 참조된 요소 외부에서 클릭이 발생했는지 확인합니다. 그리고 유효한 핸들러 함수가 제공되었고, 클릭이 요소 외부에서 발생했다면 핸들러를 실행합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"useEffect 훅: 이 훅은 요소 외부의 클릭을 감지하는 이벤트 리스너를 추가하고 제거하는 역할을 담당합니다. 컴포넌트가 언마운트될 때 이벤트 리스너가 제대로 정리되도록 하여 메모리 누수를 예방합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ClickOutsideWrapper 컴포넌트: 이 컴포넌트는 해당 요소 외부의 클릭을 감지해야 하는 요소 주위에 래퍼 역할을 합니다. useClickOutside 훅을 활용하고 onClickOutside 콜백 프롭을 전달합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"실용적인 사용 사례:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"드롭다운 메뉴: 사용자가 메뉴 외부를 클릭하면 드롭다운 메뉴를 닫습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"모달: 사용자가 모달 외부 요소와 상호 작용할 때 모달을 닫습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"컨텍스트 메뉴: 페이지의 다른 곳을 클릭하면 컨텍스트 메뉴를 숨깁니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"팝오버 및 툴팁: 연관된 요소 외부를 클릭하면 팝오버와 툴팁을 닫습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컴포넌트에서 사용:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ClickOutsideWrapper\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./ClickOutsideWrapper'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"DropdownMenu\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [isOpen, setIsOpen] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \");\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Toggle dropdown menu visibility\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toggleMenu\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setIsOpen\"\n        }), \"(!isOpen);\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Close dropdown menu when clicked outside\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"closeMenu\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setIsOpen\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \");\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"dropdown\\\"\"\n            }), \">\"]\n          }), \"\\n      {/* 버튼을 클릭하여 메뉴 표시 여부를 전환합니다. */}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{toggleMenu}\"\n            }), \">\"]\n          }), \"메뉴 전환\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n      \\n      {/* 드롭다운 메뉴 */}\\n      {isOpen && (\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ClickOutsideWrapper\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClickOutside\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{closeMenu}\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"menu\\\"\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ul\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          }), \"옵션 1\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          }), \"옵션 2\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          }), \"옵션 3\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ul\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ClickOutsideWrapper\"\n            }), \">\"]\n          }), \"\\n      )}\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DropdownMenu\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예제에서:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"DropdownMenu 컴포넌트를 가지고 있으며 버튼을 렌더링하여 메뉴의 가시성을 토글합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"버튼을 클릭하면 isOpen 상태가 토글되고, 이는 메뉴가 표시되는지 여부를 제어합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"DropdownMenu 컴포넌트 내에서 isOpen 상태를 사용하여 드롭다운 메뉴를 조건부로 렌더링합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"드롭다운 메뉴는 ClickOutsideWrapper 컴포넌트로 래핑되어 있으며 onClickOutside 프롭을 가지고 있습니다. 이 프롭은 메뉴 외부를 클릭했을 때 메뉴를 닫는 closeMenu 함수로 설정됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"사용자가 드롭다운 메뉴 외부 요소와 상호 작용할 때 ClickOutsideWrapper 컴포넌트를 사용하여 메뉴가 자동으로 닫히도록 하여 매끄러운 사용자 경험을 제공합니다.```\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NPM 패키지:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"패키지 링크: \", _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/click-outside-wrapper\",\n        children: \"click-outside-wrapper\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"결론:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 소개된 것과 같이 사용자 정의 JavaScript 솔루션을 활용함으로써 개발자들은 웹 애플리케이션의 사용성을 향상시킬 수 있습니다. 특정 요소 외부의 클릭을 감지하는 능력은 개발자들이 더 직관적이고 사용자 친화적인 인터페이스를 만들 수 있도록 돕습니다. 드롭다운 메뉴, 모달 또는 기타 상호 작용 요소일지라도 클릭 외부 기능을 구현하면 웹 개발자에게 귀중한 도구가 됩니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}