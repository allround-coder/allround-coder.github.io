{"pageProps":{"post":{"title":"Dayjs로 날짜 조작하기 - 주어진 시간을 추가하거나 빼기","description":"","date":"2024-05-13 00:23","slug":"2024-05-13-ManipulatingDateswithDayjsAddorSubtractaGivenAmountofTime","content":"\n\n<img src=\"/assets/img/2024-05-13-ManipulatingDateswithDayjsAddorSubtractaGivenAmountofTime_0.png\" />\n\nDay.js는 우리 앱에서 날짜를 조작할 수 있게 해주는 JavaScript 라이브러리입니다.\n\n이 기사에서는 JavaScript 앱에서 Day.js를 사용하여 날짜를 조작하는 방법을 살펴보겠습니다.\n\n# 주어진 시간 만큼 추가하거나 빼기\n\n\n\nDay.js의 Date 객체에 add 메소드를 사용하여 지정된 시간을 추가할 수 있어요.\n\n예를 들어, 다음과 같이 작성할 수 있어요:\n\n```js\nconst dayjs = require(\"dayjs\");\nconst result = dayjs().add(7, \"day\");\nconsole.log(result);\n```\n\n현재 날짜 및 시간에 7일을 추가하려면 이렇게 해보세요.\n\n\n\n우리는 첫 번째 인수로 `year`, `month`, `date`, `hour`, `minute`, `second`, 그리고 `millisecond` 단위 값 중 하나를 사용하여 add 메서드를 호출합니다.\n\n두 번째 인수는 설정할 값입니다.\n\n1월부터 시작하는 월은 JavaScript 날짜와 같이 0으로 시작합니다.\n\n각 인수 문자열에 대한 축약어도 있습니다.\n\n\n\n`y`는 `year`의 약어입니다.\n\n`M`은 `month`의 약어입니다.\n\n`D`는 `date`의 약어입니다.\n\n`d`는 `day`의 약어이며, 이는 주의 요일을 나타냅니다. 0은 일요일부터 시작하며, 6은 토요일을 의미합니다.\n\n\n\n`h`은 `시간`의 약자입니다.\n\n`m`은 `분`의 약자입니다.\n\n`s`는 `초`의 약자입니다.\n\n그리고 `ms`는 `밀리초`의 약자입니다.\n\n\n\n웹 애플리케이션에서 날짜를 조작할 수 있는 JavaScript 라이브러리인 Day.js를 사용해봤네요. \"add\"를 \"subtract\"로 대체하고 동일한 인수를 유지하여 특정 시간을 뺄 수 있습니다.\n\n# 결론","ogImage":{"url":"/assets/img/2024-05-13-ManipulatingDateswithDayjsAddorSubtractaGivenAmountofTime_0.png"},"coverImage":"/assets/img/2024-05-13-ManipulatingDateswithDayjsAddorSubtractaGivenAmountofTime_0.png","tag":["Tech"],"readingTime":1},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-13-ManipulatingDateswithDayjsAddorSubtractaGivenAmountofTime_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Day.js는 우리 앱에서 날짜를 조작할 수 있게 해주는 JavaScript 라이브러리입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기사에서는 JavaScript 앱에서 Day.js를 사용하여 날짜를 조작하는 방법을 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"주어진 시간 만큼 추가하거나 빼기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Day.js의 Date 객체에 add 메소드를 사용하여 지정된 시간을 추가할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예를 들어, 다음과 같이 작성할 수 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" dayjs = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dayjs\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" result = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dayjs\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"add\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"day\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(result);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현재 날짜 및 시간에 7일을 추가하려면 이렇게 해보세요.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"우리는 첫 번째 인수로 \", _jsx(_components.code, {\n        children: \"year\"\n      }), \", \", _jsx(_components.code, {\n        children: \"month\"\n      }), \", \", _jsx(_components.code, {\n        children: \"date\"\n      }), \", \", _jsx(_components.code, {\n        children: \"hour\"\n      }), \", \", _jsx(_components.code, {\n        children: \"minute\"\n      }), \", \", _jsx(_components.code, {\n        children: \"second\"\n      }), \", 그리고 \", _jsx(_components.code, {\n        children: \"millisecond\"\n      }), \" 단위 값 중 하나를 사용하여 add 메서드를 호출합니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"두 번째 인수는 설정할 값입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"1월부터 시작하는 월은 JavaScript 날짜와 같이 0으로 시작합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"각 인수 문자열에 대한 축약어도 있습니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"y\"\n      }), \"는 \", _jsx(_components.code, {\n        children: \"year\"\n      }), \"의 약어입니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"M\"\n      }), \"은 \", _jsx(_components.code, {\n        children: \"month\"\n      }), \"의 약어입니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"D\"\n      }), \"는 \", _jsx(_components.code, {\n        children: \"date\"\n      }), \"의 약어입니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"d\"\n      }), \"는 \", _jsx(_components.code, {\n        children: \"day\"\n      }), \"의 약어이며, 이는 주의 요일을 나타냅니다. 0은 일요일부터 시작하며, 6은 토요일을 의미합니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"h\"\n      }), \"은 \", _jsx(_components.code, {\n        children: \"시간\"\n      }), \"의 약자입니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"m\"\n      }), \"은 \", _jsx(_components.code, {\n        children: \"분\"\n      }), \"의 약자입니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"s\"\n      }), \"는 \", _jsx(_components.code, {\n        children: \"초\"\n      }), \"의 약자입니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"그리고 \", _jsx(_components.code, {\n        children: \"ms\"\n      }), \"는 \", _jsx(_components.code, {\n        children: \"밀리초\"\n      }), \"의 약자입니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"웹 애플리케이션에서 날짜를 조작할 수 있는 JavaScript 라이브러리인 Day.js를 사용해봤네요. \\\"add\\\"를 \\\"subtract\\\"로 대체하고 동일한 인수를 유지하여 특정 시간을 뺄 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}