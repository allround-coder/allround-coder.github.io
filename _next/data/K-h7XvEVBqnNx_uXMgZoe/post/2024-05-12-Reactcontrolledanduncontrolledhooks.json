{"pageProps":{"post":{"title":"리액트 제어 및 비제어 훅","description":"","date":"2024-05-12 21:02","slug":"2024-05-12-Reactcontrolledanduncontrolledhooks","content":"\n\n<img src=\"/assets/img/2024-05-12-Reactcontrolledanduncontrolledhooks_0.png\" />\n\n리액트에서, 제어 및 비제어 컴포넌트는 폼 입력을 관리하는 데 사용되는 패턴입니다. 리액트 훅은 함수형 컴포넌트 내에서 상태를 관리하기 위한 제어 및 비제어 훅의 개념을 도입했습니다. 여기에 대한 개요입니다:\n\n## 제어 훅(Controlled Hooks):\n\nuseState 훅: 제어 훅을 사용하면 상태가 직접적으로 리액트에 의해 관리됩니다. useState 훅을 사용하면 상태 변수를 선언하고, 리액트가 제공하는 setter 함수를 사용하여 해당 변수를 업데이트할 수 있습니다. 컴포넌트의 상태가 변경되면 리액트가 업데이트된 상태로 컴포넌트를 다시 렌더링합니다.\n\n\n\n```js\nimport React, { useState } from 'react';\n\nfunction ControlledComponent() {\n  const [value, setValue] = useState('');\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={handleChange}\n    />\n  );\n}\n```\n\n이 예시에서는 입력 필드의 값이 'value' 상태 변수에 의해 제어되며, 업데이트는 'setValue' 함수로 처리됩니다.\n\n## Uncontrolled Hooks:\n\nuseRef Hook: Uncontrolled hooks를 사용하면 DOM 내부에서 상태를 직접 관리할 수 있습니다. React의 상태 관리 시스템을 통해가 아니라 직접 DOM 내에서 관리할 수 있습니다. useRef 훅은 렌더링 간에 다시 렌더링을 유발하지 않고 지속되는 값(current 속성)을 보유할 수 있는 가변 ref 객체를 생성합니다. \n```\n\n\n\n```js\nimport React, { useRef } from 'react';\n\nfunction UncontrolledComponent() {\n  const inputRef = useRef(null);\n\n  const handleClick = () => {\n    console.log(inputRef.current.value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" ref={inputRef} />\n      <button onClick={handleClick}>Log Value</button>\n    </div>\n  );\n}\n```\n\n이 예제에서 입력 필드의 값은 inputRef.current.value를 통해 DOM에 의해 직접 관리되며 변경 사항은 React의 상태 관리 시스템을 거치지 않고 액세스됩니다.\n\n# 제어 및 비제어 훅 사이 선택하기:\n\n- 제어된 훅(Controlled Hooks): React가 응용 프로그램 전체의 form 입력 상태를 관리하고 동기화해야 할 때 제어된 훅을 사용하세요. 제어된 컴포넌트는 form 데이터에 대한 단일 진실의 원천을 제공하여 변경 사항을 추적하고 관리하기 쉽게 만듭니다.\n- 비제어 훅(Uncontrolled Hooks): DOM 요소에 직접 액세스해야 하는 경우나 제어된 컴포넌트가 성능 문제를 일으킬 수 있는 대형 폼을 다룰 때 비제어 훅을 사용하세요. 비제어 컴포넌트는 모든 상태 변경마다 다시 렌더링을 유발하지 않아 더 빠를 수 있습니다. 그러나 복잡한 응용 프로그램에서는 특히 추적하고 관리하기 어려울 수 있습니다.```\n\n\n\n제어 및 비제어 훅은 각자의 사용 사례가 있으며 선택은 특정 요구 사항과 선호도에 따라 다릅니다.","ogImage":{"url":"/assets/img/2024-05-12-Reactcontrolledanduncontrolledhooks_0.png"},"coverImage":"/assets/img/2024-05-12-Reactcontrolledanduncontrolledhooks_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-Reactcontrolledanduncontrolledhooks_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"리액트에서, 제어 및 비제어 컴포넌트는 폼 입력을 관리하는 데 사용되는 패턴입니다. 리액트 훅은 함수형 컴포넌트 내에서 상태를 관리하기 위한 제어 및 비제어 훅의 개념을 도입했습니다. 여기에 대한 개요입니다:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"제어 훅(Controlled Hooks):\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"useState 훅: 제어 훅을 사용하면 상태가 직접적으로 리액트에 의해 관리됩니다. useState 훅을 사용하면 상태 변수를 선언하고, 리액트가 제공하는 setter 함수를 사용하여 해당 변수를 업데이트할 수 있습니다. 컴포넌트의 상태가 변경되면 리액트가 업데이트된 상태로 컴포넌트를 다시 렌더링합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ControlledComponent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [value, setValue] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \");\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleChange\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"event\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setValue\"\n        }), \"(event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"target\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \");\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{value}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleChange}\"\n            }), \"\\n    />\"]\n          })\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예시에서는 입력 필드의 값이 'value' 상태 변수에 의해 제어되며, 업데이트는 'setValue' 함수로 처리됩니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Uncontrolled Hooks:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"useRef Hook: Uncontrolled hooks를 사용하면 DOM 내부에서 상태를 직접 관리할 수 있습니다. React의 상태 관리 시스템을 통해가 아니라 직접 DOM 내에서 관리할 수 있습니다. useRef 훅은 렌더링 간에 다시 렌더링을 유발하지 않고 지속되는 값(current 속성)을 보유할 수 있는 가변 ref 객체를 생성합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n```js\\nimport React, { useRef } from 'react';\\n\\nfunction UncontrolledComponent() {\\n  const inputRef = useRef(null);\\n\\n  const handleClick = () => {\\n    console.log(inputRef.current.value);\\n  };\\n\\n  return (\\n    <div>\\n      <input type=\\\"text\\\" ref={inputRef} />\\n      <button onClick={handleClick}>Log Value</button>\\n    </div>\\n  );\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예제에서 입력 필드의 값은 inputRef.current.value를 통해 DOM에 의해 직접 관리되며 변경 사항은 React의 상태 관리 시스템을 거치지 않고 액세스됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"제어 및 비제어 훅 사이 선택하기:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"제어된 훅(Controlled Hooks): React가 응용 프로그램 전체의 form 입력 상태를 관리하고 동기화해야 할 때 제어된 훅을 사용하세요. 제어된 컴포넌트는 form 데이터에 대한 단일 진실의 원천을 제공하여 변경 사항을 추적하고 관리하기 쉽게 만듭니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"비제어 훅(Uncontrolled Hooks): DOM 요소에 직접 액세스해야 하는 경우나 제어된 컴포넌트가 성능 문제를 일으킬 수 있는 대형 폼을 다룰 때 비제어 훅을 사용하세요. 비제어 컴포넌트는 모든 상태 변경마다 다시 렌더링을 유발하지 않아 더 빠를 수 있습니다. 그러나 복잡한 응용 프로그램에서는 특히 추적하고 관리하기 어려울 수 있습니다.```\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"제어 및 비제어 훅은 각자의 사용 사례가 있으며 선택은 특정 요구 사항과 선호도에 따라 다릅니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}