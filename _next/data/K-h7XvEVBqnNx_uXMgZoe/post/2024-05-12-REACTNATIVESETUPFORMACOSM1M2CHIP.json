{"pageProps":{"post":{"title":"맥 OS M1, M2 칩용으로 REACT NATIVE 설정하기","description":"","date":"2024-05-12 19:47","slug":"2024-05-12-REACTNATIVESETUPFORMACOSM1M2CHIP","content":"\n\n리액트 네이티브 M1/M2 칩을 위한 환경 설정\n\nM1 (애플 실리콘) 칩을 사용하는 맥에서 리액트 네이티브 개발 환경을 설정하는 것은 인텔 기반 맥과 비교해서 몇 가지 추가 고려 사항이 필요합니다. M1 칩이 탑재된 맥에서 리액트 네이티브 개발 환경을 설정하는 단계는 다음과 같습니다:\n\n## 1. 홈브류 설치:-\n\n홈브류는 여러 도구와 라이브러리의 설치를 간단하게 만들어주는 패키지 관리자입니다. 다음 명령어를 사용하여 설치하세요.\n\n\n\n## 2. Node.js 및 rpm 설치\n\n홈 브류를 사용하여 설치하거나 직접 다운로드하여 설치할 수 있습니다.\n\n## 3. Watchman 설치\n\n파일 감시를 개선하기 위해 책임을 집니다. 다음 명령어를 사용하여 설치하세요.\n\n\n\n## 4. Xcode 설치하기\n\n## 5. CocoaPods 설치하기:\n\niOS 개발을 위해 CocoaPods를 설치합니다:\n\n## 6. React Native CLI 추가하기\n\n\n\n다음 명령어를 사용하여 react native cli를 추가하세요!\n\n## 7. 새로운 React Native 프로젝트 만들기:\n\n이제 다음 명령어를 사용하여 react native 프로젝트를 만들 수 있습니다.\n\n## 또한, 가끔 사용자가 다음과 같은 유형의 오류에 갇힐 때가 있습니다. 해당 문제가 발생하면 다음 단계를 사용할 수 있습니다.\n\n\n\n에러:- ℹ 루비 젬 설치 중 ✖ CocoaPods 설치 오류 코코아팟 설치 오류. 프로젝트 초기화에는 영향을 미치지 않으며 안전하게 진행할 수 있습니다. 그러나 iOS를 실행할 때 코코아팟을 수동으로 설치해야 하며 \"iOS용 실행 지침\" 섹션의 추가 단계를 따라야 합니다. ✖ CocoaPods 설치\n\n단계 1. 앱에 다음 명령어 추가하세요\n\n단계 2. react-native.config.js 라는 구성 파일을 만들어서 다음 코드를 붙여넣으세요.\n\n수동으로 코코아팟을 설치하고 구성 파일을 추가한 후에 다음 명령어를 실행하세요\n\n\n\n<img src=\"/assets/img/2024-05-12-REACTNATIVESETUPFORMACOSM1M2CHIP_0.png\" />\n\n# 축하드려요💥 성공하셨어요 👏\n\n# 감사합니다!\n\n더 궁금한 점이 있으시면 이메일을 보내주세요!","ogImage":{"url":"/assets/img/2024-05-12-REACTNATIVESETUPFORMACOSM1M2CHIP_0.png"},"coverImage":"/assets/img/2024-05-12-REACTNATIVESETUPFORMACOSM1M2CHIP_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"리액트 네이티브 M1/M2 칩을 위한 환경 설정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"M1 (애플 실리콘) 칩을 사용하는 맥에서 리액트 네이티브 개발 환경을 설정하는 것은 인텔 기반 맥과 비교해서 몇 가지 추가 고려 사항이 필요합니다. M1 칩이 탑재된 맥에서 리액트 네이티브 개발 환경을 설정하는 단계는 다음과 같습니다:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. 홈브류 설치:-\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"홈브류는 여러 도구와 라이브러리의 설치를 간단하게 만들어주는 패키지 관리자입니다. 다음 명령어를 사용하여 설치하세요.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. Node.js 및 rpm 설치\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"홈 브류를 사용하여 설치하거나 직접 다운로드하여 설치할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. Watchman 설치\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"파일 감시를 개선하기 위해 책임을 집니다. 다음 명령어를 사용하여 설치하세요.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. Xcode 설치하기\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"5. CocoaPods 설치하기:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"iOS 개발을 위해 CocoaPods를 설치합니다:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"6. React Native CLI 추가하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 명령어를 사용하여 react native cli를 추가하세요!\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"7. 새로운 React Native 프로젝트 만들기:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 다음 명령어를 사용하여 react native 프로젝트를 만들 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"또한, 가끔 사용자가 다음과 같은 유형의 오류에 갇힐 때가 있습니다. 해당 문제가 발생하면 다음 단계를 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"에러:- ℹ 루비 젬 설치 중 ✖ CocoaPods 설치 오류 코코아팟 설치 오류. 프로젝트 초기화에는 영향을 미치지 않으며 안전하게 진행할 수 있습니다. 그러나 iOS를 실행할 때 코코아팟을 수동으로 설치해야 하며 \\\"iOS용 실행 지침\\\" 섹션의 추가 단계를 따라야 합니다. ✖ CocoaPods 설치\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 1. 앱에 다음 명령어 추가하세요\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 2. react-native.config.js 라는 구성 파일을 만들어서 다음 코드를 붙여넣으세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"수동으로 코코아팟을 설치하고 구성 파일을 추가한 후에 다음 명령어를 실행하세요\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-REACTNATIVESETUPFORMACOSM1M2CHIP_0.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"축하드려요💥 성공하셨어요 👏\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"감사합니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 궁금한 점이 있으시면 이메일을 보내주세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}