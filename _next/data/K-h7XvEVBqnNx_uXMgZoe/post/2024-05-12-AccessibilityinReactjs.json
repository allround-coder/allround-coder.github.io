{"pageProps":{"post":{"title":"리액트에서의 접근성","description":"","date":"2024-05-12 19:46","slug":"2024-05-12-AccessibilityinReactjs","content":"\n\n주요 개념 및 접근성 사용 방법\n\n## React.js에서의 접근성(a11y)은 능력에 관계없이 모든 사람이 이해하고 상호 작용할 수 있는 사용자 인터페이스를 만드는 것입니다.\n\n이는 스크린 리더, 키보드 탐색 또는 음성 제어와 같은 보조 기술을 사용하는 사람들을 포함합니다.\n\n다음은 React에서의 접근성에 대한 주요 개념을 설명합니다:\n\n\n\n## 1. 시멘틱 HTML\n\n- 'h1' 태그는 제목에, 'button' 태그는 버튼에, 'nav' 태그는 내비게이션에 등 세맨틱 HTML 요소를 사용하여 컴포넌트를 구축하세요. 이러한 요소들은 보조 기술 및 브라우저에 의미를 전달합니다.\n\n```js\n<header> {/* 시맨틱 헤더 요소 */}\n    <h1>Main Title of the Page</h1> {/* 시맨틱 헤딩 요소 */}\n</header>\n\n<main>\n    <p>The main content of your webpage goes here</p> {/* 시멘틱 단락 요소 */}\n</main>\n\n<footer> {/* 시멘틱 푸터 요소 */}\n   <p>Copyright information and other footer related stuff</p>\n</footer>\r\n```\n\n## 2. ARIA 속성\n\n\n\n- 때로는 의미 있는 HTML 만으로 충분하지 않을 수도 있습니다. 보조 기술을 위한 추가 정보를 제공하려면 ARIA (접근 가능한 리치 인터넷 애플리케이션) 속성을 사용하세요. 이미지를 설명하는 데 aria-label을 사용하거나 입력 필드에 설명을 연결하는 데 aria-describedby를 사용할 수 있습니다.\n- HTML로는 원하는 기능을 달성할 수 없는 경우에는 접근성 리치 인터넷 애플리케이션(WAI-ARIA) 역할 및 속성을 사용하세요.\n\n```js\nfunction ImageWithDescription() {\n  return (\n    <div>\n    <button aria-label=\"닫기\" onClick={this.close}>\n    X\n    </button>\n    <img\n      src=\"이미지.jpg\"\n      alt=\"설명적 이미지 대체 텍스트\"  {/* 설명적 대체 텍스트 */}\n      aria-describedby=\"imageDescription\"  {/* 설명과 연결 */}\n    />\n    </div>\n  );\n}\n```\n\n## 3. 키보드 탐색\n\n- 애플리케이션이 키보드를 사용하여 완전히 탐색 가능하도록 보장하세요. 이는 사용자가 버튼, 링크 및 폼 필드와 같은 초점 가능 요소를 탭할 수 있게 하는 것을 의미합니다. onFocus 및 onBlur와 같은 이벤트 핸들러를 사용하여 초점 상태를 관리하고 시각적 단서를 제공하세요.\n\n\n\n```js\n함수 FocusableButton({ onClick }) {\n  return (\n    <button type=\"button\" onFocus={() => console.log(\"Button Focused\")} onClick={onClick}>\n      Click me\n    </button>\n  );\n}\n```\n\n## 4. 스크린 리더 지원\n\n- 컴포넌트에 대한 명확하고 간결한 텍스트 설명에 중점을 두세요. 설명적인 링크 텍스트를 사용하고 정보 전달에 색상에만 의존하지 마세요. 스크린 리더는 내용을 텍스트로 제시하기 때문에 구조화되고 이해하기 쉬운 내용임을 보장하세요.\n\n```js\n함수 ErrorMessage({ message }) {\n  return (\n    <div role=\"alert\" aria-live=\"assertive\">  {/* 에러를 발표함 */}\n      {message}\n    </div>\n  );\n}\n```\n\n\n\n## 5. 초점 제어\n\n- 키보드만 사용하는 사용자가 컴포넌트에서 요소 포커스를 관리하여 애플리케이션을 탐색할 수 있게 합니다. autoFocus 속성을 사용하면 컴포넌트가 마운트될 때 특정 요소에 포커스를 주는 예입니다.\n\n```js\nclass AutoFocusTextInput extends React.Component {\n  componentDidMount() {\n    this.textInput.focus();\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        ref={(input) => { this.textInput = input; }}     // ref 할당\n      />\n    );\n  }\n}\n```\n\n## 6. 테스팅 및 유효성 검사:\n\n\n\n- 리액트 애플리케이션의 접근성을 테스트하고 유효성을 검사하는 다양한 도구와 기술이 있어요. 브라우저 개발자 도구를 사용하여 접근성 트리를 확인하고 잠재적인 문제를 식별할 수 있어요. 게다가 개발 중에 접근성 검사를 자동화할 수 있는 react-axe와 같은 라이브러리를 고려해 보세요.\n- 대부분의 접근성 문제는 정적 분석 도구를 통해 발견할 수 있지만, 수동 테스트와 유효성 검사도 중요해요. 왜냐하면 접근성은 단순히 규칙 목록을 충족하는 것 이상이기 때문이에요.\n\n## 7. 이미지의 Alt 속성\n\n이미지에 유용하고 설명적인 대체 텍스트를 항상 제공해 주세요.\n\n```js\n<img src={logo} alt=\"로고 설명\" />;\n```\n\n\n\n## 8. 접근성 있는 양식 만들기\n\n모든 양식 요소에는 명확하고 접근성 있는 라벨이 있어야 합니다.\n\n```js\n<label htmlFor='name'> 이름 </label>\n<input type='text' id='name' name='name' />\n```\n\n## 9. 접근성 있는 색상과 대비\n\n\n\n- 모든 사람이 내용을 완전히 읽을 수 있도록 색상과 대비에 주의하세요. WCAG2는 특정 대비 및 텍스트 크기 가이드라인을 제공합니다.\n\n## 10. React 프래그먼트\n\n여러 요소를 그룹화하고 DOM에 추가 노드를 만들지 않으려면 React 프래그먼트(``/`` 또는 `React.Fragment`)를 사용하세요. 이는 스크린 리더 사용자를 위해 깔끔한 문서 개요를 유지하는 데 도움이 됩니다.\n\n```js\n<> \n  <ChildA />\n  <ChildB />\n  <ChildC />\n</>\n```\n\n\n\n## 11. React 접근성 린터\n\neslint-plugin-jsx-a11y와 같은 도구를 사용하면 따를 수 있는 일련의 접근성 관련 규칙을 강제로 적용할 수 있습니다.\n\n# 몇 가지 출처\n\nReact에서 접근성에 대해 시작할 수 있는 몇 가지 리소스입니다:\n\n\n\n- React 웹 접근성 문서: https://legacy.reactjs.org/docs/accessibility.html\n- MDN Web Docs — React에서의 접근성: https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\n- A11y Project: https://www.a11yproject.com/pen_spark","ogImage":{"url":"/assets/img/2024-05-12-AccessibilityinReactjs_0.png"},"coverImage":"/assets/img/2024-05-12-AccessibilityinReactjs_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"주요 개념 및 접근성 사용 방법\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"React.js에서의 접근성(a11y)은 능력에 관계없이 모든 사람이 이해하고 상호 작용할 수 있는 사용자 인터페이스를 만드는 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이는 스크린 리더, 키보드 탐색 또는 음성 제어와 같은 보조 기술을 사용하는 사람들을 포함합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 React에서의 접근성에 대한 주요 개념을 설명합니다:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. 시멘틱 HTML\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"'h1' 태그는 제목에, 'button' 태그는 버튼에, 'nav' 태그는 내비게이션에 등 세맨틱 HTML 요소를 사용하여 컴포넌트를 구축하세요. 이러한 요소들은 보조 기술 및 브라우저에 의미를 전달합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<header> {\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 시맨틱 헤더 요소 */\"\n        }), \"}\\n    <h1>\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Main\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Title\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \" the \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Page\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/h1> {/\"\n        }), \"* 시맨틱 헤딩 요소 */}\\n</header>\\n\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"main\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"The main content of your webpage goes here\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \" {/* 시멘틱 단락 요소 */}\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"main\"\n            }), \">\"]\n          })]\n        }), \"\\n\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"footer\"\n            }), \">\"]\n          }), \" {/* 시멘틱 푸터 요소 */}\\n   \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"Copyright information and other footer related stuff\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"footer\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. ARIA 속성\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"때로는 의미 있는 HTML 만으로 충분하지 않을 수도 있습니다. 보조 기술을 위한 추가 정보를 제공하려면 ARIA (접근 가능한 리치 인터넷 애플리케이션) 속성을 사용하세요. 이미지를 설명하는 데 aria-label을 사용하거나 입력 필드에 설명을 연결하는 데 aria-describedby를 사용할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"HTML로는 원하는 기능을 달성할 수 없는 경우에는 접근성 리치 인터넷 애플리케이션(WAI-ARIA) 역할 및 속성을 사용하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ImageWithDescription\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"aria-label\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"닫기\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{this.close}\"\n            }), \">\"]\n          }), \"\\n    X\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"img\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"src\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"이미지.jpg\\\"\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"alt\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"설명적 이미지 대체 텍스트\\\"\"\n            }), \"  {/* \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"설명적\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"대체\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"텍스트\"\n            }), \" */}\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"aria-describedby\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"imageDescription\\\"\"\n            }), \"  {/* \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"설명과\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"연결\"\n            }), \" */}\\n    />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. 키보드 탐색\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"애플리케이션이 키보드를 사용하여 완전히 탐색 가능하도록 보장하세요. 이는 사용자가 버튼, 링크 및 폼 필드와 같은 초점 가능 요소를 탭할 수 있게 하는 것을 의미합니다. onFocus 및 onBlur와 같은 이벤트 핸들러를 사용하여 초점 상태를 관리하고 시각적 단서를 제공하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"함수 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FocusableButton\"\n        }), \"({ onClick }) {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"button\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onFocus\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" console.log(\\\"Button Focused\\\")} onClick={onClick}>\\n      Click me\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. 스크린 리더 지원\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"컴포넌트에 대한 명확하고 간결한 텍스트 설명에 중점을 두세요. 설명적인 링크 텍스트를 사용하고 정보 전달에 색상에만 의존하지 마세요. 스크린 리더는 내용을 텍스트로 제시하기 때문에 구조화되고 이해하기 쉬운 내용임을 보장하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"함수 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ErrorMessage\"\n        }), \"({ message }) {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"role\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"alert\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"aria-live\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"assertive\\\"\"\n            }), \">\"]\n          }), \"  {/* 에러를 발표함 */}\\n      {message}\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"5. 초점 제어\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"키보드만 사용하는 사용자가 컴포넌트에서 요소 포커스를 관리하여 애플리케이션을 탐색할 수 있게 합니다. autoFocus 속성을 사용하면 컴포넌트가 마운트될 때 특정 요소에 포커스를 주는 예입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AutoFocusTextInput\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_ inherited__\",\n          children: \"React.Component\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"componentDidMount\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"textInput\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"focus\"\n        }), \"();\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"render\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n      \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ref\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{(input)\"\n            }), \" =>\"]\n          }), \" { this.textInput = input; }}     // ref 할당\\n      />\"]\n        }), \"\\n    );\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"6. 테스팅 및 유효성 검사:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"리액트 애플리케이션의 접근성을 테스트하고 유효성을 검사하는 다양한 도구와 기술이 있어요. 브라우저 개발자 도구를 사용하여 접근성 트리를 확인하고 잠재적인 문제를 식별할 수 있어요. 게다가 개발 중에 접근성 검사를 자동화할 수 있는 react-axe와 같은 라이브러리를 고려해 보세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"대부분의 접근성 문제는 정적 분석 도구를 통해 발견할 수 있지만, 수동 테스트와 유효성 검사도 중요해요. 왜냐하면 접근성은 단순히 규칙 목록을 충족하는 것 이상이기 때문이에요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"7. 이미지의 Alt 속성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이미지에 유용하고 설명적인 대체 텍스트를 항상 제공해 주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<img src={logo} alt=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"로고 설명\\\"\"\n        }), \" />;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"8. 접근성 있는 양식 만들기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"모든 양식 요소에는 명확하고 접근성 있는 라벨이 있어야 합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<label htmlFor=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'name'\"\n        }), \"> 이름 </label>\\n\", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"'text'\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"'name'\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"'name'\"\n            }), \" />\"]\n          })\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"9. 접근성 있는 색상과 대비\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"모든 사람이 내용을 완전히 읽을 수 있도록 색상과 대비에 주의하세요. WCAG2는 특정 대비 및 텍스트 크기 가이드라인을 제공합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"10. React 프래그먼트\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"여러 요소를 그룹화하고 DOM에 추가 노드를 만들지 않으려면 React 프래그먼트(\", _jsx(_components.code, {\n        children: \"/\"\n      }), \" 또는 \", _jsx(_components.code, {\n        children: \"React.Fragment\"\n      }), \")를 사용하세요. 이는 스크린 리더 사용자를 위해 깔끔한 문서 개요를 유지하는 데 도움이 됩니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<> \\n  \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ChildA\"\n            }), \" />\"]\n          })\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ChildB\"\n            }), \" />\"]\n          })\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ChildC\"\n            }), \" />\"]\n          })\n        }), \"\\n</>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"11. React 접근성 린터\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"eslint-plugin-jsx-a11y와 같은 도구를 사용하면 따를 수 있는 일련의 접근성 관련 규칙을 강제로 적용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"몇 가지 출처\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React에서 접근성에 대해 시작할 수 있는 몇 가지 리소스입니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"React 웹 접근성 문서: https://legacy.reactjs.org/docs/accessibility.html\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"MDN Web Docs — React에서의 접근성: https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A11y Project: https://www.a11yproject.com/pen_spark\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}