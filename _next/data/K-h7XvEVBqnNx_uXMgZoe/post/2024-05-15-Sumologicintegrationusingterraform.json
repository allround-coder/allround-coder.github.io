{"pageProps":{"post":{"title":"테라폼을 사용한 Sumo Logic 통합","description":"","date":"2024-05-15 03:43","slug":"2024-05-15-Sumologicintegrationusingterraform","content":"\n\n<img src=\"/assets/img/2024-05-15-Sumologicintegrationusingterraform_0.png\" />\n\n프로젝트에서 매우 기술에 능통한 고객을 위해 작업 중입니다. 그들은 매일 많은 수의 API를 활용하여 방대한 기술 생태계를 구축했습니다. 이들 API의 특정 활동을 분석하고 로깅하여 시스템을 더 잘 관리하고 개선하기 위해 다수의 활성 모니터를 가진 경보 시스템을 생성해야 했습니다.\n\n이 경보 시스템에서 그들은 Sumologic을 경보 시스템으로 선택했습니다.\n\n사용 사례:\n제 사용 사례는 다음과 같습니다. Sumologic 대시보드를 통해 모든 이러한 모니터를 수동으로 생성 및 구성했는데, 많은 수의 모니터를 관리하고 생성하는 작업은 번거로운 작업일 수 있습니다. 제 작업은 이 모니터 생성 및 관리 프로세스를 수동 작업에서 자동화된 방식 또는 코드를 통해 관리하는 것으로 변경하는 것이었습니다. 다시 말해, Sumologic 모니터를 Terraform과 통합하는 것입니다.\n\n\n\n아래 섹션에서는 수동으로 작성한 모든 Sumologic 모니터를 테라폼으로 변환하는 데 수행한 모든 단계를 안내할 것입니다.\n\n준비 사항:\n\n- 테라폼에 대한 기본 지식이 충분히 갖춰져 있다면 시작할 수 있습니다(테라폼 문서)\n\nSumologic 모니터:\n\n\n\n테라폼 코드를 올바르게 작성하여 Sumologic 모니터를 만들려면 먼저 Sumologic에서 이러한 모니터를 만드는 데 필요한 필드를 시각화해야 합니다.\n\nSumologic 대시보드에서 모니터를 만드는 \"Create a Monitor\"를 클릭하면 아래 화면이 나타납니다.\n\n![이미지](/assets/img/2024-05-15-Sumologicintegrationusingterraform_1.png)\n\n![이미지](/assets/img/2024-05-15-Sumologicintegrationusingterraform_2.png)\n\n\n\n![이미지](/assets/img/2024-05-15-Sumologicintegrationusingterraform_3.png)\n\n지금 보시는 예제 모니터의 설정을 테라폼 자원인 \"sumologic_monitor\"를 사용하여 생성할 수 있습니다. sumologic_monitor 자원 블록은 실제 모니터 필드와 매핑되는 몇 가지 특정 키-값 인수를 받아들일 것입니다.\n\n다음은 테라폼 코드와 SumoLogic 모니터 필드의 몇 가지 매핑 예시입니다.\n\n테라폼 모니터 생성:\n\n\n\n\n![Sumologic Integration using Terraform - Screenshot 4](/assets/img/2024-05-15-Sumologicintegrationusingterraform_4.png)\n\n```js\nresource \"sumologic_monitor\" \"any_name\" {\n\ntrigger_condition {\n   logs_static_condition {\n        ...\n   }\n}\n```\n\n![Sumologic Integration using Terraform - Screenshot 5](/assets/img/2024-05-15-Sumologicintegrationusingterraform_5.png)\n\n```js\nresource \"sumologic_monitor\" \"any_name\" {\n\ntrigger_condition {\n   logs_static_condition {\n     critical {\n       time_range = \"5m\"\n       alert {\n         thresold = \"0\"\n         thresold_type = \"GreaterThan\"\n       }\n       resolution {\n         thresold = \"0\"\n         thresold_type = \"LessThanOrEqual\"\n         resolution_window = \"5m\" \n       }\n     }\n   }\n}\n``` \n\n\n\n\n\n![image](/assets/img/2024-05-15-Sumologicintegrationusingterraform_6.png)\n\n```js\nresource \"sumologic_monitor\" \"any_name\" {\n  queries {\n    row_id = \"A\"\n    query = \"실행될 조건에 대한 실제 쿼리\"\n  }\n}\n```\n\n![image](/assets/img/2024-05-15-Sumologicintegrationusingterraform_7.png)\n\n통지를 위해 Slack, Webhook, Email 등과 같은 다양한 connection_type을 설정할 수 있습니다. sumologic 대시보드에 이미 있는 연결에 connection_id를 지정하거나 사용자 정의 연결을 만들고 알림 페이로드를 생성할 수 있습니다.\n\n\n\n\n|| Sumologic API를 참조하고 curl을 실행하여 모든 연결을 가져와서 connection_id를 이름으로 필터링할 수 있어요-\n\ncurl -u \"`accessId`:`accessKey`\" -X GET https://api.`deployment`.sumologic.com/api/v1/connections\n\n```js\nresource \"sumologic_monitor\" \"any_name\" {\n notifications: {\n  // 여러 알림 블록을 만들 수 있어요\n  notification: {\n   connection_type = \"Email\" //Slack | Webhook | Email 등\n   connection_id = \"<ID>\" //기존 ID\n  }\n  notification: {\n   connection_type = \"Slack\"\n   //이것은 사용자 정의된 payload에요\n   payload_override = <<JSON \n    {\n     \"service_key\": \"your_pagerduty_api_integration_key\",\n     \"event_type\": \"trigger\",\n     \"description\": \"Alert: Triggered {TriggerType} for Monitor {Name}\",\n     \"client\": \"Sumo Logic\",\n     \"client_url\": \"{QueryUrl}\"\n    }\n   JSON\n  }\n  run_for_trigger_types = [\"Critical\", \"ResolvedCritical\"] //위의 알림 모니터 이미지용 체크박스를 선택할 거에요\n}\n```\n\n<img src=\"/assets/img/2024-05-15-Sumologicintegrationusingterraform_8.png\" />\n\n```js\nresource \"sumologic_monitor\" \"any_name\" {\n name = \"monitor_name\"\n parent_id = \"<ID>\" //모니터가 생성될 폴더의 ID\n description = \"설명 문자열\"\n is_disabled = boolean // 이것은 모니터를 활성화 또는 비활성화할 거에요\n}\n```\n\n\n\n아래는 담당자의 작업 요약입니다:\n\n1. 'init.tf' 또는 'main.tf' 파일을 추가하여 Sumo Logic Terraform 공급자를 설치하고 초기화해야 합니다. main.tf 파일에 다음과 같은 코드를 추가하세요.\n\n```js\nterraform {\n\n backend \"s3\" {}\n\n required_providers {\n  sumologic = {\n   source = \"sumologic/sumologic\"\n   version = \"2.28.2\"\n  }\n }\n\n}\n\nprovider \"sumologic\" {\n access_id = \"\"\n access_key = \"\"\n}\n```\n\n2. 'sumologic-monitor.tf' 파일을 추가하여 위에서 언급한 내용이 포함된 'sumologic_monitor' 리소스를 추가하세요.\n3. 이후에는 테라폼 명령을 실행하면 됩니다.\n\n\n\n```js\nterrafrom init\nterrafrom plan\nterrafrom apply\n```\n\n참고 문서 -\n\n- Sumologic 모니터 생성에 대한 자세한 내용은 다음을 참조하세요: [Sumologic 모니터 생성](https://help.sumologic.com/docs/alerts/monitors/create-monitor/)\n- Terraform을 사용한 Sumologic 모니터 생성에 대한 자세한 내용은 다음을 참조하세요: [Sumologic 모니터 Terraform 문서](https://registry.terraform.io/providers/SumoLogic/sumologic/latest/docs/resources/monitor)\n- Sumologic API에 대한 자세한 내용은 다음을 참조하세요: [Sumologic API](https://api.sumologic.com/docs/#section/Getting-Started/API-Endpoints)","ogImage":{"url":"/assets/img/2024-05-15-Sumologicintegrationusingterraform_0.png"},"coverImage":"/assets/img/2024-05-15-Sumologicintegrationusingterraform_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ol: \"ol\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-15-Sumologicintegrationusingterraform_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"프로젝트에서 매우 기술에 능통한 고객을 위해 작업 중입니다. 그들은 매일 많은 수의 API를 활용하여 방대한 기술 생태계를 구축했습니다. 이들 API의 특정 활동을 분석하고 로깅하여 시스템을 더 잘 관리하고 개선하기 위해 다수의 활성 모니터를 가진 경보 시스템을 생성해야 했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 경보 시스템에서 그들은 Sumologic을 경보 시스템으로 선택했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용 사례:\\n제 사용 사례는 다음과 같습니다. Sumologic 대시보드를 통해 모든 이러한 모니터를 수동으로 생성 및 구성했는데, 많은 수의 모니터를 관리하고 생성하는 작업은 번거로운 작업일 수 있습니다. 제 작업은 이 모니터 생성 및 관리 프로세스를 수동 작업에서 자동화된 방식 또는 코드를 통해 관리하는 것으로 변경하는 것이었습니다. 다시 말해, Sumologic 모니터를 Terraform과 통합하는 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 섹션에서는 수동으로 작성한 모든 Sumologic 모니터를 테라폼으로 변환하는 데 수행한 모든 단계를 안내할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"준비 사항:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"테라폼에 대한 기본 지식이 충분히 갖춰져 있다면 시작할 수 있습니다(테라폼 문서)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sumologic 모니터:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"테라폼 코드를 올바르게 작성하여 Sumologic 모니터를 만들려면 먼저 Sumologic에서 이러한 모니터를 만드는 데 필요한 필드를 시각화해야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sumologic 대시보드에서 모니터를 만드는 \\\"Create a Monitor\\\"를 클릭하면 아래 화면이 나타납니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-Sumologicintegrationusingterraform_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-Sumologicintegrationusingterraform_2.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-Sumologicintegrationusingterraform_3.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지금 보시는 예제 모니터의 설정을 테라폼 자원인 \\\"sumologic_monitor\\\"를 사용하여 생성할 수 있습니다. sumologic_monitor 자원 블록은 실제 모니터 필드와 매핑되는 몇 가지 특정 키-값 인수를 받아들일 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 테라폼 코드와 SumoLogic 모니터 필드의 몇 가지 매핑 예시입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"테라폼 모니터 생성:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-Sumologicintegrationusingterraform_4.png\",\n        alt: \"Sumologic Integration using Terraform - Screenshot 4\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"resource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"sumologic_monitor\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"any_name\\\"\"\n        }), \" {\\n\\ntrigger_condition {\\n   logs_static_condition {\\n        ...\\n   }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-Sumologicintegrationusingterraform_5.png\",\n        alt: \"Sumologic Integration using Terraform - Screenshot 5\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"resource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"sumologic_monitor\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"any_name\\\"\"\n        }), \" {\\n\\ntrigger_condition {\\n   logs_static_condition {\\n     critical {\\n       time_range = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"5m\\\"\"\n        }), \"\\n       alert {\\n         thresold = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"0\\\"\"\n        }), \"\\n         thresold_type = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"GreaterThan\\\"\"\n        }), \"\\n       }\\n       resolution {\\n         thresold = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"0\\\"\"\n        }), \"\\n         thresold_type = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"LessThanOrEqual\\\"\"\n        }), \"\\n         resolution_window = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"5m\\\"\"\n        }), \" \\n       }\\n     }\\n   }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-Sumologicintegrationusingterraform_6.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"resource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"sumologic_monitor\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"any_name\\\"\"\n        }), \" {\\n  queries {\\n    row_id = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"A\\\"\"\n        }), \"\\n    query = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"실행될 조건에 대한 실제 쿼리\\\"\"\n        }), \"\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-Sumologicintegrationusingterraform_7.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"통지를 위해 Slack, Webhook, Email 등과 같은 다양한 connection_type을 설정할 수 있습니다. sumologic 대시보드에 이미 있는 연결에 connection_id를 지정하거나 사용자 정의 연결을 만들고 알림 페이로드를 생성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"|| Sumologic API를 참조하고 curl을 실행하여 모든 연결을 가져와서 connection_id를 이름으로 필터링할 수 있어요-\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"curl -u \\\"\", _jsx(_components.code, {\n        children: \"accessId\"\n      }), \":\", _jsx(_components.code, {\n        children: \"accessKey\"\n      }), \"\\\" -X GET https://api.\", _jsx(_components.code, {\n        children: \"deployment\"\n      }), \".sumologic.com/api/v1/connections\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"resource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"sumologic_monitor\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"any_name\\\"\"\n        }), \" {\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"notifications\"\n        }), \": {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 여러 알림 블록을 만들 수 있어요\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"notification\"\n        }), \": {\\n   connection_type = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Email\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//Slack | Webhook | Email 등\"\n        }), \"\\n   connection_id = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"<ID>\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//기존 ID\"\n        }), \"\\n  }\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"notification\"\n        }), \": {\\n   connection_type = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Slack\\\"\"\n        }), \"\\n   \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//이것은 사용자 정의된 payload에요\"\n        }), \"\\n   payload_override = <<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JSON\"\n        }), \" \\n    {\\n     \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"service_key\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"your_pagerduty_api_integration_key\\\"\"\n        }), \",\\n     \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"event_type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"trigger\\\"\"\n        }), \",\\n     \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"description\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Alert: Triggered {TriggerType} for Monitor {Name}\\\"\"\n        }), \",\\n     \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"client\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Sumo Logic\\\"\"\n        }), \",\\n     \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"client_url\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{QueryUrl}\\\"\"\n        }), \"\\n    }\\n   \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JSON\"\n        }), \"\\n  }\\n  run_for_trigger_types = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Critical\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ResolvedCritical\\\"\"\n        }), \"] \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//위의 알림 모니터 이미지용 체크박스를 선택할 거에요\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-15-Sumologicintegrationusingterraform_8.png\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"resource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"sumologic_monitor\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"any_name\\\"\"\n        }), \" {\\n name = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"monitor_name\\\"\"\n        }), \"\\n parent_id = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"<ID>\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//모니터가 생성될 폴더의 ID\"\n        }), \"\\n description = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"설명 문자열\\\"\"\n        }), \"\\n is_disabled = boolean \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이것은 모니터를 활성화 또는 비활성화할 거에요\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래는 담당자의 작업 요약입니다:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"'init.tf' 또는 'main.tf' 파일을 추가하여 Sumo Logic Terraform 공급자를 설치하고 초기화해야 합니다. main.tf 파일에 다음과 같은 코드를 추가하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"terraform {\\n\\n backend \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"s3\\\"\"\n        }), \" {}\\n\\n required_providers {\\n  sumologic = {\\n   source = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"sumologic/sumologic\\\"\"\n        }), \"\\n   version = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"2.28.2\\\"\"\n        }), \"\\n  }\\n }\\n\\n}\\n\\nprovider \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"sumologic\\\"\"\n        }), \" {\\n access_id = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \"\\n access_key = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"'sumologic-monitor.tf' 파일을 추가하여 위에서 언급한 내용이 포함된 'sumologic_monitor' 리소스를 추가하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이후에는 테라폼 명령을 실행하면 됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"terrafrom init\\nterrafrom plan\\nterrafrom apply\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참고 문서 -\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Sumologic 모니터 생성에 대한 자세한 내용은 다음을 참조하세요: \", _jsx(_components.a, {\n          href: \"https://help.sumologic.com/docs/alerts/monitors/create-monitor/\",\n          children: \"Sumologic 모니터 생성\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Terraform을 사용한 Sumologic 모니터 생성에 대한 자세한 내용은 다음을 참조하세요: \", _jsx(_components.a, {\n          href: \"https://registry.terraform.io/providers/SumoLogic/sumologic/latest/docs/resources/monitor\",\n          children: \"Sumologic 모니터 Terraform 문서\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Sumologic API에 대한 자세한 내용은 다음을 참조하세요: \", _jsx(_components.a, {\n          href: \"https://api.sumologic.com/docs/#section/Getting-Started/API-Endpoints\",\n          children: \"Sumologic API\"\n        })]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}