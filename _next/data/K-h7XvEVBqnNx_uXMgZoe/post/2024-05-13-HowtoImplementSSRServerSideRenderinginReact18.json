{"pageProps":{"post":{"title":"React 18에서 SSRServer Side Rendering을 구현하는 방법","description":"","date":"2024-05-13 00:08","slug":"2024-05-13-HowtoImplementSSRServerSideRenderinginReact18","content":"\n\n\"renderToPipeableStream\" 서버 API를 구현하는 방법을 배우세요. 이 API를 사용하면 React 트리를 HTML로 Node.js 스트림에 렌더링할 수 있습니다.\n\n![이미지](/assets/img/2024-05-13-HowtoImplementSSRServerSideRenderinginReact18_0.png)\n\nReact 18은 상호작용적 사용자 인터페이스를 구축하기 위한 인기있는 JavaScript 라이브러리의 최신 버전이며, 많은 새로운 기능과 개선 사항을 제공합니다. 특히 서버 측 렌더링(SSR)의 향상된 성능은 주목할 만한 기능입니다.\n\n이 글에서는 React의 SSR 기능을 유용한 코드 샘플과 예시와 함께 살펴보겠습니다. 하지만 먼저 클라이언트 측 렌더링과 서버 측 렌더링의 차이를 알아보겠습니다.\n\n\n\n클라이언트 측 렌더링 (CSR)은 웹 페이지를 클라이언트 측에서 렌더링하는 프로세스를 말합니다 (즉, 사용자의 웹 브라우저에서). 서버는 단순히 원시 데이터나 콘텐츠를 제공하며, 클라이언트 측 JavaScript가 이를 활용하여 최종 렌더링된 페이지를 동적으로 구성합니다.\n\n서버 측 렌더링 (SSR)은 서버에서 웹 페이지를 렌더링한 후 해당 페이지를 클라이언트의 웹 브라우저로 보내는 프로세스를 의미합니다. 클라이언트 측에 의존하는 대신 서버가 웹 페이지의 최종 HTML 마크업을 생성하고 이를 클라이언트로 보내는 방식을 사용합니다.\n\n# \"renderToPipeableStream\" 서버 API 구현하기\n\n단계 1: create-react-app 명령줄 도구를 사용하여 새로운 React 애플리케이션을 만듭니다. 즐겨 사용하는 터미널을 열고 아래 명령어를 입력하세요.\n\n\n\n```js\nnpx create-react-app server-api-demo-app\n```\n\n단계 2: 새로 생성된 React 앱으로 이동합니다.\n\n```js\ncd server-api-demo-app\n```\n\n단계 3: 이제 프로젝트에 라우팅을 처리하기 위해 react-router-dom을 추가해주세요.\n\n\n\n```js\nnpm install react-router-dom\n```\n\n4단계: 애플리케이션에 몇 개의 페이지를 추가해 봅시다. app.js에 아래와 같이 추가할 수 있는 샘플 라우트를 추가해보세요:\n(i) 홈\n(ii) 소개\n\n```js\nconst App = () => (\n  <div>\n    <Routes>\n      <Route path=\"/\" element={<Home />}></Route>\n      <Route path=\"/about\" element={<About />}></Route>\n    </Routes>\n  </div>\n);\n```\n\n5단계: 두 페이지에 내용을 추가해보세요. 참고를 원하시면, 여기를 클릭하세요.\n\n\n\n6단계: 루트 수준에 \"server\"라는 새 폴더를 만들고, 그 안에 index.js와 server.js라는 새 파일을 만듭니다. 아래 코드를 해당 파일에 복사하여 붙여넣기하세요.\n\n```js\n// server/index.js\nrequire(\"ignore-styles\");\n\nrequire(\"@babel/register\")({\n  ignore: [/(node_modules)/],\n  presets: [\"@babel/preset-env\", \"@babel/preset-react\"],\n});\n\nrequire(\"./server\");\n```\n\n이 코드 조각은 Babel을 코드 번역을 위해 설정하고, \"node_modules\"와 같은 특정 파일을 필터링하며, \"server\" 모듈을 가져와 서버를 실행합니다. 이 설정은 React 서버 측 렌더링에서 일반적으로 사용되며, 서버가 React 구성 요소를 처리하고 클라이언트에 제공할 수 있도록 합니다.\n\n```js\n// server/server.js\nimport express from \"express\";\nimport React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { StaticRouter } from \"react-router-dom/server\";\nimport App from \"../src/App\";\n\nconst app = express();\n\napp.get(\"/*\", (req, res) => {\n  const entryPoint = [\"/main.js\"];\n\n  const { pipe, abort: _abort } = ReactDOMServer.renderToPipeableStream(\n    <StaticRouter location={req.url}>\n      <App />\n    </StaticRouter>,\n    {\n      bootstrapScripts: entryPoint,\n      onShellReady() {\n        res.statusCode = 200;\n        res.setHeader(\"Content-type\", \"text/html\");\n        pipe(res);\n      },\n      onShellError() {\n        res.statusCode = 500;\n        res.send(\"<!doctype html><p>Loading...</p>\");\n      },\n    }\n  );\n});\n\napp.listen(3002, () => {\n  console.log(\"App is running on http://localhost:3002\");\n});\n```\n\n\n\n위 코드는 app.get(\"/*\", ...)을 사용하여 모든 경로에 대한 라우트 핸들러를 정의합니다. 이는 서버로 들어오는 모든 요청을 처리하는 라우트 핸들러를 의미합니다. 라우트 핸들러 내부에서:\n\n- entryPoint 배열은 main.js 값을 가지고 정의됩니다. 이는 클라이언트 측 코드를 부트스트랩하는 데 사용되는 JavaScript 파일을 가리킵니다.\n- ReactDOMServer.renderToPipeableStream()은 HTML 렌더링을 위한 React 노드와 스트리밍 옵션을 포함하는 선택적 옵션 객체 두 가지 인수를 받습니다. 이는 두 가지 메소드를 반환하는데, pipe와 abort입니다. pipe 메소드는 HTML을 지정된 Node.js 스트림으로 출력합니다. 우리는 onShellReady에서 스트리밍을 가능하게 하기 위해 pipe를 사용합니다. 정적 생성 및 크롤러를 위해 onAllReady도 사용할 수 있습니다.\n- onShellReady()는 렌더링 프로세스가 완료되고 HTML이 클라이언트 전송을 위해 준비된 경우 트리거됩니다. 이는 응답 상태 코드를 200으로 설정하고, 내용 유형 헤더를 text/html로 정의하며, 렌더링된 HTML을 응답에 pipe 메소드를 사용하여 보냅니다.\n- onShellError() 콜백은 렌더링 중 오류가 발생할 때 트리거됩니다. 이는 응답 상태 코드를 500으로 설정하고, HTML `p` 태그로 감싼 기본 오류 메시지를 전송합니다.\n\n7. 클라이언트 측에서는 index.js 파일에서 ReactDOM.createRoot를 ReactDOM.hydrateRoot로 업데이트해야 서버에서 생성된 HTML을 인터랙티브하게 만들 수 있습니다.\n\n```js\n// index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.hydrateRoot(\n  document,\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n```\n\n\n\n8. 서버 측에서 코드를 실행하려면 package.json 파일에 아래 스크립트를 추가하세요.\n\n```js\n\"ssr\": \"npm run build && node server/index.js\"  \n```\n\n이 명령은 프로젝트를 빌드하고 서버 측에서 코드를 실행하여 localhost:3002에 출력물을 생성합니다.\n\n9. 이제 npm run ssr 명령을 실행하여 출력물을 확인하세요.\n\n\n\n![이미지](/assets/img/2024-05-13-HowtoImplementSSRServerSideRenderinginReact18_1.png)\n\n여기에서는 \"renderToPipeableStream\" API만 소개했습니다. React는 \"renderToNodeStream\", \"renderToReadableStream\", \"renderToStaticMarkup\", \"renderToStaticNodeStream\" 및 \"renderToStream\"과 같은 다른 API도 제공하여 요구사항에 맞는 서버 측 렌더링을 지원합니다.\n\n이러한 API에 대한 자세한 정보는 공식 문서를 참조해주시기 바랍니다.\n\n# 결론\n\n\n\n새로운 서버 API로 React 컴포넌트를 서버 렌더링된 HTML로 렌더링할 수 있습니다. Node.js 스트림이나 웹 스트림으로 가능합니다.\n\n대부분의 경우에는 Next.js, Remix, Gatsby와 같은 프레임워크가 이 프로세스를 자동으로 처리합니다. 이 API는 앱의 최상위 수준에서 서버 렌더링된 HTML을 빌드하는 데만 사용됩니다. 초기 로드 시간, SEO, 사용자 경험 및 크로스사이트 스크립팅(XSS) 공격에 대한 취약성을 감소시킬 것입니다.\n\n그러나 SSR은 이점을 제공하면서도 복잡한 구현, 증가한 서버 부하로 인한 상당량의 처리 및 메모리 소비와 같은 단점도 가지고 있습니다. 또한 채팅 앱 및 멀티플레이어 게임과 같은 실시간 애플리케이션에는 적합하지 않을 수 있습니다.\n\n따라서 요구 사항을 고려하고 SSR 구현이 해당 요구 사항과 일치하는지 확인해 주세요.","ogImage":{"url":"/assets/img/2024-05-13-HowtoImplementSSRServerSideRenderinginReact18_0.png"},"coverImage":"/assets/img/2024-05-13-HowtoImplementSSRServerSideRenderinginReact18_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"\\\"renderToPipeableStream\\\" 서버 API를 구현하는 방법을 배우세요. 이 API를 사용하면 React 트리를 HTML로 Node.js 스트림에 렌더링할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-13-HowtoImplementSSRServerSideRenderinginReact18_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React 18은 상호작용적 사용자 인터페이스를 구축하기 위한 인기있는 JavaScript 라이브러리의 최신 버전이며, 많은 새로운 기능과 개선 사항을 제공합니다. 특히 서버 측 렌더링(SSR)의 향상된 성능은 주목할 만한 기능입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 글에서는 React의 SSR 기능을 유용한 코드 샘플과 예시와 함께 살펴보겠습니다. 하지만 먼저 클라이언트 측 렌더링과 서버 측 렌더링의 차이를 알아보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클라이언트 측 렌더링 (CSR)은 웹 페이지를 클라이언트 측에서 렌더링하는 프로세스를 말합니다 (즉, 사용자의 웹 브라우저에서). 서버는 단순히 원시 데이터나 콘텐츠를 제공하며, 클라이언트 측 JavaScript가 이를 활용하여 최종 렌더링된 페이지를 동적으로 구성합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"서버 측 렌더링 (SSR)은 서버에서 웹 페이지를 렌더링한 후 해당 페이지를 클라이언트의 웹 브라우저로 보내는 프로세스를 의미합니다. 클라이언트 측에 의존하는 대신 서버가 웹 페이지의 최종 HTML 마크업을 생성하고 이를 클라이언트로 보내는 방식을 사용합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"\\\"renderToPipeableStream\\\" 서버 API 구현하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 1: create-react-app 명령줄 도구를 사용하여 새로운 React 애플리케이션을 만듭니다. 즐겨 사용하는 터미널을 열고 아래 명령어를 입력하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npx create-react-app server-api-demo-app\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 2: 새로 생성된 React 앱으로 이동합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"cd server-api-demo-app\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 3: 이제 프로젝트에 라우팅을 처리하기 위해 react-router-dom을 추가해주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install react-router-dom\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"4단계: 애플리케이션에 몇 개의 페이지를 추가해 봅시다. app.js에 아래와 같이 추가할 수 있는 샘플 라우트를 추가해보세요:\\n(i) 홈\\n(ii) 소개\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"App\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => (\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Routes\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Route\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"path\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"element\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \"<\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"Home\"\n            }), \" />\"]\n          }), \"}>\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Route\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Route\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"path\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/about\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"element\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \"<\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"About\"\n            }), \" />\"]\n          }), \"}>\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Route\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Routes\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"5단계: 두 페이지에 내용을 추가해보세요. 참고를 원하시면, 여기를 클릭하세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"6단계: 루트 수준에 \\\"server\\\"라는 새 폴더를 만들고, 그 안에 index.js와 server.js라는 새 파일을 만듭니다. 아래 코드를 해당 파일에 복사하여 붙여넣기하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// server/index.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ignore-styles\\\"\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@babel/register\\\"\"\n        }), \")({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"ignore\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/(node_modules)/\"\n        }), \"],\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"presets\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@babel/preset-env\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@babel/preset-react\\\"\"\n        }), \"],\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./server\\\"\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 코드 조각은 Babel을 코드 번역을 위해 설정하고, \\\"node_modules\\\"와 같은 특정 파일을 필터링하며, \\\"server\\\" 모듈을 가져와 서버를 실행합니다. 이 설정은 React 서버 측 렌더링에서 일반적으로 사용되며, 서버가 React 구성 요소를 처리하고 클라이언트에 제공할 수 있도록 합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// server/server.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" express \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"express\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactDOMServer\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-dom/server\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StaticRouter\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-router-dom/server\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"App\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../src/App\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" app = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"express\"\n        }), \"();\\n\\napp.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/*\\\"\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"req, res\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" entryPoint = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/main.js\\\"\"\n        }), \"];\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { pipe, \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"abort\"\n        }), \": _abort } = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactDOMServer\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"renderToPipeableStream\"\n        }), \"(\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"StaticRouter\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"location\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{req.url}\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"App\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"StaticRouter\"\n            }), \">\"]\n          })]\n        }), \",\\n    {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"bootstrapScripts\"\n        }), \": entryPoint,\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"onShellReady\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n        res.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"statusCode\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \";\\n        res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setHeader\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Content-type\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"text/html\\\"\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"pipe\"\n        }), \"(res);\\n      },\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"onShellError\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n        res.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"statusCode\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"500\"\n        }), \";\\n        res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"send\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"<!doctype html><p>Loading...</p>\\\"\"\n        }), \");\\n      },\\n    }\\n  );\\n});\\n\\napp.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"listen\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3002\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"App is running on http://localhost:3002\\\"\"\n        }), \");\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 코드는 app.get(\\\"/*\\\", ...)을 사용하여 모든 경로에 대한 라우트 핸들러를 정의합니다. 이는 서버로 들어오는 모든 요청을 처리하는 라우트 핸들러를 의미합니다. 라우트 핸들러 내부에서:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"entryPoint 배열은 main.js 값을 가지고 정의됩니다. 이는 클라이언트 측 코드를 부트스트랩하는 데 사용되는 JavaScript 파일을 가리킵니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ReactDOMServer.renderToPipeableStream()은 HTML 렌더링을 위한 React 노드와 스트리밍 옵션을 포함하는 선택적 옵션 객체 두 가지 인수를 받습니다. 이는 두 가지 메소드를 반환하는데, pipe와 abort입니다. pipe 메소드는 HTML을 지정된 Node.js 스트림으로 출력합니다. 우리는 onShellReady에서 스트리밍을 가능하게 하기 위해 pipe를 사용합니다. 정적 생성 및 크롤러를 위해 onAllReady도 사용할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"onShellReady()는 렌더링 프로세스가 완료되고 HTML이 클라이언트 전송을 위해 준비된 경우 트리거됩니다. 이는 응답 상태 코드를 200으로 설정하고, 내용 유형 헤더를 text/html로 정의하며, 렌더링된 HTML을 응답에 pipe 메소드를 사용하여 보냅니다.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"onShellError() 콜백은 렌더링 중 오류가 발생할 때 트리거됩니다. 이는 응답 상태 코드를 500으로 설정하고, HTML \", _jsx(_components.code, {\n          children: \"p\"\n        }), \" 태그로 감싼 기본 오류 메시지를 전송합니다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"7\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"클라이언트 측에서는 index.js 파일에서 ReactDOM.createRoot를 ReactDOM.hydrateRoot로 업데이트해야 서버에서 생성된 HTML을 인터랙티브하게 만들 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// index.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactDOM\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-dom\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BrowserRouter\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-router-dom\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"App\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./App\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactDOM\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hydrateRoot\"\n        }), \"(\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \",\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"React.StrictMode\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"BrowserRouter\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"App\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"BrowserRouter\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"React.StrictMode\"\n            }), \">\"]\n          })]\n        }), \"\\n);\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"8\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"서버 측에서 코드를 실행하려면 package.json 파일에 아래 스크립트를 추가하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ssr\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"npm run build && node server/index.js\\\"\"\n        }), \"  \\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 명령은 프로젝트를 빌드하고 서버 측에서 코드를 실행하여 localhost:3002에 출력물을 생성합니다.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"9\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이제 npm run ssr 명령을 실행하여 출력물을 확인하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-13-HowtoImplementSSRServerSideRenderinginReact18_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기에서는 \\\"renderToPipeableStream\\\" API만 소개했습니다. React는 \\\"renderToNodeStream\\\", \\\"renderToReadableStream\\\", \\\"renderToStaticMarkup\\\", \\\"renderToStaticNodeStream\\\" 및 \\\"renderToStream\\\"과 같은 다른 API도 제공하여 요구사항에 맞는 서버 측 렌더링을 지원합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 API에 대한 자세한 정보는 공식 문서를 참조해주시기 바랍니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새로운 서버 API로 React 컴포넌트를 서버 렌더링된 HTML로 렌더링할 수 있습니다. Node.js 스트림이나 웹 스트림으로 가능합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"대부분의 경우에는 Next.js, Remix, Gatsby와 같은 프레임워크가 이 프로세스를 자동으로 처리합니다. 이 API는 앱의 최상위 수준에서 서버 렌더링된 HTML을 빌드하는 데만 사용됩니다. 초기 로드 시간, SEO, 사용자 경험 및 크로스사이트 스크립팅(XSS) 공격에 대한 취약성을 감소시킬 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러나 SSR은 이점을 제공하면서도 복잡한 구현, 증가한 서버 부하로 인한 상당량의 처리 및 메모리 소비와 같은 단점도 가지고 있습니다. 또한 채팅 앱 및 멀티플레이어 게임과 같은 실시간 애플리케이션에는 적합하지 않을 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"따라서 요구 사항을 고려하고 SSR 구현이 해당 요구 사항과 일치하는지 확인해 주세요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}