{"pageProps":{"posts":[{"title":"간단한 HTML로 SEO 점수를 올리는 방법들","description":"","date":"2024-05-02 00:30","slug":"2024-05-02-SuperchargeYourWebsiteSimpleSEOTricksUsingHTML","content":"\n\n![Supercharge Your Website with Simple SEO Tricks Using HTML](/assets/img/2024-05-02-SuperchargeYourWebsiteSimpleSEOTricksUsingHTML_0.png)\n\n안녕하세요, 웹 초보자 여러분! 여러분의 웹사이트를 디스코 볼처럼 밝게 빛나게 하고 싶나요? 그럼 잘 들어주세요! 오늘은 SEO (검색 엔진 최적화)라는 비밀 무기에 대해 알아보겠습니다. 걱정하지 마세요, 무서운 게 아니에요. 단지 검색 엔진이 여러분의 웹사이트를 더 잘 이해하도록 돕는 것뿐이에요. 그리고 알아두어야 할 것은 SEO의 큰 부분이 여러분의 웹사이트 구성 요소이자 HTML 코드라는 것이랍니다!\n\n이렇게 생각해보세요. 여러분의 웹사이트가 거대한 집이라고 상상해보세요. 그리고 검색 엔진이 친근한 방문자라고 생각해보세요. 좋은 SEO를 통해 그들에게 명확한 지도와 각 방에 라벨을 제공하는 것이죠. 이렇게 하면 그들은 모든 것을 쉽게 찾을 수 있게 되고 다른 사람들에게 여러분의 멋진 웹사이트에 대해 알려줄 수 있어요!\n\n이렇게 하면 HTML 코드를 사용하여 슈퍼 SEO를 활용할 수 있어요:\n\n<div class=\"content-ad\"></div>\n\n- 헤드라인 히어로 (타이틀 태그): 검색 결과에서 사람들이 볼 수 있는 끌리는 제목입니다. 짧고 간결하게 작성하고, 웹사이트 내용을 설명하세요. \"피자 파티 파라다이스\"라는 것이 있으면 \"내 웹사이트\"보다 훨씬 좋겠죠.\n- 제목 구조: 제목은 웹사이트 콘텐츠 내에서 각 주제를 나타냅니다. 주요 주제에 H1을 사용하고, 부제목에 H2를 사용하세요. 방문자가 웹사이트를 쉽게 스캔할 수 있게 해주며, 검색 엔진에게 중요한 내용임을 알려줍니다.\n- 이미지 강력함 (대체 텍스트): 검색 엔진은 멋진 사진을 볼 수 없기 때문에, 대체 텍스트를 사용해 이미지에 대한 설명을 제공하세요. 이는 스크린 리더를 사용하는 사람들을 도와주고, 검색 엔진에게 사진이 무엇인지 알려줍니다.\n- 깔끔하고 명확한 코드: 방문자가 혼란스러워하는 엉망인 지시사항을 상상해보세요. 방문자를 혼란스럽게 만들 수 있는 서툴러진 HTML 코드는 검색 엔진도 혼란스럽게 할 수 있습니다! 코드에 오류가 없는지 확인하기 위해 온라인 도구를 사용하고, 깔끔하게 정리해주세요.\n\n보너스 레벨 업 팁!\n\n- 웹사이트 연결하기: 웹사이트 페이지를 서로 연결하여 멋진 웹사이트 놀이터처럼 만드세요. 이렇게 하면 검색 엔진이 콘텐츠 간의 관련성을 파악할 수 있습니다.\n- 모바일 마법: 대부분의 사람들이 지금은 핸드폰에서 검색하기 때문에, 웹사이트가 모든 기기에서 멋지게 보이고 원활하게 작동하는지 확인하세요.\n- 구조화 된 데이터 (선택 사항): 이는 검색 엔진을 위해 추가 상세 정보로 생각할 수 있습니다. 예를 들어 레스토랑 웹사이트의 리뷰처럼요. 검색 결과를 돋보이게 만들 수 있습니다!\n\n기억하세요: SEO는 검색 엔진과 친구가 되는 것과 같습니다. 이 간단한 HTML 요령을 사용하면 웹사이트를 이해하고 그에 걸맞는 인식을 얻을 수 있을 거예요. 그러니 멋진 웹사이트로 검색 결과를 정복해보세요!","ogImage":{"url":"/assets/img/2024-05-02-SuperchargeYourWebsiteSimpleSEOTricksUsingHTML_0.png"},"coverImage":"/assets/img/2024-05-02-SuperchargeYourWebsiteSimpleSEOTricksUsingHTML_0.png","tag":["Tech"],"readingTime":2},{"title":"이제는 SVG 파비콘을 써야할 시대, PNG 파비콘은 쓰지 마세요","description":"","date":"2024-05-02 00:29","slug":"2024-05-02-AreyouusingSVGfaviconsyetAguideformodernbrowsers","content":"\n\n![이미지](/assets/img/2024-05-02-AreyouusingSVGfaviconsyetAguideformodernbrowsers_0.png)\n\n현재 모든 최신 브라우저에서 SVG 파비콘을 지원하고 있습니다.\n\n그리고 아마 여러 프로젝트에서 복사하고 붙여넣는 이 모든 아이콘 링크와 크기들이 필요 없을지도 모르겠어요. 단어마다 어떤 것이 정말로 필수적인지 알아봅시다.\n\n![이미지](/assets/img/2024-05-02-AreyouusingSVGfaviconsyetAguideformodernbrowsers_1.png)\n\n<div class=\"content-ad\"></div>\n\n# 아이콘\n\n주요 파비콘은 임의 크기의 SVG 파일을 사용할 수 있습니다. type=\"image/svg+xml\"은 필요하지 않습니다.\n\n```js\n<link rel=\"icon\" href=\"favicon.svg\">\n```\n\n# 마스크 아이콘\n\n<div class=\"content-ad\"></div>\n\nSafari의 경우 조금 다릅니다. mask-icon을 추가해야 합니다. SVG 형식이지만 하나의 색상으로 이루어져 있어야 하며 투명 배경에 배치되어야 합니다. 브라우저가 속성의 색상을 추가합니다.\n\n```js\n<link rel=”mask-icon” href=”mask-icon.svg” color=”#000000\">\n```\n\n# 터치 아이콘\n\niOS 기기 및 브라우저의 즐겨찾기 새 탭 페이지에 대한 아이콘입니다. 180 x 180 크기만 필요하며 sizes 속성은 불필요합니다.\n\n<div class=\"content-ad\"></div>\n\n```md\n<link rel=\"apple-touch-icon\" href=\"apple-touch-icon.png\">\n```\n\n# 매니페스트\n\nmanifest.json은 웹 앱이나 웹 사이트에 대한 정보를 제공합니다. 이 줄들은 라이트하우스 테스트를 통과하는 데 필요합니다. 연결된 아이콘은 안드로이드와 크롬에서 사용됩니다. 최대 크기인 512 x 512만 필요합니다.\n\n```js\n{\n    \"name\": \"Starter\",\n    \"short_name\": \"Starter\",\n    \"icons\": [{\n        \"src\": \"google-touch-icon.png\",\n        \"sizes\": \"512x512\"\n    }],\n    \"background_color\": \"#ffffff\",\n    \"theme_color\": \"#ffffff\",\n    \"display\": \"fullscreen\"\n}\n```\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! Android의 Chrome 브라우저 색상을 설정할 때 여전히 theme-color 메타 태그가 필요합니다.\n\n```js\n<meta name=\"theme-color\" content=\"#ffffff\">\n```\n\n# 완료\n\n현재의 모던 브라우저를 위해 필요한 모든 아이콘들이 여기에 있습니다. 그 외에는 불필요합니다. Windows 타일에 다른 아이콘을 원할 경우에만 msapplication-TileImage를 추가할 수 있지만, 그렇지 않으면 apple-touch-icon이 사용됩니다. TileColor는 더 이상 사용되지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n# 그 외\n\n아쉽게도 아직 모든 사람이 최신 브라우저를 사용하는 것은 아니지만, 웹사이트 루트에 32 x 32 favicon.ico 파일을 추가함으로써 쉽게 해결할 수 있습니다. 이 방법은 어디에서나 작동하며, 심지어 할머니도 사용할 수 있습니다.\n\n![이미지](/assets/img/2024-05-02-AreyouusingSVGfaviconsyetAguideformodernbrowsers_2.png)\n\n# 다크 모드\n\n<div class=\"content-ad\"></div>\n\n끝내는 팁 하나 더 드릴게요. 다크 모드에 대한 조언이에요. SVG 파비콘의 장점 중 하나는 CSS로 색상을 변경할 수 있다는 거예요. prefers-color-scheme 미디어 쿼리를 사용하면 사용자의 다크 또는 라이트 모드에 맞게 파비콘의 색상을 변경할 수 있어요. 하지만 이 방법은 mask-icon에는 동작하지 않아요. 왜냐하면 색상이 해당 속성에 포함되어 있기 때문이죠. Safari는 충분한 대비가 없을 경우 흰색 배경을 추가해줘요.\n\n```js\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\">\n    <style>\n        path {\n            fill: #000;\n        }\n        @media (prefers-color-scheme: dark) {\n            path {\n                fill: #fff;\n            }\n        }\n    </style>\n    <path fill-rule=\"evenodd\" d=\"M0 0h16v16H0z\"/>\n</svg>\n```\n\n<img src=\"/assets/img/2024-05-02-AreyouusingSVGfaviconsyetAguideformodernbrowsers_3.png\" />\n\n# 결과\n\n<div class=\"content-ad\"></div>\n\n여기 최종 결과입니다. 웹사이트의 `head`에 복사하고 루트에 favicon.ico를 두지 않도록 잊지 마세요. ✌️\n\n```js\n<meta name=\"theme-color\" content=\"#ffffff\">\n<link rel=\"icon\" href=\"favicon.svg\">\n<link rel=\"mask-icon\" href=\"mask-icon.svg\" color=\"#000000\">\n<link rel=\"apple-touch-icon\" href=\"apple-touch-icon.png\">\n<link rel=\"manifest\" href=\"manifest.json\">\n```","ogImage":{"url":"/assets/img/2024-05-02-AreyouusingSVGfaviconsyetAguideformodernbrowsers_0.png"},"coverImage":"/assets/img/2024-05-02-AreyouusingSVGfaviconsyetAguideformodernbrowsers_0.png","tag":["Tech"],"readingTime":3},{"title":"프론트엔드 개발자로 30일만에 거듭나는 방법","description":"","date":"2024-05-02 00:28","slug":"2024-05-02-30DaysFrontenddevelopmentchallenge","content":"\n\n**주 1: 집중 기초**\n\n- 1-2일: HTML 기초에 깊게 파고들며 태그, 속성 및 의미론적 요소를 다룹니다. 기본 웹페이지 구조를 만듭니다.\n- 3-4일: CSS 기초를 집중적으로 공부하여 선택자, 속성 및 고급 레이아웃 기술을 이해합니다. 복잡한 레이아웃을 스타일링하는 연습을 합니다.\n- 5-7일: JavaScript 기초에 온전히 몰두하여 변수, 데이터 유형, 연산자 및 제어 구조에 중점을 둡니다. 간단한 스크립트와 챌린지로 개념을 강화합니다.\n\n**주 2: 고급 프런트엔드 기술**\n\n- 8-10일: 폼, 표 및 멀티미디어 요소와 같은 고급 HTML 기능을 탐험합니다. 반응형 디자인 원리를 구현합니다.\n- 11-13일: CSS Flexbox 및 Grid 레이아웃을 마스터하여 현대적이고 유연한 페이지 구조를 만듭니다. 애니메이션 및 전환을 실험합니다.\n- 14-14일: 펑션, 이벤트 및 DOM 조작을 통해 JavaScript 스킬을 업그레이드합니다. 상호 작용하는 구성 요소와 미니 프로젝트를 구축합니다.\n\n**주 3: 프레임워크 및 라이브러리**\n\n<div class=\"content-ad\"></div>\n\n15-17일: Tailwind CSS와 같은 CSS 프레임워크를 집중적으로 학습하여 유틸리티 우선 디자인 원칙을 마스터하세요. UI 구성 요소를 빠르게 프로토타입하세요.18-20일: React와 같은 JavaScript 라이브러리에 대해 깊이 알아가며 컴포넌트 기반 아키텍처와 상태 관리에 초점을 맞추세요. 동적 웹 애플리케이션을 구축하세요.21-21일: React 컴포넌트와 Tailwind CSS를 사용하여 복잡한 기능을 구현하는 실제 프로젝트 튜토리얼에 도전하세요.\n\n4주차: 풀스택 탐구\n\n22-24일: 서버 측 JavaScript 개발을 위해 Node.js 및 Express.js를 집중적으로 공부하세요. RESTful API를 구축하고 CRUD 작업을 처리하세요.25-27일: 데이터베이스 기초를 학습하고 Express.js와 MongoDB를 통합하세요. 데이터 모델링과 스키마 디자인을 연습하세요.28-28일: 프론트엔드와 백엔드 기술을 결합하여 풀스택 애플리케이션을 구축하고 Heroku와 같은 클라우드 플랫폼에 배포하세요. 성능과 보안을 최적화하세요.\n\n5주차: 숙련도 및 응용\n\n<div class=\"content-ad\"></div>\n\nDays 29-31: 프로젝트를 검토하고 품질, 확장성 및 유지 보수성에 중점을 두어 다듬어보세요. 고급 기능 및 최적화를 구현해 보세요.\nDays 32-34: 코딩 도전 과제와 알고리즘 연습에 참여하여 문제 해결 능력을 향상시켜 보세요. 면접 준비 자료를 탐색해 보세요.\nDays 35-35: 학습 여정을 되돌아보고 개선할 점을 파악하고 지속적인 성장을 위한 목표를 설정해 보세요. 이 열정적인 주간 계획은 웹 개발 개념과 기술에 완전히 몰입시켜 구석구석을 탐험하며 발전을 가속화시킵니다. 여정 도중에도 집중력과 헌신을 유지하고 동기부여를 잃지 마세요.\n\n ![이미지](/assets/img/2024-05-02-30DaysFrontenddevelopmentchallenge_0.png)","ogImage":{"url":"/assets/img/2024-05-02-30DaysFrontenddevelopmentchallenge_0.png"},"coverImage":"/assets/img/2024-05-02-30DaysFrontenddevelopmentchallenge_0.png","tag":["Tech"],"readingTime":2},{"title":"React와 TypeScript를 사용하여 높이가 변하는 Textarea 만들기","description":"","date":"2024-05-02 00:27","slug":"2024-05-02-CreatingaTextareawithdynamicheightusingReactandTypescript","content":"\n\n<img src=\"/assets/img/2024-05-02-CreatingaTextareawithdynamicheightusingReactandTypescript_0.png\" />\n\n# 소개\n\n이 글에서는 내용에 따라 자동으로 커지고 작아지는 `textarea`를 만드는 방법을 보여드리겠습니다. 이 솔루션은 React Hook으로 추출하여 여러 구성 요소 및 프로젝트에서 쉽게 재사용할 수 있습니다.\n\n<img src=\"https://miro.medium.com/v2/resize:fit:744/1*y6pw2_PMeE8fLGdxRgOEyA.gif\" />\n\n<div class=\"content-ad\"></div>\n\n# 배경\n\n자바스크립트를 사용하여 `textarea` 요소의 자동 크기 조정에 대해 여러 기술이 있습니다. 이 중 일부는 다음과 같습니다:\n\n- 다른 HTML 요소에 contenteditable 속성 추가.\n- 줄 바꿈 수를 계산하고 줄 높이에 곱하여 전체 높이를 얻기.\n- `textarea` 내부 콘텐츠를 기반으로 요소 크기를 업데이트하는 가상 요소 사용.\n\n내 의견으로는 상기 해결책 모두 상당한 무역 오프와 불필요한 버그 및 구현에서 발생할 수 있는 이상한 점이 있을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 리액트의 장점을 살리기\n\nhack해결책에 의존하는 대신, 리액트를 활용해 보는 게 좋겠죠. 이를 실현하는 한 가지 방법은 `textarea`를 제어 컴포넌트로 만드는 것입니다. 이렇게 하면 React가 엘리먼트의 내용 값에 대한 유일한 진리원천이 될 수 있습니다. 결과적으로, useEffect 훅을 사용해서 그 값을 기다릴 수 있고, 그에 따른 올바른 높이를 계산할 수 있게 됩니다.\n\n# 높이 조절하기\n\n여기서 비밀은 `textarea`의 scrollHeight를 사용해 정확한 높이를 구하는 것입니다. 그것을 위해서는 `textarea`의 높이를 잠깐 0으로 설정하여 scrollHeight가 엘리먼트의 고유한 높이와 같도록 강제해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n그 값을 얻으면, 간단히 스타일 속성을 사용하여 요소의 높이를 설정할 수 있습니다. 이렇게 하면 `textarea`가 내용의 높이를 차지하도록 할 수 있습니다.\n\n이 모든 작업은 동일한 useEffect 훅 내에서 수행해야 한다는 점을 염두에 두세요. state 또는 refs를 사용하여 scrollHeight를 저장하려고 하면 이 트릭이 작동하지 않습니다.\n\n참고: `textarea`의 rows 속성이 1로 설정되어 있는지 확인하세요(기본값은 2입니다). 이렇게 하면 요소의 초기 높이가 올바르게 설정됩니다.\n\n# 재사용 가능한 훅 만들기\n\n<div class=\"content-ad\"></div>\n\n저는 재사용 가능한 후크인 useAutosizeTextArea로 이 로직을 추출했어요. 이건 반드시 필요한 건 아니지만, 앞으로 다른 컴포넌트에 이 기능을 쉽고 간결한 방법으로 가져올 수 있을 거라고 생각했어요.\n\n이 후크를 사용하려면, 컴포넌트 내에서 호출하고 `textarea`의 ref와 현재 값(current value)을 전달하면 돼요.\n\n# 예시","ogImage":{"url":"/assets/img/2024-05-02-CreatingaTextareawithdynamicheightusingReactandTypescript_0.png"},"coverImage":"/assets/img/2024-05-02-CreatingaTextareawithdynamicheightusingReactandTypescript_0.png","tag":["Tech"],"readingTime":2},{"title":"ReactJS: 클릭하지 않아도 렌더링되거나 로드될 때 onClick이 실행되는 이유","description":"","date":"2024-05-02 00:26","slug":"2024-05-02-ReactJSonClickgetsexecutedwhenrenderedorloadedwithoutaclick","content":"\n\n아주 간단한 방법으로 해결할 수 있어요.\n\n![ReactJS onClick gets executed when rendered or loaded without a click](/assets/img/2024-05-02-ReactJSonClickgetsexecutedwhenrenderedorloadedwithoutaclick_0.png)\n\n그룹 프로젝트를 진행하면서 onClick이 클릭 없이 실행되는 것을 발견했어요. 구글을 찾아보니 왜 이런지 마침내 알게 되었어요.\n\n답은 매우 간단해요. 코드를 다음과 같이 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<button onClick={() => handleClick()}>Click Me!</button>\n```\n\n이렇게 변경해 주세요. 그 이유는 간단합니다. 버튼이 로드될 때, onClick 함수가 평가됩니다. onClick에서 반환된 함수는 버튼이 클릭될 때마다 실행될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n그러니까, 우리가 클릭할 때마다 실행되길 원하는 함수를 또 다른 함수 안에 감싸서 원하는 함수를 반환해야 해.\n\n나는 스택오버플로우에 답을 찾았어.\n\n내 블로그에서도 이 스토리를 찾을 수 있어.","ogImage":{"url":"/assets/img/2024-05-02-ReactJSonClickgetsexecutedwhenrenderedorloadedwithoutaclick_0.png"},"coverImage":"/assets/img/2024-05-02-ReactJSonClickgetsexecutedwhenrenderedorloadedwithoutaclick_0.png","tag":["Tech"],"readingTime":1},{"title":"Uncaught TypeError: Cannot set properties of null (setting ‘inner HTML’) 해결방법","description":"","date":"2024-05-02 00:26","slug":"2024-05-02-UncaughtTypeErrorCannotsetpropertiesofnullsettinginnerHTMLSolutions","content":"\n\n# \"Uncaught TypeError: Cannot set properties of null (setting 'innerHTML')\" 오류 수정하기\n\n\"Uncaught TypeError: Cannot set properties of null (setting 'innerHTML')\"라는 오류 메시지는 JavaScript에서 자주 발생하는 오류로, null 객체의 `innerHTML` 속성을 설정하려고 할 때 발생합니다. 보통 이 오류는 DOM(Document Object Model)에 로드되지 않거나 존재하지 않는 요소의 HTML 내용을 조작하려고 시도할 때 발생합니다.\n\n이 오류를 해결하려면, `innerHTML`을 통해 대상 요소를 지정하기 전에 해당 요소가 실제로 DOM에 있는지 확인해야 합니다. 이 문제를 해결하고 해결하기 위해 다음과 같은 몇 가지 단계를 따를 수 있습니다:\n\n## 1. DOM에 요소가 있는지 확인하기\n\n<div class=\"content-ad\"></div>\n\n먼저 `innerHTML`로 조작하려는 요소가 DOM에 있는지 확인하세요. 브라우저 개발자 도구를 사용하여 HTML 구조를 검사하여 확인할 수 있습니다. 자바스크립트 코드에서 요소가 null이 되도록 하는 오타나 잘못된 ID 또는 클래스 이름을 찾아보세요.\n\n## 2. 요소에 액세스하기 전에 요소가 로드되었는지 확인\n\nJavaScript 코드를 실행하기 전에 요소가 로드되지 않은 상태에서 코드를 실행하는 경우 이 오류가 발생할 수 있습니다. 요소에 액세스하기 전에 DOM에 요소가 있는지 확인하려면 다음 방법 중 하나를 사용할 수 있습니다:\n\n### a. 스크립트를 요소 뒤에 배치하기\n\n<div class=\"content-ad\"></div>\n\n자바스크립트 코드를 수정된 innerHTML 속성을 변경하는 것을 HTML 코드 이후에 배치하십시오. 이렇게 함으로써 스크립트가 해당 요소를 조작하기 전에 요소가로드되고 접근 가능하게 합니다.\n\n```html\n<!-- HTML 코드 -->\n<div id=\"myElement\"></div>\n\n<!-- JavaScript 코드 -->\n<script>\n// 이 스크립트가 HTML 구조 내 요소 이후에 위치하도록 하십시오\nvar element = document.getElementById(\"myElement\");\nelement.innerHTML = \"새로운 내용\";\n</script>\n```\n\n### b. 코드를 이벤트 리스너로 래핑하기\n\n<div class=\"content-ad\"></div>\n\n웹 페이지가 로드되는 동안 발생하는 이벤트를 활용하여 JavaScript 코드를 실행하도록 이벤트 리스너로 감싸보세요. 이렇게 하면 원하는 요소를 조작하기 전에 해당 요소가 존재하는지 확인할 수 있습니다. `DOMContentLoaded` 이벤트를 대기하는 것이 일반적입니다.\n\n```html\n<!-- HTML 코드 -->\n<div id=\"myElement\"></div>\n\n<!-- JavaScript 코드 -->\n<script>\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var element = document.getElementById(\"myElement\");\n    if (element) {\n        element.innerHTML = \"새로운 내용\";\n    } else {\n        console.log(\"요소를 찾을 수 없습니다.\");\n    }\n});\n</script>\n```\n\n<div class=\"content-ad\"></div>\n\n만약 대상이 되는 요소가 DOM에 존재하지 않는 경우에 대비하여 이 상황을 우아하게 처리하기 위해 추가적인 확인을 추가할 수 있습니다. `innerHTML`을 수정하기 전에 요소가 null 또는 undefined인지 확인하고 오류를 피하기 위해 적절한 조치를 취하세요.\n\n```javascript\nvar element = document.getElementById(“myElement”);\nif (element) {\nelement.innerHTML = “새 콘텐츠”;\n} else {\nconsole.error(“DOM에서 요소를 찾을 수 없습니다.”);\n}\n```\n\n이러한 확인을 통해 요소가 사용할 수 없을 때 발생하는 \"Uncaught TypeError: Cannot set properties of null (setting ‘innerHTML’)\" 오류를 방지하고 JavaScript 코드에서 올바른 요소를 대상으로 하는 경우에 대비할 수 있습니다.\n\n코드를 다시 확인하고 요소 ID나 클래스 이름이 올바른지 확인하고 JavaScript 코드에서 올바른 요소를 대상으로 지정하도록 주의하세요.\n\n<div class=\"content-ad\"></div>\n\n\"다음 단계를 따라하면 'Uncaught TypeError: Cannot set properties of null (setting 'innerHTML')' 오류를 해결하고 JavaScript 코드에서 HTML 요소의 내용을 성공적으로 조작할 수 있을 겁니다.\"","ogImage":{"url":"/assets/img/2024-05-02-UncaughtTypeErrorCannotsetpropertiesofnullsettinginnerHTMLSolutions_0.png"},"coverImage":"/assets/img/2024-05-02-UncaughtTypeErrorCannotsetpropertiesofnullsettinginnerHTMLSolutions_0.png","tag":["Tech"],"readingTime":3},{"title":"평범한 HTML과 CSS로 야구 스코어보드 만들기","description":"","date":"2024-05-02 00:25","slug":"2024-05-02-RecreatingBaseballScoreboardsoutofPlainOldHTMLandCSS","content":"\n\n웹 디자인을 시작할 때는 HTML과 CSS만으로 사이트를 멋지게 꾸밀 방법이 많지 않았어요. 그래서 Photoshop 이미지를 잘라서 'table'로 페이지에 고정하는 것이 많은 사람들이 사이트를 만드는 방법이었죠.\n\n하지만 요즘 CSS의 기능은 매우 확장되었어요.\n\n작년에는 웹사이트나 SaaS 제품과는 관련이 없는 작은 취미로 시작했어요. HTML과 CSS만으로 야구 점수판을 재현하기로 했죠.\n\n저는 항상 점수판과 오래된 경기장에 매혹을 느꼈어요. 아마 그것이 제가 디자인에 대한 오리지널한 열정을 얻게 된 곳인지도 몰라요. 그래서 디자인과의 관계가 전체적으로 다시 원점에 돌아온 것 같아요.\n\n<div class=\"content-ad\"></div>\n\n이 프로젝트를 통해 나는 보통 깨끗하고 조직적인 코드를 작성하는 내 성향을 떨쳤어. 웹 표준, DRY 코드, 심지어 성능도 고려하지 않았어 — 나에게 중요한 건 페이지가 최종적으로 어떻게 렌더링되는지 뿐이었어. 이것은 나의 항상 사용해온 자료들을 새롭고 자유분방한 방법으로 활용하는 재미있는 방법이었어.\n\n내 첫 번째 시도들의 스크린샷을 아래에서 확인할 수 있어. 바로 페이지로의 직접적인 링크도 있어.\n\n내 첫 번째 완성작은 1941년의 Wrigley Field야. 난 팀 펜런트들이 바람에 흔들리는 듯한 CSS 애니메이션을 추가했어. 그리고 스코어보드 시계는 심지어 10분쯤 움직여 (매우 빨리), 오후 하늘에 구름이 짙어지고 날씨가 흐려지면서 비가 첫방울 떨어질 때를 볼 수 있어.\n\n나는 원근 명령어를 사용해 전체적으로 오른쪽으로 기울어진 모습을 만들기 위해 변환 속성과 회전을 사용했어. 솔직히 말하면, 나는 원근이 어떻게 작용하는지 정말 이해하지 못해 — 이건 순전히 시행착오로 이루어진 거였어. (보통 나는 무슨 일이 벌어지는지 이해하려고 노력하지!)\n\n<div class=\"content-ad\"></div>\n\n페이지를 방문하시려면 여기를 클릭해주세요: https://kawaicheung.io/scoreboards/wrigley-1941.html.\n\n제 두 번째 완성작은 1978년 Comiskey Park입니다. 아침이 이른 오후로 변합니다.\n\n원본 스코어보드에는 많은 세부 정보가 있습니다. 여기에 그것을 전달할 수 있기를 희망합니다. 각 스코어보드 전구는 고유한 `div`로 표현되며 클래스를 추가하여 각 전구를 “켤” 수 있습니다. 옛 사진을 찾아 스코어보드에 적절한 행과 열 수를 가지고 있는지 확인하는 것이 재미있었습니다.\n\n스코어보드에 깊이감을 주기 위해 상단을 덮고 있는 조명, 그리고 하단의 울타리와 레일 시스템 아래에 그림자 속성을 상당히 사용하고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n아래 가로선에 선형 그라데이션을 적용했어요. 이렇게 하면 그것들이 자연스럽고 경고적으로 보일 거예요. 그렇지 않으면 전체 화면에 1픽셀 직선으로 보이게 될 거예요.\n\n그리고 화면 가장 아래 부분, 흰색 전구로 이루어진 역삼각형 모양을 주목해 주세요. 몇몇 전구들이 다른 것보다 어둡게 보이는데, 마치 소멸된 것처럼 보이는 거죠. 적어도 그것이 제 목표였어요.\n\n페이지를 방문하려면 여기를 클릭해 주세요: https://kawaicheung.io/scoreboards/comiskey-1978.html\n\n각 나라볼판에는 각자의 이야기와 독특한 어려움이 있어요. 이 프로젝트를 계속 진행할지는 확신이 없지만, 계속하게 된다면 이 곳에서 볼 수 있을 거에요:\n\n<div class=\"content-ad\"></div>\n\n읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-02-RecreatingBaseballScoreboardsoutofPlainOldHTMLandCSS_0.png"},"coverImage":"/assets/img/2024-05-02-RecreatingBaseballScoreboardsoutofPlainOldHTMLandCSS_0.png","tag":["Tech"],"readingTime":2},{"title":"리액트에서 여러 파일 업로드를 구현하기(코드 있음)","description":"","date":"2024-05-02 00:23","slug":"2024-05-02-HowtoimplementmultiplefileuploadsinReact","content":"\n\n<img src=\"/assets/img/2024-05-02-HowtoimplementmultiplefileuploadsinReact_0.png\" />\n\n요즘 많은 웹사이트들이 파일을 업로드할 수 있는 옵션을 가지고 있어요. 대부분은 폼을 통해 이루어져요. 만약 여러분도 이런 기능을 여러분의 웹사이트에 추가하고 싶다면, 여기 왔습니다! 이 글에서는 React에서 여러 파일을 업로드하는 방법을 보여드릴거에요.\n\n이 글에서는 React의 기본 지식을 이미 가지고 있다고 가정하고 설명할 거에요. 그렇지 않다면, React 문서를 참고해서 시작해보세요.\n\n# 설정하기\n\n<div class=\"content-ad\"></div>\n\n먼저 다음 명령어로 React 앱을 만들어주세요.\n\n```js\ncreate-react-app multiple-file-upload\n```\n\n프로젝트에 Bootstrap을 사용했으니 index.html 파일에 다음 CDN을 추가해주세요.\n\n```js\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\n```\n\n<div class=\"content-ad\"></div>\n\n또는 여기서 부트스트랩 소스 파일을 다운로드할 수도 있습니다.\n\n# 업로드 버튼 생성하기\n\n먼저, 여러 파일을 업로드할 수 있는 파일 형식의 입력란을 만들어보세요. 특정 파일 유형만 허용하려면 accept 속성을 사용하여 허용하려는 파일 유형을 지정할 수 있습니다.\n\n```js\n<input id='fileUpload' type='file' multiple\n        accept='application/pdf, image/png'\n/>\n```\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-02-HowtoimplementmultiplefileuploadsinReact_1.png)\n\n그러나 여러분만의 스타일과 파일 표시 방식을 가진 버튼을 가지는 것이 좋습니다. 따라서 입력란에 display: none 속성을 추가하고 레이블을 사용하여 레이블을 입력란과 바인딩하여 그 기능을 복제할 수 있도록 하세요.\n\n```js\n<label htmlFor='fileUpload'>\n    <a className='btn btn-primary'> 파일 업로드 </a>\n</label>\n```\n\n이 레이블 내에서 원하는 내용을 표시할 수 있습니다. 이 경우에는 간단한 버튼을 사용했습니다. 제가 버튼 대신 a를 사용하고 bootstrap 클래스를 적용했음을 유의하세요.\n\n<div class=\"content-ad\"></div>\n\n지금, 입력을 숨기고 파일을 표시하는 고유한 방식을 채택한 이유는 기본 기능에 일부 제한이 있기 때문입니다. 여러 파일을 업로드할 때, 파일 수만 표시되며 다시 업로드하려고 하면 업로드된 파일들이 대체됩니다.\n\n# 여러 파일 업로드 다루기\n\n지금까지 위에서 설명한 제한 사항을 가지고 여러 파일을 업로드할 수 있는 정적 업로드 버튼이 있습니다.\n\n어떤 경우에는 문제가 되지 않을 수 있지만, 사용자가 한꺼번에 모든 파일을 선택할 수 없는 경우는 어떻게 할까요? 모든 파일이 서로 다른 폴더에 있는 경우는 어떻게 할까요?\n\n<div class=\"content-ad\"></div>\n\n상기한 제약사항에 따라 사용자는 먼저 모든 파일을 동일한 폴더로 가져와 한꺼번에 모두 업로드해야 합니다. 이것은 귀찮은 작업이며, 우리의 임무는 최종 사용자를 위해 일을 더 쉽게 만드는 것입니다. 어떻게 그것을 할 수 있는지 살펴보겠습니다.\n\n## 파일 업로드 이벤트 처리\n\n파일 업로드 이벤트를 처리하려면 onChange 속성을 추가하여 콜백 함수 handleFileEvent를 사용하는 입력란에 추가하십시오.\n\n```js\nconst handleFileEvent =  (e) => {\n    --- 여기서 파일 업로드 이벤트 처리 ---\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 함수는 이벤트 객체를 인수로 사용하며 이벤트의 여러 속성을 포함합니다. 또한 이벤트에 업로드된 파일도 포함됩니다. 이 파일들은 e.target.files를 사용하여 액세스할 수 있습니다.\n\n이 파일들은 배열과 비슷한 객체 형태로 저장됩니다.\n\n![이미지](/assets/img/2024-05-02-HowtoimplementmultiplefileuploadsinReact_2.png)\n\n## 업로드된 파일을 상태로 저장하기\n\n<div class=\"content-ad\"></div>\n\n현재 업로드된 파일 목록을 저장하기 위한 상태 uploadedFiles를 생성하세요. 처음에는 빈 상태여야 합니다.\n\n```js\nconst [uploadedFiles, setUploadedFiles] = useState([])\n```\n\n저희의 상태 uploadedFiles는 배열이지만 event.target.files는 객체이기 때문에 이를 배열로 변환해야 합니다. 배열 모양의 객체를 배열로 변환하는 방법이 있습니다. handleFileEvent 메서드 내에서 이 작업을 수행해주세요.\n\n```js\nconst chosenFiles = Array.prototype.slice.call(e.target.files)\nhandleUploadFiles(chosenFiles);\n```\n\n<div class=\"content-ad\"></div>\n\n현재 이벤트에서 업로드되고 있는 파일이 chosenFiles에 포함되어 있습니다.\n\n이제 handleUploadFiles 메서드 내에서 선택한 파일을 인수로 받아 상태에 이 파일들을 추가해보겠습니다.\n\n```js\nconst handleUploadFiles = files => {\n   --- 상태에 파일 추가하기 ---\n}\n```\n\n우선, 상태 배열의 사본을 만들어 현재 선택된 파일을 해당 배열에 추가해주세요. 이유를 설명하기 위해 forEach 대신 some() 메서드를 사용했습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst uploaded = [...uploadedFiles];\nfiles.some((file) => {\n    uploaded.push(file);\n})\n```\n\n반복문이 끝나면 상태 배열을 업데이트합니다. 비동기 작업이므로 상태 업데이트는 마지막에 수행됩니다.\n\n```js\nsetUploadedFiles(uploaded);\n```\n\n## 파일이 이미 존재하는지 확인하기\n\n<div class=\"content-ad\"></div>\n\n동일한 파일을 여러 번 업로드하는 것을 원치 않는다면, 파일을 업로드된 목록에 추가할 때 다음 조건을 추가하세요.\n\n```js\nif (uploaded.findIndex((f) => f.name === file.name) === -1) {\n    uploaded.push(file);\n}\n```\n\nfindIndex 메서드는 현재 추가되고 있는 파일과 같은 이름을 가진 파일을 uploaded 내에서 찾습니다.\n\n## 업로드할 파일 수 제한\n\n<div class=\"content-ad\"></div>\n\n가끔 사용자가 업로드할 수있는 파일 수를 제한해야하는 상황이 발생할 수 있습니다. 선택된 파일의 수를 확인하는 것은 업로드 이벤트 중이나 양식을 제출하는 동안에도 수행할 수 있습니다. 저는 업로드 이벤트 중에이 작업을 수행하는 방법을 안내해 드리겠습니다.\n\n먼저, 사용자가 파일 업로드 제한에 도달했는지를 나타내는 상태 변수를 만듭니다. 기본값은 false입니다.\n\n```js\nconst [fileLimit, setFileLimit] = useState(false);\n```\n\n이제 handleUploadFiles 함수 내에서 로컬 변수 limitExceeded를 만들고 false로 초기화하세요.\n\n<div class=\"content-ad\"></div>\n\n파일을 업로드된 배열에 푸시하는 동안 다음 조건을 추가하세요.\n\n```js\nif (uploaded.length === MAX_COUNT) setFileLimit(true);\nif (uploaded.length > MAX_COUNT) {\n    --- 제한이 초과된 경우 ---\n}\n```\n\n현재 최대 제한은 MAX_COUNT = 5 입니다. 업로드된 파일의 수가 이 제한에 도달하면 상태를 업데이트해야 합니다. 그러나 여기에 그치지 말고, 사용자가 언제든지 여러 파일을 업로드할 수 있기 때문에 제한 초과 조건도 추가해야 합니다.\n\n이미 업로드된 파일 수와 현재 선택한 파일 수가 제한을 초과하는 상황을 위한 논리는 다음과 같습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nsetFileLimit(false);\nlimitExceeded = true;\nreturn true;\n```\n\n제한을 초과했을 경우, 사용자가 단일 파일을 추가하지 못하도록 합니다. 제한이 이전 상태로 돌아간 것이므로 fileLimit를 false로 설정합니다.\n\nforEach 대신에 some을 사용한 이유는 선택한 파일의 수가 제한을 초과할 경우 사용자가 파일을 업로드하는 것을 허용하고 싶지 않기 때문입니다. 이를 위해 반복문을 이 시점에서 중단해야 했습니다. forEach 루프를 중단하는 것은 거의 불가능하기 때문에 some 메서드를 사용했습니다.\n\nsome() 메서드는 배열의 요소 중 일정 조건을 충족하는지 확인하는 데 사용됩니다. 만약 요소가 조건을 충족하면 true를 반환하고 루프를 중단합니다. 따라서 루프를 중단하기 위해 함수에서 true를 반환했습니다.\n\n<div class=\"content-ad\"></div>\n\n만약 파일을 과도하게 업로드하는 것을 방지하기 위한 다른 로직을 떠올릴 수 있다면 아래 댓글로 남겨주세요.\n\n업로드된 파일 상태를 업데이트할 때, 한도를 초과했는지 확인하세요.\n\n```js\nif (!limitExceeded) setUploadedFiles(uploaded)\n```\n\n한도에 도달하면 버튼을 비활성화하려면 입력 필드에 disabled = fileLimit를 설정하고 버튼에 disabled 클래스를 추가하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<a className={`btn btn-primary ${!fileLimit ? '' : 'disabled' } `}>\n    업로드 파일\n</a>\n```\n\n# 업로드된 파일 표시\n\n이 부분은 매우 간단합니다. 업로드 버튼 이후에 파일 이름을 표시하기만 하면 됩니다.\n\n```jsx\n<div className=\"uploaded-files-list\">\n    {uploadedFiles.map(file => (\n        <div>\n            {file.name}\n        </div>\n    ))} \n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n파일을 아이콘과 스타일된 텍스트를 사용하여 다양한 방식으로 표시할 수 있어요. 지금은 파일 이름 목록만 간단히 표시했답니다. 또한 div 요소에 key prop을 추가하지 않았어요. React가 경고를 표시하니, 요소 목록을 렌더링할 때 꼭 추가해 주세요.\n\n# 마무리\n\n마침내, 이렇게 생긴 App 컴포넌트가 되었어요.\n\n![App Component](/assets/img/2024-05-02-HowtoimplementmultiplefileuploadsinReact_3.png)\n\n<div class=\"content-ad\"></div>\n\n이 프로젝트는 GitHub에서 확인하실 수 있습니다. 위 구현은 해당 프로젝트의 수정본입니다. 꼭 확인해보세요.\n\n# 결론\n\n양식을 구현하는 동안 웹사이트에서 사용자로부터 파일을 받아야 할 수도 있습니다. 때로는 기본 기능만으로 요구 사항을 충족시키기 어려울 수 있습니다. 그래서 귀하만의 기능을 추가해야 합니다.\n\n이 글에서 React에서 이를 구현하는 방법을 안내했습니다. 구현의 각 단계를 설명했습니다. 이것이 귀하의 미래 프로젝트에 도움이 되기를 바라겠습니다. 물론 이 기능을 구현하는 다양한 방법이 있을 수 있습니다. 이 구현에 개선할 점이 있다면 아래에 의견을 남겨주십시오.\n\n<div class=\"content-ad\"></div>\n\n만약 내용을 이해하지 못하거나 설명이 마음에 들지 않는다면 의견을 남겨주세요. 새로운 아이디어는 언제나 환영합니다! 이 게시물이 마음에 들었다면 박수 👏👏를 보내주세요. 매주 업데이트되는 컨텐츠를 위해 구독하고 팔로우해주세요. 논의할 주제가 있다면 트위터에서 연락해주세요. 그럼, 안녕히 계세요!!","ogImage":{"url":"/assets/img/2024-05-02-HowtoimplementmultiplefileuploadsinReact_0.png"},"coverImage":"/assets/img/2024-05-02-HowtoimplementmultiplefileuploadsinReact_0.png","tag":["Tech"],"readingTime":7},{"title":"CSS로 마우스를 따라다니는 원 만들기 방법","description":"","date":"2024-05-02 00:22","slug":"2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS","content":"\n\n# 간략한 내용\n\n여기 코드만 보고 싶다면 제 Codepen을 확인하세요!\n\n# 배경\n\n저는 개인 프로젝트를 진행하던 중 특정 요소 위에 커서가 있을 때 따라다니는 작은 원을 가지고 싶었습니다. 이것을 어떻게 구현했는지에 대한 설명입니다.\n\n<div class=\"content-ad\"></div>\n\n## 내 요소들\n\n여기 예제의 HTML은 꽤 간단해요.\n\n```js\n<div class=\"container\">\n  <div class=\"hover-box\"></div>\n</div>\n```\n\n요소는 단 두 개뿐이에요. 하나는 마우스를 올렸을 때 커서 추적기가 나타나길 원하는 요소이고, 다른 하나는 호버 박스를 가운데 정렬하기 위한 컨테이너 요소예요.\n\n<div class=\"content-ad\"></div>\n\n## 일부 스타일링\n\n여기에 상자와 컨테이너에 적용한 스타일이 있어. 나는 상자를 화면 중앙에 배치하고 싶었어.\n\n```js\n:root {\n  background-color: black;\n}\n\n.container {\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.hover-box {\n  background-color: #32A1F0;\n  --hover-box-height: 200px;\n  height: var(--hover-box-height);\n  width: var(--hover-box-height);\n  border-radius: 1em;\n}\n```\n\n# 시작해볼까요?\n\n<div class=\"content-ad\"></div>\n\n나는 호버 시 나타나는 가상 요소를 사용하기로 결정했어요. translate를 사용하여 가상 요소를 이동시키고 CSS 변수를 사용하여 커서 위치를 추적했어요.\n\n```js\n.hover-box:hover::before {\n  --cursor-tracker-diameter: 24px;\n  background-color: red;\n  opacity: 0.5;\n  height: var(--cursor-tracker-diameter);\n  width: var(--cursor-tracker-diameter);\n  border-radius: var(--cursor-tracker-diameter);\n  content: \"\";\n  translate: var(--x) var(--y);\n}\n```\n\n## 커서 위치 추적하기\n\n“mousemove” 이벤트를 사용하여 호버 박스 내에서 마우스가 움직일 때를 추적할 수 있어요. x와 y 오프셋을 얻어와 CSS 변수로 설정했어요.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst hoverBox = document.querySelector('.hover-box');\n\nhoverBox.addEventListener('mousemove', (event) => {\n  const x = event.offsetX;\n  const y = event.offsetY;\n  hoverBox.style.setProperty('--x', `${x}px`);\n  hoverBox.style.setProperty('--y', `${y}px`);\n})\n```\n\n## 어디 있죠?\n\n이 시점에서는 커서 추적기가 전혀 나타나지 않았습니다. 몇 가지 시도를 한 후에 가상 요소에 display: flex를 추가하면 나타난다는 것을 발견했습니다. 정확히 왜 이것이 작동하는지는 모르지만, ::before 가상 요소의 기본 표시가 인라인인 것과 관련이 있을 것으로 생각됩니다.\n\n```js\n.hover-box:hover::before {\n  --cursor-tracker-diameter: 24px;\n  background-color: red;\n  opacity: 0.5;\n  height: var(--cursor-tracker-diameter);\n  width: var(--cursor-tracker-diameter);\n  border-radius: var(--cursor-tracker-diameter);\n  content: \"\";\n  translate: var(--x) var(--y);\n  display: block;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 원을 조정하기\n\n<img src=\"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_0.png\" />\n\n그겢은 제가 원하는 것과 조금 다릅니다. X와 Y를 어떤 값으로 설정해야 마우스 커서가 원의 가운데에 위치하게 할 수 있는지 조정해 봅시다.\n\n```js\nhoverBox.addEventListener('mousemove', (event) => {\n  const x = event.offsetX - 8;\n  const y = event.offsetY - 7;\n  hoverBox.style.setProperty('--x', `${x}px`);\n  hoverBox.style.setProperty('--y', `${y}px`);\n})\n```\n\n<div class=\"content-ad\"></div>\n\n그것을 좀 더 다뤄 본 후에, 왼쪽으로 8 픽셀 올려서 7 픽셀 올리는 것이 가장 나에게 적합하다고 판단했어.\n\n<img src=\"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_1.png\" />\n\n## 계속해서 커서를 따라옵니다!\n\n가끔 커서 추적기가 요소 바깥에서 커서를 추적하는 것을 알게 되었어.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_2.png\" />\n\n박스 밖에 나오지 않도록 하기 위해 호버 박스에 overflow: hidden을 추가했어요.\n\n```js\n.hover-box {\n  background-color: #32A1F0;\n  --hover-box-height: 200px;\n  height: var(--hover-box-height);\n  width: var(--hover-box-height);\n  border-radius: 1em;\n  overflow: hidden;\n}\n```\n\n# 이제 완료되었어요!\n\n<div class=\"content-ad\"></div>\n\n그 정도면 괜찮을 거에요! 도움이 되었으면 좋겣네요.","ogImage":{"url":"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_0.png"},"coverImage":"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_0.png","tag":["Tech"],"readingTime":4},{"title":"제트팩 컴포즈에서 WebView 사용하기","description":"","date":"2024-05-02 00:21","slug":"2024-05-02-UsingWebViewinJetpackCompose","content":"\n\n<img src=\"/assets/img/2024-05-02-UsingWebViewinJetpackCompose_0.png\" />\n\n웹뷰는 앱 개발에서 자주 사용하는 구성 요소로, 동적 HTML 페이지를 표시하는 데 사용할 수 있습니다. Android View 시스템에서는 XML에 직접 WebView 구성 요소를 추가하여 사용할 수 있지만, Jetpack Compose에는 직접 사용할 수 있는 WebView 구성 요소가 없습니다. 그렇다면 Compose에서 WebView를 어떻게 사용해야 할까요?\n\n이 기사에서는 Jetpack Compose에서 WebView를 사용하는 방법과 기본 기능을 활용하는 방법에 대해 소개하겠습니다.\n\n# 권한\n\n<div class=\"content-ad\"></div>\n\n먼저 Android Manifest에 권한을 추가해야 합니다:\n\n```js\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <application\n        android:usesCleartextTraffic=\"true\">\n    </application>\n\n</manifest>\n```\n\n# AndroidView\n\n그런 다음 웹 페이지를 표시하는 Composable 컴포넌트를 만들어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n@Composable\nfun WebView(){\n  \n    // URL을 포함한 문자열 선언\n    val mUrl = \"https://www.google.com\"\n  \n    // AndroidView 내에 WebView를 추가\n    // 전체 화면 레이아웃\n    AndroidView(factory = {\n        WebView(it).apply {\n            layoutParams = ViewGroup.LayoutParams(\n                ViewGroup.LayoutParams.MATCH_PARENT,\n                ViewGroup.LayoutParams.MATCH_PARENT\n            )\n        }\n    }, update = {\n        it.loadUrl(mUrl)\n    })\n}\n```\n\n우리는 AndroidView를 사용하여 WebView 구성 요소를 래핑했습니다. factory 메서드에서는 AndroidX WebView를 디스플레이 구성 요소로 생성하고 그의 layoutParams를 설정합니다. 마지막으로 update 메서드에서 loadUrl 메서드를 사용하여 URL을 로드합니다.\n\n# WebViewClient\n\n특정 URL을 가로채야 할 때는 어떻게 할까요? View와 유사하게 WebViewClient를 사용자 정의하고 shouldOverrideUrlLoading 메서드를 재정의하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n```java\n@Composable\nfun WebView(){\n  \n    // URL을 포함하는 문자열 선언\n    val mUrl = \"https://www.google.com\"\n  \n    // 전체 화면 레이아웃의 AndroidView 내부에 WebView 추가\n    AndroidView(factory = {\n        WebView(it).apply {\n            this.layoutParams = ViewGroup.LayoutParams(\n                ViewGroup.LayoutParams.MATCH_PARENT,\n                ViewGroup.LayoutParams.MATCH_PARENT\n            )\n            this.webViewClient = CustomWebViewClient()\n        }\n    }, update = {\n        it.loadUrl(mUrl)\n    })\n}\n\nclass CustomWebViewClient: WebViewClient(){\n    override fun shouldOverrideUrlLoading(view: WebView?, url: String?): Boolean {\n        if(url != null && url.startsWith(\"https://google.com\")){\n            return true\n        }\n        return false\n    }\n}\n```\n\n# WebChromeClient\n\n더불어, 특정 웹 이벤트를 수신하기 위해 WebChromeClient를 사용자 정의할 수 있습니다:\n\n```java\n@Composable\nfun WebView(){\n  \n    // URL을 포함하는 문자열 선언\n    val mUrl = \"https://www.google.com\"\n  \n    // 전체 화면 레이아웃의 AndroidView 내부에 WebView 추가\n    AndroidView(factory = {\n        WebView(it).apply {\n            this.layoutParams = ViewGroup.LayoutParams(\n                ViewGroup.LayoutParams.MATCH_PARENT,\n                ViewGroup.LayoutParams.MATCH_PARENT\n            )\n            this.webChromeClient = CustomWebChromeClient()\n        }\n    }, update = {\n        it.loadUrl(mUrl)\n    })\n}\n\nclass CustomWebChromeClient : WebChromeClient() {\n    override fun onCloseWindow(window: WebView?) {}\n    \n    override fun onConsoleMessage(consoleMessage: ConsoleMessage?): Boolean {}\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 라이브러리\n\n그러나 이 방법은 상태가없는 단일 로드에만 적용됩니다. 만약 우리가 웹페이지의 제목, 로딩 상태 및 현재로드된 URL을 얻어야한다면 어떻게 될까요?\n\n비슷하게, 웹페이지에서 새 링크의 앞뒤로 넘기기 및 로딩을 제어해야하는 경우도 있습니다. 더 복잡한 것은 HTML 코드의 로드를 지원해야하는 경우입니다.\n\n다행히도 이미 이러한 기능을 제공하는 라이브러리가 있었습니다. Compose 내에서 직접 사용할 수있는 WebView 구성 요소를 제공하여 개발자가 WebView의 캡슐화 논리를 직접 작성할 필요가 없게합니다. 또한 웹 페이지 속성을 가져 오고 로딩 상태를 수신하는 기능과 같은 기능을 제공하여, 모두 사용 가능합니다.\n\n<div class=\"content-ad\"></div>\n\n기본적인 사용법은 아래와 같이 매우 간단합니다. URL을 로드하고 표시하는 데 사용할 수 있습니다.\n\n```js\nval state = rememberWebViewState(\"https://example.com\")\n\nWebView(\n    state\n)\n```\n\n자세한 사용 방법은 다음 기사를 참조해 주세요:\n\n# 이어서 읽을 내용","ogImage":{"url":"/assets/img/2024-05-02-UsingWebViewinJetpackCompose_0.png"},"coverImage":"/assets/img/2024-05-02-UsingWebViewinJetpackCompose_0.png","tag":["Tech"],"readingTime":4}],"page":"2","totalPageCount":10,"totalPageGroupCount":1,"lastPageGroup":10,"currentPageGroup":0},"__N_SSG":true}