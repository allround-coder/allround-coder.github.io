{"pageProps":{"post":{"title":"React로 카운트다운 타이머 만드는 방법","description":"","date":"2024-06-22 15:35","slug":"2024-06-22-BuildingaCountdownTimerinReact","content":"\n\n\n![Countdown Timer](/assets/img/2024-06-22-BuildingaCountdownTimerinReact_0.png)\n\nReact 애플리케이션에 동적 카운트다운 타이머를 추가해보고 싶었나요? 생산성 앱을 만들고 있거나 라이브 이벤트를 진행하거나 웹사이트를 화려하게 꾸미고 싶은 경우, 카운트다운 타이머는 매력적이고 기능적인 추가물이 될 수 있습니다. 이 기사에서는 React.js를 사용하여 간단하면서도 강력한 1시간 카운트다운 타이머를 구축하는 방법에 대해 살펴보겠습니다.\n\n# 시작하기\n\n코드에 들어가기 전에, 우리가 달성하려는 목표를 명확히 해 봅시다. 우리의 목표는 실시간으로 업데이트되는 시각적으로 매력적인 카운트다운 타이머를 만드는 것입니다. 이 타이머는 1시간부터 0까지 카운트다운됩니다. 이를 달성하기 위해 우리는 인기 있는 React 라이브러리와 useState 및 useEffect 훅을 활용할 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 카운트다운 컴포넌트\n\n시작해봅시다. 카운트다운 타이머 컴포넌트를 만들어봅시다. 이 컴포넌트는 카운트다운 논리와 렌더링을 캡슐화할 것입니다.\n\n```js\nimport React, { useState, useEffect } from 'react';\n\nconst CountdownTimer = () => {\n  // 초기 시간 (1시간 단위)\n  const initialTime = 60 * 60;\n  const [timeRemaining, setTimeRemaining] = useState(initialTime);\n\n  useEffect(() => {\n    const timerInterval = setInterval(() => {\n      setTimeRemaining((prevTime) => {\n        if (prevTime === 0) {\n          clearInterval(timerInterval);\n          // 타이머가 0이 되면 수행할 작업\n          console.log('카운트다운 완료!');\n          return 0;\n        } else {\n          return prevTime - 1;\n        }\n      });\n    }, 1000);\n\n    // 컴포넌트가 언마운트될 때 인터벌 정리\n    return () => clearInterval(timerInterval);\n  }, []); // 빈 의존성 배열은 효과가 마운트 시에 한 번만 실행되도록 함\n\n  // 초를 시간, 분, 초로 변환\n  const hours = Math.floor(timeRemaining / 3600);\n  const minutes = Math.floor((timeRemaining % 3600) / 60);\n  const seconds = timeRemaining % 60;\n\n  return (\n    <div>\n      <p>카운트다운 타이머:</p>\n      <p>{`${hours}시간 ${minutes}분 ${seconds}초`}</p>\n    </div>\n  );\n};\n\nexport default CountdownTimer;\n```\n\n# 카운트다운타이머 컴포넌트 사용하기\n\n<div class=\"content-ad\"></div>\n\n```js\nimport React from 'react';\nimport CountdownTimer from './CountdownTimer';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>React Countdown Timer</h1>\n      <CountdownTimer />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n# 결론\n\nReact와 해당 훅을 이용하여, 유연하고 매력적인 카운트다운 타이머를 제작했습니다. 이를 프로젝트에 손쉽게 통합할 수 있습니다. 스타일링을 맞춤화하거나 음향 효과를 추가하거나, 애플리케이션의 요구 사항에 기반한 추가 기능을 통합하는 자유를 누려보세요.\n\n자, 이제 다음 React 프로젝트에서 시간을 효율적으로 활용해 보세요. 즐거운 코딩되세요!\n","ogImage":{"url":"/assets/img/2024-06-22-BuildingaCountdownTimerinReact_0.png"},"coverImage":"/assets/img/2024-06-22-BuildingaCountdownTimerinReact_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-22-BuildingaCountdownTimerinReact_0.png\" alt=\"Countdown Timer\"></p>\n<p>React 애플리케이션에 동적 카운트다운 타이머를 추가해보고 싶었나요? 생산성 앱을 만들고 있거나 라이브 이벤트를 진행하거나 웹사이트를 화려하게 꾸미고 싶은 경우, 카운트다운 타이머는 매력적이고 기능적인 추가물이 될 수 있습니다. 이 기사에서는 React.js를 사용하여 간단하면서도 강력한 1시간 카운트다운 타이머를 구축하는 방법에 대해 살펴보겠습니다.</p>\n<h1>시작하기</h1>\n<p>코드에 들어가기 전에, 우리가 달성하려는 목표를 명확히 해 봅시다. 우리의 목표는 실시간으로 업데이트되는 시각적으로 매력적인 카운트다운 타이머를 만드는 것입니다. 이 타이머는 1시간부터 0까지 카운트다운됩니다. 이를 달성하기 위해 우리는 인기 있는 React 라이브러리와 useState 및 useEffect 훅을 활용할 것입니다.</p>\n<div class=\"content-ad\"></div>\n<h1>카운트다운 컴포넌트</h1>\n<p>시작해봅시다. 카운트다운 타이머 컴포넌트를 만들어봅시다. 이 컴포넌트는 카운트다운 논리와 렌더링을 캡슐화할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CountdownTimer</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-comment\">// 초기 시간 (1시간 단위)</span>\n  <span class=\"hljs-keyword\">const</span> initialTime = <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span>;\n  <span class=\"hljs-keyword\">const</span> [timeRemaining, setTimeRemaining] = <span class=\"hljs-title function_\">useState</span>(initialTime);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> timerInterval = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-title function_\">setTimeRemaining</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prevTime</span>) =></span> {\n        <span class=\"hljs-keyword\">if</span> (prevTime === <span class=\"hljs-number\">0</span>) {\n          <span class=\"hljs-built_in\">clearInterval</span>(timerInterval);\n          <span class=\"hljs-comment\">// 타이머가 0이 되면 수행할 작업</span>\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'카운트다운 완료!'</span>);\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">return</span> prevTime - <span class=\"hljs-number\">1</span>;\n        }\n      });\n    }, <span class=\"hljs-number\">1000</span>);\n\n    <span class=\"hljs-comment\">// 컴포넌트가 언마운트될 때 인터벌 정리</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">clearInterval</span>(timerInterval);\n  }, []); <span class=\"hljs-comment\">// 빈 의존성 배열은 효과가 마운트 시에 한 번만 실행되도록 함</span>\n\n  <span class=\"hljs-comment\">// 초를 시간, 분, 초로 변환</span>\n  <span class=\"hljs-keyword\">const</span> hours = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(timeRemaining / <span class=\"hljs-number\">3600</span>);\n  <span class=\"hljs-keyword\">const</span> minutes = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((timeRemaining % <span class=\"hljs-number\">3600</span>) / <span class=\"hljs-number\">60</span>);\n  <span class=\"hljs-keyword\">const</span> seconds = timeRemaining % <span class=\"hljs-number\">60</span>;\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>카운트다운 타이머:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{`${hours}시간 ${minutes}분 ${seconds}초`}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">CountdownTimer</span>;\n</code></pre>\n<h1>카운트다운타이머 컴포넌트 사용하기</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">CountdownTimer</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./CountdownTimer'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>React Countdown Timer<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CountdownTimer</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<h1>결론</h1>\n<p>React와 해당 훅을 이용하여, 유연하고 매력적인 카운트다운 타이머를 제작했습니다. 이를 프로젝트에 손쉽게 통합할 수 있습니다. 스타일링을 맞춤화하거나 음향 효과를 추가하거나, 애플리케이션의 요구 사항에 기반한 추가 기능을 통합하는 자유를 누려보세요.</p>\n<p>자, 이제 다음 React 프로젝트에서 시간을 효율적으로 활용해 보세요. 즐거운 코딩되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}