{"pageProps":{"post":{"title":"NestJS 데이터 검증 및 변환하는 방법","description":"","date":"2024-06-27 17:54","slug":"2024-06-27-NestJSDataValidationandTransformation","content":"\n\n이 보고서는 Node.js 서버 측 애플리케이션 개발을 위한 프레임워크 인 NestJS에서 데이터 유효성 검사 및 변환 기술을 요약합니다.\n\n## 데이터 유효성 검사의 중요성\n\n데이터 유효성을 검사함으로써 컨트롤러 계층에 도달하기 전에 미리 정의된 규칙을 준수하는지 확인할 수 있습니다. 이를 통해 다음과 같은 문제가 방지됩니다:\n\n- 잘못된 또는 해로운 데이터: SQL 인젝션 및 예기치 않은 데이터 유형과 같은 공격에 대비합니다.\n- 오류 및 예외: 유효하지 않은 데이터 형식으로 인한 오류를 방지합니다.\n\n<div class=\"content-ad\"></div>\n\n## 장점\n\n높은 데이터 무결성: 데이터가 정의된 규칙을 준수하는 것을 보장합니다.\n오류 감소: 잘못된 데이터로 인한 문제를 방지합니다.\n더 깔끔한 코드: 데이터 유효성 검증 논리를 컨트롤러로부터 분리합니다.\n\n![이미지](/assets/img/2024-06-27-NestJSDataValidationandTransformation_0.png)\n\n# 컨트롤러 이전에 DTO 및 입력 데이터의 유효성 검사를 확인하세요.\n\n<div class=\"content-ad\"></div>\n\nhttps://github.com/typestack/class-validator\n\n![image](/assets/img/2024-06-27-NestJSDataValidationandTransformation_1.png)\n\n# 패키지 설치\n\n```js\nyarn add class-validator class-transformer\n```\n\n<div class=\"content-ad\"></div>\n\n# 문서 유효성 검사\n\n# 개발자 모드에서 실행\n\n```js\nyarn start:dev\n```\n\n# 파이프 컨트롤러 추가\n\n<div class=\"content-ad\"></div>\n\nmain.ts\n\n```js\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ValidationPipe } from '@nestjs/common';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe());\n  await app.listen(3000);\n}\nbootstrap();\n```\n\nDTO 폴더\n\n```js\nimport { IsNotEmpty } from 'class-validator';\n\nexport class CreateTaskDto {\n  @IsNotEmpty()\n  title: string;\n\n  @IsNotEmpty()\n  description: string;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# ID가 존재하는지 확인하기\n\n서비스\n\n```js\n  getTaskById(id: string): Task {\n    const found = this.tasks.find((task) => task.id === id);\n    if (!found) {\n      throw new NotFoundException(`ID가 \"${id}\"인 Task를 찾을 수 없습니다`);\n    }\n    return found;\n  }\n```\n\n# 요소가 삭제된 경우 ID가 존재하는지 확인하기\n\n<div class=\"content-ad\"></div>\n\n```js\n  deleteTask(id: string): void {\n    const found = this.getTaskById(id);\n    this.tasks = this.tasks.filter((task) => task.id !== found.id);\n  }\n```\n\n## 요소가 업데이트될 때 ID가 존재하는지 확인\n\n```js\n  updateTaskStatus(id: string, status: TaskStatus): Task {\n    const task = this.getTaskById(id);\n    task.status = status;\n    return task;\n  }\n```\n\n## 상태 업데이트 확인하기\n\n\n<div class=\"content-ad\"></div>\n\ndto 폴더에 update-task-status.dto를 추가해주세요.\n\n```js\nimport { IsEnum } from 'class-validator';\nimport { TaskStatus } from '../tasks.model';\n\nexport class UpdateTaskStatus {\n  @IsEnum(TaskStatus)\n  status: TaskStatus;\n}\n```\n\n컨트롤러\n\n```js\n@Patch('/:id/status')\nupdateTaskStatus(\n  @Param('id') id: string,\n  @Body() updateTaskStatusDto: UpdateTaskStatusDto,\n): Task {\n  const { status } = updateTaskStatusDto;\n  return this.tasksService.updateTaskStatus(id, status);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 검색을 위한 유효성 검사\n\ndto\n\n```js\nimport { IsEnum, IsOptional, IsString } from 'class-validator';\nimport { TaskStatus } from '../tasks.model';\n\nexport class GetTasksFilterDto {\n  @IsOptional()\n  @IsEnum(TaskStatus)\n  status?: TaskStatus;\n\n  @IsOptional()\n  @IsString()\n  search?: string;\n}\n```","ogImage":{"url":"/assets/img/2024-06-27-NestJSDataValidationandTransformation_0.png"},"coverImage":"/assets/img/2024-06-27-NestJSDataValidationandTransformation_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 보고서는 Node.js 서버 측 애플리케이션 개발을 위한 프레임워크 인 NestJS에서 데이터 유효성 검사 및 변환 기술을 요약합니다.</p>\n<h2>데이터 유효성 검사의 중요성</h2>\n<p>데이터 유효성을 검사함으로써 컨트롤러 계층에 도달하기 전에 미리 정의된 규칙을 준수하는지 확인할 수 있습니다. 이를 통해 다음과 같은 문제가 방지됩니다:</p>\n<ul>\n<li>잘못된 또는 해로운 데이터: SQL 인젝션 및 예기치 않은 데이터 유형과 같은 공격에 대비합니다.</li>\n<li>오류 및 예외: 유효하지 않은 데이터 형식으로 인한 오류를 방지합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h2>장점</h2>\n<p>높은 데이터 무결성: 데이터가 정의된 규칙을 준수하는 것을 보장합니다.\n오류 감소: 잘못된 데이터로 인한 문제를 방지합니다.\n더 깔끔한 코드: 데이터 유효성 검증 논리를 컨트롤러로부터 분리합니다.</p>\n<p><img src=\"/assets/img/2024-06-27-NestJSDataValidationandTransformation_0.png\" alt=\"이미지\"></p>\n<h1>컨트롤러 이전에 DTO 및 입력 데이터의 유효성 검사를 확인하세요.</h1>\n<div class=\"content-ad\"></div>\n<p><a href=\"https://github.com/typestack/class-validator\" rel=\"nofollow\" target=\"_blank\">https://github.com/typestack/class-validator</a></p>\n<p><img src=\"/assets/img/2024-06-27-NestJSDataValidationandTransformation_1.png\" alt=\"image\"></p>\n<h1>패키지 설치</h1>\n<pre><code class=\"hljs language-js\">yarn add <span class=\"hljs-keyword\">class</span>-validator <span class=\"hljs-keyword\">class</span>-transformer\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>문서 유효성 검사</h1>\n<h1>개발자 모드에서 실행</h1>\n<pre><code class=\"hljs language-js\">yarn <span class=\"hljs-attr\">start</span>:dev\n</code></pre>\n<h1>파이프 컨트롤러 추가</h1>\n<div class=\"content-ad\"></div>\n<p>main.ts</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NestFactory</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ValidationPipe</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bootstrap</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">AppModule</span>);\n  app.<span class=\"hljs-title function_\">useGlobalPipes</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ValidationPipe</span>());\n  <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);\n}\n<span class=\"hljs-title function_\">bootstrap</span>();\n</code></pre>\n<p>DTO 폴더</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IsNotEmpty</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'class-validator'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreateTaskDto</span> {\n  @<span class=\"hljs-title class_\">IsNotEmpty</span>()\n  <span class=\"hljs-attr\">title</span>: string;\n\n  @<span class=\"hljs-title class_\">IsNotEmpty</span>()\n  <span class=\"hljs-attr\">description</span>: string;\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>ID가 존재하는지 확인하기</h1>\n<p>서비스</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-title function_\">getTaskById</span>(<span class=\"hljs-attr\">id</span>: string): <span class=\"hljs-title class_\">Task</span> {\n    <span class=\"hljs-keyword\">const</span> found = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tasks</span>.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">task</span>) =></span> task.<span class=\"hljs-property\">id</span> === id);\n    <span class=\"hljs-keyword\">if</span> (!found) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NotFoundException</span>(<span class=\"hljs-string\">`ID가 \"<span class=\"hljs-subst\">${id}</span>\"인 Task를 찾을 수 없습니다`</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> found;\n  }\n</code></pre>\n<h1>요소가 삭제된 경우 ID가 존재하는지 확인하기</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-title function_\">deleteTask</span>(<span class=\"hljs-attr\">id</span>: string): <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-keyword\">const</span> found = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getTaskById</span>(id);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tasks</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tasks</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">task</span>) =></span> task.<span class=\"hljs-property\">id</span> !== found.<span class=\"hljs-property\">id</span>);\n  }\n</code></pre>\n<h2>요소가 업데이트될 때 ID가 존재하는지 확인</h2>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-title function_\">updateTaskStatus</span>(<span class=\"hljs-attr\">id</span>: string, <span class=\"hljs-attr\">status</span>: <span class=\"hljs-title class_\">TaskStatus</span>): <span class=\"hljs-title class_\">Task</span> {\n    <span class=\"hljs-keyword\">const</span> task = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getTaskById</span>(id);\n    task.<span class=\"hljs-property\">status</span> = status;\n    <span class=\"hljs-keyword\">return</span> task;\n  }\n</code></pre>\n<h2>상태 업데이트 확인하기</h2>\n<div class=\"content-ad\"></div>\n<p>dto 폴더에 update-task-status.dto를 추가해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IsEnum</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'class-validator'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TaskStatus</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../tasks.model'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UpdateTaskStatus</span> {\n  @<span class=\"hljs-title class_\">IsEnum</span>(<span class=\"hljs-title class_\">TaskStatus</span>)\n  <span class=\"hljs-attr\">status</span>: <span class=\"hljs-title class_\">TaskStatus</span>;\n}\n</code></pre>\n<p>컨트롤러</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Patch</span>(<span class=\"hljs-string\">'/:id/status'</span>)\n<span class=\"hljs-title function_\">updateTaskStatus</span>(\n  @<span class=\"hljs-title class_\">Param</span>(<span class=\"hljs-string\">'id'</span>) <span class=\"hljs-attr\">id</span>: string,\n  @<span class=\"hljs-title class_\">Body</span>() <span class=\"hljs-attr\">updateTaskStatusDto</span>: <span class=\"hljs-title class_\">UpdateTaskStatusDto</span>,\n): <span class=\"hljs-title class_\">Task</span> {\n  <span class=\"hljs-keyword\">const</span> { status } = updateTaskStatusDto;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tasksService</span>.<span class=\"hljs-title function_\">updateTaskStatus</span>(id, status);\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>검색을 위한 유효성 검사</h1>\n<p>dto</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IsEnum</span>, <span class=\"hljs-title class_\">IsOptional</span>, <span class=\"hljs-title class_\">IsString</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'class-validator'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TaskStatus</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../tasks.model'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GetTasksFilterDto</span> {\n  @<span class=\"hljs-title class_\">IsOptional</span>()\n  @<span class=\"hljs-title class_\">IsEnum</span>(<span class=\"hljs-title class_\">TaskStatus</span>)\n  status?: <span class=\"hljs-title class_\">TaskStatus</span>;\n\n  @<span class=\"hljs-title class_\">IsOptional</span>()\n  @<span class=\"hljs-title class_\">IsString</span>()\n  search?: string;\n}\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}