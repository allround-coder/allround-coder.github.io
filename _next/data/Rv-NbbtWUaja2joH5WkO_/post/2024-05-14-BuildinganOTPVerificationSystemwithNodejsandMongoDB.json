{"pageProps":{"post":{"title":"Nodejs와 MongoDB를 사용하여 OTP 인증 시스템 구축하기","description":"","date":"2024-05-14 13:33","slug":"2024-05-14-BuildinganOTPVerificationSystemwithNodejsandMongoDB","content":"\n\n요즘의 디지털 세계에서는 보안이 매우 중요합니다. 특히 사용자 인증 프로세스에서 보안을 강화하는 일반적인 방법 중 하나는 일회용 비밀번호(OTP) 확인입니다. OTP는 사용자가 자격 증명과 함께 입력해야 하는 고유한 코드를 생성하여 보안의 추가적인 계층을 더합니다. 이 튜토리얼에서는 Node.js와 MongoDB를 사용하여 OTP 확인 시스템을 구축하는 과정을 단계별로 안내하겠습니다.\n\n![이미지](/assets/img/2024-05-14-BuildinganOTPVerificationSystemwithNodejsandMongoDB_0.png)\n\n# 저와 소통하기:\n\nLinkedin: [링크](https://www.linkedin.com/in/suneel-kumar-52164625a/)\n\n\n\n사전 준비 사항: 구현에 들어가기 전에 다음을 설치했는지 확인하세요:\n\n- Node.js: 시스템에 Node.js가 설치되어 있는지 확인하세요. 공식 Node.js 웹사이트에서 다운로드할 수 있습니다.\n- MongoDB: 사용자 데이터 및 OTP 정보를 저장할 MongoDB를 설치하세요. 공식 MongoDB 웹사이트에서 다운로드할 수 있습니다.\n- 텍스트 편집기: 원하는 텍스트 편집기나 IDE를 선택하세요. VS Code, Sublime Text 또는 Atom이 인기 있는 선택지입니다.\n\n프로젝트 설정: 프로젝트 디렉토리를 설정하고 필요한 종속성을 설치하는 것으로 시작해봅시다. 터미널을 열고 다음 단계를 따르세요:\n\n- 프로젝트용 새 디렉토리를 만드세요:\n\n\n\n```js\nmkdir otp-verification-system\ncd otp-verification-system\n```\n\n새로운 Node.js 프로젝트를 초기화하세요:\n\n```js\nnpm init -y\n```\n\n필요한 종속성을 설치하세요:\n\n\n\n```js\nnpm install express mongoose twilio dotenv body-parser\n```\n\n- express: 웹 서버를 만들기 위해 사용됩니다.\n- mongoose: MongoDB와 상호 작용하기 위해 사용됩니다.\n- twilio: SMS를 통해 OTP를 전송하는 데 사용됩니다.\n- dotenv: 환경 변수를 관리하기 위해 사용됩니다.\n- body-parser: 들어오는 요청 본문을 구문 분석하기 위한 미들웨어입니다.\n\n이제 프로젝트가 설정되었으므로 OTP 인증 시스템을 구축할 차례입니다.\n\nMongoDB 설정: 먼저 MongoDB 데이터베이스를 설정해보겠습니다. 프로젝트 디렉토리에 db.js라는 파일을 생성하고 다음 코드를 추가하세요:\n\n\n\n\n```js\nconst mongoose = require('mongoose');\n\nfunction connect() {\n  return new Promise((resolve, reject) => {\n    mongoose.connect('mongodb://localhost/otp_verification', {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n\n    const db = mongoose.connection;\n\n    db.on('error', error => {\n      console.error('MongoDB 연결 오류:', error);\n      reject(error);\n    });\n\n    db.once('open', () => {\n      console.log('MongoDB에 연결되었습니다');\n      resolve();\n    });\n  });\n}\n\nmodule.exports = { connect };\n```\n\n이 코드는 로컬 MongoDB 인스턴스에 연결하고 otp_verification이라는 이름의 데이터베이스를 생성합니다.\n\n사용자 모델 생성: 이제 사용자 정보를 저장할 사용자 모델을 만들어 봅시다. models/User.js 파일을 생성하고 다음 코드를 추가하세요:\n\n```js\nconst mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  username: String,\n  phone: String,\n  otp: String,\n  otpExpiration: Date,\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n```\n\n\n\n이 스키마는 MongoDB의 사용자 문서 구조를 정의합니다. 여기에는 사용자 이름, 전화번호, OTP 및 OTP 만료 시간 필드가 포함됩니다.\n\nOTP 생성 및 전송: 이제 SMS를 통해 OTP를 생성하고 전송하는 로직을 만들어 봅시다. 이를 위해 Twilio API를 사용하겠습니다. utils/otp.js라는 파일을 만들고 다음 코드를 추가하세요:\n\n```js\nconst twilio = require('twilio');\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nconst accountSid = process.env.TWILIO_ACCOUNT_SID;\nconst authToken = process.env.TWILIO_AUTH_TOKEN;\nconst client = new twilio(accountSid, authToken);\n\nasync function sendOTP(phone, otp) {\n  try {\n    const message = await client.messages.create({\n      body: `Your OTP is: ${otp}`,\n      from: process.env.TWILIO_PHONE_NUMBER,\n      to: phone,\n    });\n    console.log(`OTP sent to ${phone}: ${message.sid}`);\n  } catch (error) {\n    console.error('Error sending OTP:', error);\n  }\n}\n\nmodule.exports = { sendOTP };\n```\n\nTwilio 계정을 설정하고 필요한 자격 증명(Account SID, Auth Token 및 전화번호)을 얻었는지 확인하십시오. 이 정보는 .env 파일에 저장되어야 합니다.\n\n\n\nOTP 인증 엔드포인트 구현하기: 이제 OTP 인증을 처리하는 엔드포인트를 만들어 봅시다. routes/auth.js라는 파일을 만들고 아래 코드를 추가해주세요:\n\n```js\nconst express = require('express');\nconst router = express.Router();\nconst User = require('../models/User');\nconst { sendOTP } = require('../utils/otp');\nconst {randomInt} = require('crypto')\n\nrouter.post('/sendotp', async (req, res) => {\n  const { phone } = req.body;\n\n  // 6자리 OTP 생성\n  //const otp = Math.floor(100000 + Math.random() * 900000).toString();\n  const otp =  randomInt(100000, 999999);\n\n  try {\n    // OTP 및 만료 시간을 데이터베이스에 저장\n    const user = await User.findOneAndUpdate(\n      { phone },\n      { otp, otpExpiration: Date.now() + 600000 }, // OTP는 10분 후에 만료됨\n      { upsert: true, new: true }\n    );\n\n    // SMS로 OTP 전송\n    await sendOTP(phone, otp);\n\n    res.status(200).json({ success: true, message: 'OTP 전송 성공' });\n  } catch (error) {\n    console.error('OTP 전송 중 오류 발생:', error);\n    res.status(500).json({ success: false, message: 'OTP 전송 실패' });\n  }\n});\n\nrouter.post('/verifyotp', async (req, res) => {\n  const { phone, otp } = req.body;\n\n  try {\n    // 전화번호와 OTP로 사용자 찾기\n    const user = await User.findOne({ phone, otp });\n\n    if (!user || user.otpExpiration < Date.now()) {\n      return res.status(400).json({ success: false, message: '유효하지 않은 OTP' });\n    }\n\n    // 성공적으로 확인된 후 OTP 및 만료 시간 비우기\n    user.otp = undefined;\n    user.otpExpiration = undefined;\n    await user.save();\n\n    res.status(200).json({ success: true, message: 'OTP 확인 성공' });\n  } catch (error) {\n    console.error('OTP 확인 중 오류 발생:', error);\n    res.status(500).json({ success: false, message: 'OTP 확인 실패' });\n  }\n});\n\nmodule.exports = router;\n```\n\n이 코드는 /sendotp 엔드포인트로 OTP를 생성하고 전송하고, /verifyotp 엔드포인트로 사용자가 입력한 OTP를 확인합니다.\n\n서버 시작하기: 마지막으로 애플리케이션을 시작하기 위한 주 서버 파일을 생성해봅시다. server.js라는 파일을 만들고 아래 코드를 추가해주세요:\n\n\n\n```js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst { connect } = require('./db'); // db.js에서 connect 함수를 가져옴\nconst authRoutes = require('./routes/auth');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// 미들웨어\napp.use(bodyParser.json());\n\n// 라우트\napp.use('/auth', authRoutes);\n\n// 서버를 시작하기 전에 데이터베이스에 연결\nconnect()\n  .then(() => {\n    // 서버 시작\n    app.listen(PORT, () => {\n      console.log(`서버가 ${PORT} 포트에서 실행 중입니다.`);\n    });\n  })\n  .catch(error => {\n    console.error('데이터베이스 연결 중 오류 발생:', error);\n  });\n```\n\n이 코드는 Express 서버를 설정하고, 수신된 JSON 요청을 파싱하며, 인증을 위한 라우트를 정의합니다.\n\n결론: 축하합니다! Node.js와 MongoDB를 사용하여 OTP(일회용 비밀번호) 확인 시스템을 성공적으로 구축했습니다. SMS로 전송된 일회용 비밀번호를 통해 사용자의 신원을 확인함으로써 응용 프로그램에 추가적인 보안층을 추가했습니다. OTP 확인을 기반으로 한 이메일, 요청 속도 제한, 오류 처리 기능을 추가함으로써 이 시스템을 확장하실 수 있습니다.\n\n이 튜토리얼에서 다룬 내용:\n  \n\n\n\n- 사용자 데이터 저장을 위해 MongoDB 설정하기\n- Twilio를 사용하여 SMS를 통해 OTP 생성 및 전송\n- OTP 인증 엔드포인트 구현하기","ogImage":{"url":"/assets/img/2024-05-14-BuildinganOTPVerificationSystemwithNodejsandMongoDB_0.png"},"coverImage":"/assets/img/2024-05-14-BuildinganOTPVerificationSystemwithNodejsandMongoDB_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>요즘의 디지털 세계에서는 보안이 매우 중요합니다. 특히 사용자 인증 프로세스에서 보안을 강화하는 일반적인 방법 중 하나는 일회용 비밀번호(OTP) 확인입니다. OTP는 사용자가 자격 증명과 함께 입력해야 하는 고유한 코드를 생성하여 보안의 추가적인 계층을 더합니다. 이 튜토리얼에서는 Node.js와 MongoDB를 사용하여 OTP 확인 시스템을 구축하는 과정을 단계별로 안내하겠습니다.</p>\n<p><img src=\"/assets/img/2024-05-14-BuildinganOTPVerificationSystemwithNodejsandMongoDB_0.png\" alt=\"이미지\"></p>\n<h1>저와 소통하기:</h1>\n<p>Linkedin: <a href=\"https://www.linkedin.com/in/suneel-kumar-52164625a/\" rel=\"nofollow\" target=\"_blank\">링크</a></p>\n<p>사전 준비 사항: 구현에 들어가기 전에 다음을 설치했는지 확인하세요:</p>\n<ul>\n<li>Node.js: 시스템에 Node.js가 설치되어 있는지 확인하세요. 공식 Node.js 웹사이트에서 다운로드할 수 있습니다.</li>\n<li>MongoDB: 사용자 데이터 및 OTP 정보를 저장할 MongoDB를 설치하세요. 공식 MongoDB 웹사이트에서 다운로드할 수 있습니다.</li>\n<li>텍스트 편집기: 원하는 텍스트 편집기나 IDE를 선택하세요. VS Code, Sublime Text 또는 Atom이 인기 있는 선택지입니다.</li>\n</ul>\n<p>프로젝트 설정: 프로젝트 디렉토리를 설정하고 필요한 종속성을 설치하는 것으로 시작해봅시다. 터미널을 열고 다음 단계를 따르세요:</p>\n<ul>\n<li>프로젝트용 새 디렉토리를 만드세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">mkdir otp-verification-system\ncd otp-verification-system\n</code></pre>\n<p>새로운 Node.js 프로젝트를 초기화하세요:</p>\n<pre><code class=\"hljs language-js\">npm init -y\n</code></pre>\n<p>필요한 종속성을 설치하세요:</p>\n<pre><code class=\"hljs language-js\">npm install express mongoose twilio dotenv body-parser\n</code></pre>\n<ul>\n<li>express: 웹 서버를 만들기 위해 사용됩니다.</li>\n<li>mongoose: MongoDB와 상호 작용하기 위해 사용됩니다.</li>\n<li>twilio: SMS를 통해 OTP를 전송하는 데 사용됩니다.</li>\n<li>dotenv: 환경 변수를 관리하기 위해 사용됩니다.</li>\n<li>body-parser: 들어오는 요청 본문을 구문 분석하기 위한 미들웨어입니다.</li>\n</ul>\n<p>이제 프로젝트가 설정되었으므로 OTP 인증 시스템을 구축할 차례입니다.</p>\n<p>MongoDB 설정: 먼저 MongoDB 데이터베이스를 설정해보겠습니다. 프로젝트 디렉토리에 db.js라는 파일을 생성하고 다음 코드를 추가하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">connect</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n    mongoose.<span class=\"hljs-title function_\">connect</span>(<span class=\"hljs-string\">'mongodb://localhost/otp_verification'</span>, {\n      <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">useUnifiedTopology</span>: <span class=\"hljs-literal\">true</span>,\n    });\n\n    <span class=\"hljs-keyword\">const</span> db = mongoose.<span class=\"hljs-property\">connection</span>;\n\n    db.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'MongoDB 연결 오류:'</span>, error);\n      <span class=\"hljs-title function_\">reject</span>(error);\n    });\n\n    db.<span class=\"hljs-title function_\">once</span>(<span class=\"hljs-string\">'open'</span>, <span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'MongoDB에 연결되었습니다'</span>);\n      <span class=\"hljs-title function_\">resolve</span>();\n    });\n  });\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = { connect };\n</code></pre>\n<p>이 코드는 로컬 MongoDB 인스턴스에 연결하고 otp_verification이라는 이름의 데이터베이스를 생성합니다.</p>\n<p>사용자 모델 생성: 이제 사용자 정보를 저장할 사용자 모델을 만들어 봅시다. models/User.js 파일을 생성하고 다음 코드를 추가하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n\n<span class=\"hljs-keyword\">const</span> userSchema = <span class=\"hljs-keyword\">new</span> mongoose.<span class=\"hljs-title class_\">Schema</span>({\n  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-title class_\">String</span>,\n  <span class=\"hljs-attr\">phone</span>: <span class=\"hljs-title class_\">String</span>,\n  <span class=\"hljs-attr\">otp</span>: <span class=\"hljs-title class_\">String</span>,\n  <span class=\"hljs-attr\">otpExpiration</span>: <span class=\"hljs-title class_\">Date</span>,\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = mongoose.<span class=\"hljs-title function_\">model</span>(<span class=\"hljs-string\">'User'</span>, userSchema);\n</code></pre>\n<p>이 스키마는 MongoDB의 사용자 문서 구조를 정의합니다. 여기에는 사용자 이름, 전화번호, OTP 및 OTP 만료 시간 필드가 포함됩니다.</p>\n<p>OTP 생성 및 전송: 이제 SMS를 통해 OTP를 생성하고 전송하는 로직을 만들어 봅시다. 이를 위해 Twilio API를 사용하겠습니다. utils/otp.js라는 파일을 만들고 다음 코드를 추가하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> twilio = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'twilio'</span>);\n<span class=\"hljs-keyword\">const</span> dotenv = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dotenv'</span>);\n\ndotenv.<span class=\"hljs-title function_\">config</span>();\n\n<span class=\"hljs-keyword\">const</span> accountSid = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">TWILIO_ACCOUNT_SID</span>;\n<span class=\"hljs-keyword\">const</span> authToken = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">TWILIO_AUTH_TOKEN</span>;\n<span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">twilio</span>(accountSid, authToken);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendOTP</span>(<span class=\"hljs-params\">phone, otp</span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-keyword\">await</span> client.<span class=\"hljs-property\">messages</span>.<span class=\"hljs-title function_\">create</span>({\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-string\">`Your OTP is: <span class=\"hljs-subst\">${otp}</span>`</span>,\n      <span class=\"hljs-attr\">from</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">TWILIO_PHONE_NUMBER</span>,\n      <span class=\"hljs-attr\">to</span>: phone,\n    });\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`OTP sent to <span class=\"hljs-subst\">${phone}</span>: <span class=\"hljs-subst\">${message.sid}</span>`</span>);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'Error sending OTP:'</span>, error);\n  }\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = { sendOTP };\n</code></pre>\n<p>Twilio 계정을 설정하고 필요한 자격 증명(Account SID, Auth Token 및 전화번호)을 얻었는지 확인하십시오. 이 정보는 .env 파일에 저장되어야 합니다.</p>\n<p>OTP 인증 엔드포인트 구현하기: 이제 OTP 인증을 처리하는 엔드포인트를 만들어 봅시다. routes/auth.js라는 파일을 만들고 아래 코드를 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> router = express.<span class=\"hljs-title class_\">Router</span>();\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">User</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../models/User'</span>);\n<span class=\"hljs-keyword\">const</span> { sendOTP } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../utils/otp'</span>);\n<span class=\"hljs-keyword\">const</span> {randomInt} = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'crypto'</span>)\n\nrouter.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/sendotp'</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n  <span class=\"hljs-keyword\">const</span> { phone } = req.<span class=\"hljs-property\">body</span>;\n\n  <span class=\"hljs-comment\">// 6자리 OTP 생성</span>\n  <span class=\"hljs-comment\">//const otp = Math.floor(100000 + Math.random() * 900000).toString();</span>\n  <span class=\"hljs-keyword\">const</span> otp =  <span class=\"hljs-title function_\">randomInt</span>(<span class=\"hljs-number\">100000</span>, <span class=\"hljs-number\">999999</span>);\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// OTP 및 만료 시간을 데이터베이스에 저장</span>\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">User</span>.<span class=\"hljs-title function_\">findOneAndUpdate</span>(\n      { phone },\n      { otp, <span class=\"hljs-attr\">otpExpiration</span>: <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>() + <span class=\"hljs-number\">600000</span> }, <span class=\"hljs-comment\">// OTP는 10분 후에 만료됨</span>\n      { <span class=\"hljs-attr\">upsert</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">new</span>: <span class=\"hljs-literal\">true</span> }\n    );\n\n    <span class=\"hljs-comment\">// SMS로 OTP 전송</span>\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sendOTP</span>(phone, otp);\n\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'OTP 전송 성공'</span> });\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'OTP 전송 중 오류 발생:'</span>, error);\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">500</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'OTP 전송 실패'</span> });\n  }\n});\n\nrouter.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/verifyotp'</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n  <span class=\"hljs-keyword\">const</span> { phone, otp } = req.<span class=\"hljs-property\">body</span>;\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 전화번호와 OTP로 사용자 찾기</span>\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">User</span>.<span class=\"hljs-title function_\">findOne</span>({ phone, otp });\n\n    <span class=\"hljs-keyword\">if</span> (!user || user.<span class=\"hljs-property\">otpExpiration</span> &#x3C; <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>()) {\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'유효하지 않은 OTP'</span> });\n    }\n\n    <span class=\"hljs-comment\">// 성공적으로 확인된 후 OTP 및 만료 시간 비우기</span>\n    user.<span class=\"hljs-property\">otp</span> = <span class=\"hljs-literal\">undefined</span>;\n    user.<span class=\"hljs-property\">otpExpiration</span> = <span class=\"hljs-literal\">undefined</span>;\n    <span class=\"hljs-keyword\">await</span> user.<span class=\"hljs-title function_\">save</span>();\n\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'OTP 확인 성공'</span> });\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'OTP 확인 중 오류 발생:'</span>, error);\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">500</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'OTP 확인 실패'</span> });\n  }\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = router;\n</code></pre>\n<p>이 코드는 /sendotp 엔드포인트로 OTP를 생성하고 전송하고, /verifyotp 엔드포인트로 사용자가 입력한 OTP를 확인합니다.</p>\n<p>서버 시작하기: 마지막으로 애플리케이션을 시작하기 위한 주 서버 파일을 생성해봅시다. server.js라는 파일을 만들고 아래 코드를 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'body-parser'</span>);\n<span class=\"hljs-keyword\">const</span> { connect } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./db'</span>); <span class=\"hljs-comment\">// db.js에서 connect 함수를 가져옴</span>\n<span class=\"hljs-keyword\">const</span> authRoutes = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./routes/auth'</span>);\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PORT</span> = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">3000</span>;\n\n<span class=\"hljs-comment\">// 미들웨어</span>\napp.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">json</span>());\n\n<span class=\"hljs-comment\">// 라우트</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'/auth'</span>, authRoutes);\n\n<span class=\"hljs-comment\">// 서버를 시작하기 전에 데이터베이스에 연결</span>\n<span class=\"hljs-title function_\">connect</span>()\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// 서버 시작</span>\n    app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`서버가 <span class=\"hljs-subst\">${PORT}</span> 포트에서 실행 중입니다.`</span>);\n    });\n  })\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'데이터베이스 연결 중 오류 발생:'</span>, error);\n  });\n</code></pre>\n<p>이 코드는 Express 서버를 설정하고, 수신된 JSON 요청을 파싱하며, 인증을 위한 라우트를 정의합니다.</p>\n<p>결론: 축하합니다! Node.js와 MongoDB를 사용하여 OTP(일회용 비밀번호) 확인 시스템을 성공적으로 구축했습니다. SMS로 전송된 일회용 비밀번호를 통해 사용자의 신원을 확인함으로써 응용 프로그램에 추가적인 보안층을 추가했습니다. OTP 확인을 기반으로 한 이메일, 요청 속도 제한, 오류 처리 기능을 추가함으로써 이 시스템을 확장하실 수 있습니다.</p>\n<p>이 튜토리얼에서 다룬 내용:</p>\n<ul>\n<li>사용자 데이터 저장을 위해 MongoDB 설정하기</li>\n<li>Twilio를 사용하여 SMS를 통해 OTP 생성 및 전송</li>\n<li>OTP 인증 엔드포인트 구현하기</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}