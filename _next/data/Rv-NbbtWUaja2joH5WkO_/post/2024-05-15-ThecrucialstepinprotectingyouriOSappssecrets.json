{"pageProps":{"post":{"title":"당신의 iOS 앱의 비밀을 보호하는 중요한 단계","description":"","date":"2024-05-15 10:52","slug":"2024-05-15-ThecrucialstepinprotectingyouriOSappssecrets","content":"\n\n암호화와 적절한 솔루션 선택\n\n앱에 하드코딩된 문자열로 저장된 비밀 또는 암호화 키가 있나요? 또는 Info.plist와 같은 파일에 저장되어 있나요?\n\n그렇다면, 그것들은 매우 쉽게 발견될 수 있습니다.\n\n먼저, 우리가 방지하려는 것을 이해하기 위해 공격자가 어떻게 하드코딩된 문자열을 볼 수 있는지 살펴봅시다.\n\n\n\n# 해커가 하드코딩된 문자열을 어떻게 볼 수 있을까요?\n\n당신의 애플리케이션(예: iOS의 경우 IPA 파일)을 정적 분석 도구에 전달하면 그 문자열들이 이렇게 나타날 것입니다:\n\n![이미지](/assets/img/2024-05-15-ThecrucialstepinprotectingyouriOSappssecrets_0.png)\n\nInfo.plist 파일에 저장한다면 어떨까요?\n\n\n\n이 방법도 안전하지 않습니다. 파일은 정적 분석기를 통해 쉽게 볼 수 있습니다.\n\n![image](/assets/img/2024-05-15-ThecrucialstepinprotectingyouriOSappssecrets_1.png)\n\n## 그래서, 하드코딩된 문자열을 어떻게 보호할까요?\n\n이상적으로는 보안 정보(API 키, 엔드포인트, API 토큰 등 민감한 데이터)는 클라이언트 측에 저장되어서는 안 됩니다. 이는 피해야 할 패턴입니다.\n\n\n\n하지만 거의 모든 앱에는 일부 정보가 저장되어 있고, 당신이 이러한 상황에 처할 수도 있습니다. 이 경우에는 정보가 올바르게 보호되었는지 확인해야 합니다.\n\nAPI 키와 기타 비밀 정보를 간단히 암호화할 수 있을까요?\n\n좋은 시작입니다. 하지만 클라이언트에 암호화 키를 저장해야 하는 경우 어떻게 그것을 안전하게 보호할 수 있을까요?\n\n어떤 정보든 클라이언트에 두는 보안 계층은 100% 안전하지 않다는 것을 강조하고 싶습니다. 그러나 공격자가 이러한 정보를 획득하는 것을 매우 어렵게 만들 수는 있습니다.\n\n\n\n주기적으로 비밀을 업데이트하는 것은 역공학 공격을 무력화시킬 수 있습니다. 정기적인 업데이트로, 역공학자가 시간을 쏟아서 비밀을 얻으려고 노력한 모든 시간이 무익해질 수 있기 때문이죠.\n\n# 코드 난독화\n\n위에서 설명한 것처럼 일반적으로 정보를 업데이트하여 구조를 변경함으로써 역공학 공격을 무력화할 수 있습니다.\n\n난독화는 정보나 코드를 이해하기 어렵게 만드는 행위입니다. 이는 인간뿐만 아니라 컴퓨터도 이해하기 힘들게 만드는 것을 의미합니다.\n\n\n\n추가적인 보안층으로, hardcoded된 비밀을 암호화한 다음 암호화 키를 난독화 하는 것을 권장합니다. 이렇게 하면 모든 비밀을 난독화 해야 하는 대신 암호화 키만 난독화하면 되므로 알고리즘에 따라 발생할 수 있는 성능 오버헤드를 피할 수 있습니다.\n\niOS를 사용 중이라면 Apple의 CryptoKit을 사용하는 것을 추천하며, AES와 같은 강력한 산업 표준 알고리즘을 선택하는 것이 좋습니다.\n\n# 결과\n\n비밀 hardcoded된 문자열을 난독화한 후 정적 분석기가 그들을 직접적으로 사용할 수 없는 변형 형태로 캐치할 것입니다.\n\n\n\n<img src=\"/assets/img/2024-05-15-ThecrucialstepinprotectingyouriOSappssecrets_2.png\" />\n\n# 당신의 난독화 솔루션을 선택하기\n\n어떤 난독화 라이브러리를 선택해야 할까요?\n\n비록 당신이 선택한 어떤 난독화 알고리즘이라도 단순히 앱 내에 하드코딩된 보안 정보를 그대로 둘 것보다 낫다는 것은 사실이지만, 해독자에게 더 어렵게 만드는 솔루션도 있습니다.\n\n\n\n# 찾아야 할 난독화 기술\n\n비밀 정보를 안전하게 유지하기 위해 난독화 라이브러리를 찾고 있다면 다음의 기본 아이디어를 살펴보세요.\n\n1. 데이터 변환\n\n비밀 정보 숨김에 관련된 코드 난독화의 중요한 요소는 데이터(문자열)를 다른 형태로 변환하는 것입니다. 이는 코드의 성능에 미치는 영향을 최소화하면서도 해커들이 이해하기 어렵게 만들어야 합니다.\n\n\n\n이것은 하드코딩된 문자열을 특히 난독화하는 솔루션이 필요하다는 것을 의미합니다 (또는 문자열을 매개변수로 사용할 수 있는 것), 애플리케이션의 클래스 이름 및 소스 코드를 난독화하려는 것이 아니라는 것을 명심해주세요. 왜냐하면 그것은 다른 목적을 위한 것이기 때문입니다.\n\n데이터 변환은 문자열 암호화, 키 분할, 사용자 지정 인코딩 등 다양한 형태를 가질 수 있습니다.\n\n다중 레이어\n\n난독화 알고리즘이 여러 변환을 수행하면 스크립트에 덜 취약할 가능성이 높으며, 따라서 데이터를 이해하려는 시도가 더 시간이 걸릴 수 있으며 코드를 다시 난독화하려면 수동 개입 (동적 분석)이 필요할 수도 있습니다.\n\n\n\n# 결론\n\n요약하자면, 자동화된 스크립트에 취약하지 않은 알고리즘을 찾는 것이 이상적입니다. 공격자가 키를 복호화하는 것을 어렵게 만들어야 하며, 시간이 많이 걸리는 기술을 사용해 애플리케이션을 공격자에겐 덜 유혹적으로 만들어야 합니다.\n\n또한 비밀 정보의 중요성을 고려하고, API 키를 숨기는 경우에는 API 키 사용을 제한하는 등의 회전하는 보안 방법을 고려해야 합니다.\n\n원하는 보안 수준에 따라 소유권 기반의 난독화 솔루션을 선택할 수도 있습니다. 이러한 솔루션의 장점 중 하나는 비공개로 유지되어 자동화 스크립트에 취약할 가능성이 낮다는 것입니다.\n\n\n\n# iOS 개인 추천 사항\n\n이 추천 사항은 작성 시점에 작성되었음을 유의해 주세요.\n\n다음은 이러한 아이디어를 일부 이용한 라이브러리 목록입니다:\n\n- Swift confidentials — https://github.com/securevale/swift-confidential\n- ObfuscateMacro — https://github.com/p-x9/ObfuscateMacro\n\n\n\n이 기사는 iOS에 초점을 맞추었지만 일반적인 원칙은 모든 클라이언트 측 코드에 적용할 수 있습니다.\n\n사용하는 난독화 알고리즘은 앞으로 다룰 다른 보호층과 함께 사용해야 합니다.\n\n애플리케이션을 더 안전하게 만드는 방법에 대해 더 많은 통찰력을 얻고 싶으신가요?\n\n향후 게시물을 최신 상태로 유지하려면 아래 무료 뉴스레터를 구독해주세요:\n\n\n\nhttps://substack.com/@alexlotsu?utm_source=profile-page","ogImage":{"url":"/assets/img/2024-05-15-ThecrucialstepinprotectingyouriOSappssecrets_0.png"},"coverImage":"/assets/img/2024-05-15-ThecrucialstepinprotectingyouriOSappssecrets_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>암호화와 적절한 솔루션 선택</p>\n<p>앱에 하드코딩된 문자열로 저장된 비밀 또는 암호화 키가 있나요? 또는 Info.plist와 같은 파일에 저장되어 있나요?</p>\n<p>그렇다면, 그것들은 매우 쉽게 발견될 수 있습니다.</p>\n<p>먼저, 우리가 방지하려는 것을 이해하기 위해 공격자가 어떻게 하드코딩된 문자열을 볼 수 있는지 살펴봅시다.</p>\n<h1>해커가 하드코딩된 문자열을 어떻게 볼 수 있을까요?</h1>\n<p>당신의 애플리케이션(예: iOS의 경우 IPA 파일)을 정적 분석 도구에 전달하면 그 문자열들이 이렇게 나타날 것입니다:</p>\n<p><img src=\"/assets/img/2024-05-15-ThecrucialstepinprotectingyouriOSappssecrets_0.png\" alt=\"이미지\"></p>\n<p>Info.plist 파일에 저장한다면 어떨까요?</p>\n<p>이 방법도 안전하지 않습니다. 파일은 정적 분석기를 통해 쉽게 볼 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-15-ThecrucialstepinprotectingyouriOSappssecrets_1.png\" alt=\"image\"></p>\n<h2>그래서, 하드코딩된 문자열을 어떻게 보호할까요?</h2>\n<p>이상적으로는 보안 정보(API 키, 엔드포인트, API 토큰 등 민감한 데이터)는 클라이언트 측에 저장되어서는 안 됩니다. 이는 피해야 할 패턴입니다.</p>\n<p>하지만 거의 모든 앱에는 일부 정보가 저장되어 있고, 당신이 이러한 상황에 처할 수도 있습니다. 이 경우에는 정보가 올바르게 보호되었는지 확인해야 합니다.</p>\n<p>API 키와 기타 비밀 정보를 간단히 암호화할 수 있을까요?</p>\n<p>좋은 시작입니다. 하지만 클라이언트에 암호화 키를 저장해야 하는 경우 어떻게 그것을 안전하게 보호할 수 있을까요?</p>\n<p>어떤 정보든 클라이언트에 두는 보안 계층은 100% 안전하지 않다는 것을 강조하고 싶습니다. 그러나 공격자가 이러한 정보를 획득하는 것을 매우 어렵게 만들 수는 있습니다.</p>\n<p>주기적으로 비밀을 업데이트하는 것은 역공학 공격을 무력화시킬 수 있습니다. 정기적인 업데이트로, 역공학자가 시간을 쏟아서 비밀을 얻으려고 노력한 모든 시간이 무익해질 수 있기 때문이죠.</p>\n<h1>코드 난독화</h1>\n<p>위에서 설명한 것처럼 일반적으로 정보를 업데이트하여 구조를 변경함으로써 역공학 공격을 무력화할 수 있습니다.</p>\n<p>난독화는 정보나 코드를 이해하기 어렵게 만드는 행위입니다. 이는 인간뿐만 아니라 컴퓨터도 이해하기 힘들게 만드는 것을 의미합니다.</p>\n<p>추가적인 보안층으로, hardcoded된 비밀을 암호화한 다음 암호화 키를 난독화 하는 것을 권장합니다. 이렇게 하면 모든 비밀을 난독화 해야 하는 대신 암호화 키만 난독화하면 되므로 알고리즘에 따라 발생할 수 있는 성능 오버헤드를 피할 수 있습니다.</p>\n<p>iOS를 사용 중이라면 Apple의 CryptoKit을 사용하는 것을 추천하며, AES와 같은 강력한 산업 표준 알고리즘을 선택하는 것이 좋습니다.</p>\n<h1>결과</h1>\n<p>비밀 hardcoded된 문자열을 난독화한 후 정적 분석기가 그들을 직접적으로 사용할 수 없는 변형 형태로 캐치할 것입니다.</p>\n<img src=\"/assets/img/2024-05-15-ThecrucialstepinprotectingyouriOSappssecrets_2.png\">\n<h1>당신의 난독화 솔루션을 선택하기</h1>\n<p>어떤 난독화 라이브러리를 선택해야 할까요?</p>\n<p>비록 당신이 선택한 어떤 난독화 알고리즘이라도 단순히 앱 내에 하드코딩된 보안 정보를 그대로 둘 것보다 낫다는 것은 사실이지만, 해독자에게 더 어렵게 만드는 솔루션도 있습니다.</p>\n<h1>찾아야 할 난독화 기술</h1>\n<p>비밀 정보를 안전하게 유지하기 위해 난독화 라이브러리를 찾고 있다면 다음의 기본 아이디어를 살펴보세요.</p>\n<ol>\n<li>데이터 변환</li>\n</ol>\n<p>비밀 정보 숨김에 관련된 코드 난독화의 중요한 요소는 데이터(문자열)를 다른 형태로 변환하는 것입니다. 이는 코드의 성능에 미치는 영향을 최소화하면서도 해커들이 이해하기 어렵게 만들어야 합니다.</p>\n<p>이것은 하드코딩된 문자열을 특히 난독화하는 솔루션이 필요하다는 것을 의미합니다 (또는 문자열을 매개변수로 사용할 수 있는 것), 애플리케이션의 클래스 이름 및 소스 코드를 난독화하려는 것이 아니라는 것을 명심해주세요. 왜냐하면 그것은 다른 목적을 위한 것이기 때문입니다.</p>\n<p>데이터 변환은 문자열 암호화, 키 분할, 사용자 지정 인코딩 등 다양한 형태를 가질 수 있습니다.</p>\n<p>다중 레이어</p>\n<p>난독화 알고리즘이 여러 변환을 수행하면 스크립트에 덜 취약할 가능성이 높으며, 따라서 데이터를 이해하려는 시도가 더 시간이 걸릴 수 있으며 코드를 다시 난독화하려면 수동 개입 (동적 분석)이 필요할 수도 있습니다.</p>\n<h1>결론</h1>\n<p>요약하자면, 자동화된 스크립트에 취약하지 않은 알고리즘을 찾는 것이 이상적입니다. 공격자가 키를 복호화하는 것을 어렵게 만들어야 하며, 시간이 많이 걸리는 기술을 사용해 애플리케이션을 공격자에겐 덜 유혹적으로 만들어야 합니다.</p>\n<p>또한 비밀 정보의 중요성을 고려하고, API 키를 숨기는 경우에는 API 키 사용을 제한하는 등의 회전하는 보안 방법을 고려해야 합니다.</p>\n<p>원하는 보안 수준에 따라 소유권 기반의 난독화 솔루션을 선택할 수도 있습니다. 이러한 솔루션의 장점 중 하나는 비공개로 유지되어 자동화 스크립트에 취약할 가능성이 낮다는 것입니다.</p>\n<h1>iOS 개인 추천 사항</h1>\n<p>이 추천 사항은 작성 시점에 작성되었음을 유의해 주세요.</p>\n<p>다음은 이러한 아이디어를 일부 이용한 라이브러리 목록입니다:</p>\n<ul>\n<li>Swift confidentials — <a href=\"https://github.com/securevale/swift-confidential\" rel=\"nofollow\" target=\"_blank\">https://github.com/securevale/swift-confidential</a></li>\n<li>ObfuscateMacro — <a href=\"https://github.com/p-x9/ObfuscateMacro\" rel=\"nofollow\" target=\"_blank\">https://github.com/p-x9/ObfuscateMacro</a></li>\n</ul>\n<p>이 기사는 iOS에 초점을 맞추었지만 일반적인 원칙은 모든 클라이언트 측 코드에 적용할 수 있습니다.</p>\n<p>사용하는 난독화 알고리즘은 앞으로 다룰 다른 보호층과 함께 사용해야 합니다.</p>\n<p>애플리케이션을 더 안전하게 만드는 방법에 대해 더 많은 통찰력을 얻고 싶으신가요?</p>\n<p>향후 게시물을 최신 상태로 유지하려면 아래 무료 뉴스레터를 구독해주세요:</p>\n<p><a href=\"https://substack.com/@alexlotsu?utm_source=profile-page\" rel=\"nofollow\" target=\"_blank\">https://substack.com/@alexlotsu?utm_source=profile-page</a></p>\n</body>\n</html>\n"},"__N_SSG":true}