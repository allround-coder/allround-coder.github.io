{"pageProps":{"post":{"title":"Nodejs와 Reactjs에서 Razorpay 결제 게이트웨이 통합 방법","description":"","date":"2024-06-22 02:29","slug":"2024-06-22-RazorpayPaymentGatewayIntegrationInNodeJSReactJS","content":"\n\n# Node.js 및 React JS에서 Razorpay 결제 게이트웨이 통합\n\n<img src=\"/assets/img/2024-06-22-RazorpayPaymentGatewayIntegrationInNodeJSReactJS_0.png\" />\n\n# Node.js에서 Razorpay 결제 API 구현\n\n많은 시장에서 제공되는 결제 게이트웨이는 온라인 거래가 처리되는 곳입니다. 여기에서 Node.js를 사용하여 온라인 상점에 Razorpay 결제 API를 구현하는 방법을 설명하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n우리는 ReactJS에서 Node.js로 작성된 API를 사용하여 Razorpay 결제 게이트웨이를 통합하는 방법에 대해 이야기할 것입니다.\n\n물론 로직은 동일하기 때문에 사용하는 언어가 중요하지 않습니다. 그러니 시작해 봅시다!\n\n## 단계 1:\n\nRazorpay 웹사이트에서 계정을 만들어 여기에서 Key Id 및 Key Secret을 받으세요.\n이 정보는 설정 - `API keys`에서 얻을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n노트- 테스트 모드에 계십니까? 확인 부탁드립니다.\n\n## 단계 2:\n\n이번 단계에서는 Razorpay 결제 게이트웨이가 어떻게 작동하는지 이해해 보겠습니다. Razorpay 결제 게이트웨이의 흐름은 무엇인가요?\n\n다음 단계들은 Razorpay에서의 결제 흐름의 주요 구성 요소입니다-\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-22-RazorpayPaymentGatewayIntegrationInNodeJSReactJS_1.png\" />\n\n- 고객이 주문을 생성합니다.\n- Razorpay는 주문에 대한 주문 ID를 생성하고, 우리는 이를 통합에 사용합니다.\n- 주문 ID를 사용하여 결제 UI가 열리며, 고객은 세부 정보를 입력하고 결제 수단을 선택하고 금액을 지불합니다.\n- 그런 다음,이 단일 지불에는 처리를 받는 결제 ID이 있으며 우리는 응답으로 razorpay_signature, razorpay_order_id 및 razorpay_payment_id를 받습니다.\n- 그런 다음,이 결제를 인증하고 캡처하여 전체 거래를 정리하고 완료해야 합니다.\n\n## 단계 3:\n\n이제 코드를 작성합시다.\n\n<div class=\"content-ad\"></div>\n\n## 백엔드\n\nRazorpay를 초기화합니다.\n\n```js\nnpm i razorpay\n```\n\n## 비밀 키 사용하기\n\n<div class=\"content-ad\"></div>\n\nRazorpay의 모든 API에 접근하려면 먼저 Razorpay 패키지를 설치한 다음 시크릿 키를 사용해야 합니다.\n\n```js\nconst Razorpay = require('razorpay')\n```\n\n```js\nconst razorpay = new Razorpay({\nkey_id: 'rzp_test_uGoq5ADrFTgYRAhk',\n   key_secret: 'FySe2f58UYtg6Hjkj1a5s6clk9B'\n})\n```\n\n## 주문 생성을 위한 API 경로\n\n<div class=\"content-ad\"></div>\n\n우리는 주문을 배치하고 아래 나열된 API를 호출해야 합니다. 주문에 관한 기본 정보를 유지하고 주문을 반환해야 합니다. 나는 Razorpay를 위한 이 API의 요청 본문을 구성하고 create order 함수를 호출했습니다. 그런 다음에는 주문 ID를 프론트엔드 팀에 보내야 했으므로 그들이 이를 활용할 수 있고 Razorpay 체크아웃 페이지의 비밀키도 사용할 수 있습니다. 지불이 성공하면 상태가 \"Failed\"에서 \"Authorized\"로 변경됩니다. Razorpay 대시보드에서 확인할 수 있습니다.\n\n```js\napp.post('/order', async (req, res) => {\n    // razorpay 초기화\n    const razorpay = new Razorpay({\n        key_id: req.body.keyId,\n        key_secret: req.body.keySecret,\n    });\n\n    // razorpay 주문에 대한 옵션 설정\n    const options = {\n        amount: req.body.amount,\n        currency: req.body.currency,\n        receipt: \"각 주문에 대한 고유 ID\",\n        payment_capture: 1\n    };\n    try {\n        const response = await razorpay.orders.create(options)\n        res.json({\n            order_id: response.id,\n            currency: response.currency,\n            amount: response.amount,\n        })\n    } catch (err) {\n       res.status(400).send('주문을 생성할 수 없습니다. 다시 시도해주세요!');\n    }\n});\n```\n\n## 지불 캡처를 위한 API 경로\n\nRazorpay 설정에서 다음 URL을 웹훅에 특별한 비밀 키로 입력하고 \"payment.capture\" 열을 선택해야 하며, 이렇게하면 지불이 성공할 때마다 활성화됩니다.\n\n<div class=\"content-ad\"></div>\n\nWebhook에서 제공한 비밀 키를 사용하여 이 URL에서 서명을 확인해야 합니다. 지불 상태는 확인 후 \"캡처됨\"으로 변경됩니다.\n\n```js\nconst crypto = require('crypto')\n\nconst secret_key = '1234567890'\n\napp.post('/paymentCapture', (req, res) => {\n\n   // 유효성 검사 수행\n\nconst data = crypto.createHmac('sha256', secret_key)\n\n   data.update(JSON.stringify(req.body))\n\n   const digest = data.digest('hex')\n\nif (digest === req.headers['x-razorpay-signature']) {\n\n       console.log('요청이 유효합니다')\n\n       // 응답을 보내고 정보를 데이터베이스에 저장할 수 있습니다.\n\n       res.json({\n\n           status: 'ok'\n\n       })\n\n} else {\n\n       res.status(400).send('유효하지 않은 서명');\n\n   }\n\n})\n```\n\n## 환불\n\n지불이 완료된 후 환불할 수 있습니다. 요청할 API 호출과 함께 지불 ID와 금액을 제공하면 내부적으로 Razorpay의 환불 함수가 호출되어 돈을 동일한 계좌로 반환합니다.\n\n<div class=\"content-ad\"></div>\n\n```javascript\napp.post('/refund', async (req, res) => {\n\n   try {\n\n       // 먼저 결제 ID를 확인한 후 Razorpay API에 액세스합니다.\n\n       const options = {\n\n           payment_id: req.body.paymentId,\n\n           amount: req.body.amount,\n\n       };\n\nconst razorpayResponse = await razorpay.refund(options);\n\n       // 응답을 보내고 데이터베이스에 정보를 저장할 수 있습니다.\n\n       res.send('환불 성공')\n\n   } catch (error) {\n\n       console.log(error);\n\n       res.status(400).send('환불 발행에 문제가 있습니다');\n\n   }\n\n})\n```\n\n## 장점\n\nRazorpay Payment Gateway와 통합하는 이점은 아래에 나열되어 있습니다.\n\nOnboarding\n\n\n<div class=\"content-ad\"></div>\n\n표 태그를 Markdown 형식으로 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n은행으로부터 수신한 오류 코드에 기초하여 Razorpay는 실패한 API 환불을 지능적으로 다시 시도합니다. 당사의 인스턴트 환불 도구 덕분에 최상의 환불 경험을 고객에게 제공할 수 있습니다.\n\n확장성과 가용성\n\n당사 시스템은 1초에 800개의 트랜잭션 요청을 처리할 수 있으며 성능이 저하되지 않습니다. 상태 페이지와 대시보드 외에도 장애 업데이트 이메일을 전송합니다.\n\n정산 조정\n\n<div class=\"content-ad\"></div>\n\n거래 처리를 추적하려면 특정 날짜나 월에 지불된 지불, 환불, 이체 및 조정을 모두 추적하기 위해 결제 조정을 사용하십시오.\n\n보상\n\n우리 회사는 국내외 다양한 카드, 다양한 인터넷뱅킹 대안, UPI 수집 및 의도, EMI, 무카드 EMI 및 Paytm 및 PhonePe와 같은 지갑을 모두 지원합니다.\n\n## 단계 4: 프론트엔드 (React js)\n\n<div class=\"content-ad\"></div>\n\n다음은 Razorpay를 렌더링하는 코드입니다.\n\n```js\nimport { useEffect, useRef } from 'react';\nimport crypto from 'crypto-js';\nimport PropTypes from 'prop-types';\nimport Axios from 'axios';\n\n// 스크립트를로드하고 DOM 트리에 추가하는 함수\nconst loadScript = src => new Promise((resolve) => {\n  const script = document.createElement('script');\n  script.src = src;\n  script.onload = () => {\n    console.log('razorpay가 성공적으로로드되었습니다');\n    resolve(true);\n  };\n  script.onerror = () => {\n    console.log('razorpay로드 중 오류 발생');\n    resolve(false);\n  };\n  document.body.appendChild(script);\n});\n\n\nconst RenderRazorpay = ({\n  orderId,\n  keyId,\n  keySecret,\n  currency,\n  amount,\n}) => {\n  const paymentId = useRef(null);\n  const paymentMethod = useRef(null);\n\n  // razorpay 체크아웃 모달 스크립트로드\n  const displayRazorpay = async (options) => {\n    const res = await loadScript(\n      'https://checkout.razorpay.com/v1/checkout.js',\n    );\n\n    if (!res) {\n      console.log('Razorpay SDK를로드하지 못했습니다. 온라인 상태이십니까?');\n      return;\n    }\n    // 모든 정보가 나중에 논의 할 options에로드됩니다.\n    const rzp1 = new window.Razorpay(options);\n\n    // 선택한 결제 방법을 검색하려는 경우\n    rzp1.on('payment.submit', (response) => {\n      paymentMethod.current = response.method;\n    });\n\n    // 거래 실패시 결제 ID를 검색\n    rzp1.on('payment.failed', (response) => {\n      paymentId.current = response.error.metadata.payment_id;\n    });\n\n    // razorpay 체크아웃 모달 열기\n    rzp1.open();\n  };\n\n\n  // 결제 서버에 알리기\n  const handlePayment = async (status, orderDetails = {}) => {\n    await Axios.post(`${serverBaseUrl}/payment`,\n      {\n        status,\n        orderDetails,\n      });\n  };\n\n\n  // 다음 단계에서이 객체를 작성 할 것입니다.\n  const options = {},\n\n  useEffect(() => {\n    console.log('레이저페이');\n    displayRazorpay(options);\n  }, []);\n\n  return null;\n};\n\nexport default RenderRazorpay;\n```\n\n<div class=\"content-ad\"></div>\n\n이제 통합의 가장 중요한 부분입니다.\n\n```js\nconst options = {\n    key: keyId, // 프롭스로부터 키 ID\n    amount, // 프롭스로부터 최소 단위 금액\n    currency, // 프롭스로부터 통화\n    name: 'amit', // 결제 모달에 표시할 조직의 제목\n    // image, // 사용자 정의 로고 URL\n    order_id: orderId, // 프롭스로부터 주문 ID\n    // 이 핸들러 메서드는 항상 결제에 성공했을 때 실행됩니다. \n    handler: (response) => {\n      console.log('succeeded');\n      console.log(response);\n      paymentId.current = response.razorpay_payment_id;\n\n      // 지불을 캡처하고 승인하는 가장 중요한 단계입니다. 이 작업은 백엔드 서버에서 수행할 수 있습니다.\n      const succeeded = crypto.HmacSHA256(`${orderId}|${response.razorpay_payment_id}`, keySecret).toString() === response.razorpay_signature;\n\n      // 성공적으로 승인되면 결제를 성공으로 간주할 수 있습니다.\n      if (succeeded) {\n        handlePayment('succeeded', {\n          orderId,\n          paymentId,\n          signature: response.razorpay_signature,\n        });\n      } else {\n        handlePayment('failed', {\n          orderId,\n          paymentId: response.razorpay_payment_id,\n        });\n      }\n    },\n    modal: {\n      confirm_close: true, // true로 설정하면 × 버튼을 클릭했을 때 확인이 필요합니다.\n      // 체크아웃 모달이 닫힐 때 실행되는 함수입니다.\n      // 이 모달이 닫히는 이유는 3가지가 있을 수 있습니다.\n      ondismiss: async (reason) => {\n        const {\n          reason: paymentReason, field, step, code,\n        } = reason && reason.error ? reason.error : {};\n        // 이유 1- 지불이 취소될 때. 이는 × 아이콘을 클릭하거나 명시적으로 지불을 취소할 때 발생할 수 있습니다.\n        if (reason === undefined) {\n          console.log('cancelled');\n          handlePayment('Cancelled');\n        } \n        // 이유 2- 시간 초과로 인해 모달이 자동으로 닫힐 때\n        else if (reason === 'timeout') {\n          console.log('timedout');\n          handlePayment('timedout');\n        } \n        // 이유 3- 지불이 실패했을 때\n        else {\n          console.log('failed');\n          handlePayment('failed', {\n            paymentReason, field, step, code,\n          });\n        }\n      },\n    },\n    // 이 속성을 사용하여 재시도를 활성화/비활성화할 수 있습니다.\n    // 기본적으로 활성화되어 있습니다.\n    retry: {\n      enabled: false,\n    },\n    timeout: 900, // 시간 제한(초) \n    theme: {\n      color: '', // 체크아웃 모달에 대한 사용자 정의 색상\n    },\n  };\n```\n\n## 단계 5: 이제 결제를 진행해 봅시다.\n\n이렇게 보입니다.\n\n<div class=\"content-ad\"></div>\n\n\n![2024-06-22-RazorpayPaymentGatewayIntegrationInNodeJSReactJS_2](/assets/img/2024-06-22-RazorpayPaymentGatewayIntegrationInNodeJSReactJS_2.png)\n","ogImage":{"url":"/assets/img/2024-06-22-RazorpayPaymentGatewayIntegrationInNodeJSReactJS_0.png"},"coverImage":"/assets/img/2024-06-22-RazorpayPaymentGatewayIntegrationInNodeJSReactJS_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>Node.js 및 React JS에서 Razorpay 결제 게이트웨이 통합</h1>\n<img src=\"/assets/img/2024-06-22-RazorpayPaymentGatewayIntegrationInNodeJSReactJS_0.png\">\n<h1>Node.js에서 Razorpay 결제 API 구현</h1>\n<p>많은 시장에서 제공되는 결제 게이트웨이는 온라인 거래가 처리되는 곳입니다. 여기에서 Node.js를 사용하여 온라인 상점에 Razorpay 결제 API를 구현하는 방법을 설명하겠습니다.</p>\n<div class=\"content-ad\"></div>\n<p>우리는 ReactJS에서 Node.js로 작성된 API를 사용하여 Razorpay 결제 게이트웨이를 통합하는 방법에 대해 이야기할 것입니다.</p>\n<p>물론 로직은 동일하기 때문에 사용하는 언어가 중요하지 않습니다. 그러니 시작해 봅시다!</p>\n<h2>단계 1:</h2>\n<p>Razorpay 웹사이트에서 계정을 만들어 여기에서 Key Id 및 Key Secret을 받으세요.\n이 정보는 설정 - <code>API keys</code>에서 얻을 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>노트- 테스트 모드에 계십니까? 확인 부탁드립니다.</p>\n<h2>단계 2:</h2>\n<p>이번 단계에서는 Razorpay 결제 게이트웨이가 어떻게 작동하는지 이해해 보겠습니다. Razorpay 결제 게이트웨이의 흐름은 무엇인가요?</p>\n<p>다음 단계들은 Razorpay에서의 결제 흐름의 주요 구성 요소입니다-</p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-22-RazorpayPaymentGatewayIntegrationInNodeJSReactJS_1.png\">\n<ul>\n<li>고객이 주문을 생성합니다.</li>\n<li>Razorpay는 주문에 대한 주문 ID를 생성하고, 우리는 이를 통합에 사용합니다.</li>\n<li>주문 ID를 사용하여 결제 UI가 열리며, 고객은 세부 정보를 입력하고 결제 수단을 선택하고 금액을 지불합니다.</li>\n<li>그런 다음,이 단일 지불에는 처리를 받는 결제 ID이 있으며 우리는 응답으로 razorpay_signature, razorpay_order_id 및 razorpay_payment_id를 받습니다.</li>\n<li>그런 다음,이 결제를 인증하고 캡처하여 전체 거래를 정리하고 완료해야 합니다.</li>\n</ul>\n<h2>단계 3:</h2>\n<p>이제 코드를 작성합시다.</p>\n<div class=\"content-ad\"></div>\n<h2>백엔드</h2>\n<p>Razorpay를 초기화합니다.</p>\n<pre><code class=\"hljs language-js\">npm i razorpay\n</code></pre>\n<h2>비밀 키 사용하기</h2>\n<div class=\"content-ad\"></div>\n<p>Razorpay의 모든 API에 접근하려면 먼저 Razorpay 패키지를 설치한 다음 시크릿 키를 사용해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Razorpay</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'razorpay'</span>)\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> razorpay = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Razorpay</span>({\n<span class=\"hljs-attr\">key_id</span>: <span class=\"hljs-string\">'rzp_test_uGoq5ADrFTgYRAhk'</span>,\n   <span class=\"hljs-attr\">key_secret</span>: <span class=\"hljs-string\">'FySe2f58UYtg6Hjkj1a5s6clk9B'</span>\n})\n</code></pre>\n<h2>주문 생성을 위한 API 경로</h2>\n<div class=\"content-ad\"></div>\n<p>우리는 주문을 배치하고 아래 나열된 API를 호출해야 합니다. 주문에 관한 기본 정보를 유지하고 주문을 반환해야 합니다. 나는 Razorpay를 위한 이 API의 요청 본문을 구성하고 create order 함수를 호출했습니다. 그런 다음에는 주문 ID를 프론트엔드 팀에 보내야 했으므로 그들이 이를 활용할 수 있고 Razorpay 체크아웃 페이지의 비밀키도 사용할 수 있습니다. 지불이 성공하면 상태가 \"Failed\"에서 \"Authorized\"로 변경됩니다. Razorpay 대시보드에서 확인할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/order'</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n    <span class=\"hljs-comment\">// razorpay 초기화</span>\n    <span class=\"hljs-keyword\">const</span> razorpay = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Razorpay</span>({\n        <span class=\"hljs-attr\">key_id</span>: req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">keyId</span>,\n        <span class=\"hljs-attr\">key_secret</span>: req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">keySecret</span>,\n    });\n\n    <span class=\"hljs-comment\">// razorpay 주문에 대한 옵션 설정</span>\n    <span class=\"hljs-keyword\">const</span> options = {\n        <span class=\"hljs-attr\">amount</span>: req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">amount</span>,\n        <span class=\"hljs-attr\">currency</span>: req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">currency</span>,\n        <span class=\"hljs-attr\">receipt</span>: <span class=\"hljs-string\">\"각 주문에 대한 고유 ID\"</span>,\n        <span class=\"hljs-attr\">payment_capture</span>: <span class=\"hljs-number\">1</span>\n    };\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> razorpay.<span class=\"hljs-property\">orders</span>.<span class=\"hljs-title function_\">create</span>(options)\n        res.<span class=\"hljs-title function_\">json</span>({\n            <span class=\"hljs-attr\">order_id</span>: response.<span class=\"hljs-property\">id</span>,\n            <span class=\"hljs-attr\">currency</span>: response.<span class=\"hljs-property\">currency</span>,\n            <span class=\"hljs-attr\">amount</span>: response.<span class=\"hljs-property\">amount</span>,\n        })\n    } <span class=\"hljs-keyword\">catch</span> (err) {\n       res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'주문을 생성할 수 없습니다. 다시 시도해주세요!'</span>);\n    }\n});\n</code></pre>\n<h2>지불 캡처를 위한 API 경로</h2>\n<p>Razorpay 설정에서 다음 URL을 웹훅에 특별한 비밀 키로 입력하고 \"payment.capture\" 열을 선택해야 하며, 이렇게하면 지불이 성공할 때마다 활성화됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>Webhook에서 제공한 비밀 키를 사용하여 이 URL에서 서명을 확인해야 합니다. 지불 상태는 확인 후 \"캡처됨\"으로 변경됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> crypto = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'crypto'</span>)\n\n<span class=\"hljs-keyword\">const</span> secret_key = <span class=\"hljs-string\">'1234567890'</span>\n\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/paymentCapture'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n\n   <span class=\"hljs-comment\">// 유효성 검사 수행</span>\n\n<span class=\"hljs-keyword\">const</span> data = crypto.<span class=\"hljs-title function_\">createHmac</span>(<span class=\"hljs-string\">'sha256'</span>, secret_key)\n\n   data.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(req.<span class=\"hljs-property\">body</span>))\n\n   <span class=\"hljs-keyword\">const</span> digest = data.<span class=\"hljs-title function_\">digest</span>(<span class=\"hljs-string\">'hex'</span>)\n\n<span class=\"hljs-keyword\">if</span> (digest === req.<span class=\"hljs-property\">headers</span>[<span class=\"hljs-string\">'x-razorpay-signature'</span>]) {\n\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'요청이 유효합니다'</span>)\n\n       <span class=\"hljs-comment\">// 응답을 보내고 정보를 데이터베이스에 저장할 수 있습니다.</span>\n\n       res.<span class=\"hljs-title function_\">json</span>({\n\n           <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'ok'</span>\n\n       })\n\n} <span class=\"hljs-keyword\">else</span> {\n\n       res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'유효하지 않은 서명'</span>);\n\n   }\n\n})\n</code></pre>\n<h2>환불</h2>\n<p>지불이 완료된 후 환불할 수 있습니다. 요청할 API 호출과 함께 지불 ID와 금액을 제공하면 내부적으로 Razorpay의 환불 함수가 호출되어 돈을 동일한 계좌로 반환합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-javascript\">app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/refund'</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n\n   <span class=\"hljs-keyword\">try</span> {\n\n       <span class=\"hljs-comment\">// 먼저 결제 ID를 확인한 후 Razorpay API에 액세스합니다.</span>\n\n       <span class=\"hljs-keyword\">const</span> options = {\n\n           <span class=\"hljs-attr\">payment_id</span>: req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">paymentId</span>,\n\n           <span class=\"hljs-attr\">amount</span>: req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">amount</span>,\n\n       };\n\n<span class=\"hljs-keyword\">const</span> razorpayResponse = <span class=\"hljs-keyword\">await</span> razorpay.<span class=\"hljs-title function_\">refund</span>(options);\n\n       <span class=\"hljs-comment\">// 응답을 보내고 데이터베이스에 정보를 저장할 수 있습니다.</span>\n\n       res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'환불 성공'</span>)\n\n   } <span class=\"hljs-keyword\">catch</span> (error) {\n\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);\n\n       res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'환불 발행에 문제가 있습니다'</span>);\n\n   }\n\n})\n</code></pre>\n<h2>장점</h2>\n<p>Razorpay Payment Gateway와 통합하는 이점은 아래에 나열되어 있습니다.</p>\n<p>Onboarding</p>\n<div class=\"content-ad\"></div>\n<p>표 태그를 Markdown 형식으로 변경해주세요.</p>\n<div class=\"content-ad\"></div>\n<p>은행으로부터 수신한 오류 코드에 기초하여 Razorpay는 실패한 API 환불을 지능적으로 다시 시도합니다. 당사의 인스턴트 환불 도구 덕분에 최상의 환불 경험을 고객에게 제공할 수 있습니다.</p>\n<p>확장성과 가용성</p>\n<p>당사 시스템은 1초에 800개의 트랜잭션 요청을 처리할 수 있으며 성능이 저하되지 않습니다. 상태 페이지와 대시보드 외에도 장애 업데이트 이메일을 전송합니다.</p>\n<p>정산 조정</p>\n<div class=\"content-ad\"></div>\n<p>거래 처리를 추적하려면 특정 날짜나 월에 지불된 지불, 환불, 이체 및 조정을 모두 추적하기 위해 결제 조정을 사용하십시오.</p>\n<p>보상</p>\n<p>우리 회사는 국내외 다양한 카드, 다양한 인터넷뱅킹 대안, UPI 수집 및 의도, EMI, 무카드 EMI 및 Paytm 및 PhonePe와 같은 지갑을 모두 지원합니다.</p>\n<h2>단계 4: 프론트엔드 (React js)</h2>\n<div class=\"content-ad\"></div>\n<p>다음은 Razorpay를 렌더링하는 코드입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useEffect, useRef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> crypto <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'crypto-js'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">PropTypes</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'prop-types'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Axios</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n\n<span class=\"hljs-comment\">// 스크립트를로드하고 DOM 트리에 추가하는 함수</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">loadScript</span> = src => <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);\n  script.<span class=\"hljs-property\">src</span> = src;\n  script.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'razorpay가 성공적으로로드되었습니다'</span>);\n    <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-literal\">true</span>);\n  };\n  script.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'razorpay로드 중 오류 발생'</span>);\n    <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-literal\">false</span>);\n  };\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(script);\n});\n\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">RenderRazorpay</span> = (<span class=\"hljs-params\">{\n  orderId,\n  keyId,\n  keySecret,\n  currency,\n  amount,\n}</span>) => {\n  <span class=\"hljs-keyword\">const</span> paymentId = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> paymentMethod = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-comment\">// razorpay 체크아웃 모달 스크립트로드</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">displayRazorpay</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">options</span>) => {\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">loadScript</span>(\n      <span class=\"hljs-string\">'https://checkout.razorpay.com/v1/checkout.js'</span>,\n    );\n\n    <span class=\"hljs-keyword\">if</span> (!res) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Razorpay SDK를로드하지 못했습니다. 온라인 상태이십니까?'</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-comment\">// 모든 정보가 나중에 논의 할 options에로드됩니다.</span>\n    <span class=\"hljs-keyword\">const</span> rzp1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title class_\">Razorpay</span>(options);\n\n    <span class=\"hljs-comment\">// 선택한 결제 방법을 검색하려는 경우</span>\n    rzp1.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'payment.submit'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> {\n      paymentMethod.<span class=\"hljs-property\">current</span> = response.<span class=\"hljs-property\">method</span>;\n    });\n\n    <span class=\"hljs-comment\">// 거래 실패시 결제 ID를 검색</span>\n    rzp1.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'payment.failed'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> {\n      paymentId.<span class=\"hljs-property\">current</span> = response.<span class=\"hljs-property\">error</span>.<span class=\"hljs-property\">metadata</span>.<span class=\"hljs-property\">payment_id</span>;\n    });\n\n    <span class=\"hljs-comment\">// razorpay 체크아웃 모달 열기</span>\n    rzp1.<span class=\"hljs-title function_\">open</span>();\n  };\n\n\n  <span class=\"hljs-comment\">// 결제 서버에 알리기</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handlePayment</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">status, orderDetails = {}</span>) => {\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Axios</span>.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${serverBaseUrl}</span>/payment`</span>,\n      {\n        status,\n        orderDetails,\n      });\n  };\n\n\n  <span class=\"hljs-comment\">// 다음 단계에서이 객체를 작성 할 것입니다.</span>\n  <span class=\"hljs-keyword\">const</span> options = {},\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'레이저페이'</span>);\n    <span class=\"hljs-title function_\">displayRazorpay</span>(options);\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">RenderRazorpay</span>;\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 통합의 가장 중요한 부분입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">key</span>: keyId, <span class=\"hljs-comment\">// 프롭스로부터 키 ID</span>\n    amount, <span class=\"hljs-comment\">// 프롭스로부터 최소 단위 금액</span>\n    currency, <span class=\"hljs-comment\">// 프롭스로부터 통화</span>\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'amit'</span>, <span class=\"hljs-comment\">// 결제 모달에 표시할 조직의 제목</span>\n    <span class=\"hljs-comment\">// image, // 사용자 정의 로고 URL</span>\n    <span class=\"hljs-attr\">order_id</span>: orderId, <span class=\"hljs-comment\">// 프롭스로부터 주문 ID</span>\n    <span class=\"hljs-comment\">// 이 핸들러 메서드는 항상 결제에 성공했을 때 실행됩니다. </span>\n    <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'succeeded'</span>);\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(response);\n      paymentId.<span class=\"hljs-property\">current</span> = response.<span class=\"hljs-property\">razorpay_payment_id</span>;\n\n      <span class=\"hljs-comment\">// 지불을 캡처하고 승인하는 가장 중요한 단계입니다. 이 작업은 백엔드 서버에서 수행할 수 있습니다.</span>\n      <span class=\"hljs-keyword\">const</span> succeeded = crypto.<span class=\"hljs-title class_\">HmacSHA256</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${orderId}</span>|<span class=\"hljs-subst\">${response.razorpay_payment_id}</span>`</span>, keySecret).<span class=\"hljs-title function_\">toString</span>() === response.<span class=\"hljs-property\">razorpay_signature</span>;\n\n      <span class=\"hljs-comment\">// 성공적으로 승인되면 결제를 성공으로 간주할 수 있습니다.</span>\n      <span class=\"hljs-keyword\">if</span> (succeeded) {\n        <span class=\"hljs-title function_\">handlePayment</span>(<span class=\"hljs-string\">'succeeded'</span>, {\n          orderId,\n          paymentId,\n          <span class=\"hljs-attr\">signature</span>: response.<span class=\"hljs-property\">razorpay_signature</span>,\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title function_\">handlePayment</span>(<span class=\"hljs-string\">'failed'</span>, {\n          orderId,\n          <span class=\"hljs-attr\">paymentId</span>: response.<span class=\"hljs-property\">razorpay_payment_id</span>,\n        });\n      }\n    },\n    <span class=\"hljs-attr\">modal</span>: {\n      <span class=\"hljs-attr\">confirm_close</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// true로 설정하면 × 버튼을 클릭했을 때 확인이 필요합니다.</span>\n      <span class=\"hljs-comment\">// 체크아웃 모달이 닫힐 때 실행되는 함수입니다.</span>\n      <span class=\"hljs-comment\">// 이 모달이 닫히는 이유는 3가지가 있을 수 있습니다.</span>\n      <span class=\"hljs-attr\">ondismiss</span>: <span class=\"hljs-keyword\">async</span> (reason) => {\n        <span class=\"hljs-keyword\">const</span> {\n          <span class=\"hljs-attr\">reason</span>: paymentReason, field, step, code,\n        } = reason &#x26;&#x26; reason.<span class=\"hljs-property\">error</span> ? reason.<span class=\"hljs-property\">error</span> : {};\n        <span class=\"hljs-comment\">// 이유 1- 지불이 취소될 때. 이는 × 아이콘을 클릭하거나 명시적으로 지불을 취소할 때 발생할 수 있습니다.</span>\n        <span class=\"hljs-keyword\">if</span> (reason === <span class=\"hljs-literal\">undefined</span>) {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'cancelled'</span>);\n          <span class=\"hljs-title function_\">handlePayment</span>(<span class=\"hljs-string\">'Cancelled'</span>);\n        } \n        <span class=\"hljs-comment\">// 이유 2- 시간 초과로 인해 모달이 자동으로 닫힐 때</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (reason === <span class=\"hljs-string\">'timeout'</span>) {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'timedout'</span>);\n          <span class=\"hljs-title function_\">handlePayment</span>(<span class=\"hljs-string\">'timedout'</span>);\n        } \n        <span class=\"hljs-comment\">// 이유 3- 지불이 실패했을 때</span>\n        <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'failed'</span>);\n          <span class=\"hljs-title function_\">handlePayment</span>(<span class=\"hljs-string\">'failed'</span>, {\n            paymentReason, field, step, code,\n          });\n        }\n      },\n    },\n    <span class=\"hljs-comment\">// 이 속성을 사용하여 재시도를 활성화/비활성화할 수 있습니다.</span>\n    <span class=\"hljs-comment\">// 기본적으로 활성화되어 있습니다.</span>\n    <span class=\"hljs-attr\">retry</span>: {\n      <span class=\"hljs-attr\">enabled</span>: <span class=\"hljs-literal\">false</span>,\n    },\n    <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">900</span>, <span class=\"hljs-comment\">// 시간 제한(초) </span>\n    <span class=\"hljs-attr\">theme</span>: {\n      <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">''</span>, <span class=\"hljs-comment\">// 체크아웃 모달에 대한 사용자 정의 색상</span>\n    },\n  };\n</code></pre>\n<h2>단계 5: 이제 결제를 진행해 봅시다.</h2>\n<p>이렇게 보입니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-22-RazorpayPaymentGatewayIntegrationInNodeJSReactJS_2.png\" alt=\"2024-06-22-RazorpayPaymentGatewayIntegrationInNodeJSReactJS_2\"></p>\n</body>\n</html>\n"},"__N_SSG":true}