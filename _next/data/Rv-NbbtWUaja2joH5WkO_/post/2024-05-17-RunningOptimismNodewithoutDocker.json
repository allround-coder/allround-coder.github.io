{"pageProps":{"post":{"title":"도커 없이 Optimism 노드 실행하는 방법","description":"","date":"2024-05-17 03:55","slug":"2024-05-17-RunningOptimismNodewithoutDocker","content":"\n\n\n![Optimism node](/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_0.png)\n\nOptimism 노드를 설치하는 것은 매우 간단합니다. 다른 슈퍼체인과 달리 많은 설정이 기본값으로 설정되어 있기 때문입니다.\n\n그래서 Docker 없이 스냅 동기화 모드로 Optimism 노드를 실행하는 방법을 설명하겠습니다. \"Docker 없이 베이스 노드 실행하기: 파트 2\"에서 파생된 글입니다.\n\n본 문서에서는 다음과 같은 설정을 하게 됩니다:\n\n\n<div class=\"content-ad\"></div>\n\n- `/etc/environment`에 환경 변수 설정하기\n- op-node 및 op-geth용 systemd 파일 생성하기\n- op-node 및 op-geth 로그를 보존하기 위한 rsyslog 구성 파일 생성하기\n- op-node 및 op-geth용 로그 회전 파일 생성하기\n\n# 1. op-node 및 op-geth 설치하기\n\n다음 단계로 진행하기 전에 \"Running Base Node without Docker: Part 1\" 글을 참고하여 op-geth와 op-node를 설치해야 합니다.\n\n# 2. `/etc/environment`에 Optimism 노드 환경 변수 추가 및 데이터 디렉토리 생성\n\n<div class=\"content-ad\"></div>\n\n## 2–1. 당신의 노드에 `/etc/environment` 파일에 다음 템플릿을 추가해주세요.\n\n```js\n##########################\n#### OPTIMISM SETTING ####\n##########################\nOP_GETH_SEQUENCER_HTTP=https://mainnet-sequencer.optimism.io\n# [필수] 선호하는 L1 노드 RPC URL로 변경해주세요:\nOP_NODE_L1_ETH_RPC=[귀하의 L1 ETH RPC]\n# [필수] 선호하는 L1 CL 비컨 엔드포인트로 변경해주세요:\nOP_NODE_L1_BEACON=[귀하의 L1 BEACON RPC]\n# [필수] 공용 IP 주소로 변경해주세요:\nOP_NODE_P2P_ADVERTISE_IP=[귀하의 공용 IP 주소]\nOP_NODE_BETA_EXTRA_NETWORKS=true\nOP_NODE_L2_ENGINE_AUTH=/home/ethereum/data/engine-auth-jwt\nOP_NODE_L2_ENGINE_RPC=ws://localhost:8551\nOP_NODE_LOG_LEVEL=info\nOP_NODE_METRICS_ADDR=0.0.0.0\nOP_NODE_METRICS_ENABLED=true\nOP_NODE_METRICS_PORT=7300\nOP_NODE_NETWORK=op-mainnet\nOP_NODE_P2P_LISTEN_IP=0.0.0.0\nOP_NODE_P2P_LISTEN_TCP_PORT=9001\nOP_NODE_P2P_LISTEN_UDP_PORT=9001\nOP_NODE_P2P_PRIV_PATH=/home/ethereum/data/opnode_p2p_priv.txt\nOP_NODE_P2P_DISCOVERY_PATH=/home/ethereum/data/opnode_discovery_db\nOP_NODE_P2P_PEERSTORE_PATH=/home/ethereum/data/opnode_peerstore_db\nOP_NODE_RPC_ADDR=0.0.0.0\nOP_NODE_RPC_PORT=8547\nOP_NODE_SNAPSHOT_LOG=/home/ethereum/data/op-node-snapshot-log\nOP_NODE_VERIFIER_L1_CONFS=4\nOP_NODE_ROLLUP_LOAD_PROTOCOL_VERSIONS=true\nOP_NODE_SYNCMODE=execution-layer\n# OP_NODE_L1_TRUST_RPC 는 더 빠른 동기화를 지원하지만, 사용 시 반드시 L1 RPC 노드가 완전히 신뢰성 있는 경우에만 사용해야 합니다.\n# 또한 이는 저장 증명을 지원하지 않는 Erigon과 같은 클라이언트와 함께 작동할 수 있도록 합니다:\nOP_NODE_L1_TRUST_RPC=true\nGETH_DATA_DIR=/home/ethereum/data\nVERBOSITY=3\nRPC_PORT=8545\nWS_PORT=8546\nAUTHRPC_PORT=8551\nMETRICS_PORT=6060\nHOST_IP=\"0.0.0.0\"\nP2P_PORT=30304\nOP_GETH_GCMODE=full\nOP_GETH_SYNCMODE=snap\n```\n\n## 2–2. 당신의 네트워크에 대한 값 변경하기\n\n아래 세 가지 변수를 변경해야 합니다.\n\n<div class=\"content-ad\"></div>\n\nOP_NODE_L1_ETH_RPC: 귀하의 L1 노드 (이더리움) RPC URL 또는 L1 PRC 노드 공급 업체 URL입니다.\n\n- 예시 (게속 RPC)\n\n```js\nOP_NODE_L1_ETH_RPC=http://192.168.1.2:8545\n```\n\nOP_NODE_L1_BEACON: 귀하의 L1 노드 (이더리움) Beacon RPC URL 또는 L1 Beacon 노드 공급 업체 URL입니다.\n\n<div class=\"content-ad\"></div>\n\n- 예시 (등대 비콘 rpc)\n\n```js\nOP_NODE_L1_BEACON=http://192.168.1.2:5052\n```\n\nOP_NODE_P2P_ADVERTISE_IP: 공용 IP 주소(개인 IP 주소가 아닙니다!)\n\n- 예시\n\n<div class=\"content-ad\"></div>\n\n```js\nOP_NODE_P2P_ADVERTISE_IP=34.149.58.211\n```\n\n참고:\n공개 IP 주소를 모르는 경우 노드에서 다음 명령을 사용하여 찾을 수 있습니다.\n\n```js\n$ curl http://api.ipify.org\n34.149.58.211\n```\n\n(선택 사항) 다른 P2P 포트를 사용하거나 L1 RPC를 신뢰하지 않는 경우 환경에 맞게 변경해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nP2P_PORT=30304 # op-geth용 P2P 포트\nOP_NODE_P2P_LISTEN_TCP_PORT=9001 # op-node용 TCP P2P 수신 포트\nOP_NODE_P2P_LISTEN_UDP_PORT=9001 # op-node용 UDP P2P 수신 포트\nOP_NODE_L1_TRUST_RPC=true # L1 RPC를 신뢰하는 경우 true로 설정합니다.\n```\n\n위의 변경 사항을 기반으로 예시 /etc/environment 파일은 다음과 같습니다:\n\n```js\nsudo vim /etc/environments\n```\n\n```js\nPATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\"\n\n##########################\n#### OPTIMISM 설정 ####\n##########################\nOP_GETH_SEQUENCER_HTTP=https://mainnet-sequencer.optimism.io\n# [필수] 선호하는 L1 노드 RPC URL로 교체:\nOP_NODE_L1_ETH_RPC=http://192.168.1.2:8545\n# [필수] 선호하는 L1 CL beacon 엔드포인트로 교체:\nOP_NODE_L1_BEACON=http://192.168.1.2:5052\n# 공인 IP 주소로 교체\nOP_NODE_P2P_ADVERTISE_IP=34.149.58.211\nOP_NODE_BETA_EXTRA_NETWORKS=true\nOP_NODE_L2_ENGINE_AUTH=/home/ethereum/data/engine-auth-jwt\nOP_NODE_L2_ENGINE_RPC=ws://localhost:8551\nOP_NODE_LOG_LEVEL=info\nOP_NODE_METRICS_ADDR=0.0.0.0\nOP_NODE_METRICS_ENABLED=true\nOP_NODE_METRICS_PORT=7300\nOP_NODE_NETWORK=op-mainnet\nOP_NODE_P2P_LISTEN_IP=0.0.0.0\nOP_NODE_P2P_LISTEN_TCP_PORT=9001\nOP_NODE_P2P_LISTEN_UDP_PORT=9001\nOP_NODE_P2P_PRIV_PATH=/home/ethereum/data/opnode_p2p_priv.txt\nOP_NODE_P2P_DISCOVERY_PATH=/home/ethereum/data/opnode_discovery_db\nOP_NODE_P2P_PEERSTORE_PATH=/home/ethereum/data/opnode_peerstore_db\nOP_NODE_RPC_ADDR=0.0.0.0\nOP_NODE_RPC_PORT=8547\nOP_NODE_SNAPSHOT_LOG=/home/ethereum/data/op-node-snapshot-log\nOP_NODE_VERIFIER_L1_CONFS=4\nOP_NODE_ROLLUP_LOAD_PROTOCOL_VERSIONS=true\nOP_NODE_SYNCMODE=execution-layer\n\n# OP_NODE_L1_TRUST_RPC를 사용하면 더 빠른 동기화가 가능하지만, L1 RPC 노드를\n# 완전히 신뢰하는 경우에만 사용해야 합니다.\n# 또한 storage proofs를 지원하지 않는 Erigon과 같은 클라이언트와 상호 작용하도록 합니다:\nOP_NODE_L1_TRUST_RPC=true\n\nOP_NODE_SYNCMODE=execution-layer\nGETH_DATA_DIR=/home/ethereum/data\nVERBOSITY=3\nRPC_PORT=8545\nWS_PORT=8546\nAUTHRPC_PORT=8551\nMETRICS_PORT=6060\nHOST_IP=\"0.0.0.0\"\nP2P_PORT=30304\nOP_GETH_GCMODE=full\nOP_GETH_SYNCMODE=snap\n```\n\n\n<div class=\"content-ad\"></div>\n\n## 2-3. 블록체인 데이터를 보존하기 위한 data 디렉토리 생성\n\n```js\n$ cd ~\n$ mkdir data\n```\n\n당신의 환경에 기반하여 Optimism 노드 환경 변수를 성공적으로 설정하셨습니다.\n\n# 3. op-node systemd 파일 생성\n\n<div class=\"content-ad\"></div>\n\n```bash\n$ sudo touch /etc/systemd/system/op-node.service\n$ sudo vim /etc/systemd/system/op-node.service\n```\n\n다음 내용을 붙여넣고 저장하세요.\n\n```bash\n[Unit]\nDescription=Optimistic Node Client\nAfter=network.target\n\n[Service]\nUser=ethereum\nGroup=ethereum\nEnvironment=HOME=/home/ethereum\nEnvironmentFile=/etc/environment\nType=simple\nExecStart=/usr/bin/op-node\nKillMode=process\nKillSignal=SIGINT\nTimeoutStopSec=90\nRestart=on-failure\nRestartSec=10s\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=op-node\n\n[Install]\nWantedBy=multi-user.target\n```\n\nop-node systemd 파일을 성공적으로 생성했습니다.\n\n<div class=\"content-ad\"></div>\n\n# 4. op-geth systemd 파일 만들기\n\n```js\n$ sudo touch /etc/systemd/system/op-geth.service\n$ sudo vim /etc/systemd/system/op-geth.service\n```\n\n다음 내용을 붙여 넣고 저장하세요.\n\n```js\n[Unit]\nDescription=옵티미즘 Go-이더리움 클라이언트\nAfter=network.target\n\n[Service]\nUser=ethereum\nGroup=ethereum\nEnvironment=HOME=/home/ethereum\nEnvironmentFile=/etc/environment\nType=simple\nExecStart=/usr/bin/op-geth --datadir=\"${GETH_DATA_DIR}\" \\\n--verbosity=\"${VERBOSITY}\" \\\n--http --http.corsdomain=\"*\" \\\n--http.vhosts=\"*\" \\\n--http.addr=0.0.0.0 \\\n--http.port=\"${RPC_PORT}\" \\\n--http.api=web3,debug,eth,net,engine \\\n--authrpc.addr=0.0.0.0 \\\n--authrpc.port=\"${AUTHRPC_PORT}\" \\\n--authrpc.vhosts=\"*\" \\\n--authrpc.jwtsecret=\"${OP_NODE_L2_ENGINE_AUTH}\" \\\n--ws \\\n--ws.addr=0.0.0.0 \\\n--ws.port=\"${WS_PORT}\" \\\n--ws.origins=\"*\" \\\n--ws.api=debug,eth,net,engine \\\n--metrics \\\n--metrics.addr=0.0.0.0 \\\n--metrics.port=\"${METRICS_PORT}\" \\\n--syncmode=\"${OP_GETH_SYNCMODE}\" \\\n--gcmode=\"${OP_GETH_GCMODE}\" \\\n--maxpeers=100 \\\n--nat=extip:${HOST_IP} \\\n--rollup.sequencerhttp=\"${OP_GETH_SEQUENCER_HTTP}\" \\\n--rollup.halt=major \\\n--op-network=\"${OP_NODE_NETWORK}\" \\\n--port=\"${P2P_PORT}\" \\\n--rollup.disabletxpoolgossip=true \\\n--state.scheme=path\n\nKillMode=process\nKillSignal=SIGINT\nTimeoutStopSec=90\nRestart=on-failure\nRestartSec=10s\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=op-geth\n\n[Install]\nWantedBy=multi-user.target\n```\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경해주세요.\n\n# 5. 로그 보존을 위한 rsyslog 구성 파일 생성\n\n## 5-1. op-node rsyslog 구성 파일\n\n```js\n$ sudo touch /etc/rsyslog.d/24-op-node.conf\n$ sudo vim /etc/rsyslog.d/24-op-node.conf\n```\n\n<div class=\"content-ad\"></div>\n\n아래 설정을 붙여넣고 저장하세요.\n\n```js\nif $programname == 'op-node' then /var/log/op-node.log\nif $programname == 'op-node' then ~\n```\n\n## 5-2. op-geth rsyslog 구성 파일\n\n<div class=\"content-ad\"></div>\n\n\n$ sudo touch /etc/rsyslog.d/25-op-geth.conf\n$ sudo vim /etc/rsyslog.d/25-op-geth.conf\n\n\n참고:\n선호하는 파일 이름으로 변경해주세요.\n\n다음 설정을 붙여넣고 저장하세요.\n\n\nif $programname == 'op-geth' then /var/log/op-geth.log\nif $programname == 'op-geth' then ~\n\n\n<div class=\"content-ad\"></div>\n\n## 5-3. rsyslog 데몬 재시작\n\n```js\n$ sudo systemctl restart rsyslog\n```\n\n## 6. 로그 회전 구성 파일 생성\n\n로그를 회전하지 않으면 많은 디스크 공간을 사용하므로 로그 회전을 설정해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```shell\n$ sudo touch /etc/logrotate.d/op-client\n$ sudo vim /etc/logrotate.d/op-client\n```\n\n노트:\n원하시는 이름으로 파일 이름을 변경하세요.\n\n다음 설정을 붙여넣고 저장하세요.\n\n```shell\n/var/log/op-node.log\n/var/log/op-geth.log\n{\n        rotate 4\n        weekly\n        missingok\n        notifempty\n        compress\n        delaycompress\n        sharedscripts\n        postrotate\n                [ -x /usr/lib/rsyslog/rsyslog-rotate ] && /usr/lib/rsyslog/rsyslog-rotate || true\n        endscript\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 7. 옵티미즘 노드 실행하기\n\n축하합니다! 드디어 옵티미즘 노드를 실행할 시간이 왔습니다.\n\n## 7-1. op-node 실행\n\n<div class=\"content-ad\"></div>\n\n```js\n$ sudo systemctl enable op-node\n$ sudo systemctl start op-node\n$ sudo systemctl status -l op-node\n● op-node.service - Optimistic Node Client\n     Loaded: loaded (/etc/systemd/system/op-node.service; disabled; vendor preset: enabled)\n     Active: active (running) since Wed 2024-05-08 20:32:32 JST; 16h ago\n   Main PID: 259669 (op-node)\n      Tasks: 16 (limit: 18542)\n     Memory: 786.9M\n     CGroup: /system.slice/op-node.service\n             └─259669 /usr/bin/op-node\n```\n\n## 7–2. op-geth 실행하기\n\n```js\n$ sudo systemctl enable op-geth\n$ sudo systemctl start op-geth\n$ sudo systemctl status -l op-geth\n● op-geth.service - Optimism Go-ethereum client\n     Loaded: loaded (/etc/systemd/system/op-geth.service; disabled; vendor preset: enabled)\n     Active: active (running) since Wed 2024-05-08 20:36:22 JST; 16h ago\n   Main PID: 259742 (op-geth)\n      Tasks: 37 (limit: 18542)\n     Memory: 13.8G\n     CGroup: /system.slice/op-geth.service\n             └─259742 /usr/bin/op-geth --datadir=/home/ethereum/data --verbosity=3 --http --http.corsdomain=* --http.vhosts=* --http>\n```\n\n## 7–3. 로그 확인하기\n  \n\n<div class=\"content-ad\"></div>\n\n다음 명령어를 사용하여 로그를 확인할 수 있어요:\n\n```js\n$ sudo tail -f /var/log/op-geth.log\n$ sudo tail -f /var/log/op-node.log\n```\n\n성공적으로 실행하면, op-node와 op-geth에서 다음과 같은 로그가 기록될 거예요:\n\n- Left (op-node), Right (op-geth)\n\n<div class=\"content-ad\"></div>\n\n\n![image 1](/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_1.png)\n\nRoughly within 20 hours, op-geth will complete syncing with snap mode, as shown in the following image.\n\n![image 2](/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_2.png)\n\n- Synced Example\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*YTH6tEbhxERWqcUMkOsJxw.gif\" />\n## 7-4. 동기화 여부 확인\n\n다음 명령어를 사용하여 공개 Optimism 노드 블록 번호와 귀하의 Optimism 노드 블록 번호를 비교할 수 있습니다.\n\n- 공개 Optimism 노드에서 최신 블록 번호 가져오기\n\n<div class=\"content-ad\"></div>\n\n\n```js\n$ curl -sX POST -H \"Content-Type: application/json\" \\\n-d '{\"jsonrpc\": \"2.0\", \"method\": \"eth_blockNumber\", \"params\": [], \"id\":1}' \\\nhttps://mainnet.optimism.io/ \\\n| jq -r \".result\" | printf \"%d\\n\" $(cat -)\n```\n\n- 로컬 노드에서 최신 블록 번호 가져오기\n\n```js\n$ curl -sX POST -H \"Content-Type: application/json\" \\\n-d '{\"jsonrpc\": \"2.0\", \"method\": \"eth_blockNumber\", \"params\": [], \"id\":1}' \\\nhttp://localhost:8545/ \\\n| jq -r \".result\" | printf \"%d\\n\" $(cat -)\n```\n\n- 출력 예시\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_3.png\" />\n\n# 첨부 1: 데이터 축소 시나리오\n\n만약 노드가 제대로 중지되지 않거나 갑작스럽게 정전이 발생하면 데이터가 손상될 수 있습니다. 데이터 디렉토리를 삭제하여 깨끗한 상태로 다시 시작할 수 있습니다.\n\n```js\n$ sudo systemctl stop op-node\n$ sudo systemctl stop op-geth\n$ cd ~\n$ rm -Rf ./data\n$ mkdir ./data\n$ sudo systemctl start op-node\n$ sudo systemctl start op-geth\n```\n\n<div class=\"content-ad\"></div>\n\n# 부록 2: 사용자 정의\n\nOptimism 환경 변수를 기반으로 사용자 정의를 원하시는 경우, Optimism 노드 구성 참조를 참고하십시오.\n\n# 부록 3: CPU, 메모리 및 디스크 사용률\n\n## A3–1. CPU 사용량\n\n<div class=\"content-ad\"></div>\n\nRock 5B에서 작동하는 Rockchip RK3588은 비용 효율적이고 겸손한 8코어 CPU입니다. 스냅 동기화 모드를 사용하는 Optimism 노드는 최대 사용량이 800%인 RK3588의 용량을 200%에서 300% 소비합니다.\n\n참고:\n이 글을 쓴 기본 노드보다 CPU를 더 많이 사용합니다.\n\n```js\n$ top -p $(pgrep op-geth)  -p $(pgrep op-node)\n```\n\n<img src=\"/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n## A3-2. 메모리 사용량\n\n```js\n$ free -h\n              total        used        free      shared  buff/cache   available\nMem:           15Gi       7.2Gi       498Mi       8.0Mi       7.7Gi       8.0Gi\nSwap:            0B          0B          0B\n```\n\n## A3-3. 디스크 사용량\n\n지금은 2024년 5월 16일이며, --state.scheme=path 옵션을 사용한 스냅 동기화 모드는 지금까지 404 GB만 소비되었습니다. 따라서 1 TB 미만의 SSD로도 노드를 실행할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n$ du -sh ~/data\n404G    /home/ethereum/data\n\n\n# 소감\n\n옵티미즘 노드를 Docker 없이 구축해주신 여정에 대해 감사드립니다. 옵티미즘 노드 설치는 많은 단계가 필요하지만, 도커 환경보다는 더 많은 사용자 정의가 제공됩니다. 동일한 L1 노드나 다른 L2, L3 솔루션에서 실행하더라도 각 포트 설정을 유연하게 변경할 수 있습니다. 이 설정들에 대한 오류를 발견하거나 개선 제안이 있으시면 소중한 피드백 주시기를 부탁드리며, 더 나은 분산화를 위해 개선사항을 지속적으로 반영할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_0.png"},"coverImage":"/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_0.png","tag":["Tech"],"readingTime":13},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_0.png\" alt=\"Optimism node\"></p>\n<p>Optimism 노드를 설치하는 것은 매우 간단합니다. 다른 슈퍼체인과 달리 많은 설정이 기본값으로 설정되어 있기 때문입니다.</p>\n<p>그래서 Docker 없이 스냅 동기화 모드로 Optimism 노드를 실행하는 방법을 설명하겠습니다. \"Docker 없이 베이스 노드 실행하기: 파트 2\"에서 파생된 글입니다.</p>\n<p>본 문서에서는 다음과 같은 설정을 하게 됩니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li><code>/etc/environment</code>에 환경 변수 설정하기</li>\n<li>op-node 및 op-geth용 systemd 파일 생성하기</li>\n<li>op-node 및 op-geth 로그를 보존하기 위한 rsyslog 구성 파일 생성하기</li>\n<li>op-node 및 op-geth용 로그 회전 파일 생성하기</li>\n</ul>\n<h1>1. op-node 및 op-geth 설치하기</h1>\n<p>다음 단계로 진행하기 전에 \"Running Base Node without Docker: Part 1\" 글을 참고하여 op-geth와 op-node를 설치해야 합니다.</p>\n<h1>2. <code>/etc/environment</code>에 Optimism 노드 환경 변수 추가 및 데이터 디렉토리 생성</h1>\n<div class=\"content-ad\"></div>\n<h2>2–1. 당신의 노드에 <code>/etc/environment</code> 파일에 다음 템플릿을 추가해주세요.</h2>\n<pre><code class=\"hljs language-js\">##########################\n#### <span class=\"hljs-variable constant_\">OPTIMISM</span> <span class=\"hljs-variable constant_\">SETTING</span> ####\n##########################\n<span class=\"hljs-variable constant_\">OP_GETH_SEQUENCER_HTTP</span>=<span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//mainnet-sequencer.optimism.io</span>\n# [필수] 선호하는 <span class=\"hljs-variable constant_\">L1</span> 노드 <span class=\"hljs-variable constant_\">RPC</span> <span class=\"hljs-variable constant_\">URL</span>로 변경해주세요:\n<span class=\"hljs-variable constant_\">OP_NODE_L1_ETH_RPC</span>=[귀하의 <span class=\"hljs-variable constant_\">L1</span> <span class=\"hljs-variable constant_\">ETH</span> <span class=\"hljs-variable constant_\">RPC</span>]\n# [필수] 선호하는 <span class=\"hljs-variable constant_\">L1</span> <span class=\"hljs-variable constant_\">CL</span> 비컨 엔드포인트로 변경해주세요:\n<span class=\"hljs-variable constant_\">OP_NODE_L1_BEACON</span>=[귀하의 <span class=\"hljs-variable constant_\">L1</span> <span class=\"hljs-variable constant_\">BEACON</span> <span class=\"hljs-variable constant_\">RPC</span>]\n# [필수] 공용 <span class=\"hljs-variable constant_\">IP</span> 주소로 변경해주세요:\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_ADVERTISE_IP</span>=[귀하의 공용 <span class=\"hljs-variable constant_\">IP</span> 주소]\n<span class=\"hljs-variable constant_\">OP_NODE_BETA_EXTRA_NETWORKS</span>=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-variable constant_\">OP_NODE_L2_ENGINE_AUTH</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data/engine-auth-jwt\n<span class=\"hljs-variable constant_\">OP_NODE_L2_ENGINE_RPC</span>=<span class=\"hljs-attr\">ws</span>:<span class=\"hljs-comment\">//localhost:8551</span>\n<span class=\"hljs-variable constant_\">OP_NODE_LOG_LEVEL</span>=info\n<span class=\"hljs-variable constant_\">OP_NODE_METRICS_ADDR</span>=<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-variable constant_\">OP_NODE_METRICS_ENABLED</span>=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-variable constant_\">OP_NODE_METRICS_PORT</span>=<span class=\"hljs-number\">7300</span>\n<span class=\"hljs-variable constant_\">OP_NODE_NETWORK</span>=op-mainnet\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_LISTEN_IP</span>=<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_LISTEN_TCP_PORT</span>=<span class=\"hljs-number\">9001</span>\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_LISTEN_UDP_PORT</span>=<span class=\"hljs-number\">9001</span>\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_PRIV_PATH</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data/opnode_p2p_priv.<span class=\"hljs-property\">txt</span>\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_DISCOVERY_PATH</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data/opnode_discovery_db\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_PEERSTORE_PATH</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data/opnode_peerstore_db\n<span class=\"hljs-variable constant_\">OP_NODE_RPC_ADDR</span>=<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-variable constant_\">OP_NODE_RPC_PORT</span>=<span class=\"hljs-number\">8547</span>\n<span class=\"hljs-variable constant_\">OP_NODE_SNAPSHOT_LOG</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data/op-node-snapshot-log\n<span class=\"hljs-variable constant_\">OP_NODE_VERIFIER_L1_CONFS</span>=<span class=\"hljs-number\">4</span>\n<span class=\"hljs-variable constant_\">OP_NODE_ROLLUP_LOAD_PROTOCOL_VERSIONS</span>=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-variable constant_\">OP_NODE_SYNCMODE</span>=execution-layer\n# <span class=\"hljs-variable constant_\">OP_NODE_L1_TRUST_RPC</span> 는 더 빠른 동기화를 지원하지만, 사용 시 반드시 <span class=\"hljs-variable constant_\">L1</span> <span class=\"hljs-variable constant_\">RPC</span> 노드가 완전히 신뢰성 있는 경우에만 사용해야 합니다.\n# 또한 이는 저장 증명을 지원하지 않는 <span class=\"hljs-title class_\">Erigon</span>과 같은 클라이언트와 함께 작동할 수 있도록 합니다:\n<span class=\"hljs-variable constant_\">OP_NODE_L1_TRUST_RPC</span>=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-variable constant_\">GETH_DATA_DIR</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data\n<span class=\"hljs-variable constant_\">VERBOSITY</span>=<span class=\"hljs-number\">3</span>\n<span class=\"hljs-variable constant_\">RPC_PORT</span>=<span class=\"hljs-number\">8545</span>\n<span class=\"hljs-variable constant_\">WS_PORT</span>=<span class=\"hljs-number\">8546</span>\n<span class=\"hljs-variable constant_\">AUTHRPC_PORT</span>=<span class=\"hljs-number\">8551</span>\n<span class=\"hljs-variable constant_\">METRICS_PORT</span>=<span class=\"hljs-number\">6060</span>\n<span class=\"hljs-variable constant_\">HOST_IP</span>=<span class=\"hljs-string\">\"0.0.0.0\"</span>\n<span class=\"hljs-variable constant_\">P2P_PORT</span>=<span class=\"hljs-number\">30304</span>\n<span class=\"hljs-variable constant_\">OP_GETH_GCMODE</span>=full\n<span class=\"hljs-variable constant_\">OP_GETH_SYNCMODE</span>=snap\n</code></pre>\n<h2>2–2. 당신의 네트워크에 대한 값 변경하기</h2>\n<p>아래 세 가지 변수를 변경해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<p>OP_NODE_L1_ETH_RPC: 귀하의 L1 노드 (이더리움) RPC URL 또는 L1 PRC 노드 공급 업체 URL입니다.</p>\n<ul>\n<li>예시 (게속 RPC)</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">OP_NODE_L1_ETH_RPC</span>=<span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//192.168.1.2:8545</span>\n</code></pre>\n<p>OP_NODE_L1_BEACON: 귀하의 L1 노드 (이더리움) Beacon RPC URL 또는 L1 Beacon 노드 공급 업체 URL입니다.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>예시 (등대 비콘 rpc)</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">OP_NODE_L1_BEACON</span>=<span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//192.168.1.2:5052</span>\n</code></pre>\n<p>OP_NODE_P2P_ADVERTISE_IP: 공용 IP 주소(개인 IP 주소가 아닙니다!)</p>\n<ul>\n<li>예시</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">OP_NODE_P2P_ADVERTISE_IP</span>=<span class=\"hljs-number\">34.149</span><span class=\"hljs-number\">.58</span><span class=\"hljs-number\">.211</span>\n</code></pre>\n<p>참고:\n공개 IP 주소를 모르는 경우 노드에서 다음 명령을 사용하여 찾을 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">$ curl <span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//api.ipify.org</span>\n<span class=\"hljs-number\">34.149</span><span class=\"hljs-number\">.58</span><span class=\"hljs-number\">.211</span>\n</code></pre>\n<p>(선택 사항) 다른 P2P 포트를 사용하거나 L1 RPC를 신뢰하지 않는 경우 환경에 맞게 변경해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">P2P_PORT</span>=<span class=\"hljs-number\">30304</span> # op-geth용 <span class=\"hljs-variable constant_\">P2P</span> 포트\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_LISTEN_TCP_PORT</span>=<span class=\"hljs-number\">9001</span> # op-node용 <span class=\"hljs-variable constant_\">TCP</span> <span class=\"hljs-variable constant_\">P2P</span> 수신 포트\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_LISTEN_UDP_PORT</span>=<span class=\"hljs-number\">9001</span> # op-node용 <span class=\"hljs-variable constant_\">UDP</span> <span class=\"hljs-variable constant_\">P2P</span> 수신 포트\n<span class=\"hljs-variable constant_\">OP_NODE_L1_TRUST_RPC</span>=<span class=\"hljs-literal\">true</span> # <span class=\"hljs-variable constant_\">L1</span> <span class=\"hljs-variable constant_\">RPC</span>를 신뢰하는 경우 <span class=\"hljs-literal\">true</span>로 설정합니다.\n</code></pre>\n<p>위의 변경 사항을 기반으로 예시 /etc/environment 파일은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\">sudo vim /etc/environments\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">PATH</span>=<span class=\"hljs-string\">\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\"</span>\n\n##########################\n#### <span class=\"hljs-variable constant_\">OPTIMISM</span> 설정 ####\n##########################\n<span class=\"hljs-variable constant_\">OP_GETH_SEQUENCER_HTTP</span>=<span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//mainnet-sequencer.optimism.io</span>\n# [필수] 선호하는 <span class=\"hljs-variable constant_\">L1</span> 노드 <span class=\"hljs-variable constant_\">RPC</span> <span class=\"hljs-variable constant_\">URL</span>로 교체:\n<span class=\"hljs-variable constant_\">OP_NODE_L1_ETH_RPC</span>=<span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//192.168.1.2:8545</span>\n# [필수] 선호하는 <span class=\"hljs-variable constant_\">L1</span> <span class=\"hljs-variable constant_\">CL</span> beacon 엔드포인트로 교체:\n<span class=\"hljs-variable constant_\">OP_NODE_L1_BEACON</span>=<span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//192.168.1.2:5052</span>\n# 공인 <span class=\"hljs-variable constant_\">IP</span> 주소로 교체\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_ADVERTISE_IP</span>=<span class=\"hljs-number\">34.149</span><span class=\"hljs-number\">.58</span><span class=\"hljs-number\">.211</span>\n<span class=\"hljs-variable constant_\">OP_NODE_BETA_EXTRA_NETWORKS</span>=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-variable constant_\">OP_NODE_L2_ENGINE_AUTH</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data/engine-auth-jwt\n<span class=\"hljs-variable constant_\">OP_NODE_L2_ENGINE_RPC</span>=<span class=\"hljs-attr\">ws</span>:<span class=\"hljs-comment\">//localhost:8551</span>\n<span class=\"hljs-variable constant_\">OP_NODE_LOG_LEVEL</span>=info\n<span class=\"hljs-variable constant_\">OP_NODE_METRICS_ADDR</span>=<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-variable constant_\">OP_NODE_METRICS_ENABLED</span>=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-variable constant_\">OP_NODE_METRICS_PORT</span>=<span class=\"hljs-number\">7300</span>\n<span class=\"hljs-variable constant_\">OP_NODE_NETWORK</span>=op-mainnet\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_LISTEN_IP</span>=<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_LISTEN_TCP_PORT</span>=<span class=\"hljs-number\">9001</span>\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_LISTEN_UDP_PORT</span>=<span class=\"hljs-number\">9001</span>\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_PRIV_PATH</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data/opnode_p2p_priv.<span class=\"hljs-property\">txt</span>\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_DISCOVERY_PATH</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data/opnode_discovery_db\n<span class=\"hljs-variable constant_\">OP_NODE_P2P_PEERSTORE_PATH</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data/opnode_peerstore_db\n<span class=\"hljs-variable constant_\">OP_NODE_RPC_ADDR</span>=<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-variable constant_\">OP_NODE_RPC_PORT</span>=<span class=\"hljs-number\">8547</span>\n<span class=\"hljs-variable constant_\">OP_NODE_SNAPSHOT_LOG</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data/op-node-snapshot-log\n<span class=\"hljs-variable constant_\">OP_NODE_VERIFIER_L1_CONFS</span>=<span class=\"hljs-number\">4</span>\n<span class=\"hljs-variable constant_\">OP_NODE_ROLLUP_LOAD_PROTOCOL_VERSIONS</span>=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-variable constant_\">OP_NODE_SYNCMODE</span>=execution-layer\n\n# <span class=\"hljs-variable constant_\">OP_NODE_L1_TRUST_RPC</span>를 사용하면 더 빠른 동기화가 가능하지만, <span class=\"hljs-variable constant_\">L1</span> <span class=\"hljs-variable constant_\">RPC</span> 노드를\n# 완전히 신뢰하는 경우에만 사용해야 합니다.\n# 또한 storage proofs를 지원하지 않는 <span class=\"hljs-title class_\">Erigon</span>과 같은 클라이언트와 상호 작용하도록 합니다:\n<span class=\"hljs-variable constant_\">OP_NODE_L1_TRUST_RPC</span>=<span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-variable constant_\">OP_NODE_SYNCMODE</span>=execution-layer\n<span class=\"hljs-variable constant_\">GETH_DATA_DIR</span>=<span class=\"hljs-regexp\">/home/</span>ethereum/data\n<span class=\"hljs-variable constant_\">VERBOSITY</span>=<span class=\"hljs-number\">3</span>\n<span class=\"hljs-variable constant_\">RPC_PORT</span>=<span class=\"hljs-number\">8545</span>\n<span class=\"hljs-variable constant_\">WS_PORT</span>=<span class=\"hljs-number\">8546</span>\n<span class=\"hljs-variable constant_\">AUTHRPC_PORT</span>=<span class=\"hljs-number\">8551</span>\n<span class=\"hljs-variable constant_\">METRICS_PORT</span>=<span class=\"hljs-number\">6060</span>\n<span class=\"hljs-variable constant_\">HOST_IP</span>=<span class=\"hljs-string\">\"0.0.0.0\"</span>\n<span class=\"hljs-variable constant_\">P2P_PORT</span>=<span class=\"hljs-number\">30304</span>\n<span class=\"hljs-variable constant_\">OP_GETH_GCMODE</span>=full\n<span class=\"hljs-variable constant_\">OP_GETH_SYNCMODE</span>=snap\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>2-3. 블록체인 데이터를 보존하기 위한 data 디렉토리 생성</h2>\n<pre><code class=\"hljs language-js\">$ cd ~\n$ mkdir data\n</code></pre>\n<p>당신의 환경에 기반하여 Optimism 노드 환경 변수를 성공적으로 설정하셨습니다.</p>\n<h1>3. op-node systemd 파일 생성</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-bash\">$ sudo <span class=\"hljs-built_in\">touch</span> /etc/systemd/system/op-node.service\n$ sudo vim /etc/systemd/system/op-node.service\n</code></pre>\n<p>다음 내용을 붙여넣고 저장하세요.</p>\n<pre><code class=\"hljs language-bash\">[Unit]\nDescription=Optimistic Node Client\nAfter=network.target\n\n[Service]\nUser=ethereum\nGroup=ethereum\nEnvironment=HOME=/home/ethereum\nEnvironmentFile=/etc/environment\nType=simple\nExecStart=/usr/bin/op-node\nKillMode=process\nKillSignal=SIGINT\nTimeoutStopSec=90\nRestart=on-failure\nRestartSec=10s\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=op-node\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>op-node systemd 파일을 성공적으로 생성했습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>4. op-geth systemd 파일 만들기</h1>\n<pre><code class=\"hljs language-js\">$ sudo touch /etc/systemd/system/op-geth.<span class=\"hljs-property\">service</span>\n$ sudo vim /etc/systemd/system/op-geth.<span class=\"hljs-property\">service</span>\n</code></pre>\n<p>다음 내용을 붙여 넣고 저장하세요.</p>\n<pre><code class=\"hljs language-js\">[<span class=\"hljs-title class_\">Unit</span>]\n<span class=\"hljs-title class_\">Description</span>=옵티미즘 <span class=\"hljs-title class_\">Go</span>-이더리움 클라이언트\n<span class=\"hljs-title class_\">After</span>=network.<span class=\"hljs-property\">target</span>\n\n[<span class=\"hljs-title class_\">Service</span>]\n<span class=\"hljs-title class_\">User</span>=ethereum\n<span class=\"hljs-title class_\">Group</span>=ethereum\n<span class=\"hljs-title class_\">Environment</span>=<span class=\"hljs-variable constant_\">HOME</span>=<span class=\"hljs-regexp\">/home/</span>ethereum\n<span class=\"hljs-title class_\">EnvironmentFile</span>=<span class=\"hljs-regexp\">/etc/</span>environment\n<span class=\"hljs-title class_\">Type</span>=simple\n<span class=\"hljs-title class_\">ExecStart</span>=<span class=\"hljs-regexp\">/usr/</span>bin/op-geth --datadir=<span class=\"hljs-string\">\"${GETH_DATA_DIR}\"</span> \\\n--verbosity=<span class=\"hljs-string\">\"${VERBOSITY}\"</span> \\\n--http --http.<span class=\"hljs-property\">corsdomain</span>=<span class=\"hljs-string\">\"*\"</span> \\\n--http.<span class=\"hljs-property\">vhosts</span>=<span class=\"hljs-string\">\"*\"</span> \\\n--http.<span class=\"hljs-property\">addr</span>=<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> \\\n--http.<span class=\"hljs-property\">port</span>=<span class=\"hljs-string\">\"${RPC_PORT}\"</span> \\\n--http.<span class=\"hljs-property\">api</span>=web3,debug,eth,net,engine \\\n--authrpc.<span class=\"hljs-property\">addr</span>=<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> \\\n--authrpc.<span class=\"hljs-property\">port</span>=<span class=\"hljs-string\">\"${AUTHRPC_PORT}\"</span> \\\n--authrpc.<span class=\"hljs-property\">vhosts</span>=<span class=\"hljs-string\">\"*\"</span> \\\n--authrpc.<span class=\"hljs-property\">jwtsecret</span>=<span class=\"hljs-string\">\"${OP_NODE_L2_ENGINE_AUTH}\"</span> \\\n--ws \\\n--ws.<span class=\"hljs-property\">addr</span>=<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> \\\n--ws.<span class=\"hljs-property\">port</span>=<span class=\"hljs-string\">\"${WS_PORT}\"</span> \\\n--ws.<span class=\"hljs-property\">origins</span>=<span class=\"hljs-string\">\"*\"</span> \\\n--ws.<span class=\"hljs-property\">api</span>=debug,eth,net,engine \\\n--metrics \\\n--metrics.<span class=\"hljs-property\">addr</span>=<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> \\\n--metrics.<span class=\"hljs-property\">port</span>=<span class=\"hljs-string\">\"${METRICS_PORT}\"</span> \\\n--syncmode=<span class=\"hljs-string\">\"${OP_GETH_SYNCMODE}\"</span> \\\n--gcmode=<span class=\"hljs-string\">\"${OP_GETH_GCMODE}\"</span> \\\n--maxpeers=<span class=\"hljs-number\">100</span> \\\n--nat=<span class=\"hljs-attr\">extip</span>:${<span class=\"hljs-variable constant_\">HOST_IP</span>} \\\n--rollup.<span class=\"hljs-property\">sequencerhttp</span>=<span class=\"hljs-string\">\"${OP_GETH_SEQUENCER_HTTP}\"</span> \\\n--rollup.<span class=\"hljs-property\">halt</span>=major \\\n--op-network=<span class=\"hljs-string\">\"${OP_NODE_NETWORK}\"</span> \\\n--port=<span class=\"hljs-string\">\"${P2P_PORT}\"</span> \\\n--rollup.<span class=\"hljs-property\">disabletxpoolgossip</span>=<span class=\"hljs-literal\">true</span> \\\n--state.<span class=\"hljs-property\">scheme</span>=path\n\n<span class=\"hljs-title class_\">KillMode</span>=process\n<span class=\"hljs-title class_\">KillSignal</span>=<span class=\"hljs-variable constant_\">SIGINT</span>\n<span class=\"hljs-title class_\">TimeoutStopSec</span>=<span class=\"hljs-number\">90</span>\n<span class=\"hljs-title class_\">Restart</span>=on-failure\n<span class=\"hljs-title class_\">RestartSec</span>=10s\n<span class=\"hljs-title class_\">StandardOutput</span>=syslog\n<span class=\"hljs-title class_\">StandardError</span>=syslog\n<span class=\"hljs-title class_\">SyslogIdentifier</span>=op-geth\n\n[<span class=\"hljs-title class_\">Install</span>]\n<span class=\"hljs-title class_\">WantedBy</span>=multi-user.<span class=\"hljs-property\">target</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>테이블 태그를 마크다운 형식으로 변경해주세요.</p>\n<h1>5. 로그 보존을 위한 rsyslog 구성 파일 생성</h1>\n<h2>5-1. op-node rsyslog 구성 파일</h2>\n<pre><code class=\"hljs language-js\">$ sudo touch /etc/rsyslog.<span class=\"hljs-property\">d</span>/<span class=\"hljs-number\">24</span>-op-node.<span class=\"hljs-property\">conf</span>\n$ sudo vim /etc/rsyslog.<span class=\"hljs-property\">d</span>/<span class=\"hljs-number\">24</span>-op-node.<span class=\"hljs-property\">conf</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>아래 설정을 붙여넣고 저장하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> $programname == <span class=\"hljs-string\">'op-node'</span> then /<span class=\"hljs-keyword\">var</span>/log/op-node.<span class=\"hljs-property\">log</span>\n<span class=\"hljs-keyword\">if</span> $programname == <span class=\"hljs-string\">'op-node'</span> then ~\n</code></pre>\n<h2>5-2. op-geth rsyslog 구성 파일</h2>\n<div class=\"content-ad\"></div>\n<p>$ sudo touch /etc/rsyslog.d/25-op-geth.conf\n$ sudo vim /etc/rsyslog.d/25-op-geth.conf</p>\n<p>참고:\n선호하는 파일 이름으로 변경해주세요.</p>\n<p>다음 설정을 붙여넣고 저장하세요.</p>\n<p>if $programname == 'op-geth' then /var/log/op-geth.log\nif $programname == 'op-geth' then ~</p>\n<div class=\"content-ad\"></div>\n<h2>5-3. rsyslog 데몬 재시작</h2>\n<pre><code class=\"hljs language-js\">$ sudo systemctl restart rsyslog\n</code></pre>\n<h2>6. 로그 회전 구성 파일 생성</h2>\n<p>로그를 회전하지 않으면 많은 디스크 공간을 사용하므로 로그 회전을 설정해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">sudo <span class=\"hljs-built_in\">touch</span> /etc/logrotate.d/op-client</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">sudo vim /etc/logrotate.d/op-client</span>\n</code></pre>\n<p>노트:\n원하시는 이름으로 파일 이름을 변경하세요.</p>\n<p>다음 설정을 붙여넣고 저장하세요.</p>\n<pre><code class=\"hljs language-shell\">/var/log/op-node.log\n/var/log/op-geth.log\n{\n        rotate 4\n        weekly\n        missingok\n        notifempty\n        compress\n        delaycompress\n        sharedscripts\n        postrotate\n                [ -x /usr/lib/rsyslog/rsyslog-rotate ] &#x26;&#x26; /usr/lib/rsyslog/rsyslog-rotate || true\n        endscript\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>7. 옵티미즘 노드 실행하기</h1>\n<p>축하합니다! 드디어 옵티미즘 노드를 실행할 시간이 왔습니다.</p>\n<h2>7-1. op-node 실행</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">$ sudo systemctl enable op-node\n$ sudo systemctl start op-node\n$ sudo systemctl status -l op-node\n● op-node.<span class=\"hljs-property\">service</span> - <span class=\"hljs-title class_\">Optimistic</span> <span class=\"hljs-title class_\">Node</span> <span class=\"hljs-title class_\">Client</span>\n     <span class=\"hljs-title class_\">Loaded</span>: loaded (<span class=\"hljs-regexp\">/etc/</span>systemd/system/op-node.<span class=\"hljs-property\">service</span>; disabled; vendor <span class=\"hljs-attr\">preset</span>: enabled)\n     <span class=\"hljs-title class_\">Active</span>: active (running) since <span class=\"hljs-title class_\">Wed</span> <span class=\"hljs-number\">2024</span>-<span class=\"hljs-number\">05</span>-<span class=\"hljs-number\">08</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">32</span>:<span class=\"hljs-number\">32</span> <span class=\"hljs-variable constant_\">JST</span>; 16h ago\n   <span class=\"hljs-title class_\">Main</span> <span class=\"hljs-attr\">PID</span>: <span class=\"hljs-number\">259669</span> (op-node)\n      <span class=\"hljs-title class_\">Tasks</span>: <span class=\"hljs-number\">16</span> (<span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">18542</span>)\n     <span class=\"hljs-title class_\">Memory</span>: <span class=\"hljs-number\">786.</span>9M\n     <span class=\"hljs-title class_\">CGroup</span>: <span class=\"hljs-regexp\">/system.slice/</span>op-node.<span class=\"hljs-property\">service</span>\n             └─<span class=\"hljs-number\">259669</span> /usr/bin/op-node\n</code></pre>\n<h2>7–2. op-geth 실행하기</h2>\n<pre><code class=\"hljs language-js\">$ sudo systemctl enable op-geth\n$ sudo systemctl start op-geth\n$ sudo systemctl status -l op-geth\n● op-geth.<span class=\"hljs-property\">service</span> - <span class=\"hljs-title class_\">Optimism</span> <span class=\"hljs-title class_\">Go</span>-ethereum client\n     <span class=\"hljs-title class_\">Loaded</span>: loaded (<span class=\"hljs-regexp\">/etc/</span>systemd/system/op-geth.<span class=\"hljs-property\">service</span>; disabled; vendor <span class=\"hljs-attr\">preset</span>: enabled)\n     <span class=\"hljs-title class_\">Active</span>: active (running) since <span class=\"hljs-title class_\">Wed</span> <span class=\"hljs-number\">2024</span>-<span class=\"hljs-number\">05</span>-<span class=\"hljs-number\">08</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">22</span> <span class=\"hljs-variable constant_\">JST</span>; 16h ago\n   <span class=\"hljs-title class_\">Main</span> <span class=\"hljs-attr\">PID</span>: <span class=\"hljs-number\">259742</span> (op-geth)\n      <span class=\"hljs-title class_\">Tasks</span>: <span class=\"hljs-number\">37</span> (<span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">18542</span>)\n     <span class=\"hljs-title class_\">Memory</span>: <span class=\"hljs-number\">13.</span>8G\n     <span class=\"hljs-title class_\">CGroup</span>: <span class=\"hljs-regexp\">/system.slice/</span>op-geth.<span class=\"hljs-property\">service</span>\n             └─<span class=\"hljs-number\">259742</span> /usr/bin/op-geth --datadir=<span class=\"hljs-regexp\">/home/</span>ethereum/data --verbosity=<span class=\"hljs-number\">3</span> --http --http.<span class=\"hljs-property\">corsdomain</span>=* --http.<span class=\"hljs-property\">vhosts</span>=* --http>\n</code></pre>\n<h2>7–3. 로그 확인하기</h2>\n<div class=\"content-ad\"></div>\n<p>다음 명령어를 사용하여 로그를 확인할 수 있어요:</p>\n<pre><code class=\"hljs language-js\">$ sudo tail -f /<span class=\"hljs-keyword\">var</span>/log/op-geth.<span class=\"hljs-property\">log</span>\n$ sudo tail -f /<span class=\"hljs-keyword\">var</span>/log/op-node.<span class=\"hljs-property\">log</span>\n</code></pre>\n<p>성공적으로 실행하면, op-node와 op-geth에서 다음과 같은 로그가 기록될 거예요:</p>\n<ul>\n<li>Left (op-node), Right (op-geth)</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_1.png\" alt=\"image 1\"></p>\n<p>Roughly within 20 hours, op-geth will complete syncing with snap mode, as shown in the following image.</p>\n<p><img src=\"/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_2.png\" alt=\"image 2\"></p>\n<ul>\n<li>Synced Example</li>\n</ul>\n<div class=\"content-ad\"></div>\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*YTH6tEbhxERWqcUMkOsJxw.gif\">\n## 7-4. 동기화 여부 확인\n<p>다음 명령어를 사용하여 공개 Optimism 노드 블록 번호와 귀하의 Optimism 노드 블록 번호를 비교할 수 있습니다.</p>\n<ul>\n<li>공개 Optimism 노드에서 최신 블록 번호 가져오기</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">$ curl -sX <span class=\"hljs-variable constant_\">POST</span> -H <span class=\"hljs-string\">\"Content-Type: application/json\"</span> \\\n-d <span class=\"hljs-string\">'{\"jsonrpc\": \"2.0\", \"method\": \"eth_blockNumber\", \"params\": [], \"id\":1}'</span> \\\n<span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//mainnet.optimism.io/ \\</span>\n| jq -r <span class=\"hljs-string\">\".result\"</span> | printf <span class=\"hljs-string\">\"%d\\n\"</span> $(cat -)\n</code></pre>\n<ul>\n<li>로컬 노드에서 최신 블록 번호 가져오기</li>\n</ul>\n<pre><code class=\"hljs language-js\">$ curl -sX <span class=\"hljs-variable constant_\">POST</span> -H <span class=\"hljs-string\">\"Content-Type: application/json\"</span> \\\n-d <span class=\"hljs-string\">'{\"jsonrpc\": \"2.0\", \"method\": \"eth_blockNumber\", \"params\": [], \"id\":1}'</span> \\\n<span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//localhost:8545/ \\</span>\n| jq -r <span class=\"hljs-string\">\".result\"</span> | printf <span class=\"hljs-string\">\"%d\\n\"</span> $(cat -)\n</code></pre>\n<ul>\n<li>출력 예시</li>\n</ul>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_3.png\">\n<h1>첨부 1: 데이터 축소 시나리오</h1>\n<p>만약 노드가 제대로 중지되지 않거나 갑작스럽게 정전이 발생하면 데이터가 손상될 수 있습니다. 데이터 디렉토리를 삭제하여 깨끗한 상태로 다시 시작할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">$ sudo systemctl stop op-node\n$ sudo systemctl stop op-geth\n$ cd ~\n$ rm -<span class=\"hljs-title class_\">Rf</span> ./data\n$ mkdir ./data\n$ sudo systemctl start op-node\n$ sudo systemctl start op-geth\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>부록 2: 사용자 정의</h1>\n<p>Optimism 환경 변수를 기반으로 사용자 정의를 원하시는 경우, Optimism 노드 구성 참조를 참고하십시오.</p>\n<h1>부록 3: CPU, 메모리 및 디스크 사용률</h1>\n<h2>A3–1. CPU 사용량</h2>\n<div class=\"content-ad\"></div>\n<p>Rock 5B에서 작동하는 Rockchip RK3588은 비용 효율적이고 겸손한 8코어 CPU입니다. 스냅 동기화 모드를 사용하는 Optimism 노드는 최대 사용량이 800%인 RK3588의 용량을 200%에서 300% 소비합니다.</p>\n<p>참고:\n이 글을 쓴 기본 노드보다 CPU를 더 많이 사용합니다.</p>\n<pre><code class=\"hljs language-js\">$ top -p $(pgrep op-geth)  -p $(pgrep op-node)\n</code></pre>\n<img src=\"/assets/img/2024-05-17-RunningOptimismNodewithoutDocker_4.png\">\n<div class=\"content-ad\"></div>\n<h2>A3-2. 메모리 사용량</h2>\n<pre><code class=\"hljs language-js\">$ free -h\n              total        used        free      shared  buff/cache   available\n<span class=\"hljs-title class_\">Mem</span>:           15Gi       <span class=\"hljs-number\">7.</span>2Gi       498Mi       <span class=\"hljs-number\">8.</span>0Mi       <span class=\"hljs-number\">7.</span>7Gi       <span class=\"hljs-number\">8.</span>0Gi\n<span class=\"hljs-title class_\">Swap</span>:            0B          0B          0B\n</code></pre>\n<h2>A3-3. 디스크 사용량</h2>\n<p>지금은 2024년 5월 16일이며, --state.scheme=path 옵션을 사용한 스냅 동기화 모드는 지금까지 404 GB만 소비되었습니다. 따라서 1 TB 미만의 SSD로도 노드를 실행할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>$ du -sh ~/data\n404G    /home/ethereum/data</p>\n<h1>소감</h1>\n<p>옵티미즘 노드를 Docker 없이 구축해주신 여정에 대해 감사드립니다. 옵티미즘 노드 설치는 많은 단계가 필요하지만, 도커 환경보다는 더 많은 사용자 정의가 제공됩니다. 동일한 L1 노드나 다른 L2, L3 솔루션에서 실행하더라도 각 포트 설정을 유연하게 변경할 수 있습니다. 이 설정들에 대한 오류를 발견하거나 개선 제안이 있으시면 소중한 피드백 주시기를 부탁드리며, 더 나은 분산화를 위해 개선사항을 지속적으로 반영할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}