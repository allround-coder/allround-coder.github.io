{"pageProps":{"post":{"title":"Docker 이미지를 빌드하고 GitHub Actions를 사용하여 Docker Hub에 푸시하기","description":"","date":"2024-05-17 03:47","slug":"2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions","content":"\n\n<img src=\"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_0.png\" />\n\n여기서는 GitHub actions workflow를 사용하여 도커 이미지를 빌드하고 도커 허브에 푸시하는 방법을 알아보겠습니다.\n\n## 단계 1: 도커 파일 만들기\n\n- 도커 이미지를 빌드하려면 도커 파일을 만들어야 합니다.\n- 이 튜토리얼에서는 매우 기본적인 도커 파일을 만들고 해당 파일을 사용하여 이미지를 빌드할 것입니다.\n- Dockerfile을 만들고 아래 코드를 추가하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n# Docker Hub에서 공식 Apache HTTP 서버 이미지를 사용하세요\nFROM httpd:latest\n\n# 호스팅을 위해 사용자 정의 'index.html'을 Apache 서버의 루트 디렉토리에 복사하세요\nCOPY ./index.html /usr/local/apache2/htdocs/\n```\n\n- 위의 코드는 다음 단계에서 생성할 사용자 정의 index.html을 사용하여 Apache 이미지 위에 이미지를 빌드합니다.\n\n## 단계 2: index.html 파일 생성\n\n- index.html 파일을 생성하고 아래 코드를 추가하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    <p>This is a simple HTML page served from an Apache server in a Docker container.</p>\n</body>\n</html>\n```\n\n### 단계 3: 도커 허브 자격 증명 저장\n\n- 도커 이미지를 도커 허브로 푸시하려면 먼저 도커 허브에 로그인해야 합니다. 따라서 해당 자격 증명을 시크릿에 저장해야 합니다.\n- 귀하의 저장소에서 자격 증명을 시크릿에 저장하세요.\n\n![이미지](/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_1.png)\n  \n\n<div class=\"content-ad\"></div>\n\n## 단계 4: GitHub 액션 워크플로우 생성하기\n\n- 이제 .github/workflow/image-build.yml 파일을 만들고 아래 코드를 추가하세요.\n\n```js\nname: Build Docker Image\non:\n  push:\n    branches:\n      - main\njobs:\n    build:\n      name: push docker image to docker hub\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: login to docker hub\n          id: docker-hub\n          env:\n            username: ${secrets.DOCKERHUB_USERNAME}\n            password: ${secrets.DOCKERHUB_PASSWORD}\n          run: |\n            docker login -u $username -p $password \n        - name: build the docker image\n          id: build-docker-image\n          run: |\n            ls -la \n            docker build . -f Dockerfile -t dhruvin30/demo-image-test:latest\n        - name: push the docker image\n          id: push-docker-image\n          run: docker push ${secrets.DOCKERHUB_USERNAME}/demo-image-test:latest\n```\n\n- 위 워크플로우는 main 브랜치에 커밋할 때마다 트리거됩니다.\n- 워크플로우는 secrets(사용자 이름 및 비밀번호)를 사용하여 docker hub에 로그인합니다.\n\n<div class=\"content-ad\"></div>\n\n## 단계 5: 코드를 커밋합니다\n\n- 이제 코드를 GitHub 저장소에 커밋하고 커밋하자마자 워크플로가 실행되는 것을 볼 수 있습니다.\n\n![이미지](/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_2.png)\n\n## 단계 6: 변경 사항 확인하기\n\n<div class=\"content-ad\"></div>\n\n- 한 번 Workflow가 성공적으로 실행되면 이미지가 도커 허브에 표시될 것입니다.\n\n![이미지](/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_3.png)\n\n오늘은 여기까지입니다. GitHub Actions를 사용하여 도커 이미지를 빌드하고 푸시하는 방법을 배웠습니다. 이제 코드를 수정하고 실험해보세요.\n\nLinkedIn에서 팔로우해주세요.\n\n<div class=\"content-ad\"></div>\n\n더 이런 이야기를 보고 싶다면 팔로우해 주세요 😁","ogImage":{"url":"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_0.png"},"coverImage":"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_0.png\">\n<p>여기서는 GitHub actions workflow를 사용하여 도커 이미지를 빌드하고 도커 허브에 푸시하는 방법을 알아보겠습니다.</p>\n<h2>단계 1: 도커 파일 만들기</h2>\n<ul>\n<li>도커 이미지를 빌드하려면 도커 파일을 만들어야 합니다.</li>\n<li>이 튜토리얼에서는 매우 기본적인 도커 파일을 만들고 해당 파일을 사용하여 이미지를 빌드할 것입니다.</li>\n<li>Dockerfile을 만들고 아래 코드를 추가하세요.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Docker</span> <span class=\"hljs-title class_\">Hub</span>에서 공식 <span class=\"hljs-title class_\">Apache</span> <span class=\"hljs-variable constant_\">HTTP</span> 서버 이미지를 사용하세요\n<span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">httpd</span>:latest\n\n# 호스팅을 위해 사용자 정의 <span class=\"hljs-string\">'index.html'</span>을 <span class=\"hljs-title class_\">Apache</span> 서버의 루트 디렉토리에 복사하세요\n<span class=\"hljs-variable constant_\">COPY</span> ./index.<span class=\"hljs-property\">html</span> /usr/local/apache2/htdocs/\n</code></pre>\n<ul>\n<li>위의 코드는 다음 단계에서 생성할 사용자 정의 index.html을 사용하여 Apache 이미지 위에 이미지를 빌드합니다.</li>\n</ul>\n<h2>단계 2: index.html 파일 생성</h2>\n<ul>\n<li>index.html 파일을 생성하고 아래 코드를 추가하세요.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Hello World<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, World!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>This is a simple HTML page served from an Apache server in a Docker container.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></span>\n</code></pre>\n<h3>단계 3: 도커 허브 자격 증명 저장</h3>\n<ul>\n<li>도커 이미지를 도커 허브로 푸시하려면 먼저 도커 허브에 로그인해야 합니다. 따라서 해당 자격 증명을 시크릿에 저장해야 합니다.</li>\n<li>귀하의 저장소에서 자격 증명을 시크릿에 저장하세요.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_1.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<h2>단계 4: GitHub 액션 워크플로우 생성하기</h2>\n<ul>\n<li>이제 .github/workflow/image-build.yml 파일을 만들고 아래 코드를 추가하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">name</span>: <span class=\"hljs-title class_\">Build</span> <span class=\"hljs-title class_\">Docker</span> <span class=\"hljs-title class_\">Image</span>\n<span class=\"hljs-attr\">on</span>:\n  <span class=\"hljs-attr\">push</span>:\n    <span class=\"hljs-attr\">branches</span>:\n      - main\n<span class=\"hljs-attr\">jobs</span>:\n    <span class=\"hljs-attr\">build</span>:\n      <span class=\"hljs-attr\">name</span>: push docker image to docker hub\n      runs-<span class=\"hljs-attr\">on</span>: ubuntu-latest\n      <span class=\"hljs-attr\">steps</span>:\n        - <span class=\"hljs-attr\">uses</span>: actions/checkout@v2\n        - <span class=\"hljs-attr\">name</span>: login to docker hub\n          <span class=\"hljs-attr\">id</span>: docker-hub\n          <span class=\"hljs-attr\">env</span>:\n            <span class=\"hljs-attr\">username</span>: ${secrets.<span class=\"hljs-property\">DOCKERHUB_USERNAME</span>}\n            <span class=\"hljs-attr\">password</span>: ${secrets.<span class=\"hljs-property\">DOCKERHUB_PASSWORD</span>}\n          <span class=\"hljs-attr\">run</span>: |\n            docker login -u $username -p $password \n        - <span class=\"hljs-attr\">name</span>: build the docker image\n          <span class=\"hljs-attr\">id</span>: build-docker-image\n          <span class=\"hljs-attr\">run</span>: |\n            ls -la \n            docker build . -f <span class=\"hljs-title class_\">Dockerfile</span> -t dhruvin30/demo-image-<span class=\"hljs-attr\">test</span>:latest\n        - <span class=\"hljs-attr\">name</span>: push the docker image\n          <span class=\"hljs-attr\">id</span>: push-docker-image\n          <span class=\"hljs-attr\">run</span>: docker push ${secrets.<span class=\"hljs-property\">DOCKERHUB_USERNAME</span>}/demo-image-<span class=\"hljs-attr\">test</span>:latest\n</code></pre>\n<ul>\n<li>위 워크플로우는 main 브랜치에 커밋할 때마다 트리거됩니다.</li>\n<li>워크플로우는 secrets(사용자 이름 및 비밀번호)를 사용하여 docker hub에 로그인합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h2>단계 5: 코드를 커밋합니다</h2>\n<ul>\n<li>이제 코드를 GitHub 저장소에 커밋하고 커밋하자마자 워크플로가 실행되는 것을 볼 수 있습니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_2.png\" alt=\"이미지\"></p>\n<h2>단계 6: 변경 사항 확인하기</h2>\n<div class=\"content-ad\"></div>\n<ul>\n<li>한 번 Workflow가 성공적으로 실행되면 이미지가 도커 허브에 표시될 것입니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-17-BuildPushtheDockerimagetoDockerHubusingGitHubActions_3.png\" alt=\"이미지\"></p>\n<p>오늘은 여기까지입니다. GitHub Actions를 사용하여 도커 이미지를 빌드하고 푸시하는 방법을 배웠습니다. 이제 코드를 수정하고 실험해보세요.</p>\n<p>LinkedIn에서 팔로우해주세요.</p>\n<div class=\"content-ad\"></div>\n<p>더 이런 이야기를 보고 싶다면 팔로우해 주세요 😁</p>\n</body>\n</html>\n"},"__N_SSG":true}