{"pageProps":{"post":{"title":"자바스크립트 - 온라인 소스로부터 XML 데이터 구문 분석하기","description":"","date":"2024-06-20 01:25","slug":"2024-06-20-JavaScriptParsingXMLDataFromOnlineSources","content":"\n\n\n![이미지](/assets/img/2024-06-20-JavaScriptParsingXMLDataFromOnlineSources_0.png)\n\n웹에서 XML 데이터를 가져오고 추출하는 능력은 웹 개발자에게 중요한 기술입니다. XML은 구조화된 데이터를 교환하는 데 널리 사용되는 형식이며, 많은 온라인 서비스와 API가 이 형식으로 데이터를 제공합니다.\n\nJavaScript로 XML 데이터를 가져오는 현대적인 방법 중 하나는 fetch() API를 사용하는 것입니다. fetch() 함수를 사용하면 이전의 XMLHttpRequest 객체보다 더 간결하고 promise 기반으로 HTTP 요청을 보내고 XML 내용을 검색할 수 있습니다.\n\nfetch()를 사용하여 XML 데이터를 가져오면 JavaScript에서 DOMParser 객체와 같은 도구를 제공하여 XML을 DOM 구조로 구문 분석할 수 있으며, 이를 통해 필요한 정보를 추출할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n# [1] JavaScript 프로젝트 생성하기\n\nReplit 플랫폼에서 만들어보세요\n\n![](/assets/img/2024-06-20-JavaScriptParsingXMLDataFromOnlineSources_1.png)\n\n# [2] HTML과 JavaScript 코드 편집하기\n\n<div class=\"content-ad\"></div>\n\n파일 index.html:\n\n```js\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>replit</title>\n  <link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n\n<body>\n  <div id=\"divOutput\"></div>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>\n```\n\n위 HTML 코드는 웹 페이지의 기본 구조를 설정합니다. 이는 문자 인코딩, 뷰포트, 제목을 지정하는 `head` 섹션과 \"style.css\"라는 외부 CSS 파일에 대한 링크를 포함하고 있습니다. 또한, 동적 콘텐츠를 담을 컨테이너로 사용될 ID가 \"divOutput\"인 `div` 요소와 페이지 로드 시 실행될 \"script.js\"라는 외부 JavaScript 파일을 포함하는 `script` 요소를 포함한 `body` 섹션을 포함합니다. `!DOCTYPE html` 선언은 웹 브라우저에게 이 문서가 HTML5 문서임을 알려주며, 전체 코드는 클라이언트 측 스크립팅 및 JavaScript 파일을 사용한 동적 콘텐츠 조작을 포함한 웹 페이지의 기초를 설정합니다.\n\n파일 script.js:\n\n<div class=\"content-ad\"></div>\n\n```js\nvar myUrl = 'https://catalog.ldc.upenn.edu/desc/addenda/LDC2010T05.xml';\n// CORS 문제를 처리하기 위해 cors-anywhere 서비스를 사용함\nvar proxy = 'https://cors-anywhere.herokuapp.com/';\n\n// 요청 실행\nfetch(proxy + myUrl)\n  .then(response => response.text())\n  .then(xmlString => parseXML(xmlString))\n  .catch(error => console.error(error));\n\n// XML 데이터 파싱\nfunction parseXML(xmlString) {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(xmlString, 'application/xml');\n\n  // 요소에 액세스\n  const posts = doc.getElementsByTagName('Post');\n  for (let i = 0; i < posts.length; i++) {\n    const post = posts[i];\n    const postClass = post.getAttribute('class');\n    const postUser = post.getAttribute('user');\n    const postText = post.textContent.trim();\n\n    console.log('게시물 클래스:', postClass);\n    console.log('게시물 사용자:', postUser);\n    console.log('게시물 텍스트:', postText);\n\n    const terminals = post.getElementsByTagName('t');\n    for (let j = 0; j < terminals.length; j++) {\n      const terminal = terminals[j];\n      const pos = terminal.getAttribute('pos');\n      const word = terminal.getAttribute('word');\n      console.log(`POS: ${pos}, 단어: ${word}`);\n      const divOutput = document.getElementById('divOutput');\n      if (divOutput) {\n        divOutput.innerHTML += `POS: ${pos}, 단어: ${word}<br>`;\n      }\n    }\n    console.log();\n  }\n}\n```\n\n제공된 코드는 \"https://catalog.ldc.upenn.edu/desc/addenda/LDC2010T05.xml\"에 위치한 XML 문서를 가져와 내용을 파싱하는 JavaScript 솔루션을 보여줍니다. 이 데이터는 NPS Internet Chatroom Corpus의 일부입니다.\n\n위의 JavaScript 코드는 fetch() API를 사용하여 HTTP 요청을 수행하고, 잠재적인 Cross-Origin Resource Sharing (CORS) 문제를 처리하기 위해 \"https://cors-anywhere.herokuapp.com/\"의 프록시 URL을 활용합니다. fetch 요청에서의 응답은 텍스트 형식으로 변환되며, XML 문자열이 가정적인 parseXML() 함수에 전달되어 추가 처리됩니다. 코드에는 또한 fetch나 파싱 작업 중 발생할 수 있는 문제를 기록하기 위한 오류 처리도 포함되어 있습니다.\n\nparseXML() 함수는 이전 코드 스니펫에서 가져온 XML 데이터를 파싱하는 역할을 합니다. 먼저 DOMParser 객체의 새 인스턴스를 생성하고, parseFromString() 메서드를 사용하여 XML 문자열을 Document 객체로 파싱합니다. 함수는 이후 파싱된 문서에서 모든 'Post' 요소를 검색하고, 각각의 'class', 'user' 및 텍스트 내용을 추출하여 콘솔에 기록합니다. 다음으로, 함수는 각 'Post' 요소 내부의 모든 't' (터미널) 요소를 가져와, 'pos' (품사) 및 'word' 속성을 추출하고, 이 정보를 콘솔에 기록하고 동시에 'divOutput' ID를 가진 HTML 요소에 추가합니다. 이 과정을 통해 함수는 XML 데이터를 파싱하고 관련 정보를 추출하여 이를 콘솔과 웹 페이지에 표시할 수 있게 됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n결과:\n\n<img src=\"/assets/img/2024-06-20-JavaScriptParsingXMLDataFromOnlineSources_2.png\" />\n\n# [3] Replit Code:\n\n코드를 사용하지 않는 방법을 선호하는 경우:\n\n<div class=\"content-ad\"></div>\n\n- https://jsonformatter.org/xml-parser\n- https://codebeautify.org/xml-parser-online\n\n# 🤓","ogImage":{"url":"/assets/img/2024-06-20-JavaScriptParsingXMLDataFromOnlineSources_0.png"},"coverImage":"/assets/img/2024-06-20-JavaScriptParsingXMLDataFromOnlineSources_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-20-JavaScriptParsingXMLDataFromOnlineSources_0.png\" alt=\"이미지\"></p>\n<p>웹에서 XML 데이터를 가져오고 추출하는 능력은 웹 개발자에게 중요한 기술입니다. XML은 구조화된 데이터를 교환하는 데 널리 사용되는 형식이며, 많은 온라인 서비스와 API가 이 형식으로 데이터를 제공합니다.</p>\n<p>JavaScript로 XML 데이터를 가져오는 현대적인 방법 중 하나는 fetch() API를 사용하는 것입니다. fetch() 함수를 사용하면 이전의 XMLHttpRequest 객체보다 더 간결하고 promise 기반으로 HTTP 요청을 보내고 XML 내용을 검색할 수 있습니다.</p>\n<p>fetch()를 사용하여 XML 데이터를 가져오면 JavaScript에서 DOMParser 객체와 같은 도구를 제공하여 XML을 DOM 구조로 구문 분석할 수 있으며, 이를 통해 필요한 정보를 추출할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>[1] JavaScript 프로젝트 생성하기</h1>\n<p>Replit 플랫폼에서 만들어보세요</p>\n<p><img src=\"/assets/img/2024-06-20-JavaScriptParsingXMLDataFromOnlineSources_1.png\" alt=\"\"></p>\n<h1>[2] HTML과 JavaScript 코드 편집하기</h1>\n<div class=\"content-ad\"></div>\n<p>파일 index.html:</p>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n&#x3C;html>\n\n&#x3C;head>\n  &#x3C;meta charset=\"utf-8\">\n  &#x3C;meta name=\"viewport\" content=\"width=device-width\">\n  &#x3C;title>replit&#x3C;/title>\n  &#x3C;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" />\n&#x3C;/head>\n\n&#x3C;body>\n  &#x3C;div id=\"divOutput\">&#x3C;/div>\n  &#x3C;script src=\"script.js\">&#x3C;/script>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<p>위 HTML 코드는 웹 페이지의 기본 구조를 설정합니다. 이는 문자 인코딩, 뷰포트, 제목을 지정하는 <code>head</code> 섹션과 \"style.css\"라는 외부 CSS 파일에 대한 링크를 포함하고 있습니다. 또한, 동적 콘텐츠를 담을 컨테이너로 사용될 ID가 \"divOutput\"인 <code>div</code> 요소와 페이지 로드 시 실행될 \"script.js\"라는 외부 JavaScript 파일을 포함하는 <code>script</code> 요소를 포함한 <code>body</code> 섹션을 포함합니다. <code>!DOCTYPE html</code> 선언은 웹 브라우저에게 이 문서가 HTML5 문서임을 알려주며, 전체 코드는 클라이언트 측 스크립팅 및 JavaScript 파일을 사용한 동적 콘텐츠 조작을 포함한 웹 페이지의 기초를 설정합니다.</p>\n<p>파일 script.js:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> myUrl = <span class=\"hljs-string\">'https://catalog.ldc.upenn.edu/desc/addenda/LDC2010T05.xml'</span>;\n<span class=\"hljs-comment\">// CORS 문제를 처리하기 위해 cors-anywhere 서비스를 사용함</span>\n<span class=\"hljs-keyword\">var</span> proxy = <span class=\"hljs-string\">'https://cors-anywhere.herokuapp.com/'</span>;\n\n<span class=\"hljs-comment\">// 요청 실행</span>\n<span class=\"hljs-title function_\">fetch</span>(proxy + myUrl)\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =></span> response.<span class=\"hljs-title function_\">text</span>())\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">xmlString</span> =></span> <span class=\"hljs-title function_\">parseXML</span>(xmlString))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error));\n\n<span class=\"hljs-comment\">// XML 데이터 파싱</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">parseXML</span>(<span class=\"hljs-params\">xmlString</span>) {\n  <span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DOMParser</span>();\n  <span class=\"hljs-keyword\">const</span> doc = parser.<span class=\"hljs-title function_\">parseFromString</span>(xmlString, <span class=\"hljs-string\">'application/xml'</span>);\n\n  <span class=\"hljs-comment\">// 요소에 액세스</span>\n  <span class=\"hljs-keyword\">const</span> posts = doc.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">'Post'</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; posts.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">const</span> post = posts[i];\n    <span class=\"hljs-keyword\">const</span> postClass = post.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">'class'</span>);\n    <span class=\"hljs-keyword\">const</span> postUser = post.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">'user'</span>);\n    <span class=\"hljs-keyword\">const</span> postText = post.<span class=\"hljs-property\">textContent</span>.<span class=\"hljs-title function_\">trim</span>();\n\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'게시물 클래스:'</span>, postClass);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'게시물 사용자:'</span>, postUser);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'게시물 텍스트:'</span>, postText);\n\n    <span class=\"hljs-keyword\">const</span> terminals = post.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">'t'</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &#x3C; terminals.<span class=\"hljs-property\">length</span>; j++) {\n      <span class=\"hljs-keyword\">const</span> terminal = terminals[j];\n      <span class=\"hljs-keyword\">const</span> pos = terminal.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">'pos'</span>);\n      <span class=\"hljs-keyword\">const</span> word = terminal.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">'word'</span>);\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`POS: <span class=\"hljs-subst\">${pos}</span>, 단어: <span class=\"hljs-subst\">${word}</span>`</span>);\n      <span class=\"hljs-keyword\">const</span> divOutput = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'divOutput'</span>);\n      <span class=\"hljs-keyword\">if</span> (divOutput) {\n        divOutput.<span class=\"hljs-property\">innerHTML</span> += <span class=\"hljs-string\">`POS: <span class=\"hljs-subst\">${pos}</span>, 단어: <span class=\"hljs-subst\">${word}</span>&#x3C;br>`</span>;\n      }\n    }\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>();\n  }\n}\n</code></pre>\n<p>제공된 코드는 \"<a href=\"https://catalog.ldc.upenn.edu/desc/addenda/LDC2010T05.xml%22%EC%97%90\" rel=\"nofollow\" target=\"_blank\">https://catalog.ldc.upenn.edu/desc/addenda/LDC2010T05.xml\"에</a> 위치한 XML 문서를 가져와 내용을 파싱하는 JavaScript 솔루션을 보여줍니다. 이 데이터는 NPS Internet Chatroom Corpus의 일부입니다.</p>\n<p>위의 JavaScript 코드는 fetch() API를 사용하여 HTTP 요청을 수행하고, 잠재적인 Cross-Origin Resource Sharing (CORS) 문제를 처리하기 위해 \"<a href=\"https://cors-anywhere.herokuapp.com/%22%EC%9D%98\" rel=\"nofollow\" target=\"_blank\">https://cors-anywhere.herokuapp.com/\"의</a> 프록시 URL을 활용합니다. fetch 요청에서의 응답은 텍스트 형식으로 변환되며, XML 문자열이 가정적인 parseXML() 함수에 전달되어 추가 처리됩니다. 코드에는 또한 fetch나 파싱 작업 중 발생할 수 있는 문제를 기록하기 위한 오류 처리도 포함되어 있습니다.</p>\n<p>parseXML() 함수는 이전 코드 스니펫에서 가져온 XML 데이터를 파싱하는 역할을 합니다. 먼저 DOMParser 객체의 새 인스턴스를 생성하고, parseFromString() 메서드를 사용하여 XML 문자열을 Document 객체로 파싱합니다. 함수는 이후 파싱된 문서에서 모든 'Post' 요소를 검색하고, 각각의 'class', 'user' 및 텍스트 내용을 추출하여 콘솔에 기록합니다. 다음으로, 함수는 각 'Post' 요소 내부의 모든 't' (터미널) 요소를 가져와, 'pos' (품사) 및 'word' 속성을 추출하고, 이 정보를 콘솔에 기록하고 동시에 'divOutput' ID를 가진 HTML 요소에 추가합니다. 이 과정을 통해 함수는 XML 데이터를 파싱하고 관련 정보를 추출하여 이를 콘솔과 웹 페이지에 표시할 수 있게 됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>결과:</p>\n<img src=\"/assets/img/2024-06-20-JavaScriptParsingXMLDataFromOnlineSources_2.png\">\n<h1>[3] Replit Code:</h1>\n<p>코드를 사용하지 않는 방법을 선호하는 경우:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li><a href=\"https://jsonformatter.org/xml-parser\" rel=\"nofollow\" target=\"_blank\">https://jsonformatter.org/xml-parser</a></li>\n<li><a href=\"https://codebeautify.org/xml-parser-online\" rel=\"nofollow\" target=\"_blank\">https://codebeautify.org/xml-parser-online</a></li>\n</ul>\n<h1>🤓</h1>\n</body>\n</html>\n"},"__N_SSG":true}