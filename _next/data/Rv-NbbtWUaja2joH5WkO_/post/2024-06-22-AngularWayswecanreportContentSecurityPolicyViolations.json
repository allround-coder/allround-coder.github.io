{"pageProps":{"post":{"title":"Angular Content Security Policy 위반 사항 보고하는 방법 ","description":"","date":"2024-06-22 14:55","slug":"2024-06-22-AngularWayswecanreportContentSecurityPolicyViolations","content":"\n\n귀하의 애플리케이션에서 발생한 CSP 위반 사항을 추적하여 해당 보고서를 응용 프로그램 서버로 전송하여 분석할 수 있습니다. 이를 위해 Content-Security-Policy 헤더의 report-to 또는 report-uri 지시문을 사용하면 됩니다.\n\nreport-uri은 더 이상 권장되지 않으며 report-to가 이를 대체하기 위해 도입되었습니다. 그러나 모든 브라우저에서 report-to가 아직 지원되지 않으므로 호환성을 위해 두 지시문을 모두 사용하는 것이 좋습니다.\n\n아래 예시를 참고해 보세요. 여기서는 report-uri 지시문을 추가하여 브라우저에게 위반 보고서를 JSON 문서 형식으로 작성하여 HTTP POST 요청을 사용해 https://csrfexample.com:3443/reportViolations로 보내도록 지시하고 있습니다:\n\n```js\n“Content-Security-Policy”:”default-src ‘self’;report-uri https://csrfexample.com:3443/reportViolations\"\n```\n\n<div class=\"content-ad\"></div>\n\n이제 CSP를 위반해보고 위반 보고서가 어떻게 전송되는지 살펴보겠습니다. 내 Angular 앱은 https://innocent.csrfexample.com:4200에서 호스팅되어 있습니다.\n\nAppComponent에서 https://csrfexample.com:3443에서 이미지를 로드하고 있습니다. 이는 default-src 지시어를 위반합니다. default-src 지시어는 'self'로 설정되어 있기 때문에 응용 프로그램에서 https://innocent.csrfexample.com:4200과 다른 출처에서 리소스가로드되는 경우 위반으로 간주됩니다.\n\n```js\n<img src=\"https://csrfexample.com:3443/getImage\">\n```\n\nAngular.json의 \"serve\" 섹션에 \"headers\" 속성을 아래와 같이 설정했습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n“serve”: {\n“builder”: “@angular-devkit/build-angular:dev-server”,\n“options”: {\n“sslKey”: “./self-signed-with-no-passphrase/secureAngularExample.key”,\n“sslCert”: “./self-signed-with-no-passphrase/secureAngularExample.crt”,\n“ssl”: true\n},\n“configurations”: {\n“production”: {\n“browserTarget”: “csrfInAngular:build:production”\n},\n“development”: {\n“browserTarget”: “csrfInAngular:build:development”,\n“headers”: {\n“Content-Security-Policy”:”default-src ‘self’;report-uri https://csrfexample.com:3443/reportViolations\"\n}\n}\n},\n“defaultConfiguration”: “development”\n}\n```\n\n저는 https://csrfexample.com:3443에 호스팅된 Node Express 서버를 만들었고, 위반 데이터를받기 위한 POST 경로를 만들었습니다.\n\n```js\nrouter.post(‘/reportViolations’,(req,res,next)=>{\nres.status(200).send(“위반 사항이 성공적으로 수신되었습니다”)\n})\n```\n\n브라우저에서 https://innocent.csrfexample.com:4200을 입력하면, https://csrfexample.com:3443/getImage로의 http GET 요청이 CSP에 의해 차단되었음을 확인할 수 있으며, https://csrfexample.com:3443/reportViolations으로 3개의 http POST 요청을 보게 됩니다. 각 POST 요청에는 개별 위반 사항의 보고서가 포함되어 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n지금 3개의 위반 보고서 내용을 확인해보겠습니다.\n\n정책을 시행하지 않고 CSP 위반 사항을 모니터링할 수 있나요?\n\n네! Content-Security-Policy-Report-Only 헤더를 사용하면 정책을 강제하지 않고 모니터링함으로써 정책을 실험할 수 있습니다.\n\nangular.json 파일의 \"serve\" 섹션 아래 headers 속성을 아래와 같이 수정해봅시다:\n\n<div class=\"content-ad\"></div>\n\n```js\n“serve”: {\n“builder”: “@angular-devkit/build-angular:dev-server”,\n“options”: {\n“sslKey”: “./self-signed-with-no-passphrase/secureAngularExample.key”,\n“sslCert”: “./self-signed-with-no-passphrase/secureAngularExample.crt”,\n“ssl”: true\n},\n“configurations”: {\n“production”: {\n“browserTarget”: “csrfInAngular:build:production”\n},\n“development”: {\n“browserTarget”: “csrfInAngular:build:development”,\n“headers”: {\n \"Content-Security-Policy-Report-Only\":\"default-src 'self';report-uri https://csrfexample.com:3443/reportViolations\"\n}\n}\n},\n“defaultConfiguration”: “development”\n}\n```\n\n애플리케이션을 재시작하여 변경 사항을 확인해 봅시다.\n\n아래 이미지가 성공적으로 로드된 것을 관찰할 수 있습니다. CSP default-src 지시문이 강제되지 않았지만 이 지시문과 관련된 위반 사항이 서버에 성공적으로 게시되었습니다. 아래 2번째 스크린샷에서 확인할 수 있습니다.\n\n애플리케이션 서버가 위반 보고서 처리 책임을 다른 신뢰할 수 있는 시스템에 맡길 수 있을까요?\n\n<div class=\"content-ad\"></div>\n\n그래요! https://report-uri.com/ 이 도움을 줄 거에요. 테스트 목적으로 무료 계정을 만들고 계정별 보고 URL을 사용해 위반 보고서를 게시할 수 있어요.\n\n지금까지 한 모든 것은 그대로 유지돼요. 변하는 것은 보고서를 게시할 URL 뿐이죠. 보안 정책을 강제하고 싶든 원하지 않든, 이 방법은 여러분에게 완벽히 도움이 될 거에요.\n\n위반 보고서를 보내기 위해 report-uri.com 서버로 3개의 HTTP POST 요청을 확인해보세요.\n\n대시보드에 나타나는 CSP 위반 보고서는 이렇게 생겼어요.","ogImage":{"url":"/assets/img/2024-06-22-AngularWayswecanreportContentSecurityPolicyViolations_0.png"},"coverImage":"/assets/img/2024-06-22-AngularWayswecanreportContentSecurityPolicyViolations_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>귀하의 애플리케이션에서 발생한 CSP 위반 사항을 추적하여 해당 보고서를 응용 프로그램 서버로 전송하여 분석할 수 있습니다. 이를 위해 Content-Security-Policy 헤더의 report-to 또는 report-uri 지시문을 사용하면 됩니다.</p>\n<p>report-uri은 더 이상 권장되지 않으며 report-to가 이를 대체하기 위해 도입되었습니다. 그러나 모든 브라우저에서 report-to가 아직 지원되지 않으므로 호환성을 위해 두 지시문을 모두 사용하는 것이 좋습니다.</p>\n<p>아래 예시를 참고해 보세요. 여기서는 report-uri 지시문을 추가하여 브라우저에게 위반 보고서를 JSON 문서 형식으로 작성하여 HTTP POST 요청을 사용해 <a href=\"https://csrfexample.com:3443/reportViolations%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">https://csrfexample.com:3443/reportViolations로</a> 보내도록 지시하고 있습니다:</p>\n<pre><code class=\"hljs language-js\">“<span class=\"hljs-title class_\">Content</span>-<span class=\"hljs-title class_\">Security</span>-<span class=\"hljs-title class_\">Policy</span>”:”<span class=\"hljs-keyword\">default</span>-src ‘self’;report-uri <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//csrfexample.com:3443/reportViolations\"</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 CSP를 위반해보고 위반 보고서가 어떻게 전송되는지 살펴보겠습니다. 내 Angular 앱은 <a href=\"https://innocent.csrfexample.com:4200%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">https://innocent.csrfexample.com:4200에서</a> 호스팅되어 있습니다.</p>\n<p>AppComponent에서 <a href=\"https://csrfexample.com:3443%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">https://csrfexample.com:3443에서</a> 이미지를 로드하고 있습니다. 이는 default-src 지시어를 위반합니다. default-src 지시어는 'self'로 설정되어 있기 때문에 응용 프로그램에서 <a href=\"https://innocent.csrfexample.com:4200%EA%B3%BC\" rel=\"nofollow\" target=\"_blank\">https://innocent.csrfexample.com:4200과</a> 다른 출처에서 리소스가로드되는 경우 위반으로 간주됩니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;img src=<span class=\"hljs-string\">\"https://csrfexample.com:3443/getImage\"</span>>\n</code></pre>\n<p>Angular.json의 \"serve\" 섹션에 \"headers\" 속성을 아래와 같이 설정했습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">“serve”: {\n“builder”: “@angular-devkit/build-<span class=\"hljs-attr\">angular</span>:dev-server”,\n“options”: {\n“sslKey”: “./self-signed-<span class=\"hljs-keyword\">with</span>-no-passphrase/secureAngularExample.<span class=\"hljs-property\">key</span>”,\n“sslCert”: “./self-signed-<span class=\"hljs-keyword\">with</span>-no-passphrase/secureAngularExample.<span class=\"hljs-property\">crt</span>”,\n“ssl”: <span class=\"hljs-literal\">true</span>\n},\n“configurations”: {\n“production”: {\n“browserTarget”: “<span class=\"hljs-attr\">csrfInAngular</span>:<span class=\"hljs-attr\">build</span>:production”\n},\n“development”: {\n“browserTarget”: “<span class=\"hljs-attr\">csrfInAngular</span>:<span class=\"hljs-attr\">build</span>:development”,\n“headers”: {\n“<span class=\"hljs-title class_\">Content</span>-<span class=\"hljs-title class_\">Security</span>-<span class=\"hljs-title class_\">Policy</span>”:”<span class=\"hljs-keyword\">default</span>-src ‘self’;report-uri <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//csrfexample.com:3443/reportViolations\"</span>\n}\n}\n},\n“defaultConfiguration”: “development”\n}\n</code></pre>\n<p>저는 <a href=\"https://csrfexample.com:3443%EC%97%90\" rel=\"nofollow\" target=\"_blank\">https://csrfexample.com:3443에</a> 호스팅된 Node Express 서버를 만들었고, 위반 데이터를받기 위한 POST 경로를 만들었습니다.</p>\n<pre><code class=\"hljs language-js\">router.<span class=\"hljs-title function_\">post</span>(‘/reportViolations’,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res,next</span>)=></span>{\nres.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>).<span class=\"hljs-title function_\">send</span>(“위반 사항이 성공적으로 수신되었습니다”)\n})\n</code></pre>\n<p>브라우저에서 <a href=\"https://innocent.csrfexample.com:4200%EC%9D%84\" rel=\"nofollow\" target=\"_blank\">https://innocent.csrfexample.com:4200을</a> 입력하면, <a href=\"https://csrfexample.com:3443/getImage%EB%A1%9C%EC%9D%98\" rel=\"nofollow\" target=\"_blank\">https://csrfexample.com:3443/getImage로의</a> http GET 요청이 CSP에 의해 차단되었음을 확인할 수 있으며, <a href=\"https://csrfexample.com:3443/reportViolations%EC%9C%BC%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">https://csrfexample.com:3443/reportViolations으로</a> 3개의 http POST 요청을 보게 됩니다. 각 POST 요청에는 개별 위반 사항의 보고서가 포함되어 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>지금 3개의 위반 보고서 내용을 확인해보겠습니다.</p>\n<p>정책을 시행하지 않고 CSP 위반 사항을 모니터링할 수 있나요?</p>\n<p>네! Content-Security-Policy-Report-Only 헤더를 사용하면 정책을 강제하지 않고 모니터링함으로써 정책을 실험할 수 있습니다.</p>\n<p>angular.json 파일의 \"serve\" 섹션 아래 headers 속성을 아래와 같이 수정해봅시다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">“serve”: {\n“builder”: “@angular-devkit/build-<span class=\"hljs-attr\">angular</span>:dev-server”,\n“options”: {\n“sslKey”: “./self-signed-<span class=\"hljs-keyword\">with</span>-no-passphrase/secureAngularExample.<span class=\"hljs-property\">key</span>”,\n“sslCert”: “./self-signed-<span class=\"hljs-keyword\">with</span>-no-passphrase/secureAngularExample.<span class=\"hljs-property\">crt</span>”,\n“ssl”: <span class=\"hljs-literal\">true</span>\n},\n“configurations”: {\n“production”: {\n“browserTarget”: “<span class=\"hljs-attr\">csrfInAngular</span>:<span class=\"hljs-attr\">build</span>:production”\n},\n“development”: {\n“browserTarget”: “<span class=\"hljs-attr\">csrfInAngular</span>:<span class=\"hljs-attr\">build</span>:development”,\n“headers”: {\n <span class=\"hljs-string\">\"Content-Security-Policy-Report-Only\"</span>:<span class=\"hljs-string\">\"default-src 'self';report-uri https://csrfexample.com:3443/reportViolations\"</span>\n}\n}\n},\n“defaultConfiguration”: “development”\n}\n</code></pre>\n<p>애플리케이션을 재시작하여 변경 사항을 확인해 봅시다.</p>\n<p>아래 이미지가 성공적으로 로드된 것을 관찰할 수 있습니다. CSP default-src 지시문이 강제되지 않았지만 이 지시문과 관련된 위반 사항이 서버에 성공적으로 게시되었습니다. 아래 2번째 스크린샷에서 확인할 수 있습니다.</p>\n<p>애플리케이션 서버가 위반 보고서 처리 책임을 다른 신뢰할 수 있는 시스템에 맡길 수 있을까요?</p>\n<div class=\"content-ad\"></div>\n<p>그래요! <a href=\"https://report-uri.com/\" rel=\"nofollow\" target=\"_blank\">https://report-uri.com/</a> 이 도움을 줄 거에요. 테스트 목적으로 무료 계정을 만들고 계정별 보고 URL을 사용해 위반 보고서를 게시할 수 있어요.</p>\n<p>지금까지 한 모든 것은 그대로 유지돼요. 변하는 것은 보고서를 게시할 URL 뿐이죠. 보안 정책을 강제하고 싶든 원하지 않든, 이 방법은 여러분에게 완벽히 도움이 될 거에요.</p>\n<p>위반 보고서를 보내기 위해 report-uri.com 서버로 3개의 HTTP POST 요청을 확인해보세요.</p>\n<p>대시보드에 나타나는 CSP 위반 보고서는 이렇게 생겼어요.</p>\n</body>\n</html>\n"},"__N_SSG":true}