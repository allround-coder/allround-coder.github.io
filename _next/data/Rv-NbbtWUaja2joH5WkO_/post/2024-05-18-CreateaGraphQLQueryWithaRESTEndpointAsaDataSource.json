{"pageProps":{"post":{"title":"REST 엔드포인트를 데이터 소스로 사용하는 GraphQL 쿼리 작성하기","description":"","date":"2024-05-18 21:26","slug":"2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource","content":"\n\n![image](/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_0.png)\n\n이 짧은 기사에서는 RESTful 엔드포인트에서 데이터를 가져오는 간단한 GraphQL 쿼리를 어떻게 생성할 수 있는지 살펴보겠습니다. 이를 위해 Node.js와 Apollo Server를 사용할 것입니다.\n\n이 기사에서는 예시로 간단한 사용자 리소스인 Users를 살펴보겠습니다. 이 글의 목표는 apollo GraphQL 서버를 사용하여 기존 REST 엔드포인트를 데이터 소스로 활용하는 쿼리를 작성하는 데 필요한 단계와 구성을 간략히 개요로 설명하는 것뿐입니다.\n\n## PlainEnglish.io에서 더 많은 내용 확인 가능합니다.\n\n<div class=\"content-ad\"></div>\n\n우리 무료 주간 뉴스레터를 구독해보세요. Twitter, LinkedIn, YouTube, 그리고 Discord에서도 팔로우해주세요.\n\n## 당신의 기술 창업품을 알림과 채용을 확대하려고 하세요? Circuit을 확인해보세요.\n\n이것이 응담하는 클라이언트에게 응답에서 투영되는 필드를 더 많은 제어를 제공하고 싶을 때 유용할 수 있습니다.\n\n자, 더 이상 말이 필요없으니 시작해봅시다:\n\n<div class=\"content-ad\"></div>\n\n# GraphQL 프로젝트 초기화:\n\n새 디렉토리를 gserver로 만들고 cd gserver라고 입력하여 디렉토리를 변경해 봅시다.\n\n이제 yarn init -y로 프로젝트를 초기화해 봅시다.\n\n## Dependencies 추가:\n\n<div class=\"content-ad\"></div>\n\n저희가 주요하게 사용하는 의존성은 graphQL과 apollo-server 패키지입니다. 그러니 이들을 프로젝트에 추가해봅시다:\n\n```js\nyarn add apollo-server graphql\n```\n\n개발 중에 서버가 변경 사항이 생길 때 자동으로 다시 시작되도록 하려면 nodemon을 개발 의존성으로 추가해봅시다:\n\n```js\nyarn add --dev nodemon\n```\n\n<div class=\"content-ad\"></div>\n\n지금 우리의 package.json 파일은 다음과 같이 보일 것입니다:\n\n```js\n{\n  \"name\": \"gserver\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"type\": \"module\",\n  \"dependencies\": {\n    \"apollo-server\": \"^3.10.2\",\n    \"graphql\": \"^16.6.0\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^2.0.19\"\n  }\n}\n```\n\n참고: 저는 패키지 매니저로 Yarn을 사용하고 있지만, npm을 사용해도 괜찮습니다.\n\n## index 파일을 생성하세요:\n\n<div class=\"content-ad\"></div>\n\n프로젝트의 루트에 index.js라는 파일을 만들어주세요. 이 파일은 우리의 GraphQL 서버의 진입점이 될 것입니다.\n\n```js\n// index.js\nimport { ApolloServer } from \"apollo-server\";\nconst server = new ApolloServer();\nserver\n  .listen({port: process.env.PORT || 5000})\n  .then(({url})=> console.log(`서버 실행 중 : ${url}`));\n```\n\n기본적인 GraphQL 서버가 설정되었으니, package.json에 nodemon을 사용하여 개발 모드에서 시작하는 스크립트를 추가해봅시다:\n\n```js\n{\n...기존의 package.json 내용\n\"scripts\": {\n    \"dev\": \"nodemon index.js\"\n  }\n ... 남은 내용\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 사용자 스키마 생성하기:\n\n스키마는 우리가 GraphQL에서 쿼리와 뮤테이션을 위한 유형과 그 하위 구조를 정의하는 방법입니다.\n\n프로젝트 루트에 schema라는 디렉토리를 빠르게 생성해봅시다.\n\n스키마를 정의하기 위해 gql이라는 특별한 태그를 사용할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n사용자 스키마는 다음과 같이 정의될 수 있습니다:\n\n```js\n// schema/user.js\nimport { gql } from \"apollo-server\";\nexport const User = gql`\n  type User {\n    id: ID!,\n    email: String,\n    name: String\n  }\n``` \n\nUUID를 위해 우리는 graphQL에서 ID라는 특별한 타입을 사용하며, '!' 표시는 값이 null일 수 없음을 의미합니다.\n\n따라서 User라는 타입을 정의하고 사용자 객체에 대한 스키마를 생성했습니다.\n\n<div class=\"content-ad\"></div>\n\n# 사용자 쿼리 정의:\n\nGraphQL에서는 데이터를 가져오는 쿼리(REST 용어로는 GET 요청과 동일하다고 볼 수 있음)를 정의할 때 잘 정의된 스키마가 필요합니다. 이 예시에서는 기본 사용자 서비스 엔드포인트에서 모든 사용자를 가져오고자 합니다. 그러므로 모든 사용자를 가져오기 위한 쿼리를 정의해봅시다:\n\n```js\n// schema/query.js\nimport { gql } from \"apollo-server\";\nexport const Query = gql`\n  type Query {\n    users: [User]\n}\n```\n\n사용자 쿼리로 여러 사용자를 검색할 것이기 때문에 그 유형을 이전에 스키마에서 정의한 User 유형의 배열로 지정합니다.\n\n<div class=\"content-ad\"></div>\n\n편의를 위해 스키마 디렉토리 아래에 인덱스 파일을 만들고 정의된 스키마를 다음과 같이 노출해봅시다:\n\n```js\n// schema/index.js\nexport { User } from './user.js';\nexport { Query } from './query.js';\n```\n\n# 서버 실행:\n\n저희가 정의한 스키마를 포함하는 서버의 진입점인 index.js를 수정해봅시다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// index.js\nimport { ApolloServer } from \"apollo-server\";\nimport { Query, User } from \"./schema/index.js\";\nconst server = new ApolloServer({typeDefs:[Query,User]});\nserver\n  .listen({ port: process.env.PORT || 5000 })\n  .then(({ url }) => console.log(`gserver at : ${url}`));\n```\n\n이제 터미널에서 `yarn dev`라고 입력해보세요:\n\n<img src=\"/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_1.png\" />\n\n브라우저를 http://localhost:5000 에서 열어볼 때, 모든게 잘 되었다면 다음 화면을 보게 됩니다:\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_2.png\" />\n\n\"Query Your Server\" 버튼을 클릭하면 아폴로 스튜디오로 이동하게 되는데, 여기서 정의된 스키마를 찾을 수 있어요:\n\n<img src=\"/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_3.png\" />\n\n아직 많이 할 수 있는 것은 없어요. 그래서 다음 섹션에서 사용자 정보를 가져오기 위한 리졸버를 추가해볼게요.\n\n<div class=\"content-ad\"></div>\n\n# 사용자 RESTful 서비스:\n\n저희는 현재 포트 3000에서 실행 중인 사용자 서비스가 있습니다. 현재 localhost:3000/users 엔드포인트에 대한 다음 응답을 반환합니다 :\n\n![이미지](/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_4.png)\n\n이것은 express 서버에서 실행 중인 전형적인 RESTful 엔드포인트입니다. 이미 구현되어 있으므로 많은 걱정할 필요가 없습니다. 이 기사의 초점은 기존 REST 엔드포인트와 graphQL 쿼리를 인터페이싱하는 것뿐입니다.\n\n<div class=\"content-ad\"></div>\n\n# 사용자 데이터 소스 및 리졸버:\n\n이제 우리는 그래프큐엘 사용자 쿼리를 위에서 언급된 RESTful 엔드포인트에서 데이터를 가져오도록 매핑해야 합니다. 이를 하기 위해 dataSource를 정의하고 resolver에 매핑하는 방법을 살펴볼 수 있습니다.\n\n이 섹션에서는 Rest 엔드포인트에서 모든 사용자를 가져오기 위해 그것을 하는 방법을 살펴보겠습니다.\n\n## 사용자 데이터 소스:\n\n<div class=\"content-ad\"></div>\n\n우리가 데이터 소스로 REST 엔드포인트를 사용할 것이기 때문에, 아폴로 팀이 만든 apollo-datasource-rest 패키지를 설치해봅시다. 이 패키지는 캐싱과 같은 중요한 기능을 다루므로 우리가 걱정할 필요가 없습니다.\n\n프로젝트에 패키지를 추가해봅시다:\n\n```js\nyarn add apollo-datasource-rest\n```\n\n이제 프로젝트 루트에 datasource라는 디렉토리를 만들어 다음과 같이 정의해봅시다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// datasource/users.js\nimport { RESTDataSource } from \"apollo-datasource-rest\";\nexport class UsersAPI extends RESTDataSource {\n  constructor(){\n    super();\n    this.baseURL = \"http://localhost:3000/\"\n  }\n  async getAllUsers() {\n    return this.get('users')\n  }\n}\n```\n\n`baseURL`는 우리 usersservice를 위한 기본 URL이어야 합니다.\n\ndatasource 디렉토리의 인덱스 파일은 다음과 같이 될 것입니다:\n\n```js\n// datasource/index.js\nimport { UsersAPI } from \"./users.js\";\nexport const dataSources = () => ({\n  UsersAPI: new UsersAPI()\n});\n```\n\n<div class=\"content-ad\"></div>\n\n## 사용자 리졸버:\n\n모든 사용자를 가져오는 우리의 리졸버를 추가해보겠습니다. 프로젝트 루트에 resolvers라는 디렉토리를 만들고 다음을 추가합니다:\n\n```js\n// resolvers/users.js\nexport const userResolvers = {\n  users: (parent, args, {dataSources}, info) => dataSources.UsersAPI.getAllUsers()\n}\n```\n\n다음 세션에서 서버의 진입점과 연결할 때 이해할 수 있을 것입니다. 리졸버 인덱스에 다음을 추가합시다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// resolvers/index.js\nimport { userResolvers } from \"./users.js\";\nexport const resolvers = {\n  Query: {\n    ...userResolvers\n  }\n}\n```\n\n## 서버와 연결하기:\n\n데이터 소스와 리졸버를 서버에 연결하려면 프로젝트 루트에 있는 index.js 파일을 다음과 같이 수정하십시오:\n\n```js\n// index.js\nimport { ApolloServer } from \"apollo-server\";\nimport { Query, User } from \"./schema/index.js\";\nimport { resolvers } from \"./resolver/index.js\";\nimport { dataSources } from \"./datasource/index.js\";\nconst server = new ApolloServer({ typeDefs:[Query,User ], resolvers, dataSources });\nserver\n  .listen({ port: process.env.PORT || 5000 })\n  .then(({ url }) => console.log(`서버가 실행 중: ${url}`));\n```\n\n<div class=\"content-ad\"></div>\n\n이제 로컬호스트:5000에서 실행 중인 GraphQL 플레이그라운드로 이동하여 다음과 같이 모든 사용자를 검색하는 쿼리를 실행할 수 있습니다:\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*X9A5GeYoCB8dxYsROmk6VQ.gif)\n\nREST 엔드포인트와 달리 GraphQL 쿼리에서는 사용자 스키마에서 필요한 필드만 선택적으로 가져올 수 있습니다.\n\n# 결론:\n\n<div class=\"content-ad\"></div>\n\n따라서 기존 REST 엔드포인트에서 데이터를 가져오는 기능이 포함된 GraphQL 쿼리를 만들었습니다. 또한 필요한 다양한 구성 요소 및 구성 설정이 무엇이며, 이를 어떻게 연결하여 작동시키는지 살펴보았습니다.","ogImage":{"url":"/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_0.png"},"coverImage":"/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_0.png\" alt=\"image\"></p>\n<p>이 짧은 기사에서는 RESTful 엔드포인트에서 데이터를 가져오는 간단한 GraphQL 쿼리를 어떻게 생성할 수 있는지 살펴보겠습니다. 이를 위해 Node.js와 Apollo Server를 사용할 것입니다.</p>\n<p>이 기사에서는 예시로 간단한 사용자 리소스인 Users를 살펴보겠습니다. 이 글의 목표는 apollo GraphQL 서버를 사용하여 기존 REST 엔드포인트를 데이터 소스로 활용하는 쿼리를 작성하는 데 필요한 단계와 구성을 간략히 개요로 설명하는 것뿐입니다.</p>\n<h2>PlainEnglish.io에서 더 많은 내용 확인 가능합니다.</h2>\n<div class=\"content-ad\"></div>\n<p>우리 무료 주간 뉴스레터를 구독해보세요. Twitter, LinkedIn, YouTube, 그리고 Discord에서도 팔로우해주세요.</p>\n<h2>당신의 기술 창업품을 알림과 채용을 확대하려고 하세요? Circuit을 확인해보세요.</h2>\n<p>이것이 응담하는 클라이언트에게 응답에서 투영되는 필드를 더 많은 제어를 제공하고 싶을 때 유용할 수 있습니다.</p>\n<p>자, 더 이상 말이 필요없으니 시작해봅시다:</p>\n<div class=\"content-ad\"></div>\n<h1>GraphQL 프로젝트 초기화:</h1>\n<p>새 디렉토리를 gserver로 만들고 cd gserver라고 입력하여 디렉토리를 변경해 봅시다.</p>\n<p>이제 yarn init -y로 프로젝트를 초기화해 봅시다.</p>\n<h2>Dependencies 추가:</h2>\n<div class=\"content-ad\"></div>\n<p>저희가 주요하게 사용하는 의존성은 graphQL과 apollo-server 패키지입니다. 그러니 이들을 프로젝트에 추가해봅시다:</p>\n<pre><code class=\"hljs language-js\">yarn add apollo-server graphql\n</code></pre>\n<p>개발 중에 서버가 변경 사항이 생길 때 자동으로 다시 시작되도록 하려면 nodemon을 개발 의존성으로 추가해봅시다:</p>\n<pre><code class=\"hljs language-js\">yarn add --dev nodemon\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>지금 우리의 package.json 파일은 다음과 같이 보일 것입니다:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"gserver\"</span>,\n  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n  <span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,\n  <span class=\"hljs-string\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"module\"</span>,\n  <span class=\"hljs-string\">\"dependencies\"</span>: {\n    <span class=\"hljs-string\">\"apollo-server\"</span>: <span class=\"hljs-string\">\"^3.10.2\"</span>,\n    <span class=\"hljs-string\">\"graphql\"</span>: <span class=\"hljs-string\">\"^16.6.0\"</span>\n  },\n  <span class=\"hljs-string\">\"devDependencies\"</span>: {\n    <span class=\"hljs-string\">\"nodemon\"</span>: <span class=\"hljs-string\">\"^2.0.19\"</span>\n  }\n}\n</code></pre>\n<p>참고: 저는 패키지 매니저로 Yarn을 사용하고 있지만, npm을 사용해도 괜찮습니다.</p>\n<h2>index 파일을 생성하세요:</h2>\n<div class=\"content-ad\"></div>\n<p>프로젝트의 루트에 index.js라는 파일을 만들어주세요. 이 파일은 우리의 GraphQL 서버의 진입점이 될 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApolloServer</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"apollo-server\"</span>;\n<span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApolloServer</span>();\nserver\n  .<span class=\"hljs-title function_\">listen</span>({<span class=\"hljs-attr\">port</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">5000</span>})\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{url}</span>)=></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`서버 실행 중 : <span class=\"hljs-subst\">${url}</span>`</span>));\n</code></pre>\n<p>기본적인 GraphQL 서버가 설정되었으니, package.json에 nodemon을 사용하여 개발 모드에서 시작하는 스크립트를 추가해봅시다:</p>\n<pre><code class=\"hljs language-js\">{\n...기존의 package.<span class=\"hljs-property\">json</span> 내용\n<span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"dev\"</span>: <span class=\"hljs-string\">\"nodemon index.js\"</span>\n  }\n ... 남은 내용\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>사용자 스키마 생성하기:</h1>\n<p>스키마는 우리가 GraphQL에서 쿼리와 뮤테이션을 위한 유형과 그 하위 구조를 정의하는 방법입니다.</p>\n<p>프로젝트 루트에 schema라는 디렉토리를 빠르게 생성해봅시다.</p>\n<p>스키마를 정의하기 위해 gql이라는 특별한 태그를 사용할 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>사용자 스키마는 다음과 같이 정의될 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// schema/user.js</span>\n<span class=\"hljs-keyword\">import</span> { gql } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"apollo-server\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">User</span> = gql`<span class=\"graphql\">\n  <span class=\"hljs-keyword\">type</span> User <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-symbol\">id</span><span class=\"hljs-punctuation\">:</span> ID<span class=\"hljs-punctuation\">!</span>,\n    <span class=\"hljs-symbol\">email</span><span class=\"hljs-punctuation\">:</span> String,\n    <span class=\"hljs-symbol\">name</span><span class=\"hljs-punctuation\">:</span> String\n  <span class=\"hljs-punctuation\">}</span>\n</span></code></pre>\n<p>UUID를 위해 우리는 graphQL에서 ID라는 특별한 타입을 사용하며, '!' 표시는 값이 null일 수 없음을 의미합니다.</p>\n<p>따라서 User라는 타입을 정의하고 사용자 객체에 대한 스키마를 생성했습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>사용자 쿼리 정의:</h1>\n<p>GraphQL에서는 데이터를 가져오는 쿼리(REST 용어로는 GET 요청과 동일하다고 볼 수 있음)를 정의할 때 잘 정의된 스키마가 필요합니다. 이 예시에서는 기본 사용자 서비스 엔드포인트에서 모든 사용자를 가져오고자 합니다. 그러므로 모든 사용자를 가져오기 위한 쿼리를 정의해봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// schema/query.js</span>\n<span class=\"hljs-keyword\">import</span> { gql } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"apollo-server\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Query</span> = gql`<span class=\"graphql\">\n  <span class=\"hljs-keyword\">type</span> <span class=\"hljs-keyword\">Query</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-symbol\">users</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>User<span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</span></code></pre>\n<p>사용자 쿼리로 여러 사용자를 검색할 것이기 때문에 그 유형을 이전에 스키마에서 정의한 User 유형의 배열로 지정합니다.</p>\n<div class=\"content-ad\"></div>\n<p>편의를 위해 스키마 디렉토리 아래에 인덱스 파일을 만들고 정의된 스키마를 다음과 같이 노출해봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// schema/index.js</span>\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">User</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user.js'</span>;\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Query</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./query.js'</span>;\n</code></pre>\n<h1>서버 실행:</h1>\n<p>저희가 정의한 스키마를 포함하는 서버의 진입점인 index.js를 수정해봅시다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApolloServer</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"apollo-server\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Query</span>, <span class=\"hljs-title class_\">User</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./schema/index.js\"</span>;\n<span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApolloServer</span>({<span class=\"hljs-attr\">typeDefs</span>:[<span class=\"hljs-title class_\">Query</span>,<span class=\"hljs-title class_\">User</span>]});\nserver\n  .<span class=\"hljs-title function_\">listen</span>({ <span class=\"hljs-attr\">port</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">5000</span> })\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ url }</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`gserver at : <span class=\"hljs-subst\">${url}</span>`</span>));\n</code></pre>\n<p>이제 터미널에서 <code>yarn dev</code>라고 입력해보세요:</p>\n<img src=\"/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_1.png\">\n<p>브라우저를 <a href=\"http://localhost:5000\" rel=\"nofollow\" target=\"_blank\">http://localhost:5000</a> 에서 열어볼 때, 모든게 잘 되었다면 다음 화면을 보게 됩니다:</p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_2.png\">\n<p>\"Query Your Server\" 버튼을 클릭하면 아폴로 스튜디오로 이동하게 되는데, 여기서 정의된 스키마를 찾을 수 있어요:</p>\n<img src=\"/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_3.png\">\n<p>아직 많이 할 수 있는 것은 없어요. 그래서 다음 섹션에서 사용자 정보를 가져오기 위한 리졸버를 추가해볼게요.</p>\n<div class=\"content-ad\"></div>\n<h1>사용자 RESTful 서비스:</h1>\n<p>저희는 현재 포트 3000에서 실행 중인 사용자 서비스가 있습니다. 현재 localhost:3000/users 엔드포인트에 대한 다음 응답을 반환합니다 :</p>\n<p><img src=\"/assets/img/2024-05-18-CreateaGraphQLQueryWithaRESTEndpointAsaDataSource_4.png\" alt=\"이미지\"></p>\n<p>이것은 express 서버에서 실행 중인 전형적인 RESTful 엔드포인트입니다. 이미 구현되어 있으므로 많은 걱정할 필요가 없습니다. 이 기사의 초점은 기존 REST 엔드포인트와 graphQL 쿼리를 인터페이싱하는 것뿐입니다.</p>\n<div class=\"content-ad\"></div>\n<h1>사용자 데이터 소스 및 리졸버:</h1>\n<p>이제 우리는 그래프큐엘 사용자 쿼리를 위에서 언급된 RESTful 엔드포인트에서 데이터를 가져오도록 매핑해야 합니다. 이를 하기 위해 dataSource를 정의하고 resolver에 매핑하는 방법을 살펴볼 수 있습니다.</p>\n<p>이 섹션에서는 Rest 엔드포인트에서 모든 사용자를 가져오기 위해 그것을 하는 방법을 살펴보겠습니다.</p>\n<h2>사용자 데이터 소스:</h2>\n<div class=\"content-ad\"></div>\n<p>우리가 데이터 소스로 REST 엔드포인트를 사용할 것이기 때문에, 아폴로 팀이 만든 apollo-datasource-rest 패키지를 설치해봅시다. 이 패키지는 캐싱과 같은 중요한 기능을 다루므로 우리가 걱정할 필요가 없습니다.</p>\n<p>프로젝트에 패키지를 추가해봅시다:</p>\n<pre><code class=\"hljs language-js\">yarn add apollo-datasource-rest\n</code></pre>\n<p>이제 프로젝트 루트에 datasource라는 디렉토리를 만들어 다음과 같이 정의해봅시다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// datasource/users.js</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">RESTDataSource</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"apollo-datasource-rest\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UsersAPI</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">RESTDataSource</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>){\n    <span class=\"hljs-variable language_\">super</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">baseURL</span> = <span class=\"hljs-string\">\"http://localhost:3000/\"</span>\n  }\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getAllUsers</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'users'</span>)\n  }\n}\n</code></pre>\n<p><code>baseURL</code>는 우리 usersservice를 위한 기본 URL이어야 합니다.</p>\n<p>datasource 디렉토리의 인덱스 파일은 다음과 같이 될 것입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// datasource/index.js</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UsersAPI</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./users.js\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dataSources</span> = (<span class=\"hljs-params\"></span>) => ({\n  <span class=\"hljs-title class_\">UsersAPI</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UsersAPI</span>()\n});\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>사용자 리졸버:</h2>\n<p>모든 사용자를 가져오는 우리의 리졸버를 추가해보겠습니다. 프로젝트 루트에 resolvers라는 디렉토리를 만들고 다음을 추가합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// resolvers/users.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> userResolvers = {\n  <span class=\"hljs-attr\">users</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">parent, args, {dataSources}, info</span>) =></span> dataSources.<span class=\"hljs-property\">UsersAPI</span>.<span class=\"hljs-title function_\">getAllUsers</span>()\n}\n</code></pre>\n<p>다음 세션에서 서버의 진입점과 연결할 때 이해할 수 있을 것입니다. 리졸버 인덱스에 다음을 추가합시다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// resolvers/index.js</span>\n<span class=\"hljs-keyword\">import</span> { userResolvers } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./users.js\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> resolvers = {\n  <span class=\"hljs-title class_\">Query</span>: {\n    ...userResolvers\n  }\n}\n</code></pre>\n<h2>서버와 연결하기:</h2>\n<p>데이터 소스와 리졸버를 서버에 연결하려면 프로젝트 루트에 있는 index.js 파일을 다음과 같이 수정하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApolloServer</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"apollo-server\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Query</span>, <span class=\"hljs-title class_\">User</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./schema/index.js\"</span>;\n<span class=\"hljs-keyword\">import</span> { resolvers } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./resolver/index.js\"</span>;\n<span class=\"hljs-keyword\">import</span> { dataSources } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./datasource/index.js\"</span>;\n<span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApolloServer</span>({ <span class=\"hljs-attr\">typeDefs</span>:[<span class=\"hljs-title class_\">Query</span>,<span class=\"hljs-title class_\">User</span> ], resolvers, dataSources });\nserver\n  .<span class=\"hljs-title function_\">listen</span>({ <span class=\"hljs-attr\">port</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">5000</span> })\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ url }</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`서버가 실행 중: <span class=\"hljs-subst\">${url}</span>`</span>));\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 로컬호스트:5000에서 실행 중인 GraphQL 플레이그라운드로 이동하여 다음과 같이 모든 사용자를 검색하는 쿼리를 실행할 수 있습니다:</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*X9A5GeYoCB8dxYsROmk6VQ.gif\" alt=\"이미지\"></p>\n<p>REST 엔드포인트와 달리 GraphQL 쿼리에서는 사용자 스키마에서 필요한 필드만 선택적으로 가져올 수 있습니다.</p>\n<h1>결론:</h1>\n<div class=\"content-ad\"></div>\n<p>따라서 기존 REST 엔드포인트에서 데이터를 가져오는 기능이 포함된 GraphQL 쿼리를 만들었습니다. 또한 필요한 다양한 구성 요소 및 구성 설정이 무엇이며, 이를 어떻게 연결하여 작동시키는지 살펴보았습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}