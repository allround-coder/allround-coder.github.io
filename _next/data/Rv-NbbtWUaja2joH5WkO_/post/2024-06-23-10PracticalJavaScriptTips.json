{"pageProps":{"post":{"title":"실무에서 바로 써먹는 10가지 자바스크립트 꿀팁","description":"","date":"2024-06-23 13:10","slug":"2024-06-23-10PracticalJavaScriptTips","content":"\n\n<img src=\"/assets/img/2024-06-23-10PracticalJavaScriptTips_0.png\" />\n\n1. 매개변수 객체를 배열로 변환해보세요.\n\n매개변수 객체는 함수 내에서 접근할 수 있는 배열과 유사한 객체로, 해당 함수에 전달된 매개변수 값들을 포함합니다. 그러나 배열 메소드를 가지고 있지 않습니다. 다행히도 이를 일반 배열로 변환할 수 있습니다:\n\n```js\nvar argArray = Array.prototype.slice.call(arguments);\n```\n\n<div class=\"content-ad\"></div>\n\n2. 배열 안의 모든 값을 합산해보세요.\n\n루프를 사용하는 대신 reduce 메소드를 사용할 수 있어요:\n\n```js\nvar numbers = [3, 5, 7, 2];\nvar sum = numbers.reduce((x, y) => x + y);\nconsole.log(sum); // 결과는 17이 나옵니다\n```\n\n3. 조건부 단축 평가.\n\n<div class=\"content-ad\"></div>\n\n명시적인 if 문 대신에 짧게 작성할 수 있어요:\n\n```js\nif (hungry) {\n   goToFridge();\n}\n```\n\n&& 연산자를 사용해 더 짧게 쓸 수 있어요:\n\n```js\nhungry && goToFridge();\n```\n\n<div class=\"content-ad\"></div>\n\n4. 조건문과 논리 OR를 함께 사용하세요.\n\nundefined를 얻지 않도록 불필요한 변수를 선언하지 마세요:\n\n```js\nfunction doSomething(arg1){ \n    arg1 = arg1 || 32; // arg1이 이미 설정되지 않았다면 32로 설정\n}\n```\n\n5. 쉼표 연산자.\n\n<div class=\"content-ad\"></div>\n\n쉼표 연산자는 각 피연산자를 왼쪽에서 오른쪽으로 평가하고 마지막 피연산자의 값 반환합니다:\n\n```js\nlet x = 1;\nx = (x++, x);\nconsole.log(x); // 예상 결과: 2\nx = (2, 3);\nconsole.log(x); // 예상 결과: 3\n```\n\n6. length를 사용하여 배열의 크기를 조정합니다.\n\n크기 조정 또는 배열 비우기:\n\n<div class=\"content-ad\"></div>\n\n```js\nvar array = [11, 12, 13, 14, 15];  \nconsole.log(array.length); // 5   \narray.length = 3;   \nconsole.log(array.length); // 3   \nconsole.log(array); // [11, 12, 13]\narray.length = 0;   \nconsole.log(array.length); // 0   \nconsole.log(array); // []\n\n7. Swap values using array destructuring.\n\nSwap values without using a temporary variable:\n\nlet a = 1, b = 2;\n[a, b] = [b, a];\nconsole.log(a); // -> 2\nconsole.log(b); // -> 1\n\n<div class=\"content-ad\"></div>\n\n배열의 요소들을 섞어보세요.\n\n배열 요소들을 무작위로 섞어보세요:\n\nvar list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(list.sort(function() {\n    return Math.random() - 0.5;\n}));\n// [4, 8, 2, 9, 1, 3, 6, 5, 7]\n\n9. 동적 속성 이름.\n\n<div class=\"content-ad\"></div>\n\n객체를 선언하기 전에 동적 속성을 할당해 보세요:\n\nconst dynamic = 'color';\nvar item = {\n    brand: 'Ford',\n    [dynamic]: 'Blue'\n}\nconsole.log(item);\n// { brand: \"Ford\", color: \"Blue\" }\n\n10. 고유한 값을 필터링하세요.\n\nES6를 즐기는 분들을 위해, Spread 연산자를 사용하여 Set 객체를 활용해 새로운 배열을 만들어 보세요:\n\n<div class=\"content-ad\"></div>\n\nconst my_array = [1, 2, 2, 3, 3, 4, 5, 5];\nconst unique_array = [...new Set(my_array)];\nconsole.log(unique_array); // [1, 2, 3, 4, 5]\n\n- 인수 객체는 함수 내에서 액세스할 수 있는 유사 배열 객체이며, 해당 함수에 전달된 매개변수의 값을 포함합니다. 그러나 배열 메서드가 없습니다. 다행히도 일반 배열로 변환할 수 있습니다:","ogImage":{"url":"/assets/img/2024-06-23-10PracticalJavaScriptTips_0.png"},"coverImage":"/assets/img/2024-06-23-10PracticalJavaScriptTips_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-23-10PracticalJavaScriptTips_0.png\">\n<ol>\n<li>매개변수 객체를 배열로 변환해보세요.</li>\n</ol>\n<p>매개변수 객체는 함수 내에서 접근할 수 있는 배열과 유사한 객체로, 해당 함수에 전달된 매개변수 값들을 포함합니다. 그러나 배열 메소드를 가지고 있지 않습니다. 다행히도 이를 일반 배열로 변환할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> argArray = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>);\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"2\">\n<li>배열 안의 모든 값을 합산해보세요.</li>\n</ol>\n<p>루프를 사용하는 대신 reduce 메소드를 사용할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> numbers = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">var</span> sum = numbers.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x, y</span>) =></span> x + y);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sum); <span class=\"hljs-comment\">// 결과는 17이 나옵니다</span>\n</code></pre>\n<ol start=\"3\">\n<li>조건부 단축 평가.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<p>명시적인 if 문 대신에 짧게 작성할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> (hungry) {\n   <span class=\"hljs-title function_\">goToFridge</span>();\n}\n</code></pre>\n<p>&#x26;&#x26; 연산자를 사용해 더 짧게 쓸 수 있어요:</p>\n<pre><code class=\"hljs language-js\">hungry &#x26;&#x26; <span class=\"hljs-title function_\">goToFridge</span>();\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"4\">\n<li>조건문과 논리 OR를 함께 사용하세요.</li>\n</ol>\n<p>undefined를 얻지 않도록 불필요한 변수를 선언하지 마세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doSomething</span>(<span class=\"hljs-params\">arg1</span>){ \n    arg1 = arg1 || <span class=\"hljs-number\">32</span>; <span class=\"hljs-comment\">// arg1이 이미 설정되지 않았다면 32로 설정</span>\n}\n</code></pre>\n<ol start=\"5\">\n<li>쉼표 연산자.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<p>쉼표 연산자는 각 피연산자를 왼쪽에서 오른쪽으로 평가하고 마지막 피연산자의 값 반환합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">1</span>;\nx = (x++, x);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 예상 결과: 2</span>\nx = (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 예상 결과: 3</span>\n</code></pre>\n<ol start=\"6\">\n<li>length를 사용하여 배열의 크기를 조정합니다.</li>\n</ol>\n<p>크기 조정 또는 배열 비우기:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>];  \n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(array.<span class=\"hljs-property\">length</span>); <span class=\"hljs-comment\">// 5   </span>\narray.<span class=\"hljs-property\">length</span> = <span class=\"hljs-number\">3</span>;   \n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(array.<span class=\"hljs-property\">length</span>); <span class=\"hljs-comment\">// 3   </span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(array); <span class=\"hljs-comment\">// [11, 12, 13]</span>\narray.<span class=\"hljs-property\">length</span> = <span class=\"hljs-number\">0</span>;   \n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(array.<span class=\"hljs-property\">length</span>); <span class=\"hljs-comment\">// 0   </span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(array); <span class=\"hljs-comment\">// []</span>\n\n<span class=\"hljs-number\">7.</span> <span class=\"hljs-title class_\">Swap</span> values using array destructuring.\n\n<span class=\"hljs-title class_\">Swap</span> values without using a temporary <span class=\"hljs-attr\">variable</span>:\n\n<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">1</span>, b = <span class=\"hljs-number\">2</span>;\n[a, b] = [b, a];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a); <span class=\"hljs-comment\">// -> 2</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b); <span class=\"hljs-comment\">// -> 1</span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n\n배열의 요소들을 섞어보세요.\n\n배열 요소들을 무작위로 섞어보세요:\n\n<span class=\"hljs-keyword\">var</span> list = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(list.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() - <span class=\"hljs-number\">0.5</span>;\n}));\n<span class=\"hljs-comment\">// [4, 8, 2, 9, 1, 3, 6, 5, 7]</span>\n\n<span class=\"hljs-number\">9.</span> 동적 속성 이름.\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\n객체를 선언하기 전에 동적 속성을 할당해 보세요:\n\n<span class=\"hljs-keyword\">const</span> dynamic = <span class=\"hljs-string\">'color'</span>;\n<span class=\"hljs-keyword\">var</span> item = {\n    <span class=\"hljs-attr\">brand</span>: <span class=\"hljs-string\">'Ford'</span>,\n    [dynamic]: <span class=\"hljs-string\">'Blue'</span>\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(item);\n<span class=\"hljs-comment\">// { brand: \"Ford\", color: \"Blue\" }</span>\n\n<span class=\"hljs-number\">10.</span> 고유한 값을 필터링하세요.\n\n<span class=\"hljs-title class_\">ES6</span>를 즐기는 분들을 위해, <span class=\"hljs-title class_\">Spread</span> 연산자를 사용하여 <span class=\"hljs-title class_\">Set</span> 객체를 활용해 새로운 배열을 만들어 보세요:\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n\n<span class=\"hljs-keyword\">const</span> my_array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">const</span> unique_array = [...<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(my_array)];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(unique_array); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span>\n\n- 인수 객체는 함수 내에서 액세스할 수 있는 유사 배열 객체이며, 해당 함수에 전달된 매개변수의 값을 포함합니다. 그러나 배열 메서드가 없습니다. 다행히도 일반 배열로 변환할 수 있습니다:\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}