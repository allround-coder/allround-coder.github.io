{"pageProps":{"post":{"title":"Angular 기초부터 고급까지 모든 개념 설명 - 파트 1","description":"","date":"2024-06-22 14:56","slug":"2024-06-22-AngularBasictoAdvanceEveryConceptExplainedpart1","content":"\n\n<img src=\"/assets/img/2024-06-22-AngularBasictoAdvanceEveryConceptExplainedpart1_0.png\" />\n\n웹 개발 분야에서 빠르게 진화하는 상황에서 Angular는 강력하고 다재다능한 프레임워크로 등장하여 개발자들이 동적이고 기능이 풍부하며 반응성 있는 웹 애플리케이션을 구축할 수 있도록 돕고 있습니다. Google이 개발 및 유지보수하는 Angular는 싱글 페이지 애플리케이션을 쉽게 만들 수 있는 능력으로 널리 사용되고 있습니다. 이 블로그 시리즈는 Angular의 모든 측면을 명확히 설명하여 복잡한 개념을 모든 기술 수준의 개발자들에게 이해하기 쉬운 설명으로 분해하고 있습니다.\n\n# 파일 및 폴더 구조\n\nAngular에서 파일 및 폴더 구조는 프로젝트의 소스 코드에 논리적인 구성을 제공하여 응용 프로그램을 보다 쉽게 관리하고 개발할 수 있도록 설계되었습니다. Angular 프로젝트에서 일반적으로 만날 수 있는 파일 및 폴더에 대한 간단한 개요는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n- src: 이것은 애플리케이션의 소스 코드가 있는 주요 디렉터리입니다. 대부분의 코드는 여기에서 작업하게 됩니다.\n\n- app: 이곳에는 애플리케이션의 구성 요소, 서비스, 모듈 및 기타 관련 파일이 저장됩니다. 애플리케이션의 핵심 부분입니다.\n    - components: 각각이 TypeScript, HTML, CSS 및 기타 파일을 포함하는 개별 컴포넌트 폴더가 포함됩니다.\n    - services: 컴포넌트간에 공유 기능을 제공하는 서비스 파일이 포함됩니다.\n    - modules: 애플리케이션을 구성하고 구성하는 데 도움이 되는 Angular 모듈 파일이 포함됩니다.\n- assets: 이미지, 폰트 및 기타 파일과 같은 정적 에셋이 저장되는 곳입니다. 이러한 에셋은 애플리케이션에서 직접 액세스할 수 있습니다.\n- styles: 애플리케이션 전체에 적용되는 CSS 또는 SCSS 파일과 같은 글로벌 스타일이 포함됩니다.\n- index.html: 애플리케이션의 진입점으로 작동하는 주요 HTML 파일입니다.\n\n2. angular.json: 이 구성 파일은 Angular 프로젝트에 대한 다양한 설정을 정의합니다. 빌드 옵션, 에셋 경로 및 기타 프로젝트별 구성을 포함합니다.\n\n여기에 angular.json 파일의 주요 측면을 간단히 설명했습니다.\n\n<div class=\"content-ad\"></div>\n\n- projects: 이 섹션은 Angular 워크스페이스 내의 하나 이상의 프로젝트에 대한 구성을 포함합니다. 각 프로젝트는 워크스페이스 내의 응용 프로그램, 라이브러리 또는 기타 관련 코드를 나타냅니다.\n\n- architect: 이 하위 섹션은 프로젝트에서 실행할 수 있는 다양한 빌드, 테스트 및 서빙 작업을 정의합니다.\n    - build: 프로덕션 또는 개발용으로 프로젝트를 빌드하는 옵션을 구성합니다. 출력 경로, 에셋, 스타일, 스크립트 등을 지정할 수 있습니다.\n    - test: Karma 또는 Protractor와 같은 테스트 프레임워크를 사용하여 테스트 설정을 구성합니다.\n    - serve: 개발 서버 설정을 구성하여 개발 중에 응용 프로그램을 로컬로 제공합니다.\n    - lint: 코딩 표준에 대한 코드를 점검하기 위한 린트 옵션을 구성합니다.\n    - e2e: 사용자 상호 작용을 시뮬레이트하는 테스트를 실행하기 위한 엔드 투 엔드 (e2e) 테스트 설정을 구성합니다.\n\n2. schematics: 이 섹션은 사용자 정의 스키매틱을 정의하거나 프로젝트용으로 코드 및 파일을 생성하기 위해 타사 스키매틱을 사용하는 것을 허용합니다.\n\n3. cli: Angular CLI 자체와 관련된 설정을 포함합니다.\n\n<div class=\"content-ad\"></div>\n\n- defaultCollection: CLI가 코드를 생성할 때 사용해야 하는 스키마틱의 기본 컬렉션을 지정합니다.\n\n4. newProjectRoot: 워크스페이스 내에서 생성된 새 프로젝트의 루트 디렉토리를 정의합니다.\n\n5. sourceRoot: 응용 프로그램 소스 코드가 있는 루트 디렉토리를 지정합니다.\n\n6. prefix: 프로젝트 내에서 생성된 구성 요소, 지시문 및 기타 Angular 요소의 선택기에 자동으로 추가되는 접두어를 정의합니다.\n\n<div class=\"content-ad\"></div>\n\n7. targets: 각 프로젝트의 \"architect\" 섹션 내에서 특정 작업을 나타내는 \"targets\"가 있습니다. 이러한 targets는 Angular CLI를 사용하여 호출할 수 있습니다.\n\n- builder: 작업을 수행하는 데 책임을 지는 빌더(도구)를 지정합니다.\n- options: 작업에 대한 특정 옵션을 포함합니다.\n- configurations: \"build\" 작업에 대한 \"production\" 또는 \"development\"과 같은 다양한 구성을 정의합니다.\n\n3. tsconfig.json: 이 파일은 프로젝트의 TypeScript 컴파일러 옵션을 구성합니다.\n\n4. package.json: 이 파일은 프로젝트의 종속성과 스크립트에 관한 정보를 보유합니다. npm (Node Package Manager)에서 패키지 및 스크립트를 관리하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n여기에는 package.json 파일이 포함하는 내용을 자세히 살펴볼게요:\n\n- name: 이 필드는 프로젝트의 이름을 지정합니다. 이것은 고유한 식별자이며 네이밍 규칙을 따라야 합니다.\n- version: 프로젝트의 버전입니다. 변경 사항을 추적하고 업데이트를 관리하는 데 중요합니다.\n- scripts: 이 부분에서는 커맨드 라인을 사용하여 실행할 수 있는 사용자 정의 스크립트를 정의하는 중요한 섹션입니다. Angular 프로젝트에서 흔히 사용되는 일반적인 스크립트는 다음과 같습니다:\n\n- start: 개발 서버를 시작하는 데 사용됩니다.\n- build: 애플리케이션을 프로덕션용으로 빌드하는 데 사용됩니다.\n- test: 테스트를 실행하는 데 사용됩니다.\n- lint: 코드 린팅을 실행하는 데 사용됩니다.\n- 자동화할 요소를 정의하는 사용자 정의 스크립트\n\n4. dependencies: 이것은 프로젝트가 올바르게 작동하기 위해 의존하는 패키지를 나열합니다. 이 패키지들은 애플리케이션이 프로덕션 환경에서 실행되기 위해 필요합니다.\n\n<div class=\"content-ad\"></div>\n\n5. devDependencies: 의존성과 유사하지만 이 패키지들은 개발 중에만 필요하며 최종 제품 빌드에서는 필요하지 않습니다.\n\n# 보간법(Interpolation)\n\n보간법은 Angular의 템플릿 구문에서의 기본적인 개념으로, 컴포넌트의 TypeScript 코드에서 HTML 템플릿 내에서 데이터 값을 동적으로 표시할 수 있게 해줍니다. 이는 컴포넌트의 논리와 데이터 조작을 템플릿의 사용자 인터페이스와 원활하게 결합하는 방법입니다. 보간법은 템플릿에서 이중 중괄호 ' '로 표시됩니다.\n\nAngular 컴포넌트와 템플릿의 예시:\n\n<div class=\"content-ad\"></div>\n\n변경 후: \n\nComponent (app.component.ts):\n\n```js\nexport class AppComponent {\n  greeting: string = 'Hello, Angular!';\n  count: number = 42;\n  \n  getDynamicValue(): string {\n    return 'Dynamic Value';\n  }\n}\n```\n\nTemplate (app.component.html):\n\n```js\n<h1>{{ greeting }}</h1>\n<p>The answer to everything is {{ count }}</p>\n<p>This is a {{ getDynamicValue() }}</p>\n```\n\n<div class=\"content-ad\"></div>\n\n이 예시에서는 greeting, count 값 및 getDynamicValue() 함수의 결과가 보간을 사용하여 HTML에 동적으로 삽입됩니다. 컴포넌트 내에서 값이 변경되면 템플릿이 자동으로 해당 변경사항을 반영하여 업데이트됩니다.\n\n# Angular CLI 및 중요한 명령어\n\nAngular CLI(Command Line Interface)는 Angular 팀에서 제공하는 강력한 도구로, Angular 애플리케이션의 개발, 테스트 및 배포 작업을 간편화하는 데 사용됩니다. Angular CLI는 Angular 프로젝트 관리, 개발 및 유지보수와 관련된 다양한 작업을 간소화하는 일련의 명령어를 제공합니다.\n\nAngular CLI를 사용하려면 시스템에 Node.js 및 npm(Node Package Manager)이 설치되어 있어야 합니다. 다음 npm 명령어를 사용하여 Angular CLI를 전역으로 설치할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install -g @angular/cli\n```\n\n설치가 완료되면 CLI가 제공하는 다양한 명령어를 사용하여 Angular 애플리케이션을 효과적으로 생성, 개발, 테스트 및 배포할 수 있습니다.\n\n# Components\n\n구성 요소는 애플리케이션 사용자 인터페이스의 기본 구성 요소입니다. 특정 섹션을 나타내며 해당 섹션과 연결된 시각적 표현 (HTML 템플릿)과 로직 (Typescript 클래스)을 캡슐화합니다.\n\n<div class=\"content-ad\"></div>\n\n컴포넌트 생성: Angular CLI의 g c 명령어를 사용하여 새로운 컴포넌트를 생성하세요. 일반적인 구문은 다음과 같습니다:\n\n```js\nng g c 컴포넌트이름\n```\n\n원하는 컴포넌트 이름을 kebab-case(모두 소문자 및 하이픈 사용)로 지정하세요.\n\nAngular 컴포넌트 디렉토리 내에서 일반적으로 찾을 수 있는 파일에 대한 자세한 설명은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n- Component Class (Typescript):\n\n- component-name.component.ts: 이 TypeScript 파일에는 컴포넌트의 동작 및 로직을 정의하는 클래스가 포함되어 있습니다. 속성, 메서드, 이벤트 핸들러, 라이프사이클 훅 및 컴포넌트와 관련된 다른 로직이 포함됩니다.\n\n2. Template (HTML):\n\n- component-name.component.html: 이 HTML 파일은 컴포넌트의 사용자 인터페이스의 구조와 내용을 정의합니다. HTML 요소, 데이터 바인딩, 디렉티브 및 동적 콘텐츠를 위한 자리 표시자가 포함될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n3. 스타일 (CSS 또는 SCSS):\n\n- component-name.component.css: 이 CSS 파일에는 컴포넌트에 특화된 스타일이 포함되어 있습니다. 여기에는 일반적인 CSS 스타일을 사용할 수 있습니다.\n- component-name.component.scss: 선택적으로, 더 강력하고 모듈식으로 스타일을 작성하고자 하는 경우 SCSS(Sass) 스타일을 사용할 수 있습니다.\n\n4. 테스트 파일 (선택 사항):\n\n- component-name.component.spec.ts: 이 TypeScript 파일에는 해당 컴포넌트의 유닛 테스트가 포함되어 있습니다. Jasmine과 Karma와 같은 테스트 프레임워크 및 도구를 사용하여 컴포넌트가 예상대로 작동하는지 확인하기 위해 테스트를 작성하고 실행할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 인라인 스타일이 포함된 컴포넌트\n\n인라인 스타일을 사용하여 Angular 컴포넌트를 만들려면 @Component() 데코레이터 내에서 styles 속성을 사용하여 컴포넌트의 스타일을 직접 정의해야 합니다. 이 방법은 컴포넌트 템플릿과 밀접한 관련이 있는 간단하고 구체적인 스타일을 추가하는 데 유용할 수 있습니다.\n\n아래 명령어를 실행해보세요\n\n```js\nng g c 컴포넌트명 --inline-style\n```\n\n<div class=\"content-ad\"></div>\n\n컴포넌트 TypeScript 파일을 수정하세요 (component-name.component.ts): 컴포넌트의 TypeScript 파일을 열어 @Component() 데코레이터를 업데이트하여 styles 속성을 포함시키세요. styles 속성은 각각 CSS 규칙을 포함하는 문자열 배열이어야 합니다.\n\n다음은 예시입니다:\n\n```js\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n  styles: [\n    `\n    .my-component-container {\n      background-color: lightblue;\n      padding: 20px;\n    }\n    `,\n    `\n    h2 {\n      color: red;\n    }\n    `\n  ]\n})\nexport class MyComponent { }\n```\n\n# 모듈들\n\n<div class=\"content-ad\"></div>\n\n앵귤러에서 모듈은 관련 컴포넌트, 서비스, 디렉티브 및 기타 코드를 응집 단위로 구성하는 메커니즘입니다. 모듈은 애플리케이션을 모듈화하고 기능을 그룹화하여 관심사 분리를 촉진하는 데 도움이 됩니다. 앵귤러 애플리케이션은 여러 모듈을 결합하여 구축되며 각 모듈은 애플리케이션의 특정 부분을 담당합니다.\n\n모듈 생성: 새 모듈을 생성하려면 Angular CLI의 generate module 명령을 사용하세요. 일반적인 구문은 다음과 같습니다:\n\n```js\nng generate module 모듈이름\n```\n\n모듈 이름을 케밥 케이스(소문자와 하이픈 사용)로 입력해주세요.\n\n<div class=\"content-ad\"></div>\n\n아래는 Angular 모듈을 만드는 간단한 예제입니다:\n\n```js\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n# 함수 만들고 호출하기\n\n함수는 종종 메서드로 불리며, 컴포넌트와 서비스 내에서 정의되어 로직을 캡슐화하고, 이벤트를 처리하며, 계산을 수행하고, 데이터와 상호 작용하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n  styleUrls: ['./my-component.component.css']\n})\nexport class MyComponent {\n  counter: number = 0;\n\n  incrementCounter() {\n    this.counter++;\n  }\n}\n```\n\n```js\n<button (click)=\"incrementCounter()\">Increment Counter</button>\n```\n\n# Events\n\nAngular에서 이벤트는 응용 프로그램의 사용자 인터페이스 내에서 발생하는 상호 작용 또는 발생하는 사건을 의미합니다. 이러한 상호 작용은 클릭, 키 누름, 마우스 이동, 입력 변경 등과 같은 작업을 포함할 수 있습니다. Angular는 이러한 이벤트를 처리하고 사용자에게 동적이고 상호 작용적인 경험을 제공하기 위해 이에 응답하는 메커니즘을 제공합니다. Angular에서 이벤트의 주요 측면은 다음과 같습니다:\n\n\n<div class=\"content-ad\"></div>\n\n- 이벤트 바인딩: 이벤트 바인딩은 사용자 상호작용으로 트리거된 이벤트를 청취하고 응답하는 방법입니다. 컴포넌트 클래스에서 메서드를 템플릿의 이벤트와 바인딩하는 것을 말합니다. (event) 구문을 사용합니다.\n\n```js\n<button (click)=\"handleClick()\">Click Me</button> \n<input (input)=\"handleChange($event)\">\n```\n\n2. 이벤트 객체: 이벤트가 트리거되면 이벤트 핸들러 메서드로 이벤트 객체가 전달됩니다. 이 객체에는 이벤트 유형, 대상 요소 등의 정보가 포함되어 있습니다.\n\n```js\nhandleClick(event: MouseEvent) {\n   console.log(`Button clicked! Event type: ${event.type}`);\n }  \nhandleChange(event: Event) {\n   const inputValue = (event.target as HTMLInputElement).value;\n   console.log(`Input value changed: ${inputValue}`); \n}\n```\n\n<div class=\"content-ad\"></div>\n\n3. 이벤트 유형: 다양한 이벤트 유형은 사용자 상호작용에 해당합니다. 클릭, 입력, 변경, 마우스 진입, 마우스 이탈, 키 다운, 키 업 등이 일반적인 이벤트 유형입니다.\n\n4. 이벤트 수정자: Angular은 이벤트 동작을 수정할 수 있는 이벤트 수정자를 제공합니다. 예를 들어, stopPropagation 수정자를 사용하여 이벤트 전파를 방지하는 방법과 함께 (click) 이벤트를 사용할 수 있습니다.\n\n\\js\n<button (click.stop)=\"handleClick()\">Click Me</button>\n\\\n\n5. 양방향 데이터 바인딩: Angular은 [(ngModel)] 지시문을 사용하여 양방향 데이터 바인딩을 지원합니다. 이는 입력 요소에 대해 데이터 속성과 이벤트 핸들링을 함께 바인딩하여 뷰와 모델을 동기화하는 기능을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n```typescript\n<input [(ngModel)]=\"username\">\n```\n\n6. 사용자 정의 이벤트: Angular의 EventEmitter를 사용하여 사용자 정의 이벤트를 생성하고 emit할 수도 있습니다. 부모 및 자식 컴포넌트 간에 통신이 필요할 때 특히 유용합니다.\n\n```typescript\nimport { Component, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-child',\n  template: '<button (click)=\"emitCustomEvent()\">이벤트 발생</button>'\n})\nexport class ChildComponent {\n  @Output() customEvent = new EventEmitter<void>();\n\n  emitCustomEvent() {\n    this.customEvent.emit();\n  }\n}\n```\n\n```html\n<app-child (customEvent)=\"handleCustomEvent()\"></app-child>\n```\n\n<div class=\"content-ad\"></div>\n\n이벤트를 바인딩하고 구성 요소의 메서드에서 처리함으로써 사용자가 응용 프로그램과 상호 작용하여 다양한 작업 및 동작을 트리거할 수 있습니다.\n\n## 속성 바인딩\n\n속성 바인딩은 Angular의 핵심 개념으로, HTML 요소 및 Angular 지시문의 속성이나 속성을 동적으로 설정하고 업데이트할 수 있게 해줍니다. 속성 바인딩을 사용하면 HTML 요소나 Angular 지시문의 속성을 구성 요소의 TypeScript 코드에서 정의된 표현식이나 값에 바인딩할 수 있습니다. 이를 통해 동적이고 데이터 주도형 사용자 인터페이스를 만들 수 있습니다.\n\nAngular의 속성 바인딩에 대해 이해해야 할 주요 포인트는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n바인딩 구문: 템플릿에서 속성 바인딩은 대괄호 []를 사용하여 수행합니다. 대괄호 안에 바인딩할 속성을 넣고, 등호와 바인딩할 식 또는 값을 넣습니다.\n\n```js\n<!-- 이미지 요소의 \"src\" 속성을 바인딩하는 예시 -->\n<img [src]=\"imageUrl\">\n```\n\n컴포넌트 속성에 바인딩: 대부분의 경우, 속성은 컴포넌트의 TypeScript 코드에서 정의된 값이나 표현식에 바인딩합니다. 이를 통해 컴포넌트 데이터에 따라 속성을 동적으로 업데이트할 수 있습니다.\n\n```js\nexport class MyComponent {\n  imageUrl = 'path/to/default-image.jpg';\n}\n```\n\n<div class=\"content-ad\"></div>\n\n앵귤러 디렉티브와 속성 바인딩: 속성 바인딩은 주로 앵귤러 디렉티브와 함께 사용됩니다. 예를 들어, 내장 디렉티브인 ngStyle, ngClass 또는 ngIf와 같은 속성을 바인딩할 수 있습니다. 또한 사용자 정의 디렉티브와도 속성을 바인딩할 수 있습니다.\n\n```js\n<div [ngStyle]=\"{ 'font-size.px': fontSize }\">동적 글꼴 크기</div>\n<button [disabled]=\"isDisabled\">클릭하세요</button>\n```\n\nDOM 속성에 바인딩: src, href, disabled, value, innerText 등과 같은 표준 HTML 요소 속성에 바인딩할 수 있습니다. 또한 사용자 정의 앵귤러 컴포넌트에서 정의된 사용자 정의 속성에도 바인딩할 수 있습니다.\n\n단방향 바인딩: 속성 바인딩은 일방향 바인딩의 한 형태입니다. DOM 요소나 디렉티브의 속성을 컴포넌트 데이터를 기반으로 설정하지만, DOM 요소의 변화는 컴포넌트 데이터에 영향을 미치지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n# If-Else\n\n앵귤러 템플릿에서는 if-else 조건에 따라 조건부 렌더링을 생성하기 위해 구조적 디렉티브를 사용할 수 있습니다. 이 용도에 가장 적합한 주 디렉티브는 *ngIf이며, 이를 사용하면 표현식을 평가하여 DOM에서 요소를 조건부로 렌더링하거나 제거할 수 있습니다. 또한 *ngIf와 함께 else 키워드를 사용하여 if-else 구조를 구현할 수 있습니다. 안내해드리는 방법과 같이 Angular 템플릿에서 if-else 조건을 사용하는 방법을 알아보세요:\n\n```js\n<div *ngIf=\"condition; else elseBlock\">\n  <!-- 조건이 참일 때 표시할 내용 -->\n</div>\n<ng-template #elseBlock>\n  <!-- 조건이 거짓일 때 표시할 내용 -->\n</ng-template>\n```\n\n이 예시에서는:\n\n<div class=\"content-ad\"></div>\n\n- condition은 당신의 컴포넌트의 TypeScript 코드에서의 불리언 표현식입니다.\n- condition이 참이면 *ngIf 블록 내에 있는 내용이 표시됩니다.\n- condition이 거짓이면 elseBlock 템플릿 내에 있는 내용이 표시됩니다.\n\n템플릿의 삼항 연산자: 간단한 if-else 조건에 대해 템플릿에서 삼항 연산자 (? :)를 사용하여 내용을 조건부로 렌더링할 수 있습니다:\n\n```js\n<div>\n  { condition ? 'condition이 true인 경우 표시됩니다.' : 'condition이 false인 경우 표시됩니다.' }\n</div>\n```\n\n다중 if-else 조건에 대한 내용:\n\n<div class=\"content-ad\"></div>\n\n```js\n<ng-template [ngIf]=\"color==='red'>\n    <h1>Red Color</h1>\n<ng-template>\n\n<ng-template [ngIf]=\"color==='green'>\n    <h1>Green Color</h1>\n<ng-template>\n\n<ng-template [ngIf]=\"color==='blue'>\n    <h1>Blue Color</h1>\n<ng-template>\n```\n\n# Switch case\n\nAngular 템플릿에서는 ngSwitch 지시문을 사용하여 switch-case 로직을 구현할 수 있습니다. ngSwitchCase 또는 ngSwitchDefault를 사용하여 식의 값에 따라 내용을 조건부로 렌더링할 수 있습니다.\n\n```js\n<div [ngSwitch]=\"selectedOption\">\n  <p *ngSwitchCase=\"'option1'\">Option 1 is selected.</p>\n  <p *ngSwitchCase=\"'option2'\">Option 2 is selected.</p>\n  <p *ngSwitchCase=\"'option3'\">Option 3 is selected.</p>\n  <p *ngSwitchDefault>No option is selected.</p>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n이 예제에서:\n\n- selectedOption은 선택된 옵션을 포함하는 컴포넌트의 TypeScript 코드의 속성입니다.\n- [ngSwitch] 지시문은 평가할 표현식을 지정하는 데 사용됩니다.\n- 각 *ngSwitchCase 블록은 selectedOption의 특정 값에 대해 확인하고 콘텐츠를 그에 맞게 표시합니다.\n- *ngSwitchDefault 블록은 ngSwitchCase 조건 중 어느 것도 일치하지 않을 때 기본 케이스로 사용됩니다.\n\n다음은 컴포넌트의 TypeScript 코드에서 selectedOption 속성을 정의하는 간단한 예시입니다:\n\n```js\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n  styleUrls: ['./my-component.component.css']\n})\nexport class MyComponent {\n  selectedOption: string = 'option1'; // Initially set to option1\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# for 문\n\n앵귤러 템플릿에서 *ngFor 디렉티브를 사용하여 배열이나 리스트와 같은 컬렉션을 순회하고 반복할 수 있습니다. 이 디렉티브를 사용하면 컬렉션의 각 항목마다 요소를 렌더링할 수 있습니다.\n\n```js\n<ul>\n  <li *ngFor=\"let item of items\">\n    { item }\n  </li>\n</ul>\n```\n\n이 예시에서:\n\n<div class=\"content-ad\"></div>\n\n- items은 컴포넌트의 TypeScript 코드에서 배열 또는 반복 가능한 컬렉션입니다.\n- *ngFor 지시문은 li 요소에 적용됩니다.\n- let item of items는 각 항목을 나타내는 템플릿 변수인 item이 포함된 루프를 정의합니다.\n- let i = index는 현재 항목의 인덱스에 액세스하기 위한 선택적인 템플릿 변수 i를 정의합니다.\n\n이 코드는 items 배열의 각 항목에 대해 목록 항목 (li)을 가진 정렬된 목록 (ul)을 렌더링합니다. i + 1 표현식을 사용하여 항목의 인덱스 (1부터 시작)와 그 값을 표시합니다.\n\n다음은 컴포넌트의 TypeScript 코드에서 items 속성을 정의하는 방법의 예시입니다:\n\n```js\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n  styleUrls: ['./my-component.component.css']\n})\nexport class MyComponent {\n  items: string[] = ['Item 1', 'Item 2', 'Item 3', 'Item 4'];\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 중첩 루프\n\nAngular 템플릿에서는 여러 *ngFor 지시문을 중첩하여 중첩된 루프를 생성할 수 있습니다. 이를 통해 배열의 배열이나 배열을 포함하는 객체의 배열과 같은 중첩된 컬렉션을 반복할 수 있습니다. Angular 구성 요소의 템플릿에서 중첩된 루프를 만드는 방법의 예시는 다음과 같습니다:\n\n```js\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n  styleUrls: ['./my-component.component.css']\n})\nexport class MyComponent {\n  nestedArray: number[][] = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ];\n}\n```\n\n템플릿에서는 이 데이터 구조를 반복하는 데 중첩된 *ngFor 루프를 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<table>\n  <tr *ngFor=\"let row of nestedArray\">\n    <td *ngFor=\"let cell of row\">\n      { cell }\n    </td>\n  </tr>\n</table>\n```\n\n이 예제에서:\n\n- 외부 *ngFor 반복문은 nestedArray의 각 행을 반복합니다.\n- 내부 *ngFor 반복문은 현재 행 내의 각 셀을 반복합니다.\n- cell은 중첩된 배열 내의 각 값을 나타내며, 표 셀 (`td`)에 표시됩니다.\n\n이 코드는 각 행이 nestedArray에서 값을 포함하는 표를 렌더링하며, 중첩된 루프의 기본적인 예제를 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n이 글에서는 Angular의 흥미로운 세계로 첫 걸음을 내딛어본 바 있습니다. 이 글에서는 동적이고 견고한 웹 애플리케이션을 구축하는 기초가 되는 핵심 개념을 탐구했습니다. Angular의 필수 개념인 파일 및 폴더 구조 이해부터 모듈, 컴포넌트, 보간(interpolation), 속성 바인딩까지 다뤘습니다. 게다가, *ngIf로 조건부 렌더링을 구현하는 방법과 *ngFor를 사용하여 반복문을 만드는 법을 배웠습니다.\n\nAngular 여정의 첫 부분을 마무리하면서 이러한 핵심 개념에 대한 강력한 이해를 키워 더 고급 주제와 기술을 다루는 두 번째 부분을 위한 탄탄한 기초를 마련했습니다. 다가오는 세그먼트에서는 Angular의 강력한 기능인 서비스, 라우팅, 폼, HTTP 상호작용 등을 탐험할 예정입니다.\n\n계속 주목해 주세요! Angular 탐험의 두 번째 부분은 학습 여정의 흥미로운 이어짐을 약속합니다. 여기서는 최신 대화형 웹 애플리케이션을 쉽게 구축할 수 있는 도구와 기술을 발견할 것입니다. 그동안 배운 내용을 탐험하고 연습하며 Angular에 대한 이해를 견고히 다지는 것이 가장 좋은 방법이며 개발 전문성이 발전하는 길을 열어줄 것입니다.","ogImage":{"url":"/assets/img/2024-06-22-AngularBasictoAdvanceEveryConceptExplainedpart1_0.png"},"coverImage":"/assets/img/2024-06-22-AngularBasictoAdvanceEveryConceptExplainedpart1_0.png","tag":["Tech"],"readingTime":16},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-22-AngularBasictoAdvanceEveryConceptExplainedpart1_0.png\">\n<p>웹 개발 분야에서 빠르게 진화하는 상황에서 Angular는 강력하고 다재다능한 프레임워크로 등장하여 개발자들이 동적이고 기능이 풍부하며 반응성 있는 웹 애플리케이션을 구축할 수 있도록 돕고 있습니다. Google이 개발 및 유지보수하는 Angular는 싱글 페이지 애플리케이션을 쉽게 만들 수 있는 능력으로 널리 사용되고 있습니다. 이 블로그 시리즈는 Angular의 모든 측면을 명확히 설명하여 복잡한 개념을 모든 기술 수준의 개발자들에게 이해하기 쉬운 설명으로 분해하고 있습니다.</p>\n<h1>파일 및 폴더 구조</h1>\n<p>Angular에서 파일 및 폴더 구조는 프로젝트의 소스 코드에 논리적인 구성을 제공하여 응용 프로그램을 보다 쉽게 관리하고 개발할 수 있도록 설계되었습니다. Angular 프로젝트에서 일반적으로 만날 수 있는 파일 및 폴더에 대한 간단한 개요는 다음과 같습니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>\n<p>src: 이것은 애플리케이션의 소스 코드가 있는 주요 디렉터리입니다. 대부분의 코드는 여기에서 작업하게 됩니다.</p>\n</li>\n<li>\n<p>app: 이곳에는 애플리케이션의 구성 요소, 서비스, 모듈 및 기타 관련 파일이 저장됩니다. 애플리케이션의 핵심 부분입니다.</p>\n<ul>\n<li>components: 각각이 TypeScript, HTML, CSS 및 기타 파일을 포함하는 개별 컴포넌트 폴더가 포함됩니다.</li>\n<li>services: 컴포넌트간에 공유 기능을 제공하는 서비스 파일이 포함됩니다.</li>\n<li>modules: 애플리케이션을 구성하고 구성하는 데 도움이 되는 Angular 모듈 파일이 포함됩니다.</li>\n</ul>\n</li>\n<li>\n<p>assets: 이미지, 폰트 및 기타 파일과 같은 정적 에셋이 저장되는 곳입니다. 이러한 에셋은 애플리케이션에서 직접 액세스할 수 있습니다.</p>\n</li>\n<li>\n<p>styles: 애플리케이션 전체에 적용되는 CSS 또는 SCSS 파일과 같은 글로벌 스타일이 포함됩니다.</p>\n</li>\n<li>\n<p>index.html: 애플리케이션의 진입점으로 작동하는 주요 HTML 파일입니다.</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>angular.json: 이 구성 파일은 Angular 프로젝트에 대한 다양한 설정을 정의합니다. 빌드 옵션, 에셋 경로 및 기타 프로젝트별 구성을 포함합니다.</li>\n</ol>\n<p>여기에 angular.json 파일의 주요 측면을 간단히 설명했습니다.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>\n<p>projects: 이 섹션은 Angular 워크스페이스 내의 하나 이상의 프로젝트에 대한 구성을 포함합니다. 각 프로젝트는 워크스페이스 내의 응용 프로그램, 라이브러리 또는 기타 관련 코드를 나타냅니다.</p>\n</li>\n<li>\n<p>architect: 이 하위 섹션은 프로젝트에서 실행할 수 있는 다양한 빌드, 테스트 및 서빙 작업을 정의합니다.</p>\n<ul>\n<li>build: 프로덕션 또는 개발용으로 프로젝트를 빌드하는 옵션을 구성합니다. 출력 경로, 에셋, 스타일, 스크립트 등을 지정할 수 있습니다.</li>\n<li>test: Karma 또는 Protractor와 같은 테스트 프레임워크를 사용하여 테스트 설정을 구성합니다.</li>\n<li>serve: 개발 서버 설정을 구성하여 개발 중에 응용 프로그램을 로컬로 제공합니다.</li>\n<li>lint: 코딩 표준에 대한 코드를 점검하기 위한 린트 옵션을 구성합니다.</li>\n<li>e2e: 사용자 상호 작용을 시뮬레이트하는 테스트를 실행하기 위한 엔드 투 엔드 (e2e) 테스트 설정을 구성합니다.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>schematics: 이 섹션은 사용자 정의 스키매틱을 정의하거나 프로젝트용으로 코드 및 파일을 생성하기 위해 타사 스키매틱을 사용하는 것을 허용합니다.</p>\n</li>\n<li>\n<p>cli: Angular CLI 자체와 관련된 설정을 포함합니다.</p>\n</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ul>\n<li>defaultCollection: CLI가 코드를 생성할 때 사용해야 하는 스키마틱의 기본 컬렉션을 지정합니다.</li>\n</ul>\n<ol start=\"4\">\n<li>\n<p>newProjectRoot: 워크스페이스 내에서 생성된 새 프로젝트의 루트 디렉토리를 정의합니다.</p>\n</li>\n<li>\n<p>sourceRoot: 응용 프로그램 소스 코드가 있는 루트 디렉토리를 지정합니다.</p>\n</li>\n<li>\n<p>prefix: 프로젝트 내에서 생성된 구성 요소, 지시문 및 기타 Angular 요소의 선택기에 자동으로 추가되는 접두어를 정의합니다.</p>\n</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ol start=\"7\">\n<li>targets: 각 프로젝트의 \"architect\" 섹션 내에서 특정 작업을 나타내는 \"targets\"가 있습니다. 이러한 targets는 Angular CLI를 사용하여 호출할 수 있습니다.</li>\n</ol>\n<ul>\n<li>builder: 작업을 수행하는 데 책임을 지는 빌더(도구)를 지정합니다.</li>\n<li>options: 작업에 대한 특정 옵션을 포함합니다.</li>\n<li>configurations: \"build\" 작업에 대한 \"production\" 또는 \"development\"과 같은 다양한 구성을 정의합니다.</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>tsconfig.json: 이 파일은 프로젝트의 TypeScript 컴파일러 옵션을 구성합니다.</p>\n</li>\n<li>\n<p>package.json: 이 파일은 프로젝트의 종속성과 스크립트에 관한 정보를 보유합니다. npm (Node Package Manager)에서 패키지 및 스크립트를 관리하는 데 사용됩니다.</p>\n</li>\n</ol>\n<div class=\"content-ad\"></div>\n<p>여기에는 package.json 파일이 포함하는 내용을 자세히 살펴볼게요:</p>\n<ul>\n<li>\n<p>name: 이 필드는 프로젝트의 이름을 지정합니다. 이것은 고유한 식별자이며 네이밍 규칙을 따라야 합니다.</p>\n</li>\n<li>\n<p>version: 프로젝트의 버전입니다. 변경 사항을 추적하고 업데이트를 관리하는 데 중요합니다.</p>\n</li>\n<li>\n<p>scripts: 이 부분에서는 커맨드 라인을 사용하여 실행할 수 있는 사용자 정의 스크립트를 정의하는 중요한 섹션입니다. Angular 프로젝트에서 흔히 사용되는 일반적인 스크립트는 다음과 같습니다:</p>\n</li>\n<li>\n<p>start: 개발 서버를 시작하는 데 사용됩니다.</p>\n</li>\n<li>\n<p>build: 애플리케이션을 프로덕션용으로 빌드하는 데 사용됩니다.</p>\n</li>\n<li>\n<p>test: 테스트를 실행하는 데 사용됩니다.</p>\n</li>\n<li>\n<p>lint: 코드 린팅을 실행하는 데 사용됩니다.</p>\n</li>\n<li>\n<p>자동화할 요소를 정의하는 사용자 정의 스크립트</p>\n</li>\n</ul>\n<ol start=\"4\">\n<li>dependencies: 이것은 프로젝트가 올바르게 작동하기 위해 의존하는 패키지를 나열합니다. 이 패키지들은 애플리케이션이 프로덕션 환경에서 실행되기 위해 필요합니다.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ol start=\"5\">\n<li>devDependencies: 의존성과 유사하지만 이 패키지들은 개발 중에만 필요하며 최종 제품 빌드에서는 필요하지 않습니다.</li>\n</ol>\n<h1>보간법(Interpolation)</h1>\n<p>보간법은 Angular의 템플릿 구문에서의 기본적인 개념으로, 컴포넌트의 TypeScript 코드에서 HTML 템플릿 내에서 데이터 값을 동적으로 표시할 수 있게 해줍니다. 이는 컴포넌트의 논리와 데이터 조작을 템플릿의 사용자 인터페이스와 원활하게 결합하는 방법입니다. 보간법은 템플릿에서 이중 중괄호 ' '로 표시됩니다.</p>\n<p>Angular 컴포넌트와 템플릿의 예시:</p>\n<div class=\"content-ad\"></div>\n<p>변경 후:</p>\n<p>Component (app.component.ts):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n  <span class=\"hljs-attr\">greeting</span>: string = <span class=\"hljs-string\">'Hello, Angular!'</span>;\n  <span class=\"hljs-attr\">count</span>: number = <span class=\"hljs-number\">42</span>;\n  \n  <span class=\"hljs-title function_\">getDynamicValue</span>(): string {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Dynamic Value'</span>;\n  }\n}\n</code></pre>\n<p>Template (app.component.html):</p>\n<pre><code class=\"hljs language-js\">&#x3C;h1>{{ greeting }}&#x3C;/h1>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>The answer to everything is {{ count }}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>This is a {{ getDynamicValue() }}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 예시에서는 greeting, count 값 및 getDynamicValue() 함수의 결과가 보간을 사용하여 HTML에 동적으로 삽입됩니다. 컴포넌트 내에서 값이 변경되면 템플릿이 자동으로 해당 변경사항을 반영하여 업데이트됩니다.</p>\n<h1>Angular CLI 및 중요한 명령어</h1>\n<p>Angular CLI(Command Line Interface)는 Angular 팀에서 제공하는 강력한 도구로, Angular 애플리케이션의 개발, 테스트 및 배포 작업을 간편화하는 데 사용됩니다. Angular CLI는 Angular 프로젝트 관리, 개발 및 유지보수와 관련된 다양한 작업을 간소화하는 일련의 명령어를 제공합니다.</p>\n<p>Angular CLI를 사용하려면 시스템에 Node.js 및 npm(Node Package Manager)이 설치되어 있어야 합니다. 다음 npm 명령어를 사용하여 Angular CLI를 전역으로 설치할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">npm install -g @angular/cli\n</code></pre>\n<p>설치가 완료되면 CLI가 제공하는 다양한 명령어를 사용하여 Angular 애플리케이션을 효과적으로 생성, 개발, 테스트 및 배포할 수 있습니다.</p>\n<h1>Components</h1>\n<p>구성 요소는 애플리케이션 사용자 인터페이스의 기본 구성 요소입니다. 특정 섹션을 나타내며 해당 섹션과 연결된 시각적 표현 (HTML 템플릿)과 로직 (Typescript 클래스)을 캡슐화합니다.</p>\n<div class=\"content-ad\"></div>\n<p>컴포넌트 생성: Angular CLI의 g c 명령어를 사용하여 새로운 컴포넌트를 생성하세요. 일반적인 구문은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\">ng g c 컴포넌트이름\n</code></pre>\n<p>원하는 컴포넌트 이름을 kebab-case(모두 소문자 및 하이픈 사용)로 지정하세요.</p>\n<p>Angular 컴포넌트 디렉토리 내에서 일반적으로 찾을 수 있는 파일에 대한 자세한 설명은 다음과 같습니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>\n<p>Component Class (Typescript):</p>\n</li>\n<li>\n<p>component-name.component.ts: 이 TypeScript 파일에는 컴포넌트의 동작 및 로직을 정의하는 클래스가 포함되어 있습니다. 속성, 메서드, 이벤트 핸들러, 라이프사이클 훅 및 컴포넌트와 관련된 다른 로직이 포함됩니다.</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Template (HTML):</li>\n</ol>\n<ul>\n<li>component-name.component.html: 이 HTML 파일은 컴포넌트의 사용자 인터페이스의 구조와 내용을 정의합니다. HTML 요소, 데이터 바인딩, 디렉티브 및 동적 콘텐츠를 위한 자리 표시자가 포함될 수 있습니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<ol start=\"3\">\n<li>스타일 (CSS 또는 SCSS):</li>\n</ol>\n<ul>\n<li>component-name.component.css: 이 CSS 파일에는 컴포넌트에 특화된 스타일이 포함되어 있습니다. 여기에는 일반적인 CSS 스타일을 사용할 수 있습니다.</li>\n<li>component-name.component.scss: 선택적으로, 더 강력하고 모듈식으로 스타일을 작성하고자 하는 경우 SCSS(Sass) 스타일을 사용할 수 있습니다.</li>\n</ul>\n<ol start=\"4\">\n<li>테스트 파일 (선택 사항):</li>\n</ol>\n<ul>\n<li>component-name.component.spec.ts: 이 TypeScript 파일에는 해당 컴포넌트의 유닛 테스트가 포함되어 있습니다. Jasmine과 Karma와 같은 테스트 프레임워크 및 도구를 사용하여 컴포넌트가 예상대로 작동하는지 확인하기 위해 테스트를 작성하고 실행할 수 있습니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>인라인 스타일이 포함된 컴포넌트</h1>\n<p>인라인 스타일을 사용하여 Angular 컴포넌트를 만들려면 @Component() 데코레이터 내에서 styles 속성을 사용하여 컴포넌트의 스타일을 직접 정의해야 합니다. 이 방법은 컴포넌트 템플릿과 밀접한 관련이 있는 간단하고 구체적인 스타일을 추가하는 데 유용할 수 있습니다.</p>\n<p>아래 명령어를 실행해보세요</p>\n<pre><code class=\"hljs language-js\">ng g c 컴포넌트명 --inline-style\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>컴포넌트 TypeScript 파일을 수정하세요 (component-name.component.ts): 컴포넌트의 TypeScript 파일을 열어 @Component() 데코레이터를 업데이트하여 styles 속성을 포함시키세요. styles 속성은 각각 CSS 규칙을 포함하는 문자열 배열이어야 합니다.</p>\n<p>다음은 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-my-component'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./my-component.component.html'</span>,\n  <span class=\"hljs-attr\">styles</span>: [\n    <span class=\"hljs-string\">`\n    .my-component-container {\n      background-color: lightblue;\n      padding: 20px;\n    }\n    `</span>,\n    <span class=\"hljs-string\">`\n    h2 {\n      color: red;\n    }\n    `</span>\n  ]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> { }\n</code></pre>\n<h1>모듈들</h1>\n<div class=\"content-ad\"></div>\n<p>앵귤러에서 모듈은 관련 컴포넌트, 서비스, 디렉티브 및 기타 코드를 응집 단위로 구성하는 메커니즘입니다. 모듈은 애플리케이션을 모듈화하고 기능을 그룹화하여 관심사 분리를 촉진하는 데 도움이 됩니다. 앵귤러 애플리케이션은 여러 모듈을 결합하여 구축되며 각 모듈은 애플리케이션의 특정 부분을 담당합니다.</p>\n<p>모듈 생성: 새 모듈을 생성하려면 Angular CLI의 generate module 명령을 사용하세요. 일반적인 구문은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\">ng generate <span class=\"hljs-variable language_\">module</span> 모듈이름\n</code></pre>\n<p>모듈 이름을 케밥 케이스(소문자와 하이픈 사용)로 입력해주세요.</p>\n<div class=\"content-ad\"></div>\n<p>아래는 Angular 모듈을 만드는 간단한 예제입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NgModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.component'</span>;\n\n@<span class=\"hljs-title class_\">NgModule</span>({\n  <span class=\"hljs-attr\">declarations</span>: [\n    <span class=\"hljs-title class_\">AppComponent</span>\n  ],\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">BrowserModule</span>\n  ],\n  <span class=\"hljs-attr\">providers</span>: [],\n  <span class=\"hljs-attr\">bootstrap</span>: [<span class=\"hljs-title class_\">AppComponent</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> { }\n</code></pre>\n<h1>함수 만들고 호출하기</h1>\n<p>함수는 종종 메서드로 불리며, 컴포넌트와 서비스 내에서 정의되어 로직을 캡슐화하고, 이벤트를 처리하며, 계산을 수행하고, 데이터와 상호 작용하는 데 사용됩니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-my-component'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./my-component.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./my-component.component.css'</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> {\n  <span class=\"hljs-attr\">counter</span>: number = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-title function_\">incrementCounter</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">counter</span>++;\n  }\n}\n</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;button (click)=<span class=\"hljs-string\">\"incrementCounter()\"</span>><span class=\"hljs-title class_\">Increment</span> <span class=\"hljs-title class_\">Counter</span>&#x3C;/button>\n</code></pre>\n<h1>Events</h1>\n<p>Angular에서 이벤트는 응용 프로그램의 사용자 인터페이스 내에서 발생하는 상호 작용 또는 발생하는 사건을 의미합니다. 이러한 상호 작용은 클릭, 키 누름, 마우스 이동, 입력 변경 등과 같은 작업을 포함할 수 있습니다. Angular는 이러한 이벤트를 처리하고 사용자에게 동적이고 상호 작용적인 경험을 제공하기 위해 이에 응답하는 메커니즘을 제공합니다. Angular에서 이벤트의 주요 측면은 다음과 같습니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>이벤트 바인딩: 이벤트 바인딩은 사용자 상호작용으로 트리거된 이벤트를 청취하고 응답하는 방법입니다. 컴포넌트 클래스에서 메서드를 템플릿의 이벤트와 바인딩하는 것을 말합니다. (event) 구문을 사용합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;button (click)=<span class=\"hljs-string\">\"handleClick()\"</span>><span class=\"hljs-title class_\">Click</span> <span class=\"hljs-title class_\">Me</span>&#x3C;/button> \n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> (<span class=\"hljs-attr\">input</span>)=<span class=\"hljs-string\">\"handleChange($event)\"</span>></span>\n</span></code></pre>\n<ol start=\"2\">\n<li>이벤트 객체: 이벤트가 트리거되면 이벤트 핸들러 메서드로 이벤트 객체가 전달됩니다. 이 객체에는 이벤트 유형, 대상 요소 등의 정보가 포함되어 있습니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">handleClick</span>(<span class=\"hljs-params\">event: MouseEvent</span>) {\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Button clicked! Event type: <span class=\"hljs-subst\">${event.type}</span>`</span>);\n }  \n<span class=\"hljs-title function_\">handleChange</span>(<span class=\"hljs-params\">event: Event</span>) {\n   <span class=\"hljs-keyword\">const</span> inputValue = (event.<span class=\"hljs-property\">target</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">HTMLInputElement</span>).<span class=\"hljs-property\">value</span>;\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Input value changed: <span class=\"hljs-subst\">${inputValue}</span>`</span>); \n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"3\">\n<li>\n<p>이벤트 유형: 다양한 이벤트 유형은 사용자 상호작용에 해당합니다. 클릭, 입력, 변경, 마우스 진입, 마우스 이탈, 키 다운, 키 업 등이 일반적인 이벤트 유형입니다.</p>\n</li>\n<li>\n<p>이벤트 수정자: Angular은 이벤트 동작을 수정할 수 있는 이벤트 수정자를 제공합니다. 예를 들어, stopPropagation 수정자를 사용하여 이벤트 전파를 방지하는 방법과 함께 (click) 이벤트를 사용할 수 있습니다.</p>\n</li>\n</ol>\n<p>\\js\n&#x3C;button (click.stop)=\"handleClick()\">Click Me\n\\</p>\n<ol start=\"5\">\n<li>양방향 데이터 바인딩: Angular은 [(ngModel)] 지시문을 사용하여 양방향 데이터 바인딩을 지원합니다. 이는 입력 요소에 대해 데이터 속성과 이벤트 핸들링을 함께 바인딩하여 뷰와 모델을 동기화하는 기능을 제공합니다.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-typescript\">&#x3C;input [(ngModel)]=<span class=\"hljs-string\">\"username\"</span>>\n</code></pre>\n<ol start=\"6\">\n<li>사용자 정의 이벤트: Angular의 EventEmitter를 사용하여 사용자 정의 이벤트를 생성하고 emit할 수도 있습니다. 부모 및 자식 컴포넌트 간에 통신이 필요할 때 특히 유용합니다.</li>\n</ol>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">Output</span>, <span class=\"hljs-title class_\">EventEmitter</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-child'</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'&#x3C;button (click)=\"emitCustomEvent()\">이벤트 발생&#x3C;/button>'</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChildComponent</span> {\n  <span class=\"hljs-meta\">@Output</span>() customEvent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventEmitter</span>&#x3C;<span class=\"hljs-built_in\">void</span>>();\n\n  <span class=\"hljs-title function_\">emitCustomEvent</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">customEvent</span>.<span class=\"hljs-title function_\">emit</span>();\n  }\n}\n</code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">app-child</span> (<span class=\"hljs-attr\">customEvent</span>)=<span class=\"hljs-string\">\"handleCustomEvent()\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">app-child</span>></span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이벤트를 바인딩하고 구성 요소의 메서드에서 처리함으로써 사용자가 응용 프로그램과 상호 작용하여 다양한 작업 및 동작을 트리거할 수 있습니다.</p>\n<h2>속성 바인딩</h2>\n<p>속성 바인딩은 Angular의 핵심 개념으로, HTML 요소 및 Angular 지시문의 속성이나 속성을 동적으로 설정하고 업데이트할 수 있게 해줍니다. 속성 바인딩을 사용하면 HTML 요소나 Angular 지시문의 속성을 구성 요소의 TypeScript 코드에서 정의된 표현식이나 값에 바인딩할 수 있습니다. 이를 통해 동적이고 데이터 주도형 사용자 인터페이스를 만들 수 있습니다.</p>\n<p>Angular의 속성 바인딩에 대해 이해해야 할 주요 포인트는 다음과 같습니다:</p>\n<div class=\"content-ad\"></div>\n<p>바인딩 구문: 템플릿에서 속성 바인딩은 대괄호 []를 사용하여 수행합니다. 대괄호 안에 바인딩할 속성을 넣고, 등호와 바인딩할 식 또는 값을 넣습니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;!-- 이미지 요소의 <span class=\"hljs-string\">\"src\"</span> 속성을 바인딩하는 예시 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> [<span class=\"hljs-attr\">src</span>]=<span class=\"hljs-string\">\"imageUrl\"</span>></span>\n</span></code></pre>\n<p>컴포넌트 속성에 바인딩: 대부분의 경우, 속성은 컴포넌트의 TypeScript 코드에서 정의된 값이나 표현식에 바인딩합니다. 이를 통해 컴포넌트 데이터에 따라 속성을 동적으로 업데이트할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> {\n  imageUrl = <span class=\"hljs-string\">'path/to/default-image.jpg'</span>;\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>앵귤러 디렉티브와 속성 바인딩: 속성 바인딩은 주로 앵귤러 디렉티브와 함께 사용됩니다. 예를 들어, 내장 디렉티브인 ngStyle, ngClass 또는 ngIf와 같은 속성을 바인딩할 수 있습니다. 또한 사용자 정의 디렉티브와도 속성을 바인딩할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;div [ngStyle]=<span class=\"hljs-string\">\"{ 'font-size.px': fontSize }\"</span>>동적 글꼴 크기&#x3C;/div>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> [<span class=\"hljs-attr\">disabled</span>]=<span class=\"hljs-string\">\"isDisabled\"</span>></span>클릭하세요<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n</code></pre>\n<p>DOM 속성에 바인딩: src, href, disabled, value, innerText 등과 같은 표준 HTML 요소 속성에 바인딩할 수 있습니다. 또한 사용자 정의 앵귤러 컴포넌트에서 정의된 사용자 정의 속성에도 바인딩할 수 있습니다.</p>\n<p>단방향 바인딩: 속성 바인딩은 일방향 바인딩의 한 형태입니다. DOM 요소나 디렉티브의 속성을 컴포넌트 데이터를 기반으로 설정하지만, DOM 요소의 변화는 컴포넌트 데이터에 영향을 미치지 않습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>If-Else</h1>\n<p>앵귤러 템플릿에서는 if-else 조건에 따라 조건부 렌더링을 생성하기 위해 구조적 디렉티브를 사용할 수 있습니다. 이 용도에 가장 적합한 주 디렉티브는 *ngIf이며, 이를 사용하면 표현식을 평가하여 DOM에서 요소를 조건부로 렌더링하거나 제거할 수 있습니다. 또한 *ngIf와 함께 else 키워드를 사용하여 if-else 구조를 구현할 수 있습니다. 안내해드리는 방법과 같이 Angular 템플릿에서 if-else 조건을 사용하는 방법을 알아보세요:</p>\n<pre><code class=\"hljs language-js\">&#x3C;div *ngIf=<span class=\"hljs-string\">\"condition; else elseBlock\"</span>>\n  &#x3C;!-- 조건이 참일 때 표시할 내용 -->\n&#x3C;/div>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ng-template</span> #<span class=\"hljs-attr\">elseBlock</span>></span>\n  <span class=\"hljs-comment\">&#x3C;!-- 조건이 거짓일 때 표시할 내용 --></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ng-template</span>></span></span>\n</code></pre>\n<p>이 예시에서는:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>condition은 당신의 컴포넌트의 TypeScript 코드에서의 불리언 표현식입니다.</li>\n<li>condition이 참이면 *ngIf 블록 내에 있는 내용이 표시됩니다.</li>\n<li>condition이 거짓이면 elseBlock 템플릿 내에 있는 내용이 표시됩니다.</li>\n</ul>\n<p>템플릿의 삼항 연산자: 간단한 if-else 조건에 대해 템플릿에서 삼항 연산자 (? :)를 사용하여 내용을 조건부로 렌더링할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;div>\n  { condition ? <span class=\"hljs-string\">'condition이 true인 경우 표시됩니다.'</span> : <span class=\"hljs-string\">'condition이 false인 경우 표시됩니다.'</span> }\n&#x3C;/div>\n</code></pre>\n<p>다중 if-else 조건에 대한 내용:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;ng-template [ngIf]=<span class=\"hljs-string\">\"color==='red'>\n    &#x3C;h1>Red Color&#x3C;/h1>\n&#x3C;ng-template>\n\n&#x3C;ng-template [ngIf]=\"</span>color===<span class=\"hljs-string\">'green'</span>>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Green Color<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n&#x3C;ng-template>\n\n&#x3C;ng-template [ngIf]=\"color==='blue'>\n    &#x3C;h1>Blue Color&#x3C;/h1>\n&#x3C;ng-template>\n</code></pre>\n<h1>Switch case</h1>\n<p>Angular 템플릿에서는 ngSwitch 지시문을 사용하여 switch-case 로직을 구현할 수 있습니다. ngSwitchCase 또는 ngSwitchDefault를 사용하여 식의 값에 따라 내용을 조건부로 렌더링할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;div [ngSwitch]=<span class=\"hljs-string\">\"selectedOption\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> *<span class=\"hljs-attr\">ngSwitchCase</span>=<span class=\"hljs-string\">\"'option1'\"</span>></span>Option 1 is selected.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> *<span class=\"hljs-attr\">ngSwitchCase</span>=<span class=\"hljs-string\">\"'option2'\"</span>></span>Option 2 is selected.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> *<span class=\"hljs-attr\">ngSwitchCase</span>=<span class=\"hljs-string\">\"'option3'\"</span>></span>Option 3 is selected.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> *<span class=\"hljs-attr\">ngSwitchDefault</span>></span>No option is selected.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n&#x3C;/div>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 예제에서:</p>\n<ul>\n<li>selectedOption은 선택된 옵션을 포함하는 컴포넌트의 TypeScript 코드의 속성입니다.</li>\n<li>[ngSwitch] 지시문은 평가할 표현식을 지정하는 데 사용됩니다.</li>\n<li>각 *ngSwitchCase 블록은 selectedOption의 특정 값에 대해 확인하고 콘텐츠를 그에 맞게 표시합니다.</li>\n<li>*ngSwitchDefault 블록은 ngSwitchCase 조건 중 어느 것도 일치하지 않을 때 기본 케이스로 사용됩니다.</li>\n</ul>\n<p>다음은 컴포넌트의 TypeScript 코드에서 selectedOption 속성을 정의하는 간단한 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-my-component'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./my-component.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./my-component.component.css'</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> {\n  <span class=\"hljs-attr\">selectedOption</span>: string = <span class=\"hljs-string\">'option1'</span>; <span class=\"hljs-comment\">// Initially set to option1</span>\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>for 문</h1>\n<p>앵귤러 템플릿에서 *ngFor 디렉티브를 사용하여 배열이나 리스트와 같은 컬렉션을 순회하고 반복할 수 있습니다. 이 디렉티브를 사용하면 컬렉션의 각 항목마다 요소를 렌더링할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;ul>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let item of items\"</span>></span>\n    { item }\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>\n&#x3C;/ul>\n</code></pre>\n<p>이 예시에서:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>items은 컴포넌트의 TypeScript 코드에서 배열 또는 반복 가능한 컬렉션입니다.</li>\n<li>*ngFor 지시문은 li 요소에 적용됩니다.</li>\n<li>let item of items는 각 항목을 나타내는 템플릿 변수인 item이 포함된 루프를 정의합니다.</li>\n<li>let i = index는 현재 항목의 인덱스에 액세스하기 위한 선택적인 템플릿 변수 i를 정의합니다.</li>\n</ul>\n<p>이 코드는 items 배열의 각 항목에 대해 목록 항목 (li)을 가진 정렬된 목록 (ul)을 렌더링합니다. i + 1 표현식을 사용하여 항목의 인덱스 (1부터 시작)와 그 값을 표시합니다.</p>\n<p>다음은 컴포넌트의 TypeScript 코드에서 items 속성을 정의하는 방법의 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-my-component'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./my-component.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./my-component.component.css'</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> {\n  <span class=\"hljs-attr\">items</span>: string[] = [<span class=\"hljs-string\">'Item 1'</span>, <span class=\"hljs-string\">'Item 2'</span>, <span class=\"hljs-string\">'Item 3'</span>, <span class=\"hljs-string\">'Item 4'</span>];\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>중첩 루프</h1>\n<p>Angular 템플릿에서는 여러 *ngFor 지시문을 중첩하여 중첩된 루프를 생성할 수 있습니다. 이를 통해 배열의 배열이나 배열을 포함하는 객체의 배열과 같은 중첩된 컬렉션을 반복할 수 있습니다. Angular 구성 요소의 템플릿에서 중첩된 루프를 만드는 방법의 예시는 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-my-component'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./my-component.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./my-component.component.css'</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> {\n  <span class=\"hljs-attr\">nestedArray</span>: number[][] = [\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],\n    [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>],\n    [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]\n  ];\n}\n</code></pre>\n<p>템플릿에서는 이 데이터 구조를 반복하는 데 중첩된 *ngFor 루프를 사용할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;table>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tr</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let row of nestedArray\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let cell of row\"</span>></span>\n      { cell }\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tr</span>></span></span>\n&#x3C;/table>\n</code></pre>\n<p>이 예제에서:</p>\n<ul>\n<li>외부 *ngFor 반복문은 nestedArray의 각 행을 반복합니다.</li>\n<li>내부 *ngFor 반복문은 현재 행 내의 각 셀을 반복합니다.</li>\n<li>cell은 중첩된 배열 내의 각 값을 나타내며, 표 셀 (<code>td</code>)에 표시됩니다.</li>\n</ul>\n<p>이 코드는 각 행이 nestedArray에서 값을 포함하는 표를 렌더링하며, 중첩된 루프의 기본적인 예제를 보여줍니다.</p>\n<div class=\"content-ad\"></div>\n<p>이 글에서는 Angular의 흥미로운 세계로 첫 걸음을 내딛어본 바 있습니다. 이 글에서는 동적이고 견고한 웹 애플리케이션을 구축하는 기초가 되는 핵심 개념을 탐구했습니다. Angular의 필수 개념인 파일 및 폴더 구조 이해부터 모듈, 컴포넌트, 보간(interpolation), 속성 바인딩까지 다뤘습니다. 게다가, *ngIf로 조건부 렌더링을 구현하는 방법과 *ngFor를 사용하여 반복문을 만드는 법을 배웠습니다.</p>\n<p>Angular 여정의 첫 부분을 마무리하면서 이러한 핵심 개념에 대한 강력한 이해를 키워 더 고급 주제와 기술을 다루는 두 번째 부분을 위한 탄탄한 기초를 마련했습니다. 다가오는 세그먼트에서는 Angular의 강력한 기능인 서비스, 라우팅, 폼, HTTP 상호작용 등을 탐험할 예정입니다.</p>\n<p>계속 주목해 주세요! Angular 탐험의 두 번째 부분은 학습 여정의 흥미로운 이어짐을 약속합니다. 여기서는 최신 대화형 웹 애플리케이션을 쉽게 구축할 수 있는 도구와 기술을 발견할 것입니다. 그동안 배운 내용을 탐험하고 연습하며 Angular에 대한 이해를 견고히 다지는 것이 가장 좋은 방법이며 개발 전문성이 발전하는 길을 열어줄 것입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}