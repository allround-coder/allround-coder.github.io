{"pageProps":{"post":{"title":"상위 1 웹 개발자가 되기 위해 꼭 가져야 할 10가지 기술","description":"","date":"2024-06-23 13:02","slug":"2024-06-23-10must-haveskillstobecomeatop1webdeveloper","content":"\n\n\n![Image](/assets/img/2024-06-23-10must-haveskillstobecomeatop1webdeveloper_0.png)\n\n웹 개발자가 반드시 갖추어야 할 10가지 필수 기술…\n\n이미 알고 있을 수 있는 웹 기초부터 시작하여 브라우저 개발 도구를 활용하고 AI로 빠르게 코딩하는 것과 같은 중요한 기술까지 배워보세요.\n\n이론적 지식보다는 실제 행동에 초점을 맞춘 것을 알 수 있죠 — 왜냐하면 그것이 중요하기 때문입니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 1. HTML essentials: Create a basic functional web page\n\n웹 사이트의 핵심 뼈대에 대해 알아보세요.\n\n다음과 같이 진행해보세요:\n\n- 편집기에서 HTML 페이지를 만들고 브라우저에서 엽니다\n- 페이지 제목 및 아이콘 설정\n- 텍스트 단락 만들기\n- 제목 만들기\n- 다른 페이지로 연결하는 링크 만들기\n- 이미지 표시\n- 테이블 데이터 표시\n- 요소 목록 표시\n- 폼을 사용하여 입력 처리\n- 주석 만들기 및 코드 주석 처리\n- 시맨틱 HTML로 페이지를 더 유의미하게 만들기\n\n<div class=\"content-ad\"></div>\n\n일부 사람들은 CSS 때문에 시맨틱 HTML이 무의미하다고 생각하지만, 그들은 틀렸어요.\n\n접근성과 페이지 내용을 검색 엔진에 설명하여 결과 페이지에서 높은 순위를 얻는 데 여전히 중요합니다.\n\n\n![image](/assets/img/2024-06-23-10must-haveskillstobecomeatop1webdeveloper_1.png)\n\n\n시맨틱 요소가 없다면, 모든 것에 'div'를 사용하는 개발자들처럼 될 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n# 2. CSS 핵심: 웹 페이지 스타일링\n\n이렇게 변화시킬 수 있어요:\n\n![Before and after](/assets/img/2024-06-23-10must-haveskillstobecomeatop1webdeveloper_2.png)\n\n<div class=\"content-ad\"></div>\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/0*OjV0rbJN2AKW1VAh.gif)\n\n뼈대에 생명을 불어넣는 방법:\n\n- 페이지에 스타일 추가하기\n- 색상 추가: 채우기, 그라데이션, 불투명도, 전경 및 배경 색상\n- 글꼴 사용자 정의: 글꼴 패밀리, 크기, 스타일, 두께, 웹 안전한 글꼴, Google Fonts\n- 레이아웃 만들기: 여백 및 안팎 간격, 시각적 쌓임, 상대적 정렬\n- 배경 추가 및 사용자 정의\n- 애니메이션 및 전환으로 더 매력적으로 꾸미기\n- 특정 상태 및 요소 부분에 스타일 적용: 가상 선택자 및 가상 클래스\n- 모양 사용자 정의: 외곽선 및 테두리, 높이, 너비\n- 스타일 재사용: CSS 변수\n- 모든 화면 크기에 대해 멋지게 보이도록 페이지 스타일링하기: 미디어 쿼리, 반응형 이미지\n- 프레임워크로 더 빨리 스타일링하기: Tailwind, Sass\n\n<div class=\"content-ad\"></div>\n\n# 3. JavaScript essentials\n\n웹 페이지에 상호 작용성을 추가하고 일어나는 일들을 만드는 방법:\n\n# 기본 사항\n\n코딩을 처음 시작하신 분들에게:\n\n<div class=\"content-ad\"></div>\n\n어떻게:\n\n- 프로그래밍에 대해 생각해보기\n- 페이지에 JavaScript 코드 추가\n- 출력하기: alert(), innerHTML, console logging\n- 데이터 관리하기 — 변수 만들기, 사용하기, 업데이트하기, 출력하기: 데이터 타입, 스코프\n- 주석 작성하기 및 기존 코드를 주석 처리하기\n- 동작 재사용하기: 함수 만들기 및 호출하기: 구문, 매개변수 및 인자, 반환 값, 타입, 스코프\n- 현실 세계 엔티티를 나타내는 객체들 생성하기: 데이터 및 변수, 동작 및 메소드, 중첩된 객체\n- 페이지의 요소 선택 및 조작하기: getElementById, querySelector, 메소드 및 속성 사용 등\n- 입력 및 이벤트 처리하기: 웹 페이지에서 등\n- 문자열로 텍스트 조작하기: 여러 줄, 부분 문자열, 대소문자, 연결, 보간, 분할 및 결합, 자르기 및 채우기, 검색 및 대체, 정규 표현식\n- 목록 사용하기: 초기화, 추가, 업데이트, 제거, 반복, 변환, 검색, 필터, 정렬, 역순\n- 날짜와 시간 사용하기: 생성, 업데이트, 형식화 및 표시\n- 조건부로 데이터 가져오거나 동작하기: if/else, switch, 삼항 연산자, 사전 선택\n- 조건부로 계속해서 동작하기: while, do while, for, break, continue\n- TypeScript로 개발 환경 업그레이드하기: 타입, 제네릭, 인터페이스, 트랜스 파일링, 구성 설정 등.\n\n# 클라이언트 측 개발\n\n당신은 코딩 기초를 알고 계시겠지만, 브라우저에 특히적인 JS 코드를 작성할 수 있나요?\n\n<div class=\"content-ad\"></div>\n\n아래와 같은 방법으로:\n\n- 서버에 네트워크 요청을 보내는 방법: fetch() API, HTTP 동사, 데이터 전송 및 수신\n- UI 상태 다루기: 비어 있는 상태, 로딩 중인 상태, 오류가 발생한 상태, 일부만 화면에 나타낸 상태, 이상적인 상태\n- 데이터를 로컬에 저장하기: 쿠키, 로컬 저장소, 세션 저장소 등\n- 코드를 구성하고 패키지화하는 방법: 모듈 및 모듈 번들러\n- 폼 입력 처리하기\n- NPM 패키지를 사용하여 더 빠르게 코딩하는 방법\n\n# 4. 개발 도구로 삶의 질 개선하기\n\n아래와 같은 방법으로:\n\n<div class=\"content-ad\"></div>\n\n- 콘솔 로그를 만들고 검사하고 필터링하세요: 정보, 오류, 경고\n- 임시 스크립트 및 작업을 추가하세요\n- HTML 요소를 검사, 선택, 및 디버그하세요\n- 스타일을 임시로 수정하세요\n- 네트워크 요청을 모니터링하세요\n- 여러 화면 크기에서 페이지를 테스트하세요\n- 더 빨리 개발하기 위해 편집기 확장 기능을 설치하세요\n- 편집기 테마, 글꼴 및 설정을 사용자 정의하여 개발을 더 즐기세요\n- 통합된 디버거를 사용하세요\n- Emmet을 포함한 스니펫을 사용하여 더 빠르게 코드를 작성하세요\n- 키보드 단축키를 사용하여 더 빨리 개발하세요\n- AI를 사용하여 더 빨리 개발하세요\n\n# 5. 사이트 성능 향상\n\n방법:\n\n- 성능을 측정하세요\n- 인지 성능을 향상시키세요\n- 핵심 웹 핵심 지표 개선: LCP, CLS, INP\n- 일반적인 리소스 전달을 최적화하세요: 캐싱,\n- 이미지를 최적화하세요: 압축, WebP\n- 이미지와 비디오를 지연 로드하세요\n- CSS를 최적화하세요\n- 웹 글꼴을 최적화하세요: 압축, 스와핑 등.\n\n<div class=\"content-ad\"></div>\n\n# 6. 자바스크립트 프레임워크: 빠르게 개발하기\n\nReact, Angular 또는 Vue인 경우에 관계없이 모두 동일한 기본 개념을 가지고 있습니다.\n\n다음 방법에 대해 알아 봅시다:\n\n- 컴포넌트를 생성하고 재사용합니다\n- 컴포넌트에서 데이터를 수락하고 표시합니다: 데이터 바인딩, 조건부 렌더링 등\n- 컴포넌트에서 상태를 관리합니다\n- 목록 데이터를 표시하고 업데이트합니다\n- 컴포넌트에서 이벤트를 처리합니다\n- 부작용 및 외부 데이터 변경 및 상태 변경을 처리합니다\n- 앱-수준 상태를 관리합니다 — 컴포넌트와 독립적으로\n- 폼 입력을 처리합니다\n- 컴포넌트를 스타일링합니다\n- 프론트엔드 라우팅을 사용한 SPA 네비게이션을 처리합니다\n\n<div class=\"content-ad\"></div>\n\n# 7. 버전 컨트롤: 변경 사항 추적\n\n버전 컨트롤을 사용하면 코드베이스 전체의 변경 사항을 추적하고 실험하는 것이 쉬워집니다.\n\n방법:\n\n- 로컬 저장소를 만들어 코드 및 에셋을 저장합니다.\n- 파일 및 변경 사항을 스테이징하고 커밋합니다: 최선의 방법, 등.\n- .gitignore를 사용하여 파일 무시\n- 이전 커밋 가져오기\n- 새 브랜치 생성: 최신 또는 이전 커밋에서\n- 브랜치 병합: 병합 충돌 해결 등.\n\n<div class=\"content-ad\"></div>\n\n# Git & GitHub\n\n다음을 참고하세요:\n\n- 자신의 GitHub 레포지토리 만들기: README.md, 라이센스 등\n- 원격 저장소 사용하기: 만들기, 푸시, 풀, 제거\n- GitHub에서 레포지토리 복제하기\n- GitHub 레포지토리 포크하기\n- GitHub 레포지토리에 풀 리퀘스트 만들기\n\n# 8. 데이터베이스에서 데이터 관리하기\n\n<div class=\"content-ad\"></div>\n\n프론트엔드에 전념하고 있더라도 데이터 처리 및 조작에 대한 이해력을 향상시킬 수 있습니다.\n\n다음을 하는 방법:\n\n- 데이터를 위한 스키마 설계\n- 스키마 구현: 테이블, 키, 데이터 형식, 외래 키, 컬렉션 (NoSQL)\n- 데이터베이스에 데이터 추가\n- 데이터 읽기: 조인, 필터링, 정렬, 검색, 집계\n- 데이터 업데이트\n- 데이터 삭제\n\n# 9. 서버 측 개발\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경하세요.\n\n<div class=\"content-ad\"></div>\n\n- 필요 시 빠르게 학습하기\n- 코드에서 독립적으로 문제 해결하기\n- 디자이너, 클라이언트 및 다른 개발자와 소통하기\n- 디버그하고 인내심을 갖기\n- 필요에 따라 정보를 검색하고 필요에 맞게 처리하기\n\n# 마무리\n\n이 모든 것을 배우면 웹 앱과 사이트의 99%를 높은 품질과 빠른 속도로 처음부터 끝까지 구축할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-23-10must-haveskillstobecomeatop1webdeveloper_0.png"},"coverImage":"/assets/img/2024-06-23-10must-haveskillstobecomeatop1webdeveloper_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-10must-haveskillstobecomeatop1webdeveloper_0.png\" alt=\"Image\"></p>\n<p>웹 개발자가 반드시 갖추어야 할 10가지 필수 기술…</p>\n<p>이미 알고 있을 수 있는 웹 기초부터 시작하여 브라우저 개발 도구를 활용하고 AI로 빠르게 코딩하는 것과 같은 중요한 기술까지 배워보세요.</p>\n<p>이론적 지식보다는 실제 행동에 초점을 맞춘 것을 알 수 있죠 — 왜냐하면 그것이 중요하기 때문입니다.</p>\n<div class=\"content-ad\"></div>\n<h1>1. HTML essentials: Create a basic functional web page</h1>\n<p>웹 사이트의 핵심 뼈대에 대해 알아보세요.</p>\n<p>다음과 같이 진행해보세요:</p>\n<ul>\n<li>편집기에서 HTML 페이지를 만들고 브라우저에서 엽니다</li>\n<li>페이지 제목 및 아이콘 설정</li>\n<li>텍스트 단락 만들기</li>\n<li>제목 만들기</li>\n<li>다른 페이지로 연결하는 링크 만들기</li>\n<li>이미지 표시</li>\n<li>테이블 데이터 표시</li>\n<li>요소 목록 표시</li>\n<li>폼을 사용하여 입력 처리</li>\n<li>주석 만들기 및 코드 주석 처리</li>\n<li>시맨틱 HTML로 페이지를 더 유의미하게 만들기</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>일부 사람들은 CSS 때문에 시맨틱 HTML이 무의미하다고 생각하지만, 그들은 틀렸어요.</p>\n<p>접근성과 페이지 내용을 검색 엔진에 설명하여 결과 페이지에서 높은 순위를 얻는 데 여전히 중요합니다.</p>\n<p><img src=\"/assets/img/2024-06-23-10must-haveskillstobecomeatop1webdeveloper_1.png\" alt=\"image\"></p>\n<p>시맨틱 요소가 없다면, 모든 것에 'div'를 사용하는 개발자들처럼 될 수 있어요.</p>\n<div class=\"content-ad\"></div>\n<h1>2. CSS 핵심: 웹 페이지 스타일링</h1>\n<p>이렇게 변화시킬 수 있어요:</p>\n<p><img src=\"/assets/img/2024-06-23-10must-haveskillstobecomeatop1webdeveloper_2.png\" alt=\"Before and after\"></p>\n<div class=\"content-ad\"></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/0*OjV0rbJN2AKW1VAh.gif\" alt=\"이미지\"></p>\n<p>뼈대에 생명을 불어넣는 방법:</p>\n<ul>\n<li>페이지에 스타일 추가하기</li>\n<li>색상 추가: 채우기, 그라데이션, 불투명도, 전경 및 배경 색상</li>\n<li>글꼴 사용자 정의: 글꼴 패밀리, 크기, 스타일, 두께, 웹 안전한 글꼴, Google Fonts</li>\n<li>레이아웃 만들기: 여백 및 안팎 간격, 시각적 쌓임, 상대적 정렬</li>\n<li>배경 추가 및 사용자 정의</li>\n<li>애니메이션 및 전환으로 더 매력적으로 꾸미기</li>\n<li>특정 상태 및 요소 부분에 스타일 적용: 가상 선택자 및 가상 클래스</li>\n<li>모양 사용자 정의: 외곽선 및 테두리, 높이, 너비</li>\n<li>스타일 재사용: CSS 변수</li>\n<li>모든 화면 크기에 대해 멋지게 보이도록 페이지 스타일링하기: 미디어 쿼리, 반응형 이미지</li>\n<li>프레임워크로 더 빨리 스타일링하기: Tailwind, Sass</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>3. JavaScript essentials</h1>\n<p>웹 페이지에 상호 작용성을 추가하고 일어나는 일들을 만드는 방법:</p>\n<h1>기본 사항</h1>\n<p>코딩을 처음 시작하신 분들에게:</p>\n<div class=\"content-ad\"></div>\n<p>어떻게:</p>\n<ul>\n<li>프로그래밍에 대해 생각해보기</li>\n<li>페이지에 JavaScript 코드 추가</li>\n<li>출력하기: alert(), innerHTML, console logging</li>\n<li>데이터 관리하기 — 변수 만들기, 사용하기, 업데이트하기, 출력하기: 데이터 타입, 스코프</li>\n<li>주석 작성하기 및 기존 코드를 주석 처리하기</li>\n<li>동작 재사용하기: 함수 만들기 및 호출하기: 구문, 매개변수 및 인자, 반환 값, 타입, 스코프</li>\n<li>현실 세계 엔티티를 나타내는 객체들 생성하기: 데이터 및 변수, 동작 및 메소드, 중첩된 객체</li>\n<li>페이지의 요소 선택 및 조작하기: getElementById, querySelector, 메소드 및 속성 사용 등</li>\n<li>입력 및 이벤트 처리하기: 웹 페이지에서 등</li>\n<li>문자열로 텍스트 조작하기: 여러 줄, 부분 문자열, 대소문자, 연결, 보간, 분할 및 결합, 자르기 및 채우기, 검색 및 대체, 정규 표현식</li>\n<li>목록 사용하기: 초기화, 추가, 업데이트, 제거, 반복, 변환, 검색, 필터, 정렬, 역순</li>\n<li>날짜와 시간 사용하기: 생성, 업데이트, 형식화 및 표시</li>\n<li>조건부로 데이터 가져오거나 동작하기: if/else, switch, 삼항 연산자, 사전 선택</li>\n<li>조건부로 계속해서 동작하기: while, do while, for, break, continue</li>\n<li>TypeScript로 개발 환경 업그레이드하기: 타입, 제네릭, 인터페이스, 트랜스 파일링, 구성 설정 등.</li>\n</ul>\n<h1>클라이언트 측 개발</h1>\n<p>당신은 코딩 기초를 알고 계시겠지만, 브라우저에 특히적인 JS 코드를 작성할 수 있나요?</p>\n<div class=\"content-ad\"></div>\n<p>아래와 같은 방법으로:</p>\n<ul>\n<li>서버에 네트워크 요청을 보내는 방법: fetch() API, HTTP 동사, 데이터 전송 및 수신</li>\n<li>UI 상태 다루기: 비어 있는 상태, 로딩 중인 상태, 오류가 발생한 상태, 일부만 화면에 나타낸 상태, 이상적인 상태</li>\n<li>데이터를 로컬에 저장하기: 쿠키, 로컬 저장소, 세션 저장소 등</li>\n<li>코드를 구성하고 패키지화하는 방법: 모듈 및 모듈 번들러</li>\n<li>폼 입력 처리하기</li>\n<li>NPM 패키지를 사용하여 더 빠르게 코딩하는 방법</li>\n</ul>\n<h1>4. 개발 도구로 삶의 질 개선하기</h1>\n<p>아래와 같은 방법으로:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>콘솔 로그를 만들고 검사하고 필터링하세요: 정보, 오류, 경고</li>\n<li>임시 스크립트 및 작업을 추가하세요</li>\n<li>HTML 요소를 검사, 선택, 및 디버그하세요</li>\n<li>스타일을 임시로 수정하세요</li>\n<li>네트워크 요청을 모니터링하세요</li>\n<li>여러 화면 크기에서 페이지를 테스트하세요</li>\n<li>더 빨리 개발하기 위해 편집기 확장 기능을 설치하세요</li>\n<li>편집기 테마, 글꼴 및 설정을 사용자 정의하여 개발을 더 즐기세요</li>\n<li>통합된 디버거를 사용하세요</li>\n<li>Emmet을 포함한 스니펫을 사용하여 더 빠르게 코드를 작성하세요</li>\n<li>키보드 단축키를 사용하여 더 빨리 개발하세요</li>\n<li>AI를 사용하여 더 빨리 개발하세요</li>\n</ul>\n<h1>5. 사이트 성능 향상</h1>\n<p>방법:</p>\n<ul>\n<li>성능을 측정하세요</li>\n<li>인지 성능을 향상시키세요</li>\n<li>핵심 웹 핵심 지표 개선: LCP, CLS, INP</li>\n<li>일반적인 리소스 전달을 최적화하세요: 캐싱,</li>\n<li>이미지를 최적화하세요: 압축, WebP</li>\n<li>이미지와 비디오를 지연 로드하세요</li>\n<li>CSS를 최적화하세요</li>\n<li>웹 글꼴을 최적화하세요: 압축, 스와핑 등.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>6. 자바스크립트 프레임워크: 빠르게 개발하기</h1>\n<p>React, Angular 또는 Vue인 경우에 관계없이 모두 동일한 기본 개념을 가지고 있습니다.</p>\n<p>다음 방법에 대해 알아 봅시다:</p>\n<ul>\n<li>컴포넌트를 생성하고 재사용합니다</li>\n<li>컴포넌트에서 데이터를 수락하고 표시합니다: 데이터 바인딩, 조건부 렌더링 등</li>\n<li>컴포넌트에서 상태를 관리합니다</li>\n<li>목록 데이터를 표시하고 업데이트합니다</li>\n<li>컴포넌트에서 이벤트를 처리합니다</li>\n<li>부작용 및 외부 데이터 변경 및 상태 변경을 처리합니다</li>\n<li>앱-수준 상태를 관리합니다 — 컴포넌트와 독립적으로</li>\n<li>폼 입력을 처리합니다</li>\n<li>컴포넌트를 스타일링합니다</li>\n<li>프론트엔드 라우팅을 사용한 SPA 네비게이션을 처리합니다</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>7. 버전 컨트롤: 변경 사항 추적</h1>\n<p>버전 컨트롤을 사용하면 코드베이스 전체의 변경 사항을 추적하고 실험하는 것이 쉬워집니다.</p>\n<p>방법:</p>\n<ul>\n<li>로컬 저장소를 만들어 코드 및 에셋을 저장합니다.</li>\n<li>파일 및 변경 사항을 스테이징하고 커밋합니다: 최선의 방법, 등.</li>\n<li>.gitignore를 사용하여 파일 무시</li>\n<li>이전 커밋 가져오기</li>\n<li>새 브랜치 생성: 최신 또는 이전 커밋에서</li>\n<li>브랜치 병합: 병합 충돌 해결 등.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>Git &#x26; GitHub</h1>\n<p>다음을 참고하세요:</p>\n<ul>\n<li>자신의 GitHub 레포지토리 만들기: README.md, 라이센스 등</li>\n<li>원격 저장소 사용하기: 만들기, 푸시, 풀, 제거</li>\n<li>GitHub에서 레포지토리 복제하기</li>\n<li>GitHub 레포지토리 포크하기</li>\n<li>GitHub 레포지토리에 풀 리퀘스트 만들기</li>\n</ul>\n<h1>8. 데이터베이스에서 데이터 관리하기</h1>\n<div class=\"content-ad\"></div>\n<p>프론트엔드에 전념하고 있더라도 데이터 처리 및 조작에 대한 이해력을 향상시킬 수 있습니다.</p>\n<p>다음을 하는 방법:</p>\n<ul>\n<li>데이터를 위한 스키마 설계</li>\n<li>스키마 구현: 테이블, 키, 데이터 형식, 외래 키, 컬렉션 (NoSQL)</li>\n<li>데이터베이스에 데이터 추가</li>\n<li>데이터 읽기: 조인, 필터링, 정렬, 검색, 집계</li>\n<li>데이터 업데이트</li>\n<li>데이터 삭제</li>\n</ul>\n<h1>9. 서버 측 개발</h1>\n<div class=\"content-ad\"></div>\n<p>테이블 태그를 Markdown 형식으로 변경하세요.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>필요 시 빠르게 학습하기</li>\n<li>코드에서 독립적으로 문제 해결하기</li>\n<li>디자이너, 클라이언트 및 다른 개발자와 소통하기</li>\n<li>디버그하고 인내심을 갖기</li>\n<li>필요에 따라 정보를 검색하고 필요에 맞게 처리하기</li>\n</ul>\n<h1>마무리</h1>\n<p>이 모든 것을 배우면 웹 앱과 사이트의 99%를 높은 품질과 빠른 속도로 처음부터 끝까지 구축할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}