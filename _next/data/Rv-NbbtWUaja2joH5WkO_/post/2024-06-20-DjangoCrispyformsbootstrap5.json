{"pageProps":{"post":{"title":"Django Crispy Forms - Bootstrap5","description":"","date":"2024-06-20 03:25","slug":"2024-06-20-DjangoCrispyformsbootstrap5","content":"\n\n## Django Crispy Forms 설정 및 HTML 템플릿이 Helper Layout을 통해 변경 양식을 받지 않는 이유를 해결하는 중!\n\n대부분의 경우, 필터 구문인 (' form|crispy ')이 기본적인 렌더링에 충분합니다. 그러나 더 많은 제어가 필요하거나 Crispy Forms에서 제공하는 특정 기능을 사용하려면 템플릿 태그 구문인 (' crispy form ')을 선호할 수 있습니다.\n\n— — — — — — — — — — — — — — — — — — — — — — — — — — — — — —\n\n![image](/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_0.png)\n\n<div class=\"content-ad\"></div>\n\n장고 템플릿에서 ' form|crispy ' 및 ' crispy form '은 Crispy Forms 라이브러리를 사용하여 Django 양식을 렌더링하는 두 가지 다른 방법입니다.\n\n- '' form|crispy '' (필터 구문):\n\n- 이것은 Django 템플릿에서의 필터 구문입니다.\n- 변수 equip_form에 필터를 적용하는 데 사용됩니다.\n- 기본 Crispy Forms 렌더링을 사용하여 양식을 렌더링합니다.\n\n예시:\n\n<div class=\"content-ad\"></div>\n\n```js\n{ crispy equip_form }\n```\n\n'crispy equip_form' (템플릿 태그 구문):\n\n- Django 템플릿에서 사용되는 템플릿 태그 구문입니다.\n- 폼을 렌더링하기 위해 명시적으로 crispy 템플릿 태그를 포함하는 데 사용됩니다.\n- 추가 옵션을 지정하고 렌더링 동작을 사용자 정의할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n두 가지 구문은 모두 Crispy Forms를 사용하여 폼을 렌더링하는 동일한 결과를 얻습니다. 어떤 것을 선택할지는 종종 Crispy Forms 라이브러리에서 제공되는 추가 옵션을 사용해야 하는지 또는 렌더링 동작을 사용자 정의해야 하는지에 따라 다릅니다.\n\n--- --- --- --- --- --- --- --- --- --- ---\n\nDjango 프로젝트에 Crispy Forms를 설정해 봅시다.\n\n1. 터미널: pip install django-crispy-forms\n\n<div class=\"content-ad\"></div>\n\n2- settings.py 파일에 다음을 추가하세요:\n\n```python\nINSTALLED_APPS = (\n    ...\n    'crispy_forms',\n)\n```\n\n3- crispy-bootstrap5 추가하기: $ pip install crispy-bootstrap5\n\n```python\nINSTALLED_APPS = (\n    ...\n    \"crispy_forms\",\n    \"crispy_bootstrap5\",\n    ...\n)\n\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\n\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n```\n\n<div class=\"content-ad\"></div>\n\n이 단계에서는 forms.py / views.py / urls.py에서 작업하고 대상 HTML 템플릿에 crispy forms를 로드할 것입니다. 예를 들어:\n\nHTML 페이지 상단에 ( 'extends `app_name/main.html`' 뒤에):\n\n'load crispy_forms_tags'\n\n=================\n\n<div class=\"content-ad\"></div>\n\n```js\r\n<form method=\"post\">\n{ csrf_token }\n<div class=\"card\" style=\"width: 50rem;\">\n<div class=\"card-header\">\n<h6 class=\"card-text\">장비 정보:</h6>\n</div>\n<div class=\"card-body\">\n{ crispy equip_form }\n</div>\n<button type=\"submit\">저장</button>\n</div>\n</form>\r\n```\n\nForms.py 파일에 대한 중요한 내용입니다. Django crispy forms를 사용하면 Python 환경에서 HTML 태그를 변경하고 CSS 클래스를 추가할 수 있습니다.\n\n```js\r\nfrom .models import Equipment\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Layout, Submit, Div, Field, Row, Column\r\n```\n\n```js\r\nclass EquipForm(forms.ModelForm):\n    class Meta:\n        model = Equipment \n        fields = \"__all__\"\r\n```  \n\n<div class=\"content-ad\"></div>\n\n위의 코드는 일반적인 상황에서 양식을 사용하는 방법을 나타냅니다.\n\n그러나 Django crispy 템플릿에서 생성된 표준 HTML 태그를 무시하고 뷰를 재정의할 수 있습니다.\n\n```js\ndef __init__(self, *args, **kwargs):\n        super(EquipForm, self).__init__(*args, **kwargs)\n        #Django 양식의 경우 super().__ init__(*args, **kwargs)를 호출하여 인스턴스화 중에 전달된 데이터로 양식을 초기화합니다. 이는 Python에서 특정한 경우에 발생하는 패턴입니다. 부모 클래스의 메서드를 재정의하고 부모 클래스에서 동일한 메서드를 호출하려는 경우 사용됩니다.\n        \n        #특정 양식에 날짜 위젯 추가:\n        self.fields['effective_date'].widget = forms.DateInput(attrs={'type': 'date'})\n        self.fields['warranty_expiration'].widget = forms.DateInput(attrs={'type': 'date'})\n        #\n```\n\n이제 열과 행으로 양식을 만들어 원하는 위치에 양식 필드를 그룹화하는 방법을 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n\n        self.helper = FormHelper(self)\n        self.helper.layout = Layout(\n        Row(\n            Column('name', css_class='col-md-4'),\n            Column('vendor', css_class='col-md-4'),\n        ),\n        Row(\n            Column('vendor_reference', css_class='col-md-4'),\n            Column('model', css_class='col-md-4'),\n        ),\n        Row(\n            Column('category', css_class='col-md-4'),\n            Column('serial_number', css_class='col-md-4'),\n            Column('used_by', css_class='col-md-4'),\n        ),\n.......\n.......\n\n\n![이미지](/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_1.png)\n\nforms.py에서 필드를 재정의한 후:\n\n![이미지](/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_2.png)\n\n\n<div class=\"content-ad\"></div>\n\n보너스 팁:\n\n다른 경우로, HelperForm 레이아웃을 재정의하여 뷰를 덮어썼지만 CSS 클래스가 변경되지 않는 문제가 발생했습니다. 'form|crispy'이 문제를 발생시키지 않았지만 HTML 소스 페이지를 검사하다가 새로운 css_class가 자식 태그 'div'에 적용되는 것을 발견했습니다. 이는 부모 `Div`를 대상으로하는 방법입니다.\n\n```js\n        self.helper = FormHelper(self)\n        self.helper.form_method = 'post'\n        self.helper.layout = Layout(\n\n        Div(\n            Field('field1', wrapper_class='col-md-6 '), # css_class\n            Field('field2', wrapper_class='col-md-6 '),\n\n            css_class='row',  # 전체 div에 행 클래스 적용 (선택 사항)\n        ),\n```\n\nDjango Crispy-Forms에서 css_class 및 wrapper_class는 양식 필드의 스타일링을 제어하기 위해 FormHelper 레이아웃 내에서 사용되는 속성입니다.\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경해주세요.\n\n\n| css_class:                                              |\n| ------------------------------------------------------- |\n| - 이 속성은 개별 폼 필드에 적용되며, HTML 입력 요소의 CSS 클래스를 지정합니다. |\n| - 이 속성은 폼 요소 자체의 스타일에 직접적으로 영향을 줍니다.         |\n\n예시:\n\n```js\nField('field_name', css_class='my-custom-class')\n```\n\n<div class=\"content-ad\"></div>\n\n`wrapper_class`:\n\n- 이 속성은 폼 필드를 감싸는 HTML 컨테이너에 적용됩니다.\n- 폼 요소 주변의 컨테이너 스타일에 영향을 줍니다.\n\n예시:\n\n```js\nField('field_name', wrapper_class='my-container-class')\n```\n\n<div class=\"content-ad\"></div>\n\n이러한 속성은 FormHelper에서 제공하는 레이아웃 정의에서 사용할 수 있습니다. 예를 들어, Layout 클래스를 사용하여 양식 레이아웃을 만들 때 각 필드에 이러한 속성을 적용할 수 있습니다:\n\n```js\nself.helper.layout = Layout(\n    Field('field1', css_class='my-custom-class'),\n    Field('field2', wrapper_class='my-container-class'),\n    # ... 다른 필드들 ...\n)\n```\n\n요약하면, css_class는 양식 요소 자체의 스타일링에 사용되고, wrapper_class는 양식 요소를 감싸는 컨테이너의 스타일링에 사용됩니다. 이 두 가지는 CSS 클래스를 통해 양식 필드의 모양을 제어하는 방법을 제공합니다.","ogImage":{"url":"/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_0.png"},"coverImage":"/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>Django Crispy Forms 설정 및 HTML 템플릿이 Helper Layout을 통해 변경 양식을 받지 않는 이유를 해결하는 중!</h2>\n<p>대부분의 경우, 필터 구문인 (' form|crispy ')이 기본적인 렌더링에 충분합니다. 그러나 더 많은 제어가 필요하거나 Crispy Forms에서 제공하는 특정 기능을 사용하려면 템플릿 태그 구문인 (' crispy form ')을 선호할 수 있습니다.</p>\n<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — —</p>\n<p><img src=\"/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_0.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p>장고 템플릿에서 ' form|crispy ' 및 ' crispy form '은 Crispy Forms 라이브러리를 사용하여 Django 양식을 렌더링하는 두 가지 다른 방법입니다.</p>\n<ul>\n<li>\n<p>'' form|crispy '' (필터 구문):</p>\n</li>\n<li>\n<p>이것은 Django 템플릿에서의 필터 구문입니다.</p>\n</li>\n<li>\n<p>변수 equip_form에 필터를 적용하는 데 사용됩니다.</p>\n</li>\n<li>\n<p>기본 Crispy Forms 렌더링을 사용하여 양식을 렌더링합니다.</p>\n</li>\n</ul>\n<p>예시:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">{ crispy equip_form }\n</code></pre>\n<p>'crispy equip_form' (템플릿 태그 구문):</p>\n<ul>\n<li>Django 템플릿에서 사용되는 템플릿 태그 구문입니다.</li>\n<li>폼을 렌더링하기 위해 명시적으로 crispy 템플릿 태그를 포함하는 데 사용됩니다.</li>\n<li>추가 옵션을 지정하고 렌더링 동작을 사용자 정의할 수 있습니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>두 가지 구문은 모두 Crispy Forms를 사용하여 폼을 렌더링하는 동일한 결과를 얻습니다. 어떤 것을 선택할지는 종종 Crispy Forms 라이브러리에서 제공되는 추가 옵션을 사용해야 하는지 또는 렌더링 동작을 사용자 정의해야 하는지에 따라 다릅니다.</p>\n<hr>\n<p>Django 프로젝트에 Crispy Forms를 설정해 봅시다.</p>\n<ol>\n<li>터미널: pip install django-crispy-forms</li>\n</ol>\n<div class=\"content-ad\"></div>\n<p>2- settings.py 파일에 다음을 추가하세요:</p>\n<pre><code class=\"hljs language-python\">INSTALLED_APPS = (\n    ...\n    <span class=\"hljs-string\">'crispy_forms'</span>,\n)\n</code></pre>\n<p>3- crispy-bootstrap5 추가하기: $ pip install crispy-bootstrap5</p>\n<pre><code class=\"hljs language-python\">INSTALLED_APPS = (\n    ...\n    <span class=\"hljs-string\">\"crispy_forms\"</span>,\n    <span class=\"hljs-string\">\"crispy_bootstrap5\"</span>,\n    ...\n)\n\nCRISPY_ALLOWED_TEMPLATE_PACKS = <span class=\"hljs-string\">\"bootstrap5\"</span>\n\nCRISPY_TEMPLATE_PACK = <span class=\"hljs-string\">\"bootstrap5\"</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 단계에서는 forms.py / views.py / urls.py에서 작업하고 대상 HTML 템플릿에 crispy forms를 로드할 것입니다. 예를 들어:</p>\n<p>HTML 페이지 상단에 ( 'extends <code>app_name/main.html</code>' 뒤에):</p>\n<p>'load crispy_forms_tags'</p>\n<p>=================</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;form method=<span class=\"hljs-string\">\"post\"</span>>\n{ csrf_token }\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"card\"</span> style=<span class=\"hljs-string\">\"width: 50rem;\"</span>>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-header\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h6</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-text\"</span>></span>장비 정보:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h6</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-body\"</span>></span>\n{ crispy equip_form }\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>></span>저장<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n&#x3C;/div>\n&#x3C;/form>\n</code></pre>\n<p>Forms.py 파일에 대한 중요한 내용입니다. Django crispy forms를 사용하면 Python 환경에서 HTML 태그를 변경하고 CSS 클래스를 추가할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> .<span class=\"hljs-property\">models</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Equipment</span>\n<span class=\"hljs-keyword\">from</span> crispy_forms.<span class=\"hljs-property\">helper</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">FormHelper</span>\n<span class=\"hljs-keyword\">from</span> crispy_forms.<span class=\"hljs-property\">layout</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Layout</span>, <span class=\"hljs-title class_\">Submit</span>, <span class=\"hljs-title class_\">Div</span>, <span class=\"hljs-title class_\">Field</span>, <span class=\"hljs-title class_\">Row</span>, <span class=\"hljs-title class_\">Column</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EquipForm</span>(forms.<span class=\"hljs-property\">ModelForm</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n        model = <span class=\"hljs-title class_\">Equipment</span> \n        fields = <span class=\"hljs-string\">\"__all__\"</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>위의 코드는 일반적인 상황에서 양식을 사용하는 방법을 나타냅니다.</p>\n<p>그러나 Django crispy 템플릿에서 생성된 표준 HTML 태그를 무시하고 뷰를 재정의할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">__init__</span>(self, *args, **kwargs):\n        <span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-title class_\">EquipForm</span>, self).<span class=\"hljs-title function_\">__init__</span>(*args, **kwargs)\n        #<span class=\"hljs-title class_\">Django</span> 양식의 경우 <span class=\"hljs-variable language_\">super</span>().<span class=\"hljs-property\">__</span> <span class=\"hljs-title function_\">init__</span>(*args, **kwargs)를 호출하여 인스턴스화 중에 전달된 데이터로 양식을 초기화합니다. 이는 <span class=\"hljs-title class_\">Python</span>에서 특정한 경우에 발생하는 패턴입니다. 부모 클래스의 메서드를 재정의하고 부모 클래스에서 동일한 메서드를 호출하려는 경우 사용됩니다.\n        \n        #특정 양식에 날짜 위젯 추가:\n        self.<span class=\"hljs-property\">fields</span>[<span class=\"hljs-string\">'effective_date'</span>].<span class=\"hljs-property\">widget</span> = forms.<span class=\"hljs-title class_\">DateInput</span>(attrs={<span class=\"hljs-string\">'type'</span>: <span class=\"hljs-string\">'date'</span>})\n        self.<span class=\"hljs-property\">fields</span>[<span class=\"hljs-string\">'warranty_expiration'</span>].<span class=\"hljs-property\">widget</span> = forms.<span class=\"hljs-title class_\">DateInput</span>(attrs={<span class=\"hljs-string\">'type'</span>: <span class=\"hljs-string\">'date'</span>})\n        #\n</code></pre>\n<p>이제 열과 행으로 양식을 만들어 원하는 위치에 양식 필드를 그룹화하는 방법을 살펴보겠습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code>    self.helper = FormHelper(self)\n    self.helper.layout = Layout(\n    Row(\n        Column('name', css_class='col-md-4'),\n        Column('vendor', css_class='col-md-4'),\n    ),\n    Row(\n        Column('vendor_reference', css_class='col-md-4'),\n        Column('model', css_class='col-md-4'),\n    ),\n    Row(\n        Column('category', css_class='col-md-4'),\n        Column('serial_number', css_class='col-md-4'),\n        Column('used_by', css_class='col-md-4'),\n    ),\n</code></pre>\n<p>.......\n.......</p>\n<p><img src=\"/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_1.png\" alt=\"이미지\"></p>\n<p>forms.py에서 필드를 재정의한 후:</p>\n<p><img src=\"/assets/img/2024-06-20-DjangoCrispyformsbootstrap5_2.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>보너스 팁:</p>\n<p>다른 경우로, HelperForm 레이아웃을 재정의하여 뷰를 덮어썼지만 CSS 클래스가 변경되지 않는 문제가 발생했습니다. 'form|crispy'이 문제를 발생시키지 않았지만 HTML 소스 페이지를 검사하다가 새로운 css_class가 자식 태그 'div'에 적용되는 것을 발견했습니다. 이는 부모 <code>Div</code>를 대상으로하는 방법입니다.</p>\n<pre><code class=\"hljs language-js\">        self.<span class=\"hljs-property\">helper</span> = <span class=\"hljs-title class_\">FormHelper</span>(self)\n        self.<span class=\"hljs-property\">helper</span>.<span class=\"hljs-property\">form_method</span> = <span class=\"hljs-string\">'post'</span>\n        self.<span class=\"hljs-property\">helper</span>.<span class=\"hljs-property\">layout</span> = <span class=\"hljs-title class_\">Layout</span>(\n\n        <span class=\"hljs-title class_\">Div</span>(\n            <span class=\"hljs-title class_\">Field</span>(<span class=\"hljs-string\">'field1'</span>, wrapper_class=<span class=\"hljs-string\">'col-md-6 '</span>), # css_<span class=\"hljs-keyword\">class</span>\n            <span class=\"hljs-title class_\">Field</span>(<span class=\"hljs-string\">'field2'</span>, wrapper_class=<span class=\"hljs-string\">'col-md-6 '</span>),\n\n            css_class=<span class=\"hljs-string\">'row'</span>,  # 전체 div에 행 클래스 적용 (선택 사항)\n        ),\n</code></pre>\n<p>Django Crispy-Forms에서 css_class 및 wrapper_class는 양식 필드의 스타일링을 제어하기 위해 FormHelper 레이아웃 내에서 사용되는 속성입니다.</p>\n<div class=\"content-ad\"></div>\n<p>테이블 태그를 마크다운 형식으로 변경해주세요.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>css_class:</th></tr></thead><tbody><tr><td>- 이 속성은 개별 폼 필드에 적용되며, HTML 입력 요소의 CSS 클래스를 지정합니다.</td></tr><tr><td>- 이 속성은 폼 요소 자체의 스타일에 직접적으로 영향을 줍니다.</td></tr></tbody></table>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Field</span>(<span class=\"hljs-string\">'field_name'</span>, css_class=<span class=\"hljs-string\">'my-custom-class'</span>)\n</code></pre>\n<div class=\"content-ad\"></div>\n<p><code>wrapper_class</code>:</p>\n<ul>\n<li>이 속성은 폼 필드를 감싸는 HTML 컨테이너에 적용됩니다.</li>\n<li>폼 요소 주변의 컨테이너 스타일에 영향을 줍니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Field</span>(<span class=\"hljs-string\">'field_name'</span>, wrapper_class=<span class=\"hljs-string\">'my-container-class'</span>)\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이러한 속성은 FormHelper에서 제공하는 레이아웃 정의에서 사용할 수 있습니다. 예를 들어, Layout 클래스를 사용하여 양식 레이아웃을 만들 때 각 필드에 이러한 속성을 적용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">self.<span class=\"hljs-property\">helper</span>.<span class=\"hljs-property\">layout</span> = <span class=\"hljs-title class_\">Layout</span>(\n    <span class=\"hljs-title class_\">Field</span>(<span class=\"hljs-string\">'field1'</span>, css_class=<span class=\"hljs-string\">'my-custom-class'</span>),\n    <span class=\"hljs-title class_\">Field</span>(<span class=\"hljs-string\">'field2'</span>, wrapper_class=<span class=\"hljs-string\">'my-container-class'</span>),\n    # ... 다른 필드들 ...\n)\n</code></pre>\n<p>요약하면, css_class는 양식 요소 자체의 스타일링에 사용되고, wrapper_class는 양식 요소를 감싸는 컨테이너의 스타일링에 사용됩니다. 이 두 가지는 CSS 클래스를 통해 양식 필드의 모양을 제어하는 방법을 제공합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}