{"pageProps":{"post":{"title":"내 Neovim 설정 React, TypeScript, Tailwind CSS 등","description":"","date":"2024-06-20 05:27","slug":"2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc","content":"\n\n<img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_0.png\" />\n\n안녕하세요, 타쿠야입니다. 제 어플리케이션 인크드롭(Inkdrop)을 코딩하기 위해 주로 Neovim을 사용하는 것을 아시겠지만, 인크드롭은 크로스 플랫폼 마크다운 노트 앱입니다. 데스크탑용으로는 일렉트론(Electron), 모바일 플랫폼으로는 리액트 네이티브(React Native)로 만들어졌습니다. 지난 번 Neovim 설정을 올린 지 1년이 지났네요. Neovim과 관련 플러그인들이 아주 잘 발전했습니다. 그래서 리액트와 타입스크립트 기반의 앱 개발을 위한 제 최신 설정을 공유하고 싶습니다. 주요 변화 중 하나는 설정 파일이 이제 Lua로 작성되었다는 점입니다. vim-plug에서 Packer로 변경했습니다. 그리고 M1 MacBook Air에서 Neovim을 처음부터 설정하는 방법에 대한 튜토리얼 비디오도 만들었습니다. 이미 여러분들께서 자신만의 도트 파일을 보유하고 계신다면, 제 설정을 선택적으로 사용해보세요. 즐겨주시기 바랍니다!\n\n# 재료\n\n여기 제 설정의 간단한 요약입니다:\n\n<div class=\"content-ad\"></div>\n\n- Neovim `= 0.7\r\n- wbthomason/packer.nvim — Neovim을 위한 플러그인 매니저\r\n- svrana/neosolarized.nvim — Truecolor, 솔라라이즈드 다크 컬러스킴\r\n- nvim-lualine/lualine.nvim — Lua로 작성된 Neovim 스테이터스 라인으로 빠르고 쉽게 구성할 수 있습니다.\r\n- onsails/lspkind-nvim — VSCode와 유사한 픽토그램들\r\n- L3MON4D3/LuaSnip — Lua로 작성된 Neovim을 위한 스니펫 엔진\r\n- hrsh7th/cmp-nvim-lsp — Neovim의 내장 LSP를 위한 nvim-cmp 소스\r\n- hrsh7th/cmp-buffer — 버퍼 단어를 위한 nvim-cmp 소스\r\n- hrsh7th/nvim-cmp — Lua로 작성된 Neovim을 위한 완성 엔진 플러그인\r\n- neovim/nvim-lspconfig — Neovim의 내장 LSP 구성 모음\r\n- jose-elias-alvarez/null-ls.nvim — Lua를 통해 LSP 진단, 코드 액션 등을 삽입하기 위해 Neovim을 언어 서버로 사용합니다.\r\n- MunifTanjim/prettier.nvim - Neovim의 내장 LSP 클라이언트를 위한 Prettier 플러그인\r\n- williamboman/mason.nvim - Neovim에서 동작하는 이동 가능한 패키지 매니저로 LSP 서버, DAP 서버, 린터 및 포매터를 쉽게 설치하고 관리할 수 있습니다.\r\n- williamboman/mason-lspconfig.nvim - mason.nvim의 확장으로 mason.nvim과 lspconfig를 쉽게 사용할 수 있도록 합니다.\r\n- glepnir/lspsaga.nvim - 높은 성능의 UI를 갖춘 neovim의 내장 LSP를 기반으로 한 가벼운 lsp 플러그인\r\n- nvim-treesitter/nvim-treesitter - Neovim을 위한 Treesitter 구성 및 추상화 레이어\r\n- kyazdani42/nvim-web-devicons - neovim용 vim-web-devicons의 Lua 포크\r\n- nvim-telescope/telescope.nvim - 리스트를 통해 확장 가능한 퍼지 찾기 도구\r\n- nvim-telescope/telescope-file-browser.nvim - telescope.nvim의 파일 브라우저 확장\r\n- windwp/nvim-autopairs - 자동 괄호 기능\r\n- windwp/nvim-ts-autotag - Treesitter를 사용하여 html 태그를 자동으로 닫고 이름을 바꿉니다.\r\n- norcalli/nvim-colorizer.lua - 고성능 색상 강조 플러그인\r\n- akinsho/nvim-bufferline.lua - 멋진 버퍼 라인\r\n- lewis6991/gitsigns.nvim - 버퍼용 Git 통합\r\n- dinhhuy258/git.nvim - 플러그인 vim-fugitive의 단순한 클론\r\n- folke/zen-mode.nvim - 산만한 모드\r\n- iamcco/markdown-preview.nvim - Markdown 실시간 미리보기\r\n\r\n그리고 여기가 제 dotfiles 저장소입니다.\r\n\r\n튜토리얼 비디오 (YouTube):\r\n\r\n# 사전 요구 사항 — iTerm2 및 Patched Nerd 글꼴\n\n<div class=\"content-ad\"></div>\n\niTerm2는 macOS용 빠른 터미널 에뮬레이터입니다. 터미널에서 멋진 글리프를 표시하기 위해 Nerd Fonts 중 하나를 설치하세요. 저는 현재 Hack을 사용하고 있어요. 그리고 터미널 앱에서 사용해보세요. 예를 들어, iTerm2에서:\n\n[2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_1.png](/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_1.png)를 확인해보세요.\n\n# Homebrew를 통해 Neovim 설치하기\n\n간단합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nbrew install neovim\n```\n\n# 디렉토리 구조\n\nNeovim은 XDG 기본 디렉토리 구조를 준수합니다. 여기는 내 설정 파일 구조입니다:\n\n```js\n📂 ~/.config/nvim\n├── 📁 after\n│  └── 📁 plugin\n├── 📂 lua\n│  └── 🌑 base.lua\n├── 📁 plugin\n└── 🇻 init.lua\n```\n\n<div class=\"content-ad\"></div>\n\nNeovim은 $HOME/.config/nvim/init.vim 또는 init.lua를 $HOME/.vimrc 대신 먼저로드합니다. 자세한 내용은 퀵스타트 가이드를 확인해보세요:\n\n## 플러그인 매니저 설치: Packer\n\n아래 명령어를 실행하여 Packer를 설치하세요:\n\n```bash\ngit clone --depth 1 https://github.com/wbthomason/packer.nvim \\\n~/.local/share/nvim/site/pack/packer/start/packer.nvim\n```\n\n<div class=\"content-ad\"></div>\n\n그러면, 다음과 같이 `.config/nvim/lua/plugins.lua` 파일을 만들어주세요:\n\n```lua\nlocal status, packer = pcall(require, \"packer\")\nif (not status) then\n  print(\"Packer가 설치되지 않았습니다\")\n  return\nend\n\nvim.cmd [[packadd packer.nvim]]\n\npacker.startup(function(use)\n  use 'wbthomason/packer.nvim'\n  -- 여기에 사용할 플러그인을 추가하세요\nend)\n```\n\n그런 다음, `init.lua`에서 다음과 같이 불러오세요:\n\n```lua\nrequire('plugins') \n```\n\n<div class=\"content-ad\"></div>\n\n# 색 구성표: Neosolarized\n\n![이미지](/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_2.png)\n\n저는 svrana/neosolarized.nvim을 일부 사용자 지정과 함께 사용합니다.\n\n```lua\nlocal status, n = pcall(require, \"neosolarized\")\nif (not status) then return end\n\nn.setup({\n  comment_italics = true,\n})\n\nlocal cb = require('colorbuddy.init')\nlocal Color = cb.Color\nlocal colors = cb.colors\nlocal Group = cb.Group\nlocal groups = cb.groups\nlocal styles = cb.styles\n\nColor.new('black', '#000000')\nGroup.new('CursorLine', colors.none, colors.base03, styles.NONE, colors.base1)\nGroup.new('CursorLineNr', colors.yellow, colors.black, styles.NONE, colors.base1)\nGroup.new('Visual', colors.none, colors.base03, styles.reverse)\n  \nlocal cError = groups.Error.fg\nlocal cInfo = groups.Information.fg\nlocal cWarn = groups.Warning.fg\nlocal cHint = groups.Hint.fg\n\nGroup.new(\"DiagnosticVirtualTextError\", cError, cError:dark():dark():dark():dark(), styles.NONE)\nGroup.new(\"DiagnosticVirtualTextInfo\", cInfo, cInfo:dark():dark():dark(), styles.NONE)\nGroup.new(\"DiagnosticVirtualTextWarn\", cWarn, cWarn:dark():dark():dark(), styles.NONE)\nGroup.new(\"DiagnosticVirtualTextHint\", cHint, cHint:dark():dark():dark(), styles.NONE)\nGroup.new(\"DiagnosticUnderlineError\", colors.none, colors.none, styles.undercurl, cError)\nGroup.new(\"DiagnosticUnderlineWarn\", colors.none, colors.none, styles.undercurl, cWarn)\nGroup.new(\"DiagnosticUnderlineInfo\", colors.none, colors.none, styles.undercurl, cInfo)\nGroup.new(\"DiagnosticUnderlineHint\", colors.none, colors.none, styles.undercurl, cHint)\n```  \n\n<div class=\"content-ad\"></div>\n\n# 상태 라인: Lualine\n\n![이미지](/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_3.png)\n\nnvim-lualine/lualine.nvim은 상태 행을 유연하게 구성할 수 있는 방법을 제공합니다.\n\n```lua\nlocal status, lualine = pcall(require, \"lualine\")\nif (not status) then return end\n\nlualine.setup {\n  options = {\n    icons_enabled = true,\n    theme = 'solarized_dark',\n    section_separators = { left = '', right = '' },\n    component_separators = { left = '', right = '' },\n    disabled_filetypes = {}\n  },\n  sections = {\n    lualine_a = { 'mode' },\n    lualine_b = { 'branch' },\n    lualine_c = { {\n      'filename',\n      file_status = true, -- 파일 상태 표시(읽기 전용 상태, 수정된 상태)\n      path = 0 -- 0 = 파일 이름만, 1 = 상대 경로, 2 = 절대 경로\n    } },\n    lualine_x = {\n      { 'diagnostics', sources = { \"nvim_diagnostic\" }, symbols = { error = ' ', warn = ' ', info = ' ',\n        hint = ' ' } },\n      'encoding',\n      'filetype'\n    },\n    lualine_y = { 'progress' },\n    lualine_z = { 'location' }\n  },\n  inactive_sections = {\n    lualine_a = {},\n    lualine_b = {},\n    lualine_c = { {\n      'filename',\n      file_status = true, -- 파일 상태 표시(읽기 전용 상태, 수정된 상태)\n      path = 1 -- 0 = 파일 이름만, 1 = 상대 경로, 2 = 절대 경로\n    } },\n    lualine_x = { 'location' },\n    lualine_y = {},\n    lualine_z = {}\n  },\n  tabline = {},\n  extensions = { 'fugitive' }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# Lspconfig\n\nNeovim에는 내장 LSP 지원이 있습니다. neovim/nvim-lspconfig를 사용하여 쉽게 구성할 수 있습니다. 예를 들어, Neovim에서 typescript 언어 서버를 활성화하려면:\n\n```js\nlocal status, nvim_lsp = pcall(require, \"lspconfig\")\nif (not status) then return end\n\nlocal protocol = require('vim.lsp.protocol')\n\nlocal on_attach = function(client, bufnr)\n  -- 저장 시 형식 지정\n  if client.server_capabilities.documentFormattingProvider then\n    vim.api.nvim_create_autocmd(\"BufWritePre\", {\n      group = vim.api.nvim_create_augroup(\"Format\", { clear = true }),\n      buffer = bufnr,\n      callback = function() vim.lsp.buf.formatting_seq_sync() end\n    })\n  end\nend\n\n-- TypeScript\nnvim_lsp.tsserver.setup {\n  on_attach = on_attach,\n  filetypes = { \"typescript\", \"typescriptreact\", \"typescript.tsx\" },\n  cmd = { \"typescript-language-server\", \"--stdio\" }\n} \n```\n\n타입스크립트 언어 서버를 설치하는 것을 잊지 마세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm i -g typescript-language-server\n```\n\n# 자동 완성: Lspkind 및 cmp\n\n<img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_4.png\" />\n\n팬시한 픽토그램이 포함된 LSP를 인식하는 자동 완성 기능을 얻으려면 다음 플러그인을 사용합니다:\n\n\n<div class=\"content-ad\"></div>\n\n- onsails/lspkind-nvim - VSCode와 비슷한 그림표\n- L3MON4D3/LuaSnip - 스니펫 엔진\n- hrsh7th/cmp-nvim-lsp - neovim 내장 LSP용 nvim-cmp 소스\n- hrsh7th/cmp-buffer - 버퍼 단어용 nvim-cmp 소스\n- hrsh7th/nvim-cmp - neovim을 위한 완성 엔진 플러그인\n\n다음과 같이 설정하십시오:\n\n```js\nlocal status, cmp = pcall(require, \"cmp\")\nif (not status) then return end\nlocal lspkind = require 'lspkind'\n\ncmp.setup({\n  snippet = {\n    expand = function(args)\n      require('luasnip').lsp_expand(args.body)\n    end,\n  },\n  mapping = cmp.mapping.preset.insert({\n    ['<C-d>'] = cmp.mapping.scroll_docs(-4),\n    ['<C-f>'] = cmp.mapping.scroll_docs(4),\n    ['<C-Space>'] = cmp.mapping.complete(),\n    ['<C-e>'] = cmp.mapping.close(),\n    ['<CR>'] = cmp.mapping.confirm({\n      behavior = cmp.ConfirmBehavior.Replace,\n      select = true\n    }),\n  }),\n  sources = cmp.config.sources({\n    { name = 'nvim_lsp' },\n    { name = 'buffer' },\n  }),\n  formatting = {\n    format = lspkind.cmp_format({ with_text = false, maxwidth = 50 })\n  }\n})\n\nvim.cmd [[\n  set completeopt=menuone,noinsert,noselect\n  highlight! default link CmpItemKind CmpItemMenuDefault\n]]\n```\n\n# 문법 강조: Treesitter\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_5.png)\n\nTreesitter은 구문 강조를 위한 인기있는 언어 구문 분석기입니다. 먼저 다음을 설치하세요:\n\n```js\nbrew install tree-sitter\n```\n\nPacker를 사용하여 nvim-treesitter/nvim-treesitter를 설치하고 다음과 같이 구성하세요:\n\n\n<div class=\"content-ad\"></div>\n\n```lua\nlocal status, ts = pcall(require, \"nvim-treesitter.configs\")\nif (not status) then return end\n\nts.setup {\n  highlight = {\n    enable = true,\n    disable = {},\n  },\n  indent = {\n    enable = true,\n    disable = {},\n  },\n  ensure_installed = {\n    \"tsx\",\n    \"toml\",\n    \"fish\",\n    \"php\",\n    \"json\",\n    \"yaml\",\n    \"swift\",\n    \"css\",\n    \"html\",\n    \"lua\"\n  },\n  autotag = {\n    enable = true,\n  },\n}\n\nlocal parser_config = require \"nvim-treesitter.parsers\".get_parser_configs()\nparser_config.tsx.filetype_to_parsername = { \"javascript\", \"typescript.tsx\" }\n```\n\n# Autotag and Autopair\n\n리액트 앱에서는 태그를 빠르게 닫고 싶을 때가 많습니다. windwp/nvim-ts-autotag가 정확히 원하는 기능을 제공합니다.\n\n```lua\nlocal status, autotag = pcall(require, \"nvim-ts-autotag\")\nif (not status) then return end\n\nautotag.setup({})\n```\n\n<div class=\"content-ad\"></div>\n\nwindwp/nvim-autopairs는 괄호를 자동으로 닫아주는 플러그인이에요.\n\n```lua\nlocal status, autopairs = pcall(require, \"nvim-autopairs\")\nif (not status) then return end\n\nautopairs.setup({\n  disable_filetype = { \"TelescopePrompt\" , \"vim\" },\n})\n```\n\n# 퍼즈 파인더: Telescope\n\n![이미지](/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_6.png)\n\n<div class=\"content-ad\"></div>\n\ntelescope.nvim은 최신 Neovim 기능을 기반으로 한 목록 위의 대화식 퍼지 파인더를 제공합니다. 또한 filer로 telescope-file-browser.nvim을 사용합니다.\n\n실제로 파일을 열지 않고도 파일의 내용을 보면서 파일을 검색할 수 있어서 매우 유용합니다. Vim, 파일, Git, LSP, Treesitter 등 다양한 소스를 지원합니다. Telescope의 쇼케이스를 확인해보세요.\n\nTelescope, 상태행 및 다른 지원 플러그인에 파일 아이콘을 얻기 위해 kyazdani42/nvim-web-devicons를 설치하세요.\n\n구성은 다음과 같이 보일 것입니다:\n\n<div class=\"content-ad\"></div>\n\n```lua\nlocal status, telescope = pcall(require, \"telescope\")\nif (not status) then return end\nlocal actions = require('telescope.actions')\nlocal builtin = require(\"telescope.builtin\")\n\nlocal function telescope_buffer_dir()\n  return vim.fn.expand('%:p:h')\nend\n\nlocal fb_actions = require \"telescope\".extensions.file_browser.actions\n\ntelescope.setup {\n  defaults = {\n    mappings = {\n      n = {\n        [\"q\"] = actions.close\n      },\n    },\n  },\n}\n\n-- 키맵\nvim.keymap.set('n', ';f',\n  function()\n    builtin.find_files({\n      no_ignore = false,\n      hidden = true\n    })\n  end)\nvim.keymap.set('n', ';r', function()\n  builtin.live_grep()\nend)\nvim.keymap.set('n', '\\\\', function()\n  builtin.buffers()\nend)\nvim.keymap.set('n', ';t', function()\n  builtin.help_tags()\nend)\nvim.keymap.set('n', ';;', function()\n  builtin.resume()\nend)\nvim.keymap.set('n', ';e', function()\n  builtin.diagnostics()\nend)\n```\n\n이미지를 추가했어요: \n\n![이미지](/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_7.png)\n\n텔레스코프 브라우저 확장 기능을 사용합니다:\n\n```lua\ntelescope.setup {\n  defaults = {\n    mappings = {\n      n = {\n        [\"q\"] = actions.close\n      },\n    },\n  },\n  extensions = {\n    file_browser = {\n      theme = \"dropdown\",\n      -- netrw를 비활성화하고 telescope-file-browser를 사용합니다\n      hijack_netrw = true,\n      mappings = {\n        -- 사용자 정의 삽입 모드 매핑\n        [\"i\"] = {\n          [\"<C-w>\"] = function() vim.cmd('normal vbd') end,\n        },\n        [\"n\"] = {\n          -- 사용자 정의 일반 모드 매핑\n          [\"N\"] = fb_actions.create,\n          [\"h\"] = fb_actions.goto_parent_dir,\n          [\"/\"] = function()\n            vim.cmd('startinsert')\n          end\n        },\n      },\n    },\n  },\n}\ntelescope.load_extension(\"file_browser\")\n\nvim.keymap.set(\"n\", \"sf\", function()\n  telescope.extensions.file_browser.file_browser({\n    path = \"%:p:h\",\n    cwd = telescope_buffer_dir(),\n    respect_gitignore = false,\n    hidden = true,\n    grouped = true,\n    previewer = false,\n    initial_mode = \"normal\",\n    layout_config = { height = 40 }\n  })\nend)\n```\n\n<div class=\"content-ad\"></div>\n\n# 탭: 버퍼 라인\n\n<img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_8.png\" />\n\n나는 탭의 보다 멋진 모양을 얻기 위해 akinsho/nvim-bufferline.lua를 사용합니다. Solarized 테마와 더 잘 어울리도록 몇 가지 사용자 정의를 추가했습니다:\n\n```js\nlocal status, bufferline = pcall(require, \"bufferline\")\nif (not status) then return end\n\nbufferline.setup({\n  options = {\n    mode = \"tabs\",\n    separator_style = 'slant',\n    always_show_bufferline = false,\n    show_buffer_close_icons = false,\n    show_close_icon = false,\n    color_icons = true\n  },\n  highlights = {\n    separator = {\n      guifg = '#073642',\n      guibg = '#002b36',\n    },\n    separator_selected = {\n      guifg = '#073642',\n    },\n    background = {\n      guifg = '#657b83',\n      guibg = '#002b36'\n    },\n    buffer_selected = {\n      guifg = '#fdf6e3',\n      gui = \"bold\",\n    },\n    fill = {\n      guibg = '#073642'\n    }\n  },\n})\n\nvim.keymap.set('n', '<Tab>', '<Cmd>BufferLineCycleNext<CR>', {})\nvim.keymap.set('n', '<S-Tab>', '<Cmd>BufferLineCyclePrev<CR>', {})\n```  \n\n<div class=\"content-ad\"></div>\n\n# LSP 설정: Lspsaga\n\n![](/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_9.png)\n\n![](/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_10.png)\n\n![](/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_11.png)\n\n<div class=\"content-ad\"></div>\n\n```js\nlocal status, saga = pcall(require, \"lspsaga\")\nif (not status) then return end\n\nsaga.init_lsp_saga {\n  server_filetype_map = {\n    typescript = 'typescript'\n  }\n}\n\nlocal opts = { noremap = true, silent = true }\nvim.keymap.set('n', '<C-j>', '<Cmd>Lspsaga diagnostic_jump_next<CR>', opts)\nvim.keymap.set('n', 'K', '<Cmd>Lspsaga hover_doc<CR>', opts)\nvim.keymap.set('n', 'gd', '<Cmd>Lspsaga lsp_finder<CR>', opts)\nvim.keymap.set('i', '<C-k>', '<Cmd>Lspsaga signature_help<CR>', opts)\nvim.keymap.set('n', 'gp', '<Cmd>Lspsaga preview_definition<CR>', opts)\nvim.keymap.set('n', 'gr', '<Cmd>Lspsaga rename<CR>', opts)\n```\n\n# Code formatter: Prettier and null-ls\n\n제가 가장 좋아하는 LSP 플러그인 중 하나인 glepnir/lspsaga.nvim은 hover doc, definition preview, rename actions 등과 같은 다양한 LSP 관련 기능에 대한 아름다운 UI를 제공합니다. 제 설정은 간단합니다. typescript 파일에 대해 'typescript' 서버를 매핑하고, 다른 기능에 대한 keymap을 설정합니다.\n\nTypeScript/JavaScript/CSS 파일을 포맷하는 데 Prettier에 큰 의존을 하고 있습니다. 이를 위해 jose-elias-alvarez/null-ls.nvim 및 MunifTanjim/prettier.nvim을 사용합니다.\n\n\n<div class=\"content-ad\"></div>\n\n먼저, prettierd를 설치해야 합니다:\n\n```js\nbrew install prettierd\n```\n\n그런 다음 null-ls를 다음과 같이 구성하세요:\n\n```js\nlocal status, null_ls = pcall(require, \"null-ls\")\nif (not status) then return end\n\nnull_ls.setup({\n  sources = {\n    null_ls.builtins.diagnostics.eslint_d.with({\n      diagnostics_format = '[eslint] #{m}\\n(#{c})'\n    }),\n    null_ls.builtins.diagnostics.fish\n  }\n})\n```\n\n<div class=\"content-ad\"></div>\n\n친화적인 톤으로 번역하면:\n\n```js\nlocal status, prettier = pcall(require, \"prettier\")\nif (not status) then return end\n\nprettier.setup {\n  bin = 'prettierd',\n  filetypes = {\n    \"css\",\n    \"javascript\",\n    \"javascriptreact\",\n    \"typescript\",\n    \"typescriptreact\",\n    \"json\",\n    \"scss\",\n    \"less\"\n  }\n}\n```\n\n# Git 표시: gitsigns\n\n![이미지](/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_12.png)\n\n\n<div class=\"content-ad\"></div>\n\nlewis6991/gitsigns.nvim은 현재 버퍼에 대한 Git 장식을 제공합니다. 현재 변경된 줄을 파악하는 데 도움이 됩니다. 기본 설정으로 작동합니다.\n\n```js\nrequire('gitsigns').setup {}\n```\n\n# git\n\n<img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_13.png\" />\n\n<div class=\"content-ad\"></div>\n\n요즘 제가 자주 사용하는 사이트는 GitHub입니다. dinhhuy258/git.nvim을 사용하면 Neovim에서 바로 GitHub을 열 수 있고, 분할 화면에서 git blame을 볼 수 있어 정말 편리해요.\n\n```js\nlocal status, git = pcall(require, \"git\")\nif (not status) then return end\n\ngit.setup({\n  keymaps = {\n    -- Open blame window\n    blame = \"<Leader>gb\",\n    -- Open file/folder in git repository\n    browse = \"<Leader>go\",\n  }\n})\n```\n\n# LSP 도구: mason\n\n<img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_14.png\" />\n\n<div class=\"content-ad\"></div>\n\n특정 라이브러리에 대한 추가 LSP 지원이 필요하면 williamboman/mason.nvim 및 williamboman/mason-lspconfig.nvim이 필요할 수 있습니다. Neovim에서 Tailwind CSS 언어 서버를 실행하기 위해 사용하고 있어요.\n\n```js\nlocal status, mason = pcall(require, \"mason\")\nif (not status) then return end\nlocal status2, lspconfig = pcall(require, \"mason-lspconfig\")\nif (not status2) then return end\n\nmason.setup({})\n\nlspconfig.setup {\n  ensure_installed = { \"sumneko_lua\", \"tailwindcss\" },\n}\n```\n\n다음으로 lspconfig을 추가하세요:\n\n```js\nlocal nvim_lsp = require \"lspconfig\"\nnvim_lsp.tailwindcss.setup {}\n```\n\n<div class=\"content-ad\"></div>\n\n이것으로 대부분 끝났어요! 네오빔 환경을 개선하는 데 도움이 되길 바랍니다.\n\n# 온라인에서 나를 따르세요\n\n- Inkdrop라는 앱을 확인해보세요 — 마크다운 노트 앱\n- Twitter: [https://twitter.com/inkdrop_app](https://twitter.com/inkdrop_app)\n- 블로그: [https://blog.inkdrop.app/](https://blog.inkdrop.app/)\n- YouTube: [https://www.youtube.com/devaslife](https://www.youtube.com/devaslife)\n- Instagram: [https://instagram.com/craftzdog](https://instagram.com/craftzdog)\n\n![이미지](/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_15.png)","ogImage":{"url":"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_0.png"},"coverImage":"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_0.png","tag":["Tech"],"readingTime":18},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_0.png\">\n<p>안녕하세요, 타쿠야입니다. 제 어플리케이션 인크드롭(Inkdrop)을 코딩하기 위해 주로 Neovim을 사용하는 것을 아시겠지만, 인크드롭은 크로스 플랫폼 마크다운 노트 앱입니다. 데스크탑용으로는 일렉트론(Electron), 모바일 플랫폼으로는 리액트 네이티브(React Native)로 만들어졌습니다. 지난 번 Neovim 설정을 올린 지 1년이 지났네요. Neovim과 관련 플러그인들이 아주 잘 발전했습니다. 그래서 리액트와 타입스크립트 기반의 앱 개발을 위한 제 최신 설정을 공유하고 싶습니다. 주요 변화 중 하나는 설정 파일이 이제 Lua로 작성되었다는 점입니다. vim-plug에서 Packer로 변경했습니다. 그리고 M1 MacBook Air에서 Neovim을 처음부터 설정하는 방법에 대한 튜토리얼 비디오도 만들었습니다. 이미 여러분들께서 자신만의 도트 파일을 보유하고 계신다면, 제 설정을 선택적으로 사용해보세요. 즐겨주시기 바랍니다!</p>\n<h1>재료</h1>\n<p>여기 제 설정의 간단한 요약입니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>Neovim `= 0.7</li>\n<li>wbthomason/packer.nvim — Neovim을 위한 플러그인 매니저</li>\n<li>svrana/neosolarized.nvim — Truecolor, 솔라라이즈드 다크 컬러스킴</li>\n<li>nvim-lualine/lualine.nvim — Lua로 작성된 Neovim 스테이터스 라인으로 빠르고 쉽게 구성할 수 있습니다.</li>\n<li>onsails/lspkind-nvim — VSCode와 유사한 픽토그램들</li>\n<li>L3MON4D3/LuaSnip — Lua로 작성된 Neovim을 위한 스니펫 엔진</li>\n<li>hrsh7th/cmp-nvim-lsp — Neovim의 내장 LSP를 위한 nvim-cmp 소스</li>\n<li>hrsh7th/cmp-buffer — 버퍼 단어를 위한 nvim-cmp 소스</li>\n<li>hrsh7th/nvim-cmp — Lua로 작성된 Neovim을 위한 완성 엔진 플러그인</li>\n<li>neovim/nvim-lspconfig — Neovim의 내장 LSP 구성 모음</li>\n<li>jose-elias-alvarez/null-ls.nvim — Lua를 통해 LSP 진단, 코드 액션 등을 삽입하기 위해 Neovim을 언어 서버로 사용합니다.</li>\n<li>MunifTanjim/prettier.nvim - Neovim의 내장 LSP 클라이언트를 위한 Prettier 플러그인</li>\n<li>williamboman/mason.nvim - Neovim에서 동작하는 이동 가능한 패키지 매니저로 LSP 서버, DAP 서버, 린터 및 포매터를 쉽게 설치하고 관리할 수 있습니다.</li>\n<li>williamboman/mason-lspconfig.nvim - mason.nvim의 확장으로 mason.nvim과 lspconfig를 쉽게 사용할 수 있도록 합니다.</li>\n<li>glepnir/lspsaga.nvim - 높은 성능의 UI를 갖춘 neovim의 내장 LSP를 기반으로 한 가벼운 lsp 플러그인</li>\n<li>nvim-treesitter/nvim-treesitter - Neovim을 위한 Treesitter 구성 및 추상화 레이어</li>\n<li>kyazdani42/nvim-web-devicons - neovim용 vim-web-devicons의 Lua 포크</li>\n<li>nvim-telescope/telescope.nvim - 리스트를 통해 확장 가능한 퍼지 찾기 도구</li>\n<li>nvim-telescope/telescope-file-browser.nvim - telescope.nvim의 파일 브라우저 확장</li>\n<li>windwp/nvim-autopairs - 자동 괄호 기능</li>\n<li>windwp/nvim-ts-autotag - Treesitter를 사용하여 html 태그를 자동으로 닫고 이름을 바꿉니다.</li>\n<li>norcalli/nvim-colorizer.lua - 고성능 색상 강조 플러그인</li>\n<li>akinsho/nvim-bufferline.lua - 멋진 버퍼 라인</li>\n<li>lewis6991/gitsigns.nvim - 버퍼용 Git 통합</li>\n<li>dinhhuy258/git.nvim - 플러그인 vim-fugitive의 단순한 클론</li>\n<li>folke/zen-mode.nvim - 산만한 모드</li>\n<li>iamcco/markdown-preview.nvim - Markdown 실시간 미리보기</li>\n</ul>\n<p>그리고 여기가 제 dotfiles 저장소입니다.</p>\n<p>튜토리얼 비디오 (YouTube):</p>\n<h1>사전 요구 사항 — iTerm2 및 Patched Nerd 글꼴</h1>\n<div class=\"content-ad\"></div>\n<p>iTerm2는 macOS용 빠른 터미널 에뮬레이터입니다. 터미널에서 멋진 글리프를 표시하기 위해 Nerd Fonts 중 하나를 설치하세요. 저는 현재 Hack을 사용하고 있어요. 그리고 터미널 앱에서 사용해보세요. 예를 들어, iTerm2에서:</p>\n<p><a href=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_1.png\">2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_1.png</a>를 확인해보세요.</p>\n<h1>Homebrew를 통해 Neovim 설치하기</h1>\n<p>간단합니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">brew install neovim\n</code></pre>\n<h1>디렉토리 구조</h1>\n<p>Neovim은 XDG 기본 디렉토리 구조를 준수합니다. 여기는 내 설정 파일 구조입니다:</p>\n<pre><code class=\"hljs language-js\">📂 ~<span class=\"hljs-regexp\">/.config/</span>nvim\n├── 📁 after\n│  └── 📁 plugin\n├── 📂 lua\n│  └── 🌑 base.<span class=\"hljs-property\">lua</span>\n├── 📁 plugin\n└── 🇻 init.<span class=\"hljs-property\">lua</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>Neovim은 $HOME/.config/nvim/init.vim 또는 init.lua를 $HOME/.vimrc 대신 먼저로드합니다. 자세한 내용은 퀵스타트 가이드를 확인해보세요:</p>\n<h2>플러그인 매니저 설치: Packer</h2>\n<p>아래 명령어를 실행하여 Packer를 설치하세요:</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">clone</span> --depth 1 https://github.com/wbthomason/packer.nvim \\\n~/.local/share/nvim/site/pack/packer/start/packer.nvim\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>그러면, 다음과 같이 <code>.config/nvim/lua/plugins.lua</code> 파일을 만들어주세요:</p>\n<pre><code class=\"hljs language-lua\"><span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">status</span>, packer = <span class=\"hljs-built_in\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"packer\"</span>)\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">status</span>) <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Packer가 설치되지 않았습니다\"</span>)\n  <span class=\"hljs-keyword\">return</span>\n<span class=\"hljs-keyword\">end</span>\n\nvim.cmd <span class=\"hljs-string\">[[packadd packer.nvim]]</span>\n\npacker.startup(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(use)</span></span>\n  use <span class=\"hljs-string\">'wbthomason/packer.nvim'</span>\n  <span class=\"hljs-comment\">-- 여기에 사용할 플러그인을 추가하세요</span>\n<span class=\"hljs-keyword\">end</span>)\n</code></pre>\n<p>그런 다음, <code>init.lua</code>에서 다음과 같이 불러오세요:</p>\n<pre><code class=\"hljs language-lua\"><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'plugins'</span>) \n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>색 구성표: Neosolarized</h1>\n<p><img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_2.png\" alt=\"이미지\"></p>\n<p>저는 svrana/neosolarized.nvim을 일부 사용자 지정과 함께 사용합니다.</p>\n<pre><code class=\"hljs language-lua\"><span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">status</span>, n = <span class=\"hljs-built_in\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"neosolarized\"</span>)\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">status</span>) <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">end</span>\n\nn.setup({\n  comment_italics = <span class=\"hljs-literal\">true</span>,\n})\n\n<span class=\"hljs-keyword\">local</span> cb = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'colorbuddy.init'</span>)\n<span class=\"hljs-keyword\">local</span> Color = cb.Color\n<span class=\"hljs-keyword\">local</span> colors = cb.colors\n<span class=\"hljs-keyword\">local</span> Group = cb.Group\n<span class=\"hljs-keyword\">local</span> groups = cb.groups\n<span class=\"hljs-keyword\">local</span> styles = cb.styles\n\nColor.new(<span class=\"hljs-string\">'black'</span>, <span class=\"hljs-string\">'#000000'</span>)\nGroup.new(<span class=\"hljs-string\">'CursorLine'</span>, colors.none, colors.base03, styles.NONE, colors.base1)\nGroup.new(<span class=\"hljs-string\">'CursorLineNr'</span>, colors.yellow, colors.black, styles.NONE, colors.base1)\nGroup.new(<span class=\"hljs-string\">'Visual'</span>, colors.none, colors.base03, styles.<span class=\"hljs-built_in\">reverse</span>)\n  \n<span class=\"hljs-keyword\">local</span> cError = groups.Error.fg\n<span class=\"hljs-keyword\">local</span> cInfo = groups.Information.fg\n<span class=\"hljs-keyword\">local</span> cWarn = groups.Warning.fg\n<span class=\"hljs-keyword\">local</span> cHint = groups.Hint.fg\n\nGroup.new(<span class=\"hljs-string\">\"DiagnosticVirtualTextError\"</span>, cError, cError:dark():dark():dark():dark(), styles.NONE)\nGroup.new(<span class=\"hljs-string\">\"DiagnosticVirtualTextInfo\"</span>, cInfo, cInfo:dark():dark():dark(), styles.NONE)\nGroup.new(<span class=\"hljs-string\">\"DiagnosticVirtualTextWarn\"</span>, cWarn, cWarn:dark():dark():dark(), styles.NONE)\nGroup.new(<span class=\"hljs-string\">\"DiagnosticVirtualTextHint\"</span>, cHint, cHint:dark():dark():dark(), styles.NONE)\nGroup.new(<span class=\"hljs-string\">\"DiagnosticUnderlineError\"</span>, colors.none, colors.none, styles.undercurl, cError)\nGroup.new(<span class=\"hljs-string\">\"DiagnosticUnderlineWarn\"</span>, colors.none, colors.none, styles.undercurl, cWarn)\nGroup.new(<span class=\"hljs-string\">\"DiagnosticUnderlineInfo\"</span>, colors.none, colors.none, styles.undercurl, cInfo)\nGroup.new(<span class=\"hljs-string\">\"DiagnosticUnderlineHint\"</span>, colors.none, colors.none, styles.undercurl, cHint)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>상태 라인: Lualine</h1>\n<p><img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_3.png\" alt=\"이미지\"></p>\n<p>nvim-lualine/lualine.nvim은 상태 행을 유연하게 구성할 수 있는 방법을 제공합니다.</p>\n<pre><code class=\"hljs language-lua\"><span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">status</span>, lualine = <span class=\"hljs-built_in\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"lualine\"</span>)\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">status</span>) <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">end</span>\n\nlualine.setup {\n  options = {\n    icons_enabled = <span class=\"hljs-literal\">true</span>,\n    theme = <span class=\"hljs-string\">'solarized_dark'</span>,\n    section_separators = { left = <span class=\"hljs-string\">''</span>, right = <span class=\"hljs-string\">''</span> },\n    component_separators = { left = <span class=\"hljs-string\">''</span>, right = <span class=\"hljs-string\">''</span> },\n    disabled_filetypes = {}\n  },\n  sections = {\n    lualine_a = { <span class=\"hljs-string\">'mode'</span> },\n    lualine_b = { <span class=\"hljs-string\">'branch'</span> },\n    lualine_c = { {\n      <span class=\"hljs-string\">'filename'</span>,\n      file_status = <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">-- 파일 상태 표시(읽기 전용 상태, 수정된 상태)</span>\n      <span class=\"hljs-built_in\">path</span> = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">-- 0 = 파일 이름만, 1 = 상대 경로, 2 = 절대 경로</span>\n    } },\n    lualine_x = {\n      { <span class=\"hljs-string\">'diagnostics'</span>, sources = { <span class=\"hljs-string\">\"nvim_diagnostic\"</span> }, symbols = { <span class=\"hljs-built_in\">error</span> = <span class=\"hljs-string\">' '</span>, warn = <span class=\"hljs-string\">' '</span>, info = <span class=\"hljs-string\">' '</span>,\n        hint = <span class=\"hljs-string\">' '</span> } },\n      <span class=\"hljs-string\">'encoding'</span>,\n      <span class=\"hljs-string\">'filetype'</span>\n    },\n    lualine_y = { <span class=\"hljs-string\">'progress'</span> },\n    lualine_z = { <span class=\"hljs-string\">'location'</span> }\n  },\n  inactive_sections = {\n    lualine_a = {},\n    lualine_b = {},\n    lualine_c = { {\n      <span class=\"hljs-string\">'filename'</span>,\n      file_status = <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">-- 파일 상태 표시(읽기 전용 상태, 수정된 상태)</span>\n      <span class=\"hljs-built_in\">path</span> = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">-- 0 = 파일 이름만, 1 = 상대 경로, 2 = 절대 경로</span>\n    } },\n    lualine_x = { <span class=\"hljs-string\">'location'</span> },\n    lualine_y = {},\n    lualine_z = {}\n  },\n  tabline = {},\n  extensions = { <span class=\"hljs-string\">'fugitive'</span> }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>Lspconfig</h1>\n<p>Neovim에는 내장 LSP 지원이 있습니다. neovim/nvim-lspconfig를 사용하여 쉽게 구성할 수 있습니다. 예를 들어, Neovim에서 typescript 언어 서버를 활성화하려면:</p>\n<pre><code class=\"hljs language-js\">local status, nvim_lsp = <span class=\"hljs-title function_\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"lspconfig\"</span>)\n<span class=\"hljs-keyword\">if</span> (not status) then <span class=\"hljs-keyword\">return</span> end\n\nlocal protocol = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'vim.lsp.protocol'</span>)\n\nlocal on_attach = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">client, bufnr</span>)\n  -- 저장 시 형식 지정\n  <span class=\"hljs-keyword\">if</span> client.<span class=\"hljs-property\">server_capabilities</span>.<span class=\"hljs-property\">documentFormattingProvider</span> then\n    vim.<span class=\"hljs-property\">api</span>.<span class=\"hljs-title function_\">nvim_create_autocmd</span>(<span class=\"hljs-string\">\"BufWritePre\"</span>, {\n      group = vim.<span class=\"hljs-property\">api</span>.<span class=\"hljs-title function_\">nvim_create_augroup</span>(<span class=\"hljs-string\">\"Format\"</span>, { clear = <span class=\"hljs-literal\">true</span> }),\n      buffer = bufnr,\n      callback = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) vim.<span class=\"hljs-property\">lsp</span>.<span class=\"hljs-property\">buf</span>.<span class=\"hljs-title function_\">formatting_seq_sync</span>() end\n    })\n  end\nend\n\n-- <span class=\"hljs-title class_\">TypeScript</span>\nnvim_lsp.<span class=\"hljs-property\">tsserver</span>.<span class=\"hljs-property\">setup</span> {\n  on_attach = on_attach,\n  filetypes = { <span class=\"hljs-string\">\"typescript\"</span>, <span class=\"hljs-string\">\"typescriptreact\"</span>, <span class=\"hljs-string\">\"typescript.tsx\"</span> },\n  cmd = { <span class=\"hljs-string\">\"typescript-language-server\"</span>, <span class=\"hljs-string\">\"--stdio\"</span> }\n} \n</code></pre>\n<p>타입스크립트 언어 서버를 설치하는 것을 잊지 마세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">npm i -g typescript-language-server\n</code></pre>\n<h1>자동 완성: Lspkind 및 cmp</h1>\n<img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_4.png\">\n<p>팬시한 픽토그램이 포함된 LSP를 인식하는 자동 완성 기능을 얻으려면 다음 플러그인을 사용합니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>onsails/lspkind-nvim - VSCode와 비슷한 그림표</li>\n<li>L3MON4D3/LuaSnip - 스니펫 엔진</li>\n<li>hrsh7th/cmp-nvim-lsp - neovim 내장 LSP용 nvim-cmp 소스</li>\n<li>hrsh7th/cmp-buffer - 버퍼 단어용 nvim-cmp 소스</li>\n<li>hrsh7th/nvim-cmp - neovim을 위한 완성 엔진 플러그인</li>\n</ul>\n<p>다음과 같이 설정하십시오:</p>\n<pre><code class=\"hljs language-js\">local status, cmp = <span class=\"hljs-title function_\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"cmp\"</span>)\n<span class=\"hljs-keyword\">if</span> (not status) then <span class=\"hljs-keyword\">return</span> end\nlocal lspkind = <span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">'lspkind'</span>\n\ncmp.<span class=\"hljs-title function_\">setup</span>({\n  snippet = {\n    expand = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">args</span>)\n      <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'luasnip'</span>).<span class=\"hljs-title function_\">lsp_expand</span>(args.<span class=\"hljs-property\">body</span>)\n    end,\n  },\n  mapping = cmp.<span class=\"hljs-property\">mapping</span>.<span class=\"hljs-property\">preset</span>.<span class=\"hljs-title function_\">insert</span>({\n    [<span class=\"hljs-string\">'&#x3C;C-d>'</span>] = cmp.<span class=\"hljs-property\">mapping</span>.<span class=\"hljs-title function_\">scroll_docs</span>(-<span class=\"hljs-number\">4</span>),\n    [<span class=\"hljs-string\">'&#x3C;C-f>'</span>] = cmp.<span class=\"hljs-property\">mapping</span>.<span class=\"hljs-title function_\">scroll_docs</span>(<span class=\"hljs-number\">4</span>),\n    [<span class=\"hljs-string\">'&#x3C;C-Space>'</span>] = cmp.<span class=\"hljs-property\">mapping</span>.<span class=\"hljs-title function_\">complete</span>(),\n    [<span class=\"hljs-string\">'&#x3C;C-e>'</span>] = cmp.<span class=\"hljs-property\">mapping</span>.<span class=\"hljs-title function_\">close</span>(),\n    [<span class=\"hljs-string\">'&#x3C;CR>'</span>] = cmp.<span class=\"hljs-property\">mapping</span>.<span class=\"hljs-title function_\">confirm</span>({\n      behavior = cmp.<span class=\"hljs-property\">ConfirmBehavior</span>.<span class=\"hljs-property\">Replace</span>,\n      select = <span class=\"hljs-literal\">true</span>\n    }),\n  }),\n  sources = cmp.<span class=\"hljs-property\">config</span>.<span class=\"hljs-title function_\">sources</span>({\n    { name = <span class=\"hljs-string\">'nvim_lsp'</span> },\n    { name = <span class=\"hljs-string\">'buffer'</span> },\n  }),\n  formatting = {\n    format = lspkind.<span class=\"hljs-title function_\">cmp_format</span>({ with_text = <span class=\"hljs-literal\">false</span>, maxwidth = <span class=\"hljs-number\">50</span> })\n  }\n})\n\nvim.<span class=\"hljs-property\">cmd</span> [[\n  set completeopt=menuone,noinsert,noselect\n  highlight! <span class=\"hljs-keyword\">default</span> link <span class=\"hljs-title class_\">CmpItemKind</span> <span class=\"hljs-title class_\">CmpItemMenuDefault</span>\n]]\n</code></pre>\n<h1>문법 강조: Treesitter</h1>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_5.png\" alt=\"이미지\"></p>\n<p>Treesitter은 구문 강조를 위한 인기있는 언어 구문 분석기입니다. 먼저 다음을 설치하세요:</p>\n<pre><code class=\"hljs language-js\">brew install tree-sitter\n</code></pre>\n<p>Packer를 사용하여 nvim-treesitter/nvim-treesitter를 설치하고 다음과 같이 구성하세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-lua\"><span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">status</span>, ts = <span class=\"hljs-built_in\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"nvim-treesitter.configs\"</span>)\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">status</span>) <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">end</span>\n\nts.setup {\n  highlight = {\n    enable = <span class=\"hljs-literal\">true</span>,\n    disable = {},\n  },\n  indent = {\n    enable = <span class=\"hljs-literal\">true</span>,\n    disable = {},\n  },\n  ensure_installed = {\n    <span class=\"hljs-string\">\"tsx\"</span>,\n    <span class=\"hljs-string\">\"toml\"</span>,\n    <span class=\"hljs-string\">\"fish\"</span>,\n    <span class=\"hljs-string\">\"php\"</span>,\n    <span class=\"hljs-string\">\"json\"</span>,\n    <span class=\"hljs-string\">\"yaml\"</span>,\n    <span class=\"hljs-string\">\"swift\"</span>,\n    <span class=\"hljs-string\">\"css\"</span>,\n    <span class=\"hljs-string\">\"html\"</span>,\n    <span class=\"hljs-string\">\"lua\"</span>\n  },\n  autotag = {\n    enable = <span class=\"hljs-literal\">true</span>,\n  },\n}\n\n<span class=\"hljs-keyword\">local</span> parser_config = <span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">\"nvim-treesitter.parsers\"</span>.get_parser_configs()\nparser_config.tsx.filetype_to_parsername = { <span class=\"hljs-string\">\"javascript\"</span>, <span class=\"hljs-string\">\"typescript.tsx\"</span> }\n</code></pre>\n<h1>Autotag and Autopair</h1>\n<p>리액트 앱에서는 태그를 빠르게 닫고 싶을 때가 많습니다. windwp/nvim-ts-autotag가 정확히 원하는 기능을 제공합니다.</p>\n<pre><code class=\"hljs language-lua\"><span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">status</span>, autotag = <span class=\"hljs-built_in\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"nvim-ts-autotag\"</span>)\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">status</span>) <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">end</span>\n\nautotag.setup({})\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>windwp/nvim-autopairs는 괄호를 자동으로 닫아주는 플러그인이에요.</p>\n<pre><code class=\"hljs language-lua\"><span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">status</span>, autopairs = <span class=\"hljs-built_in\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"nvim-autopairs\"</span>)\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">status</span>) <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">end</span>\n\nautopairs.setup({\n  disable_filetype = { <span class=\"hljs-string\">\"TelescopePrompt\"</span> , <span class=\"hljs-string\">\"vim\"</span> },\n})\n</code></pre>\n<h1>퍼즈 파인더: Telescope</h1>\n<p><img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_6.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>telescope.nvim은 최신 Neovim 기능을 기반으로 한 목록 위의 대화식 퍼지 파인더를 제공합니다. 또한 filer로 telescope-file-browser.nvim을 사용합니다.</p>\n<p>실제로 파일을 열지 않고도 파일의 내용을 보면서 파일을 검색할 수 있어서 매우 유용합니다. Vim, 파일, Git, LSP, Treesitter 등 다양한 소스를 지원합니다. Telescope의 쇼케이스를 확인해보세요.</p>\n<p>Telescope, 상태행 및 다른 지원 플러그인에 파일 아이콘을 얻기 위해 kyazdani42/nvim-web-devicons를 설치하세요.</p>\n<p>구성은 다음과 같이 보일 것입니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-lua\"><span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">status</span>, telescope = <span class=\"hljs-built_in\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"telescope\"</span>)\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">status</span>) <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">local</span> actions = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'telescope.actions'</span>)\n<span class=\"hljs-keyword\">local</span> builtin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"telescope.builtin\"</span>)\n\n<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">telescope_buffer_dir</span><span class=\"hljs-params\">()</span></span>\n  <span class=\"hljs-keyword\">return</span> vim.fn.expand(<span class=\"hljs-string\">'%:p:h'</span>)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">local</span> fb_actions = <span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">\"telescope\"</span>.extensions.file_browser.actions\n\ntelescope.setup {\n  defaults = {\n    mappings = {\n      n = {\n        [<span class=\"hljs-string\">\"q\"</span>] = actions.<span class=\"hljs-built_in\">close</span>\n      },\n    },\n  },\n}\n\n<span class=\"hljs-comment\">-- 키맵</span>\nvim.keymap.set(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">';f'</span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>\n    builtin.find_files({\n      no_ignore = <span class=\"hljs-literal\">false</span>,\n      hidden = <span class=\"hljs-literal\">true</span>\n    })\n  <span class=\"hljs-keyword\">end</span>)\nvim.keymap.set(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">';r'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>\n  builtin.live_grep()\n<span class=\"hljs-keyword\">end</span>)\nvim.keymap.set(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">'\\\\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>\n  builtin.buffers()\n<span class=\"hljs-keyword\">end</span>)\nvim.keymap.set(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">';t'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>\n  builtin.help_tags()\n<span class=\"hljs-keyword\">end</span>)\nvim.keymap.set(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">';;'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>\n  builtin.<span class=\"hljs-built_in\">resume</span>()\n<span class=\"hljs-keyword\">end</span>)\nvim.keymap.set(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">';e'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>\n  builtin.diagnostics()\n<span class=\"hljs-keyword\">end</span>)\n</code></pre>\n<p>이미지를 추가했어요:</p>\n<p><img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_7.png\" alt=\"이미지\"></p>\n<p>텔레스코프 브라우저 확장 기능을 사용합니다:</p>\n<pre><code class=\"hljs language-lua\">telescope.setup {\n  defaults = {\n    mappings = {\n      n = {\n        [<span class=\"hljs-string\">\"q\"</span>] = actions.<span class=\"hljs-built_in\">close</span>\n      },\n    },\n  },\n  extensions = {\n    file_browser = {\n      theme = <span class=\"hljs-string\">\"dropdown\"</span>,\n      <span class=\"hljs-comment\">-- netrw를 비활성화하고 telescope-file-browser를 사용합니다</span>\n      hijack_netrw = <span class=\"hljs-literal\">true</span>,\n      mappings = {\n        <span class=\"hljs-comment\">-- 사용자 정의 삽입 모드 매핑</span>\n        [<span class=\"hljs-string\">\"i\"</span>] = {\n          [<span class=\"hljs-string\">\"&#x3C;C-w>\"</span>] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span> vim.cmd(<span class=\"hljs-string\">'normal vbd'</span>) <span class=\"hljs-keyword\">end</span>,\n        },\n        [<span class=\"hljs-string\">\"n\"</span>] = {\n          <span class=\"hljs-comment\">-- 사용자 정의 일반 모드 매핑</span>\n          [<span class=\"hljs-string\">\"N\"</span>] = fb_actions.<span class=\"hljs-built_in\">create</span>,\n          [<span class=\"hljs-string\">\"h\"</span>] = fb_actions.goto_parent_dir,\n          [<span class=\"hljs-string\">\"/\"</span>] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>\n            vim.cmd(<span class=\"hljs-string\">'startinsert'</span>)\n          <span class=\"hljs-keyword\">end</span>\n        },\n      },\n    },\n  },\n}\ntelescope.load_extension(<span class=\"hljs-string\">\"file_browser\"</span>)\n\nvim.keymap.set(<span class=\"hljs-string\">\"n\"</span>, <span class=\"hljs-string\">\"sf\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>\n  telescope.extensions.file_browser.file_browser({\n    <span class=\"hljs-built_in\">path</span> = <span class=\"hljs-string\">\"%:p:h\"</span>,\n    cwd = telescope_buffer_dir(),\n    respect_gitignore = <span class=\"hljs-literal\">false</span>,\n    hidden = <span class=\"hljs-literal\">true</span>,\n    grouped = <span class=\"hljs-literal\">true</span>,\n    previewer = <span class=\"hljs-literal\">false</span>,\n    initial_mode = <span class=\"hljs-string\">\"normal\"</span>,\n    layout_config = { height = <span class=\"hljs-number\">40</span> }\n  })\n<span class=\"hljs-keyword\">end</span>)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>탭: 버퍼 라인</h1>\n<img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_8.png\">\n<p>나는 탭의 보다 멋진 모양을 얻기 위해 akinsho/nvim-bufferline.lua를 사용합니다. Solarized 테마와 더 잘 어울리도록 몇 가지 사용자 정의를 추가했습니다:</p>\n<pre><code class=\"hljs language-js\">local status, bufferline = <span class=\"hljs-title function_\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"bufferline\"</span>)\n<span class=\"hljs-keyword\">if</span> (not status) then <span class=\"hljs-keyword\">return</span> end\n\nbufferline.<span class=\"hljs-title function_\">setup</span>({\n  options = {\n    mode = <span class=\"hljs-string\">\"tabs\"</span>,\n    separator_style = <span class=\"hljs-string\">'slant'</span>,\n    always_show_bufferline = <span class=\"hljs-literal\">false</span>,\n    show_buffer_close_icons = <span class=\"hljs-literal\">false</span>,\n    show_close_icon = <span class=\"hljs-literal\">false</span>,\n    color_icons = <span class=\"hljs-literal\">true</span>\n  },\n  highlights = {\n    separator = {\n      guifg = <span class=\"hljs-string\">'#073642'</span>,\n      guibg = <span class=\"hljs-string\">'#002b36'</span>,\n    },\n    separator_selected = {\n      guifg = <span class=\"hljs-string\">'#073642'</span>,\n    },\n    background = {\n      guifg = <span class=\"hljs-string\">'#657b83'</span>,\n      guibg = <span class=\"hljs-string\">'#002b36'</span>\n    },\n    buffer_selected = {\n      guifg = <span class=\"hljs-string\">'#fdf6e3'</span>,\n      gui = <span class=\"hljs-string\">\"bold\"</span>,\n    },\n    fill = {\n      guibg = <span class=\"hljs-string\">'#073642'</span>\n    }\n  },\n})\n\nvim.<span class=\"hljs-property\">keymap</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">'&#x3C;Tab>'</span>, <span class=\"hljs-string\">'&#x3C;Cmd>BufferLineCycleNext&#x3C;CR>'</span>, {})\nvim.<span class=\"hljs-property\">keymap</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">'&#x3C;S-Tab>'</span>, <span class=\"hljs-string\">'&#x3C;Cmd>BufferLineCyclePrev&#x3C;CR>'</span>, {})\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>LSP 설정: Lspsaga</h1>\n<p><img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_9.png\" alt=\"\"></p>\n<p><img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_10.png\" alt=\"\"></p>\n<p><img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_11.png\" alt=\"\"></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">local status, saga = <span class=\"hljs-title function_\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"lspsaga\"</span>)\n<span class=\"hljs-keyword\">if</span> (not status) then <span class=\"hljs-keyword\">return</span> end\n\nsaga.<span class=\"hljs-property\">init_lsp_saga</span> {\n  server_filetype_map = {\n    typescript = <span class=\"hljs-string\">'typescript'</span>\n  }\n}\n\nlocal opts = { noremap = <span class=\"hljs-literal\">true</span>, silent = <span class=\"hljs-literal\">true</span> }\nvim.<span class=\"hljs-property\">keymap</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">'&#x3C;C-j>'</span>, <span class=\"hljs-string\">'&#x3C;Cmd>Lspsaga diagnostic_jump_next&#x3C;CR>'</span>, opts)\nvim.<span class=\"hljs-property\">keymap</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">'K'</span>, <span class=\"hljs-string\">'&#x3C;Cmd>Lspsaga hover_doc&#x3C;CR>'</span>, opts)\nvim.<span class=\"hljs-property\">keymap</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">'gd'</span>, <span class=\"hljs-string\">'&#x3C;Cmd>Lspsaga lsp_finder&#x3C;CR>'</span>, opts)\nvim.<span class=\"hljs-property\">keymap</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'i'</span>, <span class=\"hljs-string\">'&#x3C;C-k>'</span>, <span class=\"hljs-string\">'&#x3C;Cmd>Lspsaga signature_help&#x3C;CR>'</span>, opts)\nvim.<span class=\"hljs-property\">keymap</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">'gp'</span>, <span class=\"hljs-string\">'&#x3C;Cmd>Lspsaga preview_definition&#x3C;CR>'</span>, opts)\nvim.<span class=\"hljs-property\">keymap</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">'gr'</span>, <span class=\"hljs-string\">'&#x3C;Cmd>Lspsaga rename&#x3C;CR>'</span>, opts)\n</code></pre>\n<h1>Code formatter: Prettier and null-ls</h1>\n<p>제가 가장 좋아하는 LSP 플러그인 중 하나인 glepnir/lspsaga.nvim은 hover doc, definition preview, rename actions 등과 같은 다양한 LSP 관련 기능에 대한 아름다운 UI를 제공합니다. 제 설정은 간단합니다. typescript 파일에 대해 'typescript' 서버를 매핑하고, 다른 기능에 대한 keymap을 설정합니다.</p>\n<p>TypeScript/JavaScript/CSS 파일을 포맷하는 데 Prettier에 큰 의존을 하고 있습니다. 이를 위해 jose-elias-alvarez/null-ls.nvim 및 MunifTanjim/prettier.nvim을 사용합니다.</p>\n<div class=\"content-ad\"></div>\n<p>먼저, prettierd를 설치해야 합니다:</p>\n<pre><code class=\"hljs language-js\">brew install prettierd\n</code></pre>\n<p>그런 다음 null-ls를 다음과 같이 구성하세요:</p>\n<pre><code class=\"hljs language-js\">local status, null_ls = <span class=\"hljs-title function_\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"null-ls\"</span>)\n<span class=\"hljs-keyword\">if</span> (not status) then <span class=\"hljs-keyword\">return</span> end\n\nnull_ls.<span class=\"hljs-title function_\">setup</span>({\n  sources = {\n    null_ls.<span class=\"hljs-property\">builtins</span>.<span class=\"hljs-property\">diagnostics</span>.<span class=\"hljs-property\">eslint_d</span>.<span class=\"hljs-title function_\">with</span>({\n      diagnostics_format = <span class=\"hljs-string\">'[eslint] #{m}\\n(#{c})'</span>\n    }),\n    null_ls.<span class=\"hljs-property\">builtins</span>.<span class=\"hljs-property\">diagnostics</span>.<span class=\"hljs-property\">fish</span>\n  }\n})\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>친화적인 톤으로 번역하면:</p>\n<pre><code class=\"hljs language-js\">local status, prettier = <span class=\"hljs-title function_\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"prettier\"</span>)\n<span class=\"hljs-keyword\">if</span> (not status) then <span class=\"hljs-keyword\">return</span> end\n\nprettier.<span class=\"hljs-property\">setup</span> {\n  bin = <span class=\"hljs-string\">'prettierd'</span>,\n  filetypes = {\n    <span class=\"hljs-string\">\"css\"</span>,\n    <span class=\"hljs-string\">\"javascript\"</span>,\n    <span class=\"hljs-string\">\"javascriptreact\"</span>,\n    <span class=\"hljs-string\">\"typescript\"</span>,\n    <span class=\"hljs-string\">\"typescriptreact\"</span>,\n    <span class=\"hljs-string\">\"json\"</span>,\n    <span class=\"hljs-string\">\"scss\"</span>,\n    <span class=\"hljs-string\">\"less\"</span>\n  }\n}\n</code></pre>\n<h1>Git 표시: gitsigns</h1>\n<p><img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_12.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>lewis6991/gitsigns.nvim은 현재 버퍼에 대한 Git 장식을 제공합니다. 현재 변경된 줄을 파악하는 데 도움이 됩니다. 기본 설정으로 작동합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gitsigns'</span>).<span class=\"hljs-property\">setup</span> {}\n</code></pre>\n<h1>git</h1>\n<img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_13.png\">\n<div class=\"content-ad\"></div>\n<p>요즘 제가 자주 사용하는 사이트는 GitHub입니다. dinhhuy258/git.nvim을 사용하면 Neovim에서 바로 GitHub을 열 수 있고, 분할 화면에서 git blame을 볼 수 있어 정말 편리해요.</p>\n<pre><code class=\"hljs language-js\">local status, git = <span class=\"hljs-title function_\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"git\"</span>)\n<span class=\"hljs-keyword\">if</span> (not status) then <span class=\"hljs-keyword\">return</span> end\n\ngit.<span class=\"hljs-title function_\">setup</span>({\n  keymaps = {\n    -- <span class=\"hljs-title class_\">Open</span> blame <span class=\"hljs-variable language_\">window</span>\n    blame = <span class=\"hljs-string\">\"&#x3C;Leader>gb\"</span>,\n    -- <span class=\"hljs-title class_\">Open</span> file/folder <span class=\"hljs-keyword\">in</span> git repository\n    browse = <span class=\"hljs-string\">\"&#x3C;Leader>go\"</span>,\n  }\n})\n</code></pre>\n<h1>LSP 도구: mason</h1>\n<img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_14.png\">\n<div class=\"content-ad\"></div>\n<p>특정 라이브러리에 대한 추가 LSP 지원이 필요하면 williamboman/mason.nvim 및 williamboman/mason-lspconfig.nvim이 필요할 수 있습니다. Neovim에서 Tailwind CSS 언어 서버를 실행하기 위해 사용하고 있어요.</p>\n<pre><code class=\"hljs language-js\">local status, mason = <span class=\"hljs-title function_\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"mason\"</span>)\n<span class=\"hljs-keyword\">if</span> (not status) then <span class=\"hljs-keyword\">return</span> end\nlocal status2, lspconfig = <span class=\"hljs-title function_\">pcall</span>(<span class=\"hljs-built_in\">require</span>, <span class=\"hljs-string\">\"mason-lspconfig\"</span>)\n<span class=\"hljs-keyword\">if</span> (not status2) then <span class=\"hljs-keyword\">return</span> end\n\nmason.<span class=\"hljs-title function_\">setup</span>({})\n\nlspconfig.<span class=\"hljs-property\">setup</span> {\n  ensure_installed = { <span class=\"hljs-string\">\"sumneko_lua\"</span>, <span class=\"hljs-string\">\"tailwindcss\"</span> },\n}\n</code></pre>\n<p>다음으로 lspconfig을 추가하세요:</p>\n<pre><code class=\"hljs language-js\">local nvim_lsp = <span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">\"lspconfig\"</span>\nnvim_lsp.<span class=\"hljs-property\">tailwindcss</span>.<span class=\"hljs-property\">setup</span> {}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이것으로 대부분 끝났어요! 네오빔 환경을 개선하는 데 도움이 되길 바랍니다.</p>\n<h1>온라인에서 나를 따르세요</h1>\n<ul>\n<li>Inkdrop라는 앱을 확인해보세요 — 마크다운 노트 앱</li>\n<li>Twitter: <a href=\"https://twitter.com/inkdrop_app\" rel=\"nofollow\" target=\"_blank\">https://twitter.com/inkdrop_app</a></li>\n<li>블로그: <a href=\"https://blog.inkdrop.app/\" rel=\"nofollow\" target=\"_blank\">https://blog.inkdrop.app/</a></li>\n<li>YouTube: <a href=\"https://www.youtube.com/devaslife\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/devaslife</a></li>\n<li>Instagram: <a href=\"https://instagram.com/craftzdog\" rel=\"nofollow\" target=\"_blank\">https://instagram.com/craftzdog</a></li>\n</ul>\n<p><img src=\"/assets/img/2024-06-20-MyNeovimsetupforReactTypeScriptTailwindCSSetc_15.png\" alt=\"이미지\"></p>\n</body>\n</html>\n"},"__N_SSG":true}