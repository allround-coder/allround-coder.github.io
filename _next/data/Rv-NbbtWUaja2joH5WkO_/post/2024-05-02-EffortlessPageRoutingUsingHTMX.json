{"pageProps":{"post":{"title":"HTMX를 활용해 쉬운 페이지 라우팅하기","description":"","date":"2024-05-02 00:04","slug":"2024-05-02-EffortlessPageRoutingUsingHTMX","content":"\n\n![이미지](/assets/img/2024-05-02-EffortlessPageRoutingUsingHTMX_0.png)\n\n리액트는 종종 웹 애플리케이션에 지나치게 많은 요소를 포함하고 있을 수 있으며, HTMX와 함께 웹 서버만 사용하여 상호 작용 애플리케이션을 만드는 것이 동등한 결과를 얻을 수 있는 경우가 있습니다.\n\n이 블로그 포스트에서는 HTMX를 활용하여 상호 작용이 가능하고 화면 깜빡임이 없는 페이지 이동을 작성하는 방법을 설명하겠습니다:\n\n## 서버 설정\n\n<div class=\"content-ad\"></div>\n\n```js\nmkdir no-react-app \ncd no-react-app\nnpm init -y\nnpm install express nunjucks\n```\n\n그런 다음 서버 파일을 만들고 실행합니다.\n\n```js\n//File: app.js\nconst express = require(\"express\")\nconst app = express()\n\nconst nunjucks = require('nunjucks');\nnunjucks.configure(\"views\", {\n    autoescape: true,\n    express: app\n});\n\napp.get(\"/\", (req, res) => {\n    res.render(\"pages/home.html\")\n})\n\napp.get(\"/users\", (req, res) => {\n    res.render(\"pages/users.html\")\n})\n\napp.get(\"/posts\", (req, res) => {\n    res.render(\"pages/posts.html\")\n})\n\napp.listen(3000, () => {\n    console.info(`Application running http://localhost:3000`)\n})\n```\n\n저희는 템플릿 엔진으로 nunjucks를 사용합니다. 모든 템플릿, 레이아웃 및 부분 파일은 \"views\" 디렉토리에 저장됩니다. 따라서 프로젝트 구조는 다음과 같을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## 앱 구조\n\n```js\napp.js\nviews\n  layouts\n    main.html\n  partials\n    sidenav.html\n  pages\n    user.html\n    home.html\n    posts.html\n```\n\n템플릿 엔진을 사용하기 때문에 모든 뷰가 확장할 레이아웃을 추가합시다.\n\n## 메인 레이아웃\n\n<div class=\"content-ad\"></div>\n\n```js\n<!--File: views/layouts/main.html-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\"\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.0.2/tailwind.min.css\" />\n    <title>HTMX App</title>\n</head>\n\n<body class=\"bg-gray-200\">\n    <div class=\"flex h-screen\">\n        <!-- Side Navigation -->\n        {- include('partials/sidenav.html')}\n\n        <!-- Main Content Area -->\n        <div class=\"w-full bg-white p-4\" id=\"main\">\n            { block content }{ endblock }\n        </div>\n</body>\n\n</html>\n``` \n\nsidenav 템플릿 컴포넌트를 partials로 리팩터링하여 레이아웃에 포함했습니다.\n\n## Side Nav Component\n\n```js\n<!--File: views/partials/sidenav.html-->\n<div class=\"w-56 bg-gray-800 text-white p-4\">\n    <a href=\"/\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Home</a>\n    <a href=\"/users\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Users</a>\n    <a href=\"/posts\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Posts</a>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n그리고 우리는 메인 페이지인 home.html, users.html 및 posts.html을 만들었습니다.\n\n## 페이지\n\n```js\n<!--views/pages/home.html-->\n{ extends 'layouts/main.html' }\n\n{ block content }\n<h1 class=\"text-2xl font-bold mb-4\">HTMX Nav</h1>\n{ endblock }\n```\n\n```js\n<!--views/pages/users.html-->\n{ extends 'layouts/main.html' }\n\n{ block content }\n<h1 class=\"text-2xl font-bold mb-4\">Users</h1>\n{ endblock }\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n<!-- views/pages/posts.html -->\n{ extends 'layouts/main.html' }\n\n{ block content }\n<h1 class=\"text-2xl font-bold mb-4\">Posts</h1>\n{ endblock }\n```\n\n서버를 실행하면 네비게이션이 있지만 전체 페이지가 다시 로드됩니다:\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*yPvQ3Jj47osdFfxsoMXqSg.gif\" />\n\nHTMX라는 가벼운 JavaScript 라이브러리를 사용하여 이 문제를 해결해야 합니다. 이 라이브러리는 보다 더 순조롭고 상호작용적인 사용자 네비게이션 경험을 크게 향상시킬 수 있습니다. HTMX는 더 다양한 응용 프로그램에서 사용할 수 있지만, 현재 목적에 맞게 더 원활한 네비게이션을 달성하기 위해 그 능력을 활용하는 데 중점을 둘 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## HTMX를 사용하여 점진적으로 향상시키기\n\nHTMX를 사용하는 가장 빠른 방법은 CDN을 통해 로드하는 것입니다. 다음 코드를 head 태그에 추가하면 간단히 시작할 수 있습니다:\n\n```js\n<!--File: views/layouts/main.html-->\n...\n<script src=\"https://unpkg.com/htmx.org@latest\"></script>\n<title>HTMX App</title>\n</head>\n...\n```\n\n이제 사이드네비게이션 바에 작은 변경을 가할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n- href 속성을 제거하고 hx-get 속성으로 대체합니다. 사용자가이 링크를 클릭하면 HTTP GET 요청이 발생합니다.\n- 각 앵커에 hx-target 속성을 추가하거나 앵커 상위 div에 하나 추가하십시오. hx-target 속성을 사용하면 응답을 교체할 요소를 대상으로 지정할 수 있습니다.\n- 각 앵커에 hx-push-url=\"true\"를 추가하십시오. hx-push-url 속성을 사용하면 URL을 브라우저 위치 기록에 추가할 수 있습니다. 이를 통해 새로운 기록 항목이 생성되어 브라우저의 뒤로/앞으로 버튼을 사용한 탐색이 가능합니다.\n\n이것이 무엇을 하는가: 우리는 \"main\" id의 div에서 응답을 삽입할 때 HTMX lib에 서버 호출을 만드는 방법을 선언적으로 지시하고 있습니다.\n\n```js\n<div class=\"w-56 bg-gray-800 text-white p-4\" hx-target=\"#main\">\n    <a hx-get=\"/\" hx-push-url=\"true\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Home</a>\n    <a hx-get=\"/users\" hx-push-url=\"true\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Users</a>\n    <a hx-get=\"/posts\" hx-push-url=\"true\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Posts</a>\n</div>\n```\n\n이제 다음과 같습니다.\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*LOvL_BdO8v6B-La18uqJug.gif)\n\n번쩍임 문제를 해결했고 새로운 URL로 올바르게 전환됩니다. 이제 다른 사람에게 내비게이션을 공유하고 싶다면 새로운 URL로 이동하게 됩니다.\n\n### 앱을 HTMX 알아보기\n\n각 서버 요청이 HTMX 호출인지 여부를 결정해야 합니다. 만약 HTMX 호출이라면 레이아웃을 사용하지 말고 해당 템플릿의 HTML을 그대로 반환하도록 템플릿 엔진에 지시해야 합니다. 이를 위해 특정 미들웨어를 포함해야 합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// 파일: app.js\n...\napp.use((req, res, next) => {\n    res.locals.useLayout = req.headers[\"hx-request\"] !== \"true\";\n    next();\n})\n\napp.listen(3000, () => {\n    console.info(`애플리케이션이 http://localhost:3000에서 실행 중입니다.`)\n})\n```\n\nHTMX 요청이 감지되지 않는 경우에만 레이아웃을 사용합니다.\n\n```js\n<!-- 파일: views/layouts/main.html -->\n{ if useLayout }\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\"\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.0.2/tailwind.min.css\" />\n    <script src=\"https://unpkg.com/htmx.org@latest\"></script>\n    <title>HTMX App</title>\n</head>\n<body class=\"bg-gray-200\">\n    <div class=\"flex h-screen\">\n        <!-- Side Navigation -->\n        {- include('partials/sidenav.html')}\n        <!-- Main Content Area -->\n        <div class=\"w-full bg-white p-4\" id=\"main\">\n{ endif }\n\n            { block content }{ endblock }\n\n{ if useLayout }\n        </div>\n</body>\n</html>\n{ endif }\n```\n\nURL을 공유할 수 있도록 원활하고 번쩍임 없는 내비게이션 경험을 성공적으로 달성했습니다.\n\n<div class=\"content-ad\"></div>\n\n[이미지](https://miro.medium.com/v2/resize:fit:1400/1*hdhwN-9D2qdkYFyXwJ6XEg.gif)\n\n원본 블로그 게시물: [https://nanosoft.co.za/blog/post/express-htmx](https://nanosoft.co.za/blog/post/express-htmx)\n\n소스 코드: [https://github.com/nanosoftonline/express-htmx](https://github.com/nanosoftonline/express-htmx)","ogImage":{"url":"/assets/img/2024-05-02-EffortlessPageRoutingUsingHTMX_0.png"},"coverImage":"/assets/img/2024-05-02-EffortlessPageRoutingUsingHTMX_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-02-EffortlessPageRoutingUsingHTMX_0.png\" alt=\"이미지\"></p>\n<p>리액트는 종종 웹 애플리케이션에 지나치게 많은 요소를 포함하고 있을 수 있으며, HTMX와 함께 웹 서버만 사용하여 상호 작용 애플리케이션을 만드는 것이 동등한 결과를 얻을 수 있는 경우가 있습니다.</p>\n<p>이 블로그 포스트에서는 HTMX를 활용하여 상호 작용이 가능하고 화면 깜빡임이 없는 페이지 이동을 작성하는 방법을 설명하겠습니다:</p>\n<h2>서버 설정</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">mkdir no-react-app \ncd no-react-app\nnpm init -y\nnpm install express nunjucks\n</code></pre>\n<p>그런 다음 서버 파일을 만들고 실행합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//File: app.js</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>)\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>()\n\n<span class=\"hljs-keyword\">const</span> nunjucks = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nunjucks'</span>);\nnunjucks.<span class=\"hljs-title function_\">configure</span>(<span class=\"hljs-string\">\"views\"</span>, {\n    <span class=\"hljs-attr\">autoescape</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">express</span>: app\n});\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n    res.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">\"pages/home.html\"</span>)\n})\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"/users\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n    res.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">\"pages/users.html\"</span>)\n})\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"/posts\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n    res.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">\"pages/posts.html\"</span>)\n})\n\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">`Application running http://localhost:3000`</span>)\n})\n</code></pre>\n<p>저희는 템플릿 엔진으로 nunjucks를 사용합니다. 모든 템플릿, 레이아웃 및 부분 파일은 \"views\" 디렉토리에 저장됩니다. 따라서 프로젝트 구조는 다음과 같을 것입니다.</p>\n<div class=\"content-ad\"></div>\n<h2>앱 구조</h2>\n<pre><code class=\"hljs language-js\">app.<span class=\"hljs-property\">js</span>\nviews\n  layouts\n    main.<span class=\"hljs-property\">html</span>\n  partials\n    sidenav.<span class=\"hljs-property\">html</span>\n  pages\n    user.<span class=\"hljs-property\">html</span>\n    home.<span class=\"hljs-property\">html</span>\n    posts.<span class=\"hljs-property\">html</span>\n</code></pre>\n<p>템플릿 엔진을 사용하기 때문에 모든 뷰가 확장할 레이아웃을 추가합시다.</p>\n<h2>메인 레이아웃</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;!--<span class=\"hljs-title class_\">File</span>: views/layouts/main.<span class=\"hljs-property\">html</span>-->\n&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;link rel=\"stylesheet\"\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.0.2/tailwind.min.css\" />\n    &#x3C;title>HTMX App&#x3C;/title>\n&#x3C;/head>\n\n&#x3C;body class=\"bg-gray-200\">\n    &#x3C;div class=\"flex h-screen\">\n        &#x3C;!-- Side Navigation -->\n        {- include('partials/sidenav.html')}\n\n        &#x3C;!-- Main Content Area -->\n        &#x3C;div class=\"w-full bg-white p-4\" id=\"main\">\n            { block content }{ endblock }\n        &#x3C;/div>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<p>sidenav 템플릿 컴포넌트를 partials로 리팩터링하여 레이아웃에 포함했습니다.</p>\n<h2>Side Nav Component</h2>\n<pre><code class=\"hljs language-js\">&#x3C;!--<span class=\"hljs-title class_\">File</span>: views/partials/sidenav.<span class=\"hljs-property\">html</span>-->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"w-56 bg-gray-800 text-white p-4\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block py-2 px-4 text-white hover:bg-gray-600\"</span>></span>Home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/users\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block py-2 px-4 text-white hover:bg-gray-600\"</span>></span>Users<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/posts\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block py-2 px-4 text-white hover:bg-gray-600\"</span>></span>Posts<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>그리고 우리는 메인 페이지인 home.html, users.html 및 posts.html을 만들었습니다.</p>\n<h2>페이지</h2>\n<pre><code class=\"hljs language-js\">&#x3C;!--views/pages/home.<span class=\"hljs-property\">html</span>-->\n{ <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-string\">'layouts/main.html'</span> }\n\n{ block content }\n&#x3C;h1 <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"text-2xl font-bold mb-4\"</span>><span class=\"hljs-variable constant_\">HTMX</span> <span class=\"hljs-title class_\">Nav</span>&#x3C;/h1>\n{ endblock }\n</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;!--views/pages/users.<span class=\"hljs-property\">html</span>-->\n{ <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-string\">'layouts/main.html'</span> }\n\n{ block content }\n&#x3C;h1 <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"text-2xl font-bold mb-4\"</span>><span class=\"hljs-title class_\">Users</span>&#x3C;/h1>\n{ endblock }\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;!-- views/pages/posts.<span class=\"hljs-property\">html</span> -->\n{ <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-string\">'layouts/main.html'</span> }\n\n{ block content }\n&#x3C;h1 <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"text-2xl font-bold mb-4\"</span>><span class=\"hljs-title class_\">Posts</span>&#x3C;/h1>\n{ endblock }\n</code></pre>\n<p>서버를 실행하면 네비게이션이 있지만 전체 페이지가 다시 로드됩니다:</p>\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*yPvQ3Jj47osdFfxsoMXqSg.gif\">\n<p>HTMX라는 가벼운 JavaScript 라이브러리를 사용하여 이 문제를 해결해야 합니다. 이 라이브러리는 보다 더 순조롭고 상호작용적인 사용자 네비게이션 경험을 크게 향상시킬 수 있습니다. HTMX는 더 다양한 응용 프로그램에서 사용할 수 있지만, 현재 목적에 맞게 더 원활한 네비게이션을 달성하기 위해 그 능력을 활용하는 데 중점을 둘 것입니다.</p>\n<div class=\"content-ad\"></div>\n<h2>HTMX를 사용하여 점진적으로 향상시키기</h2>\n<p>HTMX를 사용하는 가장 빠른 방법은 CDN을 통해 로드하는 것입니다. 다음 코드를 head 태그에 추가하면 간단히 시작할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;!--<span class=\"hljs-title class_\">File</span>: views/layouts/main.<span class=\"hljs-property\">html</span>-->\n...\n&#x3C;script src=<span class=\"hljs-string\">\"https://unpkg.com/htmx.org@latest\"</span>>&#x3C;/script>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>HTMX App<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span></span>\n&#x3C;/head>\n...\n</code></pre>\n<p>이제 사이드네비게이션 바에 작은 변경을 가할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>href 속성을 제거하고 hx-get 속성으로 대체합니다. 사용자가이 링크를 클릭하면 HTTP GET 요청이 발생합니다.</li>\n<li>각 앵커에 hx-target 속성을 추가하거나 앵커 상위 div에 하나 추가하십시오. hx-target 속성을 사용하면 응답을 교체할 요소를 대상으로 지정할 수 있습니다.</li>\n<li>각 앵커에 hx-push-url=\"true\"를 추가하십시오. hx-push-url 속성을 사용하면 URL을 브라우저 위치 기록에 추가할 수 있습니다. 이를 통해 새로운 기록 항목이 생성되어 브라우저의 뒤로/앞으로 버튼을 사용한 탐색이 가능합니다.</li>\n</ul>\n<p>이것이 무엇을 하는가: 우리는 \"main\" id의 div에서 응답을 삽입할 때 HTMX lib에 서버 호출을 만드는 방법을 선언적으로 지시하고 있습니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"w-56 bg-gray-800 text-white p-4\"</span> hx-target=<span class=\"hljs-string\">\"#main\"</span>>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">hx-get</span>=<span class=\"hljs-string\">\"/\"</span> <span class=\"hljs-attr\">hx-push-url</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block py-2 px-4 text-white hover:bg-gray-600\"</span>></span>Home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">hx-get</span>=<span class=\"hljs-string\">\"/users\"</span> <span class=\"hljs-attr\">hx-push-url</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block py-2 px-4 text-white hover:bg-gray-600\"</span>></span>Users<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">hx-get</span>=<span class=\"hljs-string\">\"/posts\"</span> <span class=\"hljs-attr\">hx-push-url</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block py-2 px-4 text-white hover:bg-gray-600\"</span>></span>Posts<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n&#x3C;/div>\n</code></pre>\n<p>이제 다음과 같습니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*LOvL_BdO8v6B-La18uqJug.gif\" alt=\"image\"></p>\n<p>번쩍임 문제를 해결했고 새로운 URL로 올바르게 전환됩니다. 이제 다른 사람에게 내비게이션을 공유하고 싶다면 새로운 URL로 이동하게 됩니다.</p>\n<h3>앱을 HTMX 알아보기</h3>\n<p>각 서버 요청이 HTMX 호출인지 여부를 결정해야 합니다. 만약 HTMX 호출이라면 레이아웃을 사용하지 말고 해당 템플릿의 HTML을 그대로 반환하도록 템플릿 엔진에 지시해야 합니다. 이를 위해 특정 미들웨어를 포함해야 합니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 파일: app.js</span>\n...\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =></span> {\n    res.<span class=\"hljs-property\">locals</span>.<span class=\"hljs-property\">useLayout</span> = req.<span class=\"hljs-property\">headers</span>[<span class=\"hljs-string\">\"hx-request\"</span>] !== <span class=\"hljs-string\">\"true\"</span>;\n    <span class=\"hljs-title function_\">next</span>();\n})\n\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">`애플리케이션이 http://localhost:3000에서 실행 중입니다.`</span>)\n})\n</code></pre>\n<p>HTMX 요청이 감지되지 않는 경우에만 레이아웃을 사용합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;!-- 파일: views/layouts/main.<span class=\"hljs-property\">html</span> -->\n{ <span class=\"hljs-keyword\">if</span> useLayout }\n&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;link rel=\"stylesheet\"\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.0.2/tailwind.min.css\" />\n    &#x3C;script src=\"https://unpkg.com/htmx.org@latest\">&#x3C;/script>\n    &#x3C;title>HTMX App&#x3C;/title>\n&#x3C;/head>\n&#x3C;body class=\"bg-gray-200\">\n    &#x3C;div class=\"flex h-screen\">\n        &#x3C;!-- Side Navigation -->\n        {- include('partials/sidenav.html')}\n        &#x3C;!-- Main Content Area -->\n        &#x3C;div class=\"w-full bg-white p-4\" id=\"main\">\n{ endif }\n\n            { block content }{ endblock }\n\n{ if useLayout }\n        &#x3C;/div>\n&#x3C;/body>\n&#x3C;/html>\n{ endif }\n</code></pre>\n<p>URL을 공유할 수 있도록 원활하고 번쩍임 없는 내비게이션 경험을 성공적으로 달성했습니다.</p>\n<div class=\"content-ad\"></div>\n<p><a href=\"https://miro.medium.com/v2/resize:fit:1400/1*hdhwN-9D2qdkYFyXwJ6XEg.gif\" rel=\"nofollow\" target=\"_blank\">이미지</a></p>\n<p>원본 블로그 게시물: <a href=\"https://nanosoft.co.za/blog/post/express-htmx\" rel=\"nofollow\" target=\"_blank\">https://nanosoft.co.za/blog/post/express-htmx</a></p>\n<p>소스 코드: <a href=\"https://github.com/nanosoftonline/express-htmx\" rel=\"nofollow\" target=\"_blank\">https://github.com/nanosoftonline/express-htmx</a></p>\n</body>\n</html>\n"},"__N_SSG":true}