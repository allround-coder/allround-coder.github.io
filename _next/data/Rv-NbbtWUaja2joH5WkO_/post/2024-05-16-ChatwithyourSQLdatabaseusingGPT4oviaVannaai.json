{"pageProps":{"post":{"title":"SQL 데이터베이스와 대화하는 방법 Vannaai를 통해 GPT-4o를 활용하세요","description":"","date":"2024-05-16 16:31","slug":"2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai","content":"\n\n## OpenAI GPT 4o를 활용한 텍스트-SQL 파이프라인 만들기\n\n![image](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_0.png)\n\nOpenAI가 최신 주력 모델인 GPT 4o를 공개했습니다. 이 고급 모델은 멀티모달 기능을 갖추고 있어 이미지, 텍스트, 비디오 입력을 처리하여 어떠한 이전 모델보다 뛰어난 답변을 생성할 수 있습니다. 이 게시물은 GPT 4o와 Vanna AI를 사용하여 데이터베이스와 대화할 수 있는 텍스트-SQL 파이프라인을 구축하는 방법을 강조합니다.\n\n![image](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_1.png)\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_2.png\" />\n\n# 시작하기\n\n```js\nfrom vanna.openai import OpenAI_Chat\nfrom vanna.vannadb import VannaDB_VectorStore\n\nclass MyVanna(VannaDB_VectorStore, OpenAI_Chat):\n    def __init__(self, config=None):\n        MY_VANNA_MODEL = # https://vanna.ai/account/profile에서 모델 이름을 가져와주세요\n        VannaDB_VectorStore.__init__(self, vanna_model=MY_VANNA_MODEL, vanna_api_key=MY_VANNA_API_KEY, config=config)\n        OpenAI_Chat.__init__(self, config=config)\n\n# OpenAI api_key를 추가해주세요\nvn = MyVanna(config={'api_key': 'sk-...', 'model': 'gpt-4o'})\n```\n\n# 데이터베이스 연결하기\n\n<div class=\"content-ad\"></div>\n\n바나에는 내장된 커넥터로 다음 8가지 데이터베이스에 연결할 수 있어요 (다른 데이터베이스에 연결하려면 몇 줄의 추가 코드가 필요해요):\n\n- Postgres SQL\n- Oracle\n- DuckDB\n- MySQL\n- SQLite\n- Big Query\n- Snowflake\n- Microsoft SQL\n\n문서를 참고하면 특정 데이터베이스에 연결하는 방법을 알 수 있어요. 이 글에서는 DuckDB StackOverflow 데이터베이스에 연결할 거에요. 데이터베이스는 여기에 있어요!\n\n```js\n#덕DB 데이터베이스에 연결하는 방법이에요\nvn.connect_to_duckdb(url='motherduck:[<database_name>]?motherduck_token=<token>&saas_mode=true')\n```\n\n<div class=\"content-ad\"></div>\n\n# 훈련\n\n![이미지1](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_3.png)\n\n![이미지2](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_4.png)\n\n![이미지3](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_5.png)\n\n<div class=\"content-ad\"></div>\n\n# Plan (Information Schema)에 대한 훈련\n\n```js\n# 정보 스키마 쿼리는 데이터베이스에 따라 조정이 필요할 수 있습니다. 이것은 좋은 시작점입니다.\ndf_information_schema = vn.run_sql(\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS\")\n```\n\n```js\n# 정보 스키마를 LLM에서 참조할 수 있도록 작은 조각으로 나눕니다.\nplan = vn.get_training_plan_generic(df_information_schema)\nplan\n```\n\n```js\n# 계획이 마음에 들면 주석 처리하고 실행하여 훈련을 시작하세요.\nvn.train(plan=plan)\n```\n\n<div class=\"content-ad\"></div>\n\n# DDL 훈련\n\n```js\n# duckDB에서 describe 문은 모든 테이블에 대한 DDL을 가져올 수 있습니다\nvn.train(ddl=\"DESCRIBE SELECT * FROM Stackoverflow.users;\")\n```\n\n# SQL 문장에 대한 훈련\n\n```js\n# SQL 문장에 대한 훈련 예시입니다\nvn.train(\nquestion=\"가장 많은 배지를 가진 상위 10명의 사용자는 누구인가요?\"\n,sql=\"\"\"SELECT UserId, COUNT(*) AS badge_count\nFROM stackoverflow.main.badges\nGROUP BY UserId\nORDER BY badge_count DESC\nLIMIT 10\n\"\"\")\n# 다른 예시\nvn.train(\nquestion=\"가장 많은 답변을 한 사용자와 가장 적은 질문을 한 사용자 간의 총 답변 차이는 얼마인가요?\", \n,sql=\"SELECT MAX(answer_count) - MIN(answer_count) AS difference\nFROM (\n    SELECT OwnerUserId, COUNT(*) AS answer_count\n    FROM stackoverflow.main.posts\n    WHERE PostTypeId = 2\n    GROUP BY OwnerUserId\n) AS answer_counts;\n\")\n```\n\n<div class=\"content-ad\"></div>\n\n# 문서화를 통한 훈련\n\n```js\n# 문서화를 통해 맥락 정보를 제공할 수 있습니다.\nvn.train(documentation=\"해당 연도 가장 많은 답변을 낸 사용자를 대 마스터라고 부릅니다\")\n```\n\n훈련 데이터를 확인하려면 vn.get_training_data()를 사용하실 수 있습니다.\n\n```js\n# vn.ask는 다음 함수들을 순차적으로 실행하며, 각각 개별적으로 실행될 수 있습니다.\n# 1. vn.generate_ql\n# 2. vn.run_sql\n# 3. vn.generate_plotly_code\n# 4. vn.get_plotly_figure\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n# Vanna 훈련 후 질문을하는 방법입니다\nvn.ask('뱃지 수가 가장 많은 상위 10 명의 사용자를 찾아주세요?')\n```\n\n![이미지](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_6.png)\n\n![이미지](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_7.png)\n\n# Flask 앱 사용하기\n  \n\n<div class=\"content-ad\"></div>\n\nVanna는 내장 UI Flask 앱이 함께 제공됩니다. 주피터 노트북이나 Python 스크립트 내에서 실행할 수 있습니다.\n\n```js\nfrom vanna.flask import VannaFlaskApp\napp = VannaFlaskApp(vn)\napp.run()\n```\n\n<img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_8.png\" />\n\n이렇게 GPT 4o를 텍스트에서 SQL로 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 성능 비교\n\nGPT 4o와 이와 같은 클래스의 다른 모델들 사이의 비교 결과를 아래에서 확인할 수 있습니다. GPT 4o는 ChatGPT 4 turbo의 59%와 Claude Opus의 56%에 비해 최고 수준인 61%의 정확도로 성능을 발휘합니다.\n\n![image](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_9.png)\n\n읽어주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_0.png"},"coverImage":"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>OpenAI GPT 4o를 활용한 텍스트-SQL 파이프라인 만들기</h2>\n<p><img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_0.png\" alt=\"image\"></p>\n<p>OpenAI가 최신 주력 모델인 GPT 4o를 공개했습니다. 이 고급 모델은 멀티모달 기능을 갖추고 있어 이미지, 텍스트, 비디오 입력을 처리하여 어떠한 이전 모델보다 뛰어난 답변을 생성할 수 있습니다. 이 게시물은 GPT 4o와 Vanna AI를 사용하여 데이터베이스와 대화할 수 있는 텍스트-SQL 파이프라인을 구축하는 방법을 강조합니다.</p>\n<p><img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_1.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_2.png\">\n<h1>시작하기</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> vanna.<span class=\"hljs-property\">openai</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">OpenAI</span>_Chat\n<span class=\"hljs-keyword\">from</span> vanna.<span class=\"hljs-property\">vannadb</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">VannaDB</span>_VectorStore\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyVanna</span>(<span class=\"hljs-title class_\">VannaDB</span>_VectorStore, <span class=\"hljs-title class_\">OpenAI</span>_Chat):\n    def <span class=\"hljs-title function_\">__init__</span>(self, config=<span class=\"hljs-title class_\">None</span>):\n        <span class=\"hljs-variable constant_\">MY_VANNA_MODEL</span> = # <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//vanna.ai/account/profile에서 모델 이름을 가져와주세요</span>\n        <span class=\"hljs-title class_\">VannaDB</span>_VectorStore.<span class=\"hljs-title function_\">__init__</span>(self, vanna_model=<span class=\"hljs-variable constant_\">MY_VANNA_MODEL</span>, vanna_api_key=<span class=\"hljs-variable constant_\">MY_VANNA_API_KEY</span>, config=config)\n        <span class=\"hljs-title class_\">OpenAI</span>_Chat.<span class=\"hljs-title function_\">__init__</span>(self, config=config)\n\n# <span class=\"hljs-title class_\">OpenAI</span> api_key를 추가해주세요\nvn = <span class=\"hljs-title class_\">MyVanna</span>(config={<span class=\"hljs-string\">'api_key'</span>: <span class=\"hljs-string\">'sk-...'</span>, <span class=\"hljs-string\">'model'</span>: <span class=\"hljs-string\">'gpt-4o'</span>})\n</code></pre>\n<h1>데이터베이스 연결하기</h1>\n<div class=\"content-ad\"></div>\n<p>바나에는 내장된 커넥터로 다음 8가지 데이터베이스에 연결할 수 있어요 (다른 데이터베이스에 연결하려면 몇 줄의 추가 코드가 필요해요):</p>\n<ul>\n<li>Postgres SQL</li>\n<li>Oracle</li>\n<li>DuckDB</li>\n<li>MySQL</li>\n<li>SQLite</li>\n<li>Big Query</li>\n<li>Snowflake</li>\n<li>Microsoft SQL</li>\n</ul>\n<p>문서를 참고하면 특정 데이터베이스에 연결하는 방법을 알 수 있어요. 이 글에서는 DuckDB StackOverflow 데이터베이스에 연결할 거에요. 데이터베이스는 여기에 있어요!</p>\n<pre><code class=\"hljs language-js\">#덕<span class=\"hljs-variable constant_\">DB</span> 데이터베이스에 연결하는 방법이에요\nvn.<span class=\"hljs-title function_\">connect_to_duckdb</span>(url=<span class=\"hljs-string\">'motherduck:[&#x3C;database_name>]?motherduck_token=&#x3C;token>&#x26;saas_mode=true'</span>)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>훈련</h1>\n<p><img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_3.png\" alt=\"이미지1\"></p>\n<p><img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_4.png\" alt=\"이미지2\"></p>\n<p><img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_5.png\" alt=\"이미지3\"></p>\n<div class=\"content-ad\"></div>\n<h1>Plan (Information Schema)에 대한 훈련</h1>\n<pre><code class=\"hljs language-js\"># 정보 스키마 쿼리는 데이터베이스에 따라 조정이 필요할 수 있습니다. 이것은 좋은 시작점입니다.\ndf_information_schema = vn.<span class=\"hljs-title function_\">run_sql</span>(<span class=\"hljs-string\">\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS\"</span>)\n</code></pre>\n<pre><code class=\"hljs language-js\"># 정보 스키마를 <span class=\"hljs-variable constant_\">LLM</span>에서 참조할 수 있도록 작은 조각으로 나눕니다.\nplan = vn.<span class=\"hljs-title function_\">get_training_plan_generic</span>(df_information_schema)\nplan\n</code></pre>\n<pre><code class=\"hljs language-js\"># 계획이 마음에 들면 주석 처리하고 실행하여 훈련을 시작하세요.\nvn.<span class=\"hljs-title function_\">train</span>(plan=plan)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>DDL 훈련</h1>\n<pre><code class=\"hljs language-js\"># duckDB에서 describe 문은 모든 테이블에 대한 <span class=\"hljs-variable constant_\">DDL</span>을 가져올 수 있습니다\nvn.<span class=\"hljs-title function_\">train</span>(ddl=<span class=\"hljs-string\">\"DESCRIBE SELECT * FROM Stackoverflow.users;\"</span>)\n</code></pre>\n<h1>SQL 문장에 대한 훈련</h1>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-variable constant_\">SQL</span> 문장에 대한 훈련 예시입니다\nvn.<span class=\"hljs-title function_\">train</span>(\nquestion=<span class=\"hljs-string\">\"가장 많은 배지를 가진 상위 10명의 사용자는 누구인가요?\"</span>\n,sql=<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"SELECT UserId, COUNT(*) AS badge_count\nFROM stackoverflow.main.badges\nGROUP BY UserId\nORDER BY badge_count DESC\nLIMIT 10\n\"</span><span class=\"hljs-string\">\"\"</span>)\n# 다른 예시\nvn.<span class=\"hljs-title function_\">train</span>(\nquestion=<span class=\"hljs-string\">\"가장 많은 답변을 한 사용자와 가장 적은 질문을 한 사용자 간의 총 답변 차이는 얼마인가요?\"</span>, \n,sql=<span class=\"hljs-string\">\"SELECT MAX(answer_count) - MIN(answer_count) AS difference\nFROM (\n    SELECT OwnerUserId, COUNT(*) AS answer_count\n    FROM stackoverflow.main.posts\n    WHERE PostTypeId = 2\n    GROUP BY OwnerUserId\n) AS answer_counts;\n\"</span>)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>문서화를 통한 훈련</h1>\n<pre><code class=\"hljs language-js\"># 문서화를 통해 맥락 정보를 제공할 수 있습니다.\nvn.<span class=\"hljs-title function_\">train</span>(documentation=<span class=\"hljs-string\">\"해당 연도 가장 많은 답변을 낸 사용자를 대 마스터라고 부릅니다\"</span>)\n</code></pre>\n<p>훈련 데이터를 확인하려면 vn.get_training_data()를 사용하실 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"># vn.<span class=\"hljs-property\">ask</span>는 다음 함수들을 순차적으로 실행하며, 각각 개별적으로 실행될 수 있습니다.\n# <span class=\"hljs-number\">1.</span> vn.<span class=\"hljs-property\">generate_ql</span>\n# <span class=\"hljs-number\">2.</span> vn.<span class=\"hljs-property\">run_sql</span>\n# <span class=\"hljs-number\">3.</span> vn.<span class=\"hljs-property\">generate_plotly_code</span>\n# <span class=\"hljs-number\">4.</span> vn.<span class=\"hljs-property\">get_plotly_figure</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Vanna</span> 훈련 후 질문을하는 방법입니다\nvn.<span class=\"hljs-title function_\">ask</span>(<span class=\"hljs-string\">'뱃지 수가 가장 많은 상위 10 명의 사용자를 찾아주세요?'</span>)\n</code></pre>\n<p><img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_6.png\" alt=\"이미지\"></p>\n<p><img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_7.png\" alt=\"이미지\"></p>\n<h1>Flask 앱 사용하기</h1>\n<div class=\"content-ad\"></div>\n<p>Vanna는 내장 UI Flask 앱이 함께 제공됩니다. 주피터 노트북이나 Python 스크립트 내에서 실행할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> vanna.<span class=\"hljs-property\">flask</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">VannaFlaskApp</span>\napp = <span class=\"hljs-title class_\">VannaFlaskApp</span>(vn)\napp.<span class=\"hljs-title function_\">run</span>()\n</code></pre>\n<img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_8.png\">\n<p>이렇게 GPT 4o를 텍스트에서 SQL로 사용할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>성능 비교</h1>\n<p>GPT 4o와 이와 같은 클래스의 다른 모델들 사이의 비교 결과를 아래에서 확인할 수 있습니다. GPT 4o는 ChatGPT 4 turbo의 59%와 Claude Opus의 56%에 비해 최고 수준인 61%의 정확도로 성능을 발휘합니다.</p>\n<p><img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_9.png\" alt=\"image\"></p>\n<p>읽어주셔서 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}