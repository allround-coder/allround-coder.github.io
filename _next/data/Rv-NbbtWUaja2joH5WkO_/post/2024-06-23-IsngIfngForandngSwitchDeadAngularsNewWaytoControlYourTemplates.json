{"pageProps":{"post":{"title":"ngIf, ngFor, ngSwitch 사라졌나요 앵귤러의 새로운 템플릿 제어 방법","description":"","date":"2024-06-23 14:08","slug":"2024-06-23-IsngIfngForandngSwitchDeadAngularsNewWaytoControlYourTemplates","content":"\n\n\n![Angular 17 Release](/assets/img/2024-06-23-IsngIfngForandngSwitchDeadAngularsNewWaytoControlYourTemplates_0.png)\n\nAngular의 17 버전 릴리스는 템플릿 시스템을 개선하는 등 매우 흥미로운 새로운 기능이 포함되어 있습니다. 가장 중요한 추가 기능 중 하나는 제어 흐름을 위한 새로운 내장 구문입니다.\n\n이 선언적 접근 방식은 *ngIf, *ngFor, ngSwitch와 같은 디렉티브가 필요하지 않도록하여 템플릿 로직을 프레임워크 자체 내에서 간소화합니다. 또한 Angular V17에서는 컴포넌트, 디렉티브 및 파이프를 게으르게 로드하여 성능을 향상시킬 수 있는 지연 로딩(deferrable views)을 도입했습니다. 이러한 발전은 Angular 템플릿에 상당한 영향을 미치며, 이에 따라 기존 응용 프로그램을 새로운 템플릿 시스템으로 이관하는 데 도움이 되는 새로운 ngcommand가 추가되었습니다.\n\n다음은 템플릿에서 이 새로운 제어 흐름의 예시입니다:\n\n\n\n<div class=\"content-ad\"></div>\n\n```js\n@if (user.isHuman) {\n  <human-profile [data]=\"user\" />\n   @for (skill of user.skills; track $index) {\n     <human-skills  [name]=\"skill.name\" [level]=\"skill.level\" />\n   } @empty {\n    <span>기술이 추가되지 않았습니다.</span>\n   }\n} @else if (user.isRobot) {\n  <!-- 로봇 사용자는 드물기 때문에 프로필을 나중에 불러옵니다. -->\n  @defer {\n    <robot-profile [data]=\"user\" />\n  }\n} @else {\n  <p>프로필을 알 수 없습니다!</p>\n}\n```\n\n## @if 블록 조건\n\n@if 블록은 조건이 참일 때 콘텐츠를 표시합니다.\n\n```js\n@if (loggedIn) {\n  환영합니다 {username}\n}\n```\n\n<div class=\"content-ad\"></div>\n\ntable 태그를 Markdown 형식으로 변경할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n@for (skill of user.skills; track $index) {\n  <human-skills  [name]=\"skill.name\" [level]=\"skill.level\" />\n}\n\n\n트랙: Angular는 변경되는 컬렉션과 작업할 때 성능을 최적화하기 위해 개별 항목을 식별하는 트랙 표현식을 사용합니다. 이 기능은 각 항목을 해당 DOM 뷰와 연결하는 데 사용되는 키를 지정합니다. 이러한 키를 비교함으로써 Angular는 추가, 제거 또는 이동된 항목을 효율적으로 파악하여 불필요한 DOM 조작을 최소화할 수 있습니다. 효율적으로 트랙을 사용하면 Angular 애플리케이션의 성능을 크게 향상시킬 수 있습니다.\n\n콘텍스트 변수: @for 내용 안에는 다음과 같은 많은 변수를 사용할 수 있습니다:\n\n![contextual variables](/assets/img/2024-06-23-IsngIfngForandngSwitchDeadAngularsNewWaytoControlYourTemplates_1.png)\n\n\n<div class=\"content-ad\"></div>\n\n```js\n@for (skill of user.skills; track $index) {\n  <human-skills  [name]=\"skill.name\" [level]=\"skill.level\" />\n} @empty {\n  <span> 기술이 추가되지 않았습니다.</span>\n}\n```\n\n## @switch 블록 — 선택\n\n다른 모든 프로그래밍 언어의 switch 문을 영감받아, 값은 === 연산자로 케이스 표현식과 비교됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n@switch (condition) {\n@case (caseA) {\nCase A.\n}\n@case (caseB) {\nCase B.\n}\n@default {\nDefault case.\n}\n}\n```\n\nAngular의 @switch 블록은 fallthrough가 없으므로 return 또는 break 문을 사용할 필요가 없습니다.\n\n## Angular에서 @를 선택한 이유는?\n\nAngular의 제어 흐름 및 지연 가능한 뷰 제안서는 긍정적인 피드백을 받았지만 템플릿에 대한 #-구문은 논란을 빚었습니다. 초기 RFC에서는 HTML과 유사한 태그를 제안했지만 커뮤니티 피드백은 새로운 \"@-구문\"을 선호했습니다. Angular 팀은 이 대안을 인기 때문에 평가하고 최종 결정을 내리기 전에 더 많은 데이터를 수집할 것입니다.\n\n<div class=\"content-ad\"></div>\n\nAngular은 제어 흐름 구문 옵션인 #과 @에 대한 개발자 경험을 조사했습니다. 내부 팀, Google 개발자 전문가(GDE), 개발자 설문 및 사용자 연구를 통해 피드백을 수집했습니다. 결과는 분명하게 나타났습니다: 약 2 대 1의 비율로 개발자들이 원래의 \"#-syntax\" 대신 커뮤니티가 제안한 \"@-syntax\"를 선호했습니다.\n\n이 차트는 Angular 팀 연례 설문에 응답한 수천 명의 개발자들의 선호도를 보여줍니다:\n\n![Angular Team Survey](/assets/img/2024-06-23-IsngIfngForandngSwitchDeadAngularsNewWaytoControlYourTemplates_2.png)\n\nAngular 팀이 커뮤니티가 제안한 @-syntax를 고려하는 것은 그들의 의지를 향한 증명입니다.\n\n<div class=\"content-ad\"></div>\n\n## 어떤 제어 흐름이 대체될 것인가\n\n- @switch 지시어는 여러 이점을 갖는 ngSwitch를 대체합니다. 먼저, 조건을 보관할 컨테이너 요소가 필요하지 않습니다. 둘째로, 템플릿 유형 확인을 지원합니다.\n- @for 블록은 *ngFor 지시어를 대체합니다. 또한, @empty 블록 지원이 도입되며 추적에 대한 최적화를 제공합니다. 요소 컬렉션의 변경에 대한 응답으로 필요한 최소 DOM 작업 횟수를 계산하는 새로운 최적화 알고리즘을 활용합니다.\n\n## 구조 지시어에서 마이그레이션\n\n이 문서에서 언급된 대로, Angular 팀은 Angular 17부터 구조 지시어에서 단순화된 제어 흐름 구문으로의 마이그레이션을 고려해 왔습니다. 이 마이그레이션은 CommonModule이 필요하지 않도록 만듭니다. Angular CLI에는 이 프로세스를 자동화하는 새로운 스키매틱이 포함되어 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n$ ng generate @angular/core:control-flow\n```\n\n이 글의 끝까지 읽어 주셔서 감사합니다! 다음을 꼭 확인해 보세요:\n\n- **박수**를 치고 작가를 팔로우 해 주세요 👏\n- 저를 팔로우 해 주세요: X | LinkedIn | YouTube","ogImage":{"url":"/assets/img/2024-06-23-IsngIfngForandngSwitchDeadAngularsNewWaytoControlYourTemplates_0.png"},"coverImage":"/assets/img/2024-06-23-IsngIfngForandngSwitchDeadAngularsNewWaytoControlYourTemplates_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-IsngIfngForandngSwitchDeadAngularsNewWaytoControlYourTemplates_0.png\" alt=\"Angular 17 Release\"></p>\n<p>Angular의 17 버전 릴리스는 템플릿 시스템을 개선하는 등 매우 흥미로운 새로운 기능이 포함되어 있습니다. 가장 중요한 추가 기능 중 하나는 제어 흐름을 위한 새로운 내장 구문입니다.</p>\n<p>이 선언적 접근 방식은 *ngIf, *ngFor, ngSwitch와 같은 디렉티브가 필요하지 않도록하여 템플릿 로직을 프레임워크 자체 내에서 간소화합니다. 또한 Angular V17에서는 컴포넌트, 디렉티브 및 파이프를 게으르게 로드하여 성능을 향상시킬 수 있는 지연 로딩(deferrable views)을 도입했습니다. 이러한 발전은 Angular 템플릿에 상당한 영향을 미치며, 이에 따라 기존 응용 프로그램을 새로운 템플릿 시스템으로 이관하는 데 도움이 되는 새로운 ngcommand가 추가되었습니다.</p>\n<p>다음은 템플릿에서 이 새로운 제어 흐름의 예시입니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">if</span> (user.<span class=\"hljs-property\">isHuman</span>) {\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">human-profile</span> [<span class=\"hljs-attr\">data</span>]=<span class=\"hljs-string\">\"user\"</span> /></span></span>\n   @<span class=\"hljs-keyword\">for</span> (skill <span class=\"hljs-keyword\">of</span> user.<span class=\"hljs-property\">skills</span>; track $index) {\n     <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">human-skills</span>  [<span class=\"hljs-attr\">name</span>]=<span class=\"hljs-string\">\"skill.name\"</span> [<span class=\"hljs-attr\">level</span>]=<span class=\"hljs-string\">\"skill.level\"</span> /></span></span>\n   } @empty {\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>기술이 추가되지 않았습니다.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span></span>\n   }\n} @<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (user.<span class=\"hljs-property\">isRobot</span>) {\n  &#x3C;!-- 로봇 사용자는 드물기 때문에 프로필을 나중에 불러옵니다. -->\n  @defer {\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">robot-profile</span> [<span class=\"hljs-attr\">data</span>]=<span class=\"hljs-string\">\"user\"</span> /></span></span>\n  }\n} @<span class=\"hljs-keyword\">else</span> {\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>프로필을 알 수 없습니다!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n}\n</code></pre>\n<h2>@if 블록 조건</h2>\n<p>@if 블록은 조건이 참일 때 콘텐츠를 표시합니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">if</span> (loggedIn) {\n  환영합니다 {username}\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>table 태그를 Markdown 형식으로 변경할 수도 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>@for (skill of user.skills; track $index) {\n&#x3C;human-skills  [name]=\"skill.name\" [level]=\"skill.level\" />\n}</p>\n<p>트랙: Angular는 변경되는 컬렉션과 작업할 때 성능을 최적화하기 위해 개별 항목을 식별하는 트랙 표현식을 사용합니다. 이 기능은 각 항목을 해당 DOM 뷰와 연결하는 데 사용되는 키를 지정합니다. 이러한 키를 비교함으로써 Angular는 추가, 제거 또는 이동된 항목을 효율적으로 파악하여 불필요한 DOM 조작을 최소화할 수 있습니다. 효율적으로 트랙을 사용하면 Angular 애플리케이션의 성능을 크게 향상시킬 수 있습니다.</p>\n<p>콘텍스트 변수: @for 내용 안에는 다음과 같은 많은 변수를 사용할 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-23-IsngIfngForandngSwitchDeadAngularsNewWaytoControlYourTemplates_1.png\" alt=\"contextual variables\"></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">for</span> (skill <span class=\"hljs-keyword\">of</span> user.<span class=\"hljs-property\">skills</span>; track $index) {\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">human-skills</span>  [<span class=\"hljs-attr\">name</span>]=<span class=\"hljs-string\">\"skill.name\"</span> [<span class=\"hljs-attr\">level</span>]=<span class=\"hljs-string\">\"skill.level\"</span> /></span></span>\n} @empty {\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span> 기술이 추가되지 않았습니다.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span></span>\n}\n</code></pre>\n<h2>@switch 블록 — 선택</h2>\n<p>다른 모든 프로그래밍 언어의 switch 문을 영감받아, 값은 === 연산자로 케이스 표현식과 비교됩니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">switch</span> (condition) {\n@<span class=\"hljs-keyword\">case</span> (caseA) {\n<span class=\"hljs-title class_\">Case</span> A.\n}\n@<span class=\"hljs-keyword\">case</span> (caseB) {\n<span class=\"hljs-title class_\">Case</span> B.\n}\n@<span class=\"hljs-keyword\">default</span> {\n<span class=\"hljs-title class_\">Default</span> <span class=\"hljs-keyword\">case</span>.\n}\n}\n</code></pre>\n<p>Angular의 @switch 블록은 fallthrough가 없으므로 return 또는 break 문을 사용할 필요가 없습니다.</p>\n<h2>Angular에서 @를 선택한 이유는?</h2>\n<p>Angular의 제어 흐름 및 지연 가능한 뷰 제안서는 긍정적인 피드백을 받았지만 템플릿에 대한 #-구문은 논란을 빚었습니다. 초기 RFC에서는 HTML과 유사한 태그를 제안했지만 커뮤니티 피드백은 새로운 \"@-구문\"을 선호했습니다. Angular 팀은 이 대안을 인기 때문에 평가하고 최종 결정을 내리기 전에 더 많은 데이터를 수집할 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>Angular은 제어 흐름 구문 옵션인 #과 @에 대한 개발자 경험을 조사했습니다. 내부 팀, Google 개발자 전문가(GDE), 개발자 설문 및 사용자 연구를 통해 피드백을 수집했습니다. 결과는 분명하게 나타났습니다: 약 2 대 1의 비율로 개발자들이 원래의 \"#-syntax\" 대신 커뮤니티가 제안한 \"@-syntax\"를 선호했습니다.</p>\n<p>이 차트는 Angular 팀 연례 설문에 응답한 수천 명의 개발자들의 선호도를 보여줍니다:</p>\n<p><img src=\"/assets/img/2024-06-23-IsngIfngForandngSwitchDeadAngularsNewWaytoControlYourTemplates_2.png\" alt=\"Angular Team Survey\"></p>\n<p>Angular 팀이 커뮤니티가 제안한 @-syntax를 고려하는 것은 그들의 의지를 향한 증명입니다.</p>\n<div class=\"content-ad\"></div>\n<h2>어떤 제어 흐름이 대체될 것인가</h2>\n<ul>\n<li>@switch 지시어는 여러 이점을 갖는 ngSwitch를 대체합니다. 먼저, 조건을 보관할 컨테이너 요소가 필요하지 않습니다. 둘째로, 템플릿 유형 확인을 지원합니다.</li>\n<li>@for 블록은 *ngFor 지시어를 대체합니다. 또한, @empty 블록 지원이 도입되며 추적에 대한 최적화를 제공합니다. 요소 컬렉션의 변경에 대한 응답으로 필요한 최소 DOM 작업 횟수를 계산하는 새로운 최적화 알고리즘을 활용합니다.</li>\n</ul>\n<h2>구조 지시어에서 마이그레이션</h2>\n<p>이 문서에서 언급된 대로, Angular 팀은 Angular 17부터 구조 지시어에서 단순화된 제어 흐름 구문으로의 마이그레이션을 고려해 왔습니다. 이 마이그레이션은 CommonModule이 필요하지 않도록 만듭니다. Angular CLI에는 이 프로세스를 자동화하는 새로운 스키매틱이 포함되어 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">$ ng generate @angular/<span class=\"hljs-attr\">core</span>:control-flow\n</code></pre>\n<p>이 글의 끝까지 읽어 주셔서 감사합니다! 다음을 꼭 확인해 보세요:</p>\n<ul>\n<li><strong>박수</strong>를 치고 작가를 팔로우 해 주세요 👏</li>\n<li>저를 팔로우 해 주세요: X | LinkedIn | YouTube</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}