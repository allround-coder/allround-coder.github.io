{"pageProps":{"post":{"title":"Angular에서 Firebase 인증 사용하는 방법","description":"","date":"2024-06-23 14:06","slug":"2024-06-23-Firebaseauthenticationinangular","content":"\n\n이 기사에서는 Angular 프로젝트에 Firebase 인증을 Google Single Sign-On (SSO)과 빠르게 설정하는 방법을 제안합니다. 또한 선택한 백엔드에 인증된 요청을 하는 방법도 포함되어 있습니다.\n\n![이미지](/assets/img/2024-06-23-Firebaseauthenticationinangular_0.png)\n\n전체 코드는 여기에서 확인할 수 있습니다: https://github.com/Gabriel2409/demofirebase\n\n# Firebase 설정\n\n<div class=\"content-ad\"></div>\n\nFirebase에 가서 새 프로젝트를 만들어주세요.\n\n## 앱 설치\n\n프로젝트 개요 페이지에서 Web 아이콘을 클릭하거나 +앱 추가 아이콘을 클릭하여 웹 애플리케이션을 추가하세요.\n\n![이미지](/assets/img/2024-06-23-Firebaseauthenticationinangular_1.png)\n\n<div class=\"content-ad\"></div>\n\n열리는 창에서 앱에 이름을 지정하고, 예를 들어 myangularapp처럼 등록해주세요. Firebase 구성을 어딘가에 저장하세요. 다음과 같이 보여야 합니다:\n\n```js\nconst firebaseConfig = {\n  apiKey: \"<firebase-api-key>\",\n  authDomain: \"<my-project-id>.firebaseapp.com\",\n  projectId: \"<my-project-id>\",\n  storageBucket: \"<my-project-id>.appspot.com\",\n  messagingSenderId: \"<my-messaging-sender-id\",\n  appId: \"<my-app-id>\",\n};\n```\n\n프로젝트 설정의 일반 탭(톱니바퀴 아이콘)로 이동하여 아무 때나 앱의 Firebase 구성에 액세스할 수 있음을 유념하세요.\n\n## 인증 설정\n\n<div class=\"content-ad\"></div>\n\n모든 제품으로 이동한 다음 **인증**을 선택하세요. **로그인 방법**에서 **새로운 제공자 추가**를 클릭하고 Google을 선택하세요. Firebase는 Google과 긴밀하게 통합되어 있기 때문에 별도의 설정이 필요하지 않습니다.\n\n그게 다에요! 이제 Google SSO를 사용하여 Firebase 사용자를 인증할 준비가 되었습니다.\n\n참고: 다른 제공자도 추가할 수 있습니다(예: 이메일/비밀번호, 아래 이미지 참조), 하지만 이 기사에서는 Google SSO에 중점을 두고 있습니다.\n\n![이미지](/assets/img/2024-06-23-Firebaseauthenticationinangular_2.png)\n\n<div class=\"content-ad\"></div>\n\n# Angular 설정\n\n## 프로젝트 생성\n\n먼저, npm install -g @angular/cli를 사용하여 Angular을 전역으로 설치하세요. 저는 버전 17.0.1을 사용하고 있어요.\n\n그런 다음, demofirebase라는 새 폴더를 만들고 해당 폴더에서 ng new frontend --no-standalone --routing ssr=false을 실행하세요. 이렇게 하면 필요한 파일이 포함된 frontend 폴더가 생성됩니다. 이 단계를 마치면 저장소 구조는 다음과 같아야 합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\ndemofirebase\n└── frontend\n```\n\n하나의 추가 패키지가 필요합니다. frontend 폴더에서 npm i @angular/fire 명령어를 실행해주세요.\n\n다음으로, 개발 및 프로덕션을 위한 환경을 생성할 때 ng g environments를 사용합니다.\n이는 src/environments 폴더에 2개의 파일을 생성합니다: environment.development.ts와 environment.ts.\n로컬에서 개발할 때는 environment.ts가 environment.development.ts로 대체되어 environment.ts에서 import를 하면 자동으로 environment.development.ts의 변수들을 사용할 수 있습니다. 이는 angular.json 파일에서 확인할 수 있습니다:\n\n```js\n\"fileReplacements\": [\n    {\n        \"replace\": \"src/environments/environment.ts\",\n        \"with\": \"src/environments/environment.development.ts\"\n    }\n]\n```\n\n<div class=\"content-ad\"></div>\n\nFirebase 구성을 environment.development.ts에 붙여 넣으세요.\n\n```js\n// environment.development.ts\nexport const environment = {\n  production: false,\n  // 백엔드에 요청을 보낼 수 있는 가정\n  backendUrl: \"http://127.0.0.1:8000\",\n  // 콘솔에서 가져온 Firebase 구성입니다.\n  // 이것은 민감한 정보가 아님을 주의하세요\n  firebaseConfig: {\n    apiKey: \"<firebase-api-key>\",\n    authDomain: \"<my-project-id>.firebaseapp.com\",\n    projectId: \"<my-project-id>\",\n    storageBucket: \"<my-project-id>.appspot.com\",\n    messagingSenderId: \"<my-messaging-sender-id\",\n    appId: \"<my-app-id>\",\n  },\n};\n```\n\n참고: production용 (environment.ts 파일)으로 가시려면, backendUrl을 배포된 백엔드로, firebaseConfig을 production 구성으로 대체하시면 됩니다. Firebase 프로젝트는 여러 환경을 가질 수 없으므로 환경마다 프로젝트를 생성하는 것이 좋습니다. 지금은 빠른 진행을 위해 더미 값만 사용하셔서 IDE에서 필드 부족으로 에러가 발생하지 않도록 하세요.\n\n```js\n// environment.ts\nexport const environment = {\n  production: true,\n  backendUrl: \"backendUrl\",\n  firebaseConfig: {},\n};\n```\n\n<div class=\"content-ad\"></div>\n\n앱 모듈(app.module.ts)에 필요한 import 문을 추가하고 애플리케이션을 초기화하세요:\n\n```js\n//app.module.ts\nimport { NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\nimport { AngularFireModule } from \"@angular/fire/compat\";\nimport { AngularFireAuthModule } from \"@angular/fire/compat/auth\";\nimport { environment } from \"../environments/environment\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    AngularFireAuthModule,\n    AngularFireModule.initializeApp(environment.firebaseConfig),\n    BrowserModule,\n    AppRoutingModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n```\n\n## 필요한 컴포넌트와 라우트 생성\n\n첫째로, Google SSO를 위한 컴포넌트를 생성하려면 'ng g c signin'을 사용하고, 랜딩 페이지를 위한 컴포넌트를 생성하려면 'ng g c landing'을 사용하세요.\n\n<div class=\"content-ad\"></div>\n\n아래는 Markdown으로 테이블 태그를 변경하세요.\n\n그럼, app-routing.module.ts을 수정하세요:\n\n```typescript\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { SigninComponent } from \"./signin/signin.component\";\nimport { LandingComponent } from \"./landing/landing.component\";\n\nconst routes: Routes = [\n  { path: \"\", component: LandingComponent },\n  { path: \"signin\", component: SigninComponent },\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\n마지막으로, app.component를 수정하세요:\n\n```typescript\n// app.component.ts\n<nav>\n  <ul>\n    <li>\n      <a routerLink=\"/\">랜딩 페이지</a>\n    </li>\n    <li>\n      <a routerLink=\"/signin\">로그인 페이지</a>\n    </li>\n  </ul>\n</nav>\n<router-outlet></router-outlet>\n```\n\n<div class=\"content-ad\"></div>\n\n지금 ng serve를 실행하고 http://localhost:4200으로 이동하면 아주 아름다운 페이지를 볼 수 있고, 랜딩 페이지와 로그인 페이지 사이를 이동할 수 있습니다.\n\n![이미지](/assets/img/2024-06-23-Firebaseauthenticationinangular_3.png)\n\n## 구글 SSO 추가하기\n\n구글 SSO를 추가하려면 단순히 버튼에 click 이벤트 리스너를 추가하면 됩니다. 저는 재사용 가능하도록 지시어를 사용하는 것을 선호하는데, 아래에 제가 보여주는 구현 방법을 사용하시면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n구글 SSO를 실행하여 지시문을 만들고 app.module.ts에 자동으로 추가합니다.\n\n```js\n//google-sso.directive.ts\nimport { Directive, HostListener } from \"@angular/core\";\nimport { AngularFireAuth } from \"@angular/fire/compat/auth\";\nimport { GoogleAuthProvider } from \"@firebase/auth\";\n\n@Directive({\n  selector: \"[googleSso]\",\n})\nexport class GoogleSsoDirective {\n  constructor(private angularFireAuth: AngularFireAuth) {}\n  @HostListener(\"click\")\n  async onClick() {\n    const creds = await this.angularFireAuth.signInWithPopup(\n      new GoogleAuthProvider(),\n    );\n    // 자격 증명으로 할 일을 실행합니다, 예를 들어 Firestore에 추가하기...\n  }\n}\n```\n\napp.module.ts에 지시문을 추가하십시오.\n\n이제 로그인 페이지에서 해당 지시문을 사용할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<!-- signin.component.html -->\n<button googleSso>Google 계정으로 로그인</button>\n```\n\n그게 다에요. 작동하는지 확인하려면 프론트엔드로 이동하여 만든 버튼을 클릭하세요. 로그인한 후에 Firebase 콘솔로 돌아가세요. 인증에서 사용자 탭으로 이동하면 로그인에 사용한 이메일이 나타날 것입니다.\n\n계속 진행하기 전에 로그아웃이 가능하도록 로그인 구성요소를 수정해봅시다.\n\n```js\n// signin.component.ts\nimport { Component } from \"@angular/core\";\nimport { AngularFireAuth } from \"@angular/fire/compat/auth\";\n@Component({\n  selector: \"app-signin\",\n  templateUrl: \"./signin.component.html\",\n  styleUrl: \"./signin.component.scss\",\n})\nexport class SigninComponent {\n  constructor(public angularFireAuth: AngularFireAuth) {}\n  logOut() {\n    this.angularFireAuth.signOut();\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n\n<!-- signin.component.html -->\n@if (angularFireAuth.authState | async) {\n<button (click)=\"logOut()\">Log out</button>\n} @else {\n<button googleSso>Sign in with google</button>\n}\n\n\n## Adding a route available only for logged in users\n\nLet’s create another component: ng g c require-auth\n\nThen let’s create a guard: ng g g auth then select CanActivate\n\n\n<div class=\"content-ad\"></div>\n\n```js\n// auth.guard.ts\nimport { CanActivateFn } from \"@angular/router\";\nimport { inject } from \"@angular/core\";\nimport { AngularFireAuth } from \"@angular/fire/compat/auth\";\n\nexport const authGuard: CanActivateFn = async (route, state) => {\n  const angularFireAuth = inject(AngularFireAuth);\n  const user = await angularFireAuth.currentUser;\n  // coerce to boolean\n  const isLoggedIn = !!user;\n  return isLoggedIn;\n};\n```\n\n그런 다음 app-routing.module.ts의 라우트를 수정합니다.\n\n```js\n// app-routing.module.ts - new lines\n...\nimport { RequireAuthComponent } from './require-auth/require-auth.component';\nimport { authGuard } from './auth.guard';\nconst routes: Routes = [\n  ...\n  {\n    path: 'require-auth',\n    component: RequireAuthComponent,\n    canActivate: [authGuard],\n  },\n];\n...\n```\n\napp.component.html에 추가하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<li>\n  <a routerLink=\"/require-auth\">Auth protected</a>\n</li>\n```\n\n이제 로그인한 상태에서만 액세스할 수 있는 경로가 생겼어요.\n\n## 백엔드 경로로 bearer 토큰을 보내는 인터셉터\n\n백엔드에서 요청을 인증하려면 Firebase에서 제공한 토큰을 Authorization 헤더에 추가해야 합니다. 백엔드에서는 토큰을 확인하는 작업을 담당할 것입니다(본 문서의 범위를 벗어남).\n\n<div class=\"content-ad\"></div>\n\nng g interceptor bearer-token 명령을 사용하여 interceptor를 생성하세요.\n\n```js\n// bearer-token.interceptor.ts\nimport { HttpEvent, HttpHandlerFn, HttpInterceptorFn, HttpRequest } from \"@angular/common/http\";\nimport { inject } from \"@angular/core\";\nimport { AngularFireAuth } from \"@angular/fire/compat/auth\";\nimport { from, lastValueFrom } from \"rxjs\";\nimport { environment } from \"../environments/environment\";\n\n// 토큰을 얻는 작업이 비동기적이므로 이 함수를 추가해야 합니다.\nconst addBearerToken = async (\n  req: HttpRequest<any>,\n  next: HttpHandlerFn,\n): Promise<HttpEvent<any>> => {\n  const angularFireAuth = inject(AngularFireAuth);\n  const firebaseUser = await angularFireAuth.currentUser;\n  const token = await firebaseUser?.getIdToken();\n  if (token) {\n    req = req.clone({\n      setHeaders: { Authorization: `Bearer ${token}` },\n    });\n  }\n  return lastValueFrom(next(req));\n};\nexport const bearerTokenInterceptor: HttpInterceptorFn = (req, next) => {\n  // 이 bearer token을 백엔드로 보내는 요청에만 추가합니다.\n  // 특정 요청에만 bearer token을 추가하도록 사용자 정의할 수 있습니다.\n  if (req.url.startsWith(environment.backendUrl)) {\n    return from(addBearerToken(req, next));\n  } else {\n    return next(req);\n  }\n};\n```\n\n그런 다음 app.module.ts에 provider를 추가해야 합니다.\n\n```js\n// app.module.ts\n\n...\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { bearerTokenInterceptor } from './bearer-token.interceptor';\n...\n  providers: [provideHttpClient(withInterceptors([bearerTokenInterceptor]))],\n...\n```\n\n<div class=\"content-ad\"></div>\n\n마지막으로 확인해보기 위해 백엔드를 호출하는 서비스를 생성해봅시다: ng g s api\n\n```js\n// api.service.ts\nimport { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { environment } from \"../environments/environment\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ApiService {\n  // 현재 사용자의 firebase 사용자 ID를 반환하는 백엔드 URL\n  userIdUrl = `${environment.backendUrl}/userid`;\n  constructor(private http: HttpClient) {}\n  getUserId(): Observable<any> {\n    return this.http.get(this.userIdUrl);\n  }\n}\n```\n\n그리고 랜딩 컴포넌트에서:\n\n```js\n<button (click)=\"getUserId()\">사용자 ID 가져오기</button>\n```\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { Component } from \"@angular/core\";\nimport { ApiService } from \"../api.service\";\n@Component({\n  selector: \"app-landing\",\n  templateUrl: \"./landing.component.html\",\n  styleUrl: \"./landing.component.scss\",\n})\nexport class LandingComponent {\n  constructor(private apiService: ApiService) {}\n  getUserId() {\n    this.apiService.getUserId().subscribe({\n      next: (res) => console.log(res),\n      error: (err) => console.log(err),\n    });\n  }\n}\n```\n\n이제 백엔드에 요청을 보내는 버튼이 생겼어요. 개발자 도구의 네트워크 탭에서 인증되어 있다면 토큰이 Authorization 헤더에 추가되는 것을 확인할 수 있어요.\n\n![이미지](/assets/img/2024-06-23-Firebaseauthenticationinangular_4.png)\n\n## 추가 정보: Firebase는 로그인 정보를 어디에 저장하나요?\n\n<div class=\"content-ad\"></div>\n\n저희가 인터셉터를 사용할 때 다음 코드를 사용했습니다:\n\n```js\nconst angularFireAuth = inject(AngularFireAuth);\nconst firebaseUser = await angularFireAuth.currentUser;\nconst token = await firebaseUser?.getIdToken();\n```\n\n하지만 이 코드는 실제로 어떻게 작동할까요? 정보는 어디에 저장되나요?\n\n사실, Google SSO로 인증할 때, 인증 정보가 브라우저에 저장됩니다. 브라우저 개발자 도구를 열고 저장소 탭 (Chrome의 경우 Application)으로 이동하신 다음 Indexed DB로 이동해보세요.\n\n<div class=\"content-ad\"></div>\n\n<table> 태그를 Markdown 형식으로 변경해주세요.","ogImage":{"url":"/assets/img/2024-06-23-Firebaseauthenticationinangular_0.png"},"coverImage":"/assets/img/2024-06-23-Firebaseauthenticationinangular_0.png","tag":["Tech"],"readingTime":12},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 기사에서는 Angular 프로젝트에 Firebase 인증을 Google Single Sign-On (SSO)과 빠르게 설정하는 방법을 제안합니다. 또한 선택한 백엔드에 인증된 요청을 하는 방법도 포함되어 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-Firebaseauthenticationinangular_0.png\" alt=\"이미지\"></p>\n<p>전체 코드는 여기에서 확인할 수 있습니다: <a href=\"https://github.com/Gabriel2409/demofirebase\" rel=\"nofollow\" target=\"_blank\">https://github.com/Gabriel2409/demofirebase</a></p>\n<h1>Firebase 설정</h1>\n<div class=\"content-ad\"></div>\n<p>Firebase에 가서 새 프로젝트를 만들어주세요.</p>\n<h2>앱 설치</h2>\n<p>프로젝트 개요 페이지에서 Web 아이콘을 클릭하거나 +앱 추가 아이콘을 클릭하여 웹 애플리케이션을 추가하세요.</p>\n<p><img src=\"/assets/img/2024-06-23-Firebaseauthenticationinangular_1.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>열리는 창에서 앱에 이름을 지정하고, 예를 들어 myangularapp처럼 등록해주세요. Firebase 구성을 어딘가에 저장하세요. 다음과 같이 보여야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> firebaseConfig = {\n  <span class=\"hljs-attr\">apiKey</span>: <span class=\"hljs-string\">\"&#x3C;firebase-api-key>\"</span>,\n  <span class=\"hljs-attr\">authDomain</span>: <span class=\"hljs-string\">\"&#x3C;my-project-id>.firebaseapp.com\"</span>,\n  <span class=\"hljs-attr\">projectId</span>: <span class=\"hljs-string\">\"&#x3C;my-project-id>\"</span>,\n  <span class=\"hljs-attr\">storageBucket</span>: <span class=\"hljs-string\">\"&#x3C;my-project-id>.appspot.com\"</span>,\n  <span class=\"hljs-attr\">messagingSenderId</span>: <span class=\"hljs-string\">\"&#x3C;my-messaging-sender-id\"</span>,\n  <span class=\"hljs-attr\">appId</span>: <span class=\"hljs-string\">\"&#x3C;my-app-id>\"</span>,\n};\n</code></pre>\n<p>프로젝트 설정의 일반 탭(톱니바퀴 아이콘)로 이동하여 아무 때나 앱의 Firebase 구성에 액세스할 수 있음을 유념하세요.</p>\n<h2>인증 설정</h2>\n<div class=\"content-ad\"></div>\n<p>모든 제품으로 이동한 다음 <strong>인증</strong>을 선택하세요. <strong>로그인 방법</strong>에서 <strong>새로운 제공자 추가</strong>를 클릭하고 Google을 선택하세요. Firebase는 Google과 긴밀하게 통합되어 있기 때문에 별도의 설정이 필요하지 않습니다.</p>\n<p>그게 다에요! 이제 Google SSO를 사용하여 Firebase 사용자를 인증할 준비가 되었습니다.</p>\n<p>참고: 다른 제공자도 추가할 수 있습니다(예: 이메일/비밀번호, 아래 이미지 참조), 하지만 이 기사에서는 Google SSO에 중점을 두고 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-Firebaseauthenticationinangular_2.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<h1>Angular 설정</h1>\n<h2>프로젝트 생성</h2>\n<p>먼저, npm install -g @angular/cli를 사용하여 Angular을 전역으로 설치하세요. 저는 버전 17.0.1을 사용하고 있어요.</p>\n<p>그런 다음, demofirebase라는 새 폴더를 만들고 해당 폴더에서 ng new frontend --no-standalone --routing ssr=false을 실행하세요. 이렇게 하면 필요한 파일이 포함된 frontend 폴더가 생성됩니다. 이 단계를 마치면 저장소 구조는 다음과 같아야 합니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">demofirebase\n└── frontend\n</code></pre>\n<p>하나의 추가 패키지가 필요합니다. frontend 폴더에서 npm i @angular/fire 명령어를 실행해주세요.</p>\n<p>다음으로, 개발 및 프로덕션을 위한 환경을 생성할 때 ng g environments를 사용합니다.\n이는 src/environments 폴더에 2개의 파일을 생성합니다: environment.development.ts와 environment.ts.\n로컬에서 개발할 때는 environment.ts가 environment.development.ts로 대체되어 environment.ts에서 import를 하면 자동으로 environment.development.ts의 변수들을 사용할 수 있습니다. 이는 angular.json 파일에서 확인할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"fileReplacements\"</span>: [\n    {\n        <span class=\"hljs-string\">\"replace\"</span>: <span class=\"hljs-string\">\"src/environments/environment.ts\"</span>,\n        <span class=\"hljs-string\">\"with\"</span>: <span class=\"hljs-string\">\"src/environments/environment.development.ts\"</span>\n    }\n]\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>Firebase 구성을 environment.development.ts에 붙여 넣으세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// environment.development.ts</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> environment = {\n  <span class=\"hljs-attr\">production</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-comment\">// 백엔드에 요청을 보낼 수 있는 가정</span>\n  <span class=\"hljs-attr\">backendUrl</span>: <span class=\"hljs-string\">\"http://127.0.0.1:8000\"</span>,\n  <span class=\"hljs-comment\">// 콘솔에서 가져온 Firebase 구성입니다.</span>\n  <span class=\"hljs-comment\">// 이것은 민감한 정보가 아님을 주의하세요</span>\n  <span class=\"hljs-attr\">firebaseConfig</span>: {\n    <span class=\"hljs-attr\">apiKey</span>: <span class=\"hljs-string\">\"&#x3C;firebase-api-key>\"</span>,\n    <span class=\"hljs-attr\">authDomain</span>: <span class=\"hljs-string\">\"&#x3C;my-project-id>.firebaseapp.com\"</span>,\n    <span class=\"hljs-attr\">projectId</span>: <span class=\"hljs-string\">\"&#x3C;my-project-id>\"</span>,\n    <span class=\"hljs-attr\">storageBucket</span>: <span class=\"hljs-string\">\"&#x3C;my-project-id>.appspot.com\"</span>,\n    <span class=\"hljs-attr\">messagingSenderId</span>: <span class=\"hljs-string\">\"&#x3C;my-messaging-sender-id\"</span>,\n    <span class=\"hljs-attr\">appId</span>: <span class=\"hljs-string\">\"&#x3C;my-app-id>\"</span>,\n  },\n};\n</code></pre>\n<p>참고: production용 (environment.ts 파일)으로 가시려면, backendUrl을 배포된 백엔드로, firebaseConfig을 production 구성으로 대체하시면 됩니다. Firebase 프로젝트는 여러 환경을 가질 수 없으므로 환경마다 프로젝트를 생성하는 것이 좋습니다. 지금은 빠른 진행을 위해 더미 값만 사용하셔서 IDE에서 필드 부족으로 에러가 발생하지 않도록 하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// environment.ts</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> environment = {\n  <span class=\"hljs-attr\">production</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">backendUrl</span>: <span class=\"hljs-string\">\"backendUrl\"</span>,\n  <span class=\"hljs-attr\">firebaseConfig</span>: {},\n};\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>앱 모듈(app.module.ts)에 필요한 import 문을 추가하고 애플리케이션을 초기화하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//app.module.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NgModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/platform-browser\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppRoutingModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./app-routing.module\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./app.component\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AngularFireModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/fire/compat\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AngularFireAuthModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/fire/compat/auth\"</span>;\n<span class=\"hljs-keyword\">import</span> { environment } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../environments/environment\"</span>;\n\n@<span class=\"hljs-title class_\">NgModule</span>({\n  <span class=\"hljs-attr\">declarations</span>: [<span class=\"hljs-title class_\">AppComponent</span>],\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">AngularFireAuthModule</span>,\n    <span class=\"hljs-title class_\">AngularFireModule</span>.<span class=\"hljs-title function_\">initializeApp</span>(environment.<span class=\"hljs-property\">firebaseConfig</span>),\n    <span class=\"hljs-title class_\">BrowserModule</span>,\n    <span class=\"hljs-title class_\">AppRoutingModule</span>,\n  ],\n  <span class=\"hljs-attr\">providers</span>: [],\n  <span class=\"hljs-attr\">bootstrap</span>: [<span class=\"hljs-title class_\">AppComponent</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<h2>필요한 컴포넌트와 라우트 생성</h2>\n<p>첫째로, Google SSO를 위한 컴포넌트를 생성하려면 'ng g c signin'을 사용하고, 랜딩 페이지를 위한 컴포넌트를 생성하려면 'ng g c landing'을 사용하세요.</p>\n<div class=\"content-ad\"></div>\n<p>아래는 Markdown으로 테이블 태그를 변경하세요.</p>\n<p>그럼, app-routing.module.ts을 수정하세요:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NgModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">RouterModule</span>, <span class=\"hljs-title class_\">Routes</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/router\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SigninComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./signin/signin.component\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">LandingComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./landing/landing.component\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">routes</span>: <span class=\"hljs-title class_\">Routes</span> = [\n  { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">LandingComponent</span> },\n  { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"signin\"</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">SigninComponent</span> },\n];\n<span class=\"hljs-meta\">@NgModule</span>({\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">RouterModule</span>.<span class=\"hljs-title function_\">forRoot</span>(routes)],\n  <span class=\"hljs-attr\">exports</span>: [<span class=\"hljs-title class_\">RouterModule</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppRoutingModule</span> {}\n</code></pre>\n<p>마지막으로, app.component를 수정하세요:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// app.component.ts</span>\n&#x3C;nav>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">routerLink</span>=<span class=\"hljs-string\">\"/\"</span>></span>랜딩 페이지<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">routerLink</span>=<span class=\"hljs-string\">\"/signin\"</span>></span>로그인 페이지<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span></span>\n&#x3C;/nav>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">router-outlet</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">router-outlet</span>></span></span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>지금 ng serve를 실행하고 <a href=\"http://localhost:4200%EC%9C%BC%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">http://localhost:4200으로</a> 이동하면 아주 아름다운 페이지를 볼 수 있고, 랜딩 페이지와 로그인 페이지 사이를 이동할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-Firebaseauthenticationinangular_3.png\" alt=\"이미지\"></p>\n<h2>구글 SSO 추가하기</h2>\n<p>구글 SSO를 추가하려면 단순히 버튼에 click 이벤트 리스너를 추가하면 됩니다. 저는 재사용 가능하도록 지시어를 사용하는 것을 선호하는데, 아래에 제가 보여주는 구현 방법을 사용하시면 됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>구글 SSO를 실행하여 지시문을 만들고 app.module.ts에 자동으로 추가합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//google-sso.directive.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Directive</span>, <span class=\"hljs-title class_\">HostListener</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AngularFireAuth</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/fire/compat/auth\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GoogleAuthProvider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@firebase/auth\"</span>;\n\n@<span class=\"hljs-title class_\">Directive</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">\"[googleSso]\"</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GoogleSsoDirective</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private angularFireAuth: AngularFireAuth</span>) {}\n  @<span class=\"hljs-title class_\">HostListener</span>(<span class=\"hljs-string\">\"click\"</span>)\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onClick</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> creds = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">angularFireAuth</span>.<span class=\"hljs-title function_\">signInWithPopup</span>(\n      <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GoogleAuthProvider</span>(),\n    );\n    <span class=\"hljs-comment\">// 자격 증명으로 할 일을 실행합니다, 예를 들어 Firestore에 추가하기...</span>\n  }\n}\n</code></pre>\n<p>app.module.ts에 지시문을 추가하십시오.</p>\n<p>이제 로그인 페이지에서 해당 지시문을 사용할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;!-- signin.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">html</span> -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">googleSso</span>></span>Google 계정으로 로그인<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n</code></pre>\n<p>그게 다에요. 작동하는지 확인하려면 프론트엔드로 이동하여 만든 버튼을 클릭하세요. 로그인한 후에 Firebase 콘솔로 돌아가세요. 인증에서 사용자 탭으로 이동하면 로그인에 사용한 이메일이 나타날 것입니다.</p>\n<p>계속 진행하기 전에 로그아웃이 가능하도록 로그인 구성요소를 수정해봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// signin.component.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AngularFireAuth</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/fire/compat/auth\"</span>;\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">\"app-signin\"</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">\"./signin.component.html\"</span>,\n  <span class=\"hljs-attr\">styleUrl</span>: <span class=\"hljs-string\">\"./signin.component.scss\"</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SigninComponent</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">public angularFireAuth: AngularFireAuth</span>) {}\n  <span class=\"hljs-title function_\">logOut</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">angularFireAuth</span>.<span class=\"hljs-title function_\">signOut</span>();\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<!-- signin.component.html -->\n<p>@if (angularFireAuth.authState | async) {\n&#x3C;button (click)=\"logOut()\">Log out\n} @else {\n<button googlesso=\"\">Sign in with google</button>\n}</p>\n<h2>Adding a route available only for logged in users</h2>\n<p>Let’s create another component: ng g c require-auth</p>\n<p>Then let’s create a guard: ng g g auth then select CanActivate</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// auth.guard.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CanActivateFn</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/router\"</span>;\n<span class=\"hljs-keyword\">import</span> { inject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AngularFireAuth</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/fire/compat/auth\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">authGuard</span>: <span class=\"hljs-title class_\">CanActivateFn</span> = <span class=\"hljs-keyword\">async</span> (route, state) => {\n  <span class=\"hljs-keyword\">const</span> angularFireAuth = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">AngularFireAuth</span>);\n  <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> angularFireAuth.<span class=\"hljs-property\">currentUser</span>;\n  <span class=\"hljs-comment\">// coerce to boolean</span>\n  <span class=\"hljs-keyword\">const</span> isLoggedIn = !!user;\n  <span class=\"hljs-keyword\">return</span> isLoggedIn;\n};\n</code></pre>\n<p>그런 다음 app-routing.module.ts의 라우트를 수정합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// app-routing.module.ts - new lines</span>\n...\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">RequireAuthComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./require-auth/require-auth.component'</span>;\n<span class=\"hljs-keyword\">import</span> { authGuard } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth.guard'</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">routes</span>: <span class=\"hljs-title class_\">Routes</span> = [\n  ...\n  {\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'require-auth'</span>,\n    <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">RequireAuthComponent</span>,\n    <span class=\"hljs-attr\">canActivate</span>: [authGuard],\n  },\n];\n...\n</code></pre>\n<p>app.component.html에 추가하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;li>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">routerLink</span>=<span class=\"hljs-string\">\"/require-auth\"</span>></span>Auth protected<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n&#x3C;/li>\n</code></pre>\n<p>이제 로그인한 상태에서만 액세스할 수 있는 경로가 생겼어요.</p>\n<h2>백엔드 경로로 bearer 토큰을 보내는 인터셉터</h2>\n<p>백엔드에서 요청을 인증하려면 Firebase에서 제공한 토큰을 Authorization 헤더에 추가해야 합니다. 백엔드에서는 토큰을 확인하는 작업을 담당할 것입니다(본 문서의 범위를 벗어남).</p>\n<div class=\"content-ad\"></div>\n<p>ng g interceptor bearer-token 명령을 사용하여 interceptor를 생성하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// bearer-token.interceptor.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HttpEvent</span>, <span class=\"hljs-title class_\">HttpHandlerFn</span>, <span class=\"hljs-title class_\">HttpInterceptorFn</span>, <span class=\"hljs-title class_\">HttpRequest</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/common/http\"</span>;\n<span class=\"hljs-keyword\">import</span> { inject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AngularFireAuth</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/fire/compat/auth\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-keyword\">from</span>, lastValueFrom } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"rxjs\"</span>;\n<span class=\"hljs-keyword\">import</span> { environment } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../environments/environment\"</span>;\n\n<span class=\"hljs-comment\">// 토큰을 얻는 작업이 비동기적이므로 이 함수를 추가해야 합니다.</span>\n<span class=\"hljs-keyword\">const</span> addBearerToken = <span class=\"hljs-keyword\">async</span> (\n  <span class=\"hljs-attr\">req</span>: <span class=\"hljs-title class_\">HttpRequest</span>&#x3C;any>,\n  <span class=\"hljs-attr\">next</span>: <span class=\"hljs-title class_\">HttpHandlerFn</span>,\n): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">HttpEvent</span>&#x3C;any>> => {\n  <span class=\"hljs-keyword\">const</span> angularFireAuth = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">AngularFireAuth</span>);\n  <span class=\"hljs-keyword\">const</span> firebaseUser = <span class=\"hljs-keyword\">await</span> angularFireAuth.<span class=\"hljs-property\">currentUser</span>;\n  <span class=\"hljs-keyword\">const</span> token = <span class=\"hljs-keyword\">await</span> firebaseUser?.<span class=\"hljs-title function_\">getIdToken</span>();\n  <span class=\"hljs-keyword\">if</span> (token) {\n    req = req.<span class=\"hljs-title function_\">clone</span>({\n      <span class=\"hljs-attr\">setHeaders</span>: { <span class=\"hljs-title class_\">Authorization</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${token}</span>`</span> },\n    });\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">lastValueFrom</span>(<span class=\"hljs-title function_\">next</span>(req));\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">bearerTokenInterceptor</span>: <span class=\"hljs-title class_\">HttpInterceptorFn</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">req, next</span>) =></span> {\n  <span class=\"hljs-comment\">// 이 bearer token을 백엔드로 보내는 요청에만 추가합니다.</span>\n  <span class=\"hljs-comment\">// 특정 요청에만 bearer token을 추가하도록 사용자 정의할 수 있습니다.</span>\n  <span class=\"hljs-keyword\">if</span> (req.<span class=\"hljs-property\">url</span>.<span class=\"hljs-title function_\">startsWith</span>(environment.<span class=\"hljs-property\">backendUrl</span>)) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">from</span>(<span class=\"hljs-title function_\">addBearerToken</span>(req, next));\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">next</span>(req);\n  }\n};\n</code></pre>\n<p>그런 다음 app.module.ts에 provider를 추가해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// app.module.ts</span>\n\n...\n<span class=\"hljs-keyword\">import</span> { provideHttpClient, withInterceptors } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common/http'</span>;\n<span class=\"hljs-keyword\">import</span> { bearerTokenInterceptor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./bearer-token.interceptor'</span>;\n...\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title function_\">provideHttpClient</span>(<span class=\"hljs-title function_\">withInterceptors</span>([bearerTokenInterceptor]))],\n...\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>마지막으로 확인해보기 위해 백엔드를 호출하는 서비스를 생성해봅시다: ng g s api</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// api.service.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HttpClient</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/common/http\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { environment } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../environments/environment\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Observable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"rxjs\"</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">\"root\"</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ApiService</span> {\n  <span class=\"hljs-comment\">// 현재 사용자의 firebase 사용자 ID를 반환하는 백엔드 URL</span>\n  userIdUrl = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${environment.backendUrl}</span>/userid`</span>;\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private http: HttpClient</span>) {}\n  <span class=\"hljs-title function_\">getUserId</span>(): <span class=\"hljs-title class_\">Observable</span>&#x3C;any> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userIdUrl</span>);\n  }\n}\n</code></pre>\n<p>그리고 랜딩 컴포넌트에서:</p>\n<pre><code class=\"hljs language-js\">&#x3C;button (click)=<span class=\"hljs-string\">\"getUserId()\"</span>>사용자 <span class=\"hljs-variable constant_\">ID</span> 가져오기&#x3C;/button>\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApiService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../api.service\"</span>;\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">\"app-landing\"</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">\"./landing.component.html\"</span>,\n  <span class=\"hljs-attr\">styleUrl</span>: <span class=\"hljs-string\">\"./landing.component.scss\"</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LandingComponent</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private apiService: ApiService</span>) {}\n  <span class=\"hljs-title function_\">getUserId</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">apiService</span>.<span class=\"hljs-title function_\">getUserId</span>().<span class=\"hljs-title function_\">subscribe</span>({\n      <span class=\"hljs-attr\">next</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res),\n      <span class=\"hljs-attr\">error</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err),\n    });\n  }\n}\n</code></pre>\n<p>이제 백엔드에 요청을 보내는 버튼이 생겼어요. 개발자 도구의 네트워크 탭에서 인증되어 있다면 토큰이 Authorization 헤더에 추가되는 것을 확인할 수 있어요.</p>\n<p><img src=\"/assets/img/2024-06-23-Firebaseauthenticationinangular_4.png\" alt=\"이미지\"></p>\n<h2>추가 정보: Firebase는 로그인 정보를 어디에 저장하나요?</h2>\n<div class=\"content-ad\"></div>\n<p>저희가 인터셉터를 사용할 때 다음 코드를 사용했습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> angularFireAuth = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">AngularFireAuth</span>);\n<span class=\"hljs-keyword\">const</span> firebaseUser = <span class=\"hljs-keyword\">await</span> angularFireAuth.<span class=\"hljs-property\">currentUser</span>;\n<span class=\"hljs-keyword\">const</span> token = <span class=\"hljs-keyword\">await</span> firebaseUser?.<span class=\"hljs-title function_\">getIdToken</span>();\n</code></pre>\n<p>하지만 이 코드는 실제로 어떻게 작동할까요? 정보는 어디에 저장되나요?</p>\n<p>사실, Google SSO로 인증할 때, 인증 정보가 브라우저에 저장됩니다. 브라우저 개발자 도구를 열고 저장소 탭 (Chrome의 경우 Application)으로 이동하신 다음 Indexed DB로 이동해보세요.</p>\n<div class=\"content-ad\"></div>\n<table></table>\n</body>\n</html>\n"},"__N_SSG":true}