{"pageProps":{"post":{"title":"Nodejs를 사용하여 MongoDB에서 중첩된 배열 필드를 업데이트하는 방법","description":"","date":"2024-06-23 13:20","slug":"2024-06-23-HowtoupdatenestedarrayfieldinMongoDBusingNodejs","content":"\n\n몽고디비에서 문서 내 배열 업데이트하기.\n\n![이미지](/assets/img/2024-06-23-HowtoupdatenestedarrayfieldinMongoDBusingNodejs_0.png)\n\nNode.js와 몽고디비를 이용하여 애플리케이션 배열 내 특정 applicationId의 활성 상태를 업데이트하려면 $set 연산자를 사용해야 합니다. $ 연산자는 쿼리 조건과 일치하는 첫 번째 배열 요소를 업데이트할 수 있도록 합니다.\n\n```js\n// applications 배열에서 지정된 applicationId를 포함하는 문서를 찾는 쿼리.\nconst filter = { _id: userId, 'applications.applicationId': applicationId };\n\n// 활성 상태를 설정하는 업데이트.\nconst updateDoc = {\n  // $set 및 $ 연산자 활용: 일치하는 applicationId의 active 필드를 업데이트.\n  $set: { 'applications.$.active': newStatus }\n};\n\nconst result = await collection.updateOne(filter, updateDoc);\n```\n\n<div class=\"content-ad\"></div>\n\n## 설명:\n\n- 필터: 필터 객체는 특정 userId(또는 문서의 다른 고유 식별자)와 applications 배열 내의 applicationId를 가진 문서를 찾고 있는지를 나타냅니다.\n- 업데이트: $set 연산자는 일치하는 배열 요소의 active 필드를 업데이트하기 위해 위치 $ 연산자와 함께 사용됩니다.\n\n## 이제 중첩된 배열에서 여러 applicationId의 활성 상태를 업데이트하는 방법:\n\n한 번의 작업에서 applications 배열 내의 여러 applicationId 항목의 활성 상태를 업데이트하려면 $set 연산자를 $[`identifier`] 배열 필터와 함께 사용할 수 있습니다. 이를 통해 배열 내의 요소를 일치시키고 이에 따라 업데이트할 수 있는 여러 조건을 지정할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 여러 applicationId 항목을 업데이트하는 단계:\n\n- MongoDB에 연결: MongoDB 클라이언트를 사용하여 데이터베이스에 연결합니다.\n- 쿼리 정의: 업데이트할 문서를 지정합니다.\n- Array Filters와 $set 사용: 배열 필터를 사용하여 여러 applicationId 항목을 일치시키고 업데이트합니다.\n- 업데이트 처리: 업데이트 명령을 실행하고 응답을 처리합니다.\n\n# 예시 코드\n\n다음은 Node.js와 MongoDB를 사용하여 이 작업을 수행하는 방법입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\r\nconst { MongoClient } = require('mongodb');\r\n\r\n// 귀하의 MongoDB 연결 문자열과 데이터베이스 이름으로 대체합니다.\r\nconst uri = 'mongodb://localhost:27017';\r\nconst dbName = '귀하의데이터베이스이름';\r\nconst collectionName = '귀하의컬렉션이름';\r\n\r\nasync function updateApplicationStatu(userId, updates) {\r\n  const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\r\n\r\n  try {\r\n    await client.connect();\r\n    console.log('MongoDB에 연결됨');\r\n\r\n    const database = client.db(dbName);\r\n    const collection = database.collection(collectionName);\r\n\r\n    // 사용자 문서 가져오기\r\n    const userDoc = await collection.findOne({ _id: userId });\r\n\r\n    if (!userDoc) {\r\n      console.log('사용자 문서를 찾을 수 없음');\r\n      return;\r\n    }\r\n\r\n    // applications 배열을 초기화\r\n    if (!userDoc.applications) {\r\n      userDoc.applications = [];\r\n    }\r\n\r\n    const updateOperations = [];\r\n    const applicationIds = userDoc.applications.map(app => app.applicationId);\r\n\r\n    // 중첩 배열 내 여러 applicationId의 활성 상태를 업데이트\r\n    updates.forEach(update => {\r\n      if (applicationIds.includes(update.applicationId)) {\r\n        // 기존 애플리케이션 상태를 업데이트\r\n        updateOperations.push({\r\n          updateOne: {\r\n            filter: { _id: userId, 'applications.applicationId': update.applicationId },\r\n            update: { \r\n              $set: { 'applications.$.active': update.active },\r\n              $addToSet: { updatedBy: req.session.userId }\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        // 존재하지 않는 경우 새로운 애플리케이션 추가\r\n        updateOperations.push({\r\n          updateOne: {\r\n            filter: { _id: userId },\r\n            update: {\r\n              $push: {\r\n                applications: { applicationId: update.applicationId, active: update.active }\r\n              }\r\n            },\r\n            $addToSet: { updatedBy: req.session.userId }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // 대량 쓰기 작업 수행\r\n    const result = await collection.bulkWrite(updateOperations);\r\n\r\n    if (result.modifiedCount > 0 || result.insertedCount > 0) {\r\n      console.log('애플리케이션 상태가 성공적으로 업데이트됨.');\r\n    } else {\r\n      console.log('일치하는 애플리케이션이 없거나 변경된 내용이 없습니다.');\r\n    }\r\n  } catch (error) {\r\n    console.error('애플리케이션 상태 업데이트 오류:', error);\r\n  } finally {\r\n    await client.close();\r\n  }\r\n}\r\n\r\n// 사용 예시: 여러 애플리케이션 업데이트\r\nupdateApplicationStatuses('userId123', [\r\n  { applicationId: 'Apple', active: true },\r\n  { applicationId: 'Mango', active: false },\r\n  { applicationId: 'Orange', active: true }\r\n]);\r\n```\r\n\r\n# 설명\r\n\r\n- MongoDB 연결: MongoDB 인스턴스에 연결을 설정합니다.\r\n- 데이터베이스 및 컬렉션: 작업할 데이터베이스 및 컬렉션을 지정합니다.\r\n- 필터: 필터 객체는 userId 또는 문서의 다른 고유 식별자를 기반으로 문서를 식별합니다.\r\n- 업데이트 오브젝트: updateDoc은 $set 연산자를 사용하여 지정된 applicationId 엔트리의 활성 상태를 업데이트합니다. 필드 경로는 배열 필터를 동적으로 사용하기 위해 구성됩니다.\r\n- 배열 필터: arrayFilters 옵션을 사용하여 어떤 요소를 업데이트해야 하는지를 정의하는 조건을 정의합니다. 각 필터는 업데이트해야 할 applicationId에 해당합니다.\r\n- updatedBy 필드: updatedBy는 applications 배열의 일부가 아닌 문서의 별도 필드입니다. 요구 사항에 따라서 applications 배열에서 수정이나 추가가 있을 때마다 updatedBy 필드를 업데이트해야 합니다.\r\n- 결과 처리: 업데이트 작업이 문서를 수정했는지 확인하고 결과를 로그에 남깁니다.\r\n\r\n만약 applicationId가 존재하지 않는 경우 해당 활성 상태와 함께 추가되어야 합니다. 이를 위해 쿼리와 업데이트 작업을 혼합해 사용합니다.\r\n\n\n<div class=\"content-ad\"></div>\n\n# 단계:\n\n- 문서 가져오기 및 확인: _id별로 문서를 가져와서 applications 배열의 각 applicationId를 확인합니다.\n- 업데이트 수행: applicationId가 있는지 여부에 따라 기존 객체를 업데이트하거나 새로운 객체를 추가합니다.\n\n# 예시 코드\n\n다음은 Node.js와 MongoDB를 사용하여 이 작업을 수행하는 전체 예시 코드입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nconst { MongoClient } = require('mongodb');\n\n// 귀하의 MongoDB 연결 문자열 및 데이터베이스 이름으로 대체합니다.\nconst uri = 'mongodb://localhost:27017';\nconst dbName = '당신의데이터베이스이름';\nconst collectionName = '당신의컬렉션이름';\n\nasync function updateApplicationStatuses(userId, updates) {\n  const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\n\n  try {\n    await client.connect();\n    console.log('MongoDB에 연결되었습니다.');\n\n    const database = client.db(dbName);\n    const collection = database.collection(collectionName);\n\n    // 사용자 문서 검색\n    const userDoc = await collection.findOne({ _id: userId });\n\n    if (!userDoc) {\n      console.log('사용자 문서를 찾을 수 없습니다.');\n      return;\n    }\n\n    // applications 배열을 초기화합니다.\n    if (!userDoc.applications) {\n      userDoc.applications = [];\n    }\n\n    const updateOperations = [];\n    const applicationIds = userDoc.applications.map(app => app.applicationId);\n\n    updates.forEach(update => {\n      if (applicationIds.includes(update.applicationId)) {\n        // 기존 애플리케이션 상태 업데이트\n        updateOperations.push({\n          updateOne: {\n            filter: { _id: userId, 'applications.applicationId': update.applicationId },\n            update: { $set: { 'applications.$.active': update.active } }\n          }\n        });\n      } else {\n        // 새로운 애플리케이션 추가\n        updateOperations.push({\n          updateOne: {\n            filter: { _id: userId },\n            update: {\n              $push: {\n                applications: { applicationId: update.applicationId, active: update.active }\n              }\n            }\n          }\n        });\n      }\n    });\n\n    // 일괄 작성 작업 수행\n    const result = await collection.bulkWrite(updateOperations);\n\n    if (result.modifiedCount > 0 || result.insertedCount > 0) {\n      console.log('애플리케이션 상태를 성공적으로 업데이트했습니다.');\n    } else {\n      console.log('일치하는 애플리케이션이 없거나 변경 사항이 없습니다.');\n    }\n  } catch (error) {\n    console.error('애플리케이션 상태를 업데이트하는 중 오류 발생:', error);\n  } finally {\n    await client.close();\n  }\n}\n\n// 예제 사용법: 여러 애플리케이션을 업데이트\nupdateApplicationStatuses('userId123', [\n  { applicationId: 'Apple', active: true },\n  { applicationId: 'Mango', active: false },\n  { applicationId: 'Orange', active: true }\n]);\n```\n\n만약 도움이 되었다면 👏 👏 를 좀 받아도 괜찮으세요? 다른 사람들에게도 도움이 될 수 있도록 글을 공유해주시면 정말 감사하겠습니다 :)\n\n언제나 환호해 주세요...\n\n<img src=\"https://miro.medium.com/v2/resize:fit:156/0*9zGASKmAOha2Ov3S.gif\" />\n","ogImage":{"url":"/assets/img/2024-06-23-HowtoupdatenestedarrayfieldinMongoDBusingNodejs_0.png"},"coverImage":"/assets/img/2024-06-23-HowtoupdatenestedarrayfieldinMongoDBusingNodejs_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>몽고디비에서 문서 내 배열 업데이트하기.</p>\n<p><img src=\"/assets/img/2024-06-23-HowtoupdatenestedarrayfieldinMongoDBusingNodejs_0.png\" alt=\"이미지\"></p>\n<p>Node.js와 몽고디비를 이용하여 애플리케이션 배열 내 특정 applicationId의 활성 상태를 업데이트하려면 $set 연산자를 사용해야 합니다. $ 연산자는 쿼리 조건과 일치하는 첫 번째 배열 요소를 업데이트할 수 있도록 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// applications 배열에서 지정된 applicationId를 포함하는 문서를 찾는 쿼리.</span>\n<span class=\"hljs-keyword\">const</span> filter = { <span class=\"hljs-attr\">_id</span>: userId, <span class=\"hljs-string\">'applications.applicationId'</span>: applicationId };\n\n<span class=\"hljs-comment\">// 활성 상태를 설정하는 업데이트.</span>\n<span class=\"hljs-keyword\">const</span> updateDoc = {\n  <span class=\"hljs-comment\">// $set 및 $ 연산자 활용: 일치하는 applicationId의 active 필드를 업데이트.</span>\n  <span class=\"hljs-attr\">$set</span>: { <span class=\"hljs-string\">'applications.$.active'</span>: newStatus }\n};\n\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> collection.<span class=\"hljs-title function_\">updateOne</span>(filter, updateDoc);\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>설명:</h2>\n<ul>\n<li>필터: 필터 객체는 특정 userId(또는 문서의 다른 고유 식별자)와 applications 배열 내의 applicationId를 가진 문서를 찾고 있는지를 나타냅니다.</li>\n<li>업데이트: $set 연산자는 일치하는 배열 요소의 active 필드를 업데이트하기 위해 위치 $ 연산자와 함께 사용됩니다.</li>\n</ul>\n<h2>이제 중첩된 배열에서 여러 applicationId의 활성 상태를 업데이트하는 방법:</h2>\n<p>한 번의 작업에서 applications 배열 내의 여러 applicationId 항목의 활성 상태를 업데이트하려면 $set 연산자를 $[<code>identifier</code>] 배열 필터와 함께 사용할 수 있습니다. 이를 통해 배열 내의 요소를 일치시키고 이에 따라 업데이트할 수 있는 여러 조건을 지정할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>여러 applicationId 항목을 업데이트하는 단계:</h1>\n<ul>\n<li>MongoDB에 연결: MongoDB 클라이언트를 사용하여 데이터베이스에 연결합니다.</li>\n<li>쿼리 정의: 업데이트할 문서를 지정합니다.</li>\n<li>Array Filters와 $set 사용: 배열 필터를 사용하여 여러 applicationId 항목을 일치시키고 업데이트합니다.</li>\n<li>업데이트 처리: 업데이트 명령을 실행하고 응답을 처리합니다.</li>\n</ul>\n<h1>예시 코드</h1>\n<p>다음은 Node.js와 MongoDB를 사용하여 이 작업을 수행하는 방법입니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">MongoClient</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongodb'</span>);\r\n\r\n<span class=\"hljs-comment\">// 귀하의 MongoDB 연결 문자열과 데이터베이스 이름으로 대체합니다.</span>\r\n<span class=\"hljs-keyword\">const</span> uri = <span class=\"hljs-string\">'mongodb://localhost:27017'</span>;\r\n<span class=\"hljs-keyword\">const</span> dbName = <span class=\"hljs-string\">'귀하의데이터베이스이름'</span>;\r\n<span class=\"hljs-keyword\">const</span> collectionName = <span class=\"hljs-string\">'귀하의컬렉션이름'</span>;\r\n\r\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">updateApplicationStatu</span>(<span class=\"hljs-params\">userId, updates</span>) {\r\n  <span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MongoClient</span>(uri, { <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">useUnifiedTopology</span>: <span class=\"hljs-literal\">true</span> });\r\n\r\n  <span class=\"hljs-keyword\">try</span> {\r\n    <span class=\"hljs-keyword\">await</span> client.<span class=\"hljs-title function_\">connect</span>();\r\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'MongoDB에 연결됨'</span>);\r\n\r\n    <span class=\"hljs-keyword\">const</span> database = client.<span class=\"hljs-title function_\">db</span>(dbName);\r\n    <span class=\"hljs-keyword\">const</span> collection = database.<span class=\"hljs-title function_\">collection</span>(collectionName);\r\n\r\n    <span class=\"hljs-comment\">// 사용자 문서 가져오기</span>\r\n    <span class=\"hljs-keyword\">const</span> userDoc = <span class=\"hljs-keyword\">await</span> collection.<span class=\"hljs-title function_\">findOne</span>({ <span class=\"hljs-attr\">_id</span>: userId });\r\n\r\n    <span class=\"hljs-keyword\">if</span> (!userDoc) {\r\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'사용자 문서를 찾을 수 없음'</span>);\r\n      <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// applications 배열을 초기화</span>\r\n    <span class=\"hljs-keyword\">if</span> (!userDoc.<span class=\"hljs-property\">applications</span>) {\r\n      userDoc.<span class=\"hljs-property\">applications</span> = [];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">const</span> updateOperations = [];\r\n    <span class=\"hljs-keyword\">const</span> applicationIds = userDoc.<span class=\"hljs-property\">applications</span>.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">app</span> =></span> app.<span class=\"hljs-property\">applicationId</span>);\r\n\r\n    <span class=\"hljs-comment\">// 중첩 배열 내 여러 applicationId의 활성 상태를 업데이트</span>\r\n    updates.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">update</span> =></span> {\r\n      <span class=\"hljs-keyword\">if</span> (applicationIds.<span class=\"hljs-title function_\">includes</span>(update.<span class=\"hljs-property\">applicationId</span>)) {\r\n        <span class=\"hljs-comment\">// 기존 애플리케이션 상태를 업데이트</span>\r\n        updateOperations.<span class=\"hljs-title function_\">push</span>({\r\n          <span class=\"hljs-attr\">updateOne</span>: {\r\n            <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">_id</span>: userId, <span class=\"hljs-string\">'applications.applicationId'</span>: update.<span class=\"hljs-property\">applicationId</span> },\r\n            <span class=\"hljs-attr\">update</span>: { \r\n              <span class=\"hljs-attr\">$set</span>: { <span class=\"hljs-string\">'applications.$.active'</span>: update.<span class=\"hljs-property\">active</span> },\r\n              <span class=\"hljs-attr\">$addToSet</span>: { <span class=\"hljs-attr\">updatedBy</span>: req.<span class=\"hljs-property\">session</span>.<span class=\"hljs-property\">userId</span> }\r\n            }\r\n          }\r\n        });\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-comment\">// 존재하지 않는 경우 새로운 애플리케이션 추가</span>\r\n        updateOperations.<span class=\"hljs-title function_\">push</span>({\r\n          <span class=\"hljs-attr\">updateOne</span>: {\r\n            <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">_id</span>: userId },\r\n            <span class=\"hljs-attr\">update</span>: {\r\n              <span class=\"hljs-attr\">$push</span>: {\r\n                <span class=\"hljs-attr\">applications</span>: { <span class=\"hljs-attr\">applicationId</span>: update.<span class=\"hljs-property\">applicationId</span>, <span class=\"hljs-attr\">active</span>: update.<span class=\"hljs-property\">active</span> }\r\n              }\r\n            },\r\n            <span class=\"hljs-attr\">$addToSet</span>: { <span class=\"hljs-attr\">updatedBy</span>: req.<span class=\"hljs-property\">session</span>.<span class=\"hljs-property\">userId</span> }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    <span class=\"hljs-comment\">// 대량 쓰기 작업 수행</span>\r\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> collection.<span class=\"hljs-title function_\">bulkWrite</span>(updateOperations);\r\n\r\n    <span class=\"hljs-keyword\">if</span> (result.<span class=\"hljs-property\">modifiedCount</span> > <span class=\"hljs-number\">0</span> || result.<span class=\"hljs-property\">insertedCount</span> > <span class=\"hljs-number\">0</span>) {\r\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'애플리케이션 상태가 성공적으로 업데이트됨.'</span>);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'일치하는 애플리케이션이 없거나 변경된 내용이 없습니다.'</span>);\r\n    }\r\n  } <span class=\"hljs-keyword\">catch</span> (error) {\r\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'애플리케이션 상태 업데이트 오류:'</span>, error);\r\n  } <span class=\"hljs-keyword\">finally</span> {\r\n    <span class=\"hljs-keyword\">await</span> client.<span class=\"hljs-title function_\">close</span>();\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">// 사용 예시: 여러 애플리케이션 업데이트</span>\r\n<span class=\"hljs-title function_\">updateApplicationStatuses</span>(<span class=\"hljs-string\">'userId123'</span>, [\r\n  { <span class=\"hljs-attr\">applicationId</span>: <span class=\"hljs-string\">'Apple'</span>, <span class=\"hljs-attr\">active</span>: <span class=\"hljs-literal\">true</span> },\r\n  { <span class=\"hljs-attr\">applicationId</span>: <span class=\"hljs-string\">'Mango'</span>, <span class=\"hljs-attr\">active</span>: <span class=\"hljs-literal\">false</span> },\r\n  { <span class=\"hljs-attr\">applicationId</span>: <span class=\"hljs-string\">'Orange'</span>, <span class=\"hljs-attr\">active</span>: <span class=\"hljs-literal\">true</span> }\r\n]);\n</code></pre>\n<h1>설명</h1>\n<ul>\n<li>MongoDB 연결: MongoDB 인스턴스에 연결을 설정합니다.</li>\n<li>데이터베이스 및 컬렉션: 작업할 데이터베이스 및 컬렉션을 지정합니다.</li>\n<li>필터: 필터 객체는 userId 또는 문서의 다른 고유 식별자를 기반으로 문서를 식별합니다.</li>\n<li>업데이트 오브젝트: updateDoc은 $set 연산자를 사용하여 지정된 applicationId 엔트리의 활성 상태를 업데이트합니다. 필드 경로는 배열 필터를 동적으로 사용하기 위해 구성됩니다.</li>\n<li>배열 필터: arrayFilters 옵션을 사용하여 어떤 요소를 업데이트해야 하는지를 정의하는 조건을 정의합니다. 각 필터는 업데이트해야 할 applicationId에 해당합니다.</li>\n<li>updatedBy 필드: updatedBy는 applications 배열의 일부가 아닌 문서의 별도 필드입니다. 요구 사항에 따라서 applications 배열에서 수정이나 추가가 있을 때마다 updatedBy 필드를 업데이트해야 합니다.</li>\n<li>결과 처리: 업데이트 작업이 문서를 수정했는지 확인하고 결과를 로그에 남깁니다.</li>\n</ul>\n<p>만약 applicationId가 존재하지 않는 경우 해당 활성 상태와 함께 추가되어야 합니다. 이를 위해 쿼리와 업데이트 작업을 혼합해 사용합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>단계:</h1>\n<ul>\n<li>문서 가져오기 및 확인: _id별로 문서를 가져와서 applications 배열의 각 applicationId를 확인합니다.</li>\n<li>업데이트 수행: applicationId가 있는지 여부에 따라 기존 객체를 업데이트하거나 새로운 객체를 추가합니다.</li>\n</ul>\n<h1>예시 코드</h1>\n<p>다음은 Node.js와 MongoDB를 사용하여 이 작업을 수행하는 전체 예시 코드입니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">MongoClient</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongodb'</span>);\n\n<span class=\"hljs-comment\">// 귀하의 MongoDB 연결 문자열 및 데이터베이스 이름으로 대체합니다.</span>\n<span class=\"hljs-keyword\">const</span> uri = <span class=\"hljs-string\">'mongodb://localhost:27017'</span>;\n<span class=\"hljs-keyword\">const</span> dbName = <span class=\"hljs-string\">'당신의데이터베이스이름'</span>;\n<span class=\"hljs-keyword\">const</span> collectionName = <span class=\"hljs-string\">'당신의컬렉션이름'</span>;\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">updateApplicationStatuses</span>(<span class=\"hljs-params\">userId, updates</span>) {\n  <span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MongoClient</span>(uri, { <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">useUnifiedTopology</span>: <span class=\"hljs-literal\">true</span> });\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">await</span> client.<span class=\"hljs-title function_\">connect</span>();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'MongoDB에 연결되었습니다.'</span>);\n\n    <span class=\"hljs-keyword\">const</span> database = client.<span class=\"hljs-title function_\">db</span>(dbName);\n    <span class=\"hljs-keyword\">const</span> collection = database.<span class=\"hljs-title function_\">collection</span>(collectionName);\n\n    <span class=\"hljs-comment\">// 사용자 문서 검색</span>\n    <span class=\"hljs-keyword\">const</span> userDoc = <span class=\"hljs-keyword\">await</span> collection.<span class=\"hljs-title function_\">findOne</span>({ <span class=\"hljs-attr\">_id</span>: userId });\n\n    <span class=\"hljs-keyword\">if</span> (!userDoc) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'사용자 문서를 찾을 수 없습니다.'</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// applications 배열을 초기화합니다.</span>\n    <span class=\"hljs-keyword\">if</span> (!userDoc.<span class=\"hljs-property\">applications</span>) {\n      userDoc.<span class=\"hljs-property\">applications</span> = [];\n    }\n\n    <span class=\"hljs-keyword\">const</span> updateOperations = [];\n    <span class=\"hljs-keyword\">const</span> applicationIds = userDoc.<span class=\"hljs-property\">applications</span>.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">app</span> =></span> app.<span class=\"hljs-property\">applicationId</span>);\n\n    updates.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">update</span> =></span> {\n      <span class=\"hljs-keyword\">if</span> (applicationIds.<span class=\"hljs-title function_\">includes</span>(update.<span class=\"hljs-property\">applicationId</span>)) {\n        <span class=\"hljs-comment\">// 기존 애플리케이션 상태 업데이트</span>\n        updateOperations.<span class=\"hljs-title function_\">push</span>({\n          <span class=\"hljs-attr\">updateOne</span>: {\n            <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">_id</span>: userId, <span class=\"hljs-string\">'applications.applicationId'</span>: update.<span class=\"hljs-property\">applicationId</span> },\n            <span class=\"hljs-attr\">update</span>: { <span class=\"hljs-attr\">$set</span>: { <span class=\"hljs-string\">'applications.$.active'</span>: update.<span class=\"hljs-property\">active</span> } }\n          }\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 새로운 애플리케이션 추가</span>\n        updateOperations.<span class=\"hljs-title function_\">push</span>({\n          <span class=\"hljs-attr\">updateOne</span>: {\n            <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">_id</span>: userId },\n            <span class=\"hljs-attr\">update</span>: {\n              <span class=\"hljs-attr\">$push</span>: {\n                <span class=\"hljs-attr\">applications</span>: { <span class=\"hljs-attr\">applicationId</span>: update.<span class=\"hljs-property\">applicationId</span>, <span class=\"hljs-attr\">active</span>: update.<span class=\"hljs-property\">active</span> }\n              }\n            }\n          }\n        });\n      }\n    });\n\n    <span class=\"hljs-comment\">// 일괄 작성 작업 수행</span>\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> collection.<span class=\"hljs-title function_\">bulkWrite</span>(updateOperations);\n\n    <span class=\"hljs-keyword\">if</span> (result.<span class=\"hljs-property\">modifiedCount</span> > <span class=\"hljs-number\">0</span> || result.<span class=\"hljs-property\">insertedCount</span> > <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'애플리케이션 상태를 성공적으로 업데이트했습니다.'</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'일치하는 애플리케이션이 없거나 변경 사항이 없습니다.'</span>);\n    }\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'애플리케이션 상태를 업데이트하는 중 오류 발생:'</span>, error);\n  } <span class=\"hljs-keyword\">finally</span> {\n    <span class=\"hljs-keyword\">await</span> client.<span class=\"hljs-title function_\">close</span>();\n  }\n}\n\n<span class=\"hljs-comment\">// 예제 사용법: 여러 애플리케이션을 업데이트</span>\n<span class=\"hljs-title function_\">updateApplicationStatuses</span>(<span class=\"hljs-string\">'userId123'</span>, [\n  { <span class=\"hljs-attr\">applicationId</span>: <span class=\"hljs-string\">'Apple'</span>, <span class=\"hljs-attr\">active</span>: <span class=\"hljs-literal\">true</span> },\n  { <span class=\"hljs-attr\">applicationId</span>: <span class=\"hljs-string\">'Mango'</span>, <span class=\"hljs-attr\">active</span>: <span class=\"hljs-literal\">false</span> },\n  { <span class=\"hljs-attr\">applicationId</span>: <span class=\"hljs-string\">'Orange'</span>, <span class=\"hljs-attr\">active</span>: <span class=\"hljs-literal\">true</span> }\n]);\n</code></pre>\n<p>만약 도움이 되었다면 👏 👏 를 좀 받아도 괜찮으세요? 다른 사람들에게도 도움이 될 수 있도록 글을 공유해주시면 정말 감사하겠습니다 :)</p>\n<p>언제나 환호해 주세요...</p>\n<img src=\"https://miro.medium.com/v2/resize:fit:156/0*9zGASKmAOha2Ov3S.gif\">\n</body>\n</html>\n"},"__N_SSG":true}