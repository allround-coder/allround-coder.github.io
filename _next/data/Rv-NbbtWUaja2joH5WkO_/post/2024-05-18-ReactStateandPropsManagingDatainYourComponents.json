{"pageProps":{"post":{"title":"React State와 Props 컴포넌트에서 데이터 관리하기","description":"","date":"2024-05-18 22:14","slug":"2024-05-18-ReactStateandPropsManagingDatainYourComponents","content":"\n\n## 컴포넌트에서 데이터 관리하기\n\n## 소개\n\nReact에서 데이터를 효과적으로 관리하는 것은 동적이고 상호작용적인 애플리케이션을 구축하는 데 중요합니다. 이를 돕는 두 가지 핵심 개념은 state와 props입니다. 이러한 개념을 올바르게 사용하는 방법을 이해하면 React 애플리케이션의 유지보수성과 기능성이 크게 향상됩니다. 이 포스트에서는 props와 state가 무엇인지, props를 통해 데이터를 전달하는 방법, 로컬 상태를 관리하는 방법, 그리고 상태를 공유 데이터 처리를 위해 끌어올리는 방법에 대해 살펴보겠습니다.\n\n# Props와 State 설명\n\n<div class=\"content-ad\"></div>\n\n## 속성\n\nProps(속성의 줄임말)은 한 컴포넌트에서 다른 컴포넌트로 데이터를 전달하는 데 사용되는 읽기 전용 속성입니다. 일반적으로 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때 사용됩니다. Props를 사용하여 컴포넌트를 재사용하기 쉽게 만들 수 있습니다.\n\nProps 사용 예시\n\n```js\nfunction Greeting(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\nfunction App() {\n  return (\n    <div>\n      <Greeting name=\"Alice\" />\n      <Greeting name=\"Bob\" />\n    </div>\n  );\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 예시에서 Greeting 컴포넌트는 name prop을 받아와 개인화된 인사를 렌더링합니다.\n\n## State\n\nState는 컴포넌트 수명 동안 변경될 수 있는 데이터를 보유하는 내장 객체입니다. props와 달리 state는 컴포넌트 내에서 관리되며 `setState` 함수를 사용하여 수정할 수 있습니다.\n\nState 사용 예시\n\n<div class=\"content-ad\"></div>\n\n```js\nimport React, { useState } from \"react\";\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\nfunction App() {\n  return (\n    <div>\n      <Counter />\n    </div>\n  );\n}\n```\n\n이 예제에서 `Counter` 컴포넌트는 `useState` 훅을 사용하여 자체 상태를 관리하며, 버튼이 클릭될 때 동적으로 count 값을 업데이트할 수 있습니다.\n\n# Props를 통한 데이터 전달\n\nProps를 통한 데이터 전달은 간단합니다. 부모 컴포넌트에서 속성을 정의하고 이를 props를 사용하여 자식 컴포넌트에서 액세스하면 됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n예시: 다중 프롭 전달\n\n```js\nfunction UserInfo(props) {\n  return (\n    <div>\n       <h2>{props.name}</h2> <p>Age: {props.age}</p> \n      <p>Location: {props.location}</p> \n    </div>\n  );\n}\nfunction App() {\n  return (\n    <div>\n       <UserInfo name=\"Alice\" age={25} location=\"뉴욕\" />\n       <UserInfo name=\"Bob\" age={30} location=\"샌프란시스코\" /> \n    </div>\n  );\n}\n```\n\n여기서 `UserInfo` 컴포넌트는 `name`, `age`, `location`을 프롭으로 받아와서 표시합니다.\n\n# 로컬 상태 관리\n\n<div class=\"content-ad\"></div>\n\n로컬 상태를 관리하는 방법은 함수 컴포넌트에서 `useState` 훅을 사용하거나 클래스 컴포넌트에서 `this.state` 및 `this.setState` 메서드를 사용하는 것을 포함합니다. 현대적인 React에서는 함수 컴포넌트가 더 일반적으로 사용되므로 그에 중점을 두겠습니다.\n\n예시: 폼 상태 관리\n\n```js\nimport React, { useState } from \"react\";\nfunction Form() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    alert(\"제출 내용: \" + inputValue);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n       <input type=\"text\" value={inputValue} onChange={handleChange} /> \n      <button type=\"submit\">제출</button> \n    </form>\n  );\n}\nfunction App() {\n  return (\n    <div>\n       <Form /> \n    </div>\n  );\n}\n```\n\n이 예시에서 `Form` 컴포넌트는 `useState` 훅을 사용하여 입력 값 상태를 관리합니다. `handleChange` 함수는 상태를 업데이트하고, `handleSubmit` 함수는 폼 제출을 처리합니다.\n\n<div class=\"content-ad\"></div>\n\n# 상태 올리기\n\n상태를 올리는 것은 여러 컴포넌트가 동일한 상태를 공유하고 상호작용해야 할 때 사용하는 기술입니다. 공유된 상태는 컴포넌트의 가장 가까운 공통 조상에 의해 관리됩니다.\n\n예제: 상태 올리기\n\n```js\nimport React, { useState } from \"react\";\nfunction TemperatureInput(props) {\n  const handleChange = (event) => {\n    props.onTemperatureChange(event.target.value);\n  };\n  return (\n    <div>\n       <label>{props.scale} 온도:</label>\n       <input type=\"text\" value={props.temperature} onChange={handleChange} /> \n    </div>\n  );\n}\nfunction TemperatureCalculator() {\n  const [temperature, setTemperature] = useState(\"\");\n  const handleCelsiusChange = (temperature) => {\n    setTemperature(temperature);\n  };\n  const handleFahrenheitChange = (temperature) => {\n    setTemperature(temperature);\n  };\n  return (\n    <div>\n       \n      <TemperatureInput\n        scale=\"섭씨\"\n        temperature={temperature}\n        onTemperatureChange={handleCelsiusChange}\n      />\n       \n      <TemperatureInput\n        scale=\"화씨\"\n        temperature={temperature}\n        onTemperatureChange={handleFahrenheitChange}\n      />\n       \n    </div>\n  );\n}\nfunction App() {\n  return (\n    <div>\n       <TemperatureCalculator /> \n    </div>\n  );\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 예시에서 `TemperatureCalculator` 컴포넌트는 온도 값을 관리하기 위해 상태를 끌어올립니다. 그런 다음 해당 상태는 `TemperatureInput` 컴포넌트에 props를 통해 전달됩니다. 이를 통해 두 입력란이 동일한 상태를 반영하도록 보장할 수 있습니다.\n\n# 결론\n\n프롭과 상태를 이해하고 효과적으로 활용하는 것은 React 개발에 기초적입니다. 프롭을 통해 데이터와 설정을 컴포넌트 트리 아래로 전달하고, 상태를 통해 컴포넌트가 동적 데이터를 관리하고 반응하도록 할 수 있습니다. 이러한 개념과 상태 끌어올리기와 같은 기술을 숙달하여 보다 견고하고 유지보수 가능하며 상호작용 가능한 애플리케이션을 구축할 수 있습니다.\n\n제공된 예시를 활용하고 이러한 실천사항을 프로젝트에 통합해 보세요. 궁금한 사항이 있거나 추가 설명이 필요하면 아래에 댓글을 남겨주세요! 즐거운 코딩 하세요!","ogImage":{"url":"/assets/img/2024-05-18-ReactStateandPropsManagingDatainYourComponents_0.png"},"coverImage":"/assets/img/2024-05-18-ReactStateandPropsManagingDatainYourComponents_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>컴포넌트에서 데이터 관리하기</h2>\n<h2>소개</h2>\n<p>React에서 데이터를 효과적으로 관리하는 것은 동적이고 상호작용적인 애플리케이션을 구축하는 데 중요합니다. 이를 돕는 두 가지 핵심 개념은 state와 props입니다. 이러한 개념을 올바르게 사용하는 방법을 이해하면 React 애플리케이션의 유지보수성과 기능성이 크게 향상됩니다. 이 포스트에서는 props와 state가 무엇인지, props를 통해 데이터를 전달하는 방법, 로컬 상태를 관리하는 방법, 그리고 상태를 공유 데이터 처리를 위해 끌어올리는 방법에 대해 살펴보겠습니다.</p>\n<h1>Props와 State 설명</h1>\n<div class=\"content-ad\"></div>\n<h2>속성</h2>\n<p>Props(속성의 줄임말)은 한 컴포넌트에서 다른 컴포넌트로 데이터를 전달하는 데 사용되는 읽기 전용 속성입니다. 일반적으로 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때 사용됩니다. Props를 사용하여 컴포넌트를 재사용하기 쉽게 만들 수 있습니다.</p>\n<p>Props 사용 예시</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Greeting</span>(<span class=\"hljs-params\">props</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, {props.name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Greeting</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Alice\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Greeting</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Bob\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 예시에서 Greeting 컴포넌트는 name prop을 받아와 개인화된 인사를 렌더링합니다.</p>\n<h2>State</h2>\n<p>State는 컴포넌트 수명 동안 변경될 수 있는 데이터를 보유하는 내장 객체입니다. props와 달리 state는 컴포넌트 내에서 관리되며 <code>setState</code> 함수를 사용하여 수정할 수 있습니다.</p>\n<p>State 사용 예시</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Count: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount(count + 1)}>Increment<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Counter</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>이 예제에서 <code>Counter</code> 컴포넌트는 <code>useState</code> 훅을 사용하여 자체 상태를 관리하며, 버튼이 클릭될 때 동적으로 count 값을 업데이트할 수 있습니다.</p>\n<h1>Props를 통한 데이터 전달</h1>\n<p>Props를 통한 데이터 전달은 간단합니다. 부모 컴포넌트에서 속성을 정의하고 이를 props를 사용하여 자식 컴포넌트에서 액세스하면 됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>예시: 다중 프롭 전달</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">UserInfo</span>(<span class=\"hljs-params\">props</span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>{props.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span> <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Age: {props.age}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span> \n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Location: {props.location}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span> \n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">UserInfo</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Alice\"</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">{25}</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">\"뉴욕\"</span> /></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">UserInfo</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Bob\"</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">{30}</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">\"샌프란시스코\"</span> /></span> \n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>여기서 <code>UserInfo</code> 컴포넌트는 <code>name</code>, <code>age</code>, <code>location</code>을 프롭으로 받아와서 표시합니다.</p>\n<h1>로컬 상태 관리</h1>\n<div class=\"content-ad\"></div>\n<p>로컬 상태를 관리하는 방법은 함수 컴포넌트에서 <code>useState</code> 훅을 사용하거나 클래스 컴포넌트에서 <code>this.state</code> 및 <code>this.setState</code> 메서드를 사용하는 것을 포함합니다. 현대적인 React에서는 함수 컴포넌트가 더 일반적으로 사용되므로 그에 중점을 두겠습니다.</p>\n<p>예시: 폼 상태 관리</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Form</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [inputValue, setInputValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleChange</span> = (<span class=\"hljs-params\">event</span>) => {\n    <span class=\"hljs-title function_\">setInputValue</span>(event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\n  };\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSubmit</span> = (<span class=\"hljs-params\">event</span>) => {\n    event.<span class=\"hljs-title function_\">preventDefault</span>();\n    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"제출 내용: \"</span> + inputValue);\n  };\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleSubmit}</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{inputValue}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span> /></span> \n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>></span>제출<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span> \n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span></span>\n  );\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Form</span> /></span> \n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>이 예시에서 <code>Form</code> 컴포넌트는 <code>useState</code> 훅을 사용하여 입력 값 상태를 관리합니다. <code>handleChange</code> 함수는 상태를 업데이트하고, <code>handleSubmit</code> 함수는 폼 제출을 처리합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>상태 올리기</h1>\n<p>상태를 올리는 것은 여러 컴포넌트가 동일한 상태를 공유하고 상호작용해야 할 때 사용하는 기술입니다. 공유된 상태는 컴포넌트의 가장 가까운 공통 조상에 의해 관리됩니다.</p>\n<p>예제: 상태 올리기</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TemperatureInput</span>(<span class=\"hljs-params\">props</span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleChange</span> = (<span class=\"hljs-params\">event</span>) => {\n    props.<span class=\"hljs-title function_\">onTemperatureChange</span>(event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\n  };\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>{props.scale} 온도:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{props.temperature}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span> /></span> \n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TemperatureCalculator</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [temperature, setTemperature] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleCelsiusChange</span> = (<span class=\"hljs-params\">temperature</span>) => {\n    <span class=\"hljs-title function_\">setTemperature</span>(temperature);\n  };\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleFahrenheitChange</span> = (<span class=\"hljs-params\">temperature</span>) => {\n    <span class=\"hljs-title function_\">setTemperature</span>(temperature);\n  };\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n       \n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TemperatureInput</span>\n        <span class=\"hljs-attr\">scale</span>=<span class=\"hljs-string\">\"섭씨\"</span>\n        <span class=\"hljs-attr\">temperature</span>=<span class=\"hljs-string\">{temperature}</span>\n        <span class=\"hljs-attr\">onTemperatureChange</span>=<span class=\"hljs-string\">{handleCelsiusChange}</span>\n      /></span>\n       \n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TemperatureInput</span>\n        <span class=\"hljs-attr\">scale</span>=<span class=\"hljs-string\">\"화씨\"</span>\n        <span class=\"hljs-attr\">temperature</span>=<span class=\"hljs-string\">{temperature}</span>\n        <span class=\"hljs-attr\">onTemperatureChange</span>=<span class=\"hljs-string\">{handleFahrenheitChange}</span>\n      /></span>\n       \n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TemperatureCalculator</span> /></span> \n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 예시에서 <code>TemperatureCalculator</code> 컴포넌트는 온도 값을 관리하기 위해 상태를 끌어올립니다. 그런 다음 해당 상태는 <code>TemperatureInput</code> 컴포넌트에 props를 통해 전달됩니다. 이를 통해 두 입력란이 동일한 상태를 반영하도록 보장할 수 있습니다.</p>\n<h1>결론</h1>\n<p>프롭과 상태를 이해하고 효과적으로 활용하는 것은 React 개발에 기초적입니다. 프롭을 통해 데이터와 설정을 컴포넌트 트리 아래로 전달하고, 상태를 통해 컴포넌트가 동적 데이터를 관리하고 반응하도록 할 수 있습니다. 이러한 개념과 상태 끌어올리기와 같은 기술을 숙달하여 보다 견고하고 유지보수 가능하며 상호작용 가능한 애플리케이션을 구축할 수 있습니다.</p>\n<p>제공된 예시를 활용하고 이러한 실천사항을 프로젝트에 통합해 보세요. 궁금한 사항이 있거나 추가 설명이 필요하면 아래에 댓글을 남겨주세요! 즐거운 코딩 하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}