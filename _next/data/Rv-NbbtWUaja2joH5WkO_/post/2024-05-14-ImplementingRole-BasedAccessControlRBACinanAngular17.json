{"pageProps":{"post":{"title":"Angular 17에서 Role-Based Access Control RBAC 구현하기","description":"","date":"2024-05-14 14:19","slug":"2024-05-14-ImplementingRole-BasedAccessControlRBACinanAngular17","content":"\n\n<img src=\"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinanAngular17_0.png\" />\n\n앵귤러 17 애플리케이션에서 Role-Based Access Control (RBAC)을 구현하는 것에는 특정 경로 및 기능에만 인가된 사용자가 액세스할 수 있도록 여러 단계를 거쳐야 합니다. 앵귤러 17은 서비스, 가드, 지시문과 같은 Angular의 핵심 기능을 사용하여 이러한 시나리오를 처리합니다.\n\n여기에는 여러 부분으로 나뉘어진 완전한 예제가 있습니다:\n\n# 1. 앵귤러 프로젝트 설정\n\n\n\n먼저 Angular CLI가 설치되었는지 확인하세요:\n\n```js\nnpm install -g @angular/cli\n```\n\n새로운 Angular 프로젝트를 생성하세요:\n\n```js\nng new angular-rbac --routing=true --style=css\ncd angular-rbac\n``` \n\n\n\n# 2. 인증 모의 서비스\n\n사용자 로그인을 관리하고 역할을 저장하는 간단한 인증 서비스를 만들어보세요.\n\n```js\nng generate service auth\n```\n\nauth.service.ts를 편집하세요.\n\n\n\n```js\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface User {\n  username: string;\n  roles: string[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private currentUserSubject: BehaviorSubject<User | null>;\n  public currentUser: Observable<User | null>;\n\n  constructor() {\n    this.currentUserSubject = new BehaviorSubject<User | null>(null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  login(username: string, password: string): void {\n    // 데모용으로, 인증이 성공했다고 가정합니다.\n    const user: User = {\n      username: username,\n      roles: username === 'admin' ? ['admin', 'user'] : ['user'],\n    };\n    this.currentUserSubject.next(user);\n  }\n\n  logout(): void {\n    this.currentUserSubject.next(null);\n  }\n\n  public get currentUserValue(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  public isAuthorized(allowedRoles: string[]): boolean {\n    const user = this.currentUserValue;\n    if (!user) return false;\n    return user.roles.some(role => allowedRoles.includes(role));\n  }\n}\n```\n\n# 3. 라우트 보호를 위한 인증 가드\n\n사용자 역할에 따라 라우트를 보호하는 가드를 생성하세요.\n\n```js\nng generate guard auth\n```\n\n\n\nEdit the auth.guard.ts:\n\n```js\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const allowedRoles = next.data['roles'] as string[];\n    if (this.authService.isAuthorized(allowedRoles)) {\n      return true;\n    }\n\n    // Redirect to the login page or some other route\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n```\n\n# 4. Setup Routes with Role Protections\n\nEdit the app-routing.module.ts to define roles required for each route:\n\n\n\n```js\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdminComponent } from './admin/admin.component';\nimport { LoginComponent } from './login/login.component';\nimport { UserComponent } from './user/user.component';\nimport { AuthGuard } from './auth.guard';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'admin', component: AdminComponent, canActivate: [AuthGuard], data: { roles: ['admin'] } },\n  { path: 'user', component: UserComponent, canActivate: [AuthGuard], data: { roles: ['user', 'admin'] } }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n# 5. Create Components for Each Route\n\n```js\nng generate component login\nng generate component admin\nng generate component user\n```\n\n각 컴포넌트는 필요에 따라 기본 정보 또는 양식을 렌더링하는 간단한 구조여야 합니다.\n\n\n\n# 6. 로그인 기능 구현하기\n\n사용자 로그인을 처리하기 위해 login.component.ts를 업데이트하세요:\n\n```js\nimport { Component } from '@angular/core';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  username: string = '';\n  password: string = '';\n\n  constructor(private authService: AuthService) { }\n\n  login(): void {\n    this.authService.login(this.username, this.password);\n  }\n}\n```\n\n# 7. 어플리케이션 테스트하기\n\n\n\nAngular 개발 서버를 실행해주세요:\n\n```js\nng serve\n```\n\nhttp://localhost:4200 으로 이동하여 다른 사용자로 로그인하여 다양한 경로를 테스트해보세요.\n\n이 설정은 Angular 17 애플리케이션에서 역할 기반 액세스를 위한 기본적인 프레임워크를 제공합니다. 실제 백엔드 통합, 토큰 기반 인증 처리, 그리고 더 정교한 사용자 관리 기능을 추가함으로써 더 확장시킬 수 있습니다.\n\n\n\n감사합니다\n\n찬단","ogImage":{"url":"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinanAngular17_0.png"},"coverImage":"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinanAngular17_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-14-ImplementingRole-BasedAccessControlRBACinanAngular17_0.png\">\n<p>앵귤러 17 애플리케이션에서 Role-Based Access Control (RBAC)을 구현하는 것에는 특정 경로 및 기능에만 인가된 사용자가 액세스할 수 있도록 여러 단계를 거쳐야 합니다. 앵귤러 17은 서비스, 가드, 지시문과 같은 Angular의 핵심 기능을 사용하여 이러한 시나리오를 처리합니다.</p>\n<p>여기에는 여러 부분으로 나뉘어진 완전한 예제가 있습니다:</p>\n<h1>1. 앵귤러 프로젝트 설정</h1>\n<p>먼저 Angular CLI가 설치되었는지 확인하세요:</p>\n<pre><code class=\"hljs language-js\">npm install -g @angular/cli\n</code></pre>\n<p>새로운 Angular 프로젝트를 생성하세요:</p>\n<pre><code class=\"hljs language-js\">ng <span class=\"hljs-keyword\">new</span> angular-rbac --routing=<span class=\"hljs-literal\">true</span> --style=css\ncd angular-rbac\n</code></pre>\n<h1>2. 인증 모의 서비스</h1>\n<p>사용자 로그인을 관리하고 역할을 저장하는 간단한 인증 서비스를 만들어보세요.</p>\n<pre><code class=\"hljs language-js\">ng generate service auth\n</code></pre>\n<p>auth.service.ts를 편집하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BehaviorSubject</span>, <span class=\"hljs-title class_\">Observable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n\n<span class=\"hljs-keyword\">export</span> interface <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">username</span>: string;\n  <span class=\"hljs-attr\">roles</span>: string[];\n}\n\n@<span class=\"hljs-title class_\">Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthService</span> {\n  private <span class=\"hljs-attr\">currentUserSubject</span>: <span class=\"hljs-title class_\">BehaviorSubject</span>&#x3C;<span class=\"hljs-title class_\">User</span> | <span class=\"hljs-literal\">null</span>>;\n  public <span class=\"hljs-attr\">currentUser</span>: <span class=\"hljs-title class_\">Observable</span>&#x3C;<span class=\"hljs-title class_\">User</span> | <span class=\"hljs-literal\">null</span>>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentUserSubject</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BehaviorSubject</span>&#x3C;<span class=\"hljs-title class_\">User</span> | <span class=\"hljs-literal\">null</span>>(<span class=\"hljs-literal\">null</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentUser</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentUserSubject</span>.<span class=\"hljs-title function_\">asObservable</span>();\n  }\n\n  <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-attr\">username</span>: string, <span class=\"hljs-attr\">password</span>: string): <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-comment\">// 데모용으로, 인증이 성공했다고 가정합니다.</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">user</span>: <span class=\"hljs-title class_\">User</span> = {\n      <span class=\"hljs-attr\">username</span>: username,\n      <span class=\"hljs-attr\">roles</span>: username === <span class=\"hljs-string\">'admin'</span> ? [<span class=\"hljs-string\">'admin'</span>, <span class=\"hljs-string\">'user'</span>] : [<span class=\"hljs-string\">'user'</span>],\n    };\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentUserSubject</span>.<span class=\"hljs-title function_\">next</span>(user);\n  }\n\n  <span class=\"hljs-title function_\">logout</span>(): <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentUserSubject</span>.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-literal\">null</span>);\n  }\n\n  public <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">currentUserValue</span>(): <span class=\"hljs-title class_\">User</span> | <span class=\"hljs-literal\">null</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentUserSubject</span>.<span class=\"hljs-property\">value</span>;\n  }\n\n  public <span class=\"hljs-title function_\">isAuthorized</span>(<span class=\"hljs-attr\">allowedRoles</span>: string[]): boolean {\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentUserValue</span>;\n    <span class=\"hljs-keyword\">if</span> (!user) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">return</span> user.<span class=\"hljs-property\">roles</span>.<span class=\"hljs-title function_\">some</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">role</span> =></span> allowedRoles.<span class=\"hljs-title function_\">includes</span>(role));\n  }\n}\n</code></pre>\n<h1>3. 라우트 보호를 위한 인증 가드</h1>\n<p>사용자 역할에 따라 라우트를 보호하는 가드를 생성하세요.</p>\n<pre><code class=\"hljs language-js\">ng generate guard auth\n</code></pre>\n<p>Edit the auth.guard.ts:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CanActivate</span>, <span class=\"hljs-title class_\">ActivatedRouteSnapshot</span>, <span class=\"hljs-title class_\">RouterStateSnapshot</span>, <span class=\"hljs-title class_\">UrlTree</span>, <span class=\"hljs-title class_\">Router</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/router'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Observable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth.service'</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthGuard</span> implements <span class=\"hljs-title class_\">CanActivate</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private authService: AuthService, private router: Router</span>) {}\n\n  <span class=\"hljs-title function_\">canActivate</span>(\n    <span class=\"hljs-attr\">next</span>: <span class=\"hljs-title class_\">ActivatedRouteSnapshot</span>,\n    <span class=\"hljs-attr\">state</span>: <span class=\"hljs-title class_\">RouterStateSnapshot</span>): <span class=\"hljs-title class_\">Observable</span>&#x3C;boolean | <span class=\"hljs-title class_\">UrlTree</span>> | <span class=\"hljs-title class_\">Promise</span>&#x3C;boolean | <span class=\"hljs-title class_\">UrlTree</span>> | boolean | <span class=\"hljs-title class_\">UrlTree</span> {\n    <span class=\"hljs-keyword\">const</span> allowedRoles = next.<span class=\"hljs-property\">data</span>[<span class=\"hljs-string\">'roles'</span>] <span class=\"hljs-keyword\">as</span> string[];\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">authService</span>.<span class=\"hljs-title function_\">isAuthorized</span>(allowedRoles)) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-comment\">// Redirect to the login page or some other route</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">router</span>.<span class=\"hljs-title function_\">navigate</span>([<span class=\"hljs-string\">'/login'</span>]);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n}\n</code></pre>\n<h1>4. Setup Routes with Role Protections</h1>\n<p>Edit the app-routing.module.ts to define roles required for each route:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NgModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">RouterModule</span>, <span class=\"hljs-title class_\">Routes</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/router'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AdminComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./admin/admin.component'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">LoginComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./login/login.component'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user/user.component'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthGuard</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth.guard'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">routes</span>: <span class=\"hljs-title class_\">Routes</span> = [\n  { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'login'</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">LoginComponent</span> },\n  { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'admin'</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">AdminComponent</span>, <span class=\"hljs-attr\">canActivate</span>: [<span class=\"hljs-title class_\">AuthGuard</span>], <span class=\"hljs-attr\">data</span>: { <span class=\"hljs-attr\">roles</span>: [<span class=\"hljs-string\">'admin'</span>] } },\n  { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'user'</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">UserComponent</span>, <span class=\"hljs-attr\">canActivate</span>: [<span class=\"hljs-title class_\">AuthGuard</span>], <span class=\"hljs-attr\">data</span>: { <span class=\"hljs-attr\">roles</span>: [<span class=\"hljs-string\">'user'</span>, <span class=\"hljs-string\">'admin'</span>] } }\n];\n\n@<span class=\"hljs-title class_\">NgModule</span>({\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">RouterModule</span>.<span class=\"hljs-title function_\">forRoot</span>(routes)],\n  <span class=\"hljs-attr\">exports</span>: [<span class=\"hljs-title class_\">RouterModule</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppRoutingModule</span> { }\n</code></pre>\n<h1>5. Create Components for Each Route</h1>\n<pre><code class=\"hljs language-js\">ng generate component login\nng generate component admin\nng generate component user\n</code></pre>\n<p>각 컴포넌트는 필요에 따라 기본 정보 또는 양식을 렌더링하는 간단한 구조여야 합니다.</p>\n<h1>6. 로그인 기능 구현하기</h1>\n<p>사용자 로그인을 처리하기 위해 login.component.ts를 업데이트하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../auth.service'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-login'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./login.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./login.component.css'</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoginComponent</span> {\n  <span class=\"hljs-attr\">username</span>: string = <span class=\"hljs-string\">''</span>;\n  <span class=\"hljs-attr\">password</span>: string = <span class=\"hljs-string\">''</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private authService: AuthService</span>) { }\n\n  <span class=\"hljs-title function_\">login</span>(): <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">authService</span>.<span class=\"hljs-title function_\">login</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">username</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password</span>);\n  }\n}\n</code></pre>\n<h1>7. 어플리케이션 테스트하기</h1>\n<p>Angular 개발 서버를 실행해주세요:</p>\n<pre><code class=\"hljs language-js\">ng serve\n</code></pre>\n<p><a href=\"http://localhost:4200\" rel=\"nofollow\" target=\"_blank\">http://localhost:4200</a> 으로 이동하여 다른 사용자로 로그인하여 다양한 경로를 테스트해보세요.</p>\n<p>이 설정은 Angular 17 애플리케이션에서 역할 기반 액세스를 위한 기본적인 프레임워크를 제공합니다. 실제 백엔드 통합, 토큰 기반 인증 처리, 그리고 더 정교한 사용자 관리 기능을 추가함으로써 더 확장시킬 수 있습니다.</p>\n<p>감사합니다</p>\n<p>찬단</p>\n</body>\n</html>\n"},"__N_SSG":true}