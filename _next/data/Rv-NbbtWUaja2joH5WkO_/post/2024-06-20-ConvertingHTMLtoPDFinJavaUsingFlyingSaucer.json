{"pageProps":{"post":{"title":"자바를 사용하여 Flying Saucer로 HTML을 PDF로 변환하기","description":"","date":"2024-06-20 06:08","slug":"2024-06-20-ConvertingHTMLtoPDFinJavaUsingFlyingSaucer","content":"\n\n<img src=\"/assets/img/2024-06-20-ConvertingHTMLtoPDFinJavaUsingFlyingSaucer_0.png\" />\n\n요즘의 디지털 세계에서 HTML 파일을 PDF 문서로 프로그래밍적으로 변환하는 것은 보고서 생성, 문서 보관 등 엔터프라이즈 애플리케이션에서 흔한 요구 사항입니다. 이 블로그 포스트에서는 Maven 종속성을 활용하여 Java를 이용해 이 작업을 어떻게 수행하는지 알아보겠습니다.\n\n# Flying Saucer 소개\n\nFlying Saucer는 XHTML/XML 문서를 PDF로 쉽게 변환할 수 있는 오픈 소스 Java 라이브러리입니다. PDF 생성을 위해 강력한 iText 라이브러리를 내부적으로 활용합니다.\n\n<div class=\"content-ad\"></div>\n\n# Maven 종속성 설정\n\n```java\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-core</artifactId>\n    <version>9.1.22</version>\n</dependency>\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf</artifactId>\n    <version>9.1.22</version>\n</dependency>\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf-openpdf</artifactId>\n    <version>9.1.20</version>\n</dependency>\n<dependency>\n    <groupId>org.jsoup</groupId>\n    <artifactId>jsoup</artifactId>\n    <version>1.13.1</version>\n</dependency>\n```\n\n이러한 종속성에는 핵심 Flying Saucer 라이브러리, PDF 렌더링 기능, OpenPDF를 사용한 Flying Saucer PDF 구현, 그리고 HTML 파싱을 위한 Jsoup 라이브러리가 포함되어 있습니다.\n\n# HTML을 PDF로 변환하기 - Java 코드\n\n<div class=\"content-ad\"></div>\n\n이제 자바 코드를 살펴봅시다:\n\n```js\nimport java.io.FileOutputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\nimport org.apache.commons.io.FileUtils;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.xhtmlrenderer.pdf.ITextRenderer;\n\npublic class PdfGenerator {\n\n    private static String htmlToXhtml(String html) {\n        // Convert HTML to XHTML\n        Document document = Jsoup.parse(html);\n        document.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n        return document.html();\n    }\n\n    public static void main(String[] args) {\n        String inputFile = \"appointment_letter.html\"; // XHTML/XML 파일 경로\n        String outputFile = \"output.pdf\"; // 출력 PDF 파일 경로\n\n        try {\n            // ITextRenderer 인스턴스 생성\n            ITextRenderer renderer = new ITextRenderer();\n\n            // 파일에서 HTML 콘텐츠 읽기\n            String content = FileUtils.readFileToString(Paths.get(inputFile).toFile(), StandardCharsets.UTF_8);\n\n            // 치환 작업 수행\n            Map<String, String> valueMap = new HashMap<>();\n            valueMap.put(\"employeeId\", \"20240200001\");\n            valueMap.put(\"employeeName\", \"Harish Jay Raj\");\n            valueMap.put(\"startDate\", \"25-03-2024\");\n\n            Set<Entry<String, String>> entrySet = valueMap.entrySet();\n            for (Entry<String, String> es : entrySet) {\n                content = content.replace(\"@{\" + es.getKey() + \"}\", es.getValue());\n            }\n\n            // HTML을 XHTML로 변환\n            String htmlToXhtml = PdfGenerator.htmlToXhtml(content);\n            renderer.setDocumentFromString(htmlToXhtml);\n\n            // 문서를 PDF로 렌더링\n            renderer.layout();\n            FileOutputStream fos = new FileOutputStream(outputFile);\n            renderer.createPDF(fos);\n            fos.close();\n\n            System.out.println(\"PDF 생성 성공!\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n# 코드 이해\n\n- Flying Saucer의 ITextRenderer 클래스를 사용하여 HTML 콘텐츠를 PDF로 렌더링합니다.\n- HTML 콘텐츠는 파일(appointment_letter.html)에서 읽혀서 문자열로 저장됩니다.\n- Map을 사용하여 동적 콘텐츠 치환을 수행합니다. 예를 들어 '@employeeId'나 '@employeeName'과 같은 플레이스홀더를 실제 값으로 대체합니다.\n- HTML 콘텐츠를 Flying Saucer와 호환성을 위해 Jsoup 라이브러리를 사용하여 XHTML로 변환합니다. 마지막으로, XHTML 콘텐츠를 PDF로 렌더링하여 지정된 출력 파일(output.pdf)에 저장합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>임명서</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n        }\n\n        .letter {\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n\n        .header {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        .employee-info {\n            margin-bottom: 20px;\n        }\n\n        .closing {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"letter\">\n        <div class=\"header\">\n            <h2>임명서</h2>\n        </div>\n\n        <p>\n            친애하는 <span id=\"employeeName\">@{employeeName}</span>님,\n        </p>\n\n        <p>\n            당신이 XYZ 회사의 직원으로 임명되었음을 기쁘게 알려드립니다. 당신의 헌신과 기술이 아래 세부 사항을 통해 당신에게 이 직책을 얻게 했습니다.\n        </p>\n\n        <div class=\"employee-info\">\n            <p><strong>직원 ID:</strong> <span id=\"employeeId\">@{employeeId}</span></p>\n        </div>\n\n        <p>\n            XYZ 회사와의 근무는 <span id=\"startDate\">@{startDate}</span>에 시작될 것입니다. 입사일에 인사부서에 보고하여 추가 방향과 절차에 대해 안내받으시기 바랍니다.\n        </p>\n\n        <p>\n            여러분의 전문 지식이 팀에 크게 기여할 것이라 믿으며, 소중한 공헌을 기대하고 있습니다.\n        </p>\n\n        <div class=\"closing\">\n            <p>감사합니다,</p>\n            <p>XYZ 회사 팀</p>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n이 튜토리얼에서는 Flying Saucer 라이브러리를 사용하여 Java로 HTML 파일을 PDF 문서로 변환하는 방법을 알아보았습니다. 이 접근 방식을 통해 HTML 내용을 프로그래밍 방식으로 PDF 문서로 생성할 수 있는 유연성과 사용자 정의 옵션이 제공됩니다. 제공된 단계와 코드 스니펫을 따라하면 Java 애플리케이션에 쉽게 HTML을 PDF로 변환하는 기능을 통합할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-20-ConvertingHTMLtoPDFinJavaUsingFlyingSaucer_0.png"},"coverImage":"/assets/img/2024-06-20-ConvertingHTMLtoPDFinJavaUsingFlyingSaucer_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-20-ConvertingHTMLtoPDFinJavaUsingFlyingSaucer_0.png\">\n<p>요즘의 디지털 세계에서 HTML 파일을 PDF 문서로 프로그래밍적으로 변환하는 것은 보고서 생성, 문서 보관 등 엔터프라이즈 애플리케이션에서 흔한 요구 사항입니다. 이 블로그 포스트에서는 Maven 종속성을 활용하여 Java를 이용해 이 작업을 어떻게 수행하는지 알아보겠습니다.</p>\n<h1>Flying Saucer 소개</h1>\n<p>Flying Saucer는 XHTML/XML 문서를 PDF로 쉽게 변환할 수 있는 오픈 소스 Java 라이브러리입니다. PDF 생성을 위해 강력한 iText 라이브러리를 내부적으로 활용합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>Maven 종속성 설정</h1>\n<pre><code class=\"hljs language-java\">&#x3C;dependency>\n    &#x3C;groupId>org.xhtmlrenderer&#x3C;/groupId>\n    &#x3C;artifactId>flying-saucer-core&#x3C;/artifactId>\n    &#x3C;version><span class=\"hljs-number\">9.1</span><span class=\"hljs-number\">.22</span>&#x3C;/version>\n&#x3C;/dependency>\n&#x3C;dependency>\n    &#x3C;groupId>org.xhtmlrenderer&#x3C;/groupId>\n    &#x3C;artifactId>flying-saucer-pdf&#x3C;/artifactId>\n    &#x3C;version><span class=\"hljs-number\">9.1</span><span class=\"hljs-number\">.22</span>&#x3C;/version>\n&#x3C;/dependency>\n&#x3C;dependency>\n    &#x3C;groupId>org.xhtmlrenderer&#x3C;/groupId>\n    &#x3C;artifactId>flying-saucer-pdf-openpdf&#x3C;/artifactId>\n    &#x3C;version><span class=\"hljs-number\">9.1</span><span class=\"hljs-number\">.20</span>&#x3C;/version>\n&#x3C;/dependency>\n&#x3C;dependency>\n    &#x3C;groupId>org.jsoup&#x3C;/groupId>\n    &#x3C;artifactId>jsoup&#x3C;/artifactId>\n    &#x3C;version><span class=\"hljs-number\">1.13</span><span class=\"hljs-number\">.1</span>&#x3C;/version>\n&#x3C;/dependency>\n</code></pre>\n<p>이러한 종속성에는 핵심 Flying Saucer 라이브러리, PDF 렌더링 기능, OpenPDF를 사용한 Flying Saucer PDF 구현, 그리고 HTML 파싱을 위한 Jsoup 라이브러리가 포함되어 있습니다.</p>\n<h1>HTML을 PDF로 변환하기 - Java 코드</h1>\n<div class=\"content-ad\"></div>\n<p>이제 자바 코드를 살펴봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">io</span>.<span class=\"hljs-property\">FileOutputStream</span>;\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">nio</span>.<span class=\"hljs-property\">charset</span>.<span class=\"hljs-property\">StandardCharsets</span>;\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">nio</span>.<span class=\"hljs-property\">file</span>.<span class=\"hljs-property\">Files</span>;\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">nio</span>.<span class=\"hljs-property\">file</span>.<span class=\"hljs-property\">Paths</span>;\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">HashMap</span>;\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Map</span>;\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Map</span>.<span class=\"hljs-property\">Entry</span>;\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Set</span>;\n\n<span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">apache</span>.<span class=\"hljs-property\">commons</span>.<span class=\"hljs-property\">io</span>.<span class=\"hljs-property\">FileUtils</span>;\n<span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">jsoup</span>.<span class=\"hljs-property\">Jsoup</span>;\n<span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">jsoup</span>.<span class=\"hljs-property\">nodes</span>.<span class=\"hljs-property\">Document</span>;\n<span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">xhtmlrenderer</span>.<span class=\"hljs-property\">pdf</span>.<span class=\"hljs-property\">ITextRenderer</span>;\n\npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PdfGenerator</span> {\n\n    private <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">htmlToXhtml</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> html</span>) {\n        <span class=\"hljs-comment\">// Convert HTML to XHTML</span>\n        <span class=\"hljs-title class_\">Document</span> <span class=\"hljs-variable language_\">document</span> = <span class=\"hljs-title class_\">Jsoup</span>.<span class=\"hljs-title function_\">parse</span>(html);\n        <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">outputSettings</span>().<span class=\"hljs-title function_\">syntax</span>(<span class=\"hljs-title class_\">Document</span>.<span class=\"hljs-property\">OutputSettings</span>.<span class=\"hljs-property\">Syntax</span>.<span class=\"hljs-property\">xml</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">html</span>();\n    }\n\n    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) {\n        <span class=\"hljs-title class_\">String</span> inputFile = <span class=\"hljs-string\">\"appointment_letter.html\"</span>; <span class=\"hljs-comment\">// XHTML/XML 파일 경로</span>\n        <span class=\"hljs-title class_\">String</span> outputFile = <span class=\"hljs-string\">\"output.pdf\"</span>; <span class=\"hljs-comment\">// 출력 PDF 파일 경로</span>\n\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">// ITextRenderer 인스턴스 생성</span>\n            <span class=\"hljs-title class_\">ITextRenderer</span> renderer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ITextRenderer</span>();\n\n            <span class=\"hljs-comment\">// 파일에서 HTML 콘텐츠 읽기</span>\n            <span class=\"hljs-title class_\">String</span> content = <span class=\"hljs-title class_\">FileUtils</span>.<span class=\"hljs-title function_\">readFileToString</span>(<span class=\"hljs-title class_\">Paths</span>.<span class=\"hljs-title function_\">get</span>(inputFile).<span class=\"hljs-title function_\">toFile</span>(), <span class=\"hljs-title class_\">StandardCharsets</span>.<span class=\"hljs-property\">UTF_8</span>);\n\n            <span class=\"hljs-comment\">// 치환 작업 수행</span>\n            <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">String</span>> valueMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&#x3C;>();\n            valueMap.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">\"employeeId\"</span>, <span class=\"hljs-string\">\"20240200001\"</span>);\n            valueMap.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">\"employeeName\"</span>, <span class=\"hljs-string\">\"Harish Jay Raj\"</span>);\n            valueMap.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">\"startDate\"</span>, <span class=\"hljs-string\">\"25-03-2024\"</span>);\n\n            <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">Entry</span>&#x3C;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">String</span>>> entrySet = valueMap.<span class=\"hljs-title function_\">entrySet</span>();\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">Entry</span>&#x3C;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">String</span>> es : entrySet) {\n                content = content.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">\"@{\"</span> + es.<span class=\"hljs-title function_\">getKey</span>() + <span class=\"hljs-string\">\"}\"</span>, es.<span class=\"hljs-title function_\">getValue</span>());\n            }\n\n            <span class=\"hljs-comment\">// HTML을 XHTML로 변환</span>\n            <span class=\"hljs-title class_\">String</span> htmlToXhtml = <span class=\"hljs-title class_\">PdfGenerator</span>.<span class=\"hljs-title function_\">htmlToXhtml</span>(content);\n            renderer.<span class=\"hljs-title function_\">setDocumentFromString</span>(htmlToXhtml);\n\n            <span class=\"hljs-comment\">// 문서를 PDF로 렌더링</span>\n            renderer.<span class=\"hljs-title function_\">layout</span>();\n            <span class=\"hljs-title class_\">FileOutputStream</span> fos = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(outputFile);\n            renderer.<span class=\"hljs-title function_\">createPDF</span>(fos);\n            fos.<span class=\"hljs-title function_\">close</span>();\n\n            <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"PDF 생성 성공!\"</span>);\n        } <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-title class_\">Exception</span> e) {\n            e.<span class=\"hljs-title function_\">printStackTrace</span>();\n        }\n    }\n}\n</code></pre>\n<h1>코드 이해</h1>\n<ul>\n<li>Flying Saucer의 ITextRenderer 클래스를 사용하여 HTML 콘텐츠를 PDF로 렌더링합니다.</li>\n<li>HTML 콘텐츠는 파일(appointment_letter.html)에서 읽혀서 문자열로 저장됩니다.</li>\n<li>Map을 사용하여 동적 콘텐츠 치환을 수행합니다. 예를 들어 '@employeeId'나 '@employeeName'과 같은 플레이스홀더를 실제 값으로 대체합니다.</li>\n<li>HTML 콘텐츠를 Flying Saucer와 호환성을 위해 Jsoup 라이브러리를 사용하여 XHTML로 변환합니다. 마지막으로, XHTML 콘텐츠를 PDF로 렌더링하여 지정된 출력 파일(output.pdf)에 저장합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;title>임명서&#x3C;/title>\n    &#x3C;style>\n        body {\n            font-family: Arial, sans-serif;\n        }\n\n        .letter {\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n\n        .header {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        .employee-info {\n            margin-bottom: 20px;\n        }\n\n        .closing {\n            margin-top: 20px;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div class=\"letter\">\n        &#x3C;div class=\"header\">\n            &#x3C;h2>임명서&#x3C;/h2>\n        &#x3C;/div>\n\n        &#x3C;p>\n            친애하는 &#x3C;span id=\"employeeName\">@{employeeName}&#x3C;/span>님,\n        &#x3C;/p>\n\n        &#x3C;p>\n            당신이 XYZ 회사의 직원으로 임명되었음을 기쁘게 알려드립니다. 당신의 헌신과 기술이 아래 세부 사항을 통해 당신에게 이 직책을 얻게 했습니다.\n        &#x3C;/p>\n\n        &#x3C;div class=\"employee-info\">\n            &#x3C;p>&#x3C;strong>직원 ID:&#x3C;/strong> &#x3C;span id=\"employeeId\">@{employeeId}&#x3C;/span>&#x3C;/p>\n        &#x3C;/div>\n\n        &#x3C;p>\n            XYZ 회사와의 근무는 &#x3C;span id=\"startDate\">@{startDate}&#x3C;/span>에 시작될 것입니다. 입사일에 인사부서에 보고하여 추가 방향과 절차에 대해 안내받으시기 바랍니다.\n        &#x3C;/p>\n\n        &#x3C;p>\n            여러분의 전문 지식이 팀에 크게 기여할 것이라 믿으며, 소중한 공헌을 기대하고 있습니다.\n        &#x3C;/p>\n\n        &#x3C;div class=\"closing\">\n            &#x3C;p>감사합니다,&#x3C;/p>\n            &#x3C;p>XYZ 회사 팀&#x3C;/p>\n        &#x3C;/div>\n    &#x3C;/div>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>결론</h1>\n<p>이 튜토리얼에서는 Flying Saucer 라이브러리를 사용하여 Java로 HTML 파일을 PDF 문서로 변환하는 방법을 알아보았습니다. 이 접근 방식을 통해 HTML 내용을 프로그래밍 방식으로 PDF 문서로 생성할 수 있는 유연성과 사용자 정의 옵션이 제공됩니다. 제공된 단계와 코드 스니펫을 따라하면 Java 애플리케이션에 쉽게 HTML을 PDF로 변환하는 기능을 통합할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}