{"pageProps":{"post":{"title":"Angular v15에 Google Analytics 추가하는 방법","description":"","date":"2024-06-23 14:03","slug":"2024-06-23-AddingGoogleAnalyticstoAngularv15","content":"\n\n아마 당신도 저와 같이 포트폴리오를 만들고 방문자 추적을 원하시는 분들 중 하나일 것 같아요. 다음 직업에 얼마나 가까운지 확인하려고 사이트 트래픽을 추적하고 싶어하시는 분들일 것이라고 생각해요. 혹은 스타트업에서 일하고 있는데 사용자 참여를 추적하길 원하는 경우도 있을 거예요. 어떤 케이스이든 데이터는 웹 개발에서 매우 중요하며 사람들의 일상 생활과 상호 작용하는 방식으로 상당히 중요합니다.\n\n그러니까 더 이상 말이 필요 없겠죠! Angular v15를 사용하여 Google Analytics를 통해 당신의 분석을 어떻게 추적할 수 있는지 단계별로 알려드릴게요.\n\n## 단계 1: Google Analytics 가입하기\n\n우선 처음으로 Google Analytics에 가입해야 해요. 이미 가입한 경우에는 걱정하지 마세요. 아직 가입하지 않은 경우에는 걱정하지 마시고 시작하려면 이 링크의 지시에 따라 https://analytics.withgoogle.com/ 진행한 다음 이 페이지로 돌아오세요.\n\n<div class=\"content-ad\"></div>\n\n가입 절차를 완료하셨다면 또는 이미 이 과정을 완료했다면, 아래 화면을 확인해야 합니다.\n\n![Google Analytics](/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_0.png)\n\n파란색 버튼 위에 측정 ID가 표시되어 있는 것을 알 수 있을 겁니다. 제 사진에서는 측정 ID가 흐릿하게 처리되어 있습니다. 예시로, 저의 경우 일시적으로 1234로 설정되어 있습니다.\n\n## Step 2: Angular 애플리케이션에 Google Analytics 추가하기\n\n<div class=\"content-ad\"></div>\n\n이제 index.html 파일을 열어야 합니다. 파일이 열리면 아래 코드를 head 태그 밑에 추가해야 합니다. 그러나 body 위에 추가해야 합니다. 아래와 같이 보이는대로 추가해주세요:\n\n```js\n <!-- Google tag (gtag.js) -->\n    <script async src=\"https://www.googletagmanager.com/gtag/js?id=G-M7DLQTY7NJ\"></script>\n    <script>\n      window.dataLayer = window.dataLayer || [];\n      function gtag(){dataLayer.push(arguments);}\n      gtag('js', new Date());\n\n      gtag('config', <your_sites_measurement_ID>);\n    </script>\n```\n\n측정 ID는 이 튜토리얼의 1단계에서 찾은 ID로 교체해주세요. 완료하면 이와 같이 보여야 합니다.\n\n<img src=\"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_1.png\" />\n\n<div class=\"content-ad\"></div>\n\n## 단계 3: 분석 서비스 작성하기\n\n이번에 처음으로 Angular 서비스를 생성하고 계신다면, Angular 구조를 따르기 위해 app 폴더 내에 services라는 새 폴더를 생성하는 것을 제안드립니다. 다음과 같이 보여야 합니다:\n\n![폴더 구조](/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_2.png)\n\n그런 다음, 새로운 서비스를 생성하고 분석.service.ts라는 이름의 새 서비스를 만들어 새 services 폴더 안에 넣으세요. 분석.service.ts 파일 내에는 다음 코드를 적용하게 됩니다:\n\n<div class=\"content-ad\"></div>\n\n```ts\nimport { Injectable } from '@angular/core';\n\ndeclare var gtag: any;\n\n@Injectable({providedIn: 'root'})\nexport class AnalyticsService {\n\n  trackEvent(eventName: string, eventDetails: string, eventCategory: string) {\n    gtag('event', eventName, {\n    // event Type - example: 'SCROLL_TO_TOP_CLICKED'\n    'event_category': eventCategory,\n    // the label that will show up in the dashboard as the events name\n    'event_label': eventName,\n    // a short description of what happened\n    'value': eventDetails\n    })\n  }\n}\n```\n\nvar gtag를 선언함으로써 Angular에게 애플리케이션 어딘가에 참조하려는 gtag라는 메서드가 있는 것을 알려줍니다. 이제 gtag를 index.html 파일에 가져와서 새로운 메서드를 만들 수 있게 되었습니다. 우리가 만든 새로운 메서드는 trackEvent()입니다. 각 속성이 대시보드에 어떻게 표시될지 이해하는 데 도움이 되도록 주석을 남겨 두었습니다.\n\n다음 단계는 선택 사항입니다. 그러나 대부분의 주요 응용 프로그램은 이 구조를 따르므로 이 프레임워크가 익숙하지 않다면 해당 폴더의 index.ts 파일을 업데이트하는 습관을 가져가는 것을 제안합니다. 그런 경우가 아니라면 services 폴더 내에 index.ts 파일을 생성하여 * 장식자를 사용하여 모든 서비스 콘텐츠를 내보낼 수 있도록 합니다. 아래 정보를 참고로 사용하십시오.\n\n![이미지](/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_3.png)\n\n\n<div class=\"content-ad\"></div>\n\n## 단계 4: 새로운 분석 서비스 사용하기\n\n이제 사용 중인 컴포넌트에 새 서비스를 가져와야 합니다. 이 튜토리얼은 v15용이므로 독립형 컴포넌트 방법을 사용할 것입니다. 이전 버전을 사용 중이라면 서비스를 컴포넌트가 포함된 모듈 또는 앱 모듈로 가져와야 합니다.\n\n당신의 파일은 Angular의 최신 버전을 사용 중이라면 다음과 유사한 모습이어야 합니다:\n\n![이미지](/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_4.png)\n\n<div class=\"content-ad\"></div>\n\n한 번 서비스를 가져와서 제공자 목록에 추가하세요. 그런 다음 @angular/core에서 ngOnInit()를 구현할 것입니다. 이렇게 하면 Angular 라이프사이클에서 생성자가 완료된 후 footer가 로드되었다는 이벤트를 보낼 수 있게 됩니다. 그런 다음 분석 서비스를 타겟팅하고 trackEvent() 메서드에 액세스하여 일부 데이터를 전달할 것입니다. 저는 footer 컴포넌트를 예시로 사용하겠습니다. 아래 이미지에서 보여지는 것처럼:\n\n![Adding Google Analytics to Angular v15_5](/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_5.png)\n\n## 단계 5: 배포 및 테스트\n\n마지막 단계는 애플리케이션을 배포하고 최종 결과를 테스트하는 것입니다. 대시보드로 돌아가서 리포트에 있는 실시간 탭으로 이동할 수 있습니다. 사이트에 방문하면 지도상에서 자신을 확인할 수 있고 새 이벤트가 애플리케이션에 추가되었음을 확인할 수 있을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Google Analytics Event Network Tab](/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_6.png)\n\n이벤트를 트리거할 때 컬렉션 이벤트 트리거를 보게 될 것입니다. 또한 쿠키에서 태그를 볼 수 있습니다. 두 가지 이미지 모두 아래에서 확인할 수 있습니다.\n\n![Collection Event Trigger in Cookies](/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_7.png)\n\n![Viewing the Tag in Cookies](/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_8.png)\n\n\n<div class=\"content-ad\"></div>\n\n앞으로의 개발 팁과 요령을 팔로우해주세요. 읽어 주셔서 감사합니다. 여러분의 지원에 감사드립니다.","ogImage":{"url":"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_0.png"},"coverImage":"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>아마 당신도 저와 같이 포트폴리오를 만들고 방문자 추적을 원하시는 분들 중 하나일 것 같아요. 다음 직업에 얼마나 가까운지 확인하려고 사이트 트래픽을 추적하고 싶어하시는 분들일 것이라고 생각해요. 혹은 스타트업에서 일하고 있는데 사용자 참여를 추적하길 원하는 경우도 있을 거예요. 어떤 케이스이든 데이터는 웹 개발에서 매우 중요하며 사람들의 일상 생활과 상호 작용하는 방식으로 상당히 중요합니다.</p>\n<p>그러니까 더 이상 말이 필요 없겠죠! Angular v15를 사용하여 Google Analytics를 통해 당신의 분석을 어떻게 추적할 수 있는지 단계별로 알려드릴게요.</p>\n<h2>단계 1: Google Analytics 가입하기</h2>\n<p>우선 처음으로 Google Analytics에 가입해야 해요. 이미 가입한 경우에는 걱정하지 마세요. 아직 가입하지 않은 경우에는 걱정하지 마시고 시작하려면 이 링크의 지시에 따라 <a href=\"https://analytics.withgoogle.com/\" rel=\"nofollow\" target=\"_blank\">https://analytics.withgoogle.com/</a> 진행한 다음 이 페이지로 돌아오세요.</p>\n<div class=\"content-ad\"></div>\n<p>가입 절차를 완료하셨다면 또는 이미 이 과정을 완료했다면, 아래 화면을 확인해야 합니다.</p>\n<p><img src=\"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_0.png\" alt=\"Google Analytics\"></p>\n<p>파란색 버튼 위에 측정 ID가 표시되어 있는 것을 알 수 있을 겁니다. 제 사진에서는 측정 ID가 흐릿하게 처리되어 있습니다. 예시로, 저의 경우 일시적으로 1234로 설정되어 있습니다.</p>\n<h2>Step 2: Angular 애플리케이션에 Google Analytics 추가하기</h2>\n<div class=\"content-ad\"></div>\n<p>이제 index.html 파일을 열어야 합니다. 파일이 열리면 아래 코드를 head 태그 밑에 추가해야 합니다. 그러나 body 위에 추가해야 합니다. 아래와 같이 보이는대로 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"> &#x3C;!-- <span class=\"hljs-title class_\">Google</span> tag (gtag.<span class=\"hljs-property\">js</span>) -->\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=G-M7DLQTY7NJ\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n      <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">dataLayer</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">dataLayer</span> || [];\n      <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-params\"></span>){dataLayer.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>);}\n      <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());\n\n      <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-string\">'config'</span>, &#x3C;your_sites_measurement_ID>);\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</span></code></pre>\n<p>측정 ID는 이 튜토리얼의 1단계에서 찾은 ID로 교체해주세요. 완료하면 이와 같이 보여야 합니다.</p>\n<img src=\"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_1.png\">\n<div class=\"content-ad\"></div>\n<h2>단계 3: 분석 서비스 작성하기</h2>\n<p>이번에 처음으로 Angular 서비스를 생성하고 계신다면, Angular 구조를 따르기 위해 app 폴더 내에 services라는 새 폴더를 생성하는 것을 제안드립니다. 다음과 같이 보여야 합니다:</p>\n<p><img src=\"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_2.png\" alt=\"폴더 구조\"></p>\n<p>그런 다음, 새로운 서비스를 생성하고 분석.service.ts라는 이름의 새 서비스를 만들어 새 services 폴더 안에 넣으세요. 분석.service.ts 파일 내에는 다음 코드를 적용하게 됩니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">gtag</span>: <span class=\"hljs-built_in\">any</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>({<span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnalyticsService</span> {\n\n  <span class=\"hljs-title function_\">trackEvent</span>(<span class=\"hljs-params\">eventName: <span class=\"hljs-built_in\">string</span>, eventDetails: <span class=\"hljs-built_in\">string</span>, eventCategory: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-string\">'event'</span>, eventName, {\n    <span class=\"hljs-comment\">// event Type - example: 'SCROLL_TO_TOP_CLICKED'</span>\n    <span class=\"hljs-string\">'event_category'</span>: eventCategory,\n    <span class=\"hljs-comment\">// the label that will show up in the dashboard as the events name</span>\n    <span class=\"hljs-string\">'event_label'</span>: eventName,\n    <span class=\"hljs-comment\">// a short description of what happened</span>\n    <span class=\"hljs-string\">'value'</span>: eventDetails\n    })\n  }\n}\n</code></pre>\n<p>var gtag를 선언함으로써 Angular에게 애플리케이션 어딘가에 참조하려는 gtag라는 메서드가 있는 것을 알려줍니다. 이제 gtag를 index.html 파일에 가져와서 새로운 메서드를 만들 수 있게 되었습니다. 우리가 만든 새로운 메서드는 trackEvent()입니다. 각 속성이 대시보드에 어떻게 표시될지 이해하는 데 도움이 되도록 주석을 남겨 두었습니다.</p>\n<p>다음 단계는 선택 사항입니다. 그러나 대부분의 주요 응용 프로그램은 이 구조를 따르므로 이 프레임워크가 익숙하지 않다면 해당 폴더의 index.ts 파일을 업데이트하는 습관을 가져가는 것을 제안합니다. 그런 경우가 아니라면 services 폴더 내에 index.ts 파일을 생성하여 * 장식자를 사용하여 모든 서비스 콘텐츠를 내보낼 수 있도록 합니다. 아래 정보를 참고로 사용하십시오.</p>\n<p><img src=\"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_3.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<h2>단계 4: 새로운 분석 서비스 사용하기</h2>\n<p>이제 사용 중인 컴포넌트에 새 서비스를 가져와야 합니다. 이 튜토리얼은 v15용이므로 독립형 컴포넌트 방법을 사용할 것입니다. 이전 버전을 사용 중이라면 서비스를 컴포넌트가 포함된 모듈 또는 앱 모듈로 가져와야 합니다.</p>\n<p>당신의 파일은 Angular의 최신 버전을 사용 중이라면 다음과 유사한 모습이어야 합니다:</p>\n<p><img src=\"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_4.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>한 번 서비스를 가져와서 제공자 목록에 추가하세요. 그런 다음 @angular/core에서 ngOnInit()를 구현할 것입니다. 이렇게 하면 Angular 라이프사이클에서 생성자가 완료된 후 footer가 로드되었다는 이벤트를 보낼 수 있게 됩니다. 그런 다음 분석 서비스를 타겟팅하고 trackEvent() 메서드에 액세스하여 일부 데이터를 전달할 것입니다. 저는 footer 컴포넌트를 예시로 사용하겠습니다. 아래 이미지에서 보여지는 것처럼:</p>\n<p><img src=\"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_5.png\" alt=\"Adding Google Analytics to Angular v15_5\"></p>\n<h2>단계 5: 배포 및 테스트</h2>\n<p>마지막 단계는 애플리케이션을 배포하고 최종 결과를 테스트하는 것입니다. 대시보드로 돌아가서 리포트에 있는 실시간 탭으로 이동할 수 있습니다. 사이트에 방문하면 지도상에서 자신을 확인할 수 있고 새 이벤트가 애플리케이션에 추가되었음을 확인할 수 있을 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_6.png\" alt=\"Google Analytics Event Network Tab\"></p>\n<p>이벤트를 트리거할 때 컬렉션 이벤트 트리거를 보게 될 것입니다. 또한 쿠키에서 태그를 볼 수 있습니다. 두 가지 이미지 모두 아래에서 확인할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_7.png\" alt=\"Collection Event Trigger in Cookies\"></p>\n<p><img src=\"/assets/img/2024-06-23-AddingGoogleAnalyticstoAngularv15_8.png\" alt=\"Viewing the Tag in Cookies\"></p>\n<div class=\"content-ad\"></div>\n<p>앞으로의 개발 팁과 요령을 팔로우해주세요. 읽어 주셔서 감사합니다. 여러분의 지원에 감사드립니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}