{"pageProps":{"post":{"title":"Angular, Docker, Nginx 한 번 빌드하고 어디서든 배포하세요","description":"","date":"2024-06-20 05:31","slug":"2024-06-20-AngularDockerNginxBuildonceDeployanywhere","content":"\n\n<img src=\"/assets/img/2024-06-20-AngularDockerNginxBuildonceDeployanywhere_0.png\" />\n\nGithub 코드: https://github.com/fbzz/angular-build-once-deploy-anywhere\n\n소프트웨어 개발 과정에서 각기 다른 설정을 갖는 여러 환경을 보유하는 것은 꽤 흔합니다. Angular는 환경 변수를 관리하는 내장 시스템을 제공하여 빌드 시 파일을 교체할 수 있도록 합니다. 그러나 이 접근 방식은 종종 각 환경별로 별도의 빌드를 생성해야 하므로 시간이 소모될 수 있습니다. 이를 해결하기 위해 업계에서는 꽤 흔한 패턴이 있습니다.\n\n## 한 번 빌드하고 어디에나 배포하세요…\n\n<div class=\"content-ad\"></div>\n\n그래서, DEV와 PROD라는 두 가지 환경이 있는 예제를 살펴보겠습니다. 하나의 빌드를 사용하려면 다음을 사용합니다:\n\n- Angular — SPA 애플리케이션을 구축하기 위한 프론트엔드 프레임워크입니다.\n- Nginx — 웹 서버 및 역방향 프록시 서버입니다.\n- Docker — 가볍고 휴대 가능하며 독립적인 환경인 컨테이너에서 애플리케이션을 개발, 배포 및 실행하는 플랫폼입니다.\n\n# 1 - Angular\n\n세 가지 파일을 생성해보겠습니다. 이 파일들은 환경에 기반한 다른 구성을 처리할 것입니다:\n\n<div class=\"content-ad\"></div>\n\n`src\\config`\n\n- `app-config.dev.json` — 개발용.  \n- `app-config.prod.json` — 프로덕션용.\n\n`src\\`\n\n- `app-config.json` — 로컬 개발용이며, 향후 대체될 예정입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n//App 구성의 예시, 간단한 JSON입니다.\n{\n  \"API_URL\": \"로컬 개발용\",\n}\n```\n\n이제 번들에 포함시켜 봅시다. Angular.json 파일의 빌드 섹션에, config 폴더를 자산에 추가하세요.:\n\n```js\n  \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser-esbuild\",\n            ...\n            \"assets\": [\n              \"src/favicon.ico\",\n              \"src/assets\",\n              \"src/app-config.json\",\n              \"src/config\", // 여기\n            ],\n            ...\n}\n```\n\nnpm run build를 실행하면 dist에 config 폴더가 생깁니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Angular Docker Nginx BuildonceDeployanywhere](/assets/img/2024-06-20-AngularDockerNginxBuildonceDeployanywhere_1.png)\n\n1.2 - Angular에서는 응용 프로그램 전체에 걸쳐 데이터를 유지할 수 있는 싱글톤 서비스를 생성할 수 있습니다. 이는 응용 프로그램 전체에서 재사용할 수 있습니다.\n\n```js\nimport { Injectable } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\nimport { HttpClient, HttpBackend } from '@angular/common/http';\n\n//Move this type to a shared folder\nexport interface AppConfig {\n  API_URL: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigService {\n  //We create the configuration with default values in case anything fails\n  private configuration: AppConfig = {\n    API_URL: '/api',\n  };\n\n  private http: HttpClient;\n  constructor(private readonly httpHandler: HttpBackend) {\n    this.http = new HttpClient(this.httpHandler);\n  }\n\n  //This function will get the current config for the environment\n  setConfig(): Promise<void | AppConfig> {\n    return firstValueFrom(this.http.get<AppConfig>('./app-config.json'))\n      .then((config: AppConfig) => (this.configuration = config))\n      .catch(error => {\n        console.error(error);\n      });\n  }\n\n  //We're going to use this function to read the config.\n  readConfig(): AppConfig {\n    return this.configuration;\n  }\n}\n```\n\n1.3 - Angular에서는 APP_INITIALIZER라는 DI 토큰을 제공하여 하나 이상의 초기화 함수를 제공할 수 있습니다. 이 함수는 응용 프로그램 부트스트랩 프로세스 중에 실행되며 시작할 때 필요한 데이터가 사용 가능해집니다.\n\n\n<div class=\"content-ad\"></div>\n\nNgModules:\n\n```typescript\n// Config Service를 받아와 사용하여 설정 파일을 가져오는 함수가 여기 있습니다.\nexport function initConfig(appConfig: ConfigService) {\n  return () => appConfig.setConfig();\n}\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initConfig,\n      deps: [ConfigService], // Angular에게 이 초기화 프로그램이 ConfigService에 의존한다고 말합니다.\n      // 따라서 config 서비스는 init config에서 사용할 수 있게 됩니다.\n      multi: true,\n    },\n  ],\n})\n\nexport class AppModule {}\n```\n\nStandalone:\n\n```typescript\nimport { provideHttpClient } from \"@angular/common/http\";\nimport { APP_INITIALIZER } from \"@angular/core\";\nimport { bootstrapApplication } from \"@angular/platform-browser\";\nimport { ConfigService } from \"./core/services/config.service\";\n\nexport function initConfig(appConfig: ConfigService) {\n  return () => appConfig.setConfig();\n}\n\nbootstrapApplication(App, {\n  providers: [\n    provideHttpClient(),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initConfig,\n      multi: true,\n      deps: [ConfigService],\n    },\n  ],\n});\n```\n\n<div class=\"content-ad\"></div>\n\n1.4 - 이제, 구성 요소에서 소비하는 것은 간단합니다!\n\n```js\nimport { Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterOutlet } from '@angular/router';\nimport { ConfigService } from '../util/config.service';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, RouterOutlet],\n  templateUrl: './app.component.html',\n  //참고: 우리가 이미 제공했기 때문에 providers에서 제공할 필요가 없습니다.\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  //참고: 이 구성 요소는 독립 실행형으로 사용하고 있으며, ngModules의 경우 module providers에서 가져오기만 하면 됩니다.\n  configService = inject(ConfigService);\n\n  apiUrl = this.configService.readConfig().API_URL;\n\n  constructor() {\n    console.log(this.configService.readConfig().API_URL);\n  }\n}\n```\n\n# 2 - Nginx 구성 파일\n\n프로젝트 루트에서 자산을 제공하기 위한 간단한 구성 파일을 작성합니다. 참고: 귀하의 구성을 자유롭게 포함하십시오.\n\n<div class=\"content-ad\"></div>\n\n\n```js\nserver {\n  listen 80;\n\n  gzip on;\n  gzip_http_version 1.1;\n  gzip_disable      \"MSIE [1-6]\\.\";\n  gzip_min_length   256;\n  gzip_vary         on;\n  gzip_proxied      expired no-cache no-store private auth;\n  gzip_types        text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;\n  gzip_comp_level   9;\n  client_max_body_size 5M;\n  proxy_read_timeout 200s;\n\n  location / {\n    include /etc/nginx/mime.types;\n    root /usr/share/nginx/html;\n    add_header Cache-Control \"public, max-age=1M\";\n    try_files $uri $uri/ /index.html =404;\n  }\n\n  location /healthcheck {\n        access_log off;\n        add_header 'Content-Type' 'text/plain';\n        return 200 \"Healthy\\n\";\n    \n  }\n}\n```\n\n# 3 - Docker\n\nLet’s containerize our application by creating the Dockerfile at the root of our project, inside of it we have all the steps for building our application.\n\n```js\n# Use official node image as the base image\nFROM node:lts as build\n\nADD ./package.json /tmp/package.json\nRUN cd /tmp && npm install\nRUN mkdir -p /usr/local/app && cp -a /tmp/node_modules /usr/local/app/\n\nWORKDIR /usr/local/app\n\n# Add the source code from the app to the container\nCOPY ./ /usr/local/app/\n\n# Generate the build of the application\nRUN npm run build\n\n# Stage 2: Serve app with nginx server\n# Use official nginx image as the base image\nFROM nginx:latest\n\n# Copy the build output to replace the default nginx contents.\nCOPY --from=build /usr/local/app/dist/build/browser /usr/share/nginx/html\n\n# This line is IMPORTANT, we will breakdown it on a minute.\nCOPY ./entrypoint.sh /usr/local/app/entrypoint.sh\n\n# Copy the nginx conf that we created to the container\nCOPY ./nginx.conf  /etc/nginx/conf.d/default.conf\n\n# Expose ports\nEXPOSE 80 443 6006 4200\n\nRUN chmod +x /usr/local/app/entrypoint.sh\nENTRYPOINT [ \"/usr/local/app/entrypoint.sh\" ]\n```\n\n\n<div class=\"content-ad\"></div>\n\n우리 애플리케이션은 현재 컨테이너 내에 캡슐화되어 있습니다. 그러나 지정된 앱 구성을 사용하는 방법을 지정해야 합니다. 실행 중인 기기에는 현재 환경 정보를 전달하는 환경 변수가 있는 것으로 가정해 봅시다. 이를 용이하게 하기 위해 프로젝트 루트에서 entrypoint.sh를 생성할 수 있습니다. 이 스크립트는 애플리케이션이 작동하는 특정 환경에 기반한 파일 교체를 결정할 것입니다.\n\n\"Entrypoint\"는 컨테이너가 시작될 때 실행되는 초기 명령어로, 본질적으로 컨테이너를 초기화합니다.\n\n참고: 회사에 따라 구체적인 사항이 달라질 수 있지만 기본적인 컨셉은 적용 가능하며 프로젝트 요구에 따라 적응될 수 있습니다.\n\n```js\n#!/bin/bash -e\n\n# ENVIRONMENT 변수를 확인하고 해당하는 파일로 교체합니다\nif [[ $ENVIRONMENT == \"Dev\" ]]; then\n   cp /usr/share/nginx/html/config/app-config.dev.json /usr/share/nginx/html/app-config.json\nfi\n\nif [[ $ENVIRONMENT == \"Production\" ]]; then\n   cp /usr/share/nginx/html/config/app-config.prod.json /usr/share/nginx/html/app-config.json\nfi\n\nnginx -g 'daemon off;'\n```\n\n<div class=\"content-ad\"></div>\n\n# 4 - 컨테이너 실행하기\n\n```js\n# 이미지를 빌드하고 태그를 할당하고, 루트 폴더에서 실행합니다\ndocker build . -t angular-boda\n\n# 빌드가 완료되면 애플리케이션을 시작하고 포트 8080을 사용할 수 있습니다\n# 검사를 위해 우리는 환경을 프로덕션으로 설정하여 BODA가 작동하는지 확인합니다\n# 다른 값으로 테스트하려면 ENVIRONMENT=Dev로 변경하십시오\ndocker run -p 8080:80 -e ENVIRONMENT=Production -t angular-boda\n```\n\nlocalhost:8080에서 애플리케이션을 볼 수 있어야합니다: \n\n![이미지](/assets/img/2024-06-20-AngularDockerNginxBuildonceDeployanywhere_2.png)\n\n<div class=\"content-ad\"></div>\n\n# 5. 마무리\n\n읽어 주셔서 감사합니다. 이 글에서 우리는 Angular, Docker 및 Nginx의 힘을 활용하여 다양한 환경에서 원활하게 배포할 수 있는 다재다능한 컨테이너를 만들었습니다. 이는 개발 프로세스를 최적화할 뿐만 아니라 CI/CD 파이프라인의 효율도 최적화합니다.\n\nGitHub에서 완성된 예제를 자유롭게 살펴보세요.\n\n새해 복 많이 받으세요! 🎆🎆","ogImage":{"url":"/assets/img/2024-06-20-AngularDockerNginxBuildonceDeployanywhere_0.png"},"coverImage":"/assets/img/2024-06-20-AngularDockerNginxBuildonceDeployanywhere_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-20-AngularDockerNginxBuildonceDeployanywhere_0.png\">\n<p>Github 코드: <a href=\"https://github.com/fbzz/angular-build-once-deploy-anywhere\" rel=\"nofollow\" target=\"_blank\">https://github.com/fbzz/angular-build-once-deploy-anywhere</a></p>\n<p>소프트웨어 개발 과정에서 각기 다른 설정을 갖는 여러 환경을 보유하는 것은 꽤 흔합니다. Angular는 환경 변수를 관리하는 내장 시스템을 제공하여 빌드 시 파일을 교체할 수 있도록 합니다. 그러나 이 접근 방식은 종종 각 환경별로 별도의 빌드를 생성해야 하므로 시간이 소모될 수 있습니다. 이를 해결하기 위해 업계에서는 꽤 흔한 패턴이 있습니다.</p>\n<h2>한 번 빌드하고 어디에나 배포하세요…</h2>\n<div class=\"content-ad\"></div>\n<p>그래서, DEV와 PROD라는 두 가지 환경이 있는 예제를 살펴보겠습니다. 하나의 빌드를 사용하려면 다음을 사용합니다:</p>\n<ul>\n<li>Angular — SPA 애플리케이션을 구축하기 위한 프론트엔드 프레임워크입니다.</li>\n<li>Nginx — 웹 서버 및 역방향 프록시 서버입니다.</li>\n<li>Docker — 가볍고 휴대 가능하며 독립적인 환경인 컨테이너에서 애플리케이션을 개발, 배포 및 실행하는 플랫폼입니다.</li>\n</ul>\n<h1>1 - Angular</h1>\n<p>세 가지 파일을 생성해보겠습니다. 이 파일들은 환경에 기반한 다른 구성을 처리할 것입니다:</p>\n<div class=\"content-ad\"></div>\n<p><code>src\\config</code></p>\n<ul>\n<li><code>app-config.dev.json</code> — 개발용.</li>\n<li><code>app-config.prod.json</code> — 프로덕션용.</li>\n</ul>\n<p><code>src\\</code></p>\n<ul>\n<li><code>app-config.json</code> — 로컬 개발용이며, 향후 대체될 예정입니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//App 구성의 예시, 간단한 JSON입니다.</span>\n{\n  <span class=\"hljs-string\">\"API_URL\"</span>: <span class=\"hljs-string\">\"로컬 개발용\"</span>,\n}\n</code></pre>\n<p>이제 번들에 포함시켜 봅시다. Angular.json 파일의 빌드 섹션에, config 폴더를 자산에 추가하세요.:</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-string\">\"build\"</span>: {\n          <span class=\"hljs-string\">\"builder\"</span>: <span class=\"hljs-string\">\"@angular-devkit/build-angular:browser-esbuild\"</span>,\n            ...\n            <span class=\"hljs-string\">\"assets\"</span>: [\n              <span class=\"hljs-string\">\"src/favicon.ico\"</span>,\n              <span class=\"hljs-string\">\"src/assets\"</span>,\n              <span class=\"hljs-string\">\"src/app-config.json\"</span>,\n              <span class=\"hljs-string\">\"src/config\"</span>, <span class=\"hljs-comment\">// 여기</span>\n            ],\n            ...\n}\n</code></pre>\n<p>npm run build를 실행하면 dist에 config 폴더가 생깁니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-AngularDockerNginxBuildonceDeployanywhere_1.png\" alt=\"Angular Docker Nginx BuildonceDeployanywhere\"></p>\n<p>1.2 - Angular에서는 응용 프로그램 전체에 걸쳐 데이터를 유지할 수 있는 싱글톤 서비스를 생성할 수 있습니다. 이는 응용 프로그램 전체에서 재사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { firstValueFrom } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HttpClient</span>, <span class=\"hljs-title class_\">HttpBackend</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common/http'</span>;\n\n<span class=\"hljs-comment\">//Move this type to a shared folder</span>\n<span class=\"hljs-keyword\">export</span> interface <span class=\"hljs-title class_\">AppConfig</span> {\n  <span class=\"hljs-attr\">API_URL</span>: string;\n}\n\n@<span class=\"hljs-title class_\">Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConfigService</span> {\n  <span class=\"hljs-comment\">//We create the configuration with default values in case anything fails</span>\n  private <span class=\"hljs-attr\">configuration</span>: <span class=\"hljs-title class_\">AppConfig</span> = {\n    <span class=\"hljs-attr\">API_URL</span>: <span class=\"hljs-string\">'/api'</span>,\n  };\n\n  private <span class=\"hljs-attr\">http</span>: <span class=\"hljs-title class_\">HttpClient</span>;\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private readonly httpHandler: HttpBackend</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">http</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpClient</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">httpHandler</span>);\n  }\n\n  <span class=\"hljs-comment\">//This function will get the current config for the environment</span>\n  <span class=\"hljs-title function_\">setConfig</span>(): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-keyword\">void</span> | <span class=\"hljs-title class_\">AppConfig</span>> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">firstValueFrom</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">get</span>&#x3C;<span class=\"hljs-title class_\">AppConfig</span>>(<span class=\"hljs-string\">'./app-config.json'</span>))\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">config: AppConfig</span>) =></span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">configuration</span> = config))\n      .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error);\n      });\n  }\n\n  <span class=\"hljs-comment\">//We're going to use this function to read the config.</span>\n  <span class=\"hljs-title function_\">readConfig</span>(): <span class=\"hljs-title class_\">AppConfig</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">configuration</span>;\n  }\n}\n</code></pre>\n<p>1.3 - Angular에서는 APP_INITIALIZER라는 DI 토큰을 제공하여 하나 이상의 초기화 함수를 제공할 수 있습니다. 이 함수는 응용 프로그램 부트스트랩 프로세스 중에 실행되며 시작할 때 필요한 데이터가 사용 가능해집니다.</p>\n<div class=\"content-ad\"></div>\n<p>NgModules:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Config Service를 받아와 사용하여 설정 파일을 가져오는 함수가 여기 있습니다.</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initConfig</span>(<span class=\"hljs-params\">appConfig: ConfigService</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> appConfig.<span class=\"hljs-title function_\">setConfig</span>();\n}\n\n<span class=\"hljs-meta\">@NgModule</span>({\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">BrowserModule</span>],\n  <span class=\"hljs-attr\">declarations</span>: [<span class=\"hljs-title class_\">AppComponent</span>],\n  <span class=\"hljs-attr\">bootstrap</span>: [<span class=\"hljs-title class_\">AppComponent</span>],\n  <span class=\"hljs-attr\">providers</span>: [\n    {\n      <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">APP_INITIALIZER</span>,\n      <span class=\"hljs-attr\">useFactory</span>: initConfig,\n      <span class=\"hljs-attr\">deps</span>: [<span class=\"hljs-title class_\">ConfigService</span>], <span class=\"hljs-comment\">// Angular에게 이 초기화 프로그램이 ConfigService에 의존한다고 말합니다.</span>\n      <span class=\"hljs-comment\">// 따라서 config 서비스는 init config에서 사용할 수 있게 됩니다.</span>\n      <span class=\"hljs-attr\">multi</span>: <span class=\"hljs-literal\">true</span>,\n    },\n  ],\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<p>Standalone:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { provideHttpClient } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/common/http\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">APP_INITIALIZER</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { bootstrapApplication } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/platform-browser\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./core/services/config.service\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initConfig</span>(<span class=\"hljs-params\">appConfig: ConfigService</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> appConfig.<span class=\"hljs-title function_\">setConfig</span>();\n}\n\n<span class=\"hljs-title function_\">bootstrapApplication</span>(<span class=\"hljs-title class_\">App</span>, {\n  <span class=\"hljs-attr\">providers</span>: [\n    <span class=\"hljs-title function_\">provideHttpClient</span>(),\n    {\n      <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">APP_INITIALIZER</span>,\n      <span class=\"hljs-attr\">useFactory</span>: initConfig,\n      <span class=\"hljs-attr\">multi</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">deps</span>: [<span class=\"hljs-title class_\">ConfigService</span>],\n    },\n  ],\n});\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>1.4 - 이제, 구성 요소에서 소비하는 것은 간단합니다!</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, inject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CommonModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">RouterOutlet</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/router'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../util/config.service'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-root'</span>,\n  <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">CommonModule</span>, <span class=\"hljs-title class_\">RouterOutlet</span>],\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./app.component.html'</span>,\n  <span class=\"hljs-comment\">//참고: 우리가 이미 제공했기 때문에 providers에서 제공할 필요가 없습니다.</span>\n  <span class=\"hljs-attr\">styleUrl</span>: <span class=\"hljs-string\">'./app.component.scss'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n  <span class=\"hljs-comment\">//참고: 이 구성 요소는 독립 실행형으로 사용하고 있으며, ngModules의 경우 module providers에서 가져오기만 하면 됩니다.</span>\n  configService = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">ConfigService</span>);\n\n  apiUrl = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"hljs-title function_\">readConfig</span>().<span class=\"hljs-property\">API_URL</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"hljs-title function_\">readConfig</span>().<span class=\"hljs-property\">API_URL</span>);\n  }\n}\n</code></pre>\n<h1>2 - Nginx 구성 파일</h1>\n<p>프로젝트 루트에서 자산을 제공하기 위한 간단한 구성 파일을 작성합니다. 참고: 귀하의 구성을 자유롭게 포함하십시오.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">server {\n  listen <span class=\"hljs-number\">80</span>;\n\n  gzip on;\n  gzip_http_version <span class=\"hljs-number\">1.1</span>;\n  gzip_disable      <span class=\"hljs-string\">\"MSIE [1-6]\\.\"</span>;\n  gzip_min_length   <span class=\"hljs-number\">256</span>;\n  gzip_vary         on;\n  gzip_proxied      expired no-cache no-store private auth;\n  gzip_types        text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;\n  gzip_comp_level   <span class=\"hljs-number\">9</span>;\n  client_max_body_size 5M;\n  proxy_read_timeout 200s;\n\n  location / {\n    include /etc/nginx/mime.<span class=\"hljs-property\">types</span>;\n    root /usr/share/nginx/html;\n    add_header <span class=\"hljs-title class_\">Cache</span>-<span class=\"hljs-title class_\">Control</span> <span class=\"hljs-string\">\"public, max-age=1M\"</span>;\n    try_files $uri $uri/ /index.<span class=\"hljs-property\">html</span> =<span class=\"hljs-number\">404</span>;\n  }\n\n  location /healthcheck {\n        access_log off;\n        add_header <span class=\"hljs-string\">'Content-Type'</span> <span class=\"hljs-string\">'text/plain'</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-string\">\"Healthy\\n\"</span>;\n    \n  }\n}\n</code></pre>\n<h1>3 - Docker</h1>\n<p>Let’s containerize our application by creating the Dockerfile at the root of our project, inside of it we have all the steps for building our application.</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Use</span> official node image <span class=\"hljs-keyword\">as</span> the base image\n<span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">node</span>:lts <span class=\"hljs-keyword\">as</span> build\n\n<span class=\"hljs-variable constant_\">ADD</span> ./package.<span class=\"hljs-property\">json</span> /tmp/package.<span class=\"hljs-property\">json</span>\n<span class=\"hljs-variable constant_\">RUN</span> cd /tmp &#x26;&#x26; npm install\n<span class=\"hljs-variable constant_\">RUN</span> mkdir -p /usr/local/app &#x26;&#x26; cp -a /tmp/node_modules /usr/local/app/\n\n<span class=\"hljs-variable constant_\">WORKDIR</span> /usr/local/app\n\n# <span class=\"hljs-title class_\">Add</span> the source code <span class=\"hljs-keyword\">from</span> the app to the container\n<span class=\"hljs-variable constant_\">COPY</span> ./ <span class=\"hljs-regexp\">/usr/</span>local/app/\n\n# <span class=\"hljs-title class_\">Generate</span> the build <span class=\"hljs-keyword\">of</span> the application\n<span class=\"hljs-variable constant_\">RUN</span> npm run build\n\n# <span class=\"hljs-title class_\">Stage</span> <span class=\"hljs-number\">2</span>: <span class=\"hljs-title class_\">Serve</span> app <span class=\"hljs-keyword\">with</span> nginx server\n# <span class=\"hljs-title class_\">Use</span> official nginx image <span class=\"hljs-keyword\">as</span> the base image\n<span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">nginx</span>:latest\n\n# <span class=\"hljs-title class_\">Copy</span> the build output to replace the <span class=\"hljs-keyword\">default</span> nginx contents.\n<span class=\"hljs-variable constant_\">COPY</span> --<span class=\"hljs-keyword\">from</span>=build /usr/local/app/dist/build/browser /usr/share/nginx/html\n\n# <span class=\"hljs-title class_\">This</span> line is <span class=\"hljs-variable constant_\">IMPORTANT</span>, we will breakdown it on a minute.\n<span class=\"hljs-variable constant_\">COPY</span> ./entrypoint.<span class=\"hljs-property\">sh</span> /usr/local/app/entrypoint.<span class=\"hljs-property\">sh</span>\n\n# <span class=\"hljs-title class_\">Copy</span> the nginx conf that we created to the container\n<span class=\"hljs-variable constant_\">COPY</span> ./nginx.<span class=\"hljs-property\">conf</span>  /etc/nginx/conf.<span class=\"hljs-property\">d</span>/<span class=\"hljs-keyword\">default</span>.<span class=\"hljs-property\">conf</span>\n\n# <span class=\"hljs-title class_\">Expose</span> ports\n<span class=\"hljs-variable constant_\">EXPOSE</span> <span class=\"hljs-number\">80</span> <span class=\"hljs-number\">443</span> <span class=\"hljs-number\">6006</span> <span class=\"hljs-number\">4200</span>\n\n<span class=\"hljs-variable constant_\">RUN</span> chmod +x /usr/local/app/entrypoint.<span class=\"hljs-property\">sh</span>\n<span class=\"hljs-variable constant_\">ENTRYPOINT</span> [ <span class=\"hljs-string\">\"/usr/local/app/entrypoint.sh\"</span> ]\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>우리 애플리케이션은 현재 컨테이너 내에 캡슐화되어 있습니다. 그러나 지정된 앱 구성을 사용하는 방법을 지정해야 합니다. 실행 중인 기기에는 현재 환경 정보를 전달하는 환경 변수가 있는 것으로 가정해 봅시다. 이를 용이하게 하기 위해 프로젝트 루트에서 entrypoint.sh를 생성할 수 있습니다. 이 스크립트는 애플리케이션이 작동하는 특정 환경에 기반한 파일 교체를 결정할 것입니다.</p>\n<p>\"Entrypoint\"는 컨테이너가 시작될 때 실행되는 초기 명령어로, 본질적으로 컨테이너를 초기화합니다.</p>\n<p>참고: 회사에 따라 구체적인 사항이 달라질 수 있지만 기본적인 컨셉은 적용 가능하며 프로젝트 요구에 따라 적응될 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">#!<span class=\"hljs-regexp\">/bin/</span>bash -e\n\n# <span class=\"hljs-variable constant_\">ENVIRONMENT</span> 변수를 확인하고 해당하는 파일로 교체합니다\n<span class=\"hljs-keyword\">if</span> [[ $ENVIRONMENT == <span class=\"hljs-string\">\"Dev\"</span> ]]; then\n   cp /usr/share/nginx/html/config/app-config.<span class=\"hljs-property\">dev</span>.<span class=\"hljs-property\">json</span> /usr/share/nginx/html/app-config.<span class=\"hljs-property\">json</span>\nfi\n\n<span class=\"hljs-keyword\">if</span> [[ $ENVIRONMENT == <span class=\"hljs-string\">\"Production\"</span> ]]; then\n   cp /usr/share/nginx/html/config/app-config.<span class=\"hljs-property\">prod</span>.<span class=\"hljs-property\">json</span> /usr/share/nginx/html/app-config.<span class=\"hljs-property\">json</span>\nfi\n\nnginx -g <span class=\"hljs-string\">'daemon off;'</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>4 - 컨테이너 실행하기</h1>\n<pre><code class=\"hljs language-js\"># 이미지를 빌드하고 태그를 할당하고, 루트 폴더에서 실행합니다\ndocker build . -t angular-boda\n\n# 빌드가 완료되면 애플리케이션을 시작하고 포트 <span class=\"hljs-number\">8080</span>을 사용할 수 있습니다\n# 검사를 위해 우리는 환경을 프로덕션으로 설정하여 <span class=\"hljs-variable constant_\">BODA</span>가 작동하는지 확인합니다\n# 다른 값으로 테스트하려면 <span class=\"hljs-variable constant_\">ENVIRONMENT</span>=<span class=\"hljs-title class_\">Dev</span>로 변경하십시오\ndocker run -p <span class=\"hljs-number\">8080</span>:<span class=\"hljs-number\">80</span> -e <span class=\"hljs-variable constant_\">ENVIRONMENT</span>=<span class=\"hljs-title class_\">Production</span> -t angular-boda\n</code></pre>\n<p>localhost:8080에서 애플리케이션을 볼 수 있어야합니다:</p>\n<p><img src=\"/assets/img/2024-06-20-AngularDockerNginxBuildonceDeployanywhere_2.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<h1>5. 마무리</h1>\n<p>읽어 주셔서 감사합니다. 이 글에서 우리는 Angular, Docker 및 Nginx의 힘을 활용하여 다양한 환경에서 원활하게 배포할 수 있는 다재다능한 컨테이너를 만들었습니다. 이는 개발 프로세스를 최적화할 뿐만 아니라 CI/CD 파이프라인의 효율도 최적화합니다.</p>\n<p>GitHub에서 완성된 예제를 자유롭게 살펴보세요.</p>\n<p>새해 복 많이 받으세요! 🎆🎆</p>\n</body>\n</html>\n"},"__N_SSG":true}