{"pageProps":{"post":{"title":" Nx Affected에 대한 심층 탐구","description":"","date":"2024-06-19 23:00","slug":"2024-06-19-DeepDiveintoNxAffected","content":"\n\n## 모놀리포의 Nx 영향을 이해하고 최적화하기\n\n![이미지](/assets/img/2024-06-19-DeepDiveintoNxAffected_0.png)\n\n- 😵‍ 왜 이대로 내버려둔 프로젝트가 영향을 받는가?\n- 🤓 영향 받은 요소\n  - 영향 받은 프로젝트\n  - 영향 받은 작업\n- 🤩 영향 받은 명령\n  - 영향 받은 실행\n  - 명령 표시\n  - Nx 그래프\n- 😶‍🌫️ 영향 받은 규칙\n  - 단계 1 - 터치된 파일 찾기\n  - 단계 2.1 - 경로별 영향 받는 노드 찾기\n  - 단계 2.2 - 작업별 영향 받는 노드 찾기\n  - 단계 2.3 - 플러그인별 영향 받는 노드 찾기\n  - 단계 2.4 - Npm 의존성으로부터 영향 받는 노드 찾기\n  - 단계 2.5 - TypeScript 구성에서 영향 받는 노드 찾기\n  - 단계 2.6 - 글로벌 파일에서 영향 받는 노드 찾기\n  - 단계 3 - 영향 받는 그래프 생성\n- 🧐 영향 조사\n  - Nx 그래프 사용\n  - 디버깅\n- 🤕 영향 해결\n  - 앱/라이브러리를 잘 분리\n  - 엄격한 명명된 입력\n  - 영향 수정\n  - Nx 패치\n- 🙂 마지막으로\n\n# 😵‍ 왜 이대로 내버려둔 프로젝트가 영향을 받게 되었을까?\n\n<div class=\"content-ad\"></div>\n\n이 질문은 매일 듣는 질문입니다! 이 질문은 제가 Nx Affected 프로세스의 디버깅 세션으로 많은 시간을 소비하게 한 질문입니다.\n\n본 문서에서는 Nx의 영향을 받는 프로세스가 어떻게 작동하는지 이해하는 데 필요한 모든 통찰력을 제공하여 그 질문에 대한 답변을 도와드리겠습니다.\n\n# 🤓 영향 프로세스 알림\n\nMonorepo에서 큰 코드베이스에서 작업할 때 여러 응용 프로그램과 라이브러리를 포함하는 저장소가 있을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n당신의 Monorepo가 성장함에 따라 CI에서 모든 앱/라이브러리를 재빌드하는 데 시간이 오래 걸릴 수 있습니다. 영향을 받는 앱/라이브러리만 다시 실행할 수 있는 능력은 소프트웨어 개발 주기를 크게 단축시킬 수 있습니다.\n\n## 영향을 받는 프로젝트\n\n앱/라이브러리를 수정하면 해당 앱/라이브러리 및 이에 종속된 다른 모든 앱/라이브러리에도 영향을 줍니다:\n\n![영향을 받는 프로젝트](/assets/img/2024-06-19-DeepDiveintoNxAffected_1.png)\n\n<div class=\"content-ad\"></div>\n\n앱/라이브러리 간의 종속성을 이해하기 위해 Nx는 모든 노드(앱/라이브러리), 외부 노드(npm) 및 그들 간의 모든 종속성을 포함한 프로젝트 그래프를 생성합니다.\n\n## 영향 받는 작업\n\n전체 앱/라이브러리에 대한 수정의 영향을 고려하는 것만으로 충분하지 않습니다. 예를 들어, 앱 내의 테스트를 변경한다고 해서 그 앱 전체를 다시 빌드해야 하는 것은 아닙니다. 테스트만 다시 실행하면 됩니다:\n\n![Afftected Task](/assets/img/2024-06-19-DeepDiveintoNxAffected_2.png)\n\n<div class=\"content-ad\"></div>\n\n앱/라이브러리 간 작업 종속성을 이해하기 위해 Nx는 작업에 의해 앱/라이브러리가 연결된 노드로 Task Graph를 생성합니다.\n\n## 🤩 영향을 받는 명령어\n\nNx는 어떤 프로젝트/작업이 영향을 받았는지 식별하는 여러 방법을 제공합니다.\n\n### 영향을 받는 실행\n\n<div class=\"content-ad\"></div>\n\n주로 CI에서 사용하는 주요 명령어는 Nx 영향을 받는 명령어입니다:\n\n```js\nnx affected -t lint test build\n```\n\n![Deep Dive into Nx Affected](/assets/img/2024-06-19-DeepDiveintoNxAffected_3.png)\n\n이 명령어를 사용하면 영향을 받는 작업 목록만 실행할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## Show Command\n\n또 다른 유용한 명령어는 직접적인 개요를 얻을 수 있는 Nx show 명령어입니다:\n\n```js\nnx show projects --affected\n```\n\n<img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n이 명령은 콘솔에서 영향을 받는 프로젝트/작업을 직접 확인하고 결과를 JSON 파일로 내보내는 것을 가능하게 합니다.\n\n## Nx 그래프\n\n만약 영향을 받는 프로젝트/작업의 경로를 추적하고 UI 시각화가 필요하다면, 다음 명령을 사용하여 Nx 그래프를 열 수 있습니다:\n\n```js\nnx graph --affected\n```\n\n<div class=\"content-ad\"></div>\n\n아래는 Markdown 형식의 코드입니다.\n\n\n![이미지1](/assets/img/2024-06-19-DeepDiveintoNxAffected_5.png)\n\n그래프를 확인할 수 있는 웹 페이지가 열립니다:\n\n![이미지2](/assets/img/2024-06-19-DeepDiveintoNxAffected_6.png)\n\n## 😶‍🌫️ 영향 받는 규칙\n\n\n<div class=\"content-ad\"></div>\n\nNx 영향을 받는 프로세스는 여러 단계를 거치며 어떤 프로젝트가 영향을 받을 수 있는지 결정하기 위해 여러 파일 및 구성을 고려합니다:\n\n![Nx 영향 받은 내용 탐색](/assets/img/2024-06-19-DeepDiveintoNxAffected_7.png)\n\n## 단계 1 - 변경된 파일 찾기\n\nNx는 영향을 받는 프로젝트의 목록을 계산하기 전에 수정/변경된 파일 목록을 로드합니다:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-19-DeepDiveintoNxAffected_8.png)\n\nNx는 대상 영향을 받은 베이스 이후의 수정된 파일을 계산합니다.\n\n기본적으로 베이스는 기본 브랜치이지만, -base 및 -head 옵션을 사용하여 수정할 수 있습니다.\n\n아직 커밋되지 않거나 추적되지 않은 모든 수정된 파일도 추가됩니다. -uncommitted 또는 -untracked 옵션을 사용하여 동작을 변경할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n만약 Nx에게 파일 목록을 계산하지 않았으면, -files 옵션을 사용하여 직접 파일 목록을 제공할 수 있습니다.\n\n.gitignore 또는 .nxignore에서 패턴과 일치하는 파일들은 무시됩니다.\n\n## 단계 2.1 - 경로에서 영향을 받는 노드 찾기\n\n모든 변경된 파일이 정의되었을 때, Nx는 해당 파일들이 프로젝트에 어떻게 영향을 줄 수 있는지 확인합니다:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-19-DeepDiveintoNxAffected_9.png)\n\n가장 일반적인 규칙은 파일 경로가 프로젝트 루트 경로와 일치하는지 확인하는 것입니다.\n\n## 단계 2.2 - 작업에서 영향을받는 노드 찾기\n\nNx 작업을 실행할 때 두 가지 개념이 고려됩니다:\n\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-19-DeepDiveintoNxAffected_10.png)\n\n- 작업 실행 중에 소스 자산을 정의하는 데 사용되는 입력입니다.\n- Nx에 의해 캐시되는 작업 결과인 출력입니다.\n\n자바스크립트의 순수 함수와 유사하게, 입력이 변경되지 않았다면 출력도 동일해야 합니다.\n\n입력 목록을 재사용하기 쉽게 하려면 nx.json 또는 project.json에서 Named Inputs를 사용하여 정의할 수 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n{\n  \"namedInputs\": {\n    \"default\": [\"{projectRoot}/**/*\", \"sharedGlobals\"], // 기본 입력값\n    \"production\": [\"default\", \"!{projectRoot}/jest.config.ts\"], // 프로덕션 입력값\n    \"sharedGlobals\": [] // 공유 전역 입력값\n  }\n}\n```\n\n그런 다음, 해당 값을 nx.json 또는 project.json의 대상 또는 실행기에 할당하십시오:\n\n```js\n\"targetDefaults\": {\n  \"build\": {\n    \"inputs\": [\"production\", \"^production\"]\n  },\n  \"test\": {\n    \"inputs\": [\"default\", \"^production\", \"{workspaceRoot}/jest.preset.js\"],\n  },\n}\n```\n\n파일을 변경하더라도 해당 작업 목록에는 영향을 미치지 않습니다:\n\n<div class=\"content-ad\"></div>\n\n아래 이미지를 확인해주세요👇\n\n![이미지](/assets/img/2024-06-19-DeepDiveintoNxAffected_11.png)\n\n만약 파일을 터치하면, 영향을 받는 프로젝트 목록은 각 작업/실행자의 입력 구성에 따라 달라집니다.\n\n## 단계 2.3 - 플러그인에서 영향 받은 노드 찾기\n\nNx 프로젝트 크리스털과 추론된 구성을 통한 Nx 플러그인의 일반화로 인해 Nx는 플러그인 패턴이 터치된 파일 목록에 영향을 받는지도 확인합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![2024-06-19-DeepDiveintoNxAffected_12](/assets/img/2024-06-19-DeepDiveintoNxAffected_12.png)\n\n예를 들면, 파일을 삭제하거나 이동하면 Nx는 해당 프로젝트가 삭제되었다고 가정하고 모든 프로젝트를 영향을 받는 것으로 표시합니다.\n\n## 단계 2.4 - Npm 종속성에서 영향받는 노드 찾기\n\n만약 package.json이 수정되면, Nx는 어떤 것이 정확히 변경되었는지 이해하기 위해 스마트한 접근법을 사용합니다.\n\n\n<div class=\"content-ad\"></div>\n\n만약 npm 라이브러리를 수정한다면, Nx는 해당 라이브러리를 사용하는 모든 프로젝트를 찾아서 영향을 받는 것으로 표시합니다. 만약 @types/* 라이브러리를 수정한다면, Nx는 관련 라이브러리를 추출하여 동일한 원리로 라이브러리를 수정하는 것과 같은 원리를 적용합니다.\n\n만약 nx.json 플러그인에서 사용하는 라이브러리를 수정하거나 삭제한다면, 모든 프로젝트가 영향을 받는 것으로 간주됩니다:\n\n![image](/assets/img/2024-06-19-DeepDiveintoNxAffected_13.png)\n\n기본적으로 패키지 매니저 락 파일을 수정하는 것은 모든 프로젝트에 영향을 줍니다:\n\n<div class=\"content-ad\"></div>\n\n아래는 Markdown 형식으로 표현해 보겠습니다.\n\n![이미지](/assets/img/2024-06-19-DeepDiveintoNxAffected_14.png)\n\n이 동작은 nx.json 파일의 projectsAffectedByDependencyUpdates를 사용하여 수정할 수 있습니다:\n\n```js\n\"pluginsConfig\": {\n    \"@nx/js\": { \n        \"projectsAffectedByDependencyUpdates\": \"auto\"\n    }\n}\n```\n\n옵션:\n\n<div class=\"content-ad\"></div>\n\n- 모든: 모든 프로젝트에 영향을 미칩니다.\n- 자동: 수정된 종속성과 관련된 프로젝트에만 영향을 줍니다.\n- 문자열[]: 프로젝트 목록을 정의합니다.\n\n## 단계 2.5 - TypeScript 구성에서 영향 받는 노드 찾기\n\n전역 TypeScript 구성을 수정하면 영향을 받는 노드 목록도 변경될 수 있습니다:\n\n![이미지](/assets/img/2024-06-19-DeepDiveintoNxAffected_15.png)\n\n<div class=\"content-ad\"></div>\n\n만약 경로가 수정되면, Nx는 루트 경로와 일치하는 관련 프로젝트에 영향을 줍니다. 그러나 전역 구성을 수정하거나 경로를 삭제할 경우 모든 프로젝트에 영향을 줍니다.\n\n## 단계 2.6 - 글로벌 파일로부터 영향을 받는 노드 찾기\n\n기본적으로 nx.json을 수정하면 모든 프로젝트에 영향을 줍니다.\n\n![Nx Affected](/assets/img/2024-06-19-DeepDiveintoNxAffected_16.png)\n\n<div class=\"content-ad\"></div>\n\n## 단계 3 - 영향을 받은 그래프 생성\n\n영향을 받는 모든 노드를 식별한 후에, Nx는 영향을 받는 노드, 외부 노드 및 종속성이 최종적으로 영향을 받는지 확인하기 위해 영향을 받는 그래프를 생성합니다.\n\nNx는 영향을 받는 노드를 가져와 프로젝트 그래프의 모든 종속성을 재귀적으로 검색합니다:\n\n![Afftected Graph Example](/assets/img/2024-06-19-DeepDiveintoNxAffected_17.png)\n\n<div class=\"content-ad\"></div>\n\n예를 들어, 영향을 받는 노드인 lib10이 lib4에서 사용되고 lib4는 app1에서 사용된다면, 이 모든 노드가 영향 받는 프로젝트 그래프에 추가됩니다.\n\nNx는 externalNodes에도 동일한 원칙을 적용합니다:\n\n![image](/assets/img/2024-06-19-DeepDiveintoNxAffected_18.png)\n\n예를 들어, 영향을 받는 npm 라이브러리인 enquirer가 npm 라이브러리인 nx에 의해 사용되고 nx가 내부 라이브러리 tools에 사용되는 경우입니다.\n\n<div class=\"content-ad\"></div>\n\n지금까지 영향을 받는 그래프가 완전한지 확인하려면 Nx가 관련 종속성을 추가할 것입니다.\n\n# 🧐 영향 분석\n\n여전히 특정 브랜치에서 일부 프로젝트가 영향을 받는 이유를 모르겠다면 언제든지 Nx 영향 프로세스를 디버깅할 수 있습니다.\n\n## Nx 그래프 사용하기\n\n<div class=\"content-ad\"></div>\n\n만약 영향을 받는 명령어로 Nx 그래프를 열면, 🤓 영향을 받는 프로젝트 섹션에 명시된 대로 모든 영향을 받는 프로젝트를 볼 수 있습니다.\n\n그런 다음 워크스페이스를 탐색하고 프로젝트 포커스나 의존성 추적기와 같은 여러 기능을 사용할 수 있습니다.\n\n## 디버깅\n\n그러나 대규모 저장소의 경우, 그래프는 디버깅에 사용하기 어려울 수 있습니다. 제가 선호하는 방법은 Nx-affected 프로세스를 디버깅하여 정확히 어떤 단계가 책임을 지고 있는지를 확인하는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n패키지/nx/src/command-line/affected/affected.ts에서 중단점을 설정하고 디버그 모드에서 nx show project --affected를 실행해보세요.\n\n# 🤕 영향을 받는 수정 사항\n\n영향을 받는 프로세스를 사용자 정의하는 것은 간단하지 않습니다. 각 수정에 너무 많은 프로젝트가 영향을 받는다고 생각한다면 몇 가지 권장 사항을 살펴보세요:\n\n## 어플리케이션/라이브러리의 잘 구분된 분리\n\n<div class=\"content-ad\"></div>\n\n앱/라이브러리를 정확히 분할했는지 확인해 주세요.\n\n자주 사용되는 라이브러리는 한 프로젝트에서 필요로 하는 유틸리티들로 구성될 수 있습니다. 이런 경우 라이브러리를 수정하는 것이 모든 프로젝트에 영향을 줄 수 있습니다.\n\n## 엄격한 Named Inputs\n\nNamed Inputs가 올바르게 구성되었는지 확인하세요. Named Inputs는 파일을 수정했을 때 해당 대상의 출력에 영향을 줄 수 있는지를 정의합니다.\n\n<div class=\"content-ad\"></div>\n\n예를 들어, 스펙 파일을 수정하면 테스트에 영향을 미칠 수 있지만 빌드에는 영향을 주지 않을 수 있습니다. 기본 명명된 입력을 사용하면 한 파일을 수정하면 프로젝트의 모든 대상에 영향을 줄 수 있습니다.\n\n## 영향을 받는 사용자 정의\n\n현재, 영향을 받는 프로세스에 대한 사용자 정의가 제한적으로 제공됩니다. 의존성을 업데이트할 때 configuration projectsAffectedByDependencyUpdates를 사용하여 사용자 정의할 수 있습니다(Step 2.4 — Npm Dependencies로부터 영향을 받는 노드 찾기).\n\n## Nx 패치\n\n<div class=\"content-ad\"></div>\n\n이것은 조작적인 해결책이지만, 나는 영향을 받는 프로세스를 사용자 정의하기 위해 그것을 사용합니다. 패키지 관리자의 패치 시스템을 사용하여 Nx 라이브러리를 패치하여 규칙을 변경할 수 있습니다.\n\n예를 들어, 수정하는 데 시간이 걸리는 경우 \"Affected All\" 사용 사례를 비활성화할 수 있습니다:\n\n```js\ndiff --git a/node_modules/nx/src/plugins/js/project-graph/affected/npm-packages.js b/node_modules/nx/src/plugins/js/project-graph/affected/npm-packages.js\nindex 72e78e7..7793bea 100644\n--- a/node_modules/nx/src/plugins/js/project-graph/affected/npm-packages.js\n+++ b/node_modules/nx/src/plugins/js/project-graph/affected/npm-packages.js\n@@ -20,7 +20,8 @@ const getTouchedNpmPackages = (touchedFiles, _, nxJson, packageJson, projectGrap\n             c.path.length === 2) {\n             // 패키지가 삭제되었으므로 모든 워크스페이스 프로젝트를 터치로 표시합니다.\n             if (c.type === json_diff_1.JsonDiffType.Deleted) {\n-                touched = Object.keys(projectGraph.nodes);\n+                // 패키지가 삭제된 경우 영향을받은 모든 프로젝트에 적용하지 않도록 패치\n+                // touched = Object.keys(projectGraph.nodes);\n                 break;\n             }\n             else {\ndiff --git a/node_modules/nx/src/plugins/js/project-graph/affected/tsconfig-json-changes.js b/node_modules/nx/src/plugins/js/project-graph/affected/tsconfig-json-changes.js\nindex bac7008..37ae136 100644\n--- a/node_modules/nx/src/plugins/js/project-graph/affected/tsconfig-json-changes.js\n+++ b/node_modules/nx/src/plugins/js/project-graph/affected/tsconfig-json-changes.js\n@@ -24,7 +24,8 @@ const getTouchedProjectsFromTsConfig = (touchedFiles, _a, _b, _c, graph) => {\n         }\n         // 경로가 삭제된 경우 모든 것이 터치됩니다\n         if (change.type === json_diff_1.JsonDiffType.Deleted) {\n-            return Object.keys(graph.nodes);\n+            // 경로가 삭제된 경우 영향을 받은 모든 프로젝트에 적용하지 않도록 패치\n+            // return Object.keys(graph.nodes);\n         }\n         touched.push(...getProjectsAffectedByPaths(change, Object.values(graph.nodes)));\n     }\ndiff --git a/node_modules/nx/src/project-graph/affected/affected-project-graph.js b/node_modules/nx/src/project-graph/affected/affected-project-graph.js\nindex 5665c8d..d5a69aa 100644\n--- a/node_modules/nx/src/project-graph/affected/affected-project-graph.js\n+++ b/node_modules/nx/src/project-graph/affected/affected-project-graph.js\n@@ -12,7 +12,8 @@ async function filterAffected(graph, touchedFiles, nxJson = (0, configuration_1.\n     const touchedProjectLocators = [\n         workspace_projects_1.getTouchedProjects,\n         workspace_projects_1.getImplicitlyTouchedProjects,\n-        project_glob_changes_1.getTouchedProjectsFromProjectGlobChanges,\n+        // 플러그인 패턴 일치 변경 파일에 영향을주지 않도록 패치\n+        // project_glob_changes_1.getTouchedProjectsFromProjectGlobChanges,\n         touched_projects_1.getTouchedProjects,\n     ];\n     const touchedProjects = [];\ndiff --git a/node_modules/nx/src/project-graph/affected/locators/workspace-projects.js b/node_modules/nx/src/project-graph/affected/locators/workspace-projects.js\nindex c5aec64..edaa989 100644\n--- a/node_modules/nx/src/project-graph/affected/locators/workspace-projects.js\n+++ b/node_modules/nx/src/project-graph/affected/locators/workspace-projects.js\n@@ -16,7 +16,8 @@ const getTouchedProjects = (touchedFiles, projectGraphNodes) => {\n exports.getTouchedProjects = getTouchedProjects;\n const getImplicitlyTouchedProjects = (fileChanges, projectGraphNodes, nxJson) => {\n     const implicits = {\n-        'nx.json': '*',\n+        // nx.json이 변경된 경우 영향을받은 모든 파일에 적용하지 않도록 패치\n+        // 'nx.json': '*',\n     };\n     Object.values(projectGraphNodes || {}).forEach((node) => {\n         const namedInputs = {\n```\n\n# 🙂 마지막으로 생각해보세요\n\n<div class=\"content-ad\"></div>\n\n보시다시피, 영향을 받는 프로세스는 수정된 파일 목록을 고려하는 것뿐만 아니라 다른 여러 요소를 기반으로 프로젝트 목록을 계산합니다.\n\n이로 인해 조사가 항상 간단하지는 않고 종종 영향을 받는 모든 상황으로 이어질 수 있습니다.\n\n일부 부분을 명확히 하고 영향을 받는 프로세스를 더 잘 이해하기 위한 핵심을 제공했기를 바랍니다.\n\n미래에는 종속성 업데이트에 의해 영향을 받는 프로젝트와 같은 옵션 목록을 일반화하여 영향을 받는 프로세스에 대한 더 많은 사용자 정의 옵션이 있기를 희망합니다.\n\n<div class=\"content-ad\"></div>\n\n곧 시작됩니다 🚀\n\n# 관련된","ogImage":{"url":"/assets/img/2024-06-19-DeepDiveintoNxAffected_0.png"},"coverImage":"/assets/img/2024-06-19-DeepDiveintoNxAffected_0.png","tag":["Tech"],"readingTime":13},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>모놀리포의 Nx 영향을 이해하고 최적화하기</h2>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_0.png\" alt=\"이미지\"></p>\n<ul>\n<li>😵‍ 왜 이대로 내버려둔 프로젝트가 영향을 받는가?</li>\n<li>🤓 영향 받은 요소\n<ul>\n<li>영향 받은 프로젝트</li>\n<li>영향 받은 작업</li>\n</ul>\n</li>\n<li>🤩 영향 받은 명령\n<ul>\n<li>영향 받은 실행</li>\n<li>명령 표시</li>\n<li>Nx 그래프</li>\n</ul>\n</li>\n<li>😶‍🌫️ 영향 받은 규칙\n<ul>\n<li>단계 1 - 터치된 파일 찾기</li>\n<li>단계 2.1 - 경로별 영향 받는 노드 찾기</li>\n<li>단계 2.2 - 작업별 영향 받는 노드 찾기</li>\n<li>단계 2.3 - 플러그인별 영향 받는 노드 찾기</li>\n<li>단계 2.4 - Npm 의존성으로부터 영향 받는 노드 찾기</li>\n<li>단계 2.5 - TypeScript 구성에서 영향 받는 노드 찾기</li>\n<li>단계 2.6 - 글로벌 파일에서 영향 받는 노드 찾기</li>\n<li>단계 3 - 영향 받는 그래프 생성</li>\n</ul>\n</li>\n<li>🧐 영향 조사\n<ul>\n<li>Nx 그래프 사용</li>\n<li>디버깅</li>\n</ul>\n</li>\n<li>🤕 영향 해결\n<ul>\n<li>앱/라이브러리를 잘 분리</li>\n<li>엄격한 명명된 입력</li>\n<li>영향 수정</li>\n<li>Nx 패치</li>\n</ul>\n</li>\n<li>🙂 마지막으로</li>\n</ul>\n<h1>😵‍ 왜 이대로 내버려둔 프로젝트가 영향을 받게 되었을까?</h1>\n<div class=\"content-ad\"></div>\n<p>이 질문은 매일 듣는 질문입니다! 이 질문은 제가 Nx Affected 프로세스의 디버깅 세션으로 많은 시간을 소비하게 한 질문입니다.</p>\n<p>본 문서에서는 Nx의 영향을 받는 프로세스가 어떻게 작동하는지 이해하는 데 필요한 모든 통찰력을 제공하여 그 질문에 대한 답변을 도와드리겠습니다.</p>\n<h1>🤓 영향 프로세스 알림</h1>\n<p>Monorepo에서 큰 코드베이스에서 작업할 때 여러 응용 프로그램과 라이브러리를 포함하는 저장소가 있을 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>당신의 Monorepo가 성장함에 따라 CI에서 모든 앱/라이브러리를 재빌드하는 데 시간이 오래 걸릴 수 있습니다. 영향을 받는 앱/라이브러리만 다시 실행할 수 있는 능력은 소프트웨어 개발 주기를 크게 단축시킬 수 있습니다.</p>\n<h2>영향을 받는 프로젝트</h2>\n<p>앱/라이브러리를 수정하면 해당 앱/라이브러리 및 이에 종속된 다른 모든 앱/라이브러리에도 영향을 줍니다:</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_1.png\" alt=\"영향을 받는 프로젝트\"></p>\n<div class=\"content-ad\"></div>\n<p>앱/라이브러리 간의 종속성을 이해하기 위해 Nx는 모든 노드(앱/라이브러리), 외부 노드(npm) 및 그들 간의 모든 종속성을 포함한 프로젝트 그래프를 생성합니다.</p>\n<h2>영향 받는 작업</h2>\n<p>전체 앱/라이브러리에 대한 수정의 영향을 고려하는 것만으로 충분하지 않습니다. 예를 들어, 앱 내의 테스트를 변경한다고 해서 그 앱 전체를 다시 빌드해야 하는 것은 아닙니다. 테스트만 다시 실행하면 됩니다:</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_2.png\" alt=\"Afftected Task\"></p>\n<div class=\"content-ad\"></div>\n<p>앱/라이브러리 간 작업 종속성을 이해하기 위해 Nx는 작업에 의해 앱/라이브러리가 연결된 노드로 Task Graph를 생성합니다.</p>\n<h2>🤩 영향을 받는 명령어</h2>\n<p>Nx는 어떤 프로젝트/작업이 영향을 받았는지 식별하는 여러 방법을 제공합니다.</p>\n<h3>영향을 받는 실행</h3>\n<div class=\"content-ad\"></div>\n<p>주로 CI에서 사용하는 주요 명령어는 Nx 영향을 받는 명령어입니다:</p>\n<pre><code class=\"hljs language-js\">nx affected -t lint test build\n</code></pre>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_3.png\" alt=\"Deep Dive into Nx Affected\"></p>\n<p>이 명령어를 사용하면 영향을 받는 작업 목록만 실행할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>Show Command</h2>\n<p>또 다른 유용한 명령어는 직접적인 개요를 얻을 수 있는 Nx show 명령어입니다:</p>\n<pre><code class=\"hljs language-js\">nx show projects --affected\n</code></pre>\n<img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_4.png\">\n<div class=\"content-ad\"></div>\n<p>이 명령은 콘솔에서 영향을 받는 프로젝트/작업을 직접 확인하고 결과를 JSON 파일로 내보내는 것을 가능하게 합니다.</p>\n<h2>Nx 그래프</h2>\n<p>만약 영향을 받는 프로젝트/작업의 경로를 추적하고 UI 시각화가 필요하다면, 다음 명령을 사용하여 Nx 그래프를 열 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">nx graph --affected\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>아래는 Markdown 형식의 코드입니다.</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_5.png\" alt=\"이미지1\"></p>\n<p>그래프를 확인할 수 있는 웹 페이지가 열립니다:</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_6.png\" alt=\"이미지2\"></p>\n<h2>😶‍🌫️ 영향 받는 규칙</h2>\n<div class=\"content-ad\"></div>\n<p>Nx 영향을 받는 프로세스는 여러 단계를 거치며 어떤 프로젝트가 영향을 받을 수 있는지 결정하기 위해 여러 파일 및 구성을 고려합니다:</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_7.png\" alt=\"Nx 영향 받은 내용 탐색\"></p>\n<h2>단계 1 - 변경된 파일 찾기</h2>\n<p>Nx는 영향을 받는 프로젝트의 목록을 계산하기 전에 수정/변경된 파일 목록을 로드합니다:</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_8.png\" alt=\"이미지\"></p>\n<p>Nx는 대상 영향을 받은 베이스 이후의 수정된 파일을 계산합니다.</p>\n<p>기본적으로 베이스는 기본 브랜치이지만, -base 및 -head 옵션을 사용하여 수정할 수 있습니다.</p>\n<p>아직 커밋되지 않거나 추적되지 않은 모든 수정된 파일도 추가됩니다. -uncommitted 또는 -untracked 옵션을 사용하여 동작을 변경할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>만약 Nx에게 파일 목록을 계산하지 않았으면, -files 옵션을 사용하여 직접 파일 목록을 제공할 수 있습니다.</p>\n<p>.gitignore 또는 .nxignore에서 패턴과 일치하는 파일들은 무시됩니다.</p>\n<h2>단계 2.1 - 경로에서 영향을 받는 노드 찾기</h2>\n<p>모든 변경된 파일이 정의되었을 때, Nx는 해당 파일들이 프로젝트에 어떻게 영향을 줄 수 있는지 확인합니다:</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_9.png\" alt=\"이미지\"></p>\n<p>가장 일반적인 규칙은 파일 경로가 프로젝트 루트 경로와 일치하는지 확인하는 것입니다.</p>\n<h2>단계 2.2 - 작업에서 영향을받는 노드 찾기</h2>\n<p>Nx 작업을 실행할 때 두 가지 개념이 고려됩니다:</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_10.png\" alt=\"image\"></p>\n<ul>\n<li>작업 실행 중에 소스 자산을 정의하는 데 사용되는 입력입니다.</li>\n<li>Nx에 의해 캐시되는 작업 결과인 출력입니다.</li>\n</ul>\n<p>자바스크립트의 순수 함수와 유사하게, 입력이 변경되지 않았다면 출력도 동일해야 합니다.</p>\n<p>입력 목록을 재사용하기 쉽게 하려면 nx.json 또는 project.json에서 Named Inputs를 사용하여 정의할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"namedInputs\"</span>: {\n    <span class=\"hljs-string\">\"default\"</span>: [<span class=\"hljs-string\">\"{projectRoot}/**/*\"</span>, <span class=\"hljs-string\">\"sharedGlobals\"</span>], <span class=\"hljs-comment\">// 기본 입력값</span>\n    <span class=\"hljs-string\">\"production\"</span>: [<span class=\"hljs-string\">\"default\"</span>, <span class=\"hljs-string\">\"!{projectRoot}/jest.config.ts\"</span>], <span class=\"hljs-comment\">// 프로덕션 입력값</span>\n    <span class=\"hljs-string\">\"sharedGlobals\"</span>: [] <span class=\"hljs-comment\">// 공유 전역 입력값</span>\n  }\n}\n</code></pre>\n<p>그런 다음, 해당 값을 nx.json 또는 project.json의 대상 또는 실행기에 할당하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"targetDefaults\"</span>: {\n  <span class=\"hljs-string\">\"build\"</span>: {\n    <span class=\"hljs-string\">\"inputs\"</span>: [<span class=\"hljs-string\">\"production\"</span>, <span class=\"hljs-string\">\"^production\"</span>]\n  },\n  <span class=\"hljs-string\">\"test\"</span>: {\n    <span class=\"hljs-string\">\"inputs\"</span>: [<span class=\"hljs-string\">\"default\"</span>, <span class=\"hljs-string\">\"^production\"</span>, <span class=\"hljs-string\">\"{workspaceRoot}/jest.preset.js\"</span>],\n  },\n}\n</code></pre>\n<p>파일을 변경하더라도 해당 작업 목록에는 영향을 미치지 않습니다:</p>\n<div class=\"content-ad\"></div>\n<p>아래 이미지를 확인해주세요👇</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_11.png\" alt=\"이미지\"></p>\n<p>만약 파일을 터치하면, 영향을 받는 프로젝트 목록은 각 작업/실행자의 입력 구성에 따라 달라집니다.</p>\n<h2>단계 2.3 - 플러그인에서 영향 받은 노드 찾기</h2>\n<p>Nx 프로젝트 크리스털과 추론된 구성을 통한 Nx 플러그인의 일반화로 인해 Nx는 플러그인 패턴이 터치된 파일 목록에 영향을 받는지도 확인합니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_12.png\" alt=\"2024-06-19-DeepDiveintoNxAffected_12\"></p>\n<p>예를 들면, 파일을 삭제하거나 이동하면 Nx는 해당 프로젝트가 삭제되었다고 가정하고 모든 프로젝트를 영향을 받는 것으로 표시합니다.</p>\n<h2>단계 2.4 - Npm 종속성에서 영향받는 노드 찾기</h2>\n<p>만약 package.json이 수정되면, Nx는 어떤 것이 정확히 변경되었는지 이해하기 위해 스마트한 접근법을 사용합니다.</p>\n<div class=\"content-ad\"></div>\n<p>만약 npm 라이브러리를 수정한다면, Nx는 해당 라이브러리를 사용하는 모든 프로젝트를 찾아서 영향을 받는 것으로 표시합니다. 만약 @types/* 라이브러리를 수정한다면, Nx는 관련 라이브러리를 추출하여 동일한 원리로 라이브러리를 수정하는 것과 같은 원리를 적용합니다.</p>\n<p>만약 nx.json 플러그인에서 사용하는 라이브러리를 수정하거나 삭제한다면, 모든 프로젝트가 영향을 받는 것으로 간주됩니다:</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_13.png\" alt=\"image\"></p>\n<p>기본적으로 패키지 매니저 락 파일을 수정하는 것은 모든 프로젝트에 영향을 줍니다:</p>\n<div class=\"content-ad\"></div>\n<p>아래는 Markdown 형식으로 표현해 보겠습니다.</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_14.png\" alt=\"이미지\"></p>\n<p>이 동작은 nx.json 파일의 projectsAffectedByDependencyUpdates를 사용하여 수정할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"pluginsConfig\"</span>: {\n    <span class=\"hljs-string\">\"@nx/js\"</span>: { \n        <span class=\"hljs-string\">\"projectsAffectedByDependencyUpdates\"</span>: <span class=\"hljs-string\">\"auto\"</span>\n    }\n}\n</code></pre>\n<p>옵션:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>모든: 모든 프로젝트에 영향을 미칩니다.</li>\n<li>자동: 수정된 종속성과 관련된 프로젝트에만 영향을 줍니다.</li>\n<li>문자열[]: 프로젝트 목록을 정의합니다.</li>\n</ul>\n<h2>단계 2.5 - TypeScript 구성에서 영향 받는 노드 찾기</h2>\n<p>전역 TypeScript 구성을 수정하면 영향을 받는 노드 목록도 변경될 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_15.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>만약 경로가 수정되면, Nx는 루트 경로와 일치하는 관련 프로젝트에 영향을 줍니다. 그러나 전역 구성을 수정하거나 경로를 삭제할 경우 모든 프로젝트에 영향을 줍니다.</p>\n<h2>단계 2.6 - 글로벌 파일로부터 영향을 받는 노드 찾기</h2>\n<p>기본적으로 nx.json을 수정하면 모든 프로젝트에 영향을 줍니다.</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_16.png\" alt=\"Nx Affected\"></p>\n<div class=\"content-ad\"></div>\n<h2>단계 3 - 영향을 받은 그래프 생성</h2>\n<p>영향을 받는 모든 노드를 식별한 후에, Nx는 영향을 받는 노드, 외부 노드 및 종속성이 최종적으로 영향을 받는지 확인하기 위해 영향을 받는 그래프를 생성합니다.</p>\n<p>Nx는 영향을 받는 노드를 가져와 프로젝트 그래프의 모든 종속성을 재귀적으로 검색합니다:</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_17.png\" alt=\"Afftected Graph Example\"></p>\n<div class=\"content-ad\"></div>\n<p>예를 들어, 영향을 받는 노드인 lib10이 lib4에서 사용되고 lib4는 app1에서 사용된다면, 이 모든 노드가 영향 받는 프로젝트 그래프에 추가됩니다.</p>\n<p>Nx는 externalNodes에도 동일한 원칙을 적용합니다:</p>\n<p><img src=\"/assets/img/2024-06-19-DeepDiveintoNxAffected_18.png\" alt=\"image\"></p>\n<p>예를 들어, 영향을 받는 npm 라이브러리인 enquirer가 npm 라이브러리인 nx에 의해 사용되고 nx가 내부 라이브러리 tools에 사용되는 경우입니다.</p>\n<div class=\"content-ad\"></div>\n<p>지금까지 영향을 받는 그래프가 완전한지 확인하려면 Nx가 관련 종속성을 추가할 것입니다.</p>\n<h1>🧐 영향 분석</h1>\n<p>여전히 특정 브랜치에서 일부 프로젝트가 영향을 받는 이유를 모르겠다면 언제든지 Nx 영향 프로세스를 디버깅할 수 있습니다.</p>\n<h2>Nx 그래프 사용하기</h2>\n<div class=\"content-ad\"></div>\n<p>만약 영향을 받는 명령어로 Nx 그래프를 열면, 🤓 영향을 받는 프로젝트 섹션에 명시된 대로 모든 영향을 받는 프로젝트를 볼 수 있습니다.</p>\n<p>그런 다음 워크스페이스를 탐색하고 프로젝트 포커스나 의존성 추적기와 같은 여러 기능을 사용할 수 있습니다.</p>\n<h2>디버깅</h2>\n<p>그러나 대규모 저장소의 경우, 그래프는 디버깅에 사용하기 어려울 수 있습니다. 제가 선호하는 방법은 Nx-affected 프로세스를 디버깅하여 정확히 어떤 단계가 책임을 지고 있는지를 확인하는 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>패키지/nx/src/command-line/affected/affected.ts에서 중단점을 설정하고 디버그 모드에서 nx show project --affected를 실행해보세요.</p>\n<h1>🤕 영향을 받는 수정 사항</h1>\n<p>영향을 받는 프로세스를 사용자 정의하는 것은 간단하지 않습니다. 각 수정에 너무 많은 프로젝트가 영향을 받는다고 생각한다면 몇 가지 권장 사항을 살펴보세요:</p>\n<h2>어플리케이션/라이브러리의 잘 구분된 분리</h2>\n<div class=\"content-ad\"></div>\n<p>앱/라이브러리를 정확히 분할했는지 확인해 주세요.</p>\n<p>자주 사용되는 라이브러리는 한 프로젝트에서 필요로 하는 유틸리티들로 구성될 수 있습니다. 이런 경우 라이브러리를 수정하는 것이 모든 프로젝트에 영향을 줄 수 있습니다.</p>\n<h2>엄격한 Named Inputs</h2>\n<p>Named Inputs가 올바르게 구성되었는지 확인하세요. Named Inputs는 파일을 수정했을 때 해당 대상의 출력에 영향을 줄 수 있는지를 정의합니다.</p>\n<div class=\"content-ad\"></div>\n<p>예를 들어, 스펙 파일을 수정하면 테스트에 영향을 미칠 수 있지만 빌드에는 영향을 주지 않을 수 있습니다. 기본 명명된 입력을 사용하면 한 파일을 수정하면 프로젝트의 모든 대상에 영향을 줄 수 있습니다.</p>\n<h2>영향을 받는 사용자 정의</h2>\n<p>현재, 영향을 받는 프로세스에 대한 사용자 정의가 제한적으로 제공됩니다. 의존성을 업데이트할 때 configuration projectsAffectedByDependencyUpdates를 사용하여 사용자 정의할 수 있습니다(Step 2.4 — Npm Dependencies로부터 영향을 받는 노드 찾기).</p>\n<h2>Nx 패치</h2>\n<div class=\"content-ad\"></div>\n<p>이것은 조작적인 해결책이지만, 나는 영향을 받는 프로세스를 사용자 정의하기 위해 그것을 사용합니다. 패키지 관리자의 패치 시스템을 사용하여 Nx 라이브러리를 패치하여 규칙을 변경할 수 있습니다.</p>\n<p>예를 들어, 수정하는 데 시간이 걸리는 경우 \"Affected All\" 사용 사례를 비활성화할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">diff --git a/node_modules/nx/src/plugins/js/project-graph/affected/npm-packages.<span class=\"hljs-property\">js</span> b/node_modules/nx/src/plugins/js/project-graph/affected/npm-packages.<span class=\"hljs-property\">js</span>\nindex 72e78e7..7793bea <span class=\"hljs-number\">100644</span>\n--- a/node_modules/nx/src/plugins/js/project-graph/affected/npm-packages.<span class=\"hljs-property\">js</span>\n+++ b/node_modules/nx/src/plugins/js/project-graph/affected/npm-packages.<span class=\"hljs-property\">js</span>\n@@ -<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">8</span> @@ <span class=\"hljs-keyword\">const</span> getTouchedNpmPackages = (touchedFiles, _, nxJson, packageJson, projectGrap\n             c.<span class=\"hljs-property\">path</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">2</span>) {\n             <span class=\"hljs-comment\">// 패키지가 삭제되었으므로 모든 워크스페이스 프로젝트를 터치로 표시합니다.</span>\n             <span class=\"hljs-keyword\">if</span> (c.<span class=\"hljs-property\">type</span> === json_diff_1.<span class=\"hljs-property\">JsonDiffType</span>.<span class=\"hljs-property\">Deleted</span>) {\n-                touched = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(projectGraph.<span class=\"hljs-property\">nodes</span>);\n+                <span class=\"hljs-comment\">// 패키지가 삭제된 경우 영향을받은 모든 프로젝트에 적용하지 않도록 패치</span>\n+                <span class=\"hljs-comment\">// touched = Object.keys(projectGraph.nodes);</span>\n                 <span class=\"hljs-keyword\">break</span>;\n             }\n             <span class=\"hljs-keyword\">else</span> {\ndiff --git a/node_modules/nx/src/plugins/js/project-graph/affected/tsconfig-json-changes.<span class=\"hljs-property\">js</span> b/node_modules/nx/src/plugins/js/project-graph/affected/tsconfig-json-changes.<span class=\"hljs-property\">js</span>\nindex bac7008..37ae136 <span class=\"hljs-number\">100644</span>\n--- a/node_modules/nx/src/plugins/js/project-graph/affected/tsconfig-json-changes.<span class=\"hljs-property\">js</span>\n+++ b/node_modules/nx/src/plugins/js/project-graph/affected/tsconfig-json-changes.<span class=\"hljs-property\">js</span>\n@@ -<span class=\"hljs-number\">24</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">24</span>,<span class=\"hljs-number\">8</span> @@ <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getTouchedProjectsFromTsConfig</span> = (<span class=\"hljs-params\">touchedFiles, _a, _b, _c, graph</span>) => {\n         }\n         <span class=\"hljs-comment\">// 경로가 삭제된 경우 모든 것이 터치됩니다</span>\n         <span class=\"hljs-keyword\">if</span> (change.<span class=\"hljs-property\">type</span> === json_diff_1.<span class=\"hljs-property\">JsonDiffType</span>.<span class=\"hljs-property\">Deleted</span>) {\n-            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(graph.<span class=\"hljs-property\">nodes</span>);\n+            <span class=\"hljs-comment\">// 경로가 삭제된 경우 영향을 받은 모든 프로젝트에 적용하지 않도록 패치</span>\n+            <span class=\"hljs-comment\">// return Object.keys(graph.nodes);</span>\n         }\n         touched.<span class=\"hljs-title function_\">push</span>(...<span class=\"hljs-title function_\">getProjectsAffectedByPaths</span>(change, <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">values</span>(graph.<span class=\"hljs-property\">nodes</span>)));\n     }\ndiff --git a/node_modules/nx/src/project-graph/affected/affected-project-graph.<span class=\"hljs-property\">js</span> b/node_modules/nx/src/project-graph/affected/affected-project-graph.<span class=\"hljs-property\">js</span>\nindex 5665c8d..<span class=\"hljs-property\">d5a69aa</span> <span class=\"hljs-number\">100644</span>\n--- a/node_modules/nx/src/project-graph/affected/affected-project-graph.<span class=\"hljs-property\">js</span>\n+++ b/node_modules/nx/src/project-graph/affected/affected-project-graph.<span class=\"hljs-property\">js</span>\n@@ -<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">8</span> @@ <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">filterAffected</span>(<span class=\"hljs-params\">graph, touchedFiles, nxJson = (<span class=\"hljs-number\">0</span>, configuration_1.\n     <span class=\"hljs-keyword\">const</span> touchedProjectLocators = [\n         workspace_projects_1.getTouchedProjects,\n         workspace_projects_1.getImplicitlyTouchedProjects,\n-        project_glob_changes_1.getTouchedProjectsFromProjectGlobChanges,\n+        <span class=\"hljs-comment\">// 플러그인 패턴 일치 변경 파일에 영향을주지 않도록 패치</span>\n+        <span class=\"hljs-comment\">// project_glob_changes_1.getTouchedProjectsFromProjectGlobChanges,</span>\n         touched_projects_1.getTouchedProjects,\n     ];\n     <span class=\"hljs-keyword\">const</span> touchedProjects = [];\ndiff --git a/node_modules/nx/src/project-graph/affected/locators/workspace-projects.js b/node_modules/nx/src/project-graph/affected/locators/workspace-projects.js\nindex c5aec64..edaa989 <span class=\"hljs-number\">100644</span>\n--- a/node_modules/nx/src/project-graph/affected/locators/workspace-projects.js\n+++ b/node_modules/nx/src/project-graph/affected/locators/workspace-projects.js\n@@ -<span class=\"hljs-number\">16</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">16</span>,<span class=\"hljs-number\">8</span> @@ <span class=\"hljs-keyword\">const</span> getTouchedProjects = (touchedFiles, projectGraphNodes) => {\n <span class=\"hljs-built_in\">exports</span>.getTouchedProjects = getTouchedProjects;\n <span class=\"hljs-keyword\">const</span> getImplicitlyTouchedProjects = (fileChanges, projectGraphNodes, nxJson) => {\n     <span class=\"hljs-keyword\">const</span> implicits = {\n-        <span class=\"hljs-string\">'nx.json'</span>: <span class=\"hljs-string\">'*'</span>,\n+        // nx.json이 변경된 경우 영향을받은 모든 파일에 적용하지 않도록 패치\n+        // <span class=\"hljs-string\">'nx.json'</span>: <span class=\"hljs-string\">'*'</span>,\n     };\n     <span class=\"hljs-built_in\">Object</span>.values(projectGraphNodes || {}).forEach((node) => {\n         <span class=\"hljs-keyword\">const</span> namedInputs = {\n</span></code></pre>\n<h1>🙂 마지막으로 생각해보세요</h1>\n<div class=\"content-ad\"></div>\n<p>보시다시피, 영향을 받는 프로세스는 수정된 파일 목록을 고려하는 것뿐만 아니라 다른 여러 요소를 기반으로 프로젝트 목록을 계산합니다.</p>\n<p>이로 인해 조사가 항상 간단하지는 않고 종종 영향을 받는 모든 상황으로 이어질 수 있습니다.</p>\n<p>일부 부분을 명확히 하고 영향을 받는 프로세스를 더 잘 이해하기 위한 핵심을 제공했기를 바랍니다.</p>\n<p>미래에는 종속성 업데이트에 의해 영향을 받는 프로젝트와 같은 옵션 목록을 일반화하여 영향을 받는 프로세스에 대한 더 많은 사용자 정의 옵션이 있기를 희망합니다.</p>\n<div class=\"content-ad\"></div>\n<p>곧 시작됩니다 🚀</p>\n<h1>관련된</h1>\n</body>\n</html>\n"},"__N_SSG":true}