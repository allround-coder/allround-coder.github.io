{"pageProps":{"post":{"title":"이렇게 Python 함수 작성 안 하면 PR 거부","description":"","date":"2024-06-23 13:30","slug":"2024-06-23-WritePythonFunctionsLikeThisOrIllRejectYourPullRequest","content":"\n\n\n<img src=\"/assets/img/2024-06-23-WritePythonFunctionsLikeThisOrIllRejectYourPullRequest_0.png\" />\n\n이건 나의 직장에서 기술 리드로부터 받았던 에너지였죠. 사실 나도 이 시점에서 그와 동의합니다.\n\n# 우리에게 파이썬 함수를 어떻게 작성하는지 배웠는가\n\n다음은 간단한 매개변수를 사용하는 함수입니다:\n\n\n<div class=\"content-ad\"></div>\n\n- 숫자 목록 num_list가 있습니다.\n- 숫자 num이 있습니다.\n- num_list에 있는 모든 숫자에 num을 더한 새로운 목록을 반환합니다.\n\n```js\ndef add_all(num_list, num):\n    output = []\n    for n in num_list:\n        output.append(n + num)\n    return output\n\nx = add_all([3, 4, 5], 10)\n\nprint(x) # 13, 14, 15\n```\n\n문제 - 첫눈에 알기 어려운 것들:\n\n- 이 함수가 어떤 데이터 유형을 사용하는지\n- 이 함수가 어떤 데이터 유형을 반환하는지\n\n<div class=\"content-ad\"></div>\n\n음, 코드를 읽으면 num_list가 숫자의 목록이고 num은 숫자이며, 함수가 숫자의 목록을 반환한다는 것을 유추할 수 있다는 걸 알 수 있어. 그러나 이건 즉시 알 수 있는 게 아니잖아.\n\n그리고 대규모 제품용 앱에서는 수천 개의 함수가 처리되어야 한다. 정말 그 추가 시간을 들여서 데이터 유형을 이해하고 추론해야 할까?\n\n# 타입 주석 (타입 힌트)이 구해줍니다 \n\n참고 - 우리는 이것을 타입 힌트 또는 타입 주석이라고 부를 수 있어\n\n<div class=\"content-ad\"></div>\n\n그리고 위의 함수에 몇 가지 타입 힌트를 추가해 봅시다.\n\n```python\nfrom typing import List, Union\n\ndef add_all(\n    num_list: List[Union[int, float]],\n    num: Union[int, float]\n) -> List[Union[int, float]]:\n    \"\"\"\n    num_list의 모든 숫자에 num을 추가합니다  \n\n    inputs:\n        num_list: 숫자 리스트\n        num: 숫자\n    \"\"\"\n    output = []\n    for n in num_list:\n        output.append(n + num)\n    return output\n\nx: List[Union[int, float]] = add_all([3, 4, 5], 10)\n\nprint(x) # 13, 14, 15\n```\n\n- Union[int, float]은 int 또는 float 중 하나를 의미합니다.\n- List[Union[int, float]]은 정수 또는 소수의 리스트를 의미합니다.\n\nnum_list: List[Union[int, float]]은 num_list가 숫자 (정수 또는 소수)의 리스트여야 함을 의미합니다.\n\n<div class=\"content-ad\"></div>\n\n비슷하게, `num: Union[int, float]`은 num이 정수 또는 부동 소수점 숫자여야 함을 의미합니다.\n\n마지막으로, `- List[Union[int, float]]`은 이 함수가 정수 또는 부동 소수점 숫자들의 리스트를 반환해야 함을 의미합니다.\n\n참고 - 함수의 첫 줄에 우리 함수가 무엇을 하는지 간단히 설명하고 문서화하기 위해 (세 개의 따옴표로 둘러싼 것) 독스트링을 추가합니다.\n\n# 네, 이렇게 함수를 작성해야 합니다. 그렇지 않으면 PR이 거부될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n왜 기술 리드가 우리에게 함수를 이렇게 작성하라고 요청하는지 알려드릴게요:\n\n- 변수의 데이터 유형이 한눈에 알 수 있습니다.\n- 이를 유추할 필요가 없어져 시간을 절약할 수 있습니다.\n- 함수가 반환해야 하는 것을 한눈에 알 수 있습니다.\n- 독스트링을 통해 함수가 하는 일을 코드를 살펴보지 않고도 한눈에 알 수 있습니다. 더 많은 시간을 절약할 수 있죠.\n- 이렇게 함으로써 함수가 장기적으로 유지보수하기에 더 적합해집니다.\n\n# 더 널리 사용되는 타입 힌트들\n\n기본 사항:\n\n<div class=\"content-ad\"></div>\n\n```js\na: int = 5\n\nb: float = 3.14\n\nc: bool = True\n\nd: str = 'apple orange pear'\n```\n\n리스트, 사전, 튜플, 셋:\n\n```js\nfrom typing import List, Dict, Tuple, Set\n\n# 정수 리스트\na: List[int] = [1, 2, 3]  \n\n# 문자열 리스트\nb: List[str] = ['apple', 'orange'] \n\n# 키가 문자열이고 값이 정수인 사전\nc: Dict[str, int] = {'apple':4, 'orange':5}\n\n# 키가 정수이고 값이 부울인 사전\nd: Dict[int, bool] = {1: True, 2: False, 3: True}\n```\n\n변수가 정수 또는 부동 소수점 숫자일 수 있는 경우 Unions을 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfrom typing import Union, Dict\n\ndef add10(number: Union[int, float]):\n    # number은 정수 또는 부동소수점이어야 합니다\n    pass\n\ndef test(d: Dict[str, Union[int, float, bool]]):\n    # d는 사전이어야 합니다\n    # d의 키는 모두 문자열이어야 합니다\n    # d의 값은 정수, 부동소수점 또는 부울이어야 합니다\n    pass\n```\n\n대안적인 방법으로 `Union`을 사용하는 대신에 다음과 같이 작성할 수 있습니다:\n\n```js\nfrom typing import Dict\n\ndef add10(number: int | float):\n    # number은 정수 또는 부동소수점이어야 합니다\n    pass\n\ndef test(d: Dict[str, int | float | bool]):\n    # d는 사전이어야 합니다\n    # d의 키는 모두 문자열이어야 합니다\n    # d의 값은 정수, 부동소수점 또는 부울이어야 합니다\n    pass\n```\n\n^ `Union[int, float]` 대신에 `int | float`을 사용하는 대체 방법입니다. 저는 이 방법을 더 우아하게 보이고(그리고 덜 타이핑해야 하기 때문에) 주로 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n아래는 옵셔널 변수에 대한 예제입니다:\n\n```python\nfrom typing import Optional\nfrom random import random\n\ndef test() -> Optional[int]:\n    \"\"\"\n    50%의 확률로 1000 반환\n    50%의 확률로 None 반환\n    \"\"\"\n    random_float: float = random()\n\n    if random_float > 0.5:\n        return 1000\n\n    return None\n```\n\n여기서 Optional[int]는 변수가 int 또는 None 중 하나일 수 있음을 나타냅니다.\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n네, 정말이죠. 만약 우리 중 누군가가 타입 주석이나 독스트링을 추가하지 않고 코드를 작성한다면, 우리는 리더들로부터 그것을 추가하라는 의견을 받게 될 거에요.\n\n그것이 나쁜 일은 아니에요, 왜냐하면 코드는 읽기 쉽도록 만들어졌으니까요.\n\n# 만약 크리에이터로서 저를 지원하고 싶다면\n\n- 제 책을 사 주세요! — 101 Things I Never Knew About Python\n- 어디서 찾을 수 있나요: https://payhip.com/b/vywcf\n- 이 이야기에 50번 박수를 보내주세요\n- 여러분의 생각을 나에게 말씀해 주세요\n- 이야기에서 가장 좋아하는 부분을 강조해 주세요\n\n<div class=\"content-ad\"></div>\n\n감사합니다! 이런 작은 조치들이 큰 도움이 되고, 정말 감사드립니다!\n\nYouTube: [https://www.youtube.com/@zlliu246](https://www.youtube.com/@zlliu246)\n\nLinkedIn: [https://www.linkedin.com/in/zlliu/](https://www.linkedin.com/in/zlliu/)","ogImage":{"url":"/assets/img/2024-06-23-WritePythonFunctionsLikeThisOrIllRejectYourPullRequest_0.png"},"coverImage":"/assets/img/2024-06-23-WritePythonFunctionsLikeThisOrIllRejectYourPullRequest_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-23-WritePythonFunctionsLikeThisOrIllRejectYourPullRequest_0.png\">\n<p>이건 나의 직장에서 기술 리드로부터 받았던 에너지였죠. 사실 나도 이 시점에서 그와 동의합니다.</p>\n<h1>우리에게 파이썬 함수를 어떻게 작성하는지 배웠는가</h1>\n<p>다음은 간단한 매개변수를 사용하는 함수입니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>숫자 목록 num_list가 있습니다.</li>\n<li>숫자 num이 있습니다.</li>\n<li>num_list에 있는 모든 숫자에 num을 더한 새로운 목록을 반환합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">add_all</span>(num_list, num):\n    output = []\n    <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">num_list</span>:\n        output.<span class=\"hljs-title function_\">append</span>(n + num)\n    <span class=\"hljs-keyword\">return</span> output\n\nx = <span class=\"hljs-title function_\">add_all</span>([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">10</span>)\n\n<span class=\"hljs-title function_\">print</span>(x) # <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>\n</code></pre>\n<p>문제 - 첫눈에 알기 어려운 것들:</p>\n<ul>\n<li>이 함수가 어떤 데이터 유형을 사용하는지</li>\n<li>이 함수가 어떤 데이터 유형을 반환하는지</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>음, 코드를 읽으면 num_list가 숫자의 목록이고 num은 숫자이며, 함수가 숫자의 목록을 반환한다는 것을 유추할 수 있다는 걸 알 수 있어. 그러나 이건 즉시 알 수 있는 게 아니잖아.</p>\n<p>그리고 대규모 제품용 앱에서는 수천 개의 함수가 처리되어야 한다. 정말 그 추가 시간을 들여서 데이터 유형을 이해하고 추론해야 할까?</p>\n<h1>타입 주석 (타입 힌트)이 구해줍니다</h1>\n<p>참고 - 우리는 이것을 타입 힌트 또는 타입 주석이라고 부를 수 있어</p>\n<div class=\"content-ad\"></div>\n<p>그리고 위의 함수에 몇 가지 타입 힌트를 추가해 봅시다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>, <span class=\"hljs-type\">Union</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_all</span>(<span class=\"hljs-params\">\n    num_list: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Union</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>]],\n    num: <span class=\"hljs-type\">Union</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>]\n</span>) -> <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Union</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>]]:\n    <span class=\"hljs-string\">\"\"\"\n    num_list의 모든 숫자에 num을 추가합니다  \n\n    inputs:\n        num_list: 숫자 리스트\n        num: 숫자\n    \"\"\"</span>\n    output = []\n    <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> num_list:\n        output.append(n + num)\n    <span class=\"hljs-keyword\">return</span> output\n\nx: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Union</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>]] = add_all([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">10</span>)\n\n<span class=\"hljs-built_in\">print</span>(x) <span class=\"hljs-comment\"># 13, 14, 15</span>\n</code></pre>\n<ul>\n<li>Union[int, float]은 int 또는 float 중 하나를 의미합니다.</li>\n<li>List[Union[int, float]]은 정수 또는 소수의 리스트를 의미합니다.</li>\n</ul>\n<p>num_list: List[Union[int, float]]은 num_list가 숫자 (정수 또는 소수)의 리스트여야 함을 의미합니다.</p>\n<div class=\"content-ad\"></div>\n<p>비슷하게, <code>num: Union[int, float]</code>은 num이 정수 또는 부동 소수점 숫자여야 함을 의미합니다.</p>\n<p>마지막으로, <code>- List[Union[int, float]]</code>은 이 함수가 정수 또는 부동 소수점 숫자들의 리스트를 반환해야 함을 의미합니다.</p>\n<p>참고 - 함수의 첫 줄에 우리 함수가 무엇을 하는지 간단히 설명하고 문서화하기 위해 (세 개의 따옴표로 둘러싼 것) 독스트링을 추가합니다.</p>\n<h1>네, 이렇게 함수를 작성해야 합니다. 그렇지 않으면 PR이 거부될 것입니다.</h1>\n<div class=\"content-ad\"></div>\n<p>왜 기술 리드가 우리에게 함수를 이렇게 작성하라고 요청하는지 알려드릴게요:</p>\n<ul>\n<li>변수의 데이터 유형이 한눈에 알 수 있습니다.</li>\n<li>이를 유추할 필요가 없어져 시간을 절약할 수 있습니다.</li>\n<li>함수가 반환해야 하는 것을 한눈에 알 수 있습니다.</li>\n<li>독스트링을 통해 함수가 하는 일을 코드를 살펴보지 않고도 한눈에 알 수 있습니다. 더 많은 시간을 절약할 수 있죠.</li>\n<li>이렇게 함으로써 함수가 장기적으로 유지보수하기에 더 적합해집니다.</li>\n</ul>\n<h1>더 널리 사용되는 타입 힌트들</h1>\n<p>기본 사항:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">a</span>: int = <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-attr\">b</span>: float = <span class=\"hljs-number\">3.14</span>\n\n<span class=\"hljs-attr\">c</span>: bool = <span class=\"hljs-title class_\">True</span>\n\n<span class=\"hljs-attr\">d</span>: str = <span class=\"hljs-string\">'apple orange pear'</span>\n</code></pre>\n<p>리스트, 사전, 튜플, 셋:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">List</span>, <span class=\"hljs-title class_\">Dict</span>, <span class=\"hljs-title class_\">Tuple</span>, <span class=\"hljs-title class_\">Set</span>\n\n# 정수 리스트\n<span class=\"hljs-attr\">a</span>: <span class=\"hljs-title class_\">List</span>[int] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]  \n\n# 문자열 리스트\n<span class=\"hljs-attr\">b</span>: <span class=\"hljs-title class_\">List</span>[str] = [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'orange'</span>] \n\n# 키가 문자열이고 값이 정수인 사전\n<span class=\"hljs-attr\">c</span>: <span class=\"hljs-title class_\">Dict</span>[str, int] = {<span class=\"hljs-string\">'apple'</span>:<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">'orange'</span>:<span class=\"hljs-number\">5</span>}\n\n# 키가 정수이고 값이 부울인 사전\n<span class=\"hljs-attr\">d</span>: <span class=\"hljs-title class_\">Dict</span>[int, bool] = {<span class=\"hljs-number\">1</span>: <span class=\"hljs-title class_\">True</span>, <span class=\"hljs-number\">2</span>: <span class=\"hljs-title class_\">False</span>, <span class=\"hljs-number\">3</span>: <span class=\"hljs-title class_\">True</span>}\n</code></pre>\n<p>변수가 정수 또는 부동 소수점 숫자일 수 있는 경우 Unions을 사용합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Union</span>, <span class=\"hljs-title class_\">Dict</span>\n\ndef <span class=\"hljs-title function_\">add10</span>(<span class=\"hljs-attr\">number</span>: <span class=\"hljs-title class_\">Union</span>[int, float]):\n    # number은 정수 또는 부동소수점이어야 합니다\n    pass\n\ndef <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-attr\">d</span>: <span class=\"hljs-title class_\">Dict</span>[str, <span class=\"hljs-title class_\">Union</span>[int, float, bool]]):\n    # d는 사전이어야 합니다\n    # d의 키는 모두 문자열이어야 합니다\n    # d의 값은 정수, 부동소수점 또는 부울이어야 합니다\n    pass\n</code></pre>\n<p>대안적인 방법으로 <code>Union</code>을 사용하는 대신에 다음과 같이 작성할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Dict</span>\n\ndef <span class=\"hljs-title function_\">add10</span>(<span class=\"hljs-attr\">number</span>: int | float):\n    # number은 정수 또는 부동소수점이어야 합니다\n    pass\n\ndef <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-attr\">d</span>: <span class=\"hljs-title class_\">Dict</span>[str, int | float | bool]):\n    # d는 사전이어야 합니다\n    # d의 키는 모두 문자열이어야 합니다\n    # d의 값은 정수, 부동소수점 또는 부울이어야 합니다\n    pass\n</code></pre>\n<p>^ <code>Union[int, float]</code> 대신에 <code>int | float</code>을 사용하는 대체 방법입니다. 저는 이 방법을 더 우아하게 보이고(그리고 덜 타이핑해야 하기 때문에) 주로 사용합니다.</p>\n<div class=\"content-ad\"></div>\n<p>아래는 옵셔널 변수에 대한 예제입니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Optional</span>\n<span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> random\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test</span>() -> <span class=\"hljs-type\">Optional</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">\"\"\"\n    50%의 확률로 1000 반환\n    50%의 확률로 None 반환\n    \"\"\"</span>\n    random_float: <span class=\"hljs-built_in\">float</span> = random()\n\n    <span class=\"hljs-keyword\">if</span> random_float > <span class=\"hljs-number\">0.5</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1000</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n</code></pre>\n<p>여기서 Optional[int]는 변수가 int 또는 None 중 하나일 수 있음을 나타냅니다.</p>\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>네, 정말이죠. 만약 우리 중 누군가가 타입 주석이나 독스트링을 추가하지 않고 코드를 작성한다면, 우리는 리더들로부터 그것을 추가하라는 의견을 받게 될 거에요.</p>\n<p>그것이 나쁜 일은 아니에요, 왜냐하면 코드는 읽기 쉽도록 만들어졌으니까요.</p>\n<h1>만약 크리에이터로서 저를 지원하고 싶다면</h1>\n<ul>\n<li>제 책을 사 주세요! — 101 Things I Never Knew About Python</li>\n<li>어디서 찾을 수 있나요: <a href=\"https://payhip.com/b/vywcf\" rel=\"nofollow\" target=\"_blank\">https://payhip.com/b/vywcf</a></li>\n<li>이 이야기에 50번 박수를 보내주세요</li>\n<li>여러분의 생각을 나에게 말씀해 주세요</li>\n<li>이야기에서 가장 좋아하는 부분을 강조해 주세요</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>감사합니다! 이런 작은 조치들이 큰 도움이 되고, 정말 감사드립니다!</p>\n<p>YouTube: <a href=\"https://www.youtube.com/@zlliu246\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/@zlliu246</a></p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/zlliu/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/zlliu/</a></p>\n</body>\n</html>\n"},"__N_SSG":true}