{"pageProps":{"post":{"title":"실생활 비유로 이해하는 JavaScript call, apply, bind 메서드 사용 방법","description":"","date":"2024-06-22 06:09","slug":"2024-06-22-UnderstandingJavaScriptscallapplyandbindMethodswithReal-LifeAnalogies","content":"\n\n\n![image](/assets/img/2024-06-22-UnderstandingJavaScriptscallapplyandbindMethodswithReal-LifeAnalogies_0.png)\n\n자바스크립트는 함수가 작동하는 문맥(this)을 제어하기 위해 call, apply, bind 세 가지 강력한 메서드를 제공합니다. 이러한 메서드를 이해하면 유연하고 재사용 가능한 코드를 작성할 수 있는 능력이 크게 향상됩니다. 각 메서드를 간단한 설명과 현실적인 비유와 함께 살펴보겠습니다.\n\n# call\n\ncall은 한 객체로부터 메서드를 빌려와 다른 객체에 즉시 사용할 수 있도록 합니다.\n\n\n<div class=\"content-ad\"></div>\n\n안녕하세요!\n\n아래 예시를 보시면 함수 호출 시 사용되는 `table` 태그를 Markdown 형식으로 변경하였습니다.\n\n예시:\n\nAlice가 인사하는 메소드를 가지고 있다고 상상해봅시다:\n\n```js\nconst alice = {\n    name: 'Alice',\n    sayHello: function(greeting) {\n        console.log(greeting + ', ' + this.name);\n    }\n};\n\nalice.sayHello('Hi');  // 결과: \"Hi, Alice\"\n```\n\n<div class=\"content-ad\"></div>\n\n밥이 인사를 하고 싶지만 sayHello 메서드가 없어요. call을 사용하면 앨리스의 메서드를 빌려와서 즉시 사용할 수 있어요:\n\n```js\nconst bob = { name: 'Bob' };\n\nalice.sayHello.call(bob, 'Hello');  // 출력: \"Hello, Bob\"\n```\n\n유사성: call은 앨리스의 메서드 책을 빌려와서 바로 사용하여 밥이 누군가에게 인사할 수 있게 도와주는 것처럼 생각해 보세요.\n\n# apply\n\n<div class=\"content-ad\"></div>\n\napply는 call과 비슷하지만, 인수를 배열로 전달할 수 있습니다.\n\n```js\nfunction.apply(thisArg, [argsArray])\n```\n\n예시:\n\n같은 인사 방법을 사용하면, 만약 인사말이 배열에 저장되어 있다면 apply를 사용할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nconst args = ['안녕'];\n\nalice.sayHello.apply(bob, args);  // 출력: \"안녕, Bob\"\n```\n\n비유: apply는 앨리스의 메서드 책을 빌리는 것처럼 즉시 사용하는 것이지만 개별 지시사항을 주는 대신에 지시사항 목록을 전달합니다.\n\n# bind\n\nbind는 제공된 값으로 this 값을 설정하고 주어진 인수 시퀀스로 호출될 때 새 함수를 생성합니다. call 및 apply와 달리 bind는 함수를 즉시 실행하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction.bind(thisArg, arg1, arg2, ...)\n```\n\n예시:\n\n만약 나중에 Bob에게 인사를 준비하고 싶다면, bind를 사용하여 그렇게 할 수 있어요.\n\n```js\nconst greetBobLater = alice.sayHello.bind(bob, '좋은 아침');\n\ngreetBobLater();  // 출력: \"좋은 아침, Bob\"\n```\n\n<div class=\"content-ad\"></div>\n\n비유: bind는 밥을 위해 알람 시계를 설정하는 것과 같습니다. 인사말을 미리 설정하고, 시간이 되면 밥이 사용할 수 있습니다.\n\n# 주요 차이점\n\n— 호출 시기:\n\n- call과 apply는 함수를 즉시 호출합니다.\n- bind는 나중에 호출할 수 있는 새로운 함수를 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n— 인수 처리:\n\n- call은 개별적인 인수를 사용합니다.\n- apply는 배열로 인수를 사용합니다.\n- bind는 새 함수를 호출할 때 제공할 수 있는 새 함수를 위한 미리 설정된 인수를 사용할 수 있습니다.\n\n## 사용 사례\n\n- call: 함수를 즉시 호출하고 this 컨텍스트를 제어하고 개별적으로 인수를 전달하고 싶을 때 사용합니다. 예: 하나의 객체에서 메서드를 빌려와서 다른 객체에서 즉시 사용할 때.\n- apply: 함수를 즉시 호출하고 배열에 있는 인수를 사용해야 할 때 사용합니다. 예: 배열에 저장된 매개변수 목록을 사용하는 방법.\n- bind: 특정한 this 컨텍스트와 선택적으로 미리 설정된 인수를 사용하여 나중에 호출할 수 있는 함수를 만들어야 할 때 사용합니다. 예: 이벤트 핸들러나 콜백을 위해 메서드를 미리 설정하는 경우.\n\n<div class=\"content-ad\"></div>\n\n# 간단한 비유를 통한 요약:\n\n- call: \"앨리스야, 밥이 지금 `sayHello` 메서드를 빌려와서 사용해도 될까?\" (즉시 사용)\n- apply: call과 동일하지만 목록 형태의 지시사항 제공: \"여기, 밥, 여기 있는 목록 [`안녕`]을 사용해서 인사해봐.\"\n- bind: \"앨리스, 밥이 `좋은 아침`이라는 것으로 나준비를 해놓을 수 있을까?\" (나중 사용을 위한 준비)\n\n# 결론\n\nJavaScript에서 call, apply 및 bind를 이해하면 함수 실행과 this 바인딩에 대한 더 큰 제어력을 가질 수 있습니다. 이러한 방법은 객체 지향 및 함수형 프로그래밍 패턴에서 특히 유용하며 코드의 유연성과 재사용성을 향상시킵니다. 간단한 비유를 사용하여, call과 apply는 즉시 메서드를 빌려와서 사용하는 것과 유사하며, bind는 미래 사용을 위해 메서드를 준비하는 것과 같습니다.\n\n<div class=\"content-ad\"></div>\n\n초보자든 숙련된 개발자든, 이러한 방법을 숙달하는 것은 더 견고하고 유지보수가 쉬운 JavaScript 코드를 작성하는 데 도움이 될 것입니다. 즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-06-22-UnderstandingJavaScriptscallapplyandbindMethodswithReal-LifeAnalogies_0.png"},"coverImage":"/assets/img/2024-06-22-UnderstandingJavaScriptscallapplyandbindMethodswithReal-LifeAnalogies_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-22-UnderstandingJavaScriptscallapplyandbindMethodswithReal-LifeAnalogies_0.png\" alt=\"image\"></p>\n<p>자바스크립트는 함수가 작동하는 문맥(this)을 제어하기 위해 call, apply, bind 세 가지 강력한 메서드를 제공합니다. 이러한 메서드를 이해하면 유연하고 재사용 가능한 코드를 작성할 수 있는 능력이 크게 향상됩니다. 각 메서드를 간단한 설명과 현실적인 비유와 함께 살펴보겠습니다.</p>\n<h1>call</h1>\n<p>call은 한 객체로부터 메서드를 빌려와 다른 객체에 즉시 사용할 수 있도록 합니다.</p>\n<div class=\"content-ad\"></div>\n<p>안녕하세요!</p>\n<p>아래 예시를 보시면 함수 호출 시 사용되는 <code>table</code> 태그를 Markdown 형식으로 변경하였습니다.</p>\n<p>예시:</p>\n<p>Alice가 인사하는 메소드를 가지고 있다고 상상해봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> alice = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Alice'</span>,\n    <span class=\"hljs-attr\">sayHello</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">greeting</span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting + <span class=\"hljs-string\">', '</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);\n    }\n};\n\nalice.<span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-string\">'Hi'</span>);  <span class=\"hljs-comment\">// 결과: \"Hi, Alice\"</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>밥이 인사를 하고 싶지만 sayHello 메서드가 없어요. call을 사용하면 앨리스의 메서드를 빌려와서 즉시 사용할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> bob = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Bob'</span> };\n\nalice.<span class=\"hljs-property\">sayHello</span>.<span class=\"hljs-title function_\">call</span>(bob, <span class=\"hljs-string\">'Hello'</span>);  <span class=\"hljs-comment\">// 출력: \"Hello, Bob\"</span>\n</code></pre>\n<p>유사성: call은 앨리스의 메서드 책을 빌려와서 바로 사용하여 밥이 누군가에게 인사할 수 있게 도와주는 것처럼 생각해 보세요.</p>\n<h1>apply</h1>\n<div class=\"content-ad\"></div>\n<p>apply는 call과 비슷하지만, 인수를 배열로 전달할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span>.<span class=\"hljs-title function_\">apply</span>(thisArg, [argsArray])\n</code></pre>\n<p>예시:</p>\n<p>같은 인사 방법을 사용하면, 만약 인사말이 배열에 저장되어 있다면 apply를 사용할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> args = [<span class=\"hljs-string\">'안녕'</span>];\n\nalice.<span class=\"hljs-property\">sayHello</span>.<span class=\"hljs-title function_\">apply</span>(bob, args);  <span class=\"hljs-comment\">// 출력: \"안녕, Bob\"</span>\n</code></pre>\n<p>비유: apply는 앨리스의 메서드 책을 빌리는 것처럼 즉시 사용하는 것이지만 개별 지시사항을 주는 대신에 지시사항 목록을 전달합니다.</p>\n<h1>bind</h1>\n<p>bind는 제공된 값으로 this 값을 설정하고 주어진 인수 시퀀스로 호출될 때 새 함수를 생성합니다. call 및 apply와 달리 bind는 함수를 즉시 실행하지 않습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span>.<span class=\"hljs-title function_\">bind</span>(thisArg, arg1, arg2, ...)\n</code></pre>\n<p>예시:</p>\n<p>만약 나중에 Bob에게 인사를 준비하고 싶다면, bind를 사용하여 그렇게 할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> greetBobLater = alice.<span class=\"hljs-property\">sayHello</span>.<span class=\"hljs-title function_\">bind</span>(bob, <span class=\"hljs-string\">'좋은 아침'</span>);\n\n<span class=\"hljs-title function_\">greetBobLater</span>();  <span class=\"hljs-comment\">// 출력: \"좋은 아침, Bob\"</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>비유: bind는 밥을 위해 알람 시계를 설정하는 것과 같습니다. 인사말을 미리 설정하고, 시간이 되면 밥이 사용할 수 있습니다.</p>\n<h1>주요 차이점</h1>\n<p>— 호출 시기:</p>\n<ul>\n<li>call과 apply는 함수를 즉시 호출합니다.</li>\n<li>bind는 나중에 호출할 수 있는 새로운 함수를 생성합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>— 인수 처리:</p>\n<ul>\n<li>call은 개별적인 인수를 사용합니다.</li>\n<li>apply는 배열로 인수를 사용합니다.</li>\n<li>bind는 새 함수를 호출할 때 제공할 수 있는 새 함수를 위한 미리 설정된 인수를 사용할 수 있습니다.</li>\n</ul>\n<h2>사용 사례</h2>\n<ul>\n<li>call: 함수를 즉시 호출하고 this 컨텍스트를 제어하고 개별적으로 인수를 전달하고 싶을 때 사용합니다. 예: 하나의 객체에서 메서드를 빌려와서 다른 객체에서 즉시 사용할 때.</li>\n<li>apply: 함수를 즉시 호출하고 배열에 있는 인수를 사용해야 할 때 사용합니다. 예: 배열에 저장된 매개변수 목록을 사용하는 방법.</li>\n<li>bind: 특정한 this 컨텍스트와 선택적으로 미리 설정된 인수를 사용하여 나중에 호출할 수 있는 함수를 만들어야 할 때 사용합니다. 예: 이벤트 핸들러나 콜백을 위해 메서드를 미리 설정하는 경우.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>간단한 비유를 통한 요약:</h1>\n<ul>\n<li>call: \"앨리스야, 밥이 지금 <code>sayHello</code> 메서드를 빌려와서 사용해도 될까?\" (즉시 사용)</li>\n<li>apply: call과 동일하지만 목록 형태의 지시사항 제공: \"여기, 밥, 여기 있는 목록 [<code>안녕</code>]을 사용해서 인사해봐.\"</li>\n<li>bind: \"앨리스, 밥이 <code>좋은 아침</code>이라는 것으로 나준비를 해놓을 수 있을까?\" (나중 사용을 위한 준비)</li>\n</ul>\n<h1>결론</h1>\n<p>JavaScript에서 call, apply 및 bind를 이해하면 함수 실행과 this 바인딩에 대한 더 큰 제어력을 가질 수 있습니다. 이러한 방법은 객체 지향 및 함수형 프로그래밍 패턴에서 특히 유용하며 코드의 유연성과 재사용성을 향상시킵니다. 간단한 비유를 사용하여, call과 apply는 즉시 메서드를 빌려와서 사용하는 것과 유사하며, bind는 미래 사용을 위해 메서드를 준비하는 것과 같습니다.</p>\n<div class=\"content-ad\"></div>\n<p>초보자든 숙련된 개발자든, 이러한 방법을 숙달하는 것은 더 견고하고 유지보수가 쉬운 JavaScript 코드를 작성하는 데 도움이 될 것입니다. 즐거운 코딩하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}