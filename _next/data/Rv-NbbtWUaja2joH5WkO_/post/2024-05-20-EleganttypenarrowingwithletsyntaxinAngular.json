{"pageProps":{"post":{"title":"앵귤러에서 let 구문을 사용해 타입 축소하는 방법","description":"","date":"2024-05-20 22:15","slug":"2024-05-20-EleganttypenarrowingwithletsyntaxinAngular","content":"\n\n![이미지](/assets/img/2024-05-20-EleganttypenarrowingwithletsyntaxinAngular_0.png)\n\nAngular 18은 아직 릴리즈되지 않았지만, 18.1 버전에 이미 새로운 강력한 추가 기능이 기다리고 있습니다. 바로 템플릿 로컬 변수 또는 @let 구문이라고도 알려진 기능입니다.\n\n간단히 말해서, 이제 템플릿에서 JavaScript 파일과 동일한 방식으로 보조 로컬 변수를 정의할 수 있게 됩니다.\n\n가능한 응용 중 하나는 AsyncPipe를 사용하여 구독하는 스트림에서 값 unwrap하는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n현재 솔루션\n\n\n```js\n<ng-container *ngIf=\"data$ | async as data\">\n  <p>{ data }</p>\n</ng-container>\n```\n\n\n```js\n<ng-container *ngIf=\"{ data: data$ | async } as vm\">\n  <p>{ vm.data }</p>\n</ng-container>\n```\n\n새로운 솔루션\n\n<div class=\"content-ad\"></div>\n\n```js\n@let data = data$ | async ;\n\n<p>{ data }</p>\n```\n\n이것은 '동적' 뷰 모델 속성을 생성할 수도 있게 해줍니다. 특히, 사용자 선택에 따라 변경되는 isActive와 같은 컬렉션을 다룰 때 특히 유용합니다.\n\nEnea Jahollari의 훌륭한 기사에서 새로운 구문의 다양한 사용법에 대해 더 읽어볼 수 있습니다.\n\n언급할 가치가 있는 점은 신호의 값을 템플릿 로컬 변수에 저장할 수 있는 능력입니다. 이것은 타입 좁힘이 매우 중요합니다.\n\n<div class=\"content-ad\"></div>\n\n아래는 해당 컴포넌트를 고려해봅시다:\n\n```js\ntype AnalysisState =\n  | { status: 'pending' }\n  | { status: 'completed'; result: string };\n  \n@Component({\n  selector: 'app-analysis-card',\n  standalone: true,\n  templateUrl: './analysis-card.component.html',\n  styleUrl: './analysis-card.component.scss',\n})\nexport class AnalysisCardComponent {\n  public analysisState: AnalysisState = { status: 'pending' };\n\n  constructor() {\n    // mock change simulation\n    setTimeout(() => {\n      this.analysisState = { status: 'completed', result: 'xyz' };\n    }, 5000);\n  }\n}\n```\n\n```js\n@if (analysisState.status === \"pending\") {\n  <p>Analysis is pending</p>\n} @else {\n  <p>Analysis completed with result: { analysisState.result }</p>\n}\n```\n\n새로운 제어 흐름 구문을 통해 이전의 *ngIf 디렉티브로는 불가능했던 적절한 타입 축소가 가능해졌습니다. 상세 내용은 제 이전 글 중 하나에서 확인하실 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n그러나, 컴포넌트 상태를 처리하기 위해 시그널을 사용하는 경우:\n\n```js\n@Component({\n  selector: 'app-analysis-card',\n  standalone: true,\n  templateUrl: './analysis-card.component.html',\n  styleUrl: './analysis-card.component.scss',\n})\nexport class AnalysisCardComponent {\n  public analysisState: WritableSignal<AnalysisState> = signal({\n    status: 'pending',\n  });\n\n  constructor() {\n    // 모의 변경 시뮬레이션\n    setTimeout(() => {\n      this.analysisState.set({ status: 'completed', result: 'xyz' });\n    }, 5000);\n  }\n}\n```\n\n타입 추론이 작동하지 않습니다:\n\n```js\n@if (analysisState().status === \"pending\") {\n  <p>분석 대기 중</p>\n} @else {\n  <!-- 'result' 속성이 'AnalysisState' 타입에 존재하지 않습니다. -->\n  <p>분석이 완료되었습니다. 결과: { analysisState().result }</p>\n}\n```\n\n<div class=\"content-ad\"></div>\n\n두 가지 해결 방법이 있습니다:\n\n- 시그널 값과 함께 게터를 사용하세요\n\n```js\n@Component({\n  selector: 'app-analysis-card',\n  standalone: true,\n  templateUrl: './analysis-card.component.html',\n  styleUrl: './analysis-card.component.scss',\n})\nexport class AnalysisCardComponent {\n  public _analysisState: WritableSignal<AnalysisState> = signal({\n    status: 'pending',\n  });\n\n  get analysisState() {\n    return this._analysisState();\n  }\n\n  constructor() {\n    // 모의 변경 시뮬레이션\n    setTimeout(() => {\n      this._analysisState.set({ status: 'completed', result: 'xyz' });\n    }, 5000);\n  }\n}\n```\n\n```js\n@if (analysisState.status === \"pending\") {\n  <p>분석 대기 중</p>\n} @else {\n  <p>분석 완료 및 결과: { analysisState.result }</p>\n}\n```\n\n<div class=\"content-ad\"></div>\n\n- 보조 if 블록으로 신호의 값 언래핑하기\n\n```js\n@Component({\n  selector: 'app-analysis-card',\n  standalone: true,\n  templateUrl: './analysis-card.component.html',\n  styleUrl: './analysis-card.component.scss',\n})\nexport class AnalysisCardComponent {\n  public analysisState: WritableSignal<AnalysisState> = signal({\n    status: 'pending',\n  });\n\n  constructor() {\n    // mock change simulation\n    setTimeout(() => {\n      this.analysisState.set({ status: 'completed', result: 'xyz' });\n    }, 5000);\n  }\n}\n```\n\n```js\n@if (analysisState(); as analysisState) {\n  @if (analysisState.status === \"pending\") {\n    <p>Analysis is pending</p>\n  } @else {\n    <p>Analysis completed with result: { analysisState.result }</p>\n  }\n}\n```\n\n새로운 방법으로 템플릿 지역 변수를 만드는 방법을 소개했으므로 목표를 달성하는 더 우아한 방법이 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nanalysisState = analysisState();\n\nif (analysisState.status === \"pending\") {\n  console.log(\"Analysis is pending\");\n} else {\n  console.log(`Analysis completed with result: ${analysisState.result}`);\n}\n```\n\nThe `analysisState` variable now holds the result of the `analysisState()` function call. If the status is \"pending,\" a message saying \"Analysis is pending\" will be logged. If the status is anything else, a message saying \"Analysis completed with result: \" followed by the actual result will be logged.\n\nThank you, and have a great day! 😊\n","ogImage":{"url":"/assets/img/2024-05-20-EleganttypenarrowingwithletsyntaxinAngular_0.png"},"coverImage":"/assets/img/2024-05-20-EleganttypenarrowingwithletsyntaxinAngular_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-20-EleganttypenarrowingwithletsyntaxinAngular_0.png\" alt=\"이미지\"></p>\n<p>Angular 18은 아직 릴리즈되지 않았지만, 18.1 버전에 이미 새로운 강력한 추가 기능이 기다리고 있습니다. 바로 템플릿 로컬 변수 또는 @let 구문이라고도 알려진 기능입니다.</p>\n<p>간단히 말해서, 이제 템플릿에서 JavaScript 파일과 동일한 방식으로 보조 로컬 변수를 정의할 수 있게 됩니다.</p>\n<p>가능한 응용 중 하나는 AsyncPipe를 사용하여 구독하는 스트림에서 값 unwrap하는 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>현재 솔루션</p>\n<pre><code class=\"hljs language-js\">&#x3C;ng-container *ngIf=<span class=\"hljs-string\">\"data$ | async as data\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{ data }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n&#x3C;/ng-container>\n</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;ng-container *ngIf=<span class=\"hljs-string\">\"{ data: data$ | async } as vm\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{ vm.data }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n&#x3C;/ng-container>\n</code></pre>\n<p>새로운 솔루션</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">let</span> data = data$ | <span class=\"hljs-keyword\">async</span> ;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{ data }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n</code></pre>\n<p>이것은 '동적' 뷰 모델 속성을 생성할 수도 있게 해줍니다. 특히, 사용자 선택에 따라 변경되는 isActive와 같은 컬렉션을 다룰 때 특히 유용합니다.</p>\n<p>Enea Jahollari의 훌륭한 기사에서 새로운 구문의 다양한 사용법에 대해 더 읽어볼 수 있습니다.</p>\n<p>언급할 가치가 있는 점은 신호의 값을 템플릿 로컬 변수에 저장할 수 있는 능력입니다. 이것은 타입 좁힘이 매우 중요합니다.</p>\n<div class=\"content-ad\"></div>\n<p>아래는 해당 컴포넌트를 고려해봅시다:</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">AnalysisState</span> =\n  | { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'pending'</span> }\n  | { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'completed'</span>; <span class=\"hljs-attr\">result</span>: string };\n  \n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-analysis-card'</span>,\n  <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./analysis-card.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrl</span>: <span class=\"hljs-string\">'./analysis-card.component.scss'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnalysisCardComponent</span> {\n  public <span class=\"hljs-attr\">analysisState</span>: <span class=\"hljs-title class_\">AnalysisState</span> = { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'pending'</span> };\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// mock change simulation</span>\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">analysisState</span> = { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'completed'</span>, <span class=\"hljs-attr\">result</span>: <span class=\"hljs-string\">'xyz'</span> };\n    }, <span class=\"hljs-number\">5000</span>);\n  }\n}\n</code></pre>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">if</span> (analysisState.<span class=\"hljs-property\">status</span> === <span class=\"hljs-string\">\"pending\"</span>) {\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Analysis is pending<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n} @<span class=\"hljs-keyword\">else</span> {\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Analysis completed with result: { analysisState.result }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n}\n</code></pre>\n<p>새로운 제어 흐름 구문을 통해 이전의 *ngIf 디렉티브로는 불가능했던 적절한 타입 축소가 가능해졌습니다. 상세 내용은 제 이전 글 중 하나에서 확인하실 수 있어요.</p>\n<div class=\"content-ad\"></div>\n<p>그러나, 컴포넌트 상태를 처리하기 위해 시그널을 사용하는 경우:</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-analysis-card'</span>,\n  <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./analysis-card.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrl</span>: <span class=\"hljs-string\">'./analysis-card.component.scss'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnalysisCardComponent</span> {\n  public <span class=\"hljs-attr\">analysisState</span>: <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;<span class=\"hljs-title class_\">AnalysisState</span>> = <span class=\"hljs-title function_\">signal</span>({\n    <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'pending'</span>,\n  });\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 모의 변경 시뮬레이션</span>\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">analysisState</span>.<span class=\"hljs-title function_\">set</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'completed'</span>, <span class=\"hljs-attr\">result</span>: <span class=\"hljs-string\">'xyz'</span> });\n    }, <span class=\"hljs-number\">5000</span>);\n  }\n}\n</code></pre>\n<p>타입 추론이 작동하지 않습니다:</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">analysisState</span>().<span class=\"hljs-property\">status</span> === <span class=\"hljs-string\">\"pending\"</span>) {\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>분석 대기 중<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n} @<span class=\"hljs-keyword\">else</span> {\n  &#x3C;!-- <span class=\"hljs-string\">'result'</span> 속성이 <span class=\"hljs-string\">'AnalysisState'</span> 타입에 존재하지 않습니다. -->\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>분석이 완료되었습니다. 결과: { analysisState().result }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>두 가지 해결 방법이 있습니다:</p>\n<ul>\n<li>시그널 값과 함께 게터를 사용하세요</li>\n</ul>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-analysis-card'</span>,\n  <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./analysis-card.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrl</span>: <span class=\"hljs-string\">'./analysis-card.component.scss'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnalysisCardComponent</span> {\n  public <span class=\"hljs-attr\">_analysisState</span>: <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;<span class=\"hljs-title class_\">AnalysisState</span>> = <span class=\"hljs-title function_\">signal</span>({\n    <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'pending'</span>,\n  });\n\n  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">analysisState</span>() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_analysisState</span>();\n  }\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 모의 변경 시뮬레이션</span>\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_analysisState</span>.<span class=\"hljs-title function_\">set</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'completed'</span>, <span class=\"hljs-attr\">result</span>: <span class=\"hljs-string\">'xyz'</span> });\n    }, <span class=\"hljs-number\">5000</span>);\n  }\n}\n</code></pre>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">if</span> (analysisState.<span class=\"hljs-property\">status</span> === <span class=\"hljs-string\">\"pending\"</span>) {\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>분석 대기 중<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n} @<span class=\"hljs-keyword\">else</span> {\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>분석 완료 및 결과: { analysisState.result }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<ul>\n<li>보조 if 블록으로 신호의 값 언래핑하기</li>\n</ul>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-analysis-card'</span>,\n  <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./analysis-card.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrl</span>: <span class=\"hljs-string\">'./analysis-card.component.scss'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnalysisCardComponent</span> {\n  public <span class=\"hljs-attr\">analysisState</span>: <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;<span class=\"hljs-title class_\">AnalysisState</span>> = <span class=\"hljs-title function_\">signal</span>({\n    <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'pending'</span>,\n  });\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// mock change simulation</span>\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">analysisState</span>.<span class=\"hljs-title function_\">set</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'completed'</span>, <span class=\"hljs-attr\">result</span>: <span class=\"hljs-string\">'xyz'</span> });\n    }, <span class=\"hljs-number\">5000</span>);\n  }\n}\n</code></pre>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">analysisState</span>(); <span class=\"hljs-keyword\">as</span> analysisState) {\n  @<span class=\"hljs-keyword\">if</span> (analysisState.<span class=\"hljs-property\">status</span> === <span class=\"hljs-string\">\"pending\"</span>) {\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Analysis is pending<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n  } @<span class=\"hljs-keyword\">else</span> {\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Analysis completed with result: { analysisState.result }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n  }\n}\n</code></pre>\n<p>새로운 방법으로 템플릿 지역 변수를 만드는 방법을 소개했으므로 목표를 달성하는 더 우아한 방법이 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">analysisState = <span class=\"hljs-title function_\">analysisState</span>();\n\n<span class=\"hljs-keyword\">if</span> (analysisState.<span class=\"hljs-property\">status</span> === <span class=\"hljs-string\">\"pending\"</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Analysis is pending\"</span>);\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Analysis completed with result: <span class=\"hljs-subst\">${analysisState.result}</span>`</span>);\n}\n</code></pre>\n<p>The <code>analysisState</code> variable now holds the result of the <code>analysisState()</code> function call. If the status is \"pending,\" a message saying \"Analysis is pending\" will be logged. If the status is anything else, a message saying \"Analysis completed with result: \" followed by the actual result will be logged.</p>\n<p>Thank you, and have a great day! 😊</p>\n</body>\n</html>\n"},"__N_SSG":true}