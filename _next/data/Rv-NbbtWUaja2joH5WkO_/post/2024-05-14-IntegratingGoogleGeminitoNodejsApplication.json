{"pageProps":{"post":{"title":"Google Gemini을 Nodejs 애플리케이션에 통합하는 방법","description":"","date":"2024-05-14 10:56","slug":"2024-05-14-IntegratingGoogleGeminitoNodejsApplication","content":"\n\n<img src=\"/assets/img/2024-05-14-IntegratingGoogleGeminitoNodejsApplication_0.png\" />\n\n# 구글 젬이니란?\n\n구글 젬이니는 구글 AI가 개발한 강력하고 다양한 AI 모델입니다. 젬이니는 텍스트뿐만 아니라 코드, 오디오, 이미지 및 비디오와 같은 다양한 형식에서 작동하고 이해할 수 있습니다. 이는 Node.js 프로젝트에 대한 흥미로운 가능성을 열어줍니다.\n\n이 기사에서는 구글 젬이니를 Node.js 애플리케이션에 통합하는 방법을 안내하겠습니다. 우리는 구글 젬이니 SDK를 사용할 것입니다.\n\n\n\n## 준비물\n\n- 개인 컴퓨터에 Node.Js가 설치되어 있어야 합니다.\n- API 키 생성을 위한 Google AI Platform 계정이 있어야 합니다.\n\n- Node.Js 버전 18 이상이 필요합니다.\n- Node.Js에서 import를 사용하려면 package.json 파일에 \"type\": \"module\"을 추가해야 합니다.\n\n# 시작하기\n\n\n\n새로운 Node.js 프로젝트를 만들어봅시다. 터미널을 열고 다음 명령어를 실행해주세요:\n\n```js\nmkdir google-gemini-nodejs\ncd google-gemini-nodejs\nnpm init -y\n```\n\n다음으로, Google Gemini SDK와 dotenv 패키지를 설치해주세요:\n\n```js\nnpm install @google/generative-ai dotenv\n```\n\n\n\n## 구글 AI 플랫폼 계정 생성하기\n\nGoogle Gemini SDK를 사용하려면 API 키가 필요합니다. 구글 AI 플랫폼 웹사이트를 방문하여 새 API를 생성할 수 있습니다.\n\n새 API 키를 만들려면 \"Get API Key\" 버튼을 클릭하세요. API 키를 획득한 후에는 프로젝트의 루트에 있는 .env 파일에 저장하세요.\n\n```js\nAPI_KEY=YOUR_API_KEY\n```\n\n\n\n# Google Gemini SDK 설정하기\n\n이제 API 키를 가지고 있으니 Google Gemini SDK를 설정해 봅시다. 프로젝트의 루트에 index.js라는 새 파일을 만들고 아래 코드를 추가해주세요:\n\n## Google Gemini Pro 모델\n\n```js\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst gemini_api_key = process.env.API_KEY;\nconst googleAI = new GoogleGenerativeAI(gemini_api_key);\nconst geminiConfig = {\n  temperature: 0.9,\n  topP: 1,\n  topK: 1,\n  maxOutputTokens: 4096,\n};\n\nconst geminiModel = googleAI.getGenerativeModel({\n  model: \"gemini-pro\",\n  geminiConfig,\n});\n\nconst generate = async () => {\n  try {\n    const prompt = \"Tell me about google.\";\n    const result = await geminiModel.generateContent(prompt);\n    const response = result.response;\n    console.log(response.text());\n  } catch (error) {\n    console.log(\"response error\", error);\n  }\n};\n\ngenerate();\n```\n\n\n\n위 코드에서는 텍스트 생성, 번역, 그리고 멀티턴 텍스트 및 코드 채팅과 같은 자연어 작업을 처리하는 데 뛰어난 성능을 발휘하는 Google Gemini Pro 모델을 사용했습니다. 이는 사용자와 자연어로 상호 작용하는 지능형 시스템을 구축하기에 완벽한 모델입니다.\n\n## Google Gemini Vision Model\n\n```js\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport fs from \"fs/promises\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n \nconst gemini_api_key = process.env.API_KEY;\nconst googleAI = new GoogleGenerativeAI(gemini_api_key);\nconst geminiConfig = {\n  temperature: 0.4,\n  topP: 1,\n  topK: 32,\n  maxOutputTokens: 4096,\n};\n \nconst geminiModel = googleAI.getGenerativeModel({\n  model: \"gemini-pro-vision\",\n  geminiConfig,\n});\n \nconst generate = async () => {\n  try {\n    // 이미지 파일 읽기\n    const filePath = \"some-image.jpeg\";\n    const imageFile = await fs.readFile(filePath);\n    const imageBase64 = imageFile.toString(\"base64\");\n \n    const promptConfig = [\n      { text: \"이 이미지에 대해 무슨 일이 일어나고 있는지 알려줄 수 있나요?\" },\n      {\n        inlineData: {\n          mimeType: \"image/jpeg\",\n          data: imageBase64,\n        },\n      },\n    ];\n \n    const result = await geminiModel.generateContent({\n      contents: [{ role: \"user\", parts: promptConfig }],\n    });\n    const response = await result.response;\n    console.log(response.text());\n  } catch (error) {\n    console.log(\"응답 오류\", error);\n  }\n};\n \ngenerate();\r\n```\n\n위 코드에서는 이미지의 내용을 기반으로 전체 이미지를 분류하고 이미지에 대한 캡션을 생성하는 Google Gemini Vision 모델을 사용했습니다. 이는 사용자와 자연어로 상호 작용하는 지능형 시스템을 구축하기에 완벽한 모델입니다.\n\n\n\n## 어플리케이션 실행하기\n\n어플리케이션을 실행하려면 터미널을 열고 다음 명령어를 실행하세요:\n\n```js\nnode index.js\n```\n\n## 결론\n\n\n\n이 글에서는 Google Gemini를 Node.js 어플리케이션에 통합하는 방법에 대해 배웠습니다. 또한 Google Gemini Pro와 Vision 모델을 사용하여 텍스트 및 이미지 캡션을 생성하는 방법도 배웠습니다. GitHub에서 전체 소스 코드를 찾을 수 있습니다.\n\n여기까지입니다. 이 글이 유용했으면 좋겠습니다. 궁금한 점이나 피드백이 있으시다면 댓글 섹션에 공유해주세요. 기꺼이 답변해 드리겠습니다.","ogImage":{"url":"/assets/img/2024-05-14-IntegratingGoogleGeminitoNodejsApplication_0.png"},"coverImage":"/assets/img/2024-05-14-IntegratingGoogleGeminitoNodejsApplication_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-14-IntegratingGoogleGeminitoNodejsApplication_0.png\">\n<h1>구글 젬이니란?</h1>\n<p>구글 젬이니는 구글 AI가 개발한 강력하고 다양한 AI 모델입니다. 젬이니는 텍스트뿐만 아니라 코드, 오디오, 이미지 및 비디오와 같은 다양한 형식에서 작동하고 이해할 수 있습니다. 이는 Node.js 프로젝트에 대한 흥미로운 가능성을 열어줍니다.</p>\n<p>이 기사에서는 구글 젬이니를 Node.js 애플리케이션에 통합하는 방법을 안내하겠습니다. 우리는 구글 젬이니 SDK를 사용할 것입니다.</p>\n<h2>준비물</h2>\n<ul>\n<li>\n<p>개인 컴퓨터에 Node.Js가 설치되어 있어야 합니다.</p>\n</li>\n<li>\n<p>API 키 생성을 위한 Google AI Platform 계정이 있어야 합니다.</p>\n</li>\n<li>\n<p>Node.Js 버전 18 이상이 필요합니다.</p>\n</li>\n<li>\n<p>Node.Js에서 import를 사용하려면 package.json 파일에 \"type\": \"module\"을 추가해야 합니다.</p>\n</li>\n</ul>\n<h1>시작하기</h1>\n<p>새로운 Node.js 프로젝트를 만들어봅시다. 터미널을 열고 다음 명령어를 실행해주세요:</p>\n<pre><code class=\"hljs language-js\">mkdir google-gemini-nodejs\ncd google-gemini-nodejs\nnpm init -y\n</code></pre>\n<p>다음으로, Google Gemini SDK와 dotenv 패키지를 설치해주세요:</p>\n<pre><code class=\"hljs language-js\">npm install @google/generative-ai dotenv\n</code></pre>\n<h2>구글 AI 플랫폼 계정 생성하기</h2>\n<p>Google Gemini SDK를 사용하려면 API 키가 필요합니다. 구글 AI 플랫폼 웹사이트를 방문하여 새 API를 생성할 수 있습니다.</p>\n<p>새 API 키를 만들려면 \"Get API Key\" 버튼을 클릭하세요. API 키를 획득한 후에는 프로젝트의 루트에 있는 .env 파일에 저장하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">API_KEY</span>=<span class=\"hljs-variable constant_\">YOUR_API_KEY</span>\n</code></pre>\n<h1>Google Gemini SDK 설정하기</h1>\n<p>이제 API 키를 가지고 있으니 Google Gemini SDK를 설정해 봅시다. 프로젝트의 루트에 index.js라는 새 파일을 만들고 아래 코드를 추가해주세요:</p>\n<h2>Google Gemini Pro 모델</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GoogleGenerativeAI</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@google/generative-ai\"</span>;\n<span class=\"hljs-keyword\">import</span> dotenv <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"dotenv\"</span>;\ndotenv.<span class=\"hljs-title function_\">config</span>();\n\n<span class=\"hljs-keyword\">const</span> gemini_api_key = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">API_KEY</span>;\n<span class=\"hljs-keyword\">const</span> googleAI = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GoogleGenerativeAI</span>(gemini_api_key);\n<span class=\"hljs-keyword\">const</span> geminiConfig = {\n  <span class=\"hljs-attr\">temperature</span>: <span class=\"hljs-number\">0.9</span>,\n  <span class=\"hljs-attr\">topP</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">topK</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">maxOutputTokens</span>: <span class=\"hljs-number\">4096</span>,\n};\n\n<span class=\"hljs-keyword\">const</span> geminiModel = googleAI.<span class=\"hljs-title function_\">getGenerativeModel</span>({\n  <span class=\"hljs-attr\">model</span>: <span class=\"hljs-string\">\"gemini-pro\"</span>,\n  geminiConfig,\n});\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">generate</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> prompt = <span class=\"hljs-string\">\"Tell me about google.\"</span>;\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> geminiModel.<span class=\"hljs-title function_\">generateContent</span>(prompt);\n    <span class=\"hljs-keyword\">const</span> response = result.<span class=\"hljs-property\">response</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(response.<span class=\"hljs-title function_\">text</span>());\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"response error\"</span>, error);\n  }\n};\n\n<span class=\"hljs-title function_\">generate</span>();\n</code></pre>\n<p>위 코드에서는 텍스트 생성, 번역, 그리고 멀티턴 텍스트 및 코드 채팅과 같은 자연어 작업을 처리하는 데 뛰어난 성능을 발휘하는 Google Gemini Pro 모델을 사용했습니다. 이는 사용자와 자연어로 상호 작용하는 지능형 시스템을 구축하기에 완벽한 모델입니다.</p>\n<h2>Google Gemini Vision Model</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GoogleGenerativeAI</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@google/generative-ai\"</span>;\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"fs/promises\"</span>;\n<span class=\"hljs-keyword\">import</span> dotenv <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"dotenv\"</span>;\ndotenv.<span class=\"hljs-title function_\">config</span>();\n \n<span class=\"hljs-keyword\">const</span> gemini_api_key = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">API_KEY</span>;\n<span class=\"hljs-keyword\">const</span> googleAI = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GoogleGenerativeAI</span>(gemini_api_key);\n<span class=\"hljs-keyword\">const</span> geminiConfig = {\n  <span class=\"hljs-attr\">temperature</span>: <span class=\"hljs-number\">0.4</span>,\n  <span class=\"hljs-attr\">topP</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">topK</span>: <span class=\"hljs-number\">32</span>,\n  <span class=\"hljs-attr\">maxOutputTokens</span>: <span class=\"hljs-number\">4096</span>,\n};\n \n<span class=\"hljs-keyword\">const</span> geminiModel = googleAI.<span class=\"hljs-title function_\">getGenerativeModel</span>({\n  <span class=\"hljs-attr\">model</span>: <span class=\"hljs-string\">\"gemini-pro-vision\"</span>,\n  geminiConfig,\n});\n \n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">generate</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 이미지 파일 읽기</span>\n    <span class=\"hljs-keyword\">const</span> filePath = <span class=\"hljs-string\">\"some-image.jpeg\"</span>;\n    <span class=\"hljs-keyword\">const</span> imageFile = <span class=\"hljs-keyword\">await</span> fs.<span class=\"hljs-title function_\">readFile</span>(filePath);\n    <span class=\"hljs-keyword\">const</span> imageBase64 = imageFile.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">\"base64\"</span>);\n \n    <span class=\"hljs-keyword\">const</span> promptConfig = [\n      { <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"이 이미지에 대해 무슨 일이 일어나고 있는지 알려줄 수 있나요?\"</span> },\n      {\n        <span class=\"hljs-attr\">inlineData</span>: {\n          <span class=\"hljs-attr\">mimeType</span>: <span class=\"hljs-string\">\"image/jpeg\"</span>,\n          <span class=\"hljs-attr\">data</span>: imageBase64,\n        },\n      },\n    ];\n \n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> geminiModel.<span class=\"hljs-title function_\">generateContent</span>({\n      <span class=\"hljs-attr\">contents</span>: [{ <span class=\"hljs-attr\">role</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-attr\">parts</span>: promptConfig }],\n    });\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> result.<span class=\"hljs-property\">response</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(response.<span class=\"hljs-title function_\">text</span>());\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"응답 오류\"</span>, error);\n  }\n};\n \n<span class=\"hljs-title function_\">generate</span>();\n</code></pre>\n<p>위 코드에서는 이미지의 내용을 기반으로 전체 이미지를 분류하고 이미지에 대한 캡션을 생성하는 Google Gemini Vision 모델을 사용했습니다. 이는 사용자와 자연어로 상호 작용하는 지능형 시스템을 구축하기에 완벽한 모델입니다.</p>\n<h2>어플리케이션 실행하기</h2>\n<p>어플리케이션을 실행하려면 터미널을 열고 다음 명령어를 실행하세요:</p>\n<pre><code class=\"hljs language-js\">node index.<span class=\"hljs-property\">js</span>\n</code></pre>\n<h2>결론</h2>\n<p>이 글에서는 Google Gemini를 Node.js 어플리케이션에 통합하는 방법에 대해 배웠습니다. 또한 Google Gemini Pro와 Vision 모델을 사용하여 텍스트 및 이미지 캡션을 생성하는 방법도 배웠습니다. GitHub에서 전체 소스 코드를 찾을 수 있습니다.</p>\n<p>여기까지입니다. 이 글이 유용했으면 좋겠습니다. 궁금한 점이나 피드백이 있으시다면 댓글 섹션에 공유해주세요. 기꺼이 답변해 드리겠습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}