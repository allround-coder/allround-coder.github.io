{"pageProps":{"post":{"title":"CSS의 고급 레이아웃 기술","description":"","date":"2024-06-20 03:20","slug":"2024-06-20-AdvancedLayoutTechniquesinCSS","content":"\n\n\n![image](/assets/img/2024-06-20-AdvancedLayoutTechniquesinCSS_0.png)\n\n# :empty 가상 클래스를 사용하여 내용이 없는 요소 선택하기\n\n추가적인 마크업 없이 빈 요소를 선택하는 쉬운 방법은 :empty 가상 클래스를 사용하여 자식 요소가 없는 요소를 대상으로 하는 것입니다.\n\n아래 예시에서는 class가 message인 두 개의 div 요소가 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html>\n  <body>\n    <div class=\"message\">\n      <p>Info: Hey there!</p>\n    </div>\n    <div class=\"message\"></div>\n  </body>\n</html>\n```\n\n:empty 가상 클래스 선택자를 사용하여 빈 div 요소를 숨길 수 있어요\n\n```js\n.message {\n  margin: 10px;\n  padding: 10px;\n  background-color: blue;\n  color: white;\n  border-radius: 5px;\n}\n\n.message:empty {\n  display: none;\n}\n```\n\n하지만, :not(:empty) 가상 클래스 선택자를 사용하여 비어 있지 않은 message 요소를 스타일링하는 방법도 있어요\n\n<div class=\"content-ad\"></div>\n\n```js\n.message:not(:empty) {\n  margin: 10px;\n  padding: 10px;\n  background-color: lightblue;\n  color: white;\n  border-radius: 5px;\n}\n```\n\n🚨 공백은 자식으로 간주되기 때문에, :empty는 요소에 내용(자식이 없지만 시작 태그와 끝 태그 사이에 공백이 있는 경우)이 있는 경우 작동하지 않음을 주의하십시오.\n\n# *-Of-Type CSS 가상 클래스를 사용하여 위치에 따른 요소 선택하기\n\n부모 요소 내에서 형제 요소 중에서 위치에 따라 요소를 선택하는 방법을 알아보세요.\n\n<div class=\"content-ad\"></div>\n\n# :first-of-type 와 :last-of-type\n\nCSS :first-of-type 선택자를 사용하면 부모 컨테이너 내에서 특정 요소의 첫 번째 인스턴스를 선택할 수 있습니다. CSS의 :last-of-type 선택자를 사용하면 마지막 요소를 선택할 수 있습니다.\n\n```js\narticle p:first-of-type {\n  font-size: 16px;\n  font-style: italic;\n}\n\narticle p:last-of-type {\n  color: green;\n}\n```\n\n# :only-of-type\n\n<div class=\"content-ad\"></div>\n\n:only-of-type 가상 클래스는 동일한 유형의 형제 요소가 없는 요소를 나타냅니다.\n\n```js\narticle blockquote:only-of-type {\n  border-left: 4px solid black;\n  padding-left: 10px;\n  font-style: italic;\n  font-weight: bold;\n  color: darkblue;\n}\n```\n\n# :nth-of-type()\n\n:nth-of-type 가상 클래스는 동일한 유형(태그 이름)의 형제 요소 중에서 요소의 위치에 따라 일치시킵니다.\n\n<div class=\"content-ad\"></div>\n\n\n/* 위 예시에서 2번째와 6번째 단락과 일치합니다. (즉, 4n+2 규칙에 따라 일치하는 요소입니다.)\n    4n+2는 4*0 + 2 = 2번째, 4*1 + 2 = 6번째 등으로 변환될 수 있습니다.\n*/\narticle p:nth-of-type(4n+2) {\n  color: purple;\n}\n\n\n아래 예시를 살펴보세요:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <article>\n        <h1>Lorem Ipsum</h1>\n        <p>\"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\"</p>\n        <!-- 이하 생략 -->\n    </article>\n</body>\n</html>\n```\n\n또한, CSS 코드는 다음과 같습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\narticle p:first-of-type {\n  font-size: 16px;\n  font-style: italic;\n}\n\narticle img:last-of-type {\n  border: 10px solid pink;\n}\n\narticle blockquote:only-of-type {\n  border-left: 4px solid black;\n  padding-left: 10px;\n  font-style: italic;\n  font-weight: bold;\n  color: darkblue;\n}\n\n/* 2번째와 6번째 문단이 일치하도록 합니다.4n+2는 4*0+2=2번째, 4*1+2=6번째와 같이 모든 4의 배수에 2를 더하여 일치하는 엘리먼트를 의미합니다 */\narticle p:nth-of-type(4n+2) {\n  color: purple;\n}\n```\n\n# CSS calc()를 사용하여 고정-유동-고정 레이아웃 만들기\n\nCSS calc()를 사용하면 단위를 섞어 실시간 계산을 수행할 수 있습니다. 알 수 없는 수를 고려하여 요소의 크기를 조절해야 할 때 유용합니다.\n\ncalc() 속성은 스타일시트 내의 CSS 길이 또는 숫자가 있는 곳이라면 어디서나 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n레이아웃 유연성을 향상시키는 두 가지 주요 기능을 제공합니다:\n\n- 백분율과 절대 값 혼합\n- 크기 단위 혼합\n\n# 백분율과 절대 단위 혼용\n\n백분율과 절대 단위를 결합한 예제를 살펴보겠습니다. 사용 가능한 영역 중 50%를 할당하되 고정 픽셀 양만큼 빼고 싶다고 가정해 봅시다. 이를 다음과 같이 작성할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n\n```js\n.parent {\n  border: 1px solid black;\n}\n\n.child {\n  width: calc(50% - 100px);\n  background-color: green;\n}\n```\n\nAnd the HTML code:\n\n```js\n<div class=\"parent\">\n  <div class=\"child\">Always 100 pixels less than half the available area</div>\n</div>\n```\n\nNow if you preview this code, it’d look like:\n\n\n<div class=\"content-ad\"></div>\n\n부모 요소의 크기를 줄이면 다음과 같이 보입니다:\n\n![image1](/assets/img/2024-06-20-AdvancedLayoutTechniquesinCSS_2.png)\n\n이 방식의 좋은 점은 콘텐츠의 오른쪽 가장자리를 항상 포함 영역 중앙에서 왼쪽으로 100px 위치시킬 수 있다는 것입니다. 다양한 값 유형을 혼합할 수 있는 이 능력은 웹 애플리케이션의 레이아웃 관리를 향상시켜서 다양한 크기의 장치에 걸쳐 더 효과적인 제어를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# 단위 조합\n\n또 다른 훌륭한 기능은 다양한 측정 단위를 조합하여 최종 크기를 얻을 수 있는 능력입니다. 예를 들어, 'em'과 'px' 단위를 섞어서 현재 글ꔼ 크기에 상대적인 크기를 설정할 수 있습니다.\n\n```js\n.child {\n  height: calc(10em + 3px);\n  background-color: green;\n}\n```\n\n💡 calc()를 사용하여 +, -, *, /를 사용하여 값들을 더하거나 빼내거나 곱하거나 나눌 수 있어서 다양한 가능성을 제공합니다. calc()는 CSS 길이나 숫자가 사용될 수 있는 곳이면 어디에서든 사용할 수 있습니다. 또한 곧 각도나 주파수 속성에 대한 calc()를 추가할 예정입니다.\n\n<div class=\"content-ad\"></div>\n\n# CSS를 사용하여 요소를 동적으로 크기 조절하기\n\n브라우저 크기를 조정할 때도 반응형 레이아웃을 만들 수 있도록 뷰포트의 크기에 따라 요소의 크기를 조정할 수 있습니다.\n\n# 뷰포트 단위\n\n뷰포트 단위는 \"반응형 길이 단위\"로 간주되며, 브라우저 크기가 조정될 때마다 그 값이 조정됩니다. CSS에는 이러한 뷰포트 기반 단위 네 가지가 포함되어 있습니다. 이들은 vh, vw, vmin 및 vmax입니다.\n\n<div class=\"content-ad\"></div>\n\n- 뷰포트 높이 (vh). 이 단위는 뷰포트의 높이를 기준으로 합니다. 1vh의 값은 뷰포트 높이의 1%에 해당합니다.\n- 뷰포트 너비 (vw). 이 단위는 뷰포트의 너비를 기준으로 합니다. 1vw의 값은 뷰포트 너비의 1%에 해당합니다.\n- 뷰포트 최솟값 (vmin). 이 단위는 뷰포트의 작은 차원을 기준으로 합니다. 뷰포트 높이가 너비보다 작은 경우, 1vmin의 값은 뷰포트 높이의 1%에 해당합니다. 마찬가지로, 뷰포트 너비가 높이보다 작은 경우, 1vmin의 값은 뷰포트 너비의 1%에 해당합니다.\n- 뷰포트 최댓값 (vmax). 이 단위는 뷰포트의 큰 차원을 기준으로 합니다. 뷰포트 높이가 너비보다 큰 경우, 1vmax의 값은 뷰포트 높이의 1%에 해당합니다. 마찬가지로, 뷰포트 너비가 높이보다 큰 경우, 1vmax의 값은 뷰포트 너비의 1%에 해당합니다.\n\n다음과 같이 단락을 포함한 div 요소로 시작하세요:\n\n```js\n<div class=\"Layout\">\n  <p>Hello Dynamic Sizing!</p>\n</div>\n```\n\n포함 요소에 뷰포트 단위를 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n```css\n.Layout {\n  height: 40vh;\n  width: 40vw;\n  margin: 30vh 25vw;\n  background-color: cadetblue;\n}\n\np {\n  padding: 32px 0 0 32px;\n  font-family: monospace;\n  font-size: 18px;\n  color: azure;\n}\n```\n\n실제로 보기:\n\n브라우저 크기를 조절하면 크기가 반응적으로 변경됩니다.\n\n# 단 하나의 CSS 값으로 손쉽게 스타일 재설정하기\n\n\n<div class=\"content-ad\"></div>\n\n요소의 스타일을 부모의 스타일로 재설정해야 할 때, 더 많은 스타일 선언을 덧붙이는 대신 간단히 재설정할 수 있습니다.\n\n섹션 컨테이너 안에 랩핑된 버튼 요소를 선언하세요:\n\n```js\n<section>\n  <button>Click me!</button>\n</section>\n```\n\n버튼 요소의 부모인 섹션 요소에서 선언된 글꼴 색상을 사용하려면 색상을 검정으로 설정하는 대신 재설정할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n\nsection {\n  color: black;\n}\n\nbutton {\n  cursor: pointer;\n  padding: 20px;\n  border: 0;\n  border-radius: 4px;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  font-weight: 500;\n  color: white;\n  background-color: springgreen;\n}\nsection button {\n  color: unset;\n}\r\n\n\n실제로 보십시오:\n\n# CSS를 사용하여 반응형 플루이드 칼럼 레이아웃 설계하기\n\n추가 마크업이 필요 없이 유연하고 반응성 레이아웃을 만들기 위해 CSS 칼럼을 활용하는 방법을 발견하세요.\n\n<div class=\"content-ad\"></div>\n\n참고 사항:\n\n- column-width는 width가 아닌 min-width와 같이 작동합니다. 브라우저는 제공된 너비로 가능한 많은 열을 렌더링합니다. 각 열이 제공된 값 이상을 차지할 수 있다면 그렇게 할 것입니다.\n- column-span은 특정 요소가 column-count와 column-width를 무시하도록 허용합니다. 정수값으로 설정하여 특정 열 수에 걸쳐 확장하거나 \"all\"로 모든 열에 걸쳐 확장할 수 있습니다. 그러나 이 속성은 Firefox에서 작동하지 않습니다. 해결책으로는 컨테이너에 적용된 열을 벗어난 요소(예: 헤딩)로 이동하는 것이 있습니다. 이렇게 하면 해당 요소가 자동 열 흐름 밖에 유지됩니다.\n- column-fill을 사용하면 콘텐츠가 열로 흐르는 방식을 변경할 수 있습니다. 기본값으로 \"balance\"로 구성되어 있어 콘텐츠가 열 사이에 균등하게 분배되도록 보장합니다. \"auto\"로 설정할 수도 있지만 이를 위해 고정 높이를 설정해야 합니다. 이는 유동적이고 응답형 레이아웃의 개념을 깨는 것이므로 신중히 사용해야 합니다.\n- column-gap은 각 열 사이의 갭 또는 거터를 지정하며, 음수가 아닌 길이를 사용하여 픽셀, rems, 다시 말해 퍼센트로 설정할 수 있습니다. column-gap은 열 사이의 내장된 패딩으로 생각할 수 있으며 올바른 간격을 얻기 위해 실제로 수학을 할 필요가 없습니다.\n- column-rule을 사용하면 각 열 사이에 테두리를 넣을 수 있으며, border shorthand와 동일한 인수를 사용하므로 1px dashed #ccc와 같이 말할 수 있습니다. 이렇게 하면 각 열 가장자리에 수직 선이 추가됩니다.\n\n```js\n<section>\n  <h2>Europe</h2>\n  <nav>\n    <ul>\n      <li><a href=\"#\">Belgium</a></li>\n      <li><a href=\"#\">Netherlands</a></li>\n      <li><a href=\"#\">Denmark</a></li>\n      <li><a href=\"#\">Germany</a></li>\n      <li><a href=\"#\">Czechia</a></li>\n      <li><a href=\"#\">France</a></li>\n      <li><a href=\"#\">Spain</a></li>\n      <li><a href=\"#\">Portugal</a></li>\n      <li><a href=\"#\">Italy</a></li>\n      <li><a href=\"#\">Poland</a></li>\n      <li><a href=\"#\">Sweden</a></li>\n      <li><a href=\"#\">Norway</a></li>\n      <li><a href=\"#\">Finland</a></li>\n      <li><a href=\"#\">Slowakia</a></li>\n      <li><a href=\"#\">Slovenia</a></li>\n      <li><a href=\"#\">Hungary</a></li>\n    </ul>\n  </nav>\n</section>\n```\n\n위에서 배운 column 프로퍼티를 사용해 보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nnav {\n    /*column-count: 4;\n    column-width: 150px;*/\n    columns: 4 120px; /* same as above */\n    column-gap: 2rem;\n    column-rule: 1px dashed #ccc;\n}\n```\n\n실제로 이것을 확인해 보겠습니다:","ogImage":{"url":"/assets/img/2024-06-20-AdvancedLayoutTechniquesinCSS_0.png"},"coverImage":"/assets/img/2024-06-20-AdvancedLayoutTechniquesinCSS_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-20-AdvancedLayoutTechniquesinCSS_0.png\" alt=\"image\"></p>\n<h1>:empty 가상 클래스를 사용하여 내용이 없는 요소 선택하기</h1>\n<p>추가적인 마크업 없이 빈 요소를 선택하는 쉬운 방법은 :empty 가상 클래스를 사용하여 자식 요소가 없는 요소를 대상으로 하는 것입니다.</p>\n<p>아래 예시에서는 class가 message인 두 개의 div 요소가 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Info: Hey there!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></span>\n</code></pre>\n<p>:empty 가상 클래스 선택자를 사용하여 빈 div 요소를 숨길 수 있어요</p>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">message</span> {\n  <span class=\"hljs-attr\">margin</span>: 10px;\n  <span class=\"hljs-attr\">padding</span>: 10px;\n  background-<span class=\"hljs-attr\">color</span>: blue;\n  <span class=\"hljs-attr\">color</span>: white;\n  border-<span class=\"hljs-attr\">radius</span>: 5px;\n}\n\n.<span class=\"hljs-property\">message</span>:empty {\n  <span class=\"hljs-attr\">display</span>: none;\n}\n</code></pre>\n<p>하지만, :not(:empty) 가상 클래스 선택자를 사용하여 비어 있지 않은 message 요소를 스타일링하는 방법도 있어요</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">message</span>:<span class=\"hljs-title function_\">not</span>(<span class=\"hljs-params\">:empty</span>) {\n  <span class=\"hljs-attr\">margin</span>: 10px;\n  <span class=\"hljs-attr\">padding</span>: 10px;\n  background-<span class=\"hljs-attr\">color</span>: lightblue;\n  <span class=\"hljs-attr\">color</span>: white;\n  border-<span class=\"hljs-attr\">radius</span>: 5px;\n}\n</code></pre>\n<p>🚨 공백은 자식으로 간주되기 때문에, :empty는 요소에 내용(자식이 없지만 시작 태그와 끝 태그 사이에 공백이 있는 경우)이 있는 경우 작동하지 않음을 주의하십시오.</p>\n<h1>*-Of-Type CSS 가상 클래스를 사용하여 위치에 따른 요소 선택하기</h1>\n<p>부모 요소 내에서 형제 요소 중에서 위치에 따라 요소를 선택하는 방법을 알아보세요.</p>\n<div class=\"content-ad\"></div>\n<h1>:first-of-type 와 :last-of-type</h1>\n<p>CSS :first-of-type 선택자를 사용하면 부모 컨테이너 내에서 특정 요소의 첫 번째 인스턴스를 선택할 수 있습니다. CSS의 :last-of-type 선택자를 사용하면 마지막 요소를 선택할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">article <span class=\"hljs-attr\">p</span>:first-<span class=\"hljs-keyword\">of</span>-type {\n  font-<span class=\"hljs-attr\">size</span>: 16px;\n  font-<span class=\"hljs-attr\">style</span>: italic;\n}\n\narticle <span class=\"hljs-attr\">p</span>:last-<span class=\"hljs-keyword\">of</span>-type {\n  <span class=\"hljs-attr\">color</span>: green;\n}\n</code></pre>\n<h1>:only-of-type</h1>\n<div class=\"content-ad\"></div>\n<p>:only-of-type 가상 클래스는 동일한 유형의 형제 요소가 없는 요소를 나타냅니다.</p>\n<pre><code class=\"hljs language-js\">article <span class=\"hljs-attr\">blockquote</span>:only-<span class=\"hljs-keyword\">of</span>-type {\n  border-<span class=\"hljs-attr\">left</span>: 4px solid black;\n  padding-<span class=\"hljs-attr\">left</span>: 10px;\n  font-<span class=\"hljs-attr\">style</span>: italic;\n  font-<span class=\"hljs-attr\">weight</span>: bold;\n  <span class=\"hljs-attr\">color</span>: darkblue;\n}\n</code></pre>\n<h1>:nth-of-type()</h1>\n<p>:nth-of-type 가상 클래스는 동일한 유형(태그 이름)의 형제 요소 중에서 요소의 위치에 따라 일치시킵니다.</p>\n<div class=\"content-ad\"></div>\n<p>/* 위 예시에서 2번째와 6번째 단락과 일치합니다. (즉, 4n+2 규칙에 따라 일치하는 요소입니다.)\n4n+2는 4<em>0 + 2 = 2번째, 4</em>1 + 2 = 6번째 등으로 변환될 수 있습니다.\n*/\narticle p:nth-of-type(4n+2) {\ncolor: purple;\n}</p>\n<p>아래 예시를 살펴보세요:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Lorem Ipsum<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\"<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-comment\">&#x3C;!-- 이하 생략 --></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>또한, CSS 코드는 다음과 같습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">article <span class=\"hljs-attr\">p</span>:first-<span class=\"hljs-keyword\">of</span>-type {\n  font-<span class=\"hljs-attr\">size</span>: 16px;\n  font-<span class=\"hljs-attr\">style</span>: italic;\n}\n\narticle <span class=\"hljs-attr\">img</span>:last-<span class=\"hljs-keyword\">of</span>-type {\n  <span class=\"hljs-attr\">border</span>: 10px solid pink;\n}\n\narticle <span class=\"hljs-attr\">blockquote</span>:only-<span class=\"hljs-keyword\">of</span>-type {\n  border-<span class=\"hljs-attr\">left</span>: 4px solid black;\n  padding-<span class=\"hljs-attr\">left</span>: 10px;\n  font-<span class=\"hljs-attr\">style</span>: italic;\n  font-<span class=\"hljs-attr\">weight</span>: bold;\n  <span class=\"hljs-attr\">color</span>: darkblue;\n}\n\n<span class=\"hljs-comment\">/* 2번째와 6번째 문단이 일치하도록 합니다.4n+2는 4*0+2=2번째, 4*1+2=6번째와 같이 모든 4의 배수에 2를 더하여 일치하는 엘리먼트를 의미합니다 */</span>\narticle <span class=\"hljs-attr\">p</span>:nth-<span class=\"hljs-keyword\">of</span>-<span class=\"hljs-title function_\">type</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">4n</span>+<span class=\"hljs-number\">2</span></span>) {\n  <span class=\"hljs-attr\">color</span>: purple;\n}\n</code></pre>\n<h1>CSS calc()를 사용하여 고정-유동-고정 레이아웃 만들기</h1>\n<p>CSS calc()를 사용하면 단위를 섞어 실시간 계산을 수행할 수 있습니다. 알 수 없는 수를 고려하여 요소의 크기를 조절해야 할 때 유용합니다.</p>\n<p>calc() 속성은 스타일시트 내의 CSS 길이 또는 숫자가 있는 곳이라면 어디서나 사용할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>레이아웃 유연성을 향상시키는 두 가지 주요 기능을 제공합니다:</p>\n<ul>\n<li>백분율과 절대 값 혼합</li>\n<li>크기 단위 혼합</li>\n</ul>\n<h1>백분율과 절대 단위 혼용</h1>\n<p>백분율과 절대 단위를 결합한 예제를 살펴보겠습니다. 사용 가능한 영역 중 50%를 할당하되 고정 픽셀 양만큼 빼고 싶다고 가정해 봅시다. 이를 다음과 같이 작성할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">parent</span> {\n  <span class=\"hljs-attr\">border</span>: 1px solid black;\n}\n\n.<span class=\"hljs-property\">child</span> {\n  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-title function_\">calc</span>(<span class=\"hljs-number\">50</span>% - 100px);\n  background-<span class=\"hljs-attr\">color</span>: green;\n}\n</code></pre>\n<p>And the HTML code:</p>\n<pre><code class=\"hljs language-js\">&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"parent\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"child\"</span>></span>Always 100 pixels less than half the available area<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n&#x3C;/div>\n</code></pre>\n<p>Now if you preview this code, it’d look like:</p>\n<div class=\"content-ad\"></div>\n<p>부모 요소의 크기를 줄이면 다음과 같이 보입니다:</p>\n<p><img src=\"/assets/img/2024-06-20-AdvancedLayoutTechniquesinCSS_2.png\" alt=\"image1\"></p>\n<p>이 방식의 좋은 점은 콘텐츠의 오른쪽 가장자리를 항상 포함 영역 중앙에서 왼쪽으로 100px 위치시킬 수 있다는 것입니다. 다양한 값 유형을 혼합할 수 있는 이 능력은 웹 애플리케이션의 레이아웃 관리를 향상시켜서 다양한 크기의 장치에 걸쳐 더 효과적인 제어를 제공합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>단위 조합</h1>\n<p>또 다른 훌륭한 기능은 다양한 측정 단위를 조합하여 최종 크기를 얻을 수 있는 능력입니다. 예를 들어, 'em'과 'px' 단위를 섞어서 현재 글ꔼ 크기에 상대적인 크기를 설정할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">child</span> {\n  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-title function_\">calc</span>(10em + 3px);\n  background-<span class=\"hljs-attr\">color</span>: green;\n}\n</code></pre>\n<p>💡 calc()를 사용하여 +, -, *, /를 사용하여 값들을 더하거나 빼내거나 곱하거나 나눌 수 있어서 다양한 가능성을 제공합니다. calc()는 CSS 길이나 숫자가 사용될 수 있는 곳이면 어디에서든 사용할 수 있습니다. 또한 곧 각도나 주파수 속성에 대한 calc()를 추가할 예정입니다.</p>\n<div class=\"content-ad\"></div>\n<h1>CSS를 사용하여 요소를 동적으로 크기 조절하기</h1>\n<p>브라우저 크기를 조정할 때도 반응형 레이아웃을 만들 수 있도록 뷰포트의 크기에 따라 요소의 크기를 조정할 수 있습니다.</p>\n<h1>뷰포트 단위</h1>\n<p>뷰포트 단위는 \"반응형 길이 단위\"로 간주되며, 브라우저 크기가 조정될 때마다 그 값이 조정됩니다. CSS에는 이러한 뷰포트 기반 단위 네 가지가 포함되어 있습니다. 이들은 vh, vw, vmin 및 vmax입니다.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>뷰포트 높이 (vh). 이 단위는 뷰포트의 높이를 기준으로 합니다. 1vh의 값은 뷰포트 높이의 1%에 해당합니다.</li>\n<li>뷰포트 너비 (vw). 이 단위는 뷰포트의 너비를 기준으로 합니다. 1vw의 값은 뷰포트 너비의 1%에 해당합니다.</li>\n<li>뷰포트 최솟값 (vmin). 이 단위는 뷰포트의 작은 차원을 기준으로 합니다. 뷰포트 높이가 너비보다 작은 경우, 1vmin의 값은 뷰포트 높이의 1%에 해당합니다. 마찬가지로, 뷰포트 너비가 높이보다 작은 경우, 1vmin의 값은 뷰포트 너비의 1%에 해당합니다.</li>\n<li>뷰포트 최댓값 (vmax). 이 단위는 뷰포트의 큰 차원을 기준으로 합니다. 뷰포트 높이가 너비보다 큰 경우, 1vmax의 값은 뷰포트 높이의 1%에 해당합니다. 마찬가지로, 뷰포트 너비가 높이보다 큰 경우, 1vmax의 값은 뷰포트 너비의 1%에 해당합니다.</li>\n</ul>\n<p>다음과 같이 단락을 포함한 div 요소로 시작하세요:</p>\n<pre><code class=\"hljs language-js\">&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"Layout\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Hello Dynamic Sizing!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n&#x3C;/div>\n</code></pre>\n<p>포함 요소에 뷰포트 단위를 추가하세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.Layout</span> {\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40vh</span>;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">40vw</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">30vh</span> <span class=\"hljs-number\">25vw</span>;\n  <span class=\"hljs-attribute\">background-color</span>: cadetblue;\n}\n\n<span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">32px</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">32px</span>;\n  <span class=\"hljs-attribute\">font-family</span>: monospace;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">18px</span>;\n  <span class=\"hljs-attribute\">color</span>: azure;\n}\n</code></pre>\n<p>실제로 보기:</p>\n<p>브라우저 크기를 조절하면 크기가 반응적으로 변경됩니다.</p>\n<h1>단 하나의 CSS 값으로 손쉽게 스타일 재설정하기</h1>\n<div class=\"content-ad\"></div>\n<p>요소의 스타일을 부모의 스타일로 재설정해야 할 때, 더 많은 스타일 선언을 덧붙이는 대신 간단히 재설정할 수 있습니다.</p>\n<p>섹션 컨테이너 안에 랩핑된 버튼 요소를 선언하세요:</p>\n<pre><code class=\"hljs language-js\">&#x3C;section>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>Click me!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n&#x3C;/section>\n</code></pre>\n<p>버튼 요소의 부모인 섹션 요소에서 선언된 글꼴 색상을 사용하려면 색상을 검정으로 설정하는 대신 재설정할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<p>section {\ncolor: black;\n}</p>\n<p>button {\ncursor: pointer;\npadding: 20px;\nborder: 0;\nborder-radius: 4px;\ntext-align: center;\ntext-decoration: none;\nfont-size: 16px;\nfont-weight: 500;\ncolor: white;\nbackground-color: springgreen;\n}\nsection button {\ncolor: unset;\n}</p>\n<p>실제로 보십시오:</p>\n<h1>CSS를 사용하여 반응형 플루이드 칼럼 레이아웃 설계하기</h1>\n<p>추가 마크업이 필요 없이 유연하고 반응성 레이아웃을 만들기 위해 CSS 칼럼을 활용하는 방법을 발견하세요.</p>\n<div class=\"content-ad\"></div>\n<p>참고 사항:</p>\n<ul>\n<li>column-width는 width가 아닌 min-width와 같이 작동합니다. 브라우저는 제공된 너비로 가능한 많은 열을 렌더링합니다. 각 열이 제공된 값 이상을 차지할 수 있다면 그렇게 할 것입니다.</li>\n<li>column-span은 특정 요소가 column-count와 column-width를 무시하도록 허용합니다. 정수값으로 설정하여 특정 열 수에 걸쳐 확장하거나 \"all\"로 모든 열에 걸쳐 확장할 수 있습니다. 그러나 이 속성은 Firefox에서 작동하지 않습니다. 해결책으로는 컨테이너에 적용된 열을 벗어난 요소(예: 헤딩)로 이동하는 것이 있습니다. 이렇게 하면 해당 요소가 자동 열 흐름 밖에 유지됩니다.</li>\n<li>column-fill을 사용하면 콘텐츠가 열로 흐르는 방식을 변경할 수 있습니다. 기본값으로 \"balance\"로 구성되어 있어 콘텐츠가 열 사이에 균등하게 분배되도록 보장합니다. \"auto\"로 설정할 수도 있지만 이를 위해 고정 높이를 설정해야 합니다. 이는 유동적이고 응답형 레이아웃의 개념을 깨는 것이므로 신중히 사용해야 합니다.</li>\n<li>column-gap은 각 열 사이의 갭 또는 거터를 지정하며, 음수가 아닌 길이를 사용하여 픽셀, rems, 다시 말해 퍼센트로 설정할 수 있습니다. column-gap은 열 사이의 내장된 패딩으로 생각할 수 있으며 올바른 간격을 얻기 위해 실제로 수학을 할 필요가 없습니다.</li>\n<li>column-rule을 사용하면 각 열 사이에 테두리를 넣을 수 있으며, border shorthand와 동일한 인수를 사용하므로 1px dashed #ccc와 같이 말할 수 있습니다. 이렇게 하면 각 열 가장자리에 수직 선이 추가됩니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;section>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Europe<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Belgium<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Netherlands<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Denmark<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Germany<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Czechia<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>France<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Spain<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Portugal<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Italy<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Poland<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Sweden<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Norway<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Finland<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Slowakia<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Slovenia<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Hungary<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span></span>\n&#x3C;/section>\n</code></pre>\n<p>위에서 배운 column 프로퍼티를 사용해 보겠습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">nav {\n    <span class=\"hljs-comment\">/*column-count: 4;\n    column-width: 150px;*/</span>\n    <span class=\"hljs-attr\">columns</span>: <span class=\"hljs-number\">4</span> 120px; <span class=\"hljs-comment\">/* same as above */</span>\n    column-<span class=\"hljs-attr\">gap</span>: 2rem;\n    column-<span class=\"hljs-attr\">rule</span>: 1px dashed #ccc;\n}\n</code></pre>\n<p>실제로 이것을 확인해 보겠습니다:</p>\n</body>\n</html>\n"},"__N_SSG":true}