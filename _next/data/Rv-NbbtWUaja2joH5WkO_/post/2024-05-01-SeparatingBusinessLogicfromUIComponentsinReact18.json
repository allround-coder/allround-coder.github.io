{"pageProps":{"post":{"title":"리액트 18에서 비즈니스 로직과 UI 컴포넌트를 분리하는 방법","description":"","date":"2024-05-01 18:15","slug":"2024-05-01-SeparatingBusinessLogicfromUIComponentsinReact18","content":"\n\n\n![이미지](/assets/img/2024-05-01-SeparatingBusinessLogicfromUIComponentsinReact18_0.png)\n\n# 소개\n\nReact는 사용자 인터페이스를 만들기 위한 인기있는 JavaScript 라이브러리이며, 최근 버전에서 상당한 개선을 거쳤습니다. React 18을 통해 개발자들은 이제 비즈니스 로직을 UI 구성 요소에서 효과적으로 분리하는 더 강력한 도구를 갖게 되었습니다. 이 글에서는 비즈니스 로직과 UI 구성 요소를 분리하는 장점을 탐구하고, React 18의 새로운 기능을 사용하여 이를 어떻게 달성할 수 있는지 보여줄 것입니다.\n\n# 목차\n\n<div class=\"content-ad\"></div>\n\n- 비즈니스 로직과 UI 구성 요소를 왜 분리해야 할까요?\n- 비즈니스 로직 분리를 위한 React 18의 새로운 기능들\n- 비즈니스 로직 분리하기: 단계별 안내서\n- React 18에서 비즈니스 로직 분리를 위한 고급 기술\n- 결론\n- 참고 자료\n\n# 비즈니스 로직과 UI 구성 요소를 왜 분리해야 할까요?\n\n- 코드 재사용성: 비즈니스 로직이 분리되면 응용 프로그램의 다른 부분이나 다른 프로젝트에서도 쉽게 구성 요소를 재사용할 수 있습니다.\n- 테스트: 비즈니스 로직과 UI 구성 요소를 독립적으로 단위 테스트할 수 있으므로 테스트가 더 간단해집니다. 이는 테스트 범위와 전체 코드 품질을 향상시킵니다.\n- 가독성 및 유지보수성: 비즈니스 로직을 UI 구성 요소에서 분리하면 더 깨끗하고 유지보수가 쉬운 코드가 됩니다. 각 부분의 책임을 이해하기 쉬워집니다.\n- 확장성: 응용 프로그램이 성장함에 따라 관심을 분리하면 충돌 없이 개발자가 코드베이스의 다른 부분에 동시에 작업할 수 있습니다.\n\n# React 18의 비즈니스 로직 분리를 위한 새로운 기능들\n\n<div class=\"content-ad\"></div>\n\n## 리액트 훅\n\n리액트 16.8에서 소개된 리액트 훅은 클래스 컴포넌트를 작성하지 않고도 상태 및 다른 리액트 기능을 사용할 수 있는 방법을 제공합니다. useState 및 useEffect와 같은 훅을 사용하면, 개발자는 비즈니스 로직을 캡슐화하고 컴포넌트 간에 재사용할 수 있습니다.\n\n## 동시 모드의 서스펜스\n\n리액트 18에서는 동시 모드와 서스펜스에서 개선 사항을 가져왔습니다. 동시 모드를 통해 리액트가 동시에 여러 작업을 처리하여 더 나은 성능을 제공합니다. 서스펜스는 선언적 데이터 가져오기와 코드 분할을 가능하게 하여 비동기 작업을 쉽게 다룰 수 있도록 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 비즈니스 로직 분리하기: 단계별 안내\n\n## 단계 1: 비즈니스 로직 식별\n\n컴포넌트에서 데이터, 상태를 관리하거나 API 호출을 수행하는 작업과 관련된 부분을 식별합니다.\n\n## 단계 2: 커스텀 훅 생성\n\n<div class=\"content-ad\"></div>\n\n지정된 비즈니스 로직을 캡슐화하기 위해 사용자 정의 훅을 생성하세요. 사용자 정의 훅은 use로 시작하는 함수입니다. 내부적으로 다른 훅을 사용할 수 있습니다.\n\n코드 예시 (사용자 정의 훅):\n\n```js\n// useUserData.js\nimport { useState, useEffect } from 'react';\n\nexport function useUserData() {\n  const [userData, setUserData] = useState([]);\n\n  useEffect(() => {\n    // API에서 사용자 데이터를 가져와 상태를 업데이트합니다.\n    fetch('https://api.example.com/users')\n      .then((response) => response.json())\n      .then((data) => setUserData(data))\n      .catch((error) => console.error('데이터를 가져오는 중 오류 발생:', error));\n  }, []);\n\n  return userData;\n}\n```\n\n## 단계 3: 컴포넌트에서 사용자 정의 훅 사용하기\n\n<div class=\"content-ad\"></div>\n\nUI 컴포넌트 내에서 비즈니스 로직과 데이터에 접근하기 위해 사용자 정의 후크를 활용하세요. 이렇게 하면 컴포넌트가 렌더링에 집중하고, 후크가 내부 로직을 처리합니다.\n\n코드 예시 (컴포넌트에서 사용자 정의 후크 사용):\n\n```js\n// UserList.js\nimport React from 'react';\nimport { useUserData } from './useUserData';\n\nfunction UserList() {\n  const userData = useUserData();\n\n  return (\n    <div>\n      <h1>사용자 목록</h1>\n      <ul>\n        {userData.map((user) => (\n          <li key={user.id}>{user.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n## 단계 4: Suspense를 사용한 코드 분할\n\n<div class=\"content-ad\"></div>\n\nSuspense를 사용하면 비동기 데이터 가져오기나 계산이 많이 필요한 컴포넌트를 코드로 나누고 지연로드할 수 있어요. 이렇게 하면 관심사를 분리하고 애플리케이션의 성능을 향상시킬 수 있어요.\n\n코드 예시 (Suspense를 사용한 코드 분할):\n\n```js\n// App.js\nimport React, { Suspense } from 'react';\nconst UserList = React.lazy(() => import('./UserList'));\n\nfunction App() {\n  return (\n    <div>\n      <h1>나의 앱</h1>\n      <Suspense fallback={<div>로딩 중...</div>}>\n        <UserList />\n      </Suspense>\n    </div>\n  );\n}\n```\n\n# 리액트 18에서 비즈니스 로직 분리를 위한 고급 기술\n\n<div class=\"content-ad\"></div>\n\n## 1. 커스텀 훅 조합\n\n커스텀 훅의 강력한 측면 중 하나는 더 복잡한 로직을 만들기 위해 조합할 수 있다는 것입니다. 여러 커스텀 훅을 결합함으로써, 복잡한 비즈니스 로직을 구축하면서 UI 컴포넌트를 깔끔하고 집중적으로 유지할 수 있습니다.\n\n코드 예시 (커스텀 훅 조합):\n\n```js\n// useUserData.js\nimport { useState, useEffect } from 'react';\n\nexport function useUserData() {\n  const [userData, setUserData] = useState([]);\n\n  useEffect(() => {\n    // API에서 사용자 데이터를 가져와 상태를 업데이트합니다\n    fetch('https://api.example.com/users')\n      .then((response) => response.json())\n      .then((data) => setUserData(data))\n      .catch((error) => console.error('데이터를 불러오는 중 오류 발생:', error));\n  }, []);\n\n  return userData;\n}\n\n// useFilteredUserData.js\nimport { useUserData } from './useUserData';\n\nexport function useFilteredUserData(searchTerm) {\n  const userData = useUserData();\n\n  // 검색어를 기반으로 사용자 데이터 필터링\n  const filteredData = userData.filter((user) =>\n    user.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return filteredData;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n`useFilteredUserData` 훅을 사용하면 검색어에 기반을 둔 필터링된 사용자 데이터를 가져올 수 있으며, `useUserData`에서 가져오는 로직을 재사용할 수 있습니다. 이 합성 접근 방식은 로직을 모듈식으로 유지하고 컴포넌트 간에 재사용할 수 있도록 합니다.\n\n## 2. 부수효과를 위한 커스텀 훅\n\n가끔 비즈니스 로직에는 데이터 가져오기 이상의 부수효과가 필요할 수 있습니다. 예를 들어 타이머 관리나 외부 API와의 상호작용과 같은 것들이 있습니다. 커스텀 훅은 이러한 부수효과를 캡슐화하여 컴포넌트 간에 일관되게 처리되도록 보장합니다.\n\n코드 예시 (타이머용 커스텀 훅):\n\n<div class=\"content-ad\"></div>\n\n```js\n// useTimer.js\nimport { useState, useEffect } from 'react';\n\nexport function useTimer(initialTime = 0) {\n  const [time, setTime] = useState(initialTime);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime((prevTime) => prevTime + 1);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return time;\n}\n```\n\n이제 인터벌을 관리할 걱정 없이 타이머 기능을 모든 컴포넌트에 쉽게 통합할 수 있습니다.\n\n## 3. 전역 상태 관리를 위한 컨텍스트\n\n여러 컴포넌트 간에 공유해야 하는 상태 관리를 위해 React 18의 Context API를 활용할 수 있습니다. 비즈니스 로직에 대한 컨텍스트를 생성함으로써 어떤 컴포넌트에서든 해당 상태와 액션에 접근할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n코드 예제 (상태 관리를 위해 컨텍스트 사용):\n\n```js\n// UserDataContext.js\nimport React, { createContext, useContext } from 'react';\nimport { useUserData } from './useUserData';\n\nconst UserDataContext = createContext();\n\nexport function UserDataProvider({ children }) {\n  const userData = useUserData();\n\n  return (\n    <UserDataContext.Provider value={userData}>\n      {children}\n    </UserDataContext.Provider>\n  );\n}\n\nexport function useUserDataContext() {\n  return useContext(UserDataContext);\n}\n```\n\nUserDataContext와 useUserDataContext 훅을 사용하여 UserDataProvider 내의 모든 컴포넌트에서 프롭 전달 없이 사용자 데이터에 액세스할 수 있습니다.\n\n## 4. Cross-Cutting Concerns을 위한 Higher-Order Components (HOCs)\n\n<div class=\"content-ad\"></div>\n\n여러 컴포넌트에 특정 로직을 적용해야 하는 경우, 고차 컴포넌트(Higher-Order Components, HOCs)를 사용할 수 있어요. HOCs는 컴포넌트를 가져와서 추가 프롭이나 로직이 포함된 새로운 컴포넌트를 반환하는 함수들이에요.\n\n코드 예시 (스타일링을 위한 HOC):\n\n```js\n// withStyles.js\nimport React from 'react';\n\nfunction withStyles(WrappedComponent) {\n  return function WithStyles(props) {\n    return (\n      <div style={{ color: 'blue' }}>\n        <WrappedComponent {...props} />\n      </div>\n    );\n  };\n}\n\n// 사용 예시\nconst MyComponent = ({ name }) => <div>Hello, {name}!</div>;\nconst StyledComponent = withStyles(MyComponent);\n```\n\n이제 StyledComponent는 MyComponent에 정의된 스타일들을 자동으로 적용해요. 여러 곳에서 스타일 선언을 반복할 필요가 없어졌어요.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\nReact 18의 새로운 기능을 활용하여 사용자 정의 훅, Suspense 및 Context API를 포함한 고급 기술을 효과적으로 구현할 수 있습니다. 이를 통해 비즈니스 로직과 UI 구성 요소를 보다 효과적으로 분리할 수 있습니다. 사용자 정의 훅 조합, 부작용 처리, 전역 상태 관리를 위한 Context API, 그리고 고차 컴포넌트를 활용하여 개발자는 모듈화되고 유지보수가 용이한 React 애플리케이션을 만들 수 있습니다.\n\n이러한 기술을 적용함으로써 개발자는 코드 구성을 개선하고 성능을 향상시키면서 더욱 확장 가능하고 유지보수가 쉬운 애플리케이션을 구축할 수 있습니다.\n\n# 참고 문헌\n\n<div class=\"content-ad\"></div>\n\n- React 문서\n- React에서 Hooks 소개\n- React 18 알파 - 동시 모드\n- 상태 Hook 사용하기\n- 데이터 가져오기용 서스펜스\n- React 커스텀 훅 - 구성\n- React 컨텍스트\n- React 고차 컴포넌트\n\n이러한 참고 자료는 React 18의 새로운 기능과 비즈니스 로직을 UI 컴포넌트에서 분리하기 위한 모베스트 프랙티스에 대한 심도 있는 정보를 제공합니다.\n\n![이미지](/assets/img/2024-05-01-SeparatingBusinessLogicfromUIComponentsinReact18_1.png)\n\n이 글이 도움이 되셨나요? 좋아요나 코멘트를 남겨주세요. 고맙습니다 🙏.","ogImage":{"url":"/assets/img/2024-05-01-SeparatingBusinessLogicfromUIComponentsinReact18_0.png"},"coverImage":"/assets/img/2024-05-01-SeparatingBusinessLogicfromUIComponentsinReact18_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-01-SeparatingBusinessLogicfromUIComponentsinReact18_0.png\" alt=\"이미지\"></p>\n<h1>소개</h1>\n<p>React는 사용자 인터페이스를 만들기 위한 인기있는 JavaScript 라이브러리이며, 최근 버전에서 상당한 개선을 거쳤습니다. React 18을 통해 개발자들은 이제 비즈니스 로직을 UI 구성 요소에서 효과적으로 분리하는 더 강력한 도구를 갖게 되었습니다. 이 글에서는 비즈니스 로직과 UI 구성 요소를 분리하는 장점을 탐구하고, React 18의 새로운 기능을 사용하여 이를 어떻게 달성할 수 있는지 보여줄 것입니다.</p>\n<h1>목차</h1>\n<div class=\"content-ad\"></div>\n<ul>\n<li>비즈니스 로직과 UI 구성 요소를 왜 분리해야 할까요?</li>\n<li>비즈니스 로직 분리를 위한 React 18의 새로운 기능들</li>\n<li>비즈니스 로직 분리하기: 단계별 안내서</li>\n<li>React 18에서 비즈니스 로직 분리를 위한 고급 기술</li>\n<li>결론</li>\n<li>참고 자료</li>\n</ul>\n<h1>비즈니스 로직과 UI 구성 요소를 왜 분리해야 할까요?</h1>\n<ul>\n<li>코드 재사용성: 비즈니스 로직이 분리되면 응용 프로그램의 다른 부분이나 다른 프로젝트에서도 쉽게 구성 요소를 재사용할 수 있습니다.</li>\n<li>테스트: 비즈니스 로직과 UI 구성 요소를 독립적으로 단위 테스트할 수 있으므로 테스트가 더 간단해집니다. 이는 테스트 범위와 전체 코드 품질을 향상시킵니다.</li>\n<li>가독성 및 유지보수성: 비즈니스 로직을 UI 구성 요소에서 분리하면 더 깨끗하고 유지보수가 쉬운 코드가 됩니다. 각 부분의 책임을 이해하기 쉬워집니다.</li>\n<li>확장성: 응용 프로그램이 성장함에 따라 관심을 분리하면 충돌 없이 개발자가 코드베이스의 다른 부분에 동시에 작업할 수 있습니다.</li>\n</ul>\n<h1>React 18의 비즈니스 로직 분리를 위한 새로운 기능들</h1>\n<div class=\"content-ad\"></div>\n<h2>리액트 훅</h2>\n<p>리액트 16.8에서 소개된 리액트 훅은 클래스 컴포넌트를 작성하지 않고도 상태 및 다른 리액트 기능을 사용할 수 있는 방법을 제공합니다. useState 및 useEffect와 같은 훅을 사용하면, 개발자는 비즈니스 로직을 캡슐화하고 컴포넌트 간에 재사용할 수 있습니다.</p>\n<h2>동시 모드의 서스펜스</h2>\n<p>리액트 18에서는 동시 모드와 서스펜스에서 개선 사항을 가져왔습니다. 동시 모드를 통해 리액트가 동시에 여러 작업을 처리하여 더 나은 성능을 제공합니다. 서스펜스는 선언적 데이터 가져오기와 코드 분할을 가능하게 하여 비동기 작업을 쉽게 다룰 수 있도록 합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>비즈니스 로직 분리하기: 단계별 안내</h1>\n<h2>단계 1: 비즈니스 로직 식별</h2>\n<p>컴포넌트에서 데이터, 상태를 관리하거나 API 호출을 수행하는 작업과 관련된 부분을 식별합니다.</p>\n<h2>단계 2: 커스텀 훅 생성</h2>\n<div class=\"content-ad\"></div>\n<p>지정된 비즈니스 로직을 캡슐화하기 위해 사용자 정의 훅을 생성하세요. 사용자 정의 훅은 use로 시작하는 함수입니다. 내부적으로 다른 훅을 사용할 수 있습니다.</p>\n<p>코드 예시 (사용자 정의 훅):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// useUserData.js</span>\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useUserData</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [userData, setUserData] = <span class=\"hljs-title function_\">useState</span>([]);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// API에서 사용자 데이터를 가져와 상태를 업데이트합니다.</span>\n    <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'https://api.example.com/users'</span>)\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> response.<span class=\"hljs-title function_\">json</span>())\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> <span class=\"hljs-title function_\">setUserData</span>(data))\n      .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'데이터를 가져오는 중 오류 발생:'</span>, error));\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> userData;\n}\n</code></pre>\n<h2>단계 3: 컴포넌트에서 사용자 정의 훅 사용하기</h2>\n<div class=\"content-ad\"></div>\n<p>UI 컴포넌트 내에서 비즈니스 로직과 데이터에 접근하기 위해 사용자 정의 후크를 활용하세요. 이렇게 하면 컴포넌트가 렌더링에 집중하고, 후크가 내부 로직을 처리합니다.</p>\n<p>코드 예시 (컴포넌트에서 사용자 정의 후크 사용):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// UserList.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { useUserData } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./useUserData'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">UserList</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> userData = <span class=\"hljs-title function_\">useUserData</span>();\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>사용자 목록<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        {userData.map((user) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{user.id}</span>></span>{user.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<h2>단계 4: Suspense를 사용한 코드 분할</h2>\n<div class=\"content-ad\"></div>\n<p>Suspense를 사용하면 비동기 데이터 가져오기나 계산이 많이 필요한 컴포넌트를 코드로 나누고 지연로드할 수 있어요. 이렇게 하면 관심사를 분리하고 애플리케이션의 성능을 향상시킬 수 있어요.</p>\n<p>코드 예시 (Suspense를 사용한 코드 분할):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// App.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { <span class=\"hljs-title class_\">Suspense</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">UserList</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">lazy</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./UserList'</span>));\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>나의 앱<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">div</span>></span>로딩 중...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>}>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">UserList</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Suspense</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<h1>리액트 18에서 비즈니스 로직 분리를 위한 고급 기술</h1>\n<div class=\"content-ad\"></div>\n<h2>1. 커스텀 훅 조합</h2>\n<p>커스텀 훅의 강력한 측면 중 하나는 더 복잡한 로직을 만들기 위해 조합할 수 있다는 것입니다. 여러 커스텀 훅을 결합함으로써, 복잡한 비즈니스 로직을 구축하면서 UI 컴포넌트를 깔끔하고 집중적으로 유지할 수 있습니다.</p>\n<p>코드 예시 (커스텀 훅 조합):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// useUserData.js</span>\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useUserData</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [userData, setUserData] = <span class=\"hljs-title function_\">useState</span>([]);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// API에서 사용자 데이터를 가져와 상태를 업데이트합니다</span>\n    <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'https://api.example.com/users'</span>)\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> response.<span class=\"hljs-title function_\">json</span>())\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> <span class=\"hljs-title function_\">setUserData</span>(data))\n      .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'데이터를 불러오는 중 오류 발생:'</span>, error));\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> userData;\n}\n\n<span class=\"hljs-comment\">// useFilteredUserData.js</span>\n<span class=\"hljs-keyword\">import</span> { useUserData } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./useUserData'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useFilteredUserData</span>(<span class=\"hljs-params\">searchTerm</span>) {\n  <span class=\"hljs-keyword\">const</span> userData = <span class=\"hljs-title function_\">useUserData</span>();\n\n  <span class=\"hljs-comment\">// 검색어를 기반으로 사용자 데이터 필터링</span>\n  <span class=\"hljs-keyword\">const</span> filteredData = userData.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">user</span>) =></span>\n    user.<span class=\"hljs-property\">name</span>.<span class=\"hljs-title function_\">toLowerCase</span>().<span class=\"hljs-title function_\">includes</span>(searchTerm.<span class=\"hljs-title function_\">toLowerCase</span>())\n  );\n\n  <span class=\"hljs-keyword\">return</span> filteredData;\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p><code>useFilteredUserData</code> 훅을 사용하면 검색어에 기반을 둔 필터링된 사용자 데이터를 가져올 수 있으며, <code>useUserData</code>에서 가져오는 로직을 재사용할 수 있습니다. 이 합성 접근 방식은 로직을 모듈식으로 유지하고 컴포넌트 간에 재사용할 수 있도록 합니다.</p>\n<h2>2. 부수효과를 위한 커스텀 훅</h2>\n<p>가끔 비즈니스 로직에는 데이터 가져오기 이상의 부수효과가 필요할 수 있습니다. 예를 들어 타이머 관리나 외부 API와의 상호작용과 같은 것들이 있습니다. 커스텀 훅은 이러한 부수효과를 캡슐화하여 컴포넌트 간에 일관되게 처리되도록 보장합니다.</p>\n<p>코드 예시 (타이머용 커스텀 훅):</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// useTimer.js</span>\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useTimer</span>(<span class=\"hljs-params\">initialTime = <span class=\"hljs-number\">0</span></span>) {\n  <span class=\"hljs-keyword\">const</span> [time, setTime] = <span class=\"hljs-title function_\">useState</span>(initialTime);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> interval = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-title function_\">setTime</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prevTime</span>) =></span> prevTime + <span class=\"hljs-number\">1</span>);\n    }, <span class=\"hljs-number\">1000</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">clearInterval</span>(interval);\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> time;\n}\n</code></pre>\n<p>이제 인터벌을 관리할 걱정 없이 타이머 기능을 모든 컴포넌트에 쉽게 통합할 수 있습니다.</p>\n<h2>3. 전역 상태 관리를 위한 컨텍스트</h2>\n<p>여러 컴포넌트 간에 공유해야 하는 상태 관리를 위해 React 18의 Context API를 활용할 수 있습니다. 비즈니스 로직에 대한 컨텍스트를 생성함으로써 어떤 컴포넌트에서든 해당 상태와 액션에 접근할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>코드 예제 (상태 관리를 위해 컨텍스트 사용):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// UserDataContext.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { createContext, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { useUserData } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./useUserData'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">UserDataContext</span> = <span class=\"hljs-title function_\">createContext</span>();\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">UserDataProvider</span>(<span class=\"hljs-params\">{ children }</span>) {\n  <span class=\"hljs-keyword\">const</span> userData = <span class=\"hljs-title function_\">useUserData</span>();\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">UserDataContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{userData}</span>></span>\n      {children}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">UserDataContext.Provider</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useUserDataContext</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">UserDataContext</span>);\n}\n</code></pre>\n<p>UserDataContext와 useUserDataContext 훅을 사용하여 UserDataProvider 내의 모든 컴포넌트에서 프롭 전달 없이 사용자 데이터에 액세스할 수 있습니다.</p>\n<h2>4. Cross-Cutting Concerns을 위한 Higher-Order Components (HOCs)</h2>\n<div class=\"content-ad\"></div>\n<p>여러 컴포넌트에 특정 로직을 적용해야 하는 경우, 고차 컴포넌트(Higher-Order Components, HOCs)를 사용할 수 있어요. HOCs는 컴포넌트를 가져와서 추가 프롭이나 로직이 포함된 새로운 컴포넌트를 반환하는 함수들이에요.</p>\n<p>코드 예시 (스타일링을 위한 HOC):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// withStyles.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">withStyles</span>(<span class=\"hljs-params\">WrappedComponent</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">WithStyles</span>(<span class=\"hljs-params\">props</span>) {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> '<span class=\"hljs-attr\">blue</span>' }}></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">WrappedComponent</span> {<span class=\"hljs-attr\">...props</span>} /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    );\n  };\n}\n\n<span class=\"hljs-comment\">// 사용 예시</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">MyComponent</span> = (<span class=\"hljs-params\">{ name }</span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Hello, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">StyledComponent</span> = <span class=\"hljs-title function_\">withStyles</span>(<span class=\"hljs-title class_\">MyComponent</span>);\n</code></pre>\n<p>이제 StyledComponent는 MyComponent에 정의된 스타일들을 자동으로 적용해요. 여러 곳에서 스타일 선언을 반복할 필요가 없어졌어요.</p>\n<div class=\"content-ad\"></div>\n<h1>결론</h1>\n<p>React 18의 새로운 기능을 활용하여 사용자 정의 훅, Suspense 및 Context API를 포함한 고급 기술을 효과적으로 구현할 수 있습니다. 이를 통해 비즈니스 로직과 UI 구성 요소를 보다 효과적으로 분리할 수 있습니다. 사용자 정의 훅 조합, 부작용 처리, 전역 상태 관리를 위한 Context API, 그리고 고차 컴포넌트를 활용하여 개발자는 모듈화되고 유지보수가 용이한 React 애플리케이션을 만들 수 있습니다.</p>\n<p>이러한 기술을 적용함으로써 개발자는 코드 구성을 개선하고 성능을 향상시키면서 더욱 확장 가능하고 유지보수가 쉬운 애플리케이션을 구축할 수 있습니다.</p>\n<h1>참고 문헌</h1>\n<div class=\"content-ad\"></div>\n<ul>\n<li>React 문서</li>\n<li>React에서 Hooks 소개</li>\n<li>React 18 알파 - 동시 모드</li>\n<li>상태 Hook 사용하기</li>\n<li>데이터 가져오기용 서스펜스</li>\n<li>React 커스텀 훅 - 구성</li>\n<li>React 컨텍스트</li>\n<li>React 고차 컴포넌트</li>\n</ul>\n<p>이러한 참고 자료는 React 18의 새로운 기능과 비즈니스 로직을 UI 컴포넌트에서 분리하기 위한 모베스트 프랙티스에 대한 심도 있는 정보를 제공합니다.</p>\n<p><img src=\"/assets/img/2024-05-01-SeparatingBusinessLogicfromUIComponentsinReact18_1.png\" alt=\"이미지\"></p>\n<p>이 글이 도움이 되셨나요? 좋아요나 코멘트를 남겨주세요. 고맙습니다 🙏.</p>\n</body>\n</html>\n"},"__N_SSG":true}