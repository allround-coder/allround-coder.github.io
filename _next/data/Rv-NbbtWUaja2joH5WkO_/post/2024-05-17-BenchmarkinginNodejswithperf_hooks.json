{"pageProps":{"post":{"title":"Nodejs에서 perf_hooks를 사용한 벤치마킹 점수","description":"","date":"2024-05-17 20:33","slug":"2024-05-17-BenchmarkinginNodejswithperf_hooks","content":"\n\n성능은 소프트웨어 개발에서 중요한 측면입니다, 특히 확장 가능하고 효율적인 애플리케이션을 구축할 때에는 더욱 그렇습니다. 비동기 및 이벤트 기반 아키텍처로 유명한 Node.js는 코드를 측정하고 최적화하는 데 도움이 되는 내장 도구를 제공합니다. 이 목적을 위해 가장 강력한 도구 중 하나는 `perf_hooks` 모듈입니다. 이 블로그에서는 Node.js의 벤치마킹을 위한 `perf_hooks` 사용 방법과 개발 툴킷에서 꼭 필요한 이유를 살펴보겠습니다.\n\n![이미지](/assets/img/2024-05-17-BenchmarkinginNodejswithperf_hooks_0.png)\n\n# `perf_hooks`란 무엇인가요?\n\n`perf_hooks` 모듈은 Node.js의 코어 라이브러리 중 하나로, 성능을 측정하기 위한 API를 제공합니다. 이 모듈은 브라우저에서 사용 가능한 Performance Timing API를 활용하여 높은 해상도의 타임스탬프를 캡처하고 애플리케이션 내 작업의 지속 시간을 측정할 수 있도록 해줍니다.\n\n<div class=\"content-ad\"></div>\n\n# 벤치마킹의 중요성\n\n벤치마킹은 응용 프로그램의 여러 측면의 성능을 측정하여 병목 현상과 개선이 필요한 부분을 식별하는 실천입니다. 효과적인 벤치마킹은 다음을 이끌어낼 수 있습니다:\n\n1. 최적화된 코드: 코드의 느린 부분을 식별하고 성능을 개선하기 위해 최적화합니다.\n2. 자원 관리: 응용 프로그램이 자원을 효율적으로 활용하도록 하여 비용을 줄이고 사용자 경험을 개선합니다.\n3. 확장성: 성능 저하 없이 증가하는 부하를 처리할 수 있도록 응용 프로그램을 준비합니다.\n\n# `perf_hooks` 시작하기\n\n<div class=\"content-ad\"></div>\n\n`perf_hooks`를 사용하려면 Node.js 애플리케이션에 가져와야 합니다:\n\n```js\nconst { performance, PerformanceObserver } = require('perf_hooks');\n```\n\n# 실행 시간 측정\n\n`perf_hooks`를 가장 기본적인 방법은 함수 또는 코드 블록의 실행 시간을 측정하는 것입니다. 다음은 예시입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nconst { performance } = require('perf_hooks');\n\nfunction someFunction() {\n const start = performance.now();\n // 측정하려는 코드\n for (let i = 0; i < 1e6; i++) {}\n const end = performance.now();\n console.log(`실행 시간: ${end - start} 밀리초`);\n}\n\nsomeFunction();\n```\n\n# 성능 마크 및 측정 사용하기\n\n보다 복잡한 응용 프로그램에서는 코드의 여러 부분을 측정하고 싶을 수 있습니다. `perf_hooks`를 사용하면 사용자 정의 성능 마크와 측정을 만들 수 있습니다:\n\n```js\nperformance.mark('A');\n// 코드 블록 A\nfor (let i = 0; i < 1e6; i++) {}\nperformance.mark('B');\n\nperformance.mark('C');\n// 코드 블록 B\nfor (let i = 0; i < 1e6; i++) {}\nperformance.mark('D');\n\nperformance.measure('A to B', 'A', 'B');\nperformance.measure('C to D', 'C', 'D');\n\nconst measures = performance.getEntriesByType('measure');\nmeasures.forEach((measure) => {\n  console.log(`${measure.name}: ${measure.duration} 밀리초`);\n});\n```\n\n<div class=\"content-ad\"></div>\n\n# 성능 항목 관찰\n\n더 발전된 사용법을 위해, `PerformanceObserver`를 사용하여 실시간으로 성능 항목들을 관찰할 수 있습니다:\n\n```js\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  entries.forEach((entry) => {\n    console.log(`${entry.name}: ${entry.duration} milliseconds`);\n  });\n});\n\nobserver.observe({ entryTypes: ['measure'] });\n\nperformance.mark('start');\n// 벤치마크할 코드\nsetTimeout(() => {\n  performance.mark('end');\n  performance.measure('시작부터 끝까지', 'start', 'end');\n}, 1000);\n```\n\n# 실제 응용 프로그램\n\n<div class=\"content-ad\"></div>\n\n실제 상황에서는 `perf_hooks`를 사용하여 데이터베이스 쿼리, API 요청 또는 무거운 계산과 같은 애플리케이션의 중요한 부분의 성능을 측정할 수 있습니다. 이러한 지표를 지속적으로 모니터링하여 애플리케이션이 발전함에 따라 성능을 유지할 수 있습니다.\n\n# 결론\n\n벤치마킹은 어떤 진지한 개발자에게 필수적인 실천 방법이며, Node.js의 `perf_hooks` 모듈은 코드를 측정하고 최적화하는 강력하고 유연한 방법을 제공합니다. 이 도구를 이해하고 활용함으로써 애플리케이션의 성능을 향상시킬 수 있어 자원 관리를 개선하고 사용자 경험을 향상시킬 수 있습니다.\n\n기억하세요, 소프트웨어 개발 세계에서 측정되는 대로 개선됩니다. 그래서 오늘부터 `perf_hooks`로 Node.js 애플리케이션의 벤치마킹을 시작하고 성능 최적화를 더욱 높여보세요.\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경해주세요.","ogImage":{"url":"/assets/img/2024-05-17-BenchmarkinginNodejswithperf_hooks_0.png"},"coverImage":"/assets/img/2024-05-17-BenchmarkinginNodejswithperf_hooks_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>성능은 소프트웨어 개발에서 중요한 측면입니다, 특히 확장 가능하고 효율적인 애플리케이션을 구축할 때에는 더욱 그렇습니다. 비동기 및 이벤트 기반 아키텍처로 유명한 Node.js는 코드를 측정하고 최적화하는 데 도움이 되는 내장 도구를 제공합니다. 이 목적을 위해 가장 강력한 도구 중 하나는 <code>perf_hooks</code> 모듈입니다. 이 블로그에서는 Node.js의 벤치마킹을 위한 <code>perf_hooks</code> 사용 방법과 개발 툴킷에서 꼭 필요한 이유를 살펴보겠습니다.</p>\n<p><img src=\"/assets/img/2024-05-17-BenchmarkinginNodejswithperf_hooks_0.png\" alt=\"이미지\"></p>\n<h1><code>perf_hooks</code>란 무엇인가요?</h1>\n<p><code>perf_hooks</code> 모듈은 Node.js의 코어 라이브러리 중 하나로, 성능을 측정하기 위한 API를 제공합니다. 이 모듈은 브라우저에서 사용 가능한 Performance Timing API를 활용하여 높은 해상도의 타임스탬프를 캡처하고 애플리케이션 내 작업의 지속 시간을 측정할 수 있도록 해줍니다.</p>\n<div class=\"content-ad\"></div>\n<h1>벤치마킹의 중요성</h1>\n<p>벤치마킹은 응용 프로그램의 여러 측면의 성능을 측정하여 병목 현상과 개선이 필요한 부분을 식별하는 실천입니다. 효과적인 벤치마킹은 다음을 이끌어낼 수 있습니다:</p>\n<ol>\n<li>최적화된 코드: 코드의 느린 부분을 식별하고 성능을 개선하기 위해 최적화합니다.</li>\n<li>자원 관리: 응용 프로그램이 자원을 효율적으로 활용하도록 하여 비용을 줄이고 사용자 경험을 개선합니다.</li>\n<li>확장성: 성능 저하 없이 증가하는 부하를 처리할 수 있도록 응용 프로그램을 준비합니다.</li>\n</ol>\n<h1><code>perf_hooks</code> 시작하기</h1>\n<div class=\"content-ad\"></div>\n<p><code>perf_hooks</code>를 사용하려면 Node.js 애플리케이션에 가져와야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { performance, <span class=\"hljs-title class_\">PerformanceObserver</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'perf_hooks'</span>);\n</code></pre>\n<h1>실행 시간 측정</h1>\n<p><code>perf_hooks</code>를 가장 기본적인 방법은 함수 또는 코드 블록의 실행 시간을 측정하는 것입니다. 다음은 예시입니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { performance } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'perf_hooks'</span>);\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">someFunction</span>(<span class=\"hljs-params\"></span>) {\n <span class=\"hljs-keyword\">const</span> start = performance.<span class=\"hljs-title function_\">now</span>();\n <span class=\"hljs-comment\">// 측정하려는 코드</span>\n <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">1e6</span>; i++) {}\n <span class=\"hljs-keyword\">const</span> end = performance.<span class=\"hljs-title function_\">now</span>();\n <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`실행 시간: <span class=\"hljs-subst\">${end - start}</span> 밀리초`</span>);\n}\n\n<span class=\"hljs-title function_\">someFunction</span>();\n</code></pre>\n<h1>성능 마크 및 측정 사용하기</h1>\n<p>보다 복잡한 응용 프로그램에서는 코드의 여러 부분을 측정하고 싶을 수 있습니다. <code>perf_hooks</code>를 사용하면 사용자 정의 성능 마크와 측정을 만들 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">performance.<span class=\"hljs-title function_\">mark</span>(<span class=\"hljs-string\">'A'</span>);\n<span class=\"hljs-comment\">// 코드 블록 A</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">1e6</span>; i++) {}\nperformance.<span class=\"hljs-title function_\">mark</span>(<span class=\"hljs-string\">'B'</span>);\n\nperformance.<span class=\"hljs-title function_\">mark</span>(<span class=\"hljs-string\">'C'</span>);\n<span class=\"hljs-comment\">// 코드 블록 B</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">1e6</span>; i++) {}\nperformance.<span class=\"hljs-title function_\">mark</span>(<span class=\"hljs-string\">'D'</span>);\n\nperformance.<span class=\"hljs-title function_\">measure</span>(<span class=\"hljs-string\">'A to B'</span>, <span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>);\nperformance.<span class=\"hljs-title function_\">measure</span>(<span class=\"hljs-string\">'C to D'</span>, <span class=\"hljs-string\">'C'</span>, <span class=\"hljs-string\">'D'</span>);\n\n<span class=\"hljs-keyword\">const</span> measures = performance.<span class=\"hljs-title function_\">getEntriesByType</span>(<span class=\"hljs-string\">'measure'</span>);\nmeasures.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">measure</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${measure.name}</span>: <span class=\"hljs-subst\">${measure.duration}</span> 밀리초`</span>);\n});\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>성능 항목 관찰</h1>\n<p>더 발전된 사용법을 위해, <code>PerformanceObserver</code>를 사용하여 실시간으로 성능 항목들을 관찰할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> observer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PerformanceObserver</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">list</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> entries = list.<span class=\"hljs-title function_\">getEntries</span>();\n  entries.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">entry</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${entry.name}</span>: <span class=\"hljs-subst\">${entry.duration}</span> milliseconds`</span>);\n  });\n});\n\nobserver.<span class=\"hljs-title function_\">observe</span>({ <span class=\"hljs-attr\">entryTypes</span>: [<span class=\"hljs-string\">'measure'</span>] });\n\nperformance.<span class=\"hljs-title function_\">mark</span>(<span class=\"hljs-string\">'start'</span>);\n<span class=\"hljs-comment\">// 벤치마크할 코드</span>\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n  performance.<span class=\"hljs-title function_\">mark</span>(<span class=\"hljs-string\">'end'</span>);\n  performance.<span class=\"hljs-title function_\">measure</span>(<span class=\"hljs-string\">'시작부터 끝까지'</span>, <span class=\"hljs-string\">'start'</span>, <span class=\"hljs-string\">'end'</span>);\n}, <span class=\"hljs-number\">1000</span>);\n</code></pre>\n<h1>실제 응용 프로그램</h1>\n<div class=\"content-ad\"></div>\n<p>실제 상황에서는 <code>perf_hooks</code>를 사용하여 데이터베이스 쿼리, API 요청 또는 무거운 계산과 같은 애플리케이션의 중요한 부분의 성능을 측정할 수 있습니다. 이러한 지표를 지속적으로 모니터링하여 애플리케이션이 발전함에 따라 성능을 유지할 수 있습니다.</p>\n<h1>결론</h1>\n<p>벤치마킹은 어떤 진지한 개발자에게 필수적인 실천 방법이며, Node.js의 <code>perf_hooks</code> 모듈은 코드를 측정하고 최적화하는 강력하고 유연한 방법을 제공합니다. 이 도구를 이해하고 활용함으로써 애플리케이션의 성능을 향상시킬 수 있어 자원 관리를 개선하고 사용자 경험을 향상시킬 수 있습니다.</p>\n<p>기억하세요, 소프트웨어 개발 세계에서 측정되는 대로 개선됩니다. 그래서 오늘부터 <code>perf_hooks</code>로 Node.js 애플리케이션의 벤치마킹을 시작하고 성능 최적화를 더욱 높여보세요.</p>\n<div class=\"content-ad\"></div>\n<p>테이블 태그를 마크다운 형식으로 변경해주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}