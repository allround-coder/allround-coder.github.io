{"pageProps":{"post":{"title":"TypeScript Enum이 정말 별로인 이유 5가지","description":"","date":"2024-06-30 18:34","slug":"2024-06-30-TypeScriptEnumsareTerrible","content":"\n\n\n![TypeScript Enums](/assets/img/2024-06-30-TypeScriptEnumsareTerrible_0.png)\n\n## Enum의 역사\n\nTypeScript는 2012년에 등장하여 컴파일 시간에 타입을 확인하는 새로운 시대를 연 했습니다.\n\nTypeScript는 JavaScript의 하위 집합이므로 개발자들이 구현하기 쉬웠으며, 코드는 마침내 JavaScript로 컴파일되었습니다.\n\n\n<div class=\"content-ad\"></div>\n\nTypeScript에는 클래스와 같은 새로운 기능이 도입되었습니다. 이 기능은 2015년 JavaScript에 도입되었습니다.\n\n또한 TypeScript에 추가된 열거형(enum)이라는 또 다른 기능이 있는데, 이 기능은 아직 JavaScript에 구현되지 않았습니다.\n\n이것이 JavaScript에 왜 아직 구현되지 않았는지 궁금해지는 이유입니다.\n\n# 열거형(enum)이란 무엇을 하는 것인가요?\n\n<div class=\"content-ad\"></div>\n\n열거형은 사용할 때 반드시 원본 개체를 참조해야하는 값을 정의하는 방법입니다.\n\n```js\nenum Direction {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\nconst move = (direction: Direction) => {};\n\nmove(Direction.Up);\nmove(Direction.Down);\n```\n\n우리는 이들이 어떻게 작동하는지 배워보고, 어쩌면 왜 클래스처럼 JavaScript에 아직 추가되지 않았는지 알아봅시다.\n\n# TypeScript의 열거형은 어떻게 작동하나요?\n\n<div class=\"content-ad\"></div>\n\n이전 예제를 가져와서 변환된 JavaScript 코드를 살펴보겠습니다.\n\n열거형은 실행 중에 약간 예측할 수 없는 동작을 합니다.\n\n다음과 같이 Direction 열거형이 있다고 가정해 봅시다.\n\n```js\nenum Direction {\n  Up,\n  Down,\n}\n```\n\n<div class=\"content-ad\"></div>\n\n기본적으로 Up의 값은 0이 되고 Down은 1이 됩니다. 자연스레 모두가 이 enum이 객체처럼 끝날 것이라고 생각할 것입니다.\n\n```js\nconst Direction = {\n  Up: 0,\n  Down: 1,\n}\n```\n\n그러나 JavaScript의 변환 코드를 살펴보면, 우리가 예상한 것과 약간 다른 복잡하고 심상치 않은 코드를 발견할 수 있습니다.\n\n```js\n\"use strict\";\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"Up\"] = 0] = \"Up\";\n    Direction[Direction[\"Down\"] = 1] = \"Down\";\n})(Direction || (Direction = {}));\n```\n\n<div class=\"content-ad\"></div>\n\n요런 객체가 나올 거에요. 예상했던 것과 매우 다르죠.\n\n```javascript\nconst Direction = {\n  Up: 0,\n  0: 'Up',\n  Down: 1,\n  1: 'Down'\n}\n```\n\n만약 Object.values(Direction)을 실행하면 [\"Up, \"Down\", 0, 1]과 같은 결과를 얻게 됩니다. 이것은 예상치 못한 결과이며 제대로 된 객체가 아닙니다.\n\n이것이 enum에 대해 짜증나는 첫 번째 점입니다. 기대에 맞게 동작하지 않는다는 것이죠.\n\n<div class=\"content-ad\"></div>\n\n문자열 열거형의 경우에는 적절한 객체가 생성됩니다.\n\n```js\nenum Direction  {\n  UP = \"Up\",\n  DOWN = \"Down\",\n}\n\n// 변환된 코드 \n\n\"use strict\";\nvar Direction;\n(function (Direction) {\n    Direction[\"UP\"] = \"Up\";\n    Direction[\"DOWN\"] = \"Down\";\n})(Direction || (Direction = {}));\n\n// 적절한 JS 객체 \n\nconst Direction = {\n  \"UP\": \"Up\",\n  \"DOWN\": \"DOWN\"\n}\n```\n\n그럼에도 불구하고 이에는 문제가 있습니다. 이를 보여드릴게요.\n\n어떤 함수에서 Direction 열거형 값을 액세스하려고 하는 경우를 가정해 봅시다.\n\n<div class=\"content-ad\"></div>\n\n\n열거형 Direction {\n  UP= \"위\",\n  DOWN = \"아래\",\n}\n\n함수 logDirection(direction: Direction) {\n  콘솔.로그(direction)\n}\n\n✅ 잘 작동합니다\nlogDirection(Direction.UP)\n\n❌ 작동하지 않습니다 - 열거형의 멤버값으로 함수를 호출할 수 없습니다\nlogDirection(\"위\")\n\n\nlogDirection 함수를 Direction의 멤버 값으로 호출할 수 없다는 것을 알 수 있습니다.\nTypeScript를 보면 런타임 값보다는 이름에 신경을 쓴다는 저의 기대대로 동작합니다.\n\nDirection.UP와 Up의 값은 동일하며 이상적으로 TypeScript는 신경 쓰지 않을 것으로 예상되지만 열거형의 경우 이 규칙이 깨집니다.\n\n또한 const 열거형도 있으며 열거형을 사용하고 싶다면 유용할 수 있지만 주의할 점도 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nconst enum Direction  {\n  UP = \"Up\",\n  DOWN = \"Down\",\n}\n\n// transpile code\n\n\"use strict\";\n// nothing\n```\n\n보면 알 수 있듯이 enum을 const로 만드는 즉시, transpile code가 없다는 것은 이 경우 TypeScript에서 처리되며 구현 세부 사항에 대해 끝 사용자를 혼동시키지 않습니다. 멋지죠 😎 하지만 다시 한 번 주의할 점이 있어요.\n\n이를 사용해서 **왜 절대 사용해서는 안 되는지**에 대해 강조한 문서의 별도 섹션이 있습니다.\n\n[여기](https://www.typescriptlang.org/docs/handbook/enums.html#const-enum-pitfalls)를 참조해주세요.\n\n<div class=\"content-ad\"></div>\n\n# 열거형의 혼란을 해결하는 방법\n\n열거형 대신 값을 수정하지 않을 객체와 함께 항상 as const를 사용해야 합니다.\n빠르게 예시를 살펴보겠습니다.\n\n```js\nconst Direction = {\n  UP: \"Up\",\n  DOWN: \"Down\"\n} as const\n\n\ntype GetValues<T> = T[keyof T]\n\ntype UnionOfObjectValues = GetValues<typeof Direction>\n\nfunction logDirection(direction: UnionOfObjectValues) {\n  console.log(direction)\n}\n\n✅ 동작합니다\nlogDirection(Direction.UP)\n\n✅ 또한 동작합니다\nlogDirection(\"Up\")\n```\n\n이 방법은 TypeScript의 기대에 완벽히 부합하며 작동 방식을 이해하기 쉽게 만듭니다.\n\n<div class=\"content-ad\"></div>\n\n만약 더 쉽게 만들고 싶다면, 오브젝트 값 대신 Direction의 키에서 union을 유도할 수 있어요.\n\n```js\nconst Direction = {\n  UP: \"Up\",\n  DOWN: \"Down\"\n} as const\n\ntype Directions = keyof typeof Direction\n\nfunction logDirection(direction: Directions) {\n  console.log(`${Direction[direction]} is present`)\n}\n\n✅ 잘 작동해요\nlogDirection(\"UP\")\n\n✅ 잘 작동해요\nlogDirection(\"DOWN\")\n```\n\nMatt Pocock와 Aaron이 이넘의 최악의 악몽을 설명하는 아주 좋은 비디오가 있어요. 이 비디오가 이 기사를 쓰게 된 동기가 되었죠.\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n우리는 항상 enum을 사용하는 대신 간단한 객체와 어떤 종류의 매직을 사용해야 합니다. enum은 이해하기 쉽고 어떤 놀라움도 주지 않습니다.\n\nTypeScript는 OOP를 더 중시하기 위해 enum을 도입했지만, 제 생각에 그것은 좋은 결정이 아니었습니다.","ogImage":{"url":"/assets/img/2024-06-30-TypeScriptEnumsareTerrible_0.png"},"coverImage":"/assets/img/2024-06-30-TypeScriptEnumsareTerrible_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-30-TypeScriptEnumsareTerrible_0.png\" alt=\"TypeScript Enums\"></p>\n<h2>Enum의 역사</h2>\n<p>TypeScript는 2012년에 등장하여 컴파일 시간에 타입을 확인하는 새로운 시대를 연 했습니다.</p>\n<p>TypeScript는 JavaScript의 하위 집합이므로 개발자들이 구현하기 쉬웠으며, 코드는 마침내 JavaScript로 컴파일되었습니다.</p>\n<div class=\"content-ad\"></div>\n<p>TypeScript에는 클래스와 같은 새로운 기능이 도입되었습니다. 이 기능은 2015년 JavaScript에 도입되었습니다.</p>\n<p>또한 TypeScript에 추가된 열거형(enum)이라는 또 다른 기능이 있는데, 이 기능은 아직 JavaScript에 구현되지 않았습니다.</p>\n<p>이것이 JavaScript에 왜 아직 구현되지 않았는지 궁금해지는 이유입니다.</p>\n<h1>열거형(enum)이란 무엇을 하는 것인가요?</h1>\n<div class=\"content-ad\"></div>\n<p>열거형은 사용할 때 반드시 원본 개체를 참조해야하는 값을 정의하는 방법입니다.</p>\n<pre><code class=\"hljs language-js\">enum <span class=\"hljs-title class_\">Direction</span> {\n  <span class=\"hljs-title class_\">Up</span>,\n  <span class=\"hljs-title class_\">Down</span>,\n  <span class=\"hljs-title class_\">Left</span>,\n  <span class=\"hljs-title class_\">Right</span>,\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">move</span> = (<span class=\"hljs-params\">direction: Direction</span>) => {};\n\n<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-title class_\">Direction</span>.<span class=\"hljs-property\">Up</span>);\n<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-title class_\">Direction</span>.<span class=\"hljs-property\">Down</span>);\n</code></pre>\n<p>우리는 이들이 어떻게 작동하는지 배워보고, 어쩌면 왜 클래스처럼 JavaScript에 아직 추가되지 않았는지 알아봅시다.</p>\n<h1>TypeScript의 열거형은 어떻게 작동하나요?</h1>\n<div class=\"content-ad\"></div>\n<p>이전 예제를 가져와서 변환된 JavaScript 코드를 살펴보겠습니다.</p>\n<p>열거형은 실행 중에 약간 예측할 수 없는 동작을 합니다.</p>\n<p>다음과 같이 Direction 열거형이 있다고 가정해 봅시다.</p>\n<pre><code class=\"hljs language-js\">enum <span class=\"hljs-title class_\">Direction</span> {\n  <span class=\"hljs-title class_\">Up</span>,\n  <span class=\"hljs-title class_\">Down</span>,\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>기본적으로 Up의 값은 0이 되고 Down은 1이 됩니다. 자연스레 모두가 이 enum이 객체처럼 끝날 것이라고 생각할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Direction</span> = {\n  <span class=\"hljs-title class_\">Up</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-title class_\">Down</span>: <span class=\"hljs-number\">1</span>,\n}\n</code></pre>\n<p>그러나 JavaScript의 변환 코드를 살펴보면, 우리가 예상한 것과 약간 다른 복잡하고 심상치 않은 코드를 발견할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-meta\">\"use strict\"</span>;\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Direction</span>;\n(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Direction</span>) {\n    <span class=\"hljs-title class_\">Direction</span>[<span class=\"hljs-title class_\">Direction</span>[<span class=\"hljs-string\">\"Up\"</span>] = <span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">\"Up\"</span>;\n    <span class=\"hljs-title class_\">Direction</span>[<span class=\"hljs-title class_\">Direction</span>[<span class=\"hljs-string\">\"Down\"</span>] = <span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"Down\"</span>;\n})(<span class=\"hljs-title class_\">Direction</span> || (<span class=\"hljs-title class_\">Direction</span> = {}));\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>요런 객체가 나올 거에요. 예상했던 것과 매우 다르죠.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Direction</span> = {\n  <span class=\"hljs-title class_\">Up</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-number\">0</span>: <span class=\"hljs-string\">'Up'</span>,\n  <span class=\"hljs-title class_\">Down</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">'Down'</span>\n}\n</code></pre>\n<p>만약 Object.values(Direction)을 실행하면 [\"Up, \"Down\", 0, 1]과 같은 결과를 얻게 됩니다. 이것은 예상치 못한 결과이며 제대로 된 객체가 아닙니다.</p>\n<p>이것이 enum에 대해 짜증나는 첫 번째 점입니다. 기대에 맞게 동작하지 않는다는 것이죠.</p>\n<div class=\"content-ad\"></div>\n<p>문자열 열거형의 경우에는 적절한 객체가 생성됩니다.</p>\n<pre><code class=\"hljs language-js\">enum <span class=\"hljs-title class_\">Direction</span>  {\n  <span class=\"hljs-variable constant_\">UP</span> = <span class=\"hljs-string\">\"Up\"</span>,\n  <span class=\"hljs-variable constant_\">DOWN</span> = <span class=\"hljs-string\">\"Down\"</span>,\n}\n\n<span class=\"hljs-comment\">// 변환된 코드 </span>\n<span class=\"hljs-meta\">\n\"use strict\"</span>;\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Direction</span>;\n(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Direction</span>) {\n    <span class=\"hljs-title class_\">Direction</span>[<span class=\"hljs-string\">\"UP\"</span>] = <span class=\"hljs-string\">\"Up\"</span>;\n    <span class=\"hljs-title class_\">Direction</span>[<span class=\"hljs-string\">\"DOWN\"</span>] = <span class=\"hljs-string\">\"Down\"</span>;\n})(<span class=\"hljs-title class_\">Direction</span> || (<span class=\"hljs-title class_\">Direction</span> = {}));\n\n<span class=\"hljs-comment\">// 적절한 JS 객체 </span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Direction</span> = {\n  <span class=\"hljs-string\">\"UP\"</span>: <span class=\"hljs-string\">\"Up\"</span>,\n  <span class=\"hljs-string\">\"DOWN\"</span>: <span class=\"hljs-string\">\"DOWN\"</span>\n}\n</code></pre>\n<p>그럼에도 불구하고 이에는 문제가 있습니다. 이를 보여드릴게요.</p>\n<p>어떤 함수에서 Direction 열거형 값을 액세스하려고 하는 경우를 가정해 봅시다.</p>\n<div class=\"content-ad\"></div>\n<p>열거형 Direction {\nUP= \"위\",\nDOWN = \"아래\",\n}</p>\n<p>함수 logDirection(direction: Direction) {\n콘솔.로그(direction)\n}</p>\n<p>✅ 잘 작동합니다\nlogDirection(Direction.UP)</p>\n<p>❌ 작동하지 않습니다 - 열거형의 멤버값으로 함수를 호출할 수 없습니다\nlogDirection(\"위\")</p>\n<p>logDirection 함수를 Direction의 멤버 값으로 호출할 수 없다는 것을 알 수 있습니다.\nTypeScript를 보면 런타임 값보다는 이름에 신경을 쓴다는 저의 기대대로 동작합니다.</p>\n<p>Direction.UP와 Up의 값은 동일하며 이상적으로 TypeScript는 신경 쓰지 않을 것으로 예상되지만 열거형의 경우 이 규칙이 깨집니다.</p>\n<p>또한 const 열거형도 있으며 열거형을 사용하고 싶다면 유용할 수 있지만 주의할 점도 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> enum <span class=\"hljs-title class_\">Direction</span>  {\n  <span class=\"hljs-variable constant_\">UP</span> = <span class=\"hljs-string\">\"Up\"</span>,\n  <span class=\"hljs-variable constant_\">DOWN</span> = <span class=\"hljs-string\">\"Down\"</span>,\n}\n\n<span class=\"hljs-comment\">// transpile code</span>\n<span class=\"hljs-meta\">\n\"use strict\"</span>;\n<span class=\"hljs-comment\">// nothing</span>\n</code></pre>\n<p>보면 알 수 있듯이 enum을 const로 만드는 즉시, transpile code가 없다는 것은 이 경우 TypeScript에서 처리되며 구현 세부 사항에 대해 끝 사용자를 혼동시키지 않습니다. 멋지죠 😎 하지만 다시 한 번 주의할 점이 있어요.</p>\n<p>이를 사용해서 <strong>왜 절대 사용해서는 안 되는지</strong>에 대해 강조한 문서의 별도 섹션이 있습니다.</p>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/enums.html#const-enum-pitfalls\" rel=\"nofollow\" target=\"_blank\">여기</a>를 참조해주세요.</p>\n<div class=\"content-ad\"></div>\n<h1>열거형의 혼란을 해결하는 방법</h1>\n<p>열거형 대신 값을 수정하지 않을 객체와 함께 항상 as const를 사용해야 합니다.\n빠르게 예시를 살펴보겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Direction</span> = {\n  <span class=\"hljs-attr\">UP</span>: <span class=\"hljs-string\">\"Up\"</span>,\n  <span class=\"hljs-attr\">DOWN</span>: <span class=\"hljs-string\">\"Down\"</span>\n} <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">const</span>\n\n\ntype <span class=\"hljs-title class_\">GetValues</span>&#x3C;T> = T[keyof T]\n\ntype <span class=\"hljs-title class_\">UnionOfObjectValues</span> = <span class=\"hljs-title class_\">GetValues</span>&#x3C;<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Direction</span>>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logDirection</span>(<span class=\"hljs-params\">direction: UnionOfObjectValues</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(direction)\n}\n\n✅ 동작합니다\n<span class=\"hljs-title function_\">logDirection</span>(<span class=\"hljs-title class_\">Direction</span>.<span class=\"hljs-property\">UP</span>)\n\n✅ 또한 동작합니다\n<span class=\"hljs-title function_\">logDirection</span>(<span class=\"hljs-string\">\"Up\"</span>)\n</code></pre>\n<p>이 방법은 TypeScript의 기대에 완벽히 부합하며 작동 방식을 이해하기 쉽게 만듭니다.</p>\n<div class=\"content-ad\"></div>\n<p>만약 더 쉽게 만들고 싶다면, 오브젝트 값 대신 Direction의 키에서 union을 유도할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Direction</span> = {\n  <span class=\"hljs-attr\">UP</span>: <span class=\"hljs-string\">\"Up\"</span>,\n  <span class=\"hljs-attr\">DOWN</span>: <span class=\"hljs-string\">\"Down\"</span>\n} <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">const</span>\n\ntype <span class=\"hljs-title class_\">Directions</span> = keyof <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Direction</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logDirection</span>(<span class=\"hljs-params\">direction: Directions</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${Direction[direction]}</span> is present`</span>)\n}\n\n✅ 잘 작동해요\n<span class=\"hljs-title function_\">logDirection</span>(<span class=\"hljs-string\">\"UP\"</span>)\n\n✅ 잘 작동해요\n<span class=\"hljs-title function_\">logDirection</span>(<span class=\"hljs-string\">\"DOWN\"</span>)\n</code></pre>\n<p>Matt Pocock와 Aaron이 이넘의 최악의 악몽을 설명하는 아주 좋은 비디오가 있어요. 이 비디오가 이 기사를 쓰게 된 동기가 되었죠.</p>\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>우리는 항상 enum을 사용하는 대신 간단한 객체와 어떤 종류의 매직을 사용해야 합니다. enum은 이해하기 쉽고 어떤 놀라움도 주지 않습니다.</p>\n<p>TypeScript는 OOP를 더 중시하기 위해 enum을 도입했지만, 제 생각에 그것은 좋은 결정이 아니었습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}