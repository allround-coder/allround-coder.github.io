{"pageProps":{"post":{"title":"Angular에서 Enum 파워 유저 되는 방법","description":"","date":"2024-06-22 03:13","slug":"2024-06-22-BeaPowerUserofEnumsinAngular","content":"\n\n테이블 태그를 마크다운 형식으로 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n# 기본 Enums\n\nAngular의 Enums은 기본적으로 숫자형입니다:\n\n```js\n// colors.enum.ts\n\nexport enum Color {\n  Blue,  // 0\n  Green, // 1\n  Red    // 2\n}\n```\n\n문자열 Enums도 사용할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nexport enum TimeZone {\n  EasternTime = 'Eastern Time',\n  CentralTime = 'Central Time',\n  MountainTime = 'Mountain Time',\n  PacificTime = 'Pacific Time',\n  AlaskaTime = 'Alaska Time',\n  HawaiiAleutianTime = 'Hawaii-Aleutian Time'\n}\n```\n\n지금 필요에 따라 사용하면 됩니다.\n\n# HTML에서의 Enum\n\nEnum을 가지고 있으면 관련 데이터를 표현하는데 어디서든 사용하고 싶어질 것입니다. 그러나 Angular에서, HTML 코드에서 enum을 사용하는 것은 생각한 것만큼 간단하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n## 코드\n\n```js\n// colors.model.ts\n\nimport { Color } from 'colors.enum.ts';\n\nexport interface ColorsViewModel {\n  Color: typeof Color;\n  colors: Color[];\n  formGroup: FormGroup;\n}\n```\n\n```js\n// colors-example.component.ts\n\nimport { Color } from 'colors.enum.ts';\nimport { ColorsViewModel } from 'colors.model.ts';\n\n@Component({\n  selector: 'colors-example',\n  styleUrls: ['colors-example.component.scss'],\n  templateUrl: 'colors-example.component.html'\n})\nexport class ColorsExampleComponent implements OnInit {\n  @Input({ required: true }) public color: Color;\n\n  public vm: ColorsViewModel;\n\n  public ngOnInit(): void {\n    this.vm = {\n      Color,\n      colors: Object.values(Color),\n      formGroup: this.createFormGroup();\n  }\n\n  private createFormGroup(): FormGroup {\n    return new FormGroup({\n      colorOption: new FormControl<Color>(Color.Green)\n    });\n  }\n}\n```\n\n```js\n<!-- colors-example.component.html -->\n\n<div *ngIf=\"vm\">\n  <ng-container [ngSwitch]=\"color\">\n    <ng-container *ngSwitchCase=\"vm.Color.Blue\">\n      <p style=\"color: blue\">파란색</p>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"vm.Color.Greed\">\n      <p style=\"color: green\">초록색</p>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"vm.Color.Red\">\n      <p style=\"color: red\">빨간색</p>\n    </ng-container>\n  </ng-container>\n\n  <p *ngIf=\"color === vm.Color.Red\">대단해요!</p>\n\n  <form [formGroup]=\"vm.formGroup\">\n    <mat-form-field>\n      <mat-label>색상을 선택하세요</mat-label>\n      <mat-select formControlName=\"colorOption\">\n        <mat-option *ngFor=\"let color of vm.colors\" [value]=\"color\">\n          { color }\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </form>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n## 설명\n\n여기서는 Color enum을 HTML에서 세 가지 다른 방법으로 사용하는 방법을 보여줍니다.\n1. ngSwitch에서\n2. === 비교에서\n3. select/dropdown에서\n\nColor enum의 실제 값들을 참조하여 enum을 사용합니다. 그러기 위해 colors.model.ts에서 Color: typeof Color라는 중요한 코드가 있습니다. 이 코드는 enum을 뷰 모델 개체에 추가하여 *ngIf=\"color === 2와 같은 것을 코딩하지 않고도 HTML에서 참조할 수 있도록 합니다.\n\n그리고 dropdown에서는 Object.values(Color);를 사용하여 mat-select 옵션을 재입력할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n탁월하네요, 맞죠?\n\n# TypeScript에서 Enum 사용하기\n\nTypeScript에서 Enum을 사용하여 비교하는 것은 매우 간단합니다.\n\n```js\nif (this.color === Color.Blue) {\n  console.log('바다를 좋아하나요?');\n}\n\nswitch(this.color) {\n  case Color.Blue:\n    console.log('바다를 좋아하나요?');\n    break;\n  case Color.Green:\n    console.log('잔디를 좋아하나요?');\n    break;\n  case Color.Red:\n    console.log('일출을 좋아하나요?');\n    break;\n  default:\n    console.log('기본 색상이 아닙니다.');\n}\n```\n\n<div class=\"content-ad\"></div>\n\n하지만 열거형(enum)에서 모든 값을 사용하고 싶지 않을 때는 어떻게 해야 할까요?\n\n색상 열거형(enum)을 변경하고 확장해 봅시다:\n\n```js\n// colors.enum.ts\n\nexport enum Color {\n  Black,\n  Blue,\n  Brown,\n  Green,\n  Indigo,\n  Orange,\n  Red,\n  Yellow,\n  Violet\n}\n```\n\n이제 색상을 서버로 전달하여 처리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst coloredShoes: Shoes[] = await this.colorService\n  .getShoesOfColor(this.vm.formGroup.get('colorOption'));\n```\n\n이제, 모든 색상을 사용하고 싶다고 상상해 봅시다:\n\n```js\nconst allShoes: Shoes[] = await this.colorService\n  .getShoesOfColor(Object.values(Color));\n```\n\n하지만 만약 일부 색상만 사용하고 싶다면 어떻게 해야 할까요?\n\n<div class=\"content-ad\"></div>\n\n이렇게 할 수 있어요:\n\n```js\nconst rainbowShoes: Shoes[] = await this.colorService\n  .getShoesOfColor([\n     Color.Red,\n     Color.Orange,\n     Color.Yellow,\n     Color.Green,\n     Color.Blue,\n     Color.Indigo,\n     Color.Violet\n   ]);\n```\n\n하지만 만약 16개 색상, 64개 색상 또는 256개 색상이 있는 Color enum이 있다면 어떻게 될까요? 아이디어를 이해하셨죠. 경우에 따라서는 원하는 enum 값이 아닌 것을 지정하는 것이 더 쉬울 수 있습니다. 하지만 \"파란색 계통이 아닌 모든 신발\"과 같은 것을 어떻게 지정할 수 있을까요? Enum은 Object.values(Color).not([Color.Blue, Color.Indigo]);와 같이 쉬운 방법을 제공하지 않습니다.\n\nTypeScript 제네릭이 해결책을 제공합니다!\n\n<div class=\"content-ad\"></div>\n\n```js\n/**\n * 주어진 enum 및 허용되지 않는 값에 따라 enum 값을 포함하는 배열을 반환합니다.\n *\n * @param myEnum enum의 이름입니다.\n * @param disallowedValues 반환되지 말아야할 myEnum 값들의 배열입니다.\n *\n * @return 허용되지 않는 값들을 제외한 모든 myEnum 값들의 배열입니다.\n */\nexport const numericEnumFilterOut: Function =\n  <R extends number,\n   T extends {[key: string]: R}>(myEnum: T, disallowedValues: R[]): R[] =>\n    Object.entries(myEnum)\n      .filter((type: [string, string | R]): boolean =>\n        typeof type[1] === 'number' && !disallowedValues.includes(type[1]))\n      .map((type: [string, R]): [string, R] => type as [string, R])\n      .map(([, value]: [string, R]): R => value);\n```\n\n## 사용법\n\n```js\nconst noBlue: Color[] =\n  numericEnumFilterOut(Color, [Color.Blue, Color.Indigo]);\n\n// noBlue = [Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Violet]\n```\n\n이제 다음과 같이 사용할 수 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n상수 비파란신: Shoes[] = await this.colorService\n  .getShoesOfColor(numericEnumFilterOut(Color, [Color.Blue, Color.Indigo]));\n```\n\n# 결론\n\nEnum은 깔끔한 코드를 작성하는 데 매우 강력한 도구입니다. TypeScript와 HTML 모두에서 사용하는 방법이 많습니다. 코딩할 때 강력한 무기가 될 수 있습니다. 즐거운 코딩하세요!\n\n# 간단히 말하면 🚀\n\n<div class=\"content-ad\"></div>\n\n인 플레인 잉글리쉬 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 반드시 박수를 보내고 작가를 팔로우해주세요 👏\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼 방문: 스타카데믹 | 코피드 | 벤처 | 큐브드\n- PlainEnglish.io에서 더 많은 콘텐츠를 확인하세요","ogImage":{"url":"/assets/img/2024-06-22-BeaPowerUserofEnumsinAngular_0.png"},"coverImage":"/assets/img/2024-06-22-BeaPowerUserofEnumsinAngular_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>테이블 태그를 마크다운 형식으로 변경해주세요.</p>\n<div class=\"content-ad\"></div>\n<h1>기본 Enums</h1>\n<p>Angular의 Enums은 기본적으로 숫자형입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// colors.enum.ts</span>\n\n<span class=\"hljs-keyword\">export</span> enum <span class=\"hljs-title class_\">Color</span> {\n  <span class=\"hljs-title class_\">Blue</span>,  <span class=\"hljs-comment\">// 0</span>\n  <span class=\"hljs-title class_\">Green</span>, <span class=\"hljs-comment\">// 1</span>\n  <span class=\"hljs-title class_\">Red</span>    <span class=\"hljs-comment\">// 2</span>\n}\n</code></pre>\n<p>문자열 Enums도 사용할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> enum <span class=\"hljs-title class_\">TimeZone</span> {\n  <span class=\"hljs-title class_\">EasternTime</span> = <span class=\"hljs-string\">'Eastern Time'</span>,\n  <span class=\"hljs-title class_\">CentralTime</span> = <span class=\"hljs-string\">'Central Time'</span>,\n  <span class=\"hljs-title class_\">MountainTime</span> = <span class=\"hljs-string\">'Mountain Time'</span>,\n  <span class=\"hljs-title class_\">PacificTime</span> = <span class=\"hljs-string\">'Pacific Time'</span>,\n  <span class=\"hljs-title class_\">AlaskaTime</span> = <span class=\"hljs-string\">'Alaska Time'</span>,\n  <span class=\"hljs-title class_\">HawaiiAleutianTime</span> = <span class=\"hljs-string\">'Hawaii-Aleutian Time'</span>\n}\n</code></pre>\n<p>지금 필요에 따라 사용하면 됩니다.</p>\n<h1>HTML에서의 Enum</h1>\n<p>Enum을 가지고 있으면 관련 데이터를 표현하는데 어디서든 사용하고 싶어질 것입니다. 그러나 Angular에서, HTML 코드에서 enum을 사용하는 것은 생각한 것만큼 간단하지 않습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>코드</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// colors.model.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Color</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'colors.enum.ts'</span>;\n\n<span class=\"hljs-keyword\">export</span> interface <span class=\"hljs-title class_\">ColorsViewModel</span> {\n  <span class=\"hljs-title class_\">Color</span>: <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Color</span>;\n  <span class=\"hljs-attr\">colors</span>: <span class=\"hljs-title class_\">Color</span>[];\n  <span class=\"hljs-attr\">formGroup</span>: <span class=\"hljs-title class_\">FormGroup</span>;\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// colors-example.component.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Color</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'colors.enum.ts'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ColorsViewModel</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'colors.model.ts'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'colors-example'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'colors-example.component.scss'</span>],\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'colors-example.component.html'</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ColorsExampleComponent</span> implements <span class=\"hljs-title class_\">OnInit</span> {\n  @<span class=\"hljs-title class_\">Input</span>({ <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> }) public <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Color</span>;\n\n  public <span class=\"hljs-attr\">vm</span>: <span class=\"hljs-title class_\">ColorsViewModel</span>;\n\n  public <span class=\"hljs-title function_\">ngOnInit</span>(): <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span> = {\n      <span class=\"hljs-title class_\">Color</span>,\n      <span class=\"hljs-attr\">colors</span>: <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">values</span>(<span class=\"hljs-title class_\">Color</span>),\n      <span class=\"hljs-attr\">formGroup</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">createFormGroup</span>();\n  }\n\n  private <span class=\"hljs-title function_\">createFormGroup</span>(): <span class=\"hljs-title class_\">FormGroup</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormGroup</span>({\n      <span class=\"hljs-attr\">colorOption</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormControl</span>&#x3C;<span class=\"hljs-title class_\">Color</span>>(<span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Green</span>)\n    });\n  }\n}\n</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;!-- colors-example.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">html</span> -->\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"vm\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ng-container</span> [<span class=\"hljs-attr\">ngSwitch</span>]=<span class=\"hljs-string\">\"color\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ng-container</span> *<span class=\"hljs-attr\">ngSwitchCase</span>=<span class=\"hljs-string\">\"vm.Color.Blue\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: blue\"</span>></span>파란색<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ng-container</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ng-container</span> *<span class=\"hljs-attr\">ngSwitchCase</span>=<span class=\"hljs-string\">\"vm.Color.Greed\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: green\"</span>></span>초록색<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ng-container</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ng-container</span> *<span class=\"hljs-attr\">ngSwitchCase</span>=<span class=\"hljs-string\">\"vm.Color.Red\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: red\"</span>></span>빨간색<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ng-container</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ng-container</span>></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"color === vm.Color.Red\"</span>></span>대단해요!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"vm.formGroup\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">mat-form-field</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">mat-label</span>></span>색상을 선택하세요<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">mat-label</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">mat-select</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"colorOption\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">mat-option</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let color of vm.colors\"</span> [<span class=\"hljs-attr\">value</span>]=<span class=\"hljs-string\">\"color\"</span>></span>\n          { color }\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">mat-option</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">mat-select</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">mat-form-field</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>설명</h2>\n<p>여기서는 Color enum을 HTML에서 세 가지 다른 방법으로 사용하는 방법을 보여줍니다.</p>\n<ol>\n<li>ngSwitch에서</li>\n<li>=== 비교에서</li>\n<li>select/dropdown에서</li>\n</ol>\n<p>Color enum의 실제 값들을 참조하여 enum을 사용합니다. 그러기 위해 colors.model.ts에서 Color: typeof Color라는 중요한 코드가 있습니다. 이 코드는 enum을 뷰 모델 개체에 추가하여 *ngIf=\"color === 2와 같은 것을 코딩하지 않고도 HTML에서 참조할 수 있도록 합니다.</p>\n<p>그리고 dropdown에서는 Object.values(Color);를 사용하여 mat-select 옵션을 재입력할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>탁월하네요, 맞죠?</p>\n<h1>TypeScript에서 Enum 사용하기</h1>\n<p>TypeScript에서 Enum을 사용하여 비교하는 것은 매우 간단합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">color</span> === <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Blue</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'바다를 좋아하나요?'</span>);\n}\n\n<span class=\"hljs-keyword\">switch</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">color</span>) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Blue</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'바다를 좋아하나요?'</span>);\n    <span class=\"hljs-keyword\">break</span>;\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Green</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'잔디를 좋아하나요?'</span>);\n    <span class=\"hljs-keyword\">break</span>;\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Red</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'일출을 좋아하나요?'</span>);\n    <span class=\"hljs-keyword\">break</span>;\n  <span class=\"hljs-attr\">default</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'기본 색상이 아닙니다.'</span>);\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>하지만 열거형(enum)에서 모든 값을 사용하고 싶지 않을 때는 어떻게 해야 할까요?</p>\n<p>색상 열거형(enum)을 변경하고 확장해 봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// colors.enum.ts</span>\n\n<span class=\"hljs-keyword\">export</span> enum <span class=\"hljs-title class_\">Color</span> {\n  <span class=\"hljs-title class_\">Black</span>,\n  <span class=\"hljs-title class_\">Blue</span>,\n  <span class=\"hljs-title class_\">Brown</span>,\n  <span class=\"hljs-title class_\">Green</span>,\n  <span class=\"hljs-title class_\">Indigo</span>,\n  <span class=\"hljs-title class_\">Orange</span>,\n  <span class=\"hljs-title class_\">Red</span>,\n  <span class=\"hljs-title class_\">Yellow</span>,\n  <span class=\"hljs-title class_\">Violet</span>\n}\n</code></pre>\n<p>이제 색상을 서버로 전달하여 처리할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">coloredShoes</span>: <span class=\"hljs-title class_\">Shoes</span>[] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colorService</span>\n  .<span class=\"hljs-title function_\">getShoesOfColor</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>.<span class=\"hljs-property\">formGroup</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'colorOption'</span>));\n</code></pre>\n<p>이제, 모든 색상을 사용하고 싶다고 상상해 봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">allShoes</span>: <span class=\"hljs-title class_\">Shoes</span>[] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colorService</span>\n  .<span class=\"hljs-title function_\">getShoesOfColor</span>(<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">values</span>(<span class=\"hljs-title class_\">Color</span>));\n</code></pre>\n<p>하지만 만약 일부 색상만 사용하고 싶다면 어떻게 해야 할까요?</p>\n<div class=\"content-ad\"></div>\n<p>이렇게 할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">rainbowShoes</span>: <span class=\"hljs-title class_\">Shoes</span>[] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colorService</span>\n  .<span class=\"hljs-title function_\">getShoesOfColor</span>([\n     <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Red</span>,\n     <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Orange</span>,\n     <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Yellow</span>,\n     <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Green</span>,\n     <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Blue</span>,\n     <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Indigo</span>,\n     <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Violet</span>\n   ]);\n</code></pre>\n<p>하지만 만약 16개 색상, 64개 색상 또는 256개 색상이 있는 Color enum이 있다면 어떻게 될까요? 아이디어를 이해하셨죠. 경우에 따라서는 원하는 enum 값이 아닌 것을 지정하는 것이 더 쉬울 수 있습니다. 하지만 \"파란색 계통이 아닌 모든 신발\"과 같은 것을 어떻게 지정할 수 있을까요? Enum은 Object.values(Color).not([Color.Blue, Color.Indigo]);와 같이 쉬운 방법을 제공하지 않습니다.</p>\n<p>TypeScript 제네릭이 해결책을 제공합니다!</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/**\n * 주어진 enum 및 허용되지 않는 값에 따라 enum 값을 포함하는 배열을 반환합니다.\n *\n * <span class=\"hljs-doctag\">@param</span> myEnum enum의 이름입니다.\n * <span class=\"hljs-doctag\">@param</span> disallowedValues 반환되지 말아야할 myEnum 값들의 배열입니다.\n *\n * <span class=\"hljs-doctag\">@return</span> 허용되지 않는 값들을 제외한 모든 myEnum 값들의 배열입니다.\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">numericEnumFilterOut</span>: <span class=\"hljs-title class_\">Function</span> =\n  &#x3C;R <span class=\"hljs-keyword\">extends</span> number,\n   T <span class=\"hljs-keyword\">extends</span> {[<span class=\"hljs-attr\">key</span>: string]: R}>(<span class=\"hljs-attr\">myEnum</span>: T, <span class=\"hljs-attr\">disallowedValues</span>: R[]): R[] =>\n    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">entries</span>(myEnum)\n      .<span class=\"hljs-title function_\">filter</span>((<span class=\"hljs-attr\">type</span>: [string, string | R]): <span class=\"hljs-function\"><span class=\"hljs-params\">boolean</span> =></span>\n        <span class=\"hljs-keyword\">typeof</span> type[<span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">'number'</span> &#x26;&#x26; !disallowedValues.<span class=\"hljs-title function_\">includes</span>(type[<span class=\"hljs-number\">1</span>]))\n      .<span class=\"hljs-title function_\">map</span>((<span class=\"hljs-attr\">type</span>: [string, R]): [string, R] => type <span class=\"hljs-keyword\">as</span> [string, R])\n      .<span class=\"hljs-title function_\">map</span>(([, value]: [string, R]): <span class=\"hljs-function\"><span class=\"hljs-params\">R</span> =></span> value);\n</code></pre>\n<h2>사용법</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">noBlue</span>: <span class=\"hljs-title class_\">Color</span>[] =\n  <span class=\"hljs-title function_\">numericEnumFilterOut</span>(<span class=\"hljs-title class_\">Color</span>, [<span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Blue</span>, <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Indigo</span>]);\n\n<span class=\"hljs-comment\">// noBlue = [Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Violet]</span>\n</code></pre>\n<p>이제 다음과 같이 사용할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">상수 비파란신: <span class=\"hljs-title class_\">Shoes</span>[] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colorService</span>\n  .<span class=\"hljs-title function_\">getShoesOfColor</span>(<span class=\"hljs-title function_\">numericEnumFilterOut</span>(<span class=\"hljs-title class_\">Color</span>, [<span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Blue</span>, <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Indigo</span>]));\n</code></pre>\n<h1>결론</h1>\n<p>Enum은 깔끔한 코드를 작성하는 데 매우 강력한 도구입니다. TypeScript와 HTML 모두에서 사용하는 방법이 많습니다. 코딩할 때 강력한 무기가 될 수 있습니다. 즐거운 코딩하세요!</p>\n<h1>간단히 말하면 🚀</h1>\n<div class=\"content-ad\"></div>\n<p>인 플레인 잉글리쉬 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:</p>\n<ul>\n<li>반드시 박수를 보내고 작가를 팔로우해주세요 👏</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터</li>\n<li>다른 플랫폼 방문: 스타카데믹 | 코피드 | 벤처 | 큐브드</li>\n<li>PlainEnglish.io에서 더 많은 콘텐츠를 확인하세요</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}