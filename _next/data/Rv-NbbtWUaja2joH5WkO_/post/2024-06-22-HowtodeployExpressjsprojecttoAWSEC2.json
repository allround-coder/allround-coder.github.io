{"pageProps":{"post":{"title":"Expressjs 프로젝트를 AWS EC2에 배포하는 방법","description":"","date":"2024-06-22 14:03","slug":"2024-06-22-HowtodeployExpressjsprojecttoAWSEC2","content":"\n\n<img src=\"/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_0.png\" />\n\n# 목차\n\n- AWS EC2 인스턴스 생성 (Linux)\n- SSH 액세스용 키페어 생성\n- 서버 환경 설정\n- 서버 어플리케이션 실행\n\n# 1. AWS EC2 인스턴스 생성 (Linux)\n\n<div class=\"content-ad\"></div>\n\nAWS 콘솔에 로그인하면 상단 바에 검색 상자가 나타납니다. \"ec2\"를 입력하고 EC2 대시보드를 엽니다.\n\n\n![이미지 설명](/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_1.png)\n\n\nEC2 대시보드에서 '인스턴스 시작' 패널을 찾아 새 인스턴스를 생성하려면 '인스턴스 시작'을 클릭하세요. 이렇게 하면 아래와 같은 새 페이지가 열릴 것입니다.\n\n\n![이미지 설명](/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_2.png)\n\n\n<div class=\"content-ad\"></div>\n\n인스턴스 이름을 입력하고 인스턴스 OS로 \"Amazon Linux\"을 선택하세요.\n\n\"Key pair(login)\" 패널에서 인스턴스용 키페어를 만드세요. 이미 키페어가 있는 경우, 기존 것을 선택하시면 됩니다.\n\n<img src=\"/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_3.png\" />\n\n그리고 .pem 파일을 저장하여 EC2 인스턴스에 액세스하세요.\n\n<div class=\"content-ad\"></div>\n\n# 2. SSH 액세스를 위한 키페어 생성\n\n이미 Node 프로젝트용 EC2 인스턴스가 있으면이 단계를 건너 뛰세요.\n\nEC2 인스턴스가 있지만 SSH 액세스를 위한 키페어가 없는 경우 \"EC2 Key pair\" 페이지를 만들 수 있습니다.\n\n![EC2 Key pair](/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_4.png)\n\n<div class=\"content-ad\"></div>\n\n![image](/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_5.png)\n\n\"Create key pair\"를 클릭하여 .pem 파일을 다운로드할 수 있으며, 이것은 \"Key pairs\" 페이지 표에 나열됩니다.\n\n예를 들어, pem 파일 이름이 ec2-key.pem이고 인스턴스 이름이 ec2-012-345-678.computer-1.amazonaws.com이라고 가정해 봅시다.\n\n이제 터미널에서 EC2 인스턴스에 액세스할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n터미널을 열고 ec2-key.pem 파일이 있는 디렉토리로 이동해주세요.\n\n```js\n$ ssh -i ec2-key.pem ec2-user@ec2-012-345-678.computer-1.amazonaws.com\n\n\"Amazon Linux\"의 새로운 릴리스가 있습니다.\n  Version 2023.3.20240219:\n  Version 2023.3.20240304:\n  Version 2023.3.20240312:\n  Version 2023.4.20240319:\n  Version 2023.4.20240401:\n  Version 2023.4.20240416:\n  Version 2023.4.20240429:\n  Version 2023.4.20240513:\n  Version 2023.4.20240528:\n  Version 2023.4.20240611:\n전체 릴리스 및 버전 업데이트 정보 확인을 위해 \"/usr/bin/dnf check-release-update\"를 실행하세요.\n   ,     #_\n   ~\\_  ####_        Amazon Linux 2023\n  ~~  \\_#####\\\n  ~~     \\###|\n  ~~       \\#/ ___   https://aws.amazon.com/linux/amazon-linux-2023\n   ~~       V~' '->\n    ~~~         /\n      ~~._.   _/\n         _/ _/\n       _/m/'\n마지막 로그인: 2024년 6월 20일 목요일 20:21:34, 91.74.112.249부터 로그인했습니다.\n-bash: export: `.bashrc': not a valid identifier\n[ec2-user@EC2_HOSTNAME ~]$\n```\n\n콘솔에 위와 같은 메시지가 나타날 것입니다.\n\n# 3. 서버 환경 설정\n\n<div class=\"content-ad\"></div>\n\nExpress.js 서버를 실행하려면 EC2에 Node를 설치해야 합니다.\n\nnvm을 사용하여 Node.js를 설치하세요.\n\nnvm 설치 방법:\n\n```js\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n```\n\n<div class=\"content-ad\"></div>\n\nNode(20)을 설치하세요:\n\n```js\nnvm install 20\n```\n\n올바르게 설치되었는지 확인하세요:\n\n```js\nnode --version\n```\n\n<div class=\"content-ad\"></div>\n\n만약 GitHub에 Express 프로젝트가 있다면, git clone 명령어를 사용하여 프로젝트를 EC2로 가져올 수 있습니다.\n\n파일과 디렉토리를 살펴보려면 ls를 사용하세요. 숨겨진 파일과 디렉토리를 모두 볼 때는 ls -a를 사용하세요. 그리고 마침표(.)로 시작하는 모든 파일과 디렉토리를 볼 수 있습니다.\n\n만약 GitHub 프로젝트가 없다면 지금은 괜찮습니다.\n\nnode-app이라는 폴더를 만들기 위해 mkdir node-app를 사용하세요. Node.js 프로젝트를 만들기 위해 npm init -y를 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n```js\ncd mkdir\nnpm init -y\n```\n\n그런 다음 이 간단한 Express.js 애플리케이션 코드를 붙혀넣어주세요.\n\n```js\nnpm install express\n\nnano app.js\n```\n\n이 코드를 app.js에 복사해주세요.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nconst express = require('express');\n\n// express의 인스턴스 생성\nconst app = express();\n\n// 루트 URL (\"/\")에 대한 라우트 정의\napp.get('/', (req, res) => {\n    res.send('Hello World!');\n});\n\n// 포트 3000에서 서버 시작\nconst port = 3000;\napp.listen(port, () => {\n    console.log(`서버가 http://localhost:${port}에서 실행 중입니다.`);\n});\n```\n\n이제 간단한 hello-world Node 서버 애플리케이션이 준비되었습니다.\n\n`node app` 명령을 실행하면 콘솔에 '서버가 http://localhost:3000에서 실행 중입니다.' 메시지가 표시됩니다.\n\n브라우저를 열고 다음 URL을 입력하여 확인해보세요: `http://ec2-012-345-678.computer-1.amazonaws.com:3000`. 브라우저에 'Hello World!'가 표시될 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n좋아요, 거의 완료하셨네요!\n\n보이지 않으신가요? 제게 알려주세요.\n\n# 4. 서버 애플리케이션 실행\n\n터미널을 닫으면 서버 애플리케이션이 종료됩니다.\n\n<div class=\"content-ad\"></div>\n\n서버 애플리케이션을 실행하려면 pm2 모듈을 사용할 수 있어요.\n\npm2 모듈을 전역으로 설치하고 프로젝트 폴더에서 pm2 start app을 실행하세요.\n\npm2에 대한 자세한 정보는 pm2 공식 웹사이트에서 확인할 수 있어요.","ogImage":{"url":"/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_0.png"},"coverImage":"/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_0.png\">\n<h1>목차</h1>\n<ul>\n<li>AWS EC2 인스턴스 생성 (Linux)</li>\n<li>SSH 액세스용 키페어 생성</li>\n<li>서버 환경 설정</li>\n<li>서버 어플리케이션 실행</li>\n</ul>\n<h1>1. AWS EC2 인스턴스 생성 (Linux)</h1>\n<div class=\"content-ad\"></div>\n<p>AWS 콘솔에 로그인하면 상단 바에 검색 상자가 나타납니다. \"ec2\"를 입력하고 EC2 대시보드를 엽니다.</p>\n<p><img src=\"/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_1.png\" alt=\"이미지 설명\"></p>\n<p>EC2 대시보드에서 '인스턴스 시작' 패널을 찾아 새 인스턴스를 생성하려면 '인스턴스 시작'을 클릭하세요. 이렇게 하면 아래와 같은 새 페이지가 열릴 것입니다.</p>\n<p><img src=\"/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_2.png\" alt=\"이미지 설명\"></p>\n<div class=\"content-ad\"></div>\n<p>인스턴스 이름을 입력하고 인스턴스 OS로 \"Amazon Linux\"을 선택하세요.</p>\n<p>\"Key pair(login)\" 패널에서 인스턴스용 키페어를 만드세요. 이미 키페어가 있는 경우, 기존 것을 선택하시면 됩니다.</p>\n<img src=\"/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_3.png\">\n<p>그리고 .pem 파일을 저장하여 EC2 인스턴스에 액세스하세요.</p>\n<div class=\"content-ad\"></div>\n<h1>2. SSH 액세스를 위한 키페어 생성</h1>\n<p>이미 Node 프로젝트용 EC2 인스턴스가 있으면이 단계를 건너 뛰세요.</p>\n<p>EC2 인스턴스가 있지만 SSH 액세스를 위한 키페어가 없는 경우 \"EC2 Key pair\" 페이지를 만들 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_4.png\" alt=\"EC2 Key pair\"></p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-22-HowtodeployExpressjsprojecttoAWSEC2_5.png\" alt=\"image\"></p>\n<p>\"Create key pair\"를 클릭하여 .pem 파일을 다운로드할 수 있으며, 이것은 \"Key pairs\" 페이지 표에 나열됩니다.</p>\n<p>예를 들어, pem 파일 이름이 ec2-key.pem이고 인스턴스 이름이 ec2-012-345-678.computer-1.amazonaws.com이라고 가정해 봅시다.</p>\n<p>이제 터미널에서 EC2 인스턴스에 액세스할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>터미널을 열고 ec2-key.pem 파일이 있는 디렉토리로 이동해주세요.</p>\n<pre><code class=\"hljs language-js\">$ ssh -i ec2-key.<span class=\"hljs-property\">pem</span> ec2-user@ec2-<span class=\"hljs-number\">012</span>-<span class=\"hljs-number\">345</span>-<span class=\"hljs-number\">678.</span>computer-<span class=\"hljs-number\">1.</span>amazonaws.<span class=\"hljs-property\">com</span>\n\n<span class=\"hljs-string\">\"Amazon Linux\"</span>의 새로운 릴리스가 있습니다.\n  <span class=\"hljs-title class_\">Version</span> <span class=\"hljs-number\">2023.3</span><span class=\"hljs-number\">.20240219</span>:\n  <span class=\"hljs-title class_\">Version</span> <span class=\"hljs-number\">2023.3</span><span class=\"hljs-number\">.20240304</span>:\n  <span class=\"hljs-title class_\">Version</span> <span class=\"hljs-number\">2023.3</span><span class=\"hljs-number\">.20240312</span>:\n  <span class=\"hljs-title class_\">Version</span> <span class=\"hljs-number\">2023.4</span><span class=\"hljs-number\">.20240319</span>:\n  <span class=\"hljs-title class_\">Version</span> <span class=\"hljs-number\">2023.4</span><span class=\"hljs-number\">.20240401</span>:\n  <span class=\"hljs-title class_\">Version</span> <span class=\"hljs-number\">2023.4</span><span class=\"hljs-number\">.20240416</span>:\n  <span class=\"hljs-title class_\">Version</span> <span class=\"hljs-number\">2023.4</span><span class=\"hljs-number\">.20240429</span>:\n  <span class=\"hljs-title class_\">Version</span> <span class=\"hljs-number\">2023.4</span><span class=\"hljs-number\">.20240513</span>:\n  <span class=\"hljs-title class_\">Version</span> <span class=\"hljs-number\">2023.4</span><span class=\"hljs-number\">.20240528</span>:\n  <span class=\"hljs-title class_\">Version</span> <span class=\"hljs-number\">2023.4</span><span class=\"hljs-number\">.20240611</span>:\n전체 릴리스 및 버전 업데이트 정보 확인을 위해 <span class=\"hljs-string\">\"/usr/bin/dnf check-release-update\"</span>를 실행하세요.\n   ,     #_\n   ~\\_  ####_        <span class=\"hljs-title class_\">Amazon</span> <span class=\"hljs-title class_\">Linux</span> <span class=\"hljs-number\">2023</span>\n  ~~  \\_#####\\\n  ~~     \\###|\n  ~~       \\#/ ___   <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//aws.amazon.com/linux/amazon-linux-2023</span>\n   ~~       V~<span class=\"hljs-string\">' '</span>->\n    ~~~         /\n      ~~.<span class=\"hljs-property\">_</span>.   _/\n         _/ _/\n       _/m/<span class=\"hljs-string\">'\n마지막 로그인: 2024년 6월 20일 목요일 20:21:34, 91.74.112.249부터 로그인했습니다.\n-bash: export: `.bashrc'</span>: not a valid identifier\n[ec2-user@<span class=\"hljs-title class_\">EC2</span>_HOSTNAME ~]$\n</code></pre>\n<p>콘솔에 위와 같은 메시지가 나타날 것입니다.</p>\n<h1>3. 서버 환경 설정</h1>\n<div class=\"content-ad\"></div>\n<p>Express.js 서버를 실행하려면 EC2에 Node를 설치해야 합니다.</p>\n<p>nvm을 사용하여 Node.js를 설치하세요.</p>\n<p>nvm 설치 방법:</p>\n<pre><code class=\"hljs language-js\">curl -o- <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>Node(20)을 설치하세요:</p>\n<pre><code class=\"hljs language-js\">nvm install <span class=\"hljs-number\">20</span>\n</code></pre>\n<p>올바르게 설치되었는지 확인하세요:</p>\n<pre><code class=\"hljs language-js\">node --version\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>만약 GitHub에 Express 프로젝트가 있다면, git clone 명령어를 사용하여 프로젝트를 EC2로 가져올 수 있습니다.</p>\n<p>파일과 디렉토리를 살펴보려면 ls를 사용하세요. 숨겨진 파일과 디렉토리를 모두 볼 때는 ls -a를 사용하세요. 그리고 마침표(.)로 시작하는 모든 파일과 디렉토리를 볼 수 있습니다.</p>\n<p>만약 GitHub 프로젝트가 없다면 지금은 괜찮습니다.</p>\n<p>node-app이라는 폴더를 만들기 위해 mkdir node-app를 사용하세요. Node.js 프로젝트를 만들기 위해 npm init -y를 사용할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">cd mkdir\nnpm init -y\n</code></pre>\n<p>그런 다음 이 간단한 Express.js 애플리케이션 코드를 붙혀넣어주세요.</p>\n<pre><code class=\"hljs language-js\">npm install express\n\nnano app.<span class=\"hljs-property\">js</span>\n</code></pre>\n<p>이 코드를 app.js에 복사해주세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n\n<span class=\"hljs-comment\">// express의 인스턴스 생성</span>\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n\n<span class=\"hljs-comment\">// 루트 URL (\"/\")에 대한 라우트 정의</span>\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n    res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'Hello World!'</span>);\n});\n\n<span class=\"hljs-comment\">// 포트 3000에서 서버 시작</span>\n<span class=\"hljs-keyword\">const</span> port = <span class=\"hljs-number\">3000</span>;\napp.<span class=\"hljs-title function_\">listen</span>(port, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`서버가 http://localhost:<span class=\"hljs-subst\">${port}</span>에서 실행 중입니다.`</span>);\n});\n</code></pre>\n<p>이제 간단한 hello-world Node 서버 애플리케이션이 준비되었습니다.</p>\n<p><code>node app</code> 명령을 실행하면 콘솔에 '서버가 <a href=\"http://localhost:3000%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000에서</a> 실행 중입니다.' 메시지가 표시됩니다.</p>\n<p>브라우저를 열고 다음 URL을 입력하여 확인해보세요: <code>http://ec2-012-345-678.computer-1.amazonaws.com:3000</code>. 브라우저에 'Hello World!'가 표시될 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>좋아요, 거의 완료하셨네요!</p>\n<p>보이지 않으신가요? 제게 알려주세요.</p>\n<h1>4. 서버 애플리케이션 실행</h1>\n<p>터미널을 닫으면 서버 애플리케이션이 종료됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>서버 애플리케이션을 실행하려면 pm2 모듈을 사용할 수 있어요.</p>\n<p>pm2 모듈을 전역으로 설치하고 프로젝트 폴더에서 pm2 start app을 실행하세요.</p>\n<p>pm2에 대한 자세한 정보는 pm2 공식 웹사이트에서 확인할 수 있어요.</p>\n</body>\n</html>\n"},"__N_SSG":true}