{"pageProps":{"post":{"title":"React JS를 사용하여 어떤 패키지도 사용하지 않고 호버 시 드롭다운 메뉴를 만드는 방법","description":"","date":"2024-05-12 20:22","slug":"2024-05-12-HowtocreateadropdownmenuonhoverinReactJSwithoutanypackage","content":"\n\n<img src=\"https://miro.medium.com/v2/resize:fit:796/1*AXro4l-eefcJcsCr40yw2w.gif\" />\n\nReact에서 외부 패키지를 사용하지 않고 호버 시 드롭다운 메뉴를 만들려면 다음 단계를 따를 수 있습니다:\n\n단계 1: React 프로젝트 설정\n\n아직 React 프로젝트를 설정하지 않은 경우 터미널에 아래 명령을 붙여넣어 새로운 프로젝트를 만들어야 합니다.\n\n\n\n```js\nnpx create-react-app dropdown-menu\n```\n\n단계 2: 드롭다운 컴포넌트 생성\n\n프로젝트 디렉토리 내에 DropdownMenu이라는 이름의 컴포넌트를 생성하고 아래 코드를 붙여넣으세요.\n\n```js\nimport React from \"react\";\n\nconst DropdownMenu = () => {\n  return (\n    <div className=\"dropdown-menu\">\n      <ul>\n        <li>메뉴 1</li>\n        <li>메뉴 2</li>\n        <li>메뉴 3</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default DropdownMenu;\n```\n\n\n\n위의 코드에서는 호버 시에 표시되는 간단한 메뉴를 생성하고 있습니다.\n\n단계 3: 드롭다운 컴포넌트 가져오고 이벤트 처리하기\n\n당신의 주요 컴포넌트(App.js 등)에서 DropdownMenu 컴포넌트를 가져오고 호버 이벤트를 처리해보세요.\n\n```js\nimport { useState } from \"react\";\nimport DropdownMenu from \"./DropdownMenu\";\nimport \"./App.css\";\n\nfunction App() {\n  const [isDropdownVisible, setDropdownVisible] = useState(false);\n\n  const handleMouseEnter = () => {\n    setDropdownVisible(true);\n  };\n\n  const handleMouseLeave = () => {\n    setDropdownVisible(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div\n          className=\"menu\"\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n        >\n          <button>Dropdown Menu</button>\n          {/* <DropdownMenu /> */}\n          {isDropdownVisible && <DropdownMenu />}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n\n\n위의 코드에서 App 컴포넌트는 사용자가 요소 위로 마우스를 올리면 true로 설정되는 상태 변수 isDropdownVisible을 관리하며, 마우스가 요소를 벗어나면 false로 설정됩니다. handleMouseEnter 및 handleMouseLeave 함수는 상태를 적절히 업데이트하는 데 사용됩니다.\n\n단계 4: 스타일 추가\n\n이제 드롭다운 컴포넌트에 일부 스타일을 추가하세요. 아래 CSS를 App.css 파일에 붙여넣기만 하면 됩니다.\n\n```js\nheader {\n  width: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\nbutton {\n  background: #000;\n  box-shadow: 0px 10px 30px 0px rgba(82, 63, 105, 0.05);\n  color: #fff;\n  padding: 12px 25px;\n  border: none;\n  cursor: pointer;\n}\n\nul {\n  list-style: none;\n  padding: unset;\n  margin: unset;\n}\n\nli {\n  padding: 14px;\n  transition: all linear 0.3s;\n}\n\nli:hover {\n  background: gray;\n  cursor: pointer;\n  color: #fff;\n}\n\n.dropdown-menu {\n  background: #fff;\n  box-shadow: 0px 10px 30px 0px rgba(82, 63, 105, 0.05);\n  transition: all linear 0.3s;\n}\n```\n\n\n\n오늘은 여기까지입니다. 아래에서 GitHub 저장소와 Codesandbox 데모를 확인하실 수 있어요.\n\n궁금한 점이 있으시면 LinkedIn을 통해 연락해주세요.","ogImage":{"url":"/assets/img/2024-05-12-HowtocreateadropdownmenuonhoverinReactJSwithoutanypackage_0.png"},"coverImage":"/assets/img/2024-05-12-HowtocreateadropdownmenuonhoverinReactJSwithoutanypackage_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"https://miro.medium.com/v2/resize:fit:796/1*AXro4l-eefcJcsCr40yw2w.gif\">\n<p>React에서 외부 패키지를 사용하지 않고 호버 시 드롭다운 메뉴를 만들려면 다음 단계를 따를 수 있습니다:</p>\n<p>단계 1: React 프로젝트 설정</p>\n<p>아직 React 프로젝트를 설정하지 않은 경우 터미널에 아래 명령을 붙여넣어 새로운 프로젝트를 만들어야 합니다.</p>\n<pre><code class=\"hljs language-js\">npx create-react-app dropdown-menu\n</code></pre>\n<p>단계 2: 드롭다운 컴포넌트 생성</p>\n<p>프로젝트 디렉토리 내에 DropdownMenu이라는 이름의 컴포넌트를 생성하고 아래 코드를 붙여넣으세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">DropdownMenu</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"dropdown-menu\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>메뉴 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>메뉴 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>메뉴 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">DropdownMenu</span>;\n</code></pre>\n<p>위의 코드에서는 호버 시에 표시되는 간단한 메뉴를 생성하고 있습니다.</p>\n<p>단계 3: 드롭다운 컴포넌트 가져오고 이벤트 처리하기</p>\n<p>당신의 주요 컴포넌트(App.js 등)에서 DropdownMenu 컴포넌트를 가져오고 호버 이벤트를 처리해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">DropdownMenu</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./DropdownMenu\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./App.css\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [isDropdownVisible, setDropdownVisible] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleMouseEnter</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">setDropdownVisible</span>(<span class=\"hljs-literal\">true</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleMouseLeave</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">setDropdownVisible</span>(<span class=\"hljs-literal\">false</span>);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App-header\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n          <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"menu\"</span>\n          <span class=\"hljs-attr\">onMouseEnter</span>=<span class=\"hljs-string\">{handleMouseEnter}</span>\n          <span class=\"hljs-attr\">onMouseLeave</span>=<span class=\"hljs-string\">{handleMouseLeave}</span>\n        ></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>Dropdown Menu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n          {/* <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">DropdownMenu</span> /></span> */}\n          {isDropdownVisible &#x26;&#x26; <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">DropdownMenu</span> /></span>}\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>위의 코드에서 App 컴포넌트는 사용자가 요소 위로 마우스를 올리면 true로 설정되는 상태 변수 isDropdownVisible을 관리하며, 마우스가 요소를 벗어나면 false로 설정됩니다. handleMouseEnter 및 handleMouseLeave 함수는 상태를 적절히 업데이트하는 데 사용됩니다.</p>\n<p>단계 4: 스타일 추가</p>\n<p>이제 드롭다운 컴포넌트에 일부 스타일을 추가하세요. 아래 CSS를 App.css 파일에 붙여넣기만 하면 됩니다.</p>\n<pre><code class=\"hljs language-js\">header {\n  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>%;\n  <span class=\"hljs-attr\">position</span>: relative;\n  <span class=\"hljs-attr\">display</span>: flex;\n  align-<span class=\"hljs-attr\">items</span>: center;\n  justify-<span class=\"hljs-attr\">content</span>: center;\n}\n\nbutton {\n  <span class=\"hljs-attr\">background</span>: #<span class=\"hljs-number\">000</span>;\n  box-<span class=\"hljs-attr\">shadow</span>: 0px 10px 30px 0px <span class=\"hljs-title function_\">rgba</span>(<span class=\"hljs-number\">82</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">105</span>, <span class=\"hljs-number\">0.05</span>);\n  <span class=\"hljs-attr\">color</span>: #fff;\n  <span class=\"hljs-attr\">padding</span>: 12px 25px;\n  <span class=\"hljs-attr\">border</span>: none;\n  <span class=\"hljs-attr\">cursor</span>: pointer;\n}\n\nul {\n  list-<span class=\"hljs-attr\">style</span>: none;\n  <span class=\"hljs-attr\">padding</span>: unset;\n  <span class=\"hljs-attr\">margin</span>: unset;\n}\n\nli {\n  <span class=\"hljs-attr\">padding</span>: 14px;\n  <span class=\"hljs-attr\">transition</span>: all linear <span class=\"hljs-number\">0.</span>3s;\n}\n\n<span class=\"hljs-attr\">li</span>:hover {\n  <span class=\"hljs-attr\">background</span>: gray;\n  <span class=\"hljs-attr\">cursor</span>: pointer;\n  <span class=\"hljs-attr\">color</span>: #fff;\n}\n\n.<span class=\"hljs-property\">dropdown</span>-menu {\n  <span class=\"hljs-attr\">background</span>: #fff;\n  box-<span class=\"hljs-attr\">shadow</span>: 0px 10px 30px 0px <span class=\"hljs-title function_\">rgba</span>(<span class=\"hljs-number\">82</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">105</span>, <span class=\"hljs-number\">0.05</span>);\n  <span class=\"hljs-attr\">transition</span>: all linear <span class=\"hljs-number\">0.</span>3s;\n}\n</code></pre>\n<p>오늘은 여기까지입니다. 아래에서 GitHub 저장소와 Codesandbox 데모를 확인하실 수 있어요.</p>\n<p>궁금한 점이 있으시면 LinkedIn을 통해 연락해주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}