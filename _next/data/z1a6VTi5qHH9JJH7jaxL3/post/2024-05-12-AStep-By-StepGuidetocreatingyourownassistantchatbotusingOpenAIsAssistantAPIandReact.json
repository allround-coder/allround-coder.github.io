{"pageProps":{"post":{"title":"오픈에이아이의 Assistant API와 React를 사용하여 나만의 도우미 챗봇을 만드는 단계별 안내","description":"","date":"2024-05-12 20:53","slug":"2024-05-12-AStep-By-StepGuidetocreatingyourownassistantchatbotusingOpenAIsAssistantAPIandReact","content":"\n## 어시스턴트 API의 힘 이해하기\n\n![이미지](/assets/img/2024-05-12-AStep-By-StepGuidetocreatingyourownassistantchatbotusingOpenAIsAssistantAPIandReact_0.png)\n\n# 요약\n\n고속으로 발전하는 기술 세계에서 OpenAI는 인공 지능 분야에서 선두주자로 등장했습니다. 그들의 최신 작품인 어시스턴트 API는 이미 다양한 산업을 혁신하고 있습니다.\n\n자신만의 개인 비서를 가지고 싶었던 적이 있나요? 더 이상 찾을 필요가 없어요! OpenAI의 어시스턴트 API는 AI의 기능을 활용하고 이를 프로젝트에 원활하게 통합할 수 있는 강력한 도구입니다. 이 API를 활용하여 개발자들은 사용자와 동적 대화를 나누며 관련 정보와 맞춤 경험을 제공할 수 있는 지능형 챗봇을 만들 수 있습니다.\n\n이 글을 더 깊이 이해하면, 새로운 Assistant API를 사용하여 완전히 기능적인 챗봇을 구현하는 방법을 알아볼 것입니다. 이 챗봇은 아이스 하키 전문가로서 특정 지침을 줄 것입니다. 🏒\n\n시작해 봅시다! 👏👏👏👏\n\n## 단계 1: 개발 환경 설정\n\n새로운 리액트 프로젝트를 만들고 필요한 라이브러리와 의존성을 설치하는 것은 어떤 리액트 개발을 시작하는 핵심 단계입니다. 몇 가지 간단한 단계를 따르면 프로젝트를 신속하게 시작할 수 있습니다.\n\n- Node.js와 npm을 설치합니다 (이미 설치되어 있지 않은 경우)\n- 터미널이나 명령 프롬프트를 엽니다\n- 다음 명령어를 실행하여 Create React App을 설치합니다\n\n```js\nnpm install -g create-react-app\n```\n\n4. 다음 명령어를 실행하여 새로운 리액트 앱을 만듭니다 (여기서 \"my-app\"은 앱의 이름입니다)\n\n```bash\nnpx create-react-app my-app --template typescript\n```\n\n5. 해당 명령어를 실행하여 새 앱 디렉토리로 이동합니다.\n\n```bash\ncd my-app\n```\n\n6. Material-UI 및 그 종속성을 설치합니다.\n\n```js\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n7. 다음 명령어를 실행하여 개발 서버를 시작하세요.\n\n```js\nnpm start\n```\n\n이것으로 설정이 완료되었습니다! 이제 새로운 React 앱이 http://localhost:3000 에서 작동해야 합니다. 코드 편집기에서 앱을 열고 필요한 대로 코드를 사용자 정의할 수 있습니다.```\n\n# 단계 2: React 앱 챗봇 컴포넌트 생성\n\n채팅 인터페이스를 위한 컴포넌트를 생성하세요. 각 메시지 컴포넌트를 렌더링하는 Chat 컴포넌트를 만들 수 있습니다.\n\n/src/components/Message.tsx\n\n```js\n// src/components/Message.tsx\nimport React from 'react';\n\ninterface MessageProps {\n  text: string;\n  isUser: boolean;\n}\n\nconst Message: React.FC<MessageProps> = ({ text, isUser }) => {\n  return (\n    <div style={ textAlign: isUser ? 'right' : 'left', margin: '8px' }>\n      <div style={ backgroundColor: isUser ? '#DCF8C6' : '#b8e3fc', padding: '8px', borderRadius: '8px' }>\n        {text}\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n```\n\n/src/components/Chat.tsx\n\n```js\n// src/components/Chat.tsx\nimport React, { useState } from 'react';\nimport { TextField, Button, Container, Grid } from '@mui/material';\nimport Message from './Message';\n\nconst Chat: React.FC = () => {\n  const [messages, setMessages] = useState<string[]>([]);\n  const [input, setInput] = useState<string>('');\n\n  const handleSendMessage = () => {\n    setMessages([...messages, input]);\n    setInput('');\n    // 챗봇 응답을 처리하는 로직을 추가하세요\n  };\n\n  return (\n    <Container>\n      <Grid container direction=\"column\" spacing={2}>\n        <Grid item>\n          {messages.map((message, index) => (\n            <Message key={index} text={message} isUser={index % 2 === 0} />\n          ))}\n        </Grid>\n        <Grid item>\n          <TextField\n            label=\"메시지를 입력하세요\"\n            variant=\"outlined\"\n            fullWidth\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          />\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\n            전송\n          </Button>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Chat;\n```\n\n# 단계 3: Chat 컴포넌트를 App.tsx에 통합하세요\n\nChat 컴포넌트를 사용하도록 src/App.tsx를 수정하세요.\n\n/src/App.tsx\n\n```javascript\n// src/App.tsx\nimport React from 'react';\nimport Chat from './components/Chat';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n         {/* 가운데 정렬 */}\n        <h1 style={ textAlign: 'center' }>React Chatbot</h1>\n      </header>\n      <main>\n        <Chat />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n다음 명령어를 사용하여 React 앱을 실행하세요:\n\n```javascript\nnpm start\n```\n\n# 단계 4: OpenAI 어시스턴트 API로 시작하기\n\n어시스턴트 API를 사용하면 사용자 쿼리를 이해하고 대화식 방식으로 응답하는 지능형 챗봇을 만들 수 있습니다. 이러한 챗봇은 다양한 애플리케이션 및 플랫폼에 통합되어 사용자에게 원활한 지원을 제공할 수 있습니다. 🤖\n\n⚠️ 진행하기 전에 API 키를 생성해야 합니다!\n\n⚠️ OpenAI는 SPA 웹 앱과 같은 클라이언트 사이드 환경에서 API 키를 노출하는 것을 권장하지 않습니다. 요청은 항상 API 키를 안전하게 보관할 수 있는 자체 백엔드 서버를 통해 라우팅해야 합니다. 그러나 간편함을 위해, 우리는 단순하게 유지하고 프론트엔드 개발에 집중할 것입니다.\n\nOpenAI에서 API 키를 얻으려면 다음 단계를 따르세요:\n\n- OpenAI 계정을 만들거나 로그인하세요. 이미 OpenAI 계정이 없는 경우 새로 만들어야 합니다. OpenAI 웹사이트로 이동하여 \"가입하기\" 버튼을 클릭하여 계정을 만들 수 있습니다.\n- API Keys 페이지로 이동하세요. 로그인한 후에는 화면 우측 상단의 계정 이름을 클릭한 다음 \"API Keys\"를 선택하여 API Keys 페이지에 액세스할 수 있습니다.\n- 새 API 키를 생성하세요. API Keys 페이지에서 \"새 비밀 키 생성\" 버튼을 클릭하세요. 이렇게 하면 API 키의 이름을 입력할 수 있는 모달 창이 열립니다.\n- API 키를 저장하세요. API 키를 만든 후에는 반드시 안전한 곳에 저장하세요. 다른 사람과 API 키를 공유하지 마세요. 그렇게 하면 그들이 OpenAI 계정에 액세스할 수 있게 됩니다.\n\nAPI 키를 획득했다면, OpenAI API에 요청을 인증하는 데 사용할 수 있습니다. 이에 대한 자세한 정보는 OpenAI API 설명서에서 찾을 수 있습니다.\n\n## OpenAI Assistant API의 주요 구성 요소:\n\n- 쓰레드: 쓰레드는 Assistant API에서 대화의 기초입니다. 사용자와 어시스턴트 간에 교환된 메시지의 시퀀스를 나타냅니다. 쓰레드는 지속적일 수 있으며, 나중에 사용할 수 있도록 저장하고 검색할 수 있습니다.\n- 메시지: 메시지는 쓰레드 내에서의 개별 통신 단위입니다. 사용자 또는 어시스턴트가 보낼 수 있습니다. 메시지에는 텍스트, 코드, 이미지 또는 다른 파일이 포함될 수 있습니다.\n- 모델: Assistant API는 GPT-3.5 및 GPT-4와 같은 OpenAI의 텍스트 생성 모델에 액세스를 제공합니다. 이러한 모델은 텍스트 생성, 언어 번역 및 정보적인 방식으로 질문에 대답하는 데 사용할 수 있습니다.\n- 도구: 도구는 추가 기능을 제공하는 Assistant API의 확장 기능입니다. 예를 들어, 코드 인터프리터, 정보 검색 및 함수 호출 도구가 있습니다.\n- 지침: 지침은 Assistant API가 모델 및 도구를 사용하는 방법을 제어하는 방법입니다. 사용할 모델, 따를 지침 및 통합할 도구를 지정하는 데 사용할 수 있습니다.\n- 실행: 실행은 어시스턴트의 실행을 의미합니다. 현재 쓰레드를 처리하고 응답을 생성하도록 어시스턴트를 트리거합니다. 실행은 대화에 대한 데이터 수집 및 어시스턴트의 성능을 측정하는 데 사용할 수도 있습니다.\n- 파일: 파일은 대화와 관련된 데이터를 저장하고 참조하는 데 사용됩니다. 사용자가 업로드하거나 어시스턴트가 생성할 수 있습니다. 파일은 텍스트, 코드 또는 이미지와 같은 다양한 형식일 수 있습니다. 이 문서에서는 파일에 대해 다루지 않습니다.\n- 역할: 역할은 쓰레드 내의 다른 유형의 메시지를 구별하는 데 사용됩니다. 현재 지원되는 역할은 사용자와 어시스턴트입니다.\n\n이러한 구성 요소가 함께 작동하여 챗봇 및 AI 어시스턴트를 구축하는 강력하고 유연한 플랫폼을 제공합니다. Assistant API는 아직 개발 중이지만, 컴퓨터와 상호 작용하는 방식을 혁신할 잠재력이 있습니다. 🦾🤖\n\n다음은 OpenAI Assistant API를 사용하는 방법입니다. Node.js를 사용하여 OpenAI의 Assistant API를 설정하려면 다음 단계를 따라야 합니다:\n\n1. OpenAI Node.js 라이브러리 설치하기:\n\n먼저 Node Package Manager (npm)을 사용하여 openai 패키지를 설치해주세요.\n\n```js\nnpm install openai\n```\n\n2. 환경 파일을 생성해보세요:\n\n루트 디렉토리에 .env 파일을 생성하여 OpenAI API 키를 안전하게 저장하세요. 다음 줄을 .env 파일에 추가해 주세요. YOUR_API_KEY를 실제 OpenAI API 키로 대체해주세요:\n\n```js\nREACT_APP_OPENAI_API_KEY = 당신의_API_KEY;\n```\n\n3. 필요한 라이브러리를 가져옵니다:\n\n/src/components/Chat.tsx 파일에서 OpenAI 라이브러리를 가져옵니다:\n\n```js\nimport OpenAI from \"openai\";\n```\n\n4. OpenAI 클라이언트를 초기화하세요:\n\nOpenAI 클래스를 사용하여 API 키를 이용해 OpenAI 클라이언트를 초기화하세요:\n\n```js\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true,\n});\n```\n\n다음 단계에서 OpenAI Assistant API를 기존 코드에 통합할 때 이러한 단계를 다시 요약하겠습니다.\n\n# 단계 5: React 앱에 OpenAI API 통합하기\n\n이제 우리는 이전 단계에서 만든 React 앱과 OpenAI Assistant API 코드를 통합하는 필요한 단계로 들어가보겠습니다. 다음 변경 사항을 수행해주세요:\n\n다음과 같은 MessageDto 클래스를 가지고 Models 폴더를 생성하세요:\n\n/src/models/MessageDto.ts\n\n```js\nexport class MessageDto {\n  isUser: boolean;\n  content: string;\n\n  constructor(isUser: boolean, content: string) {\n    this.isUser = isUser;\n    this.content = content;\n  }\n}\n```\n\nMessage.tsx 파일을 수정해주세요:\n\n/src/components/Message.tsx\n\n```js\n// src/components/Message.tsx\nimport React from \"react\";\nimport { MessageDto } from \"../models/MessageDto\";\n\ninterface MessageProps {\n  message: MessageDto;\n}\n\nconst Message: React.FC<MessageProps> = ({ message }) => {\n  return (\n    <div style={{ textAlign: message.isUser ? \"right\" : \"left\", margin: \"8px\" }}>\n      <div\n        style={{\n          color: message.isUser ? \"#ffffff\" : \"#000000\",\n          backgroundColor: message.isUser ? \"#1186fe\" : \"#eaeaea\",\n          padding: \"15px\",\n          borderRadius: \"8px\",\n        }}\n      >\n        {message.content.split(\"\\n\").map((text, index) => (\n          <>\n            {text}\n            <br />\n          </>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n```\n\n마침내 새로운 Chat.tsx 파일을 구현해주세요:\n\n/src/components/Chat.tsx\n\n```js\n// src/components/Chat.tsx\nimport React, { useEffect, useState } from \"react\";\nimport { TextField, Button, Container, Grid, CircularProgress, LinearProgress } from \"@mui/material\";\nimport Message from \"./Message\";\nimport OpenAI from \"openai\";\nimport { MessageDto } from \"../models/MessageDto\";\n\nconst Chat: React.FC = () => {\n  const [isWaiting, setIsWaiting] = useState<boolean>(false);\n  const [messages, setMessages] = useState<Array<MessageDto>>(new Array<MessageDto>());\n  const [input, setInput] = useState<string>(\"\");\n  const [assistant, setAssistant] = useState<any>(null);\n  const [thread, setThread] = useState<any>(null);\n  const [openai, setOpenai] = useState<any>(null);\n\n  useEffect(() => {\n    initChatBot();\n  }, []);\n\n  useEffect(() => {\n    setMessages([\n      {\n        content: \"Hi, I'm your personal assistant. How can I help you?\",\n        isUser: false,\n      },\n    ]);\n  }, [assistant]);\n\n  const initChatBot = async () => {\n    const openai = new OpenAI({\n      apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n      dangerouslyAllowBrowser: true,\n    });\n\n    // Create an assistant\n    const assistant = await openai.beta.assistants.create({\n      name: \"Hockey Expert\",\n      instructions: \"You are a hockey expert. You specialize in helping others learn about hockey.\",\n      tools: [{ type: \"code_interpreter\" }],\n      model: \"gpt-4-1106-preview\",\n    });\n\n    // Create a thread\n    const thread = await openai.beta.threads.create();\n\n    setOpenai(openai);\n    setAssistant(assistant);\n    setThread(thread);\n  };\n\n  const createNewMessage = (content: string, isUser: boolean) => {\n    const newMessage = new MessageDto(isUser, content);\n    return newMessage;\n  };\n\n  const handleSendMessage = async () => {\n    messages.push(createNewMessage(input, true));\n    setMessages([...messages]);\n    setInput(\"\");\n\n    // Send a message to the thread\n    await openai.beta.threads.messages.create(thread.id, {\n      role: \"user\",\n      content: input,\n    });\n\n    // Run the assistant\n    const run = await openai.beta.threads.runs.create(thread.id, {\n      assistant_id: assistant.id,\n    });\n\n    // Create a response\n    let response = await openai.beta.threads.runs.retrieve(thread.id, run.id);\n\n    // Wait for the response to be ready\n    while (response.status === \"in_progress\" || response.status === \"queued\") {\n      console.log(\"waiting...\");\n      setIsWaiting(true);\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n      response = await openai.beta.threads.runs.retrieve(thread.id, run.id);\n    }\n\n    setIsWaiting(false);\n\n    // Get the messages for the thread\n    const messageList = await openai.beta.threads.messages.list(thread.id);\n\n    // Find the last message for the current run\n    const lastMessage = messageList.data\n      .filter((message: any) => message.run_id === run.id && message.role === \"assistant\")\n      .pop();\n\n    // Print the last message coming from the assistant\n    if (lastMessage) {\n      console.log(lastMessage.content[0][\"text\"].value);\n      setMessages([...messages, createNewMessage(lastMessage.content[0][\"text\"].value, false)]);\n    }\n  };\n\n  // detect enter key and send message\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === \"Enter\") {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <Container>\n      <Grid container direction=\"column\" spacing={2} paddingBottom={5}>\n        {messages.map((message, index) => (\n          <Grid item alignSelf={message.isUser ? \"flex-end\" : \"flex-start\"} key={index}>\n            <Message key={index} message={message} />\n          </Grid>\n        ))}\n        <Grid item>\n          <TextField\n            label=\"Type your message\"\n            variant=\"outlined\"\n            disabled={isWaiting}\n            fullWidth\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyDown={handleKeyPress}\n          />\n          {isWaiting && <LinearProgress color=\"inherit\" />}\n        </Grid>\n        {!isWaiting && (\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage} disabled={isWaiting}>\n              Send\n            </Button>\n          </Grid>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Chat;\n```\n\nReact 앱을 다음 명령어로 실행해보세요:\n\n```js\nnpm start\n```\n\n# 단계 6: 당신의 어시스턴트와 상호 작용하기\n\n이제 prompt를 사용하여 새로 만든 어시스턴트와 상호 작용할 준비가 되었습니다. 응답은 짧은 지연 후 화면에 표시됩니다. 아래와 같이 표시됩니다:\n\nPrompt:\n\n```js\n누가 사람들에게 요리를 가르치는 데 가장 적합한 이가 되었습니까?\n```\n\n답변:\n\n```js\n\"가장 적합한 요리 교육자\"라는 타이틀은 팬들과 요리 역사학자들 사이에서 치열한 논의의 대상입니다. 그러나 토론에서 자주 언급되는 몇 가지 이름은 다음과 같습니다:\n\n- **웨인 그레츠키(Wayne Gretzky)**: \"위대한 사람\"이라고 불리는 그레츠키는 NHL 역대 최고의 골, 어시스트, 포인트 기록 보유자입니다. 그는 수많은 기록을 보유하고 4회의 스탠리컵 챔피언입니다.\n- **바비 오어(Bobby Orr)**: 공격 능력으로 수비수 위치를 혁신한 오어는 2회의 아트 로스 트로피를 수상한 유일한 수비수입니다.\n- **고디 하워(Gordie Howe)**: \"미스터 하키\"로 별명 붙은 하워는 스코어링 능력과 체력에 뛰어난 선수로 유명합니다. 그는 6회의 리그 MVP 및 4회의 스탠리컵 챔피언입니다.\n- **마리오 라미우(Mario Lemieux)**: 놀라운 기술과 스코어링 능력을 가진 라미우는 경력 동안 심각한 건강 문제와 싸우면서 필츠버그 펭귄스를 2회의 스탠리컵 우승으로 이끌었습니다.\n- **모리스 리차드(Maurice Richard)**: \"로켓\"으로 불리는 그는 50게임에서 50골을 넣는 최초의 선수였고 골을 넣는 능력과 강한 결의로 유명했습니다.\n\n하키 토론은 또한 서로 다른 시대, 포지션 및 게임의 변화를 고려합니다. 이 선수들 모두 그들의 시대에서 지배적이었으며 이들이 스포츠에 기여한 데 대해 널리 인정받고 있습니다.\n```\n\n🛠️ 제 개인 GitHub 계정에서 완전한 솔루션 코드를 확인하실 수 있습니다. 여기를 클릭해주세요.```\n\n# 결론\n\nOpenAI의 Assistant API 도입으로 보조 인력의 접근성이 새로운 차원으로 발전했습니다. 이제 누구나 챗봇과 AI 보조 인력의 힘과 편의성을 누릴 수 있습니다.\n\nAssistant API는 개발자들이 AI 기반 보조 인력의 잠재력을 활용할 수 있는 손쉬운 방법을 제공합니다.\n\n결론적으로, OpenAI의 Assistant API를 통한 보조 인력의 접근성은 개인 및 기업이 AI 기술의 힘을 활용할 수 있게 합니다. 우리 손끝에 챗봇이 있음으로써 생산성을 향상하고 고객 경험을 향상하며 다양한 산업에서 새로운 기회를 극대화할 수 있습니다.\n\n지금까지였어요. 만약 이 이야기를 좋아하셨다면, 팔로우하고 박수를 부탁드려요. 👏👏\n\n## 참고 자료\n\n[1] https://platform.openai.com/docs/assistants/how-it-works. OpenAI\n\n[2] https://medium.com/@ralfelfving/tutorial-get-started-with-the-new-openai-assistants-api-7049c2517bfe. Ralf Elfving\n","ogImage":{"url":"/assets/img/2024-05-12-AStep-By-StepGuidetocreatingyourownassistantchatbotusingOpenAIsAssistantAPIandReact_0.png"},"coverImage":"/assets/img/2024-05-12-AStep-By-StepGuidetocreatingyourownassistantchatbotusingOpenAIsAssistantAPIandReact_0.png","tag":["Tech"],"readingTime":14},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"어시스턴트 API의 힘 이해하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-AStep-By-StepGuidetocreatingyourownassistantchatbotusingOpenAIsAssistantAPIandReact_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"요약\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"고속으로 발전하는 기술 세계에서 OpenAI는 인공 지능 분야에서 선두주자로 등장했습니다. 그들의 최신 작품인 어시스턴트 API는 이미 다양한 산업을 혁신하고 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자신만의 개인 비서를 가지고 싶었던 적이 있나요? 더 이상 찾을 필요가 없어요! OpenAI의 어시스턴트 API는 AI의 기능을 활용하고 이를 프로젝트에 원활하게 통합할 수 있는 강력한 도구입니다. 이 API를 활용하여 개발자들은 사용자와 동적 대화를 나누며 관련 정보와 맞춤 경험을 제공할 수 있는 지능형 챗봇을 만들 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 글을 더 깊이 이해하면, 새로운 Assistant API를 사용하여 완전히 기능적인 챗봇을 구현하는 방법을 알아볼 것입니다. 이 챗봇은 아이스 하키 전문가로서 특정 지침을 줄 것입니다. 🏒\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시작해 봅시다! 👏👏👏👏\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 1: 개발 환경 설정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새로운 리액트 프로젝트를 만들고 필요한 라이브러리와 의존성을 설치하는 것은 어떤 리액트 개발을 시작하는 핵심 단계입니다. 몇 가지 간단한 단계를 따르면 프로젝트를 신속하게 시작할 수 있습니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Node.js와 npm을 설치합니다 (이미 설치되어 있지 않은 경우)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"터미널이나 명령 프롬프트를 엽니다\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다음 명령어를 실행하여 Create React App을 설치합니다\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install -g create-react-app\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"다음 명령어를 실행하여 새로운 리액트 앱을 만듭니다 (여기서 \\\"my-app\\\"은 앱의 이름입니다)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"npx create-react-app my-app --template typescript\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"5\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"해당 명령어를 실행하여 새 앱 디렉토리로 이동합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"cd\"\n        }), \" my-app\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"6\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Material-UI 및 그 종속성을 설치합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install @mui/material @emotion/react @emotion/styled\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"7\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"다음 명령어를 실행하여 개발 서버를 시작하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm start\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것으로 설정이 완료되었습니다! 이제 새로운 React 앱이 http://localhost:3000 에서 작동해야 합니다. 코드 편집기에서 앱을 열고 필요한 대로 코드를 사용자 정의할 수 있습니다.```\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 2: React 앱 챗봇 컴포넌트 생성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"채팅 인터페이스를 위한 컴포넌트를 생성하세요. 각 메시지 컴포넌트를 렌더링하는 Chat 컴포넌트를 만들 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"/src/components/Message.tsx\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// src/components/Message.tsx\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\\ninterface \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MessageProps\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"text\"\n        }), \": string;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"isUser\"\n        }), \": boolean;\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Message\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"FC\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MessageProps\"\n        }), \"> = \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"{ text, isUser }\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"textAlign:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"isUser\"\n            }), \" ? '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"right\"\n            }), \"' \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"left\"\n            }), \"', \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"margin:\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"8px\"\n            }), \"' }>\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"backgroundColor:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"isUser\"\n            }), \" ? '#\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"DCF8C6\"\n            }), \"' \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":\"\n            }), \" '#\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"b8e3fc\"\n            }), \"', \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"padding:\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"8px\"\n            }), \"', \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"borderRadius:\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"8px\"\n            }), \"' }>\"]\n          }), \"\\n        {text}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Message\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"/src/components/Chat.tsx\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// src/components/Chat.tsx\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TextField\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Button\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Container\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Grid\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@mui/material'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Message\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./Message'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Chat\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"FC\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [messages, setMessages] = useState<string[]>([]);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [input, setInput] = useState<string>(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \");\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleSendMessage\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setMessages\"\n        }), \"([...messages, input]);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setInput\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 챗봇 응답을 처리하는 로직을 추가하세요\"\n        }), \"\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Container\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"container\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"direction\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"column\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"spacing\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{2}\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"item\"\n            }), \">\"]\n          }), \"\\n          {messages.map((message, index) => (\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Message\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"key\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{index}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"text\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{message}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"isUser\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{index\"\n            }), \" % \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"2\"\n            }), \" === \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"0}\"\n            }), \" />\"]\n          }), \"\\n          ))}\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"item\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"TextField\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"label\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"메시지를 입력하세요\\\"\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"variant\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"outlined\\\"\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"fullWidth\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{input}\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{(e)\"\n            }), \" =>\"]\n          }), \" setInput(e.target.value)}\\n          />\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"item\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"variant\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"contained\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"color\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"primary\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleSendMessage}\"\n            }), \">\"]\n          }), \"\\n            전송\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Button\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Container\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Chat\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 3: Chat 컴포넌트를 App.tsx에 통합하세요\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Chat 컴포넌트를 사용하도록 src/App.tsx를 수정하세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"/src/App.tsx\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-javascript\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// src/App.tsx\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Chat\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./components/Chat'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"App\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"FC\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"App\\\"\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"header\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"App-header\\\"\"\n            }), \">\"]\n          }), \"\\n         {/* 가운데 정렬 */}\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"textAlign:\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"center\"\n            }), \"' }>\"]\n          }), \"React Chatbot\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"header\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"main\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Chat\"\n            }), \" />\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"main\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"App\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 명령어를 사용하여 React 앱을 실행하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-javascript\",\n        children: \"npm start\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 4: OpenAI 어시스턴트 API로 시작하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"어시스턴트 API를 사용하면 사용자 쿼리를 이해하고 대화식 방식으로 응답하는 지능형 챗봇을 만들 수 있습니다. 이러한 챗봇은 다양한 애플리케이션 및 플랫폼에 통합되어 사용자에게 원활한 지원을 제공할 수 있습니다. 🤖\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"⚠️ 진행하기 전에 API 키를 생성해야 합니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"⚠️ OpenAI는 SPA 웹 앱과 같은 클라이언트 사이드 환경에서 API 키를 노출하는 것을 권장하지 않습니다. 요청은 항상 API 키를 안전하게 보관할 수 있는 자체 백엔드 서버를 통해 라우팅해야 합니다. 그러나 간편함을 위해, 우리는 단순하게 유지하고 프론트엔드 개발에 집중할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"OpenAI에서 API 키를 얻으려면 다음 단계를 따르세요:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"OpenAI 계정을 만들거나 로그인하세요. 이미 OpenAI 계정이 없는 경우 새로 만들어야 합니다. OpenAI 웹사이트로 이동하여 \\\"가입하기\\\" 버튼을 클릭하여 계정을 만들 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"API Keys 페이지로 이동하세요. 로그인한 후에는 화면 우측 상단의 계정 이름을 클릭한 다음 \\\"API Keys\\\"를 선택하여 API Keys 페이지에 액세스할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"새 API 키를 생성하세요. API Keys 페이지에서 \\\"새 비밀 키 생성\\\" 버튼을 클릭하세요. 이렇게 하면 API 키의 이름을 입력할 수 있는 모달 창이 열립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"API 키를 저장하세요. API 키를 만든 후에는 반드시 안전한 곳에 저장하세요. 다른 사람과 API 키를 공유하지 마세요. 그렇게 하면 그들이 OpenAI 계정에 액세스할 수 있게 됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"API 키를 획득했다면, OpenAI API에 요청을 인증하는 데 사용할 수 있습니다. 이에 대한 자세한 정보는 OpenAI API 설명서에서 찾을 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"OpenAI Assistant API의 주요 구성 요소:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"쓰레드: 쓰레드는 Assistant API에서 대화의 기초입니다. 사용자와 어시스턴트 간에 교환된 메시지의 시퀀스를 나타냅니다. 쓰레드는 지속적일 수 있으며, 나중에 사용할 수 있도록 저장하고 검색할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"메시지: 메시지는 쓰레드 내에서의 개별 통신 단위입니다. 사용자 또는 어시스턴트가 보낼 수 있습니다. 메시지에는 텍스트, 코드, 이미지 또는 다른 파일이 포함될 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"모델: Assistant API는 GPT-3.5 및 GPT-4와 같은 OpenAI의 텍스트 생성 모델에 액세스를 제공합니다. 이러한 모델은 텍스트 생성, 언어 번역 및 정보적인 방식으로 질문에 대답하는 데 사용할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"도구: 도구는 추가 기능을 제공하는 Assistant API의 확장 기능입니다. 예를 들어, 코드 인터프리터, 정보 검색 및 함수 호출 도구가 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"지침: 지침은 Assistant API가 모델 및 도구를 사용하는 방법을 제어하는 방법입니다. 사용할 모델, 따를 지침 및 통합할 도구를 지정하는 데 사용할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"실행: 실행은 어시스턴트의 실행을 의미합니다. 현재 쓰레드를 처리하고 응답을 생성하도록 어시스턴트를 트리거합니다. 실행은 대화에 대한 데이터 수집 및 어시스턴트의 성능을 측정하는 데 사용할 수도 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"파일: 파일은 대화와 관련된 데이터를 저장하고 참조하는 데 사용됩니다. 사용자가 업로드하거나 어시스턴트가 생성할 수 있습니다. 파일은 텍스트, 코드 또는 이미지와 같은 다양한 형식일 수 있습니다. 이 문서에서는 파일에 대해 다루지 않습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"역할: 역할은 쓰레드 내의 다른 유형의 메시지를 구별하는 데 사용됩니다. 현재 지원되는 역할은 사용자와 어시스턴트입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 구성 요소가 함께 작동하여 챗봇 및 AI 어시스턴트를 구축하는 강력하고 유연한 플랫폼을 제공합니다. Assistant API는 아직 개발 중이지만, 컴퓨터와 상호 작용하는 방식을 혁신할 잠재력이 있습니다. 🦾🤖\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 OpenAI Assistant API를 사용하는 방법입니다. Node.js를 사용하여 OpenAI의 Assistant API를 설정하려면 다음 단계를 따라야 합니다:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"OpenAI Node.js 라이브러리 설치하기:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 Node Package Manager (npm)을 사용하여 openai 패키지를 설치해주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install openai\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"환경 파일을 생성해보세요:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"루트 디렉토리에 .env 파일을 생성하여 OpenAI API 키를 안전하게 저장하세요. 다음 줄을 .env 파일에 추가해 주세요. YOUR_API_KEY를 실제 OpenAI API 키로 대체해주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"REACT_APP_OPENAI_API_KEY\"\n        }), \" = 당신의_API_KEY;\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"필요한 라이브러리를 가져옵니다:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"/src/components/Chat.tsx 파일에서 OpenAI 라이브러리를 가져옵니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OpenAI\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"openai\\\"\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"OpenAI 클라이언트를 초기화하세요:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"OpenAI 클래스를 사용하여 API 키를 이용해 OpenAI 클라이언트를 초기화하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" openai = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OpenAI\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiKey\"\n        }), \": process.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"env\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"OPENAI_API_KEY\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dangerouslyAllowBrowser\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 단계에서 OpenAI Assistant API를 기존 코드에 통합할 때 이러한 단계를 다시 요약하겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 5: React 앱에 OpenAI API 통합하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 우리는 이전 단계에서 만든 React 앱과 OpenAI Assistant API 코드를 통합하는 필요한 단계로 들어가보겠습니다. 다음 변경 사항을 수행해주세요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음과 같은 MessageDto 클래스를 가지고 Models 폴더를 생성하세요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"/src/models/MessageDto.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MessageDto\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"isUser\"\n        }), \": boolean;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"content\"\n        }), \": string;\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"isUser: boolean, content: string\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"isUser\"\n        }), \" = isUser;\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"content\"\n        }), \" = content;\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Message.tsx 파일을 수정해주세요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"/src/components/Message.tsx\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// src/components/Message.tsx\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MessageDto\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../models/MessageDto\\\"\"\n        }), \";\\n\\ninterface \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MessageProps\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"message\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MessageDto\"\n        }), \";\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Message\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"FC\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MessageProps\"\n        }), \"> = \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"{ message }\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{{\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"textAlign:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"message.isUser\"\n            }), \" ? \\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"right\"\n            }), \"\\\" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":\"\n            }), \" \\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"left\"\n            }), \"\\\", \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"margin:\"\n            }), \" \\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"8px\"\n            }), \"\\\" }}>\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{{\"\n            }), \"\\n          \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"color:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"message.isUser\"\n            }), \" ? \\\"#\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ffffff\"\n            }), \"\\\" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":\"\n            }), \" \\\"#\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"000000\"\n            }), \"\\\",\\n          \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"backgroundColor:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"message.isUser\"\n            }), \" ? \\\"#\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"1186fe\"\n            }), \"\\\" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":\"\n            }), \" \\\"#\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"eaeaea\"\n            }), \"\\\",\\n          \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"padding:\"\n            }), \" \\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"15px\"\n            }), \"\\\",\\n          \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"borderRadius:\"\n            }), \" \\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"8px\"\n            }), \"\\\",\\n        }}\\n      >\"]\n          }), \"\\n        {message.content.split(\\\"\\\\n\\\").map((text, index) => (\\n          \", _jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"<>\"\n          }), \"\\n            {text}\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"br\"\n            }), \" />\"]\n          }), \"\\n          \", _jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"</>\"\n          }), \"\\n        ))}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n    </div>\\n  );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Message\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마침내 새로운 Chat.tsx 파일을 구현해주세요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"/src/components/Chat.tsx\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// src/components/Chat.tsx\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useEffect, useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TextField\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Button\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Container\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Grid\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CircularProgress\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LinearProgress\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@mui/material\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Message\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./Message\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OpenAI\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"openai\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MessageDto\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../models/MessageDto\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Chat\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"FC\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [isWaiting, setIsWaiting] = useState<boolean>(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [messages, setMessages] = useState<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Array\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MessageDto\"\n        }), \">>(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Array\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MessageDto\"\n        }), \">());\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [input, setInput] = useState<string>(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [assistant, setAssistant] = useState<any>(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [thread, setThread] = useState<any>(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [openai, setOpenai] = useState<any>(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"initChatBot\"\n        }), \"();\\n  }, []);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setMessages\"\n        }), \"([\\n      {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"content\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Hi, I'm your personal assistant. How can I help you?\\\"\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"isUser\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n      },\\n    ]);\\n  }, [assistant]);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"initChatBot\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" openai = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OpenAI\"\n        }), \"({\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiKey\"\n        }), \": process.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"env\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"REACT_APP_OPENAI_API_KEY\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dangerouslyAllowBrowser\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n    });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Create an assistant\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" assistant = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" openai.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"beta\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"assistants\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"({\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Hockey Expert\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"instructions\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"You are a hockey expert. You specialize in helping others learn about hockey.\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"tools\"\n        }), \": [{ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"code_interpreter\\\"\"\n        }), \" }],\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"model\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gpt-4-1106-preview\\\"\"\n        }), \",\\n    });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Create a thread\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" thread = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" openai.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"beta\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"threads\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"();\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setOpenai\"\n        }), \"(openai);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setAssistant\"\n        }), \"(assistant);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setThread\"\n        }), \"(thread);\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createNewMessage\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"content: string, isUser: boolean\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" newMessage = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MessageDto\"\n        }), \"(isUser, content);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" newMessage;\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleSendMessage\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n    messages.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createNewMessage\"\n        }), \"(input, \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"));\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setMessages\"\n        }), \"([...messages]);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setInput\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \");\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Send a message to the thread\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" openai.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"beta\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"threads\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"messages\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"(thread.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \", {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"role\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"user\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"content\"\n        }), \": input,\\n    });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Run the assistant\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" run = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" openai.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"beta\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"threads\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"runs\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"(thread.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \", {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"assistant_id\"\n        }), \": assistant.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \",\\n    });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Create a response\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" response = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" openai.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"beta\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"threads\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"runs\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"retrieve\"\n        }), \"(thread.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \", run.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \");\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Wait for the response to be ready\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"while\"\n        }), \" (response.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"status\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"in_progress\\\"\"\n        }), \" || response.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"status\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"queued\\\"\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"waiting...\\\"\"\n        }), \");\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setIsWaiting\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \");\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Promise\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"resolve\"\n          }), \") =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"setTimeout\"\n        }), \"(resolve, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5000\"\n        }), \"));\\n      response = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" openai.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"beta\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"threads\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"runs\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"retrieve\"\n        }), \"(thread.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \", run.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \");\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setIsWaiting\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \");\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Get the messages for the thread\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" messageList = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" openai.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"beta\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"threads\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"messages\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"list\"\n        }), \"(thread.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \");\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Find the last message for the current run\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" lastMessage = messageList.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"data\"\n        }), \"\\n      .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"message: any\"\n          }), \") =>\"]\n        }), \" message.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"run_id\"\n        }), \" === run.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \" && message.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"role\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"assistant\\\"\"\n        }), \")\\n      .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"pop\"\n        }), \"();\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Print the last message coming from the assistant\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (lastMessage) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(lastMessage.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"content\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"text\\\"\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \");\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setMessages\"\n        }), \"([...messages, \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createNewMessage\"\n        }), \"(lastMessage.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"content\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"text\\\"\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \")]);\\n    }\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// detect enter key and send message\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleKeyPress\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"e: React.KeyboardEvent<HTMLDivElement>\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"key\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Enter\\\"\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleSendMessage\"\n        }), \"();\\n    }\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Container\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"container\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"direction\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"column\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"spacing\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{2}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"paddingBottom\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{5}\"\n            }), \">\"]\n          }), \"\\n        {messages.map((message, index) => (\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"item\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"alignSelf\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{message.isUser\"\n            }), \" ? \\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"flex-end\"\n            }), \"\\\" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":\"\n            }), \" \\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"flex-start\"\n            }), \"\\\"} \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"key\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{index}\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Message\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"key\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{index}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"message\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{message}\"\n            }), \" />\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \">\"]\n          }), \"\\n        ))}\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"item\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"TextField\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"label\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Type your message\\\"\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"variant\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"outlined\\\"\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"disabled\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{isWaiting}\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"fullWidth\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{input}\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{(e)\"\n            }), \" =>\"]\n          }), \" setInput(e.target.value)}\\n            onKeyDown={handleKeyPress}\\n          />\\n          {isWaiting && \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"LinearProgress\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"color\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"inherit\\\"\"\n            }), \" />\"]\n          }), \"}\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \">\"]\n          }), \"\\n        {!isWaiting && (\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"item\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"variant\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"contained\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"color\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"primary\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleSendMessage}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"disabled\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{isWaiting}\"\n            }), \">\"]\n          }), \"\\n              Send\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Button\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \">\"]\n          }), \"\\n        )}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Grid\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Container\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Chat\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React 앱을 다음 명령어로 실행해보세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm start\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 6: 당신의 어시스턴트와 상호 작용하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 prompt를 사용하여 새로 만든 어시스턴트와 상호 작용할 준비가 되었습니다. 응답은 짧은 지연 후 화면에 표시됩니다. 아래와 같이 표시됩니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Prompt:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"누가 사람들에게 요리를 가르치는 데 가장 적합한 이가 되었습니까?\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"답변:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"가장 적합한 요리 교육자\\\"\"\n        }), \"라는 타이틀은 팬들과 요리 역사학자들 사이에서 치열한 논의의 대상입니다. 그러나 토론에서 자주 언급되는 몇 가지 이름은 다음과 같습니다:\\n\\n- **웨인 그레츠키(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Wayne\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Gretzky\"\n        }), \")**: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"위대한 사람\\\"\"\n        }), \"이라고 불리는 그레츠키는 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NHL\"\n        }), \" 역대 최고의 골, 어시스트, 포인트 기록 보유자입니다. 그는 수많은 기록을 보유하고 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \"회의 스탠리컵 챔피언입니다.\\n- **바비 오어(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Bobby\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orr\"\n        }), \")**: 공격 능력으로 수비수 위치를 혁신한 오어는 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"회의 아트 로스 트로피를 수상한 유일한 수비수입니다.\\n- **고디 하워(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Gordie\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Howe\"\n        }), \")**: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"미스터 하키\\\"\"\n        }), \"로 별명 붙은 하워는 스코어링 능력과 체력에 뛰어난 선수로 유명합니다. 그는 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \"회의 리그 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"MVP\"\n        }), \" 및 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \"회의 스탠리컵 챔피언입니다.\\n- **마리오 라미우(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Mario\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Lemieux\"\n        }), \")**: 놀라운 기술과 스코어링 능력을 가진 라미우는 경력 동안 심각한 건강 문제와 싸우면서 필츠버그 펭귄스를 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"회의 스탠리컵 우승으로 이끌었습니다.\\n- **모리스 리차드(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Maurice\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Richard\"\n        }), \")**: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"로켓\\\"\"\n        }), \"으로 불리는 그는 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \"게임에서 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \"골을 넣는 최초의 선수였고 골을 넣는 능력과 강한 결의로 유명했습니다.\\n\\n하키 토론은 또한 서로 다른 시대, 포지션 및 게임의 변화를 고려합니다. 이 선수들 모두 그들의 시대에서 지배적이었으며 이들이 스포츠에 기여한 데 대해 널리 인정받고 있습니다.\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"🛠️ 제 개인 GitHub 계정에서 완전한 솔루션 코드를 확인하실 수 있습니다. 여기를 클릭해주세요.```\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"OpenAI의 Assistant API 도입으로 보조 인력의 접근성이 새로운 차원으로 발전했습니다. 이제 누구나 챗봇과 AI 보조 인력의 힘과 편의성을 누릴 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Assistant API는 개발자들이 AI 기반 보조 인력의 잠재력을 활용할 수 있는 손쉬운 방법을 제공합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"결론적으로, OpenAI의 Assistant API를 통한 보조 인력의 접근성은 개인 및 기업이 AI 기술의 힘을 활용할 수 있게 합니다. 우리 손끝에 챗봇이 있음으로써 생산성을 향상하고 고객 경험을 향상하며 다양한 산업에서 새로운 기회를 극대화할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지금까지였어요. 만약 이 이야기를 좋아하셨다면, 팔로우하고 박수를 부탁드려요. 👏👏\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"참고 자료\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"[1] https://platform.openai.com/docs/assistants/how-it-works. OpenAI\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"[2] https://medium.com/@ralfelfving/tutorial-get-started-with-the-new-openai-assistants-api-7049c2517bfe. Ralf Elfving\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}