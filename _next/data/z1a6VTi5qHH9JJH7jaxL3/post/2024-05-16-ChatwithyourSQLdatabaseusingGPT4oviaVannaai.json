{"pageProps":{"post":{"title":"SQL 데이터베이스와 대화하는 방법 Vannaai를 통해 GPT-4o를 활용하세요","description":"","date":"2024-05-16 16:31","slug":"2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai","content":"\n\n## OpenAI GPT 4o를 활용한 텍스트-SQL 파이프라인 만들기\n\n![image](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_0.png)\n\nOpenAI가 최신 주력 모델인 GPT 4o를 공개했습니다. 이 고급 모델은 멀티모달 기능을 갖추고 있어 이미지, 텍스트, 비디오 입력을 처리하여 어떠한 이전 모델보다 뛰어난 답변을 생성할 수 있습니다. 이 게시물은 GPT 4o와 Vanna AI를 사용하여 데이터베이스와 대화할 수 있는 텍스트-SQL 파이프라인을 구축하는 방법을 강조합니다.\n\n![image](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_1.png)\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_2.png\" />\n\n# 시작하기\n\n```js\nfrom vanna.openai import OpenAI_Chat\nfrom vanna.vannadb import VannaDB_VectorStore\n\nclass MyVanna(VannaDB_VectorStore, OpenAI_Chat):\n    def __init__(self, config=None):\n        MY_VANNA_MODEL = # https://vanna.ai/account/profile에서 모델 이름을 가져와주세요\n        VannaDB_VectorStore.__init__(self, vanna_model=MY_VANNA_MODEL, vanna_api_key=MY_VANNA_API_KEY, config=config)\n        OpenAI_Chat.__init__(self, config=config)\n\n# OpenAI api_key를 추가해주세요\nvn = MyVanna(config={'api_key': 'sk-...', 'model': 'gpt-4o'})\n```\n\n# 데이터베이스 연결하기\n\n<div class=\"content-ad\"></div>\n\n바나에는 내장된 커넥터로 다음 8가지 데이터베이스에 연결할 수 있어요 (다른 데이터베이스에 연결하려면 몇 줄의 추가 코드가 필요해요):\n\n- Postgres SQL\n- Oracle\n- DuckDB\n- MySQL\n- SQLite\n- Big Query\n- Snowflake\n- Microsoft SQL\n\n문서를 참고하면 특정 데이터베이스에 연결하는 방법을 알 수 있어요. 이 글에서는 DuckDB StackOverflow 데이터베이스에 연결할 거에요. 데이터베이스는 여기에 있어요!\n\n```js\n#덕DB 데이터베이스에 연결하는 방법이에요\nvn.connect_to_duckdb(url='motherduck:[<database_name>]?motherduck_token=<token>&saas_mode=true')\n```\n\n<div class=\"content-ad\"></div>\n\n# 훈련\n\n![이미지1](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_3.png)\n\n![이미지2](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_4.png)\n\n![이미지3](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_5.png)\n\n<div class=\"content-ad\"></div>\n\n# Plan (Information Schema)에 대한 훈련\n\n```js\n# 정보 스키마 쿼리는 데이터베이스에 따라 조정이 필요할 수 있습니다. 이것은 좋은 시작점입니다.\ndf_information_schema = vn.run_sql(\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS\")\n```\n\n```js\n# 정보 스키마를 LLM에서 참조할 수 있도록 작은 조각으로 나눕니다.\nplan = vn.get_training_plan_generic(df_information_schema)\nplan\n```\n\n```js\n# 계획이 마음에 들면 주석 처리하고 실행하여 훈련을 시작하세요.\nvn.train(plan=plan)\n```\n\n<div class=\"content-ad\"></div>\n\n# DDL 훈련\n\n```js\n# duckDB에서 describe 문은 모든 테이블에 대한 DDL을 가져올 수 있습니다\nvn.train(ddl=\"DESCRIBE SELECT * FROM Stackoverflow.users;\")\n```\n\n# SQL 문장에 대한 훈련\n\n```js\n# SQL 문장에 대한 훈련 예시입니다\nvn.train(\nquestion=\"가장 많은 배지를 가진 상위 10명의 사용자는 누구인가요?\"\n,sql=\"\"\"SELECT UserId, COUNT(*) AS badge_count\nFROM stackoverflow.main.badges\nGROUP BY UserId\nORDER BY badge_count DESC\nLIMIT 10\n\"\"\")\n# 다른 예시\nvn.train(\nquestion=\"가장 많은 답변을 한 사용자와 가장 적은 질문을 한 사용자 간의 총 답변 차이는 얼마인가요?\", \n,sql=\"SELECT MAX(answer_count) - MIN(answer_count) AS difference\nFROM (\n    SELECT OwnerUserId, COUNT(*) AS answer_count\n    FROM stackoverflow.main.posts\n    WHERE PostTypeId = 2\n    GROUP BY OwnerUserId\n) AS answer_counts;\n\")\n```\n\n<div class=\"content-ad\"></div>\n\n# 문서화를 통한 훈련\n\n```js\n# 문서화를 통해 맥락 정보를 제공할 수 있습니다.\nvn.train(documentation=\"해당 연도 가장 많은 답변을 낸 사용자를 대 마스터라고 부릅니다\")\n```\n\n훈련 데이터를 확인하려면 vn.get_training_data()를 사용하실 수 있습니다.\n\n```js\n# vn.ask는 다음 함수들을 순차적으로 실행하며, 각각 개별적으로 실행될 수 있습니다.\n# 1. vn.generate_ql\n# 2. vn.run_sql\n# 3. vn.generate_plotly_code\n# 4. vn.get_plotly_figure\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n# Vanna 훈련 후 질문을하는 방법입니다\nvn.ask('뱃지 수가 가장 많은 상위 10 명의 사용자를 찾아주세요?')\n```\n\n![이미지](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_6.png)\n\n![이미지](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_7.png)\n\n# Flask 앱 사용하기\n  \n\n<div class=\"content-ad\"></div>\n\nVanna는 내장 UI Flask 앱이 함께 제공됩니다. 주피터 노트북이나 Python 스크립트 내에서 실행할 수 있습니다.\n\n```js\nfrom vanna.flask import VannaFlaskApp\napp = VannaFlaskApp(vn)\napp.run()\n```\n\n<img src=\"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_8.png\" />\n\n이렇게 GPT 4o를 텍스트에서 SQL로 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 성능 비교\n\nGPT 4o와 이와 같은 클래스의 다른 모델들 사이의 비교 결과를 아래에서 확인할 수 있습니다. GPT 4o는 ChatGPT 4 turbo의 59%와 Claude Opus의 56%에 비해 최고 수준인 61%의 정확도로 성능을 발휘합니다.\n\n![image](/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_9.png)\n\n읽어주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_0.png"},"coverImage":"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"OpenAI GPT 4o를 활용한 텍스트-SQL 파이프라인 만들기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"OpenAI가 최신 주력 모델인 GPT 4o를 공개했습니다. 이 고급 모델은 멀티모달 기능을 갖추고 있어 이미지, 텍스트, 비디오 입력을 처리하여 어떠한 이전 모델보다 뛰어난 답변을 생성할 수 있습니다. 이 게시물은 GPT 4o와 Vanna AI를 사용하여 데이터베이스와 대화할 수 있는 텍스트-SQL 파이프라인을 구축하는 방법을 강조합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_1.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_2.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"시작하기\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" vanna.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"openai\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OpenAI\"\n        }), \"_Chat\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" vanna.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"vannadb\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"VannaDB\"\n        }), \"_VectorStore\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MyVanna\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"VannaDB\"\n        }), \"_VectorStore, \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OpenAI\"\n        }), \"_Chat):\\n    def \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"__init__\"\n        }), \"(self, config=\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"None\"\n        }), \"):\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"MY_VANNA_MODEL\"\n        }), \" = # \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"https\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//vanna.ai/account/profile에서 모델 이름을 가져와주세요\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"VannaDB\"\n        }), \"_VectorStore.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"__init__\"\n        }), \"(self, vanna_model=\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"MY_VANNA_MODEL\"\n        }), \", vanna_api_key=\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"MY_VANNA_API_KEY\"\n        }), \", config=config)\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OpenAI\"\n        }), \"_Chat.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"__init__\"\n        }), \"(self, config=config)\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OpenAI\"\n        }), \" api_key를 추가해주세요\\nvn = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MyVanna\"\n        }), \"(config={\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'api_key'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sk-...'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'model'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'gpt-4o'\"\n        }), \"})\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"데이터베이스 연결하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"바나에는 내장된 커넥터로 다음 8가지 데이터베이스에 연결할 수 있어요 (다른 데이터베이스에 연결하려면 몇 줄의 추가 코드가 필요해요):\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Postgres SQL\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Oracle\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"DuckDB\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"MySQL\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"SQLite\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Big Query\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Snowflake\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Microsoft SQL\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"문서를 참고하면 특정 데이터베이스에 연결하는 방법을 알 수 있어요. 이 글에서는 DuckDB StackOverflow 데이터베이스에 연결할 거에요. 데이터베이스는 여기에 있어요!\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"#덕\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DB\"\n        }), \" 데이터베이스에 연결하는 방법이에요\\nvn.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"connect_to_duckdb\"\n        }), \"(url=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'motherduck:[<database_name>]?motherduck_token=<token>&saas_mode=true'\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"훈련\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_3.png\",\n        alt: \"이미지1\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_4.png\",\n        alt: \"이미지2\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_5.png\",\n        alt: \"이미지3\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Plan (Information Schema)에 대한 훈련\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 정보 스키마 쿼리는 데이터베이스에 따라 조정이 필요할 수 있습니다. 이것은 좋은 시작점입니다.\\ndf_information_schema = vn.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"run_sql\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS\\\"\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 정보 스키마를 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"LLM\"\n        }), \"에서 참조할 수 있도록 작은 조각으로 나눕니다.\\nplan = vn.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_training_plan_generic\"\n        }), \"(df_information_schema)\\nplan\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 계획이 마음에 들면 주석 처리하고 실행하여 훈련을 시작하세요.\\nvn.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"train\"\n        }), \"(plan=plan)\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"DDL 훈련\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# duckDB에서 describe 문은 모든 테이블에 대한 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DDL\"\n        }), \"을 가져올 수 있습니다\\nvn.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"train\"\n        }), \"(ddl=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"DESCRIBE SELECT * FROM Stackoverflow.users;\\\"\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"SQL 문장에 대한 훈련\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SQL\"\n        }), \" 문장에 대한 훈련 예시입니다\\nvn.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"train\"\n        }), \"(\\nquestion=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"가장 많은 배지를 가진 상위 10명의 사용자는 누구인가요?\\\"\"\n        }), \"\\n,sql=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"SELECT UserId, COUNT(*) AS badge_count\\nFROM stackoverflow.main.badges\\nGROUP BY UserId\\nORDER BY badge_count DESC\\nLIMIT 10\\n\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \")\\n# 다른 예시\\nvn.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"train\"\n        }), \"(\\nquestion=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"가장 많은 답변을 한 사용자와 가장 적은 질문을 한 사용자 간의 총 답변 차이는 얼마인가요?\\\"\"\n        }), \", \\n,sql=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"SELECT MAX(answer_count) - MIN(answer_count) AS difference\\nFROM (\\n    SELECT OwnerUserId, COUNT(*) AS answer_count\\n    FROM stackoverflow.main.posts\\n    WHERE PostTypeId = 2\\n    GROUP BY OwnerUserId\\n) AS answer_counts;\\n\\\"\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"문서화를 통한 훈련\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 문서화를 통해 맥락 정보를 제공할 수 있습니다.\\nvn.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"train\"\n        }), \"(documentation=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"해당 연도 가장 많은 답변을 낸 사용자를 대 마스터라고 부릅니다\\\"\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"훈련 데이터를 확인하려면 vn.get_training_data()를 사용하실 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# vn.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"ask\"\n        }), \"는 다음 함수들을 순차적으로 실행하며, 각각 개별적으로 실행될 수 있습니다.\\n# \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.\"\n        }), \" vn.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"generate_ql\"\n        }), \"\\n# \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2.\"\n        }), \" vn.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"run_sql\"\n        }), \"\\n# \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3.\"\n        }), \" vn.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"generate_plotly_code\"\n        }), \"\\n# \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4.\"\n        }), \" vn.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"get_plotly_figure\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Vanna\"\n        }), \" 훈련 후 질문을하는 방법입니다\\nvn.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ask\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'뱃지 수가 가장 많은 상위 10 명의 사용자를 찾아주세요?'\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_6.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_7.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Flask 앱 사용하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Vanna는 내장 UI Flask 앱이 함께 제공됩니다. 주피터 노트북이나 Python 스크립트 내에서 실행할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" vanna.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"flask\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"VannaFlaskApp\"\n        }), \"\\napp = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"VannaFlaskApp\"\n        }), \"(vn)\\napp.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"run\"\n        }), \"()\\n\"]\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_8.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이렇게 GPT 4o를 텍스트에서 SQL로 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"성능 비교\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"GPT 4o와 이와 같은 클래스의 다른 모델들 사이의 비교 결과를 아래에서 확인할 수 있습니다. GPT 4o는 ChatGPT 4 turbo의 59%와 Claude Opus의 56%에 비해 최고 수준인 61%의 정확도로 성능을 발휘합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-ChatwithyourSQLdatabaseusingGPT4oviaVannaai_9.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"읽어주셔서 감사합니다!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}