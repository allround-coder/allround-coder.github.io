{"pageProps":{"post":{"title":"스크롤이 맨 아래로 도착했는지 감지하기","description":"","date":"2024-05-12 21:44","slug":"2024-05-12-Detectscrollreachesthebottom","content":"\n\n안녕하세요, 오늘은 사용자가 페이지 맨 아래로 스크롤할 때 감지하는 방법을 알려 드리겠습니다.\n\n코딩에 들어가기 전에 계산에 필요한 몇 가지 중요한 정보를 이해하는 것이 중요합니다:\n\n- window.innerHeight: 보이는 콘텐츠의 높이입니다.\n- document.body.scrollHeight: 보이는 부분과 숨겨진 부분을 모두 포함한 전체 콘텐츠의 총 높이입니다.\n- window.scrollY: 사용자가 스크롤한 위치를 나타냅니다.\n\n명확히 이해하기 위해 예제를 드리겠습니다:\n\n\n\n먼저, NextJS와 TypeScript를 사용하여 소스 코드를 초기화하고, 익숙한 다른 프레임워크를 사용할 수도 있어요.\n\n다음으로 각각 높이가 500px인 `div`를 3개 추가할 거에요.\n\n<img src=\"/assets/img/2024-05-12-Detectscrollreachesthebottom_0.png\" />\n\n이렇게 하면 전체 콘텐츠의 높이가 1500px가 됩니다.\n\n\n\n\n![이미지](https://miro.medium.com/v2/resize:fit:1200/1*Qocsql64DWbgFLXBqug2SA.gif)\n\n윈도우 높이를 500px로 조정하면 다음과 같이 됩니다:\n\n![이미지](/assets/img/2024-05-12-Detectscrollreachesthebottom_1.png)\n\ninnerHeight는 빨간색 상자 영역이고, outerHeight에는 주소 표시줄과 탭 표시줄이 포함됩니다.\n\n\n\n좋아요, 이제 document.body.scrollHeight와 window.innerHeight를 확인할 거예요.\n\n그럼 이제 scrollY를 확인해볼게요.\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*tSttaLTndCd9JLMhdbz29A.gif)\n\n동영상을 보시면 알 수 있지만, 페이지에 처음 접속했을 때 scrollY 값은 0일 거에요. 왜냐하면 아직 스크롤하지 않았기 때문이죠. 그런 다음 페이지를 스크롤하기 시작하면, 스크롤한 거리에 따라 scrollY 값이 적절하게 변경될 거에요.\n\n\n\n그리고 페이지를 맨 아래로 스크롤하면 scrollY = scrollHeight - innerHeight가 됩니다.\n\n아래는 해당하는 공식입니다.\n\n```js\nconst scrolledTo = window.scrollY + window.innerHeight\nconst isReachBottom = document.body.scrollHeight === scrolledTo\n```\n\n이제 한번 시도해 봅시다!\n\n\n\n```js\nuseEffect(() => {\n    const onscroll = () => {\n        const scrolledTo = window.scrollY + window.innerHeight;\n        const isReachBottom = document.body.scrollHeight === scrolledTo;\n        if (isReachBottom) alert(\"맨 아래에 도달했습니다!\");\n    };\n    window.addEventListener(\"scroll\", onscroll);\n    return () => {\n        window.removeEventListener(\"scroll\", onscroll);\n    };\n}, []);\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*Vv4q8HBbBSC6n32NRV97cQ.gif\" />\n\n좋아요! 작동합니다!\n\n하지만 무한 스크롤을 위해 직장에서 사용하면 좋은 방법은 아닙니다. 스크롤이 맨 아래에 도달할 때까지 API를 호출하는 것은 좋지 않습니다. 이렇게 하면 사용자 경험이 나빠집니다. 대신, 스크롤이 맨 아래에서 일정 거리(예: 맨 아래에서 300px)를 벗어나면 API 호출을 트리거하고 새 콘텐츠가 로드되어 문서에 추가됩니다. 이렇게 하면 사용자가 기다리는 시간이 줄어듭니다.\n```\n\n\n\n위의 공식은 다음과 같습니다:\n\n```js\nconst scrolledTo = window.scrollY + window.innerHeight\nconst threshold = 300\nconst isReachBottom = document.body.scrollHeight - threshold === scrolledTo\n```\n\n잘 보이지만 여기 작은 문제가 있어요. 사용하는 것이 있습니다. 동등성 연산자 ===을 사용하면 scrollY가 사용자가 스크롤할 때마다 1픽셀씩 증가하지 않기 때문에 isReachBottom이 여러 번 false가 될 가능성이 높습니다. 사용자가 얼마나 빨리 스크롤하는지에 따라 달라집니다.\n\n이 문제를 해결하려면 `(=`를 사용하면 됩니다:\n\n\n\n```js\nconst isReachBottom = document.body.scrollHeight - threshold <= scrolledTo\n```\n\n좋아요, 새로운 것을 테스트해볼까요:\n\n![이미지](https://miro.medium.com/v2/resize:fit:1200/1*d6GdJZpt4RNPfe-03diBfQ.gif)\n\n좋아요, 성공했어요!\n\n\n\n이제 스크롤이 맨 아래에 도달하는 방법을 배웠어요!\n\n데모 코드는 여기에서 확인할 수 있어요: [https://github.com/alanng2050/medium-demo-scroll-to-bottom](https://github.com/alanng2050/medium-demo-scroll-to-bottom)\n\n읽어 주셔서 감사합니다!\n\n즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-05-12-Detectscrollreachesthebottom_0.png"},"coverImage":"/assets/img/2024-05-12-Detectscrollreachesthebottom_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    img: \"img\",\n    pre: \"pre\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"안녕하세요, 오늘은 사용자가 페이지 맨 아래로 스크롤할 때 감지하는 방법을 알려 드리겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코딩에 들어가기 전에 계산에 필요한 몇 가지 중요한 정보를 이해하는 것이 중요합니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"window.innerHeight: 보이는 콘텐츠의 높이입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"document.body.scrollHeight: 보이는 부분과 숨겨진 부분을 모두 포함한 전체 콘텐츠의 총 높이입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"window.scrollY: 사용자가 스크롤한 위치를 나타냅니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"명확히 이해하기 위해 예제를 드리겠습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저, NextJS와 TypeScript를 사용하여 소스 코드를 초기화하고, 익숙한 다른 프레임워크를 사용할 수도 있어요.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"다음으로 각각 높이가 500px인 \", _jsx(_components.code, {\n        children: \"div\"\n      }), \"를 3개 추가할 거에요.\"]\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-Detectscrollreachesthebottom_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이렇게 하면 전체 콘텐츠의 높이가 1500px가 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1200/1*Qocsql64DWbgFLXBqug2SA.gif\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"윈도우 높이를 500px로 조정하면 다음과 같이 됩니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-Detectscrollreachesthebottom_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"innerHeight는 빨간색 상자 영역이고, outerHeight에는 주소 표시줄과 탭 표시줄이 포함됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"좋아요, 이제 document.body.scrollHeight와 window.innerHeight를 확인할 거예요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그럼 이제 scrollY를 확인해볼게요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1200/1*tSttaLTndCd9JLMhdbz29A.gif\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"동영상을 보시면 알 수 있지만, 페이지에 처음 접속했을 때 scrollY 값은 0일 거에요. 왜냐하면 아직 스크롤하지 않았기 때문이죠. 그런 다음 페이지를 스크롤하기 시작하면, 스크롤한 거리에 따라 scrollY 값이 적절하게 변경될 거에요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 페이지를 맨 아래로 스크롤하면 scrollY = scrollHeight - innerHeight가 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래는 해당하는 공식입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" scrolledTo = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"scrollY\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"innerHeight\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" isReachBottom = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"scrollHeight\"\n        }), \" === scrolledTo\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 한번 시도해 봅시다!\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"onscroll\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" scrolledTo = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"scrollY\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"innerHeight\"\n        }), \";\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" isReachBottom = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"scrollHeight\"\n        }), \" === scrolledTo;\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (isReachBottom) \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"alert\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"맨 아래에 도달했습니다!\\\"\"\n        }), \");\\n    };\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"scroll\\\"\"\n        }), \", onscroll);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"removeEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"scroll\\\"\"\n        }), \", onscroll);\\n    };\\n}, []);\\n\"]\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"https://miro.medium.com/v2/resize:fit:1200/1*Vv4q8HBbBSC6n32NRV97cQ.gif\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"좋아요! 작동합니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 무한 스크롤을 위해 직장에서 사용하면 좋은 방법은 아닙니다. 스크롤이 맨 아래에 도달할 때까지 API를 호출하는 것은 좋지 않습니다. 이렇게 하면 사용자 경험이 나빠집니다. 대신, 스크롤이 맨 아래에서 일정 거리(예: 맨 아래에서 300px)를 벗어나면 API 호출을 트리거하고 새 콘텐츠가 로드되어 문서에 추가됩니다. 이렇게 하면 사용자가 기다리는 시간이 줄어듭니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n위의 공식은 다음과 같습니다:\\n\\n```js\\nconst scrolledTo = window.scrollY + window.innerHeight\\nconst threshold = 300\\nconst isReachBottom = document.body.scrollHeight - threshold === scrolledTo\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"잘 보이지만 여기 작은 문제가 있어요. 사용하는 것이 있습니다. 동등성 연산자 ===을 사용하면 scrollY가 사용자가 스크롤할 때마다 1픽셀씩 증가하지 않기 때문에 isReachBottom이 여러 번 false가 될 가능성이 높습니다. 사용자가 얼마나 빨리 스크롤하는지에 따라 달라집니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 문제를 해결하려면 \", _jsx(_components.code, {\n        children: \"(=\"\n      }), \"를 사용하면 됩니다:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" isReachBottom = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"scrollHeight\"\n        }), \" - threshold <= scrolledTo\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"좋아요, 새로운 것을 테스트해볼까요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1200/1*d6GdJZpt4RNPfe-03diBfQ.gif\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"좋아요, 성공했어요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 스크롤이 맨 아래에 도달하는 방법을 배웠어요!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"데모 코드는 여기에서 확인할 수 있어요: \", _jsx(_components.a, {\n        href: \"https://github.com/alanng2050/medium-demo-scroll-to-bottom\",\n        children: \"https://github.com/alanng2050/medium-demo-scroll-to-bottom\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"읽어 주셔서 감사합니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"즐거운 코딩하세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}