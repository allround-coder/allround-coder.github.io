{"pageProps":{"post":{"title":"Route 53과 AWS Lambda, S3를 이용해 간편하게 DNS 레코드 백업 자동화하기","description":"","date":"2024-05-17 03:44","slug":"2024-05-17-SimpleautomatingDNSRecordBackupsfromRoute53withAWSLambdaandS3","content":"\n\n# 소개\n\nDNS 레코드를 관리하는 것은 여러 개의 호스티드 존을 다룰 때 특히 복잡할 수 있습니다. 이러한 레코드의 백업을 자동화하면 유지 관리가 단순화되는데 그치지 않고 필요할 경우 언제든지 백업을 사용할 수 있도록 해줍니다. 이 튜토리얼에서는 AWS Lambda 함수를 생성하여 이를 수행하는 방법을 살펴보겠습니다: 여러 호스티드 존에서 모든 DNS 레코드를 백업하고 이러한 백업을 S3 버킷에 저장하여 레코드의 완전한 JSON을 생성하고 CSV 파일의 별도의 파일에 구성합니다.\n\n# 준비 사항\n\n- 적절한 자격 증명으로 구성된 AWS 콘솔.\n- Route 53 및 S3에 액세스 할 적절한 권한.\n- 백업을 저장할 S3 버킷이 만들어져 있어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 단계별 가이드\n\n# 1. 람다 함수 생성하기\n\n먼저 람다 함수를 생성해 봅시다. AWS 콘솔에서 Lambda 서비스로 이동하고 \"함수 생성\"을 클릭합니다.\n\n- 이름: Route53Backup\n- 런타임: Python 3.x\n- 역할: Lambda 기본 권한을 가진 새 역할을 생성하고 Route 53 및 S3에 액세스할 수 있는 권한을 추가합니다.\n\n<div class=\"content-ad\"></div>\n\n람다 정책 권한:\n\n```js\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"logs:CreateLogGroup\",\n            \"Resource\": \"arn:aws:logs:us-east-1:12345678:*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:CreateLogStream\",\n                \"logs:PutLogEvents\"\n            ],\n            \"Resource\": [\n                \"arn:aws:logs:us-east-1:12345678:log-group:/aws/lambda/lamda-name:*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"route53:GetHostedZone\",\n                \"route53:ListHostedZones\",\n                \"route53:ListHostedZonesByName\",\n                \"route53:ListResourceRecordSets\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:ListAllMyBuckets\",\n                \"s3:PutObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::bucket_name\"\n            ]\n        }\n    ]\n}\n```\n\n# 2. Write the Code\n\n우리 람다 함수의 코드입니다. 이 코드는 여러 호스팅된 존에서 DNS 레코드를 검색하여 이를 S3 버킷에 저장합니다.\n\n<div class=\"content-ad\"></div>\n\n```python\nimport boto3\nimport json\nfrom datetime import datetime\nimport csv\n\ndef lambda_handler(event, context):\n    # 연결된 ID와 도메인 목록\n    hosted_zones = [\n        {'id': '$HOSTED_ZONE_ID', 'domain': '$DOMAIN'},\n        {'id': '$HOSTED_ZONE_ID_2', 'domain': '$DOMAIN2'}\n    ]\n\n    # Route 53 및 S3 클라이언트 초기화\n    route53_client = boto3.client('route53')\n    s3_client = boto3.client('s3')\n\n    # 목록의 각 호스팅 영역을 돌아다니기\n    for hosted_zone in hosted_zones:\n        # 모든 영역 레코드 가져오기\n        response = route53_client.list_resource_record_sets(\n            HostedZoneId=hosted_zone['id']\n        )\n\n        # JSON 형식으로 변환\n        records = json.dumps(response['ResourceRecordSets'], indent=2)\n        records_formatted = response['ResourceRecordSets']\n        #CSV에 행 생성\n        csv_rows = [[\"Name\", \"Type\", \"DNS Name\"]]\n\n        for record_formatted in records_formatted:\n            name = record_formatted['Name']\n            record_type = record_formatted['Type']\n            if 'AliasTarget' in record_formatted:\n                dns_name = record_formatted['AliasTarget']['DNSName']\n            elif 'ResourceRecords' in record_formatted:\n                dns_name = \", \".join([r['Value'] for r in record_formatted.get('ResourceRecords', [])])\n            else:\n                dns_name = \"\"\n            #CSV에 행 추가\n            csv_rows.append([name, record_type, dns_name])\n\n        #CSV 파일에 레코드 추가\n        csv_buffer = csv.writer(open(\"/tmp/\" + backup_filename_csv, 'w'))\n        csv_buffer.writerows(csv_rows)\n\n        # 오늘 날짜와 시간을 포함한 아카이브 이름\n        backup_filename = f\"{datetime.now().strftime('%Y%m%d-%H%M')}.json\"\n        backup_filename_csv = f\"{datetime.now().strftime('%Y%m%d-%H%M')}.csv\"\n\n        # S3에 업로드\n        s3_key = f\"{hosted_zone['domain']}/data/{backup_filename}\"\n        s3_key_csv = f\"{hosted_zone['domain']}/data/{backup_filename_csv}\"\n        s3_client.put_object(\n            Bucket='$BUCKET_NAME',\n            Key=s3_key,\n            Body=records\n        )\n        \n        s3_client.upload_file(\"/tmp/\" + backup_filename_csv, '$BUCKET_NAME', s3_key_csv)\n\n    return {\n        'statusCode': 200,\n        'body': f'Success.'\n    }\n```\n\nHOSTED_ZONE_ID 및 BUCKET_NAME의 값을 교체해주세요. 필요하다면 backup_filename_formatted 및 backup_filename 변수를 원하는 파일 이름으로 교체해주세요.\n\n# 3. 함수 테스트\n\n함수를 테스트하려면 Lambda 콘솔에서 테스트 이벤트를 구성할 수 있습니다. 예를 들어 사용하지 않는 직접적인 입력이 없으므로 빈 JSON ''을 사용할 수 있습니다.```\n\n<div class=\"content-ad\"></div>\n\n# 4. 실행 일정 예약하기 (선택 사항)\n\n만약 람다 함수를 주기적으로 실행하고 싶다면 CloudWatch Events 트리거를 구성할 수 있습니다. CloudWatch 콘솔에서 “Rules”로 이동하여 새로운 규칙을 만들고 원하는 간격(예: 매일)에 람다를 트리거하도록 설정하세요.\n\n# 5. CSV 보기\n\n여기에 당신의 도메인 레코드가 어떻게 포맷될지 표시됩니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-17-SimpleautomatingDNSRecordBackupsfromRoute53withAWSLambdaandS3_0.png\" />\n\n# 결론\n\nRoute 53에서 DNS 레코드를 백업하는 것을 자동화하기 위해 Lambda 함수와 S3를 사용하는 것은 항상 DNS 레코드의 최신 사본을 보유할 수 있는 효과적인 방법입니다. 이는 유지 보수를 간편하게 해주는 것뿐만 아니라 DNS 설정의 보안성을 향상시킵니다.\n\n궁금한 점이나 제안 사항이 있으시면 아래 댓글에 남겨주세요. 즐거운 자동화 되세요!","ogImage":{"url":"/assets/img/2024-05-17-SimpleautomatingDNSRecordBackupsfromRoute53withAWSLambdaandS3_0.png"},"coverImage":"/assets/img/2024-05-17-SimpleautomatingDNSRecordBackupsfromRoute53withAWSLambdaandS3_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"소개\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"DNS 레코드를 관리하는 것은 여러 개의 호스티드 존을 다룰 때 특히 복잡할 수 있습니다. 이러한 레코드의 백업을 자동화하면 유지 관리가 단순화되는데 그치지 않고 필요할 경우 언제든지 백업을 사용할 수 있도록 해줍니다. 이 튜토리얼에서는 AWS Lambda 함수를 생성하여 이를 수행하는 방법을 살펴보겠습니다: 여러 호스티드 존에서 모든 DNS 레코드를 백업하고 이러한 백업을 S3 버킷에 저장하여 레코드의 완전한 JSON을 생성하고 CSV 파일의 별도의 파일에 구성합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"준비 사항\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"적절한 자격 증명으로 구성된 AWS 콘솔.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Route 53 및 S3에 액세스 할 적절한 권한.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"백업을 저장할 S3 버킷이 만들어져 있어야 합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계별 가이드\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"1. 람다 함수 생성하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 람다 함수를 생성해 봅시다. AWS 콘솔에서 Lambda 서비스로 이동하고 \\\"함수 생성\\\"을 클릭합니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이름: Route53Backup\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"런타임: Python 3.x\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"역할: Lambda 기본 권한을 가진 새 역할을 생성하고 Route 53 및 S3에 액세스할 수 있는 권한을 추가합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"람다 정책 권한:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"{\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Version\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"2012-10-17\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Statement\\\"\"\n        }), \": [\\n        {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Effect\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Allow\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Action\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"logs:CreateLogGroup\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Resource\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"arn:aws:logs:us-east-1:12345678:*\\\"\"\n        }), \"\\n        },\\n        {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Effect\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Allow\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Action\\\"\"\n        }), \": [\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"logs:CreateLogStream\\\"\"\n        }), \",\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"logs:PutLogEvents\\\"\"\n        }), \"\\n            ],\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Resource\\\"\"\n        }), \": [\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"arn:aws:logs:us-east-1:12345678:log-group:/aws/lambda/lamda-name:*\\\"\"\n        }), \"\\n            ]\\n        },\\n        {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Effect\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Allow\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Action\\\"\"\n        }), \": [\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"route53:GetHostedZone\\\"\"\n        }), \",\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"route53:ListHostedZones\\\"\"\n        }), \",\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"route53:ListHostedZonesByName\\\"\"\n        }), \",\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"route53:ListResourceRecordSets\\\"\"\n        }), \"\\n            ],\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Resource\\\"\"\n        }), \": [\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"*\\\"\"\n        }), \"\\n            ]\\n        },\\n        {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Effect\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Allow\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Action\\\"\"\n        }), \": [\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"s3:ListBucket\\\"\"\n        }), \",\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"s3:ListAllMyBuckets\\\"\"\n        }), \",\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"s3:PutObject\\\"\"\n        }), \"\\n            ],\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Resource\\\"\"\n        }), \": [\\n                \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"arn:aws:s3:::bucket_name\\\"\"\n        }), \"\\n            ]\\n        }\\n    ]\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"2. Write the Code\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리 람다 함수의 코드입니다. 이 코드는 여러 호스팅된 존에서 DNS 레코드를 검색하여 이를 S3 버킷에 저장합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" boto3\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" json\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" datetime \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" datetime\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" csv\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"lambda_handler\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"event, context\"\n        }), \"):\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 연결된 ID와 도메인 목록\"\n        }), \"\\n    hosted_zones = [\\n        {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'id'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'$HOSTED_ZONE_ID'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'domain'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'$DOMAIN'\"\n        }), \"},\\n        {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'id'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'$HOSTED_ZONE_ID_2'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'domain'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'$DOMAIN2'\"\n        }), \"}\\n    ]\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# Route 53 및 S3 클라이언트 초기화\"\n        }), \"\\n    route53_client = boto3.client(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'route53'\"\n        }), \")\\n    s3_client = boto3.client(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'s3'\"\n        }), \")\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 목록의 각 호스팅 영역을 돌아다니기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" hosted_zone \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" hosted_zones:\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 모든 영역 레코드 가져오기\"\n        }), \"\\n        response = route53_client.list_resource_record_sets(\\n            HostedZoneId=hosted_zone[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'id'\"\n        }), \"]\\n        )\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# JSON 형식으로 변환\"\n        }), \"\\n        records = json.dumps(response[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'ResourceRecordSets'\"\n        }), \"], indent=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \")\\n        records_formatted = response[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'ResourceRecordSets'\"\n        }), \"]\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"#CSV에 행 생성\"\n        }), \"\\n        csv_rows = [[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Name\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Type\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"DNS Name\\\"\"\n        }), \"]]\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" record_formatted \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" records_formatted:\\n            name = record_formatted[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Name'\"\n        }), \"]\\n            record_type = record_formatted[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Type'\"\n        }), \"]\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'AliasTarget'\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" record_formatted:\\n                dns_name = record_formatted[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'AliasTarget'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'DNSName'\"\n        }), \"]\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"elif\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'ResourceRecords'\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" record_formatted:\\n                dns_name = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\", \\\"\"\n        }), \".join([r[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Value'\"\n        }), \"] \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" r \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" record_formatted.get(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'ResourceRecords'\"\n        }), \", [])])\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \":\\n                dns_name = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"#CSV에 행 추가\"\n        }), \"\\n            csv_rows.append([name, record_type, dns_name])\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"#CSV 파일에 레코드 추가\"\n        }), \"\\n        csv_buffer = csv.writer(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"open\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/tmp/\\\"\"\n        }), \" + backup_filename_csv, \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'w'\"\n        }), \"))\\n        csv_buffer.writerows(csv_rows)\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 오늘 날짜와 시간을 포함한 아카이브 이름\"\n        }), \"\\n        backup_filename = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"\", _jsxs(_components.span, {\n            className: \"hljs-subst\",\n            children: [\"{datetime.now().strftime(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"'%Y%m%d-%H%M'\"\n            }), \")}\"]\n          }), \".json\\\"\"]\n        }), \"\\n        backup_filename_csv = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"\", _jsxs(_components.span, {\n            className: \"hljs-subst\",\n            children: [\"{datetime.now().strftime(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"'%Y%m%d-%H%M'\"\n            }), \")}\"]\n          }), \".csv\\\"\"]\n        }), \"\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# S3에 업로드\"\n        }), \"\\n        s3_key = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"\", _jsxs(_components.span, {\n            className: \"hljs-subst\",\n            children: [\"{hosted_zone[\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"'domain'\"\n            }), \"]}\"]\n          }), \"/data/\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{backup_filename}\"\n          }), \"\\\"\"]\n        }), \"\\n        s3_key_csv = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"\", _jsxs(_components.span, {\n            className: \"hljs-subst\",\n            children: [\"{hosted_zone[\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"'domain'\"\n            }), \"]}\"]\n          }), \"/data/\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{backup_filename_csv}\"\n          }), \"\\\"\"]\n        }), \"\\n        s3_client.put_object(\\n            Bucket=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'$BUCKET_NAME'\"\n        }), \",\\n            Key=s3_key,\\n            Body=records\\n        )\\n        \\n        s3_client.upload_file(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/tmp/\\\"\"\n        }), \" + backup_filename_csv, \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'$BUCKET_NAME'\"\n        }), \", s3_key_csv)\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'statusCode'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'body'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"f'Success.'\"\n        }), \"\\n    }\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HOSTED_ZONE_ID 및 BUCKET_NAME의 값을 교체해주세요. 필요하다면 backup_filename_formatted 및 backup_filename 변수를 원하는 파일 이름으로 교체해주세요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"3. 함수 테스트\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수를 테스트하려면 Lambda 콘솔에서 테스트 이벤트를 구성할 수 있습니다. 예를 들어 사용하지 않는 직접적인 입력이 없으므로 빈 JSON ''을 사용할 수 있습니다.```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"4. 실행 일정 예약하기 (선택 사항)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 람다 함수를 주기적으로 실행하고 싶다면 CloudWatch Events 트리거를 구성할 수 있습니다. CloudWatch 콘솔에서 “Rules”로 이동하여 새로운 규칙을 만들고 원하는 간격(예: 매일)에 람다를 트리거하도록 설정하세요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"5. CSV 보기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기에 당신의 도메인 레코드가 어떻게 포맷될지 표시됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-17-SimpleautomatingDNSRecordBackupsfromRoute53withAWSLambdaandS3_0.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Route 53에서 DNS 레코드를 백업하는 것을 자동화하기 위해 Lambda 함수와 S3를 사용하는 것은 항상 DNS 레코드의 최신 사본을 보유할 수 있는 효과적인 방법입니다. 이는 유지 보수를 간편하게 해주는 것뿐만 아니라 DNS 설정의 보안성을 향상시킵니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"궁금한 점이나 제안 사항이 있으시면 아래 댓글에 남겨주세요. 즐거운 자동화 되세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}