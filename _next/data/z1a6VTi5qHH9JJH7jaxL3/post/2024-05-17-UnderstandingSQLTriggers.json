{"pageProps":{"post":{"title":"SQL 트리거 이해하기","description":"","date":"2024-05-17 04:02","slug":"2024-05-17-UnderstandingSQLTriggers","content":"\n\n## Microsoft SQL Server 트리거 탐색\n\n![이미지](/assets/img/2024-05-17-UnderstandingSQLTriggers_0.png)\n\n데이터베이스 관리에서 트리거는 데이터베이스에서 특정 이벤트가 발생할 때 자동으로 실행되는 특수 유형의 저장 프로시저입니다. Microsoft SQL Server(MS SQL)에서의 트리거는 비즈니스 규칙 강제, 데이터 무결성 유지 및 데이터베이스 수준에서 복잡한 비즈니스 논리 구현에 사용됩니다. 데이터가 데이터베이스에 커밋되기 전에 특정 조건이나 규칙이 충족되도록 보장하는 데 중요한 역할을 합니다.\n\n## 트리거 중요성\n\n<div class=\"content-ad\"></div>\n\n현대 데이터베이스 시스템에서 트리거는 중요한 역할을 합니다. 트리거는 반복적인 작업을 자동화하고 비즈니스 규칙을 준수하며 여러 테이블 간의 데이터 무결성을 유지하는 데 도움을 줄 수 있습니다. 트리거를 활용하면 데이터베이스 관리자와 개발자가 데이터의 변경에 동적으로 반응하는 견고하고 신뢰할 수 있는 데이터베이스 애플리케이션을 만들 수 있습니다.\n\n# MS SQL Server의 트리거 유형\n\n# DML 트리거\n\nDML(데이터 조작 언어) 트리거는 MS SQL Server에서 가장 일반적인 유형의 트리거입니다. 이러한 트리거는 테이블이나 뷰에 대한 INSERT, UPDATE 또는 DELETE 작업과 같은 DML 이벤트에 응답하여 발생합니다.\n\n<div class=\"content-ad\"></div>\n\n## 후 트리거\n\n후 트리거 또는 \"for\" 트리거는 연관된 DML 이벤트가 완료된 후에 실행됩니다. 이러한 트리거는 비즈니스 규칙 및 데이터 무결성을 강제하는 데 유용합니다. 왜냐하면 이벤트 후 데이터의 최종 상태에서 작동하기 때문입니다.\n\n```js\nCREATE TRIGGER trgAfterInsert\nON Employees\nAFTER INSERT\nAS\nBEGIN\n    PRINT 'After Insert Trigger Fired'\n    -- 여기에 추가 로직 작성\nEND\n```\n\n## 대신 트리거\n\n<div class=\"content-ad\"></div>\n\n트리거 대신 트리거를 사용하여 트리거 이벤트의 기본 작업을 재정의합니다. 이들은 원래 이벤트 대신 실행되어 개발자가 데이터 수정 작업의 동작을 사용자 정의할 수 있게 합니다.\n\n```js\nCREATE TRIGGER trgInsteadOfUpdate\nON Employees\nINSTEAD OF UPDATE\nAS\nBEGIN\n    PRINT '대신 업데이트 트리거 발동됨'\n    -- 여기에 사용자 정의 로직 작성\nEND\n```\n\n# DDL 트리거\n\nDDL(데이터 정의 언어) 트리거는 CREATE, ALTER 또는 DROP 문과 같은 DDL 이벤트에 응답하여 실행됩니다. 이들은 데이터베이스나 서버 수준에서 스키마 변경을 감사하고 정책을 강제하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nCREATE TRIGGER trgDDLTrigger\nON DATABASE\nFOR CREATE_TABLE\nAS\nBEGIN\n    PRINT '테이블 생성을 위해 DDL 트리거가 발동되었습니다.'\n    -- 감사 기록 로직 추가\nEND\n```\n\n# 로그인 트리거\n\n로그인 트리거는 MS SQL Server에서 LOGON 이벤트에 응답하여 발동됩니다. 로그인 시 사용자 세션을 제어하거나 모니터링하는 데 사용되며, 연결 제한이나 보안 정책 강화 등이 가능합니다.\n\n```js\nCREATE TRIGGER trgLogonTrigger\nON ALL SERVER\nFOR LOGON\nAS\nBEGIN\n    PRINT '로그인 트리거가 발동되었습니다.'\n    -- 보안 확인 로직 추가\nEND\n```\n\n<div class=\"content-ad\"></div>\n\n# 트리거 생성 및 관리\n\n# 트리거 생성\n\nMS SQL Server에서 트리거를 생성하는 것은 트리거의 이벤트, 범위 및 수행할 작업을 정의하는 과정을 포함합니다. CREATE TRIGGER 문을 사용하여 트리거를 정의합니다.\n\n## 예시: 삽입 후 트리거 생성\n\n<div class=\"content-ad\"></div>\n\n```sql\nCREATE TRIGGER trgAfterInsert\nON Orders\nAFTER INSERT\nAS\nBEGIN\n    INSERT INTO AuditLog (Action, Description, ActionDate)\n    VALUES ('INSERT', 'Record inserted into Orders', GETDATE())\nEND\n```\n\n## 트리거 수정\n\n기존 트리거를 수정하는 것은 ALTER TRIGGER 문을 사용하는 것을 포함합니다. 이를 통해 개발자는 트리거의 논리를 업데이트할 수 있습니다.\n\n### 예: After Insert 트리거 수정하기\n\n\n<div class=\"content-ad\"></div>\n\nmd\n```js\nALTER TRIGGER trgAfterInsert\nON Orders\nAFTER INSERT\nAS\nBEGIN\n    INSERT INTO AuditLog (Action, Description, ActionDate)\n    VALUES ('INSERT', 'New record inserted into Orders', GETDATE())\n    PRINT 'Trigger modified'\nEND\n```\n\n# 트리거 삭제\n\n트리거를 삭제하면 데이터베이스에서 해당 트리거가 삭제되어, 미래 이벤트에 대한 응답으로 실행되지 않습니다. DROP TRIGGER 문을 사용하여 트리거를 삭제할 수 있습니다.\n\n## 예시: After Insert 트리거 삭제\n\n\n<div class=\"content-ad\"></div>\n\n```js\nDROP TRIGGER trgAfterInsert\nON Orders\n```\n\n# 트리거의 실제 응용\n\n# 비즈니스 규칙 강제\n\n트리거는 제약 조건만으로 구현할 수 없는 비즈니스 규칙을 강제하는 데 일반적으로 사용됩니다. 예를 들어 주문의 총액이 특정 한도를 초과하지 않도록 하는 것과 같은 경우가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 예시: 트리거를 사용하여 비즈니스 규칙 강제하기\n\n```js\nCREATE TRIGGER trgCheckOrderAmount\nON Orders\nAFTER INSERT, UPDATE\nAS\nBEGIN\n    DECLARE @TotalAmount DECIMAL(10, 2)\n    SELECT @TotalAmount = SUM(OrderAmount) FROM inserted\n    IF @TotalAmount > 10000\n    BEGIN\n        RAISERROR('주문 금액이 한도를 초과합니다', 16, 1)\n        ROLLBACK TRANSACTION\n    END\nEND\n```\n\n# 데이터 무결성 유지\n\n트리거는 관련된 테이블 간의 일관성을 보장하여 데이터 무결성을 유지하는 데 도움을 줍니다. 예를 들어, 외래키 무결성을 유지하기 위해 연쇄 업데이트 또는 삭제를 수행할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 예시: 트리거를 사용하여 데이터 무결성 유지하기\n\n```js\nCREATE TRIGGER trgCascadeDelete\nON Customers\nAFTER DELETE\nAS\nBEGIN\n    DELETE FROM Orders WHERE CustomerID IN (SELECT CustomerID FROM deleted)\nEND\n```\n\n# 감사 및 로깅\n\n트리거는 중요 데이터의 변경 사항을 감사하고 로깅하는 데 널리 사용됩니다. 이를 통해 규정 준수 및 문제 해결 목적으로 데이터 수정에 대한 이력 기록이 제공됩니다.\n\n<div class=\"content-ad\"></div>\n\n## 예제: 트리거를 사용한 데이터 변경 감사\n\n```js\nCREATE TRIGGER trgAuditOrderChanges \nON Orders \nAFTER INSERT, UPDATE, DELETE \nAS \nBEGIN \n    DECLARE @Action CHAR(6) \n    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted) \n        SET @Action = 'UPDATE' \n    ELSE IF EXISTS (SELECT * FROM inserted) \n        SET @Action = 'INSERT' \n    ELSE \n        SET @Action = 'DELETE' \n\n    INSERT INTO AuditLog (Action, TableName, ActionDate) \n    VALUES (@Action, 'Orders', GETDATE()) \nEND \n```\n\n# 복잡한 비즈니스 로직 구현\n\n트리거를 사용하여 여러 단계 또는 조건을 포함하는 복잡한 비즈니스 로직을 구현할 수 있습니다. 이는 데이터베이스 수준에서 비즈니스 규칙을 캡슐화하는 데 도움이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n## 예시: 트리거를 사용하여 복잡한 비즈니스 로직 구현\n\n```js\nCREATE TRIGGER trgComplexLogic\nON Sales\nAFTER INSERT, UPDATE\nAS\nBEGIN\n    DECLARE @TotalSales DECIMAL(10, 2)\n    SELECT @TotalSales = SUM(SaleAmount) FROM Sales\n\n    IF @TotalSales > 50000\n    BEGIN\n        -- 할인 로직 적용\n        UPDATE Sales\n        SET Discount = 0.1\n        WHERE SaleAmount > 1000\n    END\nEND\n```\n\n# 트리거 사용에 대한 Best Practices\n\n# 신중하게 트리거 사용하기\n\n<div class=\"content-ad\"></div>\n\n트리거는 복잡성과 성능 부담을 야기할 수 있습니다. 중요한 비즈니스 규칙을 시행하거나 데이터 무결성을 유지해야 할 때에만 신중하게 사용하세요.\n\n## 트리거에서 복잡한 로직 피하기\n\n트리거 내의 로직을 간단하고 효율적으로 유지하세요. 복잡한 로직은 성능 문제를 일으키고 디버깅을 어렵게 만들 수 있습니다.\n\n## 중첩 트리거 사용 최소화하기\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경해보세요.\n\n\n| Header1 | Header2 |\n|---------|---------|\n| Data1   | Data2   |\n\n\n<div class=\"content-ad\"></div>\n\n각 트리거의 목적과 논리를 문서화하여 코드를 이해하고 유지 관리하기 쉽도록 하세요.\n\n# 성능 고려사항\n\n# 성능에 미치는 영향\n\n트리거는 DML 작업의 성능에 영향을 줄 수 있습니다. 왜냐하면 추가적인 처리 단계를 도입하기 때문입니다. 트리거의 성능 영향을 특히 높은 트랜잭션 환경에서는 평가하는 것이 중요합니다.\n\n<div class=\"content-ad\"></div>\n\n# 색인 및 트리거\n\n적절한 색인을 사용하면 트리거의 성능을 향상시킬 수 있습니다. 트리거 로직 내의 쿼리 실행 속도를 높이기 위해 관련 열을 적절히 색인화하십시오.\n\n# 모니터링 및 조정\n\n정기적으로 트리거의 성능을 모니터링하고 필요에 따라 튜닝하십시오. SQL Server Profiler 및 Extended Events와 같은 도구를 사용하여 데이터베이스 성능에 미치는 트리거의 영향을 분석하십시오.\n\n<div class=\"content-ad\"></div>\n\n# 고급 주제\n\n# 재귀 트리거\n\n재귀 트리거는 자신을 직접 또는간접적으로 호출하는 트리거입니다. MS SQL Server에서는 재귀 트리거를 허용하지만 무한 루프와 성능 문제를 피하기 위해 주의해서 사용해야 합니다.\n\n```js\nALTER DATABASE AdventureWorks2012\nSET RECURSIVE_TRIGGERS ON\n```\n\n<div class=\"content-ad\"></div>\n\n# 트리거 비활성화 및 활성화\n\nDISABLE TRIGGER와 ENABLE TRIGGER 문을 사용하여 트리거를 일시적으로 비활성화하고 활성화할 수 있습니다. 이는 유지보수 작업이나 대량 데이터 작업에 유용합니다.\n\n## 예시: 트리거 비활성화와 활성화\n\n```js\nDISABLE TRIGGER trgAuditOrderChanges ON Orders\n-- 유지보수 작업 수행\nENABLE TRIGGER trgAuditOrderChanges ON Orders\n```\n\n<div class=\"content-ad\"></div>\n\n# 대신에 뷰에서의 트리거\n\n표준 DML 작업으로 직접 수행할 수 없는 복잡한 업데이트 작업을 지원하기 위해 뷰에 대신에 트리거를 생성할 수 있습니다.\n\n## 예시: 뷰에 대신에 트리거 생성\n\n```js\nCREATE VIEW vwOrders\nAS\nSELECT OrderID, CustomerID, OrderDate, TotalAmount\nFROM Orders\n\nCREATE TRIGGER trgInsteadOfInsertOnView\nON vwOrders\nINSTEAD OF INSERT\nAS\nBEGIN\n    INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount)\n    SELECT OrderID, CustomerID, OrderDate, TotalAmount\n    FROM inserted\nEND\n```\n\n<div class=\"content-ad\"></div>\n\n# 스키마\n\n## 직원 테이블\n\n```js\nCREATE TABLE Employees (\n    EmployeeID INT PRIMARY KEY IDENTITY,\n    FirstName NVARCHAR(50),\n    LastName NVARCHAR(50),\n    HireDate DATE,\n    JobTitle NVARCHAR(50)\n);\n```\n\n## 주문 테이블\n\n<div class=\"content-ad\"></div>\n\n\n```javascript\nCREATE TABLE Orders (\n    OrderID INT PRIMARY KEY IDENTITY,\n    CustomerID INT,\n    OrderDate DATE,\n    OrderAmount DECIMAL(10, 2)\n);\n```\n\n## AuditLog Table\n\n```javascript\nCREATE TABLE AuditLog (\n    AuditID INT PRIMARY KEY IDENTITY,\n    Action NVARCHAR(50),\n    Description NVARCHAR(255),\n    ActionDate DATETIME\n);\n```\n\n## Customers Table\n\n<div class=\"content-ad\"></div>\n\n```sql\nCREATE TABLE Customers (\n    CustomerID INT PRIMARY KEY IDENTITY,\n    FirstName NVARCHAR(50),\n    LastName NVARCHAR(50),\n    Email NVARCHAR(100)\n);\n```\n\n## Sales Table\n\n```sql\nCREATE TABLE Sales (\n    SaleID INT PRIMARY KEY IDENTITY,\n    ProductID INT,\n    SaleDate DATE,\n    SaleAmount DECIMAL(10, 2),\n    Discount DECIMAL(5, 2) DEFAULT 0\n);\n```\n\n# Creating Views\n\n\n<div class=\"content-ad\"></div>\n\n## 주문 보기\n\n```js\nCREATE VIEW vwOrders\nAS\nSELECT OrderID, CustomerID, OrderDate, TotalAmount\nFROM Orders;\n```\n\n# 인덱스\n\n트리거의 성능을 최적화하기 위해 Orders 및 Customers 테이블의 CustomerID 및 Orders 테이블의 OrderAmount와 같은 트리거 논리에서 자주 사용되는 열에 인덱스를 생성하는 것이 좋습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nCREATE INDEX idxOrders_CustomerID ON Orders(CustomerID);\nCREATE INDEX idxOrders_OrderAmount ON Orders(OrderAmount);\nCREATE INDEX idxSales_SaleAmount ON Sales(SaleAmount);\n```\n\n# 테스트용 데이터 삽입\n\n트리거를 테스트하려면 이러한 테이블에 샘플 데이터를 삽입할 수 있습니다.\n\n## 직원 테이블에 샘플 데이터 삽입\n\n\n<div class=\"content-ad\"></div>\n\n```js\nINSERT INTO 직원 (이름, 성, 입사일, 직책)\nVALUES\n('바바르', '아자임', '2020-01-15', '개발자'),\n('알리', '라자', '2019-03-10', '매니저');\n```\n\n## 고객 테이블에 샘플 데이터 삽입\n\n```js\nINSERT INTO 고객 (이름, 성, 이메일)\nVALUES\n('앨리스', '존슨', 'alice.johnson@example.com'),\n('밥', '브라운', 'bob.brown@example.com');\n```\n\n## 주문 테이블에 샘플 데이터 삽입\n\n\n<div class=\"content-ad\"></div>\n\n```js\nINSERT INTO Orders (CustomerID, OrderDate, OrderAmount)\nVALUES\n(1, '2024-05-10', 250.00),\n(2, '2024-05-11', 450.00);\n```\n\n## Sales 테이블에 샘플 데이터 삽입\n\n```js\nINSERT INTO Sales (ProductID, SaleDate, SaleAmount)\nVALUES\n(1, '2024-05-10', 1500.00),\n(2, '2024-05-11', 3000.00);\n```\n\n이러한 테이블을 생성하고 샘플 데이터를 삽입함으로써, 기사에서 설명한 트리거를 효과적으로 구현하고 테스트할 수 있습니다. 이 스키마는 데이터베이스 환경에서 다양한 유형의 트리거와 실제 적용에 대한 포괄적인 기초를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n# 요약\n\nMicrosoft SQL Server의 트리거는 작업 자동화, 비즈니스 규칙 강제, 데이터 무결성 유지 및 복잡한 비즈니스 논리 구현을 위한 강력한 도구입니다. 다른 유형의 트리거와 그 적용 방법을 이해함으로써, 데이터베이스 관리자와 개발자는 견고하고 효율적인 데이터베이스 시스템을 만들 수 있습니다.\n\n# 마지막으로 생각해 볼 점\n\n<div class=\"content-ad\"></div>\n\n트리거는 중요한 이점을 제공하지만, 성능 및 유지 관리에 미치는 영향을 신중히 고려하여 신중하게 사용되어야 합니다. 최상의 모범 사례를 따르고 트리거를 철저히 테스트함으로써 기관은 데이터베이스 응용 프로그램의 기능성과 신뢰성을 향상시키는 데 그들의 전체 잠재력을 활용할 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-17-UnderstandingSQLTriggers_0.png"},"coverImage":"/assets/img/2024-05-17-UnderstandingSQLTriggers_0.png","tag":["Tech"],"readingTime":10},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Microsoft SQL Server 트리거 탐색\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-UnderstandingSQLTriggers_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터베이스 관리에서 트리거는 데이터베이스에서 특정 이벤트가 발생할 때 자동으로 실행되는 특수 유형의 저장 프로시저입니다. Microsoft SQL Server(MS SQL)에서의 트리거는 비즈니스 규칙 강제, 데이터 무결성 유지 및 데이터베이스 수준에서 복잡한 비즈니스 논리 구현에 사용됩니다. 데이터가 데이터베이스에 커밋되기 전에 특정 조건이나 규칙이 충족되도록 보장하는 데 중요한 역할을 합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"트리거 중요성\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현대 데이터베이스 시스템에서 트리거는 중요한 역할을 합니다. 트리거는 반복적인 작업을 자동화하고 비즈니스 규칙을 준수하며 여러 테이블 간의 데이터 무결성을 유지하는 데 도움을 줄 수 있습니다. 트리거를 활용하면 데이터베이스 관리자와 개발자가 데이터의 변경에 동적으로 반응하는 견고하고 신뢰할 수 있는 데이터베이스 애플리케이션을 만들 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"MS SQL Server의 트리거 유형\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"DML 트리거\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"DML(데이터 조작 언어) 트리거는 MS SQL Server에서 가장 일반적인 유형의 트리거입니다. 이러한 트리거는 테이블이나 뷰에 대한 INSERT, UPDATE 또는 DELETE 작업과 같은 DML 이벤트에 응답하여 발생합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"후 트리거\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"후 트리거 또는 \\\"for\\\" 트리거는 연관된 DML 이벤트가 완료된 후에 실행됩니다. 이러한 트리거는 비즈니스 규칙 및 데이터 무결성을 강제하는 데 유용합니다. 왜냐하면 이벤트 후 데이터의 최종 상태에서 작동하기 때문입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgAfterInsert\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Employees\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AFTER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PRINT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'After Insert Trigger Fired'\"\n        }), \"\\n    -- 여기에 추가 로직 작성\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"대신 트리거\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거 대신 트리거를 사용하여 트리거 이벤트의 기본 작업을 재정의합니다. 이들은 원래 이벤트 대신 실행되어 개발자가 데이터 수정 작업의 동작을 사용자 정의할 수 있게 합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgInsteadOfUpdate\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Employees\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSTEAD\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"OF\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"UPDATE\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PRINT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'대신 업데이트 트리거 발동됨'\"\n        }), \"\\n    -- 여기에 사용자 정의 로직 작성\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"DDL 트리거\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"DDL(데이터 정의 언어) 트리거는 CREATE, ALTER 또는 DROP 문과 같은 DDL 이벤트에 응답하여 실행됩니다. 이들은 데이터베이스나 서버 수준에서 스키마 변경을 감사하고 정책을 강제하는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgDDLTrigger\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DATABASE\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FOR\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE_TABLE\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PRINT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'테이블 생성을 위해 DDL 트리거가 발동되었습니다.'\"\n        }), \"\\n    -- 감사 기록 로직 추가\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"로그인 트리거\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"로그인 트리거는 MS SQL Server에서 LOGON 이벤트에 응답하여 발동됩니다. 로그인 시 사용자 세션을 제어하거나 모니터링하는 데 사용되며, 연결 제한이나 보안 정책 강화 등이 가능합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgLogonTrigger\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ALL\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SERVER\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FOR\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"LOGON\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PRINT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'로그인 트리거가 발동되었습니다.'\"\n        }), \"\\n    -- 보안 확인 로직 추가\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"트리거 생성 및 관리\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"트리거 생성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"MS SQL Server에서 트리거를 생성하는 것은 트리거의 이벤트, 범위 및 수행할 작업을 정의하는 과정을 포함합니다. CREATE TRIGGER 문을 사용하여 트리거를 정의합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"예시: 삽입 후 트리거 생성\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"TRIGGER\"\n        }), \" trgAfterInsert\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"ON\"\n        }), \" Orders\\nAFTER \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"INSERT\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"BEGIN\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"INSERT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"INTO\"\n        }), \" AuditLog (Action, Description, ActionDate)\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"VALUES\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'INSERT'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Record inserted into Orders'\"\n        }), \", GETDATE())\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"END\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"트리거 수정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기존 트리거를 수정하는 것은 ALTER TRIGGER 문을 사용하는 것을 포함합니다. 이를 통해 개발자는 트리거의 논리를 업데이트할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"예: After Insert 트리거 수정하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"md\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ALTER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgAfterInsert\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AFTER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INTO\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AuditLog\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Action\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Description\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ActionDate\"\n        }), \")\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"VALUES\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'INSERT'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'New record inserted into Orders'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"GETDATE\"\n        }), \"())\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PRINT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Trigger modified'\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"트리거 삭제\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거를 삭제하면 데이터베이스에서 해당 트리거가 삭제되어, 미래 이벤트에 대한 응답으로 실행되지 않습니다. DROP TRIGGER 문을 사용하여 트리거를 삭제할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"예시: After Insert 트리거 삭제\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DROP\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgAfterInsert\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"트리거의 실제 응용\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"비즈니스 규칙 강제\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거는 제약 조건만으로 구현할 수 없는 비즈니스 규칙을 강제하는 데 일반적으로 사용됩니다. 예를 들어 주문의 총액이 특정 한도를 초과하지 않도록 하는 것과 같은 경우가 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"예시: 트리거를 사용하여 비즈니스 규칙 강제하기\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgCheckOrderAmount\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AFTER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"UPDATE\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DECLARE\"\n        }), \" @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TotalAmount\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"DECIMAL\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \")\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TotalAmount\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"SUM\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderAmount\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" inserted\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IF\"\n        }), \" @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TotalAmount\"\n        }), \" > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10000\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"RAISERROR\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'주문 금액이 한도를 초과합니다'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"16\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ROLLBACK\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRANSACTION\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"데이터 무결성 유지\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거는 관련된 테이블 간의 일관성을 보장하여 데이터 무결성을 유지하는 데 도움을 줍니다. 예를 들어, 외래키 무결성을 유지하기 위해 연쇄 업데이트 또는 삭제를 수행할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"예시: 트리거를 사용하여 데이터 무결성 유지하기\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgCascadeDelete\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Customers\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AFTER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DELETE\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DELETE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"WHERE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomerID\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomerID\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" deleted)\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"감사 및 로깅\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거는 중요 데이터의 변경 사항을 감사하고 로깅하는 데 널리 사용됩니다. 이를 통해 규정 준수 및 문제 해결 목적으로 데이터 수정에 대한 이력 기록이 제공됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"예제: 트리거를 사용한 데이터 변경 감사\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgAuditOrderChanges \\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \" \\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AFTER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"UPDATE\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DELETE\"\n        }), \" \\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \" \\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \" \\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DECLARE\"\n        }), \" @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Action\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"CHAR\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \") \\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IF\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"EXISTS\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" * \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" inserted) \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AND\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"EXISTS\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" * \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" deleted) \\n        \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SET\"\n        }), \" @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Action\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'UPDATE'\"\n        }), \" \\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ELSE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IF\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"EXISTS\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" * \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" inserted) \\n        \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SET\"\n        }), \" @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Action\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'INSERT'\"\n        }), \" \\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ELSE\"\n        }), \" \\n        \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SET\"\n        }), \" @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Action\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'DELETE'\"\n        }), \" \\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INTO\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AuditLog\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Action\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TableName\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ActionDate\"\n        }), \") \\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"VALUES\"\n        }), \" (@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Action\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Orders'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"GETDATE\"\n        }), \"()) \\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \" \\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"복잡한 비즈니스 로직 구현\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거를 사용하여 여러 단계 또는 조건을 포함하는 복잡한 비즈니스 로직을 구현할 수 있습니다. 이는 데이터베이스 수준에서 비즈니스 규칙을 캡슐화하는 데 도움이 됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"예시: 트리거를 사용하여 복잡한 비즈니스 로직 구현\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgComplexLogic\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Sales\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AFTER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"UPDATE\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DECLARE\"\n        }), \" @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TotalSales\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"DECIMAL\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \")\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TotalSales\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"SUM\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SaleAmount\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Sales\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IF\"\n        }), \" @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TotalSales\"\n        }), \" > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50000\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \"\\n        -- 할인 로직 적용\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"UPDATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Sales\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SET\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Discount\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.1\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"WHERE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SaleAmount\"\n        }), \" > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1000\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"트리거 사용에 대한 Best Practices\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"신중하게 트리거 사용하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거는 복잡성과 성능 부담을 야기할 수 있습니다. 중요한 비즈니스 규칙을 시행하거나 데이터 무결성을 유지해야 할 때에만 신중하게 사용하세요.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"트리거에서 복잡한 로직 피하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거 내의 로직을 간단하고 효율적으로 유지하세요. 복잡한 로직은 성능 문제를 일으키고 디버깅을 어렵게 만들 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"중첩 트리거 사용 최소화하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"테이블 태그를 마크다운 형식으로 변경해보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| Header1 | Header2 |\\n|---------|---------|\\n| Data1   | Data2   |\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"각 트리거의 목적과 논리를 문서화하여 코드를 이해하고 유지 관리하기 쉽도록 하세요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"성능 고려사항\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"성능에 미치는 영향\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거는 DML 작업의 성능에 영향을 줄 수 있습니다. 왜냐하면 추가적인 처리 단계를 도입하기 때문입니다. 트리거의 성능 영향을 특히 높은 트랜잭션 환경에서는 평가하는 것이 중요합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"색인 및 트리거\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"적절한 색인을 사용하면 트리거의 성능을 향상시킬 수 있습니다. 트리거 로직 내의 쿼리 실행 속도를 높이기 위해 관련 열을 적절히 색인화하십시오.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"모니터링 및 조정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"정기적으로 트리거의 성능을 모니터링하고 필요에 따라 튜닝하십시오. SQL Server Profiler 및 Extended Events와 같은 도구를 사용하여 데이터베이스 성능에 미치는 트리거의 영향을 분석하십시오.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"고급 주제\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"재귀 트리거\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"재귀 트리거는 자신을 직접 또는간접적으로 호출하는 트리거입니다. MS SQL Server에서는 재귀 트리거를 허용하지만 무한 루프와 성능 문제를 피하기 위해 주의해서 사용해야 합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ALTER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DATABASE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AdventureWorks2012\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SET\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RECURSIVE_TRIGGERS\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"트리거 비활성화 및 활성화\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"DISABLE TRIGGER와 ENABLE TRIGGER 문을 사용하여 트리거를 일시적으로 비활성화하고 활성화할 수 있습니다. 이는 유지보수 작업이나 대량 데이터 작업에 유용합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"예시: 트리거 비활성화와 활성화\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DISABLE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgAuditOrderChanges \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \"\\n-- 유지보수 작업 수행\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ENABLE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgAuditOrderChanges \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"대신에 뷰에서의 트리거\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"표준 DML 작업으로 직접 수행할 수 없는 복잡한 업데이트 작업을 지원하기 위해 뷰에 대신에 트리거를 생성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"예시: 뷰에 대신에 트리거 생성\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"VIEW\"\n        }), \" vwOrders\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderID\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomerID\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderDate\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TotalAmount\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TRIGGER\"\n        }), \" trgInsteadOfInsertOnView\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" vwOrders\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSTEAD\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"OF\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BEGIN\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INTO\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderID\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomerID\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderDate\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TotalAmount\"\n        }), \")\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderID\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomerID\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderDate\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TotalAmount\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" inserted\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"END\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"스키마\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"직원 테이블\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TABLE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Employees\"\n        }), \" (\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EmployeeID\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PRIMARY\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"KEY\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IDENTITY\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FirstName\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"NVARCHAR\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \"),\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LastName\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"NVARCHAR\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \"),\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"HireDate\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DATE\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JobTitle\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"NVARCHAR\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \")\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"주문 테이블\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-javascript\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TABLE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \" (\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderID\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PRIMARY\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"KEY\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IDENTITY\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomerID\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INT\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderDate\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DATE\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderAmount\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"DECIMAL\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \")\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"AuditLog Table\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-javascript\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TABLE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AuditLog\"\n        }), \" (\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AuditID\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PRIMARY\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"KEY\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IDENTITY\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Action\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"NVARCHAR\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \"),\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Description\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"NVARCHAR\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"255\"\n        }), \"),\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ActionDate\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DATETIME\"\n        }), \"\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Customers Table\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"TABLE\"\n        }), \" Customers (\\n    CustomerID \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"INT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"PRIMARY\"\n        }), \" KEY \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"IDENTITY\"\n        }), \",\\n    FirstName NVARCHAR(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \"),\\n    LastName NVARCHAR(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \"),\\n    Email NVARCHAR(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \")\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Sales Table\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"TABLE\"\n        }), \" Sales (\\n    SaleID \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"INT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"PRIMARY\"\n        }), \" KEY \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"IDENTITY\"\n        }), \",\\n    ProductID \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"INT\"\n        }), \",\\n    SaleDate \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"DATE\"\n        }), \",\\n    SaleAmount \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"DECIMAL\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"),\\n    Discount \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"DECIMAL\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"DEFAULT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Creating Views\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"주문 보기\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"VIEW\"\n        }), \" vwOrders\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderID\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomerID\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderDate\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TotalAmount\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"인덱스\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거의 성능을 최적화하기 위해 Orders 및 Customers 테이블의 CustomerID 및 Orders 테이블의 OrderAmount와 같은 트리거 논리에서 자주 사용되는 열에 인덱스를 생성하는 것이 좋습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INDEX\"\n        }), \" idxOrders_CustomerID \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomerID\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INDEX\"\n        }), \" idxOrders_OrderAmount \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderAmount\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INDEX\"\n        }), \" idxSales_SaleAmount \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ON\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Sales\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SaleAmount\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"테스트용 데이터 삽입\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거를 테스트하려면 이러한 테이블에 샘플 데이터를 삽입할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"직원 테이블에 샘플 데이터 삽입\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INTO\"\n        }), \" 직원 (이름, 성, 입사일, 직책)\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"VALUES\"\n        }), \"\\n(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'바바르'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'아자임'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'2020-01-15'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'개발자'\"\n        }), \"),\\n(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'알리'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'라자'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'2019-03-10'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'매니저'\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"고객 테이블에 샘플 데이터 삽입\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INTO\"\n        }), \" 고객 (이름, 성, 이메일)\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"VALUES\"\n        }), \"\\n(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'앨리스'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'존슨'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'alice.johnson@example.com'\"\n        }), \"),\\n(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'밥'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'브라운'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'bob.brown@example.com'\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"주문 테이블에 샘플 데이터 삽입\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INTO\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Orders\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomerID\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderDate\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OrderAmount\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"VALUES\"\n        }), \"\\n(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'2024-05-10'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"250.00\"\n        }), \"),\\n(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'2024-05-11'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"450.00\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Sales 테이블에 샘플 데이터 삽입\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INSERT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INTO\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Sales\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ProductID\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SaleDate\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SaleAmount\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"VALUES\"\n        }), \"\\n(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'2024-05-10'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1500.00\"\n        }), \"),\\n(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'2024-05-11'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3000.00\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 테이블을 생성하고 샘플 데이터를 삽입함으로써, 기사에서 설명한 트리거를 효과적으로 구현하고 테스트할 수 있습니다. 이 스키마는 데이터베이스 환경에서 다양한 유형의 트리거와 실제 적용에 대한 포괄적인 기초를 제공합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"요약\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Microsoft SQL Server의 트리거는 작업 자동화, 비즈니스 규칙 강제, 데이터 무결성 유지 및 복잡한 비즈니스 논리 구현을 위한 강력한 도구입니다. 다른 유형의 트리거와 그 적용 방법을 이해함으로써, 데이터베이스 관리자와 개발자는 견고하고 효율적인 데이터베이스 시스템을 만들 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"마지막으로 생각해 볼 점\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"트리거는 중요한 이점을 제공하지만, 성능 및 유지 관리에 미치는 영향을 신중히 고려하여 신중하게 사용되어야 합니다. 최상의 모범 사례를 따르고 트리거를 철저히 테스트함으로써 기관은 데이터베이스 응용 프로그램의 기능성과 신뢰성을 향상시키는 데 그들의 전체 잠재력을 활용할 수 있습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}