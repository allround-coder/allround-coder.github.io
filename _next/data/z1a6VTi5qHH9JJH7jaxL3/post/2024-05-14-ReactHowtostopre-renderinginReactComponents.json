{"pageProps":{"post":{"title":"리액트  리액트 컴포넌트에서 리렌더링을 멈추는 방법","description":"","date":"2024-05-14 11:12","slug":"2024-05-14-ReactHowtostopre-renderinginReactComponents","content":"\n\n<img src=\"/assets/img/2024-05-14-ReactHowtostopre-renderinginReactComponents_0.png\" />\n\n리액트는 초기에 비해 많은 발전을 이루었습니다. 그럼에도 여전히 많은 사람들이 불필요한 다시 렌더링을 고치기 어려운 것으로 생각합니다.\n\n불필요한 다시 렌더링을 피하는 다양한 방법이 있습니다. 여기에서는 리액트에서 불필요한 다시 렌더링을 피하는 몇 가지 방법과 접근법을 논의하고 있습니다.\n\n- useState()를 useRef()훅으로 대체하기.\n- 메모이제이션된 셀렉터를 만들기 위해 Reselect 라이브러리 사용.\n- 데이터 가져오기를 위한 리액트 훅 라이브러리인 SWR 사용.\n- useMemo() 및 useCallback() 훅을 사용한 메모이제이션.\n\n\n\n# 1. useState()을 useRef() 훅으로 변경하기\n\nuseState() 훅은 React 함수형 컴포넌트에서 상태가 변경될 때 컴포넌트를 다시 렌더링하는 데 자주 사용되는 훅입니다. 그러나 경우에 따라 컴포넌트를 다시 렌더링하지 않고 업데이트를 추적해야 할 때가 있습니다. 이럴 때 useRef() 훅을 사용할 수 있습니다. useRef()를 사용하면 useState()처럼 다시 렌더링을 호출하지 않고 업데이트를 추적할 수 있습니다.\n\nuseState()를 사용한 예시:\n\n```js\nfunction inputWithState() {\n  const [value, setValue] = useState(\"\");\n  return (\n    <input \n      value={value} \n      onChange={e => setValue(e.target.value)} \n      type={type} \n    />\n  );\n}\n```\n\n\n\n이 예시에서는 input에서 각 키 입력마다 onChange 이벤트로 상태 변경이 발생하여 재렌더링됩니다.\n\nuseRef()를 활용한 예시:\n\n```js\nfunction inputWithRef() {\n  const inputEl = useRef(null);\n  console.log(inputEl?.current?.value);\n  return (\n    <input ref={inputEl} type=\"text\" />\n  );\n}\n```\n\n이 예시에서는 input에 입력하는 모든 내용을 input 참조를 통해 읽을 수 있습니다. 이 접근법은 각 키 입력마다 불필요한 재렌더링을 피할 수 있습니다.\n\n\n\n# 2. Reselect 라이브러리를 사용하여 메모이제이션 셀렉터 만들기\n\n리액트 컴포넌트는 빠른 수명주기를 갖고 있지만, 너무 많은 다시 렌더링으로 늘 피해를 입는 경우가 많습니다. 이를 해결하기 위해 개발자들은 성능을 개선하기 위해 Redux와 함께 사용되는 인기 라이브러리 Reselect의 래퍼인 서드파티 성능 라이브러리 re-select를 만들었습니다. 이 라이브러리는 메모이제이션 셀렉터를 코딩하여 성능을 향상시킵니다.\n\n- 셀렉터는 파생 데이터를 계산할 수 있어 Redux가 가능한 한 적은 상태를 저장할 수 있게 합니다.\n- 셀렉터는 효율적입니다. 셀렉터는 인수 중 하나가 변경될 때까지 재계산되지 않습니다.\n- 셀렉터는 조합 가능합니다. 다른 셀렉터의 입력으로 사용될 수 있습니다.\n\n예시:\n\n\n\n```js\nimport { createSelector } from 'reselect'\nconst selectShopItems = state => state.shop.items\nconst selectTaxPercent = state => state.shop.taxPercent\nconst selectSubtotal = createSelector(selectShopItems, items =>\n  items.reduce((subtotal, item) => subtotal + item.value, 0)\n)\nconst selectTax = createSelector(\n  selectSubtotal,\n  selectTaxPercent,\n  (subtotal, taxPercent) => subtotal * (taxPercent / 100)\n)\nconst selectTotal = createSelector(\n  selectSubtotal,\n  selectTax,\n  (subtotal, tax) => ({ total: subtotal + tax })\n)\nconst exampleState = {\n  shop: {\n    taxPercent: 8,\n    items: [\n      { name: 'apple', value: 1.2 },\n      { name: 'orange', value: 0.95 }\n    ]\n  }\n}\nconsole.log(selectSubtotal(exampleState)) // 2.15\nconsole.log(selectTax(exampleState)) // 0.172\nconsole.log(selectTotal(exampleState)) // { total: 2.322 }\n```\n\n여기서 createSelector는 2개의 선택기를 입력으로 받아 메모이즈된 버전을 반환합니다. 값이 다를 때까지 이 메모이즈된 버전을 사용하여 선택기는 다시 계산되지 않을 것입니다.\n\nReselect는 Redux에만 한정되지 않으나, 공식 Redux Toolkit 패키지에 이미 기본으로 포함되어 있습니다. 추가 설치가 필요하지 않습니다.\n\n# 3. SWR 사용하기 - 데이터 패치용 리액트 훅스 라이브러리```\n\n\n\nSWR은 데이터 가져오기를 위한 React Hooks 라이브러리입니다.\n\n\"SWR\"이라는 이름은 stale-while-revalidate의 약자입니다. SWR은 먼저 캐시에서 데이터를 반환한 후(request), 데이터를 업데이트하고(get), 최신 데이터를 다시 가져옵니다. 이를 통해 컴포넌트가 여러 번 다시 렌더링 되는 것을 방지할 수 있습니다.\n\n한 가지 훅으로 프로젝트에서 데이터 가져오기 로직을 크게 간소화할 수 있습니다. 뿐만 아니라 속도, 정확성, 안정성 면에서 모두 다루어져 더 나은 애플리케이션을 구축하는 데 도움이 됩니다.\n\n예시:\n\n\n\n```js\nfunction Profile() {\n  const { data, error } = useSWR('/api/user', fetcher)\n\n  if (error) return <div>로드에 실패했습니다</div>\n  if (!data) return <div>로딩 중...</div>\n  return <div>안녕하세요 {data.name}님!</div>\n}\n```\n\n더 많은 정보와 예제는 여기를 참조하세요: [https://swr.vercel.app/](https://swr.vercel.app/)\n\n## 4. useMemo() 및 useCallback()Hooks를 사용한 Memoization\n\nMemoization은 우리의 리액트 코드를 프롭스에 업데이트가 있을 때에만 컴포넌트를 다시 렌더링하도록 하는 것을 가능하게 합니다. 이 접근 방식을 통해 개발자는 불필요한 다시 렌더링을 피하고 응용 프로그램에서의 계산 부하를 줄일 수 있습니다.\n\n\n\n\n리액트는 메모이제이션을 만들기 위해 두 가지 훅을 제공합니다:\n\n- useMemo()\n- useCallback()\n\n이 훅들은 계산 없이 입력이 동일한 경우 캐싱되어 동일한 결과를 반환하여 다시 렌더링을 줄입니다. 입력이 업데이트되면 캐시가 무효화되고 새로운 컴포넌트 상태가 렌더링됩니다.\n\n- useMemo()\n\n\n\n이 훅은 함수 호출과 렌더 사이에서 계산 결과를 메모이징하는 데 사용됩니다.\n\n예시:\n\n```js\nconst expensiveFunction = (inputValue) => {\n  let expensiveValue = inputValue * 42;\n  //... 입력값을 포함한 계산 작업이 많은 경우...\n  expensiveValue = 'World';\n  return expensiveValue;\n};\nconst MyComponent = ({ something }) => {\n  const [inputValue, setInputValue] = useState('');  \n  const expensiveValue = useMemo(\n    () => expensiveFunction(inputValue), \n    [ inputValue ]\n  );  \n  return <h1>Hello {expensiveValue}</h1>;\n};\n```\n\n2. useCallback()\n\n\n\n이것은 메모이제이션을 구현하는 또 다른 React Hook입니다. 그러나 useMemo()와 달리 결과를 캐시하지 않고 대신 제공된 콜백 함수를 메모이즈합니다.\n\n예시:\n\n```js\nfunction item() {\n  const onClick = useCallback(event => {\n    console.log('Clicked Item : ', event.currentTarget);\n  }, [item]);\n  \n  return (\n    <li={item} onClick={onClick} />\n  );\n}\n```\n\n예시에서 useCallback()은 onClick 콜백을 메모이즈합니다. 따라서 사용자가 동일한 항목을 계속 클릭해도 컴포넌트를 다시 렌더링하지 않습니다.\n\n\n\n이 기사가 리액트 컴포넌트에서 재랜더링 문제를 해결하는 데 도움이 되기를 바랍니다. 만약 리액트에서 재랜더링을 피하는 다른 방법이나 기술이 있다면 댓글에 추가해 주세요.\n\n당신의 지원을 보여주기 위해 아래의 👏 버튼을 최대한 많이 눌러주세요!\n\n독자 여러분, 감사합니다. 화이팅!!!\n\n당신은 멋져요!","ogImage":{"url":"/assets/img/2024-05-14-ReactHowtostopre-renderinginReactComponents_0.png"},"coverImage":"/assets/img/2024-05-14-ReactHowtostopre-renderinginReactComponents_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    a: \"a\",\n    h2: \"h2\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-ReactHowtostopre-renderinginReactComponents_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"리액트는 초기에 비해 많은 발전을 이루었습니다. 그럼에도 여전히 많은 사람들이 불필요한 다시 렌더링을 고치기 어려운 것으로 생각합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"불필요한 다시 렌더링을 피하는 다양한 방법이 있습니다. 여기에서는 리액트에서 불필요한 다시 렌더링을 피하는 몇 가지 방법과 접근법을 논의하고 있습니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"useState()를 useRef()훅으로 대체하기.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"메모이제이션된 셀렉터를 만들기 위해 Reselect 라이브러리 사용.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"데이터 가져오기를 위한 리액트 훅 라이브러리인 SWR 사용.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"useMemo() 및 useCallback() 훅을 사용한 메모이제이션.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"1. useState()을 useRef() 훅으로 변경하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"useState() 훅은 React 함수형 컴포넌트에서 상태가 변경될 때 컴포넌트를 다시 렌더링하는 데 자주 사용되는 훅입니다. 그러나 경우에 따라 컴포넌트를 다시 렌더링하지 않고 업데이트를 추적해야 할 때가 있습니다. 이럴 때 useRef() 훅을 사용할 수 있습니다. useRef()를 사용하면 useState()처럼 다시 렌더링을 호출하지 않고 업데이트를 추적할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"useState()를 사용한 예시:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"inputWithState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [value, setValue] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{value}\"\n            }), \" \\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{e\"\n            }), \" =>\"]\n          }), \" setValue(e.target.value)} \\n      type={type} \\n    />\"]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예시에서는 input에서 각 키 입력마다 onChange 이벤트로 상태 변경이 발생하여 재렌더링됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"useRef()를 활용한 예시:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"inputWithRef\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" inputEl = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useRef\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(inputEl?.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \"?.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ref\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{inputEl}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \" />\"]\n          })\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예시에서는 input에 입력하는 모든 내용을 input 참조를 통해 읽을 수 있습니다. 이 접근법은 각 키 입력마다 불필요한 재렌더링을 피할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"2. Reselect 라이브러리를 사용하여 메모이제이션 셀렉터 만들기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"리액트 컴포넌트는 빠른 수명주기를 갖고 있지만, 너무 많은 다시 렌더링으로 늘 피해를 입는 경우가 많습니다. 이를 해결하기 위해 개발자들은 성능을 개선하기 위해 Redux와 함께 사용되는 인기 라이브러리 Reselect의 래퍼인 서드파티 성능 라이브러리 re-select를 만들었습니다. 이 라이브러리는 메모이제이션 셀렉터를 코딩하여 성능을 향상시킵니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"셀렉터는 파생 데이터를 계산할 수 있어 Redux가 가능한 한 적은 상태를 저장할 수 있게 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"셀렉터는 효율적입니다. 셀렉터는 인수 중 하나가 변경될 때까지 재계산되지 않습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"셀렉터는 조합 가능합니다. 다른 셀렉터의 입력으로 사용될 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { createSelector } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'reselect'\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"selectShopItems\"\n        }), \" = state => state.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"shop\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"items\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"selectTaxPercent\"\n        }), \" = state => state.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"shop\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"taxPercent\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" selectSubtotal = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createSelector\"\n        }), \"(selectShopItems, \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"items\"\n          }), \" =>\"]\n        }), \"\\n  items.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"reduce\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"subtotal, item\"\n          }), \") =>\"]\n        }), \" subtotal + item.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \")\\n)\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" selectTax = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createSelector\"\n        }), \"(\\n  selectSubtotal,\\n  selectTaxPercent,\\n  \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"subtotal, taxPercent\"\n          }), \") =>\"]\n        }), \" subtotal * (taxPercent / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \")\\n)\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" selectTotal = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createSelector\"\n        }), \"(\\n  selectSubtotal,\\n  selectTax,\\n  \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"subtotal, tax\"\n          }), \") =>\"]\n        }), \" ({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"total\"\n        }), \": subtotal + tax })\\n)\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" exampleState = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"shop\"\n        }), \": {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"taxPercent\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"items\"\n        }), \": [\\n      { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'apple'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"value\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.2\"\n        }), \" },\\n      { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'orange'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"value\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.95\"\n        }), \" }\\n    ]\\n  }\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"selectSubtotal\"\n        }), \"(exampleState)) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 2.15\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"selectTax\"\n        }), \"(exampleState)) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 0.172\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"selectTotal\"\n        }), \"(exampleState)) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// { total: 2.322 }\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 createSelector는 2개의 선택기를 입력으로 받아 메모이즈된 버전을 반환합니다. 값이 다를 때까지 이 메모이즈된 버전을 사용하여 선택기는 다시 계산되지 않을 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Reselect는 Redux에만 한정되지 않으나, 공식 Redux Toolkit 패키지에 이미 기본으로 포함되어 있습니다. 추가 설치가 필요하지 않습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"3. SWR 사용하기 - 데이터 패치용 리액트 훅스 라이브러리```\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SWR은 데이터 가져오기를 위한 React Hooks 라이브러리입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"SWR\\\"이라는 이름은 stale-while-revalidate의 약자입니다. SWR은 먼저 캐시에서 데이터를 반환한 후(request), 데이터를 업데이트하고(get), 최신 데이터를 다시 가져옵니다. 이를 통해 컴포넌트가 여러 번 다시 렌더링 되는 것을 방지할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"한 가지 훅으로 프로젝트에서 데이터 가져오기 로직을 크게 간소화할 수 있습니다. 뿐만 아니라 속도, 정확성, 안정성 면에서 모두 다루어져 더 나은 애플리케이션을 구축하는 데 도움이 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Profile\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { data, error } = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useSWR\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/api/user'\"\n        }), \", fetcher)\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (error) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"로드에 실패했습니다\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!data) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"로딩 중...\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"안녕하세요 {data.name}님!\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"더 많은 정보와 예제는 여기를 참조하세요: \", _jsx(_components.a, {\n        href: \"https://swr.vercel.app/\",\n        children: \"https://swr.vercel.app/\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. useMemo() 및 useCallback()Hooks를 사용한 Memoization\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Memoization은 우리의 리액트 코드를 프롭스에 업데이트가 있을 때에만 컴포넌트를 다시 렌더링하도록 하는 것을 가능하게 합니다. 이 접근 방식을 통해 개발자는 불필요한 다시 렌더링을 피하고 응용 프로그램에서의 계산 부하를 줄일 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"리액트는 메모이제이션을 만들기 위해 두 가지 훅을 제공합니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"useMemo()\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"useCallback()\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 훅들은 계산 없이 입력이 동일한 경우 캐싱되어 동일한 결과를 반환하여 다시 렌더링을 줄입니다. 입력이 업데이트되면 캐시가 무효화되고 새로운 컴포넌트 상태가 렌더링됩니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"useMemo()\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 훅은 함수 호출과 렌더 사이에서 계산 결과를 메모이징하는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expensiveFunction\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"inputValue\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" expensiveValue = inputValue * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"42\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//... 입력값을 포함한 계산 작업이 많은 경우...\"\n        }), \"\\n  expensiveValue = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'World'\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" expensiveValue;\\n};\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"MyComponent\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ something }\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [inputValue, setInputValue] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \");  \\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" expensiveValue = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useMemo\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expensiveFunction\"\n        }), \"(inputValue), \\n    [ inputValue ]\\n  );  \\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"Hello {expensiveValue}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \";\\n};\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"useCallback()\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것은 메모이제이션을 구현하는 또 다른 React Hook입니다. 그러나 useMemo()와 달리 결과를 캐시하지 않고 대신 제공된 콜백 함수를 메모이즈합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"item\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" onClick = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useCallback\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"event\"\n          }), \" =>\"]\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Clicked Item : '\"\n        }), \", event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"currentTarget\"\n        }), \");\\n  }, [item]);\\n  \\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    <li={item} onClick={onClick} />\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시에서 useCallback()은 onClick 콜백을 메모이즈합니다. 따라서 사용자가 동일한 항목을 계속 클릭해도 컴포넌트를 다시 렌더링하지 않습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기사가 리액트 컴포넌트에서 재랜더링 문제를 해결하는 데 도움이 되기를 바랍니다. 만약 리액트에서 재랜더링을 피하는 다른 방법이나 기술이 있다면 댓글에 추가해 주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"당신의 지원을 보여주기 위해 아래의 👏 버튼을 최대한 많이 눌러주세요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"독자 여러분, 감사합니다. 화이팅!!!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"당신은 멋져요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}