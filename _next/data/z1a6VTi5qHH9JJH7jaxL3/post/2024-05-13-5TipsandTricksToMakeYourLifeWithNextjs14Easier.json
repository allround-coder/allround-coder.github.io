{"pageProps":{"post":{"title":"5가지 팁과 트릭으로 Nextjs 14와 함께 더 쉽게 살아가는 방법","description":"","date":"2024-05-13 00:27","slug":"2024-05-13-5TipsandTricksToMakeYourLifeWithNextjs14Easier","content":"\n\n![이미지](/assets/img/2024-05-13-5TipsandTricksToMakeYourLifeWithNextjs14Easier_0.png)\n\nNext.js 14은 서버 렌더링된 React 애플리케이션을 구축하는 프로세스를 간단화하는 강력한 React 프레임워크입니다. 그러나 고급 기능과 규칙 때문에 특히 이 프레임워크에 처음 접하는 개발자들에게 혼란과 모호함이 있을 수 있습니다. 이 블로그 포스트에서는 Next.js 14를 사용하여 일상을 더 편리하게 만드는 다섯 가지 팁과 요령을 살펴보겠습니다.\n\n## 팁 1: Next.js 이미지 작업\n\nNext.js에서 이미지 처리는 혼란스러운 부분입니다. 로컬 이미지 또는 원격 이미지와 작업하는 방법은 다르기 때문입니다.\n\n\n\n# 로컬 이미지\n\n로컬 이미지를 사용할 때는 너비와 높이를 지정할 필요가 없어요. Next.js가 자동으로 이미지 크기를 확인합니다. 이미지를 가져와 `next/image` 컴포넌트를 사용해 렌더링하세요.\n\n```js\nimport Image from \"next/image\";\nimport localImage from \"public/hoy.png\";\nexport default function MyComponent() {\n  return <Image src={localImage} alt=\"로컬 이미지\" />;\n}\n```\n\n\n\n# 원격 이미지\n\n![Remote Image](/assets/img/2024-05-13-5TipsandTricksToMakeYourLifeWithNextjs14Easier_2.png)\n\n원격 이미지를 사용할 때는 레이아웃 변동을 방지하기 위해 블러 플레이스홀더를 제공하고 너비와 높이를 지정해야 합니다. `placeholder=\"blur\"` 속성을 사용하여 이미지의 완전한 버전이 로드될 때까지 이미지의 흐린 버전을 표시할 수 있습니다.\n\n원격 이미지의 블러 데이터 URL을 생성하려면 `sharp` 및 `placeholder` 패키지를 사용할 수 있습니다:\n\n\n\n```js\nimport Image from \"next/image\";\nimport getBase64 from \"./utils/getBase64\";\nexport default async function MyComponent() {\n  const blurDataUrl = await getBase64(remoteImageUrl);\n  return (\n    <Image\n      src={remoteImageUrl}\n      width={600}\n      height={600}\n      alt=\"Remote Image\"\n      placeholder=\"blur\"\n      blurDataURL={blurDataUrl}\n    />\n  );\n}\n```\n\n`getBase64` 유틸리티 함수는 원격 이미지를 가져와 ArrayBuffer로 변환한 다음 `placeholder` 패키지를 사용하여 해당 이미지의 base64 표현을 생성합니다.\n\n# 팁 2: 환경 변수 처리\n\n환경 변수를 `next.config.env.NEXT_PUBLIC_*`로 표시할 때 주의하십시오. 이러한 변수는 브라우저에서 노출되며 JavaScript 번들에 포함됩니다. 민감한 API 키나 비밀 정보가 있는 경우 `NEXT_PUBLIC_`로 접두사를 붙이지 않도록 주의하십시오. Node.js 환경에서만 사용할 수 있게 됩니다.```\n\n\n\n# 팁 3: Next.js에서 캐싱 이해하기\n\n![이미지](/assets/img/2024-05-13-5TipsandTricksToMakeYourLifeWithNextjs14Easier_3.png)\n\nNext.js의 캐싱 동작은 개발 환경과 프로덕션 환경에서 다릅니다. 개발 모드에서는 기본적으로 페이지가 동적으로 매 요청마다 렌더링됩니다. 그러나 프로덕션 모드에서는 Next.js가 페이지를 정적으로 렌더링하려고 시도합니다.\n\n프로덕션에서 캐싱을 제어하려면 `revalidate` 옵션을 사용하거나 페이지를 명시적으로 `dynamic`으로 표시할 수 있습니다.\n\n\n\n```js\n// 매 5초마다 다시 유효성 검사\nexport const revalidate = 5\n// 동적 렌더링 강제\nexport const dynamic = 'force-dynamic'\n```\n\n# 팁 4: 서버 컴포넌트에서 데이터 가져오기\n\n서버 컴포넌트의 데이터를 가져오기 위해 API 라우트 핸들러를 사용하는 것을 피하십시오. 대신 서버 컴포넌트 내에서 데이터를 직접 가져오세요. 이 방법을 통해 Next.js가 여러 서버 컴포넌트 사이에서 데이터의 캐싱 및 재사용을 최적화할 수 있습니다.\n\n만약 여러 컴포넌트 사이에서 동일한 데이터 가져오기 로직을 재사용해야 한다면, `server/` 디렉토리에 서버 액션을 생성하는 것을 고려해보세요.\n\n\n\n```js\nexport async function getJoke() {\n  const res = await fetch(\"https://api.example.com/joke\");\n  const data = await res.json();\n  if (res.ok) {\n    return { success: true, joke: data.joke };\n  } else {\n    return { error: data.error };\n  }\n}\n// app/page.jsx\nimport { getJoke } from \"../server/actions\";\nexport default async function Page() {\n  const { success, joke, error } = await getJoke();\n  if (success) {\n    return <div>{joke}</div>;\n  } else {\n    throw new Error(error);\n  }\n}\n```\n\n# Tip 5: 클라이언트 및 서버 구성 요소 이해하기\n\n기본적으로 Next.js의 페이지는 서버 구성 요소입니다. 서버 구성 요소 내에서 클라이언트 구성 요소를 렌더링하여 상호작용성을 추가할 수 있습니다.\n\n```js\n\"use client\";\nimport { useState } from \"react\";\nexport default function ClientComponent() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n```\n\n\n\n클라이언트 컴포넌트 내에 렌더링된 자식 컴포넌트는 '사용 클라이언트' 지시문이 필요 없이 자동으로 클라이언트 컴포넌트가 됩니다.\n\n프로바이더(예: 테마 제공자)를 사용할 때는 레이아웃에서 프로바이더로 자식 컴포넌트를 감싸면 자식 컴포넌트는 여전히 서버 컴포넌트로 렌더링됩니다.\n\n```js\n// app/layout.jsx\nimport { ThemeProvider } from \"your-theme-library\";\nexport default function RootLayout({ children }) {\n  return <ThemeProvider>{children}</ThemeProvider>;\n}\n```\n\n# 결론\n\n\n\nNext.js 14은 서버 렌더링된 React 애플리케이션의 개발을 최적화하는 강력하고 기능이 풍부한 프레임워크입니다. 새로운 개념과 규칙이 소개되었지만, 이 블로그 포스트에서 안내된 꿀팁과 요령을 따르면 혼동과 모호함이 발생할 수 있는 부분을 잘 헤쳐나갈 수 있을 거예요.\n\n이미지 사용 방법, 환경 변수 처리, 캐싱 관리, 서버 컴포넌트에서 데이터 가져오기, 그리고 클라이언트 및 서버 컴포넌트 간의 차이 등을 이해하면 Next.js 14로 튼튼하고 효율적인 애플리케이션을 개발하는 데 능숙해질 거예요.\n\n기술을 마스터하는 데 있어서 연습과 경험은 중요합니다. Next.js 문서를 탐험하고 커뮤니티 포럼에 참여하며 프레임워크의 기능을 실험해보면 보다 깊이 있는 이해를 다질 수 있을 거예요.","ogImage":{"url":"/assets/img/2024-05-13-5TipsandTricksToMakeYourLifeWithNextjs14Easier_0.png"},"coverImage":"/assets/img/2024-05-13-5TipsandTricksToMakeYourLifeWithNextjs14Easier_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    h1: \"h1\",\n    code: \"code\",\n    pre: \"pre\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-13-5TipsandTricksToMakeYourLifeWithNextjs14Easier_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next.js 14은 서버 렌더링된 React 애플리케이션을 구축하는 프로세스를 간단화하는 강력한 React 프레임워크입니다. 그러나 고급 기능과 규칙 때문에 특히 이 프레임워크에 처음 접하는 개발자들에게 혼란과 모호함이 있을 수 있습니다. 이 블로그 포스트에서는 Next.js 14를 사용하여 일상을 더 편리하게 만드는 다섯 가지 팁과 요령을 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"팁 1: Next.js 이미지 작업\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next.js에서 이미지 처리는 혼란스러운 부분입니다. 로컬 이미지 또는 원격 이미지와 작업하는 방법은 다르기 때문입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"로컬 이미지\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"로컬 이미지를 사용할 때는 너비와 높이를 지정할 필요가 없어요. Next.js가 자동으로 이미지 크기를 확인합니다. 이미지를 가져와 \", _jsx(_components.code, {\n        children: \"next/image\"\n      }), \" 컴포넌트를 사용해 렌더링하세요.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"next/image\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" localImage \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"public/hoy.png\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"MyComponent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Image\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"src\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{localImage}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"alt\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"로컬 이미지\\\"\"\n            }), \" />\"]\n          })\n        }), \";\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"원격 이미지\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-13-5TipsandTricksToMakeYourLifeWithNextjs14Easier_2.png\",\n        alt: \"Remote Image\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"원격 이미지를 사용할 때는 레이아웃 변동을 방지하기 위해 블러 플레이스홀더를 제공하고 너비와 높이를 지정해야 합니다. \", _jsx(_components.code, {\n        children: \"placeholder=\\\"blur\\\"\"\n      }), \" 속성을 사용하여 이미지의 완전한 버전이 로드될 때까지 이미지의 흐린 버전을 표시할 수 있습니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"원격 이미지의 블러 데이터 URL을 생성하려면 \", _jsx(_components.code, {\n        children: \"sharp\"\n      }), \" 및 \", _jsx(_components.code, {\n        children: \"placeholder\"\n      }), \" 패키지를 사용할 수 있습니다:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"next/image\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" getBase64 \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./utils/getBase64\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"MyComponent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" blurDataUrl = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getBase64\"\n        }), \"(remoteImageUrl);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Image\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"src\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{remoteImageUrl}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"width\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{600}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"height\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{600}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"alt\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Remote Image\\\"\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"placeholder\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"blur\\\"\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"blurDataURL\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{blurDataUrl}\"\n            }), \"\\n    />\"]\n          })\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"getBase64\"\n      }), \" 유틸리티 함수는 원격 이미지를 가져와 ArrayBuffer로 변환한 다음 \", _jsx(_components.code, {\n        children: \"placeholder\"\n      }), \" 패키지를 사용하여 해당 이미지의 base64 표현을 생성합니다.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"팁 2: 환경 변수 처리\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"환경 변수를 \", _jsx(_components.code, {\n        children: \"next.config.env.NEXT_PUBLIC_*\"\n      }), \"로 표시할 때 주의하십시오. 이러한 변수는 브라우저에서 노출되며 JavaScript 번들에 포함됩니다. 민감한 API 키나 비밀 정보가 있는 경우 \", _jsx(_components.code, {\n        children: \"NEXT_PUBLIC_\"\n      }), \"로 접두사를 붙이지 않도록 주의하십시오. Node.js 환경에서만 사용할 수 있게 됩니다.```\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"팁 3: Next.js에서 캐싱 이해하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-13-5TipsandTricksToMakeYourLifeWithNextjs14Easier_3.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next.js의 캐싱 동작은 개발 환경과 프로덕션 환경에서 다릅니다. 개발 모드에서는 기본적으로 페이지가 동적으로 매 요청마다 렌더링됩니다. 그러나 프로덕션 모드에서는 Next.js가 페이지를 정적으로 렌더링하려고 시도합니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"프로덕션에서 캐싱을 제어하려면 \", _jsx(_components.code, {\n        children: \"revalidate\"\n      }), \" 옵션을 사용하거나 페이지를 명시적으로 \", _jsx(_components.code, {\n        children: \"dynamic\"\n      }), \"으로 표시할 수 있습니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 매 5초마다 다시 유효성 검사\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" revalidate = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 동적 렌더링 강제\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" dynamic = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'force-dynamic'\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"팁 4: 서버 컴포넌트에서 데이터 가져오기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"서버 컴포넌트의 데이터를 가져오기 위해 API 라우트 핸들러를 사용하는 것을 피하십시오. 대신 서버 컴포넌트 내에서 데이터를 직접 가져오세요. 이 방법을 통해 Next.js가 여러 서버 컴포넌트 사이에서 데이터의 캐싱 및 재사용을 최적화할 수 있습니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"만약 여러 컴포넌트 사이에서 동일한 데이터 가져오기 로직을 재사용해야 한다면, \", _jsx(_components.code, {\n        children: \"server/\"\n      }), \" 디렉토리에 서버 액션을 생성하는 것을 고려해보세요.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getJoke\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" res = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetch\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"https://api.example.com/joke\\\"\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" data = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"json\"\n        }), \"();\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (res.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"ok\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"success\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"joke\"\n        }), \": data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"joke\"\n        }), \" };\\n  } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"error\"\n        }), \": data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"error\"\n        }), \" };\\n  }\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// app/page.jsx\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { getJoke } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../server/actions\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Page\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { success, joke, error } = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getJoke\"\n        }), \"();\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (success) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"{joke}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \";\\n  } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"throw\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Error\"\n        }), \"(error);\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Tip 5: 클라이언트 및 서버 구성 요소 이해하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기본적으로 Next.js의 페이지는 서버 구성 요소입니다. 서버 구성 요소 내에서 클라이언트 구성 요소를 렌더링하여 상호작용성을 추가할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"use client\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ClientComponent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [count, setCount] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"Count: {count}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" setCount(count + 1)}>Increment\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클라이언트 컴포넌트 내에 렌더링된 자식 컴포넌트는 '사용 클라이언트' 지시문이 필요 없이 자동으로 클라이언트 컴포넌트가 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"프로바이더(예: 테마 제공자)를 사용할 때는 레이아웃에서 프로바이더로 자식 컴포넌트를 감싸면 자식 컴포넌트는 여전히 서버 컴포넌트로 렌더링됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// app/layout.jsx\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThemeProvider\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"your-theme-library\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"RootLayout\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ children }\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ThemeProvider\"\n            }), \">\"]\n          }), \"{children}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ThemeProvider\"\n            }), \">\"]\n          })]\n        }), \";\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next.js 14은 서버 렌더링된 React 애플리케이션의 개발을 최적화하는 강력하고 기능이 풍부한 프레임워크입니다. 새로운 개념과 규칙이 소개되었지만, 이 블로그 포스트에서 안내된 꿀팁과 요령을 따르면 혼동과 모호함이 발생할 수 있는 부분을 잘 헤쳐나갈 수 있을 거예요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이미지 사용 방법, 환경 변수 처리, 캐싱 관리, 서버 컴포넌트에서 데이터 가져오기, 그리고 클라이언트 및 서버 컴포넌트 간의 차이 등을 이해하면 Next.js 14로 튼튼하고 효율적인 애플리케이션을 개발하는 데 능숙해질 거예요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기술을 마스터하는 데 있어서 연습과 경험은 중요합니다. Next.js 문서를 탐험하고 커뮤니티 포럼에 참여하며 프레임워크의 기능을 실험해보면 보다 깊이 있는 이해를 다질 수 있을 거예요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}