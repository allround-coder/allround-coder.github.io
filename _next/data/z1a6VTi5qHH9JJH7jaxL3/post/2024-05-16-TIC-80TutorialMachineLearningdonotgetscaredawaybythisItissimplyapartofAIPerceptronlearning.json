{"pageProps":{"post":{"title":"TIC-80 튜토리얼 머신 러닝걱정하지 마세요 이것은 AI의 일부일 뿐입니다  퍼셉트론 학습","description":"","date":"2024-05-16 16:52","slug":"2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning","content":"\n\n\n![공포를 느끼지 마세요. 그냥 AI의 일부입니다.](/assets/img/2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning_0.png)\n\n[페이지에 시각적인 풍미를 위해 만든 예쁜 3D 모델]\n\n신경망의 경우, 퍼셉트론 학습은 소개 알고리즘 중 가장 간단한 것 중 하나입니다.\n\n이것은 간단한 이진 분류에 사용됩니다. 이는 물건을 그룹화하는 데 사용될 수 있다는 것을 의미합니다.\n\n\n<div class=\"content-ad\"></div>\n\n게임을 개발하면서 여러 아이디어가 떠오를 수 있습니다. 이것은 무작위로 생성된 레벨을 더 멋지게 디자인하거나 플레이어의 입력에 따라 난이도를 조절하거나 더 나은 적을 제공하는 방법일 수 있어요.\n\n--- --- --- --- --- --- --- --- --- --- --- --- ---\n\n![나만의 랜덤 애니메이션](https://miro.medium.com/v2/resize:fit:200/1*J6hWD17Q6PPkhnd0E5rkgw.gif)\n\n<div class=\"content-ad\"></div>\n\n간단히 말해서, 퍼셉트론은 입력을 받아 처리한 후 출력을 내놓습니다.\n\n- 퍼셉트론 학습은 입력을 받는 간단한 신경망입니다.\n\n2. 일정한 가중치가 있습니다 (랜덤으로 생성됩니다. 가중치가 동일하지 않도록 하기 위한 것이며, 학습이 이루어질 수 있도록 항상 모두 마스터할 필요는 없습니다).\n\n3. 그런 다음 가중합을 얻습니다 (이는 단순히 가중치*입력과 가중치*입력의 합을 의미합니다).\n\n<div class=\"content-ad\"></div>\n\n그리고 마지막으로 출력을 결정하는 활성화 함수를 포함합니다.\n\n다음은 코드입니다:\n\n```js\nrnd = math.random\n-- 가중치 초기화\nlocal weight1 = rnd(1) - 0.5\nlocal weight2 = rnd(1) - 0.5\n\n-- 활성화 함수 (계단 함수)\nfunction activate(sum)\n    if sum > 0 then\n        return 1\n    else\n        return 0\n    end\nend\n\n-- 메인 루프\nfunction TIC()\n\ncls()\n    -- 입력 값 샘플 (이 값을 변경할 수 있음)\n    local input1 = 1\n    local input2 = 0\n    \n    -- 가중합 계산\n    local weightedSum = input1 * weight1 + input2 * weight2\n    \n    -- 퍼셉트론 활성화\n    local output = activate(weightedSum)\n    \n    -- 출력 표시\n    print(\"Output: \" .. output, 20, 20, 15)\nend\n```\n\n이 활성화 함수는 신경망 세계에서 꽤 한정적인 단계 활성화 활성화 함수이지만, 창의적으로 사용하면 멋진 것들을 만들 수 있다고 생각합니다.","ogImage":{"url":"/assets/img/2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning_0.png"},"coverImage":"/assets/img/2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    hr: \"hr\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    em: \"em\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning_0.png\",\n        alt: \"공포를 느끼지 마세요. 그냥 AI의 일부입니다.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"[페이지에 시각적인 풍미를 위해 만든 예쁜 3D 모델]\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"신경망의 경우, 퍼셉트론 학습은 소개 알고리즘 중 가장 간단한 것 중 하나입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것은 간단한 이진 분류에 사용됩니다. 이는 물건을 그룹화하는 데 사용될 수 있다는 것을 의미합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"게임을 개발하면서 여러 아이디어가 떠오를 수 있습니다. 이것은 무작위로 생성된 레벨을 더 멋지게 디자인하거나 플레이어의 입력에 따라 난이도를 조절하거나 더 나은 적을 제공하는 방법일 수 있어요.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:200/1*J6hWD17Q6PPkhnd0E5rkgw.gif\",\n        alt: \"나만의 랜덤 애니메이션\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"간단히 말해서, 퍼셉트론은 입력을 받아 처리한 후 출력을 내놓습니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"퍼셉트론 학습은 입력을 받는 간단한 신경망입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"일정한 가중치가 있습니다 (랜덤으로 생성됩니다. 가중치가 동일하지 않도록 하기 위한 것이며, 학습이 이루어질 수 있도록 항상 모두 마스터할 필요는 없습니다).\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"그런 다음 가중합을 얻습니다 (이는 단순히 가중치\", _jsx(_components.em, {\n            children: \"입력과 가중치\"\n          }), \"입력의 합을 의미합니다).\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 마지막으로 출력을 결정하는 활성화 함수를 포함합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 코드입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"rnd = math.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"random\"\n        }), \"\\n-- 가중치 초기화\\nlocal weight1 = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rnd\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.5\"\n        }), \"\\nlocal weight2 = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rnd\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.5\"\n        }), \"\\n\\n-- 활성화 함수 (계단 함수)\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"activate\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"sum\"\n        }), \")\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" sum > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \" then\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"\\n    end\\nend\\n\\n-- 메인 루프\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"TIC\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \")\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"cls\"\n        }), \"()\\n    -- 입력 값 샘플 (이 값을 변경할 수 있음)\\n    local input1 = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\n    local input2 = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"\\n    \\n    -- 가중합 계산\\n    local weightedSum = input1 * weight1 + input2 * weight2\\n    \\n    -- 퍼셉트론 활성화\\n    local output = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"activate\"\n        }), \"(weightedSum)\\n    \\n    -- 출력 표시\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Output: \\\"\"\n        }), \" .. output, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"15\"\n        }), \")\\nend\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 활성화 함수는 신경망 세계에서 꽤 한정적인 단계 활성화 활성화 함수이지만, 창의적으로 사용하면 멋진 것들을 만들 수 있다고 생각합니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}