{"pageProps":{"post":{"title":"빠른 BDD UI 테스트 프레임워크 with Playwright","description":"","date":"2024-05-15 10:41","slug":"2024-05-15-QuickBDDUITestFrameworkwithPlaywright","content":"\n\n<img src=\"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_0.png\" />\n\n```javascript\n// Playwright에서 Type Script와 Cucumber로 UI 테스트 프레임워크를 시작하는 빠른 가이드입니다.\n\n// 주의 사항:-\n// 이것은 테스트 자동화를 시작하기 위해 의도적으로 매우 기본적인 프레임워크 설정입니다.\n// 요구 사항에 맞게 향상시킬 수 있습니다.\n```\n\n# 필요한 것\n\n- Node 및 NPM 설치가 되어 있어야 합니다.\n- Visual Studio Code\n- Cucumber 익스텐션\n\n\n\n# 프로젝트 설정하기\n\n명령줄로 이동하여 다음을 실행하세요 (프로젝트 설정 및 종속성 설치):\n\n```js\n> mkdir playwright-bdd-project\n> cd playwright-bdd-project\n> npm init // 모든 기본 값 선택, 이렇게 하면 새 노드 프로젝트가 초기화되고 package.json이 생성됩니다\n> npm i @cucumber/cucumber -D // cucumber // -D 플래그는 이 설치를 package.json의 개발용 종속성으로 추가합니다\n> npm i @playwright/test -D // Playwright\n> npm i @types/node -D // Node용 Type Script\n> npm i ts-node -D // Node 실행 환경에서 Type Script 파일을 실행하기 위함\n> code . // 이 새롭게 설정한 프로젝트를 Visual Studio Code로 엽니다\n```\n\n<img src=\"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_1.png\" />\n\n\n\n# 프로젝트 구조\n\n다음과 같이 프로젝트에서 디렉터리 구조를 설정해주세요:\n\n```js\nroot \\ src \\ test \\ features // 여기에는 피쳐 파일이 위치합니다\nroot \\src \\ test \\steps // 여기에는 스텝 정의 파일이 위치합니다\nroot \\ reports // 여기에는 테스트 보고서가 생성됩니다\nroot \\ src \\ test \\ utils // 여기에는 유틸리티 코드를 유지합니다\n```\n\n![예시 이미지](/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_2.png)\n\n\n\n# 이 프레임워크의 핵심 — cucumber.json\n\n프로젝트 루트에 cucumber.json 파일을 생성하세요.\n\n루트 `cucumber.json\n\n```js\n{\n    \"default\": {\n        \"paths\": [\n            \"src/test/features/*.feature\" // 피처 파일의 위치\n        ],\n        \"dryRun\": false,\n        \"formatOptions\": {\n            \"snippetInterface\": \"async-await\" // async-await 형식으로 스텝 정의를 자동 생성하기 위함\n        },\n        \"require\": [\n            \"src/test/steps/*.ts\" // 피처 파일의 위치\n        ],\n        \"requireModule\": [\n            \"ts-node/register\" // 타입스크립트 파일에서 import를 사용할 수 있도록, node 실행 환경에서 이를 인식할 수 있게 함\n        ],\n        \"format\": [\n            [\"html\", \"reports/cucumber-report.html\"] // 테스트 실행 보고서가 여기에 생성됩니다\n        ]\n    }\n}\n```\n\n\n\n# Cucumber Extension 설정.json 파일에 Feature 파일 및 Step Definitions 경로 업데이트\n\n이를 통해 Cucumber 확장 프로그램이 Feature 및 해당하는 Step Definitions 파일을 매핑하는 데 도움이 됩니다.\n\n```json\n// 참고:-\n// 아래에 표시된 것과 다를 수 있는 경우가 있습니다.\n\n{\n    \"workbench.colorTheme\": \"Quiet Light\",\n    \"files.autoSave\": \"afterDelay\",\n    \"workbench.iconTheme\": \"vscode-icons\",\n    \"playwright.reuseBrowser\": false,\n    \"playwright.showTrace\": false,\n    \"cucumber.features\": [\n        \"src/test/features/*.feature\" // Feature 파일의 위치\n    ],\n    \"cucumber.glue\": [\n        \"src/test/steps/*.ts\" // Step Definition 파일의 위치\n    ],\n    \"aws.telemetry\": false,\n    \"amazonQ.telemetry\": false,\n    \"explorer.confirmDelete\": false,\n    \"javascript.updateImportsOnFileMove.enabled\": \"always\"\n}\n```\n\n# Feature 파일\n\n\n\n\"root \\ src \\ test \\ features \\ search.feature\" 경로에 다음 기능 파일을 추가해 주세요.\n\n```js\nFeature: Basic search using google engine\n\n  Scenario: Search for a term\n    Given I am on the google search page\n    When I search for \"cucumber\"\n    Then the search results page should contain \"cucumber\"\n```\n\n# 단계 정의\n\n\"root \\ src \\ test \\ steps \\ search.ts\" 경로에 다음 단계 정의 파일을 추가해 주세요.\n\n\n\n\n```js\nimport { Given, When, Then } from '@cucumber/cucumber';\nimport { expect } from '@playwright/test';\nimport { page } from './hooks';\n\nGiven('I am on the google search page', async function () {\n    console.log('I am on the google search page');\n});\n\nWhen('I search for {string}', async function (string) {\n    console.log('I search for ' + string);\n    await page.getByLabel('Search', { exact: true }).click();\n    await page.getByLabel('Search', { exact: true }).fill(string);\n    await page.getByLabel('Google Search').first().click();\n\n});\n\nThen('the search results page should contain {string}', async function (string) {\n    console.log('the search results page should contain ' + string);\n    await page.getByRole('link', { name: 'Cucumber: BDD Testing &' }).click();\n    expect(page.url()).toContain('cucumber.io');\n});\n``` \n\n## Hooks\n\nAdd the following hooks file under: root \\ src \\ test \\ steps \\ hooks.ts\n\n```js\nimport { Before, After, AfterStep, BeforeStep, World } from \"@cucumber/cucumber\";\nimport { chromium, Page, Browser } from '@playwright/test';\nimport { addCommentToReport, addScreenshotToReport } from \"../utils/reporting\";\n\nlet browser : Browser;\nlet page : Page;\n\nBefore(async function () { // SETUP (Runs Before Every Test Scenario) \n    console.log('Before hook');\n    browser = await chromium.launch({headless: false});\n    page = await browser.newPage();\n    await page.goto('https://www.google.com');\n});\n\nAfter(async function () { // TEARDOWN (Runs After Every Test Scenario)\n    console.log('After hook');\n    await browser.close();\n});\n\n// RUNS BEFORE EVERY STEP\n// We are taking screenshop before every step and adding it to the test report\nBeforeStep(async function({pickle, pickleStep, gherkinDocument, testCaseStartedId, testStepId}) {\n    await addScreenshotToReport.call(this);\n    await addCommentToReport.call(this, 'BeforeStep hook: ' + pickleStep.text);\n})\n\n// RUNS AFTER EVERY STEP\n// We are taking screenshop after every step and adding it to the test report\nAfterStep(async function({pickle, pickleStep, gherkinDocument, result, testCaseStartedId, testStepId}) {\n    await addScreenshotToReport.call(this);\n    await addCommentToReport.call(this, 'AfterStep hook: ' + pickleStep.text + ' - ' + result.status);\n})\n\nexport { browser, page };\n```   \n  \n\n\n\n# 유틸리티\n\n아래의 유틸리티 파일을 다음 경로에 추가하세요: root \\ src \\ test \\ utils\\ reporting.ts\n\n```js\nimport { World } from \"@cucumber/cucumber\";\nimport { page } from \"../steps/hooks\";\n\n// 테스트 리포트에 스크린샷을 추가하는 함수\nexport async function addScreenshotToReport(this: World) {\n    this.attach(await page.screenshot({ fullPage: true }), 'image/png');\n}\n\n// 테스트 리포트에 코멘트를 추가하는 함수\nexport async function addCommentToReport(this: World, comment: string) {\n    this.attach(comment, 'text/plain');\n}\n```\n\n# 최종 설정은 이렇게 될 것입니다:\n\n\n\n\n![이미지](/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_3.png)\n\n# 테스트 실행\n\npackage.json에서 test 필드 값을 \"cucumber-js test\"로 설정하세요.\n\n```js\n \"scripts\": {\n    \"test\": \"cucumber-js test\"\n  },\n```\n\n\n\n터미널을 열고 (CTRL + J) `npm test`를 실행해주세요.\n\n이 명령을 통해 테스트가 실행됩니다.\n\n![이미지](/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_4.png)\n\n# 실행 보고서 유효성 검사\n\n\n\n루트 / 보고서 / 로 이동하셔서\n\n여기에서 최신 테스트 실행 보고서를 찾으실 수 있습니다.\n\n![보고서 이미지](/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_5.png)","ogImage":{"url":"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_0.png"},"coverImage":"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_0.png","tag":["Tech"],"readingTime":7},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_0.png\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-javascript\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Playwright에서 Type Script와 Cucumber로 UI 테스트 프레임워크를 시작하는 빠른 가이드입니다.\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 주의 사항:-\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이것은 테스트 자동화를 시작하기 위해 의도적으로 매우 기본적인 프레임워크 설정입니다.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 요구 사항에 맞게 향상시킬 수 있습니다.\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"필요한 것\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Node 및 NPM 설치가 되어 있어야 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Visual Studio Code\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Cucumber 익스텐션\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"프로젝트 설정하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"명령줄로 이동하여 다음을 실행하세요 (프로젝트 설정 및 종속성 설치):\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"> mkdir playwright-bdd-project\\n> cd playwright-bdd-project\\n> npm init \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 모든 기본 값 선택, 이렇게 하면 새 노드 프로젝트가 초기화되고 package.json이 생성됩니다\"\n        }), \"\\n> npm i @cucumber/cucumber -D \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// cucumber // -D 플래그는 이 설치를 package.json의 개발용 종속성으로 추가합니다\"\n        }), \"\\n> npm i @playwright/test -D \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Playwright\"\n        }), \"\\n> npm i @types/node -D \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Node용 Type Script\"\n        }), \"\\n> npm i ts-node -D \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Node 실행 환경에서 Type Script 파일을 실행하기 위함\"\n        }), \"\\n> code . \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이 새롭게 설정한 프로젝트를 Visual Studio Code로 엽니다\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_1.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"프로젝트 구조\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음과 같이 프로젝트에서 디렉터리 구조를 설정해주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"root \\\\ src \\\\ test \\\\ features \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 여기에는 피쳐 파일이 위치합니다\"\n        }), \"\\nroot \\\\src \\\\ test \\\\steps \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 여기에는 스텝 정의 파일이 위치합니다\"\n        }), \"\\nroot \\\\ reports \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 여기에는 테스트 보고서가 생성됩니다\"\n        }), \"\\nroot \\\\ src \\\\ test \\\\ utils \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 여기에는 유틸리티 코드를 유지합니다\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_2.png\",\n        alt: \"예시 이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"이 프레임워크의 핵심 — cucumber.json\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"프로젝트 루트에 cucumber.json 파일을 생성하세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"루트 `cucumber.json\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"{\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"default\\\"\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"paths\\\"\"\n        }), \": [\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"src/test/features/*.feature\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 피처 파일의 위치\"\n        }), \"\\n        ],\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dryRun\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"formatOptions\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"snippetInterface\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"async-await\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// async-await 형식으로 스텝 정의를 자동 생성하기 위함\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"require\\\"\"\n        }), \": [\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"src/test/steps/*.ts\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 피처 파일의 위치\"\n        }), \"\\n        ],\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"requireModule\\\"\"\n        }), \": [\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ts-node/register\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 타입스크립트 파일에서 import를 사용할 수 있도록, node 실행 환경에서 이를 인식할 수 있게 함\"\n        }), \"\\n        ],\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"format\\\"\"\n        }), \": [\\n            [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"html\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"reports/cucumber-report.html\\\"\"\n        }), \"] \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 테스트 실행 보고서가 여기에 생성됩니다\"\n        }), \"\\n        ]\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Cucumber Extension 설정.json 파일에 Feature 파일 및 Step Definitions 경로 업데이트\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이를 통해 Cucumber 확장 프로그램이 Feature 및 해당하는 Step Definitions 파일을 매핑하는 데 도움이 됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-json\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 참고:-\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 아래에 표시된 것과 다를 수 있는 경우가 있습니다.\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"workbench.colorTheme\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Quiet Light\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"files.autoSave\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"afterDelay\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"workbench.iconTheme\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"vscode-icons\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"playwright.reuseBrowser\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"false\"\n          })\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"playwright.showTrace\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"false\"\n          })\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"cucumber.features\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"[\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"src/test/features/*.feature\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Feature 파일의 위치\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"cucumber.glue\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"[\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"src/test/steps/*.ts\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Step Definition 파일의 위치\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"aws.telemetry\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"false\"\n          })\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"amazonQ.telemetry\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"false\"\n          })\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"explorer.confirmDelete\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"false\"\n          })\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"javascript.updateImportsOnFileMove.enabled\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"always\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Feature 파일\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"root \\\\ src \\\\ test \\\\ features \\\\ search.feature\\\" 경로에 다음 기능 파일을 추가해 주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Feature\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Basic\"\n        }), \" search using google engine\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Scenario\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Search\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" a term\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Given\"\n        }), \" I am on the google search page\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"When\"\n        }), \" I search \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"cucumber\\\"\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Then\"\n        }), \" the search results page should contain \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"cucumber\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 정의\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"root \\\\ src \\\\ test \\\\ steps \\\\ search.ts\\\" 경로에 다음 단계 정의 파일을 추가해 주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Given\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"When\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Then\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@cucumber/cucumber'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { expect } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@playwright/test'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { page } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./hooks'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Given\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'I am on the google search page'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'I am on the google search page'\"\n        }), \");\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"When\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'I search for {string}'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"string\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'I search for '\"\n        }), \" + string);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" page.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getByLabel\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Search'\"\n        }), \", { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"exact\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" }).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"click\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" page.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getByLabel\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Search'\"\n        }), \", { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"exact\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" }).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fill\"\n        }), \"(string);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" page.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getByLabel\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Google Search'\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"first\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"click\"\n        }), \"();\\n\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Then\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'the search results page should contain {string}'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"string\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'the search results page should contain '\"\n        }), \" + string);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" page.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getByRole\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'link'\"\n        }), \", { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Cucumber: BDD Testing &'\"\n        }), \" }).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"click\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(page.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"url\"\n        }), \"()).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toContain\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'cucumber.io'\"\n        }), \");\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hooks\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Add the following hooks file under: root \\\\ src \\\\ test \\\\ steps \\\\ hooks.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Before\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"After\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AfterStep\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BeforeStep\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"World\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@cucumber/cucumber\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { chromium, \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Page\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Browser\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@playwright/test'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { addCommentToReport, addScreenshotToReport } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../utils/reporting\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" browser : \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Browser\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" page : \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Page\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Before\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") { \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// SETUP (Runs Before Every Test Scenario) \"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Before hook'\"\n        }), \");\\n    browser = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" chromium.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"launch\"\n        }), \"({\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"headless\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"});\\n    page = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" browser.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"newPage\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" page.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"goto\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'https://www.google.com'\"\n        }), \");\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"After\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") { \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// TEARDOWN (Runs After Every Test Scenario)\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'After hook'\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" browser.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"close\"\n        }), \"();\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// RUNS BEFORE EVERY STEP\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// We are taking screenshop before every step and adding it to the test report\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BeforeStep\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{pickle, pickleStep, gherkinDocument, testCaseStartedId, testStepId}\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" addScreenshotToReport.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"call\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" addCommentToReport.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"call\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'BeforeStep hook: '\"\n        }), \" + pickleStep.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"text\"\n        }), \");\\n})\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// RUNS AFTER EVERY STEP\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// We are taking screenshop after every step and adding it to the test report\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AfterStep\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{pickle, pickleStep, gherkinDocument, result, testCaseStartedId, testStepId}\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" addScreenshotToReport.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"call\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" addCommentToReport.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"call\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'AfterStep hook: '\"\n        }), \" + pickleStep.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"text\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"' - '\"\n        }), \" + result.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"status\"\n        }), \");\\n})\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" { browser, page };\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"유틸리티\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래의 유틸리티 파일을 다음 경로에 추가하세요: root \\\\ src \\\\ test \\\\ utils\\\\ reporting.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"World\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@cucumber/cucumber\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { page } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../steps/hooks\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 테스트 리포트에 스크린샷을 추가하는 함수\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addScreenshotToReport\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-params\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-variable language_\",\n            children: \"this\"\n          }), \": World\"]\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"attach\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" page.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"screenshot\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"fullPage\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" }), \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'image/png'\"\n        }), \");\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 테스트 리포트에 코멘트를 추가하는 함수\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addCommentToReport\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-params\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-variable language_\",\n            children: \"this\"\n          }), \": World, comment: string\"]\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"attach\"\n        }), \"(comment, \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'text/plain'\"\n        }), \");\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"최종 설정은 이렇게 될 것입니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_3.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"테스트 실행\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"package.json에서 test 필드 값을 \\\"cucumber-js test\\\"로 설정하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"scripts\\\"\"\n        }), \": {\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"test\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"cucumber-js test\\\"\"\n        }), \"\\n  },\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"터미널을 열고 (CTRL + J) \", _jsx(_components.code, {\n        children: \"npm test\"\n      }), \"를 실행해주세요.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 명령을 통해 테스트가 실행됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_4.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"실행 보고서 유효성 검사\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"루트 / 보고서 / 로 이동하셔서\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기에서 최신 테스트 실행 보고서를 찾으실 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_5.png\",\n        alt: \"보고서 이미지\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}