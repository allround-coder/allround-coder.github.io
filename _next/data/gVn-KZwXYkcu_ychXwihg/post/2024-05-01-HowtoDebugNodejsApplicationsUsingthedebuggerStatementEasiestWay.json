{"pageProps":{"post":{"title":"Node.js 애플리케이션을 디버깅하는 방법","description":"","date":"2024-05-01 17:44","slug":"2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay","content":"\n\n<img src=\"/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_0.png\" />\n\n이 튜토리얼에서는 Node.js 애플리케이션 코드를 디버깅하는 가장 쉽고 효율적인 방법을 배웁니다.\n\n그럼 시작해봅시다.\n\n이 튜토리얼의 비디오 버전을 보고 싶나요? 아래 비디오를 확인해보세요:\n\n<div class=\"content-ad\"></div>\n\n# 일반적으로 우리가 Node.js 애플리케이션을 디버깅하는 방법\n\n만약 우리가 어떤 Node.js 애플리케이션을 디버깅하고 싶다면, 보통 디버깅하려는 코드에 console.log 문을 추가하여 어떤 변수의 값을 찾아내려고 합니다.\n\n이 방법은 작동하지만 출력한 값을 보려면 계속 콘솔 로그를 확인해야 합니다.\n\n하지만 콘솔에 출력된 데이터가 중첩 객체를 포함하거나 많은 데이터인 경우 console.log를 사용하는 것은 실용적이지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n더 좋은 방법이 있어요.\n\n# 코드 디버깅을 위해 Debugger 추가하기\n\n대신에 우리는 디버그하고 싶은 코드에 debugger; 문을 추가할 수 있어요.\n\n아래 코드에서 보듯이 Express.js API 라우트를 가지고 사용자를 등록하는 경우를 가정해봅시다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// controllers/auth.js\n\nconst register = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const existingUser = await User.findOne({\n      email,\n    });\n    if (existingUser) {\n      return res.status(400).send('이미 등록된 사용자가 해당 이메일로 존재합니다');\n    }\n    // 추가 코드\n    return res.status(201).send();\n  } catch (error) {\n    console.log(error);\n    return res\n      .status(500)\n      .send('새 사용자 등록 중 오류가 발생했습니다. 나중에 다시 시도해주세요.');\n  }\n};\n\nmodule.exports = { register };\n\n// routes/auth.js\nconst { register } = require('../controllers/auth');\n\nconst Router = express.Router();\n\nRouter.post('/api/register', register);\n```\n\n그리고 사용자 등록시 문제가 발생하여 register 함수 코드를 디버그하려고 합니다.\n\n이 경우, 다음과 같이 register 함수 코드 내에 debugger; 문을 추가하면됩니다:\n\n```js\nconst register = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    debugger;\n    const existingUser = await User.findOne({\n      email,\n    });\n    if (existingUser) {\n      return res.status(400).send('이미 등록된 사용자가 해당 이메일로 존재합니다');\n    }\n    // 추가 코드\n    return res.status(201).send();\n  } catch (error) {\n    console.log(error);\n    return res\n      .status(500)\n      .send('새 사용자 등록 중 오류가 발생했습니다. 나중에 다시 시도해주세요.');\n  }\n};\n```\n\n<div class=\"content-ad\"></div>\n\n# 디버깅을 위한 애플리케이션 실행 방법\n\n일반적으로, Node.js 애플리케이션을 실행하려면 다음 명령을 실행합니다:\n\n```js\nnode index.js\n```\n\n하지만 대신에, 다음 명령을 실행할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n노드를 검사하려면 index.js를 입력하세요.\n```\n\n여기에서는 단순히 inspect 키워드를 추가했습니다.\n\n위 명령을 실행하면 다음과 같이 출력이 표시됩니다:\n\n<img src=\"/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_1.png\" />\n```\n\n<div class=\"content-ad\"></div>\n\n위의 출력에서 디버거가 연결된 것을 확인할 수 있어요, 이제 코드 디버깅을 시작할 수 있어요.\n\n크롬 브라우저를 열고 브라우저 URL에 chrome://inspect를 입력하세요.\n\n아래와 같은 출력이 나타날 거에요:\n\n![이미지](/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_2.png)\n\n<div class=\"content-ad\"></div>\n\n우리가 `node inspect index.js` 명령을 실행하여 inspecting을 시작했으니, 원격 대상 섹션 아래에 새로운 대상 항목이 표시된 것을 볼 수 있어요.\n\n그럼, 표시된 파란색 inspect 링크를 클릭하면 아래 이미지처럼 새로운 브라우저 개발 도구가 열릴 거에요:\n\n![이미지](/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_3.png)\n\n위 이미지의 오른쪽 패널에서 볼 수 있듯이, 디버거 일시 중지 메시지가 표시되고 디버깅 제어가 코드의 첫 줄에 있는 것을 확인할 수 있어요 (하이라이트된 노란색 줄로 확인 가능합니다).\n\n<div class=\"content-ad\"></div>\n\n하지만 코드의 첫 번째 줄부터 디버깅을 시작하려는 것은 원하지 않습니다. 대신, 등록 코드만 디버깅하려고 합니다. 아래 디버거 일시 중지 메시지 위에 표시된 파란 삼각형 아이콘을 클릭해주세요:\n\n![Debug icon](/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_4.png)\n\n지금이 창을 닫지 마세요. 대신에 Postman을 사용하여 응용 프로그램에서 사용자를 등록하거나 API 호출을 해보세요. 그렇게 하면 이전에 추가한 /register route 핸들러 코드가 실행될 것입니다.\n\n![API call](/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_5.png)\n\n<div class=\"content-ad\"></div>\n\n위에서 볼 수 있듯이 새 계정 만들기 버튼을 클릭하면 자동으로 debugger; 문이 추가된 코드로 리디렉션됩니다.\n\n이제 코드를 줄 단위로 디버깅하고 각 변수의 값을 볼 수 있으며 디버깅 중에 문제를 찾아 수정할 수 있습니다.\n\n# 디버깅 중 변수 액세스하기\n\n때로는 디버깅 중에 마우스를 가리키면 실제 값이 표시되는 변수가 너무 길어서 많은 속성을 가진 객체일 수 있습니다. 그래서 간단하게 마우스 오버로는 쉽게 볼 수 없을 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n그럼, 디버거가 계속 활성화된 채로 콘솔 탭을 열고 우리가 보고 싶은 변수의 이름을 입력할 수 있어요. 이 과정은 아래 GIF에서 확인할 수 있어요:\n\n![예시 이미지](/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_6.png)\n\n이렇게 우리는 Node.js 어플리케이션 코드를 쉽게 디버깅할 수 있어요.\n\n# 디버깅을 위한 스크립트 작성\n\n<div class=\"content-ad\"></div>\n\n터미널에서 매번 node inspect index.js 명령어를 수동으로 입력하기 싫다면, package.json 파일 안에 아래와 같이 새로운 디버그 스크립트를 생성할 수 있어요:\n\n```js\n\"scripts\": {\n    \"start\": \"node index.js\",\n    \"debug\": \"node inspect index.js\",\n    \"dev\": \"nodemon index.js\"\n},\n```\n\n그래서 이제 npm run debug 명령어를 실행하여 애플리케이션을 디버그 모드로 시작할 수 있어요.\n\n# 간단한 요약\n\n<div class=\"content-ad\"></div>\n\nNode.js 애플리케이션을 디버깅하려면 다음 단계를 따라야합니다:\n\n- 디버깅하려는 코드 내에 디버거 문을 추가합니다.\n- node inspect index.js 또는 node inspect server.js 명령을 실행하여 디버그 모드로 애플리케이션을 시작합니다.\n- Chrome 브라우저에서 URL chrome://inspect에 액세스합니다.\n- 원격 대상 섹션 아래의 inspect 링크를 클릭합니다.\n- index.js 또는 server.js 파일의 첫 줄부터 디버깅을 시작하고 싶지 않다면 파란 삼각형 아이콘을 클릭합니다.\n- debugger; 문이 추가된 곳에서 코드를 트리거하는 API 호출 또는 작업을 수행합니다.\n- 이렇게하면 코드를 줄 단위로 디버깅하여 문제를 찾을 수 있습니다.\n\n# 읽어 주셔서 감사합니다\n\n이 튜토리얼은 여기까지입니다. 새로운 것을 배우셨기를 바랍니다.\n\n<div class=\"content-ad\"></div>\n\n위 튜토리얼의 비디오 버전을 시청하고 싶으신가요? 이 비디오를 확인해보세요.\n\n만일 자바스크립트, ES6+, 리액트, 그리고 노드.js를 쉽게 이해할 수 있는 내용으로 습득하고 싶다면, 제 유튜브 채널을 확인해보세요. 구독하기를 잊지 마세요.\n\n정기적인 자바스크립트, 리액트, 그리고 노드.js 콘텐츠로 계속해서 최신 소식을 받고 싶다면, 링크드인에서 저를 팔로우하세요.\n\n![이미지](/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_7.png)","ogImage":{"url":"/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_0.png"},"coverImage":"/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_0.png","tag":["Tech"],"readingTime":6},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 튜토리얼에서는 Node.js 애플리케이션 코드를 디버깅하는 가장 쉽고 효율적인 방법을 배웁니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그럼 시작해봅시다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 튜토리얼의 비디오 버전을 보고 싶나요? 아래 비디오를 확인해보세요:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"일반적으로 우리가 Node.js 애플리케이션을 디버깅하는 방법\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 우리가 어떤 Node.js 애플리케이션을 디버깅하고 싶다면, 보통 디버깅하려는 코드에 console.log 문을 추가하여 어떤 변수의 값을 찾아내려고 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 방법은 작동하지만 출력한 값을 보려면 계속 콘솔 로그를 확인해야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 콘솔에 출력된 데이터가 중첩 객체를 포함하거나 많은 데이터인 경우 console.log를 사용하는 것은 실용적이지 않습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 좋은 방법이 있어요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"코드 디버깅을 위해 Debugger 추가하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"대신에 우리는 디버그하고 싶은 코드에 debugger; 문을 추가할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 코드에서 보듯이 Express.js API 라우트를 가지고 사용자를 등록하는 경우를 가정해봅시다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// controllers/auth.js\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"register\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"req, res\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { email, password } = req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" existingUser = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"findOne\"\n        }), \"({\\n      email,\\n    });\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (existingUser) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"400\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"send\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'이미 등록된 사용자가 해당 이메일로 존재합니다'\"\n        }), \");\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 추가 코드\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"201\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"send\"\n        }), \"();\\n  } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"catch\"\n        }), \" (error) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(error);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res\\n      .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"500\"\n        }), \")\\n      .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"send\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'새 사용자 등록 중 오류가 발생했습니다. 나중에 다시 시도해주세요.'\"\n        }), \");\\n  }\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = { register };\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// routes/auth.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { register } = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'../controllers/auth'\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Router\"\n        }), \" = express.\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Router\"\n        }), \"();\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Router\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"post\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/api/register'\"\n        }), \", register);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 사용자 등록시 문제가 발생하여 register 함수 코드를 디버그하려고 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 경우, 다음과 같이 register 함수 코드 내에 debugger; 문을 추가하면됩니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"register\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"req, res\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { email, password } = req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"debugger\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" existingUser = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"findOne\"\n        }), \"({\\n      email,\\n    });\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (existingUser) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"400\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"send\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'이미 등록된 사용자가 해당 이메일로 존재합니다'\"\n        }), \");\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 추가 코드\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"201\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"send\"\n        }), \"();\\n  } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"catch\"\n        }), \" (error) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(error);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" res\\n      .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"status\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"500\"\n        }), \")\\n      .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"send\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'새 사용자 등록 중 오류가 발생했습니다. 나중에 다시 시도해주세요.'\"\n        }), \");\\n  }\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"디버깅을 위한 애플리케이션 실행 방법\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"일반적으로, Node.js 애플리케이션을 실행하려면 다음 명령을 실행합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"node index.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 대신에, 다음 명령을 실행할 수 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"노드를 검사하려면 index.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"를 입력하세요.\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기에서는 단순히 inspect 키워드를 추가했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 명령을 실행하면 다음과 같이 출력이 표시됩니다:\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_1.png\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n<div class=\\\"content-ad\\\"></div>\\n\\n위의 출력에서 디버거가 연결된 것을 확인할 수 있어요, 이제 코드 디버깅을 시작할 수 있어요.\\n\\n크롬 브라우저를 열고 브라우저 URL에 chrome://inspect를 입력하세요.\\n\\n아래와 같은 출력이 나타날 거에요:\\n\\n![이미지](/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_2.png)\\n\\n<div class=\\\"content-ad\\\"></div>\\n\\n우리가 `node inspect index.js` 명령을 실행하여 inspecting을 시작했으니, 원격 대상 섹션 아래에 새로운 대상 항목이 표시된 것을 볼 수 있어요.\\n\\n그럼, 표시된 파란색 inspect 링크를 클릭하면 아래 이미지처럼 새로운 브라우저 개발 도구가 열릴 거에요:\\n\\n![이미지](/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_3.png)\\n\\n위 이미지의 오른쪽 패널에서 볼 수 있듯이, 디버거 일시 중지 메시지가 표시되고 디버깅 제어가 코드의 첫 줄에 있는 것을 확인할 수 있어요 (하이라이트된 노란색 줄로 확인 가능합니다).\\n\\n<div class=\\\"content-ad\\\"></div>\\n\\n하지만 코드의 첫 번째 줄부터 디버깅을 시작하려는 것은 원하지 않습니다. 대신, 등록 코드만 디버깅하려고 합니다. 아래 디버거 일시 중지 메시지 위에 표시된 파란 삼각형 아이콘을 클릭해주세요:\\n\\n![Debug icon](/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_4.png)\\n\\n지금이 창을 닫지 마세요. 대신에 Postman을 사용하여 응용 프로그램에서 사용자를 등록하거나 API 호출을 해보세요. 그렇게 하면 이전에 추가한 /register route 핸들러 코드가 실행될 것입니다.\\n\\n![API call](/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_5.png)\\n\\n<div class=\\\"content-ad\\\"></div>\\n\\n위에서 볼 수 있듯이 새 계정 만들기 버튼을 클릭하면 자동으로 debugger; 문이 추가된 코드로 리디렉션됩니다.\\n\\n이제 코드를 줄 단위로 디버깅하고 각 변수의 값을 볼 수 있으며 디버깅 중에 문제를 찾아 수정할 수 있습니다.\\n\\n# 디버깅 중 변수 액세스하기\\n\\n때로는 디버깅 중에 마우스를 가리키면 실제 값이 표시되는 변수가 너무 길어서 많은 속성을 가진 객체일 수 있습니다. 그래서 간단하게 마우스 오버로는 쉽게 볼 수 없을 수도 있습니다.\\n\\n<div class=\\\"content-ad\\\"></div>\\n\\n그럼, 디버거가 계속 활성화된 채로 콘솔 탭을 열고 우리가 보고 싶은 변수의 이름을 입력할 수 있어요. 이 과정은 아래 GIF에서 확인할 수 있어요:\\n\\n![예시 이미지](/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_6.png)\\n\\n이렇게 우리는 Node.js 어플리케이션 코드를 쉽게 디버깅할 수 있어요.\\n\\n# 디버깅을 위한 스크립트 작성\\n\\n<div class=\\\"content-ad\\\"></div>\\n\\n터미널에서 매번 node inspect index.js 명령어를 수동으로 입력하기 싫다면, package.json 파일 안에 아래와 같이 새로운 디버그 스크립트를 생성할 수 있어요:\\n\\n```js\\n\\\"scripts\\\": {\\n    \\\"start\\\": \\\"node index.js\\\",\\n    \\\"debug\\\": \\\"node inspect index.js\\\",\\n    \\\"dev\\\": \\\"nodemon index.js\\\"\\n},\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래서 이제 npm run debug 명령어를 실행하여 애플리케이션을 디버그 모드로 시작할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"간단한 요약\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Node.js 애플리케이션을 디버깅하려면 다음 단계를 따라야합니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"디버깅하려는 코드 내에 디버거 문을 추가합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"node inspect index.js 또는 node inspect server.js 명령을 실행하여 디버그 모드로 애플리케이션을 시작합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Chrome 브라우저에서 URL chrome://inspect에 액세스합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"원격 대상 섹션 아래의 inspect 링크를 클릭합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"index.js 또는 server.js 파일의 첫 줄부터 디버깅을 시작하고 싶지 않다면 파란 삼각형 아이콘을 클릭합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"debugger; 문이 추가된 곳에서 코드를 트리거하는 API 호출 또는 작업을 수행합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이렇게하면 코드를 줄 단위로 디버깅하여 문제를 찾을 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"읽어 주셔서 감사합니다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 튜토리얼은 여기까지입니다. 새로운 것을 배우셨기를 바랍니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 튜토리얼의 비디오 버전을 시청하고 싶으신가요? 이 비디오를 확인해보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만일 자바스크립트, ES6+, 리액트, 그리고 노드.js를 쉽게 이해할 수 있는 내용으로 습득하고 싶다면, 제 유튜브 채널을 확인해보세요. 구독하기를 잊지 마세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"정기적인 자바스크립트, 리액트, 그리고 노드.js 콘텐츠로 계속해서 최신 소식을 받고 싶다면, 링크드인에서 저를 팔로우하세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-01-HowtoDebugNodejsApplicationsUsingthedebuggerStatementEasiestWay_7.png\",\n        alt: \"이미지\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}