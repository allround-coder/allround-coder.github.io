{"pageProps":{"post":{"title":"정규 표현식에서 여러 조건을 일치시키는 방법","description":"","date":"2024-06-22 12:52","slug":"2024-06-22-HowToMatchMultipleConditionsinRegex","content":"\n\n<img src=\"/assets/img/2024-06-22-HowToMatchMultipleConditionsinRegex_0.png\" />\n\n이전 포스트에서는 미디엄 게시물에서 YouTube 링크를 썸네일로 표시하는 방법에 대해 설명했습니다. 이를 위해서는 제공된 URL에서 특정 패턴을 일치시키고 바꾸기 위해 일부 정규 표현식을 활용해야 합니다.\n\n포스트에는 두 가지 다른 조건을 고려해야 하는 보너스 섹션이 포함되어 있습니다. 두 가지 경우를 처리하기 위해 각각 별도의 문을 사용할 수 있습니다. 또는 여러 조건을 하나의 정규 표현식 문으로 통합하여 깔끔하고 효율적으로 할 수도 있습니다.\n\n이 포스트에서는 이에 대해 조금 더 깊이 이해해 보겠습니다! 아래는 문자열에서 정규 표현식 조건에 일치하는 부분을 찾을 수 있도록 match와 함께 사용할 수 있는 간단한 정규 표현식입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst line = '내 이름은 매튜 크로크입니다. 나는 NY 메츠를 좋아합니다.';\nconst regex = /[A-Za-z]/g;\nconst found = line.match(regex);\n\nconsole.log(found)\n\n> (33) ['M', 'y', 'n', 'a', 'm', 'e', 'i', 's', 'M', 'a', 't', 't', 'h', 'e', 'w', 'C', 'r', 'o', 'a', 'k', 'I', 'l', 'o', 'v', 'e', 't', 'h', 'e', 'N', 'Y', 'M', 'e', 't', 's']\n```\n\n<div class=\"content-ad\"></div>\n\n좋아요! 만약 우리가 전체 단어와 일치시키고 싶다면 어떨까요? 예를 들어, 'love'란 단어를 찾고 싶으면 이렇게 할 수 있어요!\n\n```js\nconst line = '내 이름은 매튜 크로크입니다. 나는 뉴욕 메츠를 사랑해요.';\nconst regex = /love/g;\nconst found = line.match(regex);\n\nconsole.log(found)\n\n> ['love']\n```\n\n쉽죠? 만약 우리가 대괄호 안에 love를 넣어서 /[love]/g와 같이 하면 아래와 같은 결과가 나올 거에요.\n\n```js\n> (9) ['e', 'e', 'o', 'l', 'o', 'v', 'e', 'e', 'e']\n```\n\n<div class=\"content-ad\"></div>\n\n이는 대괄호가 \"문자 클래스\"로 사용되기 때문입니다. 즉, \"a, b 또는 c 중의 어떤 문자\"를 의미합니다. 문자 클래스는 범위를 사용할 수도 있습니다. 예를 들어 [a-d] = [abcd]입니다. [여기](https://stackoverflow.com/questions/3512471/what-does-it-mean-to-escape-the-regex-square-brackets)에서 원본 스택 오버플로 설명을 볼 수 있습니다.\n\n## 다중 조건\n\n이 게시물의 원래 목적으로 돌아가 보겠습니다: 정규식에서 여러 조건을 사용하는 방법은 무엇인가요?\n\n예를 들어 우리가 love와 Mets 단어를 찾고 싶다고 할 때, 파이프 (|)를 사용하여 아래와 같은 정규식을 작성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst line = '내 이름은 매튜 크로크입니다. 나는 NY 메츠를 좋아합니다.';\nconst regex = /좋아합니다|메츠/g;\nconst found = line.match(regex);\n\nconsole.log(found)\n\n> ['좋아합니다', '메츠']\n```\n\n파이프는 논리 OR 표현을 나타냅니다. 하나의 패턴이나 다른 패턴 중 하나를 찾고 싶을 때 사용할 수 있습니다. 만약 love와 Mets 간에 공백을 넣었다면 또는 아예 아무것도 넣지 않았다면, 정규식에서 아무런 결과도 얻을 수 없을 것입니다.\n\n이는 이제 match 패턴이 loveMets 또는 love Mets라는 둘 중 하나가 되었기 때문입니다. 이들은 문자열에 나타나지 않는 패턴들입니다. OR 로직을 실행하려면 파이프가 필요합니다.\n\n이 OR 연산자는 두 개뿐만 아니라 다양한 조건과 함께 사용할 수 있습니다! 한 번 살펴보세요. 매튜, 좋아합니다, 메츠를 찾아 봅시다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst line = '내 이름은 Matthew Croak이다. 나는 NY Mets를 사랑해.';\nconst regex = /love|Mets|Matthew/g;\nconst found = line.match(regex);\n\nconsole.log(found)\n\n> ['Matthew', 'love', 'Mets']\n```\n\n패턴을 포함하는 순서가 중요하지 않은 것을 주목하셨나요? 여전히 일치 항목을 찾아 문자열에 나타난 순서대로 기록할 거에요.\n\n조금 더 복잡한 것을 시도해보죠.\n\n## 다중 조건 (특수 문자 사용)\n\n<div class=\"content-ad\"></div>\n\n위의 코드를 Markdown 형식으로 변경하면 아래와 같아요.\n\n```js\nconst line = \"내 이름은 Matthew Croak :). 나는 NY 메츠를 좋아해요 (양키스는 그렇게 좋아하지는 않지만, 괜찮아요.)\";\n\n// 이모티콘을 모두 찾고 싶다면 아래 내용을 콘솔에서 실행해보세요.\n\nconst line = \"내 이름은 Matthew Croak :). 나는 NY 메츠를 좋아해요 (양키스는 그렇게 좋아하지는 않지만, 괜찮아요).\";\nconst regex = /<3|:)/g;\nconst found = line.match(regex);\n\nconsole.log(found)\n```\n\n<div class=\"content-ad\"></div>\n\n무슨 일이 있었나요? 로그를 찍을 때 이렇게 나왔나요...\n\nUncaught SyntaxError: Invalid regular expression: /`3|:)/: Unmatched ‘)’\n\n왜 이런 일이 발생했을까요? 그것은 단순히 )가 정규식에서 특수 문자로 사용되기 때문이에요! 그것은 그룹화에 사용돼요. 문자열에서 )를 찾으려면 백슬래시로 이스케이핑 해야 해요.\n\n아래 사항을 확인해 보세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst regex = /<3|:\\)/g;\n```\n\n코드를 업데이트하면 아래와 같은 응답이 나와야 합니다.\n\n```js\n> (2) [':)', '<3']\n```\n\n여기 있습니다! 여러 개의 정규 표현식을 논리 OR 연산자를 사용하여 하나로 결합하는 방법과 문자열에서 특수하거나 예약된 문자를 찾을 수 있도록 이스케이프하는 방법까지 배웠습니다!\n\n<div class=\"content-ad\"></div>\n\n다른 방법으로 정규식에서 여러 조건을 사용하는 방법이 있나요? 댓글로 알려주세요! \n\n나의 정리된 정규식 목록을 확인하려면 더 많은 자료를 보십시오!\n\n무제한 광고 없는 이야기를 수천 명의 작가로부터 받으며 무료 Medium 멤버십을 업그레이드하세요. 이것은 제가 작성한 콘텐츠에 대한 보상을 받게 해주는 제 계정과 연계된 링크입니다.\n\n또한 이메일로 구독하여 새로운 글이 올라올 때마다 알림을 받을 수도 있습니다!\n\n<div class=\"content-ad\"></div>\n\n# 참고문헌","ogImage":{"url":"/assets/img/2024-06-22-HowToMatchMultipleConditionsinRegex_0.png"},"coverImage":"/assets/img/2024-06-22-HowToMatchMultipleConditionsinRegex_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이전 포스트에서는 미디엄 게시물에서 YouTube 링크를 썸네일로 표시하는 방법에 대해 설명했습니다. 이를 위해서는 제공된 URL에서 특정 패턴을 일치시키고 바꾸기 위해 일부 정규 표현식을 활용해야 합니다.</p>\n<p>포스트에는 두 가지 다른 조건을 고려해야 하는 보너스 섹션이 포함되어 있습니다. 두 가지 경우를 처리하기 위해 각각 별도의 문을 사용할 수 있습니다. 또는 여러 조건을 하나의 정규 표현식 문으로 통합하여 깔끔하고 효율적으로 할 수도 있습니다.</p>\n<p>이 포스트에서는 이에 대해 조금 더 깊이 이해해 보겠습니다! 아래는 문자열에서 정규 표현식 조건에 일치하는 부분을 찾을 수 있도록 match와 함께 사용할 수 있는 간단한 정규 표현식입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> line = <span class=\"hljs-string\">'내 이름은 매튜 크로크입니다. 나는 NY 메츠를 좋아합니다.'</span>;\n<span class=\"hljs-keyword\">const</span> regex = <span class=\"hljs-regexp\">/[A-Za-z]/g</span>;\n<span class=\"hljs-keyword\">const</span> found = line.<span class=\"hljs-title function_\">match</span>(regex);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(found)\n\n> (<span class=\"hljs-number\">33</span>) [<span class=\"hljs-string\">'M'</span>, <span class=\"hljs-string\">'y'</span>, <span class=\"hljs-string\">'n'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'m'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'i'</span>, <span class=\"hljs-string\">'s'</span>, <span class=\"hljs-string\">'M'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'t'</span>, <span class=\"hljs-string\">'t'</span>, <span class=\"hljs-string\">'h'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'w'</span>, <span class=\"hljs-string\">'C'</span>, <span class=\"hljs-string\">'r'</span>, <span class=\"hljs-string\">'o'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'k'</span>, <span class=\"hljs-string\">'I'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'o'</span>, <span class=\"hljs-string\">'v'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'t'</span>, <span class=\"hljs-string\">'h'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'N'</span>, <span class=\"hljs-string\">'Y'</span>, <span class=\"hljs-string\">'M'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'t'</span>, <span class=\"hljs-string\">'s'</span>]\n</code></pre>\n<p>좋아요! 만약 우리가 전체 단어와 일치시키고 싶다면 어떨까요? 예를 들어, 'love'란 단어를 찾고 싶으면 이렇게 할 수 있어요!</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> line = <span class=\"hljs-string\">'내 이름은 매튜 크로크입니다. 나는 뉴욕 메츠를 사랑해요.'</span>;\n<span class=\"hljs-keyword\">const</span> regex = <span class=\"hljs-regexp\">/love/g</span>;\n<span class=\"hljs-keyword\">const</span> found = line.<span class=\"hljs-title function_\">match</span>(regex);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(found)\n\n> [<span class=\"hljs-string\">'love'</span>]\n</code></pre>\n<p>쉽죠? 만약 우리가 대괄호 안에 love를 넣어서 /[love]/g와 같이 하면 아래와 같은 결과가 나올 거에요.</p>\n<pre><code class=\"hljs language-js\">> (<span class=\"hljs-number\">9</span>) [<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'o'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'o'</span>, <span class=\"hljs-string\">'v'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'e'</span>]\n</code></pre>\n<p>이는 대괄호가 \"문자 클래스\"로 사용되기 때문입니다. 즉, \"a, b 또는 c 중의 어떤 문자\"를 의미합니다. 문자 클래스는 범위를 사용할 수도 있습니다. 예를 들어 [a-d] = [abcd]입니다. <a href=\"https://stackoverflow.com/questions/3512471/what-does-it-mean-to-escape-the-regex-square-brackets\" rel=\"nofollow\" target=\"_blank\">여기</a>에서 원본 스택 오버플로 설명을 볼 수 있습니다.</p>\n<h2>다중 조건</h2>\n<p>이 게시물의 원래 목적으로 돌아가 보겠습니다: 정규식에서 여러 조건을 사용하는 방법은 무엇인가요?</p>\n<p>예를 들어 우리가 love와 Mets 단어를 찾고 싶다고 할 때, 파이프 (|)를 사용하여 아래와 같은 정규식을 작성할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> line = <span class=\"hljs-string\">'내 이름은 매튜 크로크입니다. 나는 NY 메츠를 좋아합니다.'</span>;\n<span class=\"hljs-keyword\">const</span> regex = <span class=\"hljs-regexp\">/좋아합니다|메츠/g</span>;\n<span class=\"hljs-keyword\">const</span> found = line.<span class=\"hljs-title function_\">match</span>(regex);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(found)\n\n> [<span class=\"hljs-string\">'좋아합니다'</span>, <span class=\"hljs-string\">'메츠'</span>]\n</code></pre>\n<p>파이프는 논리 OR 표현을 나타냅니다. 하나의 패턴이나 다른 패턴 중 하나를 찾고 싶을 때 사용할 수 있습니다. 만약 love와 Mets 간에 공백을 넣었다면 또는 아예 아무것도 넣지 않았다면, 정규식에서 아무런 결과도 얻을 수 없을 것입니다.</p>\n<p>이는 이제 match 패턴이 loveMets 또는 love Mets라는 둘 중 하나가 되었기 때문입니다. 이들은 문자열에 나타나지 않는 패턴들입니다. OR 로직을 실행하려면 파이프가 필요합니다.</p>\n<p>이 OR 연산자는 두 개뿐만 아니라 다양한 조건과 함께 사용할 수 있습니다! 한 번 살펴보세요. 매튜, 좋아합니다, 메츠를 찾아 봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> line = <span class=\"hljs-string\">'내 이름은 Matthew Croak이다. 나는 NY Mets를 사랑해.'</span>;\n<span class=\"hljs-keyword\">const</span> regex = <span class=\"hljs-regexp\">/love|Mets|Matthew/g</span>;\n<span class=\"hljs-keyword\">const</span> found = line.<span class=\"hljs-title function_\">match</span>(regex);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(found)\n\n> [<span class=\"hljs-string\">'Matthew'</span>, <span class=\"hljs-string\">'love'</span>, <span class=\"hljs-string\">'Mets'</span>]\n</code></pre>\n<p>패턴을 포함하는 순서가 중요하지 않은 것을 주목하셨나요? 여전히 일치 항목을 찾아 문자열에 나타난 순서대로 기록할 거에요.</p>\n<p>조금 더 복잡한 것을 시도해보죠.</p>\n<h2>다중 조건 (특수 문자 사용)</h2>\n<p>위의 코드를 Markdown 형식으로 변경하면 아래와 같아요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> line = <span class=\"hljs-string\">\"내 이름은 Matthew Croak :). 나는 NY 메츠를 좋아해요 (양키스는 그렇게 좋아하지는 않지만, 괜찮아요.)\"</span>;\n\n<span class=\"hljs-comment\">// 이모티콘을 모두 찾고 싶다면 아래 내용을 콘솔에서 실행해보세요.</span>\n\n<span class=\"hljs-keyword\">const</span> line = <span class=\"hljs-string\">\"내 이름은 Matthew Croak :). 나는 NY 메츠를 좋아해요 (양키스는 그렇게 좋아하지는 않지만, 괜찮아요).\"</span>;\n<span class=\"hljs-keyword\">const</span> regex = <span class=\"hljs-regexp\">/&#x3C;3|:)/g</span>;\n<span class=\"hljs-keyword\">const</span> found = line.<span class=\"hljs-title function_\">match</span>(regex);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(found)\n</code></pre>\n<p>무슨 일이 있었나요? 로그를 찍을 때 이렇게 나왔나요...</p>\n<p>Uncaught SyntaxError: Invalid regular expression: /`3|:)/: Unmatched ‘)’</p>\n<p>왜 이런 일이 발생했을까요? 그것은 단순히 )가 정규식에서 특수 문자로 사용되기 때문이에요! 그것은 그룹화에 사용돼요. 문자열에서 )를 찾으려면 백슬래시로 이스케이핑 해야 해요.</p>\n<p>아래 사항을 확인해 보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> regex = <span class=\"hljs-regexp\">/&#x3C;3|:\\)/g</span>;\n</code></pre>\n<p>코드를 업데이트하면 아래와 같은 응답이 나와야 합니다.</p>\n<pre><code class=\"hljs language-js\">> (<span class=\"hljs-number\">2</span>) [<span class=\"hljs-string\">':)'</span>, <span class=\"hljs-string\">'&#x3C;3'</span>]\n</code></pre>\n<p>여기 있습니다! 여러 개의 정규 표현식을 논리 OR 연산자를 사용하여 하나로 결합하는 방법과 문자열에서 특수하거나 예약된 문자를 찾을 수 있도록 이스케이프하는 방법까지 배웠습니다!</p>\n<p>다른 방법으로 정규식에서 여러 조건을 사용하는 방법이 있나요? 댓글로 알려주세요!</p>\n<p>나의 정리된 정규식 목록을 확인하려면 더 많은 자료를 보십시오!</p>\n<p>무제한 광고 없는 이야기를 수천 명의 작가로부터 받으며 무료 Medium 멤버십을 업그레이드하세요. 이것은 제가 작성한 콘텐츠에 대한 보상을 받게 해주는 제 계정과 연계된 링크입니다.</p>\n<p>또한 이메일로 구독하여 새로운 글이 올라올 때마다 알림을 받을 수도 있습니다!</p>\n<h1>참고문헌</h1>\n</body>\n</html>\n"},"__N_SSG":true}