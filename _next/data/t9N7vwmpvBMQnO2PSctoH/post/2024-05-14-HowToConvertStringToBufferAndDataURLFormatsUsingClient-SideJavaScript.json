{"pageProps":{"post":{"title":"클라이언트 측 JavaScript를 사용하여 문자열을 버퍼 및 데이터 URL 형식으로 변환하는 방법","description":"","date":"2024-05-14 13:52","slug":"2024-05-14-HowToConvertStringToBufferAndDataURLFormatsUsingClient-SideJavaScript","content":"\n\n웹 애플리케이션에서는 Base64가 종종 사용됩니다. 바이너리 데이터를 ASCII 텍스트 형식으로 저장하거나 전송하기 위해 인코딩하는 데 쓰입니다. 예를 들어, 파일 전송 API는 효율적인 저장 및 처리 속도로 인해 이진 데이터로 반환된 응답을 받는 경우가 많습니다.\n\n![image](/assets/img/2024-05-14-HowToConvertStringToBufferAndDataURLFormatsUsingClient-SideJavaScript_0.png)\n\n# NodeJS의 버퍼 클래스\n\nNodeJS에 독점적인 전역 API 중 하나인 버퍼 클래스는 보내거나 받는 이진 데이터를 처리하는 편리한 수단으로 사용됩니다. 예를 들어, 다음 코드 스니펫은 NodeJS의 버퍼 모듈을 사용하여 문자열을 ArrayBuffer로 변환하거나 그 반대로 변환하는 방법을 보여줍니다:\n\n\n\n```js\nconst str = 'Hey. this is a string!';\n\nconst buffer = Buffer.from(str, 'utf-8'); // 형식: ArrayBuffer\nconst b64Str = Buffer.from(str, 'utf-8').toString('base64');\nconsole.log(b64Str);\n/* 예상 결과: */\n// SGV5LiB0aGlzIGlzIGEgc3RyaW5nIQ==\n\nconst originalStr = Buffer.from(b64Str, 'base64').toString('utf-8');\nconsole.log(originalStr);\n/* 예상 결과: */\n// Hey. this is a string!\n```\n\n## 클라이언트 측 브라우저 환경\n\n- btoa()는 Base64로 인코딩된 문자열을 읽고 출력합니다.\n- atob()은 Base64 문자열의 디코딩에 사용됩니다.\n\nNodeJS의 Buffer 모듈은 기본적으로 UTF-8 인코딩 체계를 사용하는 반면, btoa()와 atob()은 유니코드 텍스트와 같은 비 ASCII 문자를 해석할 수 없어 에러를 발생시킵니다.\n\n\n\n```js\ntry {\n  btoa('ヾξ⸨🎀˶❛ヮ❛⸩ﾉ ᵀᴴᴱ ᴿᴵᴮᴮᴼᴺ ᴳᴵᴿᴸ'); // 유니코드 문자만\n} catch(err) {\n  console.error(err);\n}\n// 콘솔 출력:\n/* InvalidCharacterError: Failed to execute 'btoa' on 'Window': The */\n/* string to be encoded contains characters outside of the Latin1 range. */\n```\n\n그러므로 데이터를 이진 데이터 형식으로 변환하는 경우 — 즉, Data URL 및 ArrayBuffer로 변환하기 위해 사전에 UTF-8로 문자열을 바이트 시퀀스로 변환한 후 이 바이트 시퀀스를 Base64 문자열로 인코딩해야 합니다.\n\n# 구현 세부 사항\n\n여기 클라이언트 측 JavaScript를 사용하여 \"유니코드 문제\"를 해결하기 위한 2가지 가능한 방법이 있습니다. 양 구현 모두 아래의 헬퍼 함수 convertBitArrtoB64 및 convertB64ToBitArr가 포함되어야 한다는 점을 유의하십시오:\n\n\n\n```js\n// Uint8Array를 Base64 문자열로 변환하는 함수\nconst convertBitArrtoB64 = (bitArr) => ( btoa( bitArr.reduce((data, byte) => data + String.fromCharCode(byte), '') ) );\n\n// Base64 문자열을 Uint8Array로 변환하는 함수\nconst convertB64ToBitArr = (b64Str) => ( Uint8Array.from(atob( (b64Str.includes(';base64,') ? (b64Str.split(','))[1] : b64Str) ), (v) => v.charCodeAt(0)) );\n```\n\n## (1) TextEncoder & TextDecoder\n\nUTF-8 문자열 인코딩은 네이티브 브라우저에서 TextEncoder 인터페이스(반대 방향으로는 TextDecoder)로 처리할 수 있습니다:\n\n- 문자열을 ArrayBuffer 및 Base64로 인코딩된 데이터 URL로 변환하기\n\n\n\n\n```js\nconst inputStr = '히카리 미나미';\n\n// 문자열을 Uint8Array로 출력하는 인자를 사용하는 함수\nconst bitArr = (utf8Str) => (new TextEncoder().encode(utf8Str));\n\nconst uInt8Arr = bitArr(inputStr);\nconsole.log(uInt8Arr);\n// 예상 결과:\n// 236,150,136,237,132,132,235,170,164,237,157,144,32,236,130,183,235,143,138\n\nconst buffer = uInt8Arr.buffer; \nconsole.log(buffer); \n// 예상 결과:\n// 바이트 길이가 21인 ArrayBuffer 출력\n\nconst b64Str = convertBitArrtoB64( bitArr(inputStr) );\nconsole.log(b64Str);\n// 예상 결과:\n// 7ZWw7ISw7Iqk7YOJIDA=\n```\n\n- 원래 입력된 텍스트로의 역 변환\n\n```js\n// Uint8Array를 사용하는 인자를 문자열로 출력하는 함수\nconst utf8Str = (bitArr) => (new TextDecoder().decode(bitArr.buffer));\n\nconst originalStr = utf8Str(convertB64ToBitArr(b64Str));\nconsole.log(originalStr);\n// 예상 결과:\n// 히카리 미나미\n```\n\n## (2) unescape + encodeURIComponent 및 decodeURIComponent + escape\n\n\n\n\n그러나 대안으로 UTF-8 인코더를 구현하는 JavaScript를 사용할 수도 있습니다. 이를 위해 브라우저 글로벌 객체인 unescape + encodeURIComponent (그리고 반대 방향으로는 decodeURIComponent + escape)를 사용할 수 있습니다:\n\n- 문자열을 ArrayBuffer와 Base64로 인코딩된 데이터 URL로 변환\n\n```js\nconst inputStr = 'ヾξ⸨🎀˶❛ヮ❛⸩ﾉ ᵀᴴᴱ ᴿᴵᴮᴮᴼᴺ ᴳᴵᴿᴸ';\n\n// 문자열을 받아 Base64 문자열을 출력하는 함수\nconst utf8_to_b64 = (str) => (btoa(unescape(encodeURIComponent(str))));\n\nconst b64Str = utf8_to_b64(inputStr);\nconsole.log(b64Str);\n// 예상 결과:\n// 44O+zr7iuKjwn46Ay7binZvjg67inZviuKnvvokg4bWA4bS04bSxIOG0v+G0teG0ruG0ruG0vOG0uiDhtLPhtLXhtL/htLg=\n\nconst uInt8Arr = convertB64ToBitArr(utf8_to_b64(inputStr));\nconsole.log(uInt8Arr);\n// 예상 결과:\n// 227,131,190,206,190,226,184,168,240,159,142,128,203,182,226,157,155,227,131,174,226,157,155,226,184,169,239,190,137,32,225,181,128,225,180,180,225,180,177,32,225,180,191,225,180,181,225,180,174,225,180,174,225,180,188,225,180,186,32,225,180,179,225,180,181,225,180,191,225,180,184\n\nconst buffer = uInt8Arr.buffer; \nconsole.log(buffer); \n// 예상 결과:\n// 71바이트 길이의 ArrayBuffer를 출력함\n```\n\n- 원래 입력 텍스트로의 역변환\n\n\n\n```js\n// Base64로 인코딩된 데이터 URL을 받아 String을 출력하는 함수입니다.\nconst b64_to_utf8 = (str) => (decodeURIComponent(escape(atob(str)));\n\nconst originalStr = b64_to_utf8(b64Str);\n// 예상 결과:\n// ヾξ⸨🎀˶❛ヮ❛⸩ﾉ ᵀᴴᴱ ᴿᴵᴮᴮᴼᴺ ᴳᴵᴿᴸ\n```\n\n# 실시간 데모\n\n## ASCII 문자만 사용\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*FHtRkS1iUjaSCPGv6Pz0-A.gif\" />\n\n\n\n\n## 유니코드 문자만\n\n![이미지](https://miro.medium.com/v2/resize:fit:1200/1*kwj-q8KMkj_nQcqWhliUBw.gif)\n\nconvert-to-buffer에서 직접 시도해보세요!\n\n여기까지 읽어주셔서 정말 감사합니다! ❤ 이 구현이 유용했기를 바라며, 더 많은 GIS, 데이터 분석 및 웹 응용 프로그램 관련 콘텐츠를 원하시면 Medium에서 제 팔로우를 해주세요. 정말로 감사하겠습니다 — 😀\n\n\n\n— 🌮 타코 한 개 사주세요 ξ(🎀˶❛◡❛)\n\n## 다른 웹 관련 콘텐츨 후보:\n\n# PlainEnglish.io 🚀\n\nIn Plain English 커뮤니티의 일원이 되어주셔서 감사합니다! 떠나시기 전에:\n\n\n\n- 저자에 대한 박수 및 팔로우 부탁드려요️\n- In Plain English에 글을 쓸 수 있는 방법을 배워보세요️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼 방문: Stackademic | CoFeed | Venture","ogImage":{"url":"/assets/img/2024-05-14-HowToConvertStringToBufferAndDataURLFormatsUsingClient-SideJavaScript_0.png"},"coverImage":"/assets/img/2024-05-14-HowToConvertStringToBufferAndDataURLFormatsUsingClient-SideJavaScript_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>웹 애플리케이션에서는 Base64가 종종 사용됩니다. 바이너리 데이터를 ASCII 텍스트 형식으로 저장하거나 전송하기 위해 인코딩하는 데 쓰입니다. 예를 들어, 파일 전송 API는 효율적인 저장 및 처리 속도로 인해 이진 데이터로 반환된 응답을 받는 경우가 많습니다.</p>\n<p><img src=\"/assets/img/2024-05-14-HowToConvertStringToBufferAndDataURLFormatsUsingClient-SideJavaScript_0.png\" alt=\"image\"></p>\n<h1>NodeJS의 버퍼 클래스</h1>\n<p>NodeJS에 독점적인 전역 API 중 하나인 버퍼 클래스는 보내거나 받는 이진 데이터를 처리하는 편리한 수단으로 사용됩니다. 예를 들어, 다음 코드 스니펫은 NodeJS의 버퍼 모듈을 사용하여 문자열을 ArrayBuffer로 변환하거나 그 반대로 변환하는 방법을 보여줍니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">'Hey. this is a string!'</span>;\n\n<span class=\"hljs-keyword\">const</span> buffer = <span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(str, <span class=\"hljs-string\">'utf-8'</span>); <span class=\"hljs-comment\">// 형식: ArrayBuffer</span>\n<span class=\"hljs-keyword\">const</span> b64Str = <span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(str, <span class=\"hljs-string\">'utf-8'</span>).<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">'base64'</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b64Str);\n<span class=\"hljs-comment\">/* 예상 결과: */</span>\n<span class=\"hljs-comment\">// SGV5LiB0aGlzIGlzIGEgc3RyaW5nIQ==</span>\n\n<span class=\"hljs-keyword\">const</span> originalStr = <span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">from</span>(b64Str, <span class=\"hljs-string\">'base64'</span>).<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">'utf-8'</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(originalStr);\n<span class=\"hljs-comment\">/* 예상 결과: */</span>\n<span class=\"hljs-comment\">// Hey. this is a string!</span>\n</code></pre>\n<h2>클라이언트 측 브라우저 환경</h2>\n<ul>\n<li>btoa()는 Base64로 인코딩된 문자열을 읽고 출력합니다.</li>\n<li>atob()은 Base64 문자열의 디코딩에 사용됩니다.</li>\n</ul>\n<p>NodeJS의 Buffer 모듈은 기본적으로 UTF-8 인코딩 체계를 사용하는 반면, btoa()와 atob()은 유니코드 텍스트와 같은 비 ASCII 문자를 해석할 수 없어 에러를 발생시킵니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-title function_\">btoa</span>(<span class=\"hljs-string\">'ヾξ⸨🎀˶❛ヮ❛⸩ﾉ ᵀᴴᴱ ᴿᴵᴮᴮᴼᴺ ᴳᴵᴿᴸ'</span>); <span class=\"hljs-comment\">// 유니코드 문자만</span>\n} <span class=\"hljs-keyword\">catch</span>(err) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n}\n<span class=\"hljs-comment\">// 콘솔 출력:</span>\n<span class=\"hljs-comment\">/* InvalidCharacterError: Failed to execute 'btoa' on 'Window': The */</span>\n<span class=\"hljs-comment\">/* string to be encoded contains characters outside of the Latin1 range. */</span>\n</code></pre>\n<p>그러므로 데이터를 이진 데이터 형식으로 변환하는 경우 — 즉, Data URL 및 ArrayBuffer로 변환하기 위해 사전에 UTF-8로 문자열을 바이트 시퀀스로 변환한 후 이 바이트 시퀀스를 Base64 문자열로 인코딩해야 합니다.</p>\n<h1>구현 세부 사항</h1>\n<p>여기 클라이언트 측 JavaScript를 사용하여 \"유니코드 문제\"를 해결하기 위한 2가지 가능한 방법이 있습니다. 양 구현 모두 아래의 헬퍼 함수 convertBitArrtoB64 및 convertB64ToBitArr가 포함되어야 한다는 점을 유의하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Uint8Array를 Base64 문자열로 변환하는 함수</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">convertBitArrtoB64</span> = (<span class=\"hljs-params\">bitArr</span>) => ( <span class=\"hljs-title function_\">btoa</span>( bitArr.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data, byte</span>) =></span> data + <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>(byte), <span class=\"hljs-string\">''</span>) ) );\n\n<span class=\"hljs-comment\">// Base64 문자열을 Uint8Array로 변환하는 함수</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">convertB64ToBitArr</span> = (<span class=\"hljs-params\">b64Str</span>) => ( <span class=\"hljs-title class_\">Uint8Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-title function_\">atob</span>( (b64Str.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">';base64,'</span>) ? (b64Str.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">','</span>))[<span class=\"hljs-number\">1</span>] : b64Str) ), <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> v.<span class=\"hljs-title function_\">charCodeAt</span>(<span class=\"hljs-number\">0</span>)) );\n</code></pre>\n<h2>(1) TextEncoder &#x26; TextDecoder</h2>\n<p>UTF-8 문자열 인코딩은 네이티브 브라우저에서 TextEncoder 인터페이스(반대 방향으로는 TextDecoder)로 처리할 수 있습니다:</p>\n<ul>\n<li>문자열을 ArrayBuffer 및 Base64로 인코딩된 데이터 URL로 변환하기</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> inputStr = <span class=\"hljs-string\">'히카리 미나미'</span>;\n\n<span class=\"hljs-comment\">// 문자열을 Uint8Array로 출력하는 인자를 사용하는 함수</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">bitArr</span> = (<span class=\"hljs-params\">utf8Str</span>) => (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TextEncoder</span>().<span class=\"hljs-title function_\">encode</span>(utf8Str));\n\n<span class=\"hljs-keyword\">const</span> uInt8Arr = <span class=\"hljs-title function_\">bitArr</span>(inputStr);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(uInt8Arr);\n<span class=\"hljs-comment\">// 예상 결과:</span>\n<span class=\"hljs-comment\">// 236,150,136,237,132,132,235,170,164,237,157,144,32,236,130,183,235,143,138</span>\n\n<span class=\"hljs-keyword\">const</span> buffer = uInt8Arr.<span class=\"hljs-property\">buffer</span>; \n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buffer); \n<span class=\"hljs-comment\">// 예상 결과:</span>\n<span class=\"hljs-comment\">// 바이트 길이가 21인 ArrayBuffer 출력</span>\n\n<span class=\"hljs-keyword\">const</span> b64Str = <span class=\"hljs-title function_\">convertBitArrtoB64</span>( <span class=\"hljs-title function_\">bitArr</span>(inputStr) );\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b64Str);\n<span class=\"hljs-comment\">// 예상 결과:</span>\n<span class=\"hljs-comment\">// 7ZWw7ISw7Iqk7YOJIDA=</span>\n</code></pre>\n<ul>\n<li>원래 입력된 텍스트로의 역 변환</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Uint8Array를 사용하는 인자를 문자열로 출력하는 함수</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">utf8Str</span> = (<span class=\"hljs-params\">bitArr</span>) => (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TextDecoder</span>().<span class=\"hljs-title function_\">decode</span>(bitArr.<span class=\"hljs-property\">buffer</span>));\n\n<span class=\"hljs-keyword\">const</span> originalStr = <span class=\"hljs-title function_\">utf8Str</span>(<span class=\"hljs-title function_\">convertB64ToBitArr</span>(b64Str));\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(originalStr);\n<span class=\"hljs-comment\">// 예상 결과:</span>\n<span class=\"hljs-comment\">// 히카리 미나미</span>\n</code></pre>\n<h2>(2) unescape + encodeURIComponent 및 decodeURIComponent + escape</h2>\n<p>그러나 대안으로 UTF-8 인코더를 구현하는 JavaScript를 사용할 수도 있습니다. 이를 위해 브라우저 글로벌 객체인 unescape + encodeURIComponent (그리고 반대 방향으로는 decodeURIComponent + escape)를 사용할 수 있습니다:</p>\n<ul>\n<li>문자열을 ArrayBuffer와 Base64로 인코딩된 데이터 URL로 변환</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> inputStr = <span class=\"hljs-string\">'ヾξ⸨🎀˶❛ヮ❛⸩ﾉ ᵀᴴᴱ ᴿᴵᴮᴮᴼᴺ ᴳᴵᴿᴸ'</span>;\n\n<span class=\"hljs-comment\">// 문자열을 받아 Base64 문자열을 출력하는 함수</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">utf8_to_b64</span> = (<span class=\"hljs-params\">str</span>) => (<span class=\"hljs-title function_\">btoa</span>(<span class=\"hljs-built_in\">unescape</span>(<span class=\"hljs-built_in\">encodeURIComponent</span>(str))));\n\n<span class=\"hljs-keyword\">const</span> b64Str = <span class=\"hljs-title function_\">utf8_to_b64</span>(inputStr);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b64Str);\n<span class=\"hljs-comment\">// 예상 결과:</span>\n<span class=\"hljs-comment\">// 44O+zr7iuKjwn46Ay7binZvjg67inZviuKnvvokg4bWA4bS04bSxIOG0v+G0teG0ruG0ruG0vOG0uiDhtLPhtLXhtL/htLg=</span>\n\n<span class=\"hljs-keyword\">const</span> uInt8Arr = <span class=\"hljs-title function_\">convertB64ToBitArr</span>(<span class=\"hljs-title function_\">utf8_to_b64</span>(inputStr));\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(uInt8Arr);\n<span class=\"hljs-comment\">// 예상 결과:</span>\n<span class=\"hljs-comment\">// 227,131,190,206,190,226,184,168,240,159,142,128,203,182,226,157,155,227,131,174,226,157,155,226,184,169,239,190,137,32,225,181,128,225,180,180,225,180,177,32,225,180,191,225,180,181,225,180,174,225,180,174,225,180,188,225,180,186,32,225,180,179,225,180,181,225,180,191,225,180,184</span>\n\n<span class=\"hljs-keyword\">const</span> buffer = uInt8Arr.<span class=\"hljs-property\">buffer</span>; \n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(buffer); \n<span class=\"hljs-comment\">// 예상 결과:</span>\n<span class=\"hljs-comment\">// 71바이트 길이의 ArrayBuffer를 출력함</span>\n</code></pre>\n<ul>\n<li>원래 입력 텍스트로의 역변환</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Base64로 인코딩된 데이터 URL을 받아 String을 출력하는 함수입니다.</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">b64_to_utf8</span> = (<span class=\"hljs-params\">str</span>) => (<span class=\"hljs-built_in\">decodeURIComponent</span>(<span class=\"hljs-built_in\">escape</span>(<span class=\"hljs-title function_\">atob</span>(str)));\n\n<span class=\"hljs-keyword\">const</span> originalStr = <span class=\"hljs-title function_\">b64_to_utf8</span>(b64Str);\n<span class=\"hljs-comment\">// 예상 결과:</span>\n<span class=\"hljs-comment\">// ヾξ⸨🎀˶❛ヮ❛⸩ﾉ ᵀᴴᴱ ᴿᴵᴮᴮᴼᴺ ᴳᴵᴿᴸ</span>\n</code></pre>\n<h1>실시간 데모</h1>\n<h2>ASCII 문자만 사용</h2>\n<h2>유니코드 문자만</h2>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*kwj-q8KMkj_nQcqWhliUBw.gif\" alt=\"이미지\"></p>\n<p>convert-to-buffer에서 직접 시도해보세요!</p>\n<p>여기까지 읽어주셔서 정말 감사합니다! ❤ 이 구현이 유용했기를 바라며, 더 많은 GIS, 데이터 분석 및 웹 응용 프로그램 관련 콘텐츠를 원하시면 Medium에서 제 팔로우를 해주세요. 정말로 감사하겠습니다 — 😀</p>\n<p>— 🌮 타코 한 개 사주세요 ξ(🎀˶❛◡❛)</p>\n<h2>다른 웹 관련 콘텐츨 후보:</h2>\n<h1>PlainEnglish.io 🚀</h1>\n<p>In Plain English 커뮤니티의 일원이 되어주셔서 감사합니다! 떠나시기 전에:</p>\n<ul>\n<li>저자에 대한 박수 및 팔로우 부탁드려요️</li>\n<li>In Plain English에 글을 쓸 수 있는 방법을 배워보세요️</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터</li>\n<li>다른 플랫폼 방문: Stackademic | CoFeed | Venture</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}