{"pageProps":{"post":{"title":"기본을 정복하라 React로 넘어가기 전에 배워야 할 10가지 필수 JavaScript 주제","description":"","date":"2024-05-14 12:18","slug":"2024-05-14-MasteringtheBasics10EssentialJavaScriptTopicstoLearnBeforeMovingtoReact","content":"\n\n![이미지](/assets/img/2024-05-14-MasteringtheBasics10EssentialJavaScriptTopicstoLearnBeforeMovingtoReact_0.png)\n\n자바스크립트는 현대 웹 개발의 기초가 된 다재다능하고 동적인 프로그래밍 언어입니다. React, Angular, Vue.js와 같은 인기있는 프레임워크들이 등장함에 따라 특정 프레임워크를 배우기에 싫증이 나게 되기 쉽습니다. 그러나 점프하기 전에 자바스크립트 기초를 확실히 이해하는 것이 중요합니다. 이 블로그 포스트에서는 React 또는 다른 자바스크립트 프레임워크로 넘어가기 전에 반드시 숙달해야 할 핵심 주제를 살펴보겠습니다.\n\n# 1. 변수, 데이터 유형 및 연산자\n\n자바스크립트의 변수, 데이터 유형 및 연산자의 기초를 이해하는 것은 어떤 프로그래밍 작업에도 꼭 필요합니다. 이에는 다음이 포함됩니다:\n\n\n\n- 변수 선언 (let, const, var)\n- 데이터 유형 (원시, 복합, null, undefined)\n- 유형 강제 변환 및 변환\n- 연산자 우선순위 및 결합성\n\n코드 예시:\n\n\n# 변수 선언:\n\nJavaScript\n\n\n\n\n```js\nlet name = 'John';\nconst PI = 3.14;\nvar age = 30;\n```\n\n# 데이터 유형:\n\n자바스크립트\n\n```js\nlet isAdmin = true; // 불리언\nlet num = 42; // 숫자\nlet greeting = 'Hello'; // 문자열\n```\n\n\n\n# 형 변환:\n\n자바스크립트\n\n```js\nlet num = '42'; // 문자열\nconsole.log(num * 2); // 84 출력 (숫자로 강제 변환)\n```\n\n# 연산자 우선순위:\n\n\n\n자바스크립트\n\n```js\nlet result = 2 + 3 * 4; // 결과는 14가 나옵니다 (곱셈이 덧셈보다 높은 우선순위를 갖습니다)\n```\n\n## 2. 제어 구조 및 함수\n\n제어 구조 및 함수는 자바스크립트 프로그래밍의 기본 요소입니다. 다음을 확실히 이해해두세요:\n\n\n\n- 조건문 (if/else, switch)\n- 반복문 (for, while, do-while)\n- 함수 (선언, 표현식, 화살표 함수)\n- 함수 매개변수 및 반환 유형\n\n코드 예시:\n\n```javascript\n// 조건문:\n\n```\n\n\n\n```javascript\nlet age = 25;\nif (age >= 18) {\n  console.log('당신은 성인입니다.');\n} else {\n  console.log('당신은 미성년자입니다.');\n}\n```\n\n# 반복문:\n\nJavaScript\n\n```javascript\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n```\n\n\n\n# Functions:\n\n자바스크립트\n\n```js\nfunction greet(name) {\n  console.log(`Hello, ${name}!`);\n}\ngreet('John'); // \"Hello, John!\"을 출력합니다\n```\n\n# 화살표 함수:\n\n\n\n자바스크립트\n\n```js\nlet double = x => x * 2;\nconsole.log(double(5)); // 10을 출력합니다.\n```\n\n## 3. 객체지향 프로그래밍 (OOP) 개념\n\n자바스크립트는 객체지향 언어이며, OOP 원칙을 이해하는 것이 중요합니다.\n\n\n\n- 객체와 속성\n- 생성자와 프로토타입\n- 상속과 다형성\n- 캡슐화와 추상화\n\n코드 예시:\n\n# 객체와 속성:\n\nJavaScript\n\n\n\n```js\nlet person = {\n  name: '존',\n  age: 30,\n  greet: function() {\n    console.log(`안녕, 내 이름은 ${this.name}이야!`);\n  }\n};\nperson.greet(); // \"안녕, 내 이름은 존이야!\"\n\n# 생성자와 프로토타입:\n\nJavaScript\n\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\nPerson.prototype.greet = function() {\n  console.log(`안녕, 내 이름은 ${this.name}이야!`);\n};\nlet john = new Person('존', 30);\njohn.greet(); // \"안녕, 내 이름은 존이야!\"\n\n\n\n# 상속:\n\n자바스크립트\n\nfunction Employee(name, age, department) {\n  Person.call(this, name, age);\n  this.department = department;\n}\nEmployee.prototype = Object.create(Person.prototype);\nlet employee = new Employee('Jane', 25, '마케팅');\nemployee.greet(); // \"안녕하세요, 제 이름은 Jane입니다!\"\n\n# 4. DOM 조작과 이벤트\n\n\n\n문서 객체 모델(DOM)은 웹 개발의 기바입니다. 다음을 배워보세요:\n\n- DOM 요소 선택 및 조작하기\n- 이벤트 처리하기 (클릭, 호버, 제출 등)\n- 이벤트 위임과 버블링 사용하기\n\n코드 예시:\n\n- DOM 요소 선택 및 조작하기:\n\n\n\nJavaScript\n\nlet heading = document.querySelector('h1');\nheading.textContent = '새 헤딩';\n\n# 이벤트 처리:\n\nJavaScript\n\n\n\nlet button = document.querySelector('button');\nbutton.addEventListener('click', function() {\n  console.log('버튼이 클릭되었습니다!');\n});\n\n# 이벤트 위임:\n\nJavaScript\n\nlet ul = document.querySelector('ul');\nul.addEventListener('click', function(event) {\n  if (event.target.tagName === 'LI') {\n    console.log('리스트 아이템이 클릭되었습니다!');\n  }\n});\n\n\n\n# 5. 비동기 프로그래밍과 콜백\n\n자바스크립트에서 비동기 프로그래밍은 매우 중요합니다. 특히 외부 데이터나 API를 다룰 때:\n\n- 콜백과 고차 함수를 이해하세요.\n- 프로미스 및 async/await 구문에 대해 배우세요.\n- 오류 및 예외 상황을 다루세요.\n\n코드 예시:\n\n\n\n## 콜백:\n\n자바스크립트\n\nfunction loadData(callback) {\n  setTimeout(function() {\n    callback(['John', 'Jane', 'Bob']);\n  }, 2000);\n}\nloadData(function(data) {\n  console.log(data); // 출력: [\"John\", \"Jane\", \"Bob\"]\n});\n\n## 프로미스:\n\n\n\nJavaScript\n\nfunction loadData() {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      resolve(['John', 'Jane', 'Bob']);\n    }, 2000);\n  });\n}\nloadData().then(function(data) {\n  console.log(data); // 출력: [\"John\", \"Jane\", \"Bob\"]\n});\n\n# Async/await:\n\nJavaScript\n\n\n\nasync function loadData() {\n  try {\n    let data = await fetch('(링크 제공 불가)');\n    console.log(data); // 출력: [\"John\", \"Jane\", \"Bob\"]\n  } catch (error) {\n    console.error(error);\n  }\n}\nloadData();\n\n# 6. JavaScript 객체 메소드와 배열\n\n필수 객체 메소드와 배열 조작 기술을 익혀보세요:\n\n- 객체 메소드 (keys, values, entries 등)\n- 배열 메소드 (map, filter, reduce 등)\n- 배열 구조 분해 및 전개\n\n\n\n코드 예시:\n\n# 객체 메소드:\n\n자바스크립트\n\nlet person = { name: 'John', age: 30 };\nconsole.log(Object.keys(person)); // 출력: [\"name\", \"age\"]\nconsole.log(Object.values(person)); // 출력: [\"John\", 30]\n\n\n\n# 배열 메소드:\n\n자바스크립트\n\nlet numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers.map(x => x * 2)); // 결과: [2, 4, 6, 8, 10]\nconsole.log(numbers.filter(x => x % 2 === 0)); // 결과: [2, 4]\n\n# 배열 해체 및 전개:\n\n\n\n자바스크립트\n\nlet arr = [1, 2, 3];\nlet [first, ...rest] = arr;\nconsole.log(first); // 결과는 1\nconsole.log(rest); // 결과는 [2, 3]\n\nlet newArr = [...arr, 4, 5];\nconsole.log(newArr); // 결과는 [1, 2, 3, 4, 5]\n\n# 7. 클로저와 'this' 키워드\n\n\n\n클로저와 ‘this’ 키워드는 조금 까다로울 수 있지만, 이해하는 것이 중요합니다:\n\n- 클로저와 렉시컬 스코핑\n- ‘this’ 키워드와 컨텍스트 바인딩\n- bind, call, apply 메소드의 사용법\n\n코드 예시:\n\n# 클로저:\n\n\n\nJavaScript\n\nfunction outer() {\n  let x = 10;\n  function inner() {\n    console.log(x); // 10을 출력합니다\n  }\n  return inner;\n}\nlet innerFunc = outer();\ninnerFunc(); // 10을 출력합니다\n\n# 'this' 키워드:\n\nJavaScript\n\n\n\nfunction Person(name) {\n  this.name = name;\n}\nPerson.prototype.greet = function() {\n  console.log(`Hello, my name is ${this.name}!`);\n};\nlet john = new Person('John');\njohn.greet(); // 출력: \"Hello, my name is John!\"\n\n# Bind, call, and apply:\n\nJavaScript\n\nfunction greet(name) {\n  console.log(`Hello, ${name}!`);\n}\nlet greetJohn = greet.bind(null, 'John');\ngreetJohn(); // 출력: \"Hello, John!\"\n\n\n\nlet person = { name: 'Jane' };\ngreet.call(person, person.name); // 출력: \"안녕, Jane!\"\nlet numbers = [1, 2, 3];\nconsole.log(Math.max.apply(null, numbers)); // 출력: 3\n\n# 8. 오류 처리 및 디버깅\n\n오류를 처리하고 코드를 효과적으로 디버깅하는 방법을 배워보세요:\n\n- 오류 객체와 스택 추적 이해하기\n- console.log, debugger, 그리고 브라우저의 개발자 도구 사용하기\n- try-catch 블록 및 오류 처리 전략 구현하기\n\n\n\n코드 예시:\n\n## 오류 처리:\n\nJavaScript\n\ntry {\n  let x = 10 / 0;\n} catch (error) {\n  console.error(error); // \"Error: Division by zero\"이 출력됩니다.\n}\n\n\n\n# 디버깅:\n\nJavaScript\n\nconsole.log('Hello'); // \"Hello\"를 출력합니다\ndebugger; // 실행을 일시 중단하고 DevTools를 엽니다\n\n# 9. JavaScript Best Practices and Code Organization\n\n\n\n깨끗하고 유지보수 가능한 코드를 작성하기 위해 최상의 관행을 따르고 코드베이스를 조직화하세요:\n\n- 모듈식 코드와 임포트 사용\n- 네이밍 규칙과 코딩 표준 준수\n- 코드 분할과 트리 쉐이킹 구현\n\n코드 예시:\n\n\n# 모듈식 코드:\n\n\n\nJavaScript\n\n// greet.js\nfunction greet(name) {\n  console.log(`안녕, ${name}!`);\n}\nexport { greet };\n\nJavaScript\n\n// main.js\nimport { greet } from './greet.js';\ngreet('John'); // 출력 결과: \"안녕, John!\"\n\n\n\n# 네이밍 규칙 및 코딩 표준:\n\nJavaScript\n\n// 일관된 네이밍 규칙을 따르세요\nlet firstName = 'John';\nlet lastName = 'Doe';\n\n// 일관된 들여쓰기와 공백을 사용하세요\nif (true) {\n  console.log('Hello');\n}\n\n\n\n# 코드 분할과 트리 쉐이킹:\n\n자바스크립트\n\n// Webpack 또는 Rollup을 사용하여 코드를 작은 조각으로 분할하고\n// 사용하지 않는 코드를 제거하세요 (트리 쉐이킹)\n\n# 10. 브라우저 호환성 및 웹 표준\n\n\n\n여러 브라우저에서 코드가 작동하도록 보장하고 웹 표준을 따르세요:\n\n- 브라우저의 특이점과 불일치를 이해하세요\n- 기능 감지와 폴리필 사용하기\n- 웹 표준과 접근성 가이드라인 준수하기\n\n코드 예시:\n\n\n# 기능 감지:\n\n\n\n\n자바스크립트\n\nif (typeof window.addEventListener === 'function') {\n  // 이벤트 리스너 추가\n} else {\n  // 대체 방법 사용\n}\n\n## 폴리필:\n\n자바스크립트\n\n\n\nif (!Array.prototype.includes) {\n  Array.prototype.includes = function(searchElement) {\n    // Polyfill 구현\n  };\n}\n\n# 웹 표준과 접근성:\n\nJavaScript\n\n// 시맨틱 HTML 요소 사용\n<header>헤더</header>\n<nav>네비게이션</nav>\n<main>주요 콘텐츠</main>\n\n\n\n// 접근성을 위해 ARIA 속성을 사용하세요\n<button aria-label=\"제출\">제출</button>\n\n추가 자료\n\n- MDN Web Docs: JavaScript 문서 및 튜토리얼에 대한 포괄적인 자료\n- W3Schools: 웹 개발 튜토리얼 및 참고 자료가 있는 인기 있는 웹사이트\n- JavaScript Subreddit: JavaScript와 웹 개발에 대한 토론을 하는 커뮤니티 주도 포럼\n- Udemy 및 Coursera 강좌: JavaScript와 웹 개발 학습을 위한 온라인 강좌 및 튜토리얼\n\n# 결론\n\n\n\n\n자바스크립트의 기본을 완벽히 이해하는 것은 견고하고 확장 가능하며 유지보수가 쉬운 웹 애플리케이션을 구축하는 데 중요합니다. 이 블로그 포스트에서 다루는 주요 주제를 이해하면 더 고급 개념과 React, Angular, Vue.js와 같은 프레임워크에 대처할 준비가됩니다. 유능한 자바스크립트 개발자로 발전하기 위해 연습하고 실험하며 계속 학습해야합니다. 즐겨 코딩하세요!","ogImage":{"url":"/assets/img/2024-05-14-MasteringtheBasics10EssentialJavaScriptTopicstoLearnBeforeMovingtoReact_0.png"},"coverImage":"/assets/img/2024-05-14-MasteringtheBasics10EssentialJavaScriptTopicstoLearnBeforeMovingtoReact_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-14-MasteringtheBasics10EssentialJavaScriptTopicstoLearnBeforeMovingtoReact_0.png\" alt=\"이미지\"></p>\n<p>자바스크립트는 현대 웹 개발의 기초가 된 다재다능하고 동적인 프로그래밍 언어입니다. React, Angular, Vue.js와 같은 인기있는 프레임워크들이 등장함에 따라 특정 프레임워크를 배우기에 싫증이 나게 되기 쉽습니다. 그러나 점프하기 전에 자바스크립트 기초를 확실히 이해하는 것이 중요합니다. 이 블로그 포스트에서는 React 또는 다른 자바스크립트 프레임워크로 넘어가기 전에 반드시 숙달해야 할 핵심 주제를 살펴보겠습니다.</p>\n<h1>1. 변수, 데이터 유형 및 연산자</h1>\n<p>자바스크립트의 변수, 데이터 유형 및 연산자의 기초를 이해하는 것은 어떤 프로그래밍 작업에도 꼭 필요합니다. 이에는 다음이 포함됩니다:</p>\n<ul>\n<li>변수 선언 (let, const, var)</li>\n<li>데이터 유형 (원시, 복합, null, undefined)</li>\n<li>유형 강제 변환 및 변환</li>\n<li>연산자 우선순위 및 결합성</li>\n</ul>\n<p>코드 예시:</p>\n<h1>변수 선언:</h1>\n<p>JavaScript</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">'John'</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PI</span> = <span class=\"hljs-number\">3.14</span>;\n<span class=\"hljs-keyword\">var</span> age = <span class=\"hljs-number\">30</span>;\n</code></pre>\n<h1>데이터 유형:</h1>\n<p>자바스크립트</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> isAdmin = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 불리언</span>\n<span class=\"hljs-keyword\">let</span> num = <span class=\"hljs-number\">42</span>; <span class=\"hljs-comment\">// 숫자</span>\n<span class=\"hljs-keyword\">let</span> greeting = <span class=\"hljs-string\">'Hello'</span>; <span class=\"hljs-comment\">// 문자열</span>\n</code></pre>\n<h1>형 변환:</h1>\n<p>자바스크립트</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> num = <span class=\"hljs-string\">'42'</span>; <span class=\"hljs-comment\">// 문자열</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num * <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 84 출력 (숫자로 강제 변환)</span>\n</code></pre>\n<h1>연산자 우선순위:</h1>\n<p>자바스크립트</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// 결과는 14가 나옵니다 (곱셈이 덧셈보다 높은 우선순위를 갖습니다)</span>\n</code></pre>\n<h2>2. 제어 구조 및 함수</h2>\n<p>제어 구조 및 함수는 자바스크립트 프로그래밍의 기본 요소입니다. 다음을 확실히 이해해두세요:</p>\n<ul>\n<li>조건문 (if/else, switch)</li>\n<li>반복문 (for, while, do-while)</li>\n<li>함수 (선언, 표현식, 화살표 함수)</li>\n<li>함수 매개변수 및 반환 유형</li>\n</ul>\n<p>코드 예시:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 조건문:</span>\n\n</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> age = <span class=\"hljs-number\">25</span>;\n<span class=\"hljs-keyword\">if</span> (age >= <span class=\"hljs-number\">18</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'당신은 성인입니다.'</span>);\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'당신은 미성년자입니다.'</span>);\n}\n</code></pre>\n<h1>반복문:</h1>\n<p>JavaScript</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">5</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i);\n}\n</code></pre>\n<h1>Functions:</h1>\n<p>자바스크립트</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, <span class=\"hljs-subst\">${name}</span>!`</span>);\n}\n<span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-string\">'John'</span>); <span class=\"hljs-comment\">// \"Hello, John!\"을 출력합니다</span>\n</code></pre>\n<h1>화살표 함수:</h1>\n<p>자바스크립트</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">double</span> = x => x * <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">double</span>(<span class=\"hljs-number\">5</span>)); <span class=\"hljs-comment\">// 10을 출력합니다.</span>\n</code></pre>\n<h2>3. 객체지향 프로그래밍 (OOP) 개념</h2>\n<p>자바스크립트는 객체지향 언어이며, OOP 원칙을 이해하는 것이 중요합니다.</p>\n<ul>\n<li>객체와 속성</li>\n<li>생성자와 프로토타입</li>\n<li>상속과 다형성</li>\n<li>캡슐화와 추상화</li>\n</ul>\n<p>코드 예시:</p>\n<h1>객체와 속성:</h1>\n<p>JavaScript</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'존'</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>,\n  <span class=\"hljs-attr\">greet</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`안녕, 내 이름은 <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span>이야!`</span>);\n  }\n};\nperson.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// \"안녕, 내 이름은 존이야!\"</span>\n\n# 생성자와 프로토타입:\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age</span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;\n}\n<span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">greet</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`안녕, 내 이름은 <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span>이야!`</span>);\n};\n<span class=\"hljs-keyword\">let</span> john = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">'존'</span>, <span class=\"hljs-number\">30</span>);\njohn.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// \"안녕, 내 이름은 존이야!\"</span>\n\n\n\n# 상속:\n\n자바스크립트\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Employee</span>(<span class=\"hljs-params\">name, age, department</span>) {\n  <span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name, age);\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">department</span> = department;\n}\n<span class=\"hljs-title class_\">Employee</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);\n<span class=\"hljs-keyword\">let</span> employee = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Employee</span>(<span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-string\">'마케팅'</span>);\nemployee.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// \"안녕하세요, 제 이름은 Jane입니다!\"</span>\n\n# <span class=\"hljs-number\">4.</span> <span class=\"hljs-variable constant_\">DOM</span> 조작과 이벤트\n\n\n\n문서 객체 모델(<span class=\"hljs-variable constant_\">DOM</span>)은 웹 개발의 기바입니다. 다음을 배워보세요:\n\n- <span class=\"hljs-variable constant_\">DOM</span> 요소 선택 및 조작하기\n- 이벤트 처리하기 (클릭, 호버, 제출 등)\n- 이벤트 위임과 버블링 사용하기\n\n코드 예시:\n\n- <span class=\"hljs-variable constant_\">DOM</span> 요소 선택 및 조작하기:\n\n\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-keyword\">let</span> heading = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">'h1'</span>);\nheading.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">'새 헤딩'</span>;\n\n# 이벤트 처리:\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n\n\n<span class=\"hljs-keyword\">let</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">'button'</span>);\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'버튼이 클릭되었습니다!'</span>);\n});\n\n# 이벤트 위임:\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-keyword\">let</span> ul = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">'ul'</span>);\nul.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) {\n  <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">tagName</span> === <span class=\"hljs-string\">'LI'</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'리스트 아이템이 클릭되었습니다!'</span>);\n  }\n});\n\n\n\n# <span class=\"hljs-number\">5.</span> 비동기 프로그래밍과 콜백\n\n자바스크립트에서 비동기 프로그래밍은 매우 중요합니다. 특히 외부 데이터나 <span class=\"hljs-variable constant_\">API</span>를 다룰 때:\n\n- 콜백과 고차 함수를 이해하세요.\n- 프로미스 및 <span class=\"hljs-keyword\">async</span>/<span class=\"hljs-keyword\">await</span> 구문에 대해 배우세요.\n- 오류 및 예외 상황을 다루세요.\n\n코드 예시:\n\n\n\n## 콜백:\n\n자바스크립트\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadData</span>(<span class=\"hljs-params\">callback</span>) {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">callback</span>([<span class=\"hljs-string\">'John'</span>, <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-string\">'Bob'</span>]);\n  }, <span class=\"hljs-number\">2000</span>);\n}\n<span class=\"hljs-title function_\">loadData</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data); <span class=\"hljs-comment\">// 출력: [\"John\", \"Jane\", \"Bob\"]</span>\n});\n\n## 프로미스:\n\n\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadData</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) {\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-title function_\">resolve</span>([<span class=\"hljs-string\">'John'</span>, <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-string\">'Bob'</span>]);\n    }, <span class=\"hljs-number\">2000</span>);\n  });\n}\n<span class=\"hljs-title function_\">loadData</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data); <span class=\"hljs-comment\">// 출력: [\"John\", \"Jane\", \"Bob\"]</span>\n});\n\n# <span class=\"hljs-title class_\">Async</span>/<span class=\"hljs-attr\">await</span>:\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadData</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'(링크 제공 불가)'</span>);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data); <span class=\"hljs-comment\">// 출력: [\"John\", \"Jane\", \"Bob\"]</span>\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error);\n  }\n}\n<span class=\"hljs-title function_\">loadData</span>();\n\n# <span class=\"hljs-number\">6.</span> <span class=\"hljs-title class_\">JavaScript</span> 객체 메소드와 배열\n\n필수 객체 메소드와 배열 조작 기술을 익혀보세요:\n\n- 객체 메소드 (keys, values, entries 등)\n- 배열 메소드 (map, filter, reduce 등)\n- 배열 구조 분해 및 전개\n\n\n\n코드 예시:\n\n# 객체 메소드:\n\n자바스크립트\n\n<span class=\"hljs-keyword\">let</span> person = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'John'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> };\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(person)); <span class=\"hljs-comment\">// 출력: [\"name\", \"age\"]</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">values</span>(person)); <span class=\"hljs-comment\">// 출력: [\"John\", 30]</span>\n\n\n\n# 배열 메소드:\n\n자바스크립트\n\n<span class=\"hljs-keyword\">let</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(numbers.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =></span> x * <span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">// 결과: [2, 4, 6, 8, 10]</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(numbers.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =></span> x % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>)); <span class=\"hljs-comment\">// 결과: [2, 4]</span>\n\n# 배열 해체 및 전개:\n\n\n\n자바스크립트\n\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> [first, ...rest] = arr;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(first); <span class=\"hljs-comment\">// 결과는 1</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(rest); <span class=\"hljs-comment\">// 결과는 [2, 3]</span>\n\n<span class=\"hljs-keyword\">let</span> newArr = [...arr, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newArr); <span class=\"hljs-comment\">// 결과는 [1, 2, 3, 4, 5]</span>\n\n# <span class=\"hljs-number\">7.</span> 클로저와 <span class=\"hljs-string\">'this'</span> 키워드\n\n\n\n클로저와 ‘<span class=\"hljs-variable language_\">this</span>’ 키워드는 조금 까다로울 수 있지만, 이해하는 것이 중요합니다:\n\n- 클로저와 렉시컬 스코핑\n- ‘<span class=\"hljs-variable language_\">this</span>’ 키워드와 컨텍스트 바인딩\n- bind, call, apply 메소드의 사용법\n\n코드 예시:\n\n# 클로저:\n\n\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">outer</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">inner</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 10을 출력합니다</span>\n  }\n  <span class=\"hljs-keyword\">return</span> inner;\n}\n<span class=\"hljs-keyword\">let</span> innerFunc = <span class=\"hljs-title function_\">outer</span>();\n<span class=\"hljs-title function_\">innerFunc</span>(); <span class=\"hljs-comment\">// 10을 출력합니다</span>\n\n# <span class=\"hljs-string\">'this'</span> 키워드:\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n}\n<span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">greet</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span>!`</span>);\n};\n<span class=\"hljs-keyword\">let</span> john = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">'John'</span>);\njohn.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 출력: \"Hello, my name is John!\"</span>\n\n# <span class=\"hljs-title class_\">Bind</span>, call, and <span class=\"hljs-attr\">apply</span>:\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, <span class=\"hljs-subst\">${name}</span>!`</span>);\n}\n<span class=\"hljs-keyword\">let</span> greetJohn = greet.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'John'</span>);\n<span class=\"hljs-title function_\">greetJohn</span>(); <span class=\"hljs-comment\">// 출력: \"Hello, John!\"</span>\n\n\n\n<span class=\"hljs-keyword\">let</span> person = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Jane'</span> };\ngreet.<span class=\"hljs-title function_\">call</span>(person, person.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// 출력: \"안녕, Jane!\"</span>\n<span class=\"hljs-keyword\">let</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">max</span>.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">null</span>, numbers)); <span class=\"hljs-comment\">// 출력: 3</span>\n\n# <span class=\"hljs-number\">8.</span> 오류 처리 및 디버깅\n\n오류를 처리하고 코드를 효과적으로 디버깅하는 방법을 배워보세요:\n\n- 오류 객체와 스택 추적 이해하기\n- <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>, <span class=\"hljs-keyword\">debugger</span>, 그리고 브라우저의 개발자 도구 사용하기\n- <span class=\"hljs-keyword\">try</span>-<span class=\"hljs-keyword\">catch</span> 블록 및 오류 처리 전략 구현하기\n\n\n\n코드 예시:\n\n## 오류 처리:\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">0</span>;\n} <span class=\"hljs-keyword\">catch</span> (error) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error); <span class=\"hljs-comment\">// \"Error: Division by zero\"이 출력됩니다.</span>\n}\n\n\n\n# 디버깅:\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Hello'</span>); <span class=\"hljs-comment\">// \"Hello\"를 출력합니다</span>\n<span class=\"hljs-keyword\">debugger</span>; <span class=\"hljs-comment\">// 실행을 일시 중단하고 DevTools를 엽니다</span>\n\n# <span class=\"hljs-number\">9.</span> <span class=\"hljs-title class_\">JavaScript</span> <span class=\"hljs-title class_\">Best</span> <span class=\"hljs-title class_\">Practices</span> and <span class=\"hljs-title class_\">Code</span> <span class=\"hljs-title class_\">Organization</span>\n\n\n\n깨끗하고 유지보수 가능한 코드를 작성하기 위해 최상의 관행을 따르고 코드베이스를 조직화하세요:\n\n- 모듈식 코드와 임포트 사용\n- 네이밍 규칙과 코딩 표준 준수\n- 코드 분할과 트리 쉐이킹 구현\n\n코드 예시:\n\n\n# 모듈식 코드:\n\n\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-comment\">// greet.js</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`안녕, <span class=\"hljs-subst\">${name}</span>!`</span>);\n}\n<span class=\"hljs-keyword\">export</span> { greet };\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> { greet } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./greet.js'</span>;\n<span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-string\">'John'</span>); <span class=\"hljs-comment\">// 출력 결과: \"안녕, John!\"</span>\n\n\n\n# 네이밍 규칙 및 코딩 표준:\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-comment\">// 일관된 네이밍 규칙을 따르세요</span>\n<span class=\"hljs-keyword\">let</span> firstName = <span class=\"hljs-string\">'John'</span>;\n<span class=\"hljs-keyword\">let</span> lastName = <span class=\"hljs-string\">'Doe'</span>;\n\n<span class=\"hljs-comment\">// 일관된 들여쓰기와 공백을 사용하세요</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Hello'</span>);\n}\n\n\n\n# 코드 분할과 트리 쉐이킹:\n\n자바스크립트\n\n<span class=\"hljs-comment\">// Webpack 또는 Rollup을 사용하여 코드를 작은 조각으로 분할하고</span>\n<span class=\"hljs-comment\">// 사용하지 않는 코드를 제거하세요 (트리 쉐이킹)</span>\n\n# <span class=\"hljs-number\">10.</span> 브라우저 호환성 및 웹 표준\n\n\n\n여러 브라우저에서 코드가 작동하도록 보장하고 웹 표준을 따르세요:\n\n- 브라우저의 특이점과 불일치를 이해하세요\n- 기능 감지와 폴리필 사용하기\n- 웹 표준과 접근성 가이드라인 준수하기\n\n코드 예시:\n\n\n# 기능 감지:\n\n\n\n\n자바스크립트\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">addEventListener</span> === <span class=\"hljs-string\">'function'</span>) {\n  <span class=\"hljs-comment\">// 이벤트 리스너 추가</span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// 대체 방법 사용</span>\n}\n\n## 폴리필:\n\n자바스크립트\n\n\n\n<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">includes</span>) {\n  <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">includes</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">searchElement</span>) {\n    <span class=\"hljs-comment\">// Polyfill 구현</span>\n  };\n}\n\n# 웹 표준과 접근성:\n\n<span class=\"hljs-title class_\">JavaScript</span>\n\n<span class=\"hljs-comment\">// 시맨틱 HTML 요소 사용</span>\n&#x3C;header>헤더&#x3C;/header>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>네비게이션<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>주요 콘텐츠<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n\n\n\n<span class=\"hljs-comment\">// 접근성을 위해 ARIA 속성을 사용하세요</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">\"제출\"</span>></span>제출<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n\n추가 자료\n\n- <span class=\"hljs-variable constant_\">MDN</span> <span class=\"hljs-title class_\">Web</span> <span class=\"hljs-title class_\">Docs</span>: <span class=\"hljs-title class_\">JavaScript</span> 문서 및 튜토리얼에 대한 포괄적인 자료\n- <span class=\"hljs-attr\">W3Schools</span>: 웹 개발 튜토리얼 및 참고 자료가 있는 인기 있는 웹사이트\n- <span class=\"hljs-title class_\">JavaScript</span> <span class=\"hljs-title class_\">Subreddit</span>: <span class=\"hljs-title class_\">JavaScript</span>와 웹 개발에 대한 토론을 하는 커뮤니티 주도 포럼\n- <span class=\"hljs-title class_\">Udemy</span> 및 <span class=\"hljs-title class_\">Coursera</span> 강좌: <span class=\"hljs-title class_\">JavaScript</span>와 웹 개발 학습을 위한 온라인 강좌 및 튜토리얼\n\n# 결론\n\n\n\n\n자바스크립트의 기본을 완벽히 이해하는 것은 견고하고 확장 가능하며 유지보수가 쉬운 웹 애플리케이션을 구축하는 데 중요합니다. 이 블로그 포스트에서 다루는 주요 주제를 이해하면 더 고급 개념과 <span class=\"hljs-title class_\">React</span>, <span class=\"hljs-title class_\">Angular</span>, <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\">js</span>와 같은 프레임워크에 대처할 준비가됩니다. 유능한 자바스크립트 개발자로 발전하기 위해 연습하고 실험하며 계속 학습해야합니다. 즐겨 코딩하세요!\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}