{"pageProps":{"post":{"title":"React에서 Flask와 Jinja를 사용하여 동적 OpenGraph 태그 가져오는 방법","description":"","date":"2024-06-22 14:28","slug":"2024-06-22-UsingFlaskandJinjatogetdynamicOpenGraphTagsinReact","content":"\n\n# 플라스크와 진자를 사용하는 이유\n\n리액트는 동적이고 클라이언트 측 응용 프로그램을 구축하는 데 탁월하지만, 기본적으로는 OG 태그의 서버 측 렌더링을 지원하지 않습니다. 백엔드 API로 플라스크를 사용하면 진자 템플릿을 활용하여 이러한 태그를 서버 측에서 렌더링한 다음 리액트 애플리케이션을 제공할 수 있습니다.\n\n# 필수 조건\n\n시작하기 전에 다음이 설치되어 있는지 확인하세요:\n\n<div class=\"content-ad\"></div>\n\n- Python\n- Flask\n- React\n- Node.js 그리고 npm/yarn\n\n# Flask 설정하기\n\n먼저, 기본 Flask 서버를 설정해 봅시다. 프로젝트용 새 디렉토리를 만들고 해당 디렉토리로 이동합니다. 그런 다음 가상 환경을 만들고 Flask를 설치합니다.\n\n```bash\nmkdir flask-react-og\ncd flask-react-og\npython -m venv venv\nsource venv/bin/activate\npip install Flask\n```\n\n<div class=\"content-ad\"></div>\n\n친구야, Markdown 형식으로 테이블 태그를 변경해주세요.\n\n\n| Change the table tag to Markdown format. |\n\n\n<div class=\"content-ad\"></div>\n\n이제 우리 애플리케이션의 React 부분을 설정해 봅시다. 프로젝트 디렉토리 내에서 새로운 React 앱을 초기화하세요.\n\n```js\nnpx create-react-app client\ncd client\n```\n\n# Jinja로 index.html 편집\n\nReact 폴더에서 index.html을 열어 `head` 요소에 아래 내용을 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n\n# Build the React app\n\n```js\nnpm run build\n```\n\nMove the build files to the static directory in your Flask project.\n\n\n<div class=\"content-ad\"></div>\n\n```js\ncd ..\nmkdir static\ncp -r client/build/* static/\n```\n\n# Flask로 React 서비스하기\n\nReact 앱을 위한 정적 파일을 서빙하고 라우팅을 처리하기 위해 app.py를 수정하세요:\n\n```js\nfrom flask import Flask, render_template, send_from_directory\n\napp = Flask(__name__, static_folder='static')\n\n@app.route('/')\ndef home():\n    og_data = {\n        \"title\": \"당신의 React 앱\",\n        \"description\": \"동적 OG 태그를 갖춘 멋진 React 어플리케이션입니다.\",\n        \"url\": \"http://yourdomain.com\",\n        \"image\": \"http://yourdomain.com/image.jpg\"\n    }\n    return render_template('index.html', og_data=og_data)\n\n@app.route('/<path:path>')\ndef static_proxy(path):\n    return send_from_directory(app.static_folder, path)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n<div class=\"content-ad\"></div>\n\n# 설정 테스트 중입니다\n\nFlask 서버를 시작하세요:\n\n```js\nflask run\n```\n\n브라우저를 열고 http://localhost:5000 으로 이동하세요. 그러면 HTML 헤드에 렌더링된 OG 태그가 있는 React 애플리케이션을 볼 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\nFlask, Jinja, 그리고 React를 결합하여 애플리케이션을 위해 OG 태그를 동적으로 생성할 수 있습니다. 이를 통해 소셜 미디어 플랫폼에서 공유될 때 SEO 친화적 미리보기를 동적으로 생성할 수 있습니다. 즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-06-22-UsingFlaskandJinjatogetdynamicOpenGraphTagsinReact_0.png"},"coverImage":"/assets/img/2024-06-22-UsingFlaskandJinjatogetdynamicOpenGraphTagsinReact_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>플라스크와 진자를 사용하는 이유</h1>\n<p>리액트는 동적이고 클라이언트 측 응용 프로그램을 구축하는 데 탁월하지만, 기본적으로는 OG 태그의 서버 측 렌더링을 지원하지 않습니다. 백엔드 API로 플라스크를 사용하면 진자 템플릿을 활용하여 이러한 태그를 서버 측에서 렌더링한 다음 리액트 애플리케이션을 제공할 수 있습니다.</p>\n<h1>필수 조건</h1>\n<p>시작하기 전에 다음이 설치되어 있는지 확인하세요:</p>\n<ul>\n<li>Python</li>\n<li>Flask</li>\n<li>React</li>\n<li>Node.js 그리고 npm/yarn</li>\n</ul>\n<h1>Flask 설정하기</h1>\n<p>먼저, 기본 Flask 서버를 설정해 봅시다. 프로젝트용 새 디렉토리를 만들고 해당 디렉토리로 이동합니다. 그런 다음 가상 환경을 만들고 Flask를 설치합니다.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> flask-react-og\n<span class=\"hljs-built_in\">cd</span> flask-react-og\npython -m venv venv\n<span class=\"hljs-built_in\">source</span> venv/bin/activate\npip install Flask\n</code></pre>\n<p>친구야, Markdown 형식으로 테이블 태그를 변경해주세요.</p>\n<p>| Change the table tag to Markdown format. |</p>\n<p>이제 우리 애플리케이션의 React 부분을 설정해 봅시다. 프로젝트 디렉토리 내에서 새로운 React 앱을 초기화하세요.</p>\n<pre><code class=\"hljs language-js\">npx create-react-app client\ncd client\n</code></pre>\n<h1>Jinja로 index.html 편집</h1>\n<p>React 폴더에서 index.html을 열어 <code>head</code> 요소에 아래 내용을 추가하세요:</p>\n<h1>Build the React app</h1>\n<pre><code class=\"hljs language-js\">npm run build\n</code></pre>\n<p>Move the build files to the static directory in your Flask project.</p>\n<pre><code class=\"hljs language-js\">cd ..\nmkdir <span class=\"hljs-keyword\">static</span>\ncp -r client/build<span class=\"hljs-comment\">/* static/\n</span></code></pre>\n<h1>Flask로 React 서비스하기</h1>\n<p>React 앱을 위한 정적 파일을 서빙하고 라우팅을 처리하기 위해 app.py를 수정하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Flask</span>, render_template, send_from_directory\n\napp = <span class=\"hljs-title class_\">Flask</span>(__name__, static_folder=<span class=\"hljs-string\">'static'</span>)\n\n@app.<span class=\"hljs-title function_\">route</span>(<span class=\"hljs-string\">'/'</span>)\ndef <span class=\"hljs-title function_\">home</span>():\n    og_data = {\n        <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"당신의 React 앱\"</span>,\n        <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"동적 OG 태그를 갖춘 멋진 React 어플리케이션입니다.\"</span>,\n        <span class=\"hljs-string\">\"url\"</span>: <span class=\"hljs-string\">\"http://yourdomain.com\"</span>,\n        <span class=\"hljs-string\">\"image\"</span>: <span class=\"hljs-string\">\"http://yourdomain.com/image.jpg\"</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">render_template</span>(<span class=\"hljs-string\">'index.html'</span>, og_data=og_data)\n\n@app.<span class=\"hljs-title function_\">route</span>(<span class=\"hljs-string\">'/&#x3C;path:path>'</span>)\ndef <span class=\"hljs-title function_\">static_proxy</span>(path):\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">send_from_directory</span>(app.<span class=\"hljs-property\">static_folder</span>, path)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.<span class=\"hljs-title function_\">run</span>(debug=<span class=\"hljs-title class_\">True</span>)\n</code></pre>\n<h1>설정 테스트 중입니다</h1>\n<p>Flask 서버를 시작하세요:</p>\n<pre><code class=\"hljs language-js\">flask run\n</code></pre>\n<p>브라우저를 열고 <a href=\"http://localhost:5000\" rel=\"nofollow\" target=\"_blank\">http://localhost:5000</a> 으로 이동하세요. 그러면 HTML 헤드에 렌더링된 OG 태그가 있는 React 애플리케이션을 볼 수 있어요.</p>\n<h1>결론</h1>\n<p>Flask, Jinja, 그리고 React를 결합하여 애플리케이션을 위해 OG 태그를 동적으로 생성할 수 있습니다. 이를 통해 소셜 미디어 플랫폼에서 공유될 때 SEO 친화적 미리보기를 동적으로 생성할 수 있습니다. 즐거운 코딩하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}