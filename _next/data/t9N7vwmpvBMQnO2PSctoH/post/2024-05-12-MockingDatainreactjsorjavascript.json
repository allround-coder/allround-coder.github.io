{"pageProps":{"post":{"title":"리액트 JS 또는 자바스크립트에서 데이터 가짜로 만들어 사용하기","description":"","date":"2024-05-12 23:23","slug":"2024-05-12-MockingDatainreactjsorjavascript","content":"\n\n- React.js나 JavaScript에서 모킹 데이터는 개발이나 테스트 중에 API나 백엔드 서비스로부터의 응답을 시뮬레이션하기 위해 가짜 데이터를 생성하는 것을 의미합니다.\n- 이를 통해 백엔드에 독립적으로 프론트 엔드 애플리케이션을 개발하고 테스트할 수 있습니다. 서버가 실제로 반환한 데이터와 상관없이 UI 컴포넌트가 예상대로 작동하는지 확인할 수 있습니다.\n\n다음은 React.js나 JavaScript에서 모킹 데이터를 하는 일반적인 방법 몇 가지입니다:\n\n- 하드코딩된 데이터: 코드 내에서 모의 데이터를 직접 정의합니다. 작은 데이터 세트나 정적 콘텐츠의 경우 특히 간단한 방법입니다.\n\n```js\nconst mockData = [\n  { id: 1, name: 'John Doe', age: 30 },\n  { id: 2, name: 'Jane Smith', age: 25 },\n  // 기타 모킹 데이터...\n];\n```\n\n\n\n2. JSON 파일: 모의 데이터를 JSON 파일에 저장하고 필요할 때 코드로 가져옵니다. 이렇게 하면 모의 데이터를 코드베이스와 별도로 구성하고 관리할 수 있습니다.\n\n```js\n// mockData.json\n[\n  { \"id\": 1, \"name\": \"John Doe\", \"age\": 30 },\n  { \"id\": 2, \"name\": \"Jane Smith\", \"age\": 25 }\n  // 더 많은 모의 데이터...\n]\n```\n\n- `./mockData.json`에서 mockData를 가져옵니다;\n\n모의 라이브러리: faker.js 또는 mockjs와 같이 데이터를 모의하는 데 특별히 설계된 라이브러리를 사용하십시오. 이러한 라이브러리는 미리 정의된 스키마나 템플릿에 따라 랜덤하거나 현실적으로 보이는 모의 데이터를 생성합니다.\n\n\n\n```js\n// Using faker.js\nimport faker from 'faker';\n\nconst mockData = Array.from({ length: 10 }, () => ({\n  id: faker.datatype.uuid(),\n  name: faker.name.findName(),\n  age: faker.datatype.number({ min: 18, max: 100 })\n}));\n```\n\n4. API 모킹: 만일 당신의 애플리케이션이 API와 통신한다면, axios-mock-adapter나 msw (Mock Service Worker)와 같은 도구를 사용하여 API 응답을 모킹할 수 있습니다. 이러한 도구들은 HTTP 요청을 가로채 미리 정의된 응답을 반환함으로써 다양한 시나리오와 예외 상황을 시뮬레이션할 수 있게 합니다.\n\n```js\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nconst mock = new MockAdapter(axios);\n\nmock.onGet('/users').reply(200, [\n  { id: 1, name: 'John Doe', age: 30 },\n  { id: 2, name: 'Jane Smith', age: 25 }\n  // 더 많은 모킹 데이터...\n]);\n```\n\n이것들은 React.js나 JavaScript에서 데이터를 모킹하는 방법의 일부 예시일 뿐입니다. 선택하는 접근 방식은 특정 사용 사례, 기호 및 애플리케이션의 복잡성에 따라 다릅니다. 데이터 모킹은 효과적인 개발과 테스트를 위해 필수적이며, 애플리케이션의 각 부분을 독립적으로 분리하고 유효성을 검사할 수 있도록 합니다.","ogImage":{"url":"/assets/img/2024-05-12-MockingDatainreactjsorjavascript_0.png"},"coverImage":"/assets/img/2024-05-12-MockingDatainreactjsorjavascript_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<ul>\n<li>React.js나 JavaScript에서 모킹 데이터는 개발이나 테스트 중에 API나 백엔드 서비스로부터의 응답을 시뮬레이션하기 위해 가짜 데이터를 생성하는 것을 의미합니다.</li>\n<li>이를 통해 백엔드에 독립적으로 프론트 엔드 애플리케이션을 개발하고 테스트할 수 있습니다. 서버가 실제로 반환한 데이터와 상관없이 UI 컴포넌트가 예상대로 작동하는지 확인할 수 있습니다.</li>\n</ul>\n<p>다음은 React.js나 JavaScript에서 모킹 데이터를 하는 일반적인 방법 몇 가지입니다:</p>\n<ul>\n<li>하드코딩된 데이터: 코드 내에서 모의 데이터를 직접 정의합니다. 작은 데이터 세트나 정적 콘텐츠의 경우 특히 간단한 방법입니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> mockData = [\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'John Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Jane Smith'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> },\n  <span class=\"hljs-comment\">// 기타 모킹 데이터...</span>\n];\n</code></pre>\n<ol start=\"2\">\n<li>JSON 파일: 모의 데이터를 JSON 파일에 저장하고 필요할 때 코드로 가져옵니다. 이렇게 하면 모의 데이터를 코드베이스와 별도로 구성하고 관리할 수 있습니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// mockData.json</span>\n[\n  { <span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"John Doe\"</span>, <span class=\"hljs-string\">\"age\"</span>: <span class=\"hljs-number\">30</span> },\n  { <span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Jane Smith\"</span>, <span class=\"hljs-string\">\"age\"</span>: <span class=\"hljs-number\">25</span> }\n  <span class=\"hljs-comment\">// 더 많은 모의 데이터...</span>\n]\n</code></pre>\n<ul>\n<li><code>./mockData.json</code>에서 mockData를 가져옵니다;</li>\n</ul>\n<p>모의 라이브러리: faker.js 또는 mockjs와 같이 데이터를 모의하는 데 특별히 설계된 라이브러리를 사용하십시오. 이러한 라이브러리는 미리 정의된 스키마나 템플릿에 따라 랜덤하거나 현실적으로 보이는 모의 데이터를 생성합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Using faker.js</span>\n<span class=\"hljs-keyword\">import</span> faker <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'faker'</span>;\n\n<span class=\"hljs-keyword\">const</span> mockData = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>({ <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">10</span> }, <span class=\"hljs-function\">() =></span> ({\n  <span class=\"hljs-attr\">id</span>: faker.<span class=\"hljs-property\">datatype</span>.<span class=\"hljs-title function_\">uuid</span>(),\n  <span class=\"hljs-attr\">name</span>: faker.<span class=\"hljs-property\">name</span>.<span class=\"hljs-title function_\">findName</span>(),\n  <span class=\"hljs-attr\">age</span>: faker.<span class=\"hljs-property\">datatype</span>.<span class=\"hljs-title function_\">number</span>({ <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">18</span>, <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">100</span> })\n}));\n</code></pre>\n<ol start=\"4\">\n<li>API 모킹: 만일 당신의 애플리케이션이 API와 통신한다면, axios-mock-adapter나 msw (Mock Service Worker)와 같은 도구를 사용하여 API 응답을 모킹할 수 있습니다. 이러한 도구들은 HTTP 요청을 가로채 미리 정의된 응답을 반환함으로써 다양한 시나리오와 예외 상황을 시뮬레이션할 수 있게 합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MockAdapter</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios-mock-adapter'</span>;\n\n<span class=\"hljs-keyword\">const</span> mock = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MockAdapter</span>(axios);\n\nmock.<span class=\"hljs-title function_\">onGet</span>(<span class=\"hljs-string\">'/users'</span>).<span class=\"hljs-title function_\">reply</span>(<span class=\"hljs-number\">200</span>, [\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'John Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Jane Smith'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> }\n  <span class=\"hljs-comment\">// 더 많은 모킹 데이터...</span>\n]);\n</code></pre>\n<p>이것들은 React.js나 JavaScript에서 데이터를 모킹하는 방법의 일부 예시일 뿐입니다. 선택하는 접근 방식은 특정 사용 사례, 기호 및 애플리케이션의 복잡성에 따라 다릅니다. 데이터 모킹은 효과적인 개발과 테스트를 위해 필수적이며, 애플리케이션의 각 부분을 독립적으로 분리하고 유효성을 검사할 수 있도록 합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}