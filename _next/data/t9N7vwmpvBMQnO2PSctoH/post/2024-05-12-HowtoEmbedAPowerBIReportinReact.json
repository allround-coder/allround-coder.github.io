{"pageProps":{"post":{"title":"React에 Power BI 보고서를 임베드하는 방법","description":"","date":"2024-05-12 20:38","slug":"2024-05-12-HowtoEmbedAPowerBIReportinReact","content":"\n\n<img src=\"/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_0.png\" />\n\n이 기사에서는 React 애플리케이션에 Power BI 보고서를 임베드하고 Power BI 보고서에 필터를 적용하는 다양한 방법에 대해 설명합니다.\n\nPower BI 보고서를 React 앱에 통합하는 것은 꽤 간단합니다. 몇 가지 단계를 따르기만 하면 됩니다. 또한 코드를 통해 Power BI 보고서에 필터를 추가하거나 제거하거나 사용자 정의할 수도 있습니다.\n\n# 어떻게 시작하나요?\n\n\n\n파워 BI 보고서를 React에 임베드하려면 두 가지 패키지를 설치해야 합니다:\n\n```js\nnpm i powerbi-client-react powerbi-client\n```\n\n그런 다음, 컴포넌트에서 아래와 같이 보고서를 임베드할 수 있습니다:\n\n```js\nimport { FC, useEffect, useState} from 'react';\nimport { models } from 'powerbi-client';\nimport { PowerBIEmbed } from 'powerbi-client-react';\n\nconst PowerBiPOC: FC = () => {\n  const [reportConfig, setReportConfig] = useState<models.IReportEmbedConfiguration>({\n    type: 'report',\n    embedUrl: undefined,\n    accessToken: undefined,\n    id: undefined,\n    tokenType: models.TokenType.Embed,\n    settings: {\n      panes: {\n        filters: {\n          expanded: false,\n          visible: true\n        }\n      },\n      background: models.BackgroundType.Transparent,\n    }\n  });\n  useEffect(() => {\n    axios.get('파워 BI 세부 정보를 가져오기 위한 API URL').then((response: any) => {\n      setReportConfig({\n        ...reportConfig,\n        embedUrl: response.value.embedUrl,\n        accessToken: response.value.token,\n        id: response.value.id\n      });\n    })\n  }, []);\n  return (<>\n    <div>\n      <PowerBIEmbed\n        embedConfig={reportConfig}\n        cssClassName='power-bi-report-class'\n      />\n    </div>\n  </>)\n}\nexport default PowerBiPOC;\n```\n\n\n\n위의 코드 스니펫을 보면 코드가 작동하려면 임베드 토큰, 임베드 URL 및 보고서 ID가 필요합니다. 이를 위해 3단계를 따라야 합니다:\n\n## 단계 1:\n\n$'tenant-id'의 테넌트 ID를 사용하여 https://login.microsoftonline.com/oauth2/tokenAPI로 POST 요청을 보냅니다. 응용 프로그램의 client_id, client_secret, resource 및 grant_type을 이 API로 페이로드로 전달해야 합니다. 아래와 같이 보내야 합니다: \n\n![이미지](/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_1.png)\n\n\n\nStep 2:\n\n다음 단계에서 필요한 액세스 토큰을 반환합니다.\n\n## 단계 2:\n\nhttps://api.powerbi.com/v1.0/myorg/groups/$'작업영역-id'/reportsAPI로 GET 요청을 보냅니다. 이전 단계에서 받은 bearer 액세스 토큰을 사용하고, 이 API에서 당신의 보고서에 대한 아래 세부 정보를 응답으로 받을 수 있습니다.\n\n```js\n\"value\": [\n  {\n      \"Id\": 다음 단계 및 React 코드에서 필요한 보고서 ID,\n      \"reportType\": \"PowerBIReport\",\n      \"name\": 보고서 이름,\n      \"webUrl\": 보고서 URL,\n      \"embedUrl\": React 코드에서 필요한 임베드 URL,\n      \"isFromPbix\": true,\n      \"isOwnedByMe\": true,\n      \"datasetId\": 다음 단계에서 필요한 데이터 세트 ID,\n      \"datasetWorkspaceId\": “\",\n      \"users\": [],\n      \"subscriptions\": []\n  }\n]\n```\n\n\n\n## 단계 3:\n\n임베드 액세스 토큰을 얻으려면 https://api.powerbi.com/v1.0/myorg/GenerateTokenAPI 로 POST 요청을 보내야 합니다. 단계 1에서 얻은 베어러 엑세스 토큰을 사용해야 하며, 요청 페이로드는 다음과 같이 보일 것입니다:\n\n```js\n{\n  \"datasets\": [\n    {\n    \"id\" : \"\"\n    }\n  ],\n  \"reports\": [\n    {\n    \"id\": \"\"\n    }\n  ]\n}\n```\n\n보고서와 데이터셋 ID가 있는 객체를 위해 이전 단계에서 데이터셋과 보고서 ID를 복사하여 여기에 사용하세요. 여러 개의 ID를 전달하고, 그런 다음 동일한 임베드 토큰을 사용하여 UI에서 모든 보고서에 액세스할 수 있습니다.\n\n\n\nAPI로부터 토큰 및 토큰 ID를 받게 됩니다.\n\n이제 필요한 모든 데이터를 가지고 있으니, 다음을 API 응답으로 제공해주세요:\n\n- 임베드 URL: 단계 2에서 받은 URL\n- ID: 보고서 ID, 단계 2에서 받은 것\n- 임베드 토큰: 단계 3에서 받은 토큰\n\n만세, 보고서가 성공적으로 UI에 임베드되었습니다 🙂.\n\n\n\n# Power BI 보고서에 필터를 추가하는 방법\n\nPower BI 보고서에 필터를 추가하고 싶다면 세 가지 방법으로 할 수 있어요:\n\n## 1: 쿼리 매개변수 사용\n\n임베드 URL을 설정할 때 아래와 같이 필터를 전달할 수 있어요:\n\n\n\n```js\nembedUrl: `${response.value.embedUrl}&filter=${table_name}/${table_coloumn} eq ${filter_value}`,\n```\n\n내장 URL 뒤에 &filter=을 추가하세요. 걸러내고 싶은 테이블 이름, 그 다음 테이블 열 이름, 연산자, 마지막으로 필터 값까지 전달하세요.\n\nand연산자를 사용하여 여러 필터를 전달할 수도 있습니다:\n\n```js\n&filter=State/State eq 'MH' and Customer/Age in (30,35)\n```\n\n\n\n여러분의 사용에 따라 아래 표에 표시된 것처럼 여러 개의 필터 연산자를 사용할 수 있습니다:\n\n![표](/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_2.png)\n\n## 2: 설정 객체에 필터 전달\n\n아래에 표시된대로 설정 객체에 필터를 전달할 수 있습니다.\n\n\n\n위는 주요 필터 예제이지만, 다른 종류의 필터도 있습니다. 공식 문서 사이트에서 확인할 수 있습니다.\n\n## 3: 내장 함수나 메소드 사용하기\n\n아래 코드에 getEmbeddedComponent와 eventHandlers를 추가하세요:\n\n\n\n```js\n<PowerBIEmbed\n  embedConfig = {reportConfig}\n  cssClassName = 'power-bi-report-height'\n  eventHandlers={eventHandlersMap}\n  getEmbeddedComponent={(embedObject) => {\n    window.report = embedObject;\n  }\n/>\n```\n\ngetEmbeddedComponent 함수를 통해 보고서 개체에 액세스할 수 있으며, 이를 통해 필터를 추가, 제거 또는 업데이트할 수 있습니다.\n\neventHandlers를 사용하여 Power BI 보고서의 다양한 이벤트에 액세스할 수 있습니다.\n\n허용된 이벤트는 다음과 같습니다:-\n\n\n\n\n```js\n[\n  \"로드됨\",\n  \"저장됨\",\n  \"렌더링됨\",\n  \"saveAsTriggered\",\n  \"에러\",\n  \"데이터 선택됨\",\n  \"버튼 클릭됨\",\n  \"정보\",\n  \"필터 적용됨\",\n  \"페이지 변경됨\",\n  \"명령 트리거됨\",\n  \"스와이프 시작\",\n  \"스와이프 끝\",\n  \"북마크 적용됨\",\n  \"데이터 하이퍼링크 클릭됨\",\n  \"비주얼 렌더링됨\",\n  \"비주얼 클릭됨\",\n  \"선택 변경됨\",\n  \"렌더링 시작됨\",\n  \"흐림\"\n]\n```\n\n아래 코드 스니펫에 표시된대로 이벤트 핸들러를 사용할 수 있습니다:\n\n```js\nconst eventHandlersMap = new Map([\n    [\n      '로드됨',\n      function () {\n          console.log('보고서가 로드되었습니다', window.report);\n      }\n    ],\n    [\n      '렌더링됨',\n      function () {\n        console.log('보고서가 렌더링되었습니다', window.report);\n      }\n    ],\n    [\n      '에러',\n      function (event: any) {\n        if (event) {\n          console.error(event.detail);\n        }\n      }\n    ]\n  ]);\n```\n\n고객님의 시나리오와 사용 방법에 따라 다양한 이벤트 핸들러를 사용할 수 있습니다. 이 예시에서는 로드된 이벤트만 사용할 것입니다.\n\n\n\n지금, 보고서에 현재 적용된 모든 필터를 얻고 싶다면 getFilters() 메소드를 사용하세요:\n\n```js\n[\n  '로드된',\n    async function () {\n     const filters = await window.report.getFilters();\n        console.log('보고서가 로드되었습니다', window.report, filters );\n    }\n],\n```\n\n콘솔에서 보고서에 적용된 모든 필터의 객체 배열을 얻을 수 있습니다:\n\n```js\n[\n    {\n        \"$schema\": \"http://powerbi.com/product/schema#basic\",\n        \"target\": {\n            \"table\": 테이블_이름,\n            \"column\": 테이블_열\n        },\n        \"filterType\": 1,\n        \"displaySettings\": {\n            \"isLockedInViewMode\": true\n        },\n        \"operator\": \"In\",\n        \"values\": [\n            필터_값\n        ],\n        \"requireSingleSelection\": false\n    }\n]\n```\n\n\n\n보고서에 적용된 모든 필터를 제거하거나 새 필터를 추가하는 데 updateFilters() 메서드를 사용할 수 있어요:\n\n```js\n[\n  'loaded',\n      async function () {\n        await  window.report.updateFilters(models.FiltersOperations.RemoveAll);\n        console.log('Report has loaded', window.report);\n      }\n],\n```\n\n```js\n[\n      'loaded',\n      async function () {\n        const filtersArray = [\n          {\n            $schema: 'http://powerbi.com/product/schema#basic',\n            target: {\n              Table: table_name,\n              Column: table_column\n            },\n            operator: 'In',\n            values: [ filter_value ],\n            filterType: models.FilterType.Basic,\n            requireSingleSelection: true\n          }\n        ];\n        await window.report.updateFilters(\n          models.FiltersOperations.Add,\n          filtersArray\n        );\n        console.log('Report has loaded', window.report);\n      }\n],\n```\n\n그러니 이제 Power BI 임베드 보고서를 위해 애플리케이션에 필터를 추가, 업데이트, 제거하는 세 가지 서로 다른 방법을 알게 되었어요.\n\n\n\n# 결론\n\n이 글에서 React 애플리케이션에 Power BI 보고서를 임베드하는 절차를 설명했습니다.\n\n웹 및 API 측면에 변경을 마친 후 애플리케이션을 실행하고 보고서를 확인해보세요.\n\n질문이 있거나 인사이트를 공유하고 싶다면 언제든지 댓글 섹션에 남겨주세요. 감사합니다!","ogImage":{"url":"/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_0.png"},"coverImage":"/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 기사에서는 React 애플리케이션에 Power BI 보고서를 임베드하고 Power BI 보고서에 필터를 적용하는 다양한 방법에 대해 설명합니다.</p>\n<p>Power BI 보고서를 React 앱에 통합하는 것은 꽤 간단합니다. 몇 가지 단계를 따르기만 하면 됩니다. 또한 코드를 통해 Power BI 보고서에 필터를 추가하거나 제거하거나 사용자 정의할 수도 있습니다.</p>\n<h1>어떻게 시작하나요?</h1>\n<p>파워 BI 보고서를 React에 임베드하려면 두 가지 패키지를 설치해야 합니다:</p>\n<pre><code class=\"hljs language-js\">npm i powerbi-client-react powerbi-client\n</code></pre>\n<p>그런 다음, 컴포넌트에서 아래와 같이 보고서를 임베드할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">FC</span>, useEffect, useState} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { models } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'powerbi-client'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">PowerBIEmbed</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'powerbi-client-react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">PowerBiPOC</span>: <span class=\"hljs-variable constant_\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">const</span> [reportConfig, setReportConfig] = useState&#x3C;models.<span class=\"hljs-property\">IReportEmbedConfiguration</span>>({\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'report'</span>,\n    <span class=\"hljs-attr\">embedUrl</span>: <span class=\"hljs-literal\">undefined</span>,\n    <span class=\"hljs-attr\">accessToken</span>: <span class=\"hljs-literal\">undefined</span>,\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-literal\">undefined</span>,\n    <span class=\"hljs-attr\">tokenType</span>: models.<span class=\"hljs-property\">TokenType</span>.<span class=\"hljs-property\">Embed</span>,\n    <span class=\"hljs-attr\">settings</span>: {\n      <span class=\"hljs-attr\">panes</span>: {\n        <span class=\"hljs-attr\">filters</span>: {\n          <span class=\"hljs-attr\">expanded</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">visible</span>: <span class=\"hljs-literal\">true</span>\n        }\n      },\n      <span class=\"hljs-attr\">background</span>: models.<span class=\"hljs-property\">BackgroundType</span>.<span class=\"hljs-property\">Transparent</span>,\n    }\n  });\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'파워 BI 세부 정보를 가져오기 위한 API URL'</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response: any</span>) =></span> {\n      <span class=\"hljs-title function_\">setReportConfig</span>({\n        ...reportConfig,\n        <span class=\"hljs-attr\">embedUrl</span>: response.<span class=\"hljs-property\">value</span>.<span class=\"hljs-property\">embedUrl</span>,\n        <span class=\"hljs-attr\">accessToken</span>: response.<span class=\"hljs-property\">value</span>.<span class=\"hljs-property\">token</span>,\n        <span class=\"hljs-attr\">id</span>: response.<span class=\"hljs-property\">value</span>.<span class=\"hljs-property\">id</span>\n      });\n    })\n  }, []);\n  <span class=\"hljs-keyword\">return</span> (<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">PowerBIEmbed</span>\n        <span class=\"hljs-attr\">embedConfig</span>=<span class=\"hljs-string\">{reportConfig}</span>\n        <span class=\"hljs-attr\">cssClassName</span>=<span class=\"hljs-string\">'power-bi-report-class'</span>\n      /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/></span></span>)\n}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">PowerBiPOC</span>;\n</code></pre>\n<p>위의 코드 스니펫을 보면 코드가 작동하려면 임베드 토큰, 임베드 URL 및 보고서 ID가 필요합니다. 이를 위해 3단계를 따라야 합니다:</p>\n<h2>단계 1:</h2>\n<p>$'tenant-id'의 테넌트 ID를 사용하여 <a href=\"https://login.microsoftonline.com/oauth2/tokenAPI%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">https://login.microsoftonline.com/oauth2/tokenAPI로</a> POST 요청을 보냅니다. 응용 프로그램의 client_id, client_secret, resource 및 grant_type을 이 API로 페이로드로 전달해야 합니다. 아래와 같이 보내야 합니다:</p>\n<p><img src=\"/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_1.png\" alt=\"이미지\"></p>\n<p>Step 2:</p>\n<p>다음 단계에서 필요한 액세스 토큰을 반환합니다.</p>\n<h2>단계 2:</h2>\n<p><a href=\"https://api.powerbi.com/v1.0/myorg/groups/$&#x27;%EC%9E%91%EC%97%85%EC%98%81%EC%97%AD-id&#x27;/reportsAPI%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">https://api.powerbi.com/v1.0/myorg/groups/$'작업영역-id'/reportsAPI로</a> GET 요청을 보냅니다. 이전 단계에서 받은 bearer 액세스 토큰을 사용하고, 이 API에서 당신의 보고서에 대한 아래 세부 정보를 응답으로 받을 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value\"</span>: [\n  {\n      <span class=\"hljs-string\">\"Id\"</span>: 다음 단계 및 <span class=\"hljs-title class_\">React</span> 코드에서 필요한 보고서 <span class=\"hljs-variable constant_\">ID</span>,\n      <span class=\"hljs-string\">\"reportType\"</span>: <span class=\"hljs-string\">\"PowerBIReport\"</span>,\n      <span class=\"hljs-string\">\"name\"</span>: 보고서 이름,\n      <span class=\"hljs-string\">\"webUrl\"</span>: 보고서 <span class=\"hljs-variable constant_\">URL</span>,\n      <span class=\"hljs-string\">\"embedUrl\"</span>: <span class=\"hljs-title class_\">React</span> 코드에서 필요한 임베드 <span class=\"hljs-variable constant_\">URL</span>,\n      <span class=\"hljs-string\">\"isFromPbix\"</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-string\">\"isOwnedByMe\"</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-string\">\"datasetId\"</span>: 다음 단계에서 필요한 데이터 세트 <span class=\"hljs-variable constant_\">ID</span>,\n      <span class=\"hljs-string\">\"datasetWorkspaceId\"</span>: “<span class=\"hljs-string\">\",\n      \"</span>users<span class=\"hljs-string\">\": [],\n      \"</span>subscriptions<span class=\"hljs-string\">\": []\n  }\n]\n</span></code></pre>\n<h2>단계 3:</h2>\n<p>임베드 액세스 토큰을 얻으려면 <a href=\"https://api.powerbi.com/v1.0/myorg/GenerateTokenAPI\" rel=\"nofollow\" target=\"_blank\">https://api.powerbi.com/v1.0/myorg/GenerateTokenAPI</a> 로 POST 요청을 보내야 합니다. 단계 1에서 얻은 베어러 엑세스 토큰을 사용해야 하며, 요청 페이로드는 다음과 같이 보일 것입니다:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"datasets\"</span>: [\n    {\n    <span class=\"hljs-string\">\"id\"</span> : <span class=\"hljs-string\">\"\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"reports\"</span>: [\n    {\n    <span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"\"</span>\n    }\n  ]\n}\n</code></pre>\n<p>보고서와 데이터셋 ID가 있는 객체를 위해 이전 단계에서 데이터셋과 보고서 ID를 복사하여 여기에 사용하세요. 여러 개의 ID를 전달하고, 그런 다음 동일한 임베드 토큰을 사용하여 UI에서 모든 보고서에 액세스할 수 있습니다.</p>\n<p>API로부터 토큰 및 토큰 ID를 받게 됩니다.</p>\n<p>이제 필요한 모든 데이터를 가지고 있으니, 다음을 API 응답으로 제공해주세요:</p>\n<ul>\n<li>임베드 URL: 단계 2에서 받은 URL</li>\n<li>ID: 보고서 ID, 단계 2에서 받은 것</li>\n<li>임베드 토큰: 단계 3에서 받은 토큰</li>\n</ul>\n<p>만세, 보고서가 성공적으로 UI에 임베드되었습니다 🙂.</p>\n<h1>Power BI 보고서에 필터를 추가하는 방법</h1>\n<p>Power BI 보고서에 필터를 추가하고 싶다면 세 가지 방법으로 할 수 있어요:</p>\n<h2>1: 쿼리 매개변수 사용</h2>\n<p>임베드 URL을 설정할 때 아래와 같이 필터를 전달할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">embedUrl</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${response.value.embedUrl}</span>&#x26;filter=<span class=\"hljs-subst\">${table_name}</span>/<span class=\"hljs-subst\">${table_coloumn}</span> eq <span class=\"hljs-subst\">${filter_value}</span>`</span>,\n</code></pre>\n<p>내장 URL 뒤에 &#x26;filter=을 추가하세요. 걸러내고 싶은 테이블 이름, 그 다음 테이블 열 이름, 연산자, 마지막으로 필터 값까지 전달하세요.</p>\n<p>and연산자를 사용하여 여러 필터를 전달할 수도 있습니다:</p>\n<pre><code class=\"hljs language-js\">&#x26;filter=<span class=\"hljs-title class_\">State</span>/<span class=\"hljs-title class_\">State</span> eq <span class=\"hljs-string\">'MH'</span> and <span class=\"hljs-title class_\">Customer</span>/<span class=\"hljs-title class_\">Age</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">35</span>)\n</code></pre>\n<p>여러분의 사용에 따라 아래 표에 표시된 것처럼 여러 개의 필터 연산자를 사용할 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_2.png\" alt=\"표\"></p>\n<h2>2: 설정 객체에 필터 전달</h2>\n<p>아래에 표시된대로 설정 객체에 필터를 전달할 수 있습니다.</p>\n<p>위는 주요 필터 예제이지만, 다른 종류의 필터도 있습니다. 공식 문서 사이트에서 확인할 수 있습니다.</p>\n<h2>3: 내장 함수나 메소드 사용하기</h2>\n<p>아래 코드에 getEmbeddedComponent와 eventHandlers를 추가하세요:</p>\n<pre><code class=\"hljs language-js\">&#x3C;<span class=\"hljs-title class_\">PowerBIEmbed</span>\n  embedConfig = {reportConfig}\n  cssClassName = <span class=\"hljs-string\">'power-bi-report-height'</span>\n  eventHandlers={eventHandlersMap}\n  getEmbeddedComponent={<span class=\"hljs-function\">(<span class=\"hljs-params\">embedObject</span>) =></span> {\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">report</span> = embedObject;\n  }\n/>\n</code></pre>\n<p>getEmbeddedComponent 함수를 통해 보고서 개체에 액세스할 수 있으며, 이를 통해 필터를 추가, 제거 또는 업데이트할 수 있습니다.</p>\n<p>eventHandlers를 사용하여 Power BI 보고서의 다양한 이벤트에 액세스할 수 있습니다.</p>\n<p>허용된 이벤트는 다음과 같습니다:-</p>\n<pre><code class=\"hljs language-js\">[\n  <span class=\"hljs-string\">\"로드됨\"</span>,\n  <span class=\"hljs-string\">\"저장됨\"</span>,\n  <span class=\"hljs-string\">\"렌더링됨\"</span>,\n  <span class=\"hljs-string\">\"saveAsTriggered\"</span>,\n  <span class=\"hljs-string\">\"에러\"</span>,\n  <span class=\"hljs-string\">\"데이터 선택됨\"</span>,\n  <span class=\"hljs-string\">\"버튼 클릭됨\"</span>,\n  <span class=\"hljs-string\">\"정보\"</span>,\n  <span class=\"hljs-string\">\"필터 적용됨\"</span>,\n  <span class=\"hljs-string\">\"페이지 변경됨\"</span>,\n  <span class=\"hljs-string\">\"명령 트리거됨\"</span>,\n  <span class=\"hljs-string\">\"스와이프 시작\"</span>,\n  <span class=\"hljs-string\">\"스와이프 끝\"</span>,\n  <span class=\"hljs-string\">\"북마크 적용됨\"</span>,\n  <span class=\"hljs-string\">\"데이터 하이퍼링크 클릭됨\"</span>,\n  <span class=\"hljs-string\">\"비주얼 렌더링됨\"</span>,\n  <span class=\"hljs-string\">\"비주얼 클릭됨\"</span>,\n  <span class=\"hljs-string\">\"선택 변경됨\"</span>,\n  <span class=\"hljs-string\">\"렌더링 시작됨\"</span>,\n  <span class=\"hljs-string\">\"흐림\"</span>\n]\n</code></pre>\n<p>아래 코드 스니펫에 표시된대로 이벤트 핸들러를 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> eventHandlersMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([\n    [\n      <span class=\"hljs-string\">'로드됨'</span>,\n      <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'보고서가 로드되었습니다'</span>, <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">report</span>);\n      }\n    ],\n    [\n      <span class=\"hljs-string\">'렌더링됨'</span>,\n      <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'보고서가 렌더링되었습니다'</span>, <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">report</span>);\n      }\n    ],\n    [\n      <span class=\"hljs-string\">'에러'</span>,\n      <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event: any</span>) {\n        <span class=\"hljs-keyword\">if</span> (event) {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(event.<span class=\"hljs-property\">detail</span>);\n        }\n      }\n    ]\n  ]);\n</code></pre>\n<p>고객님의 시나리오와 사용 방법에 따라 다양한 이벤트 핸들러를 사용할 수 있습니다. 이 예시에서는 로드된 이벤트만 사용할 것입니다.</p>\n<p>지금, 보고서에 현재 적용된 모든 필터를 얻고 싶다면 getFilters() 메소드를 사용하세요:</p>\n<pre><code class=\"hljs language-js\">[\n  <span class=\"hljs-string\">'로드된'</span>,\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n     <span class=\"hljs-keyword\">const</span> filters = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">report</span>.<span class=\"hljs-title function_\">getFilters</span>();\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'보고서가 로드되었습니다'</span>, <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">report</span>, filters );\n    }\n],\n</code></pre>\n<p>콘솔에서 보고서에 적용된 모든 필터의 객체 배열을 얻을 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">[\n    {\n        <span class=\"hljs-string\">\"$schema\"</span>: <span class=\"hljs-string\">\"http://powerbi.com/product/schema#basic\"</span>,\n        <span class=\"hljs-string\">\"target\"</span>: {\n            <span class=\"hljs-string\">\"table\"</span>: 테이블_이름,\n            <span class=\"hljs-string\">\"column\"</span>: 테이블_열\n        },\n        <span class=\"hljs-string\">\"filterType\"</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-string\">\"displaySettings\"</span>: {\n            <span class=\"hljs-string\">\"isLockedInViewMode\"</span>: <span class=\"hljs-literal\">true</span>\n        },\n        <span class=\"hljs-string\">\"operator\"</span>: <span class=\"hljs-string\">\"In\"</span>,\n        <span class=\"hljs-string\">\"values\"</span>: [\n            필터_값\n        ],\n        <span class=\"hljs-string\">\"requireSingleSelection\"</span>: <span class=\"hljs-literal\">false</span>\n    }\n]\n</code></pre>\n<p>보고서에 적용된 모든 필터를 제거하거나 새 필터를 추가하는 데 updateFilters() 메서드를 사용할 수 있어요:</p>\n<pre><code class=\"hljs language-js\">[\n  <span class=\"hljs-string\">'loaded'</span>,\n      <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">await</span>  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">report</span>.<span class=\"hljs-title function_\">updateFilters</span>(models.<span class=\"hljs-property\">FiltersOperations</span>.<span class=\"hljs-property\">RemoveAll</span>);\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Report has loaded'</span>, <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">report</span>);\n      }\n],\n</code></pre>\n<pre><code class=\"hljs language-js\">[\n      <span class=\"hljs-string\">'loaded'</span>,\n      <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">const</span> filtersArray = [\n          {\n            <span class=\"hljs-attr\">$schema</span>: <span class=\"hljs-string\">'http://powerbi.com/product/schema#basic'</span>,\n            <span class=\"hljs-attr\">target</span>: {\n              <span class=\"hljs-title class_\">Table</span>: table_name,\n              <span class=\"hljs-title class_\">Column</span>: table_column\n            },\n            <span class=\"hljs-attr\">operator</span>: <span class=\"hljs-string\">'In'</span>,\n            <span class=\"hljs-attr\">values</span>: [ filter_value ],\n            <span class=\"hljs-attr\">filterType</span>: models.<span class=\"hljs-property\">FilterType</span>.<span class=\"hljs-property\">Basic</span>,\n            <span class=\"hljs-attr\">requireSingleSelection</span>: <span class=\"hljs-literal\">true</span>\n          }\n        ];\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">report</span>.<span class=\"hljs-title function_\">updateFilters</span>(\n          models.<span class=\"hljs-property\">FiltersOperations</span>.<span class=\"hljs-property\">Add</span>,\n          filtersArray\n        );\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Report has loaded'</span>, <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">report</span>);\n      }\n],\n</code></pre>\n<p>그러니 이제 Power BI 임베드 보고서를 위해 애플리케이션에 필터를 추가, 업데이트, 제거하는 세 가지 서로 다른 방법을 알게 되었어요.</p>\n<h1>결론</h1>\n<p>이 글에서 React 애플리케이션에 Power BI 보고서를 임베드하는 절차를 설명했습니다.</p>\n<p>웹 및 API 측면에 변경을 마친 후 애플리케이션을 실행하고 보고서를 확인해보세요.</p>\n<p>질문이 있거나 인사이트를 공유하고 싶다면 언제든지 댓글 섹션에 남겨주세요. 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}