{"pageProps":{"post":{"title":"HMPL  API를 통해 HTML을 가져오는 새로운 템플릿 언어","description":"","date":"2024-06-20 03:41","slug":"2024-06-20-HMPLnewtemplatelanguageforfetchingHTMLfromAPI","content":"\n\n\n![이미지](/assets/img/2024-06-20-HMPLnewtemplatelanguageforfetchingHTMLfromAPI_0.png)\n\n이 글에서는 HMPL이라고 불리는 새로운 템플릿 언어에 대해 이야기하겠습니다. 이 언어를 사용하면 API에서 HTML을 쉽게 불러올 수 있어 굉장히 많은 불필요한 코드를 줄일 수 있습니다.\n\nhmpl.js의 주요 목표는 작은 요청 구조를 HTML에 통합하여 서버 작업을 간단하게 만드는 것입니다. 이는 php 확장자가 있는 파일에서 php 요청을 통해 서버로부터 받은 응답을 처리하는 방식과 비교될 수 있지만 동시에 javascript를 통해 직접적으로 처리할 수 있는 방법을 제공합니다. 단순히 버튼에서 제목을 가져오는 예를 통해 이 템플릿 언어가 귀하의 작업을 단순화할 수 있는 방법을 이해할 수 있습니다.\n\n이 템플릿 언어를 이용하면 지정된 문자열 템플릿을 반복할 수 있습니다. 코드로 표현하면 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { compile } from \"hmpl-js\";\nconst templateFn = compile(\n   `<div>\n     <request src=\"/api/test\"></request>\n   </div>`\n);\n\nconst wrapper = document.getElementById(\"wrapper\");\nconst obj1 = templateFn();\n\nconst obj2 = templateFn();\n\nwrapper.appendChild(obj1.response);\nwrapper.appendChild(obj2.response);\n```\n\n이 모듈은 최신 JS 도구를 사용하여 서버와 작업할 수 있도록 fetch API에 기반을 둔 것입니다.\n\nfetch API와 상호작용하려면 RequestInit 유형을 기반으로 한 설정 객체도 생성되었습니다. 예시 코드:\n\n```js\nconst elementObj = templateFn({\n  method: \"POST\",\n  mode: \"cors\",\n  cache: \"no-cache\",\n  credentials: \"same-origin\",\n  headers: {\n    \"Content-Type\": \"text/html\",\n  },\n  redirect: \"follow\",\n  get: (prop, value) => {},\n  referrerPolicy: \"no-referrer\",\n  body: JSON.stringify(data),\n  signal: new AbortController().signal,\n  integrity: \"…\",\n  window: null,\n  refferer: \"about:client\",\n});\n```\n\n<div class=\"content-ad\"></div>\n\n템플릿 언어의 구문 자체로 .hmpl 확장자 파일을 사용하여 실용적이고 이해하기 쉬운 프로젝트 파일 구조를 만들고 일반 HTML과 \"모듈화된\" HTML을 분리하는 것이 가능합니다.\n\n![이미지](/assets/img/2024-06-20-HMPLnewtemplatelanguageforfetchingHTMLfromAPI_1.png)\n\n해당 모듈은 매우 작은 크기입니다 (버전 1.0.9). npm에서 100킬로바이트 미만을 차지합니다. 미니파이된 파일 자체도 더욱 가벼워집니다.\n\n![이미지](/assets/img/2024-06-20-HMPLnewtemplatelanguageforfetchingHTMLfromAPI_2.png)\n\n<div class=\"content-ad\"></div>\n\n아래는 작업을 더욱 쉽게 수행할 수 있는 여러 연결 옵션이 있는 모듈입니다:\n\n```js\n<script src=\"https://unpkg.com/hmpl-js/dist/hmpl.min.js\"></script>\n```\n\n또는\n\n```js\n{\n  \"dependencies\": {\n    \"hmpl-js\": \"latest\"\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n웹팩 구성 파일\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.hmpl$/i,\n        use: [\"hmpl-loader\"],\n      }\n    ]\n  }\n}\n```\n\n모듈에 대한 간단한 프로젝트 예시:\n\n<div class=\"content-ad\"></div>\n\nhttps://github.com/hmpljs/examples\n\n다른 유용한 링크:\n\n- https://hmpljs.github.io\n- https://github.com/hmpljs/hmpl-loader\n- https://github.com/hmpljs/hmpl\n- https://www.youtube.com/@antonmak1\n\n이 모듈에 관심이 있으시다면 댓글에 여러분의 의견을 남겨주시면 멋질 것 같아요 :). 이 기사를 읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-06-20-HMPLnewtemplatelanguageforfetchingHTMLfromAPI_0.png"},"coverImage":"/assets/img/2024-06-20-HMPLnewtemplatelanguageforfetchingHTMLfromAPI_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-20-HMPLnewtemplatelanguageforfetchingHTMLfromAPI_0.png\" alt=\"이미지\"></p>\n<p>이 글에서는 HMPL이라고 불리는 새로운 템플릿 언어에 대해 이야기하겠습니다. 이 언어를 사용하면 API에서 HTML을 쉽게 불러올 수 있어 굉장히 많은 불필요한 코드를 줄일 수 있습니다.</p>\n<p>hmpl.js의 주요 목표는 작은 요청 구조를 HTML에 통합하여 서버 작업을 간단하게 만드는 것입니다. 이는 php 확장자가 있는 파일에서 php 요청을 통해 서버로부터 받은 응답을 처리하는 방식과 비교될 수 있지만 동시에 javascript를 통해 직접적으로 처리할 수 있는 방법을 제공합니다. 단순히 버튼에서 제목을 가져오는 예를 통해 이 템플릿 언어가 귀하의 작업을 단순화할 수 있는 방법을 이해할 수 있습니다.</p>\n<p>이 템플릿 언어를 이용하면 지정된 문자열 템플릿을 반복할 수 있습니다. 코드로 표현하면 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { compile } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"hmpl-js\"</span>;\n<span class=\"hljs-keyword\">const</span> templateFn = <span class=\"hljs-title function_\">compile</span>(\n   <span class=\"hljs-string\">`&#x3C;div>\n     &#x3C;request src=\"/api/test\">&#x3C;/request>\n   &#x3C;/div>`</span>\n);\n\n<span class=\"hljs-keyword\">const</span> wrapper = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"wrapper\"</span>);\n<span class=\"hljs-keyword\">const</span> obj1 = <span class=\"hljs-title function_\">templateFn</span>();\n\n<span class=\"hljs-keyword\">const</span> obj2 = <span class=\"hljs-title function_\">templateFn</span>();\n\nwrapper.<span class=\"hljs-title function_\">appendChild</span>(obj1.<span class=\"hljs-property\">response</span>);\nwrapper.<span class=\"hljs-title function_\">appendChild</span>(obj2.<span class=\"hljs-property\">response</span>);\n</code></pre>\n<p>이 모듈은 최신 JS 도구를 사용하여 서버와 작업할 수 있도록 fetch API에 기반을 둔 것입니다.</p>\n<p>fetch API와 상호작용하려면 RequestInit 유형을 기반으로 한 설정 객체도 생성되었습니다. 예시 코드:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elementObj = <span class=\"hljs-title function_\">templateFn</span>({\n  <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"POST\"</span>,\n  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">\"cors\"</span>,\n  <span class=\"hljs-attr\">cache</span>: <span class=\"hljs-string\">\"no-cache\"</span>,\n  <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">\"same-origin\"</span>,\n  <span class=\"hljs-attr\">headers</span>: {\n    <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"text/html\"</span>,\n  },\n  <span class=\"hljs-attr\">redirect</span>: <span class=\"hljs-string\">\"follow\"</span>,\n  <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">prop, value</span>) =></span> {},\n  <span class=\"hljs-attr\">referrerPolicy</span>: <span class=\"hljs-string\">\"no-referrer\"</span>,\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(data),\n  <span class=\"hljs-attr\">signal</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>().<span class=\"hljs-property\">signal</span>,\n  <span class=\"hljs-attr\">integrity</span>: <span class=\"hljs-string\">\"…\"</span>,\n  <span class=\"hljs-attr\">window</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-attr\">refferer</span>: <span class=\"hljs-string\">\"about:client\"</span>,\n});\n</code></pre>\n<p>템플릿 언어의 구문 자체로 .hmpl 확장자 파일을 사용하여 실용적이고 이해하기 쉬운 프로젝트 파일 구조를 만들고 일반 HTML과 \"모듈화된\" HTML을 분리하는 것이 가능합니다.</p>\n<p><img src=\"/assets/img/2024-06-20-HMPLnewtemplatelanguageforfetchingHTMLfromAPI_1.png\" alt=\"이미지\"></p>\n<p>해당 모듈은 매우 작은 크기입니다 (버전 1.0.9). npm에서 100킬로바이트 미만을 차지합니다. 미니파이된 파일 자체도 더욱 가벼워집니다.</p>\n<p><img src=\"/assets/img/2024-06-20-HMPLnewtemplatelanguageforfetchingHTMLfromAPI_2.png\" alt=\"이미지\"></p>\n<p>아래는 작업을 더욱 쉽게 수행할 수 있는 여러 연결 옵션이 있는 모듈입니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;script src=<span class=\"hljs-string\">\"https://unpkg.com/hmpl-js/dist/hmpl.min.js\"</span>>&#x3C;/script>\n</code></pre>\n<p>또는</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"dependencies\"</span>: {\n    <span class=\"hljs-string\">\"hmpl-js\"</span>: <span class=\"hljs-string\">\"latest\"</span>\n  }\n}\n</code></pre>\n<p>웹팩 구성 파일</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-attr\">rules</span>: [\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.hmpl$/i</span>,\n        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">\"hmpl-loader\"</span>],\n      }\n    ]\n  }\n}\n</code></pre>\n<p>모듈에 대한 간단한 프로젝트 예시:</p>\n<p><a href=\"https://github.com/hmpljs/examples\" rel=\"nofollow\" target=\"_blank\">https://github.com/hmpljs/examples</a></p>\n<p>다른 유용한 링크:</p>\n<ul>\n<li><a href=\"https://hmpljs.github.io\" rel=\"nofollow\" target=\"_blank\">https://hmpljs.github.io</a></li>\n<li><a href=\"https://github.com/hmpljs/hmpl-loader\" rel=\"nofollow\" target=\"_blank\">https://github.com/hmpljs/hmpl-loader</a></li>\n<li><a href=\"https://github.com/hmpljs/hmpl\" rel=\"nofollow\" target=\"_blank\">https://github.com/hmpljs/hmpl</a></li>\n<li><a href=\"https://www.youtube.com/@antonmak1\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/@antonmak1</a></li>\n</ul>\n<p>이 모듈에 관심이 있으시다면 댓글에 여러분의 의견을 남겨주시면 멋질 것 같아요 :). 이 기사를 읽어 주셔서 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}