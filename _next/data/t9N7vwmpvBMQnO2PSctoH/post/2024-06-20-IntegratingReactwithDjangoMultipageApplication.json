{"pageProps":{"post":{"title":"리액트와 장고 다중 페이지 애플리케이션 통합","description":"","date":"2024-06-20 02:17","slug":"2024-06-20-IntegratingReactwithDjangoMultipageApplication","content":"\n\n![image](/assets/img/2024-06-20-IntegratingReactwithDjangoMultipageApplication_0.png)\n\nReact와 Django는 각각의 강점을 가진 웹 애플리케이션을 구축하기 위한 강력한 도구입니다. React는 동적이고 상호 작용적인 사용자 인터페이스를 만드는 데 능숙하며, Django는 데이터를 관리하고 콘텐츠를 제공하기 위한 강력한 백엔드 프레임워크를 제공합니다. 이러한 기술들을 결합함으로써 개발자들은 양쪽의 장점을 최대한 활용할 수 있습니다. 본 포괄적인 안내서에서는 React를 Django 다중 페이지 애플리케이션에 통합하는 과정을 설명하며, 개발 및 프로덕션 환경에서의 모범 사례를 다룰 것입니다.\n\n## 이 안내서를 사용해야 하는 경우:\n\n## 요구 사항:\n\n<div class=\"content-ad\"></div>\n\n- Django와 React의 기본 지식이 필요합니다.\n- 시스템에 Python과 Node.js가 설치되어 있어야 합니다.\n\n## 단계 1: Django 프로젝트 설정하기:\n\n```js\npip install django\n```\n\n```js\ndjango-admin startproject myproject\ncd myproject\n```\n\n<div class=\"content-ad\"></div>\n\n다음으로, 프로젝트 내에서 Django 앱을 생성합니다:\n\n```js\npython manage.py startapp myapp\n```\n\n마이그레이션 적용\n\n```js\npython manage.py makemigrations\npython manage.py migrate\n```\n\n<div class=\"content-ad\"></div>\n\n## 단계 2: React 앱 생성하기:\n\n```js\nmkdir frontend\ncd frontend\n```\n\n이제 새로운 React 앱을 초기화하세요:\n\n```js\nnpx create-react-app myreactapp\n```\n\n<div class=\"content-ad\"></div>\n\n## 단계 3: React를 Django와 통합하기:\n\n- Django를 React 빌드 파일을 제공하도록 구성: Django 프로젝트의 urls.py 파일에서 React 앱을 제공할 수 있는 경로를 추가하세요:\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path\nfrom django.views.generic import TemplateView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', TemplateView.as_view(template_name='index.html')),\n]\n```\n\n2. Django 템플릿에 React 번들 포함하기: Django 템플릿 (index.html)에 번들 된 JavaScript 파일을 동적으로 포함하여 개발 중에 변경 사항이 즉시 반영되도록하세요.\n\n<div class=\"content-ad\"></div>\n\n다음과 같이 myapp 폴더와 동일한 레벨에 template 폴더를 만들어주세요. settings.py 파일을 업데이트해서 templates를 포함하도록 하겠습니다.\n\n```python\nimport os\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n\n        },\n    },\n]\n```\n\n```html\n{ load static }\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Django React App</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script src=\"http://localhost:3000/static/js/bundle.js\"></script>\n</body>\n</html>\n```\n\n## Step 4: 어플리케이션 실행하기:\n\n<div class=\"content-ad\"></div>\n\n## 개발\n\n- 장고 개발 서버를 시작합니다:\n\n```js\npython manage.py runserver\n```\n\n- React 개발 서버를 시작합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\ncd frontend/myreactapp\nnpm start\n```\n\n브라우저에서 http://localhost:8000을 방문하여 Django React 애플리케이션을 개발 모드로 확인할 수 있어요.\n\n## 프로덕션\n\n- React 앱 빌드하기:\n\n<div class=\"content-ad\"></div>\n\n```js\ncd frontend/myreactapp\nnpm run build\n```\n\n- Django 템플릿 업데이트: React 앱을 빌드한 후에는 Django 템플릿에 주요 JavaScript 파일(main.`해시`.js) 경로를 추가하십시오. Django 템플릿 파일(index.html)을 열어 다음 라인을 추가하십시오:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Django React App</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n\n    <script src=\"{ static 'js/main.38dff78c.js' }\"></script>\n</body>\n</html>\n```\n\n- Django 서버 시작:\n\n<div class=\"content-ad\"></div>\n\n```js\npython manage.py runserver\n```\n\n로컬 호스트(http://localhost:8000)를 브라우저에서 방문하여 Django React 애플리케이션을 프로덕션 모드로 확인해보세요.\n\nDjango와 React를 통합하면 웹 애플리케이션의 사용자 경험을 향상시킬 수 있는 강력한 솔루션이 제공됩니다. 기존의 Django 다중 페이지 애플리케이션을 점진적으로 인터랙티브한 경험으로 전환하거나 단일 인터랙티브 페이지를 도입해야 하는 경우, 이 안내서를 통해 쉽게 지식과 도구를 활용할 수 있습니다.\n\n이 안내서에 나온 단계를 따라가면 React와 Django의 장점을 모두 활용하여 Django의 백엔드 기능을 React의 동적인 프론트엔드 컴포넌트와 함께 효율적으로 사용할 수 있습니다. 프로젝트 설정부터 개발 및 프로덕션 환경 처리까지, 이제 Django 애플리케이션에 React를 통합할 튼튼한 기반을 가지게 되었습니다.\n\n\n<div class=\"content-ad\"></div>\n\n행복한 코딩 😃\n\n소스 코드","ogImage":{"url":"/assets/img/2024-06-20-IntegratingReactwithDjangoMultipageApplication_0.png"},"coverImage":"/assets/img/2024-06-20-IntegratingReactwithDjangoMultipageApplication_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-20-IntegratingReactwithDjangoMultipageApplication_0.png\" alt=\"image\"></p>\n<p>React와 Django는 각각의 강점을 가진 웹 애플리케이션을 구축하기 위한 강력한 도구입니다. React는 동적이고 상호 작용적인 사용자 인터페이스를 만드는 데 능숙하며, Django는 데이터를 관리하고 콘텐츠를 제공하기 위한 강력한 백엔드 프레임워크를 제공합니다. 이러한 기술들을 결합함으로써 개발자들은 양쪽의 장점을 최대한 활용할 수 있습니다. 본 포괄적인 안내서에서는 React를 Django 다중 페이지 애플리케이션에 통합하는 과정을 설명하며, 개발 및 프로덕션 환경에서의 모범 사례를 다룰 것입니다.</p>\n<h2>이 안내서를 사용해야 하는 경우:</h2>\n<h2>요구 사항:</h2>\n<ul>\n<li>Django와 React의 기본 지식이 필요합니다.</li>\n<li>시스템에 Python과 Node.js가 설치되어 있어야 합니다.</li>\n</ul>\n<h2>단계 1: Django 프로젝트 설정하기:</h2>\n<pre><code class=\"hljs language-js\">pip install django\n</code></pre>\n<pre><code class=\"hljs language-js\">django-admin startproject myproject\ncd myproject\n</code></pre>\n<p>다음으로, 프로젝트 내에서 Django 앱을 생성합니다:</p>\n<pre><code class=\"hljs language-js\">python manage.<span class=\"hljs-property\">py</span> startapp myapp\n</code></pre>\n<p>마이그레이션 적용</p>\n<pre><code class=\"hljs language-js\">python manage.<span class=\"hljs-property\">py</span> makemigrations\npython manage.<span class=\"hljs-property\">py</span> migrate\n</code></pre>\n<h2>단계 2: React 앱 생성하기:</h2>\n<pre><code class=\"hljs language-js\">mkdir frontend\ncd frontend\n</code></pre>\n<p>이제 새로운 React 앱을 초기화하세요:</p>\n<pre><code class=\"hljs language-js\">npx create-react-app myreactapp\n</code></pre>\n<h2>단계 3: React를 Django와 통합하기:</h2>\n<ul>\n<li>Django를 React 빌드 파일을 제공하도록 구성: Django 프로젝트의 urls.py 파일에서 React 앱을 제공할 수 있는 경로를 추가하세요:</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> django.contrib <span class=\"hljs-keyword\">import</span> admin\n<span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path\n<span class=\"hljs-keyword\">from</span> django.views.generic <span class=\"hljs-keyword\">import</span> TemplateView\n\nurlpatterns = [\n    path(<span class=\"hljs-string\">'admin/'</span>, admin.site.urls),\n    path(<span class=\"hljs-string\">''</span>, TemplateView.as_view(template_name=<span class=\"hljs-string\">'index.html'</span>)),\n]\n</code></pre>\n<ol start=\"2\">\n<li>Django 템플릿에 React 번들 포함하기: Django 템플릿 (index.html)에 번들 된 JavaScript 파일을 동적으로 포함하여 개발 중에 변경 사항이 즉시 반영되도록하세요.</li>\n</ol>\n<p>다음과 같이 myapp 폴더와 동일한 레벨에 template 폴더를 만들어주세요. settings.py 파일을 업데이트해서 templates를 포함하도록 하겠습니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n\nTEMPLATES = [\n    {\n        <span class=\"hljs-string\">'BACKEND'</span>: <span class=\"hljs-string\">'django.template.backends.django.DjangoTemplates'</span>,\n        <span class=\"hljs-string\">'DIRS'</span>: [os.path.join(BASE_DIR, <span class=\"hljs-string\">'templates'</span>)],\n        <span class=\"hljs-string\">'APP_DIRS'</span>: <span class=\"hljs-literal\">True</span>,\n        <span class=\"hljs-string\">'OPTIONS'</span>: {\n\n        },\n    },\n]\n</code></pre>\n<pre><code class=\"hljs language-html\">{ load static }\n<span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>My Django React App<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"root\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://localhost:3000/static/js/bundle.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>Step 4: 어플리케이션 실행하기:</h2>\n<h2>개발</h2>\n<ul>\n<li>장고 개발 서버를 시작합니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\">python manage.<span class=\"hljs-property\">py</span> runserver\n</code></pre>\n<ul>\n<li>React 개발 서버를 시작합니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\">cd frontend/myreactapp\nnpm start\n</code></pre>\n<p>브라우저에서 <a href=\"http://localhost:8000%EC%9D%84\" rel=\"nofollow\" target=\"_blank\">http://localhost:8000을</a> 방문하여 Django React 애플리케이션을 개발 모드로 확인할 수 있어요.</p>\n<h2>프로덕션</h2>\n<ul>\n<li>React 앱 빌드하기:</li>\n</ul>\n<pre><code class=\"hljs language-js\">cd frontend/myreactapp\nnpm run build\n</code></pre>\n<ul>\n<li>Django 템플릿 업데이트: React 앱을 빌드한 후에는 Django 템플릿에 주요 JavaScript 파일(main.<code>해시</code>.js) 경로를 추가하십시오. Django 템플릿 파일(index.html)을 열어 다음 라인을 추가하십시오:</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>My Django React App<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"root\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"{ static 'js/main.38dff78c.js' }\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<ul>\n<li>Django 서버 시작:</li>\n</ul>\n<pre><code class=\"hljs language-js\">python manage.<span class=\"hljs-property\">py</span> runserver\n</code></pre>\n<p>로컬 호스트(<a href=\"http://localhost:8000)%EB%A5%BC\" rel=\"nofollow\" target=\"_blank\">http://localhost:8000)를</a> 브라우저에서 방문하여 Django React 애플리케이션을 프로덕션 모드로 확인해보세요.</p>\n<p>Django와 React를 통합하면 웹 애플리케이션의 사용자 경험을 향상시킬 수 있는 강력한 솔루션이 제공됩니다. 기존의 Django 다중 페이지 애플리케이션을 점진적으로 인터랙티브한 경험으로 전환하거나 단일 인터랙티브 페이지를 도입해야 하는 경우, 이 안내서를 통해 쉽게 지식과 도구를 활용할 수 있습니다.</p>\n<p>이 안내서에 나온 단계를 따라가면 React와 Django의 장점을 모두 활용하여 Django의 백엔드 기능을 React의 동적인 프론트엔드 컴포넌트와 함께 효율적으로 사용할 수 있습니다. 프로젝트 설정부터 개발 및 프로덕션 환경 처리까지, 이제 Django 애플리케이션에 React를 통합할 튼튼한 기반을 가지게 되었습니다.</p>\n<p>행복한 코딩 😃</p>\n<p>소스 코드</p>\n</body>\n</html>\n"},"__N_SSG":true}