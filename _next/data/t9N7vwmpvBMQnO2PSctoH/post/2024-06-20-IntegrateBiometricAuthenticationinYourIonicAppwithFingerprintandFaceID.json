{"pageProps":{"post":{"title":"Ionic 앱에 지문 및 얼굴 인식을 통합해보세요","description":"","date":"2024-06-20 00:33","slug":"2024-06-20-IntegrateBiometricAuthenticationinYourIonicAppwithFingerprintandFaceID","content":"\n\n생체 인증은 지문 및 얼굴 인식을 포함하여 사용자가 안전하고 편리하게 인증할 수 있는 방법을 제공합니다. 이 튜토리얼에서는 cordova-plugin-fingerprint-aio 플러그인을 사용하여 Ionic 앱에 생체 인증을 통합하는 방법을 알아보겠습니다. 이 플러그인은 특정 생체 인식 방법을 추상화하며 지문 및 얼굴 인식을 모두 지원하며 사용자 기기에서 사용 가능한 것에 맞게 적응합니다.\n\n![이미지](/assets/img/2024-06-20-IntegrateBiometricAuthenticationinYourIonicAppwithFingerprintandFaceID_0.png)\n\n# 준비 사항\n\n시작하기 전에 다음 설정이 완료되었는지 확인하십시오:\n\n<div class=\"content-ad\"></div>\n\n- Node.js 및 npm이 설치되어 있습니다.\n- Ionic CLI가 설치되어 있습니다 (npm install -g @ionic/cli).\n- Android 개발을 위해 Android Studio가 필요합니다.\n- macOS에서 iOS 개발을 위해 Xcode가 필요합니다.\n- 생체 인식 기능(지문 또는 얼굴 인식)이 있는 실제 기기\n\n# 단계 1: 새 Ionic 프로젝트 생성\n\n먼저, 새 Ionic 프로젝트를 생성해야 합니다. 이미 프로젝트가 있는 경우, 이 단계를 건너뛸 수 있습니다.\n\n```bash\nionic start biometric-auth blank --type=angular\ncd biometric-auth\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 2: 지문 AIO 플러그인 추가하기\n\n이제 cordova-plugin-fingerprint-aio 플러그인과 Ionic Native 래퍼를 설치해야 합니다.\n\n```js\nionic cordova plugin add cordova-plugin-fingerprint-aio\nnpm install @awesome-cordova-plugins/fingerprint-aio\n```\n\n# 단계 3: 앱 구성하기\n\n<div class=\"content-ad\"></div>\n\n# app.module.ts 업데이트\n\n우리 앱이 FingerprintAIO 프로바이더를 사용하도록 구성해야 합니다. src/app/app.module.ts 파일을 열어 다음과 같이 업데이트해 주세요:\n\n```js\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { FingerprintAIO } from '@awesome-cordova-plugins/fingerprint-aio/ngx';\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    FingerprintAIO,\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n# 생체 인증 구현\n\n<div class=\"content-ad\"></div>\n\n다음으로 홈페이지 구성요소에 생체 인증을 구현할 것입니다.\n\n## 홈페이지 파일 업데이트\n\nsrc/app/home/home.page.ts 파일을 열어 아래 내용으로 업데이트해 주세요:\n\n```js\nimport { Component } from '@angular/core';\nimport { FingerprintAIO } from '@awesome-cordova-plugins/fingerprint-aio/ngx';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage {\n\n  constructor(private faio: FingerprintAIO) {}\n\n  async showFingerprintAuth() {\n    try {\n      // 생체 인증 사용 가능 여부 확인\n      const available = await this.faio.isAvailable();\n      if (available) {\n        const result = await this.faio.show({\n          title: '생체 인증', // 생체 인증 다이얼로그의 제목\n          subtitle: '접근 권한 인증', // 생체 인증 다이얼로그의 부제목\n          description: '지문 또는 얼굴을 사용하여 인증하세요', // 생체 인증 다이얼로그 설명\n          fallbackButtonTitle: '백업 사용', // 백업 버튼 제목\n          disableBackup: true // 안드로이드에서 '백업 사용' 옵션 비활성화 (선택 사항)\n        });\n        console.log(result);\n        alert('인증 성공');\n      } else {\n        alert('이 장치에서는 생체 인증을 사용할 수 없습니다.');\n      }\n    } catch (e) {\n      console.error(e);\n      alert('인증 실패');\n    }\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 홈 페이지 업데이트\n\nsrc/app/home/home.page.html 파일을 열고 다음과 같이 업데이트하십시오:\n\n```js\n<ion-header>\n  <ion-toolbar>\n    <ion-title>\n      생체 인증\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-button (click)=\"showFingerprintAuth()\">\n    지문/얼굴 ID로 인증하기\n  </ion-button>\n</ion-content>\n```\n\n# 단계 4: 앱 테스트\n\n<div class=\"content-ad\"></div>\n\n이제 앱을 테스트할 시간입니다. 바이오메트릭 기능은 시뮬레이터나 에뮬레이터에서 테스트할 수 없으므로 실제 기기에서 앱을 실행해야 합니다.\n\n# 결론\n\n이 튜토리얼에서는 cordova-plugin-fingerprint-aio 플러그인을 사용하여 Ionic 앱에 바이오메트릭 인증을 통합했습니다. 이 플러그인은 사용자 기기에서 사용 가능한 지문 및 얼굴 인식을 모두 지원하며, 위에서 안내한 단계를 따라 Ionic 앱의 보안 및 사용자 경험을 바이오메트릭 인증으로 향상시킬 수 있습니다.\n\n구현을 더 자유롭게 사용자 흐름에 통합하고 개선해보세요. 즐거운 코딩되세요!","ogImage":{"url":"/assets/img/2024-06-20-IntegrateBiometricAuthenticationinYourIonicAppwithFingerprintandFaceID_0.png"},"coverImage":"/assets/img/2024-06-20-IntegrateBiometricAuthenticationinYourIonicAppwithFingerprintandFaceID_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>생체 인증은 지문 및 얼굴 인식을 포함하여 사용자가 안전하고 편리하게 인증할 수 있는 방법을 제공합니다. 이 튜토리얼에서는 cordova-plugin-fingerprint-aio 플러그인을 사용하여 Ionic 앱에 생체 인증을 통합하는 방법을 알아보겠습니다. 이 플러그인은 특정 생체 인식 방법을 추상화하며 지문 및 얼굴 인식을 모두 지원하며 사용자 기기에서 사용 가능한 것에 맞게 적응합니다.</p>\n<p><img src=\"/assets/img/2024-06-20-IntegrateBiometricAuthenticationinYourIonicAppwithFingerprintandFaceID_0.png\" alt=\"이미지\"></p>\n<h1>준비 사항</h1>\n<p>시작하기 전에 다음 설정이 완료되었는지 확인하십시오:</p>\n<ul>\n<li>Node.js 및 npm이 설치되어 있습니다.</li>\n<li>Ionic CLI가 설치되어 있습니다 (npm install -g @ionic/cli).</li>\n<li>Android 개발을 위해 Android Studio가 필요합니다.</li>\n<li>macOS에서 iOS 개발을 위해 Xcode가 필요합니다.</li>\n<li>생체 인식 기능(지문 또는 얼굴 인식)이 있는 실제 기기</li>\n</ul>\n<h1>단계 1: 새 Ionic 프로젝트 생성</h1>\n<p>먼저, 새 Ionic 프로젝트를 생성해야 합니다. 이미 프로젝트가 있는 경우, 이 단계를 건너뛸 수 있습니다.</p>\n<pre><code class=\"hljs language-bash\">ionic start biometric-auth blank --<span class=\"hljs-built_in\">type</span>=angular\n<span class=\"hljs-built_in\">cd</span> biometric-auth\n</code></pre>\n<h1>단계 2: 지문 AIO 플러그인 추가하기</h1>\n<p>이제 cordova-plugin-fingerprint-aio 플러그인과 Ionic Native 래퍼를 설치해야 합니다.</p>\n<pre><code class=\"hljs language-js\">ionic cordova plugin add cordova-plugin-fingerprint-aio\nnpm install @awesome-cordova-plugins/fingerprint-aio\n</code></pre>\n<h1>단계 3: 앱 구성하기</h1>\n<h1>app.module.ts 업데이트</h1>\n<p>우리 앱이 FingerprintAIO 프로바이더를 사용하도록 구성해야 합니다. src/app/app.module.ts 파일을 열어 다음과 같이 업데이트해 주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NgModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">RouteReuseStrategy</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/router'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IonicModule</span>, <span class=\"hljs-title class_\">IonicRouteStrategy</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ionic/angular'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SplashScreen</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ionic-native/splash-screen/ngx'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">StatusBar</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ionic-native/status-bar/ngx'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.component'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppRoutingModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app-routing.module'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FingerprintAIO</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@awesome-cordova-plugins/fingerprint-aio/ngx'</span>;\n\n@<span class=\"hljs-title class_\">NgModule</span>({\n  <span class=\"hljs-attr\">declarations</span>: [<span class=\"hljs-title class_\">AppComponent</span>],\n  <span class=\"hljs-attr\">entryComponents</span>: [],\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">BrowserModule</span>, <span class=\"hljs-title class_\">IonicModule</span>.<span class=\"hljs-title function_\">forRoot</span>(), <span class=\"hljs-title class_\">AppRoutingModule</span>],\n  <span class=\"hljs-attr\">providers</span>: [\n    <span class=\"hljs-title class_\">StatusBar</span>,\n    <span class=\"hljs-title class_\">SplashScreen</span>,\n    <span class=\"hljs-title class_\">FingerprintAIO</span>,\n    { <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-title class_\">RouteReuseStrategy</span>, <span class=\"hljs-attr\">useClass</span>: <span class=\"hljs-title class_\">IonicRouteStrategy</span> }\n  ],\n  <span class=\"hljs-attr\">bootstrap</span>: [<span class=\"hljs-title class_\">AppComponent</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<h1>생체 인증 구현</h1>\n<p>다음으로 홈페이지 구성요소에 생체 인증을 구현할 것입니다.</p>\n<h2>홈페이지 파일 업데이트</h2>\n<p>src/app/home/home.page.ts 파일을 열어 아래 내용으로 업데이트해 주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FingerprintAIO</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@awesome-cordova-plugins/fingerprint-aio/ngx'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-home'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'home.page.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'home.page.scss'</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HomePage</span> {\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private faio: FingerprintAIO</span>) {}\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">showFingerprintAuth</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-comment\">// 생체 인증 사용 가능 여부 확인</span>\n      <span class=\"hljs-keyword\">const</span> available = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">faio</span>.<span class=\"hljs-title function_\">isAvailable</span>();\n      <span class=\"hljs-keyword\">if</span> (available) {\n        <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">faio</span>.<span class=\"hljs-title function_\">show</span>({\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'생체 인증'</span>, <span class=\"hljs-comment\">// 생체 인증 다이얼로그의 제목</span>\n          <span class=\"hljs-attr\">subtitle</span>: <span class=\"hljs-string\">'접근 권한 인증'</span>, <span class=\"hljs-comment\">// 생체 인증 다이얼로그의 부제목</span>\n          <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'지문 또는 얼굴을 사용하여 인증하세요'</span>, <span class=\"hljs-comment\">// 생체 인증 다이얼로그 설명</span>\n          <span class=\"hljs-attr\">fallbackButtonTitle</span>: <span class=\"hljs-string\">'백업 사용'</span>, <span class=\"hljs-comment\">// 백업 버튼 제목</span>\n          <span class=\"hljs-attr\">disableBackup</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 안드로이드에서 '백업 사용' 옵션 비활성화 (선택 사항)</span>\n        });\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result);\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'인증 성공'</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'이 장치에서는 생체 인증을 사용할 수 없습니다.'</span>);\n      }\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(e);\n      <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'인증 실패'</span>);\n    }\n  }\n}\n</code></pre>\n<h2>홈 페이지 업데이트</h2>\n<p>src/app/home/home.page.html 파일을 열고 다음과 같이 업데이트하십시오:</p>\n<pre><code class=\"hljs language-js\">&#x3C;ion-header>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ion-toolbar</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ion-title</span>></span>\n      생체 인증\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ion-title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ion-toolbar</span>></span></span>\n&#x3C;/ion-header>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ion-content</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ion-button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"showFingerprintAuth()\"</span>></span>\n    지문/얼굴 ID로 인증하기\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ion-button</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ion-content</span>></span></span>\n</code></pre>\n<h1>단계 4: 앱 테스트</h1>\n<p>이제 앱을 테스트할 시간입니다. 바이오메트릭 기능은 시뮬레이터나 에뮬레이터에서 테스트할 수 없으므로 실제 기기에서 앱을 실행해야 합니다.</p>\n<h1>결론</h1>\n<p>이 튜토리얼에서는 cordova-plugin-fingerprint-aio 플러그인을 사용하여 Ionic 앱에 바이오메트릭 인증을 통합했습니다. 이 플러그인은 사용자 기기에서 사용 가능한 지문 및 얼굴 인식을 모두 지원하며, 위에서 안내한 단계를 따라 Ionic 앱의 보안 및 사용자 경험을 바이오메트릭 인증으로 향상시킬 수 있습니다.</p>\n<p>구현을 더 자유롭게 사용자 흐름에 통합하고 개선해보세요. 즐거운 코딩되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}