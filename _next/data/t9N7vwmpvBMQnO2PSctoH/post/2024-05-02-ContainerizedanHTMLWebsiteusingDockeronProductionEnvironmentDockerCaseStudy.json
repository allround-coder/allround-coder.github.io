{"pageProps":{"post":{"title":"프로덕션 환경에서 Docker를 사용하여 HTML 웹사이트를 컨테이너화하는 방법","description":"","date":"2024-05-02 00:16","slug":"2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy","content":"\n\n안녕하세요! \n프로덕션 서버에 있는 애플리케이션을 Dockerize해야 하는 주요 소프트웨어 회사의 데브옵스 엔지니어로 일하고 계시군요. 회사는 커스텀 소프트웨어를 사용하기 때문에 미리 빌드된 컨테이너를 사용할 수 없습니다.\n\n다음 링크를 사용해주세요: https://github.com/microsoft/project-html-website.git\n\n다음 내용을 가정해주세요:\n\n<div class=\"content-ad\"></div>\n\n1. 소프트웨어가 설치된 상태로 Apache를 가정합니다.\n\n2. Ubuntu 컨테이너를 사용하십시오.\n\n회사는 다음을 원합니다:\n\n1. 개발자들은 도커를 사용하지 않을 것이기 때문에, 그들로부터 코드를 받게 될 것입니다. 빌드한 사용자 정의 이미지에 코드를 넣을 수 있는 Docker 파일을 작성해주세요.\n\n<div class=\"content-ad\"></div>\n\n2. 위의 구성으로 Docker Hub에 이미지를 푸시하세요.\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_0.png)\n\n이 케이스 스터디를 위한 명령어를 복사할 수 있는 GitHub 저장소 링크\n\n# 1. 우분투 머신을 사용하여 새로운 인스턴스 생성\n\n<div class=\"content-ad\"></div>\n\n단계 1: 먼저 인스턴스를 시작하겠습니다. \"인스턴스 시작\"을 클릭하세요.\n\n![Step 1](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_1.png)\n\n단계 2: \"이름\"을 \"사례 연구\"로 선택하세요.\n\n![Step 2](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_2.png)\n\n<div class=\"content-ad\"></div>\n\nStep 3: \"AMI\"를 \"Ubuntu\"로 선택하세요.\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_3.png)\n\nStep 4: \"인스턴스 유형\"을 \"t2.micro\"로 유지하고 \"키페어(로그인)\"를 \"키페어 없이 진행\"으로 선택하세요.\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_4.png)\n\n<div class=\"content-ad\"></div>\n\n스텝 5: \"네트워크 설정\"에서 \"편집\"을 클릭하세요.\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_5.png\" />\n\n스텝 6: 여기에서 다음 옵션을 선택하세요:\n\na. 먼저, 여기에서 \"보안 그룹 생성\"을 선택하세요.\n\n<div class=\"content-ad\"></div>\n\nb. 보안 그룹 이름 - 필수: 사례 연구\n\nc. 설명: 사례 연구용 보안 그룹\n\n보안 그룹 규칙 2에서 \"소스 유형\"을 \"아무 곳에서나(Anywhere)\"로 선택하고 \"모든 트래픽(All Traffic)\"을 선택하세요.\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_6.png)\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_7.png)\n\n단계 7: \"인스턴스 시작\"을 클릭합니다.\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_8.png)\n\n단계 8: \"하이퍼링크\"를 클릭하여 \"인스턴스\"를 확인하세요.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_9.png)\n\n단계 9: \"인스턴스\"를 클릭하세요. 인스턴스를 선택하고 \"연결\"을 클릭하세요.\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_10.png)\n\n단계 10: \"EC2 Instance Connect\"에서 \"연결\"을 클릭하세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_11.png\" />\n\n11단계: \"Ubuntu Machine\"이 작동 준비가 되었어요.\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_12.png\" />\n\n## 2. Ubuntu Machine 업데이트 및 Docker 설치\n\n<div class=\"content-ad\"></div>\n\n스텝 1: 머신을 업데이트하려면 이 명령을 실행하세요:\n\n```js\nsudo apt update\n```\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_13.png)\n\n스텝 2: 다음 명령을 사용하여 Docker를 설치하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nsudo apt-get install docker.io –y\n```\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_14.png)\n\n단계 3: 다음 명령어를 사용하여 도커를 시작하고 활성화합니다:\n\n```js\nsudo systemctl enable docker\nsudo systemctl start docker\n```\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_15.png)\n\n단계 4: Docker의 상태를 확인하려면 다음 명령어를 입력하세요:\n\n```js\nsudo systemctl status docker\n```\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_16.png)\n\n<div class=\"content-ad\"></div>\n\n5단계: \"sudo su -\" 명령을 사용하여 \"루트 사용자\"로 로그인하세요. 그리고, 사용 중인 도커의 현재 버전을 확인하기 위해 \"docker --version\"을 입력하세요.\n\n```js\nsudo su -\ndocker --version\n```\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_17.png\" />\n\n# 3. 새 폴더를 만들고 Github 저장소를 복제하세요.\n\n<div class=\"content-ad\"></div>\n\n1단계: \"mkdir w1\" 명령어를 사용하여 \"w1\" 디렉토리를 생성하고 디렉토리를 확인하기 위해 \"ls\" 명령어를 입력합니다.\n\n```sh\nmkdir w1\n```\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_18.png\" />\n\n2단계: 아래 명령어를 사용하여 \"w1\" 디렉토리로 들어갑니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ncd w1\n```\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_19.png)\n\n3단계: \"project-HTML-website\" 디렉토리를 \"Git Hub\"에서 연 다음, \"Code\"를 클릭하고 여기서 제공된 URL을 복사해주세요.\n\n```js\nhttps://github.com/microsoft/project-html-website.git\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_20.png\" />\n\nStep 4: \"w1\" 디렉토리에서 이 \"html website\" 저장소를 다운로드하려면 다음 명령을 입력하세요:\n\n```js\ngit clone https://github.com/microsoft/project-html-website.git\n```\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_21.png\" />\n\n<div class=\"content-ad\"></div>\n\n스텝 5: \"ls\" 및 \"project-html-website\"가 성공적으로 다운로드되었는지 확인하세요.\n\n```js\nls\n```\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_22.png\" />\n\n스텝 6: \"cd project-html-website\"를 입력하여 해당 리포지토리 내부로 이동하세요. \"project-html-website\" 폴더 내부로 이동하게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ncd project-html-website\n```\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_23.png\" />\n\n# Problem 1 Solution: 개발자들은 Docker를 사용하지 않을 것이기 때문에, 그들이 제공하는 코드를 받을 거에요. 당신이 만든 사용자 정의 이미지에 코드를 넣을 수 있는 Docker 파일을 작성해주세요.\n\n단계 1: 먼저, 다음 명령을 사용하여 Docker 파일을 생성하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nvim Dockerfile\n```\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_24.png\" />\n\n단계 2: Docker 파일 내에 이 코드를 넣으세요:\n\n```js\nFROM ubuntu\nRUN apt-get update\nRUN apt-get install apache2 -y\nRUN apt-get install apache2-utils -y\nRUN apt-get clean\nENTRYPOINT apache2ctl -D FOREGROUND\nADD index.html /var/www/html/\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_25.png\" />\n\n키보드에서 \"ESC\"를 누르고 \" :wq!\"을 입력하여 파일을 종료 및 저장하세요.\n\n3단계: 이 명령을 사용하여 이미지를 생성하세요.\n\n```js\nsudo docker build –t myimg .\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_26.png\" />\n\n단계 4: 이제 다음 명령을 사용하여 컨테이너를 만들어보세요:\n\n```js\ndocker container run –itd -p 88:80 –name test076 myimg\n```\n\n컨테이너가 활성화되었는지 확인하려면 \"docker ps -a\"를 실행하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n도커 ps -a\n```\n\n우리는 포트 88에서 컨테이너를 생성했습니다.\n\n![이미지](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_27.png)\n\n단계 5: IP 주소를 복사하여 새 브라우저 주소 창에 붙여넣으십시오. http://35.154.146.28:88/\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_28.png\" />\n\n당신의 웹사이트가 성공적으로 88번 포트를 통해 배포되었습니다.\n\n# 문제 2 해결책: 위 구성을 사용하여 Docker-Hub에 이미지를 푸시하세요.\n\n단계 1: Docker Hub로 푸시할 이미지에 태그를 지정하세요. 다음 명령어를 사용하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nsudo docker tag myimg visaltyagi12/myimg\n```\n\n![Image](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_29.png)\n\n이미지의 이름을 visaltyagi12/myimg으로 성공적으로 만들었습니다.\n\n단계 2: 첫 번째로 사용자 이름과 암호를 사용하여 다음 명령을 사용하여 도커에 로그인하십시오: sudo docker login. 로그인이 성공적으로 완료됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nsudo docker login\n```\n\n![Image](/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_30.png)\n\n단계 3: 이미지를 푸시하려면 이 명령을 사용하세요:\n\n```js\nsudo docker push visaltyagi12/myimg\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_31.png\" />\n\n제4단계: 도커 허브 계정에 로그인하고 \"저장소\" 섹션으로 이동합니다. 모든 이미지가 여기에 표시됩니다.\n\n<img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_32.png\" />\n\n## 더 많은 도커 과제\n\n<div class=\"content-ad\"></div>\n\n우분투에 컨테이너를 생성하고 Apache2를 설치하세요 — 도커 과제 1\n\n새 이미지를 사용하여 컨테이너를 시작하고 여기에 Apache 2 서비스를 시작하세요 — 도커 과제 2\n\n도커 허브에서 이미지를 가져오고 별도의 머신에 Apache2를 설치하세요 — 도커 과제 3\n\n컨테이너 실행 후 자동으로 Apache2를 설치하는 Docker 파일을 만드세요 — 도커 과제 4\n\n<div class=\"content-ad\"></div>\n\n아파치 기본 웹 페이지를 샘플 HTML 파일 안에 포함된 컨테이너로 교체하기 — 도커 과제 5\n\n## 테라폼 사례 연구는 여기를 확인하세요\n\nAWS에서 테라폼을 사용하여 아키텍처 생성하기 — 테라폼 사례 연구","ogImage":{"url":"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_0.png"},"coverImage":"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요!\n프로덕션 서버에 있는 애플리케이션을 Dockerize해야 하는 주요 소프트웨어 회사의 데브옵스 엔지니어로 일하고 계시군요. 회사는 커스텀 소프트웨어를 사용하기 때문에 미리 빌드된 컨테이너를 사용할 수 없습니다.</p>\n<p>다음 링크를 사용해주세요: <a href=\"https://github.com/microsoft/project-html-website.git\" rel=\"nofollow\" target=\"_blank\">https://github.com/microsoft/project-html-website.git</a></p>\n<p>다음 내용을 가정해주세요:</p>\n<ol>\n<li>\n<p>소프트웨어가 설치된 상태로 Apache를 가정합니다.</p>\n</li>\n<li>\n<p>Ubuntu 컨테이너를 사용하십시오.</p>\n</li>\n</ol>\n<p>회사는 다음을 원합니다:</p>\n<ol>\n<li>개발자들은 도커를 사용하지 않을 것이기 때문에, 그들로부터 코드를 받게 될 것입니다. 빌드한 사용자 정의 이미지에 코드를 넣을 수 있는 Docker 파일을 작성해주세요.</li>\n</ol>\n<ol start=\"2\">\n<li>위의 구성으로 Docker Hub에 이미지를 푸시하세요.</li>\n</ol>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_0.png\" alt=\"이미지\"></p>\n<p>이 케이스 스터디를 위한 명령어를 복사할 수 있는 GitHub 저장소 링크</p>\n<h1>1. 우분투 머신을 사용하여 새로운 인스턴스 생성</h1>\n<p>단계 1: 먼저 인스턴스를 시작하겠습니다. \"인스턴스 시작\"을 클릭하세요.</p>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_1.png\" alt=\"Step 1\"></p>\n<p>단계 2: \"이름\"을 \"사례 연구\"로 선택하세요.</p>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_2.png\" alt=\"Step 2\"></p>\n<p>Step 3: \"AMI\"를 \"Ubuntu\"로 선택하세요.</p>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_3.png\" alt=\"이미지\"></p>\n<p>Step 4: \"인스턴스 유형\"을 \"t2.micro\"로 유지하고 \"키페어(로그인)\"를 \"키페어 없이 진행\"으로 선택하세요.</p>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_4.png\" alt=\"이미지\"></p>\n<p>스텝 5: \"네트워크 설정\"에서 \"편집\"을 클릭하세요.</p>\n<p>스텝 6: 여기에서 다음 옵션을 선택하세요:</p>\n<p>a. 먼저, 여기에서 \"보안 그룹 생성\"을 선택하세요.</p>\n<p>b. 보안 그룹 이름 - 필수: 사례 연구</p>\n<p>c. 설명: 사례 연구용 보안 그룹</p>\n<p>보안 그룹 규칙 2에서 \"소스 유형\"을 \"아무 곳에서나(Anywhere)\"로 선택하고 \"모든 트래픽(All Traffic)\"을 선택하세요.</p>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_6.png\" alt=\"이미지\"></p>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_7.png\" alt=\"이미지\"></p>\n<p>단계 7: \"인스턴스 시작\"을 클릭합니다.</p>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_8.png\" alt=\"이미지\"></p>\n<p>단계 8: \"하이퍼링크\"를 클릭하여 \"인스턴스\"를 확인하세요.</p>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_9.png\" alt=\"이미지\"></p>\n<p>단계 9: \"인스턴스\"를 클릭하세요. 인스턴스를 선택하고 \"연결\"을 클릭하세요.</p>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_10.png\" alt=\"이미지\"></p>\n<p>단계 10: \"EC2 Instance Connect\"에서 \"연결\"을 클릭하세요.</p>\n<p>11단계: \"Ubuntu Machine\"이 작동 준비가 되었어요.</p>\n<h2>2. Ubuntu Machine 업데이트 및 Docker 설치</h2>\n<p>스텝 1: 머신을 업데이트하려면 이 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">sudo apt update\n</code></pre>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_13.png\" alt=\"이미지\"></p>\n<p>스텝 2: 다음 명령을 사용하여 Docker를 설치하세요:</p>\n<pre><code class=\"hljs language-js\">sudo apt-get install docker.<span class=\"hljs-property\">io</span> –y\n</code></pre>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_14.png\" alt=\"이미지\"></p>\n<p>단계 3: 다음 명령어를 사용하여 도커를 시작하고 활성화합니다:</p>\n<pre><code class=\"hljs language-js\">sudo systemctl enable docker\nsudo systemctl start docker\n</code></pre>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_15.png\" alt=\"이미지\"></p>\n<p>단계 4: Docker의 상태를 확인하려면 다음 명령어를 입력하세요:</p>\n<pre><code class=\"hljs language-js\">sudo systemctl status docker\n</code></pre>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_16.png\" alt=\"이미지\"></p>\n<p>5단계: \"sudo su -\" 명령을 사용하여 \"루트 사용자\"로 로그인하세요. 그리고, 사용 중인 도커의 현재 버전을 확인하기 위해 \"docker --version\"을 입력하세요.</p>\n<pre><code class=\"hljs language-js\">sudo su -\ndocker --version\n</code></pre>\n<h1>3. 새 폴더를 만들고 Github 저장소를 복제하세요.</h1>\n<p>1단계: \"mkdir w1\" 명령어를 사용하여 \"w1\" 디렉토리를 생성하고 디렉토리를 확인하기 위해 \"ls\" 명령어를 입력합니다.</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-built_in\">mkdir</span> w1\n</code></pre>\n<p>2단계: 아래 명령어를 사용하여 \"w1\" 디렉토리로 들어갑니다.</p>\n<pre><code class=\"hljs language-js\">cd w1\n</code></pre>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_19.png\" alt=\"이미지\"></p>\n<p>3단계: \"project-HTML-website\" 디렉토리를 \"Git Hub\"에서 연 다음, \"Code\"를 클릭하고 여기서 제공된 URL을 복사해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/microsoft/project-html-website.git</span>\n</code></pre>\n<p>Step 4: \"w1\" 디렉토리에서 이 \"html website\" 저장소를 다운로드하려면 다음 명령을 입력하세요:</p>\n<pre><code class=\"hljs language-js\">git clone <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/microsoft/project-html-website.git</span>\n</code></pre>\n<p>스텝 5: \"ls\" 및 \"project-html-website\"가 성공적으로 다운로드되었는지 확인하세요.</p>\n<pre><code class=\"hljs language-js\">ls\n</code></pre>\n<p>스텝 6: \"cd project-html-website\"를 입력하여 해당 리포지토리 내부로 이동하세요. \"project-html-website\" 폴더 내부로 이동하게 됩니다.</p>\n<pre><code class=\"hljs language-js\">cd project-html-website\n</code></pre>\n<h1>Problem 1 Solution: 개발자들은 Docker를 사용하지 않을 것이기 때문에, 그들이 제공하는 코드를 받을 거에요. 당신이 만든 사용자 정의 이미지에 코드를 넣을 수 있는 Docker 파일을 작성해주세요.</h1>\n<p>단계 1: 먼저, 다음 명령을 사용하여 Docker 파일을 생성하세요:</p>\n<pre><code class=\"hljs language-js\">vim <span class=\"hljs-title class_\">Dockerfile</span>\n</code></pre>\n<p>단계 2: Docker 파일 내에 이 코드를 넣으세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">FROM</span> ubuntu\n<span class=\"hljs-variable constant_\">RUN</span> apt-get update\n<span class=\"hljs-variable constant_\">RUN</span> apt-get install apache2 -y\n<span class=\"hljs-variable constant_\">RUN</span> apt-get install apache2-utils -y\n<span class=\"hljs-variable constant_\">RUN</span> apt-get clean\n<span class=\"hljs-variable constant_\">ENTRYPOINT</span> apache2ctl -D <span class=\"hljs-variable constant_\">FOREGROUND</span>\n<span class=\"hljs-variable constant_\">ADD</span> index.<span class=\"hljs-property\">html</span> /<span class=\"hljs-keyword\">var</span>/www/html/\n</code></pre>\n<p>키보드에서 \"ESC\"를 누르고 \" :wq!\"을 입력하여 파일을 종료 및 저장하세요.</p>\n<p>3단계: 이 명령을 사용하여 이미지를 생성하세요.</p>\n<pre><code class=\"hljs language-js\">sudo docker build –t myimg .\n</code></pre>\n<p>단계 4: 이제 다음 명령을 사용하여 컨테이너를 만들어보세요:</p>\n<pre><code class=\"hljs language-js\">docker container run –itd -p <span class=\"hljs-number\">88</span>:<span class=\"hljs-number\">80</span> –name test076 myimg\n</code></pre>\n<p>컨테이너가 활성화되었는지 확인하려면 \"docker ps -a\"를 실행하세요.</p>\n<pre><code class=\"hljs language-js\">도커 ps -a\n</code></pre>\n<p>우리는 포트 88에서 컨테이너를 생성했습니다.</p>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_27.png\" alt=\"이미지\"></p>\n<p>단계 5: IP 주소를 복사하여 새 브라우저 주소 창에 붙여넣으십시오. <a href=\"http://35.154.146.28:88/\" rel=\"nofollow\" target=\"_blank\">http://35.154.146.28:88/</a></p>\n<p>당신의 웹사이트가 성공적으로 88번 포트를 통해 배포되었습니다.</p>\n<h1>문제 2 해결책: 위 구성을 사용하여 Docker-Hub에 이미지를 푸시하세요.</h1>\n<p>단계 1: Docker Hub로 푸시할 이미지에 태그를 지정하세요. 다음 명령어를 사용하세요:</p>\n<pre><code class=\"hljs language-js\">sudo docker tag myimg visaltyagi12/myimg\n</code></pre>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_29.png\" alt=\"Image\"></p>\n<p>이미지의 이름을 visaltyagi12/myimg으로 성공적으로 만들었습니다.</p>\n<p>단계 2: 첫 번째로 사용자 이름과 암호를 사용하여 다음 명령을 사용하여 도커에 로그인하십시오: sudo docker login. 로그인이 성공적으로 완료됩니다.</p>\n<pre><code class=\"hljs language-js\">sudo docker login\n</code></pre>\n<p><img src=\"/assets/img/2024-05-02-ContainerizedanHTMLWebsiteusingDockeronProductionEnvironmentDockerCaseStudy_30.png\" alt=\"Image\"></p>\n<p>단계 3: 이미지를 푸시하려면 이 명령을 사용하세요:</p>\n<pre><code class=\"hljs language-js\">sudo docker push visaltyagi12/myimg\n</code></pre>\n<p>제4단계: 도커 허브 계정에 로그인하고 \"저장소\" 섹션으로 이동합니다. 모든 이미지가 여기에 표시됩니다.</p>\n<h2>더 많은 도커 과제</h2>\n<p>우분투에 컨테이너를 생성하고 Apache2를 설치하세요 — 도커 과제 1</p>\n<p>새 이미지를 사용하여 컨테이너를 시작하고 여기에 Apache 2 서비스를 시작하세요 — 도커 과제 2</p>\n<p>도커 허브에서 이미지를 가져오고 별도의 머신에 Apache2를 설치하세요 — 도커 과제 3</p>\n<p>컨테이너 실행 후 자동으로 Apache2를 설치하는 Docker 파일을 만드세요 — 도커 과제 4</p>\n<p>아파치 기본 웹 페이지를 샘플 HTML 파일 안에 포함된 컨테이너로 교체하기 — 도커 과제 5</p>\n<h2>테라폼 사례 연구는 여기를 확인하세요</h2>\n<p>AWS에서 테라폼을 사용하여 아키텍처 생성하기 — 테라폼 사례 연구</p>\n</body>\n</html>\n"},"__N_SSG":true}