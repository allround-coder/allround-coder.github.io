{"pageProps":{"post":{"title":"ESLint  Husky  Lint-staged 사용 방법 및 설정 가이드","description":"","date":"2024-06-23 13:55","slug":"2024-06-23-UsingESLintHuskyLint-staged","content":"\n\n저는 새로운 회사에 프론트엔드 개발자로 합류했어요!\n\n하지만 여기서 또 다시 시작되는군요 — 완벽한 코드 스타일을 위한 영원한 탐험이라니...\n\n제 개인적인 생각으로는 이 방대한 코딩 우주에서 '나쁜 코드'란 존재하지 않는다고 확신하고 있어요. 각자가 고유한 스타일을 갖고 있으니까 말이에요.\n\n그렇지만 5명 이상이 참여하는 프로젝트에서 각자 다른 스타일로 코딩한 걸 보면, 특히 네이밍 규약과 함수 이름 (사실 패턴까지도)에 다양한 스타일이 있음을 알게 되었어요.\n\n<div class=\"content-ad\"></div>\n\n제가 회사에 새로 합류한 입장에서는 코드를 이해하는 데 시간이 걸렸는데, 이러한 시간을 최소화하기 위해 이름 규칙을 적어도 일관되게 적용할 방법에 대해 생각하기 시작했습니다.\n\n![이미지](/assets/img/2024-06-23-UsingESLintHuskyLint-staged_0.png)\n\n물론, 우리는 일반적으로 알려진 ESLint와 Prettier를 사용하고 있었습니다. 그러나 체크를 실행하지 않고 푸시하는 등 실수가 발생한 경우가 있었습니다.\n\n사실, 이는 이 두 도구의 사용을 무효화시키는 결과를 초래합니다!\n\n<div class=\"content-ad\"></div>\n\n요즘에는 VSCode와 같은 IDE가 팝업 알림을 제공하지만, 커밋하기 전에 추가적인 확인을 하는 것도 나쁘지 않은 생각이에요. \n\n그래서, 커밋 전에 코드 스타일을 확인하는 라이브러리 husky를 사용해보자는 아이디어를 생각해냈어요. 이렇게 하면 더 편리할 거에요.\n\n추가적인 단계로, ESLint를 사용자 정의하여 내 규칙이나 회사별 규칙을 설정해볼 생각이에요!\n\n먼저, 대부분의 분들이 이미 알고 있을 것 같지만, ESLint와 Prettier가 무엇인지 간단히 설명드리겠어요.\n\n<div class=\"content-ad\"></div>\n\n## ESLint: 코드의 수호천사 👼\n\nESLint를 만나보세요 — 당신의 신뢰할 수 있는 리터입니다. 그것은 하루를 구해주는 친구와 같아요!\n코드를 위한 문법 검사기를 가지고 있는 것 같아요.\nESLint는 교묘한 구문 오류를 잡는 것뿐만 아니라 일관된 코드 스타일을 위해 매치메이커 역할을 하며, 당신의 코드가 최상급인지 확인합니다. 🌟\n\n## Prettier: 코드 스타일리스트 ✨\n\n코드베이스를 위한 패션 관리자가 있는 것 같아요.\nPrettier는 코드를 새롭게 꾸며주는 데 도움을 줍니다.\n\n<div class=\"content-ad\"></div>\n\n이 두 가지 도구는 때때로 구성 사항 간의 충돌로 이어져있는 코드 스타일과 관련된 측면을 다룹니다. 이러한 충돌을 처리하는 것이 중요합니다.\n\n자, 이 글의 주요 내용인 Husky에 대해 살펴봅시다.\n\n## Husky\n\n이전에 논의한 바와 같이 Husky는 git commit이나 git push와 같은 중요한 Git 이벤트가 발생하기 전에 지정된 스크립트를 실행하는 데 도움이 되는 다재다능한 라이브러리입니다. 이 고급 도구는 사실상 지휘자 역할을 하여 Git 내에서의 작업 흐름을 안내하고 개발자가 개발 과정을 보다 세밀하게 통제할 수 있도록 돕습니다. Husky는 Git 이벤트 사이에 전략적으로 배치된 후크를 구현하여 작동하며 작업 흐름을 섬세하게 조정할 수 있게 합니다. 이런 제어된 이벤트 저지 기법 패러다임은 보통 git 후크 관리로 불립니다.\n\n<div class=\"content-ad\"></div>\n\n## lint-staged\n\n깃에서 스테이징의 개념은 lint-staged의 가치를 이해하는 데 기초를 제공합니다. 코드 린트 활동을 수행할 때 개발자들은 종종 검사할 파일을 수동으로 지정해야 하는 선택을 직면할 수 있습니다. - 이는 잠재적으로 고통스러운 노력일 수 있습니다 - 또는 전체 프로젝트 저장소를 검토에 노출시킬 수 있습니다.\n그러나 프로젝트가 규모가 커질수록 복잡성도 증가합니다.\n이러한 맥락에서, 감독은 점점 걱정거리가 되며, 린트 과정 중 실수로 빠뜨린 파일이 상당히 많이 발생할 수 있습니다.\nlint-staged는 코드 품질 보증 분야에서 세련되고 전략적인 협업자입니다. 깃 add를 사용하여 스테이징 상태로 전환된 파일만 엄밀히 검사함으로써, lint-staged는 감독을 방지하고 린팅 정밀도와 효율성을 향상시키는 아주 우아한 해결책을 제공합니다.\n\n실용적인 사용법을 알아보겠습니다!\n\n## husky & lint-staged 사용하기\n\n<div class=\"content-ad\"></div>\n\nHusky 및 lint-staged을 설치하세요\n\n```js\nnpx mrm lint-staged\n```\n\n위 명령어를 실행하면 .husky라는 이름의 폴더가 생성되고 package.json 파일에 코드가 추가됩니다.\n\n```js\n{\n  \"scripts\": {\n    \"prepare\": \"husky install\"\n  },\n  ...\n  \"lint-staged\": {\n    \"*.js\": \"eslint --cache --fix\"\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## husky 설정하기\n\nmrm은 다운로드 시 기본 구성을 제공하기 때문에 별도로 구성할 것이 별로 없습니다. 그러나 재미를 위해 몇 가지 사용자 정의 문구를 셸 스크립트에 추가했습니다. (?)\n\n## lint-staged 설정하기\n\nlint-staged의 구성은 사용 중인 프로그래밍 언어에 따라 다를 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n나의 경우에는 TypeScript를 사용하고 있기 때문에 별도로 설정해주어야 했습니다.\n\n```js\n\"lint-staged\": {\n    \"*.{ts,tsx}\": [\n      \"prettier --write\",\n      \"eslint --max-warnings 0 .\"\n    ]\n}\n```\n\n처음에는 경고를 완전히 무시하고 싶지 않았기 때문에 --max-warnings 0을 포함시켰습니다.\n\n당신의 상황에 따라 제거하는 것도 고려해볼 수 있어요!\n\n<div class=\"content-ad\"></div>\n\n이제 실행하면 아래와 같이 Husky가 원활하게 작동하는 것을 확인할 수 있습니다.\n\n```bash\ngit commit -m 'husky work'\n```\n\n# 💀\n\n<img src=\"/assets/img/2024-06-23-UsingESLintHuskyLint-staged_1.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n# 😎\n\n![Image](/assets/img/2024-06-23-UsingESLintHuskyLint-staged_2.png)","ogImage":{"url":"/assets/img/2024-06-23-UsingESLintHuskyLint-staged_0.png"},"coverImage":"/assets/img/2024-06-23-UsingESLintHuskyLint-staged_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>저는 새로운 회사에 프론트엔드 개발자로 합류했어요!</p>\n<p>하지만 여기서 또 다시 시작되는군요 — 완벽한 코드 스타일을 위한 영원한 탐험이라니...</p>\n<p>제 개인적인 생각으로는 이 방대한 코딩 우주에서 '나쁜 코드'란 존재하지 않는다고 확신하고 있어요. 각자가 고유한 스타일을 갖고 있으니까 말이에요.</p>\n<p>그렇지만 5명 이상이 참여하는 프로젝트에서 각자 다른 스타일로 코딩한 걸 보면, 특히 네이밍 규약과 함수 이름 (사실 패턴까지도)에 다양한 스타일이 있음을 알게 되었어요.</p>\n<p>제가 회사에 새로 합류한 입장에서는 코드를 이해하는 데 시간이 걸렸는데, 이러한 시간을 최소화하기 위해 이름 규칙을 적어도 일관되게 적용할 방법에 대해 생각하기 시작했습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-UsingESLintHuskyLint-staged_0.png\" alt=\"이미지\"></p>\n<p>물론, 우리는 일반적으로 알려진 ESLint와 Prettier를 사용하고 있었습니다. 그러나 체크를 실행하지 않고 푸시하는 등 실수가 발생한 경우가 있었습니다.</p>\n<p>사실, 이는 이 두 도구의 사용을 무효화시키는 결과를 초래합니다!</p>\n<p>요즘에는 VSCode와 같은 IDE가 팝업 알림을 제공하지만, 커밋하기 전에 추가적인 확인을 하는 것도 나쁘지 않은 생각이에요.</p>\n<p>그래서, 커밋 전에 코드 스타일을 확인하는 라이브러리 husky를 사용해보자는 아이디어를 생각해냈어요. 이렇게 하면 더 편리할 거에요.</p>\n<p>추가적인 단계로, ESLint를 사용자 정의하여 내 규칙이나 회사별 규칙을 설정해볼 생각이에요!</p>\n<p>먼저, 대부분의 분들이 이미 알고 있을 것 같지만, ESLint와 Prettier가 무엇인지 간단히 설명드리겠어요.</p>\n<h2>ESLint: 코드의 수호천사 👼</h2>\n<p>ESLint를 만나보세요 — 당신의 신뢰할 수 있는 리터입니다. 그것은 하루를 구해주는 친구와 같아요!\n코드를 위한 문법 검사기를 가지고 있는 것 같아요.\nESLint는 교묘한 구문 오류를 잡는 것뿐만 아니라 일관된 코드 스타일을 위해 매치메이커 역할을 하며, 당신의 코드가 최상급인지 확인합니다. 🌟</p>\n<h2>Prettier: 코드 스타일리스트 ✨</h2>\n<p>코드베이스를 위한 패션 관리자가 있는 것 같아요.\nPrettier는 코드를 새롭게 꾸며주는 데 도움을 줍니다.</p>\n<p>이 두 가지 도구는 때때로 구성 사항 간의 충돌로 이어져있는 코드 스타일과 관련된 측면을 다룹니다. 이러한 충돌을 처리하는 것이 중요합니다.</p>\n<p>자, 이 글의 주요 내용인 Husky에 대해 살펴봅시다.</p>\n<h2>Husky</h2>\n<p>이전에 논의한 바와 같이 Husky는 git commit이나 git push와 같은 중요한 Git 이벤트가 발생하기 전에 지정된 스크립트를 실행하는 데 도움이 되는 다재다능한 라이브러리입니다. 이 고급 도구는 사실상 지휘자 역할을 하여 Git 내에서의 작업 흐름을 안내하고 개발자가 개발 과정을 보다 세밀하게 통제할 수 있도록 돕습니다. Husky는 Git 이벤트 사이에 전략적으로 배치된 후크를 구현하여 작동하며 작업 흐름을 섬세하게 조정할 수 있게 합니다. 이런 제어된 이벤트 저지 기법 패러다임은 보통 git 후크 관리로 불립니다.</p>\n<h2>lint-staged</h2>\n<p>깃에서 스테이징의 개념은 lint-staged의 가치를 이해하는 데 기초를 제공합니다. 코드 린트 활동을 수행할 때 개발자들은 종종 검사할 파일을 수동으로 지정해야 하는 선택을 직면할 수 있습니다. - 이는 잠재적으로 고통스러운 노력일 수 있습니다 - 또는 전체 프로젝트 저장소를 검토에 노출시킬 수 있습니다.\n그러나 프로젝트가 규모가 커질수록 복잡성도 증가합니다.\n이러한 맥락에서, 감독은 점점 걱정거리가 되며, 린트 과정 중 실수로 빠뜨린 파일이 상당히 많이 발생할 수 있습니다.\nlint-staged는 코드 품질 보증 분야에서 세련되고 전략적인 협업자입니다. 깃 add를 사용하여 스테이징 상태로 전환된 파일만 엄밀히 검사함으로써, lint-staged는 감독을 방지하고 린팅 정밀도와 효율성을 향상시키는 아주 우아한 해결책을 제공합니다.</p>\n<p>실용적인 사용법을 알아보겠습니다!</p>\n<h2>husky &#x26; lint-staged 사용하기</h2>\n<p>Husky 및 lint-staged을 설치하세요</p>\n<pre><code class=\"hljs language-js\">npx mrm lint-staged\n</code></pre>\n<p>위 명령어를 실행하면 .husky라는 이름의 폴더가 생성되고 package.json 파일에 코드가 추가됩니다.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"prepare\"</span>: <span class=\"hljs-string\">\"husky install\"</span>\n  },\n  ...\n  <span class=\"hljs-string\">\"lint-staged\"</span>: {\n    <span class=\"hljs-string\">\"*.js\"</span>: <span class=\"hljs-string\">\"eslint --cache --fix\"</span>\n  }\n}\n</code></pre>\n<h2>husky 설정하기</h2>\n<p>mrm은 다운로드 시 기본 구성을 제공하기 때문에 별도로 구성할 것이 별로 없습니다. 그러나 재미를 위해 몇 가지 사용자 정의 문구를 셸 스크립트에 추가했습니다. (?)</p>\n<h2>lint-staged 설정하기</h2>\n<p>lint-staged의 구성은 사용 중인 프로그래밍 언어에 따라 다를 수 있습니다.</p>\n<p>나의 경우에는 TypeScript를 사용하고 있기 때문에 별도로 설정해주어야 했습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"lint-staged\"</span>: {\n    <span class=\"hljs-string\">\"*.{ts,tsx}\"</span>: [\n      <span class=\"hljs-string\">\"prettier --write\"</span>,\n      <span class=\"hljs-string\">\"eslint --max-warnings 0 .\"</span>\n    ]\n}\n</code></pre>\n<p>처음에는 경고를 완전히 무시하고 싶지 않았기 때문에 --max-warnings 0을 포함시켰습니다.</p>\n<p>당신의 상황에 따라 제거하는 것도 고려해볼 수 있어요!</p>\n<p>이제 실행하면 아래와 같이 Husky가 원활하게 작동하는 것을 확인할 수 있습니다.</p>\n<pre><code class=\"hljs language-bash\">git commit -m <span class=\"hljs-string\">'husky work'</span>\n</code></pre>\n<h1>💀</h1>\n<h1>😎</h1>\n<p><img src=\"/assets/img/2024-06-23-UsingESLintHuskyLint-staged_2.png\" alt=\"Image\"></p>\n</body>\n</html>\n"},"__N_SSG":true}