{"pageProps":{"post":{"title":"TypeScript, Nodejs, 그리고 PostgreSQL과 함께 Sequelize를 사용하는 방법","description":"","date":"2024-05-20 22:18","slug":"2024-05-20-HowtoUseSequelizewithTypeScriptNodejsandPostgreSQL","content":"\n\n시작 가이드: TypeScript로 Sequelize 구성하기 \n\n모델, 연결 및 데이터베이스 연결을 정의하여 Sequelize를 TypeScript와 함께 설정하는 방법에 대해 알아보겠습니다.\n\n# 소개\n\n이 글에서는 Sequelize를 설정하여 TypeScript Node.js 및 Express를 연동하여 PostgreSQL 데이터베이스에 연결하고, 그 후에 조회용 샘플 모델을 만들어 보겠습니다.\n\nTypeScript, Node.js, Express.js 및 PostgreSQL을 함께 사용하면 견고한 백엔드 개발을 위한 강력한 조합을 제공합니다. Node.js를 위한 인기 있는 ORM인 Sequelize와 TypeScript의 정적 유형 지정 그리고 PostgreSQL의 신뢰성을 활용하여 효율적인 데이터 관리와 확장 가능성을 확보할 수 있습니다. 이 통합은 데이터의 모델링, 쿼리, 그리고 조작을 원활하게 하며 개발 경험을 향상시키면서 코드 무결성과 데이터베이스 무결성을 유지하는 데 도움이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n새로운 실시간 Node.js 앱이나 서비스를 시작할 때 가장 먼저 고려해야 할 것은 어디서 시작해야 하는지, 어떤 프레임워크나 ORM을 사용해야 하는지, 그리고 그것이 성능에 어떻게 영향을 미칠지 입니다. 또한, SQL 또는 NoSQL 데이터베이스를 선택하는 것에 따라 이 질문이 달라질 수 있습니다.\n\n# 사전 준비\n\n이 글에서는 TypeScript와 Express를 사용하여 이미 만들어 놓은 Node.js 보일러플레이트 코드를 사용할 것입니다.\n\n우리는 sequelize, pg, pg-hstore이 npm 모듈을 사용하여 어플리케이션을 설정할 것이고, Jest를 사용하여 유닛 테스트 케이스도 추가했습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// 애플리케이션 복제하기\ngit clone https://github.com/santoshshinde2012/node-boilerplate.git\n\n// 새 디렉토리로 변경\ncd node-boilerplate\n\n// 모든 모듈 설치\nnpm install\n\n// 애플리케이션 시작\nnpm start\n```\n\n# 단계 1: PostgreSQL 설정 및 데이터베이스 생성\n\n아래 스크립트로 폴더 docker/postgresql에 Dockerfile.postgis 파일을 생성합니다.\n\n```js\nFROM postgres:latest\n\n# PostGIS 확장 기능 설치\nRUN apt-get update \\\n    && apt-get install -y postgis postgresql-12-postgis-3 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# 초기 쿼리를 실행하기 위해 init.sql에 쿼리를 작성할 수 있습니다\nCOPY init.sql /docker-entrypoint-initdb.d/\n\n# PostGIS 확장 기능 활성화\nRUN echo \"CREATE EXTENSION IF NOT EXISTS postgis;\" >> /docker-entrypoint-initdb.d/init.sql\n```\n\n<div class=\"content-ad\"></div>\n\n도커 Compose 파일을 만들어주세요. docker/postgresql 폴더에 아래 스크립트를 작성해주세요.\n\n```js\n# PostgreSQL을 위한 docker-compose.yml\n\nversion: '3.8'\n\nservices:\n  db:\n    build:\n      context: .\n      dockerfile: Dockerfile.postgis  # 커스텀 Dockerfile 사용\n    restart: always\n    environment:\n      POSTGRES_USER: user1\n      POSTGRES_PASSWORD: user1@123\n      POSTGRES_DB: database\n    healthcheck:\n      # 이 명령어는 데이터베이스가 준비되어 있는지 소스 db 서버에서 확인합니다.\n      test: [ \"CMD-SHELL\", \"pg_isready\" ]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data_v:/var/lib/postgresql/data\nvolumes:\n  postgres_data_v:\n```\n\npackage.json 안에 Docker Compose 파일을 실행시키는 명령어를 추가해주세요.\n\n```js\n\"db:up\": \"docker-compose -f docker/postgresql/docker-compose.yml up\",\n\"db:down\": \"docker-compose -f docker/postgresql/docker-compose.yml down\"\n```\n\n<div class=\"content-ad\"></div>\n\nPostgresql을 실행하고 다음 명령어를 사용하여 데이터베이스를 생성하세요: npm run db:up.\n\n![image](/assets/img/2024-05-20-HowtoUseSequelizewithTypeScriptNodejsandPostgreSQL_0.png)\n\n# 단계 2: Sequelize의 설치 및 구성\n\nSequelize는 npm (또는 yarn)을 통해 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install --save sequelize\nnpm install --save pg pg-hstore # Postgres\n```\n\n작업을 마치면 코드를 배치할 폴더 구조를 확인해야 합니다. 코드가 깨끗하고 가독성 있게 유지되도록 하기 위해 코드베이스를 여러 폴더로 나누었습니다. 데이터베이스 관련 부분은 database 폴더 아래에 위치해야 합니다.\n\n<img src=\"/assets/img/2024-05-20-HowtoUseSequelizewithTypeScriptNodejsandPostgreSQL_1.png\" />\n\nsrc/database/config 폴더의 index.ts 파일에 데이터베이스 연결을 정의하고, .env npm 모듈을 사용하여 환경 변수를 가져옵니다. 환경에 따른 로직은 필요에 따라 수정할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nimport path from 'path';\nimport dotenv from 'dotenv';\n\ndotenv.config({\n    path: path.join(__dirname, '../../.env'),\n});\n\n타입 DbConnection = {\n    호스트: 문자열;\n    포트: 숫자;\n    사용자: 문자열;\n    비밀번호: 문자열;\n    데이터베이스: 문자열;\n    dbLogging: 부울;\n};\n\nconst connection: DbConnection = {\n    호스트: process.env.DB_HOST,\n    포트: Number(process.env.DB_PORT),\n    사용자: process.env.DB_USER,\n    비밀번호: process.env.DB_PASSWORD,\n    데이터베이스: process.env.DB_NAME,\n    dbLogging:\n        process.env.NODE_ENV === 'development' || process.env.LOG === 'true',\n};\n\nexport default connection;\n```\n\nsrc/database 폴더에 index.ts 파일을 생성하여 sequelize 연결을 만듭니다.\n\n```js\nimport { Dialect, Sequelize } from 'sequelize';\nimport connection from './config';\n\nconst { database, user, password, host, dbLogging } = connection;\n\nconst sequelizeConnection = new Sequelize(database, user, password, {\n    host,\n    logging: dbLogging,\n    dialect: 'postgres' as Dialect,\n});\n\nexport default sequelizeConnection;\n```\n\nsrc/App.ts 또는 서버 응용 프로그램의 진입 파일에 assertDatabaseConnection 메서드를 만들어 데이터베이스 확인을하는 메서드를 호출하세요.\n\n\n<div class=\"content-ad\"></div>\n\n```js\n개인 async assertDatabaseConnection(): Promise<void> {\n    try {\n     await database.authenticate();\n     await database.sync();\n     logger.info('연결이 성공적으로 설정되었습니다.');\n    } catch (error) {\n logger.error('데이터베이스에 연결할 수 없습니다:', error);\n    }\n}\n```\n\n# 단계 3: Sequelize를 사용하여 테이블(모델) 생성\n\nsrc/database/models 폴더에 모델을 정의하세요; 여기서는 샘플 모델인 Enquiry.ts를 생성할 것입니다.\n\n```js\nimport { DataTypes, Model, Optional, UUIDV4 } from 'sequelize';\nimport sequelize from '../index';\n\ninterface EnquiryAttributes {\n id: string;\n name: string;\n subject: string;\n body: string;\n email: string;\n country: string;\n}\n\ninterface EnquiryCreationAttributes\n extends Optional<EnquiryAttributes, 'id'> {}\n\nclass Enquiry\n extends Model<EnquiryAttributes, EnquiryCreationAttributes>\n implements EnquiryAttributes\n{\n public id!: string;\n public name!: string;\n public country!: string;\n public subject!: string;\n public body!: string;\n public email!: string;\n\n public readonly createdAt!: Date;\n public readonly updatedAt!: Date;\n}\n\nEnquiry.init(\n {\n  id: {\n   type: DataTypes.UUID,\n   defaultValue: UUIDV4,\n   primaryKey: true,\n  },\n  name: {\n   type: DataTypes.STRING(100),\n   allowNull: false,\n  },\n  country: {\n   type: DataTypes.STRING(100),\n   allowNull: false,\n  },\n  subject: {\n   type: DataTypes.STRING(200),\n   allowNull: false,\n  },\n  email: {\n   type: DataTypes.STRING(100),\n   allowNull: false,\n  },\n  body: {\n   type: DataTypes.STRING(400),\n   allowNull: false,\n  }\n },\n {\n  sequelize,\n  modelName: 'Enquiry',\n  tableName: 'Enquiry',\n  timestamps: true,\n },\n);\n\nexport { Enquiry, EnquiryAttributes, EnquiryCreationAttributes };\n```\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { 데이터 유형, 모델, 선택적, UUIDV4 } from 'sequelize';\nimport sequelize from '../index';\n\n인터페이스 조회 속성 {\n id: string;\n 이름: string;\n 주제: string;\n 본문: string;\n 이메일: string;\n 국가: string;\n}\n\n인터페이스 EnquiryCreationAttributes 에 이어, EnquiryAttributes의 선택적 해제 {}\n\n클래스 Enquiry은 Model<EnquiryAttributes, EnquiryCreationAttributes>를 확장하며 EnquiryAttributes를 구현합니다 {\n 공공 id!: string;\n 공공 이름!: string;\n 공공 국가!: string;\n 공공 주제!: string;\n 공공 몸통!: string;\n 공공 이메일!: string;\n\n 공공 readonly createdAt!: Date;\n 공공 readonly updatedAt!: Date;\n}\n\nEnquiry.init(\n {\n  아이디: {\n   유형: 데이터 유형.UUID,\n   기본값: UUIDV4,\n   기본 키: 참,\n  },\n  이름: {\n   유형: 데이터 유형.STRING(100),\n   허용하지 않음: 거짓,\n  },\n  국가: {\n   유형: 데이터 유형.STRING(100),\n   허용하지 않음: 거짓,\n  },\n  주제: {\n   유형: 데이터 유형.STRING(200),\n   허용하지 않음: 거짓,\n  },\n  이메일: {\n   유형: 데이터 유형.STRING(100),\n   허용하지 않음: 거짓,\n  },\n  몸통: {\n   유형: 데이터 유형.STRING(400),\n   허용하지 않음: 거짓,\n  }\n },\n {\n  시퀄라이즈,\n  모델 이름: '조회',\n  테이블 이름: '조회',\n  타임 스탬프: 참,\n },\n);\n\n수출 { 조회, EnquiryAttributes, EnquiryCreationAttributes };\n```\n\n<img src=\"/assets/img/2024-05-20-HowtoUseSequelizewithTypeScriptNodejsandPostgreSQL_2.png\" />\n\n# 단계 4: 구성 요소에서 서비스 및 컨트롤러 설정\n\n- 구성 요소 구성 요소는 두 부분으로 나뉩니다: 컨트롤러 및 서비스 서비스는 해당 데이터베이스 모델과 통신하는 데 책임이 있습니다.\n- 라우트 — 컨트롤러 및 해당 레스트 엔드포인트의 등록 방법을 등록합니다.\n- 공통 서비스 —이 서비스는 여러 데이터베이스 모델 간의 일반 작업 수행에 책임이 있습니다.\n- 이를 구성 요소 서비스에 주입하고 구성 요소 서비스에서 컨트롤러에서 해당 메서드에 액세스할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\n// src/components/enquiry/EnquiryService.ts 파일을 생성하여 sequelize를 사용하여 생성된 모델의 데이터베이스 작업을 처리합니다.\n\nimport {\n Enquiry,\n EnquiryAttributes,\n EnquiryCreationAttributes,\n} from '../../database/models/Enquiry';\nimport logger from '../../lib/logger';\nimport ApiError from '../../abstractions/ApiError';\nimport { StatusCodes } from 'http-status-codes';\n\nexport class EnquiryService {\n\n async getAll(): Promise<EnquiryAttributes[]> {\n  try {\n   const enquiries = await Enquiry.findAll();\n   return enquiries;\n  } catch (error) {\n   logger.error(error);\n   throw error;\n  }\n }\n\n async getById(id: string | number): Promise<EnquiryAttributes> {\n  try {\n   const enquiry = await Enquiry.findByPk(id);\n   if (!enquiry) {\n    throw new ApiError('Enquiry not found', StatusCodes.NOT_FOUND);\n   }\n   return enquiry;\n  } catch (error) {\n   logger.error(error);\n   throw error;\n  }\n }\n\n async update(\n  id: string | number,\n  payload: Partial<EnquiryCreationAttributes>,\n ): Promise<EnquiryAttributes> {\n  try {\n   const enquiry = await Enquiry.findByPk(id);\n   if (!enquiry) {\n    throw new ApiError(\n     'Enquiry not found',\n     StatusCodes.NOT_FOUND,\n    );\n   }\n   const updatedEnquiry = await enquiry.update(payload);\n   return updatedEnquiry;\n  } catch (error) {\n   logger.error(error);\n   throw error;\n  }\n }\n\n async create(\n  payload: EnquiryCreationAttributes,\n ): Promise<EnquiryAttributes> {\n  try {\n   const enquiry = await Enquiry.create(payload);\n   return enquiry;\n  } catch (error) {\n   logger.error(error);\n   throw error;\n  }\n }\n\n async delete(id: string | number): Promise<boolean> {\n  try {\n   const deletedEnquiryCount = await Enquiry.destroy({\n    where: { id },\n   });\n\n   return !!deletedEnquiryCount;\n  } catch (error) {\n   logger.error(error);\n   throw error;\n  }\n }\n}\n```\n\n```js\n// src/components/enquiry/EnquiryController.ts 파일을 생성하여 REST API의 컨트롤러 부분을 처리합니다.\n\nimport { NextFunction, Request, Response, Router } from 'express';\nimport { ReasonPhrases, StatusCodes } from 'http-status-codes';\nimport BaseApi from '../BaseApi';\nimport { EnquiryService } from './EnquiryService';\nimport { EnquiryAttributes } from '../../database/models/Enquiry';\nimport ApiError from '../../abstractions/ApiError';\n\n/**\n * Enquiry controller\n */\nexport default class EnquiryController extends BaseApi {\n private enquiry: EnquiryService;\n public basePath: string = 'enquiries';\n\n constructor() {\n  super();\n  this.enquiry = new EnquiryService();\n }\n\n /**\n  *\n  */\n public routes(): RouteDefinition[] {\n  return [\n   { path: '/', method: 'get', handler: this.getEnquiries.bind(this) },\n   { path: '/:id', method: 'get', handler: this.getEnquiry.bind(this) },\n   { path: '/', method: 'post', handler: this.createEnquiry.bind(this) },\n   { path: '/:id', method: 'put', handler: this.updateEnquiry.bind(this) },\n   { path: '/:id', method: 'delete', handler: this.delete.bind(this) }\n  ];\n }\n\n /**\n  *\n  * @param req\n  * @param res\n  * @param next\n  */\n public async getEnquiries(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n ): Promise<void> {\n  try {\n   const enquiries: EnquiryAttributes[] =\n    await this.enquiry.getAll();\n   res.locals.data = enquiries;\n   // call base class method\n   this.send(res);\n  } catch (err) {\n   next(err);\n  }\n }\n\n // 이하 생략\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 5: 구성 요소를 위한 REST API 생성\n\n문의: 문의는 속성 집합을 가진 주요 엔터티입니다.\n\n- GET /v1/enquiries 모든 문의 목록을 가져옵니다.\n- POST /v1/enquiries 새로운 문의를 생성합니다.\n- GET /v1/enquiries/'id' 특정 문의의 세부 정보를 가져옵니다.\n- PUT /v1/enquiries/'id' 특정 문의의 세부 정보를 업데이트합니다.\n- DELETE /v1/enquiries/'id' 특정 문의를 삭제합니다.\n\n우리는 이전에 정의한 경로를 등록해야 합니다. 이를 위해 src/routes.ts에 항목을 만들어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n아래 링크에서 전체 코드베이스를 찾을 수 있습니다. 초보자를 염두에 두고 설계된 이 저장소는 백엔드 프로젝트를 시작하는 데 튼튼한 출발점을 제공합니다. 단위 테스트 케이스가 포함된 잘 정리된 코드베이스로 깊게 파고들며 학습하고 문제 해결을 쉽게 할 수 있습니다. 게다가 GitHub Actions 워크플로가 통합되어 있어 테스트와 배포를 자동화할 수 있습니다. 학습을 시작하거나 첫 번째 실제 애플리케이션을 구축하려는 경우에도 유용합니다.\n\n읽어 주셔서 감사합니다. 이 블로그가 학습에 가치가 있다고 생각되면 의견을 공유하고 클랩(clap)을 눌러주세요.\n\n<div class=\"content-ad\"></div>\n\n# 친절한 언어로 🚀\n\nIn Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 작가를 claps하고 팔로우 해주세요 👏️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed\n- PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요","ogImage":{"url":"/assets/img/2024-05-20-HowtoUseSequelizewithTypeScriptNodejsandPostgreSQL_0.png"},"coverImage":"/assets/img/2024-05-20-HowtoUseSequelizewithTypeScriptNodejsandPostgreSQL_0.png","tag":["Tech"],"readingTime":12},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>시작 가이드: TypeScript로 Sequelize 구성하기</p>\n<p>모델, 연결 및 데이터베이스 연결을 정의하여 Sequelize를 TypeScript와 함께 설정하는 방법에 대해 알아보겠습니다.</p>\n<h1>소개</h1>\n<p>이 글에서는 Sequelize를 설정하여 TypeScript Node.js 및 Express를 연동하여 PostgreSQL 데이터베이스에 연결하고, 그 후에 조회용 샘플 모델을 만들어 보겠습니다.</p>\n<p>TypeScript, Node.js, Express.js 및 PostgreSQL을 함께 사용하면 견고한 백엔드 개발을 위한 강력한 조합을 제공합니다. Node.js를 위한 인기 있는 ORM인 Sequelize와 TypeScript의 정적 유형 지정 그리고 PostgreSQL의 신뢰성을 활용하여 효율적인 데이터 관리와 확장 가능성을 확보할 수 있습니다. 이 통합은 데이터의 모델링, 쿼리, 그리고 조작을 원활하게 하며 개발 경험을 향상시키면서 코드 무결성과 데이터베이스 무결성을 유지하는 데 도움이 됩니다.</p>\n<p>새로운 실시간 Node.js 앱이나 서비스를 시작할 때 가장 먼저 고려해야 할 것은 어디서 시작해야 하는지, 어떤 프레임워크나 ORM을 사용해야 하는지, 그리고 그것이 성능에 어떻게 영향을 미칠지 입니다. 또한, SQL 또는 NoSQL 데이터베이스를 선택하는 것에 따라 이 질문이 달라질 수 있습니다.</p>\n<h1>사전 준비</h1>\n<p>이 글에서는 TypeScript와 Express를 사용하여 이미 만들어 놓은 Node.js 보일러플레이트 코드를 사용할 것입니다.</p>\n<p>우리는 sequelize, pg, pg-hstore이 npm 모듈을 사용하여 어플리케이션을 설정할 것이고, Jest를 사용하여 유닛 테스트 케이스도 추가했습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 애플리케이션 복제하기</span>\ngit clone <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/santoshshinde2012/node-boilerplate.git</span>\n\n<span class=\"hljs-comment\">// 새 디렉토리로 변경</span>\ncd node-boilerplate\n\n<span class=\"hljs-comment\">// 모든 모듈 설치</span>\nnpm install\n\n<span class=\"hljs-comment\">// 애플리케이션 시작</span>\nnpm start\n</code></pre>\n<h1>단계 1: PostgreSQL 설정 및 데이터베이스 생성</h1>\n<p>아래 스크립트로 폴더 docker/postgresql에 Dockerfile.postgis 파일을 생성합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">postgres</span>:latest\n\n# <span class=\"hljs-title class_\">PostGIS</span> 확장 기능 설치\n<span class=\"hljs-variable constant_\">RUN</span> apt-get update \\\n    &#x26;&#x26; apt-get install -y postgis postgresql-<span class=\"hljs-number\">12</span>-postgis-<span class=\"hljs-number\">3</span> \\\n    &#x26;&#x26; apt-get clean \\\n    &#x26;&#x26; rm -rf /<span class=\"hljs-keyword\">var</span>/lib/apt/lists<span class=\"hljs-comment\">/*\n\n# 초기 쿼리를 실행하기 위해 init.sql에 쿼리를 작성할 수 있습니다\nCOPY init.sql /docker-entrypoint-initdb.d/\n\n# PostGIS 확장 기능 활성화\nRUN echo \"CREATE EXTENSION IF NOT EXISTS postgis;\" >> /docker-entrypoint-initdb.d/init.sql\n</span></code></pre>\n<p>도커 Compose 파일을 만들어주세요. docker/postgresql 폴더에 아래 스크립트를 작성해주세요.</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">PostgreSQL</span>을 위한 docker-compose.<span class=\"hljs-property\">yml</span>\n\n<span class=\"hljs-attr\">version</span>: <span class=\"hljs-string\">'3.8'</span>\n\n<span class=\"hljs-attr\">services</span>:\n  <span class=\"hljs-attr\">db</span>:\n    <span class=\"hljs-attr\">build</span>:\n      <span class=\"hljs-attr\">context</span>: .\n      <span class=\"hljs-attr\">dockerfile</span>: <span class=\"hljs-title class_\">Dockerfile</span>.<span class=\"hljs-property\">postgis</span>  # 커스텀 <span class=\"hljs-title class_\">Dockerfile</span> 사용\n    <span class=\"hljs-attr\">restart</span>: always\n    <span class=\"hljs-attr\">environment</span>:\n      <span class=\"hljs-attr\">POSTGRES_USER</span>: user1\n      <span class=\"hljs-attr\">POSTGRES_PASSWORD</span>: user1@<span class=\"hljs-number\">123</span>\n      <span class=\"hljs-attr\">POSTGRES_DB</span>: database\n    <span class=\"hljs-attr\">healthcheck</span>:\n      # 이 명령어는 데이터베이스가 준비되어 있는지 소스 db 서버에서 확인합니다.\n      <span class=\"hljs-attr\">test</span>: [ <span class=\"hljs-string\">\"CMD-SHELL\"</span>, <span class=\"hljs-string\">\"pg_isready\"</span> ]\n      <span class=\"hljs-attr\">interval</span>: 5s\n      <span class=\"hljs-attr\">timeout</span>: 5s\n      <span class=\"hljs-attr\">retries</span>: <span class=\"hljs-number\">5</span>\n    <span class=\"hljs-attr\">ports</span>:\n      - <span class=\"hljs-string\">\"5432:5432\"</span>\n    <span class=\"hljs-attr\">volumes</span>:\n      - <span class=\"hljs-attr\">postgres_data_v</span>:<span class=\"hljs-regexp\">/var/</span>lib/postgresql/data\n<span class=\"hljs-attr\">volumes</span>:\n  <span class=\"hljs-attr\">postgres_data_v</span>:\n</code></pre>\n<p>package.json 안에 Docker Compose 파일을 실행시키는 명령어를 추가해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"db:up\"</span>: <span class=\"hljs-string\">\"docker-compose -f docker/postgresql/docker-compose.yml up\"</span>,\n<span class=\"hljs-string\">\"db:down\"</span>: <span class=\"hljs-string\">\"docker-compose -f docker/postgresql/docker-compose.yml down\"</span>\n</code></pre>\n<p>Postgresql을 실행하고 다음 명령어를 사용하여 데이터베이스를 생성하세요: npm run db:up.</p>\n<p><img src=\"/assets/img/2024-05-20-HowtoUseSequelizewithTypeScriptNodejsandPostgreSQL_0.png\" alt=\"image\"></p>\n<h1>단계 2: Sequelize의 설치 및 구성</h1>\n<p>Sequelize는 npm (또는 yarn)을 통해 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">npm install --save sequelize\nnpm install --save pg pg-hstore # <span class=\"hljs-title class_\">Postgres</span>\n</code></pre>\n<p>작업을 마치면 코드를 배치할 폴더 구조를 확인해야 합니다. 코드가 깨끗하고 가독성 있게 유지되도록 하기 위해 코드베이스를 여러 폴더로 나누었습니다. 데이터베이스 관련 부분은 database 폴더 아래에 위치해야 합니다.</p>\n<p>src/database/config 폴더의 index.ts 파일에 데이터베이스 연결을 정의하고, .env npm 모듈을 사용하여 환경 변수를 가져옵니다. 환경에 따른 로직은 필요에 따라 수정할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'path'</span>;\n<span class=\"hljs-keyword\">import</span> dotenv <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'dotenv'</span>;\n\ndotenv.<span class=\"hljs-title function_\">config</span>({\n    <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">'../../.env'</span>),\n});\n\n타입 <span class=\"hljs-title class_\">DbConnection</span> = {\n    호스트: 문자열;\n    포트: 숫자;\n    사용자: 문자열;\n    비밀번호: 문자열;\n    데이터베이스: 문자열;\n    <span class=\"hljs-attr\">dbLogging</span>: 부울;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">connection</span>: <span class=\"hljs-title class_\">DbConnection</span> = {\n    호스트: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DB_HOST</span>,\n    포트: <span class=\"hljs-title class_\">Number</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DB_PORT</span>),\n    사용자: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DB_USER</span>,\n    비밀번호: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DB_PASSWORD</span>,\n    데이터베이스: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DB_NAME</span>,\n    <span class=\"hljs-attr\">dbLogging</span>:\n        process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> === <span class=\"hljs-string\">'development'</span> || process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">LOG</span> === <span class=\"hljs-string\">'true'</span>,\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> connection;\n</code></pre>\n<p>src/database 폴더에 index.ts 파일을 생성하여 sequelize 연결을 만듭니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Dialect</span>, <span class=\"hljs-title class_\">Sequelize</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'sequelize'</span>;\n<span class=\"hljs-keyword\">import</span> connection <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./config'</span>;\n\n<span class=\"hljs-keyword\">const</span> { database, user, password, host, dbLogging } = connection;\n\n<span class=\"hljs-keyword\">const</span> sequelizeConnection = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Sequelize</span>(database, user, password, {\n    host,\n    <span class=\"hljs-attr\">logging</span>: dbLogging,\n    <span class=\"hljs-attr\">dialect</span>: <span class=\"hljs-string\">'postgres'</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Dialect</span>,\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> sequelizeConnection;\n</code></pre>\n<p>src/App.ts 또는 서버 응용 프로그램의 진입 파일에 assertDatabaseConnection 메서드를 만들어 데이터베이스 확인을하는 메서드를 호출하세요.</p>\n<pre><code class=\"hljs language-js\">개인 <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">assertDatabaseConnection</span>(): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-keyword\">void</span>> {\n    <span class=\"hljs-keyword\">try</span> {\n     <span class=\"hljs-keyword\">await</span> database.<span class=\"hljs-title function_\">authenticate</span>();\n     <span class=\"hljs-keyword\">await</span> database.<span class=\"hljs-title function_\">sync</span>();\n     logger.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">'연결이 성공적으로 설정되었습니다.'</span>);\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n logger.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'데이터베이스에 연결할 수 없습니다:'</span>, error);\n    }\n}\n</code></pre>\n<h1>단계 3: Sequelize를 사용하여 테이블(모델) 생성</h1>\n<p>src/database/models 폴더에 모델을 정의하세요; 여기서는 샘플 모델인 Enquiry.ts를 생성할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DataTypes</span>, <span class=\"hljs-title class_\">Model</span>, <span class=\"hljs-title class_\">Optional</span>, <span class=\"hljs-title class_\">UUIDV4</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'sequelize'</span>;\n<span class=\"hljs-keyword\">import</span> sequelize <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../index'</span>;\n\ninterface <span class=\"hljs-title class_\">EnquiryAttributes</span> {\n <span class=\"hljs-attr\">id</span>: string;\n <span class=\"hljs-attr\">name</span>: string;\n <span class=\"hljs-attr\">subject</span>: string;\n <span class=\"hljs-attr\">body</span>: string;\n <span class=\"hljs-attr\">email</span>: string;\n <span class=\"hljs-attr\">country</span>: string;\n}\n\ninterface <span class=\"hljs-title class_\">EnquiryCreationAttributes</span>\n <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Optional</span>&#x3C;<span class=\"hljs-title class_\">EnquiryAttributes</span>, <span class=\"hljs-string\">'id'</span>> {}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Enquiry</span>\n <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Model</span>&#x3C;<span class=\"hljs-title class_\">EnquiryAttributes</span>, <span class=\"hljs-title class_\">EnquiryCreationAttributes</span>>\n implements <span class=\"hljs-title class_\">EnquiryAttributes</span>\n{\n public id!: string;\n public name!: string;\n public country!: string;\n public subject!: string;\n public body!: string;\n public email!: string;\n\n public readonly createdAt!: <span class=\"hljs-title class_\">Date</span>;\n public readonly updatedAt!: <span class=\"hljs-title class_\">Date</span>;\n}\n\n<span class=\"hljs-title class_\">Enquiry</span>.<span class=\"hljs-title function_\">init</span>(\n {\n  <span class=\"hljs-attr\">id</span>: {\n   <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">DataTypes</span>.<span class=\"hljs-property\">UUID</span>,\n   <span class=\"hljs-attr\">defaultValue</span>: <span class=\"hljs-title class_\">UUIDV4</span>,\n   <span class=\"hljs-attr\">primaryKey</span>: <span class=\"hljs-literal\">true</span>,\n  },\n  <span class=\"hljs-attr\">name</span>: {\n   <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">DataTypes</span>.<span class=\"hljs-title function_\">STRING</span>(<span class=\"hljs-number\">100</span>),\n   <span class=\"hljs-attr\">allowNull</span>: <span class=\"hljs-literal\">false</span>,\n  },\n  <span class=\"hljs-attr\">country</span>: {\n   <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">DataTypes</span>.<span class=\"hljs-title function_\">STRING</span>(<span class=\"hljs-number\">100</span>),\n   <span class=\"hljs-attr\">allowNull</span>: <span class=\"hljs-literal\">false</span>,\n  },\n  <span class=\"hljs-attr\">subject</span>: {\n   <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">DataTypes</span>.<span class=\"hljs-title function_\">STRING</span>(<span class=\"hljs-number\">200</span>),\n   <span class=\"hljs-attr\">allowNull</span>: <span class=\"hljs-literal\">false</span>,\n  },\n  <span class=\"hljs-attr\">email</span>: {\n   <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">DataTypes</span>.<span class=\"hljs-title function_\">STRING</span>(<span class=\"hljs-number\">100</span>),\n   <span class=\"hljs-attr\">allowNull</span>: <span class=\"hljs-literal\">false</span>,\n  },\n  <span class=\"hljs-attr\">body</span>: {\n   <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">DataTypes</span>.<span class=\"hljs-title function_\">STRING</span>(<span class=\"hljs-number\">400</span>),\n   <span class=\"hljs-attr\">allowNull</span>: <span class=\"hljs-literal\">false</span>,\n  }\n },\n {\n  sequelize,\n  <span class=\"hljs-attr\">modelName</span>: <span class=\"hljs-string\">'Enquiry'</span>,\n  <span class=\"hljs-attr\">tableName</span>: <span class=\"hljs-string\">'Enquiry'</span>,\n  <span class=\"hljs-attr\">timestamps</span>: <span class=\"hljs-literal\">true</span>,\n },\n);\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Enquiry</span>, <span class=\"hljs-title class_\">EnquiryAttributes</span>, <span class=\"hljs-title class_\">EnquiryCreationAttributes</span> };\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { 데이터 유형, 모델, 선택적, <span class=\"hljs-title class_\">UUIDV4</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'sequelize'</span>;\n<span class=\"hljs-keyword\">import</span> sequelize <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../index'</span>;\n\n인터페이스 조회 속성 {\n <span class=\"hljs-attr\">id</span>: string;\n 이름: string;\n 주제: string;\n 본문: string;\n 이메일: string;\n 국가: string;\n}\n\n인터페이스 <span class=\"hljs-title class_\">EnquiryCreationAttributes</span> 에 이어, <span class=\"hljs-title class_\">EnquiryAttributes</span>의 선택적 해제 {}\n\n클래스 <span class=\"hljs-title class_\">Enquiry</span>은 <span class=\"hljs-title class_\">Model</span>&#x3C;<span class=\"hljs-title class_\">EnquiryAttributes</span>, <span class=\"hljs-title class_\">EnquiryCreationAttributes</span>>를 확장하며 <span class=\"hljs-title class_\">EnquiryAttributes</span>를 구현합니다 {\n 공공 id!: string;\n 공공 이름!: string;\n 공공 국가!: string;\n 공공 주제!: string;\n 공공 몸통!: string;\n 공공 이메일!: string;\n\n 공공 readonly createdAt!: <span class=\"hljs-title class_\">Date</span>;\n 공공 readonly updatedAt!: <span class=\"hljs-title class_\">Date</span>;\n}\n\n<span class=\"hljs-title class_\">Enquiry</span>.<span class=\"hljs-title function_\">init</span>(\n {\n  아이디: {\n   유형: 데이터 유형.<span class=\"hljs-property\">UUID</span>,\n   기본값: <span class=\"hljs-title class_\">UUIDV4</span>,\n   기본 키: 참,\n  },\n  이름: {\n   유형: 데이터 유형.<span class=\"hljs-title function_\">STRING</span>(<span class=\"hljs-number\">100</span>),\n   허용하지 않음: 거짓,\n  },\n  국가: {\n   유형: 데이터 유형.<span class=\"hljs-title function_\">STRING</span>(<span class=\"hljs-number\">100</span>),\n   허용하지 않음: 거짓,\n  },\n  주제: {\n   유형: 데이터 유형.<span class=\"hljs-title function_\">STRING</span>(<span class=\"hljs-number\">200</span>),\n   허용하지 않음: 거짓,\n  },\n  이메일: {\n   유형: 데이터 유형.<span class=\"hljs-title function_\">STRING</span>(<span class=\"hljs-number\">100</span>),\n   허용하지 않음: 거짓,\n  },\n  몸통: {\n   유형: 데이터 유형.<span class=\"hljs-title function_\">STRING</span>(<span class=\"hljs-number\">400</span>),\n   허용하지 않음: 거짓,\n  }\n },\n {\n  시퀄라이즈,\n  모델 이름: <span class=\"hljs-string\">'조회'</span>,\n  테이블 이름: <span class=\"hljs-string\">'조회'</span>,\n  타임 스탬프: 참,\n },\n);\n\n수출 { 조회, <span class=\"hljs-title class_\">EnquiryAttributes</span>, <span class=\"hljs-title class_\">EnquiryCreationAttributes</span> };\n</code></pre>\n<h1>단계 4: 구성 요소에서 서비스 및 컨트롤러 설정</h1>\n<ul>\n<li>구성 요소 구성 요소는 두 부분으로 나뉩니다: 컨트롤러 및 서비스 서비스는 해당 데이터베이스 모델과 통신하는 데 책임이 있습니다.</li>\n<li>라우트 — 컨트롤러 및 해당 레스트 엔드포인트의 등록 방법을 등록합니다.</li>\n<li>공통 서비스 —이 서비스는 여러 데이터베이스 모델 간의 일반 작업 수행에 책임이 있습니다.</li>\n<li>이를 구성 요소 서비스에 주입하고 구성 요소 서비스에서 컨트롤러에서 해당 메서드에 액세스할 수 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/enquiry/EnquiryService.ts 파일을 생성하여 sequelize를 사용하여 생성된 모델의 데이터베이스 작업을 처리합니다.</span>\n\n<span class=\"hljs-keyword\">import</span> {\n <span class=\"hljs-title class_\">Enquiry</span>,\n <span class=\"hljs-title class_\">EnquiryAttributes</span>,\n <span class=\"hljs-title class_\">EnquiryCreationAttributes</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../database/models/Enquiry'</span>;\n<span class=\"hljs-keyword\">import</span> logger <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../lib/logger'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ApiError</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../abstractions/ApiError'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">StatusCodes</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'http-status-codes'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EnquiryService</span> {\n\n <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getAll</span>(): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">EnquiryAttributes</span>[]> {\n  <span class=\"hljs-keyword\">try</span> {\n   <span class=\"hljs-keyword\">const</span> enquiries = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Enquiry</span>.<span class=\"hljs-title function_\">findAll</span>();\n   <span class=\"hljs-keyword\">return</span> enquiries;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n   logger.<span class=\"hljs-title function_\">error</span>(error);\n   <span class=\"hljs-keyword\">throw</span> error;\n  }\n }\n\n <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getById</span>(<span class=\"hljs-attr\">id</span>: string | number): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">EnquiryAttributes</span>> {\n  <span class=\"hljs-keyword\">try</span> {\n   <span class=\"hljs-keyword\">const</span> enquiry = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Enquiry</span>.<span class=\"hljs-title function_\">findByPk</span>(id);\n   <span class=\"hljs-keyword\">if</span> (!enquiry) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiError</span>(<span class=\"hljs-string\">'Enquiry not found'</span>, <span class=\"hljs-title class_\">StatusCodes</span>.<span class=\"hljs-property\">NOT_FOUND</span>);\n   }\n   <span class=\"hljs-keyword\">return</span> enquiry;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n   logger.<span class=\"hljs-title function_\">error</span>(error);\n   <span class=\"hljs-keyword\">throw</span> error;\n  }\n }\n\n <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">update</span>(\n  <span class=\"hljs-attr\">id</span>: string | number,\n  <span class=\"hljs-attr\">payload</span>: <span class=\"hljs-title class_\">Partial</span>&#x3C;<span class=\"hljs-title class_\">EnquiryCreationAttributes</span>>,\n ): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">EnquiryAttributes</span>> {\n  <span class=\"hljs-keyword\">try</span> {\n   <span class=\"hljs-keyword\">const</span> enquiry = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Enquiry</span>.<span class=\"hljs-title function_\">findByPk</span>(id);\n   <span class=\"hljs-keyword\">if</span> (!enquiry) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiError</span>(\n     <span class=\"hljs-string\">'Enquiry not found'</span>,\n     <span class=\"hljs-title class_\">StatusCodes</span>.<span class=\"hljs-property\">NOT_FOUND</span>,\n    );\n   }\n   <span class=\"hljs-keyword\">const</span> updatedEnquiry = <span class=\"hljs-keyword\">await</span> enquiry.<span class=\"hljs-title function_\">update</span>(payload);\n   <span class=\"hljs-keyword\">return</span> updatedEnquiry;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n   logger.<span class=\"hljs-title function_\">error</span>(error);\n   <span class=\"hljs-keyword\">throw</span> error;\n  }\n }\n\n <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">create</span>(\n  <span class=\"hljs-attr\">payload</span>: <span class=\"hljs-title class_\">EnquiryCreationAttributes</span>,\n ): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">EnquiryAttributes</span>> {\n  <span class=\"hljs-keyword\">try</span> {\n   <span class=\"hljs-keyword\">const</span> enquiry = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Enquiry</span>.<span class=\"hljs-title function_\">create</span>(payload);\n   <span class=\"hljs-keyword\">return</span> enquiry;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n   logger.<span class=\"hljs-title function_\">error</span>(error);\n   <span class=\"hljs-keyword\">throw</span> error;\n  }\n }\n\n <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-attr\">id</span>: string | number): <span class=\"hljs-title class_\">Promise</span>&#x3C;boolean> {\n  <span class=\"hljs-keyword\">try</span> {\n   <span class=\"hljs-keyword\">const</span> deletedEnquiryCount = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Enquiry</span>.<span class=\"hljs-title function_\">destroy</span>({\n    <span class=\"hljs-attr\">where</span>: { id },\n   });\n\n   <span class=\"hljs-keyword\">return</span> !!deletedEnquiryCount;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n   logger.<span class=\"hljs-title function_\">error</span>(error);\n   <span class=\"hljs-keyword\">throw</span> error;\n  }\n }\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/enquiry/EnquiryController.ts 파일을 생성하여 REST API의 컨트롤러 부분을 처리합니다.</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NextFunction</span>, <span class=\"hljs-title class_\">Request</span>, <span class=\"hljs-title class_\">Response</span>, <span class=\"hljs-title class_\">Router</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'express'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ReasonPhrases</span>, <span class=\"hljs-title class_\">StatusCodes</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'http-status-codes'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">BaseApi</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../BaseApi'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">EnquiryService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./EnquiryService'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">EnquiryAttributes</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../database/models/Enquiry'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ApiError</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../abstractions/ApiError'</span>;\n\n<span class=\"hljs-comment\">/**\n * Enquiry controller\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EnquiryController</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">BaseApi</span> {\n private <span class=\"hljs-attr\">enquiry</span>: <span class=\"hljs-title class_\">EnquiryService</span>;\n public <span class=\"hljs-attr\">basePath</span>: string = <span class=\"hljs-string\">'enquiries'</span>;\n\n <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">super</span>();\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">enquiry</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EnquiryService</span>();\n }\n\n <span class=\"hljs-comment\">/**\n  *\n  */</span>\n public <span class=\"hljs-title function_\">routes</span>(): <span class=\"hljs-title class_\">RouteDefinition</span>[] {\n  <span class=\"hljs-keyword\">return</span> [\n   { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/'</span>, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'get'</span>, <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getEnquiries</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>) },\n   { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/:id'</span>, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'get'</span>, <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getEnquiry</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>) },\n   { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/'</span>, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'post'</span>, <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">createEnquiry</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>) },\n   { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/:id'</span>, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'put'</span>, <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">updateEnquiry</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>) },\n   { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/:id'</span>, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'delete'</span>, <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">delete</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>) }\n  ];\n }\n\n <span class=\"hljs-comment\">/**\n  *\n  * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">req</span>\n  * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">res</span>\n  * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">next</span>\n  */</span>\n public <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getEnquiries</span>(\n  <span class=\"hljs-attr\">req</span>: <span class=\"hljs-title class_\">Request</span>,\n  <span class=\"hljs-attr\">res</span>: <span class=\"hljs-title class_\">Response</span>,\n  <span class=\"hljs-attr\">next</span>: <span class=\"hljs-title class_\">NextFunction</span>,\n ): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-keyword\">void</span>> {\n  <span class=\"hljs-keyword\">try</span> {\n   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">enquiries</span>: <span class=\"hljs-title class_\">EnquiryAttributes</span>[] =\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">enquiry</span>.<span class=\"hljs-title function_\">getAll</span>();\n   res.<span class=\"hljs-property\">locals</span>.<span class=\"hljs-property\">data</span> = enquiries;\n   <span class=\"hljs-comment\">// call base class method</span>\n   <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">send</span>(res);\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n   <span class=\"hljs-title function_\">next</span>(err);\n  }\n }\n\n <span class=\"hljs-comment\">// 이하 생략</span>\n}\n</code></pre>\n<h1>단계 5: 구성 요소를 위한 REST API 생성</h1>\n<p>문의: 문의는 속성 집합을 가진 주요 엔터티입니다.</p>\n<ul>\n<li>GET /v1/enquiries 모든 문의 목록을 가져옵니다.</li>\n<li>POST /v1/enquiries 새로운 문의를 생성합니다.</li>\n<li>GET /v1/enquiries/'id' 특정 문의의 세부 정보를 가져옵니다.</li>\n<li>PUT /v1/enquiries/'id' 특정 문의의 세부 정보를 업데이트합니다.</li>\n<li>DELETE /v1/enquiries/'id' 특정 문의를 삭제합니다.</li>\n</ul>\n<p>우리는 이전에 정의한 경로를 등록해야 합니다. 이를 위해 src/routes.ts에 항목을 만들어야 합니다.</p>\n<p>아래 링크에서 전체 코드베이스를 찾을 수 있습니다. 초보자를 염두에 두고 설계된 이 저장소는 백엔드 프로젝트를 시작하는 데 튼튼한 출발점을 제공합니다. 단위 테스트 케이스가 포함된 잘 정리된 코드베이스로 깊게 파고들며 학습하고 문제 해결을 쉽게 할 수 있습니다. 게다가 GitHub Actions 워크플로가 통합되어 있어 테스트와 배포를 자동화할 수 있습니다. 학습을 시작하거나 첫 번째 실제 애플리케이션을 구축하려는 경우에도 유용합니다.</p>\n<p>읽어 주셔서 감사합니다. 이 블로그가 학습에 가치가 있다고 생각되면 의견을 공유하고 클랩(clap)을 눌러주세요.</p>\n<h1>친절한 언어로 🚀</h1>\n<p>In Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:</p>\n<ul>\n<li>작가를 claps하고 팔로우 해주세요 👏️</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터</li>\n<li>다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed</li>\n<li>PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}