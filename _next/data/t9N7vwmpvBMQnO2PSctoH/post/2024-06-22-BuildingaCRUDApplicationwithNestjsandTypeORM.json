{"pageProps":{"post":{"title":"Nestjs와 TypeORM으로 CRUD 애플리케이션 만드는 방법","description":"","date":"2024-06-22 02:22","slug":"2024-06-22-BuildingaCRUDApplicationwithNestjsandTypeORM","content":"\n\n![그림](/assets/img/2024-06-22-BuildingaCRUDApplicationwithNestjsandTypeORM_0.png)\n\nNest는 효율적이고 확장 가능하며 신뢰할 수 있는 서버 측 애플리케이션(웹사이트)을 구축하기 위한 혁신적인 Node JS 프레임워크입니다. 데코레이터는 이 프레임워크에서 주로 사용되며 Java의 Spring Boot 프레임워크와 유사합니다.\n\n이 안내서에서는 Nest.js 프로젝트 설정, TypeORM을 사용한 데이터 모델 정의 및 기본 CRUD 작업(생성, 읽기, 업데이트, 삭제) 구현 과정을 안내합니다. 이 튜토리얼을 완료하면 확장 가능하고 유지보수 가능한 백엔드 애플리케이션 구축 방법을 명확히 이해하게 될 것입니다.\n\n# 필요 조건\n\n<div class=\"content-ad\"></div>\n\n시작하기 전에 먼저 컴퓨터에 Node.js와 npm이 설치되어 있는지 확인해주세요. 다음 명령을 실행하여 Nest CLI를 전역으로 설치할 수 있습니다:\n\n```js\nnpm install -g @nestjs/cli\n```\n\n# 단계 1: 프로젝트 설정\n\n새로운 Nest.js 프로젝트를 생성해봅시다. 터미널을 열고 다음 명령을 실행해주세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nnest new nest-crud-tutorial\n```\n\n```js\ncd nest-crud-tutorial\n```\n\n```js\nnpm install @nestjs/typeorm typeorm\n```\n\n우리는 데이터베이스로 PostgreSQL을 사용할 것이기 때문에 해당 패키지를 설치해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install pg\n```\n\n# 단계 2: 데이터베이스 구성\n\n프로젝트 루트 디렉토리에 .env 파일을 생성하고 데이터베이스에 맞게 구성해주세요.\n\n```js\nPOSTGRES_HOST=127.0.0.1\nPOSTGRES_PORT=5432\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=pawan123\nPOSTGRES_DATABASE=nest-crud\nPORT=3000\nMODE=DEV\nRUN_MIGRATIONS=true\n```\n\n<div class=\"content-ad\"></div>\n\n기본으로 생성된 파일 app.module.ts에서 TypeORM을 구성하십시오.\n\n```js\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: process.env.POSTGRES_HOST,\n      port: parseInt(process.env.POSTGRES_PORT),\n      password: process.env.POSTGRES_PASSWORD,\n      username: process.env.POSTGRES_USER,\n      entities: [],\n      database: process.env.POSTGRES_DATABASE,\n      synchronize: false,\n      logging: true,\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n# 단계 3: 사용자를 위한 리소스 생성\n\n다음 명령어로 nest-cli를 사용하여 DTO, 엔티티, 컨트롤러 및 서비스를 생성할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nnest g resource user\n```\n\n이 명령은 CRUD 기능을 갖는 리소스를 생성하는 데 필요한 파일을 생성합니다.\n\n# 단계 4: 엔티티 생성\n\n이제 TypeORM을 사용하여 엔티티를 생성하여 데이터 모델을 정의해 봅시다. 이 예시에서는 fullName과 email 속성을 갖는 간단한 User 엔티티를 생성할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```ts\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n} from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  fullName: string;\n\n  @Column({ unique: true })\n  email: string;\n}\n```\n\n생성된 user.entity.ts 파일에 위 코드를 추가해주세요.\n\n# 단계 5: 유효성 검사 추가\n\n유효성 검사를 위해 nest는 기본적으로 오류 처리를 위한 검증 파이프를 제공합니다. main.ts 파일에서 검증 파이프를 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\r\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ValidationPipe } from '@nestjs/common';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(\n    new ValidationPipe({ whitelist: true }),\n  );\n  await app.listen(3000);\n}\nbootstrap();\r\n```\n\n유효성 검사를 위해 class-validator 패키지를 설치해야 합니다. 다음 명령을 사용하여 설치하세요.\n\n```js\r\nnpm install class-validator\r\n```\n\n이제 createUserDto.ts 파일에 DTO를 생성하세요. 이는 사용자의 데이터 스키마를 정의합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n} from 'class-validator';\n\n// create-user-dto\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @IsString()\n  fullName: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n}\n```\n\n또한 CreateUserDto의 부분 유형인 update-user-dto.ts 파일을 만들고 null 값을 가질 수 있습니다.\n\n```js\nimport { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n```\n\n# 6단계: 서비스 만들기\n\n\n<div class=\"content-ad\"></div>\n\n다음으로, TypeORM을 사용하여 데이터베이스와 상호작용하는 서비스를 생성하세요. 유저 서비스에서는 TypeORM에 의해 생성된 엔티티에서 의존성 주입을 통해 만들어진 저장소를 초기화해야 합니다. 서비스 레이어는 애플리케이션의 비즈니스 로직을 처리합니다.\n\n```js\nimport {\n  HttpException,\n  Injectable,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UserEntity } from './entities/user.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository<UserEntity>,\n  ) {}\n\n  async create(\n    createUserDto: CreateUserDto,\n  ): Promise<UserEntity> {\n    const userData =\n      await this.userRepository.create(\n        createUserDto,\n      );\n    return this.userRepository.save(userData);\n  }\n\n  async findAll(): Promise<UserEntity[]> {\n    return await this.userRepository.find();\n  }\n\n  async findOne(id: number): Promise<UserEntity> {\n    const userData =\n      await this.userRepository.findOne(id);\n    if (!userData) {\n      throw new HttpException(\n        'User Not Found',\n        404,\n      );\n    }\n    return userData;\n  }\n\n  async update(\n    id: number,\n    updateUserDto: UpdateUserDto,\n  ): Promise<UserEntity> {\n    const existingUser = await this.findOne(id);\n    const userData = this.userRepository.merge(\n      existingUser,\n      updateUserDto,\n    );\n    return await this.userRepository.save(\n      userData,\n    );\n  }\n\n  async remove(id: number): Promise<UserEntity> {\n    const existingUser = await this.findOne(id);\n    return await this.userRepository.remove(\n      existingUser,\n    );\n  }\n}\n```\n\n# 단계 7: 컨트롤러 생성\n\nHTTP 요청을 처리하고 서비스와 상호작용하는 컨트롤러를 만들어보세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('users') // route 그룹\nexport class UserController {\n  constructor(\n    private readonly userService: UserService,\n  ) {}\n\n  @Post()\n  async create(\n    @Body() createUserDto: CreateUserDto,\n  ) {\n    try {\n      await this.userService.create(\n        createUserDto,\n      );\n\n      return {\n        success: true,\n        message: '사용자가 성공적으로 생성되었습니다',\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message,\n      };\n    }\n  }\n\n  @Get()\n  async findAll() {\n    try {\n      const data =\n        await this.userService.findAll();\n      return {\n        success: true,\n        data,\n        message: '사용자가 성공적으로 검색되었습니다',\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message,\n      };\n    }\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    try {\n      const data = await this.userService.findOne(\n        +id,\n      );\n      return {\n        success: true,\n        data,\n        message: '사용자가 성공적으로 검색되었습니다',\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message,\n      };\n    }\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    try {\n      await this.userService.update(\n        +id,\n        updateUserDto,\n      );\n      return {\n        success: true,\n        message: '사용자가 성공적으로 업데이트되었습니다',\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message,\n      };\n    }\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    try {\n      await this.userService.remove(+id);\n      return {\n        success: true,\n        message: '사용자가 성공적으로 삭제되었습니다',\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message,\n      };\n    }\n  }\n}\n```\n\n# 단계 8: 모든 것을 연결하기\n\n이제 서비스, 컨트롤러 및 엔티티를 연결해보겠습니다. Nest.js는 애플리케이션 구성 요소를 관리하기 위해 의존성 주입을 사용합니다. 서비스 및 컨트롤러를 user.module.ts 파일에 import 및 등록해야 합니다.\n\n```js\nimport { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from './entities/user.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity]),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n```\n\n<div class=\"content-ad\"></div>\n\n축하합니다! Nest.js와 TypeORM을 사용하여 기본 CRUD 애플리케이션을 성공적으로 만드셨군요. 프로젝트 설정, 데이터 모델 정의, 서비스 및 컨트롤러 구현, 애플리케이션 테스트 등을 다뤘습니다. 이것은 시작에 불과합니다. Nest.js와 TypeORM은 견고한 백엔드 애플리케이션을 구축하기 위한 다양한 기능을 제공합니다.\n\n편의를 위해, 이 튜토리얼의 전체 소스 코드는 제 GitHub 저장소에서 찾아볼 수 있습니다. 저장소를 클론하여 코드를 자유롭게 실험해보세요.\n\nNest.js와 TypeORM CRUD 튜토리얼을 따라주셔서 감사합니다. 이 튜토리얼이 숙련된 백엔드 개발자가 되는 여정에서 도움이 되셨기를 바랍니다. 즐거운 코딩되시길 바라겠습니다!","ogImage":{"url":"/assets/img/2024-06-22-BuildingaCRUDApplicationwithNestjsandTypeORM_0.png"},"coverImage":"/assets/img/2024-06-22-BuildingaCRUDApplicationwithNestjsandTypeORM_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-22-BuildingaCRUDApplicationwithNestjsandTypeORM_0.png\" alt=\"그림\"></p>\n<p>Nest는 효율적이고 확장 가능하며 신뢰할 수 있는 서버 측 애플리케이션(웹사이트)을 구축하기 위한 혁신적인 Node JS 프레임워크입니다. 데코레이터는 이 프레임워크에서 주로 사용되며 Java의 Spring Boot 프레임워크와 유사합니다.</p>\n<p>이 안내서에서는 Nest.js 프로젝트 설정, TypeORM을 사용한 데이터 모델 정의 및 기본 CRUD 작업(생성, 읽기, 업데이트, 삭제) 구현 과정을 안내합니다. 이 튜토리얼을 완료하면 확장 가능하고 유지보수 가능한 백엔드 애플리케이션 구축 방법을 명확히 이해하게 될 것입니다.</p>\n<h1>필요 조건</h1>\n<p>시작하기 전에 먼저 컴퓨터에 Node.js와 npm이 설치되어 있는지 확인해주세요. 다음 명령을 실행하여 Nest CLI를 전역으로 설치할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">npm install -g @nestjs/cli\n</code></pre>\n<h1>단계 1: 프로젝트 설정</h1>\n<p>새로운 Nest.js 프로젝트를 생성해봅시다. 터미널을 열고 다음 명령을 실행해주세요:</p>\n<pre><code class=\"hljs language-js\">nest <span class=\"hljs-keyword\">new</span> nest-crud-tutorial\n</code></pre>\n<pre><code class=\"hljs language-js\">cd nest-crud-tutorial\n</code></pre>\n<pre><code class=\"hljs language-js\">npm install @nestjs/typeorm typeorm\n</code></pre>\n<p>우리는 데이터베이스로 PostgreSQL을 사용할 것이기 때문에 해당 패키지를 설치해야 합니다.</p>\n<pre><code class=\"hljs language-js\">npm install pg\n</code></pre>\n<h1>단계 2: 데이터베이스 구성</h1>\n<p>프로젝트 루트 디렉토리에 .env 파일을 생성하고 데이터베이스에 맞게 구성해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">POSTGRES_HOST</span>=<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>\n<span class=\"hljs-variable constant_\">POSTGRES_PORT</span>=<span class=\"hljs-number\">5432</span>\n<span class=\"hljs-variable constant_\">POSTGRES_USER</span>=postgres\n<span class=\"hljs-variable constant_\">POSTGRES_PASSWORD</span>=pawan123\n<span class=\"hljs-variable constant_\">POSTGRES_DATABASE</span>=nest-crud\n<span class=\"hljs-variable constant_\">PORT</span>=<span class=\"hljs-number\">3000</span>\n<span class=\"hljs-variable constant_\">MODE</span>=<span class=\"hljs-variable constant_\">DEV</span>\n<span class=\"hljs-variable constant_\">RUN_MIGRATIONS</span>=<span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>기본으로 생성된 파일 app.module.ts에서 TypeORM을 구성하십시오.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.controller'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TypeOrmModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/typeorm'</span>;\n\n@<span class=\"hljs-title class_\">Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">TypeOrmModule</span>.<span class=\"hljs-title function_\">forRoot</span>({\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'postgres'</span>,\n      <span class=\"hljs-attr\">host</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">POSTGRES_HOST</span>,\n      <span class=\"hljs-attr\">port</span>: <span class=\"hljs-built_in\">parseInt</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">POSTGRES_PORT</span>),\n      <span class=\"hljs-attr\">password</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">POSTGRES_PASSWORD</span>,\n      <span class=\"hljs-attr\">username</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">POSTGRES_USER</span>,\n      <span class=\"hljs-attr\">entities</span>: [],\n      <span class=\"hljs-attr\">database</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">POSTGRES_DATABASE</span>,\n      <span class=\"hljs-attr\">synchronize</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-attr\">logging</span>: <span class=\"hljs-literal\">true</span>,\n    }),\n  ],\n  <span class=\"hljs-attr\">controllers</span>: [<span class=\"hljs-title class_\">AppController</span>],\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">AppService</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<h1>단계 3: 사용자를 위한 리소스 생성</h1>\n<p>다음 명령어로 nest-cli를 사용하여 DTO, 엔티티, 컨트롤러 및 서비스를 생성할 것입니다.</p>\n<pre><code class=\"hljs language-js\">nest g resource user\n</code></pre>\n<p>이 명령은 CRUD 기능을 갖는 리소스를 생성하는 데 필요한 파일을 생성합니다.</p>\n<h1>단계 4: 엔티티 생성</h1>\n<p>이제 TypeORM을 사용하여 엔티티를 생성하여 데이터 모델을 정의해 봅시다. 이 예시에서는 fullName과 email 속성을 갖는 간단한 User 엔티티를 생성할 것입니다.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">Entity</span>,\n  <span class=\"hljs-title class_\">PrimaryGeneratedColumn</span>,\n  <span class=\"hljs-title class_\">Column</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'typeorm'</span>;\n\n<span class=\"hljs-meta\">@Entity</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-meta\">@PrimaryGeneratedColumn</span>()\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n\n  <span class=\"hljs-meta\">@Column</span>()\n  <span class=\"hljs-attr\">fullName</span>: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-meta\">@Column</span>({ <span class=\"hljs-attr\">unique</span>: <span class=\"hljs-literal\">true</span> })\n  <span class=\"hljs-attr\">email</span>: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<p>생성된 user.entity.ts 파일에 위 코드를 추가해주세요.</p>\n<h1>단계 5: 유효성 검사 추가</h1>\n<p>유효성 검사를 위해 nest는 기본적으로 오류 처리를 위한 검증 파이프를 제공합니다. main.ts 파일에서 검증 파이프를 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NestFactory</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ValidationPipe</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bootstrap</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">AppModule</span>);\n  app.<span class=\"hljs-title function_\">useGlobalPipes</span>(\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ValidationPipe</span>({ <span class=\"hljs-attr\">whitelist</span>: <span class=\"hljs-literal\">true</span> }),\n  );\n  <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);\n}\n<span class=\"hljs-title function_\">bootstrap</span>();\n</code></pre>\n<p>유효성 검사를 위해 class-validator 패키지를 설치해야 합니다. 다음 명령을 사용하여 설치하세요.</p>\n<pre><code class=\"hljs language-js\">npm install <span class=\"hljs-keyword\">class</span>-validator\n</code></pre>\n<p>이제 createUserDto.ts 파일에 DTO를 생성하세요. 이는 사용자의 데이터 스키마를 정의합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">IsEmail</span>,\n  <span class=\"hljs-title class_\">IsNotEmpty</span>,\n  <span class=\"hljs-title class_\">IsString</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'class-validator'</span>;\n\n<span class=\"hljs-comment\">// create-user-dto</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreateUserDto</span> {\n  @<span class=\"hljs-title class_\">IsNotEmpty</span>()\n  @<span class=\"hljs-title class_\">IsString</span>()\n  <span class=\"hljs-attr\">fullName</span>: string;\n\n  @<span class=\"hljs-title class_\">IsNotEmpty</span>()\n  @<span class=\"hljs-title class_\">IsEmail</span>()\n  <span class=\"hljs-attr\">email</span>: string;\n}\n</code></pre>\n<p>또한 CreateUserDto의 부분 유형인 update-user-dto.ts 파일을 만들고 null 값을 가질 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">PartialType</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/mapped-types'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CreateUserDto</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./create-user.dto'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UpdateUserDto</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">PartialType</span>(<span class=\"hljs-title class_\">CreateUserDto</span>) {}\n</code></pre>\n<h1>6단계: 서비스 만들기</h1>\n<p>다음으로, TypeORM을 사용하여 데이터베이스와 상호작용하는 서비스를 생성하세요. 유저 서비스에서는 TypeORM에 의해 생성된 엔티티에서 의존성 주입을 통해 만들어진 저장소를 초기화해야 합니다. 서비스 레이어는 애플리케이션의 비즈니스 로직을 처리합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">HttpException</span>,\n  <span class=\"hljs-title class_\">Injectable</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CreateUserDto</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./dto/create-user.dto'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UpdateUserDto</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./dto/update-user.dto'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">InjectRepository</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/typeorm'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Repository</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'typeorm'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserEntity</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./entities/user.entity'</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository&#x3C;UserEntity>,\n  </span>) {}\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">create</span>(\n    <span class=\"hljs-attr\">createUserDto</span>: <span class=\"hljs-title class_\">CreateUserDto</span>,\n  ): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">UserEntity</span>> {\n    <span class=\"hljs-keyword\">const</span> userData =\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">create</span>(\n        createUserDto,\n      );\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">save</span>(userData);\n  }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">findAll</span>(): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">UserEntity</span>[]> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">find</span>();\n  }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">findOne</span>(<span class=\"hljs-attr\">id</span>: number): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">UserEntity</span>> {\n    <span class=\"hljs-keyword\">const</span> userData =\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">findOne</span>(id);\n    <span class=\"hljs-keyword\">if</span> (!userData) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpException</span>(\n        <span class=\"hljs-string\">'User Not Found'</span>,\n        <span class=\"hljs-number\">404</span>,\n      );\n    }\n    <span class=\"hljs-keyword\">return</span> userData;\n  }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">update</span>(\n    <span class=\"hljs-attr\">id</span>: number,\n    <span class=\"hljs-attr\">updateUserDto</span>: <span class=\"hljs-title class_\">UpdateUserDto</span>,\n  ): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">UserEntity</span>> {\n    <span class=\"hljs-keyword\">const</span> existingUser = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findOne</span>(id);\n    <span class=\"hljs-keyword\">const</span> userData = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">merge</span>(\n      existingUser,\n      updateUserDto,\n    );\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">save</span>(\n      userData,\n    );\n  }\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-attr\">id</span>: number): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">UserEntity</span>> {\n    <span class=\"hljs-keyword\">const</span> existingUser = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findOne</span>(id);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">remove</span>(\n      existingUser,\n    );\n  }\n}\n</code></pre>\n<h1>단계 7: 컨트롤러 생성</h1>\n<p>HTTP 요청을 처리하고 서비스와 상호작용하는 컨트롤러를 만들어보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">Controller</span>,\n  <span class=\"hljs-title class_\">Get</span>,\n  <span class=\"hljs-title class_\">Post</span>,\n  <span class=\"hljs-title class_\">Body</span>,\n  <span class=\"hljs-title class_\">Patch</span>,\n  <span class=\"hljs-title class_\">Param</span>,\n  <span class=\"hljs-title class_\">Delete</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CreateUserDto</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./dto/create-user.dto'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UpdateUserDto</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./dto/update-user.dto'</span>;\n\n@<span class=\"hljs-title class_\">Controller</span>(<span class=\"hljs-string\">'users'</span>) <span class=\"hljs-comment\">// route 그룹</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    private readonly userService: UserService,\n  </span>) {}\n\n  @<span class=\"hljs-title class_\">Post</span>()\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-params\">\n    @Body() createUserDto: CreateUserDto,\n  </span>) {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userService</span>.<span class=\"hljs-title function_\">create</span>(\n        createUserDto,\n      );\n\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'사용자가 성공적으로 생성되었습니다'</span>,\n      };\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">message</span>: error.<span class=\"hljs-property\">message</span>,\n      };\n    }\n  }\n\n  @<span class=\"hljs-title class_\">Get</span>()\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">findAll</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> data =\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userService</span>.<span class=\"hljs-title function_\">findAll</span>();\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>,\n        data,\n        <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'사용자가 성공적으로 검색되었습니다'</span>,\n      };\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">message</span>: error.<span class=\"hljs-property\">message</span>,\n      };\n    }\n  }\n\n  @<span class=\"hljs-title class_\">Get</span>(<span class=\"hljs-string\">':id'</span>)\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">findOne</span>(<span class=\"hljs-params\">@Param(<span class=\"hljs-string\">'id'</span>) id: string</span>) {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userService</span>.<span class=\"hljs-title function_\">findOne</span>(\n        +id,\n      );\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>,\n        data,\n        <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'사용자가 성공적으로 검색되었습니다'</span>,\n      };\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">message</span>: error.<span class=\"hljs-property\">message</span>,\n      };\n    }\n  }\n\n  @<span class=\"hljs-title class_\">Patch</span>(<span class=\"hljs-string\">':id'</span>)\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\">\n    @Param(<span class=\"hljs-string\">'id'</span>) id: string,\n    @Body() updateUserDto: UpdateUserDto,\n  </span>) {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userService</span>.<span class=\"hljs-title function_\">update</span>(\n        +id,\n        updateUserDto,\n      );\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'사용자가 성공적으로 업데이트되었습니다'</span>,\n      };\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">message</span>: error.<span class=\"hljs-property\">message</span>,\n      };\n    }\n  }\n\n  @<span class=\"hljs-title class_\">Delete</span>(<span class=\"hljs-string\">':id'</span>)\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">@Param(<span class=\"hljs-string\">'id'</span>) id: string</span>) {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userService</span>.<span class=\"hljs-title function_\">remove</span>(+id);\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'사용자가 성공적으로 삭제되었습니다'</span>,\n      };\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">message</span>: error.<span class=\"hljs-property\">message</span>,\n      };\n    }\n  }\n}\n</code></pre>\n<h1>단계 8: 모든 것을 연결하기</h1>\n<p>이제 서비스, 컨트롤러 및 엔티티를 연결해보겠습니다. Nest.js는 애플리케이션 구성 요소를 관리하기 위해 의존성 주입을 사용합니다. 서비스 및 컨트롤러를 user.module.ts 파일에 import 및 등록해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./user.controller'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TypeOrmModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/typeorm'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserEntity</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./entities/user.entity'</span>;\n\n@<span class=\"hljs-title class_\">Module</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">TypeOrmModule</span>.<span class=\"hljs-title function_\">forFeature</span>([<span class=\"hljs-title class_\">UserEntity</span>]),\n  ],\n  <span class=\"hljs-attr\">controllers</span>: [<span class=\"hljs-title class_\">UserController</span>],\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">UserService</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserModule</span> {}\n</code></pre>\n<p>축하합니다! Nest.js와 TypeORM을 사용하여 기본 CRUD 애플리케이션을 성공적으로 만드셨군요. 프로젝트 설정, 데이터 모델 정의, 서비스 및 컨트롤러 구현, 애플리케이션 테스트 등을 다뤘습니다. 이것은 시작에 불과합니다. Nest.js와 TypeORM은 견고한 백엔드 애플리케이션을 구축하기 위한 다양한 기능을 제공합니다.</p>\n<p>편의를 위해, 이 튜토리얼의 전체 소스 코드는 제 GitHub 저장소에서 찾아볼 수 있습니다. 저장소를 클론하여 코드를 자유롭게 실험해보세요.</p>\n<p>Nest.js와 TypeORM CRUD 튜토리얼을 따라주셔서 감사합니다. 이 튜토리얼이 숙련된 백엔드 개발자가 되는 여정에서 도움이 되셨기를 바랍니다. 즐거운 코딩되시길 바라겠습니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}