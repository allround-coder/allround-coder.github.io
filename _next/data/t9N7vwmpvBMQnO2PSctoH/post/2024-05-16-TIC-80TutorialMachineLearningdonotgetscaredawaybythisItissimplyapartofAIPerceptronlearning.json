{"pageProps":{"post":{"title":"TIC-80 튜토리얼 머신 러닝걱정하지 마세요 이것은 AI의 일부일 뿐입니다  퍼셉트론 학습","description":"","date":"2024-05-16 16:52","slug":"2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning","content":"\n\n\n![공포를 느끼지 마세요. 그냥 AI의 일부입니다.](/assets/img/2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning_0.png)\n\n[페이지에 시각적인 풍미를 위해 만든 예쁜 3D 모델]\n\n신경망의 경우, 퍼셉트론 학습은 소개 알고리즘 중 가장 간단한 것 중 하나입니다.\n\n이것은 간단한 이진 분류에 사용됩니다. 이는 물건을 그룹화하는 데 사용될 수 있다는 것을 의미합니다.\n\n\n<div class=\"content-ad\"></div>\n\n게임을 개발하면서 여러 아이디어가 떠오를 수 있습니다. 이것은 무작위로 생성된 레벨을 더 멋지게 디자인하거나 플레이어의 입력에 따라 난이도를 조절하거나 더 나은 적을 제공하는 방법일 수 있어요.\n\n--- --- --- --- --- --- --- --- --- --- --- --- ---\n\n![나만의 랜덤 애니메이션](https://miro.medium.com/v2/resize:fit:200/1*J6hWD17Q6PPkhnd0E5rkgw.gif)\n\n<div class=\"content-ad\"></div>\n\n간단히 말해서, 퍼셉트론은 입력을 받아 처리한 후 출력을 내놓습니다.\n\n- 퍼셉트론 학습은 입력을 받는 간단한 신경망입니다.\n\n2. 일정한 가중치가 있습니다 (랜덤으로 생성됩니다. 가중치가 동일하지 않도록 하기 위한 것이며, 학습이 이루어질 수 있도록 항상 모두 마스터할 필요는 없습니다).\n\n3. 그런 다음 가중합을 얻습니다 (이는 단순히 가중치*입력과 가중치*입력의 합을 의미합니다).\n\n<div class=\"content-ad\"></div>\n\n그리고 마지막으로 출력을 결정하는 활성화 함수를 포함합니다.\n\n다음은 코드입니다:\n\n```js\nrnd = math.random\n-- 가중치 초기화\nlocal weight1 = rnd(1) - 0.5\nlocal weight2 = rnd(1) - 0.5\n\n-- 활성화 함수 (계단 함수)\nfunction activate(sum)\n    if sum > 0 then\n        return 1\n    else\n        return 0\n    end\nend\n\n-- 메인 루프\nfunction TIC()\n\ncls()\n    -- 입력 값 샘플 (이 값을 변경할 수 있음)\n    local input1 = 1\n    local input2 = 0\n    \n    -- 가중합 계산\n    local weightedSum = input1 * weight1 + input2 * weight2\n    \n    -- 퍼셉트론 활성화\n    local output = activate(weightedSum)\n    \n    -- 출력 표시\n    print(\"Output: \" .. output, 20, 20, 15)\nend\n```\n\n이 활성화 함수는 신경망 세계에서 꽤 한정적인 단계 활성화 활성화 함수이지만, 창의적으로 사용하면 멋진 것들을 만들 수 있다고 생각합니다.","ogImage":{"url":"/assets/img/2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning_0.png"},"coverImage":"/assets/img/2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-16-TIC-80TutorialMachineLearningdonotgetscaredawaybythisItissimplyapartofAIPerceptronlearning_0.png\" alt=\"공포를 느끼지 마세요. 그냥 AI의 일부입니다.\"></p>\n<p>[페이지에 시각적인 풍미를 위해 만든 예쁜 3D 모델]</p>\n<p>신경망의 경우, 퍼셉트론 학습은 소개 알고리즘 중 가장 간단한 것 중 하나입니다.</p>\n<p>이것은 간단한 이진 분류에 사용됩니다. 이는 물건을 그룹화하는 데 사용될 수 있다는 것을 의미합니다.</p>\n<p>게임을 개발하면서 여러 아이디어가 떠오를 수 있습니다. 이것은 무작위로 생성된 레벨을 더 멋지게 디자인하거나 플레이어의 입력에 따라 난이도를 조절하거나 더 나은 적을 제공하는 방법일 수 있어요.</p>\n<hr>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:200/1*J6hWD17Q6PPkhnd0E5rkgw.gif\" alt=\"나만의 랜덤 애니메이션\"></p>\n<p>간단히 말해서, 퍼셉트론은 입력을 받아 처리한 후 출력을 내놓습니다.</p>\n<ul>\n<li>퍼셉트론 학습은 입력을 받는 간단한 신경망입니다.</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>일정한 가중치가 있습니다 (랜덤으로 생성됩니다. 가중치가 동일하지 않도록 하기 위한 것이며, 학습이 이루어질 수 있도록 항상 모두 마스터할 필요는 없습니다).</p>\n</li>\n<li>\n<p>그런 다음 가중합을 얻습니다 (이는 단순히 가중치<em>입력과 가중치</em>입력의 합을 의미합니다).</p>\n</li>\n</ol>\n<p>그리고 마지막으로 출력을 결정하는 활성화 함수를 포함합니다.</p>\n<p>다음은 코드입니다:</p>\n<pre><code class=\"hljs language-js\">rnd = math.<span class=\"hljs-property\">random</span>\n-- 가중치 초기화\nlocal weight1 = <span class=\"hljs-title function_\">rnd</span>(<span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">0.5</span>\nlocal weight2 = <span class=\"hljs-title function_\">rnd</span>(<span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">0.5</span>\n\n-- 활성화 함수 (계단 함수)\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">activate</span>(<span class=\"hljs-params\">sum</span>)\n    <span class=\"hljs-keyword\">if</span> sum > <span class=\"hljs-number\">0</span> then\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    end\nend\n\n-- 메인 루프\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TIC</span>(<span class=\"hljs-params\"></span>)\n\n<span class=\"hljs-title function_\">cls</span>()\n    -- 입력 값 샘플 (이 값을 변경할 수 있음)\n    local input1 = <span class=\"hljs-number\">1</span>\n    local input2 = <span class=\"hljs-number\">0</span>\n    \n    -- 가중합 계산\n    local weightedSum = input1 * weight1 + input2 * weight2\n    \n    -- 퍼셉트론 활성화\n    local output = <span class=\"hljs-title function_\">activate</span>(weightedSum)\n    \n    -- 출력 표시\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Output: \"</span> .. output, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">15</span>)\nend\n</code></pre>\n<p>이 활성화 함수는 신경망 세계에서 꽤 한정적인 단계 활성화 활성화 함수이지만, 창의적으로 사용하면 멋진 것들을 만들 수 있다고 생각합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}