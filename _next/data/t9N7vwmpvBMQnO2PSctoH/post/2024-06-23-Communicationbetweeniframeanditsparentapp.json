{"pageProps":{"post":{"title":"iframe과 부모 앱 간의 통신 방법","description":"","date":"2024-06-23 14:34","slug":"2024-06-23-Communicationbetweeniframeanditsparentapp","content":"\n\n여기에서는 iframe과 해당 부모 앱 간의 통신이 가능한 방법을 간단히 설명하고 있어요.\n\n이 경우에는 브라우저에로드되는 주 응용프로그램이자 iframe을 포함하고 있는 부모 응용프로그램이 있습니다. 여기에서는 iframe의 src 속성을 통해 다른 웹 페이지를 로드하고 있어요. 따라서 부모 앱과 iframe의 두 가지 원본이 있죠.\n\n![iframe and its parent app communication](/assets/img/2024-06-23-Communicationbetweeniframeanditsparentapp_0.png)\n\n## 시나리오 1 - 부모와 iframe이 동일한 출처를 가지고 있으며 부모 및 자식 모두를 제어할 수 있는 경우\n\n<div class=\"content-ad\"></div>\n\n예를 들어, 부모는 www.abc.com을 가지고 있고 자식은 www.abc.com/child를 가지고 있습니다.\n\n이 경우 브라우저는 부모에서 자식으로, 그리고 자식에서 부모로 window 객체를 통해 통신을 허용합니다.\n\n부모 - 자식\n\n```js\n// 자식 앱에서\n// window 객체에 메소드 바인딩\nwindow.childCallback = function() {\n  console.log('부모가 자식 메소드 호출 중');\n}\n\n// 부모 앱에서\n// iframe 로드\n<iframe id='iframe' src=\"http://www.abc.com/child\"/>\n// iframe window을 통해 메소드 호출\nconst iframe = document.getElementById(\"iframe\");\niframe.contentWindow.childCallback();\n```\n\n<div class=\"content-ad\"></div>\n\nChild - Parent\n\n```js\n// Parent 앱에서\n// window 객체에 메소드를 바인딩합니다.\nwindow.parentCallback = function() {\n  console.log('자식이 부모 메소드를 호출합니다');\n}\n\n// Child 앱에서\n// window 객체를 통해 메소드를 호출하세요\nwindow.parent.parentCallback();\n```\n\n데모 보기 - https://thinugigs-iframe-test-same-origin.web.app/\n\n소스코드(간단한 리액트 앱) - https://github.com/thinugigs/-Iframe-test-same-origin\n\n<div class=\"content-ad\"></div>\n\n## 시나리오 2 - 부모와 아이프레임이 서로 다른 출처를 가지고 있고 부모와 자식 요소를 모두 제어할 수 있는 경우\n\n부모 요소의 출처이 www.abc.com이고 자식 요소의 출처이 www.xyz.com인 경우를 예로 들어보겠습니다.\n\n이 시나리오에서 브라우저는 postMessage를 통해 부모에서 자식으로 통신하거나 자식에서 부모로 통신하는 것을 허용합니다.\n\n부모 - 자식\n\n<div class=\"content-ad\"></div>\n\n```js\n// 자식 애플리케이션에서\n// 윈도우 객체에 메시지 이벤트 리스너를 연결합니다\nwindow.addEventListener(\"message\", function(event) {\n  console.log('부모가 자식 메소드 호출 중');\n});\n\n// 부모 애플리케이션에서\n// iframe만 로드합니다\n<iframe id='iframe' src=\"http://www.xyz.com\"/>\n// iframe 창을 통해 메시지를 전송합니다\nconst iframeWindow = document.getElementById(\"iframe\").contentWindow;\niframeWindow.postMessage(\"\", \"*\");\n```\n\n자식 - 부모\n\n```js\n// 부모 애플리케이션에서\n// 윈도우 객체에 메시지 이벤트 리스너를 연결합니다\nwindow.addEventListener(\"message\", function(event) {\n  console.log('자식이 부모 메소드 호출 중');\n});\n\n// 부모 애플리케이션에서\n// 부모 객체를 통해 메시지를 전송합니다\nparent.postMessage(\"\", \"*\");\n```\n\n샘플 데모 - https://thinugigs-iframe-test-different-origin-parent.web.app/\n\n\n<div class=\"content-ad\"></div>\n\n원본(간단한 html 앱입니다) - https://github.com/thinugigs/-iframe-test-different-origins\n\n## 시나리오 3 - 부모와 아이프레임이 서로 다른 출처를 갖지만 부모나 자식 중 한 곳을 제어할 수 있는 경우\n\n이러한 시나리오에서 당신은 부모 앱 또는 자식 앱 중 하나에 속할 수 있습니다. 따라서 한쪽에서만 메시지 구현이 가능하여 상호 통신을 양방향으로 할 수 없게 됩니다, 즉 부모에서 자식으로, 그리고 자식에서 부모로의 통신이 불가능해집니다.\n\n따라서 다음은 우리가 경험한 내용의 요약입니다.","ogImage":{"url":"/assets/img/2024-06-23-Communicationbetweeniframeanditsparentapp_0.png"},"coverImage":"/assets/img/2024-06-23-Communicationbetweeniframeanditsparentapp_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>여기에서는 iframe과 해당 부모 앱 간의 통신이 가능한 방법을 간단히 설명하고 있어요.</p>\n<p>이 경우에는 브라우저에로드되는 주 응용프로그램이자 iframe을 포함하고 있는 부모 응용프로그램이 있습니다. 여기에서는 iframe의 src 속성을 통해 다른 웹 페이지를 로드하고 있어요. 따라서 부모 앱과 iframe의 두 가지 원본이 있죠.</p>\n<p><img src=\"/assets/img/2024-06-23-Communicationbetweeniframeanditsparentapp_0.png\" alt=\"iframe and its parent app communication\"></p>\n<h2>시나리오 1 - 부모와 iframe이 동일한 출처를 가지고 있으며 부모 및 자식 모두를 제어할 수 있는 경우</h2>\n<p>예를 들어, 부모는 <a href=\"http://www.abc.com%EC%9D%84\" rel=\"nofollow\" target=\"_blank\">www.abc.com을</a> 가지고 있고 자식은 <a href=\"http://www.abc.com/child%EB%A5%BC\" rel=\"nofollow\" target=\"_blank\">www.abc.com/child를</a> 가지고 있습니다.</p>\n<p>이 경우 브라우저는 부모에서 자식으로, 그리고 자식에서 부모로 window 객체를 통해 통신을 허용합니다.</p>\n<p>부모 - 자식</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 자식 앱에서</span>\n<span class=\"hljs-comment\">// window 객체에 메소드 바인딩</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">childCallback</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'부모가 자식 메소드 호출 중'</span>);\n}\n\n<span class=\"hljs-comment\">// 부모 앱에서</span>\n<span class=\"hljs-comment\">// iframe 로드</span>\n&#x3C;iframe id=<span class=\"hljs-string\">'iframe'</span> src=<span class=\"hljs-string\">\"http://www.abc.com/child\"</span>/>\n<span class=\"hljs-comment\">// iframe window을 통해 메소드 호출</span>\n<span class=\"hljs-keyword\">const</span> iframe = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"iframe\"</span>);\niframe.<span class=\"hljs-property\">contentWindow</span>.<span class=\"hljs-title function_\">childCallback</span>();\n</code></pre>\n<p>Child - Parent</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Parent 앱에서</span>\n<span class=\"hljs-comment\">// window 객체에 메소드를 바인딩합니다.</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">parentCallback</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'자식이 부모 메소드를 호출합니다'</span>);\n}\n\n<span class=\"hljs-comment\">// Child 앱에서</span>\n<span class=\"hljs-comment\">// window 객체를 통해 메소드를 호출하세요</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">parent</span>.<span class=\"hljs-title function_\">parentCallback</span>();\n</code></pre>\n<p>데모 보기 - <a href=\"https://thinugigs-iframe-test-same-origin.web.app/\" rel=\"nofollow\" target=\"_blank\">https://thinugigs-iframe-test-same-origin.web.app/</a></p>\n<p>소스코드(간단한 리액트 앱) - <a href=\"https://github.com/thinugigs/-Iframe-test-same-origin\" rel=\"nofollow\" target=\"_blank\">https://github.com/thinugigs/-Iframe-test-same-origin</a></p>\n<h2>시나리오 2 - 부모와 아이프레임이 서로 다른 출처를 가지고 있고 부모와 자식 요소를 모두 제어할 수 있는 경우</h2>\n<p>부모 요소의 출처이 <a href=\"http://www.abc.com%EC%9D%B4%EA%B3%A0\" rel=\"nofollow\" target=\"_blank\">www.abc.com이고</a> 자식 요소의 출처이 <a href=\"http://www.xyz.com%EC%9D%B8\" rel=\"nofollow\" target=\"_blank\">www.xyz.com인</a> 경우를 예로 들어보겠습니다.</p>\n<p>이 시나리오에서 브라우저는 postMessage를 통해 부모에서 자식으로 통신하거나 자식에서 부모로 통신하는 것을 허용합니다.</p>\n<p>부모 - 자식</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 자식 애플리케이션에서</span>\n<span class=\"hljs-comment\">// 윈도우 객체에 메시지 이벤트 리스너를 연결합니다</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"message\"</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'부모가 자식 메소드 호출 중'</span>);\n});\n\n<span class=\"hljs-comment\">// 부모 애플리케이션에서</span>\n<span class=\"hljs-comment\">// iframe만 로드합니다</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'iframe'</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://www.xyz.com\"</span>/></span></span>\n<span class=\"hljs-comment\">// iframe 창을 통해 메시지를 전송합니다</span>\n<span class=\"hljs-keyword\">const</span> iframeWindow = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"iframe\"</span>).<span class=\"hljs-property\">contentWindow</span>;\niframeWindow.<span class=\"hljs-title function_\">postMessage</span>(<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"*\"</span>);\n</code></pre>\n<p>자식 - 부모</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 부모 애플리케이션에서</span>\n<span class=\"hljs-comment\">// 윈도우 객체에 메시지 이벤트 리스너를 연결합니다</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"message\"</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'자식이 부모 메소드 호출 중'</span>);\n});\n\n<span class=\"hljs-comment\">// 부모 애플리케이션에서</span>\n<span class=\"hljs-comment\">// 부모 객체를 통해 메시지를 전송합니다</span>\nparent.<span class=\"hljs-title function_\">postMessage</span>(<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"*\"</span>);\n</code></pre>\n<p>샘플 데모 - <a href=\"https://thinugigs-iframe-test-different-origin-parent.web.app/\" rel=\"nofollow\" target=\"_blank\">https://thinugigs-iframe-test-different-origin-parent.web.app/</a></p>\n<p>원본(간단한 html 앱입니다) - <a href=\"https://github.com/thinugigs/-iframe-test-different-origins\" rel=\"nofollow\" target=\"_blank\">https://github.com/thinugigs/-iframe-test-different-origins</a></p>\n<h2>시나리오 3 - 부모와 아이프레임이 서로 다른 출처를 갖지만 부모나 자식 중 한 곳을 제어할 수 있는 경우</h2>\n<p>이러한 시나리오에서 당신은 부모 앱 또는 자식 앱 중 하나에 속할 수 있습니다. 따라서 한쪽에서만 메시지 구현이 가능하여 상호 통신을 양방향으로 할 수 없게 됩니다, 즉 부모에서 자식으로, 그리고 자식에서 부모로의 통신이 불가능해집니다.</p>\n<p>따라서 다음은 우리가 경험한 내용의 요약입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}