{"pageProps":{"post":{"title":"플러터에서 최고의 Bloc 상태 관리 파트 2","description":"","date":"2024-05-20 23:15","slug":"2024-05-20-BestBlocstatehandlinginFlutterpart2","content":"\n안녕하세요, 친구들,\n첫 번째 파트에 대한 좋은 피드백에 기쁩니다.\n이번 파트에서는 디자인에서 EventStatus를 사용하는 방법을 가르치고 디자인의 모든 상태를 다루는 것을 알려드리고 싶어요.\n\n![이미지](https://miro.medium.com/v2/resize:fit:580/1*wL6d8JPLeO4MbkwBPLHwcA.gif)\n\n지난 파트에서는 Bloc_state에서 상태를 다루기위해 EventStatus 클래스를 사용했었습니다.\n\nhttps://medium.com/@moeinmoradi.dev/best-bloc-state-handling-in-flutter-0f95a8e89e40\n\n<div class=\"content-ad\"></div>\n\n제 친구 한 명의 제안에 따라, EventStatus 클래스에 대해 좀 더 나은 컨셉을 제안하고 그 이름을 StateStatus로 변경해보겠습니다. 다음과 같이 변경해주세요.\n\n```js\n@immutable\nabstract class StateStatus<T> {\n  final int? itemId;\n  final T? data;\n  final ErrorModel? message;\n\n  const StateStatus({\n    this.itemId,\n    this.data,\n    this.message,\n  });\n}\n\nclass StateLoading<T> extends StateStatus<T> {\n  const StateLoading({super.itemId});\n}\n\nclass StateCompleted<T> extends StateStatus<T> {\n  const StateCompleted({required super.data});\n}\n\nclass StateInitial<T> extends StateStatus<T> {}\n\nclass StateError<T> extends StateStatus<T> {\n  const StateError({required super.message});\n}\n```\n\n좋아요, StateStatusLayout를 위한 클래스를 만들어봅시다.\n\n# StateStatusLayout\n\n<div class=\"content-ad\"></div>\n\nStateStatus에 따라 다른 디자인 상태를 표시하는 클래스가 필요합니다. 이 클래스는 각 상태와 해당 위젯을 표시할 수 있어야 합니다.\n\n이 클래스에서 BlocBuilder로부터 StateStatus를 받고 States에 따라 위젯을 반환했습니다 :\n\n```js\nclass StateStatusLayout<T> extends StatelessWidget {\n  final StateStatus<T> status;\n  final Widget onErrorStatus;\n  final void Function(ErrorModel error)? onErrorListener;\n  final Widget Function(BuildContext context, T? data) onCompletedStatus;\n  final Widget onInitialStatus;\n  final Widget onLoadingStatus;\n  const StateStatusLayout({\n    super.key,\n    required this.status,\n    required this.onCompletedStatus,\n    required this.onErrorStatus,\n    required this.onInitialStatus,\n    required this.onLoadingStatus,\n    this.onErrorListener,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    if (status is StateError) {\n      if (onErrorListener != null) {\n        onErrorListener!(status.message!);\n      }\n    }\n    if (status is StateCompleted) {\n      return StreamBuilder(\n        stream: Stream.value(status),\n        builder: (context, snapshot) {\n          log(status.data!.toString());\n          return onCompletedStatus(context, status.data);\n        },\n      );\n    }\n    if (status is StateError) {\n      return onErrorStatus;\n    }\n    if (status is StateInitial) {\n      return onInitialStatus;\n    }\n    if (status is StateLoading) {\n      return onLoadingStatus;\n    }\n    return Container();\n  }\n}\n```\n\n그런데, StateCompleted 조건을 살펴보세요. 데이터를 표시하기 위해 StreamBuilder를 사용했습니다. 이것에 대해 어떻게 생각하시나요?\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:700/1*I6k_gZJ0KRZYR4KU22Okig.gif)\n\n가끔 블록 쪽에서 데이터를 페이지네이션하거나 스트리밍해야 할 때, 위젯은 반드시 모든 상황에서 업데이트되어야 합니다. 그리고 위젯에서 오류가 발생하지 않도록하기 위해 이러한 가능한 상황을 고려하기 위해 StreamBuilder를 사용합니다.\n\n간단한 샘플 코드를 보여드리겠습니다. StateStatusLayout을 사용한 코드입니다:\n\n```js\nimport 'package:flutter/material.dart';\n\nclass ShowLayout extends StatelessWidget {\n  const ShowLayout({Key? key});\n\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<ShowBloc, ShowState>(\n        builder: (context, state) {\n          return StateStatusLayout(\n            status: state.showsStatus,\n            onCompletedStatus: (context, data) {\n              return GridView.count(\n                shrinkWrap: true,\n                padding: const EdgeInsets.all(10),\n                physics: const ClampingScrollPhysics(),\n                crossAxisSpacing: 10,\n                mainAxisSpacing: 20,\n                crossAxisCount: 4,\n                childAspectRatio: 9 / 16,\n                children: List.generate(data!.shows!.length, (index) {\n                  ShowModel item = data.shows![index];\n                  return ShowCard(\n                      show: item,\n                      onSelected: () {\n                        /// do Somethigs...\n                      },\n                    );\n                }),\n              );\n            },\n            onErrorStatus: const SizedBox(),\n            onInitialStatus: const SizedBox(),\n            onLoadingStatus: Padding(\n              padding: const EdgeInsets.all(48.0),\n              child: SizedBox(\n                width: 50,\n                height: 50,\n                child: SpinKitRipple(\n                  color: themeData.colorScheme.secondary,\n                  size: 40,\n                ),\n              ),\n            ),\n          );\n        },\n      );\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 샘플 코드에서는 Bloc이 emit() 함수로 갱신될 때 showsStatus 상태에 대한 onCompletedStatus 및 onLoadingStatus를 처리했습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:1280/1*XwwugAFY35KNciVoDHThEw.gif)\n\n## 지금까지 함께 해주셔서 감사합니다\n\n나와 함께 계속 이야기를 공유해주시고 피드백을 기다리고 있습니다. 분들의 소중한 의견을 기다리고 있습니다. 🙏\n","ogImage":{"url":"/assets/img/2024-05-20-BestBlocstatehandlinginFlutterpart2_0.png"},"coverImage":"/assets/img/2024-05-20-BestBlocstatehandlinginFlutterpart2_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요, 친구들,\n첫 번째 파트에 대한 좋은 피드백에 기쁩니다.\n이번 파트에서는 디자인에서 EventStatus를 사용하는 방법을 가르치고 디자인의 모든 상태를 다루는 것을 알려드리고 싶어요.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:580/1*wL6d8JPLeO4MbkwBPLHwcA.gif\" alt=\"이미지\"></p>\n<p>지난 파트에서는 Bloc_state에서 상태를 다루기위해 EventStatus 클래스를 사용했었습니다.</p>\n<p><a href=\"https://medium.com/@moeinmoradi.dev/best-bloc-state-handling-in-flutter-0f95a8e89e40\" rel=\"nofollow\" target=\"_blank\">https://medium.com/@moeinmoradi.dev/best-bloc-state-handling-in-flutter-0f95a8e89e40</a></p>\n<p>제 친구 한 명의 제안에 따라, EventStatus 클래스에 대해 좀 더 나은 컨셉을 제안하고 그 이름을 StateStatus로 변경해보겠습니다. 다음과 같이 변경해주세요.</p>\n<pre><code class=\"hljs language-js\">@immutable\nabstract <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StateStatus</span>&#x3C;T> {\n  final int? itemId;\n  final T? data;\n  final <span class=\"hljs-title class_\">ErrorModel</span>? message;\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">StateStatus</span>({\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">itemId</span>,\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span>,\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">message</span>,\n  });\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StateLoading</span>&#x3C;T> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">StateStatus</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">StateLoading</span>({<span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-property\">itemId</span>});\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StateCompleted</span>&#x3C;T> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">StateStatus</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">StateCompleted</span>({required <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-property\">data</span>});\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StateInitial</span>&#x3C;T> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">StateStatus</span>&#x3C;T> {}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StateError</span>&#x3C;T> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">StateStatus</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">StateError</span>({required <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-property\">message</span>});\n}\n</code></pre>\n<p>좋아요, StateStatusLayout를 위한 클래스를 만들어봅시다.</p>\n<h1>StateStatusLayout</h1>\n<p>StateStatus에 따라 다른 디자인 상태를 표시하는 클래스가 필요합니다. 이 클래스는 각 상태와 해당 위젯을 표시할 수 있어야 합니다.</p>\n<p>이 클래스에서 BlocBuilder로부터 StateStatus를 받고 States에 따라 위젯을 반환했습니다 :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StateStatusLayout</span>&#x3C;T> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">StatelessWidget</span> {\n  final <span class=\"hljs-title class_\">StateStatus</span>&#x3C;T> status;\n  final <span class=\"hljs-title class_\">Widget</span> onErrorStatus;\n  final <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-title class_\">ErrorModel</span> error)? onErrorListener;\n  final <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-title class_\">BuildContext</span> context, T? data) onCompletedStatus;\n  final <span class=\"hljs-title class_\">Widget</span> onInitialStatus;\n  final <span class=\"hljs-title class_\">Widget</span> onLoadingStatus;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">StateStatusLayout</span>({\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-property\">key</span>,\n    required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">status</span>,\n    required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onCompletedStatus</span>,\n    required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onErrorStatus</span>,\n    required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onInitialStatus</span>,\n    required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onLoadingStatus</span>,\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onErrorListener</span>,\n  });\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">if</span> (status is <span class=\"hljs-title class_\">StateError</span>) {\n      <span class=\"hljs-keyword\">if</span> (onErrorListener != <span class=\"hljs-literal\">null</span>) {\n        onErrorListener!(status.<span class=\"hljs-property\">message</span>!);\n      }\n    }\n    <span class=\"hljs-keyword\">if</span> (status is <span class=\"hljs-title class_\">StateCompleted</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">StreamBuilder</span>(\n        <span class=\"hljs-attr\">stream</span>: <span class=\"hljs-title class_\">Stream</span>.<span class=\"hljs-title function_\">value</span>(status),\n        <span class=\"hljs-attr\">builder</span>: (context, snapshot) {\n          <span class=\"hljs-title function_\">log</span>(status.<span class=\"hljs-property\">data</span>!.<span class=\"hljs-title function_\">toString</span>());\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">onCompletedStatus</span>(context, status.<span class=\"hljs-property\">data</span>);\n        },\n      );\n    }\n    <span class=\"hljs-keyword\">if</span> (status is <span class=\"hljs-title class_\">StateError</span>) {\n      <span class=\"hljs-keyword\">return</span> onErrorStatus;\n    }\n    <span class=\"hljs-keyword\">if</span> (status is <span class=\"hljs-title class_\">StateInitial</span>) {\n      <span class=\"hljs-keyword\">return</span> onInitialStatus;\n    }\n    <span class=\"hljs-keyword\">if</span> (status is <span class=\"hljs-title class_\">StateLoading</span>) {\n      <span class=\"hljs-keyword\">return</span> onLoadingStatus;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Container</span>();\n  }\n}\n</code></pre>\n<p>그런데, StateCompleted 조건을 살펴보세요. 데이터를 표시하기 위해 StreamBuilder를 사용했습니다. 이것에 대해 어떻게 생각하시나요?</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*I6k_gZJ0KRZYR4KU22Okig.gif\" alt=\"image\"></p>\n<p>가끔 블록 쪽에서 데이터를 페이지네이션하거나 스트리밍해야 할 때, 위젯은 반드시 모든 상황에서 업데이트되어야 합니다. 그리고 위젯에서 오류가 발생하지 않도록하기 위해 이러한 가능한 상황을 고려하기 위해 StreamBuilder를 사용합니다.</p>\n<p>간단한 샘플 코드를 보여드리겠습니다. StateStatusLayout을 사용한 코드입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ShowLayout</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatelessWidget</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ShowLayout</span>({<span class=\"hljs-title class_\">Key</span>? key});\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">BlocBuilder</span>&#x3C;<span class=\"hljs-title class_\">ShowBloc</span>, <span class=\"hljs-title class_\">ShowState</span>>(\n        <span class=\"hljs-attr\">builder</span>: (context, state) {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">StateStatusLayout</span>(\n            <span class=\"hljs-attr\">status</span>: state.<span class=\"hljs-property\">showsStatus</span>,\n            <span class=\"hljs-attr\">onCompletedStatus</span>: (context, data) {\n              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">GridView</span>.<span class=\"hljs-title function_\">count</span>(\n                <span class=\"hljs-attr\">shrinkWrap</span>: <span class=\"hljs-literal\">true</span>,\n                <span class=\"hljs-attr\">padding</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-number\">10</span>),\n                <span class=\"hljs-attr\">physics</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ClampingScrollPhysics</span>(),\n                <span class=\"hljs-attr\">crossAxisSpacing</span>: <span class=\"hljs-number\">10</span>,\n                <span class=\"hljs-attr\">mainAxisSpacing</span>: <span class=\"hljs-number\">20</span>,\n                <span class=\"hljs-attr\">crossAxisCount</span>: <span class=\"hljs-number\">4</span>,\n                <span class=\"hljs-attr\">childAspectRatio</span>: <span class=\"hljs-number\">9</span> / <span class=\"hljs-number\">16</span>,\n                <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">List</span>.<span class=\"hljs-title function_\">generate</span>(data!.<span class=\"hljs-property\">shows</span>!.<span class=\"hljs-property\">length</span>, (index) {\n                  <span class=\"hljs-title class_\">ShowModel</span> item = data.<span class=\"hljs-property\">shows</span>![index];\n                  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">ShowCard</span>(\n                      <span class=\"hljs-attr\">show</span>: item,\n                      <span class=\"hljs-attr\">onSelected</span>: () {\n                        <span class=\"hljs-comment\">/// do Somethigs...</span>\n                      },\n                    );\n                }),\n              );\n            },\n            <span class=\"hljs-attr\">onErrorStatus</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SizedBox</span>(),\n            <span class=\"hljs-attr\">onInitialStatus</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SizedBox</span>(),\n            <span class=\"hljs-attr\">onLoadingStatus</span>: <span class=\"hljs-title class_\">Padding</span>(\n              <span class=\"hljs-attr\">padding</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-number\">48.0</span>),\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">SizedBox</span>(\n                <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">50</span>,\n                <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">50</span>,\n                <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">SpinKitRipple</span>(\n                  <span class=\"hljs-attr\">color</span>: themeData.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-property\">secondary</span>,\n                  <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">40</span>,\n                ),\n              ),\n            ),\n          );\n        },\n      );\n  }\n}\n</code></pre>\n<p>이 샘플 코드에서는 Bloc이 emit() 함수로 갱신될 때 showsStatus 상태에 대한 onCompletedStatus 및 onLoadingStatus를 처리했습니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1280/1*XwwugAFY35KNciVoDHThEw.gif\" alt=\"이미지\"></p>\n<h2>지금까지 함께 해주셔서 감사합니다</h2>\n<p>나와 함께 계속 이야기를 공유해주시고 피드백을 기다리고 있습니다. 분들의 소중한 의견을 기다리고 있습니다. 🙏</p>\n</body>\n</html>\n"},"__N_SSG":true}