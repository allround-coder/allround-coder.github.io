{"pageProps":{"post":{"title":"Nodejs 애플리케이션에서 Winston으로 로깅하는 방법","description":"","date":"2024-06-23 13:23","slug":"2024-06-23-UsingWinstonforLogginginNodejsApplications","content":"\n\n로그 기록은 모든 애플리케이션에서 중요한 부분입니다. 디버깅, 모니터링 및 코드 유지 관리에 도움이 됩니다. 유연성과 기능이 풍부한 기능으로 Node.js에서 가장 인기 있는 로깅 라이브러리 중 하나인 Winston에 대해 알아보겠습니다. 이 기사에서는 Node.js 애플리케이션에 Winston을 통합하는 방법과 그 기능을 최대한 활용하는 방법을 살펴보겠습니다.\n\n![이미지](/assets/img/2024-06-23-UsingWinstonforLogginginNodejsApplications_0.png)\n\n# 개요:\n\n이 튜토리얼에서 다룰 내용은:\n\n<div class=\"content-ad\"></div>\n\n- Node.js 프로젝트에서 Winston 설정하기.\n- 다른 로깅 레벨 구성하기.\n- 사용자 정의 로그 형식 만들기.\n- 여러 전송 방법 (콘솔, 파일 등)으로 로깅하기.\n- 사용자 정의 로그 레벨 만들기.\n- 매일 로그 파일에 로깅하기.\n- Express 애플리케이션에서 Winston 사용하기.\n\n# 준비물:\n\n- JavaScript 및 Node.js의 기본 지식.\n- npm 및 Express에 익숙해야 합니다 (마지막 단계에서 선택 사항이지만 권장됨).\n\n# 설정:\n\n<div class=\"content-ad\"></div>\n\nNode.js 프로젝트를 초기화해봅시다:\n\n```js\nmkdir winston-logger-example\ncd winston-logger-example\nnpm init -y\n```\n\nWinston을 설치해보세요:\n\n```js\nnpm install express winston winston-daily-rotate-file\n```\n\n<div class=\"content-ad\"></div>\n\n# 기본 설정:\n\nWinston을 설정하기 위한 logger.js 파일을 만듭니다:\n\n```js\n// logger.js\n\nconst { createLogger, format, transports } = require('winston');\n\nconst logger = createLogger({\n  level: 'info',\n  format: format.combine(\n    format.colorize(),\n    format.timestamp(),\n    format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`)\n  ),\n  transports: [\n    new transports.Console(),\n    new transports.File({ filename: 'app.log' })\n  ]\n});\n\nmodule.exports = logger;\n```\n\n설명:\n\n<div class=\"content-ad\"></div>\n\n- createLogger: 새 로거 인스턴스를 초기화합니다.\n- format.combine: 여러 형식을 결합하는데, 여기에서는 colorize, timestamp, printf를 사용합니다.\n- transports: 로그를 전송할 위치를 지정합니다. 이 예에서는 콘솔과 파일 (app.log)에 로그를 남깁니다.\n\n# 로깅 레벨 구성:\n\nWinston은 error, warn, info, http, verbose, debug, silly와 같은 여러 가지 로깅 레벨을 지원합니다. 캡쳐할 로그의 최소 레벨을 구성할 수 있습니다.\n\n```js\n// logger.js\n\nconst { createLogger, format, transports } = require('winston');\n\nconst logger = createLogger({\n  levels: {\n    error: 0,\n    warn: 1,\n    info: 2,\n    http: 3,\n    verbose: 4,\n    debug: 5,\n    silly: 6\n  },\n  level: 'info', // 기본 로그 레벨 설정\n  format: format.combine(\n    format.colorize(),\n    format.timestamp(),\n    format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`)\n  ),\n  transports: [\n    new transports.Console(),\n    new transports.File({ filename: 'app.log' })\n  ]\n});\n\nmodule.exports = logger;\n```\n\n<div class=\"content-ad\"></div>\n\n설명:\n\n- levels: 사용자 정의 로깅 레벨을 정의합니다.\n- level: 캡처할 로그의 최소 레벨을 설정합니다 (여기서는 info로 설정되어 있음).\n\n# 로그 레벨 이해:\n\n로그 레벨은 기록되는 메시지의 심각성을 결정합니다. Winston은 npm 스타일 로깅 레벨을 사용하며, 가장 심각한 것부터 가장 적게 심각한 것까지 우선 순위가 정해져 있습니다.\n\n<div class=\"content-ad\"></div>\n\n- error: (0) 즉각적인 주의가 필요한 오류를 기록하는 데 사용합니다.\n- warn: (1) 잠재적인 문제를 나타내는 경고 메시지를 기록하는 데 사용합니다.\n- info: (2) 애플리케이션 진행 상황을 강조하는 정보 메시지를 기록하는 데 사용합니다.\n- http: (3) HTTP 요청을 기록하는 데 사용합니다.\n- verbose: (4) 디버깅 중 유용한 자세한 정보를 기록하는 데 사용합니다.\n- debug: (5) 디버깅 정보를 기록하는 데 사용합니다.\n- silly: (6) 필요 이상으로 자세한 정보를 기록하는 데 사용합니다.\n\n덜 심각한 메시지를 필터링하기 위해 최소 로그 레벨을 설정할 수 있습니다. 예를 들어, 로그 레벨을 info로 설정하면 info, warn, error 메시지만 기록됩니다.\n\n# 사용자 정의 로그 포맷 생성:\n\n필요에 맞게 사용자 정의 로그 포맷을 만들 수 있습니다. 예를 들어, 메타데이터를 추가하거나 로그 메시지 구조를 변경할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// logger.js\n\nconst { createLogger, format, transports } = require('winston');\n\nconst customFormat = format.combine(\n  format.colorize(),\n  format.timestamp(),\n  format.printf(({ timestamp, level, message, ...meta }) => {\n    return `${timestamp} ${level}: ${message} ${Object.keys(meta).length ? JSON.stringify(meta, null, 2) : ''}`;\n  })\n);\n\nconst logger = createLogger({\n  level: 'info',\n  format: customFormat,\n  transports: [\n    new transports.Console(),\n    new transports.File({ filename: 'app.log' })\n  ]\n});\n\nmodule.exports = logger;\n```\n\n해설:\n\n- customFormat: 타임스탬프, 로그 레벨, 메시지 및 선택적인 메타데이터를 구조화된 로그 형식으로 결합합니다.\n\n# 다중 전송으로 로깅하기:\n\n<div class=\"content-ad\"></div>\n\n윈스턴은 서로 다른 파일, 외부 로깅 서비스 또는 콘솔과 같은 여러 대상에 로그를 기록할 수 있어요.\n\n```js\n// logger.js\n\nconst { createLogger, format, transports } = require('winston');\n\nconst logger = createLogger({\n  level: 'info',\n  format: format.combine(\n    format.timestamp(),\n    format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`)\n  ),\n  transports: [\n    new transports.Console(),\n    new transports.File({ filename: 'app.log' }),\n    new transports.File({ filename: 'error.log', level: 'error' })\n  ]\n});\n\nmodule.exports = logger;\n```\n\n설명:\n\n- transports.File('filename: ‘error.log’, level: ‘error’'): 에러 메시지를 별도의 파일에 기록합니다.\n\n<div class=\"content-ad\"></div>\n\n# 커스텀 로그 레벨 만들기:\n\n윈스턴(Winston)에서 자체적인 로그 레벨을 정의할 수 있습니다. 기본 레벨로는 충분하지 않은 특정 요구 사항이 있을 때 유용합니다.\n\n```js\n// logger.js\n\nconst { createLogger, format, transports, config } = require('winston');\n\nconst customLevels = {\n  levels: {\n    critical: 0,\n    error: 1,\n    warn: 2,\n    info: 3,\n    debug: 4\n  },\n  colors: {\n    critical: 'red',\n    error: 'red',\n    warn: 'yellow',\n    info: 'green',\n    debug: 'blue'\n  }\n};\n\nconst logger = createLogger({\n  levels: customLevels.levels,\n  level: 'info', // 기본 로그 레벨 설정\n  format: format.combine(\n    format.colorize({ all: true }),\n    format.timestamp(),\n    format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`)\n  ),\n  transports: [\n    new transports.Console(),\n    new transports.File({ filename: 'app.log' })\n  ]\n});\n\nwinston.addColors(customLevels.colors);\n\nmodule.exports = logger;\n```\n\n설명:\n\n<div class=\"content-ad\"></div>\n\n- customLevels: 사용자 정의 로깅 수준 및 해당하는 색상을 정의합니다.\n- winston.addColors: 로깅 수준에 사용자 정의 색상을 적용합니다.\n\n# 매일 로그 파일에 로깅하기:\n\nwinston-daily-rotate-file 전송을 사용하여 매일 새로운 로그 파일을 생성할 수 있습니다.\n\nwinston-daily-rotate-file를 설치하세요:\n\n<div class=\"content-ad\"></div>\n\n```jsx\nnpm install winston-daily-rotate-file\n\n매일 로테이트 파일 전송을 구성하세요:\n\n// logger.js\n\nconst { createLogger, format, transports } = require('winston');\nconst DailyRotateFile = require('winston-daily-rotate-file');\n\nconst logger = createLogger({\n  level: 'info',\n  format: format.combine(\n    format.timestamp(),\n    format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`)\n  ),\n  transports: [\n    new transports.Console(),\n    new DailyRotateFile({\n      filename: 'application-%DATE%.log',\n      datePattern: 'YYYY-MM-DD',\n      zippedArchive: true,\n      maxSize: '20m',\n      maxFiles: '14d'\n    })\n  ]\n});\n\nmodule.exports = logger;\n\n설명:\n```\n\n<div class=\"content-ad\"></div>\n\n- DailyRotateFile: 지정된 날짜 패턴으로 매일 새 로그 파일을 생성합니다.\n- zippedArchive: 이전 로그 파일을 압축합니다.\n- maxSize: 로테이션하기 전 로그 파일의 최대 크기입니다.\n- maxFiles: 로그 파일을 유지하는 최대 일수입니다.\n\n# Express 애플리케이션에서 Winston 사용하기:\n\nWinston을 Express 애플리케이션에 통합하여 HTTP 요청과 오류에 대한 로깅을 처리하세요.\n\nExpress 설치하기:\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install express\n```\n\nWinston을 이용한 Express 서버 설정:\n\n```js\n// server.js\n\nconst express = require('express');\nconst logger = require('./logger');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// HTTP 요청을 로깅하는 미들웨어\napp.use((req, res, next) => {\n  logger.http(`${req.method} ${req.url}`);\n  next();\n});\n\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n\n// 에러 처리 미들웨어\napp.use((err, req, res, next) => {\n  logger.error(err.message);\n  res.status(500).send('Internal Server Error');\n});\n\napp.listen(PORT, () => {\n  logger.info(`서버가 http://localhost:${PORT} 에서 실행 중입니다.`);\n});\n```\n\n설명:\n\n\n<div class=\"content-ad\"></div>\n\n- HTTP 요청 로깅: 미들웨어는 logger.http를 사용하여 수신된 모든 HTTP 요청을 로깅합니다.\n- 오류 처리 미들웨어: logger.error를 사용하여 오류를 로깅합니다.\n\n# 결론:\n\nWinston을 Node.js 애플리케이션에 통합함으로써 더욱 강력하고 유연한 로깅 시스템을 구축할 수 있습니다. 이를 통해 코드를 보다 효율적으로 디버깅, 모니터링 및 유지보수할 수 있습니다. 콘솔, 파일 또는 외부 서비스로 로그를 기록해야 하는 경우, Winston의 다양한 기능이 Node.js 로깅에 우수한 선택이 될 것입니다.","ogImage":{"url":"/assets/img/2024-06-23-UsingWinstonforLogginginNodejsApplications_0.png"},"coverImage":"/assets/img/2024-06-23-UsingWinstonforLogginginNodejsApplications_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>로그 기록은 모든 애플리케이션에서 중요한 부분입니다. 디버깅, 모니터링 및 코드 유지 관리에 도움이 됩니다. 유연성과 기능이 풍부한 기능으로 Node.js에서 가장 인기 있는 로깅 라이브러리 중 하나인 Winston에 대해 알아보겠습니다. 이 기사에서는 Node.js 애플리케이션에 Winston을 통합하는 방법과 그 기능을 최대한 활용하는 방법을 살펴보겠습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-UsingWinstonforLogginginNodejsApplications_0.png\" alt=\"이미지\"></p>\n<h1>개요:</h1>\n<p>이 튜토리얼에서 다룰 내용은:</p>\n<ul>\n<li>Node.js 프로젝트에서 Winston 설정하기.</li>\n<li>다른 로깅 레벨 구성하기.</li>\n<li>사용자 정의 로그 형식 만들기.</li>\n<li>여러 전송 방법 (콘솔, 파일 등)으로 로깅하기.</li>\n<li>사용자 정의 로그 레벨 만들기.</li>\n<li>매일 로그 파일에 로깅하기.</li>\n<li>Express 애플리케이션에서 Winston 사용하기.</li>\n</ul>\n<h1>준비물:</h1>\n<ul>\n<li>JavaScript 및 Node.js의 기본 지식.</li>\n<li>npm 및 Express에 익숙해야 합니다 (마지막 단계에서 선택 사항이지만 권장됨).</li>\n</ul>\n<h1>설정:</h1>\n<p>Node.js 프로젝트를 초기화해봅시다:</p>\n<pre><code class=\"hljs language-js\">mkdir winston-logger-example\ncd winston-logger-example\nnpm init -y\n</code></pre>\n<p>Winston을 설치해보세요:</p>\n<pre><code class=\"hljs language-js\">npm install express winston winston-daily-rotate-file\n</code></pre>\n<h1>기본 설정:</h1>\n<p>Winston을 설정하기 위한 logger.js 파일을 만듭니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// logger.js</span>\n\n<span class=\"hljs-keyword\">const</span> { createLogger, format, transports } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'winston'</span>);\n\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-title function_\">createLogger</span>({\n  <span class=\"hljs-attr\">level</span>: <span class=\"hljs-string\">'info'</span>,\n  <span class=\"hljs-attr\">format</span>: format.<span class=\"hljs-title function_\">combine</span>(\n    format.<span class=\"hljs-title function_\">colorize</span>(),\n    format.<span class=\"hljs-title function_\">timestamp</span>(),\n    format.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ timestamp, level, message }</span>) =></span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${timestamp}</span> <span class=\"hljs-subst\">${level}</span>: <span class=\"hljs-subst\">${message}</span>`</span>)\n  ),\n  <span class=\"hljs-attr\">transports</span>: [\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">Console</span>(),\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">File</span>({ <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'app.log'</span> })\n  ]\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = logger;\n</code></pre>\n<p>설명:</p>\n<ul>\n<li>createLogger: 새 로거 인스턴스를 초기화합니다.</li>\n<li>format.combine: 여러 형식을 결합하는데, 여기에서는 colorize, timestamp, printf를 사용합니다.</li>\n<li>transports: 로그를 전송할 위치를 지정합니다. 이 예에서는 콘솔과 파일 (app.log)에 로그를 남깁니다.</li>\n</ul>\n<h1>로깅 레벨 구성:</h1>\n<p>Winston은 error, warn, info, http, verbose, debug, silly와 같은 여러 가지 로깅 레벨을 지원합니다. 캡쳐할 로그의 최소 레벨을 구성할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// logger.js</span>\n\n<span class=\"hljs-keyword\">const</span> { createLogger, format, transports } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'winston'</span>);\n\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-title function_\">createLogger</span>({\n  <span class=\"hljs-attr\">levels</span>: {\n    <span class=\"hljs-attr\">error</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">warn</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">info</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">http</span>: <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-attr\">verbose</span>: <span class=\"hljs-number\">4</span>,\n    <span class=\"hljs-attr\">debug</span>: <span class=\"hljs-number\">5</span>,\n    <span class=\"hljs-attr\">silly</span>: <span class=\"hljs-number\">6</span>\n  },\n  <span class=\"hljs-attr\">level</span>: <span class=\"hljs-string\">'info'</span>, <span class=\"hljs-comment\">// 기본 로그 레벨 설정</span>\n  <span class=\"hljs-attr\">format</span>: format.<span class=\"hljs-title function_\">combine</span>(\n    format.<span class=\"hljs-title function_\">colorize</span>(),\n    format.<span class=\"hljs-title function_\">timestamp</span>(),\n    format.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ timestamp, level, message }</span>) =></span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${timestamp}</span> <span class=\"hljs-subst\">${level}</span>: <span class=\"hljs-subst\">${message}</span>`</span>)\n  ),\n  <span class=\"hljs-attr\">transports</span>: [\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">Console</span>(),\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">File</span>({ <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'app.log'</span> })\n  ]\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = logger;\n</code></pre>\n<p>설명:</p>\n<ul>\n<li>levels: 사용자 정의 로깅 레벨을 정의합니다.</li>\n<li>level: 캡처할 로그의 최소 레벨을 설정합니다 (여기서는 info로 설정되어 있음).</li>\n</ul>\n<h1>로그 레벨 이해:</h1>\n<p>로그 레벨은 기록되는 메시지의 심각성을 결정합니다. Winston은 npm 스타일 로깅 레벨을 사용하며, 가장 심각한 것부터 가장 적게 심각한 것까지 우선 순위가 정해져 있습니다.</p>\n<ul>\n<li>error: (0) 즉각적인 주의가 필요한 오류를 기록하는 데 사용합니다.</li>\n<li>warn: (1) 잠재적인 문제를 나타내는 경고 메시지를 기록하는 데 사용합니다.</li>\n<li>info: (2) 애플리케이션 진행 상황을 강조하는 정보 메시지를 기록하는 데 사용합니다.</li>\n<li>http: (3) HTTP 요청을 기록하는 데 사용합니다.</li>\n<li>verbose: (4) 디버깅 중 유용한 자세한 정보를 기록하는 데 사용합니다.</li>\n<li>debug: (5) 디버깅 정보를 기록하는 데 사용합니다.</li>\n<li>silly: (6) 필요 이상으로 자세한 정보를 기록하는 데 사용합니다.</li>\n</ul>\n<p>덜 심각한 메시지를 필터링하기 위해 최소 로그 레벨을 설정할 수 있습니다. 예를 들어, 로그 레벨을 info로 설정하면 info, warn, error 메시지만 기록됩니다.</p>\n<h1>사용자 정의 로그 포맷 생성:</h1>\n<p>필요에 맞게 사용자 정의 로그 포맷을 만들 수 있습니다. 예를 들어, 메타데이터를 추가하거나 로그 메시지 구조를 변경할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// logger.js</span>\n\n<span class=\"hljs-keyword\">const</span> { createLogger, format, transports } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'winston'</span>);\n\n<span class=\"hljs-keyword\">const</span> customFormat = format.<span class=\"hljs-title function_\">combine</span>(\n  format.<span class=\"hljs-title function_\">colorize</span>(),\n  format.<span class=\"hljs-title function_\">timestamp</span>(),\n  format.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ timestamp, level, message, ...meta }</span>) =></span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${timestamp}</span> <span class=\"hljs-subst\">${level}</span>: <span class=\"hljs-subst\">${message}</span> <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Object</span>.keys(meta).length ? <span class=\"hljs-built_in\">JSON</span>.stringify(meta, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>) : <span class=\"hljs-string\">''</span>}</span>`</span>;\n  })\n);\n\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-title function_\">createLogger</span>({\n  <span class=\"hljs-attr\">level</span>: <span class=\"hljs-string\">'info'</span>,\n  <span class=\"hljs-attr\">format</span>: customFormat,\n  <span class=\"hljs-attr\">transports</span>: [\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">Console</span>(),\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">File</span>({ <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'app.log'</span> })\n  ]\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = logger;\n</code></pre>\n<p>해설:</p>\n<ul>\n<li>customFormat: 타임스탬프, 로그 레벨, 메시지 및 선택적인 메타데이터를 구조화된 로그 형식으로 결합합니다.</li>\n</ul>\n<h1>다중 전송으로 로깅하기:</h1>\n<p>윈스턴은 서로 다른 파일, 외부 로깅 서비스 또는 콘솔과 같은 여러 대상에 로그를 기록할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// logger.js</span>\n\n<span class=\"hljs-keyword\">const</span> { createLogger, format, transports } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'winston'</span>);\n\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-title function_\">createLogger</span>({\n  <span class=\"hljs-attr\">level</span>: <span class=\"hljs-string\">'info'</span>,\n  <span class=\"hljs-attr\">format</span>: format.<span class=\"hljs-title function_\">combine</span>(\n    format.<span class=\"hljs-title function_\">timestamp</span>(),\n    format.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ timestamp, level, message }</span>) =></span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${timestamp}</span> <span class=\"hljs-subst\">${level}</span>: <span class=\"hljs-subst\">${message}</span>`</span>)\n  ),\n  <span class=\"hljs-attr\">transports</span>: [\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">Console</span>(),\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">File</span>({ <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'app.log'</span> }),\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">File</span>({ <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'error.log'</span>, <span class=\"hljs-attr\">level</span>: <span class=\"hljs-string\">'error'</span> })\n  ]\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = logger;\n</code></pre>\n<p>설명:</p>\n<ul>\n<li>transports.File('filename: ‘error.log’, level: ‘error’'): 에러 메시지를 별도의 파일에 기록합니다.</li>\n</ul>\n<h1>커스텀 로그 레벨 만들기:</h1>\n<p>윈스턴(Winston)에서 자체적인 로그 레벨을 정의할 수 있습니다. 기본 레벨로는 충분하지 않은 특정 요구 사항이 있을 때 유용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// logger.js</span>\n\n<span class=\"hljs-keyword\">const</span> { createLogger, format, transports, config } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'winston'</span>);\n\n<span class=\"hljs-keyword\">const</span> customLevels = {\n  <span class=\"hljs-attr\">levels</span>: {\n    <span class=\"hljs-attr\">critical</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">error</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">warn</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">info</span>: <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-attr\">debug</span>: <span class=\"hljs-number\">4</span>\n  },\n  <span class=\"hljs-attr\">colors</span>: {\n    <span class=\"hljs-attr\">critical</span>: <span class=\"hljs-string\">'red'</span>,\n    <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">'red'</span>,\n    <span class=\"hljs-attr\">warn</span>: <span class=\"hljs-string\">'yellow'</span>,\n    <span class=\"hljs-attr\">info</span>: <span class=\"hljs-string\">'green'</span>,\n    <span class=\"hljs-attr\">debug</span>: <span class=\"hljs-string\">'blue'</span>\n  }\n};\n\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-title function_\">createLogger</span>({\n  <span class=\"hljs-attr\">levels</span>: customLevels.<span class=\"hljs-property\">levels</span>,\n  <span class=\"hljs-attr\">level</span>: <span class=\"hljs-string\">'info'</span>, <span class=\"hljs-comment\">// 기본 로그 레벨 설정</span>\n  <span class=\"hljs-attr\">format</span>: format.<span class=\"hljs-title function_\">combine</span>(\n    format.<span class=\"hljs-title function_\">colorize</span>({ <span class=\"hljs-attr\">all</span>: <span class=\"hljs-literal\">true</span> }),\n    format.<span class=\"hljs-title function_\">timestamp</span>(),\n    format.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ timestamp, level, message }</span>) =></span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${timestamp}</span> <span class=\"hljs-subst\">${level}</span>: <span class=\"hljs-subst\">${message}</span>`</span>)\n  ),\n  <span class=\"hljs-attr\">transports</span>: [\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">Console</span>(),\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">File</span>({ <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'app.log'</span> })\n  ]\n});\n\nwinston.<span class=\"hljs-title function_\">addColors</span>(customLevels.<span class=\"hljs-property\">colors</span>);\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = logger;\n</code></pre>\n<p>설명:</p>\n<ul>\n<li>customLevels: 사용자 정의 로깅 수준 및 해당하는 색상을 정의합니다.</li>\n<li>winston.addColors: 로깅 수준에 사용자 정의 색상을 적용합니다.</li>\n</ul>\n<h1>매일 로그 파일에 로깅하기:</h1>\n<p>winston-daily-rotate-file 전송을 사용하여 매일 새로운 로그 파일을 생성할 수 있습니다.</p>\n<p>winston-daily-rotate-file를 설치하세요:</p>\n<pre><code class=\"hljs language-jsx\">npm install winston-daily-rotate-file\n\n매일 로테이트 파일 전송을 구성하세요:\n\n<span class=\"hljs-comment\">// logger.js</span>\n\n<span class=\"hljs-keyword\">const</span> { createLogger, format, transports } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'winston'</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">DailyRotateFile</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'winston-daily-rotate-file'</span>);\n\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-title function_\">createLogger</span>({\n  <span class=\"hljs-attr\">level</span>: <span class=\"hljs-string\">'info'</span>,\n  <span class=\"hljs-attr\">format</span>: format.<span class=\"hljs-title function_\">combine</span>(\n    format.<span class=\"hljs-title function_\">timestamp</span>(),\n    format.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ timestamp, level, message }</span>) =></span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${timestamp}</span> <span class=\"hljs-subst\">${level}</span>: <span class=\"hljs-subst\">${message}</span>`</span>)\n  ),\n  <span class=\"hljs-attr\">transports</span>: [\n    <span class=\"hljs-keyword\">new</span> transports.<span class=\"hljs-title class_\">Console</span>(),\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DailyRotateFile</span>({\n      <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'application-%DATE%.log'</span>,\n      <span class=\"hljs-attr\">datePattern</span>: <span class=\"hljs-string\">'YYYY-MM-DD'</span>,\n      <span class=\"hljs-attr\">zippedArchive</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">maxSize</span>: <span class=\"hljs-string\">'20m'</span>,\n      <span class=\"hljs-attr\">maxFiles</span>: <span class=\"hljs-string\">'14d'</span>\n    })\n  ]\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = logger;\n\n설명:\n</code></pre>\n<ul>\n<li>DailyRotateFile: 지정된 날짜 패턴으로 매일 새 로그 파일을 생성합니다.</li>\n<li>zippedArchive: 이전 로그 파일을 압축합니다.</li>\n<li>maxSize: 로테이션하기 전 로그 파일의 최대 크기입니다.</li>\n<li>maxFiles: 로그 파일을 유지하는 최대 일수입니다.</li>\n</ul>\n<h1>Express 애플리케이션에서 Winston 사용하기:</h1>\n<p>Winston을 Express 애플리케이션에 통합하여 HTTP 요청과 오류에 대한 로깅을 처리하세요.</p>\n<p>Express 설치하기:</p>\n<pre><code class=\"hljs language-js\">npm install express\n</code></pre>\n<p>Winston을 이용한 Express 서버 설정:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// server.js</span>\n\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./logger'</span>);\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PORT</span> = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">3000</span>;\n\n<span class=\"hljs-comment\">// HTTP 요청을 로깅하는 미들웨어</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =></span> {\n  logger.<span class=\"hljs-title function_\">http</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${req.method}</span> <span class=\"hljs-subst\">${req.url}</span>`</span>);\n  <span class=\"hljs-title function_\">next</span>();\n});\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n  res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'Hello, World!'</span>);\n});\n\n<span class=\"hljs-comment\">// 에러 처리 미들웨어</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err, req, res, next</span>) =></span> {\n  logger.<span class=\"hljs-title function_\">error</span>(err.<span class=\"hljs-property\">message</span>);\n  res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">500</span>).<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'Internal Server Error'</span>);\n});\n\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-function\">() =></span> {\n  logger.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">`서버가 http://localhost:<span class=\"hljs-subst\">${PORT}</span> 에서 실행 중입니다.`</span>);\n});\n</code></pre>\n<p>설명:</p>\n<ul>\n<li>HTTP 요청 로깅: 미들웨어는 logger.http를 사용하여 수신된 모든 HTTP 요청을 로깅합니다.</li>\n<li>오류 처리 미들웨어: logger.error를 사용하여 오류를 로깅합니다.</li>\n</ul>\n<h1>결론:</h1>\n<p>Winston을 Node.js 애플리케이션에 통합함으로써 더욱 강력하고 유연한 로깅 시스템을 구축할 수 있습니다. 이를 통해 코드를 보다 효율적으로 디버깅, 모니터링 및 유지보수할 수 있습니다. 콘솔, 파일 또는 외부 서비스로 로그를 기록해야 하는 경우, Winston의 다양한 기능이 Node.js 로깅에 우수한 선택이 될 것입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}