{"pageProps":{"post":{"title":"Angular에서 Web Sockets 구현하는 방법 가이드","description":"","date":"2024-06-22 03:39","slug":"2024-06-22-GuidetoimplementWebSocketsinAngular","content":"\n\n## 소개:\n\n웹 개발은 진화 중이며 실시간 애플리케이션은 사용자에게 즉각적인 업데이트를 제공하는 능력으로 인해 인기를 얻고 있습니다. 웹 소켓은 강력한 기술로, 클라이언트와 서버 간 실시간 통신을 가능하게 합니다. 이 자습서에서는 Angular 애플리케이션에 웹 소켓을 통합하여 실시간 상호작용을 원활하게 할 것입니다.\n\nAngular에서는 ngx-socket-io를 사용하여 웹 소켓 연결을 만들어 Angular 앱에 웹 소켓 기능을 추가하는 것이 더 쉬워집니다.\n\n## Angular 애플리케이션에서 웹 소켓 사용 방법:\n\n<div class=\"content-ad\"></div>\n\n## 1. 설치 :\n\nNPM을 사용하여 Socket.IO를 프로젝트에 추가하려면 터미널이나 명령 프롬프트에서 다음 명령을 입력하면 됩니다:\n// npm으로 설치하기\nnpm install socket.io\n\n// yarn으로 설치하기\nyarn add socket.io\n\n## 2. 웹 소켓 서비스 생성하기:\n\n<div class=\"content-ad\"></div>\n\n```js\n// web-socket.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\n\n@Injectable({\n providedIn: 'root',\n})\nexport class WebSocketService {\n private webSocket: Socket;\n\n constructor() {\n  this.webSocket = new Socket({\n   url: \"https://exampleUrl.com\",\n   options: {},\n  });\n }\n\n // This method is used to start the connection/handshake of the socket with the server\n connectSocket(message) {\n  this.webSocket.emit('connect', message);\n }\n\n // This method is used to receive a response from the server\n receiveStatus() {\n  return this.webSocket.fromEvent('/get-response');\n }\n\n // This method is used to end the web socket connection\n disconnectSocket() {\n  this.webSocket.disconnect();\n }\n}\n```\n\n## 3. Using Web-socket Service in an Angular Component:\n\n```js\n// my-component.component.ts\n\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { WebSocketService } from './websocket.service';\n\n@Component({\n selector: 'app-my-component',\n templateUrl: './my-component.component.html',\n styleUrls: ['./my-component.component.css'],\n})\nexport class MyComponentComponent implements OnInit, OnDestroy {\n constructor(private webSocketService: WebSocketService) { }\n\n ngOnInit(): void {\n  this.initializeSocketConnection();\n }\n\n ngOnDestroy() {\n  this.disconnectSocket();\n }\n\n // Initializes the socket connection\n initializeSocketConnection() {\n  this.webSocketService.connectSocket('message');\n }\n\n // Receives a response from the socket connection\n receiveSocketResponse() {\n  this.webSocketService.receiveStatus().subscribe((receivedMessage: string) => {\n   console.log(receivedMessage);\n  });\n }\n\n // Disconnects the socket connection\n disconnectSocket() {\n  this.webSocketService.disconnectSocket();\n }\n}\n```\n\n# Conclusion:\n\n<div class=\"content-ad\"></div>\n\n앵귤러에서 웹 소켓을 활용하면 애플리케이션의 프론트엔드와 백엔드 간 실시간 통신을 구축할 수 있습니다. 이를 통해 사용자들에게 실시간 업데이트, 채팅 기능 또는 협업 편집과 같은 기능을 제공할 수 있어요.\n이 예시를 확장하여 추가 기능을 통합하거나 견고한 오류 처리를 구현하거나 백엔드 데이터베이스와 원활하게 통합하는 등 더 많은 기능을 추가할 수 있습니다. 즐거운 코딩 여행 되세요!","ogImage":{"url":"/assets/img/2024-06-22-GuidetoimplementWebSocketsinAngular_0.png"},"coverImage":"/assets/img/2024-06-22-GuidetoimplementWebSocketsinAngular_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>소개:</h2>\n<p>웹 개발은 진화 중이며 실시간 애플리케이션은 사용자에게 즉각적인 업데이트를 제공하는 능력으로 인해 인기를 얻고 있습니다. 웹 소켓은 강력한 기술로, 클라이언트와 서버 간 실시간 통신을 가능하게 합니다. 이 자습서에서는 Angular 애플리케이션에 웹 소켓을 통합하여 실시간 상호작용을 원활하게 할 것입니다.</p>\n<p>Angular에서는 ngx-socket-io를 사용하여 웹 소켓 연결을 만들어 Angular 앱에 웹 소켓 기능을 추가하는 것이 더 쉬워집니다.</p>\n<h2>Angular 애플리케이션에서 웹 소켓 사용 방법:</h2>\n<h2>1. 설치 :</h2>\n<p>NPM을 사용하여 Socket.IO를 프로젝트에 추가하려면 터미널이나 명령 프롬프트에서 다음 명령을 입력하면 됩니다:\n// npm으로 설치하기\nnpm install socket.io</p>\n<p>// yarn으로 설치하기\nyarn add socket.io</p>\n<h2>2. 웹 소켓 서비스 생성하기:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// web-socket.service.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Socket</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ngx-socket-io'</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>({\n <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebSocketService</span> {\n private <span class=\"hljs-attr\">webSocket</span>: <span class=\"hljs-title class_\">Socket</span>;\n\n <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">webSocket</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Socket</span>({\n   <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"https://exampleUrl.com\"</span>,\n   <span class=\"hljs-attr\">options</span>: {},\n  });\n }\n\n <span class=\"hljs-comment\">// This method is used to start the connection/handshake of the socket with the server</span>\n <span class=\"hljs-title function_\">connectSocket</span>(<span class=\"hljs-params\">message</span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">webSocket</span>.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">'connect'</span>, message);\n }\n\n <span class=\"hljs-comment\">// This method is used to receive a response from the server</span>\n <span class=\"hljs-title function_\">receiveStatus</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">webSocket</span>.<span class=\"hljs-title function_\">fromEvent</span>(<span class=\"hljs-string\">'/get-response'</span>);\n }\n\n <span class=\"hljs-comment\">// This method is used to end the web socket connection</span>\n <span class=\"hljs-title function_\">disconnectSocket</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">webSocket</span>.<span class=\"hljs-title function_\">disconnect</span>();\n }\n}\n</code></pre>\n<h2>3. Using Web-socket Service in an Angular Component:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// my-component.component.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">OnInit</span>, <span class=\"hljs-title class_\">OnDestroy</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">WebSocketService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./websocket.service'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-my-component'</span>,\n <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./my-component.component.html'</span>,\n <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./my-component.component.css'</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponentComponent</span> implements <span class=\"hljs-title class_\">OnInit</span>, <span class=\"hljs-title class_\">OnDestroy</span> {\n <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private webSocketService: WebSocketService</span>) { }\n\n <span class=\"hljs-title function_\">ngOnInit</span>(): <span class=\"hljs-keyword\">void</span> {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">initializeSocketConnection</span>();\n }\n\n <span class=\"hljs-title function_\">ngOnDestroy</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">disconnectSocket</span>();\n }\n\n <span class=\"hljs-comment\">// Initializes the socket connection</span>\n <span class=\"hljs-title function_\">initializeSocketConnection</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">webSocketService</span>.<span class=\"hljs-title function_\">connectSocket</span>(<span class=\"hljs-string\">'message'</span>);\n }\n\n <span class=\"hljs-comment\">// Receives a response from the socket connection</span>\n <span class=\"hljs-title function_\">receiveSocketResponse</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">webSocketService</span>.<span class=\"hljs-title function_\">receiveStatus</span>().<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">receivedMessage: string</span>) =></span> {\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(receivedMessage);\n  });\n }\n\n <span class=\"hljs-comment\">// Disconnects the socket connection</span>\n <span class=\"hljs-title function_\">disconnectSocket</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">webSocketService</span>.<span class=\"hljs-title function_\">disconnectSocket</span>();\n }\n}\n</code></pre>\n<h1>Conclusion:</h1>\n<p>앵귤러에서 웹 소켓을 활용하면 애플리케이션의 프론트엔드와 백엔드 간 실시간 통신을 구축할 수 있습니다. 이를 통해 사용자들에게 실시간 업데이트, 채팅 기능 또는 협업 편집과 같은 기능을 제공할 수 있어요.\n이 예시를 확장하여 추가 기능을 통합하거나 견고한 오류 처리를 구현하거나 백엔드 데이터베이스와 원활하게 통합하는 등 더 많은 기능을 추가할 수 있습니다. 즐거운 코딩 여행 되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}