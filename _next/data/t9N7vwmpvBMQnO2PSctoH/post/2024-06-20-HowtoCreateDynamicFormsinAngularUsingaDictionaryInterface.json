{"pageProps":{"post":{"title":"앵귤러에서 사전 인터페이스를 활용하여 동적 폼 생성하기","description":"","date":"2024-06-20 02:35","slug":"2024-06-20-HowtoCreateDynamicFormsinAngularUsingaDictionaryInterface","content":"\n\n\n![이미지](/assets/img/2024-06-20-HowtoCreateDynamicFormsinAngularUsingaDictionaryInterface_0.png)\n\n앵귤러에서 동적 폼을 생성하면 유연한 데이터 구조를 처리하는 강력한 방법이 될 수 있습니다. 특히 복잡하거나 중첩된 JSON 객체를 반환하는 API와 작업할 때 유용합니다. 이 기사에서는 Dictionary 인터페이스와 동적 폼 생성기 서비스를 사용하여 앵귤러에서 동적 폼을 생성하는 방법을 보여드리겠습니다.\n\n## Dictionary 인터페이스 정의하기\n\n먼저 Dictionary 인터페이스를 정의해봅시다. 이 인터페이스를 사용하면 문자열 또는 중첩된 사전을 포함할 수 있는 재귀 형식을 사용할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\r\nexport interface Dictionary {\n  [key: string]: string | Dictionary;\n}\n```\n\n## 동적 폼 생성기 서비스 만들기\n\n다음으로, 딕셔너리의 구조에 기반하여 폼 컨트롤을 생성할 수 있는 서비스가 필요합니다. 이 서비스는 중첩된 딕셔너리에 대해 재귀적으로 폼 그룹을 생성하고 문자열 값에 대해 폼 컨트롤을 만들 것입니다.\n\n다음은 DynamicFormGeneratorService입니다:\n\n<div class=\"content-ad\"></div>\n\n```ts\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicFormGeneratorService {\n  #fb = inject(FormBuilder);\n\n  createForm(data: Dictionary): FormGroup {\n    const formControls = this.createControls(data);\n    return this.#fb.group(formControls);\n  }\n\n  private createControls(data: Dictionary): { [key: string]: AbstractControl } {\n    return Object.keys(data).reduce((controls, key) => {\n      if (typeof data[key] === 'object' && data[key] !== null) {\n        controls[key] = this.#fb.group(this.createControls(data[key] as Dictionary));\n      } else {\n        controls[key] = new FormControl(data[key] as string, Validators.required);\n      }\n      return controls;\n    }, {} as { [key: string]: AbstractControl });\n  }\n}\n```\n\n## 동적 폼 그룹 컴포넌트 생성\n\n이제, 이 서비스를 사용하여 사전 데이터를 기반으로 폼을 생성하는 컴포넌트를 생성해 봅시다. 이 컴포넌트는 폼을 랜더링하고 폼 제출을 처리하는 역할을 담당할 것입니다.\n\n다음은 DynamicFormGroupComponent의 TypeScript 코드입니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n@Component({\n  selector: 'app-dynamic-form-group',\n  standalone: true,\n  imports: [ReactiveFormsModule],\n  templateUrl: './dynamic-form-group.component.html',\n})\nexport class DynamicFormGroupComponent implements OnInit {\n  @Output() formValues = new EventEmitter<Dictionary>();\n  @Input() initialData?: Dictionary;\n  @Input() formGroup: FormGroup = new FormGroup({});\n\n  #dynamicFormService = inject(DynamicFormGeneratorService);\n  objectKeys = Object.keys;\n\n  ngOnInit(): void {\n    if (this.initialData) {\n      this.formGroup = this.#dynamicFormService.createForm(this.initialData);\n    }\n  }\n\n  onSubmit(): void {\n    if (!this.initialData || this.formGroup.invalid) return;\n    this.formValues.emit(this.formGroup.value);\n  }\n\n  isGroup(control: AbstractControl | null): control is FormGroup {\n    return control instanceof FormGroup;\n  }\n\n  getFormGroup(control: AbstractControl | null): FormGroup {\n    return control as FormGroup;\n  }\n}\n```\n\n그리고 해당하는 HTML 템플릿:\n\n```js\n<form\n  [formGroup]=\"formGroup\"\n  class=\"p-6 bg-indigo-50 border border-red-200 rounded-lg shadow-sm space-y-4\"\n>\n  <!-- 이 루프는 formGroup.controls 객체의 키를 반복합니다. -->\n  <!-- 각 키는 폼 컨트롤이나 중첩된 폼 그룹을 나타냅니다. -->\n  <ng-container *ngFor=\"let key of objectKeys(formGroup.controls)\">\n    <!-- 현재 폼 컨트롤이 FormGroup인지 확인하는 조건문입니다. -->\n    <ng-container *ngIf=\"isGroup(formGroup.get(key)); else singleControl\">\n      <!-- 그것이 FormGroup이면, 해당하는 필드셋이 생성됩니다. -->\n      <fieldset\n        [formGroupName]=\"key\"\n        class=\"border border-gray-300 rounded-lg p-4 bg-white\"\n      >\n        <legend class=\"text-lg font-semibold text-gray-700 mb-2\">{ key }</legend>\n\n        <!-- 중첩된 FormGroup은 formGroup 입력 프로퍼티를 사용하여 컴포넌트에 전달됩니다. -->\n        <app-dynamic-form-group\n          [formGroup]=\"getFormGroup(formGroup.get(key))\"\n        ></app-dynamic-form-group>\n      </fieldset>\n    </ng-container>\n    <ng-template #singleControl>\n      <!-- 현재 폼 컨트롤이 FormGroup가 아닌 경우, 해당하는 입력 필드가 생성됩니다. -->\n      <!-- formControlName 지시문은 이 입력 필드를 해당 폼 컨트롤과 연결합니다. -->\n      <div class=\"flex flex-col space-y-2\">\n        <label [for]=\"key\" class=\"text-sm font-medium text-gray-600\">{ key }</label>\n        <input\n          [formControlName]=\"key\"\n          id=\"{ key }\"\n          class=\"p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n        />\n      </div>\n    </ng-template>\n  </ng-container>\n\n  <!-- initialData가 있는지 확인하고 있으면 제출 버튼을 추가합니다. -->\n  <button\n    *ngIf=\"initialData\"\n    (click)=\"onSubmit()\"\n    [disabled]=\"formGroup.invalid\"\n    class=\"bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n  >\n    제출\n  </button>\n</form>\n```\n\n# 모두 함께 넣어보기\n\n\n<div class=\"content-ad\"></div>\n\n이 동적 양식을 애플리케이션에서 사용하려면 일반적으로 사전 데이터를 제공하고 양식 제출을 처리하는 부모 구성 요소가 있는 것이 일반적입니다:\n\n```js\nexport class AppComponent {\n  title = 'dynamic-forms';\n\n  onFormValues(values: Dictionary) {\n    console.table(values);\n  }\n\n  contract: Dictionary = {\n    contractId: 'C12345',\n    contractType: 'Employment',\n    startDate: '2024-01-01',\n    endDate: '2025-01-01',\n    employer: {\n      name: 'Tech Corp Inc.',\n      address: '456 Technology Drive, Silicon Valley, USA',\n      contact: {\n        phone: '555-1234',\n        email: 'hr@techcorp.com',\n      },\n    },\n\n    jobDetails: {\n      jobTitle: 'Senior Developer',\n      jobDescription:\n        'Responsible for developing and maintaining web applications.',\n      salary: '75000',\n      benefits: 'Health, Dental, Vision',\n    },\n  };\n}\n```\n\n# 미리보기\n\n<img src=\"/assets/img/2024-06-20-HowtoCreateDynamicFormsinAngularUsingaDictionaryInterface_1.png\" />\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n이 기사에서는 Angular를 사용하여 사전 인터페이스를 활용해 동적 양식을 생성하는 방법을 보여드렸습니다. Angular의 반응형 폼과 재귀적 접근을 활용하여 복잡한 형식을 생성하고 모든 데이터 구조에 적응할 수 있습니다. 이 방법은 특히 API에서 동적 데이터를 처리하고 유연한 폼 구성 요소를 생성하는 데 유용합니다.\n\n더 많은 Angular 팁과 트릭을 기대해 주세요! 👨‍💻\n\n이 기사를 즐겼고 연결하고 싶다면 LinkedIn에서 저를 팔로우해 주세요.\n\n<div class=\"content-ad\"></div>\n\n# 스택데미크 🎓\n\n끝까지 읽어주셔서 감사합니다. 떠나시기 전에:\n\n- 작가를 클랩하고 팔로우해주시면 감사하겠습니다! 👏\n- 팔로우하기: X | LinkedIn | YouTube | Discord\n- 다른 플랫폼 방문하기: In Plain English | CoFeed | Differ\n- 스택데미크 닷컴에서 더 많은 컨텐츠 확인하기","ogImage":{"url":"/assets/img/2024-06-20-HowtoCreateDynamicFormsinAngularUsingaDictionaryInterface_0.png"},"coverImage":"/assets/img/2024-06-20-HowtoCreateDynamicFormsinAngularUsingaDictionaryInterface_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-20-HowtoCreateDynamicFormsinAngularUsingaDictionaryInterface_0.png\" alt=\"이미지\"></p>\n<p>앵귤러에서 동적 폼을 생성하면 유연한 데이터 구조를 처리하는 강력한 방법이 될 수 있습니다. 특히 복잡하거나 중첩된 JSON 객체를 반환하는 API와 작업할 때 유용합니다. 이 기사에서는 Dictionary 인터페이스와 동적 폼 생성기 서비스를 사용하여 앵귤러에서 동적 폼을 생성하는 방법을 보여드리겠습니다.</p>\n<h2>Dictionary 인터페이스 정의하기</h2>\n<p>먼저 Dictionary 인터페이스를 정의해봅시다. 이 인터페이스를 사용하면 문자열 또는 중첩된 사전을 포함할 수 있는 재귀 형식을 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> interface <span class=\"hljs-title class_\">Dictionary</span> {\n  [<span class=\"hljs-attr\">key</span>: string]: string | <span class=\"hljs-title class_\">Dictionary</span>;\n}\n</code></pre>\n<h2>동적 폼 생성기 서비스 만들기</h2>\n<p>다음으로, 딕셔너리의 구조에 기반하여 폼 컨트롤을 생성할 수 있는 서비스가 필요합니다. 이 서비스는 중첩된 딕셔너리에 대해 재귀적으로 폼 그룹을 생성하고 문자열 값에 대해 폼 컨트롤을 만들 것입니다.</p>\n<p>다음은 DynamicFormGeneratorService입니다:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-meta\">@Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicFormGeneratorService</span> {\n  #fb = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">FormBuilder</span>);\n\n  <span class=\"hljs-title function_\">createForm</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">Dictionary</span>): <span class=\"hljs-title class_\">FormGroup</span> {\n    <span class=\"hljs-keyword\">const</span> formControls = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">createControls</span>(data);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.#fb.<span class=\"hljs-title function_\">group</span>(formControls);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">createControls</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">Dictionary</span>): { [<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-title class_\">AbstractControl</span> } {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(data).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">controls, key</span>) =></span> {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> data[key] === <span class=\"hljs-string\">'object'</span> &#x26;&#x26; data[key] !== <span class=\"hljs-literal\">null</span>) {\n        controls[key] = <span class=\"hljs-variable language_\">this</span>.#fb.<span class=\"hljs-title function_\">group</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">createControls</span>(data[key] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Dictionary</span>));\n      } <span class=\"hljs-keyword\">else</span> {\n        controls[key] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormControl</span>(data[key] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-title class_\">Validators</span>.<span class=\"hljs-property\">required</span>);\n      }\n      <span class=\"hljs-keyword\">return</span> controls;\n    }, {} <span class=\"hljs-keyword\">as</span> { [<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-title class_\">AbstractControl</span> });\n  }\n}\n</code></pre>\n<h2>동적 폼 그룹 컴포넌트 생성</h2>\n<p>이제, 이 서비스를 사용하여 사전 데이터를 기반으로 폼을 생성하는 컴포넌트를 생성해 봅시다. 이 컴포넌트는 폼을 랜더링하고 폼 제출을 처리하는 역할을 담당할 것입니다.</p>\n<p>다음은 DynamicFormGroupComponent의 TypeScript 코드입니다:</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-dynamic-form-group'</span>,\n  <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">ReactiveFormsModule</span>],\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./dynamic-form-group.component.html'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicFormGroupComponent</span> implements <span class=\"hljs-title class_\">OnInit</span> {\n  @<span class=\"hljs-title class_\">Output</span>() formValues = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventEmitter</span>&#x3C;<span class=\"hljs-title class_\">Dictionary</span>>();\n  @<span class=\"hljs-title class_\">Input</span>() initialData?: <span class=\"hljs-title class_\">Dictionary</span>;\n  @<span class=\"hljs-title class_\">Input</span>() <span class=\"hljs-attr\">formGroup</span>: <span class=\"hljs-title class_\">FormGroup</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormGroup</span>({});\n\n  #dynamicFormService = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">DynamicFormGeneratorService</span>);\n  objectKeys = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\">keys</span>;\n\n  <span class=\"hljs-title function_\">ngOnInit</span>(): <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">initialData</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">formGroup</span> = <span class=\"hljs-variable language_\">this</span>.#dynamicFormService.<span class=\"hljs-title function_\">createForm</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">initialData</span>);\n    }\n  }\n\n  <span class=\"hljs-title function_\">onSubmit</span>(): <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">initialData</span> || <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">formGroup</span>.<span class=\"hljs-property\">invalid</span>) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">formValues</span>.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">formGroup</span>.<span class=\"hljs-property\">value</span>);\n  }\n\n  <span class=\"hljs-title function_\">isGroup</span>(<span class=\"hljs-attr\">control</span>: <span class=\"hljs-title class_\">AbstractControl</span> | <span class=\"hljs-literal\">null</span>): control is <span class=\"hljs-title class_\">FormGroup</span> {\n    <span class=\"hljs-keyword\">return</span> control <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">FormGroup</span>;\n  }\n\n  <span class=\"hljs-title function_\">getFormGroup</span>(<span class=\"hljs-attr\">control</span>: <span class=\"hljs-title class_\">AbstractControl</span> | <span class=\"hljs-literal\">null</span>): <span class=\"hljs-title class_\">FormGroup</span> {\n    <span class=\"hljs-keyword\">return</span> control <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">FormGroup</span>;\n  }\n}\n</code></pre>\n<p>그리고 해당하는 HTML 템플릿:</p>\n<pre><code class=\"hljs language-js\">&#x3C;form\n  [formGroup]=<span class=\"hljs-string\">\"formGroup\"</span>\n  <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"p-6 bg-indigo-50 border border-red-200 rounded-lg shadow-sm space-y-4\"</span>\n>\n  &#x3C;!-- 이 루프는 formGroup.<span class=\"hljs-property\">controls</span> 객체의 키를 반복합니다. -->\n  &#x3C;!-- 각 키는 폼 컨트롤이나 중첩된 폼 그룹을 나타냅니다. -->\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ng-container</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let key of objectKeys(formGroup.controls)\"</span>></span>\n    <span class=\"hljs-comment\">&#x3C;!-- 현재 폼 컨트롤이 FormGroup인지 확인하는 조건문입니다. --></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ng-container</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"isGroup(formGroup.get(key)); else singleControl\"</span>></span>\n      <span class=\"hljs-comment\">&#x3C;!-- 그것이 FormGroup이면, 해당하는 필드셋이 생성됩니다. --></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">fieldset</span>\n        [<span class=\"hljs-attr\">formGroupName</span>]=<span class=\"hljs-string\">\"key\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"border border-gray-300 rounded-lg p-4 bg-white\"</span>\n      ></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">legend</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text-lg font-semibold text-gray-700 mb-2\"</span>></span>{ key }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">legend</span>></span>\n\n        <span class=\"hljs-comment\">&#x3C;!-- 중첩된 FormGroup은 formGroup 입력 프로퍼티를 사용하여 컴포넌트에 전달됩니다. --></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">app-dynamic-form-group</span>\n          [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"getFormGroup(formGroup.get(key))\"</span>\n        ></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">app-dynamic-form-group</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">fieldset</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ng-container</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ng-template</span> #<span class=\"hljs-attr\">singleControl</span>></span>\n      <span class=\"hljs-comment\">&#x3C;!-- 현재 폼 컨트롤이 FormGroup가 아닌 경우, 해당하는 입력 필드가 생성됩니다. --></span>\n      <span class=\"hljs-comment\">&#x3C;!-- formControlName 지시문은 이 입력 필드를 해당 폼 컨트롤과 연결합니다. --></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"flex flex-col space-y-2\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> [<span class=\"hljs-attr\">for</span>]=<span class=\"hljs-string\">\"key\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text-sm font-medium text-gray-600\"</span>></span>{ key }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n          [<span class=\"hljs-attr\">formControlName</span>]=<span class=\"hljs-string\">\"key\"</span>\n          <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"{ key }\"</span>\n          <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"</span>\n        /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ng-template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ng-container</span>></span></span>\n\n  &#x3C;!-- initialData가 있는지 확인하고 있으면 제출 버튼을 추가합니다. -->\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n    *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"initialData\"</span>\n    (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"onSubmit()\"</span>\n    [<span class=\"hljs-attr\">disabled</span>]=<span class=\"hljs-string\">\"formGroup.invalid\"</span>\n    <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 disabled:opacity-50 disabled:cursor-not-allowed\"</span>\n  ></span>\n    제출\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n&#x3C;/form>\n</code></pre>\n<h1>모두 함께 넣어보기</h1>\n<p>이 동적 양식을 애플리케이션에서 사용하려면 일반적으로 사전 데이터를 제공하고 양식 제출을 처리하는 부모 구성 요소가 있는 것이 일반적입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n  title = <span class=\"hljs-string\">'dynamic-forms'</span>;\n\n  <span class=\"hljs-title function_\">onFormValues</span>(<span class=\"hljs-params\">values: Dictionary</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">table</span>(values);\n  }\n\n  <span class=\"hljs-attr\">contract</span>: <span class=\"hljs-title class_\">Dictionary</span> = {\n    <span class=\"hljs-attr\">contractId</span>: <span class=\"hljs-string\">'C12345'</span>,\n    <span class=\"hljs-attr\">contractType</span>: <span class=\"hljs-string\">'Employment'</span>,\n    <span class=\"hljs-attr\">startDate</span>: <span class=\"hljs-string\">'2024-01-01'</span>,\n    <span class=\"hljs-attr\">endDate</span>: <span class=\"hljs-string\">'2025-01-01'</span>,\n    <span class=\"hljs-attr\">employer</span>: {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Tech Corp Inc.'</span>,\n      <span class=\"hljs-attr\">address</span>: <span class=\"hljs-string\">'456 Technology Drive, Silicon Valley, USA'</span>,\n      <span class=\"hljs-attr\">contact</span>: {\n        <span class=\"hljs-attr\">phone</span>: <span class=\"hljs-string\">'555-1234'</span>,\n        <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">'hr@techcorp.com'</span>,\n      },\n    },\n\n    <span class=\"hljs-attr\">jobDetails</span>: {\n      <span class=\"hljs-attr\">jobTitle</span>: <span class=\"hljs-string\">'Senior Developer'</span>,\n      <span class=\"hljs-attr\">jobDescription</span>:\n        <span class=\"hljs-string\">'Responsible for developing and maintaining web applications.'</span>,\n      <span class=\"hljs-attr\">salary</span>: <span class=\"hljs-string\">'75000'</span>,\n      <span class=\"hljs-attr\">benefits</span>: <span class=\"hljs-string\">'Health, Dental, Vision'</span>,\n    },\n  };\n}\n</code></pre>\n<h1>미리보기</h1>\n<h1>결론</h1>\n<p>이 기사에서는 Angular를 사용하여 사전 인터페이스를 활용해 동적 양식을 생성하는 방법을 보여드렸습니다. Angular의 반응형 폼과 재귀적 접근을 활용하여 복잡한 형식을 생성하고 모든 데이터 구조에 적응할 수 있습니다. 이 방법은 특히 API에서 동적 데이터를 처리하고 유연한 폼 구성 요소를 생성하는 데 유용합니다.</p>\n<p>더 많은 Angular 팁과 트릭을 기대해 주세요! 👨‍💻</p>\n<p>이 기사를 즐겼고 연결하고 싶다면 LinkedIn에서 저를 팔로우해 주세요.</p>\n<h1>스택데미크 🎓</h1>\n<p>끝까지 읽어주셔서 감사합니다. 떠나시기 전에:</p>\n<ul>\n<li>작가를 클랩하고 팔로우해주시면 감사하겠습니다! 👏</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord</li>\n<li>다른 플랫폼 방문하기: In Plain English | CoFeed | Differ</li>\n<li>스택데미크 닷컴에서 더 많은 컨텐츠 확인하기</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}