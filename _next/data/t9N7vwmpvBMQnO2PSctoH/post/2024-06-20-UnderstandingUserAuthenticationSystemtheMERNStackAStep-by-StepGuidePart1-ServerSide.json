{"pageProps":{"post":{"title":"MERN 스택에서 사용자 인증 시스템 이해하기 단계별 안내  파트1 - 서버 사이드","description":"","date":"2024-06-20 04:13","slug":"2024-06-20-UnderstandingUserAuthenticationSystemtheMERNStackAStep-by-StepGuidePart1-ServerSide","content":"\n\n안녕하세요 개발자 여러분! 이 이야기에서는 서버 및 클라이언트 측을 모두 포함한 인증 시스템을 구축할 것입니다. 그러나 이 부분에서는 서버 측만 구축할 것입니다.\n\n이 프로젝트의 레포지토리 링크는 다음과 같습니다. 미리 확인해보세요.\n\n## 목차\n\n- 소개\n- 프로젝트 설정하기\n- 환경 변수 설정하기\n- 데이터베이스 구성하기\n- 모델 생성하기\n- 컨트롤러 구축하기\n- 미들웨어 구현하기\n- 라우트 설정하기\n- 서버 테스트하기\n\n<div class=\"content-ad\"></div>\n\n## 1. 소개\n\n인증은 모든 애플리케이션의 중요한 부분입니다. 사용자가 자신이 주장하는 대로인지 확인하고 그들이 자격이 있는 리소스에 액세스할 수 있도록 보장합니다. 이 안내서에서는 Node.js, Express 및 JWT (JSON Web Tokens)를 사용하여 간단한 토큰 기반 인증 시스템을 구축할 것입니다.\n\n이야기 끝에 프로젝트 폴더 구조는 다음과 같이 보일 것입니다:\n\n![프로젝트 폴더 구조](/assets/img/2024-06-20-UnderstandingUserAuthenticationSystemtheMERNStackAStep-by-StepGuidePart1-ServerSide_0.png)\n\n<div class=\"content-ad\"></div>\n\n그럼 시작해보겠습니다!\n\n## 2: 프로젝트 설정\n\n먼저, 프로젝트를 설정해보겠습니다. 터미널을 열고 아래 명령어를 실행해주세요:\n\n```bash\nmkdir user-auth-system\ncd user-auth-system\nmkdir server\nmkdir client\ncd server\nnpm init -y\n```\n\n<div class=\"content-ad\"></div>\n\n프로젝트 폴더를 만들었는데 서버 및 클라이언트 폴더를 모두 포함하고 있어요. 하지만 클라이언트 쪽은 Part 2에서 만들 거에요. 이제 프로젝트의 서버 쪽에 사용할 필수 패키지를 설치해봐요.\n\n다음 패키지들을 사용할 거에요:\n\n- 서버용으로 express\n- 토큰 처리를 위한 jsonwebtoken\n- 패스워드 해싱을 위한 bcryptjs\n- 환경 변수를 관리하는 dotenv\n- 데이터베이스용으로 mongoose\n- Node.js 서버를 자동으로 재시작하는 nodemon\n- Cross-Origin Resource Sharing를 활성화하기 위한 cors\n\n아래 명령어를 실행하여 이러한 모든 패키지를 설치해주세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install express jsonwebtoken bcryptjs dotenv mongoose nodemon cors\n```\n\n## 3. 환경 변수 설정\n\n루트 디렉터리에 .env 파일을 만들고 다음 환경 변수를 추가하세요.\n\n```js\nMONGO_URI=\"mongodb://127.0.0.1/UserAuthSystem\" // 본인의 정보로 대체해주세요\nPORT=5000\nJWT_SECRET=your_jwt_secret_key\n```\n\n<div class=\"content-ad\"></div>\n\n- JWT_SECRET: JWT(JSON Web Token) 비밀 키는 토큰을 서명하고 확인하기 위해 사용되는 문자열입니다. 신뢰할 수 있는 출처에서 발급되었으며 조작되지 않았음을 서버가 확인하여 토큰의 무결성과 신뢰성을 보장합니다. 비밀 키를 문서에 책임을 증명하는 서명이나 봉인과 같다고 생각해보세요.\n- MONGO_URI: MongoDB URI는 응용 프로그램을 MongoDB 데이터베이스에 연결하는 연결 문자열입니다. 데이터베이스 주소, 포트 번호, 데이터베이스 이름 및 인증 자격 증명과 같은 정보를 포함합니다. 데이터베이스의 소포 주소처럼 생각해보세요. 응용 프로그램이 데이터베이스를 찾고 통신할 수 있도록 하는 것입니다. 사용자는 로컬 및 클라우드 기반 연결 문자열을 모두 사용할 수 있습니다.\n\n보안상의 이유로 Node.js 프로젝트의 .env 파일은 민감한 정보가 버전 관리에서 노출되지 않도록 .gitignore 파일에 포함되어야 합니다.\n\n## 4. 서버 생성\n\nserver.js라는 파일을 만들어 간단한 Express 서버를 만들어봅시다. 다음 코드를 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nrequire(\"dotenv\").config();\nconst express = require(\"express\");\nconst app = express();\nconst cors = require(\"cors\");\n\nrequire(\"./config/db\");\n\n//Middlewares\napp.use(cors());\napp.use(express.json());\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`SERVER RUNNING ON PORT: ${PORT}`));\n```\n\n아래 명령으로 코드를 실행할 수 있습니다:\n\n```js\nnode src/server.js\n```\n\n서버를 시작하는 데 nodemon 패키지를 사용할 수도 있습니다. nodemon을 사용하면 파일 변경 후 서버를 다시 시작할 필요가 없습니다.\n\n<div class=\"content-ad\"></div>\n\n저희 package.json 파일의 scripts 섹션을 업데이트해야 합니다:\n\n```json\n \"scripts\": {\n    \"start\": \"node src/server.js\",\n    \"dev\": \"nodemon src/server.js\"\n  },\n```\n\n이제 다음 명령어를 실행해주세요:\n\n```bash\nnpm run dev\n```\n\n<div class=\"content-ad\"></div>\n\n터미널에서 포트 5000에서 서버가 실행 중임을 확인해야 해요. 확인되면 좋아요! 우리 서버가 가동 중이에요!\n\n![이미지](https://miro.medium.com/v2/resize:fit:900/0*0feaPgbIGqHg0vXg.gif)\n\n## 5. 데이터베이스 구성\n\n데이터베이스로 MongoDB를 사용할 거예요. 데이터베이스 연결을 구성하기 위해 src/config 폴더에 db.js 파일을 생성해주세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst mongoose = require(\"mongoose\");\nmongoose\n  .connect(process.env.MONGO_URI)\n  .then(() => console.log(\"DATABASE CONNECTED\"))\n  .catch((err) => {\n    console.log(\"DATABASE CONNECTION ERROR\", err);\n    process.exit(1);\n  });\n```\n\nURL 'mongodb://127.0.0.1/UserAuthSystem'를 로컬에서 사용할 수 있습니다. 그러나 여기서 온라인 데이터베이스를 생성할 수도 있습니다. 프로젝트를 생성한 다음 클러스터를 만들면 됩니다. 거기서 얻은 URL을 사용하여 자신의 데이터베이스를 사용할 수 있습니다. 양쪽 모두 문제없이 작동합니다.\n\n## 6. 모델 생성\n\n다음으로 src/models/User.js에 User 모델을 생성해보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst mongoose = require(\"mongoose\");\nconst bcrypt = require(\"bcryptjs\");\n\nlet UserSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    index: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/],\n  },\n  password: {\n    type: String,\n    required: true,\n    select: false,\n  },\n  created_at: {\n    type: String,\n  },\n});\n\nUserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\")) {\n    return next();\n  }\n  const salt = await bcrypt.genSalt(10);\n  this.password = await bcrypt.hash(this.password, salt);\n  next();\n});\n\nmodule.exports = mongoose.model(\"user\", UserSchema);\n```\n\n- 사용자 문서를 저장하기 전에, 사전 저장 후크가 암호가 수정되었는지 확인합니다.\n- 암호가 수정되었으면, bcryptjs를 사용하여 솔트를 생성하고 암호를 해시하여 데이터베이스에 저장합니다.\n\n## 7. Controllers 만들기\n\n컨트롤러는 route의 로직을 처리합니다. 이제 src/controllers 폴더에 authController.js를 생성하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst { check, validationResult } = require(\"express-validator\");\n\nconst User = require(\"../models/User\");\n\nasync function Login(req, res) {\n  try {\n    await check(\"email\", \"유효한 이메일을 입력해주세요\").isEmail().run(req);\n    await check(\"password\", \"비밀번호를 입력해주세요\").exists().run(req);\n\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { email, password } = req.body;\n\n    let user = await User.findOne({ email }).select(\"+password\");\n    if (!user) {\n      return res.status(400).json({\n        msg: \"유효하지 않은 자격 증명\",\n        success: false,\n      });\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        msg: \"유효하지 않은 자격 증명\",\n        success: false,\n      });\n    }\n\n    jwt.sign(\n      { id: user._id },\n      process.env.JWT_SECRET,\n      { expiresIn: \"10m\" },\n      (err, token) => {\n        if (err) throw err;\n        res.status(200).json({\n          token,\n        });\n      }\n    );\n  } catch (err) {\n    console.log(err);\n    res.status(400).json({ success: false });\n  }\n}\n\nasync function Register(req, res) {\n  try {\n    await check(\"username\", \"사용자 이름을 입력해주세요\").not().isEmpty().run(req);\n    await check(\"email\", \"유효한 이메일을 입력해주세요\").isEmail().run(req);\n    await check(\"password\", \"비밀번호는 6자 이상이어야 합니다\")\n      .isLength({ min: 6 })\n      .run(req);\n\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() }); \n    }\n\n    const { username, email, password } = req.body;\n\n    let user = await User.findOne({ email });\n    if (user) { \n      return res.status(400).json({ \n        msg: \"이미 등록된 사용자\",\n        success: false,\n      });\n    }\n\n    user = new User({\n      username,\n      email,\n      password,\n    });\n\n    await user.save();\n\n    jwt.sign(\n      { id: user._id },\n      process.env.JWT_SECRET,\n      { expiresIn: 36000 },\n      (err, token) => {\n        if (err) throw err;\n        res.status(200).json({\n          token,\n        });\n      }\n    );\n  } catch (err) {\n    console.log(err);\n    res.status(400).json({ success: false });\n  }\n}\n\nasync function GetUser(req, res) {\n  try {\n    const user = await User.findById(req.user.id);\n    res.status(200).json({\n      user,\n      success: true,\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).json({ msg: \"서버 에러\" });\n  }\n}\n\nmodule.exports = { Login, Register, GetUser };\n``` \n\n- 이 컨트롤러 파일은 로그인, 등록 및 사용자 데이터 가져오기와 같은 핵심 기능을 제공하며, 인증을 위해 JSON Web Token을 활용합니다. 이러한 기능을 라우트에서 사용할 것입니다.\n- 인증 시스템의 로그인 및 등록 부분에서 토큰이 생성됩니다. 이 토큰은 클라이언트로 보내는 응답에 포함됩니다. 인증 검증에 중요한 역할을 합니다. 또한 클라이언트 측에서 토큰은 후속 사용을 위해 쿠키에 저장됩니다.\n- express-validator npm 패키지를 사용하여 이메일 및 비밀번호가 제공되고 유효한지 확인합니다.\n\n## 8. 미들웨어 구현\n\n토큰을 확인하기 위한 미들웨어가 필요합니다. 계속하기 전에 미들웨어가 무엇인지 설명드리겠습니다.\n\n<div class=\"content-ad\"></div>\n\n- 미들웨어는 웹 애플리케이션에서 요청이 최종 라우트 핸들러에 도달하기 전에 처리하는 함수입니다. 인증, 로깅 또는 요청 및 응답 객체 수정과 같은 작업을 처리할 수 있습니다.\n- 미들웨어를 공항의 보안 점검 및 프로세스와 비슷하게 생각해보세요. 비행기를 탑승하기 전에 보안, 세관, 탑승 등 다양한 점검점을 거치는 것처럼 요청도 최종 라우트 핸들러에 도달하기 전에 여러 미들웨어 함수를 거칩니다. 각 미들웨어는 특정 작업을 수행한 다음 요청을 다음 미들웨어로 전달하여 코드를 모듈화하고 재사용 가능하게 만듭니다.\n\n우리는 src/middlewares/verifyAuth.js에서 이를 달성합니다.\n\n```js\nconst jwt = require(\"jsonwebtoken\");\nmodule.exports = (req, res, next) => {\n  const token = req.header(\"x-token\");\n  if (!token) {\n    return res.status(401).json({\n      msg: \"유효한 토큰이 없습니다\",\n      success: false,\n    });\n  }\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(400).json({\n      msg: \"유효한 토큰이 없습니다\",\n      success: false,\n    });\n  }\n};\n```\n\n- 이 코드 스니펫은 x-token으로 할당된 요청 헤더에서 토큰을 확인합니다.\n- 토큰이 유효하면 토큰을 디코드하고 디코딩된 사용자 정보를 req.user에 할당한 다음 next()를 호출하여 제어를 다음 미들웨어 또는 라우트 핸들러로 전달합니다.\n\n<div class=\"content-ad\"></div>\n\n## 9. 라우트 설정하기\n\n이제 라우트를 설정해봅시다. src/routes 폴더에 auth.js를 생성하세요.\n\n```js\nconst express = require(\"express\");\nconst { Login, Register, GetUser } = require(\"../controllers/authController\");\nconst verifyAuth = require(\"../middlewares/verifyAuth\");\n\nconst router = express.Router();\n\nrouter.post(\"/login\", Login);\n\nrouter.post(\"/register\", Register);\n\nrouter.get(\"/user\", verifyAuth, GetUser);\n\nmodule.exports = router;\n```\n\n또한 server.js 파일을 업데이트하여 라우트를 연결해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nrequire(\"dotenv\").config();\nconst express = require(\"express\");\nconst app = express();\nconst cors = require(\"cors\");\n\nrequire(\"./config/db\");\n\n//Middlewares\napp.use(cors());\napp.use(express.json());\n\n// Routes\napp.use(\"/\", require(\"./routes/auth\"));\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => console.log(`서버가 포트 ${PORT}에서 실행 중입니다.`));\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:960/0*ggZsEOvbfphfI42C.gif\" />\n\n## 10. 서버 테스트하기\n\n이제 서버를 테스트해보는 시간입니다. 제대로 작동하는지 확인해봅시다.\n\n\n<div class=\"content-ad\"></div>\n\n- npm run dev 명령어로 서버를 다시 실행한 후 Postman과 같은 API 플랫폼을 사용하여 /register 및 /login 엔드포인트를 테스트해보세요.\n- 또는 다른 쉬운 방법을 제안할 수도 있어요. VS Code 확장 프로그램인 REST Client를 사용해보세요.\n\n![이미지](/assets/img/2024-06-20-UnderstandingUserAuthenticationSystemtheMERNStackAStep-by-StepGuidePart1-ServerSide_1.png)\n\n- 이 확장 프로그램을 활용하기 위해 .rest 확장자를 가진 파일을 생성해야 해요. 그 파일에 HTTP 메서드를 입력하고 간편하게 요청을 보낼 수 있어요. 이 방법을 사용하여 라우트를 테스트하는 것을 선호한다면 이 방법을 사용할 수도 있어요.\n\n다음은 routes.rest 파일 내용입니다.\n\n<div class=\"content-ad\"></div>\n\n\nPOST http://localhost:3000/login\nContent-Type: application/json\n\n{\n    \"email\":\"test@gmail.com\",\n    \"password\":\"123456\"\n}\n\n###\n\nPOST http://localhost:3000/register\nContent-Type: application/json\n\n{\n    \n    \"email\":\"test@gmail.com\",\n    \"username\":\"alitalhacoban\",\n    \"password\":\"123456\"\n}\n\n###\n\nGET http://localhost:3000/user\nContent-Type: application/json\nx-token:your_access_token\n\n\n<img src=\"https://miro.medium.com/v2/resize:fit:990/0*Fl_hEz8V6Z0DRz88.gif\" />\n\n이 글에서는 간단한 토큰 기반 인증 시스템을 Node.js에서 구축했습니다. 이 설정은 Node.js 애플리케이션에서 안전한 인증을 구현하기 위한 견고한 기반을 제공합니다. Part 2에서는 이 프로젝트의 클라이언트 측을 구축하여 인증용 사용자 인터페이스를 만드는 방법과 서버와의 연결 방법에 대해 살펴볼 것입니다.\n\n이 글이 여러분에게 도움이 되기를 바랍니다. 계속 주시고 이와 같은 내용을 더 원하시면 박수를 치세요! 즐거운 코딩하세요!\n\n\n<div class=\"content-ad\"></div>\n\n아래 링크를 확인해 보세요.\n\n- cobanalitalha@gmail.com\n- github.com/carpodok\n- linkedin.com/alitalhacoban","ogImage":{"url":"/assets/img/2024-06-20-UnderstandingUserAuthenticationSystemtheMERNStackAStep-by-StepGuidePart1-ServerSide_0.png"},"coverImage":"/assets/img/2024-06-20-UnderstandingUserAuthenticationSystemtheMERNStackAStep-by-StepGuidePart1-ServerSide_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요 개발자 여러분! 이 이야기에서는 서버 및 클라이언트 측을 모두 포함한 인증 시스템을 구축할 것입니다. 그러나 이 부분에서는 서버 측만 구축할 것입니다.</p>\n<p>이 프로젝트의 레포지토리 링크는 다음과 같습니다. 미리 확인해보세요.</p>\n<h2>목차</h2>\n<ul>\n<li>소개</li>\n<li>프로젝트 설정하기</li>\n<li>환경 변수 설정하기</li>\n<li>데이터베이스 구성하기</li>\n<li>모델 생성하기</li>\n<li>컨트롤러 구축하기</li>\n<li>미들웨어 구현하기</li>\n<li>라우트 설정하기</li>\n<li>서버 테스트하기</li>\n</ul>\n<h2>1. 소개</h2>\n<p>인증은 모든 애플리케이션의 중요한 부분입니다. 사용자가 자신이 주장하는 대로인지 확인하고 그들이 자격이 있는 리소스에 액세스할 수 있도록 보장합니다. 이 안내서에서는 Node.js, Express 및 JWT (JSON Web Tokens)를 사용하여 간단한 토큰 기반 인증 시스템을 구축할 것입니다.</p>\n<p>이야기 끝에 프로젝트 폴더 구조는 다음과 같이 보일 것입니다:</p>\n<p><img src=\"/assets/img/2024-06-20-UnderstandingUserAuthenticationSystemtheMERNStackAStep-by-StepGuidePart1-ServerSide_0.png\" alt=\"프로젝트 폴더 구조\"></p>\n<p>그럼 시작해보겠습니다!</p>\n<h2>2: 프로젝트 설정</h2>\n<p>먼저, 프로젝트를 설정해보겠습니다. 터미널을 열고 아래 명령어를 실행해주세요:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> user-auth-system\n<span class=\"hljs-built_in\">cd</span> user-auth-system\n<span class=\"hljs-built_in\">mkdir</span> server\n<span class=\"hljs-built_in\">mkdir</span> client\n<span class=\"hljs-built_in\">cd</span> server\nnpm init -y\n</code></pre>\n<p>프로젝트 폴더를 만들었는데 서버 및 클라이언트 폴더를 모두 포함하고 있어요. 하지만 클라이언트 쪽은 Part 2에서 만들 거에요. 이제 프로젝트의 서버 쪽에 사용할 필수 패키지를 설치해봐요.</p>\n<p>다음 패키지들을 사용할 거에요:</p>\n<ul>\n<li>서버용으로 express</li>\n<li>토큰 처리를 위한 jsonwebtoken</li>\n<li>패스워드 해싱을 위한 bcryptjs</li>\n<li>환경 변수를 관리하는 dotenv</li>\n<li>데이터베이스용으로 mongoose</li>\n<li>Node.js 서버를 자동으로 재시작하는 nodemon</li>\n<li>Cross-Origin Resource Sharing를 활성화하기 위한 cors</li>\n</ul>\n<p>아래 명령어를 실행하여 이러한 모든 패키지를 설치해주세요:</p>\n<pre><code class=\"hljs language-js\">npm install express jsonwebtoken bcryptjs dotenv mongoose nodemon cors\n</code></pre>\n<h2>3. 환경 변수 설정</h2>\n<p>루트 디렉터리에 .env 파일을 만들고 다음 환경 변수를 추가하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">MONGO_URI</span>=<span class=\"hljs-string\">\"mongodb://127.0.0.1/UserAuthSystem\"</span> <span class=\"hljs-comment\">// 본인의 정보로 대체해주세요</span>\n<span class=\"hljs-variable constant_\">PORT</span>=<span class=\"hljs-number\">5000</span>\n<span class=\"hljs-variable constant_\">JWT_SECRET</span>=your_jwt_secret_key\n</code></pre>\n<ul>\n<li>JWT_SECRET: JWT(JSON Web Token) 비밀 키는 토큰을 서명하고 확인하기 위해 사용되는 문자열입니다. 신뢰할 수 있는 출처에서 발급되었으며 조작되지 않았음을 서버가 확인하여 토큰의 무결성과 신뢰성을 보장합니다. 비밀 키를 문서에 책임을 증명하는 서명이나 봉인과 같다고 생각해보세요.</li>\n<li>MONGO_URI: MongoDB URI는 응용 프로그램을 MongoDB 데이터베이스에 연결하는 연결 문자열입니다. 데이터베이스 주소, 포트 번호, 데이터베이스 이름 및 인증 자격 증명과 같은 정보를 포함합니다. 데이터베이스의 소포 주소처럼 생각해보세요. 응용 프로그램이 데이터베이스를 찾고 통신할 수 있도록 하는 것입니다. 사용자는 로컬 및 클라우드 기반 연결 문자열을 모두 사용할 수 있습니다.</li>\n</ul>\n<p>보안상의 이유로 Node.js 프로젝트의 .env 파일은 민감한 정보가 버전 관리에서 노출되지 않도록 .gitignore 파일에 포함되어야 합니다.</p>\n<h2>4. 서버 생성</h2>\n<p>server.js라는 파일을 만들어 간단한 Express 서버를 만들어봅시다. 다음 코드를 추가하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"dotenv\"</span>).<span class=\"hljs-title function_\">config</span>();\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n<span class=\"hljs-keyword\">const</span> cors = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"cors\"</span>);\n\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./config/db\"</span>);\n\n<span class=\"hljs-comment\">//Middlewares</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title function_\">cors</span>());\napp.<span class=\"hljs-title function_\">use</span>(express.<span class=\"hljs-title function_\">json</span>());\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PORT</span> = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">5000</span>;\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-function\">() =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`SERVER RUNNING ON PORT: <span class=\"hljs-subst\">${PORT}</span>`</span>));\n</code></pre>\n<p>아래 명령으로 코드를 실행할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">node src/server.<span class=\"hljs-property\">js</span>\n</code></pre>\n<p>서버를 시작하는 데 nodemon 패키지를 사용할 수도 있습니다. nodemon을 사용하면 파일 변경 후 서버를 다시 시작할 필요가 없습니다.</p>\n<p>저희 package.json 파일의 scripts 섹션을 업데이트해야 합니다:</p>\n<pre><code class=\"hljs language-json\"> <span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"start\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"node src/server.js\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"dev\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"nodemon src/server.js\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n</code></pre>\n<p>이제 다음 명령어를 실행해주세요:</p>\n<pre><code class=\"hljs language-bash\">npm run dev\n</code></pre>\n<p>터미널에서 포트 5000에서 서버가 실행 중임을 확인해야 해요. 확인되면 좋아요! 우리 서버가 가동 중이에요!</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:900/0*0feaPgbIGqHg0vXg.gif\" alt=\"이미지\"></p>\n<h2>5. 데이터베이스 구성</h2>\n<p>데이터베이스로 MongoDB를 사용할 거예요. 데이터베이스 연결을 구성하기 위해 src/config 폴더에 db.js 파일을 생성해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"mongoose\"</span>);\nmongoose\n  .<span class=\"hljs-title function_\">connect</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">MONGO_URI</span>)\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"DATABASE CONNECTED\"</span>))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"DATABASE CONNECTION ERROR\"</span>, err);\n    process.<span class=\"hljs-title function_\">exit</span>(<span class=\"hljs-number\">1</span>);\n  });\n</code></pre>\n<p>URL 'mongodb://127.0.0.1/UserAuthSystem'를 로컬에서 사용할 수 있습니다. 그러나 여기서 온라인 데이터베이스를 생성할 수도 있습니다. 프로젝트를 생성한 다음 클러스터를 만들면 됩니다. 거기서 얻은 URL을 사용하여 자신의 데이터베이스를 사용할 수 있습니다. 양쪽 모두 문제없이 작동합니다.</p>\n<h2>6. 모델 생성</h2>\n<p>다음으로 src/models/User.js에 User 모델을 생성해보겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"mongoose\"</span>);\n<span class=\"hljs-keyword\">const</span> bcrypt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"bcryptjs\"</span>);\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">UserSchema</span> = <span class=\"hljs-keyword\">new</span> mongoose.<span class=\"hljs-title class_\">Schema</span>({\n  <span class=\"hljs-attr\">username</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span>,\n    <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">index</span>: <span class=\"hljs-literal\">true</span>,\n  },\n  <span class=\"hljs-attr\">email</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span>,\n    <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">unique</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">match</span>: [<span class=\"hljs-regexp\">/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/</span>],\n  },\n  <span class=\"hljs-attr\">password</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span>,\n    <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">select</span>: <span class=\"hljs-literal\">false</span>,\n  },\n  <span class=\"hljs-attr\">created_at</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span>,\n  },\n});\n\n<span class=\"hljs-title class_\">UserSchema</span>.<span class=\"hljs-title function_\">pre</span>(<span class=\"hljs-string\">\"save\"</span>, <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">next</span>) {\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">isModified</span>(<span class=\"hljs-string\">\"password\"</span>)) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">next</span>();\n  }\n  <span class=\"hljs-keyword\">const</span> salt = <span class=\"hljs-keyword\">await</span> bcrypt.<span class=\"hljs-title function_\">genSalt</span>(<span class=\"hljs-number\">10</span>);\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password</span> = <span class=\"hljs-keyword\">await</span> bcrypt.<span class=\"hljs-title function_\">hash</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password</span>, salt);\n  <span class=\"hljs-title function_\">next</span>();\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = mongoose.<span class=\"hljs-title function_\">model</span>(<span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-title class_\">UserSchema</span>);\n</code></pre>\n<ul>\n<li>사용자 문서를 저장하기 전에, 사전 저장 후크가 암호가 수정되었는지 확인합니다.</li>\n<li>암호가 수정되었으면, bcryptjs를 사용하여 솔트를 생성하고 암호를 해시하여 데이터베이스에 저장합니다.</li>\n</ul>\n<h2>7. Controllers 만들기</h2>\n<p>컨트롤러는 route의 로직을 처리합니다. 이제 src/controllers 폴더에 authController.js를 생성하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> bcrypt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"bcryptjs\"</span>);\n<span class=\"hljs-keyword\">const</span> jwt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"jsonwebtoken\"</span>);\n<span class=\"hljs-keyword\">const</span> { check, validationResult } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express-validator\"</span>);\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">User</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../models/User\"</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Login</span>(<span class=\"hljs-params\">req, res</span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-string\">\"email\"</span>, <span class=\"hljs-string\">\"유효한 이메일을 입력해주세요\"</span>).<span class=\"hljs-title function_\">isEmail</span>().<span class=\"hljs-title function_\">run</span>(req);\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"비밀번호를 입력해주세요\"</span>).<span class=\"hljs-title function_\">exists</span>().<span class=\"hljs-title function_\">run</span>(req);\n\n    <span class=\"hljs-keyword\">const</span> errors = <span class=\"hljs-title function_\">validationResult</span>(req);\n    <span class=\"hljs-keyword\">if</span> (!errors.<span class=\"hljs-title function_\">isEmpty</span>()) {\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">errors</span>: errors.<span class=\"hljs-title function_\">array</span>() });\n    }\n\n    <span class=\"hljs-keyword\">const</span> { email, password } = req.<span class=\"hljs-property\">body</span>;\n\n    <span class=\"hljs-keyword\">let</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">User</span>.<span class=\"hljs-title function_\">findOne</span>({ email }).<span class=\"hljs-title function_\">select</span>(<span class=\"hljs-string\">\"+password\"</span>);\n    <span class=\"hljs-keyword\">if</span> (!user) {\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">json</span>({\n        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">\"유효하지 않은 자격 증명\"</span>,\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>,\n      });\n    }\n\n    <span class=\"hljs-keyword\">const</span> isMatch = <span class=\"hljs-keyword\">await</span> bcrypt.<span class=\"hljs-title function_\">compare</span>(password, user.<span class=\"hljs-property\">password</span>);\n    <span class=\"hljs-keyword\">if</span> (!isMatch) {\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">json</span>({\n        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">\"유효하지 않은 자격 증명\"</span>,\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>,\n      });\n    }\n\n    jwt.<span class=\"hljs-title function_\">sign</span>(\n      { <span class=\"hljs-attr\">id</span>: user.<span class=\"hljs-property\">_id</span> },\n      process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">JWT_SECRET</span>,\n      { <span class=\"hljs-attr\">expiresIn</span>: <span class=\"hljs-string\">\"10m\"</span> },\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">err, token</span>) =></span> {\n        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n        res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>).<span class=\"hljs-title function_\">json</span>({\n          token,\n        });\n      }\n    );\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span> });\n  }\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Register</span>(<span class=\"hljs-params\">req, res</span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-string\">\"username\"</span>, <span class=\"hljs-string\">\"사용자 이름을 입력해주세요\"</span>).<span class=\"hljs-title function_\">not</span>().<span class=\"hljs-title function_\">isEmpty</span>().<span class=\"hljs-title function_\">run</span>(req);\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-string\">\"email\"</span>, <span class=\"hljs-string\">\"유효한 이메일을 입력해주세요\"</span>).<span class=\"hljs-title function_\">isEmail</span>().<span class=\"hljs-title function_\">run</span>(req);\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"비밀번호는 6자 이상이어야 합니다\"</span>)\n      .<span class=\"hljs-title function_\">isLength</span>({ <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">6</span> })\n      .<span class=\"hljs-title function_\">run</span>(req);\n\n    <span class=\"hljs-keyword\">const</span> errors = <span class=\"hljs-title function_\">validationResult</span>(req);\n    <span class=\"hljs-keyword\">if</span> (!errors.<span class=\"hljs-title function_\">isEmpty</span>()) {\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">errors</span>: errors.<span class=\"hljs-title function_\">array</span>() }); \n    }\n\n    <span class=\"hljs-keyword\">const</span> { username, email, password } = req.<span class=\"hljs-property\">body</span>;\n\n    <span class=\"hljs-keyword\">let</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">User</span>.<span class=\"hljs-title function_\">findOne</span>({ email });\n    <span class=\"hljs-keyword\">if</span> (user) { \n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">json</span>({ \n        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">\"이미 등록된 사용자\"</span>,\n        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>,\n      });\n    }\n\n    user = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>({\n      username,\n      email,\n      password,\n    });\n\n    <span class=\"hljs-keyword\">await</span> user.<span class=\"hljs-title function_\">save</span>();\n\n    jwt.<span class=\"hljs-title function_\">sign</span>(\n      { <span class=\"hljs-attr\">id</span>: user.<span class=\"hljs-property\">_id</span> },\n      process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">JWT_SECRET</span>,\n      { <span class=\"hljs-attr\">expiresIn</span>: <span class=\"hljs-number\">36000</span> },\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">err, token</span>) =></span> {\n        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n        res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>).<span class=\"hljs-title function_\">json</span>({\n          token,\n        });\n      }\n    );\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span> });\n  }\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">GetUser</span>(<span class=\"hljs-params\">req, res</span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">User</span>.<span class=\"hljs-title function_\">findById</span>(req.<span class=\"hljs-property\">user</span>.<span class=\"hljs-property\">id</span>);\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>).<span class=\"hljs-title function_\">json</span>({\n      user,\n      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>,\n    });\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err.<span class=\"hljs-property\">message</span>);\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">500</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">\"서버 에러\"</span> });\n  }\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = { <span class=\"hljs-title class_\">Login</span>, <span class=\"hljs-title class_\">Register</span>, <span class=\"hljs-title class_\">GetUser</span> };\n</code></pre>\n<ul>\n<li>이 컨트롤러 파일은 로그인, 등록 및 사용자 데이터 가져오기와 같은 핵심 기능을 제공하며, 인증을 위해 JSON Web Token을 활용합니다. 이러한 기능을 라우트에서 사용할 것입니다.</li>\n<li>인증 시스템의 로그인 및 등록 부분에서 토큰이 생성됩니다. 이 토큰은 클라이언트로 보내는 응답에 포함됩니다. 인증 검증에 중요한 역할을 합니다. 또한 클라이언트 측에서 토큰은 후속 사용을 위해 쿠키에 저장됩니다.</li>\n<li>express-validator npm 패키지를 사용하여 이메일 및 비밀번호가 제공되고 유효한지 확인합니다.</li>\n</ul>\n<h2>8. 미들웨어 구현</h2>\n<p>토큰을 확인하기 위한 미들웨어가 필요합니다. 계속하기 전에 미들웨어가 무엇인지 설명드리겠습니다.</p>\n<ul>\n<li>미들웨어는 웹 애플리케이션에서 요청이 최종 라우트 핸들러에 도달하기 전에 처리하는 함수입니다. 인증, 로깅 또는 요청 및 응답 객체 수정과 같은 작업을 처리할 수 있습니다.</li>\n<li>미들웨어를 공항의 보안 점검 및 프로세스와 비슷하게 생각해보세요. 비행기를 탑승하기 전에 보안, 세관, 탑승 등 다양한 점검점을 거치는 것처럼 요청도 최종 라우트 핸들러에 도달하기 전에 여러 미들웨어 함수를 거칩니다. 각 미들웨어는 특정 작업을 수행한 다음 요청을 다음 미들웨어로 전달하여 코드를 모듈화하고 재사용 가능하게 만듭니다.</li>\n</ul>\n<p>우리는 src/middlewares/verifyAuth.js에서 이를 달성합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> jwt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"jsonwebtoken\"</span>);\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> token = req.<span class=\"hljs-title function_\">header</span>(<span class=\"hljs-string\">\"x-token\"</span>);\n  <span class=\"hljs-keyword\">if</span> (!token) {\n    <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">401</span>).<span class=\"hljs-title function_\">json</span>({\n      <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">\"유효한 토큰이 없습니다\"</span>,\n      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>,\n    });\n  }\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> decoded = jwt.<span class=\"hljs-title function_\">verify</span>(token, process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">JWT_SECRET</span>);\n    req.<span class=\"hljs-property\">user</span> = decoded;\n    <span class=\"hljs-title function_\">next</span>();\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">json</span>({\n      <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">\"유효한 토큰이 없습니다\"</span>,\n      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>,\n    });\n  }\n};\n</code></pre>\n<ul>\n<li>이 코드 스니펫은 x-token으로 할당된 요청 헤더에서 토큰을 확인합니다.</li>\n<li>토큰이 유효하면 토큰을 디코드하고 디코딩된 사용자 정보를 req.user에 할당한 다음 next()를 호출하여 제어를 다음 미들웨어 또는 라우트 핸들러로 전달합니다.</li>\n</ul>\n<h2>9. 라우트 설정하기</h2>\n<p>이제 라우트를 설정해봅시다. src/routes 폴더에 auth.js를 생성하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>);\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">Login</span>, <span class=\"hljs-title class_\">Register</span>, <span class=\"hljs-title class_\">GetUser</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../controllers/authController\"</span>);\n<span class=\"hljs-keyword\">const</span> verifyAuth = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../middlewares/verifyAuth\"</span>);\n\n<span class=\"hljs-keyword\">const</span> router = express.<span class=\"hljs-title class_\">Router</span>();\n\nrouter.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/login\"</span>, <span class=\"hljs-title class_\">Login</span>);\n\nrouter.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/register\"</span>, <span class=\"hljs-title class_\">Register</span>);\n\nrouter.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"/user\"</span>, verifyAuth, <span class=\"hljs-title class_\">GetUser</span>);\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = router;\n</code></pre>\n<p>또한 server.js 파일을 업데이트하여 라우트를 연결해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"dotenv\"</span>).<span class=\"hljs-title function_\">config</span>();\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n<span class=\"hljs-keyword\">const</span> cors = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"cors\"</span>);\n\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./config/db\"</span>);\n\n<span class=\"hljs-comment\">//Middlewares</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title function_\">cors</span>());\napp.<span class=\"hljs-title function_\">use</span>(express.<span class=\"hljs-title function_\">json</span>());\n\n<span class=\"hljs-comment\">// Routes</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./routes/auth\"</span>));\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PORT</span> = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">3000</span>;\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-function\">() =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`서버가 포트 <span class=\"hljs-subst\">${PORT}</span>에서 실행 중입니다.`</span>));\n</code></pre>\n<h2>10. 서버 테스트하기</h2>\n<p>이제 서버를 테스트해보는 시간입니다. 제대로 작동하는지 확인해봅시다.</p>\n<ul>\n<li>npm run dev 명령어로 서버를 다시 실행한 후 Postman과 같은 API 플랫폼을 사용하여 /register 및 /login 엔드포인트를 테스트해보세요.</li>\n<li>또는 다른 쉬운 방법을 제안할 수도 있어요. VS Code 확장 프로그램인 REST Client를 사용해보세요.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-20-UnderstandingUserAuthenticationSystemtheMERNStackAStep-by-StepGuidePart1-ServerSide_1.png\" alt=\"이미지\"></p>\n<ul>\n<li>이 확장 프로그램을 활용하기 위해 .rest 확장자를 가진 파일을 생성해야 해요. 그 파일에 HTTP 메서드를 입력하고 간편하게 요청을 보낼 수 있어요. 이 방법을 사용하여 라우트를 테스트하는 것을 선호한다면 이 방법을 사용할 수도 있어요.</li>\n</ul>\n<p>다음은 routes.rest 파일 내용입니다.</p>\n<p>POST <a href=\"http://localhost:3000/login\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000/login</a>\nContent-Type: application/json</p>\n<p>{\n\"email\":\"<a href=\"mailto:test@gmail.com\">test@gmail.com</a>\",\n\"password\":\"123456\"\n}</p>\n<h3></h3>\n<p>POST <a href=\"http://localhost:3000/register\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000/register</a>\nContent-Type: application/json</p>\n<p>{</p>\n<pre><code>\"email\":\"test@gmail.com\",\n\"username\":\"alitalhacoban\",\n\"password\":\"123456\"\n</code></pre>\n<p>}</p>\n<h3></h3>\n<p>GET <a href=\"http://localhost:3000/user\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000/user</a>\nContent-Type: application/json\nx-token:your_access_token</p>\n<p>이 글에서는 간단한 토큰 기반 인증 시스템을 Node.js에서 구축했습니다. 이 설정은 Node.js 애플리케이션에서 안전한 인증을 구현하기 위한 견고한 기반을 제공합니다. Part 2에서는 이 프로젝트의 클라이언트 측을 구축하여 인증용 사용자 인터페이스를 만드는 방법과 서버와의 연결 방법에 대해 살펴볼 것입니다.</p>\n<p>이 글이 여러분에게 도움이 되기를 바랍니다. 계속 주시고 이와 같은 내용을 더 원하시면 박수를 치세요! 즐거운 코딩하세요!</p>\n<p>아래 링크를 확인해 보세요.</p>\n<ul>\n<li><a href=\"mailto:cobanalitalha@gmail.com\">cobanalitalha@gmail.com</a></li>\n<li>github.com/carpodok</li>\n<li>linkedin.com/alitalhacoban</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}