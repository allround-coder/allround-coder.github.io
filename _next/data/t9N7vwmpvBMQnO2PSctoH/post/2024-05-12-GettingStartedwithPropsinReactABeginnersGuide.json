{"pageProps":{"post":{"title":"React에서 Props 시작하기 초보자를 위한 가이드","description":"","date":"2024-05-12 20:31","slug":"2024-05-12-GettingStartedwithPropsinReactABeginnersGuide","content":"\n\nReact에 오신 것을 환영합니다. 초보자라면 'props'에 대해 들어봤을 것입니다. 함께 props가 무엇이며 어떻게 사용하는지 알아보겠습니다.\n\nProps란\n\nProps는 React에서 특별한 키워드로, 속성을 나타냅니다. 주로 데이터를 한 컴포넌트에서 다른 컴포넌트로 전달하는 데 사용됩니다. 컴포넌트는 사용자 인터페이스의 구성 요소입니다. props는 컴포넌트 간에 통신하기 위해 사용하는 메시지로 생각할 수 있습니다.\n\n컴포넌트에 Props 전달하기\n\n\n\nProps를 전달하려면 HTML 요소와 마찬가지로 컴포넌트에 속성을 추가해야 합니다. 아래에 예를 통해 한 가지 컴포넌트를 만들고 그에게 props를 전달하는 예제가 있습니다.\n\n```html\n<Button label=\"Click me!\" />\n```\n\n이 예제에서 우리의 컴포넌트는 `Button`이며, 'label'이라는 prop을 전달하여 레이블을 지정했습니다.\n\nProps에 접근하기\n\n\n\n컴포넌트에 속성을 전달한 후에는 해당 속성에 어떻게 접근하는지 살펴봅시다. 컴포넌트에 속성을 전달한 후에는 해당 컴포넌트 내에서 ‘props’ 객체를 사용하여 속성에 접근할 수 있습니다. 이전 예제에서 전달했던 ‘label’ 속성에 접근해 봅시다. ‘props.label’을 사용할 것입니다.\n\n```javascript\nfunction Button(props) {\n  return `<button>${props.label}</button>`;\n}\n```\n\n이렇게 함으로써 우리의 속성에 접근할 수 있었습니다.\n\n속성 사용하기: 동적 콘텐츠 렌더링\n\n\n\nProps를 사용하면 컴포넌트를 동적으로 만들 수 있어요. 컴포넌트의 동작과 모습은 전달된 데이터를 기반으로 한 Props를 통해 사용자 정의할 수 있어요. 아래 예시를 통해 `Button` 컴포넌트로 서로 다른 레이블을 전달하여 다른 버튼을 만들 수 있어요:\n\n```html\n<Button label=\"Save\" />\n<Button label=\"Edit\" />\n<Button label=\"Delete\" />\n```\n\n기본 Props\n\n부모 컴포넌트로부터 전달되지 않은 경우를 위해 Props에 기본 값이 제공되어야 하는 경우를 생각해보세요. React에는 'defaultProps'라는 속성이 있어 Props의 기본 값을 지정할 수 있어요.\n\n\n\n아래의 예시를 참고해주세요:\n\n```javascript\nfunction Button(props) {\n  return `<button>${props.label}</button>`;\n}\n\nButton.defaultProps = {\n  label: \"제출\",\n};\n```\n\n결론\n\n\n지금까지 우리는 props를 이해하는 데 성공했습니다. 프롭스는 React에서 기본적인 개념으로, 동적이고 재사용 가능한 컴포넌트를 만들 수 있는 기회를 제공합니다. 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달함으로써 사용자 입력에 반응하고 데이터를 동적으로 표시하는 강력한 UI를 만들 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-12-GettingStartedwithPropsinReactABeginnersGuide_0.png"},"coverImage":"/assets/img/2024-05-12-GettingStartedwithPropsinReactABeginnersGuide_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>React에 오신 것을 환영합니다. 초보자라면 'props'에 대해 들어봤을 것입니다. 함께 props가 무엇이며 어떻게 사용하는지 알아보겠습니다.</p>\n<p>Props란</p>\n<p>Props는 React에서 특별한 키워드로, 속성을 나타냅니다. 주로 데이터를 한 컴포넌트에서 다른 컴포넌트로 전달하는 데 사용됩니다. 컴포넌트는 사용자 인터페이스의 구성 요소입니다. props는 컴포넌트 간에 통신하기 위해 사용하는 메시지로 생각할 수 있습니다.</p>\n<p>컴포넌트에 Props 전달하기</p>\n<p>Props를 전달하려면 HTML 요소와 마찬가지로 컴포넌트에 속성을 추가해야 합니다. 아래에 예를 통해 한 가지 컴포넌트를 만들고 그에게 props를 전달하는 예제가 있습니다.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"Click me!\"</span> /></span>\n</code></pre>\n<p>이 예제에서 우리의 컴포넌트는 <code>Button</code>이며, 'label'이라는 prop을 전달하여 레이블을 지정했습니다.</p>\n<p>Props에 접근하기</p>\n<p>컴포넌트에 속성을 전달한 후에는 해당 속성에 어떻게 접근하는지 살펴봅시다. 컴포넌트에 속성을 전달한 후에는 해당 컴포넌트 내에서 ‘props’ 객체를 사용하여 속성에 접근할 수 있습니다. 이전 예제에서 전달했던 ‘label’ 속성에 접근해 봅시다. ‘props.label’을 사용할 것입니다.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Button</span>(<span class=\"hljs-params\">props</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`&#x3C;button><span class=\"hljs-subst\">${props.label}</span>&#x3C;/button>`</span>;\n}\n</code></pre>\n<p>이렇게 함으로써 우리의 속성에 접근할 수 있었습니다.</p>\n<p>속성 사용하기: 동적 콘텐츠 렌더링</p>\n<p>Props를 사용하면 컴포넌트를 동적으로 만들 수 있어요. 컴포넌트의 동작과 모습은 전달된 데이터를 기반으로 한 Props를 통해 사용자 정의할 수 있어요. 아래 예시를 통해 <code>Button</code> 컴포넌트로 서로 다른 레이블을 전달하여 다른 버튼을 만들 수 있어요:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"Save\"</span> /></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"Edit\"</span> /></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"Delete\"</span> /></span>\n</code></pre>\n<p>기본 Props</p>\n<p>부모 컴포넌트로부터 전달되지 않은 경우를 위해 Props에 기본 값이 제공되어야 하는 경우를 생각해보세요. React에는 'defaultProps'라는 속성이 있어 Props의 기본 값을 지정할 수 있어요.</p>\n<p>아래의 예시를 참고해주세요:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Button</span>(<span class=\"hljs-params\">props</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`&#x3C;button><span class=\"hljs-subst\">${props.label}</span>&#x3C;/button>`</span>;\n}\n\n<span class=\"hljs-title class_\">Button</span>.<span class=\"hljs-property\">defaultProps</span> = {\n  <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">\"제출\"</span>,\n};\n</code></pre>\n<p>결론</p>\n<p>지금까지 우리는 props를 이해하는 데 성공했습니다. 프롭스는 React에서 기본적인 개념으로, 동적이고 재사용 가능한 컴포넌트를 만들 수 있는 기회를 제공합니다. 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달함으로써 사용자 입력에 반응하고 데이터를 동적으로 표시하는 강력한 UI를 만들 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}