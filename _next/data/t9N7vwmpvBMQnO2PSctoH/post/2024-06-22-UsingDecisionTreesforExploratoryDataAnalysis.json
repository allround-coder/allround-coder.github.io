{"pageProps":{"post":{"title":"결정 트리Decision Trees를 사용한 탐색적 데이터 분석 방법","description":"","date":"2024-06-22 02:31","slug":"2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis","content":"\n\n\n![Decision Tree](/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_0.png)\n\n# 소개\n\n의사 결정 트리(DT)는 가장 직관적인 머신러닝 알고리즘입니다.\n\n내 의견이죠. 하지만 데이터 과학 분야에서도 흔히 느껴지는 감정이라고 확신합니다.\n\n\n<div class=\"content-ad\"></div>\n\n운영 연구와 데이터 과학 분야에서 매우 활용되는 DT(의사 결정 트리)의 성공 요인은 인간의 의사 결정 과정과 유사한 프로세스를 따라가기 때문입니다. 이 과정은 각 노드가 주어진 변수에 대해 간단한 이진 결정을 갖는 플로 차트에 기반하며, 최종 결정에 이르기까지 계속됩니다.\n\n간단한 예를 들어, 티셔츠 구매. 저는 셔츠를 사려고 할 때 가격, 브랜드, 사이즈, 색상과 같은 몇 가지 변수를 고려할 수 있습니다. 따라서 저는 결정 프로세스를 예산에서 시작합니다:\n\n- 가격이 $30 이상이면 구매하지 않을 것입니다. 그렇지 않은 경우에는 구매할 것입니다.\n- $30 미만으로 무언가를 찾으면 좋아하는 브랜드의 제품이어야 합니다. 그렇다면 결정 과정을 계속합니다.\n- 이제, 제 사이즈에 맞는지 확인해보죠. 맞다면 계속 진행합니다.\n- 마지막으로, $30 미만, 브랜드 X, 사이즈 S인 검은색 티셔츠라면 구매할 것이고, 그렇지 않다면 계속 찾거나 \"구매하지 않을 것\"으로 결정 프로세스를 마칠 수 있습니다.\n\n![의사 결정 트리 샘플](/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_1.png)\n\n<div class=\"content-ad\"></div>\n\n이 프로세스는 매우 논리적이고 간단하여 모든 종류의 데이터에 적용할 수 있습니다. 이 알고리즘의 단점은 데이터 세트의 변화에 매우 민감하여 특히 데이터가 작을 때 민감하다는 것입니다. 따라서 데이터의 작은 변동성을 쉽게 학습하여 기계 학습 모델을 과적합시킬 수 있습니다.\n\n이러한 결정 트리(DT)의 이러한 특성은 예측에 위협이 될 수 있지만 탐색적 데이터 분석 과정 중에 이를 활용하고자 하는 것입니다.\n\n이 게시물에서는 데이터에서 더 나은 통찰력을 추출하기 위해 DT의 힘을 어떻게 활용하는지 배워보겠습니다. 계속 진행합시다.\n\n# EDA란 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n탐색적 데이터 분석 또는 EDA는 데이터 과학 프로젝트의 단계 중 하나로, 데이터 세트를 가져와 변수를 탐색하여 대상 변수에 가장 큰 영향을 미치는 요소를 최대한 파악하려는 과정입니다.\n\n이 단계에서 데이터 과학자는 데이터를 이해하고 분포가 어떤지, 오류나 누락된 데이터가 있는지, 데이터의 첫 인사이트를 추출하고 설명 변수가 대상 변수에 어떻게 영향을 미치는지 시각화하여 학습하고자 합니다.\n\n# 결정 트리 사용하기\n\nDT가 데이터의 가장 작은 변동을 포착할 수 있는 능력 때문에, 변수 간 관계를 이해하는 데 도움이 됩니다. 여기서는 데이터를 탐색 중이므로 데이터 분할이나 알고리즘 세밀 조정에 대해 신중할 필요가 없습니다. 우리는 그저 최상의 통찰을 얻기 위해 DT를 실행하기만 하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n그것을 어떻게 하는지 봅시다.\n\n## 데이터셋\n\n이 연습에 사용될 데이터셋은 Paulo Cortez가 작성한 UCI Repository의 학생 성적 데이터입니다. 이 데이터셋은 크리에이티브 커먼즈 저작자표시 4.0 국제 라이선스(CC BY 4.0) 하에 배포됩니다.\n\n```python\n# 라이브러리 불러오기\nimport pandas as pd\nimport seaborn as sns\nsns.set_style()\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.tree import plot_tree\n\n# 데이터셋 불러오기\nfrom ucimlrepo import fetch_ucirepo\n\n# 데이터셋 가져오기\nstudent_performance = fetch_ucirepo(id=320)\n\n# 데이터 (판다스 데이터프레임 형식)\nX = student_performance.data.features\ny = student_performance.data.targets\n\n# 시각화를 위해 X와 Y 모으기\ndf = pd.concat([X,y], axis=1)\n\ndf.head(3)\n```\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_2.png)\n\n이 데이터에서 어떤 변수가 최종 성적 G3에 더 큰 영향을 미치는지 결정하려고 합니다.\n\n## 회귀 DT로 탐색하기\n\n이제 실패, 결석 및 공부 시간이 G3에 미치는 영향을 확인하기 위해 DT를 생성해보겠습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\n# 탐색할 컬럼\ncols = ['failures', 'absences', 'studytime']\n\n# X & Y 분리\nX = df[cols]\ny = df.G3\n\n# 의사결정트리 학습\ndt = DecisionTreeRegressor().fit(X, y)\n\n# 의사결정트리 그리기\nplt.figure(figsize=(20,10))\nplot_tree(dt, filled=True, feature_names=X.columns, max_depth=3, fontsize=8);\n```\n\n이것이 생성된 의사결정트리입니다.\n\n<img src=\"/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_3.png\" />\n\n이제 우리는 나열한 변수들 간의 관계를 이해하기 위한 좋은 시각화가 있습니다. 이 트리에서 얻을 수 있는 인사이트는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n- 각 상자 안의 첫 번째 줄의 조건에 따라 왼쪽이 \"예\"를, 오른쪽이 \"아니오\"를 의미한다는 것을 알고 계셔야 합니다.\n- 실패 횟수가 적은 학생들(0.5 또는 0이라고 말해야 할 정도)이 더 높은 성적을 받습니다. 왼쪽 상자의 값이 오른쪽보다 높은 것을 관찰할 수 있습니다.\n- 실패한 학생들 중 공부 시간이 2.5 미만인 학생들이 더 높은 성적을 받습니다. 값이 거의 1점 더 높습니다.\n- 실패 횟수와 공부 시간이 1.5 미만, 그리고 결석이 22회 미만인 학생들은 공부 시간이 적고 결석률이 높은 학생들보다 더 높은 최종 성적을 받습니다.\n\n## 여유 시간과 외출\n\n여가 시간의 양과 외출 빈도에 기반하여 더 높은 성적을 받는 학생들을 알아보고 싶다면 여기에 있는 코드입니다.\n```js\n# 탐색할 열\ncols = ['여가시간', '외출']\n\n# X와 Y 분리\nX = df[cols]\ny = df.G3\n\n# 의사결정 트리 피팅\ndt = DecisionTreeRegressor().fit(X,y)\n\n# DT 플롯\nplt.figure(figsize=(20,10))\nplot_tree(dt, filled=True, feature_names=X.columns, max_depth=3, fontsize=10);\n```\n\n<div class=\"content-ad\"></div>\n\n![Decision Trees for Exploratory Data Analysis](/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_4.png)\n\ngoout와 freetime 변수는 1= 매우 낮음부터 5= 매우 높음까지의 척도로 조정되어 있습니다. 자주 외출하지 않는 사람들(1.5)과 여가 시간이 없는 사람들(1.5)은 많이 외출하고 어느 정도 여가 시간이 있는 사람들과 마찬가지로 낮은 성적을 받을 수 있음을 주목해주세요. 가장 높은 성적을 받는 사람들은 외출과 여가 시간이 균형을 이루고 있습니다(외출 1.5, 여가 시간 1.5에서 2.5 사이).\n\n## Classification DT로 탐색하기\n\n동일한 연습을 Classification Tree 알고리즘을 사용해 할 수 있습니다. 논리와 코딩은 동일하지만, 결과 값은 이제 값이 아닌 예측된 클래스를 보여줍니다. Seaborn 패키지(3-Clause BSD License)에서 가져온 뉴욕 시티의 택시 운행 데이터셋을 사용한 간단한 예제를 살펴봅시다.\n\n<div class=\"content-ad\"></div>\n\n만약 우리가 런 총액과 결제 방법 간의 관계를 탐구하고 싶다면, 다음 코드를 확인해보세요.\n\n```js\n# 데이터셋 로드\ndf = sns.load_dataset('taxis').dropna()\n\n# 탐색할 열\ncols = ['total']\n\n# X & Y 분리\nX = df[cols]\ny = df['payment']\n\n# 의사결정 트리 적합\ndt = DecisionTreeClassifier().fit(X,y)\n\n# 트리 시각화\nplt.figure(figsize=(21,10))\nplot_tree(dt, filled=True, feature_names=X.columns, max_depth=3, \n          fontsize=10, class_names=['cash', 'credit_card']);\n```\n\n<img src=\"/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_5.png\" />\n\n결과 트리를 눈으로 확인해본 결과, 총액이 낮은 경우 현금으로 결제하는 가능성이 훨씬 높다는 것을 알 수 있습니다. $9.32 미만의 총액은 일반적으로 현금으로 결제됩니다.\n\n<div class=\"content-ad\"></div>\n\n좋죠, 그렇죠?\n\n# 이제 가기 전에\n\n이 튜토리얼에서는 데이터셋 내 변수들 간의 관계를 탐색하는 빠른 방법인 결정 트리를 사용하는 방법에 대해 배웠습니다.\n\n이 알고리즘은 처음에 쉽게 찾아지지 않는 패턴을 빠르게 포착할 수 있습니다. 우리는 데이터의 그 절삭을 찾기 위해 결정 트리의 힘을 활용하여 거기서 훌륭한 통찰을 얻을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n빠른 코드에 대한 노트하나: plot_tree() 함수에서 max_depth 기능을 사용하여 원하는 수준을 설정할 수 있습니다. 또한 sklearn의 DT 인스턴스에서 해당 하이퍼파라미터를 설정할 수도 있습니다. 선택은 당신의 몫입니다. plot_tree에서 사용하는 장점은 모델을 다시 훈련시킬 필요 없이 다양한 깊이를 빠르게 테스트할 수 있다는 것입니다.\n\n```js\nplot_tree(dt, filled=True, feature_names=X.columns, max_depth=3);\n```\n\n만약 이 내용을 좋아하신다면, 더 많은 내용을 위해 저를 팔로우해주세요.\n\nLinkedIn에서 저를 찾아서 연결해요. 함께해요!\n\n<div class=\"content-ad\"></div>\n\n# 참고 자료\n\n제가 소개하고 싶은 좋은 참고 자료가 있어요. 이 기술은 멋진 브라질 데이터 과학자 Teo Calvo로부터 배웠어요. 그는 Teo Me Why 채널에서 매일 생방송으로 멋진 프로그램을 제공하고 계세요. 포르투갈어를 구사하신다면, 그의 작품에 대해 더 알아보세요.","ogImage":{"url":"/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_0.png"},"coverImage":"/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_0.png\" alt=\"Decision Tree\"></p>\n<h1>소개</h1>\n<p>의사 결정 트리(DT)는 가장 직관적인 머신러닝 알고리즘입니다.</p>\n<p>내 의견이죠. 하지만 데이터 과학 분야에서도 흔히 느껴지는 감정이라고 확신합니다.</p>\n<p>운영 연구와 데이터 과학 분야에서 매우 활용되는 DT(의사 결정 트리)의 성공 요인은 인간의 의사 결정 과정과 유사한 프로세스를 따라가기 때문입니다. 이 과정은 각 노드가 주어진 변수에 대해 간단한 이진 결정을 갖는 플로 차트에 기반하며, 최종 결정에 이르기까지 계속됩니다.</p>\n<p>간단한 예를 들어, 티셔츠 구매. 저는 셔츠를 사려고 할 때 가격, 브랜드, 사이즈, 색상과 같은 몇 가지 변수를 고려할 수 있습니다. 따라서 저는 결정 프로세스를 예산에서 시작합니다:</p>\n<ul>\n<li>가격이 $30 이상이면 구매하지 않을 것입니다. 그렇지 않은 경우에는 구매할 것입니다.</li>\n<li>$30 미만으로 무언가를 찾으면 좋아하는 브랜드의 제품이어야 합니다. 그렇다면 결정 과정을 계속합니다.</li>\n<li>이제, 제 사이즈에 맞는지 확인해보죠. 맞다면 계속 진행합니다.</li>\n<li>마지막으로, $30 미만, 브랜드 X, 사이즈 S인 검은색 티셔츠라면 구매할 것이고, 그렇지 않다면 계속 찾거나 \"구매하지 않을 것\"으로 결정 프로세스를 마칠 수 있습니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_1.png\" alt=\"의사 결정 트리 샘플\"></p>\n<p>이 프로세스는 매우 논리적이고 간단하여 모든 종류의 데이터에 적용할 수 있습니다. 이 알고리즘의 단점은 데이터 세트의 변화에 매우 민감하여 특히 데이터가 작을 때 민감하다는 것입니다. 따라서 데이터의 작은 변동성을 쉽게 학습하여 기계 학습 모델을 과적합시킬 수 있습니다.</p>\n<p>이러한 결정 트리(DT)의 이러한 특성은 예측에 위협이 될 수 있지만 탐색적 데이터 분석 과정 중에 이를 활용하고자 하는 것입니다.</p>\n<p>이 게시물에서는 데이터에서 더 나은 통찰력을 추출하기 위해 DT의 힘을 어떻게 활용하는지 배워보겠습니다. 계속 진행합시다.</p>\n<h1>EDA란 무엇인가요?</h1>\n<p>탐색적 데이터 분석 또는 EDA는 데이터 과학 프로젝트의 단계 중 하나로, 데이터 세트를 가져와 변수를 탐색하여 대상 변수에 가장 큰 영향을 미치는 요소를 최대한 파악하려는 과정입니다.</p>\n<p>이 단계에서 데이터 과학자는 데이터를 이해하고 분포가 어떤지, 오류나 누락된 데이터가 있는지, 데이터의 첫 인사이트를 추출하고 설명 변수가 대상 변수에 어떻게 영향을 미치는지 시각화하여 학습하고자 합니다.</p>\n<h1>결정 트리 사용하기</h1>\n<p>DT가 데이터의 가장 작은 변동을 포착할 수 있는 능력 때문에, 변수 간 관계를 이해하는 데 도움이 됩니다. 여기서는 데이터를 탐색 중이므로 데이터 분할이나 알고리즘 세밀 조정에 대해 신중할 필요가 없습니다. 우리는 그저 최상의 통찰을 얻기 위해 DT를 실행하기만 하면 됩니다.</p>\n<p>그것을 어떻게 하는지 봅시다.</p>\n<h2>데이터셋</h2>\n<p>이 연습에 사용될 데이터셋은 Paulo Cortez가 작성한 UCI Repository의 학생 성적 데이터입니다. 이 데이터셋은 크리에이티브 커먼즈 저작자표시 4.0 국제 라이선스(CC BY 4.0) 하에 배포됩니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># 라이브러리 불러오기</span>\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sns\nsns.set_style()\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n<span class=\"hljs-keyword\">from</span> sklearn.tree <span class=\"hljs-keyword\">import</span> DecisionTreeClassifier, DecisionTreeRegressor\n<span class=\"hljs-keyword\">from</span> sklearn.tree <span class=\"hljs-keyword\">import</span> plot_tree\n\n<span class=\"hljs-comment\"># 데이터셋 불러오기</span>\n<span class=\"hljs-keyword\">from</span> ucimlrepo <span class=\"hljs-keyword\">import</span> fetch_ucirepo\n\n<span class=\"hljs-comment\"># 데이터셋 가져오기</span>\nstudent_performance = fetch_ucirepo(<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">320</span>)\n\n<span class=\"hljs-comment\"># 데이터 (판다스 데이터프레임 형식)</span>\nX = student_performance.data.features\ny = student_performance.data.targets\n\n<span class=\"hljs-comment\"># 시각화를 위해 X와 Y 모으기</span>\ndf = pd.concat([X,y], axis=<span class=\"hljs-number\">1</span>)\n\ndf.head(<span class=\"hljs-number\">3</span>)\n</code></pre>\n<p><img src=\"/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_2.png\" alt=\"image\"></p>\n<p>이 데이터에서 어떤 변수가 최종 성적 G3에 더 큰 영향을 미치는지 결정하려고 합니다.</p>\n<h2>회귀 DT로 탐색하기</h2>\n<p>이제 실패, 결석 및 공부 시간이 G3에 미치는 영향을 확인하기 위해 DT를 생성해보겠습니다.</p>\n<pre><code class=\"hljs language-js\"># 탐색할 컬럼\ncols = [<span class=\"hljs-string\">'failures'</span>, <span class=\"hljs-string\">'absences'</span>, <span class=\"hljs-string\">'studytime'</span>]\n\n# X &#x26; Y 분리\nX = df[cols]\ny = df.<span class=\"hljs-property\">G3</span>\n\n# 의사결정트리 학습\ndt = <span class=\"hljs-title class_\">DecisionTreeRegressor</span>().<span class=\"hljs-title function_\">fit</span>(X, y)\n\n# 의사결정트리 그리기\nplt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">10</span>))\n<span class=\"hljs-title function_\">plot_tree</span>(dt, filled=<span class=\"hljs-title class_\">True</span>, feature_names=X.<span class=\"hljs-property\">columns</span>, max_depth=<span class=\"hljs-number\">3</span>, fontsize=<span class=\"hljs-number\">8</span>);\n</code></pre>\n<p>이것이 생성된 의사결정트리입니다.</p>\n<p>이제 우리는 나열한 변수들 간의 관계를 이해하기 위한 좋은 시각화가 있습니다. 이 트리에서 얻을 수 있는 인사이트는 다음과 같습니다:</p>\n<ul>\n<li>각 상자 안의 첫 번째 줄의 조건에 따라 왼쪽이 \"예\"를, 오른쪽이 \"아니오\"를 의미한다는 것을 알고 계셔야 합니다.</li>\n<li>실패 횟수가 적은 학생들(0.5 또는 0이라고 말해야 할 정도)이 더 높은 성적을 받습니다. 왼쪽 상자의 값이 오른쪽보다 높은 것을 관찰할 수 있습니다.</li>\n<li>실패한 학생들 중 공부 시간이 2.5 미만인 학생들이 더 높은 성적을 받습니다. 값이 거의 1점 더 높습니다.</li>\n<li>실패 횟수와 공부 시간이 1.5 미만, 그리고 결석이 22회 미만인 학생들은 공부 시간이 적고 결석률이 높은 학생들보다 더 높은 최종 성적을 받습니다.</li>\n</ul>\n<h2>여유 시간과 외출</h2>\n<p>여가 시간의 양과 외출 빈도에 기반하여 더 높은 성적을 받는 학생들을 알아보고 싶다면 여기에 있는 코드입니다.</p>\n<pre><code class=\"hljs language-js\"># 탐색할 열\ncols = [<span class=\"hljs-string\">'여가시간'</span>, <span class=\"hljs-string\">'외출'</span>]\n\n# X와 Y 분리\nX = df[cols]\ny = df.<span class=\"hljs-property\">G3</span>\n\n# 의사결정 트리 피팅\ndt = <span class=\"hljs-title class_\">DecisionTreeRegressor</span>().<span class=\"hljs-title function_\">fit</span>(X,y)\n\n# <span class=\"hljs-variable constant_\">DT</span> 플롯\nplt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">10</span>))\n<span class=\"hljs-title function_\">plot_tree</span>(dt, filled=<span class=\"hljs-title class_\">True</span>, feature_names=X.<span class=\"hljs-property\">columns</span>, max_depth=<span class=\"hljs-number\">3</span>, fontsize=<span class=\"hljs-number\">10</span>);\n</code></pre>\n<p><img src=\"/assets/img/2024-06-22-UsingDecisionTreesforExploratoryDataAnalysis_4.png\" alt=\"Decision Trees for Exploratory Data Analysis\"></p>\n<p>goout와 freetime 변수는 1= 매우 낮음부터 5= 매우 높음까지의 척도로 조정되어 있습니다. 자주 외출하지 않는 사람들(1.5)과 여가 시간이 없는 사람들(1.5)은 많이 외출하고 어느 정도 여가 시간이 있는 사람들과 마찬가지로 낮은 성적을 받을 수 있음을 주목해주세요. 가장 높은 성적을 받는 사람들은 외출과 여가 시간이 균형을 이루고 있습니다(외출 1.5, 여가 시간 1.5에서 2.5 사이).</p>\n<h2>Classification DT로 탐색하기</h2>\n<p>동일한 연습을 Classification Tree 알고리즘을 사용해 할 수 있습니다. 논리와 코딩은 동일하지만, 결과 값은 이제 값이 아닌 예측된 클래스를 보여줍니다. Seaborn 패키지(3-Clause BSD License)에서 가져온 뉴욕 시티의 택시 운행 데이터셋을 사용한 간단한 예제를 살펴봅시다.</p>\n<p>만약 우리가 런 총액과 결제 방법 간의 관계를 탐구하고 싶다면, 다음 코드를 확인해보세요.</p>\n<pre><code class=\"hljs language-js\"># 데이터셋 로드\ndf = sns.<span class=\"hljs-title function_\">load_dataset</span>(<span class=\"hljs-string\">'taxis'</span>).<span class=\"hljs-title function_\">dropna</span>()\n\n# 탐색할 열\ncols = [<span class=\"hljs-string\">'total'</span>]\n\n# X &#x26; Y 분리\nX = df[cols]\ny = df[<span class=\"hljs-string\">'payment'</span>]\n\n# 의사결정 트리 적합\ndt = <span class=\"hljs-title class_\">DecisionTreeClassifier</span>().<span class=\"hljs-title function_\">fit</span>(X,y)\n\n# 트리 시각화\nplt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">21</span>,<span class=\"hljs-number\">10</span>))\n<span class=\"hljs-title function_\">plot_tree</span>(dt, filled=<span class=\"hljs-title class_\">True</span>, feature_names=X.<span class=\"hljs-property\">columns</span>, max_depth=<span class=\"hljs-number\">3</span>, \n          fontsize=<span class=\"hljs-number\">10</span>, class_names=[<span class=\"hljs-string\">'cash'</span>, <span class=\"hljs-string\">'credit_card'</span>]);\n</code></pre>\n<p>결과 트리를 눈으로 확인해본 결과, 총액이 낮은 경우 현금으로 결제하는 가능성이 훨씬 높다는 것을 알 수 있습니다. $9.32 미만의 총액은 일반적으로 현금으로 결제됩니다.</p>\n<p>좋죠, 그렇죠?</p>\n<h1>이제 가기 전에</h1>\n<p>이 튜토리얼에서는 데이터셋 내 변수들 간의 관계를 탐색하는 빠른 방법인 결정 트리를 사용하는 방법에 대해 배웠습니다.</p>\n<p>이 알고리즘은 처음에 쉽게 찾아지지 않는 패턴을 빠르게 포착할 수 있습니다. 우리는 데이터의 그 절삭을 찾기 위해 결정 트리의 힘을 활용하여 거기서 훌륭한 통찰을 얻을 수 있습니다.</p>\n<p>빠른 코드에 대한 노트하나: plot_tree() 함수에서 max_depth 기능을 사용하여 원하는 수준을 설정할 수 있습니다. 또한 sklearn의 DT 인스턴스에서 해당 하이퍼파라미터를 설정할 수도 있습니다. 선택은 당신의 몫입니다. plot_tree에서 사용하는 장점은 모델을 다시 훈련시킬 필요 없이 다양한 깊이를 빠르게 테스트할 수 있다는 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">plot_tree</span>(dt, filled=<span class=\"hljs-title class_\">True</span>, feature_names=X.<span class=\"hljs-property\">columns</span>, max_depth=<span class=\"hljs-number\">3</span>);\n</code></pre>\n<p>만약 이 내용을 좋아하신다면, 더 많은 내용을 위해 저를 팔로우해주세요.</p>\n<p>LinkedIn에서 저를 찾아서 연결해요. 함께해요!</p>\n<h1>참고 자료</h1>\n<p>제가 소개하고 싶은 좋은 참고 자료가 있어요. 이 기술은 멋진 브라질 데이터 과학자 Teo Calvo로부터 배웠어요. 그는 Teo Me Why 채널에서 매일 생방송으로 멋진 프로그램을 제공하고 계세요. 포르투갈어를 구사하신다면, 그의 작품에 대해 더 알아보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}