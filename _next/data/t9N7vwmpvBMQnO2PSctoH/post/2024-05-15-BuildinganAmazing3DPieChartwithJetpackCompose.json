{"pageProps":{"post":{"title":"젯팩 컴포즈로 멋진 3D 파이 차트 만들기","description":"","date":"2024-05-15 15:34","slug":"2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose","content":"\n\n환영합니다 👋\n\n사용자를 감동시킬 멋진 파이 차트를 구현하는 데 5분 이상 투자하지 않고 싶나요?\n\n그렇다면, 당신이 올바른 곳에 왔습니다. 이 기사는 정확히 그것에 대한 것입니다.\n\n계속 보고, 함께 알아봐요! 🚀\n\n\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*TMrRg9yn-gQWNzsPyCCIMg.gif)\n\n# Convex Pie Chart\n\n가장 흥미로운 부분에서 여정을 시작해 보죠: 조각에 적용할 볼록한 효과를 가진 Pie Chart를 만들어 봅시다.\n\n## PieChart 데이터\n\n\n\n\n함수를 조립하기 전에, 원 차트 데이터를 나타내는 데이터 클래스를 만들어야 합니다.\n\n```kotlin\ndata class PieChartData(\n    val label: String,\n    val value: Int,\n    val color: Color\n)\n```\n\n## ConvexStyle\n\n또 다른 지원 데이터 클래스인 ConvexStyle을 만들어야 Convex 효과의 시각적 모습을 표현할 수 있습니다.\n\n\n\n```js\ndata class ConvexStyle(\n    val blur: Dp = 5.dp,\n    val offset: Dp = 4.dp,\n    val glareColor: Color = Color.White.copy(0.48f),\n    val shadowColor: Color = Color.Black.copy(0.48f)\n)\n```\n\n## The composable\n\n이제, 원형 차트를 그릴 composable을 정의할 수 있습니다.\n\n```js\n@Composable\nfun ConvexPieChart(\n    modifier: Modifier,\n    data: List<PieChartData>,\n    startAngle: Float = -90f,\n    rotationsCount: Int = 4,\n    pieSliceStyle: ConvexStyle = ConvexStyle(),\n    animationSpec: AnimationSpec<Float> = \n        tween(1_000, easing = LinearOutSlowInEasing)\n) {\n    /* 구현 */\n}\n```\n\n\n\n## ⚒️ 매개변수 분석\n\n⚡ modifier ➜ 레이아웃에 적용된 수정자입니다.\n\n⚡ data ➜ 파이 차트에 표시할 데이터입니다.\n\n⚡ startAngle ➜ 첫 번째 슬라이스의 초기 각도(도)입니다 (그림 1 👇).\n\n\n\n⚡ rotationsCount ➜ 애니메이션 중 완전한 회전 횟수입니다.\n\n⚡ pieSliceStyle ➜ 파이 조각의 볼록 스타일을 정의합니다.\n\n⚡ animationSpec ➜ 스케일 및 회전에 대한 애니메이션 동작을 지정합니다.\n\n![이미지](/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_0.png)\n\n\n\n## 오목한 아치\n\n파이 차트 자체를 그리기 전에, 우리 아름다운 조각들을 렌더링할 drawConvexArc라는 지원 함수를 만들어보겠습니다.\n\n```js\nfun DrawScope.drawConvexArc(\n    color: Color,\n    startAngle: Float,\n    sweepAngle: Float,\n    useCenter: Boolean,\n    style: ConvexStyle,\n) = canvas에 그리기 { canvas ->\n    val rect = this.size.toRect() // 캔버스의 경계\n    \n    // 그리기용 페인트 개체 정의\n    val paint = Paint()\n    paint.color = color\n    \n    // 캔버스에 기본 아치 그리기\n    canvas.drawArc(rect, startAngle, sweepAngle, useCenter, paint)\n    \n    // 그림자와 번빛 아치를 그리는 함수 정의\n    fun drawShadowArc(offsetX: Float, offsetY: Float, shadowColor: Color) {\n        val shadowPaint = Paint() // 그림자를 그리기 위한 페인트 개체\n\n        shadowPaint.color = shadowColor // 그림자 색상 설정\n\n        // 현재 캔버스 레이어 저장\n        canvas.saveLayer(rect, shadowPaint)\n        \n        // 그림자 아치 그리기\n        canvas.drawArc(rect, startAngle, sweepAngle, useCenter, shadowPaint)\n\n        // 그림자에 블렌딩 모드 및 블러 효과 적용\n        shadowPaint.asFrameworkPaint().apply {\n            xfermode = PorterDuffXfermode(PorterDuff.Mode.DST_OUT)\n            maskFilter = BlurMaskFilter(style.blur.toPx(), BlurMaskFilter.Blur.NORMAL)\n        }\n\n        shadowPaint.color = Color.Black // 클리핑을 위한 색상 설정\n\n        // 캔버스 이동 및 클리핑 아치 그리기\n        canvas.translate(offsetX, offsetY)\n        canvas.drawArc(rect, startAngle, sweepAngle, useCenter, shadowPaint)\n\n        // 캔버스를 원래 상태로 복원\n        canvas.restore()\n    }\n    \n    // 픽셀 단위로 오프셋 계산\n    val offsetPx = style.offset.toPx()\n    \n    // 음수 오프셋으로 그림자 아치 그리기\n    drawShadowArc(-offsetPx, -offsetPx, style.shadowColor)\n    \n    // 양수 오프셋으로 번빛 아치 그리기\n    drawShadowArc(offsetPx, offsetPx, style.glareColor)\n}\n```\n\n더 잘 이해하기 위해 아래 사진을 확인하세요 👇\n\n\n\n\n![BuildinganAmazing3DPieChartwithJetpackCompose_1](/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_1.png)\n\n![BuildinganAmazing3DPieChartwithJetpackCompose_2](/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_2.png)\n\n## Convex pie chart\n\nNow that we have the drawConvexArc function, we can draw the pie chart.\n\n\n\n\n```kotlin\n@Composable\nfun ConvexPieChart(\n    /* 매개변수 */\n) {\n    // 모든 데이터 값의 합\n    val totalValuesSum = remember(data) { data.sumOf(PieChartData::value) } \n\n    // 파이 차트를 확대 및 회전하기 위한 애니메이션 가능한 값\n    val pieChartScale = remember { Animatable(0f) }\n    val pieChartRotation = remember { Animatable(0f) }\n\n    // 파이 차트를 확대하고 회전시키는 애니메이션 시작\n    LaunchedEffect(Unit) {\n        launch {\n            pieChartScale.animateTo(1f, animationSpec)\n        }\n        launch {\n            pieChartRotation.animateTo(360f * rotationsCount, animationSpec)\n        }\n    }\n\n    // 캔버스를 사용하여 파이 차트 그리기\n    Canvas(\n        modifier\n            .aspectRatio(1f) // 캔버스가 정사각형이 되도록 함 (1:1)\n            // 애니메이션 전환 적용\n            .scale(pieChartScale.value)\n            .rotate(pieChartRotation.value)\n    ) {\n        // 시작 각도로 마지막 값 초기화\n        var lastValue = startAngle\n        // 각 데이터 포인트를 반복하고 해당 파이 조각을 그리기\n        data.forEach { chartData ->\n            // 현재 데이터 포인트의 스윕 각도 계산\n            val pieSweepAngle = 360f * (chartData.value.toFloat() / totalValuesSum.toFloat())\n            // 파이 슬라이스를 나타내는 볼록한 아크 그리기\n            drawConvexArc(\n                color = chartData.color,\n                startAngle = lastValue,\n                sweepAngle = pieSweepAngle,\n                style = pieSliceStyle,\n                useCenter = true\n            )\n            // 다음 슬라이스를 위해 마지막 값 업데이트\n            lastValue += pieSweepAngle\n        }\n    }\n}\n```\n\n좋아요, 우리가 이미 이룬 것들이에요 😍\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*-yHzlxmatQyVTdfTV8h5yQ.gif\" />\n\n# 파이 차트 패널\n\n\n\n\n자, 이제 그림자를 활용하여 빛나는 피 크림 차트를 위한 멋진 패널을 만들어 봅시다.\n\n여기서 그림자의 놀이 🤹‍♂️을 하며, innerShadow와 dropShadow 수정자(modifier)를 사용할 것입니다. 자세한 설명은 아래 제가 제공한 관련 기사를 참조하거나 👇 아래 링크에서 InnerShadow Gist, DropShadow Gist의 코드를 확인할 수 있습니다.\n\n```js\n@Composable\nfun PieChartPanel(\n    modifier: Modifier,\n    platesColor: Color = Color(0xFFD5F3FF),\n    platesGap: Dp = 32.dp,\n    style: ConvexStyle = ConvexStyle(\n        blur = 12.dp,\n        offset = 8.dp,\n        glareColor = Color.White.copy(alpha = 0.32f),\n        shadowColor = Color.Black.copy(alpha = 0.32f)\n    ),\n    content: @Composable BoxScope.() -> Unit\n) {\n    Box(\n        // 전체 패널을 나타내는 외부 상자\n        modifier = modifier\n            .aspectRatio(1f) // 가로세로 비율 1:1로 설정\n            // 내부 그림자 적용으로 깊이 효과 생성\n            .innerShadow(CircleShape, style.glareColor, style.blur, -style.offset, -style.offset)\n            .innerShadow(CircleShape, style.shadowColor, style.blur, style.offset, style.offset)\n            // 드롭 그림자 적용으로 고도 효과 생성\n            .dropShadow(CircleShape, style.glareColor, style.blur, -style.offset, -style.offset)\n            .dropShadow(CircleShape, style.shadowColor, style.blur, style.offset, style.offset)\n            // 배경 그리기\n            .background(platesColor, CircleShape),\n        contentAlignment = Alignment.Center\n    ) {\n        Box(\n            // 실제 콘텐츠를 포함하는 내부 상자\n            modifier = Modifier\n                .matchParentSize() // 전체 부모 크기 차지\n                .padding(platesGap) // 플레이트 간의 갭 추가\n                // 드롭 그림자 적용으로 고도 효과 생성\n                .dropShadow(CircleShape, style.glareColor, style.blur, -style.offset, -style.offset)\n                .dropShadow(CircleShape, style.shadowColor, style.blur, style.offset, style.offset)\n                // 배경 그리기\n                .background(platesColor, CircleShape),\n            contentAlignment = Alignment.Center,\n            content = content // 콘텐츠 삽입\n        )\n    }\n}\n```\n\n자, 준비가 다 되었습니다! 패널에 표시할 콘텐츠가 마지막 조각입니다. 패널에 표시할 총 값 텍스트를 조금의 애니메이션과 함께 만들어 봅시다.\n\n\n\n```kotlin\n@Composable\nfun TotalView(\n    total: Int,\n    modifier: Modifier = Modifier,\n    animationSpec: AnimationSpec<Int> = tween(1000, easing = FastOutSlowInEasing)\n) {\n    val totalToDisplay = remember {\n        Animatable(initialValue = 0, typeConverter = Int.VectorConverter)\n    }\n\n    // total 값이 변경될 때 전체 값을 애니메이트하는 effect 시작\n    LaunchedEffect(total) {\n        totalToDisplay.animateTo(total, animationSpec)\n    }\n\n    Column(\n        modifier = modifier,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(\n            text = \"총액\",\n            fontSize = 14.sp,\n            color = Color(0xFF464646)\n        )\n        Text(\n            text = \"${totalToDisplay.value}$\",\n            fontSize = 18.sp,\n            fontWeight = FontWeight.Medium,\n            color = Color(0xFF010203)\n        )\n    }\n}\n```\n\n축하합니다🥳! 성공적으로 구현했습니다👏. 전체 코드 구현은 GitHub Gist에서 확인하실 수 있어요🧑‍💻. 이제 모든 것을 하나로 합쳐서 최종 결과를 살펴봅시다!\n\n## 광고\n\n외국어를 배우고 새로운 어휘에 어려움을 겪고 계신가요? 그렇다면 어플 단어 학습 어플 을 꼭 추천드립니다! 여러분들의 학습 여정을 쉽고 편리하게 만들어 줄 거예요!\n\n\n\n\n![Image](/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_3.png)\n\n# Final\n\n이제 시연을 위한 데이터 목록을 만들어 봅시다:\n\n```js\nval pieChartData = remember {\n    listOf(\n        PieChartData(\"항목-1\", 30, Color(0xFFE45C5C)),\n        PieChartData(\"항목-2\", 45, Color(0xFF8FE25C)),\n        PieChartData(\"항목-3\", 25, Color(0xFF4471E4)),\n        PieChartData(\"항목-4\", 20, Color(0xFFEECE55)),\n        PieChartData(\"항목-5\", 40, Color(0xFFBD68CB)),\n    )\n}\n```\n\n\n\n그리고 마지막으로 마무리해봅시다 🔩\n\n```js\nBox(contentAlignment = Alignment.Center) {\n    ConvexPieChart(\n        data = pieChartData,\n        modifier = Modifier.size(300.dp)\n    )\n    PieChartPanel(\n        Modifier.size(180.dp)\n    ) {\n        TotalView(total = 23548)\n    }\n}\n```\n\n## 결과\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*n7ZqFsdqSEl1egbPbMKD_g.gif\" />\n\n\n\n당신께 도움이 되었길 바라며 감사합니다. 코딩을 즐기세요! ❤️\n\n아래 내용도 마음에 드실지도요 👇\n\n만일 좋아하셨다면 👏 클립해주세요! 그리고 더 많은 흥미로운 글을 보고 싶다면\nKappdev\n를 팔로우해주세요 😊\n\n![3D 파이 차트 만들기](/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_4.png)","ogImage":{"url":"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_0.png"},"coverImage":"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>환영합니다 👋</p>\n<p>사용자를 감동시킬 멋진 파이 차트를 구현하는 데 5분 이상 투자하지 않고 싶나요?</p>\n<p>그렇다면, 당신이 올바른 곳에 왔습니다. 이 기사는 정확히 그것에 대한 것입니다.</p>\n<p>계속 보고, 함께 알아봐요! 🚀</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*TMrRg9yn-gQWNzsPyCCIMg.gif\" alt=\"image\"></p>\n<h1>Convex Pie Chart</h1>\n<p>가장 흥미로운 부분에서 여정을 시작해 보죠: 조각에 적용할 볼록한 효과를 가진 Pie Chart를 만들어 봅시다.</p>\n<h2>PieChart 데이터</h2>\n<p>함수를 조립하기 전에, 원 차트 데이터를 나타내는 데이터 클래스를 만들어야 합니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PieChartData</span>(\n    <span class=\"hljs-keyword\">val</span> label: String,\n    <span class=\"hljs-keyword\">val</span> value: <span class=\"hljs-built_in\">Int</span>,\n    <span class=\"hljs-keyword\">val</span> color: Color\n)\n</code></pre>\n<h2>ConvexStyle</h2>\n<p>또 다른 지원 데이터 클래스인 ConvexStyle을 만들어야 Convex 효과의 시각적 모습을 표현할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">data <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConvexStyle</span>(\n    val <span class=\"hljs-attr\">blur</span>: <span class=\"hljs-title class_\">Dp</span> = <span class=\"hljs-number\">5.</span>dp,\n    val <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-title class_\">Dp</span> = <span class=\"hljs-number\">4.</span>dp,\n    val <span class=\"hljs-attr\">glareColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">White</span>.<span class=\"hljs-title function_\">copy</span>(<span class=\"hljs-number\">0.</span>48f),\n    val <span class=\"hljs-attr\">shadowColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Black</span>.<span class=\"hljs-title function_\">copy</span>(<span class=\"hljs-number\">0.</span>48f)\n)\n</code></pre>\n<h2>The composable</h2>\n<p>이제, 원형 차트를 그릴 composable을 정의할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title class_\">ConvexPieChart</span>(\n    <span class=\"hljs-attr\">modifier</span>: <span class=\"hljs-title class_\">Modifier</span>,\n    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">PieChartData</span>>,\n    <span class=\"hljs-attr\">startAngle</span>: <span class=\"hljs-title class_\">Float</span> = -90f,\n    <span class=\"hljs-attr\">rotationsCount</span>: <span class=\"hljs-title class_\">Int</span> = <span class=\"hljs-number\">4</span>,\n    <span class=\"hljs-attr\">pieSliceStyle</span>: <span class=\"hljs-title class_\">ConvexStyle</span> = <span class=\"hljs-title class_\">ConvexStyle</span>(),\n    <span class=\"hljs-attr\">animationSpec</span>: <span class=\"hljs-title class_\">AnimationSpec</span>&#x3C;<span class=\"hljs-title class_\">Float</span>> = \n        <span class=\"hljs-title function_\">tween</span>(<span class=\"hljs-number\">1_000</span>, easing = <span class=\"hljs-title class_\">LinearOutSlowInEasing</span>)\n) {\n    <span class=\"hljs-comment\">/* 구현 */</span>\n}\n</code></pre>\n<h2>⚒️ 매개변수 분석</h2>\n<p>⚡ modifier ➜ 레이아웃에 적용된 수정자입니다.</p>\n<p>⚡ data ➜ 파이 차트에 표시할 데이터입니다.</p>\n<p>⚡ startAngle ➜ 첫 번째 슬라이스의 초기 각도(도)입니다 (그림 1 👇).</p>\n<p>⚡ rotationsCount ➜ 애니메이션 중 완전한 회전 횟수입니다.</p>\n<p>⚡ pieSliceStyle ➜ 파이 조각의 볼록 스타일을 정의합니다.</p>\n<p>⚡ animationSpec ➜ 스케일 및 회전에 대한 애니메이션 동작을 지정합니다.</p>\n<p><img src=\"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_0.png\" alt=\"이미지\"></p>\n<h2>오목한 아치</h2>\n<p>파이 차트 자체를 그리기 전에, 우리 아름다운 조각들을 렌더링할 drawConvexArc라는 지원 함수를 만들어보겠습니다.</p>\n<pre><code class=\"hljs language-js\">fun <span class=\"hljs-title class_\">DrawScope</span>.<span class=\"hljs-title function_\">drawConvexArc</span>(\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Color</span>,\n    <span class=\"hljs-attr\">startAngle</span>: <span class=\"hljs-title class_\">Float</span>,\n    <span class=\"hljs-attr\">sweepAngle</span>: <span class=\"hljs-title class_\">Float</span>,\n    <span class=\"hljs-attr\">useCenter</span>: <span class=\"hljs-title class_\">Boolean</span>,\n    <span class=\"hljs-attr\">style</span>: <span class=\"hljs-title class_\">ConvexStyle</span>,\n) = canvas에 그리기 { canvas ->\n    val rect = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>.<span class=\"hljs-title function_\">toRect</span>() <span class=\"hljs-comment\">// 캔버스의 경계</span>\n    \n    <span class=\"hljs-comment\">// 그리기용 페인트 개체 정의</span>\n    val paint = <span class=\"hljs-title class_\">Paint</span>()\n    paint.<span class=\"hljs-property\">color</span> = color\n    \n    <span class=\"hljs-comment\">// 캔버스에 기본 아치 그리기</span>\n    canvas.<span class=\"hljs-title function_\">drawArc</span>(rect, startAngle, sweepAngle, useCenter, paint)\n    \n    <span class=\"hljs-comment\">// 그림자와 번빛 아치를 그리는 함수 정의</span>\n    fun <span class=\"hljs-title function_\">drawShadowArc</span>(<span class=\"hljs-params\">offsetX: Float, offsetY: Float, shadowColor: Color</span>) {\n        val shadowPaint = <span class=\"hljs-title class_\">Paint</span>() <span class=\"hljs-comment\">// 그림자를 그리기 위한 페인트 개체</span>\n\n        shadowPaint.<span class=\"hljs-property\">color</span> = shadowColor <span class=\"hljs-comment\">// 그림자 색상 설정</span>\n\n        <span class=\"hljs-comment\">// 현재 캔버스 레이어 저장</span>\n        canvas.<span class=\"hljs-title function_\">saveLayer</span>(rect, shadowPaint)\n        \n        <span class=\"hljs-comment\">// 그림자 아치 그리기</span>\n        canvas.<span class=\"hljs-title function_\">drawArc</span>(rect, startAngle, sweepAngle, useCenter, shadowPaint)\n\n        <span class=\"hljs-comment\">// 그림자에 블렌딩 모드 및 블러 효과 적용</span>\n        shadowPaint.<span class=\"hljs-title function_\">asFrameworkPaint</span>().<span class=\"hljs-property\">apply</span> {\n            xfermode = <span class=\"hljs-title class_\">PorterDuffXfermode</span>(<span class=\"hljs-title class_\">PorterDuff</span>.<span class=\"hljs-property\">Mode</span>.<span class=\"hljs-property\">DST_OUT</span>)\n            maskFilter = <span class=\"hljs-title class_\">BlurMaskFilter</span>(style.<span class=\"hljs-property\">blur</span>.<span class=\"hljs-title function_\">toPx</span>(), <span class=\"hljs-title class_\">BlurMaskFilter</span>.<span class=\"hljs-property\">Blur</span>.<span class=\"hljs-property\">NORMAL</span>)\n        }\n\n        shadowPaint.<span class=\"hljs-property\">color</span> = <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Black</span> <span class=\"hljs-comment\">// 클리핑을 위한 색상 설정</span>\n\n        <span class=\"hljs-comment\">// 캔버스 이동 및 클리핑 아치 그리기</span>\n        canvas.<span class=\"hljs-title function_\">translate</span>(offsetX, offsetY)\n        canvas.<span class=\"hljs-title function_\">drawArc</span>(rect, startAngle, sweepAngle, useCenter, shadowPaint)\n\n        <span class=\"hljs-comment\">// 캔버스를 원래 상태로 복원</span>\n        canvas.<span class=\"hljs-title function_\">restore</span>()\n    }\n    \n    <span class=\"hljs-comment\">// 픽셀 단위로 오프셋 계산</span>\n    val offsetPx = style.<span class=\"hljs-property\">offset</span>.<span class=\"hljs-title function_\">toPx</span>()\n    \n    <span class=\"hljs-comment\">// 음수 오프셋으로 그림자 아치 그리기</span>\n    <span class=\"hljs-title function_\">drawShadowArc</span>(-offsetPx, -offsetPx, style.<span class=\"hljs-property\">shadowColor</span>)\n    \n    <span class=\"hljs-comment\">// 양수 오프셋으로 번빛 아치 그리기</span>\n    <span class=\"hljs-title function_\">drawShadowArc</span>(offsetPx, offsetPx, style.<span class=\"hljs-property\">glareColor</span>)\n}\n</code></pre>\n<p>더 잘 이해하기 위해 아래 사진을 확인하세요 👇</p>\n<p><img src=\"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_1.png\" alt=\"BuildinganAmazing3DPieChartwithJetpackCompose_1\"></p>\n<p><img src=\"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_2.png\" alt=\"BuildinganAmazing3DPieChartwithJetpackCompose_2\"></p>\n<h2>Convex pie chart</h2>\n<p>Now that we have the drawConvexArc function, we can draw the pie chart.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">ConvexPieChart</span><span class=\"hljs-params\">(\n    <span class=\"hljs-comment\">/* 매개변수 */</span>\n)</span></span> {\n    <span class=\"hljs-comment\">// 모든 데이터 값의 합</span>\n    <span class=\"hljs-keyword\">val</span> totalValuesSum = remember(<span class=\"hljs-keyword\">data</span>) { <span class=\"hljs-keyword\">data</span>.sumOf(PieChartData::value) } \n\n    <span class=\"hljs-comment\">// 파이 차트를 확대 및 회전하기 위한 애니메이션 가능한 값</span>\n    <span class=\"hljs-keyword\">val</span> pieChartScale = remember { Animatable(<span class=\"hljs-number\">0f</span>) }\n    <span class=\"hljs-keyword\">val</span> pieChartRotation = remember { Animatable(<span class=\"hljs-number\">0f</span>) }\n\n    <span class=\"hljs-comment\">// 파이 차트를 확대하고 회전시키는 애니메이션 시작</span>\n    LaunchedEffect(<span class=\"hljs-built_in\">Unit</span>) {\n        launch {\n            pieChartScale.animateTo(<span class=\"hljs-number\">1f</span>, animationSpec)\n        }\n        launch {\n            pieChartRotation.animateTo(<span class=\"hljs-number\">360f</span> * rotationsCount, animationSpec)\n        }\n    }\n\n    <span class=\"hljs-comment\">// 캔버스를 사용하여 파이 차트 그리기</span>\n    Canvas(\n        modifier\n            .aspectRatio(<span class=\"hljs-number\">1f</span>) <span class=\"hljs-comment\">// 캔버스가 정사각형이 되도록 함 (1:1)</span>\n            <span class=\"hljs-comment\">// 애니메이션 전환 적용</span>\n            .scale(pieChartScale.value)\n            .rotate(pieChartRotation.value)\n    ) {\n        <span class=\"hljs-comment\">// 시작 각도로 마지막 값 초기화</span>\n        <span class=\"hljs-keyword\">var</span> lastValue = startAngle\n        <span class=\"hljs-comment\">// 각 데이터 포인트를 반복하고 해당 파이 조각을 그리기</span>\n        <span class=\"hljs-keyword\">data</span>.forEach { chartData ->\n            <span class=\"hljs-comment\">// 현재 데이터 포인트의 스윕 각도 계산</span>\n            <span class=\"hljs-keyword\">val</span> pieSweepAngle = <span class=\"hljs-number\">360f</span> * (chartData.value.toFloat() / totalValuesSum.toFloat())\n            <span class=\"hljs-comment\">// 파이 슬라이스를 나타내는 볼록한 아크 그리기</span>\n            drawConvexArc(\n                color = chartData.color,\n                startAngle = lastValue,\n                sweepAngle = pieSweepAngle,\n                style = pieSliceStyle,\n                useCenter = <span class=\"hljs-literal\">true</span>\n            )\n            <span class=\"hljs-comment\">// 다음 슬라이스를 위해 마지막 값 업데이트</span>\n            lastValue += pieSweepAngle\n        }\n    }\n}\n</code></pre>\n<p>좋아요, 우리가 이미 이룬 것들이에요 😍</p>\n<h1>파이 차트 패널</h1>\n<p>자, 이제 그림자를 활용하여 빛나는 피 크림 차트를 위한 멋진 패널을 만들어 봅시다.</p>\n<p>여기서 그림자의 놀이 🤹‍♂️을 하며, innerShadow와 dropShadow 수정자(modifier)를 사용할 것입니다. 자세한 설명은 아래 제가 제공한 관련 기사를 참조하거나 👇 아래 링크에서 InnerShadow Gist, DropShadow Gist의 코드를 확인할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title class_\">PieChartPanel</span>(\n    <span class=\"hljs-attr\">modifier</span>: <span class=\"hljs-title class_\">Modifier</span>,\n    <span class=\"hljs-attr\">platesColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0xFFD5F3FF</span>),\n    <span class=\"hljs-attr\">platesGap</span>: <span class=\"hljs-title class_\">Dp</span> = <span class=\"hljs-number\">32.</span>dp,\n    <span class=\"hljs-attr\">style</span>: <span class=\"hljs-title class_\">ConvexStyle</span> = <span class=\"hljs-title class_\">ConvexStyle</span>(\n        blur = <span class=\"hljs-number\">12.</span>dp,\n        offset = <span class=\"hljs-number\">8.</span>dp,\n        glareColor = <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">White</span>.<span class=\"hljs-title function_\">copy</span>(alpha = <span class=\"hljs-number\">0.</span>32f),\n        shadowColor = <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Black</span>.<span class=\"hljs-title function_\">copy</span>(alpha = <span class=\"hljs-number\">0.</span>32f)\n    ),\n    <span class=\"hljs-attr\">content</span>: @<span class=\"hljs-title class_\">Composable</span> <span class=\"hljs-title class_\">BoxScope</span>.() -> <span class=\"hljs-title class_\">Unit</span>\n) {\n    <span class=\"hljs-title class_\">Box</span>(\n        <span class=\"hljs-comment\">// 전체 패널을 나타내는 외부 상자</span>\n        modifier = modifier\n            .<span class=\"hljs-title function_\">aspectRatio</span>(1f) <span class=\"hljs-comment\">// 가로세로 비율 1:1로 설정</span>\n            <span class=\"hljs-comment\">// 내부 그림자 적용으로 깊이 효과 생성</span>\n            .<span class=\"hljs-title function_\">innerShadow</span>(<span class=\"hljs-title class_\">CircleShape</span>, style.<span class=\"hljs-property\">glareColor</span>, style.<span class=\"hljs-property\">blur</span>, -style.<span class=\"hljs-property\">offset</span>, -style.<span class=\"hljs-property\">offset</span>)\n            .<span class=\"hljs-title function_\">innerShadow</span>(<span class=\"hljs-title class_\">CircleShape</span>, style.<span class=\"hljs-property\">shadowColor</span>, style.<span class=\"hljs-property\">blur</span>, style.<span class=\"hljs-property\">offset</span>, style.<span class=\"hljs-property\">offset</span>)\n            <span class=\"hljs-comment\">// 드롭 그림자 적용으로 고도 효과 생성</span>\n            .<span class=\"hljs-title function_\">dropShadow</span>(<span class=\"hljs-title class_\">CircleShape</span>, style.<span class=\"hljs-property\">glareColor</span>, style.<span class=\"hljs-property\">blur</span>, -style.<span class=\"hljs-property\">offset</span>, -style.<span class=\"hljs-property\">offset</span>)\n            .<span class=\"hljs-title function_\">dropShadow</span>(<span class=\"hljs-title class_\">CircleShape</span>, style.<span class=\"hljs-property\">shadowColor</span>, style.<span class=\"hljs-property\">blur</span>, style.<span class=\"hljs-property\">offset</span>, style.<span class=\"hljs-property\">offset</span>)\n            <span class=\"hljs-comment\">// 배경 그리기</span>\n            .<span class=\"hljs-title function_\">background</span>(platesColor, <span class=\"hljs-title class_\">CircleShape</span>),\n        contentAlignment = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">Center</span>\n    ) {\n        <span class=\"hljs-title class_\">Box</span>(\n            <span class=\"hljs-comment\">// 실제 콘텐츠를 포함하는 내부 상자</span>\n            modifier = <span class=\"hljs-title class_\">Modifier</span>\n                .<span class=\"hljs-title function_\">matchParentSize</span>() <span class=\"hljs-comment\">// 전체 부모 크기 차지</span>\n                .<span class=\"hljs-title function_\">padding</span>(platesGap) <span class=\"hljs-comment\">// 플레이트 간의 갭 추가</span>\n                <span class=\"hljs-comment\">// 드롭 그림자 적용으로 고도 효과 생성</span>\n                .<span class=\"hljs-title function_\">dropShadow</span>(<span class=\"hljs-title class_\">CircleShape</span>, style.<span class=\"hljs-property\">glareColor</span>, style.<span class=\"hljs-property\">blur</span>, -style.<span class=\"hljs-property\">offset</span>, -style.<span class=\"hljs-property\">offset</span>)\n                .<span class=\"hljs-title function_\">dropShadow</span>(<span class=\"hljs-title class_\">CircleShape</span>, style.<span class=\"hljs-property\">shadowColor</span>, style.<span class=\"hljs-property\">blur</span>, style.<span class=\"hljs-property\">offset</span>, style.<span class=\"hljs-property\">offset</span>)\n                <span class=\"hljs-comment\">// 배경 그리기</span>\n                .<span class=\"hljs-title function_\">background</span>(platesColor, <span class=\"hljs-title class_\">CircleShape</span>),\n            contentAlignment = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">Center</span>,\n            content = content <span class=\"hljs-comment\">// 콘텐츠 삽입</span>\n        )\n    }\n}\n</code></pre>\n<p>자, 준비가 다 되었습니다! 패널에 표시할 콘텐츠가 마지막 조각입니다. 패널에 표시할 총 값 텍스트를 조금의 애니메이션과 함께 만들어 봅시다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">TotalView</span><span class=\"hljs-params\">(\n    total: <span class=\"hljs-type\">Int</span>,\n    modifier: <span class=\"hljs-type\">Modifier</span> = Modifier,\n    animationSpec: <span class=\"hljs-type\">AnimationSpec</span>&#x3C;<span class=\"hljs-type\">Int</span>> = tween(<span class=\"hljs-number\">1000</span>, easing = FastOutSlowInEasing)</span></span>\n) {\n    <span class=\"hljs-keyword\">val</span> totalToDisplay = remember {\n        Animatable(initialValue = <span class=\"hljs-number\">0</span>, typeConverter = <span class=\"hljs-built_in\">Int</span>.VectorConverter)\n    }\n\n    <span class=\"hljs-comment\">// total 값이 변경될 때 전체 값을 애니메이트하는 effect 시작</span>\n    LaunchedEffect(total) {\n        totalToDisplay.animateTo(total, animationSpec)\n    }\n\n    Column(\n        modifier = modifier,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(\n            text = <span class=\"hljs-string\">\"총액\"</span>,\n            fontSize = <span class=\"hljs-number\">14.</span>sp,\n            color = Color(<span class=\"hljs-number\">0xFF464646</span>)\n        )\n        Text(\n            text = <span class=\"hljs-string\">\"<span class=\"hljs-subst\">${totalToDisplay.value}</span>$\"</span>,\n            fontSize = <span class=\"hljs-number\">18.</span>sp,\n            fontWeight = FontWeight.Medium,\n            color = Color(<span class=\"hljs-number\">0xFF010203</span>)\n        )\n    }\n}\n</code></pre>\n<p>축하합니다🥳! 성공적으로 구현했습니다👏. 전체 코드 구현은 GitHub Gist에서 확인하실 수 있어요🧑‍💻. 이제 모든 것을 하나로 합쳐서 최종 결과를 살펴봅시다!</p>\n<h2>광고</h2>\n<p>외국어를 배우고 새로운 어휘에 어려움을 겪고 계신가요? 그렇다면 어플 단어 학습 어플 을 꼭 추천드립니다! 여러분들의 학습 여정을 쉽고 편리하게 만들어 줄 거예요!</p>\n<p><img src=\"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_3.png\" alt=\"Image\"></p>\n<h1>Final</h1>\n<p>이제 시연을 위한 데이터 목록을 만들어 봅시다:</p>\n<pre><code class=\"hljs language-js\">val pieChartData = remember {\n    <span class=\"hljs-title function_\">listOf</span>(\n        <span class=\"hljs-title class_\">PieChartData</span>(<span class=\"hljs-string\">\"항목-1\"</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0xFFE45C5C</span>)),\n        <span class=\"hljs-title class_\">PieChartData</span>(<span class=\"hljs-string\">\"항목-2\"</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0xFF8FE25C</span>)),\n        <span class=\"hljs-title class_\">PieChartData</span>(<span class=\"hljs-string\">\"항목-3\"</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0xFF4471E4</span>)),\n        <span class=\"hljs-title class_\">PieChartData</span>(<span class=\"hljs-string\">\"항목-4\"</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0xFFEECE55</span>)),\n        <span class=\"hljs-title class_\">PieChartData</span>(<span class=\"hljs-string\">\"항목-5\"</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0xFFBD68CB</span>)),\n    )\n}\n</code></pre>\n<p>그리고 마지막으로 마무리해봅시다 🔩</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Box</span>(contentAlignment = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">Center</span>) {\n    <span class=\"hljs-title class_\">ConvexPieChart</span>(\n        data = pieChartData,\n        modifier = <span class=\"hljs-title class_\">Modifier</span>.<span class=\"hljs-title function_\">size</span>(<span class=\"hljs-number\">300.</span>dp)\n    )\n    <span class=\"hljs-title class_\">PieChartPanel</span>(\n        <span class=\"hljs-title class_\">Modifier</span>.<span class=\"hljs-title function_\">size</span>(<span class=\"hljs-number\">180.</span>dp)\n    ) {\n        <span class=\"hljs-title class_\">TotalView</span>(total = <span class=\"hljs-number\">23548</span>)\n    }\n}\n</code></pre>\n<h2>결과</h2>\n<p>당신께 도움이 되었길 바라며 감사합니다. 코딩을 즐기세요! ❤️</p>\n<p>아래 내용도 마음에 드실지도요 👇</p>\n<p>만일 좋아하셨다면 👏 클립해주세요! 그리고 더 많은 흥미로운 글을 보고 싶다면\nKappdev\n를 팔로우해주세요 😊</p>\n<p><img src=\"/assets/img/2024-05-15-BuildinganAmazing3DPieChartwithJetpackCompose_4.png\" alt=\"3D 파이 차트 만들기\"></p>\n</body>\n</html>\n"},"__N_SSG":true}