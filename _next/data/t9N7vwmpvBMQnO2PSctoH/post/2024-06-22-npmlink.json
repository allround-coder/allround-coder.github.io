{"pageProps":{"post":{"title":"npm 링크 사용 방법 2024 최신 가이드","description":"","date":"2024-06-22 02:26","slug":"2024-06-22-npmlink","content":"\n\nnpm 링크는 반복적으로 npm 패키지를 개발하고 테스트할 때 꾸준히 다시 빌드할 필요 없이 사용할 수 있는 필수 도구입니다. 원하는 대상 코드베이스에서 패키지를 직접 테스트할 수 있어요. 게시 후 불쾌한 놀라움을 피할 수 있어요. 저는 이것을 오랫동안 사용해왔어요. 처음에는 매우 간단했어요. 하지만 nvm, Webpack 등과 같은 도구를 사용하여 코드베이스가 복잡해지면서 작업하는 데 문제가 있었어요. 이 글은 npm 링크에 대한 제 경험에서 배운 것에 대한 내용입니다.\n\n# 사용 사례\n\n본 토론에서는 다음과 같은 사용 사례를 고려해 보세요.\n\n~/Documents/workspace/app에 node 앱인 app이라는 이름의 앱이 있고 이 앱은 utils라는 패키지를 사용합니다. utils는 이미 npm에 발행되어 있어요. utils에서 새로운 기능을 개발하고 이를 app에서 테스트하고 싶어요. 이를 위해 ~/Documents/workspace/utils에서 패키지를 확인했어요. utils 패키지에는 package.json에서 메인 파일로 src/index.js를 가지고 있어요.\n\n<div class=\"content-ad\"></div>\n\nutils에서 app으로 새 기능을 테스트하기 위한 링크를 생성할 예정입니다.\n\n# 사용법\n\n또 다른 코드베이스로부터 패키지를 연결하는 것은 2단계로 이루어집니다.\n\n## 단계 1\n\n<div class=\"content-ad\"></div>\n\n테스트할 패키지가 있는 디렉토리에서 npm link를 실행해주세요.\n\n그렇게 하면 패키지 디렉토리에서 전역 node_modules 디렉토리로 심볼릭 링크가 생성됩니다. 이 디렉토리는 'prefix'/lib/node_modules/`package-name` 에 위치해 있습니다. 또한 패키지 내의 모든 실행 파일들도 'prefix'/bin/`bin-name`에 링크됩니다.\n\n여기서 `package-name`은 package.json 파일에 있는 패키지의 이름을 가리키며, 패키지 코드가 있는 디렉토리의 이름은 아닙니다.\n\n'prefix'는 npm prefix -g의 출력을 나타냅니다. 저의 macOS에서는 homebrew를 통해 node가 설치되었으므로 /usr/local에 위치합니다. 따라서 전역 node_modules는 /usr/local/lib/node_modules에 있습니다.\n\n<div class=\"content-ad\"></div>\n\nutils 디렉터리에서 npm link를 실행하면 /usr/local/lib/node_modules/utils에서 ~/Documents/workspace/utils로 심볼릭 링크가 생성됩니다. 전역 노드 모듈 디렉터리로 이동하면 ls 명령어의 결과는 다음과 같습니다.\n\n![이미지](/assets/img/2024-06-22-npmlink_0.png)\n\n## 단계 2\n\n테스트하려는 패키지가 있는 코드베이스에서 npm link `package-name`을 실행하세요.\n\n<div class=\"content-ad\"></div>\n\nnpm 문서에 따르면, 이 코드베이스 내 node_modules/`package-name`에 심볼릭 링크를 생성하여 글로벌 node_modules 즉 'prefix'/lib/node_modules/`package-name` 로 연결해줍니다. 그러나 제가 8버전 이후의 새로운 npm 버전인 경우에 이 동작이 변경된 것을 알게 되었습니다. 새로운 버전에서는 심볼릭 링크가 node_modules/`package-name`에서 바로 로컬 패키지 저장소로 만들어집니다.\n\n내 앱 디렉토리에서 npm link utils를 실행하면, ~/Documents/workspace/app/node_modules/utils 에서 utils 패키지 위치인 ~/Documents/workspace/utils 로 심볼릭 링크가 생성됩니다. 이것은 npm 8.11에서 실행 중이기 때문에 ls 명령어의 출력은 app 디렉토리의 node_modules 디렉토리에 표시됩니다.\n\n![이미지](/assets/img/2024-06-22-npmlink_1.png)\n\n저는 npm 6.14.4에서도 동일한 작업을 시도해 보았습니다. 이 경우 utils는 npm 문서에서 언급된대로 글로벌 node_modules에 대한 링크가 생성됩니다. 즉 /usr/local/lib/node_modules/utils 입니다.\n\n<div class=\"content-ad\"></div>\n\n# nvm 사용 방법\n\nnvm을 사용하면 같은 컴퓨터에서 다양한 버전의 노드를 전환할 수 있습니다. 여러 버전의 노드가 설치되어 있더라도, 오직 1개의 버전만이 현재 버전으로 설정됩니다. nvm을 사용하는 경우, 패키지에서 npm link를 실행하면 현재 노드 버전(nvm use를 통해 설정됨)의 전역 node_modules에 링크가 생성됩니다. 이후 대상 코드베이스에서 npm link `패키지 이름`을 실행할 때, nvm의 현재 노드 버전이 변경되었다면, 링크가 생성되지 않습니다.\n\n## 사용 사례\n\n초기 사용 사례에서, 앱이 노드 18이 필요하고 utils는 적어도 노드 16이 필요한 경우를 가정해봅시다. 이들을 링크하려면 다음 작업을 수행해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n- nvm을 사용하여 노드 18로 변경합니다.\n- npm linkin utils를 실행합니다. 이렇게 하면 해당 패키지가 노드 v18의 전역 node_modules에 연결됩니다.\n- 앱에서 npm link utils을 실행합니다.\n\n이제 utils를 사용하는 app_1이 있고, 이 앱은 노드 16에서만 작동하는 경우를 가정해 봅시다. app_1을 utils에 연결하려면 다음을 수행해야 합니다.\n\n- nvm을 사용하여 노드 16로 변경합니다.\n- utils에서 다시 npm link를 실행하여 노드 v16의 전역 node_modules에 연결되도록 합니다.\n- app_1에서 npm link utils을 실행합니다.\n\n# 웹팩과의 사용법\n\n<div class=\"content-ad\"></div>\n\n링크를 설정하면 애플리케이션이 Webpack과 번들로 결합된 패키지의 경우 몇 가지 문제가 발생할 수 있습니다.\n\n## resolve.symlinks 설정 문제\n\n내 앱 중 일부에서 링크된 패키지가 포함된 앱을 번들링할 때, Webpack이 연결된 모듈에서 수입을 해결할 수 없는 문제가 발생했습니다. 이는 아마도 Webpack 구성의 resolve.symlinks 설정 때문일 것입니다. 기본적으로이 boolean은 true이며, 패키지는 심볼릭 링크 위치가 아닌 실제 경로로 해결됩니다. 따라서 이 문제가 발생하면 webpack 구성에서 resolve.symlinks를 false로 설정하면 문제가 해결될 것입니다.\n\n우리가 따르고있는 사용 사례에는 resolve.symlinkswith 값에 해당합니다.\n\n<div class=\"content-ad\"></div>\n\n- true를 사용하면 utils가 ../utils/src/index.js로 해석됩니다.\n- false를 사용하면 utils가 ./node_modules/utils/src/index.js로 해석됩니다.\n\n이 차이가 언제 문제가 될지 정확히 알 수 없었습니다. 일부 코드베이스에서는 링크된 모듈이 제대로 작동하여 resolve.symlinks를 설정하지 않아도 완벽하게 작동합니다. 반면에 일부 다른 코드베이스에서는 false로 설정하지 않으면 빌드가 실패합니다. 이 속성에 대한 Webpack 문서의 설명은 약간 모호합니다. — 패키지를 심볼릭 링크하는 도구를 사용할 때 모듈 해결에 실패할 수 있음을 참고하세요.\n\n## React 패키지를 링크하는 중 문제\n\nReact 컴포넌트를 포함한 패키지를 개발 중이라고 가정해보겠습니다. 이를 앱에서 링크하고 테스트하고자 합니다. Webpack 빌드는 잘 처리됩니다. 그러나 브라우저에서 애플리케이션을 로드할 때, 앱이 오류와 함께 크래시된 것을 확인할 수 있습니다 — 동일한 앱에서 React의 복사본이 여러 개 있는 것으로 보입니다.\n\n<div class=\"content-ad\"></div>\n\n리액트 컴포넌트가 npm에 발행되면 해당 컴포넌트가 번들에 포함되지 않도록 하기 위해 리액트 패키지를 피어 종속성으로 추가해야 합니다. 피어 종속성으로 표시하면 다른 리액트 앱에서 해당 컴포넌트를 사용할 때 그 앱의 node_modules에서 리액트를 가져옵니다.\n\n따라서 이 문제를 마주하게 되면,\n\n- 반드시 확인해야 할 점은 컴포넌트의 package.json에서 dependencies가 아닌 peerDependencies로 리액트가 추가되었는지 확인하는 것입니다.\n- 컴포넌트의 번들러(Webpack의 externals 및 Rollup의 external)에서도 리액트를 외부 종속성으로 표시해야 합니다. 이렇게 하면 번들에 추가되지 않습니다.\n- 이상적으로는 위 두 가지가 문제를 해결해야 합니다. 그러나 문제가 지속되는 경우, 앱의 개발 Webpack 구성에서 리액트에 대한 별칭을 작성하고 아래와 같이 앱의 리액트 버전으로 해결합니다.\n\n```js\n// webpack.config.js\nresolve: {\n  alias: {\n    react: path.resolve('./node_modules/react'),\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## TypeScript\n\nTypeScript에는 preserveSymlinks 옵션이 있어요. 문서에 따르면, 이 옵션은 Webpack의 resolve.symlinks와 반대 효과를 나타냅니다. 그런데 제가 지금까지 제 어플리케이션에 이 옵션을 조정해야 했던 적은 없어요. preserveSymlinks의 효과를 확인한 케이스가 두 가지 있었어요.\n\n- TypeScript를 활성화하고 Webpack으로 번들링한 프로젝트\n- TypeScript를 활성화하고 tsc를 사용해 변환한 NodeJS 프로젝트\n\n두 경우 모두, preserveSymlinks: true로 생성된 파일은 preserveSymlinks: false로 생성된 파일과 동일했어요. 그래서 이 옵션의 유틸리티를 확인하지 못했습니다.\n\n<div class=\"content-ad\"></div>\n\n# NodeJS\n\nNodeJS에는 링킹과 관련된 2가지 옵션이 있어요\n\n- — preserve-symlinks\n- — preserve-symlinks-main\n\n이 옵션들에 대한 자세한 설명은 NodeJS 문서에 있어요. 하지만 제가 어떤 앱에서도 이것들을 사용하지 않고도 링킹이 잘 동작했어요.\n\n<div class=\"content-ad\"></div>\n\n# 다른 링킹 문제 \n\n링크 명령은 항상 전체 종속성 트리를 해결합니다. 즉 npm install 처럼 노드_모듈을 삭제하고 npm install A 라고 쓴다면, package.json에 있는 전체 종속성 목록이 A와 함께 설치된다는 것을 알 수 있습니다. 마찬가지로 npm link A 를 실행할 때, npm은 패키지 A를 연결하고 package.json의 다른 종속성을 모두 설치합니다.\n\n나는 npm link의 이 동작과 관련된 몇 가지 링킹 문제를 알아 냈습니다.\n\n## 여러 패키지 연결\n\n<div class=\"content-ad\"></div>\n\n가정하자면 여러분이 패키지 A를 연결해 놓은 코드베이스가 있다고 해봅시다. 이제 동일한 코드베이스에 다른 패키지 B를 연결해야 합니다. npm link B 명령을 실행하면 A가 더 이상 연결되지 않는 것을 확인할 수 있을 겁니다. 이는 npm link B가 npm에게 B 패키지를 연결하고 package.json에 있는 모든 다른 의존성을 설치하도록 지시하기 때문입니다. npm이 이 작업을 수행하면 package A에 대한 연결이 덮어씌워지고 레지스트리에서 다운로드한 A의 버전으로 대체됩니다. package.json에 명시된 A의 버전이 레지스트리에 없으면 package A에 대한 터미널에서 404 오류가 발생하여 연결에 실패합니다. 그래서 A와 B를 모두 코드베이스에 연결하려면 npm link A B를 실행하세요.\n\n## 다른 패키지 설치하기\n\n가정하자면 여러분이 패키지 A를 연결해 놓은 코드베이스가 있다고 해봅시다. 새 패키지를 설치하면 A에 대한 연결이 사라지는 것을 알 수 있을 겁니다. 이는 npm install이 전체 트리를 다시 해석하고 A를 레지스트리에서 설치하여 연결을 덮어씌웠기 때문입니다. 만약 package.json에 명시된 A의 버전이 레지스트리에 없었다면 npm install이 404로 실패했을 겁니다. 이 문제를 해결하려면 모든 npm install 후에 연결해야 하는 모든 패키지들을 다시 연결하시면 됩니다.","ogImage":{"url":"/assets/img/2024-06-22-npmlink_0.png"},"coverImage":"/assets/img/2024-06-22-npmlink_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>npm 링크는 반복적으로 npm 패키지를 개발하고 테스트할 때 꾸준히 다시 빌드할 필요 없이 사용할 수 있는 필수 도구입니다. 원하는 대상 코드베이스에서 패키지를 직접 테스트할 수 있어요. 게시 후 불쾌한 놀라움을 피할 수 있어요. 저는 이것을 오랫동안 사용해왔어요. 처음에는 매우 간단했어요. 하지만 nvm, Webpack 등과 같은 도구를 사용하여 코드베이스가 복잡해지면서 작업하는 데 문제가 있었어요. 이 글은 npm 링크에 대한 제 경험에서 배운 것에 대한 내용입니다.</p>\n<h1>사용 사례</h1>\n<p>본 토론에서는 다음과 같은 사용 사례를 고려해 보세요.</p>\n<p>~/Documents/workspace/app에 node 앱인 app이라는 이름의 앱이 있고 이 앱은 utils라는 패키지를 사용합니다. utils는 이미 npm에 발행되어 있어요. utils에서 새로운 기능을 개발하고 이를 app에서 테스트하고 싶어요. 이를 위해 ~/Documents/workspace/utils에서 패키지를 확인했어요. utils 패키지에는 package.json에서 메인 파일로 src/index.js를 가지고 있어요.</p>\n<p>utils에서 app으로 새 기능을 테스트하기 위한 링크를 생성할 예정입니다.</p>\n<h1>사용법</h1>\n<p>또 다른 코드베이스로부터 패키지를 연결하는 것은 2단계로 이루어집니다.</p>\n<h2>단계 1</h2>\n<p>테스트할 패키지가 있는 디렉토리에서 npm link를 실행해주세요.</p>\n<p>그렇게 하면 패키지 디렉토리에서 전역 node_modules 디렉토리로 심볼릭 링크가 생성됩니다. 이 디렉토리는 'prefix'/lib/node_modules/<code>package-name</code> 에 위치해 있습니다. 또한 패키지 내의 모든 실행 파일들도 'prefix'/bin/<code>bin-name</code>에 링크됩니다.</p>\n<p>여기서 <code>package-name</code>은 package.json 파일에 있는 패키지의 이름을 가리키며, 패키지 코드가 있는 디렉토리의 이름은 아닙니다.</p>\n<p>'prefix'는 npm prefix -g의 출력을 나타냅니다. 저의 macOS에서는 homebrew를 통해 node가 설치되었으므로 /usr/local에 위치합니다. 따라서 전역 node_modules는 /usr/local/lib/node_modules에 있습니다.</p>\n<p>utils 디렉터리에서 npm link를 실행하면 /usr/local/lib/node_modules/utils에서 ~/Documents/workspace/utils로 심볼릭 링크가 생성됩니다. 전역 노드 모듈 디렉터리로 이동하면 ls 명령어의 결과는 다음과 같습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-npmlink_0.png\" alt=\"이미지\"></p>\n<h2>단계 2</h2>\n<p>테스트하려는 패키지가 있는 코드베이스에서 npm link <code>package-name</code>을 실행하세요.</p>\n<p>npm 문서에 따르면, 이 코드베이스 내 node_modules/<code>package-name</code>에 심볼릭 링크를 생성하여 글로벌 node_modules 즉 'prefix'/lib/node_modules/<code>package-name</code> 로 연결해줍니다. 그러나 제가 8버전 이후의 새로운 npm 버전인 경우에 이 동작이 변경된 것을 알게 되었습니다. 새로운 버전에서는 심볼릭 링크가 node_modules/<code>package-name</code>에서 바로 로컬 패키지 저장소로 만들어집니다.</p>\n<p>내 앱 디렉토리에서 npm link utils를 실행하면, ~/Documents/workspace/app/node_modules/utils 에서 utils 패키지 위치인 ~/Documents/workspace/utils 로 심볼릭 링크가 생성됩니다. 이것은 npm 8.11에서 실행 중이기 때문에 ls 명령어의 출력은 app 디렉토리의 node_modules 디렉토리에 표시됩니다.</p>\n<p><img src=\"/assets/img/2024-06-22-npmlink_1.png\" alt=\"이미지\"></p>\n<p>저는 npm 6.14.4에서도 동일한 작업을 시도해 보았습니다. 이 경우 utils는 npm 문서에서 언급된대로 글로벌 node_modules에 대한 링크가 생성됩니다. 즉 /usr/local/lib/node_modules/utils 입니다.</p>\n<h1>nvm 사용 방법</h1>\n<p>nvm을 사용하면 같은 컴퓨터에서 다양한 버전의 노드를 전환할 수 있습니다. 여러 버전의 노드가 설치되어 있더라도, 오직 1개의 버전만이 현재 버전으로 설정됩니다. nvm을 사용하는 경우, 패키지에서 npm link를 실행하면 현재 노드 버전(nvm use를 통해 설정됨)의 전역 node_modules에 링크가 생성됩니다. 이후 대상 코드베이스에서 npm link <code>패키지 이름</code>을 실행할 때, nvm의 현재 노드 버전이 변경되었다면, 링크가 생성되지 않습니다.</p>\n<h2>사용 사례</h2>\n<p>초기 사용 사례에서, 앱이 노드 18이 필요하고 utils는 적어도 노드 16이 필요한 경우를 가정해봅시다. 이들을 링크하려면 다음 작업을 수행해야 합니다.</p>\n<ul>\n<li>nvm을 사용하여 노드 18로 변경합니다.</li>\n<li>npm linkin utils를 실행합니다. 이렇게 하면 해당 패키지가 노드 v18의 전역 node_modules에 연결됩니다.</li>\n<li>앱에서 npm link utils을 실행합니다.</li>\n</ul>\n<p>이제 utils를 사용하는 app_1이 있고, 이 앱은 노드 16에서만 작동하는 경우를 가정해 봅시다. app_1을 utils에 연결하려면 다음을 수행해야 합니다.</p>\n<ul>\n<li>nvm을 사용하여 노드 16로 변경합니다.</li>\n<li>utils에서 다시 npm link를 실행하여 노드 v16의 전역 node_modules에 연결되도록 합니다.</li>\n<li>app_1에서 npm link utils을 실행합니다.</li>\n</ul>\n<h1>웹팩과의 사용법</h1>\n<p>링크를 설정하면 애플리케이션이 Webpack과 번들로 결합된 패키지의 경우 몇 가지 문제가 발생할 수 있습니다.</p>\n<h2>resolve.symlinks 설정 문제</h2>\n<p>내 앱 중 일부에서 링크된 패키지가 포함된 앱을 번들링할 때, Webpack이 연결된 모듈에서 수입을 해결할 수 없는 문제가 발생했습니다. 이는 아마도 Webpack 구성의 resolve.symlinks 설정 때문일 것입니다. 기본적으로이 boolean은 true이며, 패키지는 심볼릭 링크 위치가 아닌 실제 경로로 해결됩니다. 따라서 이 문제가 발생하면 webpack 구성에서 resolve.symlinks를 false로 설정하면 문제가 해결될 것입니다.</p>\n<p>우리가 따르고있는 사용 사례에는 resolve.symlinkswith 값에 해당합니다.</p>\n<ul>\n<li>true를 사용하면 utils가 ../utils/src/index.js로 해석됩니다.</li>\n<li>false를 사용하면 utils가 ./node_modules/utils/src/index.js로 해석됩니다.</li>\n</ul>\n<p>이 차이가 언제 문제가 될지 정확히 알 수 없었습니다. 일부 코드베이스에서는 링크된 모듈이 제대로 작동하여 resolve.symlinks를 설정하지 않아도 완벽하게 작동합니다. 반면에 일부 다른 코드베이스에서는 false로 설정하지 않으면 빌드가 실패합니다. 이 속성에 대한 Webpack 문서의 설명은 약간 모호합니다. — 패키지를 심볼릭 링크하는 도구를 사용할 때 모듈 해결에 실패할 수 있음을 참고하세요.</p>\n<h2>React 패키지를 링크하는 중 문제</h2>\n<p>React 컴포넌트를 포함한 패키지를 개발 중이라고 가정해보겠습니다. 이를 앱에서 링크하고 테스트하고자 합니다. Webpack 빌드는 잘 처리됩니다. 그러나 브라우저에서 애플리케이션을 로드할 때, 앱이 오류와 함께 크래시된 것을 확인할 수 있습니다 — 동일한 앱에서 React의 복사본이 여러 개 있는 것으로 보입니다.</p>\n<p>리액트 컴포넌트가 npm에 발행되면 해당 컴포넌트가 번들에 포함되지 않도록 하기 위해 리액트 패키지를 피어 종속성으로 추가해야 합니다. 피어 종속성으로 표시하면 다른 리액트 앱에서 해당 컴포넌트를 사용할 때 그 앱의 node_modules에서 리액트를 가져옵니다.</p>\n<p>따라서 이 문제를 마주하게 되면,</p>\n<ul>\n<li>반드시 확인해야 할 점은 컴포넌트의 package.json에서 dependencies가 아닌 peerDependencies로 리액트가 추가되었는지 확인하는 것입니다.</li>\n<li>컴포넌트의 번들러(Webpack의 externals 및 Rollup의 external)에서도 리액트를 외부 종속성으로 표시해야 합니다. 이렇게 하면 번들에 추가되지 않습니다.</li>\n<li>이상적으로는 위 두 가지가 문제를 해결해야 합니다. 그러나 문제가 지속되는 경우, 앱의 개발 Webpack 구성에서 리액트에 대한 별칭을 작성하고 아래와 같이 앱의 리액트 버전으로 해결합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-attr\">resolve</span>: {\n  <span class=\"hljs-attr\">alias</span>: {\n    <span class=\"hljs-attr\">react</span>: path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'./node_modules/react'</span>),\n}\n</code></pre>\n<h2>TypeScript</h2>\n<p>TypeScript에는 preserveSymlinks 옵션이 있어요. 문서에 따르면, 이 옵션은 Webpack의 resolve.symlinks와 반대 효과를 나타냅니다. 그런데 제가 지금까지 제 어플리케이션에 이 옵션을 조정해야 했던 적은 없어요. preserveSymlinks의 효과를 확인한 케이스가 두 가지 있었어요.</p>\n<ul>\n<li>TypeScript를 활성화하고 Webpack으로 번들링한 프로젝트</li>\n<li>TypeScript를 활성화하고 tsc를 사용해 변환한 NodeJS 프로젝트</li>\n</ul>\n<p>두 경우 모두, preserveSymlinks: true로 생성된 파일은 preserveSymlinks: false로 생성된 파일과 동일했어요. 그래서 이 옵션의 유틸리티를 확인하지 못했습니다.</p>\n<h1>NodeJS</h1>\n<p>NodeJS에는 링킹과 관련된 2가지 옵션이 있어요</p>\n<ul>\n<li>— preserve-symlinks</li>\n<li>— preserve-symlinks-main</li>\n</ul>\n<p>이 옵션들에 대한 자세한 설명은 NodeJS 문서에 있어요. 하지만 제가 어떤 앱에서도 이것들을 사용하지 않고도 링킹이 잘 동작했어요.</p>\n<h1>다른 링킹 문제</h1>\n<p>링크 명령은 항상 전체 종속성 트리를 해결합니다. 즉 npm install 처럼 노드_모듈을 삭제하고 npm install A 라고 쓴다면, package.json에 있는 전체 종속성 목록이 A와 함께 설치된다는 것을 알 수 있습니다. 마찬가지로 npm link A 를 실행할 때, npm은 패키지 A를 연결하고 package.json의 다른 종속성을 모두 설치합니다.</p>\n<p>나는 npm link의 이 동작과 관련된 몇 가지 링킹 문제를 알아 냈습니다.</p>\n<h2>여러 패키지 연결</h2>\n<p>가정하자면 여러분이 패키지 A를 연결해 놓은 코드베이스가 있다고 해봅시다. 이제 동일한 코드베이스에 다른 패키지 B를 연결해야 합니다. npm link B 명령을 실행하면 A가 더 이상 연결되지 않는 것을 확인할 수 있을 겁니다. 이는 npm link B가 npm에게 B 패키지를 연결하고 package.json에 있는 모든 다른 의존성을 설치하도록 지시하기 때문입니다. npm이 이 작업을 수행하면 package A에 대한 연결이 덮어씌워지고 레지스트리에서 다운로드한 A의 버전으로 대체됩니다. package.json에 명시된 A의 버전이 레지스트리에 없으면 package A에 대한 터미널에서 404 오류가 발생하여 연결에 실패합니다. 그래서 A와 B를 모두 코드베이스에 연결하려면 npm link A B를 실행하세요.</p>\n<h2>다른 패키지 설치하기</h2>\n<p>가정하자면 여러분이 패키지 A를 연결해 놓은 코드베이스가 있다고 해봅시다. 새 패키지를 설치하면 A에 대한 연결이 사라지는 것을 알 수 있을 겁니다. 이는 npm install이 전체 트리를 다시 해석하고 A를 레지스트리에서 설치하여 연결을 덮어씌웠기 때문입니다. 만약 package.json에 명시된 A의 버전이 레지스트리에 없었다면 npm install이 404로 실패했을 겁니다. 이 문제를 해결하려면 모든 npm install 후에 연결해야 하는 모든 패키지들을 다시 연결하시면 됩니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}