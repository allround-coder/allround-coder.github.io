{"pageProps":{"post":{"title":"Angular 커스텀 파이프 사용 방법","description":"","date":"2024-06-23 14:02","slug":"2024-06-23-AngularCustomPipes","content":"\n\nMarkdown 형식으로 테이블 태그를 변경하세요.\n\n<div class=\"content-ad\"></div>\n\n## 간단한 사용자 정의 파이프 만들기\n\n우리가 하는 일을 시작하기 위해 문자열에서 각 단어의 첫 글자를 대문자로 변경하는 파이프를 만들어보는 간달한 예제부터 사용해 봅시다.\n\n1. 파이프 생성하기\n\n```js\nng generate pipe capitalize\n```\n\n<div class=\"content-ad\"></div>\n\n2. 파이프 로직 구현\n\n```typescript\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'capitalize'\n})\nexport class CapitalizePipe implements PipeTransform {\n  transform(value: string): string {\n    if (!value) return value;\n    return value.replace(/\\b\\w/g, char => char.toUpperCase());\n  }\n}\n```\n\n3. 템플릿에서 파이프 사용\n\n```html\n<p>{ 'hello world' | capitalize }</p>\n```\n\n<div class=\"content-ad\"></div>\n\n## 매개변수를 사용한 Pipe 생성하기\n\n사용자 정의 파이프는 매개변수도 받을 수 있습니다. 이 예제에서는 어떻게 매개변수를 가진 파이프를 생성하는지 자세히 살펴보겠습니다. 이 파이프 예제는 숫자를 지정된 소수 자리로 서식 지정합니다. \n\n1. 파이프 생성하기\n\n```js\nng generate pipe decimalFormatter\n```\n\n<div class=\"content-ad\"></div>\n\n2. Pipe Logic을 구현하세요\n\n```js\nimport { Pipe, PipeTransform } from '@angular/core';\n@Pipe({\n name: 'decimalFormatter'\n})\nexport class DecimalFormatterPipe implements PipeTransform {\ntransform(value: number, decimalPlaces: number): string {\n if (isNaN(value)) return value.toString();\n return value.toFixed(decimalPlaces);\n }\n}\n```\n\n3. 파라미터와 함께 Pipe 사용하기\n\n```js\n<p>{ 1234.56789 | decimalFormatter:2 }</p>\n```\n\n<div class=\"content-ad\"></div>\n\n## 복잡한 변환에는 Pipes를 사용해요\n\n가끔, Pipes는 더 복잡한 변환을 다루어야 할 때가 있어요. 특정 속성과 값에 따라 객체 배열을 필터링하는 Pipe를 만들어 보도록 해요.\n\n1. Pipe 생성하기\n\n```js\nng generate pipe filter\n```\n\n<div class=\"content-ad\"></div>\n\n2. 파이프 논리 구현하기\n\n```js\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'filter'\n})\nexport class FilterPipe implements PipeTransform {\n  transform(items: any[], property: string, value: any): any[] {\n    if (!items || !property || value === undefined) return items;\n    return items.filter(item => item[property] === value);\n  }\n}\n```\n\n3. 템플릿에서 파이프 사용하기\n\n```js\nexport class AppComponent {\n  users = [\n    { name: 'AJ', role: 'admin' },\n    { name: 'Segun', role: 'user' },\n    { name: 'Homelander', role: 'admin' },\n    { name: 'Alice', role: 'user' }\n  ];\n}\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n<ul>\n@for(user of users; track user | filter:'role':'admin') {\n <li>\n { user.name } ({ user.role })\n </li>\n}\n</ul>\n```\n\n## 비동기 파이프 생성하기\n\nAngular는 Observables 또는 Promises를 사용하여 비동기 파이프를 지원합니다. API에서 데이터를 가져와 표시하는 파이프를 만들어보겠습니다.\n\n1. 파이프 생성하기\n\n\n<div class=\"content-ad\"></div>\n\n```js\nng generate pipe fetchData\n```\n\n2. Pipe 로직 구현하기\n\n```js\n@Pipe({\n name: 'fetchData',\n pure: false\n})\nexport class FetchDataPipe implements PipeTransform {\n private http = inject(HttpClient)\n transform(url: string): Observable<any> {\n return this.http.get(url);\n }\n}\n```\n\n3. 템플릿에서 Pipe 사용하기\n\n<div class=\"content-ad\"></div>\n\n```js\n<div>\n@if(apiUrl | fetchData | async as data) {\n <pre>{ data | json }</pre>\n}\n</div>\n//apiUrl: string = 'https://api.example.com/data'\n```\n\n## 파이프 성능 최적화\n\n기본적으로 Angular 파이프는 순수입니다. 이는 입력 참조가 변경될 때만 다시 실행됨을 의미합니다. 성능 상의 이유로 가능한 곳에서 이 동작을 활용하는 것이 중요합니다. 그러나 입력 데이터가 가변적인 경우, @Pipe 데코레이터의 pure 속성을 false로 설정하여 순수하지 않은 파이프를 생성할 수 있습니다.\n\n순수하지 않은 파이프의 예시\n\n\n<div class=\"content-ad\"></div>\n\n1. 파이프 생성하기\n\n```js\nng generate pipe impure\n```\n\n2. 파이프 로직 구현하기\n\n```js\nimport { Pipe, PipeTransform } from '@angular/core';\n@Pipe({\n name: 'impure',\n pure: false\n})\nexport class ImpurePipe implements PipeTransform {\ntransform(value: any, …args: any[]): any {\n // 사용자 정의 변환 로직\n return value;\n }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 커스텀 파이프에 대한 최상의 방법\n\n가능한 경우 Pipes Pure를 유지하여 Angular의 변경 감지 최적화를 활용하세요.\n단일 책임: 각 파이프는 단일 책임을 가져야 합니다. 변환 작업이 복잡한 경우 여러 파이프로 분리하는 것을 고려해보세요.\n성능 고려사항: 특히 복잡한 변환 작업이나 대량 데이터세트의 경우 성능에 신경을 써야 합니다. 필요한 경우 캐싱 전략을 사용하세요.\n오류 처리: 특히 외부 서비스와 상호작용이나 복잡한 작업을 수행하는 파이프의 경우 오류 처리를 구현하세요.\n재사용성: 다른 컴포넌트 및 모듈에서 재사용할 수 있는 파이프를 만들어 중복을 피하세요.\n\nAngular의 사용자 정의 파이프는 템플릿에서 데이터를 직접 변환하고 형식화하는 강력한 방법을 제공합니다. 이는 간단한 텍스트 변환부터 복잡한 데이터 조작 및 비동기 작업까지 다양할 수 있습니다. 사용자 정의 파이프를 효과적으로 이해하고 구현함으로써 Angular 애플리케이션의 가독성과 유지 관리성을 향상시킬 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-23-AngularCustomPipes_0.png"},"coverImage":"/assets/img/2024-06-23-AngularCustomPipes_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Markdown 형식으로 테이블 태그를 변경하세요.</p>\n<h2>간단한 사용자 정의 파이프 만들기</h2>\n<p>우리가 하는 일을 시작하기 위해 문자열에서 각 단어의 첫 글자를 대문자로 변경하는 파이프를 만들어보는 간달한 예제부터 사용해 봅시다.</p>\n<ol>\n<li>파이프 생성하기</li>\n</ol>\n<pre><code class=\"hljs language-js\">ng generate pipe capitalize\n</code></pre>\n<ol start=\"2\">\n<li>파이프 로직 구현</li>\n</ol>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Pipe</span>, <span class=\"hljs-title class_\">PipeTransform</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Pipe</span>({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'capitalize'</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CapitalizePipe</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PipeTransform</span> {\n  <span class=\"hljs-title function_\">transform</span>(<span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">if</span> (!value) <span class=\"hljs-keyword\">return</span> value;\n    <span class=\"hljs-keyword\">return</span> value.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\b\\w/g</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">char</span> =></span> char.<span class=\"hljs-title function_\">toUpperCase</span>());\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>템플릿에서 파이프 사용</li>\n</ol>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{ 'hello world' | capitalize }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n</code></pre>\n<h2>매개변수를 사용한 Pipe 생성하기</h2>\n<p>사용자 정의 파이프는 매개변수도 받을 수 있습니다. 이 예제에서는 어떻게 매개변수를 가진 파이프를 생성하는지 자세히 살펴보겠습니다. 이 파이프 예제는 숫자를 지정된 소수 자리로 서식 지정합니다.</p>\n<ol>\n<li>파이프 생성하기</li>\n</ol>\n<pre><code class=\"hljs language-js\">ng generate pipe decimalFormatter\n</code></pre>\n<ol start=\"2\">\n<li>Pipe Logic을 구현하세요</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Pipe</span>, <span class=\"hljs-title class_\">PipeTransform</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n@<span class=\"hljs-title class_\">Pipe</span>({\n <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'decimalFormatter'</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DecimalFormatterPipe</span> implements <span class=\"hljs-title class_\">PipeTransform</span> {\n<span class=\"hljs-title function_\">transform</span>(<span class=\"hljs-attr\">value</span>: number, <span class=\"hljs-attr\">decimalPlaces</span>: number): string {\n <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isNaN</span>(value)) <span class=\"hljs-keyword\">return</span> value.<span class=\"hljs-title function_\">toString</span>();\n <span class=\"hljs-keyword\">return</span> value.<span class=\"hljs-title function_\">toFixed</span>(decimalPlaces);\n }\n}\n</code></pre>\n<ol start=\"3\">\n<li>파라미터와 함께 Pipe 사용하기</li>\n</ol>\n<pre><code class=\"hljs language-js\">&#x3C;p>{ <span class=\"hljs-number\">1234.56789</span> | <span class=\"hljs-attr\">decimalFormatter</span>:<span class=\"hljs-number\">2</span> }&#x3C;/p>\n</code></pre>\n<h2>복잡한 변환에는 Pipes를 사용해요</h2>\n<p>가끔, Pipes는 더 복잡한 변환을 다루어야 할 때가 있어요. 특정 속성과 값에 따라 객체 배열을 필터링하는 Pipe를 만들어 보도록 해요.</p>\n<ol>\n<li>Pipe 생성하기</li>\n</ol>\n<pre><code class=\"hljs language-js\">ng generate pipe filter\n</code></pre>\n<ol start=\"2\">\n<li>파이프 논리 구현하기</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Pipe</span>, <span class=\"hljs-title class_\">PipeTransform</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n@<span class=\"hljs-title class_\">Pipe</span>({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'filter'</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FilterPipe</span> implements <span class=\"hljs-title class_\">PipeTransform</span> {\n  <span class=\"hljs-title function_\">transform</span>(<span class=\"hljs-attr\">items</span>: any[], <span class=\"hljs-attr\">property</span>: string, <span class=\"hljs-attr\">value</span>: any): any[] {\n    <span class=\"hljs-keyword\">if</span> (!items || !property || value === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> items;\n    <span class=\"hljs-keyword\">return</span> items.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =></span> item[property] === value);\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>템플릿에서 파이프 사용하기</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n  users = [\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'AJ'</span>, <span class=\"hljs-attr\">role</span>: <span class=\"hljs-string\">'admin'</span> },\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Segun'</span>, <span class=\"hljs-attr\">role</span>: <span class=\"hljs-string\">'user'</span> },\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Homelander'</span>, <span class=\"hljs-attr\">role</span>: <span class=\"hljs-string\">'admin'</span> },\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Alice'</span>, <span class=\"hljs-attr\">role</span>: <span class=\"hljs-string\">'user'</span> }\n  ];\n}\n</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;ul>\n@<span class=\"hljs-keyword\">for</span>(user <span class=\"hljs-keyword\">of</span> users; track user | <span class=\"hljs-attr\">filter</span>:<span class=\"hljs-string\">'role'</span>:<span class=\"hljs-string\">'admin'</span>) {\n <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>\n { user.name } ({ user.role })\n <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>\n}\n&#x3C;/ul>\n</code></pre>\n<h2>비동기 파이프 생성하기</h2>\n<p>Angular는 Observables 또는 Promises를 사용하여 비동기 파이프를 지원합니다. API에서 데이터를 가져와 표시하는 파이프를 만들어보겠습니다.</p>\n<ol>\n<li>파이프 생성하기</li>\n</ol>\n<pre><code class=\"hljs language-js\">ng generate pipe fetchData\n</code></pre>\n<ol start=\"2\">\n<li>Pipe 로직 구현하기</li>\n</ol>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Pipe</span>({\n <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'fetchData'</span>,\n <span class=\"hljs-attr\">pure</span>: <span class=\"hljs-literal\">false</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FetchDataPipe</span> implements <span class=\"hljs-title class_\">PipeTransform</span> {\n private http = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">HttpClient</span>)\n <span class=\"hljs-title function_\">transform</span>(<span class=\"hljs-attr\">url</span>: string): <span class=\"hljs-title class_\">Observable</span>&#x3C;any> {\n <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-title function_\">get</span>(url);\n }\n}\n</code></pre>\n<ol start=\"3\">\n<li>템플릿에서 Pipe 사용하기</li>\n</ol>\n<pre><code class=\"hljs language-js\">&#x3C;div>\n@<span class=\"hljs-keyword\">if</span>(apiUrl | fetchData | <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">as</span> data) {\n <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">pre</span>></span>{ data | json }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">pre</span>></span></span>\n}\n&#x3C;/div>\n<span class=\"hljs-comment\">//apiUrl: string = 'https://api.example.com/data'</span>\n</code></pre>\n<h2>파이프 성능 최적화</h2>\n<p>기본적으로 Angular 파이프는 순수입니다. 이는 입력 참조가 변경될 때만 다시 실행됨을 의미합니다. 성능 상의 이유로 가능한 곳에서 이 동작을 활용하는 것이 중요합니다. 그러나 입력 데이터가 가변적인 경우, @Pipe 데코레이터의 pure 속성을 false로 설정하여 순수하지 않은 파이프를 생성할 수 있습니다.</p>\n<p>순수하지 않은 파이프의 예시</p>\n<ol>\n<li>파이프 생성하기</li>\n</ol>\n<pre><code class=\"hljs language-js\">ng generate pipe impure\n</code></pre>\n<ol start=\"2\">\n<li>파이프 로직 구현하기</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Pipe</span>, <span class=\"hljs-title class_\">PipeTransform</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n@<span class=\"hljs-title class_\">Pipe</span>({\n <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'impure'</span>,\n <span class=\"hljs-attr\">pure</span>: <span class=\"hljs-literal\">false</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ImpurePipe</span> implements <span class=\"hljs-title class_\">PipeTransform</span> {\n<span class=\"hljs-title function_\">transform</span>(<span class=\"hljs-attr\">value</span>: any, …<span class=\"hljs-attr\">args</span>: any[]): any {\n <span class=\"hljs-comment\">// 사용자 정의 변환 로직</span>\n <span class=\"hljs-keyword\">return</span> value;\n }\n}\n</code></pre>\n<h2>커스텀 파이프에 대한 최상의 방법</h2>\n<p>가능한 경우 Pipes Pure를 유지하여 Angular의 변경 감지 최적화를 활용하세요.\n단일 책임: 각 파이프는 단일 책임을 가져야 합니다. 변환 작업이 복잡한 경우 여러 파이프로 분리하는 것을 고려해보세요.\n성능 고려사항: 특히 복잡한 변환 작업이나 대량 데이터세트의 경우 성능에 신경을 써야 합니다. 필요한 경우 캐싱 전략을 사용하세요.\n오류 처리: 특히 외부 서비스와 상호작용이나 복잡한 작업을 수행하는 파이프의 경우 오류 처리를 구현하세요.\n재사용성: 다른 컴포넌트 및 모듈에서 재사용할 수 있는 파이프를 만들어 중복을 피하세요.</p>\n<p>Angular의 사용자 정의 파이프는 템플릿에서 데이터를 직접 변환하고 형식화하는 강력한 방법을 제공합니다. 이는 간단한 텍스트 변환부터 복잡한 데이터 조작 및 비동기 작업까지 다양할 수 있습니다. 사용자 정의 파이프를 효과적으로 이해하고 구현함으로써 Angular 애플리케이션의 가독성과 유지 관리성을 향상시킬 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}