{"pageProps":{"post":{"title":"adamant-api v240 출시 v200 이후 달라진 점은","description":"","date":"2024-06-22 01:56","slug":"2024-06-22-adamant-apiv240isoutWhatschangedsincev200","content":"\n\nadamant-api는 패키지의 가장 큰 업데이트 이후 중요한 개선 사항과 수정 사항을 거쳐 상당한 향상을 이루었습니다. 전체적인 개발자 경험과 버그 수정을 목표로 한 패키지의 최대 업데이트 이후 주요 변경 사항을 살펴봅시다.\n\n![image](/assets/img/2024-06-22-adamant-apiv240isoutWhatschangedsincev200_0.png)\n\n# 버그 수정\n\n- voteForDelegate() 유효성 검사 (v2.4.0): API.voteForDelegate() 메서드 내에서 공개 키 및 대표자 이름의 유효성 검사를 수정하였으며, 주소가 실제 대표자인지 체크하여 ADM 토큰의 낭비를 방지하였습니다.\n- 노드 체크 버그 (v2.3.1): 헬스 체크 프로세스 중에 랜덤 노드가 한 개만 체크되던 버그를 해결하였습니다.\n- 전역 설치 (v2.3.0): adamant-api에 의존하는 패키지의 전역 설치 문제를 해결하였습니다.\n\n<div class=\"content-ad\"></div>\n\n# DX 개선 사항\n\n- 로그 메시지 (v2.3.1): 보건 점검에 대한 로그 메시지를 개선하여 문제를 진단하고 시스템 상태를 모니터링하기 쉽게 했습니다.\n- 트랜잭션 쿼리 메서드 (v2.3.0): 트랜잭션 쿼리 언어를 사용하는 엔드포인트에 대해 중첩 객체를 사용하도록 변경하였습니다:\n\n```js\nconst blocks = await api.getTransactions({\n  fromHeight: 7585271,\n  and: {\n    toHeight: 7586280, // 'and:toHeight' 대신 7586280 사용\n  },\n  or: {\n    senderId: 'U18132012621449491414', // 'or:senderId' 대신 '...' 사용\n  },\n});\n```\n\n- WebSocket 초기화 (v2.1.0): api.initSocket() 메서드는 이제 WebSocketClient의 인스턴스를 수락합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst socket = new WebSocketClient({ /* ... */ });\napi.initSocket(socket);\n```\n\n- 메시지 인코딩 및 디코딩 (v2.1.0): encodeMessage() 및 decodeMessage() 함수가 퍼블릭 키를 Uint8Array 또는 Buffer로 받고, 패스프레이스 대신 키 쌍을 직접 전달할 수 있도록 업그레이드되었습니다:\n\n```js\nimport {encodeMessage, createKeypairFromPassphrase} from 'adamant-api';\nconst {publicKey} = createKeypairFromPassphrase('...');\nconst message = encodeMessage(,, publicKey);\n```\n\n```js\nimport {decodeMessage, createKeypairFromPassphrase} from 'adamant-api';\nconst keyPair = createKeypairFromPassphrase('...');\nconst message = decodeMessage(,, keyPair);\n```\n\n<div class=\"content-ad\"></div>\n\n# 유틸리티 함수\n\n- Validator 유틸리티(v2.2.0): API 내에서 여러 엔티티의 유효성을 향상시키기 위해 다양한 validator 유틸리티 함수를 내보냈습니다:\n\n```js\nfunction isPassphrase(passphrase: unknown): passphrase is string;\nfunction isAdmAddress(address: unknown): address is AdamantAddress;\nfunction isAdmPublicKey(publicKey: unknown): publicKey is string;\nfunction isAdmVoteForPublicKey(publicKey: unknown): publicKey is string;\nfunction isAdmVoteForAddress(address: unknown): boolean;\nfunction isAdmVoteForDelegateName(delegateName: unknown): delegateName is string;\nfunction validateMessage(message: string, messageType: MessageType = MessageType.Chat): {success: false; error: string} | {success: true};\nfunction isDelegateName(name: unknown): name is string;\nfunction admToSats(amount: number): number;\n```\n\n- 거래 쿼리 객체 변환(v2.3.0): transformTransactionQuery 함수를 소개하여 거래 쿼리를 간결화하고 구조화하여 더 읽기 쉽고 관리하기 쉽도록 만들었습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n상수 transformed를 transformTransactionQuery 함수로 변환했습니다. {\n  fromHeight: 7585271,\n  and: {\n    toHeight: 7586280,\n  },\n  or: {\n    senderId: 'U18132012621449491414',\n  },\n});\nconsole.log(transformed); // {'and:toHeight': 7586280, 'or:senderId': /* ... */}\n```\n\n# 타입 정의\n\n- 많은 메소드 내에서 트랜잭션 id에 대한 유형 정의가 수정되었으며, ChatTransactionData 인터페이스 내의 amount 속성 및 주 클래스의 options 내의 logLevel에 대한 유형 정의가 수정되었습니다.\n\nGitHub의 릴리스 노트를 확인하십시오: [여기](https://github.com/Adamant-im/adamant-api-jsclient/blob/master/CHANGELOG.md)\n","ogImage":{"url":"/assets/img/2024-06-22-adamant-apiv240isoutWhatschangedsincev200_0.png"},"coverImage":"/assets/img/2024-06-22-adamant-apiv240isoutWhatschangedsincev200_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>adamant-api는 패키지의 가장 큰 업데이트 이후 중요한 개선 사항과 수정 사항을 거쳐 상당한 향상을 이루었습니다. 전체적인 개발자 경험과 버그 수정을 목표로 한 패키지의 최대 업데이트 이후 주요 변경 사항을 살펴봅시다.</p>\n<p><img src=\"/assets/img/2024-06-22-adamant-apiv240isoutWhatschangedsincev200_0.png\" alt=\"image\"></p>\n<h1>버그 수정</h1>\n<ul>\n<li>voteForDelegate() 유효성 검사 (v2.4.0): API.voteForDelegate() 메서드 내에서 공개 키 및 대표자 이름의 유효성 검사를 수정하였으며, 주소가 실제 대표자인지 체크하여 ADM 토큰의 낭비를 방지하였습니다.</li>\n<li>노드 체크 버그 (v2.3.1): 헬스 체크 프로세스 중에 랜덤 노드가 한 개만 체크되던 버그를 해결하였습니다.</li>\n<li>전역 설치 (v2.3.0): adamant-api에 의존하는 패키지의 전역 설치 문제를 해결하였습니다.</li>\n</ul>\n<h1>DX 개선 사항</h1>\n<ul>\n<li>로그 메시지 (v2.3.1): 보건 점검에 대한 로그 메시지를 개선하여 문제를 진단하고 시스템 상태를 모니터링하기 쉽게 했습니다.</li>\n<li>트랜잭션 쿼리 메서드 (v2.3.0): 트랜잭션 쿼리 언어를 사용하는 엔드포인트에 대해 중첩 객체를 사용하도록 변경하였습니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> blocks = <span class=\"hljs-keyword\">await</span> api.<span class=\"hljs-title function_\">getTransactions</span>({\n  <span class=\"hljs-attr\">fromHeight</span>: <span class=\"hljs-number\">7585271</span>,\n  <span class=\"hljs-attr\">and</span>: {\n    <span class=\"hljs-attr\">toHeight</span>: <span class=\"hljs-number\">7586280</span>, <span class=\"hljs-comment\">// 'and:toHeight' 대신 7586280 사용</span>\n  },\n  <span class=\"hljs-attr\">or</span>: {\n    <span class=\"hljs-attr\">senderId</span>: <span class=\"hljs-string\">'U18132012621449491414'</span>, <span class=\"hljs-comment\">// 'or:senderId' 대신 '...' 사용</span>\n  },\n});\n</code></pre>\n<ul>\n<li>WebSocket 초기화 (v2.1.0): api.initSocket() 메서드는 이제 WebSocketClient의 인스턴스를 수락합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> socket = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebSocketClient</span>({ <span class=\"hljs-comment\">/* ... */</span> });\napi.<span class=\"hljs-title function_\">initSocket</span>(socket);\n</code></pre>\n<ul>\n<li>메시지 인코딩 및 디코딩 (v2.1.0): encodeMessage() 및 decodeMessage() 함수가 퍼블릭 키를 Uint8Array 또는 Buffer로 받고, 패스프레이스 대신 키 쌍을 직접 전달할 수 있도록 업그레이드되었습니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {encodeMessage, createKeypairFromPassphrase} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'adamant-api'</span>;\n<span class=\"hljs-keyword\">const</span> {publicKey} = <span class=\"hljs-title function_\">createKeypairFromPassphrase</span>(<span class=\"hljs-string\">'...'</span>);\n<span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-title function_\">encodeMessage</span>(,, publicKey);\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {decodeMessage, createKeypairFromPassphrase} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'adamant-api'</span>;\n<span class=\"hljs-keyword\">const</span> keyPair = <span class=\"hljs-title function_\">createKeypairFromPassphrase</span>(<span class=\"hljs-string\">'...'</span>);\n<span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-title function_\">decodeMessage</span>(,, keyPair);\n</code></pre>\n<h1>유틸리티 함수</h1>\n<ul>\n<li>Validator 유틸리티(v2.2.0): API 내에서 여러 엔티티의 유효성을 향상시키기 위해 다양한 validator 유틸리티 함수를 내보냈습니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isPassphrase</span>(<span class=\"hljs-params\">passphrase: unknown</span>): passphrase is string;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isAdmAddress</span>(<span class=\"hljs-params\">address: unknown</span>): address is <span class=\"hljs-title class_\">AdamantAddress</span>;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isAdmPublicKey</span>(<span class=\"hljs-params\">publicKey: unknown</span>): publicKey is string;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isAdmVoteForPublicKey</span>(<span class=\"hljs-params\">publicKey: unknown</span>): publicKey is string;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isAdmVoteForAddress</span>(<span class=\"hljs-params\">address: unknown</span>): boolean;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isAdmVoteForDelegateName</span>(<span class=\"hljs-params\">delegateName: unknown</span>): delegateName is string;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateMessage</span>(<span class=\"hljs-params\">message: string, messageType: MessageType = MessageType.Chat</span>): {<span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>; <span class=\"hljs-attr\">error</span>: string} | {<span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isDelegateName</span>(<span class=\"hljs-params\">name: unknown</span>): name is string;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">admToSats</span>(<span class=\"hljs-params\">amount: number</span>): number;\n</code></pre>\n<ul>\n<li>거래 쿼리 객체 변환(v2.3.0): transformTransactionQuery 함수를 소개하여 거래 쿼리를 간결화하고 구조화하여 더 읽기 쉽고 관리하기 쉽도록 만들었습니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\">상수 transformed를 transformTransactionQuery 함수로 변환했습니다. {\n  <span class=\"hljs-attr\">fromHeight</span>: <span class=\"hljs-number\">7585271</span>,\n  <span class=\"hljs-attr\">and</span>: {\n    <span class=\"hljs-attr\">toHeight</span>: <span class=\"hljs-number\">7586280</span>,\n  },\n  <span class=\"hljs-attr\">or</span>: {\n    <span class=\"hljs-attr\">senderId</span>: <span class=\"hljs-string\">'U18132012621449491414'</span>,\n  },\n});\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(transformed); <span class=\"hljs-comment\">// {'and:toHeight': 7586280, 'or:senderId': /* ... */}</span>\n</code></pre>\n<h1>타입 정의</h1>\n<ul>\n<li>많은 메소드 내에서 트랜잭션 id에 대한 유형 정의가 수정되었으며, ChatTransactionData 인터페이스 내의 amount 속성 및 주 클래스의 options 내의 logLevel에 대한 유형 정의가 수정되었습니다.</li>\n</ul>\n<p>GitHub의 릴리스 노트를 확인하십시오: <a href=\"https://github.com/Adamant-im/adamant-api-jsclient/blob/master/CHANGELOG.md\" rel=\"nofollow\" target=\"_blank\">여기</a></p>\n</body>\n</html>\n"},"__N_SSG":true}