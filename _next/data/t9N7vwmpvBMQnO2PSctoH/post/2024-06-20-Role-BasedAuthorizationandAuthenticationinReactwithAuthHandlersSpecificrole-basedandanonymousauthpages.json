{"pageProps":{"post":{"title":"리액트에서 권한 기반 인증 및 권한 부여 - 인증 핸들러로 특정 권한 및 익명 인증 페이지","description":"","date":"2024-06-20 05:11","slug":"2024-06-20-Role-BasedAuthorizationandAuthenticationinReactwithAuthHandlersSpecificrole-basedandanonymousauthpages","content":"\n\nRole-based 인가 및 인증은 React 애플리케이션을 안전하게 유지하기 위해 사용자 역할에 따라 애플리케이션의 다른 부분에 대한 액세스를 제어하는 데 필수적입니다. 인증 핸들러를 사용하여 인증 및 권한 부여 논리를 관리할 것입니다.\n\n.Net Core와 유사한 구현은 다음에서 확인할 수 있습니다: https://medium.com/@siva.veeravarapu/role-based-authorization-in-net-core-a-beginners-guide-with-code-snippets-b952e5b952f7\n\nDotNet-FullStack-Dev와 함께 지속적인 학습과 탐험의 여정을 떠나보세요. 더 많은 정보를 알아보려면 저희 블로그 https://dotnet-fullstack-dev.blogspot.com 를 방문해 주세요.\n\n## 단계 1: 인증 컨텍스트 설정하기\n\n<div class=\"content-ad\"></div>\n\n사용자 인증 상태를 관리하고 구성 요소에 인증 방법을 제공하는 Authentication Context를 만들어보세요.\n\nAuthContext.js:\n\n```js\nimport React, { createContext, useContext, useState } from 'react';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  const login = (userData) => {\n    // 여기에 로그인 로직을 구현합니다 (예: API 호출)\n    setUser(userData);\n  };\n\n  const logout = () => {\n    // 여기에 로그아웃 로직을 구현합니다\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n```\n\n## 단계 2: 인증 구성 요소 구현\n\n<div class=\"content-ad\"></div>\n\n로그인, 로그아웃 및 보호된 경로용 구성 요소를 작성하십시오.\n\nLogin.js:\n\n```js\nimport React, { useState } from 'react';\nimport { useAuth } from './AuthContext';\n\nconst Login = () => {\n  const { login } = useAuth();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleLogin = () => {\n    // 로그인 로직 구현 (예: AuthContext에서 로그인 메서드 호출)\n    login({ username, password });\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} />\n      <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n      <button onClick={handleLogin}>로그인</button>\n    </div>\n  );\n};\n\nexport default Login;\n```\n\n<div class=\"content-ad\"></div>\n\n```js\nimport React from 'react';\nimport { useAuth } from './AuthContext';\n\nconst Logout = () => {\n  const { logout } = useAuth();\n\n  const handleLogout = () => {\n    // 로그아웃 로직 구현 (예: AuthContext에서 logout 메서드 호출)\n    logout();\n  };\n\n  return (\n    <div>\n      <button onClick={handleLogout}>로그아웃</button>\n    </div>\n  );\n};\n\nexport default Logout;\n```\n\nProtectedRoute.js:\n\n```js\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useAuth } from './AuthContext';\n\nconst ProtectedRoute = ({ component: Component, roles, ...rest }) => {\n  const { user } = useAuth();\n\n  return (\n    <Route {...rest} render={(props) => {\n      if (!user) {\n        return <Redirect to='/login' />;\n      }\n\n      if (roles && !roles.includes(user.role)) {\n        return <Redirect to='/' />;\n      }\n\n      return <Component {...props} />;\n    } />\n  );\n};\n\nexport default ProtectedRoute;\n```\n\n## 단계 3: 인증 컴포넌트 사용하기\n\n\n<div class=\"content-ad\"></div>\n\n애플리케이션 루트에서 인증 구성요소를 사용하세요.\n\nApp.js:\n\n```js\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { AuthProvider } from './AuthContext';\nimport Login from './Login';\nimport Logout from './Logout';\nimport ProtectedRoute from './ProtectedRoute';\nimport Home from './Home';\nimport AdminDashboard from './AdminDashboard';\n\nconst App = () => {\n  return (\n    <AuthProvider>\n      <Router>\n        <Switch>\n          <Route path='/login' component={Login} />\n          <Route path='/logout' component={Logout} />\n          <ProtectedRoute path='/admin' component={AdminDashboard} roles={['admin']} />\n          <ProtectedRoute path='/' component={Home} />\n        </Switch>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n```\n\n리액트 애플리케이션에서 역할 기반의 접근 제어를 갖는 About 및 Contact 페이지를 추가하는 방법에 대해, 추가 구성요소와 라우트로 확장할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## About 및 Contact 컴포넌트 구현\n\nAbout.js:\n\n```js\nimport React from 'react';\n\nconst About = () => {\n  return (\n    <div>\n      <h1>About Us</h1>\n      <p>Welcome to our website!</p>\n    </div>\n  );\n};\n\nexport default About;\n```\n\n<div class=\"content-ad\"></div>\n\n```js\nimport React from 'react';\n\nconst Contact = () => {\n  return (\n    <div>\n      <h1>Contact Us</h1>\n      <p>You can reach us via email or phone.</p>\n    </div>\n  );\n};\n\nexport default Contact;\n```\n\n## Update ProtectedRoute Component\n\nProtectedRoute.js:\n\n```js\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useAuth } from './AuthContext';\n\nconst ProtectedRoute = ({ component: Component, roles, ...rest }) => {\n  const { user } = useAuth();\n\n  return (\n    <Route {...rest} render={(props) => {\n      if (!user) {\n        return <Redirect to='/login' />;\n      }\n\n      if (roles && !roles.includes(user.role)) {\n        return <Redirect to='/' />;\n      }\n\n      return <Component {...props} />;\n    }} />\n  );\n};\n\nexport default ProtectedRoute;\n```\n\n<div class=\"content-ad\"></div>\n\n## App 컴포넌트 및 라우팅 업데이트\n\nApp.js:\n\n```js\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { AuthProvider } from './AuthContext';\nimport Login from './Login';\nimport Logout from './Logout';\nimport ProtectedRoute from './ProtectedRoute';\nimport Home from './Home';\nimport AdminDashboard from './AdminDashboard';\nimport About from './About';\nimport Contact from './Contact';\n\nconst App = () => {\n  return (\n    <AuthProvider>\n      <Router>\n        <Switch>\n          <Route path='/login' component={Login} />\n          <Route path='/logout' component={Logout} />\n          <ProtectedRoute path='/admin' component={AdminDashboard} roles={['admin']} />\n          <ProtectedRoute path='/about' component={About} roles={['user', 'admin']} />\n          <Route path='/contact' component={Contact} />\n          <ProtectedRoute path='/' component={Home} />\n        </Switch>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n```\n\n## 결론\n\n<div class=\"content-ad\"></div>\n\n이 가이드에 따라 React 함수형 컴포넌트에서 인증 핸들러를 사용하여 역할 기반 인가 및 인증을 구현할 수 있습니다. 이 방법은 React 애플리케이션을 안전하게 보호하기 위한 유연하고 확장 가능한 솔루션을 제공합니다. 다양한 인증 및 권한 부여 전략을 실험하여 애플리케이션의 특정 요구 사항을 충족시킬 수 있습니다.\n\n이 방법을 통해 'About' 페이지에 대한 역할 기반의 액세스 제어와 'Contact' 페이지에 대한 무제한 액세스를 보장할 수 있습니다. 애플리케이션의 요구 사항에 따라 역할과 권한을 조정해주세요.","ogImage":{"url":"/assets/img/2024-06-20-Role-BasedAuthorizationandAuthenticationinReactwithAuthHandlersSpecificrole-basedandanonymousauthpages_0.png"},"coverImage":"/assets/img/2024-06-20-Role-BasedAuthorizationandAuthenticationinReactwithAuthHandlersSpecificrole-basedandanonymousauthpages_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Role-based 인가 및 인증은 React 애플리케이션을 안전하게 유지하기 위해 사용자 역할에 따라 애플리케이션의 다른 부분에 대한 액세스를 제어하는 데 필수적입니다. 인증 핸들러를 사용하여 인증 및 권한 부여 논리를 관리할 것입니다.</p>\n<p>.Net Core와 유사한 구현은 다음에서 확인할 수 있습니다: <a href=\"https://medium.com/@siva.veeravarapu/role-based-authorization-in-net-core-a-beginners-guide-with-code-snippets-b952e5b952f7\" rel=\"nofollow\" target=\"_blank\">https://medium.com/@siva.veeravarapu/role-based-authorization-in-net-core-a-beginners-guide-with-code-snippets-b952e5b952f7</a></p>\n<p>DotNet-FullStack-Dev와 함께 지속적인 학습과 탐험의 여정을 떠나보세요. 더 많은 정보를 알아보려면 저희 블로그 <a href=\"https://dotnet-fullstack-dev.blogspot.com\" rel=\"nofollow\" target=\"_blank\">https://dotnet-fullstack-dev.blogspot.com</a> 를 방문해 주세요.</p>\n<h2>단계 1: 인증 컨텍스트 설정하기</h2>\n<p>사용자 인증 상태를 관리하고 구성 요소에 인증 방법을 제공하는 Authentication Context를 만들어보세요.</p>\n<p>AuthContext.js:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { createContext, useContext, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">AuthContext</span> = <span class=\"hljs-title function_\">createContext</span>();\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">AuthProvider</span> = (<span class=\"hljs-params\">{ children }</span>) => {\n  <span class=\"hljs-keyword\">const</span> [user, setUser] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">login</span> = (<span class=\"hljs-params\">userData</span>) => {\n    <span class=\"hljs-comment\">// 여기에 로그인 로직을 구현합니다 (예: API 호출)</span>\n    <span class=\"hljs-title function_\">setUser</span>(userData);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">logout</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-comment\">// 여기에 로그아웃 로직을 구현합니다</span>\n    <span class=\"hljs-title function_\">setUser</span>(<span class=\"hljs-literal\">null</span>);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">AuthContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">user</span>, <span class=\"hljs-attr\">login</span>, <span class=\"hljs-attr\">logout</span> }}></span>\n      {children}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">AuthContext.Provider</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useAuth</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">AuthContext</span>);\n</code></pre>\n<h2>단계 2: 인증 구성 요소 구현</h2>\n<p>로그인, 로그아웃 및 보호된 경로용 구성 요소를 작성하십시오.</p>\n<p>Login.js:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { useAuth } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./AuthContext'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Login</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> { login } = <span class=\"hljs-title function_\">useAuth</span>();\n  <span class=\"hljs-keyword\">const</span> [username, setUsername] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n  <span class=\"hljs-keyword\">const</span> [password, setPassword] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleLogin</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-comment\">// 로그인 로직 구현 (예: AuthContext에서 로그인 메서드 호출)</span>\n    <span class=\"hljs-title function_\">login</span>({ username, password });\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{username}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setUsername(e.target.value)} />\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{password}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setPassword(e.target.value)} />\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleLogin}</span>></span>로그인<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Login</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { useAuth } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./AuthContext'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Logout</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> { logout } = <span class=\"hljs-title function_\">useAuth</span>();\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleLogout</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-comment\">// 로그아웃 로직 구현 (예: AuthContext에서 logout 메서드 호출)</span>\n    <span class=\"hljs-title function_\">logout</span>();\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleLogout}</span>></span>로그아웃<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Logout</span>;\n</code></pre>\n<p>ProtectedRoute.js:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Route</span>, <span class=\"hljs-title class_\">Redirect</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n<span class=\"hljs-keyword\">import</span> { useAuth } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./AuthContext'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ProtectedRoute</span> = (<span class=\"hljs-params\">{ component: Component, roles, ...rest }</span>) => {\n  <span class=\"hljs-keyword\">const</span> { user } = <span class=\"hljs-title function_\">useAuth</span>();\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> {<span class=\"hljs-attr\">...rest</span>} <span class=\"hljs-attr\">render</span>=<span class=\"hljs-string\">{(props)</span> =></span> {\n      if (!user) {\n        return <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Redirect</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">'/login'</span> /></span>;\n      }\n\n      if (roles &#x26;&#x26; !roles.includes(user.role)) {\n        return <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Redirect</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">'/'</span> /></span>;\n      }\n\n      return <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Component</span> {<span class=\"hljs-attr\">...props</span>} /></span>;\n    } /></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ProtectedRoute</span>;\n</code></pre>\n<h2>단계 3: 인증 컴포넌트 사용하기</h2>\n<p>애플리케이션 루트에서 인증 구성요소를 사용하세요.</p>\n<p>App.js:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserRouter</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Router</span>, <span class=\"hljs-title class_\">Route</span>, <span class=\"hljs-title class_\">Switch</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthProvider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./AuthContext'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Login</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Login'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Logout</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Logout'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProtectedRoute</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./ProtectedRoute'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Home</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Home'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">AdminDashboard</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./AdminDashboard'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">AuthProvider</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Router</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Switch</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">'/login'</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{Login}</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">'/logout'</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{Logout}</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProtectedRoute</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">'/admin'</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{AdminDashboard}</span> <span class=\"hljs-attr\">roles</span>=<span class=\"hljs-string\">{[</span>'<span class=\"hljs-attr\">admin</span>']} /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProtectedRoute</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">'/'</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{Home}</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Switch</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Router</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">AuthProvider</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>리액트 애플리케이션에서 역할 기반의 접근 제어를 갖는 About 및 Contact 페이지를 추가하는 방법에 대해, 추가 구성요소와 라우트로 확장할 것입니다.</p>\n<h2>About 및 Contact 컴포넌트 구현</h2>\n<p>About.js:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">About</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>About Us<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Welcome to our website!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">About</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Contact</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Contact Us<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>You can reach us via email or phone.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Contact</span>;\n</code></pre>\n<h2>Update ProtectedRoute Component</h2>\n<p>ProtectedRoute.js:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Route</span>, <span class=\"hljs-title class_\">Redirect</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n<span class=\"hljs-keyword\">import</span> { useAuth } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./AuthContext'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ProtectedRoute</span> = (<span class=\"hljs-params\">{ component: Component, roles, ...rest }</span>) => {\n  <span class=\"hljs-keyword\">const</span> { user } = <span class=\"hljs-title function_\">useAuth</span>();\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> {<span class=\"hljs-attr\">...rest</span>} <span class=\"hljs-attr\">render</span>=<span class=\"hljs-string\">{(props)</span> =></span> {\n      if (!user) {\n        return <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Redirect</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">'/login'</span> /></span>;\n      }\n\n      if (roles &#x26;&#x26; !roles.includes(user.role)) {\n        return <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Redirect</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">'/'</span> /></span>;\n      }\n\n      return <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Component</span> {<span class=\"hljs-attr\">...props</span>} /></span>;\n    }} /></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ProtectedRoute</span>;\n</code></pre>\n<h2>App 컴포넌트 및 라우팅 업데이트</h2>\n<p>App.js:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserRouter</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Router</span>, <span class=\"hljs-title class_\">Route</span>, <span class=\"hljs-title class_\">Switch</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthProvider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./AuthContext'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Login</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Login'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Logout</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Logout'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProtectedRoute</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./ProtectedRoute'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Home</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Home'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">AdminDashboard</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./AdminDashboard'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">About</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./About'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Contact</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Contact'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">AuthProvider</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Router</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Switch</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">'/login'</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{Login}</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">'/logout'</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{Logout}</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProtectedRoute</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">'/admin'</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{AdminDashboard}</span> <span class=\"hljs-attr\">roles</span>=<span class=\"hljs-string\">{[</span>'<span class=\"hljs-attr\">admin</span>']} /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProtectedRoute</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">'/about'</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{About}</span> <span class=\"hljs-attr\">roles</span>=<span class=\"hljs-string\">{[</span>'<span class=\"hljs-attr\">user</span>', '<span class=\"hljs-attr\">admin</span>']} /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">'/contact'</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{Contact}</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProtectedRoute</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">'/'</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{Home}</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Switch</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Router</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">AuthProvider</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<h2>결론</h2>\n<p>이 가이드에 따라 React 함수형 컴포넌트에서 인증 핸들러를 사용하여 역할 기반 인가 및 인증을 구현할 수 있습니다. 이 방법은 React 애플리케이션을 안전하게 보호하기 위한 유연하고 확장 가능한 솔루션을 제공합니다. 다양한 인증 및 권한 부여 전략을 실험하여 애플리케이션의 특정 요구 사항을 충족시킬 수 있습니다.</p>\n<p>이 방법을 통해 'About' 페이지에 대한 역할 기반의 액세스 제어와 'Contact' 페이지에 대한 무제한 액세스를 보장할 수 있습니다. 애플리케이션의 요구 사항에 따라 역할과 권한을 조정해주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}