{"pageProps":{"post":{"title":"Node Boost 클러스터, 스레드","description":"","date":"2024-06-20 07:33","slug":"2024-06-20-NodeBoostClustersThreads","content":"\n\n<img src=\"/assets/img/2024-06-20-NodeBoostClustersThreads_0.png\" />\n\nNode.js 어플리케이션 성능 최적화 전략\n\n이 글에서는 이러한 상황을 효과적으로 관리하는 다양한 전략에 대해 살펴볼 것입니다.\n\n# 이벤트 루프 도전 이해하기\n\n<div class=\"content-ad\"></div>\n\nNode.js에서 이벤트 루프는 비동기 작업을 처리하는 핵심 개념입니다. 그러나 이벤트 루프 내에 너무 많은 작업이 존재하면 성능 병목 현상이 발생할 수 있습니다. 이 문제는 특히 많은 작업을 효율적으로 처리해야 하는 고성능 응용 프로그램에서 특히 중요해집니다.\n\n# 전략 1: Node.js 클러스터 모듈 활용\n\n성능 문제를 처리하는 효과적인 방법 중 하나는 Node.js의 클러스터 모듈을 활용하는 것입니다. 이 모듈을 사용하면 여러 인스턴스의 Node.js 애플리케이션을 각각 독립적인 이벤트 루프를 가지고 동일한 서버 포트를 공유하여 실행할 수 있습니다. 작동 방식은 다음과 같습니다:\n\n- 여러 Node 인스턴스: 클러스터 모듈을 통해 여러 Node.js 인스턴스를 생성할 수 있습니다. 각 인스턴스는 별도의 프로세스로 실행되어 응용 프로그램이 여러 CPU 코어를 효과적으로 활용할 수 있게 합니다.\n- 부하 분산: Node.js 클러스터 모듈은 여러 인스턴스 사이에 들어오는 요청을 분산하여 부하를 균형 있게 유지하고 단일 인스턴스에 병목 현상이 발생하지 않도록 합니다.\n- 성능 향상: 요청을 처리하는 여러 인스턴스가 존재하므로 애플리케이션 전체의 성능이 향상되며, 작업이 서로 다른 인스턴스 간에 동시에 처리되어 효율적으로 이루어집니다.\n\n<div class=\"content-ad\"></div>\n\n클러스터 모듈은 노드.js를 다중 스레딩으로 만들지는 않지만 병렬로 동작하는 여러 이벤트 루프를 생성하여 다중 스레딩을 시뮬레이트합니다.\n\n개요:\n노드.js의 클러스터 모듈은 애플리케이션이 CPU의 별도 코어에서 실행되는 노드.js 프로세스의 여러 인스턴스를 생성할 수 있도록 합니다. 이를 통해 부하를 분산시키고 무거운 작업에 의해 단일 인스턴스가 과부하되는 것을 방지할 수 있습니다.\n\n구현:\n\n- 설정:\n\n<div class=\"content-ad\"></div>\n\n- 클러스터 모듈을 사용하여 Node.js 애플리케이션을 설정하세요.\n- 클러스터 모듈을 사용하여 기본 프로세스를 여러 워커 프로세스로 포크하세요.\n\n- 장점:\n  \n- 각 워커 프로세스는 독립적인 이벤트 루프를 실행합니다.\n- 부하가 여러 CPU 코어에 분산됩니다.\n- 스케일링 및 장애 허용성이 향상되며, 한 워커 프로세스의 실패가 다른 프로세스에 영향을 미치지 않습니다.\n\n예시:\n\n<div class=\"content-ad\"></div>\n\n```js\nconst cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\nif (cluster.isMaster) {\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`Worker ${worker.process.pid} died`);\n  });\n} else {\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('Hello World\\n');\n  }).listen(8000);\n}\n```\n\n# 전략 2: 워커 스레드 활용\n\n성능을 향상시키는 또 다른 방법은 워커 스레드를 사용하는 것입니다. 워커 스레드는 CPU 집약적인 작업을 실행하는 데 유용합니다. 다음은 워커 스레드를 통합하는 방법입니다:\n\n- 스레드 풀: Node.js에는 libuv 라이브러리를 통해 기본 스레드 풀이 포함되어 있습니다. 워커 스레드는 이 스레드 풀에 무거운 계산을 할당하여 주 이벤트 루프를 다른 작업 처리에 확보할 수 있습니다.\n- 병행성: 워커 스레드를 이용하면 작업이 병렬로 실행되어 응용 프로그램의 처리량과 응답성을 크게 향상할 수 있습니다.\n- 구현: 워커 스레드를 설정하는 것은 함수를 독립적으로 실행할 수 있는 스레드 풀을 만드는 과정을 포함합니다. 이 설정은 데이터 처리, 이미지 처리 및 복잡한 계산과 같은 작업에 이상적입니다.\n\n\n<div class=\"content-ad\"></div>\n\n개요:\n워커 스레드는 여러 스레드에서 JavaScript를 병렬로 실행하여 중요한 계산을 메인 이벤트 루프에서 벗어나 실행하는 방법을 제공합니다.\n\n구현:\n\n- 설정:\n\n- worker_threads 모듈을 사용하여 워커 스레드를 생성합니다.\n- CPU 집약적인 작업을 이 워커 스레드에 위임합니다.\n\n<div class=\"content-ad\"></div>\n\n- 혜택:\n\n- 주요 스레드가 차단되지 않도록 무거운 계산을 완화합니다.\n- 하나의 Node.js 프로세스 내에서 다중 스레딩 기능을 활용합니다.\n- 애플리케이션의 반응성을 향상시킵니다.\n\n예시:\n\n```js\nconst { Worker, isMainThread, parentPort } = require('worker_threads');\nif (isMainThread) {\n  const worker = new Worker(__filename);\n  worker.on('message', message => {\n    console.log(`Received message from worker: ${message}`);\n  });\n  worker.postMessage('Start work');\n} else {\n  parentPort.on('message', message => {\n    // 무거운 계산 수행\n    let result = heavyComputation();\n    parentPort.postMessage(result);\n  });\n  function heavyComputation() {\n    // 무거운 작업 시뮬레이션\n    let sum = 0;\n    for (let i = 0; i < 1e9; i++) {\n      sum += i;\n    }\n    return sum;\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 최적의 방법과 권장 사항\n\n클러스터 모듈과 워커 스레드는 모두 상당한 성능 향상을 제공하지만, 적절한 사용 시나리오를 고려하는 것이 중요합니다:\n\n- 먼저 클러스터 모듈을 사용해 보세요: 대부분의 애플리케이션에 대해, 클러스터 모듈을 사용하는 것이 좋습니다. 이는 여러 CPU 코어를 효율적으로 활용하여 애플리케이션 코드를 크게 수정할 필요 없이 작동합니다.\n- CPU 집약적인 작업에 워커 스레드 활용: 애플리케이션이 무거운 계산 작업을 포함하는 경우, 워커 스레드를 통합하는 것을 고려해 보세요. 이 방법은 실험적이지만 특정 사용 사례에 대해 상당한 성능 향상을 제공할 수 있습니다.\n- 모니터링과 테스트: 항상 다양한 부하와 시나리오에서 애플리케이션의 성능을 모니터링하세요. 성능 테스트 도구를 사용하여 병목 현상을 식별하고 이러한 최적화의 영향을 평가하세요.\n\n# 성능 최적화를 위한 권장 사항\n\n<div class=\"content-ad\"></div>\n\n- 클러스터 모듈부터 시작해 보세요:\n\n- 클러스터 모듈은 성능을 향상시키는 것에 검증된 신뢰할 수 있는 방법입니다.\n- 개선된 부하 처리와 오류 허용이 필요한 애플리케이션에 이상적입니다.\n\n- 워커 스레드로 실험해 보세요:\n\n- 특정한 무거운 계산 작업이 있는 애플리케이션에 대해 워커 스레드를 사용하면 매우 효과적입니다.\n- 이 접근 방식은 실험적이지만 특정 사용 사례에 대해 상당한 성능 향상을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n- 전략 통합:\n\n- 일부 시나리오에서는 클러스터 모듈과 워커 스레드를 결합하여 양쪽의 장점을 최대로 활용할 수 있습니다.\n- 이 하이브리드 방식은 시스템 리소스의 활용을 극대화할 수 있습니다.\n\n# 결론\n\n성능을 위해 Node.js 애플리케이션을 최적화하는 것은 클러스터 모듈과 워커 스레드와 같은 사용 가능한 도구를 전략적으로 활용하는 것을 포함합니다. 작업 부하를 효과적으로 분산하고 무거운 계산을 처리하는 방식으로 개발자는 애플리케이션이 반응적이고 효율적으로 유지될 수 있도록 할 수 있습니다. 신뢰성을 갖춘 클러스터 모듈부터 시작하여 특정 작업에 대해 워커 스레드를 통합하면 상당한 성능 향상이 기대됩니다. 이 알고리즘에 대한 이해를 더 깊이 파고 싶다면, 제 GitHub 저장소(algorithms-data-structures)를 탐험해보세요. 여기에서는 실험하고 연습하며 지식을 확고히 하는 데 도움이 되는 다양한 알고리즘 및 데이터 구조가 제공됩니다.\n\n<div class=\"content-ad\"></div>\n\n언젠가는 완성될 예정인 몇 개 섹션들이 있습니다. 제 꾸준한 학습 여정을 반영한 것입니다. 이 프로세스는 완료되기까지 2-3년이 소요될 것으로 예상됩니다. 그러나 저장소는 끊임없이 발전하고 있습니다.\n\n탐험으로 끝나는 것이 아니에요! 여러분의 피드백을 소중히 생각합니다. 도전적인 상황을 마주했거나 건설적인 비평을 하고 싶거나 알고리즘과 성능 최적화에 대해 토론하고 싶다면 언제든지 연락해 주세요. Twitter에서 @m_mdy_m으로, Telegram에서는 @m_mdy_m으로 저에게 연락할 수 있습니다. 또한 GitHub 계정인 m-mdy-m에서 토론에 참여할 수도 있습니다. 지식을 공유하고 우리의 이해 범위를 넓히는 활기찬 학습 커뮤니티를 함께 만들어봐요. 함께 해요!","ogImage":{"url":"/assets/img/2024-06-20-NodeBoostClustersThreads_0.png"},"coverImage":"/assets/img/2024-06-20-NodeBoostClustersThreads_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Node.js 어플리케이션 성능 최적화 전략</p>\n<p>이 글에서는 이러한 상황을 효과적으로 관리하는 다양한 전략에 대해 살펴볼 것입니다.</p>\n<h1>이벤트 루프 도전 이해하기</h1>\n<p>Node.js에서 이벤트 루프는 비동기 작업을 처리하는 핵심 개념입니다. 그러나 이벤트 루프 내에 너무 많은 작업이 존재하면 성능 병목 현상이 발생할 수 있습니다. 이 문제는 특히 많은 작업을 효율적으로 처리해야 하는 고성능 응용 프로그램에서 특히 중요해집니다.</p>\n<h1>전략 1: Node.js 클러스터 모듈 활용</h1>\n<p>성능 문제를 처리하는 효과적인 방법 중 하나는 Node.js의 클러스터 모듈을 활용하는 것입니다. 이 모듈을 사용하면 여러 인스턴스의 Node.js 애플리케이션을 각각 독립적인 이벤트 루프를 가지고 동일한 서버 포트를 공유하여 실행할 수 있습니다. 작동 방식은 다음과 같습니다:</p>\n<ul>\n<li>여러 Node 인스턴스: 클러스터 모듈을 통해 여러 Node.js 인스턴스를 생성할 수 있습니다. 각 인스턴스는 별도의 프로세스로 실행되어 응용 프로그램이 여러 CPU 코어를 효과적으로 활용할 수 있게 합니다.</li>\n<li>부하 분산: Node.js 클러스터 모듈은 여러 인스턴스 사이에 들어오는 요청을 분산하여 부하를 균형 있게 유지하고 단일 인스턴스에 병목 현상이 발생하지 않도록 합니다.</li>\n<li>성능 향상: 요청을 처리하는 여러 인스턴스가 존재하므로 애플리케이션 전체의 성능이 향상되며, 작업이 서로 다른 인스턴스 간에 동시에 처리되어 효율적으로 이루어집니다.</li>\n</ul>\n<p>클러스터 모듈은 노드.js를 다중 스레딩으로 만들지는 않지만 병렬로 동작하는 여러 이벤트 루프를 생성하여 다중 스레딩을 시뮬레이트합니다.</p>\n<p>개요:\n노드.js의 클러스터 모듈은 애플리케이션이 CPU의 별도 코어에서 실행되는 노드.js 프로세스의 여러 인스턴스를 생성할 수 있도록 합니다. 이를 통해 부하를 분산시키고 무거운 작업에 의해 단일 인스턴스가 과부하되는 것을 방지할 수 있습니다.</p>\n<p>구현:</p>\n<ul>\n<li>설정:</li>\n</ul>\n<ul>\n<li>\n<p>클러스터 모듈을 사용하여 Node.js 애플리케이션을 설정하세요.</p>\n</li>\n<li>\n<p>클러스터 모듈을 사용하여 기본 프로세스를 여러 워커 프로세스로 포크하세요.</p>\n</li>\n<li>\n<p>장점:</p>\n</li>\n<li>\n<p>각 워커 프로세스는 독립적인 이벤트 루프를 실행합니다.</p>\n</li>\n<li>\n<p>부하가 여러 CPU 코어에 분산됩니다.</p>\n</li>\n<li>\n<p>스케일링 및 장애 허용성이 향상되며, 한 워커 프로세스의 실패가 다른 프로세스에 영향을 미치지 않습니다.</p>\n</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> cluster = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cluster'</span>);\n<span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);\n<span class=\"hljs-keyword\">const</span> numCPUs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'os'</span>).<span class=\"hljs-title function_\">cpus</span>().<span class=\"hljs-property\">length</span>;\n<span class=\"hljs-keyword\">if</span> (cluster.<span class=\"hljs-property\">isMaster</span>) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; numCPUs; i++) {\n    cluster.<span class=\"hljs-title function_\">fork</span>();\n  }\n  cluster.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'exit'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">worker, code, signal</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Worker <span class=\"hljs-subst\">${worker.process.pid}</span> died`</span>);\n  });\n} <span class=\"hljs-keyword\">else</span> {\n  http.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n    res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>);\n    res.<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-string\">'Hello World\\n'</span>);\n  }).<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8000</span>);\n}\n</code></pre>\n<h1>전략 2: 워커 스레드 활용</h1>\n<p>성능을 향상시키는 또 다른 방법은 워커 스레드를 사용하는 것입니다. 워커 스레드는 CPU 집약적인 작업을 실행하는 데 유용합니다. 다음은 워커 스레드를 통합하는 방법입니다:</p>\n<ul>\n<li>스레드 풀: Node.js에는 libuv 라이브러리를 통해 기본 스레드 풀이 포함되어 있습니다. 워커 스레드는 이 스레드 풀에 무거운 계산을 할당하여 주 이벤트 루프를 다른 작업 처리에 확보할 수 있습니다.</li>\n<li>병행성: 워커 스레드를 이용하면 작업이 병렬로 실행되어 응용 프로그램의 처리량과 응답성을 크게 향상할 수 있습니다.</li>\n<li>구현: 워커 스레드를 설정하는 것은 함수를 독립적으로 실행할 수 있는 스레드 풀을 만드는 과정을 포함합니다. 이 설정은 데이터 처리, 이미지 처리 및 복잡한 계산과 같은 작업에 이상적입니다.</li>\n</ul>\n<p>개요:\n워커 스레드는 여러 스레드에서 JavaScript를 병렬로 실행하여 중요한 계산을 메인 이벤트 루프에서 벗어나 실행하는 방법을 제공합니다.</p>\n<p>구현:</p>\n<ul>\n<li>\n<p>설정:</p>\n</li>\n<li>\n<p>worker_threads 모듈을 사용하여 워커 스레드를 생성합니다.</p>\n</li>\n<li>\n<p>CPU 집약적인 작업을 이 워커 스레드에 위임합니다.</p>\n</li>\n</ul>\n<ul>\n<li>\n<p>혜택:</p>\n</li>\n<li>\n<p>주요 스레드가 차단되지 않도록 무거운 계산을 완화합니다.</p>\n</li>\n<li>\n<p>하나의 Node.js 프로세스 내에서 다중 스레딩 기능을 활용합니다.</p>\n</li>\n<li>\n<p>애플리케이션의 반응성을 향상시킵니다.</p>\n</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">Worker</span>, isMainThread, parentPort } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'worker_threads'</span>);\n<span class=\"hljs-keyword\">if</span> (isMainThread) {\n  <span class=\"hljs-keyword\">const</span> worker = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Worker</span>(__filename);\n  worker.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'message'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">message</span> =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Received message from worker: <span class=\"hljs-subst\">${message}</span>`</span>);\n  });\n  worker.<span class=\"hljs-title function_\">postMessage</span>(<span class=\"hljs-string\">'Start work'</span>);\n} <span class=\"hljs-keyword\">else</span> {\n  parentPort.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'message'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">message</span> =></span> {\n    <span class=\"hljs-comment\">// 무거운 계산 수행</span>\n    <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-title function_\">heavyComputation</span>();\n    parentPort.<span class=\"hljs-title function_\">postMessage</span>(result);\n  });\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">heavyComputation</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 무거운 작업 시뮬레이션</span>\n    <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">1e9</span>; i++) {\n      sum += i;\n    }\n    <span class=\"hljs-keyword\">return</span> sum;\n  }\n}\n</code></pre>\n<h1>최적의 방법과 권장 사항</h1>\n<p>클러스터 모듈과 워커 스레드는 모두 상당한 성능 향상을 제공하지만, 적절한 사용 시나리오를 고려하는 것이 중요합니다:</p>\n<ul>\n<li>먼저 클러스터 모듈을 사용해 보세요: 대부분의 애플리케이션에 대해, 클러스터 모듈을 사용하는 것이 좋습니다. 이는 여러 CPU 코어를 효율적으로 활용하여 애플리케이션 코드를 크게 수정할 필요 없이 작동합니다.</li>\n<li>CPU 집약적인 작업에 워커 스레드 활용: 애플리케이션이 무거운 계산 작업을 포함하는 경우, 워커 스레드를 통합하는 것을 고려해 보세요. 이 방법은 실험적이지만 특정 사용 사례에 대해 상당한 성능 향상을 제공할 수 있습니다.</li>\n<li>모니터링과 테스트: 항상 다양한 부하와 시나리오에서 애플리케이션의 성능을 모니터링하세요. 성능 테스트 도구를 사용하여 병목 현상을 식별하고 이러한 최적화의 영향을 평가하세요.</li>\n</ul>\n<h1>성능 최적화를 위한 권장 사항</h1>\n<ul>\n<li>\n<p>클러스터 모듈부터 시작해 보세요:</p>\n</li>\n<li>\n<p>클러스터 모듈은 성능을 향상시키는 것에 검증된 신뢰할 수 있는 방법입니다.</p>\n</li>\n<li>\n<p>개선된 부하 처리와 오류 허용이 필요한 애플리케이션에 이상적입니다.</p>\n</li>\n<li>\n<p>워커 스레드로 실험해 보세요:</p>\n</li>\n<li>\n<p>특정한 무거운 계산 작업이 있는 애플리케이션에 대해 워커 스레드를 사용하면 매우 효과적입니다.</p>\n</li>\n<li>\n<p>이 접근 방식은 실험적이지만 특정 사용 사례에 대해 상당한 성능 향상을 제공합니다.</p>\n</li>\n</ul>\n<ul>\n<li>\n<p>전략 통합:</p>\n</li>\n<li>\n<p>일부 시나리오에서는 클러스터 모듈과 워커 스레드를 결합하여 양쪽의 장점을 최대로 활용할 수 있습니다.</p>\n</li>\n<li>\n<p>이 하이브리드 방식은 시스템 리소스의 활용을 극대화할 수 있습니다.</p>\n</li>\n</ul>\n<h1>결론</h1>\n<p>성능을 위해 Node.js 애플리케이션을 최적화하는 것은 클러스터 모듈과 워커 스레드와 같은 사용 가능한 도구를 전략적으로 활용하는 것을 포함합니다. 작업 부하를 효과적으로 분산하고 무거운 계산을 처리하는 방식으로 개발자는 애플리케이션이 반응적이고 효율적으로 유지될 수 있도록 할 수 있습니다. 신뢰성을 갖춘 클러스터 모듈부터 시작하여 특정 작업에 대해 워커 스레드를 통합하면 상당한 성능 향상이 기대됩니다. 이 알고리즘에 대한 이해를 더 깊이 파고 싶다면, 제 GitHub 저장소(algorithms-data-structures)를 탐험해보세요. 여기에서는 실험하고 연습하며 지식을 확고히 하는 데 도움이 되는 다양한 알고리즘 및 데이터 구조가 제공됩니다.</p>\n<p>언젠가는 완성될 예정인 몇 개 섹션들이 있습니다. 제 꾸준한 학습 여정을 반영한 것입니다. 이 프로세스는 완료되기까지 2-3년이 소요될 것으로 예상됩니다. 그러나 저장소는 끊임없이 발전하고 있습니다.</p>\n<p>탐험으로 끝나는 것이 아니에요! 여러분의 피드백을 소중히 생각합니다. 도전적인 상황을 마주했거나 건설적인 비평을 하고 싶거나 알고리즘과 성능 최적화에 대해 토론하고 싶다면 언제든지 연락해 주세요. Twitter에서 @m_mdy_m으로, Telegram에서는 @m_mdy_m으로 저에게 연락할 수 있습니다. 또한 GitHub 계정인 m-mdy-m에서 토론에 참여할 수도 있습니다. 지식을 공유하고 우리의 이해 범위를 넓히는 활기찬 학습 커뮤니티를 함께 만들어봐요. 함께 해요!</p>\n</body>\n</html>\n"},"__N_SSG":true}