{"pageProps":{"post":{"title":"앵귤러와 리액트 앱에서의 마이크로프론트엔드의 까다로운 부분들","description":"","date":"2024-06-20 05:33","slug":"2024-06-20-TrickyPartsofMicrofrontendinAngularReactapps","content":"\n\n<img src=\"/assets/img/2024-06-20-TrickyPartsofMicrofrontendinAngularReactapps_0.png\" />\n\n이 게시물은 Angular/React 기업 애플리케이션의 마이크로프론트엔드에 대해 깊이 파고들기 위한 연재물 중 첫 번째입니다. 이번에는 Angular에서 셸 앱에 동적 원격 컴포넌트를로드하는 방법에 대해 이야기하겠습니다.\n\n웹 개발의 급속한 변화 속에서 모듈식이고 확장 가능한 아키텍처에 대한 수요는 마이크로프론트 엔드의 등장으로 이어졌습니다. 이 설계 접근 방식은 복잡한 웹 애플리케이션을 구축하고 관리하는 방식을 혁신하겠다는 약속을 합니다. 개발 프로세스를 간소화하는 잠재력과 성장하는 중요성에도 불구하고, 이 주제에 대한 포괄적인 자료 및 상세한 토론에는 뚜렷한 공백이 남아 있습니다.\n\n# 정신적 모델:\n\n<div class=\"content-ad\"></div>\n\n- 원격: 원격은 별도로 구축되고 배포되는 애플리케이션입니다. 다른 애플리케이션에서 로드할 수있는 ESM을 노출 할 수 있습니다.\n- 쉘: 쉘은 필요할 때 원격을 로드합니다. 프레임워크 관점에서 이 기능은 전통적인 지연 로딩과 비슷합니다. 큰 차이점은 컴파일 시간에 쉘이 원격을 모르는 것입니다.\n\n# 원격 앱\n\n독립 구성 요소를 노출합니다. 예를 들어 간단한 프로필 구성 요소를 만들고 federation.config.js로 구성을 업데이트합니다.\n\n```js\nconst {\n withNativeFederation,\n shareAll,\n} = require('@angular-architects/native-federation/config');\n\nmodule.exports = withNativeFederation({\n name: 'profile',\n exposes: {\n  './MyProfileComponent': './src/app/myprofile/myprofile.component.ts',\n },\n shared: {\n  ...shareAll({\n   singleton: true,\n   strictVersion: true,\n   requiredVersion: 'auto',\n  }),\n },\n});\n```\n\n<div class=\"content-ad\"></div>\n\n# 쉘\n\n```js\n{\n    \"profile\": \"http://profile-app.com/remoteEntry.json\",\n}\n```\n\n자, 우리는 독립형 컴포넌트를 만들어보자. 이름은 federated component로 하자!\n\n```js\n<ng-template #federatedComponent></ng-template>\n```\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { loadRemoteModule } from '@angular-architects/native-federation';\nimport { Component, OnInit, ViewContainerRef, Input, ViewChild } from '@angular/core';\n\n@Component({\n    selector: 'app-federated-component',\n    templateUrl: './federated.component.html',\n    standalone: true,\n})\nexport class FederatedComponent implements OnInit {\n    @ViewChild('federatedComponent', { read: ViewContainerRef })\n    private federatedComponent: ViewContainerRef;\n\n    @Input() entryName: string = '';\n    @Input() module: string = '';\n    @Input() componentName: string = '';\n    @Input() additionalProps: Map<string, unknown> = new Map();\n\n    ngOnInit(): void {\n        loadRemoteModule(this.entryName, this.module).then((federated) => {\n            if (this.federatedComponent) {\n                const comp = this.federatedComponent.createComponent(federated[this.componentName]);\n\n                if (this.additionalProps.size > 0) {\n                    this.additionalProps.forEach((value, key) => {\n                        comp.setInput(key, value);\n                    });\n                }\n            }\n        });\n    }\n}\n```\n\nCreate an enum for exposed remotes where we can map remote apps\n\n```js\nexport const FederatedModuleMap = {\n    profile: {\n        name: 'profile',\n        modules: {\n            myprofile: {\n                name: './MyProfileComponent',\n                componentName: 'MyProfileComponent',\n            },\n        },\n    },\n};\n```\n\nNow let`s create the component that will load a remote application from our dynamic component, which we created — `app.federated.component /\n\n<div class=\"content-ad\"></div>\n\n```js\n<app-federated-component\n        [additionalProps]=\"props()\"\n        [entryName]=\"exposedName()\"\n        [module]=\"exposedModule()\"\n        [componentName]=\"exposedComponent()\"></ram-federated-component> \n```\n\n```js\nimport { Component, ViewEncapsulation, signal } from '@angular/core';\nimport { FederatedModuleMap } from '@enums';\n\n@Component({\n    selector: 'app-my-profile',\n    templateUrl: './my-profile.component.html',\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class MyProfileComponent {\n    protected exposedName = signal(FederatedModuleMap.profile.name);\n    protected exposedModule = signal(\n        FederatedModuleMap.profile.modules.myprofile.name\n    );\n    protected exposedComponent = signal(\n        FederatedModuleMap.profile.modules.myprofile.componentName\n    );\n    protected props = signal(\n        new Map<string, unknown>([['canEdit', false]])\n    );\n}\n```\n\n원격 컴포넌트가 입력을 필요로 하는 경우 Map과 함께 모든 입력을 전달할 수 있습니다.\n\n이것은 Angular로의 마이크로 프론트엔드에 전념된 시리즈의 첫 번째 블로그이며, 앞으로 미래 게시물에서 MFE 통합의 보다 어려운 측면을 탐구할 예정입니다.","ogImage":{"url":"/assets/img/2024-06-20-TrickyPartsofMicrofrontendinAngularReactapps_0.png"},"coverImage":"/assets/img/2024-06-20-TrickyPartsofMicrofrontendinAngularReactapps_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 게시물은 Angular/React 기업 애플리케이션의 마이크로프론트엔드에 대해 깊이 파고들기 위한 연재물 중 첫 번째입니다. 이번에는 Angular에서 셸 앱에 동적 원격 컴포넌트를로드하는 방법에 대해 이야기하겠습니다.</p>\n<p>웹 개발의 급속한 변화 속에서 모듈식이고 확장 가능한 아키텍처에 대한 수요는 마이크로프론트 엔드의 등장으로 이어졌습니다. 이 설계 접근 방식은 복잡한 웹 애플리케이션을 구축하고 관리하는 방식을 혁신하겠다는 약속을 합니다. 개발 프로세스를 간소화하는 잠재력과 성장하는 중요성에도 불구하고, 이 주제에 대한 포괄적인 자료 및 상세한 토론에는 뚜렷한 공백이 남아 있습니다.</p>\n<h1>정신적 모델:</h1>\n<ul>\n<li>원격: 원격은 별도로 구축되고 배포되는 애플리케이션입니다. 다른 애플리케이션에서 로드할 수있는 ESM을 노출 할 수 있습니다.</li>\n<li>쉘: 쉘은 필요할 때 원격을 로드합니다. 프레임워크 관점에서 이 기능은 전통적인 지연 로딩과 비슷합니다. 큰 차이점은 컴파일 시간에 쉘이 원격을 모르는 것입니다.</li>\n</ul>\n<h1>원격 앱</h1>\n<p>독립 구성 요소를 노출합니다. 예를 들어 간단한 프로필 구성 요소를 만들고 federation.config.js로 구성을 업데이트합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> {\n withNativeFederation,\n shareAll,\n} = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@angular-architects/native-federation/config'</span>);\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-title function_\">withNativeFederation</span>({\n <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'profile'</span>,\n <span class=\"hljs-attr\">exposes</span>: {\n  <span class=\"hljs-string\">'./MyProfileComponent'</span>: <span class=\"hljs-string\">'./src/app/myprofile/myprofile.component.ts'</span>,\n },\n <span class=\"hljs-attr\">shared</span>: {\n  ...<span class=\"hljs-title function_\">shareAll</span>({\n   <span class=\"hljs-attr\">singleton</span>: <span class=\"hljs-literal\">true</span>,\n   <span class=\"hljs-attr\">strictVersion</span>: <span class=\"hljs-literal\">true</span>,\n   <span class=\"hljs-attr\">requiredVersion</span>: <span class=\"hljs-string\">'auto'</span>,\n  }),\n },\n});\n</code></pre>\n<h1>쉘</h1>\n<pre><code class=\"hljs language-js\">{\n    <span class=\"hljs-string\">\"profile\"</span>: <span class=\"hljs-string\">\"http://profile-app.com/remoteEntry.json\"</span>,\n}\n</code></pre>\n<p>자, 우리는 독립형 컴포넌트를 만들어보자. 이름은 federated component로 하자!</p>\n<pre><code class=\"hljs language-js\">&#x3C;ng-template #federatedComponent>&#x3C;/ng-template>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { loadRemoteModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular-architects/native-federation'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">OnInit</span>, <span class=\"hljs-title class_\">ViewContainerRef</span>, <span class=\"hljs-title class_\">Input</span>, <span class=\"hljs-title class_\">ViewChild</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n    <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-federated-component'</span>,\n    <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./federated.component.html'</span>,\n    <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FederatedComponent</span> implements <span class=\"hljs-title class_\">OnInit</span> {\n    @<span class=\"hljs-title class_\">ViewChild</span>(<span class=\"hljs-string\">'federatedComponent'</span>, { <span class=\"hljs-attr\">read</span>: <span class=\"hljs-title class_\">ViewContainerRef</span> })\n    private <span class=\"hljs-attr\">federatedComponent</span>: <span class=\"hljs-title class_\">ViewContainerRef</span>;\n\n    @<span class=\"hljs-title class_\">Input</span>() <span class=\"hljs-attr\">entryName</span>: string = <span class=\"hljs-string\">''</span>;\n    @<span class=\"hljs-title class_\">Input</span>() <span class=\"hljs-attr\">module</span>: string = <span class=\"hljs-string\">''</span>;\n    @<span class=\"hljs-title class_\">Input</span>() <span class=\"hljs-attr\">componentName</span>: string = <span class=\"hljs-string\">''</span>;\n    @<span class=\"hljs-title class_\">Input</span>() <span class=\"hljs-attr\">additionalProps</span>: <span class=\"hljs-title class_\">Map</span>&#x3C;string, unknown> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n    <span class=\"hljs-title function_\">ngOnInit</span>(): <span class=\"hljs-keyword\">void</span> {\n        <span class=\"hljs-title function_\">loadRemoteModule</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">entryName</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">module</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">federated</span>) =></span> {\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">federatedComponent</span>) {\n                <span class=\"hljs-keyword\">const</span> comp = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">federatedComponent</span>.<span class=\"hljs-title function_\">createComponent</span>(federated[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">componentName</span>]);\n\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">additionalProps</span>.<span class=\"hljs-property\">size</span> > <span class=\"hljs-number\">0</span>) {\n                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">additionalProps</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, key</span>) =></span> {\n                        comp.<span class=\"hljs-title function_\">setInput</span>(key, value);\n                    });\n                }\n            }\n        });\n    }\n}\n</code></pre>\n<p>Create an enum for exposed remotes where we can map remote apps</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">FederatedModuleMap</span> = {\n    <span class=\"hljs-attr\">profile</span>: {\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'profile'</span>,\n        <span class=\"hljs-attr\">modules</span>: {\n            <span class=\"hljs-attr\">myprofile</span>: {\n                <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'./MyProfileComponent'</span>,\n                <span class=\"hljs-attr\">componentName</span>: <span class=\"hljs-string\">'MyProfileComponent'</span>,\n            },\n        },\n    },\n};\n</code></pre>\n<p>Now let<code>s create the component that will load a remote application from our dynamic component, which we created — </code>app.federated.component /</p>\n<pre><code class=\"hljs language-js\">&#x3C;app-federated-component\n        [additionalProps]=<span class=\"hljs-string\">\"props()\"</span>\n        [entryName]=<span class=\"hljs-string\">\"exposedName()\"</span>\n        [<span class=\"hljs-variable language_\">module</span>]=<span class=\"hljs-string\">\"exposedModule()\"</span>\n        [componentName]=<span class=\"hljs-string\">\"exposedComponent()\"</span>>&#x3C;/ram-federated-component> \n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">ViewEncapsulation</span>, signal } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FederatedModuleMap</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@enums'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n    <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-my-profile'</span>,\n    <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./my-profile.component.html'</span>,\n    <span class=\"hljs-attr\">encapsulation</span>: <span class=\"hljs-title class_\">ViewEncapsulation</span>.<span class=\"hljs-property\">Emulated</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyProfileComponent</span> {\n    protected exposedName = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-title class_\">FederatedModuleMap</span>.<span class=\"hljs-property\">profile</span>.<span class=\"hljs-property\">name</span>);\n    protected exposedModule = <span class=\"hljs-title function_\">signal</span>(\n        <span class=\"hljs-title class_\">FederatedModuleMap</span>.<span class=\"hljs-property\">profile</span>.<span class=\"hljs-property\">modules</span>.<span class=\"hljs-property\">myprofile</span>.<span class=\"hljs-property\">name</span>\n    );\n    protected exposedComponent = <span class=\"hljs-title function_\">signal</span>(\n        <span class=\"hljs-title class_\">FederatedModuleMap</span>.<span class=\"hljs-property\">profile</span>.<span class=\"hljs-property\">modules</span>.<span class=\"hljs-property\">myprofile</span>.<span class=\"hljs-property\">componentName</span>\n    );\n    protected props = <span class=\"hljs-title function_\">signal</span>(\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>&#x3C;string, unknown>([[<span class=\"hljs-string\">'canEdit'</span>, <span class=\"hljs-literal\">false</span>]])\n    );\n}\n</code></pre>\n<p>원격 컴포넌트가 입력을 필요로 하는 경우 Map과 함께 모든 입력을 전달할 수 있습니다.</p>\n<p>이것은 Angular로의 마이크로 프론트엔드에 전념된 시리즈의 첫 번째 블로그이며, 앞으로 미래 게시물에서 MFE 통합의 보다 어려운 측면을 탐구할 예정입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}