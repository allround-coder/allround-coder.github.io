{"pageProps":{"post":{"title":"React와 TailwindCSS로 반응형 NavBar 만드는 방법","description":"","date":"2024-06-22 05:04","slug":"2024-06-22-MakeyourNavBarResponsivewithReactandTailwindCSS","content":"\n\n현재의 모바일 중심 세상에서는 반응형 디자인을 만들고 이를 구현하는 것이 모든 기기에서 원활한 사용자 경험을 제공하는 데 필수적입니다. \n오늘은 내비게이션 바에 반응 형성을 어떻게 구현할 수 있는지에 대해 이야기하겠습니다.\n\n1- NavBar.tsx 라는 컴포넌트를 생성하세요 (이 튜토리얼에서 TypeScript를 사용할 것입니다).\n\n2- 더 큰 화면에 대한 NavBar 세부 정보를 구현하십시오. 간단하게 말해서, 이것들은 nav를 플렉스 컨테이너로 만들고 그 안에 웹 사이트 로고, 정렬되지 않은 목록 및 오른쪽에 버튼이 있을 것입니다.\n\n```jsx\n  <nav className=\"flexBetween max-container padding-container relative z-30 py-5\">\n      <Link href=\"/\">\n        <Image src=\"/hilink-logo.svg\" alt=\"logo\" width={74} height={29} />\n      </Link>\n      <ul className=\"hidden h-full gap-12 lg:flex\">\n        {NAV_LINKS.map((link) => (\n          <Link\n            href={link.href}\n            key={link.key}\n            className=\"regular-16 text-gray-500 flexCenter cursor-pointer pb-1.5 transition-all hover:font-bold\"\n          >\n            {link.label}\n          </Link>\n        ))}\n      </ul>\n\n      <div className=\"lg:flexCenter hidden\">\n        <Button\n          type=\"button\"\n          title=\"Login\"\n          icon=\"/user.svg\"\n          variant=\"btn_dark_green\"\n        />\n      </div>\n```\n\n<div class=\"content-ad\"></div>\n\n위의 코드에서, nav 태그에는 단순히 (flex items-center justify-between)인 flexBetween 특수 css 클래스가 있습니다. 이 컨테이너의 첫 번째 아이템은 로고이고, 그 다음은 웹 사이트 루트로의 내비게이션 링크가 있는 비순서 목록이며, 마지막으로 버튼이 있습니다.\n\n3- 작은 화면을 위한 내비게이션 구현하기.\n이제, 1024px보다 작은 화면에는 내비게이션이 없을 것임을 알았습니다 (lg:는 콜론 뒤에 넣은 클래스명이 대형 화면 및 이상에서만 사용된다는 의미입니다).\n\n작은 화면에는 햄버거 아이콘을 넣을 것입니다.\n\n![해당 이미지](/assets/img/2024-06-22-MakeyourNavBarResponsivewithReactandTailwindCSS_0.png)\n\n<div class=\"content-ad\"></div>\n\n그러면 작은 화면용 내비게이션을 넣기 위해 이 버튼이 클릭될 때 언제 체크해야 합니다.\n그를 위해:\n\n```js\nconst [isOpen, setIsOpen] = useState(false);\nconst changeIsOpen = () => {\n setIsOpen(!isOpen);\n};\nuseEffect(() => {\n console.log(isOpen);\n}, [isOpen]);\n```\n\n또한 isOpen 상태 변화를 모니터링하기 위해 useEffect 훅을 사용할 수 있습니다:\n\n```js\nuseEffect(() => {\n console.log(isOpen);\n}, [isOpen]);\n```\n\n<div class=\"content-ad\"></div>\n\n4- IsOpen 변수 및 changeIsOpen 함수 사용하기\n\n```js\n{isOpen && <NavSmallScreen changeIsOpen={changeIsOpen}/>}\n\n<Image\n    src=\"menu.svg\"\n    alt=\"menu\"\n    width={32}\n    height={32}\n    className=\"inline-block cursor-pointer lg:hidden\"\n    onClick={changeIsOpen}\n```\n\n5- NavSmallScreen 컴포넌트 구현하기\n\n그다음으로 NavSmallScreen 컴포넌트를 만들겠습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport {NAV_LINKS} from \"@/constants\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\n\nfunction NavSmallScreen({changeIsOpen}: {changeIsOpen: () => void}) {\n  return (\n    <div\n      className=\"flex flex-col items-center min-w-[70vw] z-[105] p-10 h-full w-full fixed left-0 top-0 opacity-90 bg-black  backdrop-blur-md rounded-lg\">\n      <ul\n        className=\"flex flex-col items-center justify-center gap-10 text-xl h-full \">\n        {NAV_LINKS.map((link) => (\n          <Link\n            href={link.href}\n            key={link.key}\n            className=\"regular-16 text-gray-500 flexCenter cursor-pointer pb-1.5 transition-all hover:font-bold\"\n          >\n            {link.label}\n          </Link>\n        ))}\n\n        <Image\n          src=\"close.svg\"\n          alt=\"menu\"\n          width={32}\n          height={32}\n          className=\"inline-block cursor-pointer lg:hidden\"\n          onClick={changeIsOpen}\n        />\n      </ul>\n    </div>\n  );\n}\n\nexport default NavSmallScreen;\r\n```\n\n![Responsive Navbar](/assets/img/2024-06-22-MakeyourNavBarResponsivewithReactandTailwindCSS_1.png)\n\n저희는 부모 컴포넌트에서 changeIsOpen 함수를 자식 컴포넌트로 전달하고, 이 함수를 클릭시 닫기 아이콘(X)에 사용합니다. 그래서 메뉴가 닫힙니다.\n\n이 게시물을 읽어 주셔서 감사합니다. 여러분의 반응형 목표를 달성하는데 도움이 되었으면 좋겠습니다! 즐거운 하루 되세요!\n\n<div class=\"content-ad\"></div>\n\nGitHub repository 에서 소스 코드를 확인할 수 있습니다.\n[이 곳](https://github.com/egemenc21/camptraveler/blob/main/components/Navbar.tsx)에서 확인해보세요.","ogImage":{"url":"/assets/img/2024-06-22-MakeyourNavBarResponsivewithReactandTailwindCSS_0.png"},"coverImage":"/assets/img/2024-06-22-MakeyourNavBarResponsivewithReactandTailwindCSS_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>현재의 모바일 중심 세상에서는 반응형 디자인을 만들고 이를 구현하는 것이 모든 기기에서 원활한 사용자 경험을 제공하는 데 필수적입니다.\n오늘은 내비게이션 바에 반응 형성을 어떻게 구현할 수 있는지에 대해 이야기하겠습니다.</p>\n<p>1- NavBar.tsx 라는 컴포넌트를 생성하세요 (이 튜토리얼에서 TypeScript를 사용할 것입니다).</p>\n<p>2- 더 큰 화면에 대한 NavBar 세부 정보를 구현하십시오. 간단하게 말해서, 이것들은 nav를 플렉스 컨테이너로 만들고 그 안에 웹 사이트 로고, 정렬되지 않은 목록 및 오른쪽에 버튼이 있을 것입니다.</p>\n<pre><code class=\"hljs language-jsx\">  &#x3C;nav className=<span class=\"hljs-string\">\"flexBetween max-container padding-container relative z-30 py-5\"</span>>\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Image</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/hilink-logo.svg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"logo\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">{74}</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">{29}</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Link</span>></span></span>\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"hidden h-full gap-12 lg:flex\"</span>></span>\n        {NAV_LINKS.map((link) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Link</span>\n            <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{link.href}</span>\n            <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{link.key}</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"regular-16 text-gray-500 flexCenter cursor-pointer pb-1.5 transition-all hover:font-bold\"</span>\n          ></span>\n            {link.label}\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Link</span>></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span></span>\n\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"lg:flexCenter hidden\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>\n          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span>\n          <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"Login\"</span>\n          <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">\"/user.svg\"</span>\n          <span class=\"hljs-attr\">variant</span>=<span class=\"hljs-string\">\"btn_dark_green\"</span>\n        /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n</code></pre>\n<p>위의 코드에서, nav 태그에는 단순히 (flex items-center justify-between)인 flexBetween 특수 css 클래스가 있습니다. 이 컨테이너의 첫 번째 아이템은 로고이고, 그 다음은 웹 사이트 루트로의 내비게이션 링크가 있는 비순서 목록이며, 마지막으로 버튼이 있습니다.</p>\n<p>3- 작은 화면을 위한 내비게이션 구현하기.\n이제, 1024px보다 작은 화면에는 내비게이션이 없을 것임을 알았습니다 (lg:는 콜론 뒤에 넣은 클래스명이 대형 화면 및 이상에서만 사용된다는 의미입니다).</p>\n<p>작은 화면에는 햄버거 아이콘을 넣을 것입니다.</p>\n<p><img src=\"/assets/img/2024-06-22-MakeyourNavBarResponsivewithReactandTailwindCSS_0.png\" alt=\"해당 이미지\"></p>\n<p>그러면 작은 화면용 내비게이션을 넣기 위해 이 버튼이 클릭될 때 언제 체크해야 합니다.\n그를 위해:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> [isOpen, setIsOpen] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">changeIsOpen</span> = (<span class=\"hljs-params\"></span>) => {\n <span class=\"hljs-title function_\">setIsOpen</span>(!isOpen);\n};\n<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(isOpen);\n}, [isOpen]);\n</code></pre>\n<p>또한 isOpen 상태 변화를 모니터링하기 위해 useEffect 훅을 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(isOpen);\n}, [isOpen]);\n</code></pre>\n<p>4- IsOpen 변수 및 changeIsOpen 함수 사용하기</p>\n<pre><code class=\"hljs language-js\">{isOpen &#x26;&#x26; <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">NavSmallScreen</span> <span class=\"hljs-attr\">changeIsOpen</span>=<span class=\"hljs-string\">{changeIsOpen}/</span>></span></span>}\n\n&#x3C;<span class=\"hljs-title class_\">Image</span>\n    src=<span class=\"hljs-string\">\"menu.svg\"</span>\n    alt=<span class=\"hljs-string\">\"menu\"</span>\n    width={<span class=\"hljs-number\">32</span>}\n    height={<span class=\"hljs-number\">32</span>}\n    className=<span class=\"hljs-string\">\"inline-block cursor-pointer lg:hidden\"</span>\n    onClick={changeIsOpen}\n</code></pre>\n<p>5- NavSmallScreen 컴포넌트 구현하기</p>\n<p>그다음으로 NavSmallScreen 컴포넌트를 만들겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-variable constant_\">NAV_LINKS</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/constants\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Link</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/link\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Image</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/image\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">NavSmallScreen</span>(<span class=\"hljs-params\">{changeIsOpen}: {changeIsOpen: () => <span class=\"hljs-keyword\">void</span>}</span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n      <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex flex-col items-center min-w-[70vw] z-[105] p-10 h-full w-full fixed left-0 top-0 opacity-90 bg-black  backdrop-blur-md rounded-lg\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>\n        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex flex-col items-center justify-center gap-10 text-xl h-full \"</span>></span>\n        {NAV_LINKS.map((link) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Link</span>\n            <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{link.href}</span>\n            <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{link.key}</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"regular-16 text-gray-500 flexCenter cursor-pointer pb-1.5 transition-all hover:font-bold\"</span>\n          ></span>\n            {link.label}\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Link</span>></span>\n        ))}\n\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Image</span>\n          <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"close.svg\"</span>\n          <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"menu\"</span>\n          <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">{32}</span>\n          <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">{32}</span>\n          <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"inline-block cursor-pointer lg:hidden\"</span>\n          <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{changeIsOpen}</span>\n        /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">NavSmallScreen</span>;\n</code></pre>\n<p><img src=\"/assets/img/2024-06-22-MakeyourNavBarResponsivewithReactandTailwindCSS_1.png\" alt=\"Responsive Navbar\"></p>\n<p>저희는 부모 컴포넌트에서 changeIsOpen 함수를 자식 컴포넌트로 전달하고, 이 함수를 클릭시 닫기 아이콘(X)에 사용합니다. 그래서 메뉴가 닫힙니다.</p>\n<p>이 게시물을 읽어 주셔서 감사합니다. 여러분의 반응형 목표를 달성하는데 도움이 되었으면 좋겠습니다! 즐거운 하루 되세요!</p>\n<p>GitHub repository 에서 소스 코드를 확인할 수 있습니다.\n<a href=\"https://github.com/egemenc21/camptraveler/blob/main/components/Navbar.tsx\" rel=\"nofollow\" target=\"_blank\">이 곳</a>에서 확인해보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}