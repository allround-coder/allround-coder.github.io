{"pageProps":{"post":{"title":"Angular 번들을 분석하는 방법","description":"","date":"2024-06-20 03:01","slug":"2024-06-20-HowToAnalyzeAngularBundle","content":"\n\n## 세 가지 간단한 도구를 사용하여 Angular 번들 크기를 분석해 보세요\n\n만약 당신의 Angular 애플리케이션의 번들 크기를 알고 싶다면 단순히 `ng build`를 실행하고 터미널에서 결과를 확인할 수 있습니다. 다음과 같은 결과를 얻게 될 것입니다:\n\n![분석 이미지](/assets/img/2024-06-20-HowToAnalyzeAngularBundle_0.png)\n\n이 경우에 원본 크기는 1.02 MB이고 예상 전송 크기는 245.35 kB입니다.\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! \n\n결과 아래에는 애플리케이션 번들 크기의 구성 요소가 가장 큰 것부터 가장 작은 것까지 나열되어 있습니다.\n\n요령으로 Angular 번들을 살펴볼 수 있는 빠른 방법이겠죠.\n\n이제 이것을 시각화해보고 싶다면 어떻게 할까요? 적어도 몇 가지 방법이 있습니다:\n\n- Webpack Bundle Analyzer (클래식)\n- Source Map Explorer\n- Esbuild Analyze (Angular `17)\n\n<div class=\"content-ad\"></div>\n\n# 웹팩 번들 분석기\n\n웹팩 번들 분석기는 \"웹팩 출력 파일의 크기를 대화식 확대/축소 트리맵으로 시각화하는 매우 인기 있는 방법\"입니다. 그냥 설치하면 바로 사용할 수 있고 충분히 좋을 수도 있습니다.\n\n다음 명령어로 웹팩 번들 분석기를 설치하세요:\n\n```js\nnpm install --save-dev webpack-bundle-analyzer\n```\n\n<div class=\"content-ad\"></div>\n\n번들 내용을 시각화하는 가장 쉬운 방법은 package.json에 스크립트를 추가하는 것입니다. 예를 들어:\n\n```js\n// package.json\n\n{\n    \"name\": \"your-app-name\",\n    \"scripts\": { \n        \"ng\": \"ng\",\n        \"e2e\": \"ng e2e\",\n        \"analyze-webpack\": \"ng build --stats-json && webpack-bundle-analyzer dist/your-app-name/stats.json\"\n    },\n    ...\n}\n```\n\n그래서 다음 명령을 실행하면\n\n```js\nnpm run analyze-webpack\n```\n\n<div class=\"content-ad\"></div>\n\nAngular은 여러분의 앱을 빌드하고 새롭게 생성된 dist/your-app-name 폴더 내에 stats.json 파일을 만듭니다.\n\n마지막으로 webpack-bundle-analyzer는 기본 주소인 http://127.0.0.1:8888/에서 새 탭을 자동으로 엽니다.\n\nWebpack Bundle Analyzer 문서에 나와 있는 대로 번들을 보기 쉽고 간단하게 확인할 수 있습니다.\n\n![Webpack Bundle Analyzer](https://miro.medium.com/v2/resize:fit:1400/0*wsCwLvr_n3lt96pc.gif)\n\n<div class=\"content-ad\"></div>\n\n덤으로, Webpack Bundle Analyzer는 청크를 필터링할 수 있는 편리한 사이드바를 제공합니다. 가장 큰 부분에 집중하기에 매우 유용합니다.\n\n![이미지](/assets/img/2024-06-20-HowToAnalyzeAngularBundle_1.png)\n\n내 결론: Webpack Bundle Analyzer는 제 요구에 완벽하게 작동합니다. 그러나 2020년에 Angular 팀은 이 빌드 정보가 정확하지 않을 수 있다고 제안했습니다.\n\n해결책으로는 소스 맵 익스플로러를 권장했습니다.\n\n<div class=\"content-ad\"></div>\n\n# 소스 맵 익스플로러\n\n소스 맵 익스플로러는 코드의 원본을 파악하고 디버깅하는 데 도움을 주는 트리 맵 시각화를 제공합니다.\n\n문서를 따라 설치하려면 전역으로 다음을 실행하세요:\n\n```js\nnpm install -g source-map-explorer\n```\n\n<div class=\"content-ad\"></div>\n\n번들 내용을 가장 쉽게 시각화하는 방법은 package.json에 스크립트를 추가하는 것입니다. 예를 들어,\n\n```js\n// package.json\n\n{\n    \"name\": \"your-app-name\",\n    \"scripts\": { \n        \"ng\": \"ng\",\n        \"e2e\": \"ng e2e\",\n        \"analyze-webpack\": \"ng build --stats-json && webpack-bundle-analyzer dist/your-app-name/stats.json\",\n        \"analyze-sourcemap\": \"ng build --source-map && source-map-explorer dist/your-app-name/main.js\"\n    },\n    ...\n}\n```\n\n그래서 다음을 실행하면\n\n```js\nnpm run analyze-sourcemap\n```\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! Angular 애플리케이션을 개발하실 예정이시군요. 소스 맵이 함께 제공되어 Source Map Explorer에서 분석할 수 있습니다.\n\n위 스크립트는 main.js를 분석하고 \"덜 화려하고\" 최소한의 방식으로 시각화할 것입니다. 조금은 슬픕니다.\n\n하지만 상호작용성이 뛰어나고 사용하기 쉽습니다.\n\n![이미지](/assets/img/2024-06-20-HowToAnalyzeAngularBundle_2.png)\n\n<div class=\"content-ad\"></div>\n\n저의 경우에는 Webpack Bundle Analyzer와 Source Map Explorer로 보고된 정보 사이에 일부 차이점을 발견할 수 있어요. main.js의 크기는 다음과 같습니다:\n\n- Webpack Bundle Analyzer — 630.38 KB\n- Source Map Explorer — 630.45 KB\n\n# Esbuild Analyze\n\nAngular v17부터 2024년에는 번들 크기를 검사할 수 있는 esbuild analyze 또는 esbuild-visualizer를 사용할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\nAngular 문서에 따르면 다음과 같습니다.\n\n![image](/assets/img/2024-06-20-HowToAnalyzeAngularBundle_3.png)\n\nng build your-app-name --stats-json 명령을 실행하면 응용 프로그램의 루트 폴더 안에 stats.json 파일이 생성됩니다.\n\n그러나 문서에서 제안하는 대로 새로 생성된 stats.json을 esbuild 번들 크기 분석기에 가져오려고 시도하면 작동하지 않는데, 그 이유는 stats.json이 분석기에서 요구하는 메타데이터 JSON 형식과 일치하지 않기 때문입니다.\n\n<div class=\"content-ad\"></div>\n\n약간 실망스럽네요. 제가 기대했던대로 쉽게 작동될 줄 알았는데요.\n\n그래서 \"https://esbuild.github.io/analyze/\"으로 분석할 수 있는 'stats.json' 파일을 생성한다는 말은 반 정도 맞습니다. 파일은 받을 수 있지만 사용할 수는 없죠.\n\n아래는 구석통을 설치하는 방법입니다:\n\n<div class=\"content-ad\"></div>\n\n\n```js\nnpm install --save-exact --save-dev esbuild\n```\n\n그런 다음 다음과 같은 명령을 루트 폴더의 터미널에서 실행하세요:\n\n```js\n./node_modules/.bin/esbuild src/main.ts --bundle --metafile=meta.json --outfile=out.js\n```\n\n이렇게 길고 이상한 명령을 한 번에 실행하려면 package.json에 스크립트를 만들었습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n// packjage.json\n\n{\n   \"name\": \"your-app-name\",\n    \"scripts\": { \n        \"ng\": \"ng\",\n        \"e2e\": \"ng e2e\",\n        \"analyze-webpack\": \"ng build --stats-json && webpack-bundle-analyzer dist/your-app-name/stats.json\",\n        \"analyze-sourcemap\": \"ng build --source-map && source-map-explorer dist/your-app-name/main.js\",\n        \"analyze-esbuild\": \"ng build && esbuild dist/your-app-name/main.js --bundle --metafile=dist/your-app-name/meta.json --outfile=out.js\"\n    },\n    \"dependencies\": { ... },\n    \"devDependencies\": { ... },\n}\n```\n\n따라서,\n\n```js\nnpm run analyze-esbuild\n```\n\n을 실행하면, 애플리케이션 루트 폴더에 meta.json 파일이 생성됩니다. 그런 다음 meta.json을 esbuild 번들 크기 분석기에서 사용하여 번들을 시각화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n아래 시각화는 썬버스트 차트이지만 다른 유형으로 이동할 수 있어요.\n\n![Sunburst Chart](/assets/img/2024-06-20-HowToAnalyzeAngularBundle_5.png)\n\n## 결론\n\n대부분은 당신의 요구에 따라 다릅니다.\n\n<div class=\"content-ad\"></div>\n\n내 의견으로는, 대부분의 사용자들이 ng build에서 출력된 원본 크기를 확인하는 것이 도움이 될 것이라고 생각합니다. 원본 크기가 \"너무 크다\"고 판단될 경우, 어떤 의미인지 논의할 수 있지만 번들 분석 도구를 활용해보는 것이 좋습니다.\n\n내 의견으로는 가장 빠른 해결책은 webpack-bundle-analyzer입니다. 그러나 esbuild-analyze와 비교했을 때 시각화 가능성 면에서 약간 부족하다고 생각합니다.","ogImage":{"url":"/assets/img/2024-06-20-HowToAnalyzeAngularBundle_0.png"},"coverImage":"/assets/img/2024-06-20-HowToAnalyzeAngularBundle_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>세 가지 간단한 도구를 사용하여 Angular 번들 크기를 분석해 보세요</h2>\n<p>만약 당신의 Angular 애플리케이션의 번들 크기를 알고 싶다면 단순히 <code>ng build</code>를 실행하고 터미널에서 결과를 확인할 수 있습니다. 다음과 같은 결과를 얻게 될 것입니다:</p>\n<p><img src=\"/assets/img/2024-06-20-HowToAnalyzeAngularBundle_0.png\" alt=\"분석 이미지\"></p>\n<p>이 경우에 원본 크기는 1.02 MB이고 예상 전송 크기는 245.35 kB입니다.</p>\n<p>안녕하세요!</p>\n<p>결과 아래에는 애플리케이션 번들 크기의 구성 요소가 가장 큰 것부터 가장 작은 것까지 나열되어 있습니다.</p>\n<p>요령으로 Angular 번들을 살펴볼 수 있는 빠른 방법이겠죠.</p>\n<p>이제 이것을 시각화해보고 싶다면 어떻게 할까요? 적어도 몇 가지 방법이 있습니다:</p>\n<ul>\n<li>Webpack Bundle Analyzer (클래식)</li>\n<li>Source Map Explorer</li>\n<li>Esbuild Analyze (Angular `17)</li>\n</ul>\n<h1>웹팩 번들 분석기</h1>\n<p>웹팩 번들 분석기는 \"웹팩 출력 파일의 크기를 대화식 확대/축소 트리맵으로 시각화하는 매우 인기 있는 방법\"입니다. 그냥 설치하면 바로 사용할 수 있고 충분히 좋을 수도 있습니다.</p>\n<p>다음 명령어로 웹팩 번들 분석기를 설치하세요:</p>\n<pre><code class=\"hljs language-js\">npm install --save-dev webpack-bundle-analyzer\n</code></pre>\n<p>번들 내용을 시각화하는 가장 쉬운 방법은 package.json에 스크립트를 추가하는 것입니다. 예를 들어:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// package.json</span>\n\n{\n    <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"your-app-name\"</span>,\n    <span class=\"hljs-string\">\"scripts\"</span>: { \n        <span class=\"hljs-string\">\"ng\"</span>: <span class=\"hljs-string\">\"ng\"</span>,\n        <span class=\"hljs-string\">\"e2e\"</span>: <span class=\"hljs-string\">\"ng e2e\"</span>,\n        <span class=\"hljs-string\">\"analyze-webpack\"</span>: <span class=\"hljs-string\">\"ng build --stats-json &#x26;&#x26; webpack-bundle-analyzer dist/your-app-name/stats.json\"</span>\n    },\n    ...\n}\n</code></pre>\n<p>그래서 다음 명령을 실행하면</p>\n<pre><code class=\"hljs language-js\">npm run analyze-webpack\n</code></pre>\n<p>Angular은 여러분의 앱을 빌드하고 새롭게 생성된 dist/your-app-name 폴더 내에 stats.json 파일을 만듭니다.</p>\n<p>마지막으로 webpack-bundle-analyzer는 기본 주소인 <a href=\"http://127.0.0.1:8888/%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">http://127.0.0.1:8888/에서</a> 새 탭을 자동으로 엽니다.</p>\n<p>Webpack Bundle Analyzer 문서에 나와 있는 대로 번들을 보기 쉽고 간단하게 확인할 수 있습니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/0*wsCwLvr_n3lt96pc.gif\" alt=\"Webpack Bundle Analyzer\"></p>\n<p>덤으로, Webpack Bundle Analyzer는 청크를 필터링할 수 있는 편리한 사이드바를 제공합니다. 가장 큰 부분에 집중하기에 매우 유용합니다.</p>\n<p><img src=\"/assets/img/2024-06-20-HowToAnalyzeAngularBundle_1.png\" alt=\"이미지\"></p>\n<p>내 결론: Webpack Bundle Analyzer는 제 요구에 완벽하게 작동합니다. 그러나 2020년에 Angular 팀은 이 빌드 정보가 정확하지 않을 수 있다고 제안했습니다.</p>\n<p>해결책으로는 소스 맵 익스플로러를 권장했습니다.</p>\n<h1>소스 맵 익스플로러</h1>\n<p>소스 맵 익스플로러는 코드의 원본을 파악하고 디버깅하는 데 도움을 주는 트리 맵 시각화를 제공합니다.</p>\n<p>문서를 따라 설치하려면 전역으로 다음을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">npm install -g source-map-explorer\n</code></pre>\n<p>번들 내용을 가장 쉽게 시각화하는 방법은 package.json에 스크립트를 추가하는 것입니다. 예를 들어,</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// package.json</span>\n\n{\n    <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"your-app-name\"</span>,\n    <span class=\"hljs-string\">\"scripts\"</span>: { \n        <span class=\"hljs-string\">\"ng\"</span>: <span class=\"hljs-string\">\"ng\"</span>,\n        <span class=\"hljs-string\">\"e2e\"</span>: <span class=\"hljs-string\">\"ng e2e\"</span>,\n        <span class=\"hljs-string\">\"analyze-webpack\"</span>: <span class=\"hljs-string\">\"ng build --stats-json &#x26;&#x26; webpack-bundle-analyzer dist/your-app-name/stats.json\"</span>,\n        <span class=\"hljs-string\">\"analyze-sourcemap\"</span>: <span class=\"hljs-string\">\"ng build --source-map &#x26;&#x26; source-map-explorer dist/your-app-name/main.js\"</span>\n    },\n    ...\n}\n</code></pre>\n<p>그래서 다음을 실행하면</p>\n<pre><code class=\"hljs language-js\">npm run analyze-sourcemap\n</code></pre>\n<p>안녕하세요! Angular 애플리케이션을 개발하실 예정이시군요. 소스 맵이 함께 제공되어 Source Map Explorer에서 분석할 수 있습니다.</p>\n<p>위 스크립트는 main.js를 분석하고 \"덜 화려하고\" 최소한의 방식으로 시각화할 것입니다. 조금은 슬픕니다.</p>\n<p>하지만 상호작용성이 뛰어나고 사용하기 쉽습니다.</p>\n<p><img src=\"/assets/img/2024-06-20-HowToAnalyzeAngularBundle_2.png\" alt=\"이미지\"></p>\n<p>저의 경우에는 Webpack Bundle Analyzer와 Source Map Explorer로 보고된 정보 사이에 일부 차이점을 발견할 수 있어요. main.js의 크기는 다음과 같습니다:</p>\n<ul>\n<li>Webpack Bundle Analyzer — 630.38 KB</li>\n<li>Source Map Explorer — 630.45 KB</li>\n</ul>\n<h1>Esbuild Analyze</h1>\n<p>Angular v17부터 2024년에는 번들 크기를 검사할 수 있는 esbuild analyze 또는 esbuild-visualizer를 사용할 수 있어요.</p>\n<p>Angular 문서에 따르면 다음과 같습니다.</p>\n<p><img src=\"/assets/img/2024-06-20-HowToAnalyzeAngularBundle_3.png\" alt=\"image\"></p>\n<p>ng build your-app-name --stats-json 명령을 실행하면 응용 프로그램의 루트 폴더 안에 stats.json 파일이 생성됩니다.</p>\n<p>그러나 문서에서 제안하는 대로 새로 생성된 stats.json을 esbuild 번들 크기 분석기에 가져오려고 시도하면 작동하지 않는데, 그 이유는 stats.json이 분석기에서 요구하는 메타데이터 JSON 형식과 일치하지 않기 때문입니다.</p>\n<p>약간 실망스럽네요. 제가 기대했던대로 쉽게 작동될 줄 알았는데요.</p>\n<p>그래서 \"<a href=\"https://esbuild.github.io/analyze/%22%EC%9C%BC%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">https://esbuild.github.io/analyze/\"으로</a> 분석할 수 있는 'stats.json' 파일을 생성한다는 말은 반 정도 맞습니다. 파일은 받을 수 있지만 사용할 수는 없죠.</p>\n<p>아래는 구석통을 설치하는 방법입니다:</p>\n<pre><code class=\"hljs language-js\">npm install --save-exact --save-dev esbuild\n</code></pre>\n<p>그런 다음 다음과 같은 명령을 루트 폴더의 터미널에서 실행하세요:</p>\n<pre><code class=\"hljs language-js\">./node_modules/.<span class=\"hljs-property\">bin</span>/esbuild src/main.<span class=\"hljs-property\">ts</span> --bundle --metafile=meta.<span class=\"hljs-property\">json</span> --outfile=out.<span class=\"hljs-property\">js</span>\n</code></pre>\n<p>이렇게 길고 이상한 명령을 한 번에 실행하려면 package.json에 스크립트를 만들었습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// packjage.json</span>\n\n{\n   <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"your-app-name\"</span>,\n    <span class=\"hljs-string\">\"scripts\"</span>: { \n        <span class=\"hljs-string\">\"ng\"</span>: <span class=\"hljs-string\">\"ng\"</span>,\n        <span class=\"hljs-string\">\"e2e\"</span>: <span class=\"hljs-string\">\"ng e2e\"</span>,\n        <span class=\"hljs-string\">\"analyze-webpack\"</span>: <span class=\"hljs-string\">\"ng build --stats-json &#x26;&#x26; webpack-bundle-analyzer dist/your-app-name/stats.json\"</span>,\n        <span class=\"hljs-string\">\"analyze-sourcemap\"</span>: <span class=\"hljs-string\">\"ng build --source-map &#x26;&#x26; source-map-explorer dist/your-app-name/main.js\"</span>,\n        <span class=\"hljs-string\">\"analyze-esbuild\"</span>: <span class=\"hljs-string\">\"ng build &#x26;&#x26; esbuild dist/your-app-name/main.js --bundle --metafile=dist/your-app-name/meta.json --outfile=out.js\"</span>\n    },\n    <span class=\"hljs-string\">\"dependencies\"</span>: { ... },\n    <span class=\"hljs-string\">\"devDependencies\"</span>: { ... },\n}\n</code></pre>\n<p>따라서,</p>\n<pre><code class=\"hljs language-js\">npm run analyze-esbuild\n</code></pre>\n<p>을 실행하면, 애플리케이션 루트 폴더에 meta.json 파일이 생성됩니다. 그런 다음 meta.json을 esbuild 번들 크기 분석기에서 사용하여 번들을 시각화할 수 있습니다.</p>\n<p>아래 시각화는 썬버스트 차트이지만 다른 유형으로 이동할 수 있어요.</p>\n<p><img src=\"/assets/img/2024-06-20-HowToAnalyzeAngularBundle_5.png\" alt=\"Sunburst Chart\"></p>\n<h2>결론</h2>\n<p>대부분은 당신의 요구에 따라 다릅니다.</p>\n<p>내 의견으로는, 대부분의 사용자들이 ng build에서 출력된 원본 크기를 확인하는 것이 도움이 될 것이라고 생각합니다. 원본 크기가 \"너무 크다\"고 판단될 경우, 어떤 의미인지 논의할 수 있지만 번들 분석 도구를 활용해보는 것이 좋습니다.</p>\n<p>내 의견으로는 가장 빠른 해결책은 webpack-bundle-analyzer입니다. 그러나 esbuild-analyze와 비교했을 때 시각화 가능성 면에서 약간 부족하다고 생각합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}