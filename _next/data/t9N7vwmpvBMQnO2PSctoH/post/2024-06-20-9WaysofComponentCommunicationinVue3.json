{"pageProps":{"post":{"title":"Vue3에서 구성 요소 간 통신하는 9가지 방법","description":"","date":"2024-06-20 04:12","slug":"2024-06-20-9WaysofComponentCommunicationinVue3","content":"\n\n![이미지](/assets/img/2024-06-20-9WaysofComponentCommunicationinVue3_0.png)\n\n# 개요\n\n- props / emit\n- provide / inject\n- Pinia\n- expose / ref\n- attr\n- v-model\n- mitt.js\n- Slots\n- Teleport\n\n# Props / Emit\n\n<div class=\"content-ad\"></div>\n\n부모 컴포넌트는 props를 사용하여 데이터를 자식 컴포넌트로 전달하고, 자식 컴포넌트는 이벤트를 사용하여 부모 컴포넌트에 데이터를 전달합니다.\n\n부모 컴포넌트에서 데이터를 자식 컴포넌트로 전달합니다.\n\n```js\n// Parent.vue에서 전송\n<child :msg2=\"msg2\"></child>\n<script setup lang=\"ts\">\n    import child from \"./child.vue\"\n    import { ref, reactive } from \"vue\"\n    const msg2 = ref<string>(\"자식 컴포넌트로 전송되는 메시지 2입니다\")\n    // 복잡한 타입의 경우\n    const msg2 = reactive<string>([\"하위 컴포넌트로 전송되는 메시지 2입니다\"])\n</script>\n\n// Child.vue에서 수신\n<script setup lang=\"ts\">\n    // import 할 필요 없이 직접 사용합니다\n    // import { defineProps } from \"vue\"\n    interface Props {\n      msg1: string\n      msg2: string\n    }\n    const props = withDefaults(defineProps<Props>(), {\n      msg1: '',\n      msg2: '',\n    })\n    console.log(props) // { msg2: \"하위 컴포넌트로 전송되는 메시지 2입니다\" }\n</script>\r\n```\n\n참고:\n\n<div class=\"content-ad\"></div>\n\n부모 컴포넌트가 setup() 메서드를 사용하고 자식 컴포넌트가 script setup 구문을 사용하는 경우, 부모의 데이터에서 속성을 전달받지 못하며 부모의 setup 함수에서 전달받은 속성만 받을 수 있습니다.\n\n부모 컴포넌트가 script setup 구문을 사용하고 자식 컴포넌트가 setup() 메서드를 사용하는 경우, 자식은 부모의 데이터 및 setup 함수에서 속성을 모두 받을 수 있습니다. 그러나 자식 컴포넌트가 setup에서 속성을 받으려면 부모의 setup 함수에서만 속성을 받을 수 있고 데이터 속성에서는 받을 수 없습니다.\n\n자식 컴포넌트가 부모로 데이터를 전달\n\n```js\n// Child.vue dispatch\n<template>\n    // 방법 1\n    <button @click=\"emit('myClick')\">버튼</button>\n    // 방법 2\n    <button @click=\"handleClick\">버튼</button>\n</template>\n<script setup lang=\"ts\">\n    \n    // 방법 1: Vue3.2 버전에 적합, import 필요 없음\n    // import { defineEmits } from \"vue\"\n    // 방법 1에 대응\n    const emit = defineEmits([\"myClick\",\"myClick2\"])\n    // 방법 2에 대응\n    const handleClick = ()=>{\n        emit(\"myClick\", \"부모 컴포넌트로 전송된 메시지입니다\")\n    }\n    \n    // 방법 2: Vue3.2 버전에 적합하지 않음, useContext()는 사용이 중단됨\n    import { useContext } from \"vue\"\n    const { emit } = useContext()\n    const handleClick = () => {\n        emit(\"myClick\", \"부모 컴포넌트로 전송된 메시지입니다\")\n    }\n</script>\n\n// Parent.vue response\n<template>\n    <child @myClick=\"onMyClick\"></child>\n</template>\n<script setup lang=\"ts\">\n    import child from \"./child.vue\"\n    const onMyClick = (msg: string) => {\n        console.log(msg) // 부모 컴포넌트가 받은 메시지입니다\n    }\n</script>\r\n```\n\n<div class=\"content-ad\"></div>\n\n# 제공 / 주입\n\n이 매커니즘은 부모로부터 하위 구성 요소 중 어떤 것이든 종속성 주입을 개발하는 데 사용됩니다. 반드시 직계 자식 구성 요소일 필요는 없습니다.\n\n제공: 우리가 지정한 데이터를 주입할 수 있도록 합니다.\n\n주입: 어떠한 하위 구성 요소에서도 이 구성 요소에 추가하고 싶은 데이터를 수신합니다. 구성 요소가 얼마나 심층적으로 중첩되었는지와는 관계없이 직접 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// Parent.vue\n<script setup>\n    import { provide } from \"vue\"\n    provide(\"name\", \"Jhon\")\n</script>\n\n// Child.vue\n<script setup>\n    import { inject } from \"vue\"\n    const name = inject(\"name\")\n    console.log(name) // Jhon\n</script>\n```\n\n# Pinia\n\nPinia는 Vuex의 대체로 설계된 새로운 Vue 상태 관리 라이브러리입니다.\n\n```js\n// main.ts\nimport { createPinia } from 'pinia'\ncreateApp(App).use(createPinia()).mount('#app')\n\n// /store/user.ts\nimport { defineStore } from 'pinia'\nexport const userStore = defineStore('user', {\n    state: () => {\n        return { \n            count: 1,\n            arr: []\n        }\n    },\n    getters: { ... },\n    actions: { ... }\n})\n\n// Page.vue\n<template>\n    <div>{ store.count }</div>\n</template>\n<script lang=\"ts\" setup>\nimport { userStore } from '../store'\nconst store = userStore()\n// 분해할당\n// const { count } = userStore()\n</script>\n```\n\n<div class=\"content-ad\"></div>\n\n# 노출 / 참조\n\n참조는 부모 구성 요소가 자식 구성 요소의 인스턴스나 요소에 직접 액세스하는 데 사용될 수 있습니다.\n\n```js\n// Child.vue\n<script setup>\n    // 방법 1 Vue 3.2 버전에 적합하지 않으며,이 버전에서 useContext()는 사용되지 않습니다.\n    import { useContext } from \"vue\"\n    const ctx = useContext()\n    // 노출된 속성 및 메서드 등\n    ctx.expose({\n        childName: \"이것은 자식 구성 요소의 속성입니다\",\n        someMethod(){\n            console.log(\"이것은 자식 구성 요소의 메서드입니다\")\n        }\n    })\n    \n    // 방법 2 Vue 3.2 버전에 적합하며, import할 필요가 없습니다.\n    // import { defineExpose } from \"vue\"\n    defineExpose({\n        childName: \"이것은 자식 구성 요소의 속성입니다\",\n        someMethod(){\n            console.log(\"이것은 자식 구성 요소의 메서드입니다\")\n        }\n    })\n</script>\n\n// Parent.vue  참조 ref=\"comp\"\n<template>\n    <child ref=\"comp\"></child>\n    <button @click=\"handlerClick\">버튼</button>\n</template>\n<script setup>\n    import child from \"./child.vue\"\n    import { ref } from \"vue\"\n    const comp = ref(null)\n    const handlerClick = () => {\n        console.log(comp.value.childName) // 자식 구성 요소에서 노출된 속성 가져오기\n        comp.value.someMethod() // 자식 구성 요소에서 노출된 메서드 호출\n    }\n</script>\r\n```\n\n# attrs\n\n<div class=\"content-ad\"></div>\n\n\nattrs: 부모 스코프에서 클래스 및 스타일을 제외한 컬렉션을 포함합니다.\n\n```js\n// Parent.vue에서 전송\n<child :msg1=\"msg1\" :msg2=\"msg2\" title=\"3333\"></child>\n<script setup>\n    import child from \"./child.vue\"\n    import { ref, reactive } from \"vue\"\n    const msg1 = ref(\"1111\")\n    const msg2 = ref(\"2222\")\n</script>\n\n// Child.vue에서 수신\n<script setup>\n    import { defineProps, useAttrs } from \"vue\"\n    const props = defineProps({\n        msg1: String\n    })\n\n    const attrs = useAttrs()\n    console.log(attrs) // { msg2:\"2222\", title: \"3333\" }\n</script>\n```\n\n# v-model\n\n여러 데이터 요소에 대한 양방향 데이터 바인딩을 지원합니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\n// Parent.vue\n<child v-model:key=\"key\" v-model:value=\"value\"></child>\n<script setup>\n    import child from \"./child.vue\"\n    import { ref, reactive } from \"vue\"\n    const key = ref(\"1111\")\n    const value = ref(\"2222\")\n</script>\n\n// Child.vue\n<template>\n    <button @click=\"handlerClick\">Button</button>\n</template>\n<script setup>\n    \n    // Method 1은 useContext()이 폐기됨에 따라 Vue 3.2 버전에 적합하지 않습니다.\n    import { useContext } from \"vue\"\n    const { emit } = useContext()\n    \n    // Method 2는 Vue 3.2 버전에 적합하며, import 할 필요가 없습니다.\n    // import { defineEmits } from \"vue\"\n    const emit = defineEmits([\"key\",\"value\"])\n    \n    // 사용법\n    const handlerClick = () => {\n        emit(\"update:key\", \"새로운 키\")\n        emit(\"update:value\", \"새로운 값\")\n    }\n</script>\r\n```\n\n# mitt.js\n\nVue3에서는 컴포넌트간 통신을 위한 EventBus가 더 이상 사용되지 않지만, EventBus와 동일한 원리를 기반으로 하는 mitt.js라는 대체 방법이 새롭게 도입되었습니다.\n\n```js\r\n// mitt.js\nimport mitt from 'mitt'\nconst mitt = mitt()\nexport default mitt;\n\n// 컴포넌트 A\n<script setup>\nimport mitt from './mitt'\nconst handleClick = () => {\n    mitt.emit('handleChange')\n}\n</script>\n\n// 컴포넌트 B \n<script setup>\nimport mitt from './mitt'\nimport { onUnmounted } from 'vue'\nconst someMethed = () => { ... }\nmitt.on('handleChange',someMethed)\nonUnmounted(()=>{\n    mitt.off('handleChange',someMethed)\n})\n</script>\r\n```\n\n<div class=\"content-ad\"></div>\n\n# 슬롯\n\n슬롯은 부모 구성 요소가 자식 구성 요소의 콘텐츠 일부를 제어할 수 있도록 합니다. 재사용 가능하고 유연한 구성 요소 템플릿을 만드는 데 유용합니다.\n\n## 기본 슬롯\n\n```js\n// Parent.vue\n<FancyButton>\n  Click me! <!-- 슬롯 콘텐츠 -->\n</FancyButton>\n\n// Child.vue\n<button class=\"fancy-btn\">\n  <slot></slot> <!-- 슬롯 출력 -->\n</button>\n```\n\n<div class=\"content-ad\"></div>\n\n## 이름이 지정된 슬롯\n\n이름이 지정된 슬롯은 기본 슬롯을 기반으로 한 분류이며, 내용물을 해당 자리 표시자에 일치시키는 것으로 이해할 수 있습니다.\n\n```js\n// Parent.vue\n<template>\n  <Child>\n    <template v-slot:monkey>\n      <div>monkey</div>\n    </template>\n\n    <button>Click me!</button>\n  </Child>\n</template>\n\n// Child.vue\n<template>\n  <div>\n    <!-- 기본 슬롯 -->\n    <slot></slot>\n    <!-- 이름이 지정된 슬롯 -->\n    <slot name=\"monkey\"></slot>\n  </div>\n</template>\n```\n\n## 스코프 있는 슬롯\n\n<div class=\"content-ad\"></div>\n\n슬롯의 내용은 자식 컴포넌트의 상태에 액세스할 수 없습니다. 그러나 경우에 따라 슬롯의 내용이 부모 컴포넌트의 sphere와 자식 컴포넌트의 sphere에서 데이터를 사용하고 싶을 수 있습니다. 이를 달성하기 위해서는 렌더링 시 자식 컴포넌트가 슬롯에 데이터를 제공할 수 있는 방법이 필요합니다.\n\n```js\n// Parent.vue\n<template>\n  <!-- v-slot=\"{scope}\"은 자식 컴포넌트에서 전달된 데이터를 수신하는 데 사용됩니다 -->\n  <!-- :list=\"list\"은 리스트를 자식 컴포넌트에 전달합니다 -->\n  <Child v-slot=\"{scope}\" :list=\"list\">\n    <div>\n      <div>Name: { scope.name }</div>\n      <div>Occupation: { scope.occupation }</div>\n      <hr>\n    </div>\n  </Child>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport Child from './components/Child.vue'\n\nconst list = ref([\n  { name: 'Jhon', occupation: 'Thundering'},\n  ...\n])\n</script>\n\n// Child.vue\n<template>\n  <div>\n    <!-- 각 항목을 반환하려면 :scope=\"item\"을 사용합니다 -->\n    <slot v-for=\"item in list\" :scope=\"item\" />\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps({\n  list: {\n    type: Array,\n    default: () => []\n  }\n})\n</script>\r\n```\n\n# Stackademic 🎓\n\n끝까지 읽어주셔서 감사합니다. 가기 전에:\n\n<div class=\"content-ad\"></div>\n\n- 작가에게 박수와 팔로우를 부탁드립니다! 👏\n- 팔로우하기: X | LinkedIn | YouTube | Discord\n- 다른 플랫폼 방문하기: In Plain English | CoFeed | Differ\n- 더 많은 콘텐츠: Stackademic.com","ogImage":{"url":"/assets/img/2024-06-20-9WaysofComponentCommunicationinVue3_0.png"},"coverImage":"/assets/img/2024-06-20-9WaysofComponentCommunicationinVue3_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-20-9WaysofComponentCommunicationinVue3_0.png\" alt=\"이미지\"></p>\n<h1>개요</h1>\n<ul>\n<li>props / emit</li>\n<li>provide / inject</li>\n<li>Pinia</li>\n<li>expose / ref</li>\n<li>attr</li>\n<li>v-model</li>\n<li>mitt.js</li>\n<li>Slots</li>\n<li>Teleport</li>\n</ul>\n<h1>Props / Emit</h1>\n<p>부모 컴포넌트는 props를 사용하여 데이터를 자식 컴포넌트로 전달하고, 자식 컴포넌트는 이벤트를 사용하여 부모 컴포넌트에 데이터를 전달합니다.</p>\n<p>부모 컴포넌트에서 데이터를 자식 컴포넌트로 전달합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Parent.vue에서 전송</span>\n&#x3C;child :msg2=<span class=\"hljs-string\">\"msg2\"</span>>&#x3C;/child>\n&#x3C;script setup lang=\"ts\">\n    import child from \"./child.vue\"\n    import { ref, reactive } from \"vue\"\n    const msg2 = ref&#x3C;string>(\"자식 컴포넌트로 전송되는 메시지 2입니다\")\n    // 복잡한 타입의 경우\n    const msg2 = reactive&#x3C;string>([\"하위 컴포넌트로 전송되는 메시지 2입니다\"])\n&#x3C;/script>\n\n// Child.vue에서 수신\n&#x3C;script setup lang=\"ts\">\n    // import 할 필요 없이 직접 사용합니다\n    // import { defineProps } from \"vue\"\n    interface Props {\n      msg1: string\n      msg2: string\n    }\n    const props = withDefaults(defineProps&#x3C;Props>(), {\n      msg1: '',\n      msg2: '',\n    })\n    console.log(props) // { msg2: \"하위 컴포넌트로 전송되는 메시지 2입니다\" }\n&#x3C;/script>\n</code></pre>\n<p>참고:</p>\n<p>부모 컴포넌트가 setup() 메서드를 사용하고 자식 컴포넌트가 script setup 구문을 사용하는 경우, 부모의 데이터에서 속성을 전달받지 못하며 부모의 setup 함수에서 전달받은 속성만 받을 수 있습니다.</p>\n<p>부모 컴포넌트가 script setup 구문을 사용하고 자식 컴포넌트가 setup() 메서드를 사용하는 경우, 자식은 부모의 데이터 및 setup 함수에서 속성을 모두 받을 수 있습니다. 그러나 자식 컴포넌트가 setup에서 속성을 받으려면 부모의 setup 함수에서만 속성을 받을 수 있고 데이터 속성에서는 받을 수 없습니다.</p>\n<p>자식 컴포넌트가 부모로 데이터를 전달</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Child.vue dispatch</span>\n&#x3C;template>\n    <span class=\"hljs-comment\">// 방법 1</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"emit('myClick')\"</span>></span>버튼<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n    <span class=\"hljs-comment\">// 방법 2</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"handleClick\"</span>></span>버튼<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n&#x3C;/template>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"ts\"</span>></span><span class=\"javascript\">\n    \n    <span class=\"hljs-comment\">// 방법 1: Vue3.2 버전에 적합, import 필요 없음</span>\n    <span class=\"hljs-comment\">// import { defineEmits } from \"vue\"</span>\n    <span class=\"hljs-comment\">// 방법 1에 대응</span>\n    <span class=\"hljs-keyword\">const</span> emit = <span class=\"hljs-title function_\">defineEmits</span>([<span class=\"hljs-string\">\"myClick\"</span>,<span class=\"hljs-string\">\"myClick2\"</span>])\n    <span class=\"hljs-comment\">// 방법 2에 대응</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleClick</span> = (<span class=\"hljs-params\"></span>)=>{\n        <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">\"myClick\"</span>, <span class=\"hljs-string\">\"부모 컴포넌트로 전송된 메시지입니다\"</span>)\n    }\n    \n    <span class=\"hljs-comment\">// 방법 2: Vue3.2 버전에 적합하지 않음, useContext()는 사용이 중단됨</span>\n    <span class=\"hljs-keyword\">import</span> { useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n    <span class=\"hljs-keyword\">const</span> { emit } = <span class=\"hljs-title function_\">useContext</span>()\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleClick</span> = (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">\"myClick\"</span>, <span class=\"hljs-string\">\"부모 컴포넌트로 전송된 메시지입니다\"</span>)\n    }\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n<span class=\"hljs-comment\">// Parent.vue response</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">child</span> @<span class=\"hljs-attr\">myClick</span>=<span class=\"hljs-string\">\"onMyClick\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">child</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"ts\"</span>></span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> child <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./child.vue\"</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onMyClick</span> = (<span class=\"hljs-params\">msg: string</span>) => {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(msg) <span class=\"hljs-comment\">// 부모 컴포넌트가 받은 메시지입니다</span>\n    }\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n</code></pre>\n<h1>제공 / 주입</h1>\n<p>이 매커니즘은 부모로부터 하위 구성 요소 중 어떤 것이든 종속성 주입을 개발하는 데 사용됩니다. 반드시 직계 자식 구성 요소일 필요는 없습니다.</p>\n<p>제공: 우리가 지정한 데이터를 주입할 수 있도록 합니다.</p>\n<p>주입: 어떠한 하위 구성 요소에서도 이 구성 요소에 추가하고 싶은 데이터를 수신합니다. 구성 요소가 얼마나 심층적으로 중첩되었는지와는 관계없이 직접 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Parent.vue</span>\n&#x3C;script setup>\n    <span class=\"hljs-keyword\">import</span> { provide } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n    <span class=\"hljs-title function_\">provide</span>(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"Jhon\"</span>)\n&#x3C;/script>\n\n<span class=\"hljs-comment\">// Child.vue</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> { inject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n    <span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-string\">\"name\"</span>)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name) <span class=\"hljs-comment\">// Jhon</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n</code></pre>\n<h1>Pinia</h1>\n<p>Pinia는 Vuex의 대체로 설계된 새로운 Vue 상태 관리 라이브러리입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// main.ts</span>\n<span class=\"hljs-keyword\">import</span> { createPinia } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'pinia'</span>\n<span class=\"hljs-title function_\">createApp</span>(<span class=\"hljs-title class_\">App</span>).<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title function_\">createPinia</span>()).<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">'#app'</span>)\n\n<span class=\"hljs-comment\">// /store/user.ts</span>\n<span class=\"hljs-keyword\">import</span> { defineStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'pinia'</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> userStore = <span class=\"hljs-title function_\">defineStore</span>(<span class=\"hljs-string\">'user'</span>, {\n    <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-keyword\">return</span> { \n            <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-attr\">arr</span>: []\n        }\n    },\n    <span class=\"hljs-attr\">getters</span>: { ... },\n    <span class=\"hljs-attr\">actions</span>: { ... }\n})\n\n<span class=\"hljs-comment\">// Page.vue</span>\n&#x3C;template>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>{ store.count }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n&#x3C;/template>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"ts\"</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { userStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../store'</span>\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">userStore</span>()\n<span class=\"hljs-comment\">// 분해할당</span>\n<span class=\"hljs-comment\">// const { count } = userStore()</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n</code></pre>\n<h1>노출 / 참조</h1>\n<p>참조는 부모 구성 요소가 자식 구성 요소의 인스턴스나 요소에 직접 액세스하는 데 사용될 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Child.vue</span>\n&#x3C;script setup>\n    <span class=\"hljs-comment\">// 방법 1 Vue 3.2 버전에 적합하지 않으며,이 버전에서 useContext()는 사용되지 않습니다.</span>\n    <span class=\"hljs-keyword\">import</span> { useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n    <span class=\"hljs-keyword\">const</span> ctx = <span class=\"hljs-title function_\">useContext</span>()\n    <span class=\"hljs-comment\">// 노출된 속성 및 메서드 등</span>\n    ctx.<span class=\"hljs-title function_\">expose</span>({\n        <span class=\"hljs-attr\">childName</span>: <span class=\"hljs-string\">\"이것은 자식 구성 요소의 속성입니다\"</span>,\n        <span class=\"hljs-title function_\">someMethod</span>(<span class=\"hljs-params\"></span>){\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"이것은 자식 구성 요소의 메서드입니다\"</span>)\n        }\n    })\n    \n    <span class=\"hljs-comment\">// 방법 2 Vue 3.2 버전에 적합하며, import할 필요가 없습니다.</span>\n    <span class=\"hljs-comment\">// import { defineExpose } from \"vue\"</span>\n    <span class=\"hljs-title function_\">defineExpose</span>({\n        <span class=\"hljs-attr\">childName</span>: <span class=\"hljs-string\">\"이것은 자식 구성 요소의 속성입니다\"</span>,\n        <span class=\"hljs-title function_\">someMethod</span>(<span class=\"hljs-params\"></span>){\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"이것은 자식 구성 요소의 메서드입니다\"</span>)\n        }\n    })\n&#x3C;/script>\n\n<span class=\"hljs-comment\">// Parent.vue  참조 ref=\"comp\"</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">child</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"comp\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">child</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"handlerClick\"</span>></span>버튼<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> child <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./child.vue\"</span>\n    <span class=\"hljs-keyword\">import</span> { ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n    <span class=\"hljs-keyword\">const</span> comp = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-literal\">null</span>)\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handlerClick</span> = (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(comp.<span class=\"hljs-property\">value</span>.<span class=\"hljs-property\">childName</span>) <span class=\"hljs-comment\">// 자식 구성 요소에서 노출된 속성 가져오기</span>\n        comp.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">someMethod</span>() <span class=\"hljs-comment\">// 자식 구성 요소에서 노출된 메서드 호출</span>\n    }\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n</code></pre>\n<h1>attrs</h1>\n<p>attrs: 부모 스코프에서 클래스 및 스타일을 제외한 컬렉션을 포함합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Parent.vue에서 전송</span>\n&#x3C;child :msg1=<span class=\"hljs-string\">\"msg1\"</span> :msg2=<span class=\"hljs-string\">\"msg2\"</span> title=<span class=\"hljs-string\">\"3333\"</span>>&#x3C;/child>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> child <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./child.vue\"</span>\n    <span class=\"hljs-keyword\">import</span> { ref, reactive } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n    <span class=\"hljs-keyword\">const</span> msg1 = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">\"1111\"</span>)\n    <span class=\"hljs-keyword\">const</span> msg2 = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">\"2222\"</span>)\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n<span class=\"hljs-comment\">// Child.vue에서 수신</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> { defineProps, useAttrs } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n    <span class=\"hljs-keyword\">const</span> props = <span class=\"hljs-title function_\">defineProps</span>({\n        <span class=\"hljs-attr\">msg1</span>: <span class=\"hljs-title class_\">String</span>\n    })\n\n    <span class=\"hljs-keyword\">const</span> attrs = <span class=\"hljs-title function_\">useAttrs</span>()\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(attrs) <span class=\"hljs-comment\">// { msg2:\"2222\", title: \"3333\" }</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n</code></pre>\n<h1>v-model</h1>\n<p>여러 데이터 요소에 대한 양방향 데이터 바인딩을 지원합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Parent.vue</span>\n&#x3C;child v-<span class=\"hljs-attr\">model</span>:key=<span class=\"hljs-string\">\"key\"</span> v-<span class=\"hljs-attr\">model</span>:value=<span class=\"hljs-string\">\"value\"</span>>&#x3C;/child>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> child <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./child.vue\"</span>\n    <span class=\"hljs-keyword\">import</span> { ref, reactive } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n    <span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">\"1111\"</span>)\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">\"2222\"</span>)\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n<span class=\"hljs-comment\">// Child.vue</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"handlerClick\"</span>></span>Button<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n    \n    <span class=\"hljs-comment\">// Method 1은 useContext()이 폐기됨에 따라 Vue 3.2 버전에 적합하지 않습니다.</span>\n    <span class=\"hljs-keyword\">import</span> { useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n    <span class=\"hljs-keyword\">const</span> { emit } = <span class=\"hljs-title function_\">useContext</span>()\n    \n    <span class=\"hljs-comment\">// Method 2는 Vue 3.2 버전에 적합하며, import 할 필요가 없습니다.</span>\n    <span class=\"hljs-comment\">// import { defineEmits } from \"vue\"</span>\n    <span class=\"hljs-keyword\">const</span> emit = <span class=\"hljs-title function_\">defineEmits</span>([<span class=\"hljs-string\">\"key\"</span>,<span class=\"hljs-string\">\"value\"</span>])\n    \n    <span class=\"hljs-comment\">// 사용법</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handlerClick</span> = (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">\"update:key\"</span>, <span class=\"hljs-string\">\"새로운 키\"</span>)\n        <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">\"update:value\"</span>, <span class=\"hljs-string\">\"새로운 값\"</span>)\n    }\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n</code></pre>\n<h1>mitt.js</h1>\n<p>Vue3에서는 컴포넌트간 통신을 위한 EventBus가 더 이상 사용되지 않지만, EventBus와 동일한 원리를 기반으로 하는 mitt.js라는 대체 방법이 새롭게 도입되었습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// mitt.js</span>\n<span class=\"hljs-keyword\">import</span> mitt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'mitt'</span>\n<span class=\"hljs-keyword\">const</span> mitt = <span class=\"hljs-title function_\">mitt</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> mitt;\n\n<span class=\"hljs-comment\">// 컴포넌트 A</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> mitt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./mitt'</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleClick</span> = (<span class=\"hljs-params\"></span>) => {\n    mitt.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">'handleChange'</span>)\n}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n<span class=\"hljs-comment\">// 컴포넌트 B </span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> mitt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./mitt'</span>\n<span class=\"hljs-keyword\">import</span> { onUnmounted } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">someMethed</span> = (<span class=\"hljs-params\"></span>) => { ... }\nmitt.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'handleChange'</span>,someMethed)\n<span class=\"hljs-title function_\">onUnmounted</span>(<span class=\"hljs-function\">()=></span>{\n    mitt.<span class=\"hljs-title function_\">off</span>(<span class=\"hljs-string\">'handleChange'</span>,someMethed)\n})\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n</code></pre>\n<h1>슬롯</h1>\n<p>슬롯은 부모 구성 요소가 자식 구성 요소의 콘텐츠 일부를 제어할 수 있도록 합니다. 재사용 가능하고 유연한 구성 요소 템플릿을 만드는 데 유용합니다.</p>\n<h2>기본 슬롯</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Parent.vue</span>\n&#x3C;<span class=\"hljs-title class_\">FancyButton</span>>\n  <span class=\"hljs-title class_\">Click</span> me! &#x3C;!-- 슬롯 콘텐츠 -->\n&#x3C;/<span class=\"hljs-title class_\">FancyButton</span>>\n\n<span class=\"hljs-comment\">// Child.vue</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fancy-btn\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">slot</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">slot</span>></span> <span class=\"hljs-comment\">&#x3C;!-- 슬롯 출력 --></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n</code></pre>\n<h2>이름이 지정된 슬롯</h2>\n<p>이름이 지정된 슬롯은 기본 슬롯을 기반으로 한 분류이며, 내용물을 해당 자리 표시자에 일치시키는 것으로 이해할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Parent.vue</span>\n&#x3C;template>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Child</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:monkey</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>monkey<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>Click me!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Child</span>></span></span>\n&#x3C;/template>\n\n<span class=\"hljs-comment\">// Child.vue</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-comment\">&#x3C;!-- 기본 슬롯 --></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">slot</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">slot</span>></span>\n    <span class=\"hljs-comment\">&#x3C;!-- 이름이 지정된 슬롯 --></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"monkey\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">slot</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n</code></pre>\n<h2>스코프 있는 슬롯</h2>\n<p>슬롯의 내용은 자식 컴포넌트의 상태에 액세스할 수 없습니다. 그러나 경우에 따라 슬롯의 내용이 부모 컴포넌트의 sphere와 자식 컴포넌트의 sphere에서 데이터를 사용하고 싶을 수 있습니다. 이를 달성하기 위해서는 렌더링 시 자식 컴포넌트가 슬롯에 데이터를 제공할 수 있는 방법이 필요합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Parent.vue</span>\n&#x3C;template>\n  &#x3C;!-- v-slot=<span class=\"hljs-string\">\"{scope}\"</span>은 자식 컴포넌트에서 전달된 데이터를 수신하는 데 사용됩니다 -->\n  &#x3C;!-- :list=<span class=\"hljs-string\">\"list\"</span>은 리스트를 자식 컴포넌트에 전달합니다 -->\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Child</span> <span class=\"hljs-attr\">v-slot</span>=<span class=\"hljs-string\">\"{scope}\"</span> <span class=\"hljs-attr\">:list</span>=<span class=\"hljs-string\">\"list\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Name: { scope.name }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Occupation: { scope.occupation }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">hr</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Child</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Child</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Child.vue'</span>\n\n<span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-title function_\">ref</span>([\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Jhon'</span>, <span class=\"hljs-attr\">occupation</span>: <span class=\"hljs-string\">'Thundering'</span>},\n  ...\n])\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n<span class=\"hljs-comment\">// Child.vue</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-comment\">&#x3C;!-- 각 항목을 반환하려면 :scope=\"item\"을 사용합니다 --></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"item in list\"</span> <span class=\"hljs-attr\">:scope</span>=<span class=\"hljs-string\">\"item\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n<span class=\"hljs-keyword\">const</span> props = <span class=\"hljs-title function_\">defineProps</span>({\n  <span class=\"hljs-attr\">list</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Array</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-function\">() =></span> []\n  }\n})\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n</code></pre>\n<h1>Stackademic 🎓</h1>\n<p>끝까지 읽어주셔서 감사합니다. 가기 전에:</p>\n<ul>\n<li>작가에게 박수와 팔로우를 부탁드립니다! 👏</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord</li>\n<li>다른 플랫폼 방문하기: In Plain English | CoFeed | Differ</li>\n<li>더 많은 콘텐츠: Stackademic.com</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}