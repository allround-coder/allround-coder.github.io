{"pageProps":{"post":{"title":"API에 대한 동시 요청 처리하기 Nodejs, AWS","description":"","date":"2024-06-20 04:20","slug":"2024-06-20-HandlingConcurrentRequeststoanAPINodejsAWS","content":"\n\n동시에 여러 입찰을 처리하고 실시간 입찰 시스템에서 우승자를 결정하는 것은 데이터 일관성과 공정성을 보장할 때 특히 어려울 수 있습니다. diff database를 사용할 수도 있어요.\n\n단계\n\n## Node.js 서버 설정\n\nExpress 및 Mongoose가 포함된 기본 Node.js 서버를 설정하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm init -y\nnpm install express mongoose body-parser\n```\n\n```js\nsaas-bidding/\n│\n├── models/\n│   ├── bid.js\n│   └── auction.js\n│\n├── routes/\n│   ├── bids.js\n│   └── auctions.js\n│\n├── app.js\n└── config.js\n```\n\nconfig.js\n\n```js\n// config.js\nmodule.exports = {\n  mongoURI: 'mongodb://localhost:27017/saasbidding',\n  port: 3000\n};\n```\n\n<div class=\"content-ad\"></div>\n\n더하기 기호 뒤에 해당 값을 입력하세요:\n\nMongoose 모델 생성\n\n경매 모델 (models/auction.js)\n\n```js\n// models/auction.js\nconst mongoose = require('mongoose');\n\nconst AuctionSchema = new mongoose.Schema({\n  product: { type: String, required: true },\n  startingPrice: { type: Number, required: true },\n  currentHighestBid: { type: Number, default: 0 },\n  highestBidder: { type: mongoose.Schema.Types.ObjectId, ref: 'Bidder' },\n  endTime: { type: Date, required: true }\n});\n\nmodule.exports = mongoose.model('Auction', AuctionSchema);\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n// models/bid.js\nconst mongoose = require('mongoose');\n\nconst BidSchema = new mongoose.Schema({\n  auctionId: { type: mongoose.Schema.Types.ObjectId, ref: 'Auction', required: true },\n  bidderId: { type: mongoose.Schema.Types.ObjectId, ref: 'Bidder', required: true },\n  bidAmount: { type: Number, required: true },\n  timestamp: { type: Date, default: Date.now }\n});\n\nmodule.exports = mongoose.model('Bid', BidSchema);\n```\n\n## Express and Mongoose (app.js)\n\n```js\n// app.js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst config = require('./config');\n\nconst app = express();\n\nmongoose.connect(config.mongoURI, { useNewUrlParser: true, useUnifiedTopology: true });\n\napp.use(bodyParser.json());\n\n// Routes\napp.use('/bids', require('./routes/bids'));\napp.use('/auctions', require('./routes/auctions'));\n\napp.listen(config.port, () => {\n  console.log(`Server is running on port ${config.port}`);\n});\n```\n\nBids 및 Auctions에 대한 라우팅\n\n<div class=\"content-ad\"></div>\n\n경매 라우트(Auction Routes)는 다음과 같습니다(routes/auctions.js)\n\n```js\n// routes/auctions.js\nconst express = require('express');\nconst Auction = require('../models/auction');\nconst router = express.Router();\n\n// 새 경매 생성\nrouter.post('/', async (req, res) => {\n  const { product, startingPrice, endTime } = req.body;\n  const auction = new Auction({ product, startingPrice, endTime });\n  await auction.save();\n  res.status(201).send(auction);\n});\n\n// 경매 세부 정보 가져오기\nrouter.get('/:id', async (req, res) => {\n  const { id } = req.params;\n  const auction = await Auction.findById(id).populate('highestBidder');\n  res.send(auction);\n});\n\nmodule.exports = router;\n```\n\n입찰 라우트(Bid Routes)는 다음과 같습니다(routes/bids.js)\n\n```js\n// routes/bids.js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst Bid = require('../models/bid');\nconst Auction = require('../models/auction');\nconst router = express.Router();\n\n// 입찰하기\nrouter.post('/', async (req, res) => {\n  const session = await mongoose.startSession();\n  session.startTransaction();\n  try {\n    const { auctionId, bidderId, bidAmount } = req.body;\n\n    // 경매 찾기\n    const auction = await Auction.findById(auctionId).session(session);\n    if (!auction) {\n      throw new Error('경매를 찾을 수 없습니다');\n    }\n\n    // 입찰이 현재 최고 입찰보다 높은지 확인\n    if (bidAmount <= auction.currentHighestBid) {\n      throw new Error('입찰 금액은 현재 최고 입찰보다 높아야 합니다');\n    }\n\n    // 새로운 입찰 생성\n    const bid = new Bid({ auctionId, bidderId, bidAmount });\n    await bid.save({ session });\n\n    // 경매에 새로운 최고 입찰로 업데이트\n    auction.currentHighestBid = bidAmount;\n    auction.highestBidder = bidderId;\n    await auction.save({ session });\n\n    await session.commitTransaction();\n    session.endSession();\n    res.status(201).send(bid);\n  } catch (error) {\n    await session.abortTransaction();\n    session.endSession();\n    res.status(400).send({ error: error.message });\n  }\n});\n\n// 특정 경매에 대한 모든 입찰 가져오기\nrouter.get('/:auctionId', async (req, res) => {\n  const { auctionId } = req.params;\n  const bids = await Bid.find({ auctionId }).sort({ timestamp: -1 });\n  res.send(bids);\n});\n\nmodule.exports = router;\n```\n\n<div class=\"content-ad\"></div>\n\n# 동시에 발생하는 입찰 처리\n\n동시에 발생하는 입찰을 효율적으로 처리하기 위해 MongoDB의 세션과 트랜잭션 기능을 사용하여 원자성을 보장합니다. 주요 단계는 다음과 같습니다:\n\n- 세션 및 트랜잭션 시작: 세션을 시작하여 세션 내의 작업이 원자적으로 실행되도록 합니다.\n- 경매 유효성 검사: 경매가 존재하고 유효한지 확인합니다.\n- 입찰 유효성 검사: 현재 가장 높은 입찰가보다 입찰이 높은지 확인합니다.\n- 경매 업데이트: 입찰이 유효한 경우 새로운 최고 입찰가로 경매를 업데이트합니다.\n- 트랜잭션 커밋: 변경 사항을 영구적으로 만들기 위해 트랜잭션을 커밋합니다.\n- 오류 처리: 오류 발생 시 트랜잭션을 중단하여 데이터 일관성을 보장합니다.\n\n# AWS 및 자동 스케일링을 활용하여 더 최적화해봅시다.\n\n<div class=\"content-ad\"></div>\n\n# 주요 구성 요소\n\n- Node.js 어플리케이션: API 요청을 처리합니다.\n- 부하 분산 장치: 여러 인스턴스에 들어오는 트래픽을 분산합니다.\n- 자동 확장: 트래픽에 기반하여 인스턴스 수를 자동으로 조정합니다.\n- 메시지 큐: 입찰 요청을 비동기적으로 처리합니다.\n- 데이터베이스: 동시에 발생하는 쓰기 및 읽기 작업을 효율적으로 처리합니다.\n- 캐시: 읽기 작업을 가속화하고 데이터베이스에 가해지는 부하를 감소시킵니다.\n- 마이크로서비스 아키텍처: 구성요소를 분리하고 특정 작업을 효율적으로 처리합니다.\n\n# AWS 아키텍처\n\n- 탄력적 부하 분산기 (ELB): 입찰 요청을 분산합니다.\n- 자동 확장 그룹: 응용프로그램 인스턴스가 부하를 처리할 수 있는지 확인합니다.\n- Amazon SQS (Simple Queue Service): 입찰 요청 큐를 관리합니다.\n- Amazon RDS/DynamoDB: 경매 및 입찰 데이터를 저장합니다.\n- Amazon ElastiCache (Redis): 빈번하게 액세스되는 데이터를 캐싱합니다.\n- Worker 노드: 큐에서 입찰 요청을 처리합니다.\n- Amazon CloudWatch: 인프라를 모니터링하고 확장합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-20-HandlingConcurrentRequeststoanAPINodejsAWS_0.png)\n\n단계\n\nnode.js\n\n```js\nnpm init -y\nnpm install express body-parser aws-sdk\n```\n\n<div class=\"content-ad\"></div>\n\nconfig.js\n\n```js\nmodule.exports = {\n  awsRegion: 'us-east-1',\n  sqsQueueUrl: 'YOUR_SQS_QUEUE_URL',\n  mongoURI: 'mongodb://localhost:27017/saasbidding',\n  port: 3000\n};\n```\n\napp.js\n\n```js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst AWS = require('aws-sdk');\nconst config = require('./config');\n\nconst app = express();\napp.use(bodyParser.json());\n\nAWS.config.update({ region: config.awsRegion });\n\nconst sqs = new AWS.SQS();\n\napp.post('/bid', async (req, res) => {\n  const { auctionId, bidderId, bidAmount } = req.body;\n\n  const params = {\n    MessageBody: JSON.stringify({ auctionId, bidderId, bidAmount }),\n    QueueUrl: config.sqsQueueUrl\n  };\n\n  try {\n    await sqs.sendMessage(params).promise();\n    res.status(200).send({ message: 'Bid received' });\n  } catch (error) {\n    res.status(500).send({ error: 'Failed to process bid' });\n  }\n});\n\napp.listen(config.port, () => {\n  console.log(`Server is running on port ${config.port}`);\n});\n```\n\n<div class=\"content-ad\"></div>\n\nWorker.js 파일 — 이 파일은 SQS에서 메시지를 처리하고 데이터베이스를 업데이트합니다.\n\n```js\nconst AWS = require('aws-sdk');\nconst mongoose = require('mongoose');\nconst Auction = require('./models/auction');\nconst Bid = require('./models/bid');\nconst config = require('./config');\n\nAWS.config.update({ region: config.awsRegion });\n\nconst sqs = new AWS.SQS();\nconst queueUrl = config.sqsQueueUrl;\n\nmongoose.connect(config.mongoURI, { useNewUrlParser: true, useUnifiedTopology: true });\n\nconst processBid = async (message) => {\n  const { auctionId, bidderId, bidAmount } = JSON.parse(message.Body);\n\n  const session = await mongoose.startSession();\n  session.startTransaction();\n  try {\n    const auction = await Auction.findById(auctionId).session(session);\n    if (bidAmount <= auction.currentHighestBid) {\n      throw new Error('Bid amount must be higher than the current highest bid');\n    }\n\n    const bid = new Bid({ auctionId, bidderId, bidAmount });\n    await bid.save({ session });\n\n    auction.currentHighestBid = bidAmount;\n    auction.highestBidder = bidderId;\n    await auction.save({ session });\n\n    await session.commitTransaction();\n    session.endSession();\n  } catch (error) {\n    await session.abortTransaction();\n    session.endSession();\n    throw error;\n  }\n};\n\nconst pollQueue = async () => {\n  const params = {\n    QueueUrl: queueUrl,\n    MaxNumberOfMessages: 10,\n    WaitTimeSeconds: 20\n  };\n\n  try {\n    const data = await sqs.receiveMessage(params).promise();\n    if (data.Messages) {\n      for (const message of data.Messages) {\n        try {\n          await processBid(message);\n          await sqs.deleteMessage({ QueueUrl: queueUrl, ReceiptHandle: message.ReceiptHandle }).promise();\n        } catch (error) {\n          console.error('Failed to process bid', error);\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Failed to receive messages', error);\n  }\n\n  setImmediate(pollQueue);\n};\n\npollQueue();\r\n```\n\n## AWS 리소스 구성\n\n- Elastic Load Balancer: ELB를 설정하여 여러 EC2 인스턴스 간에 들어오는 트래픽을 분산합니다.\n- Auto Scaling 그룹: 트래픽 패턴에 따라 EC2 인스턴스를 추가하거나 제거할 수 있도록 자동 스케일링을 구성합니다.\n- Amazon SQS: 수신된 입찰 요청을 관리하기 위한 SQS 대기열을 생성합니다.\n- Amazon RDS/DynamoDB: 경매 및 입찰 데이터를 처리할 데이터베이스를 설정합니다.\n- Amazon ElastiCache (Redis): 자주 액세스되는 데이터를 캐싱하여 데이터베이스 부하를 줄이기 위해 Redis를 사용합니다.\n- Amazon CloudWatch: 인프라를 모니터링하고 스케일링 이벤트를 트리거할 알림을 설정합니다.\n\n\n<div class=\"content-ad\"></div>\n\n주의 : 이 코드는 샘플입니다. 조심해서 사용해주세요.","ogImage":{"url":"/assets/img/2024-06-20-HandlingConcurrentRequeststoanAPINodejsAWS_0.png"},"coverImage":"/assets/img/2024-06-20-HandlingConcurrentRequeststoanAPINodejsAWS_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>동시에 여러 입찰을 처리하고 실시간 입찰 시스템에서 우승자를 결정하는 것은 데이터 일관성과 공정성을 보장할 때 특히 어려울 수 있습니다. diff database를 사용할 수도 있어요.</p>\n<p>단계</p>\n<h2>Node.js 서버 설정</h2>\n<p>Express 및 Mongoose가 포함된 기본 Node.js 서버를 설정하세요.</p>\n<pre><code class=\"hljs language-js\">npm init -y\nnpm install express mongoose body-parser\n</code></pre>\n<pre><code class=\"hljs language-js\">saas-bidding/\n│\n├── models/\n│   ├── bid.<span class=\"hljs-property\">js</span>\n│   └── auction.<span class=\"hljs-property\">js</span>\n│\n├── routes/\n│   ├── bids.<span class=\"hljs-property\">js</span>\n│   └── auctions.<span class=\"hljs-property\">js</span>\n│\n├── app.<span class=\"hljs-property\">js</span>\n└── config.<span class=\"hljs-property\">js</span>\n</code></pre>\n<p>config.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// config.js</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">mongoURI</span>: <span class=\"hljs-string\">'mongodb://localhost:27017/saasbidding'</span>,\n  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3000</span>\n};\n</code></pre>\n<p>더하기 기호 뒤에 해당 값을 입력하세요:</p>\n<p>Mongoose 모델 생성</p>\n<p>경매 모델 (models/auction.js)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// models/auction.js</span>\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">AuctionSchema</span> = <span class=\"hljs-keyword\">new</span> mongoose.<span class=\"hljs-title class_\">Schema</span>({\n  <span class=\"hljs-attr\">product</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> },\n  <span class=\"hljs-attr\">startingPrice</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Number</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> },\n  <span class=\"hljs-attr\">currentHighestBid</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Number</span>, <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span> },\n  <span class=\"hljs-attr\">highestBidder</span>: { <span class=\"hljs-attr\">type</span>: mongoose.<span class=\"hljs-property\">Schema</span>.<span class=\"hljs-property\">Types</span>.<span class=\"hljs-property\">ObjectId</span>, <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">'Bidder'</span> },\n  <span class=\"hljs-attr\">endTime</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Date</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> }\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = mongoose.<span class=\"hljs-title function_\">model</span>(<span class=\"hljs-string\">'Auction'</span>, <span class=\"hljs-title class_\">AuctionSchema</span>);\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// models/bid.js</span>\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">BidSchema</span> = <span class=\"hljs-keyword\">new</span> mongoose.<span class=\"hljs-title class_\">Schema</span>({\n  <span class=\"hljs-attr\">auctionId</span>: { <span class=\"hljs-attr\">type</span>: mongoose.<span class=\"hljs-property\">Schema</span>.<span class=\"hljs-property\">Types</span>.<span class=\"hljs-property\">ObjectId</span>, <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">'Auction'</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> },\n  <span class=\"hljs-attr\">bidderId</span>: { <span class=\"hljs-attr\">type</span>: mongoose.<span class=\"hljs-property\">Schema</span>.<span class=\"hljs-property\">Types</span>.<span class=\"hljs-property\">ObjectId</span>, <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">'Bidder'</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> },\n  <span class=\"hljs-attr\">bidAmount</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Number</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> },\n  <span class=\"hljs-attr\">timestamp</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Date</span>, <span class=\"hljs-attr\">default</span>: <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-property\">now</span> }\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = mongoose.<span class=\"hljs-title function_\">model</span>(<span class=\"hljs-string\">'Bid'</span>, <span class=\"hljs-title class_\">BidSchema</span>);\n</code></pre>\n<h2>Express and Mongoose (app.js)</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// app.js</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n<span class=\"hljs-keyword\">const</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'body-parser'</span>);\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./config'</span>);\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n\nmongoose.<span class=\"hljs-title function_\">connect</span>(config.<span class=\"hljs-property\">mongoURI</span>, { <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">useUnifiedTopology</span>: <span class=\"hljs-literal\">true</span> });\n\napp.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">json</span>());\n\n<span class=\"hljs-comment\">// Routes</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'/bids'</span>, <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./routes/bids'</span>));\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'/auctions'</span>, <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./routes/auctions'</span>));\n\napp.<span class=\"hljs-title function_\">listen</span>(config.<span class=\"hljs-property\">port</span>, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Server is running on port <span class=\"hljs-subst\">${config.port}</span>`</span>);\n});\n</code></pre>\n<p>Bids 및 Auctions에 대한 라우팅</p>\n<p>경매 라우트(Auction Routes)는 다음과 같습니다(routes/auctions.js)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// routes/auctions.js</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Auction</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../models/auction'</span>);\n<span class=\"hljs-keyword\">const</span> router = express.<span class=\"hljs-title class_\">Router</span>();\n\n<span class=\"hljs-comment\">// 새 경매 생성</span>\nrouter.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n  <span class=\"hljs-keyword\">const</span> { product, startingPrice, endTime } = req.<span class=\"hljs-property\">body</span>;\n  <span class=\"hljs-keyword\">const</span> auction = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Auction</span>({ product, startingPrice, endTime });\n  <span class=\"hljs-keyword\">await</span> auction.<span class=\"hljs-title function_\">save</span>();\n  res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">201</span>).<span class=\"hljs-title function_\">send</span>(auction);\n});\n\n<span class=\"hljs-comment\">// 경매 세부 정보 가져오기</span>\nrouter.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/:id'</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n  <span class=\"hljs-keyword\">const</span> { id } = req.<span class=\"hljs-property\">params</span>;\n  <span class=\"hljs-keyword\">const</span> auction = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Auction</span>.<span class=\"hljs-title function_\">findById</span>(id).<span class=\"hljs-title function_\">populate</span>(<span class=\"hljs-string\">'highestBidder'</span>);\n  res.<span class=\"hljs-title function_\">send</span>(auction);\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = router;\n</code></pre>\n<p>입찰 라우트(Bid Routes)는 다음과 같습니다(routes/bids.js)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// routes/bids.js</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Bid</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../models/bid'</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Auction</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../models/auction'</span>);\n<span class=\"hljs-keyword\">const</span> router = express.<span class=\"hljs-title class_\">Router</span>();\n\n<span class=\"hljs-comment\">// 입찰하기</span>\nrouter.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n  <span class=\"hljs-keyword\">const</span> session = <span class=\"hljs-keyword\">await</span> mongoose.<span class=\"hljs-title function_\">startSession</span>();\n  session.<span class=\"hljs-title function_\">startTransaction</span>();\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> { auctionId, bidderId, bidAmount } = req.<span class=\"hljs-property\">body</span>;\n\n    <span class=\"hljs-comment\">// 경매 찾기</span>\n    <span class=\"hljs-keyword\">const</span> auction = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Auction</span>.<span class=\"hljs-title function_\">findById</span>(auctionId).<span class=\"hljs-title function_\">session</span>(session);\n    <span class=\"hljs-keyword\">if</span> (!auction) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">'경매를 찾을 수 없습니다'</span>);\n    }\n\n    <span class=\"hljs-comment\">// 입찰이 현재 최고 입찰보다 높은지 확인</span>\n    <span class=\"hljs-keyword\">if</span> (bidAmount &#x3C;= auction.<span class=\"hljs-property\">currentHighestBid</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">'입찰 금액은 현재 최고 입찰보다 높아야 합니다'</span>);\n    }\n\n    <span class=\"hljs-comment\">// 새로운 입찰 생성</span>\n    <span class=\"hljs-keyword\">const</span> bid = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bid</span>({ auctionId, bidderId, bidAmount });\n    <span class=\"hljs-keyword\">await</span> bid.<span class=\"hljs-title function_\">save</span>({ session });\n\n    <span class=\"hljs-comment\">// 경매에 새로운 최고 입찰로 업데이트</span>\n    auction.<span class=\"hljs-property\">currentHighestBid</span> = bidAmount;\n    auction.<span class=\"hljs-property\">highestBidder</span> = bidderId;\n    <span class=\"hljs-keyword\">await</span> auction.<span class=\"hljs-title function_\">save</span>({ session });\n\n    <span class=\"hljs-keyword\">await</span> session.<span class=\"hljs-title function_\">commitTransaction</span>();\n    session.<span class=\"hljs-title function_\">endSession</span>();\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">201</span>).<span class=\"hljs-title function_\">send</span>(bid);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-keyword\">await</span> session.<span class=\"hljs-title function_\">abortTransaction</span>();\n    session.<span class=\"hljs-title function_\">endSession</span>();\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">error</span>: error.<span class=\"hljs-property\">message</span> });\n  }\n});\n\n<span class=\"hljs-comment\">// 특정 경매에 대한 모든 입찰 가져오기</span>\nrouter.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/:auctionId'</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n  <span class=\"hljs-keyword\">const</span> { auctionId } = req.<span class=\"hljs-property\">params</span>;\n  <span class=\"hljs-keyword\">const</span> bids = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Bid</span>.<span class=\"hljs-title function_\">find</span>({ auctionId }).<span class=\"hljs-title function_\">sort</span>({ <span class=\"hljs-attr\">timestamp</span>: -<span class=\"hljs-number\">1</span> });\n  res.<span class=\"hljs-title function_\">send</span>(bids);\n});\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = router;\n</code></pre>\n<h1>동시에 발생하는 입찰 처리</h1>\n<p>동시에 발생하는 입찰을 효율적으로 처리하기 위해 MongoDB의 세션과 트랜잭션 기능을 사용하여 원자성을 보장합니다. 주요 단계는 다음과 같습니다:</p>\n<ul>\n<li>세션 및 트랜잭션 시작: 세션을 시작하여 세션 내의 작업이 원자적으로 실행되도록 합니다.</li>\n<li>경매 유효성 검사: 경매가 존재하고 유효한지 확인합니다.</li>\n<li>입찰 유효성 검사: 현재 가장 높은 입찰가보다 입찰이 높은지 확인합니다.</li>\n<li>경매 업데이트: 입찰이 유효한 경우 새로운 최고 입찰가로 경매를 업데이트합니다.</li>\n<li>트랜잭션 커밋: 변경 사항을 영구적으로 만들기 위해 트랜잭션을 커밋합니다.</li>\n<li>오류 처리: 오류 발생 시 트랜잭션을 중단하여 데이터 일관성을 보장합니다.</li>\n</ul>\n<h1>AWS 및 자동 스케일링을 활용하여 더 최적화해봅시다.</h1>\n<h1>주요 구성 요소</h1>\n<ul>\n<li>Node.js 어플리케이션: API 요청을 처리합니다.</li>\n<li>부하 분산 장치: 여러 인스턴스에 들어오는 트래픽을 분산합니다.</li>\n<li>자동 확장: 트래픽에 기반하여 인스턴스 수를 자동으로 조정합니다.</li>\n<li>메시지 큐: 입찰 요청을 비동기적으로 처리합니다.</li>\n<li>데이터베이스: 동시에 발생하는 쓰기 및 읽기 작업을 효율적으로 처리합니다.</li>\n<li>캐시: 읽기 작업을 가속화하고 데이터베이스에 가해지는 부하를 감소시킵니다.</li>\n<li>마이크로서비스 아키텍처: 구성요소를 분리하고 특정 작업을 효율적으로 처리합니다.</li>\n</ul>\n<h1>AWS 아키텍처</h1>\n<ul>\n<li>탄력적 부하 분산기 (ELB): 입찰 요청을 분산합니다.</li>\n<li>자동 확장 그룹: 응용프로그램 인스턴스가 부하를 처리할 수 있는지 확인합니다.</li>\n<li>Amazon SQS (Simple Queue Service): 입찰 요청 큐를 관리합니다.</li>\n<li>Amazon RDS/DynamoDB: 경매 및 입찰 데이터를 저장합니다.</li>\n<li>Amazon ElastiCache (Redis): 빈번하게 액세스되는 데이터를 캐싱합니다.</li>\n<li>Worker 노드: 큐에서 입찰 요청을 처리합니다.</li>\n<li>Amazon CloudWatch: 인프라를 모니터링하고 확장합니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-20-HandlingConcurrentRequeststoanAPINodejsAWS_0.png\" alt=\"이미지\"></p>\n<p>단계</p>\n<p>node.js</p>\n<pre><code class=\"hljs language-js\">npm init -y\nnpm install express body-parser aws-sdk\n</code></pre>\n<p>config.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">awsRegion</span>: <span class=\"hljs-string\">'us-east-1'</span>,\n  <span class=\"hljs-attr\">sqsQueueUrl</span>: <span class=\"hljs-string\">'YOUR_SQS_QUEUE_URL'</span>,\n  <span class=\"hljs-attr\">mongoURI</span>: <span class=\"hljs-string\">'mongodb://localhost:27017/saasbidding'</span>,\n  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3000</span>\n};\n</code></pre>\n<p>app.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'body-parser'</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">AWS</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'aws-sdk'</span>);\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./config'</span>);\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\napp.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">json</span>());\n\n<span class=\"hljs-variable constant_\">AWS</span>.<span class=\"hljs-property\">config</span>.<span class=\"hljs-title function_\">update</span>({ <span class=\"hljs-attr\">region</span>: config.<span class=\"hljs-property\">awsRegion</span> });\n\n<span class=\"hljs-keyword\">const</span> sqs = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">AWS</span>.<span class=\"hljs-title function_\">SQS</span>();\n\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/bid'</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n  <span class=\"hljs-keyword\">const</span> { auctionId, bidderId, bidAmount } = req.<span class=\"hljs-property\">body</span>;\n\n  <span class=\"hljs-keyword\">const</span> params = {\n    <span class=\"hljs-title class_\">MessageBody</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ auctionId, bidderId, bidAmount }),\n    <span class=\"hljs-title class_\">QueueUrl</span>: config.<span class=\"hljs-property\">sqsQueueUrl</span>\n  };\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">await</span> sqs.<span class=\"hljs-title function_\">sendMessage</span>(params).<span class=\"hljs-title function_\">promise</span>();\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>).<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Bid received'</span> });\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">500</span>).<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">'Failed to process bid'</span> });\n  }\n});\n\napp.<span class=\"hljs-title function_\">listen</span>(config.<span class=\"hljs-property\">port</span>, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Server is running on port <span class=\"hljs-subst\">${config.port}</span>`</span>);\n});\n</code></pre>\n<p>Worker.js 파일 — 이 파일은 SQS에서 메시지를 처리하고 데이터베이스를 업데이트합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">AWS</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'aws-sdk'</span>);\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Auction</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./models/auction'</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Bid</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./models/bid'</span>);\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./config'</span>);\n\n<span class=\"hljs-variable constant_\">AWS</span>.<span class=\"hljs-property\">config</span>.<span class=\"hljs-title function_\">update</span>({ <span class=\"hljs-attr\">region</span>: config.<span class=\"hljs-property\">awsRegion</span> });\n\n<span class=\"hljs-keyword\">const</span> sqs = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">AWS</span>.<span class=\"hljs-title function_\">SQS</span>();\n<span class=\"hljs-keyword\">const</span> queueUrl = config.<span class=\"hljs-property\">sqsQueueUrl</span>;\n\nmongoose.<span class=\"hljs-title function_\">connect</span>(config.<span class=\"hljs-property\">mongoURI</span>, { <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">useUnifiedTopology</span>: <span class=\"hljs-literal\">true</span> });\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">processBid</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">message</span>) => {\n  <span class=\"hljs-keyword\">const</span> { auctionId, bidderId, bidAmount } = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(message.<span class=\"hljs-property\">Body</span>);\n\n  <span class=\"hljs-keyword\">const</span> session = <span class=\"hljs-keyword\">await</span> mongoose.<span class=\"hljs-title function_\">startSession</span>();\n  session.<span class=\"hljs-title function_\">startTransaction</span>();\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> auction = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Auction</span>.<span class=\"hljs-title function_\">findById</span>(auctionId).<span class=\"hljs-title function_\">session</span>(session);\n    <span class=\"hljs-keyword\">if</span> (bidAmount &#x3C;= auction.<span class=\"hljs-property\">currentHighestBid</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">'Bid amount must be higher than the current highest bid'</span>);\n    }\n\n    <span class=\"hljs-keyword\">const</span> bid = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bid</span>({ auctionId, bidderId, bidAmount });\n    <span class=\"hljs-keyword\">await</span> bid.<span class=\"hljs-title function_\">save</span>({ session });\n\n    auction.<span class=\"hljs-property\">currentHighestBid</span> = bidAmount;\n    auction.<span class=\"hljs-property\">highestBidder</span> = bidderId;\n    <span class=\"hljs-keyword\">await</span> auction.<span class=\"hljs-title function_\">save</span>({ session });\n\n    <span class=\"hljs-keyword\">await</span> session.<span class=\"hljs-title function_\">commitTransaction</span>();\n    session.<span class=\"hljs-title function_\">endSession</span>();\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-keyword\">await</span> session.<span class=\"hljs-title function_\">abortTransaction</span>();\n    session.<span class=\"hljs-title function_\">endSession</span>();\n    <span class=\"hljs-keyword\">throw</span> error;\n  }\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">pollQueue</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> params = {\n    <span class=\"hljs-title class_\">QueueUrl</span>: queueUrl,\n    <span class=\"hljs-title class_\">MaxNumberOfMessages</span>: <span class=\"hljs-number\">10</span>,\n    <span class=\"hljs-title class_\">WaitTimeSeconds</span>: <span class=\"hljs-number\">20</span>\n  };\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> sqs.<span class=\"hljs-title function_\">receiveMessage</span>(params).<span class=\"hljs-title function_\">promise</span>();\n    <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">Messages</span>) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> message <span class=\"hljs-keyword\">of</span> data.<span class=\"hljs-property\">Messages</span>) {\n        <span class=\"hljs-keyword\">try</span> {\n          <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">processBid</span>(message);\n          <span class=\"hljs-keyword\">await</span> sqs.<span class=\"hljs-title function_\">deleteMessage</span>({ <span class=\"hljs-title class_\">QueueUrl</span>: queueUrl, <span class=\"hljs-title class_\">ReceiptHandle</span>: message.<span class=\"hljs-property\">ReceiptHandle</span> }).<span class=\"hljs-title function_\">promise</span>();\n        } <span class=\"hljs-keyword\">catch</span> (error) {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'Failed to process bid'</span>, error);\n        }\n      }\n    }\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'Failed to receive messages'</span>, error);\n  }\n\n  <span class=\"hljs-title function_\">setImmediate</span>(pollQueue);\n};\n\n<span class=\"hljs-title function_\">pollQueue</span>();\n</code></pre>\n<h2>AWS 리소스 구성</h2>\n<ul>\n<li>Elastic Load Balancer: ELB를 설정하여 여러 EC2 인스턴스 간에 들어오는 트래픽을 분산합니다.</li>\n<li>Auto Scaling 그룹: 트래픽 패턴에 따라 EC2 인스턴스를 추가하거나 제거할 수 있도록 자동 스케일링을 구성합니다.</li>\n<li>Amazon SQS: 수신된 입찰 요청을 관리하기 위한 SQS 대기열을 생성합니다.</li>\n<li>Amazon RDS/DynamoDB: 경매 및 입찰 데이터를 처리할 데이터베이스를 설정합니다.</li>\n<li>Amazon ElastiCache (Redis): 자주 액세스되는 데이터를 캐싱하여 데이터베이스 부하를 줄이기 위해 Redis를 사용합니다.</li>\n<li>Amazon CloudWatch: 인프라를 모니터링하고 스케일링 이벤트를 트리거할 알림을 설정합니다.</li>\n</ul>\n<p>주의 : 이 코드는 샘플입니다. 조심해서 사용해주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}