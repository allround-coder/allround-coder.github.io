{"pageProps":{"post":{"title":"사용하지 않을 때에도 웹 서비스 활동 유지하는 방법","description":"","date":"2024-06-23 13:15","slug":"2024-06-23-HackforRenderWebservicesspindownduetoinactivity","content":"\n\n백엔드 응용 프로그램을 취미로 배포할 때, Render는 간편성과 기능 세트로 인해 인기 있는 선택지입니다. 그러나 Render의 일반적인 문제 중 하나는 사용되지 않을 경우 무료 인스턴스가 중단될 수 있다는 것입니다. 이는 인스턴스를 다시 배포해야 할 때 최대 1분까지 응답이 지연되는 결과를 가져옵니다. Render에서 이러한 동작에 대해 명확히 설명되어 있습니다:\n\n![image](/assets/img/2024-06-23-HackforRenderWebservicesspindownduetoinactivity_0.png)\n\n**문제점**\n사용되지 않을 때 Render 인스턴스가 중단되어 서버가 일정 시간 후에 액세스될 때 지연이 발생합니다. 이는 응답 시간이 느려지면 사용자 경험에 영향을 미칠 수 있어 특히 거슬리는 문제일 수 있습니다.\n\n**해결책**\n사이트를 사용하지 않는 경우에도 인스턴스를 활성 상태로 유지하려면 app.js 또는 index.js 파일에 자체 참조 리로더를 추가할 수 있습니다. 이를 통해 정기적으로 서버에 핑을 보내 인스턴스가 중단되지 않도록 할 수 있습니다.\n\n다음은 이 작업을 수행하는 간단한 코드 스니펫입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nconst url = `https://yourappname.onrender.com/`; // 사용 중인 Render URL로 변경\nconst interval = 30000; // 간격을 밀리초 단위로 지정 (30초)\n\nfunction reloadWebsite() {\n  axios.get(url)\n    .then(response => {\n      console.log(`새로고침 시간: ${new Date().toISOString()}: 상태 코드 ${response.status}`);\n    })\n    .catch(error => {\n      console.error(`새로 고침 에러 시간: ${new Date().toISOString()}:`, error.message);\n    });\n}\n\n\nsetInterval(reloadWebsite, interval);\r\n```\n\n작동 방식\n\n- 자체 참조 새로 고침: 이 코드 스니펫은 서버에 매 30초마다 핑을 보내는 간격을 설정합니다.\n- 유지 및 활성 상태 유지: 서버에 지속적으로 핑을 보내면 활성 상태를 유지하고 중단되지 않도록 합니다.\n- 로그: 주기적인 확인을 볼 수 있고 서버가 활성 상태인지 확인할 수 있는 로그를 모니터링할 수 있습니다.\n\n구현\n\n<div class=\"content-ad\"></div>\n\n- 코드 추가: 위 코드를 app.js 또는 index.js 파일에 추가합니다.\n- 서버 시작: 앱을 Render에 배포하세요.\n- 모니터링: Render 대시보드의 로그를 확인하여 서버가 정기적으로 핑되는지 확인하세요.\n\n장점\n\n- 다운타임 없음: 서버가 활성 상태로 유지되어 빠른 응답을 제공합니다.\n- 간편한 솔루션: 복잡한 설정 없이 쉽게 구현할 수 있습니다.\n- 확장성: 소규모에서 중규모의 취미 프로젝트에 잘 작동합니다.\n\n다중 백엔드 관리\n다중 백엔드가 있는 프로젝트의 경우, 리로더를 단일 백엔드로 통합할 수 있습니다. 이 접근 방식은 각 백엔드가 자체 리로더를 필요로하지 않고 모든 인스턴스가 활성 상태로 유지되도록 보장합니다.\n\n<div class=\"content-ad\"></div>\n\n결론\n백엔드에 간단한 다시로더 스크립트를 추가함으로써, Render 인스턴스가 비활성화로 인해 종료되는 것을 방지할 수 있습니다. 이를 통해 서버가 반응성을 유지하여 취미 프로젝트에 더 나은 사용자 경험을 제공할 수 있습니다. 이 해결책은 소규모부터 중규모 프로젝트에 효과적이며 서버의 활동을 지속적으로 유지하는 데 도움이 됩니다.\n\n참고:\n\n- Github\n\n도움이 되셨기를 바랍니다! 즐거운 배포되길 바랍니다.","ogImage":{"url":"/assets/img/2024-06-23-HackforRenderWebservicesspindownduetoinactivity_0.png"},"coverImage":"/assets/img/2024-06-23-HackforRenderWebservicesspindownduetoinactivity_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>백엔드 응용 프로그램을 취미로 배포할 때, Render는 간편성과 기능 세트로 인해 인기 있는 선택지입니다. 그러나 Render의 일반적인 문제 중 하나는 사용되지 않을 경우 무료 인스턴스가 중단될 수 있다는 것입니다. 이는 인스턴스를 다시 배포해야 할 때 최대 1분까지 응답이 지연되는 결과를 가져옵니다. Render에서 이러한 동작에 대해 명확히 설명되어 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-23-HackforRenderWebservicesspindownduetoinactivity_0.png\" alt=\"image\"></p>\n<p><strong>문제점</strong>\n사용되지 않을 때 Render 인스턴스가 중단되어 서버가 일정 시간 후에 액세스될 때 지연이 발생합니다. 이는 응답 시간이 느려지면 사용자 경험에 영향을 미칠 수 있어 특히 거슬리는 문제일 수 있습니다.</p>\n<p><strong>해결책</strong>\n사이트를 사용하지 않는 경우에도 인스턴스를 활성 상태로 유지하려면 app.js 또는 index.js 파일에 자체 참조 리로더를 추가할 수 있습니다. 이를 통해 정기적으로 서버에 핑을 보내 인스턴스가 중단되지 않도록 할 수 있습니다.</p>\n<p>다음은 이 작업을 수행하는 간단한 코드 스니펫입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">`https://yourappname.onrender.com/`</span>; <span class=\"hljs-comment\">// 사용 중인 Render URL로 변경</span>\n<span class=\"hljs-keyword\">const</span> interval = <span class=\"hljs-number\">30000</span>; <span class=\"hljs-comment\">// 간격을 밀리초 단위로 지정 (30초)</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">reloadWebsite</span>(<span class=\"hljs-params\"></span>) {\n  axios.<span class=\"hljs-title function_\">get</span>(url)\n    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`새로고침 시간: <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().toISOString()}</span>: 상태 코드 <span class=\"hljs-subst\">${response.status}</span>`</span>);\n    })\n    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">`새로 고침 에러 시간: <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().toISOString()}</span>:`</span>, error.<span class=\"hljs-property\">message</span>);\n    });\n}\n\n\n<span class=\"hljs-built_in\">setInterval</span>(reloadWebsite, interval);\n</code></pre>\n<p>작동 방식</p>\n<ul>\n<li>자체 참조 새로 고침: 이 코드 스니펫은 서버에 매 30초마다 핑을 보내는 간격을 설정합니다.</li>\n<li>유지 및 활성 상태 유지: 서버에 지속적으로 핑을 보내면 활성 상태를 유지하고 중단되지 않도록 합니다.</li>\n<li>로그: 주기적인 확인을 볼 수 있고 서버가 활성 상태인지 확인할 수 있는 로그를 모니터링할 수 있습니다.</li>\n</ul>\n<p>구현</p>\n<ul>\n<li>코드 추가: 위 코드를 app.js 또는 index.js 파일에 추가합니다.</li>\n<li>서버 시작: 앱을 Render에 배포하세요.</li>\n<li>모니터링: Render 대시보드의 로그를 확인하여 서버가 정기적으로 핑되는지 확인하세요.</li>\n</ul>\n<p>장점</p>\n<ul>\n<li>다운타임 없음: 서버가 활성 상태로 유지되어 빠른 응답을 제공합니다.</li>\n<li>간편한 솔루션: 복잡한 설정 없이 쉽게 구현할 수 있습니다.</li>\n<li>확장성: 소규모에서 중규모의 취미 프로젝트에 잘 작동합니다.</li>\n</ul>\n<p>다중 백엔드 관리\n다중 백엔드가 있는 프로젝트의 경우, 리로더를 단일 백엔드로 통합할 수 있습니다. 이 접근 방식은 각 백엔드가 자체 리로더를 필요로하지 않고 모든 인스턴스가 활성 상태로 유지되도록 보장합니다.</p>\n<p>결론\n백엔드에 간단한 다시로더 스크립트를 추가함으로써, Render 인스턴스가 비활성화로 인해 종료되는 것을 방지할 수 있습니다. 이를 통해 서버가 반응성을 유지하여 취미 프로젝트에 더 나은 사용자 경험을 제공할 수 있습니다. 이 해결책은 소규모부터 중규모 프로젝트에 효과적이며 서버의 활동을 지속적으로 유지하는 데 도움이 됩니다.</p>\n<p>참고:</p>\n<ul>\n<li>Github</li>\n</ul>\n<p>도움이 되셨기를 바랍니다! 즐거운 배포되길 바랍니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}