{"pageProps":{"post":{"title":"Flutter에서 clean code를 작성하는 방법","description":"","date":"2024-05-20 23:18","slug":"2024-05-20-Whyshouldweusecleancodeinflutter","content":"\n\n![image](/assets/img/2024-05-20-Whyshouldweusecleancodeinflutter_0.png)\n\n플러터에서 깨끗한 코드를 사용하는 것은 유지보수성, 가독성, 확장성 및 디버깅의 용이성을 포함한 여러 가지 이유로 중요합니다. 아래에는 깨끗한 코드의 중요성을 설명하기 위한 몇 가지 구체적인 예와 함께 자세한 설명이 나와 있습니다.\n\n- 유지보수성\n\n깨끗한 코드는 이해하기 쉽고 수정하기 쉽습니다. 코드베이스가 커질수록 잘 구성되고 이해하기 쉬운 코드를 가지고 있으면 버그를 수정하고 새로운 기능을 추가하기가 더 쉬워집니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// .......................코드 작성이 잘못된 부분............................\n\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text('내 앱'),\n    ),\n    body: Column(\n      children: [\n        Text('내 앱에 오신 것을 환영합니다', style: TextStyle(fontSize: 24)),\n        RaisedButton(\n          onPressed: () {\n            // 복잡한 로직\n          },\n          child: Text('눌러보세요'),\n        ),\n      ],\n    ),\n  );\n}\n\n// .......................깔끔한 코드...................................\n\nclass HomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: _buildAppBar(),\n      body: _buildBody(),\n    );\n  }\n\n  AppBar _buildAppBar() {\n    return AppBar(\n      title: Text('내 앱'),\n    );\n  }\n\n  Widget _buildBody() {\n    return Column(\n      children: [\n        _buildWelcomeText(),\n        _buildPressMeButton(),\n      ],\n    );\n  }\n\n  Widget _buildWelcomeText() {\n    return Text(\n      '내 앱에 오신 것을 환영합니다',\n      style: TextStyle(fontSize: 24),\n    );\n  }\n\n  Widget _buildPressMeButton() {\n    return RaisedButton(\n      onPressed: _handlePressMeButton,\n      child: Text('눌러보세요'),\n    );\n  }\n\n  void _handlePressMeButton() {\n    // 복잡한 로직\n  }\n}\n```\n\n깔끔한 코드 예제에서, build 메서드는 더 작고 더 집중된 메서드로 분해되어 유지보수가 더 쉽습니다.\n\n2. 가독성\n\n깔끔한 코드는 더 읽기 쉽고 이해하기 쉽습니다. 이는 코드가 작성되기보다는 더 자주 읽히기 때문에 중요합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// .......................작성된 코드가 좋지 않습니다............................\n\nvoid updateUserProfile(User user) {\n  if (user.name != null && user.email != null) {\n    // 프로필 업데이트\n  }\n}\n\n\n// ............................깨끗한 코드................................\n\nvoid updateUserProfile(User user) {\n  if (_isUserProfileValid(user)) {\n    _updateProfileInDatabase(user);\n  }\n}\n\nbool _isUserProfileValid(User user) {\n  return user.name != null && user.email != null;\n}\n\nvoid _updateProfileInDatabase(User user) {\n  // 프로필 업데이트\n}\n```\n\n깨끗한 코드 예제는 조건을 잘 명명된 메서드로 추상화하여 가독성을 향상시킵니다.\n\n3. 확장성\n\n프로젝트가 확장될수록, 깨끗한 코드는 코드베이스의 품질을 저하시키지 않고 새로운 기능을 추가하는 것을 더 쉽게 만듭니다.\n  \n\n<div class=\"content-ad\"></div>\n\n```js\n// ..........잘못 작성된 코드.........\n\nvoid performAction(String action) {\n  if (action == 'login') {\n    // 로그인 로직\n  } else if (action == 'logout') {\n    // 로그아웃 로직\n  } else if (action == 'signup') {\n    // 가입 로직\n  }\n}\n\n// ...........깔끔한 코드...............\n\nvoid performAction(String action) {\n  switch (action) {\n    case 'login':\n      _login();\n      break;\n    case 'logout':\n      _logout();\n      break;\n    case 'signup':\n      _signup();\n      break;\n    default:\n      _handleUnknownAction();\n  }\n}\n\nvoid _login() {\n  // 로그인 로직\n}\n\nvoid _logout() {\n  // 로그아웃 로직\n}\n\nvoid _signup() {\n  // 가입 로직\n}\n\nvoid _handleUnknownAction() {\n  // 알 수 없는 동작 처리\n}\n```\n\n깔끔한 코드 예시는 switch 문을 사용하여 동작을 각각의 메서드로 분리하여 새로운 동작을 추가하기 쉽게 만듭니다.\n\n4. 디버깅 용이성\n\n깔끔한 코드는 더 직관적으로 코드를 추적하고 실행 흐름을 이해하기 쉬워져 디버깅을 단순화합니다.\n\n<div class=\"content-ad\"></div>\n\n잘못 작성된 코드:\n\n```js\n// ...........잘못 작성된 코드..............\n\nvoid processOrder(Order order) {\n  if (order.isValid()) {\n    if (order.total > 100) {\n      applyDiscount(order);\n    }\n    // 주문 처리\n  }\n}\n\n\n// ...........깨끗한 코드..............\n\nvoid processOrder(Order order) {\n  if (!order.isValid()) {\n    return;\n  }\n  _applyDiscountIfEligible(order);\n  _processOrderDetails(order);\n}\n\nvoid _applyDiscountIfEligible(Order order) {\n  if (order.total > 100) {\n    applyDiscount(order);\n  }\n}\n\nvoid _processOrderDetails(Order order) {\n  // 주문 처리\n}\n```\n\n깨끗한 코드 예시에서는 로직이 작고 관리하기 쉬운 메소드로 분해되어 있어 이해하고 디버그하기가 더 쉽습니다.\n\n추가 예시: 변수\n\n<div class=\"content-ad\"></div>\n\n```js\n// ........잘못 작성된 코드......\n\nint a;\nString b;\n\n// ........깔끔한 코드..........\n\nint productCount;\nString activeUserName;\n```\n\n함수:\n\n```js\n// ........잘못 작성된 코드.......\n\nvoid doSomething();\nString getSomething();\n\n// ........깔끔한 코드..........\n\nvoid updateProductCount() {\n  // ...\n}\n\nString getUserName() {\n  // ...\n}\n```\n\n클래스:\n\n<div class=\"content-ad\"></div>\n\n\n// ......잘못 작성된 코드....\n\nclass MyClass {\n  // ...\n}\n\n// ........깔끔한 코드..........\n\nclass VideoList {\n  // ...\n}\n\nclass UserAccount {\n  // ...\n}\n\n\n## 결론\n\nFlutter에서 깔끔한 코드를 사용하면 코드베이스가 유지 가능하고 가독성이 높고 확장 가능하며 쉽게 디버깅할 수 있습니다. 깔끔한 코드 원칙을 준수하면 애플리케이션의 전반적인 품질을 향상시켜 미래에 코드를 작업할 때 자신과 다른 사람들이 더 쉽게 작업할 수 있게 됩니다.\n\n<img src=\"/assets/img/2024-05-20-Whyshouldweusecleancodeinflutter_1.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n이 기사를 즐겁게 보셨기를 바라요! 제공된 정보를 감사하게 여기신다면, 'Buy Me A Coffee'로 저를 지원할 수 있어요! 여러분의 센스에 감사드릴 거예요!","ogImage":{"url":"/assets/img/2024-05-20-Whyshouldweusecleancodeinflutter_0.png"},"coverImage":"/assets/img/2024-05-20-Whyshouldweusecleancodeinflutter_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-20-Whyshouldweusecleancodeinflutter_0.png\" alt=\"image\"></p>\n<p>플러터에서 깨끗한 코드를 사용하는 것은 유지보수성, 가독성, 확장성 및 디버깅의 용이성을 포함한 여러 가지 이유로 중요합니다. 아래에는 깨끗한 코드의 중요성을 설명하기 위한 몇 가지 구체적인 예와 함께 자세한 설명이 나와 있습니다.</p>\n<ul>\n<li>유지보수성</li>\n</ul>\n<p>깨끗한 코드는 이해하기 쉽고 수정하기 쉽습니다. 코드베이스가 커질수록 잘 구성되고 이해하기 쉬운 코드를 가지고 있으면 버그를 수정하고 새로운 기능을 추가하기가 더 쉬워집니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// .......................코드 작성이 잘못된 부분............................</span>\n\n<span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'내 앱'</span>),\n    ),\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Column</span>(\n      <span class=\"hljs-attr\">children</span>: [\n        <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'내 앱에 오신 것을 환영합니다'</span>, <span class=\"hljs-attr\">style</span>: <span class=\"hljs-title class_\">TextStyle</span>(<span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">24</span>)),\n        <span class=\"hljs-title class_\">RaisedButton</span>(\n          <span class=\"hljs-attr\">onPressed</span>: () {\n            <span class=\"hljs-comment\">// 복잡한 로직</span>\n          },\n          <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'눌러보세요'</span>),\n        ),\n      ],\n    ),\n  );\n}\n\n<span class=\"hljs-comment\">// .......................깔끔한 코드...................................</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HomePage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatelessWidget</span> {\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title function_\">_buildAppBar</span>(),\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title function_\">_buildBody</span>(),\n    );\n  }\n\n  <span class=\"hljs-title class_\">AppBar</span> <span class=\"hljs-title function_\">_buildAppBar</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">AppBar</span>(\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'내 앱'</span>),\n    );\n  }\n\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">_buildBody</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Column</span>(\n      <span class=\"hljs-attr\">children</span>: [\n        <span class=\"hljs-title function_\">_buildWelcomeText</span>(),\n        <span class=\"hljs-title function_\">_buildPressMeButton</span>(),\n      ],\n    );\n  }\n\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">_buildWelcomeText</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Text</span>(\n      <span class=\"hljs-string\">'내 앱에 오신 것을 환영합니다'</span>,\n      <span class=\"hljs-attr\">style</span>: <span class=\"hljs-title class_\">TextStyle</span>(<span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">24</span>),\n    );\n  }\n\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">_buildPressMeButton</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">RaisedButton</span>(\n      <span class=\"hljs-attr\">onPressed</span>: _handlePressMeButton,\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'눌러보세요'</span>),\n    );\n  }\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_handlePressMeButton</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 복잡한 로직</span>\n  }\n}\n</code></pre>\n<p>깔끔한 코드 예제에서, build 메서드는 더 작고 더 집중된 메서드로 분해되어 유지보수가 더 쉽습니다.</p>\n<ol start=\"2\">\n<li>가독성</li>\n</ol>\n<p>깔끔한 코드는 더 읽기 쉽고 이해하기 쉽습니다. 이는 코드가 작성되기보다는 더 자주 읽히기 때문에 중요합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// .......................작성된 코드가 좋지 않습니다............................</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUserProfile</span>(<span class=\"hljs-params\">User user</span>) {\n  <span class=\"hljs-keyword\">if</span> (user.<span class=\"hljs-property\">name</span> != <span class=\"hljs-literal\">null</span> &#x26;&#x26; user.<span class=\"hljs-property\">email</span> != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">// 프로필 업데이트</span>\n  }\n}\n\n\n<span class=\"hljs-comment\">// ............................깨끗한 코드................................</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUserProfile</span>(<span class=\"hljs-params\">User user</span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">_isUserProfileValid</span>(user)) {\n    <span class=\"hljs-title function_\">_updateProfileInDatabase</span>(user);\n  }\n}\n\nbool <span class=\"hljs-title function_\">_isUserProfileValid</span>(<span class=\"hljs-params\">User user</span>) {\n  <span class=\"hljs-keyword\">return</span> user.<span class=\"hljs-property\">name</span> != <span class=\"hljs-literal\">null</span> &#x26;&#x26; user.<span class=\"hljs-property\">email</span> != <span class=\"hljs-literal\">null</span>;\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_updateProfileInDatabase</span>(<span class=\"hljs-params\">User user</span>) {\n  <span class=\"hljs-comment\">// 프로필 업데이트</span>\n}\n</code></pre>\n<p>깨끗한 코드 예제는 조건을 잘 명명된 메서드로 추상화하여 가독성을 향상시킵니다.</p>\n<ol start=\"3\">\n<li>확장성</li>\n</ol>\n<p>프로젝트가 확장될수록, 깨끗한 코드는 코드베이스의 품질을 저하시키지 않고 새로운 기능을 추가하는 것을 더 쉽게 만듭니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ..........잘못 작성된 코드.........</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">performAction</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> action</span>) {\n  <span class=\"hljs-keyword\">if</span> (action == <span class=\"hljs-string\">'login'</span>) {\n    <span class=\"hljs-comment\">// 로그인 로직</span>\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (action == <span class=\"hljs-string\">'logout'</span>) {\n    <span class=\"hljs-comment\">// 로그아웃 로직</span>\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (action == <span class=\"hljs-string\">'signup'</span>) {\n    <span class=\"hljs-comment\">// 가입 로직</span>\n  }\n}\n\n<span class=\"hljs-comment\">// ...........깔끔한 코드...............</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">performAction</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> action</span>) {\n  <span class=\"hljs-keyword\">switch</span> (action) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'login'</span>:\n      <span class=\"hljs-title function_\">_login</span>();\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'logout'</span>:\n      <span class=\"hljs-title function_\">_logout</span>();\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'signup'</span>:\n      <span class=\"hljs-title function_\">_signup</span>();\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-attr\">default</span>:\n      <span class=\"hljs-title function_\">_handleUnknownAction</span>();\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_login</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 로그인 로직</span>\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_logout</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 로그아웃 로직</span>\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_signup</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 가입 로직</span>\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_handleUnknownAction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 알 수 없는 동작 처리</span>\n}\n</code></pre>\n<p>깔끔한 코드 예시는 switch 문을 사용하여 동작을 각각의 메서드로 분리하여 새로운 동작을 추가하기 쉽게 만듭니다.</p>\n<ol start=\"4\">\n<li>디버깅 용이성</li>\n</ol>\n<p>깔끔한 코드는 더 직관적으로 코드를 추적하고 실행 흐름을 이해하기 쉬워져 디버깅을 단순화합니다.</p>\n<p>잘못 작성된 코드:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ...........잘못 작성된 코드..............</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">processOrder</span>(<span class=\"hljs-params\">Order order</span>) {\n  <span class=\"hljs-keyword\">if</span> (order.<span class=\"hljs-title function_\">isValid</span>()) {\n    <span class=\"hljs-keyword\">if</span> (order.<span class=\"hljs-property\">total</span> > <span class=\"hljs-number\">100</span>) {\n      <span class=\"hljs-title function_\">applyDiscount</span>(order);\n    }\n    <span class=\"hljs-comment\">// 주문 처리</span>\n  }\n}\n\n\n<span class=\"hljs-comment\">// ...........깨끗한 코드..............</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">processOrder</span>(<span class=\"hljs-params\">Order order</span>) {\n  <span class=\"hljs-keyword\">if</span> (!order.<span class=\"hljs-title function_\">isValid</span>()) {\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  <span class=\"hljs-title function_\">_applyDiscountIfEligible</span>(order);\n  <span class=\"hljs-title function_\">_processOrderDetails</span>(order);\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_applyDiscountIfEligible</span>(<span class=\"hljs-params\">Order order</span>) {\n  <span class=\"hljs-keyword\">if</span> (order.<span class=\"hljs-property\">total</span> > <span class=\"hljs-number\">100</span>) {\n    <span class=\"hljs-title function_\">applyDiscount</span>(order);\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_processOrderDetails</span>(<span class=\"hljs-params\">Order order</span>) {\n  <span class=\"hljs-comment\">// 주문 처리</span>\n}\n</code></pre>\n<p>깨끗한 코드 예시에서는 로직이 작고 관리하기 쉬운 메소드로 분해되어 있어 이해하고 디버그하기가 더 쉽습니다.</p>\n<p>추가 예시: 변수</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ........잘못 작성된 코드......</span>\n\nint a;\n<span class=\"hljs-title class_\">String</span> b;\n\n<span class=\"hljs-comment\">// ........깔끔한 코드..........</span>\n\nint productCount;\n<span class=\"hljs-title class_\">String</span> activeUserName;\n</code></pre>\n<p>함수:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ........잘못 작성된 코드.......</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doSomething</span>();\n<span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getSomething</span>();\n\n<span class=\"hljs-comment\">// ........깔끔한 코드..........</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateProductCount</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>클래스:</p>\n<p>// ......잘못 작성된 코드....</p>\n<p>class MyClass {\n// ...\n}</p>\n<p>// ........깔끔한 코드..........</p>\n<p>class VideoList {\n// ...\n}</p>\n<p>class UserAccount {\n// ...\n}</p>\n<h2>결론</h2>\n<p>Flutter에서 깔끔한 코드를 사용하면 코드베이스가 유지 가능하고 가독성이 높고 확장 가능하며 쉽게 디버깅할 수 있습니다. 깔끔한 코드 원칙을 준수하면 애플리케이션의 전반적인 품질을 향상시켜 미래에 코드를 작업할 때 자신과 다른 사람들이 더 쉽게 작업할 수 있게 됩니다.</p>\n<p>이 기사를 즐겁게 보셨기를 바라요! 제공된 정보를 감사하게 여기신다면, 'Buy Me A Coffee'로 저를 지원할 수 있어요! 여러분의 센스에 감사드릴 거예요!</p>\n</body>\n</html>\n"},"__N_SSG":true}