{"pageProps":{"post":{"title":"Terraform을 사용하여 VPC 피어링 자동화하기","description":"","date":"2024-05-15 11:00","slug":"2024-05-15-AutomateVPCPeeringwithTerraform","content":"\n\n\n![image](/assets/img/2024-05-15-AutomateVPCPeeringwithTerraform_0.png)\n\nAWS의 VPC 피어링은 두 개의 VPC 간에 사설 IPv4 또는 IPv6 주소를 사용하여 트래픽을 경로 설정할 수 있는 네트워킹 연결입니다.\n\nVPC 피어링은 AWS의 네트워킹 서비스 스위트의 일부로, 클라우드에서 확장 가능하고 안전하며 고가용성 네트워크 아키텍처를 생성할 수 있는 강력한 옵션을 제공합니다.\n\n이 기사에서는 Terraform을 사용하여 VPC 피어링 연결을 생성하는 방법을 살펴보겠습니다.\n\n\n\n\n## 준비 사항:\n\n- Terraform이 설치된 서버\n\n## 단계 1: VPC용 코드 생성\n\n- main.tf 파일을 생성하고 아래 코드를 추가하세요.\n\n\n\n```json\n# Demo VPC A\nresource \"aws_vpc\" \"demo-vpc-a\" {\n  cidr_block = var.demo-vpc-a-cidr\n\n  tags = {\n    Name = \"demo-vpc-a\"\n  }\n}\n\n# Demo VPC B\nresource \"aws_vpc\" \"demo-vpc-b\" {\n  cidr_block = var.demo-vpc-b-cidr\n\n  tags = {\n    Name = \"demo-vpc-b\"\n  }\n}\n```\n\n- 위의 코드는 2개의 VPC를 생성합니다.\n\n## 단계 2: 서브넷용 코드 작성\n\n- 아래 코드를 main.tf 파일에 추가하세요.\n\n\n\n```js\n# 데모 VPC A의 서브넷\nresource \"aws_subnet\" \"demo-subnet-a\" {\n  vpc_id            = aws_vpc.demo-vpc-a.id\n  cidr_block        = var.demo-subnet-a-cidr\n  availability_zone = data.aws_availability_zones.available_zones.names[0]\n\n  tags = {\n    Name = \"Public Subnet A\"\n  }\n}\n\n# 데모 VPC B의 서브넷\nresource \"aws_subnet\" \"demo-subnet-b\" {\n  vpc_id            = aws_vpc.demo-vpc-b.id\n  cidr_block        = var.demo-subnet-b-cidr\n  availability_zone = data.aws_availability_zones.available_zones.names[1]\n\n  tags = {\n    Name = \"Public Subnet B\"\n  }\n}\n```\n\n- 위 코드는 각 VPC에 서브넷을 생성합니다.\n\n## 단계 3: 피어링 연결을 위한 코드 생성\n\n- 아래 코드를 main.tf 파일에 추가하세요.\n  \n\n\n\n```js\n# Peering connection\nresource \"aws_vpc_peering_connection\" \"vpc_peering\" {\n  vpc_id      = aws_vpc.demo-vpc-a.id\n  peer_vpc_id = aws_vpc.demo-vpc-b.id\n}\n\n# Peering connection acceptor\nresource \"aws_vpc_peering_connection_accepter\" \"vpc_peering_accepter\" {\n  vpc_peering_connection_id = aws_vpc_peering_connection.vpc_peering.id\n  auto_accept               = true\n}\n```\n\n- 위의 코드는 VPC 피어링 연결을 생성하고 자동으로 수락합니다.\n\n## 단계 4: 라우트 테이블 및 R을 위한 코드 만들기\n\n- 아래 코드를 main.tf 파일에 추가하세요.\n\n\n\n\n```js\n# 라우트 테이블\n리소스 \"aws_route_table\" \"demo-route-table-a\" {\n  vpc_id = aws_vpc.demo-vpc-a.id\n}\n\n리소스 \"aws_route_table\" \"demo-route-table-b\" {\n  vpc_id = aws_vpc.demo-vpc-b.id\n}\n```\n\n- 위의 코드는 각 VPC에 두 개의 라우트 테이블을 생성합니다.\n\n## 단계 5: 라우트 코드 생성\n\n- 아래 코드를 main.tf 파일에 추가합니다.\n  \n\n\n\n```js\n# VPC 피어링을 위한 라우트 테이블에 라우트 생성하기\nresource \"aws_route\" \"demo-route-a\" {\n  route_table_id            = aws_route_table.demo-route-table-a.id\n  destination_cidr_block    = aws_vpc.demo-vpc-b.cidr_block\n  vpc_peering_connection_id = aws_vpc_peering_connection.vpc_peering.id\n}\n\nresource \"aws_route\" \"route2\" {\n  route_table_id            = aws_route_table.demo-route-table-b.id\n  destination_cidr_block    = aws_vpc.demo-vpc-a.cidr_block\n  vpc_peering_connection_id = aws_vpc_peering_connection.vpc_peering.id\n}\n```\n\n- 위 코드는 라우트 테이블을 수정하여 VPC A에서 VPC B로의 라우트 및 VPC B에서 VPC A로의 라우트를 허용합니다.\n\n## 단계 6: 인터넷 게이트웨이용 코드 작성하기\n\n- 아래 코드를 main.tf 파일에 추가하세요.\n\n\n\n\n```js\n# 인터넷 게이트웨이 생성\nresource \"aws_internet_gateway\" \"demo-igw\" {\n  vpc_id = aws_vpc.demo-vpc-a.id\n}\n\n# VPC 라우트 테이블과 인터넷 게이트웨이 연결\nresource \"aws_route\" \"route_to_internet\" {\n  route_table_id         = aws_route_table.demo-route-table-a.id\n  destination_cidr_block = \"0.0.0.0/0\"\n  gateway_id             = aws_internet_gateway.demo-igw.id\n}\n```\n\n## 단계 7: 변수 파일 생성하기\n\n- variables.tf 파일을 생성하고 아래 코드를 추가합니다.\n\n```js\n# VPC A CIDR\nvariable \"demo-vpc-a-cidr\" {\n  type        = string\n  description = \"VPC A의 CIDR\"\n}\n\n# VPC B CIDR\nvariable \"demo-vpc-b-cidr\" {\n  type        = string\n  description = \"VPC B의 CIDR\"\n}\n\n# 서브넷 A CIDR\nvariable \"demo-subnet-a-cidr\" {\n  type        = string\n  description = \"데모 서브넷 A의 CIDR\"\n}\n\n# 서브넷 B CIDR\nvariable \"demo-subnet-b-cidr\" {\n  type        = string\n  description = \"데모 서브넷 B의 CIDR\"\n}\n\n# 지역\nvariable \"region\" {\n  type        = string\n  description = \"지역\"\n}\n```\n\n\n\n## 단계 8: 제공자 파일 만들기\n\n- provider.tf 파일을 만들고 아래 코드를 추가하세요.\n\n```js\n# AWS 제공자 구성\nprovider \"aws\" {\n  region = var.region\n}\n\n# 백엔드 구성\nterraform {\n  backend \"s3\" {\n    bucket         = \"dhsoni-terraform\"\n    key            = \"peering.terraform.tfstate\"\n    region         = \"us-east-2\"\n    dynamodb_table = \"terraform-state-lock-dynamodb\"\n  }\n}\n```\n\n## 단계 9: terraform.tfvars 파일 만들기\n\n\n\n- terraform.tfvars 파일을 만들고 아래 코드를 추가해주세요.\n\n```js\nregion             = \"us-east-2\"\ndemo-vpc-a-cidr    = \"10.0.0.0/16\"\ndemo-vpc-b-cidr    = \"10.1.0.0/16\"\ndemo-subnet-a-cidr = \"10.0.1.0/24\"\ndemo-subnet-b-cidr = \"10.1.1.0/24\"\n```\n\n## 단계 10: 작업 디렉토리 초기화\n\n- 작업 디렉토리에서 terraform init 명령어를 실행해주세요. 이 명령어는 필요한 모든 공급자 및 모듈을 다운로드하고, 백엔드를 초기화합니다.\n\n\n\n## 단계 11: 테라폼 실행 계획 작성\n\n- 작업 디렉토리에서 `terraform plan` 명령을 실행하세요. 실행 계획을 확인할 수 있습니다.\n\n## 단계 12: 테라폼 적용 실행\n\n- 작업 디렉토리에서 `terraform apply` 명령을 실행하면 AWS에 필요한 모든 리소스가 생성됩니다.\n\n\n\n## 단계 13: 연결 확인하기\n\n- AWS 콘솔로 이동하여 VPC 피어링 연결을 확인하세요.\n\n![이미지](/assets/img/2024-05-15-AutomateVPCPeeringwithTerraform_1.png)\n\n이제 AWS VPC 피어링 연결을 Terraform을 사용하여 만드는 방법을 배웠습니다. 이제 원하는 대로 재생하고 필요에 맞게 수정할 수 있습니다.\n\n\n\n여기서 전체 코드를 찾을 수 있어요.\n\n다른 저장소들도 살펴보세요.\n\n이 안내서가 도움이 되었다면 👏 버튼을 클릭해 주시고, 자유롭게 댓글을 남겨 주세요.\n\n더 이런 이야기를 보고 싶다면 팔로우해 주세요 😊\n\n\n\n# 스택더믹 🎓\n\n끝까지 읽어주셔서 감사합니다. 가기 전에:\n\n- 저희 작가를 clapping하고 팔로우해주시기 바랍니다! 👏\n- 저희를 팔로우하고 Youtube, Discord에서 만나보세요\n- 다른 플랫폼에서도 만나보세요: In Plain English, CoFeed, Venture, Cubed\n- 알고리즘 콘텐츠를 강제로 다루게 하는 블로깅 플랫폼에 지쳤나요? Differ를 시도해보세요\n- 스택더믹 닷컴에서 더 많은 콘텐츠를 만나보세요","ogImage":{"url":"/assets/img/2024-05-15-AutomateVPCPeeringwithTerraform_0.png"},"coverImage":"/assets/img/2024-05-15-AutomateVPCPeeringwithTerraform_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-15-AutomateVPCPeeringwithTerraform_0.png\" alt=\"image\"></p>\n<p>AWS의 VPC 피어링은 두 개의 VPC 간에 사설 IPv4 또는 IPv6 주소를 사용하여 트래픽을 경로 설정할 수 있는 네트워킹 연결입니다.</p>\n<p>VPC 피어링은 AWS의 네트워킹 서비스 스위트의 일부로, 클라우드에서 확장 가능하고 안전하며 고가용성 네트워크 아키텍처를 생성할 수 있는 강력한 옵션을 제공합니다.</p>\n<p>이 기사에서는 Terraform을 사용하여 VPC 피어링 연결을 생성하는 방법을 살펴보겠습니다.</p>\n<h2>준비 사항:</h2>\n<ul>\n<li>Terraform이 설치된 서버</li>\n</ul>\n<h2>단계 1: VPC용 코드 생성</h2>\n<ul>\n<li>main.tf 파일을 생성하고 아래 코드를 추가하세요.</li>\n</ul>\n<pre><code class=\"hljs language-json\"># Demo VPC A\nresource <span class=\"hljs-string\">\"aws_vpc\"</span> <span class=\"hljs-string\">\"demo-vpc-a\"</span> <span class=\"hljs-punctuation\">{</span>\n  cidr_block = var.demo-vpc-a-cidr\n\n  tags = <span class=\"hljs-punctuation\">{</span>\n    Name = <span class=\"hljs-string\">\"demo-vpc-a\"</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n\n# Demo VPC B\nresource <span class=\"hljs-string\">\"aws_vpc\"</span> <span class=\"hljs-string\">\"demo-vpc-b\"</span> <span class=\"hljs-punctuation\">{</span>\n  cidr_block = var.demo-vpc-b-cidr\n\n  tags = <span class=\"hljs-punctuation\">{</span>\n    Name = <span class=\"hljs-string\">\"demo-vpc-b\"</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<ul>\n<li>위의 코드는 2개의 VPC를 생성합니다.</li>\n</ul>\n<h2>단계 2: 서브넷용 코드 작성</h2>\n<ul>\n<li>아래 코드를 main.tf 파일에 추가하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"># 데모 <span class=\"hljs-variable constant_\">VPC</span> A의 서브넷\nresource <span class=\"hljs-string\">\"aws_subnet\"</span> <span class=\"hljs-string\">\"demo-subnet-a\"</span> {\n  vpc_id            = aws_vpc.<span class=\"hljs-property\">demo</span>-vpc-a.<span class=\"hljs-property\">id</span>\n  cidr_block        = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">demo</span>-subnet-a-cidr\n  availability_zone = data.<span class=\"hljs-property\">aws_availability_zones</span>.<span class=\"hljs-property\">available_zones</span>.<span class=\"hljs-property\">names</span>[<span class=\"hljs-number\">0</span>]\n\n  tags = {\n    <span class=\"hljs-title class_\">Name</span> = <span class=\"hljs-string\">\"Public Subnet A\"</span>\n  }\n}\n\n# 데모 <span class=\"hljs-variable constant_\">VPC</span> B의 서브넷\nresource <span class=\"hljs-string\">\"aws_subnet\"</span> <span class=\"hljs-string\">\"demo-subnet-b\"</span> {\n  vpc_id            = aws_vpc.<span class=\"hljs-property\">demo</span>-vpc-b.<span class=\"hljs-property\">id</span>\n  cidr_block        = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">demo</span>-subnet-b-cidr\n  availability_zone = data.<span class=\"hljs-property\">aws_availability_zones</span>.<span class=\"hljs-property\">available_zones</span>.<span class=\"hljs-property\">names</span>[<span class=\"hljs-number\">1</span>]\n\n  tags = {\n    <span class=\"hljs-title class_\">Name</span> = <span class=\"hljs-string\">\"Public Subnet B\"</span>\n  }\n}\n</code></pre>\n<ul>\n<li>위 코드는 각 VPC에 서브넷을 생성합니다.</li>\n</ul>\n<h2>단계 3: 피어링 연결을 위한 코드 생성</h2>\n<ul>\n<li>아래 코드를 main.tf 파일에 추가하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Peering</span> connection\nresource <span class=\"hljs-string\">\"aws_vpc_peering_connection\"</span> <span class=\"hljs-string\">\"vpc_peering\"</span> {\n  vpc_id      = aws_vpc.<span class=\"hljs-property\">demo</span>-vpc-a.<span class=\"hljs-property\">id</span>\n  peer_vpc_id = aws_vpc.<span class=\"hljs-property\">demo</span>-vpc-b.<span class=\"hljs-property\">id</span>\n}\n\n# <span class=\"hljs-title class_\">Peering</span> connection acceptor\nresource <span class=\"hljs-string\">\"aws_vpc_peering_connection_accepter\"</span> <span class=\"hljs-string\">\"vpc_peering_accepter\"</span> {\n  vpc_peering_connection_id = aws_vpc_peering_connection.<span class=\"hljs-property\">vpc_peering</span>.<span class=\"hljs-property\">id</span>\n  auto_accept               = <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<ul>\n<li>위의 코드는 VPC 피어링 연결을 생성하고 자동으로 수락합니다.</li>\n</ul>\n<h2>단계 4: 라우트 테이블 및 R을 위한 코드 만들기</h2>\n<ul>\n<li>아래 코드를 main.tf 파일에 추가하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"># 라우트 테이블\n리소스 <span class=\"hljs-string\">\"aws_route_table\"</span> <span class=\"hljs-string\">\"demo-route-table-a\"</span> {\n  vpc_id = aws_vpc.<span class=\"hljs-property\">demo</span>-vpc-a.<span class=\"hljs-property\">id</span>\n}\n\n리소스 <span class=\"hljs-string\">\"aws_route_table\"</span> <span class=\"hljs-string\">\"demo-route-table-b\"</span> {\n  vpc_id = aws_vpc.<span class=\"hljs-property\">demo</span>-vpc-b.<span class=\"hljs-property\">id</span>\n}\n</code></pre>\n<ul>\n<li>위의 코드는 각 VPC에 두 개의 라우트 테이블을 생성합니다.</li>\n</ul>\n<h2>단계 5: 라우트 코드 생성</h2>\n<ul>\n<li>아래 코드를 main.tf 파일에 추가합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-variable constant_\">VPC</span> 피어링을 위한 라우트 테이블에 라우트 생성하기\nresource <span class=\"hljs-string\">\"aws_route\"</span> <span class=\"hljs-string\">\"demo-route-a\"</span> {\n  route_table_id            = aws_route_table.<span class=\"hljs-property\">demo</span>-route-table-a.<span class=\"hljs-property\">id</span>\n  destination_cidr_block    = aws_vpc.<span class=\"hljs-property\">demo</span>-vpc-b.<span class=\"hljs-property\">cidr_block</span>\n  vpc_peering_connection_id = aws_vpc_peering_connection.<span class=\"hljs-property\">vpc_peering</span>.<span class=\"hljs-property\">id</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_route\"</span> <span class=\"hljs-string\">\"route2\"</span> {\n  route_table_id            = aws_route_table.<span class=\"hljs-property\">demo</span>-route-table-b.<span class=\"hljs-property\">id</span>\n  destination_cidr_block    = aws_vpc.<span class=\"hljs-property\">demo</span>-vpc-a.<span class=\"hljs-property\">cidr_block</span>\n  vpc_peering_connection_id = aws_vpc_peering_connection.<span class=\"hljs-property\">vpc_peering</span>.<span class=\"hljs-property\">id</span>\n}\n</code></pre>\n<ul>\n<li>위 코드는 라우트 테이블을 수정하여 VPC A에서 VPC B로의 라우트 및 VPC B에서 VPC A로의 라우트를 허용합니다.</li>\n</ul>\n<h2>단계 6: 인터넷 게이트웨이용 코드 작성하기</h2>\n<ul>\n<li>아래 코드를 main.tf 파일에 추가하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"># 인터넷 게이트웨이 생성\nresource <span class=\"hljs-string\">\"aws_internet_gateway\"</span> <span class=\"hljs-string\">\"demo-igw\"</span> {\n  vpc_id = aws_vpc.<span class=\"hljs-property\">demo</span>-vpc-a.<span class=\"hljs-property\">id</span>\n}\n\n# <span class=\"hljs-variable constant_\">VPC</span> 라우트 테이블과 인터넷 게이트웨이 연결\nresource <span class=\"hljs-string\">\"aws_route\"</span> <span class=\"hljs-string\">\"route_to_internet\"</span> {\n  route_table_id         = aws_route_table.<span class=\"hljs-property\">demo</span>-route-table-a.<span class=\"hljs-property\">id</span>\n  destination_cidr_block = <span class=\"hljs-string\">\"0.0.0.0/0\"</span>\n  gateway_id             = aws_internet_gateway.<span class=\"hljs-property\">demo</span>-igw.<span class=\"hljs-property\">id</span>\n}\n</code></pre>\n<h2>단계 7: 변수 파일 생성하기</h2>\n<ul>\n<li>variables.tf 파일을 생성하고 아래 코드를 추가합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-variable constant_\">VPC</span> A <span class=\"hljs-variable constant_\">CIDR</span>\nvariable <span class=\"hljs-string\">\"demo-vpc-a-cidr\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"VPC A의 CIDR\"</span>\n}\n\n# <span class=\"hljs-variable constant_\">VPC</span> B <span class=\"hljs-variable constant_\">CIDR</span>\nvariable <span class=\"hljs-string\">\"demo-vpc-b-cidr\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"VPC B의 CIDR\"</span>\n}\n\n# 서브넷 A <span class=\"hljs-variable constant_\">CIDR</span>\nvariable <span class=\"hljs-string\">\"demo-subnet-a-cidr\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"데모 서브넷 A의 CIDR\"</span>\n}\n\n# 서브넷 B <span class=\"hljs-variable constant_\">CIDR</span>\nvariable <span class=\"hljs-string\">\"demo-subnet-b-cidr\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"데모 서브넷 B의 CIDR\"</span>\n}\n\n# 지역\nvariable <span class=\"hljs-string\">\"region\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"지역\"</span>\n}\n</code></pre>\n<h2>단계 8: 제공자 파일 만들기</h2>\n<ul>\n<li>provider.tf 파일을 만들고 아래 코드를 추가하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-variable constant_\">AWS</span> 제공자 구성\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">region</span>\n}\n\n# 백엔드 구성\nterraform {\n  backend <span class=\"hljs-string\">\"s3\"</span> {\n    bucket         = <span class=\"hljs-string\">\"dhsoni-terraform\"</span>\n    key            = <span class=\"hljs-string\">\"peering.terraform.tfstate\"</span>\n    region         = <span class=\"hljs-string\">\"us-east-2\"</span>\n    dynamodb_table = <span class=\"hljs-string\">\"terraform-state-lock-dynamodb\"</span>\n  }\n}\n</code></pre>\n<h2>단계 9: terraform.tfvars 파일 만들기</h2>\n<ul>\n<li>terraform.tfvars 파일을 만들고 아래 코드를 추가해주세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">region             = <span class=\"hljs-string\">\"us-east-2\"</span>\ndemo-vpc-a-cidr    = <span class=\"hljs-string\">\"10.0.0.0/16\"</span>\ndemo-vpc-b-cidr    = <span class=\"hljs-string\">\"10.1.0.0/16\"</span>\ndemo-subnet-a-cidr = <span class=\"hljs-string\">\"10.0.1.0/24\"</span>\ndemo-subnet-b-cidr = <span class=\"hljs-string\">\"10.1.1.0/24\"</span>\n</code></pre>\n<h2>단계 10: 작업 디렉토리 초기화</h2>\n<ul>\n<li>작업 디렉토리에서 terraform init 명령어를 실행해주세요. 이 명령어는 필요한 모든 공급자 및 모듈을 다운로드하고, 백엔드를 초기화합니다.</li>\n</ul>\n<h2>단계 11: 테라폼 실행 계획 작성</h2>\n<ul>\n<li>작업 디렉토리에서 <code>terraform plan</code> 명령을 실행하세요. 실행 계획을 확인할 수 있습니다.</li>\n</ul>\n<h2>단계 12: 테라폼 적용 실행</h2>\n<ul>\n<li>작업 디렉토리에서 <code>terraform apply</code> 명령을 실행하면 AWS에 필요한 모든 리소스가 생성됩니다.</li>\n</ul>\n<h2>단계 13: 연결 확인하기</h2>\n<ul>\n<li>AWS 콘솔로 이동하여 VPC 피어링 연결을 확인하세요.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-15-AutomateVPCPeeringwithTerraform_1.png\" alt=\"이미지\"></p>\n<p>이제 AWS VPC 피어링 연결을 Terraform을 사용하여 만드는 방법을 배웠습니다. 이제 원하는 대로 재생하고 필요에 맞게 수정할 수 있습니다.</p>\n<p>여기서 전체 코드를 찾을 수 있어요.</p>\n<p>다른 저장소들도 살펴보세요.</p>\n<p>이 안내서가 도움이 되었다면 👏 버튼을 클릭해 주시고, 자유롭게 댓글을 남겨 주세요.</p>\n<p>더 이런 이야기를 보고 싶다면 팔로우해 주세요 😊</p>\n<h1>스택더믹 🎓</h1>\n<p>끝까지 읽어주셔서 감사합니다. 가기 전에:</p>\n<ul>\n<li>저희 작가를 clapping하고 팔로우해주시기 바랍니다! 👏</li>\n<li>저희를 팔로우하고 Youtube, Discord에서 만나보세요</li>\n<li>다른 플랫폼에서도 만나보세요: In Plain English, CoFeed, Venture, Cubed</li>\n<li>알고리즘 콘텐츠를 강제로 다루게 하는 블로깅 플랫폼에 지쳤나요? Differ를 시도해보세요</li>\n<li>스택더믹 닷컴에서 더 많은 콘텐츠를 만나보세요</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}