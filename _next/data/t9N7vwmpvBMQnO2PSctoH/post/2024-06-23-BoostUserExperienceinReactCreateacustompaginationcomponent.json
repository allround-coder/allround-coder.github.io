{"pageProps":{"post":{"title":"React에서 사용자 경험 향상하기  커스텀 페이지네이션 컴포넌트 만드는 방법","description":"","date":"2024-06-23 13:39","slug":"2024-06-23-BoostUserExperienceinReactCreateacustompaginationcomponent","content":"\n\n<img src=\"/assets/img/2024-06-23-BoostUserExperienceinReactCreateacustompaginationcomponent_0.png\" />\n\n## 소개:\n\n페이지네이션은 대규모 데이터를 처리하는 웹 앱에서 반드시 필요합니다. 사용자가 정보를 쉽게 탐색하도록 도와주어 경험을 향상시킵니다.\n\nReact는 미리 제작된 페이지네이션 라이브러리를 제공하지만, 사용자 정의 컴포넌트를 만들면 더 많은 제어력과 유연성을 얻을 수 있습니다. 이 단계별 튜토리얼은 React에서 자체 페이지네이션 컴포넌트를 구축하는 방법을 안내해주어 내부 작업과 구현 능력에 대한 견고한 이해를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n## 프로젝트 설정\n\n먼저 React 프로젝트를 설정해 봅시다. 시스템에 Node.js와 npm이 설치되어 있는지 확인해 주세요. 그런 다음 Create React App을 사용하여 새 React 앱을 만들어 봅시다:\n\n```js\nnpx create-react-app custom-pagination\ncd custom-pagination\n```\n\n## 페이지네이션 컴포넌트 구축\n\n<div class=\"content-ad\"></div>\n\n이제 우리가 만든 사용자 정의 페이지네이션 컴포넌트를 만들 차례입니다. Pagination.js로 이름을 지을 거에요. 첫 번째 컴포넌트 코드는 여기 있어요:\n\n```js\n// Pagination.js\n\nimport React from \"react\";\nimport { Button, Container, Row, Col, Form } from \"react-bootstrap\";\nimport { OPTIONSROWPERPAGESUSERS } from \"../config/constants\";\n\nfunction Pagination({\n  currentPage,\n  totalPages,\n  handleChangeRowsPerPage,\n  handleChangePage\n}) {\n  const paginationRange = () => {\n      // 페이지네이션 로직\n  };\n\n  return (\n    <Container fluid id=\"custom-pagination\">\n      <Row>\n          <Col md={\"auto\"}>\n            <Form.Select size=\"md\" onChange={handleChangeRowsPerPage}>\n              {OPTIONSROWPERPAGESUSERS.map((elem) => {\n                return (\n                  <option key={elem.value} value={elem.value}>\n                    {elem.label}\n                  </option>\n                );\n              })}\n            </Form.Select>\n          </Col>\n        <Col md={\"auto\"}>\n          <Button\n            className={currentPage === 1 ? \"disable page-item\" : \"page-item\"}\n            disabled={currentPage === 1}\n            onClick={() => handleChangePage(currentPage - 1)}\n          >\n            Prev\n          </Button>\n          {paginationRange().map((pageNumber, index) => (\n            <Button\n              key={index}\n              active={pageNumber === currentPage}\n              disabled={pageNumber === \"...\"}\n              className={\n                pageNumber === currentPage\n                  ? \"isActive page-item\"\n                  : pageNumber !== \"...\"\n                  ? \"page-item\"\n                  : \"disable page-item\"\n              }\n              onClick={() => pageNumber !== \"...\" && handleChangePage(pageNumber)}\n            >\n              {pageNumber}\n            </Button>\n          ))}\n\n          <Button\n            className={\n              currentPage === totalPages ? \"disable page-item\" : \"page-item\"\n            }\n            disabled={currentPage === totalPages}\n            onClick={() => {\n              handleChangePage(currentPage + 1);\n            }\n          >\n            Next\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Pagination;\n```\n\n## 페이지네이션 로직 구현\n\n이제 Pagination 컴포넌트 내부에 페이지네이션 로직을 구현할 차례입니다. 현재 페이지와 전체 페이지 수에 기반하여 표시할 페이지 번호를 결정하는 이 로직을 구현할 거에요.\n\n<div class=\"content-ad\"></div>\n\n```js\r\nconst paginationRange = () => {\n  const pages = [];\n\n  if (currentPage > 1) {\n    pages.push(1);\n    if (currentPage > 2) {\n      pages.push(\"...\");\n    }\n  }\n\n  const prevPage = currentPage - 1;\n  const nextPage = currentPage + 1;\n\n  if (prevPage > 1) {\n    pages.push(prevPage);\n  }\n\n  pages.push(currentPage);\n  if (nextPage <= totalPages) {\n    pages.push(nextPage);\n  }\n  if (currentPage < totalPages - 1) {\n    if (currentPage < totalPages - 2) {\n      pages.push(\"...\");\n    }\n    pages.push(totalPages);\n  }\n\n  return pages;\n};\r\n```\n\n## 구성 요소 스타일링\n\n이제 페이지 구성 요소에 기본 스타일을 추가하여 시각적으로 매력적으로 만들어 보겠습니다:\n\n```js\r\n/* styles.css */\n\n.pagination {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n.pagination button {\n  margin: 0 5px;\n  padding: 5px 10px;\n  border: 1px solid #ccc;\n  background-color: #f9f9f9;\n  cursor: pointer;\n}\n\n.pagination button.active {\n  background-color: #007bff;\n  color: #fff;\n}\n\n.pagination button.disable {\n  pointer-events: none;\n  opacity: 0.5;\n}\r\n```\n\n<div class=\"content-ad\"></div>\n\n## 통합 및 사용\n\n우리의 사용자 정의 페이징 컴포넌트를 사용하기 위해서는 데이터 및 페이징 상태를 관리하는 부모 컴포넌트에 통합해야 합니다. 이를 보여주기 위해 간단한 예제를 만들어보겠습니다.\n\nApp.js 파일을 만들고 상태와 데이터 처리를 설정해보세요.\n\n```js\n// App.js\n\nimport React, { useState } from \"react\";\nimport Pagination from \"./Pagination\";\n\nconst data = [...Array(100).keys()].map(i => `아이템 ${i + 1}`);\n\nconst App = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const totalPages = Math.ceil(data.length / rowsPerPage);\n\n  const handleChangePage = (page) => {\n    setCurrentPage(page);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(Number(event.target.value));\n    setCurrentPage(1);\n  };\n\n  const paginatedData = data.slice(\n    (currentPage - 1) * rowsPerPage,\n    currentPage * rowsPerPage\n  );\n\n  return (\n    <div className=\"App\">\n      <ul>\n        {paginatedData.map((item, index) => (\n          <li key={index}>{item}</li>\n        ))}\n      </ul>\n      <Pagination\n        currentPage={currentPage}\n        totalPages={totalPages}\n        handleChangePage={handleChangePage}\n        handleChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n<div class=\"content-ad\"></div>\n\n## 테스트 및 최적화\n\n마무리하기 전에, 페이지네이션 구성 요소를 철저히 테스트하고 성능을 최적화하는 것이 중요합니다. React Developer Tools 및 Lighthouse와 같은 도구를 사용하여 테스트하고 최적화할 수 있습니다.\n\n## 결론\n\n축하합니다! ReactJS에서 사용자 정의 페이지네이션 구성 요소를 성공적으로 구축했습니다. 프로젝트 설정부터 페이지네이션 로직 구현 및 구성 요소 스타일링까지 모두 다루었습니다. 필요에 맞게 구성 요소를 더 맞춤화하여 자유롭게 사용해보세요.\n\n<div class=\"content-ad\"></div>\n\n이제 여러분 차례입니다! 여러분의 프로젝트에서 이를 시도해보세요. 즐겁게 코딩하세요!\n\n## 도움이 되셨나요? 그렇다면:\n\n아래 👏 버튼을 눌러주셔서 더 많은 사람들이 이를 볼 수 있도록 도와주세요.\n\n## 궁금한 점이 있으신가요?\n\n<div class=\"content-ad\"></div>\n\n제안이나 개선 사항이 있으시면 언제든지 Medium에 의견을 남겨주세요. 또는 Linkedin에서 제게 연락해 주세요. 항상 당신의 의견을 듣고 싶어합니다. 👩‍💻","ogImage":{"url":"/assets/img/2024-06-23-BoostUserExperienceinReactCreateacustompaginationcomponent_0.png"},"coverImage":"/assets/img/2024-06-23-BoostUserExperienceinReactCreateacustompaginationcomponent_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>소개:</h2>\n<p>페이지네이션은 대규모 데이터를 처리하는 웹 앱에서 반드시 필요합니다. 사용자가 정보를 쉽게 탐색하도록 도와주어 경험을 향상시킵니다.</p>\n<p>React는 미리 제작된 페이지네이션 라이브러리를 제공하지만, 사용자 정의 컴포넌트를 만들면 더 많은 제어력과 유연성을 얻을 수 있습니다. 이 단계별 튜토리얼은 React에서 자체 페이지네이션 컴포넌트를 구축하는 방법을 안내해주어 내부 작업과 구현 능력에 대한 견고한 이해를 제공합니다.</p>\n<h2>프로젝트 설정</h2>\n<p>먼저 React 프로젝트를 설정해 봅시다. 시스템에 Node.js와 npm이 설치되어 있는지 확인해 주세요. 그런 다음 Create React App을 사용하여 새 React 앱을 만들어 봅시다:</p>\n<pre><code class=\"hljs language-js\">npx create-react-app custom-pagination\ncd custom-pagination\n</code></pre>\n<h2>페이지네이션 컴포넌트 구축</h2>\n<p>이제 우리가 만든 사용자 정의 페이지네이션 컴포넌트를 만들 차례입니다. Pagination.js로 이름을 지을 거에요. 첫 번째 컴포넌트 코드는 여기 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Pagination.js</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Button</span>, <span class=\"hljs-title class_\">Container</span>, <span class=\"hljs-title class_\">Row</span>, <span class=\"hljs-title class_\">Col</span>, <span class=\"hljs-title class_\">Form</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-bootstrap\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">OPTIONSROWPERPAGESUSERS</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../config/constants\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Pagination</span>(<span class=\"hljs-params\">{\n  currentPage,\n  totalPages,\n  handleChangeRowsPerPage,\n  handleChangePage\n}</span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">paginationRange</span> = (<span class=\"hljs-params\"></span>) => {\n      <span class=\"hljs-comment\">// 페이지네이션 로직</span>\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Container</span> <span class=\"hljs-attr\">fluid</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"custom-pagination\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Row</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Col</span> <span class=\"hljs-attr\">md</span>=<span class=\"hljs-string\">{</span>\"<span class=\"hljs-attr\">auto</span>\"}></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Form.Select</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"md\"</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChangeRowsPerPage}</span>></span>\n              {OPTIONSROWPERPAGESUSERS.map((elem) => {\n                return (\n                  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{elem.value}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{elem.value}</span>></span>\n                    {elem.label}\n                  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">option</span>></span>\n                );\n              })}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Form.Select</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Col</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Col</span> <span class=\"hljs-attr\">md</span>=<span class=\"hljs-string\">{</span>\"<span class=\"hljs-attr\">auto</span>\"}></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{currentPage</span> === <span class=\"hljs-string\">1</span> ? \"<span class=\"hljs-attr\">disable</span> <span class=\"hljs-attr\">page-item</span>\" <span class=\"hljs-attr\">:</span> \"<span class=\"hljs-attr\">page-item</span>\"}\n            <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{currentPage</span> === <span class=\"hljs-string\">1}</span>\n            <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> handleChangePage(currentPage - 1)}\n          >\n            Prev\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span>\n          {paginationRange().map((pageNumber, index) => (\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>\n              <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>\n              <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{pageNumber</span> === <span class=\"hljs-string\">currentPage}</span>\n              <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{pageNumber</span> === <span class=\"hljs-string\">\"...\"</span>}\n              <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>\n                <span class=\"hljs-attr\">pageNumber</span> === <span class=\"hljs-string\">currentPage</span>\n                  ? \"<span class=\"hljs-attr\">isActive</span> <span class=\"hljs-attr\">page-item</span>\"\n                  <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">pageNumber</span> !== <span class=\"hljs-string\">\"...\"</span>\n                  ? \"<span class=\"hljs-attr\">page-item</span>\"\n                  <span class=\"hljs-attr\">:</span> \"<span class=\"hljs-attr\">disable</span> <span class=\"hljs-attr\">page-item</span>\"\n              }\n              <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> pageNumber !== \"...\" &#x26;&#x26; handleChangePage(pageNumber)}\n            >\n              {pageNumber}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span>\n          ))}\n\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>\n              <span class=\"hljs-attr\">currentPage</span> === <span class=\"hljs-string\">totalPages</span> ? \"<span class=\"hljs-attr\">disable</span> <span class=\"hljs-attr\">page-item</span>\" <span class=\"hljs-attr\">:</span> \"<span class=\"hljs-attr\">page-item</span>\"\n            }\n            <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{currentPage</span> === <span class=\"hljs-string\">totalPages}</span>\n            <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> {\n              handleChangePage(currentPage + 1);\n            }\n          >\n            Next\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Col</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Row</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Container</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Pagination</span>;\n</code></pre>\n<h2>페이지네이션 로직 구현</h2>\n<p>이제 Pagination 컴포넌트 내부에 페이지네이션 로직을 구현할 차례입니다. 현재 페이지와 전체 페이지 수에 기반하여 표시할 페이지 번호를 결정하는 이 로직을 구현할 거에요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">paginationRange</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> pages = [];\n\n  <span class=\"hljs-keyword\">if</span> (currentPage > <span class=\"hljs-number\">1</span>) {\n    pages.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">if</span> (currentPage > <span class=\"hljs-number\">2</span>) {\n      pages.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">\"...\"</span>);\n    }\n  }\n\n  <span class=\"hljs-keyword\">const</span> prevPage = currentPage - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">const</span> nextPage = currentPage + <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-keyword\">if</span> (prevPage > <span class=\"hljs-number\">1</span>) {\n    pages.<span class=\"hljs-title function_\">push</span>(prevPage);\n  }\n\n  pages.<span class=\"hljs-title function_\">push</span>(currentPage);\n  <span class=\"hljs-keyword\">if</span> (nextPage &#x3C;= totalPages) {\n    pages.<span class=\"hljs-title function_\">push</span>(nextPage);\n  }\n  <span class=\"hljs-keyword\">if</span> (currentPage &#x3C; totalPages - <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">if</span> (currentPage &#x3C; totalPages - <span class=\"hljs-number\">2</span>) {\n      pages.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">\"...\"</span>);\n    }\n    pages.<span class=\"hljs-title function_\">push</span>(totalPages);\n  }\n\n  <span class=\"hljs-keyword\">return</span> pages;\n};\n</code></pre>\n<h2>구성 요소 스타일링</h2>\n<p>이제 페이지 구성 요소에 기본 스타일을 추가하여 시각적으로 매력적으로 만들어 보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* styles.css */</span>\n\n.<span class=\"hljs-property\">pagination</span> {\n  <span class=\"hljs-attr\">display</span>: flex;\n  justify-<span class=\"hljs-attr\">content</span>: center;\n  margin-<span class=\"hljs-attr\">top</span>: 20px;\n}\n\n.<span class=\"hljs-property\">pagination</span> button {\n  <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span> 5px;\n  <span class=\"hljs-attr\">padding</span>: 5px 10px;\n  <span class=\"hljs-attr\">border</span>: 1px solid #ccc;\n  background-<span class=\"hljs-attr\">color</span>: #f9f9f9;\n  <span class=\"hljs-attr\">cursor</span>: pointer;\n}\n\n.<span class=\"hljs-property\">pagination</span> button.<span class=\"hljs-property\">active</span> {\n  background-<span class=\"hljs-attr\">color</span>: #007bff;\n  <span class=\"hljs-attr\">color</span>: #fff;\n}\n\n.<span class=\"hljs-property\">pagination</span> button.<span class=\"hljs-property\">disable</span> {\n  pointer-<span class=\"hljs-attr\">events</span>: none;\n  <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0.5</span>;\n}\n</code></pre>\n<h2>통합 및 사용</h2>\n<p>우리의 사용자 정의 페이징 컴포넌트를 사용하기 위해서는 데이터 및 페이징 상태를 관리하는 부모 컴포넌트에 통합해야 합니다. 이를 보여주기 위해 간단한 예제를 만들어보겠습니다.</p>\n<p>App.js 파일을 만들고 상태와 데이터 처리를 설정해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// App.js</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Pagination</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Pagination\"</span>;\n\n<span class=\"hljs-keyword\">const</span> data = [...<span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">100</span>).<span class=\"hljs-title function_\">keys</span>()].<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =></span> <span class=\"hljs-string\">`아이템 <span class=\"hljs-subst\">${i + <span class=\"hljs-number\">1</span>}</span>`</span>);\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [currentPage, setCurrentPage] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">const</span> [rowsPerPage, setRowsPerPage] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">10</span>);\n\n  <span class=\"hljs-keyword\">const</span> totalPages = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">ceil</span>(data.<span class=\"hljs-property\">length</span> / rowsPerPage);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleChangePage</span> = (<span class=\"hljs-params\">page</span>) => {\n    <span class=\"hljs-title function_\">setCurrentPage</span>(page);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleChangeRowsPerPage</span> = (<span class=\"hljs-params\">event</span>) => {\n    <span class=\"hljs-title function_\">setRowsPerPage</span>(<span class=\"hljs-title class_\">Number</span>(event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>));\n    <span class=\"hljs-title function_\">setCurrentPage</span>(<span class=\"hljs-number\">1</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> paginatedData = data.<span class=\"hljs-title function_\">slice</span>(\n    (currentPage - <span class=\"hljs-number\">1</span>) * rowsPerPage,\n    currentPage * rowsPerPage\n  );\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        {paginatedData.map((item, index) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>></span>{item}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Pagination</span>\n        <span class=\"hljs-attr\">currentPage</span>=<span class=\"hljs-string\">{currentPage}</span>\n        <span class=\"hljs-attr\">totalPages</span>=<span class=\"hljs-string\">{totalPages}</span>\n        <span class=\"hljs-attr\">handleChangePage</span>=<span class=\"hljs-string\">{handleChangePage}</span>\n        <span class=\"hljs-attr\">handleChangeRowsPerPage</span>=<span class=\"hljs-string\">{handleChangeRowsPerPage}</span>\n      /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<h2>테스트 및 최적화</h2>\n<p>마무리하기 전에, 페이지네이션 구성 요소를 철저히 테스트하고 성능을 최적화하는 것이 중요합니다. React Developer Tools 및 Lighthouse와 같은 도구를 사용하여 테스트하고 최적화할 수 있습니다.</p>\n<h2>결론</h2>\n<p>축하합니다! ReactJS에서 사용자 정의 페이지네이션 구성 요소를 성공적으로 구축했습니다. 프로젝트 설정부터 페이지네이션 로직 구현 및 구성 요소 스타일링까지 모두 다루었습니다. 필요에 맞게 구성 요소를 더 맞춤화하여 자유롭게 사용해보세요.</p>\n<p>이제 여러분 차례입니다! 여러분의 프로젝트에서 이를 시도해보세요. 즐겁게 코딩하세요!</p>\n<h2>도움이 되셨나요? 그렇다면:</h2>\n<p>아래 👏 버튼을 눌러주셔서 더 많은 사람들이 이를 볼 수 있도록 도와주세요.</p>\n<h2>궁금한 점이 있으신가요?</h2>\n<p>제안이나 개선 사항이 있으시면 언제든지 Medium에 의견을 남겨주세요. 또는 Linkedin에서 제게 연락해 주세요. 항상 당신의 의견을 듣고 싶어합니다. 👩‍💻</p>\n</body>\n</html>\n"},"__N_SSG":true}