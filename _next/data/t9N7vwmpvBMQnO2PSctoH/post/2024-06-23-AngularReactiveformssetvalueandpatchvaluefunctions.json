{"pageProps":{"post":{"title":"Angular Reactive Forms setValue와 patchValue 함수 사용 방법","description":"","date":"2024-06-23 14:08","slug":"2024-06-23-AngularReactiveformssetvalueandpatchvaluefunctions","content":"\n\nsetValue() 및 patchValue() 함수는 Angular에서 반응형 폼 컨트롤을 채우는 데 사용됩니다. 두 함수의 사용 사례가 다릅니다.\n\n다음의 반응형 폼 예제와 함께 두 함수가 동작하는 방식을 이해해보겠습니다.\n\n```js\nmyForm: FormGroup;\n\nconstructor(private fb: FormBuilder) {}\n\nngOnInit() {\n  this.myForm = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    email: ['', [Validators.required, Validators.email]],\n  });\n}\n```\n\n- setValue() 함수\n\n<div class=\"content-ad\"></div>\n\nsetValue() 함수는 반응형 폼 컨트롤의 값을 설정하는 데 사용됩니다.\n\n```js\n  setValueExample() {\n    this.myForm.setValue({\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'john.doe@example.com',\n    });\n  }\n```\n\nsetValue() 함수는 폼의 모든 컨트롤을 업데이트하고 싶을 때 사용됩니다. setValue() 함수를 사용할 때에는 모든 컨트롤 값을 제공해야 하므로 부분 데이터가 있는 경우나 폼의 모든 컨트롤을 채우고 싶지 않은 경우에는 이 함수를 사용할 수 없습니다.\n\n2. patchValue() 함수\n\n<div class=\"content-ad\"></div>\n\npatchValue() 함수는 반응형 폼 컨트롤의 값을 설정하는 데 사용됩니다.\n\n```js\n  patchValueExample() {\n    this.myForm.patchValue({\n      firstName: 'UpdatedFirstName',\n      lastName: 'UpdatedLastName',\n    });\n  }\n```\n\npatchValue() 함수는 반응형 폼의 모든 컨트롤을 업데이트하고 싶지 않을 때 사용됩니다. 폼의 일부 컨트롤만 채우고 싶을 때 사용됩니다.\n\n예를 들어, 폼에 선택 사항 입력란이 하나 있고 사용자가 해당 입력란을 작성하지 않았을 때, 이 값을 데이터베이스에 null 또는 빈 문자열로 저장할 수 있습니다. 따라서 폼 컨트롤을 채울 때 이 입력 컨트롤을 업데이트하거나 채우고 싶지 않을 수 있습니다. 이럴 때 patch value를 사용할 수 있습니다. 이 함수를 사용하면 부분 폼 컨트롤을 채울 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n개발자들은 사용 사례 시나리오에 따라 두 함수를 모두 사용합니다. setValue() 함수는 양식의 모든 컨트롤을 필수적으로 채우려 할 때 사용하고, patchValue() 함수는 양식의 일부 컨트롤만 채우려 할 때 사용합니다.","ogImage":{"url":"/assets/img/2024-06-23-AngularReactiveformssetvalueandpatchvaluefunctions_0.png"},"coverImage":"/assets/img/2024-06-23-AngularReactiveformssetvalueandpatchvaluefunctions_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>setValue() 및 patchValue() 함수는 Angular에서 반응형 폼 컨트롤을 채우는 데 사용됩니다. 두 함수의 사용 사례가 다릅니다.</p>\n<p>다음의 반응형 폼 예제와 함께 두 함수가 동작하는 방식을 이해해보겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">myForm</span>: <span class=\"hljs-title class_\">FormGroup</span>;\n\n<span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private fb: FormBuilder</span>) {}\n\n<span class=\"hljs-title function_\">ngOnInit</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">myForm</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fb</span>.<span class=\"hljs-title function_\">group</span>({\n    <span class=\"hljs-attr\">firstName</span>: [<span class=\"hljs-string\">''</span>, <span class=\"hljs-title class_\">Validators</span>.<span class=\"hljs-property\">required</span>],\n    <span class=\"hljs-attr\">lastName</span>: [<span class=\"hljs-string\">''</span>, <span class=\"hljs-title class_\">Validators</span>.<span class=\"hljs-property\">required</span>],\n    <span class=\"hljs-attr\">email</span>: [<span class=\"hljs-string\">''</span>, [<span class=\"hljs-title class_\">Validators</span>.<span class=\"hljs-property\">required</span>, <span class=\"hljs-title class_\">Validators</span>.<span class=\"hljs-property\">email</span>]],\n  });\n}\n</code></pre>\n<ul>\n<li>setValue() 함수</li>\n</ul>\n<p>setValue() 함수는 반응형 폼 컨트롤의 값을 설정하는 데 사용됩니다.</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-title function_\">setValueExample</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">myForm</span>.<span class=\"hljs-title function_\">setValue</span>({\n      <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'John'</span>,\n      <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>,\n      <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">'john.doe@example.com'</span>,\n    });\n  }\n</code></pre>\n<p>setValue() 함수는 폼의 모든 컨트롤을 업데이트하고 싶을 때 사용됩니다. setValue() 함수를 사용할 때에는 모든 컨트롤 값을 제공해야 하므로 부분 데이터가 있는 경우나 폼의 모든 컨트롤을 채우고 싶지 않은 경우에는 이 함수를 사용할 수 없습니다.</p>\n<ol start=\"2\">\n<li>patchValue() 함수</li>\n</ol>\n<p>patchValue() 함수는 반응형 폼 컨트롤의 값을 설정하는 데 사용됩니다.</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-title function_\">patchValueExample</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">myForm</span>.<span class=\"hljs-title function_\">patchValue</span>({\n      <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'UpdatedFirstName'</span>,\n      <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'UpdatedLastName'</span>,\n    });\n  }\n</code></pre>\n<p>patchValue() 함수는 반응형 폼의 모든 컨트롤을 업데이트하고 싶지 않을 때 사용됩니다. 폼의 일부 컨트롤만 채우고 싶을 때 사용됩니다.</p>\n<p>예를 들어, 폼에 선택 사항 입력란이 하나 있고 사용자가 해당 입력란을 작성하지 않았을 때, 이 값을 데이터베이스에 null 또는 빈 문자열로 저장할 수 있습니다. 따라서 폼 컨트롤을 채울 때 이 입력 컨트롤을 업데이트하거나 채우고 싶지 않을 수 있습니다. 이럴 때 patch value를 사용할 수 있습니다. 이 함수를 사용하면 부분 폼 컨트롤을 채울 수 있습니다.</p>\n<p>개발자들은 사용 사례 시나리오에 따라 두 함수를 모두 사용합니다. setValue() 함수는 양식의 모든 컨트롤을 필수적으로 채우려 할 때 사용하고, patchValue() 함수는 양식의 일부 컨트롤만 채우려 할 때 사용합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}