{"pageProps":{"post":{"title":"왜 효과가 필요하지 않을 수도 있습니다 React 컴포넌트 최적화하기","description":"","date":"2024-05-12 21:04","slug":"2024-05-12-WhyYouMightNotNeedanEffectOptimizingReactComponents","content":"\n\n<img src=\"/assets/img/2024-05-12-WhyYouMightNotNeedanEffectOptimizingReactComponents_0.png\" />\n\n요즘 리액트 개발에서 useEffect 훅은 강력한 도구입니다. 그러나 종종 과도하게 사용되거나 잘못 사용되어 불필요한 복잡성과 성능 문제를 야기할 수 있습니다. useEffect에 항상 의지하는 대신, 고려할 가치가 있는 대안들이 있습니다. 이 글에서는 그러한 대안을 탐구하고 실용적인 코딩 예제를 제공합니다.\n\n# 흔한 오용 사례\n\n# 1. 상태 동기화\n\n\n\n일반적인 사용 사례는 상태 변수를 동기화하는 것입니다. 하지만 리액트의 onChange 및 다른 이벤트 핸들러들은 대부분의 상태 업데이트를 직접 처리할 수 있습니다.\n\n잘못된 예시:\n\n```js\nimport { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const [double, setDouble] = useState(0);\n\n  useEffect(() => {\n    setDouble(count * 2); // 이중 값 계산을 위한 사이드 이펙트\n  }, [count]);\n\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>증가</button>\n      <p>카운트: {count}</p>\n      <p>이중: {double}</p>\n    </div>\n  );\n}\n```\n\n최적화된 솔루션:\n\n\n\n```js\nimport { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const double = count * 2; // useEffect 없이 직접 계산\n\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>증가</button>\n      <p>카운트: {count}</p>\n      <p>더블: {double}</p>\n    </div>\n  );\n}\n```\n\n# 2. 데이터 가져오기\n\nuseEffect에서 데이터를 가져오는 것은 필수적이지만, react-query나 React의 새로운 Server Components와 같은 데이터 가져오기 라이브러리를 사용하여 간단히할 수 있습니다.\n\n잘못된 예시:\n\n\n\n```js\nimport { useState, useEffect } from 'react';\n\nfunction UserProfile({ userId }) {\n  const [profile, setProfile] = useState(null);\n  useEffect(() => {\n    async function fetchProfile() {\n      const response = await fetch(`/api/users/${userId}`);\n      const data = await response.json();\n      setProfile(data);\n    }\n    fetchProfile();\n  }, [userId]);\n  return profile ? <div>{profile.name}</div> : <p>Loading...</p>;\n}\n```\n\nReact 서버 구성 요소를 사용한 최적화된 해결책:\n\n```js\n// components/UserProfile.server.js\nimport React from 'react';\n\nexport default async function UserProfile({ userId }) {\n  const response = await fetch(`https://api.example.com/users/${userId}`);\n  const profile = await response.json();\n\n  return <div>{profile.name}</div>;\n}\n```\n\n클라이언트 컴포넌트에서의 사용법:\n\n\n\n\n// components/App.client.js\nimport UserProfile from './UserProfile.server';\n\nfunction App({ userId }) {\n  return (\n    <div>\n      <h1>User Profile</h1>\n      <UserProfile userId={userId} />\n    </div>\n  );\n}\n\nexport default App;\n\n\n## 3. Form Inputs and Debounced Updates\n\nInstead of debouncing updates through useEffect, handle it directly via controlled input components.\n\nIncorrect Example:\n\n\n\n\n```js\r\nimport { useState, useEffect } from 'react';\n\nfunction Search() {\n  const [query, setQuery] = useState('');\n  const [debouncedQuery, setDebouncedQuery] = useState(query);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(query);\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [query]);\n  return <input value={query} onChange={(e) => setQuery(e.target.value)} />;\n}\r\n```\n\n커스텀 훅을 사용한 최적화된 솔루션:\n\n```js\r\nimport { useState } from 'react';\nimport useDebounce from './useDebounce';\n\nfunction Search() {\n  const [query, setQuery] = useState('');\n  const debouncedQuery = useDebounce(query, 300);\n  return <input value={query} onChange={(e) => setQuery(e.target.value)} />;\n}\r\n```\n\nuseDebounce 커스텀 훅은 디바운싱 로직을 캡슐화합니다:\n\n\n\n```js\nimport { useState, useEffect } from 'react';\n\nfunction useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const timer = setTimeout(() => setDebouncedValue(value), delay);\n    return () => clearTimeout(timer);\n  }, [value, delay]);\n  return debouncedValue;\n}\nexport default useDebounce;\n```\n\n# 4. Prop이 변경될 때 모든 상태를 재설정하는 방법\n\n다른 항목 간을 이동할 때 폼 필드나 필터와 같은 상태 변수를 재설정하는 것이 중요합니다. 이 재설정을 처리하는 비효율적인 방법은 useEffect 훅을 사용하여 prop 변경에 따라 상태를 수동으로 지우는 것입니다. 그러나 이렇게 하면 추가 렌더링 사이클이 발생하고 불필요한 복잡성을 야기합니다.\n\n올바르지 않은 예시:\n\n\n\n```js\nimport { useState, useEffect } from 'react';\n\nexport default function ItemDetails({ itemId }) {\n  const [input, setInput] = useState('');\n  // 🔴 비효율적: 효과를 이용해 상태를 재설정\n  useEffect(() => {\n    setInput(''); // itemId가 변경될 때 입력 필드를 지움\n  }, [itemId]);\n\n  return <input value={input} onChange={(e) => setInput(e.target.value)} />;\n}\n```\n\n효과에 의존하는 대신 key prop을 사용하여 자동으로 재설정되도록 할 수 있습니다. 컴포넌트를 둘로 분리하고 내부 컴포넌트에 고유한 key prop을 전달하면 React가 새로운 인스턴스로 처리하여 모든 내부 상태를 재설정합니다.\n\n최적화된 솔루션:\n\n```js\nexport default function ItemDetails({ itemId }) {\n  return <ItemForm itemId={itemId} key={itemId} />;\n}\n\nfunction ItemForm({ itemId }) {\n  // ✅ key 변경 시 상태 자동 재설정\n  const [input, setInput] = useState('');\n  return (\n    <div>\n      <h2>아이템 {itemId}에 대한 세부정보</h2>\n      <input value={input} onChange={(e) => setInput(e.target.value)} />\n    </div>\n  );\n}\n```\n\n\n\n# 결론\n\nReact의 useEffect는 가치가 있지만 종종 잘못 적용될 수 있습니다. 많은 경우, 이벤트 핸들러, react-query와 같은 라이브러리, 또는 커스텀 훅과 같은 대안적인 접근 방식을 사용하면 더 깔끔하고 유지보수가 쉬운 해결책을 제공할 수 있습니다. 더 많은 정보를 원하신다면 React의 가이드를 확인해보세요.","ogImage":{"url":"/assets/img/2024-05-12-WhyYouMightNotNeedanEffectOptimizingReactComponents_0.png"},"coverImage":"/assets/img/2024-05-12-WhyYouMightNotNeedanEffectOptimizingReactComponents_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>요즘 리액트 개발에서 useEffect 훅은 강력한 도구입니다. 그러나 종종 과도하게 사용되거나 잘못 사용되어 불필요한 복잡성과 성능 문제를 야기할 수 있습니다. useEffect에 항상 의지하는 대신, 고려할 가치가 있는 대안들이 있습니다. 이 글에서는 그러한 대안을 탐구하고 실용적인 코딩 예제를 제공합니다.</p>\n<h1>흔한 오용 사례</h1>\n<h1>1. 상태 동기화</h1>\n<p>일반적인 사용 사례는 상태 변수를 동기화하는 것입니다. 하지만 리액트의 onChange 및 다른 이벤트 핸들러들은 대부분의 상태 업데이트를 직접 처리할 수 있습니다.</p>\n<p>잘못된 예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">const</span> [double, setDouble] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">setDouble</span>(count * <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 이중 값 계산을 위한 사이드 이펙트</span>\n  }, [count]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount(count + 1)}>증가<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>카운트: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>이중: {double}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>최적화된 솔루션:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">const</span> double = count * <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// useEffect 없이 직접 계산</span>\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount(count + 1)}>증가<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>카운트: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>더블: {double}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<h1>2. 데이터 가져오기</h1>\n<p>useEffect에서 데이터를 가져오는 것은 필수적이지만, react-query나 React의 새로운 Server Components와 같은 데이터 가져오기 라이브러리를 사용하여 간단히할 수 있습니다.</p>\n<p>잘못된 예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">UserProfile</span>(<span class=\"hljs-params\">{ userId }</span>) {\n  <span class=\"hljs-keyword\">const</span> [profile, setProfile] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchProfile</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/users/<span class=\"hljs-subst\">${userId}</span>`</span>);\n      <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n      <span class=\"hljs-title function_\">setProfile</span>(data);\n    }\n    <span class=\"hljs-title function_\">fetchProfile</span>();\n  }, [userId]);\n  <span class=\"hljs-keyword\">return</span> profile ? <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>{profile.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span> : <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Loading...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n}\n</code></pre>\n<p>React 서버 구성 요소를 사용한 최적화된 해결책:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// components/UserProfile.server.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">UserProfile</span>(<span class=\"hljs-params\">{ userId }</span>) {\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`https://api.example.com/users/<span class=\"hljs-subst\">${userId}</span>`</span>);\n  <span class=\"hljs-keyword\">const</span> profile = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>{profile.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n}\n</code></pre>\n<p>클라이언트 컴포넌트에서의 사용법:</p>\n<p>// components/App.client.js\nimport UserProfile from './UserProfile.server';</p>\n<p>function App({ userId }) {\nreturn (\n\nUser Profile\n\n\n);\n}</p>\n<p>export default App;</p>\n<h2>3. Form Inputs and Debounced Updates</h2>\n<p>Instead of debouncing updates through useEffect, handle it directly via controlled input components.</p>\n<p>Incorrect Example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Search</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [query, setQuery] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n  <span class=\"hljs-keyword\">const</span> [debouncedQuery, setDebouncedQuery] = <span class=\"hljs-title function_\">useState</span>(query);\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-title function_\">setDebouncedQuery</span>(query);\n    }, <span class=\"hljs-number\">300</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">clearTimeout</span>(timer);\n  }, [query]);\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{query}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setQuery(e.target.value)} /></span>;\n}\n</code></pre>\n<p>커스텀 훅을 사용한 최적화된 솔루션:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> useDebounce <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./useDebounce'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Search</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [query, setQuery] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n  <span class=\"hljs-keyword\">const</span> debouncedQuery = <span class=\"hljs-title function_\">useDebounce</span>(query, <span class=\"hljs-number\">300</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{query}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setQuery(e.target.value)} /></span>;\n}\n</code></pre>\n<p>useDebounce 커스텀 훅은 디바운싱 로직을 캡슐화합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useDebounce</span>(<span class=\"hljs-params\">value, delay</span>) {\n  <span class=\"hljs-keyword\">const</span> [debouncedValue, setDebouncedValue] = <span class=\"hljs-title function_\">useState</span>(value);\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">setDebouncedValue</span>(value), delay);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">clearTimeout</span>(timer);\n  }, [value, delay]);\n  <span class=\"hljs-keyword\">return</span> debouncedValue;\n}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useDebounce;\n</code></pre>\n<h1>4. Prop이 변경될 때 모든 상태를 재설정하는 방법</h1>\n<p>다른 항목 간을 이동할 때 폼 필드나 필터와 같은 상태 변수를 재설정하는 것이 중요합니다. 이 재설정을 처리하는 비효율적인 방법은 useEffect 훅을 사용하여 prop 변경에 따라 상태를 수동으로 지우는 것입니다. 그러나 이렇게 하면 추가 렌더링 사이클이 발생하고 불필요한 복잡성을 야기합니다.</p>\n<p>올바르지 않은 예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ItemDetails</span>(<span class=\"hljs-params\">{ itemId }</span>) {\n  <span class=\"hljs-keyword\">const</span> [input, setInput] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n  <span class=\"hljs-comment\">// 🔴 비효율적: 효과를 이용해 상태를 재설정</span>\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">setInput</span>(<span class=\"hljs-string\">''</span>); <span class=\"hljs-comment\">// itemId가 변경될 때 입력 필드를 지움</span>\n  }, [itemId]);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{input}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setInput(e.target.value)} /></span>;\n}\n</code></pre>\n<p>효과에 의존하는 대신 key prop을 사용하여 자동으로 재설정되도록 할 수 있습니다. 컴포넌트를 둘로 분리하고 내부 컴포넌트에 고유한 key prop을 전달하면 React가 새로운 인스턴스로 처리하여 모든 내부 상태를 재설정합니다.</p>\n<p>최적화된 솔루션:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ItemDetails</span>(<span class=\"hljs-params\">{ itemId }</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ItemForm</span> <span class=\"hljs-attr\">itemId</span>=<span class=\"hljs-string\">{itemId}</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{itemId}</span> /></span></span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ItemForm</span>(<span class=\"hljs-params\">{ itemId }</span>) {\n  <span class=\"hljs-comment\">// ✅ key 변경 시 상태 자동 재설정</span>\n  <span class=\"hljs-keyword\">const</span> [input, setInput] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>아이템 {itemId}에 대한 세부정보<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{input}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setInput(e.target.value)} />\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<h1>결론</h1>\n<p>React의 useEffect는 가치가 있지만 종종 잘못 적용될 수 있습니다. 많은 경우, 이벤트 핸들러, react-query와 같은 라이브러리, 또는 커스텀 훅과 같은 대안적인 접근 방식을 사용하면 더 깔끔하고 유지보수가 쉬운 해결책을 제공할 수 있습니다. 더 많은 정보를 원하신다면 React의 가이드를 확인해보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}