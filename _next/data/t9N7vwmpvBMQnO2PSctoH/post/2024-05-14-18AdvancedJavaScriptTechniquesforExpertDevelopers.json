{"pageProps":{"post":{"title":"전문 개발자를 위한 18가지 고급 JavaScript 기술","description":"","date":"2024-05-14 15:16","slug":"2024-05-14-18AdvancedJavaScriptTechniquesforExpertDevelopers","content":"\n\n\n<img src=\"/assets/img/2024-05-14-18AdvancedJavaScriptTechniquesforExpertDevelopers_0.png\" />\n\n# 브라우저\n\n# 전체 화면 달성하기 🖥️\n\n현재 화면을 전체 화면으로 표시해야 할 때\n\n\n\n\n# 전체 화면으로 변환하기 ✨\n\n```js\nfunction fullScreen() {  \n    const el = document.documentElement\n    const rfs = \n    el.requestFullScreen || \n    el.webkitRequestFullScreen || \n    el.mozRequestFullScreen || \n    el.msRequestFullscreen\n    if(typeof rfs != \"undefined\" && rfs) {\n        rfs.call(el)\n    }\n}\n// 클릭하여 🌐 전체 화면으로 전환하기!\nfullScreen()\n```\n\n# 전체 화면 나가기 🏁\n\n전체 화면을 나가려면\n\n```js\nfunction exitScreen() {\n    if (document.exitFullscreen) { \n        document.exitFullscreen()\n    } \n    else if (document.mozCancelFullScreen) { \n        document.mozCancelFullScreen()\n    } \n    else if (document.webkitCancelFullScreen) { \n        document.webkitCancelFullScreen()\n    } \n    else if (document.msExitFullscreen) { \n        document.msExitFullscreen()\n    } \n    if(typeof cfs != \"undefined\" && cfs) {\n        cfs.call(el)\n    }\n    // 전체 화면에서 나가기 🚪🏃\n}\nexitScreen()\n```\n\n\n\n# 페이지 인쇄 🖨️\n\n현재 페이지를 인쇄해야 할 때\n\n```js\n// 페이지를 인쇄하려면 클릭 🖨️\nwindow.print()\n```\n\n# 인쇄 내용 스타일 변경 📄\n\n\n\n현재 페이지를 인쇄하려면서 레이아웃을 수정해야 할 때\n\n```js\n<style>\n/* 인쇄 레이아웃 조정 🔧 */\n@media print {\n    .noprint {\n        display: none;\n    }\n}\n</style>\n<div class=\"print\">인쇄</div>\n<div class=\"noprint\">인쇄 안 함</div>\n```\n\n# 차단 닫기 이벤트 🔒\n\n사용자가 새로 고침하거나 브라우저를 닫는 것을 막아야 할 때, beforeunload 이벤트를 트리거하도록 선택할 수 있습니다. 일부 브라우저에서는 텍스트 내용을 사용자 지정할 수 없습니다.\n\n\n\n\n```js\nwindow.onbeforeunload = function(){\n    return 'haorooms 블로그를 나가시겠습니까? 🚪🤔';\n};\n```\n\n# 화면 녹화 📹\n\n현재 화면을 녹화하고 녹화된 화면을 업로드 또는 다운로드해야 할 때\n\n```js\n// 이곳에서 화면 녹화하기 🎬\nconst streamPromise = navigator.mediaDevices.getDisplayMedia()\nstreamPromise.then(stream => {\n    var recordedChunks = [];// 녹화된 비디오 데이터\n    var options = { mimeType: \"video/webm; codecs=vp9\" };// 인코딩 형식 설정\n    var mediaRecorder = new MediaRecorder(stream, options);// MediaRecorder 인스턴스 초기화\n    mediaRecorder.ondataavailable = handleDataAvailable;// 데이터가 사용 가능한 경우 콜백 설정 (화면 녹화 종료)\n    mediaRecorder.start();\n    // 비디오 조각화\n    function handleDataAvailable(event) {\n        if (event.data.size > 0) {\n            recordedChunks.push(event.data);// 데이터 추가, event.data는 BLOB 객체\n            download();// BLOB 객체로 래핑하여 다운로드\n        }\n    }\n    // 파일 다운로드\n    function download() {\n        var blob = new Blob(recordedChunks, {\n            type: \"video/webm\"\n        });\n        // 여기서 비디오를 백엔드로 업로드할 수 있음\n        var url = URL.createObjectURL(blob);\n        var a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.style = \"display: none\";\n        a.href = url;\n        a.download = \"test.webm\";\n        a.click();\n        window.URL.revokeObjectURL(url);\n    }\n})\n```\n\n\n\n# 가로 및 세로 화면 판단하기 🔄\n\n모바일 전화기의 가로 또는 세로 화면 상태를 판단해야 할 때\n\n```js\nfunction hengshuping() {\n    if (window.orientation == 180 || window.orientation == 0) {\n        alert(\"세로 모드! 📱\");\n    }\n    if (window.orientation == 90 || window.orientation == -90) {\n        alert(\"가로 모드! 🌅\");\n    }\n}\n// 화면 방향 변경을 위한 리스너 추가 🔄\nwindow.addEventListener(\"onorientationchange\" in window ? \"orientationchange\" : \"resize\", hengshuping, false);\n```\n\n# 가로 및 세로 화면 스타일 변경하기 ↔️\n\n\n\n다양한 스타일을 수평 및 수직 화면에 대해 설정해야 할 때\n\n```js\n<style>\n@media all and (orientation : landscape) {\n    body {\n        background-color: #ff0000;\n    }\n}\n@media all and (orientation : portrait) {\n    body {\n        background-color: #00ff00;\n    }\n}\n</style>\n```\n\n# 탭 페이지가 숨김 처리됨 🙈\n\n탭이 표시되거나 숨겨지는 이벤트를 모니터링해야 할 때\n\n\n\n```js\n// 탭 페이지 숨김 🙈\nconst {hidden, visibilityChange} = (() => {\n    let hidden, visibilityChange;\n    if (typeof document.hidden !== \"undefined\") {\n      // Opera 12.10 및 Firefox 18 이후 지원\n      hidden = \"hidden\";\n      visibilityChange = \"visibilitychange\";\n    } else if (typeof document.msHidden !== \"undefined\") {\n      hidden = \"msHidden\";\n      visibilityChange = \"msvisibilitychange\";\n    } else if (typeof document.webkitHidden !== \"undefined\") {\n      hidden = \"webkitHidden\";\n      visibilityChange = \"webkitvisibilitychange\";\n    }\n    return {\n      hidden,\n      visibilityChange\n    }\n})();\n\nconst handleVisibilityChange = () => {\n    console.log(\"현재 숨겨진 상태\", document[hidden]);\n};\ndocument.addEventListener(\n    visibilityChange,\n    handleVisibilityChange,\n    false\n);\n```\n\n# 이미지\n\n# 로컬 이미지 미리보기 🌄\n\n클라이언트로부터 이미지를 받았지만 즉시 서버에 업로드할 수 없고 미리보기해야 하는 경우\n\n\n\n\n```js\n<!-- 이미지 업로드 및 미리보기 📸 -->\n<div class=\"test\">\n    <input type=\"file\" name=\"\" id=\"\">\n    <img src=\"\" alt=\"\">\n</div>\n<script>\nconst getObjectURL = (file) => {\n    let url = null;\n    if (window.createObjectURL != undefined) { // basic\n        url = window.createObjectURL(file);\n    } else if (window.URL != undefined) { // webkit or chrome\n        url = window.URL.createObjectURL(file);\n    } else if (window.URL != undefined) { // mozilla(firefox)\n        url = window.URL.createObjectURL(file);\n    }\n    return url;\n}\ndocument.querySelector('input').addEventListener('change', (event) => {\n    document.querySelector('img').src = getObjectURL(event.target.files[0])\n})\n</script>\n```\n\n# 이미지 미리로딩 🔄\n\n사진이 많을 때는 화면이 하얗게 보이지 않도록 사진을 미리로딩해야 합니다.\n\n```js\nconst images = []\nfunction preloader(args) {\n    for (let i = 0, len = args.length; i < len; i++) {  \n        images[i] = new Image()  \n        images[i].src = args[i]\n    } \n}  \npreloader(['1.png', '2.jpg'])\n```\n\n\n\n# Js\n\n# 문자열 스크립트 💬\n\n문자열을 js 스크립트로 변환해야 할 때는 이 방법이 xss 취약점이 있으니 주의해서 사용해야 합니다\n\n```js\nconst obj = eval('({ name: \"jack\" })')\n// obj는 object{ name: \"jack\" }로 변환됩니다\nconst v = eval('obj')\n// v는 변수 obj가 됩니다\n```\n\n\n\n# 재귀 함수 이름 분리하기 🔗\n\n재귀 함수를 작성할 때 함수 이름을 선언하지만 함수 이름을 수정할 때마다 내부 함수 이름을 수정하는 것을 항상 잊어버립니다. argument는 함수의 내부 객체로, 함수에 전달된 모든 매개변수를 포함하며 arguments.callee는 함수 이름을 나타냅니다.\n\n```js\n// 이것은 기본 피보나치 수열입니다\nfunction fibonacci (n) {\n    const fn = arguments.callee\n    if (n <= 1) return 1\n    return fn(n - 1) + fn(n - 2)\n}\n```\n\n\n\n# 암묵적 판단 👁️‍🗨️\n\n페이지 뷰에 현재 DOM 요소가 나타나 있는지 판단해야 할 때 IntersectionObserver를 사용해보세요.\n\n```js\n<style>\n.item {\n    height: 350px;\n}\n</style>\n\n<div class=\"container\">\n  <div class=\"item\" data-id=\"1\">보이지 않음</div>\n  <div class=\"item\" data-id=\"2\">보이지 않음</div>\n  <div class=\"item\" data-id=\"3\">보이지 않음</div>\n</div>\n<script>\n  if (window?.IntersectionObserver) {\n    let items = [...document.getElementsByClassName(\"item\")]; // 진정한 배열로 변환하여 파싱, Array.prototype.slice.call()도 사용 가능\nlet io = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((item) => {\n          item.target.innerHTML =\n            item.intersectionRatio === 1 // 요소의 표시 비율, 1이면 완전히 보이고 0이면 완전히 보이지 않음\n              ? `요소가 완전히 보입니다`\n              : `요소가 부분적으로 보이지 않습니다`;\n        });\n      },\n      {\n        root: null,\n        rootMargin: \"0px 0px\",\n        threshold: 1, // 임계값을 1로 설정하고, 비율이 1에 도달할 때만 콜백 함수가 트리거됨\n      }\n    );\n    items.forEach((item) => io.observe(item));\n  }\n</script>\n```\n\n# 편집 가능 요소 ✏️\n\n\n\nDOM 요소를 편집해야 할 때, 텍스트 영역처럼 클릭하세요.\n\n```js\n<div contenteditable=\"true\">여기를 편집할 수 있어요</div>\n```\n\n# 요소 속성 감시하기 👀\n\n```js\n<div id=\"test\">테스트</div>\n<button onclick=\"handleClick()\">확인</button>\n\n<script>\n  const el = document.getElementById(\"test\");\n  let n = 1;\n  const observe = new MutationObserver((mutations) => {\n    console.log(\"속성이 변경되었어요\", mutations);\n  })\n  observe.observe(el, {\n    attributes: true\n  });\n  function handleClick() {\n    el.setAttribute(\"style\", \"color: red\");\n    el.setAttribute(\"data-name\", n++);\n  }\n  setTimeout(() => {\n    observe.disconnect(); // 감시 중지\n  }, 5000);\n</script>\n```\n\n\n\n# DOM 요소 출력하기 🖨️\n\n개발 과정에서 DOM 요소를 출력해야 할 때, console.log을 사용하면 종종 전체 DOM 요소만 출력되고 내부 속성을 볼 수 없습니다. console.dir을 사용해보세요.\n\n```js\nconsole.dir(document.body)\n```\n\n# 기타\n\n\n\n# 어플리케이션 활성화하기 🚀\n\n모바일 측면에서 개발할 때, 다른 애플리케이션을 열어야 할 때가 있어요. 아래 방법들은 location.href 할당을 통해서도 작동할 수 있어요.\n\n```js\n<!-- 다음 링크들을 사용해서 폰 기능을 활성화해보세요 📲 -->\n<a href=\"tel:12345678910\">전화 걸기</a>\n<a href=\"sms:12345678910,12345678911?body=안녕하세요\">안드로이드 메시지</a> \n<a href=\"sms:/open?addresses=12345678910,12345678911&body=안녕하세요\">iOS 메시지</a>\n<a href=\"wx://\">iOS 메시지</a>\n```\n\n# 쉬운 용어로 설명 🚀\n\n\n\nIn Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 작가를 박수치고 팔로우해주세요 👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter\n- 다른 플랫폼 방문하기: Stackademic | CoFeed | Venture\n- PlainEnglish.io에서 더 많은 콘텐츠 확인하기","ogImage":{"url":"/assets/img/2024-05-14-18AdvancedJavaScriptTechniquesforExpertDevelopers_0.png"},"coverImage":"/assets/img/2024-05-14-18AdvancedJavaScriptTechniquesforExpertDevelopers_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>브라우저</h1>\n<h1>전체 화면 달성하기 🖥️</h1>\n<p>현재 화면을 전체 화면으로 표시해야 할 때</p>\n<h1>전체 화면으로 변환하기 ✨</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fullScreen</span>(<span class=\"hljs-params\"></span>) {  \n    <span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>\n    <span class=\"hljs-keyword\">const</span> rfs = \n    el.<span class=\"hljs-property\">requestFullScreen</span> || \n    el.<span class=\"hljs-property\">webkitRequestFullScreen</span> || \n    el.<span class=\"hljs-property\">mozRequestFullScreen</span> || \n    el.<span class=\"hljs-property\">msRequestFullscreen</span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> rfs != <span class=\"hljs-string\">\"undefined\"</span> &#x26;&#x26; rfs) {\n        rfs.<span class=\"hljs-title function_\">call</span>(el)\n    }\n}\n<span class=\"hljs-comment\">// 클릭하여 🌐 전체 화면으로 전환하기!</span>\n<span class=\"hljs-title function_\">fullScreen</span>()\n</code></pre>\n<h1>전체 화면 나가기 🏁</h1>\n<p>전체 화면을 나가려면</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">exitScreen</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">exitFullscreen</span>) { \n        <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">exitFullscreen</span>()\n    } \n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">mozCancelFullScreen</span>) { \n        <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">mozCancelFullScreen</span>()\n    } \n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">webkitCancelFullScreen</span>) { \n        <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">webkitCancelFullScreen</span>()\n    } \n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">msExitFullscreen</span>) { \n        <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">msExitFullscreen</span>()\n    } \n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> cfs != <span class=\"hljs-string\">\"undefined\"</span> &#x26;&#x26; cfs) {\n        cfs.<span class=\"hljs-title function_\">call</span>(el)\n    }\n    <span class=\"hljs-comment\">// 전체 화면에서 나가기 🚪🏃</span>\n}\n<span class=\"hljs-title function_\">exitScreen</span>()\n</code></pre>\n<h1>페이지 인쇄 🖨️</h1>\n<p>현재 페이지를 인쇄해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 페이지를 인쇄하려면 클릭 🖨️</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">print</span>()\n</code></pre>\n<h1>인쇄 내용 스타일 변경 📄</h1>\n<p>현재 페이지를 인쇄하려면서 레이아웃을 수정해야 할 때</p>\n<pre><code class=\"hljs language-js\">&#x3C;style>\n<span class=\"hljs-comment\">/* 인쇄 레이아웃 조정 🔧 */</span>\n@media print {\n    .<span class=\"hljs-property\">noprint</span> {\n        <span class=\"hljs-attr\">display</span>: none;\n    }\n}\n&#x3C;/style>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"print\"</span>></span>인쇄<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"noprint\"</span>></span>인쇄 안 함<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n</code></pre>\n<h1>차단 닫기 이벤트 🔒</h1>\n<p>사용자가 새로 고침하거나 브라우저를 닫는 것을 막아야 할 때, beforeunload 이벤트를 트리거하도록 선택할 수 있습니다. 일부 브라우저에서는 텍스트 내용을 사용자 지정할 수 없습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">onbeforeunload</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'haorooms 블로그를 나가시겠습니까? 🚪🤔'</span>;\n};\n</code></pre>\n<h1>화면 녹화 📹</h1>\n<p>현재 화면을 녹화하고 녹화된 화면을 업로드 또는 다운로드해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 이곳에서 화면 녹화하기 🎬</span>\n<span class=\"hljs-keyword\">const</span> streamPromise = navigator.<span class=\"hljs-property\">mediaDevices</span>.<span class=\"hljs-title function_\">getDisplayMedia</span>()\nstreamPromise.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">stream</span> =></span> {\n    <span class=\"hljs-keyword\">var</span> recordedChunks = [];<span class=\"hljs-comment\">// 녹화된 비디오 데이터</span>\n    <span class=\"hljs-keyword\">var</span> options = { <span class=\"hljs-attr\">mimeType</span>: <span class=\"hljs-string\">\"video/webm; codecs=vp9\"</span> };<span class=\"hljs-comment\">// 인코딩 형식 설정</span>\n    <span class=\"hljs-keyword\">var</span> mediaRecorder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MediaRecorder</span>(stream, options);<span class=\"hljs-comment\">// MediaRecorder 인스턴스 초기화</span>\n    mediaRecorder.<span class=\"hljs-property\">ondataavailable</span> = handleDataAvailable;<span class=\"hljs-comment\">// 데이터가 사용 가능한 경우 콜백 설정 (화면 녹화 종료)</span>\n    mediaRecorder.<span class=\"hljs-title function_\">start</span>();\n    <span class=\"hljs-comment\">// 비디오 조각화</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleDataAvailable</span>(<span class=\"hljs-params\">event</span>) {\n        <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">size</span> > <span class=\"hljs-number\">0</span>) {\n            recordedChunks.<span class=\"hljs-title function_\">push</span>(event.<span class=\"hljs-property\">data</span>);<span class=\"hljs-comment\">// 데이터 추가, event.data는 BLOB 객체</span>\n            <span class=\"hljs-title function_\">download</span>();<span class=\"hljs-comment\">// BLOB 객체로 래핑하여 다운로드</span>\n        }\n    }\n    <span class=\"hljs-comment\">// 파일 다운로드</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">download</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">var</span> blob = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Blob</span>(recordedChunks, {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"video/webm\"</span>\n        });\n        <span class=\"hljs-comment\">// 여기서 비디오를 백엔드로 업로드할 수 있음</span>\n        <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-variable constant_\">URL</span>.<span class=\"hljs-title function_\">createObjectURL</span>(blob);\n        <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"a\"</span>);\n        <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(a);\n        a.<span class=\"hljs-property\">style</span> = <span class=\"hljs-string\">\"display: none\"</span>;\n        a.<span class=\"hljs-property\">href</span> = url;\n        a.<span class=\"hljs-property\">download</span> = <span class=\"hljs-string\">\"test.webm\"</span>;\n        a.<span class=\"hljs-title function_\">click</span>();\n        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">URL</span>.<span class=\"hljs-title function_\">revokeObjectURL</span>(url);\n    }\n})\n</code></pre>\n<h1>가로 및 세로 화면 판단하기 🔄</h1>\n<p>모바일 전화기의 가로 또는 세로 화면 상태를 판단해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hengshuping</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">orientation</span> == <span class=\"hljs-number\">180</span> || <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">orientation</span> == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"세로 모드! 📱\"</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">orientation</span> == <span class=\"hljs-number\">90</span> || <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">orientation</span> == -<span class=\"hljs-number\">90</span>) {\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"가로 모드! 🌅\"</span>);\n    }\n}\n<span class=\"hljs-comment\">// 화면 방향 변경을 위한 리스너 추가 🔄</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"onorientationchange\"</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">window</span> ? <span class=\"hljs-string\">\"orientationchange\"</span> : <span class=\"hljs-string\">\"resize\"</span>, hengshuping, <span class=\"hljs-literal\">false</span>);\n</code></pre>\n<h1>가로 및 세로 화면 스타일 변경하기 ↔️</h1>\n<p>다양한 스타일을 수평 및 수직 화면에 대해 설정해야 할 때</p>\n<pre><code class=\"hljs language-js\">&#x3C;style>\n@media all and (orientation : landscape) {\n    body {\n        background-<span class=\"hljs-attr\">color</span>: #ff0000;\n    }\n}\n@media all and (orientation : portrait) {\n    body {\n        background-<span class=\"hljs-attr\">color</span>: #00ff00;\n    }\n}\n&#x3C;/style>\n</code></pre>\n<h1>탭 페이지가 숨김 처리됨 🙈</h1>\n<p>탭이 표시되거나 숨겨지는 이벤트를 모니터링해야 할 때</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 탭 페이지 숨김 🙈</span>\n<span class=\"hljs-keyword\">const</span> {hidden, visibilityChange} = (<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">let</span> hidden, visibilityChange;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">hidden</span> !== <span class=\"hljs-string\">\"undefined\"</span>) {\n      <span class=\"hljs-comment\">// Opera 12.10 및 Firefox 18 이후 지원</span>\n      hidden = <span class=\"hljs-string\">\"hidden\"</span>;\n      visibilityChange = <span class=\"hljs-string\">\"visibilitychange\"</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">msHidden</span> !== <span class=\"hljs-string\">\"undefined\"</span>) {\n      hidden = <span class=\"hljs-string\">\"msHidden\"</span>;\n      visibilityChange = <span class=\"hljs-string\">\"msvisibilitychange\"</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">webkitHidden</span> !== <span class=\"hljs-string\">\"undefined\"</span>) {\n      hidden = <span class=\"hljs-string\">\"webkitHidden\"</span>;\n      visibilityChange = <span class=\"hljs-string\">\"webkitvisibilitychange\"</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> {\n      hidden,\n      visibilityChange\n    }\n})();\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleVisibilityChange</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"현재 숨겨진 상태\"</span>, <span class=\"hljs-variable language_\">document</span>[hidden]);\n};\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(\n    visibilityChange,\n    handleVisibilityChange,\n    <span class=\"hljs-literal\">false</span>\n);\n</code></pre>\n<h1>이미지</h1>\n<h1>로컬 이미지 미리보기 🌄</h1>\n<p>클라이언트로부터 이미지를 받았지만 즉시 서버에 업로드할 수 없고 미리보기해야 하는 경우</p>\n<pre><code class=\"hljs language-js\">&#x3C;!-- 이미지 업로드 및 미리보기 📸 -->\n&#x3C;div class=\"test\">\n    &#x3C;input type=\"file\" name=\"\" id=\"\">\n    &#x3C;img src=\"\" alt=\"\">\n&#x3C;/div>\n&#x3C;script>\nconst getObjectURL = (file) => {\n    let url = null;\n    if (window.createObjectURL != undefined) { // basic\n        url = window.createObjectURL(file);\n    } else if (window.URL != undefined) { // webkit or chrome\n        url = window.URL.createObjectURL(file);\n    } else if (window.URL != undefined) { // mozilla(firefox)\n        url = window.URL.createObjectURL(file);\n    }\n    return url;\n}\ndocument.querySelector('input').addEventListener('change', (event) => {\n    document.querySelector('img').src = getObjectURL(event.target.files[0])\n})\n&#x3C;/script>\n</code></pre>\n<h1>이미지 미리로딩 🔄</h1>\n<p>사진이 많을 때는 화면이 하얗게 보이지 않도록 사진을 미리로딩해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> images = []\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">preloader</span>(<span class=\"hljs-params\">args</span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, len = args.<span class=\"hljs-property\">length</span>; i &#x3C; len; i++) {  \n        images[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Image</span>()  \n        images[i].<span class=\"hljs-property\">src</span> = args[i]\n    } \n}  \n<span class=\"hljs-title function_\">preloader</span>([<span class=\"hljs-string\">'1.png'</span>, <span class=\"hljs-string\">'2.jpg'</span>])\n</code></pre>\n<h1>Js</h1>\n<h1>문자열 스크립트 💬</h1>\n<p>문자열을 js 스크립트로 변환해야 할 때는 이 방법이 xss 취약점이 있으니 주의해서 사용해야 합니다</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">'({ name: \"jack\" })'</span>)\n<span class=\"hljs-comment\">// obj는 object{ name: \"jack\" }로 변환됩니다</span>\n<span class=\"hljs-keyword\">const</span> v = <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">'obj'</span>)\n<span class=\"hljs-comment\">// v는 변수 obj가 됩니다</span>\n</code></pre>\n<h1>재귀 함수 이름 분리하기 🔗</h1>\n<p>재귀 함수를 작성할 때 함수 이름을 선언하지만 함수 이름을 수정할 때마다 내부 함수 이름을 수정하는 것을 항상 잊어버립니다. argument는 함수의 내부 객체로, 함수에 전달된 모든 매개변수를 포함하며 arguments.callee는 함수 이름을 나타냅니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 이것은 기본 피보나치 수열입니다</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fibonacci</span> (n) {\n    <span class=\"hljs-keyword\">const</span> fn = <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">callee</span>\n    <span class=\"hljs-keyword\">if</span> (n &#x3C;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fn</span>(n - <span class=\"hljs-number\">1</span>) + <span class=\"hljs-title function_\">fn</span>(n - <span class=\"hljs-number\">2</span>)\n}\n</code></pre>\n<h1>암묵적 판단 👁️‍🗨️</h1>\n<p>페이지 뷰에 현재 DOM 요소가 나타나 있는지 판단해야 할 때 IntersectionObserver를 사용해보세요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;style>\n.<span class=\"hljs-property\">item</span> {\n    <span class=\"hljs-attr\">height</span>: 350px;\n}\n&#x3C;/style>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item\"</span> <span class=\"hljs-attr\">data-id</span>=<span class=\"hljs-string\">\"1\"</span>></span>보이지 않음<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item\"</span> <span class=\"hljs-attr\">data-id</span>=<span class=\"hljs-string\">\"2\"</span>></span>보이지 않음<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item\"</span> <span class=\"hljs-attr\">data-id</span>=<span class=\"hljs-string\">\"3\"</span>></span>보이지 않음<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">window</span>?.<span class=\"hljs-property\">IntersectionObserver</span>) {\n    <span class=\"hljs-keyword\">let</span> items = [...<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByClassName</span>(<span class=\"hljs-string\">\"item\"</span>)]; <span class=\"hljs-comment\">// 진정한 배열로 변환하여 파싱, Array.prototype.slice.call()도 사용 가능</span>\n<span class=\"hljs-keyword\">let</span> io = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IntersectionObserver</span>(\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">entries</span>) =></span> {\n        entries.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =></span> {\n          item.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">innerHTML</span> =\n            item.<span class=\"hljs-property\">intersectionRatio</span> === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 요소의 표시 비율, 1이면 완전히 보이고 0이면 완전히 보이지 않음</span>\n              ? <span class=\"hljs-string\">`요소가 완전히 보입니다`</span>\n              : <span class=\"hljs-string\">`요소가 부분적으로 보이지 않습니다`</span>;\n        });\n      },\n      {\n        <span class=\"hljs-attr\">root</span>: <span class=\"hljs-literal\">null</span>,\n        <span class=\"hljs-attr\">rootMargin</span>: <span class=\"hljs-string\">\"0px 0px\"</span>,\n        <span class=\"hljs-attr\">threshold</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// 임계값을 1로 설정하고, 비율이 1에 도달할 때만 콜백 함수가 트리거됨</span>\n      }\n    );\n    items.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =></span> io.<span class=\"hljs-title function_\">observe</span>(item));\n  }\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n</code></pre>\n<h1>편집 가능 요소 ✏️</h1>\n<p>DOM 요소를 편집해야 할 때, 텍스트 영역처럼 클릭하세요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;div contenteditable=<span class=\"hljs-string\">\"true\"</span>>여기를 편집할 수 있어요&#x3C;/div>\n</code></pre>\n<h1>요소 속성 감시하기 👀</h1>\n<pre><code class=\"hljs language-js\">&#x3C;div id=<span class=\"hljs-string\">\"test\"</span>>테스트&#x3C;/div>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"handleClick()\"</span>></span>확인<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"test\"</span>);\n  <span class=\"hljs-keyword\">let</span> n = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">const</span> observe = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MutationObserver</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">mutations</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"속성이 변경되었어요\"</span>, mutations);\n  })\n  observe.<span class=\"hljs-title function_\">observe</span>(el, {\n    <span class=\"hljs-attr\">attributes</span>: <span class=\"hljs-literal\">true</span>\n  });\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleClick</span>(<span class=\"hljs-params\"></span>) {\n    el.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">\"style\"</span>, <span class=\"hljs-string\">\"color: red\"</span>);\n    el.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">\"data-name\"</span>, n++);\n  }\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    observe.<span class=\"hljs-title function_\">disconnect</span>(); <span class=\"hljs-comment\">// 감시 중지</span>\n  }, <span class=\"hljs-number\">5000</span>);\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n</code></pre>\n<h1>DOM 요소 출력하기 🖨️</h1>\n<p>개발 과정에서 DOM 요소를 출력해야 할 때, console.log을 사용하면 종종 전체 DOM 요소만 출력되고 내부 속성을 볼 수 없습니다. console.dir을 사용해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">dir</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>)\n</code></pre>\n<h1>기타</h1>\n<h1>어플리케이션 활성화하기 🚀</h1>\n<p>모바일 측면에서 개발할 때, 다른 애플리케이션을 열어야 할 때가 있어요. 아래 방법들은 location.href 할당을 통해서도 작동할 수 있어요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;!-- 다음 링크들을 사용해서 폰 기능을 활성화해보세요 📲 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"tel:12345678910\"</span>></span>전화 걸기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"sms:12345678910,12345678911?body=안녕하세요\"</span>></span>안드로이드 메시지<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span> \n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"sms:/open?addresses=12345678910,12345678911&#x26;body=안녕하세요\"</span>></span>iOS 메시지<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"wx://\"</span>></span>iOS 메시지<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n</code></pre>\n<h1>쉬운 용어로 설명 🚀</h1>\n<p>In Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:</p>\n<ul>\n<li>작가를 박수치고 팔로우해주세요 👏️️</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter</li>\n<li>다른 플랫폼 방문하기: Stackademic | CoFeed | Venture</li>\n<li>PlainEnglish.io에서 더 많은 콘텐츠 확인하기</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}