{"pageProps":{"post":{"title":"TypeScript 55 버전에 추가된 3가지 내용 정리","description":"","date":"2024-05-17 20:24","slug":"2024-05-17-3ExcitingNewFeaturesinTypeScript55","content":"\n\n<img src=\"/assets/img/2024-05-17-3ExcitingNewFeaturesinTypeScript55_0.png\" />\n\nTypeScript 세계에서는 항상 개발자 경험을 업그레이드하기 위해 새로운 기능들이 지속적으로 추가됩니다.\n\n오늘도 예외는 아닙니다. TypeScript 버전 5.5가 공식적으로 발표되었습니다!\n\n이 기사에서는 TypeScript의 이 새로운 장을 준비하는 3가지 혁신적인 기능을 살펴보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n거두 절미하고... 지금 시작해 봐요!\n\n## 1. 추론된 유형 예측\n\n이게 무슨 의미인지 살펴보기 전에, 유형 예측이 무엇인지 정의해 봅시다.\n\n다음은 어떤 입력의 유형을 문자열로 좁히는 유형 예측의 예시입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nlet x = \"test\"\n\n// `is` 키워드로 표시된 타입 예측자.\nfunction isString(variable: any): variable is string {\n  return typeof variable === \"string\"\n}\n\nif (isString(x)) {\n  console.log(x.trim())\n}\n```\n\n이제 타입 예측자에 대해 이해했으니, 유추된 부분은 어디에 있는 걸까요?\n\n인덱스 3에 하나의 null 값만 있는 숫자 배열을 상상해보세요.\n\n```js\nconst nums = [1, 2, 3, null, 5].filter((x) => x !== null)\n\n// nums = [1, 2, 3, 5]\n// 하지만 타입은 여전히 (number | null)[] 유지됩니다!\n```\n\n<div class=\"content-ad\"></div>\n\n- Null 값을 제외하기 위해 필터 함수를 적용했어요.\n- 필터링된 배열에 더 이상 null 값이 없으므로 nums의 타입이 number[]가 되기를 기대합니다.\n\n하지만 아쉽게도 현재 이것은 불가능하여 nums의 타입은 그대로 유지됩니다.\n\n하지만 TypeScript 5.5에서 이 문제가 해결됩니다!\n\nTS 5.5에서는 filter 함수가 결과 배열의 타입을 정확하게 추론하기 위해 암시적으로 타입 예측자를 호출합니다.\n\n<div class=\"content-ad\"></div>\n\n아래는 유형 예측 함수가 실제로 어떻게 보일 수 있는지 예시입니다:\n\n```js\n// `filter` 함수 내 각 요소에 대해 호출됨\nfunction isNotNull(x: number | null) {\n  return x !== null;\n}\n```\n\n# 2. 정규식 검사\n\n또 다른 멋진 기능은 TypeScript 유형 검사기를 통해 정규식을 유효성 검사할 수 있는 능력입니다.\n\n<div class=\"content-ad\"></div>\n\nTS 5.5 발표에서 문법 오류가 정규 표현식에서 캐치되는 훌륭한 예시가 있어요:\n\n```js\nlet myRegex = /@robot(\\s+(please|immediately)))? do some task/\n//                                            ~\n// error!\n// Unexpected ')'. Did you mean to escape it with backslash?\n```\n\n또한, 이 기능은 구문 분석만이 아닙니다!\n\n네 맞아요, 타입 체커는 이 예시에서 보여준 것처럼 정규 표현식에서 존재하지 않는 역참조와 같은 의미론적 문제도 잡아낼 수 있어요:\n\n<div class=\"content-ad\"></div>\n\n```js\nlet myRegex = /@typedef \\{import\\((.+)\\)\\.([a-zA-Z_]+)\\} \\3/u;\n//                                                        ~\n// 오류!\n// 이 역참조는 존재하지 않는 그룹을 가리킵니다.\n// 이 정규식에는 캡처 그룹이 2개만 있습니다.\n```\n\n# 3. 상수 인덱스 액세스 범위 좁히기\n\n이제 TypeScript는 obj[key] 형식의 표현식을 좁힐 수 있습니다. 이는 obj와 key가 상수여야만 가능합니다.\n\n다음은 TypeScript 5.5 공식 발표의 예제를 적용한 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction changeUnkownValue(obj: Record<string, unknown>, key: string) {\n  if (typeof obj[key] === \"string\") {\n    // Now okay, previously was error\n    obj[key].toUpperCase()\n  }\n}\n```\n\n이전에는 색인 액세스를 사용하여 알 수 없는 Record 값의 유형을 추론할 수 없었습니다.\n\n이 경우 typeof 키워드를 사용하여 알 수없는 타입을 추론하지 못했기 때문에 obj[key].toUpperCase()가 에러를 발생시켰습니다.\n\nTypeScript 5.5에서는 이 문제가 해결되었으며 코드에서 더 이상 문제가 발생하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\nTypeScript 5.5에서는 커뮤니티에서 오랫동안 기다려온 많은 흥미로운 기능들이 소개되었습니다.\n\n이러한 기능 중에서 이 3가지를 강조하여 이번에 꼭 필요한 업그레이드의 중요성을 부각했습니다.\n\n# 더 많은 읽기 📖 \n\n<div class=\"content-ad\"></div>\n\n# 제휴사\n\n- All-in-One SaaS 프로젝트 템플릿\n- Figma Home: 내 모든 프로젝트에서 사용하는 UI 디자인 도구.\n- Figma Professional: 당신이 필요로 하는 유일한 UI 디자인 도구.\n- FigJam: 직관적인 다이어그램 및 아이디어 회의로 마음을 자유롭게 발산시킬 수 있습니다.\n\n- Notion: 내 전체 인생을 조직하는 데 사용되는 도구.\n- Notion AI: ChatGPT를 능가하는 AI 도구로 Notion 워크플로우를 급속히 향상시킬 것입니다.\n\n# 참고문헌\n\n<div class=\"content-ad\"></div>\n\n- 맷 포콕 쓰레드\n- TS 5.5 마이크로소프트 블로그\n- 타입 프레디케이트","ogImage":{"url":"/assets/img/2024-05-17-3ExcitingNewFeaturesinTypeScript55_0.png"},"coverImage":"/assets/img/2024-05-17-3ExcitingNewFeaturesinTypeScript55_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>TypeScript 세계에서는 항상 개발자 경험을 업그레이드하기 위해 새로운 기능들이 지속적으로 추가됩니다.</p>\n<p>오늘도 예외는 아닙니다. TypeScript 버전 5.5가 공식적으로 발표되었습니다!</p>\n<p>이 기사에서는 TypeScript의 이 새로운 장을 준비하는 3가지 혁신적인 기능을 살펴보겠습니다.</p>\n<p>거두 절미하고... 지금 시작해 봐요!</p>\n<h2>1. 추론된 유형 예측</h2>\n<p>이게 무슨 의미인지 살펴보기 전에, 유형 예측이 무엇인지 정의해 봅시다.</p>\n<p>다음은 어떤 입력의 유형을 문자열로 좁히는 유형 예측의 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-string\">\"test\"</span>\n\n<span class=\"hljs-comment\">// `is` 키워드로 표시된 타입 예측자.</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isString</span>(<span class=\"hljs-params\">variable: any</span>): variable is string {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> variable === <span class=\"hljs-string\">\"string\"</span>\n}\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isString</span>(x)) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x.<span class=\"hljs-title function_\">trim</span>())\n}\n</code></pre>\n<p>이제 타입 예측자에 대해 이해했으니, 유추된 부분은 어디에 있는 걸까요?</p>\n<p>인덱스 3에 하나의 null 값만 있는 숫자 배열을 상상해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">5</span>].<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =></span> x !== <span class=\"hljs-literal\">null</span>)\n\n<span class=\"hljs-comment\">// nums = [1, 2, 3, 5]</span>\n<span class=\"hljs-comment\">// 하지만 타입은 여전히 (number | null)[] 유지됩니다!</span>\n</code></pre>\n<ul>\n<li>Null 값을 제외하기 위해 필터 함수를 적용했어요.</li>\n<li>필터링된 배열에 더 이상 null 값이 없으므로 nums의 타입이 number[]가 되기를 기대합니다.</li>\n</ul>\n<p>하지만 아쉽게도 현재 이것은 불가능하여 nums의 타입은 그대로 유지됩니다.</p>\n<p>하지만 TypeScript 5.5에서 이 문제가 해결됩니다!</p>\n<p>TS 5.5에서는 filter 함수가 결과 배열의 타입을 정확하게 추론하기 위해 암시적으로 타입 예측자를 호출합니다.</p>\n<p>아래는 유형 예측 함수가 실제로 어떻게 보일 수 있는지 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// `filter` 함수 내 각 요소에 대해 호출됨</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isNotNull</span>(<span class=\"hljs-params\">x: number | <span class=\"hljs-literal\">null</span></span>) {\n  <span class=\"hljs-keyword\">return</span> x !== <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>\n<h1>2. 정규식 검사</h1>\n<p>또 다른 멋진 기능은 TypeScript 유형 검사기를 통해 정규식을 유효성 검사할 수 있는 능력입니다.</p>\n<p>TS 5.5 발표에서 문법 오류가 정규 표현식에서 캐치되는 훌륭한 예시가 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myRegex = <span class=\"hljs-regexp\">/@robot(\\s+(please|immediately)))? do some task/</span>\n<span class=\"hljs-comment\">//                                            ~</span>\n<span class=\"hljs-comment\">// error!</span>\n<span class=\"hljs-comment\">// Unexpected ')'. Did you mean to escape it with backslash?</span>\n</code></pre>\n<p>또한, 이 기능은 구문 분석만이 아닙니다!</p>\n<p>네 맞아요, 타입 체커는 이 예시에서 보여준 것처럼 정규 표현식에서 존재하지 않는 역참조와 같은 의미론적 문제도 잡아낼 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myRegex = <span class=\"hljs-regexp\">/@typedef \\{import\\((.+)\\)\\.([a-zA-Z_]+)\\} \\3/u</span>;\n<span class=\"hljs-comment\">//                                                        ~</span>\n<span class=\"hljs-comment\">// 오류!</span>\n<span class=\"hljs-comment\">// 이 역참조는 존재하지 않는 그룹을 가리킵니다.</span>\n<span class=\"hljs-comment\">// 이 정규식에는 캡처 그룹이 2개만 있습니다.</span>\n</code></pre>\n<h1>3. 상수 인덱스 액세스 범위 좁히기</h1>\n<p>이제 TypeScript는 obj[key] 형식의 표현식을 좁힐 수 있습니다. 이는 obj와 key가 상수여야만 가능합니다.</p>\n<p>다음은 TypeScript 5.5 공식 발표의 예제를 적용한 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeUnkownValue</span>(<span class=\"hljs-params\">obj: Record&#x3C;string, unknown>, key: string</span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj[key] === <span class=\"hljs-string\">\"string\"</span>) {\n    <span class=\"hljs-comment\">// Now okay, previously was error</span>\n    obj[key].<span class=\"hljs-title function_\">toUpperCase</span>()\n  }\n}\n</code></pre>\n<p>이전에는 색인 액세스를 사용하여 알 수 없는 Record 값의 유형을 추론할 수 없었습니다.</p>\n<p>이 경우 typeof 키워드를 사용하여 알 수없는 타입을 추론하지 못했기 때문에 obj[key].toUpperCase()가 에러를 발생시켰습니다.</p>\n<p>TypeScript 5.5에서는 이 문제가 해결되었으며 코드에서 더 이상 문제가 발생하지 않습니다.</p>\n<h1>결론</h1>\n<p>TypeScript 5.5에서는 커뮤니티에서 오랫동안 기다려온 많은 흥미로운 기능들이 소개되었습니다.</p>\n<p>이러한 기능 중에서 이 3가지를 강조하여 이번에 꼭 필요한 업그레이드의 중요성을 부각했습니다.</p>\n<h1>더 많은 읽기 📖</h1>\n<h1>제휴사</h1>\n<ul>\n<li>\n<p>All-in-One SaaS 프로젝트 템플릿</p>\n</li>\n<li>\n<p>Figma Home: 내 모든 프로젝트에서 사용하는 UI 디자인 도구.</p>\n</li>\n<li>\n<p>Figma Professional: 당신이 필요로 하는 유일한 UI 디자인 도구.</p>\n</li>\n<li>\n<p>FigJam: 직관적인 다이어그램 및 아이디어 회의로 마음을 자유롭게 발산시킬 수 있습니다.</p>\n</li>\n<li>\n<p>Notion: 내 전체 인생을 조직하는 데 사용되는 도구.</p>\n</li>\n<li>\n<p>Notion AI: ChatGPT를 능가하는 AI 도구로 Notion 워크플로우를 급속히 향상시킬 것입니다.</p>\n</li>\n</ul>\n<h1>참고문헌</h1>\n<ul>\n<li>맷 포콕 쓰레드</li>\n<li>TS 5.5 마이크로소프트 블로그</li>\n<li>타입 프레디케이트</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}