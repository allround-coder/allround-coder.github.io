{"pageProps":{"post":{"title":"Vue 3  동적 컴포넌트","description":"","date":"2024-05-14 12:29","slug":"2024-05-14-Vue3DynamicComponents","content":"\n\n<img src=\"/assets/img/2024-05-14-Vue3DynamicComponents_0.png\" />\n\n블로그 포스트 목록이 있다고 상상해봅시다 (여기 예시를 사용하고 있어요). 대부분의 경우, 모든 포스트가 너무 비슷해서 우리는 하나의 컴포넌트를 추출하고 재사용하고 싶을 것입니다. 이를 blogPost.vue라고 부를게요. 이런 경우에는 제목, 부제목 및 이미지를 표시하고 싶을 때 사용할 수 있어요.\n\n이제 블로그 포스트가 다른 특성을 가지고 있다고 상상해보세요. 어떤 포스트는 이미지 대신 상호작용이 필요한 인포그래픽을 가지고 있을 수도 있고, 어떤 것은 그저 다른 디자인이 필요할 수도 있어요. 이 문제를 해결하는 한 가지 방법은 blogPost.vue 컴포넌트 내부에 많은 if (조건부) 렌더링을 만드는 것이 있습니다. 다른 방법은 동적 컴포넌트를 사용하는 것이죠!!\n\n## 예제\n\n\n\n위에서 시작한 프로젝트를 확장해 나가려고 합니다. 이것은 Medium에서 가져온 블로그 포스트 목록입니다. 현재 이들은 모두 같은 디자인을 가지고 있지만, 동적 컴포넌트를 사용하여 컴포넌트를 깨끗하게 유지하면서 세 가지 다른 디자인을 만들 것입니다.\n\n기본적인 blogPost.vue 컴포넌트는 다음과 같이 보입니다:\n\n```js\n<script setup>\nconst props = defineProps(['post'])\nconst openPostWindow = (url) => {\n  window.open(url, '_blank')\n}\n</script>\n\n<template>\n  <div class=\"card\" @click=\"openPostWindow(post.mediumUrl)\">\n    <div class=\"card__header\">\n      <img :src=\"`https://miro.medium.com/v2/resize:fill:500:200/${post.previewImage.id}`\" alt=\"Post Image\" class=\"post-image\" />\n\n    </div>\n    <div class=\"card__body\">\n      <h4>\n        { post.title }\n      </h4>\n      <p>\n        { post.extendedPreviewContent.subtitle }\n      </p>\n    </div>\n    <div class=\"card__footer\">\n      <div class=\"user\">\n        <div class=\"user__info\">\n          <small>\n            { Math.ceil(post.readingTime) } 분\n          </small>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n /* 스타일은 실제 저장소에 있습니다 */\n</style>\n```\n\n\n\n```javascript\n<script setup>\nimport { usePostsStore } from './../stores/posts'\n\nimport MediumPreview from './blogDesigns/MediumPreview.vue'\n\nconst postStore = usePostsStore()\n</script>\n\n<template>\n  <div class=\"container\">\n    <component :is=\"MediumPreview\" :post=\"post\" v-for=\"post in postStore.posts\" :key=\"post.title\">\n    </component>\n  </div>\n</template>\n```\n\n지금까지 잘 진행되고 있어요! 이제 우리는 동적 접근 방식을 사용하고 있습니다. component 키워드를 사용하여 Vue에게 MediumPreview.vue 컴포넌트를 사용하도록 하고 있어요. 결과는 이렇게 나와요:\n\n![2024-05-14-Vue3DynamicComponents_1](/assets/img/2024-05-14-Vue3DynamicComponents_1.png)\n\n\n\n\n## 동적이 멋있어지는 때\n\n지금까지 우리는 동적 접근 방식만 사용하여 동일한 컴포넌트를 표시했습니다. 이것은 좋은 시작점이지만, 동적 컴포넌트의 진정한 힘을 활용하지 못합니다. 그것은 여러 컴포넌트를 사용할 때에만 얻을 수 있습니다. 그래서 포스트용으로 또 다른 디자인을 추가해 볼까요?\n저는 단순히 MediumPreview2.vue로 불리는 다른 컴포넌트를 만들었습니다. 보기에는 비슷해 보이지만, 이 예제에서는 중요하지 않습니다. 각 컴포넌트가 코드를 더 깨끗하게 만드는 충분히 다른 컴포넌트임을 상상해 봅시다.\n\n이제 부모 컴포넌트는 이렇게 생겼습니다.\n\n```js\n<script setup>\nimport { usePostsStore } from './../stores/posts'\n\nimport MediumPreview from './blogDesigns/MediumPreview.vue'\nimport MediumPreview2 from './blogDesigns/MediumPreview2.vue'\n\nconst postStore = usePostsStore()\n</script>\n\n<template>\n  <div class=\"container\">\n    <component :is=\"index % 2 === 0 ? MediumPreview : MediumPreview2\" :post=\"post\" v-for=\"(post, index) in postStore.posts\" :key=\"post.title\">\n    </component>\n  </div>\n</template>\n```\n\n\n\n결과는 아래와 같습니다:\n\n![Vue3 Dynamic Components](/assets/img/2024-05-14-Vue3DynamicComponents_2.png)\n\n## 최종 목표\n\n동적 컴포넌트의 일반적인 사용 사례는 사용자가 어떤 종류의 뷰/디자인을 사용하고 싶은지 선택할 수 있는 탭일 수도 있습니다. 따라서 사용자가 보여져야 하는 디자인의 종류를 선택할 수 있는 탭을 포함한 예제를 확장할 수 있습니다.\n\n\n\n<img src=\"/assets/img/2024-05-14-Vue3DynamicComponents_3.png\" />\n\nPinia store를 사용하여 쉽게 이루어집니다. 어떤 디자인을 보여줄지의 값을 저장하기 위한 Pinia store를 사용합니다 →\n\n```js\n<script setup>\nimport { usePostsStore } from './../stores/posts'\nimport { useTabStore } from './../stores/tab'\nimport MediumPreview from './blogDesigns/MediumPreview.vue'\nimport MediumPreview2 from './blogDesigns/MediumPreview2.vue'\n\nconst componentMap = { MediumPreview, MediumPreview2 }\nconst tabStore = useTabStore()\nconst postStore = usePostsStore()\n</script>\n\n<template>\n  <div class=\"container\">\n    <component :is=\"componentMap[tabStore.tab]\" :post=\"post\" v-for=\"(post, index) in postStore.posts\" :key=\"post.title\">\n    </component>\n  </div>\n</template>\r\n```\n\n## 결론\n\n\n\n동적 구성 요소를 설정하는 것은 코드베이스를 간단하게 유지하고 분할하는 효과적인 방법일 수 있어요. 새로운 디자인을 추가하는 것은 완전히 별도의 파일에서 할 수 있어서 현재 구성 요소에 오류와 버그를 도입할 가능성이 줄어들어요.\n\n여기서 전체 예제 repo를 확인하세요\n\n여기서 데모 사이트를 확인하세요\n\n아래 내용도 참고해보세요:\n\n\n\n# 친절한 영어로 🚀\n\nIn Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 작가를 박수로 응원하고 팔로우하세요 👏\n- 팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter\n- 다른 플랫폼 방문하기: Stackademic | CoFeed | Venture\n- PlainEnglish.io에서 더 많은 콘텐츠 만나보세요","ogImage":{"url":"/assets/img/2024-05-14-Vue3DynamicComponents_0.png"},"coverImage":"/assets/img/2024-05-14-Vue3DynamicComponents_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>블로그 포스트 목록이 있다고 상상해봅시다 (여기 예시를 사용하고 있어요). 대부분의 경우, 모든 포스트가 너무 비슷해서 우리는 하나의 컴포넌트를 추출하고 재사용하고 싶을 것입니다. 이를 blogPost.vue라고 부를게요. 이런 경우에는 제목, 부제목 및 이미지를 표시하고 싶을 때 사용할 수 있어요.</p>\n<p>이제 블로그 포스트가 다른 특성을 가지고 있다고 상상해보세요. 어떤 포스트는 이미지 대신 상호작용이 필요한 인포그래픽을 가지고 있을 수도 있고, 어떤 것은 그저 다른 디자인이 필요할 수도 있어요. 이 문제를 해결하는 한 가지 방법은 blogPost.vue 컴포넌트 내부에 많은 if (조건부) 렌더링을 만드는 것이 있습니다. 다른 방법은 동적 컴포넌트를 사용하는 것이죠!!</p>\n<h2>예제</h2>\n<p>위에서 시작한 프로젝트를 확장해 나가려고 합니다. 이것은 Medium에서 가져온 블로그 포스트 목록입니다. 현재 이들은 모두 같은 디자인을 가지고 있지만, 동적 컴포넌트를 사용하여 컴포넌트를 깨끗하게 유지하면서 세 가지 다른 디자인을 만들 것입니다.</p>\n<p>기본적인 blogPost.vue 컴포넌트는 다음과 같이 보입니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;script setup>\n<span class=\"hljs-keyword\">const</span> props = <span class=\"hljs-title function_\">defineProps</span>([<span class=\"hljs-string\">'post'</span>])\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">openPostWindow</span> = (<span class=\"hljs-params\">url</span>) => {\n  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">open</span>(url, <span class=\"hljs-string\">'_blank'</span>)\n}\n&#x3C;/script>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"openPostWindow(post.mediumUrl)\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card__header\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">\"`https://miro.medium.com/v2/resize:fill:500:200/${post.previewImage.id}`\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Post Image\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"post-image\"</span> /></span>\n\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card__body\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h4</span>></span>\n        { post.title }\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h4</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n        { post.extendedPreviewContent.subtitle }\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card__footer\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"user\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"user__info\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">small</span>></span>\n            { Math.ceil(post.readingTime) } 분\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">small</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>></span><span class=\"css\">\n <span class=\"hljs-comment\">/* 스타일은 실제 저장소에 있습니다 */</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span></span>\n</code></pre>\n<pre><code class=\"hljs language-javascript\">&#x3C;script setup>\n<span class=\"hljs-keyword\">import</span> { usePostsStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./../stores/posts'</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MediumPreview</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./blogDesigns/MediumPreview.vue'</span>\n\n<span class=\"hljs-keyword\">const</span> postStore = <span class=\"hljs-title function_\">usePostsStore</span>()\n&#x3C;/script>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">\"MediumPreview\"</span> <span class=\"hljs-attr\">:post</span>=<span class=\"hljs-string\">\"post\"</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"post in postStore.posts\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"post.title\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">component</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n</code></pre>\n<p>지금까지 잘 진행되고 있어요! 이제 우리는 동적 접근 방식을 사용하고 있습니다. component 키워드를 사용하여 Vue에게 MediumPreview.vue 컴포넌트를 사용하도록 하고 있어요. 결과는 이렇게 나와요:</p>\n<p><img src=\"/assets/img/2024-05-14-Vue3DynamicComponents_1.png\" alt=\"2024-05-14-Vue3DynamicComponents_1\"></p>\n<h2>동적이 멋있어지는 때</h2>\n<p>지금까지 우리는 동적 접근 방식만 사용하여 동일한 컴포넌트를 표시했습니다. 이것은 좋은 시작점이지만, 동적 컴포넌트의 진정한 힘을 활용하지 못합니다. 그것은 여러 컴포넌트를 사용할 때에만 얻을 수 있습니다. 그래서 포스트용으로 또 다른 디자인을 추가해 볼까요?\n저는 단순히 MediumPreview2.vue로 불리는 다른 컴포넌트를 만들었습니다. 보기에는 비슷해 보이지만, 이 예제에서는 중요하지 않습니다. 각 컴포넌트가 코드를 더 깨끗하게 만드는 충분히 다른 컴포넌트임을 상상해 봅시다.</p>\n<p>이제 부모 컴포넌트는 이렇게 생겼습니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;script setup>\n<span class=\"hljs-keyword\">import</span> { usePostsStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./../stores/posts'</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MediumPreview</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./blogDesigns/MediumPreview.vue'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MediumPreview2</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./blogDesigns/MediumPreview2.vue'</span>\n\n<span class=\"hljs-keyword\">const</span> postStore = <span class=\"hljs-title function_\">usePostsStore</span>()\n&#x3C;/script>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">\"index % 2 === 0 ? MediumPreview : MediumPreview2\"</span> <span class=\"hljs-attr\">:post</span>=<span class=\"hljs-string\">\"post\"</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(post, index) in postStore.posts\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"post.title\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">component</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n</code></pre>\n<p>결과는 아래와 같습니다:</p>\n<p><img src=\"/assets/img/2024-05-14-Vue3DynamicComponents_2.png\" alt=\"Vue3 Dynamic Components\"></p>\n<h2>최종 목표</h2>\n<p>동적 컴포넌트의 일반적인 사용 사례는 사용자가 어떤 종류의 뷰/디자인을 사용하고 싶은지 선택할 수 있는 탭일 수도 있습니다. 따라서 사용자가 보여져야 하는 디자인의 종류를 선택할 수 있는 탭을 포함한 예제를 확장할 수 있습니다.</p>\n<p>Pinia store를 사용하여 쉽게 이루어집니다. 어떤 디자인을 보여줄지의 값을 저장하기 위한 Pinia store를 사용합니다 →</p>\n<pre><code class=\"hljs language-js\">&#x3C;script setup>\n<span class=\"hljs-keyword\">import</span> { usePostsStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./../stores/posts'</span>\n<span class=\"hljs-keyword\">import</span> { useTabStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./../stores/tab'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MediumPreview</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./blogDesigns/MediumPreview.vue'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MediumPreview2</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./blogDesigns/MediumPreview2.vue'</span>\n\n<span class=\"hljs-keyword\">const</span> componentMap = { <span class=\"hljs-title class_\">MediumPreview</span>, <span class=\"hljs-title class_\">MediumPreview2</span> }\n<span class=\"hljs-keyword\">const</span> tabStore = <span class=\"hljs-title function_\">useTabStore</span>()\n<span class=\"hljs-keyword\">const</span> postStore = <span class=\"hljs-title function_\">usePostsStore</span>()\n&#x3C;/script>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">\"componentMap[tabStore.tab]\"</span> <span class=\"hljs-attr\">:post</span>=<span class=\"hljs-string\">\"post\"</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(post, index) in postStore.posts\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"post.title\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">component</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n</code></pre>\n<h2>결론</h2>\n<p>동적 구성 요소를 설정하는 것은 코드베이스를 간단하게 유지하고 분할하는 효과적인 방법일 수 있어요. 새로운 디자인을 추가하는 것은 완전히 별도의 파일에서 할 수 있어서 현재 구성 요소에 오류와 버그를 도입할 가능성이 줄어들어요.</p>\n<p>여기서 전체 예제 repo를 확인하세요</p>\n<p>여기서 데모 사이트를 확인하세요</p>\n<p>아래 내용도 참고해보세요:</p>\n<h1>친절한 영어로 🚀</h1>\n<p>In Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:</p>\n<ul>\n<li>작가를 박수로 응원하고 팔로우하세요 👏</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter</li>\n<li>다른 플랫폼 방문하기: Stackademic | CoFeed | Venture</li>\n<li>PlainEnglish.io에서 더 많은 콘텐츠 만나보세요</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}