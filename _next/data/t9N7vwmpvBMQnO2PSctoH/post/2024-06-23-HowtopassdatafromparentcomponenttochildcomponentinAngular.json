{"pageProps":{"post":{"title":"Angular에서 부모 컴포넌트에서 자식 컴포넌트로 데이터 전달하는 방법","description":"","date":"2024-06-23 14:07","slug":"2024-06-23-HowtopassdatafromparentcomponenttochildcomponentinAngular","content":"\n\n<img src=\"/assets/img/2024-06-23-HowtopassdatafromparentcomponenttochildcomponentinAngular_0.png\" />\n\nAngular에서 부모 컴포넌트에서 자식 컴포넌트로 데이터/변수를 전달하는 여러 가지 방법이 있습니다. 가장 흔한 두 가지 방법은 다음과 같습니다:\n\n- @Input 데코레이터 사용\n- 공유 서비스 사용\n\n## 1. @Input 데코레이터 사용\n\n<div class=\"content-ad\"></div>\n\n한 가지 방법은 자식 컴포넌트에서 데이터를 수신할 변수를 선언하는 데 @Input() 데코레이터를 사용하는 것입니다.\n\n부모 컴포넌트의 템플릿에서, 속성 바인딩 구문(대괄호)을 사용하여 변수의 값을 자식 컴포넌트의 입력에 바인딩합니다.\n\n예를 들어, 부모 컴포넌트의 템플릿에서:\n\n```js\n<!--parent.component.html-->\n\n<app-child [inputFromParent]=\"data\"></app-child>\n```\n\n<div class=\"content-ad\"></div>\n\n아이 컴포넌트의 클래스에서:\n\n```js\n// child.component.ts\n\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-child',\n  template: `\n    <p>{ inputFromParent }</p>\n  `\n})\nexport class ChildComponent {\n  @Input() inputFromParent: any;\n}\n```\n\n## 2. 공유 서비스 사용\n\n다른 방법은 공유 서비스를 사용하는 것입니다. 공유 서비스는 서로 직접적으로 관련이 없는 컴포넌트 간에 데이터를 공유하는 방법입니다.\n\n<div class=\"content-ad\"></div>\n\n부모 컴포넌트의 클래스에서:\n\n```js\n// parent.component.ts\n\nimport { Component } from '@angular/core';\nimport { DataService } from './data.service';\n\n@Component({\n  selector: 'app-parent',\n  template: `\n    <app-child></app-child>\n  `\n})\nexport class ParentComponent {\n  constructor(private dataService: DataService) {\n    this.dataService.data = '부모 컴포넌트에서 안녕하세요!';\n  }\n}\n```\n\n자식 컴포넌트의 클래스에서:\n\n```js\n// child.component.ts\n\nimport { Component } from '@angular/core';\nimport { DataService } from './data.service';\n\n@Component({\n  selector: 'app-child',\n  template: `\n    <p>{ data }</p>\n  `\n})\nexport class ChildComponent {\n  data: any;\n  constructor(private dataService: DataService) {\n    this.data = this.dataService.data;\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\nAngular에서 부모 컴포넌트에서 자식 컴포넌트로 변수를 전달하는 다른 방법이 있을 수 있습니다. 이것들은 기본 접근 방법 중 두 가지에 불과합니다.","ogImage":{"url":"/assets/img/2024-06-23-HowtopassdatafromparentcomponenttochildcomponentinAngular_0.png"},"coverImage":"/assets/img/2024-06-23-HowtopassdatafromparentcomponenttochildcomponentinAngular_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Angular에서 부모 컴포넌트에서 자식 컴포넌트로 데이터/변수를 전달하는 여러 가지 방법이 있습니다. 가장 흔한 두 가지 방법은 다음과 같습니다:</p>\n<ul>\n<li>@Input 데코레이터 사용</li>\n<li>공유 서비스 사용</li>\n</ul>\n<h2>1. @Input 데코레이터 사용</h2>\n<p>한 가지 방법은 자식 컴포넌트에서 데이터를 수신할 변수를 선언하는 데 @Input() 데코레이터를 사용하는 것입니다.</p>\n<p>부모 컴포넌트의 템플릿에서, 속성 바인딩 구문(대괄호)을 사용하여 변수의 값을 자식 컴포넌트의 입력에 바인딩합니다.</p>\n<p>예를 들어, 부모 컴포넌트의 템플릿에서:</p>\n<pre><code class=\"hljs language-js\">&#x3C;!--parent.<span class=\"hljs-property\">component</span>.<span class=\"hljs-property\">html</span>-->\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">app-child</span> [<span class=\"hljs-attr\">inputFromParent</span>]=<span class=\"hljs-string\">\"data\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">app-child</span>></span></span>\n</code></pre>\n<p>아이 컴포넌트의 클래스에서:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// child.component.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">Input</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-child'</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n    &#x3C;p>{ inputFromParent }&#x3C;/p>\n  `</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChildComponent</span> {\n  @<span class=\"hljs-title class_\">Input</span>() <span class=\"hljs-attr\">inputFromParent</span>: any;\n}\n</code></pre>\n<h2>2. 공유 서비스 사용</h2>\n<p>다른 방법은 공유 서비스를 사용하는 것입니다. 공유 서비스는 서로 직접적으로 관련이 없는 컴포넌트 간에 데이터를 공유하는 방법입니다.</p>\n<p>부모 컴포넌트의 클래스에서:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// parent.component.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DataService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./data.service'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-parent'</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n    &#x3C;app-child>&#x3C;/app-child>\n  `</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ParentComponent</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private dataService: DataService</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dataService</span>.<span class=\"hljs-property\">data</span> = <span class=\"hljs-string\">'부모 컴포넌트에서 안녕하세요!'</span>;\n  }\n}\n</code></pre>\n<p>자식 컴포넌트의 클래스에서:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// child.component.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DataService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./data.service'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-child'</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n    &#x3C;p>{ data }&#x3C;/p>\n  `</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChildComponent</span> {\n  <span class=\"hljs-attr\">data</span>: any;\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private dataService: DataService</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dataService</span>.<span class=\"hljs-property\">data</span>;\n  }\n}\n</code></pre>\n<p>Angular에서 부모 컴포넌트에서 자식 컴포넌트로 변수를 전달하는 다른 방법이 있을 수 있습니다. 이것들은 기본 접근 방법 중 두 가지에 불과합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}