{"pageProps":{"post":{"title":" TypeScript와 GitHub Actions를 사용하여 React 앱을 GitHub Pages에 배포하는 방법 ","description":"","date":"2024-06-22 03:03","slug":"2024-06-22-DeployingaReactAppwithTypeScriptandGitHubActionstoGitHubPages","content":"\n\n리액트 애플리케이션을 GitHub Pages에 배포하는 것은 적절한 설정으로 간단할 수 있어요. 이 안내서를 통해 TypeScript 및 GitHub Actions를 사용하여 미리 빌드된 React 앱을 GitHub Pages에 배포하는 방법을 안내할 거에요. 최적의 방법에 중점을 두어 배포를 깔끔하고 효율적으로 만들어보겠습니다.\n\n# 소개\n\n이 워크플로우는 dist 폴더를 메인 브랜치에 커밋하는 대신 peaceiris/actions-gh-pages@v3action을 사용하여 dist 디렉토리의 내용을 직접 gh-pages 브랜치에 배포합니다. 이 방법을 통해 애플리케이션의 컴파일된 최적화된 프로덕션 빌드만 GitHub Pages에 배포되므로 메인 브랜치를 깨끗하게 유지하고 소스 코드 관리에 집중할 수 있습니다.\n\n# 구성 세부 정보\n\n<div class=\"content-ad\"></div>\n\n1. 라우터의 베이스네임 속성: 🛤️\nApp.tsx 파일에서 `Router` 컴포넌트의 basename 속성을 설정하세요. 이렇게 하면 애플리케이션이 GitHub Pages의 하위 디렉토리 (/pokemon-react-app)에 배포될 때, 라우트가 해당 기본 URL을 기준으로 올바르게 해석됩니다.\n\n```js\n<Router basename=\"/pokemon-react-app\">\n {/* 여러분의 라우트 */}\n</Router>\n```\n\n2. 웹팩 설정: 🔧\n웹팩 구성에서 publicPath를 조정하여 하위 디렉토리에 배포될 때 자산 URL을 고려하세요.\n\n```js\noutput: {\n  filename: 'bundle.js',\n  path: path.resolve(__dirname, 'dist'),\n  publicPath: '/pokemon-react-app/',\n}\n```\n\n<div class=\"content-ad\"></div>\n\n3. Package.json 구성: 📦\npackage.json의 name 및 homepage 필드가 GitHub Pages를 올바르게 구성하도록 설정되었는지 확인하세요.\n\n```js\n{\n  \"name\": \"pokemon-react-app\",\n  \"homepage\": \"https://Jagoda11.github.io/pokemon-react-app\",\n}\n```\n\n# 단계별 안내 📝\n\n# 1. gh-pages 브랜치 생성하기 🌿\n\n<div class=\"content-ad\"></div>\n\n첫째로, gh-pages 브랜치가 없는 경우에만 생성하고 해당 내용을 정리하세요:\n\n```js\ngit checkout -b gh-pages\ngit checkout gh-pages\ngit rm -r .\ngit commit -m \"배포를 위한 정리\"\ngit push origin gh-pages\n```\n\n# 2. GitHub Actions Workflow ⚙️\n\nci.yml 파일에 GitHub Actions Workflow를 설정하여 배포 프로세스를 자동화하세요.\n\n<div class=\"content-ad\"></div>\n\n```yaml\nname: CI\n\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [21.x]\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: 🛠️ Use Node.js ${ matrix.node-version }\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${ matrix.node-version }\n      - name: 📦 Install dependencies\n        run: npm ci\n      - name: 🖌️ Format code\n        run: npm run format\n      - name: 🧹 Lint code\n        run: npm run lint\n      - name: 🔨 Build\n        run: npm run build\n      - name: 🧪 Test with coverage\n        run: npm run test\n      - name: 🚀 Deploy to GitHub Pages 🚀\n        if: github.ref == 'refs/heads/main'\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${ secrets.GITHUB_TOKEN }\n          publish_dir: ./dist\n```\n\n# 3. Configuring GitHub Pages in GitHub Interface 🌐\n\nTo configure GitHub Pages in the GitHub interface:\n\n1. Navigate to Repository Settings: 🛠️\nGo to your repository on GitHub, click on the Settings tab.\n\n<div class=\"content-ad\"></div>\n\n2. 페이지 설정에 액세스하기: 📄\n왼쪽 메뉴에서 아래로 스크롤하여 \"페이지\"를 클릭하세요.\n\n3. 소스 브랜치 선택하기: 🌳\n\"소스\" 섹션에서 브랜치 드롭다운 메뉴에서 gh-pages를 선택하세요.\n\n4. 폴더 지정하기: 📁\n만약 당신의 dist 폴더가 리포지토리의 루트 레벨에 있다면, 폴더 드롭다운에서 / (루트)를 선택하세요. 다른 디렉토리 안에 있다면 해당 경로를 명시하세요.\n\n5. HTTPS 강제하기: 🔒\n사이트를 배포할 때 안전한 연결을 보장하기 위해 HTTPS를 활성화할 박스를 체크하세요.\n\n<div class=\"content-ad\"></div>\n\n6. 저장하기: 💾\n구성을 적용하려면 저장 버튼을 클릭하세요.\n\n![이미지](/assets/img/2024-06-22-DeployingaReactAppwithTypeScriptandGitHubActionstoGitHubPages_0.png)\n\n## 4. .gitignore에 dist 유지하기 🚫\n\n주 브랜치를 깨끗하게 유지하려면 .gitignore 파일에 dist 디렉토리를 포함시키세요. 이렇게 하면 dist 폴더가 주 브랜치에 커밋되지 않고, GitHub Actions 파이프라인에서 빌드 프로세스 중에 생성됩니다.\n\n<div class=\"content-ad\"></div>\n\n 다음과 같은 줄을 .gitignore 파일에 추가해주세요:\n\n```js\ndist/\n```\n\n# 결론 🎉\n\n위 단계를 따라하면 GitHub Actions를 통해 GitHub Pages에 React 애플리케이션을 효율적으로 배포할 수 있습니다. 이 설정은 메인 브랜치를 유지하고 소스 코드 관리에 집중하면서 최적화된 프로덕션 빌드만 배포되도록 보장합니다.\n\n<div class=\"content-ad\"></div>\n\n제 포켓몬 앱의 작동 예제를 확인하고 완전한 소스 코드를 보려면 GitHub 저장소를 살펴보세요.\n\n저자 소개\n\n안녕하세요, 개발에 열정을 품고 웹 개발과 오픈 소스 프로젝트에 관심을 가지고 있는 Jagoda입니다. GitHub에서 제 작품을 더 확인하거나 LinkedIn에서 저와 소통할 수 있습니다.\n\n질문이 있거나 추가 도움이 필요하다면 언제든지 댓글을 남기거나 연락해주세요. 즐거운 배포되세요!🌟","ogImage":{"url":"/assets/img/2024-06-22-DeployingaReactAppwithTypeScriptandGitHubActionstoGitHubPages_0.png"},"coverImage":"/assets/img/2024-06-22-DeployingaReactAppwithTypeScriptandGitHubActionstoGitHubPages_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>리액트 애플리케이션을 GitHub Pages에 배포하는 것은 적절한 설정으로 간단할 수 있어요. 이 안내서를 통해 TypeScript 및 GitHub Actions를 사용하여 미리 빌드된 React 앱을 GitHub Pages에 배포하는 방법을 안내할 거에요. 최적의 방법에 중점을 두어 배포를 깔끔하고 효율적으로 만들어보겠습니다.</p>\n<h1>소개</h1>\n<p>이 워크플로우는 dist 폴더를 메인 브랜치에 커밋하는 대신 peaceiris/actions-gh-pages@v3action을 사용하여 dist 디렉토리의 내용을 직접 gh-pages 브랜치에 배포합니다. 이 방법을 통해 애플리케이션의 컴파일된 최적화된 프로덕션 빌드만 GitHub Pages에 배포되므로 메인 브랜치를 깨끗하게 유지하고 소스 코드 관리에 집중할 수 있습니다.</p>\n<h1>구성 세부 정보</h1>\n<ol>\n<li>라우터의 베이스네임 속성: 🛤️\nApp.tsx 파일에서 <code>Router</code> 컴포넌트의 basename 속성을 설정하세요. 이렇게 하면 애플리케이션이 GitHub Pages의 하위 디렉토리 (/pokemon-react-app)에 배포될 때, 라우트가 해당 기본 URL을 기준으로 올바르게 해석됩니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\">&#x3C;<span class=\"hljs-title class_\">Router</span> basename=<span class=\"hljs-string\">\"/pokemon-react-app\"</span>>\n {<span class=\"hljs-comment\">/* 여러분의 라우트 */</span>}\n&#x3C;/<span class=\"hljs-title class_\">Router</span>>\n</code></pre>\n<ol start=\"2\">\n<li>웹팩 설정: 🔧\n웹팩 구성에서 publicPath를 조정하여 하위 디렉토리에 배포될 때 자산 URL을 고려하세요.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">output</span>: {\n  <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'bundle.js'</span>,\n  <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">'dist'</span>),\n  <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">'/pokemon-react-app/'</span>,\n}\n</code></pre>\n<ol start=\"3\">\n<li>Package.json 구성: 📦\npackage.json의 name 및 homepage 필드가 GitHub Pages를 올바르게 구성하도록 설정되었는지 확인하세요.</li>\n</ol>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"pokemon-react-app\"</span>,\n  <span class=\"hljs-string\">\"homepage\"</span>: <span class=\"hljs-string\">\"https://Jagoda11.github.io/pokemon-react-app\"</span>,\n}\n</code></pre>\n<h1>단계별 안내 📝</h1>\n<h1>1. gh-pages 브랜치 생성하기 🌿</h1>\n<p>첫째로, gh-pages 브랜치가 없는 경우에만 생성하고 해당 내용을 정리하세요:</p>\n<pre><code class=\"hljs language-js\">git checkout -b gh-pages\ngit checkout gh-pages\ngit rm -r .\ngit commit -m <span class=\"hljs-string\">\"배포를 위한 정리\"</span>\ngit push origin gh-pages\n</code></pre>\n<h1>2. GitHub Actions Workflow ⚙️</h1>\n<p>ci.yml 파일에 GitHub Actions Workflow를 설정하여 배포 프로세스를 자동화하세요.</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">CI</span>\n\n<span class=\"hljs-attr\">on:</span> [<span class=\"hljs-string\">push</span>, <span class=\"hljs-string\">pull_request</span>]\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">node-version:</span> [<span class=\"hljs-number\">21.</span><span class=\"hljs-string\">x</span>]\n\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">🛠️</span> <span class=\"hljs-string\">Use</span> <span class=\"hljs-string\">Node.js</span> <span class=\"hljs-string\">${</span> <span class=\"hljs-string\">matrix.node-version</span> <span class=\"hljs-string\">}</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v2</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">node-version:</span> <span class=\"hljs-string\">${</span> <span class=\"hljs-string\">matrix.node-version</span> <span class=\"hljs-string\">}</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">📦</span> <span class=\"hljs-string\">Install</span> <span class=\"hljs-string\">dependencies</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">ci</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">🖌️</span> <span class=\"hljs-string\">Format</span> <span class=\"hljs-string\">code</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">format</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">🧹</span> <span class=\"hljs-string\">Lint</span> <span class=\"hljs-string\">code</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">lint</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">🔨</span> <span class=\"hljs-string\">Build</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">build</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">🧪</span> <span class=\"hljs-string\">Test</span> <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">coverage</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">test</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">🚀</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">GitHub</span> <span class=\"hljs-string\">Pages</span> <span class=\"hljs-string\">🚀</span>\n        <span class=\"hljs-attr\">if:</span> <span class=\"hljs-string\">github.ref</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'refs/heads/main'</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">peaceiris/actions-gh-pages@v3</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">github_token:</span> <span class=\"hljs-string\">${</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}</span>\n          <span class=\"hljs-attr\">publish_dir:</span> <span class=\"hljs-string\">./dist</span>\n</code></pre>\n<h1>3. Configuring GitHub Pages in GitHub Interface 🌐</h1>\n<p>To configure GitHub Pages in the GitHub interface:</p>\n<ol>\n<li>Navigate to Repository Settings: 🛠️\nGo to your repository on GitHub, click on the Settings tab.</li>\n</ol>\n<ol start=\"2\">\n<li>\n<p>페이지 설정에 액세스하기: 📄\n왼쪽 메뉴에서 아래로 스크롤하여 \"페이지\"를 클릭하세요.</p>\n</li>\n<li>\n<p>소스 브랜치 선택하기: 🌳\n\"소스\" 섹션에서 브랜치 드롭다운 메뉴에서 gh-pages를 선택하세요.</p>\n</li>\n<li>\n<p>폴더 지정하기: 📁\n만약 당신의 dist 폴더가 리포지토리의 루트 레벨에 있다면, 폴더 드롭다운에서 / (루트)를 선택하세요. 다른 디렉토리 안에 있다면 해당 경로를 명시하세요.</p>\n</li>\n<li>\n<p>HTTPS 강제하기: 🔒\n사이트를 배포할 때 안전한 연결을 보장하기 위해 HTTPS를 활성화할 박스를 체크하세요.</p>\n</li>\n</ol>\n<ol start=\"6\">\n<li>저장하기: 💾\n구성을 적용하려면 저장 버튼을 클릭하세요.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-22-DeployingaReactAppwithTypeScriptandGitHubActionstoGitHubPages_0.png\" alt=\"이미지\"></p>\n<h2>4. .gitignore에 dist 유지하기 🚫</h2>\n<p>주 브랜치를 깨끗하게 유지하려면 .gitignore 파일에 dist 디렉토리를 포함시키세요. 이렇게 하면 dist 폴더가 주 브랜치에 커밋되지 않고, GitHub Actions 파이프라인에서 빌드 프로세스 중에 생성됩니다.</p>\n<p>다음과 같은 줄을 .gitignore 파일에 추가해주세요:</p>\n<pre><code class=\"hljs language-js\">dist/\n</code></pre>\n<h1>결론 🎉</h1>\n<p>위 단계를 따라하면 GitHub Actions를 통해 GitHub Pages에 React 애플리케이션을 효율적으로 배포할 수 있습니다. 이 설정은 메인 브랜치를 유지하고 소스 코드 관리에 집중하면서 최적화된 프로덕션 빌드만 배포되도록 보장합니다.</p>\n<p>제 포켓몬 앱의 작동 예제를 확인하고 완전한 소스 코드를 보려면 GitHub 저장소를 살펴보세요.</p>\n<p>저자 소개</p>\n<p>안녕하세요, 개발에 열정을 품고 웹 개발과 오픈 소스 프로젝트에 관심을 가지고 있는 Jagoda입니다. GitHub에서 제 작품을 더 확인하거나 LinkedIn에서 저와 소통할 수 있습니다.</p>\n<p>질문이 있거나 추가 도움이 필요하다면 언제든지 댓글을 남기거나 연락해주세요. 즐거운 배포되세요!🌟</p>\n</body>\n</html>\n"},"__N_SSG":true}