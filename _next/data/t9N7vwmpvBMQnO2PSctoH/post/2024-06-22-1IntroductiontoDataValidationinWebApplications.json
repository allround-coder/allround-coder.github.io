{"pageProps":{"post":{"title":"웹 애플리케이션에서 데이터 검증 소개","description":"","date":"2024-06-22 02:21","slug":"2024-06-22-1IntroductiontoDataValidationinWebApplications","content":"\n\n1. 웹 애플리케이션에서 데이터 유효성 검사 소개.\n2. NestJS를 유효성 검사 용으로 설정하기.\n- 선행 조건 및 프로젝트 설정.\n- 유효성 검사 스키마 생성 및 사용하기.\n3. Joi와 함께 pipe를 소개하고 사용하는 방법.\n4. Joi를 사용하여 매개변수 및 쿼리 매개변수의 유효성 검사.\n5. 실제 구현: nestjs-joi 및 joi-class-decorators를 활용한 완전한 NestJS 애플리케이션 탐색하기: GitHub의 NestJS Sample App with nestjs-joi. \n\n# 1. 웹 애플리케이션에서 데이터 유효성 검사 소개.\n\n- 데이터 유효성 검사는 사용자가 입력한 데이터나 외부 소스에서 가져온 데이터가 지정된 기준과 형식을 충족하는지 확인하는 프로세스입니다. 데이터 유효성 검사는 클라이언트 측, 서버 측 및 데이터베이스 수준을 포함하여 여러 수준에서 수행할 수 있습니다. \n\n# 2. NestJS를 유효성 검사 용으로 설정하기.\n\n<div class=\"content-ad\"></div>\n\n- 전제 조건 및 프로젝트 설정:\n\n## 1. Node 및 npm 설치:\n\nNodejs 웹 사이트에 가서 Node를 설치해야 합니다.\n\n## 2. NestJs 설치 및 새로운 nestApp 생성:\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm i -g @nestjs/cli\nnest new my-nestjs-app\ncd ./my-nestjs-app\n```\n\n## 3. 새로운 파이프인 validation을 생성하세요:\n\n```js\n// --no-spec => spec 파일 생성 비활성화\n// --flat => 요소를 위한 폴더를 생성하지 않습니다.\nnest g pipe validation --no-spec --flat\n```\n\n## 4. 필요한 패키지 설치하기 (nestjs-joi, joi-class-decorators)\n\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm i class-transformer joi nestjs-joi joi-class-decorators\n```\n\n- 확인 스키마 생성 및 사용:\n\n## 1. `/testBody` 엔드포인트 생성, 메서드 유형: POST, 앱 컨트롤러에서\n\n```js\nimport { Body, Controller, HttpCode, HttpStatus, Post, Req, Res } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Request, Response } from 'express';\nimport { validationBodyDto } from './validate.dto';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Post('/testBody')\n  @HttpCode(HttpStatus.OK)\n  testJoiValidation(@Body() reqBody: validationBodyDto, @Res() res: Response) {\n    const data = reqBody;\n    res.json(data);\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 2. validate.dto.ts 파일을 만들어서 이 엔드포인트를 검증하고 joi 스키마 클래스(validationBodyDto)를 만드세요:\n\n```js\nimport { Expose } from \"class-transformer\";\nimport { JoiSchema, JoiSchemaOptions } from \"joi-class-decorators\";\nimport * as Joi from 'joi';\n\ninterface reviewInterface {\n    rating: number;\n    comment: string;\n}\n// @Expose ==> 시리얼라이제이션 및 디시리얼라이제이션을 위해 전환 프로세스에 포함되어야 하는 속성을 표시하는 데 사용됩니다.\n// @JoiSchema() ==> 타입(클래스) 속성에 스키마를 정의합니다. 스키마 주석이 달린 속성은 전체 객체 스키마를 구성하는 데 사용됩니다.\n\n//명시적으로 정의되지 않은 속성을 허용하지 않아 엄격한 유효성을 보장합니다. \n@JoiSchemaOptions({\n    allowUnknown: false\n})\n\nexport class validationBodyDto {\n\n   //기본 유효성 검사는 문자열 유형 및 필수입니다.\n    @Expose() @JoiSchema(Joi.string().trim().required())\n    fullName: string;\n\n   //길이를 확인하고 유효한 이집트 전화 번호인지 확인합니다\n    @Expose() @JoiSchema(Joi.string().length(11).pattern(/^(011|012|015|010)\\d{8}$/).required())\n    phoneNumber: string;\n\n\n   //유효한 이메일인지 확인합니다.\n    @Expose() @JoiSchema(Joi.string().email().optional())\n    email?: string;\n\n    //값이 M 또는 F인 경우에만 유효성을 확인합니다.\n    @Expose() @JoiSchema(Joi.string().valid('M', 'F').required())\n    gender: string;\n\n    //gender가 M이면 militaryStatus는 필수이고 그렇지 않으면 선택사항입니다.\n    @Expose() @JoiSchema(\n        Joi.when('gender', {\n            is: 'M',\n            then: Joi.string().required(),\n            otherwise: Joi.string().optional(),\n        }),\n    )\n    militaryStatus: string;\n\n    //나이가 숫자이고 최소값은 14이고 최대 나이는 100입니다.\n    @Expose() @JoiSchema(Joi.number().min(14).max(100).message('유효하지 않은 나이'))\n    age: number;\n\n\n    //객체 배열이 유효한지 확인합니다.\n    @Expose()\n    @JoiSchema(\n        Joi.array().items(\n                Joi.object({\n                        rating: Joi.number().min(0.1).required(),\n                        comment: Joi.string().min(3).max(300).required(),\n                    }).required(),\n            ).required(),\n    )\n    reviews: reviewInterface[];\n\n    //빈 문자열을 허용하는 필드입니다.\n    @Expose() @JoiSchema(Joi.string().allow('').optional())\n    profilePicture?: string;\n\n    //profilePicture에 값이 있을 경우 profileFileName은 필수이고 그렇지 않으면 선택사항입니다.\n    @Expose() @JoiSchema(\n        Joi.when('profilePicture', {\n            is: Joi.string().exist(),\n            then:  Joi.string().required(),\n            otherwise: Joi.string().allow('').optional(),\n    }))\n    profileFileName: string;\n\n    //isVerified가 부울 값이고 필수인지 확인합니다.\n    @Expose() @JoiSchema(Joi.boolean().required())\n    isVerified: boolean;\n}\n```\n\n## 3. pipe 소개 및 Joi와 함께 사용하는 방법:\n\n- NestJS에서 \"pipe\"는 @Injectable() 데코레이터가 붙은 클래스로, PipeTransform 인터페이스를 구현합니다. Pipe는 일반적으로 데이터의 변환 또는 유효성 검사에 사용됩니다. 메소드 수준, 컨트롤러 수준 또는 전역 수준 등 다양한 수준에서 사용할 수 있습니다.\n- Pipes 소개\n변환: Pipes는 입력 데이터를 원하는 형식으로 변환할 수 있습니다.\n유효성 검사: Pipes는 데이터를 요청 핸들러에 전달하기 전에 데이터를 유효성 검사할 수 있습니다. 데이터가 유효하지 않으면 Pipe가 예외를 throw할 수 있고, 이는 NestJS에서 처리됩니다.\n- 우리의 경우, 일반 객체를 유형화된 객체로 변환하여 유효성을 적용할 수 있게 합니다.\n- 이제 우리가 이전에 만들었던 유효성 파이프를 사용해 보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { BadRequestException, Injectable, PipeTransform, Type } from '@nestjs/common’;\nimport { plainToInstance } from 'class-transformer’;\nimport { getClassSchema } from 'joi-class-decorators’;\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    const bodyDto = metatype; // Dto Schema\n    /*\n      우리의 일반 JavaScript 인수 객체를 형식화된 객체로 변환하여 유효성을 적용합니다.\n      이 작업을 수행해야 하는 이유는, 네트워크 요청에서 역직렬화된 전송 온 post body 객체에는 어떤 유형 정보도 포함되어 있지 않기 때문입니다. \n    */\n    // getClassSchema(bodyDto) ==> 클래스와 연결된 Joi 유효성 스키마를 가져오는 joi-class-decorators의 함수입니다.\n    const bodyInput = plainToInstance(bodyDto, value); // 일반 Dto 객체를 인스턴스로 변환하여 수동으로 변환합니다\n    const bodySchema = getClassSchema(bodyDto); // Dto에서 Joi 스키마 가져오기\n    // 클래스 인스턴스를 Joi 스키마에 대해 유효성 검사합니다. 유효성 검사가 실패하면 error에 유효성 오류가 포함됩니다.\n    const error = bodySchema.validate(bodyInput).error;  \n    if (error) {\n      throw new BadRequestException(`유효성 검사 실패: ${error.details.map((err) => err.message).join(', ')}.`);  \n    }\n    return value\n  }\n}\ninterface ArgumentMetadata {\n  type: 'body' | 'query' | 'param' | 'custom';\n  metatype?: Type<unknown>;\n  data?: string;\n}\n```\n\n## 4. Param 및 Query Params에 대한 Joi 유효성 검사.\n\n- `/testParams/:category’` 경로를 만들고, GET 방식으로 작성합니다. category라는 하나의 param을 받고, 두 개의 Query Params인 limit와 page를 받습니다.\n\n```js\n@Get(’/testParams/:category’) \n@HttpCode(HttpStatus.OK) \n@UsePipes(new ValidationPipe()) \ntestJoiValidationParam( \n@Param() category: validationParamDto, \n@Query() limitAndPageSize: validationQueryParamDto, \n@Res() res: Response \n) { \n   res.json({ category, limitAndPageSize }); \n}\n```\n\n<div class=\"content-ad\"></div>\n\n- 이러한 매개변수를 위해 두 개의 DTO를 생성하세요:\n\n```js\n@JoiSchemaOptions({\n    allowUnknown: false\n})\n\nexport class validationParamDto {\n     @Expose() @JoiSchema(Joi.string().valid('Fashions', 'Electronics', 'MobilesPhones', 'Perfumes').required())\n     category: string; \n}\n\n@JoiSchemaOptions({\n    allowUnknown: false\n})\n\nexport class validationQueryParamDto {\n\n    @Expose() @JoiSchema(Joi.number().min(0).max(100).message('잘못된 제한입니다'))\n    limit: string;\n\n    @Expose() @JoiSchema(Joi.number().min(0).max(100).message('잘못된 페이지 크기입니다'))\n    page: string;\n}\n```\n\nGitHub에서 NestJS 샘플 앱을 탐색하세요.","ogImage":{"url":"/assets/img/2024-06-22-1IntroductiontoDataValidationinWebApplications_0.png"},"coverImage":"/assets/img/2024-06-22-1IntroductiontoDataValidationinWebApplications_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<ol>\n<li>웹 애플리케이션에서 데이터 유효성 검사 소개.</li>\n<li>NestJS를 유효성 검사 용으로 설정하기.</li>\n</ol>\n<ul>\n<li>선행 조건 및 프로젝트 설정.</li>\n<li>유효성 검사 스키마 생성 및 사용하기.</li>\n</ul>\n<ol start=\"3\">\n<li>Joi와 함께 pipe를 소개하고 사용하는 방법.</li>\n<li>Joi를 사용하여 매개변수 및 쿼리 매개변수의 유효성 검사.</li>\n<li>실제 구현: nestjs-joi 및 joi-class-decorators를 활용한 완전한 NestJS 애플리케이션 탐색하기: GitHub의 NestJS Sample App with nestjs-joi.</li>\n</ol>\n<h1>1. 웹 애플리케이션에서 데이터 유효성 검사 소개.</h1>\n<ul>\n<li>데이터 유효성 검사는 사용자가 입력한 데이터나 외부 소스에서 가져온 데이터가 지정된 기준과 형식을 충족하는지 확인하는 프로세스입니다. 데이터 유효성 검사는 클라이언트 측, 서버 측 및 데이터베이스 수준을 포함하여 여러 수준에서 수행할 수 있습니다.</li>\n</ul>\n<h1>2. NestJS를 유효성 검사 용으로 설정하기.</h1>\n<ul>\n<li>전제 조건 및 프로젝트 설정:</li>\n</ul>\n<h2>1. Node 및 npm 설치:</h2>\n<p>Nodejs 웹 사이트에 가서 Node를 설치해야 합니다.</p>\n<h2>2. NestJs 설치 및 새로운 nestApp 생성:</h2>\n<pre><code class=\"hljs language-js\">npm i -g @nestjs/cli\nnest <span class=\"hljs-keyword\">new</span> my-nestjs-app\ncd ./my-nestjs-app\n</code></pre>\n<h2>3. 새로운 파이프인 validation을 생성하세요:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// --no-spec => spec 파일 생성 비활성화</span>\n<span class=\"hljs-comment\">// --flat => 요소를 위한 폴더를 생성하지 않습니다.</span>\nnest g pipe validation --no-spec --flat\n</code></pre>\n<h2>4. 필요한 패키지 설치하기 (nestjs-joi, joi-class-decorators)</h2>\n<pre><code class=\"hljs language-js\">npm i <span class=\"hljs-keyword\">class</span>-transformer joi nestjs-joi joi-<span class=\"hljs-keyword\">class</span>-decorators\n</code></pre>\n<ul>\n<li>확인 스키마 생성 및 사용:</li>\n</ul>\n<h2>1. <code>/testBody</code> 엔드포인트 생성, 메서드 유형: POST, 앱 컨트롤러에서</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Body</span>, <span class=\"hljs-title class_\">Controller</span>, <span class=\"hljs-title class_\">HttpCode</span>, <span class=\"hljs-title class_\">HttpStatus</span>, <span class=\"hljs-title class_\">Post</span>, <span class=\"hljs-title class_\">Req</span>, <span class=\"hljs-title class_\">Res</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.service'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Request</span>, <span class=\"hljs-title class_\">Response</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'express'</span>;\n<span class=\"hljs-keyword\">import</span> { validationBodyDto } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./validate.dto'</span>;\n\n@<span class=\"hljs-title class_\">Controller</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppController</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private readonly appService: AppService</span>) {}\n\n  @<span class=\"hljs-title class_\">Post</span>(<span class=\"hljs-string\">'/testBody'</span>)\n  @<span class=\"hljs-title class_\">HttpCode</span>(<span class=\"hljs-title class_\">HttpStatus</span>.<span class=\"hljs-property\">OK</span>)\n  <span class=\"hljs-title function_\">testJoiValidation</span>(<span class=\"hljs-params\">@Body() reqBody: validationBodyDto, @Res() res: Response</span>) {\n    <span class=\"hljs-keyword\">const</span> data = reqBody;\n    res.<span class=\"hljs-title function_\">json</span>(data);\n  }\n}\n</code></pre>\n<h2>2. validate.dto.ts 파일을 만들어서 이 엔드포인트를 검증하고 joi 스키마 클래스(validationBodyDto)를 만드세요:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Expose</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"class-transformer\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">JoiSchema</span>, <span class=\"hljs-title class_\">JoiSchemaOptions</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"joi-class-decorators\"</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Joi</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'joi'</span>;\n\ninterface reviewInterface {\n    <span class=\"hljs-attr\">rating</span>: number;\n    <span class=\"hljs-attr\">comment</span>: string;\n}\n<span class=\"hljs-comment\">// @Expose ==> 시리얼라이제이션 및 디시리얼라이제이션을 위해 전환 프로세스에 포함되어야 하는 속성을 표시하는 데 사용됩니다.</span>\n<span class=\"hljs-comment\">// @JoiSchema() ==> 타입(클래스) 속성에 스키마를 정의합니다. 스키마 주석이 달린 속성은 전체 객체 스키마를 구성하는 데 사용됩니다.</span>\n\n<span class=\"hljs-comment\">//명시적으로 정의되지 않은 속성을 허용하지 않아 엄격한 유효성을 보장합니다. </span>\n@<span class=\"hljs-title class_\">JoiSchemaOptions</span>({\n    <span class=\"hljs-attr\">allowUnknown</span>: <span class=\"hljs-literal\">false</span>\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">validationBodyDto</span> {\n\n   <span class=\"hljs-comment\">//기본 유효성 검사는 문자열 유형 및 필수입니다.</span>\n    @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(<span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">trim</span>().required())\n    <span class=\"hljs-attr\">fullName</span>: string;\n\n   <span class=\"hljs-comment\">//길이를 확인하고 유효한 이집트 전화 번호인지 확인합니다</span>\n    @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(<span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">length</span>(<span class=\"hljs-number\">11</span>).<span class=\"hljs-title function_\">pattern</span>(<span class=\"hljs-regexp\">/^(011|012|015|010)\\d{8}$/</span>).required())\n    <span class=\"hljs-attr\">phoneNumber</span>: string;\n\n\n   <span class=\"hljs-comment\">//유효한 이메일인지 확인합니다.</span>\n    @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(<span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">email</span>().<span class=\"hljs-title function_\">optional</span>())\n    email?: string;\n\n    <span class=\"hljs-comment\">//값이 M 또는 F인 경우에만 유효성을 확인합니다.</span>\n    @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(<span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">valid</span>(<span class=\"hljs-string\">'M'</span>, <span class=\"hljs-string\">'F'</span>).required())\n    <span class=\"hljs-attr\">gender</span>: string;\n\n    <span class=\"hljs-comment\">//gender가 M이면 militaryStatus는 필수이고 그렇지 않으면 선택사항입니다.</span>\n    @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(\n        <span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">when</span>(<span class=\"hljs-string\">'gender'</span>, {\n            <span class=\"hljs-attr\">is</span>: <span class=\"hljs-string\">'M'</span>,\n            <span class=\"hljs-attr\">then</span>: <span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().required(),\n            <span class=\"hljs-attr\">otherwise</span>: <span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">optional</span>(),\n        }),\n    )\n    <span class=\"hljs-attr\">militaryStatus</span>: string;\n\n    <span class=\"hljs-comment\">//나이가 숫자이고 최소값은 14이고 최대 나이는 100입니다.</span>\n    @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(<span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">number</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">14</span>).<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-number\">100</span>).<span class=\"hljs-title function_\">message</span>(<span class=\"hljs-string\">'유효하지 않은 나이'</span>))\n    <span class=\"hljs-attr\">age</span>: number;\n\n\n    <span class=\"hljs-comment\">//객체 배열이 유효한지 확인합니다.</span>\n    @<span class=\"hljs-title class_\">Expose</span>()\n    @<span class=\"hljs-title class_\">JoiSchema</span>(\n        <span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">array</span>().<span class=\"hljs-title function_\">items</span>(\n                <span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">object</span>({\n                        <span class=\"hljs-attr\">rating</span>: <span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">number</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">0.1</span>).required(),\n                        <span class=\"hljs-attr\">comment</span>: <span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">3</span>).<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-number\">300</span>).required(),\n                    }).required(),\n            ).required(),\n    )\n    <span class=\"hljs-attr\">reviews</span>: reviewInterface[];\n\n    <span class=\"hljs-comment\">//빈 문자열을 허용하는 필드입니다.</span>\n    @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(<span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">allow</span>(<span class=\"hljs-string\">''</span>).<span class=\"hljs-title function_\">optional</span>())\n    profilePicture?: string;\n\n    <span class=\"hljs-comment\">//profilePicture에 값이 있을 경우 profileFileName은 필수이고 그렇지 않으면 선택사항입니다.</span>\n    @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(\n        <span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">when</span>(<span class=\"hljs-string\">'profilePicture'</span>, {\n            <span class=\"hljs-attr\">is</span>: <span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">exist</span>(),\n            <span class=\"hljs-attr\">then</span>:  <span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().required(),\n            <span class=\"hljs-attr\">otherwise</span>: <span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">allow</span>(<span class=\"hljs-string\">''</span>).<span class=\"hljs-title function_\">optional</span>(),\n    }))\n    <span class=\"hljs-attr\">profileFileName</span>: string;\n\n    <span class=\"hljs-comment\">//isVerified가 부울 값이고 필수인지 확인합니다.</span>\n    @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(<span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">boolean</span>().required())\n    <span class=\"hljs-attr\">isVerified</span>: boolean;\n}\n</code></pre>\n<h2>3. pipe 소개 및 Joi와 함께 사용하는 방법:</h2>\n<ul>\n<li>NestJS에서 \"pipe\"는 @Injectable() 데코레이터가 붙은 클래스로, PipeTransform 인터페이스를 구현합니다. Pipe는 일반적으로 데이터의 변환 또는 유효성 검사에 사용됩니다. 메소드 수준, 컨트롤러 수준 또는 전역 수준 등 다양한 수준에서 사용할 수 있습니다.</li>\n<li>Pipes 소개\n변환: Pipes는 입력 데이터를 원하는 형식으로 변환할 수 있습니다.\n유효성 검사: Pipes는 데이터를 요청 핸들러에 전달하기 전에 데이터를 유효성 검사할 수 있습니다. 데이터가 유효하지 않으면 Pipe가 예외를 throw할 수 있고, 이는 NestJS에서 처리됩니다.</li>\n<li>우리의 경우, 일반 객체를 유형화된 객체로 변환하여 유효성을 적용할 수 있게 합니다.</li>\n<li>이제 우리가 이전에 만들었던 유효성 파이프를 사용해 보겠습니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BadRequestException</span>, <span class=\"hljs-title class_\">Injectable</span>, <span class=\"hljs-title class_\">PipeTransform</span>, <span class=\"hljs-title class_\">Type</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common’;\nimport { plainToInstance } from '</span><span class=\"hljs-keyword\">class</span>-transformer’;\n<span class=\"hljs-keyword\">import</span> { getClassSchema } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'joi-class-decorators’;\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    const bodyDto = metatype; // Dto Schema\n    /*\n      우리의 일반 JavaScript 인수 객체를 형식화된 객체로 변환하여 유효성을 적용합니다.\n      이 작업을 수행해야 하는 이유는, 네트워크 요청에서 역직렬화된 전송 온 post body 객체에는 어떤 유형 정보도 포함되어 있지 않기 때문입니다. \n    */\n    // getClassSchema(bodyDto) ==> 클래스와 연결된 Joi 유효성 스키마를 가져오는 joi-class-decorators의 함수입니다.\n    const bodyInput = plainToInstance(bodyDto, value); // 일반 Dto 객체를 인스턴스로 변환하여 수동으로 변환합니다\n    const bodySchema = getClassSchema(bodyDto); // Dto에서 Joi 스키마 가져오기\n    // 클래스 인스턴스를 Joi 스키마에 대해 유효성 검사합니다. 유효성 검사가 실패하면 error에 유효성 오류가 포함됩니다.\n    const error = bodySchema.validate(bodyInput).error;  \n    if (error) {\n      throw new BadRequestException(`유효성 검사 실패: ${error.details.map((err) => err.message).join('</span>, <span class=\"hljs-string\">')}.`);  \n    }\n    return value\n  }\n}\ninterface ArgumentMetadata {\n  type: '</span>body<span class=\"hljs-string\">' | '</span>query<span class=\"hljs-string\">' | '</span>param<span class=\"hljs-string\">' | '</span>custom<span class=\"hljs-string\">';\n  metatype?: Type&#x3C;unknown>;\n  data?: string;\n}\n</span></code></pre>\n<h2>4. Param 및 Query Params에 대한 Joi 유효성 검사.</h2>\n<ul>\n<li><code>/testParams/:category’</code> 경로를 만들고, GET 방식으로 작성합니다. category라는 하나의 param을 받고, 두 개의 Query Params인 limit와 page를 받습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Get</span>(’/testParams/:category’) \n@<span class=\"hljs-title class_\">HttpCode</span>(<span class=\"hljs-title class_\">HttpStatus</span>.<span class=\"hljs-property\">OK</span>) \n@<span class=\"hljs-title class_\">UsePipes</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ValidationPipe</span>()) \n<span class=\"hljs-title function_\">testJoiValidationParam</span>(<span class=\"hljs-params\"> \n@Param() category: validationParamDto, \n@Query() limitAndPageSize: validationQueryParamDto, \n@Res() res: Response \n</span>) { \n   res.<span class=\"hljs-title function_\">json</span>({ category, limitAndPageSize }); \n}\n</code></pre>\n<ul>\n<li>이러한 매개변수를 위해 두 개의 DTO를 생성하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">JoiSchemaOptions</span>({\n    <span class=\"hljs-attr\">allowUnknown</span>: <span class=\"hljs-literal\">false</span>\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">validationParamDto</span> {\n     @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(<span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">valid</span>(<span class=\"hljs-string\">'Fashions'</span>, <span class=\"hljs-string\">'Electronics'</span>, <span class=\"hljs-string\">'MobilesPhones'</span>, <span class=\"hljs-string\">'Perfumes'</span>).required())\n     <span class=\"hljs-attr\">category</span>: string; \n}\n\n@<span class=\"hljs-title class_\">JoiSchemaOptions</span>({\n    <span class=\"hljs-attr\">allowUnknown</span>: <span class=\"hljs-literal\">false</span>\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">validationQueryParamDto</span> {\n\n    @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(<span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">number</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-number\">100</span>).<span class=\"hljs-title function_\">message</span>(<span class=\"hljs-string\">'잘못된 제한입니다'</span>))\n    <span class=\"hljs-attr\">limit</span>: string;\n\n    @<span class=\"hljs-title class_\">Expose</span>() @<span class=\"hljs-title class_\">JoiSchema</span>(<span class=\"hljs-title class_\">Joi</span>.<span class=\"hljs-title function_\">number</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-number\">100</span>).<span class=\"hljs-title function_\">message</span>(<span class=\"hljs-string\">'잘못된 페이지 크기입니다'</span>))\n    <span class=\"hljs-attr\">page</span>: string;\n}\n</code></pre>\n<p>GitHub에서 NestJS 샘플 앱을 탐색하세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}