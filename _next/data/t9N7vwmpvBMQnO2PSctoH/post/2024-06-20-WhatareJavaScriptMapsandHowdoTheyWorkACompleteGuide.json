{"pageProps":{"post":{"title":"자바스크립트 맵이 무엇이며 어떻게 작동하는지 완벽한 가이드","description":"","date":"2024-06-20 02:37","slug":"2024-06-20-WhatareJavaScriptMapsandHowdoTheyWorkACompleteGuide","content":"\n\n![JavaScript Maps](/assets/img/2024-06-20-WhatareJavaScriptMapsandHowdoTheyWorkACompleteGuide_0.png)\n\n안녕하세요! 아마도 JavaScript 객체에 익숙하실 것입니다. 그런데 JavaScript에서 데이터 세트를 만드는 또 다른 방법인 'Maps'에 대해 알고 계셨나요? 지금은 JavaScript의 일반 객체를 사용하고 계실 수도 있는데, 문제 해결에 더 나은 해결책이 될 수 있는 맵(map)을 사용해볼까요?\n\nJavaScript 맵은 객체와 몇 가지 주요 면에서 다릅니다. typeof new Map()을 호출하면 object가 반환되지만, 이것에 속지 마세요! 객체와 맵 사이에 주요한 차이점들을 알아보겠습니다:\n\n- 객체와 달리 기본적으로 어떠한 키도 포함하지 않습니다. 객체는 프로토타입 객체를 포함하고 있습니다.\n- 맵은 삽입된 순서대로 정렬되는 것이 보장됩니다. 객체도 요즘은 이와 같이 동작하지만, 같은 보장을 제공하지는 않습니다.\n- 맵의 키는 함수나 객체를 포함하여 모든 것이 될 수 있습니다. 반면 JavaScript에서는 문자열이나 심볼이어야 합니다.\n- 데이터의 빠른 또는 빈번한 추가 또는 삭제 작업을 필요로 하는 작업에서 객체보다 더 나은 성능을 보여줍니다.\n- 객체와 달리 맵은 기본적으로 iterable(반복 가능)합니다.\n\n더 궁금한 점이 있으시면 언제든지 물어보세요!\n\n<div class=\"content-ad\"></div>\n\n지도의 많은 혜택을 고려한다면, 작동 방식을 살펴보는 게 좋겠죠.\n\n# JavaScript Maps 작동 기본\n\nJavaScript에서의 모든 지도는 new Map() 생성자를 사용하여 초기화됩니다. 예를 들어, myFirstMap이라는 지도를 생성해 봅시다:\n\n```js\nlet myFirstMap = new Map();\n```\n\n<div class=\"content-ad\"></div>\n\n차이점은 맵에서 키를 설정, 가져오거나 삭제하려면 Map과 함께 제공되는 특정 메서드를 사용해야 한다는 것입니다. 따라서 firstKey라는 키로 someValue의 새 값을 설정하려면 다음 메서드를 실행할 수 있습니다:\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set('firstKey', 'someValue');\n```\n\n# JavaScript Map에서 항목 삭제\n\nJavaScript 맵에서 키를 삭제하려면 delete() 메서드를 호출해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set('firstKey', 'someValue');\nmyFirstMap.delete('firstKey');\n```\n\n또한 clear()를 사용하여 전체 맵을 삭제하고 내용을 비울 수도 있습니다:\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set('firstKey', 'someValue');\nmyFirstMap.clear();\nconsole.log(myFirstMap); // Map(0) 반환\n```\n\n# JavaScript Map에서 키 가져오기\n\n\n<div class=\"content-ad\"></div>\n\n다른 방법들과 비슷하게, firstKey의 값을 얻으려면 get()을 사용해야 합니다:\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set('firstKey', 'someValue');\nmyFirstMap.get('firstKey') // 'someValue'\n```\n\n# JavaScript Map에서 키가 존재하는지 확인하기\n\nJavaScript Maps에는 특정 키가 있는지 확인하려면 has() 메서드를 사용할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set('firstKey', 'someValue');\nmyFirstMap.has('firstKey') // true\n```\n\n# 주의: 일반 객체 속성을 Map과 함께 사용하지 마세요\n\n자바스크립트에는 많은 특이성이 있고, Map도 예외는 아닙니다. 놀랍게도, Map은 객체 표기법도 지원할 수 있습니다. 예를 들어, 다음과 같이 동작하는 것처럼 보입니다:\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap['firstKey'] = 'someValue';\nconsole.log(myFirstMap); // Map(0) { firstKey: 'someValue' }\n```\n\n<div class=\"content-ad\"></div>\n\n그러나, 이렇게 하면 안 돼요! 이것은 맵 자체에 새 항목을 만드는 것이 아니라 단순히 객체를 만드는 것이에요. 그러면 JavaScript 맵의 모든 이점을 잃게 되요.\n\n# JavaScript 맵의 크기를 알려주는 방법\n\n맵에 있는 키의 개수를 찾는 것은 객체보다 맵이 조금 더 사용하기 쉬운 경우 중 하나에요. 이를 위해 size() 메서드를 사용할 수 있어요. 이 메서드는 키의 개수를 반환해요:\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set('firstKey', 'someValue');\nmyFirstMap.size // 1\n```\n\n<div class=\"content-ad\"></div>\n\n객체의 크기를 알아내기 위해 일반적으로 Object.keys()와 length를 혼합하여 사용합니다:\n\n```js\nlet myObj = { \"name\" : \"John\" };\nlet sizeOfObj = Object.keys(myObj).length; // 1\n```\n\n# 문자열이 아닌 키로 Map 사용하기\n\n제가 언급했듯이, JavaScript Maps는 함수와 객체와 같은 비전통적인 키를 허용합니다. 반면 객체는 문자열과 심볼만 허용합니다. 예를 들어, Map에서는 다음과 같이 유효합니다:\n\n<div class=\"content-ad\"></div>\n\n맵의 키는 값이 아닌 참조 값에 기반합니다. 즉, 다음과 같이 작동합니다.\n\n```js\nlet myFirstMap = new Map();\nlet myFunction = function() { return \"someReturn\"; }\nmyFirstMap.set(myFunction, \"value\");\nmyFirstMap.get(myFunction); // \"someReturn\" 반환\n```\n\n아래는 작동하지 않습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nlet myFirstMap = new Map();\nlet myFunction = function() { return \"someReturn\"; }\nmyFirstMap.set(myFunction, \"value\");\nmyFirstMap.get(function() { return \"someReturn\"; }); // 결과는 정의되지 않습니다\nmyFirstMap.get('someReturn'); // 결과는 정의되지 않습니다\n```\n\n그 이유는 function() { return \"someReturn\"; }와 myFunction이 값으로는 같지만 시스템 메모리에 저장된 위치가 다르기 때문입니다. 그래서 완전히 동등하지는 않습니다. 비슷하게, 맵은 반환 값에 대해 작동하지 않으므로 myFirstMap.get('someReturn') 또한 정의되지 않은 값을 반환합니다.\n\n객체에 대해서도 같은 예제가 유사한 결과를 가져옵니다:\n\n```js\nlet myFirstMap = new Map();\nlet myObject = { \"someKey\" : \"someValue\" }\nmyFirstMap.set(myObject, \"value\");\nmyFirstMap.get({ \"someKey\" : \"someValue\" }); // 결과는 정의되지 않습니다\nmyFirstMap.get(myObject); // 결과는 'value'를 반환합니다\n```\n\n<div class=\"content-ad\"></div>\n\n# JavaScript Maps 병합하기\n\n여러 맵을 하나로 병합하려면, 객체를 병합하는 방식과 마찬가지로 스프레드 구문을 사용하여 병합할 수 있습니다. 예를 들어, 여기서는 spread 구문을 사용하여 myFirstMap과 mySecondMap을 myNewMap으로 병합합니다:\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set(\"some\", \"value\");\nlet mySecondMap = new Map();\nmySecondMap.set(\"someOther\", \"value\");\nlet myNewMap = new Map([...myFirstMap, ...mySecondMap]);\nconsole.log(myNewMap);\n// Map(2) { some: \"value\", someOther: \"value\" }\n```\n\n# 맵(Map)에서 반복하기\n\n<div class=\"content-ad\"></div>\n\n맵은 기본적으로 Iterable 합니다. 객체를 반복하려면 보통 Object.keys와 같은 함수를 사용해야 합니다. 결국, 우리는 다음과 같이 모든 맵에서 forEach를 사용할 수 있습니다:\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set(\"some\", \"value\");\nmyFirstMap.set(\"someOther\", \"value\");\nmyFirstMap.forEach(function(value, key, map) {\n    // value -> 맵에서 키의 값\n    // key -> 맵 안의 항목의 키\n    // map -> 전체 맵\n    console.log(value, key, map);\n})\n```\n\n# JavaScript Map에서 for를 사용한 반복\n\n또한 for(let ... of )을 사용하여 맵을 반복할 수도 있습니다! 이렇게 하면 각 항목이 키와 값의 배열로 반환됩니다. 예를 들어:\n\n<div class=\"content-ad\"></div>\n\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set(\"some\", \"value\");\nfor(let x of myFirstMap) {\n    // Returns [ 'some', 'value' ]\n    console.log(x);\n}\n```\n\n# JavaScript Map에서 값 또는 키를 순회하기\n\nJavaScript에서 값 또는 키를 순회하는 또 다른 멋진 방법은 values() 또는 entries() 메서드를 사용하는 것입니다. 이들 메서드는 각각 map의 값과 항목에 대한 새로운 반복자를 반환합니다. 이는 생성기 함수에서와 마찬가지로 next() 함수를 사용하여 다음 키 또는 값을 액세스할 수 있다는 것을 의미합니다.\n\n예를 들어, entries()가 어떻게 작동하는지 살펴보겠습니다:\n\n\n\n<div class=\"content-ad\"></div>\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set(\"some\", \"value\");\nmyFirstMap.set(\"someOther\", \"value\");\nmyFirstMap.set(\"aFinal\", \"value\");\nlet allKeys = myFirstMap.entries();\nconsole.log(allKeys); // MapIterator {} 객체를 반환합니다\nconsole.log(allKeys.next()); // { value: [ 'some', 'value' ], done: false }를 반환합니다\nconsole.log(allKeys.next().value); // [ 'some', 'value' ]를 반환합니다\n```\n\nallKeys.next()에서 반환된 것은 객체입니다. 이 객체 안의 값은 [ `some`, `value` ] 입니다 - 맵의 첫 번째 항목을 나타내는 배열입니다. 계속해서 next()를 실행하여 맵의 다음 항목들을 얻을 수 있습니다. 정말 멋집니다! 값으로만 이 작업을 다시 할 수도 있습니다.\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set(\"some\", \"value\");\nmyFirstMap.set(\"someOther\", \"value\");\nmyFirstMap.set(\"aFinal\", \"value\");\nlet allValues = myFirstMap.values();\nconsole.log(allValues); // MapIterator {} 객체를 반환합니다\nconsole.log(allValues.next()); // { value: 'value', done: false }를 반환합니다\nconsole.log(allValues.next().value); // 'value'를 반환합니다\n```\n\n이러한 이터레이터들은 특정 상황에서 유용하며 맵에 있는 모든 데이터를 반복하는 멋진 방법이 될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 자바스크립트에서 맵의 직렬화\n\n맵의 한 가지 단점은 JSON.parse() 및 JSON.stringify로 쉽게 직렬화할 수 없다는 점입니다. 이를 시도하면 비어 있는 객체가 반환되는데, 이는 맵의 객체가 항목으로만 채워졌을 때 비어 있기 때문에 어느 정도 이해됩니다:\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set(\"some\", \"value\");\nmyFirstMap.set(\"someOther\", \"value\");\nmyFirstMap.set(\"aFinal\", \"value\");\n// Returns {}\nconsole.log(JSON.stringify(myFirstMap));\n```\n\n맵을 직렬화하는 유일한 현실적인 방법은 객체나 배열로 변환한 후에 직렬화하는 것이며, 이를 위해 맵을 사용한다면 이 작업을 수행해주는 별도의 도우미 함수를 유지해야 합니다. 예를 들어, Array.from()을 사용하여 우리의 맵을 배열로 변환한 다음 JSON.stringify()를 사용하여 직렬화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set(\"some\", \"value\");\nmyFirstMap.set(\"someOther\", \"value\");\nmyFirstMap.set(\"aFinal\", \"value\");\nlet arrayMap = Array.from(myFirstMap);\n// Returns [[\"some\",\"value\"],[\"someOther\",\"value\"],[\"aFinal\",\"value\"]]\nconsole.log(JSON.stringify(arrayMap));\n```\n\n그런 다음, 다시 Map으로 변환하려면 JSON.parse()를 사용하여 new Map()과 함께 사용해야합니다:\n\n```js\nlet myFirstMap = new Map();\nmyFirstMap.set(\"some\", \"value\");\nmyFirstMap.set(\"someOther\", \"value\");\nmyFirstMap.set(\"aFinal\", \"value\");\n// Map을 배열로 변환\nlet arrayMap = Array.from(myFirstMap);\n// Map의 JSON 문자열 버전:\nlet stringifiedMap = JSON.stringify(arrayMap);\n// 다시 Map으로 변환하려면 new Map(JSON.parse...)를 사용하세요:\nlet getMap = new Map(JSON.parse(stringifiedMap));\n// Map(3) {'some' => 'value', 'someOther' => 'value', 'aFinal' => 'value'}를 반환\nconsole.log(getMap);\n```\n\n# 결론\n\n\n<div class=\"content-ad\"></div>\n\n자바스크립트 Maps는 객체의 모든 유연성이 필요하지 않을 때 데이터를 저장하는 훌륭한 방법입니다. 데이터의 순서가 굉장히 중요한 상황에서는 객체보다 성능이 우수합니다. 아이템을 자주 추가하거나 제거해야 하는 상황에서도 객체보다 효율적입니다. 이 안내서에서는 Maps에 대해 알아야 할 모든 것을 다뤘지만, 자바스크립트에 대해 더 알고 싶다면 여기를 클릭해주세요.\n\n이 내용이 유익했기를 바라며, 즐거운 하루 보내세요.\n\nPlainEnglish.io에서 더 많은 콘텐츠를 만나보세요. 무료 주간 뉴스레터 구독 신청하세요. 트위터, 링크드인, 유튜브, 디스코드에서 팔로우하세요. 성장 해킹에 관심이 있다면 Circuit을 확인해보세요.","ogImage":{"url":"/assets/img/2024-06-20-WhatareJavaScriptMapsandHowdoTheyWorkACompleteGuide_0.png"},"coverImage":"/assets/img/2024-06-20-WhatareJavaScriptMapsandHowdoTheyWorkACompleteGuide_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-20-WhatareJavaScriptMapsandHowdoTheyWorkACompleteGuide_0.png\" alt=\"JavaScript Maps\"></p>\n<p>안녕하세요! 아마도 JavaScript 객체에 익숙하실 것입니다. 그런데 JavaScript에서 데이터 세트를 만드는 또 다른 방법인 'Maps'에 대해 알고 계셨나요? 지금은 JavaScript의 일반 객체를 사용하고 계실 수도 있는데, 문제 해결에 더 나은 해결책이 될 수 있는 맵(map)을 사용해볼까요?</p>\n<p>JavaScript 맵은 객체와 몇 가지 주요 면에서 다릅니다. typeof new Map()을 호출하면 object가 반환되지만, 이것에 속지 마세요! 객체와 맵 사이에 주요한 차이점들을 알아보겠습니다:</p>\n<ul>\n<li>객체와 달리 기본적으로 어떠한 키도 포함하지 않습니다. 객체는 프로토타입 객체를 포함하고 있습니다.</li>\n<li>맵은 삽입된 순서대로 정렬되는 것이 보장됩니다. 객체도 요즘은 이와 같이 동작하지만, 같은 보장을 제공하지는 않습니다.</li>\n<li>맵의 키는 함수나 객체를 포함하여 모든 것이 될 수 있습니다. 반면 JavaScript에서는 문자열이나 심볼이어야 합니다.</li>\n<li>데이터의 빠른 또는 빈번한 추가 또는 삭제 작업을 필요로 하는 작업에서 객체보다 더 나은 성능을 보여줍니다.</li>\n<li>객체와 달리 맵은 기본적으로 iterable(반복 가능)합니다.</li>\n</ul>\n<p>더 궁금한 점이 있으시면 언제든지 물어보세요!</p>\n<p>지도의 많은 혜택을 고려한다면, 작동 방식을 살펴보는 게 좋겠죠.</p>\n<h1>JavaScript Maps 작동 기본</h1>\n<p>JavaScript에서의 모든 지도는 new Map() 생성자를 사용하여 초기화됩니다. 예를 들어, myFirstMap이라는 지도를 생성해 봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n</code></pre>\n<p>차이점은 맵에서 키를 설정, 가져오거나 삭제하려면 Map과 함께 제공되는 특정 메서드를 사용해야 한다는 것입니다. 따라서 firstKey라는 키로 someValue의 새 값을 설정하려면 다음 메서드를 실행할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'firstKey'</span>, <span class=\"hljs-string\">'someValue'</span>);\n</code></pre>\n<h1>JavaScript Map에서 항목 삭제</h1>\n<p>JavaScript 맵에서 키를 삭제하려면 delete() 메서드를 호출해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'firstKey'</span>, <span class=\"hljs-string\">'someValue'</span>);\nmyFirstMap.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">'firstKey'</span>);\n</code></pre>\n<p>또한 clear()를 사용하여 전체 맵을 삭제하고 내용을 비울 수도 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'firstKey'</span>, <span class=\"hljs-string\">'someValue'</span>);\nmyFirstMap.<span class=\"hljs-title function_\">clear</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myFirstMap); <span class=\"hljs-comment\">// Map(0) 반환</span>\n</code></pre>\n<h1>JavaScript Map에서 키 가져오기</h1>\n<p>다른 방법들과 비슷하게, firstKey의 값을 얻으려면 get()을 사용해야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'firstKey'</span>, <span class=\"hljs-string\">'someValue'</span>);\nmyFirstMap.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'firstKey'</span>) <span class=\"hljs-comment\">// 'someValue'</span>\n</code></pre>\n<h1>JavaScript Map에서 키가 존재하는지 확인하기</h1>\n<p>JavaScript Maps에는 특정 키가 있는지 확인하려면 has() 메서드를 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'firstKey'</span>, <span class=\"hljs-string\">'someValue'</span>);\nmyFirstMap.<span class=\"hljs-title function_\">has</span>(<span class=\"hljs-string\">'firstKey'</span>) <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h1>주의: 일반 객체 속성을 Map과 함께 사용하지 마세요</h1>\n<p>자바스크립트에는 많은 특이성이 있고, Map도 예외는 아닙니다. 놀랍게도, Map은 객체 표기법도 지원할 수 있습니다. 예를 들어, 다음과 같이 동작하는 것처럼 보입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap[<span class=\"hljs-string\">'firstKey'</span>] = <span class=\"hljs-string\">'someValue'</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myFirstMap); <span class=\"hljs-comment\">// Map(0) { firstKey: 'someValue' }</span>\n</code></pre>\n<p>그러나, 이렇게 하면 안 돼요! 이것은 맵 자체에 새 항목을 만드는 것이 아니라 단순히 객체를 만드는 것이에요. 그러면 JavaScript 맵의 모든 이점을 잃게 되요.</p>\n<h1>JavaScript 맵의 크기를 알려주는 방법</h1>\n<p>맵에 있는 키의 개수를 찾는 것은 객체보다 맵이 조금 더 사용하기 쉬운 경우 중 하나에요. 이를 위해 size() 메서드를 사용할 수 있어요. 이 메서드는 키의 개수를 반환해요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'firstKey'</span>, <span class=\"hljs-string\">'someValue'</span>);\nmyFirstMap.<span class=\"hljs-property\">size</span> <span class=\"hljs-comment\">// 1</span>\n</code></pre>\n<p>객체의 크기를 알아내기 위해 일반적으로 Object.keys()와 length를 혼합하여 사용합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myObj = { <span class=\"hljs-string\">\"name\"</span> : <span class=\"hljs-string\">\"John\"</span> };\n<span class=\"hljs-keyword\">let</span> sizeOfObj = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(myObj).<span class=\"hljs-property\">length</span>; <span class=\"hljs-comment\">// 1</span>\n</code></pre>\n<h1>문자열이 아닌 키로 Map 사용하기</h1>\n<p>제가 언급했듯이, JavaScript Maps는 함수와 객체와 같은 비전통적인 키를 허용합니다. 반면 객체는 문자열과 심볼만 허용합니다. 예를 들어, Map에서는 다음과 같이 유효합니다:</p>\n<p>맵의 키는 값이 아닌 참조 값에 기반합니다. 즉, 다음과 같이 작동합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n<span class=\"hljs-keyword\">let</span> myFunction = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"someReturn\"</span>; }\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(myFunction, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">get</span>(myFunction); <span class=\"hljs-comment\">// \"someReturn\" 반환</span>\n</code></pre>\n<p>아래는 작동하지 않습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n<span class=\"hljs-keyword\">let</span> myFunction = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"someReturn\"</span>; }\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(myFunction, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"someReturn\"</span>; }); <span class=\"hljs-comment\">// 결과는 정의되지 않습니다</span>\nmyFirstMap.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'someReturn'</span>); <span class=\"hljs-comment\">// 결과는 정의되지 않습니다</span>\n</code></pre>\n<p>그 이유는 function() { return \"someReturn\"; }와 myFunction이 값으로는 같지만 시스템 메모리에 저장된 위치가 다르기 때문입니다. 그래서 완전히 동등하지는 않습니다. 비슷하게, 맵은 반환 값에 대해 작동하지 않으므로 myFirstMap.get('someReturn') 또한 정의되지 않은 값을 반환합니다.</p>\n<p>객체에 대해서도 같은 예제가 유사한 결과를 가져옵니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n<span class=\"hljs-keyword\">let</span> myObject = { <span class=\"hljs-string\">\"someKey\"</span> : <span class=\"hljs-string\">\"someValue\"</span> }\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(myObject, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">get</span>({ <span class=\"hljs-string\">\"someKey\"</span> : <span class=\"hljs-string\">\"someValue\"</span> }); <span class=\"hljs-comment\">// 결과는 정의되지 않습니다</span>\nmyFirstMap.<span class=\"hljs-title function_\">get</span>(myObject); <span class=\"hljs-comment\">// 결과는 'value'를 반환합니다</span>\n</code></pre>\n<h1>JavaScript Maps 병합하기</h1>\n<p>여러 맵을 하나로 병합하려면, 객체를 병합하는 방식과 마찬가지로 스프레드 구문을 사용하여 병합할 수 있습니다. 예를 들어, 여기서는 spread 구문을 사용하여 myFirstMap과 mySecondMap을 myNewMap으로 병합합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"some\"</span>, <span class=\"hljs-string\">\"value\"</span>);\n<span class=\"hljs-keyword\">let</span> mySecondMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmySecondMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"someOther\"</span>, <span class=\"hljs-string\">\"value\"</span>);\n<span class=\"hljs-keyword\">let</span> myNewMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([...myFirstMap, ...mySecondMap]);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myNewMap);\n<span class=\"hljs-comment\">// Map(2) { some: \"value\", someOther: \"value\" }</span>\n</code></pre>\n<h1>맵(Map)에서 반복하기</h1>\n<p>맵은 기본적으로 Iterable 합니다. 객체를 반복하려면 보통 Object.keys와 같은 함수를 사용해야 합니다. 결국, 우리는 다음과 같이 모든 맵에서 forEach를 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"some\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"someOther\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value, key, map</span>) {\n    <span class=\"hljs-comment\">// value -> 맵에서 키의 값</span>\n    <span class=\"hljs-comment\">// key -> 맵 안의 항목의 키</span>\n    <span class=\"hljs-comment\">// map -> 전체 맵</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value, key, map);\n})\n</code></pre>\n<h1>JavaScript Map에서 for를 사용한 반복</h1>\n<p>또한 for(let ... of )을 사용하여 맵을 반복할 수도 있습니다! 이렇게 하면 각 항목이 키와 값의 배열로 반환됩니다. 예를 들어:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"some\"</span>, <span class=\"hljs-string\">\"value\"</span>);\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> x <span class=\"hljs-keyword\">of</span> myFirstMap) {\n    <span class=\"hljs-comment\">// Returns [ 'some', 'value' ]</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n}\n</code></pre>\n<h1>JavaScript Map에서 값 또는 키를 순회하기</h1>\n<p>JavaScript에서 값 또는 키를 순회하는 또 다른 멋진 방법은 values() 또는 entries() 메서드를 사용하는 것입니다. 이들 메서드는 각각 map의 값과 항목에 대한 새로운 반복자를 반환합니다. 이는 생성기 함수에서와 마찬가지로 next() 함수를 사용하여 다음 키 또는 값을 액세스할 수 있다는 것을 의미합니다.</p>\n<p>예를 들어, entries()가 어떻게 작동하는지 살펴보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"some\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"someOther\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"aFinal\"</span>, <span class=\"hljs-string\">\"value\"</span>);\n<span class=\"hljs-keyword\">let</span> allKeys = myFirstMap.<span class=\"hljs-title function_\">entries</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allKeys); <span class=\"hljs-comment\">// MapIterator {} 객체를 반환합니다</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allKeys.<span class=\"hljs-title function_\">next</span>()); <span class=\"hljs-comment\">// { value: [ 'some', 'value' ], done: false }를 반환합니다</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allKeys.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>); <span class=\"hljs-comment\">// [ 'some', 'value' ]를 반환합니다</span>\n</code></pre>\n<p>allKeys.next()에서 반환된 것은 객체입니다. 이 객체 안의 값은 [ <code>some</code>, <code>value</code> ] 입니다 - 맵의 첫 번째 항목을 나타내는 배열입니다. 계속해서 next()를 실행하여 맵의 다음 항목들을 얻을 수 있습니다. 정말 멋집니다! 값으로만 이 작업을 다시 할 수도 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"some\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"someOther\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"aFinal\"</span>, <span class=\"hljs-string\">\"value\"</span>);\n<span class=\"hljs-keyword\">let</span> allValues = myFirstMap.<span class=\"hljs-title function_\">values</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allValues); <span class=\"hljs-comment\">// MapIterator {} 객체를 반환합니다</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allValues.<span class=\"hljs-title function_\">next</span>()); <span class=\"hljs-comment\">// { value: 'value', done: false }를 반환합니다</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allValues.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>); <span class=\"hljs-comment\">// 'value'를 반환합니다</span>\n</code></pre>\n<p>이러한 이터레이터들은 특정 상황에서 유용하며 맵에 있는 모든 데이터를 반복하는 멋진 방법이 될 수 있습니다.</p>\n<h1>자바스크립트에서 맵의 직렬화</h1>\n<p>맵의 한 가지 단점은 JSON.parse() 및 JSON.stringify로 쉽게 직렬화할 수 없다는 점입니다. 이를 시도하면 비어 있는 객체가 반환되는데, 이는 맵의 객체가 항목으로만 채워졌을 때 비어 있기 때문에 어느 정도 이해됩니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"some\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"someOther\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"aFinal\"</span>, <span class=\"hljs-string\">\"value\"</span>);\n<span class=\"hljs-comment\">// Returns {}</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(myFirstMap));\n</code></pre>\n<p>맵을 직렬화하는 유일한 현실적인 방법은 객체나 배열로 변환한 후에 직렬화하는 것이며, 이를 위해 맵을 사용한다면 이 작업을 수행해주는 별도의 도우미 함수를 유지해야 합니다. 예를 들어, Array.from()을 사용하여 우리의 맵을 배열로 변환한 다음 JSON.stringify()를 사용하여 직렬화할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"some\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"someOther\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"aFinal\"</span>, <span class=\"hljs-string\">\"value\"</span>);\n<span class=\"hljs-keyword\">let</span> arrayMap = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(myFirstMap);\n<span class=\"hljs-comment\">// Returns [[\"some\",\"value\"],[\"someOther\",\"value\"],[\"aFinal\",\"value\"]]</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(arrayMap));\n</code></pre>\n<p>그런 다음, 다시 Map으로 변환하려면 JSON.parse()를 사용하여 new Map()과 함께 사용해야합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> myFirstMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"some\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"someOther\"</span>, <span class=\"hljs-string\">\"value\"</span>);\nmyFirstMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"aFinal\"</span>, <span class=\"hljs-string\">\"value\"</span>);\n<span class=\"hljs-comment\">// Map을 배열로 변환</span>\n<span class=\"hljs-keyword\">let</span> arrayMap = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(myFirstMap);\n<span class=\"hljs-comment\">// Map의 JSON 문자열 버전:</span>\n<span class=\"hljs-keyword\">let</span> stringifiedMap = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(arrayMap);\n<span class=\"hljs-comment\">// 다시 Map으로 변환하려면 new Map(JSON.parse...)를 사용하세요:</span>\n<span class=\"hljs-keyword\">let</span> getMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(stringifiedMap));\n<span class=\"hljs-comment\">// Map(3) {'some' => 'value', 'someOther' => 'value', 'aFinal' => 'value'}를 반환</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(getMap);\n</code></pre>\n<h1>결론</h1>\n<p>자바스크립트 Maps는 객체의 모든 유연성이 필요하지 않을 때 데이터를 저장하는 훌륭한 방법입니다. 데이터의 순서가 굉장히 중요한 상황에서는 객체보다 성능이 우수합니다. 아이템을 자주 추가하거나 제거해야 하는 상황에서도 객체보다 효율적입니다. 이 안내서에서는 Maps에 대해 알아야 할 모든 것을 다뤘지만, 자바스크립트에 대해 더 알고 싶다면 여기를 클릭해주세요.</p>\n<p>이 내용이 유익했기를 바라며, 즐거운 하루 보내세요.</p>\n<p>PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요. 무료 주간 뉴스레터 구독 신청하세요. 트위터, 링크드인, 유튜브, 디스코드에서 팔로우하세요. 성장 해킹에 관심이 있다면 Circuit을 확인해보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}