{"pageProps":{"post":{"title":"앵귤러에서의 라우팅 가드","description":"","date":"2024-06-20 05:24","slug":"2024-06-20-RouteGuardsinAngular","content":"\n\n웹 애플리케이션에서 보안은 매우 중요합니다. Angular가 애플리케이션 보안을 도울 수 있는 한 가지 방법은 Route Guards를 통해입니다. Route Guards는 사용자가 특정 경로로 이동하거나 이동하는 것을 제어합니다. 페이지를 나갈 때 변경 사항을 저장하라는 프롬프트를 본 적이 있거나 관리자 페이지에 접근할 수 없는 경우에는 Guards를 만난 적이 있을 것입니다.\n\n이 블로그 포스트에서는 다양한 유형의 가드와 Angular 애플리케이션에서 효과적으로 사용하는 방법 및 사용 사례에 대해 논의하겠습니다.\n\n![RouteGuardsinAngular_0](/assets/img/2024-06-20-RouteGuardsinAngular_0.png)\n\n# 가드란 무엇인가?\n\n<div class=\"content-ad\"></div>\n\n공항 안의 보안 검문 철저히 하는 가드를 생각해보세요. 일정한 조건을 기반으로 접근을 허용하거나 거부합니다. Angular에서 가드는 특정 라우트 네비게이션의 단계 전에 실행되는 스크립트입니다. 네비게이션을 진행할지 또는 재지정할지를 결정합니다. Angular의 주요 가드 유형은 다음과 같습니다:\n\n- CanActivate\n- CanActivateChild\n- CanDeactivate\n- Resolve\n- CanLoad\n\n# CanActivate\n\nCanActivate 가드는 라우트를 활성화할 수 있는지 확인합니다. 사용자 인증과 같이 특정 조건을 충족해야만 접근할 수 없어야 하는 라우트를 보호하는 데 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n## 사용 사례: 사용자 인증\n\n인증된 사용자만 액세스할 수 있어야 하는 관리자 대시보드가 있다고 상상해보세요. CanActivate 가드는 사용자가 관리자 페이지로 이동하기 전에 로그인되어 있는지 확인할 수 있습니다. 사용자가 인증되지 않은 경우 가드가 로그인 페이지로 리디렉션합니다.\n\n## CanActivate 가드 생성하기\n\nAngular CLI를 사용하여 가드를 만들려면 다음을 실행할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nng generate guard auth\n```\n\n그리고 CanActivate를 구현합니다:\n\n```js\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private router: Router) {}\n\n  canActivate(): boolean {\n    if (/* 여러분의 인증 조건 */) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n```\n\n## 라우트에 CanActivate 추가하기\n\n<div class=\"content-ad\"></div>\n\n가드가 준비되면 보호하려는 경로에 추가하세요:\n\n```js\nimport { AuthGuard } from './auth.guard';\n\nconst routes: Routes = [\n  { path: 'protected', component: ProtectedComponent, canActivate: [AuthGuard] },\n  // ...\n];\n```\n\n# CanActivateChild\n\nCanActivate과 유사하지만 하위 경로에서 작동합니다. 여러 하위 경로를 갖는 기능 모듈에 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n## 사용 사례: 기능 접근 제어\n\n만약 당신의 어플리케이션에 \"프로필 설정\", \"계정 설정\", 그리고 \"개인 정보 설정\"과 같은 다양한 자식 경로를 가진 설정 페이지가 있다면, CanActivateChild 가드를 사용하여 적절한 권한을 가진 사용자만 이러한 자식 경로에 접근할 수 있도록 할 수 있습니다.\n\n```js\nconst childRoutes: Routes = [\n  { path: 'child', component: ChildComponent, canActivateChild: [AuthGuard] },\n  // ...\n];\n```\n\n# CanDeactivate\n\n<div class=\"content-ad\"></div>\n\n이 가드는 컴포넌트에서 이탈할 때 작동합니다. 사용자가 저장되지 않은 변경 사항에 대해 경고하는 데 자주 사용됩니다.\n\n## 사용 사례: 저장되지 않은 변경 사항\n\n프로필 정보를 편집하는 양식 페이지가 있습니다. 사용자가 변경 사항을 가했지만 저장하지 않고 이동하려고 할 때 CanDeactivate 가드는 변경 사항을 저장하거나 저장하지 않고 나가겠다는 확인을 요청할 수 있습니다.\n\n```js\nexport interface CanComponentDeactivate {\n canDeactivate: () => boolean;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 인터페이스를 구현하면 컴포넌트에서 사용할 수 있으며 CanDeactivate 가드에서 이를 사용할 수 있습니다.\n\n# Resolve\n\nResolve 가드는 내비게이션이 완료되기 전에 데이터를 가져옵니다. 이 데이터는 라우트 매개변수를 채우는 데 사용할 수 있습니다.\n\n## 사용 사례: 데이터 미리 로딩\n\n<div class=\"content-ad\"></div>\n\n전자 상거래 애플리케이션에서 제품 상세 페이지가 있습니다. Resolve 가드는 라우트가 활성화되기 전에 제품 세부 정보를 미리 가져올 수 있으므로 사용자가 빈 페이지나 부분적으로 로드된 페이지를 보지 않게 할 수 있습니다.\n\n```js\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataResolver implements Resolve<Data> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Data {\n    // 데이터를 여기서 가져옵니다\n  }\n}\n```\n\n# CanLoad\n\nCanLoad는 모듈을 지연 로드해야 하는지 여부를 확인합니다. 응용프로그램 일부를 다운로드하는 것을 방지하려면 권한이 없는 사용자가 해당 모듈을 다운로드하는 것을 막으려면 중요합니다.\n\n<div class=\"content-ad\"></div>\n\n## 사용 사례: 기능 게이팅\n\n귀하의 애플리케이션에는 프리미엄 기능 모듈이 있습니다. 이 모듈은 프리미엄 사용자만 액세스할 수 있으며 따라서 다운로드도 할 수 있어야 합니다. CanLoad 가드를 사용하여 미인가된 사용자가 이 모듈을 다운로드하지 못하도록하면 대역폭을 절약하고 보안을 강화할 수 있습니다.\n\n```js\nconst routes: Routes = [\n  {\n    path: 'feature',\n    loadChildren: () => import('./feature/feature.module').then(m => m.FeatureModule),\n    canLoad: [AuthGuard]\n  },\n  // ...\n];\n```\n\n# 가드 등록하기\n\n<div class=\"content-ad\"></div>\n\n가드를 사용하려면 Angular 모듈에서 제공해야 합니다.\n\n```js\n@NgModule({\n  providers: [AuthGuard],\n  // ...\n})\nexport class AppModule {}\n```\n\nAngular의 가드는 애플리케이션 내에서 네비게이션을 효과적으로 제어하는 방법을 제공합니다. 다양한 유형의 가드를 사용하여 사용자 인증 확인, 저장되지 않은 변경 사항 알림 및 네비게이션 완료 전 데이터 사전 로드 등 다양한 조건을 처리할 수 있습니다. 개발자로서 가드를 이해하는 것은 Angular 앱의 보안 및 데이터 무결성을 보장하는 데 중요합니다.\n\n읽는 데 즐거웠으면 좋겠습니다.\n\n<div class=\"content-ad\"></div>\n\n친하게 연락해 주세요! 트위터(@urstruly_raghu)나 링크드인(https://www.linkedin.com/in/raghuvardhan-karanam/)에서 연락 주세요.","ogImage":{"url":"/assets/img/2024-06-20-RouteGuardsinAngular_0.png"},"coverImage":"/assets/img/2024-06-20-RouteGuardsinAngular_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>웹 애플리케이션에서 보안은 매우 중요합니다. Angular가 애플리케이션 보안을 도울 수 있는 한 가지 방법은 Route Guards를 통해입니다. Route Guards는 사용자가 특정 경로로 이동하거나 이동하는 것을 제어합니다. 페이지를 나갈 때 변경 사항을 저장하라는 프롬프트를 본 적이 있거나 관리자 페이지에 접근할 수 없는 경우에는 Guards를 만난 적이 있을 것입니다.</p>\n<p>이 블로그 포스트에서는 다양한 유형의 가드와 Angular 애플리케이션에서 효과적으로 사용하는 방법 및 사용 사례에 대해 논의하겠습니다.</p>\n<p><img src=\"/assets/img/2024-06-20-RouteGuardsinAngular_0.png\" alt=\"RouteGuardsinAngular_0\"></p>\n<h1>가드란 무엇인가?</h1>\n<p>공항 안의 보안 검문 철저히 하는 가드를 생각해보세요. 일정한 조건을 기반으로 접근을 허용하거나 거부합니다. Angular에서 가드는 특정 라우트 네비게이션의 단계 전에 실행되는 스크립트입니다. 네비게이션을 진행할지 또는 재지정할지를 결정합니다. Angular의 주요 가드 유형은 다음과 같습니다:</p>\n<ul>\n<li>CanActivate</li>\n<li>CanActivateChild</li>\n<li>CanDeactivate</li>\n<li>Resolve</li>\n<li>CanLoad</li>\n</ul>\n<h1>CanActivate</h1>\n<p>CanActivate 가드는 라우트를 활성화할 수 있는지 확인합니다. 사용자 인증과 같이 특정 조건을 충족해야만 접근할 수 없어야 하는 라우트를 보호하는 데 유용합니다.</p>\n<h2>사용 사례: 사용자 인증</h2>\n<p>인증된 사용자만 액세스할 수 있어야 하는 관리자 대시보드가 있다고 상상해보세요. CanActivate 가드는 사용자가 관리자 페이지로 이동하기 전에 로그인되어 있는지 확인할 수 있습니다. 사용자가 인증되지 않은 경우 가드가 로그인 페이지로 리디렉션합니다.</p>\n<h2>CanActivate 가드 생성하기</h2>\n<p>Angular CLI를 사용하여 가드를 만들려면 다음을 실행할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">ng generate guard auth\n</code></pre>\n<p>그리고 CanActivate를 구현합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CanActivate</span>, <span class=\"hljs-title class_\">Router</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/router'</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthGuard</span> implements <span class=\"hljs-title class_\">CanActivate</span> {\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private router: Router</span>) {}\n\n  <span class=\"hljs-title function_\">canActivate</span>(): boolean {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-comment\">/* 여러분의 인증 조건 */</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">router</span>.<span class=\"hljs-title function_\">navigate</span>([<span class=\"hljs-string\">'/login'</span>]);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n  }\n}\n</code></pre>\n<h2>라우트에 CanActivate 추가하기</h2>\n<p>가드가 준비되면 보호하려는 경로에 추가하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthGuard</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auth.guard'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">routes</span>: <span class=\"hljs-title class_\">Routes</span> = [\n  { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'protected'</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">ProtectedComponent</span>, <span class=\"hljs-attr\">canActivate</span>: [<span class=\"hljs-title class_\">AuthGuard</span>] },\n  <span class=\"hljs-comment\">// ...</span>\n];\n</code></pre>\n<h1>CanActivateChild</h1>\n<p>CanActivate과 유사하지만 하위 경로에서 작동합니다. 여러 하위 경로를 갖는 기능 모듈에 유용합니다.</p>\n<h2>사용 사례: 기능 접근 제어</h2>\n<p>만약 당신의 어플리케이션에 \"프로필 설정\", \"계정 설정\", 그리고 \"개인 정보 설정\"과 같은 다양한 자식 경로를 가진 설정 페이지가 있다면, CanActivateChild 가드를 사용하여 적절한 권한을 가진 사용자만 이러한 자식 경로에 접근할 수 있도록 할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">childRoutes</span>: <span class=\"hljs-title class_\">Routes</span> = [\n  { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'child'</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">ChildComponent</span>, <span class=\"hljs-attr\">canActivateChild</span>: [<span class=\"hljs-title class_\">AuthGuard</span>] },\n  <span class=\"hljs-comment\">// ...</span>\n];\n</code></pre>\n<h1>CanDeactivate</h1>\n<p>이 가드는 컴포넌트에서 이탈할 때 작동합니다. 사용자가 저장되지 않은 변경 사항에 대해 경고하는 데 자주 사용됩니다.</p>\n<h2>사용 사례: 저장되지 않은 변경 사항</h2>\n<p>프로필 정보를 편집하는 양식 페이지가 있습니다. 사용자가 변경 사항을 가했지만 저장하지 않고 이동하려고 할 때 CanDeactivate 가드는 변경 사항을 저장하거나 저장하지 않고 나가겠다는 확인을 요청할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> interface <span class=\"hljs-title class_\">CanComponentDeactivate</span> {\n <span class=\"hljs-attr\">canDeactivate</span>: <span class=\"hljs-function\">() =></span> boolean;\n}\n</code></pre>\n<p>이 인터페이스를 구현하면 컴포넌트에서 사용할 수 있으며 CanDeactivate 가드에서 이를 사용할 수 있습니다.</p>\n<h1>Resolve</h1>\n<p>Resolve 가드는 내비게이션이 완료되기 전에 데이터를 가져옵니다. 이 데이터는 라우트 매개변수를 채우는 데 사용할 수 있습니다.</p>\n<h2>사용 사례: 데이터 미리 로딩</h2>\n<p>전자 상거래 애플리케이션에서 제품 상세 페이지가 있습니다. Resolve 가드는 라우트가 활성화되기 전에 제품 세부 정보를 미리 가져올 수 있으므로 사용자가 빈 페이지나 부분적으로 로드된 페이지를 보지 않게 할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataResolver</span> implements <span class=\"hljs-title class_\">Resolve</span>&#x3C;<span class=\"hljs-title class_\">Data</span>> {\n  <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-attr\">route</span>: <span class=\"hljs-title class_\">ActivatedRouteSnapshot</span>, <span class=\"hljs-attr\">state</span>: <span class=\"hljs-title class_\">RouterStateSnapshot</span>): <span class=\"hljs-title class_\">Data</span> {\n    <span class=\"hljs-comment\">// 데이터를 여기서 가져옵니다</span>\n  }\n}\n</code></pre>\n<h1>CanLoad</h1>\n<p>CanLoad는 모듈을 지연 로드해야 하는지 여부를 확인합니다. 응용프로그램 일부를 다운로드하는 것을 방지하려면 권한이 없는 사용자가 해당 모듈을 다운로드하는 것을 막으려면 중요합니다.</p>\n<h2>사용 사례: 기능 게이팅</h2>\n<p>귀하의 애플리케이션에는 프리미엄 기능 모듈이 있습니다. 이 모듈은 프리미엄 사용자만 액세스할 수 있으며 따라서 다운로드도 할 수 있어야 합니다. CanLoad 가드를 사용하여 미인가된 사용자가 이 모듈을 다운로드하지 못하도록하면 대역폭을 절약하고 보안을 강화할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">routes</span>: <span class=\"hljs-title class_\">Routes</span> = [\n  {\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'feature'</span>,\n    <span class=\"hljs-attr\">loadChildren</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./feature/feature.module'</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =></span> m.<span class=\"hljs-property\">FeatureModule</span>),\n    <span class=\"hljs-attr\">canLoad</span>: [<span class=\"hljs-title class_\">AuthGuard</span>]\n  },\n  <span class=\"hljs-comment\">// ...</span>\n];\n</code></pre>\n<h1>가드 등록하기</h1>\n<p>가드를 사용하려면 Angular 모듈에서 제공해야 합니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">NgModule</span>({\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">AuthGuard</span>],\n  <span class=\"hljs-comment\">// ...</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<p>Angular의 가드는 애플리케이션 내에서 네비게이션을 효과적으로 제어하는 방법을 제공합니다. 다양한 유형의 가드를 사용하여 사용자 인증 확인, 저장되지 않은 변경 사항 알림 및 네비게이션 완료 전 데이터 사전 로드 등 다양한 조건을 처리할 수 있습니다. 개발자로서 가드를 이해하는 것은 Angular 앱의 보안 및 데이터 무결성을 보장하는 데 중요합니다.</p>\n<p>읽는 데 즐거웠으면 좋겠습니다.</p>\n<p>친하게 연락해 주세요! 트위터(@urstruly_raghu)나 링크드인(<a href=\"https://www.linkedin.com/in/raghuvardhan-karanam/)%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/raghuvardhan-karanam/)에서</a> 연락 주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}