{"pageProps":{"post":{"title":"Angular 애플리케이션과 Net Web API를 Auth0로 안전하게 보호하기","description":"","date":"2024-05-17 03:31","slug":"2024-05-17-SecureanAngularapplicationandNetWebAPIwithAuth0","content":"\n\n<img src=\"/assets/img/2024-05-17-SecureanAngularapplicationandNetWebAPIwithAuth0_0.png\" />\n\n이 튜토리얼에서는 Angular 애플리케이션에 로그인 시스템을 추가하고 .Net Web API를 Auth0로 보호하는 방법을 배워보겠습니다.\n\n먼저 무료 Auth0 계정을 생성하고 설정할 것입니다. 그 후 .Net 7 Web API를 생성하고 보호된 엔드포인트를 설정할 것입니다. 그런 다음 Angular 애플리케이션을 생성하고 JWT 베어러를 사용하여 Web API를 호출할 수 있는 로그인 시스템을 추가할 것입니다.\n\n보안에 대해 잘 모르더라도, Auth0를 사용하면 보안 서비스를 처음부터 만들 필요 없이 응용 프로그램에 인증/권한 부여를 추가할 수 있는 좋은 방법입니다.\n\n<div class=\"content-ad\"></div>\n\n# Auth0\n\n## Auth0 계정 생성\n\nhttps://auth0.com으로 이동하여 무료로 가입하고 계정을 설정하세요.\n\n## Auth0 싱글 페이지 애플리케이션 구성\n\n<div class=\"content-ad\"></div>\n\n왼쪽 메뉴에서 Applications > Applications로 이동하여 Default App을 선택하십시오. 설정 탭으로 이동하여 이름을 변경하십시오. 또한 새 응용 프로그램을 만들 수 있습니다.\n\n설정에서 Angular 앱과 통신할 때 사용할 응용 프로그램 도메인, 클라이언트 ID 및 클라이언트 비밀번호를 확인할 수 있습니다.\n\n앱 속성 아래로 스크롤하면 Application Type을 Single Page Application으로 변경할 수 있습니다.\n\nApplication URIs 섹션에서 Allowed Callback, Logout URLs 및 Allowed Web Origins에 URL http://localhost:4200/을 제공하십시오.\n\n<div class=\"content-ad\"></div>\n\nhttp://localhost:4200/은 우리 Angular 애플리케이션의 로컬 URL이 되겠습니다.\n\n# .Net 7 웹 API를 생성하고 보안 설정하기\n\n## 새 .Net Web API 프로젝트 만들기\n\nVisual Studio를 열고 ASP.NET Core Web API 프로젝트 템플릿에서 새 프로젝트를 만드세요. .Net 6 프레임워크를 선택하세요. 이 튜토리얼에서는 이 템플릿에서 생성된 WeatherForcastController를 사용할 것입니다. 이 컨트롤러에는 사용 예제에서 사용할 HTTP Get 엔드포인트가 포함되어 있습니다.\n\n<div class=\"content-ad\"></div>\n\n프로젝트를 생성한 후 프로그램을 실행하고 https://localhost:7202/weatherforecast (포트 번호가 다를 수 있습니다)으로 JSON 형식의 WeatherForecast 목록이 반환되는지 확인해주세요.\n\n## 교차 도메인 요청 허용\n\n우리의 Angular 애플리케이션에서 모든 HTTP 요청을 허용해야 합니다. Program.cs 또는 Startup.cs 파일을 열어주세요.\n\nbuilder.Services를 services로 바꿔주세요. 그리고 var builder = WebApplication.CreateBuilder(args); 다음에 services 변수를 만들어주세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nvar services = builder.Services;Copy\n```\n\n그 후에, CORS 미들웨어를 추가하세요.\n\n```js\napp.UseCors(\"CorsPolicy\");Copy\n```\n\nCORS 정책을 등록하고 http://localhost:4200 출처를 허용하세요.\n\n<div class=\"content-ad\"></div>\n\n\n```js\nservices.AddCors(options =>\n{\n    options.AddPolicy(\"CorsPolicy\", builder => builder\n    .WithOrigins(\"http://localhost:4200\")\n    .AllowAnyMethod()\n    .AllowAnyHeader()\n    .AllowCredentials());\n});\n```\n\n## Auth0에 API 추가하기\n\nAuth0 계정으로 돌아가서 Applications & APIs로 이동하여 새 API를 생성하세요.\n\nAPI 이름과 식별자 URL(https://localhost:7202/로 포트 번호를 변경)을 입력하세요. RS256 알고리즘을 선택하세요.\n\n\n<div class=\"content-ad\"></div>\n\n## API 엔드포인트 보안하기\n\n이제 우리는 엔드포인트를 보안하고, 인증된 사용자만이 이에 액세스하고 반환된 콘텐츠와 함께 성공적인 HTTP 응답을 받을 수 있도록하려고합니다.\n\n먼저, Get() 메서드에 Microsoft.AspNetCore.Authorization에서 [Authorize] 속성을 추가하십시오.\n\n```csharp\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\n```\n\n<div class=\"content-ad\"></div>\n\n```csharp\nnamespace Auth0WebApi.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WeatherForecastController : ControllerBase\n    {\n        private static readonly string[] Summaries = new[]\n        {\n            \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n        };\n        private readonly ILogger<WeatherForecastController> _logger;\n        public WeatherForecastController(ILogger<WeatherForecastController> logger)\n        {\n            _logger = logger;\n        }\n        [HttpGet]\n        [Authorize]\n        public IEnumerable<WeatherForecast> Get()\n        {\n            return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = Random.Shared.Next(-20, 55),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n            })\n            .ToArray();\n        }\n    }\n}\n```\n\n우리는 ConfigurationManager를 통해 Audience 및 Domain 값을 액세스하고 싶어해요.\n\n따라서 appsettings.json에 Audience와 Domain을 추가해주세요.\n\n```json\n\"Auth0\": {\n  \"Audience\": \"https://localhost:7202/\",\n  \"Domain\": \"auth0tuto.eu.auth0.com\"\n}\n```\n\n<div class=\"content-ad\"></div>\n\n그러면 \"테이블\" 태그를 Markdown 형식으로 변경해주세요.\n\n\n| 아이템 | 가격 |\n|---|---|\n| 사과 | 1.99 |\n| 바나나 | 0.99 |\n| 수박 | 5.99 |\n\n\n<div class=\"content-ad\"></div>\n\n아래 코드를 추가하여 인증을 구성하십시오.\n\n```js\nservices.AddAuthentication(options =>\n{\n    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n}).AddJwtBearer(options =>\n{\n    options.Authority = $\"https://{auth0.Domain}/\";\n    options.Audience = auth0.Audience;\n});\n```\n\n저희는 인증 토큰을 활용한 JWT 베어러 인증을 사용할 것입니다. 해당 인증은 Authorization HTTP 헤더에서 추출되고 유효성이 검사될 것입니다.\n\n토큰을 유효성 검사하려면, Auth0 애플리케이션에서 구성한 도메인을 지정해야 합니다. 이 정보는 설정에서 찾을 수 있으며, 방금 생성한 Auth0 API의 식별자인 Audience(청중)도 지정해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n다음과 같이 AuthenticationMiddleware을 추가해 주세요:\n\n```js\napp.UseAuthentication();Copy\n```\n\n프로그램을 다시 실행하면 HTTP ERROR 401 (Unauthorized)를 받게 됩니다.\n\n# Angular 애플리케이션을 만들어 로그인 시스템을 구축하세요\n\n<div class=\"content-ad\"></div>\n\n## Angular CLI 설치\n\n이미 시스템에 Angular이 설치되어 있는 경우, 이 단계를 건너뛰세요.\n\n먼저, Node.js를 다운로드하고 설치해야 합니다 - ` https://nodejs.org/en/download\n\n그런 다음, 명령 프롬프트에 이 명령을 입력하여 Angular CLI를 설치하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install -g @angular/cli\n```\n\n만약 Windows를 사용 중이라면, PowerShell 스크립트 실행을 허용하기 위해 다음 명령을 실행해주세요.\n\n```js\nSet-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned\n```\n\n## Angular 애플리케이션 생성하기\n\n<div class=\"content-ad\"></div>\n\n새로운 Angular 애플리케이션을 생성하려면 ng new CLI 명령어를 실행하세요.\n\n```js\nng new auth0-angular-appCopy\n```\n\n앱에 포함할 기본 기능을 선택하세요.\n\n애플리케이션이 생성되면 ng serve -o를 실행하여 브라우저에서 앱을 실행하고 엽니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nng serve --oCopy\n```\n\n이제 기본 Angular 애플리케이션을 실행하는 것을 확인할 수 있습니다.\n\n## Auth0 SDK 설치\n\n좋아하는 텍스트 편집기나 IDE로 애플리케이션을 열어보세요. 여기서는 VS Code를 사용하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n프로젝트 디렉토리 내에서 터미널을 열고 Auth0 Angular SDK를 설치하려면 다음 명령을 실행해주세요.\n\n```js\nnpm install @auth0/auth0-angularCopy\n```\n\napp.module.ts를 열어서 AuthModule 패키지를 가져와서 AuthModule.forRoot를 호출하여 imports 목록에 추가해주세요. Auth0 애플리케이션 설정에서 Domain 및 ClientId 값을 복사해주세요.\n\n```js\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AuthModule } from '@auth0/auth0-angular'\n```\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    AuthModule.forRoot({\n      domain: 'auth0tuto.eu.auth0.com',\n      clientId: 'aJZmQXUxWhl4arU5ZhN2FJ38YUQgNYbf'\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n```\n\n## 로그인/로그아웃 추가하기\n\napp.component.ts 파일을 열고 AuthService 클래스에 대한 종속성을 생성자에 추가하고 '@auth0/auth0-angular'에서 AuthService를 가져와주세요.\n\n귀하의 코드는 다음과 같아야 합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { Component } from '@angular/core';\nimport { AuthService } from '@auth0/auth0-angular';\n```\n\n```js\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'auth0-angular-app';\n  constructor(public auth: AuthService) {}\n}\n```\n\n이제 app.component.html 파일을 열어서 배너에 Twitter 버튼 바로 전에 다음 코드를 추가하세요.\n\n```js\n<ng-template #loggedOut>\n  <button class=\"btn-login\" (click)=\"auth.loginWithRedirect()\">\n    로그인\n  </button>\n</ng-template>\n<button class=\"btn-login\" (click)=\"auth.logout()\" *ngIf=\"auth.isAuthenticated$ | async; else loggedOut\">\n  로그아웃\n</button>\n```\n\n<div class=\"content-ad\"></div>\n\nloginWithRedirect() 메소드를 호출하면 사용자가 Auth0 Universal 로그인 페이지로 리디렉션되어 해당 페이지에서 애플리케이션으로 이동하기 전에 로그인 또는 회원 가입을 할 수 있습니다.\n\n그런 다음, 다음 CSS를 `<style></style>` 사이에 추가해주세요.\n\n```js\n.btn-login {\n  border-radius: 4px;\n  border: 1px solid #eee;\n  background-color: #fafafa;\n  color: #333;\n  padding: 10px 25px;\n  text-decoration: none;\n  cursor: pointer;\n}\n```\n\n이제 배너에 로그인 버튼이 표시될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n`div class = \"content\" role = \"main\"`와 `/div` 사이의 모든 것을 삭제하고 다음 코드를 복사하여 붙여넣으십시오.\n\n```js\n<p *ngFor=\"let item of weatherForecasts\">\n  {item.date} |\n  {item.temperatureC} °C |\n  {item.temperatureF} °F |\n  {item.summary}\n</p>\n```\n\n## 회원 가입\n\n로그인 버튼을 클릭하세요.\n\n<div class=\"content-ad\"></div>\n\n지금은 Auth0 로그인 페이지로 이동되었습니다.\n\n새 계정을 만들려면 가입하세요. 계정을 확인하기 위해 이메일을 받아야 합니다.\n\n이제 Auth0 대시보드로 돌아가서, 왼쪽 메뉴에서 사용자 관리 `사용자`로 이동하여 사용자가 생성되었는지 확인하세요.\n\n## 로그아웃\n\n<div class=\"content-ad\"></div>\n\n가입한 후에는 로그인 버튼이 로그아웃 버튼으로 대체된 것을 볼 수 있습니다.\n\n로그아웃하려면 클릭하십시오.\n\n## 로그인\n\n이제 다시 로그인 버튼을 클릭하여 응용 프로그램에 로그인하십시오.\n\n<div class=\"content-ad\"></div>\n\n사용자 로그인 시스템이 작동되었으니, 이제 보안된 웹 API에 HTTP 호출을 만들어 날씨 예보 목록을 가져와 표시하고 싶어요.\n\n## HTTP 서비스 생성\n\n새 서비스를 만들기 위해 다음 Angular CLI 명령어를 실행해줘.\n\n```js\nng g s weatherforecastCopy\n```\n\n<div class=\"content-ad\"></div>\n\napp.module.ts에 WeatherForecastService와 HttpClientModule를 providers 배열에 추가해주세요. './weatherforecast.service'에서 WeatherForecastService를 import하고, @angular/common/http에서 HttpClientModule를 import해주세요.\n\napi.service.ts를 열어서 constructor에 HttpClient 의존성을 추가하고, @angular/common/http에서 클래스를 import하고 get() 메소드를 생성해주세요.\n\n```typescript\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconstructor(private http: HttpClient) {}\n\nget(): Observable<number> {\n  return this.http.get<number>(\"https://localhost:7202/weatherforecast/\");\n}\n```\n\n이 메소드는 우리 Web API의 weatherforecast 엔드포인트로 GET http 호출을 하게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n귀하는 다음과 같이 서비스 클래스를 작성하셔야 합니다:\n\n```js\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n```\n\n```js\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherForecastService {\n  constructor(private http: HttpClient) { }\n  get(): Observable<any[]> {\n    return this.http.get<any[]>(\"https://localhost:7202/weatherforecast\");\n  }\n}\n```\n\n## 날씨 예보 표시하기\n\n<div class=\"content-ad\"></div>\n\napp.components.ts로 돌아가서 생성자에 WeatherForecastService 종속성을 추가하고 ./weatherforecast.service에서 해당 클래스를 import하세요.\n\nweatherForecasts 변수를 생성하고 초기화하세요.\n\n```js\nweatherForecast: any[] = [];\n```\n\ngetWeatherForecasts() 메서드를 생성하여 날씨 예보 목록을 로드하세요.\n\n<div class=\"content-ad\"></div>\n\n\n```js\ngetWeatherForecasts() {\n  this.weatherForecastService.get().subscribe(data => {\n    this.weatherForecast = data;\n  })\n}\n```\n\n```js\nimport { Component, OnInit } from '@angular/core';\nimport { AuthService } from '@auth0/auth0-angular';\nimport { WeatherForecastService } from './weatherforecast.service';\n```\n\n```js\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  title = 'auth0-angular-app';\n  weatherForecasts: any[] = [];\n  constructor(\n    public auth: AuthService,\n    private weatherForecastService: WeatherForecastService\n  ) {}\n  ngOnInit(): void {\n    this.getWeatherForecasts();\n  }\n  getWeatherForecasts() {\n    this.weatherForecastService.get().subscribe(data => {\n      this.weatherForecasts = data;\n    })\n  }\n}\n```\n\n## Add JWT to the HTTP requests\n\n\n<div class=\"content-ad\"></div>\n\n이전에 언급한 대로, 저희 웹 API는 HTTP 요청의 Authorization 헤더에서 JWT bearer를 디코딩하여 클라이언트의 엔드포인트 접근을 승인합니다.\n\nAuth0 SDK를 사용하면 각 요청에 JWT를 수동으로 추가할 필요가 없습니다. 대신에, 우리를 대신해서 일을 처리해줄 Auth0 HTTP 인터셉터를 사용하겠습니다.\n\napp.module.ts에서 AuthHttpInterceptor와 HTTP_INTERCEPTORS를 다음과 같이 providers 배열에 추가하세요:\n\n```js\nproviders: [\n  WeatherForecastService,\n  { provide: HTTP_INTERCEPTORS, useClass: AuthHttpInterceptor, multi: true },\n],Copy\n```\n\n<div class=\"content-ad\"></div>\n\n@angular/common/http에 HTTP_INTERCEPTORS와 @auth0/auth0-angular에 AuthHttpInterceptor을 추가해주세요.\n\nAuthModule.forRoot()에서 audience와 httpInterceptor를 추가하고, 허용된 API 경로 목록에 API URL을 추가해주세요.\n\n우리의 app.module.ts는 이제 다음과 같이 보입니다:\n\n```js\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AuthHttpInterceptor, AuthModule } from '@auth0/auth0-angular';\nimport { WeatherForecastService } from './weatherforecast.service';\n```\n\n<div class=\"content-ad\"></div>\n\n\n```js\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    AuthModule.forRoot({\n      domain: 'auth0tuto.eu.auth0.com',\n      clientId: 'aJZmQXUxWhl4arU5ZhN2FJ38YUQgNYbf',\n      audience: 'https://localhost:7202/',\n      httpInterceptor: {\n        allowedList: [ 'https://localhost:7202/*' ],\n      },\n    }),\n  ],\n  providers: [\n    WeatherForecastService,\n    { provide: HTTP_INTERCEPTORS, useClass: AuthHttpInterceptor, multi: true },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n```\n\n# 모두 테스트하기\n\n이제 웹 API를 실행하고 Angular 애플리케이션에 로그인하세요.\n\n이제 페이지에 표시되는 날씨 예보 목록을 볼 수 있어야 합니다.\n","ogImage":{"url":"/assets/img/2024-05-17-SecureanAngularapplicationandNetWebAPIwithAuth0_0.png"},"coverImage":"/assets/img/2024-05-17-SecureanAngularapplicationandNetWebAPIwithAuth0_0.png","tag":["Tech"],"readingTime":13},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 튜토리얼에서는 Angular 애플리케이션에 로그인 시스템을 추가하고 .Net Web API를 Auth0로 보호하는 방법을 배워보겠습니다.</p>\n<p>먼저 무료 Auth0 계정을 생성하고 설정할 것입니다. 그 후 .Net 7 Web API를 생성하고 보호된 엔드포인트를 설정할 것입니다. 그런 다음 Angular 애플리케이션을 생성하고 JWT 베어러를 사용하여 Web API를 호출할 수 있는 로그인 시스템을 추가할 것입니다.</p>\n<p>보안에 대해 잘 모르더라도, Auth0를 사용하면 보안 서비스를 처음부터 만들 필요 없이 응용 프로그램에 인증/권한 부여를 추가할 수 있는 좋은 방법입니다.</p>\n<h1>Auth0</h1>\n<h2>Auth0 계정 생성</h2>\n<p><a href=\"https://auth0.com%EC%9C%BC%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">https://auth0.com으로</a> 이동하여 무료로 가입하고 계정을 설정하세요.</p>\n<h2>Auth0 싱글 페이지 애플리케이션 구성</h2>\n<p>왼쪽 메뉴에서 Applications > Applications로 이동하여 Default App을 선택하십시오. 설정 탭으로 이동하여 이름을 변경하십시오. 또한 새 응용 프로그램을 만들 수 있습니다.</p>\n<p>설정에서 Angular 앱과 통신할 때 사용할 응용 프로그램 도메인, 클라이언트 ID 및 클라이언트 비밀번호를 확인할 수 있습니다.</p>\n<p>앱 속성 아래로 스크롤하면 Application Type을 Single Page Application으로 변경할 수 있습니다.</p>\n<p>Application URIs 섹션에서 Allowed Callback, Logout URLs 및 Allowed Web Origins에 URL <a href=\"http://localhost:4200/%EC%9D%84\" rel=\"nofollow\" target=\"_blank\">http://localhost:4200/을</a> 제공하십시오.</p>\n<p><a href=\"http://localhost:4200/%EC%9D%80\" rel=\"nofollow\" target=\"_blank\">http://localhost:4200/은</a> 우리 Angular 애플리케이션의 로컬 URL이 되겠습니다.</p>\n<h1>.Net 7 웹 API를 생성하고 보안 설정하기</h1>\n<h2>새 .Net Web API 프로젝트 만들기</h2>\n<p>Visual Studio를 열고 ASP.NET Core Web API 프로젝트 템플릿에서 새 프로젝트를 만드세요. .Net 6 프레임워크를 선택하세요. 이 튜토리얼에서는 이 템플릿에서 생성된 WeatherForcastController를 사용할 것입니다. 이 컨트롤러에는 사용 예제에서 사용할 HTTP Get 엔드포인트가 포함되어 있습니다.</p>\n<p>프로젝트를 생성한 후 프로그램을 실행하고 <a href=\"https://localhost:7202/weatherforecast\" rel=\"nofollow\" target=\"_blank\">https://localhost:7202/weatherforecast</a> (포트 번호가 다를 수 있습니다)으로 JSON 형식의 WeatherForecast 목록이 반환되는지 확인해주세요.</p>\n<h2>교차 도메인 요청 허용</h2>\n<p>우리의 Angular 애플리케이션에서 모든 HTTP 요청을 허용해야 합니다. Program.cs 또는 Startup.cs 파일을 열어주세요.</p>\n<p>builder.Services를 services로 바꿔주세요. 그리고 var builder = WebApplication.CreateBuilder(args); 다음에 services 변수를 만들어주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> services = builder.<span class=\"hljs-property\">Services</span>;<span class=\"hljs-title class_\">Copy</span>\n</code></pre>\n<p>그 후에, CORS 미들웨어를 추가하세요.</p>\n<pre><code class=\"hljs language-js\">app.<span class=\"hljs-title class_\">UseCors</span>(<span class=\"hljs-string\">\"CorsPolicy\"</span>);<span class=\"hljs-title class_\">Copy</span>\n</code></pre>\n<p>CORS 정책을 등록하고 <a href=\"http://localhost:4200\" rel=\"nofollow\" target=\"_blank\">http://localhost:4200</a> 출처를 허용하세요.</p>\n<pre><code class=\"hljs language-js\">services.<span class=\"hljs-title class_\">AddCors</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">options</span> =></span>\n{\n    options.<span class=\"hljs-title class_\">AddPolicy</span>(<span class=\"hljs-string\">\"CorsPolicy\"</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">builder</span> =></span> builder\n    .<span class=\"hljs-title class_\">WithOrigins</span>(<span class=\"hljs-string\">\"http://localhost:4200\"</span>)\n    .<span class=\"hljs-title class_\">AllowAnyMethod</span>()\n    .<span class=\"hljs-title class_\">AllowAnyHeader</span>()\n    .<span class=\"hljs-title class_\">AllowCredentials</span>());\n});\n</code></pre>\n<h2>Auth0에 API 추가하기</h2>\n<p>Auth0 계정으로 돌아가서 Applications &#x26; APIs로 이동하여 새 API를 생성하세요.</p>\n<p>API 이름과 식별자 URL(<a href=\"https://localhost:7202/%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">https://localhost:7202/로</a> 포트 번호를 변경)을 입력하세요. RS256 알고리즘을 선택하세요.</p>\n<h2>API 엔드포인트 보안하기</h2>\n<p>이제 우리는 엔드포인트를 보안하고, 인증된 사용자만이 이에 액세스하고 반환된 콘텐츠와 함께 성공적인 HTTP 응답을 받을 수 있도록하려고합니다.</p>\n<p>먼저, Get() 메서드에 Microsoft.AspNetCore.Authorization에서 [Authorize] 속성을 추가하십시오.</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">using</span> Microsoft.AspNetCore.Authorization;\n<span class=\"hljs-keyword\">using</span> Microsoft.AspNetCore.Mvc;\n</code></pre>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Auth0WebApi.Controllers</span>\n{\n    [<span class=\"hljs-meta\">ApiController</span>]\n    [<span class=\"hljs-meta\">Route(<span class=\"hljs-string\">\"[controller]\"</span>)</span>]\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WeatherForecastController</span> : <span class=\"hljs-title\">ControllerBase</span>\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">string</span>[] Summaries = <span class=\"hljs-keyword\">new</span>[]\n        {\n            <span class=\"hljs-string\">\"Freezing\"</span>, <span class=\"hljs-string\">\"Bracing\"</span>, <span class=\"hljs-string\">\"Chilly\"</span>, <span class=\"hljs-string\">\"Cool\"</span>, <span class=\"hljs-string\">\"Mild\"</span>, <span class=\"hljs-string\">\"Warm\"</span>, <span class=\"hljs-string\">\"Balmy\"</span>, <span class=\"hljs-string\">\"Hot\"</span>, <span class=\"hljs-string\">\"Sweltering\"</span>, <span class=\"hljs-string\">\"Scorching\"</span>\n        };\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> ILogger&#x3C;WeatherForecastController> _logger;\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">WeatherForecastController</span>(<span class=\"hljs-params\">ILogger&#x3C;WeatherForecastController> logger</span>)</span>\n        {\n            _logger = logger;\n        }\n        [<span class=\"hljs-meta\">HttpGet</span>]\n        [<span class=\"hljs-meta\">Authorize</span>]\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&#x3C;WeatherForecast> <span class=\"hljs-title\">Get</span>()</span>\n        {\n            <span class=\"hljs-keyword\">return</span> Enumerable.Range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>).Select(index => <span class=\"hljs-keyword\">new</span> WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = Random.Shared.Next(<span class=\"hljs-number\">-20</span>, <span class=\"hljs-number\">55</span>),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n            })\n            .ToArray();\n        }\n    }\n}\n</code></pre>\n<p>우리는 ConfigurationManager를 통해 Audience 및 Domain 값을 액세스하고 싶어해요.</p>\n<p>따라서 appsettings.json에 Audience와 Domain을 추가해주세요.</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">\"Auth0\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"Audience\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://localhost:7202/\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"Domain\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"auth0tuto.eu.auth0.com\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>그러면 \"테이블\" 태그를 Markdown 형식으로 변경해주세요.</p>\n<table>\n<thead>\n<tr>\n<th>아이템</th>\n<th>가격</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>사과</td>\n<td>1.99</td>\n</tr>\n<tr>\n<td>바나나</td>\n<td>0.99</td>\n</tr>\n<tr>\n<td>수박</td>\n<td>5.99</td>\n</tr>\n</tbody>\n</table>\n<p>아래 코드를 추가하여 인증을 구성하십시오.</p>\n<pre><code class=\"hljs language-js\">services.<span class=\"hljs-title class_\">AddAuthentication</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">options</span> =></span>\n{\n    options.<span class=\"hljs-property\">DefaultAuthenticateScheme</span> = <span class=\"hljs-title class_\">JwtBearerDefaults</span>.<span class=\"hljs-property\">AuthenticationScheme</span>;\n    options.<span class=\"hljs-property\">DefaultChallengeScheme</span> = <span class=\"hljs-title class_\">JwtBearerDefaults</span>.<span class=\"hljs-property\">AuthenticationScheme</span>;\n}).<span class=\"hljs-title class_\">AddJwtBearer</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">options</span> =></span>\n{\n    options.<span class=\"hljs-property\">Authority</span> = $<span class=\"hljs-string\">\"https://{auth0.Domain}/\"</span>;\n    options.<span class=\"hljs-property\">Audience</span> = auth0.<span class=\"hljs-property\">Audience</span>;\n});\n</code></pre>\n<p>저희는 인증 토큰을 활용한 JWT 베어러 인증을 사용할 것입니다. 해당 인증은 Authorization HTTP 헤더에서 추출되고 유효성이 검사될 것입니다.</p>\n<p>토큰을 유효성 검사하려면, Auth0 애플리케이션에서 구성한 도메인을 지정해야 합니다. 이 정보는 설정에서 찾을 수 있으며, 방금 생성한 Auth0 API의 식별자인 Audience(청중)도 지정해야 합니다.</p>\n<p>다음과 같이 AuthenticationMiddleware을 추가해 주세요:</p>\n<pre><code class=\"hljs language-js\">app.<span class=\"hljs-title class_\">UseAuthentication</span>();<span class=\"hljs-title class_\">Copy</span>\n</code></pre>\n<p>프로그램을 다시 실행하면 HTTP ERROR 401 (Unauthorized)를 받게 됩니다.</p>\n<h1>Angular 애플리케이션을 만들어 로그인 시스템을 구축하세요</h1>\n<h2>Angular CLI 설치</h2>\n<p>이미 시스템에 Angular이 설치되어 있는 경우, 이 단계를 건너뛰세요.</p>\n<p>먼저, Node.js를 다운로드하고 설치해야 합니다 - ` <a href=\"https://nodejs.org/en/download\" rel=\"nofollow\" target=\"_blank\">https://nodejs.org/en/download</a></p>\n<p>그런 다음, 명령 프롬프트에 이 명령을 입력하여 Angular CLI를 설치하세요.</p>\n<pre><code class=\"hljs language-js\">npm install -g @angular/cli\n</code></pre>\n<p>만약 Windows를 사용 중이라면, PowerShell 스크립트 실행을 허용하기 위해 다음 명령을 실행해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Set</span>-<span class=\"hljs-title class_\">ExecutionPolicy</span> -<span class=\"hljs-title class_\">Scope</span> <span class=\"hljs-title class_\">CurrentUser</span> -<span class=\"hljs-title class_\">ExecutionPolicy</span> <span class=\"hljs-title class_\">RemoteSigned</span>\n</code></pre>\n<h2>Angular 애플리케이션 생성하기</h2>\n<p>새로운 Angular 애플리케이션을 생성하려면 ng new CLI 명령어를 실행하세요.</p>\n<pre><code class=\"hljs language-js\">ng <span class=\"hljs-keyword\">new</span> auth0-angular-appCopy\n</code></pre>\n<p>앱에 포함할 기본 기능을 선택하세요.</p>\n<p>애플리케이션이 생성되면 ng serve -o를 실행하여 브라우저에서 앱을 실행하고 엽니다.</p>\n<pre><code class=\"hljs language-js\">ng serve --oCopy\n</code></pre>\n<p>이제 기본 Angular 애플리케이션을 실행하는 것을 확인할 수 있습니다.</p>\n<h2>Auth0 SDK 설치</h2>\n<p>좋아하는 텍스트 편집기나 IDE로 애플리케이션을 열어보세요. 여기서는 VS Code를 사용하겠습니다.</p>\n<p>프로젝트 디렉토리 내에서 터미널을 열고 Auth0 Angular SDK를 설치하려면 다음 명령을 실행해주세요.</p>\n<pre><code class=\"hljs language-js\">npm install @auth0/auth0-angularCopy\n</code></pre>\n<p>app.module.ts를 열어서 AuthModule 패키지를 가져와서 AuthModule.forRoot를 호출하여 imports 목록에 추가해주세요. Auth0 애플리케이션 설정에서 Domain 및 ClientId 값을 복사해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NgModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@auth0/auth0-angular'</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppRoutingModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app-routing.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.component'</span>;\n@<span class=\"hljs-title class_\">NgModule</span>({\n  <span class=\"hljs-attr\">declarations</span>: [<span class=\"hljs-title class_\">AppComponent</span>],\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">BrowserModule</span>,\n    <span class=\"hljs-title class_\">AppRoutingModule</span>,\n    <span class=\"hljs-title class_\">HttpClientModule</span>,\n    <span class=\"hljs-title class_\">AuthModule</span>.<span class=\"hljs-title function_\">forRoot</span>({\n      <span class=\"hljs-attr\">domain</span>: <span class=\"hljs-string\">'auth0tuto.eu.auth0.com'</span>,\n      <span class=\"hljs-attr\">clientId</span>: <span class=\"hljs-string\">'aJZmQXUxWhl4arU5ZhN2FJ38YUQgNYbf'</span>\n    }),\n  ],\n  <span class=\"hljs-attr\">providers</span>: [],\n  <span class=\"hljs-attr\">bootstrap</span>: [<span class=\"hljs-title class_\">AppComponent</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<h2>로그인/로그아웃 추가하기</h2>\n<p>app.component.ts 파일을 열고 AuthService 클래스에 대한 종속성을 생성자에 추가하고 '@auth0/auth0-angular'에서 AuthService를 가져와주세요.</p>\n<p>귀하의 코드는 다음과 같아야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@auth0/auth0-angular'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-root'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./app.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./app.component.css'</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n  title = <span class=\"hljs-string\">'auth0-angular-app'</span>;\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">public auth: AuthService</span>) {}\n}\n</code></pre>\n<p>이제 app.component.html 파일을 열어서 배너에 Twitter 버튼 바로 전에 다음 코드를 추가하세요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;ng-template #loggedOut>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btn-login\"</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"auth.loginWithRedirect()\"</span>></span>\n    로그인\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n&#x3C;/ng-template>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btn-login\"</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"auth.logout()\"</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"auth.isAuthenticated$ | async; else loggedOut\"</span>></span>\n  로그아웃\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n</code></pre>\n<p>loginWithRedirect() 메소드를 호출하면 사용자가 Auth0 Universal 로그인 페이지로 리디렉션되어 해당 페이지에서 애플리케이션으로 이동하기 전에 로그인 또는 회원 가입을 할 수 있습니다.</p>\n<p>그런 다음, 다음 CSS를 <code>&#x3C;style>&#x3C;/style></code> 사이에 추가해주세요.</p>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">btn</span>-login {\n  border-<span class=\"hljs-attr\">radius</span>: 4px;\n  <span class=\"hljs-attr\">border</span>: 1px solid #eee;\n  background-<span class=\"hljs-attr\">color</span>: #fafafa;\n  <span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">333</span>;\n  <span class=\"hljs-attr\">padding</span>: 10px 25px;\n  text-<span class=\"hljs-attr\">decoration</span>: none;\n  <span class=\"hljs-attr\">cursor</span>: pointer;\n}\n</code></pre>\n<p>이제 배너에 로그인 버튼이 표시될 것입니다.</p>\n<p><code>div class = \"content\" role = \"main\"</code>와 <code>/div</code> 사이의 모든 것을 삭제하고 다음 코드를 복사하여 붙여넣으십시오.</p>\n<pre><code class=\"hljs language-js\">&#x3C;p *ngFor=<span class=\"hljs-string\">\"let item of weatherForecasts\"</span>>\n  {item.<span class=\"hljs-property\">date</span>} |\n  {item.<span class=\"hljs-property\">temperatureC</span>} °C |\n  {item.<span class=\"hljs-property\">temperatureF</span>} °F |\n  {item.<span class=\"hljs-property\">summary</span>}\n&#x3C;/p>\n</code></pre>\n<h2>회원 가입</h2>\n<p>로그인 버튼을 클릭하세요.</p>\n<p>지금은 Auth0 로그인 페이지로 이동되었습니다.</p>\n<p>새 계정을 만들려면 가입하세요. 계정을 확인하기 위해 이메일을 받아야 합니다.</p>\n<p>이제 Auth0 대시보드로 돌아가서, 왼쪽 메뉴에서 사용자 관리 <code>사용자</code>로 이동하여 사용자가 생성되었는지 확인하세요.</p>\n<h2>로그아웃</h2>\n<p>가입한 후에는 로그인 버튼이 로그아웃 버튼으로 대체된 것을 볼 수 있습니다.</p>\n<p>로그아웃하려면 클릭하십시오.</p>\n<h2>로그인</h2>\n<p>이제 다시 로그인 버튼을 클릭하여 응용 프로그램에 로그인하십시오.</p>\n<p>사용자 로그인 시스템이 작동되었으니, 이제 보안된 웹 API에 HTTP 호출을 만들어 날씨 예보 목록을 가져와 표시하고 싶어요.</p>\n<h2>HTTP 서비스 생성</h2>\n<p>새 서비스를 만들기 위해 다음 Angular CLI 명령어를 실행해줘.</p>\n<pre><code class=\"hljs language-js\">ng g s weatherforecastCopy\n</code></pre>\n<p>app.module.ts에 WeatherForecastService와 HttpClientModule를 providers 배열에 추가해주세요. './weatherforecast.service'에서 WeatherForecastService를 import하고, @angular/common/http에서 HttpClientModule를 import해주세요.</p>\n<p>api.service.ts를 열어서 constructor에 HttpClient 의존성을 추가하고, @angular/common/http에서 클래스를 import하고 get() 메소드를 생성해주세요.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HttpClient</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common/http'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Observable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n\n<span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> http: HttpClient</span>) {}\n\n<span class=\"hljs-title function_\">get</span>(): <span class=\"hljs-title class_\">Observable</span>&#x3C;<span class=\"hljs-built_in\">number</span>> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">get</span>&#x3C;<span class=\"hljs-built_in\">number</span>>(<span class=\"hljs-string\">\"https://localhost:7202/weatherforecast/\"</span>);\n}\n</code></pre>\n<p>이 메소드는 우리 Web API의 weatherforecast 엔드포인트로 GET http 호출을 하게 됩니다.</p>\n<p>귀하는 다음과 같이 서비스 클래스를 작성하셔야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HttpClient</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common/http'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Observable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WeatherForecastService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private http: HttpClient</span>) { }\n  <span class=\"hljs-title function_\">get</span>(): <span class=\"hljs-title class_\">Observable</span>&#x3C;any[]> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">get</span>&#x3C;any[]>(<span class=\"hljs-string\">\"https://localhost:7202/weatherforecast\"</span>);\n  }\n}\n</code></pre>\n<h2>날씨 예보 표시하기</h2>\n<p>app.components.ts로 돌아가서 생성자에 WeatherForecastService 종속성을 추가하고 ./weatherforecast.service에서 해당 클래스를 import하세요.</p>\n<p>weatherForecasts 변수를 생성하고 초기화하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">weatherForecast</span>: any[] = [];\n</code></pre>\n<p>getWeatherForecasts() 메서드를 생성하여 날씨 예보 목록을 로드하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">getWeatherForecasts</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">weatherForecastService</span>.<span class=\"hljs-title function_\">get</span>().<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =></span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">weatherForecast</span> = data;\n  })\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">OnInit</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@auth0/auth0-angular'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">WeatherForecastService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./weatherforecast.service'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-root'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./app.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./app.component.css'</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> implements <span class=\"hljs-title class_\">OnInit</span>{\n  title = <span class=\"hljs-string\">'auth0-angular-app'</span>;\n  <span class=\"hljs-attr\">weatherForecasts</span>: any[] = [];\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    public auth: AuthService,\n    private weatherForecastService: WeatherForecastService\n  </span>) {}\n  <span class=\"hljs-title function_\">ngOnInit</span>(): <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getWeatherForecasts</span>();\n  }\n  <span class=\"hljs-title function_\">getWeatherForecasts</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">weatherForecastService</span>.<span class=\"hljs-title function_\">get</span>().<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =></span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">weatherForecasts</span> = data;\n    })\n  }\n}\n</code></pre>\n<h2>Add JWT to the HTTP requests</h2>\n<p>이전에 언급한 대로, 저희 웹 API는 HTTP 요청의 Authorization 헤더에서 JWT bearer를 디코딩하여 클라이언트의 엔드포인트 접근을 승인합니다.</p>\n<p>Auth0 SDK를 사용하면 각 요청에 JWT를 수동으로 추가할 필요가 없습니다. 대신에, 우리를 대신해서 일을 처리해줄 Auth0 HTTP 인터셉터를 사용하겠습니다.</p>\n<p>app.module.ts에서 AuthHttpInterceptor와 HTTP_INTERCEPTORS를 다음과 같이 providers 배열에 추가하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">providers</span>: [\n  <span class=\"hljs-title class_\">WeatherForecastService</span>,\n  { <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">HTTP_INTERCEPTORS</span>, <span class=\"hljs-attr\">useClass</span>: <span class=\"hljs-title class_\">AuthHttpInterceptor</span>, <span class=\"hljs-attr\">multi</span>: <span class=\"hljs-literal\">true</span> },\n],<span class=\"hljs-title class_\">Copy</span>\n</code></pre>\n<p>@angular/common/http에 HTTP_INTERCEPTORS와 @auth0/auth0-angular에 AuthHttpInterceptor을 추가해주세요.</p>\n<p>AuthModule.forRoot()에서 audience와 httpInterceptor를 추가하고, 허용된 API 경로 목록에 API URL을 추가해주세요.</p>\n<p>우리의 app.module.ts는 이제 다음과 같이 보입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HttpClientModule</span>, <span class=\"hljs-variable constant_\">HTTP_INTERCEPTORS</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common/http'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NgModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthHttpInterceptor</span>, <span class=\"hljs-title class_\">AuthModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@auth0/auth0-angular'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">WeatherForecastService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./weatherforecast.service'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppRoutingModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app-routing.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.component'</span>;\n@<span class=\"hljs-title class_\">NgModule</span>({\n  <span class=\"hljs-attr\">declarations</span>: [<span class=\"hljs-title class_\">AppComponent</span>],\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">BrowserModule</span>,\n    <span class=\"hljs-title class_\">AppRoutingModule</span>,\n    <span class=\"hljs-title class_\">HttpClientModule</span>,\n    <span class=\"hljs-title class_\">AuthModule</span>.<span class=\"hljs-title function_\">forRoot</span>({\n      <span class=\"hljs-attr\">domain</span>: <span class=\"hljs-string\">'auth0tuto.eu.auth0.com'</span>,\n      <span class=\"hljs-attr\">clientId</span>: <span class=\"hljs-string\">'aJZmQXUxWhl4arU5ZhN2FJ38YUQgNYbf'</span>,\n      <span class=\"hljs-attr\">audience</span>: <span class=\"hljs-string\">'https://localhost:7202/'</span>,\n      <span class=\"hljs-attr\">httpInterceptor</span>: {\n        <span class=\"hljs-attr\">allowedList</span>: [ <span class=\"hljs-string\">'https://localhost:7202/*'</span> ],\n      },\n    }),\n  ],\n  <span class=\"hljs-attr\">providers</span>: [\n    <span class=\"hljs-title class_\">WeatherForecastService</span>,\n    { <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">HTTP_INTERCEPTORS</span>, <span class=\"hljs-attr\">useClass</span>: <span class=\"hljs-title class_\">AuthHttpInterceptor</span>, <span class=\"hljs-attr\">multi</span>: <span class=\"hljs-literal\">true</span> },\n  ],\n  <span class=\"hljs-attr\">bootstrap</span>: [<span class=\"hljs-title class_\">AppComponent</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<h1>모두 테스트하기</h1>\n<p>이제 웹 API를 실행하고 Angular 애플리케이션에 로그인하세요.</p>\n<p>이제 페이지에 표시되는 날씨 예보 목록을 볼 수 있어야 합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}