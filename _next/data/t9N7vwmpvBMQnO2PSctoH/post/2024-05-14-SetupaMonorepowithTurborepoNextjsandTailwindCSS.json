{"pageProps":{"post":{"title":"TurboRepo, Nextjs 및 Tailwind CSS를 사용하여 Monorepo 설정하기","description":"","date":"2024-05-14 10:31","slug":"2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS","content":"\n\n현대 웹 애플리케이션이 크기와 복잡성 모두 증가함에 따라, 개발자들은 코드베이스를 더 효율적으로 관리할 방법을 찾고 있습니다. 모노리포는 여러 프로젝트를 단일 저장소에서 관리할 수 있는 솔루션을 제공합니다.\n\n그러나 모노리포를 수동으로 설정하는 것은 거대한 작업일 수 있습니다. 여기서 Turborepo가 나타납니다. Turborepo는 여러 단계를 자동화하여 모노리포를 만드는 프로세스를 간소화하는 도구입니다. 이 글에서는 Turborepo를 사용하여 Next.js(기본 프로젝트)를 프로젝트 베이스로, Tailwind CSS를 스타일링으로 포함하는 모노리포를 설정해보겠습니다.\n\n시작해봅시다!\n\n![이미지](/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_0.png)\n\n\n\n# 1. 새로운 Monorepo 생성하기\n\n먼저 다음 명령어를 사용하여 Turborepo Monorepo를 만들어보겠습니다:\n\n```js\nnpx create-turbo@latest\n```\n\n이 명령어를 실행하면, 생성 위치를 선택하고 패키지 매니저를 선택하라는 프롬프트가 표시됩니다. 본 문서에서는 yarn을 사용하겠지만, npm이나 pnpm과 같은 원하는 패키지 매니저를 선택할 수 있습니다.\n\n\n\n<img src=\"/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_1.png\" />\n\n설치가 완료되면 디렉토리로 이동하세요 (cd yourProjectName) 그리고 원하는 IDE에서 프로젝트를 열어보세요.\n\n이제 다음 명령어를 사용하여 실행 테스트를 할 수 있습니다.\n\n```js\nyarn install && yarn dev\n```\n\n\n\n만약 당신의 터미널이 아래와 같이 나타나면, 세팅이 완료된 것입니다.\n\n![이미지](/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_2.png)\n\n## 2. 디렉터리 설명\n\n자, 이제 Turborepo에 의해 생성된 폴더 구조와 프로젝트에 대해 이야기해보겠습니다.\n\n\n\n![이미지](/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_3.png)\n\n- apps는 이 단일 리포지토리에 있는 모든 애플리케이션입니다. 기본적으로 (npx create-turbo@latest로부터), docs 및 web 애플리케이션(Next.js)이 생성됩니다.\n- packages 파일에는 eslint, tsconfig 및 모든 리포지토리 전체에 걸쳐 요소를 지배하는 공유 구성요소가 포함됩니다.\n- package.json 이 설정의 주목할만한 측면 중 하나는 Yarn 작업 영역을 사용하여 단일 리포지토리 내에서 여러 패키지와 종속성을 관리할 수 있다는 것입니다. package.json에는 또한 apps 디렉터리에서 단일 리포지토리의 애플리케이션을 실행하는 데 필요한 종속성 및 스크립트도 포함되어 있습니다.\n\n![이미지](/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_4.png)\n\n- turbo.json은 Turborepo가 파이프라인을 구성하고 관리하는 데 사용하는 구성 파일입니다. 이 파이프라인은 특정한 순서로 실행되는 일련의 명령을 조직화하고 관리합니다. 예를 들어 빌드 파이프라인은 신뢰성과 효율성을 위해 ^로 표시된 dependsOn 기호와의 위상적인 종속성에 의존할 수 있습니다.\n\n\n\n# 3. Tailwind CSS 설정하기\n\n다양한 프로젝트에서 tailwind.config.js 파일이 단일 정보 원천으로 작용하도록 보장하기 위해, packages 폴더 내에 새 구성 패키지를 생성할 예정입니다. 이는 앱과 packages/ui 디렉토리 모두에서 Tailwind 클래스를 사용할 수 있게 해줍니다.\n\n다음 단계를 따를 것입니다:\n\n## A. packages 폴더에 Tailwind CSS 구성 설정하기\n\n\n\n- 먼저 packages 디렉토리 내에 configs 폴더를 생성합니다. 이 폴더 안에 package.json, tailwind.config.js 및 postcss.config.js와 같은 설정에 필요한 여러 필수 파일을 생성할 것입니다.\n\n![이미지](/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_5.png)\n\npackage.json\n\n```js\n{\n  \"name\": \"@mrizkiaiman/configs\",\n  \"version\": \"0.0.0\",\n  \"private\": true\n}\n```  \n\n\n\n```js\ntailwind.config.js\n\nmodule.exports = {\n  content: [\n    \"../../packages/ui/**/*.{js,ts,jsx,tsx}\",\n    \"./**/*.{js,ts,jsx,tsx}\",\n    \"./pages/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n};\n```\n\npostcss.config.js\n\n```js\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n```\n\n\n\n## B. 앱 내에서 Tailwind CSS 구성 구현\n\n- 루트 디렉토리에서 다음 명령을 실행하세요\n\n```js\nyarn workspace docs add -D tailwindcss autoprefixer\n```\n\n2. tailwind.config.js 및 postcss.config.js 파일을 생성하세요\n\n\n\n좋아요! 여기서 테이블 태그를 마크다운 형식으로 변경했습니다:\n\n\n| 파일명            | 설정 내용                                       |\n|----------------------|-----------------------------------------------------|\n| tailwind.config.js    | `module.exports = require(\"@mrizkiaiman/configs/tailwind/tailwind.config\");` |\n| postcss.config.js       | `module.exports = require(\"@mrizkiaiman/configs/tailwind/postcss.config\");` |\n\n\n\n\n3. 패키지/ui 폴더로 이동하여 다음 파일을 생성하세요: tailwind.config.js, postcss.config.js, 그리고 styles.css\n\ntailwind.config.js\n\n```js\nmodule.exports = require(\"@mrizkiaiman/configs/tailwind/tailwind.config\");\n```\n\npostcss.config.js\n\n\n\n```js\r\nmodule.exports = require(\"@mrizkiaiman/configs/tailwind/postcss.config\");\r\n```\n\nstyles.css\n\n```js\r\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\r\n```\n\n4. apps/docs 폴더로 돌아가서 pages 디렉토리로 이동하세요. 모노레포의 Tailwind CSS 초기화를 위해 이전에 생성한 전역 스타일을 가져오는 _app.tsx 파일을 만드세요.\n\n\n\n_app.tsx\n\n```js\nimport \"ui/styles.css\";\n\nimport type { AppProps } from \"next/app\";\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />;\n}\n```\n\n설정이 완료되었습니다. 이제 테스트해 봅시다!\n\n![이미지](/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_6.png)\n\n\n\n테스트 중:\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*z9BAP-pz5fi8N9eR8Gpc4Q.gif)\n\n`monorepo` 내의 기타 앱, 예를 들어 `apps/web`와 같은 앱에 대해 동일한 단계를 따를 수 있습니다.\n\n요약하면, Turborepo로 단일 저장소(monorepo)를 구축하면 업무 흐름을 혁신적으로 개선할 수 있습니다. 구성된 구조와 간소화된 프로세스를 통해 이 조합은 대규모 프로젝트와 다중 응용 프로그램을 쉽게 관리하고 시간을 절약하며 신뢰성을 향상시킬 수 있습니다. 직접 시도하고 작업 방식을 변화시킬 수 있는 방법을 확인해 보세요.\n\n\n\n읽어 주셔서 감사합니다. 어떤 피드백이든 정말 감사히 받겠습니다.\n\nGitHub 저장소: https://github.com/mrizkiaiman/turborepo-withtailwind","ogImage":{"url":"/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_0.png"},"coverImage":"/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>현대 웹 애플리케이션이 크기와 복잡성 모두 증가함에 따라, 개발자들은 코드베이스를 더 효율적으로 관리할 방법을 찾고 있습니다. 모노리포는 여러 프로젝트를 단일 저장소에서 관리할 수 있는 솔루션을 제공합니다.</p>\n<p>그러나 모노리포를 수동으로 설정하는 것은 거대한 작업일 수 있습니다. 여기서 Turborepo가 나타납니다. Turborepo는 여러 단계를 자동화하여 모노리포를 만드는 프로세스를 간소화하는 도구입니다. 이 글에서는 Turborepo를 사용하여 Next.js(기본 프로젝트)를 프로젝트 베이스로, Tailwind CSS를 스타일링으로 포함하는 모노리포를 설정해보겠습니다.</p>\n<p>시작해봅시다!</p>\n<p><img src=\"/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_0.png\" alt=\"이미지\"></p>\n<h1>1. 새로운 Monorepo 생성하기</h1>\n<p>먼저 다음 명령어를 사용하여 Turborepo Monorepo를 만들어보겠습니다:</p>\n<pre><code class=\"hljs language-js\">npx create-turbo@latest\n</code></pre>\n<p>이 명령어를 실행하면, 생성 위치를 선택하고 패키지 매니저를 선택하라는 프롬프트가 표시됩니다. 본 문서에서는 yarn을 사용하겠지만, npm이나 pnpm과 같은 원하는 패키지 매니저를 선택할 수 있습니다.</p>\n<p>설치가 완료되면 디렉토리로 이동하세요 (cd yourProjectName) 그리고 원하는 IDE에서 프로젝트를 열어보세요.</p>\n<p>이제 다음 명령어를 사용하여 실행 테스트를 할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">yarn install &#x26;&#x26; yarn dev\n</code></pre>\n<p>만약 당신의 터미널이 아래와 같이 나타나면, 세팅이 완료된 것입니다.</p>\n<p><img src=\"/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_2.png\" alt=\"이미지\"></p>\n<h2>2. 디렉터리 설명</h2>\n<p>자, 이제 Turborepo에 의해 생성된 폴더 구조와 프로젝트에 대해 이야기해보겠습니다.</p>\n<p><img src=\"/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_3.png\" alt=\"이미지\"></p>\n<ul>\n<li>apps는 이 단일 리포지토리에 있는 모든 애플리케이션입니다. 기본적으로 (npx create-turbo@latest로부터), docs 및 web 애플리케이션(Next.js)이 생성됩니다.</li>\n<li>packages 파일에는 eslint, tsconfig 및 모든 리포지토리 전체에 걸쳐 요소를 지배하는 공유 구성요소가 포함됩니다.</li>\n<li>package.json 이 설정의 주목할만한 측면 중 하나는 Yarn 작업 영역을 사용하여 단일 리포지토리 내에서 여러 패키지와 종속성을 관리할 수 있다는 것입니다. package.json에는 또한 apps 디렉터리에서 단일 리포지토리의 애플리케이션을 실행하는 데 필요한 종속성 및 스크립트도 포함되어 있습니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_4.png\" alt=\"이미지\"></p>\n<ul>\n<li>turbo.json은 Turborepo가 파이프라인을 구성하고 관리하는 데 사용하는 구성 파일입니다. 이 파이프라인은 특정한 순서로 실행되는 일련의 명령을 조직화하고 관리합니다. 예를 들어 빌드 파이프라인은 신뢰성과 효율성을 위해 ^로 표시된 dependsOn 기호와의 위상적인 종속성에 의존할 수 있습니다.</li>\n</ul>\n<h1>3. Tailwind CSS 설정하기</h1>\n<p>다양한 프로젝트에서 tailwind.config.js 파일이 단일 정보 원천으로 작용하도록 보장하기 위해, packages 폴더 내에 새 구성 패키지를 생성할 예정입니다. 이는 앱과 packages/ui 디렉토리 모두에서 Tailwind 클래스를 사용할 수 있게 해줍니다.</p>\n<p>다음 단계를 따를 것입니다:</p>\n<h2>A. packages 폴더에 Tailwind CSS 구성 설정하기</h2>\n<ul>\n<li>먼저 packages 디렉토리 내에 configs 폴더를 생성합니다. 이 폴더 안에 package.json, tailwind.config.js 및 postcss.config.js와 같은 설정에 필요한 여러 필수 파일을 생성할 것입니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_5.png\" alt=\"이미지\"></p>\n<p>package.json</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"@mrizkiaiman/configs\"</span>,\n  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"0.0.0\"</span>,\n  <span class=\"hljs-string\">\"private\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-js\">tailwind.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">js</span>\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">content</span>: [\n    <span class=\"hljs-string\">\"../../packages/ui/**/*.{js,ts,jsx,tsx}\"</span>,\n    <span class=\"hljs-string\">\"./**/*.{js,ts,jsx,tsx}\"</span>,\n    <span class=\"hljs-string\">\"./pages/**/*.{js,ts,jsx,tsx}\"</span>,\n  ],\n  <span class=\"hljs-attr\">theme</span>: {\n    <span class=\"hljs-attr\">extend</span>: {},\n  },\n};\n</code></pre>\n<p>postcss.config.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">plugins</span>: {\n    <span class=\"hljs-attr\">tailwindcss</span>: {},\n    <span class=\"hljs-attr\">autoprefixer</span>: {},\n  },\n};\n</code></pre>\n<h2>B. 앱 내에서 Tailwind CSS 구성 구현</h2>\n<ul>\n<li>루트 디렉토리에서 다음 명령을 실행하세요</li>\n</ul>\n<pre><code class=\"hljs language-js\">yarn workspace docs add -D tailwindcss autoprefixer\n</code></pre>\n<ol start=\"2\">\n<li>tailwind.config.js 및 postcss.config.js 파일을 생성하세요</li>\n</ol>\n<p>좋아요! 여기서 테이블 태그를 마크다운 형식으로 변경했습니다:</p>\n<table>\n<thead>\n<tr>\n<th>파일명</th>\n<th>설정 내용</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tailwind.config.js</td>\n<td><code>module.exports = require(\"@mrizkiaiman/configs/tailwind/tailwind.config\");</code></td>\n</tr>\n<tr>\n<td>postcss.config.js</td>\n<td><code>module.exports = require(\"@mrizkiaiman/configs/tailwind/postcss.config\");</code></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>패키지/ui 폴더로 이동하여 다음 파일을 생성하세요: tailwind.config.js, postcss.config.js, 그리고 styles.css</li>\n</ol>\n<p>tailwind.config.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@mrizkiaiman/configs/tailwind/tailwind.config\"</span>);\n</code></pre>\n<p>postcss.config.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@mrizkiaiman/configs/tailwind/postcss.config\"</span>);\n</code></pre>\n<p>styles.css</p>\n<pre><code class=\"hljs language-js\">@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre>\n<ol start=\"4\">\n<li>apps/docs 폴더로 돌아가서 pages 디렉토리로 이동하세요. 모노레포의 Tailwind CSS 초기화를 위해 이전에 생성한 전역 스타일을 가져오는 _app.tsx 파일을 만드세요.</li>\n</ol>\n<p>_app.tsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"ui/styles.css\"</span>;\n\n<span class=\"hljs-keyword\">import</span> type { <span class=\"hljs-title class_\">AppProps</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/app\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyApp</span>(<span class=\"hljs-params\">{ Component, pageProps }: AppProps</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Component</span> {<span class=\"hljs-attr\">...pageProps</span>} /></span></span>;\n}\n</code></pre>\n<p>설정이 완료되었습니다. 이제 테스트해 봅시다!</p>\n<p><img src=\"/assets/img/2024-05-14-SetupaMonorepowithTurborepoNextjsandTailwindCSS_6.png\" alt=\"이미지\"></p>\n<p>테스트 중:</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*z9BAP-pz5fi8N9eR8Gpc4Q.gif\" alt=\"image\"></p>\n<p><code>monorepo</code> 내의 기타 앱, 예를 들어 <code>apps/web</code>와 같은 앱에 대해 동일한 단계를 따를 수 있습니다.</p>\n<p>요약하면, Turborepo로 단일 저장소(monorepo)를 구축하면 업무 흐름을 혁신적으로 개선할 수 있습니다. 구성된 구조와 간소화된 프로세스를 통해 이 조합은 대규모 프로젝트와 다중 응용 프로그램을 쉽게 관리하고 시간을 절약하며 신뢰성을 향상시킬 수 있습니다. 직접 시도하고 작업 방식을 변화시킬 수 있는 방법을 확인해 보세요.</p>\n<p>읽어 주셔서 감사합니다. 어떤 피드백이든 정말 감사히 받겠습니다.</p>\n<p>GitHub 저장소: <a href=\"https://github.com/mrizkiaiman/turborepo-withtailwind\" rel=\"nofollow\" target=\"_blank\">https://github.com/mrizkiaiman/turborepo-withtailwind</a></p>\n</body>\n</html>\n"},"__N_SSG":true}