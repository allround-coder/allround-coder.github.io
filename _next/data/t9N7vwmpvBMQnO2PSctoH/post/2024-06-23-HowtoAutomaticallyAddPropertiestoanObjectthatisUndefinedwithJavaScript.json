{"pageProps":{"post":{"title":"JavaScript로 정의되지 않은 객체에 속성을 자동으로 추가하는 방법","description":"","date":"2024-06-23 13:08","slug":"2024-06-23-HowtoAutomaticallyAddPropertiestoanObjectthatisUndefinedwithJavaScript","content":"\n\n<img src=\"/assets/img/2024-06-23-HowtoAutomaticallyAddPropertiestoanObjectthatisUndefinedwithJavaScript_0.png\" />\n\n가끔은 JavaScript로 정의되지 않은 객체에 속성을 자동으로 추가하고 싶을 때가 있습니다.\n\n이 글에서는 JavaScript로 정의되지 않은 객체에 속성을 자동으로 추가하는 방법을 살펴보겠습니다.\n\n# JavaScript로 정의되지 않은 객체에 속성을 자동으로 추가하기\n\n<div class=\"content-ad\"></div>\n\nJavaScript에서 정의되지 않은 객체에 속성을 자동으로 추가하려면 hasOwnProperty 메서드를 사용하여 속성이 있는지 확인할 수 있습니다.\n\n해당 속성이 있으면 true를 반환하고 그렇지 않으면 false를 반환합니다.\n\n만약 false를 반환하면, 원하는 값으로 속성 값을 설정할 수 있습니다.\n\n예를 들어, 다음과 같이 작성할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nconst test = {}\nif (!test.hasOwnProperty('hello')) {\n  test.hello = {};\n}\ntest.hello.world = \"Hello World!\"\n```\n\n우리는 hello 속성을 추가하고 싶은 test 객체를 가지고 있어요.\n\n!test.hasOwnProperty('hello')로 존재하지 않는지 확인해요.\n\n만약 그게 사실이라면, test.hello를 빈 객체로 설정해요.\n\n<div class=\"content-ad\"></div>\n\n그럼 test.hello.world를 \"Hello World!\"로 설정해 봅시다.\n\nhasOwnProperty 메서드는 Object 생성자로부터 상속되므로 쉽게 재정의할 수 있습니다.\n\n따라서 정확한 hasOwnProperty 메서드를 항상 호출하도록 하려면 다음과 같이 작성할 수 있습니다:\n\n```js\nconst test = {}\nif (!Object.prototype.hasOwnProperty.call(test, 'hello')) {\n  test.hello = {};\n}\ntest.hello.world = \"Hello World!\"\n```\n\n<div class=\"content-ad\"></div>\n\nObject.prototype.hasOwnProperty.call을 사용하여 test로 test.hasOwnProperty와 같은 작업을 수행할 수 있지만, 항상 Object 생성자에서 올바른 것을 호출한다는 것을 확인합니다.\n\n# 결론\n\nJavaScript로 정의되지 않은 객체에 자동으로 속성을 추가하려면 hasOwnProperty 메서드를 사용하여 속성이 있는지 확인할 수 있습니다.\n\n해당 속성이 존재하면 true를 반환하고 그렇지 않으면 false를 반환합니다.\n\n<div class=\"content-ad\"></div>\n\nFalse가 반환되면 속성 값을 원하는 값으로 설정할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-23-HowtoAutomaticallyAddPropertiestoanObjectthatisUndefinedwithJavaScript_0.png"},"coverImage":"/assets/img/2024-06-23-HowtoAutomaticallyAddPropertiestoanObjectthatisUndefinedwithJavaScript_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>가끔은 JavaScript로 정의되지 않은 객체에 속성을 자동으로 추가하고 싶을 때가 있습니다.</p>\n<p>이 글에서는 JavaScript로 정의되지 않은 객체에 속성을 자동으로 추가하는 방법을 살펴보겠습니다.</p>\n<h1>JavaScript로 정의되지 않은 객체에 속성을 자동으로 추가하기</h1>\n<p>JavaScript에서 정의되지 않은 객체에 속성을 자동으로 추가하려면 hasOwnProperty 메서드를 사용하여 속성이 있는지 확인할 수 있습니다.</p>\n<p>해당 속성이 있으면 true를 반환하고 그렇지 않으면 false를 반환합니다.</p>\n<p>만약 false를 반환하면, 원하는 값으로 속성 값을 설정할 수 있습니다.</p>\n<p>예를 들어, 다음과 같이 작성할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> test = {}\n<span class=\"hljs-keyword\">if</span> (!test.<span class=\"hljs-title function_\">hasOwnProperty</span>(<span class=\"hljs-string\">'hello'</span>)) {\n  test.<span class=\"hljs-property\">hello</span> = {};\n}\ntest.<span class=\"hljs-property\">hello</span>.<span class=\"hljs-property\">world</span> = <span class=\"hljs-string\">\"Hello World!\"</span>\n</code></pre>\n<p>우리는 hello 속성을 추가하고 싶은 test 객체를 가지고 있어요.</p>\n<p>!test.hasOwnProperty('hello')로 존재하지 않는지 확인해요.</p>\n<p>만약 그게 사실이라면, test.hello를 빈 객체로 설정해요.</p>\n<p>그럼 test.hello.world를 \"Hello World!\"로 설정해 봅시다.</p>\n<p>hasOwnProperty 메서드는 Object 생성자로부터 상속되므로 쉽게 재정의할 수 있습니다.</p>\n<p>따라서 정확한 hasOwnProperty 메서드를 항상 호출하도록 하려면 다음과 같이 작성할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> test = {}\n<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">hasOwnProperty</span>.<span class=\"hljs-title function_\">call</span>(test, <span class=\"hljs-string\">'hello'</span>)) {\n  test.<span class=\"hljs-property\">hello</span> = {};\n}\ntest.<span class=\"hljs-property\">hello</span>.<span class=\"hljs-property\">world</span> = <span class=\"hljs-string\">\"Hello World!\"</span>\n</code></pre>\n<p>Object.prototype.hasOwnProperty.call을 사용하여 test로 test.hasOwnProperty와 같은 작업을 수행할 수 있지만, 항상 Object 생성자에서 올바른 것을 호출한다는 것을 확인합니다.</p>\n<h1>결론</h1>\n<p>JavaScript로 정의되지 않은 객체에 자동으로 속성을 추가하려면 hasOwnProperty 메서드를 사용하여 속성이 있는지 확인할 수 있습니다.</p>\n<p>해당 속성이 존재하면 true를 반환하고 그렇지 않으면 false를 반환합니다.</p>\n<p>False가 반환되면 속성 값을 원하는 값으로 설정할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}