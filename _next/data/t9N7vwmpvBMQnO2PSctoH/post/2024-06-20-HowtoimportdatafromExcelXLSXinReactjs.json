{"pageProps":{"post":{"title":"Reactjs에서 Excel XLSX에서 데이터를 가져오는 방법","description":"","date":"2024-06-20 02:15","slug":"2024-06-20-HowtoimportdatafromExcelXLSXinReactjs","content":"\n\n\n![이미지](/assets/img/2024-06-20-HowtoimportdatafromExcelXLSXinReactjs_0.png)\n\nReact.js 애플리케이션에서 .xlsx 파일에서 데이터를 가져오려면 JavaScript에서 엑셀 파일을 읽고 쓰는 인기 있는 라이브러리 인 xlsx 를 사용할 수 있습니다. 이 안내서에서는 React.js 애플리케이션에서 .xlsx 파일에서 데이터를 가져 오는 단계를 안내합니다.\n\n## 단계 1: 새로운 React.js 애플리케이션 생성\n\n아직 React.js 애플리케이션을 생성하지 않았다면 Create React App 을 사용하여 새로 만들 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nnpx create-react-app react-xlsx-import\n```\n\n## 단계 2: xlsx 라이브러리 설치\n\n프로젝트 디렉토리로 이동하여 xlsx 라이브러리를 설치하세요:\n\n```js\ncd react-xlsx-import\nnpm install xlsx\n```\n\n<div class=\"content-ad\"></div>\n\n## 단계 3: 파일 입력 컴포넌트 생성\n\nsrc 디렉토리에 FileInput.js 파일을 만들고 아래 코드를 추가하여 파일 입력 컴포넌트를 생성하세요:\n\n```js\n// src/FileInput.js\n\nimport React from 'react';\nimport * as XLSX from 'xlsx';\n\nfunction FileInput() {\n  const [data, setData] = React.useState(null);\n\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const workbook = XLSX.read(event.target.result, { type: 'binary' });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const sheetData = XLSX.utils.sheet_to_json(sheet);\n\n      setData(sheetData);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileUpload} />\n      {data && (\n        <div>\n          <h2>Imported Data:</h2>\n          <pre>{JSON.stringify(data, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default FileInput;\n```\n\n## 단계 4: App 컴포넌트 업데이트\n\n<div class=\"content-ad\"></div>\n\nsrc 디렉토리의 App.js 파일을 업데이트하여 FileInput 컴포넌트를 포함시킵니다:\n\n```js\n// src/App.js\n\nimport React from 'react';\nimport './App.css';\nimport FileInput from './FileInput';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>React.js에서 Excel 데이터 가져오기</h1>\n      <FileInput />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n## 단계 5: 애플리케이션 실행하기\n\n다음 명령어를 사용하여 React.js 애플리케이션을 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm start\n```\n\n웹 브라우저를 열고 http://localhost:3000 으로 이동하세요. 파일 입력 컴포넌트가 나타날 것입니다. 여기서 .xlsx 파일을 업로드할 수 있습니다. .xlsx 파일을 선택한 후, 가져온 데이터가 파일 입력란 아래에 표시됩니다.\n\n# 결론\n\nReact.js 애플리케이션에서 xlsx 라이브러리를 사용하여 .xlsx 파일에서 데이터를 성공적으로 가져왔습니다. 이제 이 예제를 확장하여 가져온 데이터를 처리하고, 테이블에 표시하거나 추가적인 데이터 조작 및 분석을 수행하여 보다 구조화되고 사용자 친화적인 방식으로 표시할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n파일 유형을 처리하기 전에 파일 유형을 확인하고, 대용량 파일을 효율적으로 처리하며, 파일 업로드 및 데이터 처리 단계에서 사용자에게 피드백을 제공하는 등 오류와 예외 상황을 적절하게 처리해야 합니다.","ogImage":{"url":"/assets/img/2024-06-20-HowtoimportdatafromExcelXLSXinReactjs_0.png"},"coverImage":"/assets/img/2024-06-20-HowtoimportdatafromExcelXLSXinReactjs_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-20-HowtoimportdatafromExcelXLSXinReactjs_0.png\" alt=\"이미지\"></p>\n<p>React.js 애플리케이션에서 .xlsx 파일에서 데이터를 가져오려면 JavaScript에서 엑셀 파일을 읽고 쓰는 인기 있는 라이브러리 인 xlsx 를 사용할 수 있습니다. 이 안내서에서는 React.js 애플리케이션에서 .xlsx 파일에서 데이터를 가져 오는 단계를 안내합니다.</p>\n<h2>단계 1: 새로운 React.js 애플리케이션 생성</h2>\n<p>아직 React.js 애플리케이션을 생성하지 않았다면 Create React App 을 사용하여 새로 만들 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">npx create-react-app react-xlsx-<span class=\"hljs-keyword\">import</span>\n</code></pre>\n<h2>단계 2: xlsx 라이브러리 설치</h2>\n<p>프로젝트 디렉토리로 이동하여 xlsx 라이브러리를 설치하세요:</p>\n<pre><code class=\"hljs language-js\">cd react-xlsx-<span class=\"hljs-keyword\">import</span>\nnpm install xlsx\n</code></pre>\n<h2>단계 3: 파일 입력 컴포넌트 생성</h2>\n<p>src 디렉토리에 FileInput.js 파일을 만들고 아래 코드를 추가하여 파일 입력 컴포넌트를 생성하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/FileInput.js</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable constant_\">XLSX</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'xlsx'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FileInput</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleFileUpload</span> = (<span class=\"hljs-params\">e</span>) => {\n    <span class=\"hljs-keyword\">const</span> file = e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">files</span>[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">const</span> reader = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileReader</span>();\n\n    reader.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> {\n      <span class=\"hljs-keyword\">const</span> workbook = <span class=\"hljs-variable constant_\">XLSX</span>.<span class=\"hljs-title function_\">read</span>(event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">result</span>, { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'binary'</span> });\n      <span class=\"hljs-keyword\">const</span> sheetName = workbook.<span class=\"hljs-property\">SheetNames</span>[<span class=\"hljs-number\">0</span>];\n      <span class=\"hljs-keyword\">const</span> sheet = workbook.<span class=\"hljs-property\">Sheets</span>[sheetName];\n      <span class=\"hljs-keyword\">const</span> sheetData = <span class=\"hljs-variable constant_\">XLSX</span>.<span class=\"hljs-property\">utils</span>.<span class=\"hljs-title function_\">sheet_to_json</span>(sheet);\n\n      <span class=\"hljs-title function_\">setData</span>(sheetData);\n    };\n\n    reader.<span class=\"hljs-title function_\">readAsBinaryString</span>(file);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"file\"</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleFileUpload}</span> /></span>\n      {data &#x26;&#x26; (\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Imported Data:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">pre</span>></span>{JSON.stringify(data, null, 2)}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">pre</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      )}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">FileInput</span>;\n</code></pre>\n<h2>단계 4: App 컴포넌트 업데이트</h2>\n<p>src 디렉토리의 App.js 파일을 업데이트하여 FileInput 컴포넌트를 포함시킵니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/App.js</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">FileInput</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./FileInput'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>React.js에서 Excel 데이터 가져오기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">FileInput</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<h2>단계 5: 애플리케이션 실행하기</h2>\n<p>다음 명령어를 사용하여 React.js 애플리케이션을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">npm start\n</code></pre>\n<p>웹 브라우저를 열고 <a href=\"http://localhost:3000\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000</a> 으로 이동하세요. 파일 입력 컴포넌트가 나타날 것입니다. 여기서 .xlsx 파일을 업로드할 수 있습니다. .xlsx 파일을 선택한 후, 가져온 데이터가 파일 입력란 아래에 표시됩니다.</p>\n<h1>결론</h1>\n<p>React.js 애플리케이션에서 xlsx 라이브러리를 사용하여 .xlsx 파일에서 데이터를 성공적으로 가져왔습니다. 이제 이 예제를 확장하여 가져온 데이터를 처리하고, 테이블에 표시하거나 추가적인 데이터 조작 및 분석을 수행하여 보다 구조화되고 사용자 친화적인 방식으로 표시할 수 있습니다.</p>\n<p>파일 유형을 처리하기 전에 파일 유형을 확인하고, 대용량 파일을 효율적으로 처리하며, 파일 업로드 및 데이터 처리 단계에서 사용자에게 피드백을 제공하는 등 오류와 예외 상황을 적절하게 처리해야 합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}