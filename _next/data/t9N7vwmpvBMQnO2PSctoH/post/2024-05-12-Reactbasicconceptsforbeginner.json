{"pageProps":{"post":{"title":"React 초보자를 위한 기본 개념","description":"","date":"2024-05-12 23:15","slug":"2024-05-12-Reactbasicconceptsforbeginner","content":"\n\n글을 쓰는 것은 제가 배운 것을 다시 상기시키는 데 도움이 돼요. 그럼 시작해볼까요!\n\n리액트란? 웹페이지를 렌더링하는 데 도움이 되는 JavaScript 라이브러리\n\n라이브러리인가요, 프레임워크인가요? 라이브러리는 필요할 때마다 즉시 구축하는 데 도움이 되는 일반적인 도구를 제공하고, 프레임워크는 사용자 정의할 수 있는 기본 청사진을 제공합니다. 리액트는 청사진보다는 도구 상자와 같아서 라이브러리에 속합니다.\n\n왜 리액트를 사용해야 하나요? 간결한 코딩 스타일, 쉬운 코드 블록 재사용, 그리고 더 나은 로직 유닛 형성(업무 분리)이 가능합니다.\n\n\n\n```js\n// 단계 정의, 명령형, DOM 스타일\nlet btn = document.querySelector('button');\n\nif (user.isLoggedIn){\n  button.textContent = '계속하기'\n}\nelse {\n  button.textContent = '로그인'\n}\ndocument.body.append(btn);\n```\n\n```js\n// 목표 정의, 선언형, React-Dom 스타일\nlet content;\nif (user.isLoggedIn){\n  content = <button>계속하기</button>\n}\nelse {\n  content = <button>로그인</button>\n}\nreturn content;\n```\n\n리액트의 네 가지 개념: JSX, 컴포넌트, 프롭스, 상태. 이를 분해하여 이해해봅시다.\n\nJSX는 자바스크립트 문법 확장으로 HTML을 자바스크립트 코드에 포함할 수 있게 해줍니다.\n\n\n\n\n```js\n// Header.jsx에 저장\nexport default function Header() {\n  return (\n    <header>\n      <h1> 이것은 헤더에 속해 있습니다. </h1>\n    </header>\n  )\n}\n```\n\n컴포넌트는 HTML 블록(React 레고)을 반환하는 함수입니다. 일반적으로 이러한 블록을 결합하여 웹페이지를 만듭니다.\n\n```js\nimport Header from './Header.jsx'\n\nexport default function App() {\n  return(\n    <div>\n      <Header />     // 컴포넌트\n    </div>\n  )    \n}\n```\n\nProps는 사용자 정의 컴포넌트에 설정할 수 있는 속성입니다. 데이터가 컴포넌트 간에 흐를 수 있도록 하는 것이 목적입니다.\n\n\n\n\n```js\nfunction MyComponent(props){\n  console.log(props.name); // appName\n  console.log(props.age); // 777\n}\n\nfunction App(){\n  return (\n    <div>\n      <MyComponent\n        name=\"appName\"\n        age=777\n      />\n    </div>\n  )\n}\n```\n\n상태(State)는 두 가지 역할을 하는 React 후크입니다. 업데이트를 기다리고 웹페이지를 다시 렌더링합니다. 상태 후크가 필요한 이유는 React 컴포넌트가 내부적으로 시작할 때 한 번만 실행되고 나중에 업데이트되면 기본적으로 다시 렌더링되지 않기 때문입니다. 따라서 React에게 특정 정보나 상태가 변경되었음을 알리고 그것을 다시 렌더링하도록 전달할 방법이 필요합니다.\n\n```js\n// .jsx 형식으로 저장\nimport {useState} from \"react\"\n\nconst [getInfo, setInfo] = useState()\n\nfunction handleInfo(newInfo) {\n  setInfo(newInfo)\n}\n\nlet info = <p>기본 정보</p>\nif(getInfo) {\n  info = getInfo\n}\n\nreturn (\n  <CusButton onClick={() => handleInfo(\"CB가 클릭되었습니다\")}> CB </CusButton>\n  <div>\n    {info}\n  </div>\n)\n```\n\n간단히 말하면, React는 주로 웹페이지 렌더링에 초점을 맞춘 자바스크립트 라이브러리입니다. JSX, 컴포넌트, 프롭스(props) 및 상태(State)라는 네 가지 필수 개념이 있습니다. JavaScript 문법 확장을 통해 관련 HTML/CSS/JS를 컴포넌트로 그룹화할 수 있습니다. 컴포넌트는 서로 통신하기 위해 프롭스를 포함하고, 마지막으로 상태(State)는 업데이트 시 컴포넌트를 다시 렌더링할 수 있게 합니다.\n","ogImage":{"url":"/assets/img/2024-05-12-Reactbasicconceptsforbeginner_0.png"},"coverImage":"/assets/img/2024-05-12-Reactbasicconceptsforbeginner_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>글을 쓰는 것은 제가 배운 것을 다시 상기시키는 데 도움이 돼요. 그럼 시작해볼까요!</p>\n<p>리액트란? 웹페이지를 렌더링하는 데 도움이 되는 JavaScript 라이브러리</p>\n<p>라이브러리인가요, 프레임워크인가요? 라이브러리는 필요할 때마다 즉시 구축하는 데 도움이 되는 일반적인 도구를 제공하고, 프레임워크는 사용자 정의할 수 있는 기본 청사진을 제공합니다. 리액트는 청사진보다는 도구 상자와 같아서 라이브러리에 속합니다.</p>\n<p>왜 리액트를 사용해야 하나요? 간결한 코딩 스타일, 쉬운 코드 블록 재사용, 그리고 더 나은 로직 유닛 형성(업무 분리)이 가능합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 단계 정의, 명령형, DOM 스타일</span>\n<span class=\"hljs-keyword\">let</span> btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">'button'</span>);\n\n<span class=\"hljs-keyword\">if</span> (user.<span class=\"hljs-property\">isLoggedIn</span>){\n  button.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">'계속하기'</span>\n}\n<span class=\"hljs-keyword\">else</span> {\n  button.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">'로그인'</span>\n}\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">append</span>(btn);\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 목표 정의, 선언형, React-Dom 스타일</span>\n<span class=\"hljs-keyword\">let</span> content;\n<span class=\"hljs-keyword\">if</span> (user.<span class=\"hljs-property\">isLoggedIn</span>){\n  content = <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>계속하기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n}\n<span class=\"hljs-keyword\">else</span> {\n  content = <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>로그인<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n}\n<span class=\"hljs-keyword\">return</span> content;\n</code></pre>\n<p>리액트의 네 가지 개념: JSX, 컴포넌트, 프롭스, 상태. 이를 분해하여 이해해봅시다.</p>\n<p>JSX는 자바스크립트 문법 확장으로 HTML을 자바스크립트 코드에 포함할 수 있게 해줍니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Header.jsx에 저장</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Header</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span> 이것은 헤더에 속해 있습니다. <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span></span>\n  )\n}\n</code></pre>\n<p>컴포넌트는 HTML 블록(React 레고)을 반환하는 함수입니다. 일반적으로 이러한 블록을 결합하여 웹페이지를 만듭니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Header</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Header.jsx'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span>(\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Header</span> /></span>     // 컴포넌트\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  )    \n}\n</code></pre>\n<p>Props는 사용자 정의 컴포넌트에 설정할 수 있는 속성입니다. 데이터가 컴포넌트 간에 흐를 수 있도록 하는 것이 목적입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyComponent</span>(<span class=\"hljs-params\">props</span>){\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(props.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// appName</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(props.<span class=\"hljs-property\">age</span>); <span class=\"hljs-comment\">// 777</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>){\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">MyComponent</span>\n        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"appName\"</span>\n        <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">777</span>\n      /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  )\n}\n</code></pre>\n<p>상태(State)는 두 가지 역할을 하는 React 후크입니다. 업데이트를 기다리고 웹페이지를 다시 렌더링합니다. 상태 후크가 필요한 이유는 React 컴포넌트가 내부적으로 시작할 때 한 번만 실행되고 나중에 업데이트되면 기본적으로 다시 렌더링되지 않기 때문입니다. 따라서 React에게 특정 정보나 상태가 변경되었음을 알리고 그것을 다시 렌더링하도록 전달할 방법이 필요합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// .jsx 형식으로 저장</span>\n<span class=\"hljs-keyword\">import</span> {useState} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n\n<span class=\"hljs-keyword\">const</span> [getInfo, setInfo] = <span class=\"hljs-title function_\">useState</span>()\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleInfo</span>(<span class=\"hljs-params\">newInfo</span>) {\n  <span class=\"hljs-title function_\">setInfo</span>(newInfo)\n}\n\n<span class=\"hljs-keyword\">let</span> info = <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>기본 정보<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n<span class=\"hljs-keyword\">if</span>(getInfo) {\n  info = getInfo\n}\n\n<span class=\"hljs-keyword\">return</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CusButton</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> handleInfo(\"CB가 클릭되었습니다\")}> CB <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">CusButton</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n    {info}\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n)\n</code></pre>\n<p>간단히 말하면, React는 주로 웹페이지 렌더링에 초점을 맞춘 자바스크립트 라이브러리입니다. JSX, 컴포넌트, 프롭스(props) 및 상태(State)라는 네 가지 필수 개념이 있습니다. JavaScript 문법 확장을 통해 관련 HTML/CSS/JS를 컴포넌트로 그룹화할 수 있습니다. 컴포넌트는 서로 통신하기 위해 프롭스를 포함하고, 마지막으로 상태(State)는 업데이트 시 컴포넌트를 다시 렌더링할 수 있게 합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}