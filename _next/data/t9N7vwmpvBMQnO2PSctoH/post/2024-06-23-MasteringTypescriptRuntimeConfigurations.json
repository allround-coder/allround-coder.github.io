{"pageProps":{"post":{"title":"타입스크립트 런타임 설정 완전 정복하는 방법","description":"","date":"2024-06-23 13:49","slug":"2024-06-23-MasteringTypescriptRuntimeConfigurations","content":"\n\n대부분의 사람들이 경력 초기에 배우는 것 중 하나가 구성(configuration)입니다. 그리고 대부분의 사람들이 처음에 배운 방법을 계속 사용합니다. 저는 10년 이상 웹 개발을 해 왔는데, 끊임없이 다양한 구성 접근 방식을 보았습니다. 오늘은 여러분이 앱을 구성하는 것을 조금 더 쉽게 만들어 드리려고 왔습니다. 물론, 새롭게 출시한 제 패키지 https://github.com/mrspartak/config 도 소개할 예정이에요.\n\n![image](/assets/img/2024-06-23-MasteringTypescriptRuntimeConfigurations_0.png)\n\n저는 풀스택 개발자이지만, 백엔드와 프론트엔드 구성을 구분하지는 않습니다. 빌드 시간 및 실행 시간 구성을 모두 사용할 수 있기 때문에 유사하다고 생각하기 때문이죠. 우리는 컨테이너화 시대에 살고 있으므로, 주로 이 유형의 배포에 초점을 맞출 거예요. 아래 섹션에서 제공하는 통찰력은 꽤 주관적일 수 있으므로, 만약 여러분의 의견이 다르다면 댓글로 의견을 나누고 싶어요.\n\n## 빌드 시간 구성(Build-time configuration)\n\n<div class=\"content-ad\"></div>\n\n빌드 시간 구성은 백엔드에서는 덜 흔하지만 프론트엔드에서는 꽤 인기 있는 접근 방식입니다. 여기서 구성 값을 패키지나 이미지에 포함하여 애플리케이션을 실행하는 데 충분할 수 있습니다. 저에게는 빌드 시간에 환경과 관련된 모든 것을 처리하는 것이 합리적으로 보입니다. 이는 코드에서 IO 작업이 어떻게 동작하는지에 영향을 미치는 구체적인 테스트, 스테이징 및 프로덕션 환경 구성을 포함합니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*WIXN4ZkEhqUXVOfalToyAg.gif)\n\n그러나 일부 사람들은 빌드 시간에 API 엔드포인트, 인증 키 등 외부 구성을 포함하여 이를 지나치게 사용하기도 합니다. 이 방법은 작동하지만 각 환경별로 패키지나 이미지를 재빌드하고 테스트해야 하므로 빌드 간에 불일치를 일으킬 수 있습니다.\n\n## 런타임 구성.\n\n<div class=\"content-ad\"></div>\n\n백엔드에서 진짜 빛을 발할 때죠. 하지만 나는 SSR (서버 측 렌더링) 및 SPA (단일 페이지 응용 프로그램) 프런트엔드에서 실행시 구성을 자주 사용해요. 앱이 로드되는 처음에 사용되고 외부 구성을 모두 포함해야 하며 환경에 따라 크게 달라질 수 있어요. 여기서 순간적인 환경의 강점이 발휘되어 더 큰 유연성과 적응성을 제공해 줍니다.\n\n## 어떻게 구성하나요?\n\n그래서 정확히 구성(configuration)이 뭔가요? `.env` 파일을 알죠… 아니라면 `.toml`이나 `.json`, `.ini`이 있겠죠? 안돼, 그냥 `.ts` 파일을 만들고 그 안에서 객체를 내보내요. 하지만 기다려봐요. 파일을 git에 커밋해야 하나요? 환경마다 파일을 만들고 비밀 데이터를 숨길까요?\n\n<img src=\"https://miro.medium.com/v2/resize:fit:960/1*7S4sjloFaBx5isjqi_OAXw.gif\" />\n\n<div class=\"content-ad\"></div>\n\n최고의 형식에 대해 전쟁을 벌일 수 있지만, 사실은 별로 중요하지 않아요. 읽기 쉽고 확장 가능하며 텍스트로 저장할 수 있는 것이면 충분히 좋아요. 당신이 원하는 대로 하세요. 하지만 저장 및 사용 전략은 상당히 중요해요.\n\n저장 측면에서, Kubernetes (k8s), Docker Swarm 또는 일반 Docker를 사용하는 경우, 아마도 configs와 secrets에 익숙할 겁니다. 이를 통해 코드와 실행 중인 컨테이너에 파일이나 폴더를 첨부할 수 있어요. 대부분의 어려움은 개발 환경이나 프로덕션 환경에 새로운 구성을 배포할 때 발생한다고 생각해요.\n\n## 확인, 확인, 확인\n\n설정은 선언부터 시작돼요. 그것만이 필요한 거예요. 백엔드에서 데이터베이스를 호출해야 한다면, 이 데이터베이스에 인증하는 데 필요한 것을 알아내서 설정 선언에 넣어보세요. 그 결과는 무엇일까요? 앱이 충돌하게 되는 거죠 — 이게 바로 좋은 일이에요. 이를 통해 누락된 또는 잘못된 구성을 조기에 확인할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:960/1*hDRj2PnNe94Krj76Az67lQ.gif)\n\n다음으로 필요한 필드를 구성 파일에 추가해야 합니다. 검증 라이브러리를 사용하거나 더 좋은 방법으로 (비밀 광고 경고) 제 라이브러리를 사용하여 검증을 처리하세요.\n\n## 병합, 때때로 시간을 절약합니다\n\n기본 PORT가 항상 설정되어 있는데 설정하지 않을 때는 어떻게 할까요? 당연히 그 기본값을 정의하는 것이 도움이 됩니다. 그런데 그 후에 어떻게 병합하죠? lodash를 사용하거나 더 나은 방법으로 (계속 언급하다 보면 짜증나지 않고 내 생각처럼 되기 시작한다는 말이 있습니다).\n\n\n<div class=\"content-ad\"></div>\n\n## 개발자에 대한 생각은 뭐야? 그보다 더 있을까?\n\n물론이죠. 물어주셔서 감사합니다. 제 현재 주 언어는 TypeScript이기 때문에 그것에서 최선을 다해야겠죠. 상상해보세요! 전체 구성이 타입으로 정의된 것을 볼 수 있다면 얼마나 멋진가요. 예를 들어 Zod로 유효성을 검사하는 사람들은 이미 이 편한 삶을 살고 있어요. 제 라이브러리를 사용하면 어떤 유효성 검사 라이브러리라도 손쉽게 적용할 수 있답니다.\n\ntrpc 무신, 정말 천재적이에요. 그의 코드를 그냥 복사하여 사용하면 구성을 결과로 유도해낼 수 있어요. 마법 같죠.\n\n![이미지](https://miro.medium.com/v2/resize:fit:960/1*7sjOuoIpBuH3KTlkUFt1QQ.gif)\n\n<div class=\"content-ad\"></div>\n\n## 개발 환경을 언급했어요. 커밋할까 말까?\n\n안 돼요. 정말로요. OPENAPI_KEY를 즉시 훔치고, 일주일 후엔 길거리에서 구걸하게 될 거에요. 비밀 저장소 솔루션을 사용해주세요. 1Password, Google Cloud, Amazon, Infisical, dotenv.org, 그리고 여러 다른 멋진 프로젝트들이 안전하게 시크릿을 저장하고 공유할 수 있게 해줘요.\n\npackage.json에 설정 스크립트를 포함해서 시크릿의 정확한 버전을 다운로드할 수 있게 해주세요. 또한, 충돌을 피하기 위해 버전을 업데이트하고 git에서 충돌을 피하도록 하는 업로드 스크립트도 포함해주세요. 나중에 감사를 말할 거예요. 저는 이 방법을 여러 해 동안 사용해왔고, 로컬 설정을 플래시 드라이브나 Slack을 통해 공유하는 데 돌아갈 수 없을 거예요.\n\n![image](https://miro.medium.com/v2/resize:fit:960/1*CR7GClSquXaYgsn6gmGv6Q.gif)\n\n<div class=\"content-ad\"></div>\n\n## 좋아 좋아, 이제 다른 무거운 npm 패키지에 대해 말씀드릴게요\n\n실제로, 이 패키지는 종속성이 전혀 없으며 TypeScript를 사용하고 아마도 번들러를 사용해야 합니다. 일반적으로 위에서 언급한 모든 문제를 해결해 줍니다 (물론 개발 환경은 제외하고요). 이 패키지를 사용하면 다음과 같은 장점을 얻을 수 있어요:\n\n- 3가지 소스 옵션: JSON 파일, JSON URL 및 객체를 지원하여 대부분의 사용 사례를 커버합니다.\n- 런타임 유효성 검사: Zod, Superstruct, Yup 등 인기있는 라이브러리와 함께 작동합니다.\n- TypeScript IntelliSense: 유효성 검사 라이브러리의 변환기를 적용하고 해결된 유효성에 대한 힌트를 제공합니다.\n- 병합: 왜냐하면요? 기본값을 분리해서 가지고 있는 것이 상당히 멋지기 때문이죠. 기본값을 항상 유효성 검사 스키마에 넣을 수 있지만, 그러면 코드에 저장되어 있게 됩니다.\n- 완전히 테스트된 상태: 상용화 준비가 끝난 상태이며 이미 다수의 응용 프로그램에서 사용되었습니다.\n- 백엔드 및 프런트엔드 친화적: 양쪽 환경에서 매끄럽게 작동합니다.\n\n```js\n// file: state/config.ts\nimport { fromJSONFile } from \"@mrspartak/config\";\nimport * as z from \"zod\"\n\nconst config = await fromJSONFile({\n  path: [\"../config/default.json\", \"../config/runtime.json\"],\n  schema: z.object({\n    db: z.object({\n      host: z.string(),\n      port: z.number(),\n      username: z.string(),\n      password: z.string()\n    }),\n    app: z.object({\n      port: z.number().optional().default(3000)\n    })\n  }),\n});\n\nexport default config\n\n\n\n// file: index.ts\n// 해결된 구성을 가져옵니다\nimport config from './state/config.js';\n\n// 애플리케이션에서 구성을 사용합니다\nimport db from 'some-db-provider';\nconst dbClient = db(config.db); // 여기서 IntelliSense를 즐기세요!\n```\n\n<div class=\"content-ad\"></div>\n\n## 그런데 JSON 지원만 있는 것 같아요. 환경 변수를 사용하는데 무거운 시스템 쓰레기가 많이 들어가지 않은 사랑스러운 방법이 있을까요?\n\n객체와 작업하는 것을 지원하므로 env 객체를 함수에 전달할 수 있어요. 다른 .env 파서를 다시 작성하는 것이 이상할 수 있겠죠. 시장에 이미 테스트된 많은 것들이 있으니까요.\n\n```js\n// file: state/config.ts\nimport { fromObject } from \"@mrspartak/config\";\nimport * as z from \"zod\"\n\nconst schema = z\n  .object({\n    NODE_ENV: z.enum([\"development\", \"production\"]),\n    DB_HOST: z.string(),\n    DB_PORT: z.number(),\n    DB_USER: z.string(),\n    DB_PASSWORD: z.string(),\n    APP_PORT: z.number().default(3000),\n  })\n  .transform((data) => ({\n    environment: data.NODE_ENV,\n    port: data.APP_PORT,\n    db: {\n      host: data.DB_HOST,\n      port: data.DB_PORT,\n      user: data.DB_USER,\n      password: data.DB_PASSWORD,\n    },\n  }));\n\nconst config = await fromObject({\n  data: process.env,\n  schema\n})\n\nexport default config\n\n\n// file index.ts\nimport 'dotenv/config'\n// ! dotenv 이후에 설정이로드되어야 하므로 process.env가 채워집니다.\nimport config from './state/config.js';\n\n// 애플리케이션에서 구성 사용하기\nimport db from 'some-db-provider';\nconst dbClient = db(config.db); // 여기서 IntelliSense를 즐기세요!\n```\n\n## 프론트엔드를 언급했는데, 노드 파일 API를 사용한 것 같아요. 빌드가 깨질 거에요.\n\n<div class=\"content-ad\"></div>\n\n네. 그렇습니다. 따로 내보내는 방법이 있습니다. (만약 다른 더 나은 해결책을 아시면 연락 주세요)\n\n```js\n// 파일: state/config.ts\nimport { fromObject } from \"@mrspartak/config/web\"; // 라이브러리의 별도 빌드\nimport * as z from \"zod\"\n\nconst schema = z\n  .object({\n    API_URL: z.string(),\n  })\n\nconst config = await fromObject({\n  data: import.meta.env, // vite의 예제\n  schema\n})\n\nexport default config\n```\n\n![이미지](https://miro.medium.com/v2/resize:fit:960/1*ipkgq4adHLjucIErFR2buA.gif)","ogImage":{"url":"/assets/img/2024-06-23-MasteringTypescriptRuntimeConfigurations_0.png"},"coverImage":"/assets/img/2024-06-23-MasteringTypescriptRuntimeConfigurations_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>대부분의 사람들이 경력 초기에 배우는 것 중 하나가 구성(configuration)입니다. 그리고 대부분의 사람들이 처음에 배운 방법을 계속 사용합니다. 저는 10년 이상 웹 개발을 해 왔는데, 끊임없이 다양한 구성 접근 방식을 보았습니다. 오늘은 여러분이 앱을 구성하는 것을 조금 더 쉽게 만들어 드리려고 왔습니다. 물론, 새롭게 출시한 제 패키지 <a href=\"https://github.com/mrspartak/config\" rel=\"nofollow\" target=\"_blank\">https://github.com/mrspartak/config</a> 도 소개할 예정이에요.</p>\n<p><img src=\"/assets/img/2024-06-23-MasteringTypescriptRuntimeConfigurations_0.png\" alt=\"image\"></p>\n<p>저는 풀스택 개발자이지만, 백엔드와 프론트엔드 구성을 구분하지는 않습니다. 빌드 시간 및 실행 시간 구성을 모두 사용할 수 있기 때문에 유사하다고 생각하기 때문이죠. 우리는 컨테이너화 시대에 살고 있으므로, 주로 이 유형의 배포에 초점을 맞출 거예요. 아래 섹션에서 제공하는 통찰력은 꽤 주관적일 수 있으므로, 만약 여러분의 의견이 다르다면 댓글로 의견을 나누고 싶어요.</p>\n<h2>빌드 시간 구성(Build-time configuration)</h2>\n<p>빌드 시간 구성은 백엔드에서는 덜 흔하지만 프론트엔드에서는 꽤 인기 있는 접근 방식입니다. 여기서 구성 값을 패키지나 이미지에 포함하여 애플리케이션을 실행하는 데 충분할 수 있습니다. 저에게는 빌드 시간에 환경과 관련된 모든 것을 처리하는 것이 합리적으로 보입니다. 이는 코드에서 IO 작업이 어떻게 동작하는지에 영향을 미치는 구체적인 테스트, 스테이징 및 프로덕션 환경 구성을 포함합니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*WIXN4ZkEhqUXVOfalToyAg.gif\" alt=\"image\"></p>\n<p>그러나 일부 사람들은 빌드 시간에 API 엔드포인트, 인증 키 등 외부 구성을 포함하여 이를 지나치게 사용하기도 합니다. 이 방법은 작동하지만 각 환경별로 패키지나 이미지를 재빌드하고 테스트해야 하므로 빌드 간에 불일치를 일으킬 수 있습니다.</p>\n<h2>런타임 구성.</h2>\n<p>백엔드에서 진짜 빛을 발할 때죠. 하지만 나는 SSR (서버 측 렌더링) 및 SPA (단일 페이지 응용 프로그램) 프런트엔드에서 실행시 구성을 자주 사용해요. 앱이 로드되는 처음에 사용되고 외부 구성을 모두 포함해야 하며 환경에 따라 크게 달라질 수 있어요. 여기서 순간적인 환경의 강점이 발휘되어 더 큰 유연성과 적응성을 제공해 줍니다.</p>\n<h2>어떻게 구성하나요?</h2>\n<p>그래서 정확히 구성(configuration)이 뭔가요? <code>.env</code> 파일을 알죠… 아니라면 <code>.toml</code>이나 <code>.json</code>, <code>.ini</code>이 있겠죠? 안돼, 그냥 <code>.ts</code> 파일을 만들고 그 안에서 객체를 내보내요. 하지만 기다려봐요. 파일을 git에 커밋해야 하나요? 환경마다 파일을 만들고 비밀 데이터를 숨길까요?</p>\n<p>최고의 형식에 대해 전쟁을 벌일 수 있지만, 사실은 별로 중요하지 않아요. 읽기 쉽고 확장 가능하며 텍스트로 저장할 수 있는 것이면 충분히 좋아요. 당신이 원하는 대로 하세요. 하지만 저장 및 사용 전략은 상당히 중요해요.</p>\n<p>저장 측면에서, Kubernetes (k8s), Docker Swarm 또는 일반 Docker를 사용하는 경우, 아마도 configs와 secrets에 익숙할 겁니다. 이를 통해 코드와 실행 중인 컨테이너에 파일이나 폴더를 첨부할 수 있어요. 대부분의 어려움은 개발 환경이나 프로덕션 환경에 새로운 구성을 배포할 때 발생한다고 생각해요.</p>\n<h2>확인, 확인, 확인</h2>\n<p>설정은 선언부터 시작돼요. 그것만이 필요한 거예요. 백엔드에서 데이터베이스를 호출해야 한다면, 이 데이터베이스에 인증하는 데 필요한 것을 알아내서 설정 선언에 넣어보세요. 그 결과는 무엇일까요? 앱이 충돌하게 되는 거죠 — 이게 바로 좋은 일이에요. 이를 통해 누락된 또는 잘못된 구성을 조기에 확인할 수 있어요.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:960/1*hDRj2PnNe94Krj76Az67lQ.gif\" alt=\"image\"></p>\n<p>다음으로 필요한 필드를 구성 파일에 추가해야 합니다. 검증 라이브러리를 사용하거나 더 좋은 방법으로 (비밀 광고 경고) 제 라이브러리를 사용하여 검증을 처리하세요.</p>\n<h2>병합, 때때로 시간을 절약합니다</h2>\n<p>기본 PORT가 항상 설정되어 있는데 설정하지 않을 때는 어떻게 할까요? 당연히 그 기본값을 정의하는 것이 도움이 됩니다. 그런데 그 후에 어떻게 병합하죠? lodash를 사용하거나 더 나은 방법으로 (계속 언급하다 보면 짜증나지 않고 내 생각처럼 되기 시작한다는 말이 있습니다).</p>\n<h2>개발자에 대한 생각은 뭐야? 그보다 더 있을까?</h2>\n<p>물론이죠. 물어주셔서 감사합니다. 제 현재 주 언어는 TypeScript이기 때문에 그것에서 최선을 다해야겠죠. 상상해보세요! 전체 구성이 타입으로 정의된 것을 볼 수 있다면 얼마나 멋진가요. 예를 들어 Zod로 유효성을 검사하는 사람들은 이미 이 편한 삶을 살고 있어요. 제 라이브러리를 사용하면 어떤 유효성 검사 라이브러리라도 손쉽게 적용할 수 있답니다.</p>\n<p>trpc 무신, 정말 천재적이에요. 그의 코드를 그냥 복사하여 사용하면 구성을 결과로 유도해낼 수 있어요. 마법 같죠.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:960/1*7sjOuoIpBuH3KTlkUFt1QQ.gif\" alt=\"이미지\"></p>\n<h2>개발 환경을 언급했어요. 커밋할까 말까?</h2>\n<p>안 돼요. 정말로요. OPENAPI_KEY를 즉시 훔치고, 일주일 후엔 길거리에서 구걸하게 될 거에요. 비밀 저장소 솔루션을 사용해주세요. 1Password, Google Cloud, Amazon, Infisical, dotenv.org, 그리고 여러 다른 멋진 프로젝트들이 안전하게 시크릿을 저장하고 공유할 수 있게 해줘요.</p>\n<p>package.json에 설정 스크립트를 포함해서 시크릿의 정확한 버전을 다운로드할 수 있게 해주세요. 또한, 충돌을 피하기 위해 버전을 업데이트하고 git에서 충돌을 피하도록 하는 업로드 스크립트도 포함해주세요. 나중에 감사를 말할 거예요. 저는 이 방법을 여러 해 동안 사용해왔고, 로컬 설정을 플래시 드라이브나 Slack을 통해 공유하는 데 돌아갈 수 없을 거예요.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:960/1*CR7GClSquXaYgsn6gmGv6Q.gif\" alt=\"image\"></p>\n<h2>좋아 좋아, 이제 다른 무거운 npm 패키지에 대해 말씀드릴게요</h2>\n<p>실제로, 이 패키지는 종속성이 전혀 없으며 TypeScript를 사용하고 아마도 번들러를 사용해야 합니다. 일반적으로 위에서 언급한 모든 문제를 해결해 줍니다 (물론 개발 환경은 제외하고요). 이 패키지를 사용하면 다음과 같은 장점을 얻을 수 있어요:</p>\n<ul>\n<li>3가지 소스 옵션: JSON 파일, JSON URL 및 객체를 지원하여 대부분의 사용 사례를 커버합니다.</li>\n<li>런타임 유효성 검사: Zod, Superstruct, Yup 등 인기있는 라이브러리와 함께 작동합니다.</li>\n<li>TypeScript IntelliSense: 유효성 검사 라이브러리의 변환기를 적용하고 해결된 유효성에 대한 힌트를 제공합니다.</li>\n<li>병합: 왜냐하면요? 기본값을 분리해서 가지고 있는 것이 상당히 멋지기 때문이죠. 기본값을 항상 유효성 검사 스키마에 넣을 수 있지만, 그러면 코드에 저장되어 있게 됩니다.</li>\n<li>완전히 테스트된 상태: 상용화 준비가 끝난 상태이며 이미 다수의 응용 프로그램에서 사용되었습니다.</li>\n<li>백엔드 및 프런트엔드 친화적: 양쪽 환경에서 매끄럽게 작동합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// file: state/config.ts</span>\n<span class=\"hljs-keyword\">import</span> { fromJSONFile } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@mrspartak/config\"</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> z <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"zod\"</span>\n\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fromJSONFile</span>({\n  <span class=\"hljs-attr\">path</span>: [<span class=\"hljs-string\">\"../config/default.json\"</span>, <span class=\"hljs-string\">\"../config/runtime.json\"</span>],\n  <span class=\"hljs-attr\">schema</span>: z.<span class=\"hljs-title function_\">object</span>({\n    <span class=\"hljs-attr\">db</span>: z.<span class=\"hljs-title function_\">object</span>({\n      <span class=\"hljs-attr\">host</span>: z.<span class=\"hljs-title function_\">string</span>(),\n      <span class=\"hljs-attr\">port</span>: z.<span class=\"hljs-title function_\">number</span>(),\n      <span class=\"hljs-attr\">username</span>: z.<span class=\"hljs-title function_\">string</span>(),\n      <span class=\"hljs-attr\">password</span>: z.<span class=\"hljs-title function_\">string</span>()\n    }),\n    <span class=\"hljs-attr\">app</span>: z.<span class=\"hljs-title function_\">object</span>({\n      <span class=\"hljs-attr\">port</span>: z.<span class=\"hljs-title function_\">number</span>().<span class=\"hljs-title function_\">optional</span>().<span class=\"hljs-title function_\">default</span>(<span class=\"hljs-number\">3000</span>)\n    })\n  }),\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> config\n\n\n\n<span class=\"hljs-comment\">// file: index.ts</span>\n<span class=\"hljs-comment\">// 해결된 구성을 가져옵니다</span>\n<span class=\"hljs-keyword\">import</span> config <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./state/config.js'</span>;\n\n<span class=\"hljs-comment\">// 애플리케이션에서 구성을 사용합니다</span>\n<span class=\"hljs-keyword\">import</span> db <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'some-db-provider'</span>;\n<span class=\"hljs-keyword\">const</span> dbClient = <span class=\"hljs-title function_\">db</span>(config.<span class=\"hljs-property\">db</span>); <span class=\"hljs-comment\">// 여기서 IntelliSense를 즐기세요!</span>\n</code></pre>\n<h2>그런데 JSON 지원만 있는 것 같아요. 환경 변수를 사용하는데 무거운 시스템 쓰레기가 많이 들어가지 않은 사랑스러운 방법이 있을까요?</h2>\n<p>객체와 작업하는 것을 지원하므로 env 객체를 함수에 전달할 수 있어요. 다른 .env 파서를 다시 작성하는 것이 이상할 수 있겠죠. 시장에 이미 테스트된 많은 것들이 있으니까요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// file: state/config.ts</span>\n<span class=\"hljs-keyword\">import</span> { fromObject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@mrspartak/config\"</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> z <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"zod\"</span>\n\n<span class=\"hljs-keyword\">const</span> schema = z\n  .<span class=\"hljs-title function_\">object</span>({\n    <span class=\"hljs-attr\">NODE_ENV</span>: z.<span class=\"hljs-title function_\">enum</span>([<span class=\"hljs-string\">\"development\"</span>, <span class=\"hljs-string\">\"production\"</span>]),\n    <span class=\"hljs-attr\">DB_HOST</span>: z.<span class=\"hljs-title function_\">string</span>(),\n    <span class=\"hljs-attr\">DB_PORT</span>: z.<span class=\"hljs-title function_\">number</span>(),\n    <span class=\"hljs-attr\">DB_USER</span>: z.<span class=\"hljs-title function_\">string</span>(),\n    <span class=\"hljs-attr\">DB_PASSWORD</span>: z.<span class=\"hljs-title function_\">string</span>(),\n    <span class=\"hljs-attr\">APP_PORT</span>: z.<span class=\"hljs-title function_\">number</span>().<span class=\"hljs-title function_\">default</span>(<span class=\"hljs-number\">3000</span>),\n  })\n  .<span class=\"hljs-title function_\">transform</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> ({\n    <span class=\"hljs-attr\">environment</span>: data.<span class=\"hljs-property\">NODE_ENV</span>,\n    <span class=\"hljs-attr\">port</span>: data.<span class=\"hljs-property\">APP_PORT</span>,\n    <span class=\"hljs-attr\">db</span>: {\n      <span class=\"hljs-attr\">host</span>: data.<span class=\"hljs-property\">DB_HOST</span>,\n      <span class=\"hljs-attr\">port</span>: data.<span class=\"hljs-property\">DB_PORT</span>,\n      <span class=\"hljs-attr\">user</span>: data.<span class=\"hljs-property\">DB_USER</span>,\n      <span class=\"hljs-attr\">password</span>: data.<span class=\"hljs-property\">DB_PASSWORD</span>,\n    },\n  }));\n\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fromObject</span>({\n  <span class=\"hljs-attr\">data</span>: process.<span class=\"hljs-property\">env</span>,\n  schema\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> config\n\n\n<span class=\"hljs-comment\">// file index.ts</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dotenv/config'</span>\n<span class=\"hljs-comment\">// ! dotenv 이후에 설정이로드되어야 하므로 process.env가 채워집니다.</span>\n<span class=\"hljs-keyword\">import</span> config <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./state/config.js'</span>;\n\n<span class=\"hljs-comment\">// 애플리케이션에서 구성 사용하기</span>\n<span class=\"hljs-keyword\">import</span> db <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'some-db-provider'</span>;\n<span class=\"hljs-keyword\">const</span> dbClient = <span class=\"hljs-title function_\">db</span>(config.<span class=\"hljs-property\">db</span>); <span class=\"hljs-comment\">// 여기서 IntelliSense를 즐기세요!</span>\n</code></pre>\n<h2>프론트엔드를 언급했는데, 노드 파일 API를 사용한 것 같아요. 빌드가 깨질 거에요.</h2>\n<p>네. 그렇습니다. 따로 내보내는 방법이 있습니다. (만약 다른 더 나은 해결책을 아시면 연락 주세요)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 파일: state/config.ts</span>\n<span class=\"hljs-keyword\">import</span> { fromObject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@mrspartak/config/web\"</span>; <span class=\"hljs-comment\">// 라이브러리의 별도 빌드</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> z <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"zod\"</span>\n\n<span class=\"hljs-keyword\">const</span> schema = z\n  .<span class=\"hljs-title function_\">object</span>({\n    <span class=\"hljs-attr\">API_URL</span>: z.<span class=\"hljs-title function_\">string</span>(),\n  })\n\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fromObject</span>({\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">env</span>, <span class=\"hljs-comment\">// vite의 예제</span>\n  schema\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> config\n</code></pre>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:960/1*ipkgq4adHLjucIErFR2buA.gif\" alt=\"이미지\"></p>\n</body>\n</html>\n"},"__N_SSG":true}