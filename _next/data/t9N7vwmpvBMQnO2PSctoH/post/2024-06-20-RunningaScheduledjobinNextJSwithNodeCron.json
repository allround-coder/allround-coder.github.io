{"pageProps":{"post":{"title":"NextJS에서 Node Cron을 사용해 예약 작업 실행하기","description":"","date":"2024-06-20 01:35","slug":"2024-06-20-RunningaScheduledjobinNextJSwithNodeCron","content":"\n\n![2024-06-20-RunningaScheduledjobinNextJSwithNodeCron](/assets/img/2024-06-20-RunningaScheduledjobinNextJSwithNodeCron_0.png)\n\nNext.js에서 Cron 작업을 소개합니다. Vercel Cron과 같은 외부 서비스를 의존하지 않고 Next.js 프레임워크 내에서 예약된 작업을 통합하는 주제입니다. Cron 작업은 데이터 가져오기, 이메일 알림, 또는 웹 애플리케이션에서 시스템 유지보수와 같은 반복적인 작업을 자동화하는 데 중요한 역할을 합니다. Vercel은 내장된 cron과 유사한 기능을 제공하지만 Next.js 내에서 cron 작업을 직접 구현하는 방법을 이해하면 애플리케이션의 예약된 작업에 더 많은 유연성과 제어를 제공할 수 있습니다. 이 블로그 포스트에서는 cron 작업의 기본 원리를 살펴보고 Node.js를 사용하여 Next.js 프로젝트에 이를 원활하게 통합하는 방법을 보여드리겠습니다. 함께 알아보겠습니다!\n\n**단계 1**\n\n필요한 패키지를 설치하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm i node-cron\n```\n\n단계 2\n\n서버.js 설정\n\n```js\nconst express = require('express');\nconst next = require('next');\nconst axios = require('axios');\n\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({ dev });\nconst handle = app.getRequestHandler();\n\n//\nconst http = require('http');\nconst socketIO = require('socket.io');\n//\n\napp.prepare().then(async () => {\n    const server = express();\n    const httpServer = http.createServer(server);\n\n    // 스케줄러\n    const runScheduler = async () => {\n        try {\n            const response = await axios.post(`${당신의_기본_URL}/api/services/scheduler`,\n                {\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    server.all('*', (req, res) => {\n        return handle(req, res);\n    });\n\n    const PORT = process.env.PORT || 3000;\n    httpServer.listen(PORT, () => {\n        console.log(`서버가 http://localhost:${PORT}에서 실행 중입니다.`);\n\n        runScheduler();\n    });\n});\n```\n\n<div class=\"content-ad\"></div>\n\n스텝 3\n\n'api/services/scheduler' 경로에 라우트를 생성하세요.\n\n```js\nimport { NextResponse } from \"next/server\";\n\nvar cron = require('node-cron');\n\nexport async function POST(req, res) {\n\n    try {\n\n        cron.schedule('*/20 * * * *', async () => {\n\n            console.log('')\n            console.log('######################################')\n            console.log('#                                    #')\n            console.log('# 매 20분마다 스케줄러 실행됨              #')\n            console.log('#                                    #')\n            console.log('######################################')\n            console.log('')\n\n            // 여기에서 작업을 수행하세요\n        });\n\n        return NextResponse.json({ data: '성공', status: 200 });\n\n    } catch (error) {\n        console.log(error)\n        return NextResponse.json({ error: error }, { status: 500 })\n    }\n\n}\n```\n\n- 크론 타이밍은 Crontab.guru를 통해 설정할 수 있습니다. — 크론 스케줄 표현식 생성기\n\n<div class=\"content-ad\"></div>\n\nNext.js에서 cron 작업을 구현하는 것을 살펴봐 주셔서 감사합니다. 이 가이드가 Next.js 애플리케이션에서 예약 작업을 활용하는 데 유용한 통찰을 제공했기를 바랍니다. 궁금한 점이 있거나 도전에 직면하거나 단순히 생각을 공유하고 싶다면 망설이지 말고 연락해 주세요. 귀하의 피드백은 저희에게 매우 소중합니다. 귀하와 같은 개발자들을 위해 콘텐츠를 만들어 가는 데 큰 영감을 받습니다. 즐거운 코딩하세요!\n\n참고 자료\n\n- node-cron — npm (npmjs.com)","ogImage":{"url":"/assets/img/2024-06-20-RunningaScheduledjobinNextJSwithNodeCron_0.png"},"coverImage":"/assets/img/2024-06-20-RunningaScheduledjobinNextJSwithNodeCron_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-20-RunningaScheduledjobinNextJSwithNodeCron_0.png\" alt=\"2024-06-20-RunningaScheduledjobinNextJSwithNodeCron\"></p>\n<p>Next.js에서 Cron 작업을 소개합니다. Vercel Cron과 같은 외부 서비스를 의존하지 않고 Next.js 프레임워크 내에서 예약된 작업을 통합하는 주제입니다. Cron 작업은 데이터 가져오기, 이메일 알림, 또는 웹 애플리케이션에서 시스템 유지보수와 같은 반복적인 작업을 자동화하는 데 중요한 역할을 합니다. Vercel은 내장된 cron과 유사한 기능을 제공하지만 Next.js 내에서 cron 작업을 직접 구현하는 방법을 이해하면 애플리케이션의 예약된 작업에 더 많은 유연성과 제어를 제공할 수 있습니다. 이 블로그 포스트에서는 cron 작업의 기본 원리를 살펴보고 Node.js를 사용하여 Next.js 프로젝트에 이를 원활하게 통합하는 방법을 보여드리겠습니다. 함께 알아보겠습니다!</p>\n<p><strong>단계 1</strong></p>\n<p>필요한 패키지를 설치하세요.</p>\n<pre><code class=\"hljs language-js\">npm i node-cron\n</code></pre>\n<p>단계 2</p>\n<p>서버.js 설정</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> next = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'next'</span>);\n<span class=\"hljs-keyword\">const</span> axios = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'axios'</span>);\n\n<span class=\"hljs-keyword\">const</span> dev = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> !== <span class=\"hljs-string\">'production'</span>;\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">next</span>({ dev });\n<span class=\"hljs-keyword\">const</span> handle = app.<span class=\"hljs-title function_\">getRequestHandler</span>();\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);\n<span class=\"hljs-keyword\">const</span> socketIO = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'socket.io'</span>);\n<span class=\"hljs-comment\">//</span>\n\napp.<span class=\"hljs-title function_\">prepare</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">async</span> () => {\n    <span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-title function_\">express</span>();\n    <span class=\"hljs-keyword\">const</span> httpServer = http.<span class=\"hljs-title function_\">createServer</span>(server);\n\n    <span class=\"hljs-comment\">// 스케줄러</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">runScheduler</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${당신의_기본_URL}</span>/api/services/scheduler`</span>,\n                {\n                    <span class=\"hljs-attr\">headers</span>: {\n                        <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json\"</span>\n                    }\n                }\n            )\n        } <span class=\"hljs-keyword\">catch</span> (error) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error)\n        }\n    }\n\n    server.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-string\">'*'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">handle</span>(req, res);\n    });\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PORT</span> = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">3000</span>;\n    httpServer.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`서버가 http://localhost:<span class=\"hljs-subst\">${PORT}</span>에서 실행 중입니다.`</span>);\n\n        <span class=\"hljs-title function_\">runScheduler</span>();\n    });\n});\n</code></pre>\n<p>스텝 3</p>\n<p>'api/services/scheduler' 경로에 라우트를 생성하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NextResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/server\"</span>;\n\n<span class=\"hljs-keyword\">var</span> cron = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'node-cron'</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">POST</span>(<span class=\"hljs-params\">req, res</span>) {\n\n    <span class=\"hljs-keyword\">try</span> {\n\n        cron.<span class=\"hljs-title function_\">schedule</span>(<span class=\"hljs-string\">'*/20 * * * *'</span>, <span class=\"hljs-keyword\">async</span> () => {\n\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">''</span>)\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'######################################'</span>)\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'#                                    #'</span>)\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'# 매 20분마다 스케줄러 실행됨              #'</span>)\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'#                                    #'</span>)\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'######################################'</span>)\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">''</span>)\n\n            <span class=\"hljs-comment\">// 여기에서 작업을 수행하세요</span>\n        });\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">data</span>: <span class=\"hljs-string\">'성공'</span>, <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">200</span> });\n\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">error</span>: error }, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n    }\n\n}\n</code></pre>\n<ul>\n<li>크론 타이밍은 Crontab.guru를 통해 설정할 수 있습니다. — 크론 스케줄 표현식 생성기</li>\n</ul>\n<p>Next.js에서 cron 작업을 구현하는 것을 살펴봐 주셔서 감사합니다. 이 가이드가 Next.js 애플리케이션에서 예약 작업을 활용하는 데 유용한 통찰을 제공했기를 바랍니다. 궁금한 점이 있거나 도전에 직면하거나 단순히 생각을 공유하고 싶다면 망설이지 말고 연락해 주세요. 귀하의 피드백은 저희에게 매우 소중합니다. 귀하와 같은 개발자들을 위해 콘텐츠를 만들어 가는 데 큰 영감을 받습니다. 즐거운 코딩하세요!</p>\n<p>참고 자료</p>\n<ul>\n<li>node-cron — npm (npmjs.com)</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}