{"pageProps":{"post":{"title":"빠른 BDD UI 테스트 프레임워크 with Playwright","description":"","date":"2024-05-15 10:41","slug":"2024-05-15-QuickBDDUITestFrameworkwithPlaywright","content":"\n\n<img src=\"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_0.png\" />\n\n```javascript\n// Playwright에서 Type Script와 Cucumber로 UI 테스트 프레임워크를 시작하는 빠른 가이드입니다.\n\n// 주의 사항:-\n// 이것은 테스트 자동화를 시작하기 위해 의도적으로 매우 기본적인 프레임워크 설정입니다.\n// 요구 사항에 맞게 향상시킬 수 있습니다.\n```\n\n# 필요한 것\n\n- Node 및 NPM 설치가 되어 있어야 합니다.\n- Visual Studio Code\n- Cucumber 익스텐션\n\n\n\n# 프로젝트 설정하기\n\n명령줄로 이동하여 다음을 실행하세요 (프로젝트 설정 및 종속성 설치):\n\n```js\n> mkdir playwright-bdd-project\n> cd playwright-bdd-project\n> npm init // 모든 기본 값 선택, 이렇게 하면 새 노드 프로젝트가 초기화되고 package.json이 생성됩니다\n> npm i @cucumber/cucumber -D // cucumber // -D 플래그는 이 설치를 package.json의 개발용 종속성으로 추가합니다\n> npm i @playwright/test -D // Playwright\n> npm i @types/node -D // Node용 Type Script\n> npm i ts-node -D // Node 실행 환경에서 Type Script 파일을 실행하기 위함\n> code . // 이 새롭게 설정한 프로젝트를 Visual Studio Code로 엽니다\n```\n\n<img src=\"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_1.png\" />\n\n\n\n# 프로젝트 구조\n\n다음과 같이 프로젝트에서 디렉터리 구조를 설정해주세요:\n\n```js\nroot \\ src \\ test \\ features // 여기에는 피쳐 파일이 위치합니다\nroot \\src \\ test \\steps // 여기에는 스텝 정의 파일이 위치합니다\nroot \\ reports // 여기에는 테스트 보고서가 생성됩니다\nroot \\ src \\ test \\ utils // 여기에는 유틸리티 코드를 유지합니다\n```\n\n![예시 이미지](/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_2.png)\n\n\n\n# 이 프레임워크의 핵심 — cucumber.json\n\n프로젝트 루트에 cucumber.json 파일을 생성하세요.\n\n루트 `cucumber.json\n\n```js\n{\n    \"default\": {\n        \"paths\": [\n            \"src/test/features/*.feature\" // 피처 파일의 위치\n        ],\n        \"dryRun\": false,\n        \"formatOptions\": {\n            \"snippetInterface\": \"async-await\" // async-await 형식으로 스텝 정의를 자동 생성하기 위함\n        },\n        \"require\": [\n            \"src/test/steps/*.ts\" // 피처 파일의 위치\n        ],\n        \"requireModule\": [\n            \"ts-node/register\" // 타입스크립트 파일에서 import를 사용할 수 있도록, node 실행 환경에서 이를 인식할 수 있게 함\n        ],\n        \"format\": [\n            [\"html\", \"reports/cucumber-report.html\"] // 테스트 실행 보고서가 여기에 생성됩니다\n        ]\n    }\n}\n```\n\n\n\n# Cucumber Extension 설정.json 파일에 Feature 파일 및 Step Definitions 경로 업데이트\n\n이를 통해 Cucumber 확장 프로그램이 Feature 및 해당하는 Step Definitions 파일을 매핑하는 데 도움이 됩니다.\n\n```json\n// 참고:-\n// 아래에 표시된 것과 다를 수 있는 경우가 있습니다.\n\n{\n    \"workbench.colorTheme\": \"Quiet Light\",\n    \"files.autoSave\": \"afterDelay\",\n    \"workbench.iconTheme\": \"vscode-icons\",\n    \"playwright.reuseBrowser\": false,\n    \"playwright.showTrace\": false,\n    \"cucumber.features\": [\n        \"src/test/features/*.feature\" // Feature 파일의 위치\n    ],\n    \"cucumber.glue\": [\n        \"src/test/steps/*.ts\" // Step Definition 파일의 위치\n    ],\n    \"aws.telemetry\": false,\n    \"amazonQ.telemetry\": false,\n    \"explorer.confirmDelete\": false,\n    \"javascript.updateImportsOnFileMove.enabled\": \"always\"\n}\n```\n\n# Feature 파일\n\n\n\n\"root \\ src \\ test \\ features \\ search.feature\" 경로에 다음 기능 파일을 추가해 주세요.\n\n```js\nFeature: Basic search using google engine\n\n  Scenario: Search for a term\n    Given I am on the google search page\n    When I search for \"cucumber\"\n    Then the search results page should contain \"cucumber\"\n```\n\n# 단계 정의\n\n\"root \\ src \\ test \\ steps \\ search.ts\" 경로에 다음 단계 정의 파일을 추가해 주세요.\n\n\n\n\n```js\nimport { Given, When, Then } from '@cucumber/cucumber';\nimport { expect } from '@playwright/test';\nimport { page } from './hooks';\n\nGiven('I am on the google search page', async function () {\n    console.log('I am on the google search page');\n});\n\nWhen('I search for {string}', async function (string) {\n    console.log('I search for ' + string);\n    await page.getByLabel('Search', { exact: true }).click();\n    await page.getByLabel('Search', { exact: true }).fill(string);\n    await page.getByLabel('Google Search').first().click();\n\n});\n\nThen('the search results page should contain {string}', async function (string) {\n    console.log('the search results page should contain ' + string);\n    await page.getByRole('link', { name: 'Cucumber: BDD Testing &' }).click();\n    expect(page.url()).toContain('cucumber.io');\n});\n``` \n\n## Hooks\n\nAdd the following hooks file under: root \\ src \\ test \\ steps \\ hooks.ts\n\n```js\nimport { Before, After, AfterStep, BeforeStep, World } from \"@cucumber/cucumber\";\nimport { chromium, Page, Browser } from '@playwright/test';\nimport { addCommentToReport, addScreenshotToReport } from \"../utils/reporting\";\n\nlet browser : Browser;\nlet page : Page;\n\nBefore(async function () { // SETUP (Runs Before Every Test Scenario) \n    console.log('Before hook');\n    browser = await chromium.launch({headless: false});\n    page = await browser.newPage();\n    await page.goto('https://www.google.com');\n});\n\nAfter(async function () { // TEARDOWN (Runs After Every Test Scenario)\n    console.log('After hook');\n    await browser.close();\n});\n\n// RUNS BEFORE EVERY STEP\n// We are taking screenshop before every step and adding it to the test report\nBeforeStep(async function({pickle, pickleStep, gherkinDocument, testCaseStartedId, testStepId}) {\n    await addScreenshotToReport.call(this);\n    await addCommentToReport.call(this, 'BeforeStep hook: ' + pickleStep.text);\n})\n\n// RUNS AFTER EVERY STEP\n// We are taking screenshop after every step and adding it to the test report\nAfterStep(async function({pickle, pickleStep, gherkinDocument, result, testCaseStartedId, testStepId}) {\n    await addScreenshotToReport.call(this);\n    await addCommentToReport.call(this, 'AfterStep hook: ' + pickleStep.text + ' - ' + result.status);\n})\n\nexport { browser, page };\n```   \n  \n\n\n\n# 유틸리티\n\n아래의 유틸리티 파일을 다음 경로에 추가하세요: root \\ src \\ test \\ utils\\ reporting.ts\n\n```js\nimport { World } from \"@cucumber/cucumber\";\nimport { page } from \"../steps/hooks\";\n\n// 테스트 리포트에 스크린샷을 추가하는 함수\nexport async function addScreenshotToReport(this: World) {\n    this.attach(await page.screenshot({ fullPage: true }), 'image/png');\n}\n\n// 테스트 리포트에 코멘트를 추가하는 함수\nexport async function addCommentToReport(this: World, comment: string) {\n    this.attach(comment, 'text/plain');\n}\n```\n\n# 최종 설정은 이렇게 될 것입니다:\n\n\n\n\n![이미지](/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_3.png)\n\n# 테스트 실행\n\npackage.json에서 test 필드 값을 \"cucumber-js test\"로 설정하세요.\n\n```js\n \"scripts\": {\n    \"test\": \"cucumber-js test\"\n  },\n```\n\n\n\n터미널을 열고 (CTRL + J) `npm test`를 실행해주세요.\n\n이 명령을 통해 테스트가 실행됩니다.\n\n![이미지](/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_4.png)\n\n# 실행 보고서 유효성 검사\n\n\n\n루트 / 보고서 / 로 이동하셔서\n\n여기에서 최신 테스트 실행 보고서를 찾으실 수 있습니다.\n\n![보고서 이미지](/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_5.png)","ogImage":{"url":"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_0.png"},"coverImage":"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Playwright에서 Type Script와 Cucumber로 UI 테스트 프레임워크를 시작하는 빠른 가이드입니다.</span>\n\n<span class=\"hljs-comment\">// 주의 사항:-</span>\n<span class=\"hljs-comment\">// 이것은 테스트 자동화를 시작하기 위해 의도적으로 매우 기본적인 프레임워크 설정입니다.</span>\n<span class=\"hljs-comment\">// 요구 사항에 맞게 향상시킬 수 있습니다.</span>\n</code></pre>\n<h1>필요한 것</h1>\n<ul>\n<li>Node 및 NPM 설치가 되어 있어야 합니다.</li>\n<li>Visual Studio Code</li>\n<li>Cucumber 익스텐션</li>\n</ul>\n<h1>프로젝트 설정하기</h1>\n<p>명령줄로 이동하여 다음을 실행하세요 (프로젝트 설정 및 종속성 설치):</p>\n<pre><code class=\"hljs language-js\">> mkdir playwright-bdd-project\n> cd playwright-bdd-project\n> npm init <span class=\"hljs-comment\">// 모든 기본 값 선택, 이렇게 하면 새 노드 프로젝트가 초기화되고 package.json이 생성됩니다</span>\n> npm i @cucumber/cucumber -D <span class=\"hljs-comment\">// cucumber // -D 플래그는 이 설치를 package.json의 개발용 종속성으로 추가합니다</span>\n> npm i @playwright/test -D <span class=\"hljs-comment\">// Playwright</span>\n> npm i @types/node -D <span class=\"hljs-comment\">// Node용 Type Script</span>\n> npm i ts-node -D <span class=\"hljs-comment\">// Node 실행 환경에서 Type Script 파일을 실행하기 위함</span>\n> code . <span class=\"hljs-comment\">// 이 새롭게 설정한 프로젝트를 Visual Studio Code로 엽니다</span>\n</code></pre>\n<h1>프로젝트 구조</h1>\n<p>다음과 같이 프로젝트에서 디렉터리 구조를 설정해주세요:</p>\n<pre><code class=\"hljs language-js\">root \\ src \\ test \\ features <span class=\"hljs-comment\">// 여기에는 피쳐 파일이 위치합니다</span>\nroot \\src \\ test \\steps <span class=\"hljs-comment\">// 여기에는 스텝 정의 파일이 위치합니다</span>\nroot \\ reports <span class=\"hljs-comment\">// 여기에는 테스트 보고서가 생성됩니다</span>\nroot \\ src \\ test \\ utils <span class=\"hljs-comment\">// 여기에는 유틸리티 코드를 유지합니다</span>\n</code></pre>\n<p><img src=\"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_2.png\" alt=\"예시 이미지\"></p>\n<h1>이 프레임워크의 핵심 — cucumber.json</h1>\n<p>프로젝트 루트에 cucumber.json 파일을 생성하세요.</p>\n<p>루트 `cucumber.json</p>\n<pre><code class=\"hljs language-js\">{\n    <span class=\"hljs-string\">\"default\"</span>: {\n        <span class=\"hljs-string\">\"paths\"</span>: [\n            <span class=\"hljs-string\">\"src/test/features/*.feature\"</span> <span class=\"hljs-comment\">// 피처 파일의 위치</span>\n        ],\n        <span class=\"hljs-string\">\"dryRun\"</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-string\">\"formatOptions\"</span>: {\n            <span class=\"hljs-string\">\"snippetInterface\"</span>: <span class=\"hljs-string\">\"async-await\"</span> <span class=\"hljs-comment\">// async-await 형식으로 스텝 정의를 자동 생성하기 위함</span>\n        },\n        <span class=\"hljs-string\">\"require\"</span>: [\n            <span class=\"hljs-string\">\"src/test/steps/*.ts\"</span> <span class=\"hljs-comment\">// 피처 파일의 위치</span>\n        ],\n        <span class=\"hljs-string\">\"requireModule\"</span>: [\n            <span class=\"hljs-string\">\"ts-node/register\"</span> <span class=\"hljs-comment\">// 타입스크립트 파일에서 import를 사용할 수 있도록, node 실행 환경에서 이를 인식할 수 있게 함</span>\n        ],\n        <span class=\"hljs-string\">\"format\"</span>: [\n            [<span class=\"hljs-string\">\"html\"</span>, <span class=\"hljs-string\">\"reports/cucumber-report.html\"</span>] <span class=\"hljs-comment\">// 테스트 실행 보고서가 여기에 생성됩니다</span>\n        ]\n    }\n}\n</code></pre>\n<h1>Cucumber Extension 설정.json 파일에 Feature 파일 및 Step Definitions 경로 업데이트</h1>\n<p>이를 통해 Cucumber 확장 프로그램이 Feature 및 해당하는 Step Definitions 파일을 매핑하는 데 도움이 됩니다.</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-comment\">// 참고:-</span>\n<span class=\"hljs-comment\">// 아래에 표시된 것과 다를 수 있는 경우가 있습니다.</span>\n\n<span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"workbench.colorTheme\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Quiet Light\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"files.autoSave\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"afterDelay\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"workbench.iconTheme\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"vscode-icons\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"playwright.reuseBrowser\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"playwright.showTrace\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"cucumber.features\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-string\">\"src/test/features/*.feature\"</span> <span class=\"hljs-comment\">// Feature 파일의 위치</span>\n    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"cucumber.glue\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-string\">\"src/test/steps/*.ts\"</span> <span class=\"hljs-comment\">// Step Definition 파일의 위치</span>\n    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"aws.telemetry\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"amazonQ.telemetry\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"explorer.confirmDelete\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"javascript.updateImportsOnFileMove.enabled\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"always\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h1>Feature 파일</h1>\n<p>\"root \\ src \\ test \\ features \\ search.feature\" 경로에 다음 기능 파일을 추가해 주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Feature</span>: <span class=\"hljs-title class_\">Basic</span> search using google engine\n\n  <span class=\"hljs-title class_\">Scenario</span>: <span class=\"hljs-title class_\">Search</span> <span class=\"hljs-keyword\">for</span> a term\n    <span class=\"hljs-title class_\">Given</span> I am on the google search page\n    <span class=\"hljs-title class_\">When</span> I search <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">\"cucumber\"</span>\n    <span class=\"hljs-title class_\">Then</span> the search results page should contain <span class=\"hljs-string\">\"cucumber\"</span>\n</code></pre>\n<h1>단계 정의</h1>\n<p>\"root \\ src \\ test \\ steps \\ search.ts\" 경로에 다음 단계 정의 파일을 추가해 주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Given</span>, <span class=\"hljs-title class_\">When</span>, <span class=\"hljs-title class_\">Then</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@cucumber/cucumber'</span>;\n<span class=\"hljs-keyword\">import</span> { expect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@playwright/test'</span>;\n<span class=\"hljs-keyword\">import</span> { page } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./hooks'</span>;\n\n<span class=\"hljs-title class_\">Given</span>(<span class=\"hljs-string\">'I am on the google search page'</span>, <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'I am on the google search page'</span>);\n});\n\n<span class=\"hljs-title class_\">When</span>(<span class=\"hljs-string\">'I search for {string}'</span>, <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">string</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'I search for '</span> + string);\n    <span class=\"hljs-keyword\">await</span> page.<span class=\"hljs-title function_\">getByLabel</span>(<span class=\"hljs-string\">'Search'</span>, { <span class=\"hljs-attr\">exact</span>: <span class=\"hljs-literal\">true</span> }).<span class=\"hljs-title function_\">click</span>();\n    <span class=\"hljs-keyword\">await</span> page.<span class=\"hljs-title function_\">getByLabel</span>(<span class=\"hljs-string\">'Search'</span>, { <span class=\"hljs-attr\">exact</span>: <span class=\"hljs-literal\">true</span> }).<span class=\"hljs-title function_\">fill</span>(string);\n    <span class=\"hljs-keyword\">await</span> page.<span class=\"hljs-title function_\">getByLabel</span>(<span class=\"hljs-string\">'Google Search'</span>).<span class=\"hljs-title function_\">first</span>().<span class=\"hljs-title function_\">click</span>();\n\n});\n\n<span class=\"hljs-title class_\">Then</span>(<span class=\"hljs-string\">'the search results page should contain {string}'</span>, <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">string</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'the search results page should contain '</span> + string);\n    <span class=\"hljs-keyword\">await</span> page.<span class=\"hljs-title function_\">getByRole</span>(<span class=\"hljs-string\">'link'</span>, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Cucumber: BDD Testing &#x26;'</span> }).<span class=\"hljs-title function_\">click</span>();\n    <span class=\"hljs-title function_\">expect</span>(page.<span class=\"hljs-title function_\">url</span>()).<span class=\"hljs-title function_\">toContain</span>(<span class=\"hljs-string\">'cucumber.io'</span>);\n});\n</code></pre>\n<h2>Hooks</h2>\n<p>Add the following hooks file under: root \\ src \\ test \\ steps \\ hooks.ts</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Before</span>, <span class=\"hljs-title class_\">After</span>, <span class=\"hljs-title class_\">AfterStep</span>, <span class=\"hljs-title class_\">BeforeStep</span>, <span class=\"hljs-title class_\">World</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@cucumber/cucumber\"</span>;\n<span class=\"hljs-keyword\">import</span> { chromium, <span class=\"hljs-title class_\">Page</span>, <span class=\"hljs-title class_\">Browser</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@playwright/test'</span>;\n<span class=\"hljs-keyword\">import</span> { addCommentToReport, addScreenshotToReport } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../utils/reporting\"</span>;\n\n<span class=\"hljs-keyword\">let</span> browser : <span class=\"hljs-title class_\">Browser</span>;\n<span class=\"hljs-keyword\">let</span> page : <span class=\"hljs-title class_\">Page</span>;\n\n<span class=\"hljs-title class_\">Before</span>(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) { <span class=\"hljs-comment\">// SETUP (Runs Before Every Test Scenario) </span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Before hook'</span>);\n    browser = <span class=\"hljs-keyword\">await</span> chromium.<span class=\"hljs-title function_\">launch</span>({<span class=\"hljs-attr\">headless</span>: <span class=\"hljs-literal\">false</span>});\n    page = <span class=\"hljs-keyword\">await</span> browser.<span class=\"hljs-title function_\">newPage</span>();\n    <span class=\"hljs-keyword\">await</span> page.<span class=\"hljs-title function_\">goto</span>(<span class=\"hljs-string\">'https://www.google.com'</span>);\n});\n\n<span class=\"hljs-title class_\">After</span>(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) { <span class=\"hljs-comment\">// TEARDOWN (Runs After Every Test Scenario)</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'After hook'</span>);\n    <span class=\"hljs-keyword\">await</span> browser.<span class=\"hljs-title function_\">close</span>();\n});\n\n<span class=\"hljs-comment\">// RUNS BEFORE EVERY STEP</span>\n<span class=\"hljs-comment\">// We are taking screenshop before every step and adding it to the test report</span>\n<span class=\"hljs-title class_\">BeforeStep</span>(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">{pickle, pickleStep, gherkinDocument, testCaseStartedId, testStepId}</span>) {\n    <span class=\"hljs-keyword\">await</span> addScreenshotToReport.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>);\n    <span class=\"hljs-keyword\">await</span> addCommentToReport.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">'BeforeStep hook: '</span> + pickleStep.<span class=\"hljs-property\">text</span>);\n})\n\n<span class=\"hljs-comment\">// RUNS AFTER EVERY STEP</span>\n<span class=\"hljs-comment\">// We are taking screenshop after every step and adding it to the test report</span>\n<span class=\"hljs-title class_\">AfterStep</span>(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">{pickle, pickleStep, gherkinDocument, result, testCaseStartedId, testStepId}</span>) {\n    <span class=\"hljs-keyword\">await</span> addScreenshotToReport.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>);\n    <span class=\"hljs-keyword\">await</span> addCommentToReport.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">'AfterStep hook: '</span> + pickleStep.<span class=\"hljs-property\">text</span> + <span class=\"hljs-string\">' - '</span> + result.<span class=\"hljs-property\">status</span>);\n})\n\n<span class=\"hljs-keyword\">export</span> { browser, page };\n</code></pre>\n<h1>유틸리티</h1>\n<p>아래의 유틸리티 파일을 다음 경로에 추가하세요: root \\ src \\ test \\ utils\\ reporting.ts</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">World</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@cucumber/cucumber\"</span>;\n<span class=\"hljs-keyword\">import</span> { page } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../steps/hooks\"</span>;\n\n<span class=\"hljs-comment\">// 테스트 리포트에 스크린샷을 추가하는 함수</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addScreenshotToReport</span>(<span class=\"hljs-params\"><span class=\"hljs-variable language_\">this</span>: World</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">attach</span>(<span class=\"hljs-keyword\">await</span> page.<span class=\"hljs-title function_\">screenshot</span>({ <span class=\"hljs-attr\">fullPage</span>: <span class=\"hljs-literal\">true</span> }), <span class=\"hljs-string\">'image/png'</span>);\n}\n\n<span class=\"hljs-comment\">// 테스트 리포트에 코멘트를 추가하는 함수</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addCommentToReport</span>(<span class=\"hljs-params\"><span class=\"hljs-variable language_\">this</span>: World, comment: string</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">attach</span>(comment, <span class=\"hljs-string\">'text/plain'</span>);\n}\n</code></pre>\n<h1>최종 설정은 이렇게 될 것입니다:</h1>\n<p><img src=\"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_3.png\" alt=\"이미지\"></p>\n<h1>테스트 실행</h1>\n<p>package.json에서 test 필드 값을 \"cucumber-js test\"로 설정하세요.</p>\n<pre><code class=\"hljs language-js\"> <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"cucumber-js test\"</span>\n  },\n</code></pre>\n<p>터미널을 열고 (CTRL + J) <code>npm test</code>를 실행해주세요.</p>\n<p>이 명령을 통해 테스트가 실행됩니다.</p>\n<p><img src=\"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_4.png\" alt=\"이미지\"></p>\n<h1>실행 보고서 유효성 검사</h1>\n<p>루트 / 보고서 / 로 이동하셔서</p>\n<p>여기에서 최신 테스트 실행 보고서를 찾으실 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-15-QuickBDDUITestFrameworkwithPlaywright_5.png\" alt=\"보고서 이미지\"></p>\n</body>\n</html>\n"},"__N_SSG":true}