{"pageProps":{"post":{"title":"React에서 JWT 토큰을 로컬 스토리지에 저장하는 방법","description":"","date":"2024-05-12 19:15","slug":"2024-05-12-HowtostoreJWTTokeninLocalStorageforReact","content":"\n\n## 간단히 말해, JWT란 무엇인가요?\n\nJWT은 JSON Web Token의 약자입니다. 이것은 정보를 안전하게 JSON 객체로 파티 간에 전송하는 간결하고 자체 포함된 방법입니다. 웹 개발에서 인증 및 정보 교환에 일반적으로 사용됩니다.\n\n## 프론트엔드용 요약\n\n\n\n백엔드에서 관리되는 암호화된 JSON 객체로, 사용자 계정이 생성되거나 로그인할 때 Frontend로 전송됩니다. 이 토큰을 이용하면 사용자가 웹 서비스의 일부에 대한 권한/접속을 얻을 수 있습니다. 클라이언트 측에서 사용하기 위해 이를 Local storage, 세션 또는 쿠키에 저장할 수 있습니다 (각각에는 고유한 보안 문제가 있으니 더 자세히 알아보세요).\n\n또한 https://jwt.io/를 방문하여 토큰을 해독하고 내용을 확인할 수 있습니다.\n\n## 이 페이지는 이를 로컬 스토리지에 저장하는 내용입니다.\n\n토큰을 사용하면서, 성공적인 로그인 후에 액세스 토큰과 리프레시 토큰을 로컬 스토리지에 저장하려고 했습니다.\n\n\n\n개발자 도구를 열고 `Application -` Local storage를 클릭하면 저장소를 확인할 수 있습니다.\n\n# 실제 코드로 넘어가보겠습니다\n\n## 여기 styled-components를 사용하여 만든 Login.jsx 파일이 있습니다\n\n아직 토큰 기능 설정은 포함되어 있지 않습니다. 요소를 설정하고 Styled-components를 사용하여 스타일을 지정하는 방법의 기본 구조만 보여드립니다.\n\n\n\n만약 이와 같은 라이브러리를 사용한다면, 코드를 더 깔끔하고 효율적으로 작성할 수 있어요! 그러나 이 경우에는 React hook useState만을 사용했어요.\n\n```js\nimport React, { useState } from \"react\";\nimport { styled } from \"styled-components\";\n```\n\n```js\nexport const Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n \n  return (\n    <LoginContainer>\n      <h1>Login</h1>\n      <Form >\n        <label htmlFor=\"email\">Email</label>\n        <Input\n          type=\"email\"\n          id=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <label htmlFor=\"password\">Password</label>\n        <Input\n          type=\"password\"\n          id=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <Button>Login</Button>\n        <button>Logout</button>\n      </Form>\n    </LoginContainer>\n  );\n};\nconst LoginContainer = styled.section`\n  border: 1px solid black;\n  height: 400px;\n  width: 350px;\n  margin: 100px auto;\n  border-radius: 12px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n`;\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  height: 200px;\n`;\nconst Input = styled.input`\n  width: 240px;\n  height: 28px;\n  border-radius: 3px;\n  border-color: rgba(0, 0, 0, 0.2);\n  padding: 3px;\n`;\nconst Button = styled.button`\n  width: 200px;\n  border-color: rgba(0, 0, 0, 0.2);\n  height: 30px;\n  margin-top: 10px;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n```\n\n# 로그인 페이지 스타일링 결과\n\n\n\n<img src=\"/assets/img/2024-05-12-HowtostoreJWTTokeninLocalStorageforReact_0.png\" /> \n\n# handleSubmit 함수 생성\n\nhandleSubmit 함수를 만들어서 로그인 세부 정보를 서버로 전송했습니다(fetch는 아직 사용하지 않았습니다). e.preventDefault()를 사용하면 로그인 버튼을 클릭할 때 페이지가 새로고침되지 않도록 합니다.\n\n```js\nconst handleSubmit = (e) => {\n    e.preventDefault();\n}\n```\n\n\n\n```js\n// JSX\n<Form onSubmit={handleSubmit}>\n```\n\n## (handleSubmit 함수 추가) POST를 사용하여 데이터를 가져오고 헤더를 추가하기\n\n사용자 정보를 가져오기 위해 별도의 requestOptions 변수를 생성했습니다. 사용자 로그인이 성공하면 다음 작업을 수행합니다.\n\n- 사용자 이메일 및 비밀번호 입력 요소를 \" \"으로 초기화합니다.\n- console.log(data)를 사용하여 토큰을 검색합니다.\n- 접근 토큰 및 리프레시 토큰이 가져와졌음을 확인한 후, 구조분해 할당을 사용하여 이를 로컬 스토리지에 저장할 수 있습니다.\n- localStorage.setItem(\"_변수\", _저장값)\n- localStorage.getItem(\"_변수)\n\n\n\n```js\nconst handleSubmit = (e) => {\n    e.preventDefault();\n```\n\n```js\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        email: email,\n        password: password,\n      }),\n    };\n    fetch(INSERT_API_HERE, requestOptions)\n      .then((response) => response.json())\n      .then((data) => {\n        setEmail(\"\");\n        setPassword(\"\");\n        console.log(data);\n        // note using deconstructuring is better for cleaner code\n        const {access, refresh} = data.access_token;\n        localStorage.setItem(\"accessToken\", access);\n        localStorage.setItem(\"refreshToken\", refresh);\n      });\n    \n  };\n```\n\n마지막으로, CORS 오류와 같은 API 문제가 없다면 토큰이 로컬 스토리지에 저장되는 것을 확인할 수 있습니다. 로컬 스토리지는 브라우저의 개발자 도구를 통해 액세스할 수 있으며 “Application\"으로 이동하여 확인할 수 있습니다.\n\n이제 토큰이 있으므로 무엇을 할 수 있을까요? 영구적 로그인을 설정하거나, 헤더 UI를 사용자에 맞게 변경하거나, 인증된 클라이언트 페이지를 더욱 개선할 수 있습니다. 물론, 새로고침 시 네비게이션 바가 업데이트되지 않는 것을 방지하기 위해 Zustand 또는 Redux와 같은 상태 관리자를 사용하는 것이 좋습니다.\n\n\n\n당신은 여기에서 나의 persistent login 게시물에 대한 Zustand 설정을 확인할 수 있어요.\n\n# 추가: 로컬 스토리지 초기화\n\n```js\nconst handleLogout = () => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    alert(\"토큰이 제거되었습니다\");\n};\n```\n\n```js\n<button onClick={handleLogout}>로그아웃</button>\n```\n\n\n\n여기에 전체 코드가 있습니다.\n\n```js\nimport React, { useState } from \"react\";\nimport { styled } from \"styled-components\";\nimport { Navigate } from \"react-router-dom\";\n```\n\n```js\nexport const Login = ({ login }) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [navigate, setNavigate] = useState(false);\n  const LOGIN_URL = \"INSERT_YOUR_API\";\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        email: email,\n        password: password,\n      }),\n    };\n    fetch(LOGIN_URL, requestOptions)\n      .then((response) => response.json())\n      .then((data) => {\n        setEmail(\"\");\n        setPassword(\"\");\n        setNavigate(true)\n        // console.log(data);\n        // note using deconstructuring is better for cleaner code\n        const {access, refresh} = data.access_token;\n        localStorage.setItem(\"accessToken\", access);\n        localStorage.setItem(\"refreshToken\", refresh);\n      });\n      \n  };\n  const handleLogout = () => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    alert(\"Tokens have been removed\");\n  };\n  if (navigate) {\n    return <Navigate to=\"/signup\" />;\n  }\n  return (\n    <LoginContainer>\n      <h1>Login</h1>\n      <Form onSubmit={handleSubmit}>\n        <label htmlFor=\"email\">Email</label>\n        <Input\n          type=\"email\"\n          id=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <label htmlFor=\"password\">Password</label>\n        <Input\n          type=\"password\"\n          id=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <Button>Login</Button>\n        <button onClick={handleLogout}>Logout</button>\n      </Form>\n    </LoginContainer>\n  );\n};\nconst LoginContainer = styled.section`\n  border: 1px solid black;\n  height: 400px;\n  width: 350px;\n  margin: 100px auto;\n  border-radius: 12px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n`;\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  height: 200px;\n`;\nconst Input = styled.input`\n  width: 240px;\n  height: 28px;\n  border-radius: 3px;\n  border-color: rgba(0, 0, 0, 0.2);\n  padding: 3px;\n`;\nconst Button = styled.button`\n  width: 200px;\n  border-color: rgba(0, 0, 0, 0.2);\n  height: 30px;\n  margin-top: 10px;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n```","ogImage":{"url":"/assets/img/2024-05-12-HowtostoreJWTTokeninLocalStorageforReact_0.png"},"coverImage":"/assets/img/2024-05-12-HowtostoreJWTTokeninLocalStorageforReact_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>간단히 말해, JWT란 무엇인가요?</h2>\n<p>JWT은 JSON Web Token의 약자입니다. 이것은 정보를 안전하게 JSON 객체로 파티 간에 전송하는 간결하고 자체 포함된 방법입니다. 웹 개발에서 인증 및 정보 교환에 일반적으로 사용됩니다.</p>\n<h2>프론트엔드용 요약</h2>\n<p>백엔드에서 관리되는 암호화된 JSON 객체로, 사용자 계정이 생성되거나 로그인할 때 Frontend로 전송됩니다. 이 토큰을 이용하면 사용자가 웹 서비스의 일부에 대한 권한/접속을 얻을 수 있습니다. 클라이언트 측에서 사용하기 위해 이를 Local storage, 세션 또는 쿠키에 저장할 수 있습니다 (각각에는 고유한 보안 문제가 있으니 더 자세히 알아보세요).</p>\n<p>또한 <a href=\"https://jwt.io/%EB%A5%BC\" rel=\"nofollow\" target=\"_blank\">https://jwt.io/를</a> 방문하여 토큰을 해독하고 내용을 확인할 수 있습니다.</p>\n<h2>이 페이지는 이를 로컬 스토리지에 저장하는 내용입니다.</h2>\n<p>토큰을 사용하면서, 성공적인 로그인 후에 액세스 토큰과 리프레시 토큰을 로컬 스토리지에 저장하려고 했습니다.</p>\n<p>개발자 도구를 열고 <code>Application -</code> Local storage를 클릭하면 저장소를 확인할 수 있습니다.</p>\n<h1>실제 코드로 넘어가보겠습니다</h1>\n<h2>여기 styled-components를 사용하여 만든 Login.jsx 파일이 있습니다</h2>\n<p>아직 토큰 기능 설정은 포함되어 있지 않습니다. 요소를 설정하고 Styled-components를 사용하여 스타일을 지정하는 방법의 기본 구조만 보여드립니다.</p>\n<p>만약 이와 같은 라이브러리를 사용한다면, 코드를 더 깔끔하고 효율적으로 작성할 수 있어요! 그러나 이 경우에는 React hook useState만을 사용했어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { styled } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"styled-components\"</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Login</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [email, setEmail] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">const</span> [password, setPassword] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n \n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">LoginContainer</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Login<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Form</span> ></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"email\"</span>></span>Email<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Input</span>\n          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span>\n          <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"email\"</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{email}</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setEmail(e.target.value)}\n        />\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"password\"</span>></span>Password<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Input</span>\n          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span>\n          <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"password\"</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{password}</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setPassword(e.target.value)}\n        />\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>></span>Login<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>Logout<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Form</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">LoginContainer</span>></span></span>\n  );\n};\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">LoginContainer</span> = styled.<span class=\"hljs-property\">section</span><span class=\"hljs-string\">`\n  border: 1px solid black;\n  height: 400px;\n  width: 350px;\n  margin: 100px auto;\n  border-radius: 12px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n`</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Form</span> = styled.<span class=\"hljs-property\">form</span><span class=\"hljs-string\">`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  height: 200px;\n`</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Input</span> = styled.<span class=\"hljs-property\">input</span><span class=\"hljs-string\">`\n  width: 240px;\n  height: 28px;\n  border-radius: 3px;\n  border-color: rgba(0, 0, 0, 0.2);\n  padding: 3px;\n`</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Button</span> = styled.<span class=\"hljs-property\">button</span><span class=\"hljs-string\">`\n  width: 200px;\n  border-color: rgba(0, 0, 0, 0.2);\n  height: 30px;\n  margin-top: 10px;\n  &#x26;:hover {\n    cursor: pointer;\n  }\n`</span>;\n</code></pre>\n<h1>로그인 페이지 스타일링 결과</h1>\n<h1>handleSubmit 함수 생성</h1>\n<p>handleSubmit 함수를 만들어서 로그인 세부 정보를 서버로 전송했습니다(fetch는 아직 사용하지 않았습니다). e.preventDefault()를 사용하면 로그인 버튼을 클릭할 때 페이지가 새로고침되지 않도록 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSubmit</span> = (<span class=\"hljs-params\">e</span>) => {\n    e.<span class=\"hljs-title function_\">preventDefault</span>();\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// JSX</span>\n&#x3C;<span class=\"hljs-title class_\">Form</span> onSubmit={handleSubmit}>\n</code></pre>\n<h2>(handleSubmit 함수 추가) POST를 사용하여 데이터를 가져오고 헤더를 추가하기</h2>\n<p>사용자 정보를 가져오기 위해 별도의 requestOptions 변수를 생성했습니다. 사용자 로그인이 성공하면 다음 작업을 수행합니다.</p>\n<ul>\n<li>사용자 이메일 및 비밀번호 입력 요소를 \" \"으로 초기화합니다.</li>\n<li>console.log(data)를 사용하여 토큰을 검색합니다.</li>\n<li>접근 토큰 및 리프레시 토큰이 가져와졌음을 확인한 후, 구조분해 할당을 사용하여 이를 로컬 스토리지에 저장할 수 있습니다.</li>\n<li>localStorage.setItem(\"_변수\", _저장값)</li>\n<li>localStorage.getItem(\"_변수)</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSubmit</span> = (<span class=\"hljs-params\">e</span>) => {\n    e.<span class=\"hljs-title function_\">preventDefault</span>();\n</code></pre>\n<pre><code class=\"hljs language-js\">    <span class=\"hljs-keyword\">const</span> requestOptions = {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"POST\"</span>,\n      <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json\"</span> },\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({\n        <span class=\"hljs-attr\">email</span>: email,\n        <span class=\"hljs-attr\">password</span>: password,\n      }),\n    };\n    <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-variable constant_\">INSERT_API_HERE</span>, requestOptions)\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> response.<span class=\"hljs-title function_\">json</span>())\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n        <span class=\"hljs-title function_\">setEmail</span>(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-title function_\">setPassword</span>(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n        <span class=\"hljs-comment\">// note using deconstructuring is better for cleaner code</span>\n        <span class=\"hljs-keyword\">const</span> {access, refresh} = data.<span class=\"hljs-property\">access_token</span>;\n        <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">\"accessToken\"</span>, access);\n        <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">\"refreshToken\"</span>, refresh);\n      });\n    \n  };\n</code></pre>\n<p>마지막으로, CORS 오류와 같은 API 문제가 없다면 토큰이 로컬 스토리지에 저장되는 것을 확인할 수 있습니다. 로컬 스토리지는 브라우저의 개발자 도구를 통해 액세스할 수 있으며 “Application\"으로 이동하여 확인할 수 있습니다.</p>\n<p>이제 토큰이 있으므로 무엇을 할 수 있을까요? 영구적 로그인을 설정하거나, 헤더 UI를 사용자에 맞게 변경하거나, 인증된 클라이언트 페이지를 더욱 개선할 수 있습니다. 물론, 새로고침 시 네비게이션 바가 업데이트되지 않는 것을 방지하기 위해 Zustand 또는 Redux와 같은 상태 관리자를 사용하는 것이 좋습니다.</p>\n<p>당신은 여기에서 나의 persistent login 게시물에 대한 Zustand 설정을 확인할 수 있어요.</p>\n<h1>추가: 로컬 스토리지 초기화</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleLogout</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">removeItem</span>(<span class=\"hljs-string\">\"accessToken\"</span>);\n    <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">removeItem</span>(<span class=\"hljs-string\">\"refreshToken\"</span>);\n    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"토큰이 제거되었습니다\"</span>);\n};\n</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;button onClick={handleLogout}>로그아웃&#x3C;/button>\n</code></pre>\n<p>여기에 전체 코드가 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { styled } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"styled-components\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Navigate</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-router-dom\"</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Login</span> = (<span class=\"hljs-params\">{ login }</span>) => {\n  <span class=\"hljs-keyword\">const</span> [email, setEmail] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">const</span> [password, setPassword] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">const</span> [navigate, setNavigate] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">LOGIN_URL</span> = <span class=\"hljs-string\">\"INSERT_YOUR_API\"</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSubmit</span> = (<span class=\"hljs-params\">e</span>) => {\n    e.<span class=\"hljs-title function_\">preventDefault</span>();\n    <span class=\"hljs-keyword\">const</span> requestOptions = {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"POST\"</span>,\n      <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json\"</span> },\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({\n        <span class=\"hljs-attr\">email</span>: email,\n        <span class=\"hljs-attr\">password</span>: password,\n      }),\n    };\n    <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-variable constant_\">LOGIN_URL</span>, requestOptions)\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> response.<span class=\"hljs-title function_\">json</span>())\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n        <span class=\"hljs-title function_\">setEmail</span>(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-title function_\">setPassword</span>(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-title function_\">setNavigate</span>(<span class=\"hljs-literal\">true</span>)\n        <span class=\"hljs-comment\">// console.log(data);</span>\n        <span class=\"hljs-comment\">// note using deconstructuring is better for cleaner code</span>\n        <span class=\"hljs-keyword\">const</span> {access, refresh} = data.<span class=\"hljs-property\">access_token</span>;\n        <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">\"accessToken\"</span>, access);\n        <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">\"refreshToken\"</span>, refresh);\n      });\n      \n  };\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleLogout</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">removeItem</span>(<span class=\"hljs-string\">\"accessToken\"</span>);\n    <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">removeItem</span>(<span class=\"hljs-string\">\"refreshToken\"</span>);\n    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"Tokens have been removed\"</span>);\n  };\n  <span class=\"hljs-keyword\">if</span> (navigate) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Navigate</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/signup\"</span> /></span></span>;\n  }\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">LoginContainer</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Login<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleSubmit}</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"email\"</span>></span>Email<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Input</span>\n          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span>\n          <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"email\"</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{email}</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setEmail(e.target.value)}\n        />\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"password\"</span>></span>Password<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Input</span>\n          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span>\n          <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"password\"</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{password}</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =></span> setPassword(e.target.value)}\n        />\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>></span>Login<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleLogout}</span>></span>Logout<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Form</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">LoginContainer</span>></span></span>\n  );\n};\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">LoginContainer</span> = styled.<span class=\"hljs-property\">section</span><span class=\"hljs-string\">`\n  border: 1px solid black;\n  height: 400px;\n  width: 350px;\n  margin: 100px auto;\n  border-radius: 12px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n`</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Form</span> = styled.<span class=\"hljs-property\">form</span><span class=\"hljs-string\">`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  height: 200px;\n`</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Input</span> = styled.<span class=\"hljs-property\">input</span><span class=\"hljs-string\">`\n  width: 240px;\n  height: 28px;\n  border-radius: 3px;\n  border-color: rgba(0, 0, 0, 0.2);\n  padding: 3px;\n`</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Button</span> = styled.<span class=\"hljs-property\">button</span><span class=\"hljs-string\">`\n  width: 200px;\n  border-color: rgba(0, 0, 0, 0.2);\n  height: 30px;\n  margin-top: 10px;\n  &#x26;:hover {\n    cursor: pointer;\n  }\n`</span>;\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}