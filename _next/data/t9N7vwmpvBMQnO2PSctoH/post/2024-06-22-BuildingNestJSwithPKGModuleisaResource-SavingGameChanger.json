{"pageProps":{"post":{"title":"PKG 모듈로 NestJS 빌드하기 리소스 절약의 게임 체인저","description":"","date":"2024-06-22 05:55","slug":"2024-06-22-BuildingNestJSwithPKGModuleisaResource-SavingGameChanger","content":"\n\n<img src=\"/assets/img/2024-06-22-BuildingNestJSwithPKGModuleisaResource-SavingGameChanger_0.png\" />\n\n## 소개\n\nNestJS 개발 세계에서 효율성과 자원 관리는 매우 중요합니다. 기존의 NestJS 애플리케이션을 구축하는 전통적인 방법은 종종 오랜 시간이 소요되고 상당한 자원을 소비하는 경향이 있습니다. 가장 큰 문제 중 하나는 node_modules 디렉토리의 크기인데, 이는 많은 종속성으로 인해 지나치게 커질 수 있습니다. 이로 인해 빌드 시간이 느려지는 것뿐만 아니라 프로젝트를 관리하고 배포하기 어렵게 만들기도 합니다.\n\n여기에 pkg가 등장합니다. pkg를 활용하면 NestJS 애플리케이션 구축을 간소화하고 종속성 처리를 자동화하며 워크플로우를 최적화할 수 있습니다. 이 현대적인 방법은 일반적인 빌드 방법과 대조적으로 node_modules 디렉토리와 전체 프로젝트 크기를 대폭 줄여 자원을 효율적으로 활용하는 더 효율적이고 자원을 아끼는 대안을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n또한, `pkg`는 코드를 바이너리로 컴파일하여 NestJS 앱을 독립적으로 만들어줍니다. 이를 통해 node_modules를 별도로 설치할 필요 없이 어디에서나 직접 실행할 수 있게 됩니다. 이 가변성은 응용 프로그램을 다양한 환경에 쉽게 배포할 수 있도록 하며, 설정 시간을 줄이고 의존성 관리와 관련된 잠재적인 문제를 줄일 수 있습니다.\n\n# 전통적인 빌드 과정\n\n전통적으로 NestJS 애플리케이션을 빌드하는 과정에는 여러 단계가 포함됩니다:\n\n- 의존성 설치: `npm install`을 사용하여 package.json에 나열된 모든 필수 패키지를 다운로드하고 설치합니다. 이로 인해 의존성이 많은 응용 프로그램의 경우 큰 node_modules 디렉토리가 생성될 수 있습니다.\n- 코드 변환: TypeScript를 사용하여 코드를 TypeScript에서 JavaScript로 변환합니다.\n- 배포: 번들 파일과 node_modules를 서버 또는 배포 환경에 업로드합니다.\n\n<div class=\"content-ad\"></div>\n\n이 방법은 효과적이지만 단점도 있습니다:\n\n- 크기: node_modules 디렉토리가 매우 커져서 응용 프로그램을 관리하고 배포하기 어려울 수 있습니다.\n- 시간: 각 단계는 종속성 설치부터 코드 변환 및 번들링까지 시간이 걸립니다.\n- 복잡성: 종속성 관리와 호환성 확보가 프로젝트가 커짐에 따라 어려울 수 있습니다.\n\n# PKG 접근법\n\npkg는 NestJS 애플리케이션을 단일 이진 파일로 컴파일하는 현대적인 대안을 제공합니다. 이것이 프로세스를 어떻게 간소화하는지 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n- 단일 이진 파일: pkg는 응용 프로그램 및 모든 종속성을 독립적인 이진 파일로 컴파일합니다. 이 이진 파일은 node_modules를 설치할 필요 없이 직접 실행할 수 있습니다.\n- 종속성 관리 축소: 종속성을 단일 이진 파일로 패키징함으로써, pkg는 배포 중 별도의 node_modules 디렉토리가 필요하지 않도록 합니다. 이를 통해 다양한 환경에서 종속성을 관리하는 복잡성을 줄일 수 있습니다.\n- 빠른 배포: 응용 프로그램이 이진 파일로 컴파일되기 때문에 배포는 더 빠르고 간단해집니다. 대상 환경에 종속성을 설치할 필요가 없어 배포 프로세스가 간소화됩니다.\n- 향상된 보안: 응용 프로그램을 이진 파일로 패키징하면 공격 표면을 줄이고 종속성을 빌드 시간에 잠금으로 설정하여 보안을 강화할 수 있습니다.\n\n## 안내: pkg 및 Docker를 사용하여 NestJS 응용 프로그램 구축 및 배포하기\n\n본 안내서에서는 NestJS 응용 프로그램을 설정하고, 리소스 효율성을 높이기 위해 pkg를 사용하여 최적화하고, Windows에서 Docker를 사용하여 배포하는 과정을 안내합니다.\n\n## 사전 요구 사항\n\n<div class=\"content-ad\"></div>\n\n시작하기 전에 다음 항목들이 설치되어 있는지 확인하세요:\n\n- Node.js: 시스템에 Node.js가 설치되어 있는지 확인하세요. nodejs.org에서 다운로드할 수 있습니다.\n- NestJS: npm을 사용하여 NestJS를 글로벌로 설치하세요.\n\n```js\nnpm install -g @nestjs/cli\n```\n\n3. npm pkg: NestJS 애플리케이션을 독립적인 이진 파일로 패키징하는 데 전역으로 pkg를 설치하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install -g pkg\n```\n\n4. Windows용 Docker Desktop: Docker Hub에서 Docker Desktop을 다운로드하여 설치하세요.\n\n## 단계 1: 새로운 NestJS 프로젝트 생성\n\n먼저, NestJS CLI를 사용하여 새로운 NestJS 프로젝트를 만들어보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nnest new nestjs-pkg-app\ncd nestjs-pkg-app\n```\n\n이렇게 하면 nestjs-pkg-app 디렉토리에 새로운 NestJS 프로젝트가 생성됩니다.\n\n## 단계 2: pkg를 사용하여 응용 프로그램 컴파일하기\n\n다음으로, 프로젝트 디렉토리로 이동하여 pkg를 사용하여 dist 폴더 내의 main.js 파일을 컴파일합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ncd nestjs-pkg-app\nnpm run build\npkg ./dist/main.js --out-path ./compiled\n```\n\n이 명령어는 NestJS 애플리케이션을 컴파일하여 compiled 디렉토리에 독립 실행 바이너리(main)로 만듭니다.\n\n## 단계 3: NestJS 애플리케이션을 도커화\n\n이제 NestJS 애플리케이션을 패키징하고 도커 컨테이너에서 실행할 수 있도록 Dockerfile을 생성해보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n프로젝트 디렉토리(nestjs-pkg-app)에 Dockerfile이라는 파일을 만들어주세요. 아래 내용을 넣어주세요:\n\n```js\nFROM node:14-alpine\n\nWORKDIR /usr/src/app\n\nCOPY ./compiled ./compiled\n\nEXPOSE 3000\n\nCMD [\"/compiled/main\"]\n```\n\n## 단계 4: Docker 컨테이너 빌드 및 실행하기\n\n작성한 Dockerfile을 사용하여 Docker 이미지를 빌드해보세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n도커 파일에 작성된 지시 사항을 기반으로 nestjs-pkg-app라는 이름의 도커 이미지를 빌드하는 명령어입니다.\n\n이제 빌드된 이미지를 사용하여 도커 컨테이너를 실행하십시오.\n\ndocker run -p 3000:3000 nestjs-pkg-app\n\n<div class=\"content-ad\"></div>\n\n이 명령은 Docker 컨테이너를 시작하고 nestjs-pkg-app이라는 이름으로 지정하며, 로컬 머신의 포트 3000을 컨테이너 내부의 포트 3000에 매핑합니다.\n\n## 단계 5: NestJS 애플리케이션에 액세스\n\n웹 브라우저를 열고 http://localhost:3000으로 이동하여 Docker 컨테이너 내에서 실행 중인 NestJS 애플리케이션에 액세스하세요.\n\n# 비교\n\n<div class=\"content-ad\"></div>\n\n이 섹션에서는 전통적인 빌드 방식과 NestJS 애플리케이션을 빌드하고 배포하는 데 npm pkg를 사용하는 방법을 비교해보겠습니다.\n\n컴파일 없이: node_modules로 인해 대용량(약 200MB)\n\n![image](/assets/img/2024-06-22-BuildingNestJSwithPKGModuleisaResource-SavingGameChanger_1.png)\n\n컴파일 포함: 모든 종속성이 하나의 바이너리로 번들링되어 있는 속한 크기(약 51.5MB)입니다.\n\n<div class=\"content-ad\"></div>\n\n```\n![Building NestJS with PKG Module](/assets/img/2024-06-22-BuildingNestJSwithPKGModuleisaResource-SavingGameChanger_2.png)\n\n이 상세한 비교는 사이즈를 중점으로 하여 기존 빌드와 pkg 간의 선택 시 혜택 및 고려 사항을 독자들에게 명확히 전달해줄 것입니다.\n\n# 결론\n\n요약하면, NestJS 애플리케이션을 빌드하는 데 npm pkg를 활용하는 것은 개발 관행의 중요한 진보를 의미합니다. node_modules 디렉토리의 크기를 줄이고 싱글 이진 파일로의 간단한 배포를 통해, npm pkg는 개발자에게 더 효율적이고 확장 가능한 접근 방식을 제공합니다. 자원 사용량을 최적화하고 배포 워크플로우를 간소화하거나 보안을 강화하려는 경우, npm pkg는 현대적인 개발 요구에 부합하는 매력적인 솔루션을 제공합니다.\n\n\n<div class=\"content-ad\"></div>\n\n오늘 npm pkg를 활용하여 더 효율적이고 자원을 절약하는 NestJS 개발의 잠재력을 발휘해보세요. 당신의 프로젝트와 팀이 그것에 감사할 것입니다.","ogImage":{"url":"/assets/img/2024-06-22-BuildingNestJSwithPKGModuleisaResource-SavingGameChanger_0.png"},"coverImage":"/assets/img/2024-06-22-BuildingNestJSwithPKGModuleisaResource-SavingGameChanger_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>소개</h2>\n<p>NestJS 개발 세계에서 효율성과 자원 관리는 매우 중요합니다. 기존의 NestJS 애플리케이션을 구축하는 전통적인 방법은 종종 오랜 시간이 소요되고 상당한 자원을 소비하는 경향이 있습니다. 가장 큰 문제 중 하나는 node_modules 디렉토리의 크기인데, 이는 많은 종속성으로 인해 지나치게 커질 수 있습니다. 이로 인해 빌드 시간이 느려지는 것뿐만 아니라 프로젝트를 관리하고 배포하기 어렵게 만들기도 합니다.</p>\n<p>여기에 pkg가 등장합니다. pkg를 활용하면 NestJS 애플리케이션 구축을 간소화하고 종속성 처리를 자동화하며 워크플로우를 최적화할 수 있습니다. 이 현대적인 방법은 일반적인 빌드 방법과 대조적으로 node_modules 디렉토리와 전체 프로젝트 크기를 대폭 줄여 자원을 효율적으로 활용하는 더 효율적이고 자원을 아끼는 대안을 제공합니다.</p>\n<p>또한, <code>pkg</code>는 코드를 바이너리로 컴파일하여 NestJS 앱을 독립적으로 만들어줍니다. 이를 통해 node_modules를 별도로 설치할 필요 없이 어디에서나 직접 실행할 수 있게 됩니다. 이 가변성은 응용 프로그램을 다양한 환경에 쉽게 배포할 수 있도록 하며, 설정 시간을 줄이고 의존성 관리와 관련된 잠재적인 문제를 줄일 수 있습니다.</p>\n<h1>전통적인 빌드 과정</h1>\n<p>전통적으로 NestJS 애플리케이션을 빌드하는 과정에는 여러 단계가 포함됩니다:</p>\n<ul>\n<li>의존성 설치: <code>npm install</code>을 사용하여 package.json에 나열된 모든 필수 패키지를 다운로드하고 설치합니다. 이로 인해 의존성이 많은 응용 프로그램의 경우 큰 node_modules 디렉토리가 생성될 수 있습니다.</li>\n<li>코드 변환: TypeScript를 사용하여 코드를 TypeScript에서 JavaScript로 변환합니다.</li>\n<li>배포: 번들 파일과 node_modules를 서버 또는 배포 환경에 업로드합니다.</li>\n</ul>\n<p>이 방법은 효과적이지만 단점도 있습니다:</p>\n<ul>\n<li>크기: node_modules 디렉토리가 매우 커져서 응용 프로그램을 관리하고 배포하기 어려울 수 있습니다.</li>\n<li>시간: 각 단계는 종속성 설치부터 코드 변환 및 번들링까지 시간이 걸립니다.</li>\n<li>복잡성: 종속성 관리와 호환성 확보가 프로젝트가 커짐에 따라 어려울 수 있습니다.</li>\n</ul>\n<h1>PKG 접근법</h1>\n<p>pkg는 NestJS 애플리케이션을 단일 이진 파일로 컴파일하는 현대적인 대안을 제공합니다. 이것이 프로세스를 어떻게 간소화하는지 살펴보겠습니다:</p>\n<ul>\n<li>단일 이진 파일: pkg는 응용 프로그램 및 모든 종속성을 독립적인 이진 파일로 컴파일합니다. 이 이진 파일은 node_modules를 설치할 필요 없이 직접 실행할 수 있습니다.</li>\n<li>종속성 관리 축소: 종속성을 단일 이진 파일로 패키징함으로써, pkg는 배포 중 별도의 node_modules 디렉토리가 필요하지 않도록 합니다. 이를 통해 다양한 환경에서 종속성을 관리하는 복잡성을 줄일 수 있습니다.</li>\n<li>빠른 배포: 응용 프로그램이 이진 파일로 컴파일되기 때문에 배포는 더 빠르고 간단해집니다. 대상 환경에 종속성을 설치할 필요가 없어 배포 프로세스가 간소화됩니다.</li>\n<li>향상된 보안: 응용 프로그램을 이진 파일로 패키징하면 공격 표면을 줄이고 종속성을 빌드 시간에 잠금으로 설정하여 보안을 강화할 수 있습니다.</li>\n</ul>\n<h2>안내: pkg 및 Docker를 사용하여 NestJS 응용 프로그램 구축 및 배포하기</h2>\n<p>본 안내서에서는 NestJS 응용 프로그램을 설정하고, 리소스 효율성을 높이기 위해 pkg를 사용하여 최적화하고, Windows에서 Docker를 사용하여 배포하는 과정을 안내합니다.</p>\n<h2>사전 요구 사항</h2>\n<p>시작하기 전에 다음 항목들이 설치되어 있는지 확인하세요:</p>\n<ul>\n<li>Node.js: 시스템에 Node.js가 설치되어 있는지 확인하세요. nodejs.org에서 다운로드할 수 있습니다.</li>\n<li>NestJS: npm을 사용하여 NestJS를 글로벌로 설치하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">npm install -g @nestjs/cli\n</code></pre>\n<ol start=\"3\">\n<li>npm pkg: NestJS 애플리케이션을 독립적인 이진 파일로 패키징하는 데 전역으로 pkg를 설치하세요.</li>\n</ol>\n<pre><code class=\"hljs language-js\">npm install -g pkg\n</code></pre>\n<ol start=\"4\">\n<li>Windows용 Docker Desktop: Docker Hub에서 Docker Desktop을 다운로드하여 설치하세요.</li>\n</ol>\n<h2>단계 1: 새로운 NestJS 프로젝트 생성</h2>\n<p>먼저, NestJS CLI를 사용하여 새로운 NestJS 프로젝트를 만들어보겠습니다.</p>\n<pre><code class=\"hljs language-js\">nest <span class=\"hljs-keyword\">new</span> nestjs-pkg-app\ncd nestjs-pkg-app\n</code></pre>\n<p>이렇게 하면 nestjs-pkg-app 디렉토리에 새로운 NestJS 프로젝트가 생성됩니다.</p>\n<h2>단계 2: pkg를 사용하여 응용 프로그램 컴파일하기</h2>\n<p>다음으로, 프로젝트 디렉토리로 이동하여 pkg를 사용하여 dist 폴더 내의 main.js 파일을 컴파일합니다.</p>\n<pre><code class=\"hljs language-js\">cd nestjs-pkg-app\nnpm run build\npkg ./dist/main.<span class=\"hljs-property\">js</span> --out-path ./compiled\n</code></pre>\n<p>이 명령어는 NestJS 애플리케이션을 컴파일하여 compiled 디렉토리에 독립 실행 바이너리(main)로 만듭니다.</p>\n<h2>단계 3: NestJS 애플리케이션을 도커화</h2>\n<p>이제 NestJS 애플리케이션을 패키징하고 도커 컨테이너에서 실행할 수 있도록 Dockerfile을 생성해보겠습니다.</p>\n<p>프로젝트 디렉토리(nestjs-pkg-app)에 Dockerfile이라는 파일을 만들어주세요. 아래 내용을 넣어주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">node</span>:<span class=\"hljs-number\">14</span>-alpine\n\n<span class=\"hljs-variable constant_\">WORKDIR</span> /usr/src/app\n\n<span class=\"hljs-variable constant_\">COPY</span> ./compiled ./compiled\n\n<span class=\"hljs-variable constant_\">EXPOSE</span> <span class=\"hljs-number\">3000</span>\n\n<span class=\"hljs-variable constant_\">CMD</span> [<span class=\"hljs-string\">\"/compiled/main\"</span>]\n</code></pre>\n<h2>단계 4: Docker 컨테이너 빌드 및 실행하기</h2>\n<p>작성한 Dockerfile을 사용하여 Docker 이미지를 빌드해보세요.</p>\n<pre><code class=\"hljs language-js\">도커 파일에 작성된 지시 사항을 기반으로 nestjs-pkg-app라는 이름의 도커 이미지를 빌드하는 명령어입니다.\n\n이제 빌드된 이미지를 사용하여 도커 컨테이너를 실행하십시오.\n\ndocker run -p <span class=\"hljs-number\">3000</span>:<span class=\"hljs-number\">3000</span> nestjs-pkg-app\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\n이 명령은 <span class=\"hljs-title class_\">Docker</span> 컨테이너를 시작하고 nestjs-pkg-app이라는 이름으로 지정하며, 로컬 머신의 포트 <span class=\"hljs-number\">3000</span>을 컨테이너 내부의 포트 <span class=\"hljs-number\">3000</span>에 매핑합니다.\n\n## 단계 <span class=\"hljs-number\">5</span>: <span class=\"hljs-title class_\">NestJS</span> 애플리케이션에 액세스\n\n웹 브라우저를 열고 <span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//localhost:3000으로 이동하여 Docker 컨테이너 내에서 실행 중인 NestJS 애플리케이션에 액세스하세요.</span>\n\n# 비교\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\n이 섹션에서는 전통적인 빌드 방식과 <span class=\"hljs-title class_\">NestJS</span> 애플리케이션을 빌드하고 배포하는 데 npm pkg를 사용하는 방법을 비교해보겠습니다.\n\n컴파일 없이: node_modules로 인해 대용량(약 200MB)\n\n![image](<span class=\"hljs-regexp\">/assets/img</span><span class=\"hljs-regexp\">/2024-06-22-BuildingNestJSwithPKGModuleisaResource-SavingGameChanger_1.png)\n\n컴파일 포함: 모든 종속성이 하나의 바이너리로 번들링되어 있는 속한 크기(약 51.5MB)입니다.\n\n&#x3C;div class=\"content-ad\">&#x3C;/</span>div>\n\n</code></pre>\n<p><img src=\"/assets/img/2024-06-22-BuildingNestJSwithPKGModuleisaResource-SavingGameChanger_2.png\" alt=\"Building NestJS with PKG Module\"></p>\n<p>이 상세한 비교는 사이즈를 중점으로 하여 기존 빌드와 pkg 간의 선택 시 혜택 및 고려 사항을 독자들에게 명확히 전달해줄 것입니다.</p>\n<h1>결론</h1>\n<p>요약하면, NestJS 애플리케이션을 빌드하는 데 npm pkg를 활용하는 것은 개발 관행의 중요한 진보를 의미합니다. node_modules 디렉토리의 크기를 줄이고 싱글 이진 파일로의 간단한 배포를 통해, npm pkg는 개발자에게 더 효율적이고 확장 가능한 접근 방식을 제공합니다. 자원 사용량을 최적화하고 배포 워크플로우를 간소화하거나 보안을 강화하려는 경우, npm pkg는 현대적인 개발 요구에 부합하는 매력적인 솔루션을 제공합니다.</p>\n<p>오늘 npm pkg를 활용하여 더 효율적이고 자원을 절약하는 NestJS 개발의 잠재력을 발휘해보세요. 당신의 프로젝트와 팀이 그것에 감사할 것입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}