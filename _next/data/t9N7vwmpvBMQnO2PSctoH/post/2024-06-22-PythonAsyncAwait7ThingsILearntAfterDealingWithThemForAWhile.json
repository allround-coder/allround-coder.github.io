{"pageProps":{"post":{"title":"Python Async Await  사용해본 후 배운 7가지 교훈","description":"","date":"2024-06-22 02:38","slug":"2024-06-22-PythonAsyncAwait7ThingsILearntAfterDealingWithThemForAWhile","content":"\n\n\n![이미지](/assets/img/2024-06-22-PythonAsyncAwait7ThingsILearntAfterDealingWithThemForAWhile_0.png)\n\n# 1) \"async def\"를 사용하면 비동기 함수를 작성할 수 있습니다\n\n```python\ndef hello():\n    return 'hello'\n\nprint(hello)  # <function hello at 0x100ce8e00>\n```\n\n^ 여기에 일반 함수가 있습니다\n\n\n<div class=\"content-ad\"></div>\n\n```python\nasync def hello():\n    return 'hello'\n\nprint(hello)  # <function hello at 0x102b58e00>\n```\n\n여기에 async def 키워드를 사용하여 생성된 비동기 함수가 있습니다. 출력했을 때에도 여전히 함수 형식으로 출력되는 것을 볼 수 있습니다.\n\n# 2) 비동기 함수 호출은 코루틴을 반환합니다.\n\n```python\ndef hello():\n    return 'hello'\n\nprint(hello())  # hello\n```\n\n<div class=\"content-ad\"></div>\n\n^ 일반 함수 호출 예입니다 - 'hello' 문자열을 반환하는단 뜻이에요\n\n```js\nasync def hello():\n    return 'hello'\n\nprint(hello())  \n\n# <coroutine object hello at 0x10276f320>\n\n# RuntimeWarning: coroutine 'hello' was never awaited\n```\n\n^ 일반 함수처럼 async 함수를 호출할 때 반환 값 대신 코루틴 객체가 반환됩니다.\n\n^ 또한 RuntimeWarning: coroutine 'hello' was never awaited 메시지가 표시됩니다 - 코루틴은 일반적으로 await를 사용하여 대기해야 합니다(잠시 후에 설명하겠습니다)\n\n<div class=\"content-ad\"></div>\n\n# 3) 코루틴의 의미\n\n코루틴은 일시적으로 일시 중단 및 재개될 수있는 특별한 기능인 함수입니다. 다른 작업이 실행 중일 때 일시 중단 및 재개될 수 있는 기능이기도 합니다. 또한 다른 코루틴에게 일시적으로 제어를 양도할 수도 있습니다.\n\n이를 통해 우리는 동시에 하나 이상의 작업을 동시에 실행할 수 있게 됩니다.\n\n# 4) “asyncio.run()”을 사용하여 코루틴을 직접 실행할 수 있습니다\n\n<div class=\"content-ad\"></div>\n\n```js\nasync def hello():\n    return 'hello'\n\nprint(hello())\n\n# <coroutine object hello at 0x10276f320>\n\n# RuntimeWarning: coroutine 'hello' was never awaited\n```\n\n^ 이것이 코루틴을 실행하는 방법이 아닙니다.\n\n```js\nimport asyncio\n\nasync def hello():\n    print('running hello coroutine')\n    return 'hello'\n\nasyncio.run(hello()) # running hello coroutine\n```\n\n^ 이것이 코루틴을 실행하는 방법입니다.\n\n<div class=\"content-ad\"></div>\n\n주의 — asyncio는 파이썬 표준 라이브러리의 일부이므로 Python과 함께 설치되어 있으며이 작동하도록 추가로 제3자 라이브러리를 설치할 필요가 없습니다. asyncio를 가져와서 사용할 수 있습니다.\n\n# 5) 코루틴 실행에 \"await\" 사용하기\n\nhello 코루틴과 main 코루틴이 있다고 가정해 봅시다.\n\n```python\nimport asyncio\n\nasync def hello():\n    print('hello 코루틴 실행 중')\n    return 'hello'\n\nasync def main():\n    x = await hello()\n    print(x)\n\nasyncio.run(main())    \n\n# hello 코루틴 실행 중\n# hello\n```\n\n<div class=\"content-ad\"></div>\n\n^ 다른 코루틴 메인 안에서 hello를 호출하려면 await 키워드를 사용해야 합니다.\n\nawait hello()를 \"hello()가 끝날 때까지 기다렸다가 반환 값을 x에 할당한다\"고 생각할 수 있습니다. 이것이 x를 출력할 때 hello를 얻는 이유입니다.\n\n# 6) \"await\"는 \"async def\"를 사용하여 정의된 함수에서만 사용할 수 있습니다\n\n```python\nimport asyncio\n\nasync def hello():\n    print('hello 코루틴 실행 중')\n    return 'hello'\n\nasync def test():\n    x = await hello()\n    print(x)\n\nasyncio.run(test())\n```\n\n<div class=\"content-ad\"></div>\n\n여기서는 일반 함수 테스트 안에 await를 사용하려고 시도했기 때문에 SyntaxError가 발생합니다.\n\nawait 키워드를 사용하려면 async def를 사용하여 정의된 async 함수 내에 있어야 합니다.\n\nasyncio.gather를 사용하여 둘 이상의 코루틴을 동시에 실행할 수 있습니다.\n\n```python\nimport asyncio\n\nasync def hello():\n    print('시작')\n    await asyncio.sleep(1)\n    print('끝')\n\nasync def main():\n    await asyncio.gather(hello(), hello(), hello())\n\nasyncio.run(main())\n\n# 시작\n# 시작\n# 시작\n# 끝\n# 끝\n# 끝\n```\n\n<div class=\"content-ad\"></div>\n\n- 이 스크립트를 실행할 때, 먼저 3개의 start가 출력됩니다.\n- 약 1초 지연 후, 3개의 end가 출력됩니다.\n\n무슨 일이 일어나고 있을까요?\n\n- asyncio.sleep(1)은 우리의 코루틴을 1초간 재우게 합니다.\n- asyncio.gather는 3개의 hello() 코루틴을 동시에 동시에 실행시킵니다.\n- 이것이 모든 start가 함께 출력되고, 모든 end도 함께 출력되는 이유입니다.\n\n# 만약 제작자로서 저를 지원하고 싶다면\n\n<div class=\"content-ad\"></div>\n\n- 이 이야기에 대해 50번 박수를 쳐주세요\n- 여러분의 생각을 말씀해 주세요\n- 이야기에서 가장 좋았던 부분을 강조해 주세요\n\n감사합니다! 이 작은 행동들이 큰 도움이 되고, 정말 감사드립니다!\n\nYouTube: https://www.youtube.com/@zlliu246\n\nLinkedIn: https://www.linkedin.com/in/zlliu/\n\n<div class=\"content-ad\"></div>\n\n제 Ebooks: [https://zlliu.co/ebooks](https://zlliu.co/ebooks)","ogImage":{"url":"/assets/img/2024-06-22-PythonAsyncAwait7ThingsILearntAfterDealingWithThemForAWhile_0.png"},"coverImage":"/assets/img/2024-06-22-PythonAsyncAwait7ThingsILearntAfterDealingWithThemForAWhile_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-22-PythonAsyncAwait7ThingsILearntAfterDealingWithThemForAWhile_0.png\" alt=\"이미지\"></p>\n<h1>1) \"async def\"를 사용하면 비동기 함수를 작성할 수 있습니다</h1>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hello</span>():\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello'</span>\n\n<span class=\"hljs-built_in\">print</span>(hello)  <span class=\"hljs-comment\"># &#x3C;function hello at 0x100ce8e00></span>\n</code></pre>\n<p>^ 여기에 일반 함수가 있습니다</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hello</span>():\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello'</span>\n\n<span class=\"hljs-built_in\">print</span>(hello)  <span class=\"hljs-comment\"># &#x3C;function hello at 0x102b58e00></span>\n</code></pre>\n<p>여기에 async def 키워드를 사용하여 생성된 비동기 함수가 있습니다. 출력했을 때에도 여전히 함수 형식으로 출력되는 것을 볼 수 있습니다.</p>\n<h1>2) 비동기 함수 호출은 코루틴을 반환합니다.</h1>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hello</span>():\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello'</span>\n\n<span class=\"hljs-built_in\">print</span>(hello())  <span class=\"hljs-comment\"># hello</span>\n</code></pre>\n<p>^ 일반 함수 호출 예입니다 - 'hello' 문자열을 반환하는단 뜻이에요</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">hello</span>():\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello'</span>\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">hello</span>())  \n\n# &#x3C;coroutine object hello at <span class=\"hljs-number\">0x10276f320</span>>\n\n# <span class=\"hljs-title class_\">RuntimeWarning</span>: coroutine <span class=\"hljs-string\">'hello'</span> was never awaited\n</code></pre>\n<p>^ 일반 함수처럼 async 함수를 호출할 때 반환 값 대신 코루틴 객체가 반환됩니다.</p>\n<p>^ 또한 RuntimeWarning: coroutine 'hello' was never awaited 메시지가 표시됩니다 - 코루틴은 일반적으로 await를 사용하여 대기해야 합니다(잠시 후에 설명하겠습니다)</p>\n<h1>3) 코루틴의 의미</h1>\n<p>코루틴은 일시적으로 일시 중단 및 재개될 수있는 특별한 기능인 함수입니다. 다른 작업이 실행 중일 때 일시 중단 및 재개될 수 있는 기능이기도 합니다. 또한 다른 코루틴에게 일시적으로 제어를 양도할 수도 있습니다.</p>\n<p>이를 통해 우리는 동시에 하나 이상의 작업을 동시에 실행할 수 있게 됩니다.</p>\n<h1>4) “asyncio.run()”을 사용하여 코루틴을 직접 실행할 수 있습니다</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">hello</span>():\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello'</span>\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">hello</span>())\n\n# &#x3C;coroutine object hello at <span class=\"hljs-number\">0x10276f320</span>>\n\n# <span class=\"hljs-title class_\">RuntimeWarning</span>: coroutine <span class=\"hljs-string\">'hello'</span> was never awaited\n</code></pre>\n<p>^ 이것이 코루틴을 실행하는 방법이 아닙니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">hello</span>():\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'running hello coroutine'</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello'</span>\n\nasyncio.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-title function_\">hello</span>()) # running hello coroutine\n</code></pre>\n<p>^ 이것이 코루틴을 실행하는 방법입니다.</p>\n<p>주의 — asyncio는 파이썬 표준 라이브러리의 일부이므로 Python과 함께 설치되어 있으며이 작동하도록 추가로 제3자 라이브러리를 설치할 필요가 없습니다. asyncio를 가져와서 사용할 수 있습니다.</p>\n<h1>5) 코루틴 실행에 \"await\" 사용하기</h1>\n<p>hello 코루틴과 main 코루틴이 있다고 가정해 봅시다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hello</span>():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'hello 코루틴 실행 중'</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello'</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    x = <span class=\"hljs-keyword\">await</span> hello()\n    <span class=\"hljs-built_in\">print</span>(x)\n\nasyncio.run(main())    \n\n<span class=\"hljs-comment\"># hello 코루틴 실행 중</span>\n<span class=\"hljs-comment\"># hello</span>\n</code></pre>\n<p>^ 다른 코루틴 메인 안에서 hello를 호출하려면 await 키워드를 사용해야 합니다.</p>\n<p>await hello()를 \"hello()가 끝날 때까지 기다렸다가 반환 값을 x에 할당한다\"고 생각할 수 있습니다. 이것이 x를 출력할 때 hello를 얻는 이유입니다.</p>\n<h1>6) \"await\"는 \"async def\"를 사용하여 정의된 함수에서만 사용할 수 있습니다</h1>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hello</span>():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'hello 코루틴 실행 중'</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello'</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test</span>():\n    x = <span class=\"hljs-keyword\">await</span> hello()\n    <span class=\"hljs-built_in\">print</span>(x)\n\nasyncio.run(test())\n</code></pre>\n<p>여기서는 일반 함수 테스트 안에 await를 사용하려고 시도했기 때문에 SyntaxError가 발생합니다.</p>\n<p>await 키워드를 사용하려면 async def를 사용하여 정의된 async 함수 내에 있어야 합니다.</p>\n<p>asyncio.gather를 사용하여 둘 이상의 코루틴을 동시에 실행할 수 있습니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hello</span>():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'시작'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'끝'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">await</span> asyncio.gather(hello(), hello(), hello())\n\nasyncio.run(main())\n\n<span class=\"hljs-comment\"># 시작</span>\n<span class=\"hljs-comment\"># 시작</span>\n<span class=\"hljs-comment\"># 시작</span>\n<span class=\"hljs-comment\"># 끝</span>\n<span class=\"hljs-comment\"># 끝</span>\n<span class=\"hljs-comment\"># 끝</span>\n</code></pre>\n<ul>\n<li>이 스크립트를 실행할 때, 먼저 3개의 start가 출력됩니다.</li>\n<li>약 1초 지연 후, 3개의 end가 출력됩니다.</li>\n</ul>\n<p>무슨 일이 일어나고 있을까요?</p>\n<ul>\n<li>asyncio.sleep(1)은 우리의 코루틴을 1초간 재우게 합니다.</li>\n<li>asyncio.gather는 3개의 hello() 코루틴을 동시에 동시에 실행시킵니다.</li>\n<li>이것이 모든 start가 함께 출력되고, 모든 end도 함께 출력되는 이유입니다.</li>\n</ul>\n<h1>만약 제작자로서 저를 지원하고 싶다면</h1>\n<ul>\n<li>이 이야기에 대해 50번 박수를 쳐주세요</li>\n<li>여러분의 생각을 말씀해 주세요</li>\n<li>이야기에서 가장 좋았던 부분을 강조해 주세요</li>\n</ul>\n<p>감사합니다! 이 작은 행동들이 큰 도움이 되고, 정말 감사드립니다!</p>\n<p>YouTube: <a href=\"https://www.youtube.com/@zlliu246\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/@zlliu246</a></p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/zlliu/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/zlliu/</a></p>\n<p>제 Ebooks: <a href=\"https://zlliu.co/ebooks\" rel=\"nofollow\" target=\"_blank\">https://zlliu.co/ebooks</a></p>\n</body>\n</html>\n"},"__N_SSG":true}