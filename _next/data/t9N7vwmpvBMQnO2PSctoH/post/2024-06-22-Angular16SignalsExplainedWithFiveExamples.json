{"pageProps":{"post":{"title":"Angular 16 Signals 완벽 설명 5가지 예제로 배우는 법","description":"","date":"2024-06-22 03:19","slug":"2024-06-22-Angular16SignalsExplainedWithFiveExamples","content":"\n\nMarkdown 형식으로 테이블 태그를 변경해 주세요.\n\n<div class=\"content-ad\"></div>\n\n시그널의 값은 항상 게터 함수를 통해 읽습니다. 이는 Angular이 시그널이 사용된 위치를 추적할 수 있게 합니다.\n\n그래서 이 개념을 실제로 적용하고 TypeScript에서 몇 가지 실용적인 예제로 배워봅시다:\n\n## 예제 1: 시그널을 사용하여 총 가격 업데이트하기\n\n가정해보죠. 사용자가 쇼핑 카트에 항목을 추가할 수 있는 전자 상거래 애플리케이션을 가지고 있다고 해봅시다. 항목의 총 가격을 표시하고 새 항목이 추가되거나 제거될 때마다 업데이트하고 싶습니다. 이를 달성하기 위해 시그널을 사용하는 방법은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n@Component({\n  selector: 'my-cart',\n  template: `\n    <ul>\n      <li *ngFor=\"let item of items\">\n        {item.name} - ${item.price}\n        <button (click)=\"removeItem(item)\">Remove</button>\n      </li>\n    </ul>\n    Total Price: ${totalPrice()}\n  `,\n})\nexport class CartComponent {\n  items = [    { name: 'Product A', price: 10 },    { name: 'Product B', price: 15 },    { name: 'Product C', price: 20 },  ];\n  \n  // 장바구니의 항목 목록을 위한 신호인 itemList을 정의합니다.\n  itemList = signal(this.items);\n  \n  // 총 가격을 위한 계산된 값인 totalPrice를 정의합니다.\n  totalPrice = computed(() => {\n    return this.itemList().reduce((acc, curr) => acc + curr.price, 0);\n  });\n  \n  removeItem(item) {\n    // 선택한 항목을 제거하여 itemList 신호를 업데이트합니다.\n    this.itemList.set(this.itemList().filter((i) => i !== item));\n  }\n}\n```\n\n이 예제에서는 장바구니에 있는 항목 목록을 나타내는 신호인 itemList을 정의하고, itemList에 의존하는 총 가격인 totalPrice를 계산된 값으로 정의합니다. 장바구니에서 항목을 제거할 때 itemList 신호를 업데이트하여 totalPrice를 다시 계산합니다.\n\n## 예제 2: 신호를 사용하여 로딩 스피너를 보이거나 숨기기\n\nAPI에서 데이터를 가져와 테이블에 표시하는 컴포넌트가 있다고 가정해봅시다. 데이터를 가져오는 동안 로딩 스피너를 표시하려고 합니다. 이를 신호를 사용하여 구현하는 방법은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n@Component({\n  selector: 'my-table',\n  template: `\n    <div *ngIf=\"isLoading()\">\n      Loading...\n    </div>\n    <table *ngIf=\"!isLoading()\">\n      <thead>...</thead>\n      <tbody>...</tbody>\n    </table>\n  `,\n})\nexport class TableComponent {\n  // 로딩 상태를 위한 신호 loading을 정의하고 초기값을 true로 설정합니다.\n  \n  loading = signal(true);\n  \n  ngOnInit() {\n    // API에서 데이터를 가져옵니다.\n    fetchData().subscribe((data) => {\n      // 데이터가 수신되면 로딩 신호를 false로 업데이트합니다.\n      this.loading.set(false);\n      \n      // 테이블에 데이터를 렌더링합니다.\n      ...\n    });\n  }\n  \n  isLoading() {\n    return this.loading();\n  }\n}\n```\n\n이 예제에서는 로딩 상태를 나타내는 신호 loading을 정의하고 초기값을 true로 설정합니다. 컴포넌트가 초기화될 때 API에서 데이터를 가져와 데이터를 수신했을 때 로딩 신호를 false로 업데이트합니다. isLoading 메서드는 현재 로딩 신호의 값을 반환하며, 이 값은 로딩 스피너 또는 테이블을 조건부로 렌더링하는 데 사용됩니다.\n\n## 예제 3: 응용 프로그램에서 반응형 프로그래밍을 위한 신호 사용\n\n이 예제에서는 여러 가지 신호, 계산된 신호 및 이펙트를 활용하여 더 복잡한 시나리오에서의 사용법을 시연합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { signal, computed, effect } from 'signal';\n\n// Writable signals\nconst firstName = signal('John');\nconst lastName = signal('Doe');\nconst age = signal(30);\n\n// Computed signal to calculate the full name\nconst fullName = computed(() => `${firstName()} ${lastName()}`);\n\n// Computed signal to determine if the person is an adult\nconst isAdult = computed(() => age() >= 18);\n\n// Effect to log the full name and adult status whenever any of the signals change\neffect(() => {\n  console.log(`Full Name: ${fullName()}`);\n  console.log(`Is Adult: ${isAdult()}`);\n});\n\n// Update the values of the writable signals\nfirstName.set('Jane');\nlastName.set('Smith');\nage.set(25);\n```\n\n여기 예제에서는 세 가지 쓰기 가능한 시그널이 있습니다: firstName, lastName 및 age입니다. firstName과 lastName을 결합하는 fullName 및 나이를 기반으로 사람이 성인인지 여부를 결정하는 isAdult라는 두 개의 계산된 시그널을 만듭니다. 그런 다음, 시그널이 변경 될 때마다 전체 이름 및 성인 여부를 기록하는 효과를 만듭니다.\n\n쓰기 가능한 시그널의 값을 업데이트하면, 해당 값이 변경되었을 때 효과가 실행되어 업데이트된 전체 이름과 성인 여부가 기록됩니다.\n\n이 예제는 시그널, 계산된 시그널 및 효과가 데이터의 변경을 추적하고 반응하여 애플리케이션에서 반응형 프로그래밍을 가능하게 하는 방법을 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n## 예제 4: 다양한 조건에 따라 데이터를 필터링, 정렬 및 계산하는 신호 사용\n\n이 예제는 여러 신호를 통합하고 종속성을 가진 계산된 신호 및 효과를 포함하여 더 복잡한 시나리오를 다룹니다:\n\n```js\nimport { signal, computed, effect } from 'signal';\n\n// 쓰기 가능한 신호\nconst todos = signal([\n  { id: 1, title: '장보기', completed: false },\n  { id: 2, title: '세탁하기', completed: true },\n  { id: 3, title: '개 산책시키기', completed: false }\n]); // 할 일 목록\n\nconst showCompleted = signal(false); // 완료된 할 일을 표시해야 하는지 여부를 나타내는 플래그\n\n// showCompleted 플래그에 기반하여 할 일을 필터링하고 정렬하는 계산된 신호\nconst filteredTodos = computed(() => {\n  const filtered = todos().filter(todo => showCompleted() || !todo.completed);\n  return filtered.sort((a, b) => a.id - b.id);\n});\n\n// 남은 할 일 수를 계산하는 계산된 신호\nconst remainingTodosCount = computed(() =>\n  todos().reduce((count, todo) => (todo.completed ? count : count + 1), 0)\n);\n\n// 변경 시 필터링된 할 일과 남은 수를 로그하는 효과\neffect(() => {\n  console.log('필터링된 할 일:');\n  console.log(filteredTodos());\n  console.log(`남은 할 일 수: ${remainingTodosCount()}`);\n});\n\n// 쓰기 가능한 신호의 값 업데이트\ntodos.mutate(value => {\n  value.push({ id: 4, title: '집 청소하기', completed: false });\n  value[1].completed = false;\n});\n\n// showCompleted 플래그 업데이트\nshowCompleted.set(true);\n```\n\n이 예제에서는 할 일 목록을 나타내는 쓰기 가능한 신호 todos가 있습니다. 또한 완료된 할 일을 표시해야 하는지를 나타내는 쓰기 가능한 신호 showCompleted가 있습니다. showCompleted 플래그에 따라 할 일을 필터링하고 정렬하는 computed 신호 filteredTodos를 생성합니다. 추가로, 남은 할 일 수를 계산하는 computed 신호 remainingTodosCount를 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n우리는 그런 다음, 변경될 때마다 필터된 할 일 목록과 남은 항목 수를 기록하는 효과를 만듭니다. 결정이 변경될 때마다 이 효과가 여러 번 실행됩니다.\n\n할 일 목록을 업데이트하고 showCompleted 플래그를 변경하는 경우와 같이 쓰기 가능한 시그널의 값을 업데이트할 때, 이 효과가 실행되어 업데이트된 필터된 할 일 목록과 남은 항목 수를 기록합니다. 마지막으로 showCompleted 플래그를 업데이트하여 새로운 필터된 할 일 목록으로 다시 효과를 트리거합니다.\n\n이 예제에서는 시그널, 계산된 시그널 및 효과가 어떻게 함께 작동하여 필터링, 정렬 및 다양한 조건에 따라 데이터를 계산하는 복잡한 시나리오를 처리하는지 보여줍니다.\n\n## 예제 5: 다수의 사용자가 공유하고 수정할 수 있는 장보기 목록 애플리케이션을 구현하는 데 시그널을 사용하는 예시\n\n<div class=\"content-ad\"></div>\n\n여기 신호(Signals)를 활용하여 다수 사용자가 공유하고 수정할 수 있는 식료품 쇼핑 목록 애플리케이션을 만드는 방법 예제가 있어요.\n\n```js\n@Component({\n  selector: 'my-grocery-list',\n  template: `\n    <h2>식료품 목록:</h2>\n    <ul>\n      <li *ngFor=\"let item of items\">\n        {item.name} - {item.quantity} - 최종 편집자: {item.lastEditedBy}\n        <button (click)=\"removeItem(item)\">삭제</button>\n      </li>\n    </ul>\n    <h3>아이템 추가:</h3>\n    <form (submit)=\"addItem()\">\n      <input type=\"text\" [(ngModel)]=\"newItemName\" placeholder=\"이름\">\n      <input type=\"number\" [(ngModel)]=\"newItemQuantity\" placeholder=\"수량\">\n      <button type=\"submit\">추가</button>\n    </form>\n  `,\n})\nexport class GroceryListComponent {\n  items = [    { name: '사과', quantity: 5, lastEditedBy: null },    { name: '바나나', quantity: 3, lastEditedBy: null },    { name: '우유', quantity: 1, lastEditedBy: null },  ];\n  \n  // 아이템 목록에 대한 신호(signal) 정의\n  itemList = signal(this.items);\n  \n  // 현재 사용자의 이름에 대한 신호(signal) 정의\n  currentUser = signal('남편');\n  \n  addItem() {\n    // 현재 사용자의 이름을 마지막으로 편집한 값으로 하는 새로운 항목을 itemList 신호에 추가\n    this.itemList.set([...this.itemList(), { name: this.newItemName, quantity: this.newItemQuantity, lastEditedBy: this.currentUser() }]);\n    \n    // 입력 필드를 지웁니다\n    this.newItemName = '';\n    this.newItemQuantity = '';\n  }\n  \n  removeItem(item) {\n    // 선택한 항목을 itemList 신호에서 제거\n    this.itemList.set(this.itemList().filter((i) => i !== item));\n  }\n}\n```\n\n이 예제에서는 식료품 쇼핑 목록의 항목 리스트를 위한 itemList 신호와 현재 사용자의 이름을 위한 currentUser 신호를 정의했습니다. 새 항목을 추가하거나 기존 항목을 제거할 때 itemList 신호를 업데이트하여 뷰의 재계산이 일어나도록 합니다. 또한 수정된 항목의 lastEditedBy 속성을 currentUser 신호의 현재 값으로 설정합니다.\n\naddItem 메서드는 현재 사용자의 이름을 lastEditedBy 값으로 하는 새 항목을 itemList 신호에 추가합니다. removeItem 메서드는 선택한 항목을 itemList 신호에서 제거합니다.\n\n<div class=\"content-ad\"></div>\n\n이 글을 읽어주셔서 감사합니다. 제 글이 유익하고 생각을 자극했기를 바랍니다.\n\n만약 여러분이 이 글을 지금까지 즐겁게 읽으셨다면, 제 Medium 페이지를 팔로우하시고 박수를 쳐주세요! 🙂\n\n![image](/assets/img/2024-06-22-Angular16SignalsExplainedWithFiveExamples_1.png)\n\n팔로우하신다면 댓글 섹션에서 다른 분들과 함께 소통할 수 있는 기회도 생기고, 여러분의 의견을 항상 환영합니다. 팔로워 여러분들의 의견을 매우 소중히 여깁니다. 💬🌟\n\n<div class=\"content-ad\"></div>\n\n내 다른 게시물에 대한 링크:\n1. PART ONE: 간단한 예제와 함께 마이크로서비스 애플리케이션에서 사용되는 가장 일반적인 Spring Boot 어노테이션\n2. PART TWO: 간단한 예제와 함께 마이크로서비스 애플리케이션에서 사용되는 가장 일반적인 Spring Boot 어노테이션\n3. MySQL 및 Rest 엔드포인트를 사용하는 간단한 Spring Boot 애플리케이션\n4. Spring Boot를 사용하여 마이크로서비스 애플리케이션에서 REST API를 개발할 때 따를 가장 좋은 방법들","ogImage":{"url":"/assets/img/2024-06-22-Angular16SignalsExplainedWithFiveExamples_0.png"},"coverImage":"/assets/img/2024-06-22-Angular16SignalsExplainedWithFiveExamples_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Markdown 형식으로 테이블 태그를 변경해 주세요.</p>\n<p>시그널의 값은 항상 게터 함수를 통해 읽습니다. 이는 Angular이 시그널이 사용된 위치를 추적할 수 있게 합니다.</p>\n<p>그래서 이 개념을 실제로 적용하고 TypeScript에서 몇 가지 실용적인 예제로 배워봅시다:</p>\n<h2>예제 1: 시그널을 사용하여 총 가격 업데이트하기</h2>\n<p>가정해보죠. 사용자가 쇼핑 카트에 항목을 추가할 수 있는 전자 상거래 애플리케이션을 가지고 있다고 해봅시다. 항목의 총 가격을 표시하고 새 항목이 추가되거나 제거될 때마다 업데이트하고 싶습니다. 이를 달성하기 위해 시그널을 사용하는 방법은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'my-cart'</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n    &#x3C;ul>\n      &#x3C;li *ngFor=\"let item of items\">\n        {item.name} - <span class=\"hljs-subst\">${item.price}</span>\n        &#x3C;button (click)=\"removeItem(item)\">Remove&#x3C;/button>\n      &#x3C;/li>\n    &#x3C;/ul>\n    Total Price: <span class=\"hljs-subst\">${totalPrice()}</span>\n  `</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CartComponent</span> {\n  items = [    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Product A'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">10</span> },    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Product B'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">15</span> },    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Product C'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">20</span> },  ];\n  \n  <span class=\"hljs-comment\">// 장바구니의 항목 목록을 위한 신호인 itemList을 정의합니다.</span>\n  itemList = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">items</span>);\n  \n  <span class=\"hljs-comment\">// 총 가격을 위한 계산된 값인 totalPrice를 정의합니다.</span>\n  totalPrice = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">itemList</span>().<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, curr</span>) =></span> acc + curr.<span class=\"hljs-property\">price</span>, <span class=\"hljs-number\">0</span>);\n  });\n  \n  <span class=\"hljs-title function_\">removeItem</span>(<span class=\"hljs-params\">item</span>) {\n    <span class=\"hljs-comment\">// 선택한 항목을 제거하여 itemList 신호를 업데이트합니다.</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">itemList</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">itemList</span>().<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =></span> i !== item));\n  }\n}\n</code></pre>\n<p>이 예제에서는 장바구니에 있는 항목 목록을 나타내는 신호인 itemList을 정의하고, itemList에 의존하는 총 가격인 totalPrice를 계산된 값으로 정의합니다. 장바구니에서 항목을 제거할 때 itemList 신호를 업데이트하여 totalPrice를 다시 계산합니다.</p>\n<h2>예제 2: 신호를 사용하여 로딩 스피너를 보이거나 숨기기</h2>\n<p>API에서 데이터를 가져와 테이블에 표시하는 컴포넌트가 있다고 가정해봅시다. 데이터를 가져오는 동안 로딩 스피너를 표시하려고 합니다. 이를 신호를 사용하여 구현하는 방법은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'my-table'</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n    &#x3C;div *ngIf=\"isLoading()\">\n      Loading...\n    &#x3C;/div>\n    &#x3C;table *ngIf=\"!isLoading()\">\n      &#x3C;thead>...&#x3C;/thead>\n      &#x3C;tbody>...&#x3C;/tbody>\n    &#x3C;/table>\n  `</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TableComponent</span> {\n  <span class=\"hljs-comment\">// 로딩 상태를 위한 신호 loading을 정의하고 초기값을 true로 설정합니다.</span>\n  \n  loading = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-literal\">true</span>);\n  \n  <span class=\"hljs-title function_\">ngOnInit</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// API에서 데이터를 가져옵니다.</span>\n    <span class=\"hljs-title function_\">fetchData</span>().<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n      <span class=\"hljs-comment\">// 데이터가 수신되면 로딩 신호를 false로 업데이트합니다.</span>\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">loading</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-literal\">false</span>);\n      \n      <span class=\"hljs-comment\">// 테이블에 데이터를 렌더링합니다.</span>\n      ...\n    });\n  }\n  \n  <span class=\"hljs-title function_\">isLoading</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">loading</span>();\n  }\n}\n</code></pre>\n<p>이 예제에서는 로딩 상태를 나타내는 신호 loading을 정의하고 초기값을 true로 설정합니다. 컴포넌트가 초기화될 때 API에서 데이터를 가져와 데이터를 수신했을 때 로딩 신호를 false로 업데이트합니다. isLoading 메서드는 현재 로딩 신호의 값을 반환하며, 이 값은 로딩 스피너 또는 테이블을 조건부로 렌더링하는 데 사용됩니다.</p>\n<h2>예제 3: 응용 프로그램에서 반응형 프로그래밍을 위한 신호 사용</h2>\n<p>이 예제에서는 여러 가지 신호, 계산된 신호 및 이펙트를 활용하여 더 복잡한 시나리오에서의 사용법을 시연합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { signal, computed, effect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'signal'</span>;\n\n<span class=\"hljs-comment\">// Writable signals</span>\n<span class=\"hljs-keyword\">const</span> firstName = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-string\">'John'</span>);\n<span class=\"hljs-keyword\">const</span> lastName = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-string\">'Doe'</span>);\n<span class=\"hljs-keyword\">const</span> age = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-number\">30</span>);\n\n<span class=\"hljs-comment\">// Computed signal to calculate the full name</span>\n<span class=\"hljs-keyword\">const</span> fullName = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${firstName()}</span> <span class=\"hljs-subst\">${lastName()}</span>`</span>);\n\n<span class=\"hljs-comment\">// Computed signal to determine if the person is an adult</span>\n<span class=\"hljs-keyword\">const</span> isAdult = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">age</span>() >= <span class=\"hljs-number\">18</span>);\n\n<span class=\"hljs-comment\">// Effect to log the full name and adult status whenever any of the signals change</span>\n<span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Full Name: <span class=\"hljs-subst\">${fullName()}</span>`</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Is Adult: <span class=\"hljs-subst\">${isAdult()}</span>`</span>);\n});\n\n<span class=\"hljs-comment\">// Update the values of the writable signals</span>\nfirstName.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'Jane'</span>);\nlastName.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'Smith'</span>);\nage.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">25</span>);\n</code></pre>\n<p>여기 예제에서는 세 가지 쓰기 가능한 시그널이 있습니다: firstName, lastName 및 age입니다. firstName과 lastName을 결합하는 fullName 및 나이를 기반으로 사람이 성인인지 여부를 결정하는 isAdult라는 두 개의 계산된 시그널을 만듭니다. 그런 다음, 시그널이 변경 될 때마다 전체 이름 및 성인 여부를 기록하는 효과를 만듭니다.</p>\n<p>쓰기 가능한 시그널의 값을 업데이트하면, 해당 값이 변경되었을 때 효과가 실행되어 업데이트된 전체 이름과 성인 여부가 기록됩니다.</p>\n<p>이 예제는 시그널, 계산된 시그널 및 효과가 데이터의 변경을 추적하고 반응하여 애플리케이션에서 반응형 프로그래밍을 가능하게 하는 방법을 보여줍니다.</p>\n<h2>예제 4: 다양한 조건에 따라 데이터를 필터링, 정렬 및 계산하는 신호 사용</h2>\n<p>이 예제는 여러 신호를 통합하고 종속성을 가진 계산된 신호 및 효과를 포함하여 더 복잡한 시나리오를 다룹니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { signal, computed, effect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'signal'</span>;\n\n<span class=\"hljs-comment\">// 쓰기 가능한 신호</span>\n<span class=\"hljs-keyword\">const</span> todos = <span class=\"hljs-title function_\">signal</span>([\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'장보기'</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'세탁하기'</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'개 산책시키기'</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span> }\n]); <span class=\"hljs-comment\">// 할 일 목록</span>\n\n<span class=\"hljs-keyword\">const</span> showCompleted = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// 완료된 할 일을 표시해야 하는지 여부를 나타내는 플래그</span>\n\n<span class=\"hljs-comment\">// showCompleted 플래그에 기반하여 할 일을 필터링하고 정렬하는 계산된 신호</span>\n<span class=\"hljs-keyword\">const</span> filteredTodos = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">const</span> filtered = <span class=\"hljs-title function_\">todos</span>().<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">todo</span> =></span> <span class=\"hljs-title function_\">showCompleted</span>() || !todo.<span class=\"hljs-property\">completed</span>);\n  <span class=\"hljs-keyword\">return</span> filtered.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a.<span class=\"hljs-property\">id</span> - b.<span class=\"hljs-property\">id</span>);\n});\n\n<span class=\"hljs-comment\">// 남은 할 일 수를 계산하는 계산된 신호</span>\n<span class=\"hljs-keyword\">const</span> remainingTodosCount = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =></span>\n  <span class=\"hljs-title function_\">todos</span>().<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">count, todo</span>) =></span> (todo.<span class=\"hljs-property\">completed</span> ? count : count + <span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">0</span>)\n);\n\n<span class=\"hljs-comment\">// 변경 시 필터링된 할 일과 남은 수를 로그하는 효과</span>\n<span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'필터링된 할 일:'</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">filteredTodos</span>());\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`남은 할 일 수: <span class=\"hljs-subst\">${remainingTodosCount()}</span>`</span>);\n});\n\n<span class=\"hljs-comment\">// 쓰기 가능한 신호의 값 업데이트</span>\ntodos.<span class=\"hljs-title function_\">mutate</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =></span> {\n  value.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'집 청소하기'</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span> });\n  value[<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">completed</span> = <span class=\"hljs-literal\">false</span>;\n});\n\n<span class=\"hljs-comment\">// showCompleted 플래그 업데이트</span>\nshowCompleted.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-literal\">true</span>);\n</code></pre>\n<p>이 예제에서는 할 일 목록을 나타내는 쓰기 가능한 신호 todos가 있습니다. 또한 완료된 할 일을 표시해야 하는지를 나타내는 쓰기 가능한 신호 showCompleted가 있습니다. showCompleted 플래그에 따라 할 일을 필터링하고 정렬하는 computed 신호 filteredTodos를 생성합니다. 추가로, 남은 할 일 수를 계산하는 computed 신호 remainingTodosCount를 생성합니다.</p>\n<p>우리는 그런 다음, 변경될 때마다 필터된 할 일 목록과 남은 항목 수를 기록하는 효과를 만듭니다. 결정이 변경될 때마다 이 효과가 여러 번 실행됩니다.</p>\n<p>할 일 목록을 업데이트하고 showCompleted 플래그를 변경하는 경우와 같이 쓰기 가능한 시그널의 값을 업데이트할 때, 이 효과가 실행되어 업데이트된 필터된 할 일 목록과 남은 항목 수를 기록합니다. 마지막으로 showCompleted 플래그를 업데이트하여 새로운 필터된 할 일 목록으로 다시 효과를 트리거합니다.</p>\n<p>이 예제에서는 시그널, 계산된 시그널 및 효과가 어떻게 함께 작동하여 필터링, 정렬 및 다양한 조건에 따라 데이터를 계산하는 복잡한 시나리오를 처리하는지 보여줍니다.</p>\n<h2>예제 5: 다수의 사용자가 공유하고 수정할 수 있는 장보기 목록 애플리케이션을 구현하는 데 시그널을 사용하는 예시</h2>\n<p>여기 신호(Signals)를 활용하여 다수 사용자가 공유하고 수정할 수 있는 식료품 쇼핑 목록 애플리케이션을 만드는 방법 예제가 있어요.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'my-grocery-list'</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n    &#x3C;h2>식료품 목록:&#x3C;/h2>\n    &#x3C;ul>\n      &#x3C;li *ngFor=\"let item of items\">\n        {item.name} - {item.quantity} - 최종 편집자: {item.lastEditedBy}\n        &#x3C;button (click)=\"removeItem(item)\">삭제&#x3C;/button>\n      &#x3C;/li>\n    &#x3C;/ul>\n    &#x3C;h3>아이템 추가:&#x3C;/h3>\n    &#x3C;form (submit)=\"addItem()\">\n      &#x3C;input type=\"text\" [(ngModel)]=\"newItemName\" placeholder=\"이름\">\n      &#x3C;input type=\"number\" [(ngModel)]=\"newItemQuantity\" placeholder=\"수량\">\n      &#x3C;button type=\"submit\">추가&#x3C;/button>\n    &#x3C;/form>\n  `</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroceryListComponent</span> {\n  items = [    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'사과'</span>, <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">lastEditedBy</span>: <span class=\"hljs-literal\">null</span> },    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'바나나'</span>, <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">lastEditedBy</span>: <span class=\"hljs-literal\">null</span> },    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'우유'</span>, <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">lastEditedBy</span>: <span class=\"hljs-literal\">null</span> },  ];\n  \n  <span class=\"hljs-comment\">// 아이템 목록에 대한 신호(signal) 정의</span>\n  itemList = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">items</span>);\n  \n  <span class=\"hljs-comment\">// 현재 사용자의 이름에 대한 신호(signal) 정의</span>\n  currentUser = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-string\">'남편'</span>);\n  \n  <span class=\"hljs-title function_\">addItem</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 현재 사용자의 이름을 마지막으로 편집한 값으로 하는 새로운 항목을 itemList 신호에 추가</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">itemList</span>.<span class=\"hljs-title function_\">set</span>([...<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">itemList</span>(), { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">newItemName</span>, <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">newItemQuantity</span>, <span class=\"hljs-attr\">lastEditedBy</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">currentUser</span>() }]);\n    \n    <span class=\"hljs-comment\">// 입력 필드를 지웁니다</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">newItemName</span> = <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">newItemQuantity</span> = <span class=\"hljs-string\">''</span>;\n  }\n  \n  <span class=\"hljs-title function_\">removeItem</span>(<span class=\"hljs-params\">item</span>) {\n    <span class=\"hljs-comment\">// 선택한 항목을 itemList 신호에서 제거</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">itemList</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">itemList</span>().<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =></span> i !== item));\n  }\n}\n</code></pre>\n<p>이 예제에서는 식료품 쇼핑 목록의 항목 리스트를 위한 itemList 신호와 현재 사용자의 이름을 위한 currentUser 신호를 정의했습니다. 새 항목을 추가하거나 기존 항목을 제거할 때 itemList 신호를 업데이트하여 뷰의 재계산이 일어나도록 합니다. 또한 수정된 항목의 lastEditedBy 속성을 currentUser 신호의 현재 값으로 설정합니다.</p>\n<p>addItem 메서드는 현재 사용자의 이름을 lastEditedBy 값으로 하는 새 항목을 itemList 신호에 추가합니다. removeItem 메서드는 선택한 항목을 itemList 신호에서 제거합니다.</p>\n<p>이 글을 읽어주셔서 감사합니다. 제 글이 유익하고 생각을 자극했기를 바랍니다.</p>\n<p>만약 여러분이 이 글을 지금까지 즐겁게 읽으셨다면, 제 Medium 페이지를 팔로우하시고 박수를 쳐주세요! 🙂</p>\n<p><img src=\"/assets/img/2024-06-22-Angular16SignalsExplainedWithFiveExamples_1.png\" alt=\"image\"></p>\n<p>팔로우하신다면 댓글 섹션에서 다른 분들과 함께 소통할 수 있는 기회도 생기고, 여러분의 의견을 항상 환영합니다. 팔로워 여러분들의 의견을 매우 소중히 여깁니다. 💬🌟</p>\n<p>내 다른 게시물에 대한 링크:</p>\n<ol>\n<li>PART ONE: 간단한 예제와 함께 마이크로서비스 애플리케이션에서 사용되는 가장 일반적인 Spring Boot 어노테이션</li>\n<li>PART TWO: 간단한 예제와 함께 마이크로서비스 애플리케이션에서 사용되는 가장 일반적인 Spring Boot 어노테이션</li>\n<li>MySQL 및 Rest 엔드포인트를 사용하는 간단한 Spring Boot 애플리케이션</li>\n<li>Spring Boot를 사용하여 마이크로서비스 애플리케이션에서 REST API를 개발할 때 따를 가장 좋은 방법들</li>\n</ol>\n</body>\n</html>\n"},"__N_SSG":true}