{"pageProps":{"post":{"title":"Angular 17 데이터 공유하기 BehaviorSubject를 활용한 간단한 가이드","description":"","date":"2024-05-14 14:45","slug":"2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide","content":"\n\n<img src=\"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_0.png\" />\n\n앵귤러 애플리케이션에서 컴포넌트 간 데이터 흐름을 관리하는 것은 복잡해질 수 있습니다. 이때 비동기 프로그래밍을 위한 강력한 라이브러리인 RxJS가 유용합니다. RxJS는 데이터 스트림을 처리하는 다양한 연산자와 Subject를 제공하며, 그 중에서 BehaviorSubject는 중요한 역할을 합니다. BehaviorSubject는 상태를 관리하고 Angular 애플리케이션 내에서 변경 사항을 전파하는 데 기본적인 구조로 나타납니다. 이 블로그 포스트에서는 BehaviorSubject를 사용하여 컴포넌트 간 데이터를 공유하는 방법에 대해 알아보겠습니다.\n\n# BehaviorSubject란 무엇인가요?\n\n기본적으로 BehaviorSubject는 RxJS 라이브러리에서 제공하는 Observable의 한 유형입니다. 특정 이벤트가 발생할 때만 값을 방출하는 전통적인 Observable과 달리, BehaviorSubject는 최신 값을 유지하고 새로운 구독자에게 즉시 전달합니다.\n\n\n\n# 주요 기능:\n\n## 초기값으로의 초기화:\n\nBehaviorSubject를 생성할 때, 개발자는 초기값을 지정합니다. 이 초기값은 이후 발생하는 값들의 시작점으로 작용하며, 새로운 구독자가 구독 시 즉시 업데이트를 받을 수 있도록 보장해줍니다.\n\n## 상태 유지:\n\n\n\nBehaviorSubject의 독특한 특징 중 하나는 최신 값을 유지 및 구독자에게 전달할 수 있는 능력입니다. 이 행동은 추가 이벤트를 트리거할 필요 없이 컴포넌트가 가장 최신 데이터와 동기화되도록 합니다.\n\n## next() 메서드:\n\nnext() 메서드를 통해 개발자는 BehaviorSubject가 보유한 값을 동적으로 업데이트할 수 있습니다. 이 메커니즘은 응용 프로그램 전체에 이어지는 데이터 전파를 원활하게 처리하여 반응성 및 반응적인 동작을 가능하게 합니다.\n\n# 실제 구현:\n\n\n\n## 1. 빈 Angular 프로젝트를 생성하세요\n\n```js\nng new behaviorsubject-demo\n```\n\n## 2. 서비스 및 컴포넌트 생성\n\n이 프로젝트에서는 아래와 같은 UI를 만들 예정입니다. 이를 위해 인용구 데이터를 가진 Quote 서비스를 생성하고, 인용구를 업데이트하는 컴포넌트와 인용구를 표시하는 컴포넌트를 만들 예정입니다.\n\n\n\n아래 명령어를 실행하여 서비스와 컴포넌트를 생성하세요.\n\n```js\nng generate service services/quote\nng generate component components/display-quote\nng generate component components/update-quote\n```\n\n폴더 구조는 아래와 같이 보일 것입니다.\n\n\n\n<img src=\"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_2.png\" />\n\n## 3. 서비스에 아래 코드를 추가하세요\n\n```js\n// quote.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuoteService {\n\n  constructor() {}\n\n  // 명언 속성을 선언하고 초기화합니다. BehaviorSubject이 될 예정\n  qoute = new BehaviorSubject(\"Hello world\");\n\n  // BehaviorSubject를 Observable로 노출합니다\n  currentQuote = this.qoute.asObservable();\n\n  // BehaviorSubject 값을 업데이트하는 함수\n  updateQuote(newQuote: string){\n    this.qoute.next(newQuote);\n  }\n}\n```\n\n## 4. 명언 서비스에서 명언 값을 표시하기\n\n\n\n```typescript\n// display-quote.component.ts\n\n...\n\nimport { QuoteService } from '../../services/quote.service';\n\n...\nexport class DisplayQuoteComponent {\n\n  constructor(private quoteService: QuoteService){}\n  \n  currentQuote: string = '';\n\n  ngOnInit(): void {\n    // 현재 시간 값을 가져오기 위해 quote 서비스의 currentQuote 속성을 구독합니다\n    this.quoteService.currentQuote.subscribe(\n      // 컴포넌트의 속성을 업데이트합니다\n      quote => this.currentQuote = quote\n    );\n  }\n}\n\n// display-quote.component.html\n\n<h2>{currentQuote}</h2>\r\n```\n\n이제 display-quote 컴포넌트에서 quote 서비스의 초기 인용구를 볼 수 있게 될 것입니다\n\n## 5. 인용구 값 업데이트\n\n```typescript\n// update-quote.component.ts\n\nimport { Component } from '@angular/core';\nimport { QuoteService } from '../../services/quote.service';\n\n...\nexport class UpdateQuoteComponent {\n\n  constructor(private quoteService: QuoteService){}\n\n  quote = '';\n\n  // 서비스에서 인용구를 업데이트하는 함수\n  submitHandler(){    \n   this.quoteService.updateQuote(this.quote);\n    this.quote=\"\";\n  }\n}\n\n// update-quote.component.html\n\n<div>\n  <input type=\"text\" [(ngModel)]=\"quote\" placeholder=\"새로운 인용구를 작성하세요\" />\n  <button (click)=\"submitHandler()\">제출</button>\n</div>\r\n```\n\n\n\n이제 update-quote 컴포넌트에서 인용구 값을 업데이트할 수 있게 되었고, 이는 display-quote 컴포넌트에 직접적으로 반영될 것입니다. 아래 다이어그램에서 프로젝트 내 데이터의 흐름을 확인할 수 있습니다.\n\n![Diagram](/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_3.png)\n\n# 결론:\n\n- 이 예제에서 인용구 서비스는 BehaviorSubject를 사용하여 인용구를 저장합니다. display-quote 컴포넌트는 currentQuote observable을 구독하여 최신 인용구를 가져와 로컬 변수를 업데이트합니다.\n- Angular 개발에서 BehaviorSubject는 상태를 관리하고 컴포넌트 및 서비스 간 반응형 동작을 용이하게 하는 강력한 도구로 사용됩니다. 개발자들은 이를 활용하여 동적 데이터 흐름을 쉽게 다룰 수 있는 견고하고 반응적인 Angular 애플리케이션을 구축할 수 있습니다.\n\n\n\n아래 GitHub 저장소에서 최종 코드를 얻어보세요.","ogImage":{"url":"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_0.png"},"coverImage":"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>앵귤러 애플리케이션에서 컴포넌트 간 데이터 흐름을 관리하는 것은 복잡해질 수 있습니다. 이때 비동기 프로그래밍을 위한 강력한 라이브러리인 RxJS가 유용합니다. RxJS는 데이터 스트림을 처리하는 다양한 연산자와 Subject를 제공하며, 그 중에서 BehaviorSubject는 중요한 역할을 합니다. BehaviorSubject는 상태를 관리하고 Angular 애플리케이션 내에서 변경 사항을 전파하는 데 기본적인 구조로 나타납니다. 이 블로그 포스트에서는 BehaviorSubject를 사용하여 컴포넌트 간 데이터를 공유하는 방법에 대해 알아보겠습니다.</p>\n<h1>BehaviorSubject란 무엇인가요?</h1>\n<p>기본적으로 BehaviorSubject는 RxJS 라이브러리에서 제공하는 Observable의 한 유형입니다. 특정 이벤트가 발생할 때만 값을 방출하는 전통적인 Observable과 달리, BehaviorSubject는 최신 값을 유지하고 새로운 구독자에게 즉시 전달합니다.</p>\n<h1>주요 기능:</h1>\n<h2>초기값으로의 초기화:</h2>\n<p>BehaviorSubject를 생성할 때, 개발자는 초기값을 지정합니다. 이 초기값은 이후 발생하는 값들의 시작점으로 작용하며, 새로운 구독자가 구독 시 즉시 업데이트를 받을 수 있도록 보장해줍니다.</p>\n<h2>상태 유지:</h2>\n<p>BehaviorSubject의 독특한 특징 중 하나는 최신 값을 유지 및 구독자에게 전달할 수 있는 능력입니다. 이 행동은 추가 이벤트를 트리거할 필요 없이 컴포넌트가 가장 최신 데이터와 동기화되도록 합니다.</p>\n<h2>next() 메서드:</h2>\n<p>next() 메서드를 통해 개발자는 BehaviorSubject가 보유한 값을 동적으로 업데이트할 수 있습니다. 이 메커니즘은 응용 프로그램 전체에 이어지는 데이터 전파를 원활하게 처리하여 반응성 및 반응적인 동작을 가능하게 합니다.</p>\n<h1>실제 구현:</h1>\n<h2>1. 빈 Angular 프로젝트를 생성하세요</h2>\n<pre><code class=\"hljs language-js\">ng <span class=\"hljs-keyword\">new</span> behaviorsubject-demo\n</code></pre>\n<h2>2. 서비스 및 컴포넌트 생성</h2>\n<p>이 프로젝트에서는 아래와 같은 UI를 만들 예정입니다. 이를 위해 인용구 데이터를 가진 Quote 서비스를 생성하고, 인용구를 업데이트하는 컴포넌트와 인용구를 표시하는 컴포넌트를 만들 예정입니다.</p>\n<p>아래 명령어를 실행하여 서비스와 컴포넌트를 생성하세요.</p>\n<pre><code class=\"hljs language-js\">ng generate service services/quote\nng generate component components/display-quote\nng generate component components/update-quote\n</code></pre>\n<p>폴더 구조는 아래와 같이 보일 것입니다.</p>\n<h2>3. 서비스에 아래 코드를 추가하세요</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// quote.service.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BehaviorSubject</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">QuoteService</span> {\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {}\n\n  <span class=\"hljs-comment\">// 명언 속성을 선언하고 초기화합니다. BehaviorSubject이 될 예정</span>\n  qoute = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BehaviorSubject</span>(<span class=\"hljs-string\">\"Hello world\"</span>);\n\n  <span class=\"hljs-comment\">// BehaviorSubject를 Observable로 노출합니다</span>\n  currentQuote = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">qoute</span>.<span class=\"hljs-title function_\">asObservable</span>();\n\n  <span class=\"hljs-comment\">// BehaviorSubject 값을 업데이트하는 함수</span>\n  <span class=\"hljs-title function_\">updateQuote</span>(<span class=\"hljs-params\">newQuote: string</span>){\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">qoute</span>.<span class=\"hljs-title function_\">next</span>(newQuote);\n  }\n}\n</code></pre>\n<h2>4. 명언 서비스에서 명언 값을 표시하기</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// display-quote.component.ts</span>\n\n...\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">QuoteService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../services/quote.service'</span>;\n\n...\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DisplayQuoteComponent</span> {\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> quoteService: QuoteService</span>){}\n  \n  <span class=\"hljs-attr\">currentQuote</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">''</span>;\n\n  <span class=\"hljs-title function_\">ngOnInit</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-comment\">// 현재 시간 값을 가져오기 위해 quote 서비스의 currentQuote 속성을 구독합니다</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">quoteService</span>.<span class=\"hljs-property\">currentQuote</span>.<span class=\"hljs-title function_\">subscribe</span>(\n      <span class=\"hljs-comment\">// 컴포넌트의 속성을 업데이트합니다</span>\n      <span class=\"hljs-function\"><span class=\"hljs-params\">quote</span> =></span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentQuote</span> = quote\n    );\n  }\n}\n\n<span class=\"hljs-comment\">// display-quote.component.html</span>\n\n&#x3C;h2>{currentQuote}&#x3C;/h2>\n</code></pre>\n<p>이제 display-quote 컴포넌트에서 quote 서비스의 초기 인용구를 볼 수 있게 될 것입니다</p>\n<h2>5. 인용구 값 업데이트</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// update-quote.component.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">QuoteService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../services/quote.service'</span>;\n\n...\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UpdateQuoteComponent</span> {\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> quoteService: QuoteService</span>){}\n\n  quote = <span class=\"hljs-string\">''</span>;\n\n  <span class=\"hljs-comment\">// 서비스에서 인용구를 업데이트하는 함수</span>\n  <span class=\"hljs-title function_\">submitHandler</span>(<span class=\"hljs-params\"></span>){    \n   <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">quoteService</span>.<span class=\"hljs-title function_\">updateQuote</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">quote</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">quote</span>=<span class=\"hljs-string\">\"\"</span>;\n  }\n}\n\n<span class=\"hljs-comment\">// update-quote.component.html</span>\n\n&#x3C;div>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> [(<span class=\"hljs-attr\">ngModel</span>)]=<span class=\"hljs-string\">\"quote\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"새로운 인용구를 작성하세요\"</span> /></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"submitHandler()\"</span>></span>제출<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n&#x3C;/div>\n</code></pre>\n<p>이제 update-quote 컴포넌트에서 인용구 값을 업데이트할 수 있게 되었고, 이는 display-quote 컴포넌트에 직접적으로 반영될 것입니다. 아래 다이어그램에서 프로젝트 내 데이터의 흐름을 확인할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_3.png\" alt=\"Diagram\"></p>\n<h1>결론:</h1>\n<ul>\n<li>이 예제에서 인용구 서비스는 BehaviorSubject를 사용하여 인용구를 저장합니다. display-quote 컴포넌트는 currentQuote observable을 구독하여 최신 인용구를 가져와 로컬 변수를 업데이트합니다.</li>\n<li>Angular 개발에서 BehaviorSubject는 상태를 관리하고 컴포넌트 및 서비스 간 반응형 동작을 용이하게 하는 강력한 도구로 사용됩니다. 개발자들은 이를 활용하여 동적 데이터 흐름을 쉽게 다룰 수 있는 견고하고 반응적인 Angular 애플리케이션을 구축할 수 있습니다.</li>\n</ul>\n<p>아래 GitHub 저장소에서 최종 코드를 얻어보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}