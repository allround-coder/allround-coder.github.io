{"pageProps":{"post":{"title":"Nestjs에서 구조화된 API 응답 처리 방법","description":"","date":"2024-06-22 02:19","slug":"2024-06-22-NestjsStructuredAPIResponse","content":"\n\n\n![이미지](/assets/img/2024-06-22-NestjsStructuredAPIResponse_0.png)\n\nNest.js에는 미리 정의된 HTTP 응답 JSON 구조가 있습니다:\n\n```js\n{\n  \"statusCode\": 500,\n  \"message\": \"Internal server error\"\n}\n```\n\n응답 구조를 변경해야 하는 경우 더 많은 세부 정보를 추가하거나 이름이나 구조를 변경해야 할 수도 있습니다.\n때로는 클라이언트(프론트엔드 또는 다른 서비스 클라이언트)를 위해 보다 구체적인 응답 구조를 정의해야 할 수도 있습니다.\n컨트롤러 라우트의 끝에 사용자 정의 구조 응답을 작성하거나, 어디에서나 사용자 정의 응답을 보내기 위해 객체를 사용할 수 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n가끔은 클라이언트(프론트엔드 또는 다른 서비스 클라이언트)에 대한 보다 구체적인 응답 구조를 정의하는 것이 필요할 수 있습니다.\n\n어떤 경우에는 커스텀한 응답 구조를 작성해야 할 것이라고 생각할 수 있으며, 이를 위해 컨트롤러 루트의 끝에 커스텀 응답을 작성하거나 Response 객체를 사용하여 어디서든지(custom response를 전송할) 다음과 같이 사용할 수 있습니다:\n\n```js\nresponse\n  .status(status)\n  .json({\n    statusCode: status,\n    timestamp: new Date().toISOString(),\n    path: request.url,\n  });\n```\n\n# Class-Validator 응답이 커스텀 API 응답과 충돌합니다!\n\n<div class=\"content-ad\"></div>\n\n우리 모두는 프로젝트에서 입력값을 유효성 검사하는 데 사용하고 있어요.\n이 패키지는 다음과 같은 사전 정의된 오류 구조를 사용해요:\n\n모두, 우리는 프로젝트에서 입력값을 유효성 검사하는 데 class-validator를 사용하고 있어요.\n이 패키지는 다음과 같은 사전 정의된 오류 구조를 사용해요:\n\n```js\n{\n  \"statusCode\": 400,\n  \"message\": [\n    {\n      \"property\": \"firstName\",\n      \"message\": \"firstName must be longer than or equal to 1 characters\"\n    }\n  ],\n  \"error\": \"Bad Request\"\n}\n```\n\n이 패키지를 사용할 때 코드에서는 class-validator 응답 구조와 호환되는 API 응답 구조를 사용하는 것이 좋아요. \"property\"를 클라이언트 측에 활용하여 오류를 적절한 위치(예: \"property\" 하단)에 표시할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n# 서버에서 다국어 API 응답\n\n다국어 플랫폼에서는 서버 측에서 오류 또는 메시지를 생성해야 할 경우가 있습니다. 클라이언트 측에서는 단순히 서버에서 받은 메시지를 표시해야 합니다. 이러한 경우에는 API 응답에 메시지를 포함해야 하며 이때 클라이언트가 메시지를 적절한 위치에 표시할 수 있도록 가이드하는 속성 필드가 포함되어야 합니다.\n\n# 사용자 정의 응답 구조를 어떻게 정의할까요?\n\n코드를 DRY하게 작성하고 복잡성을 줄이며 코드를 유지보수 가능하고 개발 가능하도록 해결해보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n# Let's Magic 🪄\n\n다국어 및 class-validator와 호환되는 사용자 지정 응답을 정의하는 좋은 방법을 찾아봅시다:\n\n- API 응답 유형 정의:\n\n```js\nexport class messagesType {\n  message: string\n  property:string\n}\nexport class ApiResponseDto<T> {\n  statusCode: number;\n  messages: messagesType[] | [];\n  data: T;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n응답 데이터를 처리하기 위해 일반 유형을 사용하고 메시지를 메시지와 속성 필드를 포함한 배열로 만듭니다.\n\nutils 서비스 또는 더 나은 곳에서 이 메서드를 정의할 수 있습니다:\n\n```js\napiResponse<T>(statusCode: number, data: any = null, message: { message: string, property: string }[] | [] = []): ApiResponseDto<T> {\n    return {\n        statusCode,\n        message,\n        data,\n    };\n}\n```\n\n이 메서드는 API 응답 구조를 생성하여 반환하며, 유효성 검사, 살균 또는 원하는 모든 것을 추가할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n3. 이제 컨트롤러에서 메소드를 사용하여 반환하세요:\n\n```js\nreturn this.utilsService.apiResponse(\n    HttpStatus.OK,\n    functionReult,\n    [{message:\"email subscribed to newsletter\",property:\"email\"}]\n )\n```\n\n4. apiResponseDto에 timeStamp, route 등의 데이터를 추가할 수 있어요. ✌️\n\n이제 API 응답 결과를 즐기세요 ❤️.\n질문은 언제든 환영이고, API 응답 구조에 대한 의견을 남겨주세요. 더 나아지도록 도와드릴게요.","ogImage":{"url":"/assets/img/2024-06-22-NestjsStructuredAPIResponse_0.png"},"coverImage":"/assets/img/2024-06-22-NestjsStructuredAPIResponse_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-22-NestjsStructuredAPIResponse_0.png\" alt=\"이미지\"></p>\n<p>Nest.js에는 미리 정의된 HTTP 응답 JSON 구조가 있습니다:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"statusCode\"</span>: <span class=\"hljs-number\">500</span>,\n  <span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"Internal server error\"</span>\n}\n</code></pre>\n<p>응답 구조를 변경해야 하는 경우 더 많은 세부 정보를 추가하거나 이름이나 구조를 변경해야 할 수도 있습니다.\n때로는 클라이언트(프론트엔드 또는 다른 서비스 클라이언트)를 위해 보다 구체적인 응답 구조를 정의해야 할 수도 있습니다.\n컨트롤러 라우트의 끝에 사용자 정의 구조 응답을 작성하거나, 어디에서나 사용자 정의 응답을 보내기 위해 객체를 사용할 수 있습니다:</p>\n<p>가끔은 클라이언트(프론트엔드 또는 다른 서비스 클라이언트)에 대한 보다 구체적인 응답 구조를 정의하는 것이 필요할 수 있습니다.</p>\n<p>어떤 경우에는 커스텀한 응답 구조를 작성해야 할 것이라고 생각할 수 있으며, 이를 위해 컨트롤러 루트의 끝에 커스텀 응답을 작성하거나 Response 객체를 사용하여 어디서든지(custom response를 전송할) 다음과 같이 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">response\n  .<span class=\"hljs-title function_\">status</span>(status)\n  .<span class=\"hljs-title function_\">json</span>({\n    <span class=\"hljs-attr\">statusCode</span>: status,\n    <span class=\"hljs-attr\">timestamp</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toISOString</span>(),\n    <span class=\"hljs-attr\">path</span>: request.<span class=\"hljs-property\">url</span>,\n  });\n</code></pre>\n<h1>Class-Validator 응답이 커스텀 API 응답과 충돌합니다!</h1>\n<p>우리 모두는 프로젝트에서 입력값을 유효성 검사하는 데 사용하고 있어요.\n이 패키지는 다음과 같은 사전 정의된 오류 구조를 사용해요:</p>\n<p>모두, 우리는 프로젝트에서 입력값을 유효성 검사하는 데 class-validator를 사용하고 있어요.\n이 패키지는 다음과 같은 사전 정의된 오류 구조를 사용해요:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"statusCode\"</span>: <span class=\"hljs-number\">400</span>,\n  <span class=\"hljs-string\">\"message\"</span>: [\n    {\n      <span class=\"hljs-string\">\"property\"</span>: <span class=\"hljs-string\">\"firstName\"</span>,\n      <span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"firstName must be longer than or equal to 1 characters\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"error\"</span>: <span class=\"hljs-string\">\"Bad Request\"</span>\n}\n</code></pre>\n<p>이 패키지를 사용할 때 코드에서는 class-validator 응답 구조와 호환되는 API 응답 구조를 사용하는 것이 좋아요. \"property\"를 클라이언트 측에 활용하여 오류를 적절한 위치(예: \"property\" 하단)에 표시할 수 있어요.</p>\n<h1>서버에서 다국어 API 응답</h1>\n<p>다국어 플랫폼에서는 서버 측에서 오류 또는 메시지를 생성해야 할 경우가 있습니다. 클라이언트 측에서는 단순히 서버에서 받은 메시지를 표시해야 합니다. 이러한 경우에는 API 응답에 메시지를 포함해야 하며 이때 클라이언트가 메시지를 적절한 위치에 표시할 수 있도록 가이드하는 속성 필드가 포함되어야 합니다.</p>\n<h1>사용자 정의 응답 구조를 어떻게 정의할까요?</h1>\n<p>코드를 DRY하게 작성하고 복잡성을 줄이며 코드를 유지보수 가능하고 개발 가능하도록 해결해보겠습니다.</p>\n<h1>Let's Magic 🪄</h1>\n<p>다국어 및 class-validator와 호환되는 사용자 지정 응답을 정의하는 좋은 방법을 찾아봅시다:</p>\n<ul>\n<li>API 응답 유형 정의:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">messagesType</span> {\n  <span class=\"hljs-attr\">message</span>: string\n  <span class=\"hljs-attr\">property</span>:string\n}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ApiResponseDto</span>&#x3C;T> {\n  <span class=\"hljs-attr\">statusCode</span>: number;\n  <span class=\"hljs-attr\">messages</span>: messagesType[] | [];\n  <span class=\"hljs-attr\">data</span>: T;\n}\n</code></pre>\n<p>응답 데이터를 처리하기 위해 일반 유형을 사용하고 메시지를 메시지와 속성 필드를 포함한 배열로 만듭니다.</p>\n<p>utils 서비스 또는 더 나은 곳에서 이 메서드를 정의할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">apiResponse&#x3C;T>(<span class=\"hljs-attr\">statusCode</span>: number, <span class=\"hljs-attr\">data</span>: any = <span class=\"hljs-literal\">null</span>, <span class=\"hljs-attr\">message</span>: { <span class=\"hljs-attr\">message</span>: string, <span class=\"hljs-attr\">property</span>: string }[] | [] = []): <span class=\"hljs-title class_\">ApiResponseDto</span>&#x3C;T> {\n    <span class=\"hljs-keyword\">return</span> {\n        statusCode,\n        message,\n        data,\n    };\n}\n</code></pre>\n<p>이 메서드는 API 응답 구조를 생성하여 반환하며, 유효성 검사, 살균 또는 원하는 모든 것을 추가할 수 있습니다.</p>\n<ol start=\"3\">\n<li>이제 컨트롤러에서 메소드를 사용하여 반환하세요:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">utilsService</span>.<span class=\"hljs-title function_\">apiResponse</span>(\n    <span class=\"hljs-title class_\">HttpStatus</span>.<span class=\"hljs-property\">OK</span>,\n    functionReult,\n    [{<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">\"email subscribed to newsletter\"</span>,<span class=\"hljs-attr\">property</span>:<span class=\"hljs-string\">\"email\"</span>}]\n )\n</code></pre>\n<ol start=\"4\">\n<li>apiResponseDto에 timeStamp, route 등의 데이터를 추가할 수 있어요. ✌️</li>\n</ol>\n<p>이제 API 응답 결과를 즐기세요 ❤️.\n질문은 언제든 환영이고, API 응답 구조에 대한 의견을 남겨주세요. 더 나아지도록 도와드릴게요.</p>\n</body>\n</html>\n"},"__N_SSG":true}