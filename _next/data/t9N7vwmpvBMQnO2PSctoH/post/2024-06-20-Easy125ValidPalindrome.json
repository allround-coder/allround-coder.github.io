{"pageProps":{"post":{"title":"쉬운 125번 유효한 회문","description":"","date":"2024-06-20 02:36","slug":"2024-06-20-Easy125ValidPalindrome","content":"\n\nLeetCode 50 두 포인터\n\n# 예시\n\n## 예시 1\n\n```js\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\"는 회문입니다.\n```\n\n<div class=\"content-ad\"></div>\n\n## 예제 2\n\n```js\n입력: s = \"race a car\"\n출력: false\n설명: \"raceacar\"은 회문이 아닙니다.\n```\n\n## 예제 3\n\n```js\n입력: s = \" \"\n출력: true\n설명: 비어있는 문자열 \"\"은 알파벳이나 숫자가 아닌 문자를 제거한 후에 남는 문자열입니다. \n앞으로 읽거나 뒤로 읽어도 동일하기 때문에 회문입니다.\n```\n\n<div class=\"content-ad\"></div>\n\n# 해결책\n\n- 공간 복잡도: O( )\n- 시간 복잡도: O( )\n\n## 파이썬\n\n```js\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        left, right = 0, len(s) - 1\n\n        while left < right:\n            while left < right and not s[left].isalnum():\n                left += 1\n            \n            while left < right and not s[right].isalnum():\n                right -= 1\n            \n            if s[left].lower() != s[right].lower():\n                return False\n\n            left += 1\n            right -= 1\n        \n        return True\n```  \n\n<div class=\"content-ad\"></div>\n\n## TypeScript\n\n# Postscript\n\n## Python isalnum( )\n\n```js\ntxt1 = \"Company12\"\nprint(txt1.isalnum())  # 결과: True\n\ntxt2 = \"Company 12\"\nprint(txt2.isalnum())  # 결과: False\n\ntxt3 = \"Hello@World\"\nprint(txt3.isalnum())  # 결과: False\n\ntxt4 = \"HelloWorld\"\nprint(txt4.isalnum())  # 결과: True\n```\n\n<div class=\"content-ad\"></div>\n\n## 참고 자료\n\n1. https://github.com/TheExplainthis/LeetCodeJourney/","ogImage":{"url":"/assets/img/2024-06-20-Easy125ValidPalindrome_0.png"},"coverImage":"/assets/img/2024-06-20-Easy125ValidPalindrome_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>LeetCode 50 두 포인터</p>\n<h1>예시</h1>\n<h2>예시 1</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Input</span>: s = <span class=\"hljs-string\">\"A man, a plan, a canal: Panama\"</span>\n<span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-title class_\">Explanation</span>: <span class=\"hljs-string\">\"amanaplanacanalpanama\"</span>는 회문입니다.\n</code></pre>\n<h2>예제 2</h2>\n<pre><code class=\"hljs language-js\">입력: s = <span class=\"hljs-string\">\"race a car\"</span>\n출력: <span class=\"hljs-literal\">false</span>\n설명: <span class=\"hljs-string\">\"raceacar\"</span>은 회문이 아닙니다.\n</code></pre>\n<h2>예제 3</h2>\n<pre><code class=\"hljs language-js\">입력: s = <span class=\"hljs-string\">\" \"</span>\n출력: <span class=\"hljs-literal\">true</span>\n설명: 비어있는 문자열 <span class=\"hljs-string\">\"\"</span>은 알파벳이나 숫자가 아닌 문자를 제거한 후에 남는 문자열입니다. \n앞으로 읽거나 뒤로 읽어도 동일하기 때문에 회문입니다.\n</code></pre>\n<h1>해결책</h1>\n<ul>\n<li>공간 복잡도: O( )</li>\n<li>시간 복잡도: O( )</li>\n</ul>\n<h2>파이썬</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>:\n    def <span class=\"hljs-title function_\">isPalindrome</span>(self, <span class=\"hljs-attr\">s</span>: str) -> <span class=\"hljs-attr\">bool</span>:\n        left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-title function_\">len</span>(s) - <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">while</span> left &#x3C; <span class=\"hljs-attr\">right</span>:\n            <span class=\"hljs-keyword\">while</span> left &#x3C; right and not s[left].<span class=\"hljs-title function_\">isalnum</span>():\n                left += <span class=\"hljs-number\">1</span>\n            \n            <span class=\"hljs-keyword\">while</span> left &#x3C; right and not s[right].<span class=\"hljs-title function_\">isalnum</span>():\n                right -= <span class=\"hljs-number\">1</span>\n            \n            <span class=\"hljs-keyword\">if</span> s[left].<span class=\"hljs-title function_\">lower</span>() != s[right].<span class=\"hljs-title function_\">lower</span>():\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">False</span>\n\n            left += <span class=\"hljs-number\">1</span>\n            right -= <span class=\"hljs-number\">1</span>\n        \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">True</span>\n</code></pre>\n<h2>TypeScript</h2>\n<h1>Postscript</h1>\n<h2>Python isalnum( )</h2>\n<pre><code class=\"hljs language-js\">txt1 = <span class=\"hljs-string\">\"Company12\"</span>\n<span class=\"hljs-title function_\">print</span>(txt1.<span class=\"hljs-title function_\">isalnum</span>())  # 결과: <span class=\"hljs-title class_\">True</span>\n\ntxt2 = <span class=\"hljs-string\">\"Company 12\"</span>\n<span class=\"hljs-title function_\">print</span>(txt2.<span class=\"hljs-title function_\">isalnum</span>())  # 결과: <span class=\"hljs-title class_\">False</span>\n\ntxt3 = <span class=\"hljs-string\">\"Hello@World\"</span>\n<span class=\"hljs-title function_\">print</span>(txt3.<span class=\"hljs-title function_\">isalnum</span>())  # 결과: <span class=\"hljs-title class_\">False</span>\n\ntxt4 = <span class=\"hljs-string\">\"HelloWorld\"</span>\n<span class=\"hljs-title function_\">print</span>(txt4.<span class=\"hljs-title function_\">isalnum</span>())  # 결과: <span class=\"hljs-title class_\">True</span>\n</code></pre>\n<h2>참고 자료</h2>\n<ol>\n<li><a href=\"https://github.com/TheExplainthis/LeetCodeJourney/\" rel=\"nofollow\" target=\"_blank\">https://github.com/TheExplainthis/LeetCodeJourney/</a></li>\n</ol>\n</body>\n</html>\n"},"__N_SSG":true}