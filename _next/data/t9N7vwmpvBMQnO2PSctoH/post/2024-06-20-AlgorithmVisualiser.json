{"pageProps":{"post":{"title":"알고리즘 시각화 프로그램","description":"","date":"2024-06-20 00:45","slug":"2024-06-20-AlgorithmVisualiser","content":"\n\n## HTML, CSS, 및 JavaScript를 사용한 알고리즘 시각화 도구의 기능 구현\n\n<img src=\"/assets/img/2024-06-20-AlgorithmVisualiser_0.png\" />\n\n협력과 혁신이 성공을 이끌어가는 시대에, 저희 다섯 명의 팀은 알고리즘 시각화 도구를 만드는 흥미진한 여정에 들어갔습니다. 이 프로젝트는 우리의 팀워크와 헌신의 증거뿐만 아니라 HTML, CSS, 그리고 JavaScript를 포함한 웹 개발 기초를 탐구하는 것이었습니다.\n\n본문에서는 이 프로젝트에서 구현한 핵심 기능들을 안내해 드리겠습니다.\n\n<div class=\"content-ad\"></div>\n\n버블 정렬 비주얼라이저:\n\n주어진 값으로 막대를 그렸고 막대마다 값이 적혀 있습니다. 주어진 값들을 배열에 저장하고 버블 정렬 알고리즘을 사용하여 정렬했습니다. 알고리즘에서 값들이 교환될 때마다 해당되는 막대를 강조하고 높이 값을 서로 바꾸었습니다.\n\n```js\n/* 코드베이스에서 발췌한 코드 조각 */\n    for (let i = 0; i < array.length - 1; i++) {\n        for (let j = 0; j < array.length - i - 1; j++) {\n            for (let k = 0; k < bso_bars.length; k++) {\n                if (k !== j && k !== j + 1 && k < l) {\n                    bso_bars[k].style.backgroundColor = \"brown\";\n                }\n            }\n            if (array[j] > array[j + 1]) {\n                let temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n\n                let tempHeight = bso_bars[j].style.height;\n                bso_bars[j].style.height = bso_bars[j + 1].style.height;\n                bso_bars[j + 1].style.height = tempHeight;\n                bso_bars[j].innerHTML = array[j];\n                bso_bars[j + 1].innerHTML = array[j + 1];\n                bso_bars[j].style.backgroundColor = \"#feb737\";\n                bso_bars[j + 1].style.backgroundColor = \"#feb737\";\n\n                await sleep(speed);\n            }\n        }\n        l--;\n        bso_bars[l].style.backgroundColor = \"#2fb45d\";\n\n        await sleep(speed);\n    }\n```\n\n비슷한 방식으로 선택 정렬, 병합 정렬, 퀵 정렬의 비주얼라이저도 만들었습니다.\n\n<div class=\"content-ad\"></div>\n\n연결 리스트 시각화기:\n\n연결 리스트 시각화기를 만들기 위해 d3 라이브러리(https://d3js.org/)를 사용했어요.\n\n- HTML 컨테이너 요소를 선택하고 해당 컨테이너에 높이, 너비 및 배경색 속성을 가진 SVG 요소를 추가했어요.\n- LinkedList 클래스를 정의하여 노드를 삽입하고 삭제하는 메서드로 연결 리스트를 관리했어요. insert 메서드는 지정된 인덱스에 새 노드를 생성하고 추가하거나 인덱스가 제공되지 않으면 끝에 추가해요. delete 메서드는 목록에서 특정 인덱스의 노드를 제거해요.\n- Visualise 메서드는 SVG에서 기존 시각 요소를 지워요. 시각화에 필요한 총 너비를 계산하고 텍스트 및 선을 추가하여 머리부터 시작하는 연결 리스트를 시각적으로 나타내요. 목록 노드를 순환하면서 각 노드 데이터에 대한 원과 텍스트를 추가해요. 노드 간의 링크를 나타내기 위해 화살표 마커가 달린 선을 그려요. 목록의 끝을 나타내는 최종 \"null\" 텍스트를 추가해요.\n\n```js\n/* 코드베이스에서의 일부분 */\n\nwhile (current !== null) {\n            const nodeGroup = svg.append(\"g\")\n                .attr(\"class\", \"node\")\n                .attr(\"transform\", `translate(${xPos}, ${yPos})`);\n\n            nodeGroup.append(\"circle\")\n                .attr(\"r\", nodeRadius)\n                .attr(\"stroke\", \"black\")\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke-width\", 2); \n\n            nodeGroup.append(\"text\")\n                .attr(\"dy\", 5)\n                .attr(\"text-anchor\", \"middle\")\n                .text(current.data);\n\n            if (current.next !== null) {\n                svg.append(\"line\")\n                    .attr(\"class\", \"link\")\n                    .attr(\"x1\", xPos + nodeRadius)\n                    .attr(\"y1\", yPos)\n                    .attr(\"x2\", xPos + nodeRadius + nodeMargin)\n                    .attr(\"y2\", yPos)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"marker-end\", \"url(#arrow)\");\n            }\n\n            current = current.next;\n            xPos += nodeRadius * 2 + nodeMargin;\n  }\n```\n\n<div class=\"content-ad\"></div>\n\n에라토스테네스의 체\n\n- 101개 요소가 있는 배열을 만들어 첫 번째 요소를 true로 지정하고 나머지 요소들은 false로 설정합니다.\n- 1부터 100까지의 숫자를 반복하면서 각 숫자의 모든 배수를 소수가 아닌 것으로 표시합니다. 각 반복에서 현재 인덱스와 그 인덱스의 모든 배수를 강조합니다. 소수가 아닌 모든 인덱스를 추적하여 마지막에 모든 소수를 강조합니다.\n\n```js\n/* 코드 기반의 일부 */\n \nfor (let i = 1; i < 101; i++) {\n    if (i == 1) {\n        arr[i] = true;\n        var cur = document.getElementById(`idx${i}`);\n        cur.classList.add(\"current_cell\");\n        await sleep(ms);\n        cur.classList.remove(\"current_cell\");\n        cur.classList.add(\"not_prime\")\n        if (flag) {\n            return;\n        }\n        await sleep(ms);\n    } else {\n        if (!arr[i]) {\n            var cur = document.getElementById(`idx${i}`);\n            cur.classList.add(\"current_cell\");\n            await sleep(ms);\n            for (let j = 2; j * i < 101; j++) {\n                var multiples = document.getElementById(`idx${i * j}`);\n                multiples.classList.add(\"multiple\");\n            }\n            await sleep(ms);\n            for (let j = 2; j * i < 101; j++) {\n                var multiples = document.getElementById(`idx${i * j}`);\n                multiples.classList.remove(\"multiple\");\n                arr[i * j] = true;\n                if (flag) {\n                    return;\n                }\n                multiples.classList.add(\"not_prime\");\n            }\n            cur.classList.remove(\"current_cell\");\n        }\n    }\n}\n```\n\n참조:\n\n<div class=\"content-ad\"></div>\n\n의견이나 제안이 있으시면 댓글을 남겨주세요.","ogImage":{"url":"/assets/img/2024-06-20-AlgorithmVisualiser_0.png"},"coverImage":"/assets/img/2024-06-20-AlgorithmVisualiser_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>HTML, CSS, 및 JavaScript를 사용한 알고리즘 시각화 도구의 기능 구현</h2>\n<p>협력과 혁신이 성공을 이끌어가는 시대에, 저희 다섯 명의 팀은 알고리즘 시각화 도구를 만드는 흥미진한 여정에 들어갔습니다. 이 프로젝트는 우리의 팀워크와 헌신의 증거뿐만 아니라 HTML, CSS, 그리고 JavaScript를 포함한 웹 개발 기초를 탐구하는 것이었습니다.</p>\n<p>본문에서는 이 프로젝트에서 구현한 핵심 기능들을 안내해 드리겠습니다.</p>\n<p>버블 정렬 비주얼라이저:</p>\n<p>주어진 값으로 막대를 그렸고 막대마다 값이 적혀 있습니다. 주어진 값들을 배열에 저장하고 버블 정렬 알고리즘을 사용하여 정렬했습니다. 알고리즘에서 값들이 교환될 때마다 해당되는 막대를 강조하고 높이 값을 서로 바꾸었습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* 코드베이스에서 발췌한 코드 조각 */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; array.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>; i++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &#x3C; array.<span class=\"hljs-property\">length</span> - i - <span class=\"hljs-number\">1</span>; j++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k = <span class=\"hljs-number\">0</span>; k &#x3C; bso_bars.<span class=\"hljs-property\">length</span>; k++) {\n                <span class=\"hljs-keyword\">if</span> (k !== j &#x26;&#x26; k !== j + <span class=\"hljs-number\">1</span> &#x26;&#x26; k &#x3C; l) {\n                    bso_bars[k].<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = <span class=\"hljs-string\">\"brown\"</span>;\n                }\n            }\n            <span class=\"hljs-keyword\">if</span> (array[j] > array[j + <span class=\"hljs-number\">1</span>]) {\n                <span class=\"hljs-keyword\">let</span> temp = array[j];\n                array[j] = array[j + <span class=\"hljs-number\">1</span>];\n                array[j + <span class=\"hljs-number\">1</span>] = temp;\n\n                <span class=\"hljs-keyword\">let</span> tempHeight = bso_bars[j].<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">height</span>;\n                bso_bars[j].<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">height</span> = bso_bars[j + <span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">height</span>;\n                bso_bars[j + <span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">height</span> = tempHeight;\n                bso_bars[j].<span class=\"hljs-property\">innerHTML</span> = array[j];\n                bso_bars[j + <span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">innerHTML</span> = array[j + <span class=\"hljs-number\">1</span>];\n                bso_bars[j].<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = <span class=\"hljs-string\">\"#feb737\"</span>;\n                bso_bars[j + <span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = <span class=\"hljs-string\">\"#feb737\"</span>;\n\n                <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sleep</span>(speed);\n            }\n        }\n        l--;\n        bso_bars[l].<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = <span class=\"hljs-string\">\"#2fb45d\"</span>;\n\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sleep</span>(speed);\n    }\n</code></pre>\n<p>비슷한 방식으로 선택 정렬, 병합 정렬, 퀵 정렬의 비주얼라이저도 만들었습니다.</p>\n<p>연결 리스트 시각화기:</p>\n<p>연결 리스트 시각화기를 만들기 위해 d3 라이브러리(<a href=\"https://d3js.org/)%EB%A5%BC\" rel=\"nofollow\" target=\"_blank\">https://d3js.org/)를</a> 사용했어요.</p>\n<ul>\n<li>HTML 컨테이너 요소를 선택하고 해당 컨테이너에 높이, 너비 및 배경색 속성을 가진 SVG 요소를 추가했어요.</li>\n<li>LinkedList 클래스를 정의하여 노드를 삽입하고 삭제하는 메서드로 연결 리스트를 관리했어요. insert 메서드는 지정된 인덱스에 새 노드를 생성하고 추가하거나 인덱스가 제공되지 않으면 끝에 추가해요. delete 메서드는 목록에서 특정 인덱스의 노드를 제거해요.</li>\n<li>Visualise 메서드는 SVG에서 기존 시각 요소를 지워요. 시각화에 필요한 총 너비를 계산하고 텍스트 및 선을 추가하여 머리부터 시작하는 연결 리스트를 시각적으로 나타내요. 목록 노드를 순환하면서 각 노드 데이터에 대한 원과 텍스트를 추가해요. 노드 간의 링크를 나타내기 위해 화살표 마커가 달린 선을 그려요. 목록의 끝을 나타내는 최종 \"null\" 텍스트를 추가해요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* 코드베이스에서의 일부분 */</span>\n\n<span class=\"hljs-keyword\">while</span> (current !== <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">const</span> nodeGroup = svg.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">\"g\"</span>)\n                .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"class\"</span>, <span class=\"hljs-string\">\"node\"</span>)\n                .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"transform\"</span>, <span class=\"hljs-string\">`translate(<span class=\"hljs-subst\">${xPos}</span>, <span class=\"hljs-subst\">${yPos}</span>)`</span>);\n\n            nodeGroup.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">\"circle\"</span>)\n                .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"r\"</span>, nodeRadius)\n                .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"stroke\"</span>, <span class=\"hljs-string\">\"black\"</span>)\n                .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"fill\"</span>, <span class=\"hljs-string\">\"white\"</span>)\n                .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"stroke-width\"</span>, <span class=\"hljs-number\">2</span>); \n\n            nodeGroup.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">\"text\"</span>)\n                .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"dy\"</span>, <span class=\"hljs-number\">5</span>)\n                .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"text-anchor\"</span>, <span class=\"hljs-string\">\"middle\"</span>)\n                .<span class=\"hljs-title function_\">text</span>(current.<span class=\"hljs-property\">data</span>);\n\n            <span class=\"hljs-keyword\">if</span> (current.<span class=\"hljs-property\">next</span> !== <span class=\"hljs-literal\">null</span>) {\n                svg.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">\"line\"</span>)\n                    .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"class\"</span>, <span class=\"hljs-string\">\"link\"</span>)\n                    .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"x1\"</span>, xPos + nodeRadius)\n                    .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"y1\"</span>, yPos)\n                    .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"x2\"</span>, xPos + nodeRadius + nodeMargin)\n                    .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"y2\"</span>, yPos)\n                    .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"stroke\"</span>, <span class=\"hljs-string\">\"black\"</span>)\n                    .<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">\"marker-end\"</span>, <span class=\"hljs-string\">\"url(#arrow)\"</span>);\n            }\n\n            current = current.<span class=\"hljs-property\">next</span>;\n            xPos += nodeRadius * <span class=\"hljs-number\">2</span> + nodeMargin;\n  }\n</code></pre>\n<p>에라토스테네스의 체</p>\n<ul>\n<li>101개 요소가 있는 배열을 만들어 첫 번째 요소를 true로 지정하고 나머지 요소들은 false로 설정합니다.</li>\n<li>1부터 100까지의 숫자를 반복하면서 각 숫자의 모든 배수를 소수가 아닌 것으로 표시합니다. 각 반복에서 현재 인덱스와 그 인덱스의 모든 배수를 강조합니다. 소수가 아닌 모든 인덱스를 추적하여 마지막에 모든 소수를 강조합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* 코드 기반의 일부 */</span>\n \n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &#x3C; <span class=\"hljs-number\">101</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">1</span>) {\n        arr[i] = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">var</span> cur = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">`idx<span class=\"hljs-subst\">${i}</span>`</span>);\n        cur.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">\"current_cell\"</span>);\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sleep</span>(ms);\n        cur.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">\"current_cell\"</span>);\n        cur.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">\"not_prime\"</span>)\n        <span class=\"hljs-keyword\">if</span> (flag) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sleep</span>(ms);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (!arr[i]) {\n            <span class=\"hljs-keyword\">var</span> cur = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">`idx<span class=\"hljs-subst\">${i}</span>`</span>);\n            cur.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">\"current_cell\"</span>);\n            <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sleep</span>(ms);\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">2</span>; j * i &#x3C; <span class=\"hljs-number\">101</span>; j++) {\n                <span class=\"hljs-keyword\">var</span> multiples = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">`idx<span class=\"hljs-subst\">${i * j}</span>`</span>);\n                multiples.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">\"multiple\"</span>);\n            }\n            <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sleep</span>(ms);\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">2</span>; j * i &#x3C; <span class=\"hljs-number\">101</span>; j++) {\n                <span class=\"hljs-keyword\">var</span> multiples = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">`idx<span class=\"hljs-subst\">${i * j}</span>`</span>);\n                multiples.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">\"multiple\"</span>);\n                arr[i * j] = <span class=\"hljs-literal\">true</span>;\n                <span class=\"hljs-keyword\">if</span> (flag) {\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n                multiples.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">\"not_prime\"</span>);\n            }\n            cur.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">\"current_cell\"</span>);\n        }\n    }\n}\n</code></pre>\n<p>참조:</p>\n<p>의견이나 제안이 있으시면 댓글을 남겨주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}