{"pageProps":{"post":{"title":"캔버스의 마법을 해제해 보세요","description":"","date":"2024-05-14 15:01","slug":"2024-05-14-UnlockingtheMagicofCanvas","content":"\n\n## 예술이 코드와 만나는 곳\n\n# 캔버스란?\n\n캔버스는 HTML5 스위트 내에서 놀라운 기능으로, 웹 브라우저 안에서 예술적 및 계산적 가능성을 펼칠 수 있도록 설계되었습니다. 그래픽 콘텐츠와 애니메이션에 대한 강력한 플레이그라운드로서, 개발자들이 제3자 플러그인이나 라이브러리가 필요 없이 자신의 창의성과 기술을 펼칠 수 있도록 초대합니다.\n\n![캔버스 이미지](/assets/img/2024-05-14-UnlockingtheMagicofCanvas_0.png)\n\n\n\n# 캔버스의 탁월한 기능들\n\n- 유연성: 캔버스는 예술가를 위한 빈 캔버스와 같습니다; 다양한 그래픽 및 애니메이션을 만들기 위한 절대적인 유연성을 제공합니다.\n- 클라이언트 측 렌더링: 캔버스의 놀라운 점 중 하나는 모든 렌더링 작업이 클라이언트 측에서 수행되어 서버 부하를 줄이고 더 빠르고 효율적인 실행을 보장한다는 것입니다.\n- 고성능: 하드웨어 가속을 통해 캔버스는 유동적인 애니메이션 및 복잡한 그래픽 작업에 대한 빠른 옵션으로 빛납니다.\n- 다재다능한 렌더링: 2D 또는 WebGL이든, 캔버스는 프로젝트의 필요에 맞는 다양한 렌더링 옵션을 제공합니다.\n- JavaScript와의 깊은 통합: 포괄적인 JavaScript API로, 캔버스는 복잡한 작업 및 조작을 손쉽게 수행할 수 있게 합니다.\n\n# 다양한 응용 분야\n\n- 데이터 시각화: 인터랙티브 그래프, 상세한 지도, 실시간 분석 대시보드 등을 상상해보세요.\n- 게임 개발: 캔버스 덕분에 웹 기반 게임이 살아나고 있습니다.\n- 이미지 처리: 사진 편집부터 필터 적용까지, 가능성은 무한합니다.\n- 인터랙티브 애니메이션: 시각적으로 매력적인 UI 및 애니메이션 스토리텔링을 구축하는 데 중요한 역할을 합니다.\n- 실시간 렌더링: 음악 파형, 실시간 데이터 시각화 - 무엇이든, 캔버스가 처리할 수 있습니다.\n\n\n\n# 훌륭한 예시\n\n여기에 당신을 위한 CodePen 샌드박스가 있어요. 페이지를 클릭해서 즐겁게 놀아보세요!\n\n# 코드 설명\n\n## HTML 구조\n\n\n\n우리는 HTML에서 `canvas` 태그를 정의하고 ID를 할당하여, 그래픽 가능성의 세계로의 게이트웨이 역할을 하도록 시작합니다.\n\n```html\n<div class=\"page\" >\n  <canvas id=\"canvas\" class=\"canvas\"></canvas>\n</div>\n```\n\n## 스타일링하기\n\nCSS에서는 Canvas가 정말 빛날 수 있는 세련된 환경을 설정합니다.\n\n\n\n```js\n.page {\n  /* 페이지 콘텐츠를 가운데 정렬 */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: 100vw;\n}\n.canvas {\n  /* Canvas를 전체 화면으로 설정하고 가장 하단 레이어에 위치시킴 */\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  background-color: #000;\n}\n```\n\n## JavaScript 생태계\n\n여기서 우아한 두 가지 클래스인 StarrySky와 Particle을 소개합니다.\n\n```js\nclass StarrySky {\n    canvas;\n    ctx;\n    particles;\n    count;\n    actions;\n    action;\n\n    constructor() {\n        this.canvas = document.getElementById('canvas');\n        this.canvas.width = innerWidth;\n        this.canvas.height = innerHeight;\n        this.canvas.style.zIndex = '-1';\n        this.ctx = this.canvas.getContext('2d');\n        this.particles = [];\n        this.count = 300;\n\n        this.actions = ['right', 'left', 'up', 'down', 'around'];\n        this.action = 0;\n    }\n\n    init() {\n        this.animate();\n        this.event();\n    }\n\n    event() {\n        document.body.addEventListener('click', () => {\n            this.action += Math.floor(Math.random() * this.actions.length) || 1;\n            this.action = this.action % this.actions.length;\n        });\n    }\n\n    draw() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        if (this.particles.length < this.count) {\n            this.particles.push(\n                new Particle(this.canvas.width, this.canvas.height, this.ctx)\n            );\n        }\n        for (let i in this.particles) {\n            const p = this.particles[i];\n            p.update(this.actions[this.action]);\n            p.draw();\n        }\n    }\n\n    animate() {\n        requestAnimationFrame(() => this.animate());\n        this.draw();\n    }\n\n}\n\nclass Particle {\n    x;\n    y;\n    vx;\n    w;\n    h;\n    ctx;\n\n    constructor(width, height, ctx) {\n        this.w = width;\n        this.h = height;\n        this.ctx = ctx;\n        this.x = Math.random() * width;\n        this.y = Math.random() * height;\n        this.vx = Math.random();\n    }\n\n    update(direction = 'right') {\n        switch (direction) {\n            case 'right':\n                this.x += this.vx * 3;\n                if (this.x > this.w) this.x = 0;\n                break;\n            case 'left':\n                this.x -= this.vx * 3;\n                if (this.x < 0) this.x = this.w;\n                break;\n            case 'up':\n                this.y -= this.vx * 3;\n                if (this.y < 0) this.y = this.h;\n                break;\n            case 'down':\n                this.y += this.vx * 3;\n                if (this.y > this.h) this.y = 0;\n                break;\n        }\n    }\n\n    draw() {\n        this.ctx.beginPath();\n        this.ctx.arc(this.x, this.y, 1 + this.vx, 0, Math.PI * 2);\n        this.ctx.fillStyle = `rgba(255, 255, 255, ${this.vx})`;\n        this.ctx.fill();\n    }\n}\n```\n\n\n\n- StarrySky: 캔버스와 입자 객체를 초기화하고 관리하는 역할을 맡습니다.\n- Particle: 개별 입자의 렌더링 및 업데이트에 초점을 맞춥니다.\n\n```js\n// 초기화\nconst starrySky = new StarrySky();\nwindow.onload = () => {\n  starrySky.init();\n};\nwindow.onresize = () => {\n  starrySky.canvas.width = innerWidth;\n  starrySky.canvas.height = innerHeight;\n};\n```\n\n페이지가 로드될 때 우리는 StarrySky 클래스의 경이로운 힘을 소환합니다. 또한, 창 크기가 조정될 때 캔버스의 크기를 동적으로 조정하여 항상 매혹적인 경험을 제공합니다.\n\n## 코드 자세히 설명\n\n\n\n- 캔버스와 컨텍스트: this.canvas = document.getElementById(`canvas`); 및 this.ctx = this.canvas.getContext(`2d`); 라인을 사용하여 캔버스의 우주와 2D 그리기 공간에 접근합니다.\n- 입자 이동: this.actions = [`right`, `left`, `up`, `down`, `around`]; 라인에서는 클릭으로 입자가 날아갈 방향을 조절할 수 있는 능력을 제공합니다.\n- 애니메이션 루프: requestAnimationFrame(() =` this.animate()); 라인은 매혹적이고 끝없는 애니메이션 루프를 제공합니다.\n- 이벤트 리스너: document.body.addEventListener(`click`, () =` ' ... ');를 통해 각 클릭이 입자 행동을 변화시켜 애니메이션을 더 인터랙티브하고 동적으로 만듭니다.\n- 입자 업데이트 및 렌더링: this.particles.push(new Particle(...));을 통해 새로운 우주 입자를 생성하고 p.update() 및 p.draw()를 통해 이동과 외관을 업데이트합니다.\n\n캔버스는 웹 개발 세계에서 놀라운 기술로 자리 잡고 있습니다. 데이터 시각화부터 대규모 웹 기반 게임 제작까지, 응용 분야는 여러분의 상상력만큼 무한합니다. 이 가이드는 캔버스에 대한 이해를 풍성하게 하고 멋진 프로젝트를 시작할 자극을 드리기 위해 노력합니다. 그러니 할 수 있어요, 캔버스가 여러분의 타작게요!\n\n만약 이 글을 좋아한다면, 박수를 보내주세요. 여러분의 응원이 제 창의적 엔진을 충전합니다. 건배하며 백만 번 감사합니다!\n\n<img src=\"/assets/img/2024-05-14-UnlockingtheMagicofCanvas_1.png\" />","ogImage":{"url":"/assets/img/2024-05-14-UnlockingtheMagicofCanvas_0.png"},"coverImage":"/assets/img/2024-05-14-UnlockingtheMagicofCanvas_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>예술이 코드와 만나는 곳</h2>\n<h1>캔버스란?</h1>\n<p>캔버스는 HTML5 스위트 내에서 놀라운 기능으로, 웹 브라우저 안에서 예술적 및 계산적 가능성을 펼칠 수 있도록 설계되었습니다. 그래픽 콘텐츠와 애니메이션에 대한 강력한 플레이그라운드로서, 개발자들이 제3자 플러그인이나 라이브러리가 필요 없이 자신의 창의성과 기술을 펼칠 수 있도록 초대합니다.</p>\n<p><img src=\"/assets/img/2024-05-14-UnlockingtheMagicofCanvas_0.png\" alt=\"캔버스 이미지\"></p>\n<h1>캔버스의 탁월한 기능들</h1>\n<ul>\n<li>유연성: 캔버스는 예술가를 위한 빈 캔버스와 같습니다; 다양한 그래픽 및 애니메이션을 만들기 위한 절대적인 유연성을 제공합니다.</li>\n<li>클라이언트 측 렌더링: 캔버스의 놀라운 점 중 하나는 모든 렌더링 작업이 클라이언트 측에서 수행되어 서버 부하를 줄이고 더 빠르고 효율적인 실행을 보장한다는 것입니다.</li>\n<li>고성능: 하드웨어 가속을 통해 캔버스는 유동적인 애니메이션 및 복잡한 그래픽 작업에 대한 빠른 옵션으로 빛납니다.</li>\n<li>다재다능한 렌더링: 2D 또는 WebGL이든, 캔버스는 프로젝트의 필요에 맞는 다양한 렌더링 옵션을 제공합니다.</li>\n<li>JavaScript와의 깊은 통합: 포괄적인 JavaScript API로, 캔버스는 복잡한 작업 및 조작을 손쉽게 수행할 수 있게 합니다.</li>\n</ul>\n<h1>다양한 응용 분야</h1>\n<ul>\n<li>데이터 시각화: 인터랙티브 그래프, 상세한 지도, 실시간 분석 대시보드 등을 상상해보세요.</li>\n<li>게임 개발: 캔버스 덕분에 웹 기반 게임이 살아나고 있습니다.</li>\n<li>이미지 처리: 사진 편집부터 필터 적용까지, 가능성은 무한합니다.</li>\n<li>인터랙티브 애니메이션: 시각적으로 매력적인 UI 및 애니메이션 스토리텔링을 구축하는 데 중요한 역할을 합니다.</li>\n<li>실시간 렌더링: 음악 파형, 실시간 데이터 시각화 - 무엇이든, 캔버스가 처리할 수 있습니다.</li>\n</ul>\n<h1>훌륭한 예시</h1>\n<p>여기에 당신을 위한 CodePen 샌드박스가 있어요. 페이지를 클릭해서 즐겁게 놀아보세요!</p>\n<h1>코드 설명</h1>\n<h2>HTML 구조</h2>\n<p>우리는 HTML에서 <code>canvas</code> 태그를 정의하고 ID를 할당하여, 그래픽 가능성의 세계로의 게이트웨이 역할을 하도록 시작합니다.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"page\"</span> ></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"canvas\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">canvas</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<h2>스타일링하기</h2>\n<p>CSS에서는 Canvas가 정말 빛날 수 있는 세련된 환경을 설정합니다.</p>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">page</span> {\n  <span class=\"hljs-comment\">/* 페이지 콘텐츠를 가운데 정렬 */</span>\n  <span class=\"hljs-attr\">display</span>: flex;\n  flex-<span class=\"hljs-attr\">direction</span>: column;\n  justify-<span class=\"hljs-attr\">content</span>: center;\n  align-<span class=\"hljs-attr\">items</span>: center;\n  <span class=\"hljs-attr\">height</span>: 100vh;\n  <span class=\"hljs-attr\">width</span>: 100vw;\n}\n.<span class=\"hljs-property\">canvas</span> {\n  <span class=\"hljs-comment\">/* Canvas를 전체 화면으로 설정하고 가장 하단 레이어에 위치시킴 */</span>\n  <span class=\"hljs-attr\">position</span>: absolute;\n  <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>%;\n  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">100</span>%;\n  z-<span class=\"hljs-attr\">index</span>: -<span class=\"hljs-number\">1</span>;\n  background-<span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">000</span>;\n}\n</code></pre>\n<h2>JavaScript 생태계</h2>\n<p>여기서 우아한 두 가지 클래스인 StarrySky와 Particle을 소개합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StarrySky</span> {\n    canvas;\n    ctx;\n    particles;\n    count;\n    actions;\n    action;\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">canvas</span> = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'canvas'</span>);\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">canvas</span>.<span class=\"hljs-property\">width</span> = innerWidth;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">canvas</span>.<span class=\"hljs-property\">height</span> = innerHeight;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">canvas</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">zIndex</span> = <span class=\"hljs-string\">'-1'</span>;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ctx</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">canvas</span>.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">'2d'</span>);\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particles</span> = [];\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span> = <span class=\"hljs-number\">300</span>;\n\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">actions</span> = [<span class=\"hljs-string\">'right'</span>, <span class=\"hljs-string\">'left'</span>, <span class=\"hljs-string\">'up'</span>, <span class=\"hljs-string\">'down'</span>, <span class=\"hljs-string\">'around'</span>];\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">action</span> = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">animate</span>();\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">event</span>();\n    }\n\n    <span class=\"hljs-title function_\">event</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">action</span> += <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">actions</span>.<span class=\"hljs-property\">length</span>) || <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">action</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">action</span> % <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">actions</span>.<span class=\"hljs-property\">length</span>;\n        });\n    }\n\n    <span class=\"hljs-title function_\">draw</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ctx</span>.<span class=\"hljs-title function_\">clearRect</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">canvas</span>.<span class=\"hljs-property\">width</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">canvas</span>.<span class=\"hljs-property\">height</span>);\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particles</span>.<span class=\"hljs-property\">length</span> &#x3C; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span>) {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particles</span>.<span class=\"hljs-title function_\">push</span>(\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Particle</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">canvas</span>.<span class=\"hljs-property\">width</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">canvas</span>.<span class=\"hljs-property\">height</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ctx</span>)\n            );\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particles</span>) {\n            <span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particles</span>[i];\n            p.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">actions</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">action</span>]);\n            p.<span class=\"hljs-title function_\">draw</span>();\n        }\n    }\n\n    <span class=\"hljs-title function_\">animate</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-title function_\">requestAnimationFrame</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">animate</span>());\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">draw</span>();\n    }\n\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Particle</span> {\n    x;\n    y;\n    vx;\n    w;\n    h;\n    ctx;\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">width, height, ctx</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">w</span> = width;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">h</span> = height;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ctx</span> = ctx;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * width;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * height;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vx</span> = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>();\n    }\n\n    <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\">direction = <span class=\"hljs-string\">'right'</span></span>) {\n        <span class=\"hljs-keyword\">switch</span> (direction) {\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'right'</span>:\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> += <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vx</span> * <span class=\"hljs-number\">3</span>;\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> > <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">w</span>) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'left'</span>:\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> -= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vx</span> * <span class=\"hljs-number\">3</span>;\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> &#x3C; <span class=\"hljs-number\">0</span>) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">w</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'up'</span>:\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> -= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vx</span> * <span class=\"hljs-number\">3</span>;\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> &#x3C; <span class=\"hljs-number\">0</span>) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">h</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'down'</span>:\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> += <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vx</span> * <span class=\"hljs-number\">3</span>;\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> > <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">h</span>) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span> = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n\n    <span class=\"hljs-title function_\">draw</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ctx</span>.<span class=\"hljs-title function_\">beginPath</span>();\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ctx</span>.<span class=\"hljs-title function_\">arc</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">y</span>, <span class=\"hljs-number\">1</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vx</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ctx</span>.<span class=\"hljs-property\">fillStyle</span> = <span class=\"hljs-string\">`rgba(255, 255, 255, <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.vx}</span>)`</span>;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ctx</span>.<span class=\"hljs-title function_\">fill</span>();\n    }\n}\n</code></pre>\n<ul>\n<li>StarrySky: 캔버스와 입자 객체를 초기화하고 관리하는 역할을 맡습니다.</li>\n<li>Particle: 개별 입자의 렌더링 및 업데이트에 초점을 맞춥니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 초기화</span>\n<span class=\"hljs-keyword\">const</span> starrySky = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StarrySky</span>();\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-function\">() =></span> {\n  starrySky.<span class=\"hljs-title function_\">init</span>();\n};\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">onresize</span> = <span class=\"hljs-function\">() =></span> {\n  starrySky.<span class=\"hljs-property\">canvas</span>.<span class=\"hljs-property\">width</span> = innerWidth;\n  starrySky.<span class=\"hljs-property\">canvas</span>.<span class=\"hljs-property\">height</span> = innerHeight;\n};\n</code></pre>\n<p>페이지가 로드될 때 우리는 StarrySky 클래스의 경이로운 힘을 소환합니다. 또한, 창 크기가 조정될 때 캔버스의 크기를 동적으로 조정하여 항상 매혹적인 경험을 제공합니다.</p>\n<h2>코드 자세히 설명</h2>\n<ul>\n<li>캔버스와 컨텍스트: this.canvas = document.getElementById(<code>canvas</code>); 및 this.ctx = this.canvas.getContext(<code>2d</code>); 라인을 사용하여 캔버스의 우주와 2D 그리기 공간에 접근합니다.</li>\n<li>입자 이동: this.actions = [<code>right</code>, <code>left</code>, <code>up</code>, <code>down</code>, <code>around</code>]; 라인에서는 클릭으로 입자가 날아갈 방향을 조절할 수 있는 능력을 제공합니다.</li>\n<li>애니메이션 루프: requestAnimationFrame(() =` this.animate()); 라인은 매혹적이고 끝없는 애니메이션 루프를 제공합니다.</li>\n<li>이벤트 리스너: document.body.addEventListener(<code>click</code>, () =` ' ... ');를 통해 각 클릭이 입자 행동을 변화시켜 애니메이션을 더 인터랙티브하고 동적으로 만듭니다.</li>\n<li>입자 업데이트 및 렌더링: this.particles.push(new Particle(...));을 통해 새로운 우주 입자를 생성하고 p.update() 및 p.draw()를 통해 이동과 외관을 업데이트합니다.</li>\n</ul>\n<p>캔버스는 웹 개발 세계에서 놀라운 기술로 자리 잡고 있습니다. 데이터 시각화부터 대규모 웹 기반 게임 제작까지, 응용 분야는 여러분의 상상력만큼 무한합니다. 이 가이드는 캔버스에 대한 이해를 풍성하게 하고 멋진 프로젝트를 시작할 자극을 드리기 위해 노력합니다. 그러니 할 수 있어요, 캔버스가 여러분의 타작게요!</p>\n<p>만약 이 글을 좋아한다면, 박수를 보내주세요. 여러분의 응원이 제 창의적 엔진을 충전합니다. 건배하며 백만 번 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}