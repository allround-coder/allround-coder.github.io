{"pageProps":{"post":{"title":"Nodejs에서 SSLCOMMERZ 결제 게이트웨이 통합하기","description":"","date":"2024-06-20 04:32","slug":"2024-06-20-IntegratingSSLCOMMERZPaymentGatewayinNodejs","content":"\n\n이 블로그 포스트에서는 MongoDB를 사용하여 Node.js 애플리케이션에 SSLCommerz 결제 게이트웨이를 통합하는 과정을 안내하겠습니다. 이 안내서는 웹 애플리케이션을 위한 안전하고 효율적인 결제 처리 시스템을 설정하는 데 도움이 될 것입니다.\n\n![이미지](/assets/img/2024-06-20-IntegratingSSLCOMMERZPaymentGatewayinNodejs_0.png)\n\nSSLCOMMERZ는 SSL Wireless가 개발한 안전하고 인증된 온라인 결제 게이트웨이 플랫폼으로, 온라인 비즈니스 및 전자상거래 판매 업체의 최종 고객이 고객의 카드, 모바일 지갑 또는 은행 계좌로 안전한 거래를 수행할 수 있도록 하였습니다. SSLCOMMERZ의 주요 이점을 살펴보겠습니다.\n\n- 온라인 문서를 통한 빠른 활성화\n- 쉬운 통합\n- 방글라데시 중앙 은행이 PSO 라이선스 부여\n- 30개 이상의 결제 방식\n- 글로벌 결제 수락\n- 실시간 대시보드 보고\n- PCI DSS 규정을 준수한 고수준 보안\n\n<div class=\"content-ad\"></div>\n\n# 준비 사항\n\n시작하기 전에 다음 사항이 준비되어 있는지 확인하십시오:\n\n- Node.js: 컴퓨터에 Node.js가 설치되어 있는지 확인하십시오. nodejs.org에서 다운로드할 수 있습니다.\n- MongoDB: MongoDB가 설정되어 실행 중인지 확인하십시오.\n- SSLCommerz 계정: SSLCommerz 상인 계정이 필요합니다. sslcommerz.com에서 가입할 수 있습니다.\n\n# 단계 1: 프로젝트 설정하기\n\n<div class=\"content-ad\"></div>\n\n먼저, 새로운 Node.js 프로젝트를 생성하고 필요한 종속성을 설치하세요. 터미널을 열고 다음 명령을 실행해보세요:\n\n```js\nmkdir sslcommerz-integration\ncd sslcommerz-integration\nnpm init -y\nnpm install express body-parser dotenv sslcommerz-lts mongodb cors\n```\n\n# 단계 2: 환경 변수 설정\n\n프로젝트의 루트에 .env 파일을 생성하고 SSLCommerz 자격 증명을 추가하세요. 이러한 자격 증명은 SSLCommerz API와의 요청을 인증하는 데 사용될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nSTORE_ID=your_store_id\nSTORE_PASSWORD=your_store_password\nSERVER_API=http://localhost:3030\nMONGO_URI = \"mongodb+srv://username:password@cluster0.7ctc5qe.mongodb.net/?retryWrites=true&w=majority\"\n```\n\n상인 계정을 생성한 후 이메일로 STORE_ID 및 STORE_PASSWORD를 받게 됩니다. SERVER_API는 백엔드 API 주소이며, MONGO_URI는 MongoDB 대시보드에서 얻을 수 있습니다.\n\n# 단계 3: 익스프레스 서버 설정\n\n이제 익스프레스 서버를 설정하고 결제 작업을 처리하기 위한 필요한 라우트를 정의하세요. app.js 파일을 만들고 다음 코드를 추가하세요:\n\n\n<div class=\"content-ad\"></div>\n\n```js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst SSLCommerzPayment = require('sslcommerz-lts');\nconst { MongoClient, ObjectId, ServerApiVersion } = require(\"mongodb\");\nconst cors = require(\"cors\");\nrequire('dotenv').config();\nconst mongoURI = process.env.MONGO_URI;\n\nconst app = express();\nconst port = process.env.PORT || 3030;\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true })); // SSLCommerz로부터 전송된 폼 데이터 처리를 위해\n\n// MongoDB 연결\nconst client = new MongoClient(mongoURI, {\n  serverApi: {\n    version: ServerApiVersion.v1,\n    strict: true,\n    deprecationErrors: true,\n  },\n});\n\n// CORS 및 JSON 파싱을 위한 미들웨어\napp.use(\n  cors({\n    origin: [\"http://localhost:5173\"],\n    credentials: true,\n  })\n);\napp.use(express.json());\n\n// SSLCommerz 구성\nconst store_id = process.env.STORE_ID;\nconst store_passwd = process.env.STORE_PASSWORD;\nconst is_live = false; // 라이브 모드: true, 샌드박스 모드: false\n\nconst run = async () => {\n  try {\n    // 데이터베이스 연결\n    await client.connect();\n\n    // 주문 저장을 위한 컬렉션\n    const ordersCollection = client.db(\"test\").collection(\"orders\");\n\n    // 결제 생성을 위한 POST 요청\n    app.post(\"/plans\", async (req, res) => {\n      // 클라이언트에서 보낸 플랜 세부 정보\n      const planDetails = req.body;\n\n      // 가격을 정수로 변환\n      const price = parseInt(planDetails.price);\n\n      // ObjectId를 사용하여 트랜잭션 ID 생성\n      const tran_id = new ObjectId().toString();\n\n      // SSLCommerz로 보낼 결제 데이터\n      const data = {\n        total_amount: price,\n        currency: \"BDT\",\n        tran_id: tran_id,\n        success_url: `${process.env.SERVER_API}/payment/success`,\n        fail_url: `${process.env.SERVER_API}/payment/fail`,\n        cancel_url: `${process.env.SERVER_API}/payment/cancel`,\n        ipn_url: `${process.env.SERVER_API}/payment/ipn`,\n        shipping_method: \"Courier\",\n        product_name: planDetails.plan,\n        product_category: \"Electronic\",\n        product_profile: \"general\",\n        cus_name: \"Customer Name\",\n        cus_email: planDetails.user_email,\n        cus_add1: \"Dhaka\",\n        cus_add2: \"Dhaka\",\n        cus_city: \"Dhaka\",\n        cus_state: \"Dhaka\",\n        cus_postcode: \"1000\",\n        cus_country: \"Bangladesh\",\n        cus_phone: \"01711111111\",\n        cus_fax: \"01711111111\",\n        ship_name: \"Customer Name\",\n        ship_add1: \"Dhaka\",\n        ship_add2: \"Dhaka\",\n        ship_city: \"Dhaka\",\n        ship_state: \"Dhaka\",\n        ship_postcode: 1000,\n        ship_country: \"Bangladesh\"\n      };\n\n      // SSLCommerz 결제 초기화\n      const sslcz = new SSLCommerzPayment(store_id, store_passwd, is_live);\n      sslcz.init(data).then((apiResponse) => {\n        // 결제 게이트웨이 URL 가져오기\n        let GatewayPageURL = apiResponse.GatewayPageURL;\n        res.send({ url: GatewayPageURL });\n\n        // 주문 세부 정보를 데이터베이스에 삽입\n        const order = { ...planDetails, tran_id, status: 'pending'};\n        const result = ordersCollection.insertOne(order);\n      });\n\n      // 성공한 결제 처리를 위한 POST 요청\n      app.post(\"/payment/success\", async (req, res) => {\n\n        // 데이터베이스에서 주문 상태를 성공으로 업데이트\n        const result = await ordersCollection.updateOne(\n          { tran_id },\n          { $set: { status: 'success'} }\n        );\n         // 클라이언트에 결제 성공 페이지로 리디렉션\n        res.redirect(\"http://localhost:5173/payment/success\");\n      });\n\n      // 실패한 결제 처리를 위한 POST 요청\n      app.post(\"/payment/fail\", async (req, res) => {\n\n        // 데이터베이스에서 주문 상태를 실패로 업데이트\n        const result = await ordersCollection.updateOne(\n          { tran_id },\n          { $set: { status: 'failed'} }\n        );\n       // 클라이언트에 결제 실패 페이지로 리디렉션\n        res.redirect(\"http://localhost:5173/payment/fail\");\n      });\n\n      // 취소된 결제 처리를 위한 POST 요청\n      app.post(\"/payment/cancel\", async (req, res) => {\n\n        // 데이터베이스에서 주문 상태를 취소됨으로 업데이트\n        const result = await ordersCollection.updateOne(\n          { tran_id },\n          { $set: { status: 'canceled'} }\n        );\n        // 클라이언트에 결제 취소 페이지로 리디렉션\n        res.redirect(\"http://localhost:5173/payment/cancel\");\n      });\n\n      // IPN(즉시 결제 알림) 처리를 위한 POST 요청\n      app.post(\"/payment/ipn\", async (req, res) => {\n\n        // IPN 알림에 따라 데이터베이스에서 주문 상태 업데이트\n        const result = await ordersCollection.updateOne(\n          { tran_id },\n          { $set: { status: status === \"VALID\" } }\n        );\n        res.send({ message: \"IPN received\" });\n      });\n    });\n  } finally {\n    // 서버가 계속 실행되도록 보장\n  }\n};\n\n// 서버 실행\nrun().catch(console.dir);\n\n// 서버 실행 상태 확인을 위한 간단한 루트\napp.get('/', async (req, res) => {\n  res.send({ server_status: \"Running\" });\n});\n\n// Express 서버 시작\napp.listen(port, () => {\n  console.log(`서버가 ${port} 포트에서 실행 중입니다.`);\n});\n```\n\n<div class=\"content-ad\"></div>\n\n프론트엔드에서 지불 프로세스를 트리거하기 위해 아래의 코드 스니펫을 사용할 수 있어요. 이 코드는 POST 요청을 /plans 엔드포인트로 보내고, 사용자를 SSLCommerz 지불 페이지로 리디렉션해요.\n\n```js\nconst handlePlans = async () => {\n  const { data } = await axios.post('/plans', {\n    user_email: user.email,\n    plan: plan,\n    price: price,\n    purchase_date: purchaseDate,\n    expiration_date: expirationDate,\n    currency: 'BDT',\n    payment_method: 'SSLCOMMERZ'\n  });\n  // 서버로부터 받은 URL로 리디렉션하기\n  window.location.replace(data.url);\n};\n```\n\n# 설명\n\n- handlePlans 함수: 해당 함수는 필요한 플랜 세부 정보와 함께 /plans 엔드포인트로 POST 요청을 보냅니다.\n- 리디렉션: 응답을 받은 후, 사용자는 window.location.replace를 사용하여 SSLCommerz 지불 페이지로 리디렉션됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n이 블로그 포스트에서 우리는 SSLCommerz 결제 게이트웨이를 Node.js 어플리케이션에 성공적으로 통합하고 데이터베이스 작업에 대해 직접 MongoDB를 사용했습니다. 이 통합을 통해 안전하게 결제를 처리하고 데이터베이스를 업데이트할 수 있습니다.\n\n# 주요 포인트\n\n- SSLCommerz 설정: SSLCommerz와 상점 ID 및 비밀번호를 획득하기 위해 상인 계정을 사용합니다.\n- 환경 변수: 환경 변수에 자격 증명을 안전하게 저장합니다.\n- MongoDB 작업: 주문 추적 및 사용자 플랜 업데이트를 위해 데이터베이스 작업에 MongoDB를 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n이 단계를 따라하면 Node.js 애플리케이션에 견고하고 안전한 결제 처리 시스템을 설정할 수 있어요. 코딩을 즐기세요!","ogImage":{"url":"/assets/img/2024-06-20-IntegratingSSLCOMMERZPaymentGatewayinNodejs_0.png"},"coverImage":"/assets/img/2024-06-20-IntegratingSSLCOMMERZPaymentGatewayinNodejs_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 블로그 포스트에서는 MongoDB를 사용하여 Node.js 애플리케이션에 SSLCommerz 결제 게이트웨이를 통합하는 과정을 안내하겠습니다. 이 안내서는 웹 애플리케이션을 위한 안전하고 효율적인 결제 처리 시스템을 설정하는 데 도움이 될 것입니다.</p>\n<p><img src=\"/assets/img/2024-06-20-IntegratingSSLCOMMERZPaymentGatewayinNodejs_0.png\" alt=\"이미지\"></p>\n<p>SSLCOMMERZ는 SSL Wireless가 개발한 안전하고 인증된 온라인 결제 게이트웨이 플랫폼으로, 온라인 비즈니스 및 전자상거래 판매 업체의 최종 고객이 고객의 카드, 모바일 지갑 또는 은행 계좌로 안전한 거래를 수행할 수 있도록 하였습니다. SSLCOMMERZ의 주요 이점을 살펴보겠습니다.</p>\n<ul>\n<li>온라인 문서를 통한 빠른 활성화</li>\n<li>쉬운 통합</li>\n<li>방글라데시 중앙 은행이 PSO 라이선스 부여</li>\n<li>30개 이상의 결제 방식</li>\n<li>글로벌 결제 수락</li>\n<li>실시간 대시보드 보고</li>\n<li>PCI DSS 규정을 준수한 고수준 보안</li>\n</ul>\n<h1>준비 사항</h1>\n<p>시작하기 전에 다음 사항이 준비되어 있는지 확인하십시오:</p>\n<ul>\n<li>Node.js: 컴퓨터에 Node.js가 설치되어 있는지 확인하십시오. nodejs.org에서 다운로드할 수 있습니다.</li>\n<li>MongoDB: MongoDB가 설정되어 실행 중인지 확인하십시오.</li>\n<li>SSLCommerz 계정: SSLCommerz 상인 계정이 필요합니다. sslcommerz.com에서 가입할 수 있습니다.</li>\n</ul>\n<h1>단계 1: 프로젝트 설정하기</h1>\n<p>먼저, 새로운 Node.js 프로젝트를 생성하고 필요한 종속성을 설치하세요. 터미널을 열고 다음 명령을 실행해보세요:</p>\n<pre><code class=\"hljs language-js\">mkdir sslcommerz-integration\ncd sslcommerz-integration\nnpm init -y\nnpm install express body-parser dotenv sslcommerz-lts mongodb cors\n</code></pre>\n<h1>단계 2: 환경 변수 설정</h1>\n<p>프로젝트의 루트에 .env 파일을 생성하고 SSLCommerz 자격 증명을 추가하세요. 이러한 자격 증명은 SSLCommerz API와의 요청을 인증하는 데 사용될 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">STORE_ID</span>=your_store_id\n<span class=\"hljs-variable constant_\">STORE_PASSWORD</span>=your_store_password\n<span class=\"hljs-variable constant_\">SERVER_API</span>=<span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//localhost:3030</span>\n<span class=\"hljs-variable constant_\">MONGO_URI</span> = <span class=\"hljs-string\">\"mongodb+srv://username:password@cluster0.7ctc5qe.mongodb.net/?retryWrites=true&#x26;w=majority\"</span>\n</code></pre>\n<p>상인 계정을 생성한 후 이메일로 STORE_ID 및 STORE_PASSWORD를 받게 됩니다. SERVER_API는 백엔드 API 주소이며, MONGO_URI는 MongoDB 대시보드에서 얻을 수 있습니다.</p>\n<h1>단계 3: 익스프레스 서버 설정</h1>\n<p>이제 익스프레스 서버를 설정하고 결제 작업을 처리하기 위한 필요한 라우트를 정의하세요. app.js 파일을 만들고 다음 코드를 추가하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'body-parser'</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SSLCommerzPayment</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'sslcommerz-lts'</span>);\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">MongoClient</span>, <span class=\"hljs-title class_\">ObjectId</span>, <span class=\"hljs-title class_\">ServerApiVersion</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"mongodb\"</span>);\n<span class=\"hljs-keyword\">const</span> cors = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"cors\"</span>);\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dotenv'</span>).<span class=\"hljs-title function_\">config</span>();\n<span class=\"hljs-keyword\">const</span> mongoURI = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">MONGO_URI</span>;\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n<span class=\"hljs-keyword\">const</span> port = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">3030</span>;\n\napp.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">json</span>());\napp.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">urlencoded</span>({ <span class=\"hljs-attr\">extended</span>: <span class=\"hljs-literal\">true</span> })); <span class=\"hljs-comment\">// SSLCommerz로부터 전송된 폼 데이터 처리를 위해</span>\n\n<span class=\"hljs-comment\">// MongoDB 연결</span>\n<span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MongoClient</span>(mongoURI, {\n  <span class=\"hljs-attr\">serverApi</span>: {\n    <span class=\"hljs-attr\">version</span>: <span class=\"hljs-title class_\">ServerApiVersion</span>.<span class=\"hljs-property\">v1</span>,\n    <span class=\"hljs-attr\">strict</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">deprecationErrors</span>: <span class=\"hljs-literal\">true</span>,\n  },\n});\n\n<span class=\"hljs-comment\">// CORS 및 JSON 파싱을 위한 미들웨어</span>\napp.<span class=\"hljs-title function_\">use</span>(\n  <span class=\"hljs-title function_\">cors</span>({\n    <span class=\"hljs-attr\">origin</span>: [<span class=\"hljs-string\">\"http://localhost:5173\"</span>],\n    <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-literal\">true</span>,\n  })\n);\napp.<span class=\"hljs-title function_\">use</span>(express.<span class=\"hljs-title function_\">json</span>());\n\n<span class=\"hljs-comment\">// SSLCommerz 구성</span>\n<span class=\"hljs-keyword\">const</span> store_id = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">STORE_ID</span>;\n<span class=\"hljs-keyword\">const</span> store_passwd = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">STORE_PASSWORD</span>;\n<span class=\"hljs-keyword\">const</span> is_live = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// 라이브 모드: true, 샌드박스 모드: false</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">run</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 데이터베이스 연결</span>\n    <span class=\"hljs-keyword\">await</span> client.<span class=\"hljs-title function_\">connect</span>();\n\n    <span class=\"hljs-comment\">// 주문 저장을 위한 컬렉션</span>\n    <span class=\"hljs-keyword\">const</span> ordersCollection = client.<span class=\"hljs-title function_\">db</span>(<span class=\"hljs-string\">\"test\"</span>).<span class=\"hljs-title function_\">collection</span>(<span class=\"hljs-string\">\"orders\"</span>);\n\n    <span class=\"hljs-comment\">// 결제 생성을 위한 POST 요청</span>\n    app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/plans\"</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n      <span class=\"hljs-comment\">// 클라이언트에서 보낸 플랜 세부 정보</span>\n      <span class=\"hljs-keyword\">const</span> planDetails = req.<span class=\"hljs-property\">body</span>;\n\n      <span class=\"hljs-comment\">// 가격을 정수로 변환</span>\n      <span class=\"hljs-keyword\">const</span> price = <span class=\"hljs-built_in\">parseInt</span>(planDetails.<span class=\"hljs-property\">price</span>);\n\n      <span class=\"hljs-comment\">// ObjectId를 사용하여 트랜잭션 ID 생성</span>\n      <span class=\"hljs-keyword\">const</span> tran_id = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectId</span>().<span class=\"hljs-title function_\">toString</span>();\n\n      <span class=\"hljs-comment\">// SSLCommerz로 보낼 결제 데이터</span>\n      <span class=\"hljs-keyword\">const</span> data = {\n        <span class=\"hljs-attr\">total_amount</span>: price,\n        <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">\"BDT\"</span>,\n        <span class=\"hljs-attr\">tran_id</span>: tran_id,\n        <span class=\"hljs-attr\">success_url</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.SERVER_API}</span>/payment/success`</span>,\n        <span class=\"hljs-attr\">fail_url</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.SERVER_API}</span>/payment/fail`</span>,\n        <span class=\"hljs-attr\">cancel_url</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.SERVER_API}</span>/payment/cancel`</span>,\n        <span class=\"hljs-attr\">ipn_url</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.SERVER_API}</span>/payment/ipn`</span>,\n        <span class=\"hljs-attr\">shipping_method</span>: <span class=\"hljs-string\">\"Courier\"</span>,\n        <span class=\"hljs-attr\">product_name</span>: planDetails.<span class=\"hljs-property\">plan</span>,\n        <span class=\"hljs-attr\">product_category</span>: <span class=\"hljs-string\">\"Electronic\"</span>,\n        <span class=\"hljs-attr\">product_profile</span>: <span class=\"hljs-string\">\"general\"</span>,\n        <span class=\"hljs-attr\">cus_name</span>: <span class=\"hljs-string\">\"Customer Name\"</span>,\n        <span class=\"hljs-attr\">cus_email</span>: planDetails.<span class=\"hljs-property\">user_email</span>,\n        <span class=\"hljs-attr\">cus_add1</span>: <span class=\"hljs-string\">\"Dhaka\"</span>,\n        <span class=\"hljs-attr\">cus_add2</span>: <span class=\"hljs-string\">\"Dhaka\"</span>,\n        <span class=\"hljs-attr\">cus_city</span>: <span class=\"hljs-string\">\"Dhaka\"</span>,\n        <span class=\"hljs-attr\">cus_state</span>: <span class=\"hljs-string\">\"Dhaka\"</span>,\n        <span class=\"hljs-attr\">cus_postcode</span>: <span class=\"hljs-string\">\"1000\"</span>,\n        <span class=\"hljs-attr\">cus_country</span>: <span class=\"hljs-string\">\"Bangladesh\"</span>,\n        <span class=\"hljs-attr\">cus_phone</span>: <span class=\"hljs-string\">\"01711111111\"</span>,\n        <span class=\"hljs-attr\">cus_fax</span>: <span class=\"hljs-string\">\"01711111111\"</span>,\n        <span class=\"hljs-attr\">ship_name</span>: <span class=\"hljs-string\">\"Customer Name\"</span>,\n        <span class=\"hljs-attr\">ship_add1</span>: <span class=\"hljs-string\">\"Dhaka\"</span>,\n        <span class=\"hljs-attr\">ship_add2</span>: <span class=\"hljs-string\">\"Dhaka\"</span>,\n        <span class=\"hljs-attr\">ship_city</span>: <span class=\"hljs-string\">\"Dhaka\"</span>,\n        <span class=\"hljs-attr\">ship_state</span>: <span class=\"hljs-string\">\"Dhaka\"</span>,\n        <span class=\"hljs-attr\">ship_postcode</span>: <span class=\"hljs-number\">1000</span>,\n        <span class=\"hljs-attr\">ship_country</span>: <span class=\"hljs-string\">\"Bangladesh\"</span>\n      };\n\n      <span class=\"hljs-comment\">// SSLCommerz 결제 초기화</span>\n      <span class=\"hljs-keyword\">const</span> sslcz = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SSLCommerzPayment</span>(store_id, store_passwd, is_live);\n      sslcz.<span class=\"hljs-title function_\">init</span>(data).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">apiResponse</span>) =></span> {\n        <span class=\"hljs-comment\">// 결제 게이트웨이 URL 가져오기</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">GatewayPageURL</span> = apiResponse.<span class=\"hljs-property\">GatewayPageURL</span>;\n        res.<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">url</span>: <span class=\"hljs-title class_\">GatewayPageURL</span> });\n\n        <span class=\"hljs-comment\">// 주문 세부 정보를 데이터베이스에 삽입</span>\n        <span class=\"hljs-keyword\">const</span> order = { ...planDetails, tran_id, <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'pending'</span>};\n        <span class=\"hljs-keyword\">const</span> result = ordersCollection.<span class=\"hljs-title function_\">insertOne</span>(order);\n      });\n\n      <span class=\"hljs-comment\">// 성공한 결제 처리를 위한 POST 요청</span>\n      app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/payment/success\"</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n\n        <span class=\"hljs-comment\">// 데이터베이스에서 주문 상태를 성공으로 업데이트</span>\n        <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> ordersCollection.<span class=\"hljs-title function_\">updateOne</span>(\n          { tran_id },\n          { <span class=\"hljs-attr\">$set</span>: { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span>} }\n        );\n         <span class=\"hljs-comment\">// 클라이언트에 결제 성공 페이지로 리디렉션</span>\n        res.<span class=\"hljs-title function_\">redirect</span>(<span class=\"hljs-string\">\"http://localhost:5173/payment/success\"</span>);\n      });\n\n      <span class=\"hljs-comment\">// 실패한 결제 처리를 위한 POST 요청</span>\n      app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/payment/fail\"</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n\n        <span class=\"hljs-comment\">// 데이터베이스에서 주문 상태를 실패로 업데이트</span>\n        <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> ordersCollection.<span class=\"hljs-title function_\">updateOne</span>(\n          { tran_id },\n          { <span class=\"hljs-attr\">$set</span>: { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'failed'</span>} }\n        );\n       <span class=\"hljs-comment\">// 클라이언트에 결제 실패 페이지로 리디렉션</span>\n        res.<span class=\"hljs-title function_\">redirect</span>(<span class=\"hljs-string\">\"http://localhost:5173/payment/fail\"</span>);\n      });\n\n      <span class=\"hljs-comment\">// 취소된 결제 처리를 위한 POST 요청</span>\n      app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/payment/cancel\"</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n\n        <span class=\"hljs-comment\">// 데이터베이스에서 주문 상태를 취소됨으로 업데이트</span>\n        <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> ordersCollection.<span class=\"hljs-title function_\">updateOne</span>(\n          { tran_id },\n          { <span class=\"hljs-attr\">$set</span>: { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'canceled'</span>} }\n        );\n        <span class=\"hljs-comment\">// 클라이언트에 결제 취소 페이지로 리디렉션</span>\n        res.<span class=\"hljs-title function_\">redirect</span>(<span class=\"hljs-string\">\"http://localhost:5173/payment/cancel\"</span>);\n      });\n\n      <span class=\"hljs-comment\">// IPN(즉시 결제 알림) 처리를 위한 POST 요청</span>\n      app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/payment/ipn\"</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n\n        <span class=\"hljs-comment\">// IPN 알림에 따라 데이터베이스에서 주문 상태 업데이트</span>\n        <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> ordersCollection.<span class=\"hljs-title function_\">updateOne</span>(\n          { tran_id },\n          { <span class=\"hljs-attr\">$set</span>: { <span class=\"hljs-attr\">status</span>: status === <span class=\"hljs-string\">\"VALID\"</span> } }\n        );\n        res.<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"IPN received\"</span> });\n      });\n    });\n  } <span class=\"hljs-keyword\">finally</span> {\n    <span class=\"hljs-comment\">// 서버가 계속 실행되도록 보장</span>\n  }\n};\n\n<span class=\"hljs-comment\">// 서버 실행</span>\n<span class=\"hljs-title function_\">run</span>().<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">dir</span>);\n\n<span class=\"hljs-comment\">// 서버 실행 상태 확인을 위한 간단한 루트</span>\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-keyword\">async</span> (req, res) => {\n  res.<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">server_status</span>: <span class=\"hljs-string\">\"Running\"</span> });\n});\n\n<span class=\"hljs-comment\">// Express 서버 시작</span>\napp.<span class=\"hljs-title function_\">listen</span>(port, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`서버가 <span class=\"hljs-subst\">${port}</span> 포트에서 실행 중입니다.`</span>);\n});\n</code></pre>\n<p>프론트엔드에서 지불 프로세스를 트리거하기 위해 아래의 코드 스니펫을 사용할 수 있어요. 이 코드는 POST 요청을 /plans 엔드포인트로 보내고, 사용자를 SSLCommerz 지불 페이지로 리디렉션해요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handlePlans</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> { data } = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/plans'</span>, {\n    <span class=\"hljs-attr\">user_email</span>: user.<span class=\"hljs-property\">email</span>,\n    <span class=\"hljs-attr\">plan</span>: plan,\n    <span class=\"hljs-attr\">price</span>: price,\n    <span class=\"hljs-attr\">purchase_date</span>: purchaseDate,\n    <span class=\"hljs-attr\">expiration_date</span>: expirationDate,\n    <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">'BDT'</span>,\n    <span class=\"hljs-attr\">payment_method</span>: <span class=\"hljs-string\">'SSLCOMMERZ'</span>\n  });\n  <span class=\"hljs-comment\">// 서버로부터 받은 URL로 리디렉션하기</span>\n  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-title function_\">replace</span>(data.<span class=\"hljs-property\">url</span>);\n};\n</code></pre>\n<h1>설명</h1>\n<ul>\n<li>handlePlans 함수: 해당 함수는 필요한 플랜 세부 정보와 함께 /plans 엔드포인트로 POST 요청을 보냅니다.</li>\n<li>리디렉션: 응답을 받은 후, 사용자는 window.location.replace를 사용하여 SSLCommerz 지불 페이지로 리디렉션됩니다.</li>\n</ul>\n<h1>결론</h1>\n<p>이 블로그 포스트에서 우리는 SSLCommerz 결제 게이트웨이를 Node.js 어플리케이션에 성공적으로 통합하고 데이터베이스 작업에 대해 직접 MongoDB를 사용했습니다. 이 통합을 통해 안전하게 결제를 처리하고 데이터베이스를 업데이트할 수 있습니다.</p>\n<h1>주요 포인트</h1>\n<ul>\n<li>SSLCommerz 설정: SSLCommerz와 상점 ID 및 비밀번호를 획득하기 위해 상인 계정을 사용합니다.</li>\n<li>환경 변수: 환경 변수에 자격 증명을 안전하게 저장합니다.</li>\n<li>MongoDB 작업: 주문 추적 및 사용자 플랜 업데이트를 위해 데이터베이스 작업에 MongoDB를 사용합니다.</li>\n</ul>\n<p>이 단계를 따라하면 Node.js 애플리케이션에 견고하고 안전한 결제 처리 시스템을 설정할 수 있어요. 코딩을 즐기세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}