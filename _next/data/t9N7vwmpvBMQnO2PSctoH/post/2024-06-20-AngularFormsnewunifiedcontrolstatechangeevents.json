{"pageProps":{"post":{"title":"Angular 폼의 새로운 통합된 컨트롤 상태 변경 이벤트","description":"","date":"2024-06-20 00:32","slug":"2024-06-20-AngularFormsnewunifiedcontrolstatechangeevents","content":"\n\nAngular v18의 릴리스는 프레임워크에 흥미로운 새로운 기능과 개선 사항을 도입했습니다.\n\n그 중 하나의 기능은 특히 유망하며, Angular Forms 라이브러리 내에서 새로운 기능을 소개하여 AbstractControl 클래스를 통해 통합된 컨트롤 상태 변경 이벤트를 향상시킵니다.\n\n내 글에서는 주제에 집중하기 전에 기본 사항을 먼저 검토하는 것이 관습입니다. 이는 다가오는 내용을 더 잘 이해하도록 도와줄 것입니다.\n\n# Angular 반응형 Forms: 기본 사항\n\n<div class=\"content-ad\"></div>\n\n앵귤러 반응형 폼은 양식 입력을 처리하는 모델 중심 접근 방식을 제공하며, 데이터 모델에 대한 동기식 액세스, 입력 유효성 검사 및 변경 추적을 위한 강력한 도구를 Observables를 통해 제공합니다.\n\n반응형 폼 데이터 모델은 다음 클래스를 사용하여 구성됩니다:\n\n- FormControl: 단일 입력 양식을 나타냅니다. 값은 기본 유형입니다.\n- FormGroup: FormControl 그룹을 나타냅니다. 값은 객체입니다.\n- FormArray: FormControl 목록을 나타냅니다. 값은 배열입니다.\n\nFormGroup으로 나타낼 수 있는 폼의 일반적인 예시는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { FormGroup, FormControl, FormArray } from '@angular/forms';\n\nconst articleForm = new FormGroup({\n  title: new FormControl(''),\n  content: new FormControl(''),\n  tags: new FormArray([])\n});\n```\n\n이 모든 클래스들은 여기서는 컨트롤이라고만 부르겠습니다. 이 컨트롤들은 AbstractControl 클래스에서 파생되었기 때문에 공통 속성과 메소드를 공유합니다.\n\n## 템플릿 바인딩\n\nAngular Reactive Forms 모델 기반 접근 방식은 라이브러리 자체에서 제공하는 다양한 디렉티브에 의해 지원되며, 이는 폼 컨트롤을 HTML 요소와 쉽게 통합할 수 있도록 합니다. \n\n<div class=\"content-ad\"></div>\n\n다음의 FormGroup을 예시로 삼아보겠습니다:\n\n```js\nthis.articleForm = new FormGroup({\n  author: new FormGroup({\n    name: new FormControl(''),\n  }),\n  tags: new FormArray([ new FormControl('Angular') ]),\n});\n```\n\n제공된 지시문을 사용하여 템플릿에 쉽게 바인딩할 수 있습니다:\n\n```js\n<form [formGroup]=\"articleForm\">\n  <div formGroupName=\"author\">\n    <input formControlName=\"name\" />\n  </div>\n\n  <div formArrayName=\"tags\">\n    <div *ngFor=\"let tag of tags.controls; index as i\">\n      <input [formControlName]=\"i\" />\n    </div>\n  </div>\n</form>\n```\n\n<div class=\"content-ad\"></div>\n\n잊지 말아야 할 중요한 점은, 지나치게 깊게 파고들지 않으면서도 필요한 내용은, FormGroupDirective를 사용하여 쉽게 폼을 재설정하는 버튼과 해당 값을 제출하는 버튼을 만들 수 있다는 것입니다:\n\n```js\n<form [formGroup]=\"articleForm\">\n  <!-- 폼 템플릿 -->\n\n  <button type=\"reset\">지우기</button>\n  <button type=\"submit\">저장</button>\n</form>\n```\n\nFormGroupDirective는 이러한 버튼에서 발생하는 클릭 이벤트를 가로채어 컨트롤의 reset() 함수를 트리거하고, 컨트롤을 초기 값으로 재설정하며 directive의 ngSubmit 출력 이벤트를 트리거합니다.\n\n## 값 변경 감시\n\n<div class=\"content-ad\"></div>\n\n특정 작업을 수행하기 위해 값을 변경하는 것을 듣기 위해, 추적하려는 컨트롤의 valueChanges observable에 구독할 수 있습니다:\n\n```js\nmyControl.valueChanges.subscribe(value => {\n  console.log('새 값:', value)\n});\n```\n\n## 비활성화된 컨트롤\n\n각 컨트롤은 비활성화로 설정되어 사용자가 값을 편집하는 것을 방지할 수 있습니다. 이는 HTML 비활성화 속성(Disabled attribute)의 동작을 모방합니다.\n\n<div class=\"content-ad\"></div>\n\n이를 수행하기 위해서는 컨트롤을 비활성화하는 방법으로 사용할 수도 있고, disable()와 enable() 함수를 사용하여 이 상태를 전환할 수도 있습니다:\n\n```js\nimport { FormControl } from '@angular/forms';\n\nconst myControl = new FormControl({ value: '', disabled: true });\nconsole.log(myControl.disabled, myControl.enabled) // true, false\n\nmyControl.enable();\nconsole.log(myControl.disabled, myControl.enabled) // false, true\n\nmyControl.disable();\nconsole.log(myControl.disabled, myControl.enabled) // true, false\n```\n\n위 예제에서 보듯이 AbstractControl 클래스는 이 상태를 설명하기 위해 disabled와 enabled라는 두 가지 전용 속성을 제공합니다.\n\n## Validators\n\n<div class=\"content-ad\"></div>\n\n특정 규칙을 강제하고 컨트롤이 특정 기준을 충족하는지 확인하려면 일부 유효성 검사 규칙 또는 유효성 검증기를 지정할 수도 있습니다.\n\n유효성 검증기는 동기식일 수도 있고(@required 또는 @minLength와 같은), 외부 리소스에 의존하는 유효성 검사를 처리하는 비동기식일 수도 있습니다.\n\n```js\nimport { FormControl, Validators } from '@angular/forms';\nimport { MyCustomAsyncValidators } from './my-custom-async-validators.ts';\n\nconst myFormControl = new FormControl('', {\n  validators: [ Validators.required, Validators.minLength(3) ],\n  asyncValidators: [ MyCustomAsyncValidators.validate ]\n});\n```\n\n이러한 규칙을 기반으로 AbstractControl 클래스는 유효성 상태를 설명하는 몇 가지 속성도 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n- valid: 제어 값이 모든 유효성 검사 테스트를 통과했는지 여부를 나타내는 부울 값입니다;\n- invalid: 제어 값이 모든 유효성 검사 테스트를 통과하지 못했는지 여부를 나타내는 부울 값입니다; valid 속성의 반대입니다;\n- pending: 제어 값이 유효성 검사를 수행 중인지 여부를 나타내는 부울 값입니다.\n\n## FormControlStatus\n\n비활성 상태와 유효성 상태는 서로 연결되어 있습니다.\n사실, 이들은 다음과 같이 유형이 지정된 상태 속성으로 파생됩니다:\n\n```js\ntype FormControlStatus = 'VALID' | 'INVALID' | 'PENDING' | 'DISABLED';\n```\n\n<div class=\"content-ad\"></div>\n\n## 원형과 접촉됨\n\nAbstractControl 클래스는 사용자가 양식과 상호 작용한 방식을 설명하는 여러 속성도 제공합니다:\n\n- pristine: 컨트롤이 원형 상태인지 여부를 나타내는 부울 값으로, 즉 아직 수정되지 않은 상태임을 의미합니다;\n- dirty: 컨트롤이 수정되었는지 여부를 나타내는 부울 값입니다;\n- untouched: 컨트롤이 아직 터치되지 않았는지 여부를 나타내는 부울 값으로, 즉 아직 상호 작용되지 않았음을 의미합니다;\n- touched: 컨트롤이 터치되었는지 여부를 나타내는 부울 값입니다.\n\nAngular 반응형 폼의 기본 사항 중 일부를 다시 살펴보았으니, 이제 이 글의 주제를 소개할 때입니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-20-AngularFormsnewunifiedcontrolstatechangeevents_0.png)\n\n# 새로운 통합 제어 상태 변경 이벤트\n\nAngular v18부터 AbstractControl 클래스는 이제 모든 제어 상태 변경 이벤트를 추적하기 위한 새로운 이벤트 observable을 노출합니다.\n\n이를 통해 이제 PristineEvent, ValueChangeEvent, StatusEvent 및 TouchedEvent 이벤트를 통해 FormControl, FormGroup 및 FormArray 클래스를 모니터링할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nmyControl.events\n  .pipe(filter((event) => event instanceof PristineChangeEvent))\n  .subscribe((event) => console.log('Pristine:', event.pristine));\n\nmyControl.events\n  .pipe(filter((event) => event instanceof ValueChangeEvent))\n  .subscribe((event) => console.log('Value:', event.value));\n\nmyControl.events\n  .pipe(filter((event) => event instanceof StatusChangeEvent))\n  .subscribe((event) => console.log('Status:', event.status));\n\nmyControl.events\n  .pipe(filter((event) => event instanceof TouchedChangeEvent))\n  .subscribe((event) => console.log('Touched:', event.touched));\n```\n\n이러한 기능들은 매우 강력합니다. 특히 valueChange를 제외하고는 이전에 상태 변경을 제대로 추적하기가 어려웠습니다.\n\n게다가 FormGroup 클래스는 events observable을 통해 FormSubmittedEvent와 FormResetEvent 두 가지 추가 이벤트를 발생시킬 수도 있습니다.\n\n```js\nmyControl.events\n  .pipe(filter((event) => event instanceof FormSubmittedEvent))\n  .subscribe((event) => console.log('Submit:', event));\n\nmyControl.events\n  .pipe(filter((event) => event instanceof FormResetEvent))\n  .subscribe((event) => console.log('Reset:', event));\n```\n\n<div class=\"content-ad\"></div>\n\nFormSubmittedEvent와 FormResetEvent는 모두 FormGroupDirective에서 상속되며 실제로 지시자 자체에서만 발생됩니다.\n\n## 추가 정보\n\n이 새로운 추가로, 다음 AbstractControl 메소드들은 emitEvent 매개변수를 지원하도록 업데이트되었습니다:\n\n- markAsPristine(): 컨트롤을 pristine으로 표시;\n- markAsDirty(): 컨트롤을 dirty로 표시;\n- markAsTouched(): 컨트롤을 touched로 표시;\n- markAsUntouched(): 컨트롤을 untouched로 표시;\n- markAllAsTouched(): 컨트롤과 하위 요소를 모두 touched 상태로 표시합니다.\n\n<div class=\"content-ad\"></div>\n\n# 지금까지 읽어 주셔서 감사합니다 🙏\n\n피드백을 받고 싶어요. 댓글을 남겨주시거나 클랩을 눌러주세요. 👏 \n\n그리고 만약에 정말 좋았다면, 당신의 커뮤니티, 기술 브라더들, 누구든지 공유해주세요. 그리고 리링크드인 팔로우도 잊지 말아주세요. 👋😁","ogImage":{"url":"/assets/img/2024-06-20-AngularFormsnewunifiedcontrolstatechangeevents_0.png"},"coverImage":"/assets/img/2024-06-20-AngularFormsnewunifiedcontrolstatechangeevents_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Angular v18의 릴리스는 프레임워크에 흥미로운 새로운 기능과 개선 사항을 도입했습니다.</p>\n<p>그 중 하나의 기능은 특히 유망하며, Angular Forms 라이브러리 내에서 새로운 기능을 소개하여 AbstractControl 클래스를 통해 통합된 컨트롤 상태 변경 이벤트를 향상시킵니다.</p>\n<p>내 글에서는 주제에 집중하기 전에 기본 사항을 먼저 검토하는 것이 관습입니다. 이는 다가오는 내용을 더 잘 이해하도록 도와줄 것입니다.</p>\n<h1>Angular 반응형 Forms: 기본 사항</h1>\n<p>앵귤러 반응형 폼은 양식 입력을 처리하는 모델 중심 접근 방식을 제공하며, 데이터 모델에 대한 동기식 액세스, 입력 유효성 검사 및 변경 추적을 위한 강력한 도구를 Observables를 통해 제공합니다.</p>\n<p>반응형 폼 데이터 모델은 다음 클래스를 사용하여 구성됩니다:</p>\n<ul>\n<li>FormControl: 단일 입력 양식을 나타냅니다. 값은 기본 유형입니다.</li>\n<li>FormGroup: FormControl 그룹을 나타냅니다. 값은 객체입니다.</li>\n<li>FormArray: FormControl 목록을 나타냅니다. 값은 배열입니다.</li>\n</ul>\n<p>FormGroup으로 나타낼 수 있는 폼의 일반적인 예시는 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FormGroup</span>, <span class=\"hljs-title class_\">FormControl</span>, <span class=\"hljs-title class_\">FormArray</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n\n<span class=\"hljs-keyword\">const</span> articleForm = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormGroup</span>({\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormControl</span>(<span class=\"hljs-string\">''</span>),\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormControl</span>(<span class=\"hljs-string\">''</span>),\n  <span class=\"hljs-attr\">tags</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormArray</span>([])\n});\n</code></pre>\n<p>이 모든 클래스들은 여기서는 컨트롤이라고만 부르겠습니다. 이 컨트롤들은 AbstractControl 클래스에서 파생되었기 때문에 공통 속성과 메소드를 공유합니다.</p>\n<h2>템플릿 바인딩</h2>\n<p>Angular Reactive Forms 모델 기반 접근 방식은 라이브러리 자체에서 제공하는 다양한 디렉티브에 의해 지원되며, 이는 폼 컨트롤을 HTML 요소와 쉽게 통합할 수 있도록 합니다.</p>\n<p>다음의 FormGroup을 예시로 삼아보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">articleForm</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormGroup</span>({\n  <span class=\"hljs-attr\">author</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormGroup</span>({\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormControl</span>(<span class=\"hljs-string\">''</span>),\n  }),\n  <span class=\"hljs-attr\">tags</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormArray</span>([ <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormControl</span>(<span class=\"hljs-string\">'Angular'</span>) ]),\n});\n</code></pre>\n<p>제공된 지시문을 사용하여 템플릿에 쉽게 바인딩할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;form [formGroup]=<span class=\"hljs-string\">\"articleForm\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">formGroupName</span>=<span class=\"hljs-string\">\"author\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"name\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">formArrayName</span>=<span class=\"hljs-string\">\"tags\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let tag of tags.controls; index as i\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> [<span class=\"hljs-attr\">formControlName</span>]=<span class=\"hljs-string\">\"i\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n&#x3C;/form>\n</code></pre>\n<p>잊지 말아야 할 중요한 점은, 지나치게 깊게 파고들지 않으면서도 필요한 내용은, FormGroupDirective를 사용하여 쉽게 폼을 재설정하는 버튼과 해당 값을 제출하는 버튼을 만들 수 있다는 것입니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;form [formGroup]=<span class=\"hljs-string\">\"articleForm\"</span>>\n  &#x3C;!-- 폼 템플릿 -->\n\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"reset\"</span>></span>지우기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>></span>저장<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n&#x3C;/form>\n</code></pre>\n<p>FormGroupDirective는 이러한 버튼에서 발생하는 클릭 이벤트를 가로채어 컨트롤의 reset() 함수를 트리거하고, 컨트롤을 초기 값으로 재설정하며 directive의 ngSubmit 출력 이벤트를 트리거합니다.</p>\n<h2>값 변경 감시</h2>\n<p>특정 작업을 수행하기 위해 값을 변경하는 것을 듣기 위해, 추적하려는 컨트롤의 valueChanges observable에 구독할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">myControl.<span class=\"hljs-property\">valueChanges</span>.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'새 값:'</span>, value)\n});\n</code></pre>\n<h2>비활성화된 컨트롤</h2>\n<p>각 컨트롤은 비활성화로 설정되어 사용자가 값을 편집하는 것을 방지할 수 있습니다. 이는 HTML 비활성화 속성(Disabled attribute)의 동작을 모방합니다.</p>\n<p>이를 수행하기 위해서는 컨트롤을 비활성화하는 방법으로 사용할 수도 있고, disable()와 enable() 함수를 사용하여 이 상태를 전환할 수도 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FormControl</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n\n<span class=\"hljs-keyword\">const</span> myControl = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormControl</span>({ <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">''</span>, <span class=\"hljs-attr\">disabled</span>: <span class=\"hljs-literal\">true</span> });\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myControl.<span class=\"hljs-property\">disabled</span>, myControl.<span class=\"hljs-property\">enabled</span>) <span class=\"hljs-comment\">// true, false</span>\n\nmyControl.<span class=\"hljs-title function_\">enable</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myControl.<span class=\"hljs-property\">disabled</span>, myControl.<span class=\"hljs-property\">enabled</span>) <span class=\"hljs-comment\">// false, true</span>\n\nmyControl.<span class=\"hljs-title function_\">disable</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myControl.<span class=\"hljs-property\">disabled</span>, myControl.<span class=\"hljs-property\">enabled</span>) <span class=\"hljs-comment\">// true, false</span>\n</code></pre>\n<p>위 예제에서 보듯이 AbstractControl 클래스는 이 상태를 설명하기 위해 disabled와 enabled라는 두 가지 전용 속성을 제공합니다.</p>\n<h2>Validators</h2>\n<p>특정 규칙을 강제하고 컨트롤이 특정 기준을 충족하는지 확인하려면 일부 유효성 검사 규칙 또는 유효성 검증기를 지정할 수도 있습니다.</p>\n<p>유효성 검증기는 동기식일 수도 있고(@required 또는 @minLength와 같은), 외부 리소스에 의존하는 유효성 검사를 처리하는 비동기식일 수도 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FormControl</span>, <span class=\"hljs-title class_\">Validators</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MyCustomAsyncValidators</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./my-custom-async-validators.ts'</span>;\n\n<span class=\"hljs-keyword\">const</span> myFormControl = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormControl</span>(<span class=\"hljs-string\">''</span>, {\n  <span class=\"hljs-attr\">validators</span>: [ <span class=\"hljs-title class_\">Validators</span>.<span class=\"hljs-property\">required</span>, <span class=\"hljs-title class_\">Validators</span>.<span class=\"hljs-title function_\">minLength</span>(<span class=\"hljs-number\">3</span>) ],\n  <span class=\"hljs-attr\">asyncValidators</span>: [ <span class=\"hljs-title class_\">MyCustomAsyncValidators</span>.<span class=\"hljs-property\">validate</span> ]\n});\n</code></pre>\n<p>이러한 규칙을 기반으로 AbstractControl 클래스는 유효성 상태를 설명하는 몇 가지 속성도 제공합니다.</p>\n<ul>\n<li>valid: 제어 값이 모든 유효성 검사 테스트를 통과했는지 여부를 나타내는 부울 값입니다;</li>\n<li>invalid: 제어 값이 모든 유효성 검사 테스트를 통과하지 못했는지 여부를 나타내는 부울 값입니다; valid 속성의 반대입니다;</li>\n<li>pending: 제어 값이 유효성 검사를 수행 중인지 여부를 나타내는 부울 값입니다.</li>\n</ul>\n<h2>FormControlStatus</h2>\n<p>비활성 상태와 유효성 상태는 서로 연결되어 있습니다.\n사실, 이들은 다음과 같이 유형이 지정된 상태 속성으로 파생됩니다:</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">FormControlStatus</span> = <span class=\"hljs-string\">'VALID'</span> | <span class=\"hljs-string\">'INVALID'</span> | <span class=\"hljs-string\">'PENDING'</span> | <span class=\"hljs-string\">'DISABLED'</span>;\n</code></pre>\n<h2>원형과 접촉됨</h2>\n<p>AbstractControl 클래스는 사용자가 양식과 상호 작용한 방식을 설명하는 여러 속성도 제공합니다:</p>\n<ul>\n<li>pristine: 컨트롤이 원형 상태인지 여부를 나타내는 부울 값으로, 즉 아직 수정되지 않은 상태임을 의미합니다;</li>\n<li>dirty: 컨트롤이 수정되었는지 여부를 나타내는 부울 값입니다;</li>\n<li>untouched: 컨트롤이 아직 터치되지 않았는지 여부를 나타내는 부울 값으로, 즉 아직 상호 작용되지 않았음을 의미합니다;</li>\n<li>touched: 컨트롤이 터치되었는지 여부를 나타내는 부울 값입니다.</li>\n</ul>\n<p>Angular 반응형 폼의 기본 사항 중 일부를 다시 살펴보았으니, 이제 이 글의 주제를 소개할 때입니다.</p>\n<p><img src=\"/assets/img/2024-06-20-AngularFormsnewunifiedcontrolstatechangeevents_0.png\" alt=\"이미지\"></p>\n<h1>새로운 통합 제어 상태 변경 이벤트</h1>\n<p>Angular v18부터 AbstractControl 클래스는 이제 모든 제어 상태 변경 이벤트를 추적하기 위한 새로운 이벤트 observable을 노출합니다.</p>\n<p>이를 통해 이제 PristineEvent, ValueChangeEvent, StatusEvent 및 TouchedEvent 이벤트를 통해 FormControl, FormGroup 및 FormArray 클래스를 모니터링할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">myControl.<span class=\"hljs-property\">events</span>\n  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> event <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">PristineChangeEvent</span>))\n  .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Pristine:'</span>, event.<span class=\"hljs-property\">pristine</span>));\n\nmyControl.<span class=\"hljs-property\">events</span>\n  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> event <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">ValueChangeEvent</span>))\n  .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Value:'</span>, event.<span class=\"hljs-property\">value</span>));\n\nmyControl.<span class=\"hljs-property\">events</span>\n  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> event <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">StatusChangeEvent</span>))\n  .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Status:'</span>, event.<span class=\"hljs-property\">status</span>));\n\nmyControl.<span class=\"hljs-property\">events</span>\n  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> event <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">TouchedChangeEvent</span>))\n  .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Touched:'</span>, event.<span class=\"hljs-property\">touched</span>));\n</code></pre>\n<p>이러한 기능들은 매우 강력합니다. 특히 valueChange를 제외하고는 이전에 상태 변경을 제대로 추적하기가 어려웠습니다.</p>\n<p>게다가 FormGroup 클래스는 events observable을 통해 FormSubmittedEvent와 FormResetEvent 두 가지 추가 이벤트를 발생시킬 수도 있습니다.</p>\n<pre><code class=\"hljs language-js\">myControl.<span class=\"hljs-property\">events</span>\n  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> event <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">FormSubmittedEvent</span>))\n  .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Submit:'</span>, event));\n\nmyControl.<span class=\"hljs-property\">events</span>\n  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> event <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">FormResetEvent</span>))\n  .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Reset:'</span>, event));\n</code></pre>\n<p>FormSubmittedEvent와 FormResetEvent는 모두 FormGroupDirective에서 상속되며 실제로 지시자 자체에서만 발생됩니다.</p>\n<h2>추가 정보</h2>\n<p>이 새로운 추가로, 다음 AbstractControl 메소드들은 emitEvent 매개변수를 지원하도록 업데이트되었습니다:</p>\n<ul>\n<li>markAsPristine(): 컨트롤을 pristine으로 표시;</li>\n<li>markAsDirty(): 컨트롤을 dirty로 표시;</li>\n<li>markAsTouched(): 컨트롤을 touched로 표시;</li>\n<li>markAsUntouched(): 컨트롤을 untouched로 표시;</li>\n<li>markAllAsTouched(): 컨트롤과 하위 요소를 모두 touched 상태로 표시합니다.</li>\n</ul>\n<h1>지금까지 읽어 주셔서 감사합니다 🙏</h1>\n<p>피드백을 받고 싶어요. 댓글을 남겨주시거나 클랩을 눌러주세요. 👏</p>\n<p>그리고 만약에 정말 좋았다면, 당신의 커뮤니티, 기술 브라더들, 누구든지 공유해주세요. 그리고 리링크드인 팔로우도 잊지 말아주세요. 👋😁</p>\n</body>\n</html>\n"},"__N_SSG":true}