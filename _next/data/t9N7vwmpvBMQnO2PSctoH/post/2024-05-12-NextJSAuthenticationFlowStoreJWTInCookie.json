{"pageProps":{"post":{"title":"NextJS 인증 플로우  JWT를 쿠키에 저장하기","description":"","date":"2024-05-12 20:04","slug":"2024-05-12-NextJSAuthenticationFlowStoreJWTInCookie","content":"\n\n나는 NextJS 앱 라우터를 프론트엔드로, NestJS를 백엔드로 활용한 사이드 프로젝트에 참여하고 있어. JWT와 쿠키를 사용해서 장기간에 걸쳐 인증 플로우를 구축 중이야. 여기에서는 내가 사용 중인 인증 플로우를 공유할 거야.\n\n# 왜 LocalStorage나 SessionStorage 대신 쿠키를 사용하나요?\n\nLocalStorage/SessionStorage에 저장된 항목은 JavaScript에서 읽을 수 있어 XSS 공격에 취약할 수 있어. 그래서 나는 JavaScript에서 접근할 수 없는 HttpOnly 쿠키를 사용해 액세스 토큰을 저장하기로 결정했어. 즉, 공격자들은 쿠키에서 액세스 토큰을 읽을 수 없다는 뜻이야.\n\n# 인증 플로우\n\n\n\n\n![이미지](/assets/img/2024-05-12-NextJSAuthenticationFlowStoreJWTInCookie_0.png)\n\n![이미지](/assets/img/2024-05-12-NextJSAuthenticationFlowStoreJWTInCookie_1.png)\n\n# 로그인\n\n## NextJS\n\n\n\n로그인 라우트 핸들러를 실행하세요.\n\nLoginButton.tsx\n\n```js\n    const loginRes = await fetch(\"/api/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(YOUR_LOGIN_CREDENTIAL),\n    });\n```\n\n## NextJS 라우트 핸들러\n\n\n\n여기가 엑세스 토큰을 설정해야 하는 곳입니다.\n\napp/api/login/route.ts\n\n```js\n...\nexport async function POST(request: NextRequest) {\n  const loginRes = await axios.post(\n    \"MY_BACKEND_URL/api/login\",\n    {...}\n  );\n\n  cookies().set(\"accessToken\", loginRes.data.accessToken, {\n    httpOnly: true,\n    maxAge: 24 * 60 * 60,\n    sameSite: \"strict\"\n  });\n  \n  return NextResponse.json(loginRes.data, { status: 201 });\n}\n```\n\n## Axios\n\n\n\n쿠키가 SameSite=Strict로 설정되어 있으면, 다른 도메인에서 요청이 발생했을 때 서버로 자동으로 전송되지 않습니다. 백엔드로 보낼 때 jwt를 수동으로 쿠키로 설정하고 싶을 수 있습니다. 그렇지 않으면 백엔드는 쿠키가 어디에 있는지 모릅니다. 따라서, Axios 인터셉터를 사용하여 요청 헤더에 쿠키를 첨부합니다.\n\n```js\nimport { cookies } from \"next/headers\";\n\nexport const getCookie = async (name: string) => {\n  return cookies().get(name)?.value ?? \"\";\n};\n\ninstance.interceptors.request.use(async function (config) {\n  const accessToken = await getCookie(\"accessToken\");\n  // 인증에서 쿠키를 설정할 수 있습니다\n  // 백엔드에서 accessToken을 읽으려면 어떻게 하고 싶은지에 따라 다릅니다\n  config.headers.Cookie = `accessToken=${accessToken}`;\n  return config;\n});\n```\n\n## NestJS\n\nJWT를 생성하고 API 응답에 포함시켜 반환합니다.\n\n\n\n```js\n...\n@Injectable()\nexport class AuthService {\n  constructor(\n    private jwtService: JwtService,\n  ) {}\n\n  async login(token: string) {\n    try {\n      ...\n      const userPayload = {\n        sub: sub,\n        username: name,\n        email: email,\n        _id: user._id,\n      };\n      const accessToken = await this.jwtService.signAsync(userPayload);\n\n      return { accessToken };\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n```\n\n# 로그아웃\n\n## NextJS\n\n\n\n\n로그아웃 라우트 핸들러를 실행합니다\n\n```js\n  const logout = async () => {\n    await fetch(\"/api/logout\", {\n      method: \"POST\",\n    });\n  };\n```\n\n## NextJS 라우트 핸들러\n\n쿠키를 삭제합니다.\n\n\n\n```js\n...\nimport { cookies } from \"next/headers\";\n\nexport async function POST(request: NextRequest) {\n  cookies().delete(\"accessToken\");\n  return NextResponse.json({ status: 201 });\n}\n```\n\n# 결론\n\n프로젝트에 대한 최종 인증 흐름이 아마 이것은 아닐 것입니다. 여전히 더 나은 구현 방법(예: Refresh Token 흐름 구현 등)을 찾고 있습니다. 읽어 주셔서 감사합니다.\n\n# 간단하게 설명하면 🚀\n\n\n\nIn Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 작가를 박수로 응원하고 팔로우해주세요 👏\n- 팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter\n- 다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed\n- PlainEnglish.io에서 더 많은 콘텐츠 확인해보세요","ogImage":{"url":"/assets/img/2024-05-12-NextJSAuthenticationFlowStoreJWTInCookie_0.png"},"coverImage":"/assets/img/2024-05-12-NextJSAuthenticationFlowStoreJWTInCookie_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>나는 NextJS 앱 라우터를 프론트엔드로, NestJS를 백엔드로 활용한 사이드 프로젝트에 참여하고 있어. JWT와 쿠키를 사용해서 장기간에 걸쳐 인증 플로우를 구축 중이야. 여기에서는 내가 사용 중인 인증 플로우를 공유할 거야.</p>\n<h1>왜 LocalStorage나 SessionStorage 대신 쿠키를 사용하나요?</h1>\n<p>LocalStorage/SessionStorage에 저장된 항목은 JavaScript에서 읽을 수 있어 XSS 공격에 취약할 수 있어. 그래서 나는 JavaScript에서 접근할 수 없는 HttpOnly 쿠키를 사용해 액세스 토큰을 저장하기로 결정했어. 즉, 공격자들은 쿠키에서 액세스 토큰을 읽을 수 없다는 뜻이야.</p>\n<h1>인증 플로우</h1>\n<p><img src=\"/assets/img/2024-05-12-NextJSAuthenticationFlowStoreJWTInCookie_0.png\" alt=\"이미지\"></p>\n<p><img src=\"/assets/img/2024-05-12-NextJSAuthenticationFlowStoreJWTInCookie_1.png\" alt=\"이미지\"></p>\n<h1>로그인</h1>\n<h2>NextJS</h2>\n<p>로그인 라우트 핸들러를 실행하세요.</p>\n<p>LoginButton.tsx</p>\n<pre><code class=\"hljs language-js\">    <span class=\"hljs-keyword\">const</span> loginRes = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"/api/login\"</span>, {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"POST\"</span>,\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json\"</span>,\n      },\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(<span class=\"hljs-variable constant_\">YOUR_LOGIN_CREDENTIAL</span>),\n    });\n</code></pre>\n<h2>NextJS 라우트 핸들러</h2>\n<p>여기가 엑세스 토큰을 설정해야 하는 곳입니다.</p>\n<p>app/api/login/route.ts</p>\n<pre><code class=\"hljs language-js\">...\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">POST</span>(<span class=\"hljs-params\">request: NextRequest</span>) {\n  <span class=\"hljs-keyword\">const</span> loginRes = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">post</span>(\n    <span class=\"hljs-string\">\"MY_BACKEND_URL/api/login\"</span>,\n    {...}\n  );\n\n  <span class=\"hljs-title function_\">cookies</span>().<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"accessToken\"</span>, loginRes.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">accessToken</span>, {\n    <span class=\"hljs-attr\">httpOnly</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">maxAge</span>: <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span>,\n    <span class=\"hljs-attr\">sameSite</span>: <span class=\"hljs-string\">\"strict\"</span>\n  });\n  \n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">json</span>(loginRes.<span class=\"hljs-property\">data</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">201</span> });\n}\n</code></pre>\n<h2>Axios</h2>\n<p>쿠키가 SameSite=Strict로 설정되어 있으면, 다른 도메인에서 요청이 발생했을 때 서버로 자동으로 전송되지 않습니다. 백엔드로 보낼 때 jwt를 수동으로 쿠키로 설정하고 싶을 수 있습니다. 그렇지 않으면 백엔드는 쿠키가 어디에 있는지 모릅니다. 따라서, Axios 인터셉터를 사용하여 요청 헤더에 쿠키를 첨부합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { cookies } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/headers\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getCookie</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">name: string</span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">cookies</span>().<span class=\"hljs-title function_\">get</span>(name)?.<span class=\"hljs-property\">value</span> ?? <span class=\"hljs-string\">\"\"</span>;\n};\n\ninstance.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">config</span>) {\n  <span class=\"hljs-keyword\">const</span> accessToken = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getCookie</span>(<span class=\"hljs-string\">\"accessToken\"</span>);\n  <span class=\"hljs-comment\">// 인증에서 쿠키를 설정할 수 있습니다</span>\n  <span class=\"hljs-comment\">// 백엔드에서 accessToken을 읽으려면 어떻게 하고 싶은지에 따라 다릅니다</span>\n  config.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">Cookie</span> = <span class=\"hljs-string\">`accessToken=<span class=\"hljs-subst\">${accessToken}</span>`</span>;\n  <span class=\"hljs-keyword\">return</span> config;\n});\n</code></pre>\n<h2>NestJS</h2>\n<p>JWT를 생성하고 API 응답에 포함시켜 반환합니다.</p>\n<pre><code class=\"hljs language-js\">...\n@<span class=\"hljs-title class_\">Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    private jwtService: JwtService,\n  </span>) {}\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-params\">token: string</span>) {\n    <span class=\"hljs-keyword\">try</span> {\n      ...\n      <span class=\"hljs-keyword\">const</span> userPayload = {\n        <span class=\"hljs-attr\">sub</span>: sub,\n        <span class=\"hljs-attr\">username</span>: name,\n        <span class=\"hljs-attr\">email</span>: email,\n        <span class=\"hljs-attr\">_id</span>: user.<span class=\"hljs-property\">_id</span>,\n      };\n      <span class=\"hljs-keyword\">const</span> accessToken = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">jwtService</span>.<span class=\"hljs-title function_\">signAsync</span>(userPayload);\n\n      <span class=\"hljs-keyword\">return</span> { accessToken };\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e);\n    }\n  }\n}\n</code></pre>\n<h1>로그아웃</h1>\n<h2>NextJS</h2>\n<p>로그아웃 라우트 핸들러를 실행합니다</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">logout</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"/api/logout\"</span>, {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"POST\"</span>,\n    });\n  };\n</code></pre>\n<h2>NextJS 라우트 핸들러</h2>\n<p>쿠키를 삭제합니다.</p>\n<pre><code class=\"hljs language-js\">...\n<span class=\"hljs-keyword\">import</span> { cookies } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/headers\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">POST</span>(<span class=\"hljs-params\">request: NextRequest</span>) {\n  <span class=\"hljs-title function_\">cookies</span>().<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">\"accessToken\"</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">201</span> });\n}\n</code></pre>\n<h1>결론</h1>\n<p>프로젝트에 대한 최종 인증 흐름이 아마 이것은 아닐 것입니다. 여전히 더 나은 구현 방법(예: Refresh Token 흐름 구현 등)을 찾고 있습니다. 읽어 주셔서 감사합니다.</p>\n<h1>간단하게 설명하면 🚀</h1>\n<p>In Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:</p>\n<ul>\n<li>작가를 박수로 응원하고 팔로우해주세요 👏</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter</li>\n<li>다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed</li>\n<li>PlainEnglish.io에서 더 많은 콘텐츠 확인해보세요</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}