{"pageProps":{"post":{"title":"리액트  리액트 컴포넌트에서 리렌더링을 멈추는 방법","description":"","date":"2024-05-14 11:12","slug":"2024-05-14-ReactHowtostopre-renderinginReactComponents","content":"\n\n<img src=\"/assets/img/2024-05-14-ReactHowtostopre-renderinginReactComponents_0.png\" />\n\n리액트는 초기에 비해 많은 발전을 이루었습니다. 그럼에도 여전히 많은 사람들이 불필요한 다시 렌더링을 고치기 어려운 것으로 생각합니다.\n\n불필요한 다시 렌더링을 피하는 다양한 방법이 있습니다. 여기에서는 리액트에서 불필요한 다시 렌더링을 피하는 몇 가지 방법과 접근법을 논의하고 있습니다.\n\n- useState()를 useRef()훅으로 대체하기.\n- 메모이제이션된 셀렉터를 만들기 위해 Reselect 라이브러리 사용.\n- 데이터 가져오기를 위한 리액트 훅 라이브러리인 SWR 사용.\n- useMemo() 및 useCallback() 훅을 사용한 메모이제이션.\n\n\n\n# 1. useState()을 useRef() 훅으로 변경하기\n\nuseState() 훅은 React 함수형 컴포넌트에서 상태가 변경될 때 컴포넌트를 다시 렌더링하는 데 자주 사용되는 훅입니다. 그러나 경우에 따라 컴포넌트를 다시 렌더링하지 않고 업데이트를 추적해야 할 때가 있습니다. 이럴 때 useRef() 훅을 사용할 수 있습니다. useRef()를 사용하면 useState()처럼 다시 렌더링을 호출하지 않고 업데이트를 추적할 수 있습니다.\n\nuseState()를 사용한 예시:\n\n```js\nfunction inputWithState() {\n  const [value, setValue] = useState(\"\");\n  return (\n    <input \n      value={value} \n      onChange={e => setValue(e.target.value)} \n      type={type} \n    />\n  );\n}\n```\n\n\n\n이 예시에서는 input에서 각 키 입력마다 onChange 이벤트로 상태 변경이 발생하여 재렌더링됩니다.\n\nuseRef()를 활용한 예시:\n\n```js\nfunction inputWithRef() {\n  const inputEl = useRef(null);\n  console.log(inputEl?.current?.value);\n  return (\n    <input ref={inputEl} type=\"text\" />\n  );\n}\n```\n\n이 예시에서는 input에 입력하는 모든 내용을 input 참조를 통해 읽을 수 있습니다. 이 접근법은 각 키 입력마다 불필요한 재렌더링을 피할 수 있습니다.\n\n\n\n# 2. Reselect 라이브러리를 사용하여 메모이제이션 셀렉터 만들기\n\n리액트 컴포넌트는 빠른 수명주기를 갖고 있지만, 너무 많은 다시 렌더링으로 늘 피해를 입는 경우가 많습니다. 이를 해결하기 위해 개발자들은 성능을 개선하기 위해 Redux와 함께 사용되는 인기 라이브러리 Reselect의 래퍼인 서드파티 성능 라이브러리 re-select를 만들었습니다. 이 라이브러리는 메모이제이션 셀렉터를 코딩하여 성능을 향상시킵니다.\n\n- 셀렉터는 파생 데이터를 계산할 수 있어 Redux가 가능한 한 적은 상태를 저장할 수 있게 합니다.\n- 셀렉터는 효율적입니다. 셀렉터는 인수 중 하나가 변경될 때까지 재계산되지 않습니다.\n- 셀렉터는 조합 가능합니다. 다른 셀렉터의 입력으로 사용될 수 있습니다.\n\n예시:\n\n\n\n```js\nimport { createSelector } from 'reselect'\nconst selectShopItems = state => state.shop.items\nconst selectTaxPercent = state => state.shop.taxPercent\nconst selectSubtotal = createSelector(selectShopItems, items =>\n  items.reduce((subtotal, item) => subtotal + item.value, 0)\n)\nconst selectTax = createSelector(\n  selectSubtotal,\n  selectTaxPercent,\n  (subtotal, taxPercent) => subtotal * (taxPercent / 100)\n)\nconst selectTotal = createSelector(\n  selectSubtotal,\n  selectTax,\n  (subtotal, tax) => ({ total: subtotal + tax })\n)\nconst exampleState = {\n  shop: {\n    taxPercent: 8,\n    items: [\n      { name: 'apple', value: 1.2 },\n      { name: 'orange', value: 0.95 }\n    ]\n  }\n}\nconsole.log(selectSubtotal(exampleState)) // 2.15\nconsole.log(selectTax(exampleState)) // 0.172\nconsole.log(selectTotal(exampleState)) // { total: 2.322 }\n```\n\n여기서 createSelector는 2개의 선택기를 입력으로 받아 메모이즈된 버전을 반환합니다. 값이 다를 때까지 이 메모이즈된 버전을 사용하여 선택기는 다시 계산되지 않을 것입니다.\n\nReselect는 Redux에만 한정되지 않으나, 공식 Redux Toolkit 패키지에 이미 기본으로 포함되어 있습니다. 추가 설치가 필요하지 않습니다.\n\n# 3. SWR 사용하기 - 데이터 패치용 리액트 훅스 라이브러리\n\n\n\nSWR은 데이터 가져오기를 위한 React Hooks 라이브러리입니다.\n\n\"SWR\"이라는 이름은 stale-while-revalidate의 약자입니다. SWR은 먼저 캐시에서 데이터를 반환한 후(request), 데이터를 업데이트하고(get), 최신 데이터를 다시 가져옵니다. 이를 통해 컴포넌트가 여러 번 다시 렌더링 되는 것을 방지할 수 있습니다.\n\n한 가지 훅으로 프로젝트에서 데이터 가져오기 로직을 크게 간소화할 수 있습니다. 뿐만 아니라 속도, 정확성, 안정성 면에서 모두 다루어져 더 나은 애플리케이션을 구축하는 데 도움이 됩니다.\n\n예시:\n\n\n\n```js\nfunction Profile() {\n  const { data, error } = useSWR('/api/user', fetcher)\n\n  if (error) return <div>로드에 실패했습니다</div>\n  if (!data) return <div>로딩 중...</div>\n  return <div>안녕하세요 {data.name}님!</div>\n}\n```\n\n더 많은 정보와 예제는 여기를 참조하세요: [https://swr.vercel.app/](https://swr.vercel.app/)\n\n## 4. useMemo() 및 useCallback()Hooks를 사용한 Memoization\n\nMemoization은 우리의 리액트 코드를 프롭스에 업데이트가 있을 때에만 컴포넌트를 다시 렌더링하도록 하는 것을 가능하게 합니다. 이 접근 방식을 통해 개발자는 불필요한 다시 렌더링을 피하고 응용 프로그램에서의 계산 부하를 줄일 수 있습니다.\n\n\n\n\n리액트는 메모이제이션을 만들기 위해 두 가지 훅을 제공합니다:\n\n- useMemo()\n- useCallback()\n\n이 훅들은 계산 없이 입력이 동일한 경우 캐싱되어 동일한 결과를 반환하여 다시 렌더링을 줄입니다. 입력이 업데이트되면 캐시가 무효화되고 새로운 컴포넌트 상태가 렌더링됩니다.\n\n- useMemo()\n\n\n\n이 훅은 함수 호출과 렌더 사이에서 계산 결과를 메모이징하는 데 사용됩니다.\n\n예시:\n\n```js\nconst expensiveFunction = (inputValue) => {\n  let expensiveValue = inputValue * 42;\n  //... 입력값을 포함한 계산 작업이 많은 경우...\n  expensiveValue = 'World';\n  return expensiveValue;\n};\nconst MyComponent = ({ something }) => {\n  const [inputValue, setInputValue] = useState('');  \n  const expensiveValue = useMemo(\n    () => expensiveFunction(inputValue), \n    [ inputValue ]\n  );  \n  return <h1>Hello {expensiveValue}</h1>;\n};\n```\n\n2. useCallback()\n\n\n\n이것은 메모이제이션을 구현하는 또 다른 React Hook입니다. 그러나 useMemo()와 달리 결과를 캐시하지 않고 대신 제공된 콜백 함수를 메모이즈합니다.\n\n예시:\n\n```js\nfunction item() {\n  const onClick = useCallback(event => {\n    console.log('Clicked Item : ', event.currentTarget);\n  }, [item]);\n  \n  return (\n    <li={item} onClick={onClick} />\n  );\n}\n```\n\n예시에서 useCallback()은 onClick 콜백을 메모이즈합니다. 따라서 사용자가 동일한 항목을 계속 클릭해도 컴포넌트를 다시 렌더링하지 않습니다.\n\n\n\n이 기사가 리액트 컴포넌트에서 재랜더링 문제를 해결하는 데 도움이 되기를 바랍니다. 만약 리액트에서 재랜더링을 피하는 다른 방법이나 기술이 있다면 댓글에 추가해 주세요.\n\n당신의 지원을 보여주기 위해 아래의 👏 버튼을 최대한 많이 눌러주세요!\n\n독자 여러분, 감사합니다. 화이팅!!!\n\n당신은 멋져요!","ogImage":{"url":"/assets/img/2024-05-14-ReactHowtostopre-renderinginReactComponents_0.png"},"coverImage":"/assets/img/2024-05-14-ReactHowtostopre-renderinginReactComponents_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>리액트는 초기에 비해 많은 발전을 이루었습니다. 그럼에도 여전히 많은 사람들이 불필요한 다시 렌더링을 고치기 어려운 것으로 생각합니다.</p>\n<p>불필요한 다시 렌더링을 피하는 다양한 방법이 있습니다. 여기에서는 리액트에서 불필요한 다시 렌더링을 피하는 몇 가지 방법과 접근법을 논의하고 있습니다.</p>\n<ul>\n<li>useState()를 useRef()훅으로 대체하기.</li>\n<li>메모이제이션된 셀렉터를 만들기 위해 Reselect 라이브러리 사용.</li>\n<li>데이터 가져오기를 위한 리액트 훅 라이브러리인 SWR 사용.</li>\n<li>useMemo() 및 useCallback() 훅을 사용한 메모이제이션.</li>\n</ul>\n<h1>1. useState()을 useRef() 훅으로 변경하기</h1>\n<p>useState() 훅은 React 함수형 컴포넌트에서 상태가 변경될 때 컴포넌트를 다시 렌더링하는 데 자주 사용되는 훅입니다. 그러나 경우에 따라 컴포넌트를 다시 렌더링하지 않고 업데이트를 추적해야 할 때가 있습니다. 이럴 때 useRef() 훅을 사용할 수 있습니다. useRef()를 사용하면 useState()처럼 다시 렌더링을 호출하지 않고 업데이트를 추적할 수 있습니다.</p>\n<p>useState()를 사용한 예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">inputWithState</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> \n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span> \n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =></span> setValue(e.target.value)} \n      type={type} \n    /></span>\n  );\n}\n</code></pre>\n<p>이 예시에서는 input에서 각 키 입력마다 onChange 이벤트로 상태 변경이 발생하여 재렌더링됩니다.</p>\n<p>useRef()를 활용한 예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">inputWithRef</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> inputEl = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(inputEl?.<span class=\"hljs-property\">current</span>?.<span class=\"hljs-property\">value</span>);\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{inputEl}</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> /></span></span>\n  );\n}\n</code></pre>\n<p>이 예시에서는 input에 입력하는 모든 내용을 input 참조를 통해 읽을 수 있습니다. 이 접근법은 각 키 입력마다 불필요한 재렌더링을 피할 수 있습니다.</p>\n<h1>2. Reselect 라이브러리를 사용하여 메모이제이션 셀렉터 만들기</h1>\n<p>리액트 컴포넌트는 빠른 수명주기를 갖고 있지만, 너무 많은 다시 렌더링으로 늘 피해를 입는 경우가 많습니다. 이를 해결하기 위해 개발자들은 성능을 개선하기 위해 Redux와 함께 사용되는 인기 라이브러리 Reselect의 래퍼인 서드파티 성능 라이브러리 re-select를 만들었습니다. 이 라이브러리는 메모이제이션 셀렉터를 코딩하여 성능을 향상시킵니다.</p>\n<ul>\n<li>셀렉터는 파생 데이터를 계산할 수 있어 Redux가 가능한 한 적은 상태를 저장할 수 있게 합니다.</li>\n<li>셀렉터는 효율적입니다. 셀렉터는 인수 중 하나가 변경될 때까지 재계산되지 않습니다.</li>\n<li>셀렉터는 조합 가능합니다. 다른 셀렉터의 입력으로 사용될 수 있습니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { createSelector } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'reselect'</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">selectShopItems</span> = state => state.<span class=\"hljs-property\">shop</span>.<span class=\"hljs-property\">items</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">selectTaxPercent</span> = state => state.<span class=\"hljs-property\">shop</span>.<span class=\"hljs-property\">taxPercent</span>\n<span class=\"hljs-keyword\">const</span> selectSubtotal = <span class=\"hljs-title function_\">createSelector</span>(selectShopItems, <span class=\"hljs-function\"><span class=\"hljs-params\">items</span> =></span>\n  items.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">subtotal, item</span>) =></span> subtotal + item.<span class=\"hljs-property\">value</span>, <span class=\"hljs-number\">0</span>)\n)\n<span class=\"hljs-keyword\">const</span> selectTax = <span class=\"hljs-title function_\">createSelector</span>(\n  selectSubtotal,\n  selectTaxPercent,\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">subtotal, taxPercent</span>) =></span> subtotal * (taxPercent / <span class=\"hljs-number\">100</span>)\n)\n<span class=\"hljs-keyword\">const</span> selectTotal = <span class=\"hljs-title function_\">createSelector</span>(\n  selectSubtotal,\n  selectTax,\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">subtotal, tax</span>) =></span> ({ <span class=\"hljs-attr\">total</span>: subtotal + tax })\n)\n<span class=\"hljs-keyword\">const</span> exampleState = {\n  <span class=\"hljs-attr\">shop</span>: {\n    <span class=\"hljs-attr\">taxPercent</span>: <span class=\"hljs-number\">8</span>,\n    <span class=\"hljs-attr\">items</span>: [\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1.2</span> },\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'orange'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0.95</span> }\n    ]\n  }\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">selectSubtotal</span>(exampleState)) <span class=\"hljs-comment\">// 2.15</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">selectTax</span>(exampleState)) <span class=\"hljs-comment\">// 0.172</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">selectTotal</span>(exampleState)) <span class=\"hljs-comment\">// { total: 2.322 }</span>\n</code></pre>\n<p>여기서 createSelector는 2개의 선택기를 입력으로 받아 메모이즈된 버전을 반환합니다. 값이 다를 때까지 이 메모이즈된 버전을 사용하여 선택기는 다시 계산되지 않을 것입니다.</p>\n<p>Reselect는 Redux에만 한정되지 않으나, 공식 Redux Toolkit 패키지에 이미 기본으로 포함되어 있습니다. 추가 설치가 필요하지 않습니다.</p>\n<h1>3. SWR 사용하기 - 데이터 패치용 리액트 훅스 라이브러리</h1>\n<p>SWR은 데이터 가져오기를 위한 React Hooks 라이브러리입니다.</p>\n<p>\"SWR\"이라는 이름은 stale-while-revalidate의 약자입니다. SWR은 먼저 캐시에서 데이터를 반환한 후(request), 데이터를 업데이트하고(get), 최신 데이터를 다시 가져옵니다. 이를 통해 컴포넌트가 여러 번 다시 렌더링 되는 것을 방지할 수 있습니다.</p>\n<p>한 가지 훅으로 프로젝트에서 데이터 가져오기 로직을 크게 간소화할 수 있습니다. 뿐만 아니라 속도, 정확성, 안정성 면에서 모두 다루어져 더 나은 애플리케이션을 구축하는 데 도움이 됩니다.</p>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Profile</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> { data, error } = <span class=\"hljs-title function_\">useSWR</span>(<span class=\"hljs-string\">'/api/user'</span>, fetcher)\n\n  <span class=\"hljs-keyword\">if</span> (error) <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>로드에 실패했습니다<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  <span class=\"hljs-keyword\">if</span> (!data) <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>로딩 중...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>안녕하세요 {data.name}님!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n}\n</code></pre>\n<p>더 많은 정보와 예제는 여기를 참조하세요: <a href=\"https://swr.vercel.app/\" rel=\"nofollow\" target=\"_blank\">https://swr.vercel.app/</a></p>\n<h2>4. useMemo() 및 useCallback()Hooks를 사용한 Memoization</h2>\n<p>Memoization은 우리의 리액트 코드를 프롭스에 업데이트가 있을 때에만 컴포넌트를 다시 렌더링하도록 하는 것을 가능하게 합니다. 이 접근 방식을 통해 개발자는 불필요한 다시 렌더링을 피하고 응용 프로그램에서의 계산 부하를 줄일 수 있습니다.</p>\n<p>리액트는 메모이제이션을 만들기 위해 두 가지 훅을 제공합니다:</p>\n<ul>\n<li>useMemo()</li>\n<li>useCallback()</li>\n</ul>\n<p>이 훅들은 계산 없이 입력이 동일한 경우 캐싱되어 동일한 결과를 반환하여 다시 렌더링을 줄입니다. 입력이 업데이트되면 캐시가 무효화되고 새로운 컴포넌트 상태가 렌더링됩니다.</p>\n<ul>\n<li>useMemo()</li>\n</ul>\n<p>이 훅은 함수 호출과 렌더 사이에서 계산 결과를 메모이징하는 데 사용됩니다.</p>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">expensiveFunction</span> = (<span class=\"hljs-params\">inputValue</span>) => {\n  <span class=\"hljs-keyword\">let</span> expensiveValue = inputValue * <span class=\"hljs-number\">42</span>;\n  <span class=\"hljs-comment\">//... 입력값을 포함한 계산 작업이 많은 경우...</span>\n  expensiveValue = <span class=\"hljs-string\">'World'</span>;\n  <span class=\"hljs-keyword\">return</span> expensiveValue;\n};\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">MyComponent</span> = (<span class=\"hljs-params\">{ something }</span>) => {\n  <span class=\"hljs-keyword\">const</span> [inputValue, setInputValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">''</span>);  \n  <span class=\"hljs-keyword\">const</span> expensiveValue = <span class=\"hljs-title function_\">useMemo</span>(\n    <span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">expensiveFunction</span>(inputValue), \n    [ inputValue ]\n  );  \n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello {expensiveValue}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n};\n</code></pre>\n<ol start=\"2\">\n<li>useCallback()</li>\n</ol>\n<p>이것은 메모이제이션을 구현하는 또 다른 React Hook입니다. 그러나 useMemo()와 달리 결과를 캐시하지 않고 대신 제공된 콜백 함수를 메모이즈합니다.</p>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">item</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> onClick = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Clicked Item : '</span>, event.<span class=\"hljs-property\">currentTarget</span>);\n  }, [item]);\n  \n  <span class=\"hljs-keyword\">return</span> (\n    &#x3C;li={item} onClick={onClick} />\n  );\n}\n</code></pre>\n<p>예시에서 useCallback()은 onClick 콜백을 메모이즈합니다. 따라서 사용자가 동일한 항목을 계속 클릭해도 컴포넌트를 다시 렌더링하지 않습니다.</p>\n<p>이 기사가 리액트 컴포넌트에서 재랜더링 문제를 해결하는 데 도움이 되기를 바랍니다. 만약 리액트에서 재랜더링을 피하는 다른 방법이나 기술이 있다면 댓글에 추가해 주세요.</p>\n<p>당신의 지원을 보여주기 위해 아래의 👏 버튼을 최대한 많이 눌러주세요!</p>\n<p>독자 여러분, 감사합니다. 화이팅!!!</p>\n<p>당신은 멋져요!</p>\n</body>\n</html>\n"},"__N_SSG":true}