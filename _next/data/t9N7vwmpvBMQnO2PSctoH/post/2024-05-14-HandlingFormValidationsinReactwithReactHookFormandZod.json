{"pageProps":{"post":{"title":"React Hook Form과 Zod를 사용하여 React에서 양식 유효성 검사 다루기","description":"","date":"2024-05-14 10:34","slug":"2024-05-14-HandlingFormValidationsinReactwithReactHookFormandZod","content":"\n\n<img src=\"/assets/img/2024-05-14-HandlingFormValidationsinReactwithReactHookFormandZod_0.png\" />\n\n# 소개\n\n웹 애플리케이션에서 폼 유효성 검사는 데이터 무결성을 보장하고 일관된 사용자 경험을 제공하는 데 중요합니다. React에서 폼 유효성을 처리하는 것은 때때로 복잡하고 시간이 많이 소요될 수 있습니다. 그러나 적절한 도구와 라이브러리를 사용하면 이 과정을 간단화하고 효율적으로 만들 수 있습니다.\n\n이 글에서는 React Hook Form, Zod, 그리고 TypeScript를 활용하여 React에서 폼 유효성을 처리하는 방법을 살펴볼 것입니다. React Hook Form은 폼 상태와 유효성을 관리하기 위한 사용하기 쉬운 API를 갖춘 가벼운 조절 가능한 폼 라이브러리입니다. Zod는 스키마 유효성 검사 라이브러리로 데이터 구조를 정의하고 유효성을 검사하는 것을 간단하게 만들어줍니다.\n\n\n\nReact Hook Form과 Zod를 결합하여 React 애플리케이션에서 강력하고 신뢰할 수 있는 폼 유효성 검사 시스템을 만들 수 있습니다. 시작해보고 폼 유효성을 효과적으로 다루는 주요 개념, 기술 및 코드 예제를 살펴보겠습니다.\n\n데모에서는 Sass를 사용하여 유효성 검사 및 기본 스타일이 적용된 기본 양식을 만들어 보겠습니다(아래 이미지 참조). 이 데모는 React의 새로운 앱을 만들기 위해 React가 커뮤니티에서 인기 있는 React 기반 프레임워크를 사용할 것을 권장하는 Nextjs React 프레임워크를 사용하여 앱을 생성합니다. 자세한 내용은 여기를 참조하세요.\n\n![이미지](/assets/img/2024-05-14-HandlingFormValidationsinReactwithReactHookFormandZod_1.png)\n\n# React Hook Form과 Zod 설정\n\n\n\n폼 유효성 검사를 처리하기 전에, 프로젝트에 React Hook Form과 Zod를 설치해야합니다. 이미 React 또는 Next.js 프로젝트가 설정되어 있고 폼이 생성되어 있다고 가정하고, 다음 단계를 따라 진행하세요:\n\n- 필요한 종속성 설치:\n\n```js\nnpm install react-hook-form zod @hookform/resolvers\n```\n\n2. 필요한 컴포넌트와 훅을 가져옵니다:\n\n\n\n```js\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n```\n\n3. Zod을 사용하여 폼 스키마를 정의하세요:\n\n저희의 유효성 검사 스키마는 새로운 사용자를 등록하는 폼을 유효성 검사하기 위해 사용자명, 이메일, 비밀번호, 그리고 비밀번호 확인을 포함할 것입니다.\n\n```js\n const schema = z.object({\n    username: z.string().min(3, {message: '사용자 이름은 최소 3자 이상이어야 합니다'}),\n    email: z.string().min(1, {message: '이메일은 필수 항목입니다'}).email('유효하지 않은 이메일 주소입니다'),\n    password: z.string().min(6, {message: '비밀번호는 최소 6자 이상이어야 합니다'}),\n    confirmPassword: z.string().min(6, {message: '비밀번호는 최소 6자 이상이어야 합니다'})\n  })\n\n//스키마에서 유추된 타입 추출하기\ntype ValidationSchemaType = z.infer<typeof schema>\n```\n\n\n\n4. 양식과 유효성 해결 프로그램을 설정하십시오:\n\n```js\n const { register, handleSubmit, formState: { errors } } = useForm<ValidationSchemaType>({\n    resolver: zodResolver(schema),\n  });\n```\n\nReact Hook Form과 Zod를 설정했으니, 이제 React 애플리케이션에서 양식 유효성 검사를 처리할 준비가 되었습니다.\n\n# 기본 양식 유효성 검사\n\n\n\nReact Hook Form 및 Zod를 사용한 폼 유효성 검사의 기본 사항부터 시작해 봅시다. 개별 폼 필드의 유효성을 검사하고 오류 메시지를 표시하며, 폼 제출을 처리하는 방법을 살펴보겠습니다.\n\n- 폼 필드 등록:\n\nReact Hook Form의 register 함수는 폼 필드를 등록하는 데 사용되며, 폼 필드의 속성 이름 또는 스키마 이름을 인수로 취합니다.\n\n```js\n<input type=\"text\" {...register('name')} />\n```\n\n\n\n```js\n\"use client\";\n\nimport React from 'react'\nimport styles from './form.module.scss'\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst Form = () => {\n\n  const schema = z.object({\n    username: z.string().min(3, {message: 'Username must be at least 3 characters'}),\n    email: z.string().min(1, {message: 'Email is required'}).email('Invalid email address'),\n    password: z.string().min(6, {message: 'Password must be at least 6 characters'}),\n    confirmPassword: z.string().min(6, {message: 'Password must be at least 6 characters'})\n  }).refine((data) => data.password === data.confirmPassword, {\n    path: ['confirmPassword'],\n    message: 'Passwords does not match'\n  })\n\n  //extract the inferred type from schema\n  type ValidationSchemaType = z.infer<typeof schema>\n\n  const { register, handleSubmit, formState: { errors } } = useForm<ValidationSchemaType>({\n    resolver: zodResolver(schema),\n  });\n\n  return (\n    <form className={styles.form_main}>\n      <label htmlFor=\"username\">\n        Username:\n        <input type=\"text\" placeholder='username goes here...' {...register('username')} />\n      </label>\n      <label htmlFor=\"email\">\n        Email:\n        <input type=\"email\" placeholder='email goes here...' {...register('email')} />\n      </label>\n\n      <label htmlFor=\"password\">\n        Password:\n        <input type=\"password\" placeholder='password goes here...' {...register('password')} />\n      </label>\n\n      <label htmlFor=\"confirmPassword\">\n        Confirm Password:\n        <input type=\"password\" placeholder='Confirm password' {...register('confirmPassword')} />\n      </label>\n      <button type='submit'>Login</button>\n    </form>\n  )\n}\n\nexport default Form\n```\n\n2. Displaying error messages:\n\nReact Hook Form은 errors 객체를 반환하는데, 이 객체는 formState에서 비구조화된 것입니다. errors를 통해 우리는 양식 오류에 접근할 수 있고 각 등록된 양식 필드에 대한 지정된 유효성 제약 메시지를 반환합니다.\n\n```js\nconst { register, handleSubmit, formState: { errors } } = useForm<ValidationSchemaType>({\n    resolver: zodResolver(schema),\n  });\n```\n\n\n\n그럼 각 폼 필드에 대한 유효성 검사 스키마에서 선언된 오류 메시지를 조건부로 렌더링할 수 있어요. 또한, 잘못된 정보를 입력했을 때 입력란 테두리를 빨간색으로 만들기 위해 error_input이라는 CSS 클래스도 만들었어요.\n\n```js\n{errors.username && <span>{errors.username.message}</span>}\n```\n\n```js\n<form className={styles.form_main}>\n      <label htmlFor=\"username\">\n        Username:\n        <input type=\"text\" placeholder='사용자명을 입력해주세요...' {...register('username')} className={errors.username && styles.error_input}/>\n        {errors.username && (\n          <span className={styles.error}>{errors.username?.message}</span>\n        )}\n      </label>\n      <label htmlFor=\"email\">\n        Email:\n        <input type=\"email\" placeholder='이메일을 입력해주세요...' {...register('email')}  className={errors.email && styles.error_input}/>\n        {errors.email && (\n          <span className={styles.error}>{errors.email?.message}</span>\n        )}\n      </label>\n\n\n      <label htmlFor=\"password\">\n        Password:\n        <input type=\"password\" placeholder='비밀번호를 입력해주세요...' {...register('password')}  className={errors.password && styles.error_input}/>\n        {errors.password && (\n          <span className={styles.error}>{errors.password?.message}</span>\n        )}\n      </label>\n\n      <label htmlFor=\"confirmPassword\">\n        Confirm Password:\n        <input type=\"password\" placeholder='비밀번호를 확인해주세요' {...register('confirmPassword')}  className={errors.confirmPassword && styles.error_input}/>\n        {errors.confirmPassword && (\n          <span className={styles.error}>{errors.confirmPassword?.message}</span>\n        )}\n      </label>\n      <button type='submit'>로그인</button>\n    </form>\n```\n\n3. 폼 제출 처리:\n\n\n\n우리는 onSubmit이라는 사용자 정의 폼 제출 핸들러 함수를 생성하고, 폼 데이터를 콘솔에 출력합니다.\n\n```js\nconst onSubmit: SubmitHandler<ValidationSchemaType> = (data) => {\n    console.log(data)\n}\n```\n\n그런 다음, React Hook form에서 제공하는 handleSubmit 함수에 전달합니다.\n\n```js\n\"use client\";\n\nimport React from 'react'\nimport styles from './form.module.scss'\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst Form = () => {\n\n  const schema = z.object({\n    username: z.string().min(3, {message: 'Username must be at least 3 characters'}),\n    email: z.string().min(1, {message: 'Email is required'}).email('Invalid email address'),\n    password: z.string().min(6, {message: 'Password must be at least 6 characters'}),\n    confirmPassword: z.string().min(6, {message: 'Password must be at least 6 characters'})\n  }).refine((data) => data.password === data.confirmPassword, {\n    path: ['confirmPassword'],\n    message: 'Passwords does not match'\n  })\n\n  type ValidationSchemaType = z.infer<typeof schema>\n\n  const { register, handleSubmit, formState: { errors } } = useForm<ValidationSchemaType>({\n    resolver: zodResolver(schema),\n  });\n\n  // Form submit handler\n  const onSubmit: SubmitHandler<ValidationSchemaType> = (data) => {\n    console.log(data)\n  }\n\n  return (\n    <form className={styles.form_main} onSubmit={handleSubmit(onSubmit)}>\n      // 다른 코드\n    </form>\n  )\n}\n\nexport default Form\n```\n\n\n\n이 예시에서는 React Hook Form에서 제공하는 register 함수를 사용하여 '사용자 이름', '이메일\" 및 \"비밀번호\" 필드를 등록합니다. 그런 다음 필드에 오류가 있는 경우 오류 메시지를 표시합니다. 마지막으로, 폼 제출은 제출된 폼을 처리하는 onSubmit 함수를 호출하여 처리합니다. 아래 데모를 확인해보세요.\n\n# 일부 고급 폼 유효성 검사 기술\n\n다음 기술들 중 일부를 살펴보겠습니다:\n\n- Cross-Field Validation:\n\n\n\n리파인 커스텀 유효성 검사기는 비밀번호와 확인 비밀번호를 상호 검증하는 데 사용할 수 있습니다. 유효성 검사 함수와 양식 데이터를 가져와 비밀번호가 확인된 비밀번호와 동일한지 확인하고 오류 경로를 확인 비밀번호로 설정합니다.\n\n```js\n// 비밀번호와 확인 비밀번호를 상호 검증\nconst schema = z.object({\n    username: z.string().min(3, {message: '사용자 이름은 최소 3자 이상이어야 합니다'}),\n    email: z.string().min(1, {message: '이메일이 필요합니다'}).email('잘못된 이메일 주소입니다'),\n    password: z.string().min(6, {message: '비밀번호는 최소 6자 이상이어야 합니다'}),\n    confirmPassword: z.string().min(6, {message: '비밀번호는 최소 6자 이상이어야 합니다'})\n  }).refine((data) => data.password === data.confirmPassword, {\n    path: ['confirmPassword'],\n    message: '비밀번호가 일치하지 않습니다'\n  })\n```\n\n이 예시에서는 '확인 비밀번호' 필드가 '비밀번호' 필드와 일치하는지 확인합니다. 값이 일치하지 않으면 오류 메시지가 표시됩니다.\n\n2. 비동기 유효성 검사:\n\n\n\n```js\nconst schema = z.object({\n  email: z.string().email(\"유효하지 않은 이메일 주소\").refine(async (value) => {\n    // 비동기 유효성 검사 로직 수행 (예: 데이터베이스에 이메일이 있는지 확인)\n    // 유효성이 통과되면 true를 반환하고 그렇지 않으면 false를 반환합니다.\n  }, '이메일이 이미 존재합니다'),\n});\n```\n\n이는 데이터를 외부 소스와 대조하여 유효성을 검사해야 할 때 유용합니다. 이메일이 이미 데이터베이스에 존재하는지 확인하는 것과 같은 상황에서 유용합니다.\n\n# 결론\n\nReact에서 양식 유효성을 처리하는 것은 견고하고 사용자 친화적인 웹 애플리케이션을 구축하는 데 필수적입니다. React Hook Form과 Zod의 조합으로 프로세스를 간소화하고 효율적으로 사용하는 방법에 대해 살펴보았습니다. React Hook Form과 Zod를 구성하는 방법, 기본 및 고급 양식 유효성 검사 수행, 복잡한 유효성 시나리오 다루기, 사용자 경험 향상 방법 등을 배웠습니다.\n\n\n\n귀하가 원하는 기준에 따라 사용자 입력을 유효성 검사할 수 있도록 React Hook Form과 Zod의 강력함과 유연성을 활용할 수 있습니다. 이를 통해 데이터 무결성이 향상되고 오류가 줄어들며 더 쾌적한 사용자 경험을 제공할 수 있습니다. 다음 React 프로젝트에서 이러한 기술과 라이브러리를 실험하여 양식 유효성을 효과적이고 효율적으로 처리해 보세요.\n\n더 많은 정보를 원하시면 React hook form 및 Zod 공식 문서를 참조하여 해당 라이브러리 및 고급 개념에 대해 더 많이 알아보세요.\n\n데모의 GitHub 저장소는 여기에서 확인할 수 있습니다. 전체 코드와 CSS 스타일링을 확인할 수 있습니다.\n\n즐거운 코딩 되세요!","ogImage":{"url":"/assets/img/2024-05-14-HandlingFormValidationsinReactwithReactHookFormandZod_0.png"},"coverImage":"/assets/img/2024-05-14-HandlingFormValidationsinReactwithReactHookFormandZod_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>소개</h1>\n<p>웹 애플리케이션에서 폼 유효성 검사는 데이터 무결성을 보장하고 일관된 사용자 경험을 제공하는 데 중요합니다. React에서 폼 유효성을 처리하는 것은 때때로 복잡하고 시간이 많이 소요될 수 있습니다. 그러나 적절한 도구와 라이브러리를 사용하면 이 과정을 간단화하고 효율적으로 만들 수 있습니다.</p>\n<p>이 글에서는 React Hook Form, Zod, 그리고 TypeScript를 활용하여 React에서 폼 유효성을 처리하는 방법을 살펴볼 것입니다. React Hook Form은 폼 상태와 유효성을 관리하기 위한 사용하기 쉬운 API를 갖춘 가벼운 조절 가능한 폼 라이브러리입니다. Zod는 스키마 유효성 검사 라이브러리로 데이터 구조를 정의하고 유효성을 검사하는 것을 간단하게 만들어줍니다.</p>\n<p>React Hook Form과 Zod를 결합하여 React 애플리케이션에서 강력하고 신뢰할 수 있는 폼 유효성 검사 시스템을 만들 수 있습니다. 시작해보고 폼 유효성을 효과적으로 다루는 주요 개념, 기술 및 코드 예제를 살펴보겠습니다.</p>\n<p>데모에서는 Sass를 사용하여 유효성 검사 및 기본 스타일이 적용된 기본 양식을 만들어 보겠습니다(아래 이미지 참조). 이 데모는 React의 새로운 앱을 만들기 위해 React가 커뮤니티에서 인기 있는 React 기반 프레임워크를 사용할 것을 권장하는 Nextjs React 프레임워크를 사용하여 앱을 생성합니다. 자세한 내용은 여기를 참조하세요.</p>\n<p><img src=\"/assets/img/2024-05-14-HandlingFormValidationsinReactwithReactHookFormandZod_1.png\" alt=\"이미지\"></p>\n<h1>React Hook Form과 Zod 설정</h1>\n<p>폼 유효성 검사를 처리하기 전에, 프로젝트에 React Hook Form과 Zod를 설치해야합니다. 이미 React 또는 Next.js 프로젝트가 설정되어 있고 폼이 생성되어 있다고 가정하고, 다음 단계를 따라 진행하세요:</p>\n<ul>\n<li>필요한 종속성 설치:</li>\n</ul>\n<pre><code class=\"hljs language-js\">npm install react-hook-form zod @hookform/resolvers\n</code></pre>\n<ol start=\"2\">\n<li>필요한 컴포넌트와 훅을 가져옵니다:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useForm } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-hook-form'</span>;\n<span class=\"hljs-keyword\">import</span> { zodResolver } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@hookform/resolvers/zod'</span>;\n<span class=\"hljs-keyword\">import</span> { z } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'zod'</span>;\n</code></pre>\n<ol start=\"3\">\n<li>Zod을 사용하여 폼 스키마를 정의하세요:</li>\n</ol>\n<p>저희의 유효성 검사 스키마는 새로운 사용자를 등록하는 폼을 유효성 검사하기 위해 사용자명, 이메일, 비밀번호, 그리고 비밀번호 확인을 포함할 것입니다.</p>\n<pre><code class=\"hljs language-js\"> <span class=\"hljs-keyword\">const</span> schema = z.<span class=\"hljs-title function_\">object</span>({\n    <span class=\"hljs-attr\">username</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">3</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'사용자 이름은 최소 3자 이상이어야 합니다'</span>}),\n    <span class=\"hljs-attr\">email</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">1</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'이메일은 필수 항목입니다'</span>}).<span class=\"hljs-title function_\">email</span>(<span class=\"hljs-string\">'유효하지 않은 이메일 주소입니다'</span>),\n    <span class=\"hljs-attr\">password</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">6</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'비밀번호는 최소 6자 이상이어야 합니다'</span>}),\n    <span class=\"hljs-attr\">confirmPassword</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">6</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'비밀번호는 최소 6자 이상이어야 합니다'</span>})\n  })\n\n<span class=\"hljs-comment\">//스키마에서 유추된 타입 추출하기</span>\ntype <span class=\"hljs-title class_\">ValidationSchemaType</span> = z.<span class=\"hljs-property\">infer</span>&#x3C;<span class=\"hljs-keyword\">typeof</span> schema>\n</code></pre>\n<ol start=\"4\">\n<li>양식과 유효성 해결 프로그램을 설정하십시오:</li>\n</ol>\n<pre><code class=\"hljs language-js\"> <span class=\"hljs-keyword\">const</span> { register, handleSubmit, <span class=\"hljs-attr\">formState</span>: { errors } } = useForm&#x3C;<span class=\"hljs-title class_\">ValidationSchemaType</span>>({\n    <span class=\"hljs-attr\">resolver</span>: <span class=\"hljs-title function_\">zodResolver</span>(schema),\n  });\n</code></pre>\n<p>React Hook Form과 Zod를 설정했으니, 이제 React 애플리케이션에서 양식 유효성 검사를 처리할 준비가 되었습니다.</p>\n<h1>기본 양식 유효성 검사</h1>\n<p>React Hook Form 및 Zod를 사용한 폼 유효성 검사의 기본 사항부터 시작해 봅시다. 개별 폼 필드의 유효성을 검사하고 오류 메시지를 표시하며, 폼 제출을 처리하는 방법을 살펴보겠습니다.</p>\n<ul>\n<li>폼 필드 등록:</li>\n</ul>\n<p>React Hook Form의 register 함수는 폼 필드를 등록하는 데 사용되며, 폼 필드의 속성 이름 또는 스키마 이름을 인수로 취합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;input type=<span class=\"hljs-string\">\"text\"</span> {...<span class=\"hljs-title function_\">register</span>(<span class=\"hljs-string\">'name'</span>)} />\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"use client\"</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n<span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./form.module.scss'</span>\n<span class=\"hljs-keyword\">import</span> { useForm, <span class=\"hljs-title class_\">SubmitHandler</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-hook-form'</span>;\n<span class=\"hljs-keyword\">import</span> { zodResolver } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@hookform/resolvers/zod'</span>;\n<span class=\"hljs-keyword\">import</span> { z } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'zod'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Form</span> = (<span class=\"hljs-params\"></span>) => {\n\n  <span class=\"hljs-keyword\">const</span> schema = z.<span class=\"hljs-title function_\">object</span>({\n    <span class=\"hljs-attr\">username</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">3</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Username must be at least 3 characters'</span>}),\n    <span class=\"hljs-attr\">email</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">1</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Email is required'</span>}).<span class=\"hljs-title function_\">email</span>(<span class=\"hljs-string\">'Invalid email address'</span>),\n    <span class=\"hljs-attr\">password</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">6</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Password must be at least 6 characters'</span>}),\n    <span class=\"hljs-attr\">confirmPassword</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">6</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Password must be at least 6 characters'</span>})\n  }).<span class=\"hljs-title function_\">refine</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> data.<span class=\"hljs-property\">password</span> === data.<span class=\"hljs-property\">confirmPassword</span>, {\n    <span class=\"hljs-attr\">path</span>: [<span class=\"hljs-string\">'confirmPassword'</span>],\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Passwords does not match'</span>\n  })\n\n  <span class=\"hljs-comment\">//extract the inferred type from schema</span>\n  type <span class=\"hljs-title class_\">ValidationSchemaType</span> = z.<span class=\"hljs-property\">infer</span>&#x3C;<span class=\"hljs-keyword\">typeof</span> schema>\n\n  <span class=\"hljs-keyword\">const</span> { register, handleSubmit, <span class=\"hljs-attr\">formState</span>: { errors } } = useForm&#x3C;<span class=\"hljs-title class_\">ValidationSchemaType</span>>({\n    <span class=\"hljs-attr\">resolver</span>: <span class=\"hljs-title function_\">zodResolver</span>(schema),\n  });\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.form_main}</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"username\"</span>></span>\n        Username:\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">'username goes here...'</span> {<span class=\"hljs-attr\">...register</span>('<span class=\"hljs-attr\">username</span>')} /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"email\"</span>></span>\n        Email:\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">'email goes here...'</span> {<span class=\"hljs-attr\">...register</span>('<span class=\"hljs-attr\">email</span>')} /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"password\"</span>></span>\n        Password:\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">'password goes here...'</span> {<span class=\"hljs-attr\">...register</span>('<span class=\"hljs-attr\">password</span>')} /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"confirmPassword\"</span>></span>\n        Confirm Password:\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">'Confirm password'</span> {<span class=\"hljs-attr\">...register</span>('<span class=\"hljs-attr\">confirmPassword</span>')} /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'submit'</span>></span>Login<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span></span>\n  )\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Form</span>\n</code></pre>\n<ol start=\"2\">\n<li>Displaying error messages:</li>\n</ol>\n<p>React Hook Form은 errors 객체를 반환하는데, 이 객체는 formState에서 비구조화된 것입니다. errors를 통해 우리는 양식 오류에 접근할 수 있고 각 등록된 양식 필드에 대한 지정된 유효성 제약 메시지를 반환합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { register, handleSubmit, <span class=\"hljs-attr\">formState</span>: { errors } } = useForm&#x3C;<span class=\"hljs-title class_\">ValidationSchemaType</span>>({\n    <span class=\"hljs-attr\">resolver</span>: <span class=\"hljs-title function_\">zodResolver</span>(schema),\n  });\n</code></pre>\n<p>그럼 각 폼 필드에 대한 유효성 검사 스키마에서 선언된 오류 메시지를 조건부로 렌더링할 수 있어요. 또한, 잘못된 정보를 입력했을 때 입력란 테두리를 빨간색으로 만들기 위해 error_input이라는 CSS 클래스도 만들었어요.</p>\n<pre><code class=\"hljs language-js\">{errors.<span class=\"hljs-property\">username</span> &#x26;&#x26; <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>{errors.username.message}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span></span>}\n</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;form className={styles.<span class=\"hljs-property\">form_main</span>}>\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"username\"</span>></span>\n        Username:\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">'사용자명을 입력해주세요...'</span> {<span class=\"hljs-attr\">...register</span>('<span class=\"hljs-attr\">username</span>')} <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{errors.username</span> &#x26;&#x26; <span class=\"hljs-attr\">styles.error_input</span>}/></span>\n        {errors.username &#x26;&#x26; (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.error}</span>></span>{errors.username?.message}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n        )}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span></span>\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"email\"</span>></span>\n        Email:\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">'이메일을 입력해주세요...'</span> {<span class=\"hljs-attr\">...register</span>('<span class=\"hljs-attr\">email</span>')}  <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{errors.email</span> &#x26;&#x26; <span class=\"hljs-attr\">styles.error_input</span>}/></span>\n        {errors.email &#x26;&#x26; (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.error}</span>></span>{errors.email?.message}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n        )}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span></span>\n\n\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"password\"</span>></span>\n        Password:\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">'비밀번호를 입력해주세요...'</span> {<span class=\"hljs-attr\">...register</span>('<span class=\"hljs-attr\">password</span>')}  <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{errors.password</span> &#x26;&#x26; <span class=\"hljs-attr\">styles.error_input</span>}/></span>\n        {errors.password &#x26;&#x26; (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.error}</span>></span>{errors.password?.message}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n        )}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span></span>\n\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">\"confirmPassword\"</span>></span>\n        Confirm Password:\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">'비밀번호를 확인해주세요'</span> {<span class=\"hljs-attr\">...register</span>('<span class=\"hljs-attr\">confirmPassword</span>')}  <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{errors.confirmPassword</span> &#x26;&#x26; <span class=\"hljs-attr\">styles.error_input</span>}/></span>\n        {errors.confirmPassword &#x26;&#x26; (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.error}</span>></span>{errors.confirmPassword?.message}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n        )}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span></span>\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'submit'</span>></span>로그인<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n    &#x3C;/form>\n</code></pre>\n<ol start=\"3\">\n<li>폼 제출 처리:</li>\n</ol>\n<p>우리는 onSubmit이라는 사용자 정의 폼 제출 핸들러 함수를 생성하고, 폼 데이터를 콘솔에 출력합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">onSubmit</span>: <span class=\"hljs-title class_\">SubmitHandler</span>&#x3C;<span class=\"hljs-title class_\">ValidationSchemaType</span>> = <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data)\n}\n</code></pre>\n<p>그런 다음, React Hook form에서 제공하는 handleSubmit 함수에 전달합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"use client\"</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n<span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./form.module.scss'</span>\n<span class=\"hljs-keyword\">import</span> { useForm, <span class=\"hljs-title class_\">SubmitHandler</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-hook-form'</span>;\n<span class=\"hljs-keyword\">import</span> { zodResolver } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@hookform/resolvers/zod'</span>;\n<span class=\"hljs-keyword\">import</span> { z } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'zod'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Form</span> = (<span class=\"hljs-params\"></span>) => {\n\n  <span class=\"hljs-keyword\">const</span> schema = z.<span class=\"hljs-title function_\">object</span>({\n    <span class=\"hljs-attr\">username</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">3</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Username must be at least 3 characters'</span>}),\n    <span class=\"hljs-attr\">email</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">1</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Email is required'</span>}).<span class=\"hljs-title function_\">email</span>(<span class=\"hljs-string\">'Invalid email address'</span>),\n    <span class=\"hljs-attr\">password</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">6</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Password must be at least 6 characters'</span>}),\n    <span class=\"hljs-attr\">confirmPassword</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">6</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Password must be at least 6 characters'</span>})\n  }).<span class=\"hljs-title function_\">refine</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> data.<span class=\"hljs-property\">password</span> === data.<span class=\"hljs-property\">confirmPassword</span>, {\n    <span class=\"hljs-attr\">path</span>: [<span class=\"hljs-string\">'confirmPassword'</span>],\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Passwords does not match'</span>\n  })\n\n  type <span class=\"hljs-title class_\">ValidationSchemaType</span> = z.<span class=\"hljs-property\">infer</span>&#x3C;<span class=\"hljs-keyword\">typeof</span> schema>\n\n  <span class=\"hljs-keyword\">const</span> { register, handleSubmit, <span class=\"hljs-attr\">formState</span>: { errors } } = useForm&#x3C;<span class=\"hljs-title class_\">ValidationSchemaType</span>>({\n    <span class=\"hljs-attr\">resolver</span>: <span class=\"hljs-title function_\">zodResolver</span>(schema),\n  });\n\n  <span class=\"hljs-comment\">// Form submit handler</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">onSubmit</span>: <span class=\"hljs-title class_\">SubmitHandler</span>&#x3C;<span class=\"hljs-title class_\">ValidationSchemaType</span>> = <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data)\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.form_main}</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleSubmit(onSubmit)}</span>></span>\n      // 다른 코드\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span></span>\n  )\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Form</span>\n</code></pre>\n<p>이 예시에서는 React Hook Form에서 제공하는 register 함수를 사용하여 '사용자 이름', '이메일\" 및 \"비밀번호\" 필드를 등록합니다. 그런 다음 필드에 오류가 있는 경우 오류 메시지를 표시합니다. 마지막으로, 폼 제출은 제출된 폼을 처리하는 onSubmit 함수를 호출하여 처리합니다. 아래 데모를 확인해보세요.</p>\n<h1>일부 고급 폼 유효성 검사 기술</h1>\n<p>다음 기술들 중 일부를 살펴보겠습니다:</p>\n<ul>\n<li>Cross-Field Validation:</li>\n</ul>\n<p>리파인 커스텀 유효성 검사기는 비밀번호와 확인 비밀번호를 상호 검증하는 데 사용할 수 있습니다. 유효성 검사 함수와 양식 데이터를 가져와 비밀번호가 확인된 비밀번호와 동일한지 확인하고 오류 경로를 확인 비밀번호로 설정합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 비밀번호와 확인 비밀번호를 상호 검증</span>\n<span class=\"hljs-keyword\">const</span> schema = z.<span class=\"hljs-title function_\">object</span>({\n    <span class=\"hljs-attr\">username</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">3</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'사용자 이름은 최소 3자 이상이어야 합니다'</span>}),\n    <span class=\"hljs-attr\">email</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">1</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'이메일이 필요합니다'</span>}).<span class=\"hljs-title function_\">email</span>(<span class=\"hljs-string\">'잘못된 이메일 주소입니다'</span>),\n    <span class=\"hljs-attr\">password</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">6</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'비밀번호는 최소 6자 이상이어야 합니다'</span>}),\n    <span class=\"hljs-attr\">confirmPassword</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">6</span>, {<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'비밀번호는 최소 6자 이상이어야 합니다'</span>})\n  }).<span class=\"hljs-title function_\">refine</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> data.<span class=\"hljs-property\">password</span> === data.<span class=\"hljs-property\">confirmPassword</span>, {\n    <span class=\"hljs-attr\">path</span>: [<span class=\"hljs-string\">'confirmPassword'</span>],\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'비밀번호가 일치하지 않습니다'</span>\n  })\n</code></pre>\n<p>이 예시에서는 '확인 비밀번호' 필드가 '비밀번호' 필드와 일치하는지 확인합니다. 값이 일치하지 않으면 오류 메시지가 표시됩니다.</p>\n<ol start=\"2\">\n<li>비동기 유효성 검사:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> schema = z.<span class=\"hljs-title function_\">object</span>({\n  <span class=\"hljs-attr\">email</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">email</span>(<span class=\"hljs-string\">\"유효하지 않은 이메일 주소\"</span>).<span class=\"hljs-title function_\">refine</span>(<span class=\"hljs-keyword\">async</span> (value) => {\n    <span class=\"hljs-comment\">// 비동기 유효성 검사 로직 수행 (예: 데이터베이스에 이메일이 있는지 확인)</span>\n    <span class=\"hljs-comment\">// 유효성이 통과되면 true를 반환하고 그렇지 않으면 false를 반환합니다.</span>\n  }, <span class=\"hljs-string\">'이메일이 이미 존재합니다'</span>),\n});\n</code></pre>\n<p>이는 데이터를 외부 소스와 대조하여 유효성을 검사해야 할 때 유용합니다. 이메일이 이미 데이터베이스에 존재하는지 확인하는 것과 같은 상황에서 유용합니다.</p>\n<h1>결론</h1>\n<p>React에서 양식 유효성을 처리하는 것은 견고하고 사용자 친화적인 웹 애플리케이션을 구축하는 데 필수적입니다. React Hook Form과 Zod의 조합으로 프로세스를 간소화하고 효율적으로 사용하는 방법에 대해 살펴보았습니다. React Hook Form과 Zod를 구성하는 방법, 기본 및 고급 양식 유효성 검사 수행, 복잡한 유효성 시나리오 다루기, 사용자 경험 향상 방법 등을 배웠습니다.</p>\n<p>귀하가 원하는 기준에 따라 사용자 입력을 유효성 검사할 수 있도록 React Hook Form과 Zod의 강력함과 유연성을 활용할 수 있습니다. 이를 통해 데이터 무결성이 향상되고 오류가 줄어들며 더 쾌적한 사용자 경험을 제공할 수 있습니다. 다음 React 프로젝트에서 이러한 기술과 라이브러리를 실험하여 양식 유효성을 효과적이고 효율적으로 처리해 보세요.</p>\n<p>더 많은 정보를 원하시면 React hook form 및 Zod 공식 문서를 참조하여 해당 라이브러리 및 고급 개념에 대해 더 많이 알아보세요.</p>\n<p>데모의 GitHub 저장소는 여기에서 확인할 수 있습니다. 전체 코드와 CSS 스타일링을 확인할 수 있습니다.</p>\n<p>즐거운 코딩 되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}