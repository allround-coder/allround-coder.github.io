{"pageProps":{"post":{"title":"루비 온 레일즈 앱을 커피스트라노Capistrano를 사용하여 로컬로동일 PC에서 다른 사용자에게 배포하기","description":"","date":"2024-05-15 10:39","slug":"2024-05-15-DeploymentofRubyonRailsappusingCapistranoLocallyFromoneusertoanotheronthesamePC","content":"\n\n<img src=\"/assets/img/2024-05-15-DeploymentofRubyonRailsappusingCapistranoLocallyFromoneusertoanotheronthesamePC_0.png\" />\n\n# 소개\n\n소프트웨어 개발에서 애플리케이션을 배포하는 것은 사용자가 이용할 수 있도록 하는 중요한 단계입니다. Capistrano는 배포 프로세스를 자동화하여 효율적이고 신뢰성있게 만드는 인기 있는 도구입니다.\n\n이 안내서에서는 Capistrano를 사용하여 로컬에서 Ruby on Rails 애플리케이션을 배포하는 단계를 안내합니다. 레일즈 앱 배포 방법을 배우면서 수행한 내용이며, 이런 단계를 따랐습니다.\n\n\n\n# 전제 조건\n\n시작하기 전에 다음 전제 조건을 확인하세요:\n\n- Ubuntu 터미널과 Capistrano 파일 구조에 대한 기본 지식.\n- Ruby on Rails가 PC에 올바르게 설정되어 있어야 합니다.\n- 두 사용자가 Rails 앱 디렉토리에 액세스하고 명령을 실행할 필요한 권한을 갖고 있어야 합니다.\n- SSH 키가 올바르게 설정되어 있어야 합니다.\n- Ubuntu에서 사용자 및 SSH 키 설정에 익숙해야 합니다.\n\n# 사용자 생성 및 SSH 설정\n\n\n\n- 새 사용자를 만드세요:\n\n```js\nsudo adduser newuser\n```\n\n- 사용자를 만든 후, 해당 사용자로 전환하세요\n\n```js\nsudo su - newuser\n```\n\n\n\n새 사용자에게 .ssh 디렉토리를 만들어야 합니다. Rails 앱을 배포하기 위해 ssh 키가 필요합니다.\n\n```js\n mkdir -p ~/.ssh\n```\n\n- 기존 사용자의 SSH 인증 키를 새 사용자의 .ssh 디렉토리로 복사해야 합니다. 여기서 ssh는 두 사용자 간 통신에 사용됩니다.\n\n```js\nsudo cp /home/existing-user/.ssh/authorized_keys /home/newuser/.ssh\n```\n\n\n\n- 또한, 새 사용자에게 소유권을 부여해 주세요\n\n```js\nsudo chown -R newuser:newuser /home/newuser/.ssh\n```\n\n- 새로운 사용자에게 sudo 권한을 부여하세요(관리자 권한을 가진 사용자로 로그인해야 함)\n\n```js\nsudo usermod -aG sudo newuser\n```\n\n\n\n- 이제 새 사용자로 전환할 수 있어요\n\n```js\nsu - newuser\n```\n\n- 이제 새 사용자의 SSH 구성 여부를 확인할 수 있어요\n\n```js\nssh localhost\n```\n\n\n\n- 만약 ssh가 연결되어 있다면 이제 다음과 같이 표시됩니다 :\n\n![Deployment of Ruby on Rails app using Capistrano Locally From one user to another on the same PC](/assets/img/2024-05-15-DeploymentofRubyonRailsappusingCapistranoLocallyFromoneusertoanotheronthesamePC_1.png)\n\n- 이제 배포 프로세스를 시작해봅시다. 레일즈 앱을 배포하려는 사용자를 엽니다 :\n\n# Gemfile 설정\n\n\n\n- 먼저 레일즈에서 Capistrano 젬을 설정하는 것이 첫 번째 단계입니다.\n\n다음을 개발 그룹 아래 Gemfile에 추가하십시오.\n\n```js\ngem \"capistrano\", \"~> 3.10\", require: false\ngem \"capistrano-rails\", \"~> 1.6\", require: false \ngem 'capistrano-rbenv', require: false   \ngem 'capistrano-puma', require: false\n```\n\n- 이제 다음 명령을 명령 줄에서 실행하여 추가 번들을 설치하십시오\n\n\n\n```js\n번들 설치\n```\n\n- 생성기를 실행하여 기본 구성 파일 세트를 만듭니다.\n\n```js\n번들 실행 cap 설치\n```\n\n# Capfile 구성\n\n\n\n- 루트 디렉토리에 있는 Capfile에서 다음 플러그인들을 주석처리 해제하세요.\n\n```js\nrequire \"capistrano/rbenv\" \nrequire \"capistrano/bundler\"\nrequire \"capistrano/rails/assets\"\nrequire \"capistrano/rails/migrations\" \nrequire \"capistrano/rails\" \nrequire \"capistrano/bundler\"\nrequire \"capistrano/puma\"\n```\n\n- 참고: 위의 플러그인은 앱의 요구 사항에 따라 다를 수 있습니다. 예를 들어, 여기서 패신저를 사용하는 경우 require \"capistrano/passenger\"를 추가해야합니다. 저는 사용하지 않기 때문에 추가하지 않아도 됩니다.\n\n# 설정 파일\n\n\n\n- `config/deploy.rb` 파일을 적절한 값으로 업데이트해주세요. 여기서는 cap loc 버전 3.18.0을 사용하며 `staging.rb`를 사용하여 배포하고 있습니다.\n- 프로젝트 요구 사항에 따라 구성을 사용자 정의해주시기 바랍니다.\n\n```js\nlock \"~> 3.18.0\"\nset :stage, :staging \nset :rails_env, 'test' \nset :application, '{앱 이름}' \nset :repo_url, 'git@github.com:당신의/github/url.git' \nset :deploy_to, '/home/{로컬 사용자명}/{배포할 애플리케이션 이름}' \nset :branch, '{배포하려는 브랜치}' \nset :rbenv_ruby, '2.7.7' \nset :default_env, { 'PATH' => \"#{fetch(:rbenv_path)}/shims:#{fetch(:rbenv_path)}/bin:$PATH\", 'RBENV_VERSION' => fetch(:rbenv_ruby) }\n```\n\n# 배포\n\n- `staging.rb` 파일에 로컬 호스트 IP를 추가하세요.\n\n\n\n```js\n서버 'localhost', 사용자: '{귀하의 로컬 사용자 이름}', 역할: %w{app db web}\n```\n\n- 이제 다음 명령을 사용하여 API를 로컬로 배포할 수 있습니다.\n\n```js\ncap staging deploy\n```\n\n- 이제 루비 온 레일 API가 로컬로 배포되었고 앱 폴더로 이동하여 버전을 확인할 수 있습니다. 현재 디렉토리로 이동한 후에 아래 명령을 실행할 수 있습니다.\n\n\n\n```js\nbin/rails s\n```\n\n- 특정 젬 설치 오류가 발생하면 ruby와 rails 간 버전 간의 충돌이 없는지 확인해보세요.\n\n이제 파일 구조가 다음과 같이 보일 것입니다 :\n\n![image](/assets/img/2024-05-15-DeploymentofRubyonRailsappusingCapistranoLocallyFromoneusertoanotheronthesamePC_2.png)\n\n\n\n\n# 결론\n\n축하합니다! Capistrano를 사용하여 로컬에 Ruby on Rails 애플리케이션을 성공적으로 배포했습니다. 이제 Rails 서버를 실행하고 애플리케이션에 액세스할 수 있습니다.\n\n# 팁\n\n- 배포 명령을 실행하기 전에 배포 구성을 항상 확인해보세요.\n- 배포 중 발생하는 오류를 해결하려면 로그와 구성을 확인하세요.\n- 프로젝트의 요구에 맞게 Capistrano 구성을 사용자 정의하세요.","ogImage":{"url":"/assets/img/2024-05-15-DeploymentofRubyonRailsappusingCapistranoLocallyFromoneusertoanotheronthesamePC_0.png"},"coverImage":"/assets/img/2024-05-15-DeploymentofRubyonRailsappusingCapistranoLocallyFromoneusertoanotheronthesamePC_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>소개</h1>\n<p>소프트웨어 개발에서 애플리케이션을 배포하는 것은 사용자가 이용할 수 있도록 하는 중요한 단계입니다. Capistrano는 배포 프로세스를 자동화하여 효율적이고 신뢰성있게 만드는 인기 있는 도구입니다.</p>\n<p>이 안내서에서는 Capistrano를 사용하여 로컬에서 Ruby on Rails 애플리케이션을 배포하는 단계를 안내합니다. 레일즈 앱 배포 방법을 배우면서 수행한 내용이며, 이런 단계를 따랐습니다.</p>\n<h1>전제 조건</h1>\n<p>시작하기 전에 다음 전제 조건을 확인하세요:</p>\n<ul>\n<li>Ubuntu 터미널과 Capistrano 파일 구조에 대한 기본 지식.</li>\n<li>Ruby on Rails가 PC에 올바르게 설정되어 있어야 합니다.</li>\n<li>두 사용자가 Rails 앱 디렉토리에 액세스하고 명령을 실행할 필요한 권한을 갖고 있어야 합니다.</li>\n<li>SSH 키가 올바르게 설정되어 있어야 합니다.</li>\n<li>Ubuntu에서 사용자 및 SSH 키 설정에 익숙해야 합니다.</li>\n</ul>\n<h1>사용자 생성 및 SSH 설정</h1>\n<ul>\n<li>새 사용자를 만드세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">sudo adduser newuser\n</code></pre>\n<ul>\n<li>사용자를 만든 후, 해당 사용자로 전환하세요</li>\n</ul>\n<pre><code class=\"hljs language-js\">sudo su - newuser\n</code></pre>\n<p>새 사용자에게 .ssh 디렉토리를 만들어야 합니다. Rails 앱을 배포하기 위해 ssh 키가 필요합니다.</p>\n<pre><code class=\"hljs language-js\"> mkdir -p ~/.<span class=\"hljs-property\">ssh</span>\n</code></pre>\n<ul>\n<li>기존 사용자의 SSH 인증 키를 새 사용자의 .ssh 디렉토리로 복사해야 합니다. 여기서 ssh는 두 사용자 간 통신에 사용됩니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">sudo cp /home/existing-user/.<span class=\"hljs-property\">ssh</span>/authorized_keys /home/newuser/.<span class=\"hljs-property\">ssh</span>\n</code></pre>\n<ul>\n<li>또한, 새 사용자에게 소유권을 부여해 주세요</li>\n</ul>\n<pre><code class=\"hljs language-js\">sudo chown -R <span class=\"hljs-attr\">newuser</span>:newuser /home/newuser/.<span class=\"hljs-property\">ssh</span>\n</code></pre>\n<ul>\n<li>새로운 사용자에게 sudo 권한을 부여하세요(관리자 권한을 가진 사용자로 로그인해야 함)</li>\n</ul>\n<pre><code class=\"hljs language-js\">sudo usermod -aG sudo newuser\n</code></pre>\n<ul>\n<li>이제 새 사용자로 전환할 수 있어요</li>\n</ul>\n<pre><code class=\"hljs language-js\">su - newuser\n</code></pre>\n<ul>\n<li>이제 새 사용자의 SSH 구성 여부를 확인할 수 있어요</li>\n</ul>\n<pre><code class=\"hljs language-js\">ssh localhost\n</code></pre>\n<ul>\n<li>만약 ssh가 연결되어 있다면 이제 다음과 같이 표시됩니다 :</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-15-DeploymentofRubyonRailsappusingCapistranoLocallyFromoneusertoanotheronthesamePC_1.png\" alt=\"Deployment of Ruby on Rails app using Capistrano Locally From one user to another on the same PC\"></p>\n<ul>\n<li>이제 배포 프로세스를 시작해봅시다. 레일즈 앱을 배포하려는 사용자를 엽니다 :</li>\n</ul>\n<h1>Gemfile 설정</h1>\n<ul>\n<li>먼저 레일즈에서 Capistrano 젬을 설정하는 것이 첫 번째 단계입니다.</li>\n</ul>\n<p>다음을 개발 그룹 아래 Gemfile에 추가하십시오.</p>\n<pre><code class=\"hljs language-js\">gem <span class=\"hljs-string\">\"capistrano\"</span>, <span class=\"hljs-string\">\"~> 3.10\"</span>, <span class=\"hljs-attr\">require</span>: <span class=\"hljs-literal\">false</span>\ngem <span class=\"hljs-string\">\"capistrano-rails\"</span>, <span class=\"hljs-string\">\"~> 1.6\"</span>, <span class=\"hljs-attr\">require</span>: <span class=\"hljs-literal\">false</span> \ngem <span class=\"hljs-string\">'capistrano-rbenv'</span>, <span class=\"hljs-attr\">require</span>: <span class=\"hljs-literal\">false</span>   \ngem <span class=\"hljs-string\">'capistrano-puma'</span>, <span class=\"hljs-attr\">require</span>: <span class=\"hljs-literal\">false</span>\n</code></pre>\n<ul>\n<li>이제 다음 명령을 명령 줄에서 실행하여 추가 번들을 설치하십시오</li>\n</ul>\n<pre><code class=\"hljs language-js\">번들 설치\n</code></pre>\n<ul>\n<li>생성기를 실행하여 기본 구성 파일 세트를 만듭니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">번들 실행 cap 설치\n</code></pre>\n<h1>Capfile 구성</h1>\n<ul>\n<li>루트 디렉토리에 있는 Capfile에서 다음 플러그인들을 주석처리 해제하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">\"capistrano/rbenv\"</span> \n<span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">\"capistrano/bundler\"</span>\n<span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">\"capistrano/rails/assets\"</span>\n<span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">\"capistrano/rails/migrations\"</span> \n<span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">\"capistrano/rails\"</span> \n<span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">\"capistrano/bundler\"</span>\n<span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">\"capistrano/puma\"</span>\n</code></pre>\n<ul>\n<li>참고: 위의 플러그인은 앱의 요구 사항에 따라 다를 수 있습니다. 예를 들어, 여기서 패신저를 사용하는 경우 require \"capistrano/passenger\"를 추가해야합니다. 저는 사용하지 않기 때문에 추가하지 않아도 됩니다.</li>\n</ul>\n<h1>설정 파일</h1>\n<ul>\n<li><code>config/deploy.rb</code> 파일을 적절한 값으로 업데이트해주세요. 여기서는 cap loc 버전 3.18.0을 사용하며 <code>staging.rb</code>를 사용하여 배포하고 있습니다.</li>\n<li>프로젝트 요구 사항에 따라 구성을 사용자 정의해주시기 바랍니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">lock <span class=\"hljs-string\">\"~> 3.18.0\"</span>\nset :stage, :staging \nset :rails_env, <span class=\"hljs-string\">'test'</span> \nset :application, <span class=\"hljs-string\">'{앱 이름}'</span> \nset :repo_url, <span class=\"hljs-string\">'git@github.com:당신의/github/url.git'</span> \nset :deploy_to, <span class=\"hljs-string\">'/home/{로컬 사용자명}/{배포할 애플리케이션 이름}'</span> \nset :branch, <span class=\"hljs-string\">'{배포하려는 브랜치}'</span> \nset :rbenv_ruby, <span class=\"hljs-string\">'2.7.7'</span> \nset :default_env, { <span class=\"hljs-string\">'PATH'</span> => <span class=\"hljs-string\">\"#{fetch(:rbenv_path)}/shims:#{fetch(:rbenv_path)}/bin:$PATH\"</span>, <span class=\"hljs-string\">'RBENV_VERSION'</span> => <span class=\"hljs-title function_\">fetch</span>(:rbenv_ruby) }\n</code></pre>\n<h1>배포</h1>\n<ul>\n<li><code>staging.rb</code> 파일에 로컬 호스트 IP를 추가하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">서버 <span class=\"hljs-string\">'localhost'</span>, 사용자: <span class=\"hljs-string\">'{귀하의 로컬 사용자 이름}'</span>, 역할: %w{app db web}\n</code></pre>\n<ul>\n<li>이제 다음 명령을 사용하여 API를 로컬로 배포할 수 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">cap staging deploy\n</code></pre>\n<ul>\n<li>이제 루비 온 레일 API가 로컬로 배포되었고 앱 폴더로 이동하여 버전을 확인할 수 있습니다. 현재 디렉토리로 이동한 후에 아래 명령을 실행할 수 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">bin/rails s\n</code></pre>\n<ul>\n<li>특정 젬 설치 오류가 발생하면 ruby와 rails 간 버전 간의 충돌이 없는지 확인해보세요.</li>\n</ul>\n<p>이제 파일 구조가 다음과 같이 보일 것입니다 :</p>\n<p><img src=\"/assets/img/2024-05-15-DeploymentofRubyonRailsappusingCapistranoLocallyFromoneusertoanotheronthesamePC_2.png\" alt=\"image\"></p>\n<h1>결론</h1>\n<p>축하합니다! Capistrano를 사용하여 로컬에 Ruby on Rails 애플리케이션을 성공적으로 배포했습니다. 이제 Rails 서버를 실행하고 애플리케이션에 액세스할 수 있습니다.</p>\n<h1>팁</h1>\n<ul>\n<li>배포 명령을 실행하기 전에 배포 구성을 항상 확인해보세요.</li>\n<li>배포 중 발생하는 오류를 해결하려면 로그와 구성을 확인하세요.</li>\n<li>프로젝트의 요구에 맞게 Capistrano 구성을 사용자 정의하세요.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}