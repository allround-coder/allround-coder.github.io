{"pageProps":{"post":{"title":"React Nextjs에서 Boxicons 사용하는 방법","description":"","date":"2024-05-12 19:24","slug":"2024-05-12-BoxiconsReactNextjsTypeScriptIntegration","content":"\n<img src=\"/assets/img/2024-05-12-BoxiconsReactNextjsTypeScriptIntegration_0.png\" />\n\n박스 아이콘(Boxicons)은 많은 오픈 소스 아이콘을 제공하여 웹사이트나 애플리케이션에 원활하게 통합할 수 있도록 도와주는 패키지입니다. 이 패키지는 JavaScript로 작성되어 있으며 온라인 저장소에 TypeScript 정의 파일이 없습니다. 이는 TypeScript 프로젝트에 통합하기가 조금 어렵다는 것을 의미합니다. 이 글은 React/Next.js TypeScript 프로젝트에 박스 아이콘을 통합하는 단계별 가이드를 제공합니다.\n\n# Next.JS\n\n## 1. 프로젝트 설정\n\n다음 명령어를 실행하여 Next.js 애플리케이션을 시작하세요.\n\n```js\nnpx create-next-app@latest\n```\n\n프로젝트에 이름을 지정하고 설치 프롬프트에서 기본 옵션을 선택하세요.\n\n```js\n프로젝트 이름은 무엇인가요? boxicons-nextjs-ts\nTypeScript를 사용하시겠습니까? No / Yes\nESLint를 사용하시겠습니까? No / Yes\nTailwind CSS를 사용하시겠습니까? No / Yes\n`src/` 디렉토리를 사용하시겠습니까? No / Yes\nApp Router를 사용하시겠습니까? (추천) No / Yes\n기본 import 별칭을 사용자 지정하시겠습니까? No / Yes\n구성할 import 별칭을 입력해주세요. @/*\n```\n\n다음은 프로젝트 구조가 설정된 Next.js 애플리케이션의 시작 코드를 생성해야 합니다.\n\n![Next.js Starter Code](/assets/img/2024-05-12-BoxiconsReactNextjsTypeScriptIntegration_1.png)\n\n## 2. 의존성 설치\n\nBoxicons 설치하기\n\n```js\nnpm install boxicons --save\n```\n\n## 3. 유형 정의\n\n“src\" 디렉토리에 “types\" 폴더를 만들고 그 안에 “boxicons.d.ts\"라는 파일을 생성하세요. 이 파일은 boxicons 패키지의 유형 정의를 담고 있을 것입니다. 다음 코드 스니펫을 \"boxicons.d.ts\" 파일에 붙여넣으세요.\n\nsrc/types/boxicons.d.ts\n\n```js\ndeclare module \"boxicons\" {\n  export type IconName = string;\n}\n```\n\n위의 코드 조각에서 boxicons 패키지를 위한 모듈 선언을 생성합니다. TypeScript가 모듈을 가져올 때 해당 모듈을 해결할 수 있도록 합니다. 또한, \"IconName\"이라는 문자열 타입이 내보내집니다. 이를 통해 아이콘 이름이 모두 문자열임을 보장하고, 발생 가능한 일부 버그를 미리 방지합니다.\n\n## 4. 스타일시트 임포트\n\n프로젝트에 boxicons 스타일시트를 추가하세요. 이는 애플리케이션의 메인 스타일시트 맨 위에 CSS import를 추가하여 수행할 수 있습니다. 기본적으로 Next.js의 \"src/pages\" 디렉토리에 있는 \"global.css\" 파일이 메인 애플리케이션 스타일시트입니다.\n\n동일한 결과를 얻으려면 \"src/pages\" 디렉토리의 \"layout.tsx\" 파일에 헤드 태그에 링크 태그를 추가하면 됩니다.\n\nsrc/pages/layout.tsx\n\n```js\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode,\n}>) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link href=\"https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css\" rel=\"stylesheet\"></link>\n      </head>\n      <body className={inter.className}>{children}</body>\n    </html>\n  );\n}\n```\n\nOR\n\nsrc/pages/globals.css\n\n```js\n@import \"~boxicons/css/boxicons.min.css\";\n# OR\n@import url(\"boxicons/css/boxicons.min.css\");\n```\n\n## 5. 아이콘 컴포넌트 생성\n\n애플리케이션에 다양한 \"boxicons\"를 가져올 수 있는 아이콘 컴포넌트를 생성하세요. 이를 위해 \"src\" 디렉터리에 \"components\"라는 폴더를 만들고 그 안에 \"Icon.tsx\" 파일을 만드세요.\n\nsrc/components/Icon.tsx\n\n```js\nimport React from \"react\";\nimport { IconName } from \"boxicons\";\n\ninterface IconProps {\n  name: IconName;\n  size?: string;\n  color?: string;\n}\n\nconst Icon: React.FC<IconProps> = ({ name, size = \"24px\", color = \"\" }) => {\n  return <i className={`bx ${name}`} style={{ fontSize: size, color }} />;\n};\n\nexport default Icon;\n```\n\n`name` 속성은 표시할 아이콘을 변경하는 데 사용됩니다. 사용할 수 있는 모든 아이콘을 확인하려면 boxicons 웹 사이트를 확인하십시오. `size` 및 `color` 속성은 각각 아이콘의 크기 및 색상을 변경하는 데 사용됩니다.\n\n컴포넌트 디렉토리의 내용을 내보내는 \"index.ts\" 파일을 만듭니다. 이는 가져오기를 \"깔끔하게\" 유지하기 위한 것이며, 이 단계를 건너 뛰어도 괜찮습니다.\n\nsrc/components/index.ts\n\n```js\nimport Icon from \"./Icon\";\n\nexport { Icon };\n```\n\n## 6. Icon 사용법\n\n프로젝트 전반에 걸쳐 사용하기 위해 components 디렉토리에서 Icon 컴포넌트를 import합니다. 아래는 예시입니다:\n\nsrc/pages/pages.tsx\n\n```js\nimport { Icon } from \"@/components\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-center py-24 gap-3\">\n      <Icon name=\"bx-run\" size=\"108px\" />\n      <h2 className=\"text-6xl\">함께 떠나요</h2>\n      <div className=\"flex mt-4 gap-3\">\n        <Icon name=\"bx-rocket\" size=\"64px\" />\n        <Icon name=\"bx-rocket\" size=\"64px\" />\n      </div>\n    </main>\n  );\n}\n```\n\n개발 서버를 실행하여 아이콘이 표시되는지 확인해 보세요.\n\n```js\nnpm run dev\n```\n\nViolaaa 🚀\n\n![image](/assets/img/2024-05-12-BoxiconsReactNextjsTypeScriptIntegration_2.png)\n\n이 프로젝트의 소스 코드가 포함된 GitHub 저장소 링크입니다:\n\n[https://github.com/Quarcoo-arc/boxicons-nextjs-ts.git](https://github.com/Quarcoo-arc/boxicons-nextjs-ts.git)\n\n# React\n\nReact와 TypeScript 프로젝트에 boxicons를 통합하는 것은 Next.js와 TypeScript 프로젝트에 통합하는 것과 유사합니다. 그러나 몇 가지 차이가 있습니다. 이를 아래에서 강조했습니다.\n\n## 1. 프로젝트 설정\n\nReact 프로젝트를 설정하는 가장 쉬운 방법은 create-react-app 또는 Vite를 사용하는 것입니다. 저는 Vite를 선호합니다. 왜냐하면 이름이 시사하는 대로 빠르기 때문입니다. Vite는 \"신속\"을 뜻하는 프랑스어 단어이며 /vit/으로 발음합니다. 충분히 어휘적인 얘기는 여기까지 하고 아이콘들을 표시해봅시다 🚀.\n\n다음 명령어를 실행하여 Vite를 사용한 React + TypeScript 프로젝트를 시작하세요:\n\n```js\nnpm create vite@latest\n```\n\n프로젝트 이름 (boxicons-react-ts), 프레임워크 (React), 그리고 변형 (TypeScript)을 옵션에 설정하세요. 프로젝트 디렉토리로 이동하고 애플리케이션 종속성을 설치하세요.\n\n```js\ncd boxicons-react-ts\nnpm install\n```\n\n위 명령들을 실행하면 다음과 같은 폴더 구조를 갖는 프로젝트가 생성됩니다.\n\n![폴더 구조](/assets/img/2024-05-12-BoxiconsReactNextjsTypeScriptIntegration_3.png)\n\n## 2. 종속성 설치\n\nboxicons를 설치하세요. Next.JS 부분의 두 번째 섹션에 설명된 대로 진행하시면 됩니다.\n\n## 3. 유형 정의\n\nReact 및 Next.js에 대한 유형 정의 파일을 생성하는 방법은 동일합니다.\n\n## 4. 스타일시트 가져오기\n\nNext.js와 마찬가지로 React에서 boxicons 스타일시트를 가져오는 두 가지 옵션이 있습니다; head 태그 내부에 링크 태그를 사용하거나 CSS를 가져오는 것입니다. 차이점은 src/pages/layout.tsx가 아닌 프로젝트의 루트 디렉토리의 index.html 파일에 링크 태그가 추가된다는 점입니다. 또한 CSS를 가져오는 위치는 src/pages/globals.css가 아닌 React 애플리케이션의 기본 주 스타일시트인 src/index.css에 위치합니다.\n\n한 가지 더 알려드릴게요. 이 CSS import를 사용하면 오류가 발생합니다:\n\n```js\n# 오류가 발생합니다 ❌\n@import \"~boxicons/css/boxicons.min.css\";\n```\n\n이것을 대신 사용하세요:\n\n```js\n# 이것을 대신 사용하세요 ✅\n@import url(\"boxicons/css/boxicons.min.css\");\n```\n\n```css\n@import url(\"https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css\");\n```\n\n## 6. 아이콘 사용법\n\n이제 아이콘 컴포넌트를 가져와 프로젝트 전반에 사용할 수 있습니다. 아래에서 확인할 수 있습니다.\n\nsrc/App.tsx\n\n```jsx\nimport \"./App.css\";\nimport { Icon } from \"./components\";\n\nfunction App() {\n  return (\n    <div>\n      <Icon name=\"bxl-typescript\" size=\"36px\" />\n      <Icon name=\"bx-plus\" size=\"36px\" />\n      <Icon name=\"bxl-react\" size=\"36px\" />\n      <h1>We go again</h1>\n      <Icon name=\"bx-rocket\" size=\"36px\" />\n      <Icon name=\"bx-rocket\" size=\"36px\" />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n개발 서버를 실행해서 아이콘들을 확인해보세요.\n\n```js\nnpm run dev\n```\n\n![아이콘 이미지](/assets/img/2024-05-12-BoxiconsReactNextjsTypeScriptIntegration_4.png)\n\n이 프로젝트의 소스 코드가 포함된 GitHub 저장소 링크입니다:\n\n위의 링크를 통해, React/Next.js + TypeScript 프로젝트에서 boxicons를 사용할 준비가 끝났어요. TypeScript 프로젝트에서 typings이 제공되지 않는 JavaScript 패키지를 사용하는 방법도 비슷하게 따를 수 있어요.\n","ogImage":{"url":"/assets/img/2024-05-12-BoxiconsReactNextjsTypeScriptIntegration_0.png"},"coverImage":"/assets/img/2024-05-12-BoxiconsReactNextjsTypeScriptIntegration_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>박스 아이콘(Boxicons)은 많은 오픈 소스 아이콘을 제공하여 웹사이트나 애플리케이션에 원활하게 통합할 수 있도록 도와주는 패키지입니다. 이 패키지는 JavaScript로 작성되어 있으며 온라인 저장소에 TypeScript 정의 파일이 없습니다. 이는 TypeScript 프로젝트에 통합하기가 조금 어렵다는 것을 의미합니다. 이 글은 React/Next.js TypeScript 프로젝트에 박스 아이콘을 통합하는 단계별 가이드를 제공합니다.</p>\n<h1>Next.JS</h1>\n<h2>1. 프로젝트 설정</h2>\n<p>다음 명령어를 실행하여 Next.js 애플리케이션을 시작하세요.</p>\n<pre><code class=\"hljs language-js\">npx create-next-app@latest\n</code></pre>\n<p>프로젝트에 이름을 지정하고 설치 프롬프트에서 기본 옵션을 선택하세요.</p>\n<pre><code class=\"hljs language-js\">프로젝트 이름은 무엇인가요? boxicons-nextjs-ts\n<span class=\"hljs-title class_\">TypeScript</span>를 사용하시겠습니까? <span class=\"hljs-title class_\">No</span> / <span class=\"hljs-title class_\">Yes</span>\n<span class=\"hljs-title class_\">ESLint</span>를 사용하시겠습니까? <span class=\"hljs-title class_\">No</span> / <span class=\"hljs-title class_\">Yes</span>\n<span class=\"hljs-title class_\">Tailwind</span> <span class=\"hljs-variable constant_\">CSS</span>를 사용하시겠습니까? <span class=\"hljs-title class_\">No</span> / <span class=\"hljs-title class_\">Yes</span>\n<span class=\"hljs-string\">`src/`</span> 디렉토리를 사용하시겠습니까? <span class=\"hljs-title class_\">No</span> / <span class=\"hljs-title class_\">Yes</span>\n<span class=\"hljs-title class_\">App</span> <span class=\"hljs-title class_\">Router</span>를 사용하시겠습니까? (추천) <span class=\"hljs-title class_\">No</span> / <span class=\"hljs-title class_\">Yes</span>\n기본 <span class=\"hljs-keyword\">import</span> 별칭을 사용자 지정하시겠습니까? <span class=\"hljs-title class_\">No</span> / <span class=\"hljs-title class_\">Yes</span>\n구성할 <span class=\"hljs-keyword\">import</span> 별칭을 입력해주세요. @<span class=\"hljs-comment\">/*\n</span></code></pre>\n<p>다음은 프로젝트 구조가 설정된 Next.js 애플리케이션의 시작 코드를 생성해야 합니다.</p>\n<p><img src=\"/assets/img/2024-05-12-BoxiconsReactNextjsTypeScriptIntegration_1.png\" alt=\"Next.js Starter Code\"></p>\n<h2>2. 의존성 설치</h2>\n<p>Boxicons 설치하기</p>\n<pre><code class=\"hljs language-js\">npm install boxicons --save\n</code></pre>\n<h2>3. 유형 정의</h2>\n<p>“src\" 디렉토리에 “types\" 폴더를 만들고 그 안에 “boxicons.d.ts\"라는 파일을 생성하세요. 이 파일은 boxicons 패키지의 유형 정의를 담고 있을 것입니다. 다음 코드 스니펫을 \"boxicons.d.ts\" 파일에 붙여넣으세요.</p>\n<p>src/types/boxicons.d.ts</p>\n<pre><code class=\"hljs language-js\">declare <span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"boxicons\"</span> {\n  <span class=\"hljs-keyword\">export</span> type <span class=\"hljs-title class_\">IconName</span> = string;\n}\n</code></pre>\n<p>위의 코드 조각에서 boxicons 패키지를 위한 모듈 선언을 생성합니다. TypeScript가 모듈을 가져올 때 해당 모듈을 해결할 수 있도록 합니다. 또한, \"IconName\"이라는 문자열 타입이 내보내집니다. 이를 통해 아이콘 이름이 모두 문자열임을 보장하고, 발생 가능한 일부 버그를 미리 방지합니다.</p>\n<h2>4. 스타일시트 임포트</h2>\n<p>프로젝트에 boxicons 스타일시트를 추가하세요. 이는 애플리케이션의 메인 스타일시트 맨 위에 CSS import를 추가하여 수행할 수 있습니다. 기본적으로 Next.js의 \"src/pages\" 디렉토리에 있는 \"global.css\" 파일이 메인 애플리케이션 스타일시트입니다.</p>\n<p>동일한 결과를 얻으려면 \"src/pages\" 디렉토리의 \"layout.tsx\" 파일에 헤드 태그에 링크 태그를 추가하면 됩니다.</p>\n<p>src/pages/layout.tsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> type { <span class=\"hljs-title class_\">Metadata</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Inter</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/font/google\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./globals.css\"</span>;\n\n<span class=\"hljs-keyword\">const</span> inter = <span class=\"hljs-title class_\">Inter</span>({ <span class=\"hljs-attr\">subsets</span>: [<span class=\"hljs-string\">\"latin\"</span>] });\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">metadata</span>: <span class=\"hljs-title class_\">Metadata</span> = {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\"Create Next App\"</span>,\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">\"Generated by create next app\"</span>,\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RootLayout</span>(<span class=\"hljs-params\">{\n  children,\n}: Readonly&#x3C;{\n  children: React.ReactNode,\n}></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">link</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{inter.className}</span>></span>{children}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></span>\n  );\n}\n</code></pre>\n<p>OR</p>\n<p>src/pages/globals.css</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"~boxicons/css/boxicons.min.css\"</span>;\n# <span class=\"hljs-variable constant_\">OR</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title function_\">url</span>(<span class=\"hljs-string\">\"boxicons/css/boxicons.min.css\"</span>);\n</code></pre>\n<h2>5. 아이콘 컴포넌트 생성</h2>\n<p>애플리케이션에 다양한 \"boxicons\"를 가져올 수 있는 아이콘 컴포넌트를 생성하세요. 이를 위해 \"src\" 디렉터리에 \"components\"라는 폴더를 만들고 그 안에 \"Icon.tsx\" 파일을 만드세요.</p>\n<p>src/components/Icon.tsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IconName</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"boxicons\"</span>;\n\ninterface <span class=\"hljs-title class_\">IconProps</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-title class_\">IconName</span>;\n  size?: string;\n  color?: string;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Icon</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&#x3C;<span class=\"hljs-title class_\">IconProps</span>> = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, size = <span class=\"hljs-string\">\"24px\"</span>, color = <span class=\"hljs-string\">\"\"</span> }</span>) =></span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">bx</span> ${<span class=\"hljs-attr\">name</span>}`} <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">fontSize:</span> <span class=\"hljs-attr\">size</span>, <span class=\"hljs-attr\">color</span> }} /></span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Icon</span>;\n</code></pre>\n<p><code>name</code> 속성은 표시할 아이콘을 변경하는 데 사용됩니다. 사용할 수 있는 모든 아이콘을 확인하려면 boxicons 웹 사이트를 확인하십시오. <code>size</code> 및 <code>color</code> 속성은 각각 아이콘의 크기 및 색상을 변경하는 데 사용됩니다.</p>\n<p>컴포넌트 디렉토리의 내용을 내보내는 \"index.ts\" 파일을 만듭니다. 이는 가져오기를 \"깔끔하게\" 유지하기 위한 것이며, 이 단계를 건너 뛰어도 괜찮습니다.</p>\n<p>src/components/index.ts</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Icon</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Icon\"</span>;\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Icon</span> };\n</code></pre>\n<h2>6. Icon 사용법</h2>\n<p>프로젝트 전반에 걸쳐 사용하기 위해 components 디렉토리에서 Icon 컴포넌트를 import합니다. 아래는 예시입니다:</p>\n<p>src/pages/pages.tsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Icon</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/components\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Home</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex min-h-screen flex-col items-center justify-center py-24 gap-3\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"bx-run\"</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"108px\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"text-6xl\"</span>></span>함께 떠나요<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex mt-4 gap-3\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"bx-rocket\"</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"64px\"</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"bx-rocket\"</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"64px\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n  );\n}\n</code></pre>\n<p>개발 서버를 실행하여 아이콘이 표시되는지 확인해 보세요.</p>\n<pre><code class=\"hljs language-js\">npm run dev\n</code></pre>\n<p>Violaaa 🚀</p>\n<p><img src=\"/assets/img/2024-05-12-BoxiconsReactNextjsTypeScriptIntegration_2.png\" alt=\"image\"></p>\n<p>이 프로젝트의 소스 코드가 포함된 GitHub 저장소 링크입니다:</p>\n<p><a href=\"https://github.com/Quarcoo-arc/boxicons-nextjs-ts.git\" rel=\"nofollow\" target=\"_blank\">https://github.com/Quarcoo-arc/boxicons-nextjs-ts.git</a></p>\n<h1>React</h1>\n<p>React와 TypeScript 프로젝트에 boxicons를 통합하는 것은 Next.js와 TypeScript 프로젝트에 통합하는 것과 유사합니다. 그러나 몇 가지 차이가 있습니다. 이를 아래에서 강조했습니다.</p>\n<h2>1. 프로젝트 설정</h2>\n<p>React 프로젝트를 설정하는 가장 쉬운 방법은 create-react-app 또는 Vite를 사용하는 것입니다. 저는 Vite를 선호합니다. 왜냐하면 이름이 시사하는 대로 빠르기 때문입니다. Vite는 \"신속\"을 뜻하는 프랑스어 단어이며 /vit/으로 발음합니다. 충분히 어휘적인 얘기는 여기까지 하고 아이콘들을 표시해봅시다 🚀.</p>\n<p>다음 명령어를 실행하여 Vite를 사용한 React + TypeScript 프로젝트를 시작하세요:</p>\n<pre><code class=\"hljs language-js\">npm create vite@latest\n</code></pre>\n<p>프로젝트 이름 (boxicons-react-ts), 프레임워크 (React), 그리고 변형 (TypeScript)을 옵션에 설정하세요. 프로젝트 디렉토리로 이동하고 애플리케이션 종속성을 설치하세요.</p>\n<pre><code class=\"hljs language-js\">cd boxicons-react-ts\nnpm install\n</code></pre>\n<p>위 명령들을 실행하면 다음과 같은 폴더 구조를 갖는 프로젝트가 생성됩니다.</p>\n<p><img src=\"/assets/img/2024-05-12-BoxiconsReactNextjsTypeScriptIntegration_3.png\" alt=\"폴더 구조\"></p>\n<h2>2. 종속성 설치</h2>\n<p>boxicons를 설치하세요. Next.JS 부분의 두 번째 섹션에 설명된 대로 진행하시면 됩니다.</p>\n<h2>3. 유형 정의</h2>\n<p>React 및 Next.js에 대한 유형 정의 파일을 생성하는 방법은 동일합니다.</p>\n<h2>4. 스타일시트 가져오기</h2>\n<p>Next.js와 마찬가지로 React에서 boxicons 스타일시트를 가져오는 두 가지 옵션이 있습니다; head 태그 내부에 링크 태그를 사용하거나 CSS를 가져오는 것입니다. 차이점은 src/pages/layout.tsx가 아닌 프로젝트의 루트 디렉토리의 index.html 파일에 링크 태그가 추가된다는 점입니다. 또한 CSS를 가져오는 위치는 src/pages/globals.css가 아닌 React 애플리케이션의 기본 주 스타일시트인 src/index.css에 위치합니다.</p>\n<p>한 가지 더 알려드릴게요. 이 CSS import를 사용하면 오류가 발생합니다:</p>\n<pre><code class=\"hljs language-js\"># 오류가 발생합니다 ❌\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"~boxicons/css/boxicons.min.css\"</span>;\n</code></pre>\n<p>이것을 대신 사용하세요:</p>\n<pre><code class=\"hljs language-js\"># 이것을 대신 사용하세요 ✅\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title function_\">url</span>(<span class=\"hljs-string\">\"boxicons/css/boxicons.min.css\"</span>);\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-keyword\">@import</span> url(<span class=\"hljs-string\">\"https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css\"</span>);\n</code></pre>\n<h2>6. 아이콘 사용법</h2>\n<p>이제 아이콘 컴포넌트를 가져와 프로젝트 전반에 사용할 수 있습니다. 아래에서 확인할 수 있습니다.</p>\n<p>src/App.tsx</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./App.css\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Icon</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"bxl-typescript\"</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"36px\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"bx-plus\"</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"36px\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"bxl-react\"</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"36px\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>We go again<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"bx-rocket\"</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"36px\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"bx-rocket\"</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"36px\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>개발 서버를 실행해서 아이콘들을 확인해보세요.</p>\n<pre><code class=\"hljs language-js\">npm run dev\n</code></pre>\n<p><img src=\"/assets/img/2024-05-12-BoxiconsReactNextjsTypeScriptIntegration_4.png\" alt=\"아이콘 이미지\"></p>\n<p>이 프로젝트의 소스 코드가 포함된 GitHub 저장소 링크입니다:</p>\n<p>위의 링크를 통해, React/Next.js + TypeScript 프로젝트에서 boxicons를 사용할 준비가 끝났어요. TypeScript 프로젝트에서 typings이 제공되지 않는 JavaScript 패키지를 사용하는 방법도 비슷하게 따를 수 있어요.</p>\n</body>\n</html>\n"},"__N_SSG":true}