{"pageProps":{"posts":[{"title":"JavaScript로 API에서 데이터를 받아 카드 형태로 렌더링하는 방법","description":"","date":"2024-06-23 14:31","slug":"2024-06-23-HowtofetchdatafromanAPIandrenderitintocardsusingJavaScript","content":"\n\n<img src=\"/assets/img/2024-06-23-HowtofetchdatafromanAPIandrenderitintocardsusingJavaScript_0.png\" />\n\n안녕하세요! 제 첫 블로그 포스트에 오신 것을 환영합니다! 처음 프로젝트로 즐겨 보는 것을 만들고 접목하고 싶었습니다. 그것은 (위의 이미지에서 유추하지 못했다면) Rick and Morty입니다. 웹 개발에 진입하기 전에 API에 대해 들어본 적이 없었기 때문에 첫 프로젝트에서 사용하기로 선택했습니다. Rick and Morty를 시청하는 것을 즐기며 재미있게 느껴서 Rick and Morty API를 빠르게 구글 검색한 후 사용하기로 결정했습니다.\n\n이제 시작해 봅시다:\n\n먼저, JavaScript 파일(index.js)을 링크하기 위해 index.html을 가지고 있어야 합니다.<script> 태그를 사용하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n  <html lang=\"eng\">\n    <head>\n      <title>Rick and Morty Character Generator</title>\n     </head>\n     <body>\n       <div id=\"cards-container\">\n        </div> \n      <script src=\"index.js\" defer></script>\n     </body>\n  </html>\r\n```\n\n스크립트 태그는 body의 끝에 있으며 'defer' 속성이 있습니다. 이는 HTML이 파싱되고 JavaScript가 로드되기 전에 스크립트가 실행되도록 하기 위한 것입니다. 또한, 대신에 'defer' 속성 대신 index.js에서 \"DomContentLoaded\" 이벤트 리스너를 추가할 수도 있지만 무조건 body 태그 내에서 스크립트 태그를 사용하도록 주의해야 합니다. body 태그 안에는 id가 \"cards-container\"인 div 태그가 있습니다. 이는 카드를 생성할 때 사용될 것입니다.\n\n팁: API를 다룰 때는 문서를 살펴보는 것이 좋습니다. 보통 문서를 읽으면 어떤 데이터와 어떻게 액세스할 수 있는지 미리 확인할 수 있습니다.\n\nAPI를 가져오려면 올바른 구문을 사용해야 합니다. 이 프로젝트를 작업하기 전에 fetch를 소개받았지만 프로젝트에서 데이터를 가져오는 작업은 해본 적이 없었습니다. 데이터를 가져오는 다른 방법도 있지만 그것은 나중에 다시 다루도록 하겠습니다.\n\n<div class=\"content-ad\"></div>\n\nindex.js에 다음과 같이 작성되어 있어야 해요:\n\n구문:\n\n```js\nfetch('API_URL')\n.then(response => response.json())\n.then(data => console.log(data));\n```\n\n<img src=\"/assets/img/2024-06-23-HowtofetchdatafromanAPIandrenderitintocardsusingJavaScript_1.png\" />\n\n<div class=\"content-ad\"></div>\n\n릭 앤 모티 문서를 확인한 후, 우리는 필요한 모든 캐릭터를 가져오기 위해 \"/character\" 엔드포인트를 추가해야 한다는 것을 배웠어요. 위의 구문에서 한 가지 변경한 점은 '데이터' 대신 '캐릭터'를 사용하기로 결정한 것이에요. 이름을 지을 때 '데이터'를 사용하는 대신 '캐릭터'로 지었어요. 왜냐하면 우리가 가지고 오려고 하는 정확한 데이터가 '캐릭터'이기 때문이에요.\n\n팁: 무엇을 하기 전에 데이터를 console.log 해보는 것이 좋아요. 이것은 좋은 초보 실습이에요. 콘솔을 통해 작업할 API의 데이터를 볼 수 있기 때문에 어떻게 데이터를 가져올 수 있는지 정확히 파악할 수 있어요. 또한, API에 더 많은 속성이 있다면, 점 표기법을 사용해 접근할 수 있어요.\n\n\n<img src=\"/assets/img/2024-06-23-HowtofetchdatafromanAPIandrenderitintocardsusingJavaScript_2.png\" />\n\n\n우리가 console.log(characters)를 사용했기 때문에, 크롬 개발자 도구의 콘솔을 열면 API의 데이터를 볼 수 있어요 (Windows에서는 Ctrl Shift J 또는 Mac에서는 Ctrl Option J). \"info\"라는 객체와 \"results\"라는 배열이 있어요. 우리가 원하는 것은 \"results\" 배열에서 모든 캐릭터를 가져오는 것이에요. 이번에는 '캐릭터' 뒤에 '.results'를 추가할 거에요.\n\n<div class=\"content-ad\"></div>\n\n이제 이 캐릭터들의 경로를 알았습니다. \"characters.results\"입니다.\n\n카드를 생성하기 전에 index.html에서 cards-container div를 index.js로 가져와야 합니다. API를 가져올 때 캐릭터를 렌더링 할 곳이 되기 때문입니다. index.js에서 전역 변수를 만들고(어떤 함수 외부에서) DOM(Document Object Model)의 querySelector() 메서드를 사용하여 Id가 'cards-container'인 div를 가져와야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst cardsContainer = document.querySelector('#cards-container');\n```\n\n이제 다음 단계로 넘어가 보겠습니다. 콜백 함수를 만드는 것입니다.\n\n'characters' (데이터)를 인자로 사용하여 'renderCharacters'라는 함수를 생성할 것입니다. 이 함수 블록에서 우리는 characters로 시작하여 forEach() 메소드를 사용할 것입니다. 각 character마다 div 카드가 생성될 것입니다. 이 카드에는 캐릭터의 이미지, 이름, 종류, 캐릭터를 좋아하는 좋아요 버튼이 포함될 것입니다. 우리는 DOM의 createElement() 메소드를 사용하여 새로운 요소를 생성할 수 있고 각 새로 생성된 요소를 개별 변수로 선언할 수 있습니다.\n\n```js\nfunction renderCharacters(characters) {\n  characters.forEach(character => {\n    const div = document.createElement('div');\n    const image = document.createElement('img');\n    const name = document.createElement('h3');\n    const species = document.createElement('h3');\n    const like = document.createElement('button');\n```\n\n<div class=\"content-ad\"></div>\n\n다음으로는 CSS를 사용하여 스타일을 적용할 수 있도록 div, 이미지 및 좋아요 버튼에 class를 추가합니다. 이를 위해 요소 이름 뒤에 점 표기법을 사용하여 해당 요소에 사용할 이름을 할당해주면 됩니다.\n\n```js\ndiv.classList = 'card'\nimage.classList = 'card-img'\nlike.classList = 'empty'\n```\n\n선호하는 API에 따라 데이터를 가져오는 것이 가능합니다. Rick and Morty API의 경우 캐릭터의 이미지, 이름 및 종족이 제공되므로 해당 데이터를 가져오기 위해 점 표기법을 사용할 수 있습니다.\n\n```js\nimage.src = character.image\nname.innerText = `이름: ${character.name}`\nspecies.innerText = `종족: ${character.species}`\nlike.textContent = '좋아요'\n```\n\n<div class=\"content-ad\"></div>\n\n캐릭터 이미지를 얻기 위해서는 이미지 뒤에 'src' (소스의 약자)를 추가한 후 character.image에 할당해야 합니다. 이름과 종 요소에 대해서는 innerText와 역따옴표 (``)를 사용했습니다. 캐릭터의 이름과 종 옆에 텍스트를 표시하려면 이 작업이 필요합니다. 이를 위해 역따옴표와 보간 구문 (`$''`)을 사용합니다. 그렇지 않으면 'Name:'과 'Species:' 텍스트가 표시되지 않습니다. 또한, 좋아요 버튼에는 'like'의 textContent를 지정해줍니다.\n\n마지막으로, 이러한 요소들을 새롭게 생성한 div 요소에 추가한 다음 해당 div를 이전에 생성한 'cardsContainer' 전역 변수에 추가해야 합니다. 이 단계는 매우 중요합니다. 그렇지 않으면 새롭게 생성된 카드가 전혀 표시되지 않습니다. 이를 위해 appendChild() 메서드를 사용합니다. 우리는 이미지, 이름, 종, 그리고 좋아요 버튼을 개별적으로 div에 추가한 다음 그 div를 이제 카드가 존재할 'cardsContainer'에 추가합니다.\n\n팁: 요소를 추가한 순서가 페이지에 나타나는 순서입니다. 이 경우에는, 캐릭터 이미지가 먼저 나타나고 그 다음으로 이름 및 기타 정보가 나타나도록 하려고 합니다.\n\n<div class=\"content-ad\"></div>\n\n함수 전체를 다음과 같이 작성해 보세요:\n\n```js\nfunction renderCharacters(characters) {\n  characters.forEach(character => {\n    const div = document.createElement('div');\n    const image = document.createElement('img');\n    const name = document.createElement('h3');\n    const species = document.createElement('h3');\n    const like = document.createElement('button');\n    div.classList = 'card';\n    image.classList = 'card-img';\n    like.classList = 'empty';\n    image.src = character.image;\n    name.innerText = `이름: ${character.name}`;\n    species.innerText = `종: ${character.species}`;\n    like.textContent = '좋아요';\n    div.appendChild(image);\n    div.appendChild(name);\n    div.appendChild(species);\n    div.appendChild(like);\n    cardsContainer.appendChild(div);\n  });\n};\n```\n\n멋져요! 마지막 단계는 다시 fetch로 돌아가서 두 번째 'then()'에서 renderCharacters를 콜백으로 호출하는 것입니다. characters.results를 이용하여 캐릭터 배열에 접근하는 방법을 알고 있으므로 해당 매개변수로 추가해줍시다.\n\n<img src=\"/assets/img/2024-06-23-HowtofetchdatafromanAPIandrenderitintocardsusingJavaScript_5.png\" />\n\n<div class=\"content-ad\"></div>\n\n브라우저에서 index.html을 열어보면 이와 같은 모습을 볼 수 있을 거에요.\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*9bylXDqCvO_s_lbb9KQHGA.gif)\n\n이게 다에요! 이제 각 캐릭터에 대한 카드를 공식적으로 만들었어요. 이제 CSS를 사용하여 카드를 스타일링하고 원하는 대로 보이게 만들 수 있어요. 테두리를 추가하거나 가운데 정렬하거나 꾸밈을 줄 수 있어요. 더 멋지게 하려면 플렉스박스를 사용해보세요. 우리는 div card, image, like 버튼에 대한 클래스를 생성했으므로 CSS에서 규칙을 설정할 수 있을 거에요. 잘하고 있어요!","ogImage":{"url":"/assets/img/2024-06-23-HowtofetchdatafromanAPIandrenderitintocardsusingJavaScript_0.png"},"coverImage":"/assets/img/2024-06-23-HowtofetchdatafromanAPIandrenderitintocardsusingJavaScript_0.png","tag":["Tech"],"readingTime":6},{"title":"SEO 기초 이해하기 2024년 필수 가이드","description":"","date":"2024-06-23 14:29","slug":"2024-06-23-UnderstandingtheBasicsofSEO","content":"\n\n\n\n<img src=\"/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_0.png\" />\n\nSEO(Search Engine Optimization)은 Google과 같은 검색 엔진에서 웹 사이트의 가시성과 순위를 향상시키는 데 개발자에게 중요합니다. 모든 사이트가 강력한 SEO가 필요한 것은 아니지만, 최적화할 때의 시기와 방법을 이해하는 것이 중요합니다. 이 글에서는 SEO를 세 가지 주요 관점을 통해 탐구해 보겠습니다:\n\n- 사용자에 공감하기\n- 검색 엔진에 사이트를 전달하기\n- 제품에 집중하기\n\nSEO는 확실히 간단한 주제가 아니지만, 적어도 기본 이해를 가지고 코딩하는 동안 유의해야 한다고 믿습니다. 이 글을 통해 몇 가지 기본 주제를 전달할 수 있기를 희망합니다. 먼저, SEO가 정확히 무엇을 의미하고 무엇이 아닌지 살펴보는 것부터 시작해보겠습니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 목차\n\n- SEO란 무엇이며 무엇이 아닌가요?\n- 사용자와 공감하다\n- 사용자가 편안하게 느낄 수 있도록\n- 사용자를 만족시키다\n- 사이트를 검색 엔진에 전달하기\n- 메타 타이틀과 설명이란 무엇인가요?\n- 검색 의도\n- 제품에 초점을 맞추다\n- 올바른 경로 구성\n- 태그와 링크 리디렉션이 올바르게 사용되어야 함\n\n# SEO란 무엇이며 무엇이 아닌가요?\n\nSEO(Search Engine Optimization)는 주로 Google을 포함한 검색 엔진과 효과적으로 소통하도록 웹사이트를 최적화하는 것을 의미합니다. 검색어를 사용하여 웹사이트를 검색 엔진에 효과적으로 전달한다는 점으로 SEO를 단순화하는 오해가 있습니다. 하지만 검색 엔진은 그렇게 간단히 동작하지 않습니다. 사용자 검색을 평가하고 해당 검색어와 일치하는 콘텐츠를 제공하여 사용자 만족을 보장합니다. 따라서 단순히 올바른 키워드를 사용하여 클릭 수를 증가시키려는 것만으로는 효과적인 최적화가 이루어지지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n# 사용자와 공감하기\n\n개발자로서, 우리는 가장 활발한 웹 사용자 중 한 명이기 때문에 사용자 경험에 대한 독특한 시각을 갖게 됩니다. 생각해보세요 - 하루에 웹을 검색하거나 활용하는 횟수가 얼마나 되나요? 지금까지 웹을 검색하는 데 얼마나 많은 시간을 보냈나요? 평균 사용자보다 더 많다고 확신합니다. 그러니까 사용자를 이해하는 것은 정말 어렵지 않은 일일 것입니다. 왜냐하면 여러분 중 한 명이 가장 활발한 사용자이기 때문이죠.\n\n자신을 생각해보세요. 가장 많이 사용하는 사이트는 무엇인가요? 이들은 모두 특정한 공통점을 가지고 있을 것입니다: 당신의 요구에 부합하는 원본 콘텐츠, 정확한 결과를 제공하면서 불필요한 정보를 피하는 것, UI/UX 측면에서 사용하기 쉽고, 무엇보다도 당신의 요구를 충족시켜주는 것입니다. 사실, 이러한 각 특성은 SEO의 기반이 됩니다.\n\n# 사용자가 편안한 느낌을 받을 수 있도록 하세요\n\n<div class=\"content-ad\"></div>\n\n프론트엔드 개발자로서, 사용자 친화적인 디자인이나 구성 요소를 선택하는 것은 가장 어려운 작업 중 하나입니다. 종종 특정 동적 기능을 좋아해도 사용자들이 그것을 이해하기 어려울 수 있기 때문에 사용을 삼가곤 합니다. 이 시점에서, 사용자가 원하는 것을 쉽게 접근할 수 있도록 하는 것이 화려한 디자인보다 우선입니다. 또한, 복잡성과 피로는 사용자가 사이트에 머무르는 시간을 크게 줄일 수 있습니다. 사이트의 목적에 따라 이러한 고려 사항은 다양하지만, 마케터처럼 생각하고 고객이 최대한 편안하게 느끼도록 하는 것이 중요합니다.\n\n# 사용자 만족시키기\n\n사이트의 콘텐츠를 중요시하고 SEO 친화적으로 만드는 데 타협하지 마세요. 이 사항에 집중하는 것은 교통량을 크게 증가시키지는 않겠지만, 유인된 사용자를 보유하는 데 중요합니다. 컨텐츠와 일치하는 SEO 최적화를 구현하세요. 예를 들어, 단백질 파우더의 혜택에 대한 콘텐츠가 있지만 특정 브랜드를 선호하도록 프로모션하거나 존재하지 않는 혜택을 제안하는 (즉, 편향적인 정보를 제공하는) 방법으로 제시하면 사용자가 이를 느끼고 다른 사이트를 찾으려고 할 것입니다. 검색 엔진은 이를 고려합니다. 또한, 완전하거나 상세한 정보를 제공하지 못할 경우 사용자를 만족시킬 수 없습니다. 사용자의 요구를 충족시키세요.\n\n사용자를 이해하려면 스스로부터 시작하세요.\n\n<div class=\"content-ad\"></div>\n\n# 검색 엔진에 사이트를 알리세요\n\n자바스크립트는 유연성을 제공하지만 SEO 목적을 위해 자연 HTML 요소를 사용하는 것이 중요합니다. 일례로 자바스크립트로 경로 탐색을 처리할 수 있다고 해서 반드시 그렇게 해야하는 것은 아닙니다. 사이트 내부 링크는 검색 엔진이 페이지를 이해하는 데 가장 중요한 자원 중 하나입니다. HTML에서 의도한 대로 `a` 태그를 사용하세요. 검색 엔진은 자바스크립트 함수에서의 탐색을 인식할 수 없습니다.\n\n이와 유사하게 제목에 적합한 HTML 태그를 사용해보세요. CSS로 스타일링할 수 있는 div, span 또는 p 태그에 큰 글꼴 크기를 사용하는 것은 h1 태그를 사용할 때 그 의미를 놓치는 것입니다. h1 태그는 텍스트가 제목임을 나타내고 강조되어야 한다는 이유로 HTML에 존재합니다. 자연스러운 방법을 사용하면 검색 엔진이 콘텐츠를 이해하기 쉬워집니다.\n\n요약하면, 가능한 한 HTML을 우선적으로 사용하고 이후 CSS, 필요할 때만 JavaScript를 사용하는 것이 좋습니다. 이는 성능을 향상시키는데 도움이 되며 SEO에서 중요한 이점을 제공합니다. 이를 간과해서는 안 됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 메타 타이틀과 설명이란 무엇인가요?\n\n메타 타이틀과 설명은 검색 엔진이 당신의 페이지의 목적과 콘텐츠를 이해하고 사용자 검색에 따라 강조하는데 도움이 되는 간단한 설명입니다. 특정 길이 제한은 없지만 불필요한 단어를 사용하는 것을 피해야 하며, 그 내용에 따라 달라져야 합니다. 예를 들어, 여성 트랙수트 모델을 소개하는 페이지의 경우, \"의류\"나 \"여성 패션\"과 같이 일반적인 제목이 아니라 페이지와 직접적으로 관련된 제목을 사용해야 합니다.\n\n반면에 설명은 페이지에 대한 더 자세한 정보를 제공하고, 필요없는 세부 사항을 피하면서 콘텐츠와 관련된 정확한 정보를 포함해야 합니다. 구글에서 스니펫으로 표시될 수 있는데, 이때 텍스트에는 검색 페이지에서 사용자가 볼 수 있는 한도가 있습니다.\n\n메타 타이틀과 설명은 각 페이지마다 고유해야 하며, 서로 다른 언어 옵션이 있는 경우 해당 언어에 따라 달라져야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 검색 의도\n\n검색 의도는 사용자가 제공하는 콘텐츠에 도달하기 위해 사용하는 단어 및 문장의 집합입니다. 검색 의도를 맞추거나 가장 일반적인 검색어를 포함시키기 위해 단어를 사용하되 사용자를 만족시키는 데만 집중하지 않는다면 중요합니다. 키워드로 가득 채운 스니펫이나 콘텐츠를 채우는 것은 바라는 마지막 일이 될 수 있습니다. 왜냐하면 이것은 검색 엔진 스팸 정책을 위반하고 오히려 눈에 띄기 보다는 오히려 뒤로 밀릴 수 있기 때문입니다. 사용자 만족도를 우선시하여 단순히 키워드에 맞추는 것이 아니라 사용자의 요구사항과 기대에 정말로 부합하는 콘텐츠를 제공하는 것이 중요합니다. 이 방법은 사용자 경험을 향상시키는 것뿐만 아니라 품질과 관련성을 우선시하는 지속 가능한 SEO 실천 방법과 더 잘 부합합니다. 콘텐츠를 키워드로 가득 채우지 않도록 주의하십시오.\n\n검색 의도를 파악하는 데 사용할 수 있는 도구들:\n\n- Google 자동완성\n- 키워드 연구 도구 (예: Semrush, Ahrefs)\n- Google Trends\n- Google Ads 키워드 플래너\n- Google 검색 콘솔\n- \"사용자가 또 질문한 것\" 섹션\n- 관련 검색 섹션\n\n<div class=\"content-ad\"></div>\n\n# 제품에 집중하세요\n\n제품을 출시할 때, 이 SEO 기본 사항은 더욱 중요해집니다. 이 단계에서는 개발자로서 주의를 기울여야 할 점들을 논의해 보겠습니다. 가능한 한 많은 올바른 및 부정확한 예시를 들어 설명해 드리겠습니다.\n\n# 올바른 경로 구성\n\n<div class=\"content-ad\"></div>\n\n적절한 라우트 구성은 검색 엔진이 페이지를 효과적으로 크롤할 수 있게 하고 콘텐츠가 올바른 사용자에게 도달할 수 있도록 하는 데 중요합니다.\n\n- 페이지의 이름을 해당 콘텐츠에 맞게 지정하세요.\n\n![UnderstandingtheBasicsofSEO_1.png](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_1.png)\n\n- 가능한 한 지나치게 동적인 제품 ID 사용을 피하세요. 페이지나 제품에 명확하고 이해하기 쉬운 URL이 가장 좋습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이해하는 것은 SEO의 기초](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_2.png)\n\n- 당신의 경로는 UTF-8과 호환되는 문자를 사용해야 합니다. 다른 알파벳을 사용 중이라면 해당 알파벳에 적합한 UTF-8 문자를 사용해야 합니다.\n\n중국어 UTF-8 문자\n\n![이해하는 것은 SEO의 기초](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_3.png)\n\n\n<div class=\"content-ad\"></div>\n\n- 복합 단어를 사용하지 않고 적절한 구분자를 사용해주세요.\n\n![이미지](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_4.png)\n\n- 국가별 도메인 확장자를 사용하고 언어를 구별해주세요.\n\n![이미지](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_5.png)\n\n<div class=\"content-ad\"></div>\n\n# `a` 태그의 적절한 사용 및 링크 리다이렉션\n\n이전에 언급한 대로, 검색 엔진이 당신의 페이지를 색인화하고 인식하는 가장 중요한 방법 중 하나는 내부 링크를 사용하는 것입니다. 다음 요소들이 당신의 페이지의 색인화에 영향을 줄 수 있습니다:\n\n- 검색 엔진 스팸 정책\n- 검색 엔진이 작성된 코드와 미디어 파일에 접근할 수 없음\n\n<div class=\"content-ad\"></div>\n\n• 로그인 요구 조건과 같은 조건이 존재하는지 확인\n\n• 적절한 경로 구조를 만들지 못하는 경우\n\n• 크롤링할 수 없는 미디어 파일 유형을 사용하는 경우\n\n이 모든 지침을 따르고 적절한 `a` 태그를 사용한다면, 페이지가 크롤링될 수 있고 적절한 스니펫이 포함된 검색 결과에 나타날 수 있습니다. 이제 `a` 태그의 적절한 사용법을 살펴봅시다.\n\n<div class=\"content-ad\"></div>\n\n\n![Image 1](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_6.png)\n\nUsing redirects in this way or within functions can reduce crawlability and decrease the likelihood of search engines understanding your page.\n\n![Image 2](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_7.png)\n\nUsing appropriate text within the `a` tag is crucial for SEO and user experience. Here are some guidelines and examples:\n\n\n<div class=\"content-ad\"></div>\n\n\n![Understanding the Basics of SEO 8](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_8.png)\n\n![Understanding the Basics of SEO 9](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_9.png)\n\nUnfortunately, the following usages are very common and familiar. However, they are quite incorrect from an SEO perspective, and if you need your page to be crawled, these are mistakes you should never make.\n\n![Understanding the Basics of SEO 10](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_10.png)\n\n\n<div class=\"content-ad\"></div>\n\n또 다른 중요한 측면은 `a` 태그 내의 콘텐츠가 가능한 한 쉽게 크롤링되도록 하는 것입니다. `a` 태그는 CSS로 쉽게 스타일을 지정할 수 있으므로 div나 span과 같은 구성 요소를 내부에 넣지 않도록 해야 합니다. 이미지나 비디오와 같은 태그를 사용해야 하는 경우에는 검색 엔진이 크롤할 수 있는 형식으로 제공하고 SEO 목적에 맞게 필요한 alt 정보를 제공해야 합니다.\n\n![UnderstandingtheBasicsofSEO_11](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_11.png)\n\n검색 엔진이 올바른 미디어 alt 태그를 사용하여 콘텐츠를 이해하도록 해야 합니다. 미디어 콘텐츠를 올바르게 활용하면 SEO 강점을 살릴 수 있습니다. Alt 설명은 콘텐츠의 내용과 관련성을 명확히 나타내야 합니다. 또한, 미디어 태그와 관련된 텍스트, 제목, 그리고 비슷한 콘텐츠를 부모 요소에 포함하거나 나란히 배치하면 이 관계를 더욱 강화할 수 있습니다. 올바른 alt 태그 사용 예시를 살펴보겠습니다.\n\n![UnderstandingtheBasicsofSEO_12](/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_12.png)\n\n<div class=\"content-ad\"></div>\n\n모든 정보를 고려할 때, 우리가 도출한 결론은 먼저 정확하고 적절하며 명확하며 독창적인 콘텐츠를 초기에 제작하고 사용자를 항상 우선시하는 것이 중요하다는 것입니다. 검색 엔진도 사용자를 우선시하기 때문입니다. 콘텐츠를 검색 엔진을 우선시하거나 최신 트렌드 때문에 관련 없는 SEO 방법을 사용하면 사용자에게 먼저 알려질 것이며, 아마도 검색 엔진으로부터 원하는 성과를 얻지 못할 것입니다. 이 시점에서 해야 할 일은 콘텐츠를 처음부터 신뢰하고 검색 엔진이 쉽게 이해할 수 있도록 최적화하는 것입니다.\n\n더 자세한 정보를 위해, 개발자 블로그와 검색 엔진의 공식 문서를 탐험하는 것을 강력히 추천합니다. 이 기사는 SEO에 대한 기본적인 이해를 제공하는 것을 목표로 하며, 계속 배우고 최신 방법을 습득하는 것을 장려합니다.","ogImage":{"url":"/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_0.png"},"coverImage":"/assets/img/2024-06-23-UnderstandingtheBasicsofSEO_0.png","tag":["Tech"],"readingTime":8},{"title":"JavaScript windowprint로 인쇄할 때 페이지가 잘리는 문제 해결 방법","description":"","date":"2024-06-23 14:27","slug":"2024-06-23-JavaScriptwindowprintcutsoffpagewhenprinting","content":"\n\n\n![Printing Issue](/assets/img/2024-06-23-JavaScriptwindowprintcutsoffpagewhenprinting_0.png)\n\n현재 페이지를 하드 복사본에 인쇄하는 window.print() 함수를 사용합니다. 그러나 스크롤했거나 문제가 발생한 경우 인쇄할 때 창의 일부가 잘릴 수 있습니다. 이는 함수가 페이지 맨 위에 있다고 가정하기 때문입니다. 이 문제를 해결하려면 몇 가지 단계를 거쳐야 합니다.\n\n첫째, 사용자가 페이지를 인쇄하려면 버튼을 클릭할 때 JavaScript 이벤트인 \"beforeprint\"를 사용하여 페이지 맨 위로 스크롤할 수 있습니다. 버튼을 클릭할 때 스크롤 위치를 설정해야 하며, 사용자가 다시 아래로 스크롤하길 원하지 않을 수 있습니다.\n\n```js\nlet scrollY = 0\n\nbtn.addEventListener('click', () => {\n  scrollY = window.scrollY\n  window.print()\n})\n```\n\n<div class=\"content-ad\"></div>\n\n그럼 사용자가 페이지 맨 위로 스크롤하도록 이전 인쇄 이벤트를 청취하세요.\n\n```js\nwindow.addEventListener(\"beforeprint\", (e) => {\n  scrollTo(0, 0)\n})\n```\n\n마지막으로 인쇄 후에는 scrollY 변수를 사용하여 사용자를 처음에 있던 위치로 스크롤하십시오.\n\n```js\nwindow.addEventListener(\"afterprint\", (e) => {\n  scrollTo(0, scrollY)\n})\n```\n\n<div class=\"content-ad\"></div>\n\n이제 모든 것이 예상대로 원활하게 작동해야 합니다. 읽어 주셔서 감사합니다. 이 블로그가 도움이 되었다면, 자주 유용한 내용을 게시하고 있으니 Medium에서 저를 팔로우하여 개발 지식을 향상시키세요.","ogImage":{"url":"/assets/img/2024-06-23-JavaScriptwindowprintcutsoffpagewhenprinting_0.png"},"coverImage":"/assets/img/2024-06-23-JavaScriptwindowprintcutsoffpagewhenprinting_0.png","tag":["Tech"],"readingTime":1},{"title":"HTML과 CSS로 간단한 싱글 페이지 웹사이트 만드는 방법","description":"","date":"2024-06-23 14:26","slug":"2024-06-23-CreateaSimpleSinglePageWebsiteUsingHTMLandCSS","content":"\n\n## HTML과 CSS를 사용한 간단한 웹사이트 디자인\n\n![이미지](/assets/img/2024-06-23-CreateaSimpleSinglePageWebsiteUsingHTMLandCSS_0.png)\n\n웹 개발자가 되기 위해서는 먼저 HTML과 CSS를 배워야 합니다. 하지만, HTML과 CSS를 완전히 배울 수 없습니다. 당신이 할 수 있는 것은 기본 구문을 배우고 과제를 수행하여 시험에 통과하는 것뿐입니다. 진정한 경험과 지식을 얻는 것은 현장에서 웹사이트를 디자인할 때입니다. 웹 개발에 초보이거나 HTML과 CSS와 관련된 과제를 해결해야 하는 경우, 이 글을 따라가보세요. 5~10분 안에 단일 페이지 웹사이트를 만들 수 있습니다. 지식 습득을 위해 모든 태그와 다른 내용을 설명해 두었습니다.\n\n# 필수 준비사항\n\n<div class=\"content-ad\"></div>\n\n- VS 코드\n\nVisual Studio Code은 내가 선호하는 통합 개발 환경입니다. 파일을 편집하는 데에는 다른 IDE를 사용할 수도 있습니다. 또는 여기서 VS 코드 편집기를 다운로드할 수도 있습니다.\n\n- VS 코드에 Live Server 확장 프로그램을 설치하세요.\n\n브라우저에서 변경 사항을 확인하고 실행하기 위해, Live Server를 VS 코드에 설치했습니다. 이제 웹 페이지를 개발할 때 변경 사항을 한 번의 클릭으로 확인할 수 있습니다. 또는 선호하는 다른 방법으로 파일을 실행할 수도 있습니다. Live Server를 설치하려면 VSCode를 열고 ctrl + P를 입력하여 ext install ritwickdey.liveserver를 입력하고 엔터를 누르면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n그럼 구현 방법을 살펴보겠습니다. 아래 단계를 따라야 합니다.\n\n## 단계 01\n\n컴퓨터 어디에서나 genotechies라는 폴더를 만들고 에디터를 통해 해당 폴더를 엽니다. 해당 폴더 내부에 index.html 파일을 생성하세요.\n\n![이미지](/assets/img/2024-06-23-CreateaSimpleSinglePageWebsiteUsingHTMLandCSS_1.png)\n\n<div class=\"content-ad\"></div>\n\n- Live server를 사용하여 index.html 파일을 실행할 수 있어요. index.html 파일에 마우스 오른쪽 버튼을 클릭하고 Live Server로 열기 옵션을 선택해주세요. 그러면 즐겨 사용하는 브라우저에서 페이지가 열릴 거에요.\n\n![image](/assets/img/2024-06-23-CreateaSimpleSinglePageWebsiteUsingHTMLandCSS_2.png)\n\n# 단계 02\n\n이것은 HTML 페이지의 기본 템플릿이에요. 먼저 해당 내용을 index.html 파일로 복사했어요. 그래서 우리는 이 템플릿에 모든 다른 구성 요소들을 추가할 거에요.\n\n<div class=\"content-ad\"></div>\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>Page Title</title>\n</head>\n<body>\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n</body>\n</html>\n\n\n# Step 03: Add meta tags and edit the title in the head tag\n\nThe `meta` tag defines metadata about an HTML document. Metadata describes the data contained inside the web page.\n\n`meta` tags always go inside the `head` element and are typically used to specify the character set, keywords, page description, author of the document, and viewport settings.\n\n\n<div class=\"content-ad\"></div>\n\n```js\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>Genotechies Website Design</title>\n</head>\n```\n\n# 단계 04: 이미지 폴더 및 기타 파일 생성\n\nbody 태그를 편집하기 전에 동일한 디렉토리에 이미지 폴더와 style.css 파일을 생성해야 합니다. 필요할 때마다 이미지를 추가해야 합니다. 그리고 CSS 파일을 업데이트해야 합니다.\n\n# 단계 05: 본문 상단에 컨테이너 추가하기\n\n\n<div class=\"content-ad\"></div>\n\n먼저, 상단 컨테이너를 추가합니다. 로고, 검색 바, 이미지, 제목 및 소셜 아이콘을 포함했습니다.\n\n```js\n  <div class=\"container\">\n        <div class=\"logo\">\n            <img src=\"Images/logo.png\" alt=\"Programming PEN\">\n        </div>\n        <div class=\"sectionSearch\">\n            <div class=\"searchBox\">\n                <i class=\"fas fa-search\"></i>\n                <input type=\"search\" placeholder=\"검색\">\n            </div>\n        </div>\n        <div class=\"firstSectinImage\">\n            <img src=\"Images/photo01.jpg\" alt=\"\" srcset=\"\">\n        </div>\n        <div class=\"firstSectionHeading\">\n            <h1><span>여름</span> 특별행사</h1>\n            <h1 class=\"letterSpacing\"> 컬렉션 <span>할인혜택 포함</span></h1>\n            <button class=\"btnBuyNow\">지금 구매</button>\n        </div>\n        <div class=\"mediaIcons\">\n            <a href=\"#\"><i class=\"fab fa-facebook-f\"></i></a>\n            <a href=\"#\"><i class=\"fab fa-twitter\"></i></a>\n            <a href=\"#\"><i class=\"fab fa-instagram\"></i></a>\n            <a href=\"#\"><i class=\"fab fa-youtube\"></i></a>\n        </div>\n    </div>\n    <script src=\"https://kit.fontawesome.com/9e5a623fa6.js\" crossorigin=\"anonymous\"></script>\n```\n\n여기서 container, logo, sectionSearch, firstSectinImage, firstSectionHeading, letterSpacing, btnBuyNow 및 mediaIcons 클래스를 지정했습니다. 따라서 해당 클래스에 스타일을 적용하려면 해당 클래스 이름을 참조하십시오.\n\n```js\n* {\n  margin: 0;\n  padding: 0;\n  font-family: sans-serif;\n}\n.container {\n  width: 100%;\n  height: 100vh;\n}\n.logo {\n  position: absolute;\n  top: 50px;\n  left: 90px;\n}\n.sectionSearch {\n  position: fixed;\n  top: 50px;\n  right: 90px;\n  width: 170px;\n  height: 45px;\n  background-color: #fff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 10% 10% 10% 10% / 50% 50% 50% 50%;\n  box-shadow: 2px 2px 30px rgba(167, 158, 245, 0.2);\n  box-sizing: border-box;\n  z-index: 1;\n  border: 1px solid rgba(167, 158, 245, 0.1);\n}\n.searchBox input {\n  width: 90px;\n  height: 20px;\n  border: none;\n  outline: none;\n  background-color: transparent;\n  color: #1f1f1f;\n  font-size: 1rem;\n  padding: 0px 10px;\n}\nfirstSectinImage {\n  position: absolute;\n  left: 15%;\n  top: 50%;\n  transform: translate(-15%, -50%);\n}\nfirstSectinImage img {\n  height: 400px;\n}\nfirstSectionHeading {\n  position: absolute;\n  top: 50%;\n  left: 70%;\n  transform: translate(-40%, -50%);\n}\nfirstSectionHeading h1 {\n  font-family: roboto, arial, helvetica;\n  font-weight: bold;\n  margin: 0px;\n  line-height: 60px;\n  font-size: 2.4rem;\n  text-shadow: 2px 2px 10px rgba(0, 0, 0, 0.4);\n  color: #3d3d4a;\n  text-transform: uppercase;\n}\n.letterSpacing {\n  letter-spacing: 7px;\n}\n.firstSectionHeading span {\n  color: #5b53ff;\n}\n.btnBuyNow {\n  width: 150px;\n  height: 40px;\n  background-color: #2f2e41;\n  box-shadow: 2px 2px 30px rgba(0, 0, 0, 0.1);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 10% 10% 10% 10% / 50% 50% 50% 50%;\n  margin-top: 20px;\n  color: #fff;\n  font-family: Cambria, Cochin, Georgia, Times, \"Times New Roman\", serif;\n  font-weight: 600;\n  letter-spacing: 0.5px;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n  border: transparent !important;\n}\n.btnBuyNow:hover {\n  color: #fff;\n  background-color: #5b53ff;\n  transition: all ease 0.5s;\n}\nmediaIcons {\n  position: fixed;\n  left: 30px;\n  top: 50%;\n  transform: translateY(-50%);\n  border-radius: 20px;\n  background-color: #fff;\n  box-shadow: 2px 2px 30px rgba(0, 0, 0, 0.2);\n  padding: 1px 2px;\n  z-index: 1;\n}\nmediaIcons a {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 20px 15px;\n  text-decoration: none;\n}\nmediaIcons a i {\n  color: rgba(39, 39, 39, 0.8);\n}\nmediaIcons a:hover .fa-facebook-f {\n  color: #5078cf;\n}\nmediaIcons a:hover .fa-twitter {\n  color: #00acee;\n}\nmediaIcons a:hover .fa-instagram {\n  color: #fd9217;\n}\nmediaIcons a:hover .fa-youtube {\n  color: #ff0000;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n표 태그를 마크다운 형식으로 변경했어요.\n\n<img src=\"/assets/img/2024-06-23-CreateaSimpleSinglePageWebsiteUsingHTMLandCSS_3.png\" />\n\n# 단계 05: 제품 섹션 추가\n\n`section` 태그는 문서 내의 섹션을 정의합니다. 여기서 몇 가지 섹션을 추가했어요. 먼저, 제품 섹션입니다.\n\n<div class=\"content-ad\"></div>\n\n\n# 제품 섹션\r\n이곳은 새로운 제품 컬렉션을 소개하는 곳입니다.\r\n\r\n- 베이비 걸 드레스\r\n- 남성 블레이저 자켓\r\n- 남성 소프트 플란넬 셔츠\r\n- 여성 코트 테니스화\r\n- 여성 스탠다드 셔츠 자켓\r\n- 남성 패션 시계\r\n\r\n각 제품은 각각의 가격과 함께 카트에 담을 수 있는 링크가 제공됩니다.\r\n\r\n디자인된 CSS 스타일은 각 클래스 이름을 참조하도록 정의되어 있습니다.\r\n\r\n이미지는 마크다운 형식에 맞게 추가되어 있습니다.\r\n\r\n자세한 내용은 이미지를 참조해주세요.\r\n\n\n<div class=\"content-ad\"></div>\n\n# 단계 05: 어바웃 섹션 추가\n\n비즈니스/회사에 대한 섹션을 추가하는 것이 중요합니다. 따라서 몇 가지 세부 사항을 언급한 다음 섹션을 추가했습니다.\n\n```js\n  <section class=\"aboutCompany\">\n      <div class=\"aboutBox\">\n          <h1>Genotechies Clothes Inc.</h1>\n          <h4>세계 모두를 위한 최신 패션 트렌드 <span>지금 구매하세요</span></h4>\n          <p>세계 곳곳에 위치한 수천 개의 매장을 보유한 글로브 최대 패션 체인은 남성, 여성 및 아동을 위한 다양한 옷과 액세서리를 제공하기 위해 헌신되어 있습니다...</p>\n      </div>\n      <div class=\"aboutBox\">\n          <img src=\"Images/photo02.jpg\">\n      </div>\n  </section>\n```\n\n```js\n.aboutCompany {\n    width: 85%;\n    display: flex;\n    margin: 50px auto;\n    justify-content: space-around;\n    align-items: center;\n    padding: 30px;\n    margin-bottom: 100px;\n  }\n  .aboutCompany span {\n    color: #5b53ff;\n  }\n  .aboutBox {\n    width: 40%;\n    font-family: \"Franklin Gothic Medium\", \"Arial Narrow\", Arial, sans-serif;\n  }\n  .aboutBox img {\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n  }\n  .aboutBox h1 {\n    color: #333333;\n    font-weight: 700;\n    font-size: 3rem;\n    margin: 0;\n  }\n  .aboutBox h4 {\n    color: #333333;\n    font-weight: 400;\n    font-size: 2rem;\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n  .aboutBox p {\n    font-size: 1rem;\n    color: #bdbdbd;\n    letter-spacing: 0.5px;\n  }\n```\n\n<div class=\"content-ad\"></div>\n\n\n![Screenshot](/assets/img/2024-06-23-CreateaSimpleSinglePageWebsiteUsingHTMLandCSS_5.png)\n\n# Step 06: 사용자 구독 섹션 추가\n\n사용자들은 제품 업데이트를 받기 위해 웹 사이트의 이메일 주소를 사용하여 구독할 수 있습니다.\n\n```js\n    <section class=\"newsletter\">\n        <h3>새 제품 업데이트 구독</h3>\n        <div class=\"inputEmail\">\n            <input type=\"email\" placeholder=\"이메일을 입력하세요\">\n            <button type=\"submit\" class=\"btnSend\">전송</button>\n        </div>\n    </section>\n```\n\n<div class=\"content-ad\"></div>\n\n```js\r\n.newsletter {\r\n  width: 100%;\r\n  height: 250px;\r\n  margin-bottom: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-bottom: 2px solid rgba(0, 0, 0, 0.03);\r\n}\r\n.newsletter h3 {\r\n  font-size: 2rem;\r\n  color: #565656;\r\n}\r\n.inputEmail {\r\n  width: 500px;\r\n  background-color: #fff;\r\n  border-radius: 7% 7% 7% 7% / 50% 50% 50% 50%;\r\n  height: 60px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 5px 20px;\r\n  box-shadow: 2px 5px 30px rgba(0, 0, 0, 0.1);\r\n  margin-top: 30px;\r\n}\r\n.inputEmail input {\r\n  width: 100%;\r\n  height: 40px;\r\n  border: none;\r\n  outline: none;\r\n  background-color: transparent;\r\n}\r\n.btnSend {\r\n  width: 120px;\r\n  height: 40px;\r\n  background-color: #202020;\r\n  border-radius: 20px;\r\n  color: #fff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  box-shadow: 2px 2px 30px rgba(0, 0, 0, 0.1);\r\n  font-size: 1rem;\r\n}\r\n.btnSend:hover {\r\n  background-color: #6b60ec;\r\n  transition: all ease 0.5s;\r\n}\r\n```\r\n\r\n![Image](/assets/img/2024-06-23-CreateaSimpleSinglePageWebsiteUsingHTMLandCSS_6.png)\r\n\r\n# Step 07: Footer section 추가하기\r\n\r\n`footer` 태그는 문서나 섹션의 하단에 푸터를 정의합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n    <!-- Footer Section-->\n    <footer class=\"footerSection\">\n        <div id=\"footerContanier\">\n\n            <div id=\"footerLogoLeft\">\n                GENOTECHIES CLOTHES\n            </div>\n            <div id=\"footerSocialIcon\">\n                <img src=\"Images/instagram-icon.png\">\n                <img src=\"Images/facebook-icon.png\">\n                <img src=\"Images/twitter-icon.png\">\n                <img src=\"Images/youtube-icon.png\">\n            </div>\n\n            <div id=\"footerCenter\">\n\n                <h3>Contact Us</h3>\n                <p><span>Tel:</span>061 765 342 122</p>\n                <p><span>E-Mail:</span>hello@genotechies.com</p>\n                <p><span>Web:</span>www.genotechies.com</p>\n                <p><span>Adress:</span>427, Brisbain Road, Canel Street, CA, US</p>\n\n            </div>\n\n            <div id=\"footerRight\">\n                <h3>About Us</h3>\n                <p>Globe biggest fashion chain with its thousands of outlets located world wide is dedicated to offer a wide array of Clothes and Accessories for Men, Women and Children</p>\n            </div>\n        </div>\n    </footer>\r\n```\n\n```js\r\nfooter {\n    width: 100%;\n    height: 200px;\n    background-color: #201f1f;\n    background-size: cover;\n    position: relative;\n}\n\n#footerContanier {\n    width: 1526px;\n    margin: auto;\n    position: relative;\n}\n\n#footerContanier #footerLogoLeft {\n    font-family: 'Pacifico', cursive;\n    font-size: 25px;\n    font-weight: bold;\n    color: #ffffff;\n    position: relative;\n    left: 60px;\n    display: inline-block;\n}\n\n#footerContanier #footerSocialIcon {\n    position: relative;\n    top: 100px;\n    left: -220px;\n    display: inline-block;\n}\n\n#footerContanier #footerSocialIcon img {\n    width: 50px;\n    height: 50px;\n    cursor: pointer;\n}\n\n#footerContanier #footerSocialIcon img:hover {\n    transform: scale(1.1);\n}\n\n#footerContanier #footerCenter {\n    width: 430px;\n    position: absolute;\n    top: -10px;\n    left: 545px;\n    color: #ffffff;\n    text-align: center;\n}\n\n#footerContanier #footerCenter h3,\n#footerRight h3 {\n    font-size: 40px;\n    font-family: 'Righteous';\n    border-bottom: 2px solid red;\n    text-align: center;\n    margin-bottom: 10px;\n    padding-bottom: 5px;\n}\n\n#footerRight input:focus {\n    border: 2px solid blue;\n}\n\n#footerContanier #footerCenter p {\n    line-height: 30px;\n}\n\n#footerContanier #footerCenter p span {\n    color: red;\n    font-weight: 400;\n    text-indent: 10px;\n    margin-right: 10px;\n}\n\n#footerContanier #footerRight {\n    width: 400px;\n    left: 1030px;\n    display: inline-block;\n    position: absolute;\n    top: -10px;\n    color: white;\n    text-align: center;\n}\n\n#footerContanier #footerRight p {\n    padding: 10px;\n    line-height: 30px;\n    padding-bottom: 20px;\n}\n\n#footerContanier #footerRight input {\n    margin-top: 10px;\n    width: 280px;\n    height: 28px;\n    text-align: center;\n    font-size: 15px;\n}\r\n```\n\n<img src=\"/assets/img/2024-06-23-CreateaSimpleSinglePageWebsiteUsingHTMLandCSS_7.png\" />\n\nGitHub에서 이 작은 웹사이트 디자인을 찾아보세요.\n\n<div class=\"content-ad\"></div>\n\n본 게시물이 유용하셨다면 아래의 👏 버튼을 눌러주세요! :)","ogImage":{"url":"/assets/img/2024-06-23-CreateaSimpleSinglePageWebsiteUsingHTMLandCSS_0.png"},"coverImage":"/assets/img/2024-06-23-CreateaSimpleSinglePageWebsiteUsingHTMLandCSS_0.png","tag":["Tech"],"readingTime":14},{"title":"CSS 배경 속성 9가지 완벽 정리","description":"","date":"2024-06-23 14:24","slug":"2024-06-23-Engineering9BackgroundpropertiesinCSS","content":"\n\n공학 (CSS)\n\n![Engineering9BackgroundpropertiesinCSS_0](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_0.png)\n\n# 어떤 속성들이 있을까요?\n\n- background-color\n- background-image\n- background-repeat\n- background-position\n- background-size\n- background-attachment\n- background-origin\n- background-clip\n- background (shorthand)\n\n<div class=\"content-ad\"></div>\n\n# 배경색:\n\n- 요소의 배경색을 설정합니다.\n\n![Engineering9BackgroundpropertiesinCSS_1](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_1.png)\n\n![Engineering9BackgroundpropertiesinCSS_2](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_2.png)\n\n<div class=\"content-ad\"></div>\n\n# 배경 이미지:\n\n- 요소의 배경 이미지를 설정합니다.\n\n![배경 이미지](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_3.png)\n\n- 이미지 링크는 어디서 가져왔나요?\n\n<div class=\"content-ad\"></div>\n\n\n![output](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_4.png)\n\n- 결과물은 무엇입니까?\n\n![output](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_5.png)\n\n- 반복된 부분이 있습니다. 다음 속성으로 넘어가 봅시다.\n\n\n<div class=\"content-ad\"></div>\n\n# background-repeat\n\n- 배경 이미지가 반복되는 방식을 지정합니다.\n- 다음 중 하나가 할당될 수 있습니다: background-repeat: repeat|repeat-x|repeat-y|no-repeat|space|round;\n- 몇 가지를 살펴봅시다.\n\n![image1](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_6.png)\n\n![image2](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_7.png)\n\n<div class=\"content-ad\"></div>\n\n\n![Engineering9BackgroundpropertiesinCSS_8](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_8.png)\n\n![Engineering9BackgroundpropertiesinCSS_9](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_9.png)\n\n![Engineering9BackgroundpropertiesinCSS_10](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_10.png)\n\n![Engineering9BackgroundpropertiesinCSS_11](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_11.png)\n\n\n<div class=\"content-ad\"></div>\n\n# 배경 위치\n\n- 배경 이미지의 초기 위치를 설정합니다.\n- 값:\n  - 키워드: top, bottom, left, right, center\n  - 길이 값: px, em 등\n  - 백분율 값: 50% 50% (수평 수직)\n\n![이미지1](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_12.png)\n\n![이미지2](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_13.png)\n\n<div class=\"content-ad\"></div>\n\n\n![Engineering9BackgroundpropertiesinCSS_14](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_14.png)\n\n![Engineering9BackgroundpropertiesinCSS_15](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_15.png)\n\n![Engineering9BackgroundpropertiesinCSS_16](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_16.png)\n\n![Engineering9BackgroundpropertiesinCSS_17](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_17.png)\n\n\n<div class=\"content-ad\"></div>\n\n# 배경 크기:\n\n- 배경 이미지의 크기를 지정합니다.\n\n```js\nbackground-size: 너비 높이;\n```\n\n- 값:\n  - auto (기본값): 원본 크기 유지\n  - cover: 이미지를 가능한 한 크게 확대하여 배경 영역을 완전히 덮음\n  - contain: 이미지를 너비와 높이가 콘텐츠 영역에 모두 맞을 수 있는 가장 큰 크기로 조절\n  - 길이 값: px, em 등\n  - 백분율 값: 100% 50% (너비 높이)\n  \n- 예시:\n\n<div class=\"content-ad\"></div>\n\n```js\n배경 크기: cover;\n배경 크기: 100px 50px;\n배경 크기: 50% 50%;\n```\n\n# 배경 첨부:\n\n- 배경 이미지가 고정되어 있는지 아니면 페이지의 나머지와 함께 스크롤되는지를 지정합니다.\n\n```js\n배경 첨부: scroll|fixed|local;\n```\n\n<div class=\"content-ad\"></div>\n\n- 값:\n  - scroll (기본값): 배경 이미지가 콘텐츠와 함께 스크롤됩니다.\n  - fixed: 배경 이미지가 뷰포트에 대해 고정됩니다.\n  - local: 배경 이미지가 요소 콘텐츠와 함께 스크롤됩니다.\n- 예시,\n\n```js\nbackground-attachment: fixed;\n```\n\n# background-origin:\n\n- 배경 이미지의 위치 지정 영역을 지정합니다.\n- 값:\n  - padding-box (기본값): 배경이 패딩 상자에 상대적으로 위치합니다.\n  - border-box: 배경이 테두리 상자에 상대적으로 위치합니다.\n  - content-box: 배경이 콘텐츠 상자에 상대적으로 위치합니다.\n- 문법 및 예시,\n\n<div class=\"content-ad\"></div>\n\n```js\nbackground-origin: padding-box|border-box|content-box;\n```\n\n# background-clip:\n\n- 배경의 그리기 영역을 지정합니다.\n- 예시\n\n<img src=\"/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_18.png\" />\n\n<div class=\"content-ad\"></div>\n\n\n![Engineering Background](/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_19.png)\n\n# background:\n\n- The background property is a shorthand for setting all background properties in one declaration.\n- background: color image position/size repeat attachment origin clip;\n- Example,\n\n```js\nbackground: #ff0000 url('background.jpg') no-repeat center/cover fixed content-box border-box;\n``` \n","ogImage":{"url":"/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_0.png"},"coverImage":"/assets/img/2024-06-23-Engineering9BackgroundpropertiesinCSS_0.png","tag":["Tech"],"readingTime":5},{"title":"div 안에 스크롤바 생성하는 방법","description":"","date":"2024-06-23 14:23","slug":"2024-06-23-Createascrollbarinsideadiv","content":"\n\n앵귤러에서는 CSS 스타일을 사용하여 div 내에 스크롤바를 만들 수 있어요. 다음은 그 방법이에요:\n\n- 컴포넌트 HTML 파일에 div 요소를 추가하세요:\n\n```js\n<div class=\"scrollable-div\">\n  <!-- 내용을 입력하세요 -->\n</div>\n```\n\n- 다음 CSS 스타일을 컴포넌트의 CSS 파일에 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\n.scrollable-div {\n  height: 200px; /* div의 높이를 고정값으로 설정합니다 */\n  overflow-y: scroll; /* 수직 스크롤바를 활성화합니다 */\n}\n```\n\nheight 속성은 div의 높이를 설정하며 overflow-y 속성은 수직 스크롤바를 활성화합니다. div 내부의 콘텐츠가 div의 높이를 초과하면 스크롤바가 자동으로 나타납니다.\n\n높이 값을 조정하여 요구 사항에 맞게 사용할 수 있습니다.\n\n또는 Angular Material의 mat-dialog-content 컴포넌트를 사용하여 콘텐츠가 컨테이너의 높이를 초과하는 경우 자동으로 스크롤바가 추가되도록 할 수도 있습니다. 다음은 예시입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<mat-dialog-content>\n  <!-- 여기에 내용을 입력하세요 -->\n</mat-dialog-content>\n```\n\nmat-dialog-content를 사용하려면 앱 모듈에서 MatDialogModule를 import해야 합니다.","ogImage":{"url":"/assets/img/2024-06-23-Createascrollbarinsideadiv_0.png"},"coverImage":"/assets/img/2024-06-23-Createascrollbarinsideadiv_0.png","tag":["Tech"],"readingTime":1},{"title":"당신의 웹사이트를 향상시키는 10가지 CSS 트릭","description":"","date":"2024-06-23 14:22","slug":"2024-06-23-10CSStricksthatEnhancethelookandfeelofyourwebsite","content":"\n\n`<img src=\"/assets/img/2024-06-23-10CSStricksthatEnhancethelookandfeelofyourwebsite_0.png\" />`\n\n이 웹사이트를 더 멋지고 풍부하게 만들어줄 수 있는 CSS 트릭 10가지를 코드 예제와 함께 소개합니다:\n\n# 1. 그라디언트 배경\n\n색상 간의 부드러운 전환을 추가하기 위해 그라디언트를 사용하세요.\n\n<div class=\"content-ad\"></div>\n\n\n```js\nbody {\n    background: linear-gradient(45deg, #ff6b6b, #f06595);\n}\n```\n\n# 2. Box Shadows\n\nAdd depth to your elements using box shadows\n\n```js\n.card {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 3. 호버 효과\n\n호버 효과로 상호작용을 향상시킵니다.\n\n```js\n.button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    transition: background-color 0.3s;\n}\n\n.button:hover {\n    background-color: #0056b3;\n}\n``` \n\n# 4. 반응형 타이포그래피\n\n<div class=\"content-ad\"></div>\n\n화면 크기에 반응하는 텍스트를 만듭니다.\n\n```js\nh1 {\n    font-size: calc(1.5rem + 1vw);\n}\n```\n\n# 5. Flexbox 중앙 정렬\n\nFlexbox를 사용하여 요소를 쉽게 가운데 정렬할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```css\n.container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n```\n\n# 6. 사용자 정의 커서\n\n사이트에 고유한 커서를 추가하세요.\n\n```css\n.custom-cursor {\n    cursor: url('커서이미지경로.png'), auto;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 7. CSS 그리드 레이아웃\n\nCSS 그리드를 사용하여 복잡한 레이아웃을 만드세요.\n\n```css\n.grid-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 20px;\n}\n\n.grid-item {\n    background-color: #f8f9fa;\n    padding: 20px;\n    border: 1px solid #dee2e6;\n}\n```\n\n# 8. 텍스트 그림자\n\n<div class=\"content-ad\"></div>\n\n그림자로 텍스트에 깊이와 강조를 추가합니다.\n\n```js\nh2 {\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n}\n```\n\n# 9. 키프레임 애니메이션\n\n키프레임으로 애니메이션을 생성하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n@keyframes bounce {\n    0%, 20%, 50%, 80%, 100% {\n        transform: translateY(0);\n    }\n    40% {\n        transform: translateY(-30px);\n    }\n    60% {\n        transform: translateY(-15px);\n    }\n}\n\n.bouncing-element {\n    animation: bounce 2s infinite;\n}\n```\n\n# 10. 클립 패스 모양\n\n클립 패스를 사용하여 재미있는 모양 만들기.\n\n```js\n.clip-shape {\n    width: 200px;\n    height: 200px;\n    background-color: #ff6b6b;\n    clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 CSS 트릭들은 당신의 웹사이트의 시각적 매력과 사용자 경험을 크게 향상시킬 수 있어요.\n\n감사합니다\n\n찬단","ogImage":{"url":"/assets/img/2024-06-23-10CSStricksthatEnhancethelookandfeelofyourwebsite_0.png"},"coverImage":"/assets/img/2024-06-23-10CSStricksthatEnhancethelookandfeelofyourwebsite_0.png","tag":["Tech"],"readingTime":3},{"title":"디자인 시스템에서 공간 활용하는 방법","description":"","date":"2024-06-23 14:20","slug":"2024-06-23-SpaceinDesignSystems","content":"\n\n## 기본 개념부터 공간을 의도적으로 적용하는 확장 컨셉으로\n\n시스템의 시각적 언어에 대해 오래 전부터 Color, Type 및 Icons를 \"Big 3\"로 참조해왔습니다. 모든 UI 구성 요소 — 버튼부터 시작 — 는 이들과 함께 구축됩니다. 하지만 뭔가를 잊고 있었습니다. 공간, 우리의 최종 터전.\n\n## 공간이 색에 미치는 영향\n\n공간은 어디에나 존재합니다. CSS는 패딩, 마진, 절대 위치 지정의 좌측, 우측, 상단 및 하단과 같은 속성을 사용하여 객체를 분리합니다. 부트스트랩, Salesforce Lightning, Foundation, 이전 프로젝트 및 현재 프로젝트라는 다섯 개의 라이브러리에서, 이런 공간 속성이 색, 크기, 타입, 레이아웃 및 기타 속성 그룹에 비해 얼마나 자주 나타나는지 비교해보았습니다.\n\n<div class=\"content-ad\"></div>\n\nCSS에서 이미 결정 시스템을 제공하고 있는 영향(예:0으로 지정된 값 또는 투명 또는 자동과 같은 예약 용어)을 제거한 후, 공간 규칙은 색상을 제외하고 다른 모든 것보다 더 많이 나타났습니다. 다른 것들은 전혀 아니었습니다. 글꼴, 크기, 레이아웃 등이 가까이에 있었던 적도 없었습니다. 우리 라이브러리에는 공간에 내재된 복잡성이 너무 많이 포함되어 있습니다. 그랬다고 하지도 않아도 제품에 어디에큐브의 공간적 복잡성은 너무 많이 포함되어 있습니다ㅠ\n\n## 공간은 우리를 나눕니다\n\n공간은 디자인과 개발 사이의 \"나는 이렇게 디자인했는데, 당신은 저렇게 만들었다\"라는 격차를 대표합니다. 우리는 오랫동안 디자인에 뿌려진 빨간색 가이드 스펙을 슬퍼했습니다. 그것은 절대로 그렇게 할 가치가 없는 것 같았습니다. 그럼에도 불구하고 그것들은 우리 제품의 완성된 재료인 HTML의 박스 모델에 의해 정보 없이 여전히 지속됩니다.\n\n비용이 막대합니다: 주석 달기, 번역하기, QA 중에 시각적으로 정제된 내용을 논의하기. 그 모든 작업... 여전히 충분하지 않은 것을 위해. 따라서 공간은 감정적인 대가를 냅니다.\n\n<div class=\"content-ad\"></div>\n\n## 공간 개념은 기본적이에요\n\n디자인, 코드 및 대화를 통해 더 의도적인 공간 개념을 연결할 수 있어요. 하지만 그렇게 하지 않아요. 우리는 그냥 티셔츠 사이즈를 사용하고 하루를 마무리해요. 더 나은 방법이 있어요. 우리는 미래적 공간의 명확성을 향해 들이따, 눌렀다, 늘렸다, 쌓아가며 붉은 선이어터 붉은 얼굴의 분노를 대체할 수 있어요.\n\n그런 의미에서, 시스템 작업에 공간을 적용할 때 제가 경험한 기본 원리, 확장된 어휘 및 추가 경험을 소개해드릴게요.\n\n# 공간 기본 원리\n\n<div class=\"content-ad\"></div>\n\n## 그리드 ≠ 공간. 그리드는 컴포넌트이며, 공간을 활용합니다.\n\n그리드는 열, 거터, 외부 여백 및 반응형 뉴안스에 대한 공간 결정이 풍부합니다. 팀은 사용자가 쉽게 페이지를 만들 수 있도록 미리 그리드를 사용합니다. 유감스럽게도, 그것이 종종 공간 대화가 종료되는 시점입니다.\n\n그리드는 완전한 공간 시스템이 아닙니다. 그리드는 다른 모든 컴포넌트와 마찬가지로 공간을 활용하는 컴포넌트입니다. 그리드는 다른 느낌이 납니다. 보이지 않으며 빠르게 나오며 공간만 처리합니다. 그러나 공간은 그리드 이상입니다.\n\n결론: 그리드를 활용하여 공간 규칙을 도입하지만 거기서 멈추지 마십시오. 그리드의 여백, 거터 및 열 값은 전체 컴포넌트 라이브러리에 깊게 섞인 더 깊은 공간 개념과 일치시킵니다.\n\n<div class=\"content-ad\"></div>\n\n## 기억에 남는 기본 숫자 선택하기 & 기대치 설정하기\n\n팀은 다른 공간 값들을 기준으로 잡을 수 있는 기억에 남는 숫자를 선택합니다. 어떤 팀은 손가락으로 세는 방법에 따라 10진수를 선호합니다. 누군가는 2와 3의 도움이 되는 요인을 갖는 6진수를 사용하여 3, 4, 6, 8, 9, 12, 15, 16, 18, 21, 24, 32 등 다양한 숫자를 유연하게 사용하기도 했습니다. 너무 심각해지지 마세요!\n\n저는 지금까지 다양한 시스템들이 16을 사용하는 것을 보았습니다. 이는 기본 글꼴 크기로서 좋은 선택입니다. 이는 모든 화면 해상도(320, 768, 1024)의 배수이며, 시작점보다 크고(32, 64, ...) 시작점보다 작은 요인(8, 4, 2)을 제공합니다.\n\n요점: 기억에 남는 기본 숫자를 선택하여 공간 시스템의 범위를 설정하고 사용 방법에 대한 기대치를 제한하세요.\n\n<div class=\"content-ad\"></div>\n\n## 비선형적인 비율 조정 옵션\n\n기존의 기반을 확립한 후에도 팀은 무작위 단계로 빠질 수 있습니다(12, 14, 18, 22, 24, 28, 30, 32, …). 이를 방지하기 위해 다른 사람들은 각 단계가 일정한 증분인 선형 척도(4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, …)를 사용합니다. 나에게는 어느 결과든 예측하기 어렵게 사용되며, 너무 가까운 선택지를 제공합니다. 언제 24 또는 28을 사용해야 할지 모르겠어요.\n\n![이미지](/assets/img/2024-06-23-SpaceinDesignSystems_0.png)\n\n대안은 비선형적입니다. 선택지로는 황금 비율, 모듈러 척도 또는 각 단계를 두배씩 증가시킬 수 있는 비슷한 기하급수가 있습니다. 기본부터 시작하여 작은 중지점(16, 8, 4, 2)과 큰 중지점(16, 32, 64, 그리고... 여기서 마무리)으로 갈 것입니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Space in Design Systems](/assets/img/2024-06-23-SpaceinDesignSystems_1.png)\n\n**요약:** 기하 급수나 유사하게 비선형적인 것을 고려해보세요. 16과 32 사이에 24를 추가하는 압박을 가끔 느낄 수 있습니다. 그러나 제 경험상 그러한 순간들은 드물고 간혹 그 간단한 시스템을 깰 정도로 정당화되는 경우는 거의 없습니다.\n\n## 기억하기 쉽고 정확하게 재사용할 수 있도록 각 단계에 이름 지정하기\n\n저는 Gmail의 Compact, Cozy, Comfortable 스페이스 토글을 좋아합니다. 그래서 우리의 공간 시스템을 만들 때 나는 우리의 작업에서 그 레이블을 사용하는 것을 제안했습니다. 곧바로 팀원 한 명이 나를 도전했습니다: \"다른 단계를 뭐라고 부르면 좋을까?\" 제 정찬, 작고, 그리고 호화로운 옵션들은 통과하지 못했습니다.\n\n\n<div class=\"content-ad\"></div>\n\n![SpaceinDesignSystems_2](/assets/img/2024-06-23-SpaceinDesignSystems_2.png)\n\n우리가 항상 하는 것처럼, 티셔츠 사이즈 척도를 사용했어요. 중간 크기는 기본값에 해당하며, S, XS, L, XL 그리고 필요에 따라 XXS와 XXL도 다른 옵션입니다. 대부분의 라이브러리(Bootstrap, Lightning 등)에서도 이렇게 사용하고 있어요.\n\n중요한 점은 이름 공간 옵션을 간단하게 유지하여, 사람들이 기억하고 정확히 적용할 수 있는 언어를 만들어내는 것이에요. 더 구체적인 라벨을 사용하려고 하면, 동료가 \"작은 것, 중간 크기, 큰 것 중에서 선택해주세요.\" 라고 응답할 준비를 해야 해요.\n\n많은 라이브러리를 검토하고 많은 디자이너들과 이야기를 나눠봤어요. 기본 숫자와 명명된 척도에 대한 간단한 관례가 대화의 종착점인 곳이었어요. 이 몇 가지 옵션은 간단하지만, 여전히 공간을 사용하는 데 있어서 약간 무작위한 느낌이 들었어요. 그래서 더 필요했어요.\n\n<div class=\"content-ad\"></div>\n\n# 공간을 위한 어휘 확장\n\n우리의 최근 작업을 검토해 보면, 공간을 적용하는 명확한 의도는 많지 않습니다. 예를 들어, 제가 가장 좋아하는 컴포넌트인 카드를 살펴보겠습니다:\n\n![이미지](/assets/img/2024-06-23-SpaceinDesignSystems_3.png)\n\n프론트엔드 개발자로써, 저는 모든 요소 상자들을 시각화하여 요소를 서로 맞춰 보는 것을 상상합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-23-SpaceinDesignSystems_4.png)\n\n카드는 우리가 사용하는 여러 공간 개념을 유용하게 보여줍니다: 가장자리에서 콘텐츠를 삽입, 삽입 모양을 다양화, 항목을 인라인으로 간격 지정하고 구성 요소 내부 및 사이에 항목을 쌓는 방법.\n\n![이미지](/assets/img/2024-06-23-SpaceinDesignSystems_5.png)\n\n이 개념들 - 삽입, 삽입 압축, 삽입 늘이기, 쌓기, 인라인, 그리드 - 은 우리 라이브러리의 대부분의 CSS 규칙을 다룹니다: 패딩, 마진, 왼쪽, 오른쪽, 위, 아래. 또한 이러한 개념들은 각 원자 별로 독립적이며, 합성성을 향상시킵니다.\n\n\n<div class=\"content-ad\"></div>\n\n## Concept 1: (Square) Inset\n\n인셋은 벽에 걸린 사진의 매트처럼 모든 네 면에 들어가는 콘텐츠를 표시합니다. 이 사용법은 3개의 모듈과 블록 메시지 중간 느낌의 컴팩트한 피르, 혹은 넓은 푸터와 말머리 등 다양한 크기의 여러 컴포넌트들에서 퍼져 있습니다.\n\n<img src=\"/assets/img/2024-06-23-SpaceinDesignSystems_6.png\" />\n\n말머리 클릭을 하여 더 읽기! 안 눌러미세요!\n\n<div class=\"content-ad\"></div>\n\n\n![Screenshot](/assets/img/2024-06-23-SpaceinDesignSystems_7.png)\n\n## Concept 2: Squish Inset\n\nA squished inset reduces space top and bottom, in our case by 50%. While less common than its squared counterpart, a squish occurred frequently in elements (like a button) and cell-like containers like a data table or list item.\n\n![Screenshot](/assets/img/2024-06-23-SpaceinDesignSystems_8.png)\n\n\n<div class=\"content-ad\"></div>\n\n## 개념 3: 스트레치 인셋\n\n버튼이나 피랍처럼 압축되는 것과 대조적으로, 우리는 텍스트 상자, 텍스트 영역 및 기타 양식 요소들의 인셋을 수직으로 늘렸습니다.\n\n![이미지](/assets/img/2024-06-23-SpaceinDesignSystems_9.png)\n\n## 개념 4: 스택\n\n<div class=\"content-ad\"></div>\n\n수평 스크롤 UI에 대한 존경을 표합니다. 압도적인 대다수는 수직으로 스크롤합니다. 이것은 한 가지를 의미합니다: 우리는 여러 가지를 쌓습니다. 메시지를 헤딩 위에 데이터 테이블에 쌓습니다. 레일즈에서 모듈을 쌓습니다. 카드 안에 총 데이터, 항목 및 도구 모두를 그리드에 각각 쌓습니다. 참나, 무한 스크롤은 무한하게 쌓이는 것을 의미합니다! 우리는 쌓고 쌓고 쌓습니다.\n\n![이미지](/assets/img/2024-06-23-SpaceinDesignSystems_10.png)\n\n## 컨셉트 5: 인라인\n\n우리는 객체를 인라인으로 배열하기도 합니다. 흘러가는 것처럼 좌측 또는 우측에서 텍스트처럼 흘러가는 대로 포장합니다. 피맛으로, 태그, 경로, 그리고 더 많은 것과 같은 객체들은 독립적으로 서있을 수도 있고, 다른 객체들과 함께 쌓이고 섞일 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이미지 태그를 Markdown 형식으로 변경해보세요.\n\n\n![SpaceinDesignSystems](/assets/img/2024-06-23-SpaceinDesignSystems_11.png)\n\n## Concept 6: Grid\n\n아, 격자를 마지막에 남겨두자구요? 간격이 안정화되면서, 격자 여백과 거터를 다시 살펴보게 되고, 이 공간들을 마법같은 시작점과 다른 용도에 맞춰 정렬합니다.\n\n그래서, 카드 컴포넌트에 적용되는 경우, 스타일이 적용된 패딩과 여백은 다음과 같이 보일 수 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n# 배운 내용\n\n공간 개념을 사용하는 것은 새로운 것에 적응해야 한다는 것을 의미합니다. 제 팀에서는 가볍게 회의적인 태도를 가진 사람들이 새로운 모델을 받아들이기까지 하루가 걸렸습니다.\n\n## 시각적으로 공간 시스템 가르치기\n\n대부분의 협력자들은 공간을 볼 수 없습니다. 이것이 임의로 적용되는 이유 중 하나입니다. 그러나 이제 우리는 시스템을 가지고 있습니다: 각각이 제한된 옵션 범위를 제공하는 제한된 개념 수.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-23-SpaceinDesignSystems_12.png)\n\n요점: 골격 다이어그램이나 치트 시트를 사용하여 공간 개념을 가르치세요. 이러한 참고 자료를 활용하면 디자인과 코드를 통해 개념을 이해하고 적용하며 유지하는 속도가 빨라집니다.\n\n## 간단한 도우미 제공 및 사용 모니터링\n\n어리석은 짓은 하지 마세요. 이 여섯 가지 모델이 모든 문제를 해결하는 것은 아닙니다. 때로는 여전히 여기 저기 여백을 조정해야 합니다. 그러므로 더 일반적인 대안(예: $space-m)을 사용하여 더 의도적인 공간 옵션을 따르는 것이 타당합니다.\n\n\n<div class=\"content-ad\"></div>\n\n요약: 일반적인 옵션을 제공하되, 절약해서 사용하고 제품 팀이 사용할 것을 기대합니다. 비판 또는 풀 리퀘스트에 나타나면, 인셋 또는 스택과 같은 더 구체적인 개념을 팀원들에게 교육하세요.\n\n## 패딩이나 마진을 사용한 변수명 피하기\n\n더 복잡한 것을 소개할 때, 다른 사람들이 이해할 만한 것을 옹호하는 것은 정당합니다. 예를 들어, \"왜 변수명에 패딩과 마진을 사용할 수 없을까요?\" 이 경우, 패딩을 사용한 2개 이상의 공간 개념이 있고, 이러한 개념은 좌우 속성을 통해도 적용할 수 있습니다. 마진은 스택, 그리드 및 공간 인라인에 사용됩니다. 게다가, HTML을 사용하지 않는 비웹 플랫폼은 어떻게 할까요?\n\n요약: 속성 이름에서 개념을 분리하세요. 여러 개의 개념이 하나로 제한될 뿐만 아니라 특정 플랫폼에서만 재사용 가능합니다.\n\n<div class=\"content-ad\"></div>\n\n## 충돌을 체계적으로 해결하고 줄 간격 시스템\n\n간단한 안쪽 여백과 스택 여백 규칙이 오랫동안 알려진 공간 적대 요소와 충돌하였습니다: 줄 높이입니다. 이 상호작용은 공간을 예측할 수 없게 증가시켜, 간단한 안쪽 기본값(16px) 위와 아래에 픽셀이 추가되었습니다.\n\n![Space in Design Systems](/assets/img/2024-06-23-SpaceinDesignSystems_13.png)\n\n그러나 우리는 아이디어의 발전을 따라가며 (@kevinmpowell의 “의사 요소를 사용하여 공간을 음수 여백하자! 그러나 얼마나?”) 일부 수학을 활용했습니다(내 대학 학위를 활용할 수 있게!). 결과적으로, 글꼴 크기와 줄 높이를 결합한 믹스인 공식이 타입 간격을 줄이고 충돌하는 객체 위와 아래의 공간을 축소시키는 것이었습니다.\n\n<div class=\"content-ad\"></div>\n\n포기하지 마세요. 예외 때문에 체계적인 명확성을 방치하지 마세요. 문제를 해결해 보세요. 이러한 세세한 사항을 극복할 수 있다면, CSS요령을 사용하여도 단순한 개념을 전달할 수 있다는 것을 기억하세요.\n\n## 공간 개념 활용하여 밀도 조절하기\n\ninset, stack 및 grid와 같은 개념을 사용하여 밀도 조절 다이얼을 섬세하게 조절할 수 있습니다. 저장소에서 관심 있는 inset 및 stack을 찾아 확장하거나 재정의하여 디스플레이 밀도를 섬세하게 조정하세요.\n\n![SpaceinDesignSystems_14](/assets/img/2024-06-23-SpaceinDesignSystems_14.png)\n\n<div class=\"content-ad\"></div>\n\n요약: 약간 원시적인 옵션 세트로 심도를 조절할 수 있습니다. 이 옵션이 없으면 밀도 제어는 꿈일 뿐입니다. 그러나 이 옵션들이 있다면, 의도를 갖고 공간을 찾아 조정하고 조절할 수 있는 강력한 엔진을 점차적으로 구축할 수 있습니다. 이는 위험을 줄이고 클라이언트에게 좋은 의도를 갖고 디자인을 할 수 있게 해줍니다.\n\n디자인 시스템을 준비하려는가요? 제품 및 플레이어에 대해 논의를 진행하려면? EightShapes는 시스템 계획 워크숍을 진행하고 디자인 시스템에 대해 고객을 코칭합니다. 얘기 나눠볼까요?","ogImage":{"url":"/assets/img/2024-06-23-SpaceinDesignSystems_0.png"},"coverImage":"/assets/img/2024-06-23-SpaceinDesignSystems_0.png","tag":["Tech"],"readingTime":9},{"title":"완벽한 코드 블로그를 만드는 방법","description":"","date":"2024-06-23 14:18","slug":"2024-06-23-Howtocreatetheperfectcodeblog","content":"\n\n![Code Block Image](/assets/img/2024-06-23-Howtocreatetheperfectcodeblog_0.png)\n\n## 1. What is a code block\n\nA code block is a section of a website's content used to display the syntax of a programming language. It is commonly used in educational blogs, documentation, programming forums, and more. Having a functional and well-formatted code block is crucial for your website.\n\n## 2. Creating a basic code block\n\n<div class=\"content-ad\"></div>\n\n코드 블록을 만들려면 두 가지 HTML 태그 중 하나를 사용합니다. `code` 태그는 일반적으로 텍스트 편집기에서 볼 수 있는 스타일로 내용을 표시하는 데 사용됩니다. 이 스타일링은 주로 글꼴에서 확인할 수 있습니다. 글꼴은 IDE와 같은 글꼴 패밀리로 변경됩니다. 다른 태그인 `pre`는 텍스트를 그대로 표시하는 데 사용됩니다. HTML에서 텍스트는 단일 공백과 단일 줄 바꿈만 존재하도록 다듬지만 `pre` 태그를 사용하면 작성하는 동안 입력한 모든 공백과 줄 바꿈이 고려됩니다.\n\n이 코드 블록에서는 모던한 기능이 있는 코드 블록을 만들기 위해 `code`와 `pre` 태그를 모두 사용할 것입니다. 첫 번째 단계는 아래 코드를 사용하는 것입니다:\n\n```js\n<pre>\n  <code>\nfunction greetings() {\n  console.log(\"Hello World!\");\n}\n  </code>\n</pre>copy\n```\n\n위 코드에서 보듯이, 코드가 태그로 둘러싸여 있기 때문에 코드 태그에 있는 모든 것이 그대로 형식화되도록 pre 태그를 사용하고, 동시에 코드 태그를 사용하여 글꼴을 변경하고 웹 사이트를 의미적으로 만듭니다. 이 코드의 형식은 깨져 보일 수 있지만, 이것이 바로 pre 태그에 내용을 작성할 때 들여쓰기 없이 작성해야 하는 방식입니다. 코드 태그에서는 코드 블록이 작동하는지 테스트하는 데 도움이 되는 간단한 JavaScript 코드만 작성했습니다.\n\n<div class=\"content-ad\"></div>\n\n# 3. 문법 강조 기능 추가하기\n\n문법 강조 기능은 코드의 다른 부분의 색상을 변경하여 사용자가 코드의 구문을 쉽게 식별할 수 있도록 하는 것입니다. 문법 강조 기능에는 많은 규칙이 있으며 이 시스템을 직접 만드는 것은 도전이 될 수 있습니다(제가 블로그를 작성할 수도 있겠죠). 대신 구글에서 개발한 스택 오버플로 같은 웹사이트에서 사용되는 인기 있는 3rd party 라이브러리인 code-prettify를 사용할 것입니다. 사용법은 매우 간단합니다. 두 가지만 하면 됩니다. 첫 번째는 제공된 CDN을 사용하여 프로젝트에 포함하는 것입니다:\n\n```js\n<script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n```\n\n두 번째로 해야 할 일은 우리 코드 태그에 \"prettyprint\" 클래스를 지정하여 라이브러리가 문법 강조 기능을 적용할 위치를 알 수 있게 하는 것입니다. 사용할 클래스는 이미 문서에서 미리 정해져 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n```js\n<pre>\n  <code class=\"prettyprint\">\nfunction greetings() {\n  console.log(\"Hello World!\");\n}\n  </code>\n</pre>copy\n```\n\n우리의 코드에 모든 구문 강조 효과를 제공합니다.\n\n# 4. 복사 버튼 추가\n\n코드 블록에 일반적인 기능으로 사용자가 코드를 선택하지 않고도 쉽게 복사할 수 있는 방법을 제공하는 것이 좋습니다. 특히 대규모 코드 블록을 다룰 때 마우스로 코드를 모두 선택해야 하는 것은 귀찮을 수 있습니다. 복사 버튼을 만드는 것은 매우 간단합니다. 먼저 HTML에 버튼을 포함시켜야 합니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\r\n<pre>\n  <code class=\"prettyprint\">\nfunction greetings() {\n  console.log(\"Hello World!\");\n}\n  </code>\n  <button class=\"copy-btn\">Copy</button>\n</pre>copy\r\n```\n\n그런 다음 JavaScript를 사용하여 작업할 것입니다:\n\n```js\r\nconst btn = document.querySelector(\".copy-btn\")\nconst code = document.querySelector(\"code\")\n\nbtn.addEventListener(\"click\", () => {\n  navigator.clipboard.writeText(code.textContent)\n})copy\r\n```\n\n위의 코드에서 볼 수 있듯이, 방금 만든 버튼에 이벤트 리스너를 추가하고 `code`의 텍스트 콘텐트를 사용자 클립보드로 복사하는 JavaScript를 작성했습니다. navigator 객체를 사용하여 사용자가 실행 중인 시스템의 클립보드에 액세스합니다. inner-HTML 대신에 code의 텍스트 콘텐트를 사용하는 것에 유의하십시오. inner-HTML을 사용하면 하이라이트 라이브러리 code-prettify에서 생성된 추가 코드도 복사되기 때문입니다.\n\n<div class=\"content-ad\"></div>\n\n# 5. 일반적인 스타일링 추가하기\n\n기술적으로 모든 것이 작동하는 것을 확인했으니, 이제 스타일링을 추가할 시간입니다. 이 블로그는 스타일에 관한 것은 아니지만, 아래에서 사용하고 싶은 스타일을 알려드리겠습니다:\n\n```js\npre {\n  max-width: 560px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  padding: .5em 1em;\n  position: relative;\n}\n\nbutton {\n  font: inhreit;\n  font-size: 12px;\n  background: none;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  position: absolute;\n  top: .5rem;\n  right: 1rem;\n  cursor: pointer;\n}\n```\n\n위의 스타일을 공부하고 사용하며 원하는 대로 변경할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 블로그를 도움이 되었다면 새로운 블로그 포스트 알림을 받으려면 X(트위터)에서 저를 팔로우해보세요. 읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-06-23-Howtocreatetheperfectcodeblog_0.png"},"coverImage":"/assets/img/2024-06-23-Howtocreatetheperfectcodeblog_0.png","tag":["Tech"],"readingTime":4},{"title":"Tailwind Signals로 UI 강화하기 설정 및 예제","description":"","date":"2024-06-23 14:17","slug":"2024-06-23-SuperchargeYourUIwithTailwindSignalsSetupandExamples","content":"\n\n테일윈드 신호는 Tailwind CSS 클래스에 반응적이고 동적인 동작을 추가하는 환상적인 방법입니다. 상태 변경, 사용자 상호작용 또는 웹 애플리케이션의 다른 이벤트에 응답하여 더 활발하고 매력적인 사용자 경험을 제공할 수 있습니다.\n\n![이미지](/assets/img/2024-06-23-SuperchargeYourUIwithTailwindSignalsSetupandExamples_0.png)\n\n# 테일윈드 신호란?\n\n간단히 말해, 테일윈드 신호를 사용하면 클래스를 토글하고 요소를 애니메이션화하며 사용자 입력을 원활하게 처리할 수 있습니다. 이를 통해 작성해야 하는 JavaScript 양을 줄여주고, Tailwind CSS 작업 흐름에 새로운 동적 요소를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# Tailwind Signals 설정하기\n\n프로젝트에 Tailwind Signals를 설정해봅시다. 이미 Tailwind CSS를 사용 중이라면, 이 설정은 간단할 것입니다.\n\n## 단계 1: Tailwind CSS 설치\n\n아직 Tailwind CSS를 설치하지 않았다면, npm을 사용하여 설치해주세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install tailwindcss\n```\n\n그런 다음 tailwind.config.js 파일을 생성해주세요:\n\n```js\nnpx tailwindcss init\n```\n\n## 단계 2: Tailwind Signals 설치하기\n\n<div class=\"content-ad\"></div>\n\n다음으로 Tailwind Signals 패키지를 설치해보세요:\n\n```js\nnpm install tailwind-signals\n```\n\n## 단계 3: Tailwind Signals 구성\n\ntailwind.config.js 파일을 열어 Tailwind Signals 플러그인을 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nmodule.exports = {\n  // ... 기존 테일윈드 설정\n  plugins: [\n    require('tailwind-signals'),\n  ],\n};\n```\n\n이제 Tailwind Signals를 프로젝트에서 사용할 준비가 되었습니다.\n\n# Tailwind Signals 사용 방법: 예시\n\n## 예시 1: 클래스 전환하기\n\n<div class=\"content-ad\"></div>\n\n간단한 예제로 시작해 봅시다. 버튼 클릭에 따라 클래스를 토글하는 것을 보여드리겠습니다. div 요소의 표시 여부를 토글하는 버튼을 생성할 것입니다.\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>토글 예제</title>\n  <link href=\"/dist/output.css\" rel=\"stylesheet\">\n</head>\n<body class=\"p-6\">\n  <button\n    class=\"bg-blue-500 text-white p-2 rounded\"\n    data-signal=\"toggle\"\n    data-target=\"#toggleDiv\"\n    data-class=\"hidden\"\n  >\n    토글하기\n  </button>\n  \n  <div id=\"toggleDiv\" class=\"mt-4 p-4 bg-gray-100 hidden\">\n    이 div는 토글됩니다!\n  </div>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/tailwind-signals@latest\"></script>\n</body>\n</html>\n```\n\n이 예제에서는 버튼을 클릭하면 div 요소의 hidden 클래스가 토글되어 표시되거나 숨겨집니다.\n\n## 예제 2: 요소 애니메이션화\n\n<div class=\"content-ad\"></div>\n\n다음으로, 요소를 클릭할 때 애니메이션을 추가해 보겠습니다. 클릭하면 div 요소가 커졌다 줄어들게 애니메이션을 적용할 거에요.\n\n```js\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>애니메이션 예제</title>\n  <link href=\"/dist/output.css\" rel=\"stylesheet\">\n</head>\n<body class=\"p-6\">\n  <div\n    id=\"animateDiv\"\n    class=\"bg-red-500 w-32 h-32\"\n    data-signal=\"toggle\"\n    data-class=\"transform scale-125\"\n  >\n  </div>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/tailwind-signals@latest\"></script>\n</body>\n</html>\r\n```\n\n이제 div를 클릭하면 transform scale-125 클래스가 토글되어 크기가 애니메이션되게 됩니다.\n\n## 예제 3: Tailwind Signals를 사용한 반응형 상태\n\n<div class=\"content-ad\"></div>\n\n간단한 카운터를 만들어보겠습니다. 버튼을 클릭할 때마다 카운터가 증가합니다. 이를 통해 Tailwind Signals가 반응적 상태와 함께 어떻게 작동하는지 보여줄 거예요.\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Counter Example</title>\n  <link href=\"/dist/output.css\" rel=\"stylesheet\">\n</head>\n<body class=\"p-6\">\n  <div id=\"counter\" class=\"text-2xl mb-4\">0</div>\n  <button\n    class=\"bg-green-500 text-white p-2 rounded\"\n    data-signal=\"increment\"\n    data-target=\"#counter\"\n  >\n    Increment\n  </button>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/tailwind-signals@latest\"></script>\n  <script>\n    const counter = document.getElementById('counter');\n    let count = 0;\n\n    document.querySelector('[data-signal=\"increment\"]').addEventListener('click', () => {\n      count++;\n      counter.textContent = count;\n    });\n  </script>\n</body>\n</html>\n```\n\n이 예제에서는 버튼을 클릭하면 div에 표시된 카운터 값이 증가합니다.\n\nTailwind Signals를 사용하면 Tailwind CSS 프로젝트에 상호작용적이고 동적인 동작을 쉽게 추가할 수 있어요. 간단한 JavaScript로 반응형이고 매력적인 사용자 인터페이스를 만들 수 있어요. 그러니 다음 프로젝트에서 Tailwind Signals를 한번 시도해보세요!\n\n<div class=\"content-ad\"></div>\n\n이와 유사한 기사들을 보려면 Medium에서 나를 팔로우하거나 새 이야기를 이메일로 받으세요. 또한 제 리스트들도 살펴보실 수도 있습니다. 또는 이와 관련된 다음 기사 중 하나를 확인해보세요:\n\n- Embracing Utility-First CSS with Tailwind: A Comprehensive Guide\n- React vs. Vue in 2024: A Detailed Framework Comparison for Web Developers\n- Elixir/Phoenix vs. Go in 2024: Comprehensive Backend Technology Comparison\n- Hystrix vs. Opossum for Microservices: A Comprehensive Guide to Circuit Breaker Choices","ogImage":{"url":"/assets/img/2024-06-23-SuperchargeYourUIwithTailwindSignalsSetupandExamples_0.png"},"coverImage":"/assets/img/2024-06-23-SuperchargeYourUIwithTailwindSignalsSetupandExamples_0.png","tag":["Tech"],"readingTime":5}],"page":"2","totalPageCount":151,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":0},"__N_SSG":true}