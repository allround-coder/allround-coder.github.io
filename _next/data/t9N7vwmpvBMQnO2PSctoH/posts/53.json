{"pageProps":{"posts":[{"title":"현업에서 Django를 더이상 사용하지 않는 이유","description":"","date":"2024-05-27 19:23","slug":"2024-05-27-IsDjangoDyingAnHonestLookattheFuture","content":"\n\n\n![Is Django Dying](/assets/img/2024-05-27-IsDjangoDyingAnHonestLookattheFuture_0.png)\n\nDjango의 소멸을 선언하는 클릭베이트 제목에 지쳤나요? 저는 그렇습니다. 여전히 Django를 의존하는 대규모 기업들이나 커뮤니티가 구축하는 놀라운 것들을 확인하지 않은 것처럼 보입니다. 솔직히, Django를 \"소멸\"이라고 부르는 것은 인터넷 익스플로러를 사용하는 것보다 더 접촉을 잃은 것으로 여겨집니다. Django가 톱 플레이어로 남아 있는 이유에 대해 알아봅시다.\n\n## 섹션 1: Django는 비디오 게임 고양이보다 더 많은 생명력을 가지고 있습니다.\n\n정말이에요, \"Django가 죽었다\"는 기사들은 금방 질리죠. 이 프레임워크는 핵 겨울 속의 바퀴벌레보다 더 저항력이 있습니다. 여기 이유가 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n- 새로운 묘기 (최근 업데이트): 장고의 개발자들은 꼼짝마라하지 않습니다. 최근 업데이트로 비동기 뷰(안녕, 속도 향상!)와 내장 JSON 필드 지원(데이터 처리가 더욱 원활해졌어요)와 같은 좋은 기능들을 선사했습니다. 이제 비동기 뷰의 훌륭함을 맛보세요:\n\n```js\nfrom django.http import HttpResponse\nimport asyncio\n\nasync def my_async_view(request):\n    # 비동기적으로 시간이 오래 걸리는 작업 수행\n    result = await long_running_task()\n    return HttpResponse(f\"여기에 결과가 있습니다: {result}\")\n```\n\n- 충실한 크루 (커뮤니티): 새벽 2시에 코딩 질문을 했더니 누군가가 답변해준 적이 있나요? 이것이 장고 커뮤니티의 마법입니다. 스택 오버플로우, 전용 포럼 및 다양한 경험 많은 개발자들을 만날 수 있어요. 이는 장고를 훨씬 더 쉽고 재미있게 배울 수 있게 만들어줍니다.\n- 현실 세계 챔피언 (성공 스토리): 만약 장고가 정말로 사라지는 길에 있다면 인스타그램, 스포티파이, 워싱턴 포스트와 같은 기업들이 그 위에 서비스를 구축할까요? 아니요. 이러한 거물들이 장고의 확장 가능성과 복잡한 웹 애플리케이션 처리 능력을 인정했습니다.\n- 미래를 위해 만들어진 (지속적인 관련성): 웹 개발 트렌드는 내가 점심에 뭘 시켜야 할지 바꾸는 것보다 빠르게 변합니다. 하지만 장고의 적응력은 전설적입니다. 강력한 데이터 처리, 매끄러운 API 생성 및 보안에 대한 집중은 소셜 미디어 사이트부터 심각한 데이터 주도 플랫폼까지 모든 분야에서 여전히 뛰어난 선택지임을 의미합니다.\n\n보셨나요? 장고는 단순히 살아남는 것이 아니라 경쟁하고 성공을 거두고 있습니다. 비판하는 사람들은 그들의 Clickbait 제목을 쓸 테니 우리는 계속 이 지속적으로 발전하는 프레임워크로 멋진 것들을 만드는 데 바쁠 거에요.\n\n<div class=\"content-ad\"></div>\n\n## 섹션 2: 좋아요, 코딩 방 안의 코끼리 얘기를 좀 해볼까요?\n\n알았어요, 고무단으로 가리지 않겠어요: 어떤 사람들은 Django가 멸종의 길로 가야 한다고 생각하고 있어요. 이들이 선호하는 몇 가지 이유들을 해결해보고 상황에 현실성을 추가해보겠습니다:\n\n- 눈부신 새로운 장난감 (다른 프레임워크의 유혹): “자바스크립트가 더 핫해! React가 더 빠르다! FastAPI가 미래야!” 그렇지만, 새로운 기술은 흥미롭지만 자동적으로 오래된 기술을 구식으로 만들지 않아요. 서로 다른 도구들은 서로 다른 강점을 가지고 있어요. 복잡한 데이터베이스와 원활하게 작동하는 견고한 백엔드가 필요하다면, Django가 종종 많은 최첨단 옵션들에 밀리지 않을 수 있어요.\n- 확장의 고민 (단일체의 신화): 막대한 Django 앱을 확장하는 것은 까다로울 수 있다는 것이 사실이에요. 그러나 알고 계세요? 특정 규모에 도달했을 때 어떤 프레임워크든 그렇다는 건 사실이에요. 스마트한 설계 선택, 캐싱, 그리고 부하 분산은 여기서 친구입니다—어떤 기술 스택을 사용하든 말이죠. 여기 Django 커뮤니티가 빛을 발하는 곳입니다: 이러한 도전에 직면한 개발자들이 이를 해결하는 해법을 즐겁게 공유하고 있습니다.\n\n```js\n# 예시: 데이터베이스 부하를 줄이기 위해 캐싱 사용 \nfrom django.core.cache import cache\n\ndef get_trending_topics(request):\n    trending_topics = cache.get('trending_topics')\n    if not trending_topics:\n       trending_topics = calculate_trending_topics()  # 시간이 많이 걸리는 작업\n       cache.set('trending_topics', trending_topics, 600)  # 10분 동안 캐싱\n   return render(request, 'trending.html', {'topics': trending_topics})\n```\n\n<div class=\"content-ad\"></div>\n\n- 균형 잡힌 시각 (장고가 빛을 발하는 곳): Django는 모든 웹 프로젝트의 마법 해결책은 아닙니다. 하지만 신속한 개발, 깔끔한 구조 및 견고한 신뢰성이 필요하다면 고려해볼 수 있는 옵션입니다. 스타트업, 뉴스 사이트, 내부 도구 등이 Django가 빛나는 영역입니다. 또한, 더 높은 성능을 끌어낼 수 있는 다양한 전략이 존재합니다.\n\n이 결론? 혹독한 하이프 사이클에 빠지지 마세요. Django가 우스꽝스럽게 여길 오래된 것이 아니라, 일을 멋지게 처리할 수 있는 성숙하고 전투에서 검증 받은 프레임워크입니다.\n\n## 섹션 3: Django의 크리스탈 볼 - 번창하는 미래를 내다봅니다\n\n\"Dying\" 예언에 대해 하나 더 말씀드리자면: Django의 자신을 새롭게 바꾸는 능력을 과소평가하고 있습니다. 이 프레임워크는 망가진 유명 세계 스타보다 더 많은 컴백을 계획 중입니다. 앞으로 무엇을 기대할 수 있을 지 엿보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n- 성능에 집중: 속도가 중요하고 Django 개발자는 이를 알고 있습니다. 지속적인 최적화가 기대되며, 각 릴리스마다 Django를 더 가볍고 효과적으로 만들기 위한 노력이 이어질 것입니다. 적은 노력으로 로드 밸런싱을 수행할 수 있는 내장 도구가 추가된다면 얼마나 좋을까요? 불가능한 일은 아닙니다!\n- 새로운 기술 수용: WebAssembly가 인기를 끌고 있나요? AI 기능이 게임을 바꾸고 있나요? Django는 이러한 변화를 효율적으로 통합하고 발전시킬 스마트한 방법을 찾을 것입니다. Django는 웹의 발전과 함께 성장하는 역사가 있습니다.\n- Django: 웹 개발의 스위스 아미 나이프: API 개발 및 통합과 같은 영역에 대한 관심이 증가함에 따라 Django는 더 다양한 프로젝트의 신뢰할 수 있는 핵심이 될 것입니다. 특정 niche를 대상으로 한 더 많은 특화된 '플레이버'들이 등장할 수도 있습니다.\n```js\n# Django REST Framework를 사용한 API 생성 예시\nfrom rest_framework import serializers, viewsets\nfrom .models import BlogPost\n\nclass BlogPostSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = BlogPost\n        fields = '__all__'\n\nclass BlogPostViewSet(viewsets.ModelViewSet):\n    queryset = BlogPost.objects.all()\n    serializer_class = BlogPostSerializer\n```\n- 이러한 점이 긍정적인 이유: Django는 능력이 증가하는 동안에도 사물을 간단하게 유지하는 능력이 있습니다. 이는 새로운 개발자를 유치함으로써(멋진 커뮤니티 확장!) 경험이 풍부한 사람들이 지속적인 학습 곡선에 직면하지 않도록 보장합니다. Django는 산업의 트렌드가 떠오르기를 바라며 적응하기 좋은 동물이며, 관건성을 유지하여 항상 적용 가능하게 유지합니다.\n\n파멸론자들이 선동성 기사에 집착하더라도, 우리 중 일부는 Django를 활용하여 놀라운 웹 경험의 다음 세대를 구축할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## 결론: 장고는 계속해서 성장 중이며 당신도 그렇게 해야 합니다\n\n우리가 뭘 얘기하고 싶은지 말해 봅시다 — 장고는 그저 살아남는 것뿐만이 아니라 번창하고 있습니다. 이 프레임워크는 지속적인 업데이트가 이뤄지고 열정적인 커뮤니티가 뒷받침하며 실제 세계에서도 뛰어난 실력을 입증하고 있습니다.\n\n그 지겨운 \"장고가 죽었는가?\"라는 글들을 잊어버리세요. 더 나은 질문은 \"장고가 앞으로 어떻게 발전하며 성공할 것인가?\"라는 것입니다. 왜냐하면 그게 분명할테니까요.\n\n당신의 다음 행보: 이제 장고에 참여하는 방법을 알아보세요:\n\n<div class=\"content-ad\"></div>\n\n- 도전해 보세요: 아직 장고를 시도해 보지 않았나요? 키보드를 먼지 털고 초보 프로젝트에 도전해 보세요. 장고의 일 처리 태도에 사로잡힐지도 모르겠어요.\n- 클럽에 가입하세요: 장고 포럼에 참여하고, 디스코드에서 다른 개발자들과 연결해 보세요 (저 같이 함께하실래요? - https://discord.com/invite/JGTayeYnXs). 이 커뮤니티를 멋지게 만드는 모든 지식을 활용해 보세요.\n- 미래를 만드세요: 장고의 오픈 소스 마법 덕분에 다음 단계를 결정할 수 있어요. 멋진 기능 아이디어가 있나요? 기여해서 자신의 흔적을 남겨 보세요!\n\n장고의 이야기는 아직 끝나지 않았고, 여러분의 이야기는 지금부터 시작될 수 있어요. 우리가 다음에 함께 놀라운 응용 프로그램을 얼마나 만들 수 있을지 기대해 보세요.\n\n그런데… 제가 다룰 도저히 지치지 않는 질문이나 멋진 기사 아이디어가 있나요? 아래 댓글에 남겨 주세요! 그리고 친절하게도, Medium에서 (https://medium.com/@danielbuilescu) 제 팔로우도 눌러 주세요. 더 많은 프로그래밍 소식을 확인할 수 있을 거예요.\n\n# 쉬운 용어로 🚀\n\n<div class=\"content-ad\"></div>\n\n인 플레인 영어 커뮤니티의 일원이 되어 주셔서 감사합니다! 나가시기 전에:\n\n- 작가에게 박수를 보내고 팔로우하기 ️👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼 방문하기: 스택아카데믹 | 코피드 | 벤처 | 큐브드\n- PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요.","ogImage":{"url":"/assets/img/2024-05-27-IsDjangoDyingAnHonestLookattheFuture_0.png"},"coverImage":"/assets/img/2024-05-27-IsDjangoDyingAnHonestLookattheFuture_0.png","tag":["Tech"],"readingTime":6},{"title":"HCI 제1부 상호 작용을 형성하는 과소평가된 감각 - 촉각","description":"","date":"2024-05-27 19:22","slug":"2024-05-27-HCIPart1TheUnderratedSenseShapingOurInteractionsTouch","content":"\n\n인간-컴퓨터 상호작용 시리즈 첫 번째 기사에 오신 것을 환영합니다. 우리는 주변 세계와 상호작용하는 데 주로 시각과 청각을 생각합니다. 그러나 종종 간과되는 촉각은 우리의 일상생활과 기술과의 인터페이스 방법에서 중요한 역할을 합니다.\n\n![touch image](/assets/img/2024-05-27-HCIPart1TheUnderratedSenseShapingOurInteractionsTouch_0.png)\n\n촉각은 단지 물체의 질감을 느끼는 것 이상입니다. 피부 표면(온도, 압력)의 감각과 자기 지각, 우리 몸이 공간에서의 위치와 움직임을 인식하는 것이 결합된 것입니다. 이 복잡한 감각은 컵을 집거나 가상 현실 세계를 탐험하는 것처럼 단순한 행동부터 복잡한 행동까지 수행할 수 있게 합니다.\n\n# 사용자 인터페이스에서의 촉각의 힘\n\n<div class=\"content-ad\"></div>\n\nUI(사용자 인터페이스)의 영역에서 터치는 중요한 역할을 합니다. 스마트폰 화면 위에서 손가락이 부드럽게 움직이는 것부터 물리적 버튼을 눌렀을 때의 쾌적한 감쇠 소리까지, 터치 상호작용은 사용성과 사용자 경험을 향상시킬 수 있습니다. 진동이나 힘 피드백을 사용하여 촉감을 만드는 햅틱스는 상호작용에 또 다른 층을 더해줍니다.\n\n다음은 UI 디자인에서 터치가 어떻게 사용되는지와 UI/UX 디자이너 및 프런트엔드 엔지니어를 위한 실용적인 고려 사항과 함께 예시 몇 가지입니다:\n\n## 진동 알림:\n\n메시지나 전화 알림을 통지하는 핸드폰의 익숙한 진동 경고는 햅틱스의 기본이지만 효과적인 활용 사례입니다.\n\n<div class=\"content-ad\"></div>\n\nUI/UX 고려사항: 디자이너는 진동 알림이 섬세하면서도 눈에 띄게 되도록 설계해야 합니다. 사용자가 혼란스럽거나 압도당하지 않도록 주의해야 합니다. 엔지니어들은 다양한 알림을 위한 다른 진동 패턴을 만들기 위해 햅틱 피드백 API를 구현할 수 있습니다.\n\n## 질감 있는 가상 버튼\n\n물리적 버튼의 느낌을 모방하여 섬세한 진동을 이용하면 터치 스크린 사용의 정확도와 만족도가 향상될 수 있습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*j947PelqqZbU_U4iWIrhsw.gif)\n\n<div class=\"content-ad\"></div>\n\nUI/UX 고려 사항: 디자이너들은 조금 불투명도가 변화하거나 섬세한 엠보싱과 같은 질감 있는 버튼을 나타내는 시각적 단서를 만들 수 있습니다.\n\n## 대화식 슬라이더\n\n조절 중에 햅틱 피드백을 제공하는 슬라이더는 사용자의 제어와 정밀도를 향상시킬 수 있습니다.\n\nUI/UX 고려 사항: 디자이너들은 슬라이더의 범위와 현재 값이 나타나는 명확한 시각적 단서를 사용해야 합니다. 엔지니어들은 슬라이더가 한계에 다다를 때 강도가 증가하는 햅틱 피드백을 통합할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 대상 크기 및 간격\n\n클릭 가능한 대상(버튼, 메뉴 항목) 사이의 적절한 크기와 간격은 모바일 기기에서 정확한 터치 상호작용을 위해 중요합니다.\n\n![이미지](/assets/img/2024-05-27-HCIPart1TheUnderratedSenseShapingOurInteractionsTouch_1.png)\n\nUI/UX 고려 사항: 디자이너는 기기 유형 및 사용자 연구에 따라 권장되는 터치 대상 크기를 준수해야 합니다. 프런트엔드 엔지니어는 상호작용 요소 사이의 적절한 간격을 보장하는 라이브러리나 프레임워크를 구현할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 나쁜 예 및 그를 피하는 방법\n\n## 부정확한 터치 대상\n\n작은 버튼이나 잘 조정되지 않은 터치 스크린은 분노와 놓친 클릭으로 이어질 수 있습니다.\n\n해결책: 터치 대상의 크기를 키우고 디자인 중 적절한 간격을 유지하십시오.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-27-HCIPart1TheUnderratedSenseShapingOurInteractionsTouch_2.png\" />\n\n## 너무 복잡한 햅틱:\n\n너무 세고 부정확하며 화면 상의 동작과 일치하지 않는 햅틱 피드백은 혼란을 초래할 수 있으며 주의를 산만하게 만들 수 있습니다.\n\n해결책: 디자이너들은 명확성을 우선시하고 다양한 진동 패턴을 사용자들과 테스트해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 터치 기술의 미래\n\n터치 기술의 세계는 끊임없이 발전하고 있습니다. 기대할만한 몇 가지 신기한 발전들이 있습니다:\n\n- 울트라햅틱스: 이 기술은 초음파를 사용하여 공중에서 촉각을 만들어 가상 현실 경험을 혁신할 수 있습니다.\n\n- 모양 변화 재료: 터치에 따라 물리적으로 변형되는 인터페이스를 상상해 보세요. 이는 새로운 수준의 상호작용을 제공할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Image](/assets/img/2024-05-27-HCIPart1TheUnderratedSenseShapingOurInteractionsTouch_3.png)\n\n이러한 기술이 발전함에 따라 UI 디자이너들은 더 많은 도구를 활용하여 직관적이고 매혹적인 사용자 경험을 만들어낼 수 있습니다.\n\n# 결론: 터치의 미래를 위한 디자인\n\n터치는 단순히 신체적 감각 이상의 것이며, 세계와 상호작용하는 방법에 대한 창이기도 합니다. 터치의 복잡성을 이해하고 새로운 기술을 받아들이면, UI/UX 디자이너 및 프론트엔드 엔지니어는 기능성 뿐만 아니라 직관적이고 쾌활하게 느껴지는 인터페이스를 만들어낼 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n터치의 미래는 흥미로운 가능성을 약속합니다. 공중에서의 햅틱 피드백부터 형태를 변화시키는 소재까지, 디지털과 물리적 사이의 경계가 흐려지고 있습니다. 이러한 발전이 계속되면, 우리는 상상할 수만 있던 방식으로 터치의 힘을 활용한 더욱 풍부하고 몰입적인 사용자 경험을 기대할 수 있을 겁니다.\n\n그래서 다음 번에 스마트폰을 사용하거나 가상 세계를 탐험할 때, 그 경험의 토대가 되는 터치의 무성의 심포니를 한 순간이나마 감상해 보세요. 이 강력한 감각을 이용하여 우리의 삶에 기술이 자연스럽게 통합되는 미래를 디자인할 수 있습니다. 그것은 우리 자신의 연장으로 느껴지는 것처럼 자연스러울 것입니다.\n\n# 나의 참고문헌","ogImage":{"url":"/assets/img/2024-05-27-HCIPart1TheUnderratedSenseShapingOurInteractionsTouch_0.png"},"coverImage":"/assets/img/2024-05-27-HCIPart1TheUnderratedSenseShapingOurInteractionsTouch_0.png","tag":["Tech"],"readingTime":4},{"title":"Dart에서 Annotations 사용하는 방법","description":"","date":"2024-05-27 19:20","slug":"2024-05-27-ExploringAnnotationsinDartProgramming","content":"\n![Exploring Annotations in Dart Programming](/assets/img/2024-05-27-ExploringAnnotationsinDartProgramming_0.png)\n\nDart에서 주석은 개발자가 코드에 메타데이터를 추가할 수 있는 기능입니다. 이 메타데이터는 도구, 라이브러리 및 런타임에서 코드 생성, 유효성 검사 및 문서화와 같은 다양한 작업을 수행하는 데 사용될 수 있습니다. 이 블로그에서는 Dart에서 주석이 작동하는 방법, 사용 방법 및 사용자 정의 주석을 만드는 방법을 살펴보겠습니다.\n\n## Annotations이란?\n\nDart에서 주석은 클래스, 메서드, 필드 등과 같은 다양한 프로그램 요소에 첨부할 수 있는 메타데이터 형식입니다. 컴파일러 또는 런타임에서 처리될 수 있는 추가 정보를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n다트(Dart)에서 어노테이션은 상수 값이나 생성자 호출을 참조하는 '@' 기호로 표현됩니다. 이 값은 타입(type), 클래스의 인스턴스(instance) 또는 리터럴(literal)일 수 있습니다.\n\n## 일반적인 사용 사례\n\n- 문서화: 어노테이션은 자동으로 문서를 생성하는 데 사용될 수 있습니다.\n- 코드 생성: build_runner와 같은 도구는 어노테이션을 사용하여 생성된 보일러플레이트 코드를 생성합니다.\n- 유효성 검사: 어노테이션은 데이터 유효성 검사 또는 코딩 표준 적용에 도움을 줄 수 있습니다.\n\n## 내장된 어노테이션\n\n<div class=\"content-ad\"></div>\n\nDart는 몇 가지 내장 주석을 제공합니다:\n\n- @override: 메서드가 수퍼 클래스의 메서드를 재정의하기 위해 의도된 것을 나타냅니다.\n- @deprecated: 기능을 사용하지 말아야 함을 나타내어 폐기 예정으로 표시합니다.\n\n```js\nclass Parent {\n  void doSomething() {\n    print('Parent에서 작업 중');\n  }\n}\n\nclass Child extends Parent {\n  @override\n  void doSomething() {\n    print('Child에서 작업 중');\n  }\n}\n\nvoid main() {\n  var child = Child();\n  child.doSomething();  // 출력: Child에서 작업 중\n}\n```\n\n## 사용자 정의 주석 만들기\n\n<div class=\"content-ad\"></div>\n\n다트(Dart)에서 사용자 정의 어노테이션을 만드는 것은 간단합니다. 어노테이션을 클래스로 정의한 후에 인스턴스화하면 됩니다.\n\n다음은 사용자 정의 어노테이션의 예시입니다:\n\n```js\n// 사용자 정의 어노테이션 클래스\nclass RequiresPermission {\n  final String permission;\n  const RequiresPermission(this.permission);\n}\n\n// 권한 상수\nconst String INTERNET_PERMISSION = \"인터넷\";\nconst String CAMERA_PERMISSION = \"카메라\";\n\n// RequiresPermission 어노테이션을 사용한 예시 클래스\nclass NetworkService {\n  @RequiresPermission(INTERNET_PERMISSION)\n  void fetchData() {\n    // 인터넷에서 데이터 가져오기\n    print(\"인터넷에서 데이터 가져오는 중...\");\n  }\n\n  void localDataProcessing() {\n    // 로컬 데이터 처리\n    print(\"로컬 데이터 처리 중...\");\n  }\n}\n\nclass CameraService {\n  @RequiresPermission(CAMERA_PERMISSION)\n  void takePicture() {\n    // 카메라를 사용하여 사진 찍기\n    print(\"사진 찍는 중...\");\n  }\n\n  void processImage() {\n    // 이미지 처리\n    print(\"이미지 처리 중...\");\n  }\n}\n\n// 예시 사용법\nvoid main() {\n  NetworkService networkService = NetworkService();\n  CameraService cameraService = CameraService();\n\n  // 메소드 호출 전 권한 확인하는 예시\n  if (hasPermission(INTERNET_PERMISSION)) {\n    networkService.fetchData();\n  } else {\n    print(\"인터넷 권한이 필요합니다.\");\n  }\n\n  if (hasPermission(CAMERA_PERMISSION)) {\n    cameraService.takePicture();\n  } else {\n    print(\"카메라 권한이 필요합니다.\");\n  }\n\n  networkService.localDataProcessing();\n  cameraService.processImage();\n}\n\n// 더미 권한 확인 함수\nbool hasPermission(String permission) {\n  // 실제 권한 확인하는 부분\n  // 이 예시에서는 모든 권한이 허용된 것으로 가정합니다\n  return true;\n}\n```\n\n이 예시에서:\n\n<div class=\"content-ad\"></div>\n\n- `RequiresPermission` 커스텀 어노테이션이 정의되었으며 이 어노테이션은 권한 문자열을 가져옵니다.\n- `NetworkService` 클래스에는 `@RequiresPermission`으로 어노테이트된 메서드들이 있어서 `fetchData` 메서드가 인터넷 권한이 필요하다는 것을 나타냅니다.\n- `CameraService` 클래스에는 `@RequiresPermission`으로 어노테이트된 메서드들이 있어서 `takePicture` 메서드가 카메라 권한이 필요하다는 것을 나타냅니다.\n- 주요 함수는 이러한 어노테이트된 메서드들을 호출하기 전에 권한을 확인하여, 실행 전에 필요한 권한이 부여되었는지를 확인합니다.\n\n우리의 지식을 공유하여 커뮤니티를 더 강하게 만들어가요. 최신 웹 및 모바일 기술 분야에서 업데이트된 정보를 얻기 위해 저와 제 팀을 팔로우해주세요.\n","ogImage":{"url":"/assets/img/2024-05-27-ExploringAnnotationsinDartProgramming_0.png"},"coverImage":"/assets/img/2024-05-27-ExploringAnnotationsinDartProgramming_0.png","tag":["Tech"],"readingTime":4},{"title":"플러터에서 흔히 하는 로컬라이제이션 실수 방지하는 방법","description":"","date":"2024-05-27 19:19","slug":"2024-05-27-AvoidingcommonlocalizationmistakesinFlutterbestpracticesandsolutions","content":"\n완벽한 로컬라이제이션을 달성하려면 번역만으로는 충분하지 않습니다. 언어적 뉘앙스와 지역적 선호도를 신중히 고려해야 합니다. 이 글에서는 Flutter 앱 로컬라이제이션 중에 생길 수 있는 일반적인 오류들과 그것들을 극복하기 위한 효과적인 전략을 탐구해보겠습니다.\n\n## 1. 하나의 문장을 연결하여 다른 문자열 항목을 사용하는 것.\n\n다음 문장을 예시로 들어보겠습니다:\n\n강조된 부분은 다른 텍스트 스타일을 가지고 클릭할 수 있어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n많은 사람들이 종종 여러 항목으로 나누어서 TextSpan을 연결합니다. 이 해결책은 영어에는 작동하지만 앱의 다른 언어에도 적용될 수 있습니다. 그러나 문제는 문법 격조나 다른 단어 순서를 가진 언어와 작업할 때 발생합니다.\n\n문제가 어디에서 발생하는지 분석해보겠습니다.\n\n저는 +약관+과 +개인정보 처리방침+에 동의합니다.\n\n에스토니아어로 동일한 문장을 작성하면 다음과 같이 됩니다:\n\n<div class=\"content-ad\"></div>\n\n병적으로 이용약관 및 개인정보 보호 정책에 동의합니다\n\n단어 순서는 똑같아. 괜찮잖아? 같은 이름의 화면 제목으로 이용약관 항목을 재사용하면 참 괜찮을 것 같지? 영어로 돌리면 완벽히 작동하지만, 에스토니아어로 하면 \"약관과 함께\"라는 의미가 나올거야. 인가로 끝나서 \"약관\" 대신 \"약관과\"라는 뜻이 날거야. 다른 문제는, 각각의 항목을 번역하면서 전체 문장의 맥락을 손실하기도 굉장히 쉬워. 그리고 띄어쓰기가 사라지는 것도 말이야.\n\n일부 언어에서는 다른 단어 순서를 가질거야. 예를 들어, 독일어에서:\n\n처음에 만든 솔루션이 이걸 지원하지 않아. 개인정보 보호 정책 단어 다음에 텍스트가 있는데 거기에 추가 텍스트 스팬을 더해야 돼. 머리가 아플 것 같아?\n\n<div class=\"content-ad\"></div>\n\n솔루션: 태그된 로컬라이제이션 항목을 사용하세요. 예를 들어, styled_text 패키지를 사용하면 문자열에 사용자 정의 태그를 추가한 다음 코드에서 처리할 수 있습니다:\n\n\"agreeWithTerms\": \"나는 `a action=`OPEN_TC`` 약관 및 조건`/a`, `a action=`OPEN_PP ``개인정보 보호정책`/a`을 읽었으며 동의합니다\"\n\n이 문제 때문에 맷테오게코의 이 라이브러리 포크를 사용하는 것을 권장합니다. 더 나은 해결책을 아시는 경우 댓글로 알려주세요.\n\n```js\ndependencies: styled_text: git: ref: bd403bd6c7c7df422b8d13e14b995662818fd9a9;\nurl: //github.com/Maatteogekko/styled_text_package.git\nhttps: path: styled_text;\n```\n\n<div class=\"content-ad\"></div>\n\n그리고 코드에 그겨되어 있을 것입니다:\n\n```js\n      StyledText(\n        text: t.agreeWithTerms,\n        style: Theme.of(context).textTheme.bodyMedium,\n        tags: {\n          'a': StyledTextActionTag(\n            (String? text, Map<String?, String?> attrs) {\n              final action = attrs['action'];\n              switch (action) {\n                case 'OPEN_TC':\n                  _openTC();\n                case 'OPEN_PP':\n                  _openPP();\n              }\n            },\n            style: Theme.of(context).textTheme.bodyMedium!.copyWith(\n                color: Theme.of(context).primaryColor,\n                decoration: TextDecoration.underline),\n          )\n        },\n      )\n```\n\n그 결과는 다음과 같이 나옵니다:\n\n<img src=\"/assets/img/2024-05-27-AvoidingcommonlocalizationmistakesinFlutterbestpracticesandsolutions_0.png\" />\n\n<div class=\"content-ad\"></div>\n\n## 2. 복수형 무시하거나 사용자 정의 로직을 적용하여 처리하기\n\n예를 들어 다음과 같은 문장이 있다고 가정해 봅시다:\n\n만약 사용자가 한 명뿐이라면, \"1명의 사용자가 온라인 상태입니다.\"라고 표시해야 합니다. 그냥 코드에 조건을 추가하면 될 것 같지 않나요? (n==1)이면 다른 문자열을 사용하도록 하는 것이나, 더 간단하게 \"N명의 사용자\" 문자열을 사용하는 방법이 어떨까요? 이 방법은 영어의 경우에 완벽하게 작동할 것입니다.\n\n하지만 러시아어를 보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n1명 온라인\n\n2명 온라인\n\n5명 온라인\n\n21명 온라인\n\n<div class=\"content-ad\"></div>\n\n아랍어는 더 복잡해요.\n\n다행히도 복수화 표준이 있습니다. 유니코드 웹사이트에서 자세히 읽을 수 있어요. 또한 이 기사는 일부 인기 있는 언어에서 복수 범주가 어떻게 나타나는지 보여줍니다.\n\n요약하자면, 앱에 있는 모든 언어에 대해 적절한 복수 범주를 제공해야 해요.\n\n```js\n\"usersOnline\": {\n    \"one\": \"$n명의 사용자가 온라인 상태입니다\",\n    \"other\": \"$n명의 사용자가 온라인 상태입니다\"\n}\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n    \"usersOnline\": {\n        \"one\": \"$n 명의 사용자 온라인\",\n        \"few\": \"$n 명의 사용자 온라인\",\n        \"many\": \"$n 명의 사용자 온라인\",\n        \"other\": \"$n 명의 사용자 온라인\"\n    }\n```\n\n나는 복수형을 구현하는 데 slang 패키지를 사용하고 있어:\n\n```js\nText(t.usersOnline(n: 3)),\n```\n\n그 결과로 문법적으로 올바른 복수형을 얻게됩니다. POEditor와 같은 온라인 편집기도 이를 지원합니다.\n\n<div class=\"content-ad\"></div>\n\n## 3. 날짜와 시간을 수동으로 형식 지정하고, 월의 이름과 요일의 이름을 하드코딩하기\n\n그것은 매우 흔한 실수입니다. 서로 다른 지역에는 날짜 형식이 다릅니다. 요일을 줄이는 규칙도 다릅니다.\n\n예를 들어 핀란드에서 시간과 분은 점으로 구분됩니다. 에스토니아에서는 요일을 1자로 표시합니다. 미국에서는 날짜에 월이 먼저 나온다는 점도 언급할 수 없겠네요. 이런 모든 것들을 고려하면서 날짜와 시간을 다룬다는 것은 상당히 어려운 일처럼 보입니다. 다행히도 모든 것이 다시 표준화되었습니다. intl 패키지를 사용해봅시다.\n\n기본적으로 DateFormat은 앱에서 사용되는 로캘을 사용하지만 데모 목적을 위해 특정 로캘을 명시하여 출력을 확인할 수 있습니다. TimeOfDay는 컨텍스트에서 로캘을 가져옵니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfinal date = DateTime.now();\nformat(String locale) => \"$locale: ${DateFormat.yMMMEd(locale).format(date)}\";\nprint(format(\"en_US\"));\nprint(format(\"en_GB\"));\nprint(format(\"et_EE\"));\nprint(format(\"fi_FI\"));\nprint(format(\"ar_QA\"));\nprint(TimeOfDay.now().format(context));\n```\n\nThe output:\n\n```js\nflutter: en_US: Tue, May 21, 2024\nflutter: en_GB: Tue, 21 May 2024\nflutter: et_EE: T, 21. mai 2024\nflutter: fi_FI: ti 21. toukok. 2024\nflutter: ar_QA: الثلاثاء، ٢١ مايو ٢٠٢٤\nflutter: 13:24\n```\n\n## 4. Concatenating currency and price strings\n\n<div class=\"content-ad\"></div>\n\n어떤 국가에서는 천 단위 구분으로 콤마를 사용하는 반면, 다른 국가에서는 점을 사용합니다. 이런 작은 변화가 앱에 영향을 줄 수도 있어요.\n\n```js\nString formatCurrency(String currency, String amount) => currency + amount;\n```\n\n<div class=\"content-ad\"></div>\n\n지금은 intl 패키지를 사용하여 통화를 다루는 방법을 살펴보겠습니다:\n\n```js\nprint(NumberFormat.simpleCurrency(locale: 'en_US', name: 'USD').format(199.99));\nprint(NumberFormat.simpleCurrency(locale: 'en_GB', name: 'GBP').format(199.99));\nprint(NumberFormat.simpleCurrency(locale: 'es_ES', name: 'EUR').format(199.99));\n```\n\nNumberFormat.simpleCurrency는 기본적으로 앱의 로캘을 사용합니다. 여기서는 데모를 위해 몇 가지 특정 로케일을 전달하고 있습니다. 결과는 다음과 같습니다:\n\n```js\nflutter: $199.99\nflutter: £199.99\nflutter: 199,99 €\n```\n\n<div class=\"content-ad\"></div>\n\n또한, 짧고 명확한 형식이 있습니다. 가장 일반적인 사용 사례는 판매 중인 상품 목록이나 쇼핑 카트에서 짧은 형식을 표시하는 것입니다. 그리고 명시적 형식은 체크아웃 중에 사용해야 합니다. 이에 대해 더 읽어 보려면 Shopify의 이 기사를 확인하세요.\n\n이게 왜 중요할까요? 가렌다인 사용자가 앱을 열고 달러 기호가 있는 가격을 보는 상황을 상상해보세요. 사용자는 실제로 미국 달러가 아니라 캐나다 달러로 지불하고 있는지 확신하고 싶어할 것입니다. 이를 간단한 함수를 사용하여 수행할 수 있습니다:\n\n```js\nString explicitFormat(String currencyCode, String? locale, num amount) {\n    final shortFormat = NumberFormat.simpleCurrency(locale: locale, name: currencyCode).format(amount);\n\n    return \"$shortFormat $currencyCode\";\n}\n```\n\n이 기사가 유익했기를 바랍니다.\n\n<div class=\"content-ad\"></div>\n\n오른쪽에서 왼쪽으로 (RTL/LTR) 케이스와 서로 다른 측정 시스템을 다루지 않았어요. 별도의 기사를 쓸 가치가 있어요. 업데이트를 받으시려면 구독을 확인해주세요.\n\n![이미지](/assets/img/2024-05-27-AvoidingcommonlocalizationmistakesinFlutterbestpracticesandsolutions_1.png)\n","ogImage":{"url":"/assets/img/2024-05-27-AvoidingcommonlocalizationmistakesinFlutterbestpracticesandsolutions_0.png"},"coverImage":"/assets/img/2024-05-27-AvoidingcommonlocalizationmistakesinFlutterbestpracticesandsolutions_0.png","tag":["Tech"],"readingTime":6},{"title":"플러터에서 위젯을 showcase 하는 방법","description":"","date":"2024-05-27 19:18","slug":"2024-05-27-HowtoshowcaseawidgetinFlutter","content":"\n\n<img src=\"/assets/img/2024-05-27-HowtoshowcaseawidgetinFlutter_0.png\" />\n\n특정 기능을 소개한 후에는 종종 앱에서 특정 위젯을 집중적으로 보여주고 싶어합니다. 이는 일반적으로 사용자를 특정 위젯으로 안내하거나 특정 위젯의 중요성을 사용자에게 보여주기 위해 수행됩니다. 보통 온보딩 화면이나 튜토리얼에서 수행됩니다. 이 기능은 \"가이드라인\" 또는 \"코치마크\"라고도 합니다.\n\n따라서 이곳의 목표는 특정 위젯에 초점을 맞추거나 보여주어야 합니다. 화면의 다른 부분에 그림자를 만들어 특정 위젯을 강조하는 것입니다. 그러려면 위젯의 위치와 크기를 알아야 합니다. 그런 다음 오버레이를 그려서 대상이 있는 곳을 구멍으로 만들고 나머지 영역에 그림자를 만들어야 합니다. 기술적인 내용으로 들어가 봅시다...\n\nRenderBox 클래스를 사용하여 대상의 위치를 가져올 수 있습니다. localToGlobal 메서드를 사용하여 위젯의 위치를 얻고 `size` 속성을 사용하여 위젯의 크기를 얻습니다. 이 정보를 사용하여 해당 위젯을 중점으로 하는 사각형을 그릴 수 있습니다.\n아래 코드 스니펫을 고려해 보세요:\n\n<div class=\"content-ad\"></div>\n\n클래스 Clipper는 CustomClipper<Path>를 확장합니다. getClip 메서드를 재정의하여 대상 위젯 주변에 사각형을 그립니다.\n대상 위젯의 위치와 크기를 인수로 사용하여 오버레이를 그릴 경로를 반환합니다. PathFillType.evenOdd를 사용하여 사각형 외부 영역을 채웁니다.\n\n```js\n..addRect(\n    Rect.fromLTWH(\n        offset.dx,\n        offset.dy,\n        width,\n        height,\n    ),\n)d\n```\n\n다른 사각형은 오버레이의 크기를 정의합니다. Offset 클래스의 & 연산자를 사용하여 offset 자체와 우측 항에서 크기를 사용하여 Rect 객체를 만듭니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n..addRect(Offset.zero & size);\n```\n\n오버레이를 그리는 데에 필요한 모든 것입니다. 이 클리퍼를 위젯에서 사용하여 대상 위젯을 쇼케이스할 수 있습니다. 다음 과제는 대상의 위치를 파악하는 것입니다.\n대상 위젯의 위치를 얻기 위해 RenderBox를 사용합니다. element 클래스의 findRenderObject 메서드를 사용하여 대상 위젯의 RenderBox 객체를 가져옵니다. 그런 다음 localToGlobal 메서드를 사용하여 위젯의 위치를 전역 좌표계로 가져옵니다. (모든 RenderBox는 부모에 대한 상대적인 자신의 위치만 추적하므로 절대 위치를 얻으려면 이를 전역 좌표로 변환해야 합니다.)\n\n```js\nPosition getOffsetAndSize(BuildContext context) {\n  final RenderBox renderBox = context.findRenderObject() as RenderBox;\n  final topLeft = renderBox.localToGlobal(Offset.zero);\n\n  final height = renderBox.size.height;\n  final width = renderBox.size.width;\n\n  return (\n    Offset(\n      topLeft.dx,\n      topLeft.dy,\n    ),\n    height,\n    width,\n  );\n}\n```\n\n이 함수를 사용하여 대상 위젯의 위치와 크기를 가져와서 해당 주변에 오버레이를 그릴 수 있습니다. 버튼이나 다른 트리거를 사용하여 쇼케이스를 토글할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n글로벌 키를 사용하여 대상 위젯의 현재 컨텍스트를 가져옵니다. 그러나 위젯의 컨텍스트를 가져오기 위해 위젯의 컨텍스트 속성을 사용하는 등 다른 방법을 사용할 수도 있습니다.\n사용자 정의 스택을 만들어 오버레이를 표시했습니다. 이는 오버레이의 범위를 현재 페이지로 유지하고자 하는 것입니다. 페이지가 변경되면 오버레이가 사라져야 합니다. 대안으로 `Overlay` 위젯을 사용할 수도 있습니다. 이 위젯은 자재 애플리케이션에 기본 제공됩니다. 이 위젯은 MaterialApp의 오버레이 글로벌 스택에 오버레이를 삽입합니다.\n나머지 코드는 상당히 간단합니다. 쇼케이스를 토글할 버튼과 탭하여 쇼케이스를 닫기 위한 GestureDetector가 있습니다. 위젯의 상태를 업데이트하고 위젯 트리를 다시 빌드하기 위해 setState 메서드를 사용합니다.\n\n전체 코드:\n\n여기까지입니다!! 이제 위젯을 쇼케이스하는 방법을 배웠습니다. 동일한 기술을 사용하여 위젯 위에 앵커를 만드는 데 사용할 수도 있습니다.","ogImage":{"url":"/assets/img/2024-05-27-HowtoshowcaseawidgetinFlutter_0.png"},"coverImage":"/assets/img/2024-05-27-HowtoshowcaseawidgetinFlutter_0.png","tag":["Tech"],"readingTime":3},{"title":"플러터에서의 마이크로 프론트엔드 모듈화 응용 프로그램","description":"","date":"2024-05-27 19:17","slug":"2024-05-27-MicroFrontendsinFlutterModularizationApplication-Part2","content":"\n이전 부분에서는 장단점을 논의하고 구현해야 할 아이디어를 기록했습니다. 이 기사를 처음으로 본 독자들도 있을 것이므로, 우선 part 1을 읽어보세요. 물론, 다시 언급해야 할 부분이 있어요. 시작하기 전에 모두 완료해야 할 체크리스트가 있는지 확인하세요.\n\n![image](/assets/img/2024-05-27-MicroFrontendsinFlutterModularizationApplication-Part2_0.png)\n\n# 구현\n\n이번 파트에서 (마지막인지는 확실하지 않아요 😀), 전통적인 템플릿에 따라 프로젝트를 모듈화해 보겠습니다. 여기에 간단한 프로젝트를 만들었습니다. 로그인 및 홈 화면이 있고 목록보기가 딸려 있는 Clean Architecture를 따릅니다.\n말만 하는 것보다는 코드를 보여줘! 라는 '하드코더'들을 위해, 이번 모듈화 후 프로젝트의 전체 소스 코드입니다. 이 기사를 읽은 후에 먼저 확인해보세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:960/1*xv3Fj652XewSzSdgdXmniw.gif\" />\n\n1. 패키지 관리\n   프로젝트 내의 모든 패키지를 관리하기 위해 패키지 관리가 필요합니다. 예를 들어, 각 모듈에서 한 번에 pub get, build_runner 또는 gen-l10n을 실행할 수 있습니다. 다행히도, invertase에서 개발한 melos를 알아내다.\n\n```js\nname: flutter-micro-frontend\npackages:\n  - modules/*\ncommand:\n  bootstrap:\n    runPubGetInParallel: false\nscripts:\n  gen-l10n:\n    exec: flutter gen-l10n\n    ignoreErrors: true\n```\n\n위와 같은 구성이 필요하므로, melos bootstrap을 실행하여 모든 패키지 내의 종속성을 가져올 수 있고, melos gen-l10n을 실행하여 언어 파일을 생성할 수 있습니다. 아주 쉽죠.\n\n<div class=\"content-ad\"></div>\n\n2. UI 모듈\n\n- 참고: 패키지와 Dart 패키지의 생성에 대해 알아보고, 패키지와 Dart 패키지의 구조를 배우세요.\n\n![이미지](/assets/img/2024-05-27-MicroFrontendsinFlutterModularizationApplication-Part2_1.png)\n\n이것은 UI 모듈의 작은 버전입니다. 물론 큰 프로젝트나 다른 비즈니스 프로젝트의 경우 구조가 다를 수 있습니다. 이 모듈 내부에는 다음 사항을 확인하세요:\n\n- 너무 복잡한 로직이 아니라 UI 요소만 존재합니다.\n- 각 카테고리(대화 상자, 목록보기 등)에 대해 모든 구체적 요소를 내보내는 내보내기 파일이 있어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nexport 'grid_view_load_more.dart';\nexport 'list_view_load_more.dart';\n```\n\n- 전체 앱에서 font를 사용하기 위해 여기에 추가하고 ui_theme에 추가해야 합니다. package/ui/assets/fonts/SFProText-Regular.ttf와 같이 경로 앞에 항상 package/ui가 있어야 합니다.\n- Main App의 localizationsDelegates 안에 추가하기 위해 LocalizationsDelegate를 export해야 합니다.\n\n이게 전부에요. 이 package에 대해 더 이상 논의할 주제는 없습니다.\n\n3. Core Module\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-27-MicroFrontendsinFlutterModularizationApplication-Part2_2.png)\n\n앱 전체와 다른 모듈의 뼈대입니다. 이 모듈 내의 코드를 추가하거나 수정할 때 신중히 고려해 주세요. 몇 가지 주의 사항이 있어요:\n\n- 기존 프로젝트에서는 상태 관리, 네비게이션 및 종속성 주입에 Get을 사용했지만, 모듈화할 때는 순수한 Flutter 네비게이션과 get_it을 사용합니다. 이는 모듈을 만들 때 다른 라이브러리에 너무 의존하지 않도록 하기 위함입니다. 모듈을 많은 곳에서 재사용하려면 심지어 파트너 앱 내에서도 모듈을 사용한다는 보장이 없으므로 Get을 사용하고 있다는 가정을 할 수 없습니다. 따라서 모듈이나 패키지를 만들 때 다른 라이브러리에 가능한 많이 의존하지 않도록 노력해 주세요.\n- 여전히 상태 관리에 Get을 사용했기 때문에 여기에는 일부 베이스 뷰와 베이스 컨트롤러가 있습니다. BLoC를 선호하는 경우 BLoC용 베이스 코드도 있습니다. 그러나 이상적으로는 동기화를 위해 모든 모듈에 하나의 상태 관리만 사용해야 합니다.\n- 이 모듈은 여전히 Clean Architecture를 따릅니다. API 호출을 위해 Dio와 Retrofit을 사용했습니다. 따라서 여기서 dio와 일부 설정을 만들겠습니다.\n- core 내에서 사용한 모든 기타 서드파티 패키지를 내보내는 libs.dart가 있습니다. 다른 패키지 내에서 이를 사용하거나 수정해야 할 경우, 핵심 모듈을 가져오기만 하면 됩니다.\n\n![이미지](/assets/img/2024-05-27-MicroFrontendsinFlutterModularizationApplication-Part2_3.png)\n\n<div class=\"content-ad\"></div>\n\n4. 주요 애플리케이션\n   주요 애플리케이션으로 돌아갑니다. UI 모듈에서 말했듯이, MaterialApp에 localizationsDelegates 및 테마를 추가해야 합니다. 이것이 앱 구성에 관한 전부입니다. 임시로 빈 Splash 화면과 홈 화면을 만듭니다. 기능 모듈을 몇 개 개발하고 그것에 추가할 것입니다.\n\n좋은 준비가 되었습니다. 이제 첫 번째 모듈을 구현하기 시작합니다. 대부분의 시스템이 필요로 하는 인증입니다.\n\n5. 인증 모듈\n   의존성은 Auth.start(context)를 호출하면 됩니다. 그런 다음 다음 비즈니스를 위한 결과를 얻습니다. 로그인, 등록, 비밀번호 재설정, OTP 등과 같은 모든 로직 또는 UI 페이지는 이 모듈에서 구현될 것입니다. 이것이 놀랍군요. 주요 앱은 인증에 대한 어떤 로직도 알지 못했습니다.\n\n<div class=\"content-ad\"></div>\n\n- 보시다시피, 리포지토리, 클라이언트 또는 유스케이스와 같은 각 클래스/파일에 auth 접두사를 추가할 필요가 없습니다.\n- 세션 관리, 액세스 토큰 저장, 리프레시 토큰과 같은 것은 이 모듈 안에서만 구현했습니다.\n- 전체 인증 모듈의 모든 로직을 관리하는 AuthController가 있습니다. 이는 모든 다른 클래스가 호출할 수 있는 전역 스트림과 같은 것입니다. 그 안에 있는 코드 일부를 살펴보겠습니다.\n\n```js\n  late Completer completer;\n\n  Future<void> auth(BuildContext context) {\n    completer = Completer();\n    final result = CheckIsLoggedInUseCase(GetIt.instance.get<Repository>()).execute();\n    result.fold((left) {\n      if (left) {\n        completer.complete();\n      } else {\n        Navigator.pushAndRemoveUntil(context, Routes.checkPhone(), (route) => false);\n      }\n    }, (right) {\n      showError(context, right);\n    });\n    return completer.future;\n  }\n\n  void loginSuccessfully() {\n    if (!completer.isCompleted) {\n      completer.complete();\n    }\n  }\n```\n\n다른 화면이 loginSuccessfully()를 호출할 때마다, AuthController가 결과를 반환하고 인증 프로세스를 완료합니다.\n\n메인 애플리케이션의 스플래시 화면으로 돌아와서, auth 함수를 호출하기만 하면 됩니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nclass SplashController extends BaseController {\n  @override\n  void onReady() async {\n    super.onReady();\n    await Auth.start(Get.context);\n    _goToHome();\n  }\n\nvoid _goToHome() {\n    Get.offNamedUntil(MainRouteName.home, (route) => false);\n  }\n}\n```\n\n너무 좋네요! 인증 프로세스가 완료되면 홈 화면이 열릴 거예요. 완벽해요!!!\n\n6. 제품 모듈\n   이것은 데모하고 싶은 샘플 모듈뿐이에요. 거의 모든 일반 모듈이 동일한 개념을 가지고 있어요:\n\n![이미지](/assets/img/2024-05-27-MicroFrontendsinFlutterModularizationApplication-Part2_5.png)\n\n<div class=\"content-ad\"></div>\n\n이 데모에서는 홈 화면용 HomeProductWidget을 export해야 합니다. 이 모듈에 대해 이전 모듈을 알고 있다면 더 이상 언급할 것이 없습니다. 홈 화면 안에서 다음과 같이 호출하기만 하면 됩니다:\n\n```js\nimport 'package:product/product.dart';\n\nclass HomeScreen extends StatelessWidget {\n  const HomeScreen({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return const HomeProductWidget();\n  }\n}\n```\n\n여기서 앱을 완전히 모듈화했습니다.\n\n모듈화된 프로젝트의 전체 소스 코드입니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n모듈화는 앱 개발에서 모듈화, 코드 재사용성 및 확장성을 장려하는 아키텍처 패턴으로 인기를 얻고 있습니다. 물론, 비즈니스와 리소스에 따라 전통적인 아키텍처를 사용하거나 패키지로 분리할 수도 있습니다.\n\n이 글에서 무언가를 배웠다면 좋아요를 눌러주시기 바랍니다. 만일 앱을 모듈화하는 과정에서 혼란이 있거나 문제가 발생한다면 댓글을 남겨주시고 함께 공부해보도록 하겠습니다.\n","ogImage":{"url":"/assets/img/2024-05-27-MicroFrontendsinFlutterModularizationApplication-Part2_0.png"},"coverImage":"/assets/img/2024-05-27-MicroFrontendsinFlutterModularizationApplication-Part2_0.png","tag":["Tech"],"readingTime":6},{"title":"플러터 스택 주간 소식 제125호","description":"","date":"2024-05-27 19:16","slug":"2024-05-27-FlutterStackWeeklyIssue125","content":"\n\n<img src=\"/assets/img/2024-05-27-FlutterStackWeeklyIssue125_0.png\" />\n\n# 기사\n\n## 플러터에서 JSON 파일을 이용한 다국어 지원\n\n플러터에서 애플리케이션을 국제화하는 다양한 방법이 있습니다. 일반적인 방법 중 하나는 JSON 파일을 사용하는 것입니다. 이 글에서는 플러터에서 JSON 파일을 이용한 다국어 지원에 대해 알아보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n## AWS로 풀스택 Dart 배포하기, 제 III부: AWS로 배포하기\n\n이 시리즈의 지난 두 글에서 우리는 헤들리스 CMS에서 블로그 콘텐츠를 가져오기 위한 Dart Frog API를 구축하고 콘텐츠를 브라우저에 표시하기 위해 Flutter 웹 앱을 구축하는 데에 대해 논의했습니다. 이 글에서는 AWS App Runner, Amplify 및 GitHub Actions를 사용하여 AWS에 풀스택 Dart 블로그 앱을 배포하는 방법을 배우게 될 것입니다.\n\n## Flutter에서 일반적인 로컬라이제이션 실수 피하기: 최상의 실천 방법과 해결책\n\n이 글에서는 Flutter 앱 로컬라이제이션 중에 만날 수 있는 일반적인 실수들에 대해 살펴보고 이를 극복하기 위한 효과적인 전략을 탐구할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## 플러터: 모바일 UI 테스트 자동화 도구 선택하기\n\n이 기사는 Flattium, Patrol, Mastero 등의 자동화 도구 경험을 공유합니다.\n\n## 후원사\n\n# 라이브러리 및 자원\n\n<div class=\"content-ad\"></div>\n\n## 내부_http_서버\n\n이 패키지는 앱 내부에 HTTP 서버를 만들 수 있도록 도와주는 패키지이며, 사용자가 웹 서버 내에서 파일을 업로드할 수 있습니다.\n\n## elevarm_ui\n\nFlutter용 Elevarm 디자인 시스템입니다.\n\n<div class=\"content-ad\"></div>\n\n# 비디오\n\n- Observable Flutter #43: On-device LLMs with Gemma\n\n- Flutter로 멀티 플랫폼 게임 만들기\n\n- Google I/O 2024에서 5분 안에 알아보는 Flutter\n\n<div class=\"content-ad\"></div>\n\n# 다음 주간을 위한 링크를 제안합니다\n\n제안과 피드백을 환영합니다!\n\n콘텐츠나 피드백이 있으시면 Canopas의 트위터 핸들인 @canopas_eng로 연락해주시면 다음 주간에서 고려하도록 하겠습니다.","ogImage":{"url":"/assets/img/2024-05-27-FlutterStackWeeklyIssue125_0.png"},"coverImage":"/assets/img/2024-05-27-FlutterStackWeeklyIssue125_0.png","tag":["Tech"],"readingTime":2},{"title":"바닐라 JS로 만들어진 웹캠 인피니티 미러","description":"","date":"2024-05-27 19:14","slug":"2024-05-27-MirrorMirrorAWebcamInfinityMirrorwithVanillaJS","content":"\n\n<img src=\"/assets/img/2024-05-27-MirrorMirrorAWebcamInfinityMirrorwithVanillaJS_0.png\" />\n\n# 소개\n\n프로그래머로서, 종종 기술 스택 레이어, 복잡한 구조 및 다양한 통합이 포함된 대규모 프로젝트에 참여합니다. 때로는 기본으로 돌아가 간단한 것을 만드는 것도 재미있죠.\n\n이 프로젝트에서는 HTML 및 JavaScript만 사용하여 브라우저 기반 웹 애플리케이션을 만들어 실시간 인피니티 미러를 생성하고 이미지 뒤집기/회전/저장 버튼을 추가합니다.\n\n<div class=\"content-ad\"></div>\n\n지금까지 데스크톱, iOS 및 안드로이드 브라우저에서 작동하는 것으로 확인했습니다.\n\n## 컨셉\n\n아이디어는 간단합니다: 웹캠 피드를 사용하여 브라우저에서 직접 시각적으로 매력적인 효과를 만드는 것입니다. 프로젝트는 비디오 피드를 수평으로 뒤집는, 회전하는, \"무한 거울\" 효과를 적용하는 및 현재 뷰를 이미지 파일로 저장하는 기능을 구현하는 것을 목표로 했습니다. 이는 HTML5 비디오 요소와 캔버스 API의 응용을 현실세계 시나리오에서 탐색하는 간단한 방법을 제공합니다.\n\n## 도구 및 기술\n\n<div class=\"content-ad\"></div>\n\n- HTML5: 비디오 표시 및 제어 요소를 구성하는 데 사용됩니다.\n- CSS3: 웹 페이지를 스타일링하여 요소가 시각적으로 매력적이고 기능적으로 배치되도록 합니다.\n- JavaScript: 상호작용의 핵심으로 웹캠 액세스를 처리하고 실시간으로 비디오 피드를 조작합니다.\n- Bootstrap: 빠르고 반응형 버튼 스타일링을 위해 Bootstrap을 조금 사용합니다.\n- WebRTC(웹 실시간 통신): 이 기술은 사용자 카메라에서 비디오를 직접 캡처하고 스트리밍하는 수단을 제공합니다.\n\n## 레이아웃 설정\n\nHTML 페이지는 비디오 요소와 캔버스를 호스팅하도록 설정되었습니다. 비디오 요소는 웹캠 피드를 캡처하고, 캔버스는 다양한 그래픽 변환을 적용하는 데 사용됩니다.\n\n```js\n<div class=\"title\">Mirror Mirror</div>\n<div class=\"btn-group\" role=\"group\">\n    <button id=\"btnToggle\" class=\"btn btn-success\">켜기</button>\n    <button id=\"btnEffect\" class=\"btn btn-warning\">무한 효과</button>\n    <button id=\"btnEdge\" class=\"btn btn-dark\">가장자리 감지</button>\n    <button id=\"btnFlip\" class=\"btn btn-primary\">수평 뒤집기</button>\n    <button id=\"btnRotate\" class=\"btn btn-secondary\">회전</button>\n    <button id=\"btnSave\" class=\"btn btn-info\">사진 저장</button>\n</div>\n</div>\n<div id=\"canvas-container\">\n    <canvas id=\"canvas\"></canvas>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n## 자바스크립트에서 제어 버튼 설정하기\n\n사용자 클릭을 감지하고 기능을 선택하려면 각 버튼에 대한 클릭 핸들러를 추가합니다. 이 버튼들은 비디오 피드를 켜고 끄거나, 무한 거울 또는 가장자리 감지와 같은 특수 효과를 적용하고, 이를 모바일 기기나 태블릿에서 사용하는 경우 뒤집거나 회전할 수 있습니다.\n\n만약 비디오 피드가 일시 중지된 경우 이미지는 마지막 이미지를 유지합니다. 언제든지 save 버튼을 사용하여 장치의 로컬 파일 시스템에 마지막 사진을 저장할 수 있습니다.\n\n```js\n document.addEventListener('DOMContentLoaded', function () {\n  const canvas = document.getElementById('canvas');\n  const context = canvas.getContext('2d');\n  let videoStream = null;\n  let video = document.createElement('video');\n  let flipHorizontal = false;\n  let infinityEffect = false;\n  let rotationAngle = 0;\n  let edgeDetectionEnabled = false;\n\n  const btnToggle = document.getElementById('btnToggle');\n  const btnFlip = document.getElementById('btnFlip');\n  const btnEffect = document.getElementById('btnEffect');\n  const btnRotate = document.getElementById('btnRotate');\n  const btnSave = document.getElementById('btnSave');\n\n  document.getElementById('btnEdge').addEventListener('click', function () {\n      edgeDetectionEnabled = !edgeDetectionEnabled;\n  });\n\n  btnToggle.addEventListener('click', function () {\n      if (videoStream) {\n          videoStream.getTracks().forEach(track => track.stop());\n          videoStream = null;\n          btnToggle.textContent = 'Turn On';\n          btnToggle.classList.replace('btn-danger', 'btn-success');\n      } else {\n          navigator.mediaDevices.getUserMedia({ video: true })\n              .then(stream => {\n                  videoStream = stream;\n                  video.srcObject = stream;\n                  video.play();\n                  btnToggle.textContent = 'Turn Off';\n                  btnToggle.classList.replace('btn-success', 'btn-danger');\n                  draw();\n              })\n              .catch(error => {\n                  console.error('Error accessing the camera: ', error);\n              });\n      }\n  });\n\n  btnFlip.addEventListener('click', function () {\n      flipHorizontal = !flipHorizontal;\n  });\n\n  btnEffect.addEventListener('click', function () {\n      infinityEffect = !infinityEffect;\n  });\n\n  btnRotate.addEventListener('click', function () {\n      rotationAngle = (rotationAngle + 90) % 360;\n      canvas.style.transform = `rotate(${rotationAngle}deg)`;\n  });\n\n  btnSave.addEventListener('click', function () {\n      if (canvas) {\n          const link = document.createElement('a');\n          link.download = 'infinity-mirror.png';\n          link.href = canvas.toDataURL('image/png');\n          link.click();\n      }\n  });\n```\n\n**이 상태유지 메시지가 도움이 돼셨나요?**\n\n<div class=\"content-ad\"></div>\n\n## 카메라 접근하기\n\n`navigator.mediaDevices.getUserMedia` API를 사용하여 웹캠 피드를 설정했어요. 이 API는 간단해서 미디어 입력을 사용할 수 있는 방법을 제공해요. 카메라를 사용할 권한을 요청하는 대화 상자가 나타날 거예요.\n\n```js\nnavigator.mediaDevices.getUserMedia({ video: true })\n.then(stream => {\nconst video = document.createElement('video');\nvideo.srcObject = stream;\nvideo.play();\n})\n.catch(error => {\nconsole.error('카메라에 접근하는 중 오류 발생: ', error);\n});\n```\n\n## 미러 효과를 위한 비디오 피드 조작\n\n<div class=\"content-ad\"></div>\n\n비디오 피드를 다루는 것이 더 재미있어질 때입니다. 저는 비디오를 수평으로 뒤집거나 회전하거나 무한 거울 효과를 적용하는 함수를 작성했습니다. 이 효과는 비디오 피드의 여러 배율 및 반투명 복사본을 생성하여 거울 효과를 만듭니다. scaleFactor 및 alphaFactor 변수로 거울 이미지의 인스턴스 수나 안쪽 여백을 변경할 수 있습니다. 제 데스크탑에서 실행 속도가 얼마나 빠른지 고려할 때, 나중에 업데이트에서 해당 슬라이더를 추가할 수도 있겠죠. 이에 관심이 있다면 GitHub 레포지토리에 이슈를 남겨주세요.\n\n```js\nfunction applyInfinityEffect(context, width, height) {\n    const numberOfReflections = 5;\n    let scaleFactor = 0.5;\n    let alphaFactor = 0.9;\n\n    for (let i = 0; i < numberOfReflections; i++) {\n        context.globalAlpha = Math.pow(alphaFactor, i + 1);\n        const newWidth = width * Math.pow(scaleFactor, i + 1);\n        const newHeight = height * Math.pow(scaleFactor, i + 1);\n        const dx = (width - newWidth) / 2;\n        const dy = (height - newHeight) / 2;\n\n        context.drawImage(canvas, 0, 0, width, height, dx, dy, newWidth, newHeight);\n    }\n\n    context.globalAlpha = 1.0;\n}\n```\n\n## 소벨 필터를 사용한 에지 검출\n\n이미지 처리에 익숙한 사람을 위해 비디오의 각 프레임을 가져와 \"에지\" 또는 각 객체의 경계를 탐지하는 필터를 실행할 수 있습니다. 이 작업은 각 프레임에 2D 그라디언트를 적용하는 소벨 연산자를 사용하여 수행됩니다. 우리는 이를 보여주기 위해 회색조로 변환합니다. 소벨 연산자에 대한 추가 배경 정보는 여기서 볼 수 있습니다. 코드를 수정하고 다른 이미지 처리 작업을 추가할 수도 있습니다. 추가할 수 있는 많은 고전적인 신호 처리 필터가 있지만 UI 컨트롤의 수가 상당히 늘어날 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction applyEdgeDetection(context, width, height) {\n    const imageData = context.getImageData(0, 0, width, height);\n    const grayScaled = grayscale(imageData.data, width, height);\n    const edgeData = sobelFilter(grayScaled, width, height);\n    context.putImageData(new ImageData(edgeData, width, height), 0, 0);\n}\n\nfunction grayscale(data, width, height) {\n    const result = new Uint8ClampedArray(width * height * 4);\n    for (let i = 0; i < data.length; i += 4) {\n        const avg = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];\n        result[i] = avg; // red\n        result[i + 1] = avg; // green\n        result[i + 2] = avg; // blue\n        result[i + 3] = 255; // alpha\n    }\n    return result;\n}\n\n\nfunction sobelFilter(data, width, height) {\n    const kernelX = [\n        [-1, 0, 1],\n        [-2, 0, 2],\n        [-1, 0, 1]\n    ];\n    const kernelY = [\n        [-1, -2, -1],\n        [0, 0, 0],\n        [1, 2, 1]\n    ];\n\n    const sobelData = new Uint8ClampedArray(width * height * 4); // Correctly sized array\n\n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            let px = (y * width + x) * 4;\n            let gx = 0;\n            let gy = 0;\n\n            for (let cy = -1; cy <= 1; cy++) {\n                for (let cx = -1; cx <= 1; cx++) {\n                    const cpx = ((y + cy) * width + (x + cx)) * 4;\n                    gx += data[cpx] * kernelX[cy + 1][cx + 1];\n                    gy += data[cpx] * kernelY[cy + 1][cx + 1];\n                }\n            }\n\n            const magnitude = Math.sqrt(gx * gx + gy * gy);\n            sobelData[px] = sobelData[px + 1] = sobelData[px + 2] = magnitude;\n            sobelData[px + 3] = 255; // alpha\n        }\n    }\n    return sobelData;\n}\n```\n\n## Canny Filter를 사용한 Edge Detection\n\nSobel은 그 연산 부하가 비교적 적은 편이기 때문에 인기 있는 선택지입니다. Canny Filter 또한 엣지 검출을 제공하지만 이미지를 그라디언트를 취하기 전에 블러처리하여 연산량이 많이 필요합니다. 이로 인해 라인 드로잉 형식의 효과를 더 많이 만들어 냅니다. Canny Filter에 대해 더 알고 싶다면 여기를 참고하세요. Canny Filter (및 해당 파생)는 콘크리트 입자나 작은 직물 패턴과 같은 '질감있는' 가장자리보다는 덜 민감합니다.\n\n코드에서 Canny 필터를 활성화하는 방법은 아래에 나와 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\n function applyCannyEdgeDetection(context, width, height) {\n    const imageData = context.getImageData(0, 0, width, height);\n    const grayScaled = grayscale(imageData.data, width, height);\n    const blurred = gaussianBlur(grayScaled, width, height);\n    const edgeData = cannyFilter(blurred, width, height);\n    context.putImageData(new ImageData(edgeData, width, height), 0, 0);\n}\n\nfunction grayscale(data, width, height) {\n    const result = new Uint8ClampedArray(width * height * 4);\n    for (let i = 0; i < data.length; i += 4) {\n        const avg = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];\n        result[i] = avg; // red\n        result[i + 1] = avg; // green\n        result[i + 2] = avg; // blue\n        result[i + 3] = 255; // alpha\n    }\n    return result;\n}\n\nfunction gaussianBlur(data, width, height) {\n    const kernel = [\n        [1, 2, 1],\n        [2, 4, 2],\n        [1, 2, 1]\n    ];\n    const kernelWeight = 16;\n    const blurredData = new Uint8ClampedArray(width * height * 4);\n\n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            let sum = 0;\n            let sumAlpha = 0;\n\n            for (let cy = -1; cy <= 1; cy++) {\n                for (let cx = -1; cx <= 1; cx++) {\n                    const pixel = ((y + cy) * width + (x + cx)) * 4;\n                    const weight = kernel[cy + 1][cx + 1];\n                    sum += data[pixel] * weight;\n                    sumAlpha += data[pixel + 3];\n                }\n            }\n\n            const pixelIndex = (y * width + x) * 4;\n            blurredData[pixelIndex] = sum / kernelWeight;\n            blurredData[pixelIndex + 1] = sum / kernelWeight;\n            blurredData[pixelIndex + 2] = sum / kernelWeight;\n            blurredData[pixelIndex + 3] = sumAlpha / kernelWeight;\n        }\n    }\n    return blurredData;\n}\n\nfunction cannyFilter(data, width, height) {\n    // Simplified Canny edge detection\n    const sobelData = sobelFilter(data, width, height);\n    const result = new Uint8ClampedArray(width * height * 4);\n\n    for (let i = 0; i < sobelData.length; i += 4) {\n        const magnitude = sobelData[i];\n        if (magnitude > 50) {\n            result[i] = result[i + 1] = result[i + 2] = 255; // white\n            result[i + 3] = 255; // alpha\n        } else {\n            result[i] = result[i + 1] = result[i + 2] = 0; // black\n            result[i + 3] = 255; // alpha\n        }\n    }\n\n    return result;\n}\n```\n\n## 결론\n\n이 프로젝트는 간단한 웹 기술을 사용하여 얼마나 많은 작업을 수행할 수 있는지를 상기시켜주는 것이었습니다. HTML5, JavaScript 및 최신 웹 기술을 사용하면 비디오 스트림을 실시간으로 프레임별로 처리할 수 있습니다.\n\n이를 통해 재미있는 경험을 할 수 있기를 바라며, 웹 기술 선택에 대한 의견을 주시면 감사하겠습니다.","ogImage":{"url":"/assets/img/2024-05-27-MirrorMirrorAWebcamInfinityMirrorwithVanillaJS_0.png"},"coverImage":"/assets/img/2024-05-27-MirrorMirrorAWebcamInfinityMirrorwithVanillaJS_0.png","tag":["Tech"],"readingTime":11},{"title":"HTML 학습 로드맵(2024년 최신)","description":"","date":"2024-05-27 19:13","slug":"2024-05-27-RoadmapforlearningHTML","content":"\n\n\n![Learning HTML](/assets/img/2024-05-27-RoadmapforlearningHTML_0.png)\n\n웹 개발을 시작하는 좋은 출발점은 HTML(Hypertext Markup Language)을 배우는 것입니다. 이 과정을 안내하는 로드맵이 있어요:\n\n시작하려면 다음 링크를 참조하세요: [https://www.w3schools.com/html/default.asp](https://www.w3schools.com/html/default.asp)\n\n# 초보자 레벨:\n\n\n<div class=\"content-ad\"></div>\n\n- 기본 사항 이해하기:\n\n- HTML이 무엇이며 웹 개발에서의 역할을 배웁니다.\n- HTML 문서의 구조를 이해합니다.\n- `html`, `head`, `body`, `p`, `h1`에서 `h6`, `a`, `img` 등과 같은 기본 HTML 태그를 살펴봅니다.\n\n2. 텍스트 서식 지정:\n\n- `strong`, `em`, `u`, `del`, `ins`, `sup`, `sub`와 같은 태그를 사용하여 텍스트 서식을 지정하는 방법을 배웁니다.\n\n<div class=\"content-ad\"></div>\n\n3. 리스트: (네비게이션 바에 중요한 개념)\n\n- 순서가 있는 (`ol`) 및 순서가 없는 (`ul`) 목록 작성 방법과 목록 항목 (`li`)을 배웁니다.\n\n4. 링크 및 네비게이션:\n\n- `a` 태그로 하이퍼링크를 만드는 방법 이해하기.\n- 외부 페이지, 내부 페이지 및 페이지 내 특정 섹션으로 연결하는 방법 탐구하기.\n\n<div class=\"content-ad\"></div>\n\n5. 이미지:\n\n- `img` 태그를 사용하여 이미지를 삽입하는 방법을 배워보세요.\n\n6. 폼:\n\n- `form`, `input`, `textarea`, `select`, 그리고 `button`과 같은 태그를 사용하여 폼을 만드는 기본적인 방법을 이해해보세요.\n\n<div class=\"content-ad\"></div>\n\n7. 시멘틱 HTML:\n\n- `header`, `nav`, `main`, `article`, `section`, `footer`와 같은 시멘틱 HTML 요소에 대해 알아보고 구조화된 문서를 생성하는 데 이들이 어떤 역할을 하는지 이해하세요.\n\n8. 속성:\n\n- HTML 태그 안에서 속성을 사용하는 방법을 이해하세요.\n- `class`, `id`, `src`, `alt`, `href` 등과 같은 일반적인 속성을 살펴보세요.\n\n<div class=\"content-ad\"></div>\n\n# 중급 레벨:\n\n- 테이블:\n\n  - `table`, `tr`, `td`, `th`와 같은 태그를 사용하여 테이블을 만드는 방법 배우기\n  - 테이블 구조와 형식 이해하기\n\n- 내장 콘텐츠:\n\n<div class=\"content-ad\"></div>\n\n- `iframe`, `audio`, `video`을 사용하여 비디오 및 오디오와 같은 멀티미디어 콘텐츠를 임베딩하는 방법을 탐색해보세요.\n\n3. HTML 양식과 입력 유형:\n\n- 텍스트, 체크박스, 라디오, 제출 등 다양한 입력 유형을 이해하여 양식에 대해 깊이 파고들어보세요.\n- 양식 유효성 검사에 대해 알아보세요.\n\n4. HTML5의 새로운 기능:\n\n<div class=\"content-ad\"></div>\n\n- 새로운 HTML5 기능인 `article`, `section`, `header`, `footer`, `nav`, `figure`, `figcaption` 등을 살펴보세요.\n\n5. HTML DOM (지금은 선택 사항입니다. JavaScript의 기본 지식이 필요합니다)\n\n# 고급 레벨:\n\n- 접근성:\n\n<div class=\"content-ad\"></div>\n\n- HTML 접근성을 높이기 위한 ARIA 역할과 속성 사용 방법에 대해 배워보세요.\n\n2. 반응형 디자인:\n\n- 미디어 쿼리와 유연한 그리드 시스템을 사용하여 반응형 레이아웃을 만드는 방법을 이해하세요.\n\n3. SEO 기본 사항:\n\n<div class=\"content-ad\"></div>\n\n- 기초 SEO (검색 엔진 최적화) 원리에 대해 배워보세요.\n\n4. HTML 의미론과 모범 사례:\n\n- 깨끗하고 의미 있는 HTML 코드를 작성하는 모범 사례를 이해하세요.\n\n# 참고: — 연습하고 프로젝트를 만들어 보세요:\n\n<div class=\"content-ad\"></div>\n\n- 작은 프로젝트를 만들어 지식을 적용해보세요.\n- 개인 웹사이트나 포트폴리오를 만들어 자신의 기술을 소개해보세요.\n- 오픈 소스 프로젝트에 기여하거나 GitHub에서 협업해보세요.\n\n# 추가 자료:\n\n- HTML에 대한 우수한 온라인 참고 자료로 W3Schools와 MDN Web Docs가 있습니다 (MDN은 선택 사항).\n- Codecademy, Udemy 또는 freeCodeCamp와 같은 플랫폼의 온라인 강의를 통해 구조화된 학습 경로를 제공받을 수 있습니다.\n\nHTML 마스터하기의 핵심은 꾸준한 실습입니다. 발전하면 CSS 같은 스타일링, 그리고 JavaScript 같은 상호 작용성을 제공하는 다른 웹 개발 기술들을 탐험할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 보너스 :-\n\n더 빨리 학습하기 위해 구현하는 방법은 https://www.w3schools.com/html/default.asp 웹 사이트를 방문하여 VS Code나 선호하는 다른 IDE를 열어보세요.\n\nW3school에서 읽은 내용을 IDE에서 직접 실습해보세요. 이것이 가장 빠르게 배우는 방법입니다.\n\n이후에는 HTML과 기본 CSS로 프로젝트를 만들어보세요.\n\n<div class=\"content-ad\"></div>\n\n# 빙고: - HTML 작업이 준비되었습니다 🤩🤩\n\n팔로우하지 않는 걸 잊지 마세요 !!!","ogImage":{"url":"/assets/img/2024-05-27-RoadmapforlearningHTML_0.png"},"coverImage":"/assets/img/2024-05-27-RoadmapforlearningHTML_0.png","tag":["Tech"],"readingTime":3},{"title":"라이트닝 웹 컴포넌트에 대해 SalesForce 개발자가 알아야 할 5가지 중요 사항","description":"","date":"2024-05-27 19:11","slug":"2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents","content":"\n\n\n![image](/assets/img/2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents_0.png)\n\n솔루션 아키텍트이자 전 프론트엔드 개발자로 활동한 저는 많은 Salesforce 프로젝트에서 UI 개발의 지식과 품질에 항상 놀라곤 합니다. 최근 몇 년 동안 Lightning Web Components (LWC)와 Lightning Web Security (LWS)의 도입으로 Salesforce가 일반 웹 표준을 지원하려는 움직임이 계속 확대되었다 하더라도, Aura 및 Lightning Locker와 같은 개념 이후 Salesforce 개발자들은 종종 이 분야에서 중요한 지식 갭을 갖고 Backend 중심적인 경향을 보입니다.\n\n그래서, 이 블로그 포스트를 통해 LWC 개발에서 선수해야 할 몇 가지 중요한 사항을 명확하게 하고자 합니다. 그러나 그에 앞서, 가능한 UI 지식 갭이 왜 존재하는지 알아보기 위해 간단하게 되돌아보겠습니다.\n\n# Salesforce 개발자가 왜 Backend 중심적인지?\n\n\n\n<div class=\"content-ad\"></div>\n\n내 의견으로는 Salesforce 생태계에서 UI 개발에 대한 깊은 지식 부족은 역사적인 문제입니다. 이는 주로 LWC가 2018/19에 출시된 이후에만 사용 가능한 Web Components 기반 UI 프레임워크가 현재 일반적으로 인정받는 웹 표준을 사용하기 때문입니다. 이는 당연히 Salesforce 개발자들 사이에서 JavaScript를 사용한 개발 시 일반적인 표준, 규칙, 그리고 최선의 실행 방법에 대한 인식이 부족하다는 것을 의미합니다. 물론, LWC 이전에도 Salesforce의 맞춤형 UI 개발을 위한 다른 솔루션이 있었지만(Aura 및 Visualforce), 이러한 솔루션들은 일반적인 UI 원칙을 준수하지 않고 플랫폼별이며 개별적이었습니다.\n\n![이미지](/assets/img/2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents_1.png)\n\n그러나 지난 몇 년 동안 Salesforce는 이 방향으로 발전하고 일반적인 UI 개념을 적용하여 플랫폼을 JavaScript 개발자에게 더 매력적으로 만들었습니다. 2020년부터는 Salesforce JavaScript 개발자 1 자격증이 있으며, 시험 자체가 Salesforce 플랫폼과 독립적으로 JavaScript의 일반적인 이해를 테스트합니다.\n\n이제 실질적으로 다가가서, LWC에 대해 꼭 알아야 할 5가지 중요한 사항을 함께 살펴보겠습니다!\n\n<div class=\"content-ad\"></div>\n\n# 1. Apex 없이 작동하는 경우가 많습니다\n\nSalesforce에서는 일반적으로 \"사용자 정의보다 표준\"이라는 지침을 따르며, 이는 일정 부분 UI 개발에도 적용되어야 합니다. 이전에 설명한 바와 같이 백엔드 중심의 개발자들은 종종 UI 구성요소에서 데이터를 로드하고 표시하기 위해 사용자 정의 Apex 컨트롤러를 작성하는 경향이 있습니다. 그러나 Salesforce에는 이러한 사용 사례에 대한 \"표준\" 솔루션이 많이 존재합니다.\n\n![Salesforce](/assets/img/2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents_2.png)\n\nSalesforce는 레코드 및 메타데이터 정보를 로드하는 LWC 개발을 위한 표준 UI API를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n- UI Record API — 레코드를 위한 일반적인 CRUD 작업을 허용합니다.\n- UI Object Info API — 객체 메타데이터 및 픽리스트 값 가져오기\n- GraphQL API — 라이트닝 데이터 서비스 및 GraphQL을 사용하여 데이터 관리\n\n여기에 언급된 API 외에도 더 많은 API가 있습니다. 이러한 표준화된 UI API의 사용은 종종 LWC 코드를 훨씬 더 가독성 있게 만들어주며 Apex 컨트롤러 및 관련 테스트 클래스의 구현과 유지보수를 줄여줍니다.\n\n매우 간단한 예제로 전체 내용을 설명하기 위해, 여기에는 Apex를 사용하여 계정 정보, 즉 이름을 표시하는 LWC로 시나리오를 제시합니다. 이 예에서 \"Apex를 사용하지 않는\" UI Record API를 사용하는 것이 명백하게 선호되는 옵션이 될 것입니다. 솔루션이 단순화되었으므로 필요한 Apex 테스트 클래스 및 오류 처리와 같은 것들은 무시되었습니다.\n\n## Apex와 함께\n\n<div class=\"content-ad\"></div>\n\n\n![Image 3](/assets/img/2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents_3.png)\n\n![Image 4](/assets/img/2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents_4.png)\n\n## Without Apex\n\n![Image 5](/assets/img/2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents_5.png)\n\n\n<div class=\"content-ad\"></div>\n\n# 2. UI 스타일링을 간단하게 유지하세요\n\n시간이 지남에 따라 알게 된 한 가지는 Salesforce 개발자의 공통 \"좋아하는 작업\"은 UI 스타일링입니다. 먼저, Apex와는 달리 UI 개발, 특히 LWC의 경우 여러 언어로 구성되어 있습니다. 이는 JavaScript로 구성 요소의 비즈니스 로직을 설명하는 것뿐만 아니라 HTML로 구조 및 요소를 설명하고 CSS로 스타일링하는 것을 필요로 한다는 것을 의미합니다.\n\n그러나 Salesforce 개발자들이 가끔 소홀히 하는 경향이 있는 것은 스타일링과 관련해 항상 복잡하게 만들 필요가 없다는 점입니다. 올바른 접근 방법을 알지 못한 결과로 종종 나쁜, 때로는 불필요한 사용자 정의 CSS 코드가 발생합니다. 대부분의 경우 올바른 룩 & 필을 얻기 위해 사용자 정의 CSS가 전혀 필요하지 않습니다. 일반적으로 올바른 솔루션 방법을 찾기 위해서는 최대 3 단계만 필요합니다:\n\n<div class=\"content-ad\"></div>\n\n- LWC 구성 요소 참조: 먼저 재사용 가능한 표준 구성 요소를 찾아보는 것이 좋습니다. Salesforce는 미리 구축된 UI 요소, 예를 들어 버튼, 아이콘 또는 데이터 테이블과 같은 미리 만들어진 표준 컴포넌트 라이브러리를 제공하여 작업 또는 구성 요소를 구현하는 데 유용하게 사용할 수 있습니다.\n- SLDS 블루프린트: 1번에서 설명한 미리 만들어진 솔루션을 사용하여 원하는 기능을 구현할 수 없는 경우 SLDS가 도움이 될 수 있습니다. Salesforce Lightning Design System은 Salesforce 룩 & 필을 따르는 LWC를 디자인하는 데 사용할 수 있는 템플릿 및 도구를 제공합니다. 이를 통해 Salesforce UI에 완벽하게 통합되는 개별 기능을 디자인할 수 있습니다. 또한 SLDS는 정렬, 테두리, 안쪽 여백 등과 같은 표준 스타일링 요구 사항을 해결하는 많은 CSS 유틸리티 클래스를 제공하여 사용자 정의 CSS를 작성하지 않아도 됩니다.\n- 사용자 정의 CSS: 1번과 2번이 적용되지 않을 때에만 사용자 정의 CSS 스타일링을 고려해야 합니다. 예를 들어 고객의 기업 이미지에 맞추어 Experience 사이트용 LWC를 구축할 때 특정 디자인 요구 사항을 충족해야 하는 경우에 사용될 수 있습니다.\n\n# 3. 웹 API 활용\n\n특히 더 복잡한 UI 요구 사항을 구현할 때, 개발자들로부터 종종 \"Salesforce에서는 불가능하다\" 또는 \"Salesforce 문서에서 이에 대한 정보를 찾을 수 없다\"라는 말을 듣곤 합니다. Salesforce 개발자들은 주로 자체 생태계와 관련된 표준 및 문서 내에서만 활동하는 경향이 있습니다. 이는 Salesforce에 특화된 백엔드 프레임워크인 Apex에 대해서는 완벽히 타당한 이유이지만, LWC의 경우에는 종종 기본 웹 표준에 기반하므로 다양한 가능성을 확장하는 경우가 많습니다.\n\n![이미지](/assets/img/2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents_6.png)\n\n<div class=\"content-ad\"></div>\n\n물론, 항상 LWC 프레임워크 자체에서 제공하는 도구와 옵션부터 시작해야 합니다. 그러나 이들이 항상 충분하지는 않거나 모든 것을 다루지 않을 수 있습니다. 이 경우에는 해당 웹 API에 의존하거나 아니면 적절한 해결책을 찾기 위해 제3자 라이브러리를 통합해야 할 수도 있습니다. MDN 웹 문서는 사용 가능한 웹 API에 대한 포괄적인 문서화를 제공하는 적절한 소스입니다. 그럼에도 불구하고, 항상 주의해서 이를 처리하고 해당 이유를 신중하게 고려해야 합니다.\n\n다양한 웹 API와 LWC로 어떤 것을 달성할 수 있는지에 대한 영감이 필요하다면, 몇 가지 예제를 담고 있는 다음 블로그 포스트들을 살펴보시기 바랍니다:\n\n# 4. 시간을 절약하고 로컬에서 개발하기\n\nLWC 개발의 시간 소모적인 측면 중 하나는 종종 개발이 Visual Studio Code(또는 다른 IDE)에서만 가능하다는 점이며, 최신 변경 사항을 검토하고 테스트하기 위해 새 코드를 연결된 Salesforce 조직에 계속 푸시해야 한다는 필요성을 포함합니다. 특히 미세한 스타일 조정에서는 이것이 신속하게 지루하고 피곤한 작업이 될 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n판매 포스를 제외한 다른 UI 프레임워크에서는 React나 Angular 같은 로컬 개발 서버 사용이 흔한 표준이므로 이런 상황을 피할 수 있어요. 여기서 큰 장점은 변경 사항을 먼저 배포할 필요가 없고, 대신 해당 파일을 저장하면 자동으로 업데이트되는 로컬 서버에서 직접 표시되는 점이에요. 그러나 많은 판매 포스 개발자들이 인식하지 못하는 것은 판매 포스에서도 LWC 개발을 위한 이 옵션이 존재한다는 점이죠. 아마도 이 기능이 여전히 베타 상태이기 때문일 것입니다. 하지만 저는 이미 많이 사용해봤고, 제 의견으로는 신뢰성 있게 사용할 수 있고, 그러므로 굉장히 과소평가된 기능이라고 말할 수 있어요.\n\n![로컬 개발 GIF](https://miro.medium.com/v2/resize:fit:1400/1*WrIe8vWhnDGLkBjLZKLGgQ.gif)\n\n로컬 개발에 대한 자세한 내용 및 설정 단계에 대한 필수 정보가 있는 블로그 포스트를 여기에서 찾을 수 있어요:\n\n# 5. UI 단위 테스트를 고려하세요\n\n<div class=\"content-ad\"></div>\n\n제가 Salesforce와 함께 일하면서 전반적인 테스트 방법론에 대해 생각한 질문 중 하나는:\n\n![이미지](/assets/img/2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents_7.png)\n\n일부 Salesforce 개발자들은 LWC에 대해 Jest를 사용하여 단위 테스트를 작성할 수 있다는 것을 알고 있지만, 직접 작성해 본 사람은 매우 적습니다. 실제로 Salesforce 외부에서 UI를 위한 단위 테스트 작성이 웹 개발에서 흔한 관행인데, 사용자가 상호 작용하게 되는 첫 번째 요소가 UI이므로 이는 직관적으로도 이해됩니다.\n\n모든 Salesforce 개발자와 아키텍트는 프로덕션 배포를 수행할 때 75% 코드 커버리지의 잘 알려진 임계값에 익숙합니다. 그러나 왜 이것이 Apex에만 해당되는 것일까요? 이에 대한 이유는 여러 가지가 있을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n- 역사적으로 Aura에는 실제 테스트 옵션이 없었지만 LWC의 도입으로 이를 해결할 수 있게 되었습니다.\n- LWC 테스트는 로컬에서만 실행되며, Apex와 달리 메타데이터의 일부로 조직에 푸시되지 않아 조직 수준의 코드 커버리지 대상을 강제로 설정할 수 없습니다.\n\n그러나 무시해서는 안 되는 것은 UI 구현의 일반적인 안정성과 품질 향상에 더해, LWC 테스트가 제공하는 추가적인 이점이 있습니다:\n\n- 표준 구문 → 기존 테스트 프레임워크로서 검증된 Jest의 사용, 이는 다른 UI 프레임워크에서도 표준으로 사용됩니다.\n- 빠른 피드백 → Apex 테스트와 비교했을 때 조직이나 데이터 연결에 대한 의존성이 없어서 (스텁/모의 사용).\n- 코드 커버리지 보고 → LWC 및 Apex 구현의 결합 조직 커버리지를 모니터링하는 Sonar와 같은 도구에서 볼 수 있는 다양한 형식의 테스트 보고서 생성을 지원합니다.\n\n![이미지](/assets/img/2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents_8.png)\n\n<div class=\"content-ad\"></div>\n\n# 주요 포인트 및 권장 사항\n\n이 블로그 포스트가 Lightning Web Components에 대해 고찰해 볼 기회를 제공했으면 좋겠습니다. 저는 Salesforce 개발자로써 논의된 주제에 대한 인식을 높이는 것이 중요하다고 생각합니다. 만약 여러분이 개발자이고 앞으로의 Salesforce 프로젝트에서 더 나은 성과를 얻고 싶다면 다음 사항을 고려해보세요:\n\n- 사용자 경험을 항상 염두에 두세요!\n- JavaScript 및 일반적인 개념에 대해 더 많이 학습하세요.\n- Salesforce JavaScript Developer 1 자격증을 취득하려면 노력해보세요. 이 자격증은 JavaScript의 기술적 이해를 테스트합니다. LWC 프레임워크 이해와 해당 자격증 획득은 관련 LWC 슈퍼배지를 완료한 후에 이루어집니다.\n- 제가 준비한 Lightning Web Components 트레일믹스를 확인해보세요. 이 트레일믹스에는 프레임워크에 대해 알아야 할 모든 정보가 포함되어 있습니다.","ogImage":{"url":"/assets/img/2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents_0.png"},"coverImage":"/assets/img/2024-05-27-5ThingsSalesforceDevelopersshouldknowaboutLightningWebComponents_0.png","tag":["Tech"],"readingTime":8}],"page":"53","totalPageCount":151,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":2},"__N_SSG":true}