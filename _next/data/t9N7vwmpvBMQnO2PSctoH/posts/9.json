{"pageProps":{"posts":[{"title":"HTMX 20 이해하기 웹 개발을 단순화하는 방법","description":"","date":"2024-06-22 15:34","slug":"2024-06-22-UnderstandingHTMX20SimplifyingWebDevelopment","content":"\n\n<img src=\"/assets/img/2024-06-22-UnderstandingHTMX20SimplifyingWebDevelopment_0.png\" />\n\nHTMX 2.0 최근 릴리즈로 인해 복잡한 JavaScript 프레임워크를 쉽게 이해할 수 있는 HTML 속성으로 대체할 수 있는 잠재력에 대한 관심을 끌었습니다. 이 새로운 버전은 웹 개발을 간단하게 만들어 개발자들이 JavaScript에 심취하지 않고도 동적이고 상호작용이 가능한 웹 애플리케이션을 만들 수 있도록 하는 것을 목표로 합니다.\n\n## HTMX란?\n\nHTMX는 개발자들이 AJAX, CSS 전환, 웹소켓 및 서버-보낸 이벤트에 HTML 속성을 통해 직접 액세스 할 수 있도록 하는 라이브러리입니다. 주요 목표는 상호작용을 HTML에서 직접 처리함으로써 JavaScript의 필요성을 줄이고 웹 개발을 더 간단하게 만드는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## HTMX 2.0의 주요 기능\n\n- 향상된 HTML 속성: HTMX는 JavaScript를 작성하지 않고도 HTML 속성을 사용하여 클라이언트 측 상호작용(예: HTTP 요청)을 트리거합니다. 이 접근 방식은 코드를 더 쉽게 읽고 유지보수하기 쉽게 만듭니다.\n- WebSockets 및 SSE 지원: HTMX 2.0은 WebSockets 및 Server-Sent Events (SSE)를 내장 지원하여 실시간 데이터 업데이트 및 클라이언트와 서버 간 통신을 가능하게 합니다.\n- 점진적 향상: HTMX는 점진적 향상의 원칙을 따라 JavaScript가 비활성화되거나 사용자의 브라우저에서 완전히 지원되지 않아도 웹 페이지가 작동하도록 보장합니다.\n- 성능 향상: 클라이언트 측 로직의 많은 부분을 서버로 옮기고 필요한 JavaScript의 양을 줄이면 HTMX는 성능을 향상시키고 더 빠른 로드 시간을 제공할 수 있습니다.\n\n## HTMX 작동 방식\n\nHTMX는 요소의 동작을 정의하기 위해 HTML 속성을 이용합니다. 다음은 일반적인 HTMX 속성 몇 가지입니다:\n\n<div class=\"content-ad\"></div>\n\n- hx-get: 요소를 트리거했을 때 지정된 URL로 GET 요청을 보냄.\n- hx-post: 지정된 URL로 POST 요청을 보냄.\n- hx-trigger: 클릭, 마우스 오버 또는 제출과 같이 요청을 트리거하는 이벤트를 정의함.\n- hx-swap: 응답이 DOM에 삽입되는 방식을 결정함. innerHTML, outerHTML, beforebegin, afterbegin, beforeend, afterend과 같은 옵션이 있음.\n\n예시\n\nHTMX를 활용한 간단한 예시입니다:\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>HTMX 예시</title>\n    <script src=\"https://unpkg.com/htmx.org\"></script>\n</head>\n<body>\n    <button hx-get=\"/hello\" hx-trigger=\"click\" hx-swap=\"innerHTML\">\n        Click me\n    </button>\n    <div id=\"content\"></div>\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            htmx.on('htmx:beforeRequest', function(evt) {\n                console.log('요청을 보내기 전:', evt.detail);\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n이 예에서는 버튼을 클릭하면 /hello로 AJAX GET 요청이 전송됩니다. 서버에서의 응답이 버튼의 내부 HTML을 대체합니다. 이 설정을 통해, AJAX 호출 및 DOM 조작을 처리하기 위한 추가 JavaScript 작성이 필요하지 않습니다.\n\n## HTMX 사용의 장점\n\n- 복잡성 감소: 상호 작용 로직을 HTML로 이동함으로써, HTMX는 JavaScript 중심의 프레임워크와 관련된 복잡성을 줄입니다.\n- 유지보수 용이성: 코드는 HTML에서 요소의 동작이 명확하게 정의되므로 유지보수 및 가독성이 향상됩니다.\n- 성능 향상: 더 많은 작업을 서버로 옮기고 클라이언트 측 JavaScript를 줄이면 성능이 향상되고 로드 시간이 줄어듭니다.\n- 사용자 경험 향상: WebSockets 및 SSE를 통한 실시간 업데이트는 웹 애플리케이션의 응답성과 상호 작용성을 개선합니다.\n\n## Laravel과의 통합\n\n<div class=\"content-ad\"></div>\n\nHTMX를 Laravel 애플리케이션에 신속하게 통합하여 동적 동작을 개선할 수 있습니다. 상당한 복잡성을 추가하지 않고 사용할 수 있어요. 아래는 Laravel 프로젝트에 HTMX를 설정하는 방법에 대한 간략한 개요입니다:\n\n- 설정: Laravel Blade 템플릿에 HTMX 라이브러리를 포함시킵니다.\n- 라우트와 컨트롤러: HTMX가 수행하는 AJAX 요청을 처리하기 위한 라우트 및 컨트롤러를 정의하세요.\n- Blade 템플릿: Blade 템플릿에서 HTMX 속성을 사용하여 AJAX 요청을 트리거하고 페이지 일부를 동적으로 업데이트하세요.\n\n라라벨 예시\n\n다음은 Laravel에서 HTMX를 사용하는 예시입니다:\n\n<div class=\"content-ad\"></div>\n\nBlade Template (resources/views/welcome.blade.php)\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Laravel with HTMX</title>\n    <script src=\"https://unpkg.com/htmx.org\"></script>\n</head>\n<body>\n    <button hx-get=\"{ route('getData') }\" hx-trigger=\"click\" hx-target=\"#content\" hx-swap=\"innerHTML\">\n        Get Data\n    </button>\n    <div id=\"content\"></div>\n</body>\n</html>\n```\n\nRoute (routes/web.php)\n\n```js\nRoute::get('/getData', function () {\n    return response()->json(['message' => 'Hello, World!']);\n})->name('getData');\n```\n\n<div class=\"content-ad\"></div>\n\n이 설정은 버튼 클릭이 AJAX 요청을 트리거하여 Laravel 라우트에 전달하고 응답이 추가 JavaScript를 작성하지 않고 div의 내용을 업데이트하는 방법을 보여줍니다.\n\n# 결론\n\nHTMX 2.0은 작업 흐름을 간소화하고 응용 프로그램 성능을 향상시키려는 웹 개발자들에게 흥미로운 개발을 제공합니다. 클라이언트 측 상호 작용을 처리하기 위해 HTML 속성을 활용함으로써, HTMX는 복잡한 JavaScript 프레임워크에 대한 필요성을 줄이고 유지 보수성을 향상시킵니다.\n\n더 많은 독해 및 고급 사용법을 위해서 HTMX 문서를 참조하고 최신 릴리스 및 기능을 확인해 주세요.","ogImage":{"url":"/assets/img/2024-06-22-UnderstandingHTMX20SimplifyingWebDevelopment_0.png"},"coverImage":"/assets/img/2024-06-22-UnderstandingHTMX20SimplifyingWebDevelopment_0.png","tag":["Tech"],"readingTime":4},{"title":"Position Sticky 문제 해결하기 Overflow Clip으로 Overflow Hidden 문제 해결하는 방법","description":"","date":"2024-06-22 15:33","slug":"2024-06-22-OvercomingPositionStickyIssuesSolvingOverflowHiddenProblemswithOverflowClip","content":"\n\n\n<img src=\"/assets/img/2024-06-22-OvercomingPositionStickyIssuesSolvingOverflowHiddenProblemswithOverflowClip_0.png\" />\n\nPosition sticky는 특정 스크롤 위치에 도달했을 때 요소가 뷰포트에 \"붙어 있는\" CSS 위치 지정 속성입니다. 그러나 CSS overflow 속성과 호환되지 않아 종종 \"overflow: hidden\"을 사용하는 상황에서 문제가 발생합니다. 이로 인해 요소가 \"붙어 있지 않고\" 대신 \"고정된 것처럼\" 행동할 수 있습니다. 그러나 이 문제를 해결하는 방법이 있습니다. 대신 \"overflow: clip\"을 사용하는 것입니다.\n\n이 문제에 대한 자세한 내용과 \"overflow: clip\"이 어떻게 문제를 해결하는 데 도움이 되는지 살펴보겠습니다.\n\nPosition sticky: 간단한 개요\n\n\n<div class=\"content-ad\"></div>\n\n우선, position: sticky가 무엇을 하는지 간략히 살펴봅시다. 요소에 position: sticky를 적용하면 일정 지점을 스크롤하면 \"sticky\"가 됩니다. 이로써 요소가 화면 내에 계속 보이게 할 수 있고, 지나치게 스크롤했을 때에도 그대로 보이게 됩니다. 사용자가 웹 사이트를 스크롤하는 동안 계속 보이게 하고 싶은 내비게이션 바, 헤더 및 기타 요소를 만들 때 유용한 속성입니다.\n\noverflow: hidden 문제점\n\nposition: sticky를 사용할 때, CSS overflow 속성을 \"hidden\" 값과 함께 사용하면 제대로 작동하지 않을 수 있습니다. 이는 “overflow: hidden”이 요소에 새로운 블록 형식화 컨텍스트를 만들기 때문입니다. 이것은 요소의 크기와 위치를 제한하는 컨테이너로 작용하므로 자식 요소의 크기와 위치에 영향을 줍니다.\n\nposition: sticky가 적용된 요소가 \"overflow: hidden\" 속성이 적용된 요소 내에 있을 때, 요소는 뷰포트에 대한 위치를 더 이상 알 수 없어 \"붙지\" 못하는 현상이 발생합니다. 대신, 스크롤하면 화면에서 고정된 위치에 남아 있게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n해결책: overflow: clip\n\n좋은 소식은 이 문제에 대한 간단한 해결책이 있다는 것입니다. “overflow: hidden” 대신에 “overflow: clip”을 사용할 수 있습니다. 이 속성 값은 요소의 콘텐츠를 클립하여 보여주는 방식에서 “overflow: hidden”과 유사하지만 새로운 블록 서식 맥락을 만들지 않습니다. 즉, “overflow: clip”이 적용된 요소 안의 요소들은 “overflow: hidden”과 같은 방식으로 영향을 받지 않습니다.\n\n“overflow: hidden” 대신에 “overflow: clip”을 사용함으로써 position: sticky가 있는 요소가 기대한 대로 작동하도록 할 수 있습니다. 스크롤하면 해당 요소들이 뷰포트에 고정되는 것을 확인할 수 있습니다.\n\n결론\n\n<div class=\"content-ad\"></div>\n\n요약하자면, `position: sticky`는 사용자가 웹사이트를 스크롤할 때 요소가 뷰포트에 \"붙는\" 유용한 CSS 속성입니다. 그러나 \"overflow: hidden\"과 함께 사용할 때 예상치 못한 동작을 일으켜 요소가 제대로 고정되지 못하는 상황이 발생할 수 있습니다. 이 문제를 해결하려면 대신에 \"overflow: clip\"을 사용할 수 있습니다. 새로운 블록 포맷팅 컨텍스트를 생성하지 않고 요소의 콘텐츠를 클립하는 기능을 제공합니다. 이렇게 하면 `position: sticky`가 있는 요소가 예상대로 작동하고 사용자가 그 요소를 스크롤하면 계속 가시적으로 유지됩니다.","ogImage":{"url":"/assets/img/2024-06-22-OvercomingPositionStickyIssuesSolvingOverflowHiddenProblemswithOverflowClip_0.png"},"coverImage":"/assets/img/2024-06-22-OvercomingPositionStickyIssuesSolvingOverflowHiddenProblemswithOverflowClip_0.png","tag":["Tech"],"readingTime":2},{"title":"여러분의 웹사이트를 위해 꼭 필요한 5가지 웹 접근성 기능과 사용자들이 당연히 누려야 할 것들","description":"","date":"2024-06-22 15:32","slug":"2024-06-22-5AccessibilityFeaturesYourWebsiteNeedsandThatYourUsersDeserve","content":"\n\n상위 백만 대 웹사이트 중 95% 이상*의 홈페이지가 기본 접근성 기준을 준수하지 못한다는 사실을 알고 계셨나요? 세계 인구의 16%*가 장애를 가지고 살고 있다고 하니(세계보건기구 기준), 접근성 있는 사용자 경험은 결코 간과되어서는 안 됩니다. 웹사이트의 모든 상호작용은 방문 예정인 모든 사람을 위해 작동해야 합니다.\n\n![image](/assets/img/2024-06-22-5AccessibilityFeaturesYourWebsiteNeedsandThatYourUsersDeserve_0.png)\n\n## 조금의 이해\n\n웹 디자인과 개발 여정 중 사용자 상호작용(UI)과 사용자 경험(UX)은 계획 프로세스의 큰 부분을 차지합니다. UX 요구 사항 수집 과정이나 웹 디자이너를 위한 지침에 접근성 있는 사용자 이야기를 포함하는 것이 매우 중요합니다. 웹 디자인 도구도 좋지만, 이 주제에서는 제한적일 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n아래 고려해야 할 사항 중 일부를 이미 알고 계실 수도 있습니다. Content Management Systems, Documents, 그리고 요즘 대부분의 소셜 미디어에서 보다 일반적으로 사용되는 '대체 텍스트(Alt Tags)'에 대해 말이죠. 사용자가 온라인에서 정보, 제품 또는 서비스를 찾을 때 여기저기서 찾을 수 있습니다.\n\n# 주요 접근성 기능\n\n아마도 이러한 측면 중 일부는 여러분의 웹사이트를 조사해 볼 새로운 통찰력을 제공할 것으로 기대합니다:\n\n## Alt 태그 (또는 대체 텍스트 또는 대체 설명)\n\n<div class=\"content-ad\"></div>\n\n웹 사이트에서 가장 일반적인 접근성 기능입니다. HTML 이미지 마크업 내에 포함되어 있으며, 스크린 리더가 필요한 사용자들이 이미지와 그래픽에 대한 설명을 경험할 수 있도록 합니다.\n\n## 색 대비\n\n색맹부터 저시력자까지, 웹 사이트에 대한 추가적인 스타일링 기능이 중요합니다. 이를 통해 색 대비를 자유롭게 변경할 수 있습니다. 다른 예로, 디스렉시아는 웹 요소의 주의를 산만하게 만드는 것을 줄이거나 제거하고, 밝은(흰색이 아닌) 배경에 더 어두운 글꼴 색상을 사용할 수 있는 옵션을 제공합니다. 이러한 색상 기술을 사용하면 자폐 스펙트럼 질환자에도 도움이 될 수 있습니다.\n\n## 명확한 피드백\n\n<div class=\"content-ad\"></div>\n\n사용자들은 당신의 웹사이트가 잘 반응할 때 잘 반응합니다. 대부분의 상호작용에 쉬운 지침을 제공하는 것이 중요합니다. 또한 직관적인 양식 유효성 검사를 하는 것은 사용자들이 자신의 데이터를 제공할 때 확신을 갖게 합니다. 발생한 오류도 경험의 일부로 사용자가 다음에 무엇을 해야 하는지 안내해야 합니다.\n\n## CSS 웹킷 (레거시 웹 브라우저 지원)\n\n당신의 웹사이트는 멋져 보일 수 있습니다. 팬시한 그라데이션과 클라우드에서 가져온 폰트... 그것은 멋집니다! 그렇지만 사용자들이 오래된 웹 브라우저에 접근하는 것에 제한이 있는 경우 가장 중요합니다. 당신의 CSS가 웹사이트의 스타일링 속성에서 대체할 수 있는 능력을 갖추는 것이 필수입니다.\n\n## 키보드 탐색\n\n<div class=\"content-ad\"></div>\n\n웹사이트를 키보드만 사용해서 쉽게 이동할 수 있는 능력을 갖추세요. 이 기능은 모든 내비게이션과 상호작용 요소에 통합되어야 합니다. 또 다른 고려 사항은 웹 디자인이 접근성 있는 디자인을 방해하는 요소로 의도적으로 요소의 외관을 비활성화하지 않았는지 확인하는 것입니다.\n\n# 웹사이트를 더 나은 상태로 만들기 위해 무엇을 할 수 있을까요?\n\n만약 웹사이트에서 접근성이슈에 대해 확신이 없는 경우, W3C에서 제공하는 무료 마크업 체커를 사용하는 것이 좋은 시작점입니다.\n\n웹 접근성에 관련된 경험이나 질문이 있다면 댓글을 남겨주세요. 다른 사람들로부터 더 많이 배우고 제 지식을 공유하는 것을 즐기고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n* [https://www.acquia.com/blog/accessibility-statistics](https://www.acquia.com/blog/accessibility-statistics)\n* [https://validator.w3.org/](https://validator.w3.org/)","ogImage":{"url":"/assets/img/2024-06-22-5AccessibilityFeaturesYourWebsiteNeedsandThatYourUsersDeserve_0.png"},"coverImage":"/assets/img/2024-06-22-5AccessibilityFeaturesYourWebsiteNeedsandThatYourUsersDeserve_0.png","tag":["Tech"],"readingTime":3},{"title":"Javascript scrollIntoView 메소드 사용 방법","description":"","date":"2024-06-22 15:32","slug":"2024-06-22-JavascriptscrollIntoViewmethod","content":"\n\n\n![scrollIntoView method](/assets/img/2024-06-22-JavascriptscrollIntoViewmethod_0.png)\n\nscrollIntoView는 요소를 뷰포트 안으로 부드럽게 스크롤할 수 있는 자바스크립트 메소드입니다. 이 메소드는 이미 보이는 뷰포트에 요소가 없다면 요소를 보이게 만듭니다. 사용자가 어떤 작업을 수행하거나 애니메이션 효과로 요소를 보여줄 때 유용합니다.\n\nscrollIntoView 메소드는 문서 객체 모델(DOM)의 Element 인터페이스의 일부입니다.\n\nelement.scrollIntoView();\nelement.scrollIntoView([scrollIntoViewOptions]);\n\n<div class=\"content-ad\"></div>\n\nscrollIntoView의 문법에는 2 가지 유형이 있습니다.\n\n이 메소드는 기본 옵션으로 요소를 보이도록 스크롤하는 데 사용됩니다.\n\n이는 요소가 이미 보이지 않은 경우 요소가 포함되어 있는 요소의 맨 위나 뷰포트로 스크롤됩니다.\n\nscrollIntoViewOptions는 뷰포트에서 요소를 스크롤하는 여러 옵션을 지정하는 선택적 객체 속성입니다.\n\n<div class=\"content-ad\"></div>\n\n다음과 같은 속성이 있습니다.\n\n이 속성은 아래 유형을 통해 스크롤의 동작을 정의하는 데 사용됩니다.\n\n가능한 값은\n\n- auto(기본값): 스크롤 동작에 따라 요소를 스크롤합니다.\n- smooth: 부드럽고 애니메이션 효과로 요소를 스크롤합니다.\n- instant: 즉시 요소를 스크롤하여 단일 점프와 동일합니다.\n\n<div class=\"content-ad\"></div>\n\n이 속성은 가시 영역 내 요소의 수직 정렬을 정의하는 데 사용됩니다.\n\n가능한 값은\n\n- start(기본): 요소를 시작 위치에 스크롤합니다.\n- center: 요소를 중앙에 스크롤합니다.\n- end: 요소를 끝에 스크롤합니다.\n- nearest: 수직으로 가장 가까운 가장자리로 스크롤합니다.\n\n이 속성은 가시 영역 내 요소의 수평 정렬을 정의하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n다음은 가능한 값들입니다\n\n- start(기본): 요소를 시작 위치에 스크롤합니다.\n- center: 요소를 중앙에 스크롤합니다.\n- end: 요소를 끝에 스크롤합니다.\n- nearest: 수평으로 가장 가까운 가장자리로 스크롤합니다.\n\n## 예시\n\n여기에 scrollIntoView의 다양한 속성 조합에 따라 생성된 3가지 예시가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 1. scrollIntoView() 기본\n\n이것은 요소를 보이는 뷰포인트로 스크롤합니다.\n\n<!DOCTYPE html>\n<html>\n    <style>\n        #container {\n            height: 250px;\n            overflow: auto;\n        }\n        #scroll-div {\n            margin: 500px;\n            height: 800px;\n            background-color: pink;\n        }\n    </style>\n\n    <body>\n        <h1>Javascript scrollIntoView</h1>\n\n        <button onclick=\"myFunction()\">요소로 스크롤하려면 클릭</button>\n\n        <div id=\"container\">\n            <div id=\"scroll-div\">\n                <p>텍스트1</p>\n                <p>텍스트2</p>\n                <p>텍스트3</p>\n            </div>\n        </div>\n\n        <script>\n            function myFunction() {\n                const element = document.getElementById('scroll-div');\n                element.scrollIntoView();\n            }\n        </script>\n    </body>\n</html>\n\n# 2. scrollIntoView() 수직으로\n\n<div class=\"content-ad\"></div>\n\n아래 코드는 요소를 수직으로 화면 안에 스크롤합니다.\n\n<!DOCTYPE html>\n<html>\n    <style>\n        #scroll-div {\n            margin-top: 100px;\n            padding-right: 100%;\n            height: 800px;\n            background-color: pink;\n            overflow: auto;\n        }\n    </style>\n\n    <body>\n        <h1>Javascript scrollIntoView</h1>\n\n        <button onclick=\"myFunction()\">요소를 스크롤하려면 클릭하세요</button>\n\n        <div id=\"scroll-div\">텍스트</div>\n\n        <script>\n            function myFunction() {\n                const element = document.getElementById('scroll-div');\n                element.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'end',\n                    inline: 'nearest',\n                });\n            }\n        </script>\n    </body>\n</html>\n\n# 3 .scrollIntoView() 수평 방향\n\n이것은 요소를 수평으로 화면 안에 스크롤합니다.\n\n<div class=\"content-ad\"></div>\n\n<!DOCTYPE html>\n<html>\n    <style>\n        #scroll-div {\n            margin-left: 100%;\n            padding-right: 100%;\n            height: 800px;\n            background-color: pink;\n            overflow: auto;\n        }\n    </style>\n\n    <body>\n        <h1>Javascript scrollIntoView</h1>\n\n        <button onclick=\"myFunction()\">Click to scroll the element</button>\n\n        <div id=\"scroll-div\">Text</div>\n\n        <script>\n            function myFunction() {\n                const element = document.getElementById('scroll-div');\n                element.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'nearest',\n                    inline: 'start',\n                });\n            }\n        </script>\n    </body>\n</html>\r\n\n참고: scrollIntoView 메서드는 요소의 CSS에 많이 의존합니다. 요소에 대한 스크롤 간격에 대한 유효한 CSS를 제공했을 경우에만 예상대로 작동합니다.\n\n이 글을 읽어주셔서 감사합니다. 이 글이 요소 스크롤에 도움이 되기를 바랍니다.","ogImage":{"url":"/assets/img/2024-06-22-JavascriptscrollIntoViewmethod_0.png"},"coverImage":"/assets/img/2024-06-22-JavascriptscrollIntoViewmethod_0.png","tag":["Tech"],"readingTime":4},{"title":"Bootstrap으로 반응형 웹사이트 만드는 방법 Step-by-Step 가이드","description":"","date":"2024-06-22 15:31","slug":"2024-06-22-ProcesstoCreateaResponsiveWebsitewithBootstrap","content":"\n\n\n![image](/assets/img/2024-06-22-ProcesstoCreateaResponsiveWebsitewithBootstrap_0.png)\n\n요즘의 다양한 기기 환경에 반응하는 웹사이트를 만드는 것은 중요합니다. 인기 있는 프론트엔드 프레임워크인 부트스트랩은 강력한 도구와 구성 요소로 이 작업을 더 쉽게 만들어줍니다. 이 기사는 부트스트랩을 사용하여 반응형 웹사이트를 만드는 과정을 안내합니다.\n\n# 부트스트랩 소개\n\n부트스트랩은 무료이며 오픈 소스의 CSS 프레임워크로, 반응형 및 모바일 최우선의 프론트엔드 웹 개발을 대상으로 합니다. CSS 및 JavaScript 기반으로 이루어져 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 부트스트랩을 사용한 반응형 웹사이트 만들기\n\n반응형 웹사이트를 만드는 것은 오늘날의 다양한 디바이스를 고려할 때 중요합니다. 인기 있는 프론트엔드 프레임워크인 부트스트랩은 강력한 도구와 구성 요소로 이 작업을 쉽게 만들어 줍니다. 이 글에서는 부트스트랩을 사용하여 반응형 웹사이트를 만드는 과정을 안내합니다.\n\n## 부트스트랩 소개\n\n부트스트랩은 반응형 및 모바일을 우선으로 하는 프론트엔드 웹 개발을 위한 무료 오픈 소스 CSS 프레임워크입니다. 타이포그래피, 폼, 버튼, 내비게이션 및 기타 인터페이스 구성 요소용 CSS 및 JavaScript 기반 디자인 템플릿이 포함되어 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 부트스트랩 설치하기\n\n## 단계 1: 부트스트랩 다운로드 및 포함\n\n부트스트랩을 사용하려면 프로젝트에 CSS 및 JS 파일을 포함해야 합니다. 부트스트랩은 공식 웹사이트에서 다운로드하거나 CDN 링크를 사용할 수 있습니다.\n\n## 단계 2: 기본 HTML 구조\n\n<div class=\"content-ad\"></div>\n\nHTML 문서의 기본 구조를 작성하고 반응형 웹사이트의 기반을 만들어 보세요.\n\n# 레이아웃 구성\n\n## 단계 3: 그리드 시스템 사용하기 \n\n부트스트랩의 그리드 시스템은 반응형 디자인 기능의 핵심입니다. 컨테이너, 행 및 열 시리즈를 사용하여 콘텐츠를 배치하고 정렬합니다.\n\n<div class=\"content-ad\"></div>\n\n컨테이너: 반응형 너비를 가진 고정폭 컨테이너 또는 전체 너비 컨테이너를 만들려면 .container 또는 .container-fluid를 사용하세요.\n행: 열의 수평 그룹을 만들려면 .row를 사용하세요.\n열: .col-* 클래스를 사용하여 행당 표시할 열의 수를 정의하세요. 부트스트랩은 행당 최대 12개 열을 지원합니다.\n\n## 단계 4: 반응형 이미지 추가\n\n이미지가 반응형으로 유지되도록 하려면 .img-fluid 클래스를 사용하세요. 이렇게 하면 이미지가 다양한 화면 크기에 맞게 적절히 조정됩니다.\n\n# 스타일링과 컴포넌트\n\n<div class=\"content-ad\"></div>\n\n## Step 5: 네비게이션 바\n\n부트스트랩은 기본으로 반응형 네비게이션 바를 제공합니다. .navbar, .navbar-expand-*, 그리고 .navbar-light 또는 .navbar-dark 클래스를 사용하여 반응형 및 사용자 정의 가능한 네비게이션 바를 만들 수 있습니다.\n\n## Step 6: 반응형 유틸리티\n\n부트스트랩에는 화면 크기에 따라 콘텐츠를 표시하거나 숨기기 위한 여러 유틸리티 클래스가 포함되어 있습니다. .d-none, .d-sm-block, 그리고 .d-md-none과 같은 클래스를 사용하여 다양한 기기에서 요소의 가시성을 제어할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 자바스크립트로 향상하기\n\n## 단계 7: 대화형 구성 요소\n\n부트스트랩은 모달, 툴팁, 캐러셀 및 아코디언과 같은 다양한 JavaScript 구성 요소를 제공하여 상호 작용성을 향상시킬 수 있습니다. 이러한 구성 요소는 구현 및 사용자 정의가 쉽습니다.\n\n# 테스트 및 최적화\n\n<div class=\"content-ad\"></div>\n\n## 단계 8: 크로스 브라우저 테스트\n\n웹사이트가 다양한 브라우저와 기기에서 올바르게 보이고 작동하는지 확인하세요. BrowserStack와 같은 도구 또는 브라우저의 개발자 도구의 반응형 디자인 모드를 활용할 수 있습니다.\n\n## 단계 9: 성능 최적화\n\nCSS와 JavaScript 파일을 최소화하고, 반응형 이미지를 사용하며, 브라우저 캐싱을 활용하여 웹사이트의 성능을 최적화하세요.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n부트스트랩은 강력한 그리드 시스템, 다양한 구성 요소 및 유틸리티 클래스를 통해 반응형 웹사이트를 만드는 프로세스를 간단화합니다. 이러한 단계를 따라가면 어떤 기기에서도 멋지게 보이는 반응형, 모바일 우선 웹사이트를 만들 수 있습니다. 즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-06-22-ProcesstoCreateaResponsiveWebsitewithBootstrap_0.png"},"coverImage":"/assets/img/2024-06-22-ProcesstoCreateaResponsiveWebsitewithBootstrap_0.png","tag":["Tech"],"readingTime":3},{"title":"Flutter에서 복잡한 HTML 처리하는 방법","description":"","date":"2024-06-22 15:30","slug":"2024-06-22-HandlingcomplexHTMLinFlutter","content":"\n## 플러터에서 중첩된 테이블 뷰 표시\n\n<img src=\"/assets/img/2024-06-22-HandlingcomplexHTMLinFlutter_0.png\" />\n\n저는 비즈니스가 모든 메일, SMS, 소셜 미디어 플랫폼을 한 앱에서 연결하고 고객 커뮤니케이션을 관리하는 통합 메시징 수신함 애플리케이션인 Helpwise 애플리케이션을 개발 중입니다.\n\n앱의 기능 중 하나는 Gmail 수신함을 연결하여 모든 이메일을 같은 앱에서 받는 것입니다. Helpwise는 지금까지 모든 이메일 스레드를 표시하기 위해 웹 뷰를 사용해 왔기 때문에 지금까지 어떤 문제도 발생하지 않았습니다.\n\n<div class=\"content-ad\"></div>\n\n웹뷰를 네이티브 플러터 코드로 이동하기로 결정했어요, 즉 앱 자체에서 이메일 데이터를 처리하기로 했어요. 내 지식으로는 HTML 데이터를 쉽게 처리하고 flutter_html 패키지를 사용해 HTML을 렌더링할 수 있다고 생각했어요.\n\n간단해 보이죠? 어떤 문제가 발생할 수 있을까요? 😂\n\n하지만 그렇게 간단하지 않아요. 코드를 구현한 후 대부분의 이메일이 잘 보이지만 뉴스레터, 서명 및 테이블이 전혀 나타나지 않았어요.\n\n전 정말 깜짝 놀랐어요. 웹에 대한 지식이 전혀 없어 어떻게 이를 해결할 수 있을까요?\n\n<div class=\"content-ad\"></div>\n\n저는 전체 웹을 검색해보니 해당 패키지가 복잡한 테이블을 제대로 처리하지 못하는 것을 발견했고, HTML을 렌더링하기 위해 패키지가 TABLE_SECTION을 표시하여 해당 영역을 표시한다는 것을 알았어요.\n\n이 버그는 2021년 3월에 열렸으며 아직 해결되지 않았습니다.\n\n<img src=\"https://miro.medium.com/v2/resize:fit:888/1*rCkV8LeAQf6Wiizx0ljAsQ.gif\" />\n\n도와주실 수 있나요? 지금 제가 할 수 있는 일이 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n## 해결책 1\n\n첫 번째 해결책은 html_editor_enhanced를 사용하는 것이었습니다. 이는 텍스트 편집기로 HTML 코드를 삽입하여 편집기를 뷰 전용 위젯으로 사용하는 방법입니다.\n\n해결책을 시도해보았지만 왜 작동하지 않았을까요?\n\n편집기가 비활성화되어 있더라도 특정한 높이를 지정해주어야 합니다. 필요한 높이를 주면 이메일의 보기 영역이 제한됩니다.\n\n<div class=\"content-ad\"></div>\n\n당신이 없슴을 알겠는데, 함께 수정하면 된다고 생각해요! 😊 계속해서 함께 문제를 해결해 나가보자구요! 🚀\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:996/1*mEstF6mH4U8BXs7z40YxhA.gif\" />\n\n저는 선배와 문제를 논의하면서, 합의할 수 있는 해결책을 찾으려고 노력했어요. 그때 갑자기 그가 제안한 것이라구요\n\n이게 뭐야? HTML을 Webview에서 렌더링할 수 있을 줄 몰랐어? Webview를 표시하려면 URL이 필요한 것 아니었어?\n\n지금 알게 된 건가봐요 😅\n\n<div class=\"content-ad\"></div>\n\n## 실제 해결책\n\n그래서 우리가 어떻게 구현했는지 봅시다,\n\n우리는 flutter_inappwebview 패키지를 사용했어요\n\nHTML을 렌더링하고 완벽하게 작동했어요.\n\n<div class=\"content-ad\"></div>\n\n모두 읽어주셔서 감사합니다......😍😍\n\n아직 읽고 계신다면 쉽지 않군요 😅\n\n![image](https://miro.medium.com/v2/resize:fit:996/1*IEsaQG2ZpzqelL3T1bUVQg.gif)\n\nHTML을 표시하는 것은 가능했지만 특정 높이를 증명해야 했습니다. 즉, 사용자는 전체 내용을 보려면 이메일 내에서 스크롤해야 하는데, 심지어 리스트뷰 빌더 내에서도 그렇습니다.\n\n<div class=\"content-ad\"></div>\n\n## 이제 웹뷰 높이를 동적으로 조절해야 할까요?\n\n수 시간 동안 검색한 끝에 웹뷰의 높이를 얻기 위해 특정 HTML 코드를 추가하는 StackOverflow 쓰레드를 찾았어요.\n\n하지만 문제는 이 해결책을 적용한 후에, 일부의 경우 높이가 0으로 표시되고 오류도 표시되지 않았어요. 초기 높이를 설정하면 이메일을 볼 수 있지만요.\n\n지금은 HTML 코드가 문제인 것 같아요. 우리는 플러터에 친숙하니까요.\n\n<div class=\"content-ad\"></div>\n\n## 단계 2 — 높이 일관되게 가져오기\n\n웹뷰 높이를 인쇄할 수 있는지 확인할 때 콘솔 로그를 추가하여 높이를 출력했는데, 놀랍게도 매번 올바른 높이를 얻었습니다.\n\n그러자 왜 그냥 로그를 가져와서 두 배로 변환하고 사용하지 않을까 생각했죠. 간단하죠?\n\n결국 그랬더니 딱 맞았습니다 😅\n\n<div class=\"content-ad\"></div>\n\n```js\nAnimatedContainer(\n  duration: Duration(milliseconds: 500),\n  height: height + (height == 0 ? 0 : 50),\n  child: InAppWebView(\n    initialData: InAppWebViewInitialData(data: html),\n    initialOptions: InAppWebViewGroupOptions(\n      crossPlatform: InAppWebViewOptions(\n        supportZoom: false,\n        javaScriptEnabled: true,\n        disableHorizontalScroll: false,\n        disableVerticalScroll: true,\n      ),\n    ),\n    onLoadError: (controller, url, code, message) =>\n        print(\"onLoadError: $url, $code, $message\"),\n    onLoadHttpError:\n        (controller, url, statusCode, description) => print(\n            \"onLoadHttpError: $url, $statusCode, $description\"),\n    onConsoleMessage: (controller, consoleMessage) {\n      print('height: ${height}');\n      height = double.parse(consoleMessage.message);\n      setState(() {});\n    },\n  ),\n);\n```\n\n```js\nhtml = \"\"\"\n<html lang=\"en\">\n  <meta name=\"viewport\" content=\"width=device-width user-scalable=no zoom=1.1\">\n  <style>img {max-width: 100%; height: auto}</style>\n  <body>\n    <div><div class=\"htmlWrapper container\" id=\"_flutter_target_do_not_delete\">$html</div></div>\n    <script>\n      function outputsize() {\n        console.log(document.getElementById(\"_flutter_target_do_not_delete\").offsetHeight);\n        window.postMessage('flutterTargetHeight', document.getElementById(\"_flutter_target_do_not_delete\").offsetHeight);\n      }\n      new ResizeObserver(outputsize).observe(_flutter_target_do_not_delete)\n      outputsize()\n    </script>\n</html>\n\"\"\";\n```\n\n이렇게하여 HTML이 로드될 때마다 올바른 높이를 얻고 부드러운 애니메이션을 함께 사용할 수 있었습니다.\n\n만세!!! 성공했습니다…….\n\n<div class=\"content-ad\"></div>\n\n위 글 읽어주셔서 감사합니다 ❤️\n\n제 Udemy 과정인 \"2023년 Appwrite with Flutter 초급 과정\"이 오픈되었습니다. 아래 링크를 통해 강좌를 확인하세요!\n\n[Appwrite with Flutter 초급 과정 2023](https://www.udemy.com/course/appwrite-with-flutter-beginner-course-2023/)\n\n감사합니다!\n\n<div class=\"content-ad\"></div>\n\n마크다운 형식으로 표 태그를 변경하세요.\n","ogImage":{"url":"/assets/img/2024-06-22-HandlingcomplexHTMLinFlutter_0.png"},"coverImage":"/assets/img/2024-06-22-HandlingcomplexHTMLinFlutter_0.png","tag":["Tech"],"readingTime":5},{"title":"Bootstrap으로 반응형 디자인 적용하기 웹 페이지를 모바일 친화적으로 만드는 방법","description":"","date":"2024-06-22 15:28","slug":"2024-06-22-ResponsiveDesignwithBootstrapMakingYourWebpageMobile-Friendly","content":"\n\n아래는 표를 Markdown 형식으로 변경해주세요.\n\n\n| <img src=\"/assets/img/2024-06-22-ResponsiveDesignwithBootstrapMakingYourWebpageMobile-Friendly_0.png\" /> |\n|---|\n\n\n<div class=\"content-ad\"></div>\n\n반응형 디자인은 웹페이지가 다양한 화면 크기와 방향에 매끄럽게 적응하여 최적의 조회 및 상호작용 경험을 제공합니다.\n\n이는 유연한 그리드, 유동 이미지 및 CSS 미디어 쿼리를 통해 구현됩니다.\n\n# 반응형 디자인에 Bootstrap 사용의 장점\n\nBootstrap은 포괄적인 그리드 시스템과 미리 정의된 클래스를 제공하여 반응형 디자인을 간단하게 만듭니다.\n\n<div class=\"content-ad\"></div>\n\n이 프레임워크는 방대한 CSS 코딩이 필요하지 않아서 개발자들이 디자인에 더 집중하고 구현 세부 사항에 덜 신경 쓸 수 있게 해줍니다.\n\n## 부트스트랩 그리드 시스템 구현\n\n부트스트랩은 반응형 컨테이너, 행 및 열 내에서 유연한 콘텐츠 구조화를 촉진하는 12개 열 그리드 레이아웃을 사용합니다.\n\n## 주요 개념:\n\n<div class=\"content-ad\"></div>\n\n- 컨테이너: 내용물을 감싸는 역할을 하며, 장치 화면 크기에 따라 너비를 조정합니다.\n- 행: 열의 수평 그룹을 포함하여 정렬과 구조적 무결성을 보장합니다.\n- 열: 내용물을 담을 공간을 정의하며, 다양한 화면 크기에 따라 너비를 지정할 수 있습니다.\n\n# 예제 구현:\n\n## HTML 구조:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n   <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Responsive Webpage</title>\n      <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/5.3.3/css/bootstrap.min.css\" rel=\"stylesheet\">\n   </head>\n   <body>\n      <div class=\"container\">\n         <h1 class=\"text-center text-primary\">반응형 웹페이지에 오신 것을 환영합니다</h1>\n         <p class=\"text-center text-secondary\">부트스트랩의 반응형 그리드 시스템을 살펴보세요.</p>\n         <div class=\"row\">\n            <div class=\"col-12 col-md-8\">주요 컨텐츠 영역</div>\n            <div class=\"col-6 col-md-4\">사이드바</div>\n         </div>\n         <div class=\"row mt-4\">\n            <div class=\"col-6 col-md-4\">컬럼 1</div>\n            <div class=\"col-6 col-md-4\">컬럼 2</div>\n            <div class=\"col-6 col-md-4\">컬럼 3</div>\n         </div>\n      </div>\n      <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js\"></script>\n      <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/5.3.3/js/bootstrap.bundle.min.js\"></script>\n   </body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n# 설명:\n\n- 컨테이너: 반응형 컨테이너 내용을 감쌀 수 있습니다.\n- 행: 열을 수평으로 그룹화하여 정렬을 보장합니다.\n- 열: 다양한 화면 크기에 따라 유연한 내용 공간을 정의합니다.\n\n# 반응형 유틸리티 클래스 활용\n\n부트스트랩은 디바이스 화면 크기에 따라 요소 가시성, 정렬, 스타일링을 제어하는 유틸리티 클래스를 제공하여 레이아웃 제어를 향상시킵니다.\n\n<div class=\"content-ad\"></div>\n\n# 예시 사용법:\n\n```js\n<div class=\"container\">\n   <div class=\"row\">\n      <div class=\"col-12 col-sm-6 d-none d-sm-block\">작은 화면 이상에만 표시됩니다.</div>\n      <div class=\"col-12 col-sm-6 d-block d-sm-none\">작은 화면에만 표시됩니다.</div>\n   </div>\n</div>\n```\n\n# 설명:\n\n- d-none: 모든 화면 크기에서 요소를 숨깁니다.\n- d-sm-block: 작은 화면 이상에서 블록으로 요소를 표시합니다.\n- d-block: 모든 화면 크기에서 블록으로 요소를 표시합니다.\n- d-sm-none: 작은 화면 이상에서 요소를 숨깁니다.\n\n<div class=\"content-ad\"></div>\n\n# 컬럼 오프셋 활용\n\n컬럼 오프셋은 컬럼을 오른쪽으로 이동시켜 공간을 만들어내는 기능으로, 추가적인 빈 컬럼을 사용하지 않고도 정확한 레이아웃 조정에 이상적입니다.\n\n# 예시 구현:\n\n```js\n<div class=\"container\">\n   <div class=\"row\">\n      <div class=\"col-4 offset-4\">가운데 정렬된 컬럼</div>\n   </div>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n# 설명:\n\n- col-4: Column은 총 12개의 column 중 4개를 차지합니다.\n- offset-4: Column을 오른쪽으로 4개 column 이동시켜 가운데 정렬합니다.\n\n# 부트스트랩을 통한 정렬 개선\n\n부트스트랩의 정렬 클래스는 컬럼 내에서 수직 및 수평 콘텐츠 정렬을 가능하게 하여 레이아웃 제어를 향상시킵니다.\n\n<div class=\"content-ad\"></div>\n\n# 예시 정렬:\n\n```js\n<div class=\"container\">\n   <div class=\"row align-items-center\" style=\"height: 200px;\">\n      <div class=\"col\">수직 가운데 정렬</div>\n   </div>\n</div>\n```\n\n# 설명:\n\n- align-items-center: 행 내부의 콘텐츠를 수직으로 가운데 정렬합니다.\n- 인라인 스타일 style=\"height: 200px;\"은 수직 정렬을 위한 높이를 추가합니다.\n\n<div class=\"content-ad\"></div>\n\n# 오프셋과 정렬을 결합하기\n\n복잡한 레이아웃을위한 열 오프셋 및 정렬 클래스를 결합하여 수평 및 수직으로 정확하게 정렬된 레이아웃을 만들어보세요.\n\n# 결합된 예시:\n\n```js\n<div class=\"container\">\n   <div class=\"row align-items-center\" style=\"height: 200px;\">\n      <div class=\"col-4 offset-4 text-center\">수평 및 수직으로 중앙 정렬됨</div>\n   </div>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n# 설명:\n\n- col-4 offset-4: 4개의 열을 차지하며 오른쪽으로 4열 이동하여 가로로 중앙 정렬됩니다.\n- align-items-center: 행 내에서 콘텐츠를 수직으로 가운데 정렬합니다.\n- text-center: 열 내의 텍스트를 가로로 중앙 정렬합니다.\n\n# 부트스트랩을 활용한 레이아웃 사용자 정의\n\n부트스트랩은 중첩된 행 및 열, 사용자 정의 오프셋, 정렬 조정을 통해 복잡하고 반응형 레이아웃을 만들 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 중첩 열의 예시:\n\n\n<div class=\"container\">\n   <div class=\"row\">\n      <div class=\"col-12 col-md-8\">\n         <div class=\"row\">\n            <div class=\"col-6\">중첩 열 1</div>\n            <div class=\"col-6\">중첩 열 2</div>\n         </div>\n      </div>\n      <div class=\"col-6 col-md-4\">사이드바</div>\n   </div>\n</div>\r\n\n\n# 결론\n\n부트스트랩의 그리드 시스템과 유틸리티 클래스를 사용하면 모든 기기에서 잘 작동하는 반응형 웹 페이지를 쉽게 만들 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이러한 도구를 활용하여 화면 크기와 관계없이 최적의 사용자 경험을 보장할 수 있습니다.\n\n## 추가 자료\n\n부트스트랩과 반응형 디자인을 더 자세히 알아보려면 다음을 방문해주세요:\n\n[부트스트랩 문서](https://getbootstrap.com/docs/) - 부트스트랩의 공식 문서.","ogImage":{"url":"/assets/img/2024-06-22-ResponsiveDesignwithBootstrapMakingYourWebpageMobile-Friendly_0.png"},"coverImage":"/assets/img/2024-06-22-ResponsiveDesignwithBootstrapMakingYourWebpageMobile-Friendly_0.png","tag":["Tech"],"readingTime":5},{"title":"EC2 인스턴스에 HTML 웹사이트를 호스팅하는 방법","description":"","date":"2024-06-22 15:27","slug":"2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance","content":"\n\nAWS에서 HTML 웹사이트 호스팅하기\n\n![How to Host an HTML Website on an EC2 Instance](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_0.png)\n\n## 요구 사항:\n\nAWS\n\n<div class=\"content-ad\"></div>\n\nVPC\n\n# 사례 연구 및 소개:\n\n2023년 두 번째 분기에 착한 인터넷 랜드마크 기업으로 시작한 스타트업은 외국인 근로자가 가족에게 돈을 송금하는 수요를 처리할 수 있는 웹 사이트를 구축할 계획입니다. 기관은 클라이언트가 쉽게 사용할 수 있는 웹 사이트를 운영하고자 합니다. 이 튜토리얼에서는 HTML 및 Apache 서버를 사용하여 Amazon EC2에 웹 사이트를 호스팅하는 방법에 대해 설명합니다.\n\nHTML은 경량 언어로 다른 언어와 쉽게 인터페이스할 수 있습니다. 또한 EC2의 우수한 가용성, 보안, 비용 효율성 및 확장성을 활용할 수 있을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n웹 사이트가 활성화되면 터미널을 사용하여 EC2에 SSH하여 모든 것이 올바르게 작동하는지 확인할 것입니다. 모든 단계를 완료한 후에 사용한 리소스를 정리할 것입니다.\n\n# 목표\n\n- 보안 그룹을 생성하고 포트 80과 22를 허용합니다.\n- 기본 VPC를 사용합니다.\n- 제공된 서브넷 및 리전을 사용합니다.\n- 인스턴스를 시작합니다.\n- Apache 웹 서버에 도달할 수 있는지 테스트합니다.\n- 정리하기\n\n# 단계 1: 지역 선택\n\n<div class=\"content-ad\"></div>\n\n새로운 AWS 콘솔을 사용하여 미국 동부(버지니아 북부) 지역을 선택하십시오. 사용하고 싶은 지역을 선택할 수 있습니다.\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_1.png)\n\n## 단계 2: 보안 그룹 생성 및 포트 80 및 22 열기\n\nAWS 콘솔에서 VPC를 검색하고 VPC 대시 보드로 이동하세요.\n\n<div class=\"content-ad\"></div>\n\n아래는 마크다운 형식으로 변환한 내용입니다.\n\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_2.png)\n\n보안 그룹 선택 — 왼쪽 핸드 사이드 메뉴 또는 페이지 중앙에서 찾을 수 있습니다\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_3.png)\n\n오른쪽 핸드 사이드에서 '보안 그룹 생성' 버튼을 클릭하세요\n\n\n<div class=\"content-ad\"></div>\n\n\n![How to Host an HTML Website on an EC2 Instance - Step 4](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_4.png)\n\nCreate a security group by entering the name and description. You can choose any available VPC. In our case, we selected the default VPC.\n\n![How to Host an HTML Website on an EC2 Instance - Step 5](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_5.png)\n\nScroll down to Inbound rules. First, add a rule for port 80 to allow internet users to access our website. Click on Add rule and choose HTTP with port 80 always open.\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_6.png\" />\n\n다음으로 할 일은 소스 아래에서 포트 80으로 오는 트래픽을 인터넷의 어느 곳에서든 허용하도록 하는 것입니다. 소스에서 IPv4의 Anywhere를 선택하세요 — 이렇게 하면 자동으로 0.0.0/0이 나타납니다.\n\n여전히 인바운드 규칙 아래에 있습니다. 다음으로 선택할 규칙은 SSH입니다. 이것은 TCP 프로토콜과 22 포트 범위를 나타냅니다. 소스에서 My IP를 선택해야 합니다 — 이것은 여러분의 IP 주소를 보여줍니다.\n\n이것은 포트 22로 들어오는 트래픽이 여러분의 IP 주소에서 오는 경우에만 허용된다는 것을 의미합니다. 포트 22를 통해 EC2 인스턴스에 SSH로 연결할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n보안 최상의 실천을 위해 항상 EC2 인스턴스로 SSH 접속할 수 있는 IP 주소를 귀하의 IP 주소로 제한해야 합니다.\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_7.png)\n\n따라서 이 두 가지 규칙을 열어야 합니다. 완료되면 페이지 하단 오른쪽 부분의 '보안 그룹 생성'을 클릭하세요.\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_8.png)\n\n<div class=\"content-ad\"></div>\n\n보안 그룹이 생성되었어요\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_9.png)\n\n# 단계 3: EC2 인스턴스 시작. (보안 그룹 및 키페어 추가)\n\n검색 바에서 EC2를 입력하고 서비스에서 EC2를 선택하세요.\n\n<div class=\"content-ad\"></div>\n\n\n[![Screenshot 1](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_10.png)](URL_LINK_1)\n[![Screenshot 2](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_11.png)](URL_LINK_2)\n\nScroll down to Application and OS Images (Amazon Machine Image). Under Quick Start select Amazon Linux. The AMI that we are going to use is Amazon Linux 2 AMI Free Tier\n\n[![Screenshot 3](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_12.png)](URL_LINK_3)\n\n\n<div class=\"content-ad\"></div>\n\n인스턴스 유형은 t2.micro 프리 티어로 설정됩니다.\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_13.png)\n\n키페어(로그인) 항목으로 내려가서 이전에 만들었던 키페어를 선택합니다.\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_14.png)\n\n<div class=\"content-ad\"></div>\n\n네트워크 설정으로 스크롤하여 편집을 클릭하세요. 드롭다운 메뉴에서 선택 가능한 VPC 목록이 표시됩니다. 이전에 사용한 기본 VPC를 선택할 것입니다.\n\n다음으로 이전에 만든 MYSECURITY33 보안 그룹을 선택해야 합니다.\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_15.png)\n\n오른쪽에 설정을 확인한 후 인스턴스를 시작을 클릭하세요.\n\n<div class=\"content-ad\"></div>\n\n![화면 캡처 1](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_16.png)\n\n인스턴스를 성공적으로 시작했습니다. \"모든 인스턴스 보기\"를 클릭해봐요.\n\n![화면 캡처 2](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_17.png)\n\n![화면 캡처 3](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_18.png)\n\n<div class=\"content-ad\"></div>\n\n# 단계 4: EC2 인스턴스에 SSH로 접속하기\n\nEC2 인스턴스로 SSH로 접속하려면 myinstance33를 선택하십시오.\n\n![image1](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_19.png)\n\n![image2](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_20.png)\n\n<div class=\"content-ad\"></div>\n\ncmd에서 키 다운로드 폴더로 이동해주세요.\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_21.png)\n\n그리고 여기에 Amazon 링크를 입력해주세요.\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_22.png)\n\n<div class=\"content-ad\"></div>\n\n'yes' 값을 주면 cmd에서 ec2 인스턴스를 받을 수 있습니다.\n\n![EC2 인스턴스](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_23.png)\n\n# 단계 5: 웹 사이트에 필요한 소프트웨어 설치하기\n\nEC2 터미널에 입력해야 하는 첫 번째 명령은 sudo su 이며, Enter를 눌러야 합니다 — 이는 루트 사용자로 변경하는 것을 허용합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_24.png)\n\n다음으로 입력해야 할 명령어는 yum update -y 입니다. 초록색 바탕의 프롬프트가 표시되면 다음 명령어를 실행할 수 있습니다.\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_25.png)\n\n이제 yum install -y httpd를 입력해 봅시다.\n\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_26.png)\n\n다음 명령어는 디렉토리 변경을 의미합니다. 즉, html 디렉토리로 이동하려는 의미입니다. cd /var/www/html 를 입력해 봅시다.\n\n이전에는 ec2 디렉토리에 있었습니다.\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_27.png)\n\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_28.png)\n\n위 명령을 실행한 후에 html 디렉토리에 이미 들어와 있는 것을 알 수 있습니다.\n\n다음으로 Putty 세션에서 입력해야 할 명령은 다음과 같습니다: wget https://github.com/azeezsalu/techmax/archive/refs/heads/main.zip\n\n각 명령어를 정의해 봅시다:\n\n\n<div class=\"content-ad\"></div>\n\n`wget`은 EC2 인스턴스로 파일을 다운로드하는 데 사용하는 Linux 명령어입니다.\n\n다운로드하려는 파일이 위치한 URL입니다: https://github.com/azeezsalu/techmax/archive/refs/heads/main.zip\n\n파일은 main.zip에 다운로드되었습니다. 파일을 확인하려면 ls를 입력해보세요.\n\n<div class=\"content-ad\"></div>\n\n\n![Image](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_30.png)\n\n웹 파일을 EC2 인스턴스로 다운로드하고 나면, 웹 파일을 이 zip 폴더에 넣게 됩니다. 그리고 그 다음 단계로 이어집니다.\n\n# Step 6: HTML 디렉토리에 웹 파일 넣기\n\n우리는 웹사이트를 볼 수 있도록 html 디렉토리에 웹 파일을 넣어야 합니다. 우리의 다음 명령어가 바로 이 일을 수행할 것입니다. main.zip 파일을 풀기 위해 unzip main.zip을 실행합시다.\n\n\n<div class=\"content-ad\"></div>\n\n\n![How to Host an HTML Website on an EC2 Instance - Step 31](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_31.png)\n\nIf we type the ls command, it will show us the zip folder and the unzipped version.\n\n![How to Host an HTML Website on an EC2 Instance - Step 32](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_32.png)\n\nThe next step is to copy all our web files from the unzipped version into the html directory. Let's use the following command: cp -r techmax-main/* /var/www/html/\n\n\n<div class=\"content-ad\"></div>\n\n\n![Image description](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_33.png)\n\nAnd if we type `ls` again, we are going to see all the web files in the html directory\n\n![Image description](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_34.png)\n\nThe next command that we need to do is to remove the `main.zip` and the `techmax-main` that we unzipped because we don’t need them anymore. Let’s type `rm -rf techmax-main main.zip` and press Enter\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_35.png\" />\n\nls 명령어를 다시 입력하면 main.zip과 techmax-main이 더 이상 표시되지 않습니다.\n\n<img src=\"/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_36.png\" />\n\n이제 모든 준비가 되었습니다! 아파치 서비스를 시작할 준비가 되었습니다.\n\n<div class=\"content-ad\"></div>\n\n# 단계 7: 아파치 서비스 시작하기\n\n다음 두 명령을 실행해봅시다: `systemctl enable httpd`와 `systemctl start httpd`\n\n![이미지 1](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_37.png)\n\n![이미지 2](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_38.png)\n\n<div class=\"content-ad\"></div>\n\n![image 1](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_39.png)\n\nAWS 콘솔로 돌아가서 EC2 인스턴스 대시보드로 이동합시다. myinstance33 인스턴스를 선택하고 아래의 세부 정보로 이동하세요. 퍼블릭 IPv4 주소를 복사해주세요.\n\n![image 2](/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_40.png)\n\n다른 탭이나 창을 열고, 복사한 주소를 주소 창에 붙여넣어주세요.\n\n<div class=\"content-ad\"></div>\n\n여기 있어요! 우리는 우리 웹사이트에 접속할 수 있어요.\n\n### 결론과 정리\n\n다음과 같이 EC2 인스턴스에 HTML 웹사이트를 호스팅하는 방법이 이렇게 쉬워요. 이 방법을 사용하여 EC2 인스턴스에 어떤 HTML 웹사이트든 호스팅할 수 있어요. 이 튜토리얼에 필요한 모든 것들을 다 배웠으니, 다음 할 일은 EC2 인스턴스를 종료하여 비용을 절약하는 거예요.","ogImage":{"url":"/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_0.png"},"coverImage":"/assets/img/2024-06-22-HowtoHostanHTMLWebsiteonanEC2Instance_0.png","tag":["Tech"],"readingTime":9},{"title":"Angular 마이크로 프론트엔드에서 CSS 격리하는 방법","description":"","date":"2024-06-22 15:23","slug":"2024-06-22-CSSisolationwithAngularMicrofrontends","content":"\n\n<img src=\"/assets/img/2024-06-22-CSSisolationwithAngularMicrofrontends_0.png\" />\n\n최근에, 마이크로 프론트엔드 아키텍처가 필요한 프로젝트에서 작업하고 있었습니다. 여러분과 공유할만한 흥미로운 도전 과제를 발견했어요.\n이 기사에서는 Angular 컨텍스트에서 작업할 것이지만, 물론 다른 프레임워크도 사용할 수 있지만 특정 사항을 고려해야 합니다.\n\n# 마이크로 프론트엔드는 훌륭해요\n\n마이크로 프론트엔드에 대한 주제는 요즘 매우 인기가 있습니다. 모두가 독립적인 팀을 구축하고 개발 프로세스를 효율적으로 확장하고 싶어합니다.\n\n<div class=\"content-ad\"></div>\n\n마이크로프론트엔드 앱을 구축하는 다양한 기술들이 있어요. 그 중에서 내가 아주 좋아하는 한 가지 방법은 Webpack 모듈 페더레이션을 사용하는 것이에요. 더 자세한 내용을 알고 싶다면, Angular 아키텍트(Manfred Steyer)의 이 훌륭한 시리즈를 적극 추천해요.\n\n# 왜 격리와 CSS 격리가 필요한 이유\n\n팀이 독립적으로 작업하고 자체적인 모두 소독창에서 작업할 때, 마이크로 프론트엔드는 가장 잘 맛난다. 이를 실현하려면 일련의 단계를 구현해야 해요.\n\n- Webpack 페더레이션을 사용하면 마이크로프론트엔드 코드를 쉽게로드할 수 있어요. 물론 아무 JS 코드나 될 수 있겠지만, 여기서는 마이크로프론트엔드를 다루고 있으니까요.\n- 웹 구성 요소를 사용하면 사용자 정의 요소를 정의할 수 있어서 게임에서 캡슐화의 일종을 가져다 줘요. Angular에서는 Angular Elements를 사용하는 것이 가장 좋아요.\n- Shadow DOM은 CSS를 캡슐화할 수 있게 해줘요. 이미로드된 HTML 페이지 안에서 자신만의 CSS 세계를 만들 수 있다고 상상해봐요. 그리고 루트/부모 CSS가 당신의 CSS를 더 이상 망가뜨릴 수 없다고요… 게다가, 격리된 CSS는 루트/부모도 망가뜨리지 않을 거예요. 멋지지 않나요?\n\n<div class=\"content-ad\"></div>\n\n고립은 우리가 안전하게 개발할 수 있도록 해줍니다. 누군가가 당신의 스타일을 망가뜨리거나 당신이 누군가의 스타일을 망가뜨려도 걱정할 필요가 없습니다.\n\n그것의 주요 관심사는 무엇일까요? 그것은 중복입니다. 일을 원활하게 진행하기 위해 우리는 서로 다른 수준에서 몇 가지 요소를 중복해서 만들어야 합니다. 하지만 이것이 문제인지 아닌지는 실제 시나리오에 따라 다릅니다. 예를 들어, 동일 페이지에 1-2개의 마이크로 앱이 있는 계획이 있다면 괜찮습니다. 그러나 동일 페이지에 많은 마이크로 앱이 있고 이를 모바일 사용자가 활발하게 사용한다면 중복은 문제를 일으킬 수 있습니다. CSS의 경우, 그런 문제 중 일부는 수정할 수 있습니다. 이제 어떻게 수정하는지 살펴보겠습니다.\n\n# 실습해 봅시다\n\n우선 저희 상황을 설명해 보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n- 쉘이 있습니다. teamA에서 개발한 것입니다. 이는 고객의 진입점으로 간주되며 https://resource-portal.test.com을 통해 접근할 수 있습니다. 쉘은 모듈 페더레이션을 사용하여 MFE(Micro Frontend)를 로드하고 웹 컴포넌트로 표시합니다.\n\n- MFE 애플리케이션이 있습니다. teamB에서 개발한 것으로 쉘이 호스팅하도록 웹 컴포넌트로 애플리케이션을 공유합니다. 동시에 https://mfe-app.test.com을 통해 독립적인 앱으로도 접근할 수 있습니다.\n\n반응형 디자인이 필요하다고 가정했을 때, 측정 단위로 REM을 사용하기로 결정했습니다. 그런데 아직 REM에 익숙하지 않다면, 현재 매우 인기가 높은데요. 특히, 반응형 앱을 개발하는 경우에는 더욱 중요합니다. REM 사용에 대해 더 알아보려면 여기를 클릭해주세요.\n\n기본적인 마이크로프론트엔드 설정으로, 쉘과 하나의 마이크로프론트엔드 애플리케이션이 있는 구성을 갖추고 있습니다. 이를 통해 쉘과 MFE가 CSS 측면에서 충돌하지 않도록하여 팀이 안전하게 느낄 수 있도록 하는 것이 주요 목표입니다.\n\n<div class=\"content-ad\"></div>\n\n우리는 여러 실용적인 경우에 대해 다뤄볼 것이고, 당신의 개발 과정에 유용할 것이라고 생 생각해요. 대부분의 변경 사항은 MFE 측면에서 발생할 것입니다.\n\n## MFE용 ShadowDom 활성화\n\nAngular에서 ShadowDom을 활성화하는 것은 정말 쉽습니다. ViewEncapsulation.ShadowDom을 설정하면 됩니다. 우리 경우에는 모듈 페더레이션을 통해 공유하는 MFE 내부의 앱 컴포넌트에 적용할 것입니다.\n\n```js\nencapsulation: ViewEncapsulation.ShadowDom\n```\n\n<div class=\"content-ad\"></div>\n\n## 웹 구성 요소 내부에 스타일 주입하기\n\n적절한 캡슐화가 완료되면 — Angular의 전역/부모 스타일은 더 이상 적용되지 않습니다. 우리의 컴포넌트는 독립적으로 존재합니다. 따라서 필요한 CSS를 직접 컴포넌트 .scss에 주입해야 합니다.\n\n만약 크롬 개발자 도구를 사용하여 소스를 확인하면, MFE 웹 컴포넌트 내부에 `style` 태그가 있음을 알 수 있습니다.\n\n일반적으로 styles.sccs에서 모든 CSS를 app.component.scss로 옮깁니다.\n또한 기업 테마, Material 스타일 등과 같은 서드 파티 자원을 주입해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n그런 주입의 부작용 중 하나는 번들 크기입니다. 웹 구성 요소의 각 인스턴스마다 CSS를 중복으로 포함해야 하므로 모든 필요한 외부 구성 요소도 중복됩니다. 하지만 격리 혜택을 많이 얻을 수 있죠, 맞죠?\n\n걱정 마세요. 상황을 개선하는 한 가지 방법이 있습니다 — CDN을 사용하는 것입니다. 그리고 직접 또는 로컬 주입하는 대신 CDN에서 CSS를 링크시키면 됩니다. 브라우저 덕분에 — 보통은 CDN에서 CSS를 캐시에 저장하죠. 이것은 — 첫 번째 인스턴스가 필요한 CSS를 로드하고 그 다음에는 캐시에서 가져올 것이라는 뜻입니다. 또한 앱이 충분히 거대하지 않고 3rd party가 적다면 번들 크기에 대해 걱정할 필요가 없을 겁니다.\n\n## 상속 가능한 스타일 누출 막기 — 중지해요\n\n기본적으로 그림자 DOM으로도 — 일부 스타일은 최상위 수준에서 (우리 경우에는 Shell에서) 누출됩니다. 왜냐하면 상속 가능하기 때문이죠. 예를 들어 색상, 커서, 글꼴 등이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n위 문제를 해결하기 위해 app.component에 지정된 CSS를 추가하면 됩니다.\n\n```js\n:host {\n    all: initial;\n}\n```\n\n## :host에 주의하세요\n\n모든 스타일을 조정했고 독립형 모드에서 확인한 결과 모든 것이 잘 작동합니다. 그러나 셸 내부에서는 적용되지 않는 스타일이 있습니다. 예를 들어, 전역 CSS 변수 등이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n보통 이런 경우는 CSS에서 :host를 사용할 때 발생했었어요. 조사한 결과, :host에 추가로 :root를 추가해야 한다는 것을 발견했어요. 왜 이런 일이 발생하는지는 확실하지 않지만, 한 가지 관찰 결과를 공유하자면, 독립적으로 작업할 때는 :host를 사용하는 반면, 셸 내에서는 :root를 사용한다는 거예요.\n\n:root div, :host div =`가 작동해요.\n\n## SharedStyleHost 스타일에 작별을\n\n이제 모든 필요한 CSS를 앱 구성 요소 CSS에 직접 주입했어요. 이제 같은 프로젝트에서 그 웹 구성 요소를 사용해요 (index.html에 넣어서).\n\n<div class=\"content-ad\"></div>\n\n예상대로 그것은 웹 구성 요소 그림자 DOM에만 존재해야합니다. 그러나 문서 헤드를 보면 거기에 훨씬 많은 스타일이 있습니다. 궁금하죠, 왜 그럴까요?\n\n현재 버그가 있어 스타일이 상위로 올라오는 것으로 밝혀졌습니다: https://github.com/angular/angular/issues/35039\n\n이 문제를 해결하려면 공유 스타일 호스트를 정리해야합니다.\n\n참고: 모듈 페더레이션과 웹 구성 요소를 공유하고 다른 앱에서 이 웹 구성 요소를 만드는 경우 이 문제가 발생하지 않을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## 몇 가지 기준 설정하기\n\n지금 셸 내부의 MFE를 살펴보면 모두 잘 보입니다. 그러나 독립적으로 작동할 때는 몇 가지 문제가 발생할 수 있습니다. 시작할 때 REM 사용에 대해 언급했었던 것을 기억하나요?\n\n따라서 독립형으로 REM이 제대로 작동하려면 일반적으로 html 태그 수준에서 기준을 설정해야 합니다. 우리의 경우에는 보통 셸 쪽에서 설정됩니다. 이것은 즉, MFE를 셸 내부에서 사용할 때는 모든 것이 잘 작동하지만 독립 실행 시에는 그렇지 않다는 것을 의미합니다. 그리고 그 기준을 웹 구성 요소 자체에 넣을 수 없습니다. 해결책은 MFE 사이트에서도 기준을 설정하는 것입니다.\n\n```js\nhtml {\n   // REM을 위한 기준을 설정합니다\n   font-size: 62.5%;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## Angular Material. 게임에 있나요?\n\n알겠어요, 팀B는 Material 라이브러리를 사용하기로 결정했습니다. 그러나 쉘 오너(팀A)는 사용하지 않습니다. 그리고 아마도 Material은 전역 스타일과 많은 scope를 사용하는 경향이 있을 거에요.\n\n작업을 진행하기 위해서는 Material을 MFE app.component.scss에 주입해야 합니다.\n\n이렇게 하면 Material 스타일을 MFE 구성 요소 자체에 주입할 수 있습니다. 이제 독립적이고 독자적입니다. 번들 크기에 대해 생각하고, 바로 이런 직접적인 주입 대신 CDN을 사용하여 개선할 수 있는 방법이 있다는 것을 기억하세요.\n\n<div class=\"content-ad\"></div>\n\n## 아이고... Material 오버레이?\n\n우리는 기쁘게 생각해요. Material은 잘 작동해요. 그런데 오버레이를 사용하는 컴포넌트들을 사용하기 시작하면 정말 안 좋게 작동해요.\n\n기본적으로 오버레이는 문서 루트에 추가돼요. 이는 라이브러리가 올바르게 위치를 지정하고 끝날 때 정리할 수 있기 때문에 논리적이에요. 그런데 우리 경우에는 어떤 일이 벌어지나요? MFE 웹 컴포넌트가 Shadow DOM을 사용하고 셸에서 모든 스타일을 무시해요. 오버레이 자체는 문서 루트에 추가돼요. 셸의 영역이죠. 거기에 Material 스타일이 있나요? 그렇죠, 없어요. 그게 문제죠.\n\n이 문제를 해결하기 위해 우리는 웹 컴포넌트 내부에 오버레이 컨테이너를 추가해야 해요. 즉, 그 안에 그림자 루트가 있어야 해요.\n\n<div class=\"content-ad\"></div>\n\n좋은 점은 Material이 그것을 쉽게 처리할 수 있다는 점입니다.\n\n그런 다음, app.module.ts로 이동하여 다음을 추가해야 합니다:\n\n```js\n{\n   provide: OverlayContainer,\n   useClass: WebComponentOverlayContainer,\n},\n```\n\n이로써 오버레이 컨테이너가 웹 구성 요소의 쉐도우 루트로 이동하게 됩니다. 거기에 주입된 모든 스타일은 삽입된 오버레이에 영향을 미칠 것입니다. 승리입니다!\n\n<div class=\"content-ad\"></div>\n\n## 잠깐… @font-face가 작동하지 않나요?\n\nMaterial과 관련된 내용이지만 Material에 국한되지는 않습니다. 팀B가 MFE 애플리케이션에서 사용자 지정 글꼴을 사용하려고 합니다. @font-face는 사용자 지정 글꼴과 함께 작업하는 데 잘 알려진 것입니다.\n\n그래서 app.component.html로 가서 글꼴 링크를 맨 위에 넣고 scss에서 사용해 보려고 합니다.\n하지만… 작동하지 않고 Material 아이콘이 보이지 않습니다…\n\n지금 @font-face가 작동하는 방식에 대한 명세 때문에 예기치 않은 결과입니다. 이를 해결하려면 웹 페이지 맨 위에서 폰트를 명시적으로 로드해야합니다. 그런 다음 필요한 위치에서 사용하세요.\n\n<div class=\"content-ad\"></div>\n\n좋은 점은 — Shell 팀에게 별도의 작업 요청을 하지 않아도 된다는 것입니다. 우리는 그 스크립트를 직접 삽입할 수 있습니다. 참고로, 이것은 물론 우리의 독립성에 영향을 미칩니다. 왜냐하면 다른 MFEs가 해당 폰트를 푸시할 수 있는 Shell scope의 상단으로 이동하게 됩니다. 하지만 현재는 다른 선택사항이 없습니다.\n\nMFE에서 폰트를 로드하는 코드는 아래와 같이 보일 수 있습니다:\n\n## Dom 쿼리 — ShadowRoot에 대해 기억하기\n\n일부 경우에는 셸과 MFE 웹 컴포넌트가 함께 있는 상황에서 셀렉터로 요소를 쿼리해야 할 수도 있습니다. 상황에 따라 — MFE 내부에서 ID로 요소를 쿼리하려고 시도할 때 document.querySelector을 사용해봤지만 실패했나요? 왜 그럴까요?\n음… 웹 컴포넌트와 쉐도우 DOM 작업을 시작하면 검색할 쉐도우 루트 컨텍스트를 명시적으로 지정해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n그래서 document.querySelector를 사용하는 대신 document.querySelector(``web_component_name``).shadowRoot.querySelector(``)을 사용하면 됩니다.\n\n## 마무리\n\n이 단계에서는 끝났다고 생각해요. CSS 격리 환경에서 작업하는 것은 관련된 각 팀의 구체적인 지식이 필요하다는 것을 알 수 있습니다. 그러나 이러한 구체적인 내용이 투명하고 이해되면, 개발하기가 훨씬 쉬워지며 문제 발생에 대한 걱정이 줄어듭니다.\n\nCSS 격리를 사용해야 하는가? 당연히 그렇지 않아요. 제품과 팀의 요구 사항을 항상 고려하세요.","ogImage":{"url":"/assets/img/2024-06-22-CSSisolationwithAngularMicrofrontends_0.png"},"coverImage":"/assets/img/2024-06-22-CSSisolationwithAngularMicrofrontends_0.png","tag":["Tech"],"readingTime":7},{"title":"프로그레시브 웹 앱 웹 개발의 미래","description":"","date":"2024-06-22 15:21","slug":"2024-06-22-ProgressiveWebAppsTheFutureofWebDevelopment","content":"\n\nProgressive Web Apps (PWAs)은 디지턈 랜드스케이프를 변화시키고 있습니다. 웹 및 모바일 앱 기능을 혼합한 형태를 제공합니다. 앱 스토어에는 500만 개 이상(그 수는 계속 늘어나고 있습니다)의 앱이 있지만, PWAs는 저장 공간이 부족하거나 불규칙하게 사용되는 일반적인 제약을 제거하는 색다른 대안을 제공합니다. 네이티브 앱의 속도와 오프라인 기능을 웹 앱의 접근성과 편리함과 결합시킨 것으로, 다운로드가 필요하지 않습니다.\n\n이러한 웹 애플리케이션은 서비스 워커(Service Workers) 및 React와 같은 현대 기술을 사용하여 구축되어 다양한 운영 체제 간에 작동하고 장치 하드웨어와 상호 작용할 수 있습니다. PWAs는 향상된 보안 기능과 쉬운 유지보수를 제공하여, 서버에 호스팅되고 URL을 통해 액세스되기 때문에 정기적인 업데이트가 필요 없습니다. 서비스 워커 기반 캐싱을 사용하여 오프라인에서 작동할 수 있는 PWAs는 웹 기술에서 상당한 발전을 이루었으며, 연결이 약한 지역에서도 중단 없이 액세스할 수 있습니다.\n\nPWAs는 사용자 경험을 최적화할 뿐만 아니라 기업에도 상당한 혜택을 제공합니다. 사용자 참여와 전환율을 높이고 개발 시간과 비용을 줄입니다.\n\n# 프로그레시브 웹 앱이란?\n\n<div class=\"content-ad\"></div>\n\n점진적 웹 앱(PWAs)은 네이티브 앱처럼 작동하지만 웹 브라우저를 통해 액세스되는 웹 애플리케이션입니다. 사용자에게 오프라인 사용, 푸시 알림, 장치 하드웨어 액세스와 같은 최고의 모바일 앱 기능을 제공하지만 다운로드나 설치가 필요하지 않습니다. PWAs는 HTML, CSS 및 JavaScript와 같은 최신 웹 기술을 사용하여 개발되며 오프라인 기능을 활성화하기 위해 서비스 워커를 사용합니다.\n\nPWAs는 서버에 호스팅되고 URL을 통해 액세스되어 내부 저장 공간을 소비하는 설치와 업데이트가 필요하지 않습니다. 다양한 브라우저, 화면 크기 및 장치 사양에 매끄럽게 적응하도록 설계되어 있어서 앱스토어 배포의 번거로움 없이 모든 장치에서 사이트나 앱을 전달하는 올인원 솔루션으로 사용할 수 있습니다.\n\nPWAs의 가장 큰 장점 중 하나는 오프라인에서 작동할 수 있는 점입니다. 사용자가 리소스를 요청하면 서비스 워커를 통해 전달되며, 서비스 워커는 캐시에서 일치하는 항목을 검색합니다. 일치하는 항목이 있으면 PWA는 캐시된 리소스로 응답하고, 그렇지 않으면 리소스가 일반적으로 요청됩니다. 리소스를 캐싱함으로써 PWA는 네트워크 요청을 피하고 오프라인 작동이 가능합니다. 사전 캐싱은 PWA의 디자인 핵심으로, 오프라인에서도 탁월한 성능을 보여줍니다.\n\nPWAs는 안전하게 설계되어 있으며, HTTPS 호스팅을 통해 보안을 보장합니다. 홈 화면에 저장하고 시작 메뉴나 작업 표시줄에 추가할 수 있으며, 네이티브 앱처럼 운영 체계 파일 관리자에서 파일을 처리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nPWA는 사용자 참여도와 전환이 증가하고, 여러 코드베이스에서 디자인하는 것을 피함으로써 개발 시간과 예산을 절약할 수 있습니다. 이러한 앱은 비용 효율적이며, 개발에 소요되는 시간이 적고 널리 사용할 수 있습니다.\n\n# PWA의 장점\n\n모바일 앱과 웹의 최상의 기능을 결합하여 앱을 만들기 위한 경제적이고 현실적인 솔루션을 찾고 있다면, PWA(Progressive Web Apps)가 해결책이 될 수 있습니다. 다음은 PWA 사용의 장점 중 일부입니다:\n\n## 1. 빠르고 오프라인 사용\n\n<div class=\"content-ad\"></div>\n\nProgressive Web Apps (PWAs)는 서비스 워커를 사용하여 오프라인에서 작동할 수 있어 인터넷 연결 없이도 리소스를 캐시하여 액세스할 수 있습니다. 이로 인해 인터넷 사용 가능성이 제한된 사용자들에게 이상적입니다. 또한 PWAs는 로컬에 리소스를 저장하여 느린 네트워크에서도 빠르게 로드됩니다. 더구나, 이러한 앱은 네이티브 앱과 유사한 경험을 제공하며 모든 OS에 설치할 수 있고, 기기 하드웨어에 액세스하며 주기적으로 업데이트를 받을 수 있습니다. PWAs는 사용자 데이터 보호를 위해 안전한 HTTPS 서버에 호스팅되어 보안을 우선시합니다.\n\n## 2. 주기적인 업데이트\n\nPWAs는 주기적인 업데이트를 지원하여 사용자에게 네이티브 앱 경험을 제공합니다. 이를 통해 앱은 최신 기능과 버그 수정으로 업데이트되어 유지될 수 있습니다.\n\n## 3. 최신 웹 기술\n\n<div class=\"content-ad\"></div>\n\n프로그레시브 웹 앱(PWAs)은 서비스 워커와 리액트 같은 현대 웹 기술을 사용하여 구축된 웹 애플리케이션입니다. 이를 통해 개발하기 쉽고 널리 사용할 수 있습니다.\n\n## 4. 크로스 플랫폼 호환성\n\nPWAs는 모든 운영 체제에 설치할 수 있으며 장치의 하드웨어 기능에 액세스할 수 있어 다양한 사용자에게 접근 가능합니다.\n\n## 5. 점진적 향상\n\n<div class=\"content-ad\"></div>\n\nPWAs는 점진적 향상을 활용하여 사용자에게 더 나은 경험을 제공합니다. 심지어 장치가 앱의 모든 기능을 지원하지 않을 때에도요.\n\n## 6. 보안\n\nPWAs는 서버에 호스팅되며 URL을 통해 접근되므로 안전합니다. 또한 HTTP를 통해 호스팅되어 추가적인 보안층을 제공합니다.\n\n## 7. 반응형 디자인\n\n<div class=\"content-ad\"></div>\n\nPWA는 효과적인 반응형 또는 적응형 디자인 덕분에 모든 기기에서 다양한 브라우저, 화면 크기 및 기기 사양에 매끄럽게 적응합니다. 더불어, 이러한 특성 덕분에 클라이언트, 개발자 및 사용자에게 모두 편리한 올인원 솔루션을 제공할 수 있습니다.\n\n## 8. 파일 캐싱\n\nPWA는 네트워크 요청을 피하고 오프라인 상태에서 작동하기 위해 캐싱 리소스를 사용합니다. 사전 캐싱은 PWA 디자인의 핵심 기능으로, 이를 통해 오프라인 환경에서도 작동할 수 있습니다.\n\n## 9. 사용 편의성\n\n<div class=\"content-ad\"></div>\n\nPWA는 메타데이터 파일(manifest.json)이 있어 홈 화면에 PWA를 편리하게 저장할 수 있습니다. 시작 메뉴나 작업 표시줄에 추가할 수 있고, 운영 체제 파일 관리자에서 파일을 처리하는 등 네이티브 앱과 같이 작동할 수 있습니다.\n\n## 10. 사용자 참여와 전환 증대\n\nPWA는 사용자 참여 및 전환을 증대시킬 수 있어 기업에 유용한 도구가 될 수 있습니다.\n\n# PWA를 활용한 사용자 참여 및 전환\n\n<div class=\"content-ad\"></div>\n\n프로그레시브 웹 앱(PWAs)은 모바일 앱과 웹 기능을 결합하여 오프라인 사용과 속도를 제공하며 다운로드가 필요하지 않습니다. PWAs는 비용 효율적이며 빠르게 개발할 수 있으며 다양한 화면 크기와 기기 사양에 적응하여 디바이스 및 브라우저 간에 작동합니다. PWAs는 진보적 향상을 통해 사용자 경험을 향상시키며 기능이 제한된 기기에서도 안전하며 HTTPs 서버와 URL을 사용하여 접근합니다.\n\nPWAs는 사용자 참여 및 전환이 향상되며 개발 시간을 절약하고 여러 코드 베이스가 필요한 부담을 줄입니다. 오프라인 액세스를 위한 사전 캐싱을 지원합니다.\n\n주목할만한 예시로는 스타벅스, 우버, 그리고 Microsoft의 Linux용 팀이 있습니다. 스타벅스의 PWA는 iOS 앱보다 훨씬 작아서 웹 사용자 주문이 두 배로 늘었고 오프라인에서도 원활하게 작동합니다. 우버의 PWA는 2G 네트워크에서 효율적으로 작동하여 주요 연결 문제를 해결합니다. Microsoft의 팀 PWA는 Linux 사용자에게 완전한 데스크탑 경험을 제공합니다.\n\nPWAs는 전자 상거래 및 데이터가 비실하고 연결이 제한된 개발도상국에서 특히 유용하며 앱과 웹사이트의 최상의 기능을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# 성공적인 PWA의 현실 세계 예시\n\n최근 몇 년간, Progressive Web Apps(PWAs)는 사용자에게 모바일 앱과 모바일 웹의 장점을 모두 제공할 수 있어서 인기를 얻었습니다. 이 섹션에서는 성공적인 PWA의 현실 세계 예시를 살펴보고, 기업과 사용자 모두에게 어떻게 혜택을 주었는지 알아보겠습니다.\n\n# 스타벅스\n\n스타벅스는 기존의 네이티브 앱과 유사한 PWA 주문 시스템을 구축했습니다. 그들의 PWA 크기는 iOS 앱보다 99.84% 작아져, 저장 공간이 제한된 사용자에게 더 쉽게 접근할 수 있게 되었습니다. 외출 중인 소비자들이 연결 상태를 드나들면서 이동 중 주문을 하게 되어 새로운 PWA로 혜택을 받았습니다. 결과적으로, 스타벅스는 매일 주문하는 웹 사용자 수를 두 배로 늘렸으며, 데스크톱 사용자들이 이제 모바일 사용자들과 동일한 속도로 주문하고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 우버\n\n우버의 PWA 앱은 저속 2G 네트워크에서도 차량 예약이 가능하게 합니다. 단 50kB로 구성된 코어 앱은 2G 네트워크에서 3초 만에 로드될 수 있습니다. 이는 모든 택시 회사의 백만 달러 문제를 해결했으며, 제한된 데이터와 연결이 불안정한 사용자에게 더 접근성이 향상되었습니다.\n\n# 마이크로소프트 Teams\n\n심지어 마이크로소프트도 리눅스 사용자를 위해 최신 기능과 데스크톱 경험을 제공하기 위해 Teams PWA를 출시했습니다. 마이크로소프트의 PWABuilder와 구글의 Bubblewrap은 이제 개발자들이 TWA(Trusted Web Activity)를 사용하여 Progressive Web Apps를 시작하는 안드로이드 어플리케이션을 생성, 빌드 및 업데이트할 수 있도록 함께 작업하고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# Flipboard\n\n플립보드는 소셜 뉴스 집계기로, PWA를 출시한 이후 사이트에서 보내는 시간이 3.7배 증가하고 세션 당 방문 페이지 수는 2.8배 증가했습니다. PWA 덕분에 플립보드는 사용자 참여도와 전환율을 높일 수 있었습니다.\n\n# MakeMyTrip\n\nMakeMyTrip은 인도의 선도적인 온라인 여행 회사입니다. 2017년 PWA를 출시한 결과 전환율이 3배 증가하고 사용자 세션도 160% 증가했습니다. PWA 덕분에 MakeMyTrip은 다중 코드 베이스에서의 설계를 피하므로 개발 시간과 예산을 절약할 수 있었습니다.\n\n<div class=\"content-ad\"></div>\n\n# 핀터레스트\n\n핀터레스트의 PWA는 참여율이 60% 증가하고 사용자 생성 광고 수익은 44% 증가, 그리고 사이트에서 소요되는 시간이 40% 증가했습니다. PWA는 핀터레스트가 사용자 참여율과 변환을 증가시키는 데 도움이 되었습니다.\n\n# 스포티파이\n\n스포티파이의 PWA는 사용자 참여율과 변환을 증가시키는 데 도움이 되었습니다. PWA를 통해 사용자는 오프라인으로 음악 라이브러리와 재생 목록에 액세스할 수 있어 데이터가 제한되거나 연결이 나쁜 사용자에게 더 접근하기 쉬워졌습니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\nPWA는 두 마리 토끼를 모두 잡는 솔루션이에요. 모바일 앱의 속도와 오프라인 사용성을 결합하면서 웹 기반 응용 프로그램의 가격 대비 효율성과 접근성을 제공합니다.\n\nPWA는 혼잡한 앱 시장에서 돋보이고자 하는 모든 규모의 비즈니스에 실용적인 해결책을 제공합니다. 이해말로, 모바일 앱의 속도와 오프라인 사용성을 결합하면서 웹 기반 응용 프로그램의 가격 대비 효율성과 접근성을 제공합니다.","ogImage":{"url":"/assets/img/2024-06-22-ProgressiveWebAppsTheFutureofWebDevelopment_0.png"},"coverImage":"/assets/img/2024-06-22-ProgressiveWebAppsTheFutureofWebDevelopment_0.png","tag":["Tech"],"readingTime":6}],"page":"9","totalPageCount":151,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":0},"__N_SSG":true}