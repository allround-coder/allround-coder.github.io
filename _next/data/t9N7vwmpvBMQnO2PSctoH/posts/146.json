{"pageProps":{"posts":[{"title":"HTML, CSS 및 JavaScript 프로젝트 50개(소스 코드 있음)","description":"","date":"2024-05-01 23:31","slug":"2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode","content":"\n\n![프로젝트 목록](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_0.png)\n\nHTML, CSS 및 Javascript 50개 이상의 프로젝트 목록은 웹 개발 분야에서 경력을 쌓고자 하는 초보 개발자들에게 큰 도움이 됩니다. 그러나 이를 위해 개발자들은 많은 학습과 프로젝트 구축을 거쳐야 하며 능력 향상의 과정에서 스트레스를 조금은 받게 됩니다. 그들은 프로젝트를 만들기 위한 주제를 쉽게 찾기 어려워하기 때문입니다. 따라서 웹 개발 세계에서는 초보자 친화적인 HTML, CSS 및 JavaScript 프로젝트 목록을 선별했습니다.\n\n이 게시물에서는 50개 이상의 주요 프로젝트가 다루어질 것이며, 이 소스 코드로 된 웹 개발 프로젝트를 통해 당신은 견고한 기반을 구축할 수 있을 것입니다. 이 프론트엔드 프로젝트에 참여함으로써 여러 웹사이트를 포함하는 새로운 대형 프로젝트를 개발할 수 있게 되며 실무 경험을 쌓을 수 있을 것입니다.\n\n## 모든 프로젝트 미리보기:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_1.png)\n\nMP4\n\nHTML, CSS, 및 JavaScript를 사용하는 완전한 초보자를 위한 50가지 이상의 웹 개발 프로젝트 소스 코드를 받으세요.\n\n이 기사에서는 초보자부터 중간 수준까지 다루는 HTML CSS 및 Javascript를 사용한 프로젝트와 소스 코드를 포함하였습니다.\n\n<div class=\"content-ad\"></div>\n\n프로젝트 소스 코드와 코드 설명이 모두 제공됩니다. 코딩 기술과 논리 구축을 연습하는 데 매우 유용한 프로젝트이므로 반드시 꿈의 직장을 얻는 데 도움이 되는 몇 가지 프로젝트를 만들어야 합니다. 이러한 프로젝트를 이력서(CV/Resume)에 추가할 수도 있습니다.\n\n더 많은 프론트엔드 프로젝트가 필요하시면 제가 작성한 100+ HTML, CSS 및 JavaScript 프로젝트 소스 코드를 확인하지 않으십시오. 반드시 아래 기사를 방문해보세요👇.\n\n100+ JavaScript 프로젝트 소스 코드(초보부터 고급 사용자까지)\n\n## 1. Html 및 CSS를 사용한 간단한 404 페이지\n\n<div class=\"content-ad\"></div>\n\n프로젝트 상세정보 - 404 페이지는 일반적으로 웹사이트가 작동하지 않을 때 발생하는 오류 코드 페이지입니다. 404 페이지는 사이트가 작동하지 않음을 사용자에게 알리는 웹사이트의 중요한 부분입니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n언어: Html, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모 :\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_2.png)\n\n## 2. 소셜 미디어 공유 아이콘 애니메이션\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 사항 — 소셜 미디어 아이콘은 특정 소셜 미디어 플랫폼을 식별하기 위해 사용됩니다. 각 소셜 미디어 플랫폼마다 다른 아이콘이 있습니다. 소셜 미디어 플랫폼은 먼 곳에 사는 사람들을 연결하고 가까움을 느끼게 하는 데 사용됩니다. 아이콘에 애니메이션을 추가하면 좋은 사용자 상호 작용이 가능합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: HTML, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n프로젝트 데모 :\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_3.png)\n\n## 3. 호버 효과가 있는 카드\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 - 카드는 제품 정보를 표시하는 데 사용되는 작은 페이지입니다. 호버 효과가 있는 카드는 훌륭한 사용자 경험을 제공하며 사용자가 카드 위에 커서를 올리면 제품 정보가 고객에게 표시됩니다. 이러한 카드는 일반적으로 전자 상거래 웹사이트에서 사용됩니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모:\n\n## 4. 버튼 호버 효과\n\n프로젝트 상세 정보 – 버튼 호버 효과는 CSS가 제공하는 동적 기능 중 하나입니다. (hover) 함수를 사용하여 버튼에 호버 효과를 추가할 수 있습니다. 호버 효과를 적용하면 사용자가 버튼 위에 커서를 올려놓을 때 버튼의 모양이 점진적으로 변화하는 것을 볼 수 있습니다. 호버 효과를 통해 색상, 질감, 테두리를 변경할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 네\n\n언어: Html, CSS\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모 :\n\n![Project Demo](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_4.png)\n\n## 5. 공유 버튼\n\n프로젝트 세부 정보 - 공유 버튼은 웹사이트의 가장 작지만 가장 중요한 기능입니다. 공유 버튼은 동영상, 기사 또는 이미지와 같은 항목을 여러 사람과 공유할 수 있는 기능을 제공합니다. 공유는 웹사이트로의 트래픽 증가에 도움을 줍니다.\n\n<div class=\"content-ad\"></div>\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n언어: Html, CSS\n\n프로젝트 코드 다운로드: 여기를 클릭하세요!\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모 :\n\n![이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_5.png)\n\n![이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_6.png)\n\n## 7. 더블 라인 CSS 호버 효과 버튼\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 — 더블 라인 CSS 호버 효과는 호버 효과 속성을 사용한 CSS 기능입니다. 사용자가 링크나 버튼 위로 마우스를 가져가면 해당 버튼이나 텍스트 주변에 시각적으로 매력적인 라인이 생성됩니다. 웹사이트의 모든 요소에 더블 라인 효과를 추가할 수 있습니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: HTML, CSS(SCSS)\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_7.png)\n\n### 8. HTML 및 CSS를 사용한 푸터\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 – 웹사이트는 항상 헤더, 본문 및 푸터 세션으로 구성됩니다. 이 세 가지 섹션이 함께 전체 웹사이트를 형성합니다. 푸터는 웹사이트의 가장 아래 섹션입니다. 일반적으로 저작권 고지, 연락처 정보 및 개인정보 처리 방침 링크와 같은 중요한 정보가 포함되어 있습니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: HTML, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: 여기를 클릭해주세요\n\n프로젝트 데모:\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_8.png)\n\n## 9. 이미지 호버 애니메이션\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 — 이미지 호버에 애니메이션이 있는 것은 현대적인 웹사이트를 스타일링하는 기능입니다. 동적인 애니메이션 효과는 확대 또는 페이딩과 같은 것이며, 이미지 위에 커서를 올리면 트리거됩니다. 이러한 애니메이션은 웹사이트와 앱을 시각적으로 더 매력적으로 만들어주며 사용자 참여도를 높입니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: HTML, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_9.png)\n\n## 10. HTML과 CSS를 사용한 드롭다운 메뉴\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 - 드롭다운 메뉴는 목록 안에 저장된 여러 항목의 목록이며 구성된 및 접근 가능한 내비게이션 옵션을 제공하는 데 도움이 됩니다. HTML은 메뉴의 구조를 만들고 CSS는 모양과 동작을 스타일링합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: HTML, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: 여기를 클릭해주세요\n\n프로젝트 데모 :\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_10.png)\n\n## 11. 리스트 아이템 호버 효과\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부정보 — 호버 효과는 사용자가 요소 위에 마우스를 올렸을 때 CSS의 동적 효과 기능입니다. 다양한 종류의 효과는 목록을 더 매력적이고 사용자 친화적으로 만들며, 주로 내비게이션 메뉴 및 이미지 갤러리에서 사용자 상호작용을 강화하고 중요한 콘텐츠를 강조하는 데 사용됩니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_11.png)\n\n## 12. 사용자 정의 체크박스 HTML 및 CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 — 체크박스는 HTML 태그 내부에 있는 폼 요소입니다. 폼은 동시에 여러 사용자로부터 데이터를 수집하는 데 사용됩니다. 체크박스는 주로 동시에 여러 옵션을 선택하기 위해 사용되며, 체크박스에 사용자 정의 스타일을 추가하면 훌륭한 사용자 상호작용이 가능합니다. 또한 체크박스를 아이콘이나 이미지로 사용자 정의하거나, 모양과 크기를 변경할 수도 있습니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n프로젝트 데모:\n\n<img src=\"/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_12.png\" />\n\n## 13. 상자 로딩 애니메이션 HTML & CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 - 상자 로딩 애니메이션은 웹 사이트의 로딩 시간과 콘텐츠가 나타나는 시간 사이에 사용되는 애니메이션 유형입니다. 이를 통해 사용자에게 데이터가 처리 중임을 알려주어 사용자에게 피드백을 제공합니다. 움직이거나 색상이 변하는 상자를 사용하여 로딩이나 데이터 처리를 나타냅니다. 사용자 경험을 향상시키고 인식된 대기 시간을 줄여 사용자에게 피드백을 제공함으로써 웹 디자이너가 웹 사이트의 미적 감각과 사용성을 향상시키는 데 유용합니다.\n\n브라우저 호환성: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_13.png)\n\n## 14. 유리 효과 로그인 폼 HTML 및 CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 상세 정보 - 글래스 모피즘은 현대 웹사이트에서 사용되는 유니크한 사용자 인터페이스를 제공하기 위한 유리 효과입니다. 글래스 모피즘 효과에서는 배경을 흐리게 만들고 내용을 강조합니다. HTML은 형식을 구성하며 CSS는 흐릿한 배경과 투명도를 갖춘 유리한 효과를 얻기 위해 스타일링합니다. 이 디자인은 시각적으로 매력적으로 보일뿐만 아니라 직관적이고 매력적인 로그인 인터페이스를 만들어 사용자 경험을 향상시킵니다. 현대 웹 디자이너들에게 인기 있는 선택지입니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: HTML, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모:\n\n![Project Demo](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_14.png)\n\n## 15. 카드 이미지 호버 효과\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 — 카드 이미지 호버 효과는 웹사이트와 앱에 상호작용성을 더하는 매력적인 디자인 기능입니다. 사용자가 카드 이미지 위에 마우스를 올리면 스케일링이나 추가 정보 노출과 같은 동적 시각적 변화가 발생하여 사용자 참여를 높이고 콘텐츠 탐색을 촉진합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n언어: HTML, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모:\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_15.png)\n\n## 16. 드롭다운 리스트 HTML & CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부정보 — HTML과 CSS를 활용한 드롭다운 목록은 기본적인 사용자 인터페이스 요소입니다. HTML은 목록의 옵션을 정의하고, CSS는 폰트와 색상을 포함한 모양을 스타일링합니다. 사용자들이 미리 정의된 옵션 집합에서 선택할 수 있는 깔끔하고 조직적인 방법을 제공하여, 폼, 내비게이션 메뉴 및 상호작용 요소에서 흔하게 사용되어 사용자 경험을 향상시킵니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n언어: HTML, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모:\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_16.png)\n\n## 17. CSS를 사용한 사용자 정의 토글 스위치\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 — 토글 스위치는 웹사이트에서 주로 사용되는 두 가지 기능을 한 번에 추가하는 디지털 스위치 버튼입니다. 토글 버튼을 사용하여 한 상태에서 다른 상태로 전환할 수 있습니다. 마찬가지로 웹사이트의 다크 모드와 라이트 모드에서 토글 버튼을 사용할 수 있습니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n언어: Html, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: 여기를 클릭해주세요\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_17.png)\n\n## 18. 3D 카드 호버 효과\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 — 3D 카드 호버 효과는 웹사이트와 앱의 카드에 깊이와 상호작용을 더해주는 매력적인 디자인 기능입니다. 사용자가 카드 위로 마우스를 올리면, 뒤집히거나 회전하는 등 동적인 3D 변형이 발생하여 컨텐츠를 더욱 매력적이고 시각적으로 매력적으로 만듭니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n언어: HTML, CSS, JavaScript\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모 :\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_18.png)\n\n## 19. HTML & CSS를 사용한 텍스트 애니메이션\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 - HTML과 CSS를 사용한 텍스트 애니메이션은 웹 페이지의 텍스트에 흐려지는, 슬라이딩되는 또는 색상이 변경되는 등의 동적 효과를 추가하는 창의적인 기술입니다. 사용자 참여를 높이며 머릿글, 배너 또는 호출-투-액션 요소에 사용하여 시각적으로 매력적이고 상호 작용적인 콘텐츠를 만들 수 있습니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭해주세요](#)\n\n프로젝트 데모:\n\n![프로젝트 데모 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_19.png)\n\n## 20. 네온 텍스트 효과 CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 상세 정보 — 네온 텍스트 효과는 CSS 기능으로, 텍스트를 강조하는 데 도움이 되는 독특한 텍스트 색상을 선택하여 색조를 강조합니다. 이 텍스트 효과 기술은 웹 페이지의 텍스트에서 발광하는 네온 조명의 모습을 변경합니다. 특정 콘텐츠나 제목에 주의를 끌기 위해 사용되며, 웹 사이트와 애플리케이션의 미학과 시각적 영향을 강화합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n언어: Html, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭해주세요](#).\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_20.png)\n\n## 21. HTML 상단 바 슬라이드 다운 알림 CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 정보 - HTML 상단 표시줄 슬라이딩 알림은 일반적으로 사용자에게 경고할 내용이 있을 때 불러오는 팝업 효과입니다. 이 알림은 아이콘, 소리 추가, 사용자에게 경고하는 색상 변경 팝업을 스타일링할 수 있습니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 가능\n\n언어: HTML, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](URL)\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_21.png)\n\n## 22. 커스텀 체크박스 CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 — 체크박스는 HTML 태그 내의 form 요소의 일부입니다. form은 동시에 여러 사용자로부터 데이터를 수집하는 데 사용됩니다. 체크박스는 동시에 여러 옵션을 선택하는 데 주로 사용되며, 체크박스에 사용자 정의 스타일을 추가하면 훌륭한 사용자 상호 작용을 제공할 수 있습니다. 체크박스를 아이콘, 이미지로 사용자 정의하거나 체크박스의 모양과 크기를 변경할 수도 있습니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_22.png)\n\n## 23. CSS 타임라인 세로형\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 - 수직 CSS 타임라인은 웹페이지에서 상호 연결된 정보를 제시하는 창의적인 방법입니다. 일반적으로 CSS를 사용하여 이벤트나 콘텐츠를 수직 선을 따라 위에서 아래로 정렬합니다. 이 형식은 타임라인, 프로젝트 진행 상황 또는 역사적 사건을 표시하는 데 유용하며 시간 관련 콘텐츠를 탐색하는 매력적이고 사용자 친화적인 방법을 제공합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](링크)\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_23.png)\n\n## 24. 반응형 부트스트랩 내비게이션 바\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부사항 - 부트스트랩은 웹페이지의 각 요소에 대해 미리 정의된 스타일링이 있는 CSS 프레임워크입니다. 부트스트랩 네비게이션바는 작은 화면에서는 모바일 친화적인 메뉴로 축소되면서 전체 기능을 유지하는 반응형 네비게이션바입니다. 외관과 동작에 대한 사용자 정의 옵션을 제공하여 다양한 기기에서 원활하고 사용자 친화적인 네비게이션 경험을 제공합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS, 부트스트랩\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_24.png)\n\n## 25. CSS를 사용한 선물\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부정보 - 선물은 CSS를 사용하여 웹사이트 안에 만들어질 수 있는 동적 효과의 한 종류입니다. 숨겨진 이스터 에그, 장난스러운 애니메이션 또는 상호 작용적인 호버 효과가 포함될 수 있습니다. 사용자 경험을 향상시키고 온라인 상호 작용에 즐거움을 더해줍니다. 사용자가 선물을 클릭하면 이벤트가 트리거되며, CSS에서 열리는 애니메이션이 시작됩니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 가능\n\n언어: HTML, CSS\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_25.png)\n\n## 26. 2024 새해 카운트다운\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 - 카운트다운 타이머는 사용자에게 적절한 시간에 경고를 제공하는 데 주로 사용됩니다. 12월 31일 자정에 시간이 줄어들면서 전 세계 사람들이 새해를 맞이하기 위해 모여들곤 합니다. 이는 종종 불꽃놀이, 파티, 가족과 친구들과 함께 하는 만남을 포함합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS, Javascript\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: 여기를 클릭해주세요\n\n프로젝트 데모:\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_26.png)\n\n## 27. 자바스크립트를 사용한 그림 그리기 앱\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 — JavaScript로 작성된 그림 앱은 사용자가 디지턈 아트를 만들 수 있는 웹 애플리케이션입니다. 우리는 구조를 만들기 위해 HTML을 사용하고 스타일링을 위해 CSS를 사용합니다. JavaScript는 상호 작용형 캔버스와 그리기 도구를 제공하여 사용자가 웹 브라우저 내에서 직접 스케치, 그림, 및 다양한 형태의 디지턈 아트워크를 만들도록 합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 네\n\n언어: Html, CSS, Javascript\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](Link)\n\n프로젝트 데모:\n\n![프로젝트 데모 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_27.png)\n\n## 28. HTML CSS Javascript로 화면 녹화기 만들기\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 내용 — HTML, CSS 및 JavaScript로 화면 녹화기를 만드는 것은 웹 브라우저로부터 직접 비디오로 화면 활동을 캡처할 수 있는 복잡한 웹 개발 프로젝트입니다. 이는 자습서, 프리젠테이션 및 소프트웨어 데모에 다용도로 사용되며, 별도의 소프트웨어 설치 없이 강력한 화면 녹화 솔루션을 제공하는 웹 기술의 능력을 보여줍니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n언어: HTML, CSS, JavaScript\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_28.png)\n\n## 29. HTML CSS Javascript를 사용한 이미지 컬러 피커\n\n<div class=\"content-ad\"></div>\n\n프로젝트 세부 정보 - JavaScript를 사용한 이미지 색상 선택 도구는 사용자가 JavaScript 이벤트의 도움으로 이미지에서 색상을 추출하는 독특한 프로젝트입니다. 이미지 색상 선택 도구는 색상을 선택하는 데 도움이 되며, 사용자가 이미지를 클릭하면 이미지에서 색상의 세부 정보를 얻을 수 있습니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n언어: HTML, CSS, JavaScript\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: 여기를 클릭해주세요.\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_29.png)\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_30.png)\n\n## 31. HTML CSS JavaScript을 이용한 메모 앱\n\n프로젝트 세부 정보 — 메모 앱은 웹 브라우저 내에서 메모를 생성, 편집 및 정리하는 사용자 친화적인 도구입니다. 사용자들이 항상 펜과 종이를 가지고 다녀야 할 필요성을 줄여줍니다. 떠오르는 아이디어가 있을 때, 사용자들은 그냥 메모 앱에 아이디어를 적기만 하면 됩니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n<div class=\"content-ad\"></div>\n\n반응형: 아니요\n\n언어: Html, CSS, Javascript\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n프로젝트 데모:\n\n<div class=\"content-ad\"></div>\n\n![image](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_31.png)\n\n## 32. HTML CSS Javascript를 사용하여 캘린더 만들기\n\n프로젝트 상세 내용 — 캘린더는 날짜, 요일, 월 및 축제, 다른 전통 및 공휴일이 특정 날짜에 언급됩니다. 개인 플래너, 이벤트 기획자 및 웹사이트 캘린더에 유용하며 시간 관리 및 사용자 참여를 향상시킵니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n<div class=\"content-ad\"></div>\n\n반응형: 예\n\n언어: Html, CSS, Javascript\n\n프로젝트 코드 다운로드: 여기를 클릭해주세요\n\n프로젝트 데모:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_32.png\" />\n\n## 33. 장바구니에 추가 버튼\n\n프로젝트 세부 정보 - 전자 상거래 웹 사이트에서 자주 볼 수 있는 \"장바구니에 추가\" 버튼을 통해 사용자는 제품을 온라인 쇼핑카트에 쉽게 추가할 수 있습니다. HTML과 JavaScript를 활용하여 카트 내용 업데이트, 품목 수량 표시 및 총계 계산과 같은 작업을 트리거합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n<div class=\"content-ad\"></div>\n\n반응형: 네\n\n언어: Html, CSS, Javascript\n\n프로젝트 코드 다운로드: 이쪽을 클릭하세요\n\n프로젝트 데모:\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_33.png)\n\n![이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_34.png)\n\n## 34. JavaScript를 사용한 검색 필터\n\n프로젝트 세부 정보 — 거의 모든 웹사이트에서 검색 필터를 사용합니다. 사용자의 시간을 절약하고 사용자가 중요한 키워드를 검색 창에 입력하여 원하는 정보를 얻을 수 있도록 만들어진 검색 필터입니다. JavaScript 개념을 사용하여 키워드를 웹사이트 내용과 일치시키고 결과를 사용자에게 표시합니다.\n\n<div class=\"content-ad\"></div>\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 가능\n\n언어: Html, CSS, Javascript\n\n프로젝트 코드: 여기를 클릭하세요\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![Project Demo](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_35.png)\n\n## 35. HTML, CSS 및 Javascript를 사용한 진행 단계\n\n프로젝트 세부 정보 — 진행 막대 모양의 진행 단계는 주로 양식 작성 시 사용되는 종류의 진행 막대입니다. 진행 막대는 양식의 진행 상황을 사용자에게 표시하는 데 사용됩니다. 이러한 진행 단계는 특정 학생의 진행 상황을 확인하는 데 사용될 수 있습니다. 이는 사용자 참여와 사용성을 개선하며 진행 상황을 명확히 표시함으로써 전체 사용자 경험을 향상시키기 위해 양식 및 온보딩 프로세스에서 흔히 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\nBrowser Support: Chrome, Edge, Firefox, Opera, Safari\n\nResponsive: 네\n\n언어: HTML, CSS, Javascript\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_36.png)\n\n## 36. HTML, CSS 및 Javascript를 사용한 숨겨진 검색 바\n\n프로젝트 세부 정보 — 사용자의 시간을 절약하고 검색 바에 중요한 키워드를 입력하여 원하는 정보를 얻을 수 있는 검색 바가 생성되었습니다. 자바스크립트 개념을 활용하여 키워드를 웹사이트 내용과 일치시키고 결과를 사용자에게 표시합니다.\n\n<div class=\"content-ad\"></div>\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: HTML, CSS, 자바스크립트\n\n프로젝트 코드 다운로드: 여기를 클릭해주세요\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![Project Demo 1](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_37.png)\n\n![Project Demo 2](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_38.png)\n\n## 37. CSS와 Javascript를 사용한 햄버거 메뉴\n\n<div class=\"content-ad\"></div>\n\n프로젝트 상세 정보 - CSS와 자바스크립트로 만든 햄버거 메뉴는 웹사이트에서 화면 공간을 절약하기 위해 일반적으로 사용되는 콤팩트한 내비게이션 요소입니다. 클릭하면 메뉴로 확장되어 모바일 기기를 특히 쉽게 탐색할 수 있으며 전반적인 사용자 경험을 향상시킵니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 네\n\n언어: Html, CSS, Javascript\n\n<div class=\"content-ad\"></div>\n\n프로젝트 코드 다운로드: [여기를 클릭해주세요](#)\n\n프로젝트 데모:\n\n![프로젝트 이미지 1](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_39.png)\n\n![프로젝트 이미지 2](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_40.png)\n\n<div class=\"content-ad\"></div>\n\n## 38. 카운터 증가\n\n프로젝트 세부 정보 - JavaScript로 자주 생성되는 증가 카운터는 사용자가 지정된 범위 내에서 상호 작용적으로 숫자 값을 조정할 수 있게 합니다. 수량 선택, 양식 입력 또는 진행 추적과 같은 작업에 웹 응용 프로그램에서 널리 사용되며 숫자 데이터와 상호 작용하는 사용자 친화적인 방법을 제공하여 가용성을 향상시킵니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n<div class=\"content-ad\"></div>\n\n언어: Html, CSS, Javascript\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](링크)\n\n프로젝트 데모:\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_41.png)\n\n<div class=\"content-ad\"></div>\n\n## 39. 토스트 알림 코드\n\n프로젝트 상세 정보 — 토스트 알림 코드는 웹 애플리케이션 내에서 간단한 팝업 메시지를 생성하는 웹 개발 요소입니다. 일반적으로 HTML, CSS 및 JavaScript로 작성된 이러한 알림은 사용자의 활동을 방해하지 않으면서 중요한 정보를 제공합니다. 이러한 알림을 통해 성공 알림 또는 업데이트와 같은 메시지를 표시하여 사용자 경험을 향상시키며 필수 정보를 원활하게 전달합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n<div class=\"content-ad\"></div>\n\n언어: Html, CSS, Javascript\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n프로젝트 데모:\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_42.png)\n\n<div class=\"content-ad\"></div>\n\n## 40. HTML CSS 및 Javascript를 사용한 음악 플레이어\n\n프로젝트 세부 정보 — 음악 플레이어는 여러 곡을 저장하는 온라인 소프트웨어로, 재생되는 음악은 사용자 인터페이스를 통해 음악을 재생하는 기능을 제공합니다. 음악 플레이어에는 음악을 변경하기 위한 재생, 일시중지, 다음 및 이전 버튼과 음악을 연인들과 공유할 수 있는 공유 버튼과 같은 기능이 있습니다. 이러한 음악 플레이어는 다양한 장치에 대한 반응형 디자인을 자주 제공하여 몰입형이고 즐거운 청취 경험을 제공합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n<div class=\"content-ad\"></div>\n\n언어: Html, CSS, Javascript\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](링크)\n\n프로젝트 데모:\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_43.png)\n\n<div class=\"content-ad\"></div>\n\n## 41. 자바스크립트를 사용한 음성 인식\n\n프로젝트 세부 정보 - 음성 인식은 API의 도움을 받아 음성을 텍스트로 변환하는 소프트웨어입니다. 이러한 프로젝트들은 프론트엔드 웹 개발에서 가장 중요한 것 중 하나입니다. 음성인식 변환기는 마이크를 사용하여 음성을 듣고 그것을 텍스트로 해석합니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n<div class=\"content-ad\"></div>\n\n언어: HTML, CSS, 자바스크립트\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n프로젝트 데모:\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_44.png)\n\n<div class=\"content-ad\"></div>\n\n## 42. 자바스크립트를 사용하여 클립보드로 복사하기\n\n프로젝트 세부 정보 - 자바스크립트의 클립보드로 복사하는 기능을 사용하면 사용자가 텍스트, 링크 또는 코드와 같은 콘텐츠를 단 한 번의 클릭 또는 다른 사용자 상호 작용으로 빠르고 간편하게 복사할 수 있습니다. 클립보드로 복사는 주로 반복되는 텍스트의 사본을 저장하는 기능으로, 이를 통해 사용자는 동일한 요소를 여러 번 붙여 넣기 위해 클립보드를 사용하여 시간을 절약할 수 있습니다.\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n<div class=\"content-ad\"></div>\n\n\n언어: Html, CSS, Javascript\n\n프로젝트 코드 다운로드: [여기를 클릭하세요](Click Here)\n\n프로젝트 데모:\n\n![프로젝트 데모](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_45.png)\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![Project Demo](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_46.png)\n\n## 44. JavaScript를 사용한 Github 프로필 검색\n\n프로젝트 세부 정보 - JavaScript를 이용한 GitHub 프로필 검색 웹 애플리케이션은 사용자가 GitHub 사용자 프로필 및 저장소를 조회하고 볼 수 있도록 합니다. 프로그래머와 기기 애호가들에게 유용한 도구입니다. 이 프로필은 github API를 통해 사용자에게 표시되며, 서버 내에서 이름을 검색하여 github 프로필의 데이터를 가져온 후 해당 데이터와 일치하면 결과가 사용자에게 표시됩니다.\n\n<div class=\"content-ad\"></div>\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS, Javascript\n\n프로젝트 코드 다운로드: 여기를 클릭해주세요\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_47.png)\n\n## 45. 자바스크립트를 사용한 나이 계산기\n\n프로젝트 상세 — 자바스크립트를 사용한 나이 계산기는 사용자의 생년월일을 기반으로 즉시 사용자의 나이를 계산해주는 실용적인 웹 도구입니다. 이 나이 계산기는 사용자로부터 출생년도를 양식을 통해 입력받아 현재 연도에서 뺀 후 계산된 연령을 사용자에게 표시하는 간단한 자바스크립트 공식을 기반으로 작동합니다.\n\n<div class=\"content-ad\"></div>\n\n브라우저 지원: 크롬, 엣지, 파이어폭스, 오페라, 사파리\n\n반응형: 가능\n\n언어: HTML, CSS, 자바스크립트\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![Project Demo](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_48.png)\n\n## 46. 자바스크립트를 사용한 틱택토 게임\n\n프로젝트 세부 정보 — 틱택토 게임에서 두 명의 플레이어가 번갈아가며 아홉 개의 사각형 그리드 중 한 칸에 \"O\" 또는 \"X\"를 입력합니다. 승자는 세 개의 연속된 동일한 기호를 모은 첫 번째 사람입니다.\n\n<div class=\"content-ad\"></div>\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n언어: HTML, CSS, Javascript\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![Project Image](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_49.png)\n\n## 47. JavaScript를 사용한 드럼 키트\n\n프로젝트 세부 정보 — JavaScript를 기반으로 한 드럼 키트는 사용자가 실제 드럼을 연주하는 것처럼 상호 작용하는 웹 애플리케이션입니다. 사용자들은 가상 드럼 패드를 클릭하거나 키보드 키를 사용하여 드럼 소리를 발생시킬 수 있습니다. 우리는 다양한 소리와 트리거 함수를 사용합니다. 사용자가 특정 요소를 클릭하면 해당 요소의 소리가 트리거되고 JavaScript 함수에 의해 소리가 재생됩니다.\n\n<div class=\"content-ad\"></div>\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 아니요\n\n언어: HTML, CSS, 자바스크립트\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![Project Demo](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_50.png)\n\n## 48. 자바스크립트를 사용한 이미지 슬라이더\n\n프로젝트 세부 정보 — 이미지 슬라이더는 다음 및 이전 버튼을 클릭하여 여러 이미지를 표시하는 온라인 소프트웨어 유형입니다. 우리는 프로젝트에 여러 이미지를 추가하여 이미지 슬라이더를 만듭니다. 이미지 슬라이더는 동시에 다른 이미지를 표시하는 이미지 뷰어입니다.\n\n<div class=\"content-ad\"></div>\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS, Javascript\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![Project Demo](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_51.png)\n\n## 49. 자바스크립트를 사용한 무작위 Joke 생성기\n\n프로젝트 상세 내용 — JavaScript를 사용한 무작위 Joke 생성기는 미리 정의된 데이터베이스나 외부 API에서 짜릿한 웃음을 가져와 동적으로 보여주는 재미있는 웹 애플리케이션입니다.\n\n<div class=\"content-ad\"></div>\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: Html, CSS, Javascript\n\n프로젝트 코드 다운로드: 여기를 클릭하세요\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_52.png)\n\n## 50. 자바스크립트를 사용한 숫자 맞히기 게임\n\n프로젝트 세부 정보 - JavaScript를 사용한 숫자 맞히기 게임은 특정 범위 내에서 임의로 선택된 숫자를 추측하는 상호 작용형 웹 기반 게임입니다. JavaScript는 게임의 로직을 관리하고 플레이어의 시도를 추적하며 피드백을 제공합니다. 코딩 개념을 배우고 웹사이트에서 사용자들을 참여시키는 재미있고 교육적인 방법입니다.\n\n<div class=\"content-ad\"></div>\n\n브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n반응형: 예\n\n언어: HTML, CSS, Javascript\n\n프로젝트 코드 다운로드: 여기를 클릭해주세요\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![프로젝트 이미지](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_53.png)\n\n51. 자바스크립트를 사용한 음성 인식\n\n프로젝트 세부 정보 — 음성 인식 소프트웨어는 사용자 음성을 입력으로 받아들이고, 자바스크립트 함수를 통해 텍스트를 해석하고 특정 기능을 수행하는 데 사용됩니다. 개발자들은 Web Speech API와 같은 라이브러리를 사용하여 음성 명령을 포함시킬 수 있으며, 이를 통해 음성 검색, 딕테이션 또는 음성 제어 가상 어시스턴트 생성과 같은 기능을 어플리케이션에서 수행할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 브라우저 지원: Chrome, Edge, Firefox, Opera, Safari\n\n# 반응형: 아니요\n\n# 언어: Html, CSS, Javascript\n\n# 프로젝트 코드 다운로드: [여기를 클릭하세요](#)\n\n<div class=\"content-ad\"></div>\n\n프로젝트 데모:\n\n![Project Demo](/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_54.png)\n\n이 기사는 HTML, CSS 및 JavaScript 프로젝트에 대해 소스 코드와 함께 가르쳐줍니다. 우리가 제공하는 링크를 방문하여 50여가지 이상의 HTML, CSS 및 JavaScript 프로젝트 소스 코드에 대한 설명과 프로젝트 미리보기를 볼 수 있습니다.\n\n우리가 작업하는 많은 웹 개발 프로젝트들은 소스 코드가 무료로 제공됩니다. 저희 웹사이트를 방문해서 프론트엔드 프로젝트를 위한 초심자 및 전문가용 책갈피로 저장하세요. 또한, 어떠한 실수라도 발견하면 댓글란에 알려주시면 저희가 개선하려고 노력할 것입니다. 계속해서 도와주시고, 저희는 무료 콘텐츠를 제공하며 결국에는 큰 유료 IT 회사들에 문제를 일으킬 것입니다.\n\n<div class=\"content-ad\"></div>\n\n이 문서들은 프론트엔드 프로젝트에 관한 모든 것을 다룰 것이며, 초보자들이 프로젝트 아이디어를 얻고, 매력적인 컨셉을 만들고, 프로젝트를 확보하는 데 도움이 될 것입니다.\n\n감사합니다!\n전문을 읽고 더 많은 정보를 확인하세요\n\n# HTML, CSS 및 Javascript 프로젝트를 브라우저에서 실행하는 방법은 무엇인가요?\n\n먼저 코드 편집기가 필요합니다. VS Code Studio 또는 메모장을 사용할 수 있으며, 그런 다음 HTML, CSS 및 JavaScript 코드를 복사하여 코딩용 별도 또는 다른 파일을 만들고 그것들을 결합합니다. 파일을 만든 후 .html 파일을 클릭하거나 VS Code Studio에서 실행하여 프로젝트를 미리 볼 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 우리가 이 JavaScript 프로젝트를 이력서에 추가할 수 있을까요?\n\n네, 포트폴리오 웹사이트, 체육관 웹사이트, 전자상거래 웹사이트, 여행 웹사이트, 그리고 날씨 앱과 같은 몇 가지 프로젝트를 이력서에 추가할 수 있습니다.\n\n# 이러한 프로젝트를 진행하는 이점은 무엇인가요?\n\n초보자 친화적이고 현실 세계 프로젝트를 진행함으로써 실제 경험을 쌓고 디자인 및 개발 기술을 향상시킬 수 있습니다. 이러한 프로젝트는 유연하며 사용자가 필요에 따라 맞춤화할 수 있도록 허용하며, 면접을 위한 이력서에도 추가할 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_0.png"},"coverImage":"/assets/img/2024-05-01-50HTMLCSSandJavaScriptProjectsWithSourceCode_0.png","tag":["Tech"],"readingTime":26},{"title":"텍스트 상자 비활성화를 하면 안되는 이유","description":"","date":"2024-05-01 23:24","slug":"2024-05-01-Disablingtextboxeswhyitsabadideaandwhattodoinstead","content":"\n\n## 비활성화된 컨트롤\n\n왜 텍스트 상자를 비활성화하는 걸까요? 당연히 사용자가 값을 변경하지 못하게 하려는 것이죠.\n\n![image](/assets/img/2024-05-01-Disablingtextboxeswhyitsabadideaandwhattodoinstead_0.png)\n\n그렇다면 왜 처음부터 보여줄까요? 아마도 사용자가 컨트롤의 내용을 볼 수는 있지만 값을 변경하지는 못하게 하기 위해서일 것입니다.\n\n<div class=\"content-ad\"></div>\n\n그래서 사용자가 콘텐츠를 보는 것은 좋지만 수정하는 것은 원치 않을 때 텍스트 상자를 비활성화 하는 것에 문제가 있나요?\n\n이 질문에 대한 답변을 이 글에서 다룰 예정이며, 내가 추천하는 대안을 포함한 몇 가지 대안을 제시할 것입니다.\n\n불행하게도, 수정할 수 없는 정보를 제공하는 모든 솔루션에는 단점이 있습니다. 특히 비활성화 속성을 사용하여 HTML을 사용하는 경우 더욱 그렇습니다.\n\n이 글의 범위: 이 글에서는 텍스트 상자 (`input type=\"text\"/`)만 다룰 것입니다. 개발자가 일반적으로 비활성화하는 다른 컨트롤은 아래 요구 사항을 충족시키기 위해 고유한 변경이 필요합니다. 이러한 모든 내용을 다루면 글이 너무 길어집니다.\n\n<div class=\"content-ad\"></div>\n\n# 내용\n\n요구 사항\n\n솔루션으로 이룰 희망하는 목표를 설명합니다.\n\n텍스트 상자를 비활성화하지 말아야 하는 이유\n\n<div class=\"content-ad\"></div>\n\n텍스트 상자에 비활성 속성을 사용하는 문제를 살펴볼 거에요.\n\n의문의 해결책\n\n보조 기술 사용자를 위해 제안된 해결책과 그 해결책이 문제를 야기하는 이유에 대해 이야기할 거에요.\n\n가능한 대안 해결책\n\n<div class=\"content-ad\"></div>\n\n우리는 접근성 측면에서 더 유망한 몇 가지 방법을 논의할 것이며, 왜 그런지도 설명할 거에요. 만약 전체 글을 읽고 싶지 않다면, 제가 추천하는 해결책으로 건너뛰세요.\n\n결론\n\n링크\n\n# 요구 사항\n\n<div class=\"content-ad\"></div>\n\n저희 솔루션에서는 사용자가 시각적으로든 보조 기술을 이용하여 소비할 수 있는 콘텐츠가 있어야 합니다.\n사용자가 콘텐츠를 변경할 수 없도록 해야 합니다.\n사용자에게 콘텐츠를 변경할 수 없는 이유를 전달해야 합니다.\n적용 가능한 경우 사용자가 콘텐츠를 변경하는 방법을 전달해야 합니다.\n컬러 대비에 대한 측면을 고려하여 콘텐츠를 접근 가능한 방식으로 제시해야 합니다.\n\n이러한 요구 사항을 얼마나 잘 충족하는 지 여러 흔한 솔루션을 조사해보겠습니다. 하지만 먼저, disabled 속성을 사용하는 것의 문제에 대해 알아보겠습니다.\n\n목차로 이동\n\n<div class=\"content-ad\"></div>\n\n# 텍스트 상자를 비활성화하지 말아야 하는 이유\n\n## 의심스러운 색 대비\n\n```js\n<label for=\"txtFName\" id=\"lblFName\">이름</label>\n<input id=\"txtFName\" type=\"text\" disabled value=\"John\" />\n```\n\n상기 마크업은 브라우저에서 다음과 같이 렌더링됩니다:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-01-Disablingtextboxeswhyitsabadideaandwhattodoinstead_1.png)\n\n이제, 처음으로 생각할 수 있는 것은 이것이 텍스트 상자의 배경과 텍스트의 색상 간의 색 대비 비율을 통해 접근성을 위반할 수 있다는 것일 겁니다.\n\n그러나 이는 WCAG 레벨 AA 요구 사항을 충족합니다. 성공 기준 1.4.3 대비(최소)에 정해져 있지만, 성공 기준 1.4.6 대비(향상)에서는 미달합니다.\n\n이는 항상 그랬던 것은 아닙니다. 다양한 브라우저의 비활성 제어와 여러 UI 라이브러리에서는 더 어두운 배경 색상을 가지고 있어 분명히 레벨 AA를 위반했습니다.\n\n<div class=\"content-ad\"></div>\n\n비록 배경이 어두운 경우라도, WCAG에는 장애가 있는 컨트롤에 대한 예외 규정이 있었습니다. \"이해하기 - 성공 기준 1.4.3 대비 (최소값)\" 페이지에 따르면:\n\n이는 규정 준수와 접근성이 같은 것은 아니라는 상황 중 하나입니다.\n\n비활성화된 텍스트 상자가 텍스트와 배경색 간의 컬러 대비 비율이 최소 컬러 대비 비율을 충족시키지 못한다면, 왜 괜찮을까요?\n\n상기 출처에서 WCAG는 사용자가 해당 컨트롤과 상호작용하지 않기 때문에 괜찮다고 제안하는 것으로 보입니다.\n\n<div class=\"content-ad\"></div>\n\n내 의견으로는 다음 네 가지 이유로 그것은 잘못된 것 같아요:\n\n- 시각 장애가 있는 사용자는 그것이 비활성화되었거나 텍스트 상자에 사용자 상호작용이 없어야 하는 것을 어떻게 알 수 있을까요?\n- 정보가 중요하더라도 불변적이어도 어떨까요? 시각 장애나 색맹을 가진 사람도 그 정보를 소비할 수 있어야 하지 않을까요?\n- 우리는 사용자에게 그것이 비활성화되었음을 전달하는 데 색상만 의존하고 있지는 않나요 (이는 색상 사용 원칙 1.4.1 위반될 수 있음)?\n- 색상에 의존하는 것 외에도, 비활성화 속성이 있는 컨트롤은 스크린 리더나 기타 보조 기술에서 건너뛰어질 수 있어, 사용하는 사람들은 해당 컨트롤의 정보를 소비할 수도 없을 수도 있어요.\n\n## 사용자에게 비활성화되었음을 알리는 접근 방법이 없음\n\n누군가가 대답으로 말할 수도 있습니다. \"음, 웹 페이지는 사용자에게 텍스트 박스가 사용할 수 없어서 비활성화되었음을 알리고 있어요. 게다가, 스크린 리더가 비활성화된 폼 컨트롤을 항상 건너뛰지는 않아요. 어떻게 사용하는지에 따라 다르거든요.\"\n\n<div class=\"content-ad\"></div>\n\n첫 번째로, 사용자가 꺼져 있는 컨트롤과 상호 작용하려고 시도하게 만들어서 짜증을 내거나 해당 컨트롤이 꺼져 있다는 것을 깨닫기 전까지 짜증을 내게 할까? 누구나 짜증을 내게 될 거야.\n\n두 번째로, 맞아요: 스크린 리더는 사용자가 어떻게 사용하는지에 따라 꺼져 있는 컨트롤을 이해할 수 있어요. 예를 들어, JAWS와 NVDA에서 \"F\" 키를 누르면 다음 폼 컨트롤을 읽어주는데, 이는 텍스트 상자, 라디오 버튼 등을 포함하고 꺼져 있는 컨트롤도 읽을 거예요 (만약 \"Tab\" 키를 사용하여 페이지를 탐색한다면 꺼져 있는 컨트롤은 건너뛰게 되어요).\n\n하지만 누군가가 스크린 리더를 어떻게 사용할지를 상정하지 않을 건가요? 사용자가 스스로 찾아내기를 기대하지 말고 게으르게 할 게 아니라, 항상 해야 할 일을 하자고요: 가능한 가장 접근성 있는 콘텐츠를 만들어요.\n\n내가 알기로는, 사용자에게 컨트롤이 왜 꺼져 있는지 알려줘야 하는 경우가 WCAG에 없어요. 성공 기준 1.3.1 정보와 관계성의 \"정신\"에 해당한다는 주장을 할 수도 있지만, 솔직히 말해서 그 기준은 지극히 일반적이어서 거의 모든 것이 해당될 수 있는 범위에 있어요.\n\n<div class=\"content-ad\"></div>\n\n하지만 항상 말씀드리듯이 WCAG를 준수하는 것이 단순히 시작에 불과합니다. 한 줄에 있어도 운전을 잘 못할 수 있죠.\n\n![Image](/assets/img/2024-05-01-Disablingtextboxeswhyitsabadideaandwhattodoinstead_2.png)\n\n반박으로는 \"비활성화된 컨트롤 옆에 텍스트를 추가하여 사용자에게 해당 텍스트 상자가 비활성화되었음을 알릴 수 있습니다.\"라고 할 수 있습니다. 좋아요! 이제 시각적으로 페이지를 볼 수 있는 사용자들에게 신경 쓰고 있네요. 그런데 그 외의 사용자는 어떻게 해야 할까요?\n\n스크린 리더가 이 정보를 건너뛸 수 있다는 점으로 다시 돌아갑니다. 비활성화된 텍스트 상자에 aria-describedby 특성을 사용하더라도, 스크린 리더가 텍스트 상자를 여전히 건너뛴다면 절대 소비되지 않을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n컨텐츠로 돌아가기\n\n# 의문의 해결책\n\n위에서 제기된 문제를 해결하기 위해 몇 가지 흥미로운 제안된 해결책이 있었습니다.\n\n## 탭 인덱스 트릭\n\n<div class=\"content-ad\"></div>\n\ntabindex=\"0\" 속성/값을 요소에 추가하면 기본적으로 초점을 맞추지 않는 요소를 초점을 맞출 수 있게 만듭니다. 그러므로 이 속성이 비활성화된 텍스트 상자에 적용되면 모든 것이 잘 작동할 것입니다:\n\n```js\n<label for=\"txtFName\" id=\"lblFName\">이름</label>\n<input id=\"txtFName\" type=\"text\" disabled tabindex=\"0\" value=\"John\" />\n```\n\n웹 페이지를 보는 동안 보조 기술 없이 사용하는 대부분의 사용자는 차이를 알아차리지 못할 것입니다. 이는 대부분의 브라우저가 tabindex 속성보다 disabled 속성을 우선하여 처리하기 때문입니다.\n\n그러나 일부 스크린 리더는 tabindex가 0으로 설정된 비활성화된 텍스트 상자에 초점을 두거나(적어도 소비하는 것)을 허용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n화면 판독기들이 이를 처리하는 방식이 일관성이 없다는 문제가 있습니다. 일부는 이를 완전히 건너뛰고, 다른 것들은 그렇지 않습니다. 따라서 이 해결책은 작동하지 않을 것입니다.\n\n## aria-disabled 트릭\n\n다른 제안된 해결책은 비활성 속성 대신 aria-disabled 속성을 사용하는 것입니다:\n\n```js\n<label for=\"txtFName\" id=\"lblFName\">이름</label>\n<input id=\"txtFName\" type=\"text\" aria-disabled=\"true\" value=\"John\"/>\n```\n\n<div class=\"content-ad\"></div>\n\n이렇게하면 스크린 리더에게 텍스트 상자를 비활성화된 텍스트 상자처럼 표시할 수 있지만, 보조 기술을 사용하지 않는 사람들에게는 활성화됩니다.\n\n물론, 이는 사용자가 컨트롤을 편집할 수 없는 것을 방지하는 것을 무효화합니다. 다시 말해서, 이 솔루션은 disabled 속성을 사용하는 것보다 좋지 않습니다 - 적어도 일부 JavaScript 개입 없이는 그렇습니다.\n\n보조 기술을 사용하지 않는 사용자를 위해 이를 수정하려면, 개발자는 아마도 JavaScript를 사용하여 입력을 방지하고 코드 뒤에 텍스트 상자를 읽지 않도록 해야 할 것입니다. 시각적으로 사용자에게 텍스트 상자가 비활성화되었음을 알리고 왜 비활성화되었는지 및 향후 변경이 가능한지를 설명해야 할 것입니다.\n\n그러므로 이 면에선 가능성이 있긴 하지만, 그 모든 과정을 거치는 것은 불필요합니다. 요약하면: 이것은 나쁜 해결책입니다.\n\n<div class=\"content-ad\"></div>\n\n컨텐츠로 돌아가기\n\n# 가능한 대안 솔루션\n\n![이미지](/assets/img/2024-05-01-Disablingtextboxeswhyitsabadideaandwhattodoinstead_3.png)\n\n## 솔루션 1 탐구: 컨트롤 숨기기\n\n<div class=\"content-ad\"></div>\n\n일부 UX 전문가들은 컨트롤을 비활성화하는 대신 숨기는 것이 좋다고 제안합니다. 이렇게 하면 사용자가 결국 컨트롤이 왜 활성화된 상태인지 추측할 필요가 없어집니다.\n\n난 필요하지 않은 것을 숨기는 원칙이 유익하다고 생각하지만, 컨트롤이 제공하는 정보가 중요한 경우에는 어떻게 하나요? 그 정보를 숨겨 놓으면 사용자가 어떻게 소비하도록 허용할까요?\n\n이 해결책을 구현할 때, 그 점을 고려하는 데 시간을 들이는 것이 중요합니다.\n\n해결책 자체는 간단합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<body hidden>\n<h2>이 문제에 대한 솔루션은...</h2>\n<p>이것은 사용자를 혼란스럽게하지 않기 위해 숨겨진 비활성화된 요소입니다.</p>\n<p>첫 번째 이름: John</p>\n</body>\n```\n\n참고: 이 예제에서 `fieldset` 및 `legend` 요소는 단순히 해당 요소를 그룹화하고 레이블을 붙이는 방법입니다.\n\n이 솔루션은 적절할 수 있지만, 숨기는 정보가 중요하지 않은 경우에만 해당됩니다. 그렇지 않으면 이 솔루션은 부적절할 수 있으며 수정을 제한하려는 모든 경우에 대한 일반적인 솔루션이 될 수 없습니다.\n\n장점:\n\n<div class=\"content-ad\"></div>\n\n- 사용자가 값을 변경하는 것을 방지합니다.\n- 매우 간단합니다 (해당 요소나 부모 요소에 hidden 속성을 추가하기만 하면 됩니다).\n- 페이지의 컨트롤 수를 줄여 사용자가 쉽게 소비할 수 있도록 합니다.\n\n단점:\n- 컨트롤이 표시해야 할 정보를 사용자가 소비하는 것을 방지합니다.\n- 어떤 경우에는 숨겨진 이유를 설명하지 않습니다.\n- 때로는 정보가 중요할 수 있어 일반적인 해결책으로 작동하지 않을 수 있습니다.\n\n판단:\n\n<div class=\"content-ad\"></div>\n\n이 솔루션은 숨겨진 정보가 중요하지 않은 경우에만 적합합니다. 그렇지 않으면 모든 요구 사항을 충족하지 못합니다. 하지만 각각의 경우에 따라 구현할 수는 있습니다.\n\n## 솔루션 2 조사: 컨트롤 대신 텍스트 사용\n\n접근성 향상을 위해, 사용할 수 있는 대안으로, 비활성 상태인 컨트롤은 스크린리더에 건너뛰어질 수 있고, 몇 가지 폼 컨트롤이 읽기 전용 속성을 가지고 있지 않다면, 정보를 간단한 텍스트로 보여줄 수 있다고 들었습니다.\n\n다음과 같이 변경:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n<p><span>이름: </span><span id=\"fName\">John</span></p>\n```\n\n이렇게 변환해 보세요!\n\n```js\n<form>\n    <label for=\"txtFName\" id=\"lblFName\">이름</label>\n    <input id=\"txtFName\" type=\"text\" disabled value=\"John\" />\n</form>\n```\n\n만약 페이지에 `form` 요소가 없으면 문제가 해결될 것입니다. 그런데 단일 필드를 비활성화해야 하는 경우에는 어떻게 할까요? 그럼 화면 판독기가 `p` 요소를 건너뛰는 문제가 발생합니다.\n\n<div class=\"content-ad\"></div>\n\n다시 말해, 'form' 요소 내부에 다음 내용이 있다면:\n\n```js\n<label for=\"txtFName\" id=\"lblFName\">First Name</label>\n<input id=\"txtFName\" type=\"text\" disabled value=\"John\" />\n<p><span>Last Name: </span><span id=\"lName\">Doe</span></p>\n```\n\n\"Last Name\" 텍스트와 값이 무시될 가능성이 높습니다.\n\n그렇다면, 이를 적절한 해결책으로 활용할 수 있지만, 한 가지 방법으로 처리하는 것을 제안합니다.\n\n<div class=\"content-ad\"></div>\n\n- `form` 요소 외부에는 양식 컨트롤에 있을 것 같은 관련 텍스트를 그룹화하세요. 이렇게 하면 스크린 리더가 해당 텍스트를 건너뛰지 못하게 됩니다.\n- 모든 정보를 모달로 넣고, 양식 안에 모달을 열 수 있는 버튼을 추가하세요.\n\n그래서, 다음과 같이 만들어보세요:\n\n```js\n<p>다음 값들은 현재 편집할 수 없습니다. 11월 1일 Open Season에서 이 값들을 변경할 수 있습니다:</p>\n<ul class=\"immutableValues\">\n<li>이름: <span id=\"fNameValue\">John</span></li>\n<li>중간 이름: <span id=\"mNameValue\">Xavier</span></li>\n<li>성: <span id=\"lNameValue\">Doe</span></li>\n</ul>\n<form action=\"/accountInfo.php\" method=\"post\">\n<fieldset>\n<legend>모든 필드는 필수입니다</legend>\n<label for=\"txtNName\" id=\"lblNcName\">닉네임</label>\n<input id=\"txtNName\" type=\"text\" required autocomplete=\"nickname\" />\n\n...\n\n</fieldset>\n</form>\n```\n\n장점:\n\n<div class=\"content-ad\"></div>\n\n- 정보를 편집할 수 있는지에 대한 혼란이 없습니다.\n- 간단합니다.\n- 모달 솔루션을 사용하여 값이 편집되지 않는 이유를 더 자세히 설명하고 앞으로 어떻게/왜 편집 가능해질지 설명하는 말을 추가할 수 있습니다.\n\n단점:\n\n- 텍스트 필드와 텍스트 상자를 `form` 요소 내에서 혼합하여 사용할 수 없습니다.\n- 텍스트 상자가 돕는 기술에 의해 건너뛰어질 수 있기 때문에 form 내에 포함될 수 없습니다.\n- 편집할 수 없는 컨트롤을 그룹화하는 것이 의미 없는 경우를 고려해서, 모든 사람이 이해할 수 있는 규칙을 만드는 것이 도전적일 수 있습니다.\n\n판단:\n\n<div class=\"content-ad\"></div>\n\n이 솔루션은 텍스트 필드를 폼 밖이나 모달 안에 따로 그룹화할 수 있다면 작동할 수 있어요. 하지만 저희의 요구 사항을 충족시키기 위해서는 사용자에게 왜 정보를 편집할 수 없는지 알려주고 어떻게 해야 하는지 설명하는 정보를 추가해야 합니다. 필드 근처에 텍스트를 추가하는 것만으로 간단히 해결할 수 있어요.\n\n만약 이 두 요구 사항이 여러분의 상황에 해당하지 않는다면, 이 솔루션은 현재 상태 그대로 여러분에게 도움이 될 수 있을 거예요.\n\n## 3번 솔루션 조사 중: 읽기 전용 컨트롤(조정이 필요한)\n\n`input type=\"text\"/` 엘리먼트에 readonly 속성을 부여하여 읽기 전용으로 설정하는 것이 우리의 문제를 해결할 것 같아요, 그렇죠? 사용자가 탭할 수 있게 하고 회색 배경이 없다는 장점이 있어요. 이는 화면 낭독기 사용자와 키보드만 사용하는 사용자에게 도움이 되는 것으로 생각되지 않나요?\n\n<div class=\"content-ad\"></div>\n\n음, 그렇긴 한데 또 다른 문제가 있어요. 비활성화된 컨트롤과 유사한 문제인데요: 사용자가 텍스트 상자가 읽기 전용인 이유를 모른다는 거죠. 마찬가지로 사용자는 그게 왜 비활성화되었는지도 알지 못합니다.\n\n텍스트 상자에 대해 정보를 전달하고 편집을 방지하기 위해 readonly 속성이 해답이 될 수 있을까요? 맞아요, 하지만 이는 텍스트 상자에만 해당돼요. 아쉽게도 버튼, 체크박스, 선택 컨트롤 및 라디오 버튼은 readonly 속성을 지원하지 않아요.\n\n그렇다면 어떻게 이 솔루션을 활용할 수 있을까요? 우리는 다음과 같이 해야 해요:\n\n- 사용자에게 텍스트 상자가 읽기 전용임을 알린다.\n- 사용자에게 향후 텍스트 상자를 어떻게/왜 편집할 수 있는지 알려준다.\n- 이들을 텍스트 상자에 프로그래밍적으로 연결시킨다.\n\n<div class=\"content-ad\"></div>\n\nSo, 어떻게 컨트롤이 읽기 전용인지 알릴까요? 먼저, 다음과 같이 텍스트 상자의 레이블을 추가하는 것을 제안합니다:\n\n```js\n<label for=\"txtFName\" id=\"lblFName\">이름 \n<span aria-hidden=\"true\">(읽기 전용)</span></label><br />\n<input id=\"txtFName\" type=\"text\" readonly value=\"John\" />\n```\n\n이렇게 렌더링됩니다:\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-01-Disablingtextboxeswhyitsabadideaandwhattodoinstead_4.png)\n\n참고: 화면 판독기를 사용하는 경우 레이블에 \"읽기 전용\" 텍스트를 넣었지만 이것은 aria-hidden=\"true\" 속성을 가진 `span` 요소 내부에 있습니다. 왜냐하면 화면 판독기가 포커스를 받을 때 텍스트 \"읽기 전용\"을 이미 알려주기 때문에 레이블에 그것을 반복할 필요가 없기 때문입니다.\n\n텍스트 상자가 읽기 전용인 이유에 대해 전달하세요\n\n사용성과 접근성은 종종 겹치고, 이것은 분명 그중 하나입니다. 텍스트 상자가 읽기 전용인 경우, 왜인지 설명하는 페이지의 어디에서나 설명이 있는지 확인할 수 있나요?\n\n<div class=\"content-ad\"></div>\n\n만약 사용자가 값을 변경하고 싶어하지만(또는 필요로 하지만), 어떻게 해야 하는지 모르는 상황이라면 어떨까요? 사용자의 이름이 잘못 입력되었거나 생년월일이 틀린 경우를 생각해보세요. 컨트롤은 읽기 전용입니다; 사용자는 이제 어떻게 해야 할까요? \"편집(Edit)\" 버튼도 없습니다. 텍스트 상자를 편집 가능하게 하는 명확한 방법이 없습니다. 아마도 누군가가 고객 지원에 문의를 할 것 같네요.\n\n대신, 텍스트 상자 자체에 정보를 제공합시다. 이를 위해 도움말 텍스트를 사용합시다:\n\n```js\n<label for=\"txtFName\" id=\"lblFName\">이름 \n<span aria-hidden=\"true\">(읽기 전용)</span></label><br />\n<input id=\"txtFName\" type=\"text\" readonly value=\"John\" \naria-describedby=\"descFName\" /><br />\n<span id=\"descFName\" class=\"helptext\">\n이 값은 2023년 11월 1일에 개시되는 Open Season까지 변경할 수 없습니다<span hidden>.</span>\n</span>\n```\n\n이와 같이 렌더링됩니다:\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-01-Disablingtextboxeswhyitsabadideaandwhattodoinstead_5.png)\n\n스타일링은 신경 쓰지 않았어요; 이 부분은 여러분께 맡기겠습니다.\n\n텍스트 상자에 aria-describedby 속성을 부여하고 help 텍스트 'span' 요소의 id로 설정했다는 점을 주목해주세요. 이렇게 하면 텍스트 상자가 포커스를 받으면 화면 낭독기가 help 텍스트를 읽어줍니다.\n\n예를 들어, Chrome에서 NVDA로 볼 때 이렇게 읽힙니다:\n\n<div class=\"content-ad\"></div>\n\n부록: 도움말 텍스트 뒤에 마침표를 넣었습니다. 도움말 텍스트와 텍스트 상자의 값 사이에 일시적인 중단을 만들기 위함입니다. 오래 동안 스크린 리더를 사용해 온 사람들에게는 필요하지 않지만, (마침표는) 논리적인 구분을 제공하며, 모든 스크린 리더 사용자가 그들을 능통하게 사용할 것이라고 상정하지는 않습니다.\n\n또한, 도움말 텍스트가 텍스트 상자가 읽기 전용인 이유만이 아니라, 어떻게(또는 이 경우에는 언제) 다시 수정 가능한지에 대해서도 안내했음을 주목해 주세요.\n\n만약 설명을 도움말 텍스트로 충분히 간결히 작성할 수 없다고 생각된다면, \"[필드 이름]을 왜 편집할 수 없는지?\"라는 버튼이나 하이퍼링크를 고려해보세요. 클릭하면 이유를 명시하고 제어가 다시 편집 가능한지/어떻게 가능할지를 안내하는 작은 메시지가 표시될 수 있습니다.\n\n여러 텍스트 상자로 옵션을 준비해 두세요.\n\n<div class=\"content-ad\"></div>\n\n### 여러 텍스트 상자가 동일한 이유로 읽기 전용인 경우, 그룹으로 묶어 `fieldset` 안에 넣고 `legend` 요소를 사용하여 이유를 설명하는 것이 최적일 수 있습니다:\n\n```js\n<fieldset>\n<legend>오픈 시즌이 2023년 11월 1일에 시작될 때까지 이 필드를 변경할 수 없습니다<span hidden>.</span></legend>\n\n<label for=\"txtFName\" id=\"lblFName\">이름 \n<span aria-hidden=\"true\">(읽기 전용)</span></label><br />\n<input id=\"txtFName\" type=\"text\" readonly value=\"John\" /><br />\n\n<label for=\"txtLName\" id=\"lblLName\">성 \n<span aria-hidden=\"true\">(읽기 전용)</span></label><br />\n<input id=\"txtLName\" type=\"text\" readonly value=\"Doe\" /><br />\n\n</fieldset>\n\n<label for=\"txtNName\" id=\"lblNName\">별명</label><br />\n<input id=\"txtNName\" type=\"text\" autocomplete=\"nickname\" />\n```\n\n화면 읽기기는 일반적으로 해당 `fieldset` 내 첫 번째 컨트롤이 포커스를 받았을 때 `legend` 요소의 텍스트를 읽어줍니다.\n\n다음은 실제 렌더링 결과입니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-01-Disablingtextboxeswhyitsabadideaandwhattodoinstead_6.png\" />\n\nNVDA 및 JAWS에서 \"이름\" 필드가 초점을 받을 때 Chrome에서 이것이 어떻게 읽혀지는지 살펴보겠습니다 (아래에 \"[Tab]\"가 보이면 사용자가 Tab 키를 누르는 것을 나타냅니다):\n\n이 구현에 관한 몇 가지 사항:\n\n- `fieldset` 내의 첫 번째 텍스트 상자가 초점을 받으면 `legend` 텍스트가 먼저 읽히고 한 번만 읽힙니다 (뒤에 \"성\" 텍스트 상자가 초점을 받았을 때 다시 읽히지 않습니다). 사용자가 `fieldset` 외부로 다시 돌아올 때 `legend`가 읽힙니다.\n- 화면 판독기(NVDA 또는 JAWS)는 \"별명\" 필드가 초점을 받을 때 그룹화(`fieldset`)를 떠났음을 사용자에게 알려주지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n장점:\n\n- 보조 기술이 필요한 사용자와 필요하지 않은 사용자가 모두 사용할 수 있습니다.\n- 사용자에게 텍스트 상자가 편집할 수 없다는 것을 알려줍니다.\n- 사용자에게 텍스트 상자가 왜 편집할 수 없는지, 언제 편집 가능해지는지 알려줍니다.\n- 비교적 간단합니다.\n\n단점:\n\n- 이 해결책은 (JavaScript 개입 없이) 텍스트 상자와 `textarea` 컨트롤에만 사용 가능합니다.\n- `fieldset` 방법을 채택하고 `fieldset` 외부의 컨트롤이 포커스를 받을 때 어떤 단서도 제공하지 않으면 보조 기술 사용자에게 혼란을 줄 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n결론:\n\n저는 이게 가능한 가장 접근성 높은 해결책이라고 말하고 싶은 건 아닙니다; 하지만 제가 조사한 바로는 (적어도 텍스트 상자에 대해서는) 최선의 해결책인 것 같아요.\n\n비교적 간단하며, 반복 가능하며, 접근성이 좋아요.\n\n목차로 돌아가기\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n텍스트 상자를 완전히 비활성화하는 것은 접근성이 떨어지지만 (놀랍게도) WCAG와 일치합니다.\n\n최대 접근성을 추구하지 않고 준수를 목표로 하는 것은 자녀를 살려 둔 것만으로 부모의 일을 했다고 말하는 것과 같습니다. 가끔은 그게 당신이 할 수 있는 전부일 수도 있죠 - 이해합니다.\n\n하지만 사용자들을 위해 최선을 다하려고 항상 노력하세요. 그들이 콘텐츠를 어떻게 소비하든 상관없이요.\n\n<div class=\"content-ad\"></div>\n\n또한, \"접근 가능한\" 것은 스크린 리더를 사용하는 사람뿐만 아니라 시각적인, 기억력, 실행 기능 및 인지적 도전을 겪는 사람들까지 모두를 고려해야 합니다.\n\n그들이 내용을 소비할 수 있는 방식으로 제공해주세요.\n\nContents로 돌아가기\n\n# 링크\n\n<div class=\"content-ad\"></div>\n\n- HTML에서 폼 컨트롤 비활성화하기 by Hajime Yamasaki Vukelic\n- 비활성화된 버튼을 사용하지 마세요 by Tú Bùi\n- WCAG\n- MDN 웹 문서: Disabled 속성\n- MDN 웹 문서: Readonly 속성","ogImage":{"url":"/assets/img/2024-05-01-Disablingtextboxeswhyitsabadideaandwhattodoinstead_0.png"},"coverImage":"/assets/img/2024-05-01-Disablingtextboxeswhyitsabadideaandwhattodoinstead_0.png","tag":["Tech"],"readingTime":14},{"title":"음향 예술","description":"","date":"2024-05-01 23:22","slug":"2024-05-01-AUDIOART","content":"\n\n오디오, 미술, 상호 작용\n\n## \"오디오 아트\"는 제너레이티브 아트와 사운드를 결합한 매혹적인 오디오-시각적 경험입니다. p5.js를 사용하여 음악과 사용자 상호 작용에 반응하는 대화형 캔버스를 만들어 독특하고 몰입적인 경험을 제공합니다.\n\n요약:\n\n\"오디오 아트\"는 사운드와 시각 예술 간의 관계를 탐구하는 대화형 오디오-시각 프로젝트입니다. 이 프로젝트는 다니엘 시에라의 \"오실레이트\"에서 영감을 받았으며 시청자에게 비슷한 매혹적인 경험을 제공하는 것을 목표로 합니다. p5.js를 사용하여 실시간 시각화를 생성하고 음악과 사용자 상호 작용에 반응합니다.\n\n<div class=\"content-ad\"></div>\n\n저희 프로젝트는 두 가지 주요 구성 요소로 이루어져 있어요: 시각적인 부분과 오디오 부분입니다. 시각적인 부분은 재귀와 프랙탈 원칙에 기반한 생성 예술로 구성되어 있어요. 이 알고리즘은 사용자의 입력과 실시간 소리 주파수에 기반하여 복잡한 모양과 패턴을 생성해냅니다. 프로젝트의 시각적인 부분은 상호작용적으로 디자인되어 사용자가 키를 누르거나 클릭하고 마우스를 드래그하여 캔버스를 조작할 수 있도록 되어 있어요.\n\n우리 프로젝트의 오디오 부분도 매우 중요해요. 시청자에게 몰입감 있는 경험을 제공하는 데 핵심적인 역할을 하죠. 프로젝트에는 p5.js 라이브러리를 사용하여 자체 음악을 만들었어요. 이 음악은 주변적이고 명상적으로 디자인되어 있어 시각적인 부분을 다루면서 몰입감 있는 경험을 제공합니다. 또한 음악의 주파수를 시각적인 부분에 통합하여, 소리와 생성 예술 간의 피드백 루프를 만들어 내었어요.\n\n총론적으로, 이 프로젝트는 생성 예술의 아름다움과 소리의 힘을 결합한 독특하고 매혹적인 경험을 제공하는 것을 목표로 하고 있어요. 이는 감각과 창의력의 무한한 가능성 사이의 관계를 축하하는 것입니다.\n\n\n![이미지](/assets/img/2024-05-01-AUDIOART_0.png)\n\n<div class=\"content-ad\"></div>\n\n![AUDIOART_1 이미지](/assets/img/2024-05-01-AUDIOART_1.png)\n\n![AUDIOART_2 이미지](/assets/img/2024-05-01-AUDIOART_2.png)\n\n반성\n\n프로젝트를 만드는 과정을 돌이켜보면, 도전적이지만 보람찬 경험이었다고 말할 수 있어요. 어떤 창의적인 작업이든, 최종 제품을 도출하기 전에 여러 실험과 반복이 필요합니다. 제 주요 목표 중 하나는 사용자에게 스트레스를 해소해 주는 경험을 제공할 수 있는 소리의 시각적 표현을 만드는 것이었어요. 예를 들어, 움직임, 색상, 타이밍을 조정하는 데 수시간을 보내며, 원하는 메시지를 전달하기 위한 완벽한 조합을 찾을 때까지 노력했어요. 이제 창의적인 과정과 필요한 인내와 헌신에 대해 새롭게 깨달았어요. 그것을 이야기하는 한 가지 방법이에요. 저는 그것을 미술, 프로그래밍, 그리고 많은 시행착오의 결합으로 생각하고 있어요!\n\n<div class=\"content-ad\"></div>\n\n나의 첫 번째 작업은 시각화 작업이었습니다. 음악과 확고한 연결을 나타내기 위해 시각화물에 전기 충전 CD와 같은 구조의 가운데 제작한 오디오를 확실히하는 것이었습니다. 전체적인 소리의 느낌을 주기 위해 서로 다른 유형의 소리를 찾아 결정하기 전에 최종 음향을 결정하기 전에 찾아보았습니다. 단조로움을 피하기 위해 캔버스의 서로 다른 위치에서 주파수와 진폭을 다양하게 만들어 소리가 단조로워지지 않도록 했습니다. 선들 사이의 부드러운 전환을 만드는 데 어려움을 겪었지만 프로그래밍 기술을 활용하여 극복할 수 있었습니다.\n\n프로젝트에 이벤트 리스너를 추가하여 사용자가 화면을 녹화하고 녹화하는 과정 중에 이미지와 비디오를 저장할 수 있도록 했습니다. 화면 녹화 개념을 추가하는 것이 특히 어렵았는데 p5.js 라이브러리에서는 관련 자료를 찾을 수 없었습니다. 하지만 온라인에서 유용한 자료를 찾을 수 있었습니다.\n\n전반적으로, 상호작용일 동안 동료들로부터 피드백을 받아 프로젝트의 디자인과 구성을 개선하는 것이 매우 가치 있었습니다. 또한 Daniel Sierra의 \"Oscillate\" 프로젝트에서 영감을 얻어 내가 이루고자 했던 것들을 곰곰이 생각해볼 수 있었습니다.\n\n기술적 측면을 개발하는 것은 나에게 어려운 과정이었습니다. 특히, 이 과정의 일환으로 p5.js 라이브러리를 배우고 탐험해야 했기 때문이었습니다. 짧은 시간 내에 모든 것을 해내는 것은 여전히 어렸지만, 많은 것을 성취할 수 있었습니다.\n\n<div class=\"content-ad\"></div>\n\n저희가 직면한 또 다른 도전은 소리 작업이었습니다. 사전로딩 대신에 제 소리를 생성해야 했는데, 이는 제게 새로운 경험이었습니다. 게다가 스크린 녹화도 통합해야 했는데, 이것은 이전에 한 적이 없었습니다. 이러한 기능들을 구현하는 방법을 찾기 위해 온라인 자료를 검색해야 했습니다. 도전이 있었지만 새로운 프로젝트를 만들기 위해 필요한 새로운 기술을 배우고 적용할 수 있었습니다. 이 과정은 복잡했고 많은 시행착오와 연구가 필요했습니다. 소리 디자인의 기본을 배워야 했으며, 사용자 정의 소리 효과를 만들고 통합하는 방법을 찾아야 했는데, 이것은 전혀 새로운 기술이었습니다. 프로세스의 어려움에도 불구하고, 결국에는 모든 요소를 하나로 결합하여 일관된 프로젝트로 완성할 수 있었습니다.\n\n회고해보면, 더 나은 구현이 가능했던 부분들이 있습니다. 사용자 인터페이스를 더 개발할 시간을 더 투자했다면 더 나은 결과물이 될 수 있었을 것입니다. 다시 한번 할 수 있다면 사용자 경험에 더 집중하고 프로젝트를 보다 접근하기 쉽고 사용자 친화적으로 만들어 사용자의 요구를 효과적으로 충족시킬 것입니다.\n\n프로젝트를 반성하면, 개념은 잘 작동했지만 일부 측면에서는 만족스럽지 않았습니다. 사용자 인터페이스를 개발하는 데 더 많은 시간을 할애하고 시각적으로 더 매력적으로 만들었다면 이점이 있었을 것입니다. 실제 세계나 상호작용하는 사람과 연결되는 더 현실적인 소리들은 어떤 종류의 음악을 좋아하는지 인식한 후 해당 음악의 비트를 뒷받침하는 방식으로 더 매력적일 것이라고 믿습니다. 이 프로젝트를 더 발전시키고 미래 프로젝트로 NYU Shanghai를 넘어 다양한 관객을 대상으로 개발하고 싶습니다.\n\n최종 프로젝트 발표에서 동료와 강사의 피드백은 가장 가치 있는 요소 중 하나였습니다. 동료들과 문교수님께서 캔버스에 지침 추가하고 웹사이트 전체적으로 동일한 배경을 사용하는 것과 같은 건설적인 피드백을 주셨습니다. \"About\" 페이지에 설명을 작성하고 싶었지만 완전히 망각했고, 동일한 배경이 원활한 사용자 여정을 위해 좋겠지만 시각적으로 매력적으로 만들기 위해 달리 만들었습니다. 프로젝트가 도전한 아이디어들을 더 탐구하는 것은 향후에 중요할 것이며, 특히 소리와 시각을 결합하여 안정적이고 즐거운 경험을 만드는 방식에 대한 더 깊은 탐구가 필요할 것입니다.","ogImage":{"url":"/assets/img/2024-05-01-AUDIOART_0.png"},"coverImage":"/assets/img/2024-05-01-AUDIOART_0.png","tag":["Tech"],"readingTime":4},{"title":"JavaScript를 사용하여 HTML과 JSON을 연결하는 방법","description":"","date":"2024-05-01 23:21","slug":"2024-05-01-HowtoConnectHTMLwithJSONUsingJavaScriptABeginnersGuide","content":"\n\n![이미지](/assets/img/2024-05-01-HowtoConnectHTMLwithJSONUsingJavaScriptABeginnersGuide_0.png)\n\n웹 개발은 흥미로운 여정입니다. 동적 웹 페이지를 만드는 첫 번째 단계 중 하나는 HTML을 JSON 데이터와 연결하는 방법을 배우는 것입니다. 이 초보자를 위한 가이드에서는 시작하는 데 도움이 되는 간단한 예제를 통해 안내해 드리겠습니다.\n\n# 필수 준비물\n\n시작하기 전에 다음이 필요합니다:\n\n<div class=\"content-ad\"></div>\n\n- HTML 및 JavaScript의 기본 지식.\n- 코드 편집기(예: Visual Studio Code).\n- 웹 브라우저.\n\n# 단계 1: HTML 구조 만들기\n\nJSON 데이터를 표시하기 위한 HTML 구조를 설정하는 것부터 시작해 봅시다. 이 예시에서는 데이터를 표시할 기본 HTML 페이지를 만들어보겠습니다. 여기에 데이터가 표시될 `div`를 생성할 것입니다. 아래는 간단한 HTML 구조입니다:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>JSON을 HTML로 변환하는 예시</title>\n</head>\n<body>\n    <div id=\"dataDisplay\">\n        <!-- JSON 데이터가 여기에 표시됩니다 -->\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n이 HTML 구조에서는 JSON 데이터를 표시할 `div` 요소를 id가 \"dataDisplay\"인 요소로 설정했습니다.\n\n# 단계 2: JSON 데이터 생성하기\n\n이제 표시할 데이터가 포함된 간단한 JSON 파일을 만들어보겠습니다. 이 예제에서는 다음과 같은 구조를 가진 data.json이라는 JSON 파일을 사용하겠습니다:\n\n```js\n{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"city\": \"Anytown\"\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 JSON 데이터는 사람의 이름, 나이, 도시를 나타냅니다.\n\n# 단계 3: 자바스크립트를 작성하여 HTML 채우기\n\n자, 이제 JavaScript 파일 (script.js)을 작성하여 JSON 데이터를 가져와 HTML에 표시해 보겠습니다:\n\n```js\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    fetch('data.json')\n        .then(response => response.json())\n        .then(data => {\n            const dataDisplay = document.getElementById(\"dataDisplay\");\n\n            // JSON 데이터를 표시하는 HTML 요소 생성\n            const nameElement = document.createElement(\"p\");\n            nameElement.textContent = \"이름: \" + data.name;\n\n            const ageElement = document.createElement(\"p\");\n            ageElement.textContent = \"나이: \" + data.age;\n\n            const cityElement = document.createElement(\"p\");\n            cityElement.textContent = \"도시: \" + data.city;\n\n            // 요소들을 \"dataDisplay\" div에 추가\n            dataDisplay.appendChild(nameElement);\n            dataDisplay.appendChild(ageElement);\n            dataDisplay.appendChild(cityElement);\n        })\n        .catch(error => console.error(\"JSON 데이터를 가져오는 중 오류 발생:\", error));\n});\n```\n\n<div class=\"content-ad\"></div>\n\n이 JavaScript 코드는 fetch API를 사용하여 data.json에서 JSON 데이터를로드합니다. 그런 다음 JSON 데이터 (이름, 나이 및 도시)를 표시하기 위해 HTML 요소를 생성하고 \"dataDisplay\" div에 추가합니다.\n\n# 단계 4: 웹 페이지 테스트하기\n\n웹 브라우저에서 HTML 파일을 열면 페이지에 JSON 데이터가 표시됩니다. 축하합니다! JavaScript를 사용하여 HTML과 JSON을 성공적으로 연결했습니다!\n\n이것은 당신의 웹 개발 여정의 시작에 불과합니다. 이 기본 지식을 바탕으로 더 많은 고급 기능을 탐색하고, 상호 작용형 웹 애플리케이션을 만들고 사용자를 참여시킬 동적 웹 사이트를 구축할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n디지피 | 즐거운 코딩! 🖥️🥰","ogImage":{"url":"/assets/img/2024-05-01-HowtoConnectHTMLwithJSONUsingJavaScriptABeginnersGuide_0.png"},"coverImage":"/assets/img/2024-05-01-HowtoConnectHTMLwithJSONUsingJavaScriptABeginnersGuide_0.png","tag":["Tech"],"readingTime":3},{"title":"게임패드 API로 놀아보기","description":"","date":"2024-05-01 23:18","slug":"2024-05-01-PlayingwiththeGamePadAPI","content":"\n\n![게임패드API](/assets/img/2024-05-01-PlayingwiththeGamePadAPI_0.png)\n\n저는 게이머가 아닙니다. 한 때 인생에서 일종의 게이머였을 수도 있지만 더 이상 그렇지 않습니다. 그때조차도 제 능력은 그다지 대단하지 않았죠. 그럼에도 불구하고, 컴퓨터에서 게임패드를 사용하도록 나를 격려한 두 가지 사건이 있었습니다. 첫 번째는 90년대/2000년 초반의 비디오 게임을 하면서 느꼈던 향수로, 라즈베리 파이, 케이스와 몇 개의 컨트롤러를 구입하여 RetroPie를 만들어 가는 개인 프로젝트로 이어졌습니다.\n\n두 번째는 \"심심함\"의 오후였습니다. 무언가 개발하고 싶었지만 아이디어가 바닥나 있었죠. 그래서 새로운 것을 탐험하기로 결심했습니다. MDN의 웹 API 페이지로 이동해보니, g로 시작하는 항목 가운데 뭔가 눈에 띄는 것이 있었습니다: 게임패드 API.\n\n# 호기심은 고양이를 죽인다...\n\n<div class=\"content-ad\"></div>\n\n게임패드를 액세스하고 제어하기 위한 표준 API? 그리고 \"실험적으로\" 나열되어 있더라도 모든 주요 브라우저에서 지원된다고? 예상치 못했지만 흥미로운 일이네요. 제 호기심을 자극했어요.\n\n컴퓨터, 게임 컨트롤러, 자바스크립트 지식, 그리고 몇 시간의 여유시간이 있었어요... 무얼 잃을까요?\n\n첫 페이지를 읽은 후에, 굉장히 간단해 보였어요: 상호작용, 이벤트, 그리고 메소드로 놀 수 있는 수줄. 제가 다룰 수 없는 것은 없다고 생각했죠...라고 생각했어요. MDN 튜토리얼로 이동해서 첫 코드 예제를 조금 단순화했어요:\n\n```js\nwindow.addEventListener(\"gamepadconnected\", function() {\n  console.log(\"게임패드가 연결되었습니다\");\n});\n```\n\n<div class=\"content-ad\"></div>\n\n페이지가 브라우저에 로드되었고, 기분 좋게 RetroPie 컨트롤러를 컴퓨터에 연결했는데...\n\n아무 반응이 없었어요.\n\n게임패드를 뽑았다가 다시 꽂아보았지만...\n\n아무 반응이 없네요.\n\n<div class=\"content-ad\"></div>\n\n언플러그. 다시 연결했어요.\n\n아무 변화가 없더라구요.\n\n게임패드를 콘솔 옆 올바른 위치로 되돌리려던 찰나에 다른 작업으로 넘어가기 전에 몇 개의 버튼을 눌렀더니, 무언가 일어났어요. 콘솔에 메시지가 표시되었죠:\n\n```js\n게임패드가 연결되었습니다\n```\n\n<div class=\"content-ad\"></div>\n\n페이지를 새로고침하고 버튼을 눌렀더니 콘솔에 다시 \"게임패드 연결됨\" 메시지가 나타났어요. 게임패드 API에 대해 많은 교훈 중 첫 번째를 배웠어요: 모든 컨트롤러가 컴퓨터에 연결되자마자 브라우저에 연결되는 것은 아니라는 거죠. 대부분은 버튼을 누르거나 조이스틱을 움직이지 않으면 활성화되지 않아요.\n\n# 시작하기: 무엇이 지원되나요?\n\n지금 Chrome이 지원하는 Gamepad API를 알았으니, 다음 단계는 다른 브라우저 운영체제에서 테스트해보는 거예요. 맥과 윈도우, 다른 브라우저, 다른 운영체제에서 같은 브라우저까지 시도해봤는데, 실험적인 API인데도 널리 지원되고 있어요. 심지어 윈도우의 Edge에서도 작동돼요!\n\n![게임패드 API 사용](/assets/img/2024-05-01-PlayingwiththeGamePadAPI_1.png)\n\n<div class=\"content-ad\"></div>\n\n일부 기능은 이전 버전에서도 사용할 수 있을 수도 있어요. 그럼에도 불구하고, 이 글에서 언급된 모든 기능은 위 표에 나타난 브라우저를 필요로 해요 (진동을 제외한 경우, 지원이 일관되지 않을 수 있습니다. 곧 자세히 살펴볼게요).\n\n다음으로 생각한 것은: 이를 어떤 컨트롤러와 함께 사용할 수 있을까요? 나는 RetroPie와 함께 제공된 후조품 게임패드를 사용해봤지만, PS1, PS2, PS3, 그리고 Xbox One용 컨트롤러도 있었어요. (사실, 게이머가 아니라고 주장하는 사람으로서 너무 많은 콘솔을 가지고 있군요.) 원래 콘솔 컨트롤러도 작동할까요?\n\n간단한 대답: 네.\n\n자세한 대답: 일부는 작동하고, 일부는 작동하지 않아요. 예를 들어, PlayStation 컨트롤러(버전에 상관없이)나 닌텐도 스위치 컨트롤러는 문제가 없었어요. 몇몇 친구들이 Wii 컨트롤러도 데모 페이지에서 테스트해보고, 그것도 원활하게 작동했어요. 그러나 Xbox 컨트롤러는 다른 이야기였어요. 그들이 더 많은 전원이 필요할 수도 있고, 우리가 테스트한 버전이 올바르지 않았을 수도 있어요. 하지만, 우리는 그 중 어떤 것도 작동시키지 못했어요.\n\n<div class=\"content-ad\"></div>\n\n... 흥미로운 사실이죠. 모조 게임패드는 모두 훌륭하게 작동했는데, 나중에 설명할 몇 가지 주의할 점이 있어요.\n\n# 게임패드 인터페이스\n\n다음 단계는 예제를 확장하고 게임패드 인터페이스를 탐색하는 것이었어요. gamepadconnected 이벤트가 연결된 게임패드 정보를 콜백 함수의 매개변수로 전달한다는 것을 알았죠. 이 정보를 볼 수 있게 객체를 기록해봤어요:\n\n```js\nwindow.addEventListener(\"gamepadconnected\", function(e) {\n  console.log(\"게임패드가 연결되었습니다.\");\n  console.log(e.gamepad);\n});\n```\n\n<div class=\"content-ad\"></div>\n\n게임패드 인터페이스의 정의와 일치하는 결과를 기대했었어요:\n\n```js\ninterface Gamepad {\n  id: String,\n  index: Long,\n  connected: Boolean,\n  timestamp: Timestamp,\n  mapping: enum(\"standard\", \"\"),\n  axes: Array<double>,\n  buttons: Array<GamepadButton>\n}\n```\n\n하지만 결과물에는 약간 희망적으로 보이는 추가 정보가 포함되어 있었어요:\n\n```js\n{\n  id: \"USB 게임패드            (제조사: 081f 제품: e401)\",\n  index: 0,\n  connected: true,\n  timestamp: \"2007.0849999901839\"\n  mapping: \"\",\n  vibrationActuator: null,\n  axes: [-0.003921568393707275, -0.003921568393707275],\n  buttons: [\n    {pressed: false, touched: false, value: 0},\n    {pressed: true, touched: true, value: 1},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0},\n    {pressed: false, touched: false, value: 0}\n  ]\n}\n```\n\n<div class=\"content-ad\"></div>\n\n아래와 같은 표에서 찾을 수 있습니다:\n\n- id는 컨트롤러의 모델/유형을 식별하는 문자열입니다.\n- index는 연결 시 할당된 게임패드의 고유 식별자입니다 (기본적으로 연결된 순서).\n- connected는 게임패드의 상태를 나타냅니다.\n- timestamp는 게임패드가 연결된 시간이 아니라 게임패드 데이터가 마지막으로 업데이트된 시간을 나타냅니다.\n- mapping은 버튼 매핑이 표준인지 아닌지를 지정하는데, 다음 섹션에서 자세히 설명하겠습니다.\n- axes는 게임패드의 다양한 축/조이스틱의 값이 들어 있는 배열입니다. 나중에 설명하겠습니다.\n- buttons는 버튼들의 배열입니다.\n\n아직 명확히 알지 못한 것들도 있었습니다: 연결된 게임패드에는 10개의 버튼과 2개의 축이 나타났지만, 물리적 장치를 보니 12개의 버튼과 축이 없었습니다. 조금 이상했습니다. 곧 왜 이런 일이 발생했는지 알게 되겠죠.\n\n한편, 게임패드 인터페이스에 익숙해지던 중 재미있는 부분에 대비했습니다.\n\n<div class=\"content-ad\"></div>\n\n# 버튼\n\n게임패드가 연결되었거나 연결이 해제되었을 때를 감지하고 그 값과 속성을 읽어낼 수 있어요. 하지만 그 자체로는 실용적이지 않아요. 더 흥미로운 것으로 넘어갈 거예요.\n\n방금 Gamepad 객체에는 버튼들의 배열을 포함하는 buttons 속성이 있다는 것을 보았어요. 이 버튼들은 자체 인터페이스(GamepadButton)를 가지고 있는데, 이는 세 가지 읽기 전용 값이 있는 개체입니다:\n\n```js\ninterface GamepadButton {\n  pressed: Boolean,\n  touched: Boolean,\n  value: Double\n}\n```\n\n<div class=\"content-ad\"></div>\n\n그들은 대개 스스로 설명되어 있어요:\n\n- pressed는 버튼이 눌렸는지 여부를 나타냅니다. 버튼이 눌린 동안에는 true가 됩니다.\n- touched는 버튼이 터치되었는지 여부를 나타냅니다. (모든 게임패드에 이 기능이 있는 것은 아닙니다.)\n- value는 아날로그 센서가 있는 버튼에 대한 것입니다. 이것은 버튼에 가해지는 압력의 양을 나타냅니다: 0.0은 전혀 눌리지 않음을 의미하고, 1.0은 완전히 눌린 것을 의미합니다.\n\n버튼은 아래 다이어그램에서 정의된 중요도 순서대로 배열에 정렬되어 있어서 쉽게 매핑할 수 있습니다:\n\n![다이어그램](/assets/img/2024-05-01-PlayingwiththeGamePadAPI_2.png)\n\n<div class=\"content-ad\"></div>\n\n하지만 모든 게임패드가 동일한 버튼/축 패턴을 따르지는 않아요. 그래서 버튼 매핑에 대해 알고 있어야 하는 것이 중요해요.\n\n## 매핑\n\n매핑은 브라우저가 컨트롤러를 올바르게 식별하고 매핑할 수 있는지를 나타내는 Gamepad 인터페이스의 속성이에요. 이 경우 매핑의 값은 \"standard\"가 될 거예요.\n\n제가 시험하고 작업한 대부분의 오리지널 컨트롤러들은 표준 매핑을 가졌어요. 내가 시도한 대부분의 짝퉁들은 표준 매핑을 갖지 않았어요. 이러한 경우에는 개발자가 눌린 버튼이 사용자의 기대와 일치하는지 확인해야 해요.\n\n<div class=\"content-ad\"></div>\n\n하지만 뭔가가 빠져 있는 것 같았어요. 버튼 중 하나를 눌렀을 때 트리거되는 이벤트를 볼 수 없었어요. 문서에도(오직 두 개의 이벤트만 나열되어 있는)나, 게임패드 객체에도 없었어요. 이제 튜토리얼과 문서를 계속 읽어봐야 할 시간이에요.\n\n# 이벤트 청취 vs 이벤트 쿼링\n\n이것은 제가 조금 더 이해하는 데 시간이 좀 걸렸던 부분 중 하나에요. 이미 Gamepad API 정의에서 두 가지 이벤트만 있는 걸 봤죠(gamepadconnected 및 gamepaddisconnected). 그리고 버튼에 이와 관련된 이벤트가 없어요... 그렇다면, 이벤트는 어떻게 작동할까요?\n\n간단하게 말하면, 작동하지 않아요... 왜냐하면 이벤트가 없기 때문이죠. 다른 API 및 요소들과 달리 연결하고 청취할 수 있는 이벤트가 없기 때문에 Gamepad API는 다르게 작동해요. 청취할 이벤트가 없는 상황에서 개발자는 계속해서 게임패드를 쿼링하여 어떤 변경 사항이 일어났는지 확인해야 해요.\n\n<div class=\"content-ad\"></div>\n\n위 기능을 구현하기 위해서는 Navigator 인터페이스의 확장인 getGamepads 메서드가 있습니다. getGamepads는 연결된 게임패드와 그 상태의 스냅숏을 포함한 배열을 반환할 것입니다:\n\n```js\nconst gamepads = navigator.getGamepads();\n```\n\n나중에 일부 오래된 웹킷 브라우저를 지원하기 위해 오래된 초기화에 대한 대체 방법을 추가했습니다. getGamepads() 메서드가 지원되지 않거나 게임패드가 연결이 해제되었을 경우에는 빈 배열을 반환하여 오류를 방지하는 것이 좋습니다:\n\n```js\nlet gamepads = [];\nif (navigator.getGamepads) gamepads = navigator.getGamepads();\nelse if (navigator.webkitGetGamepads) gamepads = navigator.webkitGetGamepads();\n```\n\n<div class=\"content-ad\"></div>\n\n연결된 게임패드의 상태를 읽을 수는 있었지만, 함수를 호출할 때의 상태 스냅샷이었다. 계속해서 게임패드의 상태를 쿼리해야했습니다! setTimeout이나 setInterval과 같은 것을 사용하는 대신, 화면을 다시 그릴 때마다 함수가 실행되도록 requestAnimationFrame 내에서 함수를 호출해야 했습니다...\n\n...다음과 같은 방식으로:\n\n```js\nfunction checkStatus() {\n  // 게임패드의 상태를 읽기\n  const gamepads = navigator.getGamepads();\n\n  // 게임패드 작동: 버튼 값 읽기, 동작 수행 등\n  // 예: 첫 번째 게임패드의 Start 버튼이 눌렸을 때 메시지 로깅\n  if (gamepads[0].buttons[9].pressed) {\n    console.log(\"Start 버튼이 눌렸습니다\");\n  }\n\n  // 각 애니메이션 프레임마다 함수를 다시 실행\n  if (gamepads.length > 0) {\n    window.requestAnimationFrame(checkStatus);\n  }\n}\n```\n\n이 함수는 gamepadconnected 이벤트 핸들러에서 호출되어 브라우저에 게임패드가 연결될 때만 쿼리를 시작합니다. 또한, 연결된 게임패드가 없을 경우 중지 조건을 추가하는 것이 중요합니다. 그렇지 않으면 지속적이고 불필요한 쿼리를 수행하여 앱의 효율성이 떨어질 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 조이스틱은 버튼이 아니에요\n\n조이스틱이나 축과 같은 방향 버튼을 다룰 때 새로운 발견을 했어요. 버튼처럼 누름/안 누름, 터치/터치하지 않음처럼 동작할 거라고 예상했는데, Gamepad의 축 속성은 -1.0에서 1.0 범위의 짝수 개수를 갖는 배열이에요. 버튼처럼 보이진 않아요, 벌써부터 뿌리쳐 둔 것 같지 않아요.\n\n이 배열을 두 개씩의 그룹으로 나누는 것이 관건이에요. 각 그룹은 게임패드의 조이스틱/축이 될 거예요:\n\n- 첫 번째 값은 조이스틱의 X 축을 나타내요. -1.0은 왼쪽을, 1.0은 오른쪽을 의미해요.\n- 두 번째 값은 조이스틱의 Y 축을 나타내요. -1.0은 위/앞으로, 1.0은 아래/뒤쪽을 의미해요.\n\n<div class=\"content-ad\"></div>\n\n![게임패드 API로 놀아보기](/assets/img/2024-05-01-PlayingwiththeGamePadAPI_3.png)\n\n코드로 번역하면 다음과 같을 것입니다:\n\n```js\n// 게임패드의 상태를 읽기\nconst gamepads = navigator.getGamepads();\n\n// 예시: 첫 번째 게임패드의 방향 조이스틱이 눌렸을 때 로그 메시지 출력\n// 가로 이동\nif (gamepads[0].axes[0] == 1.0) {\n  console.log(\"오른쪽으로 이동\");\n} else if (gamepads[0].axes[0] == -1.0) {\n  console.log(\"왼쪽으로 이동\");\n}\n\n// 세로 이동\nif (gamepads[0].axes[1] == 1.0) {\n  console.log(\"아래로 이동\");\n} else if (gamepads[0].axes[1] == -1.0) {\n  console.log(\"위로 이동\");\n}\n```\n\n## 민감도 임계값\n\n<div class=\"content-ad\"></div>\n\n개발 중인 조이스틱/축을 위해 하는 좋은 일 중 하나는 다양한 감도 임계값을 허용하는 것입니다. 모든 조이스틱이 동등하게 만들어지지는 않으며 모두가 조이스틱의 동작 방식에 대해 동일한 선호도나 필요를 가지고 있는 것이 아닙니다.\n\n축에 대한 값은 -1.0에서 1.0 사이의 double 값이지만, 이는 0.0이 쉬는 상태가 되고 1.0/-1.0이 활성 상태가 되는 것을 의미하는 것은 아닙니다. 제가 시험한 게임패드 중 어느 것도 휴식 상태가 0인 적은 없었습니다. (대부분의 경우 0.0003과 같이 무시할 수 있는 값이 있습니다.) 그래서 왜 1.0/-1.0이 방향 동작을 트리거하는 임계값이어야 하는 건가요?\n\n접근성과 사용 편의성을 고려하여 사용자가 방향 이벤트가 트리거되는 임계값을 변경할 수 있도록 고려해보세요. 위의 예시에서 수정된 코드 스니펫:\n\n```js\nconst threshold = 0.5;\n\n// 수직 이동 (전체 이동이 아닌 \"절반\"에서 작동)\nif (gamepads[0].axes[1] >= threshold) {\n  console.log(\"아래로 이동\");\n} else if (gamepads[0].axes[1] == -threshold) {\n  console.log(\"위로 이동\");\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 진동\n\n게임패드 API에는 사용 가능할 때 컨트롤러 진동을 허용하는 확장 기능이 있습니다. API 자체가 실험적인 경우, 이 확장 기능은 제곱형 실험적으로 간주될 수 있습니다.\n\n게임패드가 연결될 때 콘솔 메시지를 확인했다면, Gamepad 인터페이스의 일부로 설명되지 않은 속성인 vibrationActuator를 발견할 수 있습니다. 이 속성은 게임 컨트롤러를 진동시킬 수 있게 해주는 playEffect() 메서드를 갖고 있습니다.\n\n다만, 큰 문제가 있습니다: 이것은 진동을 제어하기 위한 표준 확장이 아니라 크롬에서 사용 가능한 확장입니다. 표준 방법은 hapticActuators를 사용하는 것이며, 이는 주목할 만한 다른 브라우저, 특히 파이어폭스에서 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 예제에서는 표준 hapticActuators에만 초점을 맞추겠습니다.\n\nhapticActuators는 현재 하나의 값만 허용합니다(\"진동\") 그리고 진폭과 지속 시간을 지정하여 진동을 트리거할 수 있는 pulse 메서드가 포함되어 있습니다:\n\n```js\n// 첫 번째 게임패드를 읽기\nconst gamepads = navigator.getGamepads();\nconst myGamepad = gamepads[0];\n\n// 1.5초 동안 최대 진폭 진동 트리거\nmyGamepad.hapticActuator[0].pulse(1.0, 1500);\n```\n\nhapticActuators에 대한 한 가지 까다로운 점은 표준에서 정의된대로 GamepadHapticActuators 배열이 아니라 해당 유형의 단일 객체였다는 것입니다. 구현은 여전히 브라우저에 매우 의존적입니다. 개발자 주의해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 라이브러리 개발\n\nGamepad API는 비교적 쉽지만 귀찮은 것을 알아차렸을 것입니다. 모든 작업에는 여러 단계가 필요합니다. 더 탐구하고 더 즐기고 싶다면 경험을 단순화해야 합니다.\n\n이러한 메소드와 이벤트에 대한 상위 수준의 인터페이스를 제공하는 작은 모듈을 만드는 것이 합리적이었습니다. 모든 작업을 단순화하고 더 표준적인 호출을 가능하게 하는 것이었습니다.\n\n예를 들어, 시작 버튼이 눌렸는지 확인하려면 Gamepad API를 사용해야 했습니다.\n\n<div class=\"content-ad\"></div>\n\n- requestAnimationFrame으로 간격 설정하기\n- 각 애니메이션 프레임에서 getGamepad() 호출하기\n- 확인하려는 게임패드 식별하기 (이전에 저장된 ID로)\n- 버튼 배열 읽기\n- 원하는 특정 버튼에 액세스하기 (Start 버튼은 버튼 9)\n- 눌린 속성의 값 읽기\n- 원하는 작업 수행하기\n\n위 과정마다 몇 줄의 코드가 필요합니다. 이러한 복잡성을 라이브러리/모듈로 이동시키면 jQuery스러운 간단한 모양으로 유사한 작업을 수행할 수 있습니다.\n\n```js\nmyGamepad.on(\"start\", function() {\n  console.log(\"Start 버튼이 눌렸습니다\");\n});\n```\n\n필요한 모든 코드는 여전히 있지만, 내부적으로는 Gamepad API의 사용을 용이하게 해주며, 다른 이벤트가 쿼리하는 대신 이벤트를 듣는 다른 API처럼 보이게 만듭니다.\n\n<div class=\"content-ad\"></div>\n\n# 게임 개발\n\n라이브러리는 프로세스를 간단화했습니다. 이제 게임패드 기능을 위해 JavaScript에서 더 사용하기 쉬운 인터페이스를 사용하면서 웹 애플리케이션의 다른 부분에 더 집중할 수 있었어요.\n\n개발하기 쉬운 게임 중 하나는 클래식한 Pong이었어요. 컨트롤러와의 상호작용은 간단합니다: 위 또는 아래로 움직입니다. 패들과 공의 충돌을 감지하는 주요 어려움을 다루면서 공의 움직임을 계산하기만 하면 되었어요.\n\n여기에 코드와 데모가 있습니다 (게임패드를 연결하여 플레이하세요):\n\n<div class=\"content-ad\"></div>\n\n컴퓨터에 게임패드가 연결되어 있지 않으면 해당 Codepen이 작동하지 않을 수 있어요. 하지만 키보드 기능도 몇 가지 추가했어요.\n\n# 다음은 무엇인가요?\n\n이 기사에서는 현재 게임패드 API의 대부분 기능을 다뤘어요:\n\n- 게임 컨트롤러 연결을 감지하는 방법\n- 버튼과 조이스틱의 차이\n- 이벤트 읽는 방법\n- 게임패드로 진동 사용하기\n\n<div class=\"content-ad\"></div>\n\n하지만 몇 가지 빠뜨린 것이 있어요: 게임패드 포즈 인터페이스입니다. 이 인터페이스를 통해 게임패드에서 위치, 방향, 속도 및 가속도 (사용 가능한 경우)와 같은 정보를 얻을 수 있습니다. 이는 증강 현실 및 가상 현실 장치에 적합합니다. 불행하게도 이것은 잘 지원되지 않습니다.\n\n또한 API에 새로운 변경 사항이 있을 것입니다. 결국, 이것은 실험적 기술이며 지속적으로 업데이트됩니다. gamepadchange, gamepadaxischange와 같이 새로운 이벤트가 추가될 수 있습니다. 이는 API를 간단하게 만들 수 있고... 그리고 제 라이브러리를 쓸모 없게 만들 수도 있군요.\n\n# 추가 정보: 게임패드 API 전문가 되기!\n\n게임패드 API와 작동하는 다양한 유형의 컨트롤러를 테스트한 후에 한 가지 생각이 들었어요: 만약 내 옛날 PS3 컨트롤러가 작동한다면, 옛날 Rock Band 드럼과 기타는 어떨까요? Dance Dance Revolution 매트는 어떻게 될까요?\n\n<div class=\"content-ad\"></div>\n\n긴 이야기를 짧게 말하자면, 이것이 결과입니다:\n\n그리고 여기에서는 우리만의 버전으로 'Web DDR'을 플레이하고 있습니다:\n\n이 다른 기사에서 JavaScript와 HTML을 사용하여 자신만의 Rock Band 비디오 게임 버전을 만드는 방법에 대한 튜토리얼을 만들었습니다:","ogImage":{"url":"/assets/img/2024-05-01-PlayingwiththeGamePadAPI_0.png"},"coverImage":"/assets/img/2024-05-01-PlayingwiththeGamePadAPI_0.png","tag":["Tech"],"readingTime":12},{"title":"개인 블로그를 HTMX + Go로 만들기1 - Golang 템플릿 설정","description":"","date":"2024-05-01 23:15","slug":"2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup","content":"\n\n이 블로그 포스트는 내 개인 블로그에도 게시되어 있으며 여기에서 액세스할 수 있습니다.\n\n# 서문\n\n최근에 저는 HTMX와 Golang을 사용하여 제 개인 블로그를 처음부터 만들었다는 것을 발표하는 포스트를 작성했습니다. JavaScript 프레임워크를 완전히 생략했습니다. 해당 블로그 포스트는 여기에서 읽을 수 있습니다.\n\n이것은 HTMX + Go 여정의 첫 번째이며, 제 개인 블로그를 위해 HTMX를 처음으로 설정하는 과정을 기록할 것입니다 (만약 이 기사를 Medium에서 읽는다면 여기를 방문할 수 있습니다).\n\n<div class=\"content-ad\"></div>\n\n세부적인 튜토리얼처럼 프로세스를 상세히 다루지는 않겠습니다. 대신, 제가 무엇을 하고 있는지, 무엇이 저를 방해하는지, 그리고 어떻게 극복했는지(또는 우회했는지)를 문서화하는 저의 일지처럼 다룰 예정입니다. 그리고 그 과정 중에 발견한 다양한 잡다한 것들도 함께 공유할 거에요.\n\n이 시리즈는 많은 기본적인 부분을 건너뛸 것이기 때문에 처음 시작하는 사람들이 함께하길 기대하지는 않습니다. 그래도 질문은 언제든 환영하니 아래 댓글에 망설이지 말고 바로 날 물어봐주세요!\n\n# 설정하기\n\n# 템플릿 랜더러\n\n<div class=\"content-ad\"></div>\n\n우선 Labstack Echo를 사용하여 HTML 파일을 제공할 수 있는지 확인해야 합니다. 나는 개인적으로 HTTP 라우터로 선택한 것이기 때문에. Echo의 가이드에서 템플릿 섹션을 따르면 Echo의 Renderer 인터페이스를 구현하는 \"템플릿 렌더러\"를 제공해야 합니다.\n\n그것을 위해, 다음과 같은 코드를 만들었습니다:\n\n```js\ntype Template struct {\n    Templates *template.Template\n}\n\nfunc (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n    return t.Templates.ExecuteTemplate(w, name, data)\n}\n\nfunc NewTemplateRenderer(e *echo.Echo, paths ...string) {\n    tmpl := &template.Template{}\n    for i := range paths {\n        template.Must(tmpl.ParseGlob(paths[i]))\n    }\n    t := newTemplate(tmpl)\n    e.Renderer = t\n}\n\nfunc newTemplate(templates *template.Template) echo.Renderer {\n    return &Template{\n        Templates: templates,\n    }\n}\n```\n\n이 템플릿 렌더러의 아이디어는 HTML 템플릿 파일을 넣은 경로를 나타내는 문자열의 가변 매개변수를 제공할 수 있다는 것입니다. 이것은 template.ParseGlob이 재귀적으로 템플릿 파일을 찾을 수 없기 때문에 필요합니다. 또한, html/template을 가져오지 말고 text/template을 가져와야 한다는 것을 잊지 마세요!\n\n<div class=\"content-ad\"></div>\n\n# 안녕, 세상아\n\n우리는 간단한 에코 서버를 만들고 간단한 HTML 파일을 제공해보면서 테스트할 수 있습니다. 먼저 public 경로에 새로운 index.html 파일을 생성하여 Hello World를 시작해 보겠습니다:\n\n```js\n{define \"index\"}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello, World!</title>\n</head>\n<body>\n    <p>Hello, World!</p>\n</body>\n</html>\n{end}\n```\n\n이것은 그저 간단한 HTML 파일입니다. 그러나 HTML 파일을 감싸는 이중 중괄호({})에 주목해주세요. 이는 Go 템플릿 태그입니다. 위 예시에서는 단순히 나중에 Go 코드에서 직접 액세스할 수 있는 index라는 이름의 새로운 템플릿을 정의했습니다.\n\n<div class=\"content-ad\"></div>\n\n이제 간단한 echo 서버를 만들어 봅시다:\n\n```js\nfunc main() {\n    e := echo.New()\n    \n    // 약간의 미들웨어를 추가하여 housekeeping\n    e.Pre(middleware.RemoveTrailingSlash())\n    e.Use(middleware.Recover())\n    e.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(\n        rate.Limit(20),\n    )))\n\n    // 이것은 템플릿 렌더러를 초기화합니다.\n    template.NewTemplateRenderer(e, \"public/*.html\")\n    e.GET(\"/hello\", func(e echo.Context) error {\n        return c.Render(http.StatusOK, \"index\", nil)\n    })\n\n    e.Logger.Fatal(e.Start(\":4040\"))\n}\n```\n\n이 echo 서버는 포트 :4040에서 실행되며 public 디렉토리에 위치한 .html 파일을 렌더링합니다. 그리고 /hello라는 새로운 엔드포인트를 생성하여 index를 제공할 것입니다. 실행해 보면 아마도 이렇게 될 것입니다:\n\n<img src=\"/assets/img/2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup_0.png\" />\n\n<div class=\"content-ad\"></div>\n\n# 템플릿에 값 전달하기\n\n이제 템플릿에 동적 값들을 전달할 수 있는지 확인해봐야 해요. 결국 템플릿의 목적이죠. 먼저 index.html 코드를 약간 수정해야 해요:\n\n```js\n<p>Hello, World!</p>\n<p>Greetings, {.Name}!</p>\n```\n\n다시 한 번 중괄호를 두 개 사용했네요. 이 예제에서는 html 파일로 Name이라는 값을 전달하려고 합니다. 그러면 서버도 조금 수정해야겠죠?\n\n<div class=\"content-ad\"></div>\n\n```js\ne.GET(\"/hello\", func(e echo.Context) error {\n    res := map[string]interface{}{\n        \"Name\": \"Wyndham\",\n    }\n    return c.Render(http.StatusOK, \"index\", res)\n})\n```\n\n이렇게 하면 렌더러가 res의 값을 루트 값으로 취하고 Name 키를 가진 자식 값을 찾습니다. 그럼 다음과 같이 결과를 렌더링해야 합니다:\n\n<img src=\"/assets/img/2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup_1.png\" />\n\n# 중첩 템플릿 및 템플릿 간 값 전달하기\n\n<div class=\"content-ad\"></div>\n\n이제 HTMX를 다루기 전에 마지막으로 확인할 사항은 index 템플릿 내에 다른 템플릿을 중첩할 수 있는지입니다. 이를 위해 name_card.html이라는 간단한 템플릿 파일을 만들었습니다:\n\n```js\n{define \"name_card\"}\n<div>\n    <p>사용자 개인 정보:</p>\n    <ol>\n        <li>이름: {.Name}</li>\n        <li>전화번호: {.Phone}</li>\n        <li>이메일: {.Email}</li>\n    </ol>\n</div>\n{end}\n```\n\n그런 다음 index.html을 약간 수정해야 합니다. 먼저 인사 문구를 삭제한 다음 다음을 추가하십시오:\n\n```js\n<p>Hello, World!</p>\n<!-- 이 줄 삭제 <p>Greetings, {.Name}!</p> -->\n{template \"name_card\" .}\n```\n\n<div class=\"content-ad\"></div>\n\n그러면 우리는 다시 한번 서버를 수정해야 합니다:\n\n```js\ne.GET(\"/hello\", func(e echo.Context) error {\n    res := map[string]interface{}{\n        \"Name\": \"Wyndham\",\n        \"Phone\": \"8888888\",\n        \"Email\": \"skyscraper@gmail.com\",\n    }\n    return c.Render(http.StatusOK, \"index\", res)\n})\n```\n\n이제 여기서 맞다면, 이렇게 개인 정보를 렌더링할 수 있어야 합니다. 여기서 로직은, Name, Phone, Email을 포함한 3쌍의 키-값을 가진 인터페이스 맵을 전달한다는 것입니다.\n\n그리고 우리는 중괄호를 사용하여 name_card에서 해당 값을 액세스합니다. 그러나 name_card 템플릿이 값을 받도록 하려면 index.html 내에서 template \"name_card\" .의 내부에서 추가 . 를 통해 res 값을 전달해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n그리고 당연히:\n\n<img src=\"/assets/img/2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup_2.png\" />\n\n우리는 여러 템플릿 파일을 중첩시키고 변수를 전달하는 데 성공했습니다! 이제 템플릿 설정이 끝났으니, HTMX에 대해서 조금 더 살펴봅시다.\n\n# HTMX를 사용하여 연락처 정보 공개하기\n\n<div class=\"content-ad\"></div>\n\n간단한 뷰를 만들려고 해요. 이름과 그 옆에 연락처 정보를 공개하기 위한 버튼이 있는 목록을 만들 거예요. 이를 위해서 먼저 이 프로젝트에 HTMX를 추가해야 해요. 일단 CDN을 통해 추가할 거에요:\n\n```js\n<head>\n    ...\n    <script src=\"https://unpkg.com/htmx.org@1.9.5\" integrity=\"sha384-xcuj3WpfgjlKF+FXhSQFQ0ZNr39ln+hwjN3npfM9VBnUskLolQAcN80McRIVOPuO\" crossorigin=\"anonymous\"></script>\n</head>\n```\n\n위 코드를 통해 HTMX를 CDN을 통해 추가할 거예요. 이제 사용자 정보를 직접 공개하지 않도록 index.html을 다시 수정해야 해요:\n\n```js\n<p>Hello, World!</p>\n<!-- 이 줄을 삭제하세요 {template \"name_card\" .} -->\n<div id=\"user-info\">\n    <p>{.Name}</p>\n    <button hx-get=\"/get-info\" hx-target=\"#user-info\" hx-swap=\"innerHTML\">정보 공개</button>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n이렇게 하면 UI가 이름 부분만 표시되도록 설정되며, /get-info 엔드포인트를 호출할 버튼을 설정하고 #user-info 요소를 대상으로 하여 대상 요소의 내부 부분을 바꿀 것입니다 (기본적으로 `div`를 그대로 두고 `div` 내부의 모든 것을 변경합니다).\n\n알겠어요. 많은 용어가 있네요. 여기서는 이 내용을 더 잘 설명한 htmx 웹페이지에서 확인할 수 있습니다. 이제 /get-info 경로를 처리하는 새 엔드포인트 핸들러를 생성하여 계속 진행해 보겠습니다:\n\n```js\ne.GET(\"/get-info\", func(c echo.Context) error {\n    res := map[string]interface{}{\n        \"Name\": \"Wyndham\",\n        \"Phone\": \"8888888\",\n        \"Email\": \"skyscraper@gmail.com\",\n    }\n    return c.Render(http.StatusOK, \"name_card\", res)\n})\n```\n\n이는 거의 /hello와 동일하지만 두 가지 주요 차이점이 있습니다:\n\n<div class=\"content-ad\"></div>\n\n- 경로를 명확하게 /get-info로 변경해주세요.\n- 대상 템플릿을 name_card로 변경해주세요.\n\n하지만! name_card는 유효한 HTML 파일이 아니었나요? doctype도 없고 헤더도 없죠. 맞아요, 맞습니다. 하지만 이것은 HTMX가 동작하는 방식입니다. 전체 페이지를 교체하지 않고 우리가 index.html에서 지정한 user-info 요소만 교체할 거예요.\n\n그럼, 더 이상 말을 더하지않고 서버를 실행해서 무슨 일이 일어났는지 봅시다:\n\n와우! 제작품이 동작합니다! 이제 HTMX가 Go 템플릿과 잘 동작한다는 것을 알게 되었으니, 드디어 블로깅 사이트를 작업할 수 있겠네요. 그러나 불행히도 이 기사에서는 다루지 않을 거예요. 하지만 곧 돌아올 테니까, 그렇게 길지 않겠죠!\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n이 블로그를 읽어 주셔서 감사합니다. 여기서 중요한 점은 Go 템플릿을 사용하기 매우 유연하며, 이 작은 범위에서 HTMX와도 잘 작동한다는 것입니다. 다음 블로그에서는 기본 CRUD를 생성하여 DB에 기사를 저장하고 브라우저에서 액세스할 것입니다.\n\n조금 스포일러를 하자면: 거기에 많이 HTMX를 사용하지는 않을 것이고, 그 다음 시점에도 그 후에도 마찬가지입니다. 게시 물 웹사이트에서는 HTMX가 많이 필요하지 않다는 것이 확인되었습니다. 놀랍죠. 그러나 페이지네이션, 검색, 실시간 Markdown 렌더러를 만드는 부분에 도달하면 HTMX를 적극 활용할 것입니다.\n\n그러니 기대해 주세요! 읽어 주셔서 감사합니다!\n\n<div class=\"content-ad\"></div>\n\n수정되었습니다! 두 번째 부분이 나왔어요! 다음 링크에서 읽을 수 있어요:\n\n[https://medium.com/gravel-engineering/personal-blog-with-htmx-go-part-2-integrating-tailwindcss-412ebc4dcc97](https://medium.com/gravel-engineering/personal-blog-with-htmx-go-part-2-integrating-tailwindcss-412ebc4dcc97)","ogImage":{"url":"/assets/img/2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup_0.png"},"coverImage":"/assets/img/2024-05-01-PersonalBlogwithHTMXGoPart1GolangTemplatingSetup_0.png","tag":["Tech"],"readingTime":8},{"title":"접근성을 위해 버튼을 절대 비활성화면 안되는 이유","description":"","date":"2024-05-01 23:13","slug":"2024-05-01-NevereverdisablebuttonsWhynot","content":"\n\n## 사용 불가능한 컨트롤\n\n![이미지](/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_0.png)\n\n# 내용\n\n버튼을 비활성화하는 문제\n\n<div class=\"content-ad\"></div>\n\n**이 섹션에서는 버튼을 비활성화하는 것이 사용자에 대한 나쁜 해결책인 이유에 대해 이야기하겠습니다. 이에는 홍보되는 소통 부족 및 특정 사용자들이 인식할 수 없는 점이 포함됩니다.**\n\n**이의 반박**\n\n**비활성화된 버튼을 금지하는 것에 대한 일반적인 이의에 대해, WCAG의 입장, 특수 사용 사례, 오류 방지 등을 논의할 것입니다.**\n\n**결론**\n\n<div class=\"content-ad\"></div>\n\n링크\n\n## 비활성화된 버튼의 문제점\n\n![Image](/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_1.png)\n\n**사용자:** \"왜 비활성화되었죠?\" **개발자:** \"그건 당신의 문제죠.\"\n\n<div class=\"content-ad\"></div>\n\n버튼을 비활성화하는 데는 접근성 문제가 있을 수 있습니다(우리가 나중에 살펴볼 것이지만), 보조 기술(AT)을 의존하지 않는 사람들에게도 안좋은 메시지를 전달하고 있다고 생각해요.\n\n버튼을 비활성화하면 사용자에게 어떤 메시지를 전달하고 있을까요?\n\n친애하는 사용자님:\n\n- \"이 버튼은 지금 작동하지 않지만, 왜 그런지 알 수 있어야 합니다.\"\n- \"이 버튼은 지금 작동하지 않지만, 앞으로 작동할지에 대해 알려주지 않겠습니다.\"\n- \"이 버튼이 비활성화된 이유는 당신의 문제입니다.\"\n\n<div class=\"content-ad\"></div>\n\n당신이 명백하게 이런 생각을 하지는 않겠지만, 그게 당신이 전달하고 있는 바입니다 — 또는 적어도, 그게 고객이 당신이 전달하고 있는 것이라고 생각하는 것입니다. 그것이 정말 중요한 부분이죠.\n\n또한 사용자에게 생각하고, 추측하고, (결국) 도움을 요청하도록 강요하고 있습니다. 그리고 이전 글에서 언급한 대로, 그건 안 되는 일입니다.\n\nHampus Sethfors가 \"비활성화된 버튼은 최악입니다\" 라는 제목의 글에서 쓴 것을 보면:\n\n사용자가 일반적으로 할 수 있는 작업을 수행하지 못하도록 하려면, 사용자가 알아야 하는 정보가 필요합니다:\n\n<div class=\"content-ad\"></div>\n\n- 그들은 그 행동을 할 수 없습니다.\n- 그들이 그 행동을 왜 할 수 없는지\n- 그들이 그 행동을 하려면 어떤 단계를 (적용할 수 있는 경우) 취할 수 있는지\n\n버튼을 비활성화하는 것은 사용자에게 아무것도 알려주지 않습니다.\n\n![버튼 비활성화](/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_2.png)\n\n## 스크린리더 사용자: \"어떤 버튼?\" 개발자: \"여기 있어요. 보이지 않나요?\"\n\n<div class=\"content-ad\"></div>\n\n버튼을 비활성화하면 보조 기술을 사용하는 많은 사용자들에게 숨겨지기 때문에요.\n\n버튼을 비활성화하면 탭 순서에서 제외됩니다. 따라서, 이는 결국 버튼을 숨기는 것과 같은 효과를 줄 수 있어요.\n\n보조 기술 사용자들의 관점에서 보면, 이는 작동하지 않는 양식으로 보입니다.\n\n세 개의 필수 필드가 있는 양식이 있다고 가정해봅시다. 세 필수 필드에 값이 모두 입력되었을 때에만 제출 버튼이 활성화되도록 하는 멋진 자바스크립트가 있다고 해봅시다.\n\n<div class=\"content-ad\"></div>\n\nAT(AT) 사용자가 양식 중 하나에 아무 내용도 입력하지 못한 채 실수로 양식을 완료한다고 생각합니다. 그 후:\n\n- Tab 키를 누릅니다 — 제출 버튼이 비활성화되어 있어 전혀 무시됩니다. 이제 사용자는 양식 외부에 있을 수도 있습니다.\n- \"f\" 키를 누릅니다(JAWS 및 NVDA 스크린 리더의 다음 양식 컨트롤로 이동하는 키) — 제출 버튼이 비활성화되어 있어 \"사용 불가\"로 읽힐 것입니다. 사용자는 그 이유를 알지 못할 것입니다.\n- Enter 키를 누릅니다 — 아무 일도 일어나지 않습니다.\n\n이것은 AT 사용자를 전혀 고려하지 않은 매우 흔한 디자인 패턴입니다.\n\n다음은\n제임스 칼튼\n의 \"UI 함정: 비활성화된 버튼 및 입력란\"이라는 기사에서 쓴 내용입니다.\n\n<div class=\"content-ad\"></div>\n\n## 색각 이상이 있는 사용자: \"버튼이 비활성화돼있어?\" 개발자: \"네! 못 봤어?\"\n\n버튼을 비활성화하면 색상 지각에 어려움을 겪는 사용자들에게도 문제가 발생합니다. 시각적으로 말하자면, 버튼을 비활성화하면 색상만 바뀌고 다른 것들은 변경되지 않습니다.\n\n만약 사용자가 비활성화된 \"제출\" 버튼을 클릭하고 비활성화되어 있다는 사실을 알지 못한다면, 페이지는 사용자에게 그들이 해당 작업을 수행할 수 없음을 충분히 전달하지 못한 것입니다 (#1 위).\n\n버튼이 비활성화되어 있는 것을 충분히 전달하는 방법에 대해 궁금하시다면, 이 기사의 제목을 다시 읽어보시라고 제안합니다: \"절대로, 절대로 버튼을 비활성화하지 마세요.\"\n\n<div class=\"content-ad\"></div>\n\n# 이의에 대한 대답\n\n그래서, 제 입장은 이렇습니다: 버튼을 비활성화하지 마세요... 절대로.\n\n이의가 충분하게 제시될 것이라고 확신합니다. 그래서 가장 흔한 이의에 대해 언급하겠습니다.\n\n## 이의 #1: WCAG는 허용한다고 말합니다.\n\n<div class=\"content-ad\"></div>\n\n이의가 SC 1.4.3에 해당하는 것으로 추정합니다: 최소 대비:\n\n문제가 되는 텍스트는 \"비활성 사용자 인터페이스 구성 요소의 일부인 텍스트 또는 이미지...대비 요구 사항이 없습니다.\"라고 적힌 부수적 섹션입니다.\n\nWCAG가 이 법적 규정을 남겨 놓은 이유와(SC 1.4.1의 색상 사용 철학과 어떻게 불일치하는지)에 대해 자세히 설명하지는 않겠습니다. 그러나 제가 이전에 쓴 기사에서 (아래 링크 참조)와 같이 준수는 접근성과 동일하지 않다는 점을 기꺼이 지적할 것입니다.\n\n그것들을 \"지침\"이라고 부르는 이유가 있습니다. WCAG를 최소한의 기준으로 간주하세요. 만약 귀하의 목표가 접근성이라면, 버튼을 비활성화하지 마세요.\n\n<div class=\"content-ad\"></div>\n\n## 이의 제기 #2: 비활성화된 버튼이 필요한 특별한 사용 사례가 있어요\n\n아니에요, 그렇지 않아요.\n\n더 접근성 있는 방법으로 처리할 수 없는 시나리오는 들어보지 못했어요. 그런 상황이 있다면 제게 알려주세요.\n\n결국 사용자가 당신처럼 웹을 활용하고 생각한다고 가정하거나 접근성 해결책을 위해 필요한 작업을 하지 않고자 하는 것으로 보입니다.\n\n<div class=\"content-ad\"></div>\n\n\"테이블이 첫 번째 페이지나 마지막 페이지에 있을 때 페이지네이션 버튼을 어떻게 처리해야 할까요?\"\n버튼을 비활성화하는 방법을 사용하지 않고도 접근성 있는 해결책이 있습니다.\n\n\"제출 버튼을 더블 클릭하는 것을 방지하는 방법은 무엇인가요?\"\n이를 방지하기 위해 JavaScript만 사용한다면, 접근성만 문제가 아닙니다.\n\n## 이의 제기 #3: 버튼 비활성화는 사용자가 잘못된 데이터를 입력하는 것을 방지합니다\n\n그래서 유효성 검사를 하는 것입니다.\"\n\n<div class=\"content-ad\"></div>\n\n그리고, 버튼을 비활성화하는 것은 잘못된 데이터가 있음을 사용자에게 전달하지 않는다. 사용자의 관점에서는 당신의 양식이 망가졌다고 생각할 수도 있어요.\n\n최근에 웹사이트에서 사진을 주문했던 적이 있어요. 모든 올바른 정보를 입력했는데도 (여러 번 확인했어요) 어쩌다가 \"주문하기\" 버튼이 비활성화되어 있었어요.\n\n오류 메시지가 표시되지 않았고, 왜 비활성화되어 있는지 알려주는 텍스트도 없었어요 — 그냥 비활성화되어 있었어요. 그래서 모든 좋은 개발자처럼 소스를 수정해서 비활성 속성을 제거하고 주문을 넣었더니 잘 처리되었어요. 유효성 검사도 없었고, 오류도 없었어요.\n\n그러니 보안이나 잘못된 입력을 위한 문으로서 비활성화된 버튼을 사용하지 마세요. 유효성 검사가 해야 할 역할을 하도록 두세요.\n\n<div class=\"content-ad\"></div>\n\n## 이의 제기 #4: 버튼을 비활성화하고 툴팁을 제공하지 않으면 안 되나요?\n\n툴팁을 어떻게 시각장애(AT) 사용자가 인식할까요?\n\n우선, 버튼을 비활성화해서는 안 된다는 이유 중 하나에 다시 돌아왔습니다: 모든 사용자가 인식할 수 없습니다.\n\ntitle 속성을 사용할 때 대상 컨트롤이 포커스를 가지거나 사용자가 마우스 커서를 올리는 경우에만 작동한다는 것을 말하는 건가요?\n\n<div class=\"content-ad\"></div>\n\n수비된 컨트롤은 초점을 받지 않습니다. 스크린 리더 사용자인 경우는 물론, 초점을 받지 않는 상태에서 사용자가 해당 텍스트를 인지할 수 없습니다.\n\n![버튼 비활성화 이미지](/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_3.png)\n\n그리고 버튼 주변에 해당 버튼이 왜 비활성화되었는지 설명하는 텍스트가 있다면, 동일한 규칙이 적용됩니다. 스크린 리더 사용자는 그 텍스트를 어떻게 인지할까요? 아마도 당신은 버튼에 aria-describedby 속성을 사용하여 그 텍스트 요소의 id 값을 제공한 것일 것입니다. 하지만 (한 번 더 말하지만) 이 방법은 버튼이 초점을 받아야만 작동하며, 비활성화된 버튼은 그렇지 않습니다.\n\n## 이의제기 #5: \"F\" 키를 사용하는 AT 사용자는 버튼을 여전히 인지할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n네, 그 말이 맞아요.\n\n\"키보드 단축키\"를 이용할 때 JAWS 및 NVDA에서는 \"f\" 키가 다음 양식 컨트롤을 나타내는 단축키입니다 (VoiceOver의 경우 [VoiceOver 키] + Command + J입니다).\n\n하지만 이의를 제기하는 것은 AT(AT-Assistive Technology) 사용자가 웹 페이지를 어떻게 소비하거나 AT를 사용하는지를 가정한다는 것 아닐까요? 어떤 사람들은 Tab을 사용하고, 어떤 사람들은 다음 양식 컨트롤로 이동하는 키를 사용하며, 또 다른 사람들은 다른 키를 사용할 수도 있습니다.\n\n또한, 색각 이상 사용자도 있습니다. 그들은 여전히 몇 번 클릭하지 않고는 버튼이 비활성화되었음을 감지하지 못할 것입니다 — 이것이 고장났다고 결론을 내리지 않는다고 가정합니다.\n\n<div class=\"content-ad\"></div>\n\n## 이의 제기 #6: 유용한 솔루션에 시간이 없어요. 버튼 비활성화는 빠르고 간편하며 대다수 사용자에게 문제를 해결해줍니다.\n\n그래서 시간이 소중해요? 누구의 시간이요? 사용자들의 시간은 소중하지 않나요?\n\n어떤 것들을 위해 얼마나 많은 루프를 돌릴 건가요? 완벽한 모서리가 둥근 세련된 UI, 만족스러운 전환 효과, 눈을 즐겁게 하는 폰트들을 얻기 위해서는요? 모바일 친화적인 인터페이스는 어떻게 하는 거에요?\n\n네, 버튼에 비활성 속성을 덧붙이는 것보다 더 많은 작업이 필요해요. 하지만, 여러분이 제공하는 더 다양한 유용한 솔루션들이 있다면, 앞으로 유용한 솔루션들을 만드는 것이 더 쉬워질 거에요.\n\n<div class=\"content-ad\"></div>\n\n## 반론 #7: 접근 가능한 솔루션이 추한 것일 것이다\n\n어떤게 더 좋을까요: 추한 작동 페이지인가요, 예쁘지만 망가진 페이지인가요?\n\n버튼을 비활성화하면 AT 사용자에게는 페이지가 깨졌다고 볼 수 있습니다. 그 순간에는 예쁜 페이지가 무슨 차이를 만들까요?\n\n그리고, 내가 아는 대부분의 UX 전문가들은 도전을 좋아해요. 이것을 도전으로 만들어 보세요: 추하지 않은, 사용하기 쉬우면서 접근 가능한 솔루션을 찾아보세요.\n\n<div class=\"content-ad\"></div>\n\n## 이의 제기 #8: 버튼 비활성화는 세기 전환 이후에 흔했던 관행입니다\n\n네... 맞아요.\n\n그때 HTML 태그에는 모두 대문자를 사용했습니다. 그래도 바뀌었죠?\n\n```js\n<P CLASS=\"retro\">그렇죠, 바뀌었어요.</P>\n```\n\n<div class=\"content-ad\"></div>\n\n\"늘 그래왔으니까\"는 흔한 변명은 하지 않겠어요. 게다가 이것으로는 접근성 문제를 해결할 수 없어요.\n\n옛날 나쁜 습관은 그만두자구요.\n\n# 결론\n\n나한테 '해결책을 제시하지 않았다'는 댓글을 보내시기 전에, 네 말이 맞아요. 그렇게 하면 기사가 아주 길어지겠죠. 그래서 이것은 Part 1입니다. 차기 기사에서는 버튼 비활성화에 대한 접근 가능한 대안을 살펴볼 거에요.\n\n<div class=\"content-ad\"></div>\n\n제가 빠뜨린 이의사항이 있으면 알려주세요. 접근성 문제를 초래시키는 문제에 비해 버튼을 비활성화하는 좋은 이유를 아직 발견하지 못했습니다.\n\n우리는 우리와 같은 사람들을 위해 개발하는 것을 그만두어야 합니다. 아마도 대신 각 사용자 그룹 - 또는 웹 페이지를 소비하는 데 사용되는 각 유형의 도구 - 에 대해 생각해볼 필요가 있습니다. 이에는 전형적인 시각적 사용자, 키보드 전용 사용자, 색맹 사용자, 스크린 리더 사용자 등이 포함됩니다.\n\n다음은 각각의 버튼을 비활성화하는 것이 무엇을 하는지에 대한 설명입니다:\n\n- 전형적인 사용자: 버튼이 비활성화되었어요. 왜 그런 건지 모르겠네요? 제가 뭔가 잘못한 것 같은데, 무엇이죠?\n- 키보드 전용 사용자: 버튼에 접근할 수 없어요. 비활성화되었겠죠. 왜 그런지 모르겠네요?\n- 색맹 사용자: 버튼을 클릭하고 있지만 아무 일도 일어나지 않아요. 비활성화되었건가 고장났나요? 누가 알겠어요?\n- 스크린 리더 사용자: 버튼이 어디 있죠?\n\n<div class=\"content-ad\"></div>\n\n끝으로 버튼을 비활성화함으로써, 한 그룹의 사용자(전형적인 시각 장애가 없는 마우스/키보드 사용자)에게 웹 페이지 이용 방법에 대한 정보를 제공하지만 다른 그룹(AT 사용자)에게는 그 정보를 제공하지 않고 숨기게 됩니다.\n\n습관을 깨는 게 참 괴롭다는 건 알아요, 특히 쉬운, 오랜 습관의 경우 더 그렇죠. 하지만 우리는 사용자들에게 제대로 된 서비스를 제공할 필요가 있어요... 모든 사용자에게요.\n\n여기 [Part 2]가 있어요: 절대로 버튼 비활성화하지 말아야 하는 이유 — 접근성 솔루션을 위한 요구사항.\n\n여기 [Part 3]가 있어요: 절대로 버튼 비활성화하지 말아야 하는 이유 — 더 많은 접근성 대안들.\n\n<div class=\"content-ad\"></div>\n\n# 링크\n\n## 언급된 글들\n\n- Disabled buttons suck by\nHampus Sethfors\n- UI Traps: Disabled Buttons and Inputs by\nJames Carleton\n\n## 추가로 읽어볼 만한 글들\n\n<div class=\"content-ad\"></div>\n\n- 비활성 버튼의 대비 수준은 어떻게 되어야 할까? by Giulia Alfarano\n- 버튼을 비활성화하지 마세요 by Chris Ferdinandi\n- 비활성 버튼을 '회색으로 표시'하는 것이 괜찮은가요? by H Locke\n\n## 내 연관 기사\n\n- 제2부: 절대로 버튼을 비활성화하지 마세요 — 접근성 있는 솔루션을 위한 요구 사항\n- 제3부: 절대로 버튼을 비활성화하지 마세요 — 더 많은 접근 가능한 대안\n- 텍스트 상자의 비활성화: 좋지 않은 아이디어 및 그 대안\n- 접근성은 오해되고 있습니다 — 이를 수정합시다\n- 만족시켜야 할 요구 사항으로서의 접근성 전달, 규칙으로 따라야 할 것이 아닙니다","ogImage":{"url":"/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_0.png"},"coverImage":"/assets/img/2024-05-01-NevereverdisablebuttonsWhynot_0.png","tag":["Tech"],"readingTime":8},{"title":"HTML과 CSS를 사용하여 애니메이션 로켓 로더 만들기","description":"","date":"2024-05-01 23:11","slug":"2024-05-01-BuildinganAnimatedRocketLoaderUsingHTMLandCSS","content":"\n\n![로켓 로더](https://miro.medium.com/v2/resize:fit:1200/1*fE47ZekcAWWg54RB5WWodg.gif)\n\n# 소개\n#100DaysOfCode 챌린지의 제 23일을 환영합니다! 오늘은 프론트엔드 개발 세계로 뛰어들어 흥미진진한 프로젝트를 만들어보겠습니다: 애니메이션 로켓 로더입니다. 이 로더는 당신의 웹사이트의 시각적 매력을 높일 뿐만 아니라 사용자들에게 독특한 로딩 경험을 제공할 것입니다. 시작해봅시다!\n\n# 단계 1: 프로젝트 설정\n\n<div class=\"content-ad\"></div>\n\n먼저, 제공된 링크에서 전체 소스 코드를 다운로드하세요: 소스 코드 다운로드. 다운로드 후, 프로젝트용 새 디렉터리를 만들고 소스 코드 파일을 그 안에 압축 해제하세요.\n\n# 단계 2: HTML 구조\n\n코드 편집기에서 index.html 파일을 열어주세요. 우리는 HTML 문서의 기본 구조를 정의하는 것으로 시작하겠습니다. 다음 코드를 복사하여 붙여넣기 해주세요:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <!-- 문자 인코딩 및 뷰포트 설정 -->\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <!-- 외부 스타일시트 연결 -->\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <!-- 페이지 제목 설정 -->\n    <title>Animated Rocket Loader</title>\n</head>\n\n<body>\n    <!-- 로켓 로더 컨테이너 -->\n    <div class=\"rocket-loader\">\n        <!-- 로켓 객체 -->\n        <div class=\"rocket\">\n            <!-- 장식용 로켓 부속품 -->\n            <div class=\"rocket-extras\"></div>\n            <!-- 제트 애니메이션 -->\n            <div class=\"jet\"><span></span></div>\n        </div>\n    </div>\n</body>\n\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 3: CSS로 스타일링하기\n\n이제 우리의 로켓 로더를 시각적으로 매력적으로 만들기 위해 몇 가지 스타일을 추가해 봅시다. style.css 파일을 열어주세요. 로켓 로더, 로켓, 제트, 그리고 애니메이션용 스타일을 포함할 것입니다. 제공된 CSS 코드를 복사하여 붙여넣어주세요.\n\n```js\n/* Google 폰트 가져오기 */\n@import url(\"https://fonts.googleapis.com/css?family=Ubuntu:400,400i,700,700i\");\n\n/* 기본 마진, 패딩, 상자 크기 재설정 */\n*,\n*:before,\n*:after {\n    margin: 0;\n    padding: 0;\n    word-break: break-all;\n    box-sizing: border-box;\n}\n\n/* 기본 글꼴 크기 설정 */\nhtml {\n    font-size: 10px;\n}\n\n/* Body 스타일 */\nbody {\n    font-family: \"Ubuntu\", sans-serif;\n    color: #6e6e6e;\n    font-size: 1.6rem;\n}\n\n/* 헤더와 푸터를 블록 요소로 표시되도록 설정 */\nheader,\nfooter {\n    display: block;\n}\n\n/* 링크 스타일 */\na,\na:link,\na:visited {\n    color: #4d4d4d;\n    text-decoration: none;\n}\n\n/* 이미지 스타일 */\nimg {\n    border: 0;\n}\n\n/* 기본 리스트 스타일 제거 */\nul {\n    list-style: none;\n}\n\n/* 중앙 정렬 컨테이너 */\n.center {\n    margin: auto;\n    width: 110rem;\n}\n\n/* 로켓 로더 스타일 */\n.rocket-loader {\n    /* 먼지 입자 이동 애니메이션 */\n    -webkit-animation: moveParticles 6s linear infinite;\n    animation: moveParticles 6s linear infinite;\n    /* 배경 그라데이션 */\n    background: linear-gradient(90deg, gray, transparent 10%) 0 20%/180% 0.2rem repeat-x, linear-gradient(90deg, gray, transparent 20%) 0 80%/150% 0.2rem repeat-x, linear-gradient(90deg, gray, transparent 5%) 0 65%/100% 0.2rem repeat-x, linear-gradient(90deg, gray, transparent 5%) 0 40%/220% 0.2rem repeat-x, linear-gradient(0, white, white);\n    /* 테두리와 그림자 */\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    border-radius: 50%;\n    box-shadow: inset 0 0 60px 0 rgba(0, 0, 0, 0.1);\n    /* 크기와 위치 */\n    height: 125px;\n    left: 50%;\n    overflow: hidden;\n    position: absolute;\n    text-align: center;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 125px;\n}\n\n/* 로켓 로더 앞의 내용 */\n.rocket-loader::before {\n    /* 깜빡이는 애니메이션 */\n    -webkit-animation: blink 1s infinite;\n    animation: blink 1s infinite;\n    bottom: 6%;\n    content: \"로딩 중...\"; /* 텍스트 내용 */\n    font-size: 12px;\n    left: 0;\n    position: absolute;\n    right: 0;\n}\n\n/* 로켓 스타일 */\n.rocket {\n    /* 로켓 이동 애니메이션 */\n    -webkit-animation: moveRocket 2s linear infinite;\n    animation: moveRocket 2s linear infinite;\n    /* 배경 그라데이션 */\n    background: lightgray;\n    background: linear-gradient(#990000, red, #990000);\n    /* 테두리와 위치 */\n    border-left: 3px solid rgba(0, 0, 0, 0.4);\n    border-radius: 50%/30%;\n    height: 15%;\n    left: 50%;\n    position: absolute;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 35%;\n}\n\n/* 로켓의 가짜 요소 */\n.rocket::before,\n.rocket::after {\n    content: \"\";\n    position: absolute;\n}\n\n/* 로켓 앞의 가짜 요소 */\n.rocket::before {\n    /* 날개 회전 애니메이션 */\n    -webkit-animation: rotateFins 1s infinite;\n    animation: rotateFins 1s infinite;\n    /* 배경 그라데이션 */\n    background: #bababa;\n    background: linear-gradient(#990000, red, #990000);\n    /* 테두리와 위치 */\n    border: 2px solid transparent;\n    border-radius: 0 50% 50% 0;\n    height: 140%;\n    top: 50%;\n    transform: translate(0, -50%);\n    left: 6px;\n    width: 20%;\n}\n\n/* 로켓 뒤의 가짜 요소 */\n.rocket::after {\n    /* 테두리 스타일 */\n    border: 7px solid transparent;\n    border-left: 14px solid rgba(0, 0, 0, 0.4);\n    border-radius: 15%;\n    /* 위치 */\n    right: -16px;\n    top: 2px;\n}\n\n/* 로켓 추가효과 스타일 */\n.rocket-extras {\n    /* 추가효과 이동 애니메이션 */\n    -webkit-animation: moveExtras 1s infinite;\n    animation: moveExtras 1s infinite;\n    /* 배경과 크기 */\n    background: rgba(0, 0, 0, 0.4);\n    height: 2px;\n    left: 12px;\n    margin: -2px 0 0;\n    position: absolute;\n    top: 50%;\n    transform: translate(0, -50%);\n    width: 10px;\n}\n\n/* 로켓 추가효과의 가짜 요소 */\n.rocket-extras::before,\n.rocket-extras::after {\n    content: \"\";\n    position: absolute;\n}\n\n/* 로켓 추가효과 앞의 가짜 요소 */\n.rocket-extras::before {\n    /* 배경 */\n    background: white;\n    /* 테두리와 위치 */\n    border-radius: 50%;\n    height: 5px;\n    right: -7px;\n    top: -1px;\n    width: 5px;\n}\n\n/* 로켓 추가효과 뒤의 가짜 요소 */\n.rocket-extras::after {\n    /* 배경과 테두리 */\n    background: #cc0000;\n    border-top: 1px solid #660000;\n    /* 위치 */\n    height: 1px;\n    left: -10px;\n    top: 1px;\n    width: 6px;\n}\n\n/* 제트 스타일 */\n.jet {\n    /* 크기와 위치 */\n    height: 10px;\n    left: -10px;\n    position: absolute;\n    top: calc(50% - 5px);\n    width: 10px;\n}\n\n/* 제트의 가짜 요소와 span */\n.jet::before,\n.jet::after,\n.jet span {\n    /* 연기 이동 애니메이션 */\n    -webkit-animation: moveSmoke 0.3s infinite;\n    animation: moveSmoke 0.3s infinite;\n    /* 배경, 크기, 위치 */\n    background: #e09100;\n    border-radius: 50%;\n    content: \"\";\n    filter: blur(2px);\n    height: 8px;\n    left: -6px;\n    opacity: 1;\n    position: absolute;\n    transform: translate(0, 0) scale(1);\n    top: 1px;\n    width: 15px;\n}\n\n/* 제트 뒤의 가짜 요소 */\n.jet::after {\n    /* 애니메이션 지연 */\n    -webkit-animation-delay: 0.1s;\n    animation-delay: 0.1s;\n}\n\n/* 제트 내 span */\n.jet span {\n    /* 애니메이션 지연 */\n    -webkit-animation-delay: 0.2s;\n    animation-delay: 0.2s;\n}\n```\n\n# 단계 4: 애니메이션 키프레임 추가하기\n\n<div class=\"content-ad\"></div>\n\n우리의 로켓 로더를 활성화하기 위해 다양한 애니메이션을 위한 키프레임을 정의해야 합니다. 이러한 키프레임은 입자, 로켓, 지느러미, 그리고 연기의 움직임을 제어할 것입니다. CSS 파일에 제공된 애니메이션 키프레임을 복사하여 붙여넣어주세요.\n\n```js\n/* 입자 움직임 애니메이션을 위한 키프레임 */\n@-webkit-keyframes moveParticles {\n    100% {\n        background-position-x: -500rem;\n    }\n}\n\n@keyframes moveParticles {\n    100% {\n        background-position-x: -500rem;\n    }\n}\n\n/* 로켓 이동 애니메이션을 위한 키프레임 */\n@-webkit-keyframes moveRocket {\n\n    0%,\n    100% {\n        transform: translate(-50%, calc(-50% - 1rem));\n    }\n\n    50% {\n        transform: translate(-50%, calc(-50% + 1rem));\n    }\n}\n\n@keyframes moveRocket {\n\n    0%,\n    100% {\n        transform: translate(-50%, calc(-50% - 1rem));\n    }\n\n    50% {\n        transform: translate(-50%, calc(-50% + 1rem));\n    }\n}\n\n/* 지느러미 회전 애니메이션을 위한 키프레임 */\n@-webkit-keyframes rotateFins {\n\n    0%,\n    100% {\n        height: 140%;\n    }\n\n    50% {\n        border-top: 2px solid #660000;\n        border-bottom: 2px solid #660000;\n        height: 110%;\n    }\n}\n\n@keyframes rotateFins {\n\n    0%,\n    100% {\n        height: 140%;\n    }\n\n    50% {\n        border-top: 2px solid #660000;\n        border-bottom: 2px solid #660000;\n        height: 110%;\n    }\n}\n\n/* 추가 요소 이동 애니메이션을 위한 키프레임 */\n@-webkit-keyframes moveExtras {\n\n    0%,\n    100% {\n        transform: translate(0, calc(-50% + 0.1rem));\n    }\n\n    50% {\n        transform: translate(0, calc(-50% - 0.1rem));\n    }\n}\n\n@keyframes moveExtras {\n\n    0%,\n    100% {\n        transform: translate(0, calc(-50% + 0.1rem));\n    }\n\n    50% {\n        transform: translate(0, calc(-50% - 0.1rem));\n    }\n}\n\n/* 연기 이동 애니메이션을 위한 키프레임 */\n@-webkit-keyframes moveSmoke {\n    100% {\n        filter: blur(3px);\n        opacity: 0;\n        transform: translate(-40px, 0) scale(2);\n    }\n}\n\n@keyframes moveSmoke {\n    100% {\n        filter: blur(3px);\n        opacity: 0;\n        transform: translate(-40px, 0) scale(2);\n    }\n}\n\n/* 깜빡임 애니메이션을 위한 키프레임 */\n@-webkit-keyframes blink {\n\n    0%,\n    100% {\n        opacity: 1;\n    }\n\n    50% {\n        opacity: 0.2;\n    }\n}\n\n@keyframes blink {\n\n    0%,\n    100% {\n        opacity: 1;\n    }\n\n    50% {\n        opacity: 0.2;\n    }\n}\n```\n\n# 단계 5: 테스트 및 조정\n\n모든 파일을 저장하고 웹 브라우저에서 index.html 파일을 엽니다. 애니메이션된 로켓 로더가 작동하는 것을 확인할 수 있어야 합니다! CSS 스타일과 애니메이션 키프레임을 조정하여 로더를 원하는 대로 사용자 정의할 수 있습니다. 색상, 크기, 및 시간을 조절하여 원하는 효과를 얻을 수 있습니다.  ","ogImage":{"url":"/assets/img/2024-05-01-BuildinganAnimatedRocketLoaderUsingHTMLandCSS_0.png"},"coverImage":"/assets/img/2024-05-01-BuildinganAnimatedRocketLoaderUsingHTMLandCSS_0.png","tag":["Tech"],"readingTime":9},{"title":"프론트엔드 개발자라면 반드시 알아야 하는 HTML 태그 30가지","description":"","date":"2024-05-01 23:09","slug":"2024-05-01-30HTMLTagstoknow","content":"\n\n<img src=\"/assets/img/2024-05-01-30HTMLTagstoknow_0.png\" />\n\n저번 글에서 HTML 5로 시작하는 방법을 설명했어요. 시작하는 중이신 분들은 여기를 읽어보세요. 이번 글에서는 앞으로 제가 사용할 30가지 태그를 소개할 거예요.\n\n- Doctype\n문서 유형 선언은 HTML 파일의 첫 줄로, 우리 웹사이트가 어떤 버전의 HTML을 사용하는지 알려줍니다. 아래 단순한 한 줄로 HTML 파일을 시작할 수 있어요.\n\n```js\n<!DOCTYPE> \n```\n\n<div class=\"content-ad\"></div>\n\n2. HTML\nHTML 요소는 다큐먼트 선언 후에 작성되며 모든 HTML 코드를 감싸는 역할을 합니다. 때로는 루트 요소로도 알려져 있어요.\n\n```js\n<html>\n```\n\n3. Head\nHead 요소는 HTML 페이지에서 뷰어에게 표시되는 콘텐츠가 아닌 모든 것을 감싸는 데 사용됩니다. 이에는 검색 결과에 나타날 키워드와 페이지 설명, 콘텐츠를 스타일링하는 CSS, 문자 세트 선언 등이 포함됩니다.\n\n```js\n<head></head>\n```\n\n<div class=\"content-ad\"></div>\n\n4. 제목\n이것은 페이지의 제목을 설정합니다. 이는 페이지가 로드된 브라우저 탭에 표시되는 제목입니다. 페이지 제목은 북마크될 때 페이지를 설명하는 데도 사용됩니다. 이 문장을 Head 요소 안에 아래와 같이 작성할 수 있어요.\n\n```js\n<title>\n```\n\n5. 본문\nbody 태그에는 웹페이지에 나타날 모든 내용이 포함됩니다. 이에는 텍스트, 이미지, 비디오, 게임, 재생 가능한 오디오 트랙 또는 기타 모든 것이 포함됩니다. Head 태그로 둘러싸인 모든 콘텐츠 아래에 body 태그를 작성할 수 있어요.\n\n```js\n<body>\n```\n\n<div class=\"content-ad\"></div>\n\n6. H1부터 H6\nHTML에서는 머리글을 6단계로 나눌 수 있습니다. H1로 표시하면 웹 브라우저가 이 정보가 페이지에서 가장 중요한 부분임을 인식합니다. H2는 그 다음으로 중요한 정보이며, 이와 같이 H6까지 계속됩니다. 글꼴 크기는 CSS로 결정하는 것이 좋으며, 정보 계층구조의 중요성을 웹 브라우저에 명확히 전달하기 위해 HTML 태그를 사용하는 것이 좋습니다.\n\n\n7. P\nP 태그는 문단을 의미합니다. 이 태그 사이에는 정보의 문단을 저장합니다.\n\n\n\n<div class=\"content-ad\"></div>\n\n8. 줄 바꿈\n줄 바꿈 태그는 단락이나 제목 텍스트에서 줄 바꿈을 생성하는데 사용됩니다.\n\n```html\n<br>\n```\n\n9. HTML 코드 주석 처리하기\nHTML 코드에 주석을 달아주는 것은 파일이 어떻게 구성되어 있는지 다른 개발자들에게 전달하는 중요한 단계입니다. 이 코드는 브라우저에 나타나지 않습니다. 주석을 사용하는 것은 코드를 읽기 쉽게 유지하기 위한 프로그래밍 전반에 걸쳐 중요한 단계입니다. 주석을 달기 위해 양쪽에 각각 두 개의 대시로 작성합니다.\n\n```html\n<!--이렇게 코드에 주석을 달 수 있습니다--> \n```\n\n<div class=\"content-ad\"></div>\n\n10. 굵게 \n텍스트를 굵게 표시합니다.\n\n```js\n<strong>굵은 텍스트</strong>\n```\n\n11. Div\nDivision 태그는 아마도 HTML에서 가장 많이 사용되는 태그 중 하나입니다. 콘텐츠 섹션을 감싸기 위해 사용됩니다. Div 요소는 페이지 요소의 블록 레벨 조직 및 스타일링에 사용됩니다.\n\n```js\n<div></div>\n```\n\n<div class=\"content-ad\"></div>\n\n12. 헤더\n헤더 요소는 소개 콘텐츠나 탐색 링크 모음을 담는 컨테이너를 나타냅니다.\n\n```js\n<header></header>\n```\n\n13. 푸터\n푸터 요소는 저작자 정보, 저작권 정보, 연락처 정보, 사이트맵, 맨 위로 가기 링크 및 관련 문서와 같은 정보를 담는 컨테이너를 나타냅니다.\n\n```js\n<footer></footer>\n```\n\n<div class=\"content-ad\"></div>\n\n14. Main\n문서의 주요 콘텐츠를 지정합니다.\n\n```js\n<main></main>\n```\n\n15. Details\n사용자가 볼 수 있거나 숨길 수 있는 추가 정보를 정의합니다. 클릭하면 더 많은 정보를 공유하는 드롭다운 상자를 만듭니다.\n\n```js\n<details></details>\n```\n\n<div class=\"content-ad\"></div>\n\n16. 요약\n`details` 요소에 대한 표시 제목을 정의합니다.\n\n```js\n<summary></summary>\n```\n\n17. 문서\n문서를 정의합니다.\n\n```js\n<article></article>\n```\n\n<div class=\"content-ad\"></div>\n\n18. 약어 또는 두문자어\nHTML은 브라우저에게 약어가 무엇을 의미하는지 알려주는 `abbr` 태그를 제공합니다. 이는 접근성이 좋은 웹사이트를 위해 유용합니다. 웹사이트 방문자들은 제목 속성에 있는 텍스트를 보지 못하지만 브라우저, 검색 엔진 및 보조 기술은 이 정보를 사용합니다. 아래 코드는 \"이 웹사이트는 HTML에 관한 모든 것입니다\"라는 텍스트 줄을 출력합니다.\n\n```js\nThis website is all about <abbr title=\"하이퍼텍스트 마크업 언어\">HTML</abbr>.\n```\n\n19. 주소\n`address` 태그는 사람이나 조직의 연락 정보를 나타내는 웹사이트 섹션을 감싸는 데 유용합니다. 만약 `address` 태그가 `body` 태그 내에서 사용되면 문서의 연락 정보를 나타내고, `address` 태그가 `article` 태그 내에서 사용되면 기사의 연락 정보를 나타냅니다.\n\n```js\n<address>\n기관명: MacTavish Designs <br>\n웹 사이트:\n<a href=\"https://zackmactavish.github.io/MacTavish/\">\nZack MacTavish</a><br>\n포틀랜드, 오레곤\n</address>\n```\n\n<div class=\"content-ad\"></div>\n\n20. 스팬\n스팬은 디브와 비슷하지만, 스팬 요소는 인라인 구성 및 스타일링에 사용됩니다.\n\n```js\n<span></span>\n```\n\n21. 스크립트\n스크립트 태그는 자바스크립트 또는 다른 클라이언트 측 스크립트를 프로젝트에 추가하는 방법입니다.\n\n```js\n<script></script>\n```\n\n<div class=\"content-ad\"></div>\n\n22. No Script\n스크립트를 사용할 수 없는 경우 대체 콘텐츠를 표시하기 위해 no script 태그를 사용합니다.\n\n```js\n<noscript>당신의 브라우저는 자바스크립트를 지원하지 않습니다!</noscript>\n```\n\n23. Image\nimg 태그는 브라우저에 이미지를 표시하는 데 사용됩니다. src, alt, height, width와 같은 속성을 추가할 수 있습니다. src 속성은 이미지가 저장된 위치를 가리키고 브라우저에 이미지를 표시하기 위해 가져옵니다. alt 속성은 이미지에 대한 메타 설명 텍스트를 추가할 수 있어 브라우저에 표시되지 않습니다.\n\n```js\n<img src = \"new.svg\" alt = \"craft\" height = \"100px\" width = \"100px\" />\n```\n\n<div class=\"content-ad\"></div>\n\n24. 순서 없는 목록\n목록 항목을 배치할 수있는 순서 없는 목록을 정의합니다.\n\n```js\n<ul></ul>\n```\n\n25. 순서 있는 목록\n목록 항목을 배치할 수있는 순서 있는 목록을 정의합니다.\n\n```js\n<ol></ol>\n```\n\n<div class=\"content-ad\"></div>\n\n26. 목록 항목\n순서가 없는 목록이나 순서가 있는 목록에 위치할 수 있는 목록 항목을 정의합니다. 아래에 순서가 없는 목록에 애완 동물의 예시를 보여드리겠습니다.\n\n```js\n- 강아지\n- 고양이\n- 거북이\n```\n\n27. 하이퍼링크\nHTML 페이지에 하이퍼링크를 추가하려면 `a` 태그로 묶어주면 됩니다. 이를 통해 href 속성을 얻어 링크를 지정할 수 있습니다. 만약 하이퍼링크를 새 탭에서 열고 싶다면 target=\"_blank\" 속성을 추가할 수 있습니다.\n\n```js\n[a here](https://www.w3schools.comhttps://zackmactavish.github.io/MacTavish/){:target=\"_blank\"}: 내 웹사이트 방문하기!\n```\n\n<div class=\"content-ad\"></div>\n\n28. Nav\n\n`nav` 태그는 네비게이션 링크 세트를 정의합니다. 모든 링크가 `nav` 요소 내에 있어야 하는 것은 아님을 주의하세요. `nav` 요소는 주요 네비게이션 링크 블록에만 사용됩니다. 스크린 리더와 같은 브라우저는 이 요소를 사용하여 해당 콘텐츠의 초기 렌더링을 생략할지 여부를 결정할 수 있습니다.\n\n\n```html\n<nav></nav>\n```\n\n29. Button\n\n이 태그는 웹 페이지에 클릭 가능한 버튼을 배치합니다.\n\n\n```html\n<button type=\"button\">Click Me!</button>\n```\n\n<div class=\"content-ad\"></div>\n\n30. 양식\n`form` 태그는 사용자 입력을 위한 HTML 양식을 만들 때 사용됩니다. 이는 설문조사, 로그인 페이지 또는 회원 가입 등 여러 목적으로 사용될 수 있습니다.\n\n```js\n<form></form>\n```\n\n`form` 요소는 다음과 같은 양식 요소 중 하나 이상을 포함할 수 있습니다:\n\n- `input`\n- `textarea`\n- `button`\n- `select`\n- `option`\n- `optgroup`\n- `fieldset`\n- `label`\n- `output`\n\n<div class=\"content-ad\"></div>\n\n지금까지 읽어 주셔서 감사합니다! 추가 콘텐츠를 만들어 HTML 페이지를 작성할 것이며, 폼을 만들고 다른 태그를 구현하는 것을 더 살펴볼 것입니다. 저의 향후 포스트를 보려면 구독해주세요!","ogImage":{"url":"/assets/img/2024-05-01-30HTMLTagstoknow_0.png"},"coverImage":"/assets/img/2024-05-01-30HTMLTagstoknow_0.png","tag":["Tech"],"readingTime":5},{"title":"HTML에서 접근성을 준수하는 방법","description":"","date":"2024-05-01 23:07","slug":"2024-05-01-InaccessiblenativeHTMLselectmultiple","content":"\n\n## 접근하기 어려운 HTML\n\n![이미지](/assets/img/2024-05-01-InaccessiblenativeHTMLselectmultiple_0.png)\n\n아마도 많은 접근성 옹호자(그 중 한 명이 바로 저입니다)로부터 들어왔을 것입니다. 제 3자 UI 프레임워크 및 라이브러리의 사용을 피하거나 최소화해야 한다는 제의를 말이죠. 우리는 항상 네이티브 HTML을 사용하는 것이 좋다고 말하는 것입니다. (어떤 홈-롤드, ARIA가 풍부한 div와 span rave 대신)\n\n거의 항상 말이죠.\n\n<div class=\"content-ad\"></div>\n\n일부 네이티브 HTML 구현은 사용이 어려운 경우가 있습니다. 이 기사는 `select multiple` 요소에 초점을 맞출 것입니다.\n\n## 작동 방식\n\n`select multiple` 요소의 아이디어는 사용자가 그룹화된 체크박스 목록과 유사하게 제어를 위해 여러 옵션을 선택할 수 있다는 것입니다.\n\n그러나 이 기능이 사용하기 어렵다는 것뿐만 아니라 사용자 친화적이지도 않다는 것을 알게 될 것입니다. 아래는 마크업입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<label for=\"lbmPets\">애완동물</label>\n<select id=\"lbmPets\" multiple>\n  <option>강아지</option>\n  <option>고양이</option>\n  <option>고슴도치</option>\n  <option>뱀</option>\n  <option>조랑말</option>\n  <option>암석</option>\n</select>\n```\n\n위의 마크업은 이렇게 렌더링됩니다:\n\n![애완동물 선택 창](/assets/img/2024-05-01-InaccessiblenativeHTMLselectmultiple_1.png)\n\n그 multiple 속성이 설정되어 있어서, 사용자는 여러 애완동물을 선택할 수 있습니다. 사용자가 어떻게 여러 옵션을 선택할 수 있나요?\n\n<div class=\"content-ad\"></div>\n\n## 마우스를 사용하여 여러 개 선택하기\n\n만약 마우스만 사용한다면, 연속적인 옵션들만 선택할 수 있습니다. \"개\"와 \"고슴도치\"와 같이 연속되지 않는 옵션을 선택하려면, 행운을 빌어야 합니다. 내가 알기로는, 그것은 마우스만을 사용하면 불가능합니다.\n\n## 마우스와 키보드를 사용하여 여러 개 선택하기\n\n마우스와 키보드를 사용하여 연속적이고 비연속적인 옵션들을 선택할 수 있습니다. 연속적인 항목을 선택하려면, 선택하고자 하는 범위의 한쪽 끝을 선택한 뒤 Shift 키를 누른 채로 다른 끝에 해당하는 옵션을 클릭하면 됩니다:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](https://miro.medium.com/v2/resize:fit:804/1*JuD893iR1NkC9p47BgPVXw.gif)\n\n비연속 항목을 선택하려면 하나의 옵션을 선택하고 Ctrl 키를 누른 채로 다음 옵션을 클릭한 후 필요한 만큼 반복하세요:\n\n![이미지](https://miro.medium.com/v2/resize:fit:804/1*9RnOj1NxOyKCm34LmTE36g.gif)\n\n## 키보드만으로 여러 항목 선택\n\n<div class=\"content-ad\"></div>\n\n키보드만 사용하면 마우스 클릭 대신 스페이스 바를 사용하여 동일한 작업을 수행할 수 있어요. 선택 상태를 전환하고 포커스를 조정하는 데 약간 까다로울 수 있지만 가능해요:\n\n![demo](https://miro.medium.com/v2/resize:fit:804/1*_OODTheBxFKunrqslpacqg.gif)\n\n## 독자 도전 과제\n\n여러분에게 도전 과제가 있어요: 아래 데모를 사용하여 한 손으로 여러 비연속 옵션을 선택해 보세요.\n\n<div class=\"content-ad\"></div>\n\nhttps://jsfiddle.net/6azcb2hu/\n\n이것을 할 수 있었나요?\n\n다른 HTML 요소들과 비교하면 이것은 상당히 어려울 것입니다. 나는 키보드만을 사용하여 손이 어색하게 Ctrl 키, Space 바 및 화살표 키에 손을 뻗어야만 성공했어.\n\n문제가 보이나요?\n\n<div class=\"content-ad\"></div>\n\n아직 보조 기술에 대해 언급하지 않았네요.\n\n## 보조 기술이 있는 select multiple 컨트롤\n\n그렇다면 보조 기술(AT)을 사용할 때는 어떨까요? 앞서 설명한 것처럼 비-AT 사용자가 겪는 제약 사항과 동일한 제한 사항이 있습니다. 또한 이전에 선택한 옵션을 기억해야 합니다.\n\n예를 들어, `select multiple` 컨트롤이 포커스를 가지면 사용자에게 레이블의 텍스트, 현재 선택된 옵션의 텍스트, 해당 옵션이 위치한 위치(예: \"6개 중 2개\"), 및 해당 옵션이 선택되었는지에 대한 정보를 전달합니다.\n\n<div class=\"content-ad\"></div>\n\n그러나 해당 컨트롤이 포커스를 잃으면, 다시 포커스를 받을 때 선택된 옵션을 확인할 방법이 없다고 보입니다. 컨트롤이 다시 포커스를 받으면 주로 레이블 텍스트와 현재 선택된 옵션이 소개됩니다.\n\n여기서 위쪽 또는 아래쪽 화살표 키를 누르면 모든 옵션이 선택 취소됩니다. 이것만으로도 이 컨트롤이 일회용 컨트롤임을 의미합니다. 시각장애를 가진 사용자가 이 페이지로 돌아가면 옵션을 다시 선택해야 합니다.\n\n결국, 시각 보조 기기에 대해 이 컨트롤은 가치 있는 것보다 오히려 나쁜 영향을 미칩니다.\n\n# 이제 어떻게 해야 할까요?\n\n<div class=\"content-ad\"></div>\n\n## 왜 이것이 문제인가요?\n\n이것은 문제입니다. 왜냐하면 이 컨트롤의 사용 가능한 기능 부족, 보조 기술 지원 및 사용자 정의 가능성이 개발자들을 보통 접근성을 별로 고려하지 않거나 대충 처리하는 써드파티 라이브러리에 의존하도록 유도하기 때문입니다.\n\nSelect2 및 SumoSelect와 같은 써드파티 콤보박스 라이브러리는 다중 선택 동작을 가능하게 하며 개발자들이 찾는 많은 기능과 사용자 정의 가능성을 제공하지만, 두 가지 라이브러리 (그리고 다른 라이브러리들)도 각자의 접근성 문제를 가지고 있습니다.\n\n## 해결책은 있을까요?\n\n<div class=\"content-ad\"></div>\n\n그래서, 무엇을 할 수 있을까요?\n\nW3C 내부의 커뮤니티 그룹인 OpenUI가 있습니다. \"HTML, CSS, JS 및 Web API를 결합하여 웹 개발자가 현대적인 맞춤형 사용자 인터페이스를 만들 수 있는 기술을 제공하기 위한 더 큰 아키텍처 계획을 용이하게 하는 것을 목표로 합니다.\" (출처)\n\n간단히 말해, 그들은 W3C에서 검토하고 채택(또는 그렇지 않음)되는 표준을 제안합니다.\n\n그 중 하나의 제안은 'selectlist'라는 요소입니다. 이는 'select' 요소보다 훨씬 많은 사용자 정의 및 확장 기능을 제공하며, 관련 텍스트 삽입, 아이콘 추가, 스타일링 및 기타 몇 가지 기능을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n하지만 이게 접근 가능한건가요?\n\n음, 아니요. 전혀 아닙니다.\n\n사실, 데모 페이지에서 일부 컨트롤에 키보드로 액세스할 수조차 없습니다. 직접 테스트하려면 실험적인 웹 플랫폼 기능을 허용하는 브라우저 설정을 변경해야 합니다. 지침은 데모 페이지에 나와 있어요.\n\n하지만... 노트에 적혀 있는대로:\n\n<div class=\"content-ad\"></div>\n\n그래서, 본질적으로는 작동 컨셉이지만 접근성이 거의 구현되지 않은 상태입니다. 이 요소(또는 그 변형)이 채택되면, 접근성의 기본적인 구현을 보장하기 위해 엄격한 검토를 거쳐야 할 것입니다.\n\n해당 요소는 WHATWG의 Github에서 이슈로 제안되었으며, 본 문서 작성 시점에서 아직 오픈 상태입니다.\n\n## 그럼 그 전까지는 어떻게 할까요?\n\n제 생각이 틀리지 않았다면, `selectlist`가 곧 구현될 것으로 생각하기는 어렵습니다(혹시 그렇게 되더라도). 그래서 기다리는 것은 좋은 선택이 아닙니다. 심지어 내일 구현된다 해도 브라우저 지원이 느릴 가능성이 높습니다.\n\n<div class=\"content-ad\"></div>\n\n한편, 여러 가지 옵션이 있습니다.\n\n옵션 1: 여러 개의 체크박스 사용\n\n많은 잠재적 선택 옵션이 있는 경우 이 방법이 맞지 않을 수 있습니다. 그러나 몇 개의 옵션이 있는 경우 그룹화된 체크박스를 사용하는 것이 완전히 적합합니다 (그리고 접근성이 좋습니다).\n\n체크박스를 그룹화하기 위해 `fieldset`와 `legend`를 사용하는 것을 권장합니다 (ARIA나 역할 속성은 필요하지 않습니다):\n\n<div class=\"content-ad\"></div>\n\n```js\n<fieldset>\n<legend>Pets</legend>\n<label><input type=\"checkbox\" id=\"chkDog\">Dog</label>\n<label><input type=\"checkbox\" id=\"chkCat\">Cat</label>\n<label><input type=\"checkbox\" id=\"chkHedgehog\">Hedgehog</label>\n<label><input type=\"checkbox\" id=\"chkSnake\">Snake</label>\n<label><input type=\"checkbox\" id=\"chkPony\">Pony</label>\n<label><input type=\"checkbox\" id=\"chkRock\">Rock</label>\n</fieldset>\n```\n\n![2024-05-01-Inaccessible native HTML select multiple](/assets/img/2024-05-01-InaccessiblenativeHTMLselectmultiple_2.png)\n\n옵션 2: (매우 주의해서) 써드 파티 라이브러리 사용하기\n\n많은 옵션이 있거나 이를 그룹화된 체크박스로 표시하는 것이 적절하지 않은 경우, 써드 파티 라이브러리를 사용해야 할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n개발 중에 알아두세요: 현재로서는 즉시 접근할 수 있는 제3자 멀티-선택 컨트롤을 아직은 본 적이 없습니다.\n\n어떤 사람들은 더 좋은 것을 만들어보기도 했습니다. 예를 들어, WooCommerce에서 Select2 프로젝트를 포크하여 더 접근 가능한 경험을 제공하고자 하는 SelectWoo를 만들었습니다. 그러나 심지어 그 구현에도 몇 가지 문제가 있습니다.\n\n요약하면, 이 방법을 선택한다면 JavaScript를 많이 조정하고 브라우저/보조기술(AT) 테스트를 많이 준비해야 합니다.\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n이 문제가 발생하는 것은 정말 싫은 일이에요.\n\n`select multiple` 요소는 분명히 접근성이 떨어지며, 절연, 운동 및 기억 도전과 보조 기술 사용자에게 불필요한 부담입니다.\n\n개발자들은 `select` 요소에 대한 불만을 솔직하게 표현해 왔으며, multiple 속성이 추가되면 더욱 그렇습니다.\n\n저의 겸손한 권고는 다중 선택 제어가 필요한 상황을 피할 수 있는 방법을 찾아보는 것입니다. 범위를 좁히거나 옵션을 제한하는 등의 방법을 통해요. 불가피한 상황일 수 있겠지만, 가능하다면 그룹화된 체크박스를 사용해보세요.\n\n<div class=\"content-ad\"></div>\n\n만약 그 방법을 선택할 수 없고, 제3자 솔루션을 도입해야 한다면, 준비하세요. 접근성을 확보하기 위해 매우 괴로운 작업을 많이 해야 할 것입니다. 그리고 접근성 감사자들이 그 제3자 컨트롤을 열심히 조사할 것입니다.\n\n그러니 철저히 테스트해 보세요!\n\n# 링크\n\n## 언급된\n\n<div class=\"content-ad\"></div>\n\n- `select multiple`에 대한 JSFiddle 예시\n- Select2\n- SumoSelect\n- OpenUI\n- OpenUI: Charter\n- Open UI: `selectlist` 데모 페이지\n- WHATWG HTML GitHub 이슈: `selectlist` 요소\n- SelectWoo\n\n## 관련 자료\n\n- WHATWG HTML GitHub 이슈: `select` 사용자 정의화를 위한 Opt-in\n- MDN Web 문서: multiple 속성\n\n## 더 읽어보기\n\n<div class=\"content-ad\"></div>\n\n- 산드리나 페레이라에 의한 네이티브 및 커스텀 선택 요소 사이의 균형 찾기\n- 그렉 휘트워스에 의한 'select' 컨트롤을 스타일링할 수 있을까요?\n- 사라 히글리에 의한 'select' 당신의 독재\n- 멘디 지에에 의한 대량 경험: 다중 선택 및 대량 작업 탐색","ogImage":{"url":"/assets/img/2024-05-01-InaccessiblenativeHTMLselectmultiple_0.png"},"coverImage":"/assets/img/2024-05-01-InaccessiblenativeHTMLselectmultiple_0.png","tag":["Tech"],"readingTime":7}],"page":"146","totalPageCount":151,"totalPageGroupCount":8,"lastPageGroup":11,"currentPageGroup":7},"__N_SSG":true}