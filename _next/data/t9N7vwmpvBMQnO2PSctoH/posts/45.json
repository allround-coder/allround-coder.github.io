{"pageProps":{"posts":[{"title":"CORS를 활용한 효율적인 RSS JavaScript 파서 소개","description":"","date":"2024-06-20 01:04","slug":"2024-06-20-IntroducinganEfficientRSSJavaScriptParserwithCORS","content":"\n\n웹 개발 영역에서 RSS 피드와 같은 외부 콘텐츠를 애플리케이션에 통합하는 것은 종종 Cross-Origin Resource Sharing (CORS) 제약 때문에 도전이 될 수 있습니다. 이 보안 조치는 사용자 데이터를 보호하는 데 중요하지만 Medium과 같은 플랫폼에 호스팅된 RSS 피드와 같은 다른 출처에서 데이터를 검색하는 것을 복잡하게 만들 수 있습니다.\n\n이 기사에서는 CORS 제한을 다루면서 JavaScript를 사용하여 RSS 피드를 구문 분석하는 복잡성을 탐구합니다. 우리는 다양한 출처에서 동적 콘텐츠를 통합할 수 있도록 RSS 데이터를 원활하게 가져오고 구문 분석하는 방법을 탐구할 것입니다. 관련 코드는 여기서 확인할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\nhttps://github.com/asbedb/rss-parser-cors\n\n# RSS 피드를 사용하는 이유?\n\nRSS(Really Simple Syndication) 피드는 웹에서 콘텐츠 배포의 핵심 요소로 남아 있으며, 기사, 뉴스 업데이트, 블로그 글과 같이 자주 업데이트되는 콘텐츠를 게시하는 표준화된 형식을 제공합니다. 개발자와 콘텐츠 집계자들에게 RSS 피드는 여러 소스에서 실시간으로 큐레이션된 콘텐츠에 구조화된 방법으로 액세스하고 표시하는 기능을 제공합니다.\n\n# CORS 제약 해결\n\n<div class=\"content-ad\"></div>\n\nRSS 피드를 Medium과 같은 플랫폼에서 가져올 때 개발자가 주로 직면하는 문제 중 하나는 CORS 제한입니다. 브라우저는 이러한 정책을 강요하여 악성 스크립트가 명시적인 허가 없이 다른 도메인 간에 데이터에 접근하는 것을 방지합니다. 이 보안 계층은 중요하지만 종종 스마트한 솔루션을 요구하여 데이터 검색 및 통합을 원활하게 할 수 있게 합니다.\n\n# 자바스크립트가 해결책이다: RSS 파싱\n\n다양성과 풍부한 라이브러리 및 프레임워크 생태계를 통해 자바스크립트는 RSS 피드와 같은 XML 기반 콘텐츠의 파싱 및 조작을 위한 강력한 해결책을 제공합니다. 현대적인 기술과 라이브러리를 활용하여 개발자는 프록시나 서버 측 솔루션을 사용하여 CORS 제한을 우회하고 애플리케이션이 RSS 콘텐츠를 안전하고 효율적으로 가져오고 표시할 수 있도록 할 수 있습니다.\n\n# CORS 호환 RSS 파서 구현\n\n<div class=\"content-ad\"></div>\n\n이 기사에서는 CORS Anywhere 및 jQuery를 사용하여 단일 RSS 소스에서 파싱하는 데 도움을 줄 것입니다. 이 기사는 매체(Medium)에 있으므로 내 매체(Medium) RSS 피드를 사용합시다!\n\n## CORS Anywhere\n\n## jQuery\n\n## 프로젝트 설정하기\n\n<div class=\"content-ad\"></div>\n\n아래는 서버 측 기능을 로컬 또는 온라인으로 설정하는 데 필요한 기본 지식을 전제로 합니다.\n\n익숙하지 않은 경우, 로컬 개발을 위해 로컬 LAMP/XAMP 스택을 실행하거나 NodeJS 서버 측 기능을 실행하는 호스팅 제공 업체의 옵션을 찾아보는 것을 강력히 추천합니다.\n\n# 프로젝트 폴더 구조\n\n```js\njs/main.js\ncss/styles.css\nindex.html\n```\n\n<div class=\"content-ad\"></div>\n\n# index.html\n\n이 연습을 위해 아주 기본적인 HTML 구조를 사용하여 기초를 설정할 것입니다.\n\n여기서 고려해야 할 가장 중요한 세 가지 요소는 다음과 같습니다.\n\n- 페이지의 `head` 태그에 jQuery 스크립트를 호출하는지 확인하세요. 아래 예제는 CDN min.js 참조 점을 사용하며 구현할 수 있습니다.\n- 이 예에서는 생성된 HTML 코드를 `container id=\"rss-embed\"`의 컨테이너에 추가하는 방식으로 사용하며, 이 요소의 id가 js 파일이 이 컨테이너와 일치하는지 확인하는 것이 중요합니다.\n- 페이지 하단에 main.js에 대한 참조를 추가하여 페이지가 렌더링된 후에 스크립트가 호출되도록하여 특정성과 관련된 문제를 회피하십시오.\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title> CORSJS Example</title>\n        <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>💾</text></svg>\">\n        <link rel=\"stylesheet\" href=\"css/styles.css\"> \n        <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    </head>\n    <body> \n      <h1>Posts</h1>\n      <container id=\"rss-embed\"></container>\n      <script src=\"js/main.js\"></script>\n    </body>\n</html> \n```\n\n# js/main.js\n\n아래에서 스크립트 기능을 볼 수 있습니다. 이 예제에서는 HerokuApp 버전의 CORS Anywhere를 사용하고 있습니다.\n\n참고: HerokuApp 버전의 CORS Anywhere는 데모 및 테스트 용도로만 사용해야 합니다. 프로덕션 환경에서 CORS Anywhere를 사용하려면 이 링크를 참조하세요.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nconst RSS_URL = 'https://cors-anywhere.herokuapp.com/https://medium.com/feed/@asbedb';\n\n$.ajax({\n    url: RSS_URL,\n    dataType: \"xml\",\n    success: function(data) {\n        $(data).find(\"item\").each(function() {\n            const el = $(this);\n            const contentEncoded = el.find(\"content\\\\:encoded\").text();\n            const tempDiv = document.createElement('div');\n            tempDiv.innerHTML = contentEncoded;\n            const pTags = tempDiv.getElementsByTagName('p');\n            const firstImg = tempDiv.querySelector('img');\n            const firstImageUrl = firstImg ? firstImg.getAttribute('src') : 'img/medium.webp'; // <img> 태그가 없는 경우 기본 이미지 URL 제공\n\n            let firstTwoSentences = '';\n            if (pTags.length > 0) {\n                const firstPTagContent = pTags[0].textContent.trim();\n                const sentences = firstPTagContent.split(/[\\.\\?!]\\s+/);\n                firstTwoSentences = sentences.slice(0, 1).join('. ');\n            }\n            //HTML Message-Embedder//\n            const template = `\n            <a href=\"${el.find(\"link\").text()}\" target=\"_blank\">\n                <div class=\"message-embed\">\n                    <div id=\"title\" style=\"color: lightseagreen;\">${el.find(\"title\").text()}</div>\n                    <div id=\"pub-date\" class=\"post-pubdate\">${el.find(\"pubDate\").text()}</div>\n                    <div id=\"post-image\"><img class=\"message-embed-image\" src=\"${firstImageUrl}\"/></div>\n                    <div id=\"leading-message\" class=\"leading-message\">${firstTwoSentences}</div>\n                </div>\n            </a>\n            `;\n            $(\"#rss-embed\").append(template);\n        });\n    },\n    error: function(xhr, status, error) {\n        console.error(\"Error fetching RSS feed:\", error);\n    }\n});\n```\n\n이제 한번 알아봅시다.\n\n우선 RSS_URL을 정의하여 RSS 피드를 가져올 것입니다. Heroku를 사용 중이라면 데모 기능을 사용하기 전에 도전을 완료해야합니다 (브라우저에서 표시됩니다).\n\n```js\nconst RSS_URL = 'https://cors-anywhere.herokuapp.com/https://medium.com/feed/@asbedb';\n```\n\n<div class=\"content-ad\"></div>\n\n우리가 RSS_URL을 정의한 후에는 jQuery AJAX 요청이 발생합니다. 이 작업은 피드를 확인하여 XML 피드가 제대로 제공되고 있는지 확인합니다.\n\n```js\n$.ajax({\n    url: RSS_URL,\n    dataType: \"xml\",\n    success: function(data) {\n```\n\n여기서 우리는 파싱 프로세스를 시작합니다. 대부분의 RSS 피드는 파싱할 콘텐츠를 `item` 태그에 분류할 것입니다. 예시로 Medium의 RSS 피드를 살펴보겠습니다.\n\n![Medium RSS feed](/assets/img/2024-06-20-IntroducinganEfficientRSSJavaScriptParserwithCORS_1.png)\n\n<div class=\"content-ad\"></div>\n\n관련 태그를 살펴보기 시작하면 소화해야 할 내용이 많을지도 모르겠어요. 우리는 주로 `item``/item` 내에 중첩된 내용에 관심을 가지고 있어요.\n\n```js\n$(data).find(\"item\").each(function() {\n    const el = $(this);\n    const contentEncoded = el.find(\"content\\\\:encoded\").text();\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = contentEncoded; \n```\n\n성공적인 데이터 호출 후에는 이제 `items`를 반복하면서 각 \"게시물\"/\"기사\"를 수집하려고 해요. 더 중요한 것은 여기서 특정 요소를 구문 분석하고 읽기 쉬운 HTML 형식으로 표시할 수 있어야 한다는 거에요.\n\n위 코드는 우리가 다룰 것이 많은 핵심 요소들을 임시로 세 가지 상수에 보관할 거에요.\n\n<div class=\"content-ad\"></div>\n\n첫 번째 `el`은 `item` 태그 내에 있는 모든 콘텐츠로 구성됩니다.\n\n두 번째 `contentEncoded`는 Medium RSS 태그 `content:encoded`에서 기사 콘텐츠로 구성됩니다.\n\n그런 다음 이를 `tempDiv`라는 새롭게 생성된 임시 `div`에 저장합니다.\n\n```js\n  const pTags = tempDiv.getElementsByTagName('p');\n  const firstImg = tempDiv.querySelector('img');\n  const firstImageUrl = firstImg ? firstImg.getAttribute('src') : 'img/medium.webp';\n```\n\n<div class=\"content-ad\"></div>\n\n이 파서를 작성한 방식은 카드가 내용을 포함하고 있어 해당 카드는 세 개의 요소를 가지며 원본 기사로 연결될 것을 의도하여 작성되었습니다.\n\n단순히 말하면, 카드에는 제목, 기사의 짧은 오프닝 문장, 발행 날짜, 그리고 카드를 클릭할 수 있는 형태로 기사의 첫 번째 이미지가 둥근 아이콘으로 표시될 것입니다.\n\n일부 추가적인 jQuery/JavaScript 마법이 우리가 필요로 하는 요소의 데이터를 \"세척\"하는 데 도움이 될 것입니다.\n\n여기에서는 p 태그로 pTags를 정의하여 요소`p`를 가져옵니다 (이것은 Medium이 사용하는 방법이며, 귀하의 RSS/XML 소스에 따라 다를 수 있습니다).\n\n<div class=\"content-ad\"></div>\n\nfirstImg은 첫 번째 `img` 태그를 찾고 해당 첫 번째 태그에서 속성 src=\"\"의 URL을 가져옵니다.\n\n이제 요소 중 하나를 가져왔으므로 p태그를 첫 두 문장으로 정리해야 합니다.\n\n```js\nlet firstTwoSentences = '';\nif (pTags.length > 0) {\n    const firstPTagContent = pTags[0].textContent.trim();\n    const sentences = firstPTagContent.split(/[\\.\\?!]\\s+/);\n    firstTwoSentences = sentences.slice(0, 2).join('. ');\n}\n```\n\n여기서 firstTwoSentences라는 새 변수를 문자열로 정의합니다.\n\n<div class=\"content-ad\"></div>\n\n우리의 첫 번째 if 문은 길이를 확인하여 pTags에 실제 콘텐츠가 있는지 확인합니다.\n\n그런 다음 처음 `p` 태그를 잘라 문자를 반복하는 수를 줄이고 \" . \" 문자를 분리자로 사용합니다!\n\n그런 다음 첫 번째 두 문장을 함께 잘라 생성된 문자열로 firstTwoSentences 변수를 대체합니다!\n\n마법 같은 일이 일어납니다!\n\n<div class=\"content-ad\"></div>\n\n```js\n  const template = `\n  <a href=\"${el.find(\"link\").text()}\" target=\"_blank\">\n      <div class=\"message-embed\">\n          <div id=\"title\" style=\"color: lightseagreen;\">${el.find(\"title\").text()}</div>\n          <div id=\"pub-date\" class=\"post-pubdate\">${el.find(\"pubDate\").text()}</div>\n          <div id=\"post-image\"><img class=\"message-embed-image\" src=\"${firstImageUrl}\"/></div>\n          <div id=\"leading-message\" class=\"leading-message\">${firstTwoSentences}</div>\n      </div>\n  </a>\n  `;\n  $(\"#rss-embed\").append(template);\n```\n\n마지막으로 모든 변수를 HTML 요소로 넣고 이를 rss-embed `container`에 추가해야 합니다.\n\n여기에서는 template이라는 변수를 만들고 XML 피드에서 직접 요소를 가져와서 새롭게 구문 분석한 `p` 태그를 HTML 형식으로 넣는 작업을 시작합니다. 이 스크립트에서 고려해야 할 중요한 사항은 다음과 같습니다.\n\n```js\n${el.find(\"title\").text()\n```\n\n<div class=\"content-ad\"></div>\n\n이 변수는 우리의 원본 AJAX jQuery 선택기에서 가져온 것입니다. 이는 XML 피드의 'items'에서 `title` 태그를 직접 가져오는 것입니다. link, pubDate에도 동일한 논리가 적용됩니다.\n\n```js\n${firstImageURL}\n${firstTwoSentences}\n```\n\n이것들은 이전 코드에서 호출된 변수들입니다.\n\n# css/styles.css\n\n<div class=\"content-ad\"></div>\n\n스타일링은 완전히 당신에게 달려 있어요! 시작하는 데 도움이 되는 몇 줄의 코드가 있어요.\n\n```js\n:root{\n    /* 배경 색상 */\n    --darker: #292b2f;\n    \n    /* 글꼴 색상 */\n    --light-white: #cfcfcf; \n}\n\nbody{\n    background-color: var(--darker);\n    color: var(--light-white);\n    padding: 10px;\n    overflow-y: hidden;\n    font-family: \"Lucida Console\", Monaco, monospace;\n    font-size: 32px;\n    letter-spacing: 0px;\n    word-spacing: -3.8px;\n    font-weight: 700;\n}\n\na{\n  text-decoration: none;\n}\n\n.message-embed{\n    display: inline-flex;\n    flex-direction: column;\n    user-select: none; \n    text-align: center;\n    outline-style: solid;\n    border-radius: 10px;\n    outline-width: 1px;\n    outline-color: lightseagreen;\n    width: 200px;\n    cursor: pointer;\n    padding: 20px;\n    min-height: 300px;\n}\n\n.message-embed:hover{\n    outline-color: white;\n    box-shadow: -1px -1px 35px 10px rgba(255, 255, 255, 0.4);\n\n}\n\n.message-embed-image{\n    padding-top: 5px; \n    width: 150px; \n    height: 150px;\n    border-radius: 100%;\n}\n\n.post-pubdate, .leading-message{\n    font-size: 15px;\n    padding-top: 12px;\n    color: white;\n}\n```","ogImage":{"url":"/assets/img/2024-06-20-IntroducinganEfficientRSSJavaScriptParserwithCORS_0.png"},"coverImage":"/assets/img/2024-06-20-IntroducinganEfficientRSSJavaScriptParserwithCORS_0.png","tag":["Tech"],"readingTime":10},{"title":"깃허브에서 SSH 키 생성하는 빠른 스텝별 가이드","description":"","date":"2024-06-20 01:03","slug":"2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub","content":"\n\n## 쉽고 간단하며 비기술적인 설명\n\n![이미지](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_0.png)\n\n친구들,\n\n이 튜토리얼은 우리 둘 다를 위한 것이에요. SSH 키를 설정해야 했던 적이 두세 번 있었는데, 매번 악몽이었죠. 즐겁게 경험한 적은 없어요. 제가 찾은 대부분의 튜토리얼은 복잡하고 따라가기 어려웠어요.\n\n<div class=\"content-ad\"></div>\n\n이 글에서는 프로세스를 간단히 설명하겠습니다. SSH 키를 생성하는 간단한, 비기술적인, 단계별 가이드를 제공하겠습니다. 영어로 설명되어 있어 초등학생조차 따를 수 있을 것이며, 사진도 있습니다. 누가 사진을 싫어하겠어요?\n\n시작해봅시다.\n\n## Windows 터미널\n\n시작하기 위해 Windows 터미널을 여시면 됩니다. 이 튜토리얼에서는 Ubuntu 터미널을 사용하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_1.png)\n\n현재 데스크톱 폴더에 있는지 확인해주세요. 위 스크린샷에서 보듯이, 저는 현재 데스크톱 폴더에 있어요.\n\n만약 데스크톱 폴더에 있지 않다면, 수정해봅시다.\n\n- 폴더에 들어가려면 cd 폴더명을 사용하세요. 폴더명 자리에 들어가고 싶은 폴더명을 넣어주세요.\n- 현재 폴더를 벗어나려면 cd ~를 사용하세요.\n- 현재 위치한 폴더 안의 폴더와 파일을 보려면 ls를 사용하세요.\n\n<div class=\"content-ad\"></div>\n\n이 명령어를 사용하여 데스크톱 폴더로 이동하세요.\n\n## SSH 폴더 열기\n\n교수님께서 .ssh 폴더에 SSH 키를 저장하라고 가르쳐 주셨어요. 그렇게 하면 모든 키가 동일한 폴더에 포함됩니다. 이제 그 방법을 보여 드릴게요.\n\n이 폴더를 생성하려면 다음을 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nmkdir .ssh\n```\n\nmkdir은 현재 폴더에 새 디렉토리(즉, 폴더)를 만드는 명령어입니다. 현재 데스크톱 폴더에 있기 때문에 이 명령은 데스크톱에 .ssh라는 폴더를 만듭니다.\n\n그리고 나중을 위해, 만약 이 폴더가 이미 있는지 확인하고 싶다면, 다음을 실행할 겁니다:\n\n```js\nls -larths\n```\n\n<div class=\"content-ad\"></div>\n\n위에 표시된 이미지는 ls -larths 명령어의 결과입니다. 제일 아래에서 .ssh 폴더를 볼 수 있습니다. 저는 그것을 노란색으로 강조했어요.\n\n이 폴더를 생성한 후에는 이 폴더로 이동하고 싶어요. 다음 명령어로 폴더로 이동하세요:\n\n```js\ncd .ssh\n```\n\n<div class=\"content-ad\"></div>\n\n## SSH 키 생성하기\n\nSSH 폴더 안에 있어요. 제 경우처럼 SSH 키가 이미 있는 경우가 있습니다. 우리는 개인 및 공개 RSA 키를 가지고 있습니다.\n\n키가 이미 있는지 확인하려면 ls를 사용할 수 있어요.\n\n![이미지](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_3.png)\n\n<div class=\"content-ad\"></div>\n\n제 경우에는 그 키들이 존재합니다. 저희의 개인 키인 id_rsa가 있습니다. 아무에게도 공유하지 마세요. 그리고 우리의 공개 키인 id_rsa.pub도 있습니다. 이웃들과 자유롭게 공유하세요.\n\n만약 키가 없다면, 만들어 봅시다. .ssh 폴더 안에서 다음 명령어를 실행하세요:\n\n```js\nssh-keygen -b 4096 -t rsa\n```\n\n이 명령은 4096비트의 RSA 키를 생성합니다. 이는 고수준의 암호화를 제공합니다. 원한다면 다르게 설정할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n커스터마이징할 수 있는 내용을 보려면 man ssh-keygen 명령어를 실행해보세요. 여기서 사용할 수 있는 모든 플래그가 표시될 거에요. 하지만 초보자라면 위 명령어로 충분히 작동할 거예요. 일이 처리될 거에요.\n\n명령어를 실행해보세요. 공개 및 비공개 RSA 키 쌍을 생성하기 시작할 거에요. 파일, 비밀번호, 그리고 다시 한번 비밀번호를 요청할 거에요. 모두 엔터 키를 눌러 건너뛸 수 있어요.\n\n그러면 끝이에요. RSA 키가 생성되었습니다. 앞서 말한 대로 ls를 사용해 키가 이미 존재하는지 확인할 수 있어요.\n\n![image](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_4.png)\n\n<div class=\"content-ad\"></div>\n\n아래와 같이 확인하실 수 있어요.\n\n한 번, 우리가 id_rsa.pub 인 공개 키를 가지게 되면, 이것을 확인하고 싶어요. SSH 키를 확인하고 싶어요.\n\n다음 명령어를 사용하여 id_rsa.pub 파일을 열어봐요.\n\n```js\nless id_rsa.pub\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_5.png\" />\n\n요렇게 나와야 할 거에요. 전체 청크를 복사하시고요 — 전체 청크를 말이에요. 그 다음에 GitHub에 붙여넣을 거에요.\n\n# GitHub\n\n## GitHub에 로그인하고 설정으로 이동하기\n\n<div class=\"content-ad\"></div>\n\n\n![Step 6](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_6.png)\n\n## Open the Tab “SSH and GFG Keys”\n\n![Step 7](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_7.png)\n\n## Create a “NEW SSH KEY”\n\n\n<div class=\"content-ad\"></div>\n\n\n![QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_8](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_8.png)\n\nThe screen shown below will pop up.\n\n![QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_9](/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_9.png)\n\nGive your SSH key a meaningful title. I called mine ASUS LAPTOP.\n\n\n<div class=\"content-ad\"></div>\n\n그럼 SSH 키를 붙여넣으세요. \"SSH 키 추가\" 버튼을 누르세요. GitHub에서 당신이 정말 본인임을 확인하려면 비밀번호를 입력하라는 메시지가 표시될 거에요. 비밀번호를 확인한 후에는 모두 준비된 거죠!\n\n이제 여러분은 SSH 키가 항상 데스크톱에 저장된다는 것을 기억할 수 있어요. 그 키들은 .ssh라는 폴더에 있답니다.\n\n끝났어요. 축하해요.","ogImage":{"url":"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_0.png"},"coverImage":"/assets/img/2024-06-20-QuickStep-By-StepGuidetoGeneratinganSSHKeyinGitHub_0.png","tag":["Tech"],"readingTime":4},{"title":"나는 UX 디자이너로서 웹앱을 코딩했어","description":"","date":"2024-06-20 01:01","slug":"2024-06-20-IcodedawebappasaUXdesigner","content":"\n\n## ChatGPT 4.0을 이용하여\n\n![이미지](/assets/img/2024-06-20-IcodedawebappasaUXdesigner_0.png)\n\n저는 5년간 디자이너로 활동해왔습니다. 주로 전문 소프트웨어 프로젝트를 다루는 UX 기획 에이전시에서 일했어요. ERM과 기술 작업의 디지털화를 생각해보세요.\n\n제 커리어 동안 왜 소프트웨어가 종종 부적합하고 가끔 못생긴지 항상 궁금했습니다. 왜 디자이너들에게는 디자인이 개발자들에게는 복잡한 것인가? 이에 대한 답은 쉽게 얻을 수 있습니다. 개발자들은 코드 줄이나 수학적인 공식과 함께 작업하며 엄격한 문법을 갖춘 개발 언어에 집중해야 합니다. 한편 디자이너들은 시각적 도구로 작업하여 즉시 결과물을 표시하고 테스트할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 차이는 디자이너로서의 일상적인 작업에서 근본적인 것입니다. 무언가를 만들 때, 코드화해야 할 사람에 대해 생각하는 것이 중요합니다. 그래서 많은 구인 공고에서 디자이너들이 적어도 HTML, CSS, 그리고 Javascript에 대한 기본적인 이해를 갖추도록 요청합니다.\n\n나는 이러한 언어들 간의 관계와 작동 방식에 대한 전반적인 개념을 알고 있었지만, 풀 스택 디자이너가 되기 위한 탐구로, 프로젝트를 처음부터 실행하는 것을 실험해 보고 개발자의 역할을 경험해 보고 싶었습니다. 그것은 재미있었지만 답답한 경험이었습니다.\n\n![이미지](/assets/img/2024-06-20-IcodedawebappasaUXdesigner_1.png)\n\n## 왜 코딩을 배우는가\n\n<div class=\"content-ad\"></div>\n\n몇 년 전에 코딩을 시도해 봤어요. HTML에 대한 기본 과정을 따라했지만, 저에게는 너무 추상적이었어요. 시각적인 것에 집중하고, 사람들에게 미치는 심리적 영향에 관심이 많은 창의적인 사람이에요. 최소한의 것을 만들기 위해 많은 텍스트를 작성해야 한다는 것이 충분히 자극적이지 않았어요. 결국 이론을 이해하고 실습하지 않아도 만족했어요.\n\n얼마나 많이 변했나요? 2019년부터 모든 게 달라졌어요. 오늘 시장을 혁신하고 있는 두 가지 기술은 인공지능과 가상/증강 현실이에요. 디자이너들은 이러한 도구를 이해하여 그 주위의 경험을 설계해야 해요. 나는 미래를 두렵게 여기지 않아요, 왜냐하면 디자이너가 개발자와 사용자 사이의 인터페이스 역할을 하기 때문이에요. 모든 기술은 최종 사용자를 배려하여 무엇을 해야하고 하지 말아야하는지 정의해야 하는 사람이 필요하죠.\n\n인공지능을 이해하기 위해서는 어려운 개념을 완전히 파악해야 해요. LLM, 파이썬, 딥러닝. 나는 이러한 개념에 대한 전반적인 이해를 원하지 않아요, 더 공부하고 싶어요. 그래서 HTML, CSS, JS부터 시작해야 했어요. 그것에 만족하게 되면, 인공지능을 위해 Python에 투자하고, VR을 위해 Swift에 투자할 거예요.\n\n## 프로젝트\n\n<div class=\"content-ad\"></div>\n\n약 30대에 결혼하는 사람들이 많고, 결혼식에서 가장 이슈가 되는 부분 중 하나는 플랜 테이블입니다. 저는 결혼 계획 앱을 개발했어요.\n\n먼저, 어떻게 작동해야 하는지에 대한 몇 가지 명세를 작성했어요:\n\n- 사용자는 각 손님의 이름, 나이, 직업, 취미를 작성해야 합니다\n- 각 손님에 대해 관계를 세 가지 카테고리로 지정해야 합니다: 분할을 피하기 위해 부족할 수 없는 관계, 친구들이 같은 테이블에 앉을 가능성을 최대화하기 위해 좋아하는 관계, 충돌하는 사람들이 같은 테이블에 앉지 않도록 피해야 하는 관계.\n- 사용자는 몇 개의 테이블이 있고 각 테이블당 몇 개의 의자가 있는지 결정해야 합니다\n- \"플랜 테이블 생성\"을 클릭하면 관계가 지정된 것을 고려하여 목록이 무작위로 생성됩니다.\n\n저는 Figma에 스케치한 것이 있어요. 이번에는 개발자로서 최소한의 작업을 하기로 결정하여 단순한 지구를 만들어 구조를 염두에 두기로 했어요.\n\n<div class=\"content-ad\"></div>\n\n나는 나의 코딩 여정을 시작했다. 먼저, codédex.com의 무료 튜토리얼을 하루 동안 따르기로 했다. 이 사이트는 레트로 UI가 매우 재미있는 웹사이트다. 내가 곧 더 고급 부분의 튜토리얼을 따르기 위해 매달 6달러를 지불할 것을 알고 있다.\n\nVisual Studio를 다운로드하고 html 파일을 시작했다. HTML은 그리 어렵지 않다. '를 빼먹으면 열심히 한 디자인도 망칠 수 있다. Visual Studio는 초보자가 따라가는 데 도움이 되는 작은 힌트가 가득하다.\n\n내 첫 번째 문제는 div 컨테이너에서 요소들을 정렬하는 데서 생겼다. 그리 복잡하지 않을 것 같지만, 초보자는 가로 정렬 코드를 작성하기 위한 구문을 짐작하거나 새롭게 창의적으로 할 수 없다. 내 해결책은 ChatGPT 4.0에 도움을 요청하는 것이었다. 인공지능과 대화하는 것은 까다로울 수 있다. 모든 것을 과하게 설명하고 너무 많은 세부사항을 제공하기 때문이다. 그러나 그 역할을 \"20년간 HTML, CSS 및 JS 전문가인 코딩 교수\"로 정의하고 전체 문서를 다시 작성하는 대신 필요한 코드 줄만 필요하다고 말하니 잘 작동했다.\n\n<div class=\"content-ad\"></div>\n\n한 단계씩 나의 원하는 것을 설명했다. 생성된 IA 코드를 분석하고 설명을 요청했다. JS 부분에 도달했을 때, 처음부터 다시 시작하기로 결정했다. 모든 작업을 인공지능이 대신 하는 것은 좋지만, 학습과 정보 보존에 영향을 미친다.\n\n도움 없이 HTML을 다시 썼고, CSS는 ChatGPT 확인을 받으며 다시 썼으며, JS는 IA의 도움을 받았지만, 무엇이 실행되었는지 재현하는 학습에 집중했다. 내가 ID를 기준으로 요소에 초점을 맞추고, 이벤트를 듣고 함수를 시작하도록 하는 스크립트의 시작 부분을 자신 있게 작성할 수 있다.\n\n내가 작업하는 방법에서 두 가지 주요 문제를 발견했다:\n\n- 프로젝트를 혼자서 관리하기 위해 3개의 언어를 배워야 한다는 것이다. 그리 많지 않지만, 잘못된 구문을 사용함으로써 실수를 범하기가 매우 쉽다.\n- 두 번째로, 시스템을 어떻게 관리해야 할지 몰랐다. 이 프로젝트는 사실상 아무것도 아니다. 폼과 두 개의 목록이다. 그럼에도 CSS를 사용하여 다양한 구성 요소의 ID를 기억할 수 없어서 이를 수정하거나 JS를 호출하는 방법을 모르겠다.\n\n<div class=\"content-ad\"></div>\n\n\n![Image](/assets/img/2024-06-20-IcodedawebappasaUXdesigner_3.png)\n\n## 결국...\n\n너무 야 ambicio했어요. 너무 많은 기능들을 원했어요, 특히 관계 부분이요. 코딩하는 것은 그리 어렵지 않을 것이지만, 이 프로젝트의 목표는 코딩의 최소를 배우는 것이었어요. 나는 손님 목록을 기반으로 무작위 테이블을 생성하는 MVP에 집중했어요. 여기 결과입니다:\n\n![결과](https://miro.medium.com/v2/resize:fit:1200/1*dSoEhPKNX2q2mRCwdeCVlA.gif)\n\n\n<div class=\"content-ad\"></div>\n\nFigma에 제 마음대로 디자인하고 동적으로 만드는 데는 작은 오후가 걸렸을 것 같아요. UI가 없는 반작동 MVP를 3일동안 만들었어요. 이제야 이해가 가네요. 이제부터는 MVP를 디자인하고, 개발자들에게 천천히 발전하는 과정을 보여주며 새로운 기능을 추가할 계획이에요. \n\n코딩은 그리 안 어렵지 않았어요. 새 코드 한 줄마다 그래픽적인 영향을 바로 볼 수 있도록 VisualStudio에서 라이브 서버 플러그인을 사용했기 때문에 즐거웠어요. HTML/CSS에서 상자의 논리는 Figma의 자동 레이아웃과 유사해요. \n\n다음 단계는 이 프로젝트를 완료하고, 아마 Gumroad에서 공개할지도 몰라요. 다음 실험은 머릿속에 있는 VR 기기를 모델링하는 Blender일 겁니다. 재미있게 배울 것이 너무 많아요. \n\n---\n본문이 이전과 다른 이유로 이것을 덧붙이고 있습니다. 처음부터 다시 번역하거나 수정이 필요하신 경우 말씀해주세요.\n\n<div class=\"content-ad\"></div>\n\n다음 이야기를 받아보고 싶다면, 구독하고 좋아요 버튼을 눌러주시면 저를 응원해주는 거에요 :)","ogImage":{"url":"/assets/img/2024-06-20-IcodedawebappasaUXdesigner_0.png"},"coverImage":"/assets/img/2024-06-20-IcodedawebappasaUXdesigner_0.png","tag":["Tech"],"readingTime":5},{"title":"ReactJs를 사용한 테이블 페이지네이션 구현하기 간단한 안내","description":"","date":"2024-06-20 00:59","slug":"2024-06-20-ImplementingTablePaginationwithReactJsASimpleGuide","content":"\n\n<img src=\"/assets/img/2024-06-20-ImplementingTablePaginationwithReactJsASimpleGuide_0.png\" />\n\n안녕하세요!\n\n개발자로서 모두가 여행 중에 이러한 시나리오를 만난 적이 있을 거에요. 오랜 데이터가 있고 웹 페이지에 표시할 공간이 제한되어 있거나 표시해도 UI가 약간 느립니다. 그래서, 우리는 이 상황을 다루기 위해 Pagination이라는 기술을 사용합니다.\n\nPagination이란 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n대부분의 UI 프레임워크에서는 테이블과 페이지네이션 기능을 제공하며, 이 포스트에서는 우리만의 방법으로 구현해보고 있습니다. 또한 페이지네이션은 기계 코딩 면접에서 자주 묻는 질문 중 하나입니다.\n\n요구 사항: React 및 CSS의 기본 지식\n\n그러니 이 데모를 만들어 봅시다! (이 GIF에서는 마우스 클릭이 보이지 않습니다)\n\n![데모](https://miro.medium.com/v2/resize:fit:1200/0*EkEwLTBUF_iIa5nL.gif)\n\n<div class=\"content-ad\"></div>\n\n1. 에디터를 열고 터미널에서 아래 명령을 사용하여 'pagination-demo' 라는 리액트 앱을 생성하세요.\n\n```js\nnpx create-react-app pagination-demo\n```\n\n2. 폴더 구조에서 불필요한 파일을 모두 제거하고 메인 파일인 App.jsx만 남도록 하세요.\n\n3. components라는 폴더를 만들고 그 안에 Demo.jsx, Table.jsx 및 Demo.css 파일을 각각 생성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n우리는 표를 다른 구성 요소로 분리했습니다.\n\n우리의 데모에서는 https://jsonplaceholder.typicode.com/todos 와 같이 알려진 가짜 REST API에서 데이터를 가져올 것입니다. 해당 API는 길이가 200인 객체 배열을 반환할 것입니다.\n\n- Demo.css\n\n```js\n#container {\n  display: flex;\n  flex-direction: column;\n  width: 900px;\n  align-items: flex-end;\n  gap: 1rem;\n  margin-top: 3rem;\n  margin-left: 5rem;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n\ncss\ntable {\n  border: 1px solid black;\n  width: 100%;\n}\ntable tr td {\n  max-width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n}\ntd,\nth {\n  padding: 5px;\n  border: 1px solid black;\n  text-align: center;\n}\ntd:nth-child(2) {\n  width: 70% !important;\n}\n#page-no-dropdown {\n  width: fit-content;\n  border: 1px solid black;\n  padding: 2px;\n}\nselect:focus-visible {\n  outline: none;\n  border: none;\n}\nbutton {\n  border: 1px solid black;\n  padding: 2px;\n}\n\n\n2. Table.jsx\n\n이 컴포넌트에서는 부모 컴포넌트로부터 dataToDisplay를 받아옵니다.\n\n테이블 헤더에는 (userId)를 제외한 3가지 헤더 값을 표시합니다. (포함하려면 포함할 수 있습니다). 테이블 본문에는 해당 값들을 표시합니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\r\nexport default function Table({ dataToDisplay }) {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {Object.keys(dataToDisplay[0]).map((key) => {\r\n            if (key != \"userId\") return <th key={key}>{key.toUpperCase()}</th>;\r\n          })}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {dataToDisplay.map((obj) => {\r\n          return (\r\n            <tr key={obj.id}>\r\n              <td>{obj.id}</td>\r\n              <td>{obj.title}</td>\r\n              <td>{obj.completed.toString()}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n```\r\n\r\n3. Demo.jsx.\r\n\r\n- 이 컴포넌트에서는 두 개의 버튼을 포함하고 있습니다. 한 버튼은 다음 페이지로 이동하고 다른 하나는 이전 페이지로 이동합니다. 또한 특정 페이지로 이동할 수 있는 셀렉트 드롭다운을 만들었습니다.\r\n- 앞서 말했듯이 API에서 데이터를 가져올 것이기 때문에 useEffect()에서 해당 호출을 수행했으며 모든 값은 setData()를 사용하여 data 변수에 저장됩니다.\r\n- 또한 페이지당 10개의 값만 표시할 것이기 때문에 응답 배열을 0부터 10까지 슬라이스하여 dataToDisplay 변수가 길이가 10인 배열을 가지게 합니다.\r\n\r\n```js\r\nconst [data, setData] = useState([]);\r\nconst [currentPageNumber, setCurrentPageNumber] = useState(1);\r\nconst [dataToDisplay, setDataToDisplay] = useState([]);\r\nconst TOTAL_VALUES_PER_PAGE = 10;\r\n``` \n\n<div class=\"content-ad\"></div>\n\n```js\nuseEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/todos\")\n      .then((response) => response.json())\n      .then((res) => {\n        setData(res);\n        setDataToDisplay(res.slice(0, TOTAL_VALUES_PER_PAGE));\n      });\n  }, []);\n```\n\n- 여기에는 총 3개의 함수가 있어요 = `goOnPrevPage(), goOnNextPage(), handleSelectChange()\n\n```js\nconst goOnPrevPage = () => {\n    if (currentPageNumber === 1) return;\n    setCurrentPageNumber((prev) => prev - 1);\n  };\n```\n\n```js\n  const goOnNextPage = () => {\n    if (currentPageNumber === data.length / TOTAL_VALUES_PER_PAGE) return;\n    setCurrentPageNumber((prev) => prev + 1);\n  };\n  const handleSelectChange = (e) => {\n    setCurrentPageNumber(e.target.value);\n  };\n```  \n\n<div class=\"content-ad\"></div>\n\n여기에 또 다른 useEffect가 있어요. currentPageNumber가 의존성으로 설정되어 있어서 페이지 번호가 변경될 때마다 이 블록이 실행되고 데이터 배열을 잘라내어 dataToDisplay를 업데이트할 거예요.\n\n```js\nuseEffect(() => {\n    const start = (currentPageNumber - 1) * TOTAL_VALUES_PER_PAGE;\n    const end = currentPageNumber * TOTAL_VALUES_PER_PAGE;\n    setDataToDisplay(data.slice(start, end));\n  }, [currentPageNumber]);\n```\n\n그리고 마지막으로 렌더링될 UI 코드가 있어요. 여기서 데이터가 가져오는 중이면 '로딩 중...'을 보여주는 조건이 추가되어 있어요.\n\n```js\nif (data.length == 0) return <div>Loading...</div>;\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n  return (\n    <div id=\"container\">\n      <div id=\"page-no-dropdown\">\n        <select\n          name=\"page-number\"\n          onChange={handleSelectChange}\n          value={currentPageNumber}\n        >\n          {Array.from(Array(data.length / TOTAL_VALUES_PER_PAGE))\n            .map((e, i) => i + 1)\n            .map((val) => {\n              return <option key={val}>{val}</option>;\n            })}\n        </select>\n      </div>\n      <Table dataToDisplay={dataToDisplay} />\n      <div id=\"btn-container\">\n        <button onClick={goOnPrevPage}>Prev</button>\n        <button onClick={goOnNextPage}>Next</button>\n      </div>\n    </div>\n  );\n```\n\n```js\n{Array.from(Array(data.length / TOTAL_VALUES_PER_PAGE))\n      .map((e, i) => i + 1)\n       .map((val) => {\n    return <option key={val}>{val}</option>;\n})}\n```\n\n이 블록은 데이터가 페이지로 나뉘어진 개수만큼 1부터 페이지 번호까지의 배열을 생성합니다.\n\n데모에서 데이터 길이가 200이고 페이지 당 10개의 행을 표시하므로, totalPages = 200/10이므로 20이 됩니다. 따라서 [1,2,3……20]과 같은 배열이 생성되며, 이를 매핑하여 선택 드롭다운의 옵션을 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n위의 코드를 Markdown 형식으로 변경한 것입니다!\n\n```js\nimport React, { useEffect, useState } from \"react\";\nimport Table from \"./Table\";\nimport \"./table.css\";\n```\n\n```js\nexport default function HomeDashboard() {\n  const [data, setData] = useState([]);\n  const [currentPageNumber, setCurrentPageNumber] = useState(1);\n  const [dataToDisplay, setDataToDisplay] = useState([]);\n  const TOTAL_VALUES_PER_PAGE = 10;\n  const goOnPrevPage = () => {\n    if (currentPageNumber === 1) return;\n    setCurrentPageNumber((prev) => prev - 1);\n  };\n  const goOnNextPage = () => {\n    if (currentPageNumber === data.length / TOTAL_VALUES_PER_PAGE) return;\n    setCurrentPageNumber((prev) => prev + 1);\n  };\n  const handleSelectChange = (e) => {\n    setCurrentPageNumber(e.target.value);\n  };\n  useEffect(() => {\n    const start = (currentPageNumber - 1) * TOTAL_VALUES_PER_PAGE;\n    const end = currentPageNumber * TOTAL_VALUES_PER_PAGE;\n    setDataToDisplay(data.slice(start, end));\n  }, [currentPageNumber]);\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/todos\")\n      .then((response) => response.json())\n      .then((res) => {\n        setData(res);\n        setDataToDisplay(res.slice(0, TOTAL_VALUES_PER_PAGE));\n      });\n  }, []);\n  if (data.length == 0) return <div>Loading...</div>;\n  return (\n    <div id=\"container\">\n      <div id=\"page-no-dropdown\">\n        <select\n          name=\"page-number\"\n          onChange={handleSelectChange}\n          value={currentPageNumber}\n        >\n          {Array.from(Array(data.length / TOTAL_VALUES_PER_PAGE))\n            .map((e, i) => i + 1)\n            .map((val) => {\n              return <option key={val}>{val}</option>;\n            })}\n        </select>\n      </div>\n      <Table dataToDisplay={dataToDisplay} />\n      <div id=\"btn-container\">\n        <button onClick={goOnPrevPage}>Prev</button>\n        <button onClick={goOnNextPage}>Next</button>\n      </div>\n    </div>\n  );\n}\n```\n\n즐겁게 코딩하고 계속 배워 나가세요!!\n\n<div class=\"content-ad\"></div>\n\n읽어 주셔서 감사합니다! 좋아요와 댓글 부탁드려요...","ogImage":{"url":"/assets/img/2024-06-20-ImplementingTablePaginationwithReactJsASimpleGuide_0.png"},"coverImage":"/assets/img/2024-06-20-ImplementingTablePaginationwithReactJsASimpleGuide_0.png","tag":["Tech"],"readingTime":8},{"title":"CSS에서는 박스 모델이 없습니다 - 그래서 테두리가 좋지 않은 이유","description":"","date":"2024-06-20 00:58","slug":"2024-06-20-ThereisnoboxmodelinCSSandthisiswhybordersareterrible","content":"\n\n## 자바스크립트UI — 개발 블로그 #7\n\n“이제 좀, 너무하지 마. 모두가 박스 모델이 CSS의 기반이라는 것을 알아. 넌 대체 뭘 얘기하고 있어?”\n\n음, 그런 식으로 말하기는 싫지만, 이건 박스야:\n\n![box](/assets/img/2024-06-20-ThereisnoboxmodelinCSSandthisiswhybordersareterrible_0.png)\n\n<div class=\"content-ad\"></div>\n\n그리고 이것이 사각형입니다:\n\n![Rectangle](/assets/img/2024-06-20-ThereisnoboxmodelinCSSandthisiswhybordersareterrible_1.png)\n\n음, 사실은 여러 개의 직사각형이지만, 확실히 상자는 아닙니다. \"사각형 모델\"이라고 부르면 그렇게 멋있어 보이진 않겠지만, 정말로 일을 훨씬 쉽게 만들어줄 거에요.\n\n사실, 더 자세히 살펴보면 상자와 사각형 사이에 뚜렷한 차이를 느낄 수 있을 거에요: 하나는 3차원이고 다른 하나는 완전히 평면입니다. 무언가를 \"상자\"라고 부르면 사람들은 자연스럽게 3차원적인 것을 기대할 테지만, CSS는 모든 것을 2차원으로 평평하게 만들려고 최선을 다합니다.\n\n<div class=\"content-ad\"></div>\n\n이 불일치로 웹 레이아웃과 사용자 인터페이스를 구축하는 데 심각한 결과가 발생했습니다. 이 중 하나는 CSS에서 적절한 테두리를 적용할 수 없는 것입니다. 이것은 테두리가 문서 내로 펼쳐지기 때문입니다. 이것만으로도 CSS \"박스\" 모델이 근본적으로 깨진 이유를 보여줍니다.\n\n이유를 살펴보겠습니다.\n\n## 셋 중에서 하나\n\nCSS \"박스\" 모델의 핵심에는 세 가지 개념이 있습니다: 마진 \"박스\", 테두리 \"박스\" 및 패딩 \"박스\"가 있습니다. 간단해 보이죠? 그렇지만, CSS에서 테두리는 항상 레이아웃의 일부인데 실제로는 그렇지 않아야 합니다. 이것이 두 가지 중요한 문제를 일으킵니다:\n\n<div class=\"content-ad\"></div>\n\n- 어떤 요소의 크기가 애매해집니다\n- 테두리의 너비가 변경될 때마다 레이아웃이 바뀌게 됩니다.\n\n첫 번째 문제를 해결하기 위해 CSS에서는 box-sizing 속성을 소개했습니다. 이 속성을 border-box로 설정하면 요소의 크기에 테두리의 너비가 포함되고 content-box로 설정하면 포함되지 않습니다. 문제 해결되었죠, 맞나요?\n\n다시 한 번 틀렸습니다. 아마도 제가 깐깐한 편이겠지만, 이 모델에서 content-box란 존재하지 않습니다. 여기에는 margin \"상자\", border \"상자\", 그리고 padding \"상자\"가 있습니다. padding \"상자\"가 이미 우리가 원하는 것(테두리는 제외하고 padding은 포함하는 크기)을 전달하고 있기 때문에, 왜 이것을 content-box라고 부르는지 정말 이해가 안 가요. 오히려, 직관적으로는 이것이 padding \"상자\" 안의 영역(네 번째 \"상자\")일 것이라고 생각할 텐데요.\n\n그래도 두 번째 문제가 남아있습니다: 레이아웃이 바뀌는 문제입니다. box-sizing에 관계없이 레이아웃이 계속 바뀝니다. 그저 \"상자\" 내부의 모든 것을 엉망으로 만들 지, 바깥쪽 모든 것을 엉망으로 만들 지를 선택할 수 있을 뿐입니다. 버튼에 호버 효과를 추가할 때 테두리를 넣어보는 단순한 예제를 살펴보세요:\n\n<div class=\"content-ad\"></div>\n\n\n![Image](https://miro.medium.com/v2/resize:fit:1400/1*ayv0dXb1OsnY0qv6EaxxUQ.gif)\n\n아래는 이를 달성하는 코드입니다.:\n\n```js\nStack(\n    Button(`Border \"box\"`)\n        .css(\"box-sizing\", \"border-box\")\n        .width(150)\n        .height(50)\n        .cornerRadius(25)\n        .css(\"text-align\", \"center\") //수평 정렬\n        .css(\"line-height\", \"50px\") //수직 정렬 요령\n        .backgroundColor(\"#027FFC\")\n        .onMouseOver(self => self.border(\"2px solid black\"))\n        .onMouseOut(self => self.border(\"none\")),\n        \n    Button(`Content \"box\"`)\n        .css(\"box-sizing\", \"content-box\")\n        .width(150)\n        .height(50)\n        .cornerRadius(25)\n        .css(\"text-align\", \"center\") //수평 정렬\n        .css(\"line-height\", \"50px\") //수직 정렬 요령\n        .backgroundColor(\"#027FFC\")\n        .onMouseOver(self => self.border(\"2px solid black\"))\n        .onMouseOut(self => self.border(\"none\"))\n)\n    .width(680)\n    .height(500)\n    .gapX(20)\n    .css(\"justify-content\", \"center\") //수평 정렬\n    .css(\"align-items\", \"center\"); //수직 정렬\n```\n\n이는 일반적이고 상대적으로 간단한 레이아웃 상황입니다: 동일한 크기의 두 버튼을 만들어 호버 시 2px 폭의 검은 실선 테두리를 추가합니다. border-box를 사용하면 버튼 내부의 레이아웃이 깨지고 content-box를 사용하면 주변에 레이아웃이 깨집니다. 이보다 더 기본적인 예제를 찾기 어려울 것이며, 심지어 여기서도 \"box\" 모델이 완전히 붕괴됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n이 문제는 단순한 픽셀 조정이라고 속시원하게 말할 수 있지만, 시각 장애나 인지 장애를 가진 사람들에게는 중요한 접근성 문제입니다. 그리고 어떤 요소에도 동적으로 테두리를 설정할 때 이 문제가 널리 발생합니다.\n\n## 꿍꿍이, 해킹, 하지만 진짜 해결책은 없다\n\n불행히도, 이 문제에 대한 좋은 해결책은 없습니다. 도리어 크리에이티브한 꿍꿍이와 비겁한 해킹이 많이 있지만, 이러한 해결책들은 심각한 단점 없이는 작동하지 않습니다:\n\n- 배경과 동일한 스타일링을 사용하는 유휴 상태의 플레이스홀더 테두리를 추가하고 테두리의 존재 여부를 토글하는 대신 이러한 스타일을 모두 테두리에 적용: 이 방법은 우리 코드의 의미적 성격을 파괴하며 단일 테두리 속성 대신 여러 값을 변경해야 하며 배경의 스타일 복잡성이 증가할수록(투명도, 백드롭 필터, 유휴 및 호버 상태 이상) 점점 복잡해집니다. 또한 CSS로 가운데 테두리를 구현할 수 없습니다 (이 후에 이에 대해 언급할 것이고) (또한 CSS로 가운데 정렬은 왜 거의 어디서나 끔찍한가요?)\n- 패딩을 사용하여 유휴 테두리를 가짜로 만들기: 이 또한 의미론적으로 적합하지 않고, 단일 테두리 속성 대신 여러 값을 토글해야 하며 가운데 \"테두리\"가 없습니다 (내부 또는 외부만 가능)\n- 아웃라인을 사용하여 테두리를 가짜로 만들기: 다시한번 의미론적 해결책이 아닌 다른 도구를 사용하며 이미 목적이 있고, 코드가 혼란스럽게 만들어지며 가운데 \"테두리\"가 없습니다 (내부 또는 외부만 가능)\n- 드롭 섀도우를 사용하여 테두리를 가짜로 만들기: 동일한 문제가 있으며, 의미론적이 아니며, 목적이 다르며, 깔끔하지 않으며, 가운데 \"테두리\"가 없습니다 (내부 또는 외부만 가능)\n- 일반 요소나 svg 사각형을 기존 요소 위에 추가하여 테두리 역할을 하는 요소로 사용: 의미론적이 아니며, 스타일링뿐만 아니라 뷰 트리(html 계층 구조)를 불필요하게 늘려주며 (예: 둥근 모서리?), CSS에서 요소를 겹치는 것은 일반적으로 고통스럽지만 적어도 가운데 정렬할 수 있습니다 (내부 또는 외부만 가능)\n- 명시적인 대신 상대적인 크기 사용: 두 개 이상의 버튼 너비를 일치시킬 수 없으며, 항상 콘텐츠 상자처럼 동작하기 때문에 모든 것이 외부로 커져 (버튼 내의 레이아웃 변화하는 문제를 포함시킬 수 없게됩니다), 여전히 가운데 테두리가 없습니다. (외부만 가능)\n\n<div class=\"content-ad\"></div>\n\n무엇을 시도해도 \"해결책\"은 추해고 부자연스럽며 번거로울 것입니다. 이렇게 쉬운 것조차도 이렇게 불행스러울 때, 우리는 어떻게 효율적으로 가치 있는 것을 구축할 것을 기대할 수 있을까요? 그리고 이것이 CSS의 핵심입니다는 것을 염두에 두세요.\n\n## 개요\n\n우리는 실제로 직사각형 모델인 상자 모델이 있고, 실제로는 패딩 상자인 content-box가 있습니다. 레이아웃을 망치치 않고 테두리를 추가할 수 없습니다. 우리는 배경 스타일과 일치하는 placeholder 테두리를 사용하도록 강요당하며, 이 기본적인 문제를 해결하기 위해 패딩, 외곽선 또는 그림자를 사용하여 가짜 테두리를 추가하거나 다른 겹치는 요소를 사용해야 합니다. 그럼에도 불구하고, 여전히 중앙에 테두리를 넣을 수 없습니다. 붕출(outset) 또는 삽입(inset)만 가능합니다. 그리고 CSS가 가파른 학습 곡선을 갖는 이유에 궁금해할 수도 있습니다.\n\n## 다른 차원에서 참된 해결책\n\n<div class=\"content-ad\"></div>\n\n기본 CSS \"박스\" 모델이 그렇게 나쁘다면 올바른 접근 방식은 무엇인가요?\n\n쉬워요: \"박스\" 모델에서 테두리를 제거하고 우리 요소 위에 배치하세요. 테두리를 내용, 여백 및 안쪽 여백과 함께 같은 평면으로 펴야 할 필요는 전혀 없어요. 우리는 단순히 세 번째 차원을 활용해야 해요. 정상적인 시각 디자인 소프트웨어가 동작하는 방식처럼요:\n\n![이미지1](/assets/img/2024-06-20-ThereisnoboxmodelinCSSandthisiswhybordersareterrible_2.png)\n\n![이미지2](/assets/img/2024-06-20-ThereisnoboxmodelinCSSandthisiswhybordersareterrible_3.png)\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-20-ThereisnoboxmodelinCSSandthisiswhybordersareterrible_4.png)\n\n이 모델에서는 테두리(border)를 inset/inside 또는 outset/outside로 설정해도 실제 내용 위에 다른 레이어로 렌더링됩니다. 테두리는 레이아웃에 영향을 미치지 않아야 합니다.\n\n## 결과\n\n이 접근 방식을 사용하면 단일하고 명확한 요소 크기를 얻을 수 있으며, 레이아웃에 영향을 주지 않고 테두리를 어떤 방식으로든 변경할 수 있습니다. 심지어 테두리를 제대로 정렬할 수도 있습니다. 갑자기 모든 해킹, box-sizing 및 content-box와 같은 불필요한 개념이 완전히 워크플로우에서 제거되고 이제 Box Model이라는 이름도 약간 더 의미를 갖게 됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n하지만 이 모든 것 위에 엄청난 추가 혜택이 하나 더 있는데, 이제 디자인 (특히 그래픽 디자인) 및 웹 개발팀이 같은 언어를 구사할 수 있다는 것입니다. 마찰도 없고 번복도 없습니다. 웹이 다른 모든 것과 마찬가지로 작동하는 것이다. 항상 모든 가능한 방법을 다시 창조하는 것이 아닌 것이다.\n\n![image](/assets/img/2024-06-20-ThereisnoboxmodelinCSSandthisiswhybordersareterrible_5.png)\n\n## 결론\n\nCSS \"박스\" 모델이라는 용어는 3차원으로 작업할 수 있다는 것을 시사하는 것이 틀림없고 오해를 불러일으킨다. 실제로, 심지어 겹치는 테두리를 구현하는 것조차 거의 불가능하다. 모든 가능한 해결책은 매우 제한적이며 문제를 더 많이 일으키는 경우가 훨씬 많다. 웹 레이아웃에서 테두리를 제거하면 레이아웃 자체뿐만 아니라 작업하기가 훨씬 편리해지며 그래픽 디자인과 웹 개발 간의 간격을 줄일 수 있습니다. 불행히도, JavaScriptUI에서 수용할만한 해결책을 찾지 못했지만, 해결책이 떠오르면 댓글 섹션에서 공유해주세요.\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경하세요.","ogImage":{"url":"/assets/img/2024-06-20-ThereisnoboxmodelinCSSandthisiswhybordersareterrible_0.png"},"coverImage":"/assets/img/2024-06-20-ThereisnoboxmodelinCSSandthisiswhybordersareterrible_0.png","tag":["Tech"],"readingTime":7},{"title":"30가지 알아 두면 좋은 HTML 태그","description":"","date":"2024-06-20 00:56","slug":"2024-06-20-30HTMLTagsToKnow","content":"\n\nHTML 세계에 오신 것을 환영합니다! 웹 개발자로서, 웹페이지의 기본 구축 블록을 이해하는 것은 매우 중요합니다. HTML 태그는 웹사이트에 구조, 상호작용 및 시각적 매력을 추가하는 비밀 레시피입니다. 이 블로그에서는 HTML의 세계로 뛰어들어 모든 새로운 웹 개발자가 익히어야 할 30가지 필수 태그를 탐험할 것입니다. HTML 스킬을 향상시키고 매혹적인 웹 경험을 만들기 위한 끝없는 가능성을 찾아나가보세요!\n\n![Image](/assets/img/2024-06-20-30HTMLTagsToKnow_0.png)\n\n## 1. `head` 태그:\n\n`head` 태그는 HTML 문서의 헤드 섹션을 정의하는 데 사용됩니다. 문서에 대한 메타 정보를 포함하며 제목, 스크립트, 스타일 시트 및 기타 중요한 데이터를 포함합니다. 예시:\n\n<div class=\"content-ad\"></div>\n\n\n# 2. `title` 태그:\n\n`title` 태그는 HTML 문서의 제목을 정의하는 데 사용됩니다. 브라우저의 제목 표시줄이나 탭에 표시됩니다. 다음은 예시입니다:\n\n```js\n<head>\n  <title>Welcome to My Website</title>\n</head>\n```\n\n<div class=\"content-ad\"></div>\n\n# 3. `body` 태그:\n\n`body` 태그는 HTML 문서의 본문 콘텐츠를 정의하는 데 사용됩니다. 웹 페이지에 나타나는 모든 가시적 콘텐츠를 포함합니다. 아래는 예시입니다:\n\n```js\n<body>\n  <h1>Welcome to My Website</h1>\n  <p>This is the main content of the webpage.</p>\n</body>\n```\n\n# 4. `a` 태그 (링크 태그):\n\n<div class=\"content-ad\"></div>\n\n웹페이지에서 클릭할 수 있는 링크를 생성하는 `a` 태그입니다. 이 태그는 다른 웹페이지, 파일, 이메일 주소 또는 문서의 특정 부분에 링크를 걸 때 사용됩니다. 예시는 다음과 같습니다:\n\n```js\n<a href=\"https://google.com\">Visit Google</a>\n```\n\n# 5. 헤딩 태그:\n\n헤딩 태그 (`h1`부터 `h6`까지)는 HTML 문서에서 제목을 만드는 데 사용됩니다. 이 태그들은 다른 수준의 제목을 나타내며, `h1`이 가장 높고, `h6`이 가장 낮은 수준의 제목을 나타냅니다. 예시는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n\n# 6. `p` Tag (Paragraph Tag):\n\nThe `p` tag is used to define paragraphs in HTML. It represents a block of text or content. Here’s an example:\n\n\n<p>This is a paragraph of text.</p>\n\n\n<div class=\"content-ad\"></div>\n\n# 7. `img` Tag (이미지 태그):\n\n`img` 태그는 HTML 문서에 이미지를 삽입하는 데 사용됩니다. 이미지의 경로 또는 URL을 지정하는 \"src\" 속성이 필요합니다. 다음은 예시입니다:\n\n```js\n<img src=\"image.jpg\" alt=\"이미지 설명\">\n```\n\n# 8. `nav` Tag (내비게이션 태그):\n\n<div class=\"content-ad\"></div>\n\n`nav` 태그는 HTML에서 네비게이션 바 또는 메뉴를 만드는 데 사용됩니다. 일반적으로 웹 사이트를 탐색하는 데 사용되는 링크 목록을 포함합니다. 아래는 예시입니다:\n\n```js\n<nav>\n  <ul>\n    <li><a href=\"home.html\">Home</a></li>\n    <li><a href=\"about.html\">About</a></li>\n    <li><a href=\"contact.html\">Contact</a></li>\n  </ul>\n</nav>\n```\n\n# 9. `li` 태그 (리스트 아이템 태그):\n\n`li` 태그는 HTML에서 리스트 항목을 만드는 데 사용됩니다. 보통 `ul` (정렬되지 않은 목록)이나 `ol` (순서가 지정된 목록) 태그 내에서 사용됩니다. 아래는 예시입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<ul>\n  <li>항목 1</li>\n  <li>항목 2</li>\n  <li>항목 3</li>\n</ul>\n```\n\n# 10. `table` 태그 (테이블 태그):\n\n`table` 태그는 HTML에서 테이블을 정의하는데 사용됩니다. 데이터를 행과 열로 구성할 수 있습니다. 다음은 예시입니다:\n\n```js\n<table>\n  <tr>\n    <th>헤더 1</th>\n    <th>헤더 2</th>\n  </tr>\n  <tr>\n    <td>데이터 1</td>\n    <td>데이터 2</td>\n  </tr>\n</table>\n```\n\n<div class=\"content-ad\"></div>\n\n# 11. `ol` 및 `ul` 태그:\n\n`ol` 태그는 HTML에서 순서가 지정된 목록을 만드는 데 사용되고, `ul` 태그는 순서가 지정되지 않은 목록을 만드는 데 사용됩니다. 예시입니다:\n\n```js\n<ul>\n  <li>항목 1</li>\n  <li>항목 2</li>\n  <li>항목 3</li>\n</ul>\n```\n\n```js\n<ol>\n  <li>항목 1</li>\n  <li>항목 2</li>\n  <li>항목 3</li>\n</ol>\n```\n\n<div class=\"content-ad\"></div>\n\n# 12. `button` 태그 (버튼 태그):\n\n`button` 태그는 HTML에서 버튼을 만드는 데 사용됩니다. 이를 사용하여 작업을 트리거하거나 특정 기능을 수행할 수 있습니다. 다음은 예시입니다:\n\n```js\n<button>Click Me</button>\n```\n\n# 13. `main` 태그 (메인 태그):\n\n<div class=\"content-ad\"></div>\n\n`main` 태그는 HTML 문서의 주요 섹션을 만드는 데 사용됩니다. 주요 콘텐츠 영역을 나타냅니다. 예시는 다음과 같습니다:\n\n```js\n<main>\n  <h1>Welcome to My Website</h1>\n  <p>This is the main content of the webpage.</p>\n</main>\n```\n\n# 14. `div` 태그 (Div 태그):\n\n`div` 태그는 HTML 문서 내에서 구획이나 섹션을 만드는 데 사용됩니다. 콘텐츠를 그룹화하고 스타일링하는 일반적인 컨테이너입니다. 예시는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<div>\n  <h2>Section Title</h2>\n  <p>This is the content of the section.</p>\n</div>\n```\n\n# 15. `footer` Tag (Footer Tag):\n\n`footer` 태그는 HTML 문서의 하단 영역을 정의하는 데 사용됩니다. 일반적으로 저자 정보, 저작권 또는 연락처 정보를 포함합니다. 다음은 예시입니다:\n\n```js\n<footer>\n  <p>&copy; 2023 My Website. All rights reserved.</p>\n</footer>\n```\n\n<div class=\"content-ad\"></div>\n\n# 16. `section` Tag (Section Tag):\n\n`section` 태그는 HTML 문서 내에서 섹션 또는 독립적인 콘텐츠 블록을 정의하는 데 사용됩니다. 이는 콘텐츠를 구성하고 구조화하는 데 도움이 됩니다. 아래는 예시입니다:\n\n```js\n<section>\n  <h2>About Me</h2>\n  <p>I am a web developer passionate about creating amazing websites.</p>\n</section>\n```\n\n# 17. `article` Tag (Article Tag):\n\n<div class=\"content-ad\"></div>\n\n`article` 태그는 HTML 문서 내 독립적이고 자체적인 콘텐츠를 정의하는 데 사용됩니다. 이는 웹페이지에서 완전한 구성을 나타냅니다. 예를 들어:\n\n```js\n<article>\n  <h2>블로그 포스트 제목</h2>\n  <p>이것은 블로그 포스트의 내용입니다.</p>\n</article>\n```\n\n# 18. `form` 태그 (폼 태그):\n\n`form` 태그는 HTML에서 폼을 생성하는 데 사용됩니다. 사용자가 데이터를 입력하고 서버로 제출하여 처리할 수 있게 합니다. 다음은 예시입니다:\n\n<div class=\"content-ad\"></div>\n\n\n```js\n<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\">\n  <input type=\"submit\" value=\"Submit\">\n</form>\n```\n\n# 19. `input` Tag (Input Tag):\n\n`input` 태그는 양식 내에서 입력 필드를 만드는 데 사용됩니다. 텍스트, 이메일, 비밀번호 등과 같은 다양한 종류의 사용자 입력에 사용할 수 있습니다. 다음은 예시입니다:\n\n```js\n<input type=\"text\" placeholder=\"당신의 이름을 입력하세요\">\n```\n\n<div class=\"content-ad\"></div>\n\n# 20. `header` Tag (헤더 태그):\n\n`header` 태그는 HTML 문서의 헤더 섹션을 정의하는 데 사용됩니다. 일반적으로 웹사이트 로고, 내비게이션 또는 소개 콘텐츠가 포함됩니다. 예시는 다음과 같습니다:\n\n```js\n<header>\n  <h1>Welcome to My Website</h1>\n</header>\n```\n\n# 21. `strong` Tag (강조 태그):\n\n<div class=\"content-ad\"></div>\n\n‘strong’ 태그는 굵은 글꼴로 표시해야 할 텍스트를 정의하는 데 사용됩니다. 강한 중요성이나 강조를 나타냅니다. 다음은 예제입니다:\n\n```js\n<p>This text is <strong>bold</strong>.</p>\n```\n\n# 22. `span` 태그 (Span Tag):\n\n`span` 태그는 큰 텍스트나 문서 내의 일부 텍스트를 표시하는 데 사용됩니다. 주로 스타일링이나 특정 섹션에 CSS를 적용하는 데 사용됩니다. 다음은 예제입니다:\n\n<div class=\"content-ad\"></div>\n\n\n<p>This is a <span style=\"color: red;\">red</span> text.</p>\r\n\n\r\n# 23. `aside` Tag (Aside Tag):\r\n\r\nThe `aside` tag is used to define content that is tangentially related to the main content, such as sidebars or callouts. Here’s an example:\r\n\r\n\n<aside>\r\n  <h3>Related Links</h3>\r\n  <ul>\r\n    <li><a href=\"link1.html\">Link 1</a></li>\r\n    <li><a href=\"link2.html\">Link 2</a></li>\r\n  </ul>\r\n</aside>\r\n\n\n<div class=\"content-ad\"></div>\n\n# 24. `center` Tag (Center Tag):\n\n`center` 태그는 텍스트나 콘텐츠의 정렬을 웹페이지의 가운데로 설정하는데 사용됩니다. 그러나 이 태그는 폐기됐으며 대신 스타일링을 위해 CSS를 사용해야 합니다. 예시 코드는 다음과 같습니다:\n\n```js\n<center>\n  <h1>가운데 정렬된 텍스트</h1>\n  <p>이 텍스트는 가운데 정렬되었습니다.</p>\n</center>\n```\n\n# 25. `textarea` Tag (Textarea Tag):\n\n<div class=\"content-ad\"></div>\n\n`textarea` 태그는 여러 줄의 텍스트 입력을 허용하는 입력 필드를 정의하는 데 사용됩니다. 일반적으로 댓글, 메시지 또는 사용자 입력의 더 큰 블록에 사용됩니다. 예시를 보여드리겠습니다:\n\n```js\n<textarea rows=\"4\" cols=\"50\">\n여기에 메시지를 입력하세요...\n</textarea>\n```\n\n# 26. `br` 태그 (줄 바꿈 태그):\n\n`br` 태그는 HTML 문서에서 줄 바꿈을 만드는 데 사용됩니다. 자체 닫는 태그이며 닫힌 태그가 필요하지 않습니다. 예시를 보여드리겠습니다:\n\n<div class=\"content-ad\"></div>\n\n\n<p>This is the first line.<br>This is the second line.</p><hr> Tag (Horizontal Rule Tag):\n\n\n# 27. `hr` Tag (Horizontal Rule Tag):\n\n`hr` 태그는 HTML 문서에서 수평선이나 분할자를 만드는 데 사용됩니다. 주로 내용이나 섹션을 시각적으로 분리하는 데 사용됩니다. 예시는 다음과 같습니다:\n\n```js\n<p>This is some content.</p>\n<hr>\n<p>This is some more content.</p>\n```\n\n<div class=\"content-ad\"></div>\n\n# 28. `b` 태그 (굵은 글꼴 태그):\n\n`b` 태그는 굵은 글꼴로 표시해야 하는 텍스트를 정의하는 데 사용됩니다. 그러나 이제는 제외된(deprecated) 태그이며, 의미론적 강조를 위해 `strong` 태그가 선호됩니다. 다음은 예시입니다:\n\n```js\n<p>This text is <b>bold</b>.</p>\n```\n\n# 29. `i` 태그 (이탤릭 태그):\n\n<div class=\"content-ad\"></div>\n\n`i` 태그는 이탤릭체로 표시되어야 하는 텍스트를 정의하는 데 사용됩니다. 이는 스타일적인 강조나 대체 음성을 나타냅니다. 아래는 예시입니다:\n\n```js\n<p>This text is <i>italic</i>.</p>\n```\n\n# 30. `figure` 태그 (Figure 태그):\n\n`figure` 태그는 이미지, 비디오, 일러스트레이션과 그 캡션을 포함한 독립적인 콘텐츠를 그룹화하는 데 사용됩니다. 콘텐츠에 구조와 맥락을 제공하는 데 도움이 됩니다. 아래는 예시입니다:\n\n<div class=\"content-ad\"></div>\n\n\n<figure>\n  <img src=\"image.jpg\" alt=\"이미지 설명\">\n  <figcaption>이미지 캡션</figcaption>\n</figure>\n\n\n# 결론:\n\n축하합니다! 이제 귀하는 뛰어난 웹 콘텐츠를 만들 수 있도록 지원하는 여정에 착수하셨습니다. 이 30가지 HTML 태그를 숙달함으로써 시각적으로 멋진, 구조화된, 상호작용이 가능한 웹 페이지를 구축할 수 있는 도구를 얻었습니다. 계속해서 실험하고, 탐구하고, HTML 기술을 계속 개선하는 것을 잊지 마세요.\n\n웹 개발 여정을 계속하면서, 이 태그에만 그치지 말고 HTML은 더 알아야 할 것이 많은 광활한 세계입니다. 호기심을 갖고 지식에 굶주리고, 학습을 멈추지 마세요.\n\n\n<div class=\"content-ad\"></div>\n\n그럼, 무엇을 기다리고 있나요? HTML로 창의력을 발휘해보세요! 웹은 여러분의 캔버스이며, 가능성은 무한합니다. 코딩을 즐기고 여러분의 웹사이트가 디지털 세계에서 빛나게 하기를 기원합니다!","ogImage":{"url":"/assets/img/2024-06-20-30HTMLTagsToKnow_0.png"},"coverImage":"/assets/img/2024-06-20-30HTMLTagsToKnow_0.png","tag":["Tech"],"readingTime":8},{"title":"결론","description":"","date":"2024-06-20 00:54","slug":"2024-06-20-Conclusion","content":"\n\n## 숨겨진 보석 찾기: 웹 개발 기술 향상을 위한 필수 HTML 태그 5가지\n\nHTML(HyperText Markup Language)은 웹 개발의 기초로 웹 페이지의 구조를 제공합니다. 다양한 HTML 태그 중 일부는 상호 작용 및 사용성을 향상시키는 능력으로 인해 특히 주목할 만합니다. 이 블로그에서는 `dialog`, `map`, `details`, `meter`, 그리고 `progress`라는 다섯 가지 HTML 태그를 탐색해 보겠습니다. 이러한 태그를 이해하면 더 다이내믹하고 사용자 친화적인 웹 페이지를 만들 수 있습니다.\n\n## 1. `dialog` 태그\n\n`dialog` 태그는 대화 상자나 서브 윈도우를 정의하는 데 사용됩니다. 이는 사용자 정의 팝업 대화 상자, 모달 윈도우 및 경고 상자를 만드는 데 특히 유용할 수 있습니다. 이는 div 요소와 CSS를 사용하는 사용자 정의 솔루션과 비교하여 더 의미론적인 HTML을 제공하고 접근성을 향상시킵니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*X4wMS_9WELuOQ66PjKiLtw.gif\" />\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>대화 상자 예제</title>\n</head>\n<body>\n    <button id=\"openDialog\">대화 상자 열기</button>\n    <dialog id=\"myDialog\">\n        <p>이것은 대화 상자입니다!</p>\n        <button id=\"closeDialog\">닫기</button>\n    </dialog>\n\n    <script>\n        const dialog = document.getElementById('myDialog');\n        document.getElementById('openDialog').addEventListener('click', () => {\n            dialog.showModal();\n        });\n        document.getElementById('closeDialog').addEventListener('click', () => {\n            dialog.close();\n        });\n    </script>\n</body>\n</html>\n```\n\n## 2. `map` 태그\n\n`map` 태그는 `area` 태그와 함께 사용되어 이미지와 클릭 가능한 영역을 정의하는 이미지 맵을 만드는데 사용됩니다. 이는 서로 다른 목적지로 연결된 서로 다른 영역이 있는 인터랙티브 이미지를 만드는 데 도움이 될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Image Map Example</title>\n</head>\n<body>\n    <img src=\"example.jpg\" usemap=\"#exampleMap\" alt=\"Example Image\">\n\n    <map name=\"exampleMap\">\n        <area shape=\"rect\" coords=\"34,44,270,350\" href=\"link1.html\" alt=\"Link 1\">\n        <area shape=\"circle\" coords=\"337,300,44\" href=\"link2.html\" alt=\"Link 2\">\n        <area shape=\"poly\" coords=\"100,200,120,210,130,220\" href=\"link3.html\" alt=\"Link 3\">\n    </map>\n</body>\n</html>\n```\n\n## 3. `details` Tag\n\n`details` 태그는 사용자가 추가 콘텐츠를 표시하거나 숨기기 위해 열고 닫을 수 있는 디스클로저 위젯을 만드는 데 사용됩니다. FAQ, 추가 정보 섹션 또는 필요할 때만 표시하고 싶은 모든 콘텐츠에 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n``` markdown\n![image](https://miro.medium.com/v2/resize:fit:1400/1*KJNJQ75h76oAhSL4atPIfw.gif)\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Details Example</title>\n</head>\n<body>\n    <details>\n        <summary>More Information</summary>\n        <p>This is additional information that can be toggled by clicking \"More Information\".</p>\n    </details>\n</body>\n</html>\n\n## 4. `meter` Tag\n\n`meter` 태그는 디스크 사용량 지시기, 연료 게이지 또는 투표 결과와 같은 알려진 범위 내의 스칼라 측정값을 나타냅니다. 일정 범위 내의 값을 시각적으로 나타내는 훌륭한 방법으로 데이터의 시각적 매력과 사용성을 향상시킬 수 있습니다.\n```\n\n<div class=\"content-ad\"></div>\n\n\n![](/assets/img/2024-06-20-Conclusion_0.png)\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Meter Example</title>\n</head>\n<body>\n    <label for=\"diskUsage\">Disk Usage:</label>\n    <meter id=\"diskUsage\" value=\"0.6\" min=\"0\" max=\"1\">60%</meter>\n</body>\n</html>\n```\n\n## 5. `progress` Tag\n\n`progress` 태그는 작업의 완료 진행률을 나타내는 데 사용됩니다. 다운로드 또는 파일 업로드와 같은 작업의 진행 상황을 제공하여 사용자에게 진행 중인 작업의 상태에 대한 시각적인 신호를 제공하며 사용자 경험을 보다 원활하고 정보를 얻을 수 있게 합니다.\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-Conclusion_1.png\" />\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>진행 상황 예제</title>\n</head>\n<body>\n    <label for=\"fileProgress\">파일 업로드 진행 상황:</label>\n    <progress id=\"fileProgress\" value=\"70\" max=\"100\">70%</progress>\n</body>\n</html>\n```\n\n# 결론\n\n`dialog`, `map`, `details`, `meter`, `progress` 다섯 가지 HTML 태그는 웹 페이지의 상호작용성과 사용성을 향상시키는 강력한 도구입니다. 이러한 태그를 프로젝트에 통합함으로써 사용자에게 더 풍부하고 매력적인 경험을 제공할 수 있습니다. 이러한 요소를 이해하고 활용함으로써 웹 개발 기술을 향상시키는 데 도움을 줄 뿐만 아니라 더 동적이고 접근성이 높은 웹사이트를 만드는 데 기여할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-20-Conclusion_0.png"},"coverImage":"/assets/img/2024-06-20-Conclusion_0.png","tag":["Tech"],"readingTime":5},{"title":"CSS를 사용하여 체크박스 테두리 색상 변경하기","description":"","date":"2024-06-20 00:53","slug":"2024-06-20-Checkboxbordercolorusingcss","content":"\n\n\n![Checkbox border color using css](/assets/img/2024-06-20-Checkboxbordercolorusingcss_0.png)\n\n출처: CSS를 사용한 체크박스 테두리 색상\n\n더 많은 질문과 답변을 보려면 Frontend Interview Questions 웹 사이트를 방문해주세요.\n\n## 체크박스 테두리 색상 사용 방법 이해하기\n\n\n<div class=\"content-ad\"></div>\n\n기본적으로 웹 브라우저에서 렌더링되는 체크박스는 사용자의 운영 체제 또는 브라우저 설정에서 스타일을 상속받습니다. 그러나 개발자는 CSS를 사용하여 기본 스타일을 재정의하여 다양한 플랫폼에서 일관된 외관을 구현할 수 있습니다. 체크박스의 테두리 색상을 수정함으로써 개발자는 웹 사이트 디자인에 체크박스를 심미적으로 통합하고 시각적 일관성을 향상시킬 수 있습니다.\n\n## 체크박스 테두리 색상 사용자 정의 기술\n\n## 1. border-color 속성 사용\n\n체크박스의 테두리 색상을 변경하는 가장 간단한 방법은 CSS에서 직접 border-color 속성을 적용하는 것입니다. 이 기술은 체크박스 요소를 대상으로 하고 원하는 테두리 색상을 지정하는 것을 포함합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ninput[type=\"checkbox\"] {\n    border-color: #007bff; /* 예시 색상: 파란색 */\n}\n```\n\n## 2. 가상 요소를 사용한 체크박스 모양 맞춤\n\n다른 접근 방식으로 가상 요소(::before 및 ::after)를 활용하여 사용자 정의 체크박스 스타일을 만들 수 있습니다. 이 방법은 체크박스를 스타일링하는 데 더 많은 유연성을 제공하며 외관에 대해 더 많은 제어를 가능하게 합니다.\n\n```js\ninput[type=\"checkbox\"] {\n    display: none; /* 기본 체크박스 숨김 */\n}\n\ninput[type=\"checkbox\"] + label::before {\n    content: '';\n    display: inline-block;\n    width: 16px; /* 필요에 따라 크기 조정 */\n    height: 16px; /* 필요에 따라 크기 조정 */\n    border: 2px solid #28a745; /* 예시 색상: 초록색 */\n    border-radius: 3px; /* 둥근 모서리 */\n    margin-right: 8px; /* 체크박스와 레이블 간 간격 */\n}\n\ninput[type=\"checkbox\"]:checked + label::before {\n    background-color: #28a745; /* 예시 색상: 초록색 */\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 체크박스 테두리 색상 사용자 정의 예시\n\n체크박스 테두리 색상 사용자 정의의 실제 예시를 살펴봅시다:\n\n## 예시 1: 기본 체크박스 테두리 색상 변경\n\n```js\ninput[type=\"checkbox\"] {\n    border-color: #ff0000; /* 빨간색 테두리 색상 */\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 예제 2: 가상 요소를 사용한 사용자 정의 체크박스 스타일링\n\n```js\n<input type=\"checkbox\" id=\"checkbox1\">\n<label for=\"checkbox1\">옵션 1</label>\n```\n\n```js\ninput[type=\"checkbox\"] + label::before {\n    content: '';\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n    border: 2px solid #007bff; /* 파란 테두리 색상 */\n    border-radius: 3px;\n    margin-right: 8px;\n}\n```\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\nCSS를 사용하여 체크박스 테두리 색상을 사용자 정의함으로써 개발자는 웹 사이트 디자인에 체크박스를 원활하게 통합할 수 있는 유연성을 제공받습니다. border-color 속성을 직접 적용하거나 가상 요소를 사용하여 사용자 정의 체크박스 스타일을 생성함으로써, 개발자는 시각적으로 매력적인 체크박스를 만들어 사용자 경험을 향상시킬 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-20-Checkboxbordercolorusingcss_0.png"},"coverImage":"/assets/img/2024-06-20-Checkboxbordercolorusingcss_0.png","tag":["Tech"],"readingTime":3},{"title":"스타일을 간편하게 만들기 미디어 쿼리 미친듯이 사용하지 말자","description":"","date":"2024-06-20 00:53","slug":"2024-06-20-StreamlineYourStylesNoMoreMediaQueryMadness","content":"\n\n<img src=\"/assets/img/2024-06-20-StreamlineYourStylesNoMoreMediaQueryMadness_0.png\" />\n\nCSS 미디어 쿼리의 복잡한 구문에 질렸나요? 새로운 구문이 어떻게 워크플로우를 단순화할 수 있는지 알아보세요. 이 새로운 접근법을 사용하면 코드를 더 깨끗하고 읽기 쉽게 만들 수 있습니다.\n\n새로운 CSS 미디어 쿼리 구문으로 전환하면 시간과 노력을 절약할 수 있습니다. 더 효율적이고 유지보수가 용이한 코드를 작성할 수 있게 됩니다.\n\n많은 개발자들은 전통적인 미디어 쿼리가 너무 장황하다고 생각하여 자주 오해와 오류가 발생합니다. 새로운 구문은 더 간단하고 효율적인 해결책을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# Min-Width 및 Max-Width와 작별 인사\n\n새로운 CSS 미디어 쿼리 구문은 반응형 브레이크포인트를 정의하는 방법을 혁신하였습니다. 이로 인해 코드가 더 깔끔해지고 이해하기 쉬워졌습니다.\n\n새 구문의 장점\n\n- 명확성: 새 구문은 간단하고 직관적입니다.\n\n<div class=\"content-ad\"></div>\n\n- 효율성: 단순함을 줄이면 빠른 개발을 이끌어냅니다.\n\n- 호환성: 최신 브라우저에서 높은 지원률을 보장합니다.\n\n# 코드 예시\n\n전통적으로는 다음과 같이 작성할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\r\n@media(min-width: 500px){\n  /* 여기에 스타일을 추가하세요 */\n}\r\n```\n\n새롭고 더 간편한 구문을 사용하면 다음과 같이 됩니다:\n\n```js\r\n@media(width >= 500px){\n  /* 여기에 스타일을 추가하세요 */\n}\r\n```\n\n- 새로운 구문은 더 직관적인 비교 형식을 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n- **min-width** 및 **max-width**를 사용하지 않아도 됩니다.\n\n- 모던 브라우저에서 널리 지원됩니다.\n\n최대 너비에도 적용할 수 있습니다...\n\n구 방식:\n\n<div class=\"content-ad\"></div>\n\n```js\n@media(max-width: 800px){\n  /* 여기에 스타일을 입력하세요 */\n}\n```\n\n새로운 방법:\n\n```js\n@media(width <= 800px){\n  /* 여기에 스타일을 입력하세요 */\n}\n```\n\n두 가로 길이 사이를 테스트할 수도 있어요...\n\n<div class=\"content-ad\"></div>\n\n이전 방식:\n\n```js\n@media(min-width: 500px) and (max-width: 800px){\n  /* 여기에 스타일 작성*/\n}\n```\n\n새로운 방식:\n\n```js\n@media(500px <= width<= 800px){\n  /* 여기에 스타일 작성*/\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n새 CSS 미디어 쿼리 구문으로 전환하면 코드가 간결해지며 반응형 디자인 작업에 집중할 수 있습니다. 프로젝트에서 미디어 쿼리를 처리하는 더 간결한 방법을 즐기세요. 이 새로운 구문을 오늘부터 적용해보세요!\n\n멋진 코드 \\m/","ogImage":{"url":"/assets/img/2024-06-20-StreamlineYourStylesNoMoreMediaQueryMadness_0.png"},"coverImage":"/assets/img/2024-06-20-StreamlineYourStylesNoMoreMediaQueryMadness_0.png","tag":["Tech"],"readingTime":2},{"title":"CSS 앵커의 위치 조정","description":"","date":"2024-06-20 00:52","slug":"2024-06-20-PositioningCSSanchors","content":"\n\n![](/assets/img/2024-06-20-PositioningCSSanchors_0.png)\n\n툴팁을 만드는 것은 사용자에게 더 많은 맥락을 제공하는 좋은 방법입니다. 그러나, 이는 복잡한 주제입니다. 따라서 Web 플랫폼 팀의 개발자들은 브라우저 내부 코드를 사용하여이 문제를 해결하기 위해 더 많은 API를 추가하려고 합니다.\n\nPopover API는 툴팁 주변의 많은 도전에 대한 해결책을 제공합니다. 그러나, 위치 지정은 여전히 해결되지 않은 상태입니다. 특히, 팝오버가 얼마나 많은 공간을 가지고 있는지 알 수 없을 때: 툴팁 트리거가 화면 아래쪽에 있을 경우, 팝오버를 아래에 표시하고 싶지 않습니다. 이 도전에 대한 가능한 해결책은 곧 Chrome에 시행될 것이며, 다른 브라우저도 따를 것입니다.\n\n업데이트: 사양이 변경되었습니다. 최근 예시는 다음에서 찾을 수 있습니다:\nhttps://codepen.io/una/pen/KKYXMNo\n\n<div class=\"content-ad\"></div>\n\n# 팝오버 API 간단 소개\n\n팝오버 API를 사용하려면 두 가지 요소가 필요합니다: **트리거**와 **팝오버**입니다.\n\n```js\n<button popovertarget=\"my-tooltip\">\n  <p>트리거</p>\n</button>\n\n<div id=\"my-tooltip\" popover>\n  <p>툴팁</p>\n</div>\n```\n\n편의를 위해 다음에 제공된 피들(fiddle)을 확인해보세요:\n\n<div class=\"content-ad\"></div>\n\n위에서 보듯이, id와 popovertarget 속성에 의해 생성된 두 항목 간에 링크가 있습니다.\n\n이제 뒷단에서 많은 일이 벌어지고 있습니다: 트리거를 탭할 수 있습니다. 툴팁이 열리면 Esc를 눌러 팝오버를 닫을 수 있습니다. 다시 말해, 팝오버 API는 상자 밖에서 키보드로 사용할 수 있는 솔루션을 제공합니다.\n\n# CSS 앵커 위치 지정\n\n앵커 위치 지정 속성을 통해 우리는 요소를 앵커 요소와 상대적으로 페이지 어디에든 배치할 수 있습니다. 요소의 레이아웃과 관계없이 (position absolute와 같이)요소를 배치할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n오늘 앵커 위치 지정을 시도하려면 Chrome에서 실험적인 웹 플랫폼 기능을 활성화해야 합니다(chrome://flags/#enable-experimental-web-platform-features) 또는 최신 개발자 채널을 사용하세요(Chrome 125부터 기본으로 활성화되며, 2024년 5월 8일에 안정 버전이 될 것입니다).\n\n앵커를 설정하려면 다른 id를 추가하고 앵커 속성을 사용하여 해당 id에 연결하면 됩니다(트리거일 필요는 없습니다.):\n\n```js\n<button popovertarget=\"my-tooltip\" id=\"tooltip-trigger\">\n  <p>트리거</p>\n</button>\n\n<div id=\"my-tooltip\" popover anchor=\"tooltip-trigger\">\n  <p>툴팁</p>\n</div>\n```\n\n그리고 앵커가 어떻게 동작해야 하는지 알려주기 위해 CSS를 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\n#my-tooltip {\n  bottom: calc(anchor(top));\n  position-try-options: flip-block;\n  justify-self: anchor-center;\n}\n```\n\n앵커는 요소의 맨 위에 있어야 하며, position-try-options는 남은 공간을 계산할 것이며, 맞지 않으면 요소의 반대쪽으로 뒤집힐 것입니다. 마지막 줄은 앵커가 앵커의 맨 위에 가운데 정렬되어 있다는 것을 의미합니다. 이것이 어떻게 보이는지 확인해보세요:\n\n<img src=\"/assets/img/2024-06-20-PositioningCSSanchors_1.png\" />\n\n그러나 아랫부분에도 충분한 공간이 없으면 상단 위치로 다시 이동하게 됩니다. 심지어 거기에도 충분한 공간이 없다면 (다른 곳으로 갈 곳이 없기 때문에):\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-20-PositioningCSSanchors_2.png\" />\n\n여기서 함께 놀 수 있는 피들(fiddle)이 있어요:\n\n또한 너무 흥분하기 전에 현재 브라우저 지원을 고려해주세요:\n\n<img src=\"/assets/img/2024-06-20-PositioningCSSanchors_3.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n여기까지 입니다!\n읽어 주셔서 정말 감사합니다.","ogImage":{"url":"/assets/img/2024-06-20-PositioningCSSanchors_0.png"},"coverImage":"/assets/img/2024-06-20-PositioningCSSanchors_0.png","tag":["Tech"],"readingTime":3}],"page":"45","totalPageCount":151,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":2},"__N_SSG":true}