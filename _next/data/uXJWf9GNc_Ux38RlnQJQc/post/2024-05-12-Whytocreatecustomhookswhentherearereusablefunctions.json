{"pageProps":{"post":{"title":"제목 재사용 가능한 함수가 있을 때 왜 커스텀 훅을 만들어야 할까요","description":"","date":"2024-05-12 23:13","slug":"2024-05-12-Whytocreatecustomhookswhentherearereusablefunctions","content":"\n\n<img src=\"/assets/img/2024-05-12-Whytocreatecustomhookswhentherearereusablefunctions_0.png\" />\n\n함수를 작성할 때 재사용 가능한 함수를 만들 수 있습니다. 함수를 만들어서 내보내고 사용하기만 하면 됩니다. 이 과정은 매우 간단합니다.\n\n```js\nexport const getTemplateName = (id: number, templatesData: ITemplates[]) => {\n  return templatesData?.find((template) => template.id === id)?.name || \"-\";\n};\n```\n\n예를 들어, 위 코드에서는 템플릿 목록에서 템플릿을 검색하고 이름을 반환하는 재사용 가능한 함수를 만들었습니다.\n\n\n\n이 기능은 지금은 괜찮지만, 함수에서 매번 templatesData를 전달하고 싶지 않고 위 함수 내에서 직접 가져오고 싶다면 어떻게 해야 할까요? 제 templatesData는 리덕스 상태에 저장되어 있으며 아래와 같이 수행하려고 합니다:\n\n```js\nexport const getTemplateName = (id: number) => {\n  // 가능할까요?\n  const templatesData = useSelector((state: RootState) => state.templates);\n  return templatesData?.find((template) => template.id === id)?.name || \"-\";\n};\n```\n\n# 위 코드가 작동할까요?\n\n이 질문에 대한 답변을 위해 간단히 훅 규칙을 살펴보고 알아보겠습니다.\n\n\n\n- 훅은 최상위 레벨에서만 호출해 주세요.\n- 훅은 React 함수에서만 호출해 주세요.\n- 훅은 동일한 순서로 사용해 주세요.\n- 훅은 React 컴포넌트에서만 호출해 주세요.\n- 훅은 조건부로 호출하지 마세요.\n\n위 코드는 4번 규칙을 위반하여 아래와 같은 오류가 발생했습니다:\n\n![error](/assets/img/2024-05-12-Whytocreatecustomhookswhentherearereusablefunctions_1.png)\n\n이를 해결하기 위해 커스텀 훅이 구원의 역할을 해줍니다.\n\n\n\n# 해결 방법\n\n이 문제는 아래와 같이 커스텀 훅을 사용하여 해결할 수 있습니다:\n\nReact에서의 커스텀 훅은 JavaScript 함수로, 내장 훅(예: useState, useEffect, useContext 등)이나 다른 커스텀 훅을 활용하여 재사용 가능한 로직을 캡슐화하는 기능입니다.\n\nReact에서 훅으로 인식하도록 하려면 커스텀 훅은 반드시 use로 시작해야 합니다.\n\n\n\n이제 위 코드를 사용 가능하게 만들기 위해 사용자 정의 훅으로 변환해 봅시다.\n\n```js\nexport const useTemplateActions = () => {\n  // 여기서 필요한 훅을 사용하세요\n  const { templatesData } = useSelector((state: RootState) => state.templates);\n\n  const getTemplateName = (id: number) => {\n    return templatesData?.find((template) => template.id === id)?.name || \"-\";\n  };\n\n  return { getTemplateName };\n};\n```\n\n그리고 사용할 때:\n\n```js\nconst myFunction = () => {\n   ...\n   const { getTemplateName } = useTemplateActions(); // 이제 일반 함수처럼 사용하세요\n   ...\n}\n```\n\n\n\n따라서, 재사용 가능한 함수가 단순한 로직만 포함하고 있다면 재사용 함수를 만드는 것은 괜찮지만, 함수가 리액트 훅 또는 기타 사용자 정의 훅을 호출한다면 사용자 정의 훅을 만들어야 합니다.\n\n감사합니다.","ogImage":{"url":"/assets/img/2024-05-12-Whytocreatecustomhookswhentherearereusablefunctions_0.png"},"coverImage":"/assets/img/2024-05-12-Whytocreatecustomhookswhentherearereusablefunctions_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-Whytocreatecustomhookswhentherearereusablefunctions_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수를 작성할 때 재사용 가능한 함수를 만들 수 있습니다. 함수를 만들어서 내보내고 사용하기만 하면 됩니다. 이 과정은 매우 간단합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getTemplateName\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"id: number, templatesData: ITemplates[]\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" templatesData?.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"template\"\n          }), \") =>\"]\n        }), \" template.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \" === id)?.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \" || \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"-\\\"\"\n        }), \";\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예를 들어, 위 코드에서는 템플릿 목록에서 템플릿을 검색하고 이름을 반환하는 재사용 가능한 함수를 만들었습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기능은 지금은 괜찮지만, 함수에서 매번 templatesData를 전달하고 싶지 않고 위 함수 내에서 직접 가져오고 싶다면 어떻게 해야 할까요? 제 templatesData는 리덕스 상태에 저장되어 있으며 아래와 같이 수행하려고 합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getTemplateName\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"id: number\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 가능할까요?\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" templatesData = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useSelector\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"state: RootState\"\n          }), \") =>\"]\n        }), \" state.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"templates\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" templatesData?.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"template\"\n          }), \") =>\"]\n        }), \" template.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \" === id)?.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \" || \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"-\\\"\"\n        }), \";\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"위 코드가 작동할까요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 질문에 대한 답변을 위해 간단히 훅 규칙을 살펴보고 알아보겠습니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"훅은 최상위 레벨에서만 호출해 주세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"훅은 React 함수에서만 호출해 주세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"훅은 동일한 순서로 사용해 주세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"훅은 React 컴포넌트에서만 호출해 주세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"훅은 조건부로 호출하지 마세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 코드는 4번 규칙을 위반하여 아래와 같은 오류가 발생했습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-Whytocreatecustomhookswhentherearereusablefunctions_1.png\",\n        alt: \"error\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이를 해결하기 위해 커스텀 훅이 구원의 역할을 해줍니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"해결 방법\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 문제는 아래와 같이 커스텀 훅을 사용하여 해결할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React에서의 커스텀 훅은 JavaScript 함수로, 내장 훅(예: useState, useEffect, useContext 등)이나 다른 커스텀 훅을 활용하여 재사용 가능한 로직을 캡슐화하는 기능입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React에서 훅으로 인식하도록 하려면 커스텀 훅은 반드시 use로 시작해야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 위 코드를 사용 가능하게 만들기 위해 사용자 정의 훅으로 변환해 봅시다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useTemplateActions\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 여기서 필요한 훅을 사용하세요\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { templatesData } = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useSelector\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"state: RootState\"\n          }), \") =>\"]\n        }), \" state.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"templates\"\n        }), \");\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getTemplateName\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"id: number\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" templatesData?.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"template\"\n          }), \") =>\"]\n        }), \" template.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \" === id)?.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \" || \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"-\\\"\"\n        }), \";\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" { getTemplateName };\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 사용할 때:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"myFunction\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n   ...\\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { getTemplateName } = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useTemplateActions\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이제 일반 함수처럼 사용하세요\"\n        }), \"\\n   ...\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"따라서, 재사용 가능한 함수가 단순한 로직만 포함하고 있다면 재사용 함수를 만드는 것은 괜찮지만, 함수가 리액트 훅 또는 기타 사용자 정의 훅을 호출한다면 사용자 정의 훅을 만들어야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"감사합니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}