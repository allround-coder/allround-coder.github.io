{"pageProps":{"post":{"title":"React에서 React Router 링크를 테스트하는 방법 초심자를 위한 안내","description":"","date":"2024-05-14 10:15","slug":"2024-05-14-HowtoTestaReactRouterLinkinReactABeginnersGuide","content":"\n\n안녕하세요! 유닛 테스트의 바다에 발을 담그기 시작하셨나요? 그렇다면 올바른 곳에 왔어요! 오늘은 React Router를 사용하는 React 애플리케이션에서 클릭 가능한 링크를 테스트하는 재미있는 시간을 갖도록 할 거예요. 재미있고 간단하게 진행하며 테스팅의 세계로 여행을 시작해보아요!\n\n# 왜 네비게이션 링크를 테스트해야 하나요?\n\n네비게이션 링크는 많은 웹 애플리케이션에서 사용자 상호작용의 중추입니다. 페이지를 새로고침하지 않고 사용자를 부드럽게 이동시키며, 이를 테스트하는 것이 사용자 경험의 연속성을 보장하는 데 중요합니다. 오늘은 이 링크들이 사용자를 목적지로 올바르게 안내하는지 확인하는 방법을 배우게 될 거예요.\n\n# 코드: React Router 링크\n\n\n\n작은 링크 컴포넌트를 작성해 보겠습니다. MagicDoor라고 부를게요. 보기에는 이렇습니다:\n\n```js\n// MagicDoor.js\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction MagicDoor({ destinationId }) {\n  return (\n    <div>\n      <Link to={{\n        pathname: `/mystery-destination/${destinationId}`,\n        state: { from: window.location.pathname }\n      }}>\n        목적지로 이동하기\n      </Link>\n    </div>\n  );\n}\n\nexport default MagicDoor;\n```\n\n이 컴포넌트에서 destinationId는 열고자 하는 목적지를 결정하는 고유한 키입니다. 상태(state)는 어디서 왔는지의 기억을 갖고 있어요.\n\n# 테스트 시간: 제대로 열리나요?\n\n\n\n자, 이제 MagicDoor가 예상대로 작동하는지 확인해 봅시다. 올바른 URL을 가지고 있는지 확인하고 클릭했을 때 어떻게 되는지 살펴봅시다:\n\n```js\n// MagicDoor.test.js\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Provider } from 'react-redux';\nimport configureStore from 'redux-mock-store';\nimport { BrowserRouter } from 'react-router-dom';\nimport theme from 'core/theme';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport MagicDoor from './MagicDoor';\n\ndescribe('MagicDoor Component', () => {\n  let store;\n  beforeAll(() => {\n    const mockStore = configureStore([]);\n    store = mockStore({}); // 초기 상태\n  });\n\n  it('문 사용시 올바른 목적지로 이동해야 함', () => {\n    const destinationId = '123';\n    const destinationLink = `mystery-destination/${destinationId}`;\n    render(\n      <Provider store={store}>\n        <MuiThemeProvider theme={theme}>\n          <BrowserRouter>\n            <MagicDoor destinationId={destinationId} />\n          </BrowserRouter>\n        </MuiThemeProvider>\n      </Provider>,\n    );\n    \n    const door = screen.getByText('Step through to your destination');\n    expect(door).toHaveAttribute('href', destinationLink);\n    \n    fireEvent.click(door);\n    expect(window.location.pathname).toBe(destinationLink);\n  });\n});\n```\n\n# 방금 무엇을 했나요?\n\n- 링크 찾기: getByText를 사용하여 텍스트에 따라 링크를 찾았습니다.\n- URL 확인: 링크의 href 속성이 제공한 목적지와 일치하는지 확인했습니다.\n- 클릭 시뮬레이션: fireEvent를 사용하여 클릭을 모방하고 올바른 URL이 열렸는지 확인했습니다.\n\n\n\n# 왜 이겪소!\n\nReact Router로 테스트를 진행하면 앱의 내부 이동이 의도한 대로 작동하는지 확인할 수 있어 사용자 경험에서 중요합니다. 사용자 상호작용을 모방하고 결과 경로를 확인함으로써, 사용자가 정확히 이동할 위치를 확인합니다.\n\n# 결론\n\n이제 React Router를 사용하여 React 애플리케이션의 네비게이션 링크를 테스트할 견고한 방법을 갖게 되었습니다. 작성하는 모든 테스트는 더 신뢰할 수 있는 애플리케이션을 구축하는 데 도움이 되며, 네비게이션이 매끄럽고 올바르게 흘러가는 것을 확인합니다.\n\n\n\n# 다음은 무엇인가요?\n\n어플리케이션의 다른 유형의 상호작용을 위한 테스트를 추가해보는 것은 어떨까요? 모든 조각의 테스트는 연결되어 매끄럽고 버그가 없는 사용자 경험을 만들어냅니다. 여러분이 어떤 것들을 만들어내는지 댓글에서 제 경험을 공유해 주시면 정말로 좋겠어요!\n\n기억하세요, 테스팅은 연습과 인내력으로 향상되는 기술입니다. 계속 하며 언젠가는 React 어플리케이션을 전문가처럼 테스트할 수 있게 될 거예요. 행복한 테스팅하세요!","ogImage":{"url":"/assets/img/2024-05-14-HowtoTestaReactRouterLinkinReactABeginnersGuide_0.png"},"coverImage":"/assets/img/2024-05-14-HowtoTestaReactRouterLinkinReactABeginnersGuide_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"안녕하세요! 유닛 테스트의 바다에 발을 담그기 시작하셨나요? 그렇다면 올바른 곳에 왔어요! 오늘은 React Router를 사용하는 React 애플리케이션에서 클릭 가능한 링크를 테스트하는 재미있는 시간을 갖도록 할 거예요. 재미있고 간단하게 진행하며 테스팅의 세계로 여행을 시작해보아요!\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"왜 네비게이션 링크를 테스트해야 하나요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"네비게이션 링크는 많은 웹 애플리케이션에서 사용자 상호작용의 중추입니다. 페이지를 새로고침하지 않고 사용자를 부드럽게 이동시키며, 이를 테스트하는 것이 사용자 경험의 연속성을 보장하는 데 중요합니다. 오늘은 이 링크들이 사용자를 목적지로 올바르게 안내하는지 확인하는 방법을 배우게 될 거예요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"코드: React Router 링크\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"작은 링크 컴포넌트를 작성해 보겠습니다. MagicDoor라고 부를게요. 보기에는 이렇습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// MagicDoor.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Link\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-router-dom'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"MagicDoor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ destinationId }\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Link\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"to\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{{\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"pathname:\"\n            }), \" `/\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"mystery-destination\"\n            }), \"/${\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"destinationId\"\n            }), \"}`,\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"state:\"\n            }), \" { \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"from:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"window.location.pathname\"\n            }), \" }\\n      }}>\"]\n          }), \"\\n        목적지로 이동하기\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Link\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MagicDoor\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 컴포넌트에서 destinationId는 열고자 하는 목적지를 결정하는 고유한 키입니다. 상태(state)는 어디서 왔는지의 기억을 갖고 있어요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"테스트 시간: 제대로 열리나요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자, 이제 MagicDoor가 예상대로 작동하는지 확인해 봅시다. 올바른 URL을 가지고 있는지 확인하고 클릭했을 때 어떻게 되는지 살펴봅시다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// MagicDoor.test.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { render, screen, fireEvent } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@testing-library/react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Provider\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-redux'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" configureStore \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'redux-mock-store'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BrowserRouter\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-router-dom'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" theme \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'core/theme'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MuiThemeProvider\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@material-ui/core/styles'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MagicDoor\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./MagicDoor'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"describe\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'MagicDoor Component'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" store;\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"beforeAll\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" mockStore = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"configureStore\"\n        }), \"([]);\\n    store = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"mockStore\"\n        }), \"({}); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 초기 상태\"\n        }), \"\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"it\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'문 사용시 올바른 목적지로 이동해야 함'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" destinationId = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'123'\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" destinationLink = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`mystery-destination/\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${destinationId}\"\n          }), \"`\"]\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"render\"\n        }), \"(\\n      \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Provider\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"store\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{store}\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"MuiThemeProvider\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"theme\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{theme}\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"BrowserRouter\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"MagicDoor\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"destinationId\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{destinationId}\"\n            }), \" />\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"BrowserRouter\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"MuiThemeProvider\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Provider\"\n            }), \">\"]\n          })]\n        }), \",\\n    );\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" door = screen.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getByText\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Step through to your destination'\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(door).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toHaveAttribute\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'href'\"\n        }), \", destinationLink);\\n    \\n    fireEvent.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"click\"\n        }), \"(door);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"location\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pathname\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toBe\"\n        }), \"(destinationLink);\\n  });\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"방금 무엇을 했나요?\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"링크 찾기: getByText를 사용하여 텍스트에 따라 링크를 찾았습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"URL 확인: 링크의 href 속성이 제공한 목적지와 일치하는지 확인했습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"클릭 시뮬레이션: fireEvent를 사용하여 클릭을 모방하고 올바른 URL이 열렸는지 확인했습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"왜 이겪소!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React Router로 테스트를 진행하면 앱의 내부 이동이 의도한 대로 작동하는지 확인할 수 있어 사용자 경험에서 중요합니다. 사용자 상호작용을 모방하고 결과 경로를 확인함으로써, 사용자가 정확히 이동할 위치를 확인합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 React Router를 사용하여 React 애플리케이션의 네비게이션 링크를 테스트할 견고한 방법을 갖게 되었습니다. 작성하는 모든 테스트는 더 신뢰할 수 있는 애플리케이션을 구축하는 데 도움이 되며, 네비게이션이 매끄럽고 올바르게 흘러가는 것을 확인합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"다음은 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"어플리케이션의 다른 유형의 상호작용을 위한 테스트를 추가해보는 것은 어떨까요? 모든 조각의 테스트는 연결되어 매끄럽고 버그가 없는 사용자 경험을 만들어냅니다. 여러분이 어떤 것들을 만들어내는지 댓글에서 제 경험을 공유해 주시면 정말로 좋겠어요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기억하세요, 테스팅은 연습과 인내력으로 향상되는 기술입니다. 계속 하며 언젠가는 React 어플리케이션을 전문가처럼 테스트할 수 있게 될 거예요. 행복한 테스팅하세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}