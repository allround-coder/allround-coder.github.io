{"pageProps":{"post":{"title":"맥용 NVM을 2분 안에 설정하기","description":"","date":"2024-05-16 17:08","slug":"2024-05-16-NVMformacOSin2minutes","content":"\n\n![NVM for MacOS](/assets/img/2024-05-16-NVMformacOSin2minutes_0.png)  \n  \n애플리케이션이 Node.js 아키텍처를 기반으로 한 경우, 서로 다른 버전 간을 전환할 수 있는 능력은 기존 프로젝트와 최신 플랫폼 기능을 활용하기 위해 필수적입니다. 그러나 MacOS와 같은 운영 체제에서는 네이티브로 통합되지 않아 버전 관리가 복잡해질 수 있습니다.\n\n# NVM이란?\n\nNVM은 하나의 시스템에서 여러 버전의 Node.js를 쉽게 설치하고 관리할 수 있게 해주는 명령줄 도구입니다. 그러나 MacOS에서의 구현은 환경 및 의존성 관리에 대한 차이로 인해 다른 운영 체제와 비교했을 때 특별한 도전을 안겨줍니다. 왜냐하면 MacOS에는 내장되어 있지 않기 때문에 대신 Homebrew를 설치해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 어떻게 설치하나요?\n\n터미널을 열고 다음 명령어로 Homebrew를 설치하세요:\n\n```js\n/bin/bash -c \"$(curl -fsSL <https://raw.githubusercontent.com/Homebrew/install/master/install.sh>)\"\n```\n\nHomebrew가 설치되면 NVM을 설치할 차례입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nbrew install nvm\n```\n\nNVM을 사용하려면 항상 ~/.bash_profile 또는 ~/.zshrc 파일에 포함해야 합니다:\n\n```js\nsource $(brew --prefix nvm)/nvm.sh\n```\n\n이 파일들을 찾을 수 없는 경우 sudo su 명령어를 사용하여 수퍼유저로 접근하여 찾을 수 있습니다. 만약 해당 파일이 없다면, 직접 생성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nNVM을 설치한 후에는 NodeJS의 최신 버전을 설치할 차례입니다:\n\n```js\nnvm install node\n```\n\n설치가 완료되면 우리가 원하는 NodeJS 버전들을 설치할 수 있습니다. 이를 위해 컴퓨터에 설치된 모든 버전을 확인하려면 다음 명령을 사용하십시오:\n\n```js\nnvm ls-remote\n```\n\n<div class=\"content-ad\"></div>\n\n만약 우리가 설치하고 싶은 버전을 모른다면 공식 NodeJS 웹사이트를 참고할 수 있어요. 설치하고 싶은 버전을 알고 있다면 다음 명령어를 입력하면 돼요:\n\n```js\nnvm install [설치할 버전]\n\n## 예시:\nnvm install 18.10.0\n```\n\n설치되면 아래와 같이 사용할 수 있어요:\n\n```js\nnvm use [사용할 버전]\n\n## 예시:\nnvm use 18.10.0\n```\n\n<div class=\"content-ad\"></div>\n\n만약 우리가 다른 버전으로 변경하길 원한다면 먼저 nvm list로 설치된 모든 버전을 나열해야 합니다. 원하는 버전을 찾으면 nvm use [원하는 버전 번호]를 사용하여 해당 버전을 사용할 수 있습니다.\n\n# 결론\n\nHomebrew를 통해 MacOS에 NVM을 설치하면 Node.js 버전 관리가 크게 간소화됩니다. NVM을 사용하면 시스템에서 여러 버전의 Node.js를 쉽게 설치, 전환 및 관리할 수 있어서 다양한 프로젝트에 적응하고 최신 플랫폼 기능을 활용할 수 있습니다. 몇 가지 터미널 명령만으로 새로운 버전을 설치하고 이를 전환하며 개발 환경이 항상 호환되고 최신 상태임을 보장할 수 있습니다. 확실히 NVM을 통해 macOS에서 Node.js 개발 환경을 완전히 제어할 수 있어서 호환성 문제나 오래된 버전에 대해 걱정하지 않고 놀라운 애플리케이션을 만드는 데 집중할 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-16-NVMformacOSin2minutes_0.png"},"coverImage":"/assets/img/2024-05-16-NVMformacOSin2minutes_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-NVMformacOSin2minutes_0.png\",\n        alt: \"NVM for MacOS\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"애플리케이션이 Node.js 아키텍처를 기반으로 한 경우, 서로 다른 버전 간을 전환할 수 있는 능력은 기존 프로젝트와 최신 플랫폼 기능을 활용하기 위해 필수적입니다. 그러나 MacOS와 같은 운영 체제에서는 네이티브로 통합되지 않아 버전 관리가 복잡해질 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"NVM이란?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NVM은 하나의 시스템에서 여러 버전의 Node.js를 쉽게 설치하고 관리할 수 있게 해주는 명령줄 도구입니다. 그러나 MacOS에서의 구현은 환경 및 의존성 관리에 대한 차이로 인해 다른 운영 체제와 비교했을 때 특별한 도전을 안겨줍니다. 왜냐하면 MacOS에는 내장되어 있지 않기 때문에 대신 Homebrew를 설치해야 합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"어떻게 설치하나요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"터미널을 열고 다음 명령어로 Homebrew를 설치하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"/bin/bash -c \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$(curl -fsSL <https://raw.githubusercontent.com/Homebrew/install/master/install.sh>)\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Homebrew가 설치되면 NVM을 설치할 차례입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"brew install nvm\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NVM을 사용하려면 항상 ~/.bash_profile 또는 ~/.zshrc 파일에 포함해야 합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"source $(brew --prefix nvm)/nvm.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sh\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 파일들을 찾을 수 없는 경우 sudo su 명령어를 사용하여 수퍼유저로 접근하여 찾을 수 있습니다. 만약 해당 파일이 없다면, 직접 생성할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NVM을 설치한 후에는 NodeJS의 최신 버전을 설치할 차례입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"nvm install node\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"설치가 완료되면 우리가 원하는 NodeJS 버전들을 설치할 수 있습니다. 이를 위해 컴퓨터에 설치된 모든 버전을 확인하려면 다음 명령을 사용하십시오:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"nvm ls-remote\\n\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 우리가 설치하고 싶은 버전을 모른다면 공식 NodeJS 웹사이트를 참고할 수 있어요. 설치하고 싶은 버전을 알고 있다면 다음 명령어를 입력하면 돼요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"nvm install [설치할 버전]\\n\\n## 예시:\\nnvm install \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"18.10\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".0\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"설치되면 아래와 같이 사용할 수 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"nvm use [사용할 버전]\\n\\n## 예시:\\nnvm use \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"18.10\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".0\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 우리가 다른 버전으로 변경하길 원한다면 먼저 nvm list로 설치된 모든 버전을 나열해야 합니다. 원하는 버전을 찾으면 nvm use [원하는 버전 번호]를 사용하여 해당 버전을 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Homebrew를 통해 MacOS에 NVM을 설치하면 Node.js 버전 관리가 크게 간소화됩니다. NVM을 사용하면 시스템에서 여러 버전의 Node.js를 쉽게 설치, 전환 및 관리할 수 있어서 다양한 프로젝트에 적응하고 최신 플랫폼 기능을 활용할 수 있습니다. 몇 가지 터미널 명령만으로 새로운 버전을 설치하고 이를 전환하며 개발 환경이 항상 호환되고 최신 상태임을 보장할 수 있습니다. 확실히 NVM을 통해 macOS에서 Node.js 개발 환경을 완전히 제어할 수 있어서 호환성 문제나 오래된 버전에 대해 걱정하지 않고 놀라운 애플리케이션을 만드는 데 집중할 수 있습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}