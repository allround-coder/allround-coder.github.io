{"pageProps":{"post":{"title":"Angular 17 데이터 공유하기 BehaviorSubject를 활용한 간단한 가이드","description":"","date":"2024-05-14 14:45","slug":"2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide","content":"\n\n<img src=\"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_0.png\" />\n\n앵귤러 애플리케이션에서 컴포넌트 간 데이터 흐름을 관리하는 것은 복잡해질 수 있습니다. 이때 비동기 프로그래밍을 위한 강력한 라이브러리인 RxJS가 유용합니다. RxJS는 데이터 스트림을 처리하는 다양한 연산자와 Subject를 제공하며, 그 중에서 BehaviorSubject는 중요한 역할을 합니다. BehaviorSubject는 상태를 관리하고 Angular 애플리케이션 내에서 변경 사항을 전파하는 데 기본적인 구조로 나타납니다. 이 블로그 포스트에서는 BehaviorSubject를 사용하여 컴포넌트 간 데이터를 공유하는 방법에 대해 알아보겠습니다.\n\n# BehaviorSubject란 무엇인가요?\n\n기본적으로 BehaviorSubject는 RxJS 라이브러리에서 제공하는 Observable의 한 유형입니다. 특정 이벤트가 발생할 때만 값을 방출하는 전통적인 Observable과 달리, BehaviorSubject는 최신 값을 유지하고 새로운 구독자에게 즉시 전달합니다.\n\n\n\n# 주요 기능:\n\n## 초기값으로의 초기화:\n\nBehaviorSubject를 생성할 때, 개발자는 초기값을 지정합니다. 이 초기값은 이후 발생하는 값들의 시작점으로 작용하며, 새로운 구독자가 구독 시 즉시 업데이트를 받을 수 있도록 보장해줍니다.\n\n## 상태 유지:\n\n\n\nBehaviorSubject의 독특한 특징 중 하나는 최신 값을 유지 및 구독자에게 전달할 수 있는 능력입니다. 이 행동은 추가 이벤트를 트리거할 필요 없이 컴포넌트가 가장 최신 데이터와 동기화되도록 합니다.\n\n## next() 메서드:\n\nnext() 메서드를 통해 개발자는 BehaviorSubject가 보유한 값을 동적으로 업데이트할 수 있습니다. 이 메커니즘은 응용 프로그램 전체에 이어지는 데이터 전파를 원활하게 처리하여 반응성 및 반응적인 동작을 가능하게 합니다.\n\n# 실제 구현:\n\n\n\n## 1. 빈 Angular 프로젝트를 생성하세요\n\n```js\nng new behaviorsubject-demo\n```\n\n## 2. 서비스 및 컴포넌트 생성\n\n이 프로젝트에서는 아래와 같은 UI를 만들 예정입니다. 이를 위해 인용구 데이터를 가진 Quote 서비스를 생성하고, 인용구를 업데이트하는 컴포넌트와 인용구를 표시하는 컴포넌트를 만들 예정입니다.\n\n\n\n아래 명령어를 실행하여 서비스와 컴포넌트를 생성하세요.\n\n```js\nng generate service services/quote\nng generate component components/display-quote\nng generate component components/update-quote\n```\n\n폴더 구조는 아래와 같이 보일 것입니다.\n\n\n\n<img src=\"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_2.png\" />\n\n## 3. 서비스에 아래 코드를 추가하세요\n\n```js\n// quote.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuoteService {\n\n  constructor() {}\n\n  // 명언 속성을 선언하고 초기화합니다. BehaviorSubject이 될 예정\n  qoute = new BehaviorSubject(\"Hello world\");\n\n  // BehaviorSubject를 Observable로 노출합니다\n  currentQuote = this.qoute.asObservable();\n\n  // BehaviorSubject 값을 업데이트하는 함수\n  updateQuote(newQuote: string){\n    this.qoute.next(newQuote);\n  }\n}\n```\n\n## 4. 명언 서비스에서 명언 값을 표시하기\n\n\n\n```typescript\n// display-quote.component.ts\n\n...\n\nimport { QuoteService } from '../../services/quote.service';\n\n...\nexport class DisplayQuoteComponent {\n\n  constructor(private quoteService: QuoteService){}\n  \n  currentQuote: string = '';\n\n  ngOnInit(): void {\n    // 현재 시간 값을 가져오기 위해 quote 서비스의 currentQuote 속성을 구독합니다\n    this.quoteService.currentQuote.subscribe(\n      // 컴포넌트의 속성을 업데이트합니다\n      quote => this.currentQuote = quote\n    );\n  }\n}\n\n// display-quote.component.html\n\n<h2>{currentQuote}</h2>\r\n```\n\n이제 display-quote 컴포넌트에서 quote 서비스의 초기 인용구를 볼 수 있게 될 것입니다\n\n## 5. 인용구 값 업데이트\n\n```typescript\n// update-quote.component.ts\n\nimport { Component } from '@angular/core';\nimport { QuoteService } from '../../services/quote.service';\n\n...\nexport class UpdateQuoteComponent {\n\n  constructor(private quoteService: QuoteService){}\n\n  quote = '';\n\n  // 서비스에서 인용구를 업데이트하는 함수\n  submitHandler(){    \n   this.quoteService.updateQuote(this.quote);\n    this.quote=\"\";\n  }\n}\n\n// update-quote.component.html\n\n<div>\n  <input type=\"text\" [(ngModel)]=\"quote\" placeholder=\"새로운 인용구를 작성하세요\" />\n  <button (click)=\"submitHandler()\">제출</button>\n</div>\r\n```\n\n\n\n이제 update-quote 컴포넌트에서 인용구 값을 업데이트할 수 있게 되었고, 이는 display-quote 컴포넌트에 직접적으로 반영될 것입니다. 아래 다이어그램에서 프로젝트 내 데이터의 흐름을 확인할 수 있습니다.\n\n![Diagram](/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_3.png)\n\n# 결론:\n\n- 이 예제에서 인용구 서비스는 BehaviorSubject를 사용하여 인용구를 저장합니다. display-quote 컴포넌트는 currentQuote observable을 구독하여 최신 인용구를 가져와 로컬 변수를 업데이트합니다.\n- Angular 개발에서 BehaviorSubject는 상태를 관리하고 컴포넌트 및 서비스 간 반응형 동작을 용이하게 하는 강력한 도구로 사용됩니다. 개발자들은 이를 활용하여 동적 데이터 흐름을 쉽게 다룰 수 있는 견고하고 반응적인 Angular 애플리케이션을 구축할 수 있습니다.\n\n\n\n아래 GitHub 저장소에서 최종 코드를 얻어보세요.","ogImage":{"url":"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_0.png"},"coverImage":"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앵귤러 애플리케이션에서 컴포넌트 간 데이터 흐름을 관리하는 것은 복잡해질 수 있습니다. 이때 비동기 프로그래밍을 위한 강력한 라이브러리인 RxJS가 유용합니다. RxJS는 데이터 스트림을 처리하는 다양한 연산자와 Subject를 제공하며, 그 중에서 BehaviorSubject는 중요한 역할을 합니다. BehaviorSubject는 상태를 관리하고 Angular 애플리케이션 내에서 변경 사항을 전파하는 데 기본적인 구조로 나타납니다. 이 블로그 포스트에서는 BehaviorSubject를 사용하여 컴포넌트 간 데이터를 공유하는 방법에 대해 알아보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"BehaviorSubject란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기본적으로 BehaviorSubject는 RxJS 라이브러리에서 제공하는 Observable의 한 유형입니다. 특정 이벤트가 발생할 때만 값을 방출하는 전통적인 Observable과 달리, BehaviorSubject는 최신 값을 유지하고 새로운 구독자에게 즉시 전달합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"주요 기능:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"초기값으로의 초기화:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"BehaviorSubject를 생성할 때, 개발자는 초기값을 지정합니다. 이 초기값은 이후 발생하는 값들의 시작점으로 작용하며, 새로운 구독자가 구독 시 즉시 업데이트를 받을 수 있도록 보장해줍니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"상태 유지:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"BehaviorSubject의 독특한 특징 중 하나는 최신 값을 유지 및 구독자에게 전달할 수 있는 능력입니다. 이 행동은 추가 이벤트를 트리거할 필요 없이 컴포넌트가 가장 최신 데이터와 동기화되도록 합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"next() 메서드:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"next() 메서드를 통해 개발자는 BehaviorSubject가 보유한 값을 동적으로 업데이트할 수 있습니다. 이 메커니즘은 응용 프로그램 전체에 이어지는 데이터 전파를 원활하게 처리하여 반응성 및 반응적인 동작을 가능하게 합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"실제 구현:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. 빈 Angular 프로젝트를 생성하세요\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"ng \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" behaviorsubject-demo\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. 서비스 및 컴포넌트 생성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 프로젝트에서는 아래와 같은 UI를 만들 예정입니다. 이를 위해 인용구 데이터를 가진 Quote 서비스를 생성하고, 인용구를 업데이트하는 컴포넌트와 인용구를 표시하는 컴포넌트를 만들 예정입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 명령어를 실행하여 서비스와 컴포넌트를 생성하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"ng generate service services/quote\\nng generate component components/display-quote\\nng generate component components/update-quote\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"폴더 구조는 아래와 같이 보일 것입니다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_2.png\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. 서비스에 아래 코드를 추가하세요\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// quote.service.ts\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Injectable\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/core'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BehaviorSubject\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\\n@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Injectable\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"providedIn\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'root'\"\n        }), \"\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"QuoteService\"\n        }), \" {\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {}\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 명언 속성을 선언하고 초기화합니다. BehaviorSubject이 될 예정\"\n        }), \"\\n  qoute = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BehaviorSubject\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Hello world\\\"\"\n        }), \");\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// BehaviorSubject를 Observable로 노출합니다\"\n        }), \"\\n  currentQuote = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"qoute\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"asObservable\"\n        }), \"();\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// BehaviorSubject 값을 업데이트하는 함수\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"updateQuote\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"newQuote: string\"\n        }), \"){\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"qoute\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"next\"\n        }), \"(newQuote);\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. 명언 서비스에서 명언 값을 표시하기\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-typescript\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// display-quote.component.ts\"\n        }), \"\\n\\n...\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"QuoteService\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'../../services/quote.service'\"\n        }), \";\\n\\n...\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DisplayQuoteComponent\"\n        }), \" {\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-params\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" quoteService: QuoteService\"]\n        }), \"){}\\n  \\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"currentQuote\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"string\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \";\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ngOnInit\"\n        }), \"(): \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"void\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 현재 시간 값을 가져오기 위해 quote 서비스의 currentQuote 속성을 구독합니다\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"quoteService\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"currentQuote\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 컴포넌트의 속성을 업데이트합니다\"\n        }), \"\\n      \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"quote\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"currentQuote\"\n        }), \" = quote\\n    );\\n  }\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// display-quote.component.html\"\n        }), \"\\n\\n<h2>{currentQuote}</h2>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 display-quote 컴포넌트에서 quote 서비스의 초기 인용구를 볼 수 있게 될 것입니다\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"5. 인용구 값 업데이트\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-typescript\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// update-quote.component.ts\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/core'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"QuoteService\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'../../services/quote.service'\"\n        }), \";\\n\\n...\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"UpdateQuoteComponent\"\n        }), \" {\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-params\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" quoteService: QuoteService\"]\n        }), \"){}\\n\\n  quote = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \";\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 서비스에서 인용구를 업데이트하는 함수\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"submitHandler\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \"){    \\n   \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"quoteService\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"updateQuote\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"quote\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"quote\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \";\\n  }\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// update-quote.component.html\"\n        }), \"\\n\\n<div>\\n  \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \" [(\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ngModel\"\n            }), \")]=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"quote\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"placeholder\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"새로운 인용구를 작성하세요\\\"\"\n            }), \" />\"]\n          })\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" (\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"click\"\n            }), \")=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"submitHandler()\\\"\"\n            }), \">\"]\n          }), \"제출\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          })]\n        }), \"\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 update-quote 컴포넌트에서 인용구 값을 업데이트할 수 있게 되었고, 이는 display-quote 컴포넌트에 직접적으로 반영될 것입니다. 아래 다이어그램에서 프로젝트 내 데이터의 흐름을 확인할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-Angular17DataSharingwithBehaviorSubjectsASimpleGuide_3.png\",\n        alt: \"Diagram\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이 예제에서 인용구 서비스는 BehaviorSubject를 사용하여 인용구를 저장합니다. display-quote 컴포넌트는 currentQuote observable을 구독하여 최신 인용구를 가져와 로컬 변수를 업데이트합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Angular 개발에서 BehaviorSubject는 상태를 관리하고 컴포넌트 및 서비스 간 반응형 동작을 용이하게 하는 강력한 도구로 사용됩니다. 개발자들은 이를 활용하여 동적 데이터 흐름을 쉽게 다룰 수 있는 견고하고 반응적인 Angular 애플리케이션을 구축할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 GitHub 저장소에서 최종 코드를 얻어보세요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}