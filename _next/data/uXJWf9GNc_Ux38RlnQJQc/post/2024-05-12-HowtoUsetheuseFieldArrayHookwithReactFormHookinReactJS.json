{"pageProps":{"post":{"title":"리액트 JS에서 리액트 폼 훅과 useFieldArray 훅을 함께 사용하는 방법","description":"","date":"2024-05-12 22:08","slug":"2024-05-12-HowtoUsetheuseFieldArrayHookwithReactFormHookinReactJS","content":"\n\n소프트웨어 개발자로서, React Form Hook에서 useFieldArray 훅을 사용하는 방법에 대해 여러분과 공유할 수 있어서 정말 기쁩니다. 이 훅은 동적으로 폼 필드를 추가하거나 제거할 수 있는 강력한 도구로, 다수의 입력 필드가 있는 복잡한 폼을 쉽게 관리할 수 있게 해줍니다.\n\n먼저, 필요한 종속성을 설치하는 방법부터 시작해보겠습니다. React Hook Form 라이브러리와 useFieldArray 훅을 설치해야 합니다. 터미널에서 다음 명령을 실행하여 이 작업을 수행할 수 있습니다:\n\n```js\nnpm install react-hook-form\n```\n\n의존성을 설치했다면, React 폼에서 useFieldArray 훅을 구현할 수 있습니다. 이 훅을 사용하는 예시를 보여드리겠습니다:\n\n\n\n```js\nimport React from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\n\nfunction MyForm() {\n  const { register, control, handleSubmit } = useForm({\n    defaultValues: {\n      items: [{ name: 'item1' }, { name: 'item2' }],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'items',\n  });\n\n  const onSubmit = (data) => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {fields.map((field, index) => (\n        <div key={field.id}>\n          <input\n            {...register(`items.${index}.name`)}\n            defaultValue={field.name}\n          />\n          <button type=\"button\" onClick={() => remove(index)}>\n            Remove\n          </button>\n        </div>\n      ))}\n      <button type=\"button\" onClick={() => append({ name: '' })}>\n        Add Item\n      </button>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default MyForm;\n```\n\n이 예제에서는 useForm 훅을 사용하여 기본값으로 form을 초기화했습니다. 또한 useFieldArray 훅을 사용하여 \"items\" 필드 배열을 관리했습니다. \"control\" 속성은 useForm 훅과 상호 작용할 수 있도록 useFieldArray 훅에 전달됩니다.\n\nfields.map 함수는 \"items\" 배열의 각 입력 필드를 렌더링하는 데 사용됩니다. \"Remove\" 버튼을 클릭하면 제거 함수가 호출되고, \"Add Item\" 버튼을 클릭하면 추가 함수가 호출됩니다.\n\nuseFieldArray 훅을 사용하면 form의 상태를 수동으로 관리하지 않고도 form에서 필드를 쉽게 추가하거나 제거할 수 있습니다. 이를 통해 동적 입력이 있는 복잡한 form을 쉽게 생성할 수 있습니다.\n```\n\n\n\n하지만 \"items\" 배열에서 더 많은 필드를 사용하고 싶다면 어떻게 해야 할까요? 걱정하지 마세요! 단순히 양식에 더 많은 입력을 추가하면 됩니다. \"name\"과 \"quantity\" 두 필드를 \"items\" 배열에 포함한 예제를 보여드리겠습니다:\n\n```js\nimport React from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\n\nfunction MyForm() {\n const { register, control, handleSubmit } = useForm({\n defaultValues: {\n items: [{ name: 'item1', quantity: 1 }, { name: 'item2', quantity: 2 }],\n },\n });\n \n const { fields, append, remove } = useFieldArray({\n control,\n name: 'items',\n });\n\n const onSubmit = (data) => console.log(data);\n\n return (\n <form onSubmit={handleSubmit(onSubmit)}>\n {fields.map((field, index) => (\n <div key={field.id}>\n <input\n {…register(`items.${index}.name`)}\n defaultValue={field.name}\n />\n <input\n {…register(`items.${index}.quantity`)}\n defaultValue={field.quantity}\n />\n <button type=\"button\" onClick={() => remove(index)}>\n Remove\n </button>\n </div>\n ))}\n <button type=\"button\" onClick={() => append({ name: '', quantity: 0 })}>\n Add Item\n </button>\n <button type=\"submit\">Submit</button>\n </form>\n );\n}\n\nexport default MyForm;\n```\n\n이 업데이트된 예제에서 \"quantity\"에 대한 두 번째 입력 필드가 추가되었습니다. 여전히 \"items\" 배열의 각 입력 필드를 렌더링하는 데 이전과 동일한 접근 방식을 사용하고 있습니다. \"Remove\" 버튼을 클릭하면 여전히 remove 함수가 호출되고, \"Add Item\" 버튼을 클릭하면 여전히 append 함수가 호출됩니다.\n\nuseForm 및 useFieldArray 훅을 함께 사용하면 React JS에서 여러 입력을 가진 복잡한 양식을 쉽게 관리할 수 있습니다. useFieldArray 훅은 폼에서 동적으로 필드를 추가하거나 제거할 수 있는 강력한 도구로, 동적이고 사용자 친화적인 양식을 만드는 데 도움이 됩니다.","ogImage":{"url":"/assets/img/2024-05-12-HowtoUsetheuseFieldArrayHookwithReactFormHookinReactJS_0.png"},"coverImage":"/assets/img/2024-05-12-HowtoUsetheuseFieldArrayHookwithReactFormHookinReactJS_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"소프트웨어 개발자로서, React Form Hook에서 useFieldArray 훅을 사용하는 방법에 대해 여러분과 공유할 수 있어서 정말 기쁩니다. 이 훅은 동적으로 폼 필드를 추가하거나 제거할 수 있는 강력한 도구로, 다수의 입력 필드가 있는 복잡한 폼을 쉽게 관리할 수 있게 해줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저, 필요한 종속성을 설치하는 방법부터 시작해보겠습니다. React Hook Form 라이브러리와 useFieldArray 훅을 설치해야 합니다. 터미널에서 다음 명령을 실행하여 이 작업을 수행할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install react-hook-form\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"의존성을 설치했다면, React 폼에서 useFieldArray 훅을 구현할 수 있습니다. 이 훅을 사용하는 예시를 보여드리겠습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useForm, useFieldArray } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-hook-form'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"MyForm\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { register, control, handleSubmit } = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useForm\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"defaultValues\"\n        }), \": {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"items\"\n        }), \": [{ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'item1'\"\n        }), \" }, { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'item2'\"\n        }), \" }],\\n    },\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { fields, append, remove } = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useFieldArray\"\n        }), \"({\\n    control,\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'items'\"\n        }), \",\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"onSubmit\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"data\"\n        }), \") => \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(data);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"form\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onSubmit\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleSubmit(onSubmit)}\"\n            }), \">\"]\n          }), \"\\n      {fields.map((field, index) => (\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"key\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{field.id}\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \"\\n            {\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"...register\"\n            }), \"(`\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"items.\"\n            }), \"${\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"index\"\n            }), \"}\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \".name\"\n            }), \"`)}\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"defaultValue\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{field.name}\"\n            }), \"\\n          />\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"button\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" remove(index)}>\\n            Remove\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      ))}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"button\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" append({ name: '' })}>\\n        Add Item\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"submit\\\"\"\n            }), \">\"]\n          }), \"Submit\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"form\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MyForm\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예제에서는 useForm 훅을 사용하여 기본값으로 form을 초기화했습니다. 또한 useFieldArray 훅을 사용하여 \\\"items\\\" 필드 배열을 관리했습니다. \\\"control\\\" 속성은 useForm 훅과 상호 작용할 수 있도록 useFieldArray 훅에 전달됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"fields.map 함수는 \\\"items\\\" 배열의 각 입력 필드를 렌더링하는 데 사용됩니다. \\\"Remove\\\" 버튼을 클릭하면 제거 함수가 호출되고, \\\"Add Item\\\" 버튼을 클릭하면 추가 함수가 호출됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"useFieldArray 훅을 사용하면 form의 상태를 수동으로 관리하지 않고도 form에서 필드를 쉽게 추가하거나 제거할 수 있습니다. 이를 통해 동적 입력이 있는 복잡한 form을 쉽게 생성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n하지만 \\\"items\\\" 배열에서 더 많은 필드를 사용하고 싶다면 어떻게 해야 할까요? 걱정하지 마세요! 단순히 양식에 더 많은 입력을 추가하면 됩니다. \\\"name\\\"과 \\\"quantity\\\" 두 필드를 \\\"items\\\" 배열에 포함한 예제를 보여드리겠습니다:\\n\\n```js\\nimport React from 'react';\\nimport { useForm, useFieldArray } from 'react-hook-form';\\n\\nfunction MyForm() {\\n const { register, control, handleSubmit } = useForm({\\n defaultValues: {\\n items: [{ name: 'item1', quantity: 1 }, { name: 'item2', quantity: 2 }],\\n },\\n });\\n \\n const { fields, append, remove } = useFieldArray({\\n control,\\n name: 'items',\\n });\\n\\n const onSubmit = (data) => console.log(data);\\n\\n return (\\n <form onSubmit={handleSubmit(onSubmit)}>\\n {fields.map((field, index) => (\\n <div key={field.id}>\\n <input\\n {…register(`items.${index}.name`)}\\n defaultValue={field.name}\\n />\\n <input\\n {…register(`items.${index}.quantity`)}\\n defaultValue={field.quantity}\\n />\\n <button type=\\\"button\\\" onClick={() => remove(index)}>\\n Remove\\n </button>\\n </div>\\n ))}\\n <button type=\\\"button\\\" onClick={() => append({ name: '', quantity: 0 })}>\\n Add Item\\n </button>\\n <button type=\\\"submit\\\">Submit</button>\\n </form>\\n );\\n}\\n\\nexport default MyForm;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 업데이트된 예제에서 \\\"quantity\\\"에 대한 두 번째 입력 필드가 추가되었습니다. 여전히 \\\"items\\\" 배열의 각 입력 필드를 렌더링하는 데 이전과 동일한 접근 방식을 사용하고 있습니다. \\\"Remove\\\" 버튼을 클릭하면 여전히 remove 함수가 호출되고, \\\"Add Item\\\" 버튼을 클릭하면 여전히 append 함수가 호출됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"useForm 및 useFieldArray 훅을 함께 사용하면 React JS에서 여러 입력을 가진 복잡한 양식을 쉽게 관리할 수 있습니다. useFieldArray 훅은 폼에서 동적으로 필드를 추가하거나 제거할 수 있는 강력한 도구로, 동적이고 사용자 친화적인 양식을 만드는 데 도움이 됩니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}