{"pageProps":{"post":{"title":"CSS로 마우스를 따라다니는 원 만들기 방법","description":"","date":"2024-05-02 00:22","slug":"2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS","content":"\n\n# 간략한 내용\n\n여기 코드만 보고 싶다면 제 Codepen을 확인하세요!\n\n# 배경\n\n저는 개인 프로젝트를 진행하던 중 특정 요소 위에 커서가 있을 때 따라다니는 작은 원을 가지고 싶었습니다. 이것을 어떻게 구현했는지에 대한 설명입니다.\n\n<div class=\"content-ad\"></div>\n\n## 내 요소들\n\n여기 예제의 HTML은 꽤 간단해요.\n\n```js\n<div class=\"container\">\n  <div class=\"hover-box\"></div>\n</div>\n```\n\n요소는 단 두 개뿐이에요. 하나는 마우스를 올렸을 때 커서 추적기가 나타나길 원하는 요소이고, 다른 하나는 호버 박스를 가운데 정렬하기 위한 컨테이너 요소예요.\n\n<div class=\"content-ad\"></div>\n\n## 일부 스타일링\n\n여기에 상자와 컨테이너에 적용한 스타일이 있어. 나는 상자를 화면 중앙에 배치하고 싶었어.\n\n```js\n:root {\n  background-color: black;\n}\n\n.container {\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.hover-box {\n  background-color: #32A1F0;\n  --hover-box-height: 200px;\n  height: var(--hover-box-height);\n  width: var(--hover-box-height);\n  border-radius: 1em;\n}\n```\n\n# 시작해볼까요?\n\n<div class=\"content-ad\"></div>\n\n나는 호버 시 나타나는 가상 요소를 사용하기로 결정했어요. translate를 사용하여 가상 요소를 이동시키고 CSS 변수를 사용하여 커서 위치를 추적했어요.\n\n```js\n.hover-box:hover::before {\n  --cursor-tracker-diameter: 24px;\n  background-color: red;\n  opacity: 0.5;\n  height: var(--cursor-tracker-diameter);\n  width: var(--cursor-tracker-diameter);\n  border-radius: var(--cursor-tracker-diameter);\n  content: \"\";\n  translate: var(--x) var(--y);\n}\n```\n\n## 커서 위치 추적하기\n\n\"mousemove\" 이벤트를 사용하여 호버 박스 내에서 마우스가 움직일 때를 추적할 수 있어요. x와 y 오프셋을 얻어와 CSS 변수로 설정했어요.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst hoverBox = document.querySelector('.hover-box');\n\nhoverBox.addEventListener('mousemove', (event) => {\n  const x = event.offsetX;\n  const y = event.offsetY;\n  hoverBox.style.setProperty('--x', `${x}px`);\n  hoverBox.style.setProperty('--y', `${y}px`);\n})\n```\n\n## 어디 있죠?\n\n이 시점에서는 커서 추적기가 전혀 나타나지 않았습니다. 몇 가지 시도를 한 후에 가상 요소에 display: flex를 추가하면 나타난다는 것을 발견했습니다. 정확히 왜 이것이 작동하는지는 모르지만, ::before 가상 요소의 기본 표시가 인라인인 것과 관련이 있을 것으로 생각됩니다.\n\n```js\n.hover-box:hover::before {\n  --cursor-tracker-diameter: 24px;\n  background-color: red;\n  opacity: 0.5;\n  height: var(--cursor-tracker-diameter);\n  width: var(--cursor-tracker-diameter);\n  border-radius: var(--cursor-tracker-diameter);\n  content: \"\";\n  translate: var(--x) var(--y);\n  display: block;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 원을 조정하기\n\n<img src=\"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_0.png\" />\n\n그겢은 제가 원하는 것과 조금 다릅니다. X와 Y를 어떤 값으로 설정해야 마우스 커서가 원의 가운데에 위치하게 할 수 있는지 조정해 봅시다.\n\n```js\nhoverBox.addEventListener('mousemove', (event) => {\n  const x = event.offsetX - 8;\n  const y = event.offsetY - 7;\n  hoverBox.style.setProperty('--x', `${x}px`);\n  hoverBox.style.setProperty('--y', `${y}px`);\n})\n```\n\n<div class=\"content-ad\"></div>\n\n그것을 좀 더 다뤄 본 후에, 왼쪽으로 8 픽셀 올려서 7 픽셀 올리는 것이 가장 나에게 적합하다고 판단했어.\n\n<img src=\"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_1.png\" />\n\n## 계속해서 커서를 따라옵니다!\n\n가끔 커서 추적기가 요소 바깥에서 커서를 추적하는 것을 알게 되었어.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_2.png\" />\n\n박스 밖에 나오지 않도록 하기 위해 호버 박스에 overflow: hidden을 추가했어요.\n\n```js\n.hover-box {\n  background-color: #32A1F0;\n  --hover-box-height: 200px;\n  height: var(--hover-box-height);\n  width: var(--hover-box-height);\n  border-radius: 1em;\n  overflow: hidden;\n}\n```\n\n# 이제 완료되었어요!\n\n<div class=\"content-ad\"></div>\n\n그 정도면 괜찮을 거에요! 도움이 되었으면 좋겣네요.","ogImage":{"url":"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_0.png"},"coverImage":"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"간략한 내용\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기 코드만 보고 싶다면 제 Codepen을 확인하세요!\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"배경\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저는 개인 프로젝트를 진행하던 중 특정 요소 위에 커서가 있을 때 따라다니는 작은 원을 가지고 싶었습니다. 이것을 어떻게 구현했는지에 대한 설명입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"내 요소들\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기 예제의 HTML은 꽤 간단해요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"container\\\"\"\n        }), \">\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"hover-box\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"요소는 단 두 개뿐이에요. 하나는 마우스를 올렸을 때 커서 추적기가 나타나길 원하는 요소이고, 다른 하나는 호버 박스를 가운데 정렬하기 위한 컨테이너 요소예요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"일부 스타일링\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기에 상자와 컨테이너에 적용한 스타일이 있어. 나는 상자를 화면 중앙에 배치하고 싶었어.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\":root {\\n  background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": black;\\n}\\n\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"container\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": 100vh;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"display\"\n        }), \": flex;\\n  justify-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"content\"\n        }), \": center;\\n  align-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"items\"\n        }), \": center;\\n}\\n\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"hover\"\n        }), \"-box {\\n  background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #32A1F0;\\n  --hover-box-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": 200px;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--hover-box-height);\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"width\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--hover-box-height);\\n  border-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"radius\"\n        }), \": 1em;\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"시작해볼까요?\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나는 호버 시 나타나는 가상 요소를 사용하기로 결정했어요. translate를 사용하여 가상 요소를 이동시키고 CSS 변수를 사용하여 커서 위치를 추적했어요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"hover\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"box\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"hover\"\n        }), \"::before {\\n  --cursor-tracker-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"diameter\"\n        }), \": 24px;\\n  background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": red;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"opacity\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.5\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--cursor-tracker-diameter);\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"width\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--cursor-tracker-diameter);\\n  border-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"radius\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--cursor-tracker-diameter);\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"content\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"translate\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--x) \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--y);\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"커서 위치 추적하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"mousemove\\\" 이벤트를 사용하여 호버 박스 내에서 마우스가 움직일 때를 추적할 수 있어요. x와 y 오프셋을 얻어와 CSS 변수로 설정했어요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" hoverBox = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"querySelector\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'.hover-box'\"\n        }), \");\\n\\nhoverBox.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'mousemove'\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"event\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" x = event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offsetX\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" y = event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offsetY\"\n        }), \";\\n  hoverBox.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"style\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setProperty\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'--x'\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${x}\"\n          }), \"px`\"]\n        }), \");\\n  hoverBox.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"style\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setProperty\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'--y'\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${y}\"\n          }), \"px`\"]\n        }), \");\\n})\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"어디 있죠?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 시점에서는 커서 추적기가 전혀 나타나지 않았습니다. 몇 가지 시도를 한 후에 가상 요소에 display: flex를 추가하면 나타난다는 것을 발견했습니다. 정확히 왜 이것이 작동하는지는 모르지만, ::before 가상 요소의 기본 표시가 인라인인 것과 관련이 있을 것으로 생각됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"hover\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"box\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"hover\"\n        }), \"::before {\\n  --cursor-tracker-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"diameter\"\n        }), \": 24px;\\n  background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": red;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"opacity\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.5\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--cursor-tracker-diameter);\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"width\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--cursor-tracker-diameter);\\n  border-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"radius\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--cursor-tracker-diameter);\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"content\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"translate\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--x) \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--y);\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"display\"\n        }), \": block;\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"원을 조정하기\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그겢은 제가 원하는 것과 조금 다릅니다. X와 Y를 어떤 값으로 설정해야 마우스 커서가 원의 가운데에 위치하게 할 수 있는지 조정해 봅시다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"hoverBox.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'mousemove'\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"event\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" x = event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offsetX\"\n        }), \" - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" y = event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"offsetY\"\n        }), \" - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \";\\n  hoverBox.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"style\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setProperty\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'--x'\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${x}\"\n          }), \"px`\"]\n        }), \");\\n  hoverBox.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"style\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setProperty\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'--y'\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${y}\"\n          }), \"px`\"]\n        }), \");\\n})\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그것을 좀 더 다뤄 본 후에, 왼쪽으로 8 픽셀 올려서 7 픽셀 올리는 것이 가장 나에게 적합하다고 판단했어.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_1.png\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"계속해서 커서를 따라옵니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가끔 커서 추적기가 요소 바깥에서 커서를 추적하는 것을 알게 되었어.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-02-HowToCreateaCircleThatFollowstheCursorinCSS_2.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"박스 밖에 나오지 않도록 하기 위해 호버 박스에 overflow: hidden을 추가했어요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"hover\"\n        }), \"-box {\\n  background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #32A1F0;\\n  --hover-box-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": 200px;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--hover-box-height);\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"width\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"var\"\n        }), \"(--hover-box-height);\\n  border-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"radius\"\n        }), \": 1em;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"overflow\"\n        }), \": hidden;\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"이제 완료되었어요!\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그 정도면 괜찮을 거에요! 도움이 되었으면 좋겣네요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}