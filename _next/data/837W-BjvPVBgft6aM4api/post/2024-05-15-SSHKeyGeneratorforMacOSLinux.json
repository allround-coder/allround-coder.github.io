{"pageProps":{"post":{"title":"맥OS 및 리눅스용 SSH 키 생성기","description":"","date":"2024-05-15 03:50","slug":"2024-05-15-SSHKeyGeneratorforMacOSLinux","content":"\n\n<img src=\"/assets/img/2024-05-15-SSHKeyGeneratorforMacOSLinux_0.png\" />\n\n우선, 제 코딩 인생에서 좋아하는 인용구부터 시작하겠어요:\n“어떤 일을 6분 동안 수동으로 할 때 6시간을 써서 자동화를 실패하는 것이 더 나을 때가 있다.\" — Zhuowei Zhang\n\n대부분의 개발자들이 SSH 키를 생성하고 연결하는 방법에 대해 문서를 참고해 왔을 겁니다. 지난 3년간 이 프로세스를 4~5번 되풀이했는데, 총 40~50분 정도 걸렸어요. 결국, 이러한 과업을 다시 찾아보지 않도록 스크립트를 작성하기로 결심했습니다. 아래에는 해당 스크립트를 공유하고 있어요. \"your_remote_server_url\"을(를) 실제 원격 서버 URL로 교체해 주시기 바랍니다.\n\n```js\n#!/bin/bash\n\n# Command existence 확인하는 함수\ncommand_exists() {\n  command -v \"$1\" >/dev/null 2>&1\n}\n\n# 현재 운영 체제 감지\nif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n  # macOS\n  CLIP_CMD=\"pbcopy\"\nelif [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n  # Linux\n  if command_exists \"xclip\"; then\n    CLIP_CMD=\"xclip -selection clipboard\"\n  elif command_exists \"xsel\"; then\n    CLIP_CMD=\"xsel --clipboard\"\n  else\n    echo \"클립보드 유틸리티(xclip 또는 xsel)를 찾을 수 없습니다. 계속 진행하려면 설치해 주세요.\"\n    exit 1\n  fi\nelif [[ \"$OSTYPE\" == \"msys\" || \"$OSTYPE\" == \"cygwin\" ]]; then\n  # Windows (Cygwin 또는 MSYS)\n  echo \"Windows에서는 클립보드 복사 명령을 지원하지 않습니다.\"\n  echo \"SSH 키를 수동으로 복사해 주세요.\"\n  CLIP_CMD=\":\"\nelse\n  echo \"지원되지 않는 운영 체제입니다.\"\n  exit 1\nfi\n\n# 사용자에게 GitHub 이메일 입력 요청\nread -p \"GitHub 이메일 주소를 입력하세요: \" email\n\n# SSH 키 생성\nssh-keygen -t rsa -b 4096 -C \"$email\"\n\n# SSH 키를 클립보드에 복사\ncat ~/.ssh/id_rsa.pub | $CLIP_CMD\n\n# 사용자에게 SSH 키가 클립보드에 복사되었음을 알림\necho \"SSH 키가 클립보드에 복사되었습니다.\"\n\n# GitHub 설정 페이지를 기본 브라우저에서 열기 (macOS 및 Linux 전용)\nif [[ \"$OSTYPE\" == \"darwin\"* || \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n  echo \"기본 브라우저에서 GitHub 설정 페이지를 엽니다...\"\n  open \"https://github.com/settings/ssh\" # 여기에 원격 서버 URL이 있어요\nfi\n\necho \"SSH 키를 GitHub 계정에 추가해 주세요.\"\n```\n\n\n\n원하는대로 스크립트를 수정하십시오!","ogImage":{"url":"/assets/img/2024-05-15-SSHKeyGeneratorforMacOSLinux_0.png"},"coverImage":"/assets/img/2024-05-15-SSHKeyGeneratorforMacOSLinux_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-15-SSHKeyGeneratorforMacOSLinux_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우선, 제 코딩 인생에서 좋아하는 인용구부터 시작하겠어요:\\n“어떤 일을 6분 동안 수동으로 할 때 6시간을 써서 자동화를 실패하는 것이 더 나을 때가 있다.\\\" — Zhuowei Zhang\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"대부분의 개발자들이 SSH 키를 생성하고 연결하는 방법에 대해 문서를 참고해 왔을 겁니다. 지난 3년간 이 프로세스를 4~5번 되풀이했는데, 총 40~50분 정도 걸렸어요. 결국, 이러한 과업을 다시 찾아보지 않도록 스크립트를 작성하기로 결심했습니다. 아래에는 해당 스크립트를 공유하고 있어요. \\\"your_remote_server_url\\\"을(를) 실제 원격 서버 URL로 교체해 주시기 바랍니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"#!\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/bin/\"\n        }), \"bash\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Command\"\n        }), \" existence 확인하는 함수\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"command_exists\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  command -v \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$1\\\"\"\n        }), \" >\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/dev/\"\n        }), _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \">&\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\n}\\n\\n# 현재 운영 체제 감지\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" [[ \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$OSTYPE\\\"\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"darwin\\\"\"\n        }), \"* ]]; then\\n  # macOS\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CLIP_CMD\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"pbcopy\\\"\"\n        }), \"\\nelif [[ \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$OSTYPE\\\"\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"linux-gnu\\\"\"\n        }), \"* ]]; then\\n  # \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Linux\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" command_exists \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"xclip\\\"\"\n        }), \"; then\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CLIP_CMD\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"xclip -selection clipboard\\\"\"\n        }), \"\\n  elif command_exists \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"xsel\\\"\"\n        }), \"; then\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CLIP_CMD\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"xsel --clipboard\\\"\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \"\\n    echo \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"클립보드 유틸리티(xclip 또는 xsel)를 찾을 수 없습니다. 계속 진행하려면 설치해 주세요.\\\"\"\n        }), \"\\n    exit \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\n  fi\\nelif [[ \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$OSTYPE\\\"\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"msys\\\"\"\n        }), \" || \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$OSTYPE\\\"\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"cygwin\\\"\"\n        }), \" ]]; then\\n  # \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Windows\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Cygwin\"\n        }), \" 또는 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"MSYS\"\n        }), \")\\n  echo \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Windows에서는 클립보드 복사 명령을 지원하지 않습니다.\\\"\"\n        }), \"\\n  echo \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"SSH 키를 수동으로 복사해 주세요.\\\"\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CLIP_CMD\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\":\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \"\\n  echo \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"지원되지 않는 운영 체제입니다.\\\"\"\n        }), \"\\n  exit \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\nfi\\n\\n# 사용자에게 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GitHub\"\n        }), \" 이메일 입력 요청\\nread -p \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"GitHub 이메일 주소를 입력하세요: \\\"\"\n        }), \" email\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SSH\"\n        }), \" 키 생성\\nssh-keygen -t rsa -b \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4096\"\n        }), \" -C \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$email\\\"\"\n        }), \"\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SSH\"\n        }), \" 키를 클립보드에 복사\\ncat ~\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/.ssh/i\"\n        }), \"d_rsa.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pub\"\n        }), \" | $CLIP_CMD\\n\\n# 사용자에게 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SSH\"\n        }), \" 키가 클립보드에 복사되었음을 알림\\necho \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"SSH 키가 클립보드에 복사되었습니다.\\\"\"\n        }), \"\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GitHub\"\n        }), \" 설정 페이지를 기본 브라우저에서 열기 (macOS 및 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Linux\"\n        }), \" 전용)\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" [[ \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$OSTYPE\\\"\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"darwin\\\"\"\n        }), \"* || \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$OSTYPE\\\"\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"linux-gnu\\\"\"\n        }), \"* ]]; then\\n  echo \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"기본 브라우저에서 GitHub 설정 페이지를 엽니다...\\\"\"\n        }), \"\\n  open \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"https://github.com/settings/ssh\\\"\"\n        }), \" # 여기에 원격 서버 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"URL\"\n        }), \"이 있어요\\nfi\\n\\necho \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"SSH 키를 GitHub 계정에 추가해 주세요.\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"원하는대로 스크립트를 수정하십시오!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}