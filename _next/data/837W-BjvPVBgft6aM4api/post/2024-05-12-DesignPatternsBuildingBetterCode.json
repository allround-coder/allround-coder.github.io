{"pageProps":{"post":{"title":"디자인 패턴 더 나은 코드 작성하기","description":"","date":"2024-05-12 23:46","slug":"2024-05-12-DesignPatternsBuildingBetterCode","content":"\n\n<img src=\"/assets/img/2024-05-12-DesignPatternsBuildingBetterCode_0.png\" />\n\n## 소개\n\n소프트웨어 개발 세계에서 효율적이고 유지보수 가능하며 확장 가능한 코드를 작성하는 것이 매우 중요합니다. 하지만 프로젝트가 복잡해지면 이를 관리하는 것이 점점 어려워집니다. 여기서 디자인 패턴이 필요해집니다.\n\n## 디자인 패턴이란 무엇인가요?\n\n\n\n디자인 패턴은 코딩에서 흔히 발생하는 문제에 대한 준비된 솔루션과 같아요. 그들은 개발자들이 항상 직면하는 까다로운 코딩 퍼즐을 해결하기 위한 레시피 같습니다. 요리를 할 때 레시피를 사용하는 것처럼, 개발자들은 디자인 패턴을 사용하여 똑똑한 방식으로 코드를 작성해요.\n\n## 디자인 패턴을 사용하는 이유는?\n\n디자인 패턴은 유용합니다:\n\n코드 재사용성: 재사용 가능한 솔루션을 제공하기 때문에, 개발자들은 문제를 만날 때마다 바퀴를 다시 발명할 필요가 없어요.\n\n\n\n# 확장성: 새로운 기능을 추가하거나 프로젝트의 규모를 확장하는 데 도움을 줍니다. 이렇게 함으로서 코드를 엉망으로 만들지 않고 처리할 수 있습니다.\n\n# 유지보수성: 프로젝트가 시간이 지나도 코드를 조직화하고 이해하기 쉽게 도와줍니다.\n\n# 오류 감소: 정해진 패턴을 따름으로써 개발자는 흔한 실수와 버그를 피할 수 있습니다.\n\n# 성능 향상: 디자인 패턴은 효율적인 코딩 방법을 장려하여 더 나은 성능의 소프트웨어로 이끕니다.\n\n\n\n협업: 여러 개발자가 동일한 코드베이스에서 작업하기가 더 쉽습니다. 팀워크와 생산성을 촉진합니다.\n\n## 디자인 패턴의 종류\n\n주요 세 가지 유형이 있습니다:\n\n생성 패턴: 이러한 패턴은 객체가 어떻게 생성되는지 다룹니다. 객체를 언제, 어떻게 생성할지 결정하는 데 도움이 됩니다. 코드의 유연성과 성능을 향상시킬 수 있습니다.\n\n\n\n구조 패턴: 이러한 패턴은 클래스와 객체가 대형 구조를 형성하는 방식에 중점을 둡니다. 코드를 이해하고 유지 관리하기 쉬운 방식으로 구조화하는 데 도움을 줍니다.\n\n행동 패턴: 이러한 패턴은 객체 간의 통신 방식을 정의합니다. 코드를 유연하고 결합도가 낮은 방식으로 설계할 수 있게 도와줍니다. 이는 코드의 다른 부분이 서로에게 지나치게 의존하지 않도록 합니다.\n\n## 일반적으로 사용되는 디자인 패턴\n\n생성 패턴:\n\n\n\n- 팩토리 메서드: 이 패턴은 구체적으로 인스턴스화할 클래스를 지정하지 않고 객체를 생성하는 데 도움을 줍니다. 이는 느슨한 결합을 촉진하고 코드를 더 유연하게 만듭니다.\n\n```js\n{\nclass Fruit {\nconstructor(name) {\nthis.name = name;\n}\neat() {\nconsole.log(`${this.name}을(를) 먹는 중`);\n}\n}\nclass FruitStand {\nstatic create(name) {\nreturn new Fruit(name);\n}\n}\nconst fruit1 = FruitStand.create(\"사과\");\nconst fruit2 = FruitStand.create(\"오렌지\");\nfruit1.eat(); // 사과를 먹는 중\nfruit2.eat(); // 오렌지를 먹는 중\n}\n```\n\n- 싱글톤: 이 패턴은 클래스가 하나의 인스턴스만 가지도록 보장하고 해당 인스턴스에 대한 전역 액세스 지점을 제공합니다. 설정 또는 로깅에 유용하지만 남용하면 결합이 강화될 수 있으므로 삼가 사용하세요.\n\n```js\nclass Singleton {\nconstructor() {\nif (Singleton.instance) {\nreturn Singleton.instance;\n}\nSingleton.instance = this;\n}\n// 여기에 코드 작성\n}\nmodule.exports = Singleton;\n```\n\n\n\n프론트엔드 개발자님 안녕하세요!\n\n- Builder: 복합 객체의 생성을 표현으로부터 분리하여 동일한 생성 프로세스가 다양한 표현을 만들 수 있게 합니다. 많은 선택적 매개변수나 구성을 갖는 객체를 다룰 때 매우 유용합니다.\n\n구조 패턴:\n\n- Adapter: 이 패턴을 사용하면 호환되지 않는 인터페이스끼리 함께 작동할 수 있습니다. 서로 다른 인터페이스를 가진 두 클래스 사이에 다리 역할을 합니다.\n\n```js\n// 기존 Animal 클래스\nclass Animal {\nconstructor(name) {\nthis.name = name;\n}\nspeak() {\nconsole.log(`${this.name} makes a sound.`);\n}\n}\n// Adapter 클래스\nclass LionAdapter {\nconstructor(animal) {\nthis.animal = animal;\n}\nroar() {\nconsole.log(`${this.animal.name} roars loudly!`);\n}\n}\n// 사용법\nconst genericAnimal = new Animal(\"일반 동물\");\nconst lion = new LionAdapter(genericAnimal);\nlion.roar(); // 일반 동물이 크게 웁니다!\n```\n\n\n\n- 데코레이터: 이 패턴은 기존 객체에 동적으로 새로운 기능을 추가합니다. 핵심 기능을 수정하지 않고 여러 데코레이터를 추가할 수 있습니다.\n\n행동 패턴:\n\n- 옵저버: 이 패턴은 객체 간의 일대다 종속성을 정의합니다. 한 객체의 상태 변경 시 모든 종속 객체에게 알립니다. 이는 이벤트 처리나 실시간 업데이트와 같은 기능을 구현하는 데 유용합니다.\n\n```js\nclass FruitObserver {\nconstructor() {\nthis.observers = [];\n}\nsubscribe(fn) {\nthis.observers.push(fn);\n}\nunsubscribe(fn) {\nthis.observers = this.observers.filter(fruitListener => fruitListener !== fn);\n}\nnotify(data) {\nthis.observers.forEach(observer => observer(data));\n}\n}\nconst fruitObserver = new FruitObserver();\nfruitObserver.subscribe(data => console.log(`Subscribed to ${data}`));\nfruitObserver.notify(\"Apple\"); // Subscribed to Apple\n```\n\n\n\n- 전략: 이 패턴은 알고리즘의 동작을 실행 중에 동적으로 변경할 수 있게 합니다. 클라이언트 코드를 수정하지 않고 다양한 전략 사이를 전환할 수 있습니다.\n\n## 결론\n\n디자인 패턴을 코드의 구성 요소로 생각해보세요. 프로그래머들이 자주 마주치는 문제에 대한 검증된 솔루션이죠. 이러한 패턴을 배움으로써, 초보자든 전문가든 상관없이 빠르게 더 좋은 코드를 작성할 수 있습니다.\n\n읽어주셔서 감사합니다! 🎉","ogImage":{"url":"/assets/img/2024-05-12-DesignPatternsBuildingBetterCode_0.png"},"coverImage":"/assets/img/2024-05-12-DesignPatternsBuildingBetterCode_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-DesignPatternsBuildingBetterCode_0.png\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"소개\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"소프트웨어 개발 세계에서 효율적이고 유지보수 가능하며 확장 가능한 코드를 작성하는 것이 매우 중요합니다. 하지만 프로젝트가 복잡해지면 이를 관리하는 것이 점점 어려워집니다. 여기서 디자인 패턴이 필요해집니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"디자인 패턴이란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"디자인 패턴은 코딩에서 흔히 발생하는 문제에 대한 준비된 솔루션과 같아요. 그들은 개발자들이 항상 직면하는 까다로운 코딩 퍼즐을 해결하기 위한 레시피 같습니다. 요리를 할 때 레시피를 사용하는 것처럼, 개발자들은 디자인 패턴을 사용하여 똑똑한 방식으로 코드를 작성해요.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"디자인 패턴을 사용하는 이유는?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"디자인 패턴은 유용합니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드 재사용성: 재사용 가능한 솔루션을 제공하기 때문에, 개발자들은 문제를 만날 때마다 바퀴를 다시 발명할 필요가 없어요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"확장성: 새로운 기능을 추가하거나 프로젝트의 규모를 확장하는 데 도움을 줍니다. 이렇게 함으로서 코드를 엉망으로 만들지 않고 처리할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"유지보수성: 프로젝트가 시간이 지나도 코드를 조직화하고 이해하기 쉽게 도와줍니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"오류 감소: 정해진 패턴을 따름으로써 개발자는 흔한 실수와 버그를 피할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"성능 향상: 디자인 패턴은 효율적인 코딩 방법을 장려하여 더 나은 성능의 소프트웨어로 이끕니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"협업: 여러 개발자가 동일한 코드베이스에서 작업하기가 더 쉽습니다. 팀워크와 생산성을 촉진합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"디자인 패턴의 종류\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"주요 세 가지 유형이 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"생성 패턴: 이러한 패턴은 객체가 어떻게 생성되는지 다룹니다. 객체를 언제, 어떻게 생성할지 결정하는 데 도움이 됩니다. 코드의 유연성과 성능을 향상시킬 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구조 패턴: 이러한 패턴은 클래스와 객체가 대형 구조를 형성하는 방식에 중점을 둡니다. 코드를 이해하고 유지 관리하기 쉬운 방식으로 구조화하는 데 도움을 줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"행동 패턴: 이러한 패턴은 객체 간의 통신 방식을 정의합니다. 코드를 유연하고 결합도가 낮은 방식으로 설계할 수 있게 도와줍니다. 이는 코드의 다른 부분이 서로에게 지나치게 의존하지 않도록 합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"일반적으로 사용되는 디자인 패턴\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"생성 패턴:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"팩토리 메서드: 이 패턴은 구체적으로 인스턴스화할 클래스를 지정하지 않고 객체를 생성하는 데 도움을 줍니다. 이는 느슨한 결합을 촉진하고 코드를 더 유연하게 만듭니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"{\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Fruit\"\n        }), \" {\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"name\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \" = name;\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"eat\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`\", _jsxs(_components.span, {\n            className: \"hljs-subst\",\n            children: [\"${\", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"this\"\n            }), \".name}\"]\n          }), \"을(를) 먹는 중`\"]\n        }), \");\\n}\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FruitStand\"\n        }), \" {\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"static\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"name\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Fruit\"\n        }), \"(name);\\n}\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" fruit1 = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FruitStand\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"사과\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" fruit2 = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FruitStand\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"오렌지\\\"\"\n        }), \");\\nfruit1.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"eat\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사과를 먹는 중\"\n        }), \"\\nfruit2.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"eat\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 오렌지를 먹는 중\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"싱글톤: 이 패턴은 클래스가 하나의 인스턴스만 가지도록 보장하고 해당 인스턴스에 대한 전역 액세스 지점을 제공합니다. 설정 또는 로깅에 유용하지만 남용하면 결합이 강화될 수 있으므로 삼가 사용하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Singleton\"\n        }), \" {\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Singleton\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"instance\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Singleton\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"instance\"\n        }), \";\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Singleton\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"instance\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \";\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 여기에 코드 작성\"\n        }), \"\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Singleton\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"프론트엔드 개발자님 안녕하세요!\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Builder: 복합 객체의 생성을 표현으로부터 분리하여 동일한 생성 프로세스가 다양한 표현을 만들 수 있게 합니다. 많은 선택적 매개변수나 구성을 갖는 객체를 다룰 때 매우 유용합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구조 패턴:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Adapter: 이 패턴을 사용하면 호환되지 않는 인터페이스끼리 함께 작동할 수 있습니다. 서로 다른 인터페이스를 가진 두 클래스 사이에 다리 역할을 합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 기존 Animal 클래스\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Animal\"\n        }), \" {\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"name\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \" = name;\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"speak\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`\", _jsxs(_components.span, {\n            className: \"hljs-subst\",\n            children: [\"${\", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"this\"\n            }), \".name}\"]\n          }), \" makes a sound.`\"]\n        }), \");\\n}\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Adapter 클래스\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LionAdapter\"\n        }), \" {\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"animal\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"animal\"\n        }), \" = animal;\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"roar\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`\", _jsxs(_components.span, {\n            className: \"hljs-subst\",\n            children: [\"${\", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"this\"\n            }), \".animal.name}\"]\n          }), \" roars loudly!`\"]\n        }), \");\\n}\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용법\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" genericAnimal = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Animal\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"일반 동물\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" lion = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LionAdapter\"\n        }), \"(genericAnimal);\\nlion.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"roar\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 일반 동물이 크게 웁니다!\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"데코레이터: 이 패턴은 기존 객체에 동적으로 새로운 기능을 추가합니다. 핵심 기능을 수정하지 않고 여러 데코레이터를 추가할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"행동 패턴:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"옵저버: 이 패턴은 객체 간의 일대다 종속성을 정의합니다. 한 객체의 상태 변경 시 모든 종속 객체에게 알립니다. 이는 이벤트 처리나 실시간 업데이트와 같은 기능을 구현하는 데 유용합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FruitObserver\"\n        }), \" {\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"observers\"\n        }), \" = [];\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"fn\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"observers\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(fn);\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"unsubscribe\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"fn\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"observers\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"observers\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"fruitListener\"\n          }), \" =>\"]\n        }), \" fruitListener !== fn);\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"notify\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"data\"\n        }), \") {\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"observers\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"forEach\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"observer\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"observer\"\n        }), \"(data));\\n}\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" fruitObserver = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FruitObserver\"\n        }), \"();\\nfruitObserver.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"data\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`Subscribed to \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${data}\"\n          }), \"`\"]\n        }), \"));\\nfruitObserver.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"notify\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Apple\\\"\"\n        }), \"); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Subscribed to Apple\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"전략: 이 패턴은 알고리즘의 동작을 실행 중에 동적으로 변경할 수 있게 합니다. 클라이언트 코드를 수정하지 않고 다양한 전략 사이를 전환할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"디자인 패턴을 코드의 구성 요소로 생각해보세요. 프로그래머들이 자주 마주치는 문제에 대한 검증된 솔루션이죠. 이러한 패턴을 배움으로써, 초보자든 전문가든 상관없이 빠르게 더 좋은 코드를 작성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"읽어주셔서 감사합니다! 🎉\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}