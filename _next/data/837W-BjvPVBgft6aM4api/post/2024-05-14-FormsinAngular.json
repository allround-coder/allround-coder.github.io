{"pageProps":{"post":{"title":"Angular에서 양식Form","description":"","date":"2024-05-14 14:30","slug":"2024-05-14-FormsinAngular","content":"\n\n<img src=\"/assets/img/2024-05-14-FormsinAngular_0.png\" />\n\n안녕하세요! 이번 글에서는 Angular에서 양식과 그 종류에 관해 단계별 실제 구현과 함께 살펴보려고 해요.\n\n# 안내\n\n- Angular란 무엇인가요?\n\n\n\n## Angular에서의 폼\n\n## 폼의 종류\n\n## 실무 적용\n\n### Prerequisites\n\n\n\n- TypeScript에 대한 기본적인 이해\n\n- NodeJS\n\n- Angular CLI\n\n- Vs Code\n\n\n\n# 앵귤러란?\n\n앵귤러는 웹 애플리케이션을 구축하는 인기 있는 오픈 소스 JavaScript 프레임워크입니다. 구글에서 개발되었으며 현재는 구글의 앵귤러 팀에서 유지보수되고 있습니다. 앵귴러는 개발자들이 동적인 싱글 페이지 애플리케이션(SPA)을 만들 수 있게 하며 복잡한 웹 애플리케이션을 구축하기 위한 체계적인 접근 방식을 제공합니다.\n\n# 앵귤러에서의 폼\n\n- 앵귤러에서 폼은 사용자 입력을 처리하고 관리하는 데 도움이 되는 다양한 기능을 제공합니다.\n\n\n\n- 웹 애플리케이션의 주요 부분인 Forms. 사용자들이 애플리케이션과 상호 작용하고 애플리케이션으로 데이터를 제출할 수 있게 합니다.\n\n## Angular에서 제공하는 Forms의 종류\n\nAngular는 다음 두 가지 유형의 Forms를 제공합니다:\n\n### 1. Template-Driven Forms\n\n\n\n- 템플릿 기반 폼은 제한된 수의 필드 및 간단한 유효성 검사를 개발하기에 적합한 기본 폼입니다.\n\n- 이 폼에서 각 필드는 컴포넌트 클래스의 속성으로 표시됩니다.\n\n- '@angular/forms' 패키지에서 FormsModule를 가져와야 합니다.\n\n다음은 Angular에서 템플릿 기반 폼을 생성하는 동안 사용하는 유효성 검사 객체, 지시문, 속성과 관련된 주요 개념입니다.\n\n\n\n- ngForm 디렉티브: 이 디렉티브는 Angular 폼을 나타내며 유효성 검사 및 데이터 조작과 관련된 메서드 및 속성을 노출합니다.\n\n- ngModel 디렉티브: 이 디렉티브는 서로 다른 폼 컨트롤 요소 간의 양방향 데이터 바인딩을 달성하는 데 사용됩니다.\n\n- 유효성 검사 속성: Angular는 폼 컨트롤에 적용할 수있는 다양한 유효성 검사기 속성을 제공합니다.\n\n1. touched: 해당 컨트롤이 터치되었는지를 나타내는 부울 값입니다.\n\n\n\n2. untouched: 터치되지 않은 상태\n\n3. valid: 컨트롤 값이 유효한지 나타내는 부울 값.\n\n4. invalid: valid의 반대\n\n- 유효성 검사 디렉티브: Angular는 몇 가지 내장 유효성 검사 디렉티브를 제공하여 ngModel과 함께 사용하여 유효성 검사를 수행할 수 있습니다. 일반적으로 사용되는 몇 가지 디렉티브에는 다음이 있습니다:\n\n\n\n1. required: 값이 비어 있지 않도록 보장합니다.\n\n2. min length 및 max length: 값의 최소 및 최대 길이를 지정합니다.\n\n3. pattern: 값을 정규 표현식과 비교합니다.\n\n4. email: 값이 유효한 이메일 주소인지 확인합니다.\n\n\n\n## 2. 반응형 폼\n\n- 반응형 폼 또는 모델 기반 폼은 Angular에서 큰 양의 폼을 만들거나 다양한 폼 필드 및 복잡한 검증이 필요한 경우에 적합한 종류의 폼입니다.\n\n- 반응형 폼에서, 각 폼 필드는 Form Control로 간주되며, 폼 컨트롤 집합은 Form Group이라고 합니다.\n\n- 검증 규칙은 Validators 객체를 사용하여 컴포넌트에서 정의되며, 검증 메시지는 템플릿에서 validation 속성을 사용하여 표시할 수 있습니다.\n\n\n\n· ReactiveFormModule은 '@angular/forms' 패키지에서 가져와야 합니다.\n\nAngular에서 반응형 폼을 생성하는 동안 사용된 유효성 객체 및 속성과 관련된 주요 개념은 다음과 같습니다.\n\n· FormControl\n\nAngular에서 폼 컨트롤은 반응형 폼에서 개별 폼 요소를 나타냅니다. 또한 입력 폼 요소의 다른 상태와 값들을 관리합니다. 유효성 규칙을 정의할 수 있는 다양한 속성이 있습니다.\n\n\n\n1. Value: 양식 컨트롤의 현재 값을 확인하는 데 도움을 줍니다.\n\n2. Status: 상태는 양식 컨트롤의 상태를 나타냅니다.\n\n3. Valid: 컨트롤이 유효한지를 확인하는 부울 유효성 속성입니다.\n\n4. Invalid: 컨트롤이 유효하지 않은지를 확인하는 부울 유효성 속성입니다.\n\n\n\n5. 에러: 이는 폼 컨트롤의 유효성 검증 오류를 보유한 객체입니다.\n\n- **Validators**\n\nValidators는 폼 컨트롤의 유효성 검증 규칙을 정의하는 데 사용할 수 있는 함수들입니다.\n\n1. required: 컨트롤이 비어있지 않은 값을 가지고 있는지를 검증합니다.\n\n\n\n2. Min(최소값) 및 max(최대값): 컨트롤 값이 지정된 숫자 범위 내에 있는지 확인합니다.\n\n3. pattern(패턴): 컨트롤 값이 정규 표현식과 일치하는지 확인합니다.\n\n4. email(이메일): 컨트롤 값이 유효한 이메일 주소인지 확인합니다.\n\n5. minLength(최소길이) 및 maxLength(최대길이): 컨트롤 값의 길이를 확인합니다.\n\n\n\n- FormGroup\n\n폼 그룹은 여러 폼 컨트롤을 포함하는 컨테이너입니다. 관련된 폼 컨트롤을 함께 그룹화하고 단일 단위로 유효성을 관리할 수 있습니다.\n\n- FormBuilder\n\nFormBuilder 서비스는 FormGroup 및 FormControl의 인스턴스를 생성하는 데 사용되며 유효성 규칙을 정의하는 편리한 방법을 제공합니다.\n\n\n\n# 실용적인 구현\n\n단계 1\n\n새로운 Angular 애플리케이션을 생성하세요.\n\n단계 2\n\n\n\n다음 명령어를 사용하여 부트스트랩 모듈을 설치해 보세요:\n\nnpm install bootstrap\n\nAngular JSON 파일에서 Bootstrap을 구성하세요.\n\n```js\n \"styles\": [\n              \"src/styles.css\",\n              \"./node_modules/bootstrap/dist/css/bootstrap.min.css\"\n            ],\n            \"scripts\": [\n              \"./node_modules/bootstrap/dist/js/bootstrap.min.js\"\n            ]\n```\n\n\n\nStep 3\n\n다음으로, 새롭게 생성된 프로젝트에 두 개의 컴포넌트를 추가해보세요.\n\ntemplate-driven-form.component.html\n\n```js\n<div class=\"container\">\n    <h2 class=\"heading\">템플릿 기반 폼</h2>\n    <form #userForm=\"ngForm\" (ngSubmit)=\"submitForm(userForm)\">\n   \n      <div class=\"form-group\">\n        <label for=\"name\">이름</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" [(ngModel)]=\"userDetails.name\" required>\n        <div *ngIf=\"userForm.controls.name?.touched && userForm.controls.name?.invalid\" class=\"text-danger\">\n          이름을 입력해주세요.\n        </div>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"email\">이메일</label>\n        <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" [(ngModel)]=\"userDetails.email\" required email>\n        <div *ngIf=\"userForm.controls.email?.touched && userForm.controls.email?.invalid\" class=\"text-danger\">\n          올바른 이메일 주소를 입력해주세요.\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"address\">주소</label>\n        <input type=\"text\" class=\"form-control\" id=\"address\" name=\"address\" [(ngModel)]=\"userDetails.address\" required>\n        <div *ngIf=\"userForm.controls.address?.touched && userForm.controls.address?.invalid\" class=\"text-danger\">\n          주소를 입력해주세요.\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"mobile\">휴대폰 번호</label>\n        <input type=\"tel\" class=\"form-control\" id=\"mobile\" name=\"mobile\" [(ngModel)]=\"userDetails.mobile\" required pattern=\"[0-9]{10}\">\n        <div *ngIf=\"userForm.controls.mobile?.touched && userForm.controls.mobile?.invalid\" class=\"text-danger\">\n          올바른 휴대폰 번호를 입력해주세요.\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"age\">나이</label>\n        <input type=\"number\" class=\"form-control\" id=\"age\" name=\"age\" [(ngModel)]=\"userDetails.age\" required min=\"20\" max=\"60\">\n        <div *ngIf=\"userForm.controls.age?.touched && userForm.controls.age?.invalid\" class=\"text-danger\">\n          올바른 나이를 입력해주세요.\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"gender\">성별</label>\n        <select class=\"form-control\" id=\"gender\" name=\"gender\" [(ngModel)]=\"userDetails.gender\" required>\n          <option value=\"\" disabled>성별 선택</option>\n          <option value=\"male\">남성</option>\n          <option value=\"female\">여성</option>\n          <option value=\"other\">기타</option>\n        </select>\n        <div *ngIf=\"userForm.controls.gender?.touched && userForm.controls.gender?.invalid\" class=\"text-danger\">\n          성별을 선택해주세요.\n        </div>\n      </div>\n\n      <button type=\"submit\" class=\"btn btn-primary\">제출</button>\n    </form>\n  </div>\n```\n\n\n\n```js\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-template-driven-form',\n  templateUrl: './template-driven-form.component.html',\n  styleUrls: ['./template-driven-form.component.css']\n})\nexport class TemplateDrivenFormComponent {\n  userDetails = {\n    name: '',\n    email: '',\n    address: '',\n    mobile: '',\n    age: null,\n    gender: ''\n  };\n\n  submitForm(form: any): void {\n    if (form.valid) {\n      console.log('Form data:', this.userDetails);\n    }\n  }\n}\n```\n\n- 이 예제에서 #userForm=\"ngForm\"은 폼 참조를 생성하여 컴포넌트 내의 사용자 객체의 속성에 접근할 수 있도록 합니다. [(ngModel)] 지시문은 입력 요소와 사용자 객체의 속성 간에 양방향 데이터 바인딩을 설정합니다.\n\n- 유효성 검사 지시문 (required 및 email)이 폼 컨트롤에 적용되며, 오류 메시지는 컨트롤의 상태에 따라 조건부로 표시됩니다.\n```\n\n\n\n<img src=\"/assets/img/2024-05-14-FormsinAngular_1.png\" />\n\n다음으로 아래와 같이 반응형 폼을 생성하세요.\n\nreactive-form.component.html\n\n```js\n<div class=\"container\">\n    <h2 class=\"heading\">반응형 폼</h2>\n    <form [formGroup]=\"userForm\" (ngSubmit)=\"submitForm()\">\n\n        <div class=\"form-group\">\n        <label for=\"name\">이름</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" formControlName=\"name\">\n        <div *ngIf=\"userForm?.get('name')?.invalid && userForm?.get('name')?.touched\" class=\"text-danger\">\n          이름을 입력해주세요.\n        </div>\n      </div>\n  \n      <div class=\"form-group\">\n        <label for=\"email\">이메일</label>\n        <input type=\"email\" class=\"form-control\" id=\"email\" formControlName=\"email\">\n        <div *ngIf=\"userForm?.get('email')?.invalid && userForm?.get('email')?.touched\" class=\"text-danger\">\n          유효한 이메일을 입력해주세요.\n        </div>\n      </div>\n  \n      <div class=\"form-group\">\n        <label for=\"address\">주소</label>\n        <input type=\"text\" class=\"form-control\" id=\"address\" formControlName=\"address\">\n        <div *ngIf=\"userForm?.get('address')?.invalid && userForm?.get('address')?.touched\" class=\"text-danger\">\n          주소를 입력해주세요.\n        </div>\n      </div>\n  \n      <div class=\"form-group\">\n        <label for=\"mobile\">휴대전화 번호</label>\n        <input type=\"tel\" class=\"form-control\" id=\"mobile\" formControlName=\"mobile\">\n        <div *ngIf=\"userForm?.get('mobile')?.invalid && userForm?.get('mobile')?.touched\" class=\"text-danger\">\n          유효한 휴대전화 번호를 입력해주세요.\n        </div>\n      </div>\n  \n      <div class=\"form-group\">\n        <label for=\"age\">나이</label>\n        <input type=\"number\" class=\"form-control\" id=\"age\" formControlName=\"age\">\n        <div *ngIf=\"userForm?.get('age')?.invalid && userForm?.get('age')?.touched\" class=\"text-danger\">\n          유효한 나이를 입력해주세요 (1에서 120 사이).\n        </div>\n      </div>\n  \n      <div class=\"form-group\">\n        <label for=\"gender\">성별</label>\n        <select class=\"form-control\" id=\"gender\" formControlName=\"gender\">\n          <option value=\"\" disabled>성별 선택</option>\n          <option value=\"male\">남성</option>\n          <option value=\"female\">여성</option>\n          <option value=\"other\">기타</option>\n        </select>\n        <div *ngIf=\"userForm?.get('gender')?.invalid && userForm?.get('gender')?.touched\" class=\"text-danger\">\n          성별을 선택해주세요.\n        </div>\n      </div>\n  \n      <button type=\"submit\" class=\"btn btn-primary\">제출</button>\n    </form>\n  </div>\n```\n\n\n\n```js\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-reactive-form',\n  templateUrl: './reactive-form.component.html',\n  styleUrls: ['./reactive-form.component.css']\n})\nexport class ReactiveFormComponent {\n  userForm: any;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.userForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      address: ['', Validators.required],\n      mobile: ['', [Validators.required, Validators.pattern('[0-9]{10}')]],\n      age: ['', [Validators.required, Validators.min(20), Validators.max(50)]],\n      gender: ['', Validators.required]\n    });\n  }\n\n  submitForm(): void {\n    if (this.userForm?.valid) {\n      console.log('Form data:', this.userForm.value);\n    }\n  }\n}\n```\n\n![FormsinAngular_2](/assets/img/2024-05-14-FormsinAngular_2.png)\n\n# GitHub\n```\n\n\n\nhttps://github.com/Jaydeep-007/angular-forms\n\n# 결론\n\n이 글에서는 Angular에서 사용할 수 있는 양식의 기본 개념과 단계별 구현 방법, 다양한 유효성 검사기와 속성을 통해 다양한 유형의 양식을 살펴보았습니다.","ogImage":{"url":"/assets/img/2024-05-14-FormsinAngular_0.png"},"coverImage":"/assets/img/2024-05-14-FormsinAngular_0.png","tag":["Tech"],"readingTime":11},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ol: \"ol\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-FormsinAngular_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"안녕하세요! 이번 글에서는 Angular에서 양식과 그 종류에 관해 단계별 실제 구현과 함께 살펴보려고 해요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"안내\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Angular란 무엇인가요?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Angular에서의 폼\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"폼의 종류\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"실무 적용\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Prerequisites\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"TypeScript에 대한 기본적인 이해\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"NodeJS\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Angular CLI\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Vs Code\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"앵귤러란?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앵귤러는 웹 애플리케이션을 구축하는 인기 있는 오픈 소스 JavaScript 프레임워크입니다. 구글에서 개발되었으며 현재는 구글의 앵귤러 팀에서 유지보수되고 있습니다. 앵귴러는 개발자들이 동적인 싱글 페이지 애플리케이션(SPA)을 만들 수 있게 하며 복잡한 웹 애플리케이션을 구축하기 위한 체계적인 접근 방식을 제공합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"앵귤러에서의 폼\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"앵귤러에서 폼은 사용자 입력을 처리하고 관리하는 데 도움이 되는 다양한 기능을 제공합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"웹 애플리케이션의 주요 부분인 Forms. 사용자들이 애플리케이션과 상호 작용하고 애플리케이션으로 데이터를 제출할 수 있게 합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Angular에서 제공하는 Forms의 종류\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Angular는 다음 두 가지 유형의 Forms를 제공합니다:\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"1. Template-Driven Forms\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"템플릿 기반 폼은 제한된 수의 필드 및 간단한 유효성 검사를 개발하기에 적합한 기본 폼입니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"이 폼에서 각 필드는 컴포넌트 클래스의 속성으로 표시됩니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"'@angular/forms' 패키지에서 FormsModule를 가져와야 합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 Angular에서 템플릿 기반 폼을 생성하는 동안 사용하는 유효성 검사 객체, 지시문, 속성과 관련된 주요 개념입니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"ngForm 디렉티브: 이 디렉티브는 Angular 폼을 나타내며 유효성 검사 및 데이터 조작과 관련된 메서드 및 속성을 노출합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"ngModel 디렉티브: 이 디렉티브는 서로 다른 폼 컨트롤 요소 간의 양방향 데이터 바인딩을 달성하는 데 사용됩니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"유효성 검사 속성: Angular는 폼 컨트롤에 적용할 수있는 다양한 유효성 검사기 속성을 제공합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"touched: 해당 컨트롤이 터치되었는지를 나타내는 부울 값입니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"untouched: 터치되지 않은 상태\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"valid: 컨트롤 값이 유효한지 나타내는 부울 값.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"invalid: valid의 반대\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"유효성 검사 디렉티브: Angular는 몇 가지 내장 유효성 검사 디렉티브를 제공하여 ngModel과 함께 사용하여 유효성 검사를 수행할 수 있습니다. 일반적으로 사용되는 몇 가지 디렉티브에는 다음이 있습니다:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"required: 값이 비어 있지 않도록 보장합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"min length 및 max length: 값의 최소 및 최대 길이를 지정합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"pattern: 값을 정규 표현식과 비교합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"email: 값이 유효한 이메일 주소인지 확인합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. 반응형 폼\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"반응형 폼 또는 모델 기반 폼은 Angular에서 큰 양의 폼을 만들거나 다양한 폼 필드 및 복잡한 검증이 필요한 경우에 적합한 종류의 폼입니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"반응형 폼에서, 각 폼 필드는 Form Control로 간주되며, 폼 컨트롤 집합은 Form Group이라고 합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"검증 규칙은 Validators 객체를 사용하여 컴포넌트에서 정의되며, 검증 메시지는 템플릿에서 validation 속성을 사용하여 표시할 수 있습니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"· ReactiveFormModule은 '@angular/forms' 패키지에서 가져와야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Angular에서 반응형 폼을 생성하는 동안 사용된 유효성 객체 및 속성과 관련된 주요 개념은 다음과 같습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"· FormControl\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Angular에서 폼 컨트롤은 반응형 폼에서 개별 폼 요소를 나타냅니다. 또한 입력 폼 요소의 다른 상태와 값들을 관리합니다. 유효성 규칙을 정의할 수 있는 다양한 속성이 있습니다.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Value: 양식 컨트롤의 현재 값을 확인하는 데 도움을 줍니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Status: 상태는 양식 컨트롤의 상태를 나타냅니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Valid: 컨트롤이 유효한지를 확인하는 부울 유효성 속성입니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Invalid: 컨트롤이 유효하지 않은지를 확인하는 부울 유효성 속성입니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"에러: 이는 폼 컨트롤의 유효성 검증 오류를 보유한 객체입니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"Validators\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Validators는 폼 컨트롤의 유효성 검증 규칙을 정의하는 데 사용할 수 있는 함수들입니다.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"required: 컨트롤이 비어있지 않은 값을 가지고 있는지를 검증합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Min(최소값) 및 max(최대값): 컨트롤 값이 지정된 숫자 범위 내에 있는지 확인합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"pattern(패턴): 컨트롤 값이 정규 표현식과 일치하는지 확인합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"email(이메일): 컨트롤 값이 유효한 이메일 주소인지 확인합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"minLength(최소길이) 및 maxLength(최대길이): 컨트롤 값의 길이를 확인합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"FormGroup\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"폼 그룹은 여러 폼 컨트롤을 포함하는 컨테이너입니다. 관련된 폼 컨트롤을 함께 그룹화하고 단일 단위로 유효성을 관리할 수 있습니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"FormBuilder\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"FormBuilder 서비스는 FormGroup 및 FormControl의 인스턴스를 생성하는 데 사용되며 유효성 규칙을 정의하는 편리한 방법을 제공합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"실용적인 구현\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새로운 Angular 애플리케이션을 생성하세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 2\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 명령어를 사용하여 부트스트랩 모듈을 설치해 보세요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"npm install bootstrap\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Angular JSON 파일에서 Bootstrap을 구성하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"styles\\\"\"\n        }), \": [\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"src/styles.css\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./node_modules/bootstrap/dist/css/bootstrap.min.css\\\"\"\n        }), \"\\n            ],\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"scripts\\\"\"\n        }), \": [\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./node_modules/bootstrap/dist/js/bootstrap.min.js\\\"\"\n        }), \"\\n            ]\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Step 3\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음으로, 새롭게 생성된 프로젝트에 두 개의 컴포넌트를 추가해보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"template-driven-form.component.html\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"container\\\"\"\n        }), \">\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h2\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"heading\\\"\"\n            }), \">\"]\n          }), \"템플릿 기반 폼\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h2\"\n            }), \">\"]\n          })]\n        }), \"\\n    <form #userForm=\\\"ngForm\\\" (ngSubmit)=\\\"submitForm(userForm)\\\">\\n   \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">이름</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" name=\\\"name\\\" [(ngModel)]=\\\"userDetails.name\\\" required>\\n        <div *ngIf=\\\"userForm.controls.name?.touched && userForm.controls.name?.invalid\\\" class=\\\"text-danger\\\">\\n          이름을 입력해주세요.\\n        </div>\\n      </div>\\n      \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">이메일</label>\\n        <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" [(ngModel)]=\\\"userDetails.email\\\" required email>\\n        <div *ngIf=\\\"userForm.controls.email?.touched && userForm.controls.email?.invalid\\\" class=\\\"text-danger\\\">\\n          올바른 이메일 주소를 입력해주세요.\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"address\\\">주소</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"address\\\" name=\\\"address\\\" [(ngModel)]=\\\"userDetails.address\\\" required>\\n        <div *ngIf=\\\"userForm.controls.address?.touched && userForm.controls.address?.invalid\\\" class=\\\"text-danger\\\">\\n          주소를 입력해주세요.\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"mobile\\\">휴대폰 번호</label>\\n        <input type=\\\"tel\\\" class=\\\"form-control\\\" id=\\\"mobile\\\" name=\\\"mobile\\\" [(ngModel)]=\\\"userDetails.mobile\\\" required pattern=\\\"[0-9]{10}\\\">\\n        <div *ngIf=\\\"userForm.controls.mobile?.touched && userForm.controls.mobile?.invalid\\\" class=\\\"text-danger\\\">\\n          올바른 휴대폰 번호를 입력해주세요.\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"age\\\">나이</label>\\n        <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"age\\\" name=\\\"age\\\" [(ngModel)]=\\\"userDetails.age\\\" required min=\\\"20\\\" max=\\\"60\\\">\\n        <div *ngIf=\\\"userForm.controls.age?.touched && userForm.controls.age?.invalid\\\" class=\\\"text-danger\\\">\\n          올바른 나이를 입력해주세요.\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"gender\\\">성별</label>\\n        <select class=\\\"form-control\\\" id=\\\"gender\\\" name=\\\"gender\\\" [(ngModel)]=\\\"userDetails.gender\\\" required>\\n          <option value=\\\"\\\" disabled>성별 선택</option>\\n          <option value=\\\"male\\\">남성</option>\\n          <option value=\\\"female\\\">여성</option>\\n          <option value=\\\"other\\\">기타</option>\\n        </select>\\n        <div *ngIf=\\\"userForm.controls.gender?.touched && userForm.controls.gender?.invalid\\\" class=\\\"text-danger\\\">\\n          성별을 선택해주세요.\\n        </div>\\n      </div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">제출</button>\\n    </form>\\n  </div>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/core'\"\n        }), \";\\n\\n@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'app-template-driven-form'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"templateUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./template-driven-form.component.html'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"styleUrls\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./template-driven-form.component.css'\"\n        }), \"]\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TemplateDrivenFormComponent\"\n        }), \" {\\n  userDetails = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"address\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"mobile\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"age\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"gender\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \"\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"submitForm\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"form\"\n        }), \": any): \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (form.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"valid\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Form data:'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"userDetails\"\n        }), \");\\n    }\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"이 예제에서 #userForm=\\\"ngForm\\\"은 폼 참조를 생성하여 컴포넌트 내의 사용자 객체의 속성에 접근할 수 있도록 합니다. [(ngModel)] 지시문은 입력 요소와 사용자 객체의 속성 간에 양방향 데이터 바인딩을 설정합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"유효성 검사 지시문 (required 및 email)이 폼 컨트롤에 적용되며, 오류 메시지는 컨트롤의 상태에 따라 조건부로 표시됩니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n<img src=\\\"/assets/img/2024-05-14-FormsinAngular_1.png\\\" />\\n\\n다음으로 아래와 같이 반응형 폼을 생성하세요.\\n\\nreactive-form.component.html\\n\\n```js\\n<div class=\\\"container\\\">\\n    <h2 class=\\\"heading\\\">반응형 폼</h2>\\n    <form [formGroup]=\\\"userForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\n\\n        <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">이름</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" formControlName=\\\"name\\\">\\n        <div *ngIf=\\\"userForm?.get('name')?.invalid && userForm?.get('name')?.touched\\\" class=\\\"text-danger\\\">\\n          이름을 입력해주세요.\\n        </div>\\n      </div>\\n  \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">이메일</label>\\n        <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" formControlName=\\\"email\\\">\\n        <div *ngIf=\\\"userForm?.get('email')?.invalid && userForm?.get('email')?.touched\\\" class=\\\"text-danger\\\">\\n          유효한 이메일을 입력해주세요.\\n        </div>\\n      </div>\\n  \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"address\\\">주소</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"address\\\" formControlName=\\\"address\\\">\\n        <div *ngIf=\\\"userForm?.get('address')?.invalid && userForm?.get('address')?.touched\\\" class=\\\"text-danger\\\">\\n          주소를 입력해주세요.\\n        </div>\\n      </div>\\n  \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"mobile\\\">휴대전화 번호</label>\\n        <input type=\\\"tel\\\" class=\\\"form-control\\\" id=\\\"mobile\\\" formControlName=\\\"mobile\\\">\\n        <div *ngIf=\\\"userForm?.get('mobile')?.invalid && userForm?.get('mobile')?.touched\\\" class=\\\"text-danger\\\">\\n          유효한 휴대전화 번호를 입력해주세요.\\n        </div>\\n      </div>\\n  \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"age\\\">나이</label>\\n        <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"age\\\" formControlName=\\\"age\\\">\\n        <div *ngIf=\\\"userForm?.get('age')?.invalid && userForm?.get('age')?.touched\\\" class=\\\"text-danger\\\">\\n          유효한 나이를 입력해주세요 (1에서 120 사이).\\n        </div>\\n      </div>\\n  \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"gender\\\">성별</label>\\n        <select class=\\\"form-control\\\" id=\\\"gender\\\" formControlName=\\\"gender\\\">\\n          <option value=\\\"\\\" disabled>성별 선택</option>\\n          <option value=\\\"male\\\">남성</option>\\n          <option value=\\\"female\\\">여성</option>\\n          <option value=\\\"other\\\">기타</option>\\n        </select>\\n        <div *ngIf=\\\"userForm?.get('gender')?.invalid && userForm?.get('gender')?.touched\\\" class=\\\"text-danger\\\">\\n          성별을 선택해주세요.\\n        </div>\\n      </div>\\n  \\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">제출</button>\\n    </form>\\n  </div>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/core'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormBuilder\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormGroup\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/forms'\"\n        }), \";\\n\\n@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'app-reactive-form'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"templateUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./reactive-form.component.html'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"styleUrls\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./reactive-form.component.css'\"\n        }), \"]\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactiveFormComponent\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"userForm\"\n        }), \": any;\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"private formBuilder: FormBuilder\"\n        }), \") {}\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ngOnInit\"\n        }), \"(): \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"userForm\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"formBuilder\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"group\"\n        }), \"({\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"required\"\n        }), \"],\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"required\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"email\"\n        }), \"]],\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"address\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"required\"\n        }), \"],\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"mobile\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"required\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"pattern\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'[0-9]{10}'\"\n        }), \")]],\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"age\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"required\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \"), \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"max\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \")]],\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"gender\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"required\"\n        }), \"]\\n    });\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"submitForm\"\n        }), \"(): \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"userForm\"\n        }), \"?.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"valid\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Form data:'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"userForm\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \");\\n    }\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-FormsinAngular_2.png\",\n        alt: \"FormsinAngular_2\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"GitHub\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\nhttps://github.com/Jaydeep-007/angular-forms\\n\\n# 결론\\n\\n이 글에서는 Angular에서 사용할 수 있는 양식의 기본 개념과 단계별 구현 방법, 다양한 유효성 검사기와 속성을 통해 다양한 유형의 양식을 살펴보았습니다.\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}