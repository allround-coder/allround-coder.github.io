{"pageProps":{"post":{"title":"리액트 애플리케이션에서 원격 상태 관리를 위한 RTK Query 시작하기","description":"","date":"2024-05-14 12:20","slug":"2024-05-14-GettingStartedwithRTKQueryforManagingRemoteStateinReactApplications","content":"\n\n현대 웹 애플리케이션에서 상태를 관리하는 것은 종종 복잡하고 번거로울 수 있습니다, 특히 API 요청과 같은 비동기 데이터를 처리할 때. 그러나 Redux Toolkit Query (RTK Query)를 사용하면 데이터 가져오기, 캐싱 및 상태 관리가 간소화되어 개발자들이 더 적은 코드로 성능 최적화된 애플리케이션을 작성할 수 있습니다. 이 기사에서는 RTK Query를 사용하여 Todo 애플리케이션 설정하는 방법을 안내하며, 그 강력함과 효율성을 소개하겠습니다.\n\n# 프로젝트 구조 설정하기\n\n먼저 React 프로젝트를 구성하여 시작하고 Redux Toolkit 및 RTK Query가 설치되어 있는지 확인하세요. 프로젝트 구조에는 주 진입 파일, API 서비스 슬라이스 및 Todo 컴포넌트가 포함됩니다.\n\n```js\n//main.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.jsx';\nimport { ApiProvider } from \"@reduxjs/toolkit/query/react\";\nimport apiSlice from \"./feature/todo/todoAPI/apiSlice.js\";\n\n// 루트 엘리먼트를 설정하고 전체 애플리케이션을 RTK Query용으로 ApiProvider로 랩합니다\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <ApiProvider api={apiSlice}>\n        <App />\n    </ApiProvider>\n  </React.StrictMode>,\n);\n```\n\n\n\n# API 서비스 슬라이스 구성하기\n\nAPI 슬라이스는 RTK Query를 사용하여 할 일을 가져오고 추가하고 업데이트하고 삭제하는 방법을 정의하는 곳입니다.\n\n```js\n//apiSlice.js\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst todoApi = createApi({\n    reducerPath: \"api\", // API 상태 슬라이스를 위한 고유한 키\n    baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:5050\" }), // 가져오기 로직을 처리하는 기본 쿼리\n    tagTypes: [\"TODOS\"], // 자동 캐시 다시 가져오기를 위한 태그\n    endpoints: (builder) => ({\n        getTodos: builder.query({ // 할 일을 가져오는 엔드포인트\n            query: () => \"/todos\",\n            providesTags: [\"TODOS\"]\n        }),\n        addTodo: builder.mutation({ // 새로운 할 일 추가하는 엔드포인트\n            query: (todo) => ({\n                url: \"/todos\",\n                method: \"POST\",\n                body: todo\n            }),\n            invalidatesTags: [\"TODOS\"]\n        }),\n        updateTodo: builder.mutation({ // 기존 할 일을 업데이트하는 엔드포인트\n            query: (todo) => ({\n                url: `/todos/${todo.id}`,\n                method: \"PATCH\",\n                body: todo\n            }),\n            invalidatesTags: [\"TODOS\"]\n        }),\n        deleteTodo: builder.mutation({ // 할 일을 삭제하는 엔드포인트\n            query: ({ id }) => ({\n                url: `/todos/${id}`,\n                method: \"DELETE\",\n            }),\n            invalidatesTags: [\"TODOS\"]\n        })\n    })\n});\n\nexport const { useGetTodosQuery, useAddTodoMutation, useUpdateTodoMutation, useDeleteTodoMutation } = todoApi;\n\nexport default todoApi;\n```\n\n# 할 일 컴포넌트 구성하기\n\n\n\nTodo 컴포넌트에서 할 일을 표시하고 관리하는 기능을 구현해보세요.\n\n```js\n//TodoApp.jsx\nimport { useState } from 'react';\nimport styles from './TodoApp.module.css';\nimport { useAddTodoMutation, useDeleteTodoMutation, useGetTodosQuery, useUpdateTodoMutation } from \"./todoAPI/apiSlice.js\";\n\nfunction TodoApp() {\n    const [task, setTask] = useState('');\n    const { data: todos, isLoading, isError, isSuccess, error } = useGetTodosQuery();\n    const [addTodo] = useAddTodoMutation();\n    const [updateTodo] = useUpdateTodoMutation();\n    const [deleteTodo] = useDeleteTodoMutation();\n\n    // 할 일 추가를 처리하는 함수\n    function addTodoHandler() {\n        const newTodo = { id: Math.random(), task: task, isCompleted: false };\n        addTodo(newTodo);\n        setTask('');\n    }\n\n    // 할 일 완료 상태 전환을 처리하는 함수\n    function toggleCompletion(todo) {\n        updateTodo({ ...todo, isCompleted: !todo.isCompleted });\n    }\n\n    // 할 일 삭제를 처리하는 함수\n    function deleteTodoHandler(todo) {\n        deleteTodo(todo);\n    }\n\n    return (\n        <div className={styles.container}>\n            <h1 className={styles.title}>할 일 목록</h1>\n            <input\n                type=\"text\"\n                placeholder=\"새로운 작업 추가\"\n                value={task}\n                onChange={(e) => setTask(e.target.value)}\n                className={styles.todoInput}\n            />\n            <button className={styles.button} onClick={addTodoHandler}>할 일 추가</button>\n            <ul className={styles.todoList}>\n                {isLoading && <p>로딩 중...</p>}\n                {todos && <>\n                    {todos.map((todo) => (\n                        <li key={todo.id} className={styles.todoItem}>\n                            <span\n                                className={styles.todoTask}\n                                style={{ textDecoration: todo.isCompleted ? 'line-through' : 'none' }}\n                                onClick={() => toggleCompletion(todo)}\n                            >\n                              {todo.task}\n                            </span>\n                            <button className={`${styles.button} ${styles.delete}`} onClick={() => deleteTodoHandler(todo)}>삭제</button>\n                        </li>\n                    ))}\n                </>}\n            </ul>\n        </div>\n    );\n}\n\nexport default TodoApp;\n```\n\n참고: 코드샌드박스 링크에는 컴포넌트를 스타일링하는 CSS 파일도 제공됩니다.\n\n# 마무리\n\n\n\nRTK Query는 Redux 애플리케이션에서 서버 측 데이터를 효율적으로 관리할 수 있는 강력한 솔루션을 제공합니다. 데이터 가져오기 및 상태 관리 로직을 추상화함으로써, 개발자들이 기능 구축에 집중할 수 있도록 도와줍니다. React 개발자들에게 꼭 필요한 도구가 될 수 있습니다.\n\n[여기를 클릭하여 데모 사이트에서 확인해보세요!](https://codesandbox.io/p/devbox/rtk-query-r8ttsh?embed=1&file=%2Fsrc%2Ffeatures%2Ftodo%2FtodoAPI%2FapiSlice.js)","ogImage":{"url":"/assets/img/2024-05-14-GettingStartedwithRTKQueryforManagingRemoteStateinReactApplications_0.png"},"coverImage":"/assets/img/2024-05-14-GettingStartedwithRTKQueryforManagingRemoteStateinReactApplications_0.png","tag":["Tech"],"readingTime":6},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"현대 웹 애플리케이션에서 상태를 관리하는 것은 종종 복잡하고 번거로울 수 있습니다, 특히 API 요청과 같은 비동기 데이터를 처리할 때. 그러나 Redux Toolkit Query (RTK Query)를 사용하면 데이터 가져오기, 캐싱 및 상태 관리가 간소화되어 개발자들이 더 적은 코드로 성능 최적화된 애플리케이션을 작성할 수 있습니다. 이 기사에서는 RTK Query를 사용하여 Todo 애플리케이션 설정하는 방법을 안내하며, 그 강력함과 효율성을 소개하겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"프로젝트 구조 설정하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 React 프로젝트를 구성하여 시작하고 Redux Toolkit 및 RTK Query가 설치되어 있는지 확인하세요. 프로젝트 구조에는 주 진입 파일, API 서비스 슬라이스 및 Todo 컴포넌트가 포함됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//main.jsx\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactDOM\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-dom/client'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"App\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./App.jsx'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ApiProvider\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@reduxjs/toolkit/query/react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" apiSlice \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./feature/todo/todoAPI/apiSlice.js\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 루트 엘리먼트를 설정하고 전체 애플리케이션을 RTK Query용으로 ApiProvider로 랩합니다\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactDOM\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createRoot\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'root'\"\n        }), \")).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"render\"\n        }), \"(\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"React.StrictMode\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ApiProvider\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"api\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{apiSlice}\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"App\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ApiProvider\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"React.StrictMode\"\n            }), \">\"]\n          })]\n        }), \",\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"API 서비스 슬라이스 구성하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"API 슬라이스는 RTK Query를 사용하여 할 일을 가져오고 추가하고 업데이트하고 삭제하는 방법을 정의하는 곳입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//apiSlice.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { createApi, fetchBaseQuery } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@reduxjs/toolkit/query/react\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" todoApi = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createApi\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"reducerPath\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"api\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// API 상태 슬라이스를 위한 고유한 키\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"baseQuery\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchBaseQuery\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"baseUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"http://localhost:5050\\\"\"\n        }), \" }), \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 가져오기 로직을 처리하는 기본 쿼리\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"tagTypes\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"TODOS\\\"\"\n        }), \"], \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 자동 캐시 다시 가져오기를 위한 태그\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"endpoints\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"builder\"\n          }), \") =>\"]\n        }), \" ({\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"getTodos\"\n        }), \": builder.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"query\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 할 일을 가져오는 엔드포인트\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"query\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/todos\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"providesTags\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"TODOS\\\"\"\n        }), \"]\\n        }),\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"addTodo\"\n        }), \": builder.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"mutation\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 새로운 할 일 추가하는 엔드포인트\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"query\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"todo\"\n          }), \") =>\"]\n        }), \" ({\\n                \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"url\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/todos\\\"\"\n        }), \",\\n                \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"method\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"POST\\\"\"\n        }), \",\\n                \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"body\"\n        }), \": todo\\n            }),\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"invalidatesTags\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"TODOS\\\"\"\n        }), \"]\\n        }),\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"updateTodo\"\n        }), \": builder.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"mutation\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 기존 할 일을 업데이트하는 엔드포인트\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"query\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"todo\"\n          }), \") =>\"]\n        }), \" ({\\n                \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"url\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`/todos/\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${todo.id}\"\n          }), \"`\"]\n        }), \",\\n                \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"method\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"PATCH\\\"\"\n        }), \",\\n                \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"body\"\n        }), \": todo\\n            }),\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"invalidatesTags\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"TODOS\\\"\"\n        }), \"]\\n        }),\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"deleteTodo\"\n        }), \": builder.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"mutation\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 할 일을 삭제하는 엔드포인트\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"query\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"{ id }\"\n          }), \") =>\"]\n        }), \" ({\\n                \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"url\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`/todos/\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${id}\"\n          }), \"`\"]\n        }), \",\\n                \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"method\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"DELETE\\\"\"\n        }), \",\\n            }),\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"invalidatesTags\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"TODOS\\\"\"\n        }), \"]\\n        })\\n    })\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { useGetTodosQuery, useAddTodoMutation, useUpdateTodoMutation, useDeleteTodoMutation } = todoApi;\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" todoApi;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"할 일 컴포넌트 구성하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Todo 컴포넌트에서 할 일을 표시하고 관리하는 기능을 구현해보세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//TodoApp.jsx\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" styles \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./TodoApp.module.css'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useAddTodoMutation, useDeleteTodoMutation, useGetTodosQuery, useUpdateTodoMutation } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./todoAPI/apiSlice.js\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"TodoApp\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [task, setTask] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"data\"\n        }), \": todos, isLoading, isError, isSuccess, error } = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useGetTodosQuery\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [addTodo] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useAddTodoMutation\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [updateTodo] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useUpdateTodoMutation\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [deleteTodo] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useDeleteTodoMutation\"\n        }), \"();\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 할 일 추가를 처리하는 함수\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addTodoHandler\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" newTodo = { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Math\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"random\"\n        }), \"(), \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"task\"\n        }), \": task, \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"isCompleted\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \" };\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addTodo\"\n        }), \"(newTodo);\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setTask\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \");\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 할 일 완료 상태 전환을 처리하는 함수\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toggleCompletion\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"todo\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"updateTodo\"\n        }), \"({ ...todo, \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"isCompleted\"\n        }), \": !todo.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"isCompleted\"\n        }), \" });\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 할 일 삭제를 처리하는 함수\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"deleteTodoHandler\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"todo\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"deleteTodo\"\n        }), \"(todo);\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.container}\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.title}\"\n            }), \">\"]\n          }), \"할 일 목록\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \"\\n                \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \"\\n                \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"placeholder\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"새로운 작업 추가\\\"\"\n            }), \"\\n                \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{task}\"\n            }), \"\\n                \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{(e)\"\n            }), \" =>\"]\n          }), \" setTask(e.target.value)}\\n                className={styles.todoInput}\\n            />\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.button}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{addTodoHandler}\"\n            }), \">\"]\n          }), \"할 일 추가\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ul\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.todoList}\"\n            }), \">\"]\n          }), \"\\n                {isLoading && \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"로딩 중...\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"}\\n                {todos && \", _jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"<>\"\n          }), \"\\n                    {todos.map((todo) => (\\n                        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"key\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{todo.id}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.todoItem}\"\n            }), \">\"]\n          }), \"\\n                            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"span\"\n            }), \"\\n                                \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.todoTask}\"\n            }), \"\\n                                \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{{\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"textDecoration:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"todo.isCompleted\"\n            }), \" ? '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"line-through\"\n            }), \"' \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \":\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"none\"\n            }), \"' }}\\n                                \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" toggleCompletion(todo)}\\n                            >\\n                              {todo.task}\\n                            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"span\"\n            }), \">\"]\n          }), \"\\n                            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \"`${\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"styles.button\"\n            }), \"} ${\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"styles.delete\"\n            }), \"}`} \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" deleteTodoHandler(todo)}>삭제\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n                        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          }), \"\\n                    ))}\\n                \", _jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"</>\"\n          }), \"}\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ul\"\n            }), \">\"]\n          })]\n        }), \"\\n        </div>\\n    );\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TodoApp\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참고: 코드샌드박스 링크에는 컴포넌트를 스타일링하는 CSS 파일도 제공됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"마무리\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"RTK Query는 Redux 애플리케이션에서 서버 측 데이터를 효율적으로 관리할 수 있는 강력한 솔루션을 제공합니다. 데이터 가져오기 및 상태 관리 로직을 추상화함으로써, 개발자들이 기능 구축에 집중할 수 있도록 도와줍니다. React 개발자들에게 꼭 필요한 도구가 될 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://codesandbox.io/p/devbox/rtk-query-r8ttsh?embed=1&file=%2Fsrc%2Ffeatures%2Ftodo%2FtodoAPI%2FapiSlice.js\",\n        children: \"여기를 클릭하여 데모 사이트에서 확인해보세요!\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}