{"pageProps":{"post":{"title":"타입스크립트에서 레이블 문의 마법을 공개합니다","description":"","date":"2024-05-15 11:10","slug":"2024-05-15-UnveilingtheMagicofLabelledStatementsinSwift","content":"\n\n라벨 지정문은 다른 Swift 기능들만큼 화려하지는 않지만, 코드 가독성과 흐름 제어를 크게 향상시킬 수 있는 독특한 유연성을 지니고 있어요.\n\n라벨 지정문을 사용하면 if, switch 또는 do 문과 같이 코드의 특정 부분에 이름을 지정할 수 있어요. 이는 중첩된 루프를 벗어나는 데 도움을 줄 수 있어요.\n\n아래에는 라벨이 지정된 루프의 기본 예제가 있어요.\n\n아래 코드에서는 제곱했을 때 4가 되는 첫 번째 숫자를 찾으려고 해요.\n\n\n\n```js\nlet numbers = 1...50\n\nfor number1 in numbers {\n    for number2 in numbers {\n        if number1 == number2 && number1 * number2 == 4  {\n            print(number1)\n            break // 외부 루프를 종료시키지 않습니다\n        }\n    }\n}\n```\n\n라벨을 사용하면 많은 도움을 받을 수 있습니다.\n\n```js\nlet numbers = 1...50\n\nouterLoop: for number1 in numbers {\n    for number2 in numbers {\n        if number1 == number2 && number1 * number2 == 4  {\n            print(number1)\n            break outerLoop // 외부 루프를 종료시킵니다\n        }\n    }\n}\n```","ogImage":{"url":"/assets/img/2024-05-15-UnveilingtheMagicofLabelledStatementsinSwift_0.png"},"coverImage":"/assets/img/2024-05-15-UnveilingtheMagicofLabelledStatementsinSwift_0.png","tag":["Tech"],"readingTime":1},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"라벨 지정문은 다른 Swift 기능들만큼 화려하지는 않지만, 코드 가독성과 흐름 제어를 크게 향상시킬 수 있는 독특한 유연성을 지니고 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"라벨 지정문을 사용하면 if, switch 또는 do 문과 같이 코드의 특정 부분에 이름을 지정할 수 있어요. 이는 중첩된 루프를 벗어나는 데 도움을 줄 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래에는 라벨이 지정된 루프의 기본 예제가 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 코드에서는 제곱했을 때 4가 되는 첫 번째 숫자를 찾으려고 해요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" numbers = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".50\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" number1 \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" numbers {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" number2 \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" numbers {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" number1 == number2 && number1 * number2 == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \"  {\\n            \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(number1)\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"break\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 외부 루프를 종료시키지 않습니다\"\n        }), \"\\n        }\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"라벨을 사용하면 많은 도움을 받을 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" numbers = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".50\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"outerLoop\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" number1 \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" numbers {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" number2 \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" numbers {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" number1 == number2 && number1 * number2 == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \"  {\\n            \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(number1)\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"break\"\n        }), \" outerLoop \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 외부 루프를 종료시킵니다\"\n        }), \"\\n        }\\n    }\\n}\\n\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}