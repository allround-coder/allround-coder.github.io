{"pageProps":{"post":{"title":"Nodejs에서 SOLID 원칙 마스터하기 실전 예제와 모범 사례 ","description":"","date":"2024-05-14 14:58","slug":"2024-05-14-MasteringSOLIDPrinciplesinNodejsPracticalExamplesandBestPractices","content":"\n\nNode.js 개발의 광활한 우주에서 SOLID 원칙을 숙달하면 튼튼하고 유지보수가 쉽며 확장 가능한 애플리케이션을 만들 수 있는 우주선이 될 것입니다. 🛸 SOLID 우주를 탐험하며 각 원칙을 실제 예제와 코드 스니펫과 함께 살펴봅시다.\n\n## 단일 책임 원칙 (SRP) 🎯\n\n하나의 임무를 가진 우주선을 상상해보세요: 먼 행성으로 화물을 전달하는 것. 마찬가지로 Node.js에서 각 모듈은 하나의 명확한 목적을 가져야 합니다.\n\n예시: 사용자 서비스 모듈 🤖\n\n\n\nDo:\n\n```js\n// userService.js\nconst getUserById = (userId) => {\n  // 데이터베이스에서 사용자를 가져오는 로직\n};\n\nconst updateUser = (userId, newData) => {\n  // 데이터베이스에서 사용자를 업데이트하는 로직\n};\n\nmodule.exports = { getUserById, updateUser };\n```\n\nDon't:\n\n```js\n// IncorrectUserService.js\nconst userController = require('./userController');\n\nconst getUserByIdAndUpdate = (userId, newData) => {\n  // 같은 함수에서 사용자를 가져오고 업데이트하는 로직\n};\n```\n\n\n\n## 개방/폐쇄 원칙 (OCP) 🚪\n\n우주선의 문이 우주의 진공으로부터 닫혀있는 것처럼, 모듈은 확장을 위해 열려있지만 수정을 위해서는 닫혀있어야 합니다.\n\n예시: Logger 모듈 📝\n\n올바른 방법:\n\n\n\n```js\n// logger.js\nclass Logger {\n  log(message) {\n    // 메시지를 기록하는 로직\n  }\n}\nmodule.exports = Logger;\n```\n\n하지 말아야 할 것:\n\n```js\n// IncorrectLogger.js\nconst logger = require('./logger');\n\nlogger.customLog = (message, level) => {\n  // 사용자 정의 로깅 로직\n};\n```\n\n## 리스코프 치환 원칙 (LSP) 🧩\n\n\n\n\n소프트웨어 개발의 광대한 은하 속에서, 하위 클래스는 혼돈을 초래하지 않으면서 상위 클래스의 역할을 원활하게 수행해야 합니다.\n\n예: 데이터베이스 어댑터 📡\n\n올바르게 적용하라:\n\n```js\n// dbAdapter.js\nclass DatabaseAdapter {\n  connect() {\n    // 데이터베이스에 연결하는 로직\n  }\n}\n\nmodule.exports = DatabaseAdapter;\n```\n\n\n\n좋은 동료! 😊\n\n다음과 같이 변경해주실 수 있을까요?:\n\n\n```js\n// IncorrectDBAdapter.js\nclass MongoDBAdapter extends DatabaseAdapter {\n  connectToMongoDB() {\n    // Logic to connect specifically to MongoDB\n}\n```\n\n## Interface Segregation Principle (ISP) 🛠️\n\n만능 도구가 다양한 작업에 적응할 수 있는 것처럼, 인터페이스는 불필요한 메서드를 난잡하게 늘리지 않고 특정 필요에 맞게 설계되어야 합니다.\n\n\n\n예시: 인증 모듈 🔐\n\n다음과 같이 하세요:\n\n```js\n// auth.js\nclass Auth {\n  login(username, password) {\n    // 사용자 인증 로직\n  }\n  logout() {\n      // 사용자 로그아웃 로직\n    }\n  }\nmodule.exports = Auth;\n```\n\n하지 말아주세요:\n\n\n\n```js\n// IncorrectAuth.js\nclass Auth {\n  login(username, password) {\n    // 사용자를 인증하기 위한 로직\n  }\n  deleteUser(userId) {\n    // 사용자 삭제를 위한 관련 없는 메서드\n  }\n}\n```\n\n## 의존 역전 원칙 (DIP) 🔄\n\n의존성의 끊임없이 변화하는 우주에서, 고수준 모듈은 구체적인 구현이 아닌 추상화를 바라봐야 합니다.\n\n예시: 이메일 서비스 📧\n\n\n\n\n아래와 같이 변경해 주세요:\n\n```md\n// emailService.js\nclass EmailService {\n  sendEmail(to, subject, body) {\n    // 이메일을 보내는 로직\n  }\n}\n\nmodule.exports = EmailService;\n```\n\n```md\n// IncorrectEmailService.js\nconst nodemailer = require('nodemailer');\n\nconst sendEmail = (to, subject, body) => {\n  // nodemailer를 직접 사용하여 이메일을 보내는 로직\n};\n```\n\n\n\n이러한 SOLID 원칙에 따라 Node.js 프로젝트를 조정함으로써, 우리는 자신감과 미련으로 소프트웨어 개발의 광대한 우주를 탐험할 수 있습니다. 🌌 행복한 코딩, 동료 우주 탐험가 여러분! 🚀","ogImage":{"url":"/assets/img/2024-05-14-MasteringSOLIDPrinciplesinNodejsPracticalExamplesandBestPractices_0.png"},"coverImage":"/assets/img/2024-05-14-MasteringSOLIDPrinciplesinNodejsPracticalExamplesandBestPractices_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Node.js 개발의 광활한 우주에서 SOLID 원칙을 숙달하면 튼튼하고 유지보수가 쉽며 확장 가능한 애플리케이션을 만들 수 있는 우주선이 될 것입니다. 🛸 SOLID 우주를 탐험하며 각 원칙을 실제 예제와 코드 스니펫과 함께 살펴봅시다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단일 책임 원칙 (SRP) 🎯\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하나의 임무를 가진 우주선을 상상해보세요: 먼 행성으로 화물을 전달하는 것. 마찬가지로 Node.js에서 각 모듈은 하나의 명확한 목적을 가져야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시: 사용자 서비스 모듈 🤖\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Do:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// userService.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getUserById\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"userId\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 데이터베이스에서 사용자를 가져오는 로직\"\n        }), \"\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"updateUser\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"userId, newData\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 데이터베이스에서 사용자를 업데이트하는 로직\"\n        }), \"\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = { getUserById, updateUser };\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Don't:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// IncorrectUserService.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" userController = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./userController'\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getUserByIdAndUpdate\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"userId, newData\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 같은 함수에서 사용자를 가져오고 업데이트하는 로직\"\n        }), \"\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"개방/폐쇄 원칙 (OCP) 🚪\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우주선의 문이 우주의 진공으로부터 닫혀있는 것처럼, 모듈은 확장을 위해 열려있지만 수정을 위해서는 닫혀있어야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시: Logger 모듈 📝\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"올바른 방법:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// logger.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Logger\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"message\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 메시지를 기록하는 로직\"\n        }), \"\\n  }\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Logger\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지 말아야 할 것:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// IncorrectLogger.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" logger = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./logger'\"\n        }), \");\\n\\nlogger.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"customLog\"\n        }), \" = \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"message, level\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 정의 로깅 로직\"\n        }), \"\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"리스코프 치환 원칙 (LSP) 🧩\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"소프트웨어 개발의 광대한 은하 속에서, 하위 클래스는 혼돈을 초래하지 않으면서 상위 클래스의 역할을 원활하게 수행해야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예: 데이터베이스 어댑터 📡\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"올바르게 적용하라:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// dbAdapter.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DatabaseAdapter\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"connect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 데이터베이스에 연결하는 로직\"\n        }), \"\\n  }\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DatabaseAdapter\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"좋은 동료! 😊\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음과 같이 변경해주실 수 있을까요?:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// IncorrectDBAdapter.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MongoDBAdapter\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_ inherited__\",\n          children: \"DatabaseAdapter\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"connectToMongoDB\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Logic to connect specifically to MongoDB\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Interface Segregation Principle (ISP) 🛠️\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만능 도구가 다양한 작업에 적응할 수 있는 것처럼, 인터페이스는 불필요한 메서드를 난잡하게 늘리지 않고 특정 필요에 맞게 설계되어야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시: 인증 모듈 🔐\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음과 같이 하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// auth.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Auth\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"login\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"username, password\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 인증 로직\"\n        }), \"\\n  }\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"logout\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 로그아웃 로직\"\n        }), \"\\n    }\\n  }\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exports\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Auth\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지 말아주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// IncorrectAuth.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Auth\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"login\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"username, password\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자를 인증하기 위한 로직\"\n        }), \"\\n  }\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"deleteUser\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"userId\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 삭제를 위한 관련 없는 메서드\"\n        }), \"\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"의존 역전 원칙 (DIP) 🔄\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"의존성의 끊임없이 변화하는 우주에서, 고수준 모듈은 구체적인 구현이 아닌 추상화를 바라봐야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시: 이메일 서비스 📧\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래와 같이 변경해 주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-md\",\n        children: [\"// emailService.js\\nclass EmailService {\\n  sendEmail(to, subject, body) {\\n\", _jsx(_components.span, {\n          className: \"hljs-code\",\n          children: \"    // 이메일을 보내는 로직\\n  }\\n}\\n\"\n        }), \"\\nmodule.exports = EmailService;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-md\",\n        children: \"// IncorrectEmailService.js\\nconst nodemailer = require('nodemailer');\\n\\nconst sendEmail = (to, subject, body) => {\\n  // nodemailer를 직접 사용하여 이메일을 보내는 로직\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 SOLID 원칙에 따라 Node.js 프로젝트를 조정함으로써, 우리는 자신감과 미련으로 소프트웨어 개발의 광대한 우주를 탐험할 수 있습니다. 🌌 행복한 코딩, 동료 우주 탐험가 여러분! 🚀\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}