{"pageProps":{"post":{"title":"리눅스에서 DNS 서버 설정하기","description":"","date":"2024-05-16 03:55","slug":"2024-05-16-SettingupaDNSserveronLinux","content":"\n\n오늘날, 우리가 인터넷을 브라우징하고 웹 페이지를 요청할 때마다, 브라우저에 입력한 웹 페이지 이름을 해당 IP 주소로 변환하기 위해 도메인 이름 시스템(DNS)에 의존하게 됩니다. 이를 통해 우리는 원하는 웹 페이지에 액세스할 수 있게 됩니다. DNS가 없으면 여러 웹 서버와 연결된 다양한 IP 주소를 인간의 두뇌가 기억하기가 어려워 인터넷 사용이 매우 어려울 것입니다. 이 글에서는 CentOS 8을 이용하여 DNS 서버를 설정하고 이름 해결 과정을 탐험하는 방법을 배우겠습니다. 시작해봅시다.\n\n## 시나리오\n\n우리는 현재 회사 EOS 소유의 사설 네트워크에 연결되어 있습니다. 이 네트워크 내에는 웹 서버를 호스팅하는 Metasploitable 이라는 서버가 있습니다. 그러나 현재 이 웹 서버에 접속하기 위해서는 Metasploitable 서버의 IP 주소에 의존하고 있습니다. 따라서 우리의 목표는 이 웹 서버에 도메인 이름을 사용하여 액세스할 수 있는 것입니다. 이 시나리오는 아래 그림으로 더 자세히 설명됩니다:\n\n![DNS 서버 설정하기](/assets/img/2024-05-16-SettingupaDNSserveronLinux_0.png)\n\n\n\n# DNS 설정하기\n\n첫 번째 단계는 DNS 리졸버로 사용할 서버에 BIND와 필수 유틸리티를 설치하는 것입니다.\n\n```js\n# yum install bind bind-utils -y\n```\n\n설치가 완료되면 다음 명령어를 사용하여 설치된 BIND 버전을 확인할 수 있습니다.\n\n\n\n```js\n# 이름 -v\n```\n\n이제 BIND의 주 구성 파일을 편집할 수 있습니다. 그러나 그 전에 예방 차원으로 파일의 백업을 만드는 것이 좋습니다. 구성에서는 우리 네트워크(192.168.3.0/24)에서의 쿼리만 허용하고 재귀 모드를 활성화하여 서버가 캐싱을 수행할 수 있도록 할 것입니다.\n\n```js\n# cp /etc/named.conf /etc/named/conf.bak\n# vi named.conf\n\n// 아래와 같이 편집 :\n//listen-on port 53 { 127.0.0.1; };\n//listen-on-v6 port 53 { ::1; };\n\nallow-query { localhost; 192.168.3.0/24; }; \nrecursion yes;\n```\n\n## 포워드 및 리버스 존 생성하기\n\n\n\n전방존은 호스트 이름을 IP 주소로 해석하고, 역방존은 IP 주소를 호스트 이름으로 해석할 수 있게 합니다. 이를 구성하려면 다음 라인을 named.conf 파일 끝에 추가해야 합니다.\n\n```js\n// 전방존\nzone \"eos.net\" IN {\n     type master;\n     file \"eos.net.db\";\n     allow-update { none; };\n     allow-query { any; };\n};\n\n// 역방존\nzone \"3.168.192.in-addr.arpa\" IN {\n     type master;\n     file \"eos.net.rev\";\n     allow-update { none; };\n     allow-query { any; };\n};\n```\n\n- type: 존에 대한 서버 역할을 지정합니다.\n- file: 두 존에 사용되는 파일을 지정합니다.\n- allow-update: 동적 DNS 업데이트를 수행할 수 있는 호스트 시스템을 지정합니다. 이 경우 특정 호스트를 지정하지 않았습니다.\n\n## 존 파일 만들기\n\n\n\n우리는 이미 위에서 전방 존(eos.net.db)과 역방 존(eos.net.rev)을 모두 지정했습니다. 이제 /var/named 디렉토리 안에 이러한 파일들을 만들어야 합니다. 전방 존부터 시작해봅시다. 아래와 같이 정보를 입력하여 파일을 만들어 주세요:\n\n```js\n# nano /var/named/eos.net.db\n$ORIGIN eos.net.\n$TTL 86400\n@ IN SOA server.eos.net. admin.eos.net. (\n    2024051300 ;시리얼\n    3600 ;새로고침\n    1800 ;재시도\n    604800 ;만료\n    86400 ;최소\n)\n\n; 네임 서버 정보\n@ IN NS server.eos.net.\n\n; 네임 서버용 IP 주소\nserver IN A 192.168.3.210\n\n; 다음 호스트 이름을 위한 A 레코드\nmetasploitable IN A 192.168.3.195\ndns IN A 192.168.3.210\n\n; CNAME 레코드\ndns-primary IN CNAME server.eos.net.\n```\n\n이제, 역방 존은 다음과 같이 나타나야 합니다:\n\n```js\n# nano /var/named/eos.net.rev\n$ORIGIN 3.168.192.in-addr.arpa.\n$TTL 86400\n@ IN SOA server.eos.net. admin.eos.net. (\n                                            2024051300 ;시리얼\n                                            3600 ;새로고침\n                                            1800 ;재시도\n                                            604800 ;만료\n                                            86400 ;최소 TTL\n)\n; 네임 서버 정보\n@ IN NS server.eos.net.\nserver     IN      A       192.168.3.210\n\n; 네임 서버에 대한 역방 조회\n210 IN PTR server.eos.net.\n\n; IP 주소에 대한 호스트 이름에 대한 PTR 레코드\n195      IN      PTR     metasploitable.eos.net.\n```\n\n\n\n양방향 및 역방향 존이 모두 순서대로 되어 있습니다. 이제 파일에 적절한 권한을 설정해야 합니다:\n\n```js\n# chown named:named /var/named/eos.net.db\n# chown named:named /var/named/eos.net.rev\n```\n\n이제 우리의 설정이 올바른지 확인해야 합니다. 이를 위해 named-checkconf 및 named-checkzone 명령어를 사용할 수 있습니다.\n\n```js\n# named-checkconf\n# named-checkzone eos.net eos.net.db\n# named-checkzone 3.168.192.in-addr.arpa eos.net.rev\n```\n\n\n\n\n![DNS server setup](/assets/img/2024-05-16-SettingupaDNSserveronLinux_1.png)\n\n이제 named 데몬을 다시 시작해야 합니다:\n\n```shell\n# systemctl start named.service\n# chkconfig named on\n```\n\n## DNS 서비스 테스트\n\n\n\n\nWindows 호스트에서는 nslookup 명령을 사용하여 호스트인 Metasploitable의 전방 및 후방 존을 테스트할 수 있습니다. 우리는 호스트 Metasploitable의 DNS 정보를 검색할 수 있는 것을 확인할 것입니다.\n\n![이미지](/assets/img/2024-05-16-SettingupaDNSserveronLinux_2.png)\n\n## 결론\n\n이 게시물에서는 BIND 소프트웨어를 사용하여 Linux 환경에 DNS 서비스를 설정하는 과정을 탐구했습니다. DNS는 인터넷의 기본 구성 요소이며, 그 중요성을 과장할 수 없습니다. 시스템 관리자로서 Linux 환경에서 서비스를 배포할 수 있는 능력을 갖추고 DNS를 이해하는 것이 특히 중요합니다. 이 게시물이 도움이 되었다면 박수를 치거나 댓글을 남기고 더 많은 콘텐츠를 위해 팔로우해 주세요. 감사합니다!","ogImage":{"url":"/assets/img/2024-05-16-SettingupaDNSserveronLinux_0.png"},"coverImage":"/assets/img/2024-05-16-SettingupaDNSserveronLinux_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"오늘날, 우리가 인터넷을 브라우징하고 웹 페이지를 요청할 때마다, 브라우저에 입력한 웹 페이지 이름을 해당 IP 주소로 변환하기 위해 도메인 이름 시스템(DNS)에 의존하게 됩니다. 이를 통해 우리는 원하는 웹 페이지에 액세스할 수 있게 됩니다. DNS가 없으면 여러 웹 서버와 연결된 다양한 IP 주소를 인간의 두뇌가 기억하기가 어려워 인터넷 사용이 매우 어려울 것입니다. 이 글에서는 CentOS 8을 이용하여 DNS 서버를 설정하고 이름 해결 과정을 탐험하는 방법을 배우겠습니다. 시작해봅시다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"시나리오\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 현재 회사 EOS 소유의 사설 네트워크에 연결되어 있습니다. 이 네트워크 내에는 웹 서버를 호스팅하는 Metasploitable 이라는 서버가 있습니다. 그러나 현재 이 웹 서버에 접속하기 위해서는 Metasploitable 서버의 IP 주소에 의존하고 있습니다. 따라서 우리의 목표는 이 웹 서버에 도메인 이름을 사용하여 액세스할 수 있는 것입니다. 이 시나리오는 아래 그림으로 더 자세히 설명됩니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-SettingupaDNSserveronLinux_0.png\",\n        alt: \"DNS 서버 설정하기\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"DNS 설정하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"첫 번째 단계는 DNS 리졸버로 사용할 서버에 BIND와 필수 유틸리티를 설치하는 것입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"# yum install bind bind-utils -y\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"설치가 완료되면 다음 명령어를 사용하여 설치된 BIND 버전을 확인할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"# 이름 -v\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 BIND의 주 구성 파일을 편집할 수 있습니다. 그러나 그 전에 예방 차원으로 파일의 백업을 만드는 것이 좋습니다. 구성에서는 우리 네트워크(192.168.3.0/24)에서의 쿼리만 허용하고 재귀 모드를 활성화하여 서버가 캐싱을 수행할 수 있도록 할 것입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# cp /etc/named.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"conf\"\n        }), \" /etc/named/conf.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"bak\"\n        }), \"\\n# vi named.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"conf\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 아래와 같이 편집 :\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//listen-on port 53 { 127.0.0.1; };\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//listen-on-v6 port 53 { ::1; };\"\n        }), \"\\n\\nallow-query { localhost; \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"192.168\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".3\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".0\"\n        }), \"/\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"24\"\n        }), \"; }; \\nrecursion yes;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"포워드 및 리버스 존 생성하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"전방존은 호스트 이름을 IP 주소로 해석하고, 역방존은 IP 주소를 호스트 이름으로 해석할 수 있게 합니다. 이를 구성하려면 다음 라인을 named.conf 파일 끝에 추가해야 합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 전방존\"\n        }), \"\\nzone \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"eos.net\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" {\\n     type master;\\n     file \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"eos.net.db\\\"\"\n        }), \";\\n     allow-update { none; };\\n     allow-query { any; };\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 역방존\"\n        }), \"\\nzone \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"3.168.192.in-addr.arpa\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" {\\n     type master;\\n     file \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"eos.net.rev\\\"\"\n        }), \";\\n     allow-update { none; };\\n     allow-query { any; };\\n};\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"type: 존에 대한 서버 역할을 지정합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"file: 두 존에 사용되는 파일을 지정합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"allow-update: 동적 DNS 업데이트를 수행할 수 있는 호스트 시스템을 지정합니다. 이 경우 특정 호스트를 지정하지 않았습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"존 파일 만들기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 이미 위에서 전방 존(eos.net.db)과 역방 존(eos.net.rev)을 모두 지정했습니다. 이제 /var/named 디렉토리 안에 이러한 파일들을 만들어야 합니다. 전방 존부터 시작해봅시다. 아래와 같이 정보를 입력하여 파일을 만들어 주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# nano /\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \"/named/eos.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"db\"\n        }), \"\\n$ORIGIN eos.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\\n$TTL \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"86400\"\n        }), \"\\n@ \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SOA\"\n        }), \" server.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"eos\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \". admin.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"eos\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \". (\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2024051300\"\n        }), \" ;시리얼\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3600\"\n        }), \" ;새로고침\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1800\"\n        }), \" ;재시도\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"604800\"\n        }), \" ;만료\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"86400\"\n        }), \" ;최소\\n)\\n\\n; 네임 서버 정보\\n@ \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NS\"\n        }), \" server.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"eos\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\\n\\n; 네임 서버용 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IP\"\n        }), \" 주소\\nserver \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" A \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"192.168\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".3\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".210\"\n        }), \"\\n\\n; 다음 호스트 이름을 위한 A 레코드\\nmetasploitable \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" A \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"192.168\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".3\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".195\"\n        }), \"\\ndns \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" A \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"192.168\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".3\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".210\"\n        }), \"\\n\\n; \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CNAME\"\n        }), \" 레코드\\ndns-primary \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CNAME\"\n        }), \" server.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"eos\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제, 역방 존은 다음과 같이 나타나야 합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# nano /\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \"/named/eos.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"rev\"\n        }), \"\\n$ORIGIN \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3.168\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".192\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"in\"\n        }), \"-addr.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"arpa\"\n        }), \".\\n$TTL \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"86400\"\n        }), \"\\n@ \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SOA\"\n        }), \" server.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"eos\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \". admin.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"eos\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \". (\\n                                            \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2024051300\"\n        }), \" ;시리얼\\n                                            \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3600\"\n        }), \" ;새로고침\\n                                            \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1800\"\n        }), \" ;재시도\\n                                            \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"604800\"\n        }), \" ;만료\\n                                            \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"86400\"\n        }), \" ;최소 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TTL\"\n        }), \"\\n)\\n; 네임 서버 정보\\n@ \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NS\"\n        }), \" server.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"eos\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\\nserver     \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \"      A       \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"192.168\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".3\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".210\"\n        }), \"\\n\\n; 네임 서버에 대한 역방 조회\\n\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"210\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PTR\"\n        }), \" server.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"eos\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\\n\\n; \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IP\"\n        }), \" 주소에 대한 호스트 이름에 대한 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PTR\"\n        }), \" 레코드\\n\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"195\"\n        }), \"      \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \"      \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PTR\"\n        }), \"     metasploitable.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"eos\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"양방향 및 역방향 존이 모두 순서대로 되어 있습니다. 이제 파일에 적절한 권한을 설정해야 합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# chown \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"named\"\n        }), \":named /\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \"/named/eos.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"db\"\n        }), \"\\n# chown \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"named\"\n        }), \":named /\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \"/named/eos.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"rev\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 우리의 설정이 올바른지 확인해야 합니다. 이를 위해 named-checkconf 및 named-checkzone 명령어를 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# named-checkconf\\n# named-checkzone eos.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \" eos.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"db\"\n        }), \"\\n# named-checkzone \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3.168\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".192\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"in\"\n        }), \"-addr.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"arpa\"\n        }), \" eos.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"net\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"rev\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-SettingupaDNSserveronLinux_1.png\",\n        alt: \"DNS server setup\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 named 데몬을 다시 시작해야 합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-shell\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta prompt_\",\n          children: \"# \"\n        }), _jsx(_components.span, {\n          className: \"bash\",\n          children: \"systemctl start named.service\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta prompt_\",\n          children: \"# \"\n        }), _jsx(_components.span, {\n          className: \"bash\",\n          children: \"chkconfig named on\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"DNS 서비스 테스트\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Windows 호스트에서는 nslookup 명령을 사용하여 호스트인 Metasploitable의 전방 및 후방 존을 테스트할 수 있습니다. 우리는 호스트 Metasploitable의 DNS 정보를 검색할 수 있는 것을 확인할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-SettingupaDNSserveronLinux_2.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 게시물에서는 BIND 소프트웨어를 사용하여 Linux 환경에 DNS 서비스를 설정하는 과정을 탐구했습니다. DNS는 인터넷의 기본 구성 요소이며, 그 중요성을 과장할 수 없습니다. 시스템 관리자로서 Linux 환경에서 서비스를 배포할 수 있는 능력을 갖추고 DNS를 이해하는 것이 특히 중요합니다. 이 게시물이 도움이 되었다면 박수를 치거나 댓글을 남기고 더 많은 콘텐츠를 위해 팔로우해 주세요. 감사합니다!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}