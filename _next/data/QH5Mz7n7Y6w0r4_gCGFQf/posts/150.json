{"pageProps":{"posts":[{"title":"시니어 개발자도 모르는 CSS 속성과 기술들","description":"","date":"2024-05-01 23:05","slug":"2024-05-01-UnveilingHiddenTreasuresLesser-KnownCSSPropertiesandTechniques","content":"\n\n<img src=\"/assets/img/2024-05-01-UnveilingHiddenTreasuresLesser-KnownCSSPropertiesandTechniques_0.png\" />\n\n- mix-blend-mode: 창의적 블렌딩 모드\n\n지루한 단색 배경과 직선적인 색에 지쳤나요? mix-blend-mode로 디자인에 창의성을 불어넣어 보세요. 이 속성을 사용하면 요소의 색상을 뒤에 있는 내용과 혼합하여 독특하고 눈에 띄는 효과를 만들 수 있습니다.\n\n```js\ndiv {\n  mix-blend-mode: multiply;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*2PbamXURjubWXJKy1oSWlg.gif)\n\n2. clip-path: 사용자 지정 모양 클리핑\n\n사각형 요소의 제약에서 벗어나 clip-path로 자유롭게 행동하세요. 이 속성을 사용하면 원, 다각형 또는 복잡한 곡선으로 요소에 사용자 지정 클리핑 경로를 정의할 수 있습니다. 지루한 직사각형은 이제 작별하고 동적이고 매력적인 디자인과 인사하세요.\n\n```js\ndiv {\n  clip-path: circle(50% at center);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n![Scroll Snap Example](https://miro.medium.com/v2/resize:fit:1212/1*_S39ZNCxYi2eOIh66HTmKg.gif)\n\n3. scroll-snap-type와 scroll-snap-align: 부드러운 스크롤링 제어\n\n스크롤 가능한 요소의 사용자 경험을 향상시키려면 scroll-snap-type 및 scroll-snap-align을 사용하세요. 이러한 속성을 사용하면 요소를 자동으로 특정 간격이나 위치에 맞춰 부드럽고 직관적인 스크롤 경험을 만들 수 있습니다.\n\n```js\nsection {\n  scroll-snap-type: y mandatory;\n}\n\ndiv {\n  scroll-snap-align: start;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n![이미지](https://miro.medium.com/v2/resize:fit:900/1*nt6BatwGw0hctcRxLiAi_Q.gif)\n\n4. backdrop-filter: 멋진 시각 효과\n\n백드롭 필터(backdrop-filter)로 디자인의 시각적 매력을 한층 높여보세요. 이 속성은 요소 뒤에 있는 영역에 흐림 또는 색상 이동과 같은 그래픽 효과를 적용하여 아름다운 시각적 효과를 만들어내며, 페이지 전체적인 미학을 향상시킵니다.\n\n```js\ndiv {\n  backdrop-filter: blur(5px);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*fn8-zI7MWHBHw73F8P0fBg.gif)\n\n5. will-change: 성능 최적화\n\n요소를 애니메이션화하거나 복잡한 변형을 적용할 때 성능이 저하될 수 있습니다. 여기서 will-change가 등장합니다. 이 속성은 브라우저에 미리 알려주어 요소의 속성이 변경될 것으로 예상되어 렌더링을 최적화하고 부드러운 애니메이션을 제공할 수 있게 합니다.\n\n```js\ndiv {\n  will-change: transform;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n6. shape-outside: 텍스트를 모양 주변으로 감싸기\n\n지루한 직사각형 모양에서 텍스트가 흐르는 것이 지겨우신가요? shape-outside으로 레이아웃에 활력을 불어넣어보세요. 이 속성은 텍스트가 감싸일 사용자 정의 모양을 정의할 수 있게 해주어 주변 요소와 상호작용하는 시각적으로 매력적인 레이아웃을 만들 수 있습니다.\n\n```js\nimg {\n  shape-outside: circle(50%);\n}\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1304/1*C5njQ4Z4M216a5M_OEygPA.gif\" />\n\n<div class=\"content-ad\"></div>\n\n7. 오버스크롤 동작 사용자 정의: 스크롤 동작을 제어하세요\n\n오버스크롤 동작을 통해 사용자가 스크롤 가능한 영역 끝에 도달했을 때 웹 페이지가 어떻게 반응하는지 제어하세요. 이 속성을 사용하면 브라우저가 스크롤 오버플로우를 처리하는 방법을 정의할 수 있습니다. 이는 오버플로우를 허용하거나 방지하거나 경계로 다시 되돌아가는 방식 중 어떻게 처리할지를 정할 수 있습니다.\n\n```js\ndiv {\n  overscroll-behavior: contain;\n}\n```\n\n![예시 이미지](https://miro.medium.com/v2/resize:fit:784/1*K_A4_GW4p9mkJzmU_YBUbg.gif)\n\n<div class=\"content-ad\"></div>\n\n8. 텍스트 방향 및 writing-mode: 수직 텍스트 레이아웃\n\n일부 아시아 스크립트와 같이 위에서 아래로 또는 오른쪽에서 왼쪽으로 전통적으로 읽는 언어에 대해, text-orientation 및 writing-mode은 필수적인 도구를 제공합니다. 이러한 속성들은 텍스트의 방향과 방향을 제어하여 수직 레이아웃을 가능하게하고 접근성을 향상시키는 데 도움을 줍니다.\n\n```js\np {\n  writing-mode: vertical-lr;\n  text-orientation: upright;\n}\n```\n\n![수직 텍스트 레이아웃](https://miro.medium.com/v2/resize:fit:1400/1*Wz7buEDtszMgOhHrF-tbTg.gif)\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*4MPGEuRjtxEsaUJ-FEgOhQ.gif)\n\n9. content-visibility: 렌더링 성능 향상\n\n대량의 목록이나 그리드를 다룰 때 렌더링 성능이 저하될 수 있습니다. content-visibility는 브라우저가 오프스크린 콘텐츠를 필요한 경우까지 렌더링을 건너뛸 수 있게 해 성능을 크게 향상시키고 리소스 소비를 줄일 수 있습니다.\n\n```js\nul {\n  content-visibility: auto;\n}\n``` \n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*C2Q223zce9QYqesknQHaNQ.gif)\n\n10. aspect-ratio: Preserving Aspect Ratios\n\n비디오나 컨테이너와 같은 요소들의 비율을 유지하는 것은 어려울 수 있지만, aspect-ratio 속성을 사용하면 이 작업을 간단히 할 수 있습니다. 이 속성을 사용하면 요소의 원하는 종횡비를 지정할 수 있어 내용이나 크기와 관계없이 비례적으로 크기가 조절됨을 보장할 수 있습니다.\n\n```js\ndiv {\n  aspect-ratio: 16 / 9;\n}\n``` \n\n<div class=\"content-ad\"></div>\n\n\n![CSS](https://miro.medium.com/v2/resize:fit:1400/1*FTxfXRBfT7sTlZHRG3oolQ.gif)\n\nCSS는 웹 디자이너와 개발자들에게 다양한 가능성을 제공하는 다재다능한 언어입니다. 여기서 강조된 잘 알려지지 않은 속성과 기술을 탐험함으로써, 여러분의 프로젝트에서 창의성, 효율성, 그리고 성능의 새로운 차원을 개척할 수 있습니다. 이 숨겨진 보석들을 받아들이고, 여러분의 디자인이 새로운 우아함과 기능성으로 번성하는 것을 지켜보세요.","ogImage":{"url":"/assets/img/2024-05-01-UnveilingHiddenTreasuresLesser-KnownCSSPropertiesandTechniques_0.png"},"coverImage":"/assets/img/2024-05-01-UnveilingHiddenTreasuresLesser-KnownCSSPropertiesandTechniques_0.png","tag":["Tech"],"readingTime":4},{"title":"시스템 객체 확장으로 자바스크립트 DOM 빌더를 개선하는 방법","description":"","date":"2024-05-01 23:02","slug":"2024-05-01-BuildingABetterJavaScriptDOMBuilderPart2ExtendingSystemObjects","content":"\n\n<img src=\"/assets/img/2024-05-01-BuildingABetterJavaScriptDOMBuilderPart2ExtendingSystemObjects_0.png\" />\n\n첫 번째 부분에서는 DOM-JON 개념을 소개했습니다. HTML을 JSON 스타일의 네임스페이스로 재구성하고, 이를 DOM에 직접 번역하는 과정을 간단하게 소개하며, InnerHTML을 통해 작업하는 대신에 바로 DOM으로 이동하는 이유를 다뤘습니다.\n\n간단한 사이드 노트, 이 기사의 목적은 여러분에게 이것을 사용하는 방법을 가르치는 것이 아니라, 제가 이를 구축하는 과정에서의 사고 과정을 공유하는 것입니다. 실시간으로 말이에요. 피드백을 받기 위해 내 머릿속에 정리하기 위해 글로 써내리기도! 문서화 및 전체 웹사이트는 나중에 제작될 예정입니다.\n\n이번에는 기존 엘리먼트에 여러 노드를 쉽게 적용할 수 있도록하고, 이전 \"make\" 루틴의 \"attach\" 부분에 대한 액세스를 독립적으로 제공하고, 속성 처리를 더 견고하게 만들고자 합니다.\n\n<div class=\"content-ad\"></div>\n\n'원인은 몇 가지 부족한 것이 있기 때문이죠. Element.style 나 Element.dataset과 같은 속성은 Object.assign을 통해 요소에 적용할 수 없습니다. 속성에 직접 적용해야 합니다. 또한 DOM-JON 구조의 \"속성 객체\"를 사용하여 요소를 \"배치\"하는 방법과 같은 다른 정보를 전달할 수 있다면 좋겠어요.\n\n이 부분을 간단히 하는 가장 좋은 방법은 무엇일까요?\n\n# 시스템 객체 확장\n\n기본적으로, 저는 기존 Document, Object, Node 및 Element 객체에 내 방법을 추가할 것입니다. 부모 클래스에 대한 정적 값 및 프로토타입에 대해서도 추가할 겁니다.\n\n<div class=\"content-ad\"></div>\n\n이제 이 일에 대해 너무 많은 공포가 있어요. 마치 JavaScript의 강력하고 다용도 객체 모델을 수정하면 안 된다는 것처럼 말이죠. \"결코 하지 말아야 한다!\" 라고 하는 분들은 충분한 이유 없이 말하는 경우가 많아요. 하지만 합당한 우려가 세 가지 있습니다.\n\n- IE 7 / 이전 버전은 기존 객체에 프로토 타입 변경을 상속하지 않습니다.\n- 우리 자신의 함수와 언어의 미래 변경 사이에 이름 충돌의 문을 열어둡니다.\n- 변경할 수 있는 객체를 실수로 덮어쓰고, 이들을 열거할 수 있을 경우에 덮어쓸 수 있습니다.\n\n그 첫 번째 우려는 어질어질해요! 이제는 2024년이에요. 우리는 전혀 구식이 아닌 JavaScript를 쓰고 있어요. nullish coalescing, for..of, IE 어떤 버전에서도 작동하지 않는 spread / rest 연산자 등을 사용하고 있어요. 심지어 \"화살표 함수\"가 있으면 익스플로러의 JSCRIPT 엔진이 즉시 다운될 정도에요.\n\n두 번째로, 이 문제는 네이밍 규칙을 사용하여 쉽게 해결할 수 있어요. 이런 경우에는 lodash의 방식을 가져와서 모든 사용자 지정 메서드와 속성의 시작에 이중 밑줄을 사용할 거에요. 누군가가 비슷한 기교를 사용하지 않는 한 문제없을 거예요.\n\n<div class=\"content-ad\"></div>\n\n저 세 번째 코드는 대부분 사람들이 바보같은 일을 하는 경우에 발생한 것이에요:\n\n```js\nElement.prototype.__make = function(tagName, ...attach) {}\n```\n\n해야 할 것은 다음과 같아요:\n\n```js\nObject.defineProperty(\n  Element.prototype,\n  \"__make\",\n  { value : function(tagName, ...attach) {} }\n);\n```\n\n<div class=\"content-ad\"></div>\n\nObject.definePropert[ies | y]는 우리의 친구입니다... 그리고 JavaScript의 가장 안타깝게도 under-used한 부분 중 하나입니다. 전체 새 클래스를 만들지 않고 기존 Object에 추가하는 능력은 엄청 유용합니다. 시스템 객체가 이미 존재하기 때문에 전역 네임스페이스에 추가하는 것처럼 보이지 않습니다. 기본적으로 이러한 메서드에 의해 추가된 객체 속성 - 네, 속성, \"속성\"이 아니라. 그렇습니다, 심지어 DOM에 있는 경우도! - 객체에 대해 열거할 수 없게 만듭니다. 시스템 메서드만큼 \"숨겨진\" 것입니다. 현대 클래스에서 #을 접두사로 붙일 때와 같습니다. 필요할 경우에는 열거 가능하게 만들기 위해 인수 객체에 enumerable:true를 추가할 수도 있습니다.\n\n# Object.definepropert[ies|y] 개선하기\n\n이 함수들을 좋아하지만, 문법에는 약간 번잡한 부분이 있어 불필요하게 장황하게 느끼게 할 수 있습니다. 이전 기사에서처럼 \"타입\"을 가로채서 요소의 \"타입\"을 확인하여 일반 객체를 전달하면 defineProperty과 같이 동작하지만, 다른 값 유형은 자동으로 가장 일반적으로 사용하는 기술인 객체 `{` value `}`에 래핑하게 할 수 있습니다.\n\n이를 돕기 위해 - 특히 일반 Object를 후손으로부터 격리하기 위해 - 나만의 Object.__type 루틴을 추가합니다. JavaScript에서 가장 큰 고통 중 하나는 범용 \"데이터 유형\" 객체를 다른 객체와 구분하는 간편한 메커니즘이 없다는 것입니다. 일부 후손은 typeof == \"Object\"를 반환하고 이는 원하는 바가 아닐 수 있습니다... 그리고 배열 같은 것들이 instanceof와 같은 것을 사용해야 할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n목적을 달성하기 위해 Object.prototype에 이것을 적용하고 있어요.\n\n```js\n    __type : { get : function() {\n\n      let value = Object.prototype\n        .toString\n        .call(this)\n        .split(\" \", 2)\n        [1].slice(0, -1);\n\n      this.__define(\"__type\", value);\n      return value;\n    } } // Object.prototype.__type\n```\n\ntoString 메서드에는 실제 Object 클래스 이름이 포함되어 있어서 대부분 Array에는 Array라고, Node에는 Node라고, 일반 객체에는 Object라고 등등 표시될 거에요. 문자열 처리면에서 해당 값을 가져오는 것이 약간 무겁지만, Object.__type을 두 번 이상 요청하면 루틴이 두 번 호출되는 대신 define이 반환되도록 타입을 재정의할 수 있어요.\n\n그러나 \"boolean\"과 같은 소수의 Object에 대해 이것은 작동하지 않습니다. 이것은 명백히 Object인데도 Object.prototype에서 상속받지 않기 때문이에요. (프로토타입이 있는) Element 등 특정 하위 클래스를 알 필요가없는 다른 객체들이 있을 수 있어요. Element 인지 여부를 알고 싶은데 HTMLTableElement인지를 알아야 할 필요는 없는 것이죠.\n\n<div class=\"content-ad\"></div>\n\n따라서 미리 값의 값을 먼저 선언해야 합니다:\n\n```js\n for (let value of [\n   \"Array\", \"Boolean\", \"Date\", \"Element\",\n   \"Error\", \"Function\", \"Map\", \"Node\",\n   \"Number\", \"RegExp\", \"Set\", \"String\",\n   \"Symbol\", \"Text\"\n ]) Object.defineProperty(\n   window[value].prototype, \"__type\", { value }\n );\n```\n\n다행히도 모든 것이 window의 하위 요소이므로 window[value]를 사용하여 모든 이름을 배열에서 대상으로 할 수 있습니다. 매번 일일이 선언할 필요 없이 또는 [name, Object]와 같이 어리석고 무의미한 객체를 만들 필요가 없습니다.\n\n자바스크립트를 잘 몰라도 되는 분들을 위해,  value는 `{` \"value\": value `}`와 기능적으로 동일합니다. 객체 선언에서 변수를 그냥 넣으면 변수의 이름이 속성의 이름이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n지금은 우리가 __define 루틴을 만들 수 있게 했습니다.\n\n```js\n    __define : { value : function(name, value) {\n      /*\n        Object.defineProperty를 통해 속성을 할당합니다.\n        일반적인 Object가 전달되면 변경하지 않을 것이지만,\n        타입 지정된 Object나 다른 값이 전달되면 새 속성의 값을\n        할당할 Object로 이스케이프됩니다.\n        \n        전달된 객체대신 \"this\"를 반환하며, 내 의견으로는\n        훨씬 더 유용한 값입니다.\n      */\n      return Object.defineProperty(this, name,\n        \"Object\" == value.__type ? value : { value }\n      );\n    } }, // Object.prototype.__define\n```\n\n그리고 여러 속성을 설정하기 위한 __defineProps도 있습니다.\n\n```js\n    __defineProps : { value : function() {\n      for (const props of arguments) {\n        for (const [name, value] of Object.entries(props)) {\n          this.__define(name, value);\n        }\n      }\n      return this;\n    } }, // Object.prototype.__defineProps\n```\n\n<div class=\"content-ad\"></div>\n\n저는 이것이 단지 구문 설탕을 구현하는 것이라는 것을 알지만, 괜찮습니다.\n\n그들이 \"this\"를 반환한다는 것에 주목하세요. 이는 정의나 속성을 쉽게 연결할 수 있게 해줍니다. 수정된 객체 대신 적용된 객체를 반환하는 것은 많은 내장 JS 함수의 어리석은 부분 중 하나이며, 사용자 정의 메서드로 \"감싸는\" 또 다른 좋은 이유입니다.\n\n구문 설탕에 관해서 말씀드리면... 몇몇 흔히 사용되는 Object 메서드에 대한 별칭을 제공하고 있습니다. 많은 방법이 Object에 정적인 메서드인 것은, 조작된 객체를 전달해야 하는 번거로움을 초래합니다. JS의 대부분이 Object의 형식을 갖춘 객체임을 감안하면, 이것은 약간 어리석은 것처럼 보일 수 있습니다. \"Object.entries(myObject)\" 대신에 그냥 \"myObject.entries\"로 간단히 작성할 수 있어야 하는 부분에 대해 지금 까지 많이 타이핑하는 것이 싫어졌습니다.\n\n```js\n  /*\n    다음 속성들은 Object 클래스에서 혼란스럽게 정적입니다.\n    이는 타입 캐스팅을 강제로 이용하는 데 편리하지만,\n    이미 객체인 것을 알고 있을 때는 복잡하다고 생각할 수 있습니다!\n\n    그래서 우리는 몇 가지 별칭을 만들어 보겠습니다.\n  */\n  const makeAliasWrapper = (method, name) => {\n    Object.prototype.__define(\n      `__${name}`,\n      { [method] : function() {\n        return Object[name](this, ...arguments)\n      } }\n    );\n  }; // makeAliasWrapper\n  \n  for (const [ method, names ] of [\n    [ \"get\",\n      [ \"entries\", \"isFrozen\", \"isSealed\", \"isExtensible\", \"keys\", \"values\" ]\n    ],\n    [ \"value\",\n      [ \"assign\", \"freeze\", \"hasOwn\", \"is\", \"seal\", \"preventExtensions\" ]\n    ]\n  ]) for (name of names) makeAliasWrapper(method, name);\n```\n\n<div class=\"content-ad\"></div>\n\n저는 객체에 열거 가능한 키가 있는지 확인하는 \"__empty\" 게터도 만듭니다. 대부분의 경우, 이렇게 하는 이유는 제 기억력이 좋지 않아서 그런데요, \"__empty\"가 \"Object.keys(target).length == 0\" 또는 \"!target.__keys.length\"보다 기억하기 쉽거든요. 저의 별칭을 사용해서요.\n\n```js\n    __empty : { get : function() {\n      /*\n        객체에 열거 가능한 키가 있는지 편리하게\n        보고합니다.\n      */\n      return !this.__keys.length;\n    } }, // Object.prototype.__empty\n```\n\n그리고 이것으로 좋은 베이스라인 \"헬퍼\" 라이브러리가 완성됩니다.\n\n그리고, 네, 전 \"arrow\" 대신 전체 함수를 사용하고 있습니다. 이유는 실제로 뒤집는 객체인 \"this\"에 액세스해야 하기 때문이에요. \"this\"를 창으로 설정하는 화살표 함수는 정말 많은 시나리오에서 아무 쓸모가 없거든요.\n\n<div class=\"content-ad\"></div>\n\n# \"첨부\"와 \"setAttr\"\n\n실제로 make 루틴을 구현하기 전에, 자식 요소들과 속성 객체의 \"attach\"를 별도의 함수로 분리하고 싶어요. 여러 하위 루틴들을 구현하고 있기 때문에, 우리의 지역 범위에 있는 \"attachData\" 객체 내부에 룩업 테이블/객체를 만들고 있어요.\n\n우선은 \"sterile / void / empty\" 요소들에 대한 오류 감지를 해야해요. 이러한 요소에 속성을 첨부할 수 있지만 자식 노드는 첨부할 수 없어요. 나는 한 걸음 더 나아가서 특정 속성으로 String/Number 콘텐츠를 추가하는 것을 허용해요. 그러므로 우리는 다음을 할 수 있을 거에요:\n\n```js\n[ \"img=images/test.png\", \"Test Image\" ]\n```\n\n<div class=\"content-ad\"></div>\n\n아래의 코드조각을 Markdown포맷으로 표현하면 다음과 같습니다:\n\n```js\n<img src=\"images/test.png\" alt=\"Test Image\">\n```\n\n나는 어떤 함수나 배열을 통한 속성 처리도 허용한다.\n\n```js\ncanAttach: {\n    /*\n        null          첨부할 수 없음 (빈 태그)\n        Boolean true  첨부할 수 있음 (기본값으로 기재되지 않은 경우)\n        Array         인수 키에 할당할 값\n        Function      콜백 함수(element, value)을 처리함\n        String        this.setAttribute로 첨부\n    */\n    area     : \"alt\",\n    img      : \"alt\",\n    meta     : \"content\",\n    path     : \"content\",\n    track    : \"label\",\n    input    : \"value\",\n    base     : null,\n    br       : null,\n    col      : null,\n    embed    : null,\n    hr       : null,\n    link     : null,\n    param    : null,\n    source   : null,\n    wbr      : null,\n    // 재밌는 목적으로 일부 SVG를 포함\n    polygon  : \"points\",\n    polyline : \"points\",\n    circle   : [ \"cx\", \"cy\", \"r\" ],\n    ellipse  : [ \"cx\", \"cy\", \"rx\", \"ry\" ],\n    line     : [ \"x1\", \"y1\", \"x2\", \"y2\" ],\n    path     : [ \"x1\", \"y1\", \"x2\", \"y2\" ],\n    rect     : [ \"x\", \"y\", \"width\", \"height\" ]\n}, // attachData.canAttach\n```\n\n<div class=\"content-ad\"></div>\n\n그것은 우리에게 입력 값 설정하는 두 가지 방법을 제공한다는 걸 확인할 수 있어요. 다시 한번 말하지만, 저는 괜찮아요. 옵션은 좋은거죠.\n\ncanAttach의 유형은 각각 다른 루틴을 사용해요. 제가 선택한 방법은 switch/case보다는 Object 룩업을 사용하는 것이에요. 옵션 체이닝 덕분에 attach 루틴 자체를 크게 간소화할 거에요.\n\n```js\n    canType : {\n\n      \"Array\" : (target, arg, canAttach) => {\n        \n        if (\"Array\" !== arg.__type) throw new Error(\n          `<${this.tagName}>.__attach는 배열을 비-속성 인수로만 첨부할 수 있어요. \"${arg.__type} 대신에 입력했네요.`\n        );\n        \n        if (arg.length !== canAttach.length) throw new Error(\n          `<${this.tagName}>.__attach는 어떤 배열 인수에도 ${canAttach.length}개의 값이 필요해요. \"${arg.length} 대신 입력했네요.`\n        );\n        \n        Object.assign(this, Object.__fromKeyValuePairs(canAttach, args));\n        \n      }, // attachData.canType.Array\n\n      \"String\" : (target, arg, canAttach) => {\n        \n          switch (arg.__type) {\n            case \"Number\":\n            case \"String\":\n              target.setAttribute(canAttach, arg);\n              return;\n          }\n          \n          throw new Error(\n            `<${this.tagName}>.__attach는 문자열 또는 숫자 비-속성 인수만 첨부할 수 있어요. \"${arg.__type} 대신 입력했네요.`\n          );\n          \n      } // attachData.canType.String\n\n    }, // // attachData.canType\n```\n\n여기에 \"throw\"를 많이 사용한 것을 주목하세요. 심각한 오류가 발생했을 때는 스크립팅이 멈춰야 한다고 확신을 갖고 있어요. 그 자리에서 멈춰야 해요. HTML과 JavaScript는 이를 처리하기 위한 완벽한 메커니즘을 제공하지만 여전히 너무 관대하다고 생각해요.\n\n<div class=\"content-ad\"></div>\n\n\"argument\"의 종류에 따라 특별한 처리 사례가 있을 수 있습니다.\n\n```js\n    argType : {\n\n      \"Array\" : (target, arg, canAttach) => target.__make(...arg),\n\n      \"Function\" : (target, arg, canAttach) => target.append(arg(target))\n\n    }, // // attachData.argType\n```\n\n그리고 위의 어떤 경우도 일치하지 않을 때의 대체 방안입니다.\n\n```js\n    append : (target, arg, canAttach) => target.append(arg)\n```\n\n<div class=\"content-ad\"></div>\n\n위 모든 것이 갖춰진 상태에서 Element.__defineProps를 Element.prototype.__attach 메서드에 적용할 수 있습니다.\n\n```js\n Element.prototype.__defineProps( {\n\n    __attach : function() {\n\n      const canAttach = attachData.canAttach[\n        this.tagName.toLowerCase()\n      ] || true;\n\n      for (const arg of arguments) {\n\n        if (\"Object\" === arg.__type) this.__setAttr(arg);\n\n        else if (canAttach) (\n          attachData.canType[canAttach.__type] ??\n          attachData.argType[arg.__type] ??\n          attachData.append\n        )(this, arg, canAttach);\n\n        else throw new Error(\n          `<${this.tagName}>은(는) 빈 Element이므로 해당 Element.prototype.__attach로 자식요소를 추가할 수 없습니다.`\n        );\n\n      }\n\n      return this;\n\n    }, // Element.prototype.__attach\n```\n\nElement의 tagName을 룩업했을 때 찾을 수 없다면 대부분의 태그는 첨부 파일을 가질 수 있으므로 true로 기본값으로 설정됩니다.\n\n만약 순수한 객체라면, 속성을 설정하기 위해 해당 객체를 사용합니다. 만약 loose-true라면 널 병합 연산자를 사용하여 올바른 첨부 서브루틴을 선택합니다. 만약 아무것도 작동하지 않으면 자식 요소/데이터를 첨부할 수 없는 요소에서 예외를 발생시킵니다.\n\n<div class=\"content-ad\"></div>\n\n그리고 함수에 전달된 모든 인수를 처리하기 때문에 속성 및 자식 뿐만 아니라 make도 선언할 수 있습니다. 따라서 DOM-JON 항목의 배열이 있다면 attach에서 분해할 수 있습니다.\n\n```js\nconst test = [\n  [ \"h2\", \"테스트 제목\" ],\n  [ \"p\", \"간단한 테스트 단락\" ]\n];\n\ndocument.getElementById(\"testDIV\").__attach(...test);\n```\n\n이렇게 하면 실제 JSON 객체를 만들고 쉽게 첨부할 수 있습니다. 이제 HTML을 서버측에서 빌드하지 않고 JSON을 보내는 가능성을 생각해보세요.\n\n이제 이렇게 생긴 \"setAttr\" 메소드를 호출합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n__setAttr: function (attr) {\n  \n  for (const [key, value] of Object.entries(attr)) {\n    \n    switch (key) {\n      case \"__makePlace\":\n        this.__define(key, value);\n        continue;\n      case \"dataset\":\n      case \"style\":\n        if (\"Object\" !== value.__type) throw new Error(\n          `<${this.tagName}>.__setAttr requires a Object when setting \"${key}\", got \"${value.__type}\" instead.`\n        );\n        Object.assign(this[key], value);\n        continue;\n    }\n    \n    switch (value.__type) {\n      case \"Array\":\n      case \"Function\":\n      case \"Object\":\n        this[key] = value;\n        continue;\n    }\n    \n    this.setAttribute(key, value);\n    \n  }\n  \n  return this;\n  \n} // Element.prototype.__setAttr\n```\n\n\"쉬운\" `Object.assign` 대신 손수 속성 객체를 반복해서 순회하는 방법을 사용합니다. 이렇게 하면 정의를 후킹하고, 데이터셋과 스타일을 올바르게 처리할 수 있습니다. 대부분의 속성에는 `setAttribute`를 사용하는 것이 좋지만, 그것은 값들을 문자열로만 설정할 수 있습니다. 배열, 함수 및 객체 기능을 트랩할 수 있어서 이벤트 등을 설정할 수 있게 합니다.\n\n참고로, DOM-JON에서는 className 대신 `{` \"class\": \"myClassName\" `}`를 사용해야 합니다. 여러분! className을 수동으로 \"class\"로 이름을 변경하여 두 가지 방법으로 사용할 수 있도록 할지 고민 중입니다. DSS \"dot\" 구분 기호를 사용하여 클래스를 설정하는 것이 시간을 들이는 가치가 있는 것일까요?\n\nElement에 이 모든 것을 설정한 후에는 새로운 개선된 `__make`을 사용할 수 있게 됩니다. 이것을 모듈의 일부로 내보내거나 전역 범위에 넣는 것보다는, 저는 문서 객체에 이것을 넣을 것입니다!\n\n<div class=\"content-ad\"></div>\n\n```js\n  document.__defineProps( {\n\n    __make : (selector, ...attach) => {\n\n      let\n        parts = { attr : {}, data : {}, define : {} },\n        value;\n\n      for (const [ delimiter, typeName, attrName ] of makeData.delimiters) {\n        [selector, value] = selector.split(delimiter, 2);\n        if (value) parts[typeName][attrName] = value;\n      }\n      \n      const\n        tagName = (selector || \"span\").toLowerCase(),\n        namespace = (\n          parts.data.namespace ? (\n            parts.data.namespace.indexOf(\"http://\") === 0 ?\n            parts.data.namespace :\n            (\n              makeData.namespaces[parts.data.namsspace.toUpperCase()] ?? \n              makeData.namespaces.HTML\n            )\n          ) : makeData.namespaces.HTML\n        ),\n        e = Object.assign(\n          document.createElementNS(namespace, tagName),\n          parts.attr\n        );\n      \n      if (!parts.define.__empty) {\n        for (const [key, value] of parts.define.__entries) {\n          e.__define(key, value);\n        }\n      }\n\n      if (parts.data.value) e.setAttribute(\n        makeData.values[tagName] ?? \"value\",\n        parts.data.value\n      );\n\n      if (parts.data.special) {\n        const attrName = makeData.special[tagName];\n        if (attrName) e.setAttribute(attrName, parts.data.special);\n        else console.warn(\n          `Special underscore property not supported on <${tagName}>, ignoring value \"${parts.data.special}\"`\n        );\n      }\n\n      if (attach) e.__attach(...attach);\n\n      return e;\n\n    } // document.__make\n\n  } ); // document extensions\n```\n\n큰 변경 중 하나는 이제 \"define\"을 구분 기준으로 사용한다는 것입니다. 이를 새로운 구분자 조회에서 확인할 수 있습니다:\n\n```js\n    /*\n      DSS 구분자는 여기 나열된 순서의 역순으로 사용해야 합니다.\n      여기 나열된 나중에 있는 문자는 이전 섹션 값들의 값 안에서 사용할 수 없습니다.\n      \n      예를 들어 ID 내에서 \".\"을 사용할 수 없습니다.\n    */\n    delimiters : [\n      [ \"=\", \"data\",   \"value\" ],\n      [ \"?\", \"attr\",   \"name\" ],\n      [ \".\", \"attr\",   \"className\" ],\n      [ \"#\", \"attr\",   \"id\" ],\n      [ \"&\", \"define\", \"__stateName\" ],\n      [ \"@\", \"define\", \"__makePlace\" ],\n      [ \":\", \"data\",   \"namespace\" ],\n      [ \"_\", \"data\",   \"special\" ]\n    ], // makeData.delimiters\n```\n\n이를 통해 DOM 요소에 변경 불가능하고 열거되지 않는 정의를 만들 수 있어요. 다음 부분에 이르러 성능이 좋아지는데 유용할 것입니다: Element.prototype.__make\n\n<div class=\"content-ad\"></div>\n\n```js\n    __make : function() {\n      \n      const e = document.createElement(...arguments);\n      this.insertAdjacentElement(e.__makePlace ?? \"beforeend\", e);\n      return this;\n      \n    }, // Element.prototype.__make\n```\n\n이 버전의 make 함수는 새 Element를 부모 요소와 관련하여 자동으로 첨부합니다. 다음과 같은 코드가 있다고 가정해봅시다:\n\n```js\n<div id=\"test\">\n  <p>원본 콘텐츠</p>\n</div>\n```\n\n이 기능을 한 번 시도해보세요 — __attach가 Element.prototype.__make를 호출하므로 둘 다 테스트됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ndocument.getElementById(\"test\").__attach(\n  [ \"h2@afterbegin\", \"처음에 <h2> 추가됨\" ],\n  [ \"h1@beforebegin\", \"앞에 <h1> 추가됨\" ],\n  [ \"footer\", // beforeend는 기본값\n    [ \"p\", \"마지막에 <footer> 추가됨\" ]\n  ],\n  [ \"p@afterend\", \"<p> 뒤에 추가됨\" ]\n);\n```\n\n여기 동작 중인 것이 있는 펜입니다:\n\n전체 DOM-JON 코드베이스를 외부 {}에 넣어 scope isolation을 만들었음을 볼 수 있습니다. 오랜 시간 동안 JS의 let/const가 쓸모 없다고 생각했는데, 그것들을 사용하면 이전에 IIFE에 낭비했던 것들을 대체할 수 있다는 것을 깨달았습니다. 자주 캐시를 비운 첫 로드에서 클라이언트 사이드 파일 수를 나누는 모듈을 사용하지 않아도 됩니다. 이 방법을 사용하면 별도의 스크립트를 연결하여 배포 시 파일 수를 줄일 수 있습니다.\n\n# 새로운 Object 메소드 요약\n\n<div class=\"content-ad\"></div>\n\n그래서 이제 DOM-JON을 다루는 방법에 대해 다음과 같은 메서드가 있습니다:\n\n**method Element.prototype.__attach(...attachments)**\nattachment 유형에 따라 노드 또는 속성을 문서에 첨부합니다. 일반적인 객체는 노드 속성 및/또는 특별히 정의된 상태로 적용되며, 배열은 this.__make(Element.prototype__make)에 전달됩니다. 그 외의 경우는 추가됩니다.\n\n**method document.__make(selector, ...attachments)**\nDSS를 적용하여 셀렉터로부터 Element를 생성한 다음 첨부를 Element.prototype.__attach에 전달합니다.\n\n**method Element.prototype.__make(selector, ...attachments)**\nDocument.__make를 호출하여 Element를 생성한 다음, 새 Element의 __makePlace 값에 따라 \"this\"에 추가되거나, 선언되지 않은 경우 기본값으로 \"beforeend\"에 추가됩니다.\n\n<div class=\"content-ad\"></div>\n\n\nmethod Element.prototype.__setAttr(obj)  \n요소에 속성:값 쌍의 일반 객체를 할당합니다. 일부 속성은 __define으로 생성되도록 가로챕니다. 스타일 및 데이터세트와 같은 객체 하위 속성은 정규화되어 작동합니다. 함수, 배열 및 기타 객체는 this[key] = value로 할당되고, 다른 모든 값 유형은 this.setAttribute(key, value)로 할당됩니다.\n\n또한 시스템 객체에 대한 많은 유용한 추가 기능들이 있습니다.\n\nmethod Object.prototype.__define(name, value)  \nObject.defineProperty와 유사하지만 일반 객체를 `{` value `}`로 할당하며 \"this\"를 반환하고 전달된 값이 아닙니다.\n\nmethod Object.prototype.__defineProps(...props)  \n__define이 defineProperty와 유사하다면, __defineProps는 defineProperties와 유사합니다. 가장 큰 차이점은 여러 다른 이름/속성 쌍의 객체를 수락할 수 있으며 첫 번째 전달된 인수 대신 \"this\"를 반환한다는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n정적 메서드 Object.__defineMulti(targets, ...props)\n여러 대상에 속성을 할당합니다. 대상은 키 배열이어야하며, 그 다음 ...props의 각 객체와 일치해야합니다.\n\n정적 메서드 Object.__fromKeyValueArrays(keys, values)\n두 배열에서 객체를 생성합니다.\n\ngetter 및/또는 propertyObject.prototype.__type\n단일 \"유형\"을 반환합니다. 마치 통일된 \"typeof\" 및 \"instanceof\"처럼 다루기가 훨씬 덜 복잡한 것처럼. 대부분의 객체에 대해 이것은 처음 호출시 getter이지만 절대 수정할 수없는 열거 불가 속성으로 재정의됩니다. 일부 일반 객체 유형도 해당 속성으로 시작됩니다.\n\n이것이 \"공개적으로 보이는\" 속성과 메서드입니다. 전역 변수나 전역 함수가 필요하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n그게 이번에는 그게 다야. 13,000 줄의 코드가 있지만 gzip으로 압축하면 겨우 4,400 줄만 남아. 압축 후 최소화하면 3,000 줄도 안 될 것 같아.\n\n이 알파 빌드를 여기서 다운로드할 수 있어:\nhttps://cutcodedown.com/for_others/domjon/domjon.alpha4.js\n\n다음에는 \"__make\"로 구축된 DOM 구조에 직접 연결할 수 있는 getter 및 setter를 생성하는 \"State\" 객체를 추가할 거야. 이는 \"listeners\"가 작동하는 방식과 유사하다.\n\n# 기사 목차\n\n<div class=\"content-ad\"></div>\n\n# 파트 1 : 기본 개념\n# 파트 2 : 시스템 객체 확장 (현재 위치)\n# 파트 3 : 상태\n# 파트 4 : 템플릿 및 모듈 (곧 제공 예정)","ogImage":{"url":"/assets/img/2024-05-01-BuildingABetterJavaScriptDOMBuilderPart2ExtendingSystemObjects_0.png"},"coverImage":"/assets/img/2024-05-01-BuildingABetterJavaScriptDOMBuilderPart2ExtendingSystemObjects_0.png","tag":["Tech"],"readingTime":19},{"title":"HTMX: 최신 프론트엔드 개발을 위해 반드시 필요한 것","description":"","date":"2024-05-01 23:00","slug":"2024-05-01-MasteringHTMXAPracticalApproachtoStreamlinedFrontendDevelopment","content":"\n\n<img src=\"/assets/img/2024-05-01-MasteringHTMXAPracticalApproachtoStreamlinedFrontendDevelopment_0.png\" />\n\n🚀 전세계를 뒤집을 변화를 소개합니다: HTMX! 이 강력한 도구는 고전적인 서버 측 렌더링과 현재의 클라이언트 측 상호 작용 사이의 간극을 우아하게 해결해줍니다. 수많은 JavaScript를 오가지 않아도 괜찮아요. HTMX가 모두 다 해결해줄 테니까요.\n\nHTMX에 대해 궁금하신가요? 🕵️‍♂️ 이 글에서는 HTMX의 기능을 알아보고, 가져다주는 이점을 탐험하며, 잘 알려진 개발 거장들과 비교해보겠습니다. 함께 살펴봐요! 💻✨\n\n# 소개\n\n<div class=\"content-ad\"></div>\n\n웹 개발 주문서가 있었으면 좋겠나요? htmx를 입력하세요. 이것은 AJAX, CSS 전이, 웹 소켓 및 서버 전송 이벤트에 대한 게이트웨이로, 모두 HTML 내에서 쉽게 창조됩니다. 현대적인 사용자 인터페이스를 만드는 마법봉처럼 간단함과 힘을 품고 있습니다.\n\n## ✨ 매혹적인 기능:\n\n- 크기가 작음 (~14k min.gz’d)\n- 독립적이라 마법사와 비슷합니다\n- 확장 가능하며, 마법은 적응해야 합니다\n- IE11와 심술궂은 어르신과도 친해요\n- React와 비교하여 코드 기본 크기를 놀라운 67%로 축소\n\nhtmx의 신비한 세계로 뛰어들어, 웹 주문서를 즐거운 경험으로 변신시키세요! 🪄🌟\n\n<div class=\"content-ad\"></div>\n\n# HTMX: 상호작용 혁신하기\n\nHTMX는 웹 개발에서 상호작용을 혁신할 수 있는 강력한 도구입니다! 🚀 전체 페이지 새로고침을 필요로하지 않고 웹 페이지의 일부를 업데이트하여 사용자 경험을 향상시킬 수 있습니다. 아래는 HTMX를 시작하는 데 도움이 되는 몇 가지 코드 예제와 설명이 제공됩니다:\n\n## HTMX를 사용하여 데이터 가져오기 🌐\n\n```js\n<!-- HTML -->\n<div hx-get=\"/api/data\" hx-trigger=\"click\" hx-target=\"#result\"></div>\n\n<!-- JavaScript (Optional) -->\n<script>\n  document.getElementById('result').addEventListener('htmx:afterRequest', function(event) {\n    // 응답 처리 또는 추가 작업 수행\n    console.log('데이터 성공적으로 가져옴:', event.detail.response);\n  });\n</script>\n```\n\n<div class=\"content-ad\"></div>\n\n- hx-get 속성은 트리거 이벤트가 발생했을 때 데이터를 가져올 URL을 지정합니다 (예: div를 클릭할 때).\n- hx-trigger 속성은 요청을 트리거하는 이벤트를 정의합니다 (예: \"click\").\n- hx-target 속성은 응답이 삽입될 요소를 지정합니다.\n\n## HTMX를 사용한 콘텐츠 수정 ✏️\n\n```js\n<!-- HTML -->\n<div hx-get=\"/api/content\" hx-swap=\"outerHTML\"></div>\n\n<!-- JavaScript (선택 사항) -->\n<script>\n  document.addEventListener('htmx:afterRequest', function(event) {\n    // 응답을 처리하거나 추가 동작을 수행합니다.\n    console.log('콘텐츠가 성공적으로 업데이트되었습니다:', event.detail.response);\n  });\n</script>\n```\n\n- hx-swap 속성은 응답이 요소의 콘텐츠를 어떻게 대체해야 하는지를 결정합니다. 이 경우 전체 외부 HTML을 대체합니다.\n\n<div class=\"content-ad\"></div>\n\n## HTMX를 사용한 양식 제출 📤\n\n```js\n<!-- HTML -->\n<form hx-post=\"/api/update\" hx-trigger=\"submit\" hx-target=\"#result\">\n  <!-- 여기에 양식 필드가 위치합니다 -->\n  <button type=\"submit\">제출</button>\n</form>\n\n<!-- JavaScript (Optional) -->\n<script>\n  document.addEventListener('htmx:afterRequest', function(event) {\n    // 응답 처리 또는 추가 작업 수행\n    console.log('양식이 성공적으로 제출되었습니다:', event.detail.response);\n  });\n</script>\n```\n\n- hx-post 속성은 양식 데이터를 제출할 URL을 지정합니다.\n- hx-trigger 속성은 양식 제출을 트리거하는 이벤트를 정의합니다.\n- hx-target 속성은 양식 제출 후 응답이 삽입될 위치를 지정합니다.\n\n## HTMX를 사용한 동적 로딩 🔄\n\n<div class=\"content-ad\"></div>\n\n```js\n<!-- HTML -->\n<div hx-get=\"/api/dynamic-content\" hx-trigger=\"mouseover\" hx-target=\"#dynamic-section\"></div>\n<div id=\"dynamic-section\"></div>\n\n<!-- JavaScript (Optional) -->\n<script>\n  document.addEventListener('htmx:afterRequest', function(event) {\n    // Handle the response or perform additional actions\n    console.log('Dynamic content loaded successfully:', event.detail.response);\n  });\n</script>\n```\n\n- 이 예제에서는 사용자가 특정 섹션 위로 마우스를 올릴 때 동적 콘텐츠가 로드됩니다.\n- 응답은 \"dynamic-section\"이라는 ID를 가진 요소에 삽입됩니다.\n\n# HTMX 동작 방식\n\nHTMX의 힘을 발휘하고 싶어하는 개발자들에게 HTMX의 동작 방식을 이해하는 것이 중요합니다. 표준 HTML을 따르는 구문일 수 있지만, HTMX를 진정으로 독특하게 만드는 것은 그 뒤에 숨겨진 작동 방식입니다.\n\n<div class=\"content-ad\"></div>\n\n## 기본 사용법 🚀\n\n```js\n<div hx-get=\"/api/data\">초기 콘텐츠 🚀</div>\n```\n\n- 이 코드는 hx-get 속성을 활용하여 \"/api/data\" 엔드포인트로 GET 요청을 초기화합니다.\n- 서버에서의 응답은 `div` 요소 내의 콘텐츠를 대체합니다.\n- 전체 페이지 새로 고침 없이 페이지의 콘텐츠를 동적으로 업데이트하는 간편한 방법입니다.\n\n## 이벤트 트리거링 🔄\n\n<div class=\"content-ad\"></div>\n\n```js\n<button hx-get=\"/api/increment\" hx-trigger=\"click\">증가</button>\n```\n\n- 이 예제에서는 버튼이 클릭되었을 때 GET 요청이 \"/api/increment\"로 트리거되도록 구성되어 있습니다 (hx-trigger=\"click\").\n- 이는 이벤트를 사용하여 HTMX 요청이 언제 발생하는지 제어할 수 있는 방법을 보여줍니다.\n- 사용자 상호작용에 기반하여 데이터를 가져오거나 업데이트하는 경우 유용합니다.\n\n## 오류 처리 🤖\n\n```js\n<div hx-get=\"/api/data\" hx-on-error=\"alert('에러 발생!')\">데이터 불러오기</div>\n```\n\n<div class=\"content-ad\"></div>\n\n- \"hx-on-error\" 속성은 \"/api/data\"로의 GET 요청 중 발생하는 오류를 처리하는 데 사용됩니다.\n- 오류가 발생하면 '에러!' 메시지가 포함된 알림이 표시됩니다.\n- 예기치 않은 상황에서도 원활한 사용자 경험을 제공하는 데 오류 처리가 중요합니다.\n\n## 특정 요소 업데이트 🛠️\n\n```js\n<input type=\"text\" hx-post=\"/api/update\" hx-target=\"#result\" />\n<div id=\"result\">초기 결과</div>\n```\n\n- 이 예제는 텍스트 입력란이 hx-post를 사용해 \"/api/update\"로의 POST 요청을 트리거하는 것을 보여줍니다.\n- 대상 요소(hx-target=\"#result\")가 지정되어 있어 응답이 id가 \"result\"인 요소의 내용을 업데이트하도록 보장합니다.\n- 이 접근법을 통해 페이지의 어떤 부분을 동적으로 업데이트할지 정확히 제어할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# HTMX 도입의 이점\n\n1. 🚀 향상된 사용자 경험: HTMX를 사용하면 전체 페이지 새로고침 없이 웹 페이지에 신속하고 동적인 업데이트가 가능합니다. 이로 인해 보다 부드럽고 상호작용성 있는 사용자 경험을 제공할 수 있습니다.\n\n2. 🔄 효율적인 데이터 로딩: HTMX를 사용하면 전체 페이지를 새로고침하는 대신 필요한 데이터만 로드할 수 있습니다. 이는 더 빠른 로딩 시간과 서버 부하 감소를 가져옵니다.\n\n3. 🛠️ 간소화된 코드베이스: HTMX를 도입함으로써 종종 JavaScript 코드를 줄일 수 있으며, 서버 측 렌더링을 용이하게 하고 복잡한 클라이언트 측 논리를 줄여 코드를 단순화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n4. 🔄 실시간 업데이트: HTMX를 활용하여 실시간 업데이트를 달성하고 서버에서 즉시 새로운 데이터를 가져와 표시하여 사용자에게 최신 정보를 제공합니다.\n\n5. 🌐 접근성: HTMX는 개발자들이 더 반응적이고 동적인 사용자 인터페이스를 만들 수 있도록 하여 장애를 가진 사용자에게도 접근성을 향상시킬 수 있습니다.\n\n6. 🌈 향상된 UI 상호작용: 다양한 사용자 상호작용을 매끄럽게 처리할 수 있는 HTMX의 기능을 활용하여 적은 노력으로 매우 상호작용적인 사용자 인터페이스를 만들어 보세요.\n\n7. 🧩 쉬운 통합: HTMX는 기존 프로젝트에 쉽게 통합할 수 있어 기능을 점진적으로 향상시키는 실용적인 선택으로 사용될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nHTMX를 도입하면 더 반응이 뛰어나고 효율적이며 즐거운 웹 개발 경험을 할 수 있습니다.\n\n# 결론\n\n변화무쌍한 웹 개발 세계에서 HTMX가 빛을 발합니다. HTML을 향상하여 웹 상호 작용을 간편하게 만듭니다.\n\n속도가 사용자 경험을 정의합니다. HTMX는 빠른 로딩과 부드러운 상호 작용을 제공하여 백엔드 개발자의 서버와 클라이언트 동적 사이의 간격을 줄여줍니다.\n\n<div class=\"content-ad\"></div>\n\n리액트와 뷰가 프론트엔드를 지배하고 있지만, HTMX는 새로운 시각을 제공합니다. 💨 동적 웹 앱에서 수많은 자바스크립트가 필요한 필요성에 대한 도전을 제시합니다.\n\nHTMX는 그저 최신 도구일 뿐만이 아니라 웹 개발 진화의 징조입니다. 향후 어떤 방향으로 나아갈지는 오직 시간과 채택에 달려 있을 것입니다. ✨","ogImage":{"url":"/assets/img/2024-05-01-MasteringHTMXAPracticalApproachtoStreamlinedFrontendDevelopment_0.png"},"coverImage":"/assets/img/2024-05-01-MasteringHTMXAPracticalApproachtoStreamlinedFrontendDevelopment_0.png","tag":["Tech"],"readingTime":6},{"title":"웹 개발자가 알아야하는 필수 HTML 속성들","description":"","date":"2024-05-01 22:58","slug":"2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow","content":"\n\n<img src=\"/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_0.png\" />\n\nHTML 언어는 웹 페이지에서 그래픽 요소를 그리기 위한 다양한 의미 있는 태그를 제공합니다. 보통 XML에서 속성을 사용하는 것처럼, HTML도 XML 기반의 마크업 언어로서 전역 및 태그별 속성을 지원합니다. 초기에 HTML은 웹 페이지를 디자인하기 위한 HTML 태그에 대한 기본 속성들을 제공했습니다. 모든 개발자가 알고 있는 id, class, style 등과 같은 어떤 HTML 요소와도 작동하는 전역 속성뿐만 아니라, src, href와 유사한 태그별 속성에 대해 알고 있습니다. 현대 웹 기술 및 UI/UX 요소의 성장과 함께, HTML 표준은 사용자 친화적인 웹 프론트엔드를 디자인하는 데 새로운 속성을 도입했습니다.\n\nW3C 및 협력사들은 의심할 여지없이 HTML 기능을 확장하여, 무겁고, 제3자 외부 라이브러리에 의존하지 않고 접근 가능하고, 현대적이며, 기능이 풍부한 웹 프론트엔드를 개발할 수 있도록 노력하고 있습니다. 이러한 새로운 기능 중 일부는 새로운 HTML 태그로 나왔습니다. 한편, 일부는 새로운 속성으로 나왔습니다. 예를 들어, HTML은 액세스 가능하고, 네이티브하며, 자바스크립트 무료 팝오버 요소를 구현하기 위해 popover 속성을 도입했습니다.\n\n이 이야기에서, 현대 웹 개발자로서 알아야 할 HTML 속성을 설명하고, 무거운, 제3자 라이브러리를 사용하지 않고 미래지향적인 프론트엔드를 디자인하세요. 이러한 네이티브 HTML 기능을 활용하여 최소한의 리소스로 높은 성능을 가진 웹 페이지를 제작해보세요!\n\n<div class=\"content-ad\"></div>\n\n# 웹 애플리케이션에서 원래 팝업 요소로 사용되던 네이티브 브라우저 창을 대안으로 사용하여 상위 레이어 콘텐츠를 표시했습니다 (예를 들어, 전자상거래 웹 사이트에서 사용자가 링크를 클릭할 때 T-셔츠 사이즈 차트를 표시합니다). 그러나 여러분들이 사용한 네이티브 창은 사용자 친화적이지 않았고 수정 가능하지 않았습니다. 나중에 개발자들은 UI/UX에 친화적으로 콘텐츠를 표시하기 위해 CSS 스타일이 적용된 인페이지 팝오버를 외부 라이브러리로 구축했습니다.\n\n이제 여러분은 HTML만으로 자바스크립트 코드 한 줄을 작성하지 않고 팝오버를 생성할 수 있습니다. 현대 웹 표준은 Popover API를 통해 내장 팝오버 지원을 포함하고 있습니다.\n\n다음 소스 코드를 살펴보세요:\n\n<div class=\"content-ad\"></div>\n\n```css\ndiv[popover]::backdrop {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\ndiv[popover] {\n  padding: 12px;\n  border: none;\n}\n```\n\n`pop` 요소에 `popover` 속성을 사용하여 간단한 팝오버 엘리먼트를 구현한 위의 HTML 코드 조각입니다. JavaScript를 사용하지 않고 `popovertarget` 속성을 사용하여 팝오버 엘리먼트를 표시합니다. 또한, 팝오버 뒷배경을 `::backdrop` 가상 요소를 사용하여 스타일링했습니다.\n\n![팝오버 예시 이미지](https://miro.medium.com/v2/resize:fit:1148/1*KbjdZQW2A-7pzrBMGSDNXA.gif)\n\nMDN 설명에 따라 네이티브 팝오버에 애니메이션을 추가할 수 있습니다. 또한, 팝오버 API의 JavaScript 메소드를 사용하여 CSS 스타일링된 툴팁을 만들 수 있습니다. 팝오버 웹 API는 아직 새로운 브라우저 기능이므로 제품에서 사용하기 전에 시간이 필요할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 대화 상자 및 페이지에서 autofocus 속성 사용하기\n\n컴퓨터는 일반적으로 주요 입력 요소로 키보드와 마우스를 갖추고 있지만 특정 상황에서는 사용자가 특정 활동 중에 키보드만 사용하는 경우가 있습니다. 예를 들어 대량 생산 기업의 직원은 양손을 모두 사용하여 효율적으로 컴퓨터를 사용할 수 없는 바쁜 작업 중 데이터 입력 활동에 키보드만 사용할 수 있습니다. 결과적으로 브라우저는 탭 탐색, 팝오버 및 대화 상자에 대한 자동 키 할당, 단축키 등을 내장된 접근성 기능으로 키보드 지원을 구현합니다.\n\nHTML 표준은 페이지 로드 및 대화 상자/팝오버 표시 상태에서 자동으로 양식 요소에 초점을 맞추기 위한 autofocus 속성을 제공합니다. 이 속성을 사용하면 사용자의 생산성을 향상시킬 수 있습니다.\n\n다음 샘플 모달을 살펴보세요. 첫 번째 입력이 미리 채워져 있기 때문에 두 번째 텍스트 입력에 자동 초점이 맞춰집니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1148/1*PvC6Czz14_44TLa_sTbhGA.gif\" />\n\n위 미리보기에서 보듯이 사용자는 Alt + Tab 단축키를 눌러 미리 채워진 텍스트 입력에 초점을 맞출 수 있습니다. 위 결과를 얻기 위한 소스 코드는 다음과 같습니다:\n\n```js\n<dialog id=\"dlg\">\n  <form method=\"dialog\">\n    <input type=\"text\" placeholder=\"이름\" value=\"존\" />\n    <div style=\"height: 8px\"></div>\n    <input type=\"text\" placeholder=\"성\" autofocus/>\n    <div style=\"height: 8px\"></div>\n    <button>저장</button>\n  </form>\n</dialog>\n<button onclick=\"document.getElementById('dlg').showModal()\" autofocus>모달 표시</button>\n```\n\n위 HTML 조각은 두 군데에서 포커스 속성을 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n- 페이지 로드 이벤트 후에 쇼 모달 버튼 요소에 포커스를 맞추세요.\n- 첫 번째 텍스트 입력란이 미리 채워져 있기 때문에 두 번째 텍스트 입력란을 자동으로 포커스하세요.\n\n여기서 우리는 JavaScript 코드를 사용하지 않고 다이얼로그를 닫기 위해 method=\"dialog\" 속성을 설정했습니다.\n\n# pattern 속성을 사용하여 텍스트 입력 유효성 검사하기\n\n요즘 거의 모든 현대적인 웹 앱은 폼에서 클라이언트 측 유효성 검사를 사용합니다. 개발자들은 종종 유저 친화성을 향상시키기 위해 클라이언트 측에서 실시간 유효성 검사를 구현합니다. 이제 HTML의 input 요소에 pattern 속성이 있기 때문에 Regex 기반의 실시간 입력 유효성 검사를 구현하기 위해 JavaScript를 사용할 필요가 없어졌습니다.\n\n<div class=\"content-ad\"></div>\n\n제품 식별자를 확인해야 한다고 가정해요. 이 식별자는 두 개의 영어 글자와 하이픈으로 연결된 여섯 자리 숫자로 구성돼요. 예를 들어 GR-100200 같은 거죠.\n\n다음 HTML 코드 조각은 이 요구사항을 충족하는 유효성 검사가 가능한 텍스트 입력을 구현하고 있어요.\n\n```js\n<form>\n  <input \n    type=\"text\" \n    placeholder=\"예: GR-100200\" \n    pattern=\"[A-Z]{2}-[0-9]{6}\" \n    required \n   />\n  <input type=\"submit\"/>\n</form>\n```\n\n여기서 pattern 속성은 유효하지 않은 입력에 대한 브라우저별 유효성 메시지를 표시하여 제출을 방지해요. 그렇다면 실시간 유효성 검사를 어떻게 구현할 수 있을까요?\n\n<div class=\"content-ad\"></div>\n\n패턴에 대한 실시간 유효성 검사는 다음 HTML 코드 조각에 표시된 대로 :valid 및 :invalid CSS 가상 클래스를 사용하여 가능합니다:\n\n```js\n<style>\n  input[type=text] {\n    border: #000 1px solid;\n    border-radius: 4px;\n    outline: none;\n    padding: 6px;\n  }\n\n  input[type=text]:invalid {\n    border: red 1px solid;\n     + span::before {\n      content: '✖';\n      display: inline;\n      color: red;\n    }\n  }\n  \n  input[type=text]:valid {\n    border: green 1px solid;\n    + span::before {\n      content: '✓';\n      display: inline;\n      color: green;\n    }\n  }\n\n</style>\n\n<input \n  type=\"text\" \n  placeholder=\"예: GR-100200\" \n  pattern=\"[A-Z]{2}-[0-9]{6}\" required\n/>\n<span></span>\n```\n\n위의 HTML 코드 조각은 유효성 상태에 따라 스타일을 설정하기 위해 CSS 코드를 사용합니다. 아래 미리보기에서와 같이, 유효하지 않은 입력값은 입력 상자 테두리를 빨간색으로 변하고 빨간색 교차 표시를 표시합니다. 한편, 유효한 입력값은 녹색 테두리와 녹색 확인 표시가 렌더링됩니다:\n\n<img src=\"https://miro.medium.com/v2/resize:fit:954/1*yCIHUIN8Sn6IMxuFbv0YVg.gif\" />\n\n\n<div class=\"content-ad\"></div>\n\n아래 이야기에서 :valid 및 :invalid와 같은 CSS 가상 요소에 대해 더 알아보세요:\n\nJavaScript에서 패턴을 사용하는 입력의 validity를 확인하기 위해 다음과 같이 JavaScript에서 입력의 validityState 인터페이스에 액세스할 수 있습니다:\n\n```js\nif(productInput.validity.valid) {\n  // 할 일...\n}\n```\n\n# inputmode 속성을 사용하여 모바일 가상 키보드 모드 다루기\n\n<div class=\"content-ad\"></div>\n\n현대 모바일 기기는 일반적으로 물리 키보드가 없습니다. 그 대신 터치 스크린에 렌더링되는 가상 키보드가 제공됩니다. 이 가상 키보드에는 여러 모드가 있습니다. 예를 들어 숫자 입력 요소에는 숫자 키만 표시되고 일반 문자열 입력에 대해서는 전체 키보드 인터페이스가 표시될 수 있습니다. 모바일 브라우저는 입력 유형에 따라 가상 키보드 모드를 자동으로 변경하지만 개발자는 input 요소의 inputmode 속성을 사용하여 사용자 정의할 수도 있습니다.\n\n사용자로부터 OTP PIN을 입력받기 위해 특정 패턴을 사용하는 텍스트 입력을 사용한다고 가정해보겠습니다:\n\n```js\n<input type=\"text\" placeholder=\"Enter OTP\" pattern=\"[0-9]{4}\" required />\n```\n\n이는 범용 문자열 유형 입력이므로 모바일은 전체 키보드 레이아웃을 표시합니다:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_1.png)\n\n입력 요소와 함께 inputmode 속성을 다음과 같이 사용해봅시다:\n\n```js\ninputmode=\"numeric\"\n```\n\n이제 모바일에서 숫자 키보드 레이아웃을 확인할 수 있습니다. 아래 미리보기를 참고하세요:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_2.png)\n\n# loading 속성을 이용한 브라우저 레벨 이미지 지연 로딩\n\n웹 개발자들은 페이지 로딩 시간을 개선하여 SEO (검색 엔진 최적화) 점수를 높이고 사용자 상호 작용을 향상시키려고 노력합니다. 이미지의 지연 로딩은 특정 이미지를 렌더링할 때 해당 이미지를로드하여 초기 페이지 로딩 시간을 줄이는 잘 알려진 전략입니다. 이미지의 지연 로딩은 Intersection Observer API 또는 전통적인 스크롤 이벤트를 사용하여 자체 구현하거나 서드파티 라이브러리를 사용하여 가능합니다.\n\nimg 태그의 loading 속성을 사용하면 JavaScript 코드없이 또는 서드파티 라이브러리를 사용하지 않고 브라우저 레벨의 이미지 지연 로딩을 활성화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n다음 소스 코드를 살펴보세요:\n\n```js\n<div style=\"height: 2000px\"></div>\n\n<img src=\"https://source.unsplash.com/vpOeXr5wmR4\" width=\"400\" height=\"240\" loading=\"lazy\" />\n```\n\n여기에는 사용자가 해당 이미지로 스크롤할 때에만 위 무료 이미지가 로드되며 초기 페이지 로드 시간에 영향을 주지 않게 되어 있습니다. 아래 미리 보기에서 확인할 수 있습니다:\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*uy6OnakZEP-X8_0mbRHVPw.gif\" />\n\n<div class=\"content-ad\"></div>\n\n현재 HTML 명세에서는 lazy loading을 사용자화할 수 없지만, 브라우저는 브라우저 수준의 lazy-loading을 사용하는 개발자가 더 많아진다면 커스터마이즈 옵션을 제공할 수 있습니다.\n\n## 사용자 지정 data-* 속성 사용\n\n브라우저는 일반적으로 HTML 속성 이름에 엄격한 유효성 검사 규칙을 적용하지 않으므로 개발자는 원하는 사용자 정의 속성 이름을 사용할 수 있습니다. 그러나 사용자 정의 속성에 대한 다양한 명명 규칙을 사용하는 것은 좋지 않은 실천 방법입니다. 왜냐하면 그것은 HTML 문서 명세를 무효화하기 때문입니다. HTML 표준은 사용자 정의 속성에 대해 data- 접두사 사용을 권장하며 DOM API에서도 명시적인 기능을 제공하여 개발자를 독려합니다.\n\n다음은 일부 사용자 정의 data 속성을 사용하는 샘플 HTML 요소입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<div \n  id=\"elm\" \n  data-player-name=\"John\"\n  data-player-score=\"20\"\n  data-player-city=\"LA\">\n</div>\n```\n\n자바스크립트를 통해 디스트럭처링으로 카멜 표기법 키를 사용하여 이러한 사용자 지정 속성 값을 쉽게 액세스할 수 있습니다. 다음 코드 스니펫에서 보여지듯이:\n\n```js\nlet { playerName, playerScore, playerCity } = document.getElementById('elm').dataset;\n\nconsole.log(playerName, playerScore, playerCity); // John 20 LA\n```\n\n또한 CSS 문서 내에서 이러한 데이터 속성에 액세스할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n#elm::before {\n  content: attr(data-player-name) \" - \" attr(data-player-score)\n}\n\n#elm {\n  display: inline-block;\n  padding: 12px;\n  background-color: #ddd;\n}\n```\n\n위의 CSS 코드 조각은 data-player-name과 data-score 값을 HTML 요소 위에 다음과 같이 렌더링합니다:\n\n<img src=\"/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_3.png\" />\n\n제3자 라이브러리를 사용하지 않고도 최신 네이티브 HTML 태그를 사용하여 간결하고 사용자 친화적이며 성능이 우수하며 접근성이 좋은 웹 프론트엔드를 개발할 수 있습니다. 아래 이야기로 더 자세히 알아보세요:\n\n<div class=\"content-ad\"></div>\n\n읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_0.png"},"coverImage":"/assets/img/2024-05-01-HTMLAttributesThatEveryWebDeveloperShouldKnow_0.png","tag":["Tech"],"readingTime":9},{"title":"제 비행을 위해 단일 HTML 파일에 워들을 코딩해봤어요","description":"","date":"2024-05-01 22:56","slug":"2024-05-01-ICodedWordleInASingleHTMLFileForMyFlight","content":"\n\n![ICodedWordleInASingleHTMLFileForMyFlight](/assets/img/2024-05-01-ICodedWordleInASingleHTMLFileForMyFlight_0.png)\n\n짜증나는 광고들은 내게 소화불량, 화상, 두통, 비염, 이명, 인사라 등의 고통을 안겨줘요.\n\n- 비행기에서 인플라이트 엔터테인먼트 없이 싼 2시간 비행\n- 앱 스토어의 워들 게임에 아마도 여기저기 광고가 있었을 거예요\n- 인터넷 연결이 필요하지 않은 워들 게임이 필요했어요. 1) IOS 앱을 짜야 했거나 2) 하나의 HTML 파일만으로 코딩해야 했어요.\n\n이번에 저는 이 일을 위해 IOS 앱 전체를 코딩하기로 결정하지 않았어요. 대신에 몇 시간을 들여 핸드폰 브라우저로 열 수 있는 단일 HTML 파일 워들 게임을 코딩하기로 결정했어요.\n\n<div class=\"content-ad\"></div>\n\n# 워들 규칙 (익숙하지 않다면)\n\n- 목표: 무작위로 생성된 5글자 단어를 추측합니다 (이후 목표 단어로 알려집니다)\n- 6번의 시도 기회가 주어집니다 (즉, 6개의 행)\n- 단어를 추측하면 추측한 단어가 테이블에 나타납니다\n\n강조된 내용의 의미:\n\n- 녹색 — 이 글자는 목표 단어 안에 있고, 올바른 위치에 있습니다\n- 노랑 — 이 글자는 목표 단어 안에 있지만, 올바르지 않은 위치에 있습니다\n- 회색 — 이 글자는 목표 단어 안에 없습니다\n\n<div class=\"content-ad\"></div>\n\n# 코드 (주의 — 167줄의 코드)\n\n```js\n<div class=\"container\">\n\n    <div id=\"table-container\"></div>\n    <br>\n    <div>\n        사용되지 않는 글자: <br>\n        <span id=\"unused-letters\"></span>\n    </div>\n    <br>\n\n    <input type=\"text\" id=\"input-text\">\n    <button onclick=\"submit()\">제출</button>\n\n    <br>\n    <div id=\"message\"></div>\n    <br>\n    <button onclick=\"init()\">재시작</button>\n    <button onclick=\"reveal()\">포기</button>\n    <br><br>\n    <button onclick=\"forceSubmit()\">강제 제출</button>\n    <div id=\"word\"></div>\n\n</div>\n\n<script>\n\ninit()\n\nfunction init() {\n    // 단어 초기화\n    let words = '위의 긴 문자열을 붙여넣으세요'\n    words = words.split(' ')\n    document.word = words[Math.floor(Math.random() * words.length)]\n    document.words = new Set(words)\n    document.getElementById('word').innerHTML = \"\"\n    document.getElementById('message').innerHTML = \"\"\n    document.getElementById('unused-letters').innerHTML = 'abcdefghijklmnopqrstuvwxyz'\n\n    // 테이블 초기화\n    document.guesses = []\n    drawTable()\n}\n\nfunction drawTable() {\n    table = document.createElement('table')\n    table.className = 'my-table'\n  \n    for (let i=0; i<6; i++) {\n        let tr = document.createElement('tr');\n        let empty = false;\n        if (i >= document.guesses.length) empty = true;\n\n        if (empty) {\n            for (j=0; j<5; j++) {\n                let td = document.createElement('td')\n                td.innerHTML = '&nbsp;'\n                tr.appendChild(td)\n            }\n        } else {\n            let guess = document.guesses[i]\n            let target = document.word.toLowerCase()\n            classes = ['grey', 'grey', 'grey', 'grey', 'grey']\n            dict = {}\n            for (j=0; j<5; j++) {\n                let letter = target[j]\n                if (Object.keys(dict).includes(letter)) dict[letter] += 1\n                else dict[letter] = 1\n            }\n            // 초록색 확인\n            for (j=0; j<5; j++) {\n                if (guess[j] == target[j]) {\n                    classes[j] = 'green'\n                    dict[guess[j]] -= 1\n                }\n            }\n            // 노란색 확인\n            for (j=0; j<5; j++) {\n                let letter = guess[j]\n                if (classes[j] == 'green') continue\n                if (target.includes(letter) && dict[letter]>0) {\n                    classes[j] = 'yellow'\n                    dict[letter] -=1\n                }\n            }\n            // 실제 추가\n            for (j=0; j<5; j++) {\n                let td = document.createElement('td')\n                td.innerHTML = guess[j].toUpperCase()\n                td.className = classes[j]\n                tr.appendChild(td)\n            }\n        }\n\n        table.appendChild(tr)\n    }\n\n    let container = document.getElementById('table-container')\n    container.innerHTML = null\n    container.appendChild(table)\n}\n\nfunction computeUnusedLetters() {\n    used = document.guesses.join('')\n    let letters = 'abcdefghijklmnopqrstuvwxyz'\n    let out = ''\n    for (let i=0; i<26; i++) {\n        let letter = letters[i]\n        if (!used.includes(letter)) {\n            out += letter + ' '\n        }\n    }\n    document.getElementById('unused-letters').innerHTML = out\n}\n\nfunction submit() {\n    let inputText = document.getElementById('input-text')\n    let value = inputText.value.trim().toLowerCase()\n\n    if (document.words.has(value)) {\n        document.guesses.push(value)\n        drawTable()\n        computeUnusedLetters()\n    }\n    inputText.value = ''\n    inputText.focus()\n\n    if (value == document.word) {\n        document.getElementById('message').innerHTML = '당신이 이겼어요!'\n    }\n}\n\nfunction reveal() {\n    document.getElementById('word').innerHTML = document.word\n}\n\nfunction forceSubmit() {\n    // 만약 올바른 단어가 뜻사전에 없는 경우\n    let inputText = document.getElementById('input-text')\n    let value = inputText.value.trim().toLowerCase()\n    document.words.add(value)\n    submit()\n}\n\ndocument.getElementById('input-text').addEventListener(\n    'keypress', function(event) {\n        if (event.key == 'Enter') {\n            event.preventDefault();\n            submit()\n        }\n    }\n)\n\n</script>\n\n<style>\n\n.container {padding: 16px}\n.container, input, button {font-size:32px;}\n\ntd {border: 1px solid black; font-size:32px; padding: 0.25em;\n    width: 48px; height:48px; text-align: center; line-height: 48px;}\n\n.yellow {background-color: yellow}\n.green {background-color: limegreen}\n.grey {background-color: lightgrey}\n\n</style>\n```\n\n<div class=\"content-ad\"></div>\n\n테이블태그를 Markdown 형식으로 변경하려고 했어요.\n\n# 이 단어들\n\n하하... 이게 대체 뭐야? 😄\n\n<div class=\"content-ad\"></div>\n\n이 HTML wordle는 인터넷 연결을 사용할 수 없어요. 모든 5글자 단어들은 미리 코드로 작성되어 있어야 해요. 신기하게도, 'greek'과 같은 몇몇 유효한 5글자 단어는 안에 포함돼 있지 않아요 — 그래서 '강제 제출' 기능을 추가했어요.\n\n일부 단어들이 솔직히 제게는 약간 수상해 보여서, 여러분이 직접 실행할 때 자신만의 단어 사전을 관리해보세요!\n\n## 이런 단어들은 어디서 찾았을까요?\n\n온라인(정확한 출처는 잊었어요)\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n비행기에서 즐거운 시간 보내세요! (인터넷 연결이 없으면 별로 유용하지 않을 수도 있어요)\n\n# 제작자로서 저를 지원해주고 싶으시다면\n\n- 이 이야기에 50번 박수를 쳐 주세요\n- 생각을 남겨 주세요\n- 이야기 중 가장 마음에 드는 부분을 강조해 주세요\n\n<div class=\"content-ad\"></div>\n\n감사합니다! 작은 일이라도 큰 도움이 되어요. 정말 감사합니다!\n\nYouTube: [https://www.youtube.com/@zlliu246](https://www.youtube.com/@zlliu246)\n\nLinkedIn: [https://www.linkedin.com/in/zlliu/](https://www.linkedin.com/in/zlliu/)\n\nMy Ebooks: [https://zlliu.co/ebooks](https://zlliu.co/ebooks)","ogImage":{"url":"/assets/img/2024-05-01-ICodedWordleInASingleHTMLFileForMyFlight_0.png"},"coverImage":"/assets/img/2024-05-01-ICodedWordleInASingleHTMLFileForMyFlight_0.png","tag":["Tech"],"readingTime":7},{"title":"플라스크(Flask)에 웹소켓(Websockets) 적용하기","description":"","date":"2024-05-01 22:54","slug":"2024-05-01-PoweringFlaskwithWebsockets","content":"\n\n플라스크는 파이썬으로 작은부터 중간 규모의 웹 애플리케이션을 개발하기에 우수한 마이크로 프레임워크입니다.\n\n웹소켓은 서버와 클라이언트 간 데이터를 동시에 교환하는 강력한 기술로, 동적이며 실시간 데이터 업데이트가 필요한 웹 애플리케이션에 배포될 수 있습니다.\n\n이 이야기에서 우리는 웹소켓을 플라스크에서 사용하여 어떻게 작동하는지 이해하고 웹소켓의 힘을 발휘할 것입니다! HTTP 연결에서 클라이언트(브라우저)는 서버에 요청을 보내고 응답을 기다린 후 받은 후에 연결이 닫힙니다. 클라이언트가 데이터를 추가로 필요할 경우(또는 더 많은 데이터가 필요한 경우), 새로운 요청(연결)을 다시 해야 합니다. 이것은 한 번에 한 당사자만 데이터를 보내고 받을 수 있는 반양방향 연결이라고도 합니다. 반면 웹소켓은 클라이언트와 서버가 동시에 데이터를 교환할 수 있는 전양방향 연결로, 클라이언트가 서버에 데이터를 요청할 필요가 없습니다. 연결은 열린 상태에서(긴 지속성) 유지되며 데이터가 구할 수 있는 즉시 클라이언트로 보내집니다.\n\n지금까지 이론적인 이야기는 충분하니, 웹소켓의 마법을 보여줄 웹 애플리케이션을 만들어 보겠습니다. 우리는 리눅스 터미널에서 공개 DNS 서버 8.8.8.8을 사용하여 인터넷 연결을 확인하는 웹 애플리케이션을 만들 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n[test@flask ~]$ ping -c 5 8.8.8.8\n8.8.8.8(8.8.8.8)로 5번의 패킷 전송 중:\n64바이트 데이터 전송됨.\n8.8.8.8에서 icmp_seq=1 ttl=117 time=12.7 ms\n8.8.8.8에서 icmp_seq=2 ttl=117 time=12.8 ms\n8.8.8.8에서 icmp_seq=3 ttl=117 time=12.9 ms\n8.8.8.8에서 icmp_seq=4 ttl=117 time=15.1 ms\n8.8.8.8에서 icmp_seq=5 ttl=117 time=12.4 ms\n```\n\n우리 Flask 웹 응용프로그램에 이를 게시하기 위해 웹소켓을 사용합시다.\n\n## Flask 웹 응용프로그램에 이를 게시하기 위해 Python 가상 환경 만들기\n\n```js\n[test@flask ~]$ /usr/local/bin/python3.8 -m venv myvirtual\n[test@flask ~]$ source myvirtual/bin/activate\n(myvirtual) [test@flask ~]$ pip install Flask\n```\n\n<div class=\"content-ad\"></div>\n\n## Flask-SocketIO 설치하기\n\n플라스크(Flask)에서 웹소켓을 사용하려면 Flask-SocketIO를 사용할 수 있어요. 공식 문서에 따르면 아래와 같이 설치할 수 있어요:\n\n```js\n(myvirtual) [test@flask ~]$ pip install flask-socketio\n```\n\n## Flask 어플리케이션 만들기\n\n<div class=\"content-ad\"></div>\n\n가상 환경 내부에서 응용 프로그램을 보관할 수 있는 디렉토리를 만들어보세요. \"flaskapp\"이라는 디렉토리를 만들고, 그 안에 응용 프로그램 코드용 \"myapp.py\" 파일을 만들어보세요. 그리고 \"flaskapp\" 안에 \"templates\"라는 디렉토리도 만들어주세요. \"templates\" 안에 \"base.html\"이라는 파일을 만들어주세요. Flask 디렉토리 구조 전체는 아래와 같아야 해요:\n\n/home/test/flaskapp  \n|— myapp.py  \n|— templates/  \n|— — — base.html  \n\n이제 \"myapp.py\" 파일로 아래 코드를 입력해보세요. 이 코드는 Linux 터미널에서 ping 명령을 실행할 때와 같이 웹소켓을 통해 ping 결과를 브라우저에 공개하는 응용 프로그램 코드입니다.\n\n```js  \nfrom flask import Flask,render_template,request\nfrom flask_socketio import SocketIO, emit\nimport subprocess  \n\napp = Flask(__name__)  \nsocketio = SocketIO(app,debug=True,cors_allowed_origins='*',async_mode='eventlet')  \n\n@app.route('/home')  \ndef main():  \n        return render_template('base.html')  \n\n@socketio.on(\"my_event\")  \ndef checkping():  \n    for x in range(5):  \n        cmd = 'ping -c 1 8.8.8.8|head -2|tail -1'  \n        listing1 = subprocess.run(cmd,stdout=subprocess.PIPE,text=True,shell=True)  \n        sid = request.sid  \n        emit('server', {\"data1\":x, \"data\":listing1.stdout}, room=sid)  \n        socketio.sleep(1)  \n``` \n\n<div class=\"content-ad\"></div>\n\n위 코드에서는 우선 위에 설치한 flask 및 socketio 패키지에서 필요한 객체를 가져와서 응용 프로그램에서 사용할 인스턴스를 생성했습니다. \"eventlet\"으로 정의한 async_mode에 주목해주세요. SocketIO 설명서에 따르면, 설명된 비동기 서비스 중 하나를 사용해야 합니다. 우리는 eventlet을 사용하고 설치했습니다.\n\n다음으로, 우리는 flask 루트(엔드포인트)를 /home으로 정의했습니다. 이는 \"base.html\"이라는 HTML 페이지를 렌더링합니다. 이것은 나중에 만들 것입니다.\n\n이어서, 웹소켓 코드의 가장 흥미로운 부분이 나옵니다. 여기서 \"my_event\"라는 사용자 정의 이벤트를 정의했습니다. 이벤트는 서버와 클라이언트 간에 데이터를 교환하는 데 사용됩니다. 위 코드에서 서버는 클라이언트(브라우저)로부터 \"my_event\"라는 이벤트를 받으면 \"checkping\"이라는 함수인 이벤트 핸들러를 실행하여 소켓을 통해 클라이언트(브라우저)에게 핑 명령 결과를 다시 보냅니다. \"server\"라는 소켓io emit 이벤트를 사용합니다. 이벤트는 클라이언트와 서버 모두에서 사용할 수 있습니다. 따라서 전반적으로 우리는 for 루프를 사용하여 핑 명령을 5번 실행하고 실행되는 즉시 연속적인 출력을 클라이언트에게 돌려보내고 있습니다.\n\n## Gunicorn 및 Nginx를 사용한 Flask 응용 프로그램 제공\n\n<div class=\"content-ad\"></div>\n\n이제 우리 애플리케이션이 준비되었고 웹 서버를 배포할 시간입니다. 프로덕션 환경에 잘 맞는 Gunicorn + Nginx 조합을 사용할 것입니다.\n\n```js\n(myvirtual) [test@flask ~]$ pip install gunicorn\n\n[test@flask ~]$ sudo yum install epel-release\n[test@flask ~]$ sudo yum install nginx\n```\n\nnginx.conf 파일을 수정하여 아래 내용을 포함하고 꼭 서버의 IP 주소를 server_name 섹션에 입력해주세요.\n\n```js\nserver {\n    listen       80;\n    listen       [::]:80;\n    server_name  <IP-Address>;\n\n    location / {\n       include proxy_params;\n       proxy_pass http://127.0.0.1:5000;\n    }\n\n    location /socket.io {\n       proxy_pass http://127.0.0.1:5000/socket.io;\n       proxy_redirect off;\n       proxy_buffering off;\n       proxy_set_header Host $host;\n       proxy_set_header X-Real-IP $remote_addr;\n       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n       proxy_http_version 1.1;\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection \"Upgrade\";\n       proxy_hide_header Access-Control-Allow-Origin;\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n또한, 아래 내용으로 /etc/nginx/ 디렉토리 아래에 \"proxy_params\" 파일을 생성해주세요.\n\n```js\nproxy_set_header Host $http_host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $scheme;\n```\n\n다음으로, Flask 애플리케이션을 위한 Linux systemd 서비스를 생성하여 Linux systemctl 명령어를 사용하여 애플리케이션을 시작하거나 중지할 수 있도록 해주세요. 또한 이 방법을 통해 서버 재부팅 시에 자동으로 Flask 애플리케이션이 시작되도록 할 수 있습니다.\n\n아래 내용으로 /etc/systemd/system/ 디렉토리 아래에 \"myapp.service\" 파일을 생성해주세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n[Unit]\nDescription=Gunicorn 인스턴스를 통해 Flask를 제공합니다.\nAfter=network.target\n\n[Service]\nUser=test\nWorkingDirectory=/home/test/flaskapp/\nExecStart=/home/test/myvirtual/bin/gunicorn --worker-class eventlet -w 1 myapp:app --bind 0.0.0.0:5000\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n```\n\n## Flask 응용 프로그램을 위한 HTML 페이지 만들기\n\n위의 Flask 응용 프로그램 디렉토리 구조에서 \"templates\" 폴더와 \"base.html\" 파일을 생성했습니다. 이 파일은 브라우저를 http://`서버-IP`/home으로 가리킬 때 렌더링됩니다.\n\n이는 서버가 보낸 핑 결과를 보는 데 사용되는 응용 프로그램에 의해 제공되는 페이지입니다.\n\n<div class=\"content-ad\"></div>\n\n\"base.html\" 파일 안에 아래 내용을 추가해 주세요.\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n<meta http-equiv=\"Cache-control\" content=\"no-cache\" charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js\" integrity=\"sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ==\" crossorigin=\"anonymous\"></script>\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\n<script type=\"text/javascript\" src=\"//code.jquery.com/jquery-1.4.2.min.js\"></script>\n<style>\n.navbar-brand {\nfont-family: 'Merriweather';\nfont-size: 30px;\n}\n.inner {\ntext-align: center;\nmargin: auto;\nmargin-top: 10px;\npadding: 10px;\nborder-style: solid;\nwidth: 50%;\ncolor: black;\n\n}\n</style>\n</head>\n\n<body>\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <div class=\"container\">\n   <a class=\"navbar-brand\" href={ url_for('main') }>Flask</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n  </div>\n</nav>\n<div class=\"container\">\n<div class=\"inner\">\n <div id=\"header\"></div><br>\n<button class=\"btn btn-primary\" id=\"checkbutton\" onClick=\"myupdate()\">제출</button>\n<div id=\"demo\"></div>\n</div>\n</div>\n<script>\n        const socket = io(); //socketio connection to server//\n        $(document).ready(function() {\n });\nsocket.on(\"connect\", () => {\n console.log(\"connected\");\n        document.getElementById(\"header\").innerHTML = \"<h3>\" + \"Websocket Connected\" + \"</h3\";\n\n\n});\n\nsocket.on(\"disconnect\", () => {\n console.log(\"disconnected\");\n        document.getElementById(\"header\").innerHTML = \"<h3>\" + \"Websocket Disconnected\" + \"</h3>\";\n});\n\nfunction myupdate() {\n  //Event sent by Client\n socket.emit(\"my_event\", function() {\n });\n}\n\n// Event sent by Server//\nsocket.on(\"server\", function(msg) {\n        let myvar = JSON.parse(msg.data1);\n        //Check if entire data is sent by server//\n        if (myvar == \"4\") {\n                document.getElementById(\"demo\").innerHTML = \"\";\n                document.querySelector('#checkbutton').innerText = \"Submit\";\n                document.getElementById(\"checkbutton\").style.cursor = \"pointer\";\n                document.getElementById(\"checkbutton\").disabled = false;\n                document.getElementById(\"checkbutton\").className = \"btn btn-primary\";\n \n        }\n\n        else {\n                document.getElementById(\"demo\").innerHTML += msg.data + \"<br>\";\n                document.getElementById(\"checkbutton').disabled = true;\n                document.getElementById(\"checkbutton').innerHTML = \"로딩 중..\";\n                document.getElementById(\"checkbutton').style.cursor = \"not-allowed\";\n                document.getElementById(\"checkbutton').style.pointerEvents = \"auto\";\n        }\n});\n\n</script>\n</body>\n</html>\n```\n\n위의 HTML에서 가장 중요한 부분은 소켓IO 이벤트 핸들러(connect, disconnect, my_event 및 server)입니다. 이 네 가지 이벤트가 사용되고 있습니다. 자세한 정보는 여기에서 확인할 수 있습니다. 소켓IO 연결 및 해제 이벤트는 WebSocket 연결 및 연결해제에 대한 내장 이벤트입니다. 다른 두 이벤트인 \"my_event\" 및 \"server\"은 사용자 정의된 이벤트입니다. \"my_event\" 이벤트는 클라이언트에서 서버로 데이터를 보내기 위해 사용됩니다(그러나 여기서는 실제로 데이터를 서버로 보내지는 않으나 버튼 클릭 이벤트를 트리거하기 위해 사용됩니다). 버튼 클릭은 \"myupdate\"라는 함수를 실행하며, 이 함수는 서버로 데이터를 전달하는 \"my_event\" 이벤트를 생성합니다. 이 \"my_event\"는 서버(Flask 어플리케이션)에서 받아지고 ping 결과를 처리하고 결과를 송수신 이벤트인 \"server\"를 사용하여 결과를 전송합니다(이것은 사용자 정의 이름일 수 있습니다). 클라이언트는 Flask 애플리케이션에서 보낸 이벤트인 \"server\"를 잡아서 ping 결과를 웹 페이지에 표시합니다.\n\n위의 Flask 어플리케이션 코드에서 클라이언트로 for 루프 실행(루프가 실행된 횟수)을 \"data1\"로 보내고 있음을 기억하세요. 루프가 실제로 완료되었는지 확인하기 위해 루프가 몇 번 실행되었는지 확인합니다(따라서 서버에서 클라이언트로 완전한 ping 데이터가 전송되었는지 확인합니다). Python For Loop에서는 0부터 4까지로 계산되므로, 5회차가 완료되면 루프가 정말로 완료되었는지 확인하게 됩니다. 따라서 4번째 반복이 완료되면, 서버로부터 클라이언트로 완전한 데이터가 전송된 것입니다. 우리는 이 확인을 위하여 HTML 코드에서 데이터가 여전히 수신 중인지를 확인합니다. 데이터가 여전히 수신 중이라면, 버튼 클릭을 비활성화합니다. 완전한 데이터를 받으면, 버튼이 다시 활성화됩니다.\n\n<div class=\"content-ad\"></div>\n\n## Flask 애플리케이션 시작하기\n\n```js\n(myvirtual) [test@flask ~]$ sudo systemctl enable myapp.service \n(myvirtual) [test@flask ~]$ sudo systemctl start myapp.service\n```\n\n브라우저를 열고 http://`server-ip`/home을 방문하여 애플리케이션을 확인해보세요. 만약 아래와 같이 보여져야 합니다. 플라스크 애플리케이션을 중지해보세요(sudo systemctl stop myapp.service), 그러면 웹페이지에 \"Websocket Disconnected\" 메시지가 표시됩니다.\n\n![웹소켓과 함께 플라스크 활용하기](/assets/img/2024-05-01-PoweringFlaskwithWebsockets_0.png)\n\n<div class=\"content-ad\"></div>\n\n브라우저로 전송된 실시간 핑 결과를 확인하려면 \"제출\" 버튼을 클릭하세요!\n\n여기까지입니다! 웹소켓을 사용하여 웹 애플리케이션을 구축하는 것은 시작에 불과합니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*dGtF5scLDyMycFVN6wXzbw.gif)","ogImage":{"url":"/assets/img/2024-05-01-PoweringFlaskwithWebsockets_0.png"},"coverImage":"/assets/img/2024-05-01-PoweringFlaskwithWebsockets_0.png","tag":["Tech"],"readingTime":11},{"title":"Power BI 보고서에 HTML, CSS를 활용하기","description":"","date":"2024-05-01 22:51","slug":"2024-05-01-ElevatingPowerBIReportswithHTMLCSSJoiningForces","content":"\n\n<img src=\"/assets/img/2024-05-01-ElevatingPowerBIReportswithHTMLCSSJoiningForces_0.png\" />\n\n🎁 이 기사 끝에 PBIX 파일을 다운로드할 수 있습니다!\n\n## 소개\n\nHTML(HyperText Markup Language)은 웹 페이지를 만들고 디자인하는 데 사용되는 표준 프로그래밍 언어입니다. CSS(Cascading Style Sheets)와 결합되어 광범위한 스타일링 및 레이아웃 조정이 가능하며, 이 두 언어는 거의 모든 종류의 웹 인터페이스 디자인을 가능하게 합니다.\n\n<div class=\"content-ad\"></div>\n\nHTML/CSS 전문가는 아니지만, Power BI 보고서의 일부에 점점 HTML/CSS를 활용하여 사용자 정의 모양, 아이콘 등을 통해 시각적 매력을 높이고 있어요. 이를 통해 보고서에서 사용된 도형과 측정 항목의 수를 줄이거나 간단하게 만들 수도 있어요. 이전 기사에서 공유된 PBIX 파일을 보신 분들 중 많이 알고 계실 것 같은데요, 저는 주로 Power BI의 기능과 HTML/CSS의 다양성을 효과적으로 결합할 수 있는 HTML Content 비주얼을 활용하곤 해요 💪.\n\n지난 글 \"매력적인 Power BI 보고서 디자인하는 방법\"에서는 FP20 Analytics Challenge인 Data-Driven Education Management을 위해 작성한 보고서에서 이 대회를 위해 사용한 HTML 내용 비주얼을 간단하게 소개할 거에요 (Power BI 보고서는 아직 진행 중이고 😅— 대회 마감일은 2월 15일 ⏰).\n\n## HTML 내용 비주얼에 액세스하는 방법\n\nHTML 내용 비주얼은 Power BI의 표준 시각화 도구가 아니에요. 보고서에 추가하려면 다음 단계를 따라 가져와야 해요:\n\n<div class=\"content-ad\"></div>\n\n- Power BI의 시각화 패널에서 \"Get more visuals\" 세 개의 점(...)을 클릭합니다.\n- HTML Content 시각화를 선택합니다. 빠르게 찾으려면 오른쪽에 있는 검색 바를 사용하세요.\n- Power BI 보고서에 HTML Content Visual을 가져오려면 \"Add\"를 클릭합니다.\n\n![이미지](/assets/img/2024-05-01-ElevatingPowerBIReportswithHTMLCSSJoiningForces_1.png)\n\n## Power BI에서 HTML Content Visual 사용하기\n\nPower BI에서 HTML 콘텐츠 시각화를 사용하려면 시각화를 보고서에 추가하고 HTML 코드를 포함하는 측정 항목이나 필드를 사용하면 됩니다. HTML 코드는 항상 측정 항목이나 필드에서 따옴표(\" \")로 둘러싸여 있어야 합니다.\n\n<div class=\"content-ad\"></div>\n\nHTML 콘텐츠 비주얼에 감사드리는 점은 DAX와 HTML의 기능을 결합하여 시각화를 최대한 활용할 수 있는 측정치를 만들 수 있는 점입니다. 몇 가지 예시를 통해 더욱 명확해질 것입니다.\n\n이 시각화 도구에 대한 문서를 확인하실 수 있습니다.\n\nHTML에 대해 간단히 알아보기...\n\nHTML은 웹 브라우저에 콘텐츠를 표시하는 방법을 지시하는 일련의 요소나 태그로 구성됩니다. 예를 들어, 텍스트는 다양한 태그로 둘러싸여 있어야 하는데, 이는 문단으로 표시할지, 제목으로 표시할지, 아니면 목록 항목으로 표시할지를 나타내는 것입니다. HTML 태그는 일반적으로 `p`로 시작하는 문단과 `/p`로 끝나는 것과 같이 짝을 이룹니다. 이러한 태그 내의 속성은 스타일, 링크 또는 기타 속성을 더 자세히 정의할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nHTML의 기본 이해가 내 프로그래밍 여정 전체에 많은 도움이 되었다는 것을 발견했어요. 저는 프로젝트를 통해 가장 잘 배우는 편이에요. 그래서 HTML을 사용하는 방법을 시작할 때 도움이 되도록 몇 가지 간단한 예제를 다음 섹션에서 보여드릴 거에요. 그러나 강의를 통해 학습하는 것을 선호한다면, Codecademy의 HTML 강의를 권해드립니다. 몇 년 전에 CSS 강의와 함께 수강한 적이 있어요. 각 강의의 수강 시간은 약 6시간이고, 제게 견고한 기반이 마련되도록 도와주었어요 (제 생각에요 😅).\n\n## 1. 텍스트 스타일링\n\n텍스트의 일부를 이탤릭체로 만드는 방법을 찾다가 HTML을 발견했어요. HTML에서 텍스트를 스타일링하는 일반적인 방법 몇 가지를 보여드릴게요:\n\n- `i`와 `/i`는 텍스트를 이탤릭체로 만들어요.\n- `b`와 `/b`는 텍스트를 굵게 만들어요.\n- `br`은 줄 바꿈을 추가해요.\n- `u`와 `/u`는 텍스트에 밑줄을 긋어요.\n- `span style=\"color:#FF5733;\"`와 `/span`은 텍스트 색상을 바꿀 수 있어요.\n- `div style=\"font-family:`Arial`;\"`와 `/div`은 글꼴을 바꿀 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n이 HTML 태그들을 조치나 필드에 직접 통합하여 보고서 내에서 텍스트 모양을 동적으로 수정할 수 있습니다. 이 기능은 주요 지표를 강조하거나 특정 부분을 강조하거나 보고서를 더 멋지게 만드는 데 특히 유용합니다 😎.\n\n제 보고서에서는 HTML 콘텐츠 비주얼을 사용하여 이러한 텍스트 상자들을 스타일링했어요:\n\n![HTML Content Visual](/assets/img/2024-05-01-ElevatingPowerBIReportswithHTMLCSSJoiningForces_2.png)\n\n여기 Average Score KPI 아래 \"지난 학기/작년\" 텍스트를 표시하기 위해 만든 DAX 측정값이 있어요:\n\n<div class=\"content-ad\"></div>\n\n```js\n시각화 마지막 학기/작년 평균 점수 = \n\"지난 학기: \" & \"<b>\" & FORMAT([작년 학기 평균 점수], \"0.0\") & \"</b><br>\" &\n\"작년: \" & \"<b>\" & FORMAT([작년 평균 점수], \"0.0\") & \"</b>\"\n```\n\n이 측정값에서는 강조하려는 텍스트를 `b`와 `/b` 태그 사이에 넣어 텍스트를 굵게 표시했습니다. 새 줄로 이동하기 위해 `br` 태그를 사용했습니다. 모든 HTML 태그는 인용 부호 안에 포함되어야 합니다. DAX 측정값에서 두 개 이상의 HTML 태그를 연달아 사용해야 할 때(`/b``br`와 같이), 같은 인용 부호 내에 함께 넣을 수 있습니다.\n\n## 2. 모양 생성하기\n\nHTML과 CSS는 Power BI 보고서 내에서 직접 사용자 지정 모양을 생성하는 강력한 도구 상자를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n보고서에서는 전 학기와 작년을 보여주는 KPI의 변화를 나타내기 위해 다음과 같은 배경 타원 모양을 생성했습니다.\n\n![배경 타원 모양](/assets/img/2024-05-01-ElevatingPowerBIReportswithHTMLCSSJoiningForces_3.png)\n\n파워 BI의 기본 타원 모양 대신 HTML을 사용하여이 모양을 만들기로 결정했는데, 다음 섹션에서 살펴볼 HTML 아이콘을 포함하고 싶었기 때문입니다. 게다가, 이 타원은 상당히 작아야 했고, 파워 BI 모양을 사용하면 텍스트를 추가하고 완전히 보이게하기가 어려웠습니다.\n\n이를 위해 'Oval Set Up'이라는 DAX 측정 항목을 생성하여 시작했습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nOval Set Up = \"<head>\n<meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1\"\">\n<style>\n.oval {\n  height: 18px;\n  width: 48px;\n  background-color: BACKGROUND_COLOR ;\n  border-radius: 25px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: {FONT_COLOR} ;\n  font-size: 10px;\n}\n</style>\n<body>\n<div class=\"\"oval\"\">\n    <span>&nbsp;TEXT</span>\n</div>\n</body>\n\"\n```\n\n위 코드는 원형 모양의 외관과 레이아웃을 정의하기 위해 HTML 및 CSS를 사용하며, 사용자 정의 가능한 요소를 위해 중괄호({}) 안에 플레이스홀더를 사용합니다. 각 부분의 역할은 다음과 같습니다:\n\n- HTML 구조: `head` 섹션에는 다양한 디바이스에서 적절한 확대/축소가 이루어지도록 하는 `meta` 태그가 포함되어 있습니다. width=device-width, initial-scale=1은 콘텐츠가 반응형으로 스케일링되도록 설정합니다. `head` 내의 `style` 섹션은 원형 모양을 위한 CSS 스타일을 정의합니다.\n- CSS 스타일링 (oval 클래스):\n\n  - height: 18px; 및 width: 48px;는 원형의 크기를 설정합니다.\n  - background-color: BACKGROUND_COLOR;는 원형의 채우기 색상을 지정하는데, BACKGROUND_COLOR는 색상 값을 나타내는 플레이스홀더입니다.\n  - border-radius: 25px;는 원형의 모양을 둥근 타원형으로 정의하며, 코너가 얼마나 둥글게 보여야 하는지를 결정합니다.\n  - display: flex; align-items: center; justify-content: center;는 원형 내의 텍스트(또는 콘텐츠)를 세로 및 가로 중앙 정렬합니다.\n  - color: FONT_COLOR;는 원형 내 텍스트의 색상을 설정하는데, FONT_COLOR는 텍스트 색상을 위한 플레이스홀더입니다.\n  - font-size: 10px;은 원형 내의 텍스트 크기를 지정합니다.\n\n<div class=\"content-ad\"></div>\n\n3. HTML 본문과 콘텐츠:\n\n- `body`에는 \"oval\" 클래스가 적용된 `div` 요소가 포함되어 있으며, 이 div에 이전에 정의한 CSS 스타일이 적용됩니다.\n- 이 div 내에 `span` 요소가 있고, TEXT라는 텍스트를 내부에 표시하고자 하는 플레이스홀더가 들어 있습니다. &nbsp; (간격을 유지하는 고정 간격 문자)는 텍스트가 원 안에서 올바르게 간격을 유지하도록 합니다.\n\n다음 조치는 첫 번째 타원 모양(지난 학기의 차이를 보여줌)을 표시하기 위해 플레이스홀더를 DAX에 정의된 값으로 대체하고, 해당 값을 HTML/CSS 코드로 대체하는 것을 보여줍니다:\n\n<img src=\"/assets/img/2024-05-01-ElevatingPowerBIReportswithHTMLCSSJoiningForces_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n```js\n형식화된 지난 학기 평균 점수 변동 = \nVAR _Variation = FORMAT(ABS([지난 학기 평균 점수 % 변동]), \"0.0%\")\nVAR _BackgroundColor = \n    IF(\n        [지난 학기 평균 점수 변동]<0,\n        [Color Light Red],\n        [Color Light Green]\n    )\nVAR _FontColor = \n    IF(\n            [지난 학기 평균 점수 변동]<0,\n            [Color Red],\n            [Color Green]\n        )\nVAR _Text = \n    IF(\n            [지난 학기 평균 점수 변동]<0,\n            [아이콘 빨간 삼각형 아래] &  _Variation,\n            [아이콘 초록 삼각형 위] &  _Variation\n        )\nVAR _Shape = \nSUBSTITUTE(\n    SUBSTITUTE(\n        SUBSTITUTE(\n            [Oval 설정],\n            \"{배경_색상}\",\n            _BackgroundColor\n        ),\n        \"{글꼴_색상}\",\n        _FontColor\n    ),\n    \"{텍스트}\",\n    _Text\n)\nRETURN IF([지난 학기평균 점수] <> 빈칸(), _Shape) \n```\n\n지난 학기에 이루어지는 측정 항목은 다음과 같습니다:\n\n```bash\n- _변동 계산: 이 측정 값은 FORMAT(ABS([지난 학기 평균 점수 % 변동]), \"0.0%\")을 사용하여, 지난 학기 평균 점수의 절대 백분율 변동을 계산합니다.\n- 배경 색상 설정: 평균 점수 변동이 음수(하락)인지 양수(상승)인지에 따라 배경 색상을 결정합니다. 변동이 음수인 경우, 연한 빨간색 ([Color Light Red])을 사용하고, 양수인 경우, 연한 초록색 ([Color Light Green])을 사용합니다.\n- 글꼴 색상 선택: 배경 색상과 마찬가지로 점수 변동에 따라 글꼴 색상을 선택합니다. 어두운 빨간색 ([Color Red])은 감소를 나타내고, 녹색 ([Color Green])은 증가를 나타냅니다.\n- 텍스트와 아이콘 구성: 측정 항목은 표시될 텍스트를 구성하여, 아이콘과 변동 백분율을 결합합니다. 점수가 감소한 경우, 빨간 아래쪽 화살표 아이콘을 변동에 앞서 놓고 ([아이콘 빨간 삼각형 아래] & _Variation), 증가한 경우 초록 위쪽 화살표 아이콘을 사용합니다 ([아이콘 초록 삼각형 위] & _Variation).\n- HTML을 사용한 모양 사용자 정의: [Oval 설정]에서 HTML 설정을 이용하여, 배경 색상, 글꼴 색상 및 텍스트를 결정된 값(_BackgroundColor, _FontColor, _Text)으로 대체합니다. 이 단계를 통해, HTML/CSS로 디자인된 타원 모양의 모양을 현재 데이터 컨텍스트에 맞게 사용자 정의하고, 색상으로 표시되어 적절한 아이콘과 백분율 변화로 레이블이 붙습니다.\n- 조건부 렌더링: 마지막으로, 측정값은 지난 학기에 유효한 평균 점수가 있는 경우에만 사용자 정의된 HTML/CSS 타원 모양을 출력합니다 (IF([지난 학기평균 점수] <> 빈칸(), _Shape)). 이는 데이터가 제공될 때만 시각화가 나타나도록 보장합니다(데이터 모델에는 몇 개월만 포함되어 있기 때문입니다).\n```\n\n## 3. 온라인에서 찾은 아이콘 통합\n\n<div class=\"content-ad\"></div>\n\n파워 BI 보고서에 이미지로 아이콘을 로드하는 대신 HTML로 표시하면 더 깔끔해 보입니다. 비즈니스 규칙에 따라 적용할 수 있는 다양한 사용자 정의 옵션이 있습니다(예: 아이콘 크기를 더 작게하거나 크게 만들기, 색상 변경, 회전 등).\n\n저는 현대적인 외관 때문에 'Font Awesome' 아이콘 라이브러리를 선호합니다. 지금까지 무료 아이콘만 사용해 왔지만, 좀 더 화려하고 트렌디한 것에 접속하려면 멤버십 옵션이 있습니다.\n\n내 보고서에는 Font Awesome 아이콘 라이브러리를 활용하여 위쪽과 아래쪽 화살표 아이콘을 추가했습니다.\n\n<img src=\"/assets/img/2024-05-01-ElevatingPowerBIReportswithHTMLCSSJoiningForces_5.png\" />\n\n<div class=\"content-ad\"></div>\n\n가끔 이 라이브러리에서 여러 아이콘을 사용하기 때문에, 타원 모양과 같은 아이콘들을 사용하는 경우가 많습니다. 먼저 DAX 측정값을 설정하여, 그 중 일부를 대체합니다.\n\n```js\n아이콘 Font awesome 아이콘 설정 = \"\n<head>\n    <meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1\"\">\n    <link rel=\"\"stylesheet\"\" href=\"\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css\"\"/>\n</head>\n<i style=\"\"color:COLOR\"\" class=\"\"ICON_CODE SIZE\"\">\n</i>\n&nbsp;\"\n```\n\n이 측정값이 달성하는 것은 다음과 같습니다:\n\n- 반응형 디자인 설정: 'head' 섹션의 'meta' 태그는 화면 너비와 콘텐츠의 크기를 조절하여 다양한 디바이스에서 올바르게 표시될 수 있도록 하기 위해 뷰포트를 설정합니다. 이는 데스크톱, 태블릿 또는 스마트폰에서 아이콘을 볼 때 잘 보일 것을 의미합니다.\n- Font Awesome 아이콘 접근: 'link' 태그는 CDN (콘텐츠 전송 네트워크)에서 Font Awesome 스타일시트를 가져옵니다. 이 스타일시트는 모든 Font Awesome 아이콘에 대한 스타일을 제공하여, 해당하는 특정 클래스 이름을 사용하여 보고서에서 사용할 수 있게 합니다.\n- 아이콘 표시 및 사용자 지정: 'i' 태그를 사용하여 HTML 콘텐츠에 아이콘을 삽입합니다. 'class' 속성은 ICON_CODE (Font Awesome의 특정 클래스 이름의 플레이스홀더)와 SIZE(크기를 나타내는 플레이스홀더, 크기 조절 메타데이터를 사용하며, 예를 들어 'fa-lg'는 큰 크기입니다)를 사용하여 표시할 아이콘을 지정합니다. 'style' 속성은 원하는 색상 코드로 대체될 COLOR를 사용하여 아이콘의 색상을 설정하는 데 사용됩니다.\n- 공간 관리: 끝에 있는 '&nbsp;'(간격을 유지하는 비중단 공백) 문자는 아이콘 뒤에 텍스트나 다른 요소가 따라오는 경우 적절한 간격을 유지하기 위해 사용됩니다. 이는 보고서에서 아이콘 다음에 텍스트나 다른 요소가 있을 경우 올바른 간격을 유지하는 데 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n실제 값으로 COLOR, ICON_CODE, 및 SIZE 자리 표시자를 대체함으로써, 이 방법을 사용하면 커스텀 아이콘을 Power BI 보고서에 동적으로 삽입할 수 있습니다.\n\n그런 다음, Green Arrow Up과 같은 측정 항목에서 플레이스홀더 값을 대체하여 화살표 아이콘을 만듭니다:\n\n![Green Arrow Up Image](/assets/img/2024-05-01-ElevatingPowerBIReportswithHTMLCSSJoiningForces_6.png)\n\n```js\nColor Green = \"#2C6D6A\"\n\nIcon green arrow up = \nSUBSTITUTE(\n        SUBSTITUTE(\n            SUBSTITUTE(\n                [Icon Font awesome icon set up],\n                \"ICON_CODE\",\n                \"fa-solid fa-arrow-trend-up\"\n                ), \n            \"SIZE\", \n            \"fa-md\"\n        ),\n        \"COLOR\",\n        [Color Green]\n    )\n```\n\n<div class=\"content-ad\"></div>\n\n아이콘 녹색 화살표 측정치가 이루어내는 것은 다음과 같습니다:\n\n- 기본 템플릿: [아이콘 폰트 어썸 아이콘 설정]으로 시작합니다. 이는 HTML 코드를 포함한 구조화된 미리 정의된 템플릿으로 구성되어 있습니다. 이 템플릿에는 아이콘의 코드(ICON_CODE), 크기(SIZE), 색상(COLOR)을 포함할 수 있는 장소 표시자가 있습니다.\n- 첫 번째 치환 — ICON_CODE: 첫 번째 SUBSTITUTE 함수는 ICON_CODE 플레이스홀더를 \"fa-solid fa-arrow-trend-up\"으로 대체합니다. 이는 폰트 어썸 라이브러리에서 솔리드한 상승 화살표 아이콘의 사용을 지정합니다. 이 아이콘은 일반적으로 증가한 KPI 또는 지표에서 시각적으로 긍정적인 성장 또는 개선을 나타내는 데 사용됩니다.\n- 두 번째 치환 — SIZE: 다음 SUBSTITUTE 함수는 SIZE 플레이스홀더를 \"fa-md\"로 대체하여 아이콘의 크기를 중간으로 설정합니다. Font Awesome는 다양한 크기 클래스(fa-xs, fa-sm, fa-md, fa-lg, fa-xl, fa-2x부터 fa-10x)를 사용하여 아이콘을 손쉽게 크기 조절할 수 있도록 합니다. fa-md를 선택함으로써 아이콘이 너무 작거나 너무 크지 않게 조절하여 사용되는 맥락 내에서 시각적으로 균형을 맞추게 됩니다.\n- 세 번째 치환 — COLOR: 마지막 SUBSTITUTE 함수는 COLOR 플레이스홀더를 [초록색]로 대체합니다. 이 측정치의 이 부분은 아이콘의 색상을 사용자 정의하며, 사전 정의된 변수나 측정치 [초록색]을 사용하여 사용할 정확한 녹색 쉐이드를 지정합니다. 녹색은 긍정적 성과와 관련되어 있어 상승하는 화살표 아이콘에 적합한 선택으로 여겨집니다.\n\n파워 BI 보고서에서 만들어진 다른 모든 아이콘의 DAX 측정치를 확인하려면 이 기사의 끝에 제공된 PBIX 파일을 다운로드하여 사용할 수 있습니다. 이들은 _Constants/HTML Set Up 측정치 폴더 아래에서 모두 확인할 수 있습니다.\n\n![이미지](/assets/img/2024-05-01-ElevatingPowerBIReportswithHTMLCSSJoiningForces_7.png)\n\n<div class=\"content-ad\"></div>\n\n## HTML 콘텐츠 시각을 활용하는 다른 기회들\n\n여러분이 아시다시피, Power BI의 HTML 콘텐츠 시각을 활용하여 얼마나 많은 가능성이 있는지 조금이라도 알 수 있었습니다. 다음은 Power BI에서 이 시각화를 활용하는 몇 가지 아이디어입니다:\n\n- 대화형 콘텐츠 임베딩: 지도, 애니메이션 차트, 미니 게임과 같은 대화형 요소를 통합하여 사용자들을 즐겁게 만들어보세요.\n- 사용자 정의 탐색 메뉴 만들기: 직관적인 탐색 메뉴를 설계하기 위해 HTML/CSS를 사용하여 보고서의 사용성과 구조를 향상시키세요.\n- 외부 웹 콘텐츠 통합: 비디오, 실시간 데이터 피드, 또는 타 웹 콘텐츠를 보고서에 직접 삽입하여 최신 정보를 제공하고 데이터 이야기를 풍부하게 만드세요.\n- 사용자 정의 스타일링과 브랜딩: 보고서의 모양과 느낌을 기업 브랜딩이나 특정 디자인 지침에 맞추어 조정하여 모든 보고서에서 일관된 시각적 경험을 제공하세요.\n\n물론 이 외에도 더 많은 방법이 있을 거에요!!\n\n<div class=\"content-ad\"></div>\n\n## 마무리\n\n여기까지가 이 기사의 전부에요! 여기서 우리는 Power BI에서 HTML과 CSS로 할 수 있는 것들의 일부만 살짝 소개했는데, 여러분을 흥분하게 만들고 새로운 기회와 잠재적인 사용 사례들에 대해 생각하게 했으면 좋겠어요. HTML을 잘 몰라도 이 시각화를 시도해보고 싶다면, ChatGPT 🤖를 활용하여 필요한 HTML 코드를 준비하는 데 도움을 받아보세요!\n\n다음 PBIX 파일에서 이러한 예시들을 모두 확인해보세요.\n\n즐거운 디자인 🎨 그리고 저의 다음 업데이트를 기대해주세요! 🥸\n\n<div class=\"content-ad\"></div>\n\n## 여기에서 나를 찾거나 팔로우하세요:\n\n- Medium\n- LinkedIn\n- X (이전에는 Twitter)","ogImage":{"url":"/assets/img/2024-05-01-ElevatingPowerBIReportswithHTMLCSSJoiningForces_0.png"},"coverImage":"/assets/img/2024-05-01-ElevatingPowerBIReportswithHTMLCSSJoiningForces_0.png","tag":["Tech"],"readingTime":12},{"title":"HTML Ping 이제는 사용하지 않아야하는 이유","description":"","date":"2024-05-01 22:50","slug":"2024-05-01-TheHTMLPingAPossiblyForgottenAttribute","content":"\n\n![이미지](/assets/img/2024-05-01-TheHTMLPingAPossiblyForgottenAttribute_0.png)\n\nHTML ping 속성은 웹 개발자가 링크 클릭 추적을 가볍게 구현할 수 있도록 도와주는 도구입니다.\n\n## Ping 속성 이해하기\n\nPing 속성은 HTML에서 앵커(`a`) 요소와 특별히 함께 사용됩니다. 그 값으로 URL의 공백으로 구분된 목록을 허용합니다. Ping 속성이 정의된 앵커 요소를 클릭하면 브라우저가 자동으로 지정된 URL로 POST 요청을 보냅니다.\n\n<div class=\"content-ad\"></div>\n\n기본적인 예제를 살펴보면 ping 속성이 어떻게 작동하는지 알 수 있어요:\n\n```js\n<a href=\"https://www.example.com/article\" ping=\"https://www.example.com/track\">기사 읽기</a>\n```\n\n이 예제에서 사용자가 \"기사 읽기\" 링크를 클릭하면 브라우저가 https://www.example.com/track으로 POST 요청을 보내게 됩니다.\n\n# 핑 요청\n\n<div class=\"content-ad\"></div>\n\nping 속성을 사용하면 브라우저가 지정된 URL로 POST 요청을 보냅니다. 요청 payload는 단어 PING이고 ping-to 요청 헤더에는 링크의 대상이 포함됩니다. 또한 사용자 에이전트와 같은 다른 정보도 요청 내에서 액세스할 수 있습니다.\n\nping 요청의 content-type은 일반적인 폼 제출 또는 AJAX 요청과 구별되도록 text/ping으로 설정됩니다.\n\n# 브라우저 지원\n\nping 속성의 브라우저 지원은 비교적 좋지만, 다양한 브라우저 간에 일부 차이가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-01-TheHTMLPingAPossiblyForgottenAttribute_1.png)\n\n## 실용적인 사용 사례\n\n### 링크 클릭 추적\n\nPing 속성의 주요 목적은 링크를 통한 사용자 상호 작용을 추적하는 것입니다. Ping 속성에 하나 이상의 URL을 정의함으로써 사용자가 웹사이트와 상호 작용하는 방식을 모니터링하고 분석할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n다음 예제를 살펴보세요:\n\n```js\n<a href=\"https://www.example.com/popular-posts\" ping=\"https://www.example.com/track\">인기 게시물 읽기</a>\n```\n\n이 경우 사용자가 \"인기 게시물 읽기\" 링크를 클릭하면 ping 속성이 지정된 URL(https://www.example.com/track)로 POST 요청을 트리거합니다. 이 요청은 링크가 클릭된 것을 알리는 통지 역할을 하여 데이터를 수집하고 사용자 행동을 분석할 수 있게 합니다.\n\n## 교차 도메인 추적\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경하세요.\n\nThe ping attribute can also be used to track user interactions across different domains. Suppose you have multiple websites within your organization and want to collect data about how users navigate between them. By defining the appropriate tracking URLs in the ping attribute, you can achieve seamless cross-domain tracking.\n\n# Availability of Third-Party Analytics Providers\n\nThird-party analytics providers, such as Google Analytics, offer comprehensive tracking solutions that are easy to implement. By simply embedding a single JavaScript snippet, developers can access powerful tracking capabilities without the need for manual HTML modifications. These providers handle the tracking infrastructure, data processing, and reporting, making it a convenient choice for many web developers.\n\n# Conclusion\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경하세요.","ogImage":{"url":"/assets/img/2024-05-01-TheHTMLPingAPossiblyForgottenAttribute_0.png"},"coverImage":"/assets/img/2024-05-01-TheHTMLPingAPossiblyForgottenAttribute_0.png","tag":["Tech"],"readingTime":3},{"title":"프론트엔드 주간 뉴스(2024년 4월 15일-21일)","description":"","date":"2024-05-01 22:49","slug":"2024-05-01-FrontendWeeklyDigest3591521April2024","content":"\n\n<img src=\"/assets/img/2024-05-01-FrontendWeeklyDigest3591521April2024_0.png\" />\n\n# 웹 개발\n\n- 반응형 HTML 이메일 템플릿 만드는 방법\n- 웹 구성 요소 채택 안내서: 개요, 예시 및 대안\n- 새로운 Wasm 프로젝트, 백엔드 언어로 웹 구성 요소 활용\n- 일부 스크롤 텍스트 강조 애니메이션\n\n- 성능\n   - Google의 최근 INP 전환 해독하기\n   - Google 핵심 웹 성능 모니터링 및 최적화 방법\n\n- 접근성\n   - 스크린 리더 해독하기: 접근 가능한 폼 및 모범 사례\n   - 미국 법무부가 웹 및 모바일 앱을 위해 WCAG 2.1 A/AA 채택한 의미\n   - 긴 Alt\n\n<div class=\"content-ad\"></div>\n\n# CSS\n\n• 카스케이드와 특이성에 대한 기본 지식\n• 다크 테마 / 라이트 테마에서 무슨 일이 벌어지고 있나요?\n• CSS에서 aspect-ratio를 깨뜨릴 수 있는 것들\n• 층층이 겹쳐지는 토글: 선택적 CSS 믹스인\n• CSS에서의 메이슨리 레이아웃\n\n# JavaScript\n\n• 순수 JavaScript로 일반 텍스트를 인코딩된 HTML로 변환하기\n• jQuery 업그레이드: 건강한 웹을 향한 노력\n• Qwik vs. Next.js: 다음 웹 프로젝트에 적합한 프레임워크는?\n• 활용되지 않은 JavaScript 기능 Top 5\n• JavaScript에서 반응성 마스터하기: 강력한 패턴 8가지…\n• 레이어 케이크 — Svelte를 위한 그래픽 프레임워크\n• 웹 스크래핑을 위한 상위 6개 JavaScript 및 NodeJS 라이브러리\n\n<div class=\"content-ad\"></div>\n\n- React\n  - React에서 동적 드롭다운 컴포넌트 만들기 — React Compound Component Pattern 설명\n  - React 서버 컴포넌트에서 CSS\n  - semantic-autocomplete은 작은 양자화 머신러닝(ML) 모델을 사용하여 클라이언트 측에서 실행되며 v5 MUI의 자동완성을 확장하고 의미 유사성 검색을 수행하는 React 컴포넌트입니다.\n  - React 애플리케이션 스타일링 방법\n  - React에서 시그널이 방금 도착했나요?\n  - Wing로 React 앱 만들기\n  - Wedges로 더 빠르게 개발하기. React를 위한 UI 컴포넌트 모음\n- Angular\n  - Angular의 inject() 함수 사용으로 1000줄의 코드를 절약했습니다.\n  - Angular에서 입력을 사용하여 동적 컴포넌트 로더 typings 개선하기","ogImage":{"url":"/assets/img/2024-05-01-FrontendWeeklyDigest3591521April2024_0.png"},"coverImage":"/assets/img/2024-05-01-FrontendWeeklyDigest3591521April2024_0.png","tag":["Tech"],"readingTime":2},{"title":"aria-description 속성과 사용을 피해야 하는 이유","description":"","date":"2024-05-01 22:46","slug":"2024-05-01-Thearia-descriptionattributeandwhyyoushouldavoidusingit","content":"\n\n![이미지](/assets/img/2024-05-01-Thearia-descriptionattributeandwhyyoushouldavoidusingit_0.png)\n\n# 소개\n\n소개를 건너뛰세요.\n\n새로운 것이 나타날 때마다, 열정적이고 심지어 선량한 개발자들은 세세한 내용을 읽지 않고 빠르게 구현할 수도 있습니다. 이제 WAI-ARIA 1.3의 First Public Working Draft에 새로운 ARIA 역할과 속성이 포함되었기 때문에 신중함이 필요합니다.\n\n<div class=\"content-ad\"></div>\n\n이 기사에서는 새로운 aria-description 속성에 대해 다룰 것이며 가능하다면 사용을 피해야 하는 이유에 대해 알려드릴 겁니다.\n\n## WAI-ARIA 1.3\n\nWAI-ARIA는 Web 접근성 이니셔티브 — 접근 가능한 풍부한 인터넷 애플리케이션에 대한 줄임말입니다. ARIA 작업 그룹은 웹 브라우저 및 개발자들을 위해 \"네이티브 호스트 언어 요소에 적용할 수 있는 역할, 상태 및 기타 속성을 포함한 보충 속성 개발을 통해 웹 콘텐츠의 접근성을 향상시키는 권고안 세트\" 를 제공합니다. (출처)\n\n2024년 1월 말 (이 기사 작성일 몇 주 전)에 ARIA 작업 그룹은 WAI-ARIA 1.3의 첫 번째 공개 작업 초안을 공개했습니다.\n\n<div class=\"content-ad\"></div>\n\nW3C 권장사양이 되기까지는 아직 몇 단계가 남았지만, WCAG가 프로세스를 거치는 데 걸리는 시간만큼 길지는 않을 것 같아요.\n\naria-description이 최종 권장사양에 반드시 포함될 것이지만, 완료 전에 WAI-ARIA 1.3에 변경이 있을 가능성이 높습니다.\n\n## ARIA 속성에 관한 간단한 설명\n\naria-description에 대해 설명하기 전에 ARIA 속성에 대한 중요한 사항을 알아야 합니다.\n\n<div class=\"content-ad\"></div>\n\n- ARIA 속성은 기본 HTML 요소를 사용할 수 없을 때에만 사용해야 합니다.\n- ARIA 속성은 콘텐츠가 보조 기술(AT)에서 소비되는 방식만 변경합니다. 비-AT 사용자에게는 페이지의 시각적 또는 기능적 변경이 없습니다.\n- ARIA 속성을 어떻게 사용해야 하는지 확신이 없다면 사용하지 마세요. ARIA Authoring Practices Guide에 명시되어 있습니다:\n\n## aria-description은 무엇인가요?\n\n### aria-description을 어떻게 사용하나요?\n\naria-description 속성은 개발자가 보조 기술(AT) 사용자를 위해 인터랙티브 요소에 컨텍스트와 안내를 추가할 수 있게 합니다.\n\n<div class=\"content-ad\"></div>\n\n개발자는 aria-label 속성이 작동하는 방식과 유사하게 aria-description 속성에 일반 텍스트를 사용할 수 있습니다:\n\n```js\n<label>예시\n<input type=\"text\" id=\"textExample\" \naria-description=\"AT 사용자에게만 \n제공되는 유용한 텍스트입니다\" /></label>\n```\n\n## aria-description과 aria-describedby의 차이점은 무엇인가요?\n\n정보의 목적 자체에는 차이가 없습니다. 그저 전달 방식에만 차이가 있을 뿐입니다.\n\n<div class=\"content-ad\"></div>\n\naria-describedby 속성은 DOM에서 다른 요소(또는 요소들)를 참조하여 사용합니다. 이는 aria-labelledby 속성이 작동하는 방식과 유사합니다.\n\n시각적으로 명백한 것을 보조 기술에게 전달하는 수단으로 자주 사용됩니다. 두 개 이상의 요소 간에 관계가 있다는 것을 나타냅니다.\n\n도움말 텍스트의 매우 흔한 예는 다음과 같습니다:\n\n```js\n<label for=\"textFirstName\">이름</label>\n<input type=\"text\" id=\"textFirstName\" aria-describedby=\"descFirstName\" />\n<div id=\"descFirstName\">최소 2자 이상</div>\n```\n\n<div class=\"content-ad\"></div>\n\n아래처럼 렌더링됩니다:\n\n\n![내용](/assets/img/2024-05-01-Thearia-descriptionattributeandwhyyoushouldavoidusingit_1.png)\n\nAT는 다음과 같이 읽을 것입니다:\n\naria-description 속성을 사용하면 개발자가 기존 요소를 할당하는 대신 일반 텍스트를 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<label for=\"textFirstName\">이름\n</label>\n<input type=\"text\" id=\"textFirstName\"\naria-description=\"최소 2자\"/>\n<div aria-hidden=\"true\">최소: 2글자</div>\n```\n\n위와 같이 렌더링됩니다:\n\n<img src=\"/assets/img/2024-05-01-Thearia-descriptionattributeandwhyyoushouldavoidusingit_2.png\" />\n\n그러나 보조 기술(AT)로는 첫 번째 예제와 동일하게 읽힙니다:\n\n<div class=\"content-ad\"></div>\n\n이 예시에서 \"Min: 2 chars\" 도움말 텍스트는 시각적인 것 뿐이에요 - 도움말 텍스트와 텍스트 상자를 프로그래밍적으로 연결하는 것은 아무것도 없습니다. 대신 aria-description 속성을 사용하여 시각적으로 표현된 내용을 전달합니다.\n\n## aria-description를 사용하기 전 개발자들은 무엇을 하고 있었나요?\n\n일부 개발자들은 \"비아름다운\" 텍스트를 페이지에 넣는 것에 꺼렸어요. 비록 그 텍스트가 많은 사용자들에게 도움이 될지라도요.\n\n그 대신, 그 텍스트를 시각적으로 숨기고, 프로그래밍적으로 aria-describedby로 할당했어요:\n\n<div class=\"content-ad\"></div>\n\n\n<label for=\"textFirstName\">이름</label>\n<input type=\"text\" id=\"textFirstName\" aria-describedby=\"descFirstName\" />\n<div hidden id=\"descFirstName\">2자 이상 필요합니다</div>\n\n\n위 코드는 다음과 같이 렌더링됩니다:\n\n<img src=\"/assets/img/2024-05-01-Thearia-descriptionattributeandwhyyoushouldavoidusingit_3.png\" />\n\n그리고 이전과 마찬가지로 AT는 다음과 같이 읽을 것입니다:\n\n<div class=\"content-ad\"></div>\n\n물론, 테이블 태그를 Markdown 형식으로 변경해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n그러나 aria-describedby 속성을 사용할 때 개발자들이 기억해야 할 중요한 점이 있습니다. aria-describedby를 참조로 사용하는 모든 가시 요소에 aria-hidden=\"true\" 속성이 있어야 합니다:\n\n```js\n<label for=\"textFirstName\">이름</label><br/>\n<small id=\"descFirstName\" aria-hidden=\"true\">최소 2자</small><br/>\n<input type=\"text\" id=\"textFirstName\" aria-describedby=\"descFirstName\">\n```\n\n<div class=\"content-ad\"></div>\n\n만약 스크린 리더 사용자가 화살표 키를 사용하여 페이지를 탐색하는 경우, `small` 요소(\"최소 2자 이상\")에 `aria-hidden=\"true\"` 속성이 없으면 사용자가 해당 텍스트를 두 번 듣게 될 수 있습니다: 한 번은 요소 간 이동할 때, 다른 한 번은 텍스트 상자가 포커스를 받을 때입니다.\n\n`aria-hidden=\"true\"`는 페이지를 통해 탐색하는 동안 요소를 읽지 못하도록 하지만, aria-describedby로 제어 요소의 설명으로 사용될 때는 여전히 읽힙니다. 또한 텍스트가 맥락을 벗어나 읽히는 것을 방지합니다.\n\n## aria-description의 이점은 무엇인가요?\n\nARIA 작업 그룹은 aria-description 속성이 다음과 같은 이점을 제공할 것으로 기대합니다:\n\n<div class=\"content-ad\"></div>\n\n- aria-describedby와 함께 사용되는 설명 요소가 컨텍스트를 벗어날 때 시각 장애를 가진 사용자가 발생할 수 있는 문제를 방지합니다.\n- aria-describedby와 함께 사용되는 설명 요소가 두 번 읽히는 가능성을 방지합니다.\n- aria-describedby 속성의 참조로 사용하기 위해 요소를 생성하는 필요성을 줄여 DOM의 크기를 줄입니다.\n- aria-describedby 참조에 대한 id 속성을 생성할 필요성을 줄여 DOM에서 중복 id 값을 줄입니다.\n- 개발자가 설명 텍스트를 추가할 때 aria-label 대신 aria-description을 사용하도록 유도합니다.\n\n위의 내용에 대체적으로 동의하지만, 사용하는 데에 있어 위험이 있습니다. 이에 대해 조금 더 다루겠습니다.\n\n## 실험: AT는 aria-description을 어떻게 읽고 다른 ARIA 속성과 어떻게 다를까요?\n\n기본 라벨링 방법과 ARIA 라벨링 및 설명을 결합할 때 어떤 일이 벌어질까요?\n\n<div class=\"content-ad\"></div>\n\n위의 혼란을 해결하려면 다음을 확인해 보세요:\n\n```js\n<label>Who’s on First?\n<input type=\"text\" aria-label=\"ARIA Label\" \naria-labelledby=\"labelledby\" \naria-describedby=\"describedby\" \naria-description=\"ARIA Description\">\n</label>\n<span id=\"labelledby\">Labelled By</span>\n<span id=\"describedby\">Described By</span>\n```\n\n이 마크업에는 다음이 포함되어 있습니다:\n\n- `label` (\"누가 처음일까요?\")\n- aria-label (\"ARIA Label\")\n- 텍스트가 \"Labelled By\"인 요소를 참조하는 aria-labelledby 속성\n- 텍스트가 \"Described By\"인 요소를 참조하는 aria-describedby 속성\n- aria-description 속성 (\"ARIA Description\")\n\n<div class=\"content-ad\"></div>\n\n노트: 절대로 이렇게 하지 마세요. 이것은 테스트 목적으로만 사용됩니다.\n\nAT가 무엇을 읽을지 추측할 수 있나요?\n\n다섯 개의 라벨과 설명 중 세 개가 읽히지 않는 것을 보실 수 있습니다. 이는 AT가 ARIA 속성에 대한 규칙 때문입니다. 이 규칙은 다음과 같습니다:\n\n- AT는 `aria-label`이 있으면 `label` 요소를 무시합니다.\n- AT는 `aria-labelledby` 속성이 있는 경우 `label` 요소와 aria-label 속성을 모두 무시합니다.\n- AT는 `aria-describedby` 속성이 있는 경우 `aria-description` 속성을 무시합니다.\n\n<div class=\"content-ad\"></div>\n\n따라서, 이러한 속성은 모두 동시에 사용될 때에는 aria-labelledby 및 aria-describedby 속성만 보조 기술에서 사용되며, 나머지는 무시됩니다.\n\nARIA 속성을 사용할 때 이 사실을 명심해 주세요.\n\n## \"Description\"이란 중요한 키워드입니다\n\n레이블과 설명 사이에는 차이가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n라벨이라는 것은 \"이것은 무엇인가요?\"라는 질문에 답합니다.\n설명은 \"이것을 어떻게 사용해야 하며\" 혹은 \"이것에 대해 알아야 할 사항은 무엇인가요?\"라는 질문에 답합니다.\n\n그러니 labeling 속성으로 aria-description이나 aria-describedby를 사용하지 마세요.\n\n## aria-description을 어떻게 사용해야 하나요?\n\n트위터/X 게시물 하단의 버튼을 살펴보세요:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-01-Thearia-descriptionattributeandwhyyoushouldavoidusingit_5.png\" />\n\n이 소스 코드에는 Replies 버튼에 대한 (매우 줄인) 마크업이 있습니다:\n\n```js\n<div aria-label=\"3284 Replies. Reply\" \nrole=\"button\" tabindex=\"0\" >\n<!-- 다수의 중첩된 요소 -->\n</div>\n```\n\n보조 기술(AT)이 읽는 내용:\n\n<div class=\"content-ad\"></div>\n\n이 경우에는 Twitter 개발자들이 설명 정보를 전달하기 위해 레이블 속성(aria-label)을 사용하고 있습니다. 게다가, 설명 정보(\"3284 Replies\")는 실제 레이블 텍스트(\"Reply\")보다 먼저 읽힙니다.\n\n기억하세요, 컨트롤의 식별/목적(즉, 레이블)이 가장 중요한 정보이므로, 보조 기술에서 먼저 읽혀져야 합니다.\n\n다른 지원 또는 문맥 정보(즉, 설명)는 그 다음에 읽혀져야 합니다.\n\n도움이 된다면, 사용자와 보조 기술 간의 대화로 생각해보세요.\n\n<div class=\"content-ad\"></div>\n\n그래서 더 나은(비록 완벽하지 않은) 구현은 다음과 같이 보일 것입니다:\n\n```js\n<div aria-label=\"답글\"\naria-description=\"3284개의 답글\" \nrole=\"button\" tabindex=\"0\" >\n<!-- 여러 단계로 중첩된 요소들 -->\n</div>\n```\n\n참고: 이는 조금 더 나은 결과를 얻기 위해 가능한 한 작은 변경만을 가한 사례 중 하나입니다. role과 aria-label 속성을 사용하는 대신에 실제 `button` 요소로 되어있고 고유한 텍스트를 가지는 것이 좋습니다.\n\nAT는 이렇게 읽을 것입니다:\n\n<div class=\"content-ad\"></div>\n\n# aria-description 사용을 피해야 하는 이유\n\n혹시 aria-description에 대해 흥분하고 계신가요? 지금까지 글을 읽어보고 모든 것이 멋진 것 같아요 — 페이지를 혼잡하게 만들지 않고도 설명 텍스트를 추가할 수 있는 간단한 해결책을 기다리고 계셨군요.\n\n드림이 꺼지지 않도록 해드리겠지만, 가능하다면 aria-description을 피하는 것을 권장합니다.\n\n버튼 비활성화, 텍스트 상자 비활성화, 텍스트 상자에 자리 표시자 사용과 같이 절대 하지 말아야 할 일들을 언급했던 것처럼 \"절대\"라고 말씀드릴 순 없지만 (이에 대한 링크는 아래에 있습니다), 적어도 제가 보기에는 aria-description의 사용 사례는 상당히 적다고 생각합니다.\n\n<div class=\"content-ad\"></div>\n\n![Thearia-descriptionattributeandwhyyoushouldavoidusingit_6](/assets/img/2024-05-01-Thearia-descriptionattributeandwhyyoushouldavoidusingit_6.png)\n\n## 위험 #1: aria-description은 비대화형 요소에서 작동하지 않습니다\n\naria-describedby, aria-label 및 aria-labelledby도 마찬가지입니다. 그러나 이것이 개발자들을 `span` 또는 `div` 요소에 사용하는 것을 막지는 못했습니다. 이러한 특성 중 하나를 AT에 작동하도록 만들려면 버튼 또는 텍스트 상자와 같은 대화형 요소 역할을 부여하고 tabindex=\"0\" 속성을 부여해야합니다.\n\n… 또는 처음부터 해야했던 것을 할 수도 있습니다: `input` 또는 `button`과 같은 기본 HTML 컨트롤을 사용하십시오. 이것은 대부분의 추측 작업을 제거합니다.\n\n<div class=\"content-ad\"></div>\n\n## 주의 #2: aria-description 값은 다른 언어로 번역되지 않습니다\n\naria-describe도 마찬가지입니다. 이것을 테스트해보세요:\n\n- 다음 URL로 이동하세요: https://a11ysupport.io/tests/html/aria/aria-description.html (무엇을 번역해야 하는지 확인하기 위해).\n- Google 번역(https://translate.google.com/)에 들어가세요.\n- 텍스트 상자에 https://a11ysupport.io/tests/html/aria/aria-description.html을 입력하세요. (절대 필요없는 placeholder/플로팅 레이블 사용 자제해주세요).\n- 영어 이외의 언어를 선택하세요 (오른쪽에 있는). 제 예시에서는 스페인어를 선택했습니다.\n- 화면 리더 (JAWS, NVDA, VoiceOver, 또는 Narrator)를 실행하고, 예시 1에 대한 텍스트 상자(\"Etiqueta de ejemplo\"라벨이 붙은)가 포커스되었을 때 읽히는 내용을 들어보세요.\n\n![이미지](/assets/img/2024-05-01-Thearia-descriptionattributeandwhyyoushouldavoidusingit_7.png)\n\n<div class=\"content-ad\"></div>\n\nNVDA에서는 \"예제 레이블 편집 오류: 78 빈칸\"이라고 읽습니다.\n\n해당 번역된 텍스트 상자의 마크업은 다음과 같습니다 (관련 없는 부분은 제거했습니다):\n\n```js\n<label for=\"target\">\n예제 레이블\n</label>\n<input id=\"target\" type=\"text\"\naria-description=\"error: 78\">\n```\n\n그래서, Google 번역은 텍스트 상자의 레이블을 스페인어로 변경했지만 aria-description 값은 변경하지 않았습니다. 다시 말하지만, aria-describedby에서도 동일한 일이 발생할 것이며, 심지어 aria-label 번역도 불안정할 수 있습니다. Adrian Roselli의 \"aria-label 번역되지 않습니다\"라는 기사에서 언급한 것처럼:\n\n<div class=\"content-ad\"></div>\n\n## 위험 요소 3: 실수하기 쉽습니다\n\naria-describedby 속성 대신 aria-description을 사용하는 이점 중 하나는 aria-describedby가 일반적으로 페이지에서 보이는 요소를 참조한다는 것입니다. 페이지에 표시되는 경우 맞춤법과 문법 오류를 감지하기가 더 쉽습니다.\n\nAT 사용자에게 제공하는 텍스트가 마크업에서만 있고 페이지에 표시되지 않는 경우 실수하기 쉽습니다.\n\n## 위험 요소 4: 시각 장애가 없는 사용자가 중요한 정보를 놓칠 수 있습니다\n\n<div class=\"content-ad\"></div>\n\naria-description을 올바르게 활용하면 보조 기술을 사용하는 사용자에게 비장애인 사용자가 접근할 수 있는 동일한 유용한 정보를 제공하는 것을 의미합니다.\n\n그러나 선의를 가진 개발자는 시각이 있는 사용자에게 제공되는 정보보다 aria-description 속성에 더 많은 정보를 포함할 수 있습니다. 그 정보 중 일부는 시각이 있는 사용자에게 유용할 수 있으며, 개발자는 시각적으로 해당 정보를 페이지에 포함해야 합니다.\n\n접근성은 스크린 리더 사용자만을 위한 것이라고 가정하지 마십시오.\n\n만약 해당 정보가 모든 사용자에게 유용하다면, 모든 사람이 인지할 수 있도록 페이지에 표시해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\naria-description을 사용하는 데는 위험이 있지만, 절대 사용하지 말아야 하거나 존재해서는 안 된다는 의도는 전혀 아닙니다.\n\n책임을 지고 적절하게 사용할 수는 있지만, 이전 글에서 언급한 대로 개발자들이 기본적인 접근성 관행조차 잘못 적용하는 사례가 늘어나고 있다는 사실도 알아두어야 합니다.\n\n따라서, 개발자들이 해당 책임을 다 할 수 있는지에 대해 의문이 듭니다.\n\n<div class=\"content-ad\"></div>\n\n마지막으로, aria-description 및 기타 ARIA 속성은 마지막 수단으로 사용해야 합니다.\n\n페이지를 작고 간단하며 이해하기 쉽게 유지하세요.\n가능하다면 기본 HTML을 사용하세요.\n\n테스트하세요. 다시 테스트하세요. 보조 기술에 의존하는 사용자들과 함께 테스트하세요. 반복하세요.\n\n# 링크\n\n<div class=\"content-ad\"></div>\n\n## 기사에서 언급된 내용\n\n- WAI-ARIA 1.3\n- ARIA 작업 그룹\n- ARIA 작성 가이드\n- A11ySupport.io aria-description 테스트\n- 구글 번역\n- 에이리아-레이블 번역되지 않음 by 에이드리언 로젤리\n\n## 더 읽어볼 만한 내용\n\n- 접근성은 어려워요 — 조심스럽게 ARIA 레이블을 사용해야 합니다! by Attila Vágó\n- Aria-description: 대중 요청으로 철없는 박수가 준다 by Steve Faulkner\n- MDN WebDocs: aria-description\n\n<div class=\"content-ad\"></div>\n\n## 내 관련 기사들\n\n- 우리는 모두 웹에 부끄러워해야 합니다: WebAIM의 2023 접근성 보고서\n- 텍스트 상자에 플레이스홀더를 사용하지 말아야 하는 이유\n- 절대 버튼을 비활성화하지 마십시오 — 왜 그런가요?\n- 텍스트 상자를 비활성화하는 것: 왜 나쁜 생각이고 대신 어떻게 해야 하는지","ogImage":{"url":"/assets/img/2024-05-01-Thearia-descriptionattributeandwhyyoushouldavoidusingit_0.png"},"coverImage":"/assets/img/2024-05-01-Thearia-descriptionattributeandwhyyoushouldavoidusingit_0.png","tag":["Tech"],"readingTime":11}],"page":"150","totalPageCount":154,"totalPageGroupCount":8,"lastPageGroup":14,"currentPageGroup":7},"__N_SSG":true}