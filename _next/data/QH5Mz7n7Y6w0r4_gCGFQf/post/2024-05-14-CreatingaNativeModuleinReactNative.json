{"pageProps":{"post":{"title":"리액트 네이티브에서 네이티브 모듈 생성하기","description":"","date":"2024-05-14 11:38","slug":"2024-05-14-CreatingaNativeModuleinReactNative","content":"\n\n리액트 네이티브는 JavaScript와 React를 사용하여 모바일 앱을 개발할 수 있게 해주는 인기 있는 프레임워크입니다. 때때로 자바스크립트에서 사용할 수 없는 플랫폼별 기능에 액세스해야 할 수도 있습니다. 이때 네이티브 모듈이 필요한데, 이를 통해 iOS의 Swift나 안드로이드의 코틀린과 같은 네이티브 언어로 코드를 작성하여 사용할 수 있습니다.\n\n## 네이티브 모듈이란?\n\n네이티브 모듈은 JavaScript로 처리할 수 없는 작업을 수행할 수 있도록 해주는, 네이티브 플랫폼 언어(Swift, Kotlin 등)로 작성된 코드 조각입니다. 디바이스 하드웨어 기능에 액세스하거나 복잡한 계산을 수행하는 것 등이 그 예시에 해당합니다.\n\n## 요구 사항\n\n\n\n시작하기 전에 설치해야 할 사항들을 확인해 주세요:\n\n- Node.js와 npm\n- React Native CLI\n- Xcode (iOS 개발을 위해)\n- 안드로이드 스튜디오 (Android 개발을 위해)\n\n## 단계별 안내\n\n1. 개발 환경 설정하기\n\n\n\n우선, 아직 React Native 프로젝트를 설정하지 않았다면 다음을 따르세요:\n\n```js\nnpx react-native init MyNativeModuleProject\ncd MyNativeModuleProject\n```\n\n2. 네이티브 모듈 생성\n\niOS 및 Android 모두에서 기기 정보를 제공하는 네이티브 모듈을 생성해봅시다.\n\n\n\n안드로이드용으로:\n\n- Kotlin 파일 생성: 안드로이드 프로젝트 디렉토리로 이동하세요:\n\n```js\ncd android/app/src/main/java/com/mynativemoduleproject/\n```\n\n- 패키지 내에 DeviceInfoModule.kt라는 새로운 Kotlin 파일을 생성하세요.\n- Kotlin 파일 편집:\n\n\n\n이 네이티브 모듈의 Kotlin 코드입니다:\n\n```js\npackage com.mynativemoduleproject\n\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.ReactContextBaseJavaModule\nimport com.facebook.react.bridge.ReactMethod\nimport com.facebook.react.bridge.Promise\n\nclass DeviceInfoModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaModule(reactContext) {\n    override fun getName(): String {\n        return \"DeviceInfo\"\n    }\n\n    @ReactMethod\n    fun getDeviceInfo(promise: Promise) {\n        try {\n            val deviceInfo = mapOf(\"device\" to android.os.Build.MODEL, \"OS\" to android.os.Build.VERSION.RELEASE)\n            promise.resolve(deviceInfo)\n        } catch (e: Exception) {\n            promise.reject(\"Error\", e.localizedMessage)\n        }\n    }\n}\n```\n\n이 모듈은 기기 모델과 OS 버전을 반환합니다.\n\n시각적 표현:\n\n\n\n- 모듈 등록하기: 이 모듈을 당신의 주 애플리케이션 파일에 등록해야 합니다.\n- MainApplication.java 파일 편집하기:\n\n```js\npackage com.mynativemoduleproject;\n\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.shell.MainReactPackage;\nimport com.facebook.soloader.SoLoader;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MainApplication extends Application implements ReactApplication {\n\n    private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n        @Override\n        public boolean getUseDeveloperSupport() {\n            return BuildConfig.DEBUG;\n        }\n\n        @Override\n        protected List<ReactPackage> getPackages() {\n            return Arrays.<ReactPackage>asList(\n                new MainReactPackage(),\n                new DeviceInfoPackage()  // 여기에 패키지 등록\n            );\n        }\n\n        @Override\n        protected String getJSMainModuleName() {\n            return \"index\";\n        }\n    };\n\n    @Override\n    public ReactNativeHost getReactNativeHost() {\n        return mReactNativeHost;\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        SoLoader.init(this, /* native exopackage */ false);\n    }\n}\n```\n\niOS 경우:\n\n- Swift 파일 생성하기: Xcode에서 iOS 프로젝트 디렉토리로 이동한 후 MyDeviceInfo.swift라는 새로운 Swift 파일을 생성합니다.\n- Swift 파일 편집하기:\n\n\n\n여기 네이티브 모듈을 위한 Swift 코드가 있어요:\n\n```js\n// MyDeviceInfo.swift\nimport Foundation\nimport UIKit\n\n@objc(MyDeviceInfo)\nclass MyDeviceInfo: NSObject {\n\n  @objc\n  func getDeviceInfo(_ callback: RCTResponseSenderBlock) {\n    callback([nil, [\"device\": UIDevice.current.model, \"OS\": UIDevice.current.systemVersion]])\n  }\n\n  @objc\n  static func requiresMainQueueSetup() -> Bool {\n    return true\n  }\n}\n```\n\n이 코드 스니펫은 안드로이드 버전과 유사한 기능을 제공하여, 디바이스 모델과 OS 버전을 반환해 주는 거예요.\n\n비주얼 표현:\n\n\n\n- 모듈 등록: Bridging-Header.h 파일을 편집하여 Swift 파일이 React Native에서 보이도록 합니다:\n\n```js\n#import \"React/RCTBridgeModule.h\"\n```\n\n- JavaScript에서 네이티브 모듈 사용\n\n이제 JavaScript 코드에서 네이티브 모듈을 사용할 수 있습니다.\n\n\n\n```js\nimport React, { Component } from 'react';\nimport { View, Text, NativeModules } from 'react-native';\n\nconst { DeviceInfo } = NativeModules;\n\nclass App extends Component {\n  state = {\n    deviceInfo: {}\n  };\n\n  componentDidMount() {\n    DeviceInfo.getDeviceInfo((error, info) => {\n      if (error) {\n        console.error(error);\n      } else {\n        this.setState({ deviceInfo: info });\n      }\n    });\n  }\n\n  render() {\n    const { deviceInfo } = this.state;\n    return (\n      <View style={ flex: 1, justifyContent: 'center', alignItems: 'center' }>\n        <Text>기기 모델: {deviceInfo.device}</Text>\n        <Text>OS 버전: {deviceInfo.OS}</Text>\n      </View>\n    );\n  }\n}\n\nexport default App;\n```\n\n이 React 컴포넌트는 네이티브 모듈에서 불러온 기기 정보를 표시합니다.\n\n## 결론\n\nReact Native에서 네이티브 모듈을 생성하는 것은 플랫폼별 코드를 활용하여 앱의 기능을 확장하는 강력한 방법입니다. 이 단계를 따르면 네이티브 기능에 액세스하여 모바일 애플리케이션을 효과적으로 강화할 수 있습니다. 즐거운 코딩하세요!\n\n\n\n\n참고 : https://reactnative.dev/docs/native-modules-android","ogImage":{"url":"/assets/img/2024-05-14-CreatingaNativeModuleinReactNative_0.png"},"coverImage":"/assets/img/2024-05-14-CreatingaNativeModuleinReactNative_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>리액트 네이티브는 JavaScript와 React를 사용하여 모바일 앱을 개발할 수 있게 해주는 인기 있는 프레임워크입니다. 때때로 자바스크립트에서 사용할 수 없는 플랫폼별 기능에 액세스해야 할 수도 있습니다. 이때 네이티브 모듈이 필요한데, 이를 통해 iOS의 Swift나 안드로이드의 코틀린과 같은 네이티브 언어로 코드를 작성하여 사용할 수 있습니다.</p>\n<h2>네이티브 모듈이란?</h2>\n<p>네이티브 모듈은 JavaScript로 처리할 수 없는 작업을 수행할 수 있도록 해주는, 네이티브 플랫폼 언어(Swift, Kotlin 등)로 작성된 코드 조각입니다. 디바이스 하드웨어 기능에 액세스하거나 복잡한 계산을 수행하는 것 등이 그 예시에 해당합니다.</p>\n<h2>요구 사항</h2>\n<p>시작하기 전에 설치해야 할 사항들을 확인해 주세요:</p>\n<ul>\n<li>Node.js와 npm</li>\n<li>React Native CLI</li>\n<li>Xcode (iOS 개발을 위해)</li>\n<li>안드로이드 스튜디오 (Android 개발을 위해)</li>\n</ul>\n<h2>단계별 안내</h2>\n<ol>\n<li>개발 환경 설정하기</li>\n</ol>\n<p>우선, 아직 React Native 프로젝트를 설정하지 않았다면 다음을 따르세요:</p>\n<pre><code class=\"hljs language-js\">npx react-native init <span class=\"hljs-title class_\">MyNativeModuleProject</span>\ncd <span class=\"hljs-title class_\">MyNativeModuleProject</span>\n</code></pre>\n<ol start=\"2\">\n<li>네이티브 모듈 생성</li>\n</ol>\n<p>iOS 및 Android 모두에서 기기 정보를 제공하는 네이티브 모듈을 생성해봅시다.</p>\n<p>안드로이드용으로:</p>\n<ul>\n<li>Kotlin 파일 생성: 안드로이드 프로젝트 디렉토리로 이동하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">cd android/app/src/main/java/com/mynativemoduleproject/\n</code></pre>\n<ul>\n<li>패키지 내에 DeviceInfoModule.kt라는 새로운 Kotlin 파일을 생성하세요.</li>\n<li>Kotlin 파일 편집:</li>\n</ul>\n<p>이 네이티브 모듈의 Kotlin 코드입니다:</p>\n<pre><code class=\"hljs language-js\">package com.<span class=\"hljs-property\">mynativemoduleproject</span>\n\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">facebook</span>.<span class=\"hljs-property\">react</span>.<span class=\"hljs-property\">bridge</span>.<span class=\"hljs-property\">ReactApplicationContext</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">facebook</span>.<span class=\"hljs-property\">react</span>.<span class=\"hljs-property\">bridge</span>.<span class=\"hljs-property\">ReactContextBaseJavaModule</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">facebook</span>.<span class=\"hljs-property\">react</span>.<span class=\"hljs-property\">bridge</span>.<span class=\"hljs-property\">ReactMethod</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">facebook</span>.<span class=\"hljs-property\">react</span>.<span class=\"hljs-property\">bridge</span>.<span class=\"hljs-property\">Promise</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DeviceInfoModule</span>(<span class=\"hljs-attr\">reactContext</span>: <span class=\"hljs-title class_\">ReactApplicationContext</span>) : <span class=\"hljs-title class_\">ReactContextBaseJavaModule</span>(reactContext) {\n    override fun <span class=\"hljs-title function_\">getName</span>(): <span class=\"hljs-title class_\">String</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"DeviceInfo\"</span>\n    }\n\n    @<span class=\"hljs-title class_\">ReactMethod</span>\n    fun <span class=\"hljs-title function_\">getDeviceInfo</span>(<span class=\"hljs-params\">promise: <span class=\"hljs-built_in\">Promise</span></span>) {\n        <span class=\"hljs-keyword\">try</span> {\n            val deviceInfo = <span class=\"hljs-title function_\">mapOf</span>(<span class=\"hljs-string\">\"device\"</span> to android.<span class=\"hljs-property\">os</span>.<span class=\"hljs-property\">Build</span>.<span class=\"hljs-property\">MODEL</span>, <span class=\"hljs-string\">\"OS\"</span> to android.<span class=\"hljs-property\">os</span>.<span class=\"hljs-property\">Build</span>.<span class=\"hljs-property\">VERSION</span>.<span class=\"hljs-property\">RELEASE</span>)\n            promise.<span class=\"hljs-title function_\">resolve</span>(deviceInfo)\n        } <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-attr\">e</span>: <span class=\"hljs-title class_\">Exception</span>) {\n            promise.<span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-string\">\"Error\"</span>, e.<span class=\"hljs-property\">localizedMessage</span>)\n        }\n    }\n}\n</code></pre>\n<p>이 모듈은 기기 모델과 OS 버전을 반환합니다.</p>\n<p>시각적 표현:</p>\n<ul>\n<li>모듈 등록하기: 이 모듈을 당신의 주 애플리케이션 파일에 등록해야 합니다.</li>\n<li>MainApplication.java 파일 편집하기:</li>\n</ul>\n<pre><code class=\"hljs language-js\">package com.<span class=\"hljs-property\">mynativemoduleproject</span>;\n\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">facebook</span>.<span class=\"hljs-property\">react</span>.<span class=\"hljs-property\">ReactPackage</span>;\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">facebook</span>.<span class=\"hljs-property\">react</span>.<span class=\"hljs-property\">shell</span>.<span class=\"hljs-property\">MainReactPackage</span>;\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">facebook</span>.<span class=\"hljs-property\">soloader</span>.<span class=\"hljs-property\">SoLoader</span>;\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Arrays</span>;\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">List</span>;\n\npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MainApplication</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Application</span> implements <span class=\"hljs-title class_\">ReactApplication</span> {\n\n    private final <span class=\"hljs-title class_\">ReactNativeHost</span> mReactNativeHost = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ReactNativeHost</span>(<span class=\"hljs-variable language_\">this</span>) {\n        @<span class=\"hljs-title class_\">Override</span>\n        public boolean <span class=\"hljs-title function_\">getUseDeveloperSupport</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">BuildConfig</span>.<span class=\"hljs-property\">DEBUG</span>;\n        }\n\n        @<span class=\"hljs-title class_\">Override</span>\n        protected <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">ReactPackage</span>> <span class=\"hljs-title function_\">getPackages</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Arrays</span>.&#x3C;<span class=\"hljs-title class_\">ReactPackage</span>><span class=\"hljs-title function_\">asList</span>(\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MainReactPackage</span>(),\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeviceInfoPackage</span>()  <span class=\"hljs-comment\">// 여기에 패키지 등록</span>\n            );\n        }\n\n        @<span class=\"hljs-title class_\">Override</span>\n        protected <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getJSMainModuleName</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"index\"</span>;\n        }\n    };\n\n    @<span class=\"hljs-title class_\">Override</span>\n    public <span class=\"hljs-title class_\">ReactNativeHost</span> <span class=\"hljs-title function_\">getReactNativeHost</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">return</span> mReactNativeHost;\n    }\n\n    @<span class=\"hljs-title class_\">Override</span>\n    public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onCreate</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">onCreate</span>();\n        <span class=\"hljs-title class_\">SoLoader</span>.<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-comment\">/* native exopackage */</span> <span class=\"hljs-literal\">false</span>);\n    }\n}\n</code></pre>\n<p>iOS 경우:</p>\n<ul>\n<li>Swift 파일 생성하기: Xcode에서 iOS 프로젝트 디렉토리로 이동한 후 MyDeviceInfo.swift라는 새로운 Swift 파일을 생성합니다.</li>\n<li>Swift 파일 편집하기:</li>\n</ul>\n<p>여기 네이티브 모듈을 위한 Swift 코드가 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// MyDeviceInfo.swift</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Foundation</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">UIKit</span>\n\n@<span class=\"hljs-title function_\">objc</span>(<span class=\"hljs-title class_\">MyDeviceInfo</span>)\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyDeviceInfo</span>: <span class=\"hljs-title class_\">NSObject</span> {\n\n  @objc\n  func <span class=\"hljs-title function_\">getDeviceInfo</span>(<span class=\"hljs-params\">_ callback: RCTResponseSenderBlock</span>) {\n    <span class=\"hljs-title function_\">callback</span>([nil, [<span class=\"hljs-string\">\"device\"</span>: <span class=\"hljs-title class_\">UIDevice</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">model</span>, <span class=\"hljs-string\">\"OS\"</span>: <span class=\"hljs-title class_\">UIDevice</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">systemVersion</span>]])\n  }\n\n  @objc\n  <span class=\"hljs-keyword\">static</span> func requiresMainQueueSetup() -> <span class=\"hljs-title class_\">Bool</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n}\n</code></pre>\n<p>이 코드 스니펫은 안드로이드 버전과 유사한 기능을 제공하여, 디바이스 모델과 OS 버전을 반환해 주는 거예요.</p>\n<p>비주얼 표현:</p>\n<ul>\n<li>모듈 등록: Bridging-Header.h 파일을 편집하여 Swift 파일이 React Native에서 보이도록 합니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\">#<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"React/RCTBridgeModule.h\"</span>\n</code></pre>\n<ul>\n<li>JavaScript에서 네이티브 모듈 사용</li>\n</ul>\n<p>이제 JavaScript 코드에서 네이티브 모듈을 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">View</span>, <span class=\"hljs-title class_\">Text</span>, <span class=\"hljs-title class_\">NativeModules</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">DeviceInfo</span> } = <span class=\"hljs-title class_\">NativeModules</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> {\n  state = {\n    <span class=\"hljs-attr\">deviceInfo</span>: {}\n  };\n\n  <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title class_\">DeviceInfo</span>.<span class=\"hljs-title function_\">getDeviceInfo</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error, info</span>) =></span> {\n      <span class=\"hljs-keyword\">if</span> (error) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({ <span class=\"hljs-attr\">deviceInfo</span>: info });\n      }\n    });\n  }\n\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> { deviceInfo } = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">View</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">flex:</span> <span class=\"hljs-attr\">1</span>, <span class=\"hljs-attr\">justifyContent:</span> '<span class=\"hljs-attr\">center</span>', <span class=\"hljs-attr\">alignItems:</span> '<span class=\"hljs-attr\">center</span>' }></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Text</span>></span>기기 모델: {deviceInfo.device}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Text</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Text</span>></span>OS 버전: {deviceInfo.OS}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Text</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">View</span>></span></span>\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>이 React 컴포넌트는 네이티브 모듈에서 불러온 기기 정보를 표시합니다.</p>\n<h2>결론</h2>\n<p>React Native에서 네이티브 모듈을 생성하는 것은 플랫폼별 코드를 활용하여 앱의 기능을 확장하는 강력한 방법입니다. 이 단계를 따르면 네이티브 기능에 액세스하여 모바일 애플리케이션을 효과적으로 강화할 수 있습니다. 즐거운 코딩하세요!</p>\n<p>참고 : <a href=\"https://reactnative.dev/docs/native-modules-android\" rel=\"nofollow\" target=\"_blank\">https://reactnative.dev/docs/native-modules-android</a></p>\n</body>\n</html>\n"},"__N_SSG":true}