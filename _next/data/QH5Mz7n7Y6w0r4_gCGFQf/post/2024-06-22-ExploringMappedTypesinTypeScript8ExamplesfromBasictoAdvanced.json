{"pageProps":{"post":{"title":"TypeScript의 매핑된 타입 알아보기 기초부터 고급까지 8가지 예제","description":"","date":"2024-06-22 14:45","slug":"2024-06-22-ExploringMappedTypesinTypeScript8ExamplesfromBasictoAdvanced","content":"\n\n**Mapped types**는 TypeScript에서 한 타입의 속성을 다른 타입으로 변환하는 강력한 도구입니다. 이것들은 `map` 및 `filter`와 같은 배열 메서드와 유사하지만, 이러한 작업은 타입에 대해 수행됩니다. 실용적인 예제를 통해 그 사용법을 이해할 것이고, 이어서 기초부터 고급까지 점진적으로 8가지 Mapped type 예제를 보여드릴 것입니다. 이를 통해 이 강력한 타입 변환 도구를 손쉽게 마스터할 수 있을 거예요.\n\n# I. 기초적인 타입 변환\n\nTypeScript에서 때로는 한 타입의 속성을 다른 타입으로 변환해야할 때가 있습니다. 이것은 Mapped types을 사용하여 쉽게 달성할 수 있습니다. 아래에서 한 Product 타입의 속성을 문자열 타입으로 변환하는 방법을 구체적인 예제를 통해 보여드겠습니다.\n\n<div class=\"content-ad\"></div>\n\n## 1. 제품 유형 정의\n\n먼저, 세 가지 속성인 name(문자열 유형), price(숫자 유형), inStock(부울 유형)을 포함하는 Product 유형을 정의합니다.\n\n```js\ntype Product = {\n    name: string;\n    price: number;\n    inStock: boolean;\n};\n```\n\n## 2. ProductToString 유형 정의\n\n<div class=\"content-ad\"></div>\n\n다음으로, 우리는 모든 Product 형식의 속성을 문자열 형식으로 변환하는 새로운 형식 ProductToString을 정의합니다.\n\n```js\ntype ProductToString = {\n    [Key in keyof Product]: string;\n};\n```\n\n## 3. 결과 형식\n\n마지막으로, 결과 ProductToString 형식은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```typescript\ntype ProductToString = {\n    name: string;\n    price: string;\n    inStock: string;\n};\n```\n\n## II. Making Type Properties Optional\n\nTypeScript에서 종종 유형의 모든 속성을 선택적으로 만들어야 합니다. 일반적으로는 내장된 Partial 유틸리티 유형을 사용하여 이것을 달성하지만, 매핑된 유형을 사용하여 동일한 효과를 얻을 수도 있습니다.\n\n### 1. 제품 유형 정의\n\n<div class=\"content-ad\"></div>\n\n```js\ntype Product = {\n    name: string;\n    price: number;\n    inStock: boolean;\n};\n```\n\n## 2. Use Mapped Types to Make Properties Optional\n\n```js\ntype ProductToOptional = {\n    [Key in keyof Product]?: Product[Key];\n};\n```\n\n## 3. Resulting Type\n\n<div class=\"content-ad\"></div>\n\n```js\ntype ProductToOptional = {\n    name?: string;\n    price?: number;\n    inStock?: boolean;\n};\n```\n\n# III. Making Optional Properties Required\n\nIn TypeScript, sometimes we need to convert all optional properties of a type into required properties. This can be easily achieved using mapped types.\n\n## 1. Define Product Type\n\n\n<div class=\"content-ad\"></div>\n\n```js\n종류 Product = {\n    name?: string;\n    price?: number;\n    inStock?: boolean;\n};\n```\n\n## 2. ProductToRequired 유형 정의\n\n```js\n유형 ProductToRequired = {\n    [Key in keyof Product]-?: Product[Key];\n};\n```\n\n## 3. 결과 유형\n\n\n<div class=\"content-ad\"></div>\n\n```js\ntype ProductToRequired = {\n    name: string;\n    price: number;\n    inStock: boolean;\n};\n```\n\n# IV. Making Properties Read-Only\n\nIn TypeScript, sometimes we need to make all properties of a type read-only. This can be easily achieved using mapped types.\n\n## 1. Define Product Type\n\n<div class=\"content-ad\"></div>\n\n\n## 2. Define ProductToReadonly Type\n\n```js\ntype ProductToReadonly = {\n    readonly [Key in keyof Product]: Product[Key];\n};\n```\n\n## 3. Resulting Type\n\n\n<div class=\"content-ad\"></div>\n\n```js\ntype ProductToReadonly = {\n    readonly name: string;\n    readonly price: number;\n    readonly inStock: boolean;\n};\n```\n\n## V. Removing Certain Properties\n\nTypeScript에서 때로는 유형에서 특정 속성을 제거해야 하는 경우가 있습니다. 일반적으로 내장된 Omit 유틸리티 유형을 사용하여 이를 달성하지만, 매핑된 유형을 사용하여 동일한 효과를 얻을 수도 있습니다.\n\n### 1. Product 유형 정의\n\n<div class=\"content-ad\"></div>\n\n```js\ntype Product = {\n    name: string;\n    price: number;\n    inStock: boolean;\n};\n```\n\n## 2. Use Mapped Types to Remove Properties\n\n```js\ntype ProductWithoutPrice = {\n    [Key in keyof Product as Key extends 'price' ? never : Key]: Product[Key];\n};\n```\n\n## 3. Resulting Type\n\n\n<div class=\"content-ad\"></div>\n\n```js\n타입 ProductWithoutPrice = {\n    name: string;\n    inStock: boolean;\n};\n```\n\n# VI. 특정 속성 유형만 있는 유형 생성\n\nTypeScript에서 조건부 타입을 사용하여 특정 유형의 속성만 포함된 새로운 타입을 생성할 수 있습니다.\n\n## 1. 제품 유형 정의하기\n\n\n<div class=\"content-ad\"></div>\n\n```typescript\ntype Product = {\n    name: string;\n    price: number;\n    inStock: boolean;\n    tags: string[];\n};\n```\n\n## 2. Define OnlyStringProperties Type\n\n```typescript\ntype OnlyStringProperties<Type> = {\n    [Key in keyof Type as Type[Key] extends string ? Key : never]: Type[Key];\n};\n```\n\n## 3. Use OnlyStringProperties\n\n\n<div class=\"content-ad\"></div>\n\n```js\n유형 ProductOnlyStringProperties = OnlyStringProperties<Product>;\n```\n\n## 4. 결과 유형\n\n```js\n유형 ProductOnlyStringProperties = {\n    이름: 문자열;\n};\n```\n\n# VII. 템플릿 리터럴 유형을 사용하여 새로운 속성 이름 생성하기\n\n<div class=\"content-ad\"></div>\n\nTypeScript에서는 템플릿 리터럴 타입을 사용하여 특정 접두사와 대문자로 시작하는 속성 이름을 가진 새로운 타입을 생성할 수 있습니다.\n\n## 1. 제품 타입 정의\n\n```js\ntype Product = {\n    name: string;\n    price: number;\n    inStock: boolean;\n};\n```\n\n## 2. 접두사가 포함된 속성을 가진 타입 생성\n\n<div class=\"content-ad\"></div>\n\nTypeScript에서는 템플릿 리터럴 타입을 사용하여 get로 접두사가 붙은 속성 이름을 가진 새로운 타입을 생성할 수 있어요.\n\n```js\ntype Getters<Type> = {\n    [Key in keyof Type as `get${Capitalize<string & Key>}`]: () => Type[Key];\n};\n```\n\n## 3. Getters 사용하기\n\n```js\ntype ProductGetters = Getters<Product>;\n```\n\n<div class=\"content-ad\"></div>\n\n## 4. 결과 타입\n\n```js\ntype ProductGetters = {\n    getName: () => string;\n    getPrice: () => number;\n    getInStock: () => boolean;\n};\n```\n\n# VIII. 조건에 따른 중첩 Mapped 타입\n\nTypeScript에서 Mapped 타입과 조건부 타입을 결합하여 더 복잡한 타입 변환 로직을 만들 수 있습니다. 예를 들어, 속성의 타입에 따라 다른 중첩 타입 구조를 생성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 1. 중첩된 객체 유형 정의\n\n먼저, 중첩된 객체를 포함한 다양한 유형의 속성을 포함하는 `NestedObject` 유형을 정의합니다.\n\n```js\ntype NestedObject = {\n    id: number;\n    name: string;\n    metadata: {\n        createdAt: Date;\n        updatedAt: Date;\n    };\n    tags: string[];\n};\n```\n\n## 2. DeepReadonly 유형 정의\n\n<div class=\"content-ad\"></div>\n\n다음으로, 모든 속성을 읽기 전용으로 변환하는 DeepReadonly 타입을 정의합니다. 이는 중첩된 객체의 속성도 포함됩니다.\n\n```js\ntype DeepReadonly<T> = {\n    readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];\n};\n```\n\n이 정의에서 T[P] extends object은 속성 타입이 객체인지 확인하기 위해 사용됩니다. 만약 객체인 경우, DeepReadonly가 재귀적으로 적용되며, 그렇지 않은 경우 속성이 읽기 전용으로 설정됩니다. \n\n## 3. DeepReadonly 타입 사용하기\n\n<div class=\"content-ad\"></div>\n\n딥 읽기 전용을 사용하여 NestedObject의 심층적으로 읽기 전용 버전인 ReadonlyNestedObject를 정의할 수 있습니다.\n\n```js\ntype ReadonlyNestedObject = DeepReadonly<NestedObject>;\n```\n\n## 4. 결과 타입\n\n마지막으로, 결과로 나오는 ReadonlyNestedObject 타입은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n유형 ReadonlyNestedObject = {\n    readonly id: number;\n    readonly name: string;\n    readonly metadata: {\n        readonly createdAt: Date;\n        readonly updatedAt: Date;\n    };\n    readonly tags: readonly string[];\n};\n```\n\n## 5. 사용 예시\n\n```js\nconst readonlyNestedObject: ReadonlyNestedObject = {\n    id: 1,\n    name: \"예시\",\n    metadata: {\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    tags: [\"타입스크립트\", \"프로그래밍\"]\n};\n\n// readonlyNestedObject.id = 2; // 오류: 'id'는 읽기 전용 속성이기 때문에 할당할 수 없습니다.\n// readonlyNestedObject.metadata.createdAt = new Date(); // 오류: 'createdAt'는 읽기 전용 속성이기 때문에 할당할 수 없습니다.\n```\n\nTypeScript의 매핑된 유형은 다양한 복잡한 유형 변환을 달성할 수 있는 매우 강력한 기능입니다. 이를 사용하여 다음을 수행할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n- 속성 변환: 타입 내 기존 속성의 유형을 변경합니다.\n- 속성 추가 또는 제거: 새로운 속성을 추가하거나 기존 속성을 제거합니다.\n- 옵션 및 읽기 전용 상태 제어: 속성을 옵션으로 만들거나 읽기 전용으로 설정합니다.\n- 동적 타입 생성: 조건형 타입과 템플릿 리터럴 타입을 사용하여 새로운 타입을 구성합니다. (예: 게터와 세터 생성과 같은 고급 시나리오에 적합)\n\nPartial, Readonly, Omit과 같은 내장 유틸리티 타입은 편리한 단축키를 제공하지만, 매핑된 타입은 타입에 대한 깊은 이해와 정밀한 제어를 제공합니다.\n\n이 기술을 더 잘 이해하고 코드를 더 깔끔하고 예측 가능하며 유지 보수가 쉬운 상태로 만들기를 바라며, 이 글이 도움이 되기를 바랍니다.","ogImage":{"url":"/assets/img/2024-06-22-ExploringMappedTypesinTypeScript8ExamplesfromBasictoAdvanced_0.png"},"coverImage":"/assets/img/2024-06-22-ExploringMappedTypesinTypeScript8ExamplesfromBasictoAdvanced_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><strong>Mapped types</strong>는 TypeScript에서 한 타입의 속성을 다른 타입으로 변환하는 강력한 도구입니다. 이것들은 <code>map</code> 및 <code>filter</code>와 같은 배열 메서드와 유사하지만, 이러한 작업은 타입에 대해 수행됩니다. 실용적인 예제를 통해 그 사용법을 이해할 것이고, 이어서 기초부터 고급까지 점진적으로 8가지 Mapped type 예제를 보여드릴 것입니다. 이를 통해 이 강력한 타입 변환 도구를 손쉽게 마스터할 수 있을 거예요.</p>\n<h1>I. 기초적인 타입 변환</h1>\n<p>TypeScript에서 때로는 한 타입의 속성을 다른 타입으로 변환해야할 때가 있습니다. 이것은 Mapped types을 사용하여 쉽게 달성할 수 있습니다. 아래에서 한 Product 타입의 속성을 문자열 타입으로 변환하는 방법을 구체적인 예제를 통해 보여드겠습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>1. 제품 유형 정의</h2>\n<p>먼저, 세 가지 속성인 name(문자열 유형), price(숫자 유형), inStock(부울 유형)을 포함하는 Product 유형을 정의합니다.</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">Product</span> = {\n    <span class=\"hljs-attr\">name</span>: string;\n    <span class=\"hljs-attr\">price</span>: number;\n    <span class=\"hljs-attr\">inStock</span>: boolean;\n};\n</code></pre>\n<h2>2. ProductToString 유형 정의</h2>\n<div class=\"content-ad\"></div>\n<p>다음으로, 우리는 모든 Product 형식의 속성을 문자열 형식으로 변환하는 새로운 형식 ProductToString을 정의합니다.</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">ProductToString</span> = {\n    [<span class=\"hljs-title class_\">Key</span> <span class=\"hljs-keyword\">in</span> keyof <span class=\"hljs-title class_\">Product</span>]: string;\n};\n</code></pre>\n<h2>3. 결과 형식</h2>\n<p>마지막으로, 결과 ProductToString 형식은 다음과 같습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">ProductToString</span> = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">inStock</span>: <span class=\"hljs-built_in\">string</span>;\n};\n</code></pre>\n<h2>II. Making Type Properties Optional</h2>\n<p>TypeScript에서 종종 유형의 모든 속성을 선택적으로 만들어야 합니다. 일반적으로는 내장된 Partial 유틸리티 유형을 사용하여 이것을 달성하지만, 매핑된 유형을 사용하여 동일한 효과를 얻을 수도 있습니다.</p>\n<h3>1. 제품 유형 정의</h3>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">Product</span> = {\n    <span class=\"hljs-attr\">name</span>: string;\n    <span class=\"hljs-attr\">price</span>: number;\n    <span class=\"hljs-attr\">inStock</span>: boolean;\n};\n</code></pre>\n<h2>2. Use Mapped Types to Make Properties Optional</h2>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">ProductToOptional</span> = {\n    [<span class=\"hljs-title class_\">Key</span> <span class=\"hljs-keyword\">in</span> keyof <span class=\"hljs-title class_\">Product</span>]?: <span class=\"hljs-title class_\">Product</span>[<span class=\"hljs-title class_\">Key</span>];\n};\n</code></pre>\n<h2>3. Resulting Type</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">ProductToOptional</span> = {\n    name?: string;\n    price?: number;\n    inStock?: boolean;\n};\n</code></pre>\n<h1>III. Making Optional Properties Required</h1>\n<p>In TypeScript, sometimes we need to convert all optional properties of a type into required properties. This can be easily achieved using mapped types.</p>\n<h2>1. Define Product Type</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">종류 <span class=\"hljs-title class_\">Product</span> = {\n    name?: string;\n    price?: number;\n    inStock?: boolean;\n};\n</code></pre>\n<h2>2. ProductToRequired 유형 정의</h2>\n<pre><code class=\"hljs language-js\">유형 <span class=\"hljs-title class_\">ProductToRequired</span> = {\n    [<span class=\"hljs-title class_\">Key</span> <span class=\"hljs-keyword\">in</span> keyof <span class=\"hljs-title class_\">Product</span>]-?: <span class=\"hljs-title class_\">Product</span>[<span class=\"hljs-title class_\">Key</span>];\n};\n</code></pre>\n<h2>3. 결과 유형</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">ProductToRequired</span> = {\n    <span class=\"hljs-attr\">name</span>: string;\n    <span class=\"hljs-attr\">price</span>: number;\n    <span class=\"hljs-attr\">inStock</span>: boolean;\n};\n</code></pre>\n<h1>IV. Making Properties Read-Only</h1>\n<p>In TypeScript, sometimes we need to make all properties of a type read-only. This can be easily achieved using mapped types.</p>\n<h2>1. Define Product Type</h2>\n<div class=\"content-ad\"></div>\n<h2>2. Define ProductToReadonly Type</h2>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">ProductToReadonly</span> = {\n    readonly [<span class=\"hljs-title class_\">Key</span> <span class=\"hljs-keyword\">in</span> keyof <span class=\"hljs-title class_\">Product</span>]: <span class=\"hljs-title class_\">Product</span>[<span class=\"hljs-title class_\">Key</span>];\n};\n</code></pre>\n<h2>3. Resulting Type</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">ProductToReadonly</span> = {\n    readonly <span class=\"hljs-attr\">name</span>: string;\n    readonly <span class=\"hljs-attr\">price</span>: number;\n    readonly <span class=\"hljs-attr\">inStock</span>: boolean;\n};\n</code></pre>\n<h2>V. Removing Certain Properties</h2>\n<p>TypeScript에서 때로는 유형에서 특정 속성을 제거해야 하는 경우가 있습니다. 일반적으로 내장된 Omit 유틸리티 유형을 사용하여 이를 달성하지만, 매핑된 유형을 사용하여 동일한 효과를 얻을 수도 있습니다.</p>\n<h3>1. Product 유형 정의</h3>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">Product</span> = {\n    <span class=\"hljs-attr\">name</span>: string;\n    <span class=\"hljs-attr\">price</span>: number;\n    <span class=\"hljs-attr\">inStock</span>: boolean;\n};\n</code></pre>\n<h2>2. Use Mapped Types to Remove Properties</h2>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">ProductWithoutPrice</span> = {\n    [<span class=\"hljs-title class_\">Key</span> <span class=\"hljs-keyword\">in</span> keyof <span class=\"hljs-title class_\">Product</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Key</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-string\">'price'</span> ? never : <span class=\"hljs-title class_\">Key</span>]: <span class=\"hljs-title class_\">Product</span>[<span class=\"hljs-title class_\">Key</span>];\n};\n</code></pre>\n<h2>3. Resulting Type</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">타입 <span class=\"hljs-title class_\">ProductWithoutPrice</span> = {\n    <span class=\"hljs-attr\">name</span>: string;\n    <span class=\"hljs-attr\">inStock</span>: boolean;\n};\n</code></pre>\n<h1>VI. 특정 속성 유형만 있는 유형 생성</h1>\n<p>TypeScript에서 조건부 타입을 사용하여 특정 유형의 속성만 포함된 새로운 타입을 생성할 수 있습니다.</p>\n<h2>1. 제품 유형 정의하기</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Product</span> = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">number</span>;\n    <span class=\"hljs-attr\">inStock</span>: <span class=\"hljs-built_in\">boolean</span>;\n    <span class=\"hljs-attr\">tags</span>: <span class=\"hljs-built_in\">string</span>[];\n};\n</code></pre>\n<h2>2. Define OnlyStringProperties Type</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">OnlyStringProperties</span>&#x3C;<span class=\"hljs-title class_\">Type</span>> = {\n    [<span class=\"hljs-title class_\">Key</span> <span class=\"hljs-keyword\">in</span> keyof <span class=\"hljs-title class_\">Type</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Type</span>[<span class=\"hljs-title class_\">Key</span>] <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">string</span> ? <span class=\"hljs-title class_\">Key</span> : <span class=\"hljs-built_in\">never</span>]: <span class=\"hljs-title class_\">Type</span>[<span class=\"hljs-title class_\">Key</span>];\n};\n</code></pre>\n<h2>3. Use OnlyStringProperties</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">유형 <span class=\"hljs-title class_\">ProductOnlyStringProperties</span> = <span class=\"hljs-title class_\">OnlyStringProperties</span>&#x3C;<span class=\"hljs-title class_\">Product</span>>;\n</code></pre>\n<h2>4. 결과 유형</h2>\n<pre><code class=\"hljs language-js\">유형 <span class=\"hljs-title class_\">ProductOnlyStringProperties</span> = {\n    이름: 문자열;\n};\n</code></pre>\n<h1>VII. 템플릿 리터럴 유형을 사용하여 새로운 속성 이름 생성하기</h1>\n<div class=\"content-ad\"></div>\n<p>TypeScript에서는 템플릿 리터럴 타입을 사용하여 특정 접두사와 대문자로 시작하는 속성 이름을 가진 새로운 타입을 생성할 수 있습니다.</p>\n<h2>1. 제품 타입 정의</h2>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">Product</span> = {\n    <span class=\"hljs-attr\">name</span>: string;\n    <span class=\"hljs-attr\">price</span>: number;\n    <span class=\"hljs-attr\">inStock</span>: boolean;\n};\n</code></pre>\n<h2>2. 접두사가 포함된 속성을 가진 타입 생성</h2>\n<div class=\"content-ad\"></div>\n<p>TypeScript에서는 템플릿 리터럴 타입을 사용하여 get로 접두사가 붙은 속성 이름을 가진 새로운 타입을 생성할 수 있어요.</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">Getters</span>&#x3C;<span class=\"hljs-title class_\">Type</span>> = {\n    [<span class=\"hljs-title class_\">Key</span> <span class=\"hljs-keyword\">in</span> keyof <span class=\"hljs-title class_\">Type</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">`get<span class=\"hljs-subst\">${Capitalize&#x3C;string &#x26; Key>}</span>`</span>]: <span class=\"hljs-function\">() =></span> <span class=\"hljs-title class_\">Type</span>[<span class=\"hljs-title class_\">Key</span>];\n};\n</code></pre>\n<h2>3. Getters 사용하기</h2>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">ProductGetters</span> = <span class=\"hljs-title class_\">Getters</span>&#x3C;<span class=\"hljs-title class_\">Product</span>>;\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>4. 결과 타입</h2>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">ProductGetters</span> = {\n    <span class=\"hljs-attr\">getName</span>: <span class=\"hljs-function\">() =></span> string;\n    <span class=\"hljs-attr\">getPrice</span>: <span class=\"hljs-function\">() =></span> number;\n    <span class=\"hljs-attr\">getInStock</span>: <span class=\"hljs-function\">() =></span> boolean;\n};\n</code></pre>\n<h1>VIII. 조건에 따른 중첩 Mapped 타입</h1>\n<p>TypeScript에서 Mapped 타입과 조건부 타입을 결합하여 더 복잡한 타입 변환 로직을 만들 수 있습니다. 예를 들어, 속성의 타입에 따라 다른 중첩 타입 구조를 생성할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>1. 중첩된 객체 유형 정의</h2>\n<p>먼저, 중첩된 객체를 포함한 다양한 유형의 속성을 포함하는 <code>NestedObject</code> 유형을 정의합니다.</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">NestedObject</span> = {\n    <span class=\"hljs-attr\">id</span>: number;\n    <span class=\"hljs-attr\">name</span>: string;\n    <span class=\"hljs-attr\">metadata</span>: {\n        <span class=\"hljs-attr\">createdAt</span>: <span class=\"hljs-title class_\">Date</span>;\n        <span class=\"hljs-attr\">updatedAt</span>: <span class=\"hljs-title class_\">Date</span>;\n    };\n    <span class=\"hljs-attr\">tags</span>: string[];\n};\n</code></pre>\n<h2>2. DeepReadonly 유형 정의</h2>\n<div class=\"content-ad\"></div>\n<p>다음으로, 모든 속성을 읽기 전용으로 변환하는 DeepReadonly 타입을 정의합니다. 이는 중첩된 객체의 속성도 포함됩니다.</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">DeepReadonly</span>&#x3C;T> = {\n    readonly [P <span class=\"hljs-keyword\">in</span> keyof T]: T[P] <span class=\"hljs-keyword\">extends</span> object ? <span class=\"hljs-title class_\">DeepReadonly</span>&#x3C;T[P]> : T[P];\n};\n</code></pre>\n<p>이 정의에서 T[P] extends object은 속성 타입이 객체인지 확인하기 위해 사용됩니다. 만약 객체인 경우, DeepReadonly가 재귀적으로 적용되며, 그렇지 않은 경우 속성이 읽기 전용으로 설정됩니다.</p>\n<h2>3. DeepReadonly 타입 사용하기</h2>\n<div class=\"content-ad\"></div>\n<p>딥 읽기 전용을 사용하여 NestedObject의 심층적으로 읽기 전용 버전인 ReadonlyNestedObject를 정의할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">ReadonlyNestedObject</span> = <span class=\"hljs-title class_\">DeepReadonly</span>&#x3C;<span class=\"hljs-title class_\">NestedObject</span>>;\n</code></pre>\n<h2>4. 결과 타입</h2>\n<p>마지막으로, 결과로 나오는 ReadonlyNestedObject 타입은 다음과 같습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">유형 <span class=\"hljs-title class_\">ReadonlyNestedObject</span> = {\n    readonly <span class=\"hljs-attr\">id</span>: number;\n    readonly <span class=\"hljs-attr\">name</span>: string;\n    readonly <span class=\"hljs-attr\">metadata</span>: {\n        readonly <span class=\"hljs-attr\">createdAt</span>: <span class=\"hljs-title class_\">Date</span>;\n        readonly <span class=\"hljs-attr\">updatedAt</span>: <span class=\"hljs-title class_\">Date</span>;\n    };\n    readonly <span class=\"hljs-attr\">tags</span>: readonly string[];\n};\n</code></pre>\n<h2>5. 사용 예시</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">readonlyNestedObject</span>: <span class=\"hljs-title class_\">ReadonlyNestedObject</span> = {\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"예시\"</span>,\n    <span class=\"hljs-attr\">metadata</span>: {\n        <span class=\"hljs-attr\">createdAt</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(),\n        <span class=\"hljs-attr\">updatedAt</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()\n    },\n    <span class=\"hljs-attr\">tags</span>: [<span class=\"hljs-string\">\"타입스크립트\"</span>, <span class=\"hljs-string\">\"프로그래밍\"</span>]\n};\n\n<span class=\"hljs-comment\">// readonlyNestedObject.id = 2; // 오류: 'id'는 읽기 전용 속성이기 때문에 할당할 수 없습니다.</span>\n<span class=\"hljs-comment\">// readonlyNestedObject.metadata.createdAt = new Date(); // 오류: 'createdAt'는 읽기 전용 속성이기 때문에 할당할 수 없습니다.</span>\n</code></pre>\n<p>TypeScript의 매핑된 유형은 다양한 복잡한 유형 변환을 달성할 수 있는 매우 강력한 기능입니다. 이를 사용하여 다음을 수행할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>속성 변환: 타입 내 기존 속성의 유형을 변경합니다.</li>\n<li>속성 추가 또는 제거: 새로운 속성을 추가하거나 기존 속성을 제거합니다.</li>\n<li>옵션 및 읽기 전용 상태 제어: 속성을 옵션으로 만들거나 읽기 전용으로 설정합니다.</li>\n<li>동적 타입 생성: 조건형 타입과 템플릿 리터럴 타입을 사용하여 새로운 타입을 구성합니다. (예: 게터와 세터 생성과 같은 고급 시나리오에 적합)</li>\n</ul>\n<p>Partial, Readonly, Omit과 같은 내장 유틸리티 타입은 편리한 단축키를 제공하지만, 매핑된 타입은 타입에 대한 깊은 이해와 정밀한 제어를 제공합니다.</p>\n<p>이 기술을 더 잘 이해하고 코드를 더 깔끔하고 예측 가능하며 유지 보수가 쉬운 상태로 만들기를 바라며, 이 글이 도움이 되기를 바랍니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}