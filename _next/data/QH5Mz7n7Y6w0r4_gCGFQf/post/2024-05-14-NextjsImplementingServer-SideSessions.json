{"pageProps":{"post":{"title":"서버 측 세션 구현하기 - Nextjs","description":"","date":"2024-05-14 10:50","slug":"2024-05-14-NextjsImplementingServer-SideSessions","content":"\n\n<img src=\"/assets/img/2024-05-14-NextjsImplementingServer-SideSessions_0.png\" />\n\n# 단계 1: 서버 측 세션 구현하기\n\n먼저 세션 관리 시스템을 설정하세요. 일반적으로 세션을 생성하고 유효성을 검사하며, 세션 정보를 안전한 HTTP-only 쿠키에 저장하는 과정을 포함합니다.\n\n## API 라우트에서의 세션 관리\n\n\n\nAPI 라우트(app/routes/api/)에서 세션을 관리할 수 있습니다. 예를 들어, 로그인 라우트에서는 사용자를 인증하고 세션을 생성한 후 세션 쿠키를 설정할 수 있습니다.\n\n```js\n// app/routes/api/login.ts\n\nimport { createSession, getUser } from '@/lib/auth'; // 이 함수들을 구현하세요\nimport type { NextApiRequest, NextApiResponse } from 'next';\n\nexport default async function login(req: NextApiRequest, res: NextApiResponse) {\n  const user = await getUser(req.body.username, req.body.password); // 사용자 인증\n  if (!user) {\n    return res.status(401).json({ error: '유효하지 않은 자격 증명' });\n  }\n\n  const sessionId = await createSession(user.id); // 세션 생성\n  res.setHeader('Set-Cookie', `sessionId=${sessionId}; HttpOnly; Path=/; SameSite=Lax`);\n  res.status(200).json({ message: '성공' });\n}\n```\n\n# 단계 2: App Router 미들웨어를 사용한 리디렉션\n\nApp Router 미들웨어를 사용하여 요청을 가로채고 세션 상태를 기반으로 로직을 구현할 수 있습니다.\n\n\n\n## 미들웨어 예시\n\n세션 유효성 검사와 리다이렉션을 처리하는 미들웨어 파일(e.g., app/middleware.ts)을 생성하세요.\n\n```js\n// app/middleware.ts\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getSession } from '@/lib/session'; // 이 함수 구현 필요\n\nexport async function middleware(req: NextRequest) {\n  const session = await getSession(req.cookies.sessionId); // 세션 유효성 검사\n\n  // 세션이 없고 요청이 보호된 경로일 경우에는 로그인 페이지로 리다이렉션\n  if (!session && req.nextUrl.pathname.startsWith('/protected')) {\n    return NextResponse.redirect(new URL('/login', req.url));\n  }\n\n  return NextResponse.next();\n}\n```\n\n# 단계 3: 클라이언트에서 세션 유효성 검사 및 리다이렉션\n\n\n\n클라이언트 측에서는 여전히 세션 관련 업데이트를 처리해야 할 수도 있습니다. 로그인/로그아웃 후 리다이렉트 또는 로딩 상태 표시와 같은 작업들이 필요할 수 있어요.\n\n```js\n// 당신의 React 컴포넌트 안에서\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst MyComponent = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 세션 상태 확인하고 필요시 리다이렉트\n    // 세션을 확인하는 API 루트에 요청을 보낼 수도 있어요.\n    checkSession().then(isValidSession => {\n      if (!isValidSession) {\n        router.push('/login');\n      }\n    });\n  }, []);\n\n  // 컴포넌트 렌더링\n};\n```\n\n# 결론\n\n- 세션 보안: 안전한 HTTP-only 쿠키를 사용하여 세션 식별자를 저장하세요.\n- 쿠키 플래그: SameSite 및 Secure와 같은 적절한 쿠키 플래그 설정을 통해 보안을 강화하세요.\n- 확장성: 확장 가능한 애플리케이션을 위해 세션 관리에 데이터베이스나 Redis와 같은 서비스를 고려해보세요.\n- 오류 처리: 세션 관리 로직에서 견고한 오류 처리를 보장하세요.\n- 클라이언트 측 처리: 서버 측 확인이 있더라도, 사용자 경험을 향상시키기 위해 세션 상태에 따라 특정 클라이언트 측 동작을 처리할 수도 있습니다.\n\n\n\n이 설정은 App Router를 사용하여 Next.js 애플리케이션에서 서버 측 세션을 관리하고 라우트 액세스를 제어하는 강력한 시스템을 제공합니다.","ogImage":{"url":"/assets/img/2024-05-14-NextjsImplementingServer-SideSessions_0.png"},"coverImage":"/assets/img/2024-05-14-NextjsImplementingServer-SideSessions_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-14-NextjsImplementingServer-SideSessions_0.png\">\n<h1>단계 1: 서버 측 세션 구현하기</h1>\n<p>먼저 세션 관리 시스템을 설정하세요. 일반적으로 세션을 생성하고 유효성을 검사하며, 세션 정보를 안전한 HTTP-only 쿠키에 저장하는 과정을 포함합니다.</p>\n<h2>API 라우트에서의 세션 관리</h2>\n<p>API 라우트(app/routes/api/)에서 세션을 관리할 수 있습니다. 예를 들어, 로그인 라우트에서는 사용자를 인증하고 세션을 생성한 후 세션 쿠키를 설정할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// app/routes/api/login.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { createSession, getUser } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/lib/auth'</span>; <span class=\"hljs-comment\">// 이 함수들을 구현하세요</span>\n<span class=\"hljs-keyword\">import</span> type { <span class=\"hljs-title class_\">NextApiRequest</span>, <span class=\"hljs-title class_\">NextApiResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-params\">req: NextApiRequest, res: NextApiResponse</span>) {\n  <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getUser</span>(req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">username</span>, req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">password</span>); <span class=\"hljs-comment\">// 사용자 인증</span>\n  <span class=\"hljs-keyword\">if</span> (!user) {\n    <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">401</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">'유효하지 않은 자격 증명'</span> });\n  }\n\n  <span class=\"hljs-keyword\">const</span> sessionId = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">createSession</span>(user.<span class=\"hljs-property\">id</span>); <span class=\"hljs-comment\">// 세션 생성</span>\n  res.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">'Set-Cookie'</span>, <span class=\"hljs-string\">`sessionId=<span class=\"hljs-subst\">${sessionId}</span>; HttpOnly; Path=/; SameSite=Lax`</span>);\n  res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>).<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'성공'</span> });\n}\n</code></pre>\n<h1>단계 2: App Router 미들웨어를 사용한 리디렉션</h1>\n<p>App Router 미들웨어를 사용하여 요청을 가로채고 세션 상태를 기반으로 로직을 구현할 수 있습니다.</p>\n<h2>미들웨어 예시</h2>\n<p>세션 유효성 검사와 리다이렉션을 처리하는 미들웨어 파일(e.g., app/middleware.ts)을 생성하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// app/middleware.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NextRequest</span>, <span class=\"hljs-title class_\">NextResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/server'</span>;\n<span class=\"hljs-keyword\">import</span> { getSession } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/lib/session'</span>; <span class=\"hljs-comment\">// 이 함수 구현 필요</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">req: NextRequest</span>) {\n  <span class=\"hljs-keyword\">const</span> session = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getSession</span>(req.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-property\">sessionId</span>); <span class=\"hljs-comment\">// 세션 유효성 검사</span>\n\n  <span class=\"hljs-comment\">// 세션이 없고 요청이 보호된 경로일 경우에는 로그인 페이지로 리다이렉션</span>\n  <span class=\"hljs-keyword\">if</span> (!session &#x26;&#x26; req.<span class=\"hljs-property\">nextUrl</span>.<span class=\"hljs-property\">pathname</span>.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">'/protected'</span>)) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">redirect</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-string\">'/login'</span>, req.<span class=\"hljs-property\">url</span>));\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">next</span>();\n}\n</code></pre>\n<h1>단계 3: 클라이언트에서 세션 유효성 검사 및 리다이렉션</h1>\n<p>클라이언트 측에서는 여전히 세션 관련 업데이트를 처리해야 할 수도 있습니다. 로그인/로그아웃 후 리다이렉트 또는 로딩 상태 표시와 같은 작업들이 필요할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 당신의 React 컴포넌트 안에서</span>\n<span class=\"hljs-keyword\">import</span> { useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { useRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/router'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">MyComponent</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-title function_\">useRouter</span>();\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// 세션 상태 확인하고 필요시 리다이렉트</span>\n    <span class=\"hljs-comment\">// 세션을 확인하는 API 루트에 요청을 보낼 수도 있어요.</span>\n    <span class=\"hljs-title function_\">checkSession</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">isValidSession</span> =></span> {\n      <span class=\"hljs-keyword\">if</span> (!isValidSession) {\n        router.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">'/login'</span>);\n      }\n    });\n  }, []);\n\n  <span class=\"hljs-comment\">// 컴포넌트 렌더링</span>\n};\n</code></pre>\n<h1>결론</h1>\n<ul>\n<li>세션 보안: 안전한 HTTP-only 쿠키를 사용하여 세션 식별자를 저장하세요.</li>\n<li>쿠키 플래그: SameSite 및 Secure와 같은 적절한 쿠키 플래그 설정을 통해 보안을 강화하세요.</li>\n<li>확장성: 확장 가능한 애플리케이션을 위해 세션 관리에 데이터베이스나 Redis와 같은 서비스를 고려해보세요.</li>\n<li>오류 처리: 세션 관리 로직에서 견고한 오류 처리를 보장하세요.</li>\n<li>클라이언트 측 처리: 서버 측 확인이 있더라도, 사용자 경험을 향상시키기 위해 세션 상태에 따라 특정 클라이언트 측 동작을 처리할 수도 있습니다.</li>\n</ul>\n<p>이 설정은 App Router를 사용하여 Next.js 애플리케이션에서 서버 측 세션을 관리하고 라우트 액세스를 제어하는 강력한 시스템을 제공합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}