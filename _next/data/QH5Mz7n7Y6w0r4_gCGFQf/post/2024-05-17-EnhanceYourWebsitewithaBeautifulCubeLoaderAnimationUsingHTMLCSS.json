{"pageProps":{"post":{"title":"HTML, CSS로 멋진 큐브 로더 애니메이션 만들기","description":"","date":"2024-05-17 21:33","slug":"2024-05-17-EnhanceYourWebsitewithaBeautifulCubeLoaderAnimationUsingHTMLCSS","content":"\n\n\n![Loading Animation](https://miro.medium.com/v2/resize:fit:1200/1*CSMMFDfA44hUID0Shg5rJg.gif)\n\n지루한 로딩 막대를 응시하면서 더 빨리 움직이기를 희망한 적이 있나요? 우리 모두 그런 경험이 있습니다. 그런데 만약 당신의 웹사이트가 뒷 배경에서 콘텐츠를 로딩하는 동안에도 시각적으로 매력적인 애니메이션으로 사용자들을 매료시킬 수 있다면 어떨까요? 그것이 바로 애니메이션 큐브 로더입니다!\n\n이 단계별 가이드는 HTML과 CSS를 사용하여 세련되고 동적인 애니메이션 큐브 로더를 만드는 방법을 안내해줍니다. 이 프로젝트는 제 #100DaysOfCode 챌린지의 일환이며, 정말 멋진 것을 구축하는 동안 프론트엔드 개발 스킬을 연습하기에 최적의 방법입니다.\n\n준비가 되셨나요? 시작해봅시다!\n\n\n<div class=\"content-ad\"></div>\n\n# 단계 1: 스타터 코드 다운로드 (선택 사항)\n\n프로젝트를 빠르게 시작하기 위해, 애니메이션된 큐브 로더를 위한 미리 작성된 HTML 및 CSS 코드를 다운로드할 수 있습니다. 이것은 구조를 확인하고 모든 부분이 어떻게 함께 작동하는지 알아보는 좋은 방법입니다.\n\n여기서 소스 코드를 다운로드하세요: [소스 코드](링크)\n\n# 단계 2: HTML 구조 설정\n\n<div class=\"content-ad\"></div>\n\nHTML 코드는 애니메이션의 기본 구성 요소를 제공합니다. 우리는 큐브의 컨테이너를 만들기 위해 div 요소들의 시리즈를 사용할 것입니다. 그리고 각 큐브 자체를 정의하기 위해 개별 div 요소들을 사용할 것입니다. 각 큐브 요소 안에는 큐브의 여섯 면을 나타내는 자식 div 요소들이 있을 것입니다.\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <!-- Metadata와 CSS 파일 링크 -->\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>Animated Cube Loader</title>\n</head>\n\n<body>\n    <!-- 큐브 조립을 위한 컨테이너 -->\n\n</body>\n\n</html>\n```\n\n```js\n    <div class=\"assembly\">\n        <!-- 첫 번째 3D 구성 요소 세트 (내부 조립) -->\n        <div class=\"comp-3d comp-3d--i\">\n            <!-- 각 큐브는 'cube__face' 클래스를 가진 div로 표현된 여섯 면을 가지고 있습니다. -->\n            <!-- 첫 번째 큐브 -->\n            <div class=\"cube\">\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n            </div>\n            <!-- 추가 큐브들은 동일한 구조를 따릅니다. -->\n            <!-- 큐브 2부터 큐브 18까지 (동일한 구조) -->\n            <!-- 이하 생략 -->\n        </div>\n\n        <!-- 두 번째 3D 구성 요소 세트 (외부 조립) -->\n        <div class=\"comp-3d comp-3d--o\">\n            <!-- 각 pos 요소는 하나의 큐브를 포함합니다. -->\n            <!-- Position 1 -->\n            <!-- 이하 생략 -->\n        </div>\n    </div>\n```\n\n# Step 3: Adding Styles with CSS\n\n<div class=\"content-ad\"></div>\n\nCSS에서 마법이 일어납니다! 여기에 몇 가지 주요 측면을 살펴보겠습니다:\n\n- 일반 설정: 우리는 body 요소에 대한 스타일을 정의할 것입니다. 오버플로우 방지, 높이 설정, 3D 효과를 위한 perspective 생성 등이 포함됩니다.\n\n```js\n/* 오버플로우 방지, 마진 제거, 높이 설정 및 perspective 생성을 위한 일반 body 설정 */\nbody {\n    overflow: hidden;\n    margin: 0;\n    height: 100vh;\n    perspective: 32em;\n    /* 3D 효과를 위한 perspective 거리 */\n    background-image: linear-gradient(to right, #434343 0%, black 100%);\n    /* 배경 그라데이션 */\n}\n\n/* 모든 div 요소에 대한 일반 설정: 절대 위치 지정 및 3D 변형 보존 */\ndiv {\n    position: absolute;\n    transform-style: preserve-3d;\n    /* 자식 요소가 3D 공간에서 변형되도록 보장 */\n}\n```\n\n- 조립과 애니메이션: 주요 컨테이너에 스타일을 적용하고, inner 및 outer 큐브 그룹에 대한 애니메이션을 만들기 위해 keyframes를 사용할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n/* 주 어셈블리 컨테이너 중앙 정렬 및 초기 회전 */\n.assembly {\n    top: 50%;\n    left: 50%;\n    transform: rotateX(-45deg) rotateY(-45deg);\n    /* 초기 3D 회전 */\n}\n\n/* 3D 구성 요소에 대한 공통 애니메이션 설정 */\n.comp-3d {\n    animation: r 2s ease-in-out infinite;\n    /* 이징을 사용한 무한 애니메이션 */\n}\n\n/* 내부 어셈블리에 대한 특정 애니메이션 이름 */\n.comp-3d--i {\n    animation-name: ri;\n    /* 'ri' 키프레임 사용 */\n}\n\n/* 외부 어셈블리에 대한 특정 애니메이션 이름 */\n.comp-3d--o {\n    animation-name: ro;\n    /* 'ro' 키프레임 사용 */\n}\n\n/* 내부 어셈블리 회전을 위한 키프레임 */\n@keyframes ri {\n\n    0%,\n    20% {\n        transform: rotateY(-0.5turn);\n        /* Y축 기준 -180도 회전 */\n    }\n\n    50% {\n        transform: none;\n        /* 50%에서 변형 없음 */\n    }\n\n    100%,\n    80% {\n        transform: rotateX(-0.5turn);\n        /* X축 기준 -180도 회전 */\n    }\n}\n\n/* 외부 어셈블리 회전을 위한 키프레임 */\n@keyframes ro {\n\n    0%,\n    35% {\n        transform: rotate(-0.5turn);\n        /* -180도 회전 */\n    }\n\n    65%,\n    100% {\n        transform: none;\n        /* 65% 및 100%에서 변형 없음 */\n    }\n}\n```\n\n- 큐브 위치 조정: 각 큐브는 scale3d 및 translate3d 속성을 사용하여 3D 공간에 배치됩니다.\n\n```js\n/* 서로 다른 위치에 큐브에 대한 변환 */\n.pos:nth-child(1) {\n    transform: scale3d(1, 1, 1) translate3d(4em, 4em, 4em);\n}\n\n:not(.pos)>.cube:nth-child(1) {\n    transform: translate3d(-4em, -4em, 0em);\n}\n\n.pos:nth-child(2) {\n    transform: scale3d(1, 1, -1) translate3d(4em, 4em, 4em);\n}\n\n:not(.pos)>.cube:nth-child(2) {\n    transform: translate3d(-4em, 0em, -4em);\n}\n\n/* 다른 큐브(3-18)에 대한 변환 */\n/* 이어서 작성... */\n```\n\n- 큐브 면: 큐브의 개별 면을 차원, 그림자, 배경색으로 스타일링합니다.\n \n\n\n\n<div class=\"content-ad\"></div>\n\n```js\n/* 큐브 면에 대한 스타일 */\n.cube__face {\n    margin: -2em;\n    width: 4em;\n    height: 4em;\n    box-shadow: 0 0 2em rgba(220, 220, 220, 0.5) inset;\n    /* 깊이 효과를 위한 내부 그림자 */\n    backface-visibility: hidden;\n    /* 회전될 때 뒷면 숨김 */\n    background: rgb(222, 238, 253);\n    /* 연한 파란색 배경 */\n}\n\n/* 짝수 번째 면에 대한 약간의 밝기 조정 */\n.cube__face:nth-child(2n) {\n    filter: brightness(0.97);\n}\n\n/* 5번 이상의 인덱스를 가진 면에 대한 약간의 밝기 증가 */\n.cube__face:nth-child(n + 5) {\n    filter: brightness(1.03);\n}\n\n/* 각 면의 위치를 조정하기 위한 변환 */\n.cube__face:nth-child(1) {\n    transform: rotateY(0deg) translateZ(2em);\n    /* 앞면 */\n}\n\n.cube__face:nth-child(2) {\n    transform: rotateY(90deg) translateZ(2em);\n    /* 오른쪽 면 */\n}\n\n.cube__face:nth-child(3) {\n    transform: rotateY(180deg) translateZ(2em);\n    /* 뒷면 */\n}\n\n.cube__face:nth-child(4) {\n    transform: rotateY(270deg) translateZ(2em);\n    /* 왼쪽 면 */\n}\n\n.cube__face:nth-child(5) {\n    transform: rotateX(90deg) translateZ(2em);\n    /* 위쪽 면 */\n}\n\n.cube__face:nth-child(6) {\n    transform: rotateX(-90deg) translateZ(2em);\n    /* 아래쪽 면 */\n}\n```\n\n- 큐브 이동 애니메이션: 특정 큐브를 어셈블리 내에서 움직일 수 있게 애니메이션을 추가함으로써 동적인 터치를 더할 수 있습니다.\n\n```js\n/* 'pos' 요소 내에서 큐브 이동을 위한 키프레임 */\n@keyframes m {\n\n    0%,\n    5%,\n    95%,\n    100% {\n        transform: none;\n        /* 시작, 5%, 95%, 끝에서 변환 없음 */\n    }\n\n    15% {\n        transform: translate3d(0, 4em, 0);\n        /* 4em만큼 위로 이동 */\n    }\n\n    25% {\n        transform: translate3d(0, 4em, 4em);\n        /* 4em만큼 위로 이동하고 앞쪽으로 이동 */\n    }\n\n    35%,\n    65% {\n        transform: translate3d(4em, 4em, 4em);\n        /* 대각선으로 위쪽, 앞쪽, 오른쪽으로 이동 */\n    }\n\n    75% {\n        transform: translate3d(4em, 0, 4em);\n        /* 원래 높이에서 아래쪽으로, 앞쪽으로, 오른쪽으로 이동 */\n    }\n\n    85% {\n        transform: translate3d(4em, 0, 0);\n        /* 원래 위치로 이동 */\n    }\n}\n```\n\n# 단계 4: 실행하고 마법을 확인하세요!\n\n\n<div class=\"content-ad\"></div>\n\nHTML과 CSS 파일을 설정한 후 웹 브라우저에서 HTML 파일을 열어보세요. 움직이는 큐브 로더가 작동하는 것을 볼 수 있을 거에요! CSS 파일에서 스타일을 실험하여 웹사이트의 색상, 크기 및 애니메이션을 맞춤 설정해보세요.\n\n![애니메이션 큐브로더](https://miro.medium.com/v2/resize:fit:1200/1*cligSzXsdw0TaX5dq5uToA.gif)\n\n# 기본 이상으로:\n\n이것은 출발점에 불과해요! 큐브로더를 더 발전시킬 수도 있어요:\n\n<div class=\"content-ad\"></div>\n\n- 입체 그림자 효과를 더해보세요.\n- 다양한 색상과 그라데이션을 활용하여 더 생생한 느낌을 연출해보세요.\n- 사용자에게 추가적인 피드백을 제공하기 위해 로딩 메시지나 진행률 바를 포함해보세요.\n\n# 저와 연락해요\n\n언제든 연락 주세요! 이 프로젝트나 프론트엔드 개발에 대한 질문이 있으시면 언제든 연락주세요.\n\n저와 연락하기: 지금 연락하기\n\n<div class=\"content-ad\"></div>\n\n# 행복한 코딩!\n\n이 블로그 포스트는 애니메이션 큐브 로더를 만드는 방법을 안내해줍니다. 이를 통해 #100DaysOfCode 챌린지의 일환으로 코딩 여정을 멋지고 유익하게 선보일 수 있는 방법을 제공합니다. 또한 독자들이 코드를 다운로드하거나 추가 학습을 위해 연락할 수 있도록 하는 콜 투 액션도 포함되어 있습니다.","ogImage":{"url":"/assets/img/2024-05-17-EnhanceYourWebsitewithaBeautifulCubeLoaderAnimationUsingHTMLCSS_0.png"},"coverImage":"/assets/img/2024-05-17-EnhanceYourWebsitewithaBeautifulCubeLoaderAnimationUsingHTMLCSS_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*CSMMFDfA44hUID0Shg5rJg.gif\" alt=\"Loading Animation\"></p>\n<p>지루한 로딩 막대를 응시하면서 더 빨리 움직이기를 희망한 적이 있나요? 우리 모두 그런 경험이 있습니다. 그런데 만약 당신의 웹사이트가 뒷 배경에서 콘텐츠를 로딩하는 동안에도 시각적으로 매력적인 애니메이션으로 사용자들을 매료시킬 수 있다면 어떨까요? 그것이 바로 애니메이션 큐브 로더입니다!</p>\n<p>이 단계별 가이드는 HTML과 CSS를 사용하여 세련되고 동적인 애니메이션 큐브 로더를 만드는 방법을 안내해줍니다. 이 프로젝트는 제 #100DaysOfCode 챌린지의 일환이며, 정말 멋진 것을 구축하는 동안 프론트엔드 개발 스킬을 연습하기에 최적의 방법입니다.</p>\n<p>준비가 되셨나요? 시작해봅시다!</p>\n<div class=\"content-ad\"></div>\n<h1>단계 1: 스타터 코드 다운로드 (선택 사항)</h1>\n<p>프로젝트를 빠르게 시작하기 위해, 애니메이션된 큐브 로더를 위한 미리 작성된 HTML 및 CSS 코드를 다운로드할 수 있습니다. 이것은 구조를 확인하고 모든 부분이 어떻게 함께 작동하는지 알아보는 좋은 방법입니다.</p>\n<p>여기서 소스 코드를 다운로드하세요: <a href=\"%EB%A7%81%ED%81%AC\">소스 코드</a></p>\n<h1>단계 2: HTML 구조 설정</h1>\n<div class=\"content-ad\"></div>\n<p>HTML 코드는 애니메이션의 기본 구성 요소를 제공합니다. 우리는 큐브의 컨테이너를 만들기 위해 div 요소들의 시리즈를 사용할 것입니다. 그리고 각 큐브 자체를 정의하기 위해 개별 div 요소들을 사용할 것입니다. 각 큐브 요소 안에는 큐브의 여섯 면을 나타내는 자식 div 요소들이 있을 것입니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;!-- Metadata와 CSS 파일 링크 -->\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;link rel=\"stylesheet\" href=\"style.css\">\n    &#x3C;title>Animated Cube Loader&#x3C;/title>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;!-- 큐브 조립을 위한 컨테이너 -->\n\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<pre><code class=\"hljs language-js\">    &#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"assembly\"</span>>\n        &#x3C;!-- 첫 번째 3D 구성 요소 세트 (내부 조립) -->\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"comp-3d comp-3d--i\"</span>></span>\n            <span class=\"hljs-comment\">&#x3C;!-- 각 큐브는 'cube__face' 클래스를 가진 div로 표현된 여섯 면을 가지고 있습니다. --></span>\n            <span class=\"hljs-comment\">&#x3C;!-- 첫 번째 큐브 --></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"cube\"</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"cube__face\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"cube__face\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"cube__face\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"cube__face\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"cube__face\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"cube__face\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n            <span class=\"hljs-comment\">&#x3C;!-- 추가 큐브들은 동일한 구조를 따릅니다. --></span>\n            <span class=\"hljs-comment\">&#x3C;!-- 큐브 2부터 큐브 18까지 (동일한 구조) --></span>\n            <span class=\"hljs-comment\">&#x3C;!-- 이하 생략 --></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n\n        &#x3C;!-- 두 번째 3D 구성 요소 세트 (외부 조립) -->\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"comp-3d comp-3d--o\"</span>></span>\n            <span class=\"hljs-comment\">&#x3C;!-- 각 pos 요소는 하나의 큐브를 포함합니다. --></span>\n            <span class=\"hljs-comment\">&#x3C;!-- Position 1 --></span>\n            <span class=\"hljs-comment\">&#x3C;!-- 이하 생략 --></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    &#x3C;/div>\n</code></pre>\n<h1>Step 3: Adding Styles with CSS</h1>\n<div class=\"content-ad\"></div>\n<p>CSS에서 마법이 일어납니다! 여기에 몇 가지 주요 측면을 살펴보겠습니다:</p>\n<ul>\n<li>일반 설정: 우리는 body 요소에 대한 스타일을 정의할 것입니다. 오버플로우 방지, 높이 설정, 3D 효과를 위한 perspective 생성 등이 포함됩니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* 오버플로우 방지, 마진 제거, 높이 설정 및 perspective 생성을 위한 일반 body 설정 */</span>\nbody {\n    <span class=\"hljs-attr\">overflow</span>: hidden;\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attr\">height</span>: 100vh;\n    <span class=\"hljs-attr\">perspective</span>: 32em;\n    <span class=\"hljs-comment\">/* 3D 효과를 위한 perspective 거리 */</span>\n    background-<span class=\"hljs-attr\">image</span>: linear-<span class=\"hljs-title function_\">gradient</span>(to right, #<span class=\"hljs-number\">434343</span> <span class=\"hljs-number\">0</span>%, black <span class=\"hljs-number\">100</span>%);\n    <span class=\"hljs-comment\">/* 배경 그라데이션 */</span>\n}\n\n<span class=\"hljs-comment\">/* 모든 div 요소에 대한 일반 설정: 절대 위치 지정 및 3D 변형 보존 */</span>\ndiv {\n    <span class=\"hljs-attr\">position</span>: absolute;\n    transform-<span class=\"hljs-attr\">style</span>: preserve-3d;\n    <span class=\"hljs-comment\">/* 자식 요소가 3D 공간에서 변형되도록 보장 */</span>\n}\n</code></pre>\n<ul>\n<li>조립과 애니메이션: 주요 컨테이너에 스타일을 적용하고, inner 및 outer 큐브 그룹에 대한 애니메이션을 만들기 위해 keyframes를 사용할 것입니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* 주 어셈블리 컨테이너 중앙 정렬 및 초기 회전 */</span>\n.<span class=\"hljs-property\">assembly</span> {\n    <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">50</span>%;\n    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">50</span>%;\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotateX</span>(-45deg) <span class=\"hljs-title function_\">rotateY</span>(-45deg);\n    <span class=\"hljs-comment\">/* 초기 3D 회전 */</span>\n}\n\n<span class=\"hljs-comment\">/* 3D 구성 요소에 대한 공통 애니메이션 설정 */</span>\n.<span class=\"hljs-property\">comp</span>-3d {\n    <span class=\"hljs-attr\">animation</span>: r 2s ease-<span class=\"hljs-keyword\">in</span>-out infinite;\n    <span class=\"hljs-comment\">/* 이징을 사용한 무한 애니메이션 */</span>\n}\n\n<span class=\"hljs-comment\">/* 내부 어셈블리에 대한 특정 애니메이션 이름 */</span>\n.<span class=\"hljs-property\">comp</span>-3d--i {\n    animation-<span class=\"hljs-attr\">name</span>: ri;\n    <span class=\"hljs-comment\">/* 'ri' 키프레임 사용 */</span>\n}\n\n<span class=\"hljs-comment\">/* 외부 어셈블리에 대한 특정 애니메이션 이름 */</span>\n.<span class=\"hljs-property\">comp</span>-3d--o {\n    animation-<span class=\"hljs-attr\">name</span>: ro;\n    <span class=\"hljs-comment\">/* 'ro' 키프레임 사용 */</span>\n}\n\n<span class=\"hljs-comment\">/* 내부 어셈블리 회전을 위한 키프레임 */</span>\n@keyframes ri {\n\n    <span class=\"hljs-number\">0</span>%,\n    <span class=\"hljs-number\">20</span>% {\n        <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotateY</span>(-<span class=\"hljs-number\">0.</span>5turn);\n        <span class=\"hljs-comment\">/* Y축 기준 -180도 회전 */</span>\n    }\n\n    <span class=\"hljs-number\">50</span>% {\n        <span class=\"hljs-attr\">transform</span>: none;\n        <span class=\"hljs-comment\">/* 50%에서 변형 없음 */</span>\n    }\n\n    <span class=\"hljs-number\">100</span>%,\n    <span class=\"hljs-number\">80</span>% {\n        <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotateX</span>(-<span class=\"hljs-number\">0.</span>5turn);\n        <span class=\"hljs-comment\">/* X축 기준 -180도 회전 */</span>\n    }\n}\n\n<span class=\"hljs-comment\">/* 외부 어셈블리 회전을 위한 키프레임 */</span>\n@keyframes ro {\n\n    <span class=\"hljs-number\">0</span>%,\n    <span class=\"hljs-number\">35</span>% {\n        <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotate</span>(-<span class=\"hljs-number\">0.</span>5turn);\n        <span class=\"hljs-comment\">/* -180도 회전 */</span>\n    }\n\n    <span class=\"hljs-number\">65</span>%,\n    <span class=\"hljs-number\">100</span>% {\n        <span class=\"hljs-attr\">transform</span>: none;\n        <span class=\"hljs-comment\">/* 65% 및 100%에서 변형 없음 */</span>\n    }\n}\n</code></pre>\n<ul>\n<li>큐브 위치 조정: 각 큐브는 scale3d 및 translate3d 속성을 사용하여 3D 공간에 배치됩니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* 서로 다른 위치에 큐브에 대한 변환 */</span>\n.<span class=\"hljs-property\">pos</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span></span>) {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">scale3d</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) <span class=\"hljs-title function_\">translate3d</span>(4em, 4em, 4em);\n}\n\n:<span class=\"hljs-title function_\">not</span>(.<span class=\"hljs-property\">pos</span>)>.<span class=\"hljs-property\">cube</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span></span>) {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">translate3d</span>(-4em, -4em, 0em);\n}\n\n.<span class=\"hljs-property\">pos</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">2</span></span>) {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">scale3d</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>) <span class=\"hljs-title function_\">translate3d</span>(4em, 4em, 4em);\n}\n\n:<span class=\"hljs-title function_\">not</span>(.<span class=\"hljs-property\">pos</span>)>.<span class=\"hljs-property\">cube</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">2</span></span>) {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">translate3d</span>(-4em, 0em, -4em);\n}\n\n<span class=\"hljs-comment\">/* 다른 큐브(3-18)에 대한 변환 */</span>\n<span class=\"hljs-comment\">/* 이어서 작성... */</span>\n</code></pre>\n<ul>\n<li>큐브 면: 큐브의 개별 면을 차원, 그림자, 배경색으로 스타일링합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* 큐브 면에 대한 스타일 */</span>\n.<span class=\"hljs-property\">cube__face</span> {\n    <span class=\"hljs-attr\">margin</span>: -2em;\n    <span class=\"hljs-attr\">width</span>: 4em;\n    <span class=\"hljs-attr\">height</span>: 4em;\n    box-<span class=\"hljs-attr\">shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> 2em <span class=\"hljs-title function_\">rgba</span>(<span class=\"hljs-number\">220</span>, <span class=\"hljs-number\">220</span>, <span class=\"hljs-number\">220</span>, <span class=\"hljs-number\">0.5</span>) inset;\n    <span class=\"hljs-comment\">/* 깊이 효과를 위한 내부 그림자 */</span>\n    backface-<span class=\"hljs-attr\">visibility</span>: hidden;\n    <span class=\"hljs-comment\">/* 회전될 때 뒷면 숨김 */</span>\n    <span class=\"hljs-attr\">background</span>: <span class=\"hljs-title function_\">rgb</span>(<span class=\"hljs-number\">222</span>, <span class=\"hljs-number\">238</span>, <span class=\"hljs-number\">253</span>);\n    <span class=\"hljs-comment\">/* 연한 파란색 배경 */</span>\n}\n\n<span class=\"hljs-comment\">/* 짝수 번째 면에 대한 약간의 밝기 조정 */</span>\n.<span class=\"hljs-property\">cube__face</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">2n</span></span>) {\n    <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-title function_\">brightness</span>(<span class=\"hljs-number\">0.97</span>);\n}\n\n<span class=\"hljs-comment\">/* 5번 이상의 인덱스를 가진 면에 대한 약간의 밝기 증가 */</span>\n.<span class=\"hljs-property\">cube__face</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\">n + <span class=\"hljs-number\">5</span></span>) {\n    <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-title function_\">brightness</span>(<span class=\"hljs-number\">1.03</span>);\n}\n\n<span class=\"hljs-comment\">/* 각 면의 위치를 조정하기 위한 변환 */</span>\n.<span class=\"hljs-property\">cube__face</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span></span>) {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotateY</span>(0deg) <span class=\"hljs-title function_\">translateZ</span>(2em);\n    <span class=\"hljs-comment\">/* 앞면 */</span>\n}\n\n.<span class=\"hljs-property\">cube__face</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">2</span></span>) {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotateY</span>(90deg) <span class=\"hljs-title function_\">translateZ</span>(2em);\n    <span class=\"hljs-comment\">/* 오른쪽 면 */</span>\n}\n\n.<span class=\"hljs-property\">cube__face</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">3</span></span>) {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotateY</span>(180deg) <span class=\"hljs-title function_\">translateZ</span>(2em);\n    <span class=\"hljs-comment\">/* 뒷면 */</span>\n}\n\n.<span class=\"hljs-property\">cube__face</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">4</span></span>) {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotateY</span>(270deg) <span class=\"hljs-title function_\">translateZ</span>(2em);\n    <span class=\"hljs-comment\">/* 왼쪽 면 */</span>\n}\n\n.<span class=\"hljs-property\">cube__face</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">5</span></span>) {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotateX</span>(90deg) <span class=\"hljs-title function_\">translateZ</span>(2em);\n    <span class=\"hljs-comment\">/* 위쪽 면 */</span>\n}\n\n.<span class=\"hljs-property\">cube__face</span>:nth-<span class=\"hljs-title function_\">child</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">6</span></span>) {\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">rotateX</span>(-90deg) <span class=\"hljs-title function_\">translateZ</span>(2em);\n    <span class=\"hljs-comment\">/* 아래쪽 면 */</span>\n}\n</code></pre>\n<ul>\n<li>큐브 이동 애니메이션: 특정 큐브를 어셈블리 내에서 움직일 수 있게 애니메이션을 추가함으로써 동적인 터치를 더할 수 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* 'pos' 요소 내에서 큐브 이동을 위한 키프레임 */</span>\n@keyframes m {\n\n    <span class=\"hljs-number\">0</span>%,\n    <span class=\"hljs-number\">5</span>%,\n    <span class=\"hljs-number\">95</span>%,\n    <span class=\"hljs-number\">100</span>% {\n        <span class=\"hljs-attr\">transform</span>: none;\n        <span class=\"hljs-comment\">/* 시작, 5%, 95%, 끝에서 변환 없음 */</span>\n    }\n\n    <span class=\"hljs-number\">15</span>% {\n        <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">translate3d</span>(<span class=\"hljs-number\">0</span>, 4em, <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-comment\">/* 4em만큼 위로 이동 */</span>\n    }\n\n    <span class=\"hljs-number\">25</span>% {\n        <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">translate3d</span>(<span class=\"hljs-number\">0</span>, 4em, 4em);\n        <span class=\"hljs-comment\">/* 4em만큼 위로 이동하고 앞쪽으로 이동 */</span>\n    }\n\n    <span class=\"hljs-number\">35</span>%,\n    <span class=\"hljs-number\">65</span>% {\n        <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">translate3d</span>(4em, 4em, 4em);\n        <span class=\"hljs-comment\">/* 대각선으로 위쪽, 앞쪽, 오른쪽으로 이동 */</span>\n    }\n\n    <span class=\"hljs-number\">75</span>% {\n        <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">translate3d</span>(4em, <span class=\"hljs-number\">0</span>, 4em);\n        <span class=\"hljs-comment\">/* 원래 높이에서 아래쪽으로, 앞쪽으로, 오른쪽으로 이동 */</span>\n    }\n\n    <span class=\"hljs-number\">85</span>% {\n        <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">translate3d</span>(4em, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-comment\">/* 원래 위치로 이동 */</span>\n    }\n}\n</code></pre>\n<h1>단계 4: 실행하고 마법을 확인하세요!</h1>\n<div class=\"content-ad\"></div>\n<p>HTML과 CSS 파일을 설정한 후 웹 브라우저에서 HTML 파일을 열어보세요. 움직이는 큐브 로더가 작동하는 것을 볼 수 있을 거에요! CSS 파일에서 스타일을 실험하여 웹사이트의 색상, 크기 및 애니메이션을 맞춤 설정해보세요.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*cligSzXsdw0TaX5dq5uToA.gif\" alt=\"애니메이션 큐브로더\"></p>\n<h1>기본 이상으로:</h1>\n<p>이것은 출발점에 불과해요! 큐브로더를 더 발전시킬 수도 있어요:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>입체 그림자 효과를 더해보세요.</li>\n<li>다양한 색상과 그라데이션을 활용하여 더 생생한 느낌을 연출해보세요.</li>\n<li>사용자에게 추가적인 피드백을 제공하기 위해 로딩 메시지나 진행률 바를 포함해보세요.</li>\n</ul>\n<h1>저와 연락해요</h1>\n<p>언제든 연락 주세요! 이 프로젝트나 프론트엔드 개발에 대한 질문이 있으시면 언제든 연락주세요.</p>\n<p>저와 연락하기: 지금 연락하기</p>\n<div class=\"content-ad\"></div>\n<h1>행복한 코딩!</h1>\n<p>이 블로그 포스트는 애니메이션 큐브 로더를 만드는 방법을 안내해줍니다. 이를 통해 #100DaysOfCode 챌린지의 일환으로 코딩 여정을 멋지고 유익하게 선보일 수 있는 방법을 제공합니다. 또한 독자들이 코드를 다운로드하거나 추가 학습을 위해 연락할 수 있도록 하는 콜 투 액션도 포함되어 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}