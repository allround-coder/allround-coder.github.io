{"pageProps":{"post":{"title":"Google Colab에서 GPT-4o로 시작하기 단계별 안내","description":"","date":"2024-05-16 17:34","slug":"2024-05-16-GettingStartedwithGPT-4oonGoogleColabAStep-by-StepGuide","content":"\n\n<img src=\"/assets/img/2024-05-16-GettingStartedwithGPT-4oonGoogleColabAStep-by-StepGuide_0.png\" />\n\n2024년 5월 13일에 OpenAI는 최신 AI 모델인 GPT-4o를 선보였습니다. 이 모델은 텍스트와 이미지 모두와의 고급 음성 상호작용 능력을 보여주었습니다. 인공지능(AI)은 다양한 산업을 변화시키고 있으며, OpenAI의 GPT-4o 모델은 이 혁명의 선두주자입니다.\n\n<img src=\"/assets/img/2024-05-16-GettingStartedwithGPT-4oonGoogleColabAStep-by-StepGuide_1.png\" />\n\n본 안내서는 Google Colab에서 GPT-4o를 설정하고 사용하는 방법을 안내해 드립니다. 간단한 수학 문제를 해결하거나 복잡한 텍스트를 생성하거나 이미지를 분석하려는 경우, 이 튜토리얼을 통해 시작할 수 있을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/0*Ob6Fa-AKD9ZTpBsW.gif)\n\n# 1. 설정\n\n코딩을 시작하기 전에 Google Colab 계정과 OpenAI의 GPT-4o API에 액세스할 수 있는지 확인해주세요. GPT-4o의 환경 설정 및 몇 가지 흥미로운 기능을 탐색하는 단계별 안내서가 여기 있습니다.\n\n## 단계 1: OpenAI Python 패키지 설치\n\n<div class=\"content-ad\"></div>\n\n먼저 OpenAI Python 패키지를 설치해야 합니다. 새로운 Colab 노트북을 열고 다음 명령을 실행하세요:\n\n```js\n!pip install --upgrade openai --quiet\n```\n\n## 단계 2: 라이브러리 가져오기 및 API 키 설정\n\n그 다음으로 필요한 라이브러리를 가져오고 API 키를 설정하세요. Google Colab의 userdata 모듈을 사용하여 API 키를 안전하게 저장할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport json\nfrom openai import OpenAI\nimport os\nfrom google.colab import userdata\n\nMODEL = \"gpt-4o\"\n\nclient = OpenAI(api_key=userdata.get('openai'))\n```\n\n## 단계 3: 첫 번째 완성물 생성\n\nGPT-4o가 어떻게 작동하는지 감을 잡기 위해 간단한 완성물을 만들어 봅시다. 모델에 간단한 수학 문제를 해결하도록 요청하겠습니다.\n\n```js\ncompletion = client.chat.completions.create(\n  model=MODEL,\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant. Help me with my math homework!\"},\n    {\"role\": \"user\", \"content\": \"Hello! Could you solve 4+5?\"}\n  ]\n)\n\nprint(\"Assistant: \" + completion.choices[0].message.content)\n```\n\n<div class=\"content-ad\"></div>\n\n## 단계 4: 더 복잡한 질문하기\n\nGPT-4o에게 더 복잡한 질문을 하여 기능을 더 잘 이해할 수 있습니다. 예를 들어, 모델의 기원 및 훈련 세부 정보에 대해 질문할 수 있습니다.\n\n```js\ncompletion = client.chat.completions.create(\n  model=MODEL,\n  messages=[\n    {\"role\": \"user\", \"content\": \"당신의 이름은 무엇이며 누가 만들었나요? 훈련의 종료일은 언제인가요?\"}\n  ]\n)\n\nprint(\"Assistant: \" + completion.choices[0].message.content)\n```\n\n## 2. 함수 호출을 위한 JSON 모드\n\n<div class=\"content-ad\"></div>\n\nGPT-4는 JSON 응답을 생성할 수 있어서 구조화된 데이터와 함수 호출에 유용합니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1400/0*TyQQvSdTlOenI5YY.gif)\n\n## 단계 1: JSON 응답 생성\n\n주간 운동 루틴을 생성하기 위해 JSON 응답을 만들어 봅시다.\n\n<div class=\"content-ad\"></div>\n\n```js\ncompletion = client.chat.completions.create(\n  model=MODEL,\n  response_format={\"type\": \"json_object\"},\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a trainer who always responds in JSON\"},\n    {\"role\": \"user\", \"content\": \"Create a weekly workout routine for me\"}\n  ]\n)\n\nprint(completion.choices[0].message)\njson.loads(completion.choices[0].message.content)\n```\n\n# 3. Image Understanding\n\nGPT-4o can also understand and process images. We’ll explore how to work with images by encoding them in base64.\n\n![Image](https://miro.medium.com/v2/resize:fit:1080/0*pYZ8nvgtWiL55IhN.gif)\n\n<div class=\"content-ad\"></div>\n\n## 단계 1: 이미지 인코딩\n\n먼저 이미지를 base64로 인코딩하세요.\n\n```js\nfrom IPython.display import Image, display\nimport base64\n\nIMAGE_PATH = \"/content/IMG-20240118-WA0023.jpg\"\n\ndef encode_image(image_path):\n    with open(image_path, \"rb\") as image_file:\n        return base64.b64encode(image_file.read()).decode(\"utf-8\")\n\nbase64_image = encode_image(IMAGE_PATH)\ndisplay(Image(IMAGE_PATH))\n```\n\n## 단계 2: 이미지 분석\n\n<div class=\"content-ad\"></div>\n\n```js\nresponse = client.chat.completions.create(\n    model=MODEL,\n    messages=[\n        {\"role\": \"system\", \"content\": \"당신은 친절하고 마크다운으로 응답하는 도우미입니다. 수학 숙제를 도와주세요!\"},\n        {\"role\": \"user\", \"content\": [\n            {\"type\": \"text\", \"text\": \"꽃의 색깔은 무엇인가요?\"},\n            {\"type\": \"image_url\", \"image_url\": {\"url\": f\"data:image/png;base64,{base64_image}\"}}\n        ]}\n    ],\n    temperature=0.0,\n)\n\nprint(response.choices[0].message.content)\n```\n\n## 단계 3: URL 이미지 분석\n\nURL에서 직접 이미지를 분석할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nresponse = client.chat.completions.create(\n    model=MODEL,\n    messages=[\n        {\"role\": \"system\", \"content\": \"마크다운으로 응답하는 도움이 되는 도우미에요. 수학 숙제를 도와줄게요!\"},\n        {\"role\": \"user\", \"content\": [\n            {\"type\": \"text\", \"text\": \"꽃의 색깔은 무엇인가요?\"},\n            {\"type\": \"image_url\", \"image_url\": {\"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/Ranunculus_repens_1_%28cropped%29.JPG/192px-Ranunculus_repens_1_%28cropped%29.JPG\"}\n        ]}\n    ],\n    temperature=0.0,\n)\n\nprint(response.choices[0].message.content)\n```\n\n# 4. Function Calling\n\nGPT-4o는 사용자 입력에 기반하여 미리 정의된 함수를 호출할 수 있어요. 외부 데이터 소스나 서비스를 통합하는 데 특히 유용합니다.\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/0*YKVvRxnSDMQEWPqb.gif\" />\n\n\n<div class=\"content-ad\"></div>\n\n## 단계 1: 함수 정의\n\nNBA 경기의 현재 점수를 가져오는 함수를 정의하세요.\n\n```js\ndef get_nba_game_score(team):\n    if \"lakers\" in team.lower():\n        return json.dumps({\"team\": \"레이커스\", \"score\": \"102\", \"opponent\": \"워리어스\", \"opponent_score\": \"98\"})\n    elif \"bulls\" in team.lower():\n        return json.dumps({\"team\": \"불스\", \"score\": \"89\", \"opponent\": \"셀틱스\", \"opponent_score\": \"95\"})\n    else:\n        return json.dumps({\"team\": team, \"score\": \"N/A\", \"opponent\": \"N/A\", \"opponent_score\": \"N/A\"})\n```\n\n## 단계 2: 대화 초기화 및 함수 호출\n\n<div class=\"content-ad\"></div>\n\n모델이 이 함수를 호출할 수 있는 대화를 만들어보세요.\n\n```js\ndef function_calling():\n    messages = [{\"role\": \"user\", \"content\": \"레이커스 게임 점수가 어떻게 되나요?\"}]\n\n    tools = [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"get_nba_game_score\",\n                \"description\": \"주어진 팀의 NBA 게임의 현재 점수를 가져옵니다.\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"team\": {\"type\": \"string\", \"description\": \"NBA 팀의 이름, 예: 레이커스, 불스\"},\n                    },\n                    \"required\": [\"team\"],\n                },\n            },\n        }\n    ]\n\n    response = client.chat.completions.create(\n        model=MODEL,\n        messages=messages,\n        tools=tools,\n        tool_choice=\"auto\",\n    )\n\n    response_message = response.choices[0].message\n    tool_calls = response_message.tool_calls\n\n    if tool_calls:\n        available_functions = {\"get_nba_game_score\": get_nba_game_score}\n        messages.append(response_message)\n\n        for tool_call in tool_calls:\n            function_name = tool_call.function.name\n            function_to_call = available_functions[function_name]\n            function_args = json.loads(tool_call.function.arguments)\n\n            function_response = function_to_call(team=function_args.get(\"team\"))\n\n            messages.append(\n                {\"tool_call_id\": tool_call.id, \"role\": \"tool\", \"name\": function_name, \"content\": function_response}\n            )\n\n        second_response = client.chat.completions.create(\n            model=MODEL,\n            messages=messages,\n        )\n\n        return second_response\n\nprint(function_calling())\n```\n\n축하합니다!\n\n이제 Google Colab에서 GPT-4o를 설정하고 사용하는 방법을 배웠습니다. 이 가이드는 기본 텍스트 완성, JSON 응답, 이미지 처리 및 함수 호출 내용을 다루었습니다. 이러한 기능을 확장하여 다양한 분야의 정교한 AI 응용프로그램을 구축할 수 있습니다. 즐거운 코딩하세요!\n\n<div class=\"content-ad\"></div>\n\n\n![Image](https://miro.medium.com/v2/resize:fit:1400/0*e35njv6_nLGt-8QY.gif)\n","ogImage":{"url":"/assets/img/2024-05-16-GettingStartedwithGPT-4oonGoogleColabAStep-by-StepGuide_0.png"},"coverImage":"/assets/img/2024-05-16-GettingStartedwithGPT-4oonGoogleColabAStep-by-StepGuide_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-16-GettingStartedwithGPT-4oonGoogleColabAStep-by-StepGuide_0.png\">\n<p>2024년 5월 13일에 OpenAI는 최신 AI 모델인 GPT-4o를 선보였습니다. 이 모델은 텍스트와 이미지 모두와의 고급 음성 상호작용 능력을 보여주었습니다. 인공지능(AI)은 다양한 산업을 변화시키고 있으며, OpenAI의 GPT-4o 모델은 이 혁명의 선두주자입니다.</p>\n<img src=\"/assets/img/2024-05-16-GettingStartedwithGPT-4oonGoogleColabAStep-by-StepGuide_1.png\">\n<p>본 안내서는 Google Colab에서 GPT-4o를 설정하고 사용하는 방법을 안내해 드립니다. 간단한 수학 문제를 해결하거나 복잡한 텍스트를 생성하거나 이미지를 분석하려는 경우, 이 튜토리얼을 통해 시작할 수 있을 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/0*Ob6Fa-AKD9ZTpBsW.gif\" alt=\"image\"></p>\n<h1>1. 설정</h1>\n<p>코딩을 시작하기 전에 Google Colab 계정과 OpenAI의 GPT-4o API에 액세스할 수 있는지 확인해주세요. GPT-4o의 환경 설정 및 몇 가지 흥미로운 기능을 탐색하는 단계별 안내서가 여기 있습니다.</p>\n<h2>단계 1: OpenAI Python 패키지 설치</h2>\n<div class=\"content-ad\"></div>\n<p>먼저 OpenAI Python 패키지를 설치해야 합니다. 새로운 Colab 노트북을 열고 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">!pip install --upgrade openai --quiet\n</code></pre>\n<h2>단계 2: 라이브러리 가져오기 및 API 키 설정</h2>\n<p>그 다음으로 필요한 라이브러리를 가져오고 API 키를 설정하세요. Google Colab의 userdata 모듈을 사용하여 API 키를 안전하게 저장할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">from</span> openai <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">OpenAI</span>\n<span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">from</span> google.<span class=\"hljs-property\">colab</span> <span class=\"hljs-keyword\">import</span> userdata\n\n<span class=\"hljs-variable constant_\">MODEL</span> = <span class=\"hljs-string\">\"gpt-4o\"</span>\n\nclient = <span class=\"hljs-title class_\">OpenAI</span>(api_key=userdata.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'openai'</span>))\n</code></pre>\n<h2>단계 3: 첫 번째 완성물 생성</h2>\n<p>GPT-4o가 어떻게 작동하는지 감을 잡기 위해 간단한 완성물을 만들어 봅시다. 모델에 간단한 수학 문제를 해결하도록 요청하겠습니다.</p>\n<pre><code class=\"hljs language-js\">completion = client.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">completions</span>.<span class=\"hljs-title function_\">create</span>(\n  model=<span class=\"hljs-variable constant_\">MODEL</span>,\n  messages=[\n    {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"system\"</span>, <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"You are a helpful assistant. Help me with my math homework!\"</span>},\n    {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"Hello! Could you solve 4+5?\"</span>}\n  ]\n)\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Assistant: \"</span> + completion.<span class=\"hljs-property\">choices</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">message</span>.<span class=\"hljs-property\">content</span>)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>단계 4: 더 복잡한 질문하기</h2>\n<p>GPT-4o에게 더 복잡한 질문을 하여 기능을 더 잘 이해할 수 있습니다. 예를 들어, 모델의 기원 및 훈련 세부 정보에 대해 질문할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">completion = client.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">completions</span>.<span class=\"hljs-title function_\">create</span>(\n  model=<span class=\"hljs-variable constant_\">MODEL</span>,\n  messages=[\n    {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"당신의 이름은 무엇이며 누가 만들었나요? 훈련의 종료일은 언제인가요?\"</span>}\n  ]\n)\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Assistant: \"</span> + completion.<span class=\"hljs-property\">choices</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">message</span>.<span class=\"hljs-property\">content</span>)\n</code></pre>\n<h2>2. 함수 호출을 위한 JSON 모드</h2>\n<div class=\"content-ad\"></div>\n<p>GPT-4는 JSON 응답을 생성할 수 있어서 구조화된 데이터와 함수 호출에 유용합니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/0*TyQQvSdTlOenI5YY.gif\" alt=\"image\"></p>\n<h2>단계 1: JSON 응답 생성</h2>\n<p>주간 운동 루틴을 생성하기 위해 JSON 응답을 만들어 봅시다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">completion = client.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">completions</span>.<span class=\"hljs-title function_\">create</span>(\n  model=<span class=\"hljs-variable constant_\">MODEL</span>,\n  response_format={<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"json_object\"</span>},\n  messages=[\n    {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"system\"</span>, <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"You are a trainer who always responds in JSON\"</span>},\n    {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"Create a weekly workout routine for me\"</span>}\n  ]\n)\n\n<span class=\"hljs-title function_\">print</span>(completion.<span class=\"hljs-property\">choices</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">message</span>)\njson.<span class=\"hljs-title function_\">loads</span>(completion.<span class=\"hljs-property\">choices</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">message</span>.<span class=\"hljs-property\">content</span>)\n</code></pre>\n<h1>3. Image Understanding</h1>\n<p>GPT-4o can also understand and process images. We’ll explore how to work with images by encoding them in base64.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1080/0*pYZ8nvgtWiL55IhN.gif\" alt=\"Image\"></p>\n<div class=\"content-ad\"></div>\n<h2>단계 1: 이미지 인코딩</h2>\n<p>먼저 이미지를 base64로 인코딩하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> <span class=\"hljs-title class_\">IPython</span>.<span class=\"hljs-property\">display</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Image</span>, display\n<span class=\"hljs-keyword\">import</span> base64\n\n<span class=\"hljs-variable constant_\">IMAGE_PATH</span> = <span class=\"hljs-string\">\"/content/IMG-20240118-WA0023.jpg\"</span>\n\ndef <span class=\"hljs-title function_\">encode_image</span>(image_path):\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title function_\">open</span>(image_path, <span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">image_file</span>:\n        <span class=\"hljs-keyword\">return</span> base64.<span class=\"hljs-title function_\">b64encode</span>(image_file.<span class=\"hljs-title function_\">read</span>()).<span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-string\">\"utf-8\"</span>)\n\nbase64_image = <span class=\"hljs-title function_\">encode_image</span>(<span class=\"hljs-variable constant_\">IMAGE_PATH</span>)\n<span class=\"hljs-title function_\">display</span>(<span class=\"hljs-title class_\">Image</span>(<span class=\"hljs-variable constant_\">IMAGE_PATH</span>))\n</code></pre>\n<h2>단계 2: 이미지 분석</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">response = client.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">completions</span>.<span class=\"hljs-title function_\">create</span>(\n    model=<span class=\"hljs-variable constant_\">MODEL</span>,\n    messages=[\n        {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"system\"</span>, <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"당신은 친절하고 마크다운으로 응답하는 도우미입니다. 수학 숙제를 도와주세요!\"</span>},\n        {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-string\">\"content\"</span>: [\n            {<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"text\"</span>, <span class=\"hljs-string\">\"text\"</span>: <span class=\"hljs-string\">\"꽃의 색깔은 무엇인가요?\"</span>},\n            {<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"image_url\"</span>, <span class=\"hljs-string\">\"image_url\"</span>: {<span class=\"hljs-string\">\"url\"</span>: f<span class=\"hljs-string\">\"data:image/png;base64,{base64_image}\"</span>}}\n        ]}\n    ],\n    temperature=<span class=\"hljs-number\">0.0</span>,\n)\n\n<span class=\"hljs-title function_\">print</span>(response.<span class=\"hljs-property\">choices</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">message</span>.<span class=\"hljs-property\">content</span>)\n</code></pre>\n<h2>단계 3: URL 이미지 분석</h2>\n<p>URL에서 직접 이미지를 분석할 수도 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">response = client.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">completions</span>.<span class=\"hljs-title function_\">create</span>(\n    model=<span class=\"hljs-variable constant_\">MODEL</span>,\n    messages=[\n        {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"system\"</span>, <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"마크다운으로 응답하는 도움이 되는 도우미에요. 수학 숙제를 도와줄게요!\"</span>},\n        {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-string\">\"content\"</span>: [\n            {<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"text\"</span>, <span class=\"hljs-string\">\"text\"</span>: <span class=\"hljs-string\">\"꽃의 색깔은 무엇인가요?\"</span>},\n            {<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"image_url\"</span>, <span class=\"hljs-string\">\"image_url\"</span>: {<span class=\"hljs-string\">\"url\"</span>: <span class=\"hljs-string\">\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/Ranunculus_repens_1_%28cropped%29.JPG/192px-Ranunculus_repens_1_%28cropped%29.JPG\"</span>}\n        ]}\n    ],\n    temperature=<span class=\"hljs-number\">0.0</span>,\n)\n\n<span class=\"hljs-title function_\">print</span>(response.<span class=\"hljs-property\">choices</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">message</span>.<span class=\"hljs-property\">content</span>)\n</code></pre>\n<h1>4. Function Calling</h1>\n<p>GPT-4o는 사용자 입력에 기반하여 미리 정의된 함수를 호출할 수 있어요. 외부 데이터 소스나 서비스를 통합하는 데 특히 유용합니다.</p>\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/0*YKVvRxnSDMQEWPqb.gif\">\n<div class=\"content-ad\"></div>\n<h2>단계 1: 함수 정의</h2>\n<p>NBA 경기의 현재 점수를 가져오는 함수를 정의하세요.</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">get_nba_game_score</span>(team):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">\"lakers\"</span> <span class=\"hljs-keyword\">in</span> team.<span class=\"hljs-title function_\">lower</span>():\n        <span class=\"hljs-keyword\">return</span> json.<span class=\"hljs-title function_\">dumps</span>({<span class=\"hljs-string\">\"team\"</span>: <span class=\"hljs-string\">\"레이커스\"</span>, <span class=\"hljs-string\">\"score\"</span>: <span class=\"hljs-string\">\"102\"</span>, <span class=\"hljs-string\">\"opponent\"</span>: <span class=\"hljs-string\">\"워리어스\"</span>, <span class=\"hljs-string\">\"opponent_score\"</span>: <span class=\"hljs-string\">\"98\"</span>})\n    elif <span class=\"hljs-string\">\"bulls\"</span> <span class=\"hljs-keyword\">in</span> team.<span class=\"hljs-title function_\">lower</span>():\n        <span class=\"hljs-keyword\">return</span> json.<span class=\"hljs-title function_\">dumps</span>({<span class=\"hljs-string\">\"team\"</span>: <span class=\"hljs-string\">\"불스\"</span>, <span class=\"hljs-string\">\"score\"</span>: <span class=\"hljs-string\">\"89\"</span>, <span class=\"hljs-string\">\"opponent\"</span>: <span class=\"hljs-string\">\"셀틱스\"</span>, <span class=\"hljs-string\">\"opponent_score\"</span>: <span class=\"hljs-string\">\"95\"</span>})\n    <span class=\"hljs-attr\">else</span>:\n        <span class=\"hljs-keyword\">return</span> json.<span class=\"hljs-title function_\">dumps</span>({<span class=\"hljs-string\">\"team\"</span>: team, <span class=\"hljs-string\">\"score\"</span>: <span class=\"hljs-string\">\"N/A\"</span>, <span class=\"hljs-string\">\"opponent\"</span>: <span class=\"hljs-string\">\"N/A\"</span>, <span class=\"hljs-string\">\"opponent_score\"</span>: <span class=\"hljs-string\">\"N/A\"</span>})\n</code></pre>\n<h2>단계 2: 대화 초기화 및 함수 호출</h2>\n<div class=\"content-ad\"></div>\n<p>모델이 이 함수를 호출할 수 있는 대화를 만들어보세요.</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">function_calling</span>():\n    messages = [{<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"레이커스 게임 점수가 어떻게 되나요?\"</span>}]\n\n    tools = [\n        {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"function\"</span>,\n            <span class=\"hljs-string\">\"function\"</span>: {\n                <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"get_nba_game_score\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"주어진 팀의 NBA 게임의 현재 점수를 가져옵니다.\"</span>,\n                <span class=\"hljs-string\">\"parameters\"</span>: {\n                    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"object\"</span>,\n                    <span class=\"hljs-string\">\"properties\"</span>: {\n                        <span class=\"hljs-string\">\"team\"</span>: {<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"string\"</span>, <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"NBA 팀의 이름, 예: 레이커스, 불스\"</span>},\n                    },\n                    <span class=\"hljs-string\">\"required\"</span>: [<span class=\"hljs-string\">\"team\"</span>],\n                },\n            },\n        }\n    ]\n\n    response = client.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">completions</span>.<span class=\"hljs-title function_\">create</span>(\n        model=<span class=\"hljs-variable constant_\">MODEL</span>,\n        messages=messages,\n        tools=tools,\n        tool_choice=<span class=\"hljs-string\">\"auto\"</span>,\n    )\n\n    response_message = response.<span class=\"hljs-property\">choices</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">message</span>\n    tool_calls = response_message.<span class=\"hljs-property\">tool_calls</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">tool_calls</span>:\n        available_functions = {<span class=\"hljs-string\">\"get_nba_game_score\"</span>: get_nba_game_score}\n        messages.<span class=\"hljs-title function_\">append</span>(response_message)\n\n        <span class=\"hljs-keyword\">for</span> tool_call <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">tool_calls</span>:\n            function_name = tool_call.<span class=\"hljs-property\">function</span>.<span class=\"hljs-property\">name</span>\n            function_to_call = available_functions[function_name]\n            function_args = json.<span class=\"hljs-title function_\">loads</span>(tool_call.<span class=\"hljs-property\">function</span>.<span class=\"hljs-property\">arguments</span>)\n\n            function_response = <span class=\"hljs-title function_\">function_to_call</span>(team=function_args.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"team\"</span>))\n\n            messages.<span class=\"hljs-title function_\">append</span>(\n                {<span class=\"hljs-string\">\"tool_call_id\"</span>: tool_call.<span class=\"hljs-property\">id</span>, <span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"tool\"</span>, <span class=\"hljs-string\">\"name\"</span>: function_name, <span class=\"hljs-string\">\"content\"</span>: function_response}\n            )\n\n        second_response = client.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">completions</span>.<span class=\"hljs-title function_\">create</span>(\n            model=<span class=\"hljs-variable constant_\">MODEL</span>,\n            messages=messages,\n        )\n\n        <span class=\"hljs-keyword\">return</span> second_response\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">function_calling</span>())\n</code></pre>\n<p>축하합니다!</p>\n<p>이제 Google Colab에서 GPT-4o를 설정하고 사용하는 방법을 배웠습니다. 이 가이드는 기본 텍스트 완성, JSON 응답, 이미지 처리 및 함수 호출 내용을 다루었습니다. 이러한 기능을 확장하여 다양한 분야의 정교한 AI 응용프로그램을 구축할 수 있습니다. 즐거운 코딩하세요!</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/0*e35njv6_nLGt-8QY.gif\" alt=\"Image\"></p>\n</body>\n</html>\n"},"__N_SSG":true}