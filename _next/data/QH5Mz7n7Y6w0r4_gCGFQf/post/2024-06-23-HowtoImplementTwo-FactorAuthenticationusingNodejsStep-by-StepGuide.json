{"pageProps":{"post":{"title":"Nodejs를 이용한 이중 인증 구현 단계별 가이드","description":"","date":"2024-06-23 13:21","slug":"2024-06-23-HowtoImplementTwo-FactorAuthenticationusingNodejsStep-by-StepGuide","content":"\n\n오늘날의 디지턈 시대에서는 보안이 매우 중요합니다, 특히 웹 애플리케이션의 경우에는 더욱 그렇습니다. 두 단계 인증(2FA)을 구현하는 것은 애플리케이션의 보안을 향상시키는 효율적인 기술입니다.\n\n이 게시물은 node.js 개발자에게 가치 있는 정보일 것이지만, 개발자가 아니더라도 모든 프로그래밍 언어에 적용되는 주제이므로 여러분에게 많은 도움이 될 것입니다. Twilio Authy, Microsoft Authenticator, Google Authenticator 등 인기있는 인증 앱이 많이 있습니다. 이 튜토리얼에서는 Google Authenticator를 사용하여 2FA가 무엇인지, 애플리케이션 보안에 어떻게 도움이 되는지, 그리고 구현하는 방법에 대한 단계별 지침을 제공할 것입니다.\n\n## 두 단계 인증(2FA)이란 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n이중 인증 또는 2FA는 사용자가 자신의 신원을 확인하기 위해 두 가지 다른 요소를 제공해야하는 보안 메커니즘입니다. 이러한 요소는 일반적으로 세 가지 범주로 나뉩니다:\n\n- 알고 있는 것 (예: 비밀번호)\n- 소지품 (예: 모바일 기기)\n- 본인인 것 (예: 생체 인식)\n\n일반적인 사용자 이름 및 비밀번호 조합 이외에도 2FA는 더 높은 수준의 보안을 추가합니다. 해커가 비밀번호를 얻거나 추측해도 두 번째 요소 없이 계정에 액세스할 수 없습니다.\n\n## Google Authenticator를 사용한 Node.js에서의 2FA 구현\n\n<div class=\"content-ad\"></div>\n\n2FA를 Node.js 애플리케이션에 Google Authenticator 앱을 사용하여 통합하는 방법을 알아봐요. 코딩 부분에 들어가기 전에 먼저 이 과정에 포함된 단계를 이해해 봅시다.\n\n- 비밀 키 생성: 사용자 등록 시마다 각 사용자를 위한 고유한 비밀 키를 생성해요.\n- QR 코드 생성: 비밀 키를 사용하여 사용자가 Google Authenticator 앱으로 스캔할 수 있는 QR 코드를 생성해요.\n- 사용자 설정: 애플리케이션에서 사용자에게 QR 코드 또는 비밀 키를 제공해요. 사용자는 Google Authenticator 앱으로 QR 코드를 스캔해야 해요.\n- OTP 코드 생성: 서버에서 비밀 키를 사용하여 시간 기반 일회용 암호(TOTP)를 생성해요. 이 코드는 매 30초마다 바뀌어요.\n- 사용자 인증: 로그인 시 사용자는 Google Authenticator 앱에서 생성된 현재 OTP를 입력해야 해요.\n- 검증: 사용자가 입력한 OTP를 서버에서 생성된 OTP와 비교해요. 일치하면 사용자가 인증됩니다.\n\n이제 재미있는 부분이 다가와요 :) 우리는 위 단계들을 모두 코드로 변환할 거에요.\n\n<div class=\"content-ad\"></div>\n\n양방향 인증을 구현하기 전에 다음 사전 요구 사항을 갖추었는지 확인해주세요:\n\n- JavaScript 또는 TypeScript의 기본 지식.\n- API 디자인과 CRUD 패턴에 대한 기본 이해.\n- 시스템에 Node.js의 최신 버전이 설치되어 있어야 합니다.\n- Node.js와 Express에 대한 기본 지식이 있어야 합니다.\n\n## 단계 1: Node.js 프로젝트 설정\n\n시작하기 위해 프로젝트용 새 디렉토리를 만들고 터미널에서 해당 디렉토리로 이동한 후 새 Node.js 프로젝트를 초기화하고 필요한 패키지를 설치하세요. 아래 명령어를 터미널에서 실행해보세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nmkdir node_2fa\ncd node_2fa\nnpm init -y\nnpm install express otpauth hi-base32\n```\n\n- express – Node.js 웹 프레임워크\n- otpauth – TOTP를 생성하고 유효성을 검사하는 라이브러리\n- hi-base32 – 데이터를 Base32 형식으로 인코딩 및 디코딩하는 기능을 제공하는 라이브러리입니다. Authenticator 앱에서 TOTP를 생성하는 데 사용할 것입니다.\n\n## 단계 2: Express 서버 설정\n\n프로젝트에 index.js 파일을 만들고 기본 express 서버를 설정하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/', (req, res) => {\n  res.send('이중 인증 예제');\n});\n\napp.listen(port, () => {\n  console.log(`서버가 포트 ${port}에서 실행 중입니다`);\n});\n```\n\n## 단계 3: 사용자 등록\n\n이 단계에서는 사용자 등록을 구현하고 사용자 정보를 안전하게 저장합니다. 보통 이를 위해 데이터베이스를 사용하지만, 이 예시에서는 간단함을 위해 내부 배열을 사용합니다. MongoDB를 이용한 포괄적인 예시는 제 GitHub 레포지토리에서 확인할 수 있습니다. https://github.com/Nik720/2fa-nodejs\n\n```js\nconst users = [];\n\n// 새로운 사용자 등록을 위한 엔드포인트\napp.post('/register', (req, res) => {\n  const { username, password } = req.body;\n  const id = users.length + 1;\n\n  // 사용자 정보를 안전하게 저장 (사용자의 비밀번호 포함)\n  users.push({ id, username, password });\n  res.status(201).send({\n    status: \"성공\",\n    message: \"사용자가 성공적으로 생성되었습니다\"\n  });\n});\n```\n\n<div class=\"content-ad\"></div>\n\n\n![Step 4: Enable Two-Way Authentication](/assets/img/2024-06-23-HowtoImplementTwo-FactorAuthenticationusingNodejsStep-by-StepGuide_1.png)\n\n## 단계 4: 두 가지 요소 인증 활성화\n\n이제 otpauth 라이브러리를 사용하여 두 가지 요인 인증을 구축해 봅시다. 사용자가 인증 앱으로 스캔할 수있는 QR 코드를 표시하고 일회용 코드를 확인하는 비밀 키를 생성하는 것이 이 프로세스의 단계입니다.\n\n```js\nconst OTPAuth = require(\"otpauth\");\nconst encode = require(\"hi-base32\");\nconst QRCode = require('qrcode');\n\n// 두 가지 요소 인증 활성화를 위한 엔드포인트\napp.post('/enable-2fa', (req, res) => {\n  const { username } = req.body;\n\n  // 사용자를 사용자 이름으로 찾기 (여기서는 데이터베이스를 사용해야 함)\n  const user = users.find((u) => u.username === username);\n\n  if (!user) {\n    return res.status(404).send('사용자를 찾을 수 없습니다.');\n  }\n\n  // 사용자를 위한 비밀 키 생성\n  const base32_secret = generateBase32Secret();\n  user.secret = base32_secret;\n\n  // 사용자가 스캔할 QR 코드 URL 생성\n  let totp = new OTPAuth.TOTP({\n      issuer: \"YourSite.com\",\n      label: \"YourSite\",\n      algorithm: \"SHA1\",\n      digits: 6,\n      secret: base32_secret,\n  });\n\n  let otpauth_url = totp.toString();\n\n  // 생성된 QR 코드를 응답으로 보내기\n  QRCode.toDataURL(otpauth_url, (err) => {\n        if(err) {\n            return res.status(500).json({\n                status: 'fail',\n                message: \"QR 코드 생성 중 오류 발생\"\n            })\n        }\n        res.json({\n            status: \"success\",\n            data: {\n                qrCodeUrl: qrUrl,\n                secret: base32_secret\n            }\n        })\n    })\n});\n\nconst generateBase32Secret = () => {\n  const buffer = crypto.randomBytes(15);\n  const base32 = encode(buffer).replace(/=/g, \"\").substring(0, 24);\n  return base32;\n};\n```\n\n\n<div class=\"content-ad\"></div>\n\n위 코드 스니펫에서 개발한 GenerateBase32Secret() 메서드는 base32로 인코딩된 비밀 키를 생성하는 데 사용됩니다. 이 키는 TOTP 생성 메커니즘의 중요한 구성 요소입니다. 또한 필요한 인수로 인스턴스화 한 후에 totpvariable에 OTPAuth.TOTP 클래스를 할당했습니다.\n\n다음으로, totp.toString() 함수를 사용하여 TOTP Auth URL을 가져왔습니다. QR 코드를 생성하고 응용 프로그램에서 TOTP 인증을 구성하기 위해 필요한 인코딩된 비밀과 필요한 설정은 이 URL에서 사용할 수 있습니다. 또한, 미래에 이러한 값을 사용할 수 있도록 base32 비밀 문자열을 사용자 객체에 저장했습니다.\n\n마지막 단계에서는 QR 코드 라이브러리를 사용하여 otpauth_url로 QR 코드를 만들고 JSON 응답에 QR 코드 URL과 base32 비밀 문자열을 반환했습니다. 클라이언트에게 이러한 값을 반환함으로써 클라이언트 측 구현을 유연하고 쉽게 할 수 있습니다. 이를 통해 클라이언트는 base32 비밀 문자열을 사용하거나 인증 애플리케이션을 스캔하여 QR 코드를 사용하여 관련 TOTP 토큰을 생성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n인증 확인의 마지막 단계로 진행하기 전에, 먼저 인증 앱을 구성하여 다음 단계에서 토큰으로 제공될 6자리 코드를 생성해야 합니다.\n\nGoogle Authenticator 앱을 활성화하기 위해 중요한 몇 가지 단계가 필요합니다. 이를 편리하게 하기 위해 여기서는 Chrome 확장 프로그램을 사용하고 있습니다. API에서 제공된 base64 비밀을 수동으로 입력하거나 계정을 추가하기 위해 QR 코드를 스캔해야 합니다.\n\n![2024-06-23-HowtoImplementTwo-FactorAuthenticationusingNodejsStep-by-StepGuide_3.png](/assets/img/2024-06-23-HowtoImplementTwo-FactorAuthenticationusingNodejsStep-by-StepGuide_3.png)\n\n## 단계 5: 양방향 인증 확인하기\n\n<div class=\"content-ad\"></div>\n\n마침내, 사용자가 제공한 일회용 코드를 확인하는 엔드포인트를 구현하세요. 이 단계에서는 인증 앱에서 생성된 6자리 코드를 전달하여 사용자의 신원을 확인해야 합니다.\n\n```js\n// 두 단계 인증 코드를 검증하는 엔드포인트\napp.post('/verify-2fa', (req, res) => {\n  const { username, token } = req.body;\n\n  // 사용자명으로 사용자 찾기\n  const user = users.find((u) => u.username === username);\n\n  if (!user) {\n    return res.status(404).send('사용자를 찾을 수 없습니다');\n  }\n\n  // 토큰을 검증합니다.\n  let totp = new OTPAuth.TOTP({\n      issuer: \"YourSite.com\",\n      label: \"YourSite\",\n      algorithm: \"SHA1\",\n      digits: 6,\n      secret: user.secret!,\n   });\n\n  let delta = totp.validate({ token });\n\n  if(delta) {\n        res.json({\n            status: \"success\",\n            message: \"인증 성공\"\n        })\n    } else {\n        res.status(401).json({\n            status: \"fail\",\n            message: \"인증 실패\"\n        }) \n    }\n});\n```\n\n<img src=\"/assets/img/2024-06-23-HowtoImplementTwo-FactorAuthenticationusingNodejsStep-by-StepGuide_4.png\" />\n\n이 게시물은 2단계 인증의 기본 설정 및 사용법을 다룹니다. 사용자의 존재 여부를 확인하는 기능을 구현했지만, 실제 구현에서는 2FA를 활성화하거나 비활성화하거나 인증하기 전에 사용자 로그인 상태를 추가로 확인해야 합니다.\n\n<div class=\"content-ad\"></div>\n\nMongoDB 데이터베이스를 활용한 포괄적인 예제를 구축했어요. 모든 필수 API 엔드포인트와 미들웨어를 통합했습니다. 자세한 내용은 GitHub 레포지토리를 방문해주세요. https://github.com/Nik720/2fa-nodejs\n\n최초 블로그 게시: https://codeshakti.com/how-to-implement-two-factor-authentication-using-node-js-step-by-step-guide/\n\n## 결론\n\n이 게시물에서 설명된 기술들인 QR 코드 기반 토큰 생성 및 안전한 OTP 확인을 적용함으로써, 무단 접근에 대한 강력한 방어막을 만들고 Node.js 사용자에게 비교할 수 없는 보호를 제공할 수 있습니다. 오늘부터 2FA 시스템을 구축하여 더 안전한 디지털 공간으로 나아가는 첫걸음을 내딛어보세요!\n\n<div class=\"content-ad\"></div>\n\n# 이 글을 즐겼나요?\n\n다음 글에서는 노드 JS 클러스터 모듈을 활용하여 로드 밸런서를 만드는 방법에 대해 더 자세히 다룰 것입니다.\n\n제 글이 마음에 드셨다면 아래 작은 👏을 눌러주세요 (50번 타포도 가능합니다). 더 많은 기술 기사를 위해 팔로우해주세요. 친구들 👦, 동료들 👭 🧑‍🤝‍🧑 와 공유해주세요.\n\n여러분의 지지를 감사히 받겠습니다. 💚 읽어 주셔서 감사합니다! 🙏\n\n<div class=\"content-ad\"></div>\n\n제 블로깅 사이트 codeshakti.com에서 기술 블로그에 대해 더 많은 정보를 찾아보세요.\n\n코딩 즐거움을 느끼세요... 😁","ogImage":{"url":"/assets/img/2024-06-23-HowtoImplementTwo-FactorAuthenticationusingNodejsStep-by-StepGuide_0.png"},"coverImage":"/assets/img/2024-06-23-HowtoImplementTwo-FactorAuthenticationusingNodejsStep-by-StepGuide_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>오늘날의 디지턈 시대에서는 보안이 매우 중요합니다, 특히 웹 애플리케이션의 경우에는 더욱 그렇습니다. 두 단계 인증(2FA)을 구현하는 것은 애플리케이션의 보안을 향상시키는 효율적인 기술입니다.</p>\n<p>이 게시물은 node.js 개발자에게 가치 있는 정보일 것이지만, 개발자가 아니더라도 모든 프로그래밍 언어에 적용되는 주제이므로 여러분에게 많은 도움이 될 것입니다. Twilio Authy, Microsoft Authenticator, Google Authenticator 등 인기있는 인증 앱이 많이 있습니다. 이 튜토리얼에서는 Google Authenticator를 사용하여 2FA가 무엇인지, 애플리케이션 보안에 어떻게 도움이 되는지, 그리고 구현하는 방법에 대한 단계별 지침을 제공할 것입니다.</p>\n<h2>두 단계 인증(2FA)이란 무엇인가요?</h2>\n<div class=\"content-ad\"></div>\n<p>이중 인증 또는 2FA는 사용자가 자신의 신원을 확인하기 위해 두 가지 다른 요소를 제공해야하는 보안 메커니즘입니다. 이러한 요소는 일반적으로 세 가지 범주로 나뉩니다:</p>\n<ul>\n<li>알고 있는 것 (예: 비밀번호)</li>\n<li>소지품 (예: 모바일 기기)</li>\n<li>본인인 것 (예: 생체 인식)</li>\n</ul>\n<p>일반적인 사용자 이름 및 비밀번호 조합 이외에도 2FA는 더 높은 수준의 보안을 추가합니다. 해커가 비밀번호를 얻거나 추측해도 두 번째 요소 없이 계정에 액세스할 수 없습니다.</p>\n<h2>Google Authenticator를 사용한 Node.js에서의 2FA 구현</h2>\n<div class=\"content-ad\"></div>\n<p>2FA를 Node.js 애플리케이션에 Google Authenticator 앱을 사용하여 통합하는 방법을 알아봐요. 코딩 부분에 들어가기 전에 먼저 이 과정에 포함된 단계를 이해해 봅시다.</p>\n<ul>\n<li>비밀 키 생성: 사용자 등록 시마다 각 사용자를 위한 고유한 비밀 키를 생성해요.</li>\n<li>QR 코드 생성: 비밀 키를 사용하여 사용자가 Google Authenticator 앱으로 스캔할 수 있는 QR 코드를 생성해요.</li>\n<li>사용자 설정: 애플리케이션에서 사용자에게 QR 코드 또는 비밀 키를 제공해요. 사용자는 Google Authenticator 앱으로 QR 코드를 스캔해야 해요.</li>\n<li>OTP 코드 생성: 서버에서 비밀 키를 사용하여 시간 기반 일회용 암호(TOTP)를 생성해요. 이 코드는 매 30초마다 바뀌어요.</li>\n<li>사용자 인증: 로그인 시 사용자는 Google Authenticator 앱에서 생성된 현재 OTP를 입력해야 해요.</li>\n<li>검증: 사용자가 입력한 OTP를 서버에서 생성된 OTP와 비교해요. 일치하면 사용자가 인증됩니다.</li>\n</ul>\n<p>이제 재미있는 부분이 다가와요 :) 우리는 위 단계들을 모두 코드로 변환할 거에요.</p>\n<div class=\"content-ad\"></div>\n<p>양방향 인증을 구현하기 전에 다음 사전 요구 사항을 갖추었는지 확인해주세요:</p>\n<ul>\n<li>JavaScript 또는 TypeScript의 기본 지식.</li>\n<li>API 디자인과 CRUD 패턴에 대한 기본 이해.</li>\n<li>시스템에 Node.js의 최신 버전이 설치되어 있어야 합니다.</li>\n<li>Node.js와 Express에 대한 기본 지식이 있어야 합니다.</li>\n</ul>\n<h2>단계 1: Node.js 프로젝트 설정</h2>\n<p>시작하기 위해 프로젝트용 새 디렉토리를 만들고 터미널에서 해당 디렉토리로 이동한 후 새 Node.js 프로젝트를 초기화하고 필요한 패키지를 설치하세요. 아래 명령어를 터미널에서 실행해보세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">mkdir node_2fa\ncd node_2fa\nnpm init -y\nnpm install express otpauth hi-base32\n</code></pre>\n<ul>\n<li>express – Node.js 웹 프레임워크</li>\n<li>otpauth – TOTP를 생성하고 유효성을 검사하는 라이브러리</li>\n<li>hi-base32 – 데이터를 Base32 형식으로 인코딩 및 디코딩하는 기능을 제공하는 라이브러리입니다. Authenticator 앱에서 TOTP를 생성하는 데 사용할 것입니다.</li>\n</ul>\n<h2>단계 2: Express 서버 설정</h2>\n<p>프로젝트에 index.js 파일을 만들고 기본 express 서버를 설정하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n<span class=\"hljs-keyword\">const</span> port = <span class=\"hljs-number\">3000</span>;\n\napp.<span class=\"hljs-title function_\">use</span>(express.<span class=\"hljs-title function_\">json</span>());\napp.<span class=\"hljs-title function_\">use</span>(express.<span class=\"hljs-title function_\">urlencoded</span>({ <span class=\"hljs-attr\">extended</span>: <span class=\"hljs-literal\">true</span> }));\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n  res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'이중 인증 예제'</span>);\n});\n\napp.<span class=\"hljs-title function_\">listen</span>(port, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`서버가 포트 <span class=\"hljs-subst\">${port}</span>에서 실행 중입니다`</span>);\n});\n</code></pre>\n<h2>단계 3: 사용자 등록</h2>\n<p>이 단계에서는 사용자 등록을 구현하고 사용자 정보를 안전하게 저장합니다. 보통 이를 위해 데이터베이스를 사용하지만, 이 예시에서는 간단함을 위해 내부 배열을 사용합니다. MongoDB를 이용한 포괄적인 예시는 제 GitHub 레포지토리에서 확인할 수 있습니다. <a href=\"https://github.com/Nik720/2fa-nodejs\" rel=\"nofollow\" target=\"_blank\">https://github.com/Nik720/2fa-nodejs</a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> users = [];\n\n<span class=\"hljs-comment\">// 새로운 사용자 등록을 위한 엔드포인트</span>\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/register'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> { username, password } = req.<span class=\"hljs-property\">body</span>;\n  <span class=\"hljs-keyword\">const</span> id = users.<span class=\"hljs-property\">length</span> + <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-comment\">// 사용자 정보를 안전하게 저장 (사용자의 비밀번호 포함)</span>\n  users.<span class=\"hljs-title function_\">push</span>({ id, username, password });\n  res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">201</span>).<span class=\"hljs-title function_\">send</span>({\n    <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">\"성공\"</span>,\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"사용자가 성공적으로 생성되었습니다\"</span>\n  });\n});\n</code></pre>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-23-HowtoImplementTwo-FactorAuthenticationusingNodejsStep-by-StepGuide_1.png\" alt=\"Step 4: Enable Two-Way Authentication\"></p>\n<h2>단계 4: 두 가지 요소 인증 활성화</h2>\n<p>이제 otpauth 라이브러리를 사용하여 두 가지 요인 인증을 구축해 봅시다. 사용자가 인증 앱으로 스캔할 수있는 QR 코드를 표시하고 일회용 코드를 확인하는 비밀 키를 생성하는 것이 이 프로세스의 단계입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">OTPAuth</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"otpauth\"</span>);\n<span class=\"hljs-keyword\">const</span> encode = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"hi-base32\"</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">QRCode</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'qrcode'</span>);\n\n<span class=\"hljs-comment\">// 두 가지 요소 인증 활성화를 위한 엔드포인트</span>\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/enable-2fa'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> { username } = req.<span class=\"hljs-property\">body</span>;\n\n  <span class=\"hljs-comment\">// 사용자를 사용자 이름으로 찾기 (여기서는 데이터베이스를 사용해야 함)</span>\n  <span class=\"hljs-keyword\">const</span> user = users.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">u</span>) =></span> u.<span class=\"hljs-property\">username</span> === username);\n\n  <span class=\"hljs-keyword\">if</span> (!user) {\n    <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">404</span>).<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'사용자를 찾을 수 없습니다.'</span>);\n  }\n\n  <span class=\"hljs-comment\">// 사용자를 위한 비밀 키 생성</span>\n  <span class=\"hljs-keyword\">const</span> base32_secret = <span class=\"hljs-title function_\">generateBase32Secret</span>();\n  user.<span class=\"hljs-property\">secret</span> = base32_secret;\n\n  <span class=\"hljs-comment\">// 사용자가 스캔할 QR 코드 URL 생성</span>\n  <span class=\"hljs-keyword\">let</span> totp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OTPAuth</span>.<span class=\"hljs-title function_\">TOTP</span>({\n      <span class=\"hljs-attr\">issuer</span>: <span class=\"hljs-string\">\"YourSite.com\"</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">\"YourSite\"</span>,\n      <span class=\"hljs-attr\">algorithm</span>: <span class=\"hljs-string\">\"SHA1\"</span>,\n      <span class=\"hljs-attr\">digits</span>: <span class=\"hljs-number\">6</span>,\n      <span class=\"hljs-attr\">secret</span>: base32_secret,\n  });\n\n  <span class=\"hljs-keyword\">let</span> otpauth_url = totp.<span class=\"hljs-title function_\">toString</span>();\n\n  <span class=\"hljs-comment\">// 생성된 QR 코드를 응답으로 보내기</span>\n  <span class=\"hljs-title class_\">QRCode</span>.<span class=\"hljs-title function_\">toDataURL</span>(otpauth_url, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n        <span class=\"hljs-keyword\">if</span>(err) {\n            <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">500</span>).<span class=\"hljs-title function_\">json</span>({\n                <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'fail'</span>,\n                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"QR 코드 생성 중 오류 발생\"</span>\n            })\n        }\n        res.<span class=\"hljs-title function_\">json</span>({\n            <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">\"success\"</span>,\n            <span class=\"hljs-attr\">data</span>: {\n                <span class=\"hljs-attr\">qrCodeUrl</span>: qrUrl,\n                <span class=\"hljs-attr\">secret</span>: base32_secret\n            }\n        })\n    })\n});\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">generateBase32Secret</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> buffer = crypto.<span class=\"hljs-title function_\">randomBytes</span>(<span class=\"hljs-number\">15</span>);\n  <span class=\"hljs-keyword\">const</span> base32 = <span class=\"hljs-title function_\">encode</span>(buffer).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/=/g</span>, <span class=\"hljs-string\">\"\"</span>).<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">24</span>);\n  <span class=\"hljs-keyword\">return</span> base32;\n};\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>위 코드 스니펫에서 개발한 GenerateBase32Secret() 메서드는 base32로 인코딩된 비밀 키를 생성하는 데 사용됩니다. 이 키는 TOTP 생성 메커니즘의 중요한 구성 요소입니다. 또한 필요한 인수로 인스턴스화 한 후에 totpvariable에 OTPAuth.TOTP 클래스를 할당했습니다.</p>\n<p>다음으로, totp.toString() 함수를 사용하여 TOTP Auth URL을 가져왔습니다. QR 코드를 생성하고 응용 프로그램에서 TOTP 인증을 구성하기 위해 필요한 인코딩된 비밀과 필요한 설정은 이 URL에서 사용할 수 있습니다. 또한, 미래에 이러한 값을 사용할 수 있도록 base32 비밀 문자열을 사용자 객체에 저장했습니다.</p>\n<p>마지막 단계에서는 QR 코드 라이브러리를 사용하여 otpauth_url로 QR 코드를 만들고 JSON 응답에 QR 코드 URL과 base32 비밀 문자열을 반환했습니다. 클라이언트에게 이러한 값을 반환함으로써 클라이언트 측 구현을 유연하고 쉽게 할 수 있습니다. 이를 통해 클라이언트는 base32 비밀 문자열을 사용하거나 인증 애플리케이션을 스캔하여 QR 코드를 사용하여 관련 TOTP 토큰을 생성할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>인증 확인의 마지막 단계로 진행하기 전에, 먼저 인증 앱을 구성하여 다음 단계에서 토큰으로 제공될 6자리 코드를 생성해야 합니다.</p>\n<p>Google Authenticator 앱을 활성화하기 위해 중요한 몇 가지 단계가 필요합니다. 이를 편리하게 하기 위해 여기서는 Chrome 확장 프로그램을 사용하고 있습니다. API에서 제공된 base64 비밀을 수동으로 입력하거나 계정을 추가하기 위해 QR 코드를 스캔해야 합니다.</p>\n<p><img src=\"/assets/img/2024-06-23-HowtoImplementTwo-FactorAuthenticationusingNodejsStep-by-StepGuide_3.png\" alt=\"2024-06-23-HowtoImplementTwo-FactorAuthenticationusingNodejsStep-by-StepGuide_3.png\"></p>\n<h2>단계 5: 양방향 인증 확인하기</h2>\n<div class=\"content-ad\"></div>\n<p>마침내, 사용자가 제공한 일회용 코드를 확인하는 엔드포인트를 구현하세요. 이 단계에서는 인증 앱에서 생성된 6자리 코드를 전달하여 사용자의 신원을 확인해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 두 단계 인증 코드를 검증하는 엔드포인트</span>\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/verify-2fa'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> { username, token } = req.<span class=\"hljs-property\">body</span>;\n\n  <span class=\"hljs-comment\">// 사용자명으로 사용자 찾기</span>\n  <span class=\"hljs-keyword\">const</span> user = users.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">u</span>) =></span> u.<span class=\"hljs-property\">username</span> === username);\n\n  <span class=\"hljs-keyword\">if</span> (!user) {\n    <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">404</span>).<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">'사용자를 찾을 수 없습니다'</span>);\n  }\n\n  <span class=\"hljs-comment\">// 토큰을 검증합니다.</span>\n  <span class=\"hljs-keyword\">let</span> totp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OTPAuth</span>.<span class=\"hljs-title function_\">TOTP</span>({\n      <span class=\"hljs-attr\">issuer</span>: <span class=\"hljs-string\">\"YourSite.com\"</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">\"YourSite\"</span>,\n      <span class=\"hljs-attr\">algorithm</span>: <span class=\"hljs-string\">\"SHA1\"</span>,\n      <span class=\"hljs-attr\">digits</span>: <span class=\"hljs-number\">6</span>,\n      <span class=\"hljs-attr\">secret</span>: user.<span class=\"hljs-property\">secret</span>!,\n   });\n\n  <span class=\"hljs-keyword\">let</span> delta = totp.<span class=\"hljs-title function_\">validate</span>({ token });\n\n  <span class=\"hljs-keyword\">if</span>(delta) {\n        res.<span class=\"hljs-title function_\">json</span>({\n            <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">\"success\"</span>,\n            <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"인증 성공\"</span>\n        })\n    } <span class=\"hljs-keyword\">else</span> {\n        res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">401</span>).<span class=\"hljs-title function_\">json</span>({\n            <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">\"fail\"</span>,\n            <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"인증 실패\"</span>\n        }) \n    }\n});\n</code></pre>\n<img src=\"/assets/img/2024-06-23-HowtoImplementTwo-FactorAuthenticationusingNodejsStep-by-StepGuide_4.png\">\n<p>이 게시물은 2단계 인증의 기본 설정 및 사용법을 다룹니다. 사용자의 존재 여부를 확인하는 기능을 구현했지만, 실제 구현에서는 2FA를 활성화하거나 비활성화하거나 인증하기 전에 사용자 로그인 상태를 추가로 확인해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<p>MongoDB 데이터베이스를 활용한 포괄적인 예제를 구축했어요. 모든 필수 API 엔드포인트와 미들웨어를 통합했습니다. 자세한 내용은 GitHub 레포지토리를 방문해주세요. <a href=\"https://github.com/Nik720/2fa-nodejs\" rel=\"nofollow\" target=\"_blank\">https://github.com/Nik720/2fa-nodejs</a></p>\n<p>최초 블로그 게시: <a href=\"https://codeshakti.com/how-to-implement-two-factor-authentication-using-node-js-step-by-step-guide/\" rel=\"nofollow\" target=\"_blank\">https://codeshakti.com/how-to-implement-two-factor-authentication-using-node-js-step-by-step-guide/</a></p>\n<h2>결론</h2>\n<p>이 게시물에서 설명된 기술들인 QR 코드 기반 토큰 생성 및 안전한 OTP 확인을 적용함으로써, 무단 접근에 대한 강력한 방어막을 만들고 Node.js 사용자에게 비교할 수 없는 보호를 제공할 수 있습니다. 오늘부터 2FA 시스템을 구축하여 더 안전한 디지털 공간으로 나아가는 첫걸음을 내딛어보세요!</p>\n<div class=\"content-ad\"></div>\n<h1>이 글을 즐겼나요?</h1>\n<p>다음 글에서는 노드 JS 클러스터 모듈을 활용하여 로드 밸런서를 만드는 방법에 대해 더 자세히 다룰 것입니다.</p>\n<p>제 글이 마음에 드셨다면 아래 작은 👏을 눌러주세요 (50번 타포도 가능합니다). 더 많은 기술 기사를 위해 팔로우해주세요. 친구들 👦, 동료들 👭 🧑‍🤝‍🧑 와 공유해주세요.</p>\n<p>여러분의 지지를 감사히 받겠습니다. 💚 읽어 주셔서 감사합니다! 🙏</p>\n<div class=\"content-ad\"></div>\n<p>제 블로깅 사이트 codeshakti.com에서 기술 블로그에 대해 더 많은 정보를 찾아보세요.</p>\n<p>코딩 즐거움을 느끼세요... 😁</p>\n</body>\n</html>\n"},"__N_SSG":true}