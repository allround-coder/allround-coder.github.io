{"pageProps":{"post":{"title":"Harbor 시작하기 단계별 안내","description":"","date":"2024-05-15 11:06","slug":"2024-05-15-GettingStartedwithHarborAStep-by-StepGuide","content":"\n\nHarbor는 DockerHub, ECR 또는 ACR에 의존하지 않고 컨테이너 이미지를 안전하게 저장하고 관리하는 데 도움이 되는 오픈 소스 레지스트리입니다. Docker의 오픈 소스 레지스트리 위에 보안, 식별 및 관리 기능을 추가합니다. Harbor를 사용하면 이미지에 대한 정책을 설정하고 취약점을 검사하여 역할 기반 제어를 통해 액세스를 관리할 수 있습니다. 이는 컨테이너 이미지를 안전하고 잘 관리된 상태로 유지하려는 개발자들에게 필수적인 도구입니다.\n\n![Harbor 시작하기: 진행하기 전에](/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_0.png)\n\n## 전제 조건\n\n- Chocolatey 설치하기:\n\n\n\n- 관리자 권한으로 PowerShell 터미널을 열고 다음을 실행해주세요:\n\n```js\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n```\n\n2. Chocolatey를 통해 Rancher Desktop을 설치하려면 다음 명령을 실행하세요:\n\n\n\n```js\nchoco install rancher-desktop\n```\n\n# 설정\n\n- 프로젝트 디렉토리를 생성하고 이동하세요:\n\n```js\nmkdir LearningHarbor cd LearningHarbor\n```\n\n\n\n2. Harbor Helm 저장소를 추가하고 Harbor 차트를 가져옵니다:\n\n```js\nhelm repo add harbor https://helm.goharbor.io\nhelm fetch harbor/harbor --untar cd harbor\n```\n\n3. values.yaml 파일을 편집합니다:\n\n- externalUrl 설정\n\n\n\n```js\nexternalURL: https://core.harbor.localhost\n```\n\n![Getting Started with Harbor: A Step-by-Step Guide](/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_1.png)\n\n3. 윈도우 호스트 파일 수정:\n\n- 관리자 권한으로 텍스트 편집기에서 c:\\Windows\\System32\\Drivers\\etc\\hosts 파일을 엽니다.\n- 다음 줄을 추가하세요:\n\n\n\n```js\n127.0.0.1 core.harbor.localhost\n```\n\n![Harbor](/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_2.png)\n\n# Harbor 배포\n\n- Harbor Helm 차트 설치:\n\n\n\n```js\nhelm upgrade harbor-release . --namespace harbor-helm --create-namespace --wait --install\n```\n\n2. 배포가 완료될 때까지 기다린 후 다음으로 이동하세요:\n\n- https://core.harbor.localhost\n\n![Getting Started with Harbor](/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_3.png)\n\n\n\n3. 기본 자격 증명을 사용하여 로그인하세요:\n\n- 사용자명: admin\n- 비밀번호: Harbor12345\n\n![이미지](/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_4.png)\n\n# 추가 구성\n\n\n\n- Docker를 사용하여 Harbor 레지스트리에 로그인하세요:\n\n```js\ndocker login https://core.harbor.localhost\n```\n\n동일한 자격 증명을 사용하세요:\n\n- 사용자 이름: admin\n- 비밀번호: Harbor12345\n\n\n\n# Harbor로 이미지 푸시하기\n\n참고: 사용할 로케이션 이미지인 aspiresample/api 및 aspiresample/web이 있습니다. 제 이미지 이름을 교체해도 괜찮습니다.\n\n- 이미지에 태그 붙이기\n\n```js\ndocker tag aspiresample/apiservice core.harbor.localhost/library/apiservice:latest\n```\n\n\n\n2. 이미지를 푸시하세요\n\n```js\ndocker push core.harbor.localhost/library/apiservice:latest\n```\n\n이제 Harbor UI에서 다음을 볼 수 있습니다\n\n![이미지](/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_5.png)\n\n\n\n\n![이미지](/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_6.png)\n\n# 고급 기능\n\nHarbor에는 기능을 향상시키는 몇 가지 고급 기능이 있습니다. 저는 이에 대해 자세히 다루지 않을 것입니다:\n\n- 외부 저장소 연결:\n\n\n\n\n- Harbor에 외부 저장소를 링크하고 정기적으로 해당 저장소에서 이미지를 복제하여 Harbor 레지스트리를 항상 최신 상태로 유지할 수 있습니다.\n\n![Step 7](/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_7.png)\n\n![Step 8](/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_8.png)\n\n2. 외부 인증:\n\n\n\n- Harbor은 Keycloak와 같은 외부 OIDC 서버와의 통합을 지원하여 사용자 관리와 싱글 사인온 기능을 제공합니다.\n\n![사진](/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_9.png)\n\n3. 할당량 설정:\n\n- 관리자는 프로젝트 및 저장소에 할당량을 설정하여 저장 공간 소비를 관리하고 조직 전체에서 적절하게 자원을 할당할 수 있습니다.\n\n\n\n# 마무리\n\n해법은 컨테이너 이미지를 관리하고 보호하는 강력한 솔루션을 제공합니다. 본 안내서에 나와 있는 단계에 따라 진행하면 신속하게 Harbor를 배포하여 이미지를 안전한 관리 환경에 저장할 수 있습니다. Harbor의 고급 기능인 외부 저장소 연결, 인증을 위해 Keycloak과 같은 OIDC 서버와 통합, 스토리지 할당량 설정 등은 그 유틸리티를 더욱 향상시킵니다. 이러한 기능들은 Harbor를 보안이며 효율적인 컨테이너 이미지 레지스트리를 유지하려는 개발자와 조직에 꼭 필요한 도구로 만듭니다.","ogImage":{"url":"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_0.png"},"coverImage":"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Harbor는 DockerHub, ECR 또는 ACR에 의존하지 않고 컨테이너 이미지를 안전하게 저장하고 관리하는 데 도움이 되는 오픈 소스 레지스트리입니다. Docker의 오픈 소스 레지스트리 위에 보안, 식별 및 관리 기능을 추가합니다. Harbor를 사용하면 이미지에 대한 정책을 설정하고 취약점을 검사하여 역할 기반 제어를 통해 액세스를 관리할 수 있습니다. 이는 컨테이너 이미지를 안전하고 잘 관리된 상태로 유지하려는 개발자들에게 필수적인 도구입니다.</p>\n<p><img src=\"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_0.png\" alt=\"Harbor 시작하기: 진행하기 전에\"></p>\n<h2>전제 조건</h2>\n<ul>\n<li>\n<p>Chocolatey 설치하기:</p>\n</li>\n<li>\n<p>관리자 권한으로 PowerShell 터미널을 열고 다음을 실행해주세요:</p>\n</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Set</span>-<span class=\"hljs-title class_\">ExecutionPolicy</span> <span class=\"hljs-title class_\">Bypass</span> -<span class=\"hljs-title class_\">Scope</span> <span class=\"hljs-title class_\">Process</span> -<span class=\"hljs-title class_\">Force</span>; [<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">Net</span>.<span class=\"hljs-property\">ServicePointManager</span>]::<span class=\"hljs-title class_\">SecurityProtocol</span> = [<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">Net</span>.<span class=\"hljs-property\">ServicePointManager</span>]::<span class=\"hljs-title class_\">SecurityProtocol</span> -bor <span class=\"hljs-number\">3072</span>; iex ((<span class=\"hljs-title class_\">New</span>-<span class=\"hljs-title class_\">Object</span> <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">Net</span>.<span class=\"hljs-property\">WebClient</span>).<span class=\"hljs-title class_\">DownloadString</span>(<span class=\"hljs-string\">'https://community.chocolatey.org/install.ps1'</span>))\n</code></pre>\n<ol start=\"2\">\n<li>Chocolatey를 통해 Rancher Desktop을 설치하려면 다음 명령을 실행하세요:</li>\n</ol>\n<pre><code class=\"hljs language-js\">choco install rancher-desktop\n</code></pre>\n<h1>설정</h1>\n<ul>\n<li>프로젝트 디렉토리를 생성하고 이동하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">mkdir <span class=\"hljs-title class_\">LearningHarbor</span> cd <span class=\"hljs-title class_\">LearningHarbor</span>\n</code></pre>\n<ol start=\"2\">\n<li>Harbor Helm 저장소를 추가하고 Harbor 차트를 가져옵니다:</li>\n</ol>\n<pre><code class=\"hljs language-js\">helm repo add harbor <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//helm.goharbor.io</span>\nhelm fetch harbor/harbor --untar cd harbor\n</code></pre>\n<ol start=\"3\">\n<li>values.yaml 파일을 편집합니다:</li>\n</ol>\n<ul>\n<li>externalUrl 설정</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">externalURL</span>: <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//core.harbor.localhost</span>\n</code></pre>\n<p><img src=\"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_1.png\" alt=\"Getting Started with Harbor: A Step-by-Step Guide\"></p>\n<ol start=\"3\">\n<li>윈도우 호스트 파일 수정:</li>\n</ol>\n<ul>\n<li>관리자 권한으로 텍스트 편집기에서 c:\\Windows\\System32\\Drivers\\etc\\hosts 파일을 엽니다.</li>\n<li>다음 줄을 추가하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> core.<span class=\"hljs-property\">harbor</span>.<span class=\"hljs-property\">localhost</span>\n</code></pre>\n<p><img src=\"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_2.png\" alt=\"Harbor\"></p>\n<h1>Harbor 배포</h1>\n<ul>\n<li>Harbor Helm 차트 설치:</li>\n</ul>\n<pre><code class=\"hljs language-js\">helm upgrade harbor-release . --namespace harbor-helm --create-namespace --wait --install\n</code></pre>\n<ol start=\"2\">\n<li>배포가 완료될 때까지 기다린 후 다음으로 이동하세요:</li>\n</ol>\n<ul>\n<li><a href=\"https://core.harbor.localhost\" rel=\"nofollow\" target=\"_blank\">https://core.harbor.localhost</a></li>\n</ul>\n<p><img src=\"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_3.png\" alt=\"Getting Started with Harbor\"></p>\n<ol start=\"3\">\n<li>기본 자격 증명을 사용하여 로그인하세요:</li>\n</ol>\n<ul>\n<li>사용자명: admin</li>\n<li>비밀번호: Harbor12345</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_4.png\" alt=\"이미지\"></p>\n<h1>추가 구성</h1>\n<ul>\n<li>Docker를 사용하여 Harbor 레지스트리에 로그인하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">docker login <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//core.harbor.localhost</span>\n</code></pre>\n<p>동일한 자격 증명을 사용하세요:</p>\n<ul>\n<li>사용자 이름: admin</li>\n<li>비밀번호: Harbor12345</li>\n</ul>\n<h1>Harbor로 이미지 푸시하기</h1>\n<p>참고: 사용할 로케이션 이미지인 aspiresample/api 및 aspiresample/web이 있습니다. 제 이미지 이름을 교체해도 괜찮습니다.</p>\n<ul>\n<li>이미지에 태그 붙이기</li>\n</ul>\n<pre><code class=\"hljs language-js\">docker tag aspiresample/apiservice core.<span class=\"hljs-property\">harbor</span>.<span class=\"hljs-property\">localhost</span>/library/<span class=\"hljs-attr\">apiservice</span>:latest\n</code></pre>\n<ol start=\"2\">\n<li>이미지를 푸시하세요</li>\n</ol>\n<pre><code class=\"hljs language-js\">docker push core.<span class=\"hljs-property\">harbor</span>.<span class=\"hljs-property\">localhost</span>/library/<span class=\"hljs-attr\">apiservice</span>:latest\n</code></pre>\n<p>이제 Harbor UI에서 다음을 볼 수 있습니다</p>\n<p><img src=\"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_5.png\" alt=\"이미지\"></p>\n<p><img src=\"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_6.png\" alt=\"이미지\"></p>\n<h1>고급 기능</h1>\n<p>Harbor에는 기능을 향상시키는 몇 가지 고급 기능이 있습니다. 저는 이에 대해 자세히 다루지 않을 것입니다:</p>\n<ul>\n<li>\n<p>외부 저장소 연결:</p>\n</li>\n<li>\n<p>Harbor에 외부 저장소를 링크하고 정기적으로 해당 저장소에서 이미지를 복제하여 Harbor 레지스트리를 항상 최신 상태로 유지할 수 있습니다.</p>\n</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_7.png\" alt=\"Step 7\"></p>\n<p><img src=\"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_8.png\" alt=\"Step 8\"></p>\n<ol start=\"2\">\n<li>외부 인증:</li>\n</ol>\n<ul>\n<li>Harbor은 Keycloak와 같은 외부 OIDC 서버와의 통합을 지원하여 사용자 관리와 싱글 사인온 기능을 제공합니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-15-GettingStartedwithHarborAStep-by-StepGuide_9.png\" alt=\"사진\"></p>\n<ol start=\"3\">\n<li>할당량 설정:</li>\n</ol>\n<ul>\n<li>관리자는 프로젝트 및 저장소에 할당량을 설정하여 저장 공간 소비를 관리하고 조직 전체에서 적절하게 자원을 할당할 수 있습니다.</li>\n</ul>\n<h1>마무리</h1>\n<p>해법은 컨테이너 이미지를 관리하고 보호하는 강력한 솔루션을 제공합니다. 본 안내서에 나와 있는 단계에 따라 진행하면 신속하게 Harbor를 배포하여 이미지를 안전한 관리 환경에 저장할 수 있습니다. Harbor의 고급 기능인 외부 저장소 연결, 인증을 위해 Keycloak과 같은 OIDC 서버와 통합, 스토리지 할당량 설정 등은 그 유틸리티를 더욱 향상시킵니다. 이러한 기능들은 Harbor를 보안이며 효율적인 컨테이너 이미지 레지스트리를 유지하려는 개발자와 조직에 꼭 필요한 도구로 만듭니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}