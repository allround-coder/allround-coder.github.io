{"pageProps":{"post":{"title":"리액트를 배우기 전에 반드시 알아야 할 JavaScript ES6 기능들","description":"","date":"2024-06-20 05:09","slug":"2024-06-20-JavaScriptES6FeaturesYouneedtoKnowbeforeLearningReact","content":"\n\n## React를 배우기 전에 이 개념들을 꼭 익히세요\n\n![JavaScript ES6 Features](/assets/img/2024-06-20-JavaScriptES6FeaturesYouneedtoKnowbeforeLearningReact_0.png)\n\nReact를 배우려는 경우, 당연히 JavaScript 기본 개념을 이해해야 합니다.\n\nReact는 또한 많은 ES6 개념을 사용하는데, 이미 알고 있어야 합니다. 이 튜토리얼에서는 React를 배우기 전에 꼭 알아야 할 가장 흔히 사용되는 ES6 기능을 다룰 것입니다. 이러한 개념을 학습하고 이해하는 것은 React 여행을 즐겁고 원할하게 만들어줄 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# 템플릿 리터럴\n\nES6는 문자열 작업을 쉽게 만들어주었습니다. 문자열을 더하기(+) 기호로 연결하는 대신, 템플릿 문자열은 더 간단한 방법을 제공합니다.\n\n```js\n// 문자열 연결하는 예전 방법\nfunction sumNumbers(a, b) {\n  return \"The sum of \" + a + \" and \" + b + \" is \" + (a + b);\n}\n// 템플릿 리터럴 사용\nfunction sumNumbers(a, b) {\n  return `The sum of ${a}  and ${b} is ${a + b}`;\n}\n```\n\n템플릿 리터럴은 여러 줄 문자열을 다루는 것을 더 쉽게 만들어줍니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst multiLineString = `\n  Lorem ipsum dolor sit amet,\n  consectetur adipiscing elit.\n  Sed do eiusmod tempor incididunt\n  ut labore et dolore magna aliqua.\n`;\n\n``` \n\n# 화살표 함수\n\n화살표 함수를 사용하면 코드를 더 간결하게 만들 수 있어요. 일반 함수와 화살표 함수의 차이를 살펴봅시다.\n\n```js\n// 일반 함수\nfunction myFunction() {\n  // 표현식 또는 문장\n}\n// 화살표 함수\nconst myArrowFunction = () => {\n  // 표현식 또는 문장\n};\n```  \n\n<div class=\"content-ad\"></div>\n\n화살표 함수를 사용하면 function 키워드 대신 뚱뚱한 화살표(=>)를 사용하여 코드를 더 간결하게 만들 수 있어요.\n\n화살표 함수가 단일 표현식을 반환한다면 중괄호와 return 키워드를 생략할 수 있어요.\n\n화살표 함수가 단일 매개변수를 가진다면 매개변수 주위의 괄호를 생략할 수 있어요.\n```js\n// 명시적 반환 단일 표현식\nconst add = (a,b) => a + b;\n\n// 하나의 인수를 가져오는 경우 괄호를 생략해도 돼요\nconst squared = a => a * a;\n``` \n\n<div class=\"content-ad\"></div>\n\n화살표 함수는 map(), filter(), forEach()와 같은 배열 메소드에서 일반적으로 사용됩니다.\n\n```js\nconst names = [\"Carol\", \"jane\", \"alice\"];\nconst capitalizedNames = names.map((name) => name.toUpperCase());\nconsole.log(capitalizedNames);\n\n//출력  // [ 'CAROL', 'JANE', 'ALICE' ]\n```\n\n위의 예시에서 보듯이, 우리는 하나의 인자만 전달하므로 괄호를 생략했습니다.\n\n# 객체 해체화\n\n<div class=\"content-ad\"></div>\n\nJavaScript에서의 구조 분해는 배열에서 값이나 객체의 속성을 개별 변수로 푸는 과정을 말합니다. 이는 데이터베이스나 API와 같이 복잡한 데이터 구조를 다룰 때 유용합니다.\n\n예를 들어, 간단한 고양이를 설명하는 객체가 있다고 가정해봅시다.\n\n```js\nconst cat = {\n  catName: 'Whiskers',\n  age: 3,\n  color: 'gray',\n  breed: 'Persian'\n};\n```\n\n고양이의 이름을 얻기 위해서는 보통 점 표기법이나 대괄호 표기법을 사용할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n\n```js\nconst cat = {\n  catName: \"Whiskers\",\n  age: 3,\n  color: \"gray\",\n  breed: \"Persian\",\n};\n\n// console.log(cat.catNname)\n```\n\nHowever, with object destructuring, you can unpack the properties into variable names and assign them to the cat object like this:\n\n```js\nconst { catNname, age, color, breed } = cat;\nconsole.log(`My cat ${catNname} is ${age} moths old`)\n```\n\nThe output will be:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n내 고양이 'Whiskers'는 3개월입니다.\n```\n\n# 배열 해체\n\n배열 해체는 객체 해체와 유사합니다. 직원 배열이 있다고 가정해봅시다:\n\n```js\nconst employees = [\n    'Carol kristen deck ',\n    'john weber Smith',\n    'Alice k Johnson'\n];\n```\n\n<div class=\"content-ad\"></div>\n\n직원 목록에서 1번 인덱스의 직원을 가져오려면 다음과 같이 할 수 있어요:\n\n```js\nemployees[1]\n```\n\n하지만 구조 분해를 사용하면 값을 이렇게 변수에 풀어낼 수 있어요:\n\n```js\nconst employees = [\n  \"Carol kristen deck \",\n  \"john weber Smith\",\n  \"Alice k Johnson\",\n];\n\nconst [E1, E2, E3] = employees;\n```\n\n<div class=\"content-ad\"></div>\n\nE1은 배열의 첫 번째 직원의 값이 되고, E2는 두 번째 직원의 값이 되는 식으로 진행됩니다. 만약 배열에서 첫 번째 직원만 필요하다면, 아래와 같이 나머지 부분을 비워두면 됩니다:\n\n```js\nconst [E1, ,] = employees;\nconsole.log(E1); \n// Carol kristen deck\n```\n\n# 객체 리터럴\n\n객체 리터럴을 사용하면 객체를 작성할 때 중복을 피할 수 있습니다. 예를 들어, 아래와 같은 Task 함수 생성자를 가진 경우를 생각해보세요:\n\n<div class=\"content-ad\"></div>\n\n```js\n기본 형식보다 더 짧게 ES6 객체 리터럴로 작성할 수 있어요. 아래와 같이 써보세요;\n\nfunction Task(title, description, priority) {\n  return {\n    title,\n    description,\n    priority,\n  };\n}\n\n# 전개 연산자\n```\n\n<div class=\"content-ad\"></div>\n\n전개 연산자는 iterable 객체의 요소를 전개하는 데 사용됩니다. Iterable 객체에는 배열, 객체 및 문자열이 포함됩니다.\n\n전개 연산자는 요소를 복사, 결합 또는 다른 함수에 인수로 전달하는 데 사용될 수 있습니다. 예를 들어, 배열을 다룰 때 원본 배열을 변경하지 않고 작업해야 할 때, 다음과 같이 전개 연산자를 사용하여 배열의 사본을 만들 수 있습니다:\n\n```js\nconst names = [\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Ethan\"];\nconst namesCopy = [...names]\nconsole.log(namesCopy)\n```\n\n# 나머지 연산자\n\n<div class=\"content-ad\"></div>\n\n램덤(…) 연산자는 세 개의 점을 사용하며 확산 연산자와 유사합니다. 하지만 램덤 연산자는 함수 매개변수 내에서 여러 인수를 하나의 배열로 수집하는 데 사용됩니다.\n\n예를 들어, 숫자의 합계를 얻는 함수를 작성해야 한다고 가정해보겠습니다. 우리 배열이 무한수의 인수를 가질 수 있는 경우, 램덤 연산자를 사용하여 인수를 배열로 수집할 수 있습니다.\n\n```js\nfunction sumNumbers(...arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n```\n\n그런 다음, 해당 함수를 사용하여 어떤 수의 인수든 처리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nnumbers = [1, 2, 4];\ngrades = [30, 40, 50, 60, 70];\nconsole.log(sumNumbers(...numbers)); // 출력 // 7\nconsole.log(sumNumbers(...grades));   // 출력 // 250\n```\n\n나머지 연산자는 구조 분해 할당에도 사용할 수 있습니다. 예를 들어, 성적 배열의 첫 번째 요소를 추출해야 한다고 가정해보세요. 변수로 추출하고 나머지 요소를 아래와 같이 배열로 수집할 수 있습니다.\n\n```js\ngrades = [30, 40, 50, 60, 70];\nconst [index0, ...arr] = grades;\nconsole.log(math);\n```\n\n# for of 루프\n\n<div class=\"content-ad\"></div>\n\n`for of` 루프는 배열, 문자열, 타입 배열, 맵, 세트 및 NodeList와 같은 반복 가능한 객체의 요소를 반복하는 데 사용됩니다. `for of` 루프의 구문은 다음과 같습니다:\n\n```js\nfor (variable of iterable) {\n  // 각 변수에 대해 실행할 코드\n}\n```\n\n# 배열 순회\n\n```js\nconst currencyCodes = [\"USD\", \"EUR\", \"GBP\", \"JPY\"];\nfor (const code of currencyCodes) {\n  console.log(code);\n}\n// USD\n// EUR\n// GBP\n// JPY\n```\n\n<div class=\"content-ad\"></div>\n\n# 객체 배열을 반복하는 방법\n\n예를 들어, 아래와 같이 여러 객체가 포함 된 배열이 있다고 가정 해 봅시다.\n\n```js\nconst currencies = [\n    { currency: \"US Dollar\", code: \"USD\" },\n    { currency: \"Euro\", code: \"EUR\" },\n    { currency: \"British Pound\", code: \"GBP\" },\n    { currency: \"Japanese Yen\", code: \"JPY\" }\n  ];\n```\n\ncurrencies 배열을 반복하면 각각의 개별 객체를 얻을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfor (const currency of currencies) {\n  console.log(currency);\n}\n```\n\n다음은 출력 결과입니다:\n\n```js\n{ currency: 'US Dollar', code: 'USD' }\n{ currency: 'Euro', code: 'EUR' }\n{ currency: 'British Pound', code: 'GBP' }\n{ currency: 'Japanese Yen', code: 'JPY' }\n```\n\n# NodeList을 반복하는 방법\n\n<div class=\"content-ad\"></div>\n\n노드 목록(NodeList)은 웹 페이지의 문서에서 추출된 노드들의 컬렉션입니다. 예를 들어, 페이지에 `li` 요소로 이루어진 `ul`이 있다고 가정해 보세요:\n\n```js\n<ul class=\"languages\">\n  <li>Python</li>\n  <li>JavaScript</li>\n  <li>Ruby</li>\n</ul>\n```\n\n위와 같은 요소들을 포함하는 NodeList를 얻기 위해 querySelectorAll 속성을 사용할 수 있습니다.\n\n```js\nconst listItems = document.querySelectorAll('.languages li')\n```\n\n<div class=\"content-ad\"></div>\n\n그럼, 각 요소의 textContent를 얻기 위해 for of 루프 개념을 사용해보세요.\n\n```js\nconst listItems = document.querySelectorAll(\".languages li\");\nfor (const item of listItems) {\n  console.log(item.textContent);\n}\n```\n\n<img src=\"/assets/img/2024-06-20-JavaScriptES6FeaturesYouneedtoKnowbeforeLearningReact_1.png\" />\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n거의 매일 사용하는 ES6 기능은 무엇인가요? 아래 댓글로 알려주세요.\n\n읽어주셔서 감사합니다.\n\nJavaScript를 마스터하는 가장 좋은 방법은 프로젝트를 만드는 것입니다. 실용적인 JavaScript 뉴스레터를 구독하여 JavaScript 기술을 향상시키세요.\n\n# 간단명료하게 🚀\n\n<div class=\"content-ad\"></div>\n\nIn Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 작가를 👏️️로 칭찬하고 팔로우하기\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼 방문하기: CoFeed | Differ\n- PlainEnglish.io에서 더 많은 콘텐츠 확인하기","ogImage":{"url":"/assets/img/2024-06-20-JavaScriptES6FeaturesYouneedtoKnowbeforeLearningReact_0.png"},"coverImage":"/assets/img/2024-06-20-JavaScriptES6FeaturesYouneedtoKnowbeforeLearningReact_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>React를 배우기 전에 이 개념들을 꼭 익히세요</h2>\n<p><img src=\"/assets/img/2024-06-20-JavaScriptES6FeaturesYouneedtoKnowbeforeLearningReact_0.png\" alt=\"JavaScript ES6 Features\"></p>\n<p>React를 배우려는 경우, 당연히 JavaScript 기본 개념을 이해해야 합니다.</p>\n<p>React는 또한 많은 ES6 개념을 사용하는데, 이미 알고 있어야 합니다. 이 튜토리얼에서는 React를 배우기 전에 꼭 알아야 할 가장 흔히 사용되는 ES6 기능을 다룰 것입니다. 이러한 개념을 학습하고 이해하는 것은 React 여행을 즐겁고 원할하게 만들어줄 것입니다.</p>\n<div class=\"content-ad\"></div>\n<h1>템플릿 리터럴</h1>\n<p>ES6는 문자열 작업을 쉽게 만들어주었습니다. 문자열을 더하기(+) 기호로 연결하는 대신, 템플릿 문자열은 더 간단한 방법을 제공합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 문자열 연결하는 예전 방법</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sumNumbers</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"The sum of \"</span> + a + <span class=\"hljs-string\">\" and \"</span> + b + <span class=\"hljs-string\">\" is \"</span> + (a + b);\n}\n<span class=\"hljs-comment\">// 템플릿 리터럴 사용</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sumNumbers</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`The sum of <span class=\"hljs-subst\">${a}</span>  and <span class=\"hljs-subst\">${b}</span> is <span class=\"hljs-subst\">${a + b}</span>`</span>;\n}\n</code></pre>\n<p>템플릿 리터럴은 여러 줄 문자열을 다루는 것을 더 쉽게 만들어줍니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> multiLineString = <span class=\"hljs-string\">`\n  Lorem ipsum dolor sit amet,\n  consectetur adipiscing elit.\n  Sed do eiusmod tempor incididunt\n  ut labore et dolore magna aliqua.\n`</span>;\n\n</code></pre>\n<h1>화살표 함수</h1>\n<p>화살표 함수를 사용하면 코드를 더 간결하게 만들 수 있어요. 일반 함수와 화살표 함수의 차이를 살펴봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 일반 함수</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 표현식 또는 문장</span>\n}\n<span class=\"hljs-comment\">// 화살표 함수</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">myArrowFunction</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-comment\">// 표현식 또는 문장</span>\n};\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>화살표 함수를 사용하면 function 키워드 대신 뚱뚱한 화살표(=>)를 사용하여 코드를 더 간결하게 만들 수 있어요.</p>\n<p>화살표 함수가 단일 표현식을 반환한다면 중괄호와 return 키워드를 생략할 수 있어요.</p>\n<p>화살표 함수가 단일 매개변수를 가진다면 매개변수 주위의 괄호를 생략할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 명시적 반환 단일 표현식</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">add</span> = (<span class=\"hljs-params\">a,b</span>) => a + b;\n\n<span class=\"hljs-comment\">// 하나의 인수를 가져오는 경우 괄호를 생략해도 돼요</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">squared</span> = a => a * a;\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>화살표 함수는 map(), filter(), forEach()와 같은 배열 메소드에서 일반적으로 사용됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> names = [<span class=\"hljs-string\">\"Carol\"</span>, <span class=\"hljs-string\">\"jane\"</span>, <span class=\"hljs-string\">\"alice\"</span>];\n<span class=\"hljs-keyword\">const</span> capitalizedNames = names.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =></span> name.<span class=\"hljs-title function_\">toUpperCase</span>());\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(capitalizedNames);\n\n<span class=\"hljs-comment\">//출력  // [ 'CAROL', 'JANE', 'ALICE' ]</span>\n</code></pre>\n<p>위의 예시에서 보듯이, 우리는 하나의 인자만 전달하므로 괄호를 생략했습니다.</p>\n<h1>객체 해체화</h1>\n<div class=\"content-ad\"></div>\n<p>JavaScript에서의 구조 분해는 배열에서 값이나 객체의 속성을 개별 변수로 푸는 과정을 말합니다. 이는 데이터베이스나 API와 같이 복잡한 데이터 구조를 다룰 때 유용합니다.</p>\n<p>예를 들어, 간단한 고양이를 설명하는 객체가 있다고 가정해봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> cat = {\n  <span class=\"hljs-attr\">catName</span>: <span class=\"hljs-string\">'Whiskers'</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'gray'</span>,\n  <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">'Persian'</span>\n};\n</code></pre>\n<p>고양이의 이름을 얻기 위해서는 보통 점 표기법이나 대괄호 표기법을 사용할 것입니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> cat = {\n  <span class=\"hljs-attr\">catName</span>: <span class=\"hljs-string\">\"Whiskers\"</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"gray\"</span>,\n  <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">\"Persian\"</span>,\n};\n\n<span class=\"hljs-comment\">// console.log(cat.catNname)</span>\n</code></pre>\n<p>However, with object destructuring, you can unpack the properties into variable names and assign them to the cat object like this:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { catNname, age, color, breed } = cat;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`My cat <span class=\"hljs-subst\">${catNname}</span> is <span class=\"hljs-subst\">${age}</span> moths old`</span>)\n</code></pre>\n<p>The output will be:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">내 고양이 <span class=\"hljs-string\">'Whiskers'</span>는 <span class=\"hljs-number\">3</span>개월입니다.\n</code></pre>\n<h1>배열 해체</h1>\n<p>배열 해체는 객체 해체와 유사합니다. 직원 배열이 있다고 가정해봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> employees = [\n    <span class=\"hljs-string\">'Carol kristen deck '</span>,\n    <span class=\"hljs-string\">'john weber Smith'</span>,\n    <span class=\"hljs-string\">'Alice k Johnson'</span>\n];\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>직원 목록에서 1번 인덱스의 직원을 가져오려면 다음과 같이 할 수 있어요:</p>\n<pre><code class=\"hljs language-js\">employees[<span class=\"hljs-number\">1</span>]\n</code></pre>\n<p>하지만 구조 분해를 사용하면 값을 이렇게 변수에 풀어낼 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> employees = [\n  <span class=\"hljs-string\">\"Carol kristen deck \"</span>,\n  <span class=\"hljs-string\">\"john weber Smith\"</span>,\n  <span class=\"hljs-string\">\"Alice k Johnson\"</span>,\n];\n\n<span class=\"hljs-keyword\">const</span> [<span class=\"hljs-variable constant_\">E1</span>, <span class=\"hljs-variable constant_\">E2</span>, <span class=\"hljs-variable constant_\">E3</span>] = employees;\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>E1은 배열의 첫 번째 직원의 값이 되고, E2는 두 번째 직원의 값이 되는 식으로 진행됩니다. 만약 배열에서 첫 번째 직원만 필요하다면, 아래와 같이 나머지 부분을 비워두면 됩니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> [<span class=\"hljs-variable constant_\">E1</span>, ,] = employees;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable constant_\">E1</span>); \n<span class=\"hljs-comment\">// Carol kristen deck</span>\n</code></pre>\n<h1>객체 리터럴</h1>\n<p>객체 리터럴을 사용하면 객체를 작성할 때 중복을 피할 수 있습니다. 예를 들어, 아래와 같은 Task 함수 생성자를 가진 경우를 생각해보세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">기본 형식보다 더 짧게 <span class=\"hljs-title class_\">ES6</span> 객체 리터럴로 작성할 수 있어요. 아래와 같이 써보세요;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Task</span>(<span class=\"hljs-params\">title, description, priority</span>) {\n  <span class=\"hljs-keyword\">return</span> {\n    title,\n    description,\n    priority,\n  };\n}\n\n# 전개 연산자\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>전개 연산자는 iterable 객체의 요소를 전개하는 데 사용됩니다. Iterable 객체에는 배열, 객체 및 문자열이 포함됩니다.</p>\n<p>전개 연산자는 요소를 복사, 결합 또는 다른 함수에 인수로 전달하는 데 사용될 수 있습니다. 예를 들어, 배열을 다룰 때 원본 배열을 변경하지 않고 작업해야 할 때, 다음과 같이 전개 연산자를 사용하여 배열의 사본을 만들 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> names = [<span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-string\">\"Bob\"</span>, <span class=\"hljs-string\">\"Charlie\"</span>, <span class=\"hljs-string\">\"Diana\"</span>, <span class=\"hljs-string\">\"Ethan\"</span>];\n<span class=\"hljs-keyword\">const</span> namesCopy = [...names]\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(namesCopy)\n</code></pre>\n<h1>나머지 연산자</h1>\n<div class=\"content-ad\"></div>\n<p>램덤(…) 연산자는 세 개의 점을 사용하며 확산 연산자와 유사합니다. 하지만 램덤 연산자는 함수 매개변수 내에서 여러 인수를 하나의 배열로 수집하는 데 사용됩니다.</p>\n<p>예를 들어, 숫자의 합계를 얻는 함수를 작성해야 한다고 가정해보겠습니다. 우리 배열이 무한수의 인수를 가질 수 있는 경우, 램덤 연산자를 사용하여 인수를 배열로 수집할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sumNumbers</span>(<span class=\"hljs-params\">...arr</span>) {\n  <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; arr.<span class=\"hljs-property\">length</span>; i++) {\n    sum += arr[i];\n  }\n  <span class=\"hljs-keyword\">return</span> sum;\n}\n</code></pre>\n<p>그런 다음, 해당 함수를 사용하여 어떤 수의 인수든 처리할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>];\ngrades = [<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">70</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sumNumbers</span>(...numbers)); <span class=\"hljs-comment\">// 출력 // 7</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sumNumbers</span>(...grades));   <span class=\"hljs-comment\">// 출력 // 250</span>\n</code></pre>\n<p>나머지 연산자는 구조 분해 할당에도 사용할 수 있습니다. 예를 들어, 성적 배열의 첫 번째 요소를 추출해야 한다고 가정해보세요. 변수로 추출하고 나머지 요소를 아래와 같이 배열로 수집할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">grades = [<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">70</span>];\n<span class=\"hljs-keyword\">const</span> [index0, ...arr] = grades;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(math);\n</code></pre>\n<h1>for of 루프</h1>\n<div class=\"content-ad\"></div>\n<p><code>for of</code> 루프는 배열, 문자열, 타입 배열, 맵, 세트 및 NodeList와 같은 반복 가능한 객체의 요소를 반복하는 데 사용됩니다. <code>for of</code> 루프의 구문은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> (variable <span class=\"hljs-keyword\">of</span> iterable) {\n  <span class=\"hljs-comment\">// 각 변수에 대해 실행할 코드</span>\n}\n</code></pre>\n<h1>배열 순회</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> currencyCodes = [<span class=\"hljs-string\">\"USD\"</span>, <span class=\"hljs-string\">\"EUR\"</span>, <span class=\"hljs-string\">\"GBP\"</span>, <span class=\"hljs-string\">\"JPY\"</span>];\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> code <span class=\"hljs-keyword\">of</span> currencyCodes) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(code);\n}\n<span class=\"hljs-comment\">// USD</span>\n<span class=\"hljs-comment\">// EUR</span>\n<span class=\"hljs-comment\">// GBP</span>\n<span class=\"hljs-comment\">// JPY</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>객체 배열을 반복하는 방법</h1>\n<p>예를 들어, 아래와 같이 여러 객체가 포함 된 배열이 있다고 가정 해 봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> currencies = [\n    { <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">\"US Dollar\"</span>, <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">\"USD\"</span> },\n    { <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">\"Euro\"</span>, <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">\"EUR\"</span> },\n    { <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">\"British Pound\"</span>, <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">\"GBP\"</span> },\n    { <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">\"Japanese Yen\"</span>, <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">\"JPY\"</span> }\n  ];\n</code></pre>\n<p>currencies 배열을 반복하면 각각의 개별 객체를 얻을 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> currency <span class=\"hljs-keyword\">of</span> currencies) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(currency);\n}\n</code></pre>\n<p>다음은 출력 결과입니다:</p>\n<pre><code class=\"hljs language-js\">{ <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">'US Dollar'</span>, <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">'USD'</span> }\n{ <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">'Euro'</span>, <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">'EUR'</span> }\n{ <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">'British Pound'</span>, <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">'GBP'</span> }\n{ <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">'Japanese Yen'</span>, <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">'JPY'</span> }\n</code></pre>\n<h1>NodeList을 반복하는 방법</h1>\n<div class=\"content-ad\"></div>\n<p>노드 목록(NodeList)은 웹 페이지의 문서에서 추출된 노드들의 컬렉션입니다. 예를 들어, 페이지에 <code>li</code> 요소로 이루어진 <code>ul</code>이 있다고 가정해 보세요:</p>\n<pre><code class=\"hljs language-js\">&#x3C;ul <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"languages\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Python<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>JavaScript<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Ruby<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>\n&#x3C;/ul>\n</code></pre>\n<p>위와 같은 요소들을 포함하는 NodeList를 얻기 위해 querySelectorAll 속성을 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> listItems = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">'.languages li'</span>)\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>그럼, 각 요소의 textContent를 얻기 위해 for of 루프 개념을 사용해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> listItems = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">\".languages li\"</span>);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> item <span class=\"hljs-keyword\">of</span> listItems) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(item.<span class=\"hljs-property\">textContent</span>);\n}\n</code></pre>\n<img src=\"/assets/img/2024-06-20-JavaScriptES6FeaturesYouneedtoKnowbeforeLearningReact_1.png\">\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>거의 매일 사용하는 ES6 기능은 무엇인가요? 아래 댓글로 알려주세요.</p>\n<p>읽어주셔서 감사합니다.</p>\n<p>JavaScript를 마스터하는 가장 좋은 방법은 프로젝트를 만드는 것입니다. 실용적인 JavaScript 뉴스레터를 구독하여 JavaScript 기술을 향상시키세요.</p>\n<h1>간단명료하게 🚀</h1>\n<div class=\"content-ad\"></div>\n<p>In Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:</p>\n<ul>\n<li>작가를 👏️️로 칭찬하고 팔로우하기</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터</li>\n<li>다른 플랫폼 방문하기: CoFeed | Differ</li>\n<li>PlainEnglish.io에서 더 많은 콘텐츠 확인하기</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}