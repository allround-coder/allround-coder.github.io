{"pageProps":{"post":{"title":"Laravel 개발 혁신하기 매크로에 작별을 고하고 믹신스에 안녕을 외치다","description":"","date":"2024-05-27 19:24","slug":"2024-05-27-RevolutionizeLaravelDevelopmentSayGoodbyetoMacrosHellotoMixins","content":"\n\n<img src=\"/assets/img/2024-05-27-RevolutionizeLaravelDevelopmentSayGoodbyetoMacrosHellotoMixins_0.png\" />\n\n안녕하세요! Laravel에서 Mixins를 전문적으로 사용하는 방법에 대한 포괄적인 안내서에 오신 것을 환영합니다! 이 가이드는 Mixins의 세계에 심취하여 Laravel 개발 기술을 향상시키도록 설계되었습니다. 그러나 먼저 Macros에 대해 간단히 설명하겠습니다. Macros는 Laravel의 주요 측면으로, 사용자 정의 메서드를 추가하여 클래스의 기능을 확장할 수 있게 해줍니다. Macros는 Laravel에서 재사용 가능하고 조직화된 코드를 개발하는 데 중요한 역할을 하며, Macro를 최대한 활용하여 효율적이고 확장 가능한 애플리케이션을 만드는 방법을 여러분께 보여드리겠습니다. 예를 들어, Laravel의 Str 및 Arr 헬퍼 클래스에 사용자 정의 메서드를 추가하고 싶을 수 있습니다.\n\nStr 헬퍼의 경우 다음과 같이 사용할 수 있습니다:\n\nfullName\ninitials\n\n<div class=\"content-ad\"></div>\n\n\nArr 도우미 클래스에 대해:\n\ncamelToSnake snakeToCamel filterNulls\n\n지금은 macros를 사용해서 AppServiceProvider.php의 boot 메서드 안에 위의 메서드들을 추가해보도록 합시다.\n\n```php\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Support\\Str;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * 어플리케이션 서비스를 부트스트랩합니다.\n     */\n    public function boot(): void\n    {\n        Str::macro('fullName', function (string $firstname, string $lastname) {\n            return trim($firstname . ' ' . $lastname);\n        });\n\n        Str::macro('initials', function (string $firstname, string $lastname) {\n            return strtoupper($firstname[0] . $lastname[0]);\n        });\n\n        Arr::macro('camelToSnake', function (array $array) {\n            return Arr::mapWithKeys($array, function ($value, $key) {\n                return [Str::snake($key) => $value];\n            });\n        });\n\n        Arr::macro('snakeToCamel', function (array $array) {\n            return Arr::mapWithKeys($array, function ($value, $key) {\n                return [Str::camel($key) => $value];\n            });\n        });\n\n        Arr::macro('filterNulls', function (array $array) {\n            return Arr::where($array, function ($value) {\n                return !is_null($value);\n            });\n        });\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n라라벨(Laravel)에서는 사용자 정의 메소드로 쉽게 확장할 수 있는 여러 클래스가 있습니다. 이러한 클래스들을 \"매크로 가능(Macroable)\" 클래스라고 합니다. 각 클래스마다 AppServiceProvider를 다른 매크로 메소드로 혼잡하게 만드는 대신에, 각 매크로 가능 클래스에 대한 개별 제공자 클래스를 만들고 config/app.php 파일에 등록할 수 있습니다. 그러나 이러한 방법은 모든 메소드를 추적하는 것이 조금 귀찮고 혼잡하게 만들 수 있습니다. 저는 보다 자연스럽고 가독성이 좋고 유지보수가 용이한 접근법을 선호합니다. 그렇다면 어떻게 해야 할까요? 여기에서 Mixins이 나옵니다. Mixins을 사용하면 클래스를 확장하는 프로세스를 간단하게 만들어 코드를 보다 구조적으로 관리하기 쉽게 할 수 있습니다.\n\n## Mixin이란 무엇인가요?\n\n매크로와 마찬가지로 Mixin은 넓은 라라벨 컨텍스트에서 기존 클래스의 기능을 확장하는 개념입니다. Mixin이 작동하는 방법을 살펴보겠습니다:\n\n- Mixin 클래스에는 다른 클래스에 추가하려는 메소드가 포함되어 있습니다. 이러한 메소드는 일반적으로:\n\n<div class=\"content-ad\"></div>\n\n- `Table` 태그를 Markdown 형식으로 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\nArrayMixin.php\n\n```js\n<?php\n\nnamespace App\\Mixins;\n\nuse Closure;\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Support\\Str;\n\nclass ArrayMixin\n{\n    /**\n     * @return Closure\n     */\n    public function camelToSnake()\n    {\n        return function (array $array) {\n            return Arr::mapWithKeys($array, function ($value, $key) {\n                return [Str::snake($key) => $value];\n            });\n        };\n    }\n\n    /**\n     * @return Closure\n     */\n    public function snakeToCamel()\n    {\n        return function (array $array) {\n            return Arr::mapWithKeys($array, function ($value, $key) {\n                return [Str::camel($key) => $value];\n            });\n        };\n    }\n\n    /**\n     * @return Closure\n     */\n    public function filterNulls()\n    {\n        return function (array $array) {\n            return Arr::where($array, function ($value) {\n                return !is_null($value);\n            });\n        };\n    }\n}\n```\n\nStringMixin.php\n\n```js\n<?php\n\nnamespace App\\Mixins;\n\nuse Closure;\n\nclass StringMixin\n{\n    /**\n     * @return Closure\n     */\n    public function fullName()\n    {\n        return function (string $firstname, string $lastname) {\n            return trim($firstname.' '.$lastname);\n        };\n    }\n\n    /**\n     * @return Closure\n     */\n    public function initials()\n    {\n        return function (string $firstname, string $lastname) {\n            return strtoupper($firstname[0].$lastname[0]);\n        };\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이제 AppServiceProvider에 이 Mixin들을 등록하세요:\n\n```js\n/**\n* 어플리케이션 서비스를 초기화합니다.\n*/\npublic function boot(): void\n{\n    Str::mixin(new StringMixin());\n    Arr::mixin(new ArrayMixin());\n}\n```\n\n잘 했어요! 이제 프로젝트가 잘 정리되었고 코드를 더 쉽게 읽을 수 있게 되었어요.\n\n여전히 Str::initials(...), Arr::filterNulls(...)와 같이 이 도우미 메서드를 이전과 같은 방식으로 사용할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n믹신의 장점:\n\n- 코드 재사용성: 믹신 클래스 내에 도우미 로직을 캡슐화함으로써 코드를 중복하지 않고 응용 프로그램의 다른 부분에서 재사용할 수 있습니다.\n- 코드 청결함: 믹신은 원래 클래스 코드를 청소하고 핵심 기능에 집중할 수 있도록 도와줍니다. 도우미 메서드는 전용 클래스로 분리됩니다.\n- 유지보수성 향상: 도우미 로직을 수정하거나 제거해야 할 경우, 모든 내용이 한 군데에 있습니다 - 믹신 클래스 내에 위치하고 있습니다.\n\n다음 기사에서 뵙겠습니다.","ogImage":{"url":"/assets/img/2024-05-27-RevolutionizeLaravelDevelopmentSayGoodbyetoMacrosHellotoMixins_0.png"},"coverImage":"/assets/img/2024-05-27-RevolutionizeLaravelDevelopmentSayGoodbyetoMacrosHellotoMixins_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-27-RevolutionizeLaravelDevelopmentSayGoodbyetoMacrosHellotoMixins_0.png\">\n<p>안녕하세요! Laravel에서 Mixins를 전문적으로 사용하는 방법에 대한 포괄적인 안내서에 오신 것을 환영합니다! 이 가이드는 Mixins의 세계에 심취하여 Laravel 개발 기술을 향상시키도록 설계되었습니다. 그러나 먼저 Macros에 대해 간단히 설명하겠습니다. Macros는 Laravel의 주요 측면으로, 사용자 정의 메서드를 추가하여 클래스의 기능을 확장할 수 있게 해줍니다. Macros는 Laravel에서 재사용 가능하고 조직화된 코드를 개발하는 데 중요한 역할을 하며, Macro를 최대한 활용하여 효율적이고 확장 가능한 애플리케이션을 만드는 방법을 여러분께 보여드리겠습니다. 예를 들어, Laravel의 Str 및 Arr 헬퍼 클래스에 사용자 정의 메서드를 추가하고 싶을 수 있습니다.</p>\n<p>Str 헬퍼의 경우 다음과 같이 사용할 수 있습니다:</p>\n<p>fullName\ninitials</p>\n<div class=\"content-ad\"></div>\n<p>Arr 도우미 클래스에 대해:</p>\n<p>camelToSnake snakeToCamel filterNulls</p>\n<p>지금은 macros를 사용해서 AppServiceProvider.php의 boot 메서드 안에 위의 메서드들을 추가해보도록 합시다.</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&#x3C;?php</span>\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title class_\">App</span>\\<span class=\"hljs-title class_\">Providers</span>;\n\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Illuminate</span>\\<span class=\"hljs-title\">Support</span>\\<span class=\"hljs-title\">Arr</span>;\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Illuminate</span>\\<span class=\"hljs-title\">Support</span>\\<span class=\"hljs-title\">ServiceProvider</span>;\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Illuminate</span>\\<span class=\"hljs-title\">Support</span>\\<span class=\"hljs-title\">Str</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppServiceProvider</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ServiceProvider</span>\n</span>{\n    <span class=\"hljs-comment\">/**\n     * 어플리케이션 서비스를 부트스트랩합니다.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">boot</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title\">void</span>\n    </span>{\n        <span class=\"hljs-title class_\">Str</span>::<span class=\"hljs-title function_ invoke__\">macro</span>(<span class=\"hljs-string\">'fullName'</span>, function (<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$firstname</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$lastname</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">trim</span>(<span class=\"hljs-variable\">$firstname</span> . <span class=\"hljs-string\">' '</span> . <span class=\"hljs-variable\">$lastname</span>);\n        });\n\n        <span class=\"hljs-title class_\">Str</span>::<span class=\"hljs-title function_ invoke__\">macro</span>(<span class=\"hljs-string\">'initials'</span>, function (<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$firstname</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$lastname</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">strtoupper</span>(<span class=\"hljs-variable\">$firstname</span>[<span class=\"hljs-number\">0</span>] . <span class=\"hljs-variable\">$lastname</span>[<span class=\"hljs-number\">0</span>]);\n        });\n\n        <span class=\"hljs-title class_\">Arr</span>::<span class=\"hljs-title function_ invoke__\">macro</span>(<span class=\"hljs-string\">'camelToSnake'</span>, function (<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Arr</span>::<span class=\"hljs-title function_ invoke__\">mapWithKeys</span>(<span class=\"hljs-variable\">$array</span>, function (<span class=\"hljs-variable\">$value</span>, <span class=\"hljs-variable\">$key</span>) {\n                <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-title class_\">Str</span>::<span class=\"hljs-title function_ invoke__\">snake</span>(<span class=\"hljs-variable\">$key</span>) => <span class=\"hljs-variable\">$value</span>];\n            });\n        });\n\n        <span class=\"hljs-title class_\">Arr</span>::<span class=\"hljs-title function_ invoke__\">macro</span>(<span class=\"hljs-string\">'snakeToCamel'</span>, function (<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Arr</span>::<span class=\"hljs-title function_ invoke__\">mapWithKeys</span>(<span class=\"hljs-variable\">$array</span>, function (<span class=\"hljs-variable\">$value</span>, <span class=\"hljs-variable\">$key</span>) {\n                <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-title class_\">Str</span>::<span class=\"hljs-title function_ invoke__\">camel</span>(<span class=\"hljs-variable\">$key</span>) => <span class=\"hljs-variable\">$value</span>];\n            });\n        });\n\n        <span class=\"hljs-title class_\">Arr</span>::<span class=\"hljs-title function_ invoke__\">macro</span>(<span class=\"hljs-string\">'filterNulls'</span>, function (<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Arr</span>::<span class=\"hljs-title function_ invoke__\">where</span>(<span class=\"hljs-variable\">$array</span>, function (<span class=\"hljs-variable\">$value</span>) {\n                <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-title function_ invoke__\">is_null</span>(<span class=\"hljs-variable\">$value</span>);\n            });\n        });\n    }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>라라벨(Laravel)에서는 사용자 정의 메소드로 쉽게 확장할 수 있는 여러 클래스가 있습니다. 이러한 클래스들을 \"매크로 가능(Macroable)\" 클래스라고 합니다. 각 클래스마다 AppServiceProvider를 다른 매크로 메소드로 혼잡하게 만드는 대신에, 각 매크로 가능 클래스에 대한 개별 제공자 클래스를 만들고 config/app.php 파일에 등록할 수 있습니다. 그러나 이러한 방법은 모든 메소드를 추적하는 것이 조금 귀찮고 혼잡하게 만들 수 있습니다. 저는 보다 자연스럽고 가독성이 좋고 유지보수가 용이한 접근법을 선호합니다. 그렇다면 어떻게 해야 할까요? 여기에서 Mixins이 나옵니다. Mixins을 사용하면 클래스를 확장하는 프로세스를 간단하게 만들어 코드를 보다 구조적으로 관리하기 쉽게 할 수 있습니다.</p>\n<h2>Mixin이란 무엇인가요?</h2>\n<p>매크로와 마찬가지로 Mixin은 넓은 라라벨 컨텍스트에서 기존 클래스의 기능을 확장하는 개념입니다. Mixin이 작동하는 방법을 살펴보겠습니다:</p>\n<ul>\n<li>Mixin 클래스에는 다른 클래스에 추가하려는 메소드가 포함되어 있습니다. 이러한 메소드는 일반적으로:</li>\n</ul>\n<div class=\"content-ad\"></div>\n<ul>\n<li><code>Table</code> 태그를 Markdown 형식으로 변경해주세요.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>ArrayMixin.php</p>\n<pre><code class=\"hljs language-js\">&#x3C;?php\n\nnamespace <span class=\"hljs-title class_\">App</span>\\<span class=\"hljs-title class_\">Mixins</span>;\n\nuse <span class=\"hljs-title class_\">Closure</span>;\nuse <span class=\"hljs-title class_\">Illuminate</span>\\<span class=\"hljs-title class_\">Support</span>\\<span class=\"hljs-title class_\">Arr</span>;\nuse <span class=\"hljs-title class_\">Illuminate</span>\\<span class=\"hljs-title class_\">Support</span>\\<span class=\"hljs-title class_\">Str</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArrayMixin</span>\n{\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> <span class=\"hljs-variable\">Closure</span>\n     */</span>\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">camelToSnake</span>(<span class=\"hljs-params\"></span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">array $array</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Arr</span>::<span class=\"hljs-title function_\">mapWithKeys</span>($array, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$value, $key</span>) {\n                <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-title class_\">Str</span>::<span class=\"hljs-title function_\">snake</span>($key) => $value];\n            });\n        };\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> <span class=\"hljs-variable\">Closure</span>\n     */</span>\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">snakeToCamel</span>(<span class=\"hljs-params\"></span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">array $array</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Arr</span>::<span class=\"hljs-title function_\">mapWithKeys</span>($array, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$value, $key</span>) {\n                <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-title class_\">Str</span>::<span class=\"hljs-title function_\">camel</span>($key) => $value];\n            });\n        };\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> <span class=\"hljs-variable\">Closure</span>\n     */</span>\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">filterNulls</span>(<span class=\"hljs-params\"></span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">array $array</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Arr</span>::<span class=\"hljs-title function_\">where</span>($array, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$value</span>) {\n                <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-title function_\">is_null</span>($value);\n            });\n        };\n    }\n}\n</code></pre>\n<p>StringMixin.php</p>\n<pre><code class=\"hljs language-js\">&#x3C;?php\n\nnamespace <span class=\"hljs-title class_\">App</span>\\<span class=\"hljs-title class_\">Mixins</span>;\n\nuse <span class=\"hljs-title class_\">Closure</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StringMixin</span>\n{\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> <span class=\"hljs-variable\">Closure</span>\n     */</span>\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fullName</span>(<span class=\"hljs-params\"></span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">string $firstname, string $lastname</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">trim</span>($firstname.<span class=\"hljs-string\">' '</span>.<span class=\"hljs-property\">$lastname</span>);\n        };\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> <span class=\"hljs-variable\">Closure</span>\n     */</span>\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initials</span>(<span class=\"hljs-params\"></span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">string $firstname, string $lastname</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">strtoupper</span>($firstname[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">$lastname</span>[<span class=\"hljs-number\">0</span>]);\n        };\n    }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 AppServiceProvider에 이 Mixin들을 등록하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/**\n* 어플리케이션 서비스를 초기화합니다.\n*/</span>\npublic <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">boot</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-keyword\">void</span>\n{\n    <span class=\"hljs-title class_\">Str</span>::<span class=\"hljs-title function_\">mixin</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringMixin</span>());\n    <span class=\"hljs-title class_\">Arr</span>::<span class=\"hljs-title function_\">mixin</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayMixin</span>());\n}\n</code></pre>\n<p>잘 했어요! 이제 프로젝트가 잘 정리되었고 코드를 더 쉽게 읽을 수 있게 되었어요.</p>\n<p>여전히 Str::initials(...), Arr::filterNulls(...)와 같이 이 도우미 메서드를 이전과 같은 방식으로 사용할 수 있어요.</p>\n<div class=\"content-ad\"></div>\n<p>믹신의 장점:</p>\n<ul>\n<li>코드 재사용성: 믹신 클래스 내에 도우미 로직을 캡슐화함으로써 코드를 중복하지 않고 응용 프로그램의 다른 부분에서 재사용할 수 있습니다.</li>\n<li>코드 청결함: 믹신은 원래 클래스 코드를 청소하고 핵심 기능에 집중할 수 있도록 도와줍니다. 도우미 메서드는 전용 클래스로 분리됩니다.</li>\n<li>유지보수성 향상: 도우미 로직을 수정하거나 제거해야 할 경우, 모든 내용이 한 군데에 있습니다 - 믹신 클래스 내에 위치하고 있습니다.</li>\n</ul>\n<p>다음 기사에서 뵙겠습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}