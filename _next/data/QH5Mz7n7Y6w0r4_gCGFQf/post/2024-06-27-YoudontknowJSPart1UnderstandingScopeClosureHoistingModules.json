{"pageProps":{"post":{"title":"JS 초보자를 위한 가이드 Part 1  스코프, 클로저, 호이스팅, 모듈 이해하기","description":"","date":"2024-06-27 18:16","slug":"2024-06-27-YoudontknowJSPart1UnderstandingScopeClosureHoistingModules","content":"\n\n![이미지](/assets/img/2024-06-27-YoudontknowJSPart1UnderstandingScopeClosureHoistingModules_0.png)\n\n- Scope: 변수에 대한 접근 가능성을 정의하며, 코드 내에서 어디에서 접근할 수 있는지를 나타냅니다.\n- Closure: 실행 범위 외부에서 실행되더라도 어휘적 범위를 기억하는 함수입니다.\n- 호이스팅은 JavaScript 메커니즘으로, 변수 및 함수 선언이 코드의 선언 위치와 관계없이 컴파일 단계 중에 해당 범위의 맨 위로 이동됩니다. 이는 변수 및 함수가 선언되기 전에 사용될 수 있다는 것을 의미합니다.\n\n명령형(어떻게, 무엇) 대 선언형(무엇)\n명령형 - 작동 방식을 알고 작동 방식을 알 수 있습니다.\n선언형 - 작동 방식을 알지 못한 채, 무엇이 동작하는지만 알 수 있습니다. JS 배열 맵 함수와 같은 예시\n\n![이미지](/assets/img/2024-06-27-YoudontknowJSPart1UnderstandingScopeClosureHoistingModules_1.png)\n\n<div class=\"content-ad\"></div>\n\nScope 이전에 JS에서 변수를 선언하는 방법을 먼저 이해해야 합니다.\nlet vs var vs const\n\n![이미지](/assets/img/2024-06-27-YoudontknowJSPart1UnderstandingScopeClosureHoistingModules_2.png)\n\nScope는 변수의 접근 가능성(가시성)을 결정합니다. JavaScript에는 3가지 유형의 scope가 있습니다: ES6(2015) 이전에는 JavaScript에서 전역 Scope 및 함수 Scope만 있었지만, 블록 Scope는 나중에 let과 const로 도입되었습니다.\n\n- 전역 Scope: 어떤 함수 내에서도 선언되지 않은 변수들은 전역 Scope를 갖습니다.\n프로그래밍 환경에서 전역 Scope는 모든 다른 Scope에서 볼 수 있는 Scope입니다. 이는 브라우저에서는 window 객체에 연결되고 Node.js에서는 전역(global)에 연결됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvar globalVar = 10;  \nfunction foo() {     \n   console.log(globalVar); // 사용 가능 \n   console.log(window.globalVar); // 사용 가능\n}  \nconsole.log(globalVar);\nconsole.log(window.globalVar);\nfoo(); // 출력: 10 10 10 10\n```\n\n2. 지역 범위: 함수 내에서 선언된 변수는 지역 범위를 갖습니다.\n함수 내에서 선언된 변수를 지역 변수라고 하며 함수 범위에 속합니다. 지역 변수는 함수 내 어디에서든 접근할 수 있습니다 (기능 블록 내).\n\n```js\nfunction foo() {     \n   var localVar = 20;    \n   if(true){\n   var blocklocalVar = 2\n    } \n   console.log(localVar); // 사용 가능 \n   console.log(blocklocalVar) // var의 함수 범위 때문에 접근 가능\n }  \nfoo(); \n\nconsole.log(localVar);\n// 출력: 20 2\n// 오류: localVar이(가) 정의되지 않았습니다\n```\n\n3. 블록 범위: let과 const는 블록 범위 변수이며, if, for, while 등의 블록을 기준으로 합니다.\n\n<div class=\"content-ad\"></div>\n\nES6는 JavaScript에 let 및 const라는 두 가지 중요한 새로운 키워드를 소개했습니다. 이 두 키워드는 JavaScript에서 블록 범위를 제공합니다. ' ' 블록 내에서 선언된 변수는 블록 외부에서 액세스할 수 없습니다. 예: If else 블록, for 루프 블록 등\n\n예시 (let을 사용한 블록 스코프):\n\n```js\nfunction example() {\n  if (true) {\n    let blockVar = '블록 내부에 있어요';\n    console.log(blockVar); // 접근 가능\n  }\n  console.log(blockVar); // 오류: blockVar가 정의되지 않았습니다\n}\nexample();\n```\n\n- 예시 (const를 사용한 블록 스코프):\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction example() {\n  const PI = 3.14;\n  if (true) {\n    const blockConst = 'I am inside a block';\n    console.log(PI); // Accessible\n    console.log(blockConst); // Accessible\n  }\n  console.log(PI); // Accessible\n  console.log(blockConst); // Error: blockConst is not defined\n}\nexample();\n```\n\n만약 var를 사용한다면 (함수 스코프)\n\n```js\nfunction example() {\n  const PI = 3.14;\n  if (true) {\n    var blockConst = 'I am inside a block';\n    console.log(PI); // Accessible\n    console.log(blockConst); // Accessible\n  }\n  console.log(PI); // Accessible\n  console.log(blockConst); // Error: blockConst is not defined\n}\nexample();\n3.14\nI am inside a block\n3.14\nundefined\n```\n\n```js\nfunction outer() {\n  var outerVar = 'I am outer';\n  function inner() {\n    console.log(outerVar); // Accessible\n  }\n  inner();\n}\nouter(); // 출력: I am outer\n```\n\n<div class=\"content-ad\"></div>\n\n범위의 예시\n\n1. (let을 사용한 루프 변수 범위): 블록\n\n```js\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 100);\n}\n// 결과: 0\n// 결과: 1\n// 결과: 2\n```\n\n2. var를 사용한 루프 변수 범위: 함수 또는 전역 범위\n\n```js\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 100);\n}\n// 결과: 3\n// 결과: 3\n// 결과: 3\n```\n\n<div class=\"content-ad\"></div>\n\n3. 중첩된 블록 내에서 let으로 재선언: 블록 스코프\n\n```js\nfunction example() {\n  let x = 10;\n  if (true) {\n    let x = 20;\n  }\n  console.log(x); // 출력: 10\n}\nexample();\n```\n\n4. 중첩된 블록 내에서 var로 재선언: 함수 또는 전역 스코프\n\n```js\nfunction example() {\n  var x = 10;\n  if (true) {\n    var x = 20;\n  }\n  console.log(x); // 출력: 20\n}\nexample();\n```\n\n<div class=\"content-ad\"></div>\n\n5. var 및 let을 사용한 호이스팅:\n\n```js\nconsole.log(x); // 결과: undefined\nvar x = 10;\n```\n\n```js\nconsole.log(x); // 오류: 초기화 전에 'x'에 액세스할 수 없음\nlet x = 10;\n```\n\n6. let 및 const를 사용한 블록 스코프:\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction example() {\n  if (true) {\n    const x = 10;\n    console.log(x); // 출력: 10\n  }\n  console.log(x); // 오류: x가 정의되지 않았습니다\n}\nexample();\n```\n\n\n## 2. 클로저:\n\n- 정의: 클로저는 함수가 다른 곳에서 실행되더라도 주변 변수를 \"기억\"하는 것을 말합니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction outer() {     \n  var outerVar = 'I am outer';      \n  function inner() {         \n   console.log(outerVar); // outer 함수 외부에서도 호출될 때 접근 가능     \n  }      \n return inner; // inner 함수 반환 \n}  \nvar closureFunc = outer(); // outer 실행, inner 반환 \nclosureFunc(); // 출력: I am outer\n```\n\n2. Loop & Closure: 클로저를 사용하는 루프에서 흔히 범하는 함정.\n\n```js\nfunction createFuncArray() {     \nvar funcArray = [];      \nfor (var i = 0; i < 5; i++) {         \n  funcArray.push(function() {            \n  console.log(i); // 항상 5를 출력하며, 0, 1, 2, 3, 4가 아님        \n });    \n }      \nreturn funcArray; \n}  \nvar myFuncArray = createFuncArray(); \nmyFuncArray[0](); // 출력: 5\n```\n\n루프 예제의 함정을 피하려면, IIFE(즉시 실행 함수 표현)를 사용하여 각 반복마다 클로저를 생성할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```javascript\nfunction createFuncArray() {\n   var funcArray = [];\n   for (var i = 0; i < 5; i++) {\n       (function(num) {\n           funcArray.push(function() {\n               console.log(num);\n           });\n       })(i);\n   }\n   return funcArray;\n}\nvar myFuncArray = createFuncArray();\nmyFuncArray[0](); // 출력: 0\n```\n\n자바스크립트를 마스터하기 위해서는 스코프와 클로저를 이해하는 것이 기본이 됩니다. 이러한 예제들은 좋은 시작점이 될 것입니다!\n\n3.\n\n```javascript\nfunction makeCounter() {\n    var count = 0;\n\n    return function() {\n        return ++count;\n    };\n}\n\nvar counter1 = makeCounter();\nconsole.log(counter1()); // 출력: 1\nconsole.log(counter1()); // 출력: 2\n\nvar counter2 = makeCounter();\nconsole.log(counter2()); // 출력: 1 (다시 1부터 시작)\n```\n\n<div class=\"content-ad\"></div>\n\n이 예제에서:\n\n- makeCounter() 함수는 카운트 변수를 증가시키고 반환하는 내부 함수를 반환합니다.\n- makeCounter()가 호출될 때마다, 자체 카운트 변수를 가진 새로운 렉시컬 환경이 생성되며, 이는 외부 스코프에서 숨겨져 있습니다.\n- counter1과 counter2가 호출될 때, 각각 자체 독립적인 카운트 변수를 가지며, 각각 자체 상태를 독립적으로 유지합니다.\n- 클로저는 내부 함수가 makeCounter() 실행이 끝난 후에도 포함된 스코프의 카운트 변수에 접근할 수 있도록 형성됩니다.\n\n클로저 스코프 체인\n\n모든 클로저에는 세 가지 스코프가 있습니다:\n\n<div class=\"content-ad\"></div>\n\n- 지역 스코프 (자체 스코프)\r\n- 포함 스코프 (블록, 함수 또는 모듈 스코프가 될 수 있음)\r\n- 전역 스코프\n\n```js\n// 전역 스코프\nconst e = 10;\nfunction sum(a) {\n  return function (b) {\n    return function (c) {\n      // 외부 함수 스코프\n      return function (d) {\n        // 지역 스코프\n        return a + b + c + d + e;\n      };\n    };\n  };\n}\nconsole.log(sum(1)(2)(3)(4)); // 20을 출력합니다.\n```\n\n- 호이스팅\n호이스팅은 변수와 함수의 값을 초기화/할당하기 전에도 변수와 함수의 값을 추출할 수 있게 해주는 개념으로, 이는 실행 컨텍스트의 첫 번째 단계 (메모리 생성 단계 또는 생성 단계)로 인해 발생합니다.\n- JavaScript에서 호이스팅은 기본 동작으로 모든 선언을 코드 실행 전에 해당 범위의 맨 위로 이동시키는 것입니다. 기본적으로 함수와 변수가 선언된 위치와 상관없이 해당 범위의 맨 위로 이동되기 때문에 전역이든 지역이든 상관없이 우리에게 이점을 제공합니다.\n- 참고: JavaScript는 선언을 호이스트하지만 초기화는 호이스트하지 않습니다.\n- JavaScript는 프로그램에서 정의된 모든 변수와 함수에 대해 실행 전에 메모리를 할당합니다.\n\n1. var로 호이스팅:\n\n<div class=\"content-ad\"></div>\n\n- 예제 1: 변수 선언 호이스팅\n\n```js\nconsole.log(x); // 결과: undefined\nvar x = 10;\n```\n\n- 예제 2: 함수 선언 호이스팅\n\n```js\nhoistedFunction(); // 결과: \"호이스팅된 함수\"\nfunction hoistedFunction() {\n  console.log(\"호이스팅된 함수\");\n}\n```\n\n<div class=\"content-ad\"></div>\n\n2. let으로 호이스팅:\n\n- 예제 3: 변수 선언 호이스팅\n\n```js\nconsole.log(x); // 오류: 초기화 전에 'x'에 액세스할 수 없음\nlet x = 10;\n```\n\n- 예제 4: 함수 선언 호이스팅 없음\n\n<div class=\"content-ad\"></div>\n\n```js\nnotHoistedFunction(); // 에러: notHoistedFunction이 정의되지 않았습니다.\nlet notHoistedFunction = function() {\n  console.log(\"호이스팅되지 않은 함수\");\n}\n```\n\n3. const로 호이스팅:\n\n- 예제 5: 변수 선언 호이스팅\n\n```js\nconsole.log(x); // 에러: 초기화 전에 'x'에 접근할 수 없음\nconst x = 10;\n```\n\n<div class=\"content-ad\"></div>\n\n4. 함수 스코프에서 호이스팅:\n\n- 예제 6: 함수 내부의 호이스팅\n\n```js\nfunction example() {\n  console.log(innerVar); // 출력: undefined\n  var innerVar = '내부 변수';\n  console.log(innerVar); // 출력: 내부 변수\n}\nexample();\n```\n\n- 예제 7: 블록 내부의 호이스팅 (let 및 const로 호이스팅 없음)\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction example() {\n  console.log(innerLetVar); // 오류: 초기화되기 전에 'innerLetVar'에 액세스할 수 없습니다\n  let innerLetVar = '내부 let 변수';\n  console.log(innerLetVar); // 위의 오류로 이 줄은 실행되지 않습니다\n}\nexample();\r\n\r\n5. 중첩된 스코프에서 호이스팅:\n\n- 예제 8: 중첩된 함수에서 호이스팅\n\nfunction outer() {\n  console.log(outerVar); // 결과: 정의되지 않음\n  var outerVar = '바깥 변수';\n  inner();\n  function inner() {\n    console.log(outerVar); // 결과: 바깥 변수\n  }\n}\nouter();\n\n<div class=\"content-ad\"></div>\n\n6. 함수 표현식을 이용한 호이스팅:\n\n- 예시 9: 함수 표현식 호이스팅\n\nvar myFunc = function() {\n  console.log(\"함수 표현식\");\n};\nmyFunc(); // 출력: 함수 표현식\n\n7. 다른 스코프 유형에서의 호이스팅:\n\n<div class=\"content-ad\"></div>\n\n- 예제 10: 전역 범위에서 호이스팅\n\nconsole.log(globalVar); // 출력: undefined\nvar globalVar = '전역 변수';\nconsole.log(globalVar); // 출력: 전역 변수\n\n4. ES6 모듈\n모듈을 사용하면 코드를 별도의 파일로 캡슐화하고 그들 간에 기능을 import/export할 수 있습니다.\n\n기본 모듈 내보내기:\n\n<div class=\"content-ad\"></div>\n\n// moduleA.js\nexport function greet() {\n  console.log('Hello');\n}\n\n// main.js\nimport { greet } from './moduleA.js';\ngreet(); // Output: Hello\n\n2. Default Exports:\n\n// moduleB.js\nexport default function greet() {\n  console.log('Hello');\n}\n\n<div class=\"content-ad\"></div>\n\n// main.js\nimport greet from './moduleB.js';\ngreet(); // 출력: Hello\n\n3. 별칭이 지정된 Named Exports:\n\n// moduleC.js\nexport { greet as hello };\n\n// main.js\nimport { hello } from './moduleC.js';\nhello(); // 출력: Hello\n\n<div class=\"content-ad\"></div>\n\n4. 여러 값을 내보내기:\n\n// moduleD.js\nexport function greet() {\n  console.log('Hello');\n}\nexport const PI = 3.14;\n\n// main.js\nimport { greet, PI } from './moduleD.js';\ngreet(); // 결과: Hello\nconsole.log(PI); // 결과: 3.14\n\n<div class=\"content-ad\"></div>\n\n```\n// moduleE.js\nexport default function greet() {\n  console.log('Hello');\n}\nexport const PI = 3.14;\n\n\n\n// main.js\nimport greet, { PI } from './moduleE.js';\ngreet(); // Output: Hello\nconsole.log(PI); // Output: 3.14\n\n\n6. Importing All Exports:\n\n\n// moduleF.js\nexport function greet() {\n  console.log('Hello');\n}\nexport const PI = 3.14;\n\n\n<div class=\"content-ad\"></div>\n\n```js\n// main.js\nimport * as moduleF from './moduleF.js';\nmoduleF.greet(); // 출력: Hello\nconsole.log(moduleF.PI); // 출력: 3.14\n```\n\n7. 부수 효과용 모듈 가져 오기:\n\n```js\n// moduleG.js\nconsole.log('Module G가 로드되었습니다');\n```\n\n```js\n// main.js\nimport './moduleG.js'; \nconsole.log(\"Main.js 파일이 실행 중입니다\")\n// 출력: // 먼저 가져온 파일이 먼저 실행되어\nModule G가 로드되었습니다\nMain.js 파일이 실행 중입니다\n```\n\n<div class=\"content-ad\"></div>\n\n8. 다이나믹 Imports:\n\n```javascript\n// main.js\nconst moduleName = './moduleA.js';\nimport(moduleName).then(module => {\n  module.greet(); // 출력: Hello\n});\n```\n\n9. 모듈 재내보내기:\n\n```javascript\n// moduleH.js\nexport function greet() {\n  console.log('Hello');\n}\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n// moduleI.js\nexport { greet } from './moduleH.js';\n// main.js\nimport { greet } from './moduleI.js';\ngreet(); // Output: Hello\n```\n\n10. Conditional Module Loading:\n\n```js\n// main.js\nif (condition) {\n  import('./moduleA.js').then(module => {\n    module.greet(); // Output: Hello\n  });\n} else {\n  import('./moduleB.js').then(module => {\n    module.greet(); // Output: Hi\n  });\n}\n```\n\n  `export default` 구문과 일반 `export` 구문은 JavaScript 모듈에서 값을 내보내는데 모두 사용됩니다. 그러나 다른 모듈에서 가져오고 사용하는 방법에는 차이가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n1. export default:\n\n- export default을 사용하면 모듈에서 하나의 값을 내보낼 수 있습니다.\n- 기본 내보내기를 가져올 때는 가져온 값에 대해 원하는 이름을 사용할 수 있습니다.\n- 기본 내보내기를 가져올 때는 중괄호 '{}'가 필요하지 않습니다.\n- 모듈당 기본 내보내기는 하나만 가질 수 있습니다.\n\n예시:\n\n```js\n// ModuleA.js\nconst value = 'Hello';\nexport default value;\n```  \n\n<div class=\"content-ad\"></div>\n\n```js\n// ModuleB.js\nimport myValue from './ModuleA.js';\nconsole.log(myValue); // 출력: Hello\n```\n\n2. `export default` 없이 (이름 있는 수출):\n\n- 이름 있는 수출을 사용하면 모듈에서 여러 값을 내보낼 수 있습니다.\n- 이름 있는 수출을 가져올 때 내보낸 값과 동일한 이름을 사용해야 합니다.\n- 이름 있는 수출을 가져올 때 중괄호 `{}`를 사용해야 합니다.\n- 모듈 당 여러 이름 있는 수출을 가질 수 있습니다.\n\n예시:\n\n<div class=\"content-ad\"></div>\n\n\n// ModuleA.js\nexport const value1 = 'Hello';\nexport const value2 = 'World';\n\n\n\n// ModuleB.js\nimport { value1, value2 } from './ModuleA.js';\nconsole.log(value1); // Output: Hello\nconsole.log(value2); // Output: World\n\n\n요약하면, export default는 모듈에서 단일 값을 지정하지 않고 내보내는 데 사용되며, named exports는 여러 값을 내보내는 데 사용되며 가져올 때 동일한 이름을 지정해야 합니다. 특정 프로젝트 요구에 따라 유용하게 사용됩니다.\n\nCommonJS와 ES6 모듈을 예제와 함께 비교하여 그 차이를 설명해 보겠습니다:\n\n\n<div class=\"content-ad\"></div>\n\n1. CommonJS:\n\n- CommonJS는 주로 서버 측 개발을 위해 Node.js에서 사용되는 모듈 시스템입니다. 이는 동기적이며 블로킹 방식으로, 모듈은 런타임에서 동기적으로 로드됩니다.\n\nCommonJS 예제:\n\n```js\n// ModuleA.js\nconst greeting = 'Hello';\nfunction sayHello() {\n  console.log(greeting);\n}\nmodule.exports = {\n  greeting,\n  sayHello\n};\n```\n\n<div class=\"content-ad\"></div>\n\n```js\r\n// ModuleB.js\nconst moduleA = require('./ModuleA');\nmoduleA.sayHello(); // Output: Hello\nconsole.log(moduleA.greeting); // Output: Hello\r\n```\n\n2. ES6 Modules:\n\n- ES6 modules are a newer module system introduced in ECMAScript 2015 (ES6). They are asynchronous and support both synchronous and asynchronous module loading.\n\nExample with ES6 Modules:\n\n<div class=\"content-ad\"></div>\n\n```js\n// ModuleA.js\nconst greeting = 'Hello';\nexport function sayHello() {\n  console.log(greeting);\n}\nexport { greeting };\n```\n\n```js\n// ModuleB.js\nimport { sayHello, greeting } from './ModuleA.js';\nsayHello(); // 출력: Hello\nconsole.log(greeting); // 출력: Hello\n```\n\n비교:\n\n동기 vs. 비동기:\n\n<div class=\"content-ad\"></div>\n\n- CommonJS 모듈은 동기적이고 블로킹이며, 실행 시 동기적으로 로드됩니다. 이는 서버 측 프로그래밍과 잘 어울리며, 블로킹 I/O 작업이 일반적인 경우에 적합합니다.\n  \n- ES6 모듈은 구현에 따라 동기적이거나 비동기적일 수 있습니다. 더 유연하며 서버 측 및 클라이언트 측 환경에서 모두 사용할 수 있습니다.\n\n사용 편의성:\n\n- CommonJS 모듈은 module.exports 및 require()를 사용하여 각각 기능을 내보내고 가져옵니다. 이 구문은 직관적이며 이해하기 쉽습니다.\n  \n- ES6 모듈은 export 및 import 문을 사용하여 기능을 내보내고 가져옵니다. 이 구문은 더 현대적이고 언어 명세와 일치하지만, 아직 ES6 모듈을 네이티브로 지원하지 않는 환경에서 변환을 위한 추가 도구가 필요할 수 있습니다.\n\n브라우저 호환성:\n\n<div class=\"content-ad\"></div>\n\n- CommonJS 모듈은 브라우저에서 네이티브로 지원되지 않습니다. CommonJS 코드를 브라우저가 이해할 수 있는 형식으로 변환하기 위해 Browserify나 Webpack과 같은 번들러가 필요합니다.\n- ES6 모듈은 최신 브라우저에서 지원되며 많은 경우 추가 도구 없이 네이티브로 사용할 수 있습니다. 그러나 오래된 브라우저에서 ES6 모듈을 지원하기 위해서는 Babel과 같은 도구를 사용하여 트랜스 파일링이 필요할 수 있습니다.\n\n서버 측 사용 사례:\n\n- Node.js는 주로 서버 측 프로그래밍에 사용되며, 동기적인 성격과 쉬운 사용성 때문에 CommonJS 모듈이 잘 어울립니다. 런타임에서 모듈을 동기적으로 로드할 수 있으며, 서버는 모듈이 로드된 후에 실행을 계속할 수 있습니다.\n- 브라우저 환경에서는 JavaScript 코드가 클라이언트 측에서 실행되며, 응답성을 보장하고 UI 쓰레드를 차단하지 않기 위해 비동기 작업이 선호됩니다. 따라서 웹 개발에서는 비동기적 모듈 로딩을 지원하는 AMD (Asynchronous Module Definition) 또는 ES6 모듈과 같은 다른 모듈 시스템이 일반적으로 사용됩니다.\n\n성능 고려 사항:\n\n<div class=\"content-ad\"></div>\n\n- CommonJS 모듈은 동기적으로 로드되어 브라우저 환경에서 특히 많은 모듈이 있는 대규모 웹 애플리케이션의 성능에 영향을 미칠 수 있습니다. 동기적 모듈 로딩은 페이지 로드 시간이 더 느려지고 응답성이 감소할 수 있습니다.\n- 다른 모듈 시스템인 AMD나 ES6 모듈에서 지원하는 비동기 모듈 로딩은 모듈이 병렬로 로드되도록 허용하여 모듈 종속성을 로드하는 데 걸리는 시간을 줄여 성능을 향상시킵니다.\n\n요약하면, CommonJS 모듈은 동기적 특성과 사용 편의성으로 인해 Node.js에서 서버 측 개발에 적합합니다. ES6 모듈은 더 많은 다양성을 제공하며 남종적 및 클라이언트 측 개발에서 점점 더 채택되고 있으며 비동기 모듈 로딩 및 현대적 구문을 지원합니다.","ogImage":{"url":"/assets/img/2024-06-27-YoudontknowJSPart1UnderstandingScopeClosureHoistingModules_0.png"},"coverImage":"/assets/img/2024-06-27-YoudontknowJSPart1UnderstandingScopeClosureHoistingModules_0.png","tag":["Tech"],"readingTime":15},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-27-YoudontknowJSPart1UnderstandingScopeClosureHoistingModules_0.png\" alt=\"이미지\"></p>\n<ul>\n<li>Scope: 변수에 대한 접근 가능성을 정의하며, 코드 내에서 어디에서 접근할 수 있는지를 나타냅니다.</li>\n<li>Closure: 실행 범위 외부에서 실행되더라도 어휘적 범위를 기억하는 함수입니다.</li>\n<li>호이스팅은 JavaScript 메커니즘으로, 변수 및 함수 선언이 코드의 선언 위치와 관계없이 컴파일 단계 중에 해당 범위의 맨 위로 이동됩니다. 이는 변수 및 함수가 선언되기 전에 사용될 수 있다는 것을 의미합니다.</li>\n</ul>\n<p>명령형(어떻게, 무엇) 대 선언형(무엇)\n명령형 - 작동 방식을 알고 작동 방식을 알 수 있습니다.\n선언형 - 작동 방식을 알지 못한 채, 무엇이 동작하는지만 알 수 있습니다. JS 배열 맵 함수와 같은 예시</p>\n<p><img src=\"/assets/img/2024-06-27-YoudontknowJSPart1UnderstandingScopeClosureHoistingModules_1.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>Scope 이전에 JS에서 변수를 선언하는 방법을 먼저 이해해야 합니다.\nlet vs var vs const</p>\n<p><img src=\"/assets/img/2024-06-27-YoudontknowJSPart1UnderstandingScopeClosureHoistingModules_2.png\" alt=\"이미지\"></p>\n<p>Scope는 변수의 접근 가능성(가시성)을 결정합니다. JavaScript에는 3가지 유형의 scope가 있습니다: ES6(2015) 이전에는 JavaScript에서 전역 Scope 및 함수 Scope만 있었지만, 블록 Scope는 나중에 let과 const로 도입되었습니다.</p>\n<ul>\n<li>전역 Scope: 어떤 함수 내에서도 선언되지 않은 변수들은 전역 Scope를 갖습니다.\n프로그래밍 환경에서 전역 Scope는 모든 다른 Scope에서 볼 수 있는 Scope입니다. 이는 브라우저에서는 window 객체에 연결되고 Node.js에서는 전역(global)에 연결됩니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> globalVar = <span class=\"hljs-number\">10</span>;  \n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) {     \n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(globalVar); <span class=\"hljs-comment\">// 사용 가능 </span>\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">globalVar</span>); <span class=\"hljs-comment\">// 사용 가능</span>\n}  \n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(globalVar);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">globalVar</span>);\n<span class=\"hljs-title function_\">foo</span>(); <span class=\"hljs-comment\">// 출력: 10 10 10 10</span>\n</code></pre>\n<ol start=\"2\">\n<li>지역 범위: 함수 내에서 선언된 변수는 지역 범위를 갖습니다.\n함수 내에서 선언된 변수를 지역 변수라고 하며 함수 범위에 속합니다. 지역 변수는 함수 내 어디에서든 접근할 수 있습니다 (기능 블록 내).</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) {     \n   <span class=\"hljs-keyword\">var</span> localVar = <span class=\"hljs-number\">20</span>;    \n   <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">true</span>){\n   <span class=\"hljs-keyword\">var</span> blocklocalVar = <span class=\"hljs-number\">2</span>\n    } \n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(localVar); <span class=\"hljs-comment\">// 사용 가능 </span>\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(blocklocalVar) <span class=\"hljs-comment\">// var의 함수 범위 때문에 접근 가능</span>\n }  \n<span class=\"hljs-title function_\">foo</span>(); \n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(localVar);\n<span class=\"hljs-comment\">// 출력: 20 2</span>\n<span class=\"hljs-comment\">// 오류: localVar이(가) 정의되지 않았습니다</span>\n</code></pre>\n<ol start=\"3\">\n<li>블록 범위: let과 const는 블록 범위 변수이며, if, for, while 등의 블록을 기준으로 합니다.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<p>ES6는 JavaScript에 let 및 const라는 두 가지 중요한 새로운 키워드를 소개했습니다. 이 두 키워드는 JavaScript에서 블록 범위를 제공합니다. ' ' 블록 내에서 선언된 변수는 블록 외부에서 액세스할 수 없습니다. 예: If else 블록, for 루프 블록 등</p>\n<p>예시 (let을 사용한 블록 스코프):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">example</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">let</span> blockVar = <span class=\"hljs-string\">'블록 내부에 있어요'</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(blockVar); <span class=\"hljs-comment\">// 접근 가능</span>\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(blockVar); <span class=\"hljs-comment\">// 오류: blockVar가 정의되지 않았습니다</span>\n}\n<span class=\"hljs-title function_\">example</span>();\n</code></pre>\n<ul>\n<li>예시 (const를 사용한 블록 스코프):</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">example</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PI</span> = <span class=\"hljs-number\">3.14</span>;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">const</span> blockConst = <span class=\"hljs-string\">'I am inside a block'</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable constant_\">PI</span>); <span class=\"hljs-comment\">// Accessible</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(blockConst); <span class=\"hljs-comment\">// Accessible</span>\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable constant_\">PI</span>); <span class=\"hljs-comment\">// Accessible</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(blockConst); <span class=\"hljs-comment\">// Error: blockConst is not defined</span>\n}\n<span class=\"hljs-title function_\">example</span>();\n</code></pre>\n<p>만약 var를 사용한다면 (함수 스코프)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">example</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PI</span> = <span class=\"hljs-number\">3.14</span>;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">var</span> blockConst = <span class=\"hljs-string\">'I am inside a block'</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable constant_\">PI</span>); <span class=\"hljs-comment\">// Accessible</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(blockConst); <span class=\"hljs-comment\">// Accessible</span>\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable constant_\">PI</span>); <span class=\"hljs-comment\">// Accessible</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(blockConst); <span class=\"hljs-comment\">// Error: blockConst is not defined</span>\n}\n<span class=\"hljs-title function_\">example</span>();\n<span class=\"hljs-number\">3.14</span>\nI am inside a block\n<span class=\"hljs-number\">3.14</span>\n<span class=\"hljs-literal\">undefined</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">outer</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">var</span> outerVar = <span class=\"hljs-string\">'I am outer'</span>;\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">inner</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(outerVar); <span class=\"hljs-comment\">// Accessible</span>\n  }\n  <span class=\"hljs-title function_\">inner</span>();\n}\n<span class=\"hljs-title function_\">outer</span>(); <span class=\"hljs-comment\">// 출력: I am outer</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>범위의 예시</p>\n<ol>\n<li>(let을 사용한 루프 변수 범위): 블록</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">3</span>; i++) {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i), <span class=\"hljs-number\">100</span>);\n}\n<span class=\"hljs-comment\">// 결과: 0</span>\n<span class=\"hljs-comment\">// 결과: 1</span>\n<span class=\"hljs-comment\">// 결과: 2</span>\n</code></pre>\n<ol start=\"2\">\n<li>var를 사용한 루프 변수 범위: 함수 또는 전역 범위</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">3</span>; i++) {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i), <span class=\"hljs-number\">100</span>);\n}\n<span class=\"hljs-comment\">// 결과: 3</span>\n<span class=\"hljs-comment\">// 결과: 3</span>\n<span class=\"hljs-comment\">// 결과: 3</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"3\">\n<li>중첩된 블록 내에서 let으로 재선언: 블록 스코프</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">example</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">20</span>;\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 출력: 10</span>\n}\n<span class=\"hljs-title function_\">example</span>();\n</code></pre>\n<ol start=\"4\">\n<li>중첩된 블록 내에서 var로 재선언: 함수 또는 전역 스코프</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">example</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">20</span>;\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 출력: 20</span>\n}\n<span class=\"hljs-title function_\">example</span>();\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"5\">\n<li>var 및 let을 사용한 호이스팅:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 결과: undefined</span>\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">10</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 오류: 초기화 전에 'x'에 액세스할 수 없음</span>\n<span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">10</span>;\n</code></pre>\n<ol start=\"6\">\n<li>let 및 const를 사용한 블록 스코프:</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">example</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 출력: 10</span>\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 오류: x가 정의되지 않았습니다</span>\n}\n<span class=\"hljs-title function_\">example</span>();\n</code></pre>\n<h2>2. 클로저:</h2>\n<ul>\n<li>정의: 클로저는 함수가 다른 곳에서 실행되더라도 주변 변수를 \"기억\"하는 것을 말합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">outer</span>(<span class=\"hljs-params\"></span>) {     \n  <span class=\"hljs-keyword\">var</span> outerVar = <span class=\"hljs-string\">'I am outer'</span>;      \n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">inner</span>(<span class=\"hljs-params\"></span>) {         \n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(outerVar); <span class=\"hljs-comment\">// outer 함수 외부에서도 호출될 때 접근 가능     </span>\n  }      \n <span class=\"hljs-keyword\">return</span> inner; <span class=\"hljs-comment\">// inner 함수 반환 </span>\n}  \n<span class=\"hljs-keyword\">var</span> closureFunc = <span class=\"hljs-title function_\">outer</span>(); <span class=\"hljs-comment\">// outer 실행, inner 반환 </span>\n<span class=\"hljs-title function_\">closureFunc</span>(); <span class=\"hljs-comment\">// 출력: I am outer</span>\n</code></pre>\n<ol start=\"2\">\n<li>Loop &#x26; Closure: 클로저를 사용하는 루프에서 흔히 범하는 함정.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createFuncArray</span>(<span class=\"hljs-params\"></span>) {     \n<span class=\"hljs-keyword\">var</span> funcArray = [];      \n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">5</span>; i++) {         \n  funcArray.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {            \n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i); <span class=\"hljs-comment\">// 항상 5를 출력하며, 0, 1, 2, 3, 4가 아님        </span>\n });    \n }      \n<span class=\"hljs-keyword\">return</span> funcArray; \n}  \n<span class=\"hljs-keyword\">var</span> myFuncArray = <span class=\"hljs-title function_\">createFuncArray</span>(); \nmyFuncArray[<span class=\"hljs-number\">0</span>](); <span class=\"hljs-comment\">// 출력: 5</span>\n</code></pre>\n<p>루프 예제의 함정을 피하려면, IIFE(즉시 실행 함수 표현)를 사용하여 각 반복마다 클로저를 생성할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createFuncArray</span>(<span class=\"hljs-params\"></span>) {\n   <span class=\"hljs-keyword\">var</span> funcArray = [];\n   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">5</span>; i++) {\n       (<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>) {\n           funcArray.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n               <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num);\n           });\n       })(i);\n   }\n   <span class=\"hljs-keyword\">return</span> funcArray;\n}\n<span class=\"hljs-keyword\">var</span> myFuncArray = <span class=\"hljs-title function_\">createFuncArray</span>();\nmyFuncArray[<span class=\"hljs-number\">0</span>](); <span class=\"hljs-comment\">// 출력: 0</span>\n</code></pre>\n<p>자바스크립트를 마스터하기 위해서는 스코프와 클로저를 이해하는 것이 기본이 됩니다. 이러한 예제들은 좋은 시작점이 될 것입니다!</p>\n<ol start=\"3\">\n<li></li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">makeCounter</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">return</span> ++count;\n    };\n}\n\n<span class=\"hljs-keyword\">var</span> counter1 = <span class=\"hljs-title function_\">makeCounter</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">counter1</span>()); <span class=\"hljs-comment\">// 출력: 1</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">counter1</span>()); <span class=\"hljs-comment\">// 출력: 2</span>\n\n<span class=\"hljs-keyword\">var</span> counter2 = <span class=\"hljs-title function_\">makeCounter</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">counter2</span>()); <span class=\"hljs-comment\">// 출력: 1 (다시 1부터 시작)</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 예제에서:</p>\n<ul>\n<li>makeCounter() 함수는 카운트 변수를 증가시키고 반환하는 내부 함수를 반환합니다.</li>\n<li>makeCounter()가 호출될 때마다, 자체 카운트 변수를 가진 새로운 렉시컬 환경이 생성되며, 이는 외부 스코프에서 숨겨져 있습니다.</li>\n<li>counter1과 counter2가 호출될 때, 각각 자체 독립적인 카운트 변수를 가지며, 각각 자체 상태를 독립적으로 유지합니다.</li>\n<li>클로저는 내부 함수가 makeCounter() 실행이 끝난 후에도 포함된 스코프의 카운트 변수에 접근할 수 있도록 형성됩니다.</li>\n</ul>\n<p>클로저 스코프 체인</p>\n<p>모든 클로저에는 세 가지 스코프가 있습니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>지역 스코프 (자체 스코프)</li>\n<li>포함 스코프 (블록, 함수 또는 모듈 스코프가 될 수 있음)</li>\n<li>전역 스코프</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 전역 스코프</span>\n<span class=\"hljs-keyword\">const</span> e = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">a</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">b</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">c</span>) {\n      <span class=\"hljs-comment\">// 외부 함수 스코프</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">d</span>) {\n        <span class=\"hljs-comment\">// 지역 스코프</span>\n        <span class=\"hljs-keyword\">return</span> a + b + c + d + e;\n      };\n    };\n  };\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>)(<span class=\"hljs-number\">4</span>)); <span class=\"hljs-comment\">// 20을 출력합니다.</span>\n</code></pre>\n<ul>\n<li>호이스팅\n호이스팅은 변수와 함수의 값을 초기화/할당하기 전에도 변수와 함수의 값을 추출할 수 있게 해주는 개념으로, 이는 실행 컨텍스트의 첫 번째 단계 (메모리 생성 단계 또는 생성 단계)로 인해 발생합니다.</li>\n<li>JavaScript에서 호이스팅은 기본 동작으로 모든 선언을 코드 실행 전에 해당 범위의 맨 위로 이동시키는 것입니다. 기본적으로 함수와 변수가 선언된 위치와 상관없이 해당 범위의 맨 위로 이동되기 때문에 전역이든 지역이든 상관없이 우리에게 이점을 제공합니다.</li>\n<li>참고: JavaScript는 선언을 호이스트하지만 초기화는 호이스트하지 않습니다.</li>\n<li>JavaScript는 프로그램에서 정의된 모든 변수와 함수에 대해 실행 전에 메모리를 할당합니다.</li>\n</ul>\n<ol>\n<li>var로 호이스팅:</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ul>\n<li>예제 1: 변수 선언 호이스팅</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 결과: undefined</span>\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">10</span>;\n</code></pre>\n<ul>\n<li>예제 2: 함수 선언 호이스팅</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">hoistedFunction</span>(); <span class=\"hljs-comment\">// 결과: \"호이스팅된 함수\"</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hoistedFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"호이스팅된 함수\"</span>);\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"2\">\n<li>let으로 호이스팅:</li>\n</ol>\n<ul>\n<li>예제 3: 변수 선언 호이스팅</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 오류: 초기화 전에 'x'에 액세스할 수 없음</span>\n<span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">10</span>;\n</code></pre>\n<ul>\n<li>예제 4: 함수 선언 호이스팅 없음</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">notHoistedFunction</span>(); <span class=\"hljs-comment\">// 에러: notHoistedFunction이 정의되지 않았습니다.</span>\n<span class=\"hljs-keyword\">let</span> notHoistedFunction = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"호이스팅되지 않은 함수\"</span>);\n}\n</code></pre>\n<ol start=\"3\">\n<li>const로 호이스팅:</li>\n</ol>\n<ul>\n<li>예제 5: 변수 선언 호이스팅</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 에러: 초기화 전에 'x'에 접근할 수 없음</span>\n<span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">10</span>;\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"4\">\n<li>함수 스코프에서 호이스팅:</li>\n</ol>\n<ul>\n<li>예제 6: 함수 내부의 호이스팅</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">example</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(innerVar); <span class=\"hljs-comment\">// 출력: undefined</span>\n  <span class=\"hljs-keyword\">var</span> innerVar = <span class=\"hljs-string\">'내부 변수'</span>;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(innerVar); <span class=\"hljs-comment\">// 출력: 내부 변수</span>\n}\n<span class=\"hljs-title function_\">example</span>();\n</code></pre>\n<ul>\n<li>예제 7: 블록 내부의 호이스팅 (let 및 const로 호이스팅 없음)</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">example</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(innerLetVar); <span class=\"hljs-comment\">// 오류: 초기화되기 전에 'innerLetVar'에 액세스할 수 없습니다</span>\n  <span class=\"hljs-keyword\">let</span> innerLetVar = <span class=\"hljs-string\">'내부 let 변수'</span>;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(innerLetVar); <span class=\"hljs-comment\">// 위의 오류로 이 줄은 실행되지 않습니다</span>\n}\n<span class=\"hljs-title function_\">example</span>();\r\n\r\n<span class=\"hljs-number\">5.</span> 중첩된 스코프에서 호이스팅:\n\n- 예제 <span class=\"hljs-number\">8</span>: 중첩된 함수에서 호이스팅\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">outer</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(outerVar); <span class=\"hljs-comment\">// 결과: 정의되지 않음</span>\n  <span class=\"hljs-keyword\">var</span> outerVar = <span class=\"hljs-string\">'바깥 변수'</span>;\n  <span class=\"hljs-title function_\">inner</span>();\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">inner</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(outerVar); <span class=\"hljs-comment\">// 결과: 바깥 변수</span>\n  }\n}\n<span class=\"hljs-title function_\">outer</span>();\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n\n<span class=\"hljs-number\">6.</span> 함수 표현식을 이용한 호이스팅:\n\n- 예시 <span class=\"hljs-number\">9</span>: 함수 표현식 호이스팅\n\n<span class=\"hljs-keyword\">var</span> myFunc = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"함수 표현식\"</span>);\n};\n<span class=\"hljs-title function_\">myFunc</span>(); <span class=\"hljs-comment\">// 출력: 함수 표현식</span>\n\n<span class=\"hljs-number\">7.</span> 다른 스코프 유형에서의 호이스팅:\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n\n- 예제 <span class=\"hljs-number\">10</span>: 전역 범위에서 호이스팅\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(globalVar); <span class=\"hljs-comment\">// 출력: undefined</span>\n<span class=\"hljs-keyword\">var</span> globalVar = <span class=\"hljs-string\">'전역 변수'</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(globalVar); <span class=\"hljs-comment\">// 출력: 전역 변수</span>\n\n<span class=\"hljs-number\">4.</span> <span class=\"hljs-title class_\">ES6</span> 모듈\n모듈을 사용하면 코드를 별도의 파일로 캡슐화하고 그들 간에 기능을 <span class=\"hljs-keyword\">import</span>/<span class=\"hljs-keyword\">export</span>할 수 있습니다.\n\n기본 모듈 내보내기:\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n\n<span class=\"hljs-comment\">// moduleA.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Hello'</span>);\n}\n\n<span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> { greet } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./moduleA.js'</span>;\n<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// Output: Hello</span>\n\n<span class=\"hljs-number\">2.</span> <span class=\"hljs-title class_\">Default</span> <span class=\"hljs-title class_\">Exports</span>:\n\n<span class=\"hljs-comment\">// moduleB.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Hello'</span>);\n}\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\n<span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> greet <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./moduleB.js'</span>;\n<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 출력: Hello</span>\n\n<span class=\"hljs-number\">3.</span> 별칭이 지정된 <span class=\"hljs-title class_\">Named</span> <span class=\"hljs-title class_\">Exports</span>:\n\n<span class=\"hljs-comment\">// moduleC.js</span>\n<span class=\"hljs-keyword\">export</span> { greet <span class=\"hljs-keyword\">as</span> hello };\n\n<span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> { hello } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./moduleC.js'</span>;\n<span class=\"hljs-title function_\">hello</span>(); <span class=\"hljs-comment\">// 출력: Hello</span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n\n<span class=\"hljs-number\">4.</span> 여러 값을 내보내기:\n\n<span class=\"hljs-comment\">// moduleD.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Hello'</span>);\n}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PI</span> = <span class=\"hljs-number\">3.14</span>;\n\n<span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> { greet, <span class=\"hljs-variable constant_\">PI</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./moduleD.js'</span>;\n<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 결과: Hello</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable constant_\">PI</span>); <span class=\"hljs-comment\">// 결과: 3.14</span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n\n</code></pre>\n<p>// moduleE.js\nexport default function greet() {\nconsole.log('Hello');\n}\nexport const PI = 3.14;</p>\n<p>// main.js\nimport greet, { PI } from './moduleE.js';\ngreet(); // Output: Hello\nconsole.log(PI); // Output: 3.14</p>\n<ol start=\"6\">\n<li>Importing All Exports:</li>\n</ol>\n<p>// moduleF.js\nexport function greet() {\nconsole.log('Hello');\n}\nexport const PI = 3.14;</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> moduleF <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./moduleF.js'</span>;\nmoduleF.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 출력: Hello</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(moduleF.<span class=\"hljs-property\">PI</span>); <span class=\"hljs-comment\">// 출력: 3.14</span>\n</code></pre>\n<ol start=\"7\">\n<li>부수 효과용 모듈 가져 오기:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// moduleG.js</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Module G가 로드되었습니다'</span>);\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./moduleG.js'</span>; \n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Main.js 파일이 실행 중입니다\"</span>)\n<span class=\"hljs-comment\">// 출력: // 먼저 가져온 파일이 먼저 실행되어</span>\n<span class=\"hljs-title class_\">Module</span> G가 로드되었습니다\n<span class=\"hljs-title class_\">Main</span>.<span class=\"hljs-property\">js</span> 파일이 실행 중입니다\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"8\">\n<li>다이나믹 Imports:</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">const</span> moduleName = <span class=\"hljs-string\">'./moduleA.js'</span>;\n<span class=\"hljs-keyword\">import</span>(moduleName).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">module</span> =></span> {\n  <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 출력: Hello</span>\n});\n</code></pre>\n<ol start=\"9\">\n<li>모듈 재내보내기:</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// moduleH.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Hello'</span>);\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// moduleI.js</span>\n<span class=\"hljs-keyword\">export</span> { greet } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./moduleH.js'</span>;\n<span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> { greet } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./moduleI.js'</span>;\n<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// Output: Hello</span>\n</code></pre>\n<ol start=\"10\">\n<li>Conditional Module Loading:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">if</span> (condition) {\n  <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./moduleA.js'</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">module</span> =></span> {\n    <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// Output: Hello</span>\n  });\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./moduleB.js'</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">module</span> =></span> {\n    <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// Output: Hi</span>\n  });\n}\n</code></pre>\n<p><code>export default</code> 구문과 일반 <code>export</code> 구문은 JavaScript 모듈에서 값을 내보내는데 모두 사용됩니다. 그러나 다른 모듈에서 가져오고 사용하는 방법에는 차이가 있습니다.</p>\n<div class=\"content-ad\"></div>\n<ol>\n<li>export default:</li>\n</ol>\n<ul>\n<li>export default을 사용하면 모듈에서 하나의 값을 내보낼 수 있습니다.</li>\n<li>기본 내보내기를 가져올 때는 가져온 값에 대해 원하는 이름을 사용할 수 있습니다.</li>\n<li>기본 내보내기를 가져올 때는 중괄호 '{}'가 필요하지 않습니다.</li>\n<li>모듈당 기본 내보내기는 하나만 가질 수 있습니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ModuleA.js</span>\n<span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">'Hello'</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> value;\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ModuleB.js</span>\n<span class=\"hljs-keyword\">import</span> myValue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./ModuleA.js'</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myValue); <span class=\"hljs-comment\">// 출력: Hello</span>\n</code></pre>\n<ol start=\"2\">\n<li><code>export default</code> 없이 (이름 있는 수출):</li>\n</ol>\n<ul>\n<li>이름 있는 수출을 사용하면 모듈에서 여러 값을 내보낼 수 있습니다.</li>\n<li>이름 있는 수출을 가져올 때 내보낸 값과 동일한 이름을 사용해야 합니다.</li>\n<li>이름 있는 수출을 가져올 때 중괄호 <code>{}</code>를 사용해야 합니다.</li>\n<li>모듈 당 여러 이름 있는 수출을 가질 수 있습니다.</li>\n</ul>\n<p>예시:</p>\n<div class=\"content-ad\"></div>\n<p>// ModuleA.js\nexport const value1 = 'Hello';\nexport const value2 = 'World';</p>\n<p>// ModuleB.js\nimport { value1, value2 } from './ModuleA.js';\nconsole.log(value1); // Output: Hello\nconsole.log(value2); // Output: World</p>\n<p>요약하면, export default는 모듈에서 단일 값을 지정하지 않고 내보내는 데 사용되며, named exports는 여러 값을 내보내는 데 사용되며 가져올 때 동일한 이름을 지정해야 합니다. 특정 프로젝트 요구에 따라 유용하게 사용됩니다.</p>\n<p>CommonJS와 ES6 모듈을 예제와 함께 비교하여 그 차이를 설명해 보겠습니다:</p>\n<div class=\"content-ad\"></div>\n<ol>\n<li>CommonJS:</li>\n</ol>\n<ul>\n<li>CommonJS는 주로 서버 측 개발을 위해 Node.js에서 사용되는 모듈 시스템입니다. 이는 동기적이며 블로킹 방식으로, 모듈은 런타임에서 동기적으로 로드됩니다.</li>\n</ul>\n<p>CommonJS 예제:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ModuleA.js</span>\n<span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">'Hello'</span>;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting);\n}\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  greeting,\n  sayHello\n};\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ModuleB.js</span>\n<span class=\"hljs-keyword\">const</span> moduleA = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./ModuleA'</span>);\nmoduleA.<span class=\"hljs-title function_\">sayHello</span>(); <span class=\"hljs-comment\">// Output: Hello</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(moduleA.<span class=\"hljs-property\">greeting</span>); <span class=\"hljs-comment\">// Output: Hello</span>\n</code></pre>\n<ol start=\"2\">\n<li>ES6 Modules:</li>\n</ol>\n<ul>\n<li>ES6 modules are a newer module system introduced in ECMAScript 2015 (ES6). They are asynchronous and support both synchronous and asynchronous module loading.</li>\n</ul>\n<p>Example with ES6 Modules:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ModuleA.js</span>\n<span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">'Hello'</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting);\n}\n<span class=\"hljs-keyword\">export</span> { greeting };\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ModuleB.js</span>\n<span class=\"hljs-keyword\">import</span> { sayHello, greeting } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./ModuleA.js'</span>;\n<span class=\"hljs-title function_\">sayHello</span>(); <span class=\"hljs-comment\">// 출력: Hello</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting); <span class=\"hljs-comment\">// 출력: Hello</span>\n</code></pre>\n<p>비교:</p>\n<p>동기 vs. 비동기:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>\n<p>CommonJS 모듈은 동기적이고 블로킹이며, 실행 시 동기적으로 로드됩니다. 이는 서버 측 프로그래밍과 잘 어울리며, 블로킹 I/O 작업이 일반적인 경우에 적합합니다.</p>\n</li>\n<li>\n<p>ES6 모듈은 구현에 따라 동기적이거나 비동기적일 수 있습니다. 더 유연하며 서버 측 및 클라이언트 측 환경에서 모두 사용할 수 있습니다.</p>\n</li>\n</ul>\n<p>사용 편의성:</p>\n<ul>\n<li>\n<p>CommonJS 모듈은 module.exports 및 require()를 사용하여 각각 기능을 내보내고 가져옵니다. 이 구문은 직관적이며 이해하기 쉽습니다.</p>\n</li>\n<li>\n<p>ES6 모듈은 export 및 import 문을 사용하여 기능을 내보내고 가져옵니다. 이 구문은 더 현대적이고 언어 명세와 일치하지만, 아직 ES6 모듈을 네이티브로 지원하지 않는 환경에서 변환을 위한 추가 도구가 필요할 수 있습니다.</p>\n</li>\n</ul>\n<p>브라우저 호환성:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>CommonJS 모듈은 브라우저에서 네이티브로 지원되지 않습니다. CommonJS 코드를 브라우저가 이해할 수 있는 형식으로 변환하기 위해 Browserify나 Webpack과 같은 번들러가 필요합니다.</li>\n<li>ES6 모듈은 최신 브라우저에서 지원되며 많은 경우 추가 도구 없이 네이티브로 사용할 수 있습니다. 그러나 오래된 브라우저에서 ES6 모듈을 지원하기 위해서는 Babel과 같은 도구를 사용하여 트랜스 파일링이 필요할 수 있습니다.</li>\n</ul>\n<p>서버 측 사용 사례:</p>\n<ul>\n<li>Node.js는 주로 서버 측 프로그래밍에 사용되며, 동기적인 성격과 쉬운 사용성 때문에 CommonJS 모듈이 잘 어울립니다. 런타임에서 모듈을 동기적으로 로드할 수 있으며, 서버는 모듈이 로드된 후에 실행을 계속할 수 있습니다.</li>\n<li>브라우저 환경에서는 JavaScript 코드가 클라이언트 측에서 실행되며, 응답성을 보장하고 UI 쓰레드를 차단하지 않기 위해 비동기 작업이 선호됩니다. 따라서 웹 개발에서는 비동기적 모듈 로딩을 지원하는 AMD (Asynchronous Module Definition) 또는 ES6 모듈과 같은 다른 모듈 시스템이 일반적으로 사용됩니다.</li>\n</ul>\n<p>성능 고려 사항:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>CommonJS 모듈은 동기적으로 로드되어 브라우저 환경에서 특히 많은 모듈이 있는 대규모 웹 애플리케이션의 성능에 영향을 미칠 수 있습니다. 동기적 모듈 로딩은 페이지 로드 시간이 더 느려지고 응답성이 감소할 수 있습니다.</li>\n<li>다른 모듈 시스템인 AMD나 ES6 모듈에서 지원하는 비동기 모듈 로딩은 모듈이 병렬로 로드되도록 허용하여 모듈 종속성을 로드하는 데 걸리는 시간을 줄여 성능을 향상시킵니다.</li>\n</ul>\n<p>요약하면, CommonJS 모듈은 동기적 특성과 사용 편의성으로 인해 Node.js에서 서버 측 개발에 적합합니다. ES6 모듈은 더 많은 다양성을 제공하며 남종적 및 클라이언트 측 개발에서 점점 더 채택되고 있으며 비동기 모듈 로딩 및 현대적 구문을 지원합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}