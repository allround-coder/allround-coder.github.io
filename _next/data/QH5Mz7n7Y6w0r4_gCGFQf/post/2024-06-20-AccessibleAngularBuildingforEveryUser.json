{"pageProps":{"post":{"title":"Angular 접근성 모든 사용자를 위해 만드는 방법","description":"","date":"2024-06-20 00:30","slug":"2024-06-20-AccessibleAngularBuildingforEveryUser","content":"\n\n<img src=\"/assets/img/2024-06-20-AccessibleAngularBuildingforEveryUser_0.png\" />\n\n모든 사용자의 능력에 관계없이 웹 애플리케이션을 만드는 것은 도덕적인 의무뿐만 아니라 실용적인 필요성도 있습니다. Angular는 강력한 기능과 모듈식 구조로 장애를 가진 사람들을 포함한 모든 사용자를 대상으로 하는 접근성과 포괄성 있는 웹 애플리케이션을 구축하기에 적합합니다. 본 문서에서는 Angular 애플리케이션이 모든 사람에게 접근 가능하도록 하는 데 필요한 모범 사례와 기술을 탐구합니다. 이 문서는 어느 한 형태에 국한되지 않고 개개인들이 포용을 필수적인 애플리케이션을 구축하는 데 필요한 구성 요소로 간주하도록 독려합니다.\n\n## 접근성의 필요성\n\n접근성은 장애를 가진 사람들을 포함한 모든 사용자가 웹 콘텐츠를 인지, 이해, 탐색 및 상호 작용할 수 있도록 보장합니다. 이는 포용성, 사용성 및 종종 법적 준수에 관한 문제입니다. 접근성이 있는 웹 애플리케이션은 사용자 경험을 개선하고 대중의 범위를 확대하며 사회적 책임을 실천함을 나타냅니다.\n\n<div class=\"content-ad\"></div>\n\n## 웹 접근성의 주요 원칙\n\n## 인지할 수 있는\n\n모든 사용자가 인지할 수 있는 방식으로 콘텐츠를 제공해야 합니다. 이에는 비텍스트 콘텐츠에 대한 텍스트 대체물을 제공하고 정보가 다양한 방식(예: 소리와 시각)으로 제공되도록 하는 것이 포함됩니다.\n\n## 조작할 수 있는\n\n<div class=\"content-ad\"></div>\n\n인터페이스 요소들은 작동 가능해야 합니다. 사용자들은 키보드, 마우스, 터치 등 다양한 입력 방법을 사용하여 콘텐츠를 탐색하고 상호 작용할 수 있어야 합니다.\n\n## 이해하기 쉬움\n\n콘텐츠는 이해하기 쉬워야 합니다. 사용자들은 사용자 인터페이스의 정보와 작동을 이해할 수 있어야 합니다.\n\n## 견고함\n\n<div class=\"content-ad\"></div>\n\n넓은 범위의 사용자 에이전트 및 보조 기술을 신뢰할 수 있는 방식으로 해석할 수 있도록 콘텐츠가 강화되어야 합니다.\n\n## 접근 가능한 Angular 애플리케이션 구축을 위한 모범 사례\n\n## 1. 의미 있는 HTML 사용\n\n의미 있는 HTML은 웹 콘텐츠에 의미를 부여하여 접근성을 높입니다. ``header``, ``nav``, ``main``, 그리고 ``footer``와 같은 태그는 응용 프로그램에 구조를 제공하고 보조 기술이 콘텐츠를 올바르게 해석하는 데 도움을 줍니다.\n\n<div class=\"content-ad\"></div>\n\n\nhtml\n<header>\n  <nav>\n    <a routerLink=\"/\" aria-current=\"page\">Home</a>\n    <a routerLink=\"/me\">Me</a>\n    <a routerLink=\"/blog\">Blogs</a>\n  </nav>\n</header>\n<main>\n  <h1>Welcome to my Page</h1>\n  <p>Subscribe to my YouTube Channel! @babatundelmd</p>\n</main>\n<footer>\n  <p>© 2024 Babatunde Lamidi</p>\n</footer>\n\n\n## 2. Implement ARIA (Accessible Rich Internet Applications)\n\nARIA 속성은 웹 콘텐츠의 의미를 향상시켜 보조 기술에 대한 추가 정보를 제공하여 응용 프로그램을 보다 접근성이 높게 만들어줍니다. ARIA 역할, 상태 및 속성을 사용하여 응용 프로그램을 더 쉽게 접근할 수 있도록 만들어보세요.\n\n\n<button aria-label=\"close\" role=\"button\">X</button>\n\n\n<div class=\"content-ad\"></div>\n\n## 3. 키보드 탐색 보장하기\n\n모든 상호작용 요소가 키보드로 접근할 수 있도록 보장하세요. 이는 `tabindex` 속성과 Angular의 기본 포커스 관리를 사용하는 것을 포함합니다.\n\n```js\nimport { Component, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\n@Component({\n selector: 'app-example',\n template: `<button #myButton>Click Me</button>`,\n})\nexport class ExampleComponent implements AfterViewInit {\n @ViewChild('myButton') myButton: ElementRef;\nngAfterViewInit() {\n this.myButton.nativeElement.focus();\n }\n}\n```\n\n## 4. 포커스 프로그래밍 방식으로 관리하기\n\n<div class=\"content-ad\"></div>\n\nAngular의 FocusMonitor를 사용하여 포커스를 동적으로 관리하여 사용자가 항상 애플리케이션 내에서 자신의 위치를 인식할 수 있도록합니다.\n\n```js\nimport { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n\n@Component({\n selector: 'app-focus-example',\n template: `<input #inputField type=\"text\" />`,\n})\nexport class FocusExampleComponent implements OnInit {\n @ViewChild('inputField') inputField: ElementRef;\n private focusMonitor = inject(FocusMonitor)\n\n ngOnInit() {\n  this.focusMonitor.monitor(this.inputField.nativeElement).subscribe(origin => {\n   if (origin) {\n    console.log('Focused from', origin);\n   } else {\n    console.log('Blurred');\n   }\n  });\n }\n}\n```\n\n## 5. 양식 접근성 확보\n\n양식 컨트롤에 레이블을 올바르게 지정하고 적절한 ARIA 속성을 사용하십시오. 키보드를 사용하여 양식을 탐색하고 제출할 수 있도록 보장하세요.\n\n<div class=\"content-ad\"></div>\n\n\n<label for=\"username\">사용자 이름</label>\n<input type=\"text\" id=\"username\" name=\"username\" />\n<label for=\"email\">이메일</label>\n<input type=\"email\" id=\"email\" name=\"email\" />\n<button type=\"submit\" role=\"button\">제출</button>\n\n\n## 6. 충분한 색 대비 보장\n\n시각 장애가 있는 사용자를 위해 텍스트와 배경 간의 높은 대비는 가독성을 향상시킵니다. WebAIM의 색 대비 점검기와 같은 도구를 사용하여 접근성 표준을 준수하는지 확인해보세요.\n\n## 7. 비 텍스트 콘텐츠를 위한 텍스트 대체 제공하기\n\n\n<div class=\"content-ad\"></div>\n\n```js\n<img src=\"image.jpg\" alt=\"이미지 설명\" aria-label=\"프로필 사진\">\n<video controls>\n  <source src=\"intro.mp4\" type=\"video/mp4\" />\n  <track kind=\"captions\" src=\"intro_captions.vtt\" srclang=\"en\" label=\"영어\">\n</video>\n```\n\n## Angular CDK를 활용한 접근성 강화\n\nAngular Component Dev Kit (CDK)은 접근성이 뛰어난 애플리케이션 구축을 더 쉽게 해주는 도구를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n## A11yModule\n\n이 모듈은 포커스 관리 및 실시간 공지를 포함한 다양한 접근성 유틸리티를 제공합니다.\n\n```js\nimport { A11yModule } from '@angular/cdk/a11y';\n@NgModule({\n imports: [A11yModule],\n})\nexport class AppModule {}\n```\n\n## FocusTrap\n\n<div class=\"content-ad\"></div>\n\n특정 요소 내에서 포커스를 잡아두어, 모달과 대화 상자 등에 유용합니다.\n\n```js\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Component, ElementRef, ViewChild, AfterViewInit } from '@angular/core';\n\n@Component({\n selector: 'app-modal',\n template: `<div #modalContent><button>Close</button></div>`,\n})\nexport class ModalComponent implements AfterViewInit {\n @ViewChild('modalContent') modalContent: ElementRef;\n private focusTrap;\n\n constructor(private focusTrapFactory: FocusTrapFactory) {}\n\n ngAfterViewInit() {\n this.focusTrap = this.focusTrapFactory.create(this.modalContent.nativeElement);\n this.focusTrap.focusInitialElement();\n }\n}\n```\n\n## 웹 접근성을 고려한 Angular Material\n\nAngular Material은 웹 접근성을 고려하여 설계되었습니다. 해당 컴포넌트는 WCAG(`Web Content Accessibility Guidelines` 표준)을 준수하는 데 사용되어, 애플리케이션이 강력한 접근성 기반으로 시작될 수 있도록 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { MatInputModule, MatButtonModule } from '@angular/material';\n@NgModule({\n imports: [MatInputModule, MatButtonModule],\n})\nexport class AppModule {}\n```\n\n웹 접근성이란 모든 사용자에게 포용되고 사용하기 쉬운 웹 환경을 만드는 데 준수만큼 중요합니다. Angular의 도구와 기능을 활용하고 최상의 모범 사례를 따르며 애플리케이션을 지속적으로 테스트하고 개선함으로써 모든 사용자가 웹 애플리케이션에 접근하고 혜택을 받을 수 있도록 보장할 수 있습니다. 개발 프로세스에서 웹 접근성을 핵심 원칙으로 받아들이면 포괄적이고 사용자 친화적인 애플리케이션을 구축할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-20-AccessibleAngularBuildingforEveryUser_0.png"},"coverImage":"/assets/img/2024-06-20-AccessibleAngularBuildingforEveryUser_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-20-AccessibleAngularBuildingforEveryUser_0.png\">\n<p>모든 사용자의 능력에 관계없이 웹 애플리케이션을 만드는 것은 도덕적인 의무뿐만 아니라 실용적인 필요성도 있습니다. Angular는 강력한 기능과 모듈식 구조로 장애를 가진 사람들을 포함한 모든 사용자를 대상으로 하는 접근성과 포괄성 있는 웹 애플리케이션을 구축하기에 적합합니다. 본 문서에서는 Angular 애플리케이션이 모든 사람에게 접근 가능하도록 하는 데 필요한 모범 사례와 기술을 탐구합니다. 이 문서는 어느 한 형태에 국한되지 않고 개개인들이 포용을 필수적인 애플리케이션을 구축하는 데 필요한 구성 요소로 간주하도록 독려합니다.</p>\n<h2>접근성의 필요성</h2>\n<p>접근성은 장애를 가진 사람들을 포함한 모든 사용자가 웹 콘텐츠를 인지, 이해, 탐색 및 상호 작용할 수 있도록 보장합니다. 이는 포용성, 사용성 및 종종 법적 준수에 관한 문제입니다. 접근성이 있는 웹 애플리케이션은 사용자 경험을 개선하고 대중의 범위를 확대하며 사회적 책임을 실천함을 나타냅니다.</p>\n<div class=\"content-ad\"></div>\n<h2>웹 접근성의 주요 원칙</h2>\n<h2>인지할 수 있는</h2>\n<p>모든 사용자가 인지할 수 있는 방식으로 콘텐츠를 제공해야 합니다. 이에는 비텍스트 콘텐츠에 대한 텍스트 대체물을 제공하고 정보가 다양한 방식(예: 소리와 시각)으로 제공되도록 하는 것이 포함됩니다.</p>\n<h2>조작할 수 있는</h2>\n<div class=\"content-ad\"></div>\n<p>인터페이스 요소들은 작동 가능해야 합니다. 사용자들은 키보드, 마우스, 터치 등 다양한 입력 방법을 사용하여 콘텐츠를 탐색하고 상호 작용할 수 있어야 합니다.</p>\n<h2>이해하기 쉬움</h2>\n<p>콘텐츠는 이해하기 쉬워야 합니다. 사용자들은 사용자 인터페이스의 정보와 작동을 이해할 수 있어야 합니다.</p>\n<h2>견고함</h2>\n<div class=\"content-ad\"></div>\n<p>넓은 범위의 사용자 에이전트 및 보조 기술을 신뢰할 수 있는 방식으로 해석할 수 있도록 콘텐츠가 강화되어야 합니다.</p>\n<h2>접근 가능한 Angular 애플리케이션 구축을 위한 모범 사례</h2>\n<h2>1. 의미 있는 HTML 사용</h2>\n<p>의미 있는 HTML은 웹 콘텐츠에 의미를 부여하여 접근성을 높입니다. <code>header</code>, <code>nav</code>, <code>main</code>, 그리고 <code>footer</code>와 같은 태그는 응용 프로그램에 구조를 제공하고 보조 기술이 콘텐츠를 올바르게 해석하는 데 도움을 줍니다.</p>\n<div class=\"content-ad\"></div>\n<p>html</p>\n<header>\n  <nav>\n    <a routerlink=\"/\" aria-current=\"page\">Home</a>\n    <a routerlink=\"/me\">Me</a>\n    <a routerlink=\"/blog\">Blogs</a>\n  </nav>\n</header>\n<main>\n  <h1>Welcome to my Page</h1>\n  <p>Subscribe to my YouTube Channel! @babatundelmd</p>\n</main>\n<footer>\n  <p>© 2024 Babatunde Lamidi</p>\n</footer>\n<h2>2. Implement ARIA (Accessible Rich Internet Applications)</h2>\n<p>ARIA 속성은 웹 콘텐츠의 의미를 향상시켜 보조 기술에 대한 추가 정보를 제공하여 응용 프로그램을 보다 접근성이 높게 만들어줍니다. ARIA 역할, 상태 및 속성을 사용하여 응용 프로그램을 더 쉽게 접근할 수 있도록 만들어보세요.</p>\n<p><button aria-label=\"close\" role=\"button\">X</button></p>\n<div class=\"content-ad\"></div>\n<h2>3. 키보드 탐색 보장하기</h2>\n<p>모든 상호작용 요소가 키보드로 접근할 수 있도록 보장하세요. 이는 <code>tabindex</code> 속성과 Angular의 기본 포커스 관리를 사용하는 것을 포함합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">AfterViewInit</span>, <span class=\"hljs-title class_\">ViewChild</span>, <span class=\"hljs-title class_\">ElementRef</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n@<span class=\"hljs-title class_\">Component</span>({\n <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-example'</span>,\n <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&#x3C;button #myButton>Click Me&#x3C;/button>`</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExampleComponent</span> implements <span class=\"hljs-title class_\">AfterViewInit</span> {\n @<span class=\"hljs-title class_\">ViewChild</span>(<span class=\"hljs-string\">'myButton'</span>) <span class=\"hljs-attr\">myButton</span>: <span class=\"hljs-title class_\">ElementRef</span>;\n<span class=\"hljs-title function_\">ngAfterViewInit</span>(<span class=\"hljs-params\"></span>) {\n <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">myButton</span>.<span class=\"hljs-property\">nativeElement</span>.<span class=\"hljs-title function_\">focus</span>();\n }\n}\n</code></pre>\n<h2>4. 포커스 프로그래밍 방식으로 관리하기</h2>\n<div class=\"content-ad\"></div>\n<p>Angular의 FocusMonitor를 사용하여 포커스를 동적으로 관리하여 사용자가 항상 애플리케이션 내에서 자신의 위치를 인식할 수 있도록합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">OnInit</span>, <span class=\"hljs-title class_\">ElementRef</span>, <span class=\"hljs-title class_\">ViewChild</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FocusMonitor</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/cdk/a11y'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-focus-example'</span>,\n <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&#x3C;input #inputField type=\"text\" />`</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FocusExampleComponent</span> implements <span class=\"hljs-title class_\">OnInit</span> {\n @<span class=\"hljs-title class_\">ViewChild</span>(<span class=\"hljs-string\">'inputField'</span>) <span class=\"hljs-attr\">inputField</span>: <span class=\"hljs-title class_\">ElementRef</span>;\n private focusMonitor = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">FocusMonitor</span>)\n\n <span class=\"hljs-title function_\">ngOnInit</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">focusMonitor</span>.<span class=\"hljs-title function_\">monitor</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">inputField</span>.<span class=\"hljs-property\">nativeElement</span>).<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">origin</span> =></span> {\n   <span class=\"hljs-keyword\">if</span> (origin) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Focused from'</span>, origin);\n   } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Blurred'</span>);\n   }\n  });\n }\n}\n</code></pre>\n<h2>5. 양식 접근성 확보</h2>\n<p>양식 컨트롤에 레이블을 올바르게 지정하고 적절한 ARIA 속성을 사용하십시오. 키보드를 사용하여 양식을 탐색하고 제출할 수 있도록 보장하세요.</p>\n<div class=\"content-ad\"></div>\n<p><label for=\"username\">사용자 이름</label>\n<input type=\"text\" id=\"username\" name=\"username\">\n<label for=\"email\">이메일</label>\n<input type=\"email\" id=\"email\" name=\"email\">\n<button type=\"submit\" role=\"button\">제출</button></p>\n<h2>6. 충분한 색 대비 보장</h2>\n<p>시각 장애가 있는 사용자를 위해 텍스트와 배경 간의 높은 대비는 가독성을 향상시킵니다. WebAIM의 색 대비 점검기와 같은 도구를 사용하여 접근성 표준을 준수하는지 확인해보세요.</p>\n<h2>7. 비 텍스트 콘텐츠를 위한 텍스트 대체 제공하기</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;img src=<span class=\"hljs-string\">\"image.jpg\"</span> alt=<span class=\"hljs-string\">\"이미지 설명\"</span> aria-label=<span class=\"hljs-string\">\"프로필 사진\"</span>>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">video</span> <span class=\"hljs-attr\">controls</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"intro.mp4\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"video/mp4\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">track</span> <span class=\"hljs-attr\">kind</span>=<span class=\"hljs-string\">\"captions\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"intro_captions.vtt\"</span> <span class=\"hljs-attr\">srclang</span>=<span class=\"hljs-string\">\"en\"</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"영어\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">video</span>></span>\n</span></code></pre>\n<h2>Angular CDK를 활용한 접근성 강화</h2>\n<p>Angular Component Dev Kit (CDK)은 접근성이 뛰어난 애플리케이션 구축을 더 쉽게 해주는 도구를 제공합니다.</p>\n<div class=\"content-ad\"></div>\n<h2>A11yModule</h2>\n<p>이 모듈은 포커스 관리 및 실시간 공지를 포함한 다양한 접근성 유틸리티를 제공합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { A11yModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/cdk/a11y'</span>;\n@<span class=\"hljs-title class_\">NgModule</span>({\n <span class=\"hljs-attr\">imports</span>: [A11yModule],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<h2>FocusTrap</h2>\n<div class=\"content-ad\"></div>\n<p>특정 요소 내에서 포커스를 잡아두어, 모달과 대화 상자 등에 유용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FocusTrapFactory</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/cdk/a11y'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">ElementRef</span>, <span class=\"hljs-title class_\">ViewChild</span>, <span class=\"hljs-title class_\">AfterViewInit</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-modal'</span>,\n <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&#x3C;div #modalContent>&#x3C;button>Close&#x3C;/button>&#x3C;/div>`</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ModalComponent</span> implements <span class=\"hljs-title class_\">AfterViewInit</span> {\n @<span class=\"hljs-title class_\">ViewChild</span>(<span class=\"hljs-string\">'modalContent'</span>) <span class=\"hljs-attr\">modalContent</span>: <span class=\"hljs-title class_\">ElementRef</span>;\n private focusTrap;\n\n <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private focusTrapFactory: FocusTrapFactory</span>) {}\n\n <span class=\"hljs-title function_\">ngAfterViewInit</span>(<span class=\"hljs-params\"></span>) {\n <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">focusTrap</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">focusTrapFactory</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">modalContent</span>.<span class=\"hljs-property\">nativeElement</span>);\n <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">focusTrap</span>.<span class=\"hljs-title function_\">focusInitialElement</span>();\n }\n}\n</code></pre>\n<h2>웹 접근성을 고려한 Angular Material</h2>\n<p>Angular Material은 웹 접근성을 고려하여 설계되었습니다. 해당 컴포넌트는 WCAG(<code>Web Content Accessibility Guidelines</code> 표준)을 준수하는 데 사용되어, 애플리케이션이 강력한 접근성 기반으로 시작될 수 있도록 합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MatInputModule</span>, <span class=\"hljs-title class_\">MatButtonModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/material'</span>;\n@<span class=\"hljs-title class_\">NgModule</span>({\n <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">MatInputModule</span>, <span class=\"hljs-title class_\">MatButtonModule</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {}\n</code></pre>\n<p>웹 접근성이란 모든 사용자에게 포용되고 사용하기 쉬운 웹 환경을 만드는 데 준수만큼 중요합니다. Angular의 도구와 기능을 활용하고 최상의 모범 사례를 따르며 애플리케이션을 지속적으로 테스트하고 개선함으로써 모든 사용자가 웹 애플리케이션에 접근하고 혜택을 받을 수 있도록 보장할 수 있습니다. 개발 프로세스에서 웹 접근성을 핵심 원칙으로 받아들이면 포괄적이고 사용자 친화적인 애플리케이션을 구축할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}