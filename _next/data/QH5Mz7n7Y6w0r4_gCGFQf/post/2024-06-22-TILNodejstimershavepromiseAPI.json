{"pageProps":{"post":{"title":"오늘 배운 것 Nodejs 타이머의 Promise API 사용 방법","description":"","date":"2024-06-22 13:58","slug":"2024-06-22-TILNodejstimershavepromiseAPI","content":"\n\n안녕하세요! 코드 개발자 여러분!\n\n혹시 자바스크립트/타입스크립트를 사용하여 기능을 코딩하면서 \"오 이 코드에 2초의 인위적인 지연을 추가해야겠네\"라고 깨달은 적이 있나요? 그럴 땐 아래와 같이 코드를 작성해야겠지요:\n\n```js\n// 처음에 프로미스가 아닌 것을 프로미스화하기\nawait new Promise<void>((resolve, reject) => {\n  setTimeout(() => {\n    resolve()\n  }, 2_000)\n})\n```\n\n저는 저런 경우를 참 많이 겪었어요. 특히 직장에서 코드를 작성할 때죠. 때로는 그런 게 간단하지 않다는 건 거니까요.\n\n<div class=\"content-ad\"></div>\n\n노드.js는 setTimeout, setInterval 및 setImmediate 같은 모든 타이머에 대한 프로미스 API를 이미 제공했으므로 기뻐해야 합니다.\n\n그냥 timers/promises에서 해당 set 함수를 가져와서 사용할 수 있습니다.\n\n```js\n// 프로미스를 사용한 정확히 2초의 지연\nimport { setTimeout } from 'timers/promises'\n\nawait setTimeout(2_000, 'success')\n```\n\n그리고 두 번째 인자로 전달한 값으로 2초 후에 프로미스가 해결됩니다. 멋지죠!\n\n<div class=\"content-ad\"></div>\n\n오늘 새로운 것을 배우셨으면 좋겣습니다.\n\n즐거운 학습 되세요.\n\n안녕히 가세요~","ogImage":{"url":"/assets/img/2024-06-22-TILNodejstimershavepromiseAPI_0.png"},"coverImage":"/assets/img/2024-06-22-TILNodejstimershavepromiseAPI_0.png","tag":["Tech"],"readingTime":1},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요! 코드 개발자 여러분!</p>\n<p>혹시 자바스크립트/타입스크립트를 사용하여 기능을 코딩하면서 \"오 이 코드에 2초의 인위적인 지연을 추가해야겠네\"라고 깨달은 적이 있나요? 그럴 땐 아래와 같이 코드를 작성해야겠지요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 처음에 프로미스가 아닌 것을 프로미스화하기</span>\n<span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-keyword\">void</span>>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">resolve</span>()\n  }, <span class=\"hljs-number\">2_000</span>)\n})\n</code></pre>\n<p>저는 저런 경우를 참 많이 겪었어요. 특히 직장에서 코드를 작성할 때죠. 때로는 그런 게 간단하지 않다는 건 거니까요.</p>\n<div class=\"content-ad\"></div>\n<p>노드.js는 setTimeout, setInterval 및 setImmediate 같은 모든 타이머에 대한 프로미스 API를 이미 제공했으므로 기뻐해야 합니다.</p>\n<p>그냥 timers/promises에서 해당 set 함수를 가져와서 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 프로미스를 사용한 정확히 2초의 지연</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-built_in\">setTimeout</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'timers/promises'</span>\n\n<span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-number\">2_000</span>, <span class=\"hljs-string\">'success'</span>)\n</code></pre>\n<p>그리고 두 번째 인자로 전달한 값으로 2초 후에 프로미스가 해결됩니다. 멋지죠!</p>\n<div class=\"content-ad\"></div>\n<p>오늘 새로운 것을 배우셨으면 좋겣습니다.</p>\n<p>즐거운 학습 되세요.</p>\n<p>안녕히 가세요~</p>\n</body>\n</html>\n"},"__N_SSG":true}