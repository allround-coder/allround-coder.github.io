{"pageProps":{"post":{"title":"JavaScript를 사용하여 HTML과 JSON을 연결하는 방법","description":"","date":"2024-05-01 23:21","slug":"2024-05-01-HowtoConnectHTMLwithJSONUsingJavaScriptABeginnersGuide","content":"\n\n![이미지](/assets/img/2024-05-01-HowtoConnectHTMLwithJSONUsingJavaScriptABeginnersGuide_0.png)\n\n웹 개발은 흥미로운 여정입니다. 동적 웹 페이지를 만드는 첫 번째 단계 중 하나는 HTML을 JSON 데이터와 연결하는 방법을 배우는 것입니다. 이 초보자를 위한 가이드에서는 시작하는 데 도움이 되는 간단한 예제를 통해 안내해 드리겠습니다.\n\n# 필수 준비물\n\n시작하기 전에 다음이 필요합니다:\n\n<div class=\"content-ad\"></div>\n\n- HTML 및 JavaScript의 기본 지식.\n- 코드 편집기(예: Visual Studio Code).\n- 웹 브라우저.\n\n# 단계 1: HTML 구조 만들기\n\nJSON 데이터를 표시하기 위한 HTML 구조를 설정하는 것부터 시작해 봅시다. 이 예시에서는 데이터를 표시할 기본 HTML 페이지를 만들어보겠습니다. 여기에 데이터가 표시될 `div`를 생성할 것입니다. 아래는 간단한 HTML 구조입니다:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>JSON을 HTML로 변환하는 예시</title>\n</head>\n<body>\n    <div id=\"dataDisplay\">\n        <!-- JSON 데이터가 여기에 표시됩니다 -->\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n이 HTML 구조에서는 JSON 데이터를 표시할 `div` 요소를 id가 \"dataDisplay\"인 요소로 설정했습니다.\n\n# 단계 2: JSON 데이터 생성하기\n\n이제 표시할 데이터가 포함된 간단한 JSON 파일을 만들어보겠습니다. 이 예제에서는 다음과 같은 구조를 가진 data.json이라는 JSON 파일을 사용하겠습니다:\n\n```js\n{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"city\": \"Anytown\"\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 JSON 데이터는 사람의 이름, 나이, 도시를 나타냅니다.\n\n# 단계 3: 자바스크립트를 작성하여 HTML 채우기\n\n자, 이제 JavaScript 파일 (script.js)을 작성하여 JSON 데이터를 가져와 HTML에 표시해 보겠습니다:\n\n```js\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    fetch('data.json')\n        .then(response => response.json())\n        .then(data => {\n            const dataDisplay = document.getElementById(\"dataDisplay\");\n\n            // JSON 데이터를 표시하는 HTML 요소 생성\n            const nameElement = document.createElement(\"p\");\n            nameElement.textContent = \"이름: \" + data.name;\n\n            const ageElement = document.createElement(\"p\");\n            ageElement.textContent = \"나이: \" + data.age;\n\n            const cityElement = document.createElement(\"p\");\n            cityElement.textContent = \"도시: \" + data.city;\n\n            // 요소들을 \"dataDisplay\" div에 추가\n            dataDisplay.appendChild(nameElement);\n            dataDisplay.appendChild(ageElement);\n            dataDisplay.appendChild(cityElement);\n        })\n        .catch(error => console.error(\"JSON 데이터를 가져오는 중 오류 발생:\", error));\n});\n```\n\n<div class=\"content-ad\"></div>\n\n이 JavaScript 코드는 fetch API를 사용하여 data.json에서 JSON 데이터를로드합니다. 그런 다음 JSON 데이터 (이름, 나이 및 도시)를 표시하기 위해 HTML 요소를 생성하고 \"dataDisplay\" div에 추가합니다.\n\n# 단계 4: 웹 페이지 테스트하기\n\n웹 브라우저에서 HTML 파일을 열면 페이지에 JSON 데이터가 표시됩니다. 축하합니다! JavaScript를 사용하여 HTML과 JSON을 성공적으로 연결했습니다!\n\n이것은 당신의 웹 개발 여정의 시작에 불과합니다. 이 기본 지식을 바탕으로 더 많은 고급 기능을 탐색하고, 상호 작용형 웹 애플리케이션을 만들고 사용자를 참여시킬 동적 웹 사이트를 구축할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n디지피 | 즐거운 코딩! 🖥️🥰","ogImage":{"url":"/assets/img/2024-05-01-HowtoConnectHTMLwithJSONUsingJavaScriptABeginnersGuide_0.png"},"coverImage":"/assets/img/2024-05-01-HowtoConnectHTMLwithJSONUsingJavaScriptABeginnersGuide_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-01-HowtoConnectHTMLwithJSONUsingJavaScriptABeginnersGuide_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"웹 개발은 흥미로운 여정입니다. 동적 웹 페이지를 만드는 첫 번째 단계 중 하나는 HTML을 JSON 데이터와 연결하는 방법을 배우는 것입니다. 이 초보자를 위한 가이드에서는 시작하는 데 도움이 되는 간단한 예제를 통해 안내해 드리겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"필수 준비물\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시작하기 전에 다음이 필요합니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"HTML 및 JavaScript의 기본 지식.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"코드 편집기(예: Visual Studio Code).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"웹 브라우저.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 1: HTML 구조 만들기\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"JSON 데이터를 표시하기 위한 HTML 구조를 설정하는 것부터 시작해 봅시다. 이 예시에서는 데이터를 표시할 기본 HTML 페이지를 만들어보겠습니다. 여기에 데이터가 표시될 \", _jsx(_components.code, {\n        children: \"div\"\n      }), \"를 생성할 것입니다. 아래는 간단한 HTML 구조입니다:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DOCTYPE\"\n        }), \" html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>JSON을 HTML로 변환하는 예시</title>\\n</head>\\n<body>\\n    <div id=\\\"dataDisplay\\\">\\n        <!-- JSON 데이터가 여기에 표시됩니다 -->\\n    </div>\\n    <script src=\\\"script.js\\\"></script>\\n</body>\\n</html>\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 HTML 구조에서는 JSON 데이터를 표시할 \", _jsx(_components.code, {\n        children: \"div\"\n      }), \" 요소를 id가 \\\"dataDisplay\\\"인 요소로 설정했습니다.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 2: JSON 데이터 생성하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 표시할 데이터가 포함된 간단한 JSON 파일을 만들어보겠습니다. 이 예제에서는 다음과 같은 구조를 가진 data.json이라는 JSON 파일을 사용하겠습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"{\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"name\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"John Doe\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"age\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"30\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"city\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Anytown\\\"\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 JSON 데이터는 사람의 이름, 나이, 도시를 나타냅니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 3: 자바스크립트를 작성하여 HTML 채우기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자, 이제 JavaScript 파일 (script.js)을 작성하여 JSON 데이터를 가져와 HTML에 표시해 보겠습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"DOMContentLoaded\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetch\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'data.json'\"\n        }), \")\\n        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"response\"\n          }), \" =>\"]\n        }), \" response.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"json\"\n        }), \"())\\n        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"data\"\n          }), \" =>\"]\n        }), \" {\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" dataDisplay = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dataDisplay\\\"\"\n        }), \");\\n\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// JSON 데이터를 표시하는 HTML 요소 생성\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" nameElement = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createElement\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"p\\\"\"\n        }), \");\\n            nameElement.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"textContent\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"이름: \\\"\"\n        }), \" + data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \";\\n\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" ageElement = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createElement\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"p\\\"\"\n        }), \");\\n            ageElement.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"textContent\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"나이: \\\"\"\n        }), \" + data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"age\"\n        }), \";\\n\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" cityElement = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createElement\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"p\\\"\"\n        }), \");\\n            cityElement.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"textContent\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"도시: \\\"\"\n        }), \" + data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"city\"\n        }), \";\\n\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 요소들을 \\\"dataDisplay\\\" div에 추가\"\n        }), \"\\n            dataDisplay.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"appendChild\"\n        }), \"(nameElement);\\n            dataDisplay.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"appendChild\"\n        }), \"(ageElement);\\n            dataDisplay.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"appendChild\"\n        }), \"(cityElement);\\n        })\\n        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"catch\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"error\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"JSON 데이터를 가져오는 중 오류 발생:\\\"\"\n        }), \", error));\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 JavaScript 코드는 fetch API를 사용하여 data.json에서 JSON 데이터를로드합니다. 그런 다음 JSON 데이터 (이름, 나이 및 도시)를 표시하기 위해 HTML 요소를 생성하고 \\\"dataDisplay\\\" div에 추가합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 4: 웹 페이지 테스트하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"웹 브라우저에서 HTML 파일을 열면 페이지에 JSON 데이터가 표시됩니다. 축하합니다! JavaScript를 사용하여 HTML과 JSON을 성공적으로 연결했습니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것은 당신의 웹 개발 여정의 시작에 불과합니다. 이 기본 지식을 바탕으로 더 많은 고급 기능을 탐색하고, 상호 작용형 웹 애플리케이션을 만들고 사용자를 참여시킬 동적 웹 사이트를 구축할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"디지피 | 즐거운 코딩! 🖥️🥰\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}