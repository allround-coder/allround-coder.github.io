{"pageProps":{"post":{"title":"HTML <dialog> 요소를 사용한 JavaScript와 React에서의 모달(dialog)","description":"","date":"2024-05-02 00:07","slug":"2024-05-02-ModalswithHTMLdialogelementinJavaScriptandReact","content":"\n\n![image](/assets/img/2024-05-02-ModalswithHTMLdialogelementinJavaScriptandReact_0.png)\n\n다이얼로그 태그는 모달과 같은 컴포넌트를 만드는 좋은 방법입니다. 여기에는 구현하는 몇 가지 방법이 있습니다.\n\n일반적으로 `dialog`는 상호 작용 컴포넌트를 만들며, 간단한 대화상자나 모달로 변환할 수 있습니다. 전자는 컴포넌트를 단순히 열고, 후자는 모달이 열려 있는 동안 페이지의 나머지 콘텐츠를 비활성화하는 것입니다.\n\n모달의 예시는 다음과 같을 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<!-- Modal - HTML -->\n<dialog id=\"modal\">\n  <h1>이것은 모달입니다.</h1>\n  <button id=\"closeModal\">모달 닫기</button>\n</dialog>\n<button id=\"openModal\">모달 보이기</button>\n```\n\n```js\n// Modal - JavaScript\nconst modal = document.getElementById(\"modal\");\nconst openModal = document.getElementById(\"openModal\");\nconst closeModal = document.getElementById(\"closeModal\");\n\nopenModal.addEventListener(\"click\", () => {\n  modal.showModal();\n});\n\ncloseModal.addEventListener(\"click\", () => {\n  modal.close();\n});\n```\n\n다이얼로그 예시는 다음과 같을 수 있습니다:\n\n```js\n<!-- Dialog - HTML -->\n<dialog id=\"dialog\">\n  <h1>이것은 다이얼로그입니다.</h1>\n  <button id=\"closeDialog\">다이얼로그 닫기</button>\n</dialog>\n<button id=\"openDialog\">다이얼로그 보이기</button>\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n// 다이얼로그 - JavaScript\nconst dialog = document.getElementById(\"dialog\");\nconst openDialog = document.getElementById(\"openDialog\");\nconst closeDialog = document.getElementById(\"closeDialog\");\n\nopenDialog.addEventListener(\"click\", () => {\n  dialog.show();\n});\n\ncloseDialog.addEventListener(\"click\", () => {\n  dialog.close();\n});\n```\n\n두 가지 사이의 유일한 차이점은 그들을 열기 위한 함수입니다. 모달의 경우 showModal() 메소드를 사용해야 하고 간단한 다이얼로그의 경우 show()를 사용해야 합니다. 코드의 나머지 부분은 동일합니다.\n\n`dialog`은 보이는 다이얼로그를 보여주는 open 속성이 있습니다 (설정된 경우). 예를 들어:\n\n```js\n<dialog open>\n  <h1>This dialog will always be shown.</h1>\n</dialog>\n```\n\n<div class=\"content-ad\"></div>\n\n표시를 켜거나 끄기 위해 true/false로 설정할 수도 있습니다 (예를 들어 React의 useState와 함께 사용할 수 있습니다). 그러나 이 경우에는 항상 비모달(non-modal)로 설정되므로 showModal()/show() 메서드를 사용하는 것이 좋습니다.\n\nReact에서 이 작업을 수행하는 한 가지 방법은 useEffect와 useRef를 사용하는 것입니다:\n\n```js\n// Modal을 별도의 컴포넌트로 만들기\nimport { useEffect, useRef } from \"react\";\n\nfunction Modal({ openModal, closeModal, children }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (openModal) {\n      ref.current?.showModal();\n    } else {\n      ref.current?.close();\n    }\n  }, [openModal]);\n\n  return (\n    <dialog\n      ref={ref}\n      onCancel={closeModal}\n    >\n      {children}\n      <button onClick={closeModal}>\n        닫기\n      </button>\n    </dialog>\n  );\n}\n\nexport default MenuModal;\n```\n\n여기서 useRef는 렌더링 용도로 값을 참조하고, useEffect는 열기/닫기 상태를 확인하는 데 사용됩니다(이는 props를 통해 전달됩니다). 또한 올바르게 ESC 키를 사용하기 위해 onCancel 속성도 있습니다(키보드로 모달을 닫으려는 경우 사용할 수 있습니다).\n\n<div class=\"content-ad\"></div>\n\n그럼 모달 구성 요소를 페이지 구성 요소에 추가하고 useState로 상태를 설정해야 합니다. 모달을 열거나 닫으려면 다음을 추가하십시오:\n\n```js\n// 페이지 구성 요소\nimport { useState } from \"react\";\nimport { Modal } from \"./Modal\";\n\nfunction PageComponent() {\n  const [modal, setModal] = useState(false);\n\n  return (\n    <button\n      onClick={() => setModal(true)}\n    >\n      모달 열기\n    </button>\n    <Modal\n      openModal={modal}\n      closeModal={() => setModal(false)}\n    >\n      모달 내용.\n    </Modal>\n  )\n\nexport default PageComponent;\n```\n\n위의 React 예시에서 showModal() 메서드를 show()로 변경하면 모달 대신 간단한 대화상자를 사용합니다. 이 경우 대화상자를 기타 요소 위에 표시하려는 경우 CSS 파일에서 z-index를 추가로 설정해야 할 수 있습니다 (대화상자가 열렸을 때 다른 요소에 접근할 수 있게 합니다).\n\nCSS에 대한 추가 설정으로는 모달에 대한 ::backdrop 가상 요소를 설정하는 것이 있습니다. 예를 들어 배경을 어둡게 하려면 (기본 변형보다 더 어둡게) 다음과 같이 설정할 수 있습니다:```\n\n<div class=\"content-ad\"></div>\n\n```js\n.modalClassName::backdrop {\n  background: rgba(0, 0, 0, 0.5);\n}\n```\n\n다음은 `dialog` 요소를 사용하는 몇 가지 가능한 방법입니다. `div`와 같은 변종을 사용하는 대신 모달/대화 상자에 적절한 태그를 가지고 있는 것은 좋은 점이지만 물론 항상 다른 접근 방식이 있습니다.\n\n읽어 주셔서 감사합니다.\n```","ogImage":{"url":"/assets/img/2024-05-02-ModalswithHTMLdialogelementinJavaScriptandReact_0.png"},"coverImage":"/assets/img/2024-05-02-ModalswithHTMLdialogelementinJavaScriptandReact_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    code: \"code\",\n    pre: \"pre\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-02-ModalswithHTMLdialogelementinJavaScriptandReact_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다이얼로그 태그는 모달과 같은 컴포넌트를 만드는 좋은 방법입니다. 여기에는 구현하는 몇 가지 방법이 있습니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"일반적으로 \", _jsx(_components.code, {\n        children: \"dialog\"\n      }), \"는 상호 작용 컴포넌트를 만들며, 간단한 대화상자나 모달로 변환할 수 있습니다. 전자는 컴포넌트를 단순히 열고, 후자는 모달이 열려 있는 동안 페이지의 나머지 콘텐츠를 비활성화하는 것입니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"모달의 예시는 다음과 같을 수 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!-- \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modal\"\n        }), \" - \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"HTML\"\n        }), \" -->\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dialog\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"modal\\\"\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"이것은 모달입니다.\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"closeModal\\\"\"\n            }), \">\"]\n          }), \"모달 닫기\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dialog\"\n            }), \">\"]\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"openModal\\\"\"\n            }), \">\"]\n          }), \"모달 보이기\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Modal - JavaScript\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" modal = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"modal\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" openModal = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"openModal\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" closeModal = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"closeModal\\\"\"\n        }), \");\\n\\nopenModal.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"click\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  modal.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"showModal\"\n        }), \"();\\n});\\n\\ncloseModal.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"click\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  modal.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"close\"\n        }), \"();\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다이얼로그 예시는 다음과 같을 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!-- \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dialog\"\n        }), \" - \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"HTML\"\n        }), \" -->\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dialog\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"dialog\\\"\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"이것은 다이얼로그입니다.\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"closeDialog\\\"\"\n            }), \">\"]\n          }), \"다이얼로그 닫기\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dialog\"\n            }), \">\"]\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"openDialog\\\"\"\n            }), \">\"]\n          }), \"다이얼로그 보이기\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 다이얼로그 - JavaScript\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" dialog = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dialog\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" openDialog = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"openDialog\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" closeDialog = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getElementById\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"closeDialog\\\"\"\n        }), \");\\n\\nopenDialog.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"click\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  dialog.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"show\"\n        }), \"();\\n});\\n\\ncloseDialog.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"click\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  dialog.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"close\"\n        }), \"();\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"두 가지 사이의 유일한 차이점은 그들을 열기 위한 함수입니다. 모달의 경우 showModal() 메소드를 사용해야 하고 간단한 다이얼로그의 경우 show()를 사용해야 합니다. 코드의 나머지 부분은 동일합니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"dialog\"\n      }), \"은 보이는 다이얼로그를 보여주는 open 속성이 있습니다 (설정된 경우). 예를 들어:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<dialog open>\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"This dialog will always be shown.\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \"\\n</dialog>\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"표시를 켜거나 끄기 위해 true/false로 설정할 수도 있습니다 (예를 들어 React의 useState와 함께 사용할 수 있습니다). 그러나 이 경우에는 항상 비모달(non-modal)로 설정되므로 showModal()/show() 메서드를 사용하는 것이 좋습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React에서 이 작업을 수행하는 한 가지 방법은 useEffect와 useRef를 사용하는 것입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Modal을 별도의 컴포넌트로 만들기\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useEffect, useRef } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Modal\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ openModal, closeModal, children }\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" ref = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useRef\"\n        }), \"();\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (openModal) {\\n      ref.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \"?.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"showModal\"\n        }), \"();\\n    } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n      ref.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \"?.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"close\"\n        }), \"();\\n    }\\n  }, [openModal]);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dialog\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ref\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{ref}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onCancel\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{closeModal}\"\n            }), \"\\n    >\"]\n          }), \"\\n      {children}\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{closeModal}\"\n            }), \">\"]\n          }), \"\\n        닫기\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dialog\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MenuModal\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 useRef는 렌더링 용도로 값을 참조하고, useEffect는 열기/닫기 상태를 확인하는 데 사용됩니다(이는 props를 통해 전달됩니다). 또한 올바르게 ESC 키를 사용하기 위해 onCancel 속성도 있습니다(키보드로 모달을 닫으려는 경우 사용할 수 있습니다).\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그럼 모달 구성 요소를 페이지 구성 요소에 추가하고 useState로 상태를 설정해야 합니다. 모달을 열거나 닫으려면 다음을 추가하십시오:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 페이지 구성 요소\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modal\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./Modal\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"PageComponent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [modal, setModal] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \");\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" setModal(true)}\\n    >\\n      모달 열기\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          })]\n        }), \"\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Modal\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"openModal\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{modal}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"closeModal\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" setModal(false)}\\n    >\\n      모달 내용.\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Modal\"\n            }), \">\"]\n          })]\n        }), \"\\n  )\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PageComponent\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위의 React 예시에서 showModal() 메서드를 show()로 변경하면 모달 대신 간단한 대화상자를 사용합니다. 이 경우 대화상자를 기타 요소 위에 표시하려는 경우 CSS 파일에서 z-index를 추가로 설정해야 할 수 있습니다 (대화상자가 열렸을 때 다른 요소에 접근할 수 있게 합니다).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"CSS에 대한 추가 설정으로는 모달에 대한 ::backdrop 가상 요소를 설정하는 것이 있습니다. 예를 들어 배경을 어둡게 하려면 (기본 변형보다 더 어둡게) 다음과 같이 설정할 수 있습니다:```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"modalClassName\"\n        }), \"::backdrop {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"background\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rgba\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.5\"\n        }), \");\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"다음은 \", _jsx(_components.code, {\n        children: \"dialog\"\n      }), \" 요소를 사용하는 몇 가지 가능한 방법입니다. \", _jsx(_components.code, {\n        children: \"div\"\n      }), \"와 같은 변종을 사용하는 대신 모달/대화 상자에 적절한 태그를 가지고 있는 것은 좋은 점이지만 물론 항상 다른 접근 방식이 있습니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"읽어 주셔서 감사합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {})\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}