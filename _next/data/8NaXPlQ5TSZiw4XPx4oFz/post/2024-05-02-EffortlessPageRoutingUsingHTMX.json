{"pageProps":{"post":{"title":"HTMX를 활용해 쉬운 페이지 라우팅하기","description":"","date":"2024-05-02 00:04","slug":"2024-05-02-EffortlessPageRoutingUsingHTMX","content":"\n\n![이미지](/assets/img/2024-05-02-EffortlessPageRoutingUsingHTMX_0.png)\n\n리액트는 종종 웹 애플리케이션에 지나치게 많은 요소를 포함하고 있을 수 있으며, HTMX와 함께 웹 서버만 사용하여 상호 작용 애플리케이션을 만드는 것이 동등한 결과를 얻을 수 있는 경우가 있습니다.\n\n이 블로그 포스트에서는 HTMX를 활용하여 상호 작용이 가능하고 화면 깜빡임이 없는 페이지 이동을 작성하는 방법을 설명하겠습니다:\n\n## 서버 설정\n\n<div class=\"content-ad\"></div>\n\n```js\nmkdir no-react-app \ncd no-react-app\nnpm init -y\nnpm install express nunjucks\n```\n\n그런 다음 서버 파일을 만들고 실행합니다.\n\n```js\n//File: app.js\nconst express = require(\"express\")\nconst app = express()\n\nconst nunjucks = require('nunjucks');\nnunjucks.configure(\"views\", {\n    autoescape: true,\n    express: app\n});\n\napp.get(\"/\", (req, res) => {\n    res.render(\"pages/home.html\")\n})\n\napp.get(\"/users\", (req, res) => {\n    res.render(\"pages/users.html\")\n})\n\napp.get(\"/posts\", (req, res) => {\n    res.render(\"pages/posts.html\")\n})\n\napp.listen(3000, () => {\n    console.info(`Application running http://localhost:3000`)\n})\n```\n\n저희는 템플릿 엔진으로 nunjucks를 사용합니다. 모든 템플릿, 레이아웃 및 부분 파일은 \"views\" 디렉토리에 저장됩니다. 따라서 프로젝트 구조는 다음과 같을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## 앱 구조\n\n```js\napp.js\nviews\n  layouts\n    main.html\n  partials\n    sidenav.html\n  pages\n    user.html\n    home.html\n    posts.html\n```\n\n템플릿 엔진을 사용하기 때문에 모든 뷰가 확장할 레이아웃을 추가합시다.\n\n## 메인 레이아웃\n\n<div class=\"content-ad\"></div>\n\n```js\n<!--File: views/layouts/main.html-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\"\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.0.2/tailwind.min.css\" />\n    <title>HTMX App</title>\n</head>\n\n<body class=\"bg-gray-200\">\n    <div class=\"flex h-screen\">\n        <!-- Side Navigation -->\n        {- include('partials/sidenav.html')}\n\n        <!-- Main Content Area -->\n        <div class=\"w-full bg-white p-4\" id=\"main\">\n            { block content }{ endblock }\n        </div>\n</body>\n\n</html>\n``` \n\nsidenav 템플릿 컴포넌트를 partials로 리팩터링하여 레이아웃에 포함했습니다.\n\n## Side Nav Component\n\n```js\n<!--File: views/partials/sidenav.html-->\n<div class=\"w-56 bg-gray-800 text-white p-4\">\n    <a href=\"/\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Home</a>\n    <a href=\"/users\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Users</a>\n    <a href=\"/posts\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Posts</a>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n그리고 우리는 메인 페이지인 home.html, users.html 및 posts.html을 만들었습니다.\n\n## 페이지\n\n```js\n<!--views/pages/home.html-->\n{ extends 'layouts/main.html' }\n\n{ block content }\n<h1 class=\"text-2xl font-bold mb-4\">HTMX Nav</h1>\n{ endblock }\n```\n\n```js\n<!--views/pages/users.html-->\n{ extends 'layouts/main.html' }\n\n{ block content }\n<h1 class=\"text-2xl font-bold mb-4\">Users</h1>\n{ endblock }\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n<!-- views/pages/posts.html -->\n{ extends 'layouts/main.html' }\n\n{ block content }\n<h1 class=\"text-2xl font-bold mb-4\">Posts</h1>\n{ endblock }\n```\n\n서버를 실행하면 네비게이션이 있지만 전체 페이지가 다시 로드됩니다:\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*yPvQ3Jj47osdFfxsoMXqSg.gif\" />\n\nHTMX라는 가벼운 JavaScript 라이브러리를 사용하여 이 문제를 해결해야 합니다. 이 라이브러리는 보다 더 순조롭고 상호작용적인 사용자 네비게이션 경험을 크게 향상시킬 수 있습니다. HTMX는 더 다양한 응용 프로그램에서 사용할 수 있지만, 현재 목적에 맞게 더 원활한 네비게이션을 달성하기 위해 그 능력을 활용하는 데 중점을 둘 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## HTMX를 사용하여 점진적으로 향상시키기\n\nHTMX를 사용하는 가장 빠른 방법은 CDN을 통해 로드하는 것입니다. 다음 코드를 head 태그에 추가하면 간단히 시작할 수 있습니다:\n\n```js\n<!--File: views/layouts/main.html-->\n...\n<script src=\"https://unpkg.com/htmx.org@latest\"></script>\n<title>HTMX App</title>\n</head>\n...\n```\n\n이제 사이드네비게이션 바에 작은 변경을 가할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n- href 속성을 제거하고 hx-get 속성으로 대체합니다. 사용자가이 링크를 클릭하면 HTTP GET 요청이 발생합니다.\n- 각 앵커에 hx-target 속성을 추가하거나 앵커 상위 div에 하나 추가하십시오. hx-target 속성을 사용하면 응답을 교체할 요소를 대상으로 지정할 수 있습니다.\n- 각 앵커에 hx-push-url=\"true\"를 추가하십시오. hx-push-url 속성을 사용하면 URL을 브라우저 위치 기록에 추가할 수 있습니다. 이를 통해 새로운 기록 항목이 생성되어 브라우저의 뒤로/앞으로 버튼을 사용한 탐색이 가능합니다.\n\n이것이 무엇을 하는가: 우리는 \"main\" id의 div에서 응답을 삽입할 때 HTMX lib에 서버 호출을 만드는 방법을 선언적으로 지시하고 있습니다.\n\n```js\n<div class=\"w-56 bg-gray-800 text-white p-4\" hx-target=\"#main\">\n    <a hx-get=\"/\" hx-push-url=\"true\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Home</a>\n    <a hx-get=\"/users\" hx-push-url=\"true\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Users</a>\n    <a hx-get=\"/posts\" hx-push-url=\"true\" class=\"block py-2 px-4 text-white hover:bg-gray-600\">Posts</a>\n</div>\n```\n\n이제 다음과 같습니다.\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*LOvL_BdO8v6B-La18uqJug.gif)\n\n번쩍임 문제를 해결했고 새로운 URL로 올바르게 전환됩니다. 이제 다른 사람에게 내비게이션을 공유하고 싶다면 새로운 URL로 이동하게 됩니다.\n\n### 앱을 HTMX 알아보기\n\n각 서버 요청이 HTMX 호출인지 여부를 결정해야 합니다. 만약 HTMX 호출이라면 레이아웃을 사용하지 말고 해당 템플릿의 HTML을 그대로 반환하도록 템플릿 엔진에 지시해야 합니다. 이를 위해 특정 미들웨어를 포함해야 합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// 파일: app.js\n...\napp.use((req, res, next) => {\n    res.locals.useLayout = req.headers[\"hx-request\"] !== \"true\";\n    next();\n})\n\napp.listen(3000, () => {\n    console.info(`애플리케이션이 http://localhost:3000에서 실행 중입니다.`)\n})\n```\n\nHTMX 요청이 감지되지 않는 경우에만 레이아웃을 사용합니다.\n\n```js\n<!-- 파일: views/layouts/main.html -->\n{ if useLayout }\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\"\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.0.2/tailwind.min.css\" />\n    <script src=\"https://unpkg.com/htmx.org@latest\"></script>\n    <title>HTMX App</title>\n</head>\n<body class=\"bg-gray-200\">\n    <div class=\"flex h-screen\">\n        <!-- Side Navigation -->\n        {- include('partials/sidenav.html')}\n        <!-- Main Content Area -->\n        <div class=\"w-full bg-white p-4\" id=\"main\">\n{ endif }\n\n            { block content }{ endblock }\n\n{ if useLayout }\n        </div>\n</body>\n</html>\n{ endif }\n```\n\nURL을 공유할 수 있도록 원활하고 번쩍임 없는 내비게이션 경험을 성공적으로 달성했습니다.\n\n<div class=\"content-ad\"></div>\n\n[이미지](https://miro.medium.com/v2/resize:fit:1400/1*hdhwN-9D2qdkYFyXwJ6XEg.gif)\n\n원본 블로그 게시물: [https://nanosoft.co.za/blog/post/express-htmx](https://nanosoft.co.za/blog/post/express-htmx)\n\n소스 코드: [https://github.com/nanosoftonline/express-htmx](https://github.com/nanosoftonline/express-htmx)","ogImage":{"url":"/assets/img/2024-05-02-EffortlessPageRoutingUsingHTMX_0.png"},"coverImage":"/assets/img/2024-05-02-EffortlessPageRoutingUsingHTMX_0.png","tag":["Tech"],"readingTime":7},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-02-EffortlessPageRoutingUsingHTMX_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"리액트는 종종 웹 애플리케이션에 지나치게 많은 요소를 포함하고 있을 수 있으며, HTMX와 함께 웹 서버만 사용하여 상호 작용 애플리케이션을 만드는 것이 동등한 결과를 얻을 수 있는 경우가 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 블로그 포스트에서는 HTMX를 활용하여 상호 작용이 가능하고 화면 깜빡임이 없는 페이지 이동을 작성하는 방법을 설명하겠습니다:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"서버 설정\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"mkdir no-react-app \\ncd no-react-app\\nnpm init -y\\nnpm install express nunjucks\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런 다음 서버 파일을 만들고 실행합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//File: app.js\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" express = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"express\\\"\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" app = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"express\"\n        }), \"()\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" nunjucks = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'nunjucks'\"\n        }), \");\\nnunjucks.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"configure\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"views\\\"\"\n        }), \", {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"autoescape\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"express\"\n        }), \": app\\n});\\n\\napp.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/\\\"\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"req, res\"\n          }), \") =>\"]\n        }), \" {\\n    res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"render\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"pages/home.html\\\"\"\n        }), \")\\n})\\n\\napp.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/users\\\"\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"req, res\"\n          }), \") =>\"]\n        }), \" {\\n    res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"render\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"pages/users.html\\\"\"\n        }), \")\\n})\\n\\napp.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/posts\\\"\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"req, res\"\n          }), \") =>\"]\n        }), \" {\\n    res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"render\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"pages/posts.html\\\"\"\n        }), \")\\n})\\n\\napp.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"listen\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3000\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"info\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`Application running http://localhost:3000`\"\n        }), \")\\n})\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저희는 템플릿 엔진으로 nunjucks를 사용합니다. 모든 템플릿, 레이아웃 및 부분 파일은 \\\"views\\\" 디렉토리에 저장됩니다. 따라서 프로젝트 구조는 다음과 같을 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"앱 구조\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"app.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \"\\nviews\\n  layouts\\n    main.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"\\n  partials\\n    sidenav.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"\\n  pages\\n    user.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"\\n    home.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"\\n    posts.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"템플릿 엔진을 사용하기 때문에 모든 뷰가 확장할 레이아웃을 추가합시다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"메인 레이아웃\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!--\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"File\"\n        }), \": views/layouts/main.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"-->\\n<!\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DOCTYPE\"\n        }), \" html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\"\\n        href=\\\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.0.2/tailwind.min.css\\\" />\\n    <title>HTMX App</title>\\n</head>\\n\\n<body class=\\\"bg-gray-200\\\">\\n    <div class=\\\"flex h-screen\\\">\\n        <!-- Side Navigation -->\\n        {- include('partials/sidenav.html')}\\n\\n        <!-- Main Content Area -->\\n        <div class=\\\"w-full bg-white p-4\\\" id=\\\"main\\\">\\n            { block content }{ endblock }\\n        </div>\\n</body>\\n\\n</html>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"sidenav 템플릿 컴포넌트를 partials로 리팩터링하여 레이아웃에 포함했습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Side Nav Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!--\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"File\"\n        }), \": views/partials/sidenav.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"-->\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"w-56 bg-gray-800 text-white p-4\\\"\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"href\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"block py-2 px-4 text-white hover:bg-gray-600\\\"\"\n            }), \">\"]\n          }), \"Home\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"href\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/users\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"block py-2 px-4 text-white hover:bg-gray-600\\\"\"\n            }), \">\"]\n          }), \"Users\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"href\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/posts\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"block py-2 px-4 text-white hover:bg-gray-600\\\"\"\n            }), \">\"]\n          }), \"Posts\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 우리는 메인 페이지인 home.html, users.html 및 posts.html을 만들었습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"페이지\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!--views/pages/home.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"-->\\n{ \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'layouts/main.html'\"\n        }), \" }\\n\\n{ block content }\\n<h1 \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"text-2xl font-bold mb-4\\\"\"\n        }), \">\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"HTMX\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Nav\"\n        }), \"</h1>\\n{ endblock }\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!--views/pages/users.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"-->\\n{ \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'layouts/main.html'\"\n        }), \" }\\n\\n{ block content }\\n<h1 \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"text-2xl font-bold mb-4\\\"\"\n        }), \">\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Users\"\n        }), \"</h1>\\n{ endblock }\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!-- views/pages/posts.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \" -->\\n{ \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'layouts/main.html'\"\n        }), \" }\\n\\n{ block content }\\n<h1 \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"text-2xl font-bold mb-4\\\"\"\n        }), \">\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Posts\"\n        }), \"</h1>\\n{ endblock }\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"서버를 실행하면 네비게이션이 있지만 전체 페이지가 다시 로드됩니다:\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"https://miro.medium.com/v2/resize:fit:1400/1*yPvQ3Jj47osdFfxsoMXqSg.gif\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HTMX라는 가벼운 JavaScript 라이브러리를 사용하여 이 문제를 해결해야 합니다. 이 라이브러리는 보다 더 순조롭고 상호작용적인 사용자 네비게이션 경험을 크게 향상시킬 수 있습니다. HTMX는 더 다양한 응용 프로그램에서 사용할 수 있지만, 현재 목적에 맞게 더 원활한 네비게이션을 달성하기 위해 그 능력을 활용하는 데 중점을 둘 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"HTMX를 사용하여 점진적으로 향상시키기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HTMX를 사용하는 가장 빠른 방법은 CDN을 통해 로드하는 것입니다. 다음 코드를 head 태그에 추가하면 간단히 시작할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!--\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"File\"\n        }), \": views/layouts/main.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"-->\\n...\\n<script src=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"https://unpkg.com/htmx.org@latest\\\"\"\n        }), \"></script>\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          }), \"HTMX App\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          })]\n        }), \"\\n</head>\\n...\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 사이드네비게이션 바에 작은 변경을 가할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"href 속성을 제거하고 hx-get 속성으로 대체합니다. 사용자가이 링크를 클릭하면 HTTP GET 요청이 발생합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"각 앵커에 hx-target 속성을 추가하거나 앵커 상위 div에 하나 추가하십시오. hx-target 속성을 사용하면 응답을 교체할 요소를 대상으로 지정할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"각 앵커에 hx-push-url=\\\"true\\\"를 추가하십시오. hx-push-url 속성을 사용하면 URL을 브라우저 위치 기록에 추가할 수 있습니다. 이를 통해 새로운 기록 항목이 생성되어 브라우저의 뒤로/앞으로 버튼을 사용한 탐색이 가능합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것이 무엇을 하는가: 우리는 \\\"main\\\" id의 div에서 응답을 삽입할 때 HTMX lib에 서버 호출을 만드는 방법을 선언적으로 지시하고 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"w-56 bg-gray-800 text-white p-4\\\"\"\n        }), \" hx-target=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"#main\\\"\"\n        }), \">\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"hx-get\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"hx-push-url\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"true\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"block py-2 px-4 text-white hover:bg-gray-600\\\"\"\n            }), \">\"]\n          }), \"Home\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \">\"]\n          })]\n        }), \"\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"hx-get\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/users\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"hx-push-url\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"true\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"block py-2 px-4 text-white hover:bg-gray-600\\\"\"\n            }), \">\"]\n          }), \"Users\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \">\"]\n          })]\n        }), \"\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"hx-get\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/posts\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"hx-push-url\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"true\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"block py-2 px-4 text-white hover:bg-gray-600\\\"\"\n            }), \">\"]\n          }), \"Posts\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \">\"]\n          })]\n        }), \"\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 다음과 같습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1400/1*LOvL_BdO8v6B-La18uqJug.gif\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"번쩍임 문제를 해결했고 새로운 URL로 올바르게 전환됩니다. 이제 다른 사람에게 내비게이션을 공유하고 싶다면 새로운 URL로 이동하게 됩니다.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"앱을 HTMX 알아보기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"각 서버 요청이 HTMX 호출인지 여부를 결정해야 합니다. 만약 HTMX 호출이라면 레이아웃을 사용하지 말고 해당 템플릿의 HTML을 그대로 반환하도록 템플릿 엔진에 지시해야 합니다. 이를 위해 특정 미들웨어를 포함해야 합니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 파일: app.js\"\n        }), \"\\n...\\napp.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"use\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"req, res, next\"\n          }), \") =>\"]\n        }), \" {\\n    res.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"locals\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"useLayout\"\n        }), \" = req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"headers\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"hx-request\\\"\"\n        }), \"] !== \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"true\\\"\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"next\"\n        }), \"();\\n})\\n\\napp.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"listen\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3000\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"info\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`애플리케이션이 http://localhost:3000에서 실행 중입니다.`\"\n        }), \")\\n})\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HTMX 요청이 감지되지 않는 경우에만 레이아웃을 사용합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!-- 파일: views/layouts/main.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \" -->\\n{ \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" useLayout }\\n<!\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DOCTYPE\"\n        }), \" html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\"\\n        href=\\\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.0.2/tailwind.min.css\\\" />\\n    <script src=\\\"https://unpkg.com/htmx.org@latest\\\"></script>\\n    <title>HTMX App</title>\\n</head>\\n<body class=\\\"bg-gray-200\\\">\\n    <div class=\\\"flex h-screen\\\">\\n        <!-- Side Navigation -->\\n        {- include('partials/sidenav.html')}\\n        <!-- Main Content Area -->\\n        <div class=\\\"w-full bg-white p-4\\\" id=\\\"main\\\">\\n{ endif }\\n\\n            { block content }{ endblock }\\n\\n{ if useLayout }\\n        </div>\\n</body>\\n</html>\\n{ endif }\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"URL을 공유할 수 있도록 원활하고 번쩍임 없는 내비게이션 경험을 성공적으로 달성했습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://miro.medium.com/v2/resize:fit:1400/1*hdhwN-9D2qdkYFyXwJ6XEg.gif\",\n        children: \"이미지\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"원본 블로그 게시물: \", _jsx(_components.a, {\n        href: \"https://nanosoft.co.za/blog/post/express-htmx\",\n        children: \"https://nanosoft.co.za/blog/post/express-htmx\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"소스 코드: \", _jsx(_components.a, {\n        href: \"https://github.com/nanosoftonline/express-htmx\",\n        children: \"https://github.com/nanosoftonline/express-htmx\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}