{"pageProps":{"post":{"title":"(LWC)에서 레코드 상세 페이지로 이동하는 방법","description":"","date":"2024-05-02 00:52","slug":"2024-05-02-NavigatingtoRecordDetailPagesinSalesforceLightningWebComponentsLWC","content":"\n\n![이미지](/assets/img/2024-05-02-NavigatingtoRecordDetailPagesinSalesforceLightningWebComponentsLWC_0.png)\n\nSalesforce Lightning Web Components (LWC)에서는 다른 페이지로 이동하는 것이 흔한 요구 사항입니다. 사용자가 링크를 클릭했을 때 레코드의 상세 페이지로 이동하는 시나리오가 있습니다. 이 게시물에서는 Salesforce가 제공하는 NavigationMixin을 사용하여 LWC에서 레코드 상세 페이지로 이어지는 클릭 가능한 링크를 만드는 과정을 안내해 드릴 것입니다.\n\nNavigationMixin 이해하기\n\nNavigationMixin은 Salesforce가 제공하는 클래스로, 레코드 상세 페이지, 새 레코드 생성 페이지 또는 외부 URL과 같은 다양한 페이지로 이동할 수 있게 해줍니다. Navigate 메서드를 제공하여 Lightning Experience에서 서로 다른 페이지로 이동할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n컴포넌트 설정하기\n\n우선, NavigationMixin을 사용하려면 컴포넌트의 JavaScript 컨트롤러에서 확장해야 합니다:\n\n```js\nimport { LightningElement, api, wire } from 'lwc';\nimport { NavigationMixin } from 'lightning/navigation';\n\nexport default class YourComponentName extends NavigationMixin(LightningElement) {\n    // 여기에 컴포넌트 코드를 작성하세요\n}\n```\n\n클릭 가능한 링크 만들기\n\n<div class=\"content-ad\"></div>\n\n자, 이제 한 테이블이 있다고 상상해봅시다. 각 행이 레코드를 나타내며 특정 필드를 클릭할 수 있도록 하고 싶습니다. 예를 들어, 클릭 가능한 이름 필드가 있는 테이블을 가정해 봅시다:\n\n```js\n| scope=\"row\">\n|     <div class=\"slds-truncate\" title={item.StepName}>\n|         <a data-id={item.Id} onclick={navigateToRecord}>{item.Name}</a>\n|     </div>\n| </td>\n```\n\n여기에서는 링크를 클릭할 때 navigateToRecord 함수를 호출하기 위해 onclick 이벤트 핸들러가 추가되었습니다. 또한, 우리가 탐색하려는 레코드의 ID를 저장하기 위한 data-id 속성도 추가되었습니다.\n\n레코드의 상세 페이지로 이동하기\n\n<div class=\"content-ad\"></div>\n\n그 다음으로 JavaScript 컨트롤러에서 navigateToRecord 함수를 정의할 거에요. 이 함수는 NavigationMixin.Navigate 메소드를 사용하여 레코드의 상세 페이지로 이동합니다:\n\n```js\nnavigateToRecord(event) {\n    const recordId = event.currentTarget.dataset.id;\n    \n    this[NavigationMixin.Navigate]({\n        type: 'standard__recordPage',\n        attributes: {\n            recordId: recordId,\n            actionName: 'view'\n        }\n    });\n}\n```\n\n이 함수에서는 클릭한 링크의 data-id 속성에서 레코드 ID를 검색하여 NavigationMixin.Navigate 메소드에 전달하여 레코드의 상세 페이지로 이동할 거에요.\n\n마무리\n\n<div class=\"content-ad\"></div>\n\n그게 다야! 이제 테이블에서 이름 링크를 클릭하면 해당 레코드의 상세 페이지로 이동합니다. 이 접근법을 따라 테이블의 어떤 필드든 클릭 가능하게 만들어 해당 레코드의 상세 페이지로 이동할 수 있습니다. 이를 통해 구성 요소의 사용성을 크게 향상시키고 더 원활한 사용자 경험을 제공할 수 있습니다. 항상 구성 요소를 충분히 테스트하여 기대한 대로 작동하는지 확인하는 것을 잊지 마세요.","ogImage":{"url":"/assets/img/2024-05-02-NavigatingtoRecordDetailPagesinSalesforceLightningWebComponentsLWC_0.png"},"coverImage":"/assets/img/2024-05-02-NavigatingtoRecordDetailPagesinSalesforceLightningWebComponentsLWC_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-02-NavigatingtoRecordDetailPagesinSalesforceLightningWebComponentsLWC_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Salesforce Lightning Web Components (LWC)에서는 다른 페이지로 이동하는 것이 흔한 요구 사항입니다. 사용자가 링크를 클릭했을 때 레코드의 상세 페이지로 이동하는 시나리오가 있습니다. 이 게시물에서는 Salesforce가 제공하는 NavigationMixin을 사용하여 LWC에서 레코드 상세 페이지로 이어지는 클릭 가능한 링크를 만드는 과정을 안내해 드릴 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NavigationMixin 이해하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NavigationMixin은 Salesforce가 제공하는 클래스로, 레코드 상세 페이지, 새 레코드 생성 페이지 또는 외부 URL과 같은 다양한 페이지로 이동할 수 있게 해줍니다. Navigate 메서드를 제공하여 Lightning Experience에서 서로 다른 페이지로 이동할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컴포넌트 설정하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우선, NavigationMixin을 사용하려면 컴포넌트의 JavaScript 컨트롤러에서 확장해야 합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LightningElement\"\n        }), \", api, wire } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'lwc'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NavigationMixin\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'lightning/navigation'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"YourComponentName\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_ inherited__\",\n          children: \"NavigationMixin\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LightningElement\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 여기에 컴포넌트 코드를 작성하세요\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클릭 가능한 링크 만들기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자, 이제 한 테이블이 있다고 상상해봅시다. 각 행이 레코드를 나타내며 특정 필드를 클릭할 수 있도록 하고 싶습니다. 예를 들어, 클릭 가능한 이름 필드가 있는 테이블을 가정해 봅시다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"| scope=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"row\\\"\"\n        }), \">\\n|     \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"slds-truncate\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"title\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{item.StepName}\"\n            }), \">\"]\n          }), \"\\n|         \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"data-id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{item.Id}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onclick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{navigateToRecord}\"\n            }), \">\"]\n          }), \"{item.Name}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"a\"\n            }), \">\"]\n          }), \"\\n|     \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n| </td>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기에서는 링크를 클릭할 때 navigateToRecord 함수를 호출하기 위해 onclick 이벤트 핸들러가 추가되었습니다. 또한, 우리가 탐색하려는 레코드의 ID를 저장하기 위한 data-id 속성도 추가되었습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"레코드의 상세 페이지로 이동하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그 다음으로 JavaScript 컨트롤러에서 navigateToRecord 함수를 정의할 거에요. 이 함수는 NavigationMixin.Navigate 메소드를 사용하여 레코드의 상세 페이지로 이동합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"navigateToRecord\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"event\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" recordId = event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"currentTarget\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"dataset\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \";\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NavigationMixin\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Navigate\"\n        }), \"]({\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'standard__recordPage'\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"attributes\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"recordId\"\n        }), \": recordId,\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"actionName\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'view'\"\n        }), \"\\n        }\\n    });\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 함수에서는 클릭한 링크의 data-id 속성에서 레코드 ID를 검색하여 NavigationMixin.Navigate 메소드에 전달하여 레코드의 상세 페이지로 이동할 거에요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마무리\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그게 다야! 이제 테이블에서 이름 링크를 클릭하면 해당 레코드의 상세 페이지로 이동합니다. 이 접근법을 따라 테이블의 어떤 필드든 클릭 가능하게 만들어 해당 레코드의 상세 페이지로 이동할 수 있습니다. 이를 통해 구성 요소의 사용성을 크게 향상시키고 더 원활한 사용자 경험을 제공할 수 있습니다. 항상 구성 요소를 충분히 테스트하여 기대한 대로 작동하는지 확인하는 것을 잊지 마세요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}