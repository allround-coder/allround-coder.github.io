{"pageProps":{"post":{"title":"Next.js에서 로컬 스토리지 사용하는 방법","description":"","date":"2024-05-01 18:10","slug":"2024-05-01-UsingLocalStoragewithNextjsABeginnersGuide","content":"\n\n<img src=\"/assets/img/2024-05-01-UsingLocalStoragewithNextjsABeginnersGuide_0.png\" />\n\n로컬 스토리지는 웹 응용 프로그램이 사용자의 브라우저 내에서 데이터를 로컬로 저장할 수 있는 웹 스토리지 유형입니다. 이 웹 API를 사용하면 개발자가 브라우저의 메모리에 키-값 쌍을 저장할 수 있습니다. 이는 브라우저 세션 및 페이지 새로 고침 간에 데이터를 지속적으로 유지하거나 저장하는 데 사용할 수 있는 간단하면서도 강력한 도구입니다. 이는 사용자 환경 설정을 저장하거나 오프라인 환경을 만들거나 나중에 사용할 데이터를 저장하는 데 유용할 수 있습니다.\n\n이 글에서는 로컬 스토리지의 사용 사례와 Next.js 웹 응용 프로그램에서 로컬 스토리지를 사용하는 방법을 살펴보겠습니다.\n\n## 어디에서 로컬 스토리지를 사용할 수 있을까요?\n\n<div class=\"content-ad\"></div>\n\n로컬 스토리지를 애플리케이션에서 사용할 수 있는 여러 시나리오가 있어요. \n\n- 사용자 설정 저장: 전자 상거래 애플리케이션에서는 사용자가 선호하는 통화를 로컬 스토리지에 저장하여 매번 웹 사이트를 방문할 때 해당 통화로 가격을 자동으로 표시할 수 있어요.\n- 임시 데이터 저장: 업무 관리 애플리케이션에서는 사용자가 '할 일' 목록에 추가한 작업을 아직 완료하지 않은 상태로 로컬 스토리지에 저장할 수 있어요. 그래서 브라우저를 닫거나 페이지를 이탈해도 진행 상황이 소멸되지 않아요.\n- 폼 데이터 저장: 구직 신청서에서는 사용자가 입력한 데이터를 나중에도 폼으로 돌아와서 진행 상황을 유지할 수 있도록 로컬 스토리지에 저장할 수 있어요.\n- 데이터 캐싱: 날씨 애플리케이션에서는 현재 날씨 상황을 로컬 스토리지에 저장하여 사용자가 오프라인일 때에도 접근할 수 있게 할 수 있어요.\n- 인증 정보 저장: 소셜 미디어 애플리케이션에서는 사용자의 인증 토큰을 로컬 스토리지에 저장하여 매번 애플리케이션을 열 때마다 로그인할 필요가 없게 할 수 있어요. (로컬 스토리지에 민감한 데이터를 암호화하지 않고 저장하는 것은 추천되지 않아요. 민감한 데이터 암호화를 다루는 방법을 알고 싶다면 이 기사를 참고해보세요.)\n\n## Local Storage 객체\n\n로컬 스토리지를 사용하기 위해서는 브라우저에서 제공하는 localStorage 객체를 사용할 수 있어요. 이 객체에는 로컬 스토리지와 상호작용하기 위한 여러 메소드가 있어요.\n\n<div class=\"content-ad\"></div>\n\n메서드\n\n다음은 localStorage에서 사용할 수 있는 메서드입니다:\n\n- setItem(key, value): 이 메서드는 키-값 쌍을 로컬 스토리지에 추가하는 데 사용됩니다. 키는 문자열이며 값은 문자열 또는 JavaScript 객체가 될 수 있습니다. 이 값은 저장되기 전에 자동으로 문자열로 변환됩니다.\n\n```js\nlocalStorage.setItem('username', 'Anisha');\nlocalStorage.setItem('userId', '12345');\n```\n\n<div class=\"content-ad\"></div>\n\n- getItem(key): 해당 메서드는 로컬 스토리지에서 키의 값을 검색하는 데 사용됩니다. 키를 매개변수로 받아 해당하는 값을 문자열로 반환합니다.\n\n```js\nlocalStorage.getItem('username');\nlocalStorage.getItem('userId');\n```\n\n- removeItem(key): 해당 메서드는 로컬 스토리지에서 키-값 쌍을 제거하는 데 사용됩니다. 키를 매개변수로 받아 해당하는 키-값 쌍을 로컬 스토리지에서 제거합니다.\n\n```js\nlocalStorage.removeItem('username');\nlocalStorage.removeItem('userId');\n```\n\n<div class=\"content-ad\"></div>\n\n- clear(): 이 메서드는 로컬 스토리지에서 모든 키-값 쌍을 제거하는 데 사용됩니다.\n\n```js\nlocalStorage.clear();\n```\n\n- key(index): 이 메서드는 로컬 스토리지에서 특정 인덱스에 있는 키-값 쌍의 키를 검색하는 데 사용됩니다. 인덱스를 매개변수로 받아 해당하는 키를 문자열 형식으로 반환합니다.\n\n```js\nconst key = localStorage.key(0); // 0번 인덱스의 키를 가져오기\n```\n\n<div class=\"content-ad\"></div>\n\n- length: 숫자 쌍의 개수를 반환하는 읽기 전용 속성입니다.\n\n```js\nconst numOfItemsInLocalStorage = localStorage.length()\n```\n\n## 로컬 저장소 구현 예시\n\n다음은 Next.js 애플리케이션에서 모든 localStorage 메서드를 사용하는 방법에 대한 완전한 예시입니다:\n\n<div class=\"content-ad\"></div>\n\n먼저, 우리는 localStorage에 저장할 각 항목에 대한 상태를 만들고 키와 로컬 저장소의 항목 수에 대한 상태를 생성합니다.\n\n```js\nconst [username, setUsername] = useState<string | null>(null);\nconst [userId, setUserId] = useState<string | null>(null);\nconst [userData, setUserData] = useState<{email: string, age: number} | null>(null);\nconst [keys, setKeys] = useState<string[]>([]);\nconst [length, setLength] = useState<number>(0);\n```\n\n이제 useEffect 훅을 사용하여 브라우저의 localStorage API의 사용 가능 여부를 확인하고, 컴포넌트가 처음으로 렌더링될 때 localStorage에 저장된 키-값 쌍의 값을 검색합니다.\n\n```js\nuseEffect(() => {\n  if (typeof window !== 'undefined' && window.localStorage) {\n    let username = localStorage.getItem('username');\n    let userId = localStorage.getItem('userId');\n    let userData = JSON.parse(localStorage.getItem('userData'));\n    let keys: string[] = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      keys.push(localStorage.key(i)!);\n    }\n    setUsername(username);\n    setUserId(userId);\n    setUserData(userData);\n    setKeys(keys);\n    setLength(localStorage.length);\n  }\n}, []);\n```\n\n<div class=\"content-ad\"></div>\n\n저희는 handleSave, handleRemove, handleClear 세 가지 이벤트 핸들러를 사용해서 데이터를 저장, 삭제, 지우는 함수를 구현했어요.\n\nhandleSave 함수 안에서는 setItem 메서드를 사용하여 로컬 스토리지에 키-값 쌍을 저장해요. 그런 다음 getItem 메서드를 사용하여 그 값을 불러와 setUsername, setUserId, setUserData, setKeys, setLength를 사용해서 상태를 갱신합니다.\n\n```js\nfunction handleSave() {\n  if (typeof window !== \"undefined\" && window.localStorage) {\n    localStorage.setItem(\"username\", \"Anisha\");\n    localStorage.setItem(\"userId\", \"12345\");\n    localStorage.setItem(\"userData\", JSON.stringify({ email: \"anisha@example.com\", age: 25 }));\n\n    let username = localStorage.getItem(\"username\");\n    let userId = localStorage.getItem(\"userId\");\n    let userData = JSON.parse(localStorage.getItem(\"userData\")!);\n    let keys: string[] = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      keys.push(localStorage.key(i)!);\n    }\n\n    setUsername(username);\n    setUserId(userId);\n    setUserData(userData);\n    setKeys(keys);\n    setLength(localStorage.length);\n  }\n}\n```\n\n<img src=\"/assets/img/2024-05-01-UsingLocalStoragewithNextjsABeginnersGuide_1.png\" />\n\n<div class=\"content-ad\"></div>\n\nhandleRemove 함수에서는 removeItem 메서드를 사용하여 로컬 저장소에서 `username` 키-값 쌍을 제거하고 setUsername을 사용하여 새 값으로 상태를 업데이트합니다.\n\n```js\nfunction handleRemove() {\n  if (typeof window !== 'undefined' && window.localStorage) {\n    localStorage.removeItem('username');\n    setUsername(null);\n  }\n}\n```\n\nhandleClear 함수에서는 clear 메서드를 사용하여 로컬 저장소에서 모든 키-값 쌍을 제거하고 setUsername, setUserId, setUserData, setKeys, setLength를 사용하여 새 값으로 상태를 업데이트합니다.\n\n```js\nfunction handleClear() {\n  if (typeof window !== 'undefined' && window.localStorage) {\n    localStorage.clear();\n    setUsername(null);\n    setUserId(null);\n    setUserData(null);\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n마지막으로 렌더 메서드에서는 localStorage에 저장된 키-값 쌍의 값을 표시하고 로컬 저장소와 상호 작용할 수 있는 버튼을 제공합니다.\n\n```js\n<div>\n  <button onClick={handleSave}>localStorage에 저장</button>\n  <button onClick={handleRemove}>localStorage에서 제거</button>\n  <button onClick={handleClear}>localStorage 지우기</button>\n  <p>사용자 이름: {username}</p>\n  <p>사용자 ID: {userId}</p>\n  <p>사용자 데이터: {JSON.stringify(userData)}</p>\n  <p>키 목록: {keys.join(\", \")}</p>\n  <p>로컬 저장소의 총 아이템 수: {length}</p>\n</div>\n```\n\n코드의 더 자세한 내용을 확인하고 싶다면, 내 GitHub 저장소를 자유롭게 확인해주세요.\n\n## 로컬 저장소 사용 시 보안 고려 사항\n\n<div class=\"content-ad\"></div>\n\n로컬 스토리지를 사용하는 한 가지 단점은 그 안에 저장된 데이터가 일반 텍스트 형식이라는 것입니다. 이는 악성 스크립트에 의해 쉽게 액세스될 수 있다는 것을 의미합니다. 이는 공격자가 사용자의 장치에 액세스를 얻으면 로컬 스토리지에 저장된 데이터에 잠재적으로 액세스할 수 있다는 것을 의미합니다.\n\n다음은 Next.js 애플리케이션에서 민감한 데이터를 암호화하는 방법을 찾는 데 도움이 되는 이 기사의 제2부입니다. Next.js 앱의 로컬 스토리지에 민감한 데이터를 안전하게 보호하기","ogImage":{"url":"/assets/img/2024-05-01-UsingLocalStoragewithNextjsABeginnersGuide_0.png"},"coverImage":"/assets/img/2024-05-01-UsingLocalStoragewithNextjsABeginnersGuide_0.png","tag":["Tech"],"readingTime":7},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-01-UsingLocalStoragewithNextjsABeginnersGuide_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"로컬 스토리지는 웹 응용 프로그램이 사용자의 브라우저 내에서 데이터를 로컬로 저장할 수 있는 웹 스토리지 유형입니다. 이 웹 API를 사용하면 개발자가 브라우저의 메모리에 키-값 쌍을 저장할 수 있습니다. 이는 브라우저 세션 및 페이지 새로 고침 간에 데이터를 지속적으로 유지하거나 저장하는 데 사용할 수 있는 간단하면서도 강력한 도구입니다. 이는 사용자 환경 설정을 저장하거나 오프라인 환경을 만들거나 나중에 사용할 데이터를 저장하는 데 유용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 글에서는 로컬 스토리지의 사용 사례와 Next.js 웹 응용 프로그램에서 로컬 스토리지를 사용하는 방법을 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"어디에서 로컬 스토리지를 사용할 수 있을까요?\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"로컬 스토리지를 애플리케이션에서 사용할 수 있는 여러 시나리오가 있어요.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"사용자 설정 저장: 전자 상거래 애플리케이션에서는 사용자가 선호하는 통화를 로컬 스토리지에 저장하여 매번 웹 사이트를 방문할 때 해당 통화로 가격을 자동으로 표시할 수 있어요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"임시 데이터 저장: 업무 관리 애플리케이션에서는 사용자가 '할 일' 목록에 추가한 작업을 아직 완료하지 않은 상태로 로컬 스토리지에 저장할 수 있어요. 그래서 브라우저를 닫거나 페이지를 이탈해도 진행 상황이 소멸되지 않아요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"폼 데이터 저장: 구직 신청서에서는 사용자가 입력한 데이터를 나중에도 폼으로 돌아와서 진행 상황을 유지할 수 있도록 로컬 스토리지에 저장할 수 있어요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"데이터 캐싱: 날씨 애플리케이션에서는 현재 날씨 상황을 로컬 스토리지에 저장하여 사용자가 오프라인일 때에도 접근할 수 있게 할 수 있어요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"인증 정보 저장: 소셜 미디어 애플리케이션에서는 사용자의 인증 토큰을 로컬 스토리지에 저장하여 매번 애플리케이션을 열 때마다 로그인할 필요가 없게 할 수 있어요. (로컬 스토리지에 민감한 데이터를 암호화하지 않고 저장하는 것은 추천되지 않아요. 민감한 데이터 암호화를 다루는 방법을 알고 싶다면 이 기사를 참고해보세요.)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Local Storage 객체\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"로컬 스토리지를 사용하기 위해서는 브라우저에서 제공하는 localStorage 객체를 사용할 수 있어요. 이 객체에는 로컬 스토리지와 상호작용하기 위한 여러 메소드가 있어요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"메서드\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 localStorage에서 사용할 수 있는 메서드입니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"setItem(key, value): 이 메서드는 키-값 쌍을 로컬 스토리지에 추가하는 데 사용됩니다. 키는 문자열이며 값은 문자열 또는 JavaScript 객체가 될 수 있습니다. 이 값은 저장되기 전에 자동으로 문자열로 변환됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'username'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Anisha'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'userId'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'12345'\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"getItem(key): 해당 메서드는 로컬 스토리지에서 키의 값을 검색하는 데 사용됩니다. 키를 매개변수로 받아 해당하는 값을 문자열로 반환합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'username'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'userId'\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"removeItem(key): 해당 메서드는 로컬 스토리지에서 키-값 쌍을 제거하는 데 사용됩니다. 키를 매개변수로 받아 해당하는 키-값 쌍을 로컬 스토리지에서 제거합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"removeItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'username'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"removeItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'userId'\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"clear(): 이 메서드는 로컬 스토리지에서 모든 키-값 쌍을 제거하는 데 사용됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"clear\"\n        }), \"();\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"key(index): 이 메서드는 로컬 스토리지에서 특정 인덱스에 있는 키-값 쌍의 키를 검색하는 데 사용됩니다. 인덱스를 매개변수로 받아 해당하는 키를 문자열 형식으로 반환합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" key = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"key\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 0번 인덱스의 키를 가져오기\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"length: 숫자 쌍의 개수를 반환하는 읽기 전용 속성입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" numOfItemsInLocalStorage = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"length\"\n        }), \"()\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"로컬 저장소 구현 예시\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 Next.js 애플리케이션에서 모든 localStorage 메서드를 사용하는 방법에 대한 완전한 예시입니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저, 우리는 localStorage에 저장할 각 항목에 대한 상태를 만들고 키와 로컬 저장소의 항목 수에 대한 상태를 생성합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [username, setUsername] = useState<string | \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \">(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [userId, setUserId] = useState<string | \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \">(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [userData, setUserData] = useState<{\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": string, \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"age\"\n        }), \": number} | \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \">(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [keys, setKeys] = useState<string[]>([]);\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [length, setLength] = useState<number>(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 useEffect 훅을 사용하여 브라우저의 localStorage API의 사용 가능 여부를 확인하고, 컴포넌트가 처음으로 렌더링될 때 localStorage에 저장된 키-값 쌍의 값을 검색합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \" !== \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'undefined'\"\n        }), \" && \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"localStorage\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" username = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'username'\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" userId = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'userId'\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" userData = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JSON\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"parse\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'userData'\"\n        }), \"));\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"keys\"\n        }), \": string[] = [];\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" i = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"; i < \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \"; i++) {\\n      keys.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"key\"\n        }), \"(i)!);\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setUsername\"\n        }), \"(username);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setUserId\"\n        }), \"(userId);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setUserData\"\n        }), \"(userData);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setKeys\"\n        }), \"(keys);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setLength\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \");\\n  }\\n}, []);\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저희는 handleSave, handleRemove, handleClear 세 가지 이벤트 핸들러를 사용해서 데이터를 저장, 삭제, 지우는 함수를 구현했어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"handleSave 함수 안에서는 setItem 메서드를 사용하여 로컬 스토리지에 키-값 쌍을 저장해요. 그런 다음 getItem 메서드를 사용하여 그 값을 불러와 setUsername, setUserId, setUserData, setKeys, setLength를 사용해서 상태를 갱신합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleSave\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \" !== \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"undefined\\\"\"\n        }), \" && \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"localStorage\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"username\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Anisha\\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"userId\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"12345\\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"userData\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JSON\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"stringify\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"anisha@example.com\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"age\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"25\"\n        }), \" }));\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" username = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"username\\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" userId = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"userId\\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" userData = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JSON\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"parse\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"userData\\\"\"\n        }), \")!);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"keys\"\n        }), \": string[] = [];\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" i = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"; i < \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \"; i++) {\\n      keys.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"key\"\n        }), \"(i)!);\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setUsername\"\n        }), \"(username);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setUserId\"\n        }), \"(userId);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setUserData\"\n        }), \"(userData);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setKeys\"\n        }), \"(keys);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setLength\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \");\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-01-UsingLocalStoragewithNextjsABeginnersGuide_1.png\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"handleRemove 함수에서는 removeItem 메서드를 사용하여 로컬 저장소에서 \", _jsx(_components.code, {\n        children: \"username\"\n      }), \" 키-값 쌍을 제거하고 setUsername을 사용하여 새 값으로 상태를 업데이트합니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleRemove\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \" !== \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'undefined'\"\n        }), \" && \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"localStorage\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"removeItem\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'username'\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setUsername\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"handleClear 함수에서는 clear 메서드를 사용하여 로컬 저장소에서 모든 키-값 쌍을 제거하고 setUsername, setUserId, setUserData, setKeys, setLength를 사용하여 새 값으로 상태를 업데이트합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleClear\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \" !== \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'undefined'\"\n        }), \" && \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"localStorage\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"localStorage\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"clear\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setUsername\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setUserId\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setUserData\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마지막으로 렌더 메서드에서는 localStorage에 저장된 키-값 쌍의 값을 표시하고 로컬 저장소와 상호 작용할 수 있는 버튼을 제공합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div>\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleSave}\"\n            }), \">\"]\n          }), \"localStorage에 저장\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleRemove}\"\n            }), \">\"]\n          }), \"localStorage에서 제거\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleClear}\"\n            }), \">\"]\n          }), \"localStorage 지우기\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"사용자 이름: {username}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"사용자 ID: {userId}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"사용자 데이터: {JSON.stringify(userData)}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"키 목록: {keys.join(\\\", \\\")}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"로컬 저장소의 총 아이템 수: {length}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드의 더 자세한 내용을 확인하고 싶다면, 내 GitHub 저장소를 자유롭게 확인해주세요.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"로컬 저장소 사용 시 보안 고려 사항\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"로컬 스토리지를 사용하는 한 가지 단점은 그 안에 저장된 데이터가 일반 텍스트 형식이라는 것입니다. 이는 악성 스크립트에 의해 쉽게 액세스될 수 있다는 것을 의미합니다. 이는 공격자가 사용자의 장치에 액세스를 얻으면 로컬 스토리지에 저장된 데이터에 잠재적으로 액세스할 수 있다는 것을 의미합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 Next.js 애플리케이션에서 민감한 데이터를 암호화하는 방법을 찾는 데 도움이 되는 이 기사의 제2부입니다. Next.js 앱의 로컬 스토리지에 민감한 데이터를 안전하게 보호하기\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}