{"pageProps":{"post":{"title":"Angular에서 폼 유효성을 갖춘 인풋 요소 만들기","description":"","date":"2024-05-02 00:18","slug":"2024-05-02-BuildingaCustomInputComponentwithFormValidationinAngular","content":"\n\n<img src=\"/assets/img/2024-05-02-BuildingaCustomInputComponentwithFormValidationinAngular_0.png\" />\n\n현대 웹 개발에서 재사용 가능하고 유효성이 검증된 폼 컴포넌트를 만드는 것은 매우 중요합니다. Angular를 탐험하는 이 과정에서 여러 입력 유형을 처리하고 Angular 애플리케이션 내에서 신속하게 폼 유효성을 검증하는 다목적 Custom Input Component를 만들었습니다.\n\n# 1. Angular 프로젝트 설정하기:\n\n새로운 Angular 프로젝트 생성하기:\n\n<div class=\"content-ad\"></div>\n\n```js\nng new custom-input-project\n```\n\n커스텀 입력 컴포넌트 생성:\n\n```js\nng generate component custom-input\n```\n\n## 디렉토리 구조:\n\n<div class=\"content-ad\"></div>\n\n```js\n사용자 정의 입력 프로젝트/\n├── src/\n│ ├── app/\n│ │ ├── custom-input/\n│ │ │ ├── custom-input.component.html\n│ │ │ ├── custom-input.component.css\n│ │ │ ├── custom-input.component.spec.ts\n│ │ │ └── custom-input.component.ts\n│ │ ├── app.component.html\n│ │ ├── app.component.css\n│ │ ├── app.component.spec.ts\n│ │ └── app.component.ts\n│ │ ├── app.module.ts\n│ │ └── …\n│ └── …\n└── …\n```\n\n# 2. 커스텀 입력 컴포넌트 생성하기:\n\nCustomInputComponent는 입력 필드를 캡슐화하고 다양한 입력 유형을 처리하며 Angular의 FormControl 및 Validators를 사용하여 기본 양식 유효성을 구현할 것입니다.\n\n## 컴포넌트 구조(custom-input.component.ts):\n\n<div class=\"content-ad\"></div>\n\nThe CustomInputComponent TypeScript file (custom-input.component.ts):\n\n```js\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-custom-input',\n  templateUrl: './custom-input.component.html',\n  styleUrls: ['./custom-input.component.css']\n})\nexport class CustomInputComponent {\n  @Input() label: string = '';\n  @Input() type: string = 'text';\n  @Output() valueChange = new EventEmitter<string>();\n\n  control: FormControl = new FormControl('', Validators.required);\n\n  get value(): string {\n    return this.control.value;\n  }\n\n  set value(val: string) {\n    this.control.setValue(val);\n    this.valueChange.emit(val);\n  }\n}\n```\n\nComponent Template (custom-input.component.html):\n\nThe CustomInputComponent HTML template (custom-input.component.html):\n\n<div class=\"content-ad\"></div>\n\n```js\n<div class=\"form-group\">\n  <label>{ label }</label>\n  <input\n    [type]=\"type\"\n    class=\"form-control\"\n    [formControl]=\"control\"\n    [attr.placeholder]=\"label\"\n  />\n  <div *ngIf=\"control.invalid && control.touched\" class=\"text-danger\">\n    This field is required.\n  </div>\n</div>\n```\n\n## 설명:\n\n- CustomInputComponent TypeScript 파일은 컴포넌트의 논리를 정의합니다.\n- @Input을 사용하여 label 및 type 속성을 받아들이고, @Output을 사용하여 값 변경을 발생시킵니다.\n- FormControl은 기본 유효성 검사를 포함한 폼 처리에 활용됩니다 (이 경우, 필수 필드).\n- 템플릿은 입력 필드를 렌더링하고 필수 필드에 대한 유효성 검사 메시지를 표시합니다.\n- 컴포넌트 스타일은 UI 조정에 필요한 대로 사용자 정의할 수 있습니다.\n\n# 3. 폼에서 사용자 정의 입력 구현하기:```\n\n<div class=\"content-ad\"></div>\n\n사용자 지정 입력 구성 요소를 반응형 양식 내에서 통합하는 것은 Angular 양식 환경 내에서의 기능을 보여줍니다.\n\n컴포넌트의 상위 (app.component.ts):\n\n```js\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  form: FormGroup;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      name: ['', Validators.required],\n    });\n  }\n}\n```\n\n상위 컴포넌트의 템플릿 (app.component.html):\n\n<div class=\"content-ad\"></div>\n\n```js\n<form [formGroup]=\"form\">\n  <app-custom-input\n    label=\"이름 입력\"\n    [type]=\"'text'\"\n    formControlName=\"name\"\n  ></app-custom-input>\n</form>\n```\n\n## 설명:\n\n- AppComponent는 FormBuilder를 사용하여 form group 및 input 필드에 대한 form control을 생성합니다.\n- 상위 컴포넌트 템플릿(app.component.html)에서 CustomInputComponent가 form 내부에서 사용되고 formControlName을 사용하여 form control에 바인딩됩니다.\n- label 및 input type은 CustomInputComponent의 @Input 속성으로 지정됩니다.\n- CustomInputComponent 내의 input 필드는 이제 Angular 반응형 폼 내에서 작동하며 유효성 검증을 위해 form control 속성을 활용합니다.\n\n# 4. Custom Input Component 테스트하기:\n\n<div class=\"content-ad\"></div>\n\n사용자 지정 입력 구성 요소의 유효성 및 기능을 서로 다른 입력 유형 및 유효성 검사 시나리오에 걸쳐 검증하고 테스트하는 것이 중요합니다.\n\n구성 요소 테스트 (custom-input.component.spec.ts):\n\n```js\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule, FormGroup, FormBuilder } from '@angular/forms';\nimport { CustomInputComponent } from './custom-input.component';\n\ndescribe('CustomInputComponent', () => {\n  let component: CustomInputComponent;\n  let fixture: ComponentFixture<CustomInputComponent>;\n  let formBuilder: FormBuilder;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [CustomInputComponent],\n      imports: [ReactiveFormsModule],\n    }).compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CustomInputComponent);\n    component = fixture.componentInstance;\n    formBuilder = TestBed.inject(FormBuilder);\n    fixture.detectChanges();\n  });\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should display the input field', () => {\n    const compiled = fixture.nativeElement;\n    expect(compiled.querySelector('input')).toBeTruthy();\n  });\n\n  it('should validate required field', () => {\n    const control = formBuilder.control('', { required: true });\n    const form = formBuilder.group({ testInput: control });\n\n    component.control = control;\n    fixture.detectChanges();\n\n    expect(form.valid).toBeFalsy();\n\n    const input = fixture.nativeElement.querySelector('input');\n    input.value = 'Test Value';\n    input.dispatchEvent(new Event('input'));\n\n    fixture.detectChanges();\n    expect(form.valid).toBeTruthy();\n  });\n\n  it('should render the label', () => {\n    component.label = 'Test Label';\n    fixture.detectChanges();\n\n    const compiled = fixture.nativeElement;\n    expect(compiled.querySelector('label').textContent).toContain('Test Label');\n  });\n\n  // 다양한 입력 유형, 유효성 검사 및 동작에 대한 더 구체적인 테스트 추가\n});\n```\n\n## 설명:\n\n<div class=\"content-ad\"></div>\n\n- CustomInputComponent의 테스트 스위트에는 입력 컴포넌트의 다양한 측면을 검증하는 여러 테스트가 포함되어 있습니다.\n- 첫 번째 테스트는 CustomInputComponent의 성공적인 생성을 확인합니다.\n- 두 번째 테스트는 입력 필드가 컴포넌트 내에 표시되는지 확인합니다.\n- 세 번째 테스트는 필수 필드 기능을 확인합니다. 폼 컨트롤을 생성하고 컴포넌트에 할당하며 사용자 입력을 시뮬레이트하여 필드의 유효성을 확인합니다.\n- 네 번째 테스트는 컴포넌트 내에 레이블이 렌더링되는지 확인합니다.\n\n# 결론:\n\nAngular의 기능을 통해 유연성과 신뢰성에 뛰어난 Custom Input Component를 구축했습니다. 시작부터 철저한 테스트까지, Angular 애플리케이션 내에서 폼 상호 작용을 증진시키는 재사용 가능한 컴포넌트를 만드는 과정을 탐험했습니다. 이 여정은 다양하고 검증된 입력 필드를 통해 사용자 중심 경험을 만드는 길을 열어줍니다.","ogImage":{"url":"/assets/img/2024-05-02-BuildingaCustomInputComponentwithFormValidationinAngular_0.png"},"coverImage":"/assets/img/2024-05-02-BuildingaCustomInputComponentwithFormValidationinAngular_0.png","tag":["Tech"],"readingTime":7},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-02-BuildingaCustomInputComponentwithFormValidationinAngular_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현대 웹 개발에서 재사용 가능하고 유효성이 검증된 폼 컴포넌트를 만드는 것은 매우 중요합니다. Angular를 탐험하는 이 과정에서 여러 입력 유형을 처리하고 Angular 애플리케이션 내에서 신속하게 폼 유효성을 검증하는 다목적 Custom Input Component를 만들었습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"1. Angular 프로젝트 설정하기:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새로운 Angular 프로젝트 생성하기:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"ng \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" custom-input-project\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"커스텀 입력 컴포넌트 생성:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"ng generate component custom-input\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"디렉토리 구조:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"사용자 정의 입력 프로젝트/\\n├── src/\\n│ ├── app/\\n│ │ ├── custom-input/\\n│ │ │ ├── custom-input.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"component\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"\\n│ │ │ ├── custom-input.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"component\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"css\"\n        }), \"\\n│ │ │ ├── custom-input.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"component\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"spec\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"ts\"\n        }), \"\\n│ │ │ └── custom-input.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"component\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"ts\"\n        }), \"\\n│ │ ├── app.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"component\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"html\"\n        }), \"\\n│ │ ├── app.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"component\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"css\"\n        }), \"\\n│ │ ├── app.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"component\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"spec\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"ts\"\n        }), \"\\n│ │ └── app.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"component\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"ts\"\n        }), \"\\n│ │ ├── app.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"ts\"\n        }), \"\\n│ │ └── …\\n│ └── …\\n└── …\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"2. 커스텀 입력 컴포넌트 생성하기:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"CustomInputComponent는 입력 필드를 캡슐화하고 다양한 입력 유형을 처리하며 Angular의 FormControl 및 Validators를 사용하여 기본 양식 유효성을 구현할 것입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"컴포넌트 구조(custom-input.component.ts):\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The CustomInputComponent TypeScript file (custom-input.component.ts):\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Input\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Output\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EventEmitter\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/core'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormControl\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/forms'\"\n        }), \";\\n\\n@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'app-custom-input'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"templateUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./custom-input.component.html'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"styleUrls\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./custom-input.component.css'\"\n        }), \"]\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomInputComponent\"\n        }), \" {\\n  @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Input\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"label\"\n        }), \": string = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \";\\n  @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Input\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": string = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'text'\"\n        }), \";\\n  @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Output\"\n        }), \"() valueChange = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EventEmitter\"\n        }), \"<string>();\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"control\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormControl\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormControl\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"required\"\n        }), \");\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"get\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"value\"\n        }), \"(): string {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"control\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \";\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"set\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"value\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"val: string\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"control\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setValue\"\n        }), \"(val);\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"valueChange\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"emit\"\n        }), \"(val);\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Component Template (custom-input.component.html):\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The CustomInputComponent HTML template (custom-input.component.html):\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"form-group\\\"\"\n        }), \">\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"label\"\n            }), \">\"]\n          }), \"{ label }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"label\"\n            }), \">\"]\n          })]\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \"\\n    [\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"]=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"type\\\"\"\n            }), \"\\n    \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"form-control\\\"\"\n            }), \"\\n    [\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"formControl\"\n            }), \"]=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"control\\\"\"\n            }), \"\\n    [\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"attr.placeholder\"\n            }), \"]=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"label\\\"\"\n            }), \"\\n  />\"]\n          })\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" *\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ngIf\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"control.invalid && control.touched\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text-danger\\\"\"\n            }), \">\"]\n          }), \"\\n    This field is required.\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"설명:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"CustomInputComponent TypeScript 파일은 컴포넌트의 논리를 정의합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"@Input을 사용하여 label 및 type 속성을 받아들이고, @Output을 사용하여 값 변경을 발생시킵니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"FormControl은 기본 유효성 검사를 포함한 폼 처리에 활용됩니다 (이 경우, 필수 필드).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"템플릿은 입력 필드를 렌더링하고 필수 필드에 대한 유효성 검사 메시지를 표시합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"컴포넌트 스타일은 UI 조정에 필요한 대로 사용자 정의할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"3. 폼에서 사용자 정의 입력 구현하기:```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자 지정 입력 구성 요소를 반응형 양식 내에서 통합하는 것은 Angular 양식 환경 내에서의 기능을 보여줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컴포넌트의 상위 (app.component.ts):\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OnInit\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/core'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormBuilder\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormGroup\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/forms'\"\n        }), \";\\n\\n@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'app-root'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"templateUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./app.component.html'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"styleUrls\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./app.component.css'\"\n        }), \"],\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AppComponent\"\n        }), \" implements \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OnInit\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"form\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormGroup\"\n        }), \";\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"private fb: FormBuilder\"\n        }), \") {}\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ngOnInit\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"form\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"fb\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"group\"\n        }), \"({\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Validators\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"required\"\n        }), \"],\\n    });\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"상위 컴포넌트의 템플릿 (app.component.html):\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<form [formGroup]=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"form\\\"\"\n        }), \">\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"app-custom-input\"\n            }), \"\\n    \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"label\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"이름 입력\\\"\"\n            }), \"\\n    [\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"]=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"'text'\\\"\"\n            }), \"\\n    \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"formControlName\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"name\\\"\"\n            }), \"\\n  >\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"app-custom-input\"\n            }), \">\"]\n          })]\n        }), \"\\n</form>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"설명:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"AppComponent는 FormBuilder를 사용하여 form group 및 input 필드에 대한 form control을 생성합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"상위 컴포넌트 템플릿(app.component.html)에서 CustomInputComponent가 form 내부에서 사용되고 formControlName을 사용하여 form control에 바인딩됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"label 및 input type은 CustomInputComponent의 @Input 속성으로 지정됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"CustomInputComponent 내의 input 필드는 이제 Angular 반응형 폼 내에서 작동하며 유효성 검증을 위해 form control 속성을 활용합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"4. Custom Input Component 테스트하기:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자 지정 입력 구성 요소의 유효성 및 기능을 서로 다른 입력 유형 및 유효성 검사 시나리오에 걸쳐 검증하고 테스트하는 것이 중요합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구성 요소 테스트 (custom-input.component.spec.ts):\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ComponentFixture\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TestBed\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/core/testing'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactiveFormsModule\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormGroup\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormBuilder\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/forms'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomInputComponent\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./custom-input.component'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"describe\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'CustomInputComponent'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"component\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomInputComponent\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"fixture\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ComponentFixture\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomInputComponent\"\n        }), \">;\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"formBuilder\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormBuilder\"\n        }), \";\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"beforeEach\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" () => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TestBed\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"configureTestingModule\"\n        }), \"({\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"declarations\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomInputComponent\"\n        }), \"],\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"imports\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactiveFormsModule\"\n        }), \"],\\n    }).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"compileComponents\"\n        }), \"();\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"beforeEach\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    fixture = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TestBed\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createComponent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomInputComponent\"\n        }), \");\\n    component = fixture.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"componentInstance\"\n        }), \";\\n    formBuilder = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TestBed\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"inject\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormBuilder\"\n        }), \");\\n    fixture.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"detectChanges\"\n        }), \"();\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"it\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'should create the component'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(component).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toBeTruthy\"\n        }), \"();\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"it\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'should display the input field'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" compiled = fixture.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nativeElement\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(compiled.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"querySelector\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'input'\"\n        }), \")).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toBeTruthy\"\n        }), \"();\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"it\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'should validate required field'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" control = formBuilder.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"control\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"''\"\n        }), \", { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"required\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" });\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" form = formBuilder.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"group\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"testInput\"\n        }), \": control });\\n\\n    component.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"control\"\n        }), \" = control;\\n    fixture.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"detectChanges\"\n        }), \"();\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(form.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"valid\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toBeFalsy\"\n        }), \"();\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" input = fixture.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nativeElement\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"querySelector\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'input'\"\n        }), \");\\n    input.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Test Value'\"\n        }), \";\\n    input.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dispatchEvent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Event\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'input'\"\n        }), \"));\\n\\n    fixture.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"detectChanges\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(form.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"valid\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toBeTruthy\"\n        }), \"();\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"it\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'should render the label'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    component.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"label\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Test Label'\"\n        }), \";\\n    fixture.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"detectChanges\"\n        }), \"();\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" compiled = fixture.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nativeElement\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(compiled.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"querySelector\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'label'\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"textContent\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toContain\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Test Label'\"\n        }), \");\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 다양한 입력 유형, 유효성 검사 및 동작에 대한 더 구체적인 테스트 추가\"\n        }), \"\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"설명:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"CustomInputComponent의 테스트 스위트에는 입력 컴포넌트의 다양한 측면을 검증하는 여러 테스트가 포함되어 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"첫 번째 테스트는 CustomInputComponent의 성공적인 생성을 확인합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"두 번째 테스트는 입력 필드가 컴포넌트 내에 표시되는지 확인합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"세 번째 테스트는 필수 필드 기능을 확인합니다. 폼 컨트롤을 생성하고 컴포넌트에 할당하며 사용자 입력을 시뮬레이트하여 필드의 유효성을 확인합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"네 번째 테스트는 컴포넌트 내에 레이블이 렌더링되는지 확인합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Angular의 기능을 통해 유연성과 신뢰성에 뛰어난 Custom Input Component를 구축했습니다. 시작부터 철저한 테스트까지, Angular 애플리케이션 내에서 폼 상호 작용을 증진시키는 재사용 가능한 컴포넌트를 만드는 과정을 탐험했습니다. 이 여정은 다양하고 검증된 입력 필드를 통해 사용자 중심 경험을 만드는 길을 열어줍니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}