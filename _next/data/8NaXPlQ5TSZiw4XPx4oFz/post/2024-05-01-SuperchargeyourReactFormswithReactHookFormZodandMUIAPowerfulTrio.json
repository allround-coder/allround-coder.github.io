{"pageProps":{"post":{"title":"React Hook Form과 Zod, MUI로 React Form 만들기","description":"","date":"2024-05-01 17:57","slug":"2024-05-01-SuperchargeyourReactFormswithReactHookFormZodandMUIAPowerfulTrio","content":"\n\nReact Hook Form과 Zod 스키마를 사용하여 효율적으로 유효성을 검사하는 방법을 배우세요. MUI 컨트롤과 함께 사용하여 양식 유효성 검사 능력을 한 단계 업그레이드하세요. 이 포괄적인 가이드를 통해 React 애플리케이션에서 견고함과 정확성을 보장하세요. 통합 프로세스를 몰두하고 개발 워크플로우를 간소화하세요!\n\n효율적이고 사용자 친화적인 양식을 작성하는 것은 React 애플리케이션에서 중요합니다. 그러나 유효성 검사, 상태 및 스타일 관리는 지루하고 복잡해질 수 있습니다. 이것이 React Hook Form, Zod 및 MUI의 조합이 빛을 발하는 곳입니다!\n\n![](/assets/img/2024-05-01-SuperchargeyourReactFormswithReactHookFormZodandMUIAPowerfulTrio_0.png)\n\nReact Hook Form:\n\n<div class=\"content-ad\"></div>\n\n- 선언적 접근 방식: 등록, 유효성 검사 및 제출에 대한 후크를 사용하여 양식 관리를 간소화합니다.\n- 내장 유효성 검사: 외부 라이브러리가 필요하지 않습니다. 양식 내에서 직접 유효성 검사 규칙을 정의하세요.\n- 비제어 컴포넌트: 네이티브 HTML 입력 또는 제어 컴포넌트를 활용하여 유연성을 높이세요.\n\nZod:\n\n- 유형 안전한 유효성 검사: 강력한 스키마 유효성 검사 라이브러리로 데이터 품질을 보장하세요.\n- 명확한 오류 메시지: Zod 스키마를 사용하면 사용자가 어떤 오류가 발생했는지 이해할 수 있도록 명확한 오류 메시지를 작성할 수 있습니다. 더 나아가 중첩된 유효성 검사를 사용하여 고급 유효성 검사 규칙을 작성할 수 있어 복잡한 데이터 구조를 처리하기가 더 쉬워집니다.\n- React Hook Form과의 통합: zodResolver와의 원활한 통합으로 양식에서 간편한 유효성 검사를 수행하세요.\n\nMUI:\n\n<div class=\"content-ad\"></div>\n\n- 아름다운 UI 구성 요소: 미리 만들어진 MUI 컴포넌트를 사용하여 시각적으로 매력적이고 접근성 있는 양식을 만들어보세요.\n- 사용자 정의: 브랜드 아이덴티티에 맞춰 테마를 사용자 정의하여 앱 UI의 모양과 느낌을 조정하세요.\n- 쉬운 통합: Material-UI 컴포넌트는 React Hook Form과 원활하게 통합되어 스타일 충돌 가능성을 줄입니다.\n\n이 3가지를 사용하는 장점:\n\n- 향상된 개발자 경험: 보일러플레이트를 줄이고 더 깔끔하고 유지보수하기 쉬운 코드를 작성하세요.\n- 향상된 사용자 경험: 자동 유효성 검사, 명확한 오류 메시지, 부드러운 작업 흐름을 활용하세요.\n- 오류 감소: 타입 안전한 유효성 검사로 데이터 문제를 일찍 발견하고 예방하세요.\n- 빠른 개발: 기능 구축에 집중하고 양식과의 싸움을 줄이세요.\n\n예제를 만들어봅시다!\n\n<div class=\"content-ad\"></div>\n\n```js\n// 폼 유효성 검사를 위한 Zod 스키마 정의\n// Yup 유효성 검사를 대신 사용할 수도 있습니다.\nconst schema = z.object({\n  email: z.string().email(\"유효하지 않은 이메일입니다.\").min(1, \"이메일은 필수입니다.\"),\n  password: z.string().min(6, \"비밀번호는 최소 6자 이상이어야 합니다.\"),\n  phoneNumber: z\n    .string()\n    .min(10, \"전화번호는 최소 10자 이상이어야 합니다.\")\n    .max(10)\n    .optional(),\n  country: z.string().min(1, \"국가는 필수입니다.\"),\n});\n```\n\n여기서 복잡한 객체를 Zod를 사용하여 유효성 검사하는 방법입니다.\n\n```js\nconst addressSchema = z.object({\n  street: z.string().min(1, \"거리를 입력해주세요.\"),\n  city: z.string().min(1, \"도시를 입력해주세요.\"),\n  zipCode: z\n    .string()\n    .min(5, \"우편번호는 최소 5자 이상이어야 합니다.\")\n    .refine(value => /^\\d+$/.test(value), {\n      message: \"우편번호는 숫자로만 이루어져야 합니다.\"\n    }),\n});\n\nconst userSchema = z.object({\n  email: z.string().email(\"유효하지 않은 이메일입니다.\").min(1, \"이메일은 필수입니다.\"),\n  password: z.string().min(6, \"비밀번호는 최소 6자 이상이어야 합니다.\"),\n  phoneNumber: z\n    .string()\n    .min(10, \"전화번호는 최소 10자 이상이어야 합니다.\")\n    .max(10)\n    .optional(),\n  country: z.string().min(1, \"국가는 필수입니다.\"),\n  address: addressSchema,\n});\n```\n\n폼 데이터의 유형을 정의하고 useForm 훅을 사용하여 입력 상태를 관리하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n// 폼 데이터 유형 정의\ntype FormData = z.infer<typeof schema>;\n// react-hook-form에서 useForm을 구조분해하여 가져옵니다\nconst {\n  // register: 입력 요소 등록 함수\n  register,\n  // handleSubmit: 폼 제출 처리 함수\n  handleSubmit,\n  // watch: 폼 입력 값 감시 함수\n  watch,\n  // formState: 폼 상태 정보를 포함한 객체\n  formState: { errors, touchedFields }, // formState에서 errors 및 touchedFields를 구조분해합니다\n} = useForm<FormData>({ // generic 타입 FormData로 useForm 훅 호출\n  // resolver: Zod를 사용하여 폼 유효성 검사에 대한 리졸버 지정\n  resolver: zodResolver(schema), // Zod 스키마를 리졸버에 전달\n  // defaultValues: 폼 입력의 기본 값 지정\n  defaultValues: {\n    email: \"\", \n    password: \"\", \n    phoneNumber: \"\",\n    country: \"\",\n  },\n});\n\n const onSubmit = (data: FormData) => {\n    console.log(data); // 제출된 데이터로 API 호출\n };\n```\n\nReact Hook Form과 Material-UI 컴포넌트, MUI 폼 컨트롤을 사용하여 폼을 생성해봅시다.\n\n```js\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <Typography variant=\"h4\" gutterBottom>\n            회원가입\n          </Typography>\n          <TextField\n            label=\"이메일\"\n            fullWidth\n            margin=\"normal\"\n            defaultValue={defaultValues.email}\n            {...register(\"email\")}\n            error={!!errors.email}\n            helperText={errors.email?.message}\n          />\n          <TextField\n            label=\"비밀번호\"\n            type=\"password\"\n            fullWidth\n            margin=\"normal\"\n            defaultValue={defaultValues.password}\n            {...register(\"password\")}\n            error={!!errors.password}\n            helperText={errors.password?.message}\n          />\n          <TextField\n            label=\"전화번호\"\n            fullWidth\n            margin=\"normal\"\n            defaultValue={defaultValues.phoneNumber}\n            {...register(\"phoneNumber\")}\n            error={!!errors.phoneNumber}\n            helperText={errors.phoneNumber?.message}\n          />\n\n          <FormControl fullWidth margin=\"normal\" error={!!errors.country}>\n            <InputLabel>국가</InputLabel>\n            <Select\n              label=\"국가\"\n              {...register(\"country\")}\n              defaultValue={defaultValues.country}\n              sx={ my: 1 }\n            >\n              <MenuItem value=\"USA\">미국</MenuItem>\n              <MenuItem value=\"Canada\">캐나다</MenuItem>\n              {/* 필요한 경우 다른 국가 추가 */}\n            </Select>\n            <FormHelperText>{errors.country?.message}</FormHelperText>\n          </FormControl>\n\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            제출\n          </Button>\n        </form>\n```\n\n위의 코드에서 무슨 일이 벌어지고 있는지 설명드리겠습니다.\n\n<div class=\"content-ad\"></div>\n\n```bash\n- defaultValue={defaultValues.phoneNumber}: 여기서는 입력 필드의 기본값을 저장된 값으로 설정합니다.\n- {...register(\"phoneNumber\")}: 이 줄은 React Hook Form과 입력 필드를 등록하여 폼 데이터의 \"phoneNumber\" 필드와 연결합니다. 이를 통해 React Hook Form을 사용하여 폼 유효성 검사 및 데이터 처리를 활성화할 수 있습니다.\n- error={!!errors.phoneNumber}: 이 속성은 입력 필드에 대한 오류 상태를 표시할지 여부를 결정합니다. 만약 폼 데이터의 \"phoneNumber\" 필드에 오류가 있으면 오류 상태를 트리거합니다.\n- helperText={errors.phoneNumber?.message}: 여기서 \"phoneNumber\" 필드와 관련된 오류 메시지를 표시합니다. 오류가 없으면 이 속성은 비어 있지만, 폼 유효성 검사 중 오류가 발생하면 사용자에게 오류 메시지를 표시하여 안내합니다.\n```\n\n사용자에게 피드백을 제공하고 유효성 검사 오류를 조건적으로 표시하는 데 touchedFields 객체를 사용할 수 있습니다.\n\n![이미지](/assets/img/2024-05-01-SuperchargeyourReactFormswithReactHookFormZodandMUIAPowerfulTrio_1.png)\n\n예를 들어 사용자가 상호 작용한 필드에 대해서만 유효성 검사 오류를 표시하고 싶을 수 있습니다. 필드의 touched 상태가 true인지 확인하여 오류 메시지를 조건부로 렌더링할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nerror={!!errors.firstName && touchedFields.firstName}\n```\n\nwatch를 사용하면 사용자가 입력하는 값의 변경 사항을 추적하고 반응할 수 있습니다. 비밀번호를 입력할 때 암호 강도를 표시하고 싶다면, 입력 값을 기반으로 실시간으로 유효성을 검사하는 watch를 사용하여 이를 달성할 수 있습니다.\n\n```js\nconst password = watch('password');\n\nuseEffect(() => {\n    console.log(passwordWatch); // 로깅\n    if (password.length < 8 || !hasAlphabet(password) || !hasLowercase(password) || !hasSpecialCharacter(password)) {\n      // 비밀번호 강도 경고 표시\n    } else {\n      // 경고 숨기기\n    }\n  }, [password]);\n```\n\n비밀번호가 변경될 때마다 비밀번호 값이 변경되는 것을 확인할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-01-SuperchargeyourReactFormswithReactHookFormZodandMUIAPowerfulTrio_2.png\" />\n\nFormControl과 control은 서로 다른 목적을 가지고 있습니다.\n\nFormControl\n\n- Material-UI의 컴포넌트: 이 컴포넌트는 텍스트 필드, 체크박스, 라디오 버튼과 같은 폼 컨트롤을 스타일링하고 그룹화하기 위해 특별히 디자인된 컴포넌트입니다. 시각적 일관성과 접근성을 위한 스타일링 및 레이아웃 옵션을 제공합니다.\n- 예시: 코드에서 FormControl은 이메일과 비밀번호 필드를 위해 InputLabel과 Select 컴포넌트를 감싸는 데 사용되어, 레이블과 에러 처리를 포함하는 스타일링된 인풋 그룹을 만듭니다.\n\n<div class=\"content-ad\"></div>\n\n컨트롤\n\n- react-hook-form의 기능: useForm 훅에서 제공되는 함수로, 폼 입력을 등록하고 값 및 상태를 관리할 수 있게 해줍니다. 입력을 폼 상태에 연결하고 검증 및 상호작용 메커니즘을 제공하는 내부 논리를 처리합니다.\n- 예시: register 내에서 컨트롤 함수를 전달하면 필드 이름(이메일 또는 비밀번호)과 함께 입력을 폼 상태에 등록할 수 있습니다. 이렇게 하면 react-hook-form이 입력의 값을, 오류 및 검증 상태를 추적할 수 있습니다.\n\n![이미지](/assets/img/2024-05-01-SuperchargeyourReactFormswithReactHookFormZodandMUIAPowerfulTrio_3.png)\n\nreact-hook-form-mui 라이브러리를 사용하는 것을 고려해보세요. 이 라이브러리는 Material-UI 구성요소에 대한 사용자 지정 컴포넌트 및 래퍼를 제공하며, react-hook-form과 원활하게 통합됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 일반 사용 사례\n\nMaterial-UI 구성 요소를 사용할 때는 register 및 Controller 간의 선택이 특정 컴포넌트 및 원하는 제어 수준에 따라 달라집니다:\n\n다음에 register 사용:\n\n- 제어된 동작을 갖는 기본 Material-UI 구성 요소:\n\n<div class=\"content-ad\"></div>\n\n- 텍스트 필드\n- 선택\n- 체크박스\n- 라디오 그룹\n\n컨트롤러 사용 사례:\n\n기본적으로 제어된 동작을 따르지 않는 고급 Material-UI 구성 요소\n\n- 자동 완성\n- 날짜 선택기\n- 시간 선택기\n- 스위치\n\n<div class=\"content-ad\"></div>\n\n# 주요 기능\n\n## Re-Renderers 분리하기\n\nRe-Renderers 분리하기는 React Hook Form의 기능 중 하나로, 필요한 컴포넌트만 다시 렌더링하여 폼의 성능을 개선할 수 있게 해줍니다. 전체 폼을 다시 렌더링하는 대신 업데이트해야 할 컴포넌트만 다시 렌더링하는 것이 중요합니다. 이는 폼이 로드되는 데 필요한 시간을 줄이고 사용자와의 상호 작용을 향상시킬 수 있습니다.\n\n세 개의 자식 컴포넌트를 포함한 폼이 있다고 상상해봅시다: 자식 컴포넌트 A, 자식 컴포넌트 B, 자식 컴포넌트 C. 제어되는 폼에서 자식 컴포넌트 A를 변경하면, 자식 컴포넌트 B와 자식 컴포넌트 C가 업데이트될 필요가 없더라도 세 개의 자식 컴포넌트가 모두 다시 렌더링됩니다.\n\n<div class=\"content-ad\"></div>\n\nReact Hook Form을 사용하면 Child Component A의 다시 렌더링을 격리시켜 해당 컴포넌트가 변경되었을 때 해당 컴포넌트만 다시 렌더링됩니다. 이렇게 하면 대형이거나 복잡한 폼을 사용할 경우 폼의 성능을 크게 향상시킬 수 있습니다.\n\n# 결론\n\nReact Hook Form, Zod 및 MUI를 결합하여 견고하고 효율적이며 사용자 친화적인 폼을 만들어 React 개발 경험을 향상시킬 수 있습니다. 그러니 복잡성을 버리고 엔터프라이즈 수준의 폼 빌딩 여정을 위해 이 강력한 세트를 환영해 보세요!\n\n유용하게 여겨진다면 박수 버튼을 눌러주세요.","ogImage":{"url":"/assets/img/2024-05-01-SuperchargeyourReactFormswithReactHookFormZodandMUIAPowerfulTrio_0.png"},"coverImage":"/assets/img/2024-05-01-SuperchargeyourReactFormswithReactHookFormZodandMUIAPowerfulTrio_0.png","tag":["Tech"],"readingTime":9},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h1: \"h1\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"React Hook Form과 Zod 스키마를 사용하여 효율적으로 유효성을 검사하는 방법을 배우세요. MUI 컨트롤과 함께 사용하여 양식 유효성 검사 능력을 한 단계 업그레이드하세요. 이 포괄적인 가이드를 통해 React 애플리케이션에서 견고함과 정확성을 보장하세요. 통합 프로세스를 몰두하고 개발 워크플로우를 간소화하세요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"효율적이고 사용자 친화적인 양식을 작성하는 것은 React 애플리케이션에서 중요합니다. 그러나 유효성 검사, 상태 및 스타일 관리는 지루하고 복잡해질 수 있습니다. 이것이 React Hook Form, Zod 및 MUI의 조합이 빛을 발하는 곳입니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-01-SuperchargeyourReactFormswithReactHookFormZodandMUIAPowerfulTrio_0.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React Hook Form:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"선언적 접근 방식: 등록, 유효성 검사 및 제출에 대한 후크를 사용하여 양식 관리를 간소화합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"내장 유효성 검사: 외부 라이브러리가 필요하지 않습니다. 양식 내에서 직접 유효성 검사 규칙을 정의하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"비제어 컴포넌트: 네이티브 HTML 입력 또는 제어 컴포넌트를 활용하여 유연성을 높이세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Zod:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"유형 안전한 유효성 검사: 강력한 스키마 유효성 검사 라이브러리로 데이터 품질을 보장하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"명확한 오류 메시지: Zod 스키마를 사용하면 사용자가 어떤 오류가 발생했는지 이해할 수 있도록 명확한 오류 메시지를 작성할 수 있습니다. 더 나아가 중첩된 유효성 검사를 사용하여 고급 유효성 검사 규칙을 작성할 수 있어 복잡한 데이터 구조를 처리하기가 더 쉬워집니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"React Hook Form과의 통합: zodResolver와의 원활한 통합으로 양식에서 간편한 유효성 검사를 수행하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"MUI:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"아름다운 UI 구성 요소: 미리 만들어진 MUI 컴포넌트를 사용하여 시각적으로 매력적이고 접근성 있는 양식을 만들어보세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"사용자 정의: 브랜드 아이덴티티에 맞춰 테마를 사용자 정의하여 앱 UI의 모양과 느낌을 조정하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"쉬운 통합: Material-UI 컴포넌트는 React Hook Form과 원활하게 통합되어 스타일 충돌 가능성을 줄입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 3가지를 사용하는 장점:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"향상된 개발자 경험: 보일러플레이트를 줄이고 더 깔끔하고 유지보수하기 쉬운 코드를 작성하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"향상된 사용자 경험: 자동 유효성 검사, 명확한 오류 메시지, 부드러운 작업 흐름을 활용하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"오류 감소: 타입 안전한 유효성 검사로 데이터 문제를 일찍 발견하고 예방하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"빠른 개발: 기능 구축에 집중하고 양식과의 싸움을 줄이세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예제를 만들어봅시다!\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 폼 유효성 검사를 위한 Zod 스키마 정의\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Yup 유효성 검사를 대신 사용할 수도 있습니다.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" schema = z.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"object\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": z.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"email\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"유효하지 않은 이메일입니다.\\\"\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"이메일은 필수입니다.\\\"\"\n        }), \"),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"password\"\n        }), \": z.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"비밀번호는 최소 6자 이상이어야 합니다.\\\"\"\n        }), \"),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"phoneNumber\"\n        }), \": z\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"()\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"전화번호는 최소 10자 이상이어야 합니다.\\\"\"\n        }), \")\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"max\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \")\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"optional\"\n        }), \"(),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"country\"\n        }), \": z.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"국가는 필수입니다.\\\"\"\n        }), \"),\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 복잡한 객체를 Zod를 사용하여 유효성 검사하는 방법입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" addressSchema = z.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"object\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"street\"\n        }), \": z.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"거리를 입력해주세요.\\\"\"\n        }), \"),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"city\"\n        }), \": z.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"도시를 입력해주세요.\\\"\"\n        }), \"),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"zipCode\"\n        }), \": z\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"()\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"우편번호는 최소 5자 이상이어야 합니다.\\\"\"\n        }), \")\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"refine\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"value\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/^\\\\d+$/\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"test\"\n        }), \"(value), {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"message\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"우편번호는 숫자로만 이루어져야 합니다.\\\"\"\n        }), \"\\n    }),\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" userSchema = z.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"object\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": z.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"email\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"유효하지 않은 이메일입니다.\\\"\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"이메일은 필수입니다.\\\"\"\n        }), \"),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"password\"\n        }), \": z.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"비밀번호는 최소 6자 이상이어야 합니다.\\\"\"\n        }), \"),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"phoneNumber\"\n        }), \": z\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"()\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"전화번호는 최소 10자 이상이어야 합니다.\\\"\"\n        }), \")\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"max\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \")\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"optional\"\n        }), \"(),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"country\"\n        }), \": z.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"string\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"min\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"국가는 필수입니다.\\\"\"\n        }), \"),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"address\"\n        }), \": addressSchema,\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"폼 데이터의 유형을 정의하고 useForm 훅을 사용하여 입력 상태를 관리하세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 폼 데이터 유형 정의\"\n        }), \"\\ntype \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormData\"\n        }), \" = z.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"infer\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"typeof\"\n        }), \" schema>;\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// react-hook-form에서 useForm을 구조분해하여 가져옵니다\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// register: 입력 요소 등록 함수\"\n        }), \"\\n  register,\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// handleSubmit: 폼 제출 처리 함수\"\n        }), \"\\n  handleSubmit,\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// watch: 폼 입력 값 감시 함수\"\n        }), \"\\n  watch,\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// formState: 폼 상태 정보를 포함한 객체\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"formState\"\n        }), \": { errors, touchedFields }, \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// formState에서 errors 및 touchedFields를 구조분해합니다\"\n        }), \"\\n} = useForm<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FormData\"\n        }), \">({ \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// generic 타입 FormData로 useForm 훅 호출\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// resolver: Zod를 사용하여 폼 유효성 검사에 대한 리졸버 지정\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"resolver\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"zodResolver\"\n        }), \"(schema), \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Zod 스키마를 리졸버에 전달\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// defaultValues: 폼 입력의 기본 값 지정\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"defaultValues\"\n        }), \": {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \", \\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"password\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \", \\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"phoneNumber\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"country\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \",\\n  },\\n});\\n\\n \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"onSubmit\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"data: FormData\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(data); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 제출된 데이터로 API 호출\"\n        }), \"\\n };\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React Hook Form과 Material-UI 컴포넌트, MUI 폼 컨트롤을 사용하여 폼을 생성해봅시다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"        <form onSubmit={\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleSubmit\"\n        }), \"(onSubmit)}>\\n          \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Typography\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"variant\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"h4\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"gutterBottom\"\n            }), \">\"]\n          }), \"\\n            회원가입\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Typography\"\n            }), \">\"]\n          })]\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"TextField\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"label\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"이메일\\\"\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"fullWidth\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"margin\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"normal\\\"\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"defaultValue\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{defaultValues.email}\"\n            }), \"\\n            {\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"...register\"\n            }), \"(\\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"email\"\n            }), \"\\\")}\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"error\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{!!errors.email}\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"helperText\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{errors.email?.message}\"\n            }), \"\\n          />\"]\n          })\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"TextField\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"label\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"비밀번호\\\"\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"password\\\"\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"fullWidth\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"margin\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"normal\\\"\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"defaultValue\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{defaultValues.password}\"\n            }), \"\\n            {\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"...register\"\n            }), \"(\\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"password\"\n            }), \"\\\")}\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"error\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{!!errors.password}\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"helperText\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{errors.password?.message}\"\n            }), \"\\n          />\"]\n          })\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"TextField\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"label\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"전화번호\\\"\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"fullWidth\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"margin\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"normal\\\"\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"defaultValue\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{defaultValues.phoneNumber}\"\n            }), \"\\n            {\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"...register\"\n            }), \"(\\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"phoneNumber\"\n            }), \"\\\")}\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"error\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{!!errors.phoneNumber}\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"helperText\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{errors.phoneNumber?.message}\"\n            }), \"\\n          />\"]\n          })\n        }), \"\\n\\n          \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"FormControl\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"fullWidth\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"margin\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"normal\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"error\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{!!errors.country}\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"InputLabel\"\n            }), \">\"]\n          }), \"국가\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"InputLabel\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Select\"\n            }), \"\\n              \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"label\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"국가\\\"\"\n            }), \"\\n              {\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"...register\"\n            }), \"(\\\"\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"country\"\n            }), \"\\\")}\\n              \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"defaultValue\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{defaultValues.country}\"\n            }), \"\\n              \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"sx\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"my:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"1\"\n            }), \" }\\n            >\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"MenuItem\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"USA\\\"\"\n            }), \">\"]\n          }), \"미국\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"MenuItem\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"MenuItem\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Canada\\\"\"\n            }), \">\"]\n          }), \"캐나다\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"MenuItem\"\n            }), \">\"]\n          }), \"\\n              {/* 필요한 경우 다른 국가 추가 */}\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Select\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"FormHelperText\"\n            }), \">\"]\n          }), \"{errors.country?.message}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"FormHelperText\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"FormControl\"\n            }), \">\"]\n          })]\n        }), \"\\n\\n          \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"submit\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"variant\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"contained\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"color\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"primary\\\"\"\n            }), \">\"]\n          }), \"\\n            제출\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Button\"\n            }), \">\"]\n          })]\n        }), \"\\n        </form>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위의 코드에서 무슨 일이 벌어지고 있는지 설명드리겠습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [\"- defaultValue={defaultValues.phoneNumber}: 여기서는 입력 필드의 기본값을 저장된 값으로 설정합니다.\\n- {...register(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"phoneNumber\\\"\"\n        }), \")}: 이 줄은 React Hook Form과 입력 필드를 등록하여 폼 데이터의 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"phoneNumber\\\"\"\n        }), \" 필드와 연결합니다. 이를 통해 React Hook Form을 사용하여 폼 유효성 검사 및 데이터 처리를 활성화할 수 있습니다.\\n- error={!!errors.phoneNumber}: 이 속성은 입력 필드에 대한 오류 상태를 표시할지 여부를 결정합니다. 만약 폼 데이터의 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"phoneNumber\\\"\"\n        }), \" 필드에 오류가 있으면 오류 상태를 트리거합니다.\\n- helperText={errors.phoneNumber?.message}: 여기서 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"phoneNumber\\\"\"\n        }), \" 필드와 관련된 오류 메시지를 표시합니다. 오류가 없으면 이 속성은 비어 있지만, 폼 유효성 검사 중 오류가 발생하면 사용자에게 오류 메시지를 표시하여 안내합니다.\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자에게 피드백을 제공하고 유효성 검사 오류를 조건적으로 표시하는 데 touchedFields 객체를 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-01-SuperchargeyourReactFormswithReactHookFormZodandMUIAPowerfulTrio_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예를 들어 사용자가 상호 작용한 필드에 대해서만 유효성 검사 오류를 표시하고 싶을 수 있습니다. 필드의 touched 상태가 true인지 확인하여 오류 메시지를 조건부로 렌더링할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"error={!!errors.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"firstName\"\n        }), \" && touchedFields.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"firstName\"\n        }), \"}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"watch를 사용하면 사용자가 입력하는 값의 변경 사항을 추적하고 반응할 수 있습니다. 비밀번호를 입력할 때 암호 강도를 표시하고 싶다면, 입력 값을 기반으로 실시간으로 유효성을 검사하는 watch를 사용하여 이를 달성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" password = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"watch\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'password'\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(passwordWatch); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 로깅\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (password.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \" < \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \" || !\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hasAlphabet\"\n        }), \"(password) || !\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hasLowercase\"\n        }), \"(password) || !\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hasSpecialCharacter\"\n        }), \"(password)) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 비밀번호 강도 경고 표시\"\n        }), \"\\n    } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 경고 숨기기\"\n        }), \"\\n    }\\n  }, [password]);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"비밀번호가 변경될 때마다 비밀번호 값이 변경되는 것을 확인할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-01-SuperchargeyourReactFormswithReactHookFormZodandMUIAPowerfulTrio_2.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"FormControl과 control은 서로 다른 목적을 가지고 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"FormControl\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Material-UI의 컴포넌트: 이 컴포넌트는 텍스트 필드, 체크박스, 라디오 버튼과 같은 폼 컨트롤을 스타일링하고 그룹화하기 위해 특별히 디자인된 컴포넌트입니다. 시각적 일관성과 접근성을 위한 스타일링 및 레이아웃 옵션을 제공합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"예시: 코드에서 FormControl은 이메일과 비밀번호 필드를 위해 InputLabel과 Select 컴포넌트를 감싸는 데 사용되어, 레이블과 에러 처리를 포함하는 스타일링된 인풋 그룹을 만듭니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컨트롤\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"react-hook-form의 기능: useForm 훅에서 제공되는 함수로, 폼 입력을 등록하고 값 및 상태를 관리할 수 있게 해줍니다. 입력을 폼 상태에 연결하고 검증 및 상호작용 메커니즘을 제공하는 내부 논리를 처리합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"예시: register 내에서 컨트롤 함수를 전달하면 필드 이름(이메일 또는 비밀번호)과 함께 입력을 폼 상태에 등록할 수 있습니다. 이렇게 하면 react-hook-form이 입력의 값을, 오류 및 검증 상태를 추적할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-01-SuperchargeyourReactFormswithReactHookFormZodandMUIAPowerfulTrio_3.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"react-hook-form-mui 라이브러리를 사용하는 것을 고려해보세요. 이 라이브러리는 Material-UI 구성요소에 대한 사용자 지정 컴포넌트 및 래퍼를 제공하며, react-hook-form과 원활하게 통합됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"일반 사용 사례\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Material-UI 구성 요소를 사용할 때는 register 및 Controller 간의 선택이 특정 컴포넌트 및 원하는 제어 수준에 따라 달라집니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음에 register 사용:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"제어된 동작을 갖는 기본 Material-UI 구성 요소:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"텍스트 필드\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"선택\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"체크박스\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"라디오 그룹\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컨트롤러 사용 사례:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기본적으로 제어된 동작을 따르지 않는 고급 Material-UI 구성 요소\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"자동 완성\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"날짜 선택기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"시간 선택기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"스위치\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"주요 기능\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Re-Renderers 분리하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Re-Renderers 분리하기는 React Hook Form의 기능 중 하나로, 필요한 컴포넌트만 다시 렌더링하여 폼의 성능을 개선할 수 있게 해줍니다. 전체 폼을 다시 렌더링하는 대신 업데이트해야 할 컴포넌트만 다시 렌더링하는 것이 중요합니다. 이는 폼이 로드되는 데 필요한 시간을 줄이고 사용자와의 상호 작용을 향상시킬 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"세 개의 자식 컴포넌트를 포함한 폼이 있다고 상상해봅시다: 자식 컴포넌트 A, 자식 컴포넌트 B, 자식 컴포넌트 C. 제어되는 폼에서 자식 컴포넌트 A를 변경하면, 자식 컴포넌트 B와 자식 컴포넌트 C가 업데이트될 필요가 없더라도 세 개의 자식 컴포넌트가 모두 다시 렌더링됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React Hook Form을 사용하면 Child Component A의 다시 렌더링을 격리시켜 해당 컴포넌트가 변경되었을 때 해당 컴포넌트만 다시 렌더링됩니다. 이렇게 하면 대형이거나 복잡한 폼을 사용할 경우 폼의 성능을 크게 향상시킬 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React Hook Form, Zod 및 MUI를 결합하여 견고하고 효율적이며 사용자 친화적인 폼을 만들어 React 개발 경험을 향상시킬 수 있습니다. 그러니 복잡성을 버리고 엔터프라이즈 수준의 폼 빌딩 여정을 위해 이 강력한 세트를 환영해 보세요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"유용하게 여겨진다면 박수 버튼을 눌러주세요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}