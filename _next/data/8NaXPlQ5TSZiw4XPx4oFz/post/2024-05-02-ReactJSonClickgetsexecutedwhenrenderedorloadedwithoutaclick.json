{"pageProps":{"post":{"title":"ReactJS: 클릭하지 않아도 렌더링되거나 로드될 때 onClick이 실행되는 이유","description":"","date":"2024-05-02 00:26","slug":"2024-05-02-ReactJSonClickgetsexecutedwhenrenderedorloadedwithoutaclick","content":"\n\n아주 간단한 방법으로 해결할 수 있어요.\n\n![ReactJS onClick gets executed when rendered or loaded without a click](/assets/img/2024-05-02-ReactJSonClickgetsexecutedwhenrenderedorloadedwithoutaclick_0.png)\n\n그룹 프로젝트를 진행하면서 onClick이 클릭 없이 실행되는 것을 발견했어요. 구글을 찾아보니 왜 이런지 마침내 알게 되었어요.\n\n답은 매우 간단해요. 코드를 다음과 같이 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<button onClick={() => handleClick()}>Click Me!</button>\n```\n\n이렇게 변경해 주세요. 그 이유는 간단합니다. 버튼이 로드될 때, onClick 함수가 평가됩니다. onClick에서 반환된 함수는 버튼이 클릭될 때마다 실행될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n그러니까, 우리가 클릭할 때마다 실행되길 원하는 함수를 또 다른 함수 안에 감싸서 원하는 함수를 반환해야 해.\n\n나는 스택오버플로우에 답을 찾았어.\n\n내 블로그에서도 이 스토리를 찾을 수 있어.","ogImage":{"url":"/assets/img/2024-05-02-ReactJSonClickgetsexecutedwhenrenderedorloadedwithoutaclick_0.png"},"coverImage":"/assets/img/2024-05-02-ReactJSonClickgetsexecutedwhenrenderedorloadedwithoutaclick_0.png","tag":["Tech"],"readingTime":1},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"아주 간단한 방법으로 해결할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-02-ReactJSonClickgetsexecutedwhenrenderedorloadedwithoutaclick_0.png\",\n        alt: \"ReactJS onClick gets executed when rendered or loaded without a click\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그룹 프로젝트를 진행하면서 onClick이 클릭 없이 실행되는 것을 발견했어요. 구글을 찾아보니 왜 이런지 마침내 알게 되었어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"답은 매우 간단해요. 코드를 다음과 같이 변경해주세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<button onClick={\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleClick\"\n        }), \"()}>\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Click\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Me\"\n        }), \"!</button>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이렇게 변경해 주세요. 그 이유는 간단합니다. 버튼이 로드될 때, onClick 함수가 평가됩니다. onClick에서 반환된 함수는 버튼이 클릭될 때마다 실행될 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러니까, 우리가 클릭할 때마다 실행되길 원하는 함수를 또 다른 함수 안에 감싸서 원하는 함수를 반환해야 해.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나는 스택오버플로우에 답을 찾았어.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"내 블로그에서도 이 스토리를 찾을 수 있어.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}