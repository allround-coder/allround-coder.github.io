{"pageProps":{"post":{"title":"Node.js와 Nodemailer로 이미지를 포함한 HTML 이메일 템플릿 보내기","description":"","date":"2024-05-02 00:48","slug":"2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer","content":"\n\n<img src=\"/assets/img/2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer_0.png\" />\n\n웹 개발의 세계에서는 맞춤화된 시각적으로 매력적인 이메일 템플릿을 보내는 것이 사용자 참여를 크게 향상시킬 수 있습니다. 이 블로그 글에서는 Node.js, Nodemailer 및 이미지가 포함된 HTML 이메일 템플릿을 사용하여 이를 어떻게 구현할 수 있는지 살펴보겠습니다.\n\n# 준비 단계 설정\n\n코드에 들어가기 전에 필요한 패키지가 설치되어 있는지 확인해 보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install nodemailer html-to-text\n```\n\n# 단계 1: HTML 이메일 템플릿 생성하기\n\n내장된 이미지가 포함된 멋진 HTML 이메일 템플릿을 만들어보세요. 간단한 예제를 함께 보여드리겠습니다:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>당신의 멋진 이메일</title>\n</head>\n<body>\n    <h1>안녕하세요 [수신자]님!</h1>\n    <p>이것은 내장 이미지가 포함된 샘플 이메일입니다:</p>\n    <img src=\"cid:uniqueImageCID\" alt=\"내장 이미지\">\n    <p>읽어주셔서 감사합니다!</p>\n</body>\n</html>\n```\n\n<div class=\"content-ad\"></div>\n\n이 예제에서 우리는 src 속성을 \"cid:uniqueImageCID\"로 설정한 `img` 태그를 가지고 있습니다. 이 cid 표기법은 포함된 이미지를 참조하는 데 사용됩니다.\n\n# 단계 2: Node.js 및 Nodemailer 설정\n\n이제, 이메일을 보내기 위한 Node.js 스크립트를 설정해 봅시다. 다음 코드가 포함된 파일(예: sendEmail.js)을 생성하십시오:\n\n```js\nconst nodemailer = require('nodemailer');\nconst fs = require('fs');\nconst { promisify } = require('util');\n\nconst readFileAsync = promisify(fs.readFile);\n\nasync function sendEmail() {\n    // HTML 템플릿 및 이미지 파일 읽기\n    const htmlTemplate = await readFileAsync('path/to/your/template.html', 'utf-8');\n    const imageAttachment = await readFileAsync('path/to/your/image.png');\n\n    // Nodemailer 전송기 생성\n    const transporter = nodemailer.createTransport({\n        service: 'gmail',\n        auth: {\n            user: 'your.email@gmail.com',\n            pass: 'your-email-password',\n        },\n    });\n\n    // 이메일 보내기\n    const info = await transporter.sendMail({\n        from: 'your.email@gmail.com',\n        to: 'recipient.email@example.com',\n        subject: '제목',\n        html: htmlTemplate,\n        attachments: [{\n            filename: 'image.png',\n            content: imageAttachment,\n            encoding: 'base64',\n            cid: 'uniqueImageCID', // HTML 템플릿에서 참조됨\n        }],\n    });\n\n    console.log('이메일 전송 완료:', info.messageId);\n}\n\nsendEmail();\n```\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n이메일 받은 편지함을 확인해보세요. 메일에 내장된 이미지가 있을 거에요.\n\n# 결론\n\nNode.js와 Nodemailer를 사용하여 HTML 이메일 템플릿을 보내고 이미지를 삽입하는 것은 사용자들과 시각적으로 매력적이고 맞춤형 커뮤니케이션을 만들 수 있는 강력한 방법입니다. 다양한 HTML 디자인으로 실험을 해보고 매료적인 이메일 콘텐츠로 관객을 유도해 보세요.\n\nHTML 템플릿을 자유롭게 수정하고, 특정 요구사항에 기반해 기능을 확장해 보세요.\n\n<div class=\"content-ad\"></div>\n\n좋은 이메일 보내기!","ogImage":{"url":"/assets/img/2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer_0.png"},"coverImage":"/assets/img/2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    div: \"div\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-02-SendingHTMLEmailTemplateswithImagesusingNodejsandNodemailer_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"웹 개발의 세계에서는 맞춤화된 시각적으로 매력적인 이메일 템플릿을 보내는 것이 사용자 참여를 크게 향상시킬 수 있습니다. 이 블로그 글에서는 Node.js, Nodemailer 및 이미지가 포함된 HTML 이메일 템플릿을 사용하여 이를 어떻게 구현할 수 있는지 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"준비 단계 설정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드에 들어가기 전에 필요한 패키지가 설치되어 있는지 확인해 보겠습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install nodemailer html-to-text\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 1: HTML 이메일 템플릿 생성하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"내장된 이미지가 포함된 멋진 HTML 이메일 템플릿을 만들어보세요. 간단한 예제를 함께 보여드리겠습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DOCTYPE\"\n        }), \" html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>당신의 멋진 이메일</title>\\n</head>\\n<body>\\n    <h1>안녕하세요 [수신자]님!</h1>\\n    <p>이것은 내장 이미지가 포함된 샘플 이메일입니다:</p>\\n    <img src=\\\"cid:uniqueImageCID\\\" alt=\\\"내장 이미지\\\">\\n    <p>읽어주셔서 감사합니다!</p>\\n</body>\\n</html>\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 예제에서 우리는 src 속성을 \\\"cid\", _jsx(_components.div, {}), \"\\\"로 설정한 \", _jsx(_components.code, {\n        children: \"img\"\n      }), \" 태그를 가지고 있습니다. 이 cid 표기법은 포함된 이미지를 참조하는 데 사용됩니다.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 2: Node.js 및 Nodemailer 설정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제, 이메일을 보내기 위한 Node.js 스크립트를 설정해 봅시다. 다음 코드가 포함된 파일(예: sendEmail.js)을 생성하십시오:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" nodemailer = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'nodemailer'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" fs = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'fs'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { promisify } = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'util'\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" readFileAsync = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"promisify\"\n        }), \"(fs.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"readFile\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sendEmail\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// HTML 템플릿 및 이미지 파일 읽기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" htmlTemplate = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"readFileAsync\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'path/to/your/template.html'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'utf-8'\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" imageAttachment = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"readFileAsync\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'path/to/your/image.png'\"\n        }), \");\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Nodemailer 전송기 생성\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" transporter = nodemailer.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createTransport\"\n        }), \"({\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"service\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'gmail'\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"auth\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"user\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'your.email@gmail.com'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"pass\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'your-email-password'\"\n        }), \",\\n        },\\n    });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이메일 보내기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" info = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" transporter.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sendMail\"\n        }), \"({\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"from\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'your.email@gmail.com'\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"to\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'recipient.email@example.com'\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"subject\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'제목'\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"html\"\n        }), \": htmlTemplate,\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"attachments\"\n        }), \": [{\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"filename\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'image.png'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"content\"\n        }), \": imageAttachment,\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"encoding\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'base64'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"cid\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'uniqueImageCID'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// HTML 템플릿에서 참조됨\"\n        }), \"\\n        }],\\n    });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'이메일 전송 완료:'\"\n        }), \", info.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"messageId\"\n        }), \");\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sendEmail\"\n        }), \"();\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"테이블 태그를 Markdown 형식으로 변경해주세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이메일 받은 편지함을 확인해보세요. 메일에 내장된 이미지가 있을 거에요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Node.js와 Nodemailer를 사용하여 HTML 이메일 템플릿을 보내고 이미지를 삽입하는 것은 사용자들과 시각적으로 매력적이고 맞춤형 커뮤니케이션을 만들 수 있는 강력한 방법입니다. 다양한 HTML 디자인으로 실험을 해보고 매료적인 이메일 콘텐츠로 관객을 유도해 보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HTML 템플릿을 자유롭게 수정하고, 특정 요구사항에 기반해 기능을 확장해 보세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"좋은 이메일 보내기!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}