{"pageProps":{"post":{"title":"NextJs 14에서 Route Groups이란 무엇인가?","description":"","date":"2024-05-18 22:26","slug":"2024-05-18-WhatareRouteGroupsinNextJs14","content":"\n\n안녕하세요 여러분! Next.js에서는 종종 페이지를 앱 디렉토리 내의 폴더로 구성하죠, 맞죠? 그런데 만약 URL 경로를 지저분하게 하지 않고 관련된 경로를 그룹화하고 싶다면 어떻게 할까요? 바로 Route Groups가 등장합니다!\n\n그러니 함께 살펴봅시다. NextJs의 이 개념에 익숙하실 것입니다. 우리는 각 폴더에 page.tsx 파일을 포함하여 앱 디렉토리 안에 폴더를 만들 수 있습니다. 이를 통해 URL 경로에 폴더 이름을 추가할 수 있게 됩니다. 아래는 이를 설명하는 예시입니다:\n\n![Route Groups in NextJs](/assets/img/2024-05-18-WhatareRouteGroupsinNextJs14_0.png)\n\n이것은 앱 폴더 내의 폴더 디렉토리로, 'button'이라는 폴더를 만들고 그 안에 page.tsx 파일을 만들었습니다.\n\n<div class=\"content-ad\"></div>\n\n/button으로 이동하면 page.tsx에 있는 내용을 볼 수 있습니다.\n\n기본 사항을 잘 이해하셨으니, 여기서 라우트 그룹이 어떻게 작용하는지 알아보겠습니다. 많은 경우, 우리는 만들어 둔 폴더를 표시하고 싶지 않거나 URL을 깔끔하게 유지하면서 관련 폴더를 그룹화해야 할 때가 있습니다. 이때 라우트 그룹이 마법을 부리는 시점입니다! 라우트 그룹을 사용하면 경로에 추가하지 않고 폴더 이름을 생성할 수 있습니다. 유일한 제한 사항은 NextJS가 어떤 이름을 회피해야 하는지 알기 위해서는 폴더 이름을 원형 괄호로 감싸야 한다는 것입니다.\n\n다음은 예시입니다:\n\n![라우트 그룹 예시](/assets/img/2024-05-18-WhatareRouteGroupsinNextJs14_1.png)\n\n<div class=\"content-ad\"></div>\n\n우리가 처음에 논의한 것에 따르면, 페이지.tsx의 콘텐츠를 표시할 때 URL이 example/button과 같아야 했지만 example이 괄호 안에 있기 때문에 NextJS는 경로에 포함할 필요가 없다는 것을 알고 있어 URL은 /button이 됩니다.\n\n그래서 언제 경로 그룹을 사용해야 할까요?\n1. 간소화된 URL 경로: 관련된 route를 그룹화하여 폴더에 넣고 URL 경로를 그룹 폴더의 이름으로 복잡하지 않게 만들고 싶을 때 사용합니다.\n\n2. 사용자 정의 레이아웃: 특정 폴더에 대해 다른 레이아웃을 사용하고 싶을 때 사용합니다. 한 폴더에 속하는 모든 파일은 레이아웃.tsx를 따르며 이를 통해 각 폴더에 맞게 사용자 정의 레이아웃을 가질 수 있습니다!\n\n경로 그룹에 대해 더 알아보려면, 공식 NextJS 문서를 읽는 것을 추천합니다: [NextJS 문서](https://nextjs.org/docs/app/building-your-application/routing/route-groups)","ogImage":{"url":"/assets/img/2024-05-18-WhatareRouteGroupsinNextJs14_0.png"},"coverImage":"/assets/img/2024-05-18-WhatareRouteGroupsinNextJs14_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    ol: \"ol\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"안녕하세요 여러분! Next.js에서는 종종 페이지를 앱 디렉토리 내의 폴더로 구성하죠, 맞죠? 그런데 만약 URL 경로를 지저분하게 하지 않고 관련된 경로를 그룹화하고 싶다면 어떻게 할까요? 바로 Route Groups가 등장합니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러니 함께 살펴봅시다. NextJs의 이 개념에 익숙하실 것입니다. 우리는 각 폴더에 page.tsx 파일을 포함하여 앱 디렉토리 안에 폴더를 만들 수 있습니다. 이를 통해 URL 경로에 폴더 이름을 추가할 수 있게 됩니다. 아래는 이를 설명하는 예시입니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-WhatareRouteGroupsinNextJs14_0.png\",\n        alt: \"Route Groups in NextJs\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것은 앱 폴더 내의 폴더 디렉토리로, 'button'이라는 폴더를 만들고 그 안에 page.tsx 파일을 만들었습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"/button으로 이동하면 page.tsx에 있는 내용을 볼 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기본 사항을 잘 이해하셨으니, 여기서 라우트 그룹이 어떻게 작용하는지 알아보겠습니다. 많은 경우, 우리는 만들어 둔 폴더를 표시하고 싶지 않거나 URL을 깔끔하게 유지하면서 관련 폴더를 그룹화해야 할 때가 있습니다. 이때 라우트 그룹이 마법을 부리는 시점입니다! 라우트 그룹을 사용하면 경로에 추가하지 않고 폴더 이름을 생성할 수 있습니다. 유일한 제한 사항은 NextJS가 어떤 이름을 회피해야 하는지 알기 위해서는 폴더 이름을 원형 괄호로 감싸야 한다는 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 예시입니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-WhatareRouteGroupsinNextJs14_1.png\",\n        alt: \"라우트 그룹 예시\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리가 처음에 논의한 것에 따르면, 페이지.tsx의 콘텐츠를 표시할 때 URL이 example/button과 같아야 했지만 example이 괄호 안에 있기 때문에 NextJS는 경로에 포함할 필요가 없다는 것을 알고 있어 URL은 /button이 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래서 언제 경로 그룹을 사용해야 할까요?\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"간소화된 URL 경로: 관련된 route를 그룹화하여 폴더에 넣고 URL 경로를 그룹 폴더의 이름으로 복잡하지 않게 만들고 싶을 때 사용합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"사용자 정의 레이아웃: 특정 폴더에 대해 다른 레이아웃을 사용하고 싶을 때 사용합니다. 한 폴더에 속하는 모든 파일은 레이아웃.tsx를 따르며 이를 통해 각 폴더에 맞게 사용자 정의 레이아웃을 가질 수 있습니다!\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"경로 그룹에 대해 더 알아보려면, 공식 NextJS 문서를 읽는 것을 추천합니다: \", _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/app/building-your-application/routing/route-groups\",\n        children: \"NextJS 문서\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}