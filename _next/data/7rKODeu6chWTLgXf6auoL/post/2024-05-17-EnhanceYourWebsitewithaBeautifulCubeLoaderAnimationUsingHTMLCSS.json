{"pageProps":{"post":{"title":"HTML, CSS로 멋진 큐브 로더 애니메이션 만들기","description":"","date":"2024-05-17 21:33","slug":"2024-05-17-EnhanceYourWebsitewithaBeautifulCubeLoaderAnimationUsingHTMLCSS","content":"\n\n\n![Loading Animation](https://miro.medium.com/v2/resize:fit:1200/1*CSMMFDfA44hUID0Shg5rJg.gif)\n\n지루한 로딩 막대를 응시하면서 더 빨리 움직이기를 희망한 적이 있나요? 우리 모두 그런 경험이 있습니다. 그런데 만약 당신의 웹사이트가 뒷 배경에서 콘텐츠를 로딩하는 동안에도 시각적으로 매력적인 애니메이션으로 사용자들을 매료시킬 수 있다면 어떨까요? 그것이 바로 애니메이션 큐브 로더입니다!\n\n이 단계별 가이드는 HTML과 CSS를 사용하여 세련되고 동적인 애니메이션 큐브 로더를 만드는 방법을 안내해줍니다. 이 프로젝트는 제 #100DaysOfCode 챌린지의 일환이며, 정말 멋진 것을 구축하는 동안 프론트엔드 개발 스킬을 연습하기에 최적의 방법입니다.\n\n준비가 되셨나요? 시작해봅시다!\n\n\n<div class=\"content-ad\"></div>\n\n# 단계 1: 스타터 코드 다운로드 (선택 사항)\n\n프로젝트를 빠르게 시작하기 위해, 애니메이션된 큐브 로더를 위한 미리 작성된 HTML 및 CSS 코드를 다운로드할 수 있습니다. 이것은 구조를 확인하고 모든 부분이 어떻게 함께 작동하는지 알아보는 좋은 방법입니다.\n\n여기서 소스 코드를 다운로드하세요: [소스 코드](링크)\n\n# 단계 2: HTML 구조 설정\n\n<div class=\"content-ad\"></div>\n\nHTML 코드는 애니메이션의 기본 구성 요소를 제공합니다. 우리는 큐브의 컨테이너를 만들기 위해 div 요소들의 시리즈를 사용할 것입니다. 그리고 각 큐브 자체를 정의하기 위해 개별 div 요소들을 사용할 것입니다. 각 큐브 요소 안에는 큐브의 여섯 면을 나타내는 자식 div 요소들이 있을 것입니다.\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <!-- Metadata와 CSS 파일 링크 -->\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>Animated Cube Loader</title>\n</head>\n\n<body>\n    <!-- 큐브 조립을 위한 컨테이너 -->\n\n</body>\n\n</html>\n```\n\n```js\n    <div class=\"assembly\">\n        <!-- 첫 번째 3D 구성 요소 세트 (내부 조립) -->\n        <div class=\"comp-3d comp-3d--i\">\n            <!-- 각 큐브는 'cube__face' 클래스를 가진 div로 표현된 여섯 면을 가지고 있습니다. -->\n            <!-- 첫 번째 큐브 -->\n            <div class=\"cube\">\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n                <div class=\"cube__face\"></div>\n            </div>\n            <!-- 추가 큐브들은 동일한 구조를 따릅니다. -->\n            <!-- 큐브 2부터 큐브 18까지 (동일한 구조) -->\n            <!-- 이하 생략 -->\n        </div>\n\n        <!-- 두 번째 3D 구성 요소 세트 (외부 조립) -->\n        <div class=\"comp-3d comp-3d--o\">\n            <!-- 각 pos 요소는 하나의 큐브를 포함합니다. -->\n            <!-- Position 1 -->\n            <!-- 이하 생략 -->\n        </div>\n    </div>\n```\n\n# Step 3: Adding Styles with CSS\n\n<div class=\"content-ad\"></div>\n\nCSS에서 마법이 일어납니다! 여기에 몇 가지 주요 측면을 살펴보겠습니다:\n\n- 일반 설정: 우리는 body 요소에 대한 스타일을 정의할 것입니다. 오버플로우 방지, 높이 설정, 3D 효과를 위한 perspective 생성 등이 포함됩니다.\n\n```js\n/* 오버플로우 방지, 마진 제거, 높이 설정 및 perspective 생성을 위한 일반 body 설정 */\nbody {\n    overflow: hidden;\n    margin: 0;\n    height: 100vh;\n    perspective: 32em;\n    /* 3D 효과를 위한 perspective 거리 */\n    background-image: linear-gradient(to right, #434343 0%, black 100%);\n    /* 배경 그라데이션 */\n}\n\n/* 모든 div 요소에 대한 일반 설정: 절대 위치 지정 및 3D 변형 보존 */\ndiv {\n    position: absolute;\n    transform-style: preserve-3d;\n    /* 자식 요소가 3D 공간에서 변형되도록 보장 */\n}\n```\n\n- 조립과 애니메이션: 주요 컨테이너에 스타일을 적용하고, inner 및 outer 큐브 그룹에 대한 애니메이션을 만들기 위해 keyframes를 사용할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n/* 주 어셈블리 컨테이너 중앙 정렬 및 초기 회전 */\n.assembly {\n    top: 50%;\n    left: 50%;\n    transform: rotateX(-45deg) rotateY(-45deg);\n    /* 초기 3D 회전 */\n}\n\n/* 3D 구성 요소에 대한 공통 애니메이션 설정 */\n.comp-3d {\n    animation: r 2s ease-in-out infinite;\n    /* 이징을 사용한 무한 애니메이션 */\n}\n\n/* 내부 어셈블리에 대한 특정 애니메이션 이름 */\n.comp-3d--i {\n    animation-name: ri;\n    /* 'ri' 키프레임 사용 */\n}\n\n/* 외부 어셈블리에 대한 특정 애니메이션 이름 */\n.comp-3d--o {\n    animation-name: ro;\n    /* 'ro' 키프레임 사용 */\n}\n\n/* 내부 어셈블리 회전을 위한 키프레임 */\n@keyframes ri {\n\n    0%,\n    20% {\n        transform: rotateY(-0.5turn);\n        /* Y축 기준 -180도 회전 */\n    }\n\n    50% {\n        transform: none;\n        /* 50%에서 변형 없음 */\n    }\n\n    100%,\n    80% {\n        transform: rotateX(-0.5turn);\n        /* X축 기준 -180도 회전 */\n    }\n}\n\n/* 외부 어셈블리 회전을 위한 키프레임 */\n@keyframes ro {\n\n    0%,\n    35% {\n        transform: rotate(-0.5turn);\n        /* -180도 회전 */\n    }\n\n    65%,\n    100% {\n        transform: none;\n        /* 65% 및 100%에서 변형 없음 */\n    }\n}\n```\n\n- 큐브 위치 조정: 각 큐브는 scale3d 및 translate3d 속성을 사용하여 3D 공간에 배치됩니다.\n\n```js\n/* 서로 다른 위치에 큐브에 대한 변환 */\n.pos:nth-child(1) {\n    transform: scale3d(1, 1, 1) translate3d(4em, 4em, 4em);\n}\n\n:not(.pos)>.cube:nth-child(1) {\n    transform: translate3d(-4em, -4em, 0em);\n}\n\n.pos:nth-child(2) {\n    transform: scale3d(1, 1, -1) translate3d(4em, 4em, 4em);\n}\n\n:not(.pos)>.cube:nth-child(2) {\n    transform: translate3d(-4em, 0em, -4em);\n}\n\n/* 다른 큐브(3-18)에 대한 변환 */\n/* 이어서 작성... */\n```\n\n- 큐브 면: 큐브의 개별 면을 차원, 그림자, 배경색으로 스타일링합니다.\n \n\n\n\n<div class=\"content-ad\"></div>\n\n```js\n/* 큐브 면에 대한 스타일 */\n.cube__face {\n    margin: -2em;\n    width: 4em;\n    height: 4em;\n    box-shadow: 0 0 2em rgba(220, 220, 220, 0.5) inset;\n    /* 깊이 효과를 위한 내부 그림자 */\n    backface-visibility: hidden;\n    /* 회전될 때 뒷면 숨김 */\n    background: rgb(222, 238, 253);\n    /* 연한 파란색 배경 */\n}\n\n/* 짝수 번째 면에 대한 약간의 밝기 조정 */\n.cube__face:nth-child(2n) {\n    filter: brightness(0.97);\n}\n\n/* 5번 이상의 인덱스를 가진 면에 대한 약간의 밝기 증가 */\n.cube__face:nth-child(n + 5) {\n    filter: brightness(1.03);\n}\n\n/* 각 면의 위치를 조정하기 위한 변환 */\n.cube__face:nth-child(1) {\n    transform: rotateY(0deg) translateZ(2em);\n    /* 앞면 */\n}\n\n.cube__face:nth-child(2) {\n    transform: rotateY(90deg) translateZ(2em);\n    /* 오른쪽 면 */\n}\n\n.cube__face:nth-child(3) {\n    transform: rotateY(180deg) translateZ(2em);\n    /* 뒷면 */\n}\n\n.cube__face:nth-child(4) {\n    transform: rotateY(270deg) translateZ(2em);\n    /* 왼쪽 면 */\n}\n\n.cube__face:nth-child(5) {\n    transform: rotateX(90deg) translateZ(2em);\n    /* 위쪽 면 */\n}\n\n.cube__face:nth-child(6) {\n    transform: rotateX(-90deg) translateZ(2em);\n    /* 아래쪽 면 */\n}\n```\n\n- 큐브 이동 애니메이션: 특정 큐브를 어셈블리 내에서 움직일 수 있게 애니메이션을 추가함으로써 동적인 터치를 더할 수 있습니다.\n\n```js\n/* 'pos' 요소 내에서 큐브 이동을 위한 키프레임 */\n@keyframes m {\n\n    0%,\n    5%,\n    95%,\n    100% {\n        transform: none;\n        /* 시작, 5%, 95%, 끝에서 변환 없음 */\n    }\n\n    15% {\n        transform: translate3d(0, 4em, 0);\n        /* 4em만큼 위로 이동 */\n    }\n\n    25% {\n        transform: translate3d(0, 4em, 4em);\n        /* 4em만큼 위로 이동하고 앞쪽으로 이동 */\n    }\n\n    35%,\n    65% {\n        transform: translate3d(4em, 4em, 4em);\n        /* 대각선으로 위쪽, 앞쪽, 오른쪽으로 이동 */\n    }\n\n    75% {\n        transform: translate3d(4em, 0, 4em);\n        /* 원래 높이에서 아래쪽으로, 앞쪽으로, 오른쪽으로 이동 */\n    }\n\n    85% {\n        transform: translate3d(4em, 0, 0);\n        /* 원래 위치로 이동 */\n    }\n}\n```\n\n# 단계 4: 실행하고 마법을 확인하세요!\n\n\n<div class=\"content-ad\"></div>\n\nHTML과 CSS 파일을 설정한 후 웹 브라우저에서 HTML 파일을 열어보세요. 움직이는 큐브 로더가 작동하는 것을 볼 수 있을 거에요! CSS 파일에서 스타일을 실험하여 웹사이트의 색상, 크기 및 애니메이션을 맞춤 설정해보세요.\n\n![애니메이션 큐브로더](https://miro.medium.com/v2/resize:fit:1200/1*cligSzXsdw0TaX5dq5uToA.gif)\n\n# 기본 이상으로:\n\n이것은 출발점에 불과해요! 큐브로더를 더 발전시킬 수도 있어요:\n\n<div class=\"content-ad\"></div>\n\n- 입체 그림자 효과를 더해보세요.\n- 다양한 색상과 그라데이션을 활용하여 더 생생한 느낌을 연출해보세요.\n- 사용자에게 추가적인 피드백을 제공하기 위해 로딩 메시지나 진행률 바를 포함해보세요.\n\n# 저와 연락해요\n\n언제든 연락 주세요! 이 프로젝트나 프론트엔드 개발에 대한 질문이 있으시면 언제든 연락주세요.\n\n저와 연락하기: 지금 연락하기\n\n<div class=\"content-ad\"></div>\n\n# 행복한 코딩!\n\n이 블로그 포스트는 애니메이션 큐브 로더를 만드는 방법을 안내해줍니다. 이를 통해 #100DaysOfCode 챌린지의 일환으로 코딩 여정을 멋지고 유익하게 선보일 수 있는 방법을 제공합니다. 또한 독자들이 코드를 다운로드하거나 추가 학습을 위해 연락할 수 있도록 하는 콜 투 액션도 포함되어 있습니다.","ogImage":{"url":"/assets/img/2024-05-17-EnhanceYourWebsitewithaBeautifulCubeLoaderAnimationUsingHTMLCSS_0.png"},"coverImage":"/assets/img/2024-05-17-EnhanceYourWebsitewithaBeautifulCubeLoaderAnimationUsingHTMLCSS_0.png","tag":["Tech"],"readingTime":7},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1200/1*CSMMFDfA44hUID0Shg5rJg.gif\",\n        alt: \"Loading Animation\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지루한 로딩 막대를 응시하면서 더 빨리 움직이기를 희망한 적이 있나요? 우리 모두 그런 경험이 있습니다. 그런데 만약 당신의 웹사이트가 뒷 배경에서 콘텐츠를 로딩하는 동안에도 시각적으로 매력적인 애니메이션으로 사용자들을 매료시킬 수 있다면 어떨까요? 그것이 바로 애니메이션 큐브 로더입니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 단계별 가이드는 HTML과 CSS를 사용하여 세련되고 동적인 애니메이션 큐브 로더를 만드는 방법을 안내해줍니다. 이 프로젝트는 제 #100DaysOfCode 챌린지의 일환이며, 정말 멋진 것을 구축하는 동안 프론트엔드 개발 스킬을 연습하기에 최적의 방법입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"준비가 되셨나요? 시작해봅시다!\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 1: 스타터 코드 다운로드 (선택 사항)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"프로젝트를 빠르게 시작하기 위해, 애니메이션된 큐브 로더를 위한 미리 작성된 HTML 및 CSS 코드를 다운로드할 수 있습니다. 이것은 구조를 확인하고 모든 부분이 어떻게 함께 작동하는지 알아보는 좋은 방법입니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"여기서 소스 코드를 다운로드하세요: \", _jsx(_components.a, {\n        href: \"%EB%A7%81%ED%81%AC\",\n        children: \"소스 코드\"\n      })]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 2: HTML 구조 설정\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HTML 코드는 애니메이션의 기본 구성 요소를 제공합니다. 우리는 큐브의 컨테이너를 만들기 위해 div 요소들의 시리즈를 사용할 것입니다. 그리고 각 큐브 자체를 정의하기 위해 개별 div 요소들을 사용할 것입니다. 각 큐브 요소 안에는 큐브의 여섯 면을 나타내는 자식 div 요소들이 있을 것입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DOCTYPE\"\n        }), \" html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n    <!-- Metadata와 CSS 파일 링크 -->\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\">\\n    <title>Animated Cube Loader</title>\\n</head>\\n\\n<body>\\n    <!-- 큐브 조립을 위한 컨테이너 -->\\n\\n</body>\\n\\n</html>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"    <div \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"assembly\\\"\"\n        }), \">\\n        <!-- 첫 번째 3D 구성 요소 세트 (내부 조립) -->\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"comp-3d comp-3d--i\\\"\"\n            }), \">\"]\n          }), \"\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!-- 각 큐브는 'cube__face' 클래스를 가진 div로 표현된 여섯 면을 가지고 있습니다. -->\"\n          }), \"\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!-- 첫 번째 큐브 -->\"\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"cube\\\"\"\n            }), \">\"]\n          }), \"\\n                \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"cube__face\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n                \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"cube__face\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n                \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"cube__face\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n                \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"cube__face\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n                \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"cube__face\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n                \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"cube__face\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!-- 추가 큐브들은 동일한 구조를 따릅니다. -->\"\n          }), \"\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!-- 큐브 2부터 큐브 18까지 (동일한 구조) -->\"\n          }), \"\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!-- 이하 생략 -->\"\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n\\n        <!-- 두 번째 3D 구성 요소 세트 (외부 조립) -->\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"comp-3d comp-3d--o\\\"\"\n            }), \">\"]\n          }), \"\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!-- 각 pos 요소는 하나의 큐브를 포함합니다. -->\"\n          }), \"\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!-- Position 1 -->\"\n          }), \"\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!-- 이하 생략 -->\"\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n    </div>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Step 3: Adding Styles with CSS\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"CSS에서 마법이 일어납니다! 여기에 몇 가지 주요 측면을 살펴보겠습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"일반 설정: 우리는 body 요소에 대한 스타일을 정의할 것입니다. 오버플로우 방지, 높이 설정, 3D 효과를 위한 perspective 생성 등이 포함됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 오버플로우 방지, 마진 제거, 높이 설정 및 perspective 생성을 위한 일반 body 설정 */\"\n        }), \"\\nbody {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"overflow\"\n        }), \": hidden;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"margin\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": 100vh;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"perspective\"\n        }), \": 32em;\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 3D 효과를 위한 perspective 거리 */\"\n        }), \"\\n    background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"image\"\n        }), \": linear-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"gradient\"\n        }), \"(to right, #\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"434343\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"%, black \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \"%);\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 배경 그라데이션 */\"\n        }), \"\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 모든 div 요소에 대한 일반 설정: 절대 위치 지정 및 3D 변형 보존 */\"\n        }), \"\\ndiv {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"position\"\n        }), \": absolute;\\n    transform-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"style\"\n        }), \": preserve-3d;\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 자식 요소가 3D 공간에서 변형되도록 보장 */\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"조립과 애니메이션: 주요 컨테이너에 스타일을 적용하고, inner 및 outer 큐브 그룹에 대한 애니메이션을 만들기 위해 keyframes를 사용할 것입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 주 어셈블리 컨테이너 중앙 정렬 및 초기 회전 */\"\n        }), \"\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"assembly\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"top\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \"%;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"left\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \"%;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rotateX\"\n        }), \"(-45deg) \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rotateY\"\n        }), \"(-45deg);\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 초기 3D 회전 */\"\n        }), \"\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 3D 구성 요소에 대한 공통 애니메이션 설정 */\"\n        }), \"\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"comp\"\n        }), \"-3d {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"animation\"\n        }), \": r 2s ease-\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \"-out infinite;\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 이징을 사용한 무한 애니메이션 */\"\n        }), \"\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 내부 어셈블리에 대한 특정 애니메이션 이름 */\"\n        }), \"\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"comp\"\n        }), \"-3d--i {\\n    animation-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": ri;\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 'ri' 키프레임 사용 */\"\n        }), \"\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 외부 어셈블리에 대한 특정 애니메이션 이름 */\"\n        }), \"\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"comp\"\n        }), \"-3d--o {\\n    animation-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": ro;\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 'ro' 키프레임 사용 */\"\n        }), \"\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 내부 어셈블리 회전을 위한 키프레임 */\"\n        }), \"\\n@keyframes ri {\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"%,\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \"% {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rotateY\"\n        }), \"(-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"5turn);\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* Y축 기준 -180도 회전 */\"\n        }), \"\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \"% {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": none;\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 50%에서 변형 없음 */\"\n        }), \"\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \"%,\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"80\"\n        }), \"% {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rotateX\"\n        }), \"(-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"5turn);\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* X축 기준 -180도 회전 */\"\n        }), \"\\n    }\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 외부 어셈블리 회전을 위한 키프레임 */\"\n        }), \"\\n@keyframes ro {\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"%,\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"35\"\n        }), \"% {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rotate\"\n        }), \"(-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"5turn);\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* -180도 회전 */\"\n        }), \"\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"65\"\n        }), \"%,\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \"% {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": none;\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 65% 및 100%에서 변형 없음 */\"\n        }), \"\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"큐브 위치 조정: 각 큐브는 scale3d 및 translate3d 속성을 사용하여 3D 공간에 배치됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 서로 다른 위치에 큐브에 대한 변환 */\"\n        }), \"\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pos\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          })\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"scale3d\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translate3d\"\n        }), \"(4em, 4em, 4em);\\n}\\n\\n:\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"not\"\n        }), \"(.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pos\"\n        }), \")>.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cube\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          })\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translate3d\"\n        }), \"(-4em, -4em, 0em);\\n}\\n\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pos\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"2\"\n          })\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"scale3d\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translate3d\"\n        }), \"(4em, 4em, 4em);\\n}\\n\\n:\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"not\"\n        }), \"(.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pos\"\n        }), \")>.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cube\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"2\"\n          })\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translate3d\"\n        }), \"(-4em, 0em, -4em);\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 다른 큐브(3-18)에 대한 변환 */\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 이어서 작성... */\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"큐브 면: 큐브의 개별 면을 차원, 그림자, 배경색으로 스타일링합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 큐브 면에 대한 스타일 */\"\n        }), \"\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cube__face\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"margin\"\n        }), \": -2em;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"width\"\n        }), \": 4em;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": 4em;\\n    box-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"shadow\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \" 2em \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rgba\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"220\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"220\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"220\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.5\"\n        }), \") inset;\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 깊이 효과를 위한 내부 그림자 */\"\n        }), \"\\n    backface-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"visibility\"\n        }), \": hidden;\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 회전될 때 뒷면 숨김 */\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"background\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rgb\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"222\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"238\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"253\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 연한 파란색 배경 */\"\n        }), \"\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 짝수 번째 면에 대한 약간의 밝기 조정 */\"\n        }), \"\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cube__face\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"2n\"\n          })\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"filter\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"brightness\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.97\"\n        }), \");\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 5번 이상의 인덱스를 가진 면에 대한 약간의 밝기 증가 */\"\n        }), \"\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cube__face\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-params\",\n          children: [\"n + \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"5\"\n          })]\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"filter\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"brightness\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.03\"\n        }), \");\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 각 면의 위치를 조정하기 위한 변환 */\"\n        }), \"\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cube__face\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          })\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rotateY\"\n        }), \"(0deg) \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translateZ\"\n        }), \"(2em);\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 앞면 */\"\n        }), \"\\n}\\n\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cube__face\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"2\"\n          })\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rotateY\"\n        }), \"(90deg) \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translateZ\"\n        }), \"(2em);\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 오른쪽 면 */\"\n        }), \"\\n}\\n\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cube__face\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"3\"\n          })\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rotateY\"\n        }), \"(180deg) \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translateZ\"\n        }), \"(2em);\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 뒷면 */\"\n        }), \"\\n}\\n\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cube__face\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"4\"\n          })\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rotateY\"\n        }), \"(270deg) \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translateZ\"\n        }), \"(2em);\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 왼쪽 면 */\"\n        }), \"\\n}\\n\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cube__face\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"5\"\n          })\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rotateX\"\n        }), \"(90deg) \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translateZ\"\n        }), \"(2em);\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 위쪽 면 */\"\n        }), \"\\n}\\n\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cube__face\"\n        }), \":nth-\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"child\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"6\"\n          })\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rotateX\"\n        }), \"(-90deg) \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translateZ\"\n        }), \"(2em);\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 아래쪽 면 */\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"큐브 이동 애니메이션: 특정 큐브를 어셈블리 내에서 움직일 수 있게 애니메이션을 추가함으로써 동적인 터치를 더할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 'pos' 요소 내에서 큐브 이동을 위한 키프레임 */\"\n        }), \"\\n@keyframes m {\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"%,\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \"%,\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"95\"\n        }), \"%,\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \"% {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": none;\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 시작, 5%, 95%, 끝에서 변환 없음 */\"\n        }), \"\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"15\"\n        }), \"% {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translate3d\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", 4em, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 4em만큼 위로 이동 */\"\n        }), \"\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"25\"\n        }), \"% {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translate3d\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", 4em, 4em);\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 4em만큼 위로 이동하고 앞쪽으로 이동 */\"\n        }), \"\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"35\"\n        }), \"%,\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"65\"\n        }), \"% {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translate3d\"\n        }), \"(4em, 4em, 4em);\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 대각선으로 위쪽, 앞쪽, 오른쪽으로 이동 */\"\n        }), \"\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"75\"\n        }), \"% {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translate3d\"\n        }), \"(4em, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", 4em);\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 원래 높이에서 아래쪽으로, 앞쪽으로, 오른쪽으로 이동 */\"\n        }), \"\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"85\"\n        }), \"% {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transform\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"translate3d\"\n        }), \"(4em, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 원래 위치로 이동 */\"\n        }), \"\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 4: 실행하고 마법을 확인하세요!\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HTML과 CSS 파일을 설정한 후 웹 브라우저에서 HTML 파일을 열어보세요. 움직이는 큐브 로더가 작동하는 것을 볼 수 있을 거에요! CSS 파일에서 스타일을 실험하여 웹사이트의 색상, 크기 및 애니메이션을 맞춤 설정해보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1200/1*cligSzXsdw0TaX5dq5uToA.gif\",\n        alt: \"애니메이션 큐브로더\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"기본 이상으로:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것은 출발점에 불과해요! 큐브로더를 더 발전시킬 수도 있어요:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"입체 그림자 효과를 더해보세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다양한 색상과 그라데이션을 활용하여 더 생생한 느낌을 연출해보세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"사용자에게 추가적인 피드백을 제공하기 위해 로딩 메시지나 진행률 바를 포함해보세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"저와 연락해요\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"언제든 연락 주세요! 이 프로젝트나 프론트엔드 개발에 대한 질문이 있으시면 언제든 연락주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저와 연락하기: 지금 연락하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"행복한 코딩!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 블로그 포스트는 애니메이션 큐브 로더를 만드는 방법을 안내해줍니다. 이를 통해 #100DaysOfCode 챌린지의 일환으로 코딩 여정을 멋지고 유익하게 선보일 수 있는 방법을 제공합니다. 또한 독자들이 코드를 다운로드하거나 추가 학습을 위해 연락할 수 있도록 하는 콜 투 액션도 포함되어 있습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}