{"pageProps":{"post":{"title":"러스트 트레이트 TypeScript 인터페이스의 강력한 대안","description":"","date":"2024-05-20 21:42","slug":"2024-05-20-RustTraitAPowerfulAlternativeToTypeScriptInterface","content":"\n\n\n![RustTraitAPowerfulAlternativeToTypeScriptInterface](/assets/img/2024-05-20-RustTraitAPowerfulAlternativeToTypeScriptInterface_0.png)\n\nRust은 인터페이스 개념을 갖고 있지만, 다른 프로그래밍 언어들과는 다르게 클래스와 함수의 동작을 지정하기 위해 인터페이스 키워드를 사용하지 않습니다. 대신, Rust의 가장 가까운 추상화 패턴은 트레이트입니다. 이러한 개념들은 많은 차이가 있지만, 둘 다 다중 가능한 구현을 다루는 문제를 해결합니다.\n\n이 블로그 포스트에서는 TypeScript 코드 조각과 잠재적인 Rust 동등 코드를 비교하여 간단하고 유연하며 조립 가능한 코드를 어떻게 구현하는지를 보여줄 것입니다.\n\n# 선언\n\n\n<div class=\"content-ad\"></div>\n\n이는 데이터베이스에 문서 및 이미지를 저장하고 나열하는 프로젝트를 상상해 봅시다. 두 유형의 파일이 동일한 저장소에 저장되고 공통 특성을 공유하기 때문에 공통 정보를 공유하기 위해 인터페이스를 사용할 수 있습니다.\n\n인터페이스를 사용하면 공통 속성 및 메소드를 정의하여 어느 유형의 파일과도 작업할 수 있는 코드를 쉽게 작성할 수 있습니다.\n\nTypeScript에서는 이러한 인터페이스를 다음과 같이 정의할 수 있습니다:\n\n```js\ninterface Entity {\n    id: string;\n    timestamp: number;\n}\n\ninterface Document extends Entity {\n    revised: boolean;\n}\n\ninterface Image extends Entity {\n    type: string;\n}\n```\n\n<div class=\"content-ad\"></div>\n\nRust에서는 상속이 없기 때문에 가장 간단한 대응 구현은 타입을 복제해야 한다.\n\n```js\nstruct Document {\n    id: String,\n    timestamp: u64,\n    revised: bool,\n}\n\nstruct Image {\n    id: String,\n    timestamp: u64,\n    mime_type: String,\n}\n```\n\n# 상속 및 제네릭\n\n이제 특정 문서 또는 이미지를 찾고 싶은 시나리오를 고려해보겠습니다. TypeScript에서는 다음과 같은 코드로 이를 수행할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst getDocument = (\n id: string,\n documents: Document[]\n): Document | undefined =>\n documents.find(({ id: docId }) => docId === id);\n\nconst getImages = (\n id: string,\n images: Image[]\n): Image | undefined =>\n images.find(({ id: imageId }) => imageId === id);\n```\n\n하지만 두 함수가 동일한 인터페이스를 구현하기 때문에 중복을 피할 수 있습니다. 제네릭 함수를 추출하여 코드 중복을 피는 것이 좋습니다:\n\n```js\nconst get = <T extends Entity>(\n id: string,\n elements: T[]\n): T | undefined =>\n elements.find(({ id: elementId }) => elementId === id);\n\nconst getDocument = (\n id: string,\n documents: Document[]\n): Document | undefined => get<Document>(id, documents);\n\nconst getImages = (\n id: string,\n images: Image[]\n): Image | undefined => get<Image>(id, images);\n```\n\nRust에서 동일한 기능을 구현하는 경우 초기에는 코드를 중복해야 합니다:```\n\n<div class=\"content-ad\"></div>\n\n```rs\nfn get_document(id: String, documents: Vec<Document>) -> Option<Document> {\n    documents.into_iter().find(|document| document.id == id)\n}\n\nfn get_image(id: String, images: Vec<Image>) -> Option<Image> {\n    images.into_iter().find(|image| image.id == id)\n}\n```\n\n위에서 보듯이 Rust 코드는 TypeScript 구현과 매우 유사합니다. 그러나 Rust에는 상속이나 인터페이스 키워드가 없기 때문에 중복을 피하기 위해 위의 패턴을 정확히 복제할 수 없습니다. 여기서 트레잇이 나옵니다.\n\n이 특정 예에서 문서 및 이미지 두 객체 모두 공유하는 공통 특성은 ID를 사용하여 비교할 수 있다는 것입니다. 이것이 우리가 이러한 특성을 트레잇으로 선언하고 각 구조체에 대한 해당 구현을 제공할 수 있는 이유입니다.\n\n```rs\ntrait Compare {\n    fn compare(&self, id: &str) -> bool;\n}\n\nimpl Compare for Document {\n    fn compare(&self, id: &str) -> bool {\n        self.id == id\n    }\n}\n\nimpl Compare for Image {\n    fn compare(&self, id: &str) -> bool {\n        self.id == id\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n마침내 러스트에서 공통 코드를 일반 함수로 추출할 수 있게 되었습니다. 이전에 TypeScript에서 했던 것처럼요.\n\n```js\nfn get<T: Compare>(id: String, elements: Vec<T>) -> Option<T> {\n    elements.into_iter().find(|element| element.compare(&id))\n}\n\nfn get_document(id: String, documents: Vec<Document>) -> Option<Document> {\n    get(id, documents)\n}\n\nfn get_image(id: String, images: Vec<Image>) -> Option<Image> {\n    get(id, images)\n}\n```\n\n또한 러스트에서는 트레이트를 “+” 기호로 결합하여 여러 공통 특성을 정의할 수 있습니다. 예를 들어:\n\n```js\nfn get<T: Compare + OtherTrait>(id: String, elements: Vec<T>) -> Option<T> {\n    elements\n        .into_iter()\n        .find(|element| element.compare(&id) && element.other_trait(&id))\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이러한 패턴은 두 개의 매개변수가 동일한 구조체와 관련될 수 있기 때문에 객체를 비교하는 구현도 흥미로울 수 있습니다.\n\n```rust\ntrait Compare {\n    fn sort(&self, other: &Self) -> Ordering;\n}\n\nimpl Compare for Document {\n    fn sort(&self, other: &Self) -> Ordering {\n        self.timestamp.cmp(&other.timestamp)\n    }\n}\n```\n\n# 결론\n\n우리는 트레이트가 제공할 수 있는 강력함의 일부만 살펴봤지만, 저와 같이 러스트를 탐색하고 있는 자바스크립트 개발자들에게 이 간단한 튜토리얼이 유용할 것이라고 희망합니다.\n\n<div class=\"content-ad\"></div>\n\n무한한 여정이 시작됩니다\n데이비드\n\n더 많은 모험을 원하시면 트위터에서 제 계정을 팔로우해주세요.","ogImage":{"url":"/assets/img/2024-05-20-RustTraitAPowerfulAlternativeToTypeScriptInterface_0.png"},"coverImage":"/assets/img/2024-05-20-RustTraitAPowerfulAlternativeToTypeScriptInterface_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-RustTraitAPowerfulAlternativeToTypeScriptInterface_0.png\",\n        alt: \"RustTraitAPowerfulAlternativeToTypeScriptInterface\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Rust은 인터페이스 개념을 갖고 있지만, 다른 프로그래밍 언어들과는 다르게 클래스와 함수의 동작을 지정하기 위해 인터페이스 키워드를 사용하지 않습니다. 대신, Rust의 가장 가까운 추상화 패턴은 트레이트입니다. 이러한 개념들은 많은 차이가 있지만, 둘 다 다중 가능한 구현을 다루는 문제를 해결합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 블로그 포스트에서는 TypeScript 코드 조각과 잠재적인 Rust 동등 코드를 비교하여 간단하고 유연하며 조립 가능한 코드를 어떻게 구현하는지를 보여줄 것입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"선언\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이는 데이터베이스에 문서 및 이미지를 저장하고 나열하는 프로젝트를 상상해 봅시다. 두 유형의 파일이 동일한 저장소에 저장되고 공통 특성을 공유하기 때문에 공통 정보를 공유하기 위해 인터페이스를 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"인터페이스를 사용하면 공통 속성 및 메소드를 정의하여 어느 유형의 파일과도 작업할 수 있는 코드를 쉽게 작성할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"TypeScript에서는 이러한 인터페이스를 다음과 같이 정의할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"interface \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Entity\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": string;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"timestamp\"\n        }), \": number;\\n}\\n\\ninterface \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Document\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Entity\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"revised\"\n        }), \": boolean;\\n}\\n\\ninterface \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Entity\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": string;\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Rust에서는 상속이 없기 때문에 가장 간단한 대응 구현은 타입을 복제해야 한다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"struct \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Document\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"timestamp\"\n        }), \": u64,\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"revised\"\n        }), \": bool,\\n}\\n\\nstruct \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"timestamp\"\n        }), \": u64,\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"mime_type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \",\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"상속 및 제네릭\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 특정 문서 또는 이미지를 찾고 싶은 시나리오를 고려해보겠습니다. TypeScript에서는 다음과 같은 코드로 이를 수행할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" getDocument = (\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": string,\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"documents\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Document\"\n        }), \"[]\\n): \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Document\"\n        }), \" | \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"undefined\"\n          }), \" =>\"]\n        }), \"\\n documents.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"{ id: docId }\"\n          }), \") =>\"]\n        }), \" docId === id);\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" getImages = (\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": string,\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"images\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \"[]\\n): \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \" | \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"undefined\"\n          }), \" =>\"]\n        }), \"\\n images.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"{ id: imageId }\"\n          }), \") =>\"]\n        }), \" imageId === id);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 두 함수가 동일한 인터페이스를 구현하기 때문에 중복을 피할 수 있습니다. 제네릭 함수를 추출하여 코드 중복을 피는 것이 좋습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" get = <T \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Entity\"\n        }), \">(\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": string,\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"elements\"\n        }), \": T[]\\n): T | \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"undefined\"\n          }), \" =>\"]\n        }), \"\\n elements.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"{ id: elementId }\"\n          }), \") =>\"]\n        }), \" elementId === id);\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" getDocument = (\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": string,\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"documents\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Document\"\n        }), \"[]\\n): \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Document\"\n        }), \" | \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"undefined\"\n          }), \" =>\"]\n        }), \" get<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Document\"\n        }), \">(id, documents);\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" getImages = (\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": string,\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"images\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \"[]\\n): \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \" | \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"undefined\"\n          }), \" =>\"]\n        }), \" get<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \">(id, images);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Rust에서 동일한 기능을 구현하는 경우 초기에는 코드를 중복해야 합니다:```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rs\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_document\"\n        }), \"(id: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"String\"\n        }), \", documents: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Vec\"\n        }), \"<Document>) \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Option\"\n        }), \"<Document> {\\n    documents.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"into_iter\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"find\"\n        }), \"(|document| document.id == id)\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_image\"\n        }), \"(id: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"String\"\n        }), \", images: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Vec\"\n        }), \"<Image>) \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Option\"\n        }), \"<Image> {\\n    images.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"into_iter\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"find\"\n        }), \"(|image| image.id == id)\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위에서 보듯이 Rust 코드는 TypeScript 구현과 매우 유사합니다. 그러나 Rust에는 상속이나 인터페이스 키워드가 없기 때문에 중복을 피하기 위해 위의 패턴을 정확히 복제할 수 없습니다. 여기서 트레잇이 나옵니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 특정 예에서 문서 및 이미지 두 객체 모두 공유하는 공통 특성은 ID를 사용하여 비교할 수 있다는 것입니다. 이것이 우리가 이러한 특성을 트레잇으로 선언하고 각 구조체에 대한 해당 구현을 제공할 수 있는 이유입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rs\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"trait\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Compare\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"compare\"\n        }), \"(&\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \", id: &\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"str\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"bool\"\n        }), \";\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"impl\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Compare\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Document\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"compare\"\n        }), \"(&\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \", id: &\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"str\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"bool\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \".id == id\\n    }\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"impl\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Compare\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"compare\"\n        }), \"(&\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \", id: &\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"str\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"bool\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \".id == id\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마침내 러스트에서 공통 코드를 일반 함수로 추출할 수 있게 되었습니다. 이전에 TypeScript에서 했던 것처럼요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"fn get<\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"T\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Compare\"\n        }), \">(\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"elements\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Vec\"\n        }), \"<T>) -> \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Option\"\n        }), \"<T> {\\n    elements.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"into_iter\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"(|element| element.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"compare\"\n        }), \"(&id))\\n}\\n\\nfn \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_document\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"documents\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Vec\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Document\"\n        }), \">) -> \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Option\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Document\"\n        }), \"> {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(id, documents)\\n}\\n\\nfn \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_image\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"images\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Vec\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \">) -> \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Option\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Image\"\n        }), \"> {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(id, images)\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한 러스트에서는 트레이트를 “+” 기호로 결합하여 여러 공통 특성을 정의할 수 있습니다. 예를 들어:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"fn get<\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"T\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Compare\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OtherTrait\"\n        }), \">(\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"elements\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Vec\"\n        }), \"<T>) -> \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Option\"\n        }), \"<T> {\\n    elements\\n        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"into_iter\"\n        }), \"()\\n        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"(|element| element.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"compare\"\n        }), \"(&id) && element.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"other_trait\"\n        }), \"(&id))\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 패턴은 두 개의 매개변수가 동일한 구조체와 관련될 수 있기 때문에 객체를 비교하는 구현도 흥미로울 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"trait\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Compare\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sort\"\n        }), \"(&\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \", other: &\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"Self\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" Ordering;\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"impl\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Compare\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Document\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sort\"\n        }), \"(&\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \", other: &\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"Self\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" Ordering {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \".timestamp.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"cmp\"\n        }), \"(&other.timestamp)\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 트레이트가 제공할 수 있는 강력함의 일부만 살펴봤지만, 저와 같이 러스트를 탐색하고 있는 자바스크립트 개발자들에게 이 간단한 튜토리얼이 유용할 것이라고 희망합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"무한한 여정이 시작됩니다\\n데이비드\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 많은 모험을 원하시면 트위터에서 제 계정을 팔로우해주세요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}