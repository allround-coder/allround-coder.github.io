{"pageProps":{"post":{"title":"Angular에서 간단한 코드로 SCSS를 활용해 트리 계층구조를 만드는 방법","description":"","date":"2024-05-17 20:59","slug":"2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding","content":"\n\n\n![Tree Hierarchy Example](/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_0.png)\n\n한 가지 문자열 배열이 있다고 가정해봅시다. 만약 우리가 문자열 배열을 트리 구조로 그리고 싶다면, 어떻게 할 수 있을까요? 함께 살펴보겠습니다.\n\n![Tree Hierarchy Example](/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_1.png)\n\n# 단계 1:\n\n\n<div class=\"content-ad\"></div>\n\n샘플 Angular 애플리케이션을 cmd를 사용하여 생성합니다.\n\n# 단계 2:\n\ntreeData 배열을 생성하고 기본값으로 초기화합니다.\n\n```js\n//app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n\n  treeData:string[];\n\n  constructor() {\n    this.treeData = [\n      'Root',\n      'Node1',\n      'Node2',\n      'Node3'\n    ];\n  }\n\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 3:\n\nSCSS 파일에 믹스인 함수를 만드세요.\n\n```scss\n//app.component.scss\n\n@mixin generate($prefix, $property, $length) {\n  $spacing: 20px;\n  @for $i from 1 through $length {\n    .#{$prefix}-#{$i} {\n      #{$property}: $spacing * $i;\n    }\n  }\n}\n \n@include generate(li, margin-left, 20);\n```\n\n믹스인을 사용하면 스타일을 정의하고 스타일 시트 전체에서 재사용할 수 있습니다. 이를 통해 .float-left와 같은 의미 없는 클래스를 사용하는 것을 피하고 스타일 모음을 라이브러리로 분배하는 것이 쉬워집니다.\n\n<div class=\"content-ad\"></div>\n\n자세히 보기: https://sass-lang.com/documentation/at-rules/mixin/\n\n`generate()` 함수는 주어진 접두사, 속성 및 길이로 여러 클래스를 생성하는 데 사용됩니다. 'li', 'margin-left', '20'을 전달하면 다음과 같은 클래스가 생성됩니다.\n\n```js\n.li-1 {\n  margin-left: 20px;\n}\n\n.li-2 {\n  margin-left: 40px;\n}\n\n.li-3 {\n  margin-left: 60px;\n}\n...\n...\n...\n.li-20 {\n  margin-left: 400px;\n}\n```\n\n이 클래스를 사용하여 각 반복에서 왼쪽 마진을 증가시킵니다.\n\n<div class=\"content-ad\"></div>\n\n# 단계 4:\n\n`ul` 및 `li` 태그를 사용하여 HTML 파일에 목록을 만들고 `li` 태그에 *ngFor를 추가합니다.\n\n```js\n<ul>\n  <li *ngFor=\"let data of treeData;index as i\" [ngClass]=\"'li-'+i\">\n    {data}\n  </li>\n</ul>\n```\n\n여기서 `[ngClass]=”’li-’+i”`를 추가했습니다. 각 반복마다 동적으로 생성된 클래스를 사용한다는 의미입니다.\n\n<div class=\"content-ad\"></div>\n\n\n[ngClass]=\"'li-1'\"\n[ngClass]=\"'li-2'\"\n[ngClass]=\"'li-3'\"\n[ngClass]=\"'li-4'\"\n....\n....\n[ngClass]=\"'li-20'\"\n\n# Step 5:\n\n코드를 실행하고 즐기세요!\n\n코딩을 즐기세요!!!\n","ogImage":{"url":"/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_0.png"},"coverImage":"/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_0.png\",\n        alt: \"Tree Hierarchy Example\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"한 가지 문자열 배열이 있다고 가정해봅시다. 만약 우리가 문자열 배열을 트리 구조로 그리고 싶다면, 어떻게 할 수 있을까요? 함께 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_1.png\",\n        alt: \"Tree Hierarchy Example\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 1:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"샘플 Angular 애플리케이션을 cmd를 사용하여 생성합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 2:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"treeData 배열을 생성하고 기본값으로 초기화합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//app.component.ts\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@angular/core'\"\n        }), \";\\n\\n@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'my-app'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"templateUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./app.component.html'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"styleUrls\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./app.component.scss'\"\n        }), \"],\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AppComponent\"\n        }), \" {\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"treeData\"\n        }), \":string[];\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"treeData\"\n        }), \" = [\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Root'\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Node1'\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Node2'\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Node3'\"\n        }), \"\\n    ];\\n  }\\n\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 3:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SCSS 파일에 믹스인 함수를 만드세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-scss\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//app.component.scss\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"@mixin\"\n        }), \" generate(\", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$prefix\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$property\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$length\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$spacing\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20px\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"@for\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$i\"\n        }), \" from \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" through \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$length\"\n        }), \" {\\n    .#{\", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$prefix\"\n        }), \"}-#{\", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$i\"\n        }), \"} {\\n      #{\", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$property\"\n        }), \"}: \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$spacing\"\n        }), \" * \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$i\"\n        }), \";\\n    }\\n  }\\n}\\n \\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"@include\"\n        }), \" generate(li, margin-left, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \");\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"믹스인을 사용하면 스타일을 정의하고 스타일 시트 전체에서 재사용할 수 있습니다. 이를 통해 .float-left와 같은 의미 없는 클래스를 사용하는 것을 피하고 스타일 모음을 라이브러리로 분배하는 것이 쉬워집니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자세히 보기: https://sass-lang.com/documentation/at-rules/mixin/\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"generate()\"\n      }), \" 함수는 주어진 접두사, 속성 및 길이로 여러 클래스를 생성하는 데 사용됩니다. 'li', 'margin-left', '20'을 전달하면 다음과 같은 클래스가 생성됩니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"li\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" {\\n  margin-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"left\"\n        }), \": 20px;\\n}\\n\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"li\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \" {\\n  margin-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"left\"\n        }), \": 40px;\\n}\\n\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"li\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \" {\\n  margin-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"left\"\n        }), \": 60px;\\n}\\n...\\n...\\n...\\n.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"li\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \" {\\n  margin-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"left\"\n        }), \": 400px;\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 클래스를 사용하여 각 반복에서 왼쪽 마진을 증가시킵니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 4:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ul\"\n      }), \" 및 \", _jsx(_components.code, {\n        children: \"li\"\n      }), \" 태그를 사용하여 HTML 파일에 목록을 만들고 \", _jsx(_components.code, {\n        children: \"li\"\n      }), \" 태그에 *ngFor를 추가합니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<ul>\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \" *\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ngFor\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"let data of treeData;index as i\\\"\"\n            }), \" [\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ngClass\"\n            }), \"]=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"'li-'+i\\\"\"\n            }), \">\"]\n          }), \"\\n    {data}\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          })]\n        }), \"\\n</ul>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"여기서 \", _jsx(_components.code, {\n        children: \"[ngClass]=”’li-’+i”\"\n      }), \"를 추가했습니다. 각 반복마다 동적으로 생성된 클래스를 사용한다는 의미입니다.\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"[ngClass]=\\\"'li-1'\\\"\\n[ngClass]=\\\"'li-2'\\\"\\n[ngClass]=\\\"'li-3'\\\"\\n[ngClass]=\\\"'li-4'\\\"\\n....\\n....\\n[ngClass]=\\\"'li-20'\\\"\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Step 5:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드를 실행하고 즐기세요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코딩을 즐기세요!!!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}