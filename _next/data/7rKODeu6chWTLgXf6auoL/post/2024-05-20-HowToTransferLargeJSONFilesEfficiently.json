{"pageProps":{"post":{"title":"대용량 JSON 파일을 효율적으로 전송하는 방법","description":"","date":"2024-05-20 21:43","slug":"2024-05-20-HowToTransferLargeJSONFilesEfficiently","content":"\n\n<img src=\"/assets/img/2024-05-20-HowToTransferLargeJSONFilesEfficiently_0.png\" />\n\n대규모 JSON 데이터를 전송할 때, 기존 방식을 사용하면 데이터 처리를 시작하기 전에 완전한 JSON 데이터를 수신해야 하므로 사용자 경험에 영향을 줄 수 있습니다. 이 문제를 해결하기 위해 기존의 JSON 스트림 구문 분석 라이브러리를 사용할 수 있습니다. 예를 들어 내부적으로 TextDecoder API를 사용하는 @streamparser/json이 있습니다.\n\nTextDecoder API는 이진 데이터 (일반적으로 ArrayBuffer 또는 TypedArray)를 문자열로 디코딩하기 위한 JavaScript API입니다. 이는 Web 플랫폼의 일부이며 텍스트 인코딩의 디코딩을 처리하는 데 주로 사용됩니다. 예를 들어, 서버로부터 수신한 스트리밍 데이터, 파일 데이터 등을 처리하는 데 사용됩니다.\n\n# TextDecoder API 사용 이유\n\n<div class=\"content-ad\"></div>\n\n웹 애플리케이션에서 이진 데이터를 다룰 때, 이 데이터를 읽을 수 있는 문자열 형식으로 변환해야 하는 경우가 종종 있습니다. TextDecoder를 사용하면 이를 효율적이고 편리하게 할 수 있습니다.\n\nTextDecoder API에는 다음과 같은 기능이 있습니다:\n\n- 효율적: 수동으로 바이트 단위로 처리하는 것보다 효율적이며, 문자열로 직접 디코딩이 가능합니다.\n- 여러 인코딩 지원: 다양한 텍스트 인코딩(예: UTF-8, UTF-16, ISO-8859-1 등)을 지원합니다.\n- 스트리밍 처리 지원: 데이터를 조각조각으로 처리할 수 있어 대용량 데이터 스트림 또는 실시간 처리가 필요한 데이터에 적합합니다.\n\n# TextDecoder API 사용 방법\n\n<div class=\"content-ad\"></div>\n\n다음으로, TextDecoder API를 사용하는 네 가지 시나리오를 소개하겠습니다:\n\n- 서로 다른 인코딩된 바이너리 데이터 해독\n- 스트리밍 JSON 데이터 디코딩\n- 대용량 JSON 파일의 데이터 청크 디코딩\n\n## 1. 서로 다른 인코딩된 바이너리 데이터 해독\n\n```js\n// 다른 인코딩으로 TextDecoder 인스턴스 생성\nconst utf16Decoder = new TextDecoder('utf-16');\nconst iso88591Decoder = new TextDecoder('iso-8859-1');\n\nconst utf16Array = new Uint16Array([0x0048, 0x0065, 0x006C, 0x006C, 0x006F]);\nconst iso88591Array = new Uint8Array([72, 101, 108, 108, 111]);\n\n// 문자열로 디코딩\nconst utf16String = utf16Decoder.decode(utf16Array);\nconst iso88591String = iso88591Decoder.decode(iso88591Array);\n\nconsole.log(utf16String); // 출력：\"Hello\"\nconsole.log(iso88591String); // 출력：\"Hello\"\n```\n\n<div class=\"content-ad\"></div>\n\n## 2. 스트리밍 JSON 데이터 디코딩\n\n먼저, 결과를 살펴봅시다:\n\n![이미지](/assets/img/2024-05-20-HowToTransferLargeJSONFilesEfficiently_1.png)\n\n위의 예제에서는 Node.js의 http 모듈을 사용하여 로컬 SSE (서버 전송 이벤트) 서버를 빠르게 구축합니다.\n\n<div class=\"content-ad\"></div>\n\nserver.js\n\n```js\nconst http = require(\"http\");\n\nconst PORT = 3000;\n\nconst server = http.createServer((req, res) => {\n  if (req.url === \"/sse\") {\n    res.writeHead(200, {\n      \"Content-Type\": \"text/event-stream\",\n      \"Cache-Control\": \"no-cache\",\n      Connection: \"keep-alive\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Headers\":\n        \"Origin, X-Requested-With, Content-Type, Accept\",\n    });\n\n    let id = 1;\n    const interval = setInterval(() => {\n      const data = {\n        id: id,\n        message: `This is message ${id}`,\n        timestamp: +new Date(),\n      };\n      res.write(`data: ${JSON.stringify(data)}\\n\\n`);\n\n      if (id == 5) {\n        res.write(\"event: end\\n\");\n        res.write(\"data: End of stream\\n\\n\");\n        clearInterval(interval);\n        res.end();\n      }\n\n      id++;\n    }, 1000);\n\n    req.on(\"close\", () => {\n      clearInterval(interval);\n    });\n  } else {\n    res.writeHead(404, { \"Content-Type\": \"text/plain\" });\n    res.end(\"404 Not Found\");\n  }\n});\n\nserver.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n```\n\nsse 핸들러에서는 Content-Type 응답 헤더의 유형을 \"text/event-stream\"으로 설정하여 클라이언트에게 스트리밍 데이터를 반환한다는 것을 알려줍니다.\n\nindex.html\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>SSE & TextDecoder</title>\n</head>\n<body>\n    <h1>서버-전송 이벤트 JSON 스트림 데이터 디코딩</h1>\n    <div id=\"messages\"></div>\n    <script src=\"client.js\"></script>\n</body>\n</html>\n```\n\nclient.js\n\n```js\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const messagesDiv = document.querySelector(\"#messages\");\n  const textDecoder = new TextDecoder(\"utf-8\");\n\n  fetch(\"http://localhost:3000/sse\").then((response) => {\n    const reader = response.body.getReader();\n    return new ReadableStream({\n      start(controller) {\n        function push() {\n          reader.read().then(({ done, value }) => {\n            if (done) {\n              controller.close();\n              return;\n            }\n\n            const chunk = textDecoder.decode(value, { stream: true });\n            const lines = chunk.split(\"\\n\");\n\n            for (const line of lines) {\n              if (line.startsWith(\"data: \")) {\n                const json = line.slice(6);\n                const data = JSON.parse(json);\n                const p = document.createElement(\"p\");\n                p.textContent = `ID: ${data.id}, Message: ${data.message}, Timestamp: ${data.timestamp}`;\n                messagesDiv.appendChild(p);\n              } else if (line.startsWith(\"event: end\")) {\n                const p = document.createElement(\"p\");\n                p.textContent = \"스트림의 끝\";\n                messagesDiv.appendChild(p);\n                return;\n              }\n            }\n            push();\n          });\n        }\n        push();\n      },\n    });\n  });\n});\n```\n\nSSE 이벤트 스트림은 간단한 텍스트 데이터 스트림이며 해당 텍스트는 UTF-8 형식을 사용하여 인코딩됩니다. 따라서 textDecoder 객체를 생성할 때 인코딩을 utf-8로 설정해야 합니다. 텍스트Decoder 객체가 준비되면 해당 객체가 제공하는 decode 메소드를 호출하여 디코딩할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n## 3. 대용량 JSON 파일에서 데이터 청크 디코딩하기\n\n다시 한번, 먼저 결과를 살펴봅시다:\n\n![이미지](/assets/img/2024-05-20-HowToTransferLargeJSONFilesEfficiently_2.png)\n\n위 그림에서 JSON 데이터 출력은 다음 large.json 파일에서 나온 것입니다. 우리는 파일을 0.5KB씩 잘라서 500ms마다 다음 청크를 보내는 방식으로 처리합니다. @streamparser/json 라이브러리를 사용하여 JSON 청크를 파싱할 수 있는 기능을 구현했습니다.\n\n<div class=\"content-ad\"></div>\n\n\nlarge.json\n\n```js\n[\n  {},\n  {\n    \"image\": [\n      {\n        \"shape\": \"rect\",\n        \"fill\": \"#333\",\n        \"stroke\": \"#999\",\n        \"x\": 0.5e1,\n        \"y\": 0.5,\n        \"z\": 0.8,\n        \"w\": 0.5e5,\n        \"u\": 2e10,\n        \"foo\": 2e1,\n        \"bar\": 2,\n        \"width\": 47,\n        \"height\": 47\n      }\n    ],\n    \"corners\": { \"1\": true, \"3\": true, \"7\": true, \"9\": true }\n  },\n ...\n]\n```\n\njson-server.js\n\n```js\nconst http = require(\"http\");\nconst { join } = require(\"path\");\nconst { readFileSync } = require(\"fs\");\n\nconst PORT = 3000;\n\nconst largeJson = readFileSync(join(__dirname, \"large.json\")).toString();\n\nconst server = http.createServer((req, res) => {\n  if (req.url === \"/stream-json\") {\n    res.writeHead(200, {\n      \"Content-Type\": \"application/json\",\n      \"Cache-Control\": \"no-cache\",\n      Connection: \"keep-alive\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Headers\":\n        \"Origin, X-Requested-With, Content-Type, Accept\",\n    });\n\n    const CHUNK_SIZE = 512;\n    let position = 0;\n\n    const interval = setInterval(() => {\n      const chunk = largeJson.slice(position, position + CHUNK_SIZE);\n      res.write(chunk);\n      position += CHUNK_SIZE;\n\n      if (position >= largeJson.length) {\n        clearInterval(interval);\n        res.end();\n      }\n    }, 500);\n\n    req.on(\"close\", () => {\n      clearInterval(interval);\n    });\n  } else {\n    res.writeHead(404, { \"Content-Type\": \"text/plain\" });\n    res.end(\"404 Not Found\");\n  }\n});\n\nserver.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n``` \n\n\n<div class=\"content-ad\"></div>\n\nstream.html\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Stream JSON</title>\n  </head>\n  <body>\n    <h1>Stream JSON</h1>\n    <div id=\"messages\"></div>\n    <script type=\"module\">\n      import { JSONParser } from \"https://cdn.jsdelivr.net/npm/@streamparser/json-whatwg@0.0.21/+esm\";\n      const messagesDiv = document.querySelector(\"#messages\");\n\n      document.addEventListener(\"DOMContentLoaded\", async () => {\n        const parser = new JSONParser();\n\n        const response = await fetch(\"http://localhost:3000/stream-json\");\n\n        const reader = response.body.pipeThrough(parser).getReader();\n        while (true) {\n          const { done, value: parsedElementInfo } = await reader.read();\n          if (done) break;\n\n          const { value, key, parent, stack, partial } = parsedElementInfo;\n          if (partial) {\n            console.log(`Parsing value: ${value}... (still parsing)`);\n          } else {\n            const p = document.createElement(\"p\");\n            p.textContent = `${JSON.stringify(value)}`;\n            messagesDiv.appendChild(p);\n            console.log(`Value parsed: ${JSON.stringify(value)}`);\n          }\n        }\n      });\n    </script>\n  </body>\n</html>\n```\n\n@streamparser/json 라이브러리는 다른 용도도 있어요. 관심이 있다면 사용 설명서를 살펴보세요. TextDecoder API에 대한 다른 유용한 사용 사례가 있으면 댓글을 남겨주세요.\n\nTypeScript는 정말 멋지고 배울 가치가 있어요. TypeScript를 배우고 싶다면 Medium이나 Twitter에서 저를 팔로우해서 TS와 JS에 관한 더 많은 내용을 읽을 수 있어요!","ogImage":{"url":"/assets/img/2024-05-20-HowToTransferLargeJSONFilesEfficiently_0.png"},"coverImage":"/assets/img/2024-05-20-HowToTransferLargeJSONFilesEfficiently_0.png","tag":["Tech"],"readingTime":9},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-20-HowToTransferLargeJSONFilesEfficiently_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"대규모 JSON 데이터를 전송할 때, 기존 방식을 사용하면 데이터 처리를 시작하기 전에 완전한 JSON 데이터를 수신해야 하므로 사용자 경험에 영향을 줄 수 있습니다. 이 문제를 해결하기 위해 기존의 JSON 스트림 구문 분석 라이브러리를 사용할 수 있습니다. 예를 들어 내부적으로 TextDecoder API를 사용하는 @streamparser/json이 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"TextDecoder API는 이진 데이터 (일반적으로 ArrayBuffer 또는 TypedArray)를 문자열로 디코딩하기 위한 JavaScript API입니다. 이는 Web 플랫폼의 일부이며 텍스트 인코딩의 디코딩을 처리하는 데 주로 사용됩니다. 예를 들어, 서버로부터 수신한 스트리밍 데이터, 파일 데이터 등을 처리하는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"TextDecoder API 사용 이유\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"웹 애플리케이션에서 이진 데이터를 다룰 때, 이 데이터를 읽을 수 있는 문자열 형식으로 변환해야 하는 경우가 종종 있습니다. TextDecoder를 사용하면 이를 효율적이고 편리하게 할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"TextDecoder API에는 다음과 같은 기능이 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"효율적: 수동으로 바이트 단위로 처리하는 것보다 효율적이며, 문자열로 직접 디코딩이 가능합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"여러 인코딩 지원: 다양한 텍스트 인코딩(예: UTF-8, UTF-16, ISO-8859-1 등)을 지원합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"스트리밍 처리 지원: 데이터를 조각조각으로 처리할 수 있어 대용량 데이터 스트림 또는 실시간 처리가 필요한 데이터에 적합합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"TextDecoder API 사용 방법\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음으로, TextDecoder API를 사용하는 네 가지 시나리오를 소개하겠습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"서로 다른 인코딩된 바이너리 데이터 해독\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"스트리밍 JSON 데이터 디코딩\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"대용량 JSON 파일의 데이터 청크 디코딩\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. 서로 다른 인코딩된 바이너리 데이터 해독\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 다른 인코딩으로 TextDecoder 인스턴스 생성\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" utf16Decoder = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TextDecoder\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'utf-16'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" iso88591Decoder = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TextDecoder\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'iso-8859-1'\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" utf16Array = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Uint16Array\"\n        }), \"([\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x0048\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x0065\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x006C\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x006C\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x006F\"\n        }), \"]);\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" iso88591Array = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Uint8Array\"\n        }), \"([\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"72\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"101\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"108\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"108\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"111\"\n        }), \"]);\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 문자열로 디코딩\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" utf16String = utf16Decoder.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"decode\"\n        }), \"(utf16Array);\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" iso88591String = iso88591Decoder.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"decode\"\n        }), \"(iso88591Array);\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(utf16String); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력：\\\"Hello\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(iso88591String); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력：\\\"Hello\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. 스트리밍 JSON 데이터 디코딩\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저, 결과를 살펴봅시다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowToTransferLargeJSONFilesEfficiently_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위의 예제에서는 Node.js의 http 모듈을 사용하여 로컬 SSE (서버 전송 이벤트) 서버를 빠르게 구축합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"server.js\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" http = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"http\\\"\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PORT\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3000\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" server = http.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createServer\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"req, res\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"url\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/sse\\\"\"\n        }), \") {\\n    res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"writeHead\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \", {\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Content-Type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"text/event-stream\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Cache-Control\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"no-cache\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Connection\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keep-alive\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Access-Control-Allow-Origin\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"*\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Access-Control-Allow-Headers\\\"\"\n        }), \":\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Origin, X-Requested-With, Content-Type, Accept\\\"\"\n        }), \",\\n    });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" id = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" interval = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"setInterval\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" data = {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": id,\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"message\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`This is message \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${id}\"\n          }), \"`\"]\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"timestamp\"\n        }), \": +\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Date\"\n        }), \"(),\\n      };\\n      res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"write\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`data: \", _jsxs(_components.span, {\n            className: \"hljs-subst\",\n            children: [\"${\", _jsx(_components.span, {\n              className: \"hljs-built_in\",\n              children: \"JSON\"\n            }), \".stringify(data)}\"]\n          }), \"\\\\n\\\\n`\"]\n        }), \");\\n\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (id == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \") {\\n        res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"write\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"event: end\\\\n\\\"\"\n        }), \");\\n        res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"write\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"data: End of stream\\\\n\\\\n\\\"\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"clearInterval\"\n        }), \"(interval);\\n        res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"end\"\n        }), \"();\\n      }\\n\\n      id++;\\n    }, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1000\"\n        }), \");\\n\\n    req.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"on\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"close\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"clearInterval\"\n        }), \"(interval);\\n    });\\n  } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n    res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"writeHead\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"404\"\n        }), \", { \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Content-Type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"text/plain\\\"\"\n        }), \" });\\n    res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"end\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"404 Not Found\\\"\"\n        }), \");\\n  }\\n});\\n\\nserver.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"listen\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PORT\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`Server is running on http://localhost:\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${PORT}\"\n          }), \"`\"]\n        }), \");\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"sse 핸들러에서는 Content-Type 응답 헤더의 유형을 \\\"text/event-stream\\\"으로 설정하여 클라이언트에게 스트리밍 데이터를 반환한다는 것을 알려줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"index.html\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DOCTYPE\"\n        }), \" html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>SSE & TextDecoder</title>\\n</head>\\n<body>\\n    <h1>서버-전송 이벤트 JSON 스트림 데이터 디코딩</h1>\\n    <div id=\\\"messages\\\"></div>\\n    <script src=\\\"client.js\\\"></script>\\n</body>\\n</html>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"client.js\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addEventListener\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"DOMContentLoaded\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" messagesDiv = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"querySelector\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"#messages\\\"\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" textDecoder = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TextDecoder\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"utf-8\\\"\"\n        }), \");\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetch\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"http://localhost:3000/sse\\\"\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"response\"\n          }), \") =>\"]\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" reader = response.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"body\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getReader\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReadableStream\"\n        }), \"({\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"start\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"controller\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n          reader.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"read\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"{ done, value }\"\n          }), \") =>\"]\n        }), \" {\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (done) {\\n              controller.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"close\"\n        }), \"();\\n              \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \";\\n            }\\n\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" chunk = textDecoder.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"decode\"\n        }), \"(value, { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"stream\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" });\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" lines = chunk.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"split\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\\n\\\"\"\n        }), \");\\n\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" line \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \" lines) {\\n              \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (line.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"startsWith\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"data: \\\"\"\n        }), \")) {\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" json = line.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"slice\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \");\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" data = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JSON\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"parse\"\n        }), \"(json);\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" p = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createElement\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"p\\\"\"\n        }), \");\\n                p.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"textContent\"\n        }), \" = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`ID: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${data.id}\"\n          }), \", Message: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${data.message}\"\n          }), \", Timestamp: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${data.timestamp}\"\n          }), \"`\"]\n        }), \";\\n                messagesDiv.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"appendChild\"\n        }), \"(p);\\n              } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (line.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"startsWith\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"event: end\\\"\"\n        }), \")) {\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" p = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createElement\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"p\\\"\"\n        }), \");\\n                p.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"textContent\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"스트림의 끝\\\"\"\n        }), \";\\n                messagesDiv.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"appendChild\"\n        }), \"(p);\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \";\\n              }\\n            }\\n            \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"();\\n          });\\n        }\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"();\\n      },\\n    });\\n  });\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SSE 이벤트 스트림은 간단한 텍스트 데이터 스트림이며 해당 텍스트는 UTF-8 형식을 사용하여 인코딩됩니다. 따라서 textDecoder 객체를 생성할 때 인코딩을 utf-8로 설정해야 합니다. 텍스트Decoder 객체가 준비되면 해당 객체가 제공하는 decode 메소드를 호출하여 디코딩할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. 대용량 JSON 파일에서 데이터 청크 디코딩하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다시 한번, 먼저 결과를 살펴봅시다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowToTransferLargeJSONFilesEfficiently_2.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 그림에서 JSON 데이터 출력은 다음 large.json 파일에서 나온 것입니다. 우리는 파일을 0.5KB씩 잘라서 500ms마다 다음 청크를 보내는 방식으로 처리합니다. @streamparser/json 라이브러리를 사용하여 JSON 청크를 파싱할 수 있는 기능을 구현했습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"large.json\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"[\\n  {},\\n  {\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"image\\\"\"\n        }), \": [\\n      {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"shape\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"rect\\\"\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"fill\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"#333\\\"\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"stroke\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"#999\\\"\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"x\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.5e1\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"y\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.5\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"z\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.8\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"w\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.5e5\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"u\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2e10\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"foo\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2e1\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"bar\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"width\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"47\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"height\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"47\"\n        }), \"\\n      }\\n    ],\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"corners\\\"\"\n        }), \": { \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"1\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"3\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"7\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"9\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" }\\n  },\\n ...\\n]\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"json-server.js\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" http = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"http\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { join } = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"path\\\"\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { readFileSync } = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"fs\\\"\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PORT\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3000\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" largeJson = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"readFileSync\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"join\"\n        }), \"(__dirname, \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"large.json\\\"\"\n        }), \")).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toString\"\n        }), \"();\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" server = http.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createServer\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"req, res\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (req.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"url\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/stream-json\\\"\"\n        }), \") {\\n    res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"writeHead\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \", {\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Content-Type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"application/json\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Cache-Control\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"no-cache\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Connection\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keep-alive\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Access-Control-Allow-Origin\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"*\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Access-Control-Allow-Headers\\\"\"\n        }), \":\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Origin, X-Requested-With, Content-Type, Accept\\\"\"\n        }), \",\\n    });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CHUNK_SIZE\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"512\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" position = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \";\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" interval = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"setInterval\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" chunk = largeJson.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"slice\"\n        }), \"(position, position + \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CHUNK_SIZE\"\n        }), \");\\n      res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"write\"\n        }), \"(chunk);\\n      position += \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CHUNK_SIZE\"\n        }), \";\\n\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (position >= largeJson.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"clearInterval\"\n        }), \"(interval);\\n        res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"end\"\n        }), \"();\\n      }\\n    }, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"500\"\n        }), \");\\n\\n    req.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"on\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"close\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"clearInterval\"\n        }), \"(interval);\\n    });\\n  } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n    res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"writeHead\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"404\"\n        }), \", { \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Content-Type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"text/plain\\\"\"\n        }), \" });\\n    res.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"end\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"404 Not Found\\\"\"\n        }), \");\\n  }\\n});\\n\\nserver.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"listen\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PORT\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`Server is running on http://localhost:\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${PORT}\"\n          }), \"`\"]\n        }), \");\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"stream.html\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<!\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DOCTYPE\"\n        }), \" html>\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"html\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"lang\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"en\\\"\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"head\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"meta\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"charset\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"UTF-8\\\"\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"meta\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"viewport\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"content\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"width=device-width, initial-scale=1.0\\\"\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          }), \"Stream JSON\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"title\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"head\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"body\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"Stream JSON\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"id\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"messages\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"script\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"module\\\"\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"javascript\",\n            children: [\"\\n      \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"import\"\n            }), \" { \", _jsx(_components.span, {\n              className: \"hljs-title class_\",\n              children: \"JSON\"\n            }), \"Parser } \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"from\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"https://cdn.jsdelivr.net/npm/@streamparser/json-whatwg@0.0.21/+esm\\\"\"\n            }), \";\\n      \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" messagesDiv = \", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"document\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"querySelector\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"#messages\\\"\"\n            }), \");\\n\\n      \", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"document\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"addEventListener\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"DOMContentLoaded\\\"\"\n            }), \", \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"async\"\n            }), \" () => {\\n        \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" parser = \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"new\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title class_\",\n              children: \"JSON\"\n            }), \"Parser();\\n\\n        \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" response = \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"await\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"fetch\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"http://localhost:3000/stream-json\\\"\"\n            }), \");\\n\\n        \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" reader = response.\", _jsx(_components.span, {\n              className: \"hljs-property\",\n              children: \"body\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"pipeThrough\"\n            }), \"(parser).\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"getReader\"\n            }), \"();\\n        \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"while\"\n            }), \" (\", _jsx(_components.span, {\n              className: \"hljs-literal\",\n              children: \"true\"\n            }), \") {\\n          \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" { done, \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \": parsedElementInfo } = \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"await\"\n            }), \" reader.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"read\"\n            }), \"();\\n          \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"if\"\n            }), \" (done) \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"break\"\n            }), \";\\n\\n          \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" { value, key, parent, stack, partial } = parsedElementInfo;\\n          \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"if\"\n            }), \" (partial) {\\n            \", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"console\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"log\"\n            }), \"(\", _jsxs(_components.span, {\n              className: \"hljs-string\",\n              children: [\"`Parsing value: \", _jsx(_components.span, {\n                className: \"hljs-subst\",\n                children: \"${value}\"\n              }), \"... (still parsing)`\"]\n            }), \");\\n          } \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"else\"\n            }), \" {\\n            \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"const\"\n            }), \" p = \", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"document\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"createElement\"\n            }), \"(\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"p\\\"\"\n            }), \");\\n            p.\", _jsx(_components.span, {\n              className: \"hljs-property\",\n              children: \"textContent\"\n            }), \" = \", _jsxs(_components.span, {\n              className: \"hljs-string\",\n              children: [\"`\", _jsxs(_components.span, {\n                className: \"hljs-subst\",\n                children: [\"${\", _jsx(_components.span, {\n                  className: \"hljs-built_in\",\n                  children: \"JSON\"\n                }), \".stringify(value)}\"]\n              }), \"`\"]\n            }), \";\\n            messagesDiv.\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"appendChild\"\n            }), \"(p);\\n            \", _jsx(_components.span, {\n              className: \"hljs-variable language_\",\n              children: \"console\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-title function_\",\n              children: \"log\"\n            }), \"(\", _jsxs(_components.span, {\n              className: \"hljs-string\",\n              children: [\"`Value parsed: \", _jsxs(_components.span, {\n                className: \"hljs-subst\",\n                children: [\"${\", _jsx(_components.span, {\n                  className: \"hljs-built_in\",\n                  children: \"JSON\"\n                }), \".stringify(value)}\"]\n              }), \"`\"]\n            }), \");\\n          }\\n        }\\n      });\\n    \"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"script\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"body\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"html\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"@streamparser/json 라이브러리는 다른 용도도 있어요. 관심이 있다면 사용 설명서를 살펴보세요. TextDecoder API에 대한 다른 유용한 사용 사례가 있으면 댓글을 남겨주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"TypeScript는 정말 멋지고 배울 가치가 있어요. TypeScript를 배우고 싶다면 Medium이나 Twitter에서 저를 팔로우해서 TS와 JS에 관한 더 많은 내용을 읽을 수 있어요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}