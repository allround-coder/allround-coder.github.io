{"pageProps":{"post":{"title":"앵귤러에서 let을 사용하여 템플릿 로컬 변수 생성하기","description":"","date":"2024-05-18 21:55","slug":"2024-05-18-TemplatelocalvariableswithletinAngular","content":"\n\n![image](/assets/img/2024-05-18-TemplatelocalvariableswithletinAngular_0.png)\n\n# Angular에서 let 사용하기\n\nAngular를 오랫동안 사용해본 적이 있다면, 언젠가는 템플릿 내에서 변수를 선언하고 싶은 경우가 있을 것입니다. 이것은 나중에 템플릿에서 사용할 값을 저장하고 싶을 때 흔히 발생하는 상황입니다.\n\n가장 일반적인 방법은 ngIf와 같은 디렉티브를 사용하여 as 키워드를 이용해 변수에 값을 할당하는 것입니다. 예를 들면:\n\n<div class=\"content-ad\"></div>\n\n```js\n<div *ngIf=\"user$ | async as user\">\n  <h1>{ user.name }</h1>\n</div>\n\n<!-- 또는 새로운 제어 흐름 사용 -->\n@if (user$ | async; as user) {\n  <h1>{ user.name }</h1>\n}\n```\n\n숫자를 다루고 있을 때는 어떻게 될까요?\n\n```js\n<div>\n    @if (points$ | async; as points) {\n        <h1>당신은 { points } 포인트를 가지고 있습니다!</h1>\n    }\n</div>\n```\n\n템플릿에서 포인트가 0이라면 어떻게 표시될까요? 아무것도 표시되지 않을 것입니다! 왜냐하면 0은 falsy한 값이기 때문에 if 블록 내에서 사용될 때 내용을 표시하지 않습니다.```\n\n<div class=\"content-ad\"></div>\n\n새로운 @let 블록이 작용하는 곳입니다. @let 블록을 사용하면 템플릿 내에서 변수를 선언하고 나중에 템플릿에서 사용할 수 있습니다. 어떻게 작동하는지 살펴봅시다.\n\n```js\n<div>\n    @let points = (points$ | async) ?? 0;  \n    <h1>You have: { points } points!</h1>\n</div>\n```\n\n이렇게 하면 points가 0이더라도 내용이 렌더링됩니다. 이는 let 블록이 Falsy 값을 확인하지 않기 때문에 발생하는 것이며 템플릿에서 그 시점에 변수를 선언하기 때문입니다.\n\n또한, @let 블록의 가장 일반적인 사용 사례 중 하나는 복잡한 표현식에 대한 별칭을 저장할 수 있는 변수를 저장하는 것입니다. 예를 들어:\n\n<div class=\"content-ad\"></div>\n\n```js\n@let someField = someService.someSignal().someProperty.someOtherProperty;\n<div>{ someField }</div>\n```\n\n# Angular에서 @let 사용 방법\n\n다음은 새로운 @let를 여러 방법으로 사용할 수 있습니다:\n\n- 비동기 파이프와 함께:\n\n<div class=\"content-ad\"></div>\n\n\n```js\n<div>\n    @let user = (user$ | async) ?? { name: 'Guest' };  \n    <h1>{ user.name }</h1>\n</div>\n```\n\n- With control flow directives:\n\n```js\n<div>\n    @let user = user$ | async;  \n    @if (user) {\n        <h1>{ user.name }</h1>\n    }\n</div>\n```\n\n- Inside @for to refactor code duplications:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n<mat-selection-list>\n    @for (item of items(); track item.id) {\n        @let isSelected = item.id === selectedId();\n        <mat-list-option [selected]=\"isSelected\" [class.selected]=\"isSelected\">\n            { item.text } \n            @if (isSelected) {\n                <span>(selected)</span>\n            }\n        </mat-list-option>\n    }\n</mat-selection-list>\n```\n\n- 삼항 연산자 활용:\n\n```js\n<div>\n    @for (game of games; track game.id) {\n        @let points = calcPoints(game.points > 0 ? game.points : 0);  \n        <h1>You have: { points } points!</h1>\n    }\n</div>\n```\n\n- 기본 산술 연산자 활용:\n\n<div class=\"content-ad\"></div>\n\n```js\n<div>\n   @for (게임 of 게임목록; 게임.id로 순회) {\n       @let 합계 = 이전합계 + 게임.점수; \n       <h1>총 점수: { 합계 }</h1>\n   }\n</div>\n```\n\n- 신호와 함께:\n\n```js\n<div>\n    @let 사용자이름 = 사용자()?.이름 ?? '손님';\n    <h1>환영합니다, { 사용자이름 }</h1>\n</div>\n```\n\n- 여러 선언을 한 줄에 나열하거나 여러 줄에 나눠서 선언하기:\n\n<div class=\"content-ad\"></div>\n\n```js\n<div>  \n    @let total = count + previousCount, average = calcAverage(count), (여기서 `total`을 사용할 수 있을까요?)\n    \n    @let total = count + previousCount, \n         average = calcAverage(count)\n    <h1>{total}</h1>\n</div>\n```\n\n# 좋은 정보\n\nlet 선언은 JavaScript의 let 선언과 거의 동일하게 작동합니다.\n\n- 스코핑은 JavaScript의 let과 동일하게 작동합니다.\n- 타입 추론이 그대로 작동합니다!\n- let 선언은 구성 속성보다 로컬 let 선언을 우선시합니다.\n- let 선언은 정의되기 전에 참조할 수 없으며, 예외는 이벤트 핸들러 내에서 사용될 때입니다. \n\n\n<div class=\"content-ad\"></div>\n\n이 기능은 2017년 3월부터 열려 있던 문제를 해결합니다.\n\n이 PR에서는 @let 블록이 도입되기 전에 고려된 여러 대안을 볼 수 있습니다.\n\n- @let 대신 @const\n- 새로운 키워드 전체\n- @let 대신 @var\n- 블록 형식의 구문\n\nPR에 대한 자세한 정보는 여기에서 확인할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n여기서 새로운 @let 블록을 Angular 템플릿에서 사용하는 방법이 있습니다. 이 기능은 아마도 예상대로 다가오는 달에 출시될 Angular v18.1에서 사용 가능할 것으로 예상됩니다.\n\nAngular 템플릿에서 @let 블록의 다른 사용 사례에 대해 떠오르는 것이 있으면 알려주세요. 🚀\n\n# 읽어 주셔서 감사합니다!\n\n만약 이 글이 흥미로웠고 유용하다고 생각되고 Angular에 대해 더 배우고 싶다면, 제게 커피 한 잔 사주는 걸로 응원해주세요 ☕️ 또는 X(이전 트위터) @Enea_Jahollari에서 저를 팔로우해주세요. Angular 최신 뉴스, 신호, 비디오, 팟캐스트, 업데이트, RFC, 풀 리퀘스트 등에 대해 많이 트윗하고 블로깅합니다. 💎","ogImage":{"url":"/assets/img/2024-05-18-TemplatelocalvariableswithletinAngular_0.png"},"coverImage":"/assets/img/2024-05-18-TemplatelocalvariableswithletinAngular_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-TemplatelocalvariableswithletinAngular_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Angular에서 let 사용하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Angular를 오랫동안 사용해본 적이 있다면, 언젠가는 템플릿 내에서 변수를 선언하고 싶은 경우가 있을 것입니다. 이것은 나중에 템플릿에서 사용할 값을 저장하고 싶을 때 흔히 발생하는 상황입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가장 일반적인 방법은 ngIf와 같은 디렉티브를 사용하여 as 키워드를 이용해 변수에 값을 할당하는 것입니다. 예를 들면:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div *ngIf=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"user$ | async as user\\\"\"\n        }), \">\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"{ user.name }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \"\\n</div>\\n\\n<!-- 또는 새로운 제어 흐름 사용 -->\\n@\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (user$ | \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" user) {\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"{ user.name }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"숫자를 다루고 있을 때는 어떻게 될까요?\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div>\\n    @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (points$ | \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" points) {\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"당신은 { points } 포인트를 가지고 있습니다!\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \"\\n    }\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"템플릿에서 포인트가 0이라면 어떻게 표시될까요? 아무것도 표시되지 않을 것입니다! 왜냐하면 0은 falsy한 값이기 때문에 if 블록 내에서 사용될 때 내용을 표시하지 않습니다.```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새로운 @let 블록이 작용하는 곳입니다. @let 블록을 사용하면 템플릿 내에서 변수를 선언하고 나중에 템플릿에서 사용할 수 있습니다. 어떻게 작동하는지 살펴봅시다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div>\\n    @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" points = (points$ | \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \") ?? \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \";  \\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"You have: { points } points!\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \"\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이렇게 하면 points가 0이더라도 내용이 렌더링됩니다. 이는 let 블록이 Falsy 값을 확인하지 않기 때문에 발생하는 것이며 템플릿에서 그 시점에 변수를 선언하기 때문입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한, @let 블록의 가장 일반적인 사용 사례 중 하나는 복잡한 표현식에 대한 별칭을 저장할 수 있는 변수를 저장하는 것입니다. 예를 들어:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" someField = someService.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"someSignal\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"someProperty\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"someOtherProperty\"\n        }), \";\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"{ someField }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Angular에서 @let 사용 방법\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 새로운 @let를 여러 방법으로 사용할 수 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"비동기 파이프와 함께:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div>\\n    @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" user = (user$ | \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \") ?? { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Guest'\"\n        }), \" };  \\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"{ user.name }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \"\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"With control flow directives:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div>\\n    @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" user = user$ | \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \";  \\n    @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (user) {\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"{ user.name }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \"\\n    }\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Inside @for to refactor code duplications:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<mat-selection-list>\\n    @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (item \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"items\"\n        }), \"(); track item.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \") {\\n        @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" isSelected = item.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"selectedId\"\n        }), \"();\\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"mat-list-option\"\n            }), \" [\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"selected\"\n            }), \"]=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"isSelected\\\"\"\n            }), \" [\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"class.selected\"\n            }), \"]=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"isSelected\\\"\"\n            }), \">\"]\n          }), \"\\n            { item.text } \\n            @if (isSelected) {\\n                \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"span\"\n            }), \">\"]\n          }), \"(selected)\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"span\"\n            }), \">\"]\n          }), \"\\n            }\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"mat-list-option\"\n            }), \">\"]\n          })]\n        }), \"\\n    }\\n</mat-selection-list>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"삼항 연산자 활용:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div>\\n    @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (game \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \" games; track game.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \") {\\n        @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" points = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"calcPoints\"\n        }), \"(game.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"points\"\n        }), \" > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \" ? game.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"points\"\n        }), \" : \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");  \\n        \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"You have: { points } points!\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \"\\n    }\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"기본 산술 연산자 활용:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div>\\n   @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (게임 \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \" 게임목록; 게임.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"로 순회) {\\n       @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" 합계 = 이전합계 + 게임.점수; \\n       \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"총 점수: { 합계 }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \"\\n   }\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"신호와 함께:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div>\\n    @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" 사용자이름 = 사용자()?.이름 ?? \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'손님'\"\n        }), \";\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"환영합니다, { 사용자이름 }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \"\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"여러 선언을 한 줄에 나열하거나 여러 줄에 나눠서 선언하기:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<div>  \\n    @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" total = count + previousCount, average = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"calcAverage\"\n        }), \"(count), (여기서 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`total`\"\n        }), \"을 사용할 수 있을까요?)\\n    \\n    @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" total = count + previousCount, \\n         average = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"calcAverage\"\n        }), \"(count)\\n    <h1>{total}</h1>\\n</div>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"좋은 정보\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"let 선언은 JavaScript의 let 선언과 거의 동일하게 작동합니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"스코핑은 JavaScript의 let과 동일하게 작동합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"타입 추론이 그대로 작동합니다!\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"let 선언은 구성 속성보다 로컬 let 선언을 우선시합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"let 선언은 정의되기 전에 참조할 수 없으며, 예외는 이벤트 핸들러 내에서 사용될 때입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기능은 2017년 3월부터 열려 있던 문제를 해결합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 PR에서는 @let 블록이 도입되기 전에 고려된 여러 대안을 볼 수 있습니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"@let 대신 @const\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"새로운 키워드 전체\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"@let 대신 @var\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"블록 형식의 구문\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"PR에 대한 자세한 정보는 여기에서 확인할 수 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 새로운 @let 블록을 Angular 템플릿에서 사용하는 방법이 있습니다. 이 기능은 아마도 예상대로 다가오는 달에 출시될 Angular v18.1에서 사용 가능할 것으로 예상됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Angular 템플릿에서 @let 블록의 다른 사용 사례에 대해 떠오르는 것이 있으면 알려주세요. 🚀\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"읽어 주셔서 감사합니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 이 글이 흥미로웠고 유용하다고 생각되고 Angular에 대해 더 배우고 싶다면, 제게 커피 한 잔 사주는 걸로 응원해주세요 ☕️ 또는 X(이전 트위터) @Enea_Jahollari에서 저를 팔로우해주세요. Angular 최신 뉴스, 신호, 비디오, 팟캐스트, 업데이트, RFC, 풀 리퀘스트 등에 대해 많이 트윗하고 블로깅합니다. 💎\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}