{"pageProps":{"post":{"title":"백스테이지 Kubernetes 플러그인 사용자 정의하기","description":"","date":"2024-05-17 03:48","slug":"2024-05-17-CustomizingtheBackstageKubernetesPlugin","content":"\n\n백스테이지의 새로운 백엔드 시스템에서 쿠버네티스 플러그인을 사용자 정의하는 방법 소개\n\n![이미지](/assets/img/2024-05-17-CustomizingtheBackstageKubernetesPlugin_0.png)\n\n# 소개\n\n스포티파이에서 개발한 백스테이지는 다양한 도구와 인터페이스를 통합하여 응용 프로그램 관리를 간편화하는 통합 플랫폼입니다. 이 글에서는 백스테이지의 아키텍처와 쿠버네티스 플러그인을 살펴보며 사용자 정의 옵션이 작업 흐름을 최적화하고 쿠버네티스 리소스의 중앙 집중화된 보기를 제공하는 방법을 소개합니다. 실용적인 예제를 통해 독자들은 백스테이지가 어떻게 응용 프로그램 관리를 혁신할 수 있는지 발견할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# Backstage란 무엇인가요?\n\n많은 사람들이 자신의 애플리케이션에 대한 포괄적인 정보를 제공하는 도구가 필요합니다. 예를 들어, 각각의 애플리케이션은 CI/CD 파이프라인, Kubernetes 클러스터, 그리고 기타 여러 가지 문서를 가지고 있습니다. CI/CD 파이프라인을 관리하려면 Jenkins, GitLab 또는 기타 도구를 사용할 수 있습니다. Kubernetes 클러스터에 접속하여 애플리케이션 상태를 확인하려면 kubectl이나 Kubernetes 대시보드, 또는 기타 유사한 도구가 필요할 것입니다. 그리고 문서를 확인하기 위해서는 처리된 .md 파일에 접근하거나 Confluence를 방문하여 애플리케이션 문서를 볼 수 있을 것입니다. 그러나 만약 이 모든 정보를 한 곳에서 볼 수 있다면 어떨까요? Backstage는 여러 측면에서 당신의 애플리케이션에 대한 포괄적인 정보를 만들 수 있게 도와주는 도구입니다.\n\n# Backstage 아키텍처\n\nBackstage는 세 가지 구성 요소로 간단한 아키텍처를 가지고 있습니다:\n\n<div class=\"content-ad\"></div>\n\n- 백스테이지 프론트엔드\n- 백스테이지 백엔드\n- 데이터베이스\n\n![이미지](/assets/img/2024-05-17-CustomizingtheBackstageKubernetesPlugin_1.png)\n\n# 백스테이지의 Kubernetes 플러그인\n\n백스테이지에는 응용 프로그램의 포괄적인 뷰를 만드는 데 사용할 수 있는 많은 플러그인이 있습니다. 몇 가지 플러그인은 프론트엔드 및 백엔드에 추가해야 합니다. Kubernetes 플러그인과 같은 경우입니다. Kubernetes 플러그인의 설치에 대한 공식 문서는 매우 상세하며 다음 링크에서 확인할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n# Kubernetes 플러그인 사용자 정의\n\nKubernetes 플러그인에는 여러 모듈이 있고, 각각을 사용자 정의할 수 있습니다. Kubernetes 플러그인의 다음 동작 중 일부를 사용자 정의할 수 있습니다:\n\n- 클러스터 제공자: 이 모듈은 클러스터를 캐싱하고 주기적으로 새로 고칩니다. credentials를 인수로 전달하는 getClusters(credentials) 함수가 있으며 클러스터 목록이 필요할 때 호출됩니다.\n- 사용자 정의 리소스: 이 모듈은 Kubernetes 클러스터에서 사용자 정의 리소스 목록을 검색합니다.\n- 객체 제공자: 이 인터페이스는 엔티티와 관련된 Kubernetes 객체 및 사용자 정의 리소스를 검색하기 위한 메서드를 정의합니다. pods, services, configmaps와 같은 일반 Kubernetes 객체의 기본 목록이 있습니다.\n- Fetcher: Fetcher는 카탈로그-info.yaml 파일 내에서 정의된 주석을 기반으로 Kubernetes 리소스를 검색하는 역할을 맡습니다. 검색된 리소스를 장식하고 반환합니다.\n- 서비스 로케이터: 이 컨텍스트는 서비스 로케이터 요청을 처리하며, 가져올 객체 유형, 사용자 정의 리소스, 자격 증명 등을 포함합니다.\n- 프록시: 프록시는 중간자 역할을 수행하여 Backstage에서 Kubernetes API 서버로 요청을 전달합니다. 프록시에서 요청 또는 응답의 내용을 수정할 수도 있습니다.\n- 인증 전략 맵: 인증 전략 맵은 인증 전략을 식별자 또는 키와 연결합니다. 클러스터 세부 정보 또는 인증 메타데이터와 같은 기준에 따라 인증 전략을 관리하고 검색하는 데 사용될 수 있습니다.\n\n# Fetcher(검색기) 사용자 정의: 다중 Namespace 로켸터\n\n<div class=\"content-ad\"></div>\n\n이 기사에서는 Kubernetes 클러스터에서 쿼리를 가져 오고 일부 동작을 변경하는 Fetcher 모듈의 사용자 정의에 중점을두려고합니다. 다음 GitHub 링크에서 기본 Fetcher 모듈을 찾을 수 있습니다:\n\n때로는 보안 문제로 Kubernetes 클러스터에 대한 클러스터 역할 서비스 계정을 만들 수없으며 네임 스페이스 범위의 서비스 계정 만 만들 수 있습니다. 이 경우 다양한 네임 스페이스에서 다른 파드를로드해야하며 backstage.io/kubernetes-namespace 필드 내에 모든 네임 스페이스를 하나씩 지정해야합니다. 이를 달성하기 위해 컴포넌트를 주석 처리하고 다양한 네임 스페이스에서 파드를로드해야합니다. 구체적으로 KubernetesFetcher.ts 파일을 사용자 정의해야합니다.\n\n예를 들어, 다음 catalog-info.yaml 파일에서 kubernetes-namespace 필드에 쉼표로 구분 된 두 개의 네임 스페이스를 포함하는 것을 볼 수 있습니다. 이 두 네임 스페이스에서 파드를로드하려고합니다.\n\n\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: order-service\n  description: 주문 서비스\n  links:\n    - title: 웹 사이트\n      url: https://docs.spring.io/spring-cloud-config/docs/current/reference/html/\n  annotations:\n    backstage.io/techdocs-ref: dir:.\n    lighthouse.com/website-url: https://docs.spring.io/spring-cloud-config/docs/current/reference/html/\n    'backstage.io/kubernetes-label-selector': 'app=order-service'\n    'backstage.io/kubernetes-namespace': 'spring-cloud-config-dev, spring-cloud-config-prod'\n    'backstage.io/kubernetes-cluster': dev-cluster\nspec:\n  type: 서비스\n  owner: me@example.com\n  lifecycle: POC\n\n\n<div class=\"content-ad\"></div>\n\n이를 달성하기 위해 fetchObjectsForService 함수에서 약간의 변경을 해야합니다. 그러나 npm 모듈에서 내보내지 않았기 때문에 KubernetesClientBasedFetcher 클래스를 직접 확장할 수 없습니다. 대신 해당 클래스를 복사하고 일부 동작을 수정해야 합니다. 아래는 packages/backend/src/plugins/CustomKubernetesClientBasedFetcher.ts 파일에 있는 사용자 정의 모듈의 예시입니다:\n\n```js\nexport class CustomKubernetesClientBasedFetcher implements KubernetesFetcher {\n  private readonly logger: LoggerService;\n  constructor({ logger }: KubernetesClientBasedFetcherOptions) {\n    this.logger = logger;\n  }\n\n  fetchObjectsForService(\n    params: ObjectFetchParams,\n  ): Promise<FetchResponseWrapper> {\n    const namespaces = params.namespace ? params.namespace.split(\",\") : [\"default\"];\n\n    const fetchResults = Array.from(params.objectTypesToFetch)\n      .concat(params.customResources)\n      .flatMap(({ objectType, group, apiVersion, plural }) =>\n        namespaces.map(namespace =>\n          this.fetchResource(\n            params.clusterDetails,\n            params.credential,\n            group,\n            apiVersion,\n            plural,\n            namespace.trim(),\n            params.labelSelector,\n          ).then(\n              ....\n          )\n        )\n      );\n\n    return Promise.all(fetchResults).then(fetchResultsToResponseWrapper);\n  }\n```\n\n위 스니펫의 전체 코드는 여기에서 확인할 수 있습니다:\n\nhttps://gist.github.com/mlkmhd/dc8a97449777b7dc0c30bff7b032e4d5\n\n<div class=\"content-ad\"></div>\n\n한 가지 더 해야 할 일이 있어요. 패키지/백엔드(src/index.ts) 파일을 수정하여 새로운 사용자 정의 모듈을 추가해야 해요. 아래와 같이요:\n\n```js\n...\n\nimport { kubernetesFetcherExtensionPoint } from '@backstage/plugin-kubernetes-node';\nimport { CustomKubernetesClientBasedFetcher } from './plugins/CustomKubernetesClientBasedFetcher';\n\n...\n\n// 쿠버네티스 플러그인\nexport const kubernetesModuleCustomFetcher = createBackendModule({\n  pluginId: 'kubernetes',\n  moduleId: 'custom-fetcher',\n  register(env) {\n    env.registerInit({\n      deps: {\n        kubernetes: kubernetesFetcherExtensionPoint,\n        logger: coreServices.logger,\n      },\n      async init({ kubernetes, logger }) {\n        kubernetes.addFetcher(\n          new CustomKubernetesClientBasedFetcher({\n            logger: logger,\n          })\n        );\n      },\n    });\n  },\n});\n\nbackend.add(import('@backstage/plugin-kubernetes-backend/alpha'));\nbackend.add(kubernetesModuleCustomFetcher);\n\nbackend.start();\n```\n\n또한, 다른 네임스페이스의 역할에 연결된 서비스 계정을 생성하여 다른 팟에 액세스할 수 있도록 해야 해요:\n\n<img src=\"/assets/img/2024-05-17-CustomizingtheBackstageKubernetesPlugin_2.png\" />\n\n<div class=\"content-ad\"></div>\n\n서비스 계정은 backstage 네임스페이스 내에 있어야 합니다:\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: backstage-sa\n  namespace: backstage-ns\n```\n\nB 네임스페이스 내의 역할은 다음과 같을 수 있습니다:\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: backstage-role\n  namespace: b-ns\nrules:\n- apiGroups: [\"\"]\n  resources:\n    - pods\n    - pods/log\n    - configmaps\n    - services\n    - limitranges\n    - resourcequotas\n  verbs:\n    - get\n    - list\n    - watch\n- apiGroups: [\"apps\"]\n  resources:\n    - deployments\n    - replicasets\n    - statefulsets\n    - daemonsets\n  verbs:\n    - get\n    - list\n    - watch\n```\n\n<div class=\"content-ad\"></div>\n\nC 네임스페이스 내부의 롤 바인딩은 다음과 같을 수 있어요:\n\n```js\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: backstage-role-binding\n  namespace: b-ns\nsubjects:\n- kind: ServiceAccount\n  name: backstage-sa\n  namespace: backstage-ns\nroleRef:\n  kind: Role\n  name: backstage-role\n  apiGroup: rbac.authorization.k8s.io\n```\n\nC 네임스페이스 또는 각 새로운 네임스페이스에 대해 롤과 롤 바인딩을 생성해야 해요. 이렇게 하면 해당 파드에 액세스하여 백스테이지 서비스 계정에 연결할 수 있어요. 그리고 이후에 app-config.yaml 파일 내에서 Kubernetes 플러그인을 아래와 같이 구성해야 해요:\n\n```js\n...\nkubernetes:\n  serviceLocatorMethod: \n    type: 'multiTenant'\n  clusterLocatorMethods:\n    - type: 'config'\n      clusters:\n        - url: https://kubernetes-cluster-api-server.example.com\n          name: dev-cluster\n          authProvider: 'serviceAccount'\n          skipTLSVerify: true\n          serviceAccountToken: ${K8S_DEV_TOKEN}\n...\n```\n\n<div class=\"content-ad\"></div>\n\n그러면 다음 명령어를 실행하여 애플리케이션을 빌드하고 실행할 수 있어요:\n\n```js\n$ cd backstage\n$\n$\n$ yarn install\n[1/5] package.json 유효성 검사 중...\n[2/5] 패키지 해결 중...\nsuccess 이미 최신 상태입니다.\n완료: 0.92초\n$\n$\n$ yarn dev --config app-config.yaml\n[0] app-config.yaml에서 구성 로드됨, app-config.local.yaml\n[0] <i> [webpack-dev-server] 프로젝트가 실행 중:\n[0] <i> [webpack-dev-server] Loopback: http://localhost:3000/\n[0] <i> [webpack-dev-server] 웹팩이 아닌 내용은 '/home/coder/ecfd-backstage/packages/app/public' 디렉터리에서 제공됨\n[0] <i> [webpack-dev-server] 404에는 '/index.html'로 대체함\n[0] <i> [webpack-dev-middleware] 번들 완료 대기중: /\n[1] MergedConfigSource에서 설정 로드됨\n[1] 2024-05-12T22:26:37.074Z backstage 정보 구성 내에 레드액트될 2개의 새로운 시크릿 발견됨 \n[1] 2024-05-12T22:26:37.082Z rootHttpRouter 정보 :7007에서 수신 대기중\n...\n```\n\n그런 다음 다음 catalog-info.yaml 파일을 backstage 구성에 추가해주세요:\n\n```js\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: order-service\n  description: 주문 서비스\n  links:\n    - title: 웹사이트\n      url: https://docs.spring.io/spring-cloud-config/docs/current/reference/html/\n  annotations:\n    backstage.io/techdocs-ref: dir:.\n    lighthouse.com/website-url: https://docs.spring.io/spring-cloud-config/docs/current/reference/html/\n    'backstage.io/kubernetes-label-selector': 'app=order-service'\n    'backstage.io/kubernetes-namespace': 'spring-cloud-config-dev,spring-cloud-config-prod'\n    'backstage.io/kubernetes-cluster': dev-cluster\nspec:\n  type: 서비스\n  owner: me@example.com\n  lifecycle: POC\n```\n\n<div class=\"content-ad\"></div>\n\n대시보드 안에 이렇게 테이블 태그를 변경해보세요:\n\n\n<img src=\"/assets/img/2024-05-17-CustomizingtheBackstageKubernetesPlugin_3.png\" />\n\n\n위 이미지에서 order-service는 spring-cloud-config-dev 네임스페이스에만 배포되어 있습니다. 그러나 이 서비스를 spring-cloud-config-prod 네임스페이스에 배포하면 거기서도 볼 수 있을 겁니다.\n\n이 글에서 사용된 모든 다이어그램은 다음 저장소에서 찾아볼 수 있습니다: [링크입니다.]\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n이 글은 Spotify가 개발한 Backstage의 Kubernetes 플러그인 내에서 사용자 정의가 어떻게 응용 프로그램 관리를 향상시키는지를 탐구합니다. Kubernetes 리소스의 통합된 보기를 제공함으로써 작업 흐름을 최적화하고 특정 요구 사항을 수용하는 방법에 대해 알 수 있습니다. Backstage의 아키텍처와 사용자 정의 옵션을 자세히 살펴보면, Kubernetes 클러스터에서 데이터를 검색하기 위해 Fetcher 모듈을 사용자 정의할 수 있는 내용을 다룹니다. 이를 통해 보안 제약 조건이 있는 상황에서도 여러 네임스페이스의 파드에 액세스할 수 있게 됩니다.\n\n# 블로그 후원하기 🍵\n\n내 무료 기술 블로그를 즐기고 가치 있게 여기신다면, 여기에서 커피 한 잔 사주시는 것을 고려해주세요. 여러분의 지원은 품질 높은 글과 콘텐츠를 더 많이 제작하는 데 큰 도움이 됩니다. 제 코드를 개선하는 데 대한 피드백이나 제안 사항이 있으면, 이 게시물에 댓글을 남기거나 LinkedIn 메시지를 보내주세요.","ogImage":{"url":"/assets/img/2024-05-17-CustomizingtheBackstageKubernetesPlugin_0.png"},"coverImage":"/assets/img/2024-05-17-CustomizingtheBackstageKubernetesPlugin_0.png","tag":["Tech"],"readingTime":10},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"백스테이지의 새로운 백엔드 시스템에서 쿠버네티스 플러그인을 사용자 정의하는 방법 소개\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-CustomizingtheBackstageKubernetesPlugin_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"소개\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"스포티파이에서 개발한 백스테이지는 다양한 도구와 인터페이스를 통합하여 응용 프로그램 관리를 간편화하는 통합 플랫폼입니다. 이 글에서는 백스테이지의 아키텍처와 쿠버네티스 플러그인을 살펴보며 사용자 정의 옵션이 작업 흐름을 최적화하고 쿠버네티스 리소스의 중앙 집중화된 보기를 제공하는 방법을 소개합니다. 실용적인 예제를 통해 독자들은 백스테이지가 어떻게 응용 프로그램 관리를 혁신할 수 있는지 발견할 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Backstage란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"많은 사람들이 자신의 애플리케이션에 대한 포괄적인 정보를 제공하는 도구가 필요합니다. 예를 들어, 각각의 애플리케이션은 CI/CD 파이프라인, Kubernetes 클러스터, 그리고 기타 여러 가지 문서를 가지고 있습니다. CI/CD 파이프라인을 관리하려면 Jenkins, GitLab 또는 기타 도구를 사용할 수 있습니다. Kubernetes 클러스터에 접속하여 애플리케이션 상태를 확인하려면 kubectl이나 Kubernetes 대시보드, 또는 기타 유사한 도구가 필요할 것입니다. 그리고 문서를 확인하기 위해서는 처리된 .md 파일에 접근하거나 Confluence를 방문하여 애플리케이션 문서를 볼 수 있을 것입니다. 그러나 만약 이 모든 정보를 한 곳에서 볼 수 있다면 어떨까요? Backstage는 여러 측면에서 당신의 애플리케이션에 대한 포괄적인 정보를 만들 수 있게 도와주는 도구입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Backstage 아키텍처\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Backstage는 세 가지 구성 요소로 간단한 아키텍처를 가지고 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"백스테이지 프론트엔드\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"백스테이지 백엔드\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"데이터베이스\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-CustomizingtheBackstageKubernetesPlugin_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"백스테이지의 Kubernetes 플러그인\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"백스테이지에는 응용 프로그램의 포괄적인 뷰를 만드는 데 사용할 수 있는 많은 플러그인이 있습니다. 몇 가지 플러그인은 프론트엔드 및 백엔드에 추가해야 합니다. Kubernetes 플러그인과 같은 경우입니다. Kubernetes 플러그인의 설치에 대한 공식 문서는 매우 상세하며 다음 링크에서 확인할 수 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Kubernetes 플러그인 사용자 정의\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Kubernetes 플러그인에는 여러 모듈이 있고, 각각을 사용자 정의할 수 있습니다. Kubernetes 플러그인의 다음 동작 중 일부를 사용자 정의할 수 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"클러스터 제공자: 이 모듈은 클러스터를 캐싱하고 주기적으로 새로 고칩니다. credentials를 인수로 전달하는 getClusters(credentials) 함수가 있으며 클러스터 목록이 필요할 때 호출됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"사용자 정의 리소스: 이 모듈은 Kubernetes 클러스터에서 사용자 정의 리소스 목록을 검색합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"객체 제공자: 이 인터페이스는 엔티티와 관련된 Kubernetes 객체 및 사용자 정의 리소스를 검색하기 위한 메서드를 정의합니다. pods, services, configmaps와 같은 일반 Kubernetes 객체의 기본 목록이 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Fetcher: Fetcher는 카탈로그-info.yaml 파일 내에서 정의된 주석을 기반으로 Kubernetes 리소스를 검색하는 역할을 맡습니다. 검색된 리소스를 장식하고 반환합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"서비스 로케이터: 이 컨텍스트는 서비스 로케이터 요청을 처리하며, 가져올 객체 유형, 사용자 정의 리소스, 자격 증명 등을 포함합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"프록시: 프록시는 중간자 역할을 수행하여 Backstage에서 Kubernetes API 서버로 요청을 전달합니다. 프록시에서 요청 또는 응답의 내용을 수정할 수도 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"인증 전략 맵: 인증 전략 맵은 인증 전략을 식별자 또는 키와 연결합니다. 클러스터 세부 정보 또는 인증 메타데이터와 같은 기준에 따라 인증 전략을 관리하고 검색하는 데 사용될 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Fetcher(검색기) 사용자 정의: 다중 Namespace 로켸터\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기사에서는 Kubernetes 클러스터에서 쿼리를 가져 오고 일부 동작을 변경하는 Fetcher 모듈의 사용자 정의에 중점을두려고합니다. 다음 GitHub 링크에서 기본 Fetcher 모듈을 찾을 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"때로는 보안 문제로 Kubernetes 클러스터에 대한 클러스터 역할 서비스 계정을 만들 수없으며 네임 스페이스 범위의 서비스 계정 만 만들 수 있습니다. 이 경우 다양한 네임 스페이스에서 다른 파드를로드해야하며 backstage.io/kubernetes-namespace 필드 내에 모든 네임 스페이스를 하나씩 지정해야합니다. 이를 달성하기 위해 컴포넌트를 주석 처리하고 다양한 네임 스페이스에서 파드를로드해야합니다. 구체적으로 KubernetesFetcher.ts 파일을 사용자 정의해야합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예를 들어, 다음 catalog-info.yaml 파일에서 kubernetes-namespace 필드에 쉼표로 구분 된 두 개의 네임 스페이스를 포함하는 것을 볼 수 있습니다. 이 두 네임 스페이스에서 파드를로드하려고합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"apiVersion: backstage.io/v1alpha1\\nkind: Component\\nmetadata:\\nname: order-service\\ndescription: 주문 서비스\\nlinks:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"title: 웹 사이트\\nurl: https://docs.spring.io/spring-cloud-config/docs/current/reference/html/\\nannotations:\\nbackstage.io/techdocs-ref: dir:.\\nlighthouse.com/website-url: https://docs.spring.io/spring-cloud-config/docs/current/reference/html/\\n'backstage.io/kubernetes-label-selector': 'app=order-service'\\n'backstage.io/kubernetes-namespace': 'spring-cloud-config-dev, spring-cloud-config-prod'\\n'backstage.io/kubernetes-cluster': dev-cluster\\nspec:\\ntype: 서비스\\nowner: me@example.com\\nlifecycle: POC\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이를 달성하기 위해 fetchObjectsForService 함수에서 약간의 변경을 해야합니다. 그러나 npm 모듈에서 내보내지 않았기 때문에 KubernetesClientBasedFetcher 클래스를 직접 확장할 수 없습니다. 대신 해당 클래스를 복사하고 일부 동작을 수정해야 합니다. 아래는 packages/backend/src/plugins/CustomKubernetesClientBasedFetcher.ts 파일에 있는 사용자 정의 모듈의 예시입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomKubernetesClientBasedFetcher\"\n        }), \" implements \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"KubernetesFetcher\"\n        }), \" {\\n  private readonly \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"logger\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LoggerService\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ logger }: KubernetesClientBasedFetcherOptions\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"logger\"\n        }), \" = logger;\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchObjectsForService\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"params\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ObjectFetchParams\"\n        }), \",\\n  ): \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Promise\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FetchResponseWrapper\"\n        }), \"> {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" namespaces = params.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"namespace\"\n        }), \" ? params.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"namespace\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"split\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\",\\\"\"\n        }), \") : [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"default\\\"\"\n        }), \"];\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" fetchResults = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Array\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"from\"\n        }), \"(params.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"objectTypesToFetch\"\n        }), \")\\n      .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"concat\"\n        }), \"(params.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"customResources\"\n        }), \")\\n      .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"flatMap\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"{ objectType, group, apiVersion, plural }\"\n          }), \") =>\"]\n        }), \"\\n        namespaces.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"map\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"namespace\"\n          }), \" =>\"]\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchResource\"\n        }), \"(\\n            params.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"clusterDetails\"\n        }), \",\\n            params.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"credential\"\n        }), \",\\n            group,\\n            apiVersion,\\n            plural,\\n            namespace.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"trim\"\n        }), \"(),\\n            params.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"labelSelector\"\n        }), \",\\n          ).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\\n              ....\\n          )\\n        )\\n      );\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Promise\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"all\"\n        }), \"(fetchResults).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(fetchResultsToResponseWrapper);\\n  }\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 스니펫의 전체 코드는 여기에서 확인할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"https://gist.github.com/mlkmhd/dc8a97449777b7dc0c30bff7b032e4d5\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"한 가지 더 해야 할 일이 있어요. 패키지/백엔드(src/index.ts) 파일을 수정하여 새로운 사용자 정의 모듈을 추가해야 해요. 아래와 같이요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"...\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { kubernetesFetcherExtensionPoint } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@backstage/plugin-kubernetes-node'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomKubernetesClientBasedFetcher\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./plugins/CustomKubernetesClientBasedFetcher'\"\n        }), \";\\n\\n...\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 쿠버네티스 플러그인\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" kubernetesModuleCustomFetcher = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createBackendModule\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"pluginId\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'kubernetes'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"moduleId\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'custom-fetcher'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"register\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"env\"\n        }), \") {\\n    env.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"registerInit\"\n        }), \"({\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"deps\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kubernetes\"\n        }), \": kubernetesFetcherExtensionPoint,\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"logger\"\n        }), \": coreServices.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"logger\"\n        }), \",\\n      },\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"init\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ kubernetes, logger }\"\n        }), \") {\\n        kubernetes.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addFetcher\"\n        }), \"(\\n          \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomKubernetesClientBasedFetcher\"\n        }), \"({\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"logger\"\n        }), \": logger,\\n          })\\n        );\\n      },\\n    });\\n  },\\n});\\n\\nbackend.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"add\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@backstage/plugin-kubernetes-backend/alpha'\"\n        }), \"));\\nbackend.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"add\"\n        }), \"(kubernetesModuleCustomFetcher);\\n\\nbackend.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"start\"\n        }), \"();\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한, 다른 네임스페이스의 역할에 연결된 서비스 계정을 생성하여 다른 팟에 액세스할 수 있도록 해야 해요:\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-17-CustomizingtheBackstageKubernetesPlugin_2.png\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"서비스 계정은 backstage 네임스페이스 내에 있어야 합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"v1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"ServiceAccount\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"metadata:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"backstage-sa\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"namespace:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"backstage-ns\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"B 네임스페이스 내의 역할은 다음과 같을 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"rbac.authorization.k8s.io/v1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Role\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"metadata:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"backstage-role\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"namespace:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"b-ns\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"rules:\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiGroups:\"\n        }), \" [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \"]\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"resources:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"pods\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"pods/log\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"configmaps\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"services\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"limitranges\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"resourcequotas\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"verbs:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"get\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"list\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"watch\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiGroups:\"\n        }), \" [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"apps\\\"\"\n        }), \"]\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"resources:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"deployments\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"replicasets\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"statefulsets\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"daemonsets\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"verbs:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"get\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"list\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"watch\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"C 네임스페이스 내부의 롤 바인딩은 다음과 같을 수 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion\"\n        }), \": rbac.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"authorization\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"k8s\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"io\"\n        }), \"/v1\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RoleBinding\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"metadata\"\n        }), \":\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": backstage-role-binding\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"namespace\"\n        }), \": b-ns\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"subjects\"\n        }), \":\\n- \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ServiceAccount\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": backstage-sa\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"namespace\"\n        }), \": backstage-ns\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"roleRef\"\n        }), \":\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Role\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": backstage-role\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiGroup\"\n        }), \": rbac.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"authorization\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"k8s\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"io\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"C 네임스페이스 또는 각 새로운 네임스페이스에 대해 롤과 롤 바인딩을 생성해야 해요. 이렇게 하면 해당 파드에 액세스하여 백스테이지 서비스 계정에 연결할 수 있어요. 그리고 이후에 app-config.yaml 파일 내에서 Kubernetes 플러그인을 아래와 같이 구성해야 해요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"...\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kubernetes\"\n        }), \":\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"serviceLocatorMethod\"\n        }), \": \\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'multiTenant'\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"clusterLocatorMethods\"\n        }), \":\\n    - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'config'\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"clusters\"\n        }), \":\\n        - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"url\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"https\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//kubernetes-cluster-api-server.example.com\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": dev-cluster\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"authProvider\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'serviceAccount'\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"skipTLSVerify\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"serviceAccountToken\"\n        }), \": ${\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"K8S_DEV_TOKEN\"\n        }), \"}\\n...\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러면 다음 명령어를 실행하여 애플리케이션을 빌드하고 실행할 수 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"$ cd backstage\\n$\\n$\\n$ yarn install\\n[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"/\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \"] package.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"json\"\n        }), \" 유효성 검사 중...\\n[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"/\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \"] 패키지 해결 중...\\nsuccess 이미 최신 상태입니다.\\n완료: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.92\"\n        }), \"초\\n$\\n$\\n$ yarn dev --config app-config.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"yaml\"\n        }), \"\\n[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"] app-config.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"yaml\"\n        }), \"에서 구성 로드됨, app-config.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"local\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"yaml\"\n        }), \"\\n[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"] <i> [webpack-dev-server] 프로젝트가 실행 중:\\n[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"] <i> [webpack-dev-server] \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Loopback\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"http\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//localhost:3000/\"\n        }), \"\\n[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"] <i> [webpack-dev-server] 웹팩이 아닌 내용은 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/home/coder/ecfd-backstage/packages/app/public'\"\n        }), \" 디렉터리에서 제공됨\\n[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"] <i> [webpack-dev-server] \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"404\"\n        }), \"에는 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/index.html'\"\n        }), \"로 대체함\\n[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"] <i> [webpack-dev-middleware] 번들 완료 대기중: /\\n[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"] \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MergedConfigSource\"\n        }), \"에서 설정 로드됨\\n[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"] \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2024\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"05\"\n        }), \"-12\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"T22\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"26\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"37.\"\n        }), \"074Z backstage 정보 구성 내에 레드액트될 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"개의 새로운 시크릿 발견됨 \\n[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"] \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2024\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"05\"\n        }), \"-12\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"T22\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"26\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"37.\"\n        }), \"082Z rootHttpRouter 정보 :\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7007\"\n        }), \"에서 수신 대기중\\n...\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런 다음 다음 catalog-info.yaml 파일을 backstage 구성에 추가해주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion\"\n        }), \": backstage.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"io\"\n        }), \"/v1alpha1\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"metadata\"\n        }), \":\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": order-service\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"description\"\n        }), \": 주문 서비스\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"links\"\n        }), \":\\n    - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"title\"\n        }), \": 웹사이트\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"url\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"https\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//docs.spring.io/spring-cloud-config/docs/current/reference/html/\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"annotations\"\n        }), \":\\n    backstage.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"io\"\n        }), \"/techdocs-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"ref\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dir\"\n        }), \":.\\n    lighthouse.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"com\"\n        }), \"/website-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"url\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"https\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//docs.spring.io/spring-cloud-config/docs/current/reference/html/\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'backstage.io/kubernetes-label-selector'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'app=order-service'\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'backstage.io/kubernetes-namespace'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'spring-cloud-config-dev,spring-cloud-config-prod'\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'backstage.io/kubernetes-cluster'\"\n        }), \": dev-cluster\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"spec\"\n        }), \":\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": 서비스\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"owner\"\n        }), \": me@example.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"com\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"lifecycle\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"POC\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"대시보드 안에 이렇게 테이블 태그를 변경해보세요:\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-17-CustomizingtheBackstageKubernetesPlugin_3.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 이미지에서 order-service는 spring-cloud-config-dev 네임스페이스에만 배포되어 있습니다. 그러나 이 서비스를 spring-cloud-config-prod 네임스페이스에 배포하면 거기서도 볼 수 있을 겁니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 글에서 사용된 모든 다이어그램은 다음 저장소에서 찾아볼 수 있습니다: [링크입니다.]\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 글은 Spotify가 개발한 Backstage의 Kubernetes 플러그인 내에서 사용자 정의가 어떻게 응용 프로그램 관리를 향상시키는지를 탐구합니다. Kubernetes 리소스의 통합된 보기를 제공함으로써 작업 흐름을 최적화하고 특정 요구 사항을 수용하는 방법에 대해 알 수 있습니다. Backstage의 아키텍처와 사용자 정의 옵션을 자세히 살펴보면, Kubernetes 클러스터에서 데이터를 검색하기 위해 Fetcher 모듈을 사용자 정의할 수 있는 내용을 다룹니다. 이를 통해 보안 제약 조건이 있는 상황에서도 여러 네임스페이스의 파드에 액세스할 수 있게 됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"블로그 후원하기 🍵\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"내 무료 기술 블로그를 즐기고 가치 있게 여기신다면, 여기에서 커피 한 잔 사주시는 것을 고려해주세요. 여러분의 지원은 품질 높은 글과 콘텐츠를 더 많이 제작하는 데 큰 도움이 됩니다. 제 코드를 개선하는 데 대한 피드백이나 제안 사항이 있으면, 이 게시물에 댓글을 남기거나 LinkedIn 메시지를 보내주세요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}