{"pageProps":{"post":{"title":"리액트에서 TS를 사용하는 Function 컴포넌트 스니펫","description":"","date":"2024-05-16 16:36","slug":"2024-05-16-ReactsnippetforFunctionComponentinTS","content":"\n\n알아야 할 사실을 직시합시다. React 없이는 살 수 없어요. React는 우리 삶을 정말 쉽게 만들어 주었죠. 요즘에는 웹 앱을 만드는 게 아주 쉽죠. 하지만 많은 보일러플레이트 때문에 때로는 지루할 수도 있어요. 새로운 기능을 제품에 추가할 때마다 React 함수 컴포넌트를 설정해야 하는 것 중 하나죠.\n\n아래는 조금 더 효율적으로 코드를 작성할 수 있는 간단한 코드 스니펫입니다. VS Code에서 설정으로 이동한 다음 사용자 스니펫 구성을 찾아서 typescriptreact.json 파일로 이동하세요.\n\n## 일반 TS — React 함수 컴포넌트\n\n<div class=\"content-ad\"></div>\n\n```js\n\"TS React Function Component\": {\n  \"prefix\": \"tsrfc\",\n  \"body\": [\n   \"import React from 'react';\",\n   \"\",\n   \"const ${1}: React.FC = () => {\",\n   \"\\treturn <div>${1}</div>;\",\n   \"};\",\n   \"\",\n   \"export default ${1};\"\n  ],\n  \"description\": \"TypeScript에서 React 함수 컴포넌트\",\n },\n```\n\n## TS — Props가 있는 React 함수 컴포넌트\n\n```js\n\"TS React Function Component With Props\": {\n  \"prefix\": \"tsrfcwp\",\n  \"body\": [\n   \"import React from 'react';\",\n   \"\",\n   \"type ${1}Props = {\",\n   \"\\tlabel: string\",\n   \"};\",\n   \"\",\n   \"const ${1}: React.FC<${1}Props> = ({ label }) => {\",\n   \"\\treturn <div>{label}</div>;\",\n   \"};\",\n   \"\",\n   \"export default ${1};\"\n  ],\n  \"description\": \"TypeScript에서 Props가 있는 React 함수 컴포넌트\",\n },\n```\n\n## TS — Children이 있는 React 함수 컴포넌트\n\n<div class=\"content-ad\"></div>\n\n```js\n\"TS React Function Component With Children\": {\n  \"prefix\": \"tsrfcwc\",\n  \"body\": [\n    \"import React, { PropsWithChildren } from 'react';\",\n    \"\",\n    \"\",\n    \"const ${1}: React.FC<PropsWithChildren> = ({ children }) => {\",\n    \"\\treturn <div>{children}</div>;\",\n    \"};\",\n    \"\",\n    \"export default ${1};\"\n  ],\n  \"description\": \"React Function Component with Children in TypeScript\",\n }\n```\n\n위와 같이 보입니다 —\n\n즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-05-16-ReactsnippetforFunctionComponentinTS_0.png"},"coverImage":"/assets/img/2024-05-16-ReactsnippetforFunctionComponentinTS_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"알아야 할 사실을 직시합시다. React 없이는 살 수 없어요. React는 우리 삶을 정말 쉽게 만들어 주었죠. 요즘에는 웹 앱을 만드는 게 아주 쉽죠. 하지만 많은 보일러플레이트 때문에 때로는 지루할 수도 있어요. 새로운 기능을 제품에 추가할 때마다 React 함수 컴포넌트를 설정해야 하는 것 중 하나죠.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래는 조금 더 효율적으로 코드를 작성할 수 있는 간단한 코드 스니펫입니다. VS Code에서 설정으로 이동한 다음 사용자 스니펫 구성을 찾아서 typescriptreact.json 파일로 이동하세요.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"일반 TS — React 함수 컴포넌트\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"TS React Function Component\\\"\"\n        }), \": {\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prefix\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"tsrfc\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"body\\\"\"\n        }), \": [\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"import React from 'react';\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"const ${1}: React.FC = () => {\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\\treturn <div>${1}</div>;\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"};\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"export default ${1};\\\"\"\n        }), \"\\n  ],\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"description\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"TypeScript에서 React 함수 컴포넌트\\\"\"\n        }), \",\\n },\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TS — Props가 있는 React 함수 컴포넌트\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"TS React Function Component With Props\\\"\"\n        }), \": {\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prefix\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"tsrfcwp\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"body\\\"\"\n        }), \": [\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"import React from 'react';\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"type ${1}Props = {\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\\tlabel: string\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"};\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"const ${1}: React.FC<${1}Props> = ({ label }) => {\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\\treturn <div>{label}</div>;\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"};\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \",\\n   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"export default ${1};\\\"\"\n        }), \"\\n  ],\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"description\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"TypeScript에서 Props가 있는 React 함수 컴포넌트\\\"\"\n        }), \",\\n },\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TS — Children이 있는 React 함수 컴포넌트\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"TS React Function Component With Children\\\"\"\n        }), \": {\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prefix\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"tsrfcwc\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"body\\\"\"\n        }), \": [\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"import React, { PropsWithChildren } from 'react';\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"const ${1}: React.FC<PropsWithChildren> = ({ children }) => {\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\\treturn <div>{children}</div>;\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"};\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"export default ${1};\\\"\"\n        }), \"\\n  ],\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"description\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"React Function Component with Children in TypeScript\\\"\"\n        }), \",\\n }\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위와 같이 보입니다 —\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"즐거운 코딩하세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}