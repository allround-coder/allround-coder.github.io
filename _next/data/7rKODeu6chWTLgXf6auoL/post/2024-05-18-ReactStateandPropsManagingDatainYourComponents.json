{"pageProps":{"post":{"title":"React State와 Props 컴포넌트에서 데이터 관리하기","description":"","date":"2024-05-18 22:14","slug":"2024-05-18-ReactStateandPropsManagingDatainYourComponents","content":"\n\n## 컴포넌트에서 데이터 관리하기\n\n## 소개\n\nReact에서 데이터를 효과적으로 관리하는 것은 동적이고 상호작용적인 애플리케이션을 구축하는 데 중요합니다. 이를 돕는 두 가지 핵심 개념은 state와 props입니다. 이러한 개념을 올바르게 사용하는 방법을 이해하면 React 애플리케이션의 유지보수성과 기능성이 크게 향상됩니다. 이 포스트에서는 props와 state가 무엇인지, props를 통해 데이터를 전달하는 방법, 로컬 상태를 관리하는 방법, 그리고 상태를 공유 데이터 처리를 위해 끌어올리는 방법에 대해 살펴보겠습니다.\n\n# Props와 State 설명\n\n<div class=\"content-ad\"></div>\n\n## 속성\n\nProps(속성의 줄임말)은 한 컴포넌트에서 다른 컴포넌트로 데이터를 전달하는 데 사용되는 읽기 전용 속성입니다. 일반적으로 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때 사용됩니다. Props를 사용하여 컴포넌트를 재사용하기 쉽게 만들 수 있습니다.\n\nProps 사용 예시\n\n```js\nfunction Greeting(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\nfunction App() {\n  return (\n    <div>\n      <Greeting name=\"Alice\" />\n      <Greeting name=\"Bob\" />\n    </div>\n  );\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 예시에서 Greeting 컴포넌트는 name prop을 받아와 개인화된 인사를 렌더링합니다.\n\n## State\n\nState는 컴포넌트 수명 동안 변경될 수 있는 데이터를 보유하는 내장 객체입니다. props와 달리 state는 컴포넌트 내에서 관리되며 `setState` 함수를 사용하여 수정할 수 있습니다.\n\nState 사용 예시\n\n<div class=\"content-ad\"></div>\n\n```js\nimport React, { useState } from \"react\";\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\nfunction App() {\n  return (\n    <div>\n      <Counter />\n    </div>\n  );\n}\n```\n\n이 예제에서 `Counter` 컴포넌트는 `useState` 훅을 사용하여 자체 상태를 관리하며, 버튼이 클릭될 때 동적으로 count 값을 업데이트할 수 있습니다.\n\n# Props를 통한 데이터 전달\n\nProps를 통한 데이터 전달은 간단합니다. 부모 컴포넌트에서 속성을 정의하고 이를 props를 사용하여 자식 컴포넌트에서 액세스하면 됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n예시: 다중 프롭 전달\n\n```js\nfunction UserInfo(props) {\n  return (\n    <div>\n       <h2>{props.name}</h2> <p>Age: {props.age}</p> \n      <p>Location: {props.location}</p> \n    </div>\n  );\n}\nfunction App() {\n  return (\n    <div>\n       <UserInfo name=\"Alice\" age={25} location=\"뉴욕\" />\n       <UserInfo name=\"Bob\" age={30} location=\"샌프란시스코\" /> \n    </div>\n  );\n}\n```\n\n여기서 `UserInfo` 컴포넌트는 `name`, `age`, `location`을 프롭으로 받아와서 표시합니다.\n\n# 로컬 상태 관리\n\n<div class=\"content-ad\"></div>\n\n로컬 상태를 관리하는 방법은 함수 컴포넌트에서 `useState` 훅을 사용하거나 클래스 컴포넌트에서 `this.state` 및 `this.setState` 메서드를 사용하는 것을 포함합니다. 현대적인 React에서는 함수 컴포넌트가 더 일반적으로 사용되므로 그에 중점을 두겠습니다.\n\n예시: 폼 상태 관리\n\n```js\nimport React, { useState } from \"react\";\nfunction Form() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    alert(\"제출 내용: \" + inputValue);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n       <input type=\"text\" value={inputValue} onChange={handleChange} /> \n      <button type=\"submit\">제출</button> \n    </form>\n  );\n}\nfunction App() {\n  return (\n    <div>\n       <Form /> \n    </div>\n  );\n}\n```\n\n이 예시에서 `Form` 컴포넌트는 `useState` 훅을 사용하여 입력 값 상태를 관리합니다. `handleChange` 함수는 상태를 업데이트하고, `handleSubmit` 함수는 폼 제출을 처리합니다.\n\n<div class=\"content-ad\"></div>\n\n# 상태 올리기\n\n상태를 올리는 것은 여러 컴포넌트가 동일한 상태를 공유하고 상호작용해야 할 때 사용하는 기술입니다. 공유된 상태는 컴포넌트의 가장 가까운 공통 조상에 의해 관리됩니다.\n\n예제: 상태 올리기\n\n```js\nimport React, { useState } from \"react\";\nfunction TemperatureInput(props) {\n  const handleChange = (event) => {\n    props.onTemperatureChange(event.target.value);\n  };\n  return (\n    <div>\n       <label>{props.scale} 온도:</label>\n       <input type=\"text\" value={props.temperature} onChange={handleChange} /> \n    </div>\n  );\n}\nfunction TemperatureCalculator() {\n  const [temperature, setTemperature] = useState(\"\");\n  const handleCelsiusChange = (temperature) => {\n    setTemperature(temperature);\n  };\n  const handleFahrenheitChange = (temperature) => {\n    setTemperature(temperature);\n  };\n  return (\n    <div>\n       \n      <TemperatureInput\n        scale=\"섭씨\"\n        temperature={temperature}\n        onTemperatureChange={handleCelsiusChange}\n      />\n       \n      <TemperatureInput\n        scale=\"화씨\"\n        temperature={temperature}\n        onTemperatureChange={handleFahrenheitChange}\n      />\n       \n    </div>\n  );\n}\nfunction App() {\n  return (\n    <div>\n       <TemperatureCalculator /> \n    </div>\n  );\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 예시에서 `TemperatureCalculator` 컴포넌트는 온도 값을 관리하기 위해 상태를 끌어올립니다. 그런 다음 해당 상태는 `TemperatureInput` 컴포넌트에 props를 통해 전달됩니다. 이를 통해 두 입력란이 동일한 상태를 반영하도록 보장할 수 있습니다.\n\n# 결론\n\n프롭과 상태를 이해하고 효과적으로 활용하는 것은 React 개발에 기초적입니다. 프롭을 통해 데이터와 설정을 컴포넌트 트리 아래로 전달하고, 상태를 통해 컴포넌트가 동적 데이터를 관리하고 반응하도록 할 수 있습니다. 이러한 개념과 상태 끌어올리기와 같은 기술을 숙달하여 보다 견고하고 유지보수 가능하며 상호작용 가능한 애플리케이션을 구축할 수 있습니다.\n\n제공된 예시를 활용하고 이러한 실천사항을 프로젝트에 통합해 보세요. 궁금한 사항이 있거나 추가 설명이 필요하면 아래에 댓글을 남겨주세요! 즐거운 코딩 하세요!","ogImage":{"url":"/assets/img/2024-05-18-ReactStateandPropsManagingDatainYourComponents_0.png"},"coverImage":"/assets/img/2024-05-18-ReactStateandPropsManagingDatainYourComponents_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"컴포넌트에서 데이터 관리하기\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"소개\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React에서 데이터를 효과적으로 관리하는 것은 동적이고 상호작용적인 애플리케이션을 구축하는 데 중요합니다. 이를 돕는 두 가지 핵심 개념은 state와 props입니다. 이러한 개념을 올바르게 사용하는 방법을 이해하면 React 애플리케이션의 유지보수성과 기능성이 크게 향상됩니다. 이 포스트에서는 props와 state가 무엇인지, props를 통해 데이터를 전달하는 방법, 로컬 상태를 관리하는 방법, 그리고 상태를 공유 데이터 처리를 위해 끌어올리는 방법에 대해 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Props와 State 설명\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"속성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Props(속성의 줄임말)은 한 컴포넌트에서 다른 컴포넌트로 데이터를 전달하는 데 사용되는 읽기 전용 속성입니다. 일반적으로 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때 사용됩니다. Props를 사용하여 컴포넌트를 재사용하기 쉽게 만들 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Props 사용 예시\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Greeting\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"props\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          }), \"Hello, {props.name}!\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h1\"\n            }), \">\"]\n          })]\n        }), \";\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"App\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Greeting\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Alice\\\"\"\n            }), \" />\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Greeting\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Bob\\\"\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예시에서 Greeting 컴포넌트는 name prop을 받아와 개인화된 인사를 렌더링합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"State\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"State는 컴포넌트 수명 동안 변경될 수 있는 데이터를 보유하는 내장 객체입니다. props와 달리 state는 컴포넌트 내에서 관리되며 \", _jsx(_components.code, {\n        children: \"setState\"\n      }), \" 함수를 사용하여 수정할 수 있습니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"State 사용 예시\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Counter\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [count, setCount] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"Count: {count}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onClick\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{()\"\n            }), \" =>\"]\n          }), \" setCount(count + 1)}>Increment\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"App\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Counter\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 예제에서 \", _jsx(_components.code, {\n        children: \"Counter\"\n      }), \" 컴포넌트는 \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" 훅을 사용하여 자체 상태를 관리하며, 버튼이 클릭될 때 동적으로 count 값을 업데이트할 수 있습니다.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Props를 통한 데이터 전달\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Props를 통한 데이터 전달은 간단합니다. 부모 컴포넌트에서 속성을 정의하고 이를 props를 사용하여 자식 컴포넌트에서 액세스하면 됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시: 다중 프롭 전달\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"UserInfo\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"props\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h2\"\n            }), \">\"]\n          }), \"{props.name}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"h2\"\n            }), \">\"]\n          }), \" \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"Age: {props.age}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \" \\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"Location: {props.location}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \" \\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"App\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"UserInfo\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Alice\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"age\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{25}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"location\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"뉴욕\\\"\"\n            }), \" />\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"UserInfo\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Bob\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"age\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{30}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"location\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"샌프란시스코\\\"\"\n            }), \" />\"]\n          }), \" \\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"여기서 \", _jsx(_components.code, {\n        children: \"UserInfo\"\n      }), \" 컴포넌트는 \", _jsx(_components.code, {\n        children: \"name\"\n      }), \", \", _jsx(_components.code, {\n        children: \"age\"\n      }), \", \", _jsx(_components.code, {\n        children: \"location\"\n      }), \"을 프롭으로 받아와서 표시합니다.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"로컬 상태 관리\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"로컬 상태를 관리하는 방법은 함수 컴포넌트에서 \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" 훅을 사용하거나 클래스 컴포넌트에서 \", _jsx(_components.code, {\n        children: \"this.state\"\n      }), \" 및 \", _jsx(_components.code, {\n        children: \"this.setState\"\n      }), \" 메서드를 사용하는 것을 포함합니다. 현대적인 React에서는 함수 컴포넌트가 더 일반적으로 사용되므로 그에 중점을 두겠습니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시: 폼 상태 관리\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Form\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [inputValue, setInputValue] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleChange\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"event\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setInputValue\"\n        }), \"(event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"target\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \");\\n  };\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleSubmit\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"event\"\n        }), \") => {\\n    event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"preventDefault\"\n        }), \"();\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"alert\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"제출 내용: \\\"\"\n        }), \" + inputValue);\\n  };\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"form\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onSubmit\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleSubmit}\"\n            }), \">\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{inputValue}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleChange}\"\n            }), \" />\"]\n          }), \" \\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"submit\\\"\"\n            }), \">\"]\n          }), \"제출\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \">\"]\n          }), \" \\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"form\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"App\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Form\"\n            }), \" />\"]\n          }), \" \\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 예시에서 \", _jsx(_components.code, {\n        children: \"Form\"\n      }), \" 컴포넌트는 \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" 훅을 사용하여 입력 값 상태를 관리합니다. \", _jsx(_components.code, {\n        children: \"handleChange\"\n      }), \" 함수는 상태를 업데이트하고, \", _jsx(_components.code, {\n        children: \"handleSubmit\"\n      }), \" 함수는 폼 제출을 처리합니다.\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"상태 올리기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"상태를 올리는 것은 여러 컴포넌트가 동일한 상태를 공유하고 상호작용해야 할 때 사용하는 기술입니다. 공유된 상태는 컴포넌트의 가장 가까운 공통 조상에 의해 관리됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예제: 상태 올리기\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"TemperatureInput\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"props\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleChange\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"event\"\n        }), \") => {\\n    props.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"onTemperatureChange\"\n        }), \"(event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"target\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \");\\n  };\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"label\"\n            }), \">\"]\n          }), \"{props.scale} 온도:\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"label\"\n            }), \">\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"input\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"type\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"text\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{props.temperature}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleChange}\"\n            }), \" />\"]\n          }), \" \\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"TemperatureCalculator\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [temperature, setTemperature] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleCelsiusChange\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"temperature\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setTemperature\"\n        }), \"(temperature);\\n  };\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"handleFahrenheitChange\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"temperature\"\n        }), \") => {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setTemperature\"\n        }), \"(temperature);\\n  };\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n       \\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"TemperatureInput\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"scale\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"섭씨\\\"\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"temperature\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{temperature}\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onTemperatureChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleCelsiusChange}\"\n            }), \"\\n      />\"]\n          }), \"\\n       \\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"TemperatureInput\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"scale\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"화씨\\\"\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"temperature\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{temperature}\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onTemperatureChange\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{handleFahrenheitChange}\"\n            }), \"\\n      />\"]\n          }), \"\\n       \\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"App\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"TemperatureCalculator\"\n            }), \" />\"]\n          }), \" \\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 예시에서 \", _jsx(_components.code, {\n        children: \"TemperatureCalculator\"\n      }), \" 컴포넌트는 온도 값을 관리하기 위해 상태를 끌어올립니다. 그런 다음 해당 상태는 \", _jsx(_components.code, {\n        children: \"TemperatureInput\"\n      }), \" 컴포넌트에 props를 통해 전달됩니다. 이를 통해 두 입력란이 동일한 상태를 반영하도록 보장할 수 있습니다.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"프롭과 상태를 이해하고 효과적으로 활용하는 것은 React 개발에 기초적입니다. 프롭을 통해 데이터와 설정을 컴포넌트 트리 아래로 전달하고, 상태를 통해 컴포넌트가 동적 데이터를 관리하고 반응하도록 할 수 있습니다. 이러한 개념과 상태 끌어올리기와 같은 기술을 숙달하여 보다 견고하고 유지보수 가능하며 상호작용 가능한 애플리케이션을 구축할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"제공된 예시를 활용하고 이러한 실천사항을 프로젝트에 통합해 보세요. 궁금한 사항이 있거나 추가 설명이 필요하면 아래에 댓글을 남겨주세요! 즐거운 코딩 하세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}