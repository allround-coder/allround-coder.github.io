{"pageProps":{"post":{"title":"RxJS Creation Operators 마스터하기","description":"","date":"2024-05-18 22:03","slug":"2024-05-18-MasteringRxJSCreationOperatorsUnlockingthePowerofDataStreams","content":"\n\n반응형 프로그래밍은 현대 웹 개발에서 중요한 기반 기술이 되었으며 비동기 데이터 스트림을 처리하는 견고한 방법을 제공합니다. RxJS 또는 JavaScript용 반응형 익스텐션은 JavaScript에서 반응형 프로그래밍을 구현하는 가장 인기있는 라이브러리 중 하나입니다. 생성 연산자는 여러 기능 중에서도 관찰 가능한 스트림을 생성하는 데 필수적인 도구로 강조됩니다. 이 블로그 포스트에서는 다양한 RxJS 생성 연산자, 작동 방식 및 각각에 대한 실제 사용 사례를 살펴보겠습니다.\n\n![image](/assets/img/2024-05-18-MasteringRxJSCreationOperatorsUnlockingthePowerofDataStreams_0.png)\n\n## RxJS 생성 연산자란?\n\n이러한 연산자는 다양한 데이터 소스에서 새로운 Observables를 생성합니다. 이러한 연산자는 개발자들이 작업할 데이터 스트림의 소스를 정의할 수 있도록 해주기 때문에 중요합니다. 이러한 연산자를 이해하는 것은 RxJS의 전체 기능을 최대한 활용하는 데 필수적입니다.\n\n<div class=\"content-ad\"></div>\n\n# Creation Operators 목록\n\n(참고: “⭐ — 일반적으로 사용됨”)\n\n- ⭐ajax: Ajax 요청을 위한 observable을 생성하는 데 사용됩니다.\n- bindCallback: 콜백 스타일 함수를 observable로 변환합니다.\n- bindNodeCallback: bindCallback과 유사하지만, Node.js 스타일 콜백(error-first)을 위한 것입니다.\n- defer: observable의 생성을 구독 지점까지 지연시킵니다.\n- empty: 어떤 값도 방출하지 않고 즉시 완료되는 observable을 생성합니다.\n- ⭐from: 다양한 다른 객체 및 데이터 유형을 observable로 변환합니다.\n- ⭐fromEvent: DOM 이벤트 대상 또는 Node.js EventEmitter에서 이벤트를 방출하는 observable을 생성합니다.\n- fromEventPattern: 주어진 addHandler/removeHandler 함수 쌍에서 observable을 생성합니다.\n- generate: 제공된 반복 함수에 기반하여 시간이 지남에 따라 값들을 생성합니다.\n- ⭐interval: 지정된 간격에서 증가하는 숫자를 방출하는 observable을 생성합니다.\n- ⭐of: 값의 시퀀스를 observable 시퀀스로 방출합니다.\n- range: 지정된 범위 내의 숫자 시퀀스를 방출합니다.\n- throwError: 오류를 방출하는 observable을 생성합니다.\n- timer: 지정된 지연 후 단일 값을 방출합니다.\n- iif: 두 가지 가능한 원본 observable 중 하나에 조건부로 구독합니다.\n\n이제 Creation Operator를 하나씩 검토하고 예제를 통해 학습하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n# Ajax\n\nXMLHttpRequest API를 사용하여 HTTP 요청을 보냅니다.\n\n```js\n/* 실시간 사용 사례: 요청에서 반환되는 응답 객체를 방출하는 Observable */\nimport { ajax } from 'rxjs/ajax';\n\nconst githubUsers = `https://api.github.com/users?per_page=2`;\nconst users = ajax(githubUsers);\n\nconst subscribe = users.subscribe(\n  res => console.log(res),\n  err => console.error(err)\n);\n```\n\n```js\n/* 실시간 사용 사례: 요청에서 반환되는 응답 객체의 json 키만 방출하는 Observable */\nimport { ajax } from 'rxjs/ajax';\n\nconst githubUsers = `https://api.github.com/users?per_page=2`;\nconst users = ajax.getJSON(githubUsers);\n\nconst subscribe = users.subscribe(\n  res => console.log(res),\n  err => console.error(err)\n);\n```  \n\n<div class=\"content-ad\"></div>\n\n# bindCallback\n\n콜백 스타일의 함수를 Observable로 변환합니다.\n\n```js\n/* 실시간 사용 사례: jQuery의 getJSON을 Observable API로 변환하는 방법 */\n\nimport { bindCallback } from 'rxjs';\nimport * as jQuery from 'jquery';\n\nconst getJSONAsObservable = bindCallback(jQuery.getJSON);\nconst result = getJSONAsObservable('/my/url');\nresult.subscribe(x => console.log(x), e => console.error(e));\n```\n\n# bindNodeCallback\n\n<div class=\"content-ad\"></div>\n\n- 노드 스타일 콜백 함수를 Observable로 변환합니다.\n\n```js\n/* 실시간 사용 사례: 파일 시스템에서 파일 읽어오기 및 데이터를 Observable로 얻기 */\nimport { bindNodeCallback } from 'rxjs';\nimport * as fs from 'fs';\n\nconst readFileAsObservable = bindNodeCallback(fs.readFile);\nconst result = readFileAsObservable('./roadNames.txt', 'utf8');\n\nresult.subscribe(\n  x => console.log(x), // 파일 내용 처리\n  e => console.error(e) // 오류 처리\n);\n```\n\n- `defer`\n\nSubscriber가 Observable에 구독할 때까지 실행을 지연시키는 Observable를 생성합니다.\n\n<div class=\"content-ad\"></div>\n\nRxJS에서 defer는 Observable을 생성하는 함수입니다. 주요 목적은 Observable이 구독될 때까지 Observable의 생성을 지연하는 것입니다. 이는 새로운 옵저버가 Observable을 구독할 때마다 설정 또는 초기화 논리가 실행되어야 하는 시나리오에서 유용합니다.\n\n```js\n/* 실시간 사용 사례: `of`를 사용하여 난수 생성 */\nimport { of, defer } from 'rxjs';\nconst randomOf$ = of(Math.random());\n\n// 랜덤 숫자 생성을 위해 `defer` 사용\nconst randomDefer$ = defer(() => of(Math.random()));\n\n// `randomOf$`를 여러 번 구독\nrandomOf$.subscribe(randomNumber => console.log('랜덤 숫자 (of):', randomNumber));\nrandomOf$.subscribe(randomNumber => console.log('랜덤 숫자 (of):', randomNumber));\nrandomOf$.subscribe(randomNumber => console.log('랜덤 숫자 (of):', randomNumber));\n\n// `randomDefer$`를 여러 번 구독\nrandomDefer$.subscribe(randomNumber => console.log('랜덤 숫자 (defer):', randomNumber));\nrandomDefer$.subscribe(randomNumber => console.log('랜덤 숫자 (defer):', randomNumber));\nrandomDefer$.subscribe(randomNumber => console.log('랜덤 숫자 (defer):', randomNumber));\n```\n\nOutput\n\n```js\n랜덤 숫자 (of): 0.123456789\n랜덤 숫자 (of): 0.123456789\n랜덤 숫자 (of): 0.123456789\n랜덤 숫자 (defer): 0.987654321\n랜덤 숫자 (defer): 0.654321987\n랜덤 숫자 (defer): 0.123456789\n```\n\n<div class=\"content-ad\"></div>\n\n# 빈\n\n빈 Observable을 생성하고 즉시 완료 콜백을 호출합니다.\n\nRxJS의 빈 연산자는 값을 방출하지 않고 즉시 완료되는 Observable을 생성합니다. 값이 방출될 필요가 없지만 완료를 신호해야 하는 경우에 유용합니다.\n\n```js\n/* 실시간 사용 사례: 빈 Observable 생성 */\nimport { empty } from 'rxjs';\nconst emptyObservable$ = empty();\n// 빈 Observable에 구독하기\nemptyObservable$.subscribe({\n  next: () => console.log('다음 값'), // 호출되지 않음\n  complete: () => console.log('완료됨') // 즉시 호출됨\n});\n```\n\n<div class=\"content-ad\"></div>\n\n# from\n\n배열, 프로미스, 이터러블 객체 또는 Observable과 유사한 객체에서 Observable을 생성합니다.\n\n```js\nimport { from } from 'rxjs';\nconst arraySource = from([1, 2, 3, 4, 5]);\nconst subscribe = arraySource.subscribe(val => console.log(val));\n//출력: 1, 2, 3, 4, 5\n```\n\n```js\nimport { from } from 'rxjs';\nconst source = from('Hello World');\nconst subscribe = source.subscribe(val => console.log(val));\n//출력: 'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd'\n```\n\n<div class=\"content-ad\"></div>\n\n\n```js\nconst numbers = from(new Promise((resolve, reject) => resolve('Hello World')));\nnumbers.subscribe((data) => {\n  console.log(data);\n});\n//output: Hello World\n```\n\n# fromEvent\n\n- 이벤트에서 Observable을 생성합니다.\n\n```js\n/* 실시간 사용 사례: 사용자가 화면을 클릭할 때 시간 추적 */\nimport { fromEvent } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst source = fromEvent(document, 'click');\nconst example = source.pipe(map(event => event.timeStamp));\nconst subscribe = example.subscribe(val => console.log(`이벤트 시간: ${val / 1000} 초`));\n```\n\n<div class=\"content-ad\"></div>\n\n출력\n\n```js\n이벤트 시간: 5.418900000000373 초\n이벤트 시간: 7.552900000000372 초\n```\n\n# fromEventPattern\n\nfromEventPattern은 이벤트를 반환하는 함수에서 Observable을 생성합니다. fromEventPattern을 사용하면 이벤트 처리기 함수를 등록하는 API를 Observable로 변환할 수 있습니다. fromEvent과 유사하지만 훨씬 유연합니다. fromEvent의 모든 사용 사례는 fromEventPattern으로 쉽게 처리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 생성\n\n함수를 기반으로 값을 생성하는 옵저버블을 생성합니다.\n\n```js\n/* 실시간 사용 사례: 숫자 시퀀스 생성 */\n\nimport { generate } from 'rxjs';\nconst result = generate(0, x => x < 3, x => x + 1, x => x);\nresult.subscribe(x => console.log(x));\n\n// 결과:\n// 0\n// 1\n// 2\n```\n\n# 간격\n\n<div class=\"content-ad\"></div>\n\n일정한 간격으로 정수 시퀀스를 방출하는 Observable을 생성합니다.\n\n```js\n/* 실시간 사용 사례: 1초 간격으로 값 시퀀스를 방출 */\nimport { interval } from 'rxjs';\n\n// 1초마다 시퀀스 값 방출\nconst source = interval(1000);\nconst subscribe = source.subscribe(val => console.log(val));\n//결과: 0, 1, 2, 3, 4, 5....\n```\n\n# of\n\n- 지정된 값을 순서대로 방출하는 Observable을 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { of } from 'rxjs';\n\nof(10, 20, 30)\n  .subscribe({\n    next: value => console.log('다음 값:', value),\n    error: err => console.log('에러 발생:', err),\n    complete: () => console.log('완료'),\n  });\n\n// 결과\n// 다음 값: 10\n// 다음 값: 20\n// 다음 값: 30\n// 완료\n```\n\n# range\n\n지정된 범위 내에서 숫자의 시퀀스를 방출하는 Observable을 생성합니다.\n\n```js\n/* 실시간 사용 사례: 1에서 10까지 순차적으로 방출 */\n\nimport { range } from 'rxjs';\nconst source = range(1, 10);\nconst example = source.subscribe(val => console.log(val));\n// 출력: 1,2,3,4,5,6,7,8,9,10\n```\n\n<div class=\"content-ad\"></div>\n\n# throwError\n\n- 구독 시 오류를 발생시키는 Observable을 생성합니다.\n\n```js\n/* 구독 시 오류 발생 */\nimport { throwError } from 'rxjs';\n// 특정 값과 함께 오류를 발생시킵니다.\n\nconst source = throwError('오류 발생!');\n// 출력: 'Error: 오류 발생!'\n\nconst subscribe = source.subscribe({\n  next: val => console.log(val),\n  complete: () => console.log('완료!'),\n  error: val => console.log(`오류: ${val}`)\n});\n```\n\n# timer\n\n<div class=\"content-ad\"></div>\n\n- 특정 시간 간격 후에 발행을 시작하고 정수 시퀀스를 발행하는 Observable를 생성합니다.\n\n```js\n/* 실제 시나리오: 타이머는 1초 후에 발행을 시작하고 그 이후 매 2초마다 값을 발행합니다 */\n\nimport { timer } from 'rxjs';\n\n/*\n  timer 함수는 두 번째 인자를 가지며, 연속적으로 값들을 발행하는 빈도를 정의합니다.\n  이 경우, 1초 후에 첫 번째 값을 발행하고 그 이후 2초마다 값을 발행합니다.\n*/\nconst source = timer(1000, 2000);\n//출력: 0,1,2,3,4,5......\nconst subscribe = source.subscribe(val => console.log(val));\n```\n\n# iif\n\n조건에 따라 함수의 출력을 발행하는 Observable를 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n/* Observable에 대한 액세스 제어 */\n\nimport { iif, of, EMPTY } from 'rxjs';\n \nlet accessGranted;\nconst observableIfYouHaveAccess = iif(\n  () => accessGranted,\n  of('액세스가 허용된 것 같아요...'),\n  EMPTY\n);\n \naccessGranted = true;\nobservableIfYouHaveAccess.subscribe({\n  next: value => console.log(value),\n  complete: () => console.log('끝')\n});\n \n// 출력:\n// '액세스가 허용된 것 같아요...'\n// '끝'\n \naccessGranted = false;\nobservableIfYouHaveAccess.subscribe({\n  next: value => console.log(value),\n  complete: () => console.log('끝')\n});\n \n// 출력:\n// '끝'\n```\n\n요약하면, RxJS Creation Operators는 JavaScript에서 반응형 프로그래밍의 기본 구성 요소입니다. 다양한 데이터 소스에서 Observable을 생성할 수 있게 해줌으로써, 이러한 연산자는 비동기 데이터 스트림을 효율적으로 처리할 수 있도록 개발자들을 지원합니다. API에서 데이터를 가져오는 ajax, 사용자 상호 작용에 반응하는 fromEvent, interval 및 timer를 사용하여 작업을 예약하는 등, 이러한 연산자들은 반응형 애플리케이션에서 데이터 흐름을 유연하고 강력하게 관리할 수 있는 방법을 제공합니다. 이러한 생성 연산자를 숙달하는 것은 RxJS의 모든 잠재력을 발휘하고 반응형 프로그래밍을 통한 반응형, 확장 가능하고 유지보수 가능한 애플리케이션을 구축하는 데 필수적입니다. 이 연산자들을 깊이 이해하고 그 기능을 실험하며, RxJS를 활용한 반응형 프로그래밍 마스터의 길에 나아가 보세요.\n\n즐거운 코딩되세요!\n","ogImage":{"url":"/assets/img/2024-05-18-MasteringRxJSCreationOperatorsUnlockingthePowerofDataStreams_0.png"},"coverImage":"/assets/img/2024-05-18-MasteringRxJSCreationOperatorsUnlockingthePowerofDataStreams_0.png","tag":["Tech"],"readingTime":9},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"반응형 프로그래밍은 현대 웹 개발에서 중요한 기반 기술이 되었으며 비동기 데이터 스트림을 처리하는 견고한 방법을 제공합니다. RxJS 또는 JavaScript용 반응형 익스텐션은 JavaScript에서 반응형 프로그래밍을 구현하는 가장 인기있는 라이브러리 중 하나입니다. 생성 연산자는 여러 기능 중에서도 관찰 가능한 스트림을 생성하는 데 필수적인 도구로 강조됩니다. 이 블로그 포스트에서는 다양한 RxJS 생성 연산자, 작동 방식 및 각각에 대한 실제 사용 사례를 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-MasteringRxJSCreationOperatorsUnlockingthePowerofDataStreams_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"RxJS 생성 연산자란?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 연산자는 다양한 데이터 소스에서 새로운 Observables를 생성합니다. 이러한 연산자는 개발자들이 작업할 데이터 스트림의 소스를 정의할 수 있도록 해주기 때문에 중요합니다. 이러한 연산자를 이해하는 것은 RxJS의 전체 기능을 최대한 활용하는 데 필수적입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Creation Operators 목록\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"(참고: “⭐ — 일반적으로 사용됨”)\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"⭐ajax: Ajax 요청을 위한 observable을 생성하는 데 사용됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"bindCallback: 콜백 스타일 함수를 observable로 변환합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"bindNodeCallback: bindCallback과 유사하지만, Node.js 스타일 콜백(error-first)을 위한 것입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"defer: observable의 생성을 구독 지점까지 지연시킵니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"empty: 어떤 값도 방출하지 않고 즉시 완료되는 observable을 생성합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"⭐from: 다양한 다른 객체 및 데이터 유형을 observable로 변환합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"⭐fromEvent: DOM 이벤트 대상 또는 Node.js EventEmitter에서 이벤트를 방출하는 observable을 생성합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"fromEventPattern: 주어진 addHandler/removeHandler 함수 쌍에서 observable을 생성합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"generate: 제공된 반복 함수에 기반하여 시간이 지남에 따라 값들을 생성합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"⭐interval: 지정된 간격에서 증가하는 숫자를 방출하는 observable을 생성합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"⭐of: 값의 시퀀스를 observable 시퀀스로 방출합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"range: 지정된 범위 내의 숫자 시퀀스를 방출합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"throwError: 오류를 방출하는 observable을 생성합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"timer: 지정된 지연 후 단일 값을 방출합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"iif: 두 가지 가능한 원본 observable 중 하나에 조건부로 구독합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 Creation Operator를 하나씩 검토하고 예제를 통해 학습하겠습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Ajax\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"XMLHttpRequest API를 사용하여 HTTP 요청을 보냅니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 실시간 사용 사례: 요청에서 반환되는 응답 객체를 방출하는 Observable */\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { ajax } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs/ajax'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" githubUsers = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`https://api.github.com/users?per_page=2`\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" users = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ajax\"\n        }), \"(githubUsers);\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" subscribe = users.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\\n  \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"res\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(res),\\n  \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"err\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(err)\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 실시간 사용 사례: 요청에서 반환되는 응답 객체의 json 키만 방출하는 Observable */\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { ajax } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs/ajax'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" githubUsers = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`https://api.github.com/users?per_page=2`\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" users = ajax.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getJSON\"\n        }), \"(githubUsers);\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" subscribe = users.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\\n  \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"res\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(res),\\n  \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"err\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(err)\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"bindCallback\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"콜백 스타일의 함수를 Observable로 변환합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 실시간 사용 사례: jQuery의 getJSON을 Observable API로 변환하는 방법 */\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { bindCallback } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" * \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" jQuery \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'jquery'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" getJSONAsObservable = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"bindCallback\"\n        }), \"(jQuery.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"getJSON\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" result = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getJSONAsObservable\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/my/url'\"\n        }), \");\\nresult.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"x\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(x), \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"e\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(e));\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"bindNodeCallback\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"노드 스타일 콜백 함수를 Observable로 변환합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 실시간 사용 사례: 파일 시스템에서 파일 읽어오기 및 데이터를 Observable로 얻기 */\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { bindNodeCallback } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" * \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" fs \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'fs'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" readFileAsObservable = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"bindNodeCallback\"\n        }), \"(fs.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"readFile\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" result = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"readFileAsObservable\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./roadNames.txt'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'utf8'\"\n        }), \");\\n\\nresult.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\\n  \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"x\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(x), \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 파일 내용 처리\"\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"e\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(e) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 오류 처리\"\n        }), \"\\n);\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"defer\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Subscriber가 Observable에 구독할 때까지 실행을 지연시키는 Observable를 생성합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"RxJS에서 defer는 Observable을 생성하는 함수입니다. 주요 목적은 Observable이 구독될 때까지 Observable의 생성을 지연하는 것입니다. 이는 새로운 옵저버가 Observable을 구독할 때마다 설정 또는 초기화 논리가 실행되어야 하는 시나리오에서 유용합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 실시간 사용 사례: `of`를 사용하여 난수 생성 */\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \", defer } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" randomOf$ = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"of\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Math\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"random\"\n        }), \"());\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 랜덤 숫자 생성을 위해 `defer` 사용\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" randomDefer$ = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"defer\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"of\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Math\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"random\"\n        }), \"()));\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// `randomOf$`를 여러 번 구독\"\n        }), \"\\nrandomOf$.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"randomNumber\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'랜덤 숫자 (of):'\"\n        }), \", randomNumber));\\nrandomOf$.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"randomNumber\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'랜덤 숫자 (of):'\"\n        }), \", randomNumber));\\nrandomOf$.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"randomNumber\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'랜덤 숫자 (of):'\"\n        }), \", randomNumber));\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// `randomDefer$`를 여러 번 구독\"\n        }), \"\\nrandomDefer$.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"randomNumber\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'랜덤 숫자 (defer):'\"\n        }), \", randomNumber));\\nrandomDefer$.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"randomNumber\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'랜덤 숫자 (defer):'\"\n        }), \", randomNumber));\\nrandomDefer$.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"randomNumber\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'랜덤 숫자 (defer):'\"\n        }), \", randomNumber));\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Output\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"랜덤 숫자 (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \"): \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.123456789\"\n        }), \"\\n랜덤 숫자 (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \"): \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.123456789\"\n        }), \"\\n랜덤 숫자 (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \"): \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.123456789\"\n        }), \"\\n랜덤 숫자 (defer): \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.987654321\"\n        }), \"\\n랜덤 숫자 (defer): \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.654321987\"\n        }), \"\\n랜덤 숫자 (defer): \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.123456789\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"빈\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"빈 Observable을 생성하고 즉시 완료 콜백을 호출합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"RxJS의 빈 연산자는 값을 방출하지 않고 즉시 완료되는 Observable을 생성합니다. 값이 방출될 필요가 없지만 완료를 신호해야 하는 경우에 유용합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 실시간 사용 사례: 빈 Observable 생성 */\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { empty } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" emptyObservable$ = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"empty\"\n        }), \"();\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 빈 Observable에 구독하기\"\n        }), \"\\nemptyObservable$.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"next\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'다음 값'\"\n        }), \"), \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 호출되지 않음\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"complete\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'완료됨'\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 즉시 호출됨\"\n        }), \"\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"from\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"배열, 프로미스, 이터러블 객체 또는 Observable과 유사한 객체에서 Observable을 생성합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" arraySource = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"from\"\n        }), \"([\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \"]);\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" subscribe = arraySource.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"val\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(val));\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//출력: 1, 2, 3, 4, 5\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" source = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"from\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Hello World'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" subscribe = source.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"val\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(val));\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//출력: 'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd'\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" numbers = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"from\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Promise\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"resolve, reject\"\n          }), \") =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"resolve\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Hello World'\"\n        }), \")));\\nnumbers.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"data\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(data);\\n});\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//output: Hello World\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"fromEvent\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이벤트에서 Observable을 생성합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 실시간 사용 사례: 사용자가 화면을 클릭할 때 시간 추적 */\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { fromEvent } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { map } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs/operators'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" source = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fromEvent\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"document\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'click'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" example = source.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"pipe\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"map\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"event\"\n          }), \" =>\"]\n        }), \" event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"timeStamp\"\n        }), \"));\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" subscribe = example.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"val\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`이벤트 시간: \", _jsxs(_components.span, {\n            className: \"hljs-subst\",\n            children: [\"${val / \", _jsx(_components.span, {\n              className: \"hljs-number\",\n              children: \"1000\"\n            }), \"}\"]\n          }), \" 초`\"]\n        }), \"));\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"출력\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"이벤트 시간: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5.418900000000373\"\n        }), \" 초\\n이벤트 시간: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7.552900000000372\"\n        }), \" 초\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"fromEventPattern\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"fromEventPattern은 이벤트를 반환하는 함수에서 Observable을 생성합니다. fromEventPattern을 사용하면 이벤트 처리기 함수를 등록하는 API를 Observable로 변환할 수 있습니다. fromEvent과 유사하지만 훨씬 유연합니다. fromEvent의 모든 사용 사례는 fromEventPattern으로 쉽게 처리할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"생성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"함수를 기반으로 값을 생성하는 옵저버블을 생성합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 실시간 사용 사례: 숫자 시퀀스 생성 */\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { generate } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" result = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"x\"\n          }), \" =>\"]\n        }), \" x < \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"x\"\n          }), \" =>\"]\n        }), \" x + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"x\"\n          }), \" =>\"]\n        }), \" x);\\nresult.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"x\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(x));\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 결과:\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 0\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 2\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"간격\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"일정한 간격으로 정수 시퀀스를 방출하는 Observable을 생성합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 실시간 사용 사례: 1초 간격으로 값 시퀀스를 방출 */\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { interval } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 1초마다 시퀀스 값 방출\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" source = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"interval\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1000\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" subscribe = source.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"val\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(val));\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//결과: 0, 1, 2, 3, 4, 5....\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"of\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"지정된 값을 순서대로 방출하는 Observable을 생성합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"of\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"30\"\n        }), \")\\n  .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"next\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"value\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'다음 값:'\"\n        }), \", value),\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"error\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"err\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'에러 발생:'\"\n        }), \", err),\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"complete\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'완료'\"\n        }), \"),\\n  });\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 결과\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 다음 값: 10\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 다음 값: 20\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 다음 값: 30\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 완료\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"range\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지정된 범위 내에서 숫자의 시퀀스를 방출하는 Observable을 생성합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 실시간 사용 사례: 1에서 10까지 순차적으로 방출 */\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { range } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" source = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"range\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" example = source.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"val\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(val));\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: 1,2,3,4,5,6,7,8,9,10\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"throwError\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"구독 시 오류를 발생시키는 Observable을 생성합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 구독 시 오류 발생 */\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { throwError } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 특정 값과 함께 오류를 발생시킵니다.\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" source = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"throwError\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'오류 발생!'\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: 'Error: 오류 발생!'\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" subscribe = source.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"next\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"val\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(val),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"complete\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'완료!'\"\n        }), \"),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"error\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"val\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`오류: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${val}\"\n          }), \"`\"]\n        }), \")\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"timer\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"특정 시간 간격 후에 발행을 시작하고 정수 시퀀스를 발행하는 Observable를 생성합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 실제 시나리오: 타이머는 1초 후에 발행을 시작하고 그 이후 매 2초마다 값을 발행합니다 */\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { timer } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/*\\n  timer 함수는 두 번째 인자를 가지며, 연속적으로 값들을 발행하는 빈도를 정의합니다.\\n  이 경우, 1초 후에 첫 번째 값을 발행하고 그 이후 2초마다 값을 발행합니다.\\n*/\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" source = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"timer\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1000\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2000\"\n        }), \");\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//출력: 0,1,2,3,4,5......\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" subscribe = source.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"val\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(val));\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"iif\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"조건에 따라 함수의 출력을 발행하는 Observable를 생성합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* Observable에 대한 액세스 제어 */\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { iif, \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"EMPTY\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'rxjs'\"\n        }), \";\\n \\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" accessGranted;\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" observableIfYouHaveAccess = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"iif\"\n        }), \"(\\n  \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" accessGranted,\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"of\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'액세스가 허용된 것 같아요...'\"\n        }), \"),\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"EMPTY\"\n        }), \"\\n);\\n \\naccessGranted = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \";\\nobservableIfYouHaveAccess.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"next\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"value\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(value),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"complete\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'끝'\"\n        }), \")\\n});\\n \\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력:\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// '액세스가 허용된 것 같아요...'\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// '끝'\"\n        }), \"\\n \\naccessGranted = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \";\\nobservableIfYouHaveAccess.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subscribe\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"next\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"value\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(value),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"complete\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'끝'\"\n        }), \")\\n});\\n \\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력:\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// '끝'\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"요약하면, RxJS Creation Operators는 JavaScript에서 반응형 프로그래밍의 기본 구성 요소입니다. 다양한 데이터 소스에서 Observable을 생성할 수 있게 해줌으로써, 이러한 연산자는 비동기 데이터 스트림을 효율적으로 처리할 수 있도록 개발자들을 지원합니다. API에서 데이터를 가져오는 ajax, 사용자 상호 작용에 반응하는 fromEvent, interval 및 timer를 사용하여 작업을 예약하는 등, 이러한 연산자들은 반응형 애플리케이션에서 데이터 흐름을 유연하고 강력하게 관리할 수 있는 방법을 제공합니다. 이러한 생성 연산자를 숙달하는 것은 RxJS의 모든 잠재력을 발휘하고 반응형 프로그래밍을 통한 반응형, 확장 가능하고 유지보수 가능한 애플리케이션을 구축하는 데 필수적입니다. 이 연산자들을 깊이 이해하고 그 기능을 실험하며, RxJS를 활용한 반응형 프로그래밍 마스터의 길에 나아가 보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"즐거운 코딩되세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}