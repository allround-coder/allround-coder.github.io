{"pageProps":{"post":{"title":"앵귤러에서 let 구문을 사용해 타입 축소하는 방법","description":"","date":"2024-05-20 22:15","slug":"2024-05-20-EleganttypenarrowingwithletsyntaxinAngular","content":"\n\n![이미지](/assets/img/2024-05-20-EleganttypenarrowingwithletsyntaxinAngular_0.png)\n\nAngular 18은 아직 릴리즈되지 않았지만, 18.1 버전에 이미 새로운 강력한 추가 기능이 기다리고 있습니다. 바로 템플릿 로컬 변수 또는 @let 구문이라고도 알려진 기능입니다.\n\n간단히 말해서, 이제 템플릿에서 JavaScript 파일과 동일한 방식으로 보조 로컬 변수를 정의할 수 있게 됩니다.\n\n가능한 응용 중 하나는 AsyncPipe를 사용하여 구독하는 스트림에서 값 unwrap하는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n현재 솔루션\n\n\n```js\n<ng-container *ngIf=\"data$ | async as data\">\n  <p>{ data }</p>\n</ng-container>\n```\n\n\n```js\n<ng-container *ngIf=\"{ data: data$ | async } as vm\">\n  <p>{ vm.data }</p>\n</ng-container>\n```\n\n새로운 솔루션\n\n<div class=\"content-ad\"></div>\n\n```js\n@let data = data$ | async ;\n\n<p>{ data }</p>\n```\n\n이것은 '동적' 뷰 모델 속성을 생성할 수도 있게 해줍니다. 특히, 사용자 선택에 따라 변경되는 isActive와 같은 컬렉션을 다룰 때 특히 유용합니다.\n\nEnea Jahollari의 훌륭한 기사에서 새로운 구문의 다양한 사용법에 대해 더 읽어볼 수 있습니다.\n\n언급할 가치가 있는 점은 신호의 값을 템플릿 로컬 변수에 저장할 수 있는 능력입니다. 이것은 타입 좁힘이 매우 중요합니다.\n\n<div class=\"content-ad\"></div>\n\n아래는 해당 컴포넌트를 고려해봅시다:\n\n```js\ntype AnalysisState =\n  | { status: 'pending' }\n  | { status: 'completed'; result: string };\n  \n@Component({\n  selector: 'app-analysis-card',\n  standalone: true,\n  templateUrl: './analysis-card.component.html',\n  styleUrl: './analysis-card.component.scss',\n})\nexport class AnalysisCardComponent {\n  public analysisState: AnalysisState = { status: 'pending' };\n\n  constructor() {\n    // mock change simulation\n    setTimeout(() => {\n      this.analysisState = { status: 'completed', result: 'xyz' };\n    }, 5000);\n  }\n}\n```\n\n```js\n@if (analysisState.status === \"pending\") {\n  <p>Analysis is pending</p>\n} @else {\n  <p>Analysis completed with result: { analysisState.result }</p>\n}\n```\n\n새로운 제어 흐름 구문을 통해 이전의 *ngIf 디렉티브로는 불가능했던 적절한 타입 축소가 가능해졌습니다. 상세 내용은 제 이전 글 중 하나에서 확인하실 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n그러나, 컴포넌트 상태를 처리하기 위해 시그널을 사용하는 경우:\n\n```js\n@Component({\n  selector: 'app-analysis-card',\n  standalone: true,\n  templateUrl: './analysis-card.component.html',\n  styleUrl: './analysis-card.component.scss',\n})\nexport class AnalysisCardComponent {\n  public analysisState: WritableSignal<AnalysisState> = signal({\n    status: 'pending',\n  });\n\n  constructor() {\n    // 모의 변경 시뮬레이션\n    setTimeout(() => {\n      this.analysisState.set({ status: 'completed', result: 'xyz' });\n    }, 5000);\n  }\n}\n```\n\n타입 추론이 작동하지 않습니다:\n\n```js\n@if (analysisState().status === \"pending\") {\n  <p>분석 대기 중</p>\n} @else {\n  <!-- 'result' 속성이 'AnalysisState' 타입에 존재하지 않습니다. -->\n  <p>분석이 완료되었습니다. 결과: { analysisState().result }</p>\n}\n```\n\n<div class=\"content-ad\"></div>\n\n두 가지 해결 방법이 있습니다:\n\n- 시그널 값과 함께 게터를 사용하세요\n\n```js\n@Component({\n  selector: 'app-analysis-card',\n  standalone: true,\n  templateUrl: './analysis-card.component.html',\n  styleUrl: './analysis-card.component.scss',\n})\nexport class AnalysisCardComponent {\n  public _analysisState: WritableSignal<AnalysisState> = signal({\n    status: 'pending',\n  });\n\n  get analysisState() {\n    return this._analysisState();\n  }\n\n  constructor() {\n    // 모의 변경 시뮬레이션\n    setTimeout(() => {\n      this._analysisState.set({ status: 'completed', result: 'xyz' });\n    }, 5000);\n  }\n}\n```\n\n```js\n@if (analysisState.status === \"pending\") {\n  <p>분석 대기 중</p>\n} @else {\n  <p>분석 완료 및 결과: { analysisState.result }</p>\n}\n```\n\n<div class=\"content-ad\"></div>\n\n- 보조 if 블록으로 신호의 값 언래핑하기\n\n```js\n@Component({\n  selector: 'app-analysis-card',\n  standalone: true,\n  templateUrl: './analysis-card.component.html',\n  styleUrl: './analysis-card.component.scss',\n})\nexport class AnalysisCardComponent {\n  public analysisState: WritableSignal<AnalysisState> = signal({\n    status: 'pending',\n  });\n\n  constructor() {\n    // mock change simulation\n    setTimeout(() => {\n      this.analysisState.set({ status: 'completed', result: 'xyz' });\n    }, 5000);\n  }\n}\n```\n\n```js\n@if (analysisState(); as analysisState) {\n  @if (analysisState.status === \"pending\") {\n    <p>Analysis is pending</p>\n  } @else {\n    <p>Analysis completed with result: { analysisState.result }</p>\n  }\n}\n```\n\n새로운 방법으로 템플릿 지역 변수를 만드는 방법을 소개했으므로 목표를 달성하는 더 우아한 방법이 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nanalysisState = analysisState();\n\nif (analysisState.status === \"pending\") {\n  console.log(\"Analysis is pending\");\n} else {\n  console.log(`Analysis completed with result: ${analysisState.result}`);\n}\n```\n\nThe `analysisState` variable now holds the result of the `analysisState()` function call. If the status is \"pending,\" a message saying \"Analysis is pending\" will be logged. If the status is anything else, a message saying \"Analysis completed with result: \" followed by the actual result will be logged.\n\nThank you, and have a great day! 😊\n","ogImage":{"url":"/assets/img/2024-05-20-EleganttypenarrowingwithletsyntaxinAngular_0.png"},"coverImage":"/assets/img/2024-05-20-EleganttypenarrowingwithletsyntaxinAngular_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-EleganttypenarrowingwithletsyntaxinAngular_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Angular 18은 아직 릴리즈되지 않았지만, 18.1 버전에 이미 새로운 강력한 추가 기능이 기다리고 있습니다. 바로 템플릿 로컬 변수 또는 @let 구문이라고도 알려진 기능입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"간단히 말해서, 이제 템플릿에서 JavaScript 파일과 동일한 방식으로 보조 로컬 변수를 정의할 수 있게 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가능한 응용 중 하나는 AsyncPipe를 사용하여 구독하는 스트림에서 값 unwrap하는 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현재 솔루션\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<ng-container *ngIf=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"data$ | async as data\\\"\"\n        }), \">\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"{ data }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n</ng-container>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<ng-container *ngIf=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{ data: data$ | async } as vm\\\"\"\n        }), \">\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"{ vm.data }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n</ng-container>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새로운 솔루션\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" data = data$ | \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" ;\\n\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"{ data }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것은 '동적' 뷰 모델 속성을 생성할 수도 있게 해줍니다. 특히, 사용자 선택에 따라 변경되는 isActive와 같은 컬렉션을 다룰 때 특히 유용합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Enea Jahollari의 훌륭한 기사에서 새로운 구문의 다양한 사용법에 대해 더 읽어볼 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"언급할 가치가 있는 점은 신호의 값을 템플릿 로컬 변수에 저장할 수 있는 능력입니다. 이것은 타입 좁힘이 매우 중요합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래는 해당 컴포넌트를 고려해봅시다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnalysisState\"\n        }), \" =\\n  | { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"status\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'pending'\"\n        }), \" }\\n  | { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"status\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'completed'\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"result\"\n        }), \": string };\\n  \\n@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'app-analysis-card'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"standalone\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"templateUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./analysis-card.component.html'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"styleUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./analysis-card.component.scss'\"\n        }), \",\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnalysisCardComponent\"\n        }), \" {\\n  public \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"analysisState\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnalysisState\"\n        }), \" = { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"status\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'pending'\"\n        }), \" };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// mock change simulation\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"setTimeout\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"analysisState\"\n        }), \" = { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"status\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'completed'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"result\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'xyz'\"\n        }), \" };\\n    }, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5000\"\n        }), \");\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (analysisState.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"status\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"pending\\\"\"\n        }), \") {\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"Analysis is pending\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n} @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"Analysis completed with result: { analysisState.result }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새로운 제어 흐름 구문을 통해 이전의 *ngIf 디렉티브로는 불가능했던 적절한 타입 축소가 가능해졌습니다. 상세 내용은 제 이전 글 중 하나에서 확인하실 수 있어요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러나, 컴포넌트 상태를 처리하기 위해 시그널을 사용하는 경우:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'app-analysis-card'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"standalone\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"templateUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./analysis-card.component.html'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"styleUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./analysis-card.component.scss'\"\n        }), \",\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnalysisCardComponent\"\n        }), \" {\\n  public \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"analysisState\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"WritableSignal\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnalysisState\"\n        }), \"> = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"signal\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"status\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'pending'\"\n        }), \",\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 모의 변경 시뮬레이션\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"setTimeout\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"analysisState\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"status\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'completed'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"result\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'xyz'\"\n        }), \" });\\n    }, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5000\"\n        }), \");\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"타입 추론이 작동하지 않습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"analysisState\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"status\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"pending\\\"\"\n        }), \") {\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"분석 대기 중\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n} @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n  <!-- \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'result'\"\n        }), \" 속성이 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'AnalysisState'\"\n        }), \" 타입에 존재하지 않습니다. -->\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"분석이 완료되었습니다. 결과: { analysisState().result }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"두 가지 해결 방법이 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"시그널 값과 함께 게터를 사용하세요\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'app-analysis-card'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"standalone\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"templateUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./analysis-card.component.html'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"styleUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./analysis-card.component.scss'\"\n        }), \",\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnalysisCardComponent\"\n        }), \" {\\n  public \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"_analysisState\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"WritableSignal\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnalysisState\"\n        }), \"> = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"signal\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"status\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'pending'\"\n        }), \",\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"get\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"analysisState\"\n        }), \"() {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_analysisState\"\n        }), \"();\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 모의 변경 시뮬레이션\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"setTimeout\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"_analysisState\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"status\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'completed'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"result\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'xyz'\"\n        }), \" });\\n    }, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5000\"\n        }), \");\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (analysisState.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"status\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"pending\\\"\"\n        }), \") {\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"분석 대기 중\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n} @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"분석 완료 및 결과: { analysisState.result }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"보조 if 블록으로 신호의 값 언래핑하기\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Component\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'app-analysis-card'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"standalone\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"templateUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./analysis-card.component.html'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"styleUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./analysis-card.component.scss'\"\n        }), \",\\n})\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnalysisCardComponent\"\n        }), \" {\\n  public \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"analysisState\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"WritableSignal\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnalysisState\"\n        }), \"> = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"signal\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"status\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'pending'\"\n        }), \",\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"constructor\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// mock change simulation\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"setTimeout\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"analysisState\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"({ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"status\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'completed'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"result\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'xyz'\"\n        }), \" });\\n    }, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5000\"\n        }), \");\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"analysisState\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" analysisState) {\\n  @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (analysisState.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"status\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"pending\\\"\"\n        }), \") {\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"Analysis is pending\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n  } @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"Analysis completed with result: { analysisState.result }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새로운 방법으로 템플릿 지역 변수를 만드는 방법을 소개했으므로 목표를 달성하는 더 우아한 방법이 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"analysisState = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"analysisState\"\n        }), \"();\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (analysisState.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"status\"\n        }), \" === \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"pending\\\"\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Analysis is pending\\\"\"\n        }), \");\\n} \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`Analysis completed with result: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${analysisState.result}\"\n          }), \"`\"]\n        }), \");\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"analysisState\"\n      }), \" variable now holds the result of the \", _jsx(_components.code, {\n        children: \"analysisState()\"\n      }), \" function call. If the status is \\\"pending,\\\" a message saying \\\"Analysis is pending\\\" will be logged. If the status is anything else, a message saying \\\"Analysis completed with result: \\\" followed by the actual result will be logged.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Thank you, and have a great day! 😊\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}