{"pageProps":{"post":{"title":"템플릿 간소화하기 Angular 17에서의 제어 흐름","description":"","date":"2024-05-18 22:35","slug":"2024-05-18-StreamlineYourTemplatesControlFlowinAngular17","content":"\n\n<img src=\"/assets/img/2024-05-18-StreamlineYourTemplatesControlFlowinAngular17_0.png\" />\n\n안녕하세요, Angular 열정가 여러분! 오늘은 Angular 17의 새로운 혁신인 내장 제어 흐름 구문을 발표하려고 왔어요! 이 새로운 기능을 사용하면 추가 지시문 (ngIf, ngFor, ngSwitch)을 버리고 집에 온 듯한 키워드를 사용하여 템플릿에서 제어 흐름 로직을 직접 작성할 수 있어요 (자바스크립트 같아요!). 이것이 어떻게 당신의 Angular 경험을 향상시키는 지 한번 알아봐요!\n\n우리는 여러 해 동안 조건부로 콘텐츠를 렌더링하고 데이터를 반복하는 데 지시문을 의존해 왔어요. 그들은 작동하지만 템플릿에 혼란과 복잡성의 추가 레이어를 덧붙일 수 있어요. Angular 17은 @if, @else if, @switch 및 @for 같은 익숙한 키워드를 사용하여 템플릿 내에서 직접 제어 흐름 로직을 작성할 수 있게 해줘요. 이러면 코드가 더 깔끔하고 읽기 쉽고 일반적인 자바스크립트를 작성하는 느낌이 들어요!\n\n## 왜 지시문 대신 제어 흐름을 선택해야 할까요?\n\n<div class=\"content-ad\"></div>\n\n아래는 변경하는 것이 좋은 몇 가지 설득력 있는 이유입니다:\n\n- 뚜렷한 가독성: 제어 흐름 구문은 JavaScript의 제어 흐름 구조를 반영하여, JavaScript에 익숙한 사람들에게 이해하기 쉬운 템플릿을 만드는 데 도움이 됩니다.\n- 중복성 감소: ✂️ 제어 흐름을 통해 여분의 지시문이 필요 없어져 더 깔끔하고 간결한 템플릿을 생성할 수 있습니다.\n- 현대적인 개발 경험: 제어 흐름은 현대적인 JavaScript 관행과 일치하며, 일관되고 익숙한 개발 경험을 촉진합니다. 이는 더 적은 정신 부담과 놀라운 기능을 구축하는 데 더 많은 시간을 집중할 수 있다는 것을 의미합니다!\n\n# @if와 @else로 익숙함을 받아들이다\n\n참/거짓 변수에 따라 메시지를 표시하려는 시나리오를 상상해보십시오. 기존에는 다음과 같이 사용할 것입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n@if (isLoggedIn) {\n  <p>다시 오신 것을 환영합니다!</p>\n} @else {\n  <p>로그인해주세요.</p>\n}\n```\n\n이렇게 제어 흐름 구문을 사용하면 JavaScript에서 제어 흐름을 작성하는 방식과 더 자연스러워집니다. 더 복잡한 조건을 위해 @else if 문을 연결할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# Level Up Loops with @for\n\n데이터 컬렉션을 반복하는 것은 Angular 애플리케이션의 기본적인 부분입니다. 이전에 우리는 *ngFor을 사용했습니다. 제어 흐름은 유사한 접근 방식을 제공합니다:\n\n```js\n<ul>\n  <li *ngFor=\"let fruit of fruits\">{ fruit.name }</li>\n</ul>\n```\n\n제어 흐름에 대한 비교:\n\n<div class=\"content-ad\"></div>\n\n```js\n<ul>\n  @for (과일 in 과일들; trackBy: 과일.name) {\n    <li>{ 과일.name }</li>\n  } @empty {\n    <li>과일이 없습니다.</li>\n  }\n</ul>\n```\n\n하지만 기능이 향상되었습니다! 제어 흐름 구문을 사용하려면 trackBy를 사용하여 추적 함수를 지정해야 합니다. 이렇게 하면 Angular가 컬렉션 내의 변경 사항을보다 효율적으로 식별하여 앱이 특히 대규모 데이터 세트로도 원활하게 실행되도록 지원합니다! ❤️\n\n# @switch로 결정 내리기 ⚖️\n\n여러 조건에 따라 콘텐츠를 렌더링해야 하는 경우 @switch 문이 구원의 손을 내밀어줍니다:\n```  \n\n<div class=\"content-ad\"></div>\n\n```js\n@switch(selectedFruit) {\n  @case(apple){\n    <p>사과를 선택하셨네요!</p>\n  }\n  @case(banana){\n    <p>바나나는 포타슘의 좋은 원천입니다!</p>\n  }\n  @default {\n    <p>그것은 제가 알아듣는 과일이 아니에요.</p>\n  }\n}\n```\n\n이렇게 하면 템플릿 안에서 switch-case 로직을 보다 간결하고 가독성 있게 처리할 수 있어요. 멋지죠? ✨\n\n# 링크\n\n아래에서 제어 흐름 구문의 상세 정보를 찾을 수 있어요:\n\n<div class=\"content-ad\"></div>\n\n- Angular — @for\n- Angular — @switch\n- Angular — @if","ogImage":{"url":"/assets/img/2024-05-18-StreamlineYourTemplatesControlFlowinAngular17_0.png"},"coverImage":"/assets/img/2024-05-18-StreamlineYourTemplatesControlFlowinAngular17_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-18-StreamlineYourTemplatesControlFlowinAngular17_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"안녕하세요, Angular 열정가 여러분! 오늘은 Angular 17의 새로운 혁신인 내장 제어 흐름 구문을 발표하려고 왔어요! 이 새로운 기능을 사용하면 추가 지시문 (ngIf, ngFor, ngSwitch)을 버리고 집에 온 듯한 키워드를 사용하여 템플릿에서 제어 흐름 로직을 직접 작성할 수 있어요 (자바스크립트 같아요!). 이것이 어떻게 당신의 Angular 경험을 향상시키는 지 한번 알아봐요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 여러 해 동안 조건부로 콘텐츠를 렌더링하고 데이터를 반복하는 데 지시문을 의존해 왔어요. 그들은 작동하지만 템플릿에 혼란과 복잡성의 추가 레이어를 덧붙일 수 있어요. Angular 17은 @if, @else if, @switch 및 @for 같은 익숙한 키워드를 사용하여 템플릿 내에서 직접 제어 흐름 로직을 작성할 수 있게 해줘요. 이러면 코드가 더 깔끔하고 읽기 쉽고 일반적인 자바스크립트를 작성하는 느낌이 들어요!\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"왜 지시문 대신 제어 흐름을 선택해야 할까요?\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래는 변경하는 것이 좋은 몇 가지 설득력 있는 이유입니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"뚜렷한 가독성: 제어 흐름 구문은 JavaScript의 제어 흐름 구조를 반영하여, JavaScript에 익숙한 사람들에게 이해하기 쉬운 템플릿을 만드는 데 도움이 됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"중복성 감소: ✂️ 제어 흐름을 통해 여분의 지시문이 필요 없어져 더 깔끔하고 간결한 템플릿을 생성할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"현대적인 개발 경험: 제어 흐름은 현대적인 JavaScript 관행과 일치하며, 일관되고 익숙한 개발 경험을 촉진합니다. 이는 더 적은 정신 부담과 놀라운 기능을 구축하는 데 더 많은 시간을 집중할 수 있다는 것을 의미합니다!\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"@if와 @else로 익숙함을 받아들이다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참/거짓 변수에 따라 메시지를 표시하려는 시나리오를 상상해보십시오. 기존에는 다음과 같이 사용할 것입니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (isLoggedIn) {\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"다시 오신 것을 환영합니다!\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n} @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          }), \"로그인해주세요.\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"p\"\n            }), \">\"]\n          })]\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이렇게 제어 흐름 구문을 사용하면 JavaScript에서 제어 흐름을 작성하는 방식과 더 자연스러워집니다. 더 복잡한 조건을 위해 @else if 문을 연결할 수도 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Level Up Loops with @for\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터 컬렉션을 반복하는 것은 Angular 애플리케이션의 기본적인 부분입니다. 이전에 우리는 *ngFor을 사용했습니다. 제어 흐름은 유사한 접근 방식을 제공합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<ul>\\n  \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \" *\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ngFor\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"let fruit of fruits\\\"\"\n            }), \">\"]\n          }), \"{ fruit.name }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          })]\n        }), \"\\n</ul>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"제어 흐름에 대한 비교:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<ul>\\n  @\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (과일 \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" 과일들; \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"trackBy\"\n        }), \": 과일.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \") {\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          }), \"{ 과일.name }\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          })]\n        }), \"\\n  } @empty {\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          }), \"과일이 없습니다.\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"li\"\n            }), \">\"]\n          })]\n        }), \"\\n  }\\n</ul>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 기능이 향상되었습니다! 제어 흐름 구문을 사용하려면 trackBy를 사용하여 추적 함수를 지정해야 합니다. 이렇게 하면 Angular가 컬렉션 내의 변경 사항을보다 효율적으로 식별하여 앱이 특히 대규모 데이터 세트로도 원활하게 실행되도록 지원합니다! ❤️\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"@switch로 결정 내리기 ⚖️\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여러 조건에 따라 콘텐츠를 렌더링해야 하는 경우 @switch 문이 구원의 손을 내밀어줍니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n<div class=\\\"content-ad\\\"></div>\\n\\n```js\\n@switch(selectedFruit) {\\n  @case(apple){\\n    <p>사과를 선택하셨네요!</p>\\n  }\\n  @case(banana){\\n    <p>바나나는 포타슘의 좋은 원천입니다!</p>\\n  }\\n  @default {\\n    <p>그것은 제가 알아듣는 과일이 아니에요.</p>\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이렇게 하면 템플릿 안에서 switch-case 로직을 보다 간결하고 가독성 있게 처리할 수 있어요. 멋지죠? ✨\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"링크\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래에서 제어 흐름 구문의 상세 정보를 찾을 수 있어요:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Angular — @for\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Angular — @switch\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Angular — @if\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}