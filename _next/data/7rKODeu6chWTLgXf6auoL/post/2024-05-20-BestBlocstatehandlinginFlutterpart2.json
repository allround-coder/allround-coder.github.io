{"pageProps":{"post":{"title":"플러터에서 최고의 Bloc 상태 관리 파트 2","description":"","date":"2024-05-20 23:15","slug":"2024-05-20-BestBlocstatehandlinginFlutterpart2","content":"\n\n안녕하세요, 친구들,\n첫 번째 파트에 대한 좋은 피드백에 기쁩니다.\n이번 파트에서는 디자인에서 EventStatus를 사용하는 방법을 가르치고 디자인의 모든 상태를 다루는 것을 알려드리고 싶어요.\n\n![이미지](https://miro.medium.com/v2/resize:fit:580/1*wL6d8JPLeO4MbkwBPLHwcA.gif)\n\n지난 파트에서는 Bloc_state에서 상태를 다루기위해 EventStatus 클래스를 사용했었습니다.\n\nhttps://medium.com/@moeinmoradi.dev/best-bloc-state-handling-in-flutter-0f95a8e89e40\n\n<div class=\"content-ad\"></div>\n\n제 친구 한 명의 제안에 따라, EventStatus 클래스에 대해 좀 더 나은 컨셉을 제안하고 그 이름을 StateStatus로 변경해보겠습니다. 다음과 같이 변경해주세요.\n\n```js\n@immutable\nabstract class StateStatus<T> {\n  final int? itemId;\n  final T? data;\n  final ErrorModel? message;\n\n  const StateStatus({\n    this.itemId,\n    this.data,\n    this.message,\n  });\n}\n\nclass StateLoading<T> extends StateStatus<T> {\n  const StateLoading({super.itemId});\n}\n\nclass StateCompleted<T> extends StateStatus<T> {\n  const StateCompleted({required super.data});\n}\n\nclass StateInitial<T> extends StateStatus<T> {}\n\nclass StateError<T> extends StateStatus<T> {\n  const StateError({required super.message});\n}\n```\n\n좋아요, StateStatusLayout를 위한 클래스를 만들어봅시다.\n\n# StateStatusLayout\n\n<div class=\"content-ad\"></div>\n\nStateStatus에 따라 다른 디자인 상태를 표시하는 클래스가 필요합니다. 이 클래스는 각 상태와 해당 위젯을 표시할 수 있어야 합니다.\n\n이 클래스에서 BlocBuilder로부터 StateStatus를 받고 States에 따라 위젯을 반환했습니다 :\n\n```js\nclass StateStatusLayout<T> extends StatelessWidget {\n  final StateStatus<T> status;\n  final Widget onErrorStatus;\n  final void Function(ErrorModel error)? onErrorListener;\n  final Widget Function(BuildContext context, T? data) onCompletedStatus;\n  final Widget onInitialStatus;\n  final Widget onLoadingStatus;\n  const StateStatusLayout({\n    super.key,\n    required this.status,\n    required this.onCompletedStatus,\n    required this.onErrorStatus,\n    required this.onInitialStatus,\n    required this.onLoadingStatus,\n    this.onErrorListener,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    if (status is StateError) {\n      if (onErrorListener != null) {\n        onErrorListener!(status.message!);\n      }\n    }\n    if (status is StateCompleted) {\n      return StreamBuilder(\n        stream: Stream.value(status),\n        builder: (context, snapshot) {\n          log(status.data!.toString());\n          return onCompletedStatus(context, status.data);\n        },\n      );\n    }\n    if (status is StateError) {\n      return onErrorStatus;\n    }\n    if (status is StateInitial) {\n      return onInitialStatus;\n    }\n    if (status is StateLoading) {\n      return onLoadingStatus;\n    }\n    return Container();\n  }\n}\n```\n\n그런데, StateCompleted 조건을 살펴보세요. 데이터를 표시하기 위해 StreamBuilder를 사용했습니다. 이것에 대해 어떻게 생각하시나요?\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:700/1*I6k_gZJ0KRZYR4KU22Okig.gif)\n\n가끔 블록 쪽에서 데이터를 페이지네이션하거나 스트리밍해야 할 때, 위젯은 반드시 모든 상황에서 업데이트되어야 합니다. 그리고 위젯에서 오류가 발생하지 않도록하기 위해 이러한 가능한 상황을 고려하기 위해 StreamBuilder를 사용합니다.\n\n간단한 샘플 코드를 보여드리겠습니다. StateStatusLayout을 사용한 코드입니다:\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass ShowLayout extends StatelessWidget {\n  const ShowLayout({Key? key});\n\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<ShowBloc, ShowState>(\n        builder: (context, state) {\n          return StateStatusLayout(\n            status: state.showsStatus,\n            onCompletedStatus: (context, data) {\n              return GridView.count(\n                shrinkWrap: true,\n                padding: const EdgeInsets.all(10),\n                physics: const ClampingScrollPhysics(),\n                crossAxisSpacing: 10,\n                mainAxisSpacing: 20,\n                crossAxisCount: 4,\n                childAspectRatio: 9 / 16,\n                children: List.generate(data!.shows!.length, (index) {\n                  ShowModel item = data.shows![index];\n                  return ShowCard(\n                      show: item,\n                      onSelected: () {\n                        /// do Somethigs...\n                      },\n                    );\n                }),\n              );\n            },\n            onErrorStatus: const SizedBox(),\n            onInitialStatus: const SizedBox(),\n            onLoadingStatus: Padding(\n              padding: const EdgeInsets.all(48.0),\n              child: SizedBox(\n                width: 50,\n                height: 50,\n                child: SpinKitRipple(\n                  color: themeData.colorScheme.secondary,\n                  size: 40,\n                ),\n              ),\n            ),\n          );\n        },\n      );\n  }\n}\n```\n\n\n<div class=\"content-ad\"></div>\n\n이 샘플 코드에서는 Bloc이 emit() 함수로 갱신될 때 showsStatus 상태에 대한 onCompletedStatus 및 onLoadingStatus를 처리했습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:1280/1*XwwugAFY35KNciVoDHThEw.gif)\n\n## 지금까지 함께 해주셔서 감사합니다\n나와 함께 계속 이야기를 공유해주시고 피드백을 기다리고 있습니다. 분들의 소중한 의견을 기다리고 있습니다. 🙏","ogImage":{"url":"/assets/img/2024-05-20-BestBlocstatehandlinginFlutterpart2_0.png"},"coverImage":"/assets/img/2024-05-20-BestBlocstatehandlinginFlutterpart2_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h1: \"h1\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"안녕하세요, 친구들,\\n첫 번째 파트에 대한 좋은 피드백에 기쁩니다.\\n이번 파트에서는 디자인에서 EventStatus를 사용하는 방법을 가르치고 디자인의 모든 상태를 다루는 것을 알려드리고 싶어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:580/1*wL6d8JPLeO4MbkwBPLHwcA.gif\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지난 파트에서는 Bloc_state에서 상태를 다루기위해 EventStatus 클래스를 사용했었습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"https://medium.com/@moeinmoradi.dev/best-bloc-state-handling-in-flutter-0f95a8e89e40\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"제 친구 한 명의 제안에 따라, EventStatus 클래스에 대해 좀 더 나은 컨셉을 제안하고 그 이름을 StateStatus로 변경해보겠습니다. 다음과 같이 변경해주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"@immutable\\nabstract \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateStatus\"\n        }), \"<T> {\\n  final int? itemId;\\n  final T? data;\\n  final \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ErrorModel\"\n        }), \"? message;\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateStatus\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"itemId\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"data\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"message\"\n        }), \",\\n  });\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateLoading\"\n        }), \"<T> \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateStatus\"\n        }), \"<T> {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateLoading\"\n        }), \"({\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"super\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"itemId\"\n        }), \"});\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateCompleted\"\n        }), \"<T> \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateStatus\"\n        }), \"<T> {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateCompleted\"\n        }), \"({required \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"super\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"data\"\n        }), \"});\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateInitial\"\n        }), \"<T> \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateStatus\"\n        }), \"<T> {}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateError\"\n        }), \"<T> \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateStatus\"\n        }), \"<T> {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateError\"\n        }), \"({required \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"super\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"message\"\n        }), \"});\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"좋아요, StateStatusLayout를 위한 클래스를 만들어봅시다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"StateStatusLayout\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"StateStatus에 따라 다른 디자인 상태를 표시하는 클래스가 필요합니다. 이 클래스는 각 상태와 해당 위젯을 표시할 수 있어야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 클래스에서 BlocBuilder로부터 StateStatus를 받고 States에 따라 위젯을 반환했습니다 :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateStatusLayout\"\n        }), \"<T> \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StatelessWidget\"\n        }), \" {\\n  final \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateStatus\"\n        }), \"<T> status;\\n  final \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Widget\"\n        }), \" onErrorStatus;\\n  final \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ErrorModel\"\n        }), \" error)? onErrorListener;\\n  final \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Widget\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BuildContext\"\n        }), \" context, T? data) onCompletedStatus;\\n  final \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Widget\"\n        }), \" onInitialStatus;\\n  final \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Widget\"\n        }), \" onLoadingStatus;\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateStatusLayout\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"super\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"key\"\n        }), \",\\n    required \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"status\"\n        }), \",\\n    required \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"onCompletedStatus\"\n        }), \",\\n    required \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"onErrorStatus\"\n        }), \",\\n    required \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"onInitialStatus\"\n        }), \",\\n    required \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"onLoadingStatus\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"onErrorListener\"\n        }), \",\\n  });\\n\\n  @override\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Widget\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"build\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"BuildContext context\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (status is \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateError\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (onErrorListener != \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \") {\\n        onErrorListener!(status.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"message\"\n        }), \"!);\\n      }\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (status is \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateCompleted\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StreamBuilder\"\n        }), \"(\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"stream\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Stream\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"value\"\n        }), \"(status),\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"builder\"\n        }), \": (context, snapshot) {\\n          \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(status.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"data\"\n        }), \"!.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"toString\"\n        }), \"());\\n          \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"onCompletedStatus\"\n        }), \"(context, status.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"data\"\n        }), \");\\n        },\\n      );\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (status is \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateError\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" onErrorStatus;\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (status is \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateInitial\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" onInitialStatus;\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (status is \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StateLoading\"\n        }), \") {\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" onLoadingStatus;\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Container\"\n        }), \"();\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런데, StateCompleted 조건을 살펴보세요. 데이터를 표시하기 위해 StreamBuilder를 사용했습니다. 이것에 대해 어떻게 생각하시나요?\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:700/1*I6k_gZJ0KRZYR4KU22Okig.gif\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가끔 블록 쪽에서 데이터를 페이지네이션하거나 스트리밍해야 할 때, 위젯은 반드시 모든 상황에서 업데이트되어야 합니다. 그리고 위젯에서 오류가 발생하지 않도록하기 위해 이러한 가능한 상황을 고려하기 위해 StreamBuilder를 사용합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"간단한 샘플 코드를 보여드리겠습니다. StateStatusLayout을 사용한 코드입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-dart\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'package:flutter/material.dart'\"\n        }), \";\\n\\n\", _jsxs(_components.span, {\n          className: \"hljs-class\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"ShowLayout\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"StatelessWidget\"\n          }), \" \"]\n        }), \"{\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" ShowLayout({Key? key});\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@override\"\n        }), \"\\n  Widget build(BuildContext context) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" BlocBuilder<ShowBloc, ShowState>(\\n        builder: (context, state) {\\n          \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" StateStatusLayout(\\n            status: state.showsStatus,\\n            onCompletedStatus: (context, data) {\\n              \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" GridView.count(\\n                shrinkWrap: \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"true\"\n        }), \",\\n                padding: \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" EdgeInsets.all(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \"),\\n                physics: \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" ClampingScrollPhysics(),\\n                crossAxisSpacing: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \",\\n                mainAxisSpacing: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \",\\n                crossAxisCount: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \",\\n                childAspectRatio: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"9\"\n        }), \" / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"16\"\n        }), \",\\n                children: \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"List\"\n        }), \".generate(data!.shows!.length, (index) {\\n                  ShowModel item = data.shows![index];\\n                  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" ShowCard(\\n                      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"show\"\n        }), \": item,\\n                      onSelected: () {\\n                        \", _jsxs(_components.span, {\n          className: \"hljs-comment\",\n          children: [\"/// \", _jsx(_components.span, {\n            className: \"markdown\",\n            children: \"do Somethigs...\"\n          })]\n        }), \"\\n                      },\\n                    );\\n                }),\\n              );\\n            },\\n            onErrorStatus: \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" SizedBox(),\\n            onInitialStatus: \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" SizedBox(),\\n            onLoadingStatus: Padding(\\n              padding: \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" EdgeInsets.all(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"48.0\"\n        }), \"),\\n              child: SizedBox(\\n                width: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \",\\n                height: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \",\\n                child: SpinKitRipple(\\n                  color: themeData.colorScheme.secondary,\\n                  size: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"40\"\n        }), \",\\n                ),\\n              ),\\n            ),\\n          );\\n        },\\n      );\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 샘플 코드에서는 Bloc이 emit() 함수로 갱신될 때 showsStatus 상태에 대한 onCompletedStatus 및 onLoadingStatus를 처리했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1280/1*XwwugAFY35KNciVoDHThEw.gif\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"지금까지 함께 해주셔서 감사합니다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나와 함께 계속 이야기를 공유해주시고 피드백을 기다리고 있습니다. 분들의 소중한 의견을 기다리고 있습니다. 🙏\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}