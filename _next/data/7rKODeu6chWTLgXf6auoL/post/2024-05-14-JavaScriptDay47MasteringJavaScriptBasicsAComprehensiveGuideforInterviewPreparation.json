{"pageProps":{"post":{"title":"자바스크립트 47일차 - 자바스크립트 기초 마스터하기 면접 준비를 위한 포괄적인 가이드","description":"","date":"2024-05-14 15:21","slug":"2024-05-14-JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation","content":"\n\n100일간의 자바스크립트 면접 준비: 초보자의 여정 | 코딩 라운드\n\n![이미지](/assets/img/2024-05-14-JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_0.png)\n\n## 상위 10개 중요한 인터뷰 자바스크립트 코딩 라운드 인터뷰 질문\n\n## 자바스크립트에서 ARRAY의 ARRAY를 펼치는 방법?\n\n\n\n```js\nconst arry = [[1, 2, [3]], 4, [5, [6, 7]]]\n\n// 출력  [1, 2, 3, 4, 5, 6, 7]\n```\n\n답변\n\n단계 1 — flattenMyArray 함수는 배열을 입력으로 받고 각 요소를 반복합니다.\n\n단계 2 — 요소가 배열이면 해당 하위 배열을 펼치기 위해 재귀적으로 자신을 호출합니다.\n\n\n\n**단계 3** — 그렇지 않으면, 요소를 평탄화된 배열에 추가합니다.\n\n**단계 4** — 마지막으로, 평탄화된 배열을 반환합니다.\n\n# 방법 1 — (ForEach 방법)\n\n**단계 1** — 평탄화해야 할 입력 배열을 정의합니다.\n\n\n\n```js\nconst nestedArray = [[1, 2, [3]], 4, [5, [6, 7]]]\n```\n\nStep 2— `flattenArray` 함수와 결과값(펼쳐진 배열)을 저장할 빈 배열을 만듭니다.\n\n```js\nconst nestedArray = [[1, 2, [3]], 4, [5, [6, 7]]]\n\nfunction flattenArray(arr) {\n    let flattened = [];\n\n}\n```\n\nStep 3— 각 요소를 `forEach` 방법으로 반복하고 함수의 끝에 펼쳐진 값을 반환합니다.\n\n\n\n```js\nconst nestedArray = [[1, 2, [3]], 4, [5, [6, 7]]]\n\nfunction flattenArray(arr) {\n   let flattened = [];\n\n   arr.forEach(item => {\n     console.log(item)\n       \n   });\n\n    return flattened;\n}\n```\n\n제 4단계 — 입력 배열로 함수를 호출하고 항목에 대한 console.log를 확인합니다.\n\n```js\nconst nestedArray = [[1, 2, [3]], 4, [5, [6, 7]]]\n\nfunction flattenArray(arr) {\n   let flattened = [];\n\n   arr.forEach(item => {\n     console.log(item)\n       \n   });\n\n    return flattened;\n}\n\nconst flattenedArray = flattenArray(nestedArray);\n```\n\n<img src=\"/assets/img/2024-05-14-JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_1.png\" />\n\n\n\n\nStep 5— foreach 코드 안에 위의 console.log 관찰에 따라 몇 가지 조건을 추가해 봅시다.\n\n- 요소가 배열인 경우, 해당 하위 배열을 평탄화하도록 재귀적으로 자신을 호출합니다.\n- 그렇지 않으면, 해당 요소를 평탄화된 배열에 푸시합니다.\n\n```js\nconst nestedArray = [[1, 2, [3]], 4, [5, [6, 7]]]\n\nfunction flattenArray(arr) {\n   let flattened = [];\n\n   arr.forEach(item => {\n   /* 요소가 배열인 경우, 해당 하위 배열을 재귀적으로 평탄화하도록 호출합니다. */\n    if (Array.isArray(item)) {\n            flattened = flattened.concat(flattenArray(item));\n        } else {\n   // 그렇지 않으면, 해당 요소를 평탄화된 배열에 푸시합니다\n            flattened.push(item);\n        }\n\n   });\n\n    return flattened;\n}\n\nconst flattenedArray = flattenArray(nestedArray);\n```\n\n![JavaScript Basics](/assets/img/2024-05-14-JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_2.png)\n\n\n\n# 최종 코드\n\n```js\nconst nestedArray = [[1, 2, [3]], 4, [5, [6, 7]]];\n\nfunction flattenArray(arr) {\n   let flattened = [];\n\n   arr.forEach(item => {\n   /* 만약 요소가 배열이라면 해당 하위 배열을 평탄화하기 위해 재귀적으로 자신을 호출합니다. */\n    if (Array.isArray(item)) {\n            flattened = flattened.concat(flattenArray(item));\n        } else {\n   // 그렇지 않으면 요소를 평탄화된 배열에 추가합니다.\n            flattened.push(item);\n        }\n\n   });\n\n    return flattened;\n}\n\nconst flattenedArray = flattenArray(nestedArray);\n```\n\nES6 Map 방법을 사용한 또 다른 방법을 DAY 48에서 논의할 예정입니다.\n\n![JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_3.png](/assets/img/2024-05-14-JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_3.png)\n\n\n\n# 행복한 코딩 하세요 그리고 기대해주세요 :)\n\n# 만약 제 블로그가 도움이 되었다면 구독, 박수와 팔로우 부탁드립니다 :)","ogImage":{"url":"/assets/img/2024-05-14-JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_0.png"},"coverImage":"/assets/img/2024-05-14-JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    strong: \"strong\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"100일간의 자바스크립트 면접 준비: 초보자의 여정 | 코딩 라운드\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"상위 10개 중요한 인터뷰 자바스크립트 코딩 라운드 인터뷰 질문\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"자바스크립트에서 ARRAY의 ARRAY를 펼치는 방법?\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" arry = [[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"]], \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \"]]]\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력  [1, 2, 3, 4, 5, 6, 7]\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"답변\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 1 — flattenMyArray 함수는 배열을 입력으로 받고 각 요소를 반복합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 2 — 요소가 배열이면 해당 하위 배열을 펼치기 위해 재귀적으로 자신을 호출합니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"단계 3\"\n      }), \" — 그렇지 않으면, 요소를 평탄화된 배열에 추가합니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"단계 4\"\n      }), \" — 마지막으로, 평탄화된 배열을 반환합니다.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"방법 1 — (ForEach 방법)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"단계 1\"\n      }), \" — 평탄화해야 할 입력 배열을 정의합니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" nestedArray = [[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"]], \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \"]]]\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Step 2— \", _jsx(_components.code, {\n        children: \"flattenArray\"\n      }), \" 함수와 결과값(펼쳐진 배열)을 저장할 빈 배열을 만듭니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" nestedArray = [[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"]], \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \"]]]\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"flattenArray\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"arr\"\n        }), \") {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" flattened = [];\\n\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Step 3— 각 요소를 \", _jsx(_components.code, {\n        children: \"forEach\"\n      }), \" 방법으로 반복하고 함수의 끝에 펼쳐진 값을 반환합니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" nestedArray = [[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"]], \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \"]]]\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"flattenArray\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"arr\"\n        }), \") {\\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" flattened = [];\\n\\n   arr.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"forEach\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"item\"\n          }), \" =>\"]\n        }), \" {\\n     \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(item)\\n       \\n   });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" flattened;\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"제 4단계 — 입력 배열로 함수를 호출하고 항목에 대한 console.log를 확인합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" nestedArray = [[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"]], \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \"]]]\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"flattenArray\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"arr\"\n        }), \") {\\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" flattened = [];\\n\\n   arr.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"forEach\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"item\"\n          }), \" =>\"]\n        }), \" {\\n     \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(item)\\n       \\n   });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" flattened;\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" flattenedArray = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"flattenArray\"\n        }), \"(nestedArray);\\n\"]\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-14-JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_1.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Step 5— foreach 코드 안에 위의 console.log 관찰에 따라 몇 가지 조건을 추가해 봅시다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"요소가 배열인 경우, 해당 하위 배열을 평탄화하도록 재귀적으로 자신을 호출합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"그렇지 않으면, 해당 요소를 평탄화된 배열에 푸시합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" nestedArray = [[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"]], \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \"]]]\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"flattenArray\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"arr\"\n        }), \") {\\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" flattened = [];\\n\\n   arr.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"forEach\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"item\"\n          }), \" =>\"]\n        }), \" {\\n   \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 요소가 배열인 경우, 해당 하위 배열을 재귀적으로 평탄화하도록 호출합니다. */\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Array\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"isArray\"\n        }), \"(item)) {\\n            flattened = flattened.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"concat\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"flattenArray\"\n        }), \"(item));\\n        } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n   \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 그렇지 않으면, 해당 요소를 평탄화된 배열에 푸시합니다\"\n        }), \"\\n            flattened.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(item);\\n        }\\n\\n   });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" flattened;\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" flattenedArray = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"flattenArray\"\n        }), \"(nestedArray);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_2.png\",\n        alt: \"JavaScript Basics\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"최종 코드\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" nestedArray = [[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"]], \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \", [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \"]]];\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"flattenArray\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"arr\"\n        }), \") {\\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" flattened = [];\\n\\n   arr.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"forEach\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"item\"\n          }), \" =>\"]\n        }), \" {\\n   \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 만약 요소가 배열이라면 해당 하위 배열을 평탄화하기 위해 재귀적으로 자신을 호출합니다. */\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Array\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"isArray\"\n        }), \"(item)) {\\n            flattened = flattened.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"concat\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"flattenArray\"\n        }), \"(item));\\n        } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n   \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 그렇지 않으면 요소를 평탄화된 배열에 추가합니다.\"\n        }), \"\\n            flattened.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(item);\\n        }\\n\\n   });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" flattened;\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" flattenedArray = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"flattenArray\"\n        }), \"(nestedArray);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ES6 Map 방법을 사용한 또 다른 방법을 DAY 48에서 논의할 예정입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-14-JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_3.png\",\n        alt: \"JavaScriptDay47MasteringJavaScriptBasicsAComprehensiveGuideforInterviewPreparation_3.png\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"행복한 코딩 하세요 그리고 기대해주세요 :)\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"만약 제 블로그가 도움이 되었다면 구독, 박수와 팔로우 부탁드립니다 :)\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}