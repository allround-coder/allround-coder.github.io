{"pageProps":{"post":{"title":"ERR_BLOCKED_BY_RESPONSENotSameOrigin 에 대한 간단한 해결 방법","description":"","date":"2024-05-20 23:04","slug":"2024-05-20-AsimplewaytosolveERR_BLOCKED_BY_RESPONSENotSameOrigin","content":"\n\n<img src=\"/assets/img/2024-05-20-AsimplewaytosolveERR_BLOCKED_BY_RESPONSENotSameOrigin_0.png\" />\n\n\"ERR_BLOCKED_BY_RESPONSE.NotSameOrigin\"은 일반적으로 웹 브라우저에서 발생하는 오류입니다. 이 오류는 웹페이지가 접근하려는 리소스가 페이지 자체와 다른 출처(또는 도메인)를 가지고 있는 경우에 발생합니다. 이는 웹 브라우저에 내장된 보안 기능으로, 다중 사이트 스크립팅 공격을 방지하기 위한 것입니다.\n\n웹 페이지가 다른 출처로 요청을 시도할 때, 브라우저는 해당 요청을 차단하고 \"ERR_BLOCKED_BY_RESPONSE.NotSameOrigin\" 오류 메시지를 반환합니다. 이는 요청을 허용할 경우 민감한 정보가 노출되거나 악성 코드가 페이지에서 실행될 수 있기 때문입니다.\n\n이 오류를 해결하려면 페이지가 접근하려는 모든 리소스(예: 이미지, 스크립트 및 기타 파일)가 페이지 자체와 동일한 도메인에 호스팅되어 있는지 확인해야 합니다. 또는 특정 출처가 리소스에 액세스할 수 있도록 크로스 출처 리소스 공유(CORS)를 사용할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n제 프로젝트에서 가져온 간단한 예시입니다:\n\n이미지 파일 위치를 지정하는 src 속성이 있는 HTML img 태그입니다. 이는 제3자 API입니다.\n\n```js\n<img src={`https://countryflagsapi.com/png/${country.alpha3Code.toLowerCase()}`} alt=\"flag\"/>\n```\n\nimg 태그에 crossorigin 속성을 간단히 추가할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<img crossorigin='anonymous' src={`https://countryflagsapi.com/png/${country.alpha3Code.toLowerCase()}`} alt=”flag”/>\n```\n\n문제를 해결할 수 있는 또 다른 고급 방법이 있습니다. Helmet을 사용하여 crossOriginEmbedderPolicy 미들웨어를 비활성화하는 방법도 있습니다. 더 많은 세부 정보는 여기에서 확인할 수 있습니다.\n\n추가 자료:\nRFC 섹션-3.4.2\n","ogImage":{"url":"/assets/img/2024-05-20-AsimplewaytosolveERR_BLOCKED_BY_RESPONSENotSameOrigin_0.png"},"coverImage":"/assets/img/2024-05-20-AsimplewaytosolveERR_BLOCKED_BY_RESPONSENotSameOrigin_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-20-AsimplewaytosolveERR_BLOCKED_BY_RESPONSENotSameOrigin_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"ERR_BLOCKED_BY_RESPONSE.NotSameOrigin\\\"은 일반적으로 웹 브라우저에서 발생하는 오류입니다. 이 오류는 웹페이지가 접근하려는 리소스가 페이지 자체와 다른 출처(또는 도메인)를 가지고 있는 경우에 발생합니다. 이는 웹 브라우저에 내장된 보안 기능으로, 다중 사이트 스크립팅 공격을 방지하기 위한 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"웹 페이지가 다른 출처로 요청을 시도할 때, 브라우저는 해당 요청을 차단하고 \\\"ERR_BLOCKED_BY_RESPONSE.NotSameOrigin\\\" 오류 메시지를 반환합니다. 이는 요청을 허용할 경우 민감한 정보가 노출되거나 악성 코드가 페이지에서 실행될 수 있기 때문입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 오류를 해결하려면 페이지가 접근하려는 모든 리소스(예: 이미지, 스크립트 및 기타 파일)가 페이지 자체와 동일한 도메인에 호스팅되어 있는지 확인해야 합니다. 또는 특정 출처가 리소스에 액세스할 수 있도록 크로스 출처 리소스 공유(CORS)를 사용할 수도 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"제 프로젝트에서 가져온 간단한 예시입니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이미지 파일 위치를 지정하는 src 속성이 있는 HTML img 태그입니다. 이는 제3자 API입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<img src={\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`https://countryflagsapi.com/png/\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${country.alpha3Code.toLowerCase()}\"\n          }), \"`\"]\n        }), \"} alt=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"flag\\\"\"\n        }), \"/>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"img 태그에 crossorigin 속성을 간단히 추가할 수 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<img crossorigin=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'anonymous'\"\n        }), \" src={\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`https://countryflagsapi.com/png/\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${country.alpha3Code.toLowerCase()}\"\n          }), \"`\"]\n        }), \"} alt=”flag”/>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"문제를 해결할 수 있는 또 다른 고급 방법이 있습니다. Helmet을 사용하여 crossOriginEmbedderPolicy 미들웨어를 비활성화하는 방법도 있습니다. 더 많은 세부 정보는 여기에서 확인할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"추가 자료:\\nRFC 섹션-3.4.2\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}