{"pageProps":{"post":{"title":"리액트, Framer 연동해서 사용하기","description":"","date":"2024-05-20 22:09","slug":"2024-05-20-ReactFramersequences","content":"\n\n웹 애플리케이션용 애니메이션 코드 학습 경험을 공유하려 합니다. 웹 애플리케이션을 위해 애니메이션을 코드로 작성하는 데 사용한 몇 가지 간단하고 빠른 기술을 소개하겠습니다.\n\n## 내용\n\n5분 이내에 만들 수 있는 3가지 기본사항을 살펴보겠습니다.\n\n- 각기 다른 변형 및 staggarChildren으로 간단한 연속 효과\n\n<div class=\"content-ad\"></div>\n\n\n![Image 1](https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif)\n\n2. Sequencing with useAnimate()\n\n![Image 2](https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif)\n\n3. Sequence sequences 😄\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*fYmW-ckGVVVdBn1hR23jzA.gif\" />\n\n## 설정\n\nReact 애플리케이션에 framer-motion을 설치하기만 하면 됩니다.\n\n```js\nnpm install framer-motion\n```\n\n<div class=\"content-ad\"></div>\n\n## 이 기사에 대한 링크\n\nFigma 링크, CodeSandbox: 링크 1, 링크 2, 링크 3\n\n# 변형 및 staggerChildren을 사용한 간단한 순차\n\n이것은 간단한 시각적 상태 변경이 있는 요소들에서 순차를 만드는 가장 쉬운 방법입니다. 이에는 두 가지 부분만이 필요합니다:\n\n<div class=\"content-ad\"></div>\n\n- 변형을 사용하여 애니메이션 설정하기\n- staggerChildren으로 조정하기\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif)\n\n## 단계\n\n- 애니메이션 디자인하기. 글귀가 약간 세로 방향으로 움직이면서 일련의 카드를 흐려지게 만들고 카드를 가로로 가로질러 나누는 선을 그렸습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-ReactFramersequences_0.png\" />\n\n2. 컴포넌트와 스타일을 생성합니다.\n\n```js\ntype Props = {\n  label: string;\n  text: string;\n};\n\nexport const Card = ({ label, text }: Props) => {\n  return (\n    <div className={styles.cardContainer}>\n      <div className={styles.stepLabel}>{label}</div>\n      <div className={styles.divider}></div>\n      <div className={styles.text}>{text}</div>\n    </div>\n  );\n};\n```\n\n3. 이제 우리는 컴포넌트 내에서 재생하고 싶은 애니메이션을 위해 framer variants를 연결할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*dJC-pf0US95Bjk_16mz6vw.gif\" />\n\n변형 요소는 애니메이션이 시작하고 끝나는 스타일을 정의합니다. 여기서 텍스트에 대한 fadeIn 애니메이션과 함께 (텍스트가 수직으로도 5px 이동하는) 'start' 및 'end' 속성을 정의하고, 구분선에 대한 drawIn 애니메이션에 대해서도 두 가지 변형을 사용했습니다.\n\n```js\n...\n  const fadeIn = {\n    start: { opacity: \"0%\", y: \"0px\" },\n    end: {\n      opacity: \"100%\",\n      y: \"-5px\",\n      transition: {\n        duration: 1.2,\n        ease: \"easeOut\",\n        delay: 2,\n      },\n    },\n  };\n\n  const drawIn = {\n    start: { width: \"0\" },\n    end: {\n      width: \"100%\",\n      transition: {\n        duration: 1.2,\n        ease: \"easeOut\",\n        delay: 2,\n      },\n    },\n  };\n...\n```\n\n4. 부모 구성 요소에서 일련의 순서를 조율합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif)\n\n부모 'CardContainer'에서 몇 줄의 코드로 자식 카드에 staggerChildren을 사용하여 지연을 둔 애니메이션을 시작할 수 있습니다.\n\n```js\n...\nexport const CardContainer = () => {\n  const stagger = {\n    start: {},\n    end: {\n      transition: {\n        staggerChildren: 1,\n      },\n    },\n  };\n...\n```\n\n이 샌드박스에서 전체 코드를 확인하세요.\n\n\n<div class=\"content-ad\"></div>\n\n# useAnimate()을 사용한 순차 처리\n\n이 방법은 조금 더 노력이 필요하지만 더 많은 제어를 제공합니다. 각각의 요소를 '선택'하고 서로의 속성 및 타이밍에 관계하여 변경하는 개념입니다.\n\n- 대상으로 지정할 요소들에 대한 범위 추가\n- 요소들을 대상으로 선택하고 애니메이션을 추가합니다\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif)\n\n<div class=\"content-ad\"></div>\n\n## 단계\n\n1. 애니메이션을 디자인하세요.\n\n![image](/assets/img/2024-05-20-ReactFramersequences_1.png)\n\n2. 컴포넌트를 생성하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n...\nexport const Card = () => {\n  return (\n    <div className={styles.cardContainer}>\n      <div className={styles.textBox}>\n        <div className={styles.i}>I</div>\n        <div className={styles.heartTrack}>\n          <div className={styles.heart}>\n            <img src=\"/images/heart.svg\" alt=\"heart\" />\n          </div>\n        </div>\n        <div className={styles.framer}>Framer</div>\n      </div>\n    </div>\n  );\n};\n...\n```\n\n![React Framer sequences](/assets/img/2024-05-20-ReactFramersequences_2.png)\n\n3. 사용할 요소에 애니메이션을 정의하여 순차적인 애니메이션을 활성화합니다. 이 경우에는 카드 컴포넌트의 바깥 요소에 범위를 설정하여 '나무 구조 안에서 애니메이션화할 요소를 선택할 수 있습니다.\n\n```js\n...\n\nexport const Card = () => {\n  const [scope, animate] = useAnimate();\n...\n\n  return (\n    <div className={styles.cardContainer} ref={scope}>\n   ...\n```\n\n<div class=\"content-ad\"></div>\n\n4. 순서를 생성합니다. 하트가 텍스트로 내려오면서 약간 회전하고, 내 텍스트가 만나도록 슬라이드되기를 원합니다. 대상 요소를 참조하는 방법은 여러 가지가 있습니다. 클래스이름을 사용하고, 각 속성에 대한 모든 값을 제공하고 있습니다.\n\n노트할 사항은 제 텍스트 애니메이션에 설정된 ‘`’으로, 연속성을 사용하여 애니메이션이 재생되는 시점을 정의할 수 있습니다. 타임라인에서 요소를 동시에 시작할 수 있는 유용한 방법 중 하나입니다.\n\n```js\nanimate(\n[\n  [\n    `.${styles.heart}`,\n    { rotate: [0, 10, -10, 0], top: [\"-20%\", \"40%\"] },\n    { duration: 3 },\n  ],\n\n  [\n    `.${styles.textBox}`,\n    { gap: [\"250px\", \"24px\"] },\n    { duration: 2, at: \"<\" },\n  ],\n],\n{ delay: 1 }\n);\n}, []);\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif\" />\n\n<div class=\"content-ad\"></div>\n\n해당 샌드박스에서 전체 코드를 확인하세요.\n\n# 시퀀스 하는 시퀀스 😄\n\n마침내, 일련의 시퀀스를 조율하는 방법을 찾고 있었는데, 이것이 문서에서 찾을 수 있는 가장 간단한 방법이었습니다. 만약보다 견고한 해결책이 있다면 공유해주세요.\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*fYmW-ckGVVVdBn1hR23jzA.gif)\n\n<div class=\"content-ad\"></div>\n\n## 단계\n\n- 시퀀스에 지연 추가\n\n```js\n  useEffect(() => {\n    animate(\n      [\n        [\n          scope.current,\n          { backgroundColor: [\"#ED2733\", \"#FF4D98\"] },\n          { duration: 1 },\n        ],\n        [\n          `.${styles.heart}`,\n          { rotate: [0, 10, -10, 0], top: [\"-20%\", \"40%\"] },\n          { duration: 3 },\n        ],\n        [\n          `.${styles.textBox}`,\n          { gap: [\"250px\", \"24px\"] },\n          { duration: 2, at: \"<\" },\n        ],\n      ],\n      { delay: delay }\n    );\n  }, []);\n```\n\n2. Cards에 delay 속성 전달\n\n<div class=\"content-ad\"></div>\n\n위의 코드를 번역하면 다음과 같다.\n\n```javascript\n...\n<Card delay={1} />\n<Card delay={2} />\n...\n```\n\n이 샌드박스에서 전체 코드를 확인할 수 있습니다.\n\n읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-20-ReactFramersequences_0.png"},"coverImage":"/assets/img/2024-05-20-ReactFramersequences_0.png","tag":["Tech"],"readingTime":6},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    img: \"img\",\n    ol: \"ol\",\n    pre: \"pre\",\n    code: \"code\",\n    h1: \"h1\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"웹 애플리케이션용 애니메이션 코드 학습 경험을 공유하려 합니다. 웹 애플리케이션을 위해 애니메이션을 코드로 작성하는 데 사용한 몇 가지 간단하고 빠른 기술을 소개하겠습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"내용\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"5분 이내에 만들 수 있는 3가지 기본사항을 살펴보겠습니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"각기 다른 변형 및 staggarChildren으로 간단한 연속 효과\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif\",\n        alt: \"Image 1\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Sequencing with useAnimate()\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif\",\n        alt: \"Image 2\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Sequence sequences 😄\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"https://miro.medium.com/v2/resize:fit:1400/1*fYmW-ckGVVVdBn1hR23jzA.gif\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"설정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React 애플리케이션에 framer-motion을 설치하기만 하면 됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm install framer-motion\\n\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"이 기사에 대한 링크\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Figma 링크, CodeSandbox: 링크 1, 링크 2, 링크 3\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"변형 및 staggerChildren을 사용한 간단한 순차\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것은 간단한 시각적 상태 변경이 있는 요소들에서 순차를 만드는 가장 쉬운 방법입니다. 이에는 두 가지 부분만이 필요합니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"변형을 사용하여 애니메이션 설정하기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"staggerChildren으로 조정하기\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"애니메이션 디자인하기. 글귀가 약간 세로 방향으로 움직이면서 일련의 카드를 흐려지게 만들고 카드를 가로로 가로질러 나누는 선을 그렸습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-20-ReactFramersequences_0.png\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"컴포넌트와 스타일을 생성합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Props\"\n        }), \" = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"label\"\n        }), \": string;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"text\"\n        }), \": string;\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Card\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ label, text }: Props\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.cardContainer}\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.stepLabel}\"\n            }), \">\"]\n          }), \"{label}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.divider}\"\n            }), \">\"]\n          }), _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.text}\"\n            }), \">\"]\n          }), \"{text}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이제 우리는 컴포넌트 내에서 재생하고 싶은 애니메이션을 위해 framer variants를 연결할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"https://miro.medium.com/v2/resize:fit:1400/1*dJC-pf0US95Bjk_16mz6vw.gif\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"변형 요소는 애니메이션이 시작하고 끝나는 스타일을 정의합니다. 여기서 텍스트에 대한 fadeIn 애니메이션과 함께 (텍스트가 수직으로도 5px 이동하는) 'start' 및 'end' 속성을 정의하고, 구분선에 대한 drawIn 애니메이션에 대해서도 두 가지 변형을 사용했습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"...\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" fadeIn = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"start\"\n        }), \": { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"opacity\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"0%\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"y\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"0px\\\"\"\n        }), \" },\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"end\"\n        }), \": {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"opacity\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"100%\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"y\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"-5px\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transition\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"duration\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.2\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"ease\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"easeOut\\\"\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"delay\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\\n      },\\n    },\\n  };\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" drawIn = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"start\"\n        }), \": { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"width\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"0\\\"\"\n        }), \" },\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"end\"\n        }), \": {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"width\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"100%\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transition\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"duration\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.2\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"ease\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"easeOut\\\"\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"delay\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\\n      },\\n    },\\n  };\\n...\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"부모 구성 요소에서 일련의 순서를 조율합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"부모 'CardContainer'에서 몇 줄의 코드로 자식 카드에 staggerChildren을 사용하여 지연을 둔 애니메이션을 시작할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"...\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"CardContainer\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" stagger = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"start\"\n        }), \": {},\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"end\"\n        }), \": {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transition\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"staggerChildren\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\\n      },\\n    },\\n  };\\n...\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 샌드박스에서 전체 코드를 확인하세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"useAnimate()을 사용한 순차 처리\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 방법은 조금 더 노력이 필요하지만 더 많은 제어를 제공합니다. 각각의 요소를 '선택'하고 서로의 속성 및 타이밍에 관계하여 변경하는 개념입니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"대상으로 지정할 요소들에 대한 범위 추가\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"요소들을 대상으로 선택하고 애니메이션을 추가합니다\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"애니메이션을 디자인하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-ReactFramersequences_1.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"컴포넌트를 생성하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"...\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Card\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.cardContainer}\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.textBox}\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.i}\"\n            }), \">\"]\n          }), \"I\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.heartTrack}\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.heart}\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"img\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"src\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"/images/heart.svg\\\"\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"alt\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"heart\\\"\"\n            }), \" />\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.framer}\"\n            }), \">\"]\n          }), \"Framer\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n...\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-ReactFramersequences_2.png\",\n        alt: \"React Framer sequences\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"사용할 요소에 애니메이션을 정의하여 순차적인 애니메이션을 활성화합니다. 이 경우에는 카드 컴포넌트의 바깥 요소에 범위를 설정하여 '나무 구조 안에서 애니메이션화할 요소를 선택할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"...\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Card\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [scope, animate] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useAnimate\"\n        }), \"();\\n...\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{styles.cardContainer}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ref\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{scope}\"\n            }), \">\"]\n          }), \"\\n   ...\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"순서를 생성합니다. 하트가 텍스트로 내려오면서 약간 회전하고, 내 텍스트가 만나도록 슬라이드되기를 원합니다. 대상 요소를 참조하는 방법은 여러 가지가 있습니다. 클래스이름을 사용하고, 각 속성에 대한 모든 값을 제공하고 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"노트할 사항은 제 텍스트 애니메이션에 설정된 ‘`’으로, 연속성을 사용하여 애니메이션이 재생되는 시점을 정의할 수 있습니다. 타임라인에서 요소를 동시에 시작할 수 있는 유용한 방법 중 하나입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"animate\"\n        }), \"(\\n[\\n  [\\n    \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`.\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${styles.heart}\"\n          }), \"`\"]\n        }), \",\\n    { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"rotate\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"], \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"top\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"-20%\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"40%\\\"\"\n        }), \"] },\\n    { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"duration\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \" },\\n  ],\\n\\n  [\\n    \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`.\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${styles.textBox}\"\n          }), \"`\"]\n        }), \",\\n    { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"gap\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"250px\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"24px\\\"\"\n        }), \"] },\\n    { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"duration\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"at\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"<\\\"\"\n        }), \" },\\n  ],\\n],\\n{ \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"delay\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" }\\n);\\n}, []);\\n\"]\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"해당 샌드박스에서 전체 코드를 확인하세요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"시퀀스 하는 시퀀스 😄\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마침내, 일련의 시퀀스를 조율하는 방법을 찾고 있었는데, 이것이 문서에서 찾을 수 있는 가장 간단한 방법이었습니다. 만약보다 견고한 해결책이 있다면 공유해주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1400/1*fYmW-ckGVVVdBn1hR23jzA.gif\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"시퀀스에 지연 추가\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"animate\"\n        }), \"(\\n      [\\n        [\\n          scope.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \",\\n          { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"backgroundColor\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"#ED2733\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"#FF4D98\\\"\"\n        }), \"] },\\n          { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"duration\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" },\\n        ],\\n        [\\n          \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`.\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${styles.heart}\"\n          }), \"`\"]\n        }), \",\\n          { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"rotate\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"], \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"top\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"-20%\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"40%\\\"\"\n        }), \"] },\\n          { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"duration\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \" },\\n        ],\\n        [\\n          \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`.\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${styles.textBox}\"\n          }), \"`\"]\n        }), \",\\n          { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"gap\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"250px\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"24px\\\"\"\n        }), \"] },\\n          { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"duration\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"at\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"<\\\"\"\n        }), \" },\\n        ],\\n      ],\\n      { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"delay\"\n        }), \": delay }\\n    );\\n  }, []);\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Cards에 delay 속성 전달\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위의 코드를 번역하면 다음과 같다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-javascript\",\n        children: [\"...\\n<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Card\"\n        }), \" delay={\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"} />\\n\", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Card\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"delay\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{2}\"\n            }), \" />\"]\n          })\n        }), \"\\n...\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 샌드박스에서 전체 코드를 확인할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"읽어 주셔서 감사합니다!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}