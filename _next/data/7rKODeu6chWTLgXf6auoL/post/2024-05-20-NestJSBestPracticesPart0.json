{"pageProps":{"post":{"title":"NestJS 전반적인 내용 정리","description":"","date":"2024-05-20 22:20","slug":"2024-05-20-NestJSBestPracticesPart0","content":"\n\n# 용어\n\n## 피처\n\n컨트롤러를 포함하는 모듈은 \"피처\"라고 부릅니다. 피처는 한 앱에서 다른 앱으로 이동할 수 있는 모듈로, 컨트롤러에 주입된 엔티티를 만족시키기 위해 필요한 모든 종속성을 제공해야 합니다.\n\n![이미지](/assets/img/2024-05-20-NestJSBestPracticesPart0_0.png)\n\n<div class=\"content-ad\"></div>\n\n# @글로벌()\n\n글로벌을 사용하지 마세요! 진지해요; 글로벌을 사용하지 말아주세요. 글로벌은 모듈성을 낮춥니다. 글로벌을 사용할 이유가 없어요. 만약에 무언가를 글로벌로 설정해야 한다면, 아키텍처를 확인해보세요.\n\n## 글로벌 함수\n\n.useGlobal* 함수에도 동일한 규칙이 적용돼요. 이러한 함수들은 글로벌 구성을 e2e 테스트에서 반복해야 할 것을 강요할 거예요.\n\n<div class=\"content-ad\"></div>\n\n예를 들어:\n\n```js\nconst app = await NestFactory.create(AppModule);\napp.useGlobalGuards(new RolesGuard()); // <- 좋지 않은 해결책\n```\n\n나는 이러한 구성을 컨트롤러에서 \"재선언\"하는 것을 선호합니다. 이렇게 하면 해당 기능에 모든 종속성을 제공해야 하며 모듈화되고 독립적이게 됩니다.\n\n이 규칙의 유일한 예외는 .setGlobalPrefix 함수입니다.\n\n<div class=\"content-ad\"></div>\n\n# 친절한 한국어 번역 🚀\n\nIn Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 가기 전에:\n\n- 작가를 clapping하고 팔로우 해주세요 ️👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed\n- 알고리즘 콘텐츠를 다루지 않는 블로깅 플랫폼이 필요하신가요? Differ를 시도해보세요\n- PlainEnglish.io에서 더 많은 콘텐츠를 확인하세요","ogImage":{"url":"/assets/img/2024-05-20-NestJSBestPracticesPart0_0.png"},"coverImage":"/assets/img/2024-05-20-NestJSBestPracticesPart0_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"용어\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"피처\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컨트롤러를 포함하는 모듈은 \\\"피처\\\"라고 부릅니다. 피처는 한 앱에서 다른 앱으로 이동할 수 있는 모듈로, 컨트롤러에 주입된 엔티티를 만족시키기 위해 필요한 모든 종속성을 제공해야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-NestJSBestPracticesPart0_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"@글로벌()\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"글로벌을 사용하지 마세요! 진지해요; 글로벌을 사용하지 말아주세요. 글로벌은 모듈성을 낮춥니다. 글로벌을 사용할 이유가 없어요. 만약에 무언가를 글로벌로 설정해야 한다면, 아키텍처를 확인해보세요.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"글로벌 함수\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \".useGlobal* 함수에도 동일한 규칙이 적용돼요. 이러한 함수들은 글로벌 구성을 e2e 테스트에서 반복해야 할 것을 강요할 거예요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예를 들어:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" app = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NestFactory\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AppModule\"\n        }), \");\\napp.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useGlobalGuards\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RolesGuard\"\n        }), \"()); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// <- 좋지 않은 해결책\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나는 이러한 구성을 컨트롤러에서 \\\"재선언\\\"하는 것을 선호합니다. 이렇게 하면 해당 기능에 모든 종속성을 제공해야 하며 모듈화되고 독립적이게 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 규칙의 유일한 예외는 .setGlobalPrefix 함수입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"친절한 한국어 번역 🚀\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 가기 전에:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"작가를 clapping하고 팔로우 해주세요 ️👏️️\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"알고리즘 콘텐츠를 다루지 않는 블로깅 플랫폼이 필요하신가요? Differ를 시도해보세요\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PlainEnglish.io에서 더 많은 콘텐츠를 확인하세요\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}