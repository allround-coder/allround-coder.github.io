{"pageProps":{"post":{"title":"React에 Power BI 보고서를 임베드하는 방법","description":"","date":"2024-05-12 20:38","slug":"2024-05-12-HowtoEmbedAPowerBIReportinReact","content":"\n\n<img src=\"/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_0.png\" />\n\n이 기사에서는 React 애플리케이션에 Power BI 보고서를 임베드하고 Power BI 보고서에 필터를 적용하는 다양한 방법에 대해 설명합니다.\n\nPower BI 보고서를 React 앱에 통합하는 것은 꽤 간단합니다. 몇 가지 단계를 따르기만 하면 됩니다. 또한 코드를 통해 Power BI 보고서에 필터를 추가하거나 제거하거나 사용자 정의할 수도 있습니다.\n\n# 어떻게 시작하나요?\n\n\n\n파워 BI 보고서를 React에 임베드하려면 두 가지 패키지를 설치해야 합니다:\n\n```js\nnpm i powerbi-client-react powerbi-client\n```\n\n그런 다음, 컴포넌트에서 아래와 같이 보고서를 임베드할 수 있습니다:\n\n```js\nimport { FC, useEffect, useState} from 'react';\nimport { models } from 'powerbi-client';\nimport { PowerBIEmbed } from 'powerbi-client-react';\n\nconst PowerBiPOC: FC = () => {\n  const [reportConfig, setReportConfig] = useState<models.IReportEmbedConfiguration>({\n    type: 'report',\n    embedUrl: undefined,\n    accessToken: undefined,\n    id: undefined,\n    tokenType: models.TokenType.Embed,\n    settings: {\n      panes: {\n        filters: {\n          expanded: false,\n          visible: true\n        }\n      },\n      background: models.BackgroundType.Transparent,\n    }\n  });\n  useEffect(() => {\n    axios.get('파워 BI 세부 정보를 가져오기 위한 API URL').then((response: any) => {\n      setReportConfig({\n        ...reportConfig,\n        embedUrl: response.value.embedUrl,\n        accessToken: response.value.token,\n        id: response.value.id\n      });\n    })\n  }, []);\n  return (<>\n    <div>\n      <PowerBIEmbed\n        embedConfig={reportConfig}\n        cssClassName='power-bi-report-class'\n      />\n    </div>\n  </>)\n}\nexport default PowerBiPOC;\n```\n\n\n\n위의 코드 스니펫을 보면 코드가 작동하려면 임베드 토큰, 임베드 URL 및 보고서 ID가 필요합니다. 이를 위해 3단계를 따라야 합니다:\n\n## 단계 1:\n\n$'tenant-id'의 테넌트 ID를 사용하여 https://login.microsoftonline.com/oauth2/tokenAPI로 POST 요청을 보냅니다. 응용 프로그램의 client_id, client_secret, resource 및 grant_type을 이 API로 페이로드로 전달해야 합니다. 아래와 같이 보내야 합니다: \n\n![이미지](/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_1.png)\n\n\n\nStep 2:\n\n다음 단계에서 필요한 액세스 토큰을 반환합니다.\n\n## 단계 2:\n\nhttps://api.powerbi.com/v1.0/myorg/groups/$'작업영역-id'/reportsAPI로 GET 요청을 보냅니다. 이전 단계에서 받은 bearer 액세스 토큰을 사용하고, 이 API에서 당신의 보고서에 대한 아래 세부 정보를 응답으로 받을 수 있습니다.\n\n```js\n\"value\": [\n  {\n      \"Id\": 다음 단계 및 React 코드에서 필요한 보고서 ID,\n      \"reportType\": \"PowerBIReport\",\n      \"name\": 보고서 이름,\n      \"webUrl\": 보고서 URL,\n      \"embedUrl\": React 코드에서 필요한 임베드 URL,\n      \"isFromPbix\": true,\n      \"isOwnedByMe\": true,\n      \"datasetId\": 다음 단계에서 필요한 데이터 세트 ID,\n      \"datasetWorkspaceId\": “\",\n      \"users\": [],\n      \"subscriptions\": []\n  }\n]\n```\n\n\n\n## 단계 3:\n\n임베드 액세스 토큰을 얻으려면 https://api.powerbi.com/v1.0/myorg/GenerateTokenAPI 로 POST 요청을 보내야 합니다. 단계 1에서 얻은 베어러 엑세스 토큰을 사용해야 하며, 요청 페이로드는 다음과 같이 보일 것입니다:\n\n```js\n{\n  \"datasets\": [\n    {\n    \"id\" : \"\"\n    }\n  ],\n  \"reports\": [\n    {\n    \"id\": \"\"\n    }\n  ]\n}\n```\n\n보고서와 데이터셋 ID가 있는 객체를 위해 이전 단계에서 데이터셋과 보고서 ID를 복사하여 여기에 사용하세요. 여러 개의 ID를 전달하고, 그런 다음 동일한 임베드 토큰을 사용하여 UI에서 모든 보고서에 액세스할 수 있습니다.\n\n\n\nAPI로부터 토큰 및 토큰 ID를 받게 됩니다.\n\n이제 필요한 모든 데이터를 가지고 있으니, 다음을 API 응답으로 제공해주세요:\n\n- 임베드 URL: 단계 2에서 받은 URL\n- ID: 보고서 ID, 단계 2에서 받은 것\n- 임베드 토큰: 단계 3에서 받은 토큰\n\n만세, 보고서가 성공적으로 UI에 임베드되었습니다 🙂.\n\n\n\n# Power BI 보고서에 필터를 추가하는 방법\n\nPower BI 보고서에 필터를 추가하고 싶다면 세 가지 방법으로 할 수 있어요:\n\n## 1: 쿼리 매개변수 사용\n\n임베드 URL을 설정할 때 아래와 같이 필터를 전달할 수 있어요:\n\n\n\n```js\nembedUrl: `${response.value.embedUrl}&filter=${table_name}/${table_coloumn} eq ${filter_value}`,\n```\n\n내장 URL 뒤에 &filter=을 추가하세요. 걸러내고 싶은 테이블 이름, 그 다음 테이블 열 이름, 연산자, 마지막으로 필터 값까지 전달하세요.\n\nand연산자를 사용하여 여러 필터를 전달할 수도 있습니다:\n\n```js\n&filter=State/State eq 'MH' and Customer/Age in (30,35)\n```\n\n\n\n여러분의 사용에 따라 아래 표에 표시된 것처럼 여러 개의 필터 연산자를 사용할 수 있습니다:\n\n![표](/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_2.png)\n\n## 2: 설정 객체에 필터 전달\n\n아래에 표시된대로 설정 객체에 필터를 전달할 수 있습니다.\n\n\n\n위는 주요 필터 예제이지만, 다른 종류의 필터도 있습니다. 공식 문서 사이트에서 확인할 수 있습니다.\n\n## 3: 내장 함수나 메소드 사용하기\n\n아래 코드에 getEmbeddedComponent와 eventHandlers를 추가하세요:\n\n\n\n```js\n<PowerBIEmbed\n  embedConfig = {reportConfig}\n  cssClassName = 'power-bi-report-height'\n  eventHandlers={eventHandlersMap}\n  getEmbeddedComponent={(embedObject) => {\n    window.report = embedObject;\n  }\n/>\n```\n\ngetEmbeddedComponent 함수를 통해 보고서 개체에 액세스할 수 있으며, 이를 통해 필터를 추가, 제거 또는 업데이트할 수 있습니다.\n\neventHandlers를 사용하여 Power BI 보고서의 다양한 이벤트에 액세스할 수 있습니다.\n\n허용된 이벤트는 다음과 같습니다:-\n```\n\n\n\n```js\n[\n  \"로드됨\",\n  \"저장됨\",\n  \"렌더링됨\",\n  \"saveAsTriggered\",\n  \"에러\",\n  \"데이터 선택됨\",\n  \"버튼 클릭됨\",\n  \"정보\",\n  \"필터 적용됨\",\n  \"페이지 변경됨\",\n  \"명령 트리거됨\",\n  \"스와이프 시작\",\n  \"스와이프 끝\",\n  \"북마크 적용됨\",\n  \"데이터 하이퍼링크 클릭됨\",\n  \"비주얼 렌더링됨\",\n  \"비주얼 클릭됨\",\n  \"선택 변경됨\",\n  \"렌더링 시작됨\",\n  \"흐림\"\n]\n```\n\n아래 코드 스니펫에 표시된대로 이벤트 핸들러를 사용할 수 있습니다:\n\n```js\nconst eventHandlersMap = new Map([\n    [\n      '로드됨',\n      function () {\n          console.log('보고서가 로드되었습니다', window.report);\n      }\n    ],\n    [\n      '렌더링됨',\n      function () {\n        console.log('보고서가 렌더링되었습니다', window.report);\n      }\n    ],\n    [\n      '에러',\n      function (event: any) {\n        if (event) {\n          console.error(event.detail);\n        }\n      }\n    ]\n  ]);\n```\n\n고객님의 시나리오와 사용 방법에 따라 다양한 이벤트 핸들러를 사용할 수 있습니다. 이 예시에서는 로드된 이벤트만 사용할 것입니다.\n\n\n\n지금, 보고서에 현재 적용된 모든 필터를 얻고 싶다면 getFilters() 메소드를 사용하세요:\n\n```js\n[\n  '로드된',\n    async function () {\n     const filters = await window.report.getFilters();\n        console.log('보고서가 로드되었습니다', window.report, filters );\n    }\n],\n```\n\n콘솔에서 보고서에 적용된 모든 필터의 객체 배열을 얻을 수 있습니다:\n\n```js\n[\n    {\n        \"$schema\": \"http://powerbi.com/product/schema#basic\",\n        \"target\": {\n            \"table\": 테이블_이름,\n            \"column\": 테이블_열\n        },\n        \"filterType\": 1,\n        \"displaySettings\": {\n            \"isLockedInViewMode\": true\n        },\n        \"operator\": \"In\",\n        \"values\": [\n            필터_값\n        ],\n        \"requireSingleSelection\": false\n    }\n]\n```\n\n\n\n보고서에 적용된 모든 필터를 제거하거나 새 필터를 추가하는 데 updateFilters() 메서드를 사용할 수 있어요:\n\n```js\n[\n  'loaded',\n      async function () {\n        await  window.report.updateFilters(models.FiltersOperations.RemoveAll);\n        console.log('Report has loaded', window.report);\n      }\n],\n```\n\n```js\n[\n      'loaded',\n      async function () {\n        const filtersArray = [\n          {\n            $schema: 'http://powerbi.com/product/schema#basic',\n            target: {\n              Table: table_name,\n              Column: table_column\n            },\n            operator: 'In',\n            values: [ filter_value ],\n            filterType: models.FilterType.Basic,\n            requireSingleSelection: true\n          }\n        ];\n        await window.report.updateFilters(\n          models.FiltersOperations.Add,\n          filtersArray\n        );\n        console.log('Report has loaded', window.report);\n      }\n],\n```\n\n그러니 이제 Power BI 임베드 보고서를 위해 애플리케이션에 필터를 추가, 업데이트, 제거하는 세 가지 서로 다른 방법을 알게 되었어요.\n\n\n\n# 결론\n\n이 글에서 React 애플리케이션에 Power BI 보고서를 임베드하는 절차를 설명했습니다.\n\n웹 및 API 측면에 변경을 마친 후 애플리케이션을 실행하고 보고서를 확인해보세요.\n\n질문이 있거나 인사이트를 공유하고 싶다면 언제든지 댓글 섹션에 남겨주세요. 감사합니다!","ogImage":{"url":"/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_0.png"},"coverImage":"/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_0.png","tag":["Tech"],"readingTime":7},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h2: \"h2\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기사에서는 React 애플리케이션에 Power BI 보고서를 임베드하고 Power BI 보고서에 필터를 적용하는 다양한 방법에 대해 설명합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Power BI 보고서를 React 앱에 통합하는 것은 꽤 간단합니다. 몇 가지 단계를 따르기만 하면 됩니다. 또한 코드를 통해 Power BI 보고서에 필터를 추가하거나 제거하거나 사용자 정의할 수도 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"어떻게 시작하나요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"파워 BI 보고서를 React에 임베드하려면 두 가지 패키지를 설치해야 합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"npm i powerbi-client-react powerbi-client\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런 다음, 컴포넌트에서 아래와 같이 보고서를 임베드할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FC\"\n        }), \", useEffect, useState} \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { models } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'powerbi-client'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PowerBIEmbed\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'powerbi-client-react'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PowerBiPOC\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FC\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [reportConfig, setReportConfig] = useState<models.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"IReportEmbedConfiguration\"\n        }), \">({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'report'\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"embedUrl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"undefined\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"accessToken\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"undefined\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"undefined\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"tokenType\"\n        }), \": models.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"TokenType\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Embed\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"settings\"\n        }), \": {\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"panes\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"filters\"\n        }), \": {\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"expanded\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \",\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"visible\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n        }\\n      },\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"background\"\n        }), \": models.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"BackgroundType\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Transparent\"\n        }), \",\\n    }\\n  });\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    axios.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'파워 BI 세부 정보를 가져오기 위한 API URL'\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"then\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"response: any\"\n          }), \") =>\"]\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setReportConfig\"\n        }), \"({\\n        ...reportConfig,\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"embedUrl\"\n        }), \": response.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"embedUrl\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"accessToken\"\n        }), \": response.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"token\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": response.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n      });\\n    })\\n  }, []);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"<>\"\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"PowerBIEmbed\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"embedConfig\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{reportConfig}\"\n            }), \"\\n        \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"cssClassName\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"'power-bi-report-class'\"\n            }), \"\\n      />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"div\"\n            }), \">\"]\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-tag\",\n            children: \"</>\"\n          })]\n        }), \")\\n}\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PowerBiPOC\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위의 코드 스니펫을 보면 코드가 작동하려면 임베드 토큰, 임베드 URL 및 보고서 ID가 필요합니다. 이를 위해 3단계를 따라야 합니다:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 1:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"$'tenant-id'의 테넌트 ID를 사용하여 https://login.microsoftonline.com/oauth2/tokenAPI로 POST 요청을 보냅니다. 응용 프로그램의 client_id, client_secret, resource 및 grant_type을 이 API로 페이로드로 전달해야 합니다. 아래와 같이 보내야 합니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Step 2:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 단계에서 필요한 액세스 토큰을 반환합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 2:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"https://api.powerbi.com/v1.0/myorg/groups/$'작업영역-id'/reportsAPI로 GET 요청을 보냅니다. 이전 단계에서 받은 bearer 액세스 토큰을 사용하고, 이 API에서 당신의 보고서에 대한 아래 세부 정보를 응답으로 받을 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"value\\\"\"\n        }), \": [\\n  {\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Id\\\"\"\n        }), \": 다음 단계 및 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" 코드에서 필요한 보고서 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ID\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"reportType\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"PowerBIReport\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"name\\\"\"\n        }), \": 보고서 이름,\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"webUrl\\\"\"\n        }), \": 보고서 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"URL\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"embedUrl\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \" 코드에서 필요한 임베드 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"URL\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"isFromPbix\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"isOwnedByMe\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"datasetId\\\"\"\n        }), \": 다음 단계에서 필요한 데이터 세트 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ID\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"datasetWorkspaceId\\\"\"\n        }), \": “\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\",\\n      \\\"\"\n        }), \"users\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\": [],\\n      \\\"\"\n        }), \"subscriptions\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\": []\\n  }\\n]\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 3:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"임베드 액세스 토큰을 얻으려면 https://api.powerbi.com/v1.0/myorg/GenerateTokenAPI 로 POST 요청을 보내야 합니다. 단계 1에서 얻은 베어러 엑세스 토큰을 사용해야 하며, 요청 페이로드는 다음과 같이 보일 것입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"{\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"datasets\\\"\"\n        }), \": [\\n    {\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"id\\\"\"\n        }), \" : \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \"\\n    }\\n  ],\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"reports\\\"\"\n        }), \": [\\n    {\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"id\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \"\\n    }\\n  ]\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"보고서와 데이터셋 ID가 있는 객체를 위해 이전 단계에서 데이터셋과 보고서 ID를 복사하여 여기에 사용하세요. 여러 개의 ID를 전달하고, 그런 다음 동일한 임베드 토큰을 사용하여 UI에서 모든 보고서에 액세스할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"API로부터 토큰 및 토큰 ID를 받게 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 필요한 모든 데이터를 가지고 있으니, 다음을 API 응답으로 제공해주세요:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"임베드 URL: 단계 2에서 받은 URL\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ID: 보고서 ID, 단계 2에서 받은 것\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"임베드 토큰: 단계 3에서 받은 토큰\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만세, 보고서가 성공적으로 UI에 임베드되었습니다 🙂.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Power BI 보고서에 필터를 추가하는 방법\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Power BI 보고서에 필터를 추가하고 싶다면 세 가지 방법으로 할 수 있어요:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1: 쿼리 매개변수 사용\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"임베드 URL을 설정할 때 아래와 같이 필터를 전달할 수 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"embedUrl\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${response.value.embedUrl}\"\n          }), \"&filter=\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${table_name}\"\n          }), \"/\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${table_coloumn}\"\n          }), \" eq \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${filter_value}\"\n          }), \"`\"]\n        }), \",\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"내장 URL 뒤에 &filter=을 추가하세요. 걸러내고 싶은 테이블 이름, 그 다음 테이블 열 이름, 연산자, 마지막으로 필터 값까지 전달하세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"and연산자를 사용하여 여러 필터를 전달할 수도 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"&filter=\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"State\"\n        }), \"/\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"State\"\n        }), \" eq \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'MH'\"\n        }), \" and \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Customer\"\n        }), \"/\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Age\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"30\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"35\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여러분의 사용에 따라 아래 표에 표시된 것처럼 여러 개의 필터 연산자를 사용할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-12-HowtoEmbedAPowerBIReportinReact_2.png\",\n        alt: \"표\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2: 설정 객체에 필터 전달\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래에 표시된대로 설정 객체에 필터를 전달할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위는 주요 필터 예제이지만, 다른 종류의 필터도 있습니다. 공식 문서 사이트에서 확인할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3: 내장 함수나 메소드 사용하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 코드에 getEmbeddedComponent와 eventHandlers를 추가하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PowerBIEmbed\"\n        }), \"\\n  embedConfig = {reportConfig}\\n  cssClassName = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'power-bi-report-height'\"\n        }), \"\\n  eventHandlers={eventHandlersMap}\\n  getEmbeddedComponent={\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"embedObject\"\n          }), \") =>\"]\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"report\"\n        }), \" = embedObject;\\n  }\\n/>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"getEmbeddedComponent 함수를 통해 보고서 개체에 액세스할 수 있으며, 이를 통해 필터를 추가, 제거 또는 업데이트할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"eventHandlers를 사용하여 Power BI 보고서의 다양한 이벤트에 액세스할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"허용된 이벤트는 다음과 같습니다:-\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n\\n\\n```js\\n[\\n  \\\"로드됨\\\",\\n  \\\"저장됨\\\",\\n  \\\"렌더링됨\\\",\\n  \\\"saveAsTriggered\\\",\\n  \\\"에러\\\",\\n  \\\"데이터 선택됨\\\",\\n  \\\"버튼 클릭됨\\\",\\n  \\\"정보\\\",\\n  \\\"필터 적용됨\\\",\\n  \\\"페이지 변경됨\\\",\\n  \\\"명령 트리거됨\\\",\\n  \\\"스와이프 시작\\\",\\n  \\\"스와이프 끝\\\",\\n  \\\"북마크 적용됨\\\",\\n  \\\"데이터 하이퍼링크 클릭됨\\\",\\n  \\\"비주얼 렌더링됨\\\",\\n  \\\"비주얼 클릭됨\\\",\\n  \\\"선택 변경됨\\\",\\n  \\\"렌더링 시작됨\\\",\\n  \\\"흐림\\\"\\n]\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 코드 스니펫에 표시된대로 이벤트 핸들러를 사용할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" eventHandlersMap = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Map\"\n        }), \"([\\n    [\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'로드됨'\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n          \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'보고서가 로드되었습니다'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"report\"\n        }), \");\\n      }\\n    ],\\n    [\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'렌더링됨'\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'보고서가 렌더링되었습니다'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"report\"\n        }), \");\\n      }\\n    ],\\n    [\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'에러'\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"event: any\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (event) {\\n          \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"detail\"\n        }), \");\\n        }\\n      }\\n    ]\\n  ]);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"고객님의 시나리오와 사용 방법에 따라 다양한 이벤트 핸들러를 사용할 수 있습니다. 이 예시에서는 로드된 이벤트만 사용할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지금, 보고서에 현재 적용된 모든 필터를 얻고 싶다면 getFilters() 메소드를 사용하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"[\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'로드된'\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n     \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" filters = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"report\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getFilters\"\n        }), \"();\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'보고서가 로드되었습니다'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"report\"\n        }), \", filters );\\n    }\\n],\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"콘솔에서 보고서에 적용된 모든 필터의 객체 배열을 얻을 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"[\\n    {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$schema\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"http://powerbi.com/product/schema#basic\\\"\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"target\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"table\\\"\"\n        }), \": 테이블_이름,\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"column\\\"\"\n        }), \": 테이블_열\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"filterType\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"displaySettings\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"isLockedInViewMode\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"operator\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"In\\\"\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"values\\\"\"\n        }), \": [\\n            필터_값\\n        ],\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"requireSingleSelection\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"\\n    }\\n]\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"보고서에 적용된 모든 필터를 제거하거나 새 필터를 추가하는 데 updateFilters() 메서드를 사용할 수 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"[\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'loaded'\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \"  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"report\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"updateFilters\"\n        }), \"(models.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"FiltersOperations\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"RemoveAll\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Report has loaded'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"report\"\n        }), \");\\n      }\\n],\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"[\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'loaded'\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" filtersArray = [\\n          {\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"$schema\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'http://powerbi.com/product/schema#basic'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"target\"\n        }), \": {\\n              \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Table\"\n        }), \": table_name,\\n              \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Column\"\n        }), \": table_column\\n            },\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"operator\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'In'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"values\"\n        }), \": [ filter_value ],\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"filterType\"\n        }), \": models.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"FilterType\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Basic\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"requireSingleSelection\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n          }\\n        ];\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"report\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"updateFilters\"\n        }), \"(\\n          models.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"FiltersOperations\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Add\"\n        }), \",\\n          filtersArray\\n        );\\n        \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Report has loaded'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"window\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"report\"\n        }), \");\\n      }\\n],\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러니 이제 Power BI 임베드 보고서를 위해 애플리케이션에 필터를 추가, 업데이트, 제거하는 세 가지 서로 다른 방법을 알게 되었어요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 글에서 React 애플리케이션에 Power BI 보고서를 임베드하는 절차를 설명했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"웹 및 API 측면에 변경을 마친 후 애플리케이션을 실행하고 보고서를 확인해보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"질문이 있거나 인사이트를 공유하고 싶다면 언제든지 댓글 섹션에 남겨주세요. 감사합니다!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}