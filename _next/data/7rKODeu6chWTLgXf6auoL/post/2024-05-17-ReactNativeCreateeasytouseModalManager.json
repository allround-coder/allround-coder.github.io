{"pageProps":{"post":{"title":"리액트 네이티브로 모달을 윕게 사용할 수 있는 Modal Manager 만들기","description":"","date":"2024-05-17 21:03","slug":"2024-05-17-ReactNativeCreateeasytouseModalManager","content":"\n\n<img src=\"/assets/img/2024-05-17-ReactNativeCreateeasytouseModalManager_0.png\" />\n\n안녕하세요, 개발자 여러분!\n\n오늘은 React Native에서 모달을 가장 간편하고 편리하게 사용하는 방법에 대해 알아보겠습니다! React Native에서 모달을 사용하는 전통적인 방법은 각 화면이나 컴포넌트마다 \"Modal\" 컴포넌트와 해당 props를 정의하는 것이 일반적입니다. 이는 종종 모달이 사용되는 문맥에 높은 결합도를 가지는 문제로 이어질 수 있습니다.\n\n보통 확인 또는 다른 복잡한 동작에 모달을 사용하는 각 화면에서는 useState를 사용하여 가시성 상태를 정의합니다 (전통적인 [visible, setVisible] = useState(false) 방식), 이를 통해 모달이 화면에 표시되는지 여부를 컨트롤합니다. 이 방법은 개발 속도를 크게 늦추고 유연성과 재사용성을 저하시키는 요소로 인식됩니다.\n\n<div class=\"content-ad\"></div>\n\n이 문제를 해결하기 위해 간단하고 효율적인 방법으로 모달 가시성을 관리하는 방법을 고안했습니다.\n\n화면 중앙에 표시되는 모달과 화면 하단에 고정된 모달을 위한 두 가지 다른 구성을 채택했습니다.\n\n그러니, 프로젝트 구조를 설정해 보겠습니다. 먼저 프로젝트의 src 디렉토리 내에 \"modal-manager\" 폴더를 추가하는 것으로 시작하겠습니다.\n\n![모달 매니저](/assets/img/2024-05-17-ReactNativeCreateeasytouseModalManager_1.png)\n\n<div class=\"content-ad\"></div>\n\n보시다시피, 프로젝트를 최적으로 관리할 수 있는 간단하고 조직적인 구조를 만드는 것이 매우 중요합니다.\n\n최종 결과물로서, 모달을 메인 파일(예: App.tsx)에 삽입한 다음 간단한 방법으로 어디서든 사용할 수 있습니다.\n\n필요한 종속성은 \"react-native-modal\"뿐입니다. 따라서 모든 것이 올바르게 작동하도록 하려면 선호하는 패키지 관리자에 따라 npm 또는 yarn을 사용하여 라이브러리를 설치해야 합니다(저는 yarn을 선호합니다).\n\n여기에서는 나중에 사용할 모달을 어디에 어떻게 정의하는지에 대한 예제가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```jsx\n  import { NavigationContainer } from '@react-navigation/native';\n  import Modal, { BaseCenterModalContainer, BaseBottomModalContainer } from \"./src/modal-manager\";\n\n  export const App = () => {\n   \n   const showCenteredModal = () => {\n     Modal.show({\n       children: (\n         <BaseCenterModalContainer style={ height: 400, backgroundColor: 'white' }>\n           <Text>Center modal</Text>\n         </BaseCenterModalContainer>\n       ),\n       dismissable: true,\n       position: 'center',\n     });\n   };\n  \n  \n   return (\n     <NavigationContainer>\n       <Modal />\n       {children}\n     </NavigationContainer>\n   )\n  }\n```\n\n위에서 볼 수 있듯이, 모달을 사용하는 두 가지 예제가 있습니다. 간단하게 사용하기 위해 App.tsx 파일에 배치되었지만, 프로젝트의 어디에서든 \"Modal.show\" 및 \"Modal.hide\" 메소드를 사용할 수 있습니다.\n\n더불어, 모든 코드를 TypeScript로 작성하여 더 깨끗하고 재사용 가능한 코드를 구현하였습니다.\n\n두 가지 방법으로 모달을 표시할 수 있는 옵션이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n1 — 화면 하단에\n\n```js\nModal.show({\n children: (\n   <BaseBottomModalContainer style={ height: 400, backgroundColor: 'white' }>\n     <Text>Center modal</Text>\n    </BaseBottomModalContainer>\n  ),\n  dismissable: true,\n  position: 'bottom',\n});\n```\n\n<img src=\"/assets/img/2024-05-17-ReactNativeCreateeasytouseModalManager_2.png\" />\n\n2 — 화면 중앙에 위치\n\n<div class=\"content-ad\"></div>\n\n```js\nModal.show({\n    children: (\n      <BaseCenterModalContainer style={ height: 400, backgroundColor: 'white' }>\n        <Text>Center modal</Text>\n      </BaseCenterModalContainer>\n    ),\n    dismissable: true,\n    position: 'center',\n  });\n```\n\n![Modal Manager](/assets/img/2024-05-17-ReactNativeCreateeasytouseModalManager_3.png)\n\n두 경우 모두 세 가지 주요 속성이 있습니다:\n\n- children ⇒ 모달의 콘텐츠를 나타냅니다. 예를 들어, 간단한 텍스트를 삽입했습니다.\n- dismissable ⇒ 배경을 탭하여 모달을 닫을 수 있는지 여부를 나타냅니다.\n- position ⇒ 모달의 위치를 지정합니다. 이는 중앙 또는 하단일 수 있습니다. 이 두 값 중 하나를 사용할 때는 기본적인 스타일을 쉽게 오버라이드할 수 있는 BaseCenterModalContainer 또는 BaseBottomModalContainer 컴포넌트를 사용할 수도 있습니다.```\n\n<div class=\"content-ad\"></div>\n\n또한, 이전 구성 요소를 사용하지 않고도 모달에 표시해야 하는 구성 요소를 간단히 전달할 수도 있습니다.\n\n자 이제 다양한 부분들을 자세히 살펴보겠습니다.\n\ntypes/index.tsx\n\n모달에 대한 모든 유용한 유형은 이 파일 내에서 정의되어 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { ReactNode } from 'react';\nimport { StyleProp } from 'react-native';\n\nexport type ReactChildren = ReactNode;\n\nexport type ModalData = {\n  children: ReactChildren;\n};\n\nexport type ModalOptions = {\n  dismissable: boolean;\n  animated?: boolean;\n  position: 'center' | 'bottom';\n};\n\nexport type ModalShowParams = ModalData & ModalOptions;\n\nexport type ModalHideParams = {};\n\nexport type ModalRef = {\n  show: (params: ModalShowParams) => void;\n  hide: (params?: ModalHideParams) => void;\n};\n\nexport type ModalConfig = {\n  style?: StyleProp<any>;\n};\n\nexport type ModalProps = {\n  config?: ModalConfig;\n};\n```\n\n컴포넌트 관련해서는 세 가지가 있습니다.\n\n이 중에서 가장 중요한 것은 모달의 기본 시각적 디자인을 캡슐화하고 있습니다. 특히 화면의 중앙이나 하단에 모달이 표시될지를 결정합니다.\n\nModalUI.tsx\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { Dimensions, StyleSheet } from \"react-native\";\nimport { ModalConfig, ModalData, ModalHideParams, ModalOptions, ModalShowParams } from \"../types\";\nimport RNModal from \"react-native-modal\";\nimport { useCallback } from \"react\";\n\nexport type ModalUIProps = {\n  isVisible: boolean;\n  options: ModalOptions;\n  data: ModalData;\n  show: (params: ModalShowParams) => void;\n  hide: (params: ModalHideParams) => void;\n  config?: ModalConfig;\n  onHide: () => void;\n};\n\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('screen');\n\nexport const ModalUI = ({\n  isVisible,\n  data,\n  options,\n  hide,\n  onHide,\n  config,\n}: ModalUIProps) => {\n  const { children } = data;\n  const { style } = config || {};\n  const { dismissable, position, animated } = options;\n\n  const onBackdropPress = useCallback(() => {\n    if (dismissable) {\n      hide({});\n    }\n  }, []);\n\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <RNModal\n      {...RNModal.defaultProps}\n      isVisible={isVisible}\n      useNativeDriver\n      deviceHeight={SCREEN_HEIGHT}\n      deviceWidth={SCREEN_WIDTH}\n      style={[modalPositionStyles[position], styles.modal, style]}\n      onBackdropPress={onBackdropPress}\n      avoidKeyboard={false}\n      onModalHide={onHide}\n      backdropOpacity={0.4}\n    >\n      {children}\n    </RNModal>\n  );\n};\n\nconst modalPositionStyles = StyleSheet.create({\n  center: {\n    justifyContent: 'center',\n    margin: 20,\n  },\n  bottom: {\n    justifyContent: 'flex-end',\n    margin: 0,\n  },\n});\n\nconst styles = StyleSheet.create({\n  modal: {},\n});\n```\n\n이 컴포넌트는 React Native에서 모달의 시각적 측면을 관리합니다. 다음은 이 컴포넌트의 역할입니다:\n\n2. 초기 설정:\n\n- 모달의 표시 상태, 표시할 데이터, 모달 구성 옵션, 모달을 숨기는 함수 및 모달 닫기 이벤트를 처리하는 콜백 함수와 같은 props를 받습니다.\n\n\n<div class=\"content-ad\"></div>\n\n2. 이벤트 처리:\n\n- 모달이 닫힐 수 있도록 설정되어 있으면 (dismissable), 모달 바깥 영역을 탭하면 모달을 숨기는 함수가 정의됩니다 (onBackdropPress).\n\n3. 모달 렌더링:\n\n- 모달의 내용은 존재하는 경우에만 조건부로 렌더링됩니다 (children). 표시할 데이터가 없는 경우에는 컴포넌트가 null을 반환합니다.\n- 모달을 생성하기 위해 react-native-modal 컴포넌트를 사용합니다.\n- 모달의 위치 (가운데 또는 아래)에 기본 스타일을 적용하고, config prop을 통해 제공된 스타일을 통해 사용자 정의를 허용합니다.\n\n<div class=\"content-ad\"></div>\n\n4. 미리 정의된 스타일:\n\n- 화면 중앙 또는 하단에 모달을 위치시키기 위해 두 세트의 스타일을 정의합니다.\n\n5. 모달 상태 관리:\n\n- 모달은 화면 크기를 상태의 일부로 수신하여 다양한 기기 크기에 적절하게 적응합니다.\n\n<div class=\"content-ad\"></div>\n\n요약하자면, 이 컴포넌트는 리액트 네이티브에서 모달을 유연하고 구성 가능하게 표시하는 인프라를 제공하며, 애플리케이션 요구에 맞는 외관 및 동작을 사용자화할 수 있습니다.\n\nBaseBottomModalContainer.tsx\n\n이 간단한 컴포넌트는 하단 모달에서 일반적으로 사용되는 기본 스타일을 정의하는 곳입니다. 예를 들어, 둥근 테두리 등이 있습니다.\n\n```js\nimport { StyleSheet, ViewProps } from \"react-native\";\n\nexport const BaseBottomModalContainer = ({ children, style, ...props }: ViewProps) => {\n  return (\n    <View style={[styles.container, style]} {...props}>\n      {children}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderTopRightRadius: 20,\n    borderTopLeftRadius: 20,\n    padding: 20\n  }\n})\n```\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경해주세요.\n\nBaseCenterModalContainer.tsx\n\n```js\nimport { StyleSheet, View, ViewProps } from \"react-native\";\n\nexport const BaseCenterModalContainer = ({ children, style, ...props }: ViewProps) => {\n  return (\n    <View style={StyleSheet.compose(styles.container, style)} {...props}>\n      {children}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 20,\n    padding: 20\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { useCallback, useState } from 'react';\nimport { ModalData, ModalOptions, ModalProps, ModalShowParams } from '../types';\nimport { mergeIfDefined } from '../utils/obj.ts';\n\nexport type UseModalParams = {\n  defaultOptions: Omit<ModalProps, 'config'>;\n};\n\nconst DEFAULT_OPTIONS: ModalOptions = {\n  dismissable: true,\n  position: 'center',\n  animated: false\n};\n\nexport const useModal = ({ defaultOptions }: UseModalParams) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [data, setData] = useState<ModalData>({\n    children: null,\n  });\n\n  const initialOptions = mergeIfDefined(\n    DEFAULT_OPTIONS,\n    defaultOptions,\n  ) as Required<ModalOptions>;\n\n  const [options, setOptions] = useState<ModalOptions>(initialOptions);\n\n  const show = useCallback(\n    (params: ModalShowParams) => {\n      setData({\n        children: params.children ?? null,\n      });\n      setOptions({\n        dismissable: params.dismissable ?? initialOptions.dismissable,\n        position: params.position ?? initialOptions.position,\n        animated: params.animated,\n      });\n      setIsVisible(true);\n    },\n    [initialOptions],\n  );\n\n  const hide = useCallback(() => {\n    setIsVisible(false);\n  }, [initialOptions]);\n\n  const onHide = useCallback(() => {\n    setData({\n      children: null,\n    });\n    setOptions(initialOptions);\n  }, [initialOptions]);\n\n  return {\n    isVisible,\n    show,\n    hide,\n    data,\n    options,\n    onHide,\n  };\n};\n```\n\n이 useModal이라는 훅은 모달을 관리하기 위해 설계되었습니다. 다음은 이 훅이 하는 일입니다:\n\n- 상태 관리: 현재 모달이 표시 중인지 여부를 나타내는 상태(isVisible) 및 모달 내부에 표시할 데이터(data)를 유지합니다.\n- 기본 옵션: 모달의 기본 옵션을 지정할 수 있으며, 모달이 닫힐 수 있는지(dismissable), 위치(position), 애니메이션 여부(animated) 등을 설정할 수 있습니다.\n- 모달 표시: show 함수를 사용하여 제공된 매개변수로 모달을 표시합니다. 제공된 매개변수에 기반하여 모달 데이터와 옵션을 업데이트하고 isVisible을 true로 설정합니다.\n- 모달 숨기기: hide 함수는 현재 표시 중인 모달을 숨기는 데 사용됩니다. isVisible를 false로 설정합니다.\n- 숨김 콜백: onHide 함수는 모달이 숨겨질 때 트리거되는 콜백입니다. 모달 데이터와 옵션을 초기 값으로 재설정합니다.\n\n\n<div class=\"content-ad\"></div>\n\nModal.tsx\n\n```js\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport {\n  ModalHideParams,\n  ModalProps,\n  ModalRef,\n  ModalShowParams,\n} from './types';\nimport { useModal } from './hook/useModal.ts';\nimport { ModalUI } from \"./components\";\n\nconst ModalRoot = forwardRef((props: ModalProps, ref) => {\n  const { config, ...defaultOptions } = props;\n  const { show, hide, isVisible, options, onHide, data } = useModal({\n    defaultOptions,\n  });\n\n  // This must use useCallback to ensure the ref doesn't get set to null and then a new ref every render.\n  useImperativeHandle(\n    ref,\n    useCallback(\n      () => ({\n        show,\n        hide,\n      }),\n      [hide, show],\n    ),\n  );\n\n  return (\n    <ModalUI\n      isVisible={isVisible}\n      options={options}\n      data={data}\n      hide={hide}\n      onHide={onHide}\n      show={show}\n      config={config}\n    />\n  );\n});\n\ntype ModalRefObj = {\n  current: ModalRef | null;\n};\n\nlet refs: ModalRefObj[] = [];\n\n/**\n * Adds a ref to the end of the array, which will be used to show the toasts until its ref becomes null.\n *\n * @param newRef the new ref, which must be stable for the life of the Toast instance.\n */\nfunction addNewRef(newRef: ModalRef) {\n  refs.push({\n    current: newRef,\n  });\n}\n\n/**\n * Removes the passed-in ref from the file-level refs array using a strict equality check.\n *\n * @param oldRef the exact ref object to remove from the refs array.\n */\nfunction removeOldRef(oldRef: ModalRef | null) {\n  refs = refs.filter(r => r.current !== oldRef);\n}\n\nexport function Modal(props: ModalProps) {\n  const ModalRef = useRef<ModalRef | null>(null);\n\n  /*\n    This must use `useCallback` to ensure the ref doesn't get set to null and then a new ref every render.\n    Failure to do so will cause whichever Toast *renders or re-renders* last to be the instance that is used,\n    rather than being the Toast that was *mounted* last.\n  */\n  const setRef = useCallback((ref: ModalRef | null) => {\n    // Since we know there's a ref, we'll update `refs` to use it.\n    if (ref) {\n      // store the ref in this toast instance to be able to remove it from the array later when the ref becomes null.\n      ModalRef.current = ref;\n      addNewRef(ref);\n    } else {\n      // remove this toast's ref, wherever it is in the array.\n      removeOldRef(ModalRef.current);\n    }\n  }, []);\n\n  return <ModalRoot ref={setRef} {...props} />;\n}\n\nfunction getRef() {\n  const reversePriority = [...refs].reverse();\n  const activeRef = reversePriority.find(ref => ref?.current !== null);\n  if (!activeRef) {\n    return null;\n  }\n  return activeRef.current;\n}\n\nModal.show = (params: ModalShowParams) => {\n  getRef()?.show(params);\n};\n\nModal.hide = (params?: ModalHideParams) => {\n  getRef()?.hide(params);\n};\n```\n\n이 파일은 모달 컴포넌트를 설정하여 `Modal/`을 선언한 후 필요에 따라 표시하거나 숨길 수 있게 합니다. 기능을 자세히 살펴보겠습니다:\n\n- ModalRoot 컴포넌트:\n\n<div class=\"content-ad\"></div>\n\n- 이 컴포넌트는 ref를 전달받을 수 있도록 forwardRef를 사용하여 정의되었습니다.\n- Modal의 상태를 관리하는 useModal 훅을 활용하여 시각적 효과, 옵션 및 데이터를 포함합니다.\n- useImperativeHandle을 사용하여 ref가 모달을 조작하는 show 및 hide와 같은 필수 기능만 노출되도록 합니다.\n\n2. 모달 컴포넌트:\n\n- 사용자가 상호작용하는 컴포넌트입니다. ModalRoot 컴포넌트를 감싸고 ref를 관리합니다.\n- setRef 함수를 사용하여 ref가 올바르게 업데이트되고 나중에 사용하기 위해 저장됩니다.\n\n3. Ref 관리:\n\n<div class=\"content-ad\"></div>\n\n- `addNewRef`은 새 모달이 생성될 때 refs 배열에 새 ref를 추가합니다.\n- `removeOldRef`는 모달이 파괴될 때 배열에서 ref를 제거합니다.\n\n4. 정적 메서드:\n\n- `Modal.show`과 `Modal.hide`는 Modal 컴포넌트에 연결된 정적 메서드입니다.\n- 이들은 활성 모달 인스턴스를 찾기 위해 refs 배열을 활용하고 해당하는 show 또는 hide 메서드를 호출합니다.\n\n이 파일은 React Native 애플리케이션에서 모달을 관리하는 논리를 캡슐화합니다. 사용자는 `Modal/` 컴포넌트 하나로 모달을 쉽게 생성하고 제어할 수 있으며, 모달을 표시하고 숨기는 정적 메서드가 포함되어 있습니다.\n\n<div class=\"content-ad\"></div>\n\n여기까지 왔네요! 이 모달 관리 시스템을 구현함으로써 프로세스를 보다 효율적이고 직관적으로 만들었습니다. 이 방식의 모듈성을 통해 표시 및 상호 작용 방식을 우리의 특정 요구에 쉽게 적응시킬 수 있습니다. 더 많은 통찰력과 코딩을 더 부드럽고 빠르게 만들어줄 새로운 도구를 업데이트하는 방법을 계속 따라와 주세요. 이 여정에 함께해줘서 감사합니다!\n\n즐거운 코딩하세요!\n\n소스 코드: https://github.com/davidecarizzoni/react-native-modal-manager\n\nLinkedin 프로필: https://www.linkedin.com/in/davide-carizzoni/","ogImage":{"url":"/assets/img/2024-05-17-ReactNativeCreateeasytouseModalManager_0.png"},"coverImage":"/assets/img/2024-05-17-ReactNativeCreateeasytouseModalManager_0.png","tag":["Tech"],"readingTime":14},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-17-ReactNativeCreateeasytouseModalManager_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"안녕하세요, 개발자 여러분!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"오늘은 React Native에서 모달을 가장 간편하고 편리하게 사용하는 방법에 대해 알아보겠습니다! React Native에서 모달을 사용하는 전통적인 방법은 각 화면이나 컴포넌트마다 \\\"Modal\\\" 컴포넌트와 해당 props를 정의하는 것이 일반적입니다. 이는 종종 모달이 사용되는 문맥에 높은 결합도를 가지는 문제로 이어질 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"보통 확인 또는 다른 복잡한 동작에 모달을 사용하는 각 화면에서는 useState를 사용하여 가시성 상태를 정의합니다 (전통적인 [visible, setVisible] = useState(false) 방식), 이를 통해 모달이 화면에 표시되는지 여부를 컨트롤합니다. 이 방법은 개발 속도를 크게 늦추고 유연성과 재사용성을 저하시키는 요소로 인식됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 문제를 해결하기 위해 간단하고 효율적인 방법으로 모달 가시성을 관리하는 방법을 고안했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"화면 중앙에 표시되는 모달과 화면 하단에 고정된 모달을 위한 두 가지 다른 구성을 채택했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러니, 프로젝트 구조를 설정해 보겠습니다. 먼저 프로젝트의 src 디렉토리 내에 \\\"modal-manager\\\" 폴더를 추가하는 것으로 시작하겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-ReactNativeCreateeasytouseModalManager_1.png\",\n        alt: \"모달 매니저\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"보시다시피, 프로젝트를 최적으로 관리할 수 있는 간단하고 조직적인 구조를 만드는 것이 매우 중요합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"최종 결과물로서, 모달을 메인 파일(예: App.tsx)에 삽입한 다음 간단한 방법으로 어디서든 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"필요한 종속성은 \\\"react-native-modal\\\"뿐입니다. 따라서 모든 것이 올바르게 작동하도록 하려면 선호하는 패키지 관리자에 따라 npm 또는 yarn을 사용하여 라이브러리를 설치해야 합니다(저는 yarn을 선호합니다).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기에서는 나중에 사용할 모달을 어디에 어떻게 정의하는지에 대한 예제가 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-jsx\",\n        children: [\"  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NavigationContainer\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'@react-navigation/native'\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modal\"\n        }), \", { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BaseCenterModalContainer\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"BaseBottomModalContainer\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./src/modal-manager\\\"\"\n        }), \";\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"App\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n   \\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"showCenteredModal\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") => {\\n     \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modal\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"show\"\n        }), \"({\\n       \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"children\"\n        }), \": (\\n         \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"BaseCenterModalContainer\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"height:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"400\"\n            }), \", \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"backgroundColor:\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"white\"\n            }), \"' }>\"]\n          }), \"\\n           \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Text\"\n            }), \">\"]\n          }), \"Center modal\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Text\"\n            }), \">\"]\n          }), \"\\n         \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"BaseCenterModalContainer\"\n            }), \">\"]\n          })]\n        }), \"\\n       ),\\n       \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dismissable\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n       \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"position\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'center'\"\n        }), \",\\n     });\\n   };\\n  \\n  \\n   \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n     \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"NavigationContainer\"\n            }), \">\"]\n          }), \"\\n       \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Modal\"\n            }), \" />\"]\n          }), \"\\n       {children}\\n     \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"NavigationContainer\"\n            }), \">\"]\n          })]\n        }), \"\\n   )\\n  }\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위에서 볼 수 있듯이, 모달을 사용하는 두 가지 예제가 있습니다. 간단하게 사용하기 위해 App.tsx 파일에 배치되었지만, 프로젝트의 어디에서든 \\\"Modal.show\\\" 및 \\\"Modal.hide\\\" 메소드를 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더불어, 모든 코드를 TypeScript로 작성하여 더 깨끗하고 재사용 가능한 코드를 구현하였습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"두 가지 방법으로 모달을 표시할 수 있는 옵션이 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"1 — 화면 하단에\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modal\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"show\"\n        }), \"({\\n \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"children\"\n        }), \": (\\n   \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"BaseBottomModalContainer\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"height:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"400\"\n            }), \", \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"backgroundColor:\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"white\"\n            }), \"' }>\"]\n          }), \"\\n     \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Text\"\n            }), \">\"]\n          }), \"Center modal\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Text\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"BaseBottomModalContainer\"\n            }), \">\"]\n          })]\n        }), \"\\n  ),\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dismissable\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"position\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'bottom'\"\n        }), \",\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-17-ReactNativeCreateeasytouseModalManager_2.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"2 — 화면 중앙에 위치\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modal\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"show\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"children\"\n        }), \": (\\n      \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"BaseCenterModalContainer\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"height:\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"400\"\n            }), \", \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"backgroundColor:\"\n            }), \" '\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"white\"\n            }), \"' }>\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Text\"\n            }), \">\"]\n          }), \"Center modal\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Text\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"BaseCenterModalContainer\"\n            }), \">\"]\n          })]\n        }), \"\\n    ),\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dismissable\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"position\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'center'\"\n        }), \",\\n  });\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-ReactNativeCreateeasytouseModalManager_3.png\",\n        alt: \"Modal Manager\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"두 경우 모두 세 가지 주요 속성이 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"children ⇒ 모달의 콘텐츠를 나타냅니다. 예를 들어, 간단한 텍스트를 삽입했습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"dismissable ⇒ 배경을 탭하여 모달을 닫을 수 있는지 여부를 나타냅니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"position ⇒ 모달의 위치를 지정합니다. 이는 중앙 또는 하단일 수 있습니다. 이 두 값 중 하나를 사용할 때는 기본적인 스타일을 쉽게 오버라이드할 수 있는 BaseCenterModalContainer 또는 BaseBottomModalContainer 컴포넌트를 사용할 수도 있습니다.```\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한, 이전 구성 요소를 사용하지 않고도 모달에 표시해야 하는 구성 요소를 간단히 전달할 수도 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자 이제 다양한 부분들을 자세히 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"types/index.tsx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"모달에 대한 모든 유용한 유형은 이 파일 내에서 정의되어 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactNode\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StyleProp\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-native'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactChildren\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactNode\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalData\"\n        }), \" = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"children\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReactChildren\"\n        }), \";\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalOptions\"\n        }), \" = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dismissable\"\n        }), \": boolean;\\n  animated?: boolean;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"position\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'center'\"\n        }), \" | \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'bottom'\"\n        }), \";\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalShowParams\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalData\"\n        }), \" & \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalOptions\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalHideParams\"\n        }), \" = {};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalRef\"\n        }), \" = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"show\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"params: ModalShowParams\"\n          }), \") =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"hide\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"params?: ModalHideParams\"\n          }), \") =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \";\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalConfig\"\n        }), \" = {\\n  style?: \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StyleProp\"\n        }), \"<any>;\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalProps\"\n        }), \" = {\\n  config?: \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalConfig\"\n        }), \";\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컴포넌트 관련해서는 세 가지가 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 중에서 가장 중요한 것은 모달의 기본 시각적 디자인을 캡슐화하고 있습니다. 특히 화면의 중앙이나 하단에 모달이 표시될지를 결정합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ModalUI.tsx\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dimensions\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StyleSheet\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-native\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalConfig\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalData\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalHideParams\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalOptions\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalShowParams\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"../types\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RNModal\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-native-modal\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useCallback } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalUIProps\"\n        }), \" = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"isVisible\"\n        }), \": boolean;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"options\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalOptions\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"data\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalData\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"show\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"params: ModalShowParams\"\n          }), \") =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"hide\"\n        }), \": \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"params: ModalHideParams\"\n          }), \") =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \";\\n  config?: \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalConfig\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"onHide\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \";\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"width\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SCREEN_WIDTH\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SCREEN_HEIGHT\"\n        }), \" } = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dimensions\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'screen'\"\n        }), \");\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ModalUI\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{\\n  isVisible,\\n  data,\\n  options,\\n  hide,\\n  onHide,\\n  config,\\n}: ModalUIProps\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { children } = data;\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { style } = config || {};\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { dismissable, position, animated } = options;\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" onBackdropPress = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useCallback\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (dismissable) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hide\"\n        }), \"({});\\n    }\\n  }, []);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!children) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \";\\n  }\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"RNModal\"\n            }), \"\\n      {\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"...RNModal.defaultProps\"\n            }), \"}\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"isVisible\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{isVisible}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"useNativeDriver\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"deviceHeight\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{SCREEN_HEIGHT}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"deviceWidth\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{SCREEN_WIDTH}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{[modalPositionStyles[position],\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"styles.modal\"\n            }), \", \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"]}\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onBackdropPress\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{onBackdropPress}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"avoidKeyboard\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{false}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onModalHide\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{onHide}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"backdropOpacity\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{0.4}\"\n            }), \"\\n    >\"]\n          }), \"\\n      {children}\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"RNModal\"\n            }), \">\"]\n          })]\n        }), \"\\n  );\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" modalPositionStyles = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StyleSheet\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"center\"\n        }), \": {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"justifyContent\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'center'\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"margin\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \",\\n  },\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"bottom\"\n        }), \": {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"justifyContent\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'flex-end'\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"margin\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\\n  },\\n});\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" styles = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StyleSheet\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"modal\"\n        }), \": {},\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 컴포넌트는 React Native에서 모달의 시각적 측면을 관리합니다. 다음은 이 컴포넌트의 역할입니다:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"초기 설정:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"모달의 표시 상태, 표시할 데이터, 모달 구성 옵션, 모달을 숨기는 함수 및 모달 닫기 이벤트를 처리하는 콜백 함수와 같은 props를 받습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이벤트 처리:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"모달이 닫힐 수 있도록 설정되어 있으면 (dismissable), 모달 바깥 영역을 탭하면 모달을 숨기는 함수가 정의됩니다 (onBackdropPress).\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"모달 렌더링:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"모달의 내용은 존재하는 경우에만 조건부로 렌더링됩니다 (children). 표시할 데이터가 없는 경우에는 컴포넌트가 null을 반환합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"모달을 생성하기 위해 react-native-modal 컴포넌트를 사용합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"모달의 위치 (가운데 또는 아래)에 기본 스타일을 적용하고, config prop을 통해 제공된 스타일을 통해 사용자 정의를 허용합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"미리 정의된 스타일:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"화면 중앙 또는 하단에 모달을 위치시키기 위해 두 세트의 스타일을 정의합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"5\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"모달 상태 관리:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"모달은 화면 크기를 상태의 일부로 수신하여 다양한 기기 크기에 적절하게 적응합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"요약하자면, 이 컴포넌트는 리액트 네이티브에서 모달을 유연하고 구성 가능하게 표시하는 인프라를 제공하며, 애플리케이션 요구에 맞는 외관 및 동작을 사용자화할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"BaseBottomModalContainer.tsx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 간단한 컴포넌트는 하단 모달에서 일반적으로 사용되는 기본 스타일을 정의하는 곳입니다. 예를 들어, 둥근 테두리 등이 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StyleSheet\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ViewProps\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-native\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"BaseBottomModalContainer\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ children, style, ...props }: ViewProps\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"View\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{[styles.container,\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"]} {\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"...props\"\n            }), \"}>\"]\n          }), \"\\n      {children}\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"View\"\n            }), \">\"]\n          })]\n        }), \"\\n  )\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" styles = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StyleSheet\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"container\"\n        }), \": {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"borderTopRightRadius\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"borderTopLeftRadius\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"padding\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \"\\n  }\\n})\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"테이블 태그를 Markdown 형식으로 변경해주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"BaseCenterModalContainer.tsx\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StyleSheet\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"View\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ViewProps\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-native\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"BaseCenterModalContainer\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ children, style, ...props }: ViewProps\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"View\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{StyleSheet.compose(styles.container,\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"style\"\n            }), \")} {\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"...props\"\n            }), \"}>\"]\n          }), \"\\n      {children}\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"View\"\n            }), \">\"]\n          })]\n        }), \"\\n  )\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" styles = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StyleSheet\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"create\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"container\"\n        }), \": {\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"borderRadius\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"padding\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \"\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useCallback, useState } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalData\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalOptions\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalProps\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalShowParams\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'../types'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { mergeIfDefined } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'../utils/obj.ts'\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" type \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"UseModalParams\"\n        }), \" = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"defaultOptions\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Omit\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalProps\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'config'\"\n        }), \">;\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"DEFAULT_OPTIONS\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalOptions\"\n        }), \" = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dismissable\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"position\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'center'\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"animated\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useModal\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"{ defaultOptions }: UseModalParams\"\n        }), \") => {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [isVisible, setIsVisible] = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useState\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [data, setData] = useState<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalData\"\n        }), \">({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"children\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \",\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" initialOptions = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"mergeIfDefined\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DEFAULT_OPTIONS\"\n        }), \",\\n    defaultOptions,\\n  ) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Required\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalOptions\"\n        }), \">;\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" [options, setOptions] = useState<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalOptions\"\n        }), \">(initialOptions);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" show = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useCallback\"\n        }), \"(\\n    \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"params: ModalShowParams\"\n          }), \") =>\"]\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setData\"\n        }), \"({\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"children\"\n        }), \": params.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"children\"\n        }), \" ?? \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \",\\n      });\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setOptions\"\n        }), \"({\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dismissable\"\n        }), \": params.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"dismissable\"\n        }), \" ?? initialOptions.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"dismissable\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"position\"\n        }), \": params.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"position\"\n        }), \" ?? initialOptions.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"position\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"animated\"\n        }), \": params.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"animated\"\n        }), \",\\n      });\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setIsVisible\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \");\\n    },\\n    [initialOptions],\\n  );\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" hide = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useCallback\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setIsVisible\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \");\\n  }, [initialOptions]);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" onHide = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useCallback\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setData\"\n        }), \"({\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"children\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \",\\n    });\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setOptions\"\n        }), \"(initialOptions);\\n  }, [initialOptions]);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {\\n    isVisible,\\n    show,\\n    hide,\\n    data,\\n    options,\\n    onHide,\\n  };\\n};\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 useModal이라는 훅은 모달을 관리하기 위해 설계되었습니다. 다음은 이 훅이 하는 일입니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"상태 관리: 현재 모달이 표시 중인지 여부를 나타내는 상태(isVisible) 및 모달 내부에 표시할 데이터(data)를 유지합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"기본 옵션: 모달의 기본 옵션을 지정할 수 있으며, 모달이 닫힐 수 있는지(dismissable), 위치(position), 애니메이션 여부(animated) 등을 설정할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"모달 표시: show 함수를 사용하여 제공된 매개변수로 모달을 표시합니다. 제공된 매개변수에 기반하여 모달 데이터와 옵션을 업데이트하고 isVisible을 true로 설정합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"모달 숨기기: hide 함수는 현재 표시 중인 모달을 숨기는 데 사용됩니다. isVisible를 false로 설정합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"숨김 콜백: onHide 함수는 모달이 숨겨질 때 트리거되는 콜백입니다. 모달 데이터와 옵션을 초기 값으로 재설정합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Modal.tsx\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { forwardRef, useCallback, useImperativeHandle, useRef } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalHideParams\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalProps\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalRef\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalShowParams\"\n        }), \",\\n} \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./types'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { useModal } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./hook/useModal.ts'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalUI\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./components\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalRoot\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"forwardRef\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"props: ModalProps, ref\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { config, ...defaultOptions } = props;\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" { show, hide, isVisible, options, onHide, data } = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useModal\"\n        }), \"({\\n    defaultOptions,\\n  });\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// This must use useCallback to ensure the ref doesn't get set to null and then a new ref every render.\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useImperativeHandle\"\n        }), \"(\\n    ref,\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useCallback\"\n        }), \"(\\n      \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" ({\\n        show,\\n        hide,\\n      }),\\n      [hide, show],\\n    ),\\n  );\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" (\\n    \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ModalUI\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"isVisible\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{isVisible}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"options\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{options}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"data\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{data}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"hide\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{hide}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"onHide\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{onHide}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"show\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{show}\"\n            }), \"\\n      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"config\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{config}\"\n            }), \"\\n    />\"]\n          })\n        }), \"\\n  );\\n});\\n\\ntype \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalRefObj\"\n        }), \" = {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"current\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalRef\"\n        }), \" | \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \";\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"refs\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalRefObj\"\n        }), \"[] = [];\\n\\n\", _jsxs(_components.span, {\n          className: \"hljs-comment\",\n          children: [\"/**\\n * Adds a ref to the end of the array, which will be used to show the toasts until its ref becomes null.\\n *\\n * \", _jsx(_components.span, {\n            className: \"hljs-doctag\",\n            children: \"@param\"\n          }), \" newRef the new ref, which must be stable for the life of the Toast instance.\\n */\"]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addNewRef\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"newRef: ModalRef\"\n        }), \") {\\n  refs.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"current\"\n        }), \": newRef,\\n  });\\n}\\n\\n\", _jsxs(_components.span, {\n          className: \"hljs-comment\",\n          children: [\"/**\\n * Removes the passed-in ref from the file-level refs array using a strict equality check.\\n *\\n * \", _jsx(_components.span, {\n            className: \"hljs-doctag\",\n            children: \"@param\"\n          }), \" oldRef the exact ref object to remove from the refs array.\\n */\"]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"removeOldRef\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-params\",\n          children: [\"oldRef: ModalRef | \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          })]\n        }), \") {\\n  refs = refs.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"r\"\n          }), \" =>\"]\n        }), \" r.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \" !== oldRef);\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Modal\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"props: ModalProps\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalRef\"\n        }), \" = useRef<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalRef\"\n        }), \" | \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \">(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/*\\n    This must use `useCallback` to ensure the ref doesn't get set to null and then a new ref every render.\\n    Failure to do so will cause whichever Toast *renders or re-renders* last to be the instance that is used,\\n    rather than being the Toast that was *mounted* last.\\n  */\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" setRef = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"useCallback\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"ref: ModalRef | \", _jsx(_components.span, {\n              className: \"hljs-literal\",\n              children: \"null\"\n            })]\n          }), \") =>\"]\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Since we know there's a ref, we'll update `refs` to use it.\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (ref) {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// store the ref in this toast instance to be able to remove it from the array later when the ref becomes null.\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalRef\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \" = ref;\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"addNewRef\"\n        }), \"(ref);\\n    } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// remove this toast's ref, wherever it is in the array.\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"removeOldRef\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ModalRef\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \");\\n    }\\n  }, []);\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ModalRoot\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"ref\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{setRef}\"\n            }), \" {\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"...props\"\n            }), \"} />\"]\n          })\n        }), \";\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getRef\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" reversePriority = [...refs].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"reverse\"\n        }), \"();\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" activeRef = reversePriority.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"ref\"\n          }), \" =>\"]\n        }), \" ref?.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \" !== \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!activeRef) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \";\\n  }\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" activeRef.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"current\"\n        }), \";\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modal\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"show\"\n        }), \" = \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"params: ModalShowParams\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getRef\"\n        }), \"()?.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"show\"\n        }), \"(params);\\n};\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modal\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"hide\"\n        }), \" = \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"params?: ModalHideParams\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getRef\"\n        }), \"()?.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"hide\"\n        }), \"(params);\\n};\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 파일은 모달 컴포넌트를 설정하여 \", _jsx(_components.code, {\n        children: \"Modal/\"\n      }), \"을 선언한 후 필요에 따라 표시하거나 숨길 수 있게 합니다. 기능을 자세히 살펴보겠습니다:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"ModalRoot 컴포넌트:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이 컴포넌트는 ref를 전달받을 수 있도록 forwardRef를 사용하여 정의되었습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Modal의 상태를 관리하는 useModal 훅을 활용하여 시각적 효과, 옵션 및 데이터를 포함합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"useImperativeHandle을 사용하여 ref가 모달을 조작하는 show 및 hide와 같은 필수 기능만 노출되도록 합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"모달 컴포넌트:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"사용자가 상호작용하는 컴포넌트입니다. ModalRoot 컴포넌트를 감싸고 ref를 관리합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"setRef 함수를 사용하여 ref가 올바르게 업데이트되고 나중에 사용하기 위해 저장됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Ref 관리:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"addNewRef\"\n        }), \"은 새 모달이 생성될 때 refs 배열에 새 ref를 추가합니다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"removeOldRef\"\n        }), \"는 모달이 파괴될 때 배열에서 ref를 제거합니다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"정적 메서드:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Modal.show\"\n        }), \"과 \", _jsx(_components.code, {\n          children: \"Modal.hide\"\n        }), \"는 Modal 컴포넌트에 연결된 정적 메서드입니다.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이들은 활성 모달 인스턴스를 찾기 위해 refs 배열을 활용하고 해당하는 show 또는 hide 메서드를 호출합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 파일은 React Native 애플리케이션에서 모달을 관리하는 논리를 캡슐화합니다. 사용자는 \", _jsx(_components.code, {\n        children: \"Modal/\"\n      }), \" 컴포넌트 하나로 모달을 쉽게 생성하고 제어할 수 있으며, 모달을 표시하고 숨기는 정적 메서드가 포함되어 있습니다.\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기까지 왔네요! 이 모달 관리 시스템을 구현함으로써 프로세스를 보다 효율적이고 직관적으로 만들었습니다. 이 방식의 모듈성을 통해 표시 및 상호 작용 방식을 우리의 특정 요구에 쉽게 적응시킬 수 있습니다. 더 많은 통찰력과 코딩을 더 부드럽고 빠르게 만들어줄 새로운 도구를 업데이트하는 방법을 계속 따라와 주세요. 이 여정에 함께해줘서 감사합니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"즐거운 코딩하세요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"소스 코드: https://github.com/davidecarizzoni/react-native-modal-manager\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Linkedin 프로필: https://www.linkedin.com/in/davide-carizzoni/\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}