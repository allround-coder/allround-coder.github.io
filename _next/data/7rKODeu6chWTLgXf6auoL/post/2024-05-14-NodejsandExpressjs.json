{"pageProps":{"post":{"title":"Nodejs와 Expressjs","description":"","date":"2024-05-14 15:37","slug":"2024-05-14-NodejsandExpressjs","content":"\n\n지금 이 시점에서 자바스크립트 노드 프레임워크에 대해 초보자인 경우, 이 글은 당신이 노드와 익스프레스가 어떻게 관련되는지 쉽게 이해하는 데 도움이 될 것입니다.\n\nNode.js는 웹 브라우저 외부에서 자바스크립트 코드를 실행할 수 있게 해주는 자바스크립트 런타임 환경입니다. 일반적으로 서버에서 실행됩니다. 그러나 HTTP 요청 및 응답 처리 및 웹 애플리케이션 구축을 위해 Express.js와 같은 프레임워크가 필요합니다.\n\nExpress.js는 Node.js를 위한 웹 애플리케이션 프레임워크로, 웹 애플리케이션 및 API를 구축하는 데 필요한 기능 세트를 제공합니다. Express.js는 HTTP 요청 처리, 라우팅, 미들웨어 통합 등의 프로세스를 단순화하며, Node.js를 사용하여 웹 애플리케이션을 개발하고 배포하기가 더 쉬워집니다.\n\n따라서 브라우저에서 노드.js로 구축된 웹 애플리케이션을 배포하거나 액세스하려면 일반적으로 Express.js를 사용하여 서버 측 로직 및 HTTP 통신을 처리합니다. Express.js를 사용하면 라우트를 생성하고 요청을 처리하며 정적 파일을 제공하고 웹 애플리케이션의 기능을 관리하는 등의 작업이 가능해집니다. 지금 이해됐으면 좋겠네요!\n\n\n\n해피 코딩!","ogImage":{"url":"/assets/img/2024-05-14-NodejsandExpressjs_0.png"},"coverImage":"/assets/img/2024-05-14-NodejsandExpressjs_0.png","tag":["Tech"],"readingTime":1},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"지금 이 시점에서 자바스크립트 노드 프레임워크에 대해 초보자인 경우, 이 글은 당신이 노드와 익스프레스가 어떻게 관련되는지 쉽게 이해하는 데 도움이 될 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Node.js는 웹 브라우저 외부에서 자바스크립트 코드를 실행할 수 있게 해주는 자바스크립트 런타임 환경입니다. 일반적으로 서버에서 실행됩니다. 그러나 HTTP 요청 및 응답 처리 및 웹 애플리케이션 구축을 위해 Express.js와 같은 프레임워크가 필요합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Express.js는 Node.js를 위한 웹 애플리케이션 프레임워크로, 웹 애플리케이션 및 API를 구축하는 데 필요한 기능 세트를 제공합니다. Express.js는 HTTP 요청 처리, 라우팅, 미들웨어 통합 등의 프로세스를 단순화하며, Node.js를 사용하여 웹 애플리케이션을 개발하고 배포하기가 더 쉬워집니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"따라서 브라우저에서 노드.js로 구축된 웹 애플리케이션을 배포하거나 액세스하려면 일반적으로 Express.js를 사용하여 서버 측 로직 및 HTTP 통신을 처리합니다. Express.js를 사용하면 라우트를 생성하고 요청을 처리하며 정적 파일을 제공하고 웹 애플리케이션의 기능을 관리하는 등의 작업이 가능해집니다. 지금 이해됐으면 좋겠네요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"해피 코딩!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}