{"pageProps":{"post":{"title":"자바스크립트에서 Rest 매개변수 사용하는 방법","description":"","date":"2024-05-17 20:26","slug":"2024-05-17-WhatIstheRestParameterinJavaScript","content":"\n\n## ES6 REST 문법\n\n![이미지](/assets/img/2024-05-17-WhatIstheRestParameterinJavaScript_0.png)\n\n# 소개: REST 파라미터의 힘\n\n자바스크립트 세계는 끊임없이 발전하는 풍경 속에서, 코딩을 더 효율적이고 유연하며 재미있게 만들어주는 멋진 기능들로 가득 차있습니다.\n\n<div class=\"content-ad\"></div>\n\nECMAScript 6 (ES6)에서 소개된 하나의 기능은 ...나머지 매개변수이며 ...rest 매개변수로도 쓰입니다. \n\n이 마법같은 구문을 사용하면 함수 인수를 하나의 배열로 쉽게 수집할 수 있습니다.\n\n시작하기 전에 REST와 ...나머지가 완전히 다른 개념임을 언급해야 합니다. REST(API와 관련된 REST)에 대해서는 이 기사들을 확인해주세요:\n\n이제 재미있는 이모지 예제를 활용하여 나머지 파라미터의 기능을 탐험해 봅시다. 어떻게 하는지 알고 있겠죠?\n\n<div class=\"content-ad\"></div>\n\n# 🚀 자바스크립트의 ES6 Rest 파라미터로 미사일 발사\n\n...rest 파라미터는 자바스크립트 함수로 전달된 다양한 수의 인수를 처리하는 간단하면서도 강력한 방법입니다.\n\n여러 개의 이모지 인수를 받아들이는 함수가 있다고 상상해보세요. 이들을 모두 출력해야 할 때의 과제가 생겼다고 가정해 봅시다.\n\n...rest 파라미터를 사용하지 않으면 arguments 객체를 처리해야 할 것입니다. 그러나 ...rest 파라미터를 사용하면 보다 우아하게 처리할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction printEmojis(...emojis) {\n  emojis.forEach(emoji => console.log(emoji))\n}\n\nprintEmojis(\"🚀\", \"🌕\", \"👩‍🚀\")\n// 출력:\n// 🚀\n// 🌕\n// 👩‍🚀\n```\n\n이 예제에서 ...rest 파라미터는 모든 이모지들을 하나의 배열로 모아줍니다. 그리고 우리는 배열을 반복하여 각각을 개별적인 줄에 출력합니다.\n\n# 🧙‍♂️ Rest 파라미터와 구조 분해(Destructuring) 결합하기\n\nRest 파라미터를 destructuring과 결합하여 더욱 강력하게 사용할 수 있습니다. 이런 조합은 마치 마술처럼 보일 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 기술은 이모지 배열에서 특정 요소를 추출하고 별도로 처리할 수 있게 해줍니다. 이것이 어떻게 동작하는지 실습을 통해 살펴보겠습니다:\n\n```js\nfunction emojiParty(firstEmoji, ...otherEmojis) {\n  console.log(`첫 번째 이모지: ${firstEmoji}`)\n  console.log(`다른 이모지들: ${otherEmojis}`)\n}\n\nemojiParty(\"🎉\", \"🎈\", \"🎊\", \"🎁\")\n// 출력:\n// 첫 번째 이모지: 🎉\n// 다른 이모지들: 🎈,🎊,🎁\n```\n\n이 예제에서는 함수 인수를 구조 분해하여 첫 번째 이모지를 firstEmoji 변수에 할당합니다.\n\n그런 다음, ... rest 파라미터 구문을 사용하여 나머지 이모지를 otherEmojis 배열에 수집합니다.\n\n<div class=\"content-ad\"></div>\n\n이 마술 묘기로, 첫 번째 이모지와 나머지 이모지를 쉽게 나눠서 표시할 수 있어요.\n\n여러 개의 첫 번째 매개변수를 포함하고, 끝에 ...rest 구문만 사용하면 돼요.\n\n# 🔧 인수 객체의 단점을 수정하기\n\n나머지 매개변수는 특히 옛날 ES5 기능인 arguments 객체와 비교할 때 상쾌한 기운을 불어넣어요.\n\n<div class=\"content-ad\"></div>\n\n인수 개체와는 달리, 나머지 매개변수는 실제 배열이며 모든 유용한 배열 메서드를 사용할 수 있습니다.\n\n```js\nfunction printArguments() {\n  // 인수 객체를 배열로 변환\n  const argsArray = Array.from(arguments)\n  // 배열을 순환하며 각 인수를 출력\n  argsArray.forEach(arg => console.log(arg)); \n}\n\nprintArguments(\"🍔\", \"🍟\", \"🥤\")\n// 출력:\n// 🍔\n// 🍟\n// 🥤\n```\n\n인수 개체와는 달리 인수 개체의 forEach 메서드를 사용할 수 없습니다. 이는 열거 가능한 속성을 가진 객체가 아닌 배열류 객체이기 때문입니다.\n\n나머지 매개변수가 배열이므로 \"나머지\"의 사용은 훨씬 더 간단하고 즐거워집니다. 한번 살펴보세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction sumEmojisLength(...emojis) {\n  return emojis.reduce((total, emoji) => total + emoji.length, 0);\n}\n\nconst totalLength = sumEmojisLength(\"🎂\", \"🥳\", \"🎈\", \"🎉\")\n\nconsole.log(`Total emoji length: ${totalLength}`)\n// Output: Total emoji length: 8\n// Each emoji has a string length of 2 characters, and 2×4 === 8\n```\n\n이 예시에서는 이모티콘 배열에 reduce 메서드를 사용하여 모든 이모티콘의 총 길이를 계산할 수 있습니다.\n\n나머지 매개변수를 사용함으로써, Array.from()을 사용하여 먼저 인자 객체를 배열로 변환할 필요 없이 번거로움을 줄일 수 있습니다.\n\nJavaScript의 화살표 함수 구문을 사용하면 이 코드가 더 짧아지면서도 여전히 매우 가독성이 높아집니다.```\n\n<div class=\"content-ad\"></div>\n\n```js\nconst calculateEmojiLength = (...emojis) => emojis.reduce((total, emoji) => total + emoji.length, 0)\n\nconst totalLength = calculateEmojiLength(\"🎂\", \"🥳\", \"🎈\", \"🎉\")\n\nconsole.log(`Total emoji length: ${totalLength}`)\n// 출력: Total emoji length: 8\n// 각 이모지는 2개의 문자로 이루어져 있으며, 2×4 === 8\n```\n\n# 🤹 조작하기: 스프레드 연산자 + 나머지 매개변수\n\n나머지 매개변수의 동생인 스프레드 연산자도 세 개의 점 구문을 사용하지만 다른 목적을 가지고 있습니다.\n\n나머지 매개변수는 함수 인수를 배열로 수집하는 반면, 스프레드 연산자는 반대로 작용합니다.\n\n\n<div class=\"content-ad\"></div>\n\n펼침 연산자(Spread)는 배열이나 객체를 개별 요소로 확장하거나 얕은 복사를 하는 데 사용됩니다.\n\n나머지 매개변수와 함께 사용되는 펼침 연산자는 데이터를 쉽게 조작하고 전달할 수 있는 강력한 동료를 만듭니다.\n\n다음 코드 예제에서 이들의 힘을 결합해 보겠습니다:\n\n```js\nconst mixEmojis = (...emojis) => emojis.join(\" \")\n\nconst partyEmojis = [\"🎉\", \"🎈\", \"🎁\"]\nconst celebration = mixEmojis(\"🥳\", ...partyEmojis, \"🎂\")\n\nconsole.log(`Celebration: ${celebration}`)\n// 출력: Celebration: 🥳 🎉 🎈 🎁 🎂\n```\n\n<div class=\"content-ad\"></div>\n\n이 예제에서는 partyEmojis 배열 요소를 개별 인수로 mixEmojis 함수에 전달하기 위해 전개 연산자를 사용합니다.\n\n그런 다음 나머지 매개변수가 이를 단일 배열로 수집하고 문자열로 결합합니다. 축하할 일이네요!\n\n# 결론: ... 나머지 매개변수 활용하기\n\n우리가 보았듯이, 나머지 매개변수는 다양한 수의 함수 인수를 우아하게 처리할 수 있는 다재다능한 도구입니다.\n\n<div class=\"content-ad\"></div>\n\nES6 해체 및 전개 연산자와 ...rest 매개변수를 결합하여 더 나은, 더 간단한 코드를 작성할 수 있어요.\n\n물론, React 규칙을 따르고 매개변수로 객체를 전달하는 것이 좋아요. ...rest는 필요없어요!\n\n다른 쪽으로, Tailwind CSS와 함께 작업할 때 항상 간단한 classNames 함수가 필요해서 ... rest 구문을 매일 사용하고 있지만:\n\n```js\nconst classNames = (...args: string[]) => args.filter(Boolean).join(' ')\n```\n\n<div class=\"content-ad\"></div>\n\n여기 아이디어는 문자열 목록을 전달하고, Prettier로 정렬된 Tailwind CSS 클래스 이름을 합치는 것입니다.\n\n만약 그 필터 트릭이 이해되지 않는다면, 왜 이것이 멋지다고 생각하는지 설명한 이전 게시물로 돌아가보세요.\n\n...나머지 매개변수의 마법을 받아들이고, 코드에 이 \"스놀랙스 구문\"을 뿌려넣어 코드를 휴식 시키는 것을 바랍니다!\n\n코딩을 즐기세요! 😴\n\n<div class=\"content-ad\"></div>\n\n# 더 읽을 거리\n\n- Yug Shah이 GeeksforGeeks.org에서 나머지 매개변수에 대해 쓴 글을 참고해보세요.\n\n- 웹 관련 내용을 학습할 때 항상 MDN 문서를 먼저 참고합니다.\n\n- Dhanajay kumar이 Telerik에서 나머지(rest)에 대해 이야기합니다.","ogImage":{"url":"/assets/img/2024-05-17-WhatIstheRestParameterinJavaScript_0.png"},"coverImage":"/assets/img/2024-05-17-WhatIstheRestParameterinJavaScript_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"ES6 REST 문법\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-WhatIstheRestParameterinJavaScript_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"소개: REST 파라미터의 힘\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"자바스크립트 세계는 끊임없이 발전하는 풍경 속에서, 코딩을 더 효율적이고 유연하며 재미있게 만들어주는 멋진 기능들로 가득 차있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ECMAScript 6 (ES6)에서 소개된 하나의 기능은 ...나머지 매개변수이며 ...rest 매개변수로도 쓰입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 마법같은 구문을 사용하면 함수 인수를 하나의 배열로 쉽게 수집할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시작하기 전에 REST와 ...나머지가 완전히 다른 개념임을 언급해야 합니다. REST(API와 관련된 REST)에 대해서는 이 기사들을 확인해주세요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 재미있는 이모지 예제를 활용하여 나머지 파라미터의 기능을 탐험해 봅시다. 어떻게 하는지 알고 있겠죠?\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"🚀 자바스크립트의 ES6 Rest 파라미터로 미사일 발사\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"...rest 파라미터는 자바스크립트 함수로 전달된 다양한 수의 인수를 처리하는 간단하면서도 강력한 방법입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여러 개의 이모지 인수를 받아들이는 함수가 있다고 상상해보세요. 이들을 모두 출력해야 할 때의 과제가 생겼다고 가정해 봅시다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"...rest 파라미터를 사용하지 않으면 arguments 객체를 처리해야 할 것입니다. 그러나 ...rest 파라미터를 사용하면 보다 우아하게 처리할 수 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"printEmojis\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"...emojis\"\n        }), \") {\\n  emojis.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"forEach\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"emoji\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(emoji))\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"printEmojis\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🚀\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🌕\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"👩‍🚀\\\"\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력:\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 🚀\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 🌕\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 👩‍🚀\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예제에서 ...rest 파라미터는 모든 이모지들을 하나의 배열로 모아줍니다. 그리고 우리는 배열을 반복하여 각각을 개별적인 줄에 출력합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"🧙‍♂️ Rest 파라미터와 구조 분해(Destructuring) 결합하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Rest 파라미터를 destructuring과 결합하여 더욱 강력하게 사용할 수 있습니다. 이런 조합은 마치 마술처럼 보일 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기술은 이모지 배열에서 특정 요소를 추출하고 별도로 처리할 수 있게 해줍니다. 이것이 어떻게 동작하는지 실습을 통해 살펴보겠습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"emojiParty\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"firstEmoji, ...otherEmojis\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`첫 번째 이모지: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${firstEmoji}\"\n          }), \"`\"]\n        }), \")\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`다른 이모지들: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${otherEmojis}\"\n          }), \"`\"]\n        }), \")\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"emojiParty\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎉\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎈\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎊\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎁\\\"\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력:\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 첫 번째 이모지: 🎉\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 다른 이모지들: 🎈,🎊,🎁\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예제에서는 함수 인수를 구조 분해하여 첫 번째 이모지를 firstEmoji 변수에 할당합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런 다음, ... rest 파라미터 구문을 사용하여 나머지 이모지를 otherEmojis 배열에 수집합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 마술 묘기로, 첫 번째 이모지와 나머지 이모지를 쉽게 나눠서 표시할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여러 개의 첫 번째 매개변수를 포함하고, 끝에 ...rest 구문만 사용하면 돼요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"🔧 인수 객체의 단점을 수정하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나머지 매개변수는 특히 옛날 ES5 기능인 arguments 객체와 비교할 때 상쾌한 기운을 불어넣어요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"인수 개체와는 달리, 나머지 매개변수는 실제 배열이며 모든 유용한 배열 메서드를 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"printArguments\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 인수 객체를 배열로 변환\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" argsArray = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Array\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"from\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"arguments\"\n        }), \")\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 배열을 순환하며 각 인수를 출력\"\n        }), \"\\n  argsArray.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"forEach\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"arg\"\n          }), \" =>\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(arg)); \\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"printArguments\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🍔\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🍟\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🥤\\\"\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력:\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 🍔\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 🍟\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 🥤\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"인수 개체와는 달리 인수 개체의 forEach 메서드를 사용할 수 없습니다. 이는 열거 가능한 속성을 가진 객체가 아닌 배열류 객체이기 때문입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나머지 매개변수가 배열이므로 \\\"나머지\\\"의 사용은 훨씬 더 간단하고 즐거워집니다. 한번 살펴보세요:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sumEmojisLength\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"...emojis\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" emojis.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"reduce\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"total, emoji\"\n          }), \") =>\"]\n        }), \" total + emoji.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" totalLength = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sumEmojisLength\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎂\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🥳\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎈\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎉\\\"\"\n        }), \")\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`Total emoji length: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${totalLength}\"\n          }), \"`\"]\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Output: Total emoji length: 8\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Each emoji has a string length of 2 characters, and 2×4 === 8\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예시에서는 이모티콘 배열에 reduce 메서드를 사용하여 모든 이모티콘의 총 길이를 계산할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나머지 매개변수를 사용함으로써, Array.from()을 사용하여 먼저 인자 객체를 배열로 변환할 필요 없이 번거로움을 줄일 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JavaScript의 화살표 함수 구문을 사용하면 이 코드가 더 짧아지면서도 여전히 매우 가독성이 높아집니다.```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"calculateEmojiLength\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"...emojis\"\n        }), \") => emojis.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"reduce\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"total, emoji\"\n          }), \") =>\"]\n        }), \" total + emoji.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \")\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" totalLength = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"calculateEmojiLength\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎂\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🥳\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎈\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎉\\\"\"\n        }), \")\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`Total emoji length: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${totalLength}\"\n          }), \"`\"]\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: Total emoji length: 8\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 각 이모지는 2개의 문자로 이루어져 있으며, 2×4 === 8\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"🤹 조작하기: 스프레드 연산자 + 나머지 매개변수\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나머지 매개변수의 동생인 스프레드 연산자도 세 개의 점 구문을 사용하지만 다른 목적을 가지고 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나머지 매개변수는 함수 인수를 배열로 수집하는 반면, 스프레드 연산자는 반대로 작용합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"펼침 연산자(Spread)는 배열이나 객체를 개별 요소로 확장하거나 얕은 복사를 하는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나머지 매개변수와 함께 사용되는 펼침 연산자는 데이터를 쉽게 조작하고 전달할 수 있는 강력한 동료를 만듭니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 코드 예제에서 이들의 힘을 결합해 보겠습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"mixEmojis\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"...emojis\"\n        }), \") => emojis.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"join\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\" \\\"\"\n        }), \")\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" partyEmojis = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎉\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎈\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎁\\\"\"\n        }), \"]\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" celebration = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"mixEmojis\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🥳\\\"\"\n        }), \", ...partyEmojis, \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"🎂\\\"\"\n        }), \")\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"console\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"log\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"`Celebration: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${celebration}\"\n          }), \"`\"]\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 출력: Celebration: 🥳 🎉 🎈 🎁 🎂\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예제에서는 partyEmojis 배열 요소를 개별 인수로 mixEmojis 함수에 전달하기 위해 전개 연산자를 사용합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런 다음 나머지 매개변수가 이를 단일 배열로 수집하고 문자열로 결합합니다. 축하할 일이네요!\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론: ... 나머지 매개변수 활용하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리가 보았듯이, 나머지 매개변수는 다양한 수의 함수 인수를 우아하게 처리할 수 있는 다재다능한 도구입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ES6 해체 및 전개 연산자와 ...rest 매개변수를 결합하여 더 나은, 더 간단한 코드를 작성할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"물론, React 규칙을 따르고 매개변수로 객체를 전달하는 것이 좋아요. ...rest는 필요없어요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다른 쪽으로, Tailwind CSS와 함께 작업할 때 항상 간단한 classNames 함수가 필요해서 ... rest 구문을 매일 사용하고 있지만:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"classNames\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"...args: string[]\"\n        }), \") => args.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Boolean\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"join\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"' '\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기 아이디어는 문자열 목록을 전달하고, Prettier로 정렬된 Tailwind CSS 클래스 이름을 합치는 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 그 필터 트릭이 이해되지 않는다면, 왜 이것이 멋지다고 생각하는지 설명한 이전 게시물로 돌아가보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"...나머지 매개변수의 마법을 받아들이고, 코드에 이 \\\"스놀랙스 구문\\\"을 뿌려넣어 코드를 휴식 시키는 것을 바랍니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코딩을 즐기세요! 😴\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"더 읽을 거리\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Yug Shah이 GeeksforGeeks.org에서 나머지 매개변수에 대해 쓴 글을 참고해보세요.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"웹 관련 내용을 학습할 때 항상 MDN 문서를 먼저 참고합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Dhanajay kumar이 Telerik에서 나머지(rest)에 대해 이야기합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}