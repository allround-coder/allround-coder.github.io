{"pageProps":{"posts":[{"title":"React Select 구현 및 커스터마이징 종합 안내서","description":"","date":"2024-06-22 03:57","slug":"2024-06-22-ImplementingandCustomizingReactSelectAComprehensiveGuide","content":"\n\n# React Select 구현 및 사용자 정의: 포괄적인 안내서\n\nReact Select은 React 애플리케이션에서 일반적인 선택 입력의 대체로 적응 가능하고 유연한 기능을 제공합니다. 이는 검색, 다중 선택, 그룹화 등 다양한 기능을 제공합니다. 이 안내서에서는 React Select를 React 컴포넌트에 구현하고 사용자 정의 스타일을 적용하는 단계를 안내합니다.\n\n# React Select 설치\n\n구현에 들어가기 전에 프로젝트에 React Select를 설치해보겠습니다. npm 또는 yarn을 사용하여 설치할 수 있습니다. 터미널을 열고 프로젝트 디렉토리로 이동한 다음 다음 명령 중 하나를 실행하십시오:\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install react-select\n```\n\n또는\n\n```js\nyarn add react-select\n```\n\nReact Select를 설치했으므로 이제 프로젝트에서 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# React Select 사용하기\n\nReact Select를 사용하려면 먼저 드롭다운 메뉴에 표시될 옵션을 정의해야 합니다. 각 옵션은 값(value)과 라벨(label)을 포함한 객체여야 합니다. 값은 옵션을 선택할 때 저장되는 값이고, 라벨은 드롭다운 메뉴에 표시되는 내용입니다.\n\n옵션을 정의하는 예시는 다음과 같습니다:\n\n```js\nconst options = [\n    {\n      value: \"google\",\n      label: (\n        <div>\n          <FcGoogle className=\"mr-2 text-xl\" />\n        </div>\n      ),\n    },\n    {\n      value: \"bing\",\n      label: (\n        <div>\n          <BiLogoBing className=\"mr-2 text-xl text-red-500\" />\n        </div>\n      ),\n    },\n    {\n      value: \"yahoo\",\n      label: (\n        <div>\n          <BiLogoYahoo className=\"mr-2 text-xl text-yellow-500\" />\n        </div>\n      ),\n    },\n];\n```\n\n<div class=\"content-ad\"></div>\n\n다음으로, React Select에서 Select 컴포넌트를 사용하고 옵션을 전달할 수 있습니다. 또한 옵션 선택을 처리하는 onChange 프롭에 함수를 전달해야 합니다. 이 함수는 선택한 옵션의 값을 컴포넌트의 상태로 업데이트해야 합니다.\n\n다음은 Select 컴포넌트를 사용하는 예시입니다:\n\n```js\nconst select = {\n  <Select\n    value={options.find((option) => option.value === selectedEngine)}\n    options={options}\n    styles={customStyles}\n    isSearchable={false}\n   />\n}\n```\n\n# React Select 스타일링\n\n<div class=\"content-ad\"></div>\n\nSelect 컴포넌트의 외관을 사용자 정의하려면 styles 속성을 전달하면 됩니다. styles 속성은 각 키가 Select 컴포넌트의 일부에 해당하고 값이 해당 부분에 대한 스타일을 반환하는 함수인 객체입니다.\n\n다음은 사용자 지정 스타일을 정의하는 예제입니다:\n\n```js\nconst customStyles = {\n    control: (provided) => ({\n      ...provided,\n      background: 'transparent',\n      display: 'flex',\n      flexWrap: 'nowrap',\n      borderColor: 'hsl(0deg 78.56% 55.56%);',\n      width: '7em'\n    }),\n    menu: (provided) => ({\n      ...provided,\n      background: 'transparent',\n      width: '4em'\n    }),\n};\n```\n\n이 예에서 control 및 menu는 Select 컴포넌트의 일부에 해당하는 키입니다. 제공된 인수는 해당 부분의 기본 스타일이며 사용자 정의 스타일로 재정의할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# React-Select에서 스타일링:\n\n- HTML의 class 속성을 검사하기 위해 개발자 도구를 사용해보세요. 그런 다음 아래와 같이 스타일을 변경하기 위해 해당 속성을 대상으로 지정하세요:\n\n```js\nconst customStyles = {\n    control: (provided) => ({ // class 속성: class=\" css-i32vvf-control\"\n      ...provided,\n      background: 'transparent',\n      display: 'flex',\n      flexWrap: 'nowrap',\n      borderColor: 'hsl(0deg 78.56% 55.56%);',\n      width: '7em'\n    }),\n    menu: (provided) => ({ // 'menu'는 div의 class에서도 가져왔습니다.\n      ...provided,\n      background: 'transparent',\n      width: '4em'\n    }),\n  };\n```\n\n함수 이름을 선택 기준으로 사용하려면 Select 속성에 포함하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<Select\n            styles={customStyles}\n/>\n```\n\n# 결론\n\nReact Select는 많은 유연성과 사용자 정의 기능을 제공하여 React 애플리케이션에서 선택 입력을 구현하는 완벽한 선택입니다. 이 가이드를 통해 프로젝트에서 React Select를 구현하고 사용자 정의하는 방법을 배웠을 것입니다. 잘 디자인된 UI는 사용자 경험을 크게 향상시킬 수 있으며 React Select와 같은 컴포넌트는 그것을 달성하는 데 도움이 될 것입니다.\n\n즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-06-22-ImplementingandCustomizingReactSelectAComprehensiveGuide_0.png"},"coverImage":"/assets/img/2024-06-22-ImplementingandCustomizingReactSelectAComprehensiveGuide_0.png","tag":["Tech"],"readingTime":4},{"title":"jQuery를 사용하여 HTML을 PDF로 변환하는 방법","description":"","date":"2024-06-22 03:56","slug":"2024-06-22-HowToConvertHTMLToPDFUsingjQuery","content":"\n\n본 글에서는 jquery를 사용하여 HTML을 PDF로 변환하는 방법을 살펴보겠습니다. PDF 파일 형식은 웹 응용 프로그램에서 대량 데이터를 다운로드하는 데 유용합니다. PDF 기능으로 오프라인으로 사용하기 위해 동적 콘텐츠를 파일 형식으로 다운로드할 수 있습니다.\n\njQuery는 HTML을 PDF로 변환하는 가장 쉬운 방법이며 다양한 jquery 라이브러리가 있습니다. jsPDF는 jquery를 사용하여 HTML을 PDF로 변환하는 최고의 라이브러리 중 하나입니다. 전체적인 클라이언트 측 JavaScript PDF 생성을 위한 것입니다.\n\n그러니까, jquery를 사용하여 HTML 페이지를 PDF로 변환하는 방법, jquery를 사용하여 PDF 파일을 만드는 방법, HTML을 PDF 파일로 변환하는 방법에 대해 알아보겠습니다.\n\n예시:\n\n<div class=\"content-ad\"></div>\n\n우선, HTML을 PDF로 변환하는 HTML 페이지를 만들 것입니다. HTML 페이지에 다음 코드를 추가하십시오.\n\n```js\n<html>\n    <h1>jQuery를 사용하여 HTML을 PDF로 변환하는 방법 - Techsolutionstuff</h1>\n    <form class=\"form\">        \n        |  Company Name  |  Employee Name  |  Country  |\n        |  ---- | ---- | ---- |\n        |  Dell  |  Maria  |  Germany  |\n        |  Asus  |  Francisco  |  Mexico  |\n        |  Apple  |  Roland  |  Austria  |\n        |  Lenovo  |  Yoshi  |  Canada  |\n        |  HP  |  Helen  |  UK  |\n        |  Acer  |  Hel  |  UK  |\n\n        <input type=\"button\" id=\"create_pdf\" value=\"PDF 생성\">  \n    </form>  \n</html>\n```\n\n추가읽기: 부트스트랩 5 Datepicker에서 날짜 비활성화하는 방법\n\n이 HTML 페이지의 스타일을 추가하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n<style>\ntable {  \n    font-family: arial, sans-serif;  \n    border-collapse: collapse;  \n    width: 100%;  \n}  \n\ntd {  \n    border: 1px solid #dddddd;  \n    text-align: left;  \n    padding: 8px;  \n} \nth{\n    border: 1px solid #dddddd;  \n    text-align: left;  \n    padding: 8px;  \n    background-color: #111;  \n    color:white;\n}\n\ntr:nth-child(odd) {  \n    background-color: #dddddd;  \n}\n</style>\n```\n\n참고 자료: 부트스트랩 5 datepicker 예제 로컬라이징 방법\n\n다음 스크립트를 HTML 페이지에 추가하여 PDF로 변환합니다.\n\n```js\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.5/jspdf.min.js\"></script>  \n<script>\n$(document).ready(function () {  \n    var form = $('.form'),  \n    cache_width = form.width(),  \n    a4 = [595.28, 841.89]; // A4 용지의 너비와 높이  \n\n    $('#create_pdf').on('click', function () {  \n        $('body').scrollTop(0);  \n        createPDF();  \n    });  \n    \n    function createPDF() {  \n        getCanvas().then(function (canvas) {  \n            var  \n             img = canvas.toDataURL(\"image/png\"),  \n             doc = new jsPDF({  \n                 unit: 'px',  \n                 format: 'a4'  \n             });  \n            doc.addImage(img, 'JPEG', 20, 20);  \n            doc.save('techsolutionstuff.pdf');  \n            form.width(cache_width);  \n        });  \n    }  \n      \n    function getCanvas() {  \n        form.width((a4[0] * 1.33333) - 80).css('max-width', 'none');  \n        return html2canvas(form, {  \n            imageTimeout: 2000,  \n            removeContainer: true  \n        });  \n    }\n});\n</script>\n```\n\n<div class=\"content-ad\"></div>\n\n아래 내용도 참고하면 좋을 것 같아요:\n\n- 추가 읽기: Laravel 10에서 DomPDF를 사용하여 PDF 생성하기\n- 추가 읽기: Laravel 9에서 PDF에 헤더와 푸터 설정하는 방법\n- 추가 읽기: Laravel 9에서 AJAX를 이용해 PDF 파일 다운로드하는 방법\n- 추가 읽기: PDFKit을 사용하여 Node JS에서 PDF 파일 생성하는 방법","ogImage":{"url":"/assets/img/2024-06-22-HowToConvertHTMLToPDFUsingjQuery_0.png"},"coverImage":"/assets/img/2024-06-22-HowToConvertHTMLToPDFUsingjQuery_0.png","tag":["Tech"],"readingTime":3},{"title":"JavaScript 스크립트에 데이터를 전달하고 스크립트 내에서 검증하는 방법","description":"","date":"2024-06-22 03:56","slug":"2024-06-22-HowtopassdatatoaJavaScriptscriptandvalidateitwithinthescript","content":"\n\n웹 브라우저에서 실행되는 JavaScript 코드를 삽입하기 위해 `script` 태그를 사용합니다. 경우에 따라, 스크립트가 초기화되고 실행될 때 외부 데이터를 전달해야 할 때가 있습니다. 이렇게 데이터를 전달하고 스크립트 내에서 유효성을 검증하는 방법을 알아보겠습니다.\n\n## A/B 테스트 예제\n\n어플리케이션 내에서 두 기능이 연관된 플로우 중 하나를 활성화하는 역할을 하는 ab-testing.js 스크립트가 있다고 상상해보세요. 어떤 기능을 보여줄지를 결정하는 데이터- 어트리뷰트가 예상됩니다. 예를 들면:\n\n```js\n<script src=\"./ab-testing.js\" data-variant=\"a\"></script>\n```\n\n<div class=\"content-ad\"></div>\n\n이제는 스크립트를 사용하는 모든 클라이언트가 데이터-variant를 정확히 'a' 또는 'b'로 전달해야 합니다.\n\n따라서 스크립트의 진입점에서 그것을 검증할 수 있습니다.\n\n```js\nfunction getFeatureVariantOrThrow() {\n  const script = document.currentScript\n  const variant = script?.getAttribute(\"data-variant\")\n\n  if (!variant) {\n    throw new Error(\"스크립트 태그에 데이터-variant 속성을 전달해주세요\")\n  }\n\n  if ([\"a\", \"b\"].includes(variant)) {\n    return variant\n  }\n\n  throw new Error(\n    'data-variant에 대한 잘못된 값입니다. \"a\" 또는 \"b\" 중 하나를 전달해주세요'\n  )\n}\n\nconst variant = getFeatureVariantOrThrow()\n```\n\n이렇게 하면 당신의 스크립트를 사용하는 애플리케이션은 정확한 데이터-variant를 제공해야 합니다. 그렇지 않으면 브라우저 콘솔에 오류가 표시됩니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-22-HowtopassdatatoaJavaScriptscriptandvalidateitwithinthescript_0.png\" />\n\n## 요약\n\n이 짧은 글에서는 데이터 속성을 스크립트로 전달하고 스크립트 내에서 유효성을 검사하는 매우 구체적인 사용 사례에 대해 논의했습니다.\n\n더 많은 내용을 보려면 팔로우하세요:\n\n<div class=\"content-ad\"></div>\n\n- LinkedIn\n- GitHub\n\n더 많은 풀스택 엔지니어링 콘텐츠를 보고 싶으시면 좋아요와 팔로우를 해주세요!","ogImage":{"url":"/assets/img/2024-06-22-HowtopassdatatoaJavaScriptscriptandvalidateitwithinthescript_0.png"},"coverImage":"/assets/img/2024-06-22-HowtopassdatatoaJavaScriptscriptandvalidateitwithinthescript_0.png","tag":["Tech"],"readingTime":2},{"title":"15개 이상의 쇼핑 카트 템플릿 HTML 및 CSS 무료 데모코드","description":"","date":"2024-06-22 03:55","slug":"2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode","content":"\n\n<img src=\"/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_0.png\" />\n\n# 쇼핑 카트 템플릿 HTML 및 CSS\n\n안녕하세요! 코더 여러분! 새로운 블로그인 Codewithrandom에 오신 것을 환영합니다. 오늘은 HTML과 CSS를 사용한 최고의 15가지 쇼핑 카트 템플릿을 공유하려고 합니다.\n\n# 쇼핑 카트 HTML 템플릿이란 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n- 쇼핑 카트는 이커머스나 소매업자의 웹사이트나 온라인 플랫폼 스토어의 필수 요소로, 제품 둘러보기부터 주문 배치, 결제 게이트웨이까지 모든 서비스를 제공합니다.\n- 쇼핑 카트는 고객이 즐겨찾는 제품을 선정하고 주문을 진행하거나 완료할 수 있게 합니다.\n\n![이미지](/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_1.png)\n\n관련 기사 — 소스 코드가 포함된 50개 이상의 HTML, CSS 및 JavaScript 프로젝트\n\n15+ 멋진 부트스트랩 사이드바 메뉴 템플릿\n\n<div class=\"content-ad\"></div>\n\n여기서 오늘은 편리하게 표시된 결제 버튼과 항목 목록이 포함된 부트스트랩 쇼핑 카트 UI를 설계하는 방법을 배우겠습니다.\n\n웹 개발자와 IT 연수생을 대상으로 한 동적 쇼핑 카트 인터페이스를 만드는 교육입니다.\n\n즐겁게 발견하고 배우세요!\n\n아래는 무료 소스 코드가 포함된 쇼핑 카트 템플릿 HTML CSS 예제 컬렉션입니다.\n\n<div class=\"content-ad\"></div>\n\n- 주문 요약과 함께 Bootstrap 4 쇼핑백 체크아웃\n\n![이미지](/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_2.png)\n\n위의 부트스트랩 쇼핑 카트 프로젝트가 어떻게 HTML과 CSS를 사용하여 구현된 Bootstrap 4 쇼핑백 체크아웃을 보여줍니다.\n\n2. 상품 요약이 포함된 Bootstrap 4 전자 상거래 쇼핑 카트\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_3.png)\n\n위에 표시된 Bootstrap 쇼핑 카트 프로젝트에서, HTML 및 CSS를 사용하여 아이템 요약이 포함된 Bootstrap 4 전자 상거래 쇼핑 카트를 제공해 드립니다.\n\n## 3. 플러스 마이너스 아이콘을 사용한 Bootstrap 4 전자 상거래 쇼핑 카트\n\n![이미지](/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_4.png)\n\n<div class=\"content-ad\"></div>\n\n위에서 언급한 부트스트랩 쇼핑 카트 프로젝트는 HTML과 CSS를 사용하여 구현된 플러스 마이너스 아이콘을 가진 Bootstrap 4 전자 상거래 쇼핑 카트를 보여줍니다.\n\n더 읽어보기: 소스 코드와 함께 100가지 이상의 JavaScript 프로젝트 (초급부터 고급까지)\n\n## 4. 부트스트랩 4 쇼핑 카트 체크아웃 및 결제 옵션\n\n![이미지](/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_5.png)\n\n<div class=\"content-ad\"></div>\n\n위에 표시된 Bootstrap 쇼핑 카트 프로젝트에서, HTML, JS, 그리고 CSS를 사용하여 Bootstrap 4 쇼핑 카트 체크아웃 및 결제 옵션을 제공해 드립니다.\n\n또 읽어보기: HTML, CSS, JavaScript를 사용한 3D 큐브 이미지 슬라이더\n\n## 5. 경고를 포함한 Bootstrap 4 전자상거래 웨딩 쇼핑 카트 페이지\n\n![이미지](/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_6.png)\n\n<div class=\"content-ad\"></div>\n\n위의 표는 마크다운 형식으로 변경하세요.\n\n<div class=\"content-ad\"></div>\n\n다음 글도 읽어보세요: HTML, CSS 및 JavaScript를 사용한 단계 진행 막대\n\n## 7. 부트스트랩 4 전자 상거래 쇼핑 카트\n\n![이미지](/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_8.png)\n\n위 프로젝트가 HTML 및 CSS를 사용하여 구현된 부트스트랩 4 전자 상거래 쇼핑 카트를 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n자, 이거야! 위에 표시된 부트스트랩 쇼핑 카트 프로젝트에서는 HTML 및 CSS를 사용하여 쿠폰 코드 입력란이 있는 간단한 부트스트랩 4 전자 상거래 쇼핑 카트가 준비되어 있습니다.\n\n아래 링크에서  15+ 멋진 부트스트랩 사이드바 메뉴 템플릿을 확인해보세요.\n\n## 9. 쇼핑 카트 표\n\n<div class=\"content-ad\"></div>\n\n\n![Shopping Cart Table](/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_9.png)\n\n위 프로젝트는 HTML, JS 및 CSS를 사용하여 구현된 쇼핑 카트 테이블을 보여줍니다.\n\n관련 글 보기: HTML 및 CSS를 사용한 15+ 제품 카드 [데모 + 코드]\n\n## 10. 이메일 템플릿 대기 중인 Bootstrap 4 쇼핑 카트\n\n\n<div class=\"content-ad\"></div>\n\n\n![Shopping Cart Template](/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_10.png)\n\n위에 표시된 부트스트랩 쇼핑 카트 프로젝트에서는 HTML을 사용한 부트스트랩 4 쇼핑 카트 이메일 템플릿을 제공합니다.\n\n더 많은 흥미로운 소스 코드를 보려면 클릭하십시오.\n\n@geekcoder.52를 팔로우해 주세요\n","ogImage":{"url":"/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_0.png"},"coverImage":"/assets/img/2024-06-22-15ShoppingCartTemplateHTMLandCSSFreeDemoCode_0.png","tag":["Tech"],"readingTime":4},{"title":"수평 마이크로 프론트엔드 아키텍처에서 HTML 스트리밍 및 Shadow DOM 이해하기","description":"","date":"2024-06-22 03:53","slug":"2024-06-22-UnderstandingHTMLStreamingandShadowDOMinHorizontalMicro-FrontendArchitecture","content":"\n\n웹 개발 분야에서, 마이크로 프론트엔드 개념은 거대한 응용프로그램을 작은 관리 가능한 부분으로 분해하는 능력으로 인해 상당한 인기를 얻고 있습니다. 마이크로 프론트엔드 아키텍처에서 자주 사용되는 두 가지 중요한 기술은 HTML 스트리밍과 쉐도우 DOM입니다. 이 글에서는 이러한 기술들이 무엇을 의미하는지, 서로 어떻게 보완하는지, 코드 예제를 제공하고 수평적인 마이크로 프론트엔드 아키텍처에서의 장단점에 대해 논의할 것입니다.\n\n# HTML 스트리밍:\n\nHTML 스트리밍 또는 서버 측 렌더링 (SSR)은 서버에서 생성되는 대로 HTML을 점진적으로 클라이언트로 전송하는 것을 포함합니다. 이 접근 방식은 브라우저가 내용을 점진적으로 렌더링하도록 허용함으로써 인식된 성능을 향상시킵니다. 이 과정에서 서버는 페이지의 나머지 부분을 처리하고 있는 동안 브라우저가 내용을 점진적으로 렌더링할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n장점\n\n- 지각되는 성능 향상: 사용자가 전체 페이지가 완전히 로드되기 전에도 콘텐츠를 더 빨리 볼 수 있습니다.\n- SEO에 유리: 검색 엔진 크롤러가 초기 HTML 응답에서 콘텐츠를 쉽게 색인화할 수 있습니다.\n- 상호 작용까지 단축된 시간: 사용자가 페이지를 로드하는 동안 상호 작용할 수 있어 더 부드러운 사용자 경험을 제공합니다.\n\n단점\n\n- 서버 부하 증가: 각 요청에 대해 서버에서 HTML을 생성하는 것은 자원이 소모적일 수 있습니다.\n- 클라이언트 측 상호 작용 한계: HTML 스트리밍만으로는 복잡한 클라이언트 측 상호 작용을 구현하기 어려울 수 있습니다.\n- 전체 로드 시간이 느려질 수 있는 가능성: 초기 콘텐츠가 빨리 나타나지만 전체 페이지가 클라이언트 측 렌더링과 비교했을 때 더 오래 걸릴 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 셰도우 DOM:\n\n셰도우 DOM은 특정 요소 내부의 DOM과 CSS를 캡슐화하여 전역 범위에서 보호하는 웹 표준입니다. 이를 통해 개발자는 자체 스타일링 및 동작을 갖춘 독립적인 구성 요소를 만들 수 있으며 페이지의 다른 부분에서 발생할 수 있는 스타일 또는 스크립트 충돌을 방지할 수 있습니다.\n\n장점\n\n- 캡슐화: 셰도우 DOM으로 구축된 컴포넌트는 페이지의 다른 부분과 격리되어 의도하지 않은 스타일 또는 스크립트 충돌이 발생할 가능성을 줄입니다.\n- 재사용성: 캡슐화된 컴포넌트는 기능에 영향을 주지 않고 응용 프로그램의 서로 다른 부분에 재사용할 수 있습니다.\n- 유지보수성: 셰도우 DOM은 캡슐화를 강화하고 컴포넌트 간 의존성을 줄이는 방식으로 더 깨끗한 코드 아키텍처를 촉진합니다.\n\n<div class=\"content-ad\"></div>\n\n단점\n\n- 브라우저 지원: 대부분의 최신 브라우저는 Shadow DOM을 지원하지만, 오래된 브라우저는 폴리필(polyfill)이 필요하거나 대체 전략이 필요할 수 있습니다.\n- 학습 곡선: Shadow DOM에 익숙하지 않은 개발자는 구현 및 디버깅하는 과정에서 학습 곡선에 직면할 수 있습니다.\n- 스타일링 유연성의 제한: Shadow DOM 외부에서 캡슐화된 컴포넌트의 스타일링은 도전적일 수 있으며 추가적인 노력이 필요할 수 있습니다.\n\n# HTML Streaming과 Shadow DOM 함께 사용하기:\n\n수평적인 마이크로 프론트엔드 아키텍처에서 여러 독립적인 팀이 애플리케이션의 다른 부분에 기여하는 경우, HTML 스트리밍과 Shadow DOM을 결합하면 중요한 이점을 제공할 수 있습니다. 이러한 기술이 어떻게 함께 작동할 수 있는지 예를 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Microfrontend with Shadow DOM</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <!-- HTML streaming content -->\n  <div id=\"streamedContent\">\n    <!-- Shadow DOM component -->\n    <div id=\"shadowContainer\"></div>\n  </div>\n  <script>\n    // Fetch HTML streaming content\n    fetch('streamedContent.html')\n      .then(response => response.text())\n      .then(html => {\n        document.getElementById('streamedContent').innerHTML = html;\n        \n        // Create Shadow DOM\n        const shadowContainer = document.getElementById('shadowContainer');\n        const shadowRoot = shadowContainer.attachShadow({mode: 'open'});\n        \n        // Fetch and inject Shadow DOM content\n        fetch('shadowContent.html')\n          .then(response => response.text())\n          .then(html => {\n            shadowRoot.innerHTML = html;\n          });\n      });\n  </script>\n</body>\n</html>\n```\n\n이 예시에서 클라이언트로 주요 HTML 콘텐츠가 스트리밍되는 동안 그 내부의 특정 섹션은 Shadow DOM을 사용하여 캡슐화되었습니다. 이를 통해 다른 팀들이 각자의 구성요소에 독립적으로 작업하고, 캡슐화를 보장하며 충돌 위험을 줄일 수 있습니다.\n\n더 읽어보기:\n\n- HTML 스트리밍: HTML 스트리밍의 장점\n- Shadow DOM: Shadow DOM 소개\n- 마이크로 프론트엔드: 마이크로 프론트엔드 아키텍처\n\n<div class=\"content-ad\"></div>\n\n# 결론:\n\nHTML 스트리밍과 Shadow DOM은 특히 수평적인 마이크로 프론트엔드 아키텍처 내에서 애플리케이션의 확장성, 성능, 유지 보수성을 크게 향상시킬 수 있는 강력한 기술입니다. 이러한 기술이 어떻게 작동하며 효과적으로 결합될 수 있는지를 이해함으로써, 개발자들은 유지 및 관리가 쉬운 견고하고 확장 가능한 웹 애플리케이션을 구축할 수 있습니다.\n\n# Stackademic 🎓\n\n끝까지 읽어 주셔서 감사합니다. 가기 전에:\n\n<div class=\"content-ad\"></div>\n\n- 작가에게 박수를 보내주시고 팔로우도 부탁드려요! 👏\n- 팔로우하기: X | LinkedIn | YouTube | Discord\n- 다른 플랫폼에서도 만나보세요: In Plain English | CoFeed | Venture | Cubed\n- 알고리즘 콘텐츠와 싸우기 싫으시다구요? Differ를 시도해보세요\n- 더 많은 콘텐츠는 Stackademic.com에서 확인해보세요","ogImage":{"url":"/assets/img/2024-06-22-UnderstandingHTMLStreamingandShadowDOMinHorizontalMicro-FrontendArchitecture_0.png"},"coverImage":"/assets/img/2024-06-22-UnderstandingHTMLStreamingandShadowDOMinHorizontalMicro-FrontendArchitecture_0.png","tag":["Tech"],"readingTime":4},{"title":"10살 아이에게 배운 Power BI 이야기 타이타닉 데이터 분석의 교훈","description":"","date":"2024-06-22 03:52","slug":"2024-06-22-WhatMy10-Year-OldTaughtMeAboutPowerBIATitanicTale","content":"\n\n## 수상 경력 있는 프로젝트 이야기\n\n![이미지](/assets/img/2024-06-22-WhatMy10-Year-OldTaughtMeAboutPowerBIATitanicTale_0.png)\n\n## 장난\n\n이렇게 상상해 봐: 내 딸, 마스터마인드 대모각인 로블록스에서의 강도. 집에 침입하고 금고를 털고, 결코 걸리지 않고 전리품을 가져간다. 이 모든 일이 내 눈앞에서 벌어지고 있다고! 의문의 부모 행동 한 번 했을 때, 그녀가 강도 능력을 선보일 때 웃음을 참을 수 없었다. 나의 자녀, 디지털 도둑.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-22-WhatMy10-Year-OldTaughtMeAboutPowerBIATitanicTale_1.png\" />\n\n얼마나 이 모든 걸 알아내었는지 물어봐야 했다. 유튜브에서 튜토리얼을 보았나요? 다른 누군가를 모방했나요? 그녀의 대답은? \"아뇨, 그냥 계속해서 다양한 방법을 시도해 보았어요.\" 그녀는 불가능한 것을 시도함으로써 가능한 일로 변화시켰어요.\n\n# 타이타닉: 침몰하지 않는 자의 메아리\n\n이 아이디어는 내게 강하게 남았습니다. 컴퓨터로 돌아가 작업을 하고 있던 참에요. 2024년 '당신의 데이터를 말하게 만들기' 대회에 참가 중이었어요. 이 대회에는 두 가지 주요 카테고리가 있었지요:\n\n<div class=\"content-ad\"></div>\n\n이야기하기에 매력있는 옵션을 선택했지만, 주제에 대해 감이 없었습니다. 그때 딸이 나에게 \"타이타닉\"을 제안했습니다. 그녀는 영화를 수백 번이나 보았어요. 그런데 이제 도전이 있었습니다: 파워 BI를 사용하여 이 전설적인 이야기를 어떻게 전달할 수 있을까요? 제임스 카메론의 상징적인 버전을 넘어서, 정말 매혹적인 것을 만들어야 했습니다.\n\n이 보고서에서 원했던 것은 다음과 같습니다:\n\n- 포괄적인 데이터: 이해하기 쉽고 매력적인 배와 승객에 대한 세부 정보.\n- 독창성: 사용자들이 새로운 것을 배우기 위해 머물러 있는 독창적이고 주목할만한 보고서.\n- 맞춤형: Deneb로 만든 차트와 그래프로 한층 높은 맞춤화 수준을 제공하기.\n\n이 비전을 갖고 데이터를 찾아 나서기 시작했습니다. 학창 시절의 타이타닉 Kaggle 데이터셋은 출발점이었지만, 더 필요했습니다. 그래서 저는 앤사이클로피디아 타이타닉을 발견했습니다. 이 곳은 이야기, 사진, 상세한 승객 목록의 작은 보물 창고였어요. 출생지부터 최후까지 모든 것을 담고 있어, 이야기에 완벽한 데이터셋이었습니다. 이제 남은 일은 독자들을 사로잡을 수 있는 이야기로 엮는 것뿐이었습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-22-WhatMy10-Year-OldTaughtMeAboutPowerBIATitanicTale_2.png\" />\n\n## HTML 내용 (Lite)\n\n나는 Spline에서 3D 객체를 시도해 보면서 이를 Power BI 리포트에 추가했어요. 이것은 Power BI에서 매일 볼 수 있는 것이 아닙니다. 가장 좋은 부분은 무엇일까요? 전문가일 필요가 없다는 것이에요. 다니엘 마시-패트릭(Daniel Marsh-Patrick)의 HTML Content Lite 사용자 정의 시각적을 사용하고 기본 HTML 프레임워크를 배우고 Spline에서 임베드 코드를 붙여넣으면 됩니다.\n\n그러나 제가 궁금해 한 것은, 이것이 비지니스에 얼마나 유용한가요? 사용자들이 최신 숫자에만 관심이 있다면 3D 객체를 사용하게 하는 것은 무슨 의미가 있을까요? 어떻게 HTML과 CSS를 기능적이고 재미있게 만들 수 있을까요?\n\n<div class=\"content-ad\"></div>\n\n저는 더 탐험하기로 결정했어요. CodePen의 HTML, CSS 및 JavaScript 애니메이션의 세계로 뛰어들었죠. 간단한 효과를 찾아 코드를 Power BI로 복사했는데, 결과는... 아무것도 나타나지 않았어요. 몇 차례 더 실패한 후에는 패배감이 들었죠. 그런 다음, 딸의 말이 내 마음에 울렸어요: \"그냥 계속 다양한 방법을 시도해봤어요.\" 그래서 다시 도전해 보았고, YouTube에서 자습서를 찾아보았지만 여전히 축치느껴졌어요. 막혀버린 느낌에, ChatGPT에 문의하기로 결심했어요.\n\n\"이 HTML과 CSS 코드를 Power BI의 HTML Lite 비주얼에 결합해 줄 수 있을까요?\" 라고 물었죠. 그리고 바로 ChatGPT가 그 마법을 부린답니다. 코드를 Power BI에 붙여넣기 했더니, 와! 부드럽게 뒤집히는 카드가 나타났어요. 독특하고 주목을 끄는데, 정말로 매력적으로 작동했죠.\n\n![이미지](/assets/img/2024-06-22-WhatMy10-Year-OldTaughtMeAboutPowerBIATitanicTale_3.png)  \n\n# Deneb\n\n<div class=\"content-ad\"></div>\n\nDeneb은 Enterprise DNA를 통해 발견한 게임 체인저에요. 그들의 튜토리얼은 그렉 필립스에 의해 이끌어지며 최고 수준이에요. 또한 유튜브 'Power BI Guy'의 벤 페리는 매우 명확하고 단계별 안내를 제공해요. Deneb를 사용하면 시각적 요소의 거의 모든 부분을 조정할 수 있어요.\n\n![이미지](/assets/img/2024-06-22-WhatMy10-Year-OldTaughtMeAboutPowerBIATitanicTale_4.png)\n\n실제로 가장 어려웠던 부분은 리포트 테마와 일치하는 올바른 차트 스타일을 선택하는 것이었어요. 리포트에는 여러 데이터 주도 시각화가 포함되어 있었는데, 각각이 이야기의 독특한 부분을 보여줘요. 제가 가장 좋아한 것은 라이프보트 차트였어요. 그것은 간단하지만 강력하며, 서로 겹쳐진 막대로 라이프보트 용량의 차이를 보여줬어요. 전체적으로 6개의 차트만 있었지만, 각각이 자신만의 소설이었어요. 이는 Power BI 기본 시각화로 수행할 수도 있었지만, 대회는 특별한 무언가를 필요로 했어요.\n\n## 구조/레이아웃\n\n<div class=\"content-ad\"></div>\n\n엔사이클로피디아 타이타닉을 찾아보며 HTML/CSS 아이디어를 찾던 중, 이야기를 흥미롭게 안내할 레이아웃이 필요했습니다. 그때 제 10살 친구, 창의적인 천재인 우리아이가 제안했어요: “신문 모양으로 만들면 멋지지 않을까?”\n\n<img src=\"/assets/img/2024-06-22-WhatMy10-Year-OldTaughtMeAboutPowerBIATitanicTale_5.png\" />\n\nFigma를 사용해서 각 페이지의 레이아웃을 만들었어요. 배경 이미지를 생성하고 설정하고, 시각 요소를 일치시키는 것은 쉬웠죠. 하지만 마감일 몇 주 전, HTML 시각 요소가 너무 많아서 보고서가 느린 것을 깨달았어요. 판사가 보고서가 로드되기까지 5~10초를 기다리는 건 바람직하지 않았죠. 다시 접근 방식을 재고해야 했고, “계속 노력해봐” 라는 생각을 되새겼어요.\n\n'로딩' HTML 시각 요소를 찾아보았지만, 모든 것이 로드된 후에는 사라지게 하는 데 어려움을 겪었어요. 제 해결책을 소개할게요: 큰 배경 이미지 대신 조각들로 나눠서 각각을 로드되는 시각 요소 위에 이미지를 사용하여 층을 이루는 것이었어요. 완벽하진 않지만, 누가 Power BI 보고서의 첫 페이지를 가로지르는 배를 보지 않았을까요?\n\n<div class=\"content-ad\"></div>\n\n## 계속 노력해 보세요\n\n타이타닉 프로젝트는 여러 어려움이 있었지만, 결국 게임을 바꾸는 즐거운 경험이 되었어. 배울 점은 무언가 새롭고 미친 듯한 것을 시도하는 데 두려워하지 말아야 한다는 거야. Data2Speak를 확인해 보면 영감을 받을 수 있어; 그들은 비즈니스 대시보드와 스토리텔링 프로젝트에 대한 놀라운 보고서를 가지고 있어. 우리의 프로젝트도 함께 즐길 수 있으니까. 심지어 당신의 다음 프로젝트에 대한 발상을 찾을 수도 있어, 아마도 이번과 같은 대회용으로 말이야.\n\n![프로젝트 이미지](/assets/img/2024-06-22-WhatMy10-Year-OldTaughtMeAboutPowerBIATitanicTale_6.png)\n\n내가 말해줄게, 10세 딸에게 우리 프로젝트가 2등을 차지했다고 말하는 기분보다 더 좋은 것은 없어. 다음 날에는 이미 다음 프로젝트에 대해 설레이고 있었어 — 공룡 프로젝트야!\n\n<div class=\"content-ad\"></div>\n\n# 현업에서의 활용성?\n\nHTML과 CSS가 어떻게 더 전통적인 비즈니스 보고서에 활용될 수 있는지에 대한 질문으로 돌아가서, 제가 이 향상된 KPI 카드를 만들었는데, 이를 통해 여러분이 무엇을 할 수 있는지 예시로 제시했습니다. 자, 파일을 다운로드해서 여러분이 어떤 것을 만들 수 있는지 확인해보세요!\n\n# 저자 소개\n\n제이슨 보이어는 관리 및 유지보수 분야에서 경험이 있는 데이터 분석가입니다. 현재 Amentum에서 일하고 있는 제이슨은 데이터에서 통찰을 발견하여 창의적이고 고품질의 보고서를 제공하는 전문가입니다. 제이슨과 LinkedIn에서 연결해보세요.\n\n<div class=\"content-ad\"></div>\n\n감사합니다! \n\nData2Speak 웹사이트를 확인하고 LinkedIn 및 Twitter에서 팔로우해보세요!\n\n![이미지](/assets/img/2024-06-22-WhatMy10-Year-OldTaughtMeAboutPowerBIATitanicTale_7.png)","ogImage":{"url":"/assets/img/2024-06-22-WhatMy10-Year-OldTaughtMeAboutPowerBIATitanicTale_0.png"},"coverImage":"/assets/img/2024-06-22-WhatMy10-Year-OldTaughtMeAboutPowerBIATitanicTale_0.png","tag":["Tech"],"readingTime":5},{"title":"구글 애널리틱스를 Streamlit에 적용하는 3단계 쉬운 방법","description":"","date":"2024-06-22 03:50","slug":"2024-06-22-GoogleAnalyticsforStreamlitin3EasySteps","content":"\n\nStreamlit에는 Google Analytics를 공식적으로 지원하는 것이 없습니다. 그것은 좀 아쉽지만, Google Analytics는 사용자들이 애플리케이션에서 어떻게 행동하는지 이해하는 데 매우 중요합니다. 클릭 추적, 페이지 이동 및 기타 중요 이벤트를 추적하는 것이죠.\n\nStreamlit 생태계를 통해 몇 가지 추적 리소스가 있습니다. 특히 streamlit-analytics 확장 프로그램이 있습니다. 그러나 Google Analytics는 모든 산업에서의 업계 표준입니다.\n\n<div class=\"content-ad\"></div>\n\n만약 Heroku.com이나 Railway.app과 같은 플랫폼에 Streamlit 웹 앱을 배포했다면, 사이트에서의 마이크로 레벨 이벤트와 매크로 레벨 행동 경향에 대한 액세스가 필요할 것입니다.\n\nStreamlit의 경우, 복잡한 작업을 수행하는 데 여러 가지 방법이 있습니다.\n\n# 직접 넘어오는 것 — 작동하지 않는 것:\n\nStreamlit에서 다음과 같이 HTML+Javascript를 페이지에 주입할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```python\nimport streamlit as st\n\nst.markdown(body, unsafe_allow_html=True)\n```\n\nbody가 적절한 HTML이고 이 스니펫 외부의 코드에 의존하지 않는다면, 보통 잘 작동할 것입니다. 그러나 이 방법을 사용하여 Google Analytics를 주입하지 마십시오.\n\nStreamlit의 작동 방식으로 인해 페이지의 본문이 변경될 때마다...\n\n- 데이터가 필드에 입력되는 경우,\n- 버튼이 눌리는 경우,\n- 슬라이더가 드래그되는 경우,\n- 등...\n\n<div class=\"content-ad\"></div>\n\n… 이벤트 처리 루프는 처음부터 모든 Python 코드를 다시 트리거하고 Google Analytics HTML을 새로 고쳐 이를 다시 실행시킵니다. 결국, 이로 인해 사이트에서 발생하는 이벤트의 수와 트래픽이 급격하게 증가합니다. Streamlit에서는 주 코드 바깥에 코드, 형식 또는 스크립트를 넣어 다시 실행이 트리거되지 않는 곳에 배치하는 기본 방법이 없습니다. 그러나 더 나은 방법이 있습니다! 이겁니다:\n\n# 단계 1: Google Analytics 측정 ID\n\n- analytics.google.com에 가서 로그인/가입하세요\n- 분석 계정(분석 그룹) 및 분석 속성(추적하려는 웹사이트에 관한 것)을 만드세요\n\n<img src=\"/assets/img/2024-06-22-GoogleAnalyticsforStreamlitin3EasySteps_1.png\" />\n\n<div class=\"content-ad\"></div>\n\n- 작업을 완료한 후, 그림 위에 표시된 속성/스트림을 클릭하면 쪽면에서 팝업이 나타납니다. 그런 다음에는 팝업의 하단 부근에 있는 \"태그 지침 보기\"를 찾아 클릭하세요.\n\n![태그 지침 보기](/assets/img/2024-06-22-GoogleAnalyticsforStreamlitin3EasySteps_2.png)\n\n- 다음 페이지에서 \"수동으로 설치\"를 클릭하세요.\n\n![수동으로 설치](/assets/img/2024-06-22-GoogleAnalyticsforStreamlitin3EasySteps_3.png)\n\n<div class=\"content-ad\"></div>\n\n얼른 도달했어요. 두 개의 `script` 태그를 포함한 HTML 코드 스니펫을 볼 수 있어야 합니다. 각 스크립트에는 G-XXXXXXXXXX와 같은 코드가 들어 있습니다. 아래는 전체 코드 스크립트입니다 (정확한 측정 ID를 제거한 버전):\n\n```js\n<!-- Google 태그 (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX\"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'G-XXXXXXXXXX');\n</script>\n```\n\n다만 X가 다른 영숫자 값으로 대체될 것입니다. 이 코드 스니펫의 한 버전을 Streamlit에 삽입할 것입니다.\n\n# 단계 2: Streamlit 패키지 소스 수정\n\n<div class=\"content-ad\"></div>\n\nStreamlit은 사이트의 헤더 데이터를 직접 편집할 수 없지만, 우리는 그것을 바꿀 것입니다. 헤더는 Streamlit 로직에 의해 작성된 HTML 본문 외부에 있기 때문에 페이지가 변경될 때마다 헤더 데이터가 새로 고쳐지지 않습니다. 이로써 구글 애널리틱스 코드 조각이 편안히 백그라운드에 살 수 있게 됩니다.\n\n우리가 작성할 스크립트의 목적은 다음과 같습니다:\n\n- Streamlit 패키지 내에서 헤더 데이터를 포함한 소스 파일을 찾기\n- 헤더에 GA 스크립트를 포함하도록 편집하기\n- 이제 이 Streamlit 설치를 나중에 가져올 때 항상 헤더에 GA 스크립트가 포함되도록 할 것입니다.\n\n새로운 기기에 앱을 배포할 때마다 자동으로 실행되어야 하므로 이 작업을 자동화할 스크립트가 필요합니다. 만약 컴퓨터에서 로컬로 호스팅하는 경우에는 Streamlit 소스 코드로 가서 복사하여 붙여넣기를 하면 쉽게 할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n위에 언급한 단계를 수행하는 Python 스크립트를 보여드릴게요. Renata님의 포럼 글에서 영감을 받은 내용이 많습니다:\n\n```python\nfrom bs4 import BeautifulSoup\nimport pathlib\nimport shutil\nimport streamlit as st\n\nGA_ID = \"google_analytics\"\nGA_SCRIPT = \"\"\"\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX\"></script>\n<script id='google_analytics'>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n  gtag('config', 'G-XXXXXXXXXX');\n</script>\n\"\"\"\n\ndef inject_ga():\n    \n    index_path = pathlib.Path(st.__file__).parent / \"static\" / \"index.html\"\n    soup = BeautifulSoup(index_path.read_text(), features=\"html.parser\")\n    if not soup.find(id=GA_ID): \n        bck_index = index_path.with_suffix('.bck')\n        if bck_index.exists():\n            shutil.copy(bck_index, index_path)  \n        else:\n            shutil.copy(index_path, bck_index)  \n        html = str(soup)\n        new_html = html.replace('<head>', '<head>\\n' + GA_SCRIPT)\n        index_path.write_text(new_html)\n\ninject_ga()\n```\n\n두 번째 스크립트에 id를 할당하여 GA 스크립트를 약간 수정했는데, 이렇게 함으로써 두 번째 실행될 경우에도 분석 스니펫을 확인할 수 있고 변경되지 않도록 했어요.\n\n# 단계 3: 시작 스크립트 편집 및 추적 가져오기\n\n<div class=\"content-ad\"></div>\n\n배포 시 설치를 변경하는 방법은 어떻게 할까요? Streamlit 앱의 본문이 새로 고침될 때마다 변경되지 않도록 합니다.\n\n일반적으로 제가 사용하는 해결책은 편리함과 코드 분리를 위해 배포 시 순차적으로 실행되는 두 개의 파이썬 스크립트를 준비하는 것입니다.\n\nStep 2에서 주어진 스크립트는 add_ga.py로 호출할 수 있으며, Streamlit 앱을 실행하는 파이썬 파일은 main.py입니다. 이러한 파일들을 사용하여 다음과 같이 순차적으로 실행되는 간단한 시작 스크립트를 만들 수 있습니다:\n\n```python\npython add_ga.py && streamlit run app.py\n```\n\n<div class=\"content-ad\"></div>\n\nBash에서 이중 앰퍼샌드 &&는 첫 번째 명령이 성공적으로 종료된 경우에만 두 번째 명령을 실행하도록 합니다. 따라서 웹 사이트가 온라인으로 전환되었을 때 add_ga.py 스크립트에 오류가 없는지 확인할 수 있습니다. 또한 `head` 태그 상단의 HTML을 확인하여 GA 스크립트가 제대로 포함되어 있는지도 확인할 수 있습니다.\n\n# 즐거운 호스팅!\n\nGoogle Analytics가 실시간 Streamlit 웹 페이지의 태그를 신속하게 식별할 수 있습니다. 일반적으로 몇 분 이내에 대시보드에서 웹 사이트의 트래픽 및 다른 통계를 확인할 수 있습니다.\n\n사용자들이 지금까지 사이트에 누가 있는지, 사용자들이 어디에서 오는지, 콘텐츠와 상호 작용하는 방법, 웹 사이트에서 수익을 창출하는지, 사람들이 얼마나 자주 방문하는지, 대상 그룹은 누구인지 등 유용한 정보를 지속적으로 모니터링할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nStreamlit이 할 수 있는 놀라운 기능이 더 많이 있어요. 앞으로는 클라이언트로부터 HTTPS 헤더 데이터를 스크랩하여 UserAgent 데이터뿐만 아니라 IP 주소와 화면 크기까지 기록하는 방법에 대해 설명할 예정이에요.\n\n읽어 주셔서 감사합니다! 더 많은 정보를 얻고 싶으시면 여기 공식 포럼을 통해 Streamlit 커뮤니티에 문의해 보세요. 이 가이드에 추가할 내용이나 해결해야 할 문제가 있으면 언제든 알려주세요.","ogImage":{"url":"/assets/img/2024-06-22-GoogleAnalyticsforStreamlitin3EasySteps_0.png"},"coverImage":"/assets/img/2024-06-22-GoogleAnalyticsforStreamlitin3EasySteps_0.png","tag":["Tech"],"readingTime":6},{"title":"HTML, CSS, JavaScript로 이미지 슬라이더 쉽게 만드는 방법","description":"","date":"2024-06-22 03:48","slug":"2024-06-22-ImagesliderusingvanillaHTMLCSSandJavaScript","content":"\n\n요즘에 작은 웹 사이트를 개발 중입니다. 이 웹 사이트는 프레임워크나 외부 라이브러리에 의존하지 않습니다. 유일한 복잡한 기능은 이미지 슬라이더를 표시하는 것이었습니다.\n\n이 기능에 대한 요구 사항은 다음과 같습니다:\n\n- 바닐라 코드를 사용해야 합니다 (초심자이거나 프로젝트를 가벼우게 유지하고 치밀한 라이브러리에 의존하지 않고 싶을 때 사용 가능합니다).\n- 반응형 디자인: 데스크톱 및 모바일 장치에서 멋지게 보이며 터치 디바이스에서 직접 슬라이딩하는 이점이 있어야 합니다.\n- 정확한 이미지 렌더링: 이미지가 잘리지 않고 종횡비가 보존되어야 합니다.\n\n이 기사에서는 시도해 본 세 가지 해결책을 공유하겠습니다. 처음 두 가지는 순수한 HTML/CSS를 기반으로 하지만 결과물에 몇 가지 측면이 부족합니다. 세 번째 해결책은 모든 요구 사항을 충족한 최종 해결책인데, 몇 줄의 JavaScript를 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n# 1. 라디오 버튼과 레이블을 사용한 기본적인 슬라이드 토글러\n\n이 첫 번째 솔루션은 HTML과 CSS만 사용하므로 기본적이며, 움직임이 없기 때문에 제대로 된 슬라이더는 아닙니다. 그럼에도 불구하고 구현은 매우 쉽습니다.\n\n## 구현\n\n루트 슬라이더 div에는 두 개의 내부 div가 포함되어 있습니다: 하나는 슬라이드용이고 또 다른 하나는 슬라이더 탐색을 위한 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<div class=\"slider\">\n    <div class=\"slides\">\n        ...\n    </div>\n    <div class=\"slider-nav\">\n        ...\n    </div>\n</div>\r\n```\n\n각 슬라이드마다, 현재 선택된 슬라이드를 저장하는 데 사용되는 라디오 입력과 함께 콘텐츠 div가 포함되어 있습니다.\n\n```js\n<div class=\"slides\">\n  <div class=\"slide\" >\n    <input type=\"radio\" id=\"radio_slider1_slide1\" name=\"slider1\" checked=\"checked\">\n    <div class=\"content\">\n      <img src=\"../common/werner-sevenster-JuP0ZG0UNi0-unsplash.jpg\">\n    </div>\n  </div>\n  <div class=\"slide\">\n    <input type=\"radio\" id=\"radio_slider1_slide2\" name=\"slider1\">\n    <div class=\"content\">\n      <img src=\"../common/casey-horner-8ftuBebG3_M-unsplash.jpg\" loading=\"lazy\">\n    </div>\n  </div>\n  <div class=\"slide\">\n    <input type=\"radio\" id=\"radio_slider1_slide3\" name=\"slider1\">\n    <div class=\"content\">\n      <img src=\"../common/laura-smetsers-H-TW2CoNtTk-unsplash.jpg\" loading=\"lazy\">\n    </div>\n  </div>\n</div>\r\n```\n\n라디오 요소 그룹 내에서는 한 가지 값만 선택할 수 있습니다. 따라서 CSS로 한 슬라이드만 표시됩니다.\n\n<div class=\"content-ad\"></div>\n\n라디오 입력란은 슬라이더 내비게이션 디브에 배치된 레이블 엘리먼트에 의해 활성화됩니다:\n\n```js\n<div class=\"slider-nav\">\n  <label for=\"radio_slider1_slide1\"><img src=\"../common/dot.svg\" /></label>\n  <label for=\"radio_slider1_slide2\"><img src=\"../common/dot.svg\" /></label>\n  <label for=\"radio_slider1_slide3\"><img src=\"../common/dot.svg\" /></label>\n</div>\n```\n\n라디오 입력란은 각 슬라이드에 첨부된 .previous와 .next 레이블을 사용하여도 활성화할 수 있습니다:\n\n```js\n<div class=\"slide\">\n  <input type=\"radio\" id=\"radio_slider1_slide2\" name=\"slider1\">\n  <div class=\"slider-arrow previous\">\n    <label for=\"radio_slider1_slide1\">\n      <img src=\"../common/arrow-sm-right.svg\" />\n    </label>\n  </div>\n  <div class=\"content\">\n    <img src=\"../common/casey-horner-8ftuBebG3_M-unsplash.jpg\" loading=\"lazy\">\n  </div>\n  <div class=\"slider-arrow next\">\n    <label for=\"radio_slider1_slide3\">\n      <img src=\"../common/arrow-sm-right.svg\" />\n    </label>\n  </div>\n</div>\n```\n\n<div class=\"content-ad\"></div>\n\n다음 스타일에 대해:\n\n라디오 버튼이 표시되지 않습니다.\n\n한 슬라이드만 표시하려면 체크된 라디오 버튼과 이웃해 있지 않은 한 .content와 .slider-arrow divs를 표시하지 않아야 합니다.\n\n```js\n.slider .slides .slide input[type=radio],\n.slider .slides .slide .slider-arrow,\n.slider .slides .slide .content {\n    display: none;\n}\n\n.slider .slides .slide input[type=radio]:checked~.slider-arrow {\n    display: flex;\n}\n\n.slider .slides .slide input[type=radio]:checked~.content {\n    display: flex;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 코드\n\n## 결과\n\n<img src=\"/assets/img/2024-06-22-ImagesliderusingvanillaHTMLCSSandJavaScript_0.png\" />\n\n## 장단점\n\n<div class=\"content-ad\"></div>\n\n✅ HTML/CSS 만 사용\n\n❌ 점들은 단순히 레이블이므로 선택된 슬라이드의 색인을 구분하는 데 적합하지 않습니다.\n\n❌ 슬라이드 간의 전환은 클릭으로 이루어지며 터치 기기에서 슬라이딩 제스처를 활용하지 못합니다.\n\n# 2. 앵커와 링크를 사용하여 스크롤 슬라이더\n\n<div class=\"content-ad\"></div>\n\n이 솔루션에서는 라디오 버튼이 제거되었고, 선택을 위해 레이블 대신 앵커 링크를 사용하게 되었습니다.\n\n```js\n<div class=\"slider\" id=\"slider1\">\n    <div class=\"slides\">\n        <div class=\"slide\" id=\"slider1_slide1\">\n            <div class=\"content\">\n                <img src=\"../common/werner-sevenster-JuP0ZG0UNi0-unsplash.jpg\">\n            </div>\n        </div>\n        <div class=\"slide\" id=\"slider1_slide2\">\n            <div class=\"content\">\n                <img src=\"../common/casey-horner-8ftuBebG3_M-unsplash.jpg\" loading=\"lazy\">\n            </div>\n        </div>\n        <div class=\"slide\" id=\"slider1_slide3\">\n            <div class=\"content\">\n                <img src=\"../common/laura-smetsers-H-TW2CoNtTk-unsplash.jpg\" loading=\"lazy\">\n            </div>\n        </div>\n    </div>\n    <div class=\"slider-nav\">\n        <a href=\"#slider1_slide1\"><img src=\"../common/dot.svg\" /></a>\n        <a href=\"#slider1_slide2\"><img src=\"../common/dot.svg\" /></a>\n        <a href=\"#slider1_slide3\"><img src=\"../common/dot.svg\" /></a>\n    </div>\n</div>\n```\n\nCSS 부분에서는 모든 슬라이드가 .slides 컨테이너 안에 표시되고 수평 스크롤이 활성화되어 있습니다.\n\n```js\n.slider .slides {\n    overflow-x: scroll;\n    scrollbar-width: thin;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n.slide의 너비를 100%로 설정하면 컨테이너의 너비가 자식 슬라이드들 사이에 공유됩니다. 각 슬라이드가 최소한 100%의 너비를 차지하려면 .slide 요소에 \"min-width: 100%\"을 사용하는 것이 좋습니다.\n\n![이미지](/assets/img/2024-06-22-ImagesliderusingvanillaHTMLCSSandJavaScript_1.png)\n\n스크롤 부드러움과 스크롤 위치의 적절한 정렬(자석 효과처럼)를 위해서 다음 속성들을 추가해야 합니다:\n\n```js\n.slides {\n    scroll-behavior: smooth;\n    scroll-snap-type: x mandatory;\n}\n\n.slide {\n    scroll-snap-align: center;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 코드\n\n## 장단점\n\n✅ HTML/CSS만 사용\n\n✅ 수평 스크롤을 통해 터치 기기에서 슬라이딩 제스처의 이점을 누릴 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n❗ 이전 및 다음 버튼의 경우, 가로 스크롤 동작 때문에 그냥 각 슬라이드에 바로 연결하는 것은 방지되어 있습니다. 그렇지 않으면 슬라이드와 함께 가로로 이동하여 결과물이 보기 좋지 않다.\n\n❗ 이 해결책의 경우, 점들은 단순히 링크입니다. 첫 번째 해결책과 마찬가지로 선택된 슬라이드의 위치를 구분하기에 적합하지 않습니다.\n\n❗ 슬라이드 선택을 위해 앵커를 사용하면, 이러한 앵커를 클릭하면 페이지의 세로 스크롤도 영향을 받습니다. 사용자들은 가로 스크롤을 위해 그러한 동작을 기대하지 않습니다. 또한, 앵커의 사용은 브라우징 히스토리에도 영향을 줍니다. 다시 말하지만, 이러한 동작은 그냥 슬라이더를 위해서는 지나치게 많은 것입니다.\n\n# 3. JavaScript를 사용하여 스크롤 슬라이더 만들기\n\n<div class=\"content-ad\"></div>\n\n이 솔루션에서는 수평 스크롤이 유지됩니다. .slider-nav에는 이제 라디오 버튼과 이전/다음 화살표가 포함될 것입니다.\n\n```js\n<div class=\"slider\" id=\"slider1\">\n    <div class=\"slides\">\n        <div class=\"slide\">\n            <div class=\"content\">\n                <img src=\"../common/werner-sevenster-JuP0ZG0UNi0-unsplash.jpg\">\n            </div>\n        </div>\n        <div class=\"slide\">\n            <div class=\"content\">\n                <img src=\"../common/casey-horner-8ftuBebG3_M-unsplash.jpg\" loading=\"lazy\">\n            </div>\n        </div>\n        <div class=\"slide\">\n            <div class=\"content\">\n                <img src=\"../common/laura-smetsers-H-TW2CoNtTk-unsplash.jpg\" loading=\"lazy\">\n            </div>\n        </div>\n    </div>\n    <div class=\"slider-nav\">\n        <div class=\"slider-arrow previous\">\n            <img src=\"../common/arrow-sm-right.svg\" />\n        </div>\n        <div class=\"radios\">\n            <input type=\"radio\" id=\"radio_slider1_slide1\" name=\"slider1\" checked=\"checked\">\n            <input type=\"radio\" id=\"radio_slider1_slide2\" name=\"slider1\">\n            <input type=\"radio\" id=\"radio_slider1_slide3\" name=\"slider1\">\n        </div>\n        <div class=\"slider-arrow next\">\n            <img src=\"../common/arrow-sm-right.svg\" />\n        </div>\n    </div>\n</div>\n```\n\n다음과 같이 JavaScript가 사용될 것입니다:\n\n- 이전 또는 다음 화살표를 클릭하면 스크롤바 위치가 업데이트되어 이전 또는 다음 슬라이드로 이동합니다: arrowClicked().\n- 라디오 선택(점)이 변경되면, 스크롤바 위치도 그에 따라 업데이트됩니다: radioChanged().\n- 스크롤바 위치가 업데이트되면(터치 디바이스 스크롤링), 라디오 버튼의 선택 및 이전 및 다음 화살표의 표시가 업데이트됩니다: scrolled().\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction arrowClicked(event, direction) {\n    var slides = event.target.parentElement.parentElement.parentElement.getElementsByClassName('slides')[0];\n    slides.scrollLeft += direction * slides.scrollWidth / slides.childElementCount;\n}\n\nfunction radioChanged(event) {\n    var radio = document.getElementById(event.target.id);\n    var radioIndex = [...radio.parentElement.children].indexOf(radio);\n    var slides = radio.parentElement.parentElement.parentElement.getElementsByClassName('slides')[0];\n    slides.scrollLeft = radioIndex / slides.childElementCount * slides.scrollWidth;\n}\n\nfunction scrolled(event) {\n    var id = event.target.parentElement.id;\n    var slides = document.getElementById(id).getElementsByClassName('slides')[0];\n    var scrollRatio = slides.scrollLeft / slides.scrollWidth;\n\n    var radioId = 'radio_' + id + '_slide';\n    var size = slides.childElementCount;\n\n    for (let i = 1; i <= size; i++) {\n        if (scrollRatio + 0.5 / size < i / size) {\n            document.getElementById(radioId + i).checked = true;\n\n            if (i == 1) {\n                document.getElementById(id).getElementsByClassName('previous')[0].style.visibility = \"hidden\";\n            } else {\n                document.getElementById(id).getElementsByClassName('previous')[0].style.visibility = \"visible\";\n            }\n\n            if (i == size) {\n                document.getElementById(id).getElementsByClassName('next')[0].style.visibility = \"hidden\";\n            } else {\n                document.getElementById(id).getElementsByClassName('next')[0].style.visibility = \"visible\";\n            }\n\n            break;\n        }\n    }\n}\n```\n\n이 함수들을 .html 파일에서 직접 호출할 수 있습니다. 하지만 코드 분리와 재사용성을 높이기 위해 이벤트 리스너를 직접 사용하는 것이 좋습니다.\n\n```js\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n\n    function arrowClicked(event, direction) { ... }\n\n    function radioChanged(event) { ... }\n\n    function scrolled(event) { ... }\n\n    document.querySelectorAll('.slider').forEach(\n        slider => {\n            slider.getElementsByClassName('previous')[0].style.visibility = \"hidden\";\n\n            if (slider.childElementCount < 1) {\n                slider.getElementsByClassName('next')[0].style.visibility = \"hidden\";\n            }\n\n            slider.querySelectorAll('.slider-arrow.previous img')[0].addEventListener(\n                'click', event => arrowClicked(event, -1)\n            );\n\n            slider.querySelectorAll('.slider-arrow.next img')[0].addEventListener(\n                'click', event => arrowClicked(event, 1)\n            );\n\n            slider.addEventListener(\n                'change', event => { radioChanged(event); }\n            );\n\n            slider.getElementsByClassName('slides')[0].addEventListener(\n                'scroll', event => scrolled(event)\n            );\n        }\n    );\n});\n```\n\n## 코드\n\n<div class=\"content-ad\"></div>\n\n## 결과\n\n<img src=\"/assets/img/2024-06-22-ImagesliderusingvanillaHTMLCSSandJavaScript_2.png\" />\n\n## 장단점\n\n❌ 자바스크립트를 사용하면 다른 종속성이 추가되어 유지보수 문제가 늘어날 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n✅ 가로 스크롤로 인해 터치 장치에서 슬라이딩 제스처를 활용할 수 있습니다.\n\n✅ 슬라이드 선택이 유지됩니다 (도트와 화살표 상태가 업데이트됨) - 도트, 화살표 또는 제스처에 의해 스크롤이 시작되었는지에 관계없이.\n\n이미지 테두리 반경에 유의하세요.\n\n이 프로젝트에서 다음과 같은 문제를 마주쳤습니다:\n\n<div class=\"content-ad\"></div>\n\n- \"border-radius\" 속성 사용\r\n- 이미지의 가로세로 비율을 유지하기 위해 \"object-fit: contain\" 사용\r\n- 반응성: 고정된 높이를 유지하고 너비를 가변적으로 유지\n\n이미지가 높이제한이 아닌 너비에 제한되는 경우, border-radius가 사라질 수 있습니다:\n\n<img src=\"/assets/img/2024-06-22-ImagesliderusingvanillaHTMLCSSandJavaScript_3.png\" />\n\n나는 이미지를 프록시 div .content 안에 캡슐화함으로써 이 문제를 해결했습니다:\n\n<div class=\"content-ad\"></div>\n\n\n<div class=\"slide\" id=\"slider1_slide1\">\n    <div class=\"content\">\n        <img src=\"../common/werner-sevenster-JuP0ZG0UNi0-unsplash.jpg\">\n    </div>\n</div>\n\n\nCSS로:\n\n```css\n.slider .slide {\n    min-width: 100%;\n    display: flex;\n    justify-content: center;\n}\n\n.slider .slides .content {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 400px;\n    width: 100%;\n}\n\n.slider .slides .content img {\n    max-width: 100%;\n    max-height: 400px;\n    object-fit: contain;\n    border-radius: 10px;\n}\n```\n\n이미지 출처\n\n\n<div class=\"content-ad\"></div>\n\n- Werner Sevenster: 갈색 목재 울타리 사이 도로\n- Casey Horner: 낮에 초록 산 사이 폭포\n- Laura Smetsers: 나무들이 있는 들판 근처의 물\n- Mathew Waters: 하얀과 파란 구름이 덮인 녹색 나무들","ogImage":{"url":"/assets/img/2024-06-22-ImagesliderusingvanillaHTMLCSSandJavaScript_0.png"},"coverImage":"/assets/img/2024-06-22-ImagesliderusingvanillaHTMLCSSandJavaScript_0.png","tag":["Tech"],"readingTime":12},{"title":"모듈 페더레이션에서 범위 지정된 스타일 관리하는 방법","description":"","date":"2024-06-22 03:46","slug":"2024-06-22-ManagingScopedStylesinModuleFederation","content":"\n\n<img src=\"/assets/img/2024-06-22-ManagingScopedStylesinModuleFederation_0.png\" />\n\n현대 웹 개발 세계에서, 마이크로 프론트엔드가 점점 더 인기를 얻고 있습니다. 마이크로 프론트엔드를 가능하게 하는 주요 기술 중 하나는 Webpack의 Module Federation입니다. 이 기능을 통해 다른 Webpack 빌드가 런타임에서 함께 작동하고 코드를 공유할 수 있습니다. 그러나 Module Federation 애플리케이션에서 CSS를 관리하는 것은 어려운 과제일 수 있습니다.\n\n이 글에서는 우리가 이러한 CSS 도전 과제를 어떻게 처리했는지 설명하겠습니다. 우리가 사용한 전략과 개발한 사용자 정의 PostCSS 플러그인을 공유할 것입니다. 우리의 접근 방식을 공유함으로써, 우리의 마이크로 프론트엔드 프로젝트에서 비슷한 문제에 직면한 다른 개발자들에게 도움이 되기를 희망합니다.\n\n# CSS 도전적 과제\n\n<div class=\"content-ad\"></div>\n\nCSS에 대해 이야기할 때, 전통적인 스타일 포함 방법은 갈등과 일관성 부족으로 이어질 수 있습니다. 이는 여러 팀이 다른 CSS 방법론, 전처리기 또는 프레임워크를 사용할 수 있는 모듈 연합 설정에서 특히 문제가 될 수 있습니다. 주요 도전 과제는 다음과 같습니다:\n\n- CSS 범위 격리: 서로 다른 마이크로 프론트엔드 간의 스타일 충돌을 피하는 것.\n- CSS 로딩 순서: 스타일이 올바른 순서로 로드되도록 보장하는 것.\n- 공유 스타일: 서로 다른 마이크로 프론트엔드 간에 공유되는 일반적인 스타일을 관리하는 것.\n\n저희 프로젝트에서는 Tailwind CSS 프레임워크를 사용하고 있었습니다. Tailwind를 마이크로 프론트엔드 애플리케이션에 통합할 때, 원치 않는 화면이 발생하는 충돌이 있었던 일이 있습니다.\n\n# 초기 해결책: 접두사 추가\n\n<div class=\"content-ad\"></div>\n\n가장 간단한 해결책은 각 클래스명에 접두사를 추가하는 것이었습니다. Tailwind의 구성에서 접두사를 추가할 수 있는 옵션이 있습니다:\n\n```js\nmodule.exports = {\n  prefix: 'app1-',\n  darkMode: ['class'],\n  content: ['./app/**/*.{js,ts,tsx,html}', './src/**/*.{js,ts,tsx,html}']\n}\n```\n\n그러나 이 방식으로 구성하려면 모든 클래스명을 접두사로 시작하도록 변경해야 했습니다:\n\n```js\n<!-- 변경 전 -->\n<div className=\"flex gap-3 mb-2 w-full\"/>\n\n<!-- 변경 후 -->\n<div className=\"app1-flex app1-gap-3 app1-mb-2 app1-w-full\"/>\n```\n\n<div class=\"content-ad\"></div>\n\n이 접근 방식은 작동했지만 코드 작성과 유지 관리가 어려워졌어요. 예를 들어, 접두사를 추가하는 걸 잊고 이런 경우에 이슈를 찾으려고 했어요. 우리는 다른 해결책이 필요했어요.\n\n# 우리의 해결책: 사용자 정의 PostCSS 플러그인\n\n더 우아하게 이 문제를 해결하기 위해 우리는 모든 CSS 선택기를 특정 부모 선택기로 래핑하는 사용자 정의 PostCSS 플러그인을 개발했어요. 이렇게 함으로써 스타일이 특정한 마이크로 프런트엔드에 대해 스코프가 지정되어 애플리케이션의 다른 부분과 충돌하는 것을 방지했어요.\n\n## 사용자 정의 PostCSS 플러그인 예시\n\n<div class=\"content-ad\"></div>\n\n우리가 만든 사용자 정의 PostCSS 플러그인을 보여드릴게요:\n\n```js\n// postcss.config.js\nconst tailwindcss = require('tailwindcss');\nconst wrapSelector = (opts = {}) => ({\n  postcssPlugin: 'wrap-selector',\n  Once(root) {\n    root.walkRules((rule) => {\n      if (!rule.selectors) return rule;\n      rule.selectors = rule.selectors.map((selector) => `${opts.wrapper} ${selector}`);\n    });\n  },\n});\nwrapSelector.postcss = true;\n\nmodule.exports = {\n  plugins: ['postcss-preset-env', tailwindcss, wrapSelector({ wrapper: '#app1-id' })],\n};\n```\n\n## 작동 방법\n\n- 플러그인 정의: wrapSelector 함수는 PostCSS 플러그인으로 정의됩니다. opts 객체를 입력값으로 받아들이는데, 이 객체에는 기존 CSS 선택자 주변에 감쌀 부모 선택자인 wrapper 속성이 포함되어 있습니다.\n- 규칙 탐색: Once 메서드는 모든 CSS 규칙을 탐색합니다. 선택자가 있는 각 규칙마다 해당하는 wrapper와 함께 접두어를 붙인 새 선택자로 매핑합니다.\n- PostCSS 설정: 이 플러그인은 postcss-preset-env 및 tailwindcss와 같은 다른 플러그인과 함께 PostCSS 구성에 포함됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 모듈 연합에서의 사용법\n\n이 사용자 지정 PostCSS 플러그인을 모듈 연합 설정에서 사용하려면 다음 단계를 따르세요:\n\n- PostCSS 구성: 위에 표시된대로 사용자 지정 플러그인이 포함된 PostCSS 구성을 확인하십시오.\n- 스코프 스타일 적용: CSS 선택자를 래핑하여 마이크로 프론트엔드 애플리케이션에서 스타일이 적절히 스코프화되도록합니다.\n\n## 웹팩에서의 구성 예시\n\n<div class=\"content-ad\"></div>\n\n웹팩 구성에 PostCSS 플러그인을 통합하는 방법은 다음과 같습니다:\n\n```js\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: ['style-loader', 'css-loader', 'postcss-loader'],\n      }\n    ],\n  },\n};\n```\n\n## 리액트 컴포넌트에서의 예시 사용법\n\n```js\nimport React from 'react';\n\nconst App = () => {\n  return (\n    <div id=\"app1-id\">\n      <h1 className=\"text-2xl font-bold\">안녕하세요, App 1에서 인사드립니다</h1>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\nModule Federation 애플리케이션에서 CSS를 다루려면 범위 격리, 로딩 순서 및 공유 스타일을 신중히 고려해야 합니다. 위에서 소개한 것과 같이 커스텀 PostCSS 플러그인을 활용하여 CSS를 효과적으로 관리하고 스타일이 개별 마이크로 프론트엔드에 적절하게 스코프되도록 할 수 있습니다. 이 접근 방식을 통해 마이크로 프론트엔드 애플리케이션에서 모듈식이며 충돌이 없는 CSS 아키텍처를 유지할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-22-ManagingScopedStylesinModuleFederation_0.png"},"coverImage":"/assets/img/2024-06-22-ManagingScopedStylesinModuleFederation_0.png","tag":["Tech"],"readingTime":4},{"title":"가로 스크롤 테이블에서 테이블 헤더 고정하는 방법","description":"","date":"2024-06-22 03:45","slug":"2024-06-22-Fixingatableheaderonahorizontallyscrollingtable","content":"\n\n\n![image](/assets/img/2024-06-22-Fixingatableheaderonahorizontallyscrollingtable_0.png)\n\nYou would think this is easy. But it really isn’t.\n\n# Chapter 0: The environment\n\nThis entire post is based on a React application, so while it’s not mandatory, it would help if you had at least basic knowledge of React and React Hooks.\n\n\n<div class=\"content-ad\"></div>\n\n# 장 1: 초기 문제\n\n저희가 최근 작업한 프로젝트에서 맞닥뜨린 매우 구체적인 문제가 있었습니다: 클라이언트가 대형 테이블을 원했습니다.\n\n대형이라고 무슨 뜻일까요? 제가 본 테이블 중에는 15개 이상의 열이 있는 것도 있고 화면보다 훨씬 더 넓은 것도 있었습니다. 운이 좋게도 이번에 다룬 테이블은 그중 하나는 아니었지만, 사용 가능한 공간보다는 더 넓었습니다.\n\n![이미지](/assets/img/2024-06-22-Fixingatableheaderonahorizontallyscrollingtable_1.png)\n\n<div class=\"content-ad\"></div>\n\n이와 더불어, 표에 쉽게 스크롤할 수 있는 버튼이 필요했습니다.\n\n이를 달성하기 위해 표를 화면의 너비의 일정 비율(예: 화면 너비의 80%)로 고정한 `div`로 감싼 다음, 버튼 몇 개와 스크롤링 기능을 추가했습니다. 스크롤링 함수는 래퍼(wrapper)의 스크롤 위치를 변경하는 방식으로 작동합니다. 스크롤링 함수는 다음과 같이 보였습니다:\n\n<img src=\"/assets/img/2024-06-22-Fixingatableheaderonahorizontallyscrollingtable_2.png\" />\n\n이를 통해 가로 스크롤이 가능하고 터치패드가 없는 경우에도 스크롤할 수 있는 버튼이 있는 멋진 표가 만들어졌습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Image](https://miro.medium.com/v2/resize:fit:1400/1*6xTzUdpHHNCkKTkS5PWENQ.gif)\n\nThis was good, and working as expected.\n\n# Chapter 2: 새로운 요구 사항이 발생하다\n\n이 상태의 표가 승인되고 운영 환경에 배포되었습니다. 사용자 중 일부가 헤더를 상단에 고정하여 스크롤할 때 헤더를 유지하도록 요청하기 시작했습니다. 이렇게 하면 각 값을 확인하기 위해 열 이름을 왔다갔다 스크롤할 필요 없이 어떤 값인지 쉽게 인식할 수 있을 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n우리의 첫 번째 충동은 대부분의 사람들이 할 것이라고 생각하는 것이었습니다: 테이블의 thead 요소에 position: sticky를 추가했습니다.\n\n![이미지](/assets/img/2024-06-22-Fixingatableheaderonahorizontallyscrollingtable_3.png)\n\n이게 정말 이렇게 간단할 수 있나 싶으신가요? 그것은 그렇습니다. 이렇게 할 때 어떤 일이 벌어지는지 확인해보세요:\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*KBjRnzusCS-VdO3C-doD9A.gif)\n\n<div class=\"content-ad\"></div>\n\n테이블 요소들은 효과적으로 position: sticky 속성을 갖고 있지만 조금 스크롤하면 화면을 벗어냅니다.\n\nCSS 사양에 따르면:\n\n여기서 문제는 다음과 같습니다:\n\n- .layout__content이 스크롤됩니다.\n- .table__wrapper는 스크롤되지 않습니다.\n- .table thead는 .table_wrapper에 대해 sticky 속성을 갖습니다.\n\n<div class=\"content-ad\"></div>\n\n우리가 원했던 것은 .table thead가 .layout__content에 대해 sticky하게 되는 것이었습니다. 이것은 불가능한데, .table__wrapper에는 오직 overflow-x만 지정되어 있어도 여전히 overflow 속성이 있기 때문에 .table thead가 그것에 붙어버립니다.\n\n# Chapter 3: 첫 번째 접근 방식\n\n그래서 명세를 고려하여, .layout__content에서 overflow-x를 제거해보고 결과를 확인해봅시다.\n\n<img src=\"/assets/img/2024-06-22-Fixingatableheaderonahorizontallyscrollingtable_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n그럼 무엇이 일어날까요?\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*BN3b0lj6txdVX7w0LsJvgQ.gif)\n\n그래서 작동한 것 같군요... 아니죠?\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*iQPnhfp3bjC5QGndmaE1Nw.gif)\n\n<div class=\"content-ad\"></div>\n\n앗, 이런! 스크롤 버튼이 작동을 멈췄네요. 게다가 이제 표를 스크롤하면 제목을 포함한 전체 페이지가 스크롤되는 문제가 발생했어요. 그런 건 예상치 못한 일이에요.\n\n하지만, 어쨌든! 우리의 헤더는 이제 고정되어 있어요!\n\n# Chapter 4: Don’t tell me what to do!\n\n그래서 우리는 문제에 대한 해결책을 찾아 (그리고 머리를 긁으면서) 꽤 오랜 시간을 보냈는데요: 자바스크립트와 CSS를 사용하자는 해결책을 찾았답니다!\n\n<div class=\"content-ad\"></div>\n\n기본 아이디어는 다음과 같아요:\n\n- 표의 헤더가 어디에 있는지 확인해 봅시다.\n- 사용자가 어느 정도 스크롤했는지 확인해 봅시다. a. 사용자가 헤더 시작 부분 아래로 스크롤했다면, thead 요소를 위로 유지하도록 번역합시다. b. 그렇지 않다면, 표 헤더에서 translate 속성을 제거합시다.\n\n이 앱에서 React를 사용했기 때문에 실제 DOM 요소를 추적하기 위해 일부 ref를 활용했어요.\n\n아래처럼 코드를 작성해보았는데요 (재사용성을 위해 훅으로 작성했습니다):\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-22-Fixingatableheaderonahorizontallyscrollingtable_5.png\" />\n\n아래 코드를 분해해 봅시다:\n\n우선, 테이블 래퍼(wrapper)용과 테이블 헤더용 두 개의 ref를 선언합니다.\n\n테이블 자체 대신 테이블 래퍼에 대한 ref를 선언하는 이유에 대해 궁금해 할 수 있습니다. 이는 코드 아래쪽에서 사용자가 얼마나 스크롤했는지 계산하기 위해 위치 지정(positioning)을 사용하는데, offsetTop은 부모에 상대적이므로 테이블은 항상 부모에 대해(offsetTop) 0인 값을 갖습니다. 래퍼는 스크롤 요소의 직계 자식이어야 합니다(우리의 경우 layout__content 요소).\n\n\n<div class=\"content-ad\"></div>\n\n그럼, 스크롤 요소에 이벤트 리스너를 추가하는 역할을 맡은 useEffect 훅을 작성합니다. 스크롤할 때 적절히 반응할 수 있도록 설정합니다.\n\n그렇다면 '적절히 반응한다'는 무엇을 의미할까요? 헤더의 위치를 스크롤 요소와 비교해야 하지만 이동할 것이기 때문에 실제로 테이블의 위치를 확인해야 합니다. 여기서 테이블 래퍼를 사용하는 것이죠. 해당 요소는 콘텐츠 요소와 비교하여 이동하지 않기 때문입니다. 그 후에 부모 요소가 헤더 위치를 지나쳤는지 확인하여, 그렇다면 해당 스크롤 위치 차이 (스크롤 위치 - 헤더 위치)로 해당 요소를 변환합니다. 스크롤 위치가 헤더 위치보다 위에 있다면 해당 translate 속성을 제거합니다.\n\n또한, 이벤트 리스너를 제거하는 것을 기억하는 것도 중요합니다. 그렇지 않으면 응용 프로그램의 다른 섹션으로 이동한 후 더 이상 존재하지 않는 요소를 참조할 수 있어 응용 프로그램이 크래시할 수 있습니다. 우리의 useEffect 안에 그 작업을 수행하는 함수를 반환하여 이 문제를 해결합니다.\n\n그래서, 작동했나요?\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*51AviR697AWxTnCS6QjquQ.gif)\n\n네! 100% 완벽하지는 않아요, 헤더가 조금씩 점프할 수 있지만, 그건 이 블로그 게시물의 범위를 벗어나는 문제에요.\n\n하지만 개발 도구에서 등장하는 것이 있어요:\n\n![image](/assets/img/2024-06-22-Fixingatableheaderonahorizontallyscrollingtable_6.png)\n\n<div class=\"content-ad\"></div>\n\n해당 링크를 따라가면 Firefox가 우리가 하는 것에 대해 position: sticky를 사용하는 것을 권장하는 것을 볼 수 있어요.\n\n음, Firefox야, 우리가 원하는대로 작동한다면 position: sticky를 사용할 거에요.\n\n# 최종 생각\n\n이 문제는 작업하기 정말 재미있었지만, CSS 명세가 이를 고려해주면 좋을 것 같아요. \"sticky-anchor\"라는 속성이 있고 값으로 \"ancestor\" 또는 \"screen\"을 사용할 수 있다면 좋을 것 같아요. ancestor는 현재 동작을 유지하고 기본값이 되며, screen은 전체 화면만을 고려할 것 같아요. 그렇다면 우리는 모든 코드를 건너뛰고 다음과 같은 CSS만 가질 수 있을 거에요:\n\n<div class=\"content-ad\"></div>\n\n아래는 Markdown 형식으로 테이블 태그 변경한 것입니다.\n\n\n![이미지](/assets/img/2024-06-22-Fixingatableheaderonahorizontallyscrollingtable_7.png)\n\n또한, 이 방법은 가로 스크롤 헤더에서 일부 득독이 발생할 수 있으므로, 100% 완벽한 해결책이 필요한 경우 이벤트 루프 및 애니메이션 루프를 찾아보는 것이 좋습니다.\n","ogImage":{"url":"/assets/img/2024-06-22-Fixingatableheaderonahorizontallyscrollingtable_0.png"},"coverImage":"/assets/img/2024-06-22-Fixingatableheaderonahorizontallyscrollingtable_0.png","tag":["Tech"],"readingTime":6}],"page":"26","totalPageCount":157,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":1},"__N_SSG":true}