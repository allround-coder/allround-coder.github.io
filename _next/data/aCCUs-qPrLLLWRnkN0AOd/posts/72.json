{"pageProps":{"posts":[{"title":"Django vs Nodejs Python이 웹 개발 전쟁에서 밀리고 있다?","description":"","date":"2024-05-18 21:24","slug":"2024-05-18-DjangovsNodejsIsPythonLosingtheWebDevelopmentWar","content":"\n\n웹 개발에 관한 이야기를 할 때, 선택할 수있는 코딩 언어와 프레임 워크가 많이 있습니다. 두 가지 인기있는 옵션은 파이썬 기반의 Django와 JavaScript 기반의 Node.js입니다.\n\nDjango와 Node.js는 각각 강점과 약점이 있으며, 개발자들은 종종 어느 쪽이 더 나은 선택인지 논의하곤 합니다. 이 기사에서는 성능, 개발 도구 및 인기를 기준으로 Django와 Node.js를 비교하여 파이썬이 Node.js에 웹 전쟁에서 밀릴 가능성에 대해 더 자세히 살펴볼 것입니다.\n\n# Django: 강력한 파이썬 기반 웹 프레임워크\n\n<div class=\"content-ad\"></div>\n\n# 장고란 무엇인가요?\n\n장고는 Python으로 작성된 고수준 오픈 소스 웹 프레임워크입니다. 2003년에 만들어졌으며 이후 인스타그램, 핀터레스트, 모질라와 같은 회사들이 사용하는 가장 인기 있는 웹 개발 프레임워크 중 하나가 되었습니다.\n\n장고는 \"건전지 포함\" 방식으로 유명하며, 개발자에게 다양한 도구와 라이브러리를 제공하여 복잡한 웹 응용 프로그램을 빠르고 효율적으로 구축할 수 있습니다. 이는 데이터 모델, 사용자 인터페이스 및 비즈니스 로직을 분리하는 Model-Template-View (MTV) 아키텍처 패턴을 따르므로 프로젝트를 보다 쉽게 유지 및 확장할 수 있습니다.\n\n# 성능과 확장성\n\n<div class=\"content-ad\"></div>\n\n웹 개발에서 주요 관심사 중 하나는 성능과 확장성입니다. 이 측면에서 Django는 신뢰할 만한 선택임이 입증되었습니다. Python 프로그래밍 언어 위에 구축되어 있어 안정성과 확장성으로 유명합니다.\n\nDjango에는 성능을 향상시키는 강력한 캐싱 시스템이 있습니다. 자주 액세스되는 데이터를 메모리에 저장함으로써 성능을 향상시킵니다. 또한 대규모 데이터 처리를 위한 데이터베이스 수평 분할을 가능케 하는 내장된 데이터베이스 샤딩 지원도 제공합니다.\n\n# 개발 도구\n\nDjango에는 복잡한 웹 응용 프로그램을 개발하는 데 도움이 되는 다양한 개발 도구가 함께 제공됩니다. 내장된 관리자 인터페이스를 통해 데이터 모델 및 사용자 인증을 쉽게 관리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n장고에는 데이터베이스 작업을 간단하게 만들어주고 SQL 쿼리를 작성할 필요 없이 하는 강력한 ORM (Object-Relational Mapper)이 있습니다. 또한 견고한 테스트 프레임워크도 갖추고 있어 코드에 대한 테스트를 쉽게 작성하고 실행할 수 있습니다.\n\n# Node.js: 인기 있는 JavaScript 기반 개발 솔루션\n\n# Node.js란?\n\nNode.js는 개발자가 JavaScript를 사용하여 서버 측 응용 프로그램을 만들 수 있게 해주는 오픈 소스, 크로스 플랫폼 JavaScript 런타임 환경입니다. 2009년에 만들어졌으며 속도와 확장성 때문에 인기를 얻고 있습니다.\n\n<div class=\"content-ad\"></div>\n\nNode.js는 이벤트 기반 및 논블로킹 I/O 모델을 사용하여 가벼우면서 효율적입니다. 또한 1백만 개 이상의 패키지를 제공하는 패키지 관리자인 npm을 통해 다양한 활발한 커뮤니티를 갖고 있습니다.\n\n# 성능 및 확장성\n\nNode.js는 빠르고 확장성이 우수하여 실시간 애플리케이션을 개발하는 인기 있는 선택지입니다. Node.js는 단일 스레드 이벤트 루프를 사용하며, 이를 통해 다수의 동시 연결을 처리하면서 다른 작업의 실행을 차단하지 않습니다.\n\n또한 Node.js는 내장된 클러스터 모듈을 갖고 있어 여러 CPU 코어에 애플리케이션을 쉽게 확장할 수 있습니다. 이로써 높은 성능과 확장성을 갖춘 웹 애플리케이션을 개발하기에 우수한 선택이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 개발 도구\n\nNode.js에는 웹 응용 프로그램을 빌드하는 개발자들에게 도움이 되는 다양한 개발 도구가 있습니다. Node.js에는 웹 서버를 쉽게 만들 수있게 해주는 내장 HTTP 모듈이 있습니다.\n\n또한 Node.js에는 1 백만 개 이상의 패키지에 액세스할 수있는 강력한 패키지 관리자인 npm이 있습니다. 이러한 패키지를 사용하면 사용자 인증, 데이터베이스 통합 등과 같은 애플리케이션에 기능을 추가할 수 있습니다.\n\n# Django 대 Node.js: 비교\n\n<div class=\"content-ad\"></div>\n\n# 성능\n\n성능 측면에서, Django와 Node.js는 각각의 강점을 가지고 있습니다. Django는 안정성과 확장성으로 유명하여 대규모 복잡한 웹 애플리케이션을 구축하는 믿을 수 있는 선택지입니다.\n\n반면에 Node.js는 속도와 확장성으로 유명하여 실시간 애플리케이션을 구축하는 인기 있는 선택지입니다. 그러나 Node.js는 Django만큼 안정적이지는 않으며, 애플리케이션의 안정성과 신뢰성을 보장하기 위해 추가 노력이 필요할 수 있음을 유의해야 합니다.\n\n# 개발 도구\n\n<div class=\"content-ad\"></div>\n\nDjango와 Node.js는 웹 애플리케이션을 개발하는 데 도움이 되는 다양한 개발 도구를 제공합니다. Django에는 내장된 관리자 인터페이스, ORM 및 테스팅 프레임워크가 있고, Node.js에는 내장된 HTTP 모듈과 견고한 패키지 관리자인 npm이 있습니다.\n\n하지만 Django의 \"전부 포함\" 접근 방식은 개발자가 제삼자 패키지에 의존하지 않고도 복잡한 애플리케이션을 쉽게 구축할 수 있도록 다양한 도구와 라이브러리에 액세스할 수 있습니다.\n\n# 인기도\n\n인기 측면에서 Node.js가 Django보다 약간 우세합니다. 2020년 Stack Overflow 개발자 설문 조사에 따르면 JavaScript는 가장 일반적으로 사용되는 프로그래밍 언어로, 개발자 중 67.7%가 사용 중입니다.\n\n<div class=\"content-ad\"></div>\n\n비교적으로 Python은 개발자의 41.7%가 사용하는 세 번째로 가장 널리 사용되는 언어입니다. 이는 JavaScript가 웹 개발 뿐만 아니라 프론트엔드 개발에도 사용되어 더 다목적 언어로 만드는데 기인할 수 있습니다.\n\n# 결론: Python이 Node.js에게 웹 전쟁에서 밀릴까?\n\n결론적으로, Python이 Node.js에게 웹 전쟁에서 밀리고 있는 것은 아닙니다. Node.js가 인기 측면에서 약간의 우위를 지녔을지라도, Django의 안정성, 확장성 및 \"all-inclusive\" 접근 방식은 복잡한 웹 애플리케이션을 구축하는 믿을만한 선택으로 만듭니다.\n\n게다가, Python은 웹 개발뿐만 아니라 다양한 응용 분야에 사용할 수 있는 다목적 언어입니다. 따라서, Node.js가 실시간 애플리케이션을 개발하는 데 인기 있는 선택일지라도, Python은 웹 개발 분야에서 아직도 강력한 경쟁자입니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n요약하자면, Django와 Node.js 모두 장단점이 있으며 두 가지 중 어느 것을 선택할지는 최종적으로 프로젝트의 특정 요구 사항에 달려 있습니다. Django는 대규모 복잡한 웹 애플리케이션을 구축하는 데 안정적인 선택이며, Node.js는 실시간 애플리케이션을 구축하는 인기 있는 선택지입니다.\n\n최종적으로, Django와 Node.js 중 어떤 것을 선택해야 하는지는 프로젝트의 구체적인 요구 사항을 기반으로 결정해야 하며, 두 언어 모두 자체적으로 성공적인 것으로 입증되었습니다.","ogImage":{"url":"/assets/img/2024-05-18-DjangovsNodejsIsPythonLosingtheWebDevelopmentWar_0.png"},"coverImage":"/assets/img/2024-05-18-DjangovsNodejsIsPythonLosingtheWebDevelopmentWar_0.png","tag":["Tech"],"readingTime":4},{"title":"Deno에 대해 좋아하고 싫어하는 점","description":"","date":"2024-05-18 21:22","slug":"2024-05-18-WhatILoveandDontLoveAboutDeno","content":"\n\n![이미지](/assets/img/2024-05-18-WhatILoveandDontLoveAboutDeno_0.png)\n\n2018년에는 자바스크립트를 위한 Node 런타임 환경을 만든 Ryan Dahl이 JSConf에서 'Node.js에 대한 후회하는 10가지'라는 강연을 했습니다. 기술의 창시자가 자신의 발명품 중 일부 주요 기능에 대해 후회한다는 것은 드물죠. 이 강연을 아직 보지 않으셨다면 강력히 추천합니다. 그는 Node의 존재 하의 결핍 사항을 강조하며, 그 중 일부는 개발자로서 우리가 기능으로 간주하는 것들도 있습니다.\n\n강연에서 그는 V8을 사용하지만 Rust로 만들어진 새 런타임 환경인 Deno도 소개합니다. 당시에는 이를 그의 취미로 보았는데, 완전히 새로운 런타임 환경을 만드는 것을 취미로 삼는 Ryan Dahl입니다. 그럼에도 불구하고, Deno의 소개로 거의 즉시 Deno가 Node를 대체할 것인가라는 질문을 던지는 수천 개의 기술 기사가 생겨났습니다.\n\n간단한 답은... 아마 그렇습니다.\n\n<div class=\"content-ad\"></div>\n\n# Deno에서 사랑하는 다섯 가지 특징\n\n저는 작은 엔지니어 팀과 함께 오픈 소스 도구를 개발하면서 Deno 생태계에서 긴 시간을 보냈습니다. 우리는 커뮤니티에 기여하는 것이 흥미로워서 일부 참여했습니다. 저희 도구는 개발자가 프로덕션 수준 애플리케이션에서 메모리 누수를 식별하는 데 도움을 줍니다. 이제 Node에서 여러 해 동안 가지고 있던 이러한 종류의 도구입니다. 첫 릴리스 끝에 Deno가 제공하는 이 특징들이 눈에 띄었습니다.\n\n## package.json과 node_modules 없음\n\nnpm, package.json 및 불필요한 node_modules 폴더와 작별 인사하세요. 만약 당신이 Node 개발자라면, 아마도 이러한 것들이 Node의 기능이라고 생각할 것입니다. 하지만 사실 npm과 package.json은 `애플리케이션 의존성을 쉽게 공유하기 위해 Node와 별도로 생성되었습니다. 실제로 node_modules는 많은 문제를 일으켰습니다.\n\n<div class=\"content-ad\"></div>\n\n예를 들어, 풀스택 JavaScript나 TypeScript로 작성하고 있고 React와 Node를 사용하는 경우, 컴퓨터 파일 시스템 전역에 모듈을 설치하는 node_modules 폴더들이 많이 있을 수 있습니다. 이 폴더들 중 많은 폴더가 정확히 동일한 모듈을 포함하고 있을 수 있습니다.\n\n![이미지](/assets/img/2024-05-18-WhatILoveandDontLoveAboutDeno_1.png)\n\nDeno는 다른 접근 방식을 취합니다. 웹을 모방하려고 합니다. 웹 상에서 모듈의 주소를 가리키는 방식으로 모듈을 가져옵니다. 아래는 Deno에서 Oak 프레임워크(Express.js와 같은 RESTful API를 구축하는 도구)를 가져오는 예제입니다.\n\n```js\nimport { Application, Router } from \"https://deno.land/x/oak@v11.1.0/mod.ts\";\n```\n\n<div class=\"content-ad\"></div>\n\n이제 패키지 JSON 파일이 필요하지 않으며 프로젝트 저장소에 node_modules 폴더를 npm 설치할 필요가 없습니다. 대신에 이와 같은 분산된 스니펫으로 웹에서 모듈을 직접 프로젝트에 가져올 수 있습니다.\n\n아마도 스스로 다음과 같이 생각하고 있을 것입니다. 이러한 모듈을 포함하는 사이트들이 다운되면 어떻게 될까요? 걱정하지 마세요. Deno는 코드를 처음 실행할 때 이러한 모듈을 컴퓨터에 캐시합니다. 또는 실행하기 전에 터미널에서 모듈을 직접 설치할 수도 있습니다. 이점은 이 파일이 한 번만 캐시된다는 것입니다. 이를 통해 node_modules 불필요한 쓰기가 모두 제거됩니다.\n\n## Out-of-the-Box TypeScript\n\n개인적으로 자바와 C++로 시작한 개발자로서 TypeScript의 열렬한 팬입니다. Ryan Dahl도 마찬가지입니다. TypeScript는 파일을 타입 검사하고 종종 잘못 작성된 코드에서 발생하는 귀찮은 오류를 제거해줍니다. 이 작업은 어떤 것을 실행하기 전에 이루어집니다. 이는 제품을 생산에 도달할 때 발생 가능한 문제를 최소화하고 있는지 확인하는 검사입니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Deno Provides TypeScript Integration](/assets/img/2024-05-18-WhatILoveandDontLoveAboutDeno_2.png)\n\nDeno는 즉시 TypeScript 통합을 제공합니다. 반면에 Node는 TypeScript 통합을 다룰 패키지를 또 가져와야 한다는 번거로움이 있습니다. 또한 TypeScript에 대한 변환 도구를 구성해야 합니다. Deno에서는 이렇게 꼬일 필요가 없습니다. 이는 Deno에서 Node보다 빠르게 TypeScript 프로젝트를 시작할 수 있음을 의미합니다.\n\n만약 TypeScript를 극도로 혐오한다면(당신을 판단하고 있습니다), Deno에서 순수 JavaScript를 작성할 수도 있습니다. 타입스크립트가 언어의 슈퍼셋이기 때문에 Deno에서도 JavaScript를 처리할 수 있습니다(하지만 정신을 바로잡으세요).\n\n## 표준 라이브러리\n\n\n<div class=\"content-ad\"></div>\n\nDeno가 제공하는 표준 라이브러리에 대해 얘기하려고 하지 마세요. 이 프로젝트를 만들 때 우리 팀에게 표준 라이브러리가 큰 도움이 되었어요. 주로 Node 개발자로서, 우리는 처음에 GUI 프론트엔드와 통신하기 위해 서드파티 WebSocket 라이브러리를 사용하여 개발자 응용 프로그램의 메모리 통계를 그래프로 그리는 프로젝트를 시작했어요.\n\n![이미지](/assets/img/2024-05-18-WhatILoveandDontLoveAboutDeno_3.png)\n\n마치 Node 개발자들이 자주 경험하는 것처럼, 오픈소스 모듈들은 많은 버그가 있고 문서가 거의 없었어요. 고장난 도구에 대해 많이 고민한 후, 우리는 Deno의 표준 WebSocket 라이브러리로 전환했고 문제가 즉시 해결되었어요.\n\nNode는 최소주의 환경을 목표로 했고, 이것에 성공했어요. 매우 작은 표준 라이브러리를 가지고 있어요. 많은 프레임워크가 매일 사용되고 있지만 오픈소스이며 업데이트나 유지 보수가 되지 않고 있어요. 혹은, 일부는 그 업데이트가 믿기 어렵게 오래 걸리고 있어요 (Express v5.0, 당신을 보고 있어요). Deno가 작은 표준 도구 세트를 유지하는 것은 모듈이 작동하고 문서화가 잘 되어 있으며 필요할 때 업데이트되는 개발자들에게 매우 중요해요.\n\n<div class=\"content-ad\"></div>\n\n## 빌드 도구 없음\n\nNode를 사용 중이라면 Webpack을 사용하거나 사용해 본 경험이 있는 가능성이 99%입니다. 솔직히 이야기하자면, Webpack은 대단합니다... 때로는 그렇지 않을 때도 있습니다. 이 말은 개발자의 관점에서 한 것이죠. Webpack은 파일의 종속성 그래프를 생성하고 JSX/TSX를 변환하며 코드를 압축하고 난독화하는 등 많은 중요한 일을 처리합니다.\n\n![Image](/assets/img/2024-05-18-WhatILoveandDontLoveAboutDeno_4.png)\n\n한편, Webpack 오류를 해결하려고 머리를 맞댄 적이 여러 번 있습니다(결국 내 로더 두 개의 순서를 바꿔야 했던 것으로 밝혀졌죠). 이런 경우가 단 한 번뿐이 아니었습니다. Webpack은 새로운 개발자든 경험이 풍부한 개발자든 모두 골치 아프게 하는 요인입니다. 온라인에서 몇몇 분노에 가득한 게시물을 보세요(시청 주의). 혹은 스택 오버플로우에 올라온 4만 개가 넘는 Webpack 관련 질문을 훑어보세요.\n\n<div class=\"content-ad\"></div>\n\nDeno와 협업을 시작할 때 추가 빌드 도구가 필요하지 않다는 사실에 열광했습니다. 웹팩, Vite, Babel, Rollup, Gulp 없이도 deno compile만으로 충분했어요. 실제로 GUI 작업에서는 프론트엔드를 위한 설정이나 빌드 단계가 전혀 필요하지 않은 Deno Fresh 프레임워크를 사용했습니다. 그러면 Deno Deploy로 이어집니다.\n\n## Deno Deploy\n\nDeno와 관련된 가장 마음에 드는 기능 중 하나인 Deno Deploy입니다. 환경의 일부는 아니지만 Deno Deploy를 통해 웹에 애플리케이션을 손쉽게 배포할 수 있습니다.\n\n<img src=\"/assets/img/2024-05-18-WhatILoveandDontLoveAboutDeno_5.png\" />\n\n<div class=\"content-ad\"></div>\n\n장난 아니에요 — 한번 시도해보세요. 새로운 Github 레포지토리를 만들고 Deno Fresh 보일러플레이트를 한 줄의 터미널 명령어로 추가하고, 10분 이내에 deno.dev의 엣지에 배포할 수 있어요. 그런 다음, Github 레포지토리에 대한 모든 업데이트가 [앱 이름].deno.dev에 몇 초만에 나타날 거에요.\n\nDeno Deploy에 대한 많은 멋진 기능이 있지만, 단지 개발 경험의 관점에서 보더라도, 배포에서 불필요한 복잡함을 제거해주는 놀라운 도구에요.\n\n# Deno의 좋지 않은 부분들\n\nDeno 환경을 정말 즐겼지만, 위에서 강조한 기능들을 갖고 있더라도 몇 가지 눈에 띄는 문제와 귀찮은 점들이 있었어요.\n\n<div class=\"content-ad\"></div>\n\n## 버그, 버그, 버그\n\n그들에게 너무 많은 비난을 할 수는 없어요 — Deno는 새로운 도구이고 그 개발자들은 커뮤니티에 어떤 기능들이 불안정하다고 경고했습니다. 그럼에도 불구하고 Deno에는 개발이 빠르게 진행되는 코드베이스의 잘못 때문이 아닌 매우 엉성한 문제들이 있었습니다.\n\n![이미지](/assets/img/2024-05-18-WhatILoveandDontLoveAboutDeno_6.png)\n\n우리 팀에게 가장 큰 문제는 표준 Deno 함수 중 하나인 Deno.memoryUsage가 잘못된 라벨이 지정된 변수를 반환했다는 것이었습니다. 그들은 resident set size에 대한 값을 보고했지만 실제로는 커밋 된 힙 크기를 측정하는 V8 함수에서 파생된 수였습니다. 이들은 매우 다른 값이었고, 우리 팀은 숫자들이 이해되지 않는 이유를 알아내기 위해 급하게 일하는 날들을 보냈습니다. 우리는 우리 탓인 줄 알았는데, 결국 Deno에서 그랬던 것이었습니다. 아직 해결되지 않은이 문제 티켓을 제출했습니다.\n\n<div class=\"content-ad\"></div>\n\n## 보안 기능이 조금 귀찮네요\n\nDeno를 만들 때 Ryan Dahl이 한 보안 결정을 이해하고 존중합니다. 그러나 개발 중에 '— allow-read' 또는 '— allow-net' 플래그를 잊어버리면 Deno가 끝없이 계속해서 50가지 다른 읽기 또는 쓰기 권한을 요청하는 것이 매우 귀찮다고 느꼈습니다. 우리는 이러한 플래그를 스크립트에 넣어 해결할 수 있었지만, 개발 초기에는 이것이 특히 중복된 선택이라고 생각했습니다.\n\n## 문서가 어째서 Node의 것보다 읽기 어려운지\n\nNode의 문서보다 더 나쁜 문서를 만드는 방법을 정말 모르겠지만, Deno는 그랬습니다. 그래서 Deno의 표준 라이브러리가 매우 중요하다고 말한 좋은 것들을 다 잊어버리세요. 비록 그것이 중요하긴 하지만, 그들은 그것 중 아무것도 잘 문서화하지 않았습니다. Deno 팀에게 크레딧을 줄 테니, 이 환경에 대해서는 아직 초기 단계라는 점을 고려해주세요. 그러나 그들에게 문서화를 개선해 달라고 호소하기도 합니다. 개발자들은 실제 기술적인 문제에 직면하기 전에 표준 라이브러리의 기본 구문으로 씨름해야 할 필요가 없어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 역외 npm 호환성\n\n이 문제는 좋은 부분이나 나쁜 부분 중에 포함되지는 않지만, 내게는 아직 결정되지 않은 문제입니다. Deno에 대한 가장 큰 비판 중 하나는 많은 npm 라이브러리가 Deno 환경에서 완전히 접근할 수 없다는 것이었습니다. 기존 프로젝트를 Node에서 Deno로 전환하는 데는 이것이 엄청난 문제입니다.\n\n의존성을 어떻게 처리할까요? Deno의 저용량 사용율을 지적하는 거의 모든 기사들이 이 문제를 주목하였습니다.\n\n![이미지](/assets/img/2024-05-18-WhatILoveandDontLoveAboutDeno_7.png)\n\n<div class=\"content-ad\"></div>\n\n그러나 이 기사 맨 위에 링크된 Ryan Dahl의 비디오에서는 Deno를 이전 Node 모듈과 호환되지 않도록 만들 것이라고 주장했었습니다. 그는 그렇게 하면 그냥 Node를 다시 만드는 것과 같을 것이라고 믿었습니다. 그러나 문제가 하나 있었습니다: 그는 그렇게 했습니다. 우리가 오픈 소스 툴을 개발 중이었던 동안 Deno는 지난 몇 달 동안 npm 호환성을 안정화했습니다.\n\n이 전환에 대해 어떻게 느껴야 할지 잘 모르겠습니다. Deno는 이전보다 더 새로운 프레임워크가 등장하는 등 혁신적인 프레임워크가 많았습니다. 개인적으로 혁신을 좋아하고, Ryan Dahl의 발표에서 그의 의견에 동의합니다. - 역호환성을 설정함으로써, 그는 Deno를 또 다른 Node 버전으로 만들었다고 생각합니다.\n\n솔직히 말해서, Deno의 압력이 Node를 개선하도록 더 가능성이 높은 것 같습니다. 실제로 Node는 올해 초에 이미 HTTPS 임포트를 도입했으므로 이러한 node_modules 문제는 그리 오래 지속되지 않을 것입니다. 제가 주로 Node 엔지니어이기 때문에 그런 것을 희망합니다.\n\nDeno를 직접 사용해보고 어떻게 생각하시는지 확인해보시기를 장려합니다!\n\n<div class=\"content-ad\"></div>\n\n만약 저희의 오픈 소스 도구를 확인하고 싶으시면, Github에서 CLI 도구와 GUI를 찾거나 여기에서 도구를 다운로드할 수 있어요.\n\n읽어주셔서 감사합니다.","ogImage":{"url":"/assets/img/2024-05-18-WhatILoveandDontLoveAboutDeno_0.png"},"coverImage":"/assets/img/2024-05-18-WhatILoveandDontLoveAboutDeno_0.png","tag":["Tech"],"readingTime":7},{"title":"프로트엔드 면접 질문 - Nodejs에서의 이벤트 루프는 무엇인가요?","description":"","date":"2024-05-18 21:21","slug":"2024-05-18-InterviewQuestionWhatisevent-loopinNodeJs","content":"\n\n![이미지](/assets/img/2024-05-18-InterviewQuestionWhatisevent-loopinNodeJs_0.png)\n\n답변 하나: Node.js의 이벤트 루프는 비차단 I/O 작업을 가능하게하는 핵심 구성 요소로, Node.js가 효율적으로 많은 동시 연결을 처리할 수 있도록 합니다.\n\n기본적으로 이벤트 루프는 콜백을 실행하고 I/O 이벤트를 처리하며 타이머를 관리하면서 계속해서 여러 단계를 순환합니다. 파일에서 읽기나 네트워크 요청과 같은 비동기 작업이 시작되면 Node.js는 이 작업을 적절한 시스템 커널이나 스레드 풀로 위임합니다. 작업이 완료되면 콜백 함수가 이벤트 루프에서 실행될 수 있도록 대기열에 들어갑니다. 이 아키텍처는 Node.js가 단일 작업이 완료될 때까지 기다리지 않고 다음 작업으로 이동할 수 있도록하여 Node.js가 매우 반응적이고 확장 가능하게 유지되도록합니다.\n\n(선택사항) 이벤트 루프는 높은 성능의 비차단 어플리케이션을 개발하는 데 중요한 역할을 합니다. 이를 통해 많은 동시 사용자들에게 효율적으로 서비스를 제공할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n답변 둘: Node.js의 이벤트 루프는 코드가 수행하려는 모든 작업을 처리하는 관리자와 같습니다. 하나씩 작업을 수행하고 각 작업이 완료될 때마다 기다리는 대신, Node.js는 이벤트 루프를 사용하여 기다리지 않고 동시에 여러 작업을 관리합니다.\n\n예를 들어, 코드가 파일을 읽거나 웹 요청을 만들도록 요청하는 경우, 이벤트 루프는 이 작업을 도우미(시스템 커널 또는 스레드 풀)에 할당하고 즉시 다음 작업으로 넘어갑니다. 도우미가 작업을 완료하면, 이를 이벤트 루프에 알리고, 해당 결과를 처리하기 위해 적절한 콜백 함수를 실행합니다.\n\n이렇게 함으로써 Node.js는 어떤 작업에도 멈추지 않고 많은 작업을 동시에 처리할 수 있습니다. 이는 Node.js를 웹 서버 및 채팅 앱과 같은 실시간 응용 프로그램을 위해 특히 효율적이고 빠르게 만듭니다.\n\n답변 쓰리: Node.js의 이벤트 루프는 비동기 콜백을 처리하는 단일 스레드 루프입니다. 이벤트 루프는 타이머, 보류 중인 콜백, 유휴, 폴, 체크, 닫는 콜백과 같은 다양한 단계를 연속적으로 순환하며 I/O 작업을 관리하고 콜백 함수를 실행합니다. 비동기 작업이 완료되면 해당 콜백이 대기열에 추가되고, 이벤트 루프는 이러한 콜백을 처리하여 I/O를 블로킹하지 않고 효율적인 동시성을 보장합니다. 이 메커니즘을 통해 Node.js는 최소한의 오버헤드로 다수의 동시 연결을 처리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n- Node.js 이벤트 루프의 단계를 설명할 수 있나요? \n- 이벤트 루프는 비동기 작업을 어떻게 처리하나요? \n- 호출 스택과 이벤트 루프의 차이는 무엇인가요? \n- Node.js에서 이벤트 루프가 타이머를 어떻게 관리하나요? (반드시 알아야 함) \n- 이벤트 큐가 이벤트 루프에서 어떤 역할을 하는가요? \n- Node.js가 이벤트 루프로 비차단 I/O 작업을 어떻게 달성하는가요? \n- process.nextTick() 메소드의 목적은 무엇인가요? (반드시 알아야 함) \n- setImmediate()와 setTimeout()는 이벤트 루프 맥락에서 어떻게 다른가요? (반드시 알아야 함) \n- 이벤트 루프를 디버깅하는 데 중요한 시나리오를 설명할 수 있나요? \n- Node.js에서 libuv 라이브러리와 함께 이벤트 루프가 어떻게 작동하나요? \n- Node.js가 이벤트 루프로 비동기 작업을 어떻게 처리하나요? \n- CPU 집약적 작업을 처리하는 Node.js의 이벤트 루프 동작은 어떻게 되나요? \n- JavaScript 프라미스를 Node.js에서 어떻게 처리하는지 이벤트 루프로 설명할 수 있을까요?","ogImage":{"url":"/assets/img/2024-05-18-InterviewQuestionWhatisevent-loopinNodeJs_0.png"},"coverImage":"/assets/img/2024-05-18-InterviewQuestionWhatisevent-loopinNodeJs_0.png","tag":["Tech"],"readingTime":2},{"title":"2024년 최고의 React Native 드롭다운 컴포넌트 4개","description":"","date":"2024-05-18 21:19","slug":"2024-05-18-Top4ReactNativeDropdowncomponentsin2024","content":"\n\n## 필요에 맞는 최상의 드롭다운 컴포넌트 선택하기\n\n![Drop-down components](/assets/img/2024-05-18-Top4ReactNativeDropdowncomponentsin2024_0.png)\n\n저는 제 프로젝트 중 하나에 가장 적합한 드롭다운 컴포넌트를 찾고 있었습니다. React Native 세계에서는 수많은 npm 드롭다운 패키지가 제공되어 있습니다. 그러나 각 컴포넌트마다 장단점이 있기에 이 중 하나를 선택하는 일은 조금 어려운 작업일 수 있습니다.\n\n그래서 이 글에서는 선호하는 네 가지 드롭다운 컴포넌트에 대해 설명하고 비교하여 여러분이 필요에 맞는 최상의 컴포넌트를 선택하는 데 도움이 되도록 하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n# react-native-dropdown-select-list\n\n이 라이브러리는 약 7개월 전에 출시되었습니다. 그래서 아직 매주 소수의 다운로드를 받고 있지만 npm에서는 매주 다운로드 트렌드가 상승하는 것으로 나타납니다. 이 라이브러리는 정기적으로 업데이트되며 TypeScript도 지원합니다. 패키지의 유지 보수는 이 패키지의 생성자만이 합니다.\n\n주요 구성 요소는 단일 선택을 위한 구성 요소와 다중 선택을 위한 구성 요소 두 가지를 제공합니다. 비활성화된 항목을 명시할 수 있으며 비활성화된 항목의 스타일링을 사용자 정의할 수 있습니다. 그러나 전체 구성 요소를 비활성화할 수는 없습니다.\n\n패키지의 소스 코드를 살펴보면 이것이 완전히 JavaScript로 작성되었음을 알 수 있습니다. 모든 애니메이션은 AnimatedAPI를 사용하여 수행됩니다. 사용자 경험에 좋은 애니메이션이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 패키지 개발자는 맞춤 스타일링을 적용할 수 있는 많은 속성을 제공했기 때문에 개발자가 이점을 취할 수 있습니다.\n\n이 패키지에는 내장된 검색 기능이 포함되어 있습니다. 필요한 경우 비활성화할 수 있으며 검색 필드에 대한 맞춤화도 다양한 구성 요소 속성으로 사용할 수 있습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:688/1*_Y54RZOdMCXkynrLKm_i9Q.gif)\n\n![이미지](https://miro.medium.com/v2/resize:fit:688/1*QDJQGYpNOgC4Vkf3k7VLhw.gif)\n\n<div class=\"content-ad\"></div>\n\n더 많은 정보를 확인하세요.\n\n장점:\n\n- TypeScript 지원\n- 여러 항목 선택 가능\n- 다양한 스타일링 속성 제공\n- 애니메이션 기능 포함\n- 내장된 검색 기능 제공\n- 자주 업데이트되는 패키지 유지보수\n- 라이브러리를 만들 때 네이티브 개발이 필요하지 않음\n- 목록에서 항목 비활성화 가능\n\n단점:\n\n<div class=\"content-ad\"></div>\n\n- 매주 소수의 다운로드만 있습니다. 그렇기 때문에 커뮤니티 지원이 적습니다.\n- 더 높은 수준에서 컴포넌트 비활성화 속성이 없습니다.\n\n# react-native-dropdown-picker\n\n이 패키지는 이전 패키지와 비교했을 때 매주 상당한 다운로드 수를 기록하고 있습니다. 더 많은 사용자 커뮤니티가 있으면 무언가 잘못되었을 때나 지원이 필요할 때 도움이 되는 장점이 있습니다.\n\n여기서 주요 이점 중 하나는 적절한 문서화가 되어 있다는 점입니다. 모든 것이 처음부터 정확하게 설명되어 있어 사용하기 쉽습니다.\n\n<div class=\"content-ad\"></div>\n\n이 패키지는 다중 항목 선택을 지원하며, 그룹화 기능을 제공합니다. 아래 이미지에서 확인할 수 있듯이(react-native-dropdown-picker: Group Selection).\n\n검색 기능 및 아이템을 표시할 준비가 되지 않은 경우 로딩 표시 기능도 제공합니다. 이 라이브러리는 정기적으로 업데이트되며 많은 오픈 이슈들이 존재합니다. 또한 자바스크립트로 작성되었으며 TypeScript를 지원합니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:688/1*QnjXi9zHpE3nIRvtKSn3ug.gif)\n\n![이미지](/assets/img/2024-05-18-Top4ReactNativeDropdowncomponentsin2024_1.png)  \n\n<div class=\"content-ad\"></div>\n\n여기서 더 많은 정보를 확인하세요.\n\n장점:\n\n- TypeScript 지원\n- 다중 및 그룹 선택 기능\n- 잘 구성된 문서\n- 큰 커뮤니티의 지원\n- 빈번한 패키지 유지보수\n- 라이브러리를 생성하기 위해 기본 개발이 필요하지 않음\n- 내장된 검색 및 로딩 기능 포함\n- 다양한 스타일링 속성 제공\n\n단점:\n\n<div class=\"content-ad\"></div>\n\n- 애니메이션이 없습니다\n\n# React Native UI Kitten\n\nReact Native UI Kitten은 React Native 세계에서 가장 인기 있는 UI 프레임워크 중 하나입니다. 그들은 많은 도구를 제공하며 드롭다운 컴포넌트가 그 중 하나입니다. 이 컴포넌트의 이름은 Select입니다.\n\n이 컴포넌트를 사용하면 다중 선택 및 그룹화 기능을 사용할 수 있습니다. 또한 상위 수준에서 컴포넌트를 비활성화하는 데 사용되는 disabled 속성도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 UI 프레임워크는 구성 요소가 작동하는 방법을 보여주는 적절한 문서를 가지고 있습니다. 이 문서에는 작은 비디오, 간단한 코드 스니펫 등이 포함되어 있습니다.\n\nshow, hide, focus, blur 등의 메소드를 사용하여 프로그래밍 방식으로 구성 요소를 조작할 수 있습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:688/1*3FSlfxBfYFfLurDmL9Eomw.gif)\n\n![이미지](https://miro.medium.com/v2/resize:fit:688/1*8UZcgNUAaEshD2_VwB_4_w.gif)\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:688/1*k7FfoTH3YBHPhUiAb0CQzg.gif\" />\n\n자세한 내용은 여기에서 확인하세요.\n\n장점:\n\n- TypeScript 지원\n- 다중 및 그룹 선택\n- 잘 정리된 문서\n- 대규모 커뮤니티의 지원\n- 빈번한 패키지 유지 보수\n- 필요 시 SelectItem에 왼쪽 및 오른쪽 구성 요소 추가 가능\n- 프로그래밍 방식으로 구성 요소의 동작 변경 가능\n\n<div class=\"content-ad\"></div>\n\n단점:\n\n- 애니메이션이 없음\n- 검색 기능이 없음\n\n# native-base\n\nnative-base은 React Native을 위한 인정받는 UI 프레임워크입니다. 드롭다운 컴포넌트는 'Select'라고 불립니다. 아래 이미지를 보면 (native-base: Single Selection) 이 컴포넌트는 위에 언급된 세 가지 컴포넌트와는 매우 다르게 작동합니다.\n\n<div class=\"content-ad\"></div>\n\nnative-base 버전 2에서 드롭다운 컴포넌트를 Picker라고 부릅니다. 만약 이 컴포넌트가 드롭다운 아이템을 표시할 때 선호되는 동작이라면, 의심 없이 이 컴포넌트를 선택할 수 있습니다.\n\n이 컴포넌트는 내장 검색 기능, 그룹 선택 및 다중 선택을 제공하지 않습니다. 또한 제공하는 모든 도구를 다루는 잘 쓰여진 문서가 있습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:344/1*tX_klmqeGI223aCTTOaigw.gif)\n\n[더 자세한 내용은 여기를 확인하세요.](#)\n\n<div class=\"content-ad\"></div>\n\n장점:\n\n- TypeScript 지원\n- 잘 정리된 문서\n- 큰 커뮤니티의 지원\n- 빈번한 패키지 유지관리\n- 애니메이션 포함\n- 구성 요소의 동작을 프로그래밍적으로 변경 가능\n- 드롭다운 아이콘 변경 유연성\n\n단점:\n\n- 검색 기능 없음\n- 다중 선택 불가능\n\n<div class=\"content-ad\"></div>\n\n## 마무리\n\n이 글에서는 React Native 세계에서 가장 인기 있는 4개의 드롭다운 컴포넌트를 소개했습니다. 각각의 장단점이 있습니다. 선호도에 따라 원하는 것을 선택할 수 있습니다.\n\n이 글에서 소개되지 않은 다른 드롭다운 라이브러리들도 많이 있으니 필요에 맞는 최적의 것을 찾아 보세요.\n\n여러분이 더 쉽게 선택할 수 있도록 최고의 드롭다운 컴포넌트를 선택하는 데 도움이 되었기를 바랍니다. 이와 같은 더 많은 글을 기대해 주세요. 읽어 주셔서 감사합니다!\n\n<div class=\"content-ad\"></div>\n\n표 태그를 마크다운 형식으로 변경해주세요.","ogImage":{"url":"/assets/img/2024-05-18-Top4ReactNativeDropdowncomponentsin2024_0.png"},"coverImage":"/assets/img/2024-05-18-Top4ReactNativeDropdowncomponentsin2024_0.png","tag":["Tech"],"readingTime":5},{"title":"제발 코드를 미래지향적으로 작성하지 마세요","description":"","date":"2024-05-18 21:18","slug":"2024-05-18-Dontfuture-proofyourcode","content":"\n\n<img src=\"/assets/img/2024-05-18-Dontfuture-proofyourcode_0.png\" />\n\n당신이 생각하는 일이 일어날지 여부는 중요하지 않아요.\n\n개발자들은 미래를 대비하기를 좋아해요. 미래의 필요에 맞춰 코드를 작성하고 싶어해요. 하지만 좋은 소식은: 인간들은 미래를 예측하는 데 그리 능하진 않아요.\n\n이것은 중요한 교훈이에요. 미래 예측에 따른 코딩은 종종 시간 낭비일 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n# 함정이에요!\n\n경험이 풍부한 엔지니어든 초보 엔지니어든 함정에 걸리기 쉽습니다.\n\n그들은 다음에 무엇이 올지를 추측하려고 합니다. 그들은 현재의 디자인에 이러한 변화를 작업합니다.\n\n실제로 이는 데이터베이스에 몇 가지 추가 필드를 추가하거나, 기존 로직을 성능을 높이기 위해 리팩토링하거나, 미래 요청을 대비하여 재사용 가능한 리소스를 생성하는 것을 의미합니다.\n\n<div class=\"content-ad\"></div>\n\n여기가 중요한 거야...\n\n그 추가 필드, 논리 변경, 그리고 재사용 가능한 자원들은 무료로 제공되지 않아.\n\n시간과 노력이 소요될 거야. 예상되는 요구 사항을 보상하기 위해 디자인을 계속 수정하면서 처음 버전을 전달하는 데 더 많은 시간이 걸릴 거야.\n\n안타깝게도, 그 추가적인 노력은 아마도 낭비될 거야.\n\n<div class=\"content-ad\"></div>\n\n# 당신이 생각하는 것을 알고 있지 않아요\n\n지금 당신은 아마도 미래에 비즈니스가 필요로 할 것을 이해했다고 생각할지도 모르겠어요.\n\n하지만 제가 말해드릴게요, 아무리 당신이 이해하고 있다고 생각해도, 실제로는 그렇지 않아요.\n\n운이 좋다면, 앞으로 필요한 것을 예측하는 데에 성공하실 수 있을지도 모르지만, 그 가능성은 10회 중 1회일 뿐이에요.\n\n<div class=\"content-ad\"></div>\n\n다른 9번의 경우에는 노력을 낭비하고 복잡성을 늘렸는데, 그러한 설계는 변경되거나 필요하지 않을 수 있다.\n\n이는 배워야 할 어려운 교훈입니다. 많은 시니어 엔지니어조차도 이를 내재화하지 못합니다. 우리는 다시 빠져드는 함정에 자꾸 빠져들곤 합니다. 어떤 미래상을 예측하며 코드를 작성합니다.\n\n절대 실현되지 않을 상상 속 미래입니다.\n\n# 어떻게 전개될지 혹시 살펴봅시다\n\n<div class=\"content-ad\"></div>\n\n당신이 아름다운 내구성 있는 기능을 개발했거나, 아니면 미완료된 엔드포인트 세트로 미래 기능에 대한 기반을 마련했을지도 몰라요.\n\n모든 것이 그 방향으로 향하는 것 같습니다. 그렇게 완벽히 해냈습니다! 미래 필요성을 예측하고 그를 우아하게 처리해 준 것으로 당신은 영웅이 될 거예요.\n\n하지만 갑자기 비즈니스 우선 순위가 바뀌었어요.\n\n- 회사 회의에서 CEO가 최신 대규모 이니셔티브를 발표했어요. 앞으로 미래를 대비하여 작성한 코드가 필요해 질 것 같은 제품을 단종할 거예요.\n- 아니면, 고객이 제품 팀에 피드백을 공유했을 때, 당신이 구축하고 있는 기능이 실제로 필요 없다면서요. 그들은 내부 도구로 처리할 수 있어요.\n- 아마도 판매 팀이 당신이 구축한 기능이 유용하지만 좋은 방법이 없어 이에 대한 요금을 지불하려고 하지 않는다면서 발견했다면, 그 기능에 대한 개발은 우선순위가 낮아져야 해요.\n- 다른 팀이 비슷한 기능 세트를 가지고 있어요. 당신이 자체 버전을 구축하고 있는 것을 알게 되면, 그들은 기능 세트를 통합하려고 할 거예요. 기존 사용 사례와 처음에 계획한 것과 다른 다양한 요구 사항을 지원해야 할 거예요.\n- 현재 프로젝트에 문제가 없는 경우도 있을 수 있지만, 더 시급한 다른 문제가 발생했을 수도 있어요. 몇 달 동안 팀이 집중해야 할 긴급 문제가 생기고, 솔루션을 완전히 구축할만큼의 힘을 다시 모으기 어려울 수 있어요. 항상 미완성 상태로 남아 있을 거예요.\n\n<div class=\"content-ad\"></div>\n\n그러나 미래를 위한 아름다운 코드와 디자인은 막상 현실로 구현되지 못할 수도 있어요.\n\n# YAGNI!\n\nYou aren’t gonna need it — 그것이 당신의 자조가 되어야 합니다.\n\n너무 멀리 앞서 계획하려고 하면 위험하고 비생산적일 수 있어요. 그 코드가 정말 유용할지도 의문일 거예요.\n\n<div class=\"content-ad\"></div>\n\n그것은 기술적 부채가 될 것입니다. 당신의 팀이 한동안 반만 유지될 수밖에 없는 낡은 부분입니다.\n\n유혹적일 수 있지만, 제발! 아무도 요청하지 않는 것을 만들지 마십시오.\n\n요구 사항에 맞게만 빌드하고 그만두세요.\n\n# 대신 해야 할 일\n\n<div class=\"content-ad\"></div>\n\n한 번 더 내 생각을 말해볼게요:\n\n작은 변경 사항을 빠르게 배포하는 것이 최선의 방법입니다.\n\n무엇인가를 미래 대비할 때, 스스로에게 물어보세요. \"어떻게 하면 이것을 더 간단하게 만들 수 있을까?\" \"나중에 x가 필요하게 될 것이다...\" 라고 생각하게 되면, 바로 당신의 미래 자신이 간단한 코드 베이스를 원할 것이라는 것을 깨닫게 될 겁니다.\n\n가장 중요한 것은 간단한 것을 만드는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n미래의 나는 아직 요구 사항을 이해하지 못한 사람이 작성한 과장된 가짜 해결책을 원하지 않을 것입니다.\n\n시간 여행 기계가 없다면 미래 요구 사항을 완전히 알 수 없어요!\n\n그러니, 오늘 가지고 있는 요구 사항에 맞게 개발하세요. 그리고 멈추세요.\n\n# 간단하다고 쉬운 게 아니에요\n\n<div class=\"content-ad\"></div>\n\n위 요구사항을 충족시키는 가장 간단한 코드를 작성하는 것은 속기 하지만 어렵습니다.\n\n해당 문제를 깔끔하게 모델링하고 각 솔루션의 각 부분을 이해하기 쉽게 해야 합니다. 우아한 코드는 명확해 보이지만 실제론 많은 고민이 필요합니다.\n\n코드를 미래에 대비해 작성하는 대신, 확장 가능한 코드를 작성하는 것이 최선입니다.\n\n이는 단순한 함수, 명확히 정의된 클래스 및 포괄적인 테스트를 의미합니다. 미래에 새로운 기능이 필요할 때는 어디에 어떻게 추가해야 할지 명확해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n단순함이 해답이에요.\n\n미래를 예측할 순 없으니 시도조차 하지 마세요. 대신, 오늘의 요구사항을 가능한 단순하게 충족시키기 위해 최선을 다하세요.\n\n# 일일 목록\n\n여기서 읽으신 내용이 마음에 드셨나요? 매일 아침 2,000명의 소프트웨어 개발자들을 위해 새로운 글을 쓰고 있어요.\n\n<div class=\"content-ad\"></div>\n\n매일 업데이트를 받아보세요!","ogImage":{"url":"/assets/img/2024-05-18-Dontfuture-proofyourcode_0.png"},"coverImage":"/assets/img/2024-05-18-Dontfuture-proofyourcode_0.png","tag":["Tech"],"readingTime":4},{"title":"자바스크립트에서의 이벤트 처리에 대한 이해","description":"","date":"2024-05-18 21:17","slug":"2024-05-18-UnderstandingtheEventHandlinginJavaScript","content":"\n\n웹 개발 세계에서 JavaScript 이벤트는 동적이고 인터랙티브한 웹 페이지를 만드는 데 중요한 역할을 합니다. 이벤트란 프로그래밍 중인 시스템에서 발생하는 작업 또는 사건으로, 시스템이 알아야 할 필요가 있는 상황이거나 반응해야 하는 상황일 수 있습니다.\n\n![이벤트 처리 이해하기](/assets/img/2024-05-18-UnderstandingtheEventHandlinginJavaScript_0.png)\n\n이벤트는 사용자가 입력을 기반으로 발생시키는 작업이며, 웹 사이트의 상태를 변경하기 위해 어떤 동작을 취할 것입니다. 이벤트에 반응하기 위해 수행하는 단계를 이벤트 처리라고 합니다.\n\n# 이벤트 유형\n\n<div class=\"content-ad\"></div>\n\n다양한 종류의 이벤트와 해당 이벤트 처리기가 있습니다:\n\n- 마우스 이벤트: onclick, onmouseover, onmouseout, onmouseup, onmousedown 등\n- 키보드 이벤트: onkeyup 및 onkeydown\n- 문서/창 이벤트: onload, onunload, onresize 등\n- 양식 이벤트: onfocus, onsubmit, onblur, onchange 등\n\n# 이벤트 처리 방법\n\n## 1. HTML 이벤트 핸들러\n\n<div class=\"content-ad\"></div>\n\nHTML 이벤트 핸들러는 HTML 요소에 추가된 속성으로, 해당 요소에서 특정 이벤트가 발생할 때 실행될 함수를 지정합니다. 이러한 핸들러는 기능이 제한되어 있고 현재 웹 개발에서 권장되지 않습니다. 왜냐하면 인라인 형식이기 때문에 프레젠테이션과 동작이 섞일 가능성이 있기 때문입니다.\n\n```js\n<button onclick=\"alert('안녕, 세계!')\">눌러주세요</button>\n```\n\n# DOM 레벨 이벤트 핸들러\n\nDOM (문서 객체 모델) 레벨 이벤트 핸들러는 DOM 요소의 속성으로, 해당 요소에서 특정 이벤트가 발생할 때 실행될 함수를 할당할 수 있습니다. 이는 HTML 이벤트 핸들러보다 나은 측면이며 동작과 프레젠테이션을 분리합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst button = document.getElementById('myButton');\nbutton.onclick = function() {\n    alert('Hello, world!');\n};\n```\n\n참고: DOM은 다양한 HTML 요소의 트리 구조입니다.\n\n# 이벤트 리스너\n\n이벤트 리스너는 JavaScript에서 이벤트를 처리하는 현대적인 방식입니다. 기존 이벤트 핸들러를 덮어쓰지 않고 요소에 이벤트 핸들러를 첨부할 수 있게 해줍니다. 이벤트 리스너는 이벤트 처리 방식에 대한 유연성과 제어를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n\n```js\nconst button = document.getElementById('myButton');\nbutton.addEventListener('click', function() {\n    alert('Hello, world!');\n});\n```\n\n자바스크립트에는 두 가지 일반적인 내장 이벤트 리스너 메서드가 있습니다: addEventListener 및 removeEventListener. addEventListener() 메서드를 사용하면 요소에 이벤트 핸들러를 첨부할 수 있습니다. 요소에 여러 이벤트 핸들러를 추가할 수도 있습니다. removeEventListener()를 사용하면 특정 요소에서 이벤트 리스너/핸들러를 제거할 수 있습니다.\n\n# 결론\n\n자바스크립트에서 이벤트를 이해하고 처리하는 것은 동적이고 상호작용 가능한 웹 페이지를 생성하는 데 필수적입니다. 이벤트를 사용하면 사용자의 작업에 응답하여 웹 애플리케이션을 더 반응적이고 매력적으로 만들 수 있습니다. HTML 이벤트 핸들러, DOM 레벨 이벤트 핸들러 또는 현대적인 이벤트 리스너를 선택하더라도 각 메서드에는 사용 사례와 이점이 있습니다. 그러나 이벤트 리스너를 사용하는 것이 유연성과 효율적인 여러 이벤트 핸들러를 관리할 수 있는 기능으로 인해 일반적으로 권장됩니다. 이벤트 처리를 숙달하면 웹 애플리케이션의 사용자 경험과 기능을 크게 향상시킬 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경해주세요.","ogImage":{"url":"/assets/img/2024-05-18-UnderstandingtheEventHandlinginJavaScript_0.png"},"coverImage":"/assets/img/2024-05-18-UnderstandingtheEventHandlinginJavaScript_0.png","tag":["Tech"],"readingTime":3},{"title":"제이쿼리 4, 다시 부활할 수 있을까? ","description":"","date":"2024-05-18 21:16","slug":"2024-05-18-jQuery4ANewEra","content":"\n\njQuery, 수십년 동안 무수히 많은 웹사이트를 구동해 온 \"옛날식\" 자바스크립트 라이브러리가 다음 주요 릴리스, jQuery 4.0.0 베타를 향하여 나아가고 있습니다.\n\n![2024-05-18-jQuery4ANewEra_0.png](/assets/img/2024-05-18-jQuery4ANewEra_0.png)\n\n이 릴리스는 jQuery 자체 뿐만 아니라 전체 웹 개발에 있어서 중요한 이정표입니다.\n\n# 2024년에도 jQuery가 중요한 이유\n\n<div class=\"content-ad\"></div>\n\n최근 몇 년 동안 새로운 프레임워크와 라이브러리가 등장했지만, jQuery는 현대 웹 개발에서 중요한 도구로 남아 있습니다.\n\n간단한 구문, 다양한 플러그인 생태계 및 많은 사용자 커뮤니티로, jQuery는 모든 레벨의 개발자들에게 귀중한 도구입니다.\n\n최신 통계에 따르면, 상위 100만 개 사이트 중 약 78%가 여전히 jQuery를 사용하고 있으며, 이는 그 지속적인 인기와 중요성을 입증하는 것입니다.\n\n<img src=\"/assets/img/2024-05-18-jQuery4ANewEra_1.png\" />\n\n<div class=\"content-ad\"></div>\n\n# jQuery 4.0.0 Beta의 주요 기능 및 개선 사항\n\njQuery 4.0.0 베타 릴리스에는 몇 가지 새로운 기능과 개선 사항이 있습니다. 주요 포인트는 다음과 같습니다:\n\n- 최신 JavaScript 기능 지원: jQuery 4.0.0 베타는 ES 모듈, 프로미스, 화살표 함수 등의 최신 JavaScript 구문을 지원합니다.\n- 레거시 브라우저 지원 제거: jQuery 4.0.0 베타에서는 인터넷 익스플로러 11과 같은 구형 브라우저 지원을 중단했습니다. 이 결정으로 인해 라이브러리는 성능 최적화에 집중하고 구형 브라우저에서 사용할 수 없는 최신 웹 API를 활용할 수 있게 되었습니다.\n- 새로운 Rust 기반 미니파이어: jQuery 4.0.0 베타에서는 Rust로 구축된 빠르고 효율적인 미니파이어를 도입했습니다.\n- 성능 및 메모리 사용량 개선: jQuery 팀은 라이브러리의 핵심 코드를 최적화하는 데 많은 노력을 기울여 성능 향상과 메모리 사용량 감소를 이루어냈습니다.\n- 사용되지 않는 API 제거: 내부적으로 사용되지 않는 함수들이 제거되었습니다.\n- focusin/focusout 이벤트 순서 변경: jQuery 이전의 순서와 다른 최신 브라우저 사양을 따릅니다.\n- FormData 지원 추가: jQuery.ajax가 이제 이진 데이터를 자동으로 처리합니다.\n- 자동 JSONP 프로모션 제거: 교차 도메인 요청에 대해 CORS 사용을 장려합니다.\n- Trusted Types 및 CSP 지원 개선: Trusted Types와 콘텐츠 보안 정책 사용 시 보안을 보장합니다.\n- 업데이트된 slim 빌드: Deferreds 및 Callbacks를 제거하여 (대부분의 경우에는 사용되지 않음) 더 작은 크기로 업데이트되었습니다.\n\n![image](/assets/img/2024-05-18-jQuery4ANewEra_2.png)\n\n<div class=\"content-ad\"></div>\n\n# 개발 과정에서 극복한 도전\n\njQuery 팀은 개발 과정 중 다양한 도전을 겪었습니다:\n\n- 역 호환성과 현대화의 균형 맞추기: 새로운 기능을 도입하면서 기존 코드와의 호환성을 유지하는 것은 미묘한 균형을 유지해야 합니다. jQuery 팀은 기존 프로젝트에 변경 사항의 영향을 주의 깊게 고려하고 개발자들을 위한 원활한 업그레이드 경로를 보장하기 위해 노력했습니다.\n- 급변하는 환경에서의 탄력성 유지: 웹 개발 환경은 끊임없이 변화하며 새로운 프레임워크와 라이브러리가 계속 등장합니다. jQuery 팀은 jQuery가 이 동적인 환경에서 여전히 주목할 만하고 경쟁력을 유지할 수 있도록 노력했습니다.\n- 다양한 커뮤니티의 합의 형성: jQuery는 다양한 사용자 커뮤니티를 보유하고 있습니다.\n\n# 추가 정보\n\n<div class=\"content-ad\"></div>\n\n- 이것은 베타 릴리스이므로 최종 릴리스 이전에 일부 버그와 변경 사항이 예상됩니다.\n- 최종 릴리스 전에 전체적인 업그레이드 안내서가 게시될 예정입니다.\n- jQuery 이전 버전에서 마이그레이션을 돕는 jQuery Migrate 플러그인을 사용할 수 있습니다.\n- 다운로드 옵션에는 CDN 및 npm 패키지가 포함되어 있습니다.\n- jQuery 웹사이트에서 더 자세한 정보를 확인할 수 있습니다: https://jquery.com/\n\n# 결론: jQuery에 밝은 미래가 기대됩니다\n\n현대 JavaScript 기능에 적극적으로 수용하고 성능을 최적화하며 커뮤니티 요구 사항을 충족시킴으로써 jQuery팀은 개발자들에게 향후 몇 년 동안 유효하고 강력한 도구로 남아있을 것을 보장했습니다.\n\n![이미지](/assets/img/2024-05-18-jQuery4ANewEra_3.png)\n\n<div class=\"content-ad\"></div>\n\n흥미로운 내용이었나요? 👏 좋아요 눌러주세요! 다음 이야기도 가져올 수 있도록 제게 동기부여해주세요!\n\n기술 분야에서 새로운 사람들을 만나는 것을 즐기고 있어요. LinkedIn에서 연락해도 괜찮아요!","ogImage":{"url":"/assets/img/2024-05-18-jQuery4ANewEra_0.png"},"coverImage":"/assets/img/2024-05-18-jQuery4ANewEra_0.png","tag":["Tech"],"readingTime":3},{"title":"개발자의 매일 체크리스트, 딱 3가지만 있어도 우아한 간결함","description":"","date":"2024-05-18 21:15","slug":"2024-05-18-Adevelopersdailychecklistwithonly3itemsiselegantsimplicity","content":"\n\n<img src=\"/assets/img/2024-05-18-Adevelopersdailychecklistwithonly3itemsiselegantsimplicity_0.png\" />\n\n할 일 목록은 종종 쓰레기입니다.\n\n할 일 목록은 항상 길어집니다. 계속해서 달린다는 느낌이 듭니다. 대부분의 개발자들에게 우리는 할 일 목록을 완료하지 못할 것입니다.\n\n그 의미에서 할 일 목록은 의욕을 떨어뜨리는 생산성 도구입니다.\n\n<div class=\"content-ad\"></div>\n\n가장 중요하고 실현 가능한 작업 목록을 추려본다면 어떨까요?\n\n할 일 목록 대신 더 간단한 것을 사용해 본다면 어떨까요? 가장 의미 있는 작업을 완료하도록 도와주는 강제 기능을 사용해 보세요.\n\n# 하루에 1–3개의 항목\n\n할 일 목록 대신 하루에 항목이 손에 쥐어지도록 하는 일일 체크리스트를 제안합니다.\n\n<div class=\"content-ad\"></div>\n\n이 시스템은 당신의 생산성을 혁신할 수 있어요. 왜냐하면 당신이 무엇이 중요한지 결정하도록 강제하기 때문이에요. 나머지는 잊어버릴 수 있어요.\n\n가끔, 가장 중요한 일이 다른 모든 작업을 쉽게하거나 관련이 없게 합니다. 중요한 몇 가지 일에 집중하는 것 — 1에서 3개의 작업 — 당신을 올바른 목표로 향하도록 도와줍니다.\n\n소프트웨어 개발자로써, 이것은 제 하루에 집중을 도와줘요. 모든 불확실성, 요청 및 산만함 중에서 중요한 일을 1~3가지 이룬다면, 그 날은 성공적인 날이에요.\n\n할 일 목록은 의욕을 떨어뜨리지만, 짧은 매일 체크리스트는 자신감을 줘요.\n\n<div class=\"content-ad\"></div>\n\n# 우아한 단순함\n\n시스템은 정말 그렇게 간단합니다.\n\n- 아침에, 또는 전날 저녁에, 1-3가지 가장 중요한 작업을 적어보세요.\n- 작업은 명확하고 범위가 정해져 있어야 합니다. 하루 안에 완료할 수 있어야 합니다.\n- 하루 중에서 리스트를 사용하여 집중할 수 있도록 하세요. 산만함이나 미뤄두기가 들끓을 때, 리스트가 당신에게 무엇을 해야할지 상기시켜줍니다.\n- 하루가 끝날 때 무언가를 처리하지 못했다면, 결정하세요: 내일로 넘길지 OR 그것이 그리 중요하지 않다고 생각되면 리스트에서 삭제하세요.\n\n어느 시점에나, 당신 앞에는 1-3개의 체크리스트 항목만 있습니다.\n\n<div class=\"content-ad\"></div>\n\n복잡한 시스템이나 긴 할 일 목록은 없어요. 할 일을 우선순위를 정하거나 정리할 필요도 없어요. 상태, 태그, 예상 소요 시간 등을 추가할 필요도 없죠.\n\n그저 몇 마디로 된 체크리스트 항목과 체크 상자 하나가 있어요. 완료했는지 안 했는지 뿐이에요.\n\n# 목록 만들기\n\n리스트에 무엇을 넣을지 어떻게 결정하나요?\n\n<div class=\"content-ad\"></div>\n\n대부분은 직감을 신뢰하세요. 특별한 비밀은 없어요. 매일 목록에 올리는 것은 개인적인 결정이에요.\n\n여기 제가 발견한 유용한 힌트가 있어요 — 아침에 기억해야 할 일이 아마도 가장 중요할 거에요.\n\n또 다른 유용한 휴리스틱 — 내가 피해오면서 미뤄왔던 일들은 보통 매일 체크리스트의 주요 후보들이에요.\n\n시간이 지남에 따라 매일 체크리스트를 사용함으로써, 목록을 만드는 데 능력이 향상될 거예요. 가장 중요한 작업에 집중하도록 강제합니다. 시간이 지남에 따라 중요한 작업을 인식하는 데 능력이 향상될 거예요.\n\n<div class=\"content-ad\"></div>\n\n그것은 매우 유용한 기술입니다.\n\n# 예시\n\n지난 몇 주간의 제 일일 목록 중 몇 가지를 여기에 소개합니다.\n\n![개발자의 일일 체크리스트 예시](/assets/img/2024-05-18-Adevelopersdailychecklistwithonly3itemsiselegantsimplicity_1.png)\n\n<div class=\"content-ad\"></div>\n\n![이미지1](/assets/img/2024-05-18-Adevelopersdailychecklistwithonly3itemsiselegantsimppng)\n\n![이미지2](/assets/img/2024-05-18-Adevelopersdailychecklistwithonly3itemselegantsimplicity.png)\n\n(어떤 소프트웨어를 사용하는지에 대한 몇 가지 질문을 받았어요. 목록에 사용하는 도구는 중요하지 않아요. 하지만 이 스크린샷은 코딩 지식 관리에 대한 제 선택인 Obsidian입니다.)\n\n# 세부사항\n\n<div class=\"content-ad\"></div>\n\n저의 스크린샷으로부터 몇 가지 세부 정보를 보여드리겠습니다.\n\n- 매일 목록의 각 항목이 단지 몇 단어로 이루어져 있다는 점을 주목해주세요. 작업을 상기시킬만큼 충분히 짧습니다.\n- 가끔씩, 일일 체크리스트 항목은 다음에 해결해야 할 특정 오류에 집중합니다(보통 전날 어디까지 남겨두었는지의 힌트가 됩니다).\n- 가끔씩, 미래에 중요해질 것 같은 노트나 알림을 포함할 수도 있습니다 — 4월 6일 노트의 \"다음 주\" 섹션 같은 것입니다.\n- 1~3개의 항목을 언급했는데 체크리스트에는 4개 이상의 항목이 나오죠! 변명은 없어요; 오히려 더 집중해야 합니다. 하지만 매일 포스트(즉, 지금 블로그/이메일 목록에서 읽고 계신 내용)는 매일 항목 중 하나입니다. 변경되지 않습니다. 그냥 해야 한다는 것을 상기시키기 위해 목록에 넣은 것뿐이에요.\n- 추가 정보: 매일 체크리스트를 직접 미팅 업데이트에 반영합니다. 어제의 목록을 따라가기만 하면 됩니다. 대개, 미팅 이전에 오늘의 목록도 이미 작성해뒀어요. 그래서 하루의 상태와 목표가 명확하게 정의돼 있습니다.\n\n# 간단한 시스템이 복잡한 것보다 더 나은 결과를 내놓습니다\n\n가끔씩 가장 어리석은 해결책이 종종 가장 좋은 것이라는 것을 발견합니다.\n\n<div class=\"content-ad\"></div>\n\n(아마 그것은 나만 그런 것일지도, 하하.)\n\n내가 도구를 간단하게 만들수록 사용할 확률이 높아진다. 1~3개 항목의 체크리스트가 얼마나 간단한지 알겠죠.\n\n그런데, 이 시스템은 나에게 잘 맞는 것이에요! 당신은 여러분에게 더 나은 방법을 찾아볼 수도 있겠죠. 멋지네요!\n\n여기서 중요한 교훈은, 무엇이든 간에 시스템을 간단하게 유지하는 것이에요. 또한, 매일의 목표는 실현 가능하고 동기부여가 되어야 합니다. 너무 모호하고 풀어내기 어려운 것은 많은 할 일 목록처럼 기운을 빼앗을 뿐이죠.\n\n<div class=\"content-ad\"></div>\n\n# 동기 부여 심리학\n\n이 시스템의 심리학에는 특별한 것이 있어요!\n\n하루에 몇 가지 할 일이라면 달성 가능해 보입니다. 완전히 가능한 것 같아 시작하기 더 쉬워요. 시작만 해도 일을 끝내기 더 쉬울 거예요. 할 일이 1~3개 뿐이라면 미루기가 어떻게 더 어색해 보이죠.\n\n리스트에서 할 일을 체크해 나가는 것도 기분이 좋죠. 그것이 동기 부여죠!\n\n<div class=\"content-ad\"></div>\n\n\"To have your daily list totally checked off at the end of the day feels amazing!\n\nThis aligns with my approach and understanding of working 3 hours per day. By dedicating focused time to complete a few tasks each day, you can make steady progress.\n\nIt's similar to the story of the tortoise and the hare. In the long run, you will outperform those who work inconsistently.\n\n## Daily list\"\n\n<div class=\"content-ad\"></div>\n\n여기에서 읽은 내용이 마음에 드셨나요? 매일 새로운 내용을 2,000명의 소프트웨어 개발자를 위해 작성하고 있어요.\n\n매일 업데이트 받으세요!\n\n---\n\n$5에 미디엄 가입하기 - 모든 미디엄 콘텐츠에 접근하고 제게와 다른 사용자들을 지원해주세요!","ogImage":{"url":"/assets/img/2024-05-18-Adevelopersdailychecklistwithonly3itemsiselegantsimplicity_0.png"},"coverImage":"/assets/img/2024-05-18-Adevelopersdailychecklistwithonly3itemsiselegantsimplicity_0.png","tag":["Tech"],"readingTime":4},{"title":"마케팅은 잊고 멋진 제품을 만드는 데 집중해야하는 이유","description":"","date":"2024-05-17 21:55","slug":"2024-05-17-ForgetAboutMarketingFocusonBuildingAnAwesomeProduct","content":"\n\n\n![Forget About Marketing, Focus on Building An Awesome Product](/assets/img/2024-05-17-ForgetAboutMarketingFocusonBuildingAnAwesomeProduct_0.png)\n\n창업자 여정을 시작하신 분이라면 멋진 제품을 만들고 싶어하는데 이 인용구를 좋아하지 않을 거에요:\n\n또는 이런 인용구를 좋아하지 않을 거에요:\n\n모두가 번거로운 일 없이 제품을 만들고 싶어하는 건 아니죠?\n\n\n<div class=\"content-ad\"></div>\n\n이 기사에서는 인디 개발자가 꿈꾸는 말들을 공유하고 싶어요: 가끔은 자리를 잡고 창작을 시작해야 합니다. 제품을 개선하고 놀라운 것을 만들어내며, 시간에 맡기세요.\n\n## 먼저, 간단한 사이드 노트:\n\n- 나는 부수적으로 프로젝트를 개발하는 개발자입니다.\n- 어떤 로드맵도 지시하는 주주가 없습니다.\n- 내 제품의 성공에 재정적으로 의존하지 않습니다.\n\n다시 말해서, 나는 사이드 프로젝트의 재정적 성공에 의존하지 않으며, 시간에 맡길 수 있어요. 아직은 프로 마케터는 아니고, 마케팅이 중요하다는 것을 알아요. 하지만 여전히 개선을 원했기에 제 제품의 품질에 집중했어요.\n\n<div class=\"content-ad\"></div>\n\n# 이 기사를 작성하게 된 이유는 무엇일까요?\n\n사람들이 얼마나 빨리 마음을 변할 수 있는지 이상하지 않으신가요? 몇 달 전까지만 해도 제는 제 기사에서 SEO의 중요성을 강조했지만, 이제는 때로는 멋진 제품에 집중하는 것이 더 나을 수도 있다고 제안하고 있습니다.\n\n오해가 없길 바랍니다. SEO와 마케팅은 훌륭한 비즈니스를 확장하는 데 필수적입니다.\n\n그러나 제처럼 \"한 사람 회사\"라면 현명하게 우선순위를 정해야 합니다. 과거에 제는 제품 자체를 무시하고 SEO와 마케팅에 너무 많은 시간을 쏟은 경향이 있었습니다.\n\n<div class=\"content-ad\"></div>\n\n가까워보이던 몇 가지가 항상 제대로 작동하지 않았지만, 조기에 수정되어야 했습니다.\n\n만약 풀타임 직장을 가지고 계신다면, 매일 아침 30분을 투자해 SEO 기사를 쓰고, 그것을 Twitter와 LinkedIn에 게시하세요. 그렇게 되면 새로운 기능을 오랜 기간 동안 중단 없이 개발하는 데는 시간이 많이 남지 않을 것입니다.\n\n그래서 지난 몇 달 동안 나는 사용자를 위해 앱을 개선하는 데 모든 노력을 기울였습니다. 여기서 기사를 공유하지 않았고, 트윗하거나 LinkedIn에 게시하지 않았으며, SEO 순위를 높이기 위해 블로그 포스트도 작성하지 않았습니다 - 그냥 앉아서 개발했을 뿐이죠!\n\n# 결과는 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n이 문서를 작성하고 있지 않았다면, 마케팅을 제쳐두고 빌딩에 집중한 선택을 후회하지 않았을 것입니다.\n\n결과가 훌륭하고, 그것을 더 일찍 시작했으면 좋았을 텐데요.\n\n다음은 발생한 일들입니다:\n\n- 웹 하이라이트의 활성 사용자가 40,000명에서 70,000명 이상으로 증가했습니다.\n- Chrome 웹 스토어의 평균 평점이 4.6점에서 4.8점으로 올라갔으며, 1,100개 이상의 평가가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![아이템 목록](/assets/img/2024-05-17-ForgetAboutMarketingFocusonBuildingAnAwesomeProduct_1.png)\n\n크롬 익스텐션 개발 중이에요! 재밌는 건, 자연스럽게 크롬 웹 스토어를 통해 성장해요. 좋은 리뷰는 익스텐션의 순위를 높일 뿐만 아니라 더 많은 트래픽을 유치하고 플랫폼의 SEO 점수를 향상시키죠.\n\n플레이 스토어나 앱 스토어의 앱도 마찬가지에요. 그래서 이 기사는 이 플랫폼에서 앱을 개발하는 인디 개발자에게 가장 관련성이 높다고 말할 수 있어요.\n\n마케팅 노력 없이 다른 SaaS 웹사이트로 트래픽을 유치하는 것은 꽤 어려울 것이라고 봐요.\n\n\n<div class=\"content-ad\"></div>\n\n# 왜 특별한 제품을 만들기에 집중해야 하는 이유\n\n## 확장을 위한 견고한 기반\n\n게리 켈러의 '더 원 타이밍'에서는 다음에 무엇을 해야 할지 결정해야 할 때마다 이 질문을 하라고 합니다:\n\n나는 이 질문을 스스로에게 물어보고, 내 응용 프로그램의 일부 주요 부분을 리팩토링하고 새롭게 개선해야 한다는 결론에 도달했습니다.\n\n<div class=\"content-ad\"></div>\n\n이것은 많은 작업을 의미했습니다. 다른 것에 산만해지지 않도록 몇 시간 동안 집중하여 작업해야 했습니다. 그렇게만 하면 웹 하이라이트를 10만 명 이상의 사용자로 확장하는 기초를 마련하여 내 좋은 평가를 유지하거나 향상시킬 수 있었습니다.\n\n어떻게 이렇게 빨리 일을 해내고 어플리케이션이 기다란 무엇인지와 얼마나 빨리, 오류 없이 좋아진 것을 보니 놀랐습니다. 상대적으로 짧은 시간 안에 앱을 크게 빠르고 사용자 친화적으로 만드는 데 성공했습니다.\n\n1달 후 첫 릴리스 이후, 사용자들이 훨씬 더 만족해하는 것이 분명해졌습니다.\n\n<img src=\"/assets/img/2024-05-17-ForgetAboutMarketingFocusonBuildingAnAwesomeProduct_2.png\" />\n\n<div class=\"content-ad\"></div>\n\n이후에, 전체 웹 앱을 개선하고 완전히 새로운 랜딩 페이지를 만들었어요. 이것은 대학 시절 한참 전에 둘 다 함께 만들었기 때문에 많이 미뤄둔 일이었어요.\n\n![이미지](/assets/img/2024-05-17-ForgetAboutMarketingFocusonBuildingAnAwesomeProduct_3.png)\n\n3개월 이내에 이렇게 중요한 개선을 이뤄낼 수 있다는 것에 정말 놀랐어요.\n\n이러한 상당한 향상들은 이제 앱이 100만 명의 사용자를 위한 준비가 되어 있음을 알게 해줘요, 앞으로는 더 많이 마케팅과 SEO에 집중할 수 있는 완벽한 기반을 제공해 줘요.\n\n<div class=\"content-ad\"></div>\n\n## 훌륭한 소프트웨어에는 내장된 마케팅이 있습니다\n\n저는 3개월 동안 개발에 집중했지만, 간접적으로 마케팅 활동에 참여한 셈이죠.\n\n자주 있는 경우, 잘 구조화된 웹사이트 자체가 마케팅 도구로 작용합니다. 앞서 말했듯이, 저는 Web Highlights의 랜딩 페이지를 새롭게 만들어 서버 측 렌더링(SSR)을 도입했습니다.\n\n이로써 앞으로 제 웹사이트의 Google 순위를 향상시키고 다수의 SEO 이점을 얻을 수 있을 것으로 기대됩니다.\n\n<div class=\"content-ad\"></div>\n\n또한 몇 가지 텍스트를 개선하고 접근성 문제를 해결하여 모든 사람이 쉽게 이용할 수 있는 웹사이트로 만들었습니다.\n\n![image](/assets/img/2024-05-17-ForgetAboutMarketingFocusonBuildingAnAwesomeProduct_4.png)\n\n## 말로만 퍼지는 마케팅\n\n어떤 제품이든 만드는 것이 아니에요. 가장 많은 사용자를 확보하는 제품을 만드는 것이 아니에요. 내 사용자를 위해 최고의 제품을 만들고 싶어요!\n\n<div class=\"content-ad\"></div>\n\n나는 내 제품이 커다란 가치를 지니고 있으며 온라인 연구를 조직하는 방법을 혁신할 잠재력이 있다고 강하게 믿습니다. 따라서 제품이 정말 탁월할 때 사용자들이 그 제품을 추천해줄 것으로 예상되며, 이는 상당한 성장을 견인할 것으로 기대합니다.\n\n![이미지](/assets/img/2024-05-17-ForgetAboutMarketingFocusonBuildingAnAwesomeProduct_5.png)\n\n내가 지향하는 마케팅 방식이다. 그것이 내 앱의 주요 기능들이 무료인 이유일 것이다. 사람들이 연구를 더 향상시킬 수 있도록 하고, 제품을 진심으로 즐기면 다른 훌륭한 기능들에 액세스하기 위해 업그레이드할 수 있기를 희망합니다.\n\n# 최종 생각\n\n<div class=\"content-ad\"></div>\n\n물론 기사 제목은 일부러 도발적으로 작성되었고, 마케팅이 모든 제품에 있어 중요한 요소임을 이해해요.\n\n하지만 가끔은 대중을 대상으로하지 않을지라도 정말 우수한 제품을 갖는 것이 더 중요하다고 생각해요.\n\n사용자 확인은 중요하지만, 백만 명의 사용자를 대상으로 하기 전에 제품이 품질을 희생하지 않고 확장될 수 있는지 확인하는 것이 중요해요.\n\n특히 \"워너 펄스\"(Company of One)로서, 우선순위를 신중히 선택하고 때로는 그냥 가장 좋아하는 일을 하면 돼요: 건설하기.\n\n<div class=\"content-ad\"></div>\n\n읽어 주셔서 감사합니다! 🙏🏻\n\n내 Chrome 확장 프로그램을 어떻게 구축하고 거의 100,000명의 사용자로 확장했는지 더 알고 싶으신가요? 뉴스레터를 구독하거나 LinkedIn과 Twitter에서 저를 팔로우해주세요.","ogImage":{"url":"/assets/img/2024-05-17-ForgetAboutMarketingFocusonBuildingAnAwesomeProduct_0.png"},"coverImage":"/assets/img/2024-05-17-ForgetAboutMarketingFocusonBuildingAnAwesomeProduct_0.png","tag":["Tech"],"readingTime":5},{"title":"브라우저의 로컬 오버라이드 웹 개발자를 위한 안내","description":"","date":"2024-05-17 21:54","slug":"2024-05-17-LocalOverridesintheBrowserGuideforWebDevelopers","content":"\n\n때로는 웹 페이지의 내용을 원본 소스 코드에 액세스하지 않고 빠르게 변경해야 할 때가 있습니다. 테스트, 디버깅 또는 브라우징 경험을 사용자 정의하는 경우 등 여러 가지 이유로 그럴 수 있습니다.\n이 문서에서는 Local Overrides라는 멋진 도구를 사용하는 방법을 소개하겠습니다.\n\n![Local Overrides in the Browser Guide for Web Developers](/assets/img/2024-05-17-LocalOverridesintheBrowserGuideforWebDevelopers_0.png)\n\n## 그것이 왜 필요한가요?\n\n웹 애플리케이션을 개발할 때 특정 페이지의 다양한 측면을 변경하고 테스트해야 할 때가 있습니다. 변경한 내용을 서빙하기 전에 소스 코드를 수정하고 애플리케이션 파일을 재구축하는 옵션이 있습니다. 또 다른 방법으로는 실시간으로 코드를 수정하고 원하는 결과를 얻을 때까지 코드베이스를 변경하지 않고 변경 사항을 즉시 테스트할 수 있습니다.\n이 도구를 사용하면 다음과 같은 작업이 가능합니다:\n\n<div class=\"content-ad\"></div>\n\n- 피드백 — 실제 소스 파일을 수정하거나 웹사이트를 다시 배포할 필요 없이 실시간으로 변경 사항 확인 가능합니다.\n- 실험 — 다양한 스타일, 스크립트 및 HTML로 신속한 실험 가능합니다.\n- 문제 분리 및 오류 수정 — 브라우저에서 직접 작은 문제를 해결하고 테스트한 후 소스 코드에 적용 가능합니다.\n- 데모 관점 — 코드베이스에 영향을주지 않고 데모 중에 고객 요구 사항을 일시적으로 사용자 정의할 수 있습니다.\n\n그리고 그 이외 많은 기능들이 있습니다!\n\n## 이 멋진 도구와 상호 작용하는 방법은 무엇인가요?\n\n시작하려면 모든 파일을 저장할 오버라이드 폴더를 설정해야 합니다. \"Sources\" 탭을 클릭하고 왼쪽 사이드바에서 \"Overrides\"를 선택하세요.\n\n<div class=\"content-ad\"></div>\n\n\n![image 1](/assets/img/2024-05-17-LocalOverridesintheBrowserGuideforWebDevelopers_1.png)\n\n다음 단계는 '오버라이드를 위한 폴더 선택'을 클릭하여 오버라이드 파일을 호스팅할 폴더를 선택하거나 새로 만드는 것입니다. \"chrome_overrides\"라는 새 폴더를 만들었습니다.\nDevTools는 선택한 폴더에 대한 전체 액세스 권한을 요청하여 디스크에 쓰고 해당 폴더 내의 콘텐츠를 저장할 수 있습니다.\n\n![image 2](/assets/img/2024-05-17-LocalOverridesintheBrowserGuideforWebDevelopers_2.png)\n\n참고: Pokemon 웹 사이트에서 보여드리겠지만, 원하는 웹 사이트를 자유롭게 사용해도 괜찮습니다.\n링크: https://pokemon-kde6.vercel.app\n\n\n<div class=\"content-ad\"></div>\n\n웹 사이트의 리소스를 편집하려면 DevTools를 열고 \"네트워크\" 탭으로 이동하십시오 (네트워크 탭은 단순히 예시입니다. 다른 곳에서도 DevTools 내에서 콘텐츠를 재정의할 수 있습니다. 예를 들어 소스 -` 페이지에서), 그런 다음 편집하려는 리소스를 선택하십시오. 제 경우에는 변경 사항을 적용하기 전에 응용 프로그램에서 시험하고 싶어서 수정을 원합니다. CSS 파일을 선택합니다 (어떤 파일이든 될 수 있지만, CSS 파일을 선택했습니다). 이 파일을 마우스 오른쪽 버튼으로 클릭하고 나타나는 메뉴에서 \"콘텐츠 재정의\"를 선택하십시오.\n\n![이미지](/assets/img/2024-05-17-LocalOverridesintheBrowserGuideforWebDevelopers_3.png)\n\n\"콘텐츠 재정의\"를 클릭한 후에는 DevTools의 \"네트워크\" 탭이 저장된 리소스와 함께 \"소스\" 탭으로 리디렉션됩니다.\n\n![이미지](/assets/img/2024-05-17-LocalOverridesintheBrowserGuideforWebDevelopers_4.png)\n\n<div class=\"content-ad\"></div>\n\n지금은, 주요 색상을 변경해보려고 해요. 화면에 변경 사항이 반영되는 것을 확인해 볼까요?\n\nBefore:\n\n![Image](/assets/img/2024-05-17-LocalOverridesintheBrowserGuideforWebDevelopers_5.png)\n\nAfter:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-17-LocalOverridesintheBrowserGuideforWebDevelopers_6.png)\n\n변경 사항이 보이시나요?\n참고: 변경을 완료한 후에는 반드시 저장을 잊지 마세요.\n\n페이지를 새로 고칠 때 웹 사이트 파일을 가져오면 재작성된 내용이 우선합니다. 변경 사항이 더 이상 필요하지 않거나 서버에서 원래 파일을 가져오고 싶다면 \"로컬 재정의 활성화\"를 해제하면 됩니다.\n\n![이미지](/assets/img/2024-05-17-LocalOverridesintheBrowserGuideforWebDevelopers_7.png)\n\n<div class=\"content-ad\"></div>\n\n## 요약:\n\n로컬 오버라이드를 사용하는 것은 여러 가지 이점이 있습니다. 여기에 몇 가지를 살펴보겠습니다:\n\n- 로컬 개발 및 테스트 — 즉각적인 피드백 및 실험.\n- 디버깅 및 문제 해결 — 문제 분리와 오류 수정에 도움이 됨.\n- 고객 데모용 맞춤화 — 임시 맞춤화로 고객 요구 사항 충족.\n\n이 게시물에 소중한 시간을 투자해 주셔서 감사합니다. 읽으시는 동안 즐거워하셨기를 바랍니다.\n즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-05-17-LocalOverridesintheBrowserGuideforWebDevelopers_0.png"},"coverImage":"/assets/img/2024-05-17-LocalOverridesintheBrowserGuideforWebDevelopers_0.png","tag":["Tech"],"readingTime":3}],"page":"72","totalPageCount":157,"totalPageGroupCount":8,"lastPageGroup":20,"currentPageGroup":3},"__N_SSG":true}