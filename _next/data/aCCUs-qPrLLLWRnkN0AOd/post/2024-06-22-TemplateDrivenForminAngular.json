{"pageProps":{"post":{"title":"2024년 최신 Angular에서 템플릿 기반 폼을 사용하는 방법","description":"","date":"2024-06-22 03:32","slug":"2024-06-22-TemplateDrivenForminAngular","content":"\n\n이 기사에서는 템플릿 폼과 언제 템플릿 드리븐 폼을 사용해야 하는지에 대해 안내하겠습니다.\n\n현실적인 예로 병원을 방문할 때 종이를 받아서 기본 정보를 적어야 하는 상황이나 학교 입학 신청서를 작성해야 하는 상황이 있습니다. 이 정보들은 소프트웨어에 업로드됩니다. 따라서 폼은 본질적으로 정보를 수집하는 종이라고 할 수 있습니다. 기술적 관점에서 Angular는 템플릿 드리븐 폼을 제공하여 사물에 대한 정보를 수집하게 됩니다.\n\n참고: Angular에서 폼을 사용하는 경우에는 AppModule에서 FormModule을 반드시 import해야 합니다.\n\n# 템플릿 드리븐 폼\n\n<div class=\"content-ad\"></div>\n\n- 사용하기 쉽습니다\n- 간단한 시나리오에 적합합니다.\n- 복잡한 시나리오에는 권장하지 않습니다.\n- 구문은 이전 버전의 AngularJS와 유사합니다.\n- 템플릿 기반 폼에 사용되는 구문은 양방향 데이터 바인딩 [(NgModel)]로, 최소한의 컴포넌트 코드를 사용합니다.\n- 폼 및 데이터의 자동 추적(앵귤러에서 처리)\n- 템플릿 유효성 검사는 지시어를 통해 검증됩니다.\n- 템플릿 기반 폼의 단위 테스트는 값 변경과 유효성 검사가 비동기적이라는 문제가 있습니다.\n- 데이터 모델은 구조적이지 않습니다.\n- 템플릿 폼에서의 예측 가능성은 비동기적입니다.\n- 폼 유효성 검사는 필드에 보다 많은 유효성 검사 태그를 추가하거나 복잡한 교차 필드 유효성 검사를 추가할수록 폼의 가독성이 떨어집니다.\n\n# 언제 템플릿 기반 폼을 사용해야 하는가:\n\n로그인과 같이 기본적이고 간단한 요구사항을 갖는 앱에서는 템플릿 기반 폼을 사용해야 합니다.\n\n예제 템플릿 기반 폼\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';        // FormsModule 가져오기\n \nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n \n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule                    // Imports 배열에 추가\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n```js\n<form #SingUpForm=\"ngForm\">\n\n// 템플릿에서 변수를 생성합니다. 앵귤러에서는 이를 템플릿 참조 변수라고 합니다\n```\n\n# ngForm이란 무엇인가요?\n\nngForm은 다음을 실행합니다:\n\n\n<div class=\"content-ad\"></div>\n\n- `Form` 지시문에 자체 바인딩\n- 최상위 FormGroup 인스턴스 생성\n- ngModel 지시문이있는 각 자식 컨트롤에 대해 FormControl 인스턴스 생성\n- NgModelGroup 지시문에 대해 각각 FormGroup 인스턴스를 생성\n\n# 템플릿 기반의 FormControl 인스턴스\n\n이들은 firstName, lastName 및 다른 필드입니다. 이들을 formControl 인스턴스에 바인딩해야 합니다. 이는 ngModel 지시문을 사용하여 수행합니다.\n\n```js\n<input type=\"text\" name=\"firstname\" ngModel>\n```\n\n<div class=\"content-ad\"></div>\n\n\n파일을 다음과 같이 수정해주세요. \n\n\n<form #singUpForm=\"ngForm\" (ngSubmit)=\"onSubmit(singUpForm)\">\n \n  <p>\n    <label for=\"firstname\">이름</label>\n    <input type=\"text\" name=\"firstname\" ngModel>\n  </p>\n \n  <p>\n    <label for=\"lastname\">성</label>\n    <input type=\"text\" name=\"lastname\" ngModel>\n  </p>\n \n  <p>\n    <label for=\"email\">이메일</label>\n    <input type=\"text\" id=\"email\" name=\"email\" ngModel>\n  </p>\n \n  <p>\n    <label for=\"gender\">성별</label>\n    <input type=\"radio\" value=\"male\" name=\"gender\" ngModel> 남성\n    <input type=\"radio\" value=\"female\" name=\"gender\" ngModel> 여성\n  </p>\n \n  <p>\n    <label for=\"isMarried\">결혼 여부</label>\n    <input type=\"checkbox\" name=\"isMarried\" ngModel>\n  </p>\n \n  <select name=\"country\" ngModel>\n    <option [ngValue]=\"c.id\" *ngFor=\"let c of countryList\">\n      {c.name}\n    </option>\n  </select>\n \n  <p>\n    <button type=\"submit\">제출</button>\n  </p>\n  \n</form>\n\n\n```typescript\nimport { Component } from '@angular/core';\n \n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = '템플릿 기반 폼';\n \n  countryList:country[] = [\n    new country(\"1\", \"파키스탄\"),\n    new country('2', '아랍에미리트'),\n    new country('3', '미국')\n  ];\n}\n \nexport class country {\n  id:string;\n  name:string;\n \n  constructor(id:string, name:string) {\n    this.id=id;\n    this.name=name;\n  }\n\n onSubmit(contactForm) {\n    console.log(contactForm.value);\n  }\n}\n```\n\n# 내장 검증기\n\n내장 검증기는 필수(required), 최소 길이(minlength), 최대 길이(maxlength), 패턴(pattern)과 같은 HTML5 유효성 검사 속성을 사용합니다. Angular는 이러한 유효성 검사 속성을 해석하고, FormControl 인스턴스에 유효성 검사기 함수를 추가합니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 필수 유효성 검사\n\n필수 유효성 검사는 양식 컨트롤에 비어있지 않은 값이 입력된 경우에만 true를 반환합니다.\n\n# 최소길이 유효성 검사\n\n이 유효성 검사기는 컨트롤 값이 유효성 검사기에 지정된 값보다 적은 수의 문자를 가져서는 안 된다는 것을 요구합니다.\n\n<div class=\"content-ad\"></div>\n\n예를 들어, minlength validator는 사용자 이름 값이 적어도 20자여야 함을 보장합니다.\n\n```js\n<input type=\"text\" id=\"userName\" name=\"userName\" required minlength=\"20\">\n```\n\n# Maxlength Validation\n\n이 Validator는 문자 수가 속성 값 이상으로 초과되지 않아야 함을 요구합니다.\n\n<div class=\"content-ad\"></div>\n\n예를 들어, maxlength 검증기는 사용자 이름 값이 최대 20자까지인지 확인합니다.\n\n```js\n<input type=\"text\" id=\"userName\" name=\"userName\" required maxlength=\"20\">\n```\n\n# 패턴 유효성 검사\n\n이 유효성 검사기는 컨트롤 값이 속성에 제공된 정규식 패턴과 일치해야 함을 요구합니다. 예를 들어, 패턴 ^[a-zA-Z]+$는 문자만 허용됨을 보장합니다 (공백도 허용되지 않음). 이 패턴을 사용자 이름에 적용해 보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n\n# 이메일 유효성 검사\n\n이 유효성 검사기는 제어 값이 유효한 이메일 주소여야 함을 요구합니다.\n\n```js\n<input type=\"text\" id=\"email\" name=\"email\" required email>\n```\n\n<div class=\"content-ad\"></div>\n\n# 유효성 스타일링\n\n모델 기반 폼과 유사하게, 우리는 각 모델 폼 컨트롤의 상태에 접근할 수 있습니다. 이를 위해서는 최상위 폼 그룹을 통해 이동해야 합니다.\n\nngForm 지시자는 최상위 FormGroup를 form 속성을 통해 제공하므로, 이메일 필드의 유효성, 수정 여부, 터치 여부를 다음과 같이 표시할 수 있습니다:\n\n```js\n<pre>유효함? {f.form.controls.email?.valid}</pre>\n<pre>수정됨? {f.form.controls.email?.dirty}</pre>\n<pre>터치됨? {f.form.controls.email?.touched}</pre>\n```\n\n<div class=\"content-ad\"></div>\n\n# 엘비스 연산자\n\n? 기호를 엘비스 연산자라고 합니다. 만약 ? 왼쪽에 위치한 속성이 null이 아닌 경우에만 ? 오른쪽에 속성을 호출하려고 시도합니다. 템플릿 기반 형식에서 Angular이 페이지를 빌드할 때 컨트롤이 가끔 null 일 수 있으므로 안전을 위해 엘비스 연산자를 사용합니다.\n\n```js\n<pre>Valid? {f.form.controls.email?.valid}</pre>\n```\n\n# 폼 초기화\n\n<div class=\"content-ad\"></div>\n\n```js\n<form (ngSubmit)=\"onSubmit()\" #myForm=\"ngForm\">\n```\n\n```js\n@ViewChild('myForm') form: any;\n\nonSubmit() {\n  if (this.form.valid) {\n    console.log(\"Form Submitted!\");\n    this.form.reset();\n  }\n}\n```\n\n## NgModelGroup 지시자\n\nngModelGroup 지시자를 사용하면 관련 있는 입력을 그룹화하여 폼에 의해 표현되는 객체를 유용하고 예측 가능한 방식으로 구조화할 수 있습니다. ngModelGroup는 주로 fieldset과 결합하여 사용되는데, 이들은 대부분 \"입력을 그룹화함\"이라는 같은 아이디어를 나타냅니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport {Component, ViewChild} from \"@angular/core\";\n@Component({\n    selector: 'app',\n    template: `\n<form \n    #formRef=\"ngForm\" \n    (ngSubmit)=\"onSubmit(formRef.value)\"\n    >\n    <fieldset ngModelGroup=\"login\">\n        <input \n            #usernameRef=\"ngModel\"\n            name=\"username\"\n            [(ngModel)]=\"username\"\n            type=\"text\"        \n            required\n            minlength=\"3\"\n        >    \n        <div *ngIf=\"usernameRef.errors?.required\">This field is required</div>\n        <div *ngIf=\"usernameRef.errors?.minlength\">This field must be longer than {usernameRef.errors?.minlength.requiredLength} characters. You only typed {usernameRef.errors?.minlength.actualLength}</div>\n        \n        <input type=\"password\" ngModel name=\"password\">\n    </fieldset>\n    <button type=\"submit\">Submit</button>\n</form> \n{formRef.value | json}   \n{formRef.valid | json}   \n\n``` \n\n# 출력\n\n```js \n{ \"login\": { \"username\": \"Zeeshan\", \"password\": \"\" } } true\n```\n\n```js\nimport {Component, ViewChild} from \"@angular/core\";\n@Component({\n    selector: 'app',\n    template: `\n<form \n    #formRef=\"ngForm\" \n    (ngSubmit)=\"onSubmit(formRef.value)\"\n    >\n    <fieldset ngModelGroup=\"login\">\n        <input \n            #usernameRef=\"ngModel\"\n            name=\"username\"\n            [(ngModel)]=\"username\"\n            type=\"text\"        \n            required\n            minlength=\"3\"\n        >    \n        <div *ngIf=\"usernameRef.errors?.required\">This field is required</div>\n        <div *ngIf=\"usernameRef.errors?.minlength\">This field must be longer than {usernameRef.errors?.minlength.requiredLength} characters. You only typed {usernameRef.errors?.minlength.actualLength}</div>\n        \n        <input type=\"password\" ngModel name=\"password\">\n    </fieldset>\n     <fieldset ngModelGroup=\"signUp\">\n        <input \n            #usernameRef=\"ngModel\"\n            name=\"username\"\n            [(ngModel)]=\"username\"\n            type=\"text\"        \n            required\n            minlength=\"3\"\n        >    \n        <div *ngIf=\"usernameRef.errors?.required\">This field is required</div>\n        <div *ngIf=\"usernameRef.errors?.minlength\">This field must be longer than {usernameRef.errors?.minlength.requiredLength} characters. You only typed {usernameRef.errors?.minlength.actualLength}</div>\n        \n        <input type=\"password\" ngModel name=\"password\">\n    </fieldset>\n    \n    <button type=\"submit\">Submit</button>\n</form> \n{formRef.value | json}   \n{formRef.valid | json}   \n\n```\n\n\n<div class=\"content-ad\"></div>\n\n# 결과\n\n```js\n{ \"login\": { \"username\": \"Zeeshan\", \"password\": \"\" },\n  \"signUp\": { \"username\": \"Zeeshan\", \"password\": \"\" } } true\n```\n\n# 유효성 검사/오류 메시지 표시\n\nAngular은 각 필드에 적용된 ngModel 지시문을 갖는 각각의 필드에 대해 FormControl을 생성합니다. FormControl은 유효(valid), 변경된(dirty), 터치(touched) 등과 같은 폼 요소의 상태를 노출합니다.\n\n<div class=\"content-ad\"></div>\n\nFormControl에 대한 참조를 얻는 두 가지 방법이 있습니다.\n\n- 하나는 contactForm 변수를 사용하는 방법입니다. myForm.controls.firstname.valid를 사용하여 firstname이 유효한지 확인할 수 있습니다.\n- 다른 방법은 각 FormControl을 위해 새로운 로컬 변수를 만드는 것입니다. 예를 들어 다음과 같이 firstname=\"ngModel\"을 생성하면 firstname 변수에 FormControl 인스턴스가 만들어집니다.\n\n```js\n<input type=\"text\" id=\"firstname\" name=\"firstname\" required minlength=\"10\" \n            #firstname=\"ngModel\">\n```\n\n이제 firstname FormControl 인스턴스에 대한 참조가 있으므로 해당 상태를 확인할 수 있습니다. firstname에 오류가 있는지 확인하기 위해 valid 속성을 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n\n<div *ngIf=\"!firstname?.valid && (firstname?.dirty || firstname?.touched)\">\nInvalid First Name\n</div>\n```\n\n# 결론\n\n우리는 템플릿 주도형 폼이 여전히 모델 주도형 폼과 동일한 클래스를 사용하지만 템플릿 주도 접근 방식에서는 모델이 명시적으로 컴포넌트에서 생성되는 것이 아니라 템플릿에서 디렉티브에 의해 생성된다는 것을 배웠습니다.","ogImage":{"url":"/assets/img/2024-06-22-TemplateDrivenForminAngular_0.png"},"coverImage":"/assets/img/2024-06-22-TemplateDrivenForminAngular_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 기사에서는 템플릿 폼과 언제 템플릿 드리븐 폼을 사용해야 하는지에 대해 안내하겠습니다.</p>\n<p>현실적인 예로 병원을 방문할 때 종이를 받아서 기본 정보를 적어야 하는 상황이나 학교 입학 신청서를 작성해야 하는 상황이 있습니다. 이 정보들은 소프트웨어에 업로드됩니다. 따라서 폼은 본질적으로 정보를 수집하는 종이라고 할 수 있습니다. 기술적 관점에서 Angular는 템플릿 드리븐 폼을 제공하여 사물에 대한 정보를 수집하게 됩니다.</p>\n<p>참고: Angular에서 폼을 사용하는 경우에는 AppModule에서 FormModule을 반드시 import해야 합니다.</p>\n<h1>템플릿 드리븐 폼</h1>\n<div class=\"content-ad\"></div>\n<ul>\n<li>사용하기 쉽습니다</li>\n<li>간단한 시나리오에 적합합니다.</li>\n<li>복잡한 시나리오에는 권장하지 않습니다.</li>\n<li>구문은 이전 버전의 AngularJS와 유사합니다.</li>\n<li>템플릿 기반 폼에 사용되는 구문은 양방향 데이터 바인딩 [(NgModel)]로, 최소한의 컴포넌트 코드를 사용합니다.</li>\n<li>폼 및 데이터의 자동 추적(앵귤러에서 처리)</li>\n<li>템플릿 유효성 검사는 지시어를 통해 검증됩니다.</li>\n<li>템플릿 기반 폼의 단위 테스트는 값 변경과 유효성 검사가 비동기적이라는 문제가 있습니다.</li>\n<li>데이터 모델은 구조적이지 않습니다.</li>\n<li>템플릿 폼에서의 예측 가능성은 비동기적입니다.</li>\n<li>폼 유효성 검사는 필드에 보다 많은 유효성 검사 태그를 추가하거나 복잡한 교차 필드 유효성 검사를 추가할수록 폼의 가독성이 떨어집니다.</li>\n</ul>\n<h1>언제 템플릿 기반 폼을 사용해야 하는가:</h1>\n<p>로그인과 같이 기본적이고 간단한 요구사항을 갖는 앱에서는 템플릿 기반 폼을 사용해야 합니다.</p>\n<p>예제 템플릿 기반 폼</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NgModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FormsModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;        <span class=\"hljs-comment\">// FormsModule 가져오기</span>\n \n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppRoutingModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app-routing.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.component'</span>;\n \n@<span class=\"hljs-title class_\">NgModule</span>({\n  <span class=\"hljs-attr\">declarations</span>: [\n    <span class=\"hljs-title class_\">AppComponent</span>\n  ],\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-title class_\">BrowserModule</span>,\n    <span class=\"hljs-title class_\">AppRoutingModule</span>,\n    <span class=\"hljs-title class_\">FormsModule</span>                    <span class=\"hljs-comment\">// Imports 배열에 추가</span>\n  ],\n  <span class=\"hljs-attr\">providers</span>: [],\n  <span class=\"hljs-attr\">bootstrap</span>: [<span class=\"hljs-title class_\">AppComponent</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> { }\n</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;form #<span class=\"hljs-title class_\">SingUpForm</span>=<span class=\"hljs-string\">\"ngForm\"</span>>\n\n<span class=\"hljs-comment\">// 템플릿에서 변수를 생성합니다. 앵귤러에서는 이를 템플릿 참조 변수라고 합니다</span>\n</code></pre>\n<h1>ngForm이란 무엇인가요?</h1>\n<p>ngForm은 다음을 실행합니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li><code>Form</code> 지시문에 자체 바인딩</li>\n<li>최상위 FormGroup 인스턴스 생성</li>\n<li>ngModel 지시문이있는 각 자식 컨트롤에 대해 FormControl 인스턴스 생성</li>\n<li>NgModelGroup 지시문에 대해 각각 FormGroup 인스턴스를 생성</li>\n</ul>\n<h1>템플릿 기반의 FormControl 인스턴스</h1>\n<p>이들은 firstName, lastName 및 다른 필드입니다. 이들을 formControl 인스턴스에 바인딩해야 합니다. 이는 ngModel 지시문을 사용하여 수행합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;input type=<span class=\"hljs-string\">\"text\"</span> name=<span class=\"hljs-string\">\"firstname\"</span> ngModel>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>파일을 다음과 같이 수정해주세요.</p>\n<form #singupform=\"ngForm\" (ngsubmit)=\"onSubmit(singUpForm)\">\n  <p>\n    <label for=\"firstname\">이름</label>\n    <input type=\"text\" name=\"firstname\" ngmodel=\"\">\n  </p>\n  <p>\n    <label for=\"lastname\">성</label>\n    <input type=\"text\" name=\"lastname\" ngmodel=\"\">\n  </p>\n  <p>\n    <label for=\"email\">이메일</label>\n    <input type=\"text\" id=\"email\" name=\"email\" ngmodel=\"\">\n  </p>\n  <p>\n    <label for=\"gender\">성별</label>\n    <input type=\"radio\" value=\"male\" name=\"gender\" ngmodel=\"\"> 남성\n    <input type=\"radio\" value=\"female\" name=\"gender\" ngmodel=\"\"> 여성\n  </p>\n  <p>\n    <label for=\"isMarried\">결혼 여부</label>\n    <input type=\"checkbox\" name=\"isMarried\" ngmodel=\"\">\n  </p>\n  <select name=\"country\" ngmodel=\"\">\n    <option [ngvalue]=\"c.id\" *ngfor=\"let c of countryList\">\n      {c.name}\n    </option>\n  </select>\n  <p>\n    <button type=\"submit\">제출</button>\n  </p>\n</form>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n \n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-root'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./app.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./app.component.css'</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n  title = <span class=\"hljs-string\">'템플릿 기반 폼'</span>;\n \n  <span class=\"hljs-attr\">countryList</span>:country[] = [\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">country</span>(<span class=\"hljs-string\">\"1\"</span>, <span class=\"hljs-string\">\"파키스탄\"</span>),\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">country</span>(<span class=\"hljs-string\">'2'</span>, <span class=\"hljs-string\">'아랍에미리트'</span>),\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">country</span>(<span class=\"hljs-string\">'3'</span>, <span class=\"hljs-string\">'미국'</span>)\n  ];\n}\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">country</span> {\n  <span class=\"hljs-attr\">id</span>:<span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>;\n \n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">id:<span class=\"hljs-built_in\">string</span>, name:<span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">id</span>=id;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>=name;\n  }\n\n <span class=\"hljs-title function_\">onSubmit</span>(<span class=\"hljs-params\">contactForm</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(contactForm.<span class=\"hljs-property\">value</span>);\n  }\n}\n</code></pre>\n<h1>내장 검증기</h1>\n<p>내장 검증기는 필수(required), 최소 길이(minlength), 최대 길이(maxlength), 패턴(pattern)과 같은 HTML5 유효성 검사 속성을 사용합니다. Angular는 이러한 유효성 검사 속성을 해석하고, FormControl 인스턴스에 유효성 검사기 함수를 추가합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>필수 유효성 검사</h1>\n<p>필수 유효성 검사는 양식 컨트롤에 비어있지 않은 값이 입력된 경우에만 true를 반환합니다.</p>\n<h1>최소길이 유효성 검사</h1>\n<p>이 유효성 검사기는 컨트롤 값이 유효성 검사기에 지정된 값보다 적은 수의 문자를 가져서는 안 된다는 것을 요구합니다.</p>\n<div class=\"content-ad\"></div>\n<p>예를 들어, minlength validator는 사용자 이름 값이 적어도 20자여야 함을 보장합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;input type=<span class=\"hljs-string\">\"text\"</span> id=<span class=\"hljs-string\">\"userName\"</span> name=<span class=\"hljs-string\">\"userName\"</span> required minlength=<span class=\"hljs-string\">\"20\"</span>>\n</code></pre>\n<h1>Maxlength Validation</h1>\n<p>이 Validator는 문자 수가 속성 값 이상으로 초과되지 않아야 함을 요구합니다.</p>\n<div class=\"content-ad\"></div>\n<p>예를 들어, maxlength 검증기는 사용자 이름 값이 최대 20자까지인지 확인합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;input type=<span class=\"hljs-string\">\"text\"</span> id=<span class=\"hljs-string\">\"userName\"</span> name=<span class=\"hljs-string\">\"userName\"</span> required maxlength=<span class=\"hljs-string\">\"20\"</span>>\n</code></pre>\n<h1>패턴 유효성 검사</h1>\n<p>이 유효성 검사기는 컨트롤 값이 속성에 제공된 정규식 패턴과 일치해야 함을 요구합니다. 예를 들어, 패턴 ^[a-zA-Z]+$는 문자만 허용됨을 보장합니다 (공백도 허용되지 않음). 이 패턴을 사용자 이름에 적용해 보겠습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>이메일 유효성 검사</h1>\n<p>이 유효성 검사기는 제어 값이 유효한 이메일 주소여야 함을 요구합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;input type=<span class=\"hljs-string\">\"text\"</span> id=<span class=\"hljs-string\">\"email\"</span> name=<span class=\"hljs-string\">\"email\"</span> required email>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>유효성 스타일링</h1>\n<p>모델 기반 폼과 유사하게, 우리는 각 모델 폼 컨트롤의 상태에 접근할 수 있습니다. 이를 위해서는 최상위 폼 그룹을 통해 이동해야 합니다.</p>\n<p>ngForm 지시자는 최상위 FormGroup를 form 속성을 통해 제공하므로, 이메일 필드의 유효성, 수정 여부, 터치 여부를 다음과 같이 표시할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;pre>유효함? {f.<span class=\"hljs-property\">form</span>.<span class=\"hljs-property\">controls</span>.<span class=\"hljs-property\">email</span>?.<span class=\"hljs-property\">valid</span>}&#x3C;/pre>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">pre</span>></span>수정됨? {f.form.controls.email?.dirty}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">pre</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">pre</span>></span>터치됨? {f.form.controls.email?.touched}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">pre</span>></span></span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>엘비스 연산자</h1>\n<p>? 기호를 엘비스 연산자라고 합니다. 만약 ? 왼쪽에 위치한 속성이 null이 아닌 경우에만 ? 오른쪽에 속성을 호출하려고 시도합니다. 템플릿 기반 형식에서 Angular이 페이지를 빌드할 때 컨트롤이 가끔 null 일 수 있으므로 안전을 위해 엘비스 연산자를 사용합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;pre><span class=\"hljs-title class_\">Valid</span>? {f.<span class=\"hljs-property\">form</span>.<span class=\"hljs-property\">controls</span>.<span class=\"hljs-property\">email</span>?.<span class=\"hljs-property\">valid</span>}&#x3C;/pre>\n</code></pre>\n<h1>폼 초기화</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;form (ngSubmit)=<span class=\"hljs-string\">\"onSubmit()\"</span> #myForm=<span class=\"hljs-string\">\"ngForm\"</span>>\n</code></pre>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">ViewChild</span>(<span class=\"hljs-string\">'myForm'</span>) <span class=\"hljs-attr\">form</span>: any;\n\n<span class=\"hljs-title function_\">onSubmit</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">form</span>.<span class=\"hljs-property\">valid</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Form Submitted!\"</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">form</span>.<span class=\"hljs-title function_\">reset</span>();\n  }\n}\n</code></pre>\n<h2>NgModelGroup 지시자</h2>\n<p>ngModelGroup 지시자를 사용하면 관련 있는 입력을 그룹화하여 폼에 의해 표현되는 객체를 유용하고 예측 가능한 방식으로 구조화할 수 있습니다. ngModelGroup는 주로 fieldset과 결합하여 사용되는데, 이들은 대부분 \"입력을 그룹화함\"이라는 같은 아이디어를 나타냅니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">ViewChild</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n@<span class=\"hljs-title class_\">Component</span>({\n    <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app'</span>,\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n&#x3C;form \n    #formRef=\"ngForm\" \n    (ngSubmit)=\"onSubmit(formRef.value)\"\n    >\n    &#x3C;fieldset ngModelGroup=\"login\">\n        &#x3C;input \n            #usernameRef=\"ngModel\"\n            name=\"username\"\n            [(ngModel)]=\"username\"\n            type=\"text\"        \n            required\n            minlength=\"3\"\n        >    \n        &#x3C;div *ngIf=\"usernameRef.errors?.required\">This field is required&#x3C;/div>\n        &#x3C;div *ngIf=\"usernameRef.errors?.minlength\">This field must be longer than {usernameRef.errors?.minlength.requiredLength} characters. You only typed {usernameRef.errors?.minlength.actualLength}&#x3C;/div>\n        \n        &#x3C;input type=\"password\" ngModel name=\"password\">\n    &#x3C;/fieldset>\n    &#x3C;button type=\"submit\">Submit&#x3C;/button>\n&#x3C;/form> \n{formRef.value | json}   \n{formRef.valid | json}   \n\n</span></code></pre>\n<h1>출력</h1>\n<pre><code class=\"hljs language-js\">{ <span class=\"hljs-string\">\"login\"</span>: { <span class=\"hljs-string\">\"username\"</span>: <span class=\"hljs-string\">\"Zeeshan\"</span>, <span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"\"</span> } } <span class=\"hljs-literal\">true</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">ViewChild</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@angular/core\"</span>;\n@<span class=\"hljs-title class_\">Component</span>({\n    <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app'</span>,\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n&#x3C;form \n    #formRef=\"ngForm\" \n    (ngSubmit)=\"onSubmit(formRef.value)\"\n    >\n    &#x3C;fieldset ngModelGroup=\"login\">\n        &#x3C;input \n            #usernameRef=\"ngModel\"\n            name=\"username\"\n            [(ngModel)]=\"username\"\n            type=\"text\"        \n            required\n            minlength=\"3\"\n        >    \n        &#x3C;div *ngIf=\"usernameRef.errors?.required\">This field is required&#x3C;/div>\n        &#x3C;div *ngIf=\"usernameRef.errors?.minlength\">This field must be longer than {usernameRef.errors?.minlength.requiredLength} characters. You only typed {usernameRef.errors?.minlength.actualLength}&#x3C;/div>\n        \n        &#x3C;input type=\"password\" ngModel name=\"password\">\n    &#x3C;/fieldset>\n     &#x3C;fieldset ngModelGroup=\"signUp\">\n        &#x3C;input \n            #usernameRef=\"ngModel\"\n            name=\"username\"\n            [(ngModel)]=\"username\"\n            type=\"text\"        \n            required\n            minlength=\"3\"\n        >    \n        &#x3C;div *ngIf=\"usernameRef.errors?.required\">This field is required&#x3C;/div>\n        &#x3C;div *ngIf=\"usernameRef.errors?.minlength\">This field must be longer than {usernameRef.errors?.minlength.requiredLength} characters. You only typed {usernameRef.errors?.minlength.actualLength}&#x3C;/div>\n        \n        &#x3C;input type=\"password\" ngModel name=\"password\">\n    &#x3C;/fieldset>\n    \n    &#x3C;button type=\"submit\">Submit&#x3C;/button>\n&#x3C;/form> \n{formRef.value | json}   \n{formRef.valid | json}   \n\n</span></code></pre>\n<div class=\"content-ad\"></div>\n<h1>결과</h1>\n<pre><code class=\"hljs language-js\">{ <span class=\"hljs-string\">\"login\"</span>: { <span class=\"hljs-string\">\"username\"</span>: <span class=\"hljs-string\">\"Zeeshan\"</span>, <span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"\"</span> },\n  <span class=\"hljs-string\">\"signUp\"</span>: { <span class=\"hljs-string\">\"username\"</span>: <span class=\"hljs-string\">\"Zeeshan\"</span>, <span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"\"</span> } } <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h1>유효성 검사/오류 메시지 표시</h1>\n<p>Angular은 각 필드에 적용된 ngModel 지시문을 갖는 각각의 필드에 대해 FormControl을 생성합니다. FormControl은 유효(valid), 변경된(dirty), 터치(touched) 등과 같은 폼 요소의 상태를 노출합니다.</p>\n<div class=\"content-ad\"></div>\n<p>FormControl에 대한 참조를 얻는 두 가지 방법이 있습니다.</p>\n<ul>\n<li>하나는 contactForm 변수를 사용하는 방법입니다. myForm.controls.firstname.valid를 사용하여 firstname이 유효한지 확인할 수 있습니다.</li>\n<li>다른 방법은 각 FormControl을 위해 새로운 로컬 변수를 만드는 것입니다. 예를 들어 다음과 같이 firstname=\"ngModel\"을 생성하면 firstname 변수에 FormControl 인스턴스가 만들어집니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;input type=<span class=\"hljs-string\">\"text\"</span> id=<span class=\"hljs-string\">\"firstname\"</span> name=<span class=\"hljs-string\">\"firstname\"</span> required minlength=<span class=\"hljs-string\">\"10\"</span> \n            #firstname=<span class=\"hljs-string\">\"ngModel\"</span>>\n</code></pre>\n<p>이제 firstname FormControl 인스턴스에 대한 참조가 있으므로 해당 상태를 확인할 수 있습니다. firstname에 오류가 있는지 확인하기 위해 valid 속성을 사용합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">\n&#x3C;div *ngIf=<span class=\"hljs-string\">\"!firstname?.valid &#x26;&#x26; (firstname?.dirty || firstname?.touched)\"</span>>\n<span class=\"hljs-title class_\">Invalid</span> <span class=\"hljs-title class_\">First</span> <span class=\"hljs-title class_\">Name</span>\n&#x3C;/div>\n</code></pre>\n<h1>결론</h1>\n<p>우리는 템플릿 주도형 폼이 여전히 모델 주도형 폼과 동일한 클래스를 사용하지만 템플릿 주도 접근 방식에서는 모델이 명시적으로 컴포넌트에서 생성되는 것이 아니라 템플릿에서 디렉티브에 의해 생성된다는 것을 배웠습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}