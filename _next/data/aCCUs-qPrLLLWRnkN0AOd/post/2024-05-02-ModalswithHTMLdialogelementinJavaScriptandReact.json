{"pageProps":{"post":{"title":"HTML <dialog> 요소를 사용한 JavaScript와 React에서의 모달(dialog)","description":"","date":"2024-05-02 00:07","slug":"2024-05-02-ModalswithHTMLdialogelementinJavaScriptandReact","content":"\n\n![image](/assets/img/2024-05-02-ModalswithHTMLdialogelementinJavaScriptandReact_0.png)\n\n다이얼로그 태그는 모달과 같은 컴포넌트를 만드는 좋은 방법입니다. 여기에는 구현하는 몇 가지 방법이 있습니다.\n\n일반적으로 `dialog`는 상호 작용 컴포넌트를 만들며, 간단한 대화상자나 모달로 변환할 수 있습니다. 전자는 컴포넌트를 단순히 열고, 후자는 모달이 열려 있는 동안 페이지의 나머지 콘텐츠를 비활성화하는 것입니다.\n\n모달의 예시는 다음과 같을 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<!-- Modal - HTML -->\n<dialog id=\"modal\">\n  <h1>이것은 모달입니다.</h1>\n  <button id=\"closeModal\">모달 닫기</button>\n</dialog>\n<button id=\"openModal\">모달 보이기</button>\n```\n\n```js\n// Modal - JavaScript\nconst modal = document.getElementById(\"modal\");\nconst openModal = document.getElementById(\"openModal\");\nconst closeModal = document.getElementById(\"closeModal\");\n\nopenModal.addEventListener(\"click\", () => {\n  modal.showModal();\n});\n\ncloseModal.addEventListener(\"click\", () => {\n  modal.close();\n});\n```\n\n다이얼로그 예시는 다음과 같을 수 있습니다:\n\n```js\n<!-- Dialog - HTML -->\n<dialog id=\"dialog\">\n  <h1>이것은 다이얼로그입니다.</h1>\n  <button id=\"closeDialog\">다이얼로그 닫기</button>\n</dialog>\n<button id=\"openDialog\">다이얼로그 보이기</button>\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n// 다이얼로그 - JavaScript\nconst dialog = document.getElementById(\"dialog\");\nconst openDialog = document.getElementById(\"openDialog\");\nconst closeDialog = document.getElementById(\"closeDialog\");\n\nopenDialog.addEventListener(\"click\", () => {\n  dialog.show();\n});\n\ncloseDialog.addEventListener(\"click\", () => {\n  dialog.close();\n});\n```\n\n두 가지 사이의 유일한 차이점은 그들을 열기 위한 함수입니다. 모달의 경우 showModal() 메소드를 사용해야 하고 간단한 다이얼로그의 경우 show()를 사용해야 합니다. 코드의 나머지 부분은 동일합니다.\n\n`dialog`은 보이는 다이얼로그를 보여주는 open 속성이 있습니다 (설정된 경우). 예를 들어:\n\n```js\n<dialog open>\n  <h1>This dialog will always be shown.</h1>\n</dialog>\n```\n\n<div class=\"content-ad\"></div>\n\n표시를 켜거나 끄기 위해 true/false로 설정할 수도 있습니다 (예를 들어 React의 useState와 함께 사용할 수 있습니다). 그러나 이 경우에는 항상 비모달(non-modal)로 설정되므로 showModal()/show() 메서드를 사용하는 것이 좋습니다.\n\nReact에서 이 작업을 수행하는 한 가지 방법은 useEffect와 useRef를 사용하는 것입니다:\n\n```js\n// Modal을 별도의 컴포넌트로 만들기\nimport { useEffect, useRef } from \"react\";\n\nfunction Modal({ openModal, closeModal, children }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (openModal) {\n      ref.current?.showModal();\n    } else {\n      ref.current?.close();\n    }\n  }, [openModal]);\n\n  return (\n    <dialog\n      ref={ref}\n      onCancel={closeModal}\n    >\n      {children}\n      <button onClick={closeModal}>\n        닫기\n      </button>\n    </dialog>\n  );\n}\n\nexport default MenuModal;\n```\n\n여기서 useRef는 렌더링 용도로 값을 참조하고, useEffect는 열기/닫기 상태를 확인하는 데 사용됩니다(이는 props를 통해 전달됩니다). 또한 올바르게 ESC 키를 사용하기 위해 onCancel 속성도 있습니다(키보드로 모달을 닫으려는 경우 사용할 수 있습니다).\n\n<div class=\"content-ad\"></div>\n\n그럼 모달 구성 요소를 페이지 구성 요소에 추가하고 useState로 상태를 설정해야 합니다. 모달을 열거나 닫으려면 다음을 추가하십시오:\n\n```js\n// 페이지 구성 요소\nimport { useState } from \"react\";\nimport { Modal } from \"./Modal\";\n\nfunction PageComponent() {\n  const [modal, setModal] = useState(false);\n\n  return (\n    <button\n      onClick={() => setModal(true)}\n    >\n      모달 열기\n    </button>\n    <Modal\n      openModal={modal}\n      closeModal={() => setModal(false)}\n    >\n      모달 내용.\n    </Modal>\n  )\n\nexport default PageComponent;\n```\n\n위의 React 예시에서 showModal() 메서드를 show()로 변경하면 모달 대신 간단한 대화상자를 사용합니다. 이 경우 대화상자를 기타 요소 위에 표시하려는 경우 CSS 파일에서 z-index를 추가로 설정해야 할 수 있습니다 (대화상자가 열렸을 때 다른 요소에 접근할 수 있게 합니다).\n\nCSS에 대한 추가 설정으로는 모달에 대한 ::backdrop 가상 요소를 설정하는 것이 있습니다. 예를 들어 배경을 어둡게 하려면 (기본 변형보다 더 어둡게) 다음과 같이 설정할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n.modalClassName::backdrop {\n  background: rgba(0, 0, 0, 0.5);\n}\n```\n\n다음은 `dialog` 요소를 사용하는 몇 가지 가능한 방법입니다. `div`와 같은 변종을 사용하는 대신 모달/대화 상자에 적절한 태그를 가지고 있는 것은 좋은 점이지만 물론 항상 다른 접근 방식이 있습니다.\n\n읽어 주셔서 감사합니다.\n","ogImage":{"url":"/assets/img/2024-05-02-ModalswithHTMLdialogelementinJavaScriptandReact_0.png"},"coverImage":"/assets/img/2024-05-02-ModalswithHTMLdialogelementinJavaScriptandReact_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-02-ModalswithHTMLdialogelementinJavaScriptandReact_0.png\" alt=\"image\"></p>\n<p>다이얼로그 태그는 모달과 같은 컴포넌트를 만드는 좋은 방법입니다. 여기에는 구현하는 몇 가지 방법이 있습니다.</p>\n<p>일반적으로 <code>dialog</code>는 상호 작용 컴포넌트를 만들며, 간단한 대화상자나 모달로 변환할 수 있습니다. 전자는 컴포넌트를 단순히 열고, 후자는 모달이 열려 있는 동안 페이지의 나머지 콘텐츠를 비활성화하는 것입니다.</p>\n<p>모달의 예시는 다음과 같을 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;!-- <span class=\"hljs-title class_\">Modal</span> - <span class=\"hljs-variable constant_\">HTML</span> -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">dialog</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"modal\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>이것은 모달입니다.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"closeModal\"</span>></span>모달 닫기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">dialog</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"openModal\"</span>></span>모달 보이기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Modal - JavaScript</span>\n<span class=\"hljs-keyword\">const</span> modal = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"modal\"</span>);\n<span class=\"hljs-keyword\">const</span> openModal = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"openModal\"</span>);\n<span class=\"hljs-keyword\">const</span> closeModal = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"closeModal\"</span>);\n\nopenModal.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\">() =></span> {\n  modal.<span class=\"hljs-title function_\">showModal</span>();\n});\n\ncloseModal.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\">() =></span> {\n  modal.<span class=\"hljs-title function_\">close</span>();\n});\n</code></pre>\n<p>다이얼로그 예시는 다음과 같을 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;!-- <span class=\"hljs-title class_\">Dialog</span> - <span class=\"hljs-variable constant_\">HTML</span> -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">dialog</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dialog\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>이것은 다이얼로그입니다.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"closeDialog\"</span>></span>다이얼로그 닫기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">dialog</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"openDialog\"</span>></span>다이얼로그 보이기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 다이얼로그 - JavaScript</span>\n<span class=\"hljs-keyword\">const</span> dialog = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"dialog\"</span>);\n<span class=\"hljs-keyword\">const</span> openDialog = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"openDialog\"</span>);\n<span class=\"hljs-keyword\">const</span> closeDialog = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"closeDialog\"</span>);\n\nopenDialog.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\">() =></span> {\n  dialog.<span class=\"hljs-title function_\">show</span>();\n});\n\ncloseDialog.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\">() =></span> {\n  dialog.<span class=\"hljs-title function_\">close</span>();\n});\n</code></pre>\n<p>두 가지 사이의 유일한 차이점은 그들을 열기 위한 함수입니다. 모달의 경우 showModal() 메소드를 사용해야 하고 간단한 다이얼로그의 경우 show()를 사용해야 합니다. 코드의 나머지 부분은 동일합니다.</p>\n<p><code>dialog</code>은 보이는 다이얼로그를 보여주는 open 속성이 있습니다 (설정된 경우). 예를 들어:</p>\n<pre><code class=\"hljs language-js\">&#x3C;dialog open>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>This dialog will always be shown.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n&#x3C;/dialog>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>표시를 켜거나 끄기 위해 true/false로 설정할 수도 있습니다 (예를 들어 React의 useState와 함께 사용할 수 있습니다). 그러나 이 경우에는 항상 비모달(non-modal)로 설정되므로 showModal()/show() 메서드를 사용하는 것이 좋습니다.</p>\n<p>React에서 이 작업을 수행하는 한 가지 방법은 useEffect와 useRef를 사용하는 것입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Modal을 별도의 컴포넌트로 만들기</span>\n<span class=\"hljs-keyword\">import</span> { useEffect, useRef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Modal</span>(<span class=\"hljs-params\">{ openModal, closeModal, children }</span>) {\n  <span class=\"hljs-keyword\">const</span> ref = <span class=\"hljs-title function_\">useRef</span>();\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (openModal) {\n      ref.<span class=\"hljs-property\">current</span>?.<span class=\"hljs-title function_\">showModal</span>();\n    } <span class=\"hljs-keyword\">else</span> {\n      ref.<span class=\"hljs-property\">current</span>?.<span class=\"hljs-title function_\">close</span>();\n    }\n  }, [openModal]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">dialog</span>\n      <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{ref}</span>\n      <span class=\"hljs-attr\">onCancel</span>=<span class=\"hljs-string\">{closeModal}</span>\n    ></span>\n      {children}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{closeModal}</span>></span>\n        닫기\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">dialog</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">MenuModal</span>;\n</code></pre>\n<p>여기서 useRef는 렌더링 용도로 값을 참조하고, useEffect는 열기/닫기 상태를 확인하는 데 사용됩니다(이는 props를 통해 전달됩니다). 또한 올바르게 ESC 키를 사용하기 위해 onCancel 속성도 있습니다(키보드로 모달을 닫으려는 경우 사용할 수 있습니다).</p>\n<div class=\"content-ad\"></div>\n<p>그럼 모달 구성 요소를 페이지 구성 요소에 추가하고 useState로 상태를 설정해야 합니다. 모달을 열거나 닫으려면 다음을 추가하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 페이지 구성 요소</span>\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Modal</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Modal\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PageComponent</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [modal, setModal] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n      <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setModal(true)}\n    >\n      모달 열기\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Modal</span>\n      <span class=\"hljs-attr\">openModal</span>=<span class=\"hljs-string\">{modal}</span>\n      <span class=\"hljs-attr\">closeModal</span>=<span class=\"hljs-string\">{()</span> =></span> setModal(false)}\n    >\n      모달 내용.\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Modal</span>></span></span>\n  )\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">PageComponent</span>;\n</code></pre>\n<p>위의 React 예시에서 showModal() 메서드를 show()로 변경하면 모달 대신 간단한 대화상자를 사용합니다. 이 경우 대화상자를 기타 요소 위에 표시하려는 경우 CSS 파일에서 z-index를 추가로 설정해야 할 수 있습니다 (대화상자가 열렸을 때 다른 요소에 접근할 수 있게 합니다).</p>\n<p>CSS에 대한 추가 설정으로는 모달에 대한 ::backdrop 가상 요소를 설정하는 것이 있습니다. 예를 들어 배경을 어둡게 하려면 (기본 변형보다 더 어둡게) 다음과 같이 설정할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">modalClassName</span>::backdrop {\n  <span class=\"hljs-attr\">background</span>: <span class=\"hljs-title function_\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.5</span>);\n}\n</code></pre>\n<p>다음은 <code>dialog</code> 요소를 사용하는 몇 가지 가능한 방법입니다. <code>div</code>와 같은 변종을 사용하는 대신 모달/대화 상자에 적절한 태그를 가지고 있는 것은 좋은 점이지만 물론 항상 다른 접근 방식이 있습니다.</p>\n<p>읽어 주셔서 감사합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}