{"pageProps":{"post":{"title":"Jetpack Compose로 안드로이드 카운트다운 스낵바 만드는 방법","description":"","date":"2024-07-01 20:04","slug":"2024-07-01-HowtoCreateaCountdownSnackbarinAndroidwithJetpackCompose","content":"\n\n환영합니다 👋\n\n이 기사에서는 젯팩 콤포즈(Jetpack Compose)에서 카운트다운 스낵바를 만들어보겠습니다. 이 기능은 사용자가 계정을 삭제하는 등 중요한 작업을 다시 생각할 시간을 제공하기에 안성맞춤입니다.\n\n계속 주목해 주시고, 함께 시작해 보겠습니다! 🚀\n\n<img src=\"/assets/img/2024-07-01-HowtoCreateaCountdownSnackbarinAndroidwithJetpackCompose_0.png\" />\n\n<div class=\"content-ad\"></div>\n\n# 스낵바 카운트다운 생성하기\n\n먼저 시각적으로 카운트다운 타이머를 나타내는 SnackbarCountdown 조합 함수를 정의합니다.\n\n```js\n@Composable\nprivate fun SnackbarCountdown(\n    timerProgress: Float,\n    secondsRemaining: Int,\n    color: Color\n) {\n    Box(\n        modifier = Modifier.size(24.dp),\n        contentAlignment = Alignment.Center\n    ) {\n        Canvas(Modifier.matchParentSize()) {\n            // 스트로크 정의\n            val strokeStyle = Stroke(\n                width = 3.dp.toPx(),\n                cap = StrokeCap.Round\n            )\n            // 트랙 그리기\n            drawCircle(\n                color = color.copy(alpha = 0.12f),\n                style = strokeStyle\n            )\n            // 진행 상황 그리기\n            drawArc(\n                color = color,\n                startAngle = -90f,\n                sweepAngle = (-360f * timerProgress),\n                useCenter = false,\n                style = strokeStyle\n            )\n        }\n        // 남은 초 표시\n        Text(\n            text = secondsRemaining.toString(),\n            style = LocalTextStyle.current.copy(\n                fontSize = 14.sp,\n                color = color\n            )\n        )\n    }\n}\n```\n\n# 카운트다운Snackbar 함수 설정하기\n\n<div class=\"content-ad\"></div>\n\n이제 SnackbarCountdown을 구성했으니 CountdownSnackbar을 정의할 수 있습니다. 이 composable은 외관과 동작을 사용자 정의하기 위해 여러 매개변수를 가져야 합니다.\n\n```js\n@Composable\nfun CountdownSnackbar(\n    snackbarData: SnackbarData,\n    modifier: Modifier = Modifier,\n    durationInSeconds: Int = 5,\n    actionOnNewLine: Boolean = false,\n    shape: Shape = SnackbarDefaults.shape,\n    containerColor: Color = SnackbarDefaults.color,\n    contentColor: Color = SnackbarDefaults.contentColor,\n    actionColor: Color = SnackbarDefaults.actionColor,\n    actionContentColor: Color = SnackbarDefaults.actionContentColor,\n    dismissActionContentColor: Color = SnackbarDefaults.dismissActionContentColor,\n) {\n    // 여기에 구현...\n}\n```\n\n⏳ snackbarData ➜ Snackbar을 위한 데이터.\n\n⏳ modifier ➜ Snackbar에 적용할 Modifier.\n\n<div class=\"content-ad\"></div>\n\n⏳ durationInSeconds ➜ 카운트다운 타이머의 기간.\n\n⏳ actionOnNewLine ➜ 동작을 별도의 줄에 표시할지 여부.\n\n⏳ shape ➜ 스낵바 컨테이너의 모양.\n\n⏳ containerColor, contentColor, actionColor, actionContentColor, dismissActionContentColor ➜ 다양한 색상 스타일링 매개변수.\n\n<div class=\"content-ad\"></div>\n\n# CountdownSnackbar 구현\n\n## 스낵바의 지속 시간 및 상태 관리\n\n다음으로, 밀리초로 총 지속 시간을 계산하고 상태 변수를 사용하여 남은 시간을 관리합니다. 또한 LaunchedEffect를 사용하여 카운트다운을 처리하고 시간이 다 되면 스낵바를 해제합니다.\n\n```js\nval totalDuration = remember(durationInSeconds) { durationInSeconds * 1000 }\nvar millisRemaining by remember { mutableIntStateOf(totalDuration) }\n\nLaunchedEffect(snackbarData) {\n    while (millisRemaining > 0) {\n        delay(40)\n        millisRemaining -= 40\n    }\n    snackbarData.dismiss()\n}\n```\n\n<div class=\"content-ad\"></div>\n\n40밀리초 간격을 사용하면 인간의 눈에 매끄러운 25 FPS 진행 업데이트가 발생합니다. 특정 요구 사항에 맞게 조정해 주셔도 좋습니다.\n\n## 작업 및 닫기 버튼 처리\n\n작업 및 닫기 버튼을 만들기 위해 snackbarData에서 제공된 정보를 활용합니다.\n\n```js\n// 작업 레이블이 제공되면 작업 버튼 정의\nval actionLabel = snackbarData.visuals.actionLabel\nval actionComposable: (@Composable () -> Unit)? = if (actionLabel != null) {\n    @Composable {\n        TextButton(\n            colors = ButtonDefaults.textButtonColors(contentColor = actionColor),\n            onClick = { snackbarData.performAction() },\n            content = { Text(actionLabel) }\n        )\n    }\n} else {\n    null\n}\n\n// snackbar에 닫기 작업이 포함되어 있는 경우 닫기 버튼 정의\nval dismissActionComposable: (@Composable () -> Unit)? = if (snackbarData.visuals.withDismissAction) {\n    @Composable {\n        IconButton(\n            onClick = { snackbarData.dismiss() },\n            content = {\n                Icon(Icons.Rounded.Close, null)\n            }\n        )\n    }\n} else {\n    null\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## Snackbar 표시\n\n마지막으로, 모든 것을 함께 모아 Snackbar를 표시해 봅시다.\n\n```js\nSnackbar(\n    modifier = modifier.padding(12.dp), // Snackbar 주변에 패딩 적용\n    action = actionComposable,\n    actionOnNewLine = actionOnNewLine,\n    dismissAction = dismissActionComposable,\n    dismissActionContentColor = dismissActionContentColor,\n    actionContentColor = actionContentColor,\n    containerColor = containerColor,\n    contentColor = contentColor,\n    shape = shape,\n) {\n    Row(\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.spacedBy(12.dp)\n    ) {\n        SnackbarCountdown(\n            // 타이머 진행 상황 계산\n            timerProgress = millisRemaining.toFloat() / totalDuration.toFloat(),\n            // 남은 초 계산\n            secondsRemaining = (millisRemaining / 1000) + 1,\n            color = contentColor\n        )\n        // 메시지 표시\n        Text(snackbarData.visuals.message)\n    }\n}\n```\n\n축하합니다🥳! 성공적으로 만들었습니다👏. 전체 코드 구현은 GitHub Gist에서 확인할 수 있습니다🧑‍💻. 이제 이를 어떻게 활용할 수 있는지 알아보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n## 광고\n\n외국어를 배우면서 새로운 어휘에 어려움을 겪고 계신가요? 그렇다면, 여러분의 학습 여정을 쉽고 편리하게 만들어 줄 이 단어 학습 앱을 꼭 확인해보시기를 강력히 추천합니다!\n\n![이미지](/assets/img/2024-07-01-HowtoCreateaCountdownSnackbarinAndroidwithJetpackCompose_1.png)\n\n# 실용적인 예시 💁\n\n<div class=\"content-ad\"></div>\n\n이 방법을 실제로 사용하여 사용자가 계정을 삭제하고 이 결정을 5초 동안 취소할 수 있는 예제를 만들어 봅시다.\n\n```kotlin\nBox(Modifier.fillMaxSize()) {\n    val context = LocalContext.current\n    val scope = rememberCoroutineScope()\n    // 스낵바 상태를 관리하는 SnackbarHostState를 정의합니다\n    val snackbarHostState = remember { SnackbarHostState() }\n\n    Button(\n        modifier = Modifier.align(Alignment.Center),\n        onClick = {\n            scope.launch {\n                // 스낵바를 표시합니다\n                val result = snackbarHostState.showSnackbar(\n                    message = \"사용자 계정이 삭제되었습니다.\",\n                    actionLabel = \"취소\",\n                    duration = SnackbarDuration.Indefinite\n                )\n                // 스낵바 결과 처리\n                when (result) {\n                    SnackbarResult.Dismissed -> {\n                        Toast.makeText(context, \"영구 삭제되었습니다\", Toast.LENGTH_SHORT).show()\n                    }\n                    SnackbarResult.ActionPerformed -> {\n                        Toast.makeText(context, \"삭제 취소됨\", Toast.LENGTH_SHORT).show()\n                    }\n                }\n            }\n        }\n    ) {\n        Text(\"계정 삭제\")\n    }\n\n    // 스낵바를 표시하는 SnackbarHost를 생성합니다\n    SnackbarHost(\n        hostState = snackbarHostState,\n        modifier = Modifier.align(BottomCenter)\n    ) { data ->\n        // CountdownSnackbar를 사용합니다\n        CountdownSnackbar(data)\n    }\n}\n```\n\n## 결과:\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*7-Q98heTXND5N7XbAEKBYQ.gif\" />\n\n\n<div class=\"content-ad\"></div>\n\n아래 내용도 좋아할지도요 👇\n\n이 기사를 읽어 주셔서 감사합니다! ❤️ 즐겁고 가치 있게 읽으셨길 바랍니다. 만약 좋았다면 박수 버튼👏을 눌러서 감사를 표현하고 Kappdev를 팔로우해서 더 많은 흥미로운 기사를 읽어보세요 😊\n\n코딩 즐기세요!\n\n![이미지](/assets/img/2024-07-01-HowtoCreateaCountdownSnackbarinAndroidwithJetpackCompose_2.png)","ogImage":{"url":"/assets/img/2024-07-01-HowtoCreateaCountdownSnackbarinAndroidwithJetpackCompose_0.png"},"coverImage":"/assets/img/2024-07-01-HowtoCreateaCountdownSnackbarinAndroidwithJetpackCompose_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>환영합니다 👋</p>\n<p>이 기사에서는 젯팩 콤포즈(Jetpack Compose)에서 카운트다운 스낵바를 만들어보겠습니다. 이 기능은 사용자가 계정을 삭제하는 등 중요한 작업을 다시 생각할 시간을 제공하기에 안성맞춤입니다.</p>\n<p>계속 주목해 주시고, 함께 시작해 보겠습니다! 🚀</p>\n<img src=\"/assets/img/2024-07-01-HowtoCreateaCountdownSnackbarinAndroidwithJetpackCompose_0.png\">\n<div class=\"content-ad\"></div>\n<h1>스낵바 카운트다운 생성하기</h1>\n<p>먼저 시각적으로 카운트다운 타이머를 나타내는 SnackbarCountdown 조합 함수를 정의합니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Composable</span>\nprivate fun <span class=\"hljs-title class_\">SnackbarCountdown</span>(\n    <span class=\"hljs-attr\">timerProgress</span>: <span class=\"hljs-title class_\">Float</span>,\n    <span class=\"hljs-attr\">secondsRemaining</span>: <span class=\"hljs-title class_\">Int</span>,\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Color</span>\n) {\n    <span class=\"hljs-title class_\">Box</span>(\n        modifier = <span class=\"hljs-title class_\">Modifier</span>.<span class=\"hljs-title function_\">size</span>(<span class=\"hljs-number\">24.</span>dp),\n        contentAlignment = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">Center</span>\n    ) {\n        <span class=\"hljs-title class_\">Canvas</span>(<span class=\"hljs-title class_\">Modifier</span>.<span class=\"hljs-title function_\">matchParentSize</span>()) {\n            <span class=\"hljs-comment\">// 스트로크 정의</span>\n            val strokeStyle = <span class=\"hljs-title class_\">Stroke</span>(\n                width = <span class=\"hljs-number\">3.</span>dp.<span class=\"hljs-title function_\">toPx</span>(),\n                cap = <span class=\"hljs-title class_\">StrokeCap</span>.<span class=\"hljs-property\">Round</span>\n            )\n            <span class=\"hljs-comment\">// 트랙 그리기</span>\n            <span class=\"hljs-title function_\">drawCircle</span>(\n                color = color.<span class=\"hljs-title function_\">copy</span>(alpha = <span class=\"hljs-number\">0.</span>12f),\n                style = strokeStyle\n            )\n            <span class=\"hljs-comment\">// 진행 상황 그리기</span>\n            <span class=\"hljs-title function_\">drawArc</span>(\n                color = color,\n                startAngle = -90f,\n                sweepAngle = (-360f * timerProgress),\n                useCenter = <span class=\"hljs-literal\">false</span>,\n                style = strokeStyle\n            )\n        }\n        <span class=\"hljs-comment\">// 남은 초 표시</span>\n        <span class=\"hljs-title class_\">Text</span>(\n            text = secondsRemaining.<span class=\"hljs-title function_\">toString</span>(),\n            style = <span class=\"hljs-title class_\">LocalTextStyle</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">copy</span>(\n                fontSize = <span class=\"hljs-number\">14.</span>sp,\n                color = color\n            )\n        )\n    }\n}\n</code></pre>\n<h1>카운트다운Snackbar 함수 설정하기</h1>\n<div class=\"content-ad\"></div>\n<p>이제 SnackbarCountdown을 구성했으니 CountdownSnackbar을 정의할 수 있습니다. 이 composable은 외관과 동작을 사용자 정의하기 위해 여러 매개변수를 가져야 합니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title class_\">CountdownSnackbar</span>(\n    <span class=\"hljs-attr\">snackbarData</span>: <span class=\"hljs-title class_\">SnackbarData</span>,\n    <span class=\"hljs-attr\">modifier</span>: <span class=\"hljs-title class_\">Modifier</span> = <span class=\"hljs-title class_\">Modifier</span>,\n    <span class=\"hljs-attr\">durationInSeconds</span>: <span class=\"hljs-title class_\">Int</span> = <span class=\"hljs-number\">5</span>,\n    <span class=\"hljs-attr\">actionOnNewLine</span>: <span class=\"hljs-title class_\">Boolean</span> = <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-title class_\">Shape</span> = <span class=\"hljs-title class_\">SnackbarDefaults</span>.<span class=\"hljs-property\">shape</span>,\n    <span class=\"hljs-attr\">containerColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">SnackbarDefaults</span>.<span class=\"hljs-property\">color</span>,\n    <span class=\"hljs-attr\">contentColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">SnackbarDefaults</span>.<span class=\"hljs-property\">contentColor</span>,\n    <span class=\"hljs-attr\">actionColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">SnackbarDefaults</span>.<span class=\"hljs-property\">actionColor</span>,\n    <span class=\"hljs-attr\">actionContentColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">SnackbarDefaults</span>.<span class=\"hljs-property\">actionContentColor</span>,\n    <span class=\"hljs-attr\">dismissActionContentColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">SnackbarDefaults</span>.<span class=\"hljs-property\">dismissActionContentColor</span>,\n) {\n    <span class=\"hljs-comment\">// 여기에 구현...</span>\n}\n</code></pre>\n<p>⏳ snackbarData ➜ Snackbar을 위한 데이터.</p>\n<p>⏳ modifier ➜ Snackbar에 적용할 Modifier.</p>\n<div class=\"content-ad\"></div>\n<p>⏳ durationInSeconds ➜ 카운트다운 타이머의 기간.</p>\n<p>⏳ actionOnNewLine ➜ 동작을 별도의 줄에 표시할지 여부.</p>\n<p>⏳ shape ➜ 스낵바 컨테이너의 모양.</p>\n<p>⏳ containerColor, contentColor, actionColor, actionContentColor, dismissActionContentColor ➜ 다양한 색상 스타일링 매개변수.</p>\n<div class=\"content-ad\"></div>\n<h1>CountdownSnackbar 구현</h1>\n<h2>스낵바의 지속 시간 및 상태 관리</h2>\n<p>다음으로, 밀리초로 총 지속 시간을 계산하고 상태 변수를 사용하여 남은 시간을 관리합니다. 또한 LaunchedEffect를 사용하여 카운트다운을 처리하고 시간이 다 되면 스낵바를 해제합니다.</p>\n<pre><code class=\"hljs language-js\">val totalDuration = <span class=\"hljs-title function_\">remember</span>(<span class=\"hljs-params\">durationInSeconds</span>) { durationInSeconds * <span class=\"hljs-number\">1000</span> }\n<span class=\"hljs-keyword\">var</span> millisRemaining by remember { <span class=\"hljs-title function_\">mutableIntStateOf</span>(totalDuration) }\n\n<span class=\"hljs-title class_\">LaunchedEffect</span>(snackbarData) {\n    <span class=\"hljs-keyword\">while</span> (millisRemaining > <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">40</span>)\n        millisRemaining -= <span class=\"hljs-number\">40</span>\n    }\n    snackbarData.<span class=\"hljs-title function_\">dismiss</span>()\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>40밀리초 간격을 사용하면 인간의 눈에 매끄러운 25 FPS 진행 업데이트가 발생합니다. 특정 요구 사항에 맞게 조정해 주셔도 좋습니다.</p>\n<h2>작업 및 닫기 버튼 처리</h2>\n<p>작업 및 닫기 버튼을 만들기 위해 snackbarData에서 제공된 정보를 활용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 작업 레이블이 제공되면 작업 버튼 정의</span>\nval actionLabel = snackbarData.<span class=\"hljs-property\">visuals</span>.<span class=\"hljs-property\">actionLabel</span>\nval <span class=\"hljs-attr\">actionComposable</span>: (@<span class=\"hljs-title class_\">Composable</span> () -> <span class=\"hljs-title class_\">Unit</span>)? = <span class=\"hljs-keyword\">if</span> (actionLabel != <span class=\"hljs-literal\">null</span>) {\n    @<span class=\"hljs-title class_\">Composable</span> {\n        <span class=\"hljs-title class_\">TextButton</span>(\n            colors = <span class=\"hljs-title class_\">ButtonDefaults</span>.<span class=\"hljs-title function_\">textButtonColors</span>(contentColor = actionColor),\n            onClick = { snackbarData.<span class=\"hljs-title function_\">performAction</span>() },\n            content = { <span class=\"hljs-title class_\">Text</span>(actionLabel) }\n        )\n    }\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-literal\">null</span>\n}\n\n<span class=\"hljs-comment\">// snackbar에 닫기 작업이 포함되어 있는 경우 닫기 버튼 정의</span>\nval <span class=\"hljs-attr\">dismissActionComposable</span>: (@<span class=\"hljs-title class_\">Composable</span> () -> <span class=\"hljs-title class_\">Unit</span>)? = <span class=\"hljs-keyword\">if</span> (snackbarData.<span class=\"hljs-property\">visuals</span>.<span class=\"hljs-property\">withDismissAction</span>) {\n    @<span class=\"hljs-title class_\">Composable</span> {\n        <span class=\"hljs-title class_\">IconButton</span>(\n            onClick = { snackbarData.<span class=\"hljs-title function_\">dismiss</span>() },\n            content = {\n                <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">Rounded</span>.<span class=\"hljs-property\">Close</span>, <span class=\"hljs-literal\">null</span>)\n            }\n        )\n    }\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-literal\">null</span>\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>Snackbar 표시</h2>\n<p>마지막으로, 모든 것을 함께 모아 Snackbar를 표시해 봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Snackbar</span>(\n    modifier = modifier.<span class=\"hljs-title function_\">padding</span>(<span class=\"hljs-number\">12.</span>dp), <span class=\"hljs-comment\">// Snackbar 주변에 패딩 적용</span>\n    action = actionComposable,\n    actionOnNewLine = actionOnNewLine,\n    dismissAction = dismissActionComposable,\n    dismissActionContentColor = dismissActionContentColor,\n    actionContentColor = actionContentColor,\n    containerColor = containerColor,\n    contentColor = contentColor,\n    shape = shape,\n) {\n    <span class=\"hljs-title class_\">Row</span>(\n        verticalAlignment = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">CenterVertically</span>,\n        horizontalArrangement = <span class=\"hljs-title class_\">Arrangement</span>.<span class=\"hljs-title function_\">spacedBy</span>(<span class=\"hljs-number\">12.</span>dp)\n    ) {\n        <span class=\"hljs-title class_\">SnackbarCountdown</span>(\n            <span class=\"hljs-comment\">// 타이머 진행 상황 계산</span>\n            timerProgress = millisRemaining.<span class=\"hljs-title function_\">toFloat</span>() / totalDuration.<span class=\"hljs-title function_\">toFloat</span>(),\n            <span class=\"hljs-comment\">// 남은 초 계산</span>\n            secondsRemaining = (millisRemaining / <span class=\"hljs-number\">1000</span>) + <span class=\"hljs-number\">1</span>,\n            color = contentColor\n        )\n        <span class=\"hljs-comment\">// 메시지 표시</span>\n        <span class=\"hljs-title class_\">Text</span>(snackbarData.<span class=\"hljs-property\">visuals</span>.<span class=\"hljs-property\">message</span>)\n    }\n}\n</code></pre>\n<p>축하합니다🥳! 성공적으로 만들었습니다👏. 전체 코드 구현은 GitHub Gist에서 확인할 수 있습니다🧑‍💻. 이제 이를 어떻게 활용할 수 있는지 알아보겠습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>광고</h2>\n<p>외국어를 배우면서 새로운 어휘에 어려움을 겪고 계신가요? 그렇다면, 여러분의 학습 여정을 쉽고 편리하게 만들어 줄 이 단어 학습 앱을 꼭 확인해보시기를 강력히 추천합니다!</p>\n<p><img src=\"/assets/img/2024-07-01-HowtoCreateaCountdownSnackbarinAndroidwithJetpackCompose_1.png\" alt=\"이미지\"></p>\n<h1>실용적인 예시 💁</h1>\n<div class=\"content-ad\"></div>\n<p>이 방법을 실제로 사용하여 사용자가 계정을 삭제하고 이 결정을 5초 동안 취소할 수 있는 예제를 만들어 봅시다.</p>\n<pre><code class=\"hljs language-kotlin\">Box(Modifier.fillMaxSize()) {\n    <span class=\"hljs-keyword\">val</span> context = LocalContext.current\n    <span class=\"hljs-keyword\">val</span> scope = rememberCoroutineScope()\n    <span class=\"hljs-comment\">// 스낵바 상태를 관리하는 SnackbarHostState를 정의합니다</span>\n    <span class=\"hljs-keyword\">val</span> snackbarHostState = remember { SnackbarHostState() }\n\n    Button(\n        modifier = Modifier.align(Alignment.Center),\n        onClick = {\n            scope.launch {\n                <span class=\"hljs-comment\">// 스낵바를 표시합니다</span>\n                <span class=\"hljs-keyword\">val</span> result = snackbarHostState.showSnackbar(\n                    message = <span class=\"hljs-string\">\"사용자 계정이 삭제되었습니다.\"</span>,\n                    actionLabel = <span class=\"hljs-string\">\"취소\"</span>,\n                    duration = SnackbarDuration.Indefinite\n                )\n                <span class=\"hljs-comment\">// 스낵바 결과 처리</span>\n                <span class=\"hljs-keyword\">when</span> (result) {\n                    SnackbarResult.Dismissed -> {\n                        Toast.makeText(context, <span class=\"hljs-string\">\"영구 삭제되었습니다\"</span>, Toast.LENGTH_SHORT).show()\n                    }\n                    SnackbarResult.ActionPerformed -> {\n                        Toast.makeText(context, <span class=\"hljs-string\">\"삭제 취소됨\"</span>, Toast.LENGTH_SHORT).show()\n                    }\n                }\n            }\n        }\n    ) {\n        Text(<span class=\"hljs-string\">\"계정 삭제\"</span>)\n    }\n\n    <span class=\"hljs-comment\">// 스낵바를 표시하는 SnackbarHost를 생성합니다</span>\n    SnackbarHost(\n        hostState = snackbarHostState,\n        modifier = Modifier.align(BottomCenter)\n    ) { <span class=\"hljs-keyword\">data</span> ->\n        <span class=\"hljs-comment\">// CountdownSnackbar를 사용합니다</span>\n        CountdownSnackbar(<span class=\"hljs-keyword\">data</span>)\n    }\n}\n</code></pre>\n<h2>결과:</h2>\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*7-Q98heTXND5N7XbAEKBYQ.gif\">\n<div class=\"content-ad\"></div>\n<p>아래 내용도 좋아할지도요 👇</p>\n<p>이 기사를 읽어 주셔서 감사합니다! ❤️ 즐겁고 가치 있게 읽으셨길 바랍니다. 만약 좋았다면 박수 버튼👏을 눌러서 감사를 표현하고 Kappdev를 팔로우해서 더 많은 흥미로운 기사를 읽어보세요 😊</p>\n<p>코딩 즐기세요!</p>\n<p><img src=\"/assets/img/2024-07-01-HowtoCreateaCountdownSnackbarinAndroidwithJetpackCompose_2.png\" alt=\"이미지\"></p>\n</body>\n</html>\n"},"__N_SSG":true}