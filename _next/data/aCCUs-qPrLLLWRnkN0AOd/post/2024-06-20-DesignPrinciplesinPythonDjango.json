{"pageProps":{"post":{"title":"파이썬 장고에서의 디자인 원칙","description":"","date":"2024-06-20 02:11","slug":"2024-06-20-DesignPrinciplesinPythonDjango","content":"\n\n파이썬에서의 디자인 원칙은 다른 프로그래밍 언어와 마찬가지로 깔끔하고 유지보수가 용이하며 효율적인 코드를 만드는 데 도움이 됩니다. 다음은 몇 가지 주요 디자인 원칙과 예시입니다:\n\n![Design Principles in Python](/assets/img/2024-06-20-DesignPrinciplesinPythonDjango_0.png)\n\n## 1. DRY(Don’t Repeat Yourself)\n\n코드의 중복을 피하기 위해 반복되는 패턴을 함수나 클래스로 추상화합니다.\n\n<div class=\"content-ad\"></div>\n\n장고는 ORM, 폼 및 관리자 인터페이스를 통해 DRY 원칙을 자연스럽게 촉진합니다.\n\n## 예시: 시리얼라이저 사용하기\n\nDRF 시리얼라이저를 사용하면 유효성 검사 로직을 별도로 작성하는 대신, 해당 로직을 시리얼라이저 자체에 캡슐화할 수 있습니다.\n\n```js\n# serializers.py\nfrom rest_framework import serializers\nfrom .models import Expense, Category, Balance\n\nclass ExpenseSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Expense\n        fields = ['id', 'user', 'category', 'amount', 'description', 'date']\n\nclass CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = ['id', 'name', 'description', 'user']\n\nclass BalanceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Balance\n        fields = ['id', 'total_balance']\n```\n\n<div class=\"content-ad\"></div>\n\n# 2. KISS (Keep It Simple, Stupid)\n\n코드를 가능한 한 간단하게 유지하세요. 불필요한 복잡성을 피하세요.\n\nDjango의 설계 철학은 간결성과 가독성을 강조합니다.\n\n## 예시: Django Rest Framework의 일반 뷰 사용\n\n<div class=\"content-ad\"></div>\n\n복잡한 뷰 로직을 작성하는 대신, DRF의 일반적인 뷰를 사용하여 객체 생성, 검색 및 목록을 처리할 수 있어요.\n\n```js\n# views.py\nfrom rest_framework import generics\nfrom .models import Expense, Category, Balance\nfrom .serializers import ExpenseSerializer, CategorySerializer, BalanceSerializer\n\nclass ExpenseListView(generics.ListCreateAPIView):\n    queryset = Expense.objects.all()\n    serializer_class = ExpenseSerializer\n\nclass ExpenseDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Expense.objects.all()\n    serializer_class = ExpenseSerializer\n\nclass CategoryListView(generics.ListCreateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n\nclass CategoryDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n\nclass BalanceListView(generics.ListCreateAPIView):\n    queryset = Balance.objects.all()\n    serializer_class = BalanceSerializer\n```\n\n# 3. YAGNI (You Ain’t Gonna Need It)\n\n필요할 때까지 기능을 추가하지 마세요.\n\n<div class=\"content-ad\"></div>\n\n현재 요구 사항에 주안점을 두세요. 미래의 가능성에 집중하기보다는 현재의 요구 사항을 중심으로 작업하세요.\n\n## 예: 간단한 사용자 프로필\n\n간단한 사용자 모델로 시작하고 필요할 때만 복잡성을 추가하세요.\n\n```js\n# models.py\n\nclass User(AbstractUser):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    email = models.EmailField(unique=True)\n\n    def __str__(self):\n        return self.username\n```\n\n<div class=\"content-ad\"></div>\n\n# 4. 역할의 분리\n\n여러분의 코드의 각 부분은 서로 다른 책임을 가져야 합니다.\n\n장고의 MVC (Model-View-Controller) 아키텍처는 데이터 처리를 분리한 모델(models), 사용자 인터페이스를 분리한 템플릿(templates), 그리고 응용 프로그램 로직을 분리한 뷰(views)로 구성됩니다.\n\n## 예시: 뷰에서 비즈니스 로직 분리\n\n<div class=\"content-ad\"></div>\n\n비즈니스 로직은 뷰가 아닌 모델이나 서비스에 유지하는 것이 좋습니다.\n\n```js\n# models.py\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\nclass DKModel(models.Model):\n    class Meta:\n        abstract = True\n\n    deleted = models.BooleanField(default=False)\n    date_created = models.DateTimeField('Date created', auto_now_add=True)\n    date_last_updated = models.DateTimeField('Data last updated', auto_now=True)\n\n    def __id__(self) -> int:\n        return self.id\n\n    def delete(self, *args, **kwargs):\n        self.deleted = True\n        self.save()\n\n    def hard_delete(self, *args, **kwargs):\n        super().delete(*args, **kwargs)\n        \n                      ....\n\n# views.py\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import generics\nfrom django.shortcuts import get_object_or_404\nfrom .models import Expense, Category, Balance, User\nfrom .serializers import ExpenseSerializer, CategorySerializer, BalanceSerializer\n\nclass ExpenseListView(generics.ListCreateAPIView):\n    queryset = Expense.objects.all()\n    serializer_class = ExpenseSerializer\n\nclass ExpenseDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Expense.objects.all()\n    serializer_class = ExpenseSerializer\n\nclass CategoryListView(generics.ListCreateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n\nclass CategoryDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n\nclass BalanceListView(generics.ListCreateAPIView):\n    queryset = Balance.objects.all()\n    serializer_class = BalanceSerializer\n\nclass UserTotalExpensesView(APIView):\n    def get(self, request, user_id):\n        user = get_object_or_404(User, id=user_id)\n        total_expenses = user.get_total_expenses()\n        return Response({'total_expenses': total_expenses})\n\n# urls.py\nfrom django.urls import path\nfrom .views import ExpenseListView, ExpenseDetailView, CategoryListView, CategoryDetailView, BalanceListView, UserTotalExpensesView\n\nurlpatterns = [\n    path('expenses/', ExpenseListView.as_view(), name='expense-list'),\n    path('expenses/<int:pk>/', ExpenseDetailView.as_view(), name='expense-detail'),\n    path('categories/', CategoryListView.as_view(), name='category-list'),\n    path('categories/<int:pk>/', CategoryDetailView.as_view(), name='category-detail'),\n    path('balances/', BalanceListView.as_view(), name='balance-list'),\n    path('users/<int:user_id>/total-expenses/', UserTotalExpensesView.as_view(), name='user-total-expenses'),\n]\n```\n\n# 5. SOLID Principles\n\nSOLID은 소프트웨어 디자인을 더 이해하기 쉽고 유연하며 유지보수하기 쉽도록 하는 다섯 가지 디자인 원칙을 의미하는 머릿글자입니다.\n\n<div class=\"content-ad\"></div>\n\n## S: 단일 책임 원칙 (SRP)\n\n각 클래스는 하나의 책임만을 가져야 합니다.\n\n```js\n# model/models.py\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\nclass DKModel(models.Model):\n    class Meta:\n        abstract = True\n\n    deleted = models.BooleanField(default=False)\n    date_created = models.DateTimeField('생성 날짜', auto_now_add=True)\n    date_last_updated = models.DateTimeField('마지막으로 업데이트된 날짜', auto_now=True)\n\n    def __id__(self) -> int:\n        return self.id\n\n    def delete(self, *args, **kwargs):\n        self.deleted = True\n        self.save()\n\n    def hard_delete(self, *args, **kwargs):\n        super().delete(*args, **kwargs)\n\n\nclass User(AbstractUser):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    email = models.EmailField(unique=True)\n\n    def __str__(self):\n        return self.username\n\n\nclass Category(DKModel):\n    class Meta:\n        verbose_name = \"카테고리\"\n        verbose_name_plural = \"카테고리들\"\n        db_table = \"dk_category\"\n\n    name = models.CharField('이름', max_length=100, unique=True)\n    description = models.TextField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Expense(DKModel):\n    class Meta:\n        verbose_name = \"지출\"\n        verbose_name_plural = \"지출들\"\n        db_table = \"dk_expense\"\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    date = models.DateField()\n\n\nclass Balance(models.Model):\n    class Meta:\n        verbose_name = \"잔고\"\n        verbose_name_plural = \"잔고들\"\n        db_table = \"dk_balance\"\n\n    total_balance = models.DecimalField(max_digits=10, decimal_places=2)\n```\n\n## O: 개방/폐쇄 원칙 (OCP)\n\n<div class=\"content-ad\"></div>\n\n소프트웨어 엔티티들은 확장에는 열려 있지만 수정에는 닫혀 있어야 합니다.\n\n```python\n# middleware.py\nfrom django.http import HttpResponse\n\nclass BaseMiddleware:\n    def process_request(self, request):\n        raise NotImplementedError\n\nclass AuthMiddleware(BaseMiddleware):\n    def process_request(self, request):\n        if not request.user.is_authenticated:\n            return HttpResponse('Unauthorized', status=401)\n```\n\n### L: 리스코프 치환 원칙 (LSP)\n\n슈퍼클래스의 객체는 서브클래스의 객체로 대체할 수 있어야 하며, 프로그램의 정확성에 영향을 주지 않아야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n# models.py\n\nclass Notification:\n    def send(self):\n        raise NotImplementedError\n\nclass EmailNotification(Notification):\n    def send(self):\n        print(\"이메일 보내는 중\")\n\nclass SMSNotification(Notification):\n    def send(self):\n        print(\"SMS 보내는 중\")\n\ndef notify(notification: Notification):\n    notification.send()\n\n# 사용 예시\nemail_notification = EmailNotification()\nsms_notification = SMSNotification()\n\nnotify(email_notification)  # 출력: 이메일 보내는 중\nnotify(sms_notification)    # 출력: SMS 보내는 중\n```\n\n## I: 인터페이스 분리 원칙 (ISP)\n\n클라이언트는 사용하지 않는 인터페이스에 종속되도록 강요되어서는 안됩니다.\n\n```js\n# 더 큰 뷰를 분리함으로써 인터페이스 분리\nfrom django.views import View\nfrom django.http import JsonResponse\n\nclass CreateMixin:\n    def create(self, request, *args, **kwargs):\n        return JsonResponse({'message': '생성 기능이 구현되지 않았습니다.'}, status=405)\n\nclass ReadMixin:\n    def read(self, request, *args, **kwargs):\n        return JsonResponse({'message': '조회 기능이 구현되지 않았습니다.'}, status=405)\n\nclass UpdateMixin:\n    def update(self, request, *args, **kwargs):\n        return JsonResponse({'message': '수정 기능이 구현되지 않았습니다.'}, status=405)\n\nclass DeleteMixin:\n    def delete(self, request, *args, **kwargs):\n        return JsonResponse({'message': '삭제 기능이 구현되지 않았습니다.'}, status=405)\n\nclass MyView(CreateMixin, ReadMixin, View):\n    def read(self, request, *args, **kwargs):\n        return JsonResponse({'message': '데이터 조회 중'})\n```\n\n<div class=\"content-ad\"></div>\n\n## D: 의존 역전 원칙 (DIP)\n\n고수준 모듈은 저수준 모듈에 의존해서는 안 됩니다. 둘 모두 추상화에 의존해야 합니다.\n\n```js\nclass PaymentService:\n    def process_payment(self):\n        raise NotImplementedError\n\nclass StripePaymentService(PaymentService):\n    def process_payment(self):\n        print(\"Stripe로 결제 처리 중\")\n\nclass PayPalPaymentService(PaymentService):\n    def process_payment(self):\n        print(\"PayPal로 결제 처리 중\")\n\n# views.py\nfrom .services import PaymentService\n\nclass PaymentView(View):\n    def __init__(self, payment_service: PaymentService):\n        self.payment_service = payment_service\n\n    def post(self, request, *args, **kwargs):\n        self.payment_service.process_payment()\n        return JsonResponse({'message': '결제가 완료되었습니다'})\n\n# 사용법\nstripe_service = StripePaymentService()\npaypal_service = PayPalPaymentService()\n\nstripe_payment_view = PaymentView(stripe_service)\npaypal_payment_view = PaymentView(paypal_service)\n```","ogImage":{"url":"/assets/img/2024-06-20-DesignPrinciplesinPythonDjango_0.png"},"coverImage":"/assets/img/2024-06-20-DesignPrinciplesinPythonDjango_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>파이썬에서의 디자인 원칙은 다른 프로그래밍 언어와 마찬가지로 깔끔하고 유지보수가 용이하며 효율적인 코드를 만드는 데 도움이 됩니다. 다음은 몇 가지 주요 디자인 원칙과 예시입니다:</p>\n<p><img src=\"/assets/img/2024-06-20-DesignPrinciplesinPythonDjango_0.png\" alt=\"Design Principles in Python\"></p>\n<h2>1. DRY(Don’t Repeat Yourself)</h2>\n<p>코드의 중복을 피하기 위해 반복되는 패턴을 함수나 클래스로 추상화합니다.</p>\n<div class=\"content-ad\"></div>\n<p>장고는 ORM, 폼 및 관리자 인터페이스를 통해 DRY 원칙을 자연스럽게 촉진합니다.</p>\n<h2>예시: 시리얼라이저 사용하기</h2>\n<p>DRF 시리얼라이저를 사용하면 유효성 검사 로직을 별도로 작성하는 대신, 해당 로직을 시리얼라이저 자체에 캡슐화할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"># serializers.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> rest_framework <span class=\"hljs-keyword\">import</span> serializers\n<span class=\"hljs-keyword\">from</span> .<span class=\"hljs-property\">models</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Expense</span>, <span class=\"hljs-title class_\">Category</span>, <span class=\"hljs-title class_\">Balance</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExpenseSerializer</span>(serializers.<span class=\"hljs-property\">ModelSerializer</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n        model = <span class=\"hljs-title class_\">Expense</span>\n        fields = [<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'user'</span>, <span class=\"hljs-string\">'category'</span>, <span class=\"hljs-string\">'amount'</span>, <span class=\"hljs-string\">'description'</span>, <span class=\"hljs-string\">'date'</span>]\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CategorySerializer</span>(serializers.<span class=\"hljs-property\">ModelSerializer</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n        model = <span class=\"hljs-title class_\">Category</span>\n        fields = [<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'description'</span>, <span class=\"hljs-string\">'user'</span>]\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BalanceSerializer</span>(serializers.<span class=\"hljs-property\">ModelSerializer</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n        model = <span class=\"hljs-title class_\">Balance</span>\n        fields = [<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'total_balance'</span>]\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>2. KISS (Keep It Simple, Stupid)</h1>\n<p>코드를 가능한 한 간단하게 유지하세요. 불필요한 복잡성을 피하세요.</p>\n<p>Django의 설계 철학은 간결성과 가독성을 강조합니다.</p>\n<h2>예시: Django Rest Framework의 일반 뷰 사용</h2>\n<div class=\"content-ad\"></div>\n<p>복잡한 뷰 로직을 작성하는 대신, DRF의 일반적인 뷰를 사용하여 객체 생성, 검색 및 목록을 처리할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"># views.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> rest_framework <span class=\"hljs-keyword\">import</span> generics\n<span class=\"hljs-keyword\">from</span> .<span class=\"hljs-property\">models</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Expense</span>, <span class=\"hljs-title class_\">Category</span>, <span class=\"hljs-title class_\">Balance</span>\n<span class=\"hljs-keyword\">from</span> .<span class=\"hljs-property\">serializers</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ExpenseSerializer</span>, <span class=\"hljs-title class_\">CategorySerializer</span>, <span class=\"hljs-title class_\">BalanceSerializer</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExpenseListView</span>(generics.<span class=\"hljs-property\">ListCreateAPIView</span>):\n    queryset = <span class=\"hljs-title class_\">Expense</span>.<span class=\"hljs-property\">objects</span>.<span class=\"hljs-title function_\">all</span>()\n    serializer_class = <span class=\"hljs-title class_\">ExpenseSerializer</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExpenseDetailView</span>(generics.<span class=\"hljs-property\">RetrieveUpdateDestroyAPIView</span>):\n    queryset = <span class=\"hljs-title class_\">Expense</span>.<span class=\"hljs-property\">objects</span>.<span class=\"hljs-title function_\">all</span>()\n    serializer_class = <span class=\"hljs-title class_\">ExpenseSerializer</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CategoryListView</span>(generics.<span class=\"hljs-property\">ListCreateAPIView</span>):\n    queryset = <span class=\"hljs-title class_\">Category</span>.<span class=\"hljs-property\">objects</span>.<span class=\"hljs-title function_\">all</span>()\n    serializer_class = <span class=\"hljs-title class_\">CategorySerializer</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CategoryDetailView</span>(generics.<span class=\"hljs-property\">RetrieveUpdateDestroyAPIView</span>):\n    queryset = <span class=\"hljs-title class_\">Category</span>.<span class=\"hljs-property\">objects</span>.<span class=\"hljs-title function_\">all</span>()\n    serializer_class = <span class=\"hljs-title class_\">CategorySerializer</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BalanceListView</span>(generics.<span class=\"hljs-property\">ListCreateAPIView</span>):\n    queryset = <span class=\"hljs-title class_\">Balance</span>.<span class=\"hljs-property\">objects</span>.<span class=\"hljs-title function_\">all</span>()\n    serializer_class = <span class=\"hljs-title class_\">BalanceSerializer</span>\n</code></pre>\n<h1>3. YAGNI (You Ain’t Gonna Need It)</h1>\n<p>필요할 때까지 기능을 추가하지 마세요.</p>\n<div class=\"content-ad\"></div>\n<p>현재 요구 사항에 주안점을 두세요. 미래의 가능성에 집중하기보다는 현재의 요구 사항을 중심으로 작업하세요.</p>\n<h2>예: 간단한 사용자 프로필</h2>\n<p>간단한 사용자 모델로 시작하고 필요할 때만 복잡성을 추가하세요.</p>\n<pre><code class=\"hljs language-js\"># models.<span class=\"hljs-property\">py</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span>(<span class=\"hljs-title class_\">AbstractUser</span>):\n    first_name = models.<span class=\"hljs-title class_\">CharField</span>(max_length=<span class=\"hljs-number\">30</span>)\n    last_name = models.<span class=\"hljs-title class_\">CharField</span>(max_length=<span class=\"hljs-number\">30</span>)\n    email = models.<span class=\"hljs-title class_\">EmailField</span>(unique=<span class=\"hljs-title class_\">True</span>)\n\n    def <span class=\"hljs-title function_\">__str__</span>(self):\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">username</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>4. 역할의 분리</h1>\n<p>여러분의 코드의 각 부분은 서로 다른 책임을 가져야 합니다.</p>\n<p>장고의 MVC (Model-View-Controller) 아키텍처는 데이터 처리를 분리한 모델(models), 사용자 인터페이스를 분리한 템플릿(templates), 그리고 응용 프로그램 로직을 분리한 뷰(views)로 구성됩니다.</p>\n<h2>예시: 뷰에서 비즈니스 로직 분리</h2>\n<div class=\"content-ad\"></div>\n<p>비즈니스 로직은 뷰가 아닌 모델이나 서비스에 유지하는 것이 좋습니다.</p>\n<pre><code class=\"hljs language-js\"># models.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">contrib</span>.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-property\">models</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">AbstractUser</span>\n<span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">db</span> <span class=\"hljs-keyword\">import</span> models\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DKModel</span>(models.<span class=\"hljs-property\">Model</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n        abstract = <span class=\"hljs-title class_\">True</span>\n\n    deleted = models.<span class=\"hljs-title class_\">BooleanField</span>(<span class=\"hljs-keyword\">default</span>=<span class=\"hljs-title class_\">False</span>)\n    date_created = models.<span class=\"hljs-title class_\">DateTimeField</span>(<span class=\"hljs-string\">'Date created'</span>, auto_now_add=<span class=\"hljs-title class_\">True</span>)\n    date_last_updated = models.<span class=\"hljs-title class_\">DateTimeField</span>(<span class=\"hljs-string\">'Data last updated'</span>, auto_now=<span class=\"hljs-title class_\">True</span>)\n\n    def <span class=\"hljs-title function_\">__id__</span>(self) -> <span class=\"hljs-attr\">int</span>:\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">id</span>\n\n    def <span class=\"hljs-title function_\">delete</span>(self, *args, **kwargs):\n        self.<span class=\"hljs-property\">deleted</span> = <span class=\"hljs-title class_\">True</span>\n        self.<span class=\"hljs-title function_\">save</span>()\n\n    def <span class=\"hljs-title function_\">hard_delete</span>(self, *args, **kwargs):\n        <span class=\"hljs-variable language_\">super</span>().<span class=\"hljs-title function_\">delete</span>(*args, **kwargs)\n        \n                      ....\n\n# views.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> rest_framework.<span class=\"hljs-property\">views</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">APIView</span>\n<span class=\"hljs-keyword\">from</span> rest_framework.<span class=\"hljs-property\">response</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Response</span>\n<span class=\"hljs-keyword\">from</span> rest_framework <span class=\"hljs-keyword\">import</span> generics\n<span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">shortcuts</span> <span class=\"hljs-keyword\">import</span> get_object_or_404\n<span class=\"hljs-keyword\">from</span> .<span class=\"hljs-property\">models</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Expense</span>, <span class=\"hljs-title class_\">Category</span>, <span class=\"hljs-title class_\">Balance</span>, <span class=\"hljs-title class_\">User</span>\n<span class=\"hljs-keyword\">from</span> .<span class=\"hljs-property\">serializers</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ExpenseSerializer</span>, <span class=\"hljs-title class_\">CategorySerializer</span>, <span class=\"hljs-title class_\">BalanceSerializer</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExpenseListView</span>(generics.<span class=\"hljs-property\">ListCreateAPIView</span>):\n    queryset = <span class=\"hljs-title class_\">Expense</span>.<span class=\"hljs-property\">objects</span>.<span class=\"hljs-title function_\">all</span>()\n    serializer_class = <span class=\"hljs-title class_\">ExpenseSerializer</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExpenseDetailView</span>(generics.<span class=\"hljs-property\">RetrieveUpdateDestroyAPIView</span>):\n    queryset = <span class=\"hljs-title class_\">Expense</span>.<span class=\"hljs-property\">objects</span>.<span class=\"hljs-title function_\">all</span>()\n    serializer_class = <span class=\"hljs-title class_\">ExpenseSerializer</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CategoryListView</span>(generics.<span class=\"hljs-property\">ListCreateAPIView</span>):\n    queryset = <span class=\"hljs-title class_\">Category</span>.<span class=\"hljs-property\">objects</span>.<span class=\"hljs-title function_\">all</span>()\n    serializer_class = <span class=\"hljs-title class_\">CategorySerializer</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CategoryDetailView</span>(generics.<span class=\"hljs-property\">RetrieveUpdateDestroyAPIView</span>):\n    queryset = <span class=\"hljs-title class_\">Category</span>.<span class=\"hljs-property\">objects</span>.<span class=\"hljs-title function_\">all</span>()\n    serializer_class = <span class=\"hljs-title class_\">CategorySerializer</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BalanceListView</span>(generics.<span class=\"hljs-property\">ListCreateAPIView</span>):\n    queryset = <span class=\"hljs-title class_\">Balance</span>.<span class=\"hljs-property\">objects</span>.<span class=\"hljs-title function_\">all</span>()\n    serializer_class = <span class=\"hljs-title class_\">BalanceSerializer</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserTotalExpensesView</span>(<span class=\"hljs-title class_\">APIView</span>):\n    def <span class=\"hljs-title function_\">get</span>(self, request, user_id):\n        user = <span class=\"hljs-title function_\">get_object_or_404</span>(<span class=\"hljs-title class_\">User</span>, id=user_id)\n        total_expenses = user.<span class=\"hljs-title function_\">get_total_expenses</span>()\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Response</span>({<span class=\"hljs-string\">'total_expenses'</span>: total_expenses})\n\n# urls.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">urls</span> <span class=\"hljs-keyword\">import</span> path\n<span class=\"hljs-keyword\">from</span> .<span class=\"hljs-property\">views</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ExpenseListView</span>, <span class=\"hljs-title class_\">ExpenseDetailView</span>, <span class=\"hljs-title class_\">CategoryListView</span>, <span class=\"hljs-title class_\">CategoryDetailView</span>, <span class=\"hljs-title class_\">BalanceListView</span>, <span class=\"hljs-title class_\">UserTotalExpensesView</span>\n\nurlpatterns = [\n    <span class=\"hljs-title function_\">path</span>(<span class=\"hljs-string\">'expenses/'</span>, <span class=\"hljs-title class_\">ExpenseListView</span>.<span class=\"hljs-title function_\">as_view</span>(), name=<span class=\"hljs-string\">'expense-list'</span>),\n    <span class=\"hljs-title function_\">path</span>(<span class=\"hljs-string\">'expenses/&#x3C;int:pk>/'</span>, <span class=\"hljs-title class_\">ExpenseDetailView</span>.<span class=\"hljs-title function_\">as_view</span>(), name=<span class=\"hljs-string\">'expense-detail'</span>),\n    <span class=\"hljs-title function_\">path</span>(<span class=\"hljs-string\">'categories/'</span>, <span class=\"hljs-title class_\">CategoryListView</span>.<span class=\"hljs-title function_\">as_view</span>(), name=<span class=\"hljs-string\">'category-list'</span>),\n    <span class=\"hljs-title function_\">path</span>(<span class=\"hljs-string\">'categories/&#x3C;int:pk>/'</span>, <span class=\"hljs-title class_\">CategoryDetailView</span>.<span class=\"hljs-title function_\">as_view</span>(), name=<span class=\"hljs-string\">'category-detail'</span>),\n    <span class=\"hljs-title function_\">path</span>(<span class=\"hljs-string\">'balances/'</span>, <span class=\"hljs-title class_\">BalanceListView</span>.<span class=\"hljs-title function_\">as_view</span>(), name=<span class=\"hljs-string\">'balance-list'</span>),\n    <span class=\"hljs-title function_\">path</span>(<span class=\"hljs-string\">'users/&#x3C;int:user_id>/total-expenses/'</span>, <span class=\"hljs-title class_\">UserTotalExpensesView</span>.<span class=\"hljs-title function_\">as_view</span>(), name=<span class=\"hljs-string\">'user-total-expenses'</span>),\n]\n</code></pre>\n<h1>5. SOLID Principles</h1>\n<p>SOLID은 소프트웨어 디자인을 더 이해하기 쉽고 유연하며 유지보수하기 쉽도록 하는 다섯 가지 디자인 원칙을 의미하는 머릿글자입니다.</p>\n<div class=\"content-ad\"></div>\n<h2>S: 단일 책임 원칙 (SRP)</h2>\n<p>각 클래스는 하나의 책임만을 가져야 합니다.</p>\n<pre><code class=\"hljs language-js\"># model/models.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">contrib</span>.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-property\">models</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">AbstractUser</span>\n<span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">db</span> <span class=\"hljs-keyword\">import</span> models\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DKModel</span>(models.<span class=\"hljs-property\">Model</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n        abstract = <span class=\"hljs-title class_\">True</span>\n\n    deleted = models.<span class=\"hljs-title class_\">BooleanField</span>(<span class=\"hljs-keyword\">default</span>=<span class=\"hljs-title class_\">False</span>)\n    date_created = models.<span class=\"hljs-title class_\">DateTimeField</span>(<span class=\"hljs-string\">'생성 날짜'</span>, auto_now_add=<span class=\"hljs-title class_\">True</span>)\n    date_last_updated = models.<span class=\"hljs-title class_\">DateTimeField</span>(<span class=\"hljs-string\">'마지막으로 업데이트된 날짜'</span>, auto_now=<span class=\"hljs-title class_\">True</span>)\n\n    def <span class=\"hljs-title function_\">__id__</span>(self) -> <span class=\"hljs-attr\">int</span>:\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">id</span>\n\n    def <span class=\"hljs-title function_\">delete</span>(self, *args, **kwargs):\n        self.<span class=\"hljs-property\">deleted</span> = <span class=\"hljs-title class_\">True</span>\n        self.<span class=\"hljs-title function_\">save</span>()\n\n    def <span class=\"hljs-title function_\">hard_delete</span>(self, *args, **kwargs):\n        <span class=\"hljs-variable language_\">super</span>().<span class=\"hljs-title function_\">delete</span>(*args, **kwargs)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span>(<span class=\"hljs-title class_\">AbstractUser</span>):\n    first_name = models.<span class=\"hljs-title class_\">CharField</span>(max_length=<span class=\"hljs-number\">30</span>)\n    last_name = models.<span class=\"hljs-title class_\">CharField</span>(max_length=<span class=\"hljs-number\">30</span>)\n    email = models.<span class=\"hljs-title class_\">EmailField</span>(unique=<span class=\"hljs-title class_\">True</span>)\n\n    def <span class=\"hljs-title function_\">__str__</span>(self):\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">username</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Category</span>(<span class=\"hljs-title class_\">DKModel</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n        verbose_name = <span class=\"hljs-string\">\"카테고리\"</span>\n        verbose_name_plural = <span class=\"hljs-string\">\"카테고리들\"</span>\n        db_table = <span class=\"hljs-string\">\"dk_category\"</span>\n\n    name = models.<span class=\"hljs-title class_\">CharField</span>(<span class=\"hljs-string\">'이름'</span>, max_length=<span class=\"hljs-number\">100</span>, unique=<span class=\"hljs-title class_\">True</span>)\n    description = models.<span class=\"hljs-title class_\">TextField</span>()\n    user = models.<span class=\"hljs-title class_\">ForeignKey</span>(<span class=\"hljs-title class_\">User</span>, on_delete=models.<span class=\"hljs-property\">CASCADE</span>)\n\n    def <span class=\"hljs-title function_\">__str__</span>(self):\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">name</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Expense</span>(<span class=\"hljs-title class_\">DKModel</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n        verbose_name = <span class=\"hljs-string\">\"지출\"</span>\n        verbose_name_plural = <span class=\"hljs-string\">\"지출들\"</span>\n        db_table = <span class=\"hljs-string\">\"dk_expense\"</span>\n\n    user = models.<span class=\"hljs-title class_\">ForeignKey</span>(<span class=\"hljs-title class_\">User</span>, on_delete=models.<span class=\"hljs-property\">CASCADE</span>)\n    category = models.<span class=\"hljs-title class_\">ForeignKey</span>(<span class=\"hljs-title class_\">Category</span>, on_delete=models.<span class=\"hljs-property\">CASCADE</span>)\n    amount = models.<span class=\"hljs-title class_\">DecimalField</span>(max_digits=<span class=\"hljs-number\">10</span>, decimal_places=<span class=\"hljs-number\">2</span>)\n    description = models.<span class=\"hljs-title class_\">TextField</span>()\n    date = models.<span class=\"hljs-title class_\">DateField</span>()\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Balance</span>(models.<span class=\"hljs-property\">Model</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n        verbose_name = <span class=\"hljs-string\">\"잔고\"</span>\n        verbose_name_plural = <span class=\"hljs-string\">\"잔고들\"</span>\n        db_table = <span class=\"hljs-string\">\"dk_balance\"</span>\n\n    total_balance = models.<span class=\"hljs-title class_\">DecimalField</span>(max_digits=<span class=\"hljs-number\">10</span>, decimal_places=<span class=\"hljs-number\">2</span>)\n</code></pre>\n<h2>O: 개방/폐쇄 원칙 (OCP)</h2>\n<div class=\"content-ad\"></div>\n<p>소프트웨어 엔티티들은 확장에는 열려 있지만 수정에는 닫혀 있어야 합니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># middleware.py</span>\n<span class=\"hljs-keyword\">from</span> django.http <span class=\"hljs-keyword\">import</span> HttpResponse\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BaseMiddleware</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">process_request</span>(<span class=\"hljs-params\">self, request</span>):\n        <span class=\"hljs-keyword\">raise</span> NotImplementedError\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthMiddleware</span>(<span class=\"hljs-title class_ inherited__\">BaseMiddleware</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">process_request</span>(<span class=\"hljs-params\">self, request</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> request.user.is_authenticated:\n            <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">'Unauthorized'</span>, status=<span class=\"hljs-number\">401</span>)\n</code></pre>\n<h3>L: 리스코프 치환 원칙 (LSP)</h3>\n<p>슈퍼클래스의 객체는 서브클래스의 객체로 대체할 수 있어야 하며, 프로그램의 정확성에 영향을 주지 않아야 합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"># models.<span class=\"hljs-property\">py</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Notification</span>:\n    def <span class=\"hljs-title function_\">send</span>(self):\n        raise <span class=\"hljs-title class_\">NotImplementedError</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EmailNotification</span>(<span class=\"hljs-title class_\">Notification</span>):\n    def <span class=\"hljs-title function_\">send</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"이메일 보내는 중\"</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SMSNotification</span>(<span class=\"hljs-title class_\">Notification</span>):\n    def <span class=\"hljs-title function_\">send</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"SMS 보내는 중\"</span>)\n\ndef <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-attr\">notification</span>: <span class=\"hljs-title class_\">Notification</span>):\n    notification.<span class=\"hljs-title function_\">send</span>()\n\n# 사용 예시\nemail_notification = <span class=\"hljs-title class_\">EmailNotification</span>()\nsms_notification = <span class=\"hljs-title class_\">SMSNotification</span>()\n\n<span class=\"hljs-title function_\">notify</span>(email_notification)  # 출력: 이메일 보내는 중\n<span class=\"hljs-title function_\">notify</span>(sms_notification)    # 출력: <span class=\"hljs-variable constant_\">SMS</span> 보내는 중\n</code></pre>\n<h2>I: 인터페이스 분리 원칙 (ISP)</h2>\n<p>클라이언트는 사용하지 않는 인터페이스에 종속되도록 강요되어서는 안됩니다.</p>\n<pre><code class=\"hljs language-js\"># 더 큰 뷰를 분리함으로써 인터페이스 분리\n<span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">views</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">View</span>\n<span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">http</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">JsonResponse</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreateMixin</span>:\n    def <span class=\"hljs-title function_\">create</span>(self, request, *args, **kwargs):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">JsonResponse</span>({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'생성 기능이 구현되지 않았습니다.'</span>}, status=<span class=\"hljs-number\">405</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReadMixin</span>:\n    def <span class=\"hljs-title function_\">read</span>(self, request, *args, **kwargs):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">JsonResponse</span>({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'조회 기능이 구현되지 않았습니다.'</span>}, status=<span class=\"hljs-number\">405</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UpdateMixin</span>:\n    def <span class=\"hljs-title function_\">update</span>(self, request, *args, **kwargs):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">JsonResponse</span>({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'수정 기능이 구현되지 않았습니다.'</span>}, status=<span class=\"hljs-number\">405</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DeleteMixin</span>:\n    def <span class=\"hljs-title function_\">delete</span>(self, request, *args, **kwargs):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">JsonResponse</span>({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'삭제 기능이 구현되지 않았습니다.'</span>}, status=<span class=\"hljs-number\">405</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyView</span>(<span class=\"hljs-title class_\">CreateMixin</span>, <span class=\"hljs-title class_\">ReadMixin</span>, <span class=\"hljs-title class_\">View</span>):\n    def <span class=\"hljs-title function_\">read</span>(self, request, *args, **kwargs):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">JsonResponse</span>({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'데이터 조회 중'</span>})\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>D: 의존 역전 원칙 (DIP)</h2>\n<p>고수준 모듈은 저수준 모듈에 의존해서는 안 됩니다. 둘 모두 추상화에 의존해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PaymentService</span>:\n    def <span class=\"hljs-title function_\">process_payment</span>(self):\n        raise <span class=\"hljs-title class_\">NotImplementedError</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StripePaymentService</span>(<span class=\"hljs-title class_\">PaymentService</span>):\n    def <span class=\"hljs-title function_\">process_payment</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Stripe로 결제 처리 중\"</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PayPalPaymentService</span>(<span class=\"hljs-title class_\">PaymentService</span>):\n    def <span class=\"hljs-title function_\">process_payment</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"PayPal로 결제 처리 중\"</span>)\n\n# views.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> .<span class=\"hljs-property\">services</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">PaymentService</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PaymentView</span>(<span class=\"hljs-title class_\">View</span>):\n    def <span class=\"hljs-title function_\">__init__</span>(self, <span class=\"hljs-attr\">payment_service</span>: <span class=\"hljs-title class_\">PaymentService</span>):\n        self.<span class=\"hljs-property\">payment_service</span> = payment_service\n\n    def <span class=\"hljs-title function_\">post</span>(self, request, *args, **kwargs):\n        self.<span class=\"hljs-property\">payment_service</span>.<span class=\"hljs-title function_\">process_payment</span>()\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">JsonResponse</span>({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'결제가 완료되었습니다'</span>})\n\n# 사용법\nstripe_service = <span class=\"hljs-title class_\">StripePaymentService</span>()\npaypal_service = <span class=\"hljs-title class_\">PayPalPaymentService</span>()\n\nstripe_payment_view = <span class=\"hljs-title class_\">PaymentView</span>(stripe_service)\npaypal_payment_view = <span class=\"hljs-title class_\">PaymentView</span>(paypal_service)\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}