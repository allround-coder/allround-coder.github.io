{"pageProps":{"post":{"title":"부모 요소를 벗어나는 플렉스 자식 요소 크기 조절 방법","description":"","date":"2024-06-20 06:00","slug":"2024-06-20-Preventflexchildfromgrowingoutofparent","content":"\n\n부모 요소 내에 맞춰 콘텐츠 크기를 줄이고 싶어요.\n\n콘텐츠(이 경우 비디오)는 축소되어 스크롤 막대가 허용되어야 합니다.\n\n정적 높이 값을 설정하지 않고 절대 위치를 지정하지 않고, 녹색 상자가 빨간 상자 내에 포함되도록 어떻게 해야 할까요?\n\n![이미지](/assets/img/2024-06-20-Preventflexchildfromgrowingoutofparent_0.png)\n\n<div class=\"content-ad\"></div>\n\n```js\n.my-box {\n  height: 300px;\n  width: 600px;\n  background: red;\n  padding: 5px;\n}\n.content-box {\n  background: blue;\n}\n.col {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between\n}\n.box-shrink {\n  flex: 0 1 auto;\n  background: green;\n  padding: 5px;\n  margin: 5px;\n}\n.box-grow {\n  flex: 1;\n  background: green;\n  padding: 5px;\n  margin: 5px;\n}\nvideo {\n  max-height: 100%;\n  max-width: 100%;\n  margin: auto;\n  display: block;\n}\n```\n\n```js\n<div class=\"my-box col\">\n  <div class=\"box-shrink\">\n    작은 크기의 정적 콘텐츠\n  </div>\n  <div class=\"content-box box-grow\">\n    <video controls>\n      <source src=\"http://techslides.com/demos/sample-videos/small.webm\" type=\"video/webm\">\n    </video>\n  </div>\n  <div class=\"box-shrink\">\n    작은 크기의 정적 콘텐츠\n  </div>\n</div>\n```\n\n# 해결책 #1 — 스크롤 없이\n\n비디오 컨테이너의 flex: 1 0 auto 대신에 flex: 1을 사용하십시오. 이는 항목을 내용의 내재 높이가 아닌 사용 가능한 공간에 기반하여 크기를 결정합니다.\n\n<div class=\"content-ad\"></div>\n\n그러면 flex 항목은 내용보다 작아질 수 없습니다. min-height: auto는 기본값이므로 min-height: 0을 추가하여 항목이 컨테이너 내에 들어갈 수 있도록 합니다.\n\n```js\n.box-grow {\n  flex: 1; /* 이전에는 flex: 1 0 auto; */\n  background: green;\n  padding: 5px;\n  margin: 5px;\n  min-height: 0; /* 새로운 속성 */\n}\n```\n\n# 해결책 #2 — 스크롤 기능 추가\n\n또는 비디오 컨테이너에 overflow: auto를 지정하여 위와 동일한 효과를 얻을 수 있지만 비디오를 전체 너비로 유지합니다. 이 기능을 활성화하려면 flex-shrink를 활성화해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n.box-grow {\n  flex: 1 1 auto; /* 이전에는 flex: 1 0 auto; 였습니다. */\n  background: green;\n  padding: 5px;\n  margin: 5px;\n  overflow: auto; /* 새로 추가된 스타일 */\n}\n```\n\n# 해결책 #3\n\n컨텐츠(이 경우 비디오)가 줄어들 수 있고 스크롤바가 허용되는 경우입니다. .box-grow 클래스에 overflow:auto;를 적용하고 flex-shrink: 1;를 설정해보는 것은 어떨까요? flex: 1 1 auto;와 같이 설정하면 됩니다. 또는 flex: 1 1 100%;로 설정하면 비디오가 .box-grow 클래스가 중앙에 맞게 표시되며, overflow:auto도 필요합니다.\n\n```js\n.my-box {\n    height: 300px;\n    width: 600px;\n    background: red;\n    padding: 5px;\n}\n\n.content-box {\n    background: blue;\n}\n\n.col {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n.box-shrink {\n    flex: 0 1 auto;\n    background: green;\n    padding: 5px;\n    margin: 5px;\n}\n\n.box-grow {\n    flex: 1 1 auto;  /* 기본값인 shrink 1로 설정합니다. */\n    background: green;\n    padding: 5px;\n    margin: 5px;\n    overflow:auto; /* flex:1 1 100%로 설정하면 overflow가 필요합니다. */\n}\n\nvideo {\n    max-height: 100%;\n    max-width: 100%;\n    margin: auto;\n    display: block;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n<div class=\"my-box col\">\n    <div class=\"box-shrink\">\n        작은 크기의 정적 콘텐츠\n    </div>\n    <div class=\"content-box box-grow\">\n        <video controls>\n            <source src=\"http://techslides.com/demos/sample-videos/small.webm\" type=\"video/webm\">\n        </video>\n    </div>\n    <div class=\"box-shrink\">\n        작은 크기의 정적 콘텐츠\n    </div>\n</div>\r\n```\n\n# 왜 플렉스 아이템이 콘텐츠 크기 아래로 줄어들지 않을까요?\n\n## 플렉스 아이템의 자동 최소 크기\n\n이는 플렉스박스의 기본 설정으로 인한 것입니다.\n\n<div class=\"content-ad\"></div>\n\n주축을 따라 플렉스 항목은 콘텐츠의 크기보다 작을 수 없어요.\n\n기본값은...\n\n- min-width: auto\n- min-height: auto\n\n...행 방향 및 열 방향의 플렉스 항목에 대해 각각 적용돼요.\n\n<div class=\"content-ad\"></div>\n\n여러분은 flex 항목을 다음과 같이 설정하여 기본값을 재정의할 수 있어요:\n\n- min-width: 0\n- min-height: 0\n- overflow: hidden (또는 다른 값, visible을 제외한)\n\n# Flexbox 명세\n\nauto 값에 대해서는...\n\n<div class=\"content-ad\"></div>\n\n다시 말해:\n\n- min-width: auto 및 min-height: auto 기본값은 오버플로우가 visible로 설정된 경우에만 적용됩니다.\n- 만약 오버플로우 값이 visible이 아닌 경우 min-size 속성의 값은 0이 됩니다.\n- 따라서 overflow: hidden은 min-width: 0 및 min-height: 0의 대안이 될 수 있습니다.\n\n그리고...\n\n- 최소 크기 조정 알고리즘은 주요 축에만 적용됩니다.\n- 예를 들어, 행 방향 컨테이너 내의 플렉스 항목은 기본적으로 min-height: auto를 적용받지 않습니다.\n- 보다 자세한 설명은 다음 게시물을 참조하세요:\n- flex-direction: row 및 flex-direction: column일 때 min-width가 다르게 렌더링됨\n\n<div class=\"content-ad\"></div>\n\n# 브라우저 렌더링 참고 사항\n\n- Chrome 대 Firefox / Edge\n적어도 2017년 이후로 Chrome은 min-width: 0 / min-height: 0 기본값으로 되돌아가거나(1) 특정 상황에서 신비한 알고리즘을 기반으로 0 기본값을 자동으로 적용하는 것으로 보입니다. (이를 개입(intervention)이라고도 할 수 있습니다.) 결과적으로 많은 사람들이 Chrome에서는 레이아웃(특히 원하는 스크롤 바)이 예상대로 작동하지만 Firefox / Edge에서는 그렇지 않다는 것을 알 수 있습니다. 이 문제에 대한 자세한 내용은 여기에서 다루고 있습니다: Firefox와 Chrome 사이의 flex-shrink 불일치\r\n- IE11\n명세서에 명시된 대로, min-width 및 min-height 속성의 auto 값은 \"new\"입니다. 이는 일부 브라우저가 아직 최신값을 적용하지 않을 수 있음을 의미합니다. 왜냐하면 일부 브라우저는 flex 레이아웃을 업데이트하기 전에 구현했기 때문에 CSS 2.1에서 min-width 및 min-height의 초기값이 0이었기 때문입니다. IE11와 같은 브라우저가 해당됩니다. 다른 브라우저들은 flexbox 명세에 정의된 최신 auto 값으로 업데이트되었습니다.","ogImage":{"url":"/assets/img/2024-06-20-Preventflexchildfromgrowingoutofparent_0.png"},"coverImage":"/assets/img/2024-06-20-Preventflexchildfromgrowingoutofparent_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>부모 요소 내에 맞춰 콘텐츠 크기를 줄이고 싶어요.</p>\n<p>콘텐츠(이 경우 비디오)는 축소되어 스크롤 막대가 허용되어야 합니다.</p>\n<p>정적 높이 값을 설정하지 않고 절대 위치를 지정하지 않고, 녹색 상자가 빨간 상자 내에 포함되도록 어떻게 해야 할까요?</p>\n<p><img src=\"/assets/img/2024-06-20-Preventflexchildfromgrowingoutofparent_0.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">my</span>-box {\n  <span class=\"hljs-attr\">height</span>: 300px;\n  <span class=\"hljs-attr\">width</span>: 600px;\n  <span class=\"hljs-attr\">background</span>: red;\n  <span class=\"hljs-attr\">padding</span>: 5px;\n}\n.<span class=\"hljs-property\">content</span>-box {\n  <span class=\"hljs-attr\">background</span>: blue;\n}\n.<span class=\"hljs-property\">col</span> {\n  <span class=\"hljs-attr\">display</span>: flex;\n  flex-<span class=\"hljs-attr\">direction</span>: column;\n  justify-<span class=\"hljs-attr\">content</span>: space-between\n}\n.<span class=\"hljs-property\">box</span>-shrink {\n  <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> auto;\n  <span class=\"hljs-attr\">background</span>: green;\n  <span class=\"hljs-attr\">padding</span>: 5px;\n  <span class=\"hljs-attr\">margin</span>: 5px;\n}\n.<span class=\"hljs-property\">box</span>-grow {\n  <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-attr\">background</span>: green;\n  <span class=\"hljs-attr\">padding</span>: 5px;\n  <span class=\"hljs-attr\">margin</span>: 5px;\n}\nvideo {\n  max-<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">100</span>%;\n  max-<span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>%;\n  <span class=\"hljs-attr\">margin</span>: auto;\n  <span class=\"hljs-attr\">display</span>: block;\n}\n</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"my-box col\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box-shrink\"</span>></span>\n    작은 크기의 정적 콘텐츠\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content-box box-grow\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">video</span> <span class=\"hljs-attr\">controls</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://techslides.com/demos/sample-videos/small.webm\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"video/webm\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">video</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box-shrink\"</span>></span>\n    작은 크기의 정적 콘텐츠\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n</code></pre>\n<h1>해결책 #1 — 스크롤 없이</h1>\n<p>비디오 컨테이너의 flex: 1 0 auto 대신에 flex: 1을 사용하십시오. 이는 항목을 내용의 내재 높이가 아닌 사용 가능한 공간에 기반하여 크기를 결정합니다.</p>\n<div class=\"content-ad\"></div>\n<p>그러면 flex 항목은 내용보다 작아질 수 없습니다. min-height: auto는 기본값이므로 min-height: 0을 추가하여 항목이 컨테이너 내에 들어갈 수 있도록 합니다.</p>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">box</span>-grow {\n  <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* 이전에는 flex: 1 0 auto; */</span>\n  <span class=\"hljs-attr\">background</span>: green;\n  <span class=\"hljs-attr\">padding</span>: 5px;\n  <span class=\"hljs-attr\">margin</span>: 5px;\n  min-<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* 새로운 속성 */</span>\n}\n</code></pre>\n<h1>해결책 #2 — 스크롤 기능 추가</h1>\n<p>또는 비디오 컨테이너에 overflow: auto를 지정하여 위와 동일한 효과를 얻을 수 있지만 비디오를 전체 너비로 유지합니다. 이 기능을 활성화하려면 flex-shrink를 활성화해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">box</span>-grow {\n  <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> auto; <span class=\"hljs-comment\">/* 이전에는 flex: 1 0 auto; 였습니다. */</span>\n  <span class=\"hljs-attr\">background</span>: green;\n  <span class=\"hljs-attr\">padding</span>: 5px;\n  <span class=\"hljs-attr\">margin</span>: 5px;\n  <span class=\"hljs-attr\">overflow</span>: auto; <span class=\"hljs-comment\">/* 새로 추가된 스타일 */</span>\n}\n</code></pre>\n<h1>해결책 #3</h1>\n<p>컨텐츠(이 경우 비디오)가 줄어들 수 있고 스크롤바가 허용되는 경우입니다. .box-grow 클래스에 overflow:auto;를 적용하고 flex-shrink: 1;를 설정해보는 것은 어떨까요? flex: 1 1 auto;와 같이 설정하면 됩니다. 또는 flex: 1 1 100%;로 설정하면 비디오가 .box-grow 클래스가 중앙에 맞게 표시되며, overflow:auto도 필요합니다.</p>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">my</span>-box {\n    <span class=\"hljs-attr\">height</span>: 300px;\n    <span class=\"hljs-attr\">width</span>: 600px;\n    <span class=\"hljs-attr\">background</span>: red;\n    <span class=\"hljs-attr\">padding</span>: 5px;\n}\n\n.<span class=\"hljs-property\">content</span>-box {\n    <span class=\"hljs-attr\">background</span>: blue;\n}\n\n.<span class=\"hljs-property\">col</span> {\n    <span class=\"hljs-attr\">display</span>: flex;\n    flex-<span class=\"hljs-attr\">direction</span>: column;\n    justify-<span class=\"hljs-attr\">content</span>: space-between;\n}\n\n.<span class=\"hljs-property\">box</span>-shrink {\n    <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> auto;\n    <span class=\"hljs-attr\">background</span>: green;\n    <span class=\"hljs-attr\">padding</span>: 5px;\n    <span class=\"hljs-attr\">margin</span>: 5px;\n}\n\n.<span class=\"hljs-property\">box</span>-grow {\n    <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> auto;  <span class=\"hljs-comment\">/* 기본값인 shrink 1로 설정합니다. */</span>\n    <span class=\"hljs-attr\">background</span>: green;\n    <span class=\"hljs-attr\">padding</span>: 5px;\n    <span class=\"hljs-attr\">margin</span>: 5px;\n    <span class=\"hljs-attr\">overflow</span>:auto; <span class=\"hljs-comment\">/* flex:1 1 100%로 설정하면 overflow가 필요합니다. */</span>\n}\n\nvideo {\n    max-<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">100</span>%;\n    max-<span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>%;\n    <span class=\"hljs-attr\">margin</span>: auto;\n    <span class=\"hljs-attr\">display</span>: block;\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"my-box col\"</span>>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box-shrink\"</span>></span>\n        작은 크기의 정적 콘텐츠\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content-box box-grow\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">video</span> <span class=\"hljs-attr\">controls</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://techslides.com/demos/sample-videos/small.webm\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"video/webm\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">video</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box-shrink\"</span>></span>\n        작은 크기의 정적 콘텐츠\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n</code></pre>\n<h1>왜 플렉스 아이템이 콘텐츠 크기 아래로 줄어들지 않을까요?</h1>\n<h2>플렉스 아이템의 자동 최소 크기</h2>\n<p>이는 플렉스박스의 기본 설정으로 인한 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>주축을 따라 플렉스 항목은 콘텐츠의 크기보다 작을 수 없어요.</p>\n<p>기본값은...</p>\n<ul>\n<li>min-width: auto</li>\n<li>min-height: auto</li>\n</ul>\n<p>...행 방향 및 열 방향의 플렉스 항목에 대해 각각 적용돼요.</p>\n<div class=\"content-ad\"></div>\n<p>여러분은 flex 항목을 다음과 같이 설정하여 기본값을 재정의할 수 있어요:</p>\n<ul>\n<li>min-width: 0</li>\n<li>min-height: 0</li>\n<li>overflow: hidden (또는 다른 값, visible을 제외한)</li>\n</ul>\n<h1>Flexbox 명세</h1>\n<p>auto 값에 대해서는...</p>\n<div class=\"content-ad\"></div>\n<p>다시 말해:</p>\n<ul>\n<li>min-width: auto 및 min-height: auto 기본값은 오버플로우가 visible로 설정된 경우에만 적용됩니다.</li>\n<li>만약 오버플로우 값이 visible이 아닌 경우 min-size 속성의 값은 0이 됩니다.</li>\n<li>따라서 overflow: hidden은 min-width: 0 및 min-height: 0의 대안이 될 수 있습니다.</li>\n</ul>\n<p>그리고...</p>\n<ul>\n<li>최소 크기 조정 알고리즘은 주요 축에만 적용됩니다.</li>\n<li>예를 들어, 행 방향 컨테이너 내의 플렉스 항목은 기본적으로 min-height: auto를 적용받지 않습니다.</li>\n<li>보다 자세한 설명은 다음 게시물을 참조하세요:</li>\n<li>flex-direction: row 및 flex-direction: column일 때 min-width가 다르게 렌더링됨</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>브라우저 렌더링 참고 사항</h1>\n<ul>\n<li>Chrome 대 Firefox / Edge\n적어도 2017년 이후로 Chrome은 min-width: 0 / min-height: 0 기본값으로 되돌아가거나(1) 특정 상황에서 신비한 알고리즘을 기반으로 0 기본값을 자동으로 적용하는 것으로 보입니다. (이를 개입(intervention)이라고도 할 수 있습니다.) 결과적으로 많은 사람들이 Chrome에서는 레이아웃(특히 원하는 스크롤 바)이 예상대로 작동하지만 Firefox / Edge에서는 그렇지 않다는 것을 알 수 있습니다. 이 문제에 대한 자세한 내용은 여기에서 다루고 있습니다: Firefox와 Chrome 사이의 flex-shrink 불일치</li>\n<li>IE11\n명세서에 명시된 대로, min-width 및 min-height 속성의 auto 값은 \"new\"입니다. 이는 일부 브라우저가 아직 최신값을 적용하지 않을 수 있음을 의미합니다. 왜냐하면 일부 브라우저는 flex 레이아웃을 업데이트하기 전에 구현했기 때문에 CSS 2.1에서 min-width 및 min-height의 초기값이 0이었기 때문입니다. IE11와 같은 브라우저가 해당됩니다. 다른 브라우저들은 flexbox 명세에 정의된 최신 auto 값으로 업데이트되었습니다.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}