{"pageProps":{"post":{"title":"필수 준비물","description":"","date":"2024-06-19 23:49","slug":"2024-06-19-Prerequisites","content":"\n\n## Next.js 어플리케이션에서 Keycloak 인증 구현하기\n\n![Prerequisites](/assets/img/2024-06-19-Prerequisites_0.png)\n\n이 튜토리얼에서는 오픈 소스 신원 및 접근 관리 솔루션인 Keycloak을 Next.js 어플리케이션에 통합하는 방법을 탐색할 것입니다. 이 가이드를 마치면 Keycloak을 사용한 완전히 기능적인 인증 시스템을 갖게 될 것입니다.\n\n# Prerequisites\n\n<div class=\"content-ad\"></div>\n\n다음 단계로 넘어가기 전에 다음 사전 요구 사항이 있는지 확인해 주세요:\n\n- Next.js의 기본적인 이해: Next.js의 기초 사항 및 페이지 및 컴포넌트를 생성하는 방법에 익숙해야 합니다.\n- Node.js 설치: 컴퓨터에 Node.js가 설치되어 있는지 확인해 주세요. nodejs.org에서 다운로드할 수 있습니다.\n- Keycloak 인스턴스: Keycloak 인스턴스를 설정해야 합니다. 아직 수행하지 않은 경우 Keycloak 시작 안내서를 따르세요.\n\n# 프로젝트 구조\n\n시작하기 전에, 프로젝트의 폴더 구조를 개요로 살펴봅시다. 각 파일이 어디에 속하는지 이해하는 데 도움이 될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n\nnextjs-app\n├── auth\n│   ├── config\n│   │   └── keycloak.js\n│   ├── provider\n│   │   └── KeycloakProvider.js\n│   ├── middleware\n│   │   └── withAuth.js\n│   └── components\n│       └── LogoutButton.js\n├── pages\n│   ├── _app.js\n│   └── index.js\n└── public\n└── styles\n    └── globals.css\n\n# 단계 1: Keycloak 설정하기\n\n먼저, Next.js 프로젝트에서 Keycloak을 구성해야 합니다. Keycloak은 애플리케이션과 연결하기 위해 초기 구성이 필요합니다. 설정 파일을 만들어 시작하겠습니다.\n\nKeycloak 설정 파일 만들기\n\n\n<div class=\"content-ad\"></div>\n\nconfig 디렉토리에 keycloak.js라는 새 파일을 만들어주세요. 이 파일은 Keycloak 설정과 초기화 로직을 담을 것입니다.\n\nauth/config/keycloak.js\n\n```js\nimport Keycloak from 'keycloak-js';\n\nconst keycloakConfig = {\n  url: 'http://localhost:8080/auth', // 여러분의 Keycloak URL로 교체해주세요\n  realm: 'your-realm', // 여러분의 Keycloak realm으로 교체해주세요\n  clientId: 'your-client-id', // 여러분의 Keycloak client ID로 교체해주세요\n};\n\nlet keycloak;\n\nif (typeof window !== 'undefined') {\n  keycloak = new Keycloak(keycloakConfig);\n}\n\nlet isInitialized = false;\n\nexport const initKeycloak = () => {\n  if (!isInitialized && keycloak) {\n    isInitialized = true;\n    return keycloak\n      .init({ onLoad: 'login-required', checkLoginIframe: false })\n      .then(authenticated => authenticated)\n      .catch(err => {\n        isInitialized = false;\n        console.error('Failed to initialize Keycloak', err);\n        throw err;\n      });\n  }\n  return Promise.resolve(keycloak?.authenticated ?? false);\n};\n\nexport const logout = () => {\n  if (keycloak) {\n    keycloak.logout();\n  }\n};\n\nexport const getToken = async () => {\n  if (keycloak) {\n    if (keycloak.isTokenExpired()) {\n      try {\n        await keycloak.updateToken(30);\n      } catch (error) {\n        console.error('Failed to refresh the token', error);\n        keycloak.logout();\n        return null;\n      }\n    }\n    return keycloak.token ?? null;\n  }\n  return null;\n};\n\nexport { keycloak };\n```\n\n해설\n\n<div class=\"content-ad\"></div>\n\n- Keycloak 구성: 우리는 Keycloak 구성 객체를 정의하여 Keycloak 서버의 URL, realm 및 클라이언트 ID를 지정합니다.\n- Keycloak 초기화: Keycloak를 초기화하기 위해 initKeycloak 함수를 생성합니다. 이 함수를 통해 Keycloak가 한 번만 초기화되도록 합니다.\n- 토큰 관리: getToken 함수는 토큰이 만료되었는지 확인하고 필요한 경우 새로 고침을 시도합니다.\n- 로그아웃 함수: logout 함수는 로그아웃 프로세스를 트리거합니다.\n\n# 단계 2: Keycloak 프로바이더 생성\n\nKeycloak의 상태를 관리하고 애플리케이션 전체에서 제공하기 위해 컨텍스트 프로바이더를 생성할 것입니다. 이를 통해 애플리케이션의 모든 구성 요소가 인증 상태와 사용자 정보에 액세스할 수 있게 됩니다.\n\nKeycloak 프로바이더 생성하기\n\n<div class=\"content-ad\"></div>\n\nauth/provider 디렉토리에 KeycloakProvider.js라는 새 파일을 만들어주세요.\n\nauth/provider/KeycloakProvider.js\n\n```js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { initKeycloak, keycloak, logout } from '../config/keycloak';\n\nconst KeycloakContext = createContext({\n  initialized: false,\n  authenticated: false,\n  user: null,\n  logout: () => {},\n});\n\nexport const KeycloakProvider = ({ children }) => {\n  const [initialized, setInitialized] = useState(false);\n  const [authenticated, setAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      initKeycloak()\n        .then(auth => {\n          setAuthenticated(auth);\n          if (keycloak && auth) {\n            setUser({\n              name: keycloak.tokenParsed?.preferred_username,\n              email: keycloak.tokenParsed?.email,\n            });\n          }\n          setInitialized(true);\n        })\n        .catch(err => console.error('Failed to initialize Keycloak', err));\n    }\n  }, []);\n\n  return (\n    <KeycloakContext.Provider value={{ initialized, authenticated, user, logout }}>\n      {children}\n    </KeycloakContext.Provider>\n  );\n};\n\nexport const useKeycloak = () => useContext(KeycloakContext);\r\n```\n\n해당 내용입니다.\n\n<div class=\"content-ad\"></div>\n\n- 컨텍스트 생성: 우리는 인증 상태를 유지하기 위해 KeycloakContext를 생성하고 애플리케이션에 제공합니다.\n- 제공자 컴포넌트: KeycloakProvider 컴포넌트는 Keycloak을 초기화하고 인증 상태를 관리합니다. 또한 로그아웃 기능과 사용자 정보를 제공합니다.\n- 사용자 지정 후크: useKeycloak 후크를 사용하여 어떤 컴포넌트에서든 Keycloak 컨텍스트에 쉽게 액세스할 수 있습니다.\n\n# 단계 3: 인증 미들웨어 생성\n\n우리의 경로를 보호하고 인증된 사용자만 액세스할 수 있도록 하기 위해 Higher-Order Component (HOC)를 생성할 것입니다.\n\n인증 미들웨어 생성하기\n\n<div class=\"content-ad\"></div>\n\nauth/middleware/withAuth.js 파일을 새로 만들어주세요.\n\nauth/middleware/withAuth.js\n\n```js\nimport React from 'react';\nimport { useKeycloak } from '../provider/KeycloakProvider';\n\nconst withAuth = WrappedComponent => {\n  return props => {\n    const { initialized, authenticated } = useKeycloak();\n\n    if (!initialized) {\n      return <div>Loading...</div>;\n    }\n\n    if (!authenticated) {\n      return <div>Not authenticated</div>;\n    }\n\n    return <WrappedComponent {...props} />;\n  };\n};\n\nexport default withAuth;\n```\n\n설명\n\n<div class=\"content-ad\"></div>\n\n- Higher-Order Component: withAuth HOC은 컴포넌트를 감싸고 사용자가 인증되었는지 확인합니다. 사용자가 인증되지 않은 경우 메시지를 표시하고, 그렇지 않은 경우 감싼 컴포넌트를 렌더링합니다.\n\n# 단계 4: 로그아웃 버튼 생성\n\n사용자가 세션에서 로그아웃할 수 있는 버튼 컴포넌트를 생성할 것입니다.\n\n로그아웃 버튼 만들기\n\n<div class=\"content-ad\"></div>\n\nauth/components/LogoutButton.js 파일을 auth/components 디렉토리에 만들어주세요.\n\n```js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useKeycloak } from '../provider/KeycloakProvider';\n\nconst LogoutButton = () => {\n  const { logout, user } = useKeycloak();\n  const [showDropdown, setShowDropdown] = useState(false);\n  const dropdownRef = useRef(null);\n\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown);\n  };\n\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setShowDropdown(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div className=\"relative inline-block text-left\">\n      <button onClick={toggleDropdown} className=\"button\">\n        {user?.name.charAt(0).toUpperCase() || 'U'}\n      </button>\n      {showDropdown && (\n        <div ref={dropdownRef} className=\"dropdown\">\n          <div className=\"dropdown-content\">\n            <p>{user?.name || 'Unknown User'}</p>\n            <p>{user?.email || 'Unknown User'}</p>\n            <button onClick={logout}>Logout</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LogoutButton;\n```\n\n<div class=\"content-ad\"></div>\n\n- 상태 관리: 우리는 dropdown 메뉴의 가시성을 관리하기 위해 useState를 사용합니다.\n- 드롭다운 토글: toggleDropdown 함수는 dropdown 메뉴의 가시성을 전환합니다.\n- 외부 클릭 핸들러: 우리는 useEffect를 사용하여 클릭 영역 밖을 클릭하면 dropdown 메뉴를 닫는 이벤트 리스너를 추가합니다.\n\n# 단계 5: 루트 레이아웃에서 Keycloak 제공자 사용하기\n\n마지막으로, 인증 상태를 응용 프로그램 전반에 걸쳐 제공하기 위해 Keycloak 제공자를 루트 레이아웃 파일에 통합해야 합니다.\n\n루트 레이아웃에서 Keycloak 통합하기\n\n<div class=\"content-ad\"></div>\n\npages/_app.js\n\n```js\nimport React from 'react';\nimport { KeycloakProvider } from '../auth/provider/KeycloakProvider';\nimport '../styles/globals.css';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <KeycloakProvider>\n      <Component {...pageProps} />\n    </KeycloakProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n설명\n\n<div class=\"content-ad\"></div>\n\n- Keycloak Provider: KeycloakProvider으로 컴포넌트를 감싸면 전체 애플리케이션이 인증 상태에 액세스할 수 있도록 보장합니다.\n\n# 인증이 포함된 예제 페이지\n\n다음은 withAuth HOC를 사용하여 보호된 페이지를 만들고 LogoutButton을 표시하는 예시입니다.\n\npages/index.js\n\n<div class=\"content-ad\"></div>\n\n```js\nimport React from 'react';\nimport withAuth from '../auth/middleware/withAuth';\nimport LogoutButton from '../auth/components/LogoutButton';\n\nconst HomePage = () => {\n  return (\n    <div>\n      <h1>Welcome to the Home Page</h1>\n      <LogoutButton />\n    </div>\n  );\n};\n\nexport default withAuth(HomePage);\r\n```\n\n설명\n\n- 보호된 라우트: 홈 페이지는 withAuth HOC로 감싸져 있어 인증된 사용자만 접근할 수 있습니다.\n- 로그아웃 버튼: 홈 페이지는 LogoutButton 컴포넌트를 포함하고 있어 사용자들이 로그아웃할 수 있습니다.\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n이 포괄적인 튜토리얼에서는 Next.js 애플리케이션에서 Keycloak 인증을 설정하는 과정을 안내했습니다. 다음 사항을 다루었습니다:\n\n- Keycloak 설정: Keycloak 구성 및 초기화 로직 생성.\n- Keycloak 제공자 생성: Keycloak 상태를 관리하고 애플리케이션 전반에 제공하는 방법.\n- 인증 미들웨어 생성: 고차 컴포넌트를 사용하여 경로를 보호하는 방법.\n- 로그아웃 버튼 생성: 사용자가 세션에서 로그아웃할 수 있는 기능.\n- 루트 레이아웃에 Keycloak 통합: 인증 상태를 전체 애플리케이션에 제공하고 경로를 보호하는 방법.\n\n이러한 단계를 통해 Keycloak을 사용하여 Next.js 애플리케이션을 안전하게 보호하고 강력한 인증 및 액세스 관리 기능을 제공할 수 있습니다. 이 설정을 원하는 대로 사용자 정의하고 확장하여 특정 요구 사항에 맞게 조정하세요. 즐거운 코딩하세요!\n\n<div class=\"content-ad\"></div>\n\n이 단계를 따라하면 Keycloak을 사용하여 Next.js 애플리케이션을 안전하게 보호할 수 있습니다. 견고한 인증 및 액세스 관리를 제공합니다. 이 설정을 사용자의 요구 사항에 맞게 사용자 정의하고 확장해도 됩니다. 즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-06-19-Prerequisites_0.png"},"coverImage":"/assets/img/2024-06-19-Prerequisites_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>Next.js 어플리케이션에서 Keycloak 인증 구현하기</h2>\n<p><img src=\"/assets/img/2024-06-19-Prerequisites_0.png\" alt=\"Prerequisites\"></p>\n<p>이 튜토리얼에서는 오픈 소스 신원 및 접근 관리 솔루션인 Keycloak을 Next.js 어플리케이션에 통합하는 방법을 탐색할 것입니다. 이 가이드를 마치면 Keycloak을 사용한 완전히 기능적인 인증 시스템을 갖게 될 것입니다.</p>\n<h1>Prerequisites</h1>\n<div class=\"content-ad\"></div>\n<p>다음 단계로 넘어가기 전에 다음 사전 요구 사항이 있는지 확인해 주세요:</p>\n<ul>\n<li>Next.js의 기본적인 이해: Next.js의 기초 사항 및 페이지 및 컴포넌트를 생성하는 방법에 익숙해야 합니다.</li>\n<li>Node.js 설치: 컴퓨터에 Node.js가 설치되어 있는지 확인해 주세요. nodejs.org에서 다운로드할 수 있습니다.</li>\n<li>Keycloak 인스턴스: Keycloak 인스턴스를 설정해야 합니다. 아직 수행하지 않은 경우 Keycloak 시작 안내서를 따르세요.</li>\n</ul>\n<h1>프로젝트 구조</h1>\n<p>시작하기 전에, 프로젝트의 폴더 구조를 개요로 살펴봅시다. 각 파일이 어디에 속하는지 이해하는 데 도움이 될 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>nextjs-app\n├── auth\n│   ├── config\n│   │   └── keycloak.js\n│   ├── provider\n│   │   └── KeycloakProvider.js\n│   ├── middleware\n│   │   └── withAuth.js\n│   └── components\n│       └── LogoutButton.js\n├── pages\n│   ├── _app.js\n│   └── index.js\n└── public\n└── styles\n└── globals.css</p>\n<h1>단계 1: Keycloak 설정하기</h1>\n<p>먼저, Next.js 프로젝트에서 Keycloak을 구성해야 합니다. Keycloak은 애플리케이션과 연결하기 위해 초기 구성이 필요합니다. 설정 파일을 만들어 시작하겠습니다.</p>\n<p>Keycloak 설정 파일 만들기</p>\n<div class=\"content-ad\"></div>\n<p>config 디렉토리에 keycloak.js라는 새 파일을 만들어주세요. 이 파일은 Keycloak 설정과 초기화 로직을 담을 것입니다.</p>\n<p>auth/config/keycloak.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Keycloak</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'keycloak-js'</span>;\n\n<span class=\"hljs-keyword\">const</span> keycloakConfig = {\n  <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'http://localhost:8080/auth'</span>, <span class=\"hljs-comment\">// 여러분의 Keycloak URL로 교체해주세요</span>\n  <span class=\"hljs-attr\">realm</span>: <span class=\"hljs-string\">'your-realm'</span>, <span class=\"hljs-comment\">// 여러분의 Keycloak realm으로 교체해주세요</span>\n  <span class=\"hljs-attr\">clientId</span>: <span class=\"hljs-string\">'your-client-id'</span>, <span class=\"hljs-comment\">// 여러분의 Keycloak client ID로 교체해주세요</span>\n};\n\n<span class=\"hljs-keyword\">let</span> keycloak;\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">window</span> !== <span class=\"hljs-string\">'undefined'</span>) {\n  keycloak = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Keycloak</span>(keycloakConfig);\n}\n\n<span class=\"hljs-keyword\">let</span> isInitialized = <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">initKeycloak</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">if</span> (!isInitialized &#x26;&#x26; keycloak) {\n    isInitialized = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">return</span> keycloak\n      .<span class=\"hljs-title function_\">init</span>({ <span class=\"hljs-attr\">onLoad</span>: <span class=\"hljs-string\">'login-required'</span>, <span class=\"hljs-attr\">checkLoginIframe</span>: <span class=\"hljs-literal\">false</span> })\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">authenticated</span> =></span> authenticated)\n      .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> {\n        isInitialized = <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'Failed to initialize Keycloak'</span>, err);\n        <span class=\"hljs-keyword\">throw</span> err;\n      });\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(keycloak?.<span class=\"hljs-property\">authenticated</span> ?? <span class=\"hljs-literal\">false</span>);\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">logout</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">if</span> (keycloak) {\n    keycloak.<span class=\"hljs-title function_\">logout</span>();\n  }\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getToken</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">if</span> (keycloak) {\n    <span class=\"hljs-keyword\">if</span> (keycloak.<span class=\"hljs-title function_\">isTokenExpired</span>()) {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">await</span> keycloak.<span class=\"hljs-title function_\">updateToken</span>(<span class=\"hljs-number\">30</span>);\n      } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'Failed to refresh the token'</span>, error);\n        keycloak.<span class=\"hljs-title function_\">logout</span>();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> keycloak.<span class=\"hljs-property\">token</span> ?? <span class=\"hljs-literal\">null</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n};\n\n<span class=\"hljs-keyword\">export</span> { keycloak };\n</code></pre>\n<p>해설</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>Keycloak 구성: 우리는 Keycloak 구성 객체를 정의하여 Keycloak 서버의 URL, realm 및 클라이언트 ID를 지정합니다.</li>\n<li>Keycloak 초기화: Keycloak를 초기화하기 위해 initKeycloak 함수를 생성합니다. 이 함수를 통해 Keycloak가 한 번만 초기화되도록 합니다.</li>\n<li>토큰 관리: getToken 함수는 토큰이 만료되었는지 확인하고 필요한 경우 새로 고침을 시도합니다.</li>\n<li>로그아웃 함수: logout 함수는 로그아웃 프로세스를 트리거합니다.</li>\n</ul>\n<h1>단계 2: Keycloak 프로바이더 생성</h1>\n<p>Keycloak의 상태를 관리하고 애플리케이션 전체에서 제공하기 위해 컨텍스트 프로바이더를 생성할 것입니다. 이를 통해 애플리케이션의 모든 구성 요소가 인증 상태와 사용자 정보에 액세스할 수 있게 됩니다.</p>\n<p>Keycloak 프로바이더 생성하기</p>\n<div class=\"content-ad\"></div>\n<p>auth/provider 디렉토리에 KeycloakProvider.js라는 새 파일을 만들어주세요.</p>\n<p>auth/provider/KeycloakProvider.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { createContext, useContext, useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { initKeycloak, keycloak, logout } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../config/keycloak'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">KeycloakContext</span> = <span class=\"hljs-title function_\">createContext</span>({\n  <span class=\"hljs-attr\">initialized</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">authenticated</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">user</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-attr\">logout</span>: <span class=\"hljs-function\">() =></span> {},\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">KeycloakProvider</span> = (<span class=\"hljs-params\">{ children }</span>) => {\n  <span class=\"hljs-keyword\">const</span> [initialized, setInitialized] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [authenticated, setAuthenticated] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [user, setUser] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">window</span> !== <span class=\"hljs-string\">'undefined'</span>) {\n      <span class=\"hljs-title function_\">initKeycloak</span>()\n        .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">auth</span> =></span> {\n          <span class=\"hljs-title function_\">setAuthenticated</span>(auth);\n          <span class=\"hljs-keyword\">if</span> (keycloak &#x26;&#x26; auth) {\n            <span class=\"hljs-title function_\">setUser</span>({\n              <span class=\"hljs-attr\">name</span>: keycloak.<span class=\"hljs-property\">tokenParsed</span>?.<span class=\"hljs-property\">preferred_username</span>,\n              <span class=\"hljs-attr\">email</span>: keycloak.<span class=\"hljs-property\">tokenParsed</span>?.<span class=\"hljs-property\">email</span>,\n            });\n          }\n          <span class=\"hljs-title function_\">setInitialized</span>(<span class=\"hljs-literal\">true</span>);\n        })\n        .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'Failed to initialize Keycloak'</span>, err));\n    }\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">KeycloakContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">initialized</span>, <span class=\"hljs-attr\">authenticated</span>, <span class=\"hljs-attr\">user</span>, <span class=\"hljs-attr\">logout</span> }}></span>\n      {children}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">KeycloakContext.Provider</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useKeycloak</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">KeycloakContext</span>);\n</code></pre>\n<p>해당 내용입니다.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>컨텍스트 생성: 우리는 인증 상태를 유지하기 위해 KeycloakContext를 생성하고 애플리케이션에 제공합니다.</li>\n<li>제공자 컴포넌트: KeycloakProvider 컴포넌트는 Keycloak을 초기화하고 인증 상태를 관리합니다. 또한 로그아웃 기능과 사용자 정보를 제공합니다.</li>\n<li>사용자 지정 후크: useKeycloak 후크를 사용하여 어떤 컴포넌트에서든 Keycloak 컨텍스트에 쉽게 액세스할 수 있습니다.</li>\n</ul>\n<h1>단계 3: 인증 미들웨어 생성</h1>\n<p>우리의 경로를 보호하고 인증된 사용자만 액세스할 수 있도록 하기 위해 Higher-Order Component (HOC)를 생성할 것입니다.</p>\n<p>인증 미들웨어 생성하기</p>\n<div class=\"content-ad\"></div>\n<p>auth/middleware/withAuth.js 파일을 새로 만들어주세요.</p>\n<p>auth/middleware/withAuth.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { useKeycloak } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../provider/KeycloakProvider'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">withAuth</span> = <span class=\"hljs-title class_\">WrappedComponent</span> => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =></span> {\n    <span class=\"hljs-keyword\">const</span> { initialized, authenticated } = <span class=\"hljs-title function_\">useKeycloak</span>();\n\n    <span class=\"hljs-keyword\">if</span> (!initialized) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Loading...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (!authenticated) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Not authenticated<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">WrappedComponent</span> {<span class=\"hljs-attr\">...props</span>} /></span></span>;\n  };\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> withAuth;\n</code></pre>\n<p>설명</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>Higher-Order Component: withAuth HOC은 컴포넌트를 감싸고 사용자가 인증되었는지 확인합니다. 사용자가 인증되지 않은 경우 메시지를 표시하고, 그렇지 않은 경우 감싼 컴포넌트를 렌더링합니다.</li>\n</ul>\n<h1>단계 4: 로그아웃 버튼 생성</h1>\n<p>사용자가 세션에서 로그아웃할 수 있는 버튼 컴포넌트를 생성할 것입니다.</p>\n<p>로그아웃 버튼 만들기</p>\n<div class=\"content-ad\"></div>\n<p>auth/components/LogoutButton.js 파일을 auth/components 디렉토리에 만들어주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState, useRef, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { useKeycloak } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../provider/KeycloakProvider'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">LogoutButton</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> { logout, user } = <span class=\"hljs-title function_\">useKeycloak</span>();\n  <span class=\"hljs-keyword\">const</span> [showDropdown, setShowDropdown] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> dropdownRef = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">toggleDropdown</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">setShowDropdown</span>(!showDropdown);\n  };\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleClickOutside</span> = event => {\n      <span class=\"hljs-keyword\">if</span> (dropdownRef.<span class=\"hljs-property\">current</span> &#x26;&#x26; !dropdownRef.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">contains</span>(event.<span class=\"hljs-property\">target</span>)) {\n        <span class=\"hljs-title function_\">setShowDropdown</span>(<span class=\"hljs-literal\">false</span>);\n      }\n    };\n\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'mousedown'</span>, handleClickOutside);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">'mousedown'</span>, handleClickOutside);\n    };\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"relative inline-block text-left\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleDropdown}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"button\"</span>></span>\n        {user?.name.charAt(0).toUpperCase() || 'U'}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      {showDropdown &#x26;&#x26; (\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{dropdownRef}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"dropdown\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"dropdown-content\"</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{user?.name || 'Unknown User'}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{user?.email || 'Unknown User'}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{logout}</span>></span>Logout<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      )}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">LogoutButton</span>;\n</code></pre>\n<div class=\"content-ad\"></div>\n<ul>\n<li>상태 관리: 우리는 dropdown 메뉴의 가시성을 관리하기 위해 useState를 사용합니다.</li>\n<li>드롭다운 토글: toggleDropdown 함수는 dropdown 메뉴의 가시성을 전환합니다.</li>\n<li>외부 클릭 핸들러: 우리는 useEffect를 사용하여 클릭 영역 밖을 클릭하면 dropdown 메뉴를 닫는 이벤트 리스너를 추가합니다.</li>\n</ul>\n<h1>단계 5: 루트 레이아웃에서 Keycloak 제공자 사용하기</h1>\n<p>마지막으로, 인증 상태를 응용 프로그램 전반에 걸쳐 제공하기 위해 Keycloak 제공자를 루트 레이아웃 파일에 통합해야 합니다.</p>\n<p>루트 레이아웃에서 Keycloak 통합하기</p>\n<div class=\"content-ad\"></div>\n<p>pages/_app.js</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">KeycloakProvider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../auth/provider/KeycloakProvider'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'../styles/globals.css'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyApp</span>(<span class=\"hljs-params\">{ Component, pageProps }</span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">KeycloakProvider</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Component</span> {<span class=\"hljs-attr\">...pageProps</span>} /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">KeycloakProvider</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">MyApp</span>;\n</code></pre>\n<p>설명</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>Keycloak Provider: KeycloakProvider으로 컴포넌트를 감싸면 전체 애플리케이션이 인증 상태에 액세스할 수 있도록 보장합니다.</li>\n</ul>\n<h1>인증이 포함된 예제 페이지</h1>\n<p>다음은 withAuth HOC를 사용하여 보호된 페이지를 만들고 LogoutButton을 표시하는 예시입니다.</p>\n<p>pages/index.js</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> withAuth <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../auth/middleware/withAuth'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">LogoutButton</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../auth/components/LogoutButton'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">HomePage</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Welcome to the Home Page<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">LogoutButton</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">withAuth</span>(<span class=\"hljs-title class_\">HomePage</span>);\n</code></pre>\n<p>설명</p>\n<ul>\n<li>보호된 라우트: 홈 페이지는 withAuth HOC로 감싸져 있어 인증된 사용자만 접근할 수 있습니다.</li>\n<li>로그아웃 버튼: 홈 페이지는 LogoutButton 컴포넌트를 포함하고 있어 사용자들이 로그아웃할 수 있습니다.</li>\n</ul>\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>이 포괄적인 튜토리얼에서는 Next.js 애플리케이션에서 Keycloak 인증을 설정하는 과정을 안내했습니다. 다음 사항을 다루었습니다:</p>\n<ul>\n<li>Keycloak 설정: Keycloak 구성 및 초기화 로직 생성.</li>\n<li>Keycloak 제공자 생성: Keycloak 상태를 관리하고 애플리케이션 전반에 제공하는 방법.</li>\n<li>인증 미들웨어 생성: 고차 컴포넌트를 사용하여 경로를 보호하는 방법.</li>\n<li>로그아웃 버튼 생성: 사용자가 세션에서 로그아웃할 수 있는 기능.</li>\n<li>루트 레이아웃에 Keycloak 통합: 인증 상태를 전체 애플리케이션에 제공하고 경로를 보호하는 방법.</li>\n</ul>\n<p>이러한 단계를 통해 Keycloak을 사용하여 Next.js 애플리케이션을 안전하게 보호하고 강력한 인증 및 액세스 관리 기능을 제공할 수 있습니다. 이 설정을 원하는 대로 사용자 정의하고 확장하여 특정 요구 사항에 맞게 조정하세요. 즐거운 코딩하세요!</p>\n<div class=\"content-ad\"></div>\n<p>이 단계를 따라하면 Keycloak을 사용하여 Next.js 애플리케이션을 안전하게 보호할 수 있습니다. 견고한 인증 및 액세스 관리를 제공합니다. 이 설정을 사용자의 요구 사항에 맞게 사용자 정의하고 확장해도 됩니다. 즐거운 코딩하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}