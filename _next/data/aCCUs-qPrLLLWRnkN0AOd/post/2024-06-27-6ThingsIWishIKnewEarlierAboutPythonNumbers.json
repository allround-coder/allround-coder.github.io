{"pageProps":{"post":{"title":"파이썬 숫자에 대해 미리 알았으면 좋았을 6가지 팁","description":"","date":"2024-06-27 17:55","slug":"2024-06-27-6ThingsIWishIKnewEarlierAboutPythonNumbers","content":"\n\n아래는 Mardown 형식을 사용한 표태그입니다:\n\n\n| 열1 | 열2 |\n|-----|-----|\n| 내용1 | 내용2 |\n| 내용3 | 내용4 |\n\n\n<div class=\"content-ad\"></div>\n\n```python\ny: float = 3.45e-4\n\nprint(y) # 0.000345\n```\n\n- 1.25e5 means 1.25 * 10 ^ 5 (which is 100000)\n- 3.45e-4 means 3.45 * 10 ^ -4 (which is 0.0001)\n\nWith this, we can easily type out very large and very small numbers without having to ensure that we’ve typed the correct number of zeros.\n\n# 2) We can insert underscores in our numbers\n\n\n<div class=\"content-ad\"></div>\n\n그래서 숫자를 읽기 쉽게 하기 위해 0을 모아 놓을 수 있습니다.\n\n```js\nx: int = 1_000_000_000\n\nprint(x) # 1000000000\n```\n\n^ 여기서는 3개의 0 사이마다 _ 하나를 넣어서 한 눈에 10억이라는 것을 알 수 있도록 만듭니다.\n\n```js\ny: int = 1_0_0_00_000\n\nprint(y) # 10000000\n```\n\n<div class=\"content-ad\"></div>\n\n^ 각 그룹당 3 개의 숫자가 있어야 하는 것은 의무적이 아닙니다. 원하는 만큼 많은 숫자 그룹당 0을 넣을 수 있지만, 저는 3개로 고정하는 것이 가장 읽기 쉽다고 생각했습니다.\n\n# 3) 음수 소수 자릿수로 round() 할 수 있습니다\n\n숫자를 -2 소수 자릿수로 round() 하면, 해당 숫자를 가장 가까운 100의 배수로 반올림합니다.\n\n```js\nx: int = 123456\n\nprint(round(x, -2)) # 123500\n```\n\n<div class=\"content-ad\"></div>\n\n숫자를 -3 소수점 자리로 round() 함수를 사용하면, 가장 가까운 1000으로 올립니다.\n\n```js\nx: int = 123456\n\nprint(round(x, -3)) # 123000\n```\n\n숫자를 -4 소수점 자리로 round() 함수를 사용하면, 가장 가까운 10000으로 올립니다.\n\n```js\nx: int = 123456\n\nprint(round(x, -4)) # 120000\n```\n\n<div class=\"content-ad\"></div>\n\n# 4) divmod() 함수를 사용하여 //와 %를 동시에 수행할 수 있어요\n\n```js\na, b = divmod(57, 10)\n\nprint(a) # 5\nprint(b) # 7\n```\n\n내장 함수인 divmod(a, b)는 2개의 정수 a와 b를 입력으로 받고, (몫, 나머지)를 담은 튜플을 반환해요.\n\n- 57을 10으로 나눈 결과는 몫이 5이고, 나머지가 7이에요\n- a // b를 하면 몫을 얻을 수 있어요\n- a % b를 하면 나머지를 얻을 수 있어요\n\n<div class=\"content-ad\"></div>\n\n`divmod` 함수를 사용하면 동시에 이를 수행할 수 있어서, 우리가 `//`와 `%`를 동시에 해야 할 때 코드 한 줄을 절약할 수 있어요.\n\n# 5) 양수 무한대와 음수 무한대\n\n`float('inf')`를 사용하면, 사실 양의 무한대를 얻을 수 있어요.\n\n```js\nx: float = float('inf')\n\nprint(x) # inf\n```\n\n<div class=\"content-ad\"></div>\n\n그리고 float(`-inf`)를 실행하면 음의 무한대를 얻습니다.\n\n```js\ny: float = float('-inf')\n\nprint(y) # -inf\n```\n\n양의 무한대는 다른 모든 숫자보다 큽니다. 반면 음의 무한대는 다른 모든 숫자보다 작습니다.\n\n```js\nx: float = float('inf')\n\nprint(x > 1)          # True\nprint(x > 1_000_000)  # True\nprint(x > 3.14e100)   # True\n```\n\n<div class=\"content-ad\"></div>\n\n```js\ny: float = float('-무한대')\n\nprint(y < -1)          # True\nprint(y < -1_000_000)  # True\nprint(y < -1e1000)     # True\n```\n\n우리는 다른 모든 숫자보다 크거나 작은 숫자가 필요할 때 양의 무한대 혹은 음의 무한대를 사용할 수 있습니다.\n\n# 6) 내장 decimal 모듈\n\nPython에는 내장된 decimal 모듈이 있어서 간단히 가져와서 사용할 수 있으며, 십진수 숫자를 다룰 수 있는 기능을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n```python\nfrom decimal import Decimal\n\na: Decimal = Decimal(1) / Decimal(3)\n\nprint(a) # 0.3333333333333333333333333333\n```\n\n하지만 왜 우리는 보통의 부동 소숫점 숫자 대신 이것을 사용해야 할까요?\n\n- 부동 소숫점 숫자는 근사값입니다\n- 부동 소숫점 숫자는 부동 소수점의 정확도 문제가 발생할 수 있습니다\n- Decimal은 더 정확하게 설계되어 있습니다\n\n```python\na: float = 2.0\nb: float = 2.000000000000000000000001\n\nprint(a == b) # True\n```\n\n<div class=\"content-ad\"></div>\n\n특정 지점을 넘어서면 부동 소수점 정밀도 부정확성이 발생할 수 있으며, 이는 작은 숫자에 대해 문제가 될 수 있습니다.\n\n# 7) (보너스) 복소수\n\n수학 수업에서 복소수라는 이상한 개념을 다뤘던 기억이 나시나요? 파이썬에서도 이를 할 수 있습니다.\n\n```python\na: complex = complex(5, 7)\n\nprint(a)        # (5+7j)\nprint(type(a))  # <class 'complex'>\n```\n\n<div class=\"content-ad\"></div>\n\n여기서 5 + 7j는 5 + 7i를 의미해요 (실수 부분 5 + 허수 부분 7)\n\n```js\na: complex = complex(5, 7)\n\nprint(a.real)  # 5.0\nprint(a.imag)  # 7.0\n```\n\n^ 우리는 .real과 .imag을 사용하여 허수의 실수부와 허수부를 추출할 수 있어요.\n\n```js\nimport cmath\n```  \n\n<div class=\"content-ad\"></div>\n\n^ 내장 cmath 모듈을 가져와서 다양한 복소수 연산을 수행할 수 있어요! (자세히 설명하지는 않겠죠)\n\n저는 직장에서 이것을 사용해본 적이 없어요 (왜 쓰겠어요 ㅋㅋ), 그래도 재미있는 사실을 알게 되어서 기뻤어요.\n\n# 유머 콘텐츠\n\n# 제작자로서 저를 지원하고 싶으시다면\n\n<div class=\"content-ad\"></div>\n\n- 제 책을 구매해주세요! — 파이썬에 대해 알지 못했던 101가지 이야기\n- 어디서 찾을 수 있나요: https://payhip.com/b/vywcf\n- 이 이야기에 박수 50번 치세요\n- 당신의 생각을 남겨주세요\n- 이 이야기에서 가장 마음에 드는 부분을 강조해주세요\n\n감사합니다! 이 작은 행동이 큰 도움이 되며, 정말 감사드립니다!\n\nYouTube: https://www.youtube.com/@zlliu246\n\nLinkedIn: https://www.linkedin.com/in/zlliu/","ogImage":{"url":"/assets/img/2024-06-27-6ThingsIWishIKnewEarlierAboutPythonNumbers_0.png"},"coverImage":"/assets/img/2024-06-27-6ThingsIWishIKnewEarlierAboutPythonNumbers_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>아래는 Mardown 형식을 사용한 표태그입니다:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>열1</th><th>열2</th></tr></thead><tbody><tr><td>내용1</td><td>내용2</td></tr><tr><td>내용3</td><td>내용4</td></tr></tbody></table>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-python\">y: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">3.45e-4</span>\n\n<span class=\"hljs-built_in\">print</span>(y) <span class=\"hljs-comment\"># 0.000345</span>\n</code></pre>\n<ul>\n<li>1.25e5 means 1.25 * 10 ^ 5 (which is 100000)</li>\n<li>3.45e-4 means 3.45 * 10 ^ -4 (which is 0.0001)</li>\n</ul>\n<p>With this, we can easily type out very large and very small numbers without having to ensure that we’ve typed the correct number of zeros.</p>\n<h1>2) We can insert underscores in our numbers</h1>\n<div class=\"content-ad\"></div>\n<p>그래서 숫자를 읽기 쉽게 하기 위해 0을 모아 놓을 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">x</span>: int = <span class=\"hljs-number\">1_000_000_000</span>\n\n<span class=\"hljs-title function_\">print</span>(x) # <span class=\"hljs-number\">1000000000</span>\n</code></pre>\n<p>^ 여기서는 3개의 0 사이마다 _ 하나를 넣어서 한 눈에 10억이라는 것을 알 수 있도록 만듭니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">y</span>: int = <span class=\"hljs-number\">1_0_0_00_000</span>\n\n<span class=\"hljs-title function_\">print</span>(y) # <span class=\"hljs-number\">10000000</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>^ 각 그룹당 3 개의 숫자가 있어야 하는 것은 의무적이 아닙니다. 원하는 만큼 많은 숫자 그룹당 0을 넣을 수 있지만, 저는 3개로 고정하는 것이 가장 읽기 쉽다고 생각했습니다.</p>\n<h1>3) 음수 소수 자릿수로 round() 할 수 있습니다</h1>\n<p>숫자를 -2 소수 자릿수로 round() 하면, 해당 숫자를 가장 가까운 100의 배수로 반올림합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">x</span>: int = <span class=\"hljs-number\">123456</span>\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">round</span>(x, -<span class=\"hljs-number\">2</span>)) # <span class=\"hljs-number\">123500</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>숫자를 -3 소수점 자리로 round() 함수를 사용하면, 가장 가까운 1000으로 올립니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">x</span>: int = <span class=\"hljs-number\">123456</span>\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">round</span>(x, -<span class=\"hljs-number\">3</span>)) # <span class=\"hljs-number\">123000</span>\n</code></pre>\n<p>숫자를 -4 소수점 자리로 round() 함수를 사용하면, 가장 가까운 10000으로 올립니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">x</span>: int = <span class=\"hljs-number\">123456</span>\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">round</span>(x, -<span class=\"hljs-number\">4</span>)) # <span class=\"hljs-number\">120000</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>4) divmod() 함수를 사용하여 //와 %를 동시에 수행할 수 있어요</h1>\n<pre><code class=\"hljs language-js\">a, b = <span class=\"hljs-title function_\">divmod</span>(<span class=\"hljs-number\">57</span>, <span class=\"hljs-number\">10</span>)\n\n<span class=\"hljs-title function_\">print</span>(a) # <span class=\"hljs-number\">5</span>\n<span class=\"hljs-title function_\">print</span>(b) # <span class=\"hljs-number\">7</span>\n</code></pre>\n<p>내장 함수인 divmod(a, b)는 2개의 정수 a와 b를 입력으로 받고, (몫, 나머지)를 담은 튜플을 반환해요.</p>\n<ul>\n<li>57을 10으로 나눈 결과는 몫이 5이고, 나머지가 7이에요</li>\n<li>a // b를 하면 몫을 얻을 수 있어요</li>\n<li>a % b를 하면 나머지를 얻을 수 있어요</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p><code>divmod</code> 함수를 사용하면 동시에 이를 수행할 수 있어서, 우리가 <code>//</code>와 <code>%</code>를 동시에 해야 할 때 코드 한 줄을 절약할 수 있어요.</p>\n<h1>5) 양수 무한대와 음수 무한대</h1>\n<p><code>float('inf')</code>를 사용하면, 사실 양의 무한대를 얻을 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">x</span>: float = <span class=\"hljs-title function_\">float</span>(<span class=\"hljs-string\">'inf'</span>)\n\n<span class=\"hljs-title function_\">print</span>(x) # inf\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>그리고 float(<code>-inf</code>)를 실행하면 음의 무한대를 얻습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">y</span>: float = <span class=\"hljs-title function_\">float</span>(<span class=\"hljs-string\">'-inf'</span>)\n\n<span class=\"hljs-title function_\">print</span>(y) # -inf\n</code></pre>\n<p>양의 무한대는 다른 모든 숫자보다 큽니다. 반면 음의 무한대는 다른 모든 숫자보다 작습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">x</span>: float = <span class=\"hljs-title function_\">float</span>(<span class=\"hljs-string\">'inf'</span>)\n\n<span class=\"hljs-title function_\">print</span>(x > <span class=\"hljs-number\">1</span>)          # <span class=\"hljs-title class_\">True</span>\n<span class=\"hljs-title function_\">print</span>(x > <span class=\"hljs-number\">1_000_000</span>)  # <span class=\"hljs-title class_\">True</span>\n<span class=\"hljs-title function_\">print</span>(x > <span class=\"hljs-number\">3.14e100</span>)   # <span class=\"hljs-title class_\">True</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">y</span>: float = <span class=\"hljs-title function_\">float</span>(<span class=\"hljs-string\">'-무한대'</span>)\n\n<span class=\"hljs-title function_\">print</span>(y &#x3C; -<span class=\"hljs-number\">1</span>)          # <span class=\"hljs-title class_\">True</span>\n<span class=\"hljs-title function_\">print</span>(y &#x3C; -<span class=\"hljs-number\">1_000_000</span>)  # <span class=\"hljs-title class_\">True</span>\n<span class=\"hljs-title function_\">print</span>(y &#x3C; -<span class=\"hljs-number\">1e1000</span>)     # <span class=\"hljs-title class_\">True</span>\n</code></pre>\n<p>우리는 다른 모든 숫자보다 크거나 작은 숫자가 필요할 때 양의 무한대 혹은 음의 무한대를 사용할 수 있습니다.</p>\n<h1>6) 내장 decimal 모듈</h1>\n<p>Python에는 내장된 decimal 모듈이 있어서 간단히 가져와서 사용할 수 있으며, 십진수 숫자를 다룰 수 있는 기능을 제공합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> decimal <span class=\"hljs-keyword\">import</span> Decimal\n\na: Decimal = Decimal(<span class=\"hljs-number\">1</span>) / Decimal(<span class=\"hljs-number\">3</span>)\n\n<span class=\"hljs-built_in\">print</span>(a) <span class=\"hljs-comment\"># 0.3333333333333333333333333333</span>\n</code></pre>\n<p>하지만 왜 우리는 보통의 부동 소숫점 숫자 대신 이것을 사용해야 할까요?</p>\n<ul>\n<li>부동 소숫점 숫자는 근사값입니다</li>\n<li>부동 소숫점 숫자는 부동 소수점의 정확도 문제가 발생할 수 있습니다</li>\n<li>Decimal은 더 정확하게 설계되어 있습니다</li>\n</ul>\n<pre><code class=\"hljs language-python\">a: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">2.0</span>\nb: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">2.000000000000000000000001</span>\n\n<span class=\"hljs-built_in\">print</span>(a == b) <span class=\"hljs-comment\"># True</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>특정 지점을 넘어서면 부동 소수점 정밀도 부정확성이 발생할 수 있으며, 이는 작은 숫자에 대해 문제가 될 수 있습니다.</p>\n<h1>7) (보너스) 복소수</h1>\n<p>수학 수업에서 복소수라는 이상한 개념을 다뤘던 기억이 나시나요? 파이썬에서도 이를 할 수 있습니다.</p>\n<pre><code class=\"hljs language-python\">a: <span class=\"hljs-built_in\">complex</span> = <span class=\"hljs-built_in\">complex</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>)\n\n<span class=\"hljs-built_in\">print</span>(a)        <span class=\"hljs-comment\"># (5+7j)</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">type</span>(a))  <span class=\"hljs-comment\"># &#x3C;class 'complex'></span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>여기서 5 + 7j는 5 + 7i를 의미해요 (실수 부분 5 + 허수 부분 7)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">a</span>: complex = <span class=\"hljs-title function_\">complex</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>)\n\n<span class=\"hljs-title function_\">print</span>(a.<span class=\"hljs-property\">real</span>)  # <span class=\"hljs-number\">5.0</span>\n<span class=\"hljs-title function_\">print</span>(a.<span class=\"hljs-property\">imag</span>)  # <span class=\"hljs-number\">7.0</span>\n</code></pre>\n<p>^ 우리는 .real과 .imag을 사용하여 허수의 실수부와 허수부를 추출할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> cmath\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>^ 내장 cmath 모듈을 가져와서 다양한 복소수 연산을 수행할 수 있어요! (자세히 설명하지는 않겠죠)</p>\n<p>저는 직장에서 이것을 사용해본 적이 없어요 (왜 쓰겠어요 ㅋㅋ), 그래도 재미있는 사실을 알게 되어서 기뻤어요.</p>\n<h1>유머 콘텐츠</h1>\n<h1>제작자로서 저를 지원하고 싶으시다면</h1>\n<div class=\"content-ad\"></div>\n<ul>\n<li>제 책을 구매해주세요! — 파이썬에 대해 알지 못했던 101가지 이야기</li>\n<li>어디서 찾을 수 있나요: <a href=\"https://payhip.com/b/vywcf\" rel=\"nofollow\" target=\"_blank\">https://payhip.com/b/vywcf</a></li>\n<li>이 이야기에 박수 50번 치세요</li>\n<li>당신의 생각을 남겨주세요</li>\n<li>이 이야기에서 가장 마음에 드는 부분을 강조해주세요</li>\n</ul>\n<p>감사합니다! 이 작은 행동이 큰 도움이 되며, 정말 감사드립니다!</p>\n<p>YouTube: <a href=\"https://www.youtube.com/@zlliu246\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/@zlliu246</a></p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/zlliu/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/zlliu/</a></p>\n</body>\n</html>\n"},"__N_SSG":true}