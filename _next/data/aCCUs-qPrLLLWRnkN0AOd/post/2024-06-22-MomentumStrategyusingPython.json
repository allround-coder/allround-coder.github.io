{"pageProps":{"post":{"title":"파이썬으로 모멘텀 전략 구현하는 방법","description":"","date":"2024-06-22 05:44","slug":"2024-06-22-MomentumStrategyusingPython","content":"\n\n이번 주에는 점심 시간에 몇몇 동료들과 흥미로운 대화를 나누었습니다. 그들은 투자에 어떤 방법론을 사용하는지 물어보았어요. 저는 '모멘텀 투자'를 사용한다고 언급했는데, 그들은 정확히 무슨 의미인지 이해하기 어려워했어요. 그래서 이 기사를 쓰기로 결심했습니다. 제가 모멘텀 투자를 위해 따르는 단계를 설명하겠습니다.\n\n# 모멘텀 투자란?\n\n모멘텀 투자는 시장에서 이미 존재하는 추세를 기반으로 이익을 얻고자 하는 강력한 전략입니다. 지난 성과가 우수한 주식에 집중함으로써, 투자자들은 모멘텀의 흐름을 타고 인상적인 수익을 얻을 수 있을지도 모릅니다. 이 기사에서는 Nifty 50 주식을 위한 모멘텀 전략에 대해 자세히 살펴보고, 그 방법론을 설명하며 해당 전략을 구현하는 데 도움이 되는 Python 코드 조각을 제공할 것입니다.\n\n모멘텀 투자는 과거에 우수한 성과를 보인 주식이 가까운 미래에도 계속 우수한 성과를 내리라는 전제에 기반합니다. 이 전략은 특정 기간 동안(예: 지난 1년) 우수한 성과를 보인 주식을 매수하고, 일정 기간(예: 1개월) 보유한 후 포트폴리오를 재평가하는 것을 포함합니다.\n\n<div class=\"content-ad\"></div>\n\n# 전략 개요\n\n우리의 모멘텀 전략은 다음과 같은 간단한 단계로 구성되어 있습니다:\n\n- 주식의 우주 선택: 여기서는 Nifty 50 주식에 초점을 맞출 것입니다.\n- 과거 수익률 계산: 각 주식에 대해 12개월 수익률을 계산합니다.\n- 주식 순위 매기기: 주식을 12개월 수익률에 기반하여 순위 매깁니다.\n- 최고 주식 선택: 수익률이 가장 높은 상위 10개 주식을 선택합니다.\n- 매월 리밸런싱: 매달 포트폴리오를 재평가하고 리밸런싱합니다.\n\n# 전략 백테스팅\n\n<div class=\"content-ad\"></div>\n\n백테스팅은 거래 전략의 성과를 평가하는 데 중요합니다. 이전 데이터에 전략을 적용하여 과거 성과를 평가하고 잠재적인 미래 성과에 대한 통찰력을 얻을 수 있습니다.\n\n파이썬을 사용하여 이 전략을 3년 동안 백테스트하고 해당 결과를 지수(여기서는 Nifty50)의 매수 및 보유 전략과 비교해보겠습니다.\n\n## 단계 1: 데이터 수집\n\n먼저, 지난 3년간 Nifty 50 주식의 히스토리컬 가격 데이터를 수집해야 합니다. 여기서는 야후 파이낸스 API를 사용하여 지난 3년간의 히스토리컬 데이터를 가져왔습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n# Nifty 50 주식 기호 목록\nnifty50_symbols = [\"RELIANCE.NS\", \"HDFCBANK.NS\", \"INFY.NS\", \"ICICIBANK.NS\", \"TCS.NS\", \"KOTAKBANK.NS\", \n                   \"HINDUNILVR.NS\", \"SBIN.NS\", \"BHARTIARTL.NS\", \"HDFC.NS\", \"ITC.NS\", \"BAJFINANCE.NS\", \n                   \"ASIANPAINT.NS\", \"HCLTECH.NS\", \"LT.NS\", \"MARUTI.NS\", \"AXISBANK.NS\", \"ULTRACEMCO.NS\", \n                   \"WIPRO.NS\", \"NESTLEIND.NS\", \"ONGC.NS\", \"TITAN.NS\", \"SUNPHARMA.NS\", \"M&M.NS\", \n                   \"POWERGRID.NS\", \"JSWSTEEL.NS\", \"TATASTEEL.NS\", \"TECHM.NS\", \"HDFCLIFE.NS\", \"COALINDIA.NS\", \n                   \"BPCL.NS\", \"INDUSINDBK.NS\", \"BAJAJ-AUTO.NS\", \"IOC.NS\", \"BRITANNIA.NS\", \"HEROMOTOCO.NS\", \n                   \"ADANIPORTS.NS\", \"DRREDDY.NS\", \"GRASIM.NS\", \"CIPLA.NS\", \"DIVISLAB.NS\", \"EICHERMOT.NS\", \n                   \"BAJAJFINSV.NS\", \"SHREECEM.NS\", \"TATAMOTORS.NS\", \"SBILIFE.NS\", \"ADANIENT.NS\", \n                   \"DABUR.NS\", \"VEDL.NS\", \"APOLLOHOSP.NS\"]\n\n# 시간 범위 정의\nend_date = datetime.today()\nstart_date = end_date - timedelta(days=365*3)  # 최근 3년간\n\n# 데이터 가져오기\ndata = yf.download(nifty50_symbols, start=start_date, end=end_date)['Adj Close']\n\n# 누락된 값 채우기\ndata = data.fillna(method='ffill').dropna()\n\n# 데이터의 처음 몇 행 표시\nprint(data.head())\n```\n\n## 단계 2: 전략 구현 및 수익률 계산\n\n그다음, 모멘텀 전략을 구현하고 지난 3년간 포트폴리오 수익률을 계산합니다.\n\n```js\ndef calculate_portfolio_returns(data, top_n=10):\n    # 월간 수익률 계산\n    monthly_returns = data.resample('M').ffill().pct_change()\n    \n    # 12개월 수익률 계산\n    twelve_month_returns = monthly_returns.rolling(window=12).apply(lambda x: np.prod(1 + x) - 1, raw=True)\n    \n    # 월별 포트폴리오 가치를 저장할 빈 목록 초기화\n    portfolio_values = []\n    \n    # 초기 자본 부여\n    initial_capital = 100000  # 1 lakh\n    capital = initial_capital\n    \n    # 13번째 달부터 시작하여 각 월 반복\n    for i in range(12, len(twelve_month_returns)):\n        # 현재 달의 12개월 수익률 가져오기\n        current_returns = twelve_month_returns.iloc[i]\n        \n        # 주식을 12개월 수익률에 따라 순위 매기기\n        ranked_stocks = current_returns.sort_values(ascending=False)\n        \n        # 상위 N개 주식 선택\n        top_stocks = ranked_stocks.head(top_n).index\n        \n        # 각 주식에 대한 동일 가중치 계산\n        weight = 1 / top_n\n        \n        # 현재 달의 포트폴리오 수익률 계산\n        portfolio_return = (monthly_returns.iloc[i][top_stocks] * weight).sum()\n        \n        # 자본 업데이트\n        capital = capital * (1 + portfolio_return)\n        \n        # 현재 자본을 포트폴리오 가치 목록에 추가\n        portfolio_values.append(capital)\n    \n    # 포트폴리오 가치 목록을 pandas Series로 변환\n    portfolio_values = pd.Series(portfolio_values, index=twelve_month_returns.index[12:])\n    \n    return portfolio_values\n\n# 포트폴리오 수익률 계산\nmomentum_portfolio_returns = calculate_portfolio_returns(data)\n\n# 포트폴리오 수익률 표시\nprint(momentum_portfolio_returns)\n```\n\n<div class=\"content-ad\"></div>\n\n## 단계 3: Nifty 50 지수와 비교\n\n모멘텀 전략의 성능을 평가하기 위해 해당 전략의 수익률을 동일 기간 동안 Nifty 50 지수의 수익률과 비교합니다.\n\n```js\n# Nifty 50 지수 데이터 가져오기\nnifty50_index = yf.download(\"^NSEI\", start=start_date, end=end_date)['Adj Close']\n\n# Nifty 50 월간 수익률 계산하기\nnifty50_monthly_returns = nifty50_index.resample('ME').ffill().pct_change()\n\n# Nifty 50 누적 수익률 계산하기\nnifty50_cumulative_returns = (1 + nifty50_monthly_returns).cumprod()\n\n# 모멘텀 포트폴리오 누적 수익률 계산하기\nmomentum_cumulative_returns = (1 + momentum_portfolio_returns.pct_change()).cumprod()\n\n# 결과 그래프로 플로팅하기\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(12, 6))\nplt.plot(momentum_cumulative_returns, label='모멘텀 포트폴리오')\nplt.plot(nifty50_cumulative_returns, label='Nifty 50 지수', linestyle='--')\nplt.title('모멘텀 포트폴리오 vs Nifty 50 지수')\nplt.xlabel('날짜')\nplt.ylabel('누적 수익률')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n<img src=\"/assets/img/2024-06-22-MomentumStrategyusingPython_0.png\" />\n\n<div class=\"content-ad\"></div>\n\n# 결과 및 분석\n\n위의 그림은 지난 3년간 모멘텀 포트폴리오의 누적 수익률을 Nifty 50 지수와 비교한 것입니다. 다음은 주요 관측 사항입니다:\n\n- 이 기간 동안 모멘텀 포트폴리오가 일반적으로 Nifty 50 지수를 능가하여 모멘텀 전략의 효과를 입증했습니다.\n- 모멘텀 포트폴리오가 상당한 변동을 겪는 등의 변동성이 있었는데, 이는 모멘텀 기반 전략에 특징적인 것입니다.\n- 전반적으로, 모멘텀 전략은 Nifty 50 지수를 단순 보유하는 것보다 더 높은 투자 수익을 제공했습니다.\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n니프티 50 주식들에 대한 모멘텀 투자 전략은 지난 3년 동안 기대를 불러일으켰어요. 12개월 수익률에 기반한 상위 10개 주식을 선택하고 매월 포트폴리오를 리밸런싱 함으로써, 이 전략은 니프티 50 지수를 능가했어요. 하지만 과거 성과가 미래 성과를 반영한다는 점을 명심해야 하며, 투자자는 이 전략을 실행하기 전에 위험 허용 수준 및 투자 목표를 신중히 고려해야 해요.\n\n제공된 Python 코드 스니펫을 사용하여 이 모멘텀 전략을 백테스트하고 원하는 대로 사용자 정의할 수 있어요. 모멘텀 투자는 투자자의 무기로 강력할 수 있지만, 일관된 성공을 거두기 위해서는 규율과 체계적인 접근이 필요해요.","ogImage":{"url":"/assets/img/2024-06-22-MomentumStrategyusingPython_0.png"},"coverImage":"/assets/img/2024-06-22-MomentumStrategyusingPython_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이번 주에는 점심 시간에 몇몇 동료들과 흥미로운 대화를 나누었습니다. 그들은 투자에 어떤 방법론을 사용하는지 물어보았어요. 저는 '모멘텀 투자'를 사용한다고 언급했는데, 그들은 정확히 무슨 의미인지 이해하기 어려워했어요. 그래서 이 기사를 쓰기로 결심했습니다. 제가 모멘텀 투자를 위해 따르는 단계를 설명하겠습니다.</p>\n<h1>모멘텀 투자란?</h1>\n<p>모멘텀 투자는 시장에서 이미 존재하는 추세를 기반으로 이익을 얻고자 하는 강력한 전략입니다. 지난 성과가 우수한 주식에 집중함으로써, 투자자들은 모멘텀의 흐름을 타고 인상적인 수익을 얻을 수 있을지도 모릅니다. 이 기사에서는 Nifty 50 주식을 위한 모멘텀 전략에 대해 자세히 살펴보고, 그 방법론을 설명하며 해당 전략을 구현하는 데 도움이 되는 Python 코드 조각을 제공할 것입니다.</p>\n<p>모멘텀 투자는 과거에 우수한 성과를 보인 주식이 가까운 미래에도 계속 우수한 성과를 내리라는 전제에 기반합니다. 이 전략은 특정 기간 동안(예: 지난 1년) 우수한 성과를 보인 주식을 매수하고, 일정 기간(예: 1개월) 보유한 후 포트폴리오를 재평가하는 것을 포함합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>전략 개요</h1>\n<p>우리의 모멘텀 전략은 다음과 같은 간단한 단계로 구성되어 있습니다:</p>\n<ul>\n<li>주식의 우주 선택: 여기서는 Nifty 50 주식에 초점을 맞출 것입니다.</li>\n<li>과거 수익률 계산: 각 주식에 대해 12개월 수익률을 계산합니다.</li>\n<li>주식 순위 매기기: 주식을 12개월 수익률에 기반하여 순위 매깁니다.</li>\n<li>최고 주식 선택: 수익률이 가장 높은 상위 10개 주식을 선택합니다.</li>\n<li>매월 리밸런싱: 매달 포트폴리오를 재평가하고 리밸런싱합니다.</li>\n</ul>\n<h1>전략 백테스팅</h1>\n<div class=\"content-ad\"></div>\n<p>백테스팅은 거래 전략의 성과를 평가하는 데 중요합니다. 이전 데이터에 전략을 적용하여 과거 성과를 평가하고 잠재적인 미래 성과에 대한 통찰력을 얻을 수 있습니다.</p>\n<p>파이썬을 사용하여 이 전략을 3년 동안 백테스트하고 해당 결과를 지수(여기서는 Nifty50)의 매수 및 보유 전략과 비교해보겠습니다.</p>\n<h2>단계 1: 데이터 수집</h2>\n<p>먼저, 지난 3년간 Nifty 50 주식의 히스토리컬 가격 데이터를 수집해야 합니다. 여기서는 야후 파이낸스 API를 사용하여 지난 3년간의 히스토리컬 데이터를 가져왔습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> yfinance <span class=\"hljs-keyword\">as</span> yf\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime, timedelta\n\n# <span class=\"hljs-title class_\">Nifty</span> <span class=\"hljs-number\">50</span> 주식 기호 목록\nnifty50_symbols = [<span class=\"hljs-string\">\"RELIANCE.NS\"</span>, <span class=\"hljs-string\">\"HDFCBANK.NS\"</span>, <span class=\"hljs-string\">\"INFY.NS\"</span>, <span class=\"hljs-string\">\"ICICIBANK.NS\"</span>, <span class=\"hljs-string\">\"TCS.NS\"</span>, <span class=\"hljs-string\">\"KOTAKBANK.NS\"</span>, \n                   <span class=\"hljs-string\">\"HINDUNILVR.NS\"</span>, <span class=\"hljs-string\">\"SBIN.NS\"</span>, <span class=\"hljs-string\">\"BHARTIARTL.NS\"</span>, <span class=\"hljs-string\">\"HDFC.NS\"</span>, <span class=\"hljs-string\">\"ITC.NS\"</span>, <span class=\"hljs-string\">\"BAJFINANCE.NS\"</span>, \n                   <span class=\"hljs-string\">\"ASIANPAINT.NS\"</span>, <span class=\"hljs-string\">\"HCLTECH.NS\"</span>, <span class=\"hljs-string\">\"LT.NS\"</span>, <span class=\"hljs-string\">\"MARUTI.NS\"</span>, <span class=\"hljs-string\">\"AXISBANK.NS\"</span>, <span class=\"hljs-string\">\"ULTRACEMCO.NS\"</span>, \n                   <span class=\"hljs-string\">\"WIPRO.NS\"</span>, <span class=\"hljs-string\">\"NESTLEIND.NS\"</span>, <span class=\"hljs-string\">\"ONGC.NS\"</span>, <span class=\"hljs-string\">\"TITAN.NS\"</span>, <span class=\"hljs-string\">\"SUNPHARMA.NS\"</span>, <span class=\"hljs-string\">\"M&#x26;M.NS\"</span>, \n                   <span class=\"hljs-string\">\"POWERGRID.NS\"</span>, <span class=\"hljs-string\">\"JSWSTEEL.NS\"</span>, <span class=\"hljs-string\">\"TATASTEEL.NS\"</span>, <span class=\"hljs-string\">\"TECHM.NS\"</span>, <span class=\"hljs-string\">\"HDFCLIFE.NS\"</span>, <span class=\"hljs-string\">\"COALINDIA.NS\"</span>, \n                   <span class=\"hljs-string\">\"BPCL.NS\"</span>, <span class=\"hljs-string\">\"INDUSINDBK.NS\"</span>, <span class=\"hljs-string\">\"BAJAJ-AUTO.NS\"</span>, <span class=\"hljs-string\">\"IOC.NS\"</span>, <span class=\"hljs-string\">\"BRITANNIA.NS\"</span>, <span class=\"hljs-string\">\"HEROMOTOCO.NS\"</span>, \n                   <span class=\"hljs-string\">\"ADANIPORTS.NS\"</span>, <span class=\"hljs-string\">\"DRREDDY.NS\"</span>, <span class=\"hljs-string\">\"GRASIM.NS\"</span>, <span class=\"hljs-string\">\"CIPLA.NS\"</span>, <span class=\"hljs-string\">\"DIVISLAB.NS\"</span>, <span class=\"hljs-string\">\"EICHERMOT.NS\"</span>, \n                   <span class=\"hljs-string\">\"BAJAJFINSV.NS\"</span>, <span class=\"hljs-string\">\"SHREECEM.NS\"</span>, <span class=\"hljs-string\">\"TATAMOTORS.NS\"</span>, <span class=\"hljs-string\">\"SBILIFE.NS\"</span>, <span class=\"hljs-string\">\"ADANIENT.NS\"</span>, \n                   <span class=\"hljs-string\">\"DABUR.NS\"</span>, <span class=\"hljs-string\">\"VEDL.NS\"</span>, <span class=\"hljs-string\">\"APOLLOHOSP.NS\"</span>]\n\n# 시간 범위 정의\nend_date = datetime.<span class=\"hljs-title function_\">today</span>()\nstart_date = end_date - <span class=\"hljs-title function_\">timedelta</span>(days=<span class=\"hljs-number\">365</span>*<span class=\"hljs-number\">3</span>)  # 최근 <span class=\"hljs-number\">3</span>년간\n\n# 데이터 가져오기\ndata = yf.<span class=\"hljs-title function_\">download</span>(nifty50_symbols, start=start_date, end=end_date)[<span class=\"hljs-string\">'Adj Close'</span>]\n\n# 누락된 값 채우기\ndata = data.<span class=\"hljs-title function_\">fillna</span>(method=<span class=\"hljs-string\">'ffill'</span>).<span class=\"hljs-title function_\">dropna</span>()\n\n# 데이터의 처음 몇 행 표시\n<span class=\"hljs-title function_\">print</span>(data.<span class=\"hljs-title function_\">head</span>())\n</code></pre>\n<h2>단계 2: 전략 구현 및 수익률 계산</h2>\n<p>그다음, 모멘텀 전략을 구현하고 지난 3년간 포트폴리오 수익률을 계산합니다.</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">calculate_portfolio_returns</span>(data, top_n=<span class=\"hljs-number\">10</span>):\n    # 월간 수익률 계산\n    monthly_returns = data.<span class=\"hljs-title function_\">resample</span>(<span class=\"hljs-string\">'M'</span>).<span class=\"hljs-title function_\">ffill</span>().<span class=\"hljs-title function_\">pct_change</span>()\n    \n    # <span class=\"hljs-number\">12</span>개월 수익률 계산\n    twelve_month_returns = monthly_returns.<span class=\"hljs-title function_\">rolling</span>(<span class=\"hljs-variable language_\">window</span>=<span class=\"hljs-number\">12</span>).<span class=\"hljs-title function_\">apply</span>(lambda <span class=\"hljs-attr\">x</span>: np.<span class=\"hljs-title function_\">prod</span>(<span class=\"hljs-number\">1</span> + x) - <span class=\"hljs-number\">1</span>, raw=<span class=\"hljs-title class_\">True</span>)\n    \n    # 월별 포트폴리오 가치를 저장할 빈 목록 초기화\n    portfolio_values = []\n    \n    # 초기 자본 부여\n    initial_capital = <span class=\"hljs-number\">100000</span>  # <span class=\"hljs-number\">1</span> lakh\n    capital = initial_capital\n    \n    # <span class=\"hljs-number\">13</span>번째 달부터 시작하여 각 월 반복\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">12</span>, <span class=\"hljs-title function_\">len</span>(twelve_month_returns)):\n        # 현재 달의 <span class=\"hljs-number\">12</span>개월 수익률 가져오기\n        current_returns = twelve_month_returns.<span class=\"hljs-property\">iloc</span>[i]\n        \n        # 주식을 <span class=\"hljs-number\">12</span>개월 수익률에 따라 순위 매기기\n        ranked_stocks = current_returns.<span class=\"hljs-title function_\">sort_values</span>(ascending=<span class=\"hljs-title class_\">False</span>)\n        \n        # 상위 N개 주식 선택\n        top_stocks = ranked_stocks.<span class=\"hljs-title function_\">head</span>(top_n).<span class=\"hljs-property\">index</span>\n        \n        # 각 주식에 대한 동일 가중치 계산\n        weight = <span class=\"hljs-number\">1</span> / top_n\n        \n        # 현재 달의 포트폴리오 수익률 계산\n        portfolio_return = (monthly_returns.<span class=\"hljs-property\">iloc</span>[i][top_stocks] * weight).<span class=\"hljs-title function_\">sum</span>()\n        \n        # 자본 업데이트\n        capital = capital * (<span class=\"hljs-number\">1</span> + portfolio_return)\n        \n        # 현재 자본을 포트폴리오 가치 목록에 추가\n        portfolio_values.<span class=\"hljs-title function_\">append</span>(capital)\n    \n    # 포트폴리오 가치 목록을 pandas <span class=\"hljs-title class_\">Series</span>로 변환\n    portfolio_values = pd.<span class=\"hljs-title class_\">Series</span>(portfolio_values, index=twelve_month_returns.<span class=\"hljs-property\">index</span>[<span class=\"hljs-number\">12</span>:])\n    \n    <span class=\"hljs-keyword\">return</span> portfolio_values\n\n# 포트폴리오 수익률 계산\nmomentum_portfolio_returns = <span class=\"hljs-title function_\">calculate_portfolio_returns</span>(data)\n\n# 포트폴리오 수익률 표시\n<span class=\"hljs-title function_\">print</span>(momentum_portfolio_returns)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>단계 3: Nifty 50 지수와 비교</h2>\n<p>모멘텀 전략의 성능을 평가하기 위해 해당 전략의 수익률을 동일 기간 동안 Nifty 50 지수의 수익률과 비교합니다.</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Nifty</span> <span class=\"hljs-number\">50</span> 지수 데이터 가져오기\nnifty50_index = yf.<span class=\"hljs-title function_\">download</span>(<span class=\"hljs-string\">\"^NSEI\"</span>, start=start_date, end=end_date)[<span class=\"hljs-string\">'Adj Close'</span>]\n\n# <span class=\"hljs-title class_\">Nifty</span> <span class=\"hljs-number\">50</span> 월간 수익률 계산하기\nnifty50_monthly_returns = nifty50_index.<span class=\"hljs-title function_\">resample</span>(<span class=\"hljs-string\">'ME'</span>).<span class=\"hljs-title function_\">ffill</span>().<span class=\"hljs-title function_\">pct_change</span>()\n\n# <span class=\"hljs-title class_\">Nifty</span> <span class=\"hljs-number\">50</span> 누적 수익률 계산하기\nnifty50_cumulative_returns = (<span class=\"hljs-number\">1</span> + nifty50_monthly_returns).<span class=\"hljs-title function_\">cumprod</span>()\n\n# 모멘텀 포트폴리오 누적 수익률 계산하기\nmomentum_cumulative_returns = (<span class=\"hljs-number\">1</span> + momentum_portfolio_returns.<span class=\"hljs-title function_\">pct_change</span>()).<span class=\"hljs-title function_\">cumprod</span>()\n\n# 결과 그래프로 플로팅하기\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\n\nplt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">6</span>))\nplt.<span class=\"hljs-title function_\">plot</span>(momentum_cumulative_returns, label=<span class=\"hljs-string\">'모멘텀 포트폴리오'</span>)\nplt.<span class=\"hljs-title function_\">plot</span>(nifty50_cumulative_returns, label=<span class=\"hljs-string\">'Nifty 50 지수'</span>, linestyle=<span class=\"hljs-string\">'--'</span>)\nplt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">'모멘텀 포트폴리오 vs Nifty 50 지수'</span>)\nplt.<span class=\"hljs-title function_\">xlabel</span>(<span class=\"hljs-string\">'날짜'</span>)\nplt.<span class=\"hljs-title function_\">ylabel</span>(<span class=\"hljs-string\">'누적 수익률'</span>)\nplt.<span class=\"hljs-title function_\">legend</span>()\nplt.<span class=\"hljs-title function_\">grid</span>(<span class=\"hljs-title class_\">True</span>)\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<img src=\"/assets/img/2024-06-22-MomentumStrategyusingPython_0.png\">\n<div class=\"content-ad\"></div>\n<h1>결과 및 분석</h1>\n<p>위의 그림은 지난 3년간 모멘텀 포트폴리오의 누적 수익률을 Nifty 50 지수와 비교한 것입니다. 다음은 주요 관측 사항입니다:</p>\n<ul>\n<li>이 기간 동안 모멘텀 포트폴리오가 일반적으로 Nifty 50 지수를 능가하여 모멘텀 전략의 효과를 입증했습니다.</li>\n<li>모멘텀 포트폴리오가 상당한 변동을 겪는 등의 변동성이 있었는데, 이는 모멘텀 기반 전략에 특징적인 것입니다.</li>\n<li>전반적으로, 모멘텀 전략은 Nifty 50 지수를 단순 보유하는 것보다 더 높은 투자 수익을 제공했습니다.</li>\n</ul>\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>니프티 50 주식들에 대한 모멘텀 투자 전략은 지난 3년 동안 기대를 불러일으켰어요. 12개월 수익률에 기반한 상위 10개 주식을 선택하고 매월 포트폴리오를 리밸런싱 함으로써, 이 전략은 니프티 50 지수를 능가했어요. 하지만 과거 성과가 미래 성과를 반영한다는 점을 명심해야 하며, 투자자는 이 전략을 실행하기 전에 위험 허용 수준 및 투자 목표를 신중히 고려해야 해요.</p>\n<p>제공된 Python 코드 스니펫을 사용하여 이 모멘텀 전략을 백테스트하고 원하는 대로 사용자 정의할 수 있어요. 모멘텀 투자는 투자자의 무기로 강력할 수 있지만, 일관된 성공을 거두기 위해서는 규율과 체계적인 접근이 필요해요.</p>\n</body>\n</html>\n"},"__N_SSG":true}