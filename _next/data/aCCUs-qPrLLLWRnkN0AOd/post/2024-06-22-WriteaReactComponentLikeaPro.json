{"pageProps":{"post":{"title":"프로처럼 React 컴포넌트 작성하는 방법","description":"","date":"2024-06-22 04:55","slug":"2024-06-22-WriteaReactComponentLikeaPro","content":"\n\n<img src=\"/assets/img/2024-06-22-WriteaReactComponentLikeaPro_0.png\" />\n\n리액트 세계에서 컴포넌트를 작성하는 것은 예술입니다. 그것은 단순히 작동하게 만드는 것이 아니라, 잘 작동하게 만드는 것이 중요합니다. 오늘은 프로처럼 컴포넌트를 만드는 방법을 살펴보겠습니다. 가독성, 재사용성, 효율성에 초점을 맞춰.\n\n## 리스트 컴포넌트 만들기\n\n우리가 기본 리스트 컴포넌트부터 시작해봅시다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// src/components/List.js\nimport React from 'react';\n\nconst List = ({ data }) => {\n  return (\n    <ul>\n      {data.map((item, index) => (\n        <li key={index}>{item}</li>\n      ))}\n    </ul>\n  );\n};\n\nexport default List;\n```\n\n이 컴포넌트는 데이터 배열을 가져와서 목록으로 렌더링합니다.\n\n## HOC로 컴포넌트 향상하기\n\n고차 컴포넌트(Higher-Order Components, HOC)는 컴포넌트 로직을 재사용하는 강력한 패턴입니다. 기본적으로 컴포넌트를 감싸서 구조를 변경하지 않고 기능을 확장합니다.\n\n\n<div class=\"content-ad\"></div>\n\n예를 들어, withLoading HOC를 사용하면 로딩 상태를 표시할 수 있습니다:\n\n```js\n// src/hocs/withLoading.js\nimport React, { useState } from 'react';\n\nfunction withLoading(Component) {\n  return function WithLoading({ isLoading, ...props }) {\n    if (isLoading) {\n      return <div>Loading...</div>;\n    }\n    return <Component {...props} />;\n  };\n}\n\nexport default withLoading;\n```\n\n이 HOC는 isLoading 속성을 확인합니다. 만약 true이면 \"로딩 중...\" 메시지를 렌더링합니다. 그렇지 않으면 래핑된 컴포넌트를 렌더링하여 데이터 가져오는 동안 사용자 경험이 연속적이게 됩니다.\n\n비슷하게, withErrorHandling은 에러 상태를 관리하는 다른 HOC입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// src/hocs/withErrorHandling.js\nimport React from 'react';\n\nfunction withErrorHandling(Component) {\n  return function WithErrorHandling({ error, ...props }) {\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    }\n    return <Component {...props} />;\n  };\n}\n\nexport default withErrorHandling;\n```\n\n에러가 발생하면 withErrorHandling이 에러 메시지를 표시합니다. 그렇지 않으면 컴포넌트를 일반적으로 렌더링합니다. 이 HOC는 특히 fetch 오류를 처리하거나 컴포넌트 라이프사이클 내에서 발생하는 문제를 처리하기에 유용합니다.\n\nwithLoading과 withErrorHandling을 결합하여, 로딩 및 에러 상태를 우아하게 처리하는 견고한 컴포넌트를 만들 수 있습니다. 이 접근 방식은 코드 재사용과 관심사 분리를 촉진하여 컴포넌트를 더 쉽게 유지하고 이해하기 쉽게 만듭니다.\n\n## 훅을 사용하여 데이터 가져오기\n\n<div class=\"content-ad\"></div>\n\n리액트 훅을 사용하면 클래스를 작성하지 않고도 상태 및 기타 리액트 기능을 사용할 수 있습니다. useFetch는 API에서 데이터를 가져오는 커스텀 훅입니다:\n\n```js\n// src/hooks/useFetch.js\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const json = await response.json();\n        setData(json);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    // Cleanup function\n    return () => {\n      // Cleanup logic if needed\n    };\n  }, [url]);\n\n  return { data, isLoading, error };\n};\n\nexport default useFetch;\n```\n\n이 훅은 데이터 가져오기 상태, 데이터 저장 및 오류 처리를 처리하여 컴포넌트에서 데이터를 쉽게 가져와 표시할 수 있습니다.\n\n## 앱 조립하기\n\n<div class=\"content-ad\"></div>\n\n마지막으로, App 컴포넌트에서 모든 것을 하나로 통합합니다:\n\n```js\n// src/App.js\nimport React from 'react';\nimport withLoading from './hocs/withLoading';\nimport withErrorHandling from './hocs/withErrorHandling'; // 새로운 HOC 추가\nimport useFetch from './hooks/useFetch';\nimport List from './components/List';\n\nconst ListWithLoading = withLoading(List);\nconst ListWithErrorHandling = withErrorHandling(ListWithLoading); // ListWithLoading 컴포넌트에 에러 처리 추가\n\nconst App = () => {\n  const { data, isLoading, error } = useFetch('https://api.example.com/data');\n\n  return (\n    <div>\n      <h1>List Component</h1>\n      <ListWithErrorHandling data={data} isLoading={isLoading} error={error} /> {/* 에러가 발생하면 ListWithLoading 컴포넌트로 전달됩니다 */}\n    </div>\n  );\n};\n\nexport default App;\n```\n\nuseFetch 훅을 사용하여 데이터를 로드하고 HOC를 통해 로딩 및 에러 처리 기능이 추가된 List 컴포넌트에 전달합니다.\n\n## 결론\n\n<div class=\"content-ad\"></div>\n\n프로처럼 컴포넌트를 작성하려면 더 큰 그림을 고려하는 것이 중요합니다. 읽기 쉽고 유지보수 및 재사용이 용이한 컴포넌트를 만드는 것이죠. HOCs와 훅과 같은 패턴을 사용하여 시간이 지나도 유지보수가 용이하고 효율적인 코드베이스를 만들 수 있습니다.\n\n코딩을 즐기세요!\n\n# 평문으로 쓴 것 🚀\n\nIn Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 나가시기 전에:\n\n<div class=\"content-ad\"></div>\n\n- 작가를 박수로 응원하고 팔로우 해 주세요! 👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed\n- PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요.","ogImage":{"url":"/assets/img/2024-06-22-WriteaReactComponentLikeaPro_0.png"},"coverImage":"/assets/img/2024-06-22-WriteaReactComponentLikeaPro_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-22-WriteaReactComponentLikeaPro_0.png\">\n<p>리액트 세계에서 컴포넌트를 작성하는 것은 예술입니다. 그것은 단순히 작동하게 만드는 것이 아니라, 잘 작동하게 만드는 것이 중요합니다. 오늘은 프로처럼 컴포넌트를 만드는 방법을 살펴보겠습니다. 가독성, 재사용성, 효율성에 초점을 맞춰.</p>\n<h2>리스트 컴포넌트 만들기</h2>\n<p>우리가 기본 리스트 컴포넌트부터 시작해봅시다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/List.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">List</span> = (<span class=\"hljs-params\">{ data }</span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n      {data.map((item, index) => (\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>></span>{item}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      ))}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">List</span>;\n</code></pre>\n<p>이 컴포넌트는 데이터 배열을 가져와서 목록으로 렌더링합니다.</p>\n<h2>HOC로 컴포넌트 향상하기</h2>\n<p>고차 컴포넌트(Higher-Order Components, HOC)는 컴포넌트 로직을 재사용하는 강력한 패턴입니다. 기본적으로 컴포넌트를 감싸서 구조를 변경하지 않고 기능을 확장합니다.</p>\n<div class=\"content-ad\"></div>\n<p>예를 들어, withLoading HOC를 사용하면 로딩 상태를 표시할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/hocs/withLoading.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">withLoading</span>(<span class=\"hljs-params\">Component</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">WithLoading</span>(<span class=\"hljs-params\">{ isLoading, ...props }</span>) {\n    <span class=\"hljs-keyword\">if</span> (isLoading) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Loading...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Component</span> {<span class=\"hljs-attr\">...props</span>} /></span></span>;\n  };\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> withLoading;\n</code></pre>\n<p>이 HOC는 isLoading 속성을 확인합니다. 만약 true이면 \"로딩 중...\" 메시지를 렌더링합니다. 그렇지 않으면 래핑된 컴포넌트를 렌더링하여 데이터 가져오는 동안 사용자 경험이 연속적이게 됩니다.</p>\n<p>비슷하게, withErrorHandling은 에러 상태를 관리하는 다른 HOC입니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/hocs/withErrorHandling.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">withErrorHandling</span>(<span class=\"hljs-params\">Component</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">WithErrorHandling</span>(<span class=\"hljs-params\">{ error, ...props }</span>) {\n    <span class=\"hljs-keyword\">if</span> (error) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Error: {error.message}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Component</span> {<span class=\"hljs-attr\">...props</span>} /></span></span>;\n  };\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> withErrorHandling;\n</code></pre>\n<p>에러가 발생하면 withErrorHandling이 에러 메시지를 표시합니다. 그렇지 않으면 컴포넌트를 일반적으로 렌더링합니다. 이 HOC는 특히 fetch 오류를 처리하거나 컴포넌트 라이프사이클 내에서 발생하는 문제를 처리하기에 유용합니다.</p>\n<p>withLoading과 withErrorHandling을 결합하여, 로딩 및 에러 상태를 우아하게 처리하는 견고한 컴포넌트를 만들 수 있습니다. 이 접근 방식은 코드 재사용과 관심사 분리를 촉진하여 컴포넌트를 더 쉽게 유지하고 이해하기 쉽게 만듭니다.</p>\n<h2>훅을 사용하여 데이터 가져오기</h2>\n<div class=\"content-ad\"></div>\n<p>리액트 훅을 사용하면 클래스를 작성하지 않고도 상태 및 기타 리액트 기능을 사용할 수 있습니다. useFetch는 API에서 데이터를 가져오는 커스텀 훅입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/hooks/useFetch.js</span>\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useFetch</span> = (<span class=\"hljs-params\">url</span>) => {\n  <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>([]);\n  <span class=\"hljs-keyword\">const</span> [isLoading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [error, setError] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fetchData</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n      <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>);\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(url);\n        <span class=\"hljs-keyword\">if</span> (!response.<span class=\"hljs-property\">ok</span>) {\n          <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">'Network response was not ok'</span>);\n        }\n        <span class=\"hljs-keyword\">const</span> json = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n        <span class=\"hljs-title function_\">setData</span>(json);\n      } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-title function_\">setError</span>(error);\n      } <span class=\"hljs-keyword\">finally</span> {\n        <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n      }\n    };\n\n    <span class=\"hljs-title function_\">fetchData</span>();\n\n    <span class=\"hljs-comment\">// Cleanup function</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-comment\">// Cleanup logic if needed</span>\n    };\n  }, [url]);\n\n  <span class=\"hljs-keyword\">return</span> { data, isLoading, error };\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useFetch;\n</code></pre>\n<p>이 훅은 데이터 가져오기 상태, 데이터 저장 및 오류 처리를 처리하여 컴포넌트에서 데이터를 쉽게 가져와 표시할 수 있습니다.</p>\n<h2>앱 조립하기</h2>\n<div class=\"content-ad\"></div>\n<p>마지막으로, App 컴포넌트에서 모든 것을 하나로 통합합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/App.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> withLoading <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./hocs/withLoading'</span>;\n<span class=\"hljs-keyword\">import</span> withErrorHandling <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./hocs/withErrorHandling'</span>; <span class=\"hljs-comment\">// 새로운 HOC 추가</span>\n<span class=\"hljs-keyword\">import</span> useFetch <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./hooks/useFetch'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">List</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/List'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ListWithLoading</span> = <span class=\"hljs-title function_\">withLoading</span>(<span class=\"hljs-title class_\">List</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ListWithErrorHandling</span> = <span class=\"hljs-title function_\">withErrorHandling</span>(<span class=\"hljs-title class_\">ListWithLoading</span>); <span class=\"hljs-comment\">// ListWithLoading 컴포넌트에 에러 처리 추가</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> { data, isLoading, error } = <span class=\"hljs-title function_\">useFetch</span>(<span class=\"hljs-string\">'https://api.example.com/data'</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>List Component<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ListWithErrorHandling</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{data}</span> <span class=\"hljs-attr\">isLoading</span>=<span class=\"hljs-string\">{isLoading}</span> <span class=\"hljs-attr\">error</span>=<span class=\"hljs-string\">{error}</span> /></span> {/* 에러가 발생하면 ListWithLoading 컴포넌트로 전달됩니다 */}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>useFetch 훅을 사용하여 데이터를 로드하고 HOC를 통해 로딩 및 에러 처리 기능이 추가된 List 컴포넌트에 전달합니다.</p>\n<h2>결론</h2>\n<div class=\"content-ad\"></div>\n<p>프로처럼 컴포넌트를 작성하려면 더 큰 그림을 고려하는 것이 중요합니다. 읽기 쉽고 유지보수 및 재사용이 용이한 컴포넌트를 만드는 것이죠. HOCs와 훅과 같은 패턴을 사용하여 시간이 지나도 유지보수가 용이하고 효율적인 코드베이스를 만들 수 있습니다.</p>\n<p>코딩을 즐기세요!</p>\n<h1>평문으로 쓴 것 🚀</h1>\n<p>In Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 나가시기 전에:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>작가를 박수로 응원하고 팔로우 해 주세요! 👏️️</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터</li>\n<li>다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed</li>\n<li>PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}