{"pageProps":{"post":{"title":"Nextjs에서 와일드카드 서브도메인을 경로로 사용하기","description":"","date":"2024-05-12 19:59","slug":"2024-05-12-UsingwildcardsubdomainsaspathsonNextjs","content":"\n\n가끔씩 App Masters에서는 각 가능한 서브도메인마다 다른 주제(또는 데이터)를 가진 프로젝트를 작업해야 합니다.\n\n![Using wildcard subdomains as paths on Next.js](/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_0.png)\n\nNext.js를 사용하고 있기 때문에 기본적으로 이렇게 하는 것이 가능해 보이지만, 사실 그렇게 간단하지는 않습니다.\n\n클라이언트 측에서는 window.location을 사용하여 쉽게 서브도메인을 알 수 있지만, 서버 측에서는 런타임에만 알 수 있고 빌드 타임에서는 알 수 없기 때문에 정적 렌더링과 Next.js에서 제공했던 기타 최적화 기능을 포기해야 했습니다. 대신 항상 getServerSideProps를 사용하여 요청 내에서 서브도메인을 가져오는 방식으로 사용하게 되었습니다.\n\n\n\n더 이상 그럴 필요 없어요!\n\n이 문제를 해결하기 위한 첫 번째 접근 방식은 각 요청의 헤더를 확인하면서 Next.js 리라이트 기능을 사용하려고 매핑하는 것이었습니다. 작동할 것 같지만 현재는 헤더 값을 경로로 매핑할 수 없고 매개변수만 가능합니다.\n\n다른 해결책은 Next.js 프론트엔드를 제공하는 사용자 지정 노드 서버를 갖는 것인데요, 이 경우 최적화 기능 중 일부를 놓치게 되고 더 많은 코드를 유지 보수해야 합니다.\n\n# 해결책: 미들웨어 사용하기!\n\n\n\nNext 12에서 소개되고 Next 13에서 업데이트된 것은 이제 우리는 미들웨어를 쉽게 사용하여 다음 노드 서버로의 모든 요청을 처리할 수 있으며 요청이 라우터에 도달하기 전에 요청을 변경할 수 있습니다.\n\n그래서 먼저, /src/pages 폴더 내에 [서브도메인]이라는 폴더를 만들고 이 폴더에 모든 페이지를 추가했습니다. 이미 알고 계시겠지만, 페이지 폴더 내의 폴더/파일 이름에 []를 추가하면 해당 이름이 동적인 것으로 만들어집니다.\n\n![이미지](/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_1.png)\n\n그 다음으로, pages 폴더와 동일한 레벨에 src/middleware.ts 파일을 생성하고 코드를 작성하기 시작했습니다.\n\n\n\n```js\n// middleware.ts\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { getValidSubdomain } from '@/utils/subdomain';\n\n// 정규 표현식을 이용하여 공개 파일을 판별합니다\nconst PUBLIC_FILE = /\\.(.*)$/; // 파일\n\nexport async function middleware(req: NextRequest) {\n  // URL을 복제합니다\n  const url = req.nextUrl.clone();\n\n  // 공개 파일은 건너뜁니다\n  if (PUBLIC_FILE.test(url.pathname) || url.pathname.includes('_next')) return;\n\n  const host = req.headers.get('host');\n  const subdomain = getValidSubdomain(host);\n  if (subdomain) {\n    // 서브도메인이 있는 경우 경로를 다시 작성합니다\n    console.log(`>>> Rewriting: ${url.pathname} to /${subdomain}${url.pathname}`);\n    url.pathname = `/${subdomain}${url.pathname}`;\n  }\n\n  return NextResponse.rewrite(url);\n}\n```\n\nmiddleware 함수는 내 모든 요청을 처리하며 유효한 서브도메인이 있는지 확인합니다. 있다면, 수동으로 pathname을 '/subdomain'으로 재작성합니다. 예를 들어, https://baraky.domain.com/edit 요청은 https://baraky.domain.com/baraky/edit 페이지로 접근합니다.\n\ngetValidSubdomain의 코드는 다음과 같습니다:\n\n```js\nexport const getValidSubdomain = (host?: string | null) => {\n  let subdomain: string | null = null;\n  if (!host && typeof window !== 'undefined') {\n    // 클라이언트 측에서는 window를 통해 host를 가져옵니다\n    host = window.location.host;\n  }\n  if (host && host.includes('.')) {\n    const candidate = host.split('.')[0];\n    if (candidate && !candidate.includes('localhost')) {\n      // 유효한 후보\n      subdomain = candidate;\n    }\n  }\n  return subdomain;\n};\n```\n\n\n\n해당 함수에 몇 가지 다른 기능을 추가했어요. 호스트 문자열이 없어도 서브도메인을 가져올 수 있게 했답니다.\n\n이제는 [subdomain] 폴더 내에서 페이지를 변경할 수 있을 거예요. 서브도메인 값은 라우터 내에서 query 매개변수로 사용할 수 있고, 이를 원하는 대로 활용할 수 있어요:\n\n- 각 서브도메인에 대한 관련 데이터를 가져오기\n- 각 서브도메인마다 다른 테마 적용하기\n- 각 서브도메인별로 특정 캐시 사용 및 getStaticProps를 사용한 정적 생성 페이지 생성하기\n\n하지만 기억해 주세요: 와일드카드 서브도메인에 액세스하려면 해당 기능을 제공하는 호스팅 내에서 Next.js 앱을 호스팅해야 합니다.\n\n\n\n# 왜 이게 중요한가요?\n\n서브도메인 대신 서브 라우트로 페이지를 분리하면 각 서브도메인에 대해 getStaticProps를 사용할 수 있습니다. 서로 다른 캐시에서 분리할 수 있으므로 Next.js는 https://something.domain.com과 https://other-thing.domain.com을 구별할 수 있습니다. 그렇지 않으면 두 웹사이트 모두에 대해 같은 정적 렌더링을 반환할 것입니다.","ogImage":{"url":"/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_0.png"},"coverImage":"/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>가끔씩 App Masters에서는 각 가능한 서브도메인마다 다른 주제(또는 데이터)를 가진 프로젝트를 작업해야 합니다.</p>\n<p><img src=\"/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_0.png\" alt=\"Using wildcard subdomains as paths on Next.js\"></p>\n<p>Next.js를 사용하고 있기 때문에 기본적으로 이렇게 하는 것이 가능해 보이지만, 사실 그렇게 간단하지는 않습니다.</p>\n<p>클라이언트 측에서는 window.location을 사용하여 쉽게 서브도메인을 알 수 있지만, 서버 측에서는 런타임에만 알 수 있고 빌드 타임에서는 알 수 없기 때문에 정적 렌더링과 Next.js에서 제공했던 기타 최적화 기능을 포기해야 했습니다. 대신 항상 getServerSideProps를 사용하여 요청 내에서 서브도메인을 가져오는 방식으로 사용하게 되었습니다.</p>\n<p>더 이상 그럴 필요 없어요!</p>\n<p>이 문제를 해결하기 위한 첫 번째 접근 방식은 각 요청의 헤더를 확인하면서 Next.js 리라이트 기능을 사용하려고 매핑하는 것이었습니다. 작동할 것 같지만 현재는 헤더 값을 경로로 매핑할 수 없고 매개변수만 가능합니다.</p>\n<p>다른 해결책은 Next.js 프론트엔드를 제공하는 사용자 지정 노드 서버를 갖는 것인데요, 이 경우 최적화 기능 중 일부를 놓치게 되고 더 많은 코드를 유지 보수해야 합니다.</p>\n<h1>해결책: 미들웨어 사용하기!</h1>\n<p>Next 12에서 소개되고 Next 13에서 업데이트된 것은 이제 우리는 미들웨어를 쉽게 사용하여 다음 노드 서버로의 모든 요청을 처리할 수 있으며 요청이 라우터에 도달하기 전에 요청을 변경할 수 있습니다.</p>\n<p>그래서 먼저, /src/pages 폴더 내에 [서브도메인]이라는 폴더를 만들고 이 폴더에 모든 페이지를 추가했습니다. 이미 알고 계시겠지만, 페이지 폴더 내의 폴더/파일 이름에 []를 추가하면 해당 이름이 동적인 것으로 만들어집니다.</p>\n<p><img src=\"/assets/img/2024-05-12-UsingwildcardsubdomainsaspathsonNextjs_1.png\" alt=\"이미지\"></p>\n<p>그 다음으로, pages 폴더와 동일한 레벨에 src/middleware.ts 파일을 생성하고 코드를 작성하기 시작했습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// middleware.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NextResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/server'</span>;\n<span class=\"hljs-keyword\">import</span> type { <span class=\"hljs-title class_\">NextRequest</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/server'</span>;\n<span class=\"hljs-keyword\">import</span> { getValidSubdomain } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/utils/subdomain'</span>;\n\n<span class=\"hljs-comment\">// 정규 표현식을 이용하여 공개 파일을 판별합니다</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PUBLIC_FILE</span> = <span class=\"hljs-regexp\">/\\.(.*)$/</span>; <span class=\"hljs-comment\">// 파일</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">req: NextRequest</span>) {\n  <span class=\"hljs-comment\">// URL을 복제합니다</span>\n  <span class=\"hljs-keyword\">const</span> url = req.<span class=\"hljs-property\">nextUrl</span>.<span class=\"hljs-title function_\">clone</span>();\n\n  <span class=\"hljs-comment\">// 공개 파일은 건너뜁니다</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable constant_\">PUBLIC_FILE</span>.<span class=\"hljs-title function_\">test</span>(url.<span class=\"hljs-property\">pathname</span>) || url.<span class=\"hljs-property\">pathname</span>.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">'_next'</span>)) <span class=\"hljs-keyword\">return</span>;\n\n  <span class=\"hljs-keyword\">const</span> host = req.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'host'</span>);\n  <span class=\"hljs-keyword\">const</span> subdomain = <span class=\"hljs-title function_\">getValidSubdomain</span>(host);\n  <span class=\"hljs-keyword\">if</span> (subdomain) {\n    <span class=\"hljs-comment\">// 서브도메인이 있는 경우 경로를 다시 작성합니다</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`>>> Rewriting: <span class=\"hljs-subst\">${url.pathname}</span> to /<span class=\"hljs-subst\">${subdomain}</span><span class=\"hljs-subst\">${url.pathname}</span>`</span>);\n    url.<span class=\"hljs-property\">pathname</span> = <span class=\"hljs-string\">`/<span class=\"hljs-subst\">${subdomain}</span><span class=\"hljs-subst\">${url.pathname}</span>`</span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">rewrite</span>(url);\n}\n</code></pre>\n<p>middleware 함수는 내 모든 요청을 처리하며 유효한 서브도메인이 있는지 확인합니다. 있다면, 수동으로 pathname을 '/subdomain'으로 재작성합니다. 예를 들어, <a href=\"https://baraky.domain.com/edit\" rel=\"nofollow\" target=\"_blank\">https://baraky.domain.com/edit</a> 요청은 <a href=\"https://baraky.domain.com/baraky/edit\" rel=\"nofollow\" target=\"_blank\">https://baraky.domain.com/baraky/edit</a> 페이지로 접근합니다.</p>\n<p>getValidSubdomain의 코드는 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getValidSubdomain</span> = (<span class=\"hljs-params\">host?: string | <span class=\"hljs-literal\">null</span></span>) => {\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">subdomain</span>: string | <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">if</span> (!host &#x26;&#x26; <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">window</span> !== <span class=\"hljs-string\">'undefined'</span>) {\n    <span class=\"hljs-comment\">// 클라이언트 측에서는 window를 통해 host를 가져옵니다</span>\n    host = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">host</span>;\n  }\n  <span class=\"hljs-keyword\">if</span> (host &#x26;&#x26; host.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">'.'</span>)) {\n    <span class=\"hljs-keyword\">const</span> candidate = host.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">'.'</span>)[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">if</span> (candidate &#x26;&#x26; !candidate.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">'localhost'</span>)) {\n      <span class=\"hljs-comment\">// 유효한 후보</span>\n      subdomain = candidate;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> subdomain;\n};\n</code></pre>\n<p>해당 함수에 몇 가지 다른 기능을 추가했어요. 호스트 문자열이 없어도 서브도메인을 가져올 수 있게 했답니다.</p>\n<p>이제는 [subdomain] 폴더 내에서 페이지를 변경할 수 있을 거예요. 서브도메인 값은 라우터 내에서 query 매개변수로 사용할 수 있고, 이를 원하는 대로 활용할 수 있어요:</p>\n<ul>\n<li>각 서브도메인에 대한 관련 데이터를 가져오기</li>\n<li>각 서브도메인마다 다른 테마 적용하기</li>\n<li>각 서브도메인별로 특정 캐시 사용 및 getStaticProps를 사용한 정적 생성 페이지 생성하기</li>\n</ul>\n<p>하지만 기억해 주세요: 와일드카드 서브도메인에 액세스하려면 해당 기능을 제공하는 호스팅 내에서 Next.js 앱을 호스팅해야 합니다.</p>\n<h1>왜 이게 중요한가요?</h1>\n<p>서브도메인 대신 서브 라우트로 페이지를 분리하면 각 서브도메인에 대해 getStaticProps를 사용할 수 있습니다. 서로 다른 캐시에서 분리할 수 있으므로 Next.js는 <a href=\"https://something.domain.com%EA%B3%BC\" rel=\"nofollow\" target=\"_blank\">https://something.domain.com과</a> <a href=\"https://other-thing.domain.com%EC%9D%84\" rel=\"nofollow\" target=\"_blank\">https://other-thing.domain.com을</a> 구별할 수 있습니다. 그렇지 않으면 두 웹사이트 모두에 대해 같은 정적 렌더링을 반환할 것입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}