{"pageProps":{"post":{"title":"SwiftUI 간단하게 시작하기","description":"","date":"2024-05-17 03:53","slug":"2024-05-17-SwiftUIThinking","content":"\n\n<img src=\"/assets/img/2024-05-17-SwiftUIThinking_0.png\" />\n\nSwiftUI가 우리의 백로그에 올라온 지 어느 정도 되었네요. iOS 개발자로서, 우리는 SwiftUI를 기다리며 올바른 시기에 빠져들기를 기다리고 있었어요.\n\n여기에 SwiftUI에 대한 간략한 소개가 있습니다!\n\nSwiftUI의 시작점을 찾고 있다면, 여기서 시작하시면 됩니다!\n\n<div class=\"content-ad\"></div>\n\n# 일반적인 뷰 구성 요소와 속성들\n\nSwiftUI에는 UIKit과 유사하게 사용되는 몇 가지 인기 있는 UI 구성 요소가 있습니다.\n\n## Text\n\nText는 UILabel과 동일합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nText(\"Hello World!\")\n    .font(.title.bold())\n    .foregroundStyle(.blue)\n```\n\n![SwiftUI Thinking](/assets/img/2024-05-17-SwiftUIThinking_1.png)\n\n## 버튼\n\n예상했던대로, Button은 UIButton에 해당합니다.\n\n\n<div class=\"content-ad\"></div>\n\n```swift\nButton {\n    print(\"Button Action\")\n} label: {\n    Text(\"Hello World!\")\n        .font(.title.bold())\n        .foregroundStyle(.white)\n        .padding()\n        .background(.blue)\n        .clipShape(RoundedRectangle(cornerRadius: 16))\n}\n```\n\n![Image](/assets/img/2024-05-17-SwiftUIThinking_2.png)\n\n## 이미지\n\nImage는 UIImageView와 같다고 생각하면 됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n![시스템 이름을 사용한 이미지](Image(systemName: \"house.fill\")\n    .resizable()\n    .scaledToFit()\n    .foregroundStyle(.blue)\n)\n\n![SwiftUI를 학습하는 이미지](/assets/img/2024-05-17-SwiftUIThinking_3.png)\n\n## TextField\n\nTextField은 UITextField와 동일합니다.\n\n\n<div class=\"content-ad\"></div>\n\n\nTextField(\"placeholder\", text: .constant(\"\"))\n    .textFieldStyle(.roundedBorder)\n\n\n![SwiftUIThinking_4](/assets/img/2024-05-17-SwiftUIThinking_4.png)\n\n# HStack & VStack\n\n앱의 UI를 구조화할 때는 뷰를 서로 정렬하는 것이 중요합니다.\n\n\n<div class=\"content-ad\"></div>\n\nSwiftUI에서는 이를 위한 두 가지 주요 레이아웃 빌더가 있습니다: HStack과 VStack.\n\n이러한 레이아웃 빌더를 사용하면 각각 뷰를 수평 및 수직으로 정렬할 수 있습니다.\n\n보다 복잡한 레이아웃을 구현하기 위해 이들을 결합할 수도 있습니다.\n\n## HStack\n\n<div class=\"content-ad\"></div>\n\n`HStack`은 뷰를 수평으로 정렬합니다.\n\n```js\nHStack {\n    Text(\"Leading Text\")\n        .font(.body.bold())\n        .foregroundStyle(.blue)\n\n    Text(\"Trailing Text\")\n        .fonts(.caption.bold())\n        .foregroundStyle(.orange)\n}\n```\n\n![SwiftUIThinking_5](/assets/img/2024-05-17-SwiftUIThinking_5.png)\n\n## VStack\n\n<div class=\"content-ad\"></div>\n\n뷰를 수직으로 정렬합니다.\n\n```js\nVStack {\n    Text(\"상단 텍스트\")\n        .font(.body.bold())\n        .foregroundStyle(.blue)\n\n    Text(\"하단 텍스트\")\n        .font(.caption.bold())\n        .foregroundStyle(.orange)\n}\n```\n\n<img src=\"/assets/img/2024-05-17-SwiftUIThinking_6.png\" />\n\n# 뷰 간의 관계: Spacer로 유연한 UI\n\n<div class=\"content-ad\"></div>\n\nSpacer는 SwiftUI의 가벼우면서 강력한 구성 요소로 유연한 UI를 구축하는 데 사용됩니다.\n\n원하는 뷰를 다른 뷰에 일정한 여백(leading, top, trailing, bottom)을 사용하여 정렬하는 것은 지루할 수 있습니다.\n\n```swift\nHStack {\n    Text(\"Leading Text\")\n        .font(.body.bold())\n        .foregroundStyle(.blue)\n\n    Spacer()\n\n    Text(\"Trailing Text\")\n        .font(.caption.bold())\n        .foregroundStyle(.orange)\n}\n``` \n\n![SwiftUIThinking_7](/assets/img/2024-05-17-SwiftUIThinking_7.png)\n\n<div class=\"content-ad\"></div>\n\nSpacer가 HStack 안의 두 개의 Text 사이에 배치되면, 디자인된대로 Text를 가장자리쪽으로 밀어냅니다.\n\n```js\nHStack {\n    Spacer()\n\n    Text(\"Leading Text\")\n        .font(.body.bold())\n        .foregroundStyle(.blue)\n\n    Spacer()\n\n    Text(\"Trailing Text\")\n        .font(.caption.bold())\n        .foregroundStyle(.orange)\n\n    Spacer()\n    Spacer()\n}\n```\n\nLeading Text 앞에 Spacer를 하나 추가하고, Trailing Text 뒤에 Spacer를 두 개 더 추가했어요.\n\n<img src=\"/assets/img/2024-05-17-SwiftUIThinking_8.png\" />\n\n<div class=\"content-ad\"></div>\n\n스페이서를 추가할 때, 선두 텍스트는 선도를 기준으로 한 스페이서 만큼 멀어지고, 추적 텍스트는 후도를 기준으로 두 스페이서 만큼 멀어집니다.\n\n그 결과로, 추적 텍스트는 선두 텍스트에 비해 기기 가장자리로부터 더 멀리 떨어지게 됩니다.\n\n# 데이터 목록 다루기\n\n데이터 목록에 대해, SwiftUI에는 List 또는 Foreach라는 두 가지 옵션이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 목록\n\n목록은 UIKit의 UITableView와 같습니다.\n\n```swift\nvar numbers = [1, 2, 3, 4, 5]\n\nList(numbers, id: \\.self) { number in\n    Text(\"\\(number)\")\n}\n```\n\n<img src=\"/assets/img/2024-05-17-SwiftUIThinking_9.png\" />\n\n<div class=\"content-ad\"></div>\n\n안녕하세요!\n\nMarkdown 형식으로 표를 변환하려면 다음과 같이 해보세요.\n\nList에는 구분선, 카드 모양 등과 같은 준비된 UI가 포함되어 있습니다. 쉽죠!\n\n## Foreach\n\n```js\nvar numbers = [1, 2, 3, 4, 5]\n\nVStack {\n    ForEach(numbers, id: \\.self) { number in\n        Text(\"\\(number)\")\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-17-SwiftUIThinking_10.png)\n\nThe Foreach construct offers a leaner alternative to the List component. With Foreach, you have full control over building your list UI, resulting in a simpler and more customizable approach.\n\n## Updating UI with Observable Property\n\nSwiftUI differs from UIKit by embracing the Declarative Programming approach.\n\n\n<div class=\"content-ad\"></div>\n\n선언적 프로그래밍에서 UI는 Observable 값이나 속성의 변경을 관찰합니다.\n\n값이 변경될 때마다 UI는 동적으로 변경 사항을 반영합니다.\n\nSwiftUI의 기본 속성 래퍼(State 및 Binding)는 관찰 가능성을 활성화합니다:\n\nState: 단방향 연결을 용이하게 해 주며 주로 연결된 뷰 내에서 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n바인딩: 양방향 연결을 수립하고 상태 속성을 다른 뷰로 전송하는 데 사용됩니다.\n\n## 지금은 상태에 집중해 보겠습니다\n\n```js\n@State var text: String = \"초기 텍스트\"\n\nVStack(spacing: 32) {\n    Button {\n        text = \"수정된 변경\"\n    } label: {\n        Text(\"텍스트 변경\")\n            .font(.title.bold())\n            .foregroundStyle(.white)\n            .padding()\n            .background(.blue)\n            .clipShape(RoundedRectangle(cornerRadius: 16))\n    }\n\n    Text(text)\n        .font(.body.bold())\n        .foregroundStyle(.blue)\n}\n```\n\n![이미지](https://miro.medium.com/v2/resize:fit:590/1*UAzw-1G__azlbNUSfevu9Q.gif)\n\n<div class=\"content-ad\"></div>\n\n변경 텍스트 버튼 액션은 observable text 속성을 수정합니다. UI는 텍스트 속성의 변경 사항을 듣도록 설계되어 있으므로 자동으로 업데이트됩니다. 이 기능은 State 프로퍼티 래퍼로 가능해졌습니다.\n\n# 뷰\n\n모든 SwiftUI 뷰는 View 프로토콜을 준수하는 구조체입니다.\n\n구조체는 클래스 상속을 허용하지 않으므로 SwiftUI 뷰는 프로토콜에만 준수할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n위 특성들은 SwiftUI에서 뷰를 독립적이고 고유하게 보는 방식을 채택해야 함을 필요로 합니다.\n\nUIKit에서는 UIViewController 및 UITableViewController와 같은 특정 뷰를 위한 기본 클래스를 생성하는 것이 일반적입니다. 이 습관에서 벗어나는 것은 어려울 수 있지만, 마음가짐을 바꿈으로써 가능합니다!\n\n# 유용한 구성 요소\n\nSwiftUI의 핵심 원칙 중 하나는 작성 코드를 줄이고 더 많은 작업을 하는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n뒤에 표식을 확인 해주세요.\n\n<div class=\"content-ad\"></div>\n\n\n![Image](/assets/img/2024-05-17-SwiftUIThinking_11.png)\n  \n## Picker\n\nIt is a combination of UISegmentedControl and UIPickerView.\n\nIt provides various styles such as wheel, inline, segmented, and palette.\n\n\n<div class=\"content-ad\"></div>\n\n\n```js\nlet numbers = [1, 2, 3, 4, 5]\n@State var selection: Int = 0\n\nPicker(\"Select\", selection: $selection) {\n    ForEach(numbers, id: \\.self) { number in\n        Text(\"\\(number)\")\n    }\n}\n.pickerStyle(.inline)\n``` \n\n![Image Scale](https://miro.medium.com/v2/resize:fit:590/1*fy8_zvsJAsM7_4dQB4QgdA.gif)\n\n# 이미지 크기 조절\n\nSwiftUI가 처음 나온 이후, Apple은 이미지 라이브러리인 SF Symbols를 제공해 왔습니다. Image 뷰를 사용하여 이 라이브러리의 이미지에 쉽게 액세스할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n또한, Text 뷰의 글꼴 설정과 유사하게 이미지 크기를 조절할 수 있는 font 기능을 사용해 이미지의 크기를 조절할 수 있습니다.\n\n```js\nImage(systemName: \"house.fill\")\n    .font(.largeTitle)\n```\n\nSwiftUI는 Apple 환경에서 프로젝트를 개발하는 새로운 방법입니다.\n\nSwiftUI의 방식에 대해 생각을 조정하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n한번 그것을 할 수 있다면, SwiftUI의 문들이 완전히 열릴 것입니다!","ogImage":{"url":"/assets/img/2024-05-17-SwiftUIThinking_0.png"},"coverImage":"/assets/img/2024-05-17-SwiftUIThinking_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-17-SwiftUIThinking_0.png\">\n<p>SwiftUI가 우리의 백로그에 올라온 지 어느 정도 되었네요. iOS 개발자로서, 우리는 SwiftUI를 기다리며 올바른 시기에 빠져들기를 기다리고 있었어요.</p>\n<p>여기에 SwiftUI에 대한 간략한 소개가 있습니다!</p>\n<p>SwiftUI의 시작점을 찾고 있다면, 여기서 시작하시면 됩니다!</p>\n<div class=\"content-ad\"></div>\n<h1>일반적인 뷰 구성 요소와 속성들</h1>\n<p>SwiftUI에는 UIKit과 유사하게 사용되는 몇 가지 인기 있는 UI 구성 요소가 있습니다.</p>\n<h2>Text</h2>\n<p>Text는 UILabel과 동일합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"Hello World!\"</span>)\n    .<span class=\"hljs-title function_\">font</span>(.<span class=\"hljs-property\">title</span>.<span class=\"hljs-title function_\">bold</span>())\n    .<span class=\"hljs-title function_\">foregroundStyle</span>(.<span class=\"hljs-property\">blue</span>)\n</code></pre>\n<p><img src=\"/assets/img/2024-05-17-SwiftUIThinking_1.png\" alt=\"SwiftUI Thinking\"></p>\n<h2>버튼</h2>\n<p>예상했던대로, Button은 UIButton에 해당합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-type\">Button</span> {\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Button Action\"</span>)\n} label: {\n    <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">\"Hello World!\"</span>)\n        .font(.title.bold())\n        .foregroundStyle(.white)\n        .padding()\n        .background(.blue)\n        .clipShape(<span class=\"hljs-type\">RoundedRectangle</span>(cornerRadius: <span class=\"hljs-number\">16</span>))\n}\n</code></pre>\n<p><img src=\"/assets/img/2024-05-17-SwiftUIThinking_2.png\" alt=\"Image\"></p>\n<h2>이미지</h2>\n<p>Image는 UIImageView와 같다고 생각하면 됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>![시스템 이름을 사용한 이미지](Image(systemName: \"house.fill\")\n.resizable()\n.scaledToFit()\n.foregroundStyle(.blue)\n)</p>\n<p><img src=\"/assets/img/2024-05-17-SwiftUIThinking_3.png\" alt=\"SwiftUI를 학습하는 이미지\"></p>\n<h2>TextField</h2>\n<p>TextField은 UITextField와 동일합니다.</p>\n<div class=\"content-ad\"></div>\n<p>TextField(\"placeholder\", text: .constant(\"\"))\n.textFieldStyle(.roundedBorder)</p>\n<p><img src=\"/assets/img/2024-05-17-SwiftUIThinking_4.png\" alt=\"SwiftUIThinking_4\"></p>\n<h1>HStack &#x26; VStack</h1>\n<p>앱의 UI를 구조화할 때는 뷰를 서로 정렬하는 것이 중요합니다.</p>\n<div class=\"content-ad\"></div>\n<p>SwiftUI에서는 이를 위한 두 가지 주요 레이아웃 빌더가 있습니다: HStack과 VStack.</p>\n<p>이러한 레이아웃 빌더를 사용하면 각각 뷰를 수평 및 수직으로 정렬할 수 있습니다.</p>\n<p>보다 복잡한 레이아웃을 구현하기 위해 이들을 결합할 수도 있습니다.</p>\n<h2>HStack</h2>\n<div class=\"content-ad\"></div>\n<p><code>HStack</code>은 뷰를 수평으로 정렬합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">HStack</span> {\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"Leading Text\"</span>)\n        .<span class=\"hljs-title function_\">font</span>(.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">bold</span>())\n        .<span class=\"hljs-title function_\">foregroundStyle</span>(.<span class=\"hljs-property\">blue</span>)\n\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"Trailing Text\"</span>)\n        .<span class=\"hljs-title function_\">fonts</span>(.<span class=\"hljs-property\">caption</span>.<span class=\"hljs-title function_\">bold</span>())\n        .<span class=\"hljs-title function_\">foregroundStyle</span>(.<span class=\"hljs-property\">orange</span>)\n}\n</code></pre>\n<p><img src=\"/assets/img/2024-05-17-SwiftUIThinking_5.png\" alt=\"SwiftUIThinking_5\"></p>\n<h2>VStack</h2>\n<div class=\"content-ad\"></div>\n<p>뷰를 수직으로 정렬합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">VStack</span> {\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"상단 텍스트\"</span>)\n        .<span class=\"hljs-title function_\">font</span>(.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">bold</span>())\n        .<span class=\"hljs-title function_\">foregroundStyle</span>(.<span class=\"hljs-property\">blue</span>)\n\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"하단 텍스트\"</span>)\n        .<span class=\"hljs-title function_\">font</span>(.<span class=\"hljs-property\">caption</span>.<span class=\"hljs-title function_\">bold</span>())\n        .<span class=\"hljs-title function_\">foregroundStyle</span>(.<span class=\"hljs-property\">orange</span>)\n}\n</code></pre>\n<img src=\"/assets/img/2024-05-17-SwiftUIThinking_6.png\">\n<h1>뷰 간의 관계: Spacer로 유연한 UI</h1>\n<div class=\"content-ad\"></div>\n<p>Spacer는 SwiftUI의 가벼우면서 강력한 구성 요소로 유연한 UI를 구축하는 데 사용됩니다.</p>\n<p>원하는 뷰를 다른 뷰에 일정한 여백(leading, top, trailing, bottom)을 사용하여 정렬하는 것은 지루할 수 있습니다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-type\">HStack</span> {\n    <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">\"Leading Text\"</span>)\n        .font(.body.bold())\n        .foregroundStyle(.blue)\n\n    <span class=\"hljs-type\">Spacer</span>()\n\n    <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">\"Trailing Text\"</span>)\n        .font(.caption.bold())\n        .foregroundStyle(.orange)\n}\n</code></pre>\n<p><img src=\"/assets/img/2024-05-17-SwiftUIThinking_7.png\" alt=\"SwiftUIThinking_7\"></p>\n<div class=\"content-ad\"></div>\n<p>Spacer가 HStack 안의 두 개의 Text 사이에 배치되면, 디자인된대로 Text를 가장자리쪽으로 밀어냅니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">HStack</span> {\n    <span class=\"hljs-title class_\">Spacer</span>()\n\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"Leading Text\"</span>)\n        .<span class=\"hljs-title function_\">font</span>(.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">bold</span>())\n        .<span class=\"hljs-title function_\">foregroundStyle</span>(.<span class=\"hljs-property\">blue</span>)\n\n    <span class=\"hljs-title class_\">Spacer</span>()\n\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"Trailing Text\"</span>)\n        .<span class=\"hljs-title function_\">font</span>(.<span class=\"hljs-property\">caption</span>.<span class=\"hljs-title function_\">bold</span>())\n        .<span class=\"hljs-title function_\">foregroundStyle</span>(.<span class=\"hljs-property\">orange</span>)\n\n    <span class=\"hljs-title class_\">Spacer</span>()\n    <span class=\"hljs-title class_\">Spacer</span>()\n}\n</code></pre>\n<p>Leading Text 앞에 Spacer를 하나 추가하고, Trailing Text 뒤에 Spacer를 두 개 더 추가했어요.</p>\n<img src=\"/assets/img/2024-05-17-SwiftUIThinking_8.png\">\n<div class=\"content-ad\"></div>\n<p>스페이서를 추가할 때, 선두 텍스트는 선도를 기준으로 한 스페이서 만큼 멀어지고, 추적 텍스트는 후도를 기준으로 두 스페이서 만큼 멀어집니다.</p>\n<p>그 결과로, 추적 텍스트는 선두 텍스트에 비해 기기 가장자리로부터 더 멀리 떨어지게 됩니다.</p>\n<h1>데이터 목록 다루기</h1>\n<p>데이터 목록에 대해, SwiftUI에는 List 또는 Foreach라는 두 가지 옵션이 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>목록</h2>\n<p>목록은 UIKit의 UITableView와 같습니다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">var</span> numbers <span class=\"hljs-operator\">=</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n<span class=\"hljs-type\">List</span>(numbers, id: \\.<span class=\"hljs-keyword\">self</span>) { number <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">\\(number)</span>\"</span>)\n}\n</code></pre>\n<img src=\"/assets/img/2024-05-17-SwiftUIThinking_9.png\">\n<div class=\"content-ad\"></div>\n<p>안녕하세요!</p>\n<p>Markdown 형식으로 표를 변환하려면 다음과 같이 해보세요.</p>\n<p>List에는 구분선, 카드 모양 등과 같은 준비된 UI가 포함되어 있습니다. 쉽죠!</p>\n<h2>Foreach</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n<span class=\"hljs-title class_\">VStack</span> {\n    <span class=\"hljs-title class_\">ForEach</span>(numbers, <span class=\"hljs-attr\">id</span>: \\.<span class=\"hljs-property\">self</span>) { number <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"\\(number)\"</span>)\n    }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-05-17-SwiftUIThinking_10.png\" alt=\"image\"></p>\n<p>The Foreach construct offers a leaner alternative to the List component. With Foreach, you have full control over building your list UI, resulting in a simpler and more customizable approach.</p>\n<h2>Updating UI with Observable Property</h2>\n<p>SwiftUI differs from UIKit by embracing the Declarative Programming approach.</p>\n<div class=\"content-ad\"></div>\n<p>선언적 프로그래밍에서 UI는 Observable 값이나 속성의 변경을 관찰합니다.</p>\n<p>값이 변경될 때마다 UI는 동적으로 변경 사항을 반영합니다.</p>\n<p>SwiftUI의 기본 속성 래퍼(State 및 Binding)는 관찰 가능성을 활성화합니다:</p>\n<p>State: 단방향 연결을 용이하게 해 주며 주로 연결된 뷰 내에서 사용됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>바인딩: 양방향 연결을 수립하고 상태 속성을 다른 뷰로 전송하는 데 사용됩니다.</p>\n<h2>지금은 상태에 집중해 보겠습니다</h2>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">State</span> <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">text</span>: <span class=\"hljs-title class_\">String</span> = <span class=\"hljs-string\">\"초기 텍스트\"</span>\n\n<span class=\"hljs-title class_\">VStack</span>(<span class=\"hljs-attr\">spacing</span>: <span class=\"hljs-number\">32</span>) {\n    <span class=\"hljs-title class_\">Button</span> {\n        text = <span class=\"hljs-string\">\"수정된 변경\"</span>\n    } <span class=\"hljs-attr\">label</span>: {\n        <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"텍스트 변경\"</span>)\n            .<span class=\"hljs-title function_\">font</span>(.<span class=\"hljs-property\">title</span>.<span class=\"hljs-title function_\">bold</span>())\n            .<span class=\"hljs-title function_\">foregroundStyle</span>(.<span class=\"hljs-property\">white</span>)\n            .<span class=\"hljs-title function_\">padding</span>()\n            .<span class=\"hljs-title function_\">background</span>(.<span class=\"hljs-property\">blue</span>)\n            .<span class=\"hljs-title function_\">clipShape</span>(<span class=\"hljs-title class_\">RoundedRectangle</span>(<span class=\"hljs-attr\">cornerRadius</span>: <span class=\"hljs-number\">16</span>))\n    }\n\n    <span class=\"hljs-title class_\">Text</span>(text)\n        .<span class=\"hljs-title function_\">font</span>(.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">bold</span>())\n        .<span class=\"hljs-title function_\">foregroundStyle</span>(.<span class=\"hljs-property\">blue</span>)\n}\n</code></pre>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:590/1*UAzw-1G__azlbNUSfevu9Q.gif\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>변경 텍스트 버튼 액션은 observable text 속성을 수정합니다. UI는 텍스트 속성의 변경 사항을 듣도록 설계되어 있으므로 자동으로 업데이트됩니다. 이 기능은 State 프로퍼티 래퍼로 가능해졌습니다.</p>\n<h1>뷰</h1>\n<p>모든 SwiftUI 뷰는 View 프로토콜을 준수하는 구조체입니다.</p>\n<p>구조체는 클래스 상속을 허용하지 않으므로 SwiftUI 뷰는 프로토콜에만 준수할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>위 특성들은 SwiftUI에서 뷰를 독립적이고 고유하게 보는 방식을 채택해야 함을 필요로 합니다.</p>\n<p>UIKit에서는 UIViewController 및 UITableViewController와 같은 특정 뷰를 위한 기본 클래스를 생성하는 것이 일반적입니다. 이 습관에서 벗어나는 것은 어려울 수 있지만, 마음가짐을 바꿈으로써 가능합니다!</p>\n<h1>유용한 구성 요소</h1>\n<p>SwiftUI의 핵심 원칙 중 하나는 작성 코드를 줄이고 더 많은 작업을 하는 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>뒤에 표식을 확인 해주세요.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-05-17-SwiftUIThinking_11.png\" alt=\"Image\"></p>\n<h2>Picker</h2>\n<p>It is a combination of UISegmentedControl and UIPickerView.</p>\n<p>It provides various styles such as wheel, inline, segmented, and palette.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n@<span class=\"hljs-title class_\">State</span> <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">selection</span>: <span class=\"hljs-title class_\">Int</span> = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-title class_\">Picker</span>(<span class=\"hljs-string\">\"Select\"</span>, <span class=\"hljs-attr\">selection</span>: $selection) {\n    <span class=\"hljs-title class_\">ForEach</span>(numbers, <span class=\"hljs-attr\">id</span>: \\.<span class=\"hljs-property\">self</span>) { number <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"\\(number)\"</span>)\n    }\n}\n.<span class=\"hljs-title function_\">pickerStyle</span>(.<span class=\"hljs-property\">inline</span>)\n</code></pre>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:590/1*fy8_zvsJAsM7_4dQB4QgdA.gif\" alt=\"Image Scale\"></p>\n<h1>이미지 크기 조절</h1>\n<p>SwiftUI가 처음 나온 이후, Apple은 이미지 라이브러리인 SF Symbols를 제공해 왔습니다. Image 뷰를 사용하여 이 라이브러리의 이미지에 쉽게 액세스할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>또한, Text 뷰의 글꼴 설정과 유사하게 이미지 크기를 조절할 수 있는 font 기능을 사용해 이미지의 크기를 조절할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Image</span>(<span class=\"hljs-attr\">systemName</span>: <span class=\"hljs-string\">\"house.fill\"</span>)\n    .<span class=\"hljs-title function_\">font</span>(.<span class=\"hljs-property\">largeTitle</span>)\n</code></pre>\n<p>SwiftUI는 Apple 환경에서 프로젝트를 개발하는 새로운 방법입니다.</p>\n<p>SwiftUI의 방식에 대해 생각을 조정하면 됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>한번 그것을 할 수 있다면, SwiftUI의 문들이 완전히 열릴 것입니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}