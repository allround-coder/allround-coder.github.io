{"pageProps":{"post":{"title":"Cars24 SDE-2 Frontend 면접 경험","description":"","date":"2024-05-18 21:46","slug":"2024-05-18-Cars24SDE-2FrontendInterviewExperience","content":"\n\n나는 링크드인에서 리쿠루터에게 연락했다.\n\n# 1차 면접 — JS\n\n질문 1 — 클로저란 무엇이며 예시와 함께 설명해보세요.\n\n```js\nfunction closure() {\n    let count = 0;\n    return function test() {\n        count++;\n        return count;\n    }\n}\n\nconst closuredTest = closure();\n\nconsole.log(closuredTest());\nconsole.log(closuredTest());\nconsole.log(closuredTest());\n```\n\n<div class=\"content-ad\"></div>\n\n2번 문제 - 커리(curry)란 무엇이며 주어진 함수의 커리 고차 함수를 만드세요.\n\n```js\nfunction sum(a, b, c){\n  return a + b + c; \n}\n```\n\n```js\nfunction curry(fn){\n  return function curriedFn(...params){\n    if(params.length >= fn.length){\n      return fn(...params);\n    }\n    else{\n      return function(...next){\n        return curriedFn(...params,...next);\n      }\n    }\n  }\n}\n\nlet curriedSum = curry(sum);\n\nconsole.log(curriedSum(1, 2, 3));   // 6, 일반적으로 호출 가능\nconsole.log(curriedSum(1)(2,3));    // 6, 첫 번째 인수 커리\nconsole.log(curriedSum(1)(2)(3));   // 6, 완전한 커리\n```\n\n3번 문제 - Task Queue(작업 큐) 및 이벤트 루프에 대해 설명해보세요.\n먼저 구두로 설명한 후 코드 스니펫을 작성했습니다.\n\n<div class=\"content-ad\"></div>\n\n\n## question4 — output based question\n\n```js\nasync function async1() {\n    console.log(\"async1 start\");\n    const data = await async2();\n    console.log(data);\n    console.log(\"async1 end\");\n}\n\nasync function async2() {\n    console.log(\"async2\");\n    return \"async2 completed\";\n}\n\nconsole.log(\"script start\");\n\nsetTimeout(function () {\n    console.log(\"setTimeout\");\n}, 0);\n\nasync1();\n\nnew Promise(function (resolve) {\n    console.log(\"promise1\");\n    resolve();\n}).then(function () {\n    console.log(\"promise2\");\n});\n\nconsole.log(\"script end\");\n```\n\nquestion 5 — explain this keyword and how can we change it forcefully\n\n\n<div class=\"content-ad\"></div>\n\n```javascript\nlet obj = {\n    name: 'prikshit',\n    myName(city, birthPlace) {\n        console.log(this.name + ' i live in ' + city + ' my birthplace is ' + birthPlace);\n    }\n}\n\nlet obj2 = {\n    name: 'sohail',\n}\n\n// obj.myName.call(obj2,'blr');\n// obj.myName.apply(obj2,['blr']);\n\nconst bindedFn = obj.myName.bind(obj2);\n\nbindedFn('blr', 'delhi');\n\nobj.myName(); // this keyword here is obj\n```\n\n## 2nd Round — Machine Coding\n\n1. **1st question** - 온라인/오프라인 상태를 보여주는 사용자 정의 훅을 만들어 보세요. (해결 사항)\n\n2. **2nd question** - 그리드 라이트를 만들어 보세요. (Uber 인터뷰어들의 즐겨하는 문제)\n\n\n<div class=\"content-ad\"></div>\n\n# 3차 라운드 — 기술 관리 라운드\n\n이번 라운드에서 면접관은 전자 상거래 필터 구성 요소를 만들어 달라고 했어요.","ogImage":{"url":"/assets/img/2024-05-18-Cars24SDE-2FrontendInterviewExperience_0.png"},"coverImage":"/assets/img/2024-05-18-Cars24SDE-2FrontendInterviewExperience_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>나는 링크드인에서 리쿠루터에게 연락했다.</p>\n<h1>1차 면접 — JS</h1>\n<p>질문 1 — 클로저란 무엇이며 예시와 함께 설명해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">closure</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\"></span>) {\n        count++;\n        <span class=\"hljs-keyword\">return</span> count;\n    }\n}\n\n<span class=\"hljs-keyword\">const</span> closuredTest = <span class=\"hljs-title function_\">closure</span>();\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">closuredTest</span>());\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">closuredTest</span>());\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">closuredTest</span>());\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>2번 문제 - 커리(curry)란 무엇이며 주어진 함수의 커리 고차 함수를 만드세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">a, b, c</span>){\n  <span class=\"hljs-keyword\">return</span> a + b + c; \n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">curry</span>(<span class=\"hljs-params\">fn</span>){\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">curriedFn</span>(<span class=\"hljs-params\">...params</span>){\n    <span class=\"hljs-keyword\">if</span>(params.<span class=\"hljs-property\">length</span> >= fn.<span class=\"hljs-property\">length</span>){\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fn</span>(...params);\n    }\n    <span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...next</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">curriedFn</span>(...params,...next);\n      }\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">let</span> curriedSum = <span class=\"hljs-title function_\">curry</span>(sum);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">curriedSum</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>));   <span class=\"hljs-comment\">// 6, 일반적으로 호출 가능</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">curriedSum</span>(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>));    <span class=\"hljs-comment\">// 6, 첫 번째 인수 커리</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">curriedSum</span>(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>));   <span class=\"hljs-comment\">// 6, 완전한 커리</span>\n</code></pre>\n<p>3번 문제 - Task Queue(작업 큐) 및 이벤트 루프에 대해 설명해보세요.\n먼저 구두로 설명한 후 코드 스니펫을 작성했습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>question4 — output based question</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">async1</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"async1 start\"</span>);\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">async2</span>();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"async1 end\"</span>);\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">async2</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"async2\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"async2 completed\"</span>;\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"script start\"</span>);\n\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"setTimeout\"</span>);\n}, <span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-title function_\">async1</span>();\n\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"promise1\"</span>);\n    <span class=\"hljs-title function_\">resolve</span>();\n}).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"promise2\"</span>);\n});\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"script end\"</span>);\n</code></pre>\n<p>question 5 — explain this keyword and how can we change it forcefully</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> obj = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'prikshit'</span>,\n    <span class=\"hljs-title function_\">myName</span>(<span class=\"hljs-params\">city, birthPlace</span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">' i live in '</span> + city + <span class=\"hljs-string\">' my birthplace is '</span> + birthPlace);\n    }\n}\n\n<span class=\"hljs-keyword\">let</span> obj2 = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'sohail'</span>,\n}\n\n<span class=\"hljs-comment\">// obj.myName.call(obj2,'blr');</span>\n<span class=\"hljs-comment\">// obj.myName.apply(obj2,['blr']);</span>\n\n<span class=\"hljs-keyword\">const</span> bindedFn = obj.<span class=\"hljs-property\">myName</span>.<span class=\"hljs-title function_\">bind</span>(obj2);\n\n<span class=\"hljs-title function_\">bindedFn</span>(<span class=\"hljs-string\">'blr'</span>, <span class=\"hljs-string\">'delhi'</span>);\n\nobj.<span class=\"hljs-title function_\">myName</span>(); <span class=\"hljs-comment\">// this keyword here is obj</span>\n</code></pre>\n<h2>2nd Round — Machine Coding</h2>\n<ol>\n<li>\n<p><strong>1st question</strong> - 온라인/오프라인 상태를 보여주는 사용자 정의 훅을 만들어 보세요. (해결 사항)</p>\n</li>\n<li>\n<p><strong>2nd question</strong> - 그리드 라이트를 만들어 보세요. (Uber 인터뷰어들의 즐겨하는 문제)</p>\n</li>\n</ol>\n<div class=\"content-ad\"></div>\n<h1>3차 라운드 — 기술 관리 라운드</h1>\n<p>이번 라운드에서 면접관은 전자 상거래 필터 구성 요소를 만들어 달라고 했어요.</p>\n</body>\n</html>\n"},"__N_SSG":true}