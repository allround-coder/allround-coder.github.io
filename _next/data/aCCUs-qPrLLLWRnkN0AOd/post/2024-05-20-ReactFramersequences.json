{"pageProps":{"post":{"title":"리액트, Framer 연동해서 사용하기","description":"","date":"2024-05-20 22:09","slug":"2024-05-20-ReactFramersequences","content":"\n\n웹 애플리케이션용 애니메이션 코드 학습 경험을 공유하려 합니다. 웹 애플리케이션을 위해 애니메이션을 코드로 작성하는 데 사용한 몇 가지 간단하고 빠른 기술을 소개하겠습니다.\n\n## 내용\n\n5분 이내에 만들 수 있는 3가지 기본사항을 살펴보겠습니다.\n\n- 각기 다른 변형 및 staggarChildren으로 간단한 연속 효과\n\n<div class=\"content-ad\"></div>\n\n\n![Image 1](https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif)\n\n2. Sequencing with useAnimate()\n\n![Image 2](https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif)\n\n3. Sequence sequences 😄\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*fYmW-ckGVVVdBn1hR23jzA.gif\" />\n\n## 설정\n\nReact 애플리케이션에 framer-motion을 설치하기만 하면 됩니다.\n\n```js\nnpm install framer-motion\n```\n\n<div class=\"content-ad\"></div>\n\n## 이 기사에 대한 링크\n\nFigma 링크, CodeSandbox: 링크 1, 링크 2, 링크 3\n\n# 변형 및 staggerChildren을 사용한 간단한 순차\n\n이것은 간단한 시각적 상태 변경이 있는 요소들에서 순차를 만드는 가장 쉬운 방법입니다. 이에는 두 가지 부분만이 필요합니다:\n\n<div class=\"content-ad\"></div>\n\n- 변형을 사용하여 애니메이션 설정하기\n- staggerChildren으로 조정하기\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif)\n\n## 단계\n\n- 애니메이션 디자인하기. 글귀가 약간 세로 방향으로 움직이면서 일련의 카드를 흐려지게 만들고 카드를 가로로 가로질러 나누는 선을 그렸습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-ReactFramersequences_0.png\" />\n\n2. 컴포넌트와 스타일을 생성합니다.\n\n```js\ntype Props = {\n  label: string;\n  text: string;\n};\n\nexport const Card = ({ label, text }: Props) => {\n  return (\n    <div className={styles.cardContainer}>\n      <div className={styles.stepLabel}>{label}</div>\n      <div className={styles.divider}></div>\n      <div className={styles.text}>{text}</div>\n    </div>\n  );\n};\n```\n\n3. 이제 우리는 컴포넌트 내에서 재생하고 싶은 애니메이션을 위해 framer variants를 연결할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*dJC-pf0US95Bjk_16mz6vw.gif\" />\n\n변형 요소는 애니메이션이 시작하고 끝나는 스타일을 정의합니다. 여기서 텍스트에 대한 fadeIn 애니메이션과 함께 (텍스트가 수직으로도 5px 이동하는) 'start' 및 'end' 속성을 정의하고, 구분선에 대한 drawIn 애니메이션에 대해서도 두 가지 변형을 사용했습니다.\n\n```js\n...\n  const fadeIn = {\n    start: { opacity: \"0%\", y: \"0px\" },\n    end: {\n      opacity: \"100%\",\n      y: \"-5px\",\n      transition: {\n        duration: 1.2,\n        ease: \"easeOut\",\n        delay: 2,\n      },\n    },\n  };\n\n  const drawIn = {\n    start: { width: \"0\" },\n    end: {\n      width: \"100%\",\n      transition: {\n        duration: 1.2,\n        ease: \"easeOut\",\n        delay: 2,\n      },\n    },\n  };\n...\n```\n\n4. 부모 구성 요소에서 일련의 순서를 조율합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif)\n\n부모 'CardContainer'에서 몇 줄의 코드로 자식 카드에 staggerChildren을 사용하여 지연을 둔 애니메이션을 시작할 수 있습니다.\n\n```js\n...\nexport const CardContainer = () => {\n  const stagger = {\n    start: {},\n    end: {\n      transition: {\n        staggerChildren: 1,\n      },\n    },\n  };\n...\n```\n\n이 샌드박스에서 전체 코드를 확인하세요.\n\n\n<div class=\"content-ad\"></div>\n\n# useAnimate()을 사용한 순차 처리\n\n이 방법은 조금 더 노력이 필요하지만 더 많은 제어를 제공합니다. 각각의 요소를 '선택'하고 서로의 속성 및 타이밍에 관계하여 변경하는 개념입니다.\n\n- 대상으로 지정할 요소들에 대한 범위 추가\n- 요소들을 대상으로 선택하고 애니메이션을 추가합니다\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif)\n\n<div class=\"content-ad\"></div>\n\n## 단계\n\n1. 애니메이션을 디자인하세요.\n\n![image](/assets/img/2024-05-20-ReactFramersequences_1.png)\n\n2. 컴포넌트를 생성하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n...\nexport const Card = () => {\n  return (\n    <div className={styles.cardContainer}>\n      <div className={styles.textBox}>\n        <div className={styles.i}>I</div>\n        <div className={styles.heartTrack}>\n          <div className={styles.heart}>\n            <img src=\"/images/heart.svg\" alt=\"heart\" />\n          </div>\n        </div>\n        <div className={styles.framer}>Framer</div>\n      </div>\n    </div>\n  );\n};\n...\n```\n\n![React Framer sequences](/assets/img/2024-05-20-ReactFramersequences_2.png)\n\n3. 사용할 요소에 애니메이션을 정의하여 순차적인 애니메이션을 활성화합니다. 이 경우에는 카드 컴포넌트의 바깥 요소에 범위를 설정하여 '나무 구조 안에서 애니메이션화할 요소를 선택할 수 있습니다.\n\n```js\n...\n\nexport const Card = () => {\n  const [scope, animate] = useAnimate();\n...\n\n  return (\n    <div className={styles.cardContainer} ref={scope}>\n   ...\n```\n\n<div class=\"content-ad\"></div>\n\n4. 순서를 생성합니다. 하트가 텍스트로 내려오면서 약간 회전하고, 내 텍스트가 만나도록 슬라이드되기를 원합니다. 대상 요소를 참조하는 방법은 여러 가지가 있습니다. 클래스이름을 사용하고, 각 속성에 대한 모든 값을 제공하고 있습니다.\n\n노트할 사항은 제 텍스트 애니메이션에 설정된 ‘`’으로, 연속성을 사용하여 애니메이션이 재생되는 시점을 정의할 수 있습니다. 타임라인에서 요소를 동시에 시작할 수 있는 유용한 방법 중 하나입니다.\n\n```js\nanimate(\n[\n  [\n    `.${styles.heart}`,\n    { rotate: [0, 10, -10, 0], top: [\"-20%\", \"40%\"] },\n    { duration: 3 },\n  ],\n\n  [\n    `.${styles.textBox}`,\n    { gap: [\"250px\", \"24px\"] },\n    { duration: 2, at: \"<\" },\n  ],\n],\n{ delay: 1 }\n);\n}, []);\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif\" />\n\n<div class=\"content-ad\"></div>\n\n해당 샌드박스에서 전체 코드를 확인하세요.\n\n# 시퀀스 하는 시퀀스 😄\n\n마침내, 일련의 시퀀스를 조율하는 방법을 찾고 있었는데, 이것이 문서에서 찾을 수 있는 가장 간단한 방법이었습니다. 만약보다 견고한 해결책이 있다면 공유해주세요.\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*fYmW-ckGVVVdBn1hR23jzA.gif)\n\n<div class=\"content-ad\"></div>\n\n## 단계\n\n- 시퀀스에 지연 추가\n\n```js\n  useEffect(() => {\n    animate(\n      [\n        [\n          scope.current,\n          { backgroundColor: [\"#ED2733\", \"#FF4D98\"] },\n          { duration: 1 },\n        ],\n        [\n          `.${styles.heart}`,\n          { rotate: [0, 10, -10, 0], top: [\"-20%\", \"40%\"] },\n          { duration: 3 },\n        ],\n        [\n          `.${styles.textBox}`,\n          { gap: [\"250px\", \"24px\"] },\n          { duration: 2, at: \"<\" },\n        ],\n      ],\n      { delay: delay }\n    );\n  }, []);\n```\n\n2. Cards에 delay 속성 전달\n\n<div class=\"content-ad\"></div>\n\n위의 코드를 번역하면 다음과 같다.\n\n```javascript\n...\n<Card delay={1} />\n<Card delay={2} />\n...\n```\n\n이 샌드박스에서 전체 코드를 확인할 수 있습니다.\n\n읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-20-ReactFramersequences_0.png"},"coverImage":"/assets/img/2024-05-20-ReactFramersequences_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>웹 애플리케이션용 애니메이션 코드 학습 경험을 공유하려 합니다. 웹 애플리케이션을 위해 애니메이션을 코드로 작성하는 데 사용한 몇 가지 간단하고 빠른 기술을 소개하겠습니다.</p>\n<h2>내용</h2>\n<p>5분 이내에 만들 수 있는 3가지 기본사항을 살펴보겠습니다.</p>\n<ul>\n<li>각기 다른 변형 및 staggarChildren으로 간단한 연속 효과</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif\" alt=\"Image 1\"></p>\n<ol start=\"2\">\n<li>Sequencing with useAnimate()</li>\n</ol>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif\" alt=\"Image 2\"></p>\n<ol start=\"3\">\n<li>Sequence sequences 😄</li>\n</ol>\n<div class=\"content-ad\"></div>\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*fYmW-ckGVVVdBn1hR23jzA.gif\">\n<h2>설정</h2>\n<p>React 애플리케이션에 framer-motion을 설치하기만 하면 됩니다.</p>\n<pre><code class=\"hljs language-js\">npm install framer-motion\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>이 기사에 대한 링크</h2>\n<p>Figma 링크, CodeSandbox: 링크 1, 링크 2, 링크 3</p>\n<h1>변형 및 staggerChildren을 사용한 간단한 순차</h1>\n<p>이것은 간단한 시각적 상태 변경이 있는 요소들에서 순차를 만드는 가장 쉬운 방법입니다. 이에는 두 가지 부분만이 필요합니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>변형을 사용하여 애니메이션 설정하기</li>\n<li>staggerChildren으로 조정하기</li>\n</ul>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif\" alt=\"이미지\"></p>\n<h2>단계</h2>\n<ul>\n<li>애니메이션 디자인하기. 글귀가 약간 세로 방향으로 움직이면서 일련의 카드를 흐려지게 만들고 카드를 가로로 가로질러 나누는 선을 그렸습니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-05-20-ReactFramersequences_0.png\">\n<ol start=\"2\">\n<li>컴포넌트와 스타일을 생성합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">Props</span> = {\n  <span class=\"hljs-attr\">label</span>: string;\n  <span class=\"hljs-attr\">text</span>: string;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Card</span> = (<span class=\"hljs-params\">{ label, text }: Props</span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.cardContainer}</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.stepLabel}</span>></span>{label}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.divider}</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.text}</span>></span>{text}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n</code></pre>\n<ol start=\"3\">\n<li>이제 우리는 컴포넌트 내에서 재생하고 싶은 애니메이션을 위해 framer variants를 연결할 수 있습니다.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*dJC-pf0US95Bjk_16mz6vw.gif\">\n<p>변형 요소는 애니메이션이 시작하고 끝나는 스타일을 정의합니다. 여기서 텍스트에 대한 fadeIn 애니메이션과 함께 (텍스트가 수직으로도 5px 이동하는) 'start' 및 'end' 속성을 정의하고, 구분선에 대한 drawIn 애니메이션에 대해서도 두 가지 변형을 사용했습니다.</p>\n<pre><code class=\"hljs language-js\">...\n  <span class=\"hljs-keyword\">const</span> fadeIn = {\n    <span class=\"hljs-attr\">start</span>: { <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-string\">\"0%\"</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">\"0px\"</span> },\n    <span class=\"hljs-attr\">end</span>: {\n      <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-string\">\"100%\"</span>,\n      <span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">\"-5px\"</span>,\n      <span class=\"hljs-attr\">transition</span>: {\n        <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">1.2</span>,\n        <span class=\"hljs-attr\">ease</span>: <span class=\"hljs-string\">\"easeOut\"</span>,\n        <span class=\"hljs-attr\">delay</span>: <span class=\"hljs-number\">2</span>,\n      },\n    },\n  };\n\n  <span class=\"hljs-keyword\">const</span> drawIn = {\n    <span class=\"hljs-attr\">start</span>: { <span class=\"hljs-attr\">width</span>: <span class=\"hljs-string\">\"0\"</span> },\n    <span class=\"hljs-attr\">end</span>: {\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-string\">\"100%\"</span>,\n      <span class=\"hljs-attr\">transition</span>: {\n        <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">1.2</span>,\n        <span class=\"hljs-attr\">ease</span>: <span class=\"hljs-string\">\"easeOut\"</span>,\n        <span class=\"hljs-attr\">delay</span>: <span class=\"hljs-number\">2</span>,\n      },\n    },\n  };\n...\n</code></pre>\n<ol start=\"4\">\n<li>부모 구성 요소에서 일련의 순서를 조율합니다.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*RDCcMOuV4CbcB0dhPd-sgQ.gif\" alt=\"이미지\"></p>\n<p>부모 'CardContainer'에서 몇 줄의 코드로 자식 카드에 staggerChildren을 사용하여 지연을 둔 애니메이션을 시작할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">...\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CardContainer</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> stagger = {\n    <span class=\"hljs-attr\">start</span>: {},\n    <span class=\"hljs-attr\">end</span>: {\n      <span class=\"hljs-attr\">transition</span>: {\n        <span class=\"hljs-attr\">staggerChildren</span>: <span class=\"hljs-number\">1</span>,\n      },\n    },\n  };\n...\n</code></pre>\n<p>이 샌드박스에서 전체 코드를 확인하세요.</p>\n<div class=\"content-ad\"></div>\n<h1>useAnimate()을 사용한 순차 처리</h1>\n<p>이 방법은 조금 더 노력이 필요하지만 더 많은 제어를 제공합니다. 각각의 요소를 '선택'하고 서로의 속성 및 타이밍에 관계하여 변경하는 개념입니다.</p>\n<ul>\n<li>대상으로 지정할 요소들에 대한 범위 추가</li>\n<li>요소들을 대상으로 선택하고 애니메이션을 추가합니다</li>\n</ul>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<h2>단계</h2>\n<ol>\n<li>애니메이션을 디자인하세요.</li>\n</ol>\n<p><img src=\"/assets/img/2024-05-20-ReactFramersequences_1.png\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>컴포넌트를 생성하세요.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">...\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Card</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.cardContainer}</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.textBox}</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.i}</span>></span>I<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.heartTrack}</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.heart}</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/images/heart.svg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"heart\"</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.framer}</span>></span>Framer<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n...\n</code></pre>\n<p><img src=\"/assets/img/2024-05-20-ReactFramersequences_2.png\" alt=\"React Framer sequences\"></p>\n<ol start=\"3\">\n<li>사용할 요소에 애니메이션을 정의하여 순차적인 애니메이션을 활성화합니다. 이 경우에는 카드 컴포넌트의 바깥 요소에 범위를 설정하여 '나무 구조 안에서 애니메이션화할 요소를 선택할 수 있습니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\">...\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Card</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [scope, animate] = <span class=\"hljs-title function_\">useAnimate</span>();\n...\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.cardContainer}</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{scope}</span>></span>\n   ...\n</span></code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"4\">\n<li>순서를 생성합니다. 하트가 텍스트로 내려오면서 약간 회전하고, 내 텍스트가 만나도록 슬라이드되기를 원합니다. 대상 요소를 참조하는 방법은 여러 가지가 있습니다. 클래스이름을 사용하고, 각 속성에 대한 모든 값을 제공하고 있습니다.</li>\n</ol>\n<p>노트할 사항은 제 텍스트 애니메이션에 설정된 ‘`’으로, 연속성을 사용하여 애니메이션이 재생되는 시점을 정의할 수 있습니다. 타임라인에서 요소를 동시에 시작할 수 있는 유용한 방법 중 하나입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">animate</span>(\n[\n  [\n    <span class=\"hljs-string\">`.<span class=\"hljs-subst\">${styles.heart}</span>`</span>,\n    { <span class=\"hljs-attr\">rotate</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-attr\">top</span>: [<span class=\"hljs-string\">\"-20%\"</span>, <span class=\"hljs-string\">\"40%\"</span>] },\n    { <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">3</span> },\n  ],\n\n  [\n    <span class=\"hljs-string\">`.<span class=\"hljs-subst\">${styles.textBox}</span>`</span>,\n    { <span class=\"hljs-attr\">gap</span>: [<span class=\"hljs-string\">\"250px\"</span>, <span class=\"hljs-string\">\"24px\"</span>] },\n    { <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">at</span>: <span class=\"hljs-string\">\"&#x3C;\"</span> },\n  ],\n],\n{ <span class=\"hljs-attr\">delay</span>: <span class=\"hljs-number\">1</span> }\n);\n}, []);\n</code></pre>\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*-vqhUfXmPoehZSW8hRd7Lg.gif\">\n<div class=\"content-ad\"></div>\n<p>해당 샌드박스에서 전체 코드를 확인하세요.</p>\n<h1>시퀀스 하는 시퀀스 😄</h1>\n<p>마침내, 일련의 시퀀스를 조율하는 방법을 찾고 있었는데, 이것이 문서에서 찾을 수 있는 가장 간단한 방법이었습니다. 만약보다 견고한 해결책이 있다면 공유해주세요.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*fYmW-ckGVVVdBn1hR23jzA.gif\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<h2>단계</h2>\n<ul>\n<li>시퀀스에 지연 추가</li>\n</ul>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">animate</span>(\n      [\n        [\n          scope.<span class=\"hljs-property\">current</span>,\n          { <span class=\"hljs-attr\">backgroundColor</span>: [<span class=\"hljs-string\">\"#ED2733\"</span>, <span class=\"hljs-string\">\"#FF4D98\"</span>] },\n          { <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">1</span> },\n        ],\n        [\n          <span class=\"hljs-string\">`.<span class=\"hljs-subst\">${styles.heart}</span>`</span>,\n          { <span class=\"hljs-attr\">rotate</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>], <span class=\"hljs-attr\">top</span>: [<span class=\"hljs-string\">\"-20%\"</span>, <span class=\"hljs-string\">\"40%\"</span>] },\n          { <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">3</span> },\n        ],\n        [\n          <span class=\"hljs-string\">`.<span class=\"hljs-subst\">${styles.textBox}</span>`</span>,\n          { <span class=\"hljs-attr\">gap</span>: [<span class=\"hljs-string\">\"250px\"</span>, <span class=\"hljs-string\">\"24px\"</span>] },\n          { <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">at</span>: <span class=\"hljs-string\">\"&#x3C;\"</span> },\n        ],\n      ],\n      { <span class=\"hljs-attr\">delay</span>: delay }\n    );\n  }, []);\n</code></pre>\n<ol start=\"2\">\n<li>Cards에 delay 속성 전달</li>\n</ol>\n<div class=\"content-ad\"></div>\n<p>위의 코드를 번역하면 다음과 같다.</p>\n<pre><code class=\"hljs language-javascript\">...\n&#x3C;<span class=\"hljs-title class_\">Card</span> delay={<span class=\"hljs-number\">1</span>} />\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">delay</span>=<span class=\"hljs-string\">{2}</span> /></span></span>\n...\n</code></pre>\n<p>이 샌드박스에서 전체 코드를 확인할 수 있습니다.</p>\n<p>읽어 주셔서 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}