{"pageProps":{"post":{"title":"완벽 가이드 Angular 다국어i18n 애플리케이션 만들기","description":"","date":"2024-06-22 14:52","slug":"2024-06-22-ACompleteGuideToAngularMultilingualApplicationi18n","content":"\n\nAngular i18n 애플리케이션을 초기화하고 구현해 보세요. Transloco를 사용하여 Angular에서 다국어 애플리케이션을 구현하는 방법을 안내하는 가이드입니다! 번역 파일의 지연 로딩을 포함하여 멀티 언어 애플리케이션을 구현하는 방법을 설명합니다.\n\n![Angular 다국어 애플리케이션 완벽 가이드 이미지](/assets/img/2024-06-22-ACompleteGuideToAngularMultilingualApplicationi18n_0.png)\n\n# 목차\n\n- 국제화 (i18n) 및 지역화 개요\n- Angular 애플리케이션 초기화 및 패키지 설치\n- 프로젝트 구성\n- 템플릿 내 번역\n- TypeScript 내 번역\n- 활성 언어 변경\n- 번역 파일의 지연 로딩\n\n<div class=\"content-ad\"></div>\n\n# 간단 요약\n\n본 GitHub 저장소의 구현된 예제 코드로 건너뛰어보고 여기에서 작동하는 데모를 확인할 수 있습니다.\n\n# 국제화 (i18n) 및 로컬라이제이션\n\n지난 수십 년 동안 전 세계의 사용자를 대상으로 한 애플리케이션이 많이 등장했습니다. 그에 따라 사용자의 언어와 문화에 따라 제품 및 서비스를 구현하는 필요성을 느끼게 되었습니다. 이 과정을 국제화 (i18n “I” - 열 여덟 개의 글자 - “N”)이라고 합니다. 반면 로컬라이제이션은 특정 제품을 고유한 지역 시장에 맞게 조정하는 것을 의미합니다. Angular 로컬라이제이션은 다양한 기능을 제공합니다:\n\n<div class=\"content-ad\"></div>\n\n- 다른 언어로 번역할 텍스트 추출\n- 특정 로캘을 위한 데이터 형식 지정\n\nAngular의 국제화를 사용할 수 있습니다:\n\n- 내장된 파이프를 사용하여 로컬 형식으로 날짜, 숫자, 백분율 및 통화를 표시합니다.\n- 컴포넌트 템플릿에서 번역할 텍스트 지정.\n- 번역할 표현의 복수 형태 지정.\n- 번역할 대체 텍스트 지정.\n\n![이미지](/assets/img/2024-06-22-ACompleteGuideToAngularMultilingualApplicationi18n_1.png)\n\n<div class=\"content-ad\"></div>\n\n# Angular 애플리케이션 초기화 및 패키지 설치하기\n\n먼저, Angular 애플리케이션을 만들어야 합니다! 당신의 컴퓨터에 Angular CLI가 설치되어 있는 것으로 가정합니다. Angular CLI를 사용하여 Angular 애플리케이션을 초기화하려면 다음과 같이 입력할 수 있습니다:\n\n```js\nng new <PROJECT_NAME>\n```\n\n이 Medium 스토리에서는 Angular 애플리케이션의 구현 세부 사항에 대해 다루지 않습니다. 프로젝트의 전체 구현을 보려면 GitHub 리포지토리를 참조하실 수 있습니다. ng serve 명령을 사용하여 Angular 애플리케이션을 시작하세요. 이제 Angular 프로젝트가 실행 중이므로 i18n의 구현 세부 사항으로 넘어가 봅시다.\n\n<div class=\"content-ad\"></div>\n\nTransloco를 사용하려고 합니다. 먼저 필요한 패키지를 설치해야 합니다.\n\n```js\nng add @ngneat/transloco\n```\n\n위 명령을 실행한 후에는 프로젝트에 새 파일이 생길 수 있습니다. Angular Universal을 사용하는지 여부와 지원할 언어 등 몇 가지 질문에 답해야 합니다.\n\n<div class=\"content-ad\"></div>\n\ntransloco-root.module.ts 파일에서 transloco의 구성 파일을 찾을 수 있습니다. 여기서 지원하는 언어, 애플리케이션의 기본 언어, 런타임에서 언어를 변경할지 여부를 변경할 수 있습니다. 모든 옵션 목록은 여기에서 찾을 수 있습니다.\n\n```js\nimport { HttpClient } from '@angular/common/http';\nimport {\n  TRANSLOCO_LOADER,\n  Translation,\n  TranslocoLoader,\n  TRANSLOCO_CONFIG,\n  translocoConfig,\n  TranslocoModule,\n} from '@ngneat/transloco';\nimport { Injectable, isDevMode, NgModule } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string) {\n    return this.http.get<Translation>(`/assets/i18n/${lang}.json`);\n  }\n}\n\n@NgModule({\n  exports: [TranslocoModule],\n  providers: [\n    {\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: ['en', 'de', 'fa'],\n        defaultLang: 'en',\n        reRenderOnLangChange: true,\n        prodMode: !isDevMode(),\n      }),\n    },\n    { provide: TRANSLOCO_LOADER, useClass: TranslocoHttpLoader },\n  ],\n})\nexport class TranslocoRootModule {}\n```\n\n이제 transloco-root.module.ts를 루트 모듈에 가져와야 합니다. 루트 모듈은 아마도 app.module.ts라고 할 것입니다.\n\n<img src=\"/assets/img/2024-06-22-ACompleteGuideToAngularMultilingualApplicationi18n_3.png\" />\n\n<div class=\"content-ad\"></div>\n\n# 템플릿 내의 번역\n\n'ng add @ngneat/transloco' 명령을 실행한 후에는 지정한 모든 언어가 포함된 i18n 디렉터리가 assets 디렉터리에 나타납니다. 이것들은 주요 언어 파일입니다. 홈페이지나 헤더에서 사용할 수 있습니다. 하지만 각 모듈을 위한 고유한 디렉터리를 만들어서 해당 모듈로 lazy load할 수도 있습니다. 레이지 로딩에 대해서는 조금 후에 다룰 것입니다. 먼저 Transloco와 함께 작업을 시작해 봅시다.\n\n## 구조 지시문 사용\n\n템플릿에서 *transloco 지시문을 사용할 수 있습니다. 그러나 feature 모듈에는 translocoModule을 가져와야 하고, 주 페이지에는 translocoRootModule을 가져와야 합니다. 우리가 제목을 번역하려고 한다고 가정해 봅시다. 우리는 번역된 텍스트를 i18n 디렉터리의 JSON 파일에 포함해야 합니다.\n\n<div class=\"content-ad\"></div>\n\nen.json 파일은 다음과 같이 보여야 합니다:\n\n```json\n{\n  \"title\": \"Hello World!\"\n}\n```\n\n그리고 다른 언어(예를 들어 독일어)로 번역할 경우 de.json 파일은 다음과 같아야 합니다:\n\n```json\n{\n  \"title\": \"Hallo Welt!\"\n}\n```\n\n<div class=\"content-ad\"></div>\n\n지금 저희 템플릿에서는 다음과 같이 디렉티브를 사용하여 선택한 언어의 값을 보여줄 수 있습니다:\n\n```js\n<h1 *transloco=\"let t\"> { t(\"title\") } </h1>\n```\n\n하지만 아래와 같이 중첩된 키 속성을 포함한 복잡한 JSON 구조를 가지고 있을 수도 있습니다:\n\n```js\n// JSON은 다음과 같은 주석을 지원하지 않습니다.\n// 이 주석은 단지 예시를 위한 것입니다.\n\n// en.json\n{\n  \"title\": \"Hello World!\",\n  \"form\": {\n     \"firstName\": \"First Name\",\n     \"lastName\": \"Last Name\"\n    }\n}\n\n// de.json\n{\n  \"title\": \"Hallo Welt!\",\n  \"form\": {\n     \"firstName\": \"Vorname\",\n     \"lastName\": \"Nachname\"\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이제 두 가지 옵션이 있습니다. t 함수의 중첩 항목을 사용하거나 값 찾기를 수행하는 where 지시문을 사용할 수 있습니다.\n\n```js\n<!-- 옵션 1 -->\n<h1 *transloco=\"let t\"> { t(\"form.firstName\") } </h1>\n\n<!-- 옵션 2 -->\n<h1 *transloco=\"let t; read:'form'\"> { t(\"firstName\") } </h1>\n```\n\n옵션 2가 더 읽기 쉽습니다.\n\n## 파이프 사용하기\n\n<div class=\"content-ad\"></div>\n\n다른 방법은 아래와 같이 파이프를 사용하는 것입니다:\n\n```js\n<h1>{ 'title' | transloco }</h1>\n```\n\n# TypeScript 내에서 번역\n\nTranslocoService를 컴포넌트에 주입한 후에는 아래와 같이 안전하게 사용할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nexport class AppComponent {\n  constructor(private readonly translocoService: TranslocoService) {}\n\n  ngOnInit() {\n    this.translocoService.translate('title');\n    this.translocoService.translate('form.firstName');\n  }\n}\n```\n\n다른 번역 API도 여기에서 모두 찾을 수 있어요. 하지만 이러한 API가 올바르게 작동하려면 런타임에 번역 파일이 로드되었는지 확인해야 해요.\n\n# 활성 언어 변경\n\n사용자가 애플리케이션 언어를 변경하는 버튼을 클릭하면 애플리케이션의 선택된 언어를 변경해야 해요. 이를 위해 먼저 적절한 컴포넌트를 만들어 주세요. 완전히 구현된 컴포넌트는 여기에서 찾을 수 있어요.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { Component } from '@angular/core';\nimport { TranslocoService } from '@ngneat/transloco';\n\n@Component({\n  selector: 'app-language-selector',\n  template: `\n    <div>\n      <button\n        *ngFor=\"let language of languagesList; index as i\"\n        (click)=\"changeLanguage(language.code)\"\n      >\n        <img [src]=\"language.imgUrl\" [alt]=\"language.name\" />\n        <span> { language.shorthand } </span>\n      </button>\n    </div>\n  `,\n})\nexport class LanguageSelectorComponent {\n  constructor(private translocoService: TranslocoService) {}\n  public languagesList: \n    Array<Record<'imgUrl' | 'code' | 'name' | 'shorthand', string>> = [\n    {\n      imgUrl: '/assets/images/English.png',\n      code: 'en',\n      name: 'English',\n      shorthand: 'ENG',\n    },\n    {\n      imgUrl: '/assets/images/Deutsch.png',\n      code: 'de',\n      name: 'German',\n      shorthand: 'GER',\n    },\n    {\n      imgUrl: '/assets/images/Persian.png',\n      code: 'fa',\n      name: 'Persian',\n      shorthand: 'PER',\n    },\n  ];\n  public changeLanguage(languageCode: string): void {\n    this.translocoService.setActiveLang(languageCode);\n    languageCode === 'fa'\n      ? (document.body.style.direction = 'rtl')\n      : (document.body.style.direction = 'ltr');\n  }\n}\n```\n\n위 코드에서 보듯이 영어, 독일어, 페르시아어로 언어를 변경하는 세 개의 버튼을 구현했습니다. 사용자가 버튼을 클릭하면 선택한 언어 코드로 translocoService의 setActiveLang 메서드를 호출합니다.\n페르시아어나 아랍어와 같은 언어는 오른쪽에서 왼쪽으로 쓰이는 것을 고려해주세요. 애플리케이션의 방향을 rtl에서 ltr로 변경하는 것을 잊지 마세요.\n\n<img src=\"/assets/img/2024-06-22-ACompleteGuideToAngularMultilingualApplicationi18n_4.png\" />\n\n# 지연로딩 번역\n\n\n<div class=\"content-ad\"></div>\n\n애플리케이션 초기화 시 모든 번역 파일을 동시에 로드하는 것은 좋은 아이디어가 아닙니다. 특히 모듈이 많은 경우에는 그렇습니다. 애플리케이션의 로드 시간이 더 늘어날 뿐만 아니라 전체 애플리케이션을 위한 단일 번역 파일을 작업하는 것도 어려운 일입니다. 다행히 우리는 모듈에 번역 파일을 지연 로드할 수 있습니다.\n우리에게는 pageOne과 pageTwo라는 두 개의 모듈이 있다고 가정해 봅시다. 각 모듈에 대해 i18n 디렉토리 내에 디렉토리를 만들겠습니다. 각 언어에 대해 동일한 수의 JSON 파일로 디렉토리를 채워 주세요. 이제 각 모듈에 대한 범위를 지정하기만 하면 됩니다. 이를 수행하는 방법이 몇 가지 있습니다.\n\n```js\n<!-- pageOne 모듈 -->\n<h1 *transloco=\"let t; scope:'pageOne'\"> { t('title') } </h1>\n<!-- 위의 범위를 주의해서 확인하세요 -->\n```\n\n다른 세부 정보도 읽기 방법과 같습니다. TypeScript에서 번역을 지연로드하려면 쉽게 목표를 달성할 수 있습니다.\n\n먼저 translocoModule을 가져온 모듈에서 원하는 범위를 지정해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst routes: Routes = [\n  {\n    path: '',\n    component: PageOneComponent\n  }\n];\n\n@NgModule({\n  declarations: [PageOneComponent],\n  providers: [{ provide: TRANSLOCO_SCOPE, useValue: 'pageOne' }],\n  imports: [RouterModule.forChild(routes), TranslocoModule]\n})\nexport class PageOneModule {}\n```\n\n이제 TypeScript 파일에서 아래와 같이 현재 scope에 접근할 수 있습니다:\n\n```js\nexport class AppComponent {\n  constructor(\n    private translocoService: TranslocoService, \n    @Inject(TRANSLOCO_SCOPE) private scope\n  ) {}\n\n  ngOnInit() {\n    this.translocoService.selectTranslate('title', params, this.scope)\n      .subscribe(console.log);\n  }\n}\n```\n\n컴포넌트에 TRANSLOCO_SCOPE를 인젝션하면 모듈의 현재 scope를 사용할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 최종 결과물\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*WVqJR58gpb6SdUpsgpR-1g.gif)\n\n## 전체 구현 데모를 확인할 수 있습니다:\n\nhttps://angular-multi-lingual.hmousavi.dev\n\n<div class=\"content-ad\"></div>\n\n## GitHub 저장소를 확인해보세요:\n\n[GitHub 저장소](https://github.com/hossein13m/angular-multi-lingual)\n\n# 친구들과 공유하세요! 👏 최대 50번 클랩을 해주세요.\n\n의견이나 아이디어를 공유할 때 주저하지 마세요. 트위터에서 저에게 연락하거나 제 포트폴리오를 방문해서 다른 방법을 찾을 수 있어요.","ogImage":{"url":"/assets/img/2024-06-22-ACompleteGuideToAngularMultilingualApplicationi18n_0.png"},"coverImage":"/assets/img/2024-06-22-ACompleteGuideToAngularMultilingualApplicationi18n_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Angular i18n 애플리케이션을 초기화하고 구현해 보세요. Transloco를 사용하여 Angular에서 다국어 애플리케이션을 구현하는 방법을 안내하는 가이드입니다! 번역 파일의 지연 로딩을 포함하여 멀티 언어 애플리케이션을 구현하는 방법을 설명합니다.</p>\n<p><img src=\"/assets/img/2024-06-22-ACompleteGuideToAngularMultilingualApplicationi18n_0.png\" alt=\"Angular 다국어 애플리케이션 완벽 가이드 이미지\"></p>\n<h1>목차</h1>\n<ul>\n<li>국제화 (i18n) 및 지역화 개요</li>\n<li>Angular 애플리케이션 초기화 및 패키지 설치</li>\n<li>프로젝트 구성</li>\n<li>템플릿 내 번역</li>\n<li>TypeScript 내 번역</li>\n<li>활성 언어 변경</li>\n<li>번역 파일의 지연 로딩</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>간단 요약</h1>\n<p>본 GitHub 저장소의 구현된 예제 코드로 건너뛰어보고 여기에서 작동하는 데모를 확인할 수 있습니다.</p>\n<h1>국제화 (i18n) 및 로컬라이제이션</h1>\n<p>지난 수십 년 동안 전 세계의 사용자를 대상으로 한 애플리케이션이 많이 등장했습니다. 그에 따라 사용자의 언어와 문화에 따라 제품 및 서비스를 구현하는 필요성을 느끼게 되었습니다. 이 과정을 국제화 (i18n “I” - 열 여덟 개의 글자 - “N”)이라고 합니다. 반면 로컬라이제이션은 특정 제품을 고유한 지역 시장에 맞게 조정하는 것을 의미합니다. Angular 로컬라이제이션은 다양한 기능을 제공합니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>다른 언어로 번역할 텍스트 추출</li>\n<li>특정 로캘을 위한 데이터 형식 지정</li>\n</ul>\n<p>Angular의 국제화를 사용할 수 있습니다:</p>\n<ul>\n<li>내장된 파이프를 사용하여 로컬 형식으로 날짜, 숫자, 백분율 및 통화를 표시합니다.</li>\n<li>컴포넌트 템플릿에서 번역할 텍스트 지정.</li>\n<li>번역할 표현의 복수 형태 지정.</li>\n<li>번역할 대체 텍스트 지정.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-22-ACompleteGuideToAngularMultilingualApplicationi18n_1.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<h1>Angular 애플리케이션 초기화 및 패키지 설치하기</h1>\n<p>먼저, Angular 애플리케이션을 만들어야 합니다! 당신의 컴퓨터에 Angular CLI가 설치되어 있는 것으로 가정합니다. Angular CLI를 사용하여 Angular 애플리케이션을 초기화하려면 다음과 같이 입력할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">ng <span class=\"hljs-keyword\">new</span> &#x3C;<span class=\"hljs-variable constant_\">PROJECT_NAME</span>>\n</code></pre>\n<p>이 Medium 스토리에서는 Angular 애플리케이션의 구현 세부 사항에 대해 다루지 않습니다. 프로젝트의 전체 구현을 보려면 GitHub 리포지토리를 참조하실 수 있습니다. ng serve 명령을 사용하여 Angular 애플리케이션을 시작하세요. 이제 Angular 프로젝트가 실행 중이므로 i18n의 구현 세부 사항으로 넘어가 봅시다.</p>\n<div class=\"content-ad\"></div>\n<p>Transloco를 사용하려고 합니다. 먼저 필요한 패키지를 설치해야 합니다.</p>\n<pre><code class=\"hljs language-js\">ng add @ngneat/transloco\n</code></pre>\n<p>위 명령을 실행한 후에는 프로젝트에 새 파일이 생길 수 있습니다. Angular Universal을 사용하는지 여부와 지원할 언어 등 몇 가지 질문에 답해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<p>transloco-root.module.ts 파일에서 transloco의 구성 파일을 찾을 수 있습니다. 여기서 지원하는 언어, 애플리케이션의 기본 언어, 런타임에서 언어를 변경할지 여부를 변경할 수 있습니다. 모든 옵션 목록은 여기에서 찾을 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HttpClient</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common/http'</span>;\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-variable constant_\">TRANSLOCO_LOADER</span>,\n  <span class=\"hljs-title class_\">Translation</span>,\n  <span class=\"hljs-title class_\">TranslocoLoader</span>,\n  <span class=\"hljs-variable constant_\">TRANSLOCO_CONFIG</span>,\n  translocoConfig,\n  <span class=\"hljs-title class_\">TranslocoModule</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ngneat/transloco'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span>, isDevMode, <span class=\"hljs-title class_\">NgModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>({ <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span> })\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TranslocoHttpLoader</span> implements <span class=\"hljs-title class_\">TranslocoLoader</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private http: HttpClient</span>) {}\n\n  <span class=\"hljs-title function_\">getTranslation</span>(<span class=\"hljs-params\">lang: string</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">http</span>.<span class=\"hljs-property\">get</span>&#x3C;<span class=\"hljs-title class_\">Translation</span>>(<span class=\"hljs-string\">`/assets/i18n/<span class=\"hljs-subst\">${lang}</span>.json`</span>);\n  }\n}\n\n@<span class=\"hljs-title class_\">NgModule</span>({\n  <span class=\"hljs-attr\">exports</span>: [<span class=\"hljs-title class_\">TranslocoModule</span>],\n  <span class=\"hljs-attr\">providers</span>: [\n    {\n      <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">TRANSLOCO_CONFIG</span>,\n      <span class=\"hljs-attr\">useValue</span>: <span class=\"hljs-title function_\">translocoConfig</span>({\n        <span class=\"hljs-attr\">availableLangs</span>: [<span class=\"hljs-string\">'en'</span>, <span class=\"hljs-string\">'de'</span>, <span class=\"hljs-string\">'fa'</span>],\n        <span class=\"hljs-attr\">defaultLang</span>: <span class=\"hljs-string\">'en'</span>,\n        <span class=\"hljs-attr\">reRenderOnLangChange</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">prodMode</span>: !<span class=\"hljs-title function_\">isDevMode</span>(),\n      }),\n    },\n    { <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">TRANSLOCO_LOADER</span>, <span class=\"hljs-attr\">useClass</span>: <span class=\"hljs-title class_\">TranslocoHttpLoader</span> },\n  ],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TranslocoRootModule</span> {}\n</code></pre>\n<p>이제 transloco-root.module.ts를 루트 모듈에 가져와야 합니다. 루트 모듈은 아마도 app.module.ts라고 할 것입니다.</p>\n<img src=\"/assets/img/2024-06-22-ACompleteGuideToAngularMultilingualApplicationi18n_3.png\">\n<div class=\"content-ad\"></div>\n<h1>템플릿 내의 번역</h1>\n<p>'ng add @ngneat/transloco' 명령을 실행한 후에는 지정한 모든 언어가 포함된 i18n 디렉터리가 assets 디렉터리에 나타납니다. 이것들은 주요 언어 파일입니다. 홈페이지나 헤더에서 사용할 수 있습니다. 하지만 각 모듈을 위한 고유한 디렉터리를 만들어서 해당 모듈로 lazy load할 수도 있습니다. 레이지 로딩에 대해서는 조금 후에 다룰 것입니다. 먼저 Transloco와 함께 작업을 시작해 봅시다.</p>\n<h2>구조 지시문 사용</h2>\n<p>템플릿에서 *transloco 지시문을 사용할 수 있습니다. 그러나 feature 모듈에는 translocoModule을 가져와야 하고, 주 페이지에는 translocoRootModule을 가져와야 합니다. 우리가 제목을 번역하려고 한다고 가정해 봅시다. 우리는 번역된 텍스트를 i18n 디렉터리의 JSON 파일에 포함해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<p>en.json 파일은 다음과 같이 보여야 합니다:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"title\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Hello World!\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>그리고 다른 언어(예를 들어 독일어)로 번역할 경우 de.json 파일은 다음과 같아야 합니다:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"title\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Hallo Welt!\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>지금 저희 템플릿에서는 다음과 같이 디렉티브를 사용하여 선택한 언어의 값을 보여줄 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;h1 *transloco=<span class=\"hljs-string\">\"let t\"</span>> { <span class=\"hljs-title function_\">t</span>(<span class=\"hljs-string\">\"title\"</span>) } &#x3C;/h1>\n</code></pre>\n<p>하지만 아래와 같이 중첩된 키 속성을 포함한 복잡한 JSON 구조를 가지고 있을 수도 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// JSON은 다음과 같은 주석을 지원하지 않습니다.</span>\n<span class=\"hljs-comment\">// 이 주석은 단지 예시를 위한 것입니다.</span>\n\n<span class=\"hljs-comment\">// en.json</span>\n{\n  <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"Hello World!\"</span>,\n  <span class=\"hljs-string\">\"form\"</span>: {\n     <span class=\"hljs-string\">\"firstName\"</span>: <span class=\"hljs-string\">\"First Name\"</span>,\n     <span class=\"hljs-string\">\"lastName\"</span>: <span class=\"hljs-string\">\"Last Name\"</span>\n    }\n}\n\n<span class=\"hljs-comment\">// de.json</span>\n{\n  <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"Hallo Welt!\"</span>,\n  <span class=\"hljs-string\">\"form\"</span>: {\n     <span class=\"hljs-string\">\"firstName\"</span>: <span class=\"hljs-string\">\"Vorname\"</span>,\n     <span class=\"hljs-string\">\"lastName\"</span>: <span class=\"hljs-string\">\"Nachname\"</span>\n    }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 두 가지 옵션이 있습니다. t 함수의 중첩 항목을 사용하거나 값 찾기를 수행하는 where 지시문을 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;!-- 옵션 <span class=\"hljs-number\">1</span> -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> *<span class=\"hljs-attr\">transloco</span>=<span class=\"hljs-string\">\"let t\"</span>></span> { t(\"form.firstName\") } <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n\n&#x3C;!-- 옵션 <span class=\"hljs-number\">2</span> -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> *<span class=\"hljs-attr\">transloco</span>=<span class=\"hljs-string\">\"let t; read:'form'\"</span>></span> { t(\"firstName\") } <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n</code></pre>\n<p>옵션 2가 더 읽기 쉽습니다.</p>\n<h2>파이프 사용하기</h2>\n<div class=\"content-ad\"></div>\n<p>다른 방법은 아래와 같이 파이프를 사용하는 것입니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;h1>{ <span class=\"hljs-string\">'title'</span> | transloco }&#x3C;/h1>\n</code></pre>\n<h1>TypeScript 내에서 번역</h1>\n<p>TranslocoService를 컴포넌트에 주입한 후에는 아래와 같이 안전하게 사용할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private readonly translocoService: TranslocoService</span>) {}\n\n  <span class=\"hljs-title function_\">ngOnInit</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">translocoService</span>.<span class=\"hljs-title function_\">translate</span>(<span class=\"hljs-string\">'title'</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">translocoService</span>.<span class=\"hljs-title function_\">translate</span>(<span class=\"hljs-string\">'form.firstName'</span>);\n  }\n}\n</code></pre>\n<p>다른 번역 API도 여기에서 모두 찾을 수 있어요. 하지만 이러한 API가 올바르게 작동하려면 런타임에 번역 파일이 로드되었는지 확인해야 해요.</p>\n<h1>활성 언어 변경</h1>\n<p>사용자가 애플리케이션 언어를 변경하는 버튼을 클릭하면 애플리케이션의 선택된 언어를 변경해야 해요. 이를 위해 먼저 적절한 컴포넌트를 만들어 주세요. 완전히 구현된 컴포넌트는 여기에서 찾을 수 있어요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TranslocoService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ngneat/transloco'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-language-selector'</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n    &#x3C;div>\n      &#x3C;button\n        *ngFor=\"let language of languagesList; index as i\"\n        (click)=\"changeLanguage(language.code)\"\n      >\n        &#x3C;img [src]=\"language.imgUrl\" [alt]=\"language.name\" />\n        &#x3C;span> { language.shorthand } &#x3C;/span>\n      &#x3C;/button>\n    &#x3C;/div>\n  `</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LanguageSelectorComponent</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private translocoService: TranslocoService</span>) {}\n  public <span class=\"hljs-attr\">languagesList</span>: \n    <span class=\"hljs-title class_\">Array</span>&#x3C;<span class=\"hljs-title class_\">Record</span>&#x3C;<span class=\"hljs-string\">'imgUrl'</span> | <span class=\"hljs-string\">'code'</span> | <span class=\"hljs-string\">'name'</span> | <span class=\"hljs-string\">'shorthand'</span>, string>> = [\n    {\n      <span class=\"hljs-attr\">imgUrl</span>: <span class=\"hljs-string\">'/assets/images/English.png'</span>,\n      <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">'en'</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'English'</span>,\n      <span class=\"hljs-attr\">shorthand</span>: <span class=\"hljs-string\">'ENG'</span>,\n    },\n    {\n      <span class=\"hljs-attr\">imgUrl</span>: <span class=\"hljs-string\">'/assets/images/Deutsch.png'</span>,\n      <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">'de'</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'German'</span>,\n      <span class=\"hljs-attr\">shorthand</span>: <span class=\"hljs-string\">'GER'</span>,\n    },\n    {\n      <span class=\"hljs-attr\">imgUrl</span>: <span class=\"hljs-string\">'/assets/images/Persian.png'</span>,\n      <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">'fa'</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Persian'</span>,\n      <span class=\"hljs-attr\">shorthand</span>: <span class=\"hljs-string\">'PER'</span>,\n    },\n  ];\n  public <span class=\"hljs-title function_\">changeLanguage</span>(<span class=\"hljs-attr\">languageCode</span>: string): <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">translocoService</span>.<span class=\"hljs-title function_\">setActiveLang</span>(languageCode);\n    languageCode === <span class=\"hljs-string\">'fa'</span>\n      ? (<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">direction</span> = <span class=\"hljs-string\">'rtl'</span>)\n      : (<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">direction</span> = <span class=\"hljs-string\">'ltr'</span>);\n  }\n}\n</code></pre>\n<p>위 코드에서 보듯이 영어, 독일어, 페르시아어로 언어를 변경하는 세 개의 버튼을 구현했습니다. 사용자가 버튼을 클릭하면 선택한 언어 코드로 translocoService의 setActiveLang 메서드를 호출합니다.\n페르시아어나 아랍어와 같은 언어는 오른쪽에서 왼쪽으로 쓰이는 것을 고려해주세요. 애플리케이션의 방향을 rtl에서 ltr로 변경하는 것을 잊지 마세요.</p>\n<img src=\"/assets/img/2024-06-22-ACompleteGuideToAngularMultilingualApplicationi18n_4.png\">\n<h1>지연로딩 번역</h1>\n<div class=\"content-ad\"></div>\n<p>애플리케이션 초기화 시 모든 번역 파일을 동시에 로드하는 것은 좋은 아이디어가 아닙니다. 특히 모듈이 많은 경우에는 그렇습니다. 애플리케이션의 로드 시간이 더 늘어날 뿐만 아니라 전체 애플리케이션을 위한 단일 번역 파일을 작업하는 것도 어려운 일입니다. 다행히 우리는 모듈에 번역 파일을 지연 로드할 수 있습니다.\n우리에게는 pageOne과 pageTwo라는 두 개의 모듈이 있다고 가정해 봅시다. 각 모듈에 대해 i18n 디렉토리 내에 디렉토리를 만들겠습니다. 각 언어에 대해 동일한 수의 JSON 파일로 디렉토리를 채워 주세요. 이제 각 모듈에 대한 범위를 지정하기만 하면 됩니다. 이를 수행하는 방법이 몇 가지 있습니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;!-- pageOne 모듈 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> *<span class=\"hljs-attr\">transloco</span>=<span class=\"hljs-string\">\"let t; scope:'pageOne'\"</span>></span> { t('title') } <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n&#x3C;!-- 위의 범위를 주의해서 확인하세요 -->\n</code></pre>\n<p>다른 세부 정보도 읽기 방법과 같습니다. TypeScript에서 번역을 지연로드하려면 쉽게 목표를 달성할 수 있습니다.</p>\n<p>먼저 translocoModule을 가져온 모듈에서 원하는 범위를 지정해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">routes</span>: <span class=\"hljs-title class_\">Routes</span> = [\n  {\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">''</span>,\n    <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">PageOneComponent</span>\n  }\n];\n\n@<span class=\"hljs-title class_\">NgModule</span>({\n  <span class=\"hljs-attr\">declarations</span>: [<span class=\"hljs-title class_\">PageOneComponent</span>],\n  <span class=\"hljs-attr\">providers</span>: [{ <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">TRANSLOCO_SCOPE</span>, <span class=\"hljs-attr\">useValue</span>: <span class=\"hljs-string\">'pageOne'</span> }],\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">RouterModule</span>.<span class=\"hljs-title function_\">forChild</span>(routes), <span class=\"hljs-title class_\">TranslocoModule</span>]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PageOneModule</span> {}\n</code></pre>\n<p>이제 TypeScript 파일에서 아래와 같이 현재 scope에 접근할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    private translocoService: TranslocoService, \n    @Inject(TRANSLOCO_SCOPE) private scope\n  </span>) {}\n\n  <span class=\"hljs-title function_\">ngOnInit</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">translocoService</span>.<span class=\"hljs-title function_\">selectTranslate</span>(<span class=\"hljs-string\">'title'</span>, params, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">scope</span>)\n      .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>);\n  }\n}\n</code></pre>\n<p>컴포넌트에 TRANSLOCO_SCOPE를 인젝션하면 모듈의 현재 scope를 사용할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>최종 결과물</h1>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*WVqJR58gpb6SdUpsgpR-1g.gif\" alt=\"이미지\"></p>\n<h2>전체 구현 데모를 확인할 수 있습니다:</h2>\n<p><a href=\"https://angular-multi-lingual.hmousavi.dev\" rel=\"nofollow\" target=\"_blank\">https://angular-multi-lingual.hmousavi.dev</a></p>\n<div class=\"content-ad\"></div>\n<h2>GitHub 저장소를 확인해보세요:</h2>\n<p><a href=\"https://github.com/hossein13m/angular-multi-lingual\" rel=\"nofollow\" target=\"_blank\">GitHub 저장소</a></p>\n<h1>친구들과 공유하세요! 👏 최대 50번 클랩을 해주세요.</h1>\n<p>의견이나 아이디어를 공유할 때 주저하지 마세요. 트위터에서 저에게 연락하거나 제 포트폴리오를 방문해서 다른 방법을 찾을 수 있어요.</p>\n</body>\n</html>\n"},"__N_SSG":true}