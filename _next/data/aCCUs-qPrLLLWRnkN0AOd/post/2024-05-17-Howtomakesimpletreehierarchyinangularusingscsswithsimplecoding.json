{"pageProps":{"post":{"title":"Angular에서 간단한 코드로 SCSS를 활용해 트리 계층구조를 만드는 방법","description":"","date":"2024-05-17 20:59","slug":"2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding","content":"\n\n\n![Tree Hierarchy Example](/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_0.png)\n\n한 가지 문자열 배열이 있다고 가정해봅시다. 만약 우리가 문자열 배열을 트리 구조로 그리고 싶다면, 어떻게 할 수 있을까요? 함께 살펴보겠습니다.\n\n![Tree Hierarchy Example](/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_1.png)\n\n# 단계 1:\n\n\n<div class=\"content-ad\"></div>\n\n샘플 Angular 애플리케이션을 cmd를 사용하여 생성합니다.\n\n# 단계 2:\n\ntreeData 배열을 생성하고 기본값으로 초기화합니다.\n\n```js\n//app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n\n  treeData:string[];\n\n  constructor() {\n    this.treeData = [\n      'Root',\n      'Node1',\n      'Node2',\n      'Node3'\n    ];\n  }\n\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 3:\n\nSCSS 파일에 믹스인 함수를 만드세요.\n\n```scss\n//app.component.scss\n\n@mixin generate($prefix, $property, $length) {\n  $spacing: 20px;\n  @for $i from 1 through $length {\n    .#{$prefix}-#{$i} {\n      #{$property}: $spacing * $i;\n    }\n  }\n}\n \n@include generate(li, margin-left, 20);\n```\n\n믹스인을 사용하면 스타일을 정의하고 스타일 시트 전체에서 재사용할 수 있습니다. 이를 통해 .float-left와 같은 의미 없는 클래스를 사용하는 것을 피하고 스타일 모음을 라이브러리로 분배하는 것이 쉬워집니다.\n\n<div class=\"content-ad\"></div>\n\n자세히 보기: https://sass-lang.com/documentation/at-rules/mixin/\n\n`generate()` 함수는 주어진 접두사, 속성 및 길이로 여러 클래스를 생성하는 데 사용됩니다. 'li', 'margin-left', '20'을 전달하면 다음과 같은 클래스가 생성됩니다.\n\n```js\n.li-1 {\n  margin-left: 20px;\n}\n\n.li-2 {\n  margin-left: 40px;\n}\n\n.li-3 {\n  margin-left: 60px;\n}\n...\n...\n...\n.li-20 {\n  margin-left: 400px;\n}\n```\n\n이 클래스를 사용하여 각 반복에서 왼쪽 마진을 증가시킵니다.\n\n<div class=\"content-ad\"></div>\n\n# 단계 4:\n\n`ul` 및 `li` 태그를 사용하여 HTML 파일에 목록을 만들고 `li` 태그에 *ngFor를 추가합니다.\n\n```js\n<ul>\n  <li *ngFor=\"let data of treeData;index as i\" [ngClass]=\"'li-'+i\">\n    {data}\n  </li>\n</ul>\n```\n\n여기서 `[ngClass]=”’li-’+i”`를 추가했습니다. 각 반복마다 동적으로 생성된 클래스를 사용한다는 의미입니다.\n\n<div class=\"content-ad\"></div>\n\n\n[ngClass]=\"'li-1'\"\n[ngClass]=\"'li-2'\"\n[ngClass]=\"'li-3'\"\n[ngClass]=\"'li-4'\"\n....\n....\n[ngClass]=\"'li-20'\"\n\n# Step 5:\n\n코드를 실행하고 즐기세요!\n\n코딩을 즐기세요!!!\n","ogImage":{"url":"/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_0.png"},"coverImage":"/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_0.png\" alt=\"Tree Hierarchy Example\"></p>\n<p>한 가지 문자열 배열이 있다고 가정해봅시다. 만약 우리가 문자열 배열을 트리 구조로 그리고 싶다면, 어떻게 할 수 있을까요? 함께 살펴보겠습니다.</p>\n<p><img src=\"/assets/img/2024-05-17-Howtomakesimpletreehierarchyinangularusingscsswithsimplecoding_1.png\" alt=\"Tree Hierarchy Example\"></p>\n<h1>단계 1:</h1>\n<div class=\"content-ad\"></div>\n<p>샘플 Angular 애플리케이션을 cmd를 사용하여 생성합니다.</p>\n<h1>단계 2:</h1>\n<p>treeData 배열을 생성하고 기본값으로 초기화합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//app.component.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'my-app'</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./app.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./app.component.scss'</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppComponent</span> {\n\n  <span class=\"hljs-attr\">treeData</span>:string[];\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">treeData</span> = [\n      <span class=\"hljs-string\">'Root'</span>,\n      <span class=\"hljs-string\">'Node1'</span>,\n      <span class=\"hljs-string\">'Node2'</span>,\n      <span class=\"hljs-string\">'Node3'</span>\n    ];\n  }\n\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>단계 3:</h1>\n<p>SCSS 파일에 믹스인 함수를 만드세요.</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-comment\">//app.component.scss</span>\n\n<span class=\"hljs-keyword\">@mixin</span> generate(<span class=\"hljs-variable\">$prefix</span>, <span class=\"hljs-variable\">$property</span>, <span class=\"hljs-variable\">$length</span>) {\n  <span class=\"hljs-variable\">$spacing</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-keyword\">@for</span> <span class=\"hljs-variable\">$i</span> from <span class=\"hljs-number\">1</span> through <span class=\"hljs-variable\">$length</span> {\n    .#{<span class=\"hljs-variable\">$prefix</span>}-#{<span class=\"hljs-variable\">$i</span>} {\n      #{<span class=\"hljs-variable\">$property</span>}: <span class=\"hljs-variable\">$spacing</span> * <span class=\"hljs-variable\">$i</span>;\n    }\n  }\n}\n \n<span class=\"hljs-keyword\">@include</span> generate(li, margin-left, <span class=\"hljs-number\">20</span>);\n</code></pre>\n<p>믹스인을 사용하면 스타일을 정의하고 스타일 시트 전체에서 재사용할 수 있습니다. 이를 통해 .float-left와 같은 의미 없는 클래스를 사용하는 것을 피하고 스타일 모음을 라이브러리로 분배하는 것이 쉬워집니다.</p>\n<div class=\"content-ad\"></div>\n<p>자세히 보기: <a href=\"https://sass-lang.com/documentation/at-rules/mixin/\" rel=\"nofollow\" target=\"_blank\">https://sass-lang.com/documentation/at-rules/mixin/</a></p>\n<p><code>generate()</code> 함수는 주어진 접두사, 속성 및 길이로 여러 클래스를 생성하는 데 사용됩니다. 'li', 'margin-left', '20'을 전달하면 다음과 같은 클래스가 생성됩니다.</p>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">li</span>-<span class=\"hljs-number\">1</span> {\n  margin-<span class=\"hljs-attr\">left</span>: 20px;\n}\n\n.<span class=\"hljs-property\">li</span>-<span class=\"hljs-number\">2</span> {\n  margin-<span class=\"hljs-attr\">left</span>: 40px;\n}\n\n.<span class=\"hljs-property\">li</span>-<span class=\"hljs-number\">3</span> {\n  margin-<span class=\"hljs-attr\">left</span>: 60px;\n}\n...\n...\n...\n.<span class=\"hljs-property\">li</span>-<span class=\"hljs-number\">20</span> {\n  margin-<span class=\"hljs-attr\">left</span>: 400px;\n}\n</code></pre>\n<p>이 클래스를 사용하여 각 반복에서 왼쪽 마진을 증가시킵니다.</p>\n<div class=\"content-ad\"></div>\n<h1>단계 4:</h1>\n<p><code>ul</code> 및 <code>li</code> 태그를 사용하여 HTML 파일에 목록을 만들고 <code>li</code> 태그에 *ngFor를 추가합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;ul>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let data of treeData;index as i\"</span> [<span class=\"hljs-attr\">ngClass</span>]=<span class=\"hljs-string\">\"'li-'+i\"</span>></span>\n    {data}\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>\n&#x3C;/ul>\n</code></pre>\n<p>여기서 <code>[ngClass]=”’li-’+i”</code>를 추가했습니다. 각 반복마다 동적으로 생성된 클래스를 사용한다는 의미입니다.</p>\n<div class=\"content-ad\"></div>\n<p>[ngClass]=\"'li-1'\"\n[ngClass]=\"'li-2'\"\n[ngClass]=\"'li-3'\"\n[ngClass]=\"'li-4'\"\n....\n....\n[ngClass]=\"'li-20'\"</p>\n<h1>Step 5:</h1>\n<p>코드를 실행하고 즐기세요!</p>\n<p>코딩을 즐기세요!!!</p>\n</body>\n</html>\n"},"__N_SSG":true}