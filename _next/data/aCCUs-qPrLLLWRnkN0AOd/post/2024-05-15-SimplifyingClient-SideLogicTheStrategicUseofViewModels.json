{"pageProps":{"post":{"title":"클라이언트 측 로직 간소화 뷰 모델의 전략적 활용","description":"","date":"2024-05-15 02:45","slug":"2024-05-15-SimplifyingClient-SideLogicTheStrategicUseofViewModels","content":"\n\n\n![User View Model](/assets/img/2024-05-15-SimplifyingClient-SideLogicTheStrategicUseofViewModels_0.png)\n\n애플리케이션은 종종 서버에서 직접 사용 가능한 데이터 표현과는 다른 데이터 표현이 필요합니다. 예를 들어 사용자 객체에는 열거형 역할, 열거형 상태, 이름 등의 속성이 포함될 수 있습니다. 클라이언트 측 뷰에서 이러한 서버 측 모델을 직접 사용하면 종종 UI 로직 전체에 분산된 복잡한 변환을 유발합니다.\n\n이 문제를 해결하기 위해 각 엔티티에 대한 뷰 모델 클래스를 생성하는 것을 주장합니다. 이 캡슐화는 데이터 처리를 간단하게 만들어주며 UI가 필요한 것만 받도록 보장합니다. 다음은 UserVm의 간단한 실제 예시입니다:\n\n```js\nconst rolesMap = fromBeEnum(UserRoleEnum, {\n  VIEWER: '뷰어',\n  ADMIN: '관리자',\n  SIGNER: '서명자',\n  OWNER: '소유자'\n});\n\nexport class UserVm {\n  constructor(dto: User) {\n    this.displayName = dto.name || dto.email;\n    this.isActive = dto.status === UserStatusEnum.ACTIVE;\n    this.isServiceAccount = dto.type === UserTypeEnum.SERVICE_ACCOUNT;\n    this.isViewer = dto.role === UserRoleEnum.VIEWER;\n    this.isOwner = dto.role === UserRoleEnum.OWNER;\n    this.isActiveAdmin = dto.isAdmin && this.isActive;\n    this.typeLabel = dto.isServiceAccount ? '서비스 계정' : '사용자';\n    this.roleLabel = this.userRoleToLabel();\n    this.hasAddQuorum = hasQuorum(dto, 'add');\n    this.hasRemoveQuorum = hasQuorum(dto, 'remove');\n    this.isPendingApproval = this.hasAddQuorum || this.hasRemoveQuorum;\n  }\n  \n  private userRoleToLabel() {\n    return rolesMap[this.dto.role] || '알 수 없음';\n  }\n}\n```\n\n\n\ngetUser 엔드포인트에서 데이터를 받으면 UserVm 클래스를 사용하여 응답에 맞는 새 사용자 뷰 모델을 생성합니다. 이 추상화를 통해 깔끔하고 유지 관리 가능한 코드 구조를 유지할 수 있습니다.\n\n```js\nimport { injectQuery, mapResultData } from '@ngneat/query';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  private query = injectQuery();\n  private client = injectApiClient();\n\n  getUser({ vaultId }) {\n    return this.query({\n      queryKey: ['user'],\n      queryFn: () => {\n        return this.client.getAuthenticatedUser({ vaultId })\n      }\n    }).result$.pipe(\n      mapResultData(user => new UserVm())\n    )\n  }\n}\n```\n\n이 원칙은 엔티티 배열을 다룰 때에도 동일하게 적용됩니다. 예를 들어, 응용 프로그램 내에서 거래가 어떻게 처리되는지 살펴보면 — UI 변환을 거치는 중요한 엔티티인 거래에 대해 어떻게 다루는지에 대해 생각해 보세요.\n\n```js\nimport { injectQuery, mapResultData } from '@ngneat/query';\n\n@Injectable({ providedIn: 'root' })\nexport class TransactionsService {\n  private query = injectQuery();\n  private client = injectApiClient();\n\n  getTransactions({ vaultId }) {\n    return this.query({\n      queryKey: ['transactions'],\n      queryFn: () => {\n        return this.client.getTransactions({ vaultId })\n      }\n    }).result$.pipe(\n      mapResultData(res => res.transactions.map(t => new TransactionVm(t)))\n    )\n  }\n}\n```\n\n\n\n# 뷰 모델 사용의 이점\n\n## 명확성과 사용자 정의\n\n백엔드 네이밍 규칙 때문에 머리를 긁는 순간들을 우리 모두 겪어봤죠 😛. 뷰 모델은 속성 이름을 바꿔 더 직관적으로 만들 수 있습니다. DTO 이름이 애매할 때, VM은 DTO를 직접 변경하지 않고 더 구체적인 이름을 사용하는 방법을 제공합니다.\n\n## 스키마 유연성\n\n\n\nVMs(Visual Models)은 백엔드 구조에 영향을 미치지 않고 DTO 스키마를 애플리케이션의 요구에 더 잘 맞게 수정할 수 있는 기회를 제공합니다. 이 유연성은 다양한 사용 케이스에 적응하는 데 중요합니다.\n\n## 중앙화된 수정\n\nDTO에 중요한 변경이 있거나 예기치 못한 수정이 필요한 경우, 조정은 뷰 모델에서만 하면 되며 애플리케이션 전체에 수정을 반영할 필요가 없습니다. 이 중앙화는 버그와 유지보수 부담을 크게 줄여줍니다.\n\n## 캡슐화\n\n\n\n변환 로직을 VM 내부로 캡슐화하면 컴포넌트 전체에서의 파이프, 유틸리티 함수 및 열거형에 대한 의존성이 줄어들어 더 깨끗하고 유지보수가 쉬운 코드를 작성할 수 있습니다.\n\n## 재사용성\n\n한 번 정의된 View Model은 응용 프로그램의 다른 부분 또는 다른 프로젝트에서도 재사용할 수 있습니다. 이러한 재사용성은 개발 시간을 크게 단축하고 오류를 줄일 수 있습니다. 예를 들어, ownerVm을 사용하는 DeviceVm의 시나리오를 살펴보겠습니다:\n\n```js\nexport class DeviceVm {\n  ownerVm: UserVm;\n\n  constructor(device: Device) {\n    // ...device props\n    this.ownerVm = new UserVm(device.owner);\n  }\n}\n```\n\n\n\n이 설정을 사용하면 장치를 처리하는 애플리케이션의 어떤 부분이든 UserVm에서 사용 가능한 풍부한, 사전 처리된 데이터를 자동으로 활용할 수 있습니다.\n\nEntity 간 관련이 있는 복잡한 데이터 구조는 조합된 VM에서 크게 이점을 얻을 수 있습니다. 예를 들어, 여러 장치를 가진 사용자 시나리오는 다음과 같이 보일 수 있습니다:\n\n```js\nexport class UserWithDevicesVm extends UserVm {\n  devices: DeviceVm[];\n\n  constructor(user: User, devices: Device[]) {\n    super(user); // 기본 UserVm 초기화\n    this.devices = devices.map(device => new DeviceVm(device));\n  }\n}\n\n// 서비스에서\nimport { intersectResults$ } from '@ngneat/query';\n\ncombineLatest([\n  this.usersService.getUsers({ vaultId }),\n  this.devicesService.getDevices({ vaultId })\n]).pipe(\n  intersectResults$(([users, devices]) => {\n    const userDevices = devices.filter(...); \n    return users.map(user => new UserWithDevicesVm(user, userDevices));\n  })\n)\n```\n\n# 업데이트용 뷰 모델 복제\n\n\n\n가끔가다 VM을 업데이트해야 할 때가 있습니다. 이런 경우를 위해 원본 DTO를 보존하고 복제 방법을 구현할 수 있습니다:\n\n```js\nexport class DeviceVm {\n  \n  constructor(private dto: Device) {\n    // 장치 속성\n  }\n  \n  clone() {\n    return new DeviceVm(this.dto)\n  }\n}\n```\n\n제 애플리케이션에서는 보통 VM을 직접 업데이트하지 않습니다. 대신 성능 문제가 없는 한, @ngneat/query(내부적으로 tanstack/query를 사용)의 invalidateQueries 함수를 활용합니다. 이 방식은 서버에서 데이터를 다시 가져오고 자동으로 새 VM을 생성하여 사용자 인터페이스를 업데이트합니다.\n\n# 결론\n\n\n\n뷰 모델은 애플리케이션 데이터를 관리하기 위한 강력한 패턴으로 작용합니다. 이들은 클라이언트 측 개발을 단순화할 뿐만 아니라 애플리케이션의 유지 보수성과 확장성을 향상시킵니다. 데이터 처리 및 변환을 전용 클래스로 추상화함으로써, 개발자들은 견고하고 사용자 친화적인 인터페이스를 구축하는 데 집중할 수 있습니다.\n\nAngular 및 JS에 대해 더 알아보려면 Medium 또는 Twitter에서 팔로우해주세요!","ogImage":{"url":"/assets/img/2024-05-15-SimplifyingClient-SideLogicTheStrategicUseofViewModels_0.png"},"coverImage":"/assets/img/2024-05-15-SimplifyingClient-SideLogicTheStrategicUseofViewModels_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-15-SimplifyingClient-SideLogicTheStrategicUseofViewModels_0.png\" alt=\"User View Model\"></p>\n<p>애플리케이션은 종종 서버에서 직접 사용 가능한 데이터 표현과는 다른 데이터 표현이 필요합니다. 예를 들어 사용자 객체에는 열거형 역할, 열거형 상태, 이름 등의 속성이 포함될 수 있습니다. 클라이언트 측 뷰에서 이러한 서버 측 모델을 직접 사용하면 종종 UI 로직 전체에 분산된 복잡한 변환을 유발합니다.</p>\n<p>이 문제를 해결하기 위해 각 엔티티에 대한 뷰 모델 클래스를 생성하는 것을 주장합니다. 이 캡슐화는 데이터 처리를 간단하게 만들어주며 UI가 필요한 것만 받도록 보장합니다. 다음은 UserVm의 간단한 실제 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> rolesMap = <span class=\"hljs-title function_\">fromBeEnum</span>(<span class=\"hljs-title class_\">UserRoleEnum</span>, {\n  <span class=\"hljs-attr\">VIEWER</span>: <span class=\"hljs-string\">'뷰어'</span>,\n  <span class=\"hljs-attr\">ADMIN</span>: <span class=\"hljs-string\">'관리자'</span>,\n  <span class=\"hljs-attr\">SIGNER</span>: <span class=\"hljs-string\">'서명자'</span>,\n  <span class=\"hljs-attr\">OWNER</span>: <span class=\"hljs-string\">'소유자'</span>\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserVm</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">dto: User</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">displayName</span> = dto.<span class=\"hljs-property\">name</span> || dto.<span class=\"hljs-property\">email</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isActive</span> = dto.<span class=\"hljs-property\">status</span> === <span class=\"hljs-title class_\">UserStatusEnum</span>.<span class=\"hljs-property\">ACTIVE</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isServiceAccount</span> = dto.<span class=\"hljs-property\">type</span> === <span class=\"hljs-title class_\">UserTypeEnum</span>.<span class=\"hljs-property\">SERVICE_ACCOUNT</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isViewer</span> = dto.<span class=\"hljs-property\">role</span> === <span class=\"hljs-title class_\">UserRoleEnum</span>.<span class=\"hljs-property\">VIEWER</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isOwner</span> = dto.<span class=\"hljs-property\">role</span> === <span class=\"hljs-title class_\">UserRoleEnum</span>.<span class=\"hljs-property\">OWNER</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isActiveAdmin</span> = dto.<span class=\"hljs-property\">isAdmin</span> &#x26;&#x26; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isActive</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">typeLabel</span> = dto.<span class=\"hljs-property\">isServiceAccount</span> ? <span class=\"hljs-string\">'서비스 계정'</span> : <span class=\"hljs-string\">'사용자'</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">roleLabel</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">userRoleToLabel</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hasAddQuorum</span> = <span class=\"hljs-title function_\">hasQuorum</span>(dto, <span class=\"hljs-string\">'add'</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hasRemoveQuorum</span> = <span class=\"hljs-title function_\">hasQuorum</span>(dto, <span class=\"hljs-string\">'remove'</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isPendingApproval</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hasAddQuorum</span> || <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hasRemoveQuorum</span>;\n  }\n  \n  private <span class=\"hljs-title function_\">userRoleToLabel</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> rolesMap[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dto</span>.<span class=\"hljs-property\">role</span>] || <span class=\"hljs-string\">'알 수 없음'</span>;\n  }\n}\n</code></pre>\n<p>getUser 엔드포인트에서 데이터를 받으면 UserVm 클래스를 사용하여 응답에 맞는 새 사용자 뷰 모델을 생성합니다. 이 추상화를 통해 깔끔하고 유지 관리 가능한 코드 구조를 유지할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { injectQuery, mapResultData } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ngneat/query'</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>({ <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span> })\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  private query = <span class=\"hljs-title function_\">injectQuery</span>();\n  private client = <span class=\"hljs-title function_\">injectApiClient</span>();\n\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-params\">{ vaultId }</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">query</span>({\n      <span class=\"hljs-attr\">queryKey</span>: [<span class=\"hljs-string\">'user'</span>],\n      <span class=\"hljs-attr\">queryFn</span>: <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">client</span>.<span class=\"hljs-title function_\">getAuthenticatedUser</span>({ vaultId })\n      }\n    }).<span class=\"hljs-property\">result$</span>.<span class=\"hljs-title function_\">pipe</span>(\n      <span class=\"hljs-title function_\">mapResultData</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =></span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserVm</span>())\n    )\n  }\n}\n</code></pre>\n<p>이 원칙은 엔티티 배열을 다룰 때에도 동일하게 적용됩니다. 예를 들어, 응용 프로그램 내에서 거래가 어떻게 처리되는지 살펴보면 — UI 변환을 거치는 중요한 엔티티인 거래에 대해 어떻게 다루는지에 대해 생각해 보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { injectQuery, mapResultData } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ngneat/query'</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>({ <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span> })\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TransactionsService</span> {\n  private query = <span class=\"hljs-title function_\">injectQuery</span>();\n  private client = <span class=\"hljs-title function_\">injectApiClient</span>();\n\n  <span class=\"hljs-title function_\">getTransactions</span>(<span class=\"hljs-params\">{ vaultId }</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">query</span>({\n      <span class=\"hljs-attr\">queryKey</span>: [<span class=\"hljs-string\">'transactions'</span>],\n      <span class=\"hljs-attr\">queryFn</span>: <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">client</span>.<span class=\"hljs-title function_\">getTransactions</span>({ vaultId })\n      }\n    }).<span class=\"hljs-property\">result$</span>.<span class=\"hljs-title function_\">pipe</span>(\n      <span class=\"hljs-title function_\">mapResultData</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =></span> res.<span class=\"hljs-property\">transactions</span>.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">t</span> =></span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TransactionVm</span>(t)))\n    )\n  }\n}\n</code></pre>\n<h1>뷰 모델 사용의 이점</h1>\n<h2>명확성과 사용자 정의</h2>\n<p>백엔드 네이밍 규칙 때문에 머리를 긁는 순간들을 우리 모두 겪어봤죠 😛. 뷰 모델은 속성 이름을 바꿔 더 직관적으로 만들 수 있습니다. DTO 이름이 애매할 때, VM은 DTO를 직접 변경하지 않고 더 구체적인 이름을 사용하는 방법을 제공합니다.</p>\n<h2>스키마 유연성</h2>\n<p>VMs(Visual Models)은 백엔드 구조에 영향을 미치지 않고 DTO 스키마를 애플리케이션의 요구에 더 잘 맞게 수정할 수 있는 기회를 제공합니다. 이 유연성은 다양한 사용 케이스에 적응하는 데 중요합니다.</p>\n<h2>중앙화된 수정</h2>\n<p>DTO에 중요한 변경이 있거나 예기치 못한 수정이 필요한 경우, 조정은 뷰 모델에서만 하면 되며 애플리케이션 전체에 수정을 반영할 필요가 없습니다. 이 중앙화는 버그와 유지보수 부담을 크게 줄여줍니다.</p>\n<h2>캡슐화</h2>\n<p>변환 로직을 VM 내부로 캡슐화하면 컴포넌트 전체에서의 파이프, 유틸리티 함수 및 열거형에 대한 의존성이 줄어들어 더 깨끗하고 유지보수가 쉬운 코드를 작성할 수 있습니다.</p>\n<h2>재사용성</h2>\n<p>한 번 정의된 View Model은 응용 프로그램의 다른 부분 또는 다른 프로젝트에서도 재사용할 수 있습니다. 이러한 재사용성은 개발 시간을 크게 단축하고 오류를 줄일 수 있습니다. 예를 들어, ownerVm을 사용하는 DeviceVm의 시나리오를 살펴보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DeviceVm</span> {\n  <span class=\"hljs-attr\">ownerVm</span>: <span class=\"hljs-title class_\">UserVm</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">device: Device</span>) {\n    <span class=\"hljs-comment\">// ...device props</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ownerVm</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserVm</span>(device.<span class=\"hljs-property\">owner</span>);\n  }\n}\n</code></pre>\n<p>이 설정을 사용하면 장치를 처리하는 애플리케이션의 어떤 부분이든 UserVm에서 사용 가능한 풍부한, 사전 처리된 데이터를 자동으로 활용할 수 있습니다.</p>\n<p>Entity 간 관련이 있는 복잡한 데이터 구조는 조합된 VM에서 크게 이점을 얻을 수 있습니다. 예를 들어, 여러 장치를 가진 사용자 시나리오는 다음과 같이 보일 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserWithDevicesVm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">UserVm</span> {\n  <span class=\"hljs-attr\">devices</span>: <span class=\"hljs-title class_\">DeviceVm</span>[];\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">user: User, devices: Device[]</span>) {\n    <span class=\"hljs-variable language_\">super</span>(user); <span class=\"hljs-comment\">// 기본 UserVm 초기화</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">devices</span> = devices.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">device</span> =></span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeviceVm</span>(device));\n  }\n}\n\n<span class=\"hljs-comment\">// 서비스에서</span>\n<span class=\"hljs-keyword\">import</span> { intersectResults$ } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ngneat/query'</span>;\n\n<span class=\"hljs-title function_\">combineLatest</span>([\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">usersService</span>.<span class=\"hljs-title function_\">getUsers</span>({ vaultId }),\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">devicesService</span>.<span class=\"hljs-title function_\">getDevices</span>({ vaultId })\n]).<span class=\"hljs-title function_\">pipe</span>(\n  <span class=\"hljs-title function_\">intersectResults$</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">[users, devices]</span>) =></span> {\n    <span class=\"hljs-keyword\">const</span> userDevices = devices.<span class=\"hljs-title function_\">filter</span>(...); \n    <span class=\"hljs-keyword\">return</span> users.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =></span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserWithDevicesVm</span>(user, userDevices));\n  })\n)\n</code></pre>\n<h1>업데이트용 뷰 모델 복제</h1>\n<p>가끔가다 VM을 업데이트해야 할 때가 있습니다. 이런 경우를 위해 원본 DTO를 보존하고 복제 방법을 구현할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DeviceVm</span> {\n  \n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private dto: Device</span>) {\n    <span class=\"hljs-comment\">// 장치 속성</span>\n  }\n  \n  <span class=\"hljs-title function_\">clone</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeviceVm</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dto</span>)\n  }\n}\n</code></pre>\n<p>제 애플리케이션에서는 보통 VM을 직접 업데이트하지 않습니다. 대신 성능 문제가 없는 한, @ngneat/query(내부적으로 tanstack/query를 사용)의 invalidateQueries 함수를 활용합니다. 이 방식은 서버에서 데이터를 다시 가져오고 자동으로 새 VM을 생성하여 사용자 인터페이스를 업데이트합니다.</p>\n<h1>결론</h1>\n<p>뷰 모델은 애플리케이션 데이터를 관리하기 위한 강력한 패턴으로 작용합니다. 이들은 클라이언트 측 개발을 단순화할 뿐만 아니라 애플리케이션의 유지 보수성과 확장성을 향상시킵니다. 데이터 처리 및 변환을 전용 클래스로 추상화함으로써, 개발자들은 견고하고 사용자 친화적인 인터페이스를 구축하는 데 집중할 수 있습니다.</p>\n<p>Angular 및 JS에 대해 더 알아보려면 Medium 또는 Twitter에서 팔로우해주세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}