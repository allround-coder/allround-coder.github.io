{"pageProps":{"post":{"title":"React Router를 사용하여 React에서 단일 페이지 앱SPA 만들기","description":"","date":"2024-05-12 20:52","slug":"2024-05-12-CreatingaSingle-PageAppSPAinReactusingReactRouter","content":"\n\n## React 및 Typescript를 사용한 흐름 예제와 일부 패키지\n\n단일 페이지 어플리케이션(SPA)은 단일 HTML 페이지를로드하고 사용자가 애플리케이션과 상호 작용할 때 콘텐츠를 동적으로 업데이트하는 웹 어플리케이션입니다.\n\n최근에 React 코스를 마쳤는데 React Router를 사용하여 SPA를 만들어야 하는 React 애플리케이션을 작업해야 했습니다. 작업 중이던 애플리케이션은 단일 페이지 애플리케이션이었으며 목표는 여러 뷰를 가지는 것이었습니다. 새로운 뷰로 이동할 때 페이지를 다시로드하는 대신, 현재 URL에 기반하여 적합한 컴포넌트를 동적으로 렌더링하기 위해 React Router를 설치했습니다. 따라서 다양한 경로를 정의하고 각 경로는 적절한 경로와 렌더링할 컴포넌트가 지정된 Route 컴포넌트를 사용하여 정의되었습니다.\n\nReact Router에서 정말 감사한 점 중 하나는 다른 뷰 사이를 탐색하는 것이 얼마나 쉬웠는지입니다. Link 컴포넌트를 사용하여 다른 뷰 간의 링크를 만들 수 있었으며 React Router가 URL을 업데이트하고 적절한 컴포넌트를 렌더링하는 데 처리했습니다.\n\n\n\nReact Router를 사용하면 여러 뷰가 있는 복잡한 싱글 페이지 애플리케이션을 쉽게 만들 수 있다는 것을 발견했어요. 현재 URL에 기반하여 동적으로 컴포넌트를 렌더링하고 뷰 간의 탐색을 처리하는 것을 보는 것이 정말 좋았어요!\n\n![이미지](/assets/img/2024-05-12-CreatingaSingle-PageAppSPAinReactusingReactRouter_0.png)\n\n## 왜 SPA 응용 프로그램을 사용해야 할까요?\n\n- SPA는 페이지 새로고침을 최소화하고 빠른 로드 시간을 제공하여 사용자 경험을 개선합니다.\n- 모듈식 디자인으로 인해 유지 보수와 개발이 쉽고 전통적인 웹 애플리케이션과 비교했을 때 성능이 더 좋습니다. 필요한 리소스만을 로드하기 때문에 리소스 효율이 높아요.\n- 오프라인 이용이 가능하여 사용자 참여도를 높입니다.\n- 사용자 데이터를 보호하는 강력한 보안 기능을 갖추고 있을 수 있어요.\n\n\n\n## SPA가 사용되는 애플리케이션은 무엇인가요?\n\n- Facebook 및 Twitter와 같은 소셜 미디어 플랫폼\n- Gmail 및 Outlook와 같은 이메일 클라이언트\n- Trello 및 Asana와 같은 생산성 도구\n- Netflix 및 YouTube와 같은 비디오 스트리밍 서비스\n- Amazon 및 eBay와 같은 전자 상거래 사이트\n\n## React와 Typescript 및 일부 패키지를 사용하여 SPA를 만드는 방법에 대한 Flow 예제를 확인하세요.\n\n- create-react-app 명령을 사용하여 새 React 프로젝트를 생성합니다.\n- React, React-DOM, React-Router-DOM, Typescript 및 Webpack과 같은 필수 종속성을 설치합니다.\n- SPA 애플리케이션을 위한 새 컴포넌트를 만듭니다.\n- React Router를 사용하여 SPA 애플리케이션의 라우트를 정의합니다.\n- 예를 들어 Axios를 사용하여 서버에서 데이터를 가져오기 위한 API 호출을 수행합니다.\n- Redux 또는 React Context API를 사용하여 애플리케이션의 상태를 관리합니다.\n- 인증, 캐싱 및 오류 처리와 같은 추가 기능을 SPA 애플리케이션에 추가합니다.\n- Webpack을 사용하여 SPA 애플리케이션을 빌드합니다.\n- AWS, MongoDB 또는 Azure와 같은 웹 서버 또는 클라우드 플랫폼에 SPA 애플리케이션을 배포합니다.\n\n\n\n# 이제 React Router와 TypeScript를 사용하여 4개의 컴포넌트를 사용하여 React에서 가장 기본적인 싱글 페이지 앱을 만드는 예제입니다.\n\n우리는 create-react-app을 사용하여 React/Typescript 앱을 만듭니다:\n\n```js\nnpx create-react-app my-app --template typescript\n```\n\nReact Router를 설치하세요:\n\n\n\n```js\nnpm install react-router-dom @types/react-router-dom\n```\n\n자, 이제 쉬운 네비게이션 메뉴와 라우팅을 만들어 봅시다. 먼저 Router 컴포넌트를 생성하고 Route 컴포넌트를 사용하여 네 가지 경로를 정의합니다. 그리고 Link 컴포넌트를 사용하여 간단한 네비게이션 메뉴를 만들어 봅니다. 간단하죠?\n\n```js\nimport React from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Products from './components/Products';\nimport Contact from './components/Contact';\n```\n\n```js\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/products\">Products</Link>\n          </li>\n          <li>\n            <Link to=\"/contact\">Contact</Link>\n          </li>\n        </ul>\n      </nav>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/products\" component={Products} />\n        <Route path=\"/contact\" component={Contact} />\n      </Switch>\n    </Router>\n  );\n};\nexport default App;\n```\n\n\n\n그 다음, 몇 가지 기본 구성 요소를 생성해 봅시다! 먼저 환영 메시지를 표시하는 Home을 만들어 보겠습니다.\n\n```js\nimport React from 'react';\n```\n\n```js\nconst Home: React.FC = () => {\n  return (\n    <div>\n      <h1>Home</h1>\n      <p>Welcome to our website!</p>\n    </div>\n  );\n};\nexport default Home;\n```\n\n회사에 대한 정보를 표시하는 About 컴포넌트도 만들어봅시다.\n\n\n\n```js\nimport React from 'react';\n```\n\n```js\nconst About: React.FC = () => {\n  return (\n    <div>\n      <h1>About</h1>\n      <p>Diego의 회사에 대해 더 알아보세요!</p>\n    </div>\n  );\n};\nexport default About;\n```\n\n제품 목록을 보여주는 AProducts 컴포넌트입니다.\n\n```js\nimport React from 'react';\n```\n\n\n\n```js\nconst Products: React.FC = () => {\n  return (\n    <div>\n      <h1>제품</h1>\n      <ul>\n        <li>제품 1</li>\n        <li>제품 2</li>\n        <li>제품 3</li>\n      </ul>\n    </div>\n  );\n};\nexport default Products;\n```\n\n마지막으로 이름과 이메일을 요청하는 양식이 있는 Contact 컴포넌트입니다.\n\n```js\nimport React from 'react';\n```\n\n```js\nconst Contact: React.FC = () => {\n  return (\n    <div>\n      <h1>문의하기</h1>\n      <form>\n        <label>\n          이름:\n          <input type=\"text\" name=\"name\" />\n        </label>\n        <br />\n        <label>\n          이메일:\n          <input type=\"email\n```  \n\n\n\n리액트 프로젝트에서는 React Router와 같은 라우팅 라이브러리를 사용하여 SPA 내에서 다른 페이지 간의 이동을 처리할 수 있습니다. 또한 Redux나 MobX와 같은 상태 관리 라이브러리를 사용하고 API를 사용하여 SPA 내에서 데이터를 동적으로 가져와 표시할 수도 있습니다. 이러한 도구들을 사용하면 강력하고 반응이 뛰어난 SPA를 만들어 부드러운 사용자 경험을 제공할 수 있습니다.\n\n# 이 게시물이 마음에 드셨나요? 언제든지 채팅해 주세요! :)","ogImage":{"url":"/assets/img/2024-05-12-CreatingaSingle-PageAppSPAinReactusingReactRouter_0.png"},"coverImage":"/assets/img/2024-05-12-CreatingaSingle-PageAppSPAinReactusingReactRouter_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>React 및 Typescript를 사용한 흐름 예제와 일부 패키지</h2>\n<p>단일 페이지 어플리케이션(SPA)은 단일 HTML 페이지를로드하고 사용자가 애플리케이션과 상호 작용할 때 콘텐츠를 동적으로 업데이트하는 웹 어플리케이션입니다.</p>\n<p>최근에 React 코스를 마쳤는데 React Router를 사용하여 SPA를 만들어야 하는 React 애플리케이션을 작업해야 했습니다. 작업 중이던 애플리케이션은 단일 페이지 애플리케이션이었으며 목표는 여러 뷰를 가지는 것이었습니다. 새로운 뷰로 이동할 때 페이지를 다시로드하는 대신, 현재 URL에 기반하여 적합한 컴포넌트를 동적으로 렌더링하기 위해 React Router를 설치했습니다. 따라서 다양한 경로를 정의하고 각 경로는 적절한 경로와 렌더링할 컴포넌트가 지정된 Route 컴포넌트를 사용하여 정의되었습니다.</p>\n<p>React Router에서 정말 감사한 점 중 하나는 다른 뷰 사이를 탐색하는 것이 얼마나 쉬웠는지입니다. Link 컴포넌트를 사용하여 다른 뷰 간의 링크를 만들 수 있었으며 React Router가 URL을 업데이트하고 적절한 컴포넌트를 렌더링하는 데 처리했습니다.</p>\n<p>React Router를 사용하면 여러 뷰가 있는 복잡한 싱글 페이지 애플리케이션을 쉽게 만들 수 있다는 것을 발견했어요. 현재 URL에 기반하여 동적으로 컴포넌트를 렌더링하고 뷰 간의 탐색을 처리하는 것을 보는 것이 정말 좋았어요!</p>\n<p><img src=\"/assets/img/2024-05-12-CreatingaSingle-PageAppSPAinReactusingReactRouter_0.png\" alt=\"이미지\"></p>\n<h2>왜 SPA 응용 프로그램을 사용해야 할까요?</h2>\n<ul>\n<li>SPA는 페이지 새로고침을 최소화하고 빠른 로드 시간을 제공하여 사용자 경험을 개선합니다.</li>\n<li>모듈식 디자인으로 인해 유지 보수와 개발이 쉽고 전통적인 웹 애플리케이션과 비교했을 때 성능이 더 좋습니다. 필요한 리소스만을 로드하기 때문에 리소스 효율이 높아요.</li>\n<li>오프라인 이용이 가능하여 사용자 참여도를 높입니다.</li>\n<li>사용자 데이터를 보호하는 강력한 보안 기능을 갖추고 있을 수 있어요.</li>\n</ul>\n<h2>SPA가 사용되는 애플리케이션은 무엇인가요?</h2>\n<ul>\n<li>Facebook 및 Twitter와 같은 소셜 미디어 플랫폼</li>\n<li>Gmail 및 Outlook와 같은 이메일 클라이언트</li>\n<li>Trello 및 Asana와 같은 생산성 도구</li>\n<li>Netflix 및 YouTube와 같은 비디오 스트리밍 서비스</li>\n<li>Amazon 및 eBay와 같은 전자 상거래 사이트</li>\n</ul>\n<h2>React와 Typescript 및 일부 패키지를 사용하여 SPA를 만드는 방법에 대한 Flow 예제를 확인하세요.</h2>\n<ul>\n<li>create-react-app 명령을 사용하여 새 React 프로젝트를 생성합니다.</li>\n<li>React, React-DOM, React-Router-DOM, Typescript 및 Webpack과 같은 필수 종속성을 설치합니다.</li>\n<li>SPA 애플리케이션을 위한 새 컴포넌트를 만듭니다.</li>\n<li>React Router를 사용하여 SPA 애플리케이션의 라우트를 정의합니다.</li>\n<li>예를 들어 Axios를 사용하여 서버에서 데이터를 가져오기 위한 API 호출을 수행합니다.</li>\n<li>Redux 또는 React Context API를 사용하여 애플리케이션의 상태를 관리합니다.</li>\n<li>인증, 캐싱 및 오류 처리와 같은 추가 기능을 SPA 애플리케이션에 추가합니다.</li>\n<li>Webpack을 사용하여 SPA 애플리케이션을 빌드합니다.</li>\n<li>AWS, MongoDB 또는 Azure와 같은 웹 서버 또는 클라우드 플랫폼에 SPA 애플리케이션을 배포합니다.</li>\n</ul>\n<h1>이제 React Router와 TypeScript를 사용하여 4개의 컴포넌트를 사용하여 React에서 가장 기본적인 싱글 페이지 앱을 만드는 예제입니다.</h1>\n<p>우리는 create-react-app을 사용하여 React/Typescript 앱을 만듭니다:</p>\n<pre><code class=\"hljs language-js\">npx create-react-app my-app --template typescript\n</code></pre>\n<p>React Router를 설치하세요:</p>\n<pre><code class=\"hljs language-js\">npm install react-router-dom @types/react-router-dom\n</code></pre>\n<p>자, 이제 쉬운 네비게이션 메뉴와 라우팅을 만들어 봅시다. 먼저 Router 컴포넌트를 생성하고 Route 컴포넌트를 사용하여 네 가지 경로를 정의합니다. 그리고 Link 컴포넌트를 사용하여 간단한 네비게이션 메뉴를 만들어 봅니다. 간단하죠?</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserRouter</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Router</span>, <span class=\"hljs-title class_\">Link</span>, <span class=\"hljs-title class_\">Route</span>, <span class=\"hljs-title class_\">Switch</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Home</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Home'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">About</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/About'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Products</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Products'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Contact</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Contact'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">App</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Router</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/\"</span>></span>Home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Link</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/about\"</span>></span>About<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Link</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/products\"</span>></span>Products<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Link</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/contact\"</span>></span>Contact<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Link</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Switch</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">exact</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/\"</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{Home}</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/about\"</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{About}</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/products\"</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{Products}</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/contact\"</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{Contact}</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Switch</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Router</span>></span></span>\n  );\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<p>그 다음, 몇 가지 기본 구성 요소를 생성해 봅시다! 먼저 환영 메시지를 표시하는 Home을 만들어 보겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Home</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Welcome to our website!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Home</span>;\n</code></pre>\n<p>회사에 대한 정보를 표시하는 About 컴포넌트도 만들어봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">About</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>About<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Diego의 회사에 대해 더 알아보세요!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">About</span>;\n</code></pre>\n<p>제품 목록을 보여주는 AProducts 컴포넌트입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Products</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>제품<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>제품 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>제품 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>제품 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Products</span>;\n</code></pre>\n<p>마지막으로 이름과 이메일을 요청하는 양식이 있는 Contact 컴포넌트입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Contact</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">return</span> (\n    &#x3C;div>\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>문의하기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n      &#x3C;form>\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>\n          이름:\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span></span>\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span></span>\n        &#x3C;label>\n          이메일:\n          <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\n</span></span></span></code></pre>\n<p>리액트 프로젝트에서는 React Router와 같은 라우팅 라이브러리를 사용하여 SPA 내에서 다른 페이지 간의 이동을 처리할 수 있습니다. 또한 Redux나 MobX와 같은 상태 관리 라이브러리를 사용하고 API를 사용하여 SPA 내에서 데이터를 동적으로 가져와 표시할 수도 있습니다. 이러한 도구들을 사용하면 강력하고 반응이 뛰어난 SPA를 만들어 부드러운 사용자 경험을 제공할 수 있습니다.</p>\n<h1>이 게시물이 마음에 드셨나요? 언제든지 채팅해 주세요! :)</h1>\n</body>\n</html>\n"},"__N_SSG":true}