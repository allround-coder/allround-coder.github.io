{"pageProps":{"post":{"title":"SwiftUI에서 차트 쉽게 만드는 방법","description":"","date":"2024-07-01 20:07","slug":"2024-07-01-IntroductiontoChartsinSwiftUI","content":"\n\n![Introduction to Charts in SwiftUI](/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_0.png)\n\n사용자에게 정보를 제공할 때, 간편한 것이 더 좋습니다.\n\n특히 큰 데이터 세트를 다룰 때는 그렇습니다. 사용자 정의 뷰, 테이블, 요약 등 다양한 옵션이 있지만, 좀 더 풍부한 경험을 제공하고자 그래픽 표현을 활용할 수 있습니다.\n\n차트를 사용하면 사용자는 제시된 데이터에 대한 이해를 확장할 수 있습니다. 처음 봤을 때, 사용자는 데이터를 더 잘 파악할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n만약 앱의 참여를 높이고 싶다면, 차트를 활용하는 방법에 대한 빠르고 쉽게 따라할 수 있는 가이드를 보여드릴게요.\n\n![차트](https://miro.medium.com/v2/resize:fit:592/1*7d3jOjvtUsl06TJrvp3q8w.gif)\n\n# 기본 사항\n\n차트를 만들 때는 차트 요소들을 조합하여 만듭니다. 이러한 요소들은 ChartContent 프로토콜을 준수해야 하며, 차트 범위 내에서 그려질 수 있는 유형을 나타내야 합니다.\n\n<div class=\"content-ad\"></div>\n\n차트를 만들려면 init(content:) 메서드를 사용합니다. ViewBuilder 클로저에서 필요한 모든 시각적 요소를 추가합니다.\n\n```js\nstruct ChartView: View {\n  var body: some View {\n    ChartView {\n      // 차트 요소\n    }\n  }\n}\n```\n\n## 알겠어요, 그런데 어떤 요소들을 추가할 수 있나요?\n\nCharts framework에는 Marks라고 불리는 사용 준비된 ChartContent 세트가 있습니다. Mark는 데이터를 표현하는 그래픽 요소로 볼 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_1.png)\n\n## 차트에서 3가지 종류의 데이터를 사용할 수 있습니다.\n\n- 양적 데이터: Int, Double, Float와 같은 수치 값.\n- 명목 데이터: 이산적인 범주 또는 그룹.\n- 시간적 데이터: 시점.\n\n사용하는 데이터 유형에 따라 차트 UI를 조작하는 데 적용할 수 있는 구성 요소가 달라집니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 코드를 보여주겠어요 🤓\n\n우리의 데모에서는 사용자가 latte, cappuccino, cortado, 그리고 flat white 유형에 대해 시간에 따라 소비한 커피의 수를 나타내고 싶어해요.\n\n그래서 간단한 막대 차트를 만들어 총 커피 수를 보여줄까요?\n\n```js\nstruct CoffeeData: Identifiable {\n  typealias CoffeeDetails = (type: Coffee, amount: Int)\n  let id = UUID()\n  let date: Date\n  let details: [CoffeeDetails]\n  \n  static func mockData() -> [CoffeeData] { ... }\n}\n\nstruct DemoChart: View {\n  @State private var coffeeData = CoffeeData.mockData()\n  \n  var body: some View {\n    Chart {\n      ForEach(coffeeData, id: \\.id) { coffeeInfo in\n        BarMark(\n          x: .value(\"Date\", coffeeInfo.date),\n          y: .value(\"Coffee\", totalCoffees(in: coffeeInfo.details))\n        )\n      }\n    }\n    .frame(height: 300)\n    .padding()\n  }\n  \n  func totalCoffees(in details: [CoffeeData.CoffeeDetails]) -> Int {\n    return details.map({$0.amount}).reduce(0, +)\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n\n![Chart](/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_2.png)\n\n## 차트 사용자 정의하기\n\n커피 유형별 데이터를 구분하려면 CoffeeDetails를 추가 반복하고 foregroundStyle(by:) 수정자를 사용하여 정보를 그룹화해야 합니다.\n\n```swift\nstruct DemoChart: View {\n  @State private var coffeeData = CoffeeData.mockData()\n    \n  var body: some View {\n    Chart {\n      ForEach(coffeeData, id: \\.id) { coffeeInfo in\n        ForEach(coffeeInfo.details, id: \\.type) { coffeeDetails in\n          BarMark(\n              x: .value(\"Date\", coffeeInfo.date),\n              y: .value(\"Coffee\", coffeeDetails.amount)\n          )\n          .foregroundStyle(by: .value(\"Coffee Type\", coffeeDetails.type))\n        }\n      }\n    }\n    .frame(height: 300)\n    .padding()\n  }\n}\n```\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_3.png\" />\n\n이 작은 변화로 데이터를 그룹화했습니다. 그러나 이 유형의 차트는 주로 특정 값의 진행 상황을 보여줄 때 사용됩니다.\n\n우리의 경우, 각 커피 종류에 대해 한 막대 막대가 필요하기 때문에 각 X-값(즉, 월)에 대해 4개의 막대(라떼/카푸치노/코르타도/플랫화이트)가 필요합니다. 이를 위해 두 가지 변경 사항이 필요합니다:\n\n- X-축 값에서 unit 옵션을 사용하여 월별로 값을 그룹화하려고 한다는 것을 표시합니다.\n- 실제로 그룹화된 막대를 만들기 위해 position(by:axis:span:) 수정자를 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n```swift\nstruct DemoChart: View {\n  @State private var coffeeData = CoffeeData.mockData()\n    \n  var body: some View {\n    Chart {\n      ForEach(coffeeData, id: \\.id) { coffeeInfo in\n        ForEach(coffeeInfo.details, id: \\.type) { coffeeDetails in\n          BarMark(\n              x: .value(\"날짜\", coffeeInfo.date, unit: .month),\n              y: .value(\"커피 양\", coffeeDetails.amount)\n          )\n          .foregroundStyle(by: .value(\"커피 종류\", coffeeDetails.type))\n          .position(by: .value(\"커피 종류\", coffeeDetails.type))\n        }\n      }\n    }\n    .frame(height: 300)\n    .padding()\n  }\n}\n```\n\n<img src=\"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_4.png\" />\n\n# 차트를 우리의 요구에 맞게 계속 수정할 수 있습니다\n\n## 사용자 정의 막대 색상\n\n\n<div class=\"content-ad\"></div>\n\nchartForegroundStyleScale(_:) 수정자를 사용하세요. 그룹화에 사용하는 모든 옵션에 값을 지정해야 합니다. 우리 경우에는 Latte, Cappuccino, Cortado, FlatWhite을 사용하면 됩니다.\n\n## 스케일 변경\n\n차트 표식을 더 크거나 작게 만들기 위해 축에 표시되는 값들을 제어하려면 chartYScale(domain:type:) 및 chartXScale(domain:type:) 수정자를 사용할 수 있습니다. 도메인은 양적 및 날짜 유형에는 닫힌 범위(예: 0에서 15까지)이거나 이산 유형에는 값들의 배열이 될 수 있습니다.\n\n## 축 레이블 구성\n\n<div class=\"content-ad\"></div>\n\n우리 경우에는 X 축에 월과 연도를 함께 표시하는 것이 좋을 것 같아요, 예를 들면, 2023년 8월처럼요. chartXAxis(content:) 수정자를 사용하면 이를 할 수 있어요.\n\n## 주석 추가\n\n가끔은 차트의 표식에 추가 정보를 포함하여 더 읽기 쉽게 만들어야 할 때가 있어요. annotation(position:alignment:spacing:content)을 사용하면 어떤 보기든 표식과 함께 배치할 수 있어요.\n\n```js\nstruct DemoChart: View {\n  @State private var coffeeData = CoffeeData.mockData()\n  \n  var body: some View {\n    Chart {\n      ForEach(coffeeData, id: \\.id) { coffeeInfo in\n        ForEach(coffeeInfo.details, id: \\.type) { coffeeDetails in\n          BarMark(\n            x: .value(\"날짜\", coffeeInfo.date, unit: .month),\n            y: .value(\"커피\", coffeeDetails.amount)\n          )\n          .annotation(position: .위, alignment: .가운데) {\n            Text(\"\\(coffeeDetails.amount)\")\n          }\n          .foregroundStyle(by: .value(\"커피 종류\", coffeeDetails.type))\n          .position(by: .value(\"커피 종류\", coffeeDetails.type))\n          .cornerRadius(12)\n        }\n      }\n    }\n    .chartForegroundStyleScale([\n      Coffee.latte: Color.accentColor,\n      Coffee.cappuccino: Color.accentColor.opacity(0.7),\n      Coffee.cortado: Color.accentColor.opacity(0.5),\n      Coffee.flatwhite: Color.accentColor.opacity(0.3),\n    ])\n    .chartXAxis {\n      AxisMarks(values: .stride(by: .month, count: 1)) { _ in\n        AxisValueLabel(format: .dateTime.month(.abbreviated).year(.twoDigits), centered: true)\n      }\n    }\n    .chartScrollableAxes(.수평)\n    .chartYScale(domain: 0 ... 15)\n    .frame(height: 300)\n    .padding()\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_5.png\" />\n\n# Composing & Interactivity\n\n내가 차트를 만들 때 다른 ChartComponent를 추가해서 만든다고 했던 걸 기억하는가? 이러한 구성 요소들은 꼭 동일한 유형이어야 하는 것은 아니다.\n\n<img src=\"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_6.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n라인마크와 에어리아마크를 결합하여 이 UI를 구현할 수 있습니다. \n\n```js\nstruct OverallData: Identifiable {\n    let id = UUID()\n    let date: Date\n    let coffee: Int\n    \n    static func mockData() -> [OverallData] {\n        \n        return [\n            .init(date: Date(year: 2023, month: 08), coffee: 12),\n            .init(date: Date(year: 2023, month: 09), coffee: 15),\n            .init(date: Date(year: 2023, month: 10), coffee: 8),\n            .init(date: Date(year: 2023, month: 11), coffee: 18),\n            .init(date: Date(year: 2023, month: 12), coffee: 14),\n            .init(date: Date(year: 2024, month: 01), coffee: 22),\n        ]\n    }\n}\n\nstruct DemoChart: View {\n  @State private var overallData = OverallData.mockData()\n\n  private var areaBackground: Gradient {\n    return Gradient(colors: [Color.accentColor, Color.accentColor.opacity(0.1)])\n  }\n\n  var body: some View {\n    Chart(overallData) {\n      LineMark(\n        x: .value(\"월\", $0.date, unit: .month),\n        y: .value(\"양\", $0.coffee)\n      )\n      .symbol(.circle)\n      .interpolationMethod(.catmullRom)\n      \n      AreaMark(\n        x: .value(\"월\", $0.date, unit: .month),\n        y: .value(\"양\", $0.coffee)\n      )\n      .interpolationMethod(.catmullRom)\n      .foregroundStyle(areaBackground)\n    }\n    .chartXAxis {\n      AxisMarks(values: .stride(by: .month, count: 1)) { _ in\n        AxisValueLabel(format: .dateTime.month(.abbreviated).year(.twoDigits), centered: true)\n      }\n    }\n    .chartYScale(domain: 0 ... 30)\n    .frame(height: 300)\n    .padding()\n  }\n}\n```\n\n이 조합을 계속해서 룰마크를 추가하고 사용자가 특정 지점을 선택하여 값을 볼 수 있는 사용자 정의 뷰를 주석으로 추가할 수 있습니다.\n\n<img src=\"https://miro.medium.com/v2/resize:fit:592/1*J24NHU32eh38kMeASpLt1A.gif\" />\n\n<div class=\"content-ad\"></div>\n\n```swift\nstruct DemoChart: View {\n  @Environment(\\.calendar) var calendar\n  @State private var coffeeData = CoffeeData.mockData()\n  @State private var overallData = OverallData.mockData()\n  @State private var chartSelection: Date?\n    \n  private var areaBackground: Gradient {\n      return Gradient(colors: [Color.accentColor, Color.accentColor.opacity(0.1)])\n  }\n\n  var body: some View {\n    Chart(overallData) {\n      LineMark(\n        x: .value(\"Month\", $0.date, unit: .month),\n        y: .value(\"Amount\", $0.coffee)\n      )\n      .symbol(.circle)\n      .interpolationMethod(.catmullRom)\n      \n      if let chartSelection {\n        RuleMark(x: .value(\"Month\", chartSelection, unit: .month))\n          .foregroundStyle(.gray.opacity(0.5))\n          .annotation(\n            position: .top,\n            overflowResolution: .init(x: .fit, y: .disabled)\n          ) {\n            ZStack {\n              Text(\"\\(getCoffee(for: chartSelection)) coffees\")\n            }\n            .padding()\n            .background {\n              RoundedRectangle(cornerRadius: 4)\n                .foregroundStyle(Color.accentColor.opacity(0.2))\n            }\n          }\n      }\n      \n      AreaMark(\n        x: .value(\"Month\", $0.date, unit: .month),\n        y: .value(\"Amount\", $0.coffee)\n      )\n      .interpolationMethod(.catmullRom)\n      .foregroundStyle(areaBackground)\n    }\n    .chartXAxis {\n      AxisMarks(values: .stride(by: .month, count: 1)) { _ in\n          AxisValueLabel(format: .dateTime.month(.abbreviated).year(.twoDigits), centered: true)\n      }\n    }\n    .chartYScale(domain: 0 ... 30)\n    .frame(height: 300)\n    .padding()\n    .chartXSelection(value: $chartSelection)\n  }\n}\n```\n\n# 배울 점\n\n- 그래픽 요소를 고려하기 전에 사용자에게 보여주고 싶은 내용을 고려해보세요. 어떤 정보를 전달하고 싶으신가요?\n- 데이터 모델링에 집중하세요. 데이터를 어떻게 모델링하느냐가 차트를 작업하기 쉽게 할 것입니다.\n- 그룹화된 정보를 제공하여 사용자에게 차트에서 발견할 데이터의 일부를 미리 보여줍니다.\n- 차트 작업을 시작하는 데 도움이 되는 몇 가지 기본 사항을 보여드렸습니다. 그러나 차트를 더욱 효과적으로 만들기 위해 사용할 수 있는 많은 구성 및 조정 사항이 있습니다. 공식 Apple 차트 문서를 자세히 살펴보고 WWDC 세션을 시청하는 것을 추천드립니다.\n\n질문이 있으신가요? 언제든지 메시지 남겨주세요! 🙂\n\n\n<div class=\"content-ad\"></div>\n\n- 🤓 iOS 개발 팁과 통찰을 정기적으로 공유하는 X에서 저와 함께하세요\n- 🚀 제 GitHub에서 내 예제 프로젝트들을 확인해보세요","ogImage":{"url":"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_0.png"},"coverImage":"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_0.png\" alt=\"Introduction to Charts in SwiftUI\"></p>\n<p>사용자에게 정보를 제공할 때, 간편한 것이 더 좋습니다.</p>\n<p>특히 큰 데이터 세트를 다룰 때는 그렇습니다. 사용자 정의 뷰, 테이블, 요약 등 다양한 옵션이 있지만, 좀 더 풍부한 경험을 제공하고자 그래픽 표현을 활용할 수 있습니다.</p>\n<p>차트를 사용하면 사용자는 제시된 데이터에 대한 이해를 확장할 수 있습니다. 처음 봤을 때, 사용자는 데이터를 더 잘 파악할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>만약 앱의 참여를 높이고 싶다면, 차트를 활용하는 방법에 대한 빠르고 쉽게 따라할 수 있는 가이드를 보여드릴게요.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:592/1*7d3jOjvtUsl06TJrvp3q8w.gif\" alt=\"차트\"></p>\n<h1>기본 사항</h1>\n<p>차트를 만들 때는 차트 요소들을 조합하여 만듭니다. 이러한 요소들은 ChartContent 프로토콜을 준수해야 하며, 차트 범위 내에서 그려질 수 있는 유형을 나타내야 합니다.</p>\n<div class=\"content-ad\"></div>\n<p>차트를 만들려면 init(content:) 메서드를 사용합니다. ViewBuilder 클로저에서 필요한 모든 시각적 요소를 추가합니다.</p>\n<pre><code class=\"hljs language-js\">struct <span class=\"hljs-title class_\">ChartView</span>: <span class=\"hljs-title class_\">View</span> {\n  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-title class_\">ChartView</span> {\n      <span class=\"hljs-comment\">// 차트 요소</span>\n    }\n  }\n}\n</code></pre>\n<h2>알겠어요, 그런데 어떤 요소들을 추가할 수 있나요?</h2>\n<p>Charts framework에는 Marks라고 불리는 사용 준비된 ChartContent 세트가 있습니다. Mark는 데이터를 표현하는 그래픽 요소로 볼 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_1.png\" alt=\"image\"></p>\n<h2>차트에서 3가지 종류의 데이터를 사용할 수 있습니다.</h2>\n<ul>\n<li>양적 데이터: Int, Double, Float와 같은 수치 값.</li>\n<li>명목 데이터: 이산적인 범주 또는 그룹.</li>\n<li>시간적 데이터: 시점.</li>\n</ul>\n<p>사용하는 데이터 유형에 따라 차트 UI를 조작하는 데 적용할 수 있는 구성 요소가 달라집니다.</p>\n<div class=\"content-ad\"></div>\n<h1>코드를 보여주겠어요 🤓</h1>\n<p>우리의 데모에서는 사용자가 latte, cappuccino, cortado, 그리고 flat white 유형에 대해 시간에 따라 소비한 커피의 수를 나타내고 싶어해요.</p>\n<p>그래서 간단한 막대 차트를 만들어 총 커피 수를 보여줄까요?</p>\n<pre><code class=\"hljs language-js\">struct <span class=\"hljs-title class_\">CoffeeData</span>: <span class=\"hljs-title class_\">Identifiable</span> {\n  typealias <span class=\"hljs-title class_\">CoffeeDetails</span> = (<span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Coffee</span>, <span class=\"hljs-attr\">amount</span>: <span class=\"hljs-title class_\">Int</span>)\n  <span class=\"hljs-keyword\">let</span> id = <span class=\"hljs-title function_\">UUID</span>()\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">date</span>: <span class=\"hljs-title class_\">Date</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">details</span>: [<span class=\"hljs-title class_\">CoffeeDetails</span>]\n  \n  <span class=\"hljs-keyword\">static</span> func <span class=\"hljs-title function_\">mockData</span>() -> [<span class=\"hljs-title class_\">CoffeeData</span>] { ... }\n}\n\nstruct <span class=\"hljs-title class_\">DemoChart</span>: <span class=\"hljs-title class_\">View</span> {\n  @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> coffeeData = <span class=\"hljs-title class_\">CoffeeData</span>.<span class=\"hljs-title function_\">mockData</span>()\n  \n  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-title class_\">Chart</span> {\n      <span class=\"hljs-title class_\">ForEach</span>(coffeeData, <span class=\"hljs-attr\">id</span>: \\.<span class=\"hljs-property\">id</span>) { coffeeInfo <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-title class_\">BarMark</span>(\n          <span class=\"hljs-attr\">x</span>: .<span class=\"hljs-title function_\">value</span>(<span class=\"hljs-string\">\"Date\"</span>, coffeeInfo.<span class=\"hljs-property\">date</span>),\n          <span class=\"hljs-attr\">y</span>: .<span class=\"hljs-title function_\">value</span>(<span class=\"hljs-string\">\"Coffee\"</span>, <span class=\"hljs-title function_\">totalCoffees</span>(<span class=\"hljs-attr\">in</span>: coffeeInfo.<span class=\"hljs-property\">details</span>))\n        )\n      }\n    }\n    .<span class=\"hljs-title function_\">frame</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">300</span>)\n    .<span class=\"hljs-title function_\">padding</span>()\n  }\n  \n  func <span class=\"hljs-title function_\">totalCoffees</span>(<span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">details</span>: [<span class=\"hljs-title class_\">CoffeeData</span>.<span class=\"hljs-property\">CoffeeDetails</span>]) -> <span class=\"hljs-title class_\">Int</span> {\n    <span class=\"hljs-keyword\">return</span> details.<span class=\"hljs-title function_\">map</span>({$0.<span class=\"hljs-property\">amount</span>}).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-number\">0</span>, +)\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_2.png\" alt=\"Chart\"></p>\n<h2>차트 사용자 정의하기</h2>\n<p>커피 유형별 데이터를 구분하려면 CoffeeDetails를 추가 반복하고 foregroundStyle(by:) 수정자를 사용하여 정보를 그룹화해야 합니다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">DemoChart</span>: <span class=\"hljs-title class_\">View</span> {\n  <span class=\"hljs-meta\">@State</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> coffeeData <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">CoffeeData</span>.mockData()\n    \n  <span class=\"hljs-keyword\">var</span> body: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n    <span class=\"hljs-type\">Chart</span> {\n      <span class=\"hljs-type\">ForEach</span>(coffeeData, id: \\.id) { coffeeInfo <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-type\">ForEach</span>(coffeeInfo.details, id: \\.type) { coffeeDetails <span class=\"hljs-keyword\">in</span>\n          <span class=\"hljs-type\">BarMark</span>(\n              x: .value(<span class=\"hljs-string\">\"Date\"</span>, coffeeInfo.date),\n              y: .value(<span class=\"hljs-string\">\"Coffee\"</span>, coffeeDetails.amount)\n          )\n          .foregroundStyle(by: .value(<span class=\"hljs-string\">\"Coffee Type\"</span>, coffeeDetails.type))\n        }\n      }\n    }\n    .frame(height: <span class=\"hljs-number\">300</span>)\n    .padding()\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_3.png\">\n<p>이 작은 변화로 데이터를 그룹화했습니다. 그러나 이 유형의 차트는 주로 특정 값의 진행 상황을 보여줄 때 사용됩니다.</p>\n<p>우리의 경우, 각 커피 종류에 대해 한 막대 막대가 필요하기 때문에 각 X-값(즉, 월)에 대해 4개의 막대(라떼/카푸치노/코르타도/플랫화이트)가 필요합니다. 이를 위해 두 가지 변경 사항이 필요합니다:</p>\n<ul>\n<li>X-축 값에서 unit 옵션을 사용하여 월별로 값을 그룹화하려고 한다는 것을 표시합니다.</li>\n<li>실제로 그룹화된 막대를 만들기 위해 position(by:axis:span:) 수정자를 사용합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">DemoChart</span>: <span class=\"hljs-title class_\">View</span> {\n  <span class=\"hljs-meta\">@State</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> coffeeData <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">CoffeeData</span>.mockData()\n    \n  <span class=\"hljs-keyword\">var</span> body: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n    <span class=\"hljs-type\">Chart</span> {\n      <span class=\"hljs-type\">ForEach</span>(coffeeData, id: \\.id) { coffeeInfo <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-type\">ForEach</span>(coffeeInfo.details, id: \\.type) { coffeeDetails <span class=\"hljs-keyword\">in</span>\n          <span class=\"hljs-type\">BarMark</span>(\n              x: .value(<span class=\"hljs-string\">\"날짜\"</span>, coffeeInfo.date, unit: .month),\n              y: .value(<span class=\"hljs-string\">\"커피 양\"</span>, coffeeDetails.amount)\n          )\n          .foregroundStyle(by: .value(<span class=\"hljs-string\">\"커피 종류\"</span>, coffeeDetails.type))\n          .position(by: .value(<span class=\"hljs-string\">\"커피 종류\"</span>, coffeeDetails.type))\n        }\n      }\n    }\n    .frame(height: <span class=\"hljs-number\">300</span>)\n    .padding()\n  }\n}\n</code></pre>\n<img src=\"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_4.png\">\n<h1>차트를 우리의 요구에 맞게 계속 수정할 수 있습니다</h1>\n<h2>사용자 정의 막대 색상</h2>\n<div class=\"content-ad\"></div>\n<p>chartForegroundStyleScale(_:) 수정자를 사용하세요. 그룹화에 사용하는 모든 옵션에 값을 지정해야 합니다. 우리 경우에는 Latte, Cappuccino, Cortado, FlatWhite을 사용하면 됩니다.</p>\n<h2>스케일 변경</h2>\n<p>차트 표식을 더 크거나 작게 만들기 위해 축에 표시되는 값들을 제어하려면 chartYScale(domain:type:) 및 chartXScale(domain:type:) 수정자를 사용할 수 있습니다. 도메인은 양적 및 날짜 유형에는 닫힌 범위(예: 0에서 15까지)이거나 이산 유형에는 값들의 배열이 될 수 있습니다.</p>\n<h2>축 레이블 구성</h2>\n<div class=\"content-ad\"></div>\n<p>우리 경우에는 X 축에 월과 연도를 함께 표시하는 것이 좋을 것 같아요, 예를 들면, 2023년 8월처럼요. chartXAxis(content:) 수정자를 사용하면 이를 할 수 있어요.</p>\n<h2>주석 추가</h2>\n<p>가끔은 차트의 표식에 추가 정보를 포함하여 더 읽기 쉽게 만들어야 할 때가 있어요. annotation(position:alignment:spacing:content)을 사용하면 어떤 보기든 표식과 함께 배치할 수 있어요.</p>\n<pre><code class=\"hljs language-js\">struct <span class=\"hljs-title class_\">DemoChart</span>: <span class=\"hljs-title class_\">View</span> {\n  @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> coffeeData = <span class=\"hljs-title class_\">CoffeeData</span>.<span class=\"hljs-title function_\">mockData</span>()\n  \n  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-title class_\">Chart</span> {\n      <span class=\"hljs-title class_\">ForEach</span>(coffeeData, <span class=\"hljs-attr\">id</span>: \\.<span class=\"hljs-property\">id</span>) { coffeeInfo <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-title class_\">ForEach</span>(coffeeInfo.<span class=\"hljs-property\">details</span>, <span class=\"hljs-attr\">id</span>: \\.<span class=\"hljs-property\">type</span>) { coffeeDetails <span class=\"hljs-keyword\">in</span>\n          <span class=\"hljs-title class_\">BarMark</span>(\n            <span class=\"hljs-attr\">x</span>: .<span class=\"hljs-title function_\">value</span>(<span class=\"hljs-string\">\"날짜\"</span>, coffeeInfo.<span class=\"hljs-property\">date</span>, <span class=\"hljs-attr\">unit</span>: .<span class=\"hljs-property\">month</span>),\n            <span class=\"hljs-attr\">y</span>: .<span class=\"hljs-title function_\">value</span>(<span class=\"hljs-string\">\"커피\"</span>, coffeeDetails.<span class=\"hljs-property\">amount</span>)\n          )\n          .<span class=\"hljs-title function_\">annotation</span>(<span class=\"hljs-params\">position: .위, alignment: .가운데</span>) {\n            <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"\\(coffeeDetails.amount)\"</span>)\n          }\n          .<span class=\"hljs-title function_\">foregroundStyle</span>(<span class=\"hljs-attr\">by</span>: .<span class=\"hljs-title function_\">value</span>(<span class=\"hljs-string\">\"커피 종류\"</span>, coffeeDetails.<span class=\"hljs-property\">type</span>))\n          .<span class=\"hljs-title function_\">position</span>(<span class=\"hljs-attr\">by</span>: .<span class=\"hljs-title function_\">value</span>(<span class=\"hljs-string\">\"커피 종류\"</span>, coffeeDetails.<span class=\"hljs-property\">type</span>))\n          .<span class=\"hljs-title function_\">cornerRadius</span>(<span class=\"hljs-number\">12</span>)\n        }\n      }\n    }\n    .<span class=\"hljs-title function_\">chartForegroundStyleScale</span>([\n      <span class=\"hljs-title class_\">Coffee</span>.<span class=\"hljs-property\">latte</span>: <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">accentColor</span>,\n      <span class=\"hljs-title class_\">Coffee</span>.<span class=\"hljs-property\">cappuccino</span>: <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">accentColor</span>.<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">0.7</span>),\n      <span class=\"hljs-title class_\">Coffee</span>.<span class=\"hljs-property\">cortado</span>: <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">accentColor</span>.<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">0.5</span>),\n      <span class=\"hljs-title class_\">Coffee</span>.<span class=\"hljs-property\">flatwhite</span>: <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">accentColor</span>.<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">0.3</span>),\n    ])\n    .<span class=\"hljs-property\">chartXAxis</span> {\n      <span class=\"hljs-title class_\">AxisMarks</span>(<span class=\"hljs-attr\">values</span>: .<span class=\"hljs-title function_\">stride</span>(<span class=\"hljs-attr\">by</span>: .<span class=\"hljs-property\">month</span>, <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>)) { _ <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-title class_\">AxisValueLabel</span>(<span class=\"hljs-attr\">format</span>: .<span class=\"hljs-property\">dateTime</span>.<span class=\"hljs-title function_\">month</span>(.<span class=\"hljs-property\">abbreviated</span>).<span class=\"hljs-title function_\">year</span>(.<span class=\"hljs-property\">twoDigits</span>), <span class=\"hljs-attr\">centered</span>: <span class=\"hljs-literal\">true</span>)\n      }\n    }\n    .<span class=\"hljs-title function_\">chartScrollableAxes</span>(.수평)\n    .<span class=\"hljs-title function_\">chartYScale</span>(<span class=\"hljs-attr\">domain</span>: <span class=\"hljs-number\">0</span> ... <span class=\"hljs-number\">15</span>)\n    .<span class=\"hljs-title function_\">frame</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">300</span>)\n    .<span class=\"hljs-title function_\">padding</span>()\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_5.png\">\n<h1>Composing &#x26; Interactivity</h1>\n<p>내가 차트를 만들 때 다른 ChartComponent를 추가해서 만든다고 했던 걸 기억하는가? 이러한 구성 요소들은 꼭 동일한 유형이어야 하는 것은 아니다.</p>\n<img src=\"/assets/img/2024-07-01-IntroductiontoChartsinSwiftUI_6.png\">\n<div class=\"content-ad\"></div>\n<p>라인마크와 에어리아마크를 결합하여 이 UI를 구현할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">struct <span class=\"hljs-title class_\">OverallData</span>: <span class=\"hljs-title class_\">Identifiable</span> {\n    <span class=\"hljs-keyword\">let</span> id = <span class=\"hljs-title function_\">UUID</span>()\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">date</span>: <span class=\"hljs-title class_\">Date</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">coffee</span>: <span class=\"hljs-title class_\">Int</span>\n    \n    <span class=\"hljs-keyword\">static</span> func <span class=\"hljs-title function_\">mockData</span>() -> [<span class=\"hljs-title class_\">OverallData</span>] {\n        \n        <span class=\"hljs-keyword\">return</span> [\n            .<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-attr\">date</span>: <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-attr\">year</span>: <span class=\"hljs-number\">2023</span>, <span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">08</span>), <span class=\"hljs-attr\">coffee</span>: <span class=\"hljs-number\">12</span>),\n            .<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-attr\">date</span>: <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-attr\">year</span>: <span class=\"hljs-number\">2023</span>, <span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">09</span>), <span class=\"hljs-attr\">coffee</span>: <span class=\"hljs-number\">15</span>),\n            .<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-attr\">date</span>: <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-attr\">year</span>: <span class=\"hljs-number\">2023</span>, <span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">10</span>), <span class=\"hljs-attr\">coffee</span>: <span class=\"hljs-number\">8</span>),\n            .<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-attr\">date</span>: <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-attr\">year</span>: <span class=\"hljs-number\">2023</span>, <span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">11</span>), <span class=\"hljs-attr\">coffee</span>: <span class=\"hljs-number\">18</span>),\n            .<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-attr\">date</span>: <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-attr\">year</span>: <span class=\"hljs-number\">2023</span>, <span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">12</span>), <span class=\"hljs-attr\">coffee</span>: <span class=\"hljs-number\">14</span>),\n            .<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-attr\">date</span>: <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-attr\">year</span>: <span class=\"hljs-number\">2024</span>, <span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">01</span>), <span class=\"hljs-attr\">coffee</span>: <span class=\"hljs-number\">22</span>),\n        ]\n    }\n}\n\nstruct <span class=\"hljs-title class_\">DemoChart</span>: <span class=\"hljs-title class_\">View</span> {\n  @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> overallData = <span class=\"hljs-title class_\">OverallData</span>.<span class=\"hljs-title function_\">mockData</span>()\n\n  private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">areaBackground</span>: <span class=\"hljs-title class_\">Gradient</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Gradient</span>(<span class=\"hljs-attr\">colors</span>: [<span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">accentColor</span>, <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">accentColor</span>.<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">0.1</span>)])\n  }\n\n  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-title class_\">Chart</span>(overallData) {\n      <span class=\"hljs-title class_\">LineMark</span>(\n        <span class=\"hljs-attr\">x</span>: .<span class=\"hljs-title function_\">value</span>(<span class=\"hljs-string\">\"월\"</span>, $0.<span class=\"hljs-property\">date</span>, <span class=\"hljs-attr\">unit</span>: .<span class=\"hljs-property\">month</span>),\n        <span class=\"hljs-attr\">y</span>: .<span class=\"hljs-title function_\">value</span>(<span class=\"hljs-string\">\"양\"</span>, $0.<span class=\"hljs-property\">coffee</span>)\n      )\n      .<span class=\"hljs-title function_\">symbol</span>(.<span class=\"hljs-property\">circle</span>)\n      .<span class=\"hljs-title function_\">interpolationMethod</span>(.<span class=\"hljs-property\">catmullRom</span>)\n      \n      <span class=\"hljs-title class_\">AreaMark</span>(\n        <span class=\"hljs-attr\">x</span>: .<span class=\"hljs-title function_\">value</span>(<span class=\"hljs-string\">\"월\"</span>, $0.<span class=\"hljs-property\">date</span>, <span class=\"hljs-attr\">unit</span>: .<span class=\"hljs-property\">month</span>),\n        <span class=\"hljs-attr\">y</span>: .<span class=\"hljs-title function_\">value</span>(<span class=\"hljs-string\">\"양\"</span>, $0.<span class=\"hljs-property\">coffee</span>)\n      )\n      .<span class=\"hljs-title function_\">interpolationMethod</span>(.<span class=\"hljs-property\">catmullRom</span>)\n      .<span class=\"hljs-title function_\">foregroundStyle</span>(areaBackground)\n    }\n    .<span class=\"hljs-property\">chartXAxis</span> {\n      <span class=\"hljs-title class_\">AxisMarks</span>(<span class=\"hljs-attr\">values</span>: .<span class=\"hljs-title function_\">stride</span>(<span class=\"hljs-attr\">by</span>: .<span class=\"hljs-property\">month</span>, <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>)) { _ <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-title class_\">AxisValueLabel</span>(<span class=\"hljs-attr\">format</span>: .<span class=\"hljs-property\">dateTime</span>.<span class=\"hljs-title function_\">month</span>(.<span class=\"hljs-property\">abbreviated</span>).<span class=\"hljs-title function_\">year</span>(.<span class=\"hljs-property\">twoDigits</span>), <span class=\"hljs-attr\">centered</span>: <span class=\"hljs-literal\">true</span>)\n      }\n    }\n    .<span class=\"hljs-title function_\">chartYScale</span>(<span class=\"hljs-attr\">domain</span>: <span class=\"hljs-number\">0</span> ... <span class=\"hljs-number\">30</span>)\n    .<span class=\"hljs-title function_\">frame</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">300</span>)\n    .<span class=\"hljs-title function_\">padding</span>()\n  }\n}\n</code></pre>\n<p>이 조합을 계속해서 룰마크를 추가하고 사용자가 특정 지점을 선택하여 값을 볼 수 있는 사용자 정의 뷰를 주석으로 추가할 수 있습니다.</p>\n<img src=\"https://miro.medium.com/v2/resize:fit:592/1*J24NHU32eh38kMeASpLt1A.gif\">\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">DemoChart</span>: <span class=\"hljs-title class_\">View</span> {\n  <span class=\"hljs-meta\">@Environment</span>(\\.calendar) <span class=\"hljs-keyword\">var</span> calendar\n  <span class=\"hljs-meta\">@State</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> coffeeData <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">CoffeeData</span>.mockData()\n  <span class=\"hljs-meta\">@State</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> overallData <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">OverallData</span>.mockData()\n  <span class=\"hljs-meta\">@State</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> chartSelection: <span class=\"hljs-type\">Date</span>?\n    \n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> areaBackground: <span class=\"hljs-type\">Gradient</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Gradient</span>(colors: [<span class=\"hljs-type\">Color</span>.accentColor, <span class=\"hljs-type\">Color</span>.accentColor.opacity(<span class=\"hljs-number\">0.1</span>)])\n  }\n\n  <span class=\"hljs-keyword\">var</span> body: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n    <span class=\"hljs-type\">Chart</span>(overallData) {\n      <span class=\"hljs-type\">LineMark</span>(\n        x: .value(<span class=\"hljs-string\">\"Month\"</span>, <span class=\"hljs-variable\">$0</span>.date, unit: .month),\n        y: .value(<span class=\"hljs-string\">\"Amount\"</span>, <span class=\"hljs-variable\">$0</span>.coffee)\n      )\n      .symbol(.circle)\n      .interpolationMethod(.catmullRom)\n      \n      <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> chartSelection {\n        <span class=\"hljs-type\">RuleMark</span>(x: .value(<span class=\"hljs-string\">\"Month\"</span>, chartSelection, unit: .month))\n          .foregroundStyle(.gray.opacity(<span class=\"hljs-number\">0.5</span>))\n          .annotation(\n            position: .top,\n            overflowResolution: .<span class=\"hljs-keyword\">init</span>(x: .fit, y: .disabled)\n          ) {\n            <span class=\"hljs-type\">ZStack</span> {\n              <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">\\(getCoffee(for: chartSelection))</span> coffees\"</span>)\n            }\n            .padding()\n            .background {\n              <span class=\"hljs-type\">RoundedRectangle</span>(cornerRadius: <span class=\"hljs-number\">4</span>)\n                .foregroundStyle(<span class=\"hljs-type\">Color</span>.accentColor.opacity(<span class=\"hljs-number\">0.2</span>))\n            }\n          }\n      }\n      \n      <span class=\"hljs-type\">AreaMark</span>(\n        x: .value(<span class=\"hljs-string\">\"Month\"</span>, <span class=\"hljs-variable\">$0</span>.date, unit: .month),\n        y: .value(<span class=\"hljs-string\">\"Amount\"</span>, <span class=\"hljs-variable\">$0</span>.coffee)\n      )\n      .interpolationMethod(.catmullRom)\n      .foregroundStyle(areaBackground)\n    }\n    .chartXAxis {\n      <span class=\"hljs-type\">AxisMarks</span>(values: .stride(by: .month, count: <span class=\"hljs-number\">1</span>)) { <span class=\"hljs-keyword\">_</span> <span class=\"hljs-keyword\">in</span>\n          <span class=\"hljs-type\">AxisValueLabel</span>(format: .dateTime.month(.abbreviated).year(.twoDigits), centered: <span class=\"hljs-literal\">true</span>)\n      }\n    }\n    .chartYScale(domain: <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">...</span> <span class=\"hljs-number\">30</span>)\n    .frame(height: <span class=\"hljs-number\">300</span>)\n    .padding()\n    .chartXSelection(value: <span class=\"hljs-variable\">$chartSelection</span>)\n  }\n}\n</code></pre>\n<h1>배울 점</h1>\n<ul>\n<li>그래픽 요소를 고려하기 전에 사용자에게 보여주고 싶은 내용을 고려해보세요. 어떤 정보를 전달하고 싶으신가요?</li>\n<li>데이터 모델링에 집중하세요. 데이터를 어떻게 모델링하느냐가 차트를 작업하기 쉽게 할 것입니다.</li>\n<li>그룹화된 정보를 제공하여 사용자에게 차트에서 발견할 데이터의 일부를 미리 보여줍니다.</li>\n<li>차트 작업을 시작하는 데 도움이 되는 몇 가지 기본 사항을 보여드렸습니다. 그러나 차트를 더욱 효과적으로 만들기 위해 사용할 수 있는 많은 구성 및 조정 사항이 있습니다. 공식 Apple 차트 문서를 자세히 살펴보고 WWDC 세션을 시청하는 것을 추천드립니다.</li>\n</ul>\n<p>질문이 있으신가요? 언제든지 메시지 남겨주세요! 🙂</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>🤓 iOS 개발 팁과 통찰을 정기적으로 공유하는 X에서 저와 함께하세요</li>\n<li>🚀 제 GitHub에서 내 예제 프로젝트들을 확인해보세요</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}