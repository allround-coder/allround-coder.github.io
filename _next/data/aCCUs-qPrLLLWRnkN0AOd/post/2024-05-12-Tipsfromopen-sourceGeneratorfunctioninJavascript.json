{"pageProps":{"post":{"title":"오픈 소스로부터 배운 JavaScript의 제너레이터 함수 팁","description":"","date":"2024-05-12 21:10","slug":"2024-05-12-Tipsfromopen-sourceGeneratorfunctioninJavascript","content":"\n\nNext.js 소스 코드를 읽다가 *로 접두사가 붙은 함수 이름을 본 적이 있어요. 제 첫 생각은 \"이거 Javascript에서 포인터인가?\" 였어요. 구글 검색을 해보니 *로 접두사가 붙은 이 함수들은 제너레이터 함수라고 불린다는 걸 알았어요. 지금까지는 Javascript에서 제너레이터 함수에 대해 알지 못했어요.\n\nNext.js 소스 코드에는 아래와 같이 클래스 내에서 정의된 제너레이터 함수가 있어요:\n\n![이미지](/assets/img/2024-05-12-Tipsfromopen-sourceGeneratorfunctioninJavascript_0.png)\n\n일반적으로 이런 제너레이터 함수를 클래스 바깥에서 정의할 때는 다음과 같은 구문을 사용해요:\n\n\n\n```js\n// 출처: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\nfunction* generator(i) {\n  yield i;\n  yield i + 10;\n  yield i + 20;\n}\n\nconst gen = generator(10);\n\nconsole.log(gen.next().value);\n// 예상 출력: 10\nconsole.log(gen.next().value);\n// 예상 출력: 20\nconsole.log(gen.next().value);\r\n```\n\n# Keys() as a generator function\n\n```js\npublic *keys(): IterableIterator<string> {\n    for (const key of Object.keys(this.headers)) {\n      const name = key.toLowerCase()\n      yield name\n    }\n  }\n```\n\n이 코드 스니펫은 Next.js 소스 코드의 header.ts에서 가져온 것입니다. \"keys() 함수가 제너레이터 함수인 이유는 무엇일까?\" 라는 질문을 내 자신에게 했습니다.\n\n\n\n저는 ChatGPT에 이 코드를 붙여 넣었더니 \"메모리 효율성\"이라는 용어를 소개해 주었어요. 잠깐만, 어떻게 그런 걸까요?\n\n아래 코드를 복사해서 브라우저에 붙여넣어 보세요.\n\n```js\nconst exampleObject = {\n  firstName: \"John\",\n  lastName: \"Doe\",\n  age: 30\n};\n\n// 제너레이터 함수를 사용하여 keys() 메서드 구현하기\nexampleObject.keys = function* () {\n  for (const key in this) {\n    yield key;\n  }\n};\n\n// 이제 exampleObject의 키를 for...of 루프를 사용하여 반복할 수 있습니다.\nfor (const key of exampleObject.keys()) {\n  console.log(key);\n}\n\n// 결과:\nfirstName\nVM247:16 lastName\nVM247:16 age\nVM247:16 keys\n```\n\n하지만 keys()를 출력하려고 하면 다음과 같은 결과가 나타납니다:\n\n\n\n<img src=\"/assets/img/2024-05-12-Tipsfromopen-sourceGeneratorfunctioninJavascript_1.png\" />\n\n한 번에 모든 키를 생성하고 배열에 저장하는 대신, 제너레이터 함수는 필요할 때 키를 즉석에서 생성합니다.\n\n# 더 많은 읽을거리 링크:\n\n- https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/function*\n- https://stackoverflow.com/questions/47027191/do-suspended-generator-functions-have-performance-costs\n\n\n\n# 결론:\n\n`function* keys()`은 포인터가 아닌 제너레이터 함수임을 알게 되었습니다. 원하는 시점에 키, 엔트리, 값 등을 생성할 때 사용합니다.\n\n제너레이터 함수는 실행 시간을 소비하지 않으며 사용될 때까지 메모리에 남아 있습니다.","ogImage":{"url":"/assets/img/2024-05-12-Tipsfromopen-sourceGeneratorfunctioninJavascript_0.png"},"coverImage":"/assets/img/2024-05-12-Tipsfromopen-sourceGeneratorfunctioninJavascript_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Next.js 소스 코드를 읽다가 *로 접두사가 붙은 함수 이름을 본 적이 있어요. 제 첫 생각은 \"이거 Javascript에서 포인터인가?\" 였어요. 구글 검색을 해보니 *로 접두사가 붙은 이 함수들은 제너레이터 함수라고 불린다는 걸 알았어요. 지금까지는 Javascript에서 제너레이터 함수에 대해 알지 못했어요.</p>\n<p>Next.js 소스 코드에는 아래와 같이 클래스 내에서 정의된 제너레이터 함수가 있어요:</p>\n<p><img src=\"/assets/img/2024-05-12-Tipsfromopen-sourceGeneratorfunctioninJavascript_0.png\" alt=\"이미지\"></p>\n<p>일반적으로 이런 제너레이터 함수를 클래스 바깥에서 정의할 때는 다음과 같은 구문을 사용해요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 출처: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*</span>\n<span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">generator</span>(<span class=\"hljs-params\">i</span>) {\n  <span class=\"hljs-keyword\">yield</span> i;\n  <span class=\"hljs-keyword\">yield</span> i + <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-keyword\">yield</span> i + <span class=\"hljs-number\">20</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> gen = <span class=\"hljs-title function_\">generator</span>(<span class=\"hljs-number\">10</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(gen.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>);\n<span class=\"hljs-comment\">// 예상 출력: 10</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(gen.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>);\n<span class=\"hljs-comment\">// 예상 출력: 20</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(gen.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>);\n</code></pre>\n<h1>Keys() as a generator function</h1>\n<pre><code class=\"hljs language-js\">public *<span class=\"hljs-title function_\">keys</span>(): <span class=\"hljs-title class_\">IterableIterator</span>&#x3C;string> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">headers</span>)) {\n      <span class=\"hljs-keyword\">const</span> name = key.<span class=\"hljs-title function_\">toLowerCase</span>()\n      <span class=\"hljs-keyword\">yield</span> name\n    }\n  }\n</code></pre>\n<p>이 코드 스니펫은 Next.js 소스 코드의 header.ts에서 가져온 것입니다. \"keys() 함수가 제너레이터 함수인 이유는 무엇일까?\" 라는 질문을 내 자신에게 했습니다.</p>\n<p>저는 ChatGPT에 이 코드를 붙여 넣었더니 \"메모리 효율성\"이라는 용어를 소개해 주었어요. 잠깐만, 어떻게 그런 걸까요?</p>\n<p>아래 코드를 복사해서 브라우저에 붙여넣어 보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> exampleObject = {\n  <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">\"John\"</span>,\n  <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">\"Doe\"</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>\n};\n\n<span class=\"hljs-comment\">// 제너레이터 함수를 사용하여 keys() 메서드 구현하기</span>\nexampleObject.<span class=\"hljs-property\">keys</span> = <span class=\"hljs-keyword\">function</span>* () {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>) {\n    <span class=\"hljs-keyword\">yield</span> key;\n  }\n};\n\n<span class=\"hljs-comment\">// 이제 exampleObject의 키를 for...of 루프를 사용하여 반복할 수 있습니다.</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> exampleObject.<span class=\"hljs-title function_\">keys</span>()) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(key);\n}\n\n<span class=\"hljs-comment\">// 결과:</span>\nfirstName\n<span class=\"hljs-title class_\">VM247</span>:<span class=\"hljs-number\">16</span> lastName\n<span class=\"hljs-title class_\">VM247</span>:<span class=\"hljs-number\">16</span> age\n<span class=\"hljs-title class_\">VM247</span>:<span class=\"hljs-number\">16</span> keys\n</code></pre>\n<p>하지만 keys()를 출력하려고 하면 다음과 같은 결과가 나타납니다:</p>\n<img src=\"/assets/img/2024-05-12-Tipsfromopen-sourceGeneratorfunctioninJavascript_1.png\">\n<p>한 번에 모든 키를 생성하고 배열에 저장하는 대신, 제너레이터 함수는 필요할 때 키를 즉석에서 생성합니다.</p>\n<h1>더 많은 읽을거리 링크:</h1>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/function\" rel=\"nofollow\" target=\"_blank\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/function</a>*</li>\n<li><a href=\"https://stackoverflow.com/questions/47027191/do-suspended-generator-functions-have-performance-costs\" rel=\"nofollow\" target=\"_blank\">https://stackoverflow.com/questions/47027191/do-suspended-generator-functions-have-performance-costs</a></li>\n</ul>\n<h1>결론:</h1>\n<p><code>function* keys()</code>은 포인터가 아닌 제너레이터 함수임을 알게 되었습니다. 원하는 시점에 키, 엔트리, 값 등을 생성할 때 사용합니다.</p>\n<p>제너레이터 함수는 실행 시간을 소비하지 않으며 사용될 때까지 메모리에 남아 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}