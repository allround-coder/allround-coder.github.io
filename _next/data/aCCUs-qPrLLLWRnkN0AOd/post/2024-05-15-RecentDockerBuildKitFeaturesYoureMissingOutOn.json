{"pageProps":{"post":{"title":"최근 놓치고 있는 도커 빌드킷의 기능들","description":"","date":"2024-05-15 03:35","slug":"2024-05-15-RecentDockerBuildKitFeaturesYoureMissingOutOn","content":"\n\n![이미지](/assets/img/2024-05-15-RecentDockerBuildKitFeaturesYoureMissingOutOn_0.png)\n\nBuildKit 도입으로 Docker의 향상된 빌더 백엔드가 도입되었고, 많은 새로운 기능이 Docker에 추가되었습니다. 그 중 많이 알려지지 않은 기능들을 알아야 할 것이며, Docker를 더 잘 활용하기 위해 사용해야 할 것들에 대한 소개입니다.\n\n# 디버깅\n\n가장 일반적인 작업인 디버깅부터 시작해보겠습니다. Docker 빌드의 디버깅은 항상 고통스러운 작업이었습니다. RUN 또는 COPY 명령이 실패하면 일반적으로 문제가 발생한 상황을 확인하고 디버깅하기가 까다로웠습니다. 일반적으로 RUN ls -la와 같은 명령을 추가하여 더 많은 정보를 얻기 위해 시도했습니다. 그러나 이제는 docker buildx debug를 통해 이 상황이 바뀌었습니다.\n\n\n\n```js\nexport BUILDX_EXPERIMENTAL=1\ndocker buildx debug --invoke /bin/sh --on=error build .\n\n[+] Building 1.2s (14/18)                docker:default\n...\n------\n > [builder 5/6] RUN exit 1:\n------\nDockerfile:10\n--------------------\n   8 |     RUN pip3 install -r requirements.txt\n   9 |     \n  10 | >>> RUN exit 1\n  11 |     \n  12 |     COPY . /app\n--------------------\nERROR: process \"/bin/sh -c exit 1\" did not complete successfully: exit code: 1\n[+] Building 0.0s (0/0)                  docker:default\nLaunching interactive container. Press Ctrl-a-c to switch to monitor console\nInteractive container was restarted with process \"u6agxp1ywqapemxrt8iexfv4h\". Press Ctrl-a-c to switch to the new container\n/ # ls -la\ntotal 72\ndrwxr-xr-x    1 root     root          4096 May  5 12:59 .\ndrwxr-xr-x    1 root     root          4096 May  5 12:59 ..\ndrwxr-xr-x    1 root     root          4096 May  4 10:11 app\n...\n```\n\n위 스니펫에서 먼저 실험적인 BuildKit 기능을 BUILDX_EXPERIMENTAL 환경 변수로 활성화합니다. 그런 다음 docker buildx debug를 통해 빌드를 시작합니다. 빌드가 어느 시점에서든 실패하면 컨테이너로 이동하여 실행 문맥을 탐색하고 디버깅할 수 있습니다.\n\n빌드가 실패했을 때만 디버그 세션을 시작하는 --on=error 옵션을 포함했음에 유의하세요.\n\n자세한 내용은 디버깅 문서를 참조하십시오.\n\n\n\n# 환경 변수\n\n만약 이전에 BuildKit으로 빌드를 실행했다면 새롭고 멋진 로그 출력을 눈치챘을 것입니다. 멋져 보이긴 하지만 디버깅할 때는 그리 실용적이지 않죠. 그럴 때는 평범한 로그 출력으로 전환할 수 있는 환경 변수가 있습니다:\n\n```js\nexport BUILDKIT_PROGRESS=plain\n```\n\n원하는 경우 rawjson으로 설정할 수도 있지만, 이는 사람이 직관적으로 읽기 어려울 수 있지만 어떤 방식으로든 로그를 처리하고 싶을 때 유용할 수 있습니다.\n\n\n\n만약 TTY 기반의 동적 출력을 좋아하지만 색상을 싫어한다면, 간단히 다음과 같이 변경할 수 있습니다:\n\n```js\nBUILDKIT_COLORS=\"run=green:warning=yellow:error=red:cancel=cyan\" docker buildx debug --invoke /bin/sh --on=error build .\n```\n\n위와 같이 출력이 변합니다:\n\n<img src=\"/assets/img/2024-05-15-RecentDockerBuildKitFeaturesYoureMissingOutOn_1.png\" />\n\n\n\n기타 환경 변수에 대한 문서를 참조해보세요.\n\n# Exporters\n\nBuildKit은 빌드 결과물이 어떻게 저장될지를 정의하는 수출자(Exporters) 개념을 소개합니다. 가장 유용한 두 가지 옵션은 이미지(image)와 레지스트리(registry)입니다. image는 기대했을 것처럼 빌드 결과물을 컨테이너 이미지로 저장하며, 레지스트리 수출자는 자동으로 지정된 레지스트리로 푸시합니다:\n\n```js\ndocker buildx build --output type=registry,name=martinheinz/testimage:latest .\n```\n\n\n\n우리가 해야 할 일은 --output 옵션을 지정하고 registry의 유형과 대상을 설정하는 것뿐입니다. 이 옵션은 한 번에 여러 레지스트리를 지정하는 것도 지원합니다:\n\n```js\ndocker buildx build --output type=registry,\\\"name=docker.io/martinheinz/testimage,docker.io/martinheinz/testimage2\\\" .\n```\n\n마지막으로, --cache-to 및 --cache-from 옵션을 제공하여 레지스트리에서 기존 이미지를 캐시 소스로 사용할 수도 있습니다:\n\n```js\ndocker buildx build --output type=registry,name=martinheinz/testimage:latest \\\n --cache-to type=inline \\\n --cache-from type=registry,ref=docker.io/martinheinz/testimage .\n\n...\n => CACHED docker-image://docker.io/docker/dockerfile:1.4@sha256:9ba7531bd80fb0a858632727cf7a112fbfd19b17e94c4e84ced81e24ef1a0dbc\n...\n => CACHED [builder 2/5] WORKDIR /app                                                                                                  0.0초\n => CACHED [builder 3/5] COPY requirements.txt /app                                                                                    0.0초\n => CACHED [builder 4/5] RUN --mount=type=cache,target=/root/.cache/pip     pip3 install -r requirements.txt                           0.0초\n => CACHED [builder 5/5] COPY . /app                                                                                                   0.0초\n => CACHED [dev-envs 1/3] RUN <<EOF (apk update...)                                                                                    0.0초\n => CACHED [dev-envs 2/3] RUN <<EOF (addgroup -S docker...)                                                                            0.0초\n => CACHED [dev-envs 3/3] COPY --from=gloursdocker/docker / /                                                                          0.0초\n => preparing layers for inline cache                                                                                                  0.0초\n...\n```\n\n\n\n# 이미지 도구\n\n도커 빌드x의 간편하지만 유용한 서브커맨드인 imagetools는 이미지를 가져오지 않고도 레지스트리의 이미지를 검사할 수 있게 해줍니다. 자세한 내용은 많은 예시를 포함하고 있지만, 저에게 가장 유용한 것은 원격 이미지의 다이제스트를 가져오는 것입니다:\n\n```js\ndocker buildx imagetools inspect alpine --format \"{json .Manifest}\" | jq .digest\n\"sha256:c5b1261d6d3e43071626931fc004f70149baeba2c8ec672bd4f27761f8e1ad6a\"\n```\n\n# 최신 Dockerfile 구문\n\n\n\n빌드킷과 함께 새로운 Dockerfile 구문이 도입되었습니다. 이를 통해 Dockerfile 프론트엔드라는 것이 사용됩니다. 현재 최신 구문을 활성화하려면 Dockerfile 맨 위에 다음과 같은 지시문을 추가해야 합니다:\n\n```js\n# syntax=docker/dockerfile:1.3\nFROM ...\n```\n\n버전을 확인하려면 dockerfile-upstream 도커 허브 저장소를 확인하세요.\n\n\n\n지금부터 소개할 첫 번째 도커 파일 문법 개선 사항은 here-docs입니다. 여기서는 멀티 라인 스크립트를 RUN 및 COPY 명령어에 전달할 수 있게 해줍니다:\n\n```js\n# syntax = docker/dockerfile:1.3-labs\nFROM debian\nRUN <<eot bash\n  apt-get update\n  apt-get install -y vim\neot\n\n# 같은 내용:\nRUN apt-get update && apt-get install -y vim\n```\n\n과거에는 단일 RUN에 여러 명령어를 넣고 싶다면 &&을 사용해야 했지만, 이제는 here-docs를 사용하여 일반 스크립트를 작성할 수 있습니다.\n\n게다가, 첫 번째 줄에서 해석기를 지정할 수 있어 Python 스크립트를 작성할 수도 있습니다:\n\n\n\n```bash\n# syntax = docker/dockerfile:1.3-labs\nFROM python:3.6\nRUN <<eot\n#!/usr/bin/env python\nprint(\"hello world\")\neot\n```\n\n# COPY and ADD Features\n\n새로운 Dockerfile 구문에서는 COPY 및 ADD에 대한 변경 사항과 개선 사항도 더 많이 있습니다.\n\nCOPY는 이제 --parents 옵션을 지원합니다:\n\n\n\n\n```js\n# syntax=docker/dockerfile:1.7.0-labs\nFROM ubuntu\n\nCOPY ./one/two/some.txt /normal/\n\nRUN find /normal\n#10 [3/5] RUN find /normal\n#10 0.223 /normal\n#10 0.223 /normal/some.txt\n\nCOPY --parents ./one/two/some.txt /parents/\n\nRUN find /parents\n#12 [5/5] RUN find /parents\n#12 0.509 /parents\n#12 0.509 /parents/one\n#12 0.509 /parents/one/two\n#12 0.509 /parents/one/two/some.txt\n```\n\n만약 일반 COPY로 중첩된 파일을 복사하면 이미지에는 부모 디렉토리 없이 파일 자체만 포함되며, --parents로 전체 파일 트리가 복사됩니다. 이는 cp --parents의 작동 방식과 유사합니다.\n\n--exclude 옵션을 사용할 수 있는 것과 같이, --parents 옵션도 사용할 수 있습니다:\n\n```js\nCOPY --exclude=*.txt ./some-dir/* ./some-dest\n```\n\n\n\n파일을 복사할 때 제외된 파일 및 패턴을 무시하는 옵션입니다.\n\n마침내 ADD 명령어도 향상되었습니다 - 이제 Git 저장소를 직접 추가할 수 있습니다:\n\n```js\n# syntax=docker/dockerfile:1.7.0-labs\nFROM ubuntu\n\nADD git@github.com:kelseyhightower/helloworld.git /repo\nRUN ls -la /repo\n```\n\n이 Dockerfile을 빌드하면 다음과 같은 결과를 얻을 수 있습니다:\n\n\n\n\ndocker buildx build --ssh default --progress=plain .\n- [2/3] ADD git@github.com:kelseyhightower/helloworld.git /repo\n  - Warning: Permanently added 'github.com' (ED25519) to the list of known hosts.\n  - ref: refs/heads/master HEAD\n    - 96a652519d1aaca11085ca3a7806bead4d2c273f   HEAD\n    - 96a652519d1aaca11085ca3a7806bead4d2c273f   refs/heads/master\n  - ref: refs/heads/master HEAD\n    - 96a652519d1aaca11085ca3a7806bead4d2c273f   HEAD\n    - From github.com:kelseyhightower/helloworld\n      - [new branch]      master     -> master\n      - [new branch]      master     -> origin/master\n  - DONE 7.4s\n- [2/3] ADD git@github.com:kelseyhightower/helloworld.git /repo\n  - DONE 0.0s\n\n\n이것은 비공개 저장소에도 작동합니다.\n\n더 많은 흥미로운 옵션을 문서에서 볼 수 있습니다. 예를 들어, --keep-git-dir이나 --checksum을 통해 아티팩트 체크섬을 유효성 검사할 수 있습니다.\n\n# 보너스: 들여쓰기\n\n\n\n그리고 BuildKit 기능은 아니지만, 최근에 발견한 하나의 사실은 Dockerfile에서 줄을 들여쓰면 잘 작동한다는 것입니다. 이렇게 하면 다단계 빌드를 진행할 때 가독성이 향상되는 효과를 얻을 수 있습니다:\n\n```js\n# syntax=docker/dockerfile:1\nFROM golang:1.21\n  WORKDIR /src\n  \n  COPY main.go .\n  RUN go build -o /bin/hello ./main.go\n\nFROM scratch\n  COPY --from=0 /bin/hello /bin/hello\n  CMD [\"/bin/hello\"]\n```\n\n처음에는 이상하게 보일 수 있지만, 내견에 따르면 더 읽기 쉬워져서 각 단계가 어디에서 시작되고 어떤 명령이 속해 있는지 명확해집니다.\n\n# 결론\n\n\n\n이 기사의 예시는 내가 가장 유용하다고 생각하는 기능들만을 보여줍니다. 그러나 Docker 공식 문서와 BuildKit 문서, 또한 최신 변경 사항을 확인해보십시오. Docker 블로그도 좋은 자료가 있으며 특히 표시된 글들을 확인해보세요.\n\n이 기사는 원래 martinheinz.dev에서 게시되었습니다.\n\n또한 다음 글들을 즐기실 수도 있습니다...","ogImage":{"url":"/assets/img/2024-05-15-RecentDockerBuildKitFeaturesYoureMissingOutOn_0.png"},"coverImage":"/assets/img/2024-05-15-RecentDockerBuildKitFeaturesYoureMissingOutOn_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-15-RecentDockerBuildKitFeaturesYoureMissingOutOn_0.png\" alt=\"이미지\"></p>\n<p>BuildKit 도입으로 Docker의 향상된 빌더 백엔드가 도입되었고, 많은 새로운 기능이 Docker에 추가되었습니다. 그 중 많이 알려지지 않은 기능들을 알아야 할 것이며, Docker를 더 잘 활용하기 위해 사용해야 할 것들에 대한 소개입니다.</p>\n<h1>디버깅</h1>\n<p>가장 일반적인 작업인 디버깅부터 시작해보겠습니다. Docker 빌드의 디버깅은 항상 고통스러운 작업이었습니다. RUN 또는 COPY 명령이 실패하면 일반적으로 문제가 발생한 상황을 확인하고 디버깅하기가 까다로웠습니다. 일반적으로 RUN ls -la와 같은 명령을 추가하여 더 많은 정보를 얻기 위해 시도했습니다. 그러나 이제는 docker buildx debug를 통해 이 상황이 바뀌었습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-variable constant_\">BUILDX_EXPERIMENTAL</span>=<span class=\"hljs-number\">1</span>\ndocker buildx debug --invoke /bin/sh --on=error build .\n\n[+] <span class=\"hljs-title class_\">Building</span> <span class=\"hljs-number\">1.</span>2s (<span class=\"hljs-number\">14</span>/<span class=\"hljs-number\">18</span>)                <span class=\"hljs-attr\">docker</span>:<span class=\"hljs-keyword\">default</span>\n...\n------\n > [builder <span class=\"hljs-number\">5</span>/<span class=\"hljs-number\">6</span>] <span class=\"hljs-variable constant_\">RUN</span> exit <span class=\"hljs-number\">1</span>:\n------\n<span class=\"hljs-title class_\">Dockerfile</span>:<span class=\"hljs-number\">10</span>\n--------------------\n   <span class=\"hljs-number\">8</span> |     <span class=\"hljs-variable constant_\">RUN</span> pip3 install -r requirements.<span class=\"hljs-property\">txt</span>\n   <span class=\"hljs-number\">9</span> |     \n  <span class=\"hljs-number\">10</span> | >>> <span class=\"hljs-variable constant_\">RUN</span> exit <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-number\">11</span> |     \n  <span class=\"hljs-number\">12</span> |     <span class=\"hljs-variable constant_\">COPY</span> . /app\n--------------------\n<span class=\"hljs-attr\">ERROR</span>: process <span class=\"hljs-string\">\"/bin/sh -c exit 1\"</span> did not complete <span class=\"hljs-attr\">successfully</span>: exit <span class=\"hljs-attr\">code</span>: <span class=\"hljs-number\">1</span>\n[+] <span class=\"hljs-title class_\">Building</span> <span class=\"hljs-number\">0.</span>0s (<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">0</span>)                  <span class=\"hljs-attr\">docker</span>:<span class=\"hljs-keyword\">default</span>\n<span class=\"hljs-title class_\">Launching</span> interactive container. <span class=\"hljs-title class_\">Press</span> <span class=\"hljs-title class_\">Ctrl</span>-a-c to <span class=\"hljs-keyword\">switch</span> to monitor <span class=\"hljs-variable language_\">console</span>\n<span class=\"hljs-title class_\">Interactive</span> container was restarted <span class=\"hljs-keyword\">with</span> process <span class=\"hljs-string\">\"u6agxp1ywqapemxrt8iexfv4h\"</span>. <span class=\"hljs-title class_\">Press</span> <span class=\"hljs-title class_\">Ctrl</span>-a-c to <span class=\"hljs-keyword\">switch</span> to the <span class=\"hljs-keyword\">new</span> container\n/ # ls -la\ntotal <span class=\"hljs-number\">72</span>\ndrwxr-xr-x    <span class=\"hljs-number\">1</span> root     root          <span class=\"hljs-number\">4096</span> <span class=\"hljs-title class_\">May</span>  <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">59</span> .\ndrwxr-xr-x    <span class=\"hljs-number\">1</span> root     root          <span class=\"hljs-number\">4096</span> <span class=\"hljs-title class_\">May</span>  <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">59</span> ..\ndrwxr-xr-x    <span class=\"hljs-number\">1</span> root     root          <span class=\"hljs-number\">4096</span> <span class=\"hljs-title class_\">May</span>  <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">11</span> app\n...\n</code></pre>\n<p>위 스니펫에서 먼저 실험적인 BuildKit 기능을 BUILDX_EXPERIMENTAL 환경 변수로 활성화합니다. 그런 다음 docker buildx debug를 통해 빌드를 시작합니다. 빌드가 어느 시점에서든 실패하면 컨테이너로 이동하여 실행 문맥을 탐색하고 디버깅할 수 있습니다.</p>\n<p>빌드가 실패했을 때만 디버그 세션을 시작하는 --on=error 옵션을 포함했음에 유의하세요.</p>\n<p>자세한 내용은 디버깅 문서를 참조하십시오.</p>\n<h1>환경 변수</h1>\n<p>만약 이전에 BuildKit으로 빌드를 실행했다면 새롭고 멋진 로그 출력을 눈치챘을 것입니다. 멋져 보이긴 하지만 디버깅할 때는 그리 실용적이지 않죠. 그럴 때는 평범한 로그 출력으로 전환할 수 있는 환경 변수가 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-variable constant_\">BUILDKIT_PROGRESS</span>=plain\n</code></pre>\n<p>원하는 경우 rawjson으로 설정할 수도 있지만, 이는 사람이 직관적으로 읽기 어려울 수 있지만 어떤 방식으로든 로그를 처리하고 싶을 때 유용할 수 있습니다.</p>\n<p>만약 TTY 기반의 동적 출력을 좋아하지만 색상을 싫어한다면, 간단히 다음과 같이 변경할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">BUILDKIT_COLORS</span>=<span class=\"hljs-string\">\"run=green:warning=yellow:error=red:cancel=cyan\"</span> docker buildx debug --invoke /bin/sh --on=error build .\n</code></pre>\n<p>위와 같이 출력이 변합니다:</p>\n<img src=\"/assets/img/2024-05-15-RecentDockerBuildKitFeaturesYoureMissingOutOn_1.png\">\n<p>기타 환경 변수에 대한 문서를 참조해보세요.</p>\n<h1>Exporters</h1>\n<p>BuildKit은 빌드 결과물이 어떻게 저장될지를 정의하는 수출자(Exporters) 개념을 소개합니다. 가장 유용한 두 가지 옵션은 이미지(image)와 레지스트리(registry)입니다. image는 기대했을 것처럼 빌드 결과물을 컨테이너 이미지로 저장하며, 레지스트리 수출자는 자동으로 지정된 레지스트리로 푸시합니다:</p>\n<pre><code class=\"hljs language-js\">docker buildx build --output type=registry,name=martinheinz/<span class=\"hljs-attr\">testimage</span>:latest .\n</code></pre>\n<p>우리가 해야 할 일은 --output 옵션을 지정하고 registry의 유형과 대상을 설정하는 것뿐입니다. 이 옵션은 한 번에 여러 레지스트리를 지정하는 것도 지원합니다:</p>\n<pre><code class=\"hljs language-js\">docker buildx build --output type=registry,\\<span class=\"hljs-string\">\"name=docker.io/martinheinz/testimage,docker.io/martinheinz/testimage2\\\" .\n</span></code></pre>\n<p>마지막으로, --cache-to 및 --cache-from 옵션을 제공하여 레지스트리에서 기존 이미지를 캐시 소스로 사용할 수도 있습니다:</p>\n<pre><code class=\"hljs language-js\">docker buildx build --output type=registry,name=martinheinz/<span class=\"hljs-attr\">testimage</span>:latest \\\n --cache-to type=inline \\\n --cache-<span class=\"hljs-keyword\">from</span> type=registry,ref=docker.<span class=\"hljs-property\">io</span>/martinheinz/testimage .\n\n...\n => <span class=\"hljs-variable constant_\">CACHED</span> docker-<span class=\"hljs-attr\">image</span>:<span class=\"hljs-comment\">//docker.io/docker/dockerfile:1.4@sha256:9ba7531bd80fb0a858632727cf7a112fbfd19b17e94c4e84ced81e24ef1a0dbc</span>\n...\n => <span class=\"hljs-variable constant_\">CACHED</span> [builder <span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">5</span>] <span class=\"hljs-variable constant_\">WORKDIR</span> /app                                                                                                  <span class=\"hljs-number\">0.0</span>초\n => <span class=\"hljs-variable constant_\">CACHED</span> [builder <span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">5</span>] <span class=\"hljs-variable constant_\">COPY</span> requirements.<span class=\"hljs-property\">txt</span> /app                                                                                    <span class=\"hljs-number\">0.0</span>초\n => <span class=\"hljs-variable constant_\">CACHED</span> [builder <span class=\"hljs-number\">4</span>/<span class=\"hljs-number\">5</span>] <span class=\"hljs-variable constant_\">RUN</span> --mount=type=cache,target=<span class=\"hljs-regexp\">/root/</span>.<span class=\"hljs-property\">cache</span>/pip     pip3 install -r requirements.<span class=\"hljs-property\">txt</span>                           <span class=\"hljs-number\">0.0</span>초\n => <span class=\"hljs-variable constant_\">CACHED</span> [builder <span class=\"hljs-number\">5</span>/<span class=\"hljs-number\">5</span>] <span class=\"hljs-variable constant_\">COPY</span> . /app                                                                                                   <span class=\"hljs-number\">0.0</span>초\n => <span class=\"hljs-variable constant_\">CACHED</span> [dev-envs <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">3</span>] <span class=\"hljs-variable constant_\">RUN</span> &#x3C;&#x3C;<span class=\"hljs-variable constant_\">EOF</span> (apk update...)                                                                                    <span class=\"hljs-number\">0.0</span>초\n => <span class=\"hljs-variable constant_\">CACHED</span> [dev-envs <span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">3</span>] <span class=\"hljs-variable constant_\">RUN</span> &#x3C;&#x3C;<span class=\"hljs-variable constant_\">EOF</span> (addgroup -S docker...)                                                                            <span class=\"hljs-number\">0.0</span>초\n => <span class=\"hljs-variable constant_\">CACHED</span> [dev-envs <span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">3</span>] <span class=\"hljs-variable constant_\">COPY</span> --<span class=\"hljs-keyword\">from</span>=gloursdocker/docker / /                                                                          <span class=\"hljs-number\">0.0</span>초\n => preparing layers <span class=\"hljs-keyword\">for</span> inline cache                                                                                                  <span class=\"hljs-number\">0.0</span>초\n...\n</code></pre>\n<h1>이미지 도구</h1>\n<p>도커 빌드x의 간편하지만 유용한 서브커맨드인 imagetools는 이미지를 가져오지 않고도 레지스트리의 이미지를 검사할 수 있게 해줍니다. 자세한 내용은 많은 예시를 포함하고 있지만, 저에게 가장 유용한 것은 원격 이미지의 다이제스트를 가져오는 것입니다:</p>\n<pre><code class=\"hljs language-js\">docker buildx imagetools inspect alpine --format <span class=\"hljs-string\">\"{json .Manifest}\"</span> | jq .<span class=\"hljs-property\">digest</span>\n<span class=\"hljs-string\">\"sha256:c5b1261d6d3e43071626931fc004f70149baeba2c8ec672bd4f27761f8e1ad6a\"</span>\n</code></pre>\n<h1>최신 Dockerfile 구문</h1>\n<p>빌드킷과 함께 새로운 Dockerfile 구문이 도입되었습니다. 이를 통해 Dockerfile 프론트엔드라는 것이 사용됩니다. 현재 최신 구문을 활성화하려면 Dockerfile 맨 위에 다음과 같은 지시문을 추가해야 합니다:</p>\n<pre><code class=\"hljs language-js\"># syntax=docker/<span class=\"hljs-attr\">dockerfile</span>:<span class=\"hljs-number\">1.3</span>\n<span class=\"hljs-variable constant_\">FROM</span> ...\n</code></pre>\n<p>버전을 확인하려면 dockerfile-upstream 도커 허브 저장소를 확인하세요.</p>\n<p>지금부터 소개할 첫 번째 도커 파일 문법 개선 사항은 here-docs입니다. 여기서는 멀티 라인 스크립트를 RUN 및 COPY 명령어에 전달할 수 있게 해줍니다:</p>\n<pre><code class=\"hljs language-js\"># syntax = docker/<span class=\"hljs-attr\">dockerfile</span>:<span class=\"hljs-number\">1.3</span>-labs\n<span class=\"hljs-variable constant_\">FROM</span> debian\n<span class=\"hljs-variable constant_\">RUN</span> &#x3C;&#x3C;eot bash\n  apt-get update\n  apt-get install -y vim\neot\n\n# 같은 내용:\n<span class=\"hljs-variable constant_\">RUN</span> apt-get update &#x26;&#x26; apt-get install -y vim\n</code></pre>\n<p>과거에는 단일 RUN에 여러 명령어를 넣고 싶다면 &#x26;&#x26;을 사용해야 했지만, 이제는 here-docs를 사용하여 일반 스크립트를 작성할 수 있습니다.</p>\n<p>게다가, 첫 번째 줄에서 해석기를 지정할 수 있어 Python 스크립트를 작성할 수도 있습니다:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># syntax = docker/dockerfile:1.3-labs</span>\nFROM python:3.6\nRUN &#x3C;&#x3C;<span class=\"hljs-string\">eot\n#!/usr/bin/env python\nprint(\"hello world\")\neot</span>\n</code></pre>\n<h1>COPY and ADD Features</h1>\n<p>새로운 Dockerfile 구문에서는 COPY 및 ADD에 대한 변경 사항과 개선 사항도 더 많이 있습니다.</p>\n<p>COPY는 이제 --parents 옵션을 지원합니다:</p>\n<pre><code class=\"hljs language-js\"># syntax=docker/<span class=\"hljs-attr\">dockerfile</span>:<span class=\"hljs-number\">1.7</span><span class=\"hljs-number\">.0</span>-labs\n<span class=\"hljs-variable constant_\">FROM</span> ubuntu\n\n<span class=\"hljs-variable constant_\">COPY</span> ./one/two/some.<span class=\"hljs-property\">txt</span> /normal/\n\n<span class=\"hljs-variable constant_\">RUN</span> find /normal\n#<span class=\"hljs-number\">10</span> [<span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">5</span>] <span class=\"hljs-variable constant_\">RUN</span> find /normal\n#<span class=\"hljs-number\">10</span> <span class=\"hljs-number\">0.223</span> /normal\n#<span class=\"hljs-number\">10</span> <span class=\"hljs-number\">0.223</span> /normal/some.<span class=\"hljs-property\">txt</span>\n\n<span class=\"hljs-variable constant_\">COPY</span> --parents ./one/two/some.<span class=\"hljs-property\">txt</span> /parents/\n\n<span class=\"hljs-variable constant_\">RUN</span> find /parents\n#<span class=\"hljs-number\">12</span> [<span class=\"hljs-number\">5</span>/<span class=\"hljs-number\">5</span>] <span class=\"hljs-variable constant_\">RUN</span> find /parents\n#<span class=\"hljs-number\">12</span> <span class=\"hljs-number\">0.509</span> /parents\n#<span class=\"hljs-number\">12</span> <span class=\"hljs-number\">0.509</span> /parents/one\n#<span class=\"hljs-number\">12</span> <span class=\"hljs-number\">0.509</span> /parents/one/two\n#<span class=\"hljs-number\">12</span> <span class=\"hljs-number\">0.509</span> /parents/one/two/some.<span class=\"hljs-property\">txt</span>\n</code></pre>\n<p>만약 일반 COPY로 중첩된 파일을 복사하면 이미지에는 부모 디렉토리 없이 파일 자체만 포함되며, --parents로 전체 파일 트리가 복사됩니다. 이는 cp --parents의 작동 방식과 유사합니다.</p>\n<p>--exclude 옵션을 사용할 수 있는 것과 같이, --parents 옵션도 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">COPY</span> --exclude=*.<span class=\"hljs-property\">txt</span> ./some-dir<span class=\"hljs-comment\">/* ./some-dest\n</span></code></pre>\n<p>파일을 복사할 때 제외된 파일 및 패턴을 무시하는 옵션입니다.</p>\n<p>마침내 ADD 명령어도 향상되었습니다 - 이제 Git 저장소를 직접 추가할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"># syntax=docker/<span class=\"hljs-attr\">dockerfile</span>:<span class=\"hljs-number\">1.7</span><span class=\"hljs-number\">.0</span>-labs\n<span class=\"hljs-variable constant_\">FROM</span> ubuntu\n\n<span class=\"hljs-variable constant_\">ADD</span> git@github.<span class=\"hljs-property\">com</span>:kelseyhightower/helloworld.<span class=\"hljs-property\">git</span> /repo\n<span class=\"hljs-variable constant_\">RUN</span> ls -la /repo\n</code></pre>\n<p>이 Dockerfile을 빌드하면 다음과 같은 결과를 얻을 수 있습니다:</p>\n<p>docker buildx build --ssh default --progress=plain .</p>\n<ul>\n<li>[2/3] ADD <a href=\"mailto:git@github.com\">git@github.com</a>:kelseyhightower/helloworld.git /repo\n<ul>\n<li>Warning: Permanently added 'github.com' (ED25519) to the list of known hosts.</li>\n<li>ref: refs/heads/master HEAD\n<ul>\n<li>96a652519d1aaca11085ca3a7806bead4d2c273f   HEAD</li>\n<li>96a652519d1aaca11085ca3a7806bead4d2c273f   refs/heads/master</li>\n</ul>\n</li>\n<li>ref: refs/heads/master HEAD\n<ul>\n<li>96a652519d1aaca11085ca3a7806bead4d2c273f   HEAD</li>\n<li>From github.com:kelseyhightower/helloworld\n<ul>\n<li>[new branch]      master     -> master</li>\n<li>[new branch]      master     -> origin/master</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DONE 7.4s</li>\n</ul>\n</li>\n<li>[2/3] ADD <a href=\"mailto:git@github.com\">git@github.com</a>:kelseyhightower/helloworld.git /repo\n<ul>\n<li>DONE 0.0s</li>\n</ul>\n</li>\n</ul>\n<p>이것은 비공개 저장소에도 작동합니다.</p>\n<p>더 많은 흥미로운 옵션을 문서에서 볼 수 있습니다. 예를 들어, --keep-git-dir이나 --checksum을 통해 아티팩트 체크섬을 유효성 검사할 수 있습니다.</p>\n<h1>보너스: 들여쓰기</h1>\n<p>그리고 BuildKit 기능은 아니지만, 최근에 발견한 하나의 사실은 Dockerfile에서 줄을 들여쓰면 잘 작동한다는 것입니다. 이렇게 하면 다단계 빌드를 진행할 때 가독성이 향상되는 효과를 얻을 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"># syntax=docker/<span class=\"hljs-attr\">dockerfile</span>:<span class=\"hljs-number\">1</span>\n<span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">golang</span>:<span class=\"hljs-number\">1.21</span>\n  <span class=\"hljs-variable constant_\">WORKDIR</span> /src\n  \n  <span class=\"hljs-variable constant_\">COPY</span> main.<span class=\"hljs-property\">go</span> .\n  <span class=\"hljs-variable constant_\">RUN</span> go build -o /bin/hello ./main.<span class=\"hljs-property\">go</span>\n\n<span class=\"hljs-variable constant_\">FROM</span> scratch\n  <span class=\"hljs-variable constant_\">COPY</span> --<span class=\"hljs-keyword\">from</span>=<span class=\"hljs-number\">0</span> /bin/hello /bin/hello\n  <span class=\"hljs-variable constant_\">CMD</span> [<span class=\"hljs-string\">\"/bin/hello\"</span>]\n</code></pre>\n<p>처음에는 이상하게 보일 수 있지만, 내견에 따르면 더 읽기 쉬워져서 각 단계가 어디에서 시작되고 어떤 명령이 속해 있는지 명확해집니다.</p>\n<h1>결론</h1>\n<p>이 기사의 예시는 내가 가장 유용하다고 생각하는 기능들만을 보여줍니다. 그러나 Docker 공식 문서와 BuildKit 문서, 또한 최신 변경 사항을 확인해보십시오. Docker 블로그도 좋은 자료가 있으며 특히 표시된 글들을 확인해보세요.</p>\n<p>이 기사는 원래 martinheinz.dev에서 게시되었습니다.</p>\n<p>또한 다음 글들을 즐기실 수도 있습니다...</p>\n</body>\n</html>\n"},"__N_SSG":true}