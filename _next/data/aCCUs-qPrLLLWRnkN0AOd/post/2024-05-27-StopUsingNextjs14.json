{"pageProps":{"post":{"title":"프로젝트에 Nextjs 14를 더이상 사용하면 안되는 이유","description":"","date":"2024-05-27 18:42","slug":"2024-05-27-StopUsingNextjs14","content":"\n\n\n![Next.js](/assets/img/2024-05-27-StopUsingNextjs14_0.png)\n\nNext.js는 여전히 가장 훌륭한 풀스택 프레임워크 중 하나로 손꼽힙니다.\n\n하지만, 우리에게는 Next.js 버전 14 사용을 중단할 시간이 될 수도 있습니다…\n\n왜냐하면 Next.js 15 릴리스 후보 (RC) 버전이 출시되었기 때문입니다!\n\n\n<div class=\"content-ad\"></div>\n\nNext.js 15 RC에는 많은 흥미로운 새로운 기능이 약속되어 있어요. 오늘은 그 중 4가지를 살펴볼 거에요!\n\n그럼 이제... 바로 시작해 봅시다!\n\n## 1. 부분 사전 렌더링\n\n부분 사전 렌더링 (PPR)은 Next.js 14에서 소개된 특별한 기능으로, 정적 및 동적 페이지 콘텐츠가 완벽하게 공존할 수 있도록 해줘요.\n\n<div class=\"content-ad\"></div>\n\nPPR 작동 방식에 대해 더 알고 싶다면, 이 문서를 자유롭게 확인해 보세요.\n\n하지만 Next.js 15에서는 PPR의 점진적 적용이 마침내 가능해졌습니다!\n\n이는 experimental_ppr 플래그를 true로 설정하여 특정 page.tsx 및 layout.tsx 파일을 PPR에 선택적으로 선택할 수 있다는 의미입니다.\n\n```js\nimport { Suspense } from \"react\"\nimport { StaticComponent, DynamicComponent } from \"@/app/ui\"\n\n// 이 페이지만 PPR로 선택\nexport const experimental_ppr = true\n \nexport default function Page() {\n  return {\n     <>\n      <StaticComponent />\n      <Suspense fallback={...}>\n       <DynamicComponent />\n      </Suspense>\n     </>\n  };\n}\n```\n\n<div class=\"content-ad\"></div>\n\n다음으로 next.config.js 파일에서 experimental.ppr 구성을 'incremental'로 설정하세요:\n\n```js\nconst nextConfig = {\n  experimental: {\n    ppr: 'incremental',\n  },\n};\n\nmodule.exports = nextConfig;\n```\n\n# 2. next/after\n\nnext/after은 응답 스트리밍이 종료된 후 작업을 예약할 수 있는 새로운 API입니다.\n\n<div class=\"content-ad\"></div>\n\n다시 말해, 서버리스 함수가 계산을 마치면, 이제 새로운 after() 함수 내에서 추가 코드를 실행할 수 있습니다.\n\n![이미지](/assets/img/2024-05-27-StopUsingNextjs14_1.png)\n\n이것은 후속 fetch 로깅 및 분석에 매우 유용합니다.\n\n지금 next/after를 사용하려면, next.config.js 파일에 다음과 같이 experimental.after 설정을 추가할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n아래는 Next.js 서버 액션 내에서 `after()` 함수를 사용하는 예시입니다:\n\n```js\n\"use server\"\n\nfunction next_after() {\n  // 여러분의 함수 로직...\n  const something = true\n\n  // 보조 작업 - 데이터가 반환된 후에 데이터를 로깅합니다.\n  after(() => {\n    console.log(something)\n  })\n\n  // 주요 작업 - 데이터를 반환합니다.\n  return something\n}\n```\n\n# 3. 캐싱\n\n<div class=\"content-ad\"></div>\n\nThe Next.js 팀이 우리의 의견을 들어주었어요!\n\n- fetch 요청\n- GET 핸들러\n- 그리고 클라이언트 네비게이션...\n\n기본적으로 더 이상 캐시되지 않아요!\n\n이 변화는 기다리고 있던 변화였고, Next.js 15가 이를 마침내 구현했어요.\n\n<div class=\"content-ad\"></div>\n\n# 4. 리액트 19 지원\n\n공식으로, Next.js 15 RC는 리액트 19 RC와 완벽하게 호환됩니다!\n\n리액트 19 릴리스에 대해 들은 적이 없다면, 여기 리액트의 공식 트윗이 있습니다.\n\n더 알아보기 위해 여기에서 리액트 컨퍼런스 키노트를 시청할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n이 글이 Next.js 14 시대를 떠나 Next.js 15에 흥분하게 만들었으면 좋겠어요.\n\nNext.js 15는 무수히 많은 흥미로운 변화를 가져왔으며, 오늘 우리는 그 중 4가지를 상세히 다뤘습니다.\n\n# 제휴사\n\n<div class=\"content-ad\"></div>\n\n- 올인원 SaaS 프로젝트 템플릿\n- Figma 홈: 제가 모든 프로젝트에서 사용하는 UI 디자인 도구입니다.\n- Figma 프로페셔널: 당신이 필요로 할 유일한 UI 디자인 도구입니다.\n- FigJam: 직관적인 다이어그램 및 브레인스토밍으로 마음을 펼쳐 보세요.\n- 노션: 제 인생 전체를 조직하는 데 사용되는 도구입니다.\n- Notion AI: ChatGPT를 뛰어넘고 노션 워크플로우를 견고하게 만들어 줄 AI 도구입니다.\n\n# 참고 자료\n\n- https://nextjs.org/blog/next-15-rc","ogImage":{"url":"/assets/img/2024-05-27-StopUsingNextjs14_0.png"},"coverImage":"/assets/img/2024-05-27-StopUsingNextjs14_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-27-StopUsingNextjs14_0.png\" alt=\"Next.js\"></p>\n<p>Next.js는 여전히 가장 훌륭한 풀스택 프레임워크 중 하나로 손꼽힙니다.</p>\n<p>하지만, 우리에게는 Next.js 버전 14 사용을 중단할 시간이 될 수도 있습니다…</p>\n<p>왜냐하면 Next.js 15 릴리스 후보 (RC) 버전이 출시되었기 때문입니다!</p>\n<div class=\"content-ad\"></div>\n<p>Next.js 15 RC에는 많은 흥미로운 새로운 기능이 약속되어 있어요. 오늘은 그 중 4가지를 살펴볼 거에요!</p>\n<p>그럼 이제... 바로 시작해 봅시다!</p>\n<h2>1. 부분 사전 렌더링</h2>\n<p>부분 사전 렌더링 (PPR)은 Next.js 14에서 소개된 특별한 기능으로, 정적 및 동적 페이지 콘텐츠가 완벽하게 공존할 수 있도록 해줘요.</p>\n<div class=\"content-ad\"></div>\n<p>PPR 작동 방식에 대해 더 알고 싶다면, 이 문서를 자유롭게 확인해 보세요.</p>\n<p>하지만 Next.js 15에서는 PPR의 점진적 적용이 마침내 가능해졌습니다!</p>\n<p>이는 experimental_ppr 플래그를 true로 설정하여 특정 page.tsx 및 layout.tsx 파일을 PPR에 선택적으로 선택할 수 있다는 의미입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Suspense</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">StaticComponent</span>, <span class=\"hljs-title class_\">DynamicComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/app/ui\"</span>\n\n<span class=\"hljs-comment\">// 이 페이지만 PPR로 선택</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> experimental_ppr = <span class=\"hljs-literal\">true</span>\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> {\n     <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">StaticComponent</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{...}</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">DynamicComponent</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Suspense</span>></span>\n     <span class=\"hljs-tag\">&#x3C;/></span></span>\n  };\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>다음으로 next.config.js 파일에서 experimental.ppr 구성을 'incremental'로 설정하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> nextConfig = {\n  <span class=\"hljs-attr\">experimental</span>: {\n    <span class=\"hljs-attr\">ppr</span>: <span class=\"hljs-string\">'incremental'</span>,\n  },\n};\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = nextConfig;\n</code></pre>\n<h1>2. next/after</h1>\n<p>next/after은 응답 스트리밍이 종료된 후 작업을 예약할 수 있는 새로운 API입니다.</p>\n<div class=\"content-ad\"></div>\n<p>다시 말해, 서버리스 함수가 계산을 마치면, 이제 새로운 after() 함수 내에서 추가 코드를 실행할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-27-StopUsingNextjs14_1.png\" alt=\"이미지\"></p>\n<p>이것은 후속 fetch 로깅 및 분석에 매우 유용합니다.</p>\n<p>지금 next/after를 사용하려면, next.config.js 파일에 다음과 같이 experimental.after 설정을 추가할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<p>아래는 Next.js 서버 액션 내에서 <code>after()</code> 함수를 사용하는 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"use server\"</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">next_after</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 여러분의 함수 로직...</span>\n  <span class=\"hljs-keyword\">const</span> something = <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\">// 보조 작업 - 데이터가 반환된 후에 데이터를 로깅합니다.</span>\n  <span class=\"hljs-title function_\">after</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(something)\n  })\n\n  <span class=\"hljs-comment\">// 주요 작업 - 데이터를 반환합니다.</span>\n  <span class=\"hljs-keyword\">return</span> something\n}\n</code></pre>\n<h1>3. 캐싱</h1>\n<div class=\"content-ad\"></div>\n<p>The Next.js 팀이 우리의 의견을 들어주었어요!</p>\n<ul>\n<li>fetch 요청</li>\n<li>GET 핸들러</li>\n<li>그리고 클라이언트 네비게이션...</li>\n</ul>\n<p>기본적으로 더 이상 캐시되지 않아요!</p>\n<p>이 변화는 기다리고 있던 변화였고, Next.js 15가 이를 마침내 구현했어요.</p>\n<div class=\"content-ad\"></div>\n<h1>4. 리액트 19 지원</h1>\n<p>공식으로, Next.js 15 RC는 리액트 19 RC와 완벽하게 호환됩니다!</p>\n<p>리액트 19 릴리스에 대해 들은 적이 없다면, 여기 리액트의 공식 트윗이 있습니다.</p>\n<p>더 알아보기 위해 여기에서 리액트 컨퍼런스 키노트를 시청할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>결론</h1>\n<p>이 글이 Next.js 14 시대를 떠나 Next.js 15에 흥분하게 만들었으면 좋겠어요.</p>\n<p>Next.js 15는 무수히 많은 흥미로운 변화를 가져왔으며, 오늘 우리는 그 중 4가지를 상세히 다뤘습니다.</p>\n<h1>제휴사</h1>\n<div class=\"content-ad\"></div>\n<ul>\n<li>올인원 SaaS 프로젝트 템플릿</li>\n<li>Figma 홈: 제가 모든 프로젝트에서 사용하는 UI 디자인 도구입니다.</li>\n<li>Figma 프로페셔널: 당신이 필요로 할 유일한 UI 디자인 도구입니다.</li>\n<li>FigJam: 직관적인 다이어그램 및 브레인스토밍으로 마음을 펼쳐 보세요.</li>\n<li>노션: 제 인생 전체를 조직하는 데 사용되는 도구입니다.</li>\n<li>Notion AI: ChatGPT를 뛰어넘고 노션 워크플로우를 견고하게 만들어 줄 AI 도구입니다.</li>\n</ul>\n<h1>참고 자료</h1>\n<ul>\n<li><a href=\"https://nextjs.org/blog/next-15-rc\" rel=\"nofollow\" target=\"_blank\">https://nextjs.org/blog/next-15-rc</a></li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}